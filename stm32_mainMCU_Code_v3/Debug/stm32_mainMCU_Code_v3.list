
stm32_mainMCU_Code_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b974  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012c8  0801bab8  0801bab8  0002bab8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801cd80  0801cd80  0002cd80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801cd88  0801cd88  0002cd88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801cd8c  0801cd8c  0002cd8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000002d8  20000004  0801cd90  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  200002dc  0801d068  000302dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000378  0801d101  00030378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00029de8  20000390  0801d112  00030390  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2002a178  0801d112  0003a178  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030389  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00040000  2**2
                  ALLOC
 13 MB_MEM1       000000b8  20030028  20030028  00040000  2**2
                  ALLOC
 14 MB_MEM2       00000a77  200300e0  200300e0  00040000  2**2
                  ALLOC
 15 .debug_info   00075071  00000000  00000000  000303b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 0000cbdc  00000000  00000000  000a542a  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 000042c8  00000000  00000000  000b2008  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00003d20  00000000  00000000  000b62d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   0002d7f0  00000000  00000000  000b9ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    0001acab  00000000  00000000  000e77e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      000000f0  00000000  00000000  0010248b  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000113a4  00000000  00000000  0010257c  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_loc    0000131b  00000000  00000000  00113920  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000390 	.word	0x20000390
 800015c:	00000000 	.word	0x00000000
 8000160:	0801ba9c 	.word	0x0801ba9c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000394 	.word	0x20000394
 800017c:	0801ba9c 	.word	0x0801ba9c

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <__aeabi_drsub>:
 8000194:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000198:	e002      	b.n	80001a0 <__adddf3>
 800019a:	bf00      	nop

0800019c <__aeabi_dsub>:
 800019c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001a0 <__adddf3>:
 80001a0:	b530      	push	{r4, r5, lr}
 80001a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001aa:	ea94 0f05 	teq	r4, r5
 80001ae:	bf08      	it	eq
 80001b0:	ea90 0f02 	teqeq	r0, r2
 80001b4:	bf1f      	itttt	ne
 80001b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c6:	f000 80e2 	beq.w	800038e <__adddf3+0x1ee>
 80001ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001d2:	bfb8      	it	lt
 80001d4:	426d      	neglt	r5, r5
 80001d6:	dd0c      	ble.n	80001f2 <__adddf3+0x52>
 80001d8:	442c      	add	r4, r5
 80001da:	ea80 0202 	eor.w	r2, r0, r2
 80001de:	ea81 0303 	eor.w	r3, r1, r3
 80001e2:	ea82 0000 	eor.w	r0, r2, r0
 80001e6:	ea83 0101 	eor.w	r1, r3, r1
 80001ea:	ea80 0202 	eor.w	r2, r0, r2
 80001ee:	ea81 0303 	eor.w	r3, r1, r3
 80001f2:	2d36      	cmp	r5, #54	; 0x36
 80001f4:	bf88      	it	hi
 80001f6:	bd30      	pophi	{r4, r5, pc}
 80001f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000200:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000204:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x70>
 800020a:	4240      	negs	r0, r0
 800020c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000210:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000214:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000218:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800021c:	d002      	beq.n	8000224 <__adddf3+0x84>
 800021e:	4252      	negs	r2, r2
 8000220:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000224:	ea94 0f05 	teq	r4, r5
 8000228:	f000 80a7 	beq.w	800037a <__adddf3+0x1da>
 800022c:	f1a4 0401 	sub.w	r4, r4, #1
 8000230:	f1d5 0e20 	rsbs	lr, r5, #32
 8000234:	db0d      	blt.n	8000252 <__adddf3+0xb2>
 8000236:	fa02 fc0e 	lsl.w	ip, r2, lr
 800023a:	fa22 f205 	lsr.w	r2, r2, r5
 800023e:	1880      	adds	r0, r0, r2
 8000240:	f141 0100 	adc.w	r1, r1, #0
 8000244:	fa03 f20e 	lsl.w	r2, r3, lr
 8000248:	1880      	adds	r0, r0, r2
 800024a:	fa43 f305 	asr.w	r3, r3, r5
 800024e:	4159      	adcs	r1, r3
 8000250:	e00e      	b.n	8000270 <__adddf3+0xd0>
 8000252:	f1a5 0520 	sub.w	r5, r5, #32
 8000256:	f10e 0e20 	add.w	lr, lr, #32
 800025a:	2a01      	cmp	r2, #1
 800025c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000260:	bf28      	it	cs
 8000262:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000266:	fa43 f305 	asr.w	r3, r3, r5
 800026a:	18c0      	adds	r0, r0, r3
 800026c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000270:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000274:	d507      	bpl.n	8000286 <__adddf3+0xe6>
 8000276:	f04f 0e00 	mov.w	lr, #0
 800027a:	f1dc 0c00 	rsbs	ip, ip, #0
 800027e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000282:	eb6e 0101 	sbc.w	r1, lr, r1
 8000286:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800028a:	d31b      	bcc.n	80002c4 <__adddf3+0x124>
 800028c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000290:	d30c      	bcc.n	80002ac <__adddf3+0x10c>
 8000292:	0849      	lsrs	r1, r1, #1
 8000294:	ea5f 0030 	movs.w	r0, r0, rrx
 8000298:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800029c:	f104 0401 	add.w	r4, r4, #1
 80002a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a8:	f080 809a 	bcs.w	80003e0 <__adddf3+0x240>
 80002ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002b0:	bf08      	it	eq
 80002b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b6:	f150 0000 	adcs.w	r0, r0, #0
 80002ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002be:	ea41 0105 	orr.w	r1, r1, r5
 80002c2:	bd30      	pop	{r4, r5, pc}
 80002c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c8:	4140      	adcs	r0, r0
 80002ca:	eb41 0101 	adc.w	r1, r1, r1
 80002ce:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002d2:	f1a4 0401 	sub.w	r4, r4, #1
 80002d6:	d1e9      	bne.n	80002ac <__adddf3+0x10c>
 80002d8:	f091 0f00 	teq	r1, #0
 80002dc:	bf04      	itt	eq
 80002de:	4601      	moveq	r1, r0
 80002e0:	2000      	moveq	r0, #0
 80002e2:	fab1 f381 	clz	r3, r1
 80002e6:	bf08      	it	eq
 80002e8:	3320      	addeq	r3, #32
 80002ea:	f1a3 030b 	sub.w	r3, r3, #11
 80002ee:	f1b3 0220 	subs.w	r2, r3, #32
 80002f2:	da0c      	bge.n	800030e <__adddf3+0x16e>
 80002f4:	320c      	adds	r2, #12
 80002f6:	dd08      	ble.n	800030a <__adddf3+0x16a>
 80002f8:	f102 0c14 	add.w	ip, r2, #20
 80002fc:	f1c2 020c 	rsb	r2, r2, #12
 8000300:	fa01 f00c 	lsl.w	r0, r1, ip
 8000304:	fa21 f102 	lsr.w	r1, r1, r2
 8000308:	e00c      	b.n	8000324 <__adddf3+0x184>
 800030a:	f102 0214 	add.w	r2, r2, #20
 800030e:	bfd8      	it	le
 8000310:	f1c2 0c20 	rsble	ip, r2, #32
 8000314:	fa01 f102 	lsl.w	r1, r1, r2
 8000318:	fa20 fc0c 	lsr.w	ip, r0, ip
 800031c:	bfdc      	itt	le
 800031e:	ea41 010c 	orrle.w	r1, r1, ip
 8000322:	4090      	lslle	r0, r2
 8000324:	1ae4      	subs	r4, r4, r3
 8000326:	bfa2      	ittt	ge
 8000328:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800032c:	4329      	orrge	r1, r5
 800032e:	bd30      	popge	{r4, r5, pc}
 8000330:	ea6f 0404 	mvn.w	r4, r4
 8000334:	3c1f      	subs	r4, #31
 8000336:	da1c      	bge.n	8000372 <__adddf3+0x1d2>
 8000338:	340c      	adds	r4, #12
 800033a:	dc0e      	bgt.n	800035a <__adddf3+0x1ba>
 800033c:	f104 0414 	add.w	r4, r4, #20
 8000340:	f1c4 0220 	rsb	r2, r4, #32
 8000344:	fa20 f004 	lsr.w	r0, r0, r4
 8000348:	fa01 f302 	lsl.w	r3, r1, r2
 800034c:	ea40 0003 	orr.w	r0, r0, r3
 8000350:	fa21 f304 	lsr.w	r3, r1, r4
 8000354:	ea45 0103 	orr.w	r1, r5, r3
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f1c4 040c 	rsb	r4, r4, #12
 800035e:	f1c4 0220 	rsb	r2, r4, #32
 8000362:	fa20 f002 	lsr.w	r0, r0, r2
 8000366:	fa01 f304 	lsl.w	r3, r1, r4
 800036a:	ea40 0003 	orr.w	r0, r0, r3
 800036e:	4629      	mov	r1, r5
 8000370:	bd30      	pop	{r4, r5, pc}
 8000372:	fa21 f004 	lsr.w	r0, r1, r4
 8000376:	4629      	mov	r1, r5
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	f094 0f00 	teq	r4, #0
 800037e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000382:	bf06      	itte	eq
 8000384:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000388:	3401      	addeq	r4, #1
 800038a:	3d01      	subne	r5, #1
 800038c:	e74e      	b.n	800022c <__adddf3+0x8c>
 800038e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000392:	bf18      	it	ne
 8000394:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000398:	d029      	beq.n	80003ee <__adddf3+0x24e>
 800039a:	ea94 0f05 	teq	r4, r5
 800039e:	bf08      	it	eq
 80003a0:	ea90 0f02 	teqeq	r0, r2
 80003a4:	d005      	beq.n	80003b2 <__adddf3+0x212>
 80003a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003aa:	bf04      	itt	eq
 80003ac:	4619      	moveq	r1, r3
 80003ae:	4610      	moveq	r0, r2
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	ea91 0f03 	teq	r1, r3
 80003b6:	bf1e      	ittt	ne
 80003b8:	2100      	movne	r1, #0
 80003ba:	2000      	movne	r0, #0
 80003bc:	bd30      	popne	{r4, r5, pc}
 80003be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003c2:	d105      	bne.n	80003d0 <__adddf3+0x230>
 80003c4:	0040      	lsls	r0, r0, #1
 80003c6:	4149      	adcs	r1, r1
 80003c8:	bf28      	it	cs
 80003ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d4:	bf3c      	itt	cc
 80003d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003da:	bd30      	popcc	{r4, r5, pc}
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e8:	f04f 0000 	mov.w	r0, #0
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003f2:	bf1a      	itte	ne
 80003f4:	4619      	movne	r1, r3
 80003f6:	4610      	movne	r0, r2
 80003f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003fc:	bf1c      	itt	ne
 80003fe:	460b      	movne	r3, r1
 8000400:	4602      	movne	r2, r0
 8000402:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000406:	bf06      	itte	eq
 8000408:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800040c:	ea91 0f03 	teqeq	r1, r3
 8000410:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	bf00      	nop

08000418 <__aeabi_ui2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f04f 0500 	mov.w	r5, #0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e750      	b.n	80002d8 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_i2d>:
 8000438:	f090 0f00 	teq	r0, #0
 800043c:	bf04      	itt	eq
 800043e:	2100      	moveq	r1, #0
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000448:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800044c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000450:	bf48      	it	mi
 8000452:	4240      	negmi	r0, r0
 8000454:	f04f 0100 	mov.w	r1, #0
 8000458:	e73e      	b.n	80002d8 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_f2d>:
 800045c:	0042      	lsls	r2, r0, #1
 800045e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000462:	ea4f 0131 	mov.w	r1, r1, rrx
 8000466:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800046a:	bf1f      	itttt	ne
 800046c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000470:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000474:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000478:	4770      	bxne	lr
 800047a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047e:	bf08      	it	eq
 8000480:	4770      	bxeq	lr
 8000482:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000486:	bf04      	itt	eq
 8000488:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000494:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000498:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800049c:	e71c      	b.n	80002d8 <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_ul2d>:
 80004a0:	ea50 0201 	orrs.w	r2, r0, r1
 80004a4:	bf08      	it	eq
 80004a6:	4770      	bxeq	lr
 80004a8:	b530      	push	{r4, r5, lr}
 80004aa:	f04f 0500 	mov.w	r5, #0
 80004ae:	e00a      	b.n	80004c6 <__aeabi_l2d+0x16>

080004b0 <__aeabi_l2d>:
 80004b0:	ea50 0201 	orrs.w	r2, r0, r1
 80004b4:	bf08      	it	eq
 80004b6:	4770      	bxeq	lr
 80004b8:	b530      	push	{r4, r5, lr}
 80004ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004be:	d502      	bpl.n	80004c6 <__aeabi_l2d+0x16>
 80004c0:	4240      	negs	r0, r0
 80004c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004d2:	f43f aed8 	beq.w	8000286 <__adddf3+0xe6>
 80004d6:	f04f 0203 	mov.w	r2, #3
 80004da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004de:	bf18      	it	ne
 80004e0:	3203      	addne	r2, #3
 80004e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e6:	bf18      	it	ne
 80004e8:	3203      	addne	r2, #3
 80004ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ee:	f1c2 0320 	rsb	r3, r2, #32
 80004f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f6:	fa20 f002 	lsr.w	r0, r0, r2
 80004fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fe:	ea40 000e 	orr.w	r0, r0, lr
 8000502:	fa21 f102 	lsr.w	r1, r1, r2
 8000506:	4414      	add	r4, r2
 8000508:	e6bd      	b.n	8000286 <__adddf3+0xe6>
 800050a:	bf00      	nop

0800050c <__aeabi_dmul>:
 800050c:	b570      	push	{r4, r5, r6, lr}
 800050e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000512:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000516:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800051a:	bf1d      	ittte	ne
 800051c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000520:	ea94 0f0c 	teqne	r4, ip
 8000524:	ea95 0f0c 	teqne	r5, ip
 8000528:	f000 f8de 	bleq	80006e8 <__aeabi_dmul+0x1dc>
 800052c:	442c      	add	r4, r5
 800052e:	ea81 0603 	eor.w	r6, r1, r3
 8000532:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000536:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800053a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053e:	bf18      	it	ne
 8000540:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000544:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000548:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800054c:	d038      	beq.n	80005c0 <__aeabi_dmul+0xb4>
 800054e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000552:	f04f 0500 	mov.w	r5, #0
 8000556:	fbe1 e502 	umlal	lr, r5, r1, r2
 800055a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000562:	f04f 0600 	mov.w	r6, #0
 8000566:	fbe1 5603 	umlal	r5, r6, r1, r3
 800056a:	f09c 0f00 	teq	ip, #0
 800056e:	bf18      	it	ne
 8000570:	f04e 0e01 	orrne.w	lr, lr, #1
 8000574:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000578:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800057c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000580:	d204      	bcs.n	800058c <__aeabi_dmul+0x80>
 8000582:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000586:	416d      	adcs	r5, r5
 8000588:	eb46 0606 	adc.w	r6, r6, r6
 800058c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000590:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000594:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000598:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800059c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a4:	bf88      	it	hi
 80005a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005aa:	d81e      	bhi.n	80005ea <__aeabi_dmul+0xde>
 80005ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005b0:	bf08      	it	eq
 80005b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b6:	f150 0000 	adcs.w	r0, r0, #0
 80005ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005be:	bd70      	pop	{r4, r5, r6, pc}
 80005c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c4:	ea46 0101 	orr.w	r1, r6, r1
 80005c8:	ea40 0002 	orr.w	r0, r0, r2
 80005cc:	ea81 0103 	eor.w	r1, r1, r3
 80005d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d4:	bfc2      	ittt	gt
 80005d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005de:	bd70      	popgt	{r4, r5, r6, pc}
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f04f 0e00 	mov.w	lr, #0
 80005e8:	3c01      	subs	r4, #1
 80005ea:	f300 80ab 	bgt.w	8000744 <__aeabi_dmul+0x238>
 80005ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005f2:	bfde      	ittt	le
 80005f4:	2000      	movle	r0, #0
 80005f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005fa:	bd70      	pople	{r4, r5, r6, pc}
 80005fc:	f1c4 0400 	rsb	r4, r4, #0
 8000600:	3c20      	subs	r4, #32
 8000602:	da35      	bge.n	8000670 <__aeabi_dmul+0x164>
 8000604:	340c      	adds	r4, #12
 8000606:	dc1b      	bgt.n	8000640 <__aeabi_dmul+0x134>
 8000608:	f104 0414 	add.w	r4, r4, #20
 800060c:	f1c4 0520 	rsb	r5, r4, #32
 8000610:	fa00 f305 	lsl.w	r3, r0, r5
 8000614:	fa20 f004 	lsr.w	r0, r0, r4
 8000618:	fa01 f205 	lsl.w	r2, r1, r5
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000624:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	fa21 f604 	lsr.w	r6, r1, r4
 8000630:	eb42 0106 	adc.w	r1, r2, r6
 8000634:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000638:	bf08      	it	eq
 800063a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063e:	bd70      	pop	{r4, r5, r6, pc}
 8000640:	f1c4 040c 	rsb	r4, r4, #12
 8000644:	f1c4 0520 	rsb	r5, r4, #32
 8000648:	fa00 f304 	lsl.w	r3, r0, r4
 800064c:	fa20 f005 	lsr.w	r0, r0, r5
 8000650:	fa01 f204 	lsl.w	r2, r1, r4
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	f141 0100 	adc.w	r1, r1, #0
 8000664:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000668:	bf08      	it	eq
 800066a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f205 	lsl.w	r2, r0, r5
 8000678:	ea4e 0e02 	orr.w	lr, lr, r2
 800067c:	fa20 f304 	lsr.w	r3, r0, r4
 8000680:	fa01 f205 	lsl.w	r2, r1, r5
 8000684:	ea43 0302 	orr.w	r3, r3, r2
 8000688:	fa21 f004 	lsr.w	r0, r1, r4
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	fa21 f204 	lsr.w	r2, r1, r4
 8000694:	ea20 0002 	bic.w	r0, r0, r2
 8000698:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f094 0f00 	teq	r4, #0
 80006ac:	d10f      	bne.n	80006ce <__aeabi_dmul+0x1c2>
 80006ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006b2:	0040      	lsls	r0, r0, #1
 80006b4:	eb41 0101 	adc.w	r1, r1, r1
 80006b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3c01      	subeq	r4, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1a6>
 80006c2:	ea41 0106 	orr.w	r1, r1, r6
 80006c6:	f095 0f00 	teq	r5, #0
 80006ca:	bf18      	it	ne
 80006cc:	4770      	bxne	lr
 80006ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006d2:	0052      	lsls	r2, r2, #1
 80006d4:	eb43 0303 	adc.w	r3, r3, r3
 80006d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006dc:	bf08      	it	eq
 80006de:	3d01      	subeq	r5, #1
 80006e0:	d0f7      	beq.n	80006d2 <__aeabi_dmul+0x1c6>
 80006e2:	ea43 0306 	orr.w	r3, r3, r6
 80006e6:	4770      	bx	lr
 80006e8:	ea94 0f0c 	teq	r4, ip
 80006ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006f0:	bf18      	it	ne
 80006f2:	ea95 0f0c 	teqne	r5, ip
 80006f6:	d00c      	beq.n	8000712 <__aeabi_dmul+0x206>
 80006f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006fc:	bf18      	it	ne
 80006fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000702:	d1d1      	bne.n	80006a8 <__aeabi_dmul+0x19c>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000716:	bf06      	itte	eq
 8000718:	4610      	moveq	r0, r2
 800071a:	4619      	moveq	r1, r3
 800071c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000720:	d019      	beq.n	8000756 <__aeabi_dmul+0x24a>
 8000722:	ea94 0f0c 	teq	r4, ip
 8000726:	d102      	bne.n	800072e <__aeabi_dmul+0x222>
 8000728:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800072c:	d113      	bne.n	8000756 <__aeabi_dmul+0x24a>
 800072e:	ea95 0f0c 	teq	r5, ip
 8000732:	d105      	bne.n	8000740 <__aeabi_dmul+0x234>
 8000734:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000738:	bf1c      	itt	ne
 800073a:	4610      	movne	r0, r2
 800073c:	4619      	movne	r1, r3
 800073e:	d10a      	bne.n	8000756 <__aeabi_dmul+0x24a>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800075a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075e:	bd70      	pop	{r4, r5, r6, pc}

08000760 <__aeabi_ddiv>:
 8000760:	b570      	push	{r4, r5, r6, lr}
 8000762:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000766:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800076a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076e:	bf1d      	ittte	ne
 8000770:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000774:	ea94 0f0c 	teqne	r4, ip
 8000778:	ea95 0f0c 	teqne	r5, ip
 800077c:	f000 f8a7 	bleq	80008ce <__aeabi_ddiv+0x16e>
 8000780:	eba4 0405 	sub.w	r4, r4, r5
 8000784:	ea81 0e03 	eor.w	lr, r1, r3
 8000788:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800078c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000790:	f000 8088 	beq.w	80008a4 <__aeabi_ddiv+0x144>
 8000794:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000798:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800079c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b8:	429d      	cmp	r5, r3
 80007ba:	bf08      	it	eq
 80007bc:	4296      	cmpeq	r6, r2
 80007be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c6:	d202      	bcs.n	80007ce <__aeabi_ddiv+0x6e>
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	1ab6      	subs	r6, r6, r2
 80007d0:	eb65 0503 	sbc.w	r5, r5, r3
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000802:	bf22      	ittt	cs
 8000804:	1ab6      	subcs	r6, r6, r2
 8000806:	4675      	movcs	r5, lr
 8000808:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	ebb6 0e02 	subs.w	lr, r6, r2
 8000816:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081a:	bf22      	ittt	cs
 800081c:	1ab6      	subcs	r6, r6, r2
 800081e:	4675      	movcs	r5, lr
 8000820:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	ebb6 0e02 	subs.w	lr, r6, r2
 800082e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000832:	bf22      	ittt	cs
 8000834:	1ab6      	subcs	r6, r6, r2
 8000836:	4675      	movcs	r5, lr
 8000838:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800083c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000840:	d018      	beq.n	8000874 <__aeabi_ddiv+0x114>
 8000842:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000846:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800084a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000852:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000856:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800085a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085e:	d1c0      	bne.n	80007e2 <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	d10b      	bne.n	800087e <__aeabi_ddiv+0x11e>
 8000866:	ea41 0100 	orr.w	r1, r1, r0
 800086a:	f04f 0000 	mov.w	r0, #0
 800086e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000872:	e7b6      	b.n	80007e2 <__aeabi_ddiv+0x82>
 8000874:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000878:	bf04      	itt	eq
 800087a:	4301      	orreq	r1, r0
 800087c:	2000      	moveq	r0, #0
 800087e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000882:	bf88      	it	hi
 8000884:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000888:	f63f aeaf 	bhi.w	80005ea <__aeabi_dmul+0xde>
 800088c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000890:	bf04      	itt	eq
 8000892:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000896:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800089a:	f150 0000 	adcs.w	r0, r0, #0
 800089e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008a2:	bd70      	pop	{r4, r5, r6, pc}
 80008a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008b0:	bfc2      	ittt	gt
 80008b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ba:	bd70      	popgt	{r4, r5, r6, pc}
 80008bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008c0:	f04f 0e00 	mov.w	lr, #0
 80008c4:	3c01      	subs	r4, #1
 80008c6:	e690      	b.n	80005ea <__aeabi_dmul+0xde>
 80008c8:	ea45 0e06 	orr.w	lr, r5, r6
 80008cc:	e68d      	b.n	80005ea <__aeabi_dmul+0xde>
 80008ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008d2:	ea94 0f0c 	teq	r4, ip
 80008d6:	bf08      	it	eq
 80008d8:	ea95 0f0c 	teqeq	r5, ip
 80008dc:	f43f af3b 	beq.w	8000756 <__aeabi_dmul+0x24a>
 80008e0:	ea94 0f0c 	teq	r4, ip
 80008e4:	d10a      	bne.n	80008fc <__aeabi_ddiv+0x19c>
 80008e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ea:	f47f af34 	bne.w	8000756 <__aeabi_dmul+0x24a>
 80008ee:	ea95 0f0c 	teq	r5, ip
 80008f2:	f47f af25 	bne.w	8000740 <__aeabi_dmul+0x234>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e72c      	b.n	8000756 <__aeabi_dmul+0x24a>
 80008fc:	ea95 0f0c 	teq	r5, ip
 8000900:	d106      	bne.n	8000910 <__aeabi_ddiv+0x1b0>
 8000902:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000906:	f43f aefd 	beq.w	8000704 <__aeabi_dmul+0x1f8>
 800090a:	4610      	mov	r0, r2
 800090c:	4619      	mov	r1, r3
 800090e:	e722      	b.n	8000756 <__aeabi_dmul+0x24a>
 8000910:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000914:	bf18      	it	ne
 8000916:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800091a:	f47f aec5 	bne.w	80006a8 <__aeabi_dmul+0x19c>
 800091e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000922:	f47f af0d 	bne.w	8000740 <__aeabi_dmul+0x234>
 8000926:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800092a:	f47f aeeb 	bne.w	8000704 <__aeabi_dmul+0x1f8>
 800092e:	e712      	b.n	8000756 <__aeabi_dmul+0x24a>

08000930 <__gedf2>:
 8000930:	f04f 3cff 	mov.w	ip, #4294967295
 8000934:	e006      	b.n	8000944 <__cmpdf2+0x4>
 8000936:	bf00      	nop

08000938 <__ledf2>:
 8000938:	f04f 0c01 	mov.w	ip, #1
 800093c:	e002      	b.n	8000944 <__cmpdf2+0x4>
 800093e:	bf00      	nop

08000940 <__cmpdf2>:
 8000940:	f04f 0c01 	mov.w	ip, #1
 8000944:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000948:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800094c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000950:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000954:	bf18      	it	ne
 8000956:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800095a:	d01b      	beq.n	8000994 <__cmpdf2+0x54>
 800095c:	b001      	add	sp, #4
 800095e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000962:	bf0c      	ite	eq
 8000964:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000968:	ea91 0f03 	teqne	r1, r3
 800096c:	bf02      	ittt	eq
 800096e:	ea90 0f02 	teqeq	r0, r2
 8000972:	2000      	moveq	r0, #0
 8000974:	4770      	bxeq	lr
 8000976:	f110 0f00 	cmn.w	r0, #0
 800097a:	ea91 0f03 	teq	r1, r3
 800097e:	bf58      	it	pl
 8000980:	4299      	cmppl	r1, r3
 8000982:	bf08      	it	eq
 8000984:	4290      	cmpeq	r0, r2
 8000986:	bf2c      	ite	cs
 8000988:	17d8      	asrcs	r0, r3, #31
 800098a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098e:	f040 0001 	orr.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	d102      	bne.n	80009a4 <__cmpdf2+0x64>
 800099e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009a2:	d107      	bne.n	80009b4 <__cmpdf2+0x74>
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	d1d6      	bne.n	800095c <__cmpdf2+0x1c>
 80009ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009b2:	d0d3      	beq.n	800095c <__cmpdf2+0x1c>
 80009b4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <__aeabi_cdrcmple>:
 80009bc:	4684      	mov	ip, r0
 80009be:	4610      	mov	r0, r2
 80009c0:	4662      	mov	r2, ip
 80009c2:	468c      	mov	ip, r1
 80009c4:	4619      	mov	r1, r3
 80009c6:	4663      	mov	r3, ip
 80009c8:	e000      	b.n	80009cc <__aeabi_cdcmpeq>
 80009ca:	bf00      	nop

080009cc <__aeabi_cdcmpeq>:
 80009cc:	b501      	push	{r0, lr}
 80009ce:	f7ff ffb7 	bl	8000940 <__cmpdf2>
 80009d2:	2800      	cmp	r0, #0
 80009d4:	bf48      	it	mi
 80009d6:	f110 0f00 	cmnmi.w	r0, #0
 80009da:	bd01      	pop	{r0, pc}

080009dc <__aeabi_dcmpeq>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff fff4 	bl	80009cc <__aeabi_cdcmpeq>
 80009e4:	bf0c      	ite	eq
 80009e6:	2001      	moveq	r0, #1
 80009e8:	2000      	movne	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmplt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffea 	bl	80009cc <__aeabi_cdcmpeq>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmple>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffe0 	bl	80009cc <__aeabi_cdcmpeq>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpge>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffce 	bl	80009bc <__aeabi_cdrcmple>
 8000a20:	bf94      	ite	ls
 8000a22:	2001      	movls	r0, #1
 8000a24:	2000      	movhi	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpgt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffc4 	bl	80009bc <__aeabi_cdrcmple>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmpun>:
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__aeabi_dcmpun+0x10>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d10a      	bne.n	8000a66 <__aeabi_dcmpun+0x26>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__aeabi_dcmpun+0x20>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_dcmpun+0x26>
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0001 	mov.w	r0, #1
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_d2f>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a74:	bf24      	itt	cs
 8000a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7e:	d90d      	bls.n	8000a9c <__aeabi_d2f+0x30>
 8000a80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a94:	bf08      	it	eq
 8000a96:	f020 0001 	biceq.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa0:	d121      	bne.n	8000ae6 <__aeabi_d2f+0x7a>
 8000aa2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa6:	bfbc      	itt	lt
 8000aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	4770      	bxlt	lr
 8000aae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab6:	f1c2 0218 	rsb	r2, r2, #24
 8000aba:	f1c2 0c20 	rsb	ip, r2, #32
 8000abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	f040 0001 	orrne.w	r0, r0, #1
 8000acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad8:	ea40 000c 	orr.w	r0, r0, ip
 8000adc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae4:	e7cc      	b.n	8000a80 <__aeabi_d2f+0x14>
 8000ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aea:	d107      	bne.n	8000afc <__aeabi_d2f+0x90>
 8000aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af0:	bf1e      	ittt	ne
 8000af2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000afa:	4770      	bxne	lr
 8000afc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_uldivmod>:
 8000b0c:	b953      	cbnz	r3, 8000b24 <__aeabi_uldivmod+0x18>
 8000b0e:	b94a      	cbnz	r2, 8000b24 <__aeabi_uldivmod+0x18>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bf08      	it	eq
 8000b14:	2800      	cmpeq	r0, #0
 8000b16:	bf1c      	itt	ne
 8000b18:	f04f 31ff 	movne.w	r1, #4294967295
 8000b1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b20:	f000 b972 	b.w	8000e08 <__aeabi_idiv0>
 8000b24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b2c:	f000 f806 	bl	8000b3c <__udivmoddi4>
 8000b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b38:	b004      	add	sp, #16
 8000b3a:	4770      	bx	lr

08000b3c <__udivmoddi4>:
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b40:	9e08      	ldr	r6, [sp, #32]
 8000b42:	4604      	mov	r4, r0
 8000b44:	4688      	mov	r8, r1
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d14b      	bne.n	8000be2 <__udivmoddi4+0xa6>
 8000b4a:	428a      	cmp	r2, r1
 8000b4c:	4615      	mov	r5, r2
 8000b4e:	d967      	bls.n	8000c20 <__udivmoddi4+0xe4>
 8000b50:	fab2 f282 	clz	r2, r2
 8000b54:	b14a      	cbz	r2, 8000b6a <__udivmoddi4+0x2e>
 8000b56:	f1c2 0720 	rsb	r7, r2, #32
 8000b5a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b5e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b62:	4095      	lsls	r5, r2
 8000b64:	ea47 0803 	orr.w	r8, r7, r3
 8000b68:	4094      	lsls	r4, r2
 8000b6a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b6e:	0c23      	lsrs	r3, r4, #16
 8000b70:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b74:	fa1f fc85 	uxth.w	ip, r5
 8000b78:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b7c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b80:	fb07 f10c 	mul.w	r1, r7, ip
 8000b84:	4299      	cmp	r1, r3
 8000b86:	d909      	bls.n	8000b9c <__udivmoddi4+0x60>
 8000b88:	18eb      	adds	r3, r5, r3
 8000b8a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b8e:	f080 811b 	bcs.w	8000dc8 <__udivmoddi4+0x28c>
 8000b92:	4299      	cmp	r1, r3
 8000b94:	f240 8118 	bls.w	8000dc8 <__udivmoddi4+0x28c>
 8000b98:	3f02      	subs	r7, #2
 8000b9a:	442b      	add	r3, r5
 8000b9c:	1a5b      	subs	r3, r3, r1
 8000b9e:	b2a4      	uxth	r4, r4
 8000ba0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ba4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ba8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bac:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bb0:	45a4      	cmp	ip, r4
 8000bb2:	d909      	bls.n	8000bc8 <__udivmoddi4+0x8c>
 8000bb4:	192c      	adds	r4, r5, r4
 8000bb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bba:	f080 8107 	bcs.w	8000dcc <__udivmoddi4+0x290>
 8000bbe:	45a4      	cmp	ip, r4
 8000bc0:	f240 8104 	bls.w	8000dcc <__udivmoddi4+0x290>
 8000bc4:	3802      	subs	r0, #2
 8000bc6:	442c      	add	r4, r5
 8000bc8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bcc:	eba4 040c 	sub.w	r4, r4, ip
 8000bd0:	2700      	movs	r7, #0
 8000bd2:	b11e      	cbz	r6, 8000bdc <__udivmoddi4+0xa0>
 8000bd4:	40d4      	lsrs	r4, r2
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bdc:	4639      	mov	r1, r7
 8000bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d909      	bls.n	8000bfa <__udivmoddi4+0xbe>
 8000be6:	2e00      	cmp	r6, #0
 8000be8:	f000 80eb 	beq.w	8000dc2 <__udivmoddi4+0x286>
 8000bec:	2700      	movs	r7, #0
 8000bee:	e9c6 0100 	strd	r0, r1, [r6]
 8000bf2:	4638      	mov	r0, r7
 8000bf4:	4639      	mov	r1, r7
 8000bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfa:	fab3 f783 	clz	r7, r3
 8000bfe:	2f00      	cmp	r7, #0
 8000c00:	d147      	bne.n	8000c92 <__udivmoddi4+0x156>
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d302      	bcc.n	8000c0c <__udivmoddi4+0xd0>
 8000c06:	4282      	cmp	r2, r0
 8000c08:	f200 80fa 	bhi.w	8000e00 <__udivmoddi4+0x2c4>
 8000c0c:	1a84      	subs	r4, r0, r2
 8000c0e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c12:	2001      	movs	r0, #1
 8000c14:	4698      	mov	r8, r3
 8000c16:	2e00      	cmp	r6, #0
 8000c18:	d0e0      	beq.n	8000bdc <__udivmoddi4+0xa0>
 8000c1a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c1e:	e7dd      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000c20:	b902      	cbnz	r2, 8000c24 <__udivmoddi4+0xe8>
 8000c22:	deff      	udf	#255	; 0xff
 8000c24:	fab2 f282 	clz	r2, r2
 8000c28:	2a00      	cmp	r2, #0
 8000c2a:	f040 808f 	bne.w	8000d4c <__udivmoddi4+0x210>
 8000c2e:	1b49      	subs	r1, r1, r5
 8000c30:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c34:	fa1f f885 	uxth.w	r8, r5
 8000c38:	2701      	movs	r7, #1
 8000c3a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c3e:	0c23      	lsrs	r3, r4, #16
 8000c40:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c48:	fb08 f10c 	mul.w	r1, r8, ip
 8000c4c:	4299      	cmp	r1, r3
 8000c4e:	d907      	bls.n	8000c60 <__udivmoddi4+0x124>
 8000c50:	18eb      	adds	r3, r5, r3
 8000c52:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c56:	d202      	bcs.n	8000c5e <__udivmoddi4+0x122>
 8000c58:	4299      	cmp	r1, r3
 8000c5a:	f200 80cd 	bhi.w	8000df8 <__udivmoddi4+0x2bc>
 8000c5e:	4684      	mov	ip, r0
 8000c60:	1a59      	subs	r1, r3, r1
 8000c62:	b2a3      	uxth	r3, r4
 8000c64:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c68:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c6c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c70:	fb08 f800 	mul.w	r8, r8, r0
 8000c74:	45a0      	cmp	r8, r4
 8000c76:	d907      	bls.n	8000c88 <__udivmoddi4+0x14c>
 8000c78:	192c      	adds	r4, r5, r4
 8000c7a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7e:	d202      	bcs.n	8000c86 <__udivmoddi4+0x14a>
 8000c80:	45a0      	cmp	r8, r4
 8000c82:	f200 80b6 	bhi.w	8000df2 <__udivmoddi4+0x2b6>
 8000c86:	4618      	mov	r0, r3
 8000c88:	eba4 0408 	sub.w	r4, r4, r8
 8000c8c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c90:	e79f      	b.n	8000bd2 <__udivmoddi4+0x96>
 8000c92:	f1c7 0c20 	rsb	ip, r7, #32
 8000c96:	40bb      	lsls	r3, r7
 8000c98:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c9c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ca0:	fa01 f407 	lsl.w	r4, r1, r7
 8000ca4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ca8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cac:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cb0:	4325      	orrs	r5, r4
 8000cb2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cb6:	0c2c      	lsrs	r4, r5, #16
 8000cb8:	fb08 3319 	mls	r3, r8, r9, r3
 8000cbc:	fa1f fa8e 	uxth.w	sl, lr
 8000cc0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cc4:	fb09 f40a 	mul.w	r4, r9, sl
 8000cc8:	429c      	cmp	r4, r3
 8000cca:	fa02 f207 	lsl.w	r2, r2, r7
 8000cce:	fa00 f107 	lsl.w	r1, r0, r7
 8000cd2:	d90b      	bls.n	8000cec <__udivmoddi4+0x1b0>
 8000cd4:	eb1e 0303 	adds.w	r3, lr, r3
 8000cd8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cdc:	f080 8087 	bcs.w	8000dee <__udivmoddi4+0x2b2>
 8000ce0:	429c      	cmp	r4, r3
 8000ce2:	f240 8084 	bls.w	8000dee <__udivmoddi4+0x2b2>
 8000ce6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cea:	4473      	add	r3, lr
 8000cec:	1b1b      	subs	r3, r3, r4
 8000cee:	b2ad      	uxth	r5, r5
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cfc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d00:	45a2      	cmp	sl, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x1da>
 8000d04:	eb1e 0404 	adds.w	r4, lr, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	d26b      	bcs.n	8000de6 <__udivmoddi4+0x2aa>
 8000d0e:	45a2      	cmp	sl, r4
 8000d10:	d969      	bls.n	8000de6 <__udivmoddi4+0x2aa>
 8000d12:	3802      	subs	r0, #2
 8000d14:	4474      	add	r4, lr
 8000d16:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d1e:	eba4 040a 	sub.w	r4, r4, sl
 8000d22:	454c      	cmp	r4, r9
 8000d24:	46c2      	mov	sl, r8
 8000d26:	464b      	mov	r3, r9
 8000d28:	d354      	bcc.n	8000dd4 <__udivmoddi4+0x298>
 8000d2a:	d051      	beq.n	8000dd0 <__udivmoddi4+0x294>
 8000d2c:	2e00      	cmp	r6, #0
 8000d2e:	d069      	beq.n	8000e04 <__udivmoddi4+0x2c8>
 8000d30:	ebb1 050a 	subs.w	r5, r1, sl
 8000d34:	eb64 0403 	sbc.w	r4, r4, r3
 8000d38:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d3c:	40fd      	lsrs	r5, r7
 8000d3e:	40fc      	lsrs	r4, r7
 8000d40:	ea4c 0505 	orr.w	r5, ip, r5
 8000d44:	e9c6 5400 	strd	r5, r4, [r6]
 8000d48:	2700      	movs	r7, #0
 8000d4a:	e747      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000d4c:	f1c2 0320 	rsb	r3, r2, #32
 8000d50:	fa20 f703 	lsr.w	r7, r0, r3
 8000d54:	4095      	lsls	r5, r2
 8000d56:	fa01 f002 	lsl.w	r0, r1, r2
 8000d5a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d5e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d62:	4338      	orrs	r0, r7
 8000d64:	0c01      	lsrs	r1, r0, #16
 8000d66:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d6a:	fa1f f885 	uxth.w	r8, r5
 8000d6e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d76:	fb07 f308 	mul.w	r3, r7, r8
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d80:	d907      	bls.n	8000d92 <__udivmoddi4+0x256>
 8000d82:	1869      	adds	r1, r5, r1
 8000d84:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d88:	d22f      	bcs.n	8000dea <__udivmoddi4+0x2ae>
 8000d8a:	428b      	cmp	r3, r1
 8000d8c:	d92d      	bls.n	8000dea <__udivmoddi4+0x2ae>
 8000d8e:	3f02      	subs	r7, #2
 8000d90:	4429      	add	r1, r5
 8000d92:	1acb      	subs	r3, r1, r3
 8000d94:	b281      	uxth	r1, r0
 8000d96:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d9a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da2:	fb00 f308 	mul.w	r3, r0, r8
 8000da6:	428b      	cmp	r3, r1
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x27e>
 8000daa:	1869      	adds	r1, r5, r1
 8000dac:	f100 3cff 	add.w	ip, r0, #4294967295
 8000db0:	d217      	bcs.n	8000de2 <__udivmoddi4+0x2a6>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d915      	bls.n	8000de2 <__udivmoddi4+0x2a6>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4429      	add	r1, r5
 8000dba:	1ac9      	subs	r1, r1, r3
 8000dbc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000dc0:	e73b      	b.n	8000c3a <__udivmoddi4+0xfe>
 8000dc2:	4637      	mov	r7, r6
 8000dc4:	4630      	mov	r0, r6
 8000dc6:	e709      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000dc8:	4607      	mov	r7, r0
 8000dca:	e6e7      	b.n	8000b9c <__udivmoddi4+0x60>
 8000dcc:	4618      	mov	r0, r3
 8000dce:	e6fb      	b.n	8000bc8 <__udivmoddi4+0x8c>
 8000dd0:	4541      	cmp	r1, r8
 8000dd2:	d2ab      	bcs.n	8000d2c <__udivmoddi4+0x1f0>
 8000dd4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dd8:	eb69 020e 	sbc.w	r2, r9, lr
 8000ddc:	3801      	subs	r0, #1
 8000dde:	4613      	mov	r3, r2
 8000de0:	e7a4      	b.n	8000d2c <__udivmoddi4+0x1f0>
 8000de2:	4660      	mov	r0, ip
 8000de4:	e7e9      	b.n	8000dba <__udivmoddi4+0x27e>
 8000de6:	4618      	mov	r0, r3
 8000de8:	e795      	b.n	8000d16 <__udivmoddi4+0x1da>
 8000dea:	4667      	mov	r7, ip
 8000dec:	e7d1      	b.n	8000d92 <__udivmoddi4+0x256>
 8000dee:	4681      	mov	r9, r0
 8000df0:	e77c      	b.n	8000cec <__udivmoddi4+0x1b0>
 8000df2:	3802      	subs	r0, #2
 8000df4:	442c      	add	r4, r5
 8000df6:	e747      	b.n	8000c88 <__udivmoddi4+0x14c>
 8000df8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dfc:	442b      	add	r3, r5
 8000dfe:	e72f      	b.n	8000c60 <__udivmoddi4+0x124>
 8000e00:	4638      	mov	r0, r7
 8000e02:	e708      	b.n	8000c16 <__udivmoddi4+0xda>
 8000e04:	4637      	mov	r7, r6
 8000e06:	e6e9      	b.n	8000bdc <__udivmoddi4+0xa0>

08000e08 <__aeabi_idiv0>:
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop

08000e0c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000e24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e30:	68fb      	ldr	r3, [r7, #12]
}
 8000e32:	bf00      	nop
 8000e34:	3714      	adds	r7, #20
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
	...

08000e40 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e46:	463b      	mov	r3, r7
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
 8000e54:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e56:	4b2a      	ldr	r3, [pc, #168]	; (8000f00 <MX_ADC1_Init+0xc0>)
 8000e58:	4a2a      	ldr	r2, [pc, #168]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e5a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 8000e5c:	4b28      	ldr	r3, [pc, #160]	; (8000f00 <MX_ADC1_Init+0xc0>)
 8000e5e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000e62:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000e64:	4b26      	ldr	r3, [pc, #152]	; (8000f00 <MX_ADC1_Init+0xc0>)
 8000e66:	2210      	movs	r2, #16
 8000e68:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e6a:	4b25      	ldr	r3, [pc, #148]	; (8000f00 <MX_ADC1_Init+0xc0>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e70:	4b23      	ldr	r3, [pc, #140]	; (8000f00 <MX_ADC1_Init+0xc0>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e76:	4b22      	ldr	r3, [pc, #136]	; (8000f00 <MX_ADC1_Init+0xc0>)
 8000e78:	2204      	movs	r2, #4
 8000e7a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e7c:	4b20      	ldr	r3, [pc, #128]	; (8000f00 <MX_ADC1_Init+0xc0>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e82:	4b1f      	ldr	r3, [pc, #124]	; (8000f00 <MX_ADC1_Init+0xc0>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000e88:	4b1d      	ldr	r3, [pc, #116]	; (8000f00 <MX_ADC1_Init+0xc0>)
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e8e:	4b1c      	ldr	r3, [pc, #112]	; (8000f00 <MX_ADC1_Init+0xc0>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8000e96:	4b1a      	ldr	r3, [pc, #104]	; (8000f00 <MX_ADC1_Init+0xc0>)
 8000e98:	f44f 62d8 	mov.w	r2, #1728	; 0x6c0
 8000e9c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000e9e:	4b18      	ldr	r3, [pc, #96]	; (8000f00 <MX_ADC1_Init+0xc0>)
 8000ea0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ea4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000ea6:	4b16      	ldr	r3, [pc, #88]	; (8000f00 <MX_ADC1_Init+0xc0>)
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000eae:	4b14      	ldr	r3, [pc, #80]	; (8000f00 <MX_ADC1_Init+0xc0>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000eb4:	4b12      	ldr	r3, [pc, #72]	; (8000f00 <MX_ADC1_Init+0xc0>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ebc:	4810      	ldr	r0, [pc, #64]	; (8000f00 <MX_ADC1_Init+0xc0>)
 8000ebe:	f005 f9d7 	bl	8006270 <HAL_ADC_Init>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000ec8:	f002 fd78 	bl	80039bc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000ecc:	4b0e      	ldr	r3, [pc, #56]	; (8000f08 <MX_ADC1_Init+0xc8>)
 8000ece:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ed0:	2306      	movs	r3, #6
 8000ed2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000ed4:	2306      	movs	r3, #6
 8000ed6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ed8:	237f      	movs	r3, #127	; 0x7f
 8000eda:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000edc:	2304      	movs	r3, #4
 8000ede:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ee4:	463b      	mov	r3, r7
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4805      	ldr	r0, [pc, #20]	; (8000f00 <MX_ADC1_Init+0xc0>)
 8000eea:	f005 fbfb 	bl	80066e4 <HAL_ADC_ConfigChannel>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8000ef4:	f002 fd62 	bl	80039bc <Error_Handler>
  }

}
 8000ef8:	bf00      	nop
 8000efa:	3718      	adds	r7, #24
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20027a7c 	.word	0x20027a7c
 8000f04:	50040000 	.word	0x50040000
 8000f08:	14f00020 	.word	0x14f00020

08000f0c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b088      	sub	sp, #32
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f14:	f107 030c 	add.w	r3, r7, #12
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a21      	ldr	r2, [pc, #132]	; (8000fb0 <HAL_ADC_MspInit+0xa4>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d13c      	bne.n	8000fa8 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000f2e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f32:	f7ff ff6b 	bl	8000e0c <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f36:	2001      	movs	r0, #1
 8000f38:	f7ff ff68 	bl	8000e0c <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f40:	2303      	movs	r3, #3
 8000f42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f48:	f107 030c 	add.w	r3, r7, #12
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f52:	f007 f89b 	bl	800808c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000f56:	4b17      	ldr	r3, [pc, #92]	; (8000fb4 <HAL_ADC_MspInit+0xa8>)
 8000f58:	4a17      	ldr	r2, [pc, #92]	; (8000fb8 <HAL_ADC_MspInit+0xac>)
 8000f5a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000f5c:	4b15      	ldr	r3, [pc, #84]	; (8000fb4 <HAL_ADC_MspInit+0xa8>)
 8000f5e:	2205      	movs	r2, #5
 8000f60:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f62:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <HAL_ADC_MspInit+0xa8>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f68:	4b12      	ldr	r3, [pc, #72]	; (8000fb4 <HAL_ADC_MspInit+0xa8>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f6e:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <HAL_ADC_MspInit+0xa8>)
 8000f70:	2280      	movs	r2, #128	; 0x80
 8000f72:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f74:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <HAL_ADC_MspInit+0xa8>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f7a:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <HAL_ADC_MspInit+0xa8>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f80:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <HAL_ADC_MspInit+0xa8>)
 8000f82:	2220      	movs	r2, #32
 8000f84:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f86:	4b0b      	ldr	r3, [pc, #44]	; (8000fb4 <HAL_ADC_MspInit+0xa8>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f8c:	4809      	ldr	r0, [pc, #36]	; (8000fb4 <HAL_ADC_MspInit+0xa8>)
 8000f8e:	f006 fd3d 	bl	8007a0c <HAL_DMA_Init>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <HAL_ADC_MspInit+0x90>
    {
      Error_Handler();
 8000f98:	f002 fd10 	bl	80039bc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4a05      	ldr	r2, [pc, #20]	; (8000fb4 <HAL_ADC_MspInit+0xa8>)
 8000fa0:	64da      	str	r2, [r3, #76]	; 0x4c
 8000fa2:	4a04      	ldr	r2, [pc, #16]	; (8000fb4 <HAL_ADC_MspInit+0xa8>)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fa8:	bf00      	nop
 8000faa:	3720      	adds	r7, #32
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	50040000 	.word	0x50040000
 8000fb4:	20027ae0 	.word	0x20027ae0
 8000fb8:	40020008 	.word	0x40020008

08000fbc <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000fc4:	4b07      	ldr	r3, [pc, #28]	; (8000fe4 <LL_C2_PWR_SetPowerMode+0x28>)
 8000fc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000fca:	f023 0207 	bic.w	r2, r3, #7
 8000fce:	4905      	ldr	r1, [pc, #20]	; (8000fe4 <LL_C2_PWR_SetPowerMode+0x28>)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	58000400 	.word	0x58000400

08000fe8 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000ff0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000ffa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4313      	orrs	r3, r2
 8001002:	608b      	str	r3, [r1, #8]
}
 8001004:	bf00      	nop
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <APPE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 8001014:	f000 f80a 	bl	800102c <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8001018:	4903      	ldr	r1, [pc, #12]	; (8001028 <APPE_Init+0x18>)
 800101a:	2000      	movs	r0, #0
 800101c:	f001 fdfc 	bl	8002c18 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  //UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8001020:	f000 f812 	bl	8001048 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8001024:	bf00      	nop
}
 8001026:	bd80      	pop	{r7, pc}
 8001028:	200287e8 	.word	0x200287e8

0800102c <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001030:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001034:	f7ff ffd8 	bl	8000fe8 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8001038:	f019 f944 	bl	801a2c4 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 800103c:	2004      	movs	r0, #4
 800103e:	f7ff ffbd 	bl	8000fbc <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 8001042:	bf00      	nop
}
 8001044:	bd80      	pop	{r7, pc}
	...

08001048 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b088      	sub	sp, #32
 800104c:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800104e:	f015 f9eb 	bl	8016428 <TL_Init>

  MtxShciId = osMutexNew( NULL );
 8001052:	2000      	movs	r0, #0
 8001054:	f00f fcae 	bl	80109b4 <osMutexNew>
 8001058:	4602      	mov	r2, r0
 800105a:	4b17      	ldr	r3, [pc, #92]	; (80010b8 <appe_Tl_Init+0x70>)
 800105c:	601a      	str	r2, [r3, #0]
  SemShciId = osSemaphoreNew( 1, 0, NULL ); /*< Create the semaphore and make it busy at initialization */
 800105e:	2200      	movs	r2, #0
 8001060:	2100      	movs	r1, #0
 8001062:	2001      	movs	r0, #1
 8001064:	f00f fdee 	bl	8010c44 <osSemaphoreNew>
 8001068:	4602      	mov	r2, r0
 800106a:	4b14      	ldr	r3, [pc, #80]	; (80010bc <appe_Tl_Init+0x74>)
 800106c:	601a      	str	r2, [r3, #0]

  /** FreeRTOS system task creation */
  ShciUserEvtProcessId = osThreadNew(ShciUserEvtProcess, NULL, &ShciUserEvtProcess_attr);
 800106e:	4a14      	ldr	r2, [pc, #80]	; (80010c0 <appe_Tl_Init+0x78>)
 8001070:	2100      	movs	r1, #0
 8001072:	4814      	ldr	r0, [pc, #80]	; (80010c4 <appe_Tl_Init+0x7c>)
 8001074:	f00f f960 	bl	8010338 <osThreadNew>
 8001078:	4602      	mov	r2, r0
 800107a:	4b13      	ldr	r3, [pc, #76]	; (80010c8 <appe_Tl_Init+0x80>)
 800107c:	601a      	str	r2, [r3, #0]

  /**< System channel initialization */
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 800107e:	4b13      	ldr	r3, [pc, #76]	; (80010cc <appe_Tl_Init+0x84>)
 8001080:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001082:	4b13      	ldr	r3, [pc, #76]	; (80010d0 <appe_Tl_Init+0x88>)
 8001084:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8001086:	463b      	mov	r3, r7
 8001088:	4619      	mov	r1, r3
 800108a:	4812      	ldr	r0, [pc, #72]	; (80010d4 <appe_Tl_Init+0x8c>)
 800108c:	f014 fe52 	bl	8015d34 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = 0;
 8001090:	2300      	movs	r3, #0
 8001092:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8001094:	4b10      	ldr	r3, [pc, #64]	; (80010d8 <appe_Tl_Init+0x90>)
 8001096:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8001098:	4b10      	ldr	r3, [pc, #64]	; (80010dc <appe_Tl_Init+0x94>)
 800109a:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800109c:	f240 533c 	movw	r3, #1340	; 0x53c
 80010a0:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 80010a2:	f107 0308 	add.w	r3, r7, #8
 80010a6:	4618      	mov	r0, r3
 80010a8:	f015 fb28 	bl	80166fc <TL_MM_Init>

  TL_Enable();
 80010ac:	f015 f9b5 	bl	801641a <TL_Enable>

  return;
 80010b0:	bf00      	nop
}
 80010b2:	3720      	adds	r7, #32
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20027b40 	.word	0x20027b40
 80010bc:	20027b58 	.word	0x20027b58
 80010c0:	0801bff8 	.word	0x0801bff8
 80010c4:	080011c9 	.word	0x080011c9
 80010c8:	20027b44 	.word	0x20027b44
 80010cc:	2003061c 	.word	0x2003061c
 80010d0:	080010e1 	.word	0x080010e1
 80010d4:	08001121 	.word	0x08001121
 80010d8:	20030728 	.word	0x20030728
 80010dc:	200300e0 	.word	0x200300e0

080010e0 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
  switch (status)
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d002      	beq.n	80010f6 <APPE_SysStatusNot+0x16>
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d008      	beq.n	8001106 <APPE_SysStatusNot+0x26>
    case SHCI_TL_CmdAvailable:
      osMutexRelease( MtxShciId );
      break;

    default:
      break;
 80010f4:	e00d      	b.n	8001112 <APPE_SysStatusNot+0x32>
      osMutexAcquire( MtxShciId, osWaitForever );
 80010f6:	4b09      	ldr	r3, [pc, #36]	; (800111c <APPE_SysStatusNot+0x3c>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f04f 31ff 	mov.w	r1, #4294967295
 80010fe:	4618      	mov	r0, r3
 8001100:	f00f fcf2 	bl	8010ae8 <osMutexAcquire>
      break;
 8001104:	e005      	b.n	8001112 <APPE_SysStatusNot+0x32>
      osMutexRelease( MtxShciId );
 8001106:	4b05      	ldr	r3, [pc, #20]	; (800111c <APPE_SysStatusNot+0x3c>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4618      	mov	r0, r3
 800110c:	f00f fd4a 	bl	8010ba4 <osMutexRelease>
      break;
 8001110:	bf00      	nop
  }
  return;
 8001112:	bf00      	nop
}
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20027b40 	.word	0x20027b40

08001120 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	330b      	adds	r3, #11
 800112e:	60fb      	str	r3, [r7, #12]

  switch(p_sys_event->subevtcode)
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	881b      	ldrh	r3, [r3, #0]
 8001134:	b29b      	uxth	r3, r3
 8001136:	f5b3 4f12 	cmp.w	r3, #37376	; 0x9200
 800113a:	d004      	beq.n	8001146 <APPE_SysUserEvtRx+0x26>
 800113c:	f249 2201 	movw	r2, #37377	; 0x9201
 8001140:	4293      	cmp	r3, r2
 8001142:	d003      	beq.n	800114c <APPE_SysUserEvtRx+0x2c>
         break;
     case SHCI_SUB_EVT_ERROR_NOTIF:
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
         break;
     default:
         break;
 8001144:	e008      	b.n	8001158 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtReadyProcessing();
 8001146:	f000 f833 	bl	80011b0 <APPE_SysEvtReadyProcessing>
         break;
 800114a:	e005      	b.n	8001158 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	789b      	ldrb	r3, [r3, #2]
 8001150:	4618      	mov	r0, r3
 8001152:	f000 f805 	bl	8001160 <APPE_SysEvtError>
         break;
 8001156:	bf00      	nop
  }
  return;
 8001158:	bf00      	nop
}
 800115a:	3710      	adds	r7, #16
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError( SCHI_SystemErrCode_t ErrorCode)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	71fb      	strb	r3, [r7, #7]
  switch(ErrorCode)
 800116a:	79fb      	ldrb	r3, [r7, #7]
 800116c:	2b7d      	cmp	r3, #125	; 0x7d
 800116e:	d002      	beq.n	8001176 <APPE_SysEvtError+0x16>
 8001170:	2b7e      	cmp	r3, #126	; 0x7e
 8001172:	d006      	beq.n	8001182 <APPE_SysEvtError+0x22>
 8001174:	e00b      	b.n	800118e <APPE_SysEvtError+0x2e>
  {
  case ERR_THREAD_LLD_FATAL_ERROR:
       APP_DBG("** ERR_THREAD : LLD_FATAL_ERROR \n");
 8001176:	4a0b      	ldr	r2, [pc, #44]	; (80011a4 <APPE_SysEvtError+0x44>)
 8001178:	2101      	movs	r1, #1
 800117a:	2000      	movs	r0, #0
 800117c:	f003 ffb0 	bl	80050e0 <logApplication>
       break;
 8001180:	e00c      	b.n	800119c <APPE_SysEvtError+0x3c>
  case ERR_THREAD_UNKNOWN_CMD:
       APP_DBG("** ERR_THREAD : UNKNOWN_CMD \n");
 8001182:	4a09      	ldr	r2, [pc, #36]	; (80011a8 <APPE_SysEvtError+0x48>)
 8001184:	2101      	movs	r1, #1
 8001186:	2000      	movs	r0, #0
 8001188:	f003 ffaa 	bl	80050e0 <logApplication>
       break;
 800118c:	e006      	b.n	800119c <APPE_SysEvtError+0x3c>
  default:
       APP_DBG("** ERR_THREAD : ErroCode=%d \n",ErrorCode);
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	4a06      	ldr	r2, [pc, #24]	; (80011ac <APPE_SysEvtError+0x4c>)
 8001192:	2101      	movs	r1, #1
 8001194:	2000      	movs	r0, #0
 8001196:	f003 ffa3 	bl	80050e0 <logApplication>
       break;
 800119a:	bf00      	nop
  }
  return;
 800119c:	bf00      	nop
}
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	0801bad0 	.word	0x0801bad0
 80011a8:	0801baf4 	.word	0x0801baf4
 80011ac:	0801bb14 	.word	0x0801bb14

080011b0 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing( void )
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* Traces channel initialization */
  TL_TRACES_Init( );
 80011b4:	f015 fb16 	bl	80167e4 <TL_TRACES_Init>

  APP_THREAD_Init();
 80011b8:	f016 ffba 	bl	8018130 <APP_THREAD_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80011bc:	2100      	movs	r1, #0
 80011be:	2001      	movs	r0, #1
 80011c0:	f019 f892 	bl	801a2e8 <UTIL_LPM_SetOffMode>
  return;
 80011c4:	bf00      	nop
}
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <ShciUserEvtProcess>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void ShciUserEvtProcess(void *argument)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN SHCI_USER_EVT_PROCESS_1 */

    /* USER CODE END SHCI_USER_EVT_PROCESS_1 */
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 80011d0:	f04f 32ff 	mov.w	r2, #4294967295
 80011d4:	2100      	movs	r1, #0
 80011d6:	2001      	movs	r0, #1
 80011d8:	f00f fa06 	bl	80105e8 <osThreadFlagsWait>
     shci_user_evt_proc();
 80011dc:	f014 fdc6 	bl	8015d6c <shci_user_evt_proc>
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 80011e0:	e7f6      	b.n	80011d0 <ShciUserEvtProcess+0x8>
	...

080011e4 <shci_notify_asynch_evt>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void shci_notify_asynch_evt(void* pdata)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  osThreadFlagsSet(ShciUserEvtProcessId,1);
 80011ec:	4b04      	ldr	r3, [pc, #16]	; (8001200 <shci_notify_asynch_evt+0x1c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2101      	movs	r1, #1
 80011f2:	4618      	mov	r0, r3
 80011f4:	f00f f946 	bl	8010484 <osThreadFlagsSet>
  return;
 80011f8:	bf00      	nop
}
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20027b44 	.word	0x20027b44

08001204 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  osSemaphoreRelease( SemShciId );
 800120c:	4b04      	ldr	r3, [pc, #16]	; (8001220 <shci_cmd_resp_release+0x1c>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4618      	mov	r0, r3
 8001212:	f00f fe1b 	bl	8010e4c <osSemaphoreRelease>
  return;
 8001216:	bf00      	nop
}
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20027b58 	.word	0x20027b58

08001224 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  osSemaphoreAcquire( SemShciId, osWaitForever );
 800122c:	4b05      	ldr	r3, [pc, #20]	; (8001244 <shci_cmd_resp_wait+0x20>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f04f 31ff 	mov.w	r1, #4294967295
 8001234:	4618      	mov	r0, r3
 8001236:	f00f fda3 	bl	8010d80 <osSemaphoreAcquire>
  return;
 800123a:	bf00      	nop
}
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20027b58 	.word	0x20027b58

08001248 <TL_TRACES_EvtReceived>:

/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
#endif /* CFG_DEBUG_TRACE */
  /* Release buffer */
  TL_MM_EvtDone( hcievt );
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f015 fa8f 	bl	8016774 <TL_MM_EvtDone>
}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <configureTimerForRunTimeStats>:

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
volatile unsigned long ulHighFrequencyTimerTicks;
__weak void configureTimerForRunTimeStats(void)
{
 800125e:	b480      	push	{r7}
 8001260:	af00      	add	r7, sp, #0

}
 8001262:	bf00      	nop
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
return HAL_GetTick();
 8001270:	f004 fdae 	bl	8005dd0 <HAL_GetTick>
 8001274:	4603      	mov	r3, r0
}
 8001276:	4618      	mov	r0, r3
 8001278:	bd80      	pop	{r7, pc}

0800127a <vApplicationTickHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 3 */
__weak void vApplicationTickHook( void )
{
 800127a:	b480      	push	{r7}
 800127c:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 800127e:	bf00      	nop
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
volatile uint8_t test=0;
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]

   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
	test += 1;
 8001292:	4b06      	ldr	r3, [pc, #24]	; (80012ac <vApplicationStackOverflowHook+0x24>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	b2db      	uxtb	r3, r3
 8001298:	3301      	adds	r3, #1
 800129a:	b2da      	uxtb	r2, r3
 800129c:	4b03      	ldr	r3, [pc, #12]	; (80012ac <vApplicationStackOverflowHook+0x24>)
 800129e:	701a      	strb	r2, [r3, #0]
}
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	200003ac 	.word	0x200003ac

080012b0 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
	test += 1;
 80012b4:	4b05      	ldr	r3, [pc, #20]	; (80012cc <vApplicationMallocFailedHook+0x1c>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	3301      	adds	r3, #1
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	4b03      	ldr	r3, [pc, #12]	; (80012cc <vApplicationMallocFailedHook+0x1c>)
 80012c0:	701a      	strb	r2, [r3, #0]

}
 80012c2:	bf00      	nop
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	200003ac 	.word	0x200003ac

080012d0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of messageI2C_Lock */
  messageI2C_LockHandle = osSemaphoreNew(1, 1, &messageI2C_Lock_attributes);
 80012d4:	4a70      	ldr	r2, [pc, #448]	; (8001498 <MX_FREERTOS_Init+0x1c8>)
 80012d6:	2101      	movs	r1, #1
 80012d8:	2001      	movs	r0, #1
 80012da:	f00f fcb3 	bl	8010c44 <osSemaphoreNew>
 80012de:	4602      	mov	r2, r0
 80012e0:	4b6e      	ldr	r3, [pc, #440]	; (800149c <MX_FREERTOS_Init+0x1cc>)
 80012e2:	601a      	str	r2, [r3, #0]

  /* creation of locNotify */
  locNotifyHandle = osSemaphoreNew(1, 1, &locNotify_attributes);
 80012e4:	4a6e      	ldr	r2, [pc, #440]	; (80014a0 <MX_FREERTOS_Init+0x1d0>)
 80012e6:	2101      	movs	r1, #1
 80012e8:	2001      	movs	r0, #1
 80012ea:	f00f fcab 	bl	8010c44 <osSemaphoreNew>
 80012ee:	4602      	mov	r2, r0
 80012f0:	4b6c      	ldr	r3, [pc, #432]	; (80014a4 <MX_FREERTOS_Init+0x1d4>)
 80012f2:	601a      	str	r2, [r3, #0]

  /* creation of locComplete */
  locCompleteHandle = osSemaphoreNew(1, 1, &locComplete_attributes);
 80012f4:	4a6c      	ldr	r2, [pc, #432]	; (80014a8 <MX_FREERTOS_Init+0x1d8>)
 80012f6:	2101      	movs	r1, #1
 80012f8:	2001      	movs	r0, #1
 80012fa:	f00f fca3 	bl	8010c44 <osSemaphoreNew>
 80012fe:	4602      	mov	r2, r0
 8001300:	4b6a      	ldr	r3, [pc, #424]	; (80014ac <MX_FREERTOS_Init+0x1dc>)
 8001302:	601a      	str	r2, [r3, #0]

  /* creation of lightingLabDemoEnd */
  lightingLabDemoEndHandle = osSemaphoreNew(1, 1, &lightingLabDemoEnd_attributes);
 8001304:	4a6a      	ldr	r2, [pc, #424]	; (80014b0 <MX_FREERTOS_Init+0x1e0>)
 8001306:	2101      	movs	r1, #1
 8001308:	2001      	movs	r0, #1
 800130a:	f00f fc9b 	bl	8010c44 <osSemaphoreNew>
 800130e:	4602      	mov	r2, r0
 8001310:	4b68      	ldr	r3, [pc, #416]	; (80014b4 <MX_FREERTOS_Init+0x1e4>)
 8001312:	601a      	str	r2, [r3, #0]
//  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of viveTimer */
  viveTimerHandle = osTimerNew(get3D_location, osTimerPeriodic, (void*) &viveStateVar, &viveTimer_attributes);
 8001314:	4b68      	ldr	r3, [pc, #416]	; (80014b8 <MX_FREERTOS_Init+0x1e8>)
 8001316:	4a69      	ldr	r2, [pc, #420]	; (80014bc <MX_FREERTOS_Init+0x1ec>)
 8001318:	2101      	movs	r1, #1
 800131a:	4869      	ldr	r0, [pc, #420]	; (80014c0 <MX_FREERTOS_Init+0x1f0>)
 800131c:	f00f fa3c 	bl	8010798 <osTimerNew>
 8001320:	4602      	mov	r2, r0
 8001322:	4b68      	ldr	r3, [pc, #416]	; (80014c4 <MX_FREERTOS_Init+0x1f4>)
 8001324:	601a      	str	r2, [r3, #0]

  /* creation of watchDogTimer */
  watchDogTimerHandle = osTimerNew(watchDogReset, osTimerPeriodic, NULL, &watchDogTimer_attributes);
 8001326:	4b68      	ldr	r3, [pc, #416]	; (80014c8 <MX_FREERTOS_Init+0x1f8>)
 8001328:	2200      	movs	r2, #0
 800132a:	2101      	movs	r1, #1
 800132c:	4867      	ldr	r0, [pc, #412]	; (80014cc <MX_FREERTOS_Init+0x1fc>)
 800132e:	f00f fa33 	bl	8010798 <osTimerNew>
 8001332:	4602      	mov	r2, r0
 8001334:	4b66      	ldr	r3, [pc, #408]	; (80014d0 <MX_FREERTOS_Init+0x200>)
 8001336:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
//  /* start timers, add new ones, ... */
  osTimerStart(watchDogTimerHandle, WATCHDOG_PERIOD);
 8001338:	4b65      	ldr	r3, [pc, #404]	; (80014d0 <MX_FREERTOS_Init+0x200>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f241 3188 	movw	r1, #5000	; 0x1388
 8001340:	4618      	mov	r0, r3
 8001342:	f00f faad 	bl	80108a0 <osTimerStart>

  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of blinkMsgQueue */
  blinkMsgQueueHandle = osMessageQueueNew (10, 108, &blinkMsgQueue_attributes);
 8001346:	4a63      	ldr	r2, [pc, #396]	; (80014d4 <MX_FREERTOS_Init+0x204>)
 8001348:	216c      	movs	r1, #108	; 0x6c
 800134a:	200a      	movs	r0, #10
 800134c:	f00f fdd6 	bl	8010efc <osMessageQueueNew>
 8001350:	4602      	mov	r2, r0
 8001352:	4b61      	ldr	r3, [pc, #388]	; (80014d8 <MX_FREERTOS_Init+0x208>)
 8001354:	601a      	str	r2, [r3, #0]

  /* creation of lightsSimpleQueue */
  lightsSimpleQueueHandle = osMessageQueueNew (3, 4, &lightsSimpleQueue_attributes);
 8001356:	4a61      	ldr	r2, [pc, #388]	; (80014dc <MX_FREERTOS_Init+0x20c>)
 8001358:	2104      	movs	r1, #4
 800135a:	2003      	movs	r0, #3
 800135c:	f00f fdce 	bl	8010efc <osMessageQueueNew>
 8001360:	4602      	mov	r2, r0
 8001362:	4b5f      	ldr	r3, [pc, #380]	; (80014e0 <MX_FREERTOS_Init+0x210>)
 8001364:	601a      	str	r2, [r3, #0]

  /* creation of togLoggingQueue */
  togLoggingQueueHandle = osMessageQueueNew (4, 6, &togLoggingQueue_attributes);
 8001366:	4a5f      	ldr	r2, [pc, #380]	; (80014e4 <MX_FREERTOS_Init+0x214>)
 8001368:	2106      	movs	r1, #6
 800136a:	2004      	movs	r0, #4
 800136c:	f00f fdc6 	bl	8010efc <osMessageQueueNew>
 8001370:	4602      	mov	r2, r0
 8001372:	4b5d      	ldr	r3, [pc, #372]	; (80014e8 <MX_FREERTOS_Init+0x218>)
 8001374:	601a      	str	r2, [r3, #0]

  /* creation of interProcessorMsgQueue */
  interProcessorMsgQueueHandle = osMessageQueueNew (10, 24, &interProcessorMsgQueue_attributes);
 8001376:	4a5d      	ldr	r2, [pc, #372]	; (80014ec <MX_FREERTOS_Init+0x21c>)
 8001378:	2118      	movs	r1, #24
 800137a:	200a      	movs	r0, #10
 800137c:	f00f fdbe 	bl	8010efc <osMessageQueueNew>
 8001380:	4602      	mov	r2, r0
 8001382:	4b5b      	ldr	r3, [pc, #364]	; (80014f0 <MX_FREERTOS_Init+0x220>)
 8001384:	601a      	str	r2, [r3, #0]

  /* creation of inertialSensingQueue */
  inertialSensingQueueHandle = osMessageQueueNew (10, 40, &inertialSensingQueue_attributes);
 8001386:	4a5b      	ldr	r2, [pc, #364]	; (80014f4 <MX_FREERTOS_Init+0x224>)
 8001388:	2128      	movs	r1, #40	; 0x28
 800138a:	200a      	movs	r0, #10
 800138c:	f00f fdb6 	bl	8010efc <osMessageQueueNew>
 8001390:	4602      	mov	r2, r0
 8001392:	4b59      	ldr	r3, [pc, #356]	; (80014f8 <MX_FREERTOS_Init+0x228>)
 8001394:	601a      	str	r2, [r3, #0]

  /* creation of activitySampleQueue */
  activitySampleQueueHandle = osMessageQueueNew (10, 16, &activitySampleQueue_attributes);
 8001396:	4a59      	ldr	r2, [pc, #356]	; (80014fc <MX_FREERTOS_Init+0x22c>)
 8001398:	2110      	movs	r1, #16
 800139a:	200a      	movs	r0, #10
 800139c:	f00f fdae 	bl	8010efc <osMessageQueueNew>
 80013a0:	4602      	mov	r2, r0
 80013a2:	4b57      	ldr	r3, [pc, #348]	; (8001500 <MX_FREERTOS_Init+0x230>)
 80013a4:	601a      	str	r2, [r3, #0]

  /* creation of rotationSampleQueue */
  rotationSampleQueueHandle = osMessageQueueNew (3, 24, &rotationSampleQueue_attributes);
 80013a6:	4a57      	ldr	r2, [pc, #348]	; (8001504 <MX_FREERTOS_Init+0x234>)
 80013a8:	2118      	movs	r1, #24
 80013aa:	2003      	movs	r0, #3
 80013ac:	f00f fda6 	bl	8010efc <osMessageQueueNew>
 80013b0:	4602      	mov	r2, r0
 80013b2:	4b55      	ldr	r3, [pc, #340]	; (8001508 <MX_FREERTOS_Init+0x238>)
 80013b4:	601a      	str	r2, [r3, #0]

  /* creation of pulseQueue */
  pulseQueueHandle = osMessageQueueNew (10, 6, &pulseQueue_attributes);
 80013b6:	4a55      	ldr	r2, [pc, #340]	; (800150c <MX_FREERTOS_Init+0x23c>)
 80013b8:	2106      	movs	r1, #6
 80013ba:	200a      	movs	r0, #10
 80013bc:	f00f fd9e 	bl	8010efc <osMessageQueueNew>
 80013c0:	4602      	mov	r2, r0
 80013c2:	4b53      	ldr	r3, [pc, #332]	; (8001510 <MX_FREERTOS_Init+0x240>)
 80013c4:	601a      	str	r2, [r3, #0]

  /* creation of viveQueue */
  viveQueueHandle = osMessageQueueNew (10, 24, &viveQueue_attributes);
 80013c6:	4a53      	ldr	r2, [pc, #332]	; (8001514 <MX_FREERTOS_Init+0x244>)
 80013c8:	2118      	movs	r1, #24
 80013ca:	200a      	movs	r0, #10
 80013cc:	f00f fd96 	bl	8010efc <osMessageQueueNew>
 80013d0:	4602      	mov	r2, r0
 80013d2:	4b51      	ldr	r3, [pc, #324]	; (8001518 <MX_FREERTOS_Init+0x248>)
 80013d4:	601a      	str	r2, [r3, #0]

  /* creation of statusQueue */
  statusQueueHandle = osMessageQueueNew (1, sizeof(uint32_t), &statusQueue_attributes);
 80013d6:	4a51      	ldr	r2, [pc, #324]	; (800151c <MX_FREERTOS_Init+0x24c>)
 80013d8:	2104      	movs	r1, #4
 80013da:	2001      	movs	r0, #1
 80013dc:	f00f fd8e 	bl	8010efc <osMessageQueueNew>
 80013e0:	4602      	mov	r2, r0
 80013e2:	4b4f      	ldr	r3, [pc, #316]	; (8001520 <MX_FREERTOS_Init+0x250>)
 80013e4:	601a      	str	r2, [r3, #0]

  /* creation of msgPasssingUSB_Queue */
  msgPasssingUSB_QueueHandle = osMessageQueueNew (5, 11, &msgPasssingUSB_Queue_attributes);
 80013e6:	4a4f      	ldr	r2, [pc, #316]	; (8001524 <MX_FREERTOS_Init+0x254>)
 80013e8:	210b      	movs	r1, #11
 80013ea:	2005      	movs	r0, #5
 80013ec:	f00f fd86 	bl	8010efc <osMessageQueueNew>
 80013f0:	4602      	mov	r2, r0
 80013f2:	4b4d      	ldr	r3, [pc, #308]	; (8001528 <MX_FREERTOS_Init+0x258>)
 80013f4:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(DefaultTask, NULL, &defaultTask_attributes);
 80013f6:	4a4d      	ldr	r2, [pc, #308]	; (800152c <MX_FREERTOS_Init+0x25c>)
 80013f8:	2100      	movs	r1, #0
 80013fa:	484d      	ldr	r0, [pc, #308]	; (8001530 <MX_FREERTOS_Init+0x260>)
 80013fc:	f00e ff9c 	bl	8010338 <osThreadNew>
 8001400:	4602      	mov	r2, r0
 8001402:	4b4c      	ldr	r3, [pc, #304]	; (8001534 <MX_FREERTOS_Init+0x264>)
 8001404:	601a      	str	r2, [r3, #0]

  /* creation of frontLightsTask */
  frontLightsTaskHandle = osThreadNew(ThreadFrontLightsTask, NULL, &frontLightsTask_attributes);
 8001406:	4a4c      	ldr	r2, [pc, #304]	; (8001538 <MX_FREERTOS_Init+0x268>)
 8001408:	2100      	movs	r1, #0
 800140a:	484c      	ldr	r0, [pc, #304]	; (800153c <MX_FREERTOS_Init+0x26c>)
 800140c:	f00e ff94 	bl	8010338 <osThreadNew>
 8001410:	4602      	mov	r2, r0
 8001412:	4b4b      	ldr	r3, [pc, #300]	; (8001540 <MX_FREERTOS_Init+0x270>)
 8001414:	601a      	str	r2, [r3, #0]

  /* creation of masterTask */
  masterTaskHandle = osThreadNew(MasterThreadTask, NULL, &masterTask_attributes);
 8001416:	4a4b      	ldr	r2, [pc, #300]	; (8001544 <MX_FREERTOS_Init+0x274>)
 8001418:	2100      	movs	r1, #0
 800141a:	484b      	ldr	r0, [pc, #300]	; (8001548 <MX_FREERTOS_Init+0x278>)
 800141c:	f00e ff8c 	bl	8010338 <osThreadNew>
 8001420:	4602      	mov	r2, r0
 8001422:	4b4a      	ldr	r3, [pc, #296]	; (800154c <MX_FREERTOS_Init+0x27c>)
 8001424:	601a      	str	r2, [r3, #0]

  /* creation of inertialTask */
  inertialTaskHandle = osThreadNew(InertialSensingTask, NULL, &inertialTask_attributes);
 8001426:	4a4a      	ldr	r2, [pc, #296]	; (8001550 <MX_FREERTOS_Init+0x280>)
 8001428:	2100      	movs	r1, #0
 800142a:	484a      	ldr	r0, [pc, #296]	; (8001554 <MX_FREERTOS_Init+0x284>)
 800142c:	f00e ff84 	bl	8010338 <osThreadNew>
 8001430:	4602      	mov	r2, r0
 8001432:	4b49      	ldr	r3, [pc, #292]	; (8001558 <MX_FREERTOS_Init+0x288>)
 8001434:	601a      	str	r2, [r3, #0]

  /* creation of pulseTask */
  pulseTaskHandle = osThreadNew(PulseHandlerTask, NULL, &pulseTask_attributes);
 8001436:	4a49      	ldr	r2, [pc, #292]	; (800155c <MX_FREERTOS_Init+0x28c>)
 8001438:	2100      	movs	r1, #0
 800143a:	4849      	ldr	r0, [pc, #292]	; (8001560 <MX_FREERTOS_Init+0x290>)
 800143c:	f00e ff7c 	bl	8010338 <osThreadNew>
 8001440:	4602      	mov	r2, r0
 8001442:	4b48      	ldr	r3, [pc, #288]	; (8001564 <MX_FREERTOS_Init+0x294>)
 8001444:	601a      	str	r2, [r3, #0]

  /* creation of interProcTask */
  interProcTaskHandle = osThreadNew(InterProcessorTask, NULL, &interProcTask_attributes);
 8001446:	4a48      	ldr	r2, [pc, #288]	; (8001568 <MX_FREERTOS_Init+0x298>)
 8001448:	2100      	movs	r1, #0
 800144a:	4848      	ldr	r0, [pc, #288]	; (800156c <MX_FREERTOS_Init+0x29c>)
 800144c:	f00e ff74 	bl	8010338 <osThreadNew>
 8001450:	4602      	mov	r2, r0
 8001452:	4b47      	ldr	r3, [pc, #284]	; (8001570 <MX_FREERTOS_Init+0x2a0>)
 8001454:	601a      	str	r2, [r3, #0]

  /* creation of blinkTask */
  blinkTaskHandle = osThreadNew(BlinkTask, NULL, &blinkTask_attributes);
 8001456:	4a47      	ldr	r2, [pc, #284]	; (8001574 <MX_FREERTOS_Init+0x2a4>)
 8001458:	2100      	movs	r1, #0
 800145a:	4847      	ldr	r0, [pc, #284]	; (8001578 <MX_FREERTOS_Init+0x2a8>)
 800145c:	f00e ff6c 	bl	8010338 <osThreadNew>
 8001460:	4602      	mov	r2, r0
 8001462:	4b46      	ldr	r3, [pc, #280]	; (800157c <MX_FREERTOS_Init+0x2ac>)
 8001464:	601a      	str	r2, [r3, #0]

  /* creation of msgPassingUSB_T */
  msgPassingUSB_THandle = osThreadNew(msgPassingUSB, NULL, &msgPassingUSB_T_attributes);
 8001466:	4a46      	ldr	r2, [pc, #280]	; (8001580 <MX_FREERTOS_Init+0x2b0>)
 8001468:	2100      	movs	r1, #0
 800146a:	4846      	ldr	r0, [pc, #280]	; (8001584 <MX_FREERTOS_Init+0x2b4>)
 800146c:	f00e ff64 	bl	8010338 <osThreadNew>
 8001470:	4602      	mov	r2, r0
 8001472:	4b45      	ldr	r3, [pc, #276]	; (8001588 <MX_FREERTOS_Init+0x2b8>)
 8001474:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  // ensure binary notification semaphores are initially empty
  osSemaphoreAcquire(locNotifyHandle, 0);
 8001476:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <MX_FREERTOS_Init+0x1d4>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2100      	movs	r1, #0
 800147c:	4618      	mov	r0, r3
 800147e:	f00f fc7f 	bl	8010d80 <osSemaphoreAcquire>
  osSemaphoreAcquire(locCompleteHandle, 0);
 8001482:	4b0a      	ldr	r3, [pc, #40]	; (80014ac <MX_FREERTOS_Init+0x1dc>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2100      	movs	r1, #0
 8001488:	4618      	mov	r0, r3
 800148a:	f00f fc79 	bl	8010d80 <osSemaphoreAcquire>

   /* add threads, ... */


	/* Init code for STM32_WPAN */
	APPE_Init();
 800148e:	f7ff fdbf 	bl	8001010 <APPE_Init>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	0801c264 	.word	0x0801c264
 800149c:	20027c50 	.word	0x20027c50
 80014a0:	0801c274 	.word	0x0801c274
 80014a4:	20028098 	.word	0x20028098
 80014a8:	0801c284 	.word	0x0801c284
 80014ac:	20028090 	.word	0x20028090
 80014b0:	0801c294 	.word	0x0801c294
 80014b4:	20027c5c 	.word	0x20027c5c
 80014b8:	0801c244 	.word	0x0801c244
 80014bc:	20000c68 	.word	0x20000c68
 80014c0:	08003141 	.word	0x08003141
 80014c4:	20027c3c 	.word	0x20027c3c
 80014c8:	0801c254 	.word	0x0801c254
 80014cc:	08001611 	.word	0x08001611
 80014d0:	200280a8 	.word	0x200280a8
 80014d4:	0801c13c 	.word	0x0801c13c
 80014d8:	200280a4 	.word	0x200280a4
 80014dc:	0801c154 	.word	0x0801c154
 80014e0:	20027c58 	.word	0x20027c58
 80014e4:	0801c16c 	.word	0x0801c16c
 80014e8:	20028088 	.word	0x20028088
 80014ec:	0801c184 	.word	0x0801c184
 80014f0:	20027c60 	.word	0x20027c60
 80014f4:	0801c19c 	.word	0x0801c19c
 80014f8:	20027c54 	.word	0x20027c54
 80014fc:	0801c1b4 	.word	0x0801c1b4
 8001500:	20027c44 	.word	0x20027c44
 8001504:	0801c1cc 	.word	0x0801c1cc
 8001508:	20027c68 	.word	0x20027c68
 800150c:	0801c1e4 	.word	0x0801c1e4
 8001510:	20027b48 	.word	0x20027b48
 8001514:	0801c1fc 	.word	0x0801c1fc
 8001518:	20027b4c 	.word	0x20027b4c
 800151c:	0801c214 	.word	0x0801c214
 8001520:	20027c64 	.word	0x20027c64
 8001524:	0801c22c 	.word	0x0801c22c
 8001528:	20027c4c 	.word	0x20027c4c
 800152c:	0801c01c 	.word	0x0801c01c
 8001530:	0800158d 	.word	0x0800158d
 8001534:	20027c30 	.word	0x20027c30
 8001538:	0801c040 	.word	0x0801c040
 800153c:	080036e1 	.word	0x080036e1
 8001540:	20027c40 	.word	0x20027c40
 8001544:	0801c064 	.word	0x0801c064
 8001548:	080039cd 	.word	0x080039cd
 800154c:	2002808c 	.word	0x2002808c
 8001550:	0801c088 	.word	0x0801c088
 8001554:	08002f39 	.word	0x08002f39
 8001558:	200280ac 	.word	0x200280ac
 800155c:	0801c0ac 	.word	0x0801c0ac
 8001560:	080030b1 	.word	0x080030b1
 8001564:	2002809c 	.word	0x2002809c
 8001568:	0801c0d0 	.word	0x0801c0d0
 800156c:	080032b9 	.word	0x080032b9
 8001570:	20028094 	.word	0x20028094
 8001574:	0801c0f4 	.word	0x0801c0f4
 8001578:	08001625 	.word	0x08001625
 800157c:	20027c34 	.word	0x20027c34
 8001580:	0801c118 	.word	0x0801c118
 8001584:	0800159d 	.word	0x0800159d
 8001588:	20027c38 	.word	0x20027c38

0800158c <DefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_DefaultTask */
__weak void DefaultTask(void *argument)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001594:	2001      	movs	r0, #1
 8001596:	f00f f8bb 	bl	8010710 <osDelay>
 800159a:	e7fb      	b.n	8001594 <DefaultTask+0x8>

0800159c <msgPassingUSB>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_msgPassingUSB */
__weak void msgPassingUSB(void *argument)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b08a      	sub	sp, #40	; 0x28
 80015a0:	af04      	add	r7, sp, #16
 80015a2:	6078      	str	r0, [r7, #4]
	struct USB_msgPass receivedPacket;
  /* Infinite loop */
  for(;;)
  {
    while(1){
    	osMessageQueueGet(msgPasssingUSB_QueueHandle, &receivedPacket, 0U, osWaitForever);
 80015a4:	4b16      	ldr	r3, [pc, #88]	; (8001600 <msgPassingUSB+0x64>)
 80015a6:	6818      	ldr	r0, [r3, #0]
 80015a8:	f107 010c 	add.w	r1, r7, #12
 80015ac:	f04f 33ff 	mov.w	r3, #4294967295
 80015b0:	2200      	movs	r2, #0
 80015b2:	f00f fd9d 	bl	80110f0 <osMessageQueueGet>

    	if(receivedPacket.len == 6){
 80015b6:	7b3b      	ldrb	r3, [r7, #12]
 80015b8:	2b06      	cmp	r3, #6
 80015ba:	d10e      	bne.n	80015da <msgPassingUSB+0x3e>
//    		  logReceivedMessage.blinkEnabled = Buf[2] - '0';
//    		  logReceivedMessage.tempEnabled = Buf[3] - '0';
//    		  logReceivedMessage.intertialEnabled = Buf[4] - '0';
//    		  logReceivedMessage.positionEnabled  = Buf[5] - '0';

    		  APP_THREAD_SendCoapMsg(receivedPacket.buf, 6, &multicastAddr, "togLog", NO_ACK, OT_COAP_CODE_PUT, 1U);
 80015bc:	f107 030c 	add.w	r3, r7, #12
 80015c0:	1c58      	adds	r0, r3, #1
 80015c2:	2301      	movs	r3, #1
 80015c4:	9302      	str	r3, [sp, #8]
 80015c6:	2303      	movs	r3, #3
 80015c8:	9301      	str	r3, [sp, #4]
 80015ca:	2300      	movs	r3, #0
 80015cc:	9300      	str	r3, [sp, #0]
 80015ce:	4b0d      	ldr	r3, [pc, #52]	; (8001604 <msgPassingUSB+0x68>)
 80015d0:	4a0d      	ldr	r2, [pc, #52]	; (8001608 <msgPassingUSB+0x6c>)
 80015d2:	2106      	movs	r1, #6
 80015d4:	f017 fa98 	bl	8018b08 <APP_THREAD_SendCoapMsg>
 80015d8:	e7e4      	b.n	80015a4 <msgPassingUSB+0x8>
    	  }
    	  else if(receivedPacket.len == 1){
 80015da:	7b3b      	ldrb	r3, [r7, #12]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d1e1      	bne.n	80015a4 <msgPassingUSB+0x8>
//    		  lightsSimpleReceivedMessage = Buf[0] - '0';

    		  APP_THREAD_SendCoapMsg(receivedPacket.buf, 4, &multicastAddr, "lightS", NO_ACK, OT_COAP_CODE_PUT, 1U);
 80015e0:	f107 030c 	add.w	r3, r7, #12
 80015e4:	1c58      	adds	r0, r3, #1
 80015e6:	2301      	movs	r3, #1
 80015e8:	9302      	str	r3, [sp, #8]
 80015ea:	2303      	movs	r3, #3
 80015ec:	9301      	str	r3, [sp, #4]
 80015ee:	2300      	movs	r3, #0
 80015f0:	9300      	str	r3, [sp, #0]
 80015f2:	4b06      	ldr	r3, [pc, #24]	; (800160c <msgPassingUSB+0x70>)
 80015f4:	4a04      	ldr	r2, [pc, #16]	; (8001608 <msgPassingUSB+0x6c>)
 80015f6:	2104      	movs	r1, #4
 80015f8:	f017 fa86 	bl	8018b08 <APP_THREAD_SendCoapMsg>
    	osMessageQueueGet(msgPasssingUSB_QueueHandle, &receivedPacket, 0U, osWaitForever);
 80015fc:	e7d2      	b.n	80015a4 <msgPassingUSB+0x8>
 80015fe:	bf00      	nop
 8001600:	20027c4c 	.word	0x20027c4c
 8001604:	0801bcc4 	.word	0x0801bcc4
 8001608:	200289fc 	.word	0x200289fc
 800160c:	0801bccc 	.word	0x0801bccc

08001610 <watchDogReset>:
  /* USER CODE END msgPassingUSB */
}

/* watchDogReset function */
void watchDogReset(void *argument)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN watchDogReset */
//	 HAL_IWDG_Refresh(&hiwdg);

  /* USER CODE END watchDogReset */
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <BlinkTask>:
/**
 * @brief Thread initialization.
 * @param  None
 * @retval None
 */
void BlinkTask(void *argument) {
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]

	uint32_t evt;

	while (1) {
		evt = osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 800162c:	f04f 32ff 	mov.w	r2, #4294967295
 8001630:	2100      	movs	r1, #0
 8001632:	2001      	movs	r0, #1
 8001634:	f00e ffd8 	bl	80105e8 <osThreadFlagsWait>
 8001638:	60f8      	str	r0, [r7, #12]

		// if signal was received successfully, start blink task
		if ((evt & 0x00000001U) == 0x00000001U) {
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	f003 0301 	and.w	r3, r3, #1
 8001640:	2b00      	cmp	r3, #0
 8001642:	d0f3      	beq.n	800162c <BlinkTask+0x8>

			// tell other threads that blink has been activated
			osMessageQueueGet(statusQueueHandle, &statusMessage, 0U, osWaitForever);
 8001644:	4b66      	ldr	r3, [pc, #408]	; (80017e0 <BlinkTask+0x1bc>)
 8001646:	6818      	ldr	r0, [r3, #0]
 8001648:	f04f 33ff 	mov.w	r3, #4294967295
 800164c:	2200      	movs	r2, #0
 800164e:	4965      	ldr	r1, [pc, #404]	; (80017e4 <BlinkTask+0x1c0>)
 8001650:	f00f fd4e 	bl	80110f0 <osMessageQueueGet>
			statusMessage.blinkEnabled = 1;
 8001654:	4b63      	ldr	r3, [pc, #396]	; (80017e4 <BlinkTask+0x1c0>)
 8001656:	2201      	movs	r2, #1
 8001658:	709a      	strb	r2, [r3, #2]
			osMessageQueuePut(statusQueueHandle, (void*) &statusMessage, 0U, 0);
 800165a:	4b61      	ldr	r3, [pc, #388]	; (80017e0 <BlinkTask+0x1bc>)
 800165c:	6818      	ldr	r0, [r3, #0]
 800165e:	2300      	movs	r3, #0
 8001660:	2200      	movs	r2, #0
 8001662:	4960      	ldr	r1, [pc, #384]	; (80017e4 <BlinkTask+0x1c0>)
 8001664:	f00f fcd0 	bl	8011008 <osMessageQueuePut>

			// start timer for ADC to sample at 1kHz
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*) blink_buffer, sizeof(blink_buffer));
 8001668:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800166c:	495e      	ldr	r1, [pc, #376]	; (80017e8 <BlinkTask+0x1c4>)
 800166e:	485f      	ldr	r0, [pc, #380]	; (80017ec <BlinkTask+0x1c8>)
 8001670:	f004 ff48 	bl	8006504 <HAL_ADC_Start_DMA>

			// start timer for ADC to sample at 1kHz
//			HAL_ADC_Start_DMA(&hadc1, (uint32_t*) blink_float_buffer, sizeof(blink_float_buffer));

			// start  PWM channel for blink LED
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001674:	2104      	movs	r1, #4
 8001676:	485e      	ldr	r0, [pc, #376]	; (80017f0 <BlinkTask+0x1cc>)
 8001678:	f00c f9e8 	bl	800da4c <HAL_TIM_PWM_Start>

			// start timer
			HAL_TIM_Base_Start(&htim2);
 800167c:	485c      	ldr	r0, [pc, #368]	; (80017f0 <BlinkTask+0x1cc>)
 800167e:	f00c f867 	bl	800d750 <HAL_TIM_Base_Start>
			//      is passed by reference via queue to masterThread for packetization

			while (1) {

				// wait for data ready flag and/or stop task flasg
				evt = osThreadFlagsWait(0x00000006U, osFlagsWaitAny, osWaitForever);
 8001682:	f04f 32ff 	mov.w	r2, #4294967295
 8001686:	2100      	movs	r1, #0
 8001688:	2006      	movs	r0, #6
 800168a:	f00e ffad 	bl	80105e8 <osThreadFlagsWait>
 800168e:	60f8      	str	r0, [r7, #12]
				blink_ptr_copy = blink_ptr;
 8001690:	4b58      	ldr	r3, [pc, #352]	; (80017f4 <BlinkTask+0x1d0>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a58      	ldr	r2, [pc, #352]	; (80017f8 <BlinkTask+0x1d4>)
 8001696:	6013      	str	r3, [r2, #0]

				if ((evt & 0x00000004U) == 0x00000004U) {
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	f003 0304 	and.w	r3, r3, #4
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d065      	beq.n	800176e <BlinkTask+0x14a>

					// interpolate timestamps for blink packets
					if (previousTick_ms == 0) {
 80016a2:	4b56      	ldr	r3, [pc, #344]	; (80017fc <BlinkTask+0x1d8>)
 80016a4:	edd3 7a00 	vldr	s15, [r3]
 80016a8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80016ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016b0:	d108      	bne.n	80016c4 <BlinkTask+0xa0>
						previousTick_ms = HAL_GetTick();
 80016b2:	f004 fb8d 	bl	8005dd0 <HAL_GetTick>
 80016b6:	ee07 0a90 	vmov	s15, r0
 80016ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016be:	4b4f      	ldr	r3, [pc, #316]	; (80017fc <BlinkTask+0x1d8>)
 80016c0:	edc3 7a00 	vstr	s15, [r3]
					}
					tick_ms_diff = (HAL_GetTick() - previousTick_ms) / ((float) BLINK_ITERATOR_COUNT);
 80016c4:	f004 fb84 	bl	8005dd0 <HAL_GetTick>
 80016c8:	ee07 0a90 	vmov	s15, r0
 80016cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80016d0:	4b4a      	ldr	r3, [pc, #296]	; (80017fc <BlinkTask+0x1d8>)
 80016d2:	edd3 7a00 	vldr	s15, [r3]
 80016d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016da:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80016de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016e2:	4b47      	ldr	r3, [pc, #284]	; (8001800 <BlinkTask+0x1dc>)
 80016e4:	edc3 7a00 	vstr	s15, [r3]

					// because of COAP packet size restrictions, separate blink packet into chunks of size BLINK_PACKET_SIZE
					for (iterator = 0; iterator < BLINK_ITERATOR_COUNT; iterator++) {
 80016e8:	4b46      	ldr	r3, [pc, #280]	; (8001804 <BlinkTask+0x1e0>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	e03a      	b.n	8001766 <BlinkTask+0x142>

						// grab packet of size BLINK_PACKET_SIZE
						memcpy(blinkMsgBuffer_1.data,  (uint8_t*) &(blink_ptr_copy[iterator * BLINK_PACKET_SIZE]), BLINK_PACKET_SIZE);
 80016f0:	4b41      	ldr	r3, [pc, #260]	; (80017f8 <BlinkTask+0x1d4>)
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	4b43      	ldr	r3, [pc, #268]	; (8001804 <BlinkTask+0x1e0>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2164      	movs	r1, #100	; 0x64
 80016fa:	fb01 f303 	mul.w	r3, r1, r3
 80016fe:	4413      	add	r3, r2
 8001700:	4a41      	ldr	r2, [pc, #260]	; (8001808 <BlinkTask+0x1e4>)
 8001702:	4610      	mov	r0, r2
 8001704:	4619      	mov	r1, r3
 8001706:	2364      	movs	r3, #100	; 0x64
 8001708:	461a      	mov	r2, r3
 800170a:	f019 f90b 	bl	801a924 <memcpy>
						blinkMsgBuffer_1.tick_ms = previousTick_ms + tick_ms_diff;
 800170e:	4b3b      	ldr	r3, [pc, #236]	; (80017fc <BlinkTask+0x1d8>)
 8001710:	ed93 7a00 	vldr	s14, [r3]
 8001714:	4b3a      	ldr	r3, [pc, #232]	; (8001800 <BlinkTask+0x1dc>)
 8001716:	edd3 7a00 	vldr	s15, [r3]
 800171a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800171e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001722:	ee17 2a90 	vmov	r2, s15
 8001726:	4b38      	ldr	r3, [pc, #224]	; (8001808 <BlinkTask+0x1e4>)
 8001728:	665a      	str	r2, [r3, #100]	; 0x64
						blinkMsgBuffer_1.payload_ID = payload_ID;
 800172a:	4b38      	ldr	r3, [pc, #224]	; (800180c <BlinkTask+0x1e8>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a36      	ldr	r2, [pc, #216]	; (8001808 <BlinkTask+0x1e4>)
 8001730:	6693      	str	r3, [r2, #104]	; 0x68

						// add tick cnt
						previousTick_ms = blinkMsgBuffer_1.tick_ms;
 8001732:	4b35      	ldr	r3, [pc, #212]	; (8001808 <BlinkTask+0x1e4>)
 8001734:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001736:	ee07 3a90 	vmov	s15, r3
 800173a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800173e:	4b2f      	ldr	r3, [pc, #188]	; (80017fc <BlinkTask+0x1d8>)
 8001740:	edc3 7a00 	vstr	s15, [r3]
						payload_ID++;
 8001744:	4b31      	ldr	r3, [pc, #196]	; (800180c <BlinkTask+0x1e8>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	3301      	adds	r3, #1
 800174a:	4a30      	ldr	r2, [pc, #192]	; (800180c <BlinkTask+0x1e8>)
 800174c:	6013      	str	r3, [r2, #0]

						// put into queue
						osMessageQueuePut(blinkMsgQueueHandle, (void*) &blinkMsgBuffer_1, 0U, 0);
 800174e:	4b30      	ldr	r3, [pc, #192]	; (8001810 <BlinkTask+0x1ec>)
 8001750:	6818      	ldr	r0, [r3, #0]
 8001752:	2300      	movs	r3, #0
 8001754:	2200      	movs	r2, #0
 8001756:	492c      	ldr	r1, [pc, #176]	; (8001808 <BlinkTask+0x1e4>)
 8001758:	f00f fc56 	bl	8011008 <osMessageQueuePut>
					for (iterator = 0; iterator < BLINK_ITERATOR_COUNT; iterator++) {
 800175c:	4b29      	ldr	r3, [pc, #164]	; (8001804 <BlinkTask+0x1e0>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	3301      	adds	r3, #1
 8001762:	4a28      	ldr	r2, [pc, #160]	; (8001804 <BlinkTask+0x1e0>)
 8001764:	6013      	str	r3, [r2, #0]
 8001766:	4b27      	ldr	r3, [pc, #156]	; (8001804 <BlinkTask+0x1e0>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2b09      	cmp	r3, #9
 800176c:	d9c0      	bls.n	80016f0 <BlinkTask+0xcc>
				}



				// stop timer and put thread in idle if signal was reset
				if ((evt & 0x00000002U) == 0x00000002U) {
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d084      	beq.n	8001682 <BlinkTask+0x5e>

					HAL_ADC_Stop_DMA(&hadc1);
 8001778:	481c      	ldr	r0, [pc, #112]	; (80017ec <BlinkTask+0x1c8>)
 800177a:	f004 ff47 	bl	800660c <HAL_ADC_Stop_DMA>
					HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 800177e:	2104      	movs	r1, #4
 8001780:	481b      	ldr	r0, [pc, #108]	; (80017f0 <BlinkTask+0x1cc>)
 8001782:	f00c fa3d 	bl	800dc00 <HAL_TIM_PWM_Stop>
					HAL_TIM_Base_Stop(&htim2);
 8001786:	481a      	ldr	r0, [pc, #104]	; (80017f0 <BlinkTask+0x1cc>)
 8001788:	f00c f828 	bl	800d7dc <HAL_TIM_Base_Stop>
					previousTick_ms = 0;
 800178c:	4b1b      	ldr	r3, [pc, #108]	; (80017fc <BlinkTask+0x1d8>)
 800178e:	f04f 0200 	mov.w	r2, #0
 8001792:	601a      	str	r2, [r3, #0]

					/* tell threads that blink is disabled */
					osMessageQueueGet(statusQueueHandle, &statusMessage, 0U, osWaitForever);
 8001794:	4b12      	ldr	r3, [pc, #72]	; (80017e0 <BlinkTask+0x1bc>)
 8001796:	6818      	ldr	r0, [r3, #0]
 8001798:	f04f 33ff 	mov.w	r3, #4294967295
 800179c:	2200      	movs	r2, #0
 800179e:	4911      	ldr	r1, [pc, #68]	; (80017e4 <BlinkTask+0x1c0>)
 80017a0:	f00f fca6 	bl	80110f0 <osMessageQueueGet>
					statusMessage.blinkEnabled = 0;
 80017a4:	4b0f      	ldr	r3, [pc, #60]	; (80017e4 <BlinkTask+0x1c0>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	709a      	strb	r2, [r3, #2]
					// notify 3D localization thread that blink is deactivating if active
					if (statusMessage.positionEnabled == 1) {
 80017aa:	4b0e      	ldr	r3, [pc, #56]	; (80017e4 <BlinkTask+0x1c0>)
 80017ac:	795b      	ldrb	r3, [r3, #5]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d104      	bne.n	80017bc <BlinkTask+0x198>
						osSemaphoreRelease(locNotifyHandle);
 80017b2:	4b18      	ldr	r3, [pc, #96]	; (8001814 <BlinkTask+0x1f0>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f00f fb48 	bl	8010e4c <osSemaphoreRelease>
					}
					osMessageQueuePut(statusQueueHandle, (void*) &statusMessage, 0U, 0);
 80017bc:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <BlinkTask+0x1bc>)
 80017be:	6818      	ldr	r0, [r3, #0]
 80017c0:	2300      	movs	r3, #0
 80017c2:	2200      	movs	r2, #0
 80017c4:	4907      	ldr	r1, [pc, #28]	; (80017e4 <BlinkTask+0x1c0>)
 80017c6:	f00f fc1f 	bl	8011008 <osMessageQueuePut>

					// empty queue
					osMessageQueueReset(blinkMsgQueueHandle);
 80017ca:	4b11      	ldr	r3, [pc, #68]	; (8001810 <BlinkTask+0x1ec>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f00f fd00 	bl	80111d4 <osMessageQueueReset>

					// clear any flags
					osThreadFlagsClear(0x0000000EU);
 80017d4:	200e      	movs	r0, #14
 80017d6:	f00e feb7 	bl	8010548 <osThreadFlagsClear>

					break;
 80017da:	bf00      	nop
		evt = osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 80017dc:	e726      	b.n	800162c <BlinkTask+0x8>
 80017de:	bf00      	nop
 80017e0:	20027c64 	.word	0x20027c64
 80017e4:	200280b4 	.word	0x200280b4
 80017e8:	2000041c 	.word	0x2000041c
 80017ec:	20027a7c 	.word	0x20027a7c
 80017f0:	20028858 	.word	0x20028858
 80017f4:	200280b0 	.word	0x200280b0
 80017f8:	200280bc 	.word	0x200280bc
 80017fc:	20000bf4 	.word	0x20000bf4
 8001800:	20000bf8 	.word	0x20000bf8
 8001804:	20000bf0 	.word	0x20000bf0
 8001808:	200003b0 	.word	0x200003b0
 800180c:	20000bec 	.word	0x20000bec
 8001810:	200280a4 	.word	0x200280a4
 8001814:	20028098 	.word	0x20028098

08001818 <HAL_ADC_ConvCpltCallback>:
//
//volatile uint8_t low_adc_sample = 0;
//volatile uint8_t random_sample = 0;


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
//	if(low_adc_sample){
//		HAL_ADC_Stop(&hadc1);
//		low_adc_sample = 0;
//		return;
//	}
	blink_ptr = &blink_buffer[BLINK_HALF_BUFFER_SIZE];
 8001820:	4b06      	ldr	r3, [pc, #24]	; (800183c <HAL_ADC_ConvCpltCallback+0x24>)
 8001822:	4a07      	ldr	r2, [pc, #28]	; (8001840 <HAL_ADC_ConvCpltCallback+0x28>)
 8001824:	601a      	str	r2, [r3, #0]
	osThreadFlagsSet(blinkTaskHandle, 0x00000004U);
 8001826:	4b07      	ldr	r3, [pc, #28]	; (8001844 <HAL_ADC_ConvCpltCallback+0x2c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2104      	movs	r1, #4
 800182c:	4618      	mov	r0, r3
 800182e:	f00e fe29 	bl	8010484 <osThreadFlagsSet>

}
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	200280b0 	.word	0x200280b0
 8001840:	20000804 	.word	0x20000804
 8001844:	20027c34 	.word	0x20027c34

08001848 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
	blink_ptr = blink_buffer;
 8001850:	4b06      	ldr	r3, [pc, #24]	; (800186c <HAL_ADC_ConvHalfCpltCallback+0x24>)
 8001852:	4a07      	ldr	r2, [pc, #28]	; (8001870 <HAL_ADC_ConvHalfCpltCallback+0x28>)
 8001854:	601a      	str	r2, [r3, #0]
	osThreadFlagsSet(blinkTaskHandle, 0x00000004U);
 8001856:	4b07      	ldr	r3, [pc, #28]	; (8001874 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2104      	movs	r1, #4
 800185c:	4618      	mov	r0, r3
 800185e:	f00e fe11 	bl	8010484 <osThreadFlagsSet>

}
 8001862:	bf00      	nop
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	200280b0 	.word	0x200280b0
 8001870:	2000041c 	.word	0x2000041c
 8001874:	20027c34 	.word	0x20027c34

08001878 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
//	}
//	pwm_tracker++;

//	low_adc_sample = 1;
//	HAL_ADC_Start(&hadc1);
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <LL_AHB2_GRP1_EnableClock>:
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001894:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001898:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800189a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80018a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4013      	ands	r3, r2
 80018ae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018b0:	68fb      	ldr	r3, [r7, #12]
}
 80018b2:	bf00      	nop
 80018b4:	3714      	adds	r7, #20
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
	...

080018c0 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 80018c4:	4b12      	ldr	r3, [pc, #72]	; (8001910 <MX_COMP1_Init+0x50>)
 80018c6:	4a13      	ldr	r2, [pc, #76]	; (8001914 <MX_COMP1_Init+0x54>)
 80018c8:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_1_2VREFINT;
 80018ca:	4b11      	ldr	r3, [pc, #68]	; (8001910 <MX_COMP1_Init+0x50>)
 80018cc:	4a12      	ldr	r2, [pc, #72]	; (8001918 <MX_COMP1_Init+0x58>)
 80018ce:	611a      	str	r2, [r3, #16]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO3;
 80018d0:	4b0f      	ldr	r3, [pc, #60]	; (8001910 <MX_COMP1_Init+0x50>)
 80018d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018d6:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80018d8:	4b0d      	ldr	r3, [pc, #52]	; (8001910 <MX_COMP1_Init+0x50>)
 80018da:	2200      	movs	r2, #0
 80018dc:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80018de:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <MX_COMP1_Init+0x50>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80018e4:	4b0a      	ldr	r3, [pc, #40]	; (8001910 <MX_COMP1_Init+0x50>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	61da      	str	r2, [r3, #28]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 80018ea:	4b09      	ldr	r3, [pc, #36]	; (8001910 <MX_COMP1_Init+0x50>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	609a      	str	r2, [r3, #8]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 80018f0:	4b07      	ldr	r3, [pc, #28]	; (8001910 <MX_COMP1_Init+0x50>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 80018f6:	4b06      	ldr	r3, [pc, #24]	; (8001910 <MX_COMP1_Init+0x50>)
 80018f8:	2231      	movs	r2, #49	; 0x31
 80018fa:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80018fc:	4804      	ldr	r0, [pc, #16]	; (8001910 <MX_COMP1_Init+0x50>)
 80018fe:	f005 fd95 	bl	800742c <HAL_COMP_Init>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_COMP1_Init+0x4c>
  {
    Error_Handler();
 8001908:	f002 f858 	bl	80039bc <Error_Handler>
  }

}
 800190c:	bf00      	nop
 800190e:	bd80      	pop	{r7, pc}
 8001910:	200280c0 	.word	0x200280c0
 8001914:	40010200 	.word	0x40010200
 8001918:	00c00010 	.word	0x00c00010

0800191c <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b088      	sub	sp, #32
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001924:	f107 030c 	add.w	r3, r7, #12
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a0f      	ldr	r2, [pc, #60]	; (8001978 <HAL_COMP_MspInit+0x5c>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d117      	bne.n	800196e <HAL_COMP_MspInit+0x52>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800193e:	2001      	movs	r0, #1
 8001940:	f7ff ffa4 	bl	800188c <LL_AHB2_GRP1_EnableClock>
    /**COMP1 GPIO Configuration
    PA1     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = LH_SIG_Pin;
 8001944:	2302      	movs	r3, #2
 8001946:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001948:	2303      	movs	r3, #3
 800194a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194c:	2300      	movs	r3, #0
 800194e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(LH_SIG_GPIO_Port, &GPIO_InitStruct);
 8001950:	f107 030c 	add.w	r3, r7, #12
 8001954:	4619      	mov	r1, r3
 8001956:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800195a:	f006 fb97 	bl	800808c <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(COMP_IRQn, 5, 0);
 800195e:	2200      	movs	r2, #0
 8001960:	2105      	movs	r1, #5
 8001962:	2016      	movs	r0, #22
 8001964:	f006 f809 	bl	800797a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP_IRQn);
 8001968:	2016      	movs	r0, #22
 800196a:	f006 f820 	bl	80079ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 800196e:	bf00      	nop
 8001970:	3720      	adds	r7, #32
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40010200 	.word	0x40010200

0800197c <process_pulse_lengths>:
    kPhaseFixAcquired = 4,
    kPhaseFixFinal = 16,
};

//length of pulse_lens is num_base_stations
void process_pulse_lengths(CyclePhaseClassifier * self, uint32_t cycle_idx, const uint16_t *pulse_lens){
 800197c:	b480      	push	{r7}
 800197e:	b089      	sub	sp, #36	; 0x24
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
	int cur_phase_id = -1;
 8001988:	f04f 33ff 	mov.w	r3, #4294967295
 800198c:	61fb      	str	r3, [r7, #28]
	if(pulse_lens[0] > 0 && pulse_lens[1] > 0){
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	881b      	ldrh	r3, [r3, #0]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d02a      	beq.n	80019ec <process_pulse_lengths+0x70>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	3302      	adds	r3, #2
 800199a:	881b      	ldrh	r3, [r3, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d025      	beq.n	80019ec <process_pulse_lengths+0x70>
		uint8_t cur_more = pulse_lens[0] > pulse_lens[1];
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	881a      	ldrh	r2, [r3, #0]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	3302      	adds	r3, #2
 80019a8:	881b      	ldrh	r3, [r3, #0]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	bf8c      	ite	hi
 80019ae:	2301      	movhi	r3, #1
 80019b0:	2300      	movls	r3, #0
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	76fb      	strb	r3, [r7, #27]
        if (cycle_idx == self->prev_full_cycle_idx_ + 1) {
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	3301      	adds	r3, #1
 80019bc:	68ba      	ldr	r2, [r7, #8]
 80019be:	429a      	cmp	r2, r3
 80019c0:	d10e      	bne.n	80019e0 <process_pulse_lengths+0x64>
            // To get current phase, we use simple fact that in phases 0 and 1, first pulse is shorter than the second,
            // and in phases 2, 3 it is longer. This allows us to estimate current phase using comparison between
            // the pair of pulses in current cycle (cur_more) and the previous one.
            self->phase_history_ = (self->phase_history_ << 1) | cur_more;  // phase_history_ keeps a bit for each pulse comparison.
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	005a      	lsls	r2, r3, #1
 80019c8:	7efb      	ldrb	r3, [r7, #27]
 80019ca:	431a      	orrs	r2, r3
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	605a      	str	r2, [r3, #4]
            static const char phases[4] = {1, 2, 0, 3};
            cur_phase_id = phases[self->phase_history_ & 0x3];  // 2 least significant bits give us enough info to get phase.
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f003 0303 	and.w	r3, r3, #3
 80019d8:	4a1c      	ldr	r2, [pc, #112]	; (8001a4c <process_pulse_lengths+0xd0>)
 80019da:	5cd3      	ldrb	r3, [r2, r3]
 80019dc:	61fb      	str	r3, [r7, #28]
 80019de:	e002      	b.n	80019e6 <process_pulse_lengths+0x6a>
            //UART_Print_int32_t(cur_phase_id);
        }
        else {
            self->phase_history_ = cur_more;
 80019e0:	7efa      	ldrb	r2, [r7, #27]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	605a      	str	r2, [r3, #4]
        }
        self->prev_full_cycle_idx_ = cycle_idx;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	68ba      	ldr	r2, [r7, #8]
 80019ea:	601a      	str	r2, [r3, #0]
	}

    // If we haven't achieved final fix yet, check the cur_phase_id is as expected.
    if (cur_phase_id >= 0 && self->fix_level_ < kPhaseFixFinal) {
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	db26      	blt.n	8001a40 <process_pulse_lengths+0xc4>
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	2b0f      	cmp	r3, #15
 80019f8:	dc22      	bgt.n	8001a40 <process_pulse_lengths+0xc4>
        if (self->fix_level_ == kPhaseFixNone) {
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d10a      	bne.n	8001a18 <process_pulse_lengths+0x9c>
            // Use current phase_id as the candidate.
            self->fix_level_ = kPhaseFixCandidate;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2201      	movs	r2, #1
 8001a06:	609a      	str	r2, [r3, #8]
            self->phase_shift_ = (cur_phase_id - cycle_idx) & 0x3;
 8001a08:	69fa      	ldr	r2, [r7, #28]
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	f003 0203 	and.w	r2, r3, #3
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	60da      	str	r2, [r3, #12]
            // Either add or remove confidence that the phase_shift_ is correct.
            int expected_phase_id = (cycle_idx + self->phase_shift_) & 0x3;
            self->fix_level_ += (cur_phase_id == expected_phase_id) ? +1 : -1;
        }
    }
}
 8001a16:	e013      	b.n	8001a40 <process_pulse_lengths+0xc4>
            int expected_phase_id = (cycle_idx + self->phase_shift_) & 0x3;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	68da      	ldr	r2, [r3, #12]
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	4413      	add	r3, r2
 8001a20:	f003 0303 	and.w	r3, r3, #3
 8001a24:	617b      	str	r3, [r7, #20]
            self->fix_level_ += (cur_phase_id == expected_phase_id) ? +1 : -1;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	69f9      	ldr	r1, [r7, #28]
 8001a2c:	697a      	ldr	r2, [r7, #20]
 8001a2e:	4291      	cmp	r1, r2
 8001a30:	d101      	bne.n	8001a36 <process_pulse_lengths+0xba>
 8001a32:	2201      	movs	r2, #1
 8001a34:	e001      	b.n	8001a3a <process_pulse_lengths+0xbe>
 8001a36:	f04f 32ff 	mov.w	r2, #4294967295
 8001a3a:	441a      	add	r2, r3
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	609a      	str	r2, [r3, #8]
}
 8001a40:	bf00      	nop
 8001a42:	3724      	adds	r7, #36	; 0x24
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	0801c2a4 	.word	0x0801c2a4

08001a50 <get_phase>:
float expected_pulse_len(CyclePhaseClassifier * self, uint8_t skip, uint8_t data, uint8_t axis) {
    // See https://github.com/nairol/LighthouseRedox/blob/master/docs/Light%20Emissions.md
    return self->pulse_base_len_ + (skip << 2 | data << 1 | axis) * 10.416f;
}

int get_phase(CyclePhaseClassifier * self, uint32_t cycle_idx) {
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
    if (self->fix_level_ >= kPhaseFixAcquired) {
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	2b03      	cmp	r3, #3
 8001a60:	dd06      	ble.n	8001a70 <get_phase+0x20>
        return (cycle_idx + self->phase_shift_) & 0x3;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	68da      	ldr	r2, [r3, #12]
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	4413      	add	r3, r2
 8001a6a:	f003 0303 	and.w	r3, r3, #3
 8001a6e:	e001      	b.n	8001a74 <get_phase+0x24>
    } else {
        return -1;
 8001a70:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <reset>:

void reset(CyclePhaseClassifier * self) {
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
    self->fix_level_ = kPhaseFixNone;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	609a      	str	r2, [r3, #8]
    self->prev_full_cycle_idx_ = -1;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f04f 32ff 	mov.w	r2, #4294967295
 8001a94:	601a      	str	r2, [r3, #0]
    self->pulse_base_len_ = 62.5f;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a05      	ldr	r2, [pc, #20]	; (8001ab0 <reset+0x30>)
 8001a9a:	611a      	str	r2, [r3, #16]
    self->phase_history_ = 0;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	605a      	str	r2, [r3, #4]
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	427a0000 	.word	0x427a0000

08001ab4 <LL_AHB1_GRP1_EnableClock>:
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001abc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ac0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001ac2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001acc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ad0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
}
 8001ada:	bf00      	nop
 8001adc:	3714      	adds	r7, #20
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001aea:	2004      	movs	r0, #4
 8001aec:	f7ff ffe2 	bl	8001ab4 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001af0:	2001      	movs	r0, #1
 8001af2:	f7ff ffdf 	bl	8001ab4 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001af6:	2200      	movs	r2, #0
 8001af8:	2105      	movs	r1, #5
 8001afa:	200b      	movs	r0, #11
 8001afc:	f005 ff3d 	bl	800797a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001b00:	200b      	movs	r0, #11
 8001b02:	f005 ff54 	bl	80079ae <HAL_NVIC_EnableIRQ>

}
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}
	...

08001b0c <IMU_begin>:

/* Functions Definition ------------------------------------------------------*/
//Attempt communication with the device
//Return true if we got a 'Polo' back from Marco
bool IMU_begin(uint8_t deviceAddress, uint8_t intPin, GPIO_TypeDef* intPort)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	603a      	str	r2, [r7, #0]
 8001b16:	71fb      	strb	r3, [r7, #7]
 8001b18:	460b      	mov	r3, r1
 8001b1a:	71bb      	strb	r3, [r7, #6]
	_deviceAddress = deviceAddress << 1; //If provided, store the I2C address from user
 8001b1c:	79fb      	ldrb	r3, [r7, #7]
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	b2da      	uxtb	r2, r3
 8001b22:	4b12      	ldr	r3, [pc, #72]	; (8001b6c <IMU_begin+0x60>)
 8001b24:	701a      	strb	r2, [r3, #0]
//	_i2cPort = &wirePort;			//Grab which port the user wants us to use
	_int = intPin;					//Get the pin that the user wants to use for interrupts. By default, it's NULL and we'll not use it in dataAvailable() function.
 8001b26:	4a12      	ldr	r2, [pc, #72]	; (8001b70 <IMU_begin+0x64>)
 8001b28:	79bb      	ldrb	r3, [r7, #6]
 8001b2a:	7013      	strb	r3, [r2, #0]
	_intPort = intPort;
 8001b2c:	4a11      	ldr	r2, [pc, #68]	; (8001b74 <IMU_begin+0x68>)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	6013      	str	r3, [r2, #0]
	//But if they forget, we start the hardware here.
	//_i2cPort->begin();


	//Begin by resetting the IMU
	IMU_softReset();
 8001b32:	f000 fa85 	bl	8002040 <IMU_softReset>

	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 8001b36:	4b10      	ldr	r3, [pc, #64]	; (8001b78 <IMU_begin+0x6c>)
 8001b38:	22f9      	movs	r2, #249	; 0xf9
 8001b3a:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;							  //Reserved
 8001b3c:	4b0e      	ldr	r3, [pc, #56]	; (8001b78 <IMU_begin+0x6c>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	705a      	strb	r2, [r3, #1]


	//Transmit packet on channel 2, 2 bytes
	IMU_sendPacket(CHANNEL_CONTROL, 2);
 8001b42:	2302      	movs	r3, #2
 8001b44:	2102      	movs	r1, #2
 8001b46:	4618      	mov	r0, r3
 8001b48:	f000 fc7e 	bl	8002448 <IMU_sendPacket>

	//Now we wait for response
	if (IMU_receivePacket() == true)
 8001b4c:	f000 fbd4 	bl	80022f8 <IMU_receivePacket>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d005      	beq.n	8001b62 <IMU_begin+0x56>
	{
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 8001b56:	4b08      	ldr	r3, [pc, #32]	; (8001b78 <IMU_begin+0x6c>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	2bf8      	cmp	r3, #248	; 0xf8
 8001b5c:	d101      	bne.n	8001b62 <IMU_begin+0x56>
		{
			return (true);
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e000      	b.n	8001b64 <IMU_begin+0x58>
		}
	}

	return (false); //Something went wrong
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	20000006 	.word	0x20000006
 8001b70:	20028142 	.word	0x20028142
 8001b74:	20028208 	.word	0x20028208
 8001b78:	20028180 	.word	0x20028180

08001b7c <IMU_dataAvailable>:
//}

//Updates the latest variables if possible
//Returns false if new readings are not available
bool IMU_dataAvailable(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
	//If we have an interrupt pin connection available, check if data is available.
	//If int pin is not set, then we'll rely on receivePacket() to timeout
	//See issue 13: https://github.com/sparkfun/SparkFun_BNO080_Arduino_Library/issues/13
	if (_int != 255)
 8001b80:	4b17      	ldr	r3, [pc, #92]	; (8001be0 <IMU_dataAvailable+0x64>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	2bff      	cmp	r3, #255	; 0xff
 8001b86:	d00d      	beq.n	8001ba4 <IMU_dataAvailable+0x28>
	{
		if( HAL_GPIO_ReadPin(_intPort, _int) == GPIO_PIN_SET)
 8001b88:	4b16      	ldr	r3, [pc, #88]	; (8001be4 <IMU_dataAvailable+0x68>)
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	4b14      	ldr	r3, [pc, #80]	; (8001be0 <IMU_dataAvailable+0x64>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	4619      	mov	r1, r3
 8001b94:	4610      	mov	r0, r2
 8001b96:	f006 fbe9 	bl	800836c <HAL_GPIO_ReadPin>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d101      	bne.n	8001ba4 <IMU_dataAvailable+0x28>
			return (false);
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	e01b      	b.n	8001bdc <IMU_dataAvailable+0x60>
//			return (false);
	}

//	if(HAL_GPIO_ReadPin(_intPort, _int) == GPIO_PIN_SET)
//	{
	if (IMU_receivePacket() == true)
 8001ba4:	f000 fba8 	bl	80022f8 <IMU_receivePacket>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d015      	beq.n	8001bda <IMU_dataAvailable+0x5e>
	{
		//Check to see if this packet is a sensor reporting its data to us
		if (shtpHeader[2] == CHANNEL_REPORTS && shtpData[0] == SHTP_REPORT_BASE_TIMESTAMP)
 8001bae:	4b0e      	ldr	r3, [pc, #56]	; (8001be8 <IMU_dataAvailable+0x6c>)
 8001bb0:	789b      	ldrb	r3, [r3, #2]
 8001bb2:	2203      	movs	r2, #3
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d107      	bne.n	8001bc8 <IMU_dataAvailable+0x4c>
 8001bb8:	4b0c      	ldr	r3, [pc, #48]	; (8001bec <IMU_dataAvailable+0x70>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	2bfb      	cmp	r3, #251	; 0xfb
 8001bbe:	d103      	bne.n	8001bc8 <IMU_dataAvailable+0x4c>
		{
			IMU_parseInputReport(); //This will update the rawAccelX, etc variables depending on which feature report is found
 8001bc0:	f000 f832 	bl	8001c28 <IMU_parseInputReport>
			return (true);
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e009      	b.n	8001bdc <IMU_dataAvailable+0x60>
		}
		else if (shtpHeader[2] == CHANNEL_CONTROL)
 8001bc8:	4b07      	ldr	r3, [pc, #28]	; (8001be8 <IMU_dataAvailable+0x6c>)
 8001bca:	789b      	ldrb	r3, [r3, #2]
 8001bcc:	2202      	movs	r2, #2
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d103      	bne.n	8001bda <IMU_dataAvailable+0x5e>
		{
			IMU_parseCommandReport(); //This will update responses to commands, calibrationStatus, etc.
 8001bd2:	f000 f80d 	bl	8001bf0 <IMU_parseCommandReport>
			return (true);
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e000      	b.n	8001bdc <IMU_dataAvailable+0x60>
		}
	}
//	}
	return (false);
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	20028142 	.word	0x20028142
 8001be4:	20028208 	.word	0x20028208
 8001be8:	200280f0 	.word	0x200280f0
 8001bec:	20028180 	.word	0x20028180

08001bf0 <IMU_parseCommandReport>:
//shtpData[5 + 5]: R5
//shtpData[5 + 6]: R6
//shtpData[5 + 7]: R7
//shtpData[5 + 8]: R8
void IMU_parseCommandReport(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
	if (shtpData[0] == SHTP_REPORT_COMMAND_RESPONSE)
 8001bf6:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <IMU_parseCommandReport+0x30>)
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	2bf1      	cmp	r3, #241	; 0xf1
 8001bfc:	d109      	bne.n	8001c12 <IMU_parseCommandReport+0x22>
	{
		//The BNO080 responds with this report to command requests. It's up to use to remember which command we issued.
		uint8_t command = shtpData[2]; //This is the Command byte of the response
 8001bfe:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <IMU_parseCommandReport+0x30>)
 8001c00:	789b      	ldrb	r3, [r3, #2]
 8001c02:	71fb      	strb	r3, [r7, #7]

		if (command == COMMAND_ME_CALIBRATE)
 8001c04:	79fb      	ldrb	r3, [r7, #7]
 8001c06:	2b07      	cmp	r3, #7
 8001c08:	d103      	bne.n	8001c12 <IMU_parseCommandReport+0x22>
		{
			calibrationStatus = shtpData[5 + 0]; //R0 - Status (0 = success, non-zero = fail)
 8001c0a:	4b05      	ldr	r3, [pc, #20]	; (8001c20 <IMU_parseCommandReport+0x30>)
 8001c0c:	795a      	ldrb	r2, [r3, #5]
 8001c0e:	4b05      	ldr	r3, [pc, #20]	; (8001c24 <IMU_parseCommandReport+0x34>)
 8001c10:	701a      	strb	r2, [r3, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	20028180 	.word	0x20028180
 8001c24:	20028233 	.word	0x20028233

08001c28 <IMU_parseInputReport>:
//shtpData[6:7]: j/accel y/gyro y/etc
//shtpData[8:9]: k/accel z/gyro z/etc
//shtpData[10:11]: real/gyro temp/etc
//shtpData[12:13]: Accuracy estimate
void IMU_parseInputReport(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)shtpHeader[1] << 8 | shtpHeader[0]);
 8001c2e:	4b96      	ldr	r3, [pc, #600]	; (8001e88 <IMU_parseInputReport+0x260>)
 8001c30:	785b      	ldrb	r3, [r3, #1]
 8001c32:	021b      	lsls	r3, r3, #8
 8001c34:	b21a      	sxth	r2, r3
 8001c36:	4b94      	ldr	r3, [pc, #592]	; (8001e88 <IMU_parseInputReport+0x260>)
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	b21b      	sxth	r3, r3
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	823b      	strh	r3, [r7, #16]
	dataLength &= ~(1 << 15); //Clear the MSbit. This bit indicates if this package is a continuation of the last.
 8001c40:	8a3b      	ldrh	r3, [r7, #16]
 8001c42:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001c46:	823b      	strh	r3, [r7, #16]
	//Ignore it for now. TODO catch this as an error and exit

	dataLength -= 4; //Remove the header bytes from the data count
 8001c48:	8a3b      	ldrh	r3, [r7, #16]
 8001c4a:	3b04      	subs	r3, #4
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	823b      	strh	r3, [r7, #16]

	timeStamp = ((uint32_t)shtpData[4] << (8 * 3)) | ((uint32_t)shtpData[3] << (8 * 2)) | ((uint32_t)shtpData[2] << (8 * 1)) | ((uint32_t)shtpData[1] << (8 * 0));
 8001c50:	4b8e      	ldr	r3, [pc, #568]	; (8001e8c <IMU_parseInputReport+0x264>)
 8001c52:	791b      	ldrb	r3, [r3, #4]
 8001c54:	061a      	lsls	r2, r3, #24
 8001c56:	4b8d      	ldr	r3, [pc, #564]	; (8001e8c <IMU_parseInputReport+0x264>)
 8001c58:	78db      	ldrb	r3, [r3, #3]
 8001c5a:	041b      	lsls	r3, r3, #16
 8001c5c:	431a      	orrs	r2, r3
 8001c5e:	4b8b      	ldr	r3, [pc, #556]	; (8001e8c <IMU_parseInputReport+0x264>)
 8001c60:	789b      	ldrb	r3, [r3, #2]
 8001c62:	021b      	lsls	r3, r3, #8
 8001c64:	4313      	orrs	r3, r2
 8001c66:	4a89      	ldr	r2, [pc, #548]	; (8001e8c <IMU_parseInputReport+0x264>)
 8001c68:	7852      	ldrb	r2, [r2, #1]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	4a88      	ldr	r2, [pc, #544]	; (8001e90 <IMU_parseInputReport+0x268>)
 8001c6e:	6013      	str	r3, [r2, #0]

	uint8_t status = shtpData[5 + 2] & 0x03; //Get status bits
 8001c70:	4b86      	ldr	r3, [pc, #536]	; (8001e8c <IMU_parseInputReport+0x264>)
 8001c72:	79db      	ldrb	r3, [r3, #7]
 8001c74:	f003 0303 	and.w	r3, r3, #3
 8001c78:	73fb      	strb	r3, [r7, #15]
	uint16_t data1 = (uint16_t)shtpData[5 + 5] << 8 | shtpData[5 + 4];
 8001c7a:	4b84      	ldr	r3, [pc, #528]	; (8001e8c <IMU_parseInputReport+0x264>)
 8001c7c:	7a9b      	ldrb	r3, [r3, #10]
 8001c7e:	021b      	lsls	r3, r3, #8
 8001c80:	b21a      	sxth	r2, r3
 8001c82:	4b82      	ldr	r3, [pc, #520]	; (8001e8c <IMU_parseInputReport+0x264>)
 8001c84:	7a5b      	ldrb	r3, [r3, #9]
 8001c86:	b21b      	sxth	r3, r3
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	b21b      	sxth	r3, r3
 8001c8c:	81bb      	strh	r3, [r7, #12]
	uint16_t data2 = (uint16_t)shtpData[5 + 7] << 8 | shtpData[5 + 6];
 8001c8e:	4b7f      	ldr	r3, [pc, #508]	; (8001e8c <IMU_parseInputReport+0x264>)
 8001c90:	7b1b      	ldrb	r3, [r3, #12]
 8001c92:	021b      	lsls	r3, r3, #8
 8001c94:	b21a      	sxth	r2, r3
 8001c96:	4b7d      	ldr	r3, [pc, #500]	; (8001e8c <IMU_parseInputReport+0x264>)
 8001c98:	7adb      	ldrb	r3, [r3, #11]
 8001c9a:	b21b      	sxth	r3, r3
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	b21b      	sxth	r3, r3
 8001ca0:	817b      	strh	r3, [r7, #10]
	uint16_t data3 = (uint16_t)shtpData[5 + 9] << 8 | shtpData[5 + 8];
 8001ca2:	4b7a      	ldr	r3, [pc, #488]	; (8001e8c <IMU_parseInputReport+0x264>)
 8001ca4:	7b9b      	ldrb	r3, [r3, #14]
 8001ca6:	021b      	lsls	r3, r3, #8
 8001ca8:	b21a      	sxth	r2, r3
 8001caa:	4b78      	ldr	r3, [pc, #480]	; (8001e8c <IMU_parseInputReport+0x264>)
 8001cac:	7b5b      	ldrb	r3, [r3, #13]
 8001cae:	b21b      	sxth	r3, r3
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	b21b      	sxth	r3, r3
 8001cb4:	813b      	strh	r3, [r7, #8]
	uint16_t data4 = 0;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	82fb      	strh	r3, [r7, #22]
	uint16_t data5 = 0; //We would need to change this to uin32_t to capture time stamp value on Raw Accel/Gyro/Mag reports
 8001cba:	2300      	movs	r3, #0
 8001cbc:	82bb      	strh	r3, [r7, #20]

	if (dataLength - 5 > 9)
 8001cbe:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001cc2:	3b05      	subs	r3, #5
 8001cc4:	2b09      	cmp	r3, #9
 8001cc6:	dd09      	ble.n	8001cdc <IMU_parseInputReport+0xb4>
	{
		data4 = (uint16_t)shtpData[5 + 11] << 8 | shtpData[5 + 10];
 8001cc8:	4b70      	ldr	r3, [pc, #448]	; (8001e8c <IMU_parseInputReport+0x264>)
 8001cca:	7c1b      	ldrb	r3, [r3, #16]
 8001ccc:	021b      	lsls	r3, r3, #8
 8001cce:	b21a      	sxth	r2, r3
 8001cd0:	4b6e      	ldr	r3, [pc, #440]	; (8001e8c <IMU_parseInputReport+0x264>)
 8001cd2:	7bdb      	ldrb	r3, [r3, #15]
 8001cd4:	b21b      	sxth	r3, r3
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	b21b      	sxth	r3, r3
 8001cda:	82fb      	strh	r3, [r7, #22]
	}
	if (dataLength - 5 > 11)
 8001cdc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001ce0:	3b05      	subs	r3, #5
 8001ce2:	2b0b      	cmp	r3, #11
 8001ce4:	dd09      	ble.n	8001cfa <IMU_parseInputReport+0xd2>
	{
		data5 = (uint16_t)shtpData[5 + 13] << 8 | shtpData[5 + 12];
 8001ce6:	4b69      	ldr	r3, [pc, #420]	; (8001e8c <IMU_parseInputReport+0x264>)
 8001ce8:	7c9b      	ldrb	r3, [r3, #18]
 8001cea:	021b      	lsls	r3, r3, #8
 8001cec:	b21a      	sxth	r2, r3
 8001cee:	4b67      	ldr	r3, [pc, #412]	; (8001e8c <IMU_parseInputReport+0x264>)
 8001cf0:	7c5b      	ldrb	r3, [r3, #17]
 8001cf2:	b21b      	sxth	r3, r3
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	b21b      	sxth	r3, r3
 8001cf8:	82bb      	strh	r3, [r7, #20]
	}

	//Store these generic values to their proper global variable
	if (shtpData[5] == SENSOR_REPORTID_ACCELEROMETER)
 8001cfa:	4b64      	ldr	r3, [pc, #400]	; (8001e8c <IMU_parseInputReport+0x264>)
 8001cfc:	795b      	ldrb	r3, [r3, #5]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d10d      	bne.n	8001d1e <IMU_parseInputReport+0xf6>
	{
		accelAccuracy = status;
 8001d02:	7bfb      	ldrb	r3, [r7, #15]
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	4b63      	ldr	r3, [pc, #396]	; (8001e94 <IMU_parseInputReport+0x26c>)
 8001d08:	801a      	strh	r2, [r3, #0]
		rawAccelX = data1;
 8001d0a:	4a63      	ldr	r2, [pc, #396]	; (8001e98 <IMU_parseInputReport+0x270>)
 8001d0c:	89bb      	ldrh	r3, [r7, #12]
 8001d0e:	8013      	strh	r3, [r2, #0]
		rawAccelY = data2;
 8001d10:	4a62      	ldr	r2, [pc, #392]	; (8001e9c <IMU_parseInputReport+0x274>)
 8001d12:	897b      	ldrh	r3, [r7, #10]
 8001d14:	8013      	strh	r3, [r2, #0]
		rawAccelZ = data3;
 8001d16:	4a62      	ldr	r2, [pc, #392]	; (8001ea0 <IMU_parseInputReport+0x278>)
 8001d18:	893b      	ldrh	r3, [r7, #8]
 8001d1a:	8013      	strh	r3, [r2, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 8001d1c:	e16a      	b.n	8001ff4 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_LINEAR_ACCELERATION)
 8001d1e:	4b5b      	ldr	r3, [pc, #364]	; (8001e8c <IMU_parseInputReport+0x264>)
 8001d20:	795b      	ldrb	r3, [r3, #5]
 8001d22:	2b04      	cmp	r3, #4
 8001d24:	d10d      	bne.n	8001d42 <IMU_parseInputReport+0x11a>
		accelLinAccuracy = status;
 8001d26:	7bfb      	ldrb	r3, [r7, #15]
 8001d28:	b29a      	uxth	r2, r3
 8001d2a:	4b5e      	ldr	r3, [pc, #376]	; (8001ea4 <IMU_parseInputReport+0x27c>)
 8001d2c:	801a      	strh	r2, [r3, #0]
		rawLinAccelX = data1;
 8001d2e:	4a5e      	ldr	r2, [pc, #376]	; (8001ea8 <IMU_parseInputReport+0x280>)
 8001d30:	89bb      	ldrh	r3, [r7, #12]
 8001d32:	8013      	strh	r3, [r2, #0]
		rawLinAccelY = data2;
 8001d34:	4a5d      	ldr	r2, [pc, #372]	; (8001eac <IMU_parseInputReport+0x284>)
 8001d36:	897b      	ldrh	r3, [r7, #10]
 8001d38:	8013      	strh	r3, [r2, #0]
		rawLinAccelZ = data3;
 8001d3a:	4a5d      	ldr	r2, [pc, #372]	; (8001eb0 <IMU_parseInputReport+0x288>)
 8001d3c:	893b      	ldrh	r3, [r7, #8]
 8001d3e:	8013      	strh	r3, [r2, #0]
}
 8001d40:	e158      	b.n	8001ff4 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_GYROSCOPE)
 8001d42:	4b52      	ldr	r3, [pc, #328]	; (8001e8c <IMU_parseInputReport+0x264>)
 8001d44:	795b      	ldrb	r3, [r3, #5]
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d10d      	bne.n	8001d66 <IMU_parseInputReport+0x13e>
		gyroAccuracy = status;
 8001d4a:	7bfb      	ldrb	r3, [r7, #15]
 8001d4c:	b29a      	uxth	r2, r3
 8001d4e:	4b59      	ldr	r3, [pc, #356]	; (8001eb4 <IMU_parseInputReport+0x28c>)
 8001d50:	801a      	strh	r2, [r3, #0]
		rawGyroX = data1;
 8001d52:	4a59      	ldr	r2, [pc, #356]	; (8001eb8 <IMU_parseInputReport+0x290>)
 8001d54:	89bb      	ldrh	r3, [r7, #12]
 8001d56:	8013      	strh	r3, [r2, #0]
		rawGyroY = data2;
 8001d58:	4a58      	ldr	r2, [pc, #352]	; (8001ebc <IMU_parseInputReport+0x294>)
 8001d5a:	897b      	ldrh	r3, [r7, #10]
 8001d5c:	8013      	strh	r3, [r2, #0]
		rawGyroZ = data3;
 8001d5e:	4a58      	ldr	r2, [pc, #352]	; (8001ec0 <IMU_parseInputReport+0x298>)
 8001d60:	893b      	ldrh	r3, [r7, #8]
 8001d62:	8013      	strh	r3, [r2, #0]
}
 8001d64:	e146      	b.n	8001ff4 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_MAGNETIC_FIELD)
 8001d66:	4b49      	ldr	r3, [pc, #292]	; (8001e8c <IMU_parseInputReport+0x264>)
 8001d68:	795b      	ldrb	r3, [r3, #5]
 8001d6a:	2b03      	cmp	r3, #3
 8001d6c:	d10d      	bne.n	8001d8a <IMU_parseInputReport+0x162>
		magAccuracy = status;
 8001d6e:	7bfb      	ldrb	r3, [r7, #15]
 8001d70:	b29a      	uxth	r2, r3
 8001d72:	4b54      	ldr	r3, [pc, #336]	; (8001ec4 <IMU_parseInputReport+0x29c>)
 8001d74:	801a      	strh	r2, [r3, #0]
		rawMagX = data1;
 8001d76:	4a54      	ldr	r2, [pc, #336]	; (8001ec8 <IMU_parseInputReport+0x2a0>)
 8001d78:	89bb      	ldrh	r3, [r7, #12]
 8001d7a:	8013      	strh	r3, [r2, #0]
		rawMagY = data2;
 8001d7c:	4a53      	ldr	r2, [pc, #332]	; (8001ecc <IMU_parseInputReport+0x2a4>)
 8001d7e:	897b      	ldrh	r3, [r7, #10]
 8001d80:	8013      	strh	r3, [r2, #0]
		rawMagZ = data3;
 8001d82:	4a53      	ldr	r2, [pc, #332]	; (8001ed0 <IMU_parseInputReport+0x2a8>)
 8001d84:	893b      	ldrh	r3, [r7, #8]
 8001d86:	8013      	strh	r3, [r2, #0]
}
 8001d88:	e134      	b.n	8001ff4 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_ROTATION_VECTOR || shtpData[5] == SENSOR_REPORTID_GAME_ROTATION_VECTOR)
 8001d8a:	4b40      	ldr	r3, [pc, #256]	; (8001e8c <IMU_parseInputReport+0x264>)
 8001d8c:	795b      	ldrb	r3, [r3, #5]
 8001d8e:	2b05      	cmp	r3, #5
 8001d90:	d003      	beq.n	8001d9a <IMU_parseInputReport+0x172>
 8001d92:	4b3e      	ldr	r3, [pc, #248]	; (8001e8c <IMU_parseInputReport+0x264>)
 8001d94:	795b      	ldrb	r3, [r3, #5]
 8001d96:	2b08      	cmp	r3, #8
 8001d98:	d166      	bne.n	8001e68 <IMU_parseInputReport+0x240>
		rotSample.tick_ms = HAL_GetTick();
 8001d9a:	f004 f819 	bl	8005dd0 <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	4b4c      	ldr	r3, [pc, #304]	; (8001ed4 <IMU_parseInputReport+0x2ac>)
 8001da2:	615a      	str	r2, [r3, #20]
		rotSample.quatI =  IMU_qToFloat(data1, rotationVector_Q1);;
 8001da4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001da8:	4b4b      	ldr	r3, [pc, #300]	; (8001ed8 <IMU_parseInputReport+0x2b0>)
 8001daa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	4619      	mov	r1, r3
 8001db2:	4610      	mov	r0, r2
 8001db4:	f000 f964 	bl	8002080 <IMU_qToFloat>
 8001db8:	eef0 7a40 	vmov.f32	s15, s0
 8001dbc:	4b45      	ldr	r3, [pc, #276]	; (8001ed4 <IMU_parseInputReport+0x2ac>)
 8001dbe:	edc3 7a00 	vstr	s15, [r3]
		rotSample.quatJ =  IMU_qToFloat(data2, rotationVector_Q1);;
 8001dc2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001dc6:	4b44      	ldr	r3, [pc, #272]	; (8001ed8 <IMU_parseInputReport+0x2b0>)
 8001dc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4610      	mov	r0, r2
 8001dd2:	f000 f955 	bl	8002080 <IMU_qToFloat>
 8001dd6:	eef0 7a40 	vmov.f32	s15, s0
 8001dda:	4b3e      	ldr	r3, [pc, #248]	; (8001ed4 <IMU_parseInputReport+0x2ac>)
 8001ddc:	edc3 7a01 	vstr	s15, [r3, #4]
		rotSample.quatK =  IMU_qToFloat(data3, rotationVector_Q1);;
 8001de0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001de4:	4b3c      	ldr	r3, [pc, #240]	; (8001ed8 <IMU_parseInputReport+0x2b0>)
 8001de6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	4619      	mov	r1, r3
 8001dee:	4610      	mov	r0, r2
 8001df0:	f000 f946 	bl	8002080 <IMU_qToFloat>
 8001df4:	eef0 7a40 	vmov.f32	s15, s0
 8001df8:	4b36      	ldr	r3, [pc, #216]	; (8001ed4 <IMU_parseInputReport+0x2ac>)
 8001dfa:	edc3 7a02 	vstr	s15, [r3, #8]
		rotSample.quatReal = IMU_qToFloat(data4, rotationVector_Q1);
 8001dfe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001e02:	4b35      	ldr	r3, [pc, #212]	; (8001ed8 <IMU_parseInputReport+0x2b0>)
 8001e04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4610      	mov	r0, r2
 8001e0e:	f000 f937 	bl	8002080 <IMU_qToFloat>
 8001e12:	eef0 7a40 	vmov.f32	s15, s0
 8001e16:	4b2f      	ldr	r3, [pc, #188]	; (8001ed4 <IMU_parseInputReport+0x2ac>)
 8001e18:	edc3 7a03 	vstr	s15, [r3, #12]
		rotSample.quatRadianAccuracy = IMU_qToFloat(data5, 12);
 8001e1c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001e20:	210c      	movs	r1, #12
 8001e22:	4618      	mov	r0, r3
 8001e24:	f000 f92c 	bl	8002080 <IMU_qToFloat>
 8001e28:	eef0 7a40 	vmov.f32	s15, s0
 8001e2c:	4b29      	ldr	r3, [pc, #164]	; (8001ed4 <IMU_parseInputReport+0x2ac>)
 8001e2e:	edc3 7a04 	vstr	s15, [r3, #16]
		osMessageQueuePut(rotationSampleQueueHandle, &rotSample, 0U, 0);
 8001e32:	4b2a      	ldr	r3, [pc, #168]	; (8001edc <IMU_parseInputReport+0x2b4>)
 8001e34:	6818      	ldr	r0, [r3, #0]
 8001e36:	2300      	movs	r3, #0
 8001e38:	2200      	movs	r2, #0
 8001e3a:	4926      	ldr	r1, [pc, #152]	; (8001ed4 <IMU_parseInputReport+0x2ac>)
 8001e3c:	f00f f8e4 	bl	8011008 <osMessageQueuePut>
		quatAccuracy = status;
 8001e40:	7bfb      	ldrb	r3, [r7, #15]
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	4b26      	ldr	r3, [pc, #152]	; (8001ee0 <IMU_parseInputReport+0x2b8>)
 8001e46:	801a      	strh	r2, [r3, #0]
		rawQuatI = data1;
 8001e48:	4a26      	ldr	r2, [pc, #152]	; (8001ee4 <IMU_parseInputReport+0x2bc>)
 8001e4a:	89bb      	ldrh	r3, [r7, #12]
 8001e4c:	8013      	strh	r3, [r2, #0]
		rawQuatJ = data2;
 8001e4e:	4a26      	ldr	r2, [pc, #152]	; (8001ee8 <IMU_parseInputReport+0x2c0>)
 8001e50:	897b      	ldrh	r3, [r7, #10]
 8001e52:	8013      	strh	r3, [r2, #0]
		rawQuatK = data3;
 8001e54:	4a25      	ldr	r2, [pc, #148]	; (8001eec <IMU_parseInputReport+0x2c4>)
 8001e56:	893b      	ldrh	r3, [r7, #8]
 8001e58:	8013      	strh	r3, [r2, #0]
		rawQuatReal = data4;
 8001e5a:	4a25      	ldr	r2, [pc, #148]	; (8001ef0 <IMU_parseInputReport+0x2c8>)
 8001e5c:	8afb      	ldrh	r3, [r7, #22]
 8001e5e:	8013      	strh	r3, [r2, #0]
		rawQuatRadianAccuracy = data5; //Only available on rotation vector, not game rot vector
 8001e60:	4a24      	ldr	r2, [pc, #144]	; (8001ef4 <IMU_parseInputReport+0x2cc>)
 8001e62:	8abb      	ldrh	r3, [r7, #20]
 8001e64:	8013      	strh	r3, [r2, #0]
}
 8001e66:	e0c5      	b.n	8001ff4 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_STEP_COUNTER)
 8001e68:	4b08      	ldr	r3, [pc, #32]	; (8001e8c <IMU_parseInputReport+0x264>)
 8001e6a:	795b      	ldrb	r3, [r3, #5]
 8001e6c:	2b11      	cmp	r3, #17
 8001e6e:	d147      	bne.n	8001f00 <IMU_parseInputReport+0x2d8>
		stepSample.tick_ms = HAL_GetTick();
 8001e70:	f003 ffae 	bl	8005dd0 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	4b20      	ldr	r3, [pc, #128]	; (8001ef8 <IMU_parseInputReport+0x2d0>)
 8001e78:	605a      	str	r2, [r3, #4]
		stepSample.stepCount = data3;
 8001e7a:	4a1f      	ldr	r2, [pc, #124]	; (8001ef8 <IMU_parseInputReport+0x2d0>)
 8001e7c:	893b      	ldrh	r3, [r7, #8]
 8001e7e:	8013      	strh	r3, [r2, #0]
		stepCount = data3; //Bytes 8/9
 8001e80:	4a1e      	ldr	r2, [pc, #120]	; (8001efc <IMU_parseInputReport+0x2d4>)
 8001e82:	893b      	ldrh	r3, [r7, #8]
 8001e84:	8013      	strh	r3, [r2, #0]
}
 8001e86:	e0b5      	b.n	8001ff4 <IMU_parseInputReport+0x3cc>
 8001e88:	200280f0 	.word	0x200280f0
 8001e8c:	20028180 	.word	0x20028180
 8001e90:	2002810c 	.word	0x2002810c
 8001e94:	20028248 	.word	0x20028248
 8001e98:	20028230 	.word	0x20028230
 8001e9c:	2002824c 	.word	0x2002824c
 8001ea0:	20028148 	.word	0x20028148
 8001ea4:	20028144 	.word	0x20028144
 8001ea8:	20028116 	.word	0x20028116
 8001eac:	20028234 	.word	0x20028234
 8001eb0:	20028172 	.word	0x20028172
 8001eb4:	20028174 	.word	0x20028174
 8001eb8:	20028176 	.word	0x20028176
 8001ebc:	2002813e 	.word	0x2002813e
 8001ec0:	2002813c 	.word	0x2002813c
 8001ec4:	200280f4 	.word	0x200280f4
 8001ec8:	20028140 	.word	0x20028140
 8001ecc:	20028236 	.word	0x20028236
 8001ed0:	20028146 	.word	0x20028146
 8001ed4:	20028158 	.word	0x20028158
 8001ed8:	20000004 	.word	0x20000004
 8001edc:	20027c68 	.word	0x20027c68
 8001ee0:	20028112 	.word	0x20028112
 8001ee4:	2002824a 	.word	0x2002824a
 8001ee8:	20028170 	.word	0x20028170
 8001eec:	200280ec 	.word	0x200280ec
 8001ef0:	20028108 	.word	0x20028108
 8001ef4:	2002814a 	.word	0x2002814a
 8001ef8:	200280f8 	.word	0x200280f8
 8001efc:	2002824e 	.word	0x2002824e
	else if (shtpData[5] == SENSOR_REPORTID_STABILITY_CLASSIFIER)
 8001f00:	4b3e      	ldr	r3, [pc, #248]	; (8001ffc <IMU_parseInputReport+0x3d4>)
 8001f02:	795b      	ldrb	r3, [r3, #5]
 8001f04:	2b13      	cmp	r3, #19
 8001f06:	d10d      	bne.n	8001f24 <IMU_parseInputReport+0x2fc>
		stabilitySample.tick_ms = HAL_GetTick();
 8001f08:	f003 ff62 	bl	8005dd0 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	4b3c      	ldr	r3, [pc, #240]	; (8002000 <IMU_parseInputReport+0x3d8>)
 8001f10:	605a      	str	r2, [r3, #4]
		stabilitySample.stabilityClass = shtpData[5 + 4];
 8001f12:	4b3a      	ldr	r3, [pc, #232]	; (8001ffc <IMU_parseInputReport+0x3d4>)
 8001f14:	7a5a      	ldrb	r2, [r3, #9]
 8001f16:	4b3a      	ldr	r3, [pc, #232]	; (8002000 <IMU_parseInputReport+0x3d8>)
 8001f18:	701a      	strb	r2, [r3, #0]
		stabilityClassifier = shtpData[5 + 4]; //Byte 4 only
 8001f1a:	4b38      	ldr	r3, [pc, #224]	; (8001ffc <IMU_parseInputReport+0x3d4>)
 8001f1c:	7a5a      	ldrb	r2, [r3, #9]
 8001f1e:	4b39      	ldr	r3, [pc, #228]	; (8002004 <IMU_parseInputReport+0x3dc>)
 8001f20:	701a      	strb	r2, [r3, #0]
}
 8001f22:	e067      	b.n	8001ff4 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_PERSONAL_ACTIVITY_CLASSIFIER)
 8001f24:	4b35      	ldr	r3, [pc, #212]	; (8001ffc <IMU_parseInputReport+0x3d4>)
 8001f26:	795b      	ldrb	r3, [r3, #5]
 8001f28:	2b1e      	cmp	r3, #30
 8001f2a:	d12b      	bne.n	8001f84 <IMU_parseInputReport+0x35c>
		activitySample.tick_ms = HAL_GetTick();
 8001f2c:	f003 ff50 	bl	8005dd0 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	4b35      	ldr	r3, [pc, #212]	; (8002008 <IMU_parseInputReport+0x3e0>)
 8001f34:	60da      	str	r2, [r3, #12]
		for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 8001f36:	2300      	movs	r3, #0
 8001f38:	74fb      	strb	r3, [r7, #19]
 8001f3a:	e00c      	b.n	8001f56 <IMU_parseInputReport+0x32e>
			_activityConfidences[x] = shtpData[5 + 6 + x]; //5 bytes of timestamp, byte 6 is first confidence byte
 8001f3c:	7cfb      	ldrb	r3, [r7, #19]
 8001f3e:	f103 020b 	add.w	r2, r3, #11
 8001f42:	4b32      	ldr	r3, [pc, #200]	; (800200c <IMU_parseInputReport+0x3e4>)
 8001f44:	6819      	ldr	r1, [r3, #0]
 8001f46:	7cfb      	ldrb	r3, [r7, #19]
 8001f48:	440b      	add	r3, r1
 8001f4a:	492c      	ldr	r1, [pc, #176]	; (8001ffc <IMU_parseInputReport+0x3d4>)
 8001f4c:	5c8a      	ldrb	r2, [r1, r2]
 8001f4e:	701a      	strb	r2, [r3, #0]
		for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 8001f50:	7cfb      	ldrb	r3, [r7, #19]
 8001f52:	3301      	adds	r3, #1
 8001f54:	74fb      	strb	r3, [r7, #19]
 8001f56:	7cfb      	ldrb	r3, [r7, #19]
 8001f58:	2b08      	cmp	r3, #8
 8001f5a:	d9ef      	bls.n	8001f3c <IMU_parseInputReport+0x314>
		activityClassifier = shtpData[5 + 5]; //Most likely state
 8001f5c:	4b27      	ldr	r3, [pc, #156]	; (8001ffc <IMU_parseInputReport+0x3d4>)
 8001f5e:	7a9a      	ldrb	r2, [r3, #10]
 8001f60:	4b2b      	ldr	r3, [pc, #172]	; (8002010 <IMU_parseInputReport+0x3e8>)
 8001f62:	701a      	strb	r2, [r3, #0]
		memcpy(activitySample.activityConfidence, _activityConfidences, 9);
 8001f64:	4b29      	ldr	r3, [pc, #164]	; (800200c <IMU_parseInputReport+0x3e4>)
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	4b27      	ldr	r3, [pc, #156]	; (8002008 <IMU_parseInputReport+0x3e0>)
 8001f6a:	6810      	ldr	r0, [r2, #0]
 8001f6c:	6851      	ldr	r1, [r2, #4]
 8001f6e:	c303      	stmia	r3!, {r0, r1}
 8001f70:	7a12      	ldrb	r2, [r2, #8]
 8001f72:	701a      	strb	r2, [r3, #0]
		osMessageQueuePut(activitySampleQueueHandle, &activitySample, 0U, 0);
 8001f74:	4b27      	ldr	r3, [pc, #156]	; (8002014 <IMU_parseInputReport+0x3ec>)
 8001f76:	6818      	ldr	r0, [r3, #0]
 8001f78:	2300      	movs	r3, #0
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	4922      	ldr	r1, [pc, #136]	; (8002008 <IMU_parseInputReport+0x3e0>)
 8001f7e:	f00f f843 	bl	8011008 <osMessageQueuePut>
}
 8001f82:	e037      	b.n	8001ff4 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_RAW_ACCELEROMETER)
 8001f84:	4b1d      	ldr	r3, [pc, #116]	; (8001ffc <IMU_parseInputReport+0x3d4>)
 8001f86:	795b      	ldrb	r3, [r3, #5]
 8001f88:	2b14      	cmp	r3, #20
 8001f8a:	d109      	bne.n	8001fa0 <IMU_parseInputReport+0x378>
		memsRawAccelX = data1;
 8001f8c:	4a22      	ldr	r2, [pc, #136]	; (8002018 <IMU_parseInputReport+0x3f0>)
 8001f8e:	89bb      	ldrh	r3, [r7, #12]
 8001f90:	8013      	strh	r3, [r2, #0]
		memsRawAccelY = data2;
 8001f92:	4a22      	ldr	r2, [pc, #136]	; (800201c <IMU_parseInputReport+0x3f4>)
 8001f94:	897b      	ldrh	r3, [r7, #10]
 8001f96:	8013      	strh	r3, [r2, #0]
		memsRawAccelZ = data3;
 8001f98:	4a21      	ldr	r2, [pc, #132]	; (8002020 <IMU_parseInputReport+0x3f8>)
 8001f9a:	893b      	ldrh	r3, [r7, #8]
 8001f9c:	8013      	strh	r3, [r2, #0]
}
 8001f9e:	e029      	b.n	8001ff4 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_RAW_GYROSCOPE)
 8001fa0:	4b16      	ldr	r3, [pc, #88]	; (8001ffc <IMU_parseInputReport+0x3d4>)
 8001fa2:	795b      	ldrb	r3, [r3, #5]
 8001fa4:	2b15      	cmp	r3, #21
 8001fa6:	d109      	bne.n	8001fbc <IMU_parseInputReport+0x394>
		memsRawGyroX = data1;
 8001fa8:	4a1e      	ldr	r2, [pc, #120]	; (8002024 <IMU_parseInputReport+0x3fc>)
 8001faa:	89bb      	ldrh	r3, [r7, #12]
 8001fac:	8013      	strh	r3, [r2, #0]
		memsRawGyroY = data2;
 8001fae:	4a1e      	ldr	r2, [pc, #120]	; (8002028 <IMU_parseInputReport+0x400>)
 8001fb0:	897b      	ldrh	r3, [r7, #10]
 8001fb2:	8013      	strh	r3, [r2, #0]
		memsRawGyroZ = data3;
 8001fb4:	4a1d      	ldr	r2, [pc, #116]	; (800202c <IMU_parseInputReport+0x404>)
 8001fb6:	893b      	ldrh	r3, [r7, #8]
 8001fb8:	8013      	strh	r3, [r2, #0]
}
 8001fba:	e01b      	b.n	8001ff4 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_RAW_MAGNETOMETER)
 8001fbc:	4b0f      	ldr	r3, [pc, #60]	; (8001ffc <IMU_parseInputReport+0x3d4>)
 8001fbe:	795b      	ldrb	r3, [r3, #5]
 8001fc0:	2b16      	cmp	r3, #22
 8001fc2:	d109      	bne.n	8001fd8 <IMU_parseInputReport+0x3b0>
		memsRawMagX = data1;
 8001fc4:	4a1a      	ldr	r2, [pc, #104]	; (8002030 <IMU_parseInputReport+0x408>)
 8001fc6:	89bb      	ldrh	r3, [r7, #12]
 8001fc8:	8013      	strh	r3, [r2, #0]
		memsRawMagY = data2;
 8001fca:	4a1a      	ldr	r2, [pc, #104]	; (8002034 <IMU_parseInputReport+0x40c>)
 8001fcc:	897b      	ldrh	r3, [r7, #10]
 8001fce:	8013      	strh	r3, [r2, #0]
		memsRawMagZ = data3;
 8001fd0:	4a19      	ldr	r2, [pc, #100]	; (8002038 <IMU_parseInputReport+0x410>)
 8001fd2:	893b      	ldrh	r3, [r7, #8]
 8001fd4:	8013      	strh	r3, [r2, #0]
}
 8001fd6:	e00d      	b.n	8001ff4 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SHTP_REPORT_COMMAND_RESPONSE)
 8001fd8:	4b08      	ldr	r3, [pc, #32]	; (8001ffc <IMU_parseInputReport+0x3d4>)
 8001fda:	795b      	ldrb	r3, [r3, #5]
 8001fdc:	2bf1      	cmp	r3, #241	; 0xf1
 8001fde:	d109      	bne.n	8001ff4 <IMU_parseInputReport+0x3cc>
		uint8_t command = shtpData[5 + 2]; //This is the Command byte of the response
 8001fe0:	4b06      	ldr	r3, [pc, #24]	; (8001ffc <IMU_parseInputReport+0x3d4>)
 8001fe2:	79db      	ldrb	r3, [r3, #7]
 8001fe4:	71fb      	strb	r3, [r7, #7]
		if (command == COMMAND_ME_CALIBRATE)
 8001fe6:	79fb      	ldrb	r3, [r7, #7]
 8001fe8:	2b07      	cmp	r3, #7
 8001fea:	d103      	bne.n	8001ff4 <IMU_parseInputReport+0x3cc>
			calibrationStatus = shtpData[5 + 5]; //R0 - Status (0 = success, non-zero = fail)
 8001fec:	4b03      	ldr	r3, [pc, #12]	; (8001ffc <IMU_parseInputReport+0x3d4>)
 8001fee:	7a9a      	ldrb	r2, [r3, #10]
 8001ff0:	4b12      	ldr	r3, [pc, #72]	; (800203c <IMU_parseInputReport+0x414>)
 8001ff2:	701a      	strb	r2, [r3, #0]
}
 8001ff4:	bf00      	nop
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	20028180 	.word	0x20028180
 8002000:	20028100 	.word	0x20028100
 8002004:	2002817a 	.word	0x2002817a
 8002008:	20028238 	.word	0x20028238
 800200c:	20028154 	.word	0x20028154
 8002010:	20028232 	.word	0x20028232
 8002014:	20027c44 	.word	0x20027c44
 8002018:	20028178 	.word	0x20028178
 800201c:	20028152 	.word	0x20028152
 8002020:	20028202 	.word	0x20028202
 8002024:	200280f6 	.word	0x200280f6
 8002028:	2002817c 	.word	0x2002817c
 800202c:	2002814c 	.word	0x2002814c
 8002030:	20028150 	.word	0x20028150
 8002034:	2002814e 	.word	0x2002814e
 8002038:	20028114 	.word	0x20028114
 800203c:	20028233 	.word	0x20028233

08002040 <IMU_softReset>:
//Send command to reset IC
//Read all advertisement packets from sensor
//The sensor has been seen to reset twice if we attempt too much too quickly.
//This seems to work reliably.
void IMU_softReset(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
	shtpData[0] = 1; //Reset
 8002044:	4b0d      	ldr	r3, [pc, #52]	; (800207c <IMU_softReset+0x3c>)
 8002046:	2201      	movs	r2, #1
 8002048:	701a      	strb	r2, [r3, #0]

	//Attempt to start communication with sensor
	IMU_sendPacket(CHANNEL_EXECUTABLE, 1); //Transmit packet on channel 1, 1 byte
 800204a:	2301      	movs	r3, #1
 800204c:	2101      	movs	r1, #1
 800204e:	4618      	mov	r0, r3
 8002050:	f000 f9fa 	bl	8002448 <IMU_sendPacket>

	//Read all incoming data and flush it
	HAL_Delay(200);
 8002054:	20c8      	movs	r0, #200	; 0xc8
 8002056:	f003 fed3 	bl	8005e00 <HAL_Delay>
	while (IMU_receivePacket() == true)
 800205a:	bf00      	nop
 800205c:	f000 f94c 	bl	80022f8 <IMU_receivePacket>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1fa      	bne.n	800205c <IMU_softReset+0x1c>
		;
	HAL_Delay(200);
 8002066:	20c8      	movs	r0, #200	; 0xc8
 8002068:	f003 feca 	bl	8005e00 <HAL_Delay>
	while (IMU_receivePacket() == true)
 800206c:	bf00      	nop
 800206e:	f000 f943 	bl	80022f8 <IMU_receivePacket>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d1fa      	bne.n	800206e <IMU_softReset+0x2e>
		;
}
 8002078:	bf00      	nop
 800207a:	bd80      	pop	{r7, pc}
 800207c:	20028180 	.word	0x20028180

08002080 <IMU_qToFloat>:
}

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float IMU_qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
 8002080:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	4603      	mov	r3, r0
 8002088:	460a      	mov	r2, r1
 800208a:	80fb      	strh	r3, [r7, #6]
 800208c:	4613      	mov	r3, r2
 800208e:	717b      	strb	r3, [r7, #5]
	float qFloat = fixedPointValue;
 8002090:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002094:	ee07 3a90 	vmov	s15, r3
 8002098:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800209c:	edc7 7a03 	vstr	s15, [r7, #12]
	qFloat *= pow(2, qPoint * -1);
 80020a0:	797b      	ldrb	r3, [r7, #5]
 80020a2:	425b      	negs	r3, r3
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7fe f9c7 	bl	8000438 <__aeabi_i2d>
 80020aa:	4603      	mov	r3, r0
 80020ac:	460c      	mov	r4, r1
 80020ae:	ec44 3b11 	vmov	d1, r3, r4
 80020b2:	ed9f 0b11 	vldr	d0, [pc, #68]	; 80020f8 <IMU_qToFloat+0x78>
 80020b6:	f018 fc49 	bl	801a94c <pow>
 80020ba:	ec56 5b10 	vmov	r5, r6, d0
 80020be:	68f8      	ldr	r0, [r7, #12]
 80020c0:	f7fe f9cc 	bl	800045c <__aeabi_f2d>
 80020c4:	4603      	mov	r3, r0
 80020c6:	460c      	mov	r4, r1
 80020c8:	461a      	mov	r2, r3
 80020ca:	4623      	mov	r3, r4
 80020cc:	4628      	mov	r0, r5
 80020ce:	4631      	mov	r1, r6
 80020d0:	f7fe fa1c 	bl	800050c <__aeabi_dmul>
 80020d4:	4603      	mov	r3, r0
 80020d6:	460c      	mov	r4, r1
 80020d8:	4618      	mov	r0, r3
 80020da:	4621      	mov	r1, r4
 80020dc:	f7fe fcc6 	bl	8000a6c <__aeabi_d2f>
 80020e0:	4603      	mov	r3, r0
 80020e2:	60fb      	str	r3, [r7, #12]
	return (qFloat);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	ee07 3a90 	vmov	s15, r3
}
 80020ea:	eeb0 0a67 	vmov.f32	s0, s15
 80020ee:	3714      	adds	r7, #20
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020f4:	f3af 8000 	nop.w
 80020f8:	00000000 	.word	0x00000000
 80020fc:	40000000 	.word	0x40000000

08002100 <IMU_enableRotationVector>:

//Sends the packet to enable the rotation vector
void IMU_enableRotationVector(uint16_t timeBetweenReports)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	4603      	mov	r3, r0
 8002108:	80fb      	strh	r3, [r7, #6]
	IMU_setFeatureCommand_2(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports);
 800210a:	88fb      	ldrh	r3, [r7, #6]
 800210c:	4619      	mov	r1, r3
 800210e:	2005      	movs	r0, #5
 8002110:	f000 f81a 	bl	8002148 <IMU_setFeatureCommand_2>
}
 8002114:	bf00      	nop
 8002116:	3708      	adds	r7, #8
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <IMU_enableActivityClassifier>:
	IMU_setFeatureCommand_2(SENSOR_REPORTID_RAW_MAGNETOMETER, timeBetweenReports);
}

//Sends the packet to enable the various activity classifiers
void IMU_enableActivityClassifier(uint16_t timeBetweenReports, uint32_t activitiesToEnable, uint8_t *activityConfidences)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	4603      	mov	r3, r0
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
 8002128:	81fb      	strh	r3, [r7, #14]
	_activityConfidences = activityConfidences; //Store pointer to array
 800212a:	4a06      	ldr	r2, [pc, #24]	; (8002144 <IMU_enableActivityClassifier+0x28>)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6013      	str	r3, [r2, #0]

	IMU_setFeatureCommand_3(SENSOR_REPORTID_PERSONAL_ACTIVITY_CLASSIFIER, timeBetweenReports, activitiesToEnable);
 8002130:	89fb      	ldrh	r3, [r7, #14]
 8002132:	68ba      	ldr	r2, [r7, #8]
 8002134:	4619      	mov	r1, r3
 8002136:	201e      	movs	r0, #30
 8002138:	f000 f818 	bl	800216c <IMU_setFeatureCommand_3>
}
 800213c:	bf00      	nop
 800213e:	3710      	adds	r7, #16
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	20028154 	.word	0x20028154

08002148 <IMU_setFeatureCommand_2>:
	return (false);
}

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
void IMU_setFeatureCommand_2(uint8_t reportID, uint16_t timeBetweenReports)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	4603      	mov	r3, r0
 8002150:	460a      	mov	r2, r1
 8002152:	71fb      	strb	r3, [r7, #7]
 8002154:	4613      	mov	r3, r2
 8002156:	80bb      	strh	r3, [r7, #4]
	IMU_setFeatureCommand_3(reportID, timeBetweenReports, 0); //No specific config
 8002158:	88b9      	ldrh	r1, [r7, #4]
 800215a:	79fb      	ldrb	r3, [r7, #7]
 800215c:	2200      	movs	r2, #0
 800215e:	4618      	mov	r0, r3
 8002160:	f000 f804 	bl	800216c <IMU_setFeatureCommand_3>
}
 8002164:	bf00      	nop
 8002166:	3708      	adds	r7, #8
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <IMU_setFeatureCommand_3>:

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void IMU_setFeatureCommand_3(uint8_t reportID, uint16_t timeBetweenReports, uint32_t specificConfig)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	4603      	mov	r3, r0
 8002174:	603a      	str	r2, [r7, #0]
 8002176:	71fb      	strb	r3, [r7, #7]
 8002178:	460b      	mov	r3, r1
 800217a:	80bb      	strh	r3, [r7, #4]
	long microsBetweenReports = (long)timeBetweenReports * 1000L;
 800217c:	88bb      	ldrh	r3, [r7, #4]
 800217e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002182:	fb02 f303 	mul.w	r3, r2, r3
 8002186:	60fb      	str	r3, [r7, #12]

	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 8002188:	4b24      	ldr	r3, [pc, #144]	; (800221c <IMU_setFeatureCommand_3+0xb0>)
 800218a:	22fd      	movs	r2, #253	; 0xfd
 800218c:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;							   //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 800218e:	4a23      	ldr	r2, [pc, #140]	; (800221c <IMU_setFeatureCommand_3+0xb0>)
 8002190:	79fb      	ldrb	r3, [r7, #7]
 8002192:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;								   //Feature flags
 8002194:	4b21      	ldr	r3, [pc, #132]	; (800221c <IMU_setFeatureCommand_3+0xb0>)
 8002196:	2200      	movs	r2, #0
 8002198:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;								   //Change sensitivity (LSB)
 800219a:	4b20      	ldr	r3, [pc, #128]	; (800221c <IMU_setFeatureCommand_3+0xb0>)
 800219c:	2200      	movs	r2, #0
 800219e:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;								   //Change sensitivity (MSB)
 80021a0:	4b1e      	ldr	r3, [pc, #120]	; (800221c <IMU_setFeatureCommand_3+0xb0>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	4b1c      	ldr	r3, [pc, #112]	; (800221c <IMU_setFeatureCommand_3+0xb0>)
 80021ac:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	121b      	asrs	r3, r3, #8
 80021b2:	b2da      	uxtb	r2, r3
 80021b4:	4b19      	ldr	r3, [pc, #100]	; (800221c <IMU_setFeatureCommand_3+0xb0>)
 80021b6:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	141b      	asrs	r3, r3, #16
 80021bc:	b2da      	uxtb	r2, r3
 80021be:	4b17      	ldr	r3, [pc, #92]	; (800221c <IMU_setFeatureCommand_3+0xb0>)
 80021c0:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	0e1b      	lsrs	r3, r3, #24
 80021c6:	b2da      	uxtb	r2, r3
 80021c8:	4b14      	ldr	r3, [pc, #80]	; (800221c <IMU_setFeatureCommand_3+0xb0>)
 80021ca:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;								   //Batch Interval (LSB)
 80021cc:	4b13      	ldr	r3, [pc, #76]	; (800221c <IMU_setFeatureCommand_3+0xb0>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;								   //Batch Interval
 80021d2:	4b12      	ldr	r3, [pc, #72]	; (800221c <IMU_setFeatureCommand_3+0xb0>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;								   //Batch Interval
 80021d8:	4b10      	ldr	r3, [pc, #64]	; (800221c <IMU_setFeatureCommand_3+0xb0>)
 80021da:	2200      	movs	r2, #0
 80021dc:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;								   //Batch Interval (MSB)
 80021de:	4b0f      	ldr	r3, [pc, #60]	; (800221c <IMU_setFeatureCommand_3+0xb0>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   //Sensor-specific config (LSB)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	b2da      	uxtb	r2, r3
 80021e8:	4b0c      	ldr	r3, [pc, #48]	; (800221c <IMU_setFeatureCommand_3+0xb0>)
 80021ea:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   //Sensor-specific config
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	0a1b      	lsrs	r3, r3, #8
 80021f0:	b2da      	uxtb	r2, r3
 80021f2:	4b0a      	ldr	r3, [pc, #40]	; (800221c <IMU_setFeatureCommand_3+0xb0>)
 80021f4:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	  //Sensor-specific config
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	0c1b      	lsrs	r3, r3, #16
 80021fa:	b2da      	uxtb	r2, r3
 80021fc:	4b07      	ldr	r3, [pc, #28]	; (800221c <IMU_setFeatureCommand_3+0xb0>)
 80021fe:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	  //Sensor-specific config (MSB)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	0e1b      	lsrs	r3, r3, #24
 8002204:	b2da      	uxtb	r2, r3
 8002206:	4b05      	ldr	r3, [pc, #20]	; (800221c <IMU_setFeatureCommand_3+0xb0>)
 8002208:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	IMU_sendPacket(CHANNEL_CONTROL, 17);
 800220a:	2302      	movs	r3, #2
 800220c:	2111      	movs	r1, #17
 800220e:	4618      	mov	r0, r3
 8002210:	f000 f91a 	bl	8002448 <IMU_sendPacket>
}
 8002214:	bf00      	nop
 8002216:	3710      	adds	r7, #16
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	20028180 	.word	0x20028180

08002220 <IMU_sendTareNow>:
	//Transmit packet on channel 2, 12 bytes
	IMU_sendPacket(CHANNEL_CONTROL, 12);
}

void IMU_sendTareNow(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
	shtpData[0] = SHTP_REPORT_COMMAND_REQUEST; //Command Request
 8002224:	4b17      	ldr	r3, [pc, #92]	; (8002284 <IMU_sendTareNow+0x64>)
 8002226:	22f2      	movs	r2, #242	; 0xf2
 8002228:	701a      	strb	r2, [r3, #0]
	shtpData[1] = commandSequenceNumber++;	 //Increments automatically each function call
 800222a:	4b17      	ldr	r3, [pc, #92]	; (8002288 <IMU_sendTareNow+0x68>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	1c5a      	adds	r2, r3, #1
 8002230:	b2d1      	uxtb	r1, r2
 8002232:	4a15      	ldr	r2, [pc, #84]	; (8002288 <IMU_sendTareNow+0x68>)
 8002234:	7011      	strb	r1, [r2, #0]
 8002236:	4a13      	ldr	r2, [pc, #76]	; (8002284 <IMU_sendTareNow+0x64>)
 8002238:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0x03;					   // TareCommand
 800223a:	4b12      	ldr	r3, [pc, #72]	; (8002284 <IMU_sendTareNow+0x64>)
 800223c:	2203      	movs	r2, #3
 800223e:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0; // Tare Now
 8002240:	4b10      	ldr	r3, [pc, #64]	; (8002284 <IMU_sendTareNow+0x64>)
 8002242:	2200      	movs	r2, #0
 8002244:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0x07; // All 3 axes
 8002246:	4b0f      	ldr	r3, [pc, #60]	; (8002284 <IMU_sendTareNow+0x64>)
 8002248:	2207      	movs	r2, #7
 800224a:	711a      	strb	r2, [r3, #4]
	shtpData[5] = 0; // Rotation Vector
 800224c:	4b0d      	ldr	r3, [pc, #52]	; (8002284 <IMU_sendTareNow+0x64>)
 800224e:	2200      	movs	r2, #0
 8002250:	715a      	strb	r2, [r3, #5]


	// RESERVED
	shtpData[6] = 0;
 8002252:	4b0c      	ldr	r3, [pc, #48]	; (8002284 <IMU_sendTareNow+0x64>)
 8002254:	2200      	movs	r2, #0
 8002256:	719a      	strb	r2, [r3, #6]
	shtpData[7] = 0;
 8002258:	4b0a      	ldr	r3, [pc, #40]	; (8002284 <IMU_sendTareNow+0x64>)
 800225a:	2200      	movs	r2, #0
 800225c:	71da      	strb	r2, [r3, #7]
	shtpData[8] = 0;
 800225e:	4b09      	ldr	r3, [pc, #36]	; (8002284 <IMU_sendTareNow+0x64>)
 8002260:	2200      	movs	r2, #0
 8002262:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;
 8002264:	4b07      	ldr	r3, [pc, #28]	; (8002284 <IMU_sendTareNow+0x64>)
 8002266:	2200      	movs	r2, #0
 8002268:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;
 800226a:	4b06      	ldr	r3, [pc, #24]	; (8002284 <IMU_sendTareNow+0x64>)
 800226c:	2200      	movs	r2, #0
 800226e:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;
 8002270:	4b04      	ldr	r3, [pc, #16]	; (8002284 <IMU_sendTareNow+0x64>)
 8002272:	2200      	movs	r2, #0
 8002274:	72da      	strb	r2, [r3, #11]

	//Transmit packet on channel 2, 12 bytes
	IMU_sendPacket(CHANNEL_CONTROL, 12);
 8002276:	2302      	movs	r3, #2
 8002278:	210c      	movs	r1, #12
 800227a:	4618      	mov	r0, r3
 800227c:	f000 f8e4 	bl	8002448 <IMU_sendPacket>
}
 8002280:	bf00      	nop
 8002282:	bd80      	pop	{r7, pc}
 8002284:	20028180 	.word	0x20028180
 8002288:	20000c02 	.word	0x20000c02

0800228c <IMU_sendPersistTare>:

void IMU_sendPersistTare(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
	shtpData[0] = SHTP_REPORT_COMMAND_REQUEST; //Command Request
 8002290:	4b17      	ldr	r3, [pc, #92]	; (80022f0 <IMU_sendPersistTare+0x64>)
 8002292:	22f2      	movs	r2, #242	; 0xf2
 8002294:	701a      	strb	r2, [r3, #0]
	shtpData[1] = commandSequenceNumber++;	 //Increments automatically each function call
 8002296:	4b17      	ldr	r3, [pc, #92]	; (80022f4 <IMU_sendPersistTare+0x68>)
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	1c5a      	adds	r2, r3, #1
 800229c:	b2d1      	uxtb	r1, r2
 800229e:	4a15      	ldr	r2, [pc, #84]	; (80022f4 <IMU_sendPersistTare+0x68>)
 80022a0:	7011      	strb	r1, [r2, #0]
 80022a2:	4a13      	ldr	r2, [pc, #76]	; (80022f0 <IMU_sendPersistTare+0x64>)
 80022a4:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0x03;					   // TareCommand
 80022a6:	4b12      	ldr	r3, [pc, #72]	; (80022f0 <IMU_sendPersistTare+0x64>)
 80022a8:	2203      	movs	r2, #3
 80022aa:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0x01; // Persist Tare
 80022ac:	4b10      	ldr	r3, [pc, #64]	; (80022f0 <IMU_sendPersistTare+0x64>)
 80022ae:	2201      	movs	r2, #1
 80022b0:	70da      	strb	r2, [r3, #3]


	// RESERVED
	shtpData[4] = 0;
 80022b2:	4b0f      	ldr	r3, [pc, #60]	; (80022f0 <IMU_sendPersistTare+0x64>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	711a      	strb	r2, [r3, #4]
	shtpData[5] = 0;
 80022b8:	4b0d      	ldr	r3, [pc, #52]	; (80022f0 <IMU_sendPersistTare+0x64>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	715a      	strb	r2, [r3, #5]
	shtpData[6] = 0;
 80022be:	4b0c      	ldr	r3, [pc, #48]	; (80022f0 <IMU_sendPersistTare+0x64>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	719a      	strb	r2, [r3, #6]
	shtpData[7] = 0;
 80022c4:	4b0a      	ldr	r3, [pc, #40]	; (80022f0 <IMU_sendPersistTare+0x64>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	71da      	strb	r2, [r3, #7]
	shtpData[8] = 0;
 80022ca:	4b09      	ldr	r3, [pc, #36]	; (80022f0 <IMU_sendPersistTare+0x64>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;
 80022d0:	4b07      	ldr	r3, [pc, #28]	; (80022f0 <IMU_sendPersistTare+0x64>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;
 80022d6:	4b06      	ldr	r3, [pc, #24]	; (80022f0 <IMU_sendPersistTare+0x64>)
 80022d8:	2200      	movs	r2, #0
 80022da:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;
 80022dc:	4b04      	ldr	r3, [pc, #16]	; (80022f0 <IMU_sendPersistTare+0x64>)
 80022de:	2200      	movs	r2, #0
 80022e0:	72da      	strb	r2, [r3, #11]

	//Transmit packet on channel 2, 12 bytes
	IMU_sendPacket(CHANNEL_CONTROL, 12);
 80022e2:	2302      	movs	r3, #2
 80022e4:	210c      	movs	r1, #12
 80022e6:	4618      	mov	r0, r3
 80022e8:	f000 f8ae 	bl	8002448 <IMU_sendPacket>
}
 80022ec:	bf00      	nop
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	20028180 	.word	0x20028180
 80022f4:	20000c02 	.word	0x20000c02

080022f8 <IMU_receivePacket>:
//}

//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
bool IMU_receivePacket(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af02      	add	r7, sp, #8
	if( HAL_GPIO_ReadPin(_intPort, _int) == GPIO_PIN_SET)
 80022fe:	4b22      	ldr	r3, [pc, #136]	; (8002388 <IMU_receivePacket+0x90>)
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	4b22      	ldr	r3, [pc, #136]	; (800238c <IMU_receivePacket+0x94>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	b29b      	uxth	r3, r3
 8002308:	4619      	mov	r1, r3
 800230a:	4610      	mov	r0, r2
 800230c:	f006 f82e 	bl	800836c <HAL_GPIO_ReadPin>
 8002310:	4603      	mov	r3, r0
 8002312:	2b01      	cmp	r3, #1
 8002314:	d101      	bne.n	800231a <IMU_receivePacket+0x22>
		return (false);
 8002316:	2300      	movs	r3, #0
 8002318:	e031      	b.n	800237e <IMU_receivePacket+0x86>

	//Ask for four bytes to find out how much data we need to read
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 800231a:	4b1d      	ldr	r3, [pc, #116]	; (8002390 <IMU_receivePacket+0x98>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f04f 31ff 	mov.w	r1, #4294967295
 8002322:	4618      	mov	r0, r3
 8002324:	f00e fd2c 	bl	8010d80 <osSemaphoreAcquire>
//	taskENTER_CRITICAL();
	HAL_I2C_Master_Receive(&hi2c1, _deviceAddress, shtpHeader, (uint8_t) 4, 100);
 8002328:	4b1a      	ldr	r3, [pc, #104]	; (8002394 <IMU_receivePacket+0x9c>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	b299      	uxth	r1, r3
 800232e:	2364      	movs	r3, #100	; 0x64
 8002330:	9300      	str	r3, [sp, #0]
 8002332:	2304      	movs	r3, #4
 8002334:	4a18      	ldr	r2, [pc, #96]	; (8002398 <IMU_receivePacket+0xa0>)
 8002336:	4819      	ldr	r0, [pc, #100]	; (800239c <IMU_receivePacket+0xa4>)
 8002338:	f006 fa08 	bl	800874c <HAL_I2C_Master_Receive>
//		osSemaphoreRelease(messageI2C_LockSem);
//		osDelay(100);
//		osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
//	}
//	taskEXIT_CRITICAL();
	osSemaphoreRelease(messageI2C_LockHandle);
 800233c:	4b14      	ldr	r3, [pc, #80]	; (8002390 <IMU_receivePacket+0x98>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4618      	mov	r0, r3
 8002342:	f00e fd83 	bl	8010e4c <osSemaphoreRelease>

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ( ((uint16_t)shtpHeader[PACKET_MSB] << 8) | shtpHeader[PACKET_LSB]);
 8002346:	4b14      	ldr	r3, [pc, #80]	; (8002398 <IMU_receivePacket+0xa0>)
 8002348:	785b      	ldrb	r3, [r3, #1]
 800234a:	021b      	lsls	r3, r3, #8
 800234c:	b21a      	sxth	r2, r3
 800234e:	4b12      	ldr	r3, [pc, #72]	; (8002398 <IMU_receivePacket+0xa0>)
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	b21b      	sxth	r3, r3
 8002354:	4313      	orrs	r3, r2
 8002356:	80fb      	strh	r3, [r7, #6]
	dataLength &= ~(1 << 15); //Clear the MSbit.
 8002358:	88fb      	ldrh	r3, [r7, #6]
 800235a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800235e:	80fb      	strh	r3, [r7, #6]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 8002360:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d101      	bne.n	800236c <IMU_receivePacket+0x74>
	{
		//Packet is empty
		return (false); //All done
 8002368:	2300      	movs	r3, #0
 800236a:	e008      	b.n	800237e <IMU_receivePacket+0x86>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 800236c:	88fb      	ldrh	r3, [r7, #6]
 800236e:	3b04      	subs	r3, #4
 8002370:	b29b      	uxth	r3, r3
 8002372:	80fb      	strh	r3, [r7, #6]

	IMU_getData(dataLength);
 8002374:	88fb      	ldrh	r3, [r7, #6]
 8002376:	4618      	mov	r0, r3
 8002378:	f000 f812 	bl	80023a0 <IMU_getData>


	return (true); //We're done!
 800237c:	2301      	movs	r3, #1
}
 800237e:	4618      	mov	r0, r3
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	20028208 	.word	0x20028208
 800238c:	20028142 	.word	0x20028142
 8002390:	20027c50 	.word	0x20027c50
 8002394:	20000006 	.word	0x20000006
 8002398:	200280f0 	.word	0x200280f0
 800239c:	20028250 	.word	0x20028250

080023a0 <IMU_getData>:

//Sends multiple requests to sensor until all data bytes are received from sensor
//The shtpData buffer has max capacity of MAX_PACKET_SIZE. Any bytes over this amount will be lost.
//Arduino I2C read limit is 32 bytes. Header is 4 bytes, so max data we can read per interation is 28 bytes
bool IMU_getData(uint16_t bytesRemaining)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af02      	add	r7, sp, #8
 80023a6:	4603      	mov	r3, r0
 80023a8:	80fb      	strh	r3, [r7, #6]
	uint16_t dataSpot = 0; //Start at the beginning of shtpData array
 80023aa:	2300      	movs	r3, #0
 80023ac:	81fb      	strh	r3, [r7, #14]
//	uint8_t receiveBuffer[28] = {0};
//	uint8_t receivePacket[I2C_BUFFER_LENGTH - 4] = {0};


	//Setup a series of chunked 32 byte reads
	while (bytesRemaining > 0)
 80023ae:	e036      	b.n	800241e <IMU_getData+0x7e>
	{
		uint16_t numberOfBytesToRead = bytesRemaining;
 80023b0:	88fb      	ldrh	r3, [r7, #6]
 80023b2:	81bb      	strh	r3, [r7, #12]
		if (numberOfBytesToRead > (I2C_BUFFER_LENGTH - 4))
 80023b4:	89bb      	ldrh	r3, [r7, #12]
 80023b6:	2b1c      	cmp	r3, #28
 80023b8:	d901      	bls.n	80023be <IMU_getData+0x1e>
			numberOfBytesToRead = (I2C_BUFFER_LENGTH - 4);
 80023ba:	231c      	movs	r3, #28
 80023bc:	81bb      	strh	r3, [r7, #12]

		osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 80023be:	4b1c      	ldr	r3, [pc, #112]	; (8002430 <IMU_getData+0x90>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f04f 31ff 	mov.w	r1, #4294967295
 80023c6:	4618      	mov	r0, r3
 80023c8:	f00e fcda 	bl	8010d80 <osSemaphoreAcquire>
//		taskENTER_CRITICAL();
		HAL_I2C_Master_Receive(&hi2c1, _deviceAddress, receiveBuffer, (uint8_t)(numberOfBytesToRead + 4), 100);
 80023cc:	4b19      	ldr	r3, [pc, #100]	; (8002434 <IMU_getData+0x94>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	b299      	uxth	r1, r3
 80023d2:	89bb      	ldrh	r3, [r7, #12]
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	3304      	adds	r3, #4
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	b29a      	uxth	r2, r3
 80023dc:	2364      	movs	r3, #100	; 0x64
 80023de:	9300      	str	r3, [sp, #0]
 80023e0:	4613      	mov	r3, r2
 80023e2:	4a15      	ldr	r2, [pc, #84]	; (8002438 <IMU_getData+0x98>)
 80023e4:	4815      	ldr	r0, [pc, #84]	; (800243c <IMU_getData+0x9c>)
 80023e6:	f006 f9b1 	bl	800874c <HAL_I2C_Master_Receive>
//			osSemaphoreRelease(messageI2C_LockSem);
//			osDelay(100);
//			osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
//		}
//		taskEXIT_CRITICAL();
		osSemaphoreRelease(messageI2C_LockHandle);
 80023ea:	4b11      	ldr	r3, [pc, #68]	; (8002430 <IMU_getData+0x90>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f00e fd2c 	bl	8010e4c <osSemaphoreRelease>
//		_i2cPort->requestFrom((uint8_t)_deviceAddress, (uint8_t)(numberOfBytesToRead + 4));
//		if (waitForI2C() == false)
//			return (0); //Error

		// first four bytes are header bytes and can be thrown away
		if ( (dataSpot + numberOfBytesToRead) < MAX_PACKET_SIZE){
 80023f4:	89fa      	ldrh	r2, [r7, #14]
 80023f6:	89bb      	ldrh	r3, [r7, #12]
 80023f8:	4413      	add	r3, r2
 80023fa:	2b7f      	cmp	r3, #127	; 0x7f
 80023fc:	dc07      	bgt.n	800240e <IMU_getData+0x6e>
			memcpy(&(shtpData[dataSpot]), &(receiveBuffer[4]), numberOfBytesToRead);
 80023fe:	89fb      	ldrh	r3, [r7, #14]
 8002400:	4a0f      	ldr	r2, [pc, #60]	; (8002440 <IMU_getData+0xa0>)
 8002402:	4413      	add	r3, r2
 8002404:	89ba      	ldrh	r2, [r7, #12]
 8002406:	490f      	ldr	r1, [pc, #60]	; (8002444 <IMU_getData+0xa4>)
 8002408:	4618      	mov	r0, r3
 800240a:	f018 fa8b 	bl	801a924 <memcpy>
			// Do nothing with the data
		}

		// increment data index
		// TODO: this can be changed to receive a larger buffer since this constraint is for the Arduino
		dataSpot += numberOfBytesToRead;
 800240e:	89fa      	ldrh	r2, [r7, #14]
 8002410:	89bb      	ldrh	r3, [r7, #12]
 8002412:	4413      	add	r3, r2
 8002414:	81fb      	strh	r3, [r7, #14]

		bytesRemaining -= numberOfBytesToRead;
 8002416:	88fa      	ldrh	r2, [r7, #6]
 8002418:	89bb      	ldrh	r3, [r7, #12]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	80fb      	strh	r3, [r7, #6]
	while (bytesRemaining > 0)
 800241e:	88fb      	ldrh	r3, [r7, #6]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1c5      	bne.n	80023b0 <IMU_getData+0x10>
	}
	return (true); //Done!
 8002424:	2301      	movs	r3, #1
}
 8002426:	4618      	mov	r0, r3
 8002428:	3710      	adds	r7, #16
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	20027c50 	.word	0x20027c50
 8002434:	20000006 	.word	0x20000006
 8002438:	20000c04 	.word	0x20000c04
 800243c:	20028250 	.word	0x20028250
 8002440:	20028180 	.word	0x20028180
 8002444:	20000c08 	.word	0x20000c08

08002448 <IMU_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
bool IMU_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af02      	add	r7, sp, #8
 800244e:	4603      	mov	r3, r0
 8002450:	460a      	mov	r2, r1
 8002452:	71fb      	strb	r3, [r7, #7]
 8002454:	4613      	mov	r3, r2
 8002456:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 8002458:	79bb      	ldrb	r3, [r7, #6]
 800245a:	3304      	adds	r3, #4
 800245c:	73fb      	strb	r3, [r7, #15]

	/*  *********** POPULATE HEADER ****************************** */
	outPacket[0] = packetLength & 0xFF; 				//Packet length LSB
 800245e:	4a1b      	ldr	r2, [pc, #108]	; (80024cc <IMU_sendPacket+0x84>)
 8002460:	7bfb      	ldrb	r3, [r7, #15]
 8002462:	7013      	strb	r3, [r2, #0]
	outPacket[1] = packetLength >> 8; 					//Packet length MSB
 8002464:	7bfb      	ldrb	r3, [r7, #15]
 8002466:	121b      	asrs	r3, r3, #8
 8002468:	b2da      	uxtb	r2, r3
 800246a:	4b18      	ldr	r3, [pc, #96]	; (80024cc <IMU_sendPacket+0x84>)
 800246c:	705a      	strb	r2, [r3, #1]
	outPacket[2] = channelNumber; 						//Channel number
 800246e:	4a17      	ldr	r2, [pc, #92]	; (80024cc <IMU_sendPacket+0x84>)
 8002470:	79fb      	ldrb	r3, [r7, #7]
 8002472:	7093      	strb	r3, [r2, #2]
	outPacket[3] = sequenceNumber[channelNumber]++;	//Send the sequence number, increments with each packet sent, different counter for each channel
 8002474:	79fb      	ldrb	r3, [r7, #7]
 8002476:	4a16      	ldr	r2, [pc, #88]	; (80024d0 <IMU_sendPacket+0x88>)
 8002478:	5cd2      	ldrb	r2, [r2, r3]
 800247a:	1c51      	adds	r1, r2, #1
 800247c:	b2c8      	uxtb	r0, r1
 800247e:	4914      	ldr	r1, [pc, #80]	; (80024d0 <IMU_sendPacket+0x88>)
 8002480:	54c8      	strb	r0, [r1, r3]
 8002482:	4b12      	ldr	r3, [pc, #72]	; (80024cc <IMU_sendPacket+0x84>)
 8002484:	70da      	strb	r2, [r3, #3]

	/*  *********** FILL PAYLOAD ********************************* */
	memcpy(&(outPacket[4]), shtpData, dataLength);
 8002486:	79bb      	ldrb	r3, [r7, #6]
 8002488:	461a      	mov	r2, r3
 800248a:	4912      	ldr	r1, [pc, #72]	; (80024d4 <IMU_sendPacket+0x8c>)
 800248c:	4812      	ldr	r0, [pc, #72]	; (80024d8 <IMU_sendPacket+0x90>)
 800248e:	f018 fa49 	bl	801a924 <memcpy>

	/*  *********** SEND TO IMU ********************************** */
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8002492:	4b12      	ldr	r3, [pc, #72]	; (80024dc <IMU_sendPacket+0x94>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f04f 31ff 	mov.w	r1, #4294967295
 800249a:	4618      	mov	r0, r3
 800249c:	f00e fc70 	bl	8010d80 <osSemaphoreAcquire>
//	taskENTER_CRITICAL();
	HAL_I2C_Master_Transmit(&hi2c1, _deviceAddress, outPacket, packetLength, 100);
 80024a0:	4b0f      	ldr	r3, [pc, #60]	; (80024e0 <IMU_sendPacket+0x98>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	b299      	uxth	r1, r3
 80024a6:	7bfb      	ldrb	r3, [r7, #15]
 80024a8:	b29a      	uxth	r2, r3
 80024aa:	2364      	movs	r3, #100	; 0x64
 80024ac:	9300      	str	r3, [sp, #0]
 80024ae:	4613      	mov	r3, r2
 80024b0:	4a06      	ldr	r2, [pc, #24]	; (80024cc <IMU_sendPacket+0x84>)
 80024b2:	480c      	ldr	r0, [pc, #48]	; (80024e4 <IMU_sendPacket+0x9c>)
 80024b4:	f006 f856 	bl	8008564 <HAL_I2C_Master_Transmit>
//		osSemaphoreRelease(messageI2C_LockSem);
//		osDelay(100);
//		osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
//	}
//	taskEXIT_CRITICAL();
	osSemaphoreRelease(messageI2C_LockHandle);
 80024b8:	4b08      	ldr	r3, [pc, #32]	; (80024dc <IMU_sendPacket+0x94>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4618      	mov	r0, r3
 80024be:	f00e fcc5 	bl	8010e4c <osSemaphoreRelease>

	return (true);
 80024c2:	2301      	movs	r3, #1
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3710      	adds	r7, #16
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	2002820c 	.word	0x2002820c
 80024d0:	20000bfc 	.word	0x20000bfc
 80024d4:	20028180 	.word	0x20028180
 80024d8:	20028210 	.word	0x20028210
 80024dc:	20027c50 	.word	0x20027c50
 80024e0:	20000006 	.word	0x20000006
 80024e4:	20028250 	.word	0x20028250

080024e8 <vPortSuppressTicksAndSleep>:
 *
 * @param: xExpectedIdleTime is given in number of FreeRTOS Ticks
 * @retval: None
 */
void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]

    /* Exit with interrUpts enabled. */
    __enable_irq();
  }
#endif
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <_GeometryBuilder>:

BaseStationGeometryDef bs_1 = {{1.738303, 2.430314,  0.781285},
							  {0.285992, -0.253563, 0.924075, 0.040683, 0.966697, 0.252668, -0.957368, -0.034667, 0.286784}};
SensorLocalGeometry s_loc_geo = {0, {0.0, 0.0, 0.0}};

void _GeometryBuilder(GeometryBuilder *self){
 80024fc:	b4b0      	push	{r4, r5, r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]

	self->base_stations_[0] = bs_0;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4a12      	ldr	r2, [pc, #72]	; (8002550 <_GeometryBuilder+0x54>)
 8002508:	461c      	mov	r4, r3
 800250a:	4615      	mov	r5, r2
 800250c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800250e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002510:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002512:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002514:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002518:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	self->base_stations_[1] = bs_1;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	4a0d      	ldr	r2, [pc, #52]	; (8002554 <_GeometryBuilder+0x58>)
 8002520:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8002524:	4615      	mov	r5, r2
 8002526:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002528:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800252a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800252c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800252e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002532:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	self->sensors[0] = s_loc_geo;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a07      	ldr	r2, [pc, #28]	; (8002558 <_GeometryBuilder+0x5c>)
 800253a:	f103 0460 	add.w	r4, r3, #96	; 0x60
 800253e:	4613      	mov	r3, r2
 8002540:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002542:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002546:	bf00      	nop
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	bcb0      	pop	{r4, r5, r7}
 800254e:	4770      	bx	lr
 8002550:	20000008 	.word	0x20000008
 8002554:	20000038 	.word	0x20000038
 8002558:	20000c24 	.word	0x20000c24

0800255c <consume_angles>:

void consume_angles(GeometryBuilder * self, const SensorAnglesFrame * f) {
 800255c:	b5b0      	push	{r4, r5, r7, lr}
 800255e:	b096      	sub	sp, #88	; 0x58
 8002560:	af02      	add	r7, sp, #8
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
    // First 2 angles - x, y of station B; second 2 angles - x, y of station C.
    // Coordinate system: Y - Up;  X ->  Z v  (to the viewer)
    // Station 'looks' to inverse Z axis (vector 0;0;-1).
    if (f->fix_level >= kCycleSynced) {
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	2bc7      	cmp	r3, #199	; 0xc7
 800256c:	f340 8093 	ble.w	8002696 <consume_angles+0x13a>
        SensorLocalGeometry *sens_def = &self->sensors[0];
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3360      	adds	r3, #96	; 0x60
 8002574:	643b      	str	r3, [r7, #64]	; 0x40
        SensorAngles *sens = &f->sensors[sens_def->input_idx];
 8002576:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	015b      	lsls	r3, r3, #5
 800257c:	3310      	adds	r3, #16
 800257e:	683a      	ldr	r2, [r7, #0]
 8002580:	4413      	add	r3, r2
 8002582:	63fb      	str	r3, [r7, #60]	; 0x3c

        // Check angles are fresh enough.
        uint32_t max_stale = 0;
 8002584:	2300      	movs	r3, #0
 8002586:	64fb      	str	r3, [r7, #76]	; 0x4c
        for (int i = 0; i < NUM_CYCLE_PHASES; i++){
 8002588:	2300      	movs	r3, #0
 800258a:	64bb      	str	r3, [r7, #72]	; 0x48
 800258c:	e011      	b.n	80025b2 <consume_angles+0x56>
        	//Get time since we last updated the angles for phase i
        	int stale = f->cycle_idx - sens->updated_cycles[i];
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	689a      	ldr	r2, [r3, #8]
 8002592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002594:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002596:	3104      	adds	r1, #4
 8002598:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	63bb      	str	r3, [r7, #56]	; 0x38
        	max_stale = (stale > max_stale) ? stale : max_stale;
 80025a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80025a4:	4293      	cmp	r3, r2
 80025a6:	bf38      	it	cc
 80025a8:	4613      	movcc	r3, r2
 80025aa:	64fb      	str	r3, [r7, #76]	; 0x4c
        for (int i = 0; i < NUM_CYCLE_PHASES; i++){
 80025ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025ae:	3301      	adds	r3, #1
 80025b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80025b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025b4:	2b03      	cmp	r3, #3
 80025b6:	ddea      	ble.n	800258e <consume_angles+0x32>
        }

        if (max_stale < NUM_CYCLE_PHASES * 3) {  // We tolerate stale angles up to 2 cycles old.
 80025b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025ba:	2b0b      	cmp	r3, #11
 80025bc:	d86b      	bhi.n	8002696 <consume_angles+0x13a>
            float ray1[VEC3D_SIZE], ray2[VEC3D_SIZE], origin1[VEC3D_SIZE], origin2[VEC3D_SIZE];
            calc_ray_vec(&self->base_stations_[0], sens->angles[0], sens->angles[1], ray1, origin1);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025c2:	edd3 7a00 	vldr	s15, [r3]
 80025c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025c8:	ed93 7a01 	vldr	s14, [r3, #4]
 80025cc:	f107 0214 	add.w	r2, r7, #20
 80025d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025d4:	4619      	mov	r1, r3
 80025d6:	eef0 0a47 	vmov.f32	s1, s14
 80025da:	eeb0 0a67 	vmov.f32	s0, s15
 80025de:	f000 f8e5 	bl	80027ac <calc_ray_vec>
            calc_ray_vec(&self->base_stations_[1], sens->angles[2], sens->angles[3], ray2, origin2);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80025e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025ea:	edd3 7a02 	vldr	s15, [r3, #8]
 80025ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025f0:	ed93 7a03 	vldr	s14, [r3, #12]
 80025f4:	f107 0208 	add.w	r2, r7, #8
 80025f8:	f107 0320 	add.w	r3, r7, #32
 80025fc:	4619      	mov	r1, r3
 80025fe:	eef0 0a47 	vmov.f32	s1, s14
 8002602:	eeb0 0a67 	vmov.f32	s0, s15
 8002606:	f000 f8d1 	bl	80027ac <calc_ray_vec>

            intersect_lines(origin1, ray1, origin2, ray2, self->vive_vars_.pos, &self->vive_vars_.pos_delta);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	3370      	adds	r3, #112	; 0x70
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	327c      	adds	r2, #124	; 0x7c
 8002612:	f107 0520 	add.w	r5, r7, #32
 8002616:	f107 0408 	add.w	r4, r7, #8
 800261a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800261e:	f107 0014 	add.w	r0, r7, #20
 8002622:	9201      	str	r2, [sp, #4]
 8002624:	9300      	str	r3, [sp, #0]
 8002626:	462b      	mov	r3, r5
 8002628:	4622      	mov	r2, r4
 800262a:	f000 f945 	bl	80028b8 <intersect_lines>

            // Translate object position depending on the position of sensor relative to object.
            for (int i = 0; i < VEC3D_SIZE; i++){
 800262e:	2300      	movs	r3, #0
 8002630:	647b      	str	r3, [r7, #68]	; 0x44
 8002632:	e019      	b.n	8002668 <consume_angles+0x10c>
            	self->vive_vars_.pos[i] -= sens_def->pos[i];
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002638:	331c      	adds	r3, #28
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	4413      	add	r3, r2
 800263e:	ed93 7a00 	vldr	s14, [r3]
 8002642:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002644:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	4413      	add	r3, r2
 800264a:	3304      	adds	r3, #4
 800264c:	edd3 7a00 	vldr	s15, [r3]
 8002650:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002658:	331c      	adds	r3, #28
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	4413      	add	r3, r2
 800265e:	edc3 7a00 	vstr	s15, [r3]
            for (int i = 0; i < VEC3D_SIZE; i++){
 8002662:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002664:	3301      	adds	r3, #1
 8002666:	647b      	str	r3, [r7, #68]	; 0x44
 8002668:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800266a:	2b02      	cmp	r3, #2
 800266c:	dde2      	ble.n	8002634 <consume_angles+0xd8>
            }

            self->vive_vars_.time_ms = HAL_GetTick();
 800266e:	f003 fbaf 	bl	8005dd0 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

            //Put VIVE measurements in the message queue
            osMessageQueuePut(viveQueueHandle, (void *) &self->vive_vars_, 0U, 0);
 800267a:	4b09      	ldr	r3, [pc, #36]	; (80026a0 <consume_angles+0x144>)
 800267c:	6818      	ldr	r0, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f103 0170 	add.w	r1, r3, #112	; 0x70
 8002684:	2300      	movs	r3, #0
 8002686:	2200      	movs	r2, #0
 8002688:	f00e fcbe 	bl	8011008 <osMessageQueuePut>
            // tell timer function that localization is complete
			osSemaphoreRelease(locCompleteHandle);
 800268c:	4b05      	ldr	r3, [pc, #20]	; (80026a4 <consume_angles+0x148>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4618      	mov	r0, r3
 8002692:	f00e fbdb 	bl	8010e4c <osSemaphoreRelease>
        else {
            // Angles too stale - cannot calculate position anymore.

        }
    }
}
 8002696:	bf00      	nop
 8002698:	3750      	adds	r7, #80	; 0x50
 800269a:	46bd      	mov	sp, r7
 800269c:	bdb0      	pop	{r4, r5, r7, pc}
 800269e:	bf00      	nop
 80026a0:	20027b4c 	.word	0x20027b4c
 80026a4:	20028090 	.word	0x20028090

080026a8 <vec_cross_product>:
    // TODO: Make compatible with multiple geometry objects.
    //set_led_state(self->pos_.fix_level >= kStaleFix ? kFixFound : kNoFix);
}
*/

void vec_cross_product(float *a, float *b, float *res) {
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
    res[0] = a[1] * b[2] - a[2] * b[1];
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	3304      	adds	r3, #4
 80026b8:	ed93 7a00 	vldr	s14, [r3]
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	3308      	adds	r3, #8
 80026c0:	edd3 7a00 	vldr	s15, [r3]
 80026c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	3308      	adds	r3, #8
 80026cc:	edd3 6a00 	vldr	s13, [r3]
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	3304      	adds	r3, #4
 80026d4:	edd3 7a00 	vldr	s15, [r3]
 80026d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	edc3 7a00 	vstr	s15, [r3]
    res[1] = a[2] * b[0] - a[0] * b[2];
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	3308      	adds	r3, #8
 80026ea:	ed93 7a00 	vldr	s14, [r3]
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	edd3 7a00 	vldr	s15, [r3]
 80026f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	edd3 6a00 	vldr	s13, [r3]
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	3308      	adds	r3, #8
 8002702:	edd3 7a00 	vldr	s15, [r3]
 8002706:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	3304      	adds	r3, #4
 800270e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002712:	edc3 7a00 	vstr	s15, [r3]
    res[2] = a[0] * b[1] - a[1] * b[0];
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	ed93 7a00 	vldr	s14, [r3]
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	3304      	adds	r3, #4
 8002720:	edd3 7a00 	vldr	s15, [r3]
 8002724:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	3304      	adds	r3, #4
 800272c:	edd3 6a00 	vldr	s13, [r3]
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	edd3 7a00 	vldr	s15, [r3]
 8002736:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	3308      	adds	r3, #8
 800273e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002742:	edc3 7a00 	vstr	s15, [r3]
}
 8002746:	bf00      	nop
 8002748:	3714      	adds	r7, #20
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr

08002752 <vec_length>:

float vec_length(float *vec) {
 8002752:	b580      	push	{r7, lr}
 8002754:	b086      	sub	sp, #24
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
    float pow, res;

    arm_power_f32(vec, VEC3D_SIZE, &pow); // returns sum of squares
 800275a:	f107 030c 	add.w	r3, r7, #12
 800275e:	461a      	mov	r2, r3
 8002760:	2103      	movs	r1, #3
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f017 fdee 	bl	801a344 <arm_power_f32>
    arm_sqrt_f32(pow, &res);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	617b      	str	r3, [r7, #20]
 800276c:	f107 0308 	add.w	r3, r7, #8
 8002770:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8002772:	edd7 7a05 	vldr	s15, [r7, #20]
 8002776:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800277a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800277e:	db09      	blt.n	8002794 <vec_length+0x42>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 8002780:	ed97 0a05 	vldr	s0, [r7, #20]
 8002784:	f018 fa52 	bl	801ac2c <sqrtf>
 8002788:	eef0 7a40 	vmov.f32	s15, s0
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	edc3 7a00 	vstr	s15, [r3]
 8002792:	e003      	b.n	800279c <vec_length+0x4a>

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	f04f 0200 	mov.w	r2, #0
 800279a:	601a      	str	r2, [r3, #0]

    return res;
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	ee07 3a90 	vmov	s15, r3
}
 80027a2:	eeb0 0a67 	vmov.f32	s0, s15
 80027a6:	3718      	adds	r7, #24
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <calc_ray_vec>:

void calc_ray_vec(const BaseStationGeometryDef * bs, float angle1, float angle2, float *res, float *origin) {
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b09a      	sub	sp, #104	; 0x68
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6178      	str	r0, [r7, #20]
 80027b4:	ed87 0a04 	vstr	s0, [r7, #16]
 80027b8:	edc7 0a03 	vstr	s1, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
    float a[VEC3D_SIZE] = {arm_cos_f32(angle1), 0, -arm_sin_f32(angle1)};  // Normal vector to X plane
 80027c0:	ed97 0a04 	vldr	s0, [r7, #16]
 80027c4:	f017 feea 	bl	801a59c <arm_cos_f32>
 80027c8:	eef0 7a40 	vmov.f32	s15, s0
 80027cc:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 80027d0:	f04f 0300 	mov.w	r3, #0
 80027d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027d6:	ed97 0a04 	vldr	s0, [r7, #16]
 80027da:	f017 fe99 	bl	801a510 <arm_sin_f32>
 80027de:	eef0 7a40 	vmov.f32	s15, s0
 80027e2:	eef1 7a67 	vneg.f32	s15, s15
 80027e6:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    float b[VEC3D_SIZE] = {0, arm_cos_f32(angle2), arm_sin_f32(angle2)};   // Normal vector to Y plane
 80027ea:	f04f 0300 	mov.w	r3, #0
 80027ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027f0:	ed97 0a03 	vldr	s0, [r7, #12]
 80027f4:	f017 fed2 	bl	801a59c <arm_cos_f32>
 80027f8:	eef0 7a40 	vmov.f32	s15, s0
 80027fc:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
 8002800:	ed97 0a03 	vldr	s0, [r7, #12]
 8002804:	f017 fe84 	bl	801a510 <arm_sin_f32>
 8002808:	eef0 7a40 	vmov.f32	s15, s0
 800280c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    float ray[VEC3D_SIZE] = {};
 8002810:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	605a      	str	r2, [r3, #4]
 800281a:	609a      	str	r2, [r3, #8]
    vec_cross_product(b, a, ray); // Intersection of two planes -> ray vector.
 800281c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002820:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002824:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff ff3d 	bl	80026a8 <vec_cross_product>
    float len = vec_length(ray);
 800282e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002832:	4618      	mov	r0, r3
 8002834:	f7ff ff8d 	bl	8002752 <vec_length>
 8002838:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
    arm_scale_f32(ray, 1/len, ray, VEC3D_SIZE); // Normalize ray length.
 800283c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002840:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002844:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002848:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800284c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002850:	2203      	movs	r2, #3
 8002852:	eeb0 0a66 	vmov.f32	s0, s13
 8002856:	4618      	mov	r0, r3
 8002858:	f017 ff44 	bl	801a6e4 <arm_scale_f32>

    arm_matrix_instance_f32 source_rotation_matrix = {3, 3, (const float*) bs->mat};
 800285c:	2303      	movs	r3, #3
 800285e:	873b      	strh	r3, [r7, #56]	; 0x38
 8002860:	2303      	movs	r3, #3
 8002862:	877b      	strh	r3, [r7, #58]	; 0x3a
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	330c      	adds	r3, #12
 8002868:	63fb      	str	r3, [r7, #60]	; 0x3c
    arm_matrix_instance_f32 ray_vec = {3, 1, ray};
 800286a:	2303      	movs	r3, #3
 800286c:	863b      	strh	r3, [r7, #48]	; 0x30
 800286e:	2301      	movs	r3, #1
 8002870:	867b      	strh	r3, [r7, #50]	; 0x32
 8002872:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002876:	637b      	str	r3, [r7, #52]	; 0x34
    arm_matrix_instance_f32 ray_rotated_vec = {3, 1, res};
 8002878:	2303      	movs	r3, #3
 800287a:	853b      	strh	r3, [r7, #40]	; 0x28
 800287c:	2301      	movs	r3, #1
 800287e:	857b      	strh	r3, [r7, #42]	; 0x2a
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	62fb      	str	r3, [r7, #44]	; 0x2c
    arm_mat_mult_f32(&source_rotation_matrix, &ray_vec, &ray_rotated_vec);
 8002884:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002888:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800288c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002890:	4618      	mov	r0, r3
 8002892:	f017 fd9d 	bl	801a3d0 <arm_mat_mult_f32>

    // TODO: Make geometry adjustments within base station.
    float rotated_origin_delta[VEC3D_SIZE] = {};
 8002896:	f107 031c 	add.w	r3, r7, #28
 800289a:	2200      	movs	r2, #0
 800289c:	601a      	str	r2, [r3, #0]
 800289e:	605a      	str	r2, [r3, #4]
 80028a0:	609a      	str	r2, [r3, #8]
    //vec3d base_origin_delta = {-0.025f, -0.025f, 0.f};  // Rotors are slightly off center in base station.
    // arm_matrix_instance_f32 origin_vec = {3, 1, base_origin_delta};
    // arm_matrix_instance_f32 origin_rotated_vec = {3, 1, rotated_origin_delta};
    // arm_mat_mult_f32(&source_rotation_matrix, &origin_vec, &origin_rotated_vec);
    arm_add_f32((const float *) bs->origin, rotated_origin_delta, origin, VEC3D_SIZE);
 80028a2:	6978      	ldr	r0, [r7, #20]
 80028a4:	f107 011c 	add.w	r1, r7, #28
 80028a8:	2303      	movs	r3, #3
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	f017 ffb6 	bl	801a81c <arm_add_f32>
}
 80028b0:	bf00      	nop
 80028b2:	3768      	adds	r7, #104	; 0x68
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <intersect_lines>:


uint8_t intersect_lines(float *orig1, float *vec1, float *orig2, float *vec2, float *res, float *dist) {
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b098      	sub	sp, #96	; 0x60
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
 80028c4:	603b      	str	r3, [r7, #0]
    // Algorithm: http://geomalgorithms.com/a07-_distance.html#Distance-between-Lines

    float w0[VEC3D_SIZE] = {};
 80028c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80028ca:	2200      	movs	r2, #0
 80028cc:	601a      	str	r2, [r3, #0]
 80028ce:	605a      	str	r2, [r3, #4]
 80028d0:	609a      	str	r2, [r3, #8]
    arm_sub_f32((const float *)orig1, (const float *)orig2, w0, VEC3D_SIZE);
 80028d2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80028d6:	2303      	movs	r3, #3
 80028d8:	6879      	ldr	r1, [r7, #4]
 80028da:	68f8      	ldr	r0, [r7, #12]
 80028dc:	f017 fea8 	bl	801a630 <arm_sub_f32>

    float a, b, c, d, e;
    arm_dot_prod_f32((const float *)vec1, (const float *)vec1, VEC3D_SIZE, &a);
 80028e0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80028e4:	2203      	movs	r2, #3
 80028e6:	68b9      	ldr	r1, [r7, #8]
 80028e8:	68b8      	ldr	r0, [r7, #8]
 80028ea:	f017 ff3f 	bl	801a76c <arm_dot_prod_f32>
    arm_dot_prod_f32((const float *)vec1, (const float *)vec2, VEC3D_SIZE, &b);
 80028ee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80028f2:	2203      	movs	r2, #3
 80028f4:	6839      	ldr	r1, [r7, #0]
 80028f6:	68b8      	ldr	r0, [r7, #8]
 80028f8:	f017 ff38 	bl	801a76c <arm_dot_prod_f32>
    arm_dot_prod_f32((const float *)vec2, (const float *)vec2, VEC3D_SIZE, &c);
 80028fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002900:	2203      	movs	r2, #3
 8002902:	6839      	ldr	r1, [r7, #0]
 8002904:	6838      	ldr	r0, [r7, #0]
 8002906:	f017 ff31 	bl	801a76c <arm_dot_prod_f32>
    arm_dot_prod_f32((const float *)vec1, w0, VEC3D_SIZE, &d);
 800290a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800290e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002912:	2203      	movs	r2, #3
 8002914:	68b8      	ldr	r0, [r7, #8]
 8002916:	f017 ff29 	bl	801a76c <arm_dot_prod_f32>
    arm_dot_prod_f32((const float *)vec2, w0, VEC3D_SIZE, &e);
 800291a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800291e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002922:	2203      	movs	r2, #3
 8002924:	6838      	ldr	r0, [r7, #0]
 8002926:	f017 ff21 	bl	801a76c <arm_dot_prod_f32>

    float denom = a * c - b * b;
 800292a:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800292e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002932:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002936:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 800293a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800293e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002942:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002946:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    if (fabs(denom) < 1e-5f)
 800294a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800294e:	eef0 7ae7 	vabs.f32	s15, s15
 8002952:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8002a70 <intersect_lines+0x1b8>
 8002956:	eef4 7ac7 	vcmpe.f32	s15, s14
 800295a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800295e:	d501      	bpl.n	8002964 <intersect_lines+0xac>
        return 0;
 8002960:	2300      	movs	r3, #0
 8002962:	e081      	b.n	8002a68 <intersect_lines+0x1b0>

    // Closest point to 2nd line on 1st line
    float t1 = (b * e - c * d) / denom;
 8002964:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002968:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800296c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002970:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8002974:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002978:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800297c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002980:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002984:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002988:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    float pt1[VEC3D_SIZE] = {};
 800298c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	605a      	str	r2, [r3, #4]
 8002996:	609a      	str	r2, [r3, #8]
    arm_scale_f32((const float *)vec1, t1, pt1, VEC3D_SIZE);
 8002998:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800299c:	2203      	movs	r2, #3
 800299e:	4619      	mov	r1, r3
 80029a0:	ed97 0a16 	vldr	s0, [r7, #88]	; 0x58
 80029a4:	68b8      	ldr	r0, [r7, #8]
 80029a6:	f017 fe9d 	bl	801a6e4 <arm_scale_f32>
    arm_add_f32(pt1, (const float *)orig1, pt1, VEC3D_SIZE);
 80029aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80029ae:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80029b2:	2303      	movs	r3, #3
 80029b4:	68f9      	ldr	r1, [r7, #12]
 80029b6:	f017 ff31 	bl	801a81c <arm_add_f32>

    // Closest point to 1st line on 2nd line
    float t2 = (a * e - b * d) / denom;
 80029ba:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80029be:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80029c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029c6:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 80029ca:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80029ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029d2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80029d6:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80029da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029de:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    float pt2[VEC3D_SIZE] = {};
 80029e2:	f107 031c 	add.w	r3, r7, #28
 80029e6:	2200      	movs	r2, #0
 80029e8:	601a      	str	r2, [r3, #0]
 80029ea:	605a      	str	r2, [r3, #4]
 80029ec:	609a      	str	r2, [r3, #8]
    arm_scale_f32((const float *)vec2, t2, pt2, VEC3D_SIZE);
 80029ee:	f107 031c 	add.w	r3, r7, #28
 80029f2:	2203      	movs	r2, #3
 80029f4:	4619      	mov	r1, r3
 80029f6:	ed97 0a15 	vldr	s0, [r7, #84]	; 0x54
 80029fa:	6838      	ldr	r0, [r7, #0]
 80029fc:	f017 fe72 	bl	801a6e4 <arm_scale_f32>
    arm_add_f32(pt2, (const float *)orig2, pt2, VEC3D_SIZE);
 8002a00:	f107 021c 	add.w	r2, r7, #28
 8002a04:	f107 001c 	add.w	r0, r7, #28
 8002a08:	2303      	movs	r3, #3
 8002a0a:	6879      	ldr	r1, [r7, #4]
 8002a0c:	f017 ff06 	bl	801a81c <arm_add_f32>

    // Result is in the middle
    float tmp[VEC3D_SIZE] = {};
 8002a10:	f107 0310 	add.w	r3, r7, #16
 8002a14:	2200      	movs	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	605a      	str	r2, [r3, #4]
 8002a1a:	609a      	str	r2, [r3, #8]
    arm_add_f32(pt1, pt2, tmp, VEC3D_SIZE);
 8002a1c:	f107 0210 	add.w	r2, r7, #16
 8002a20:	f107 011c 	add.w	r1, r7, #28
 8002a24:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002a28:	2303      	movs	r3, #3
 8002a2a:	f017 fef7 	bl	801a81c <arm_add_f32>
    arm_scale_f32(tmp, 0.5f, res, VEC3D_SIZE);
 8002a2e:	f107 0310 	add.w	r3, r7, #16
 8002a32:	2203      	movs	r2, #3
 8002a34:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002a36:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f017 fe52 	bl	801a6e4 <arm_scale_f32>

    // Dist is distance between pt1 and pt2
    arm_sub_f32(pt1, pt2, tmp, VEC3D_SIZE);
 8002a40:	f107 0210 	add.w	r2, r7, #16
 8002a44:	f107 011c 	add.w	r1, r7, #28
 8002a48:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	f017 fdef 	bl	801a630 <arm_sub_f32>
    *dist = vec_length(tmp);
 8002a52:	f107 0310 	add.w	r3, r7, #16
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff fe7b 	bl	8002752 <vec_length>
 8002a5c:	eef0 7a40 	vmov.f32	s15, s0
 8002a60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a62:	edc3 7a00 	vstr	s15, [r3]

    return 1;
 8002a66:	2301      	movs	r3, #1
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3760      	adds	r7, #96	; 0x60
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	3727c5ac 	.word	0x3727c5ac

08002a74 <LL_AHB2_GRP1_EnableClock>:
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002a7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a80:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002a8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4013      	ands	r3, r2
 8002a96:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a98:	68fb      	ldr	r3, [r7, #12]
}
 8002a9a:	bf00      	nop
 8002a9c:	3714      	adds	r7, #20
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
	...

08002aa8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b086      	sub	sp, #24
 8002aac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aae:	1d3b      	adds	r3, r7, #4
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	601a      	str	r2, [r3, #0]
 8002ab4:	605a      	str	r2, [r3, #4]
 8002ab6:	609a      	str	r2, [r3, #8]
 8002ab8:	60da      	str	r2, [r3, #12]
 8002aba:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002abc:	2004      	movs	r0, #4
 8002abe:	f7ff ffd9 	bl	8002a74 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ac2:	2080      	movs	r0, #128	; 0x80
 8002ac4:	f7ff ffd6 	bl	8002a74 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ac8:	2002      	movs	r0, #2
 8002aca:	f7ff ffd3 	bl	8002a74 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ace:	2001      	movs	r0, #1
 8002ad0:	f7ff ffd0 	bl	8002a74 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ad4:	2010      	movs	r0, #16
 8002ad6:	f7ff ffcd 	bl	8002a74 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DONGLE_DEBUG_PIN_GPIO_Port, DONGLE_DEBUG_PIN_Pin, GPIO_PIN_RESET);
 8002ada:	2200      	movs	r2, #0
 8002adc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ae0:	4835      	ldr	r0, [pc, #212]	; (8002bb8 <MX_GPIO_Init+0x110>)
 8002ae2:	f005 fc5b 	bl	800839c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002ae6:	2308      	movs	r3, #8
 8002ae8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002aea:	2303      	movs	r3, #3
 8002aec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aee:	2300      	movs	r3, #0
 8002af0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002af2:	1d3b      	adds	r3, r7, #4
 8002af4:	4619      	mov	r1, r3
 8002af6:	4831      	ldr	r0, [pc, #196]	; (8002bbc <MX_GPIO_Init+0x114>)
 8002af8:	f005 fac8 	bl	800808c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DONGLE_DEBUG_PIN_Pin;
 8002afc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b00:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b02:	2301      	movs	r3, #1
 8002b04:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b06:	2300      	movs	r3, #0
 8002b08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DONGLE_DEBUG_PIN_GPIO_Port, &GPIO_InitStruct);
 8002b0e:	1d3b      	adds	r3, r7, #4
 8002b10:	4619      	mov	r1, r3
 8002b12:	4829      	ldr	r0, [pc, #164]	; (8002bb8 <MX_GPIO_Init+0x110>)
 8002b14:	f005 faba 	bl	800808c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB9 PB0 PB1 PB4
                           PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
 8002b18:	f240 23f3 	movw	r3, #755	; 0x2f3
 8002b1c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b22:	2300      	movs	r3, #0
 8002b24:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b26:	1d3b      	adds	r3, r7, #4
 8002b28:	4619      	mov	r1, r3
 8002b2a:	4823      	ldr	r0, [pc, #140]	; (8002bb8 <MX_GPIO_Init+0x110>)
 8002b2c:	f005 faae 	bl	800808c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 PA6
                           PA7 PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6
 8002b30:	f248 13dc 	movw	r3, #33244	; 0x81dc
 8002b34:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b36:	2303      	movs	r3, #3
 8002b38:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b3e:	1d3b      	adds	r3, r7, #4
 8002b40:	4619      	mov	r1, r3
 8002b42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b46:	f005 faa1 	bl	800808c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8002b4a:	2320      	movs	r3, #32
 8002b4c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002b4e:	4b1c      	ldr	r3, [pc, #112]	; (8002bc0 <MX_GPIO_Init+0x118>)
 8002b50:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b52:	2301      	movs	r3, #1
 8002b54:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8002b56:	1d3b      	adds	r3, r7, #4
 8002b58:	4619      	mov	r1, r3
 8002b5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b5e:	f005 fa95 	bl	800808c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXPANSION_INT_Pin;
 8002b62:	2304      	movs	r3, #4
 8002b64:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b66:	4b17      	ldr	r3, [pc, #92]	; (8002bc4 <MX_GPIO_Init+0x11c>)
 8002b68:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(EXPANSION_INT_GPIO_Port, &GPIO_InitStruct);
 8002b6e:	1d3b      	adds	r3, r7, #4
 8002b70:	4619      	mov	r1, r3
 8002b72:	4811      	ldr	r0, [pc, #68]	; (8002bb8 <MX_GPIO_Init+0x110>)
 8002b74:	f005 fa8a 	bl	800808c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002b78:	2310      	movs	r3, #16
 8002b7a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b80:	2300      	movs	r3, #0
 8002b82:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b84:	1d3b      	adds	r3, r7, #4
 8002b86:	4619      	mov	r1, r3
 8002b88:	480f      	ldr	r0, [pc, #60]	; (8002bc8 <MX_GPIO_Init+0x120>)
 8002b8a:	f005 fa7f 	bl	800808c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8002b8e:	2200      	movs	r2, #0
 8002b90:	2105      	movs	r1, #5
 8002b92:	2008      	movs	r0, #8
 8002b94:	f004 fef1 	bl	800797a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002b98:	2008      	movs	r0, #8
 8002b9a:	f004 ff08 	bl	80079ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	2105      	movs	r1, #5
 8002ba2:	2017      	movs	r0, #23
 8002ba4:	f004 fee9 	bl	800797a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002ba8:	2017      	movs	r0, #23
 8002baa:	f004 ff00 	bl	80079ae <HAL_NVIC_EnableIRQ>

}
 8002bae:	bf00      	nop
 8002bb0:	3718      	adds	r7, #24
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	48000400 	.word	0x48000400
 8002bbc:	48001c00 	.word	0x48001c00
 8002bc0:	10210000 	.word	0x10210000
 8002bc4:	10110000 	.word	0x10110000
 8002bc8:	48001000 	.word	0x48001000

08002bcc <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002bd4:	4b06      	ldr	r3, [pc, #24]	; (8002bf0 <LL_EXTI_EnableIT_0_31+0x24>)
 8002bd6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002bda:	4905      	ldr	r1, [pc, #20]	; (8002bf0 <LL_EXTI_EnableIT_0_31+0x24>)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr
 8002bf0:	58000800 	.word	0x58000800

08002bf4 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002bfc:	4b05      	ldr	r3, [pc, #20]	; (8002c14 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	4904      	ldr	r1, [pc, #16]	; (8002c14 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	600b      	str	r3, [r1, #0]

}
 8002c08:	bf00      	nop
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr
 8002c14:	58000800 	.word	0x58000800

08002c18 <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b088      	sub	sp, #32
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	4603      	mov	r3, r0
 8002c20:	6039      	str	r1, [r7, #0]
 8002c22:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8002c24:	4a64      	ldr	r2, [pc, #400]	; (8002db8 <HW_TS_Init+0x1a0>)
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8002c2a:	4b63      	ldr	r3, [pc, #396]	; (8002db8 <HW_TS_Init+0x1a0>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	22ca      	movs	r2, #202	; 0xca
 8002c32:	625a      	str	r2, [r3, #36]	; 0x24
 8002c34:	4b60      	ldr	r3, [pc, #384]	; (8002db8 <HW_TS_Init+0x1a0>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2253      	movs	r2, #83	; 0x53
 8002c3c:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002c3e:	4b5f      	ldr	r3, [pc, #380]	; (8002dbc <HW_TS_Init+0x1a4>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	4a5e      	ldr	r2, [pc, #376]	; (8002dbc <HW_TS_Init+0x1a4>)
 8002c44:	f043 0320 	orr.w	r3, r3, #32
 8002c48:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8002c4a:	4b5c      	ldr	r3, [pc, #368]	; (8002dbc <HW_TS_Init+0x1a4>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	f003 0307 	and.w	r3, r3, #7
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	f1c3 0304 	rsb	r3, r3, #4
 8002c5a:	b2da      	uxtb	r2, r3
 8002c5c:	4b58      	ldr	r3, [pc, #352]	; (8002dc0 <HW_TS_Init+0x1a8>)
 8002c5e:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8002c60:	4b56      	ldr	r3, [pc, #344]	; (8002dbc <HW_TS_Init+0x1a4>)
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002c68:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8002c6c:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	fa92 f2a2 	rbit	r2, r2
 8002c74:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002c76:	68fa      	ldr	r2, [r7, #12]
 8002c78:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002c7a:	697a      	ldr	r2, [r7, #20]
 8002c7c:	2a00      	cmp	r2, #0
 8002c7e:	d101      	bne.n	8002c84 <HW_TS_Init+0x6c>
  {
    return 32U;
 8002c80:	2220      	movs	r2, #32
 8002c82:	e003      	b.n	8002c8c <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 8002c84:	697a      	ldr	r2, [r7, #20]
 8002c86:	fab2 f282 	clz	r2, r2
 8002c8a:	b2d2      	uxtb	r2, r2
 8002c8c:	40d3      	lsrs	r3, r2
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	3301      	adds	r3, #1
 8002c92:	b2da      	uxtb	r2, r3
 8002c94:	4b4b      	ldr	r3, [pc, #300]	; (8002dc4 <HW_TS_Init+0x1ac>)
 8002c96:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8002c98:	4b48      	ldr	r3, [pc, #288]	; (8002dbc <HW_TS_Init+0x1a4>)
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	b29a      	uxth	r2, r3
 8002ca8:	4b47      	ldr	r3, [pc, #284]	; (8002dc8 <HW_TS_Init+0x1b0>)
 8002caa:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8002cac:	4b46      	ldr	r3, [pc, #280]	; (8002dc8 <HW_TS_Init+0x1b0>)
 8002cae:	881b      	ldrh	r3, [r3, #0]
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	4a44      	ldr	r2, [pc, #272]	; (8002dc4 <HW_TS_Init+0x1ac>)
 8002cb4:	7812      	ldrb	r2, [r2, #0]
 8002cb6:	fb02 f303 	mul.w	r3, r2, r3
 8002cba:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002cbe:	4a40      	ldr	r2, [pc, #256]	; (8002dc0 <HW_TS_Init+0x1a8>)
 8002cc0:	7812      	ldrb	r2, [r2, #0]
 8002cc2:	40d3      	lsrs	r3, r2
 8002cc4:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d904      	bls.n	8002cda <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8002cd0:	4b3e      	ldr	r3, [pc, #248]	; (8002dcc <HW_TS_Init+0x1b4>)
 8002cd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cd6:	801a      	strh	r2, [r3, #0]
 8002cd8:	e003      	b.n	8002ce2 <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	b29a      	uxth	r2, r3
 8002cde:	4b3b      	ldr	r3, [pc, #236]	; (8002dcc <HW_TS_Init+0x1b4>)
 8002ce0:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002ce2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002ce6:	f7ff ff85 	bl	8002bf4 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002cea:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002cee:	f7ff ff6d 	bl	8002bcc <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8002cf2:	79fb      	ldrb	r3, [r7, #7]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d143      	bne.n	8002d80 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002cf8:	4b35      	ldr	r3, [pc, #212]	; (8002dd0 <HW_TS_Init+0x1b8>)
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002cfe:	4b35      	ldr	r3, [pc, #212]	; (8002dd4 <HW_TS_Init+0x1bc>)
 8002d00:	f04f 32ff 	mov.w	r2, #4294967295
 8002d04:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002d06:	2300      	movs	r3, #0
 8002d08:	77fb      	strb	r3, [r7, #31]
 8002d0a:	e00c      	b.n	8002d26 <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8002d0c:	7ffa      	ldrb	r2, [r7, #31]
 8002d0e:	4932      	ldr	r1, [pc, #200]	; (8002dd8 <HW_TS_Init+0x1c0>)
 8002d10:	4613      	mov	r3, r2
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	4413      	add	r3, r2
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	440b      	add	r3, r1
 8002d1a:	330c      	adds	r3, #12
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002d20:	7ffb      	ldrb	r3, [r7, #31]
 8002d22:	3301      	adds	r3, #1
 8002d24:	77fb      	strb	r3, [r7, #31]
 8002d26:	7ffb      	ldrb	r3, [r7, #31]
 8002d28:	2b05      	cmp	r3, #5
 8002d2a:	d9ef      	bls.n	8002d0c <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8002d2c:	4b2b      	ldr	r3, [pc, #172]	; (8002ddc <HW_TS_Init+0x1c4>)
 8002d2e:	2206      	movs	r2, #6
 8002d30:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8002d32:	4b21      	ldr	r3, [pc, #132]	; (8002db8 <HW_TS_Init+0x1a0>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	689a      	ldr	r2, [r3, #8]
 8002d3a:	4b1f      	ldr	r3, [pc, #124]	; (8002db8 <HW_TS_Init+0x1a0>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d44:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8002d46:	4b1c      	ldr	r3, [pc, #112]	; (8002db8 <HW_TS_Init+0x1a0>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	b2da      	uxtb	r2, r3
 8002d50:	4b19      	ldr	r3, [pc, #100]	; (8002db8 <HW_TS_Init+0x1a0>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002d5a:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8002d5c:	4b20      	ldr	r3, [pc, #128]	; (8002de0 <HW_TS_Init+0x1c8>)
 8002d5e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002d62:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8002d64:	2003      	movs	r0, #3
 8002d66:	f004 fe42 	bl	80079ee <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8002d6a:	4b13      	ldr	r3, [pc, #76]	; (8002db8 <HW_TS_Init+0x1a0>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	689a      	ldr	r2, [r3, #8]
 8002d72:	4b11      	ldr	r3, [pc, #68]	; (8002db8 <HW_TS_Init+0x1a0>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d7c:	609a      	str	r2, [r3, #8]
 8002d7e:	e00a      	b.n	8002d96 <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8002d80:	4b0d      	ldr	r3, [pc, #52]	; (8002db8 <HW_TS_Init+0x1a0>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d002      	beq.n	8002d96 <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002d90:	2003      	movs	r0, #3
 8002d92:	f004 fe1e 	bl	80079d2 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8002d96:	4b08      	ldr	r3, [pc, #32]	; (8002db8 <HW_TS_Init+0x1a0>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	22ff      	movs	r2, #255	; 0xff
 8002d9e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8002da0:	2200      	movs	r2, #0
 8002da2:	2106      	movs	r1, #6
 8002da4:	2003      	movs	r0, #3
 8002da6:	f004 fde8 	bl	800797a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002daa:	2003      	movs	r0, #3
 8002dac:	f004 fdff 	bl	80079ae <HAL_NVIC_EnableIRQ>

  return;
 8002db0:	bf00      	nop
}
 8002db2:	3720      	adds	r7, #32
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	20000c34 	.word	0x20000c34
 8002dbc:	40002800 	.word	0x40002800
 8002dc0:	20000c38 	.word	0x20000c38
 8002dc4:	20000c39 	.word	0x20000c39
 8002dc8:	20000c3a 	.word	0x20000c3a
 8002dcc:	20000c3c 	.word	0x20000c3c
 8002dd0:	20000374 	.word	0x20000374
 8002dd4:	20000370 	.word	0x20000370
 8002dd8:	200002dc 	.word	0x200002dc
 8002ddc:	2000036c 	.word	0x2000036c
 8002de0:	58000800 	.word	0x58000800

08002de4 <LL_AHB2_GRP1_EnableClock>:
{
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002dec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002df0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002df2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002dfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e00:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4013      	ands	r3, r2
 8002e06:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002e08:	68fb      	ldr	r3, [r7, #12]
}
 8002e0a:	bf00      	nop
 8002e0c:	3714      	adds	r7, #20
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002e16:	b480      	push	{r7}
 8002e18:	b085      	sub	sp, #20
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002e1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e22:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002e24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002e2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e32:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4013      	ands	r3, r2
 8002e38:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
}
 8002e3c:	bf00      	nop
 8002e3e:	3714      	adds	r7, #20
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8002e4c:	4b1b      	ldr	r3, [pc, #108]	; (8002ebc <MX_I2C1_Init+0x74>)
 8002e4e:	4a1c      	ldr	r2, [pc, #112]	; (8002ec0 <MX_I2C1_Init+0x78>)
 8002e50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00E27CAE;
 8002e52:	4b1a      	ldr	r3, [pc, #104]	; (8002ebc <MX_I2C1_Init+0x74>)
 8002e54:	4a1b      	ldr	r2, [pc, #108]	; (8002ec4 <MX_I2C1_Init+0x7c>)
 8002e56:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002e58:	4b18      	ldr	r3, [pc, #96]	; (8002ebc <MX_I2C1_Init+0x74>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e5e:	4b17      	ldr	r3, [pc, #92]	; (8002ebc <MX_I2C1_Init+0x74>)
 8002e60:	2201      	movs	r2, #1
 8002e62:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e64:	4b15      	ldr	r3, [pc, #84]	; (8002ebc <MX_I2C1_Init+0x74>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002e6a:	4b14      	ldr	r3, [pc, #80]	; (8002ebc <MX_I2C1_Init+0x74>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002e70:	4b12      	ldr	r3, [pc, #72]	; (8002ebc <MX_I2C1_Init+0x74>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e76:	4b11      	ldr	r3, [pc, #68]	; (8002ebc <MX_I2C1_Init+0x74>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e7c:	4b0f      	ldr	r3, [pc, #60]	; (8002ebc <MX_I2C1_Init+0x74>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002e82:	480e      	ldr	r0, [pc, #56]	; (8002ebc <MX_I2C1_Init+0x74>)
 8002e84:	f005 fade 	bl	8008444 <HAL_I2C_Init>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002e8e:	f000 fd95 	bl	80039bc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002e92:	2100      	movs	r1, #0
 8002e94:	4809      	ldr	r0, [pc, #36]	; (8002ebc <MX_I2C1_Init+0x74>)
 8002e96:	f007 fa97 	bl	800a3c8 <HAL_I2CEx_ConfigAnalogFilter>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002ea0:	f000 fd8c 	bl	80039bc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002ea4:	2100      	movs	r1, #0
 8002ea6:	4805      	ldr	r0, [pc, #20]	; (8002ebc <MX_I2C1_Init+0x74>)
 8002ea8:	f007 fad9 	bl	800a45e <HAL_I2CEx_ConfigDigitalFilter>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002eb2:	f000 fd83 	bl	80039bc <Error_Handler>
  }

}
 8002eb6:	bf00      	nop
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	20028250 	.word	0x20028250
 8002ec0:	40005400 	.word	0x40005400
 8002ec4:	00e27cae 	.word	0x00e27cae

08002ec8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b088      	sub	sp, #32
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed0:	f107 030c 	add.w	r3, r7, #12
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	601a      	str	r2, [r3, #0]
 8002ed8:	605a      	str	r2, [r3, #4]
 8002eda:	609a      	str	r2, [r3, #8]
 8002edc:	60da      	str	r2, [r3, #12]
 8002ede:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a13      	ldr	r2, [pc, #76]	; (8002f34 <HAL_I2C_MspInit+0x6c>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d120      	bne.n	8002f2c <HAL_I2C_MspInit+0x64>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eea:	2001      	movs	r0, #1
 8002eec:	f7ff ff7a 	bl	8002de4 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002ef0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002ef4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ef6:	2312      	movs	r3, #18
 8002ef8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efa:	2300      	movs	r3, #0
 8002efc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002efe:	2300      	movs	r3, #0
 8002f00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002f02:	2304      	movs	r3, #4
 8002f04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f06:	f107 030c 	add.w	r3, r7, #12
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f10:	f005 f8bc 	bl	800808c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f14:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002f18:	f7ff ff7d 	bl	8002e16 <LL_APB1_GRP1_EnableClock>

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	2105      	movs	r1, #5
 8002f20:	201e      	movs	r0, #30
 8002f22:	f004 fd2a 	bl	800797a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002f26:	201e      	movs	r0, #30
 8002f28:	f004 fd41 	bl	80079ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002f2c:	bf00      	nop
 8002f2e:	3720      	adds	r7, #32
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	40005400 	.word	0x40005400

08002f38 <InertialSensingTask>:
uint32_t enableActivities = 0x1F; //Enable all 9 possible activities including Unknown
uint8_t inertialEnabled = 0;

struct inertialData inertialPacket;

void InertialSensingTask(void *argument){
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
	inertialEnabled = 1;
 8002f40:	4b38      	ldr	r3, [pc, #224]	; (8003024 <InertialSensingTask+0xec>)
 8002f42:	2201      	movs	r2, #1
 8002f44:	701a      	strb	r2, [r3, #0]
#ifndef DONGLE_CODE
	IMU_begin(BNO080_ADDRESS, IMU_INT_Pin, IMU_INT_GPIO_Port);
 8002f46:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002f4a:	2120      	movs	r1, #32
 8002f4c:	204a      	movs	r0, #74	; 0x4a
 8002f4e:	f7fe fddd 	bl	8001b0c <IMU_begin>
#endif

	uint32_t evt = 0;
 8002f52:	2300      	movs	r3, #0
 8002f54:	60fb      	str	r3, [r7, #12]

	while(1){

		/********* WAIT FOR START CONDITION FROM MASTER THREAD ************************/
		osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 8002f56:	f04f 32ff 	mov.w	r2, #4294967295
 8002f5a:	2100      	movs	r1, #0
 8002f5c:	2001      	movs	r0, #1
 8002f5e:	f00d fb43 	bl	80105e8 <osThreadFlagsWait>

		// configure IMU
		osDelay(500);
 8002f62:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002f66:	f00d fbd3 	bl	8010710 <osDelay>
		IMU_enableRotationVector(ROT_VEC_PERIOD);
 8002f6a:	2064      	movs	r0, #100	; 0x64
 8002f6c:	f7ff f8c8 	bl	8002100 <IMU_enableRotationVector>
		osDelay(100);
 8002f70:	2064      	movs	r0, #100	; 0x64
 8002f72:	f00d fbcd 	bl	8010710 <osDelay>
		IMU_enableActivityClassifier(ACT_CLASS_PERIOD , enableActivities, activityClasses);
 8002f76:	4b2c      	ldr	r3, [pc, #176]	; (8003028 <InertialSensingTask+0xf0>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a2c      	ldr	r2, [pc, #176]	; (800302c <InertialSensingTask+0xf4>)
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002f82:	f7ff f8cb 	bl	800211c <IMU_enableActivityClassifier>

		// give some time for things to buffer
		// TODO: remove this to see if it still works fine
		osDelay(400);
 8002f86:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002f8a:	f00d fbc1 	bl	8010710 <osDelay>

		while(1){

			// grab packets
			osDelay(100);
 8002f8e:	2064      	movs	r0, #100	; 0x64
 8002f90:	f00d fbbe 	bl	8010710 <osDelay>
			osMessageQueueGet(rotationSampleQueueHandle, &inertialPacket.rotationMatrix, 0U, 100);
 8002f94:	4b26      	ldr	r3, [pc, #152]	; (8003030 <InertialSensingTask+0xf8>)
 8002f96:	6818      	ldr	r0, [r3, #0]
 8002f98:	2364      	movs	r3, #100	; 0x64
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	4925      	ldr	r1, [pc, #148]	; (8003034 <InertialSensingTask+0xfc>)
 8002f9e:	f00e f8a7 	bl	80110f0 <osMessageQueueGet>
			osMessageQueueGet(activitySampleQueueHandle, &inertialPacket.activity, 0U, 0);
 8002fa2:	4b25      	ldr	r3, [pc, #148]	; (8003038 <InertialSensingTask+0x100>)
 8002fa4:	6818      	ldr	r0, [r3, #0]
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	2200      	movs	r2, #0
 8002faa:	4924      	ldr	r1, [pc, #144]	; (800303c <InertialSensingTask+0x104>)
 8002fac:	f00e f8a0 	bl	80110f0 <osMessageQueueGet>
			osMessageQueuePut(inertialSensingQueueHandle, &inertialPacket, 0U, 0);
 8002fb0:	4b23      	ldr	r3, [pc, #140]	; (8003040 <InertialSensingTask+0x108>)
 8002fb2:	6818      	ldr	r0, [r3, #0]
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	491e      	ldr	r1, [pc, #120]	; (8003034 <InertialSensingTask+0xfc>)
 8002fba:	f00e f825 	bl	8011008 <osMessageQueuePut>

			if( HAL_GPIO_ReadPin(IMU_INT_GPIO_Port, IMU_INT_Pin) == GPIO_PIN_RESET) IMU_dataAvailable();
 8002fbe:	2120      	movs	r1, #32
 8002fc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fc4:	f005 f9d2 	bl	800836c <HAL_GPIO_ReadPin>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <InertialSensingTask+0x9a>
 8002fce:	f7fe fdd5 	bl	8001b7c <IMU_dataAvailable>

			// check for break condition
			evt = osThreadFlagsWait (0x00000002U, osFlagsWaitAny, 0);
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	2100      	movs	r1, #0
 8002fd6:	2002      	movs	r0, #2
 8002fd8:	f00d fb06 	bl	80105e8 <osThreadFlagsWait>
 8002fdc:	60f8      	str	r0, [r7, #12]

			// stop timer and put thread in idle if signal was reset
			if( (evt & 0x00000002U) == 0x00000002U){
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f003 0302 	and.w	r3, r3, #2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d0d2      	beq.n	8002f8e <InertialSensingTask+0x56>

				// reset IMU
				IMU_softReset();
 8002fe8:	f7ff f82a 	bl	8002040 <IMU_softReset>

				// give some time to ensure no interrupts are handled
				osDelay(500);
 8002fec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002ff0:	f00d fb8e 	bl	8010710 <osDelay>

				inertialEnabled = 0;
 8002ff4:	4b0b      	ldr	r3, [pc, #44]	; (8003024 <InertialSensingTask+0xec>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	701a      	strb	r2, [r3, #0]

				// empty queues
				osMessageQueueReset(inertialSensingQueueHandle);
 8002ffa:	4b11      	ldr	r3, [pc, #68]	; (8003040 <InertialSensingTask+0x108>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f00e f8e8 	bl	80111d4 <osMessageQueueReset>
				osMessageQueueReset(activitySampleQueueHandle);
 8003004:	4b0c      	ldr	r3, [pc, #48]	; (8003038 <InertialSensingTask+0x100>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4618      	mov	r0, r3
 800300a:	f00e f8e3 	bl	80111d4 <osMessageQueueReset>
				osMessageQueueReset(rotationSampleQueueHandle);
 800300e:	4b08      	ldr	r3, [pc, #32]	; (8003030 <InertialSensingTask+0xf8>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4618      	mov	r0, r3
 8003014:	f00e f8de 	bl	80111d4 <osMessageQueueReset>

				// clear any flags
				osThreadFlagsClear(0x0000000EU);
 8003018:	200e      	movs	r0, #14
 800301a:	f00d fa95 	bl	8010548 <osThreadFlagsClear>

				// exit and wait for next start condition
				break;
 800301e:	bf00      	nop
		osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 8003020:	e799      	b.n	8002f56 <InertialSensingTask+0x1e>
 8003022:	bf00      	nop
 8003024:	20000c3e 	.word	0x20000c3e
 8003028:	20000068 	.word	0x20000068
 800302c:	200282e0 	.word	0x200282e0
 8003030:	20027c68 	.word	0x20027c68
 8003034:	200282a4 	.word	0x200282a4
 8003038:	20027c44 	.word	0x20027c44
 800303c:	200282bc 	.word	0x200282bc
 8003040:	20027c54 	.word	0x20027c54

08003044 <HAL_GPIO_EXTI_Callback>:
//
//
//}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	4603      	mov	r3, r0
 800304c:	80fb      	strh	r3, [r7, #6]
    // if interrupt is triggered, sample!
	// todo: only do when inertial measurements are enabled?
	if((GPIO_Pin == IMU_INT_Pin) && (inertialEnabled == 1)){
 800304e:	88fb      	ldrh	r3, [r7, #6]
 8003050:	2b20      	cmp	r3, #32
 8003052:	d105      	bne.n	8003060 <HAL_GPIO_EXTI_Callback+0x1c>
 8003054:	4b04      	ldr	r3, [pc, #16]	; (8003068 <HAL_GPIO_EXTI_Callback+0x24>)
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d101      	bne.n	8003060 <HAL_GPIO_EXTI_Callback+0x1c>
		IMU_dataAvailable();
 800305c:	f7fe fd8e 	bl	8001b7c <IMU_dataAvailable>
	}
}
 8003060:	bf00      	nop
 8003062:	3708      	adds	r7, #8
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	20000c3e 	.word	0x20000c3e

0800306c <_Input>:
#include "app_thread.h"

PulseProcessor pulse_processor;
GeometryBuilder geometry_builder;

void _Input(Input *self, uint8_t input_idx){
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	460b      	mov	r3, r1
 8003076:	70fb      	strb	r3, [r7, #3]
	_GeometryBuilder(&geometry_builder);
 8003078:	480b      	ldr	r0, [pc, #44]	; (80030a8 <_Input+0x3c>)
 800307a:	f7ff fa3f 	bl	80024fc <_GeometryBuilder>
	_PulseProcessor(&pulse_processor, 1);
 800307e:	2101      	movs	r1, #1
 8003080:	480a      	ldr	r0, [pc, #40]	; (80030ac <_Input+0x40>)
 8003082:	f000 ff9f 	bl	8003fc4 <_PulseProcessor>
	pulse_processor.next = &geometry_builder;
 8003086:	4b09      	ldr	r3, [pc, #36]	; (80030ac <_Input+0x40>)
 8003088:	4a07      	ldr	r2, [pc, #28]	; (80030a8 <_Input+0x3c>)
 800308a:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
	self->next = &pulse_processor;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a06      	ldr	r2, [pc, #24]	; (80030ac <_Input+0x40>)
 8003092:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
	self->input_idx_ = input_idx;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	78fa      	ldrb	r2, [r7, #3]
 800309a:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408

}
 800309e:	bf00      	nop
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	2002830c 	.word	0x2002830c
 80030ac:	20028394 	.word	0x20028394

080030b0 <PulseHandlerTask>:
volatile uint32_t count = 0;
Pulse p;
void PulseHandlerTask(void *argument){
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
	uint32_t evt = 0;
 80030b8:	2300      	movs	r3, #0
 80030ba:	60fb      	str	r3, [r7, #12]
	while(1){
		osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 80030bc:	f04f 32ff 	mov.w	r2, #4294967295
 80030c0:	2100      	movs	r1, #0
 80030c2:	2001      	movs	r0, #1
 80030c4:	f00d fa90 	bl	80105e8 <osThreadFlagsWait>
		//Start interrupt
//		HAL_NVIC_EnableIRQ(COMP_IRQn);
		HAL_TIM_Base_Start(&htim16);
 80030c8:	4818      	ldr	r0, [pc, #96]	; (800312c <PulseHandlerTask+0x7c>)
 80030ca:	f00a fb41 	bl	800d750 <HAL_TIM_Base_Start>
		HAL_COMP_Start(&hcomp1);
 80030ce:	4818      	ldr	r0, [pc, #96]	; (8003130 <PulseHandlerTask+0x80>)
 80030d0:	f004 fa8e 	bl	80075f0 <HAL_COMP_Start>
		_Input(&input0, 0);
 80030d4:	2100      	movs	r1, #0
 80030d6:	4817      	ldr	r0, [pc, #92]	; (8003134 <PulseHandlerTask+0x84>)
 80030d8:	f7ff ffc8 	bl	800306c <_Input>
		while(1){
			osMessageQueueGet (pulseQueueHandle, (void *) &p, NULL, osWaitForever);
 80030dc:	4b16      	ldr	r3, [pc, #88]	; (8003138 <PulseHandlerTask+0x88>)
 80030de:	6818      	ldr	r0, [r3, #0]
 80030e0:	f04f 33ff 	mov.w	r3, #4294967295
 80030e4:	2200      	movs	r2, #0
 80030e6:	4915      	ldr	r1, [pc, #84]	; (800313c <PulseHandlerTask+0x8c>)
 80030e8:	f00e f802 	bl	80110f0 <osMessageQueueGet>
			consume_pulse(input0.next, &p);
 80030ec:	4b11      	ldr	r3, [pc, #68]	; (8003134 <PulseHandlerTask+0x84>)
 80030ee:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 80030f2:	4912      	ldr	r1, [pc, #72]	; (800313c <PulseHandlerTask+0x8c>)
 80030f4:	4618      	mov	r0, r3
 80030f6:	f000 ff99 	bl	800402c <consume_pulse>

			evt = osThreadFlagsWait(0x00000002U, osFlagsWaitAny, 0);
 80030fa:	2200      	movs	r2, #0
 80030fc:	2100      	movs	r1, #0
 80030fe:	2002      	movs	r0, #2
 8003100:	f00d fa72 	bl	80105e8 <osThreadFlagsWait>
 8003104:	60f8      	str	r0, [r7, #12]
			if((evt & 0x00000002U) == 0x00000002U){
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f003 0302 	and.w	r3, r3, #2
 800310c:	2b00      	cmp	r3, #0
 800310e:	d0e5      	beq.n	80030dc <PulseHandlerTask+0x2c>
				//Stop interrupt
//				HAL_NVIC_DisableIRQ(COMP_IRQn);
				HAL_COMP_Stop(&hcomp1);
 8003110:	4807      	ldr	r0, [pc, #28]	; (8003130 <PulseHandlerTask+0x80>)
 8003112:	f004 fab7 	bl	8007684 <HAL_COMP_Stop>
				HAL_TIM_Base_Stop(&htim16);
 8003116:	4805      	ldr	r0, [pc, #20]	; (800312c <PulseHandlerTask+0x7c>)
 8003118:	f00a fb60 	bl	800d7dc <HAL_TIM_Base_Stop>
				osMessageQueueReset(pulseQueueHandle);
 800311c:	4b06      	ldr	r3, [pc, #24]	; (8003138 <PulseHandlerTask+0x88>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4618      	mov	r0, r3
 8003122:	f00e f857 	bl	80111d4 <osMessageQueueReset>
				break;
 8003126:	bf00      	nop
		osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 8003128:	e7c8      	b.n	80030bc <PulseHandlerTask+0xc>
 800312a:	bf00      	nop
 800312c:	200288a4 	.word	0x200288a4
 8003130:	200280c0 	.word	0x200280c0
 8003134:	20027c6c 	.word	0x20027c6c
 8003138:	20027b48 	.word	0x20027b48
 800313c:	200282ec 	.word	0x200282ec

08003140 <get3D_location>:

VIVEVars vive_vars;
struct LogMessage statusMessage;
struct VIVEVars vive_loc_demo;

void get3D_location(void *arguments){
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]

	uint8_t blinkActive	= 0;
 8003148:	2300      	movs	r3, #0
 800314a:	73fb      	strb	r3, [r7, #15]
	uint32_t blinkState;

	memcpy(&blinkState, arguments, sizeof(blinkState));
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	60bb      	str	r3, [r7, #8]

	// ensures semaphores are clear
	osSemaphoreAcquire(locCompleteHandle, 0);
 8003152:	4b3f      	ldr	r3, [pc, #252]	; (8003250 <get3D_location+0x110>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2100      	movs	r1, #0
 8003158:	4618      	mov	r0, r3
 800315a:	f00d fe11 	bl	8010d80 <osSemaphoreAcquire>
	osSemaphoreAcquire(locNotifyHandle, 0);
 800315e:	4b3d      	ldr	r3, [pc, #244]	; (8003254 <get3D_location+0x114>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2100      	movs	r1, #0
 8003164:	4618      	mov	r0, r3
 8003166:	f00d fe0b 	bl	8010d80 <osSemaphoreAcquire>

	osMessageQueueGet(statusQueueHandle, &statusMessage, 0U, osWaitForever);
 800316a:	4b3b      	ldr	r3, [pc, #236]	; (8003258 <get3D_location+0x118>)
 800316c:	6818      	ldr	r0, [r3, #0]
 800316e:	f04f 33ff 	mov.w	r3, #4294967295
 8003172:	2200      	movs	r2, #0
 8003174:	4939      	ldr	r1, [pc, #228]	; (800325c <get3D_location+0x11c>)
 8003176:	f00d ffbb 	bl	80110f0 <osMessageQueueGet>
	if(statusMessage.blinkEnabled == 1){
 800317a:	4b38      	ldr	r3, [pc, #224]	; (800325c <get3D_location+0x11c>)
 800317c:	789b      	ldrb	r3, [r3, #2]
 800317e:	2b01      	cmp	r3, #1
 8003180:	d116      	bne.n	80031b0 <get3D_location+0x70>
		osMessageQueuePut(statusQueueHandle, (void *) &statusMessage, 0U, 0);
 8003182:	4b35      	ldr	r3, [pc, #212]	; (8003258 <get3D_location+0x118>)
 8003184:	6818      	ldr	r0, [r3, #0]
 8003186:	2300      	movs	r3, #0
 8003188:	2200      	movs	r2, #0
 800318a:	4934      	ldr	r1, [pc, #208]	; (800325c <get3D_location+0x11c>)
 800318c:	f00d ff3c 	bl	8011008 <osMessageQueuePut>

		blinkActive = 1;
 8003190:	2301      	movs	r3, #1
 8003192:	73fb      	strb	r3, [r7, #15]

		// disable blink if active
		osThreadFlagsSet(blinkTaskHandle, 0x00000002U);
 8003194:	4b32      	ldr	r3, [pc, #200]	; (8003260 <get3D_location+0x120>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2102      	movs	r1, #2
 800319a:	4618      	mov	r0, r3
 800319c:	f00d f972 	bl	8010484 <osThreadFlagsSet>

		// wait for blink thread to turn off
		//TODO: make safer by making a break condition
		osSemaphoreAcquire(locNotifyHandle, osWaitForever);
 80031a0:	4b2c      	ldr	r3, [pc, #176]	; (8003254 <get3D_location+0x114>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f04f 31ff 	mov.w	r1, #4294967295
 80031a8:	4618      	mov	r0, r3
 80031aa:	f00d fde9 	bl	8010d80 <osSemaphoreAcquire>
 80031ae:	e006      	b.n	80031be <get3D_location+0x7e>
	}
	else{
		osMessageQueuePut(statusQueueHandle, (void *) &statusMessage, 0U, 0);
 80031b0:	4b29      	ldr	r3, [pc, #164]	; (8003258 <get3D_location+0x118>)
 80031b2:	6818      	ldr	r0, [r3, #0]
 80031b4:	2300      	movs	r3, #0
 80031b6:	2200      	movs	r2, #0
 80031b8:	4928      	ldr	r1, [pc, #160]	; (800325c <get3D_location+0x11c>)
 80031ba:	f00d ff25 	bl	8011008 <osMessageQueuePut>
	}

	// stop blink code if running and hold I2C bus from being used
	// 		the timeout is to ensure to turn off the thread if no signal is seen
	//TODO: optimize the timeout
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 80031be:	4b29      	ldr	r3, [pc, #164]	; (8003264 <get3D_location+0x124>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f04f 31ff 	mov.w	r1, #4294967295
 80031c6:	4618      	mov	r0, r3
 80031c8:	f00d fdda 	bl	8010d80 <osSemaphoreAcquire>

	// turn on 3D localization
	osThreadFlagsSet(pulseTaskHandle, 0x00000001U);
 80031cc:	4b26      	ldr	r3, [pc, #152]	; (8003268 <get3D_location+0x128>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2101      	movs	r1, #1
 80031d2:	4618      	mov	r0, r3
 80031d4:	f00d f956 	bl	8010484 <osThreadFlagsSet>

	// wait for completion
	osSemaphoreAcquire (locCompleteHandle, GET_3D_LOC_TIMEOUT);
 80031d8:	4b1d      	ldr	r3, [pc, #116]	; (8003250 <get3D_location+0x110>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80031e0:	4618      	mov	r0, r3
 80031e2:	f00d fdcd 	bl	8010d80 <osSemaphoreAcquire>

#ifdef VIVE_THREAD_INFINITE_TIMEOUT
	osDelay(osWaitForever);
#endif

	if(blinkState == LIGHT_LAB_DEMO){
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d119      	bne.n	8003220 <get3D_location+0xe0>
		while(osOK != osSemaphoreAcquire(lightingLabDemoEndHandle, 0)){
 80031ec:	e00f      	b.n	800320e <get3D_location+0xce>
			if(osOK == osMessageQueueGet(viveQueueHandle, &vive_loc_demo, 0U, 1000)){
 80031ee:	4b1f      	ldr	r3, [pc, #124]	; (800326c <get3D_location+0x12c>)
 80031f0:	6818      	ldr	r0, [r3, #0]
 80031f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031f6:	2200      	movs	r2, #0
 80031f8:	491d      	ldr	r1, [pc, #116]	; (8003270 <get3D_location+0x130>)
 80031fa:	f00d ff79 	bl	80110f0 <osMessageQueueGet>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d104      	bne.n	800320e <get3D_location+0xce>
				APP_THREAD_SendBorderMessage(&vive_loc_demo, sizeof(VIVEVars), "capLoc");
 8003204:	4a1b      	ldr	r2, [pc, #108]	; (8003274 <get3D_location+0x134>)
 8003206:	2118      	movs	r1, #24
 8003208:	4819      	ldr	r0, [pc, #100]	; (8003270 <get3D_location+0x130>)
 800320a:	f015 fac9 	bl	80187a0 <APP_THREAD_SendBorderMessage>
		while(osOK != osSemaphoreAcquire(lightingLabDemoEndHandle, 0)){
 800320e:	4b1a      	ldr	r3, [pc, #104]	; (8003278 <get3D_location+0x138>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2100      	movs	r1, #0
 8003214:	4618      	mov	r0, r3
 8003216:	f00d fdb3 	bl	8010d80 <osSemaphoreAcquire>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1e6      	bne.n	80031ee <get3D_location+0xae>
//			}
		}
	}

	// release I2C handle
	osSemaphoreRelease(messageI2C_LockHandle);
 8003220:	4b10      	ldr	r3, [pc, #64]	; (8003264 <get3D_location+0x124>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4618      	mov	r0, r3
 8003226:	f00d fe11 	bl	8010e4c <osSemaphoreRelease>

	// turn off 3D localization
	osThreadFlagsSet(pulseTaskHandle, 0x00000002U);
 800322a:	4b0f      	ldr	r3, [pc, #60]	; (8003268 <get3D_location+0x128>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2102      	movs	r1, #2
 8003230:	4618      	mov	r0, r3
 8003232:	f00d f927 	bl	8010484 <osThreadFlagsSet>

	if(blinkActive){
 8003236:	7bfb      	ldrb	r3, [r7, #15]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d005      	beq.n	8003248 <get3D_location+0x108>
//		// wait for blink thread to turn off
//		//TODO: make safer by making a break condition
//		osSemaphoreAcquire(locNotifyHandle, osWaitForever);

		// enable blink thread
		osThreadFlagsSet(blinkTaskHandle, 0x00000001U);
 800323c:	4b08      	ldr	r3, [pc, #32]	; (8003260 <get3D_location+0x120>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2101      	movs	r1, #1
 8003242:	4618      	mov	r0, r3
 8003244:	f00d f91e 	bl	8010484 <osThreadFlagsSet>
	}

}
 8003248:	bf00      	nop
 800324a:	3710      	adds	r7, #16
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	20028090 	.word	0x20028090
 8003254:	20028098 	.word	0x20028098
 8003258:	20027c64 	.word	0x20027c64
 800325c:	200280b4 	.word	0x200280b4
 8003260:	20027c34 	.word	0x20027c34
 8003264:	20027c50 	.word	0x20027c50
 8003268:	2002809c 	.word	0x2002809c
 800326c:	20027b4c 	.word	0x20027b4c
 8003270:	20028664 	.word	0x20028664
 8003274:	0801bcd4 	.word	0x0801bcd4
 8003278:	20027c5c 	.word	0x20027c5c

0800327c <enqueue_pulse>:


void enqueue_pulse(Input *self, uint16_t start_time, uint16_t len){
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	460b      	mov	r3, r1
 8003286:	807b      	strh	r3, [r7, #2]
 8003288:	4613      	mov	r3, r2
 800328a:	803b      	strh	r3, [r7, #0]
	Pulse p_in = {self->input_idx_, start_time, len};
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 8003292:	723b      	strb	r3, [r7, #8]
 8003294:	887b      	ldrh	r3, [r7, #2]
 8003296:	817b      	strh	r3, [r7, #10]
 8003298:	883b      	ldrh	r3, [r7, #0]
 800329a:	81bb      	strh	r3, [r7, #12]
	osMessageQueuePut(pulseQueueHandle, (const void *) &p_in, 0U, 0);
 800329c:	4b05      	ldr	r3, [pc, #20]	; (80032b4 <enqueue_pulse+0x38>)
 800329e:	6818      	ldr	r0, [r3, #0]
 80032a0:	f107 0108 	add.w	r1, r7, #8
 80032a4:	2300      	movs	r3, #0
 80032a6:	2200      	movs	r2, #0
 80032a8:	f00d feae 	bl	8011008 <osMessageQueuePut>
//	count = osMessageQueueGetCount(pulseQueueHandle);
}
 80032ac:	bf00      	nop
 80032ae:	3710      	adds	r7, #16
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	20027b48 	.word	0x20027b48

080032b8 <InterProcessorTask>:
extern struct LogPacket sensorPacket;
extern struct LogMessage togLogMessageReceived;
static const struct LogMessage nullMessage = {0};
struct LogMessage commandToSend;

void InterProcessorTask(void *argument){
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af02      	add	r7, sp, #8
 80032be:	6078      	str	r0, [r7, #4]
	uint32_t evt = 0;
 80032c0:	2300      	movs	r3, #0
 80032c2:	60fb      	str	r3, [r7, #12]
#ifndef DONGLE_CODE
	// ensure secondary processor is not active, trying to send data
	// 		note: this should only happen when debugging and resetting the main processor while secondary is logging
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 80032c4:	4b8e      	ldr	r3, [pc, #568]	; (8003500 <InterProcessorTask+0x248>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f04f 31ff 	mov.w	r1, #4294967295
 80032cc:	4618      	mov	r0, r3
 80032ce:	f00d fd57 	bl	8010d80 <osSemaphoreAcquire>
	while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &nullMessage, sizeof(togLogMessageReceived), 100) != HAL_OK){
 80032d2:	e00e      	b.n	80032f2 <InterProcessorTask+0x3a>
		osSemaphoreRelease(messageI2C_LockHandle);
 80032d4:	4b8a      	ldr	r3, [pc, #552]	; (8003500 <InterProcessorTask+0x248>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4618      	mov	r0, r3
 80032da:	f00d fdb7 	bl	8010e4c <osSemaphoreRelease>
		osDelay(100);
 80032de:	2064      	movs	r0, #100	; 0x64
 80032e0:	f00d fa16 	bl	8010710 <osDelay>
		osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 80032e4:	4b86      	ldr	r3, [pc, #536]	; (8003500 <InterProcessorTask+0x248>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f04f 31ff 	mov.w	r1, #4294967295
 80032ec:	4618      	mov	r0, r3
 80032ee:	f00d fd47 	bl	8010d80 <osSemaphoreAcquire>
	while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &nullMessage, sizeof(togLogMessageReceived), 100) != HAL_OK){
 80032f2:	2364      	movs	r3, #100	; 0x64
 80032f4:	9300      	str	r3, [sp, #0]
 80032f6:	2306      	movs	r3, #6
 80032f8:	4a82      	ldr	r2, [pc, #520]	; (8003504 <InterProcessorTask+0x24c>)
 80032fa:	21e6      	movs	r1, #230	; 0xe6
 80032fc:	4882      	ldr	r0, [pc, #520]	; (8003508 <InterProcessorTask+0x250>)
 80032fe:	f005 f931 	bl	8008564 <HAL_I2C_Master_Transmit>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1e5      	bne.n	80032d4 <InterProcessorTask+0x1c>
	};
	osSemaphoreRelease(messageI2C_LockHandle);
 8003308:	4b7d      	ldr	r3, [pc, #500]	; (8003500 <InterProcessorTask+0x248>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4618      	mov	r0, r3
 800330e:	f00d fd9d 	bl	8010e4c <osSemaphoreRelease>
#endif
	while(1){

		evt = osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 8003312:	f04f 32ff 	mov.w	r2, #4294967295
 8003316:	2100      	movs	r1, #0
 8003318:	2001      	movs	r0, #1
 800331a:	f00d f965 	bl	80105e8 <osThreadFlagsWait>
 800331e:	60f8      	str	r0, [r7, #12]

		// if signal was received successfully, start task
		if ( (evt & 0x00000001U) == 0x00000001U)  {
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b00      	cmp	r3, #0
 8003328:	d0f3      	beq.n	8003312 <InterProcessorTask+0x5a>

			// tell secondary processor to start logging (in blocking mode)
			memcpy(&commandToSend, &togLogMessageReceived, sizeof(struct LogMessage));
 800332a:	4b78      	ldr	r3, [pc, #480]	; (800350c <InterProcessorTask+0x254>)
 800332c:	4a78      	ldr	r2, [pc, #480]	; (8003510 <InterProcessorTask+0x258>)
 800332e:	6811      	ldr	r1, [r2, #0]
 8003330:	6019      	str	r1, [r3, #0]
 8003332:	8892      	ldrh	r2, [r2, #4]
 8003334:	809a      	strh	r2, [r3, #4]
//			osThreadFlagsClear(0x0000000FU);
			osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003336:	4b72      	ldr	r3, [pc, #456]	; (8003500 <InterProcessorTask+0x248>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f04f 31ff 	mov.w	r1, #4294967295
 800333e:	4618      	mov	r0, r3
 8003340:	f00d fd1e 	bl	8010d80 <osSemaphoreAcquire>
			//while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &commandToSend, sizeof(togLogMessageReceived), 100) != HAL_OK);
			while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &commandToSend, sizeof(togLogMessageReceived), 100) != HAL_OK){
 8003344:	e00e      	b.n	8003364 <InterProcessorTask+0xac>
					osSemaphoreRelease(messageI2C_LockHandle);
 8003346:	4b6e      	ldr	r3, [pc, #440]	; (8003500 <InterProcessorTask+0x248>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4618      	mov	r0, r3
 800334c:	f00d fd7e 	bl	8010e4c <osSemaphoreRelease>
					osDelay(100);
 8003350:	2064      	movs	r0, #100	; 0x64
 8003352:	f00d f9dd 	bl	8010710 <osDelay>
					osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003356:	4b6a      	ldr	r3, [pc, #424]	; (8003500 <InterProcessorTask+0x248>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f04f 31ff 	mov.w	r1, #4294967295
 800335e:	4618      	mov	r0, r3
 8003360:	f00d fd0e 	bl	8010d80 <osSemaphoreAcquire>
			while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &commandToSend, sizeof(togLogMessageReceived), 100) != HAL_OK){
 8003364:	2364      	movs	r3, #100	; 0x64
 8003366:	9300      	str	r3, [sp, #0]
 8003368:	2306      	movs	r3, #6
 800336a:	4a68      	ldr	r2, [pc, #416]	; (800350c <InterProcessorTask+0x254>)
 800336c:	21e6      	movs	r1, #230	; 0xe6
 800336e:	4866      	ldr	r0, [pc, #408]	; (8003508 <InterProcessorTask+0x250>)
 8003370:	f005 f8f8 	bl	8008564 <HAL_I2C_Master_Transmit>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1e5      	bne.n	8003346 <InterProcessorTask+0x8e>
				}
			osDelay(100);
 800337a:	2064      	movs	r0, #100	; 0x64
 800337c:	f00d f9c8 	bl	8010710 <osDelay>
			osSemaphoreRelease(messageI2C_LockHandle);
 8003380:	4b5f      	ldr	r3, [pc, #380]	; (8003500 <InterProcessorTask+0x248>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4618      	mov	r0, r3
 8003386:	f00d fd61 	bl	8010e4c <osSemaphoreRelease>

			// message passing until told to stop
			while(1){

				// grab an event flag if available
				evt = osThreadFlagsWait (0x00000006U, osFlagsWaitAny, osWaitForever);
 800338a:	f04f 32ff 	mov.w	r2, #4294967295
 800338e:	2100      	movs	r1, #0
 8003390:	2006      	movs	r0, #6
 8003392:	f00d f929 	bl	80105e8 <osThreadFlagsWait>
 8003396:	60f8      	str	r0, [r7, #12]

				// if an interrupt is received indicating a message is waiting to be received
 				if( (evt & 0x00000004U) == 0x00000004U){
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f003 0304 	and.w	r3, r3, #4
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d079      	beq.n	8003496 <InterProcessorTask+0x1de>

 					osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 80033a2:	4b57      	ldr	r3, [pc, #348]	; (8003500 <InterProcessorTask+0x248>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f04f 31ff 	mov.w	r1, #4294967295
 80033aa:	4618      	mov	r0, r3
 80033ac:	f00d fce8 	bl	8010d80 <osSemaphoreAcquire>

 					// send command packet to MCU
 					while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &commandToSend, sizeof(struct LogMessage), 100) != HAL_OK){
 80033b0:	e00e      	b.n	80033d0 <InterProcessorTask+0x118>
 						osSemaphoreRelease(messageI2C_LockHandle);
 80033b2:	4b53      	ldr	r3, [pc, #332]	; (8003500 <InterProcessorTask+0x248>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f00d fd48 	bl	8010e4c <osSemaphoreRelease>
 						osDelay(100);
 80033bc:	2064      	movs	r0, #100	; 0x64
 80033be:	f00d f9a7 	bl	8010710 <osDelay>
 						osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 80033c2:	4b4f      	ldr	r3, [pc, #316]	; (8003500 <InterProcessorTask+0x248>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f04f 31ff 	mov.w	r1, #4294967295
 80033ca:	4618      	mov	r0, r3
 80033cc:	f00d fcd8 	bl	8010d80 <osSemaphoreAcquire>
 					while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &commandToSend, sizeof(struct LogMessage), 100) != HAL_OK){
 80033d0:	2364      	movs	r3, #100	; 0x64
 80033d2:	9300      	str	r3, [sp, #0]
 80033d4:	2306      	movs	r3, #6
 80033d6:	4a4d      	ldr	r2, [pc, #308]	; (800350c <InterProcessorTask+0x254>)
 80033d8:	21e6      	movs	r1, #230	; 0xe6
 80033da:	484b      	ldr	r0, [pc, #300]	; (8003508 <InterProcessorTask+0x250>)
 80033dc:	f005 f8c2 	bl	8008564 <HAL_I2C_Master_Transmit>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1e5      	bne.n	80033b2 <InterProcessorTask+0xfa>
// 					evt = osThreadFlagsWait(0x00000010U, osFlagsWaitAny, osWaitForever);
 					// ensure I2C is disabled
// 					HAL_I2C_Master_Abort_IT(&hi2c1, SECONDARY_MCU_ADDRESS << 1);

 					// clear receiving flag
 					osThreadFlagsClear(0x00000008U);
 80033e6:	2008      	movs	r0, #8
 80033e8:	f00d f8ae 	bl	8010548 <osThreadFlagsClear>
 					// grab packet from secondary MCU
 					while(HAL_I2C_Master_Receive_IT(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &receivedPacket, sizeof(struct secondaryProcessorData)) != HAL_OK){
 80033ec:	e00e      	b.n	800340c <InterProcessorTask+0x154>
 						osSemaphoreRelease(messageI2C_LockHandle);
 80033ee:	4b44      	ldr	r3, [pc, #272]	; (8003500 <InterProcessorTask+0x248>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f00d fd2a 	bl	8010e4c <osSemaphoreRelease>
 						osDelay(100);
 80033f8:	2064      	movs	r0, #100	; 0x64
 80033fa:	f00d f989 	bl	8010710 <osDelay>
 						osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 80033fe:	4b40      	ldr	r3, [pc, #256]	; (8003500 <InterProcessorTask+0x248>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f04f 31ff 	mov.w	r1, #4294967295
 8003406:	4618      	mov	r0, r3
 8003408:	f00d fcba 	bl	8010d80 <osSemaphoreAcquire>
 					while(HAL_I2C_Master_Receive_IT(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &receivedPacket, sizeof(struct secondaryProcessorData)) != HAL_OK){
 800340c:	2358      	movs	r3, #88	; 0x58
 800340e:	4a41      	ldr	r2, [pc, #260]	; (8003514 <InterProcessorTask+0x25c>)
 8003410:	21e6      	movs	r1, #230	; 0xe6
 8003412:	483d      	ldr	r0, [pc, #244]	; (8003508 <InterProcessorTask+0x250>)
 8003414:	f005 fa90 	bl	8008938 <HAL_I2C_Master_Receive_IT>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1e7      	bne.n	80033ee <InterProcessorTask+0x136>
 					}
// 					taskEXIT_CRITICAL();
					// wait until packet is received
					evt = osThreadFlagsWait(0x0000000AU, osFlagsWaitAny, osWaitForever);
 800341e:	f04f 32ff 	mov.w	r2, #4294967295
 8003422:	2100      	movs	r1, #0
 8003424:	200a      	movs	r0, #10
 8003426:	f00d f8df 	bl	80105e8 <osThreadFlagsWait>
 800342a:	60f8      	str	r0, [r7, #12]
					// ensure I2C is disabled
//					HAL_I2C_Master_Abort_IT(&hi2c1, SECONDARY_MCU_ADDRESS << 1);

					osSemaphoreRelease(messageI2C_LockHandle);
 800342c:	4b34      	ldr	r3, [pc, #208]	; (8003500 <InterProcessorTask+0x248>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4618      	mov	r0, r3
 8003432:	f00d fd0b 	bl	8010e4c <osSemaphoreRelease>


//					evt = osThreadFlagsWait(0x00000002U, osFlagsWaitAny, 0);
					// if thread was told to stop, break from while loop!
					if( (evt & 0x00000002U) == 0x00000002U ) break;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f003 0302 	and.w	r3, r3, #2
 800343c:	2b00      	cmp	r3, #0
 800343e:	d15d      	bne.n	80034fc <InterProcessorTask+0x244>

					// package received data into 100ms chunks and put in queue
					parsedPacket.tick_ms = receivedPacket.tick_ms;
 8003440:	4b34      	ldr	r3, [pc, #208]	; (8003514 <InterProcessorTask+0x25c>)
 8003442:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003444:	4a34      	ldr	r2, [pc, #208]	; (8003518 <InterProcessorTask+0x260>)
 8003446:	6113      	str	r3, [r2, #16]
					parsedPacket.epoch = receivedPacket.epoch;
 8003448:	4b32      	ldr	r3, [pc, #200]	; (8003514 <InterProcessorTask+0x25c>)
 800344a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800344c:	4a32      	ldr	r2, [pc, #200]	; (8003518 <InterProcessorTask+0x260>)
 800344e:	6153      	str	r3, [r2, #20]

					for(int i = 0; i < 5; i++)
 8003450:	2300      	movs	r3, #0
 8003452:	60bb      	str	r3, [r7, #8]
 8003454:	e01c      	b.n	8003490 <InterProcessorTask+0x1d8>
					{
						memcpy(&parsedPacket.temple, &receivedPacket.temp.temple[i], sizeof(struct thermopileData));
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	00db      	lsls	r3, r3, #3
 800345a:	4a2e      	ldr	r2, [pc, #184]	; (8003514 <InterProcessorTask+0x25c>)
 800345c:	4413      	add	r3, r2
 800345e:	2208      	movs	r2, #8
 8003460:	4619      	mov	r1, r3
 8003462:	482d      	ldr	r0, [pc, #180]	; (8003518 <InterProcessorTask+0x260>)
 8003464:	f017 fa5e 	bl	801a924 <memcpy>
						memcpy(&parsedPacket.nose, &receivedPacket.temp.nose[i], sizeof(struct thermopileData));
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	3305      	adds	r3, #5
 800346c:	00db      	lsls	r3, r3, #3
 800346e:	4a29      	ldr	r2, [pc, #164]	; (8003514 <InterProcessorTask+0x25c>)
 8003470:	4413      	add	r3, r2
 8003472:	2208      	movs	r2, #8
 8003474:	4619      	mov	r1, r3
 8003476:	4829      	ldr	r0, [pc, #164]	; (800351c <InterProcessorTask+0x264>)
 8003478:	f017 fa54 	bl	801a924 <memcpy>

						// pass to master thread to handle
						osMessageQueuePut(interProcessorMsgQueueHandle, (void *) &parsedPacket, 0U, 0);
 800347c:	4b28      	ldr	r3, [pc, #160]	; (8003520 <InterProcessorTask+0x268>)
 800347e:	6818      	ldr	r0, [r3, #0]
 8003480:	2300      	movs	r3, #0
 8003482:	2200      	movs	r2, #0
 8003484:	4924      	ldr	r1, [pc, #144]	; (8003518 <InterProcessorTask+0x260>)
 8003486:	f00d fdbf 	bl	8011008 <osMessageQueuePut>
					for(int i = 0; i < 5; i++)
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	3301      	adds	r3, #1
 800348e:	60bb      	str	r3, [r7, #8]
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	2b04      	cmp	r3, #4
 8003494:	dddf      	ble.n	8003456 <InterProcessorTask+0x19e>

					}
				}

				// stop thread and clear queues
				if( (evt & 0x00000002U) == 0x00000002U){
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f003 0302 	and.w	r3, r3, #2
 800349c:	2b00      	cmp	r3, #0
 800349e:	f43f af74 	beq.w	800338a <InterProcessorTask+0xd2>

					/// clear transmission flag
// 					osThreadFlagsClear(0x00000010U);
					// tell secondary processor to stop logging (in blocking mode)
					osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 80034a2:	4b17      	ldr	r3, [pc, #92]	; (8003500 <InterProcessorTask+0x248>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f04f 31ff 	mov.w	r1, #4294967295
 80034aa:	4618      	mov	r0, r3
 80034ac:	f00d fc68 	bl	8010d80 <osSemaphoreAcquire>
					while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &nullMessage, sizeof(togLogMessageReceived), 100) != HAL_OK){
 80034b0:	e00e      	b.n	80034d0 <InterProcessorTask+0x218>
 						osSemaphoreRelease(messageI2C_LockHandle);
 80034b2:	4b13      	ldr	r3, [pc, #76]	; (8003500 <InterProcessorTask+0x248>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f00d fcc8 	bl	8010e4c <osSemaphoreRelease>
 						osDelay(100);
 80034bc:	2064      	movs	r0, #100	; 0x64
 80034be:	f00d f927 	bl	8010710 <osDelay>
 						osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 80034c2:	4b0f      	ldr	r3, [pc, #60]	; (8003500 <InterProcessorTask+0x248>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f04f 31ff 	mov.w	r1, #4294967295
 80034ca:	4618      	mov	r0, r3
 80034cc:	f00d fc58 	bl	8010d80 <osSemaphoreAcquire>
					while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &nullMessage, sizeof(togLogMessageReceived), 100) != HAL_OK){
 80034d0:	2364      	movs	r3, #100	; 0x64
 80034d2:	9300      	str	r3, [sp, #0]
 80034d4:	2306      	movs	r3, #6
 80034d6:	4a0b      	ldr	r2, [pc, #44]	; (8003504 <InterProcessorTask+0x24c>)
 80034d8:	21e6      	movs	r1, #230	; 0xe6
 80034da:	480b      	ldr	r0, [pc, #44]	; (8003508 <InterProcessorTask+0x250>)
 80034dc:	f005 f842 	bl	8008564 <HAL_I2C_Master_Transmit>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1e5      	bne.n	80034b2 <InterProcessorTask+0x1fa>
 					};
					osSemaphoreRelease(messageI2C_LockHandle);
 80034e6:	4b06      	ldr	r3, [pc, #24]	; (8003500 <InterProcessorTask+0x248>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f00d fcae 	bl	8010e4c <osSemaphoreRelease>
					// wait until transmit is complete
//					evt = osThreadFlagsWait(0x00000010U, osFlagsWaitAny, osWaitForever);

					// empty queue
					osMessageQueueReset(interProcessorMsgQueueHandle);
 80034f0:	4b0b      	ldr	r3, [pc, #44]	; (8003520 <InterProcessorTask+0x268>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f00d fe6d 	bl	80111d4 <osMessageQueueReset>

					break;
 80034fa:	e000      	b.n	80034fe <InterProcessorTask+0x246>
					if( (evt & 0x00000002U) == 0x00000002U ) break;
 80034fc:	bf00      	nop
		evt = osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 80034fe:	e708      	b.n	8003312 <InterProcessorTask+0x5a>
 8003500:	20027c50 	.word	0x20027c50
 8003504:	0801c2a8 	.word	0x0801c2a8
 8003508:	20028250 	.word	0x20028250
 800350c:	200286d4 	.word	0x200286d4
 8003510:	20027b50 	.word	0x20027b50
 8003514:	2002867c 	.word	0x2002867c
 8003518:	200286dc 	.word	0x200286dc
 800351c:	200286e4 	.word	0x200286e4
 8003520:	20027c60 	.word	0x20027c60

08003524 <HAL_I2C_MasterTxCpltCallback>:
//	osThreadFlagsSet(interProcessorTaskHandle, 0x00000008U);
//}

volatile uint8_t test_1 = 0;
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
	// notify sending thread that message has been sent
//	osThreadFlagsSet(sendMsgToMainTaskHandle, 0x00000001U);
	osThreadFlagsSet(interProcTaskHandle, 0x00000010U);
 800352c:	4b06      	ldr	r3, [pc, #24]	; (8003548 <HAL_I2C_MasterTxCpltCallback+0x24>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2110      	movs	r1, #16
 8003532:	4618      	mov	r0, r3
 8003534:	f00c ffa6 	bl	8010484 <osThreadFlagsSet>
	test_1 = 1;
 8003538:	4b04      	ldr	r3, [pc, #16]	; (800354c <HAL_I2C_MasterTxCpltCallback+0x28>)
 800353a:	2201      	movs	r2, #1
 800353c:	701a      	strb	r2, [r3, #0]
}
 800353e:	bf00      	nop
 8003540:	3708      	adds	r7, #8
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	20028094 	.word	0x20028094
 800354c:	20000c3f 	.word	0x20000c3f

08003550 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
	// notify receiving thread that a message has been received
	osThreadFlagsSet(interProcTaskHandle, 0x00000008U);
 8003558:	4b04      	ldr	r3, [pc, #16]	; (800356c <HAL_I2C_MasterRxCpltCallback+0x1c>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2108      	movs	r1, #8
 800355e:	4618      	mov	r0, r3
 8003560:	f00c ff90 	bl	8010484 <osThreadFlagsSet>
}
 8003564:	bf00      	nop
 8003566:	3708      	adds	r7, #8
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	20028094 	.word	0x20028094

08003570 <setup_LP5523>:
const uint8_t packet_array[9] = {LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN};
uint8_t deviceAddress;
uint8_t led_PWM[9] = {0};
uint8_t packet;

void setup_LP5523(uint8_t ADDR){
 8003570:	b580      	push	{r7, lr}
 8003572:	b086      	sub	sp, #24
 8003574:	af04      	add	r7, sp, #16
 8003576:	4603      	mov	r3, r0
 8003578:	71fb      	strb	r3, [r7, #7]

#ifndef DONGLE_CODE
	deviceAddress = ADDR << 1;
 800357a:	79fb      	ldrb	r3, [r7, #7]
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	b2da      	uxtb	r2, r3
 8003580:	4b2e      	ldr	r3, [pc, #184]	; (800363c <setup_LP5523+0xcc>)
 8003582:	701a      	strb	r2, [r3, #0]

	// enable chip
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003584:	4b2e      	ldr	r3, [pc, #184]	; (8003640 <setup_LP5523+0xd0>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f04f 31ff 	mov.w	r1, #4294967295
 800358c:	4618      	mov	r0, r3
 800358e:	f00d fbf7 	bl	8010d80 <osSemaphoreAcquire>
	packet = LP5525_CHIP_EN;
 8003592:	4b2c      	ldr	r3, [pc, #176]	; (8003644 <setup_LP5523+0xd4>)
 8003594:	2240      	movs	r2, #64	; 0x40
 8003596:	701a      	strb	r2, [r3, #0]
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_EN_CNTRL1_REG, 1, &packet, 1, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_EN_CNTRL1_REG, 1, &packet, 1, I2C_TIMEOUT);
 8003598:	4b28      	ldr	r3, [pc, #160]	; (800363c <setup_LP5523+0xcc>)
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	b299      	uxth	r1, r3
 800359e:	2364      	movs	r3, #100	; 0x64
 80035a0:	9302      	str	r3, [sp, #8]
 80035a2:	2301      	movs	r3, #1
 80035a4:	9301      	str	r3, [sp, #4]
 80035a6:	4b27      	ldr	r3, [pc, #156]	; (8003644 <setup_LP5523+0xd4>)
 80035a8:	9300      	str	r3, [sp, #0]
 80035aa:	2301      	movs	r3, #1
 80035ac:	2200      	movs	r2, #0
 80035ae:	4826      	ldr	r0, [pc, #152]	; (8003648 <setup_LP5523+0xd8>)
 80035b0:	f005 fa32 	bl	8008a18 <HAL_I2C_Mem_Write>

	// put charge-pump in auto-mode, serial auto increment, internal clock
	packet = CP_MODE_AUTO | EN_AUTO_INC | INT_CLK_EN;
 80035b4:	4b23      	ldr	r3, [pc, #140]	; (8003644 <setup_LP5523+0xd4>)
 80035b6:	224f      	movs	r2, #79	; 0x4f
 80035b8:	701a      	strb	r2, [r3, #0]
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_MISC_REG, 1, &packet, 1, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_MISC_REG, 1, &packet, 1, I2C_TIMEOUT);
 80035ba:	4b20      	ldr	r3, [pc, #128]	; (800363c <setup_LP5523+0xcc>)
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	b299      	uxth	r1, r3
 80035c0:	2364      	movs	r3, #100	; 0x64
 80035c2:	9302      	str	r3, [sp, #8]
 80035c4:	2301      	movs	r3, #1
 80035c6:	9301      	str	r3, [sp, #4]
 80035c8:	4b1e      	ldr	r3, [pc, #120]	; (8003644 <setup_LP5523+0xd4>)
 80035ca:	9300      	str	r3, [sp, #0]
 80035cc:	2301      	movs	r3, #1
 80035ce:	2236      	movs	r2, #54	; 0x36
 80035d0:	481d      	ldr	r0, [pc, #116]	; (8003648 <setup_LP5523+0xd8>)
 80035d2:	f005 fa21 	bl	8008a18 <HAL_I2C_Mem_Write>

	// set PWM level (0 to 255)
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_PWM_REG, 1, led_PWM, 9, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_PWM_REG, 1, led_PWM, 9, I2C_TIMEOUT);
 80035d6:	4b19      	ldr	r3, [pc, #100]	; (800363c <setup_LP5523+0xcc>)
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	b299      	uxth	r1, r3
 80035dc:	2364      	movs	r3, #100	; 0x64
 80035de:	9302      	str	r3, [sp, #8]
 80035e0:	2309      	movs	r3, #9
 80035e2:	9301      	str	r3, [sp, #4]
 80035e4:	4b19      	ldr	r3, [pc, #100]	; (800364c <setup_LP5523+0xdc>)
 80035e6:	9300      	str	r3, [sp, #0]
 80035e8:	2301      	movs	r3, #1
 80035ea:	2216      	movs	r2, #22
 80035ec:	4816      	ldr	r0, [pc, #88]	; (8003648 <setup_LP5523+0xd8>)
 80035ee:	f005 fa13 	bl	8008a18 <HAL_I2C_Mem_Write>

	// set current control (0 to 25.5 mA) - step size is 100uA
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CURRENT_CTRL_REG, 1, led_current, 9, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CURRENT_CTRL_REG, 1, led_current, 9, I2C_TIMEOUT);
 80035f2:	4b12      	ldr	r3, [pc, #72]	; (800363c <setup_LP5523+0xcc>)
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	b299      	uxth	r1, r3
 80035f8:	2364      	movs	r3, #100	; 0x64
 80035fa:	9302      	str	r3, [sp, #8]
 80035fc:	2309      	movs	r3, #9
 80035fe:	9301      	str	r3, [sp, #4]
 8003600:	4b13      	ldr	r3, [pc, #76]	; (8003650 <setup_LP5523+0xe0>)
 8003602:	9300      	str	r3, [sp, #0]
 8003604:	2301      	movs	r3, #1
 8003606:	2226      	movs	r2, #38	; 0x26
 8003608:	480f      	ldr	r0, [pc, #60]	; (8003648 <setup_LP5523+0xd8>)
 800360a:	f005 fa05 	bl	8008a18 <HAL_I2C_Mem_Write>

	// enable logarithmic dimming
//	packet = LOG_EN;
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CNTRL_REG, 1, packet_array, 9, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CNTRL_REG, 1, (uint8_t *) packet_array, 9, I2C_TIMEOUT);
 800360e:	4b0b      	ldr	r3, [pc, #44]	; (800363c <setup_LP5523+0xcc>)
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	b299      	uxth	r1, r3
 8003614:	2364      	movs	r3, #100	; 0x64
 8003616:	9302      	str	r3, [sp, #8]
 8003618:	2309      	movs	r3, #9
 800361a:	9301      	str	r3, [sp, #4]
 800361c:	4b0d      	ldr	r3, [pc, #52]	; (8003654 <setup_LP5523+0xe4>)
 800361e:	9300      	str	r3, [sp, #0]
 8003620:	2301      	movs	r3, #1
 8003622:	2206      	movs	r2, #6
 8003624:	4808      	ldr	r0, [pc, #32]	; (8003648 <setup_LP5523+0xd8>)
 8003626:	f005 f9f7 	bl	8008a18 <HAL_I2C_Mem_Write>

	osSemaphoreRelease(messageI2C_LockHandle);
 800362a:	4b05      	ldr	r3, [pc, #20]	; (8003640 <setup_LP5523+0xd0>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4618      	mov	r0, r3
 8003630:	f00d fc0c 	bl	8010e4c <osSemaphoreRelease>
#else
	BSP_LED_Init(LED_BLUE);
	BSP_LED_Init(LED_GREEN);
	BSP_LED_Init(LED_RED);
#endif
}
 8003634:	bf00      	nop
 8003636:	3708      	adds	r7, #8
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	200286f5 	.word	0x200286f5
 8003640:	20027c50 	.word	0x20027c50
 8003644:	200286f4 	.word	0x200286f4
 8003648:	20028250 	.word	0x20028250
 800364c:	20000c58 	.word	0x20000c58
 8003650:	2000006c 	.word	0x2000006c
 8003654:	0801c2b0 	.word	0x0801c2b0

08003658 <FrontLightsSet>:
//
//  return true;
//}


void FrontLightsSet(union ColorComplex *setColors){
 8003658:	b580      	push	{r7, lr}
 800365a:	b086      	sub	sp, #24
 800365c:	af04      	add	r7, sp, #16
 800365e:	6078      	str	r0, [r7, #4]

	memcpy(led_left_PWM, setColors, 9);
 8003660:	4b1b      	ldr	r3, [pc, #108]	; (80036d0 <FrontLightsSet+0x78>)
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	6810      	ldr	r0, [r2, #0]
 8003666:	6851      	ldr	r1, [r2, #4]
 8003668:	c303      	stmia	r3!, {r0, r1}
 800366a:	7a12      	ldrb	r2, [r2, #8]
 800366c:	701a      	strb	r2, [r3, #0]
	memcpy(led_right_PWM, &(setColors->color[9]), 9);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f103 0209 	add.w	r2, r3, #9
 8003674:	4b17      	ldr	r3, [pc, #92]	; (80036d4 <FrontLightsSet+0x7c>)
 8003676:	6810      	ldr	r0, [r2, #0]
 8003678:	6851      	ldr	r1, [r2, #4]
 800367a:	c303      	stmia	r3!, {r0, r1}
 800367c:	7a12      	ldrb	r2, [r2, #8]
 800367e:	701a      	strb	r2, [r3, #0]
#ifndef DONGLE_CODE
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003680:	4b15      	ldr	r3, [pc, #84]	; (80036d8 <FrontLightsSet+0x80>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f04f 31ff 	mov.w	r1, #4294967295
 8003688:	4618      	mov	r0, r3
 800368a:	f00d fb79 	bl	8010d80 <osSemaphoreAcquire>
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_LEFT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_left_PWM, 9, I2C_TIMEOUT);
 800368e:	2364      	movs	r3, #100	; 0x64
 8003690:	9302      	str	r3, [sp, #8]
 8003692:	2309      	movs	r3, #9
 8003694:	9301      	str	r3, [sp, #4]
 8003696:	4b0e      	ldr	r3, [pc, #56]	; (80036d0 <FrontLightsSet+0x78>)
 8003698:	9300      	str	r3, [sp, #0]
 800369a:	2301      	movs	r3, #1
 800369c:	2216      	movs	r2, #22
 800369e:	2168      	movs	r1, #104	; 0x68
 80036a0:	480e      	ldr	r0, [pc, #56]	; (80036dc <FrontLightsSet+0x84>)
 80036a2:	f005 f9b9 	bl	8008a18 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_RIGHT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_right_PWM, 9, I2C_TIMEOUT);
 80036a6:	2364      	movs	r3, #100	; 0x64
 80036a8:	9302      	str	r3, [sp, #8]
 80036aa:	2309      	movs	r3, #9
 80036ac:	9301      	str	r3, [sp, #4]
 80036ae:	4b09      	ldr	r3, [pc, #36]	; (80036d4 <FrontLightsSet+0x7c>)
 80036b0:	9300      	str	r3, [sp, #0]
 80036b2:	2301      	movs	r3, #1
 80036b4:	2216      	movs	r2, #22
 80036b6:	216a      	movs	r1, #106	; 0x6a
 80036b8:	4808      	ldr	r0, [pc, #32]	; (80036dc <FrontLightsSet+0x84>)
 80036ba:	f005 f9ad 	bl	8008a18 <HAL_I2C_Mem_Write>
	osSemaphoreRelease(messageI2C_LockHandle);
 80036be:	4b06      	ldr	r3, [pc, #24]	; (80036d8 <FrontLightsSet+0x80>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f00d fbc2 	bl	8010e4c <osSemaphoreRelease>
	    	else
	    	{
	    		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
	    	}
#endif
}
 80036c8:	bf00      	nop
 80036ca:	3708      	adds	r7, #8
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	20000c40 	.word	0x20000c40
 80036d4:	20000c4c 	.word	0x20000c4c
 80036d8:	20027c50 	.word	0x20027c50
 80036dc:	20028250 	.word	0x20028250

080036e0 <ThreadFrontLightsTask>:
    };

struct test_color tempComplexLight;

void ThreadFrontLightsTask(void *argument)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b08a      	sub	sp, #40	; 0x28
 80036e4:	af04      	add	r7, sp, #16
 80036e6:	6078      	str	r0, [r7, #4]

//	osDelay(1); // added delay because it seems that semaphores arent fully initialized and code stalls when releasing semaphore
//#ifndef DONGLE_CODE
	setup_LP5523(LIS3DH_LEFT_ADDRESS);
 80036e8:	2034      	movs	r0, #52	; 0x34
 80036ea:	f7ff ff41 	bl	8003570 <setup_LP5523>
	setup_LP5523(LIS3DH_RIGHT_ADDRESS);
 80036ee:	2035      	movs	r0, #53	; 0x35
 80036f0:	f7ff ff3e 	bl	8003570 <setup_LP5523>

	uint32_t lightsSimpleMessageReceived;

	while(1){

		lightsSimpleMessageReceived = 0;
 80036f4:	2300      	movs	r3, #0
 80036f6:	60fb      	str	r3, [r7, #12]
//		tempComplexLight.right_side_r = 150;
//		tempComplexLight.right_top_r = 150;
//
//		FrontLightsSet(&tempComplexLight);

		osDelay(1);
 80036f8:	2001      	movs	r0, #1
 80036fa:	f00d f809 	bl	8010710 <osDelay>

		osMessageQueueGet(lightsSimpleQueueHandle, &lightsSimpleMessageReceived, 0U, osWaitForever);
 80036fe:	4b2f      	ldr	r3, [pc, #188]	; (80037bc <ThreadFrontLightsTask+0xdc>)
 8003700:	6818      	ldr	r0, [r3, #0]
 8003702:	f107 010c 	add.w	r1, r7, #12
 8003706:	f04f 33ff 	mov.w	r3, #4294967295
 800370a:	2200      	movs	r2, #0
 800370c:	f00d fcf0 	bl	80110f0 <osMessageQueueGet>

		for(int i = 0; i<= 8; i++){
 8003710:	2300      	movs	r3, #0
 8003712:	617b      	str	r3, [r7, #20]
 8003714:	e011      	b.n	800373a <ThreadFrontLightsTask+0x5a>
			led_left_PWM[i] = (lightsSimpleMessageReceived & 0x01) * 255;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	b2db      	uxtb	r3, r3
 800371a:	f003 0301 	and.w	r3, r3, #1
 800371e:	b2db      	uxtb	r3, r3
 8003720:	425b      	negs	r3, r3
 8003722:	b2d9      	uxtb	r1, r3
 8003724:	4a26      	ldr	r2, [pc, #152]	; (80037c0 <ThreadFrontLightsTask+0xe0>)
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	4413      	add	r3, r2
 800372a:	460a      	mov	r2, r1
 800372c:	701a      	strb	r2, [r3, #0]
			lightsSimpleMessageReceived = lightsSimpleMessageReceived >> 1;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	085b      	lsrs	r3, r3, #1
 8003732:	60fb      	str	r3, [r7, #12]
		for(int i = 0; i<= 8; i++){
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	3301      	adds	r3, #1
 8003738:	617b      	str	r3, [r7, #20]
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	2b08      	cmp	r3, #8
 800373e:	ddea      	ble.n	8003716 <ThreadFrontLightsTask+0x36>
		}

		for(int i = 0; i<= 8; i++){
 8003740:	2300      	movs	r3, #0
 8003742:	613b      	str	r3, [r7, #16]
 8003744:	e011      	b.n	800376a <ThreadFrontLightsTask+0x8a>
			led_right_PWM[i] = (lightsSimpleMessageReceived & 0x01) * 255;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	b2db      	uxtb	r3, r3
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	b2db      	uxtb	r3, r3
 8003750:	425b      	negs	r3, r3
 8003752:	b2d9      	uxtb	r1, r3
 8003754:	4a1b      	ldr	r2, [pc, #108]	; (80037c4 <ThreadFrontLightsTask+0xe4>)
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	4413      	add	r3, r2
 800375a:	460a      	mov	r2, r1
 800375c:	701a      	strb	r2, [r3, #0]
			lightsSimpleMessageReceived = lightsSimpleMessageReceived >> 1;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	085b      	lsrs	r3, r3, #1
 8003762:	60fb      	str	r3, [r7, #12]
		for(int i = 0; i<= 8; i++){
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	3301      	adds	r3, #1
 8003768:	613b      	str	r3, [r7, #16]
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	2b08      	cmp	r3, #8
 800376e:	ddea      	ble.n	8003746 <ThreadFrontLightsTask+0x66>
		}

		osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003770:	4b15      	ldr	r3, [pc, #84]	; (80037c8 <ThreadFrontLightsTask+0xe8>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f04f 31ff 	mov.w	r1, #4294967295
 8003778:	4618      	mov	r0, r3
 800377a:	f00d fb01 	bl	8010d80 <osSemaphoreAcquire>
		HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_LEFT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_left_PWM, 9, I2C_TIMEOUT);
 800377e:	2364      	movs	r3, #100	; 0x64
 8003780:	9302      	str	r3, [sp, #8]
 8003782:	2309      	movs	r3, #9
 8003784:	9301      	str	r3, [sp, #4]
 8003786:	4b0e      	ldr	r3, [pc, #56]	; (80037c0 <ThreadFrontLightsTask+0xe0>)
 8003788:	9300      	str	r3, [sp, #0]
 800378a:	2301      	movs	r3, #1
 800378c:	2216      	movs	r2, #22
 800378e:	2168      	movs	r1, #104	; 0x68
 8003790:	480e      	ldr	r0, [pc, #56]	; (80037cc <ThreadFrontLightsTask+0xec>)
 8003792:	f005 f941 	bl	8008a18 <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_RIGHT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_right_PWM, 9, I2C_TIMEOUT);
 8003796:	2364      	movs	r3, #100	; 0x64
 8003798:	9302      	str	r3, [sp, #8]
 800379a:	2309      	movs	r3, #9
 800379c:	9301      	str	r3, [sp, #4]
 800379e:	4b09      	ldr	r3, [pc, #36]	; (80037c4 <ThreadFrontLightsTask+0xe4>)
 80037a0:	9300      	str	r3, [sp, #0]
 80037a2:	2301      	movs	r3, #1
 80037a4:	2216      	movs	r2, #22
 80037a6:	216a      	movs	r1, #106	; 0x6a
 80037a8:	4808      	ldr	r0, [pc, #32]	; (80037cc <ThreadFrontLightsTask+0xec>)
 80037aa:	f005 f935 	bl	8008a18 <HAL_I2C_Mem_Write>
		osSemaphoreRelease(messageI2C_LockHandle);
 80037ae:	4b06      	ldr	r3, [pc, #24]	; (80037c8 <ThreadFrontLightsTask+0xe8>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4618      	mov	r0, r3
 80037b4:	f00d fb4a 	bl	8010e4c <osSemaphoreRelease>
		lightsSimpleMessageReceived = 0;
 80037b8:	e79c      	b.n	80036f4 <ThreadFrontLightsTask+0x14>
 80037ba:	bf00      	nop
 80037bc:	20027c58 	.word	0x20027c58
 80037c0:	20000c40 	.word	0x20000c40
 80037c4:	20000c4c 	.word	0x20000c4c
 80037c8:	20027c50 	.word	0x20027c50
 80037cc:	20028250 	.word	0x20028250

080037d0 <LL_RCC_LSE_SetDriveCapability>:
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80037d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e0:	f023 0218 	bic.w	r2, r3, #24
 80037e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80037f0:	bf00      	nop
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003800:	f002 fab2 	bl	8005d68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003804:	f000 f822 	bl	800384c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003808:	f7ff f94e 	bl	8002aa8 <MX_GPIO_Init>
  MX_DMA_Init();
 800380c:	f7fe f96b 	bl	8001ae6 <MX_DMA_Init>
  MX_ADC1_Init();
 8003810:	f7fd fb16 	bl	8000e40 <MX_ADC1_Init>
  MX_RTC_Init();
 8003814:	f000 ff46 	bl	80046a4 <MX_RTC_Init>
  MX_TIM2_Init();
 8003818:	f001 fd14 	bl	8005244 <MX_TIM2_Init>
  MX_RF_Init();
 800381c:	f000 ff10 	bl	8004640 <MX_RF_Init>
  MX_I2C1_Init();
 8003820:	f7ff fb12 	bl	8002e48 <MX_I2C1_Init>
  MX_COMP1_Init();
 8003824:	f7fe f84c 	bl	80018c0 <MX_COMP1_Init>
  MX_TIM16_Init();
 8003828:	f001 fda2 	bl	8005370 <MX_TIM16_Init>
  MX_USB_Device_Init();
 800382c:	f015 ffd8 	bl	80197e0 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
  MX_TSC_Init();
 8003830:	f002 f9d8 	bl	8005be4 <MX_TSC_Init>

#ifndef BORDER_ROUTER_NODE
  USBD_Stop(&hUsbDeviceFS);
 8003834:	4804      	ldr	r0, [pc, #16]	; (8003848 <main+0x4c>)
 8003836:	f013 fbb0 	bl	8016f9a <USBD_Stop>
//  HAL_IWDG_Refresh(&hiwdg);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800383a:	f00c fd13 	bl	8010264 <osKernelInitialize>
  MX_FREERTOS_Init();
 800383e:	f7fd fd47 	bl	80012d0 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8003842:	f00c fd43 	bl	80102cc <osKernelStart>
//	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
//
//	// start timer
//	HAL_TIM_Base_Start(&htim2);

  while (1)
 8003846:	e7fe      	b.n	8003846 <main+0x4a>
 8003848:	20028a28 	.word	0x20028a28

0800384c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b0ae      	sub	sp, #184	; 0xb8
 8003850:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003852:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003856:	2248      	movs	r2, #72	; 0x48
 8003858:	2100      	movs	r1, #0
 800385a:	4618      	mov	r0, r3
 800385c:	f017 f86d 	bl	801a93a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003860:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003864:	2200      	movs	r2, #0
 8003866:	601a      	str	r2, [r3, #0]
 8003868:	605a      	str	r2, [r3, #4]
 800386a:	609a      	str	r2, [r3, #8]
 800386c:	60da      	str	r2, [r3, #12]
 800386e:	611a      	str	r2, [r3, #16]
 8003870:	615a      	str	r2, [r3, #20]
 8003872:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003874:	1d3b      	adds	r3, r7, #4
 8003876:	2250      	movs	r2, #80	; 0x50
 8003878:	2100      	movs	r1, #0
 800387a:	4618      	mov	r0, r3
 800387c:	f017 f85d 	bl	801a93a <memset>

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV2);
 8003880:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800388a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800388e:	f043 0310 	orr.w	r3, r3, #16
 8003892:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8003894:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800389e:	f043 0303 	orr.w	r3, r3, #3
 80038a2:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80038a4:	f007 fd82 	bl	800b3ac <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80038a8:	2000      	movs	r0, #0
 80038aa:	f7ff ff91 	bl	80037d0 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80038ae:	4b39      	ldr	r3, [pc, #228]	; (8003994 <SystemClock_Config+0x148>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80038b6:	4a37      	ldr	r2, [pc, #220]	; (8003994 <SystemClock_Config+0x148>)
 80038b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038bc:	6013      	str	r3, [r2, #0]
 80038be:	4b35      	ldr	r3, [pc, #212]	; (8003994 <SystemClock_Config+0x148>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80038c6:	603b      	str	r3, [r7, #0]
 80038c8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80038ca:	2307      	movs	r3, #7
 80038cc:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80038ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038d2:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80038d4:	2301      	movs	r3, #1
 80038d6:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80038d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038dc:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80038de:	2340      	movs	r3, #64	; 0x40
 80038e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80038e4:	2300      	movs	r3, #0
 80038e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80038ea:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80038ee:	4618      	mov	r0, r3
 80038f0:	f008 f90c 	bl	800bb0c <HAL_RCC_OscConfig>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d001      	beq.n	80038fe <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80038fa:	f000 f85f 	bl	80039bc <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80038fe:	236f      	movs	r3, #111	; 0x6f
 8003900:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8003902:	2302      	movs	r3, #2
 8003904:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003906:	2300      	movs	r3, #0
 8003908:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800390a:	2300      	movs	r3, #0
 800390c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800390e:	2300      	movs	r3, #0
 8003910:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8003912:	2300      	movs	r3, #0
 8003914:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8003916:	2300      	movs	r3, #0
 8003918:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800391a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800391e:	2101      	movs	r1, #1
 8003920:	4618      	mov	r0, r3
 8003922:	f008 fc7f 	bl	800c224 <HAL_RCC_ClockConfig>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d001      	beq.n	8003930 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 800392c:	f000 f846 	bl	80039bc <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8003930:	f643 5304 	movw	r3, #15620	; 0x3d04
 8003934:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 8003936:	2306      	movs	r3, #6
 8003938:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800393a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800393e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8003940:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003944:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8003946:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800394a:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 800394c:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 8003950:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003952:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8003956:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8003958:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800395c:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800395e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003962:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003964:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003968:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 800396a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800396e:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8003970:	2300      	movs	r3, #0
 8003972:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8003974:	2310      	movs	r3, #16
 8003976:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003978:	1d3b      	adds	r3, r7, #4
 800397a:	4618      	mov	r0, r3
 800397c:	f009 f8ad 	bl	800cada <HAL_RCCEx_PeriphCLKConfig>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <SystemClock_Config+0x13e>
  {
    Error_Handler();
 8003986:	f000 f819 	bl	80039bc <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800398a:	bf00      	nop
 800398c:	37b8      	adds	r7, #184	; 0xb8
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	58000400 	.word	0x58000400

08003998 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a04      	ldr	r2, [pc, #16]	; (80039b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d101      	bne.n	80039ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80039aa:	f002 f9fd 	bl	8005da8 <HAL_IncTick>
//	 HAL_GPIO_WritePin(DONGLE_DEBUG_PIN_GPIO_Port, DONGLE_DEBUG_PIN_Pin, GPIO_PIN_RESET);
//  }
//#endif
//}
  /* USER CODE END Callback 1 */
}
 80039ae:	bf00      	nop
 80039b0:	3708      	adds	r7, #8
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	40012c00 	.word	0x40012c00

080039bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80039bc:	b480      	push	{r7}
 80039be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80039c0:	bf00      	nop
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
	...

080039cc <MasterThreadTask>:
uint32_t startTime = 0;
uint32_t viveStateVar = 0;
uint64_t waitTime = 0;
uint32_t lightsSimpleMessageAck = 0;

void MasterThreadTask(void *argument) {
 80039cc:	b590      	push	{r4, r7, lr}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af02      	add	r7, sp, #8
 80039d2:	6078      	str	r0, [r7, #4]
#endif

	while (1) {
		// check if the queue has a new message (a command to start/stop logging)
		//   .... this function waits forever
		osMessageQueueGet(togLoggingQueueHandle, &togLogMessageReceived, 0U,
 80039d4:	4b81      	ldr	r3, [pc, #516]	; (8003bdc <MasterThreadTask+0x210>)
 80039d6:	6818      	ldr	r0, [r3, #0]
 80039d8:	f04f 33ff 	mov.w	r3, #4294967295
 80039dc:	2200      	movs	r2, #0
 80039de:	4980      	ldr	r1, [pc, #512]	; (8003be0 <MasterThreadTask+0x214>)
 80039e0:	f00d fb86 	bl	80110f0 <osMessageQueueGet>
#endif



		// pass variable to share system state
		osMessageQueueReset(statusQueueHandle);
 80039e4:	4b7f      	ldr	r3, [pc, #508]	; (8003be4 <MasterThreadTask+0x218>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4618      	mov	r0, r3
 80039ea:	f00d fbf3 	bl	80111d4 <osMessageQueueReset>
		osMessageQueuePut(statusQueueHandle, (void*) &nullStatusMessage, 0U, 0);
 80039ee:	4b7d      	ldr	r3, [pc, #500]	; (8003be4 <MasterThreadTask+0x218>)
 80039f0:	6818      	ldr	r0, [r3, #0]
 80039f2:	2300      	movs	r3, #0
 80039f4:	2200      	movs	r2, #0
 80039f6:	497c      	ldr	r1, [pc, #496]	; (8003be8 <MasterThreadTask+0x21c>)
 80039f8:	f00d fb06 	bl	8011008 <osMessageQueuePut>

		// if the received command enables logging
		//    otherwise, skip if statement and wait for an enabling command
		if (logEnabled == 0 && togLogMessageReceived.logStatus == ENABLE_LOG) {
 80039fc:	4b7b      	ldr	r3, [pc, #492]	; (8003bec <MasterThreadTask+0x220>)
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	f040 8083 	bne.w	8003b0c <MasterThreadTask+0x140>
 8003a06:	4b76      	ldr	r3, [pc, #472]	; (8003be0 <MasterThreadTask+0x214>)
 8003a08:	785b      	ldrb	r3, [r3, #1]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d17e      	bne.n	8003b0c <MasterThreadTask+0x140>
			logEnabled = 1;
 8003a0e:	4b77      	ldr	r3, [pc, #476]	; (8003bec <MasterThreadTask+0x220>)
 8003a10:	2201      	movs	r2, #1
 8003a12:	701a      	strb	r2, [r3, #0]

			// keep record of this message so new message doesn't overwrite
			memcpy(&prevLogMessage, &togLogMessageReceived, sizeof(struct LogMessage));
 8003a14:	4b76      	ldr	r3, [pc, #472]	; (8003bf0 <MasterThreadTask+0x224>)
 8003a16:	4a72      	ldr	r2, [pc, #456]	; (8003be0 <MasterThreadTask+0x214>)
 8003a18:	6811      	ldr	r1, [r2, #0]
 8003a1a:	6019      	str	r1, [r3, #0]
 8003a1c:	8892      	ldrh	r2, [r2, #4]
 8003a1e:	809a      	strh	r2, [r3, #4]

			// start all sensor subsystems
			masterEnterRoutine();
 8003a20:	f000 f97e 	bl	8003d20 <masterEnterRoutine>

			// add a delay to ensure all threads are given enough time to collect initial samples
			osDelay(500);
 8003a24:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003a28:	f00c fe72 	bl	8010710 <osDelay>

			while (1) {
				startTime = HAL_GetTick();
 8003a2c:	f002 f9d0 	bl	8005dd0 <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	4b70      	ldr	r3, [pc, #448]	; (8003bf4 <MasterThreadTask+0x228>)
 8003a34:	601a      	str	r2, [r3, #0]
				/**********************************************************************************/
				/*.... WAIT UNTIL DATA PACKET IS READY.....*/
				/**********************************************************************************/

				// grab data from sensor thread queues
				grabSensorData();
 8003a36:	f000 f8f5 	bl	8003c24 <grabSensorData>

				// add all sensor data into a packet
				packetizeData(&sensorPacket, &blinkMsgReceived, &secondaryProcessorMsgReceived, &inertialMsgReceived,
 8003a3a:	4b6f      	ldr	r3, [pc, #444]	; (8003bf8 <MasterThreadTask+0x22c>)
 8003a3c:	9300      	str	r3, [sp, #0]
 8003a3e:	4b6f      	ldr	r3, [pc, #444]	; (8003bfc <MasterThreadTask+0x230>)
 8003a40:	4a6f      	ldr	r2, [pc, #444]	; (8003c00 <MasterThreadTask+0x234>)
 8003a42:	4970      	ldr	r1, [pc, #448]	; (8003c04 <MasterThreadTask+0x238>)
 8003a44:	4870      	ldr	r0, [pc, #448]	; (8003c08 <MasterThreadTask+0x23c>)
 8003a46:	f000 f9f3 	bl	8003e30 <packetizeData>

				/**********************************************************************************/
				/*.... SEND PACKET TO BORDER ROUTER .....*/
				/**********************************************************************************/

				APP_THREAD_SendBorderPacket(&sensorPacket);
 8003a4a:	486f      	ldr	r0, [pc, #444]	; (8003c08 <MasterThreadTask+0x23c>)
 8003a4c:	f014 fec2 	bl	80187d4 <APP_THREAD_SendBorderPacket>
				/*.... CHECK IF NODE HAS BEEN REQUESTED TO STOP .....*/
				/**********************************************************************************/

				// check if the queue has a new message (potentially a command to stop logging)
				//   otherwise, timeout
				if (osMessageQueueGet(togLoggingQueueHandle, &togLogMessageReceived, 0U, 0) == osOK) {
 8003a50:	4b62      	ldr	r3, [pc, #392]	; (8003bdc <MasterThreadTask+0x210>)
 8003a52:	6818      	ldr	r0, [r3, #0]
 8003a54:	2300      	movs	r3, #0
 8003a56:	2200      	movs	r2, #0
 8003a58:	4961      	ldr	r1, [pc, #388]	; (8003be0 <MasterThreadTask+0x214>)
 8003a5a:	f00d fb49 	bl	80110f0 <osMessageQueueGet>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d12c      	bne.n	8003abe <MasterThreadTask+0xf2>
					// disable threads
					if (togLogMessageReceived.status == DISABLE_SENSING) {
 8003a64:	4b5e      	ldr	r3, [pc, #376]	; (8003be0 <MasterThreadTask+0x214>)
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d106      	bne.n	8003a7a <MasterThreadTask+0xae>

						masterExitRoutine();
 8003a6c:	f000 f9a6 	bl	8003dbc <masterExitRoutine>
						logEnabled = 0;
 8003a70:	4b5e      	ldr	r3, [pc, #376]	; (8003bec <MasterThreadTask+0x220>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	701a      	strb	r2, [r3, #0]
						// break out of first while loop and wait until told to start logging again
						break;
 8003a76:	bf00      	nop
		if (logEnabled == 0 && togLogMessageReceived.logStatus == ENABLE_LOG) {
 8003a78:	e0ae      	b.n	8003bd8 <MasterThreadTask+0x20c>
					}

					else if (togLogMessageReceived.status == TARE_NOW){
 8003a7a:	4b59      	ldr	r3, [pc, #356]	; (8003be0 <MasterThreadTask+0x214>)
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	2b03      	cmp	r3, #3
 8003a80:	d11d      	bne.n	8003abe <MasterThreadTask+0xf2>
						lightsSimpleMessageAck = 0x03; // cyan (green + blue)
 8003a82:	4b62      	ldr	r3, [pc, #392]	; (8003c0c <MasterThreadTask+0x240>)
 8003a84:	2203      	movs	r2, #3
 8003a86:	601a      	str	r2, [r3, #0]
						osMessageQueuePut(lightsSimpleQueueHandle, &lightsSimpleMessageAck, 0U, 0);
 8003a88:	4b61      	ldr	r3, [pc, #388]	; (8003c10 <MasterThreadTask+0x244>)
 8003a8a:	6818      	ldr	r0, [r3, #0]
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	2200      	movs	r2, #0
 8003a90:	495e      	ldr	r1, [pc, #376]	; (8003c0c <MasterThreadTask+0x240>)
 8003a92:	f00d fab9 	bl	8011008 <osMessageQueuePut>

						IMU_sendTareNow();
 8003a96:	f7fe fbc3 	bl	8002220 <IMU_sendTareNow>

						osDelay(100);
 8003a9a:	2064      	movs	r0, #100	; 0x64
 8003a9c:	f00c fe38 	bl	8010710 <osDelay>

						IMU_sendPersistTare();
 8003aa0:	f7fe fbf4 	bl	800228c <IMU_sendPersistTare>

						osDelay(100);
 8003aa4:	2064      	movs	r0, #100	; 0x64
 8003aa6:	f00c fe33 	bl	8010710 <osDelay>

						lightsSimpleMessageAck = 0;
 8003aaa:	4b58      	ldr	r3, [pc, #352]	; (8003c0c <MasterThreadTask+0x240>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	601a      	str	r2, [r3, #0]
						osMessageQueuePut(lightsSimpleQueueHandle, &lightsSimpleMessageAck, 0U, 0);
 8003ab0:	4b57      	ldr	r3, [pc, #348]	; (8003c10 <MasterThreadTask+0x244>)
 8003ab2:	6818      	ldr	r0, [r3, #0]
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	4954      	ldr	r1, [pc, #336]	; (8003c0c <MasterThreadTask+0x240>)
 8003aba:	f00d faa5 	bl	8011008 <osMessageQueuePut>
					}
				}

				// add delay to wait for next transmission period
				waitTime = PACKET_SEND_PERIOD - (HAL_GetTick() - startTime);
 8003abe:	4b4d      	ldr	r3, [pc, #308]	; (8003bf4 <MasterThreadTask+0x228>)
 8003ac0:	681c      	ldr	r4, [r3, #0]
 8003ac2:	f002 f985 	bl	8005dd0 <HAL_GetTick>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	1ae3      	subs	r3, r4, r3
 8003aca:	3364      	adds	r3, #100	; 0x64
 8003acc:	f04f 0400 	mov.w	r4, #0
 8003ad0:	4a50      	ldr	r2, [pc, #320]	; (8003c14 <MasterThreadTask+0x248>)
 8003ad2:	e9c2 3400 	strd	r3, r4, [r2]
				// if wait time is less than zero (i.e. the border packet send took longer than PACKET_SEND_PERIOD)
				// or greater than the allotted PACKET_SEND_PERIOD
				if( (waitTime <= 0) || (waitTime > PACKET_SEND_PERIOD)){
 8003ad6:	4b4f      	ldr	r3, [pc, #316]	; (8003c14 <MasterThreadTask+0x248>)
 8003ad8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003adc:	4323      	orrs	r3, r4
 8003ade:	d006      	beq.n	8003aee <MasterThreadTask+0x122>
 8003ae0:	4b4c      	ldr	r3, [pc, #304]	; (8003c14 <MasterThreadTask+0x248>)
 8003ae2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003ae6:	2c00      	cmp	r4, #0
 8003ae8:	bf08      	it	eq
 8003aea:	2b65      	cmpeq	r3, #101	; 0x65
 8003aec:	d307      	bcc.n	8003afe <MasterThreadTask+0x132>
					waitTime = 0; //set to zero (i.e. dont wait)
 8003aee:	4a49      	ldr	r2, [pc, #292]	; (8003c14 <MasterThreadTask+0x248>)
 8003af0:	f04f 0300 	mov.w	r3, #0
 8003af4:	f04f 0400 	mov.w	r4, #0
 8003af8:	e9c2 3400 	strd	r3, r4, [r2]
 8003afc:	e005      	b.n	8003b0a <MasterThreadTask+0x13e>
				}
				else{
					osDelay(waitTime);
 8003afe:	4b45      	ldr	r3, [pc, #276]	; (8003c14 <MasterThreadTask+0x248>)
 8003b00:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f00c fe03 	bl	8010710 <osDelay>
				startTime = HAL_GetTick();
 8003b0a:	e78f      	b.n	8003a2c <MasterThreadTask+0x60>
				}

			}
		}
		else if (logEnabled == 1 && togLogMessageReceived.logStatus == DISABLE_LOG) {
 8003b0c:	4b37      	ldr	r3, [pc, #220]	; (8003bec <MasterThreadTask+0x220>)
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d109      	bne.n	8003b28 <MasterThreadTask+0x15c>
 8003b14:	4b32      	ldr	r3, [pc, #200]	; (8003be0 <MasterThreadTask+0x214>)
 8003b16:	785b      	ldrb	r3, [r3, #1]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d105      	bne.n	8003b28 <MasterThreadTask+0x15c>
			logEnabled = 0;
 8003b1c:	4b33      	ldr	r3, [pc, #204]	; (8003bec <MasterThreadTask+0x220>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	701a      	strb	r2, [r3, #0]
			masterExitRoutine();
 8003b22:	f000 f94b 	bl	8003dbc <masterExitRoutine>
 8003b26:	e057      	b.n	8003bd8 <MasterThreadTask+0x20c>
		}
		else if (lightLabDemoEnabled == 0 && togLogMessageReceived.status == LIGHT_LAB_DEMO){
 8003b28:	4b3b      	ldr	r3, [pc, #236]	; (8003c18 <MasterThreadTask+0x24c>)
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d141      	bne.n	8003bb4 <MasterThreadTask+0x1e8>
 8003b30:	4b2b      	ldr	r3, [pc, #172]	; (8003be0 <MasterThreadTask+0x214>)
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d13d      	bne.n	8003bb4 <MasterThreadTask+0x1e8>
			// keep record of this message so new message doesn't overwrite
			memcpy(&prevLogMessage, &togLogMessageReceived, sizeof(struct LogMessage));
 8003b38:	4b2d      	ldr	r3, [pc, #180]	; (8003bf0 <MasterThreadTask+0x224>)
 8003b3a:	4a29      	ldr	r2, [pc, #164]	; (8003be0 <MasterThreadTask+0x214>)
 8003b3c:	6811      	ldr	r1, [r2, #0]
 8003b3e:	6019      	str	r1, [r3, #0]
 8003b40:	8892      	ldrh	r2, [r2, #4]
 8003b42:	809a      	strh	r2, [r3, #4]

			// if requesting another feature to be enabled but the logging is still enabled
			if(logEnabled == 1){
 8003b44:	4b29      	ldr	r3, [pc, #164]	; (8003bec <MasterThreadTask+0x220>)
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d104      	bne.n	8003b56 <MasterThreadTask+0x18a>
				logEnabled = 0;
 8003b4c:	4b27      	ldr	r3, [pc, #156]	; (8003bec <MasterThreadTask+0x220>)
 8003b4e:	2200      	movs	r2, #0
 8003b50:	701a      	strb	r2, [r3, #0]
				masterExitRoutine();
 8003b52:	f000 f933 	bl	8003dbc <masterExitRoutine>
			}

			lightLabDemoEnabled = LIGHT_LAB_DEMO;
 8003b56:	4b30      	ldr	r3, [pc, #192]	; (8003c18 <MasterThreadTask+0x24c>)
 8003b58:	2202      	movs	r2, #2
 8003b5a:	701a      	strb	r2, [r3, #0]

			// enable functionality
			osSemaphoreAcquire(lightingLabDemoEndHandle, 0);
 8003b5c:	4b2f      	ldr	r3, [pc, #188]	; (8003c1c <MasterThreadTask+0x250>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2100      	movs	r1, #0
 8003b62:	4618      	mov	r0, r3
 8003b64:	f00d f90c 	bl	8010d80 <osSemaphoreAcquire>
			viveStateVar = lightLabDemoEnabled;
 8003b68:	4b2b      	ldr	r3, [pc, #172]	; (8003c18 <MasterThreadTask+0x24c>)
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	4b2c      	ldr	r3, [pc, #176]	; (8003c20 <MasterThreadTask+0x254>)
 8003b70:	601a      	str	r2, [r3, #0]

			// start all sensor subsystems
			masterEnterRoutine();
 8003b72:	f000 f8d5 	bl	8003d20 <masterEnterRoutine>

			// add a delay to ensure all threads are given enough time to collect initial samples
			osDelay(500);
 8003b76:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003b7a:	f00c fdc9 	bl	8010710 <osDelay>

			while(1){
				if (osMessageQueueGet(togLoggingQueueHandle, &togLogMessageReceived, 0U, osWaitForever) == osOK) {
 8003b7e:	4b17      	ldr	r3, [pc, #92]	; (8003bdc <MasterThreadTask+0x210>)
 8003b80:	6818      	ldr	r0, [r3, #0]
 8003b82:	f04f 33ff 	mov.w	r3, #4294967295
 8003b86:	2200      	movs	r2, #0
 8003b88:	4915      	ldr	r1, [pc, #84]	; (8003be0 <MasterThreadTask+0x214>)
 8003b8a:	f00d fab1 	bl	80110f0 <osMessageQueueGet>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d1f4      	bne.n	8003b7e <MasterThreadTask+0x1b2>
					// disable threads
					if (togLogMessageReceived.status == DISABLE_SENSING) {
 8003b94:	4b12      	ldr	r3, [pc, #72]	; (8003be0 <MasterThreadTask+0x214>)
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1f0      	bne.n	8003b7e <MasterThreadTask+0x1b2>

						osSemaphoreRelease(lightingLabDemoEndHandle);
 8003b9c:	4b1f      	ldr	r3, [pc, #124]	; (8003c1c <MasterThreadTask+0x250>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f00d f953 	bl	8010e4c <osSemaphoreRelease>
						masterExitRoutine();
 8003ba6:	f000 f909 	bl	8003dbc <masterExitRoutine>
						lightLabDemoEnabled = 0;
 8003baa:	4b1b      	ldr	r3, [pc, #108]	; (8003c18 <MasterThreadTask+0x24c>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	701a      	strb	r2, [r3, #0]
						// break out of first while loop and wait until told to start logging again
						break;
 8003bb0:	bf00      	nop
		else if (lightLabDemoEnabled == 0 && togLogMessageReceived.status == LIGHT_LAB_DEMO){
 8003bb2:	e011      	b.n	8003bd8 <MasterThreadTask+0x20c>
					}
				}
			}
		}
		else if ((lightLabDemoEnabled == LIGHT_LAB_DEMO) && (togLogMessageReceived.status == DISABLE_LOG)){
 8003bb4:	4b18      	ldr	r3, [pc, #96]	; (8003c18 <MasterThreadTask+0x24c>)
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	f47f af0b 	bne.w	80039d4 <MasterThreadTask+0x8>
 8003bbe:	4b08      	ldr	r3, [pc, #32]	; (8003be0 <MasterThreadTask+0x214>)
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	f47f af06 	bne.w	80039d4 <MasterThreadTask+0x8>

			osSemaphoreRelease(lightingLabDemoEndHandle);
 8003bc8:	4b14      	ldr	r3, [pc, #80]	; (8003c1c <MasterThreadTask+0x250>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f00d f93d 	bl	8010e4c <osSemaphoreRelease>


			lightLabDemoEnabled = 0;
 8003bd2:	4b11      	ldr	r3, [pc, #68]	; (8003c18 <MasterThreadTask+0x24c>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	701a      	strb	r2, [r3, #0]
		osMessageQueueGet(togLoggingQueueHandle, &togLogMessageReceived, 0U,
 8003bd8:	e6fc      	b.n	80039d4 <MasterThreadTask+0x8>
 8003bda:	bf00      	nop
 8003bdc:	20028088 	.word	0x20028088
 8003be0:	20027b50 	.word	0x20027b50
 8003be4:	20027c64 	.word	0x20027c64
 8003be8:	0801c2bc 	.word	0x0801c2bc
 8003bec:	20000c61 	.word	0x20000c61
 8003bf0:	20027c28 	.word	0x20027c28
 8003bf4:	20000c64 	.word	0x20000c64
 8003bf8:	20028778 	.word	0x20028778
 8003bfc:	20028790 	.word	0x20028790
 8003c00:	200287cc 	.word	0x200287cc
 8003c04:	2002870c 	.word	0x2002870c
 8003c08:	20027b5c 	.word	0x20027b5c
 8003c0c:	20000c78 	.word	0x20000c78
 8003c10:	20027c58 	.word	0x20027c58
 8003c14:	20000c70 	.word	0x20000c70
 8003c18:	20000c62 	.word	0x20000c62
 8003c1c:	20027c5c 	.word	0x20027c5c
 8003c20:	20000c68 	.word	0x20000c68

08003c24 <grabSensorData>:
		}

	}
}

void grabSensorData(void) {
 8003c24:	b5b0      	push	{r4, r5, r7, lr}
 8003c26:	af00      	add	r7, sp, #0
	if (prevLogMessage.blinkEnabled == SENSOR_ENABLE) {
 8003c28:	4b30      	ldr	r3, [pc, #192]	; (8003cec <grabSensorData+0xc8>)
 8003c2a:	789b      	ldrb	r3, [r3, #2]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d111      	bne.n	8003c54 <grabSensorData+0x30>
		if (osOK != osMessageQueueGet(blinkMsgQueueHandle, &blinkMsgReceived, 0U, 0)) {
 8003c30:	4b2f      	ldr	r3, [pc, #188]	; (8003cf0 <grabSensorData+0xcc>)
 8003c32:	6818      	ldr	r0, [r3, #0]
 8003c34:	2300      	movs	r3, #0
 8003c36:	2200      	movs	r2, #0
 8003c38:	492e      	ldr	r1, [pc, #184]	; (8003cf4 <grabSensorData+0xd0>)
 8003c3a:	f00d fa59 	bl	80110f0 <osMessageQueueGet>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d007      	beq.n	8003c54 <grabSensorData+0x30>
			memcpy(&blinkMsgReceived, &nullBlinkMsg, sizeof(struct blinkData));
 8003c44:	4a2b      	ldr	r2, [pc, #172]	; (8003cf4 <grabSensorData+0xd0>)
 8003c46:	4b2c      	ldr	r3, [pc, #176]	; (8003cf8 <grabSensorData+0xd4>)
 8003c48:	4610      	mov	r0, r2
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	236c      	movs	r3, #108	; 0x6c
 8003c4e:	461a      	mov	r2, r3
 8003c50:	f016 fe68 	bl	801a924 <memcpy>
		}
	}

	if ((prevLogMessage.tempEnabled == SENSOR_ENABLE)) {
 8003c54:	4b25      	ldr	r3, [pc, #148]	; (8003cec <grabSensorData+0xc8>)
 8003c56:	78db      	ldrb	r3, [r3, #3]
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d113      	bne.n	8003c84 <grabSensorData+0x60>
		if (osOK != osMessageQueueGet(interProcessorMsgQueueHandle, &secondaryProcessorMsgReceived, 0U, 0)) {
 8003c5c:	4b27      	ldr	r3, [pc, #156]	; (8003cfc <grabSensorData+0xd8>)
 8003c5e:	6818      	ldr	r0, [r3, #0]
 8003c60:	2300      	movs	r3, #0
 8003c62:	2200      	movs	r2, #0
 8003c64:	4926      	ldr	r1, [pc, #152]	; (8003d00 <grabSensorData+0xdc>)
 8003c66:	f00d fa43 	bl	80110f0 <osMessageQueueGet>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d009      	beq.n	8003c84 <grabSensorData+0x60>
			memcpy(&secondaryProcessorMsgReceived, &nullSecondaryProcessorMsgReceived,
 8003c70:	4a23      	ldr	r2, [pc, #140]	; (8003d00 <grabSensorData+0xdc>)
 8003c72:	4b24      	ldr	r3, [pc, #144]	; (8003d04 <grabSensorData+0xe0>)
 8003c74:	4614      	mov	r4, r2
 8003c76:	461d      	mov	r5, r3
 8003c78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c7c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003c80:	e884 0003 	stmia.w	r4, {r0, r1}
					sizeof(struct parsedSecondaryProcessorPacket));
		}
	}

	if ((prevLogMessage.positionEnabled == SENSOR_ENABLE)) {
 8003c84:	4b19      	ldr	r3, [pc, #100]	; (8003cec <grabSensorData+0xc8>)
 8003c86:	795b      	ldrb	r3, [r3, #5]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d113      	bne.n	8003cb4 <grabSensorData+0x90>
		if (osOK != osMessageQueueGet(viveQueueHandle, &vive_loc, 0U, 0)) {
 8003c8c:	4b1e      	ldr	r3, [pc, #120]	; (8003d08 <grabSensorData+0xe4>)
 8003c8e:	6818      	ldr	r0, [r3, #0]
 8003c90:	2300      	movs	r3, #0
 8003c92:	2200      	movs	r2, #0
 8003c94:	491d      	ldr	r1, [pc, #116]	; (8003d0c <grabSensorData+0xe8>)
 8003c96:	f00d fa2b 	bl	80110f0 <osMessageQueueGet>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d009      	beq.n	8003cb4 <grabSensorData+0x90>
			memcpy(&vive_loc, &nullViveMsgReceived, sizeof(VIVEVars));
 8003ca0:	4a1a      	ldr	r2, [pc, #104]	; (8003d0c <grabSensorData+0xe8>)
 8003ca2:	4b1b      	ldr	r3, [pc, #108]	; (8003d10 <grabSensorData+0xec>)
 8003ca4:	4614      	mov	r4, r2
 8003ca6:	461d      	mov	r5, r3
 8003ca8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003caa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003cac:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003cb0:	e884 0003 	stmia.w	r4, {r0, r1}

		}
	}

	if ((prevLogMessage.intertialEnabled == SENSOR_ENABLE)) {
 8003cb4:	4b0d      	ldr	r3, [pc, #52]	; (8003cec <grabSensorData+0xc8>)
 8003cb6:	791b      	ldrb	r3, [r3, #4]
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d115      	bne.n	8003ce8 <grabSensorData+0xc4>
		if (osOK != osMessageQueueGet(inertialSensingQueueHandle, &inertialMsgReceived, 0U, 0)) {
 8003cbc:	4b15      	ldr	r3, [pc, #84]	; (8003d14 <grabSensorData+0xf0>)
 8003cbe:	6818      	ldr	r0, [r3, #0]
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	4914      	ldr	r1, [pc, #80]	; (8003d18 <grabSensorData+0xf4>)
 8003cc6:	f00d fa13 	bl	80110f0 <osMessageQueueGet>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00b      	beq.n	8003ce8 <grabSensorData+0xc4>
			memcpy(&inertialMsgReceived, &nullInertialMsgReceived, sizeof(struct inertialData));
 8003cd0:	4a11      	ldr	r2, [pc, #68]	; (8003d18 <grabSensorData+0xf4>)
 8003cd2:	4b12      	ldr	r3, [pc, #72]	; (8003d1c <grabSensorData+0xf8>)
 8003cd4:	4614      	mov	r4, r2
 8003cd6:	461d      	mov	r5, r3
 8003cd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003cda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003cdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003cde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ce0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003ce4:	e884 0003 	stmia.w	r4, {r0, r1}
		}
	}
}
 8003ce8:	bf00      	nop
 8003cea:	bdb0      	pop	{r4, r5, r7, pc}
 8003cec:	20027c28 	.word	0x20027c28
 8003cf0:	200280a4 	.word	0x200280a4
 8003cf4:	2002870c 	.word	0x2002870c
 8003cf8:	0801c2c4 	.word	0x0801c2c4
 8003cfc:	20027c60 	.word	0x20027c60
 8003d00:	200287cc 	.word	0x200287cc
 8003d04:	0801c330 	.word	0x0801c330
 8003d08:	20027b4c 	.word	0x20027b4c
 8003d0c:	20028778 	.word	0x20028778
 8003d10:	0801c370 	.word	0x0801c370
 8003d14:	20027c54 	.word	0x20027c54
 8003d18:	20028790 	.word	0x20028790
 8003d1c:	0801c348 	.word	0x0801c348

08003d20 <masterEnterRoutine>:

void masterEnterRoutine(void) {
 8003d20:	b580      	push	{r7, lr}
 8003d22:	af00      	add	r7, sp, #0
	if (prevLogMessage.blinkEnabled == SENSOR_ENABLE) {
 8003d24:	4b1e      	ldr	r3, [pc, #120]	; (8003da0 <masterEnterRoutine+0x80>)
 8003d26:	789b      	ldrb	r3, [r3, #2]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d105      	bne.n	8003d38 <masterEnterRoutine+0x18>
		osThreadFlagsSet(blinkTaskHandle, 0x00000001U);
 8003d2c:	4b1d      	ldr	r3, [pc, #116]	; (8003da4 <masterEnterRoutine+0x84>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2101      	movs	r1, #1
 8003d32:	4618      	mov	r0, r3
 8003d34:	f00c fba6 	bl	8010484 <osThreadFlagsSet>
	}

	if (prevLogMessage.positionEnabled == SENSOR_ENABLE) {
 8003d38:	4b19      	ldr	r3, [pc, #100]	; (8003da0 <masterEnterRoutine+0x80>)
 8003d3a:	795b      	ldrb	r3, [r3, #5]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d118      	bne.n	8003d72 <masterEnterRoutine+0x52>
		// update status queue to notify other threads position is active
		osMessageQueueGet(statusQueueHandle, &statusMessage, 0U, osWaitForever);
 8003d40:	4b19      	ldr	r3, [pc, #100]	; (8003da8 <masterEnterRoutine+0x88>)
 8003d42:	6818      	ldr	r0, [r3, #0]
 8003d44:	f04f 33ff 	mov.w	r3, #4294967295
 8003d48:	2200      	movs	r2, #0
 8003d4a:	4918      	ldr	r1, [pc, #96]	; (8003dac <masterEnterRoutine+0x8c>)
 8003d4c:	f00d f9d0 	bl	80110f0 <osMessageQueueGet>
		statusMessage.positionEnabled = 1;
 8003d50:	4b16      	ldr	r3, [pc, #88]	; (8003dac <masterEnterRoutine+0x8c>)
 8003d52:	2201      	movs	r2, #1
 8003d54:	715a      	strb	r2, [r3, #5]
		osMessageQueuePut(statusQueueHandle, (void*) &statusMessage, 0U, 0);
 8003d56:	4b14      	ldr	r3, [pc, #80]	; (8003da8 <masterEnterRoutine+0x88>)
 8003d58:	6818      	ldr	r0, [r3, #0]
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	4913      	ldr	r1, [pc, #76]	; (8003dac <masterEnterRoutine+0x8c>)
 8003d60:	f00d f952 	bl	8011008 <osMessageQueuePut>

		// start timer for 3D position sample to be taken
		osTimerStart(viveTimerHandle, VIVE_SAMPLE_PERIOD);
 8003d64:	4b12      	ldr	r3, [pc, #72]	; (8003db0 <masterEnterRoutine+0x90>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f00c fd97 	bl	80108a0 <osTimerStart>
	}

	if ((prevLogMessage.tempEnabled == SENSOR_ENABLE)) {
 8003d72:	4b0b      	ldr	r3, [pc, #44]	; (8003da0 <masterEnterRoutine+0x80>)
 8003d74:	78db      	ldrb	r3, [r3, #3]
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d105      	bne.n	8003d86 <masterEnterRoutine+0x66>
		osThreadFlagsSet(interProcTaskHandle, 0x00000001U);
 8003d7a:	4b0e      	ldr	r3, [pc, #56]	; (8003db4 <masterEnterRoutine+0x94>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2101      	movs	r1, #1
 8003d80:	4618      	mov	r0, r3
 8003d82:	f00c fb7f 	bl	8010484 <osThreadFlagsSet>
	}

	if ((prevLogMessage.intertialEnabled == SENSOR_ENABLE)) {
 8003d86:	4b06      	ldr	r3, [pc, #24]	; (8003da0 <masterEnterRoutine+0x80>)
 8003d88:	791b      	ldrb	r3, [r3, #4]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d105      	bne.n	8003d9a <masterEnterRoutine+0x7a>
		osThreadFlagsSet(inertialTaskHandle, 0x00000001U);
 8003d8e:	4b0a      	ldr	r3, [pc, #40]	; (8003db8 <masterEnterRoutine+0x98>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2101      	movs	r1, #1
 8003d94:	4618      	mov	r0, r3
 8003d96:	f00c fb75 	bl	8010484 <osThreadFlagsSet>
	}
}
 8003d9a:	bf00      	nop
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	20027c28 	.word	0x20027c28
 8003da4:	20027c34 	.word	0x20027c34
 8003da8:	20027c64 	.word	0x20027c64
 8003dac:	200280b4 	.word	0x200280b4
 8003db0:	20027c3c 	.word	0x20027c3c
 8003db4:	20028094 	.word	0x20028094
 8003db8:	200280ac 	.word	0x200280ac

08003dbc <masterExitRoutine>:

void masterExitRoutine(void) {
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	af00      	add	r7, sp, #0
	if (prevLogMessage.blinkEnabled == SENSOR_ENABLE) {
 8003dc0:	4b15      	ldr	r3, [pc, #84]	; (8003e18 <masterExitRoutine+0x5c>)
 8003dc2:	789b      	ldrb	r3, [r3, #2]
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d105      	bne.n	8003dd4 <masterExitRoutine+0x18>
		osThreadFlagsSet(blinkTaskHandle, 0x00000002U);
 8003dc8:	4b14      	ldr	r3, [pc, #80]	; (8003e1c <masterExitRoutine+0x60>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2102      	movs	r1, #2
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f00c fb58 	bl	8010484 <osThreadFlagsSet>
	}

	if (prevLogMessage.positionEnabled == SENSOR_ENABLE) {
 8003dd4:	4b10      	ldr	r3, [pc, #64]	; (8003e18 <masterExitRoutine+0x5c>)
 8003dd6:	795b      	ldrb	r3, [r3, #5]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d107      	bne.n	8003dec <masterExitRoutine+0x30>
		// stop timer for 3D position sensing
		osTimerStop(viveTimerHandle);
 8003ddc:	4b10      	ldr	r3, [pc, #64]	; (8003e20 <masterExitRoutine+0x64>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4618      	mov	r0, r3
 8003de2:	f00c fd9d 	bl	8010920 <osTimerStop>
		viveStateVar = 0;
 8003de6:	4b0f      	ldr	r3, [pc, #60]	; (8003e24 <masterExitRoutine+0x68>)
 8003de8:	2200      	movs	r2, #0
 8003dea:	601a      	str	r2, [r3, #0]
	}

	if ((prevLogMessage.tempEnabled == SENSOR_ENABLE)) {
 8003dec:	4b0a      	ldr	r3, [pc, #40]	; (8003e18 <masterExitRoutine+0x5c>)
 8003dee:	78db      	ldrb	r3, [r3, #3]
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d105      	bne.n	8003e00 <masterExitRoutine+0x44>
		osThreadFlagsSet(interProcTaskHandle, 0x00000002U);
 8003df4:	4b0c      	ldr	r3, [pc, #48]	; (8003e28 <masterExitRoutine+0x6c>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2102      	movs	r1, #2
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f00c fb42 	bl	8010484 <osThreadFlagsSet>
	}

	if ((prevLogMessage.intertialEnabled == SENSOR_ENABLE)) {
 8003e00:	4b05      	ldr	r3, [pc, #20]	; (8003e18 <masterExitRoutine+0x5c>)
 8003e02:	791b      	ldrb	r3, [r3, #4]
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d105      	bne.n	8003e14 <masterExitRoutine+0x58>
		osThreadFlagsSet(inertialTaskHandle, 0x00000002U);
 8003e08:	4b08      	ldr	r3, [pc, #32]	; (8003e2c <masterExitRoutine+0x70>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2102      	movs	r1, #2
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f00c fb38 	bl	8010484 <osThreadFlagsSet>
	}

}
 8003e14:	bf00      	nop
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	20027c28 	.word	0x20027c28
 8003e1c:	20027c34 	.word	0x20027c34
 8003e20:	20027c3c 	.word	0x20027c3c
 8003e24:	20000c68 	.word	0x20000c68
 8003e28:	20028094 	.word	0x20028094
 8003e2c:	200280ac 	.word	0x200280ac

08003e30 <packetizeData>:



void packetizeData(struct LogPacket *packet, struct blinkData *blink,
		struct parsedSecondaryProcessorPacket *processorMsg, struct inertialData *inertialMsg, VIVEVars *posMsg) {
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]
 8003e3c:	603b      	str	r3, [r7, #0]
	// get processor tick counts (in terms of ms)
	packet->tick_ms = HAL_GetTick();
 8003e3e:	f001 ffc7 	bl	8005dd0 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	// get epoch time from RTC
	HAL_RTC_GetTime(&hrtc, &RTC_time, RTC_FORMAT_BIN);
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	4917      	ldr	r1, [pc, #92]	; (8003eac <packetizeData+0x7c>)
 8003e4e:	4818      	ldr	r0, [pc, #96]	; (8003eb0 <packetizeData+0x80>)
 8003e50:	f009 fa2b 	bl	800d2aa <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &RTC_date, RTC_FORMAT_BIN);
 8003e54:	2200      	movs	r2, #0
 8003e56:	4917      	ldr	r1, [pc, #92]	; (8003eb4 <packetizeData+0x84>)
 8003e58:	4815      	ldr	r0, [pc, #84]	; (8003eb0 <packetizeData+0x80>)
 8003e5a:	f009 fb30 	bl	800d4be <HAL_RTC_GetDate>
	packet->epoch = RTC_ToEpoch(&RTC_time, &RTC_date);
 8003e5e:	4915      	ldr	r1, [pc, #84]	; (8003eb4 <packetizeData+0x84>)
 8003e60:	4812      	ldr	r0, [pc, #72]	; (8003eac <packetizeData+0x7c>)
 8003e62:	f000 fc5f 	bl	8004724 <RTC_ToEpoch>
 8003e66:	4602      	mov	r2, r0
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

	// add sensor data
	memcpy(&(packet->blink), blink, sizeof(struct blinkData));
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	226c      	movs	r2, #108	; 0x6c
 8003e72:	68b9      	ldr	r1, [r7, #8]
 8003e74:	4618      	mov	r0, r3
 8003e76:	f016 fd55 	bl	801a924 <memcpy>
	memcpy(&(packet->procData), processorMsg, sizeof(struct parsedSecondaryProcessorPacket));
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	336c      	adds	r3, #108	; 0x6c
 8003e7e:	2218      	movs	r2, #24
 8003e80:	6879      	ldr	r1, [r7, #4]
 8003e82:	4618      	mov	r0, r3
 8003e84:	f016 fd4e 	bl	801a924 <memcpy>
	memcpy(&(packet->inertial), inertialMsg, sizeof(struct inertialData));
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	3384      	adds	r3, #132	; 0x84
 8003e8c:	2228      	movs	r2, #40	; 0x28
 8003e8e:	6839      	ldr	r1, [r7, #0]
 8003e90:	4618      	mov	r0, r3
 8003e92:	f016 fd47 	bl	801a924 <memcpy>
	memcpy(&(packet->pos), posMsg, sizeof(struct VIVEVars));
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	33ac      	adds	r3, #172	; 0xac
 8003e9a:	2218      	movs	r2, #24
 8003e9c:	69b9      	ldr	r1, [r7, #24]
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f016 fd40 	bl	801a924 <memcpy>
}
 8003ea4:	bf00      	nop
 8003ea6:	3710      	adds	r7, #16
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	200287b8 	.word	0x200287b8
 8003eb0:	200287e8 	.word	0x200287e8
 8003eb4:	200287e4 	.word	0x200287e4

08003eb8 <vector_push>:
	kCycleFixAcquired = 5,
	kCycleFixMax = 10
};

void vector_push(vector *self, Pulse *item)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
    if (self->count < MAX_CAPACITY){
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ec6:	2b0f      	cmp	r3, #15
 8003ec8:	d80f      	bhi.n	8003eea <vector_push+0x32>
    	self->items[self->count++] = *item;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003ece:	1c51      	adds	r1, r2, #1
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6619      	str	r1, [r3, #96]	; 0x60
 8003ed4:	6879      	ldr	r1, [r7, #4]
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	005b      	lsls	r3, r3, #1
 8003eda:	4413      	add	r3, r2
 8003edc:	005b      	lsls	r3, r3, #1
 8003ede:	440b      	add	r3, r1
 8003ee0:	683a      	ldr	r2, [r7, #0]
 8003ee2:	6811      	ldr	r1, [r2, #0]
 8003ee4:	6019      	str	r1, [r3, #0]
 8003ee6:	8892      	ldrh	r2, [r2, #4]
 8003ee8:	809a      	strh	r2, [r3, #4]
    }
}
 8003eea:	bf00      	nop
 8003eec:	370c      	adds	r7, #12
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr

08003ef6 <vector_pop>:

Pulse vector_pop(vector *self){
 8003ef6:	b480      	push	{r7}
 8003ef8:	b085      	sub	sp, #20
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
 8003efe:	6039      	str	r1, [r7, #0]
	if(self->count > 0){
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d01c      	beq.n	8003f42 <vector_pop+0x4c>
		Pulse last = self->items[self->count - 1];
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f0c:	1e5a      	subs	r2, r3, #1
 8003f0e:	6839      	ldr	r1, [r7, #0]
 8003f10:	4613      	mov	r3, r2
 8003f12:	005b      	lsls	r3, r3, #1
 8003f14:	4413      	add	r3, r2
 8003f16:	005b      	lsls	r3, r3, #1
 8003f18:	18ca      	adds	r2, r1, r3
 8003f1a:	f107 0308 	add.w	r3, r7, #8
 8003f1e:	6810      	ldr	r0, [r2, #0]
 8003f20:	6018      	str	r0, [r3, #0]
 8003f22:	8892      	ldrh	r2, [r2, #4]
 8003f24:	809a      	strh	r2, [r3, #4]
		self->count--;
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f2a:	1e5a      	subs	r2, r3, #1
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	661a      	str	r2, [r3, #96]	; 0x60
		return last;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	461a      	mov	r2, r3
 8003f34:	f107 0308 	add.w	r3, r7, #8
 8003f38:	6818      	ldr	r0, [r3, #0]
 8003f3a:	6010      	str	r0, [r2, #0]
 8003f3c:	889b      	ldrh	r3, [r3, #4]
 8003f3e:	8093      	strh	r3, [r2, #4]
 8003f40:	e005      	b.n	8003f4e <vector_pop+0x58>
	}
	return self->items[0];
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	683a      	ldr	r2, [r7, #0]
 8003f46:	6810      	ldr	r0, [r2, #0]
 8003f48:	6018      	str	r0, [r3, #0]
 8003f4a:	8892      	ldrh	r2, [r2, #4]
 8003f4c:	809a      	strh	r2, [r3, #4]
}
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	3714      	adds	r7, #20
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr

08003f5a <vector_get>:

Pulse vector_get(vector *self, int index)
{
 8003f5a:	b480      	push	{r7}
 8003f5c:	b085      	sub	sp, #20
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	60f8      	str	r0, [r7, #12]
 8003f62:	60b9      	str	r1, [r7, #8]
 8003f64:	607a      	str	r2, [r7, #4]
    if (index >= 0 && index < self->count){
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	db12      	blt.n	8003f92 <vector_get+0x38>
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d90d      	bls.n	8003f92 <vector_get+0x38>
    	return self->items[index];
 8003f76:	68f8      	ldr	r0, [r7, #12]
 8003f78:	68b9      	ldr	r1, [r7, #8]
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	005b      	lsls	r3, r3, #1
 8003f80:	4413      	add	r3, r2
 8003f82:	005b      	lsls	r3, r3, #1
 8003f84:	18ca      	adds	r2, r1, r3
 8003f86:	4603      	mov	r3, r0
 8003f88:	6811      	ldr	r1, [r2, #0]
 8003f8a:	6019      	str	r1, [r3, #0]
 8003f8c:	8892      	ldrh	r2, [r2, #4]
 8003f8e:	809a      	strh	r2, [r3, #4]
 8003f90:	e005      	b.n	8003f9e <vector_get+0x44>
    }
    return self->items[0];
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	68ba      	ldr	r2, [r7, #8]
 8003f96:	6810      	ldr	r0, [r2, #0]
 8003f98:	6018      	str	r0, [r3, #0]
 8003f9a:	8892      	ldrh	r2, [r2, #4]
 8003f9c:	809a      	strh	r2, [r3, #4]
}
 8003f9e:	68f8      	ldr	r0, [r7, #12]
 8003fa0:	3714      	adds	r7, #20
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr

08003faa <vector_clear>:

void vector_clear(vector *self){
 8003faa:	b480      	push	{r7}
 8003fac:	b083      	sub	sp, #12
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
	self->count = 0;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	661a      	str	r2, [r3, #96]	; 0x60
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <_PulseProcessor>:

void _PulseProcessor(PulseProcessor *self, uint32_t num_inputs){
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
	self->num_inputs_ = num_inputs;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	683a      	ldr	r2, [r7, #0]
 8003fd2:	601a      	str	r2, [r3, #0]
	self->cycle_fix_level_ = 0;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	605a      	str	r2, [r3, #4]
	self->cycle_idx_ = 0;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	60da      	str	r2, [r3, #12]


	for(int i = 0; i < NUM_BASE_STATIONS; i++){
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	60fb      	str	r3, [r7, #12]
 8003fe4:	e00c      	b.n	8004000 <_PulseProcessor+0x3c>
		vector_clear(&self->cycle_long_pulses_[i]);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2264      	movs	r2, #100	; 0x64
 8003fea:	fb02 f303 	mul.w	r3, r2, r3
 8003fee:	3310      	adds	r3, #16
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7ff ffd8 	bl	8003faa <vector_clear>
	for(int i = 0; i < NUM_BASE_STATIONS; i++){
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	60fb      	str	r3, [r7, #12]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2b01      	cmp	r3, #1
 8004004:	ddef      	ble.n	8003fe6 <_PulseProcessor+0x22>
	}
	vector_clear(&self->cycle_short_pulses_);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	33d8      	adds	r3, #216	; 0xd8
 800400a:	4618      	mov	r0, r3
 800400c:	f7ff ffcd 	bl	8003faa <vector_clear>
	vector_clear(&self->unclassified_long_pulses_);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8004016:	4618      	mov	r0, r3
 8004018:	f7ff ffc7 	bl	8003faa <vector_clear>
	self->time_from_last_long_pulse_ = 0;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	f8a3 22c8 	strh.w	r2, [r3, #712]	; 0x2c8
}
 8004024:	bf00      	nop
 8004026:	3710      	adds	r7, #16
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <consume_pulse>:

uint8_t prev_pulse_short = 0;
void consume_pulse(PulseProcessor *self, Pulse* p){
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
	//vector_push(&debug_ar, p);
	if(p->pulse_len >= MAX_LONG_PULSE_LEN){
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	889b      	ldrh	r3, [r3, #4]
 800403a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800403e:	d303      	bcc.n	8004048 <consume_pulse+0x1c>
		//Ignore very long pulses
		prev_pulse_short = 0;
 8004040:	4b0f      	ldr	r3, [pc, #60]	; (8004080 <consume_pulse+0x54>)
 8004042:	2200      	movs	r2, #0
 8004044:	701a      	strb	r2, [r3, #0]
		if(prev_pulse_short != 1){ // check to make sure this isnt a duplicate pulse (if it is, ignore!)
			process_short_pulse(self, p);
			prev_pulse_short = 1;
		}
	}
}
 8004046:	e016      	b.n	8004076 <consume_pulse+0x4a>
	else if(p->pulse_len >= MIN_LONG_PULSE_LEN){ // Long pulse - likely sync pulse
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	889b      	ldrh	r3, [r3, #4]
 800404c:	2b27      	cmp	r3, #39	; 0x27
 800404e:	d907      	bls.n	8004060 <consume_pulse+0x34>
		prev_pulse_short = 0;
 8004050:	4b0b      	ldr	r3, [pc, #44]	; (8004080 <consume_pulse+0x54>)
 8004052:	2200      	movs	r2, #0
 8004054:	701a      	strb	r2, [r3, #0]
		process_long_pulse(self, p);
 8004056:	6839      	ldr	r1, [r7, #0]
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f000 f813 	bl	8004084 <process_long_pulse>
}
 800405e:	e00a      	b.n	8004076 <consume_pulse+0x4a>
		if(prev_pulse_short != 1){ // check to make sure this isnt a duplicate pulse (if it is, ignore!)
 8004060:	4b07      	ldr	r3, [pc, #28]	; (8004080 <consume_pulse+0x54>)
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	2b01      	cmp	r3, #1
 8004066:	d006      	beq.n	8004076 <consume_pulse+0x4a>
			process_short_pulse(self, p);
 8004068:	6839      	ldr	r1, [r7, #0]
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 f89c 	bl	80041a8 <process_short_pulse>
			prev_pulse_short = 1;
 8004070:	4b03      	ldr	r3, [pc, #12]	; (8004080 <consume_pulse+0x54>)
 8004072:	2201      	movs	r2, #1
 8004074:	701a      	strb	r2, [r3, #0]
}
 8004076:	bf00      	nop
 8004078:	3708      	adds	r7, #8
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	20000c7c 	.word	0x20000c7c

08004084 <process_long_pulse>:

void process_long_pulse(PulseProcessor *self, Pulse* p){
 8004084:	b580      	push	{r7, lr}
 8004086:	b088      	sub	sp, #32
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
	if(self->cycle_fix_level_ == kCycleFixNone){
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d144      	bne.n	8004120 <process_long_pulse+0x9c>
        // Bootstrap mode. We keep the previous long pulse in unclassified_long_pulses_ vector.
        // With this algorithm 2 base stations needed for a fix. We search for a situation where the last pulse was
        // second in last cycle, which means (8333-400) us difference in start time.
		if(self->unclassified_long_pulses_.count > 0){
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 800409c:	2b00      	cmp	r3, #0
 800409e:	d03f      	beq.n	8004120 <process_long_pulse+0x9c>
			Pulse last_long_pulse = vector_pop(&self->unclassified_long_pulses_);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f503 729e 	add.w	r2, r3, #316	; 0x13c
 80040a6:	f107 0308 	add.w	r3, r7, #8
 80040aa:	4611      	mov	r1, r2
 80040ac:	4618      	mov	r0, r3
 80040ae:	f7ff ff22 	bl	8003ef6 <vector_pop>

			self->time_from_last_long_pulse_ = p->start_time - last_long_pulse.start_time;
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	885a      	ldrh	r2, [r3, #2]
 80040b6:	897b      	ldrh	r3, [r7, #10]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	b29a      	uxth	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f8a3 22c8 	strh.w	r2, [r3, #712]	; 0x2c8


			int delta = self->time_from_last_long_pulse_ - (CYCLE_PERIOD - long_pulse_starts[1]);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f8b3 32c8 	ldrh.w	r3, [r3, #712]	; 0x2c8
 80040c8:	461a      	mov	r2, r3
 80040ca:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 80040ce:	f5c3 5302 	rsb	r3, r3, #8320	; 0x2080
 80040d2:	330d      	adds	r3, #13
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	617b      	str	r3, [r7, #20]
			if(-LONG_PULSE_STARTS_ACCEPTED_RANGE <= delta && delta < LONG_PULSE_STARTS_ACCEPTED_RANGE){
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	f113 0f1e 	cmn.w	r3, #30
 80040de:	db1c      	blt.n	800411a <process_long_pulse+0x96>
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	2b1d      	cmp	r3, #29
 80040e4:	dc19      	bgt.n	800411a <process_long_pulse+0x96>
                // Found candidate first pulse.
                self->cycle_fix_level_ = kCycleFixCandidate;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2201      	movs	r2, #1
 80040ea:	605a      	str	r2, [r3, #4]
                self->cycle_start_time_ = p->start_time;
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	885a      	ldrh	r2, [r3, #2]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	811a      	strh	r2, [r3, #8]
                self->cycle_idx_ = 0;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	60da      	str	r2, [r3, #12]

                reset(&self->phase_classifier_);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8004100:	4618      	mov	r0, r3
 8004102:	f7fd fcbd 	bl	8001a80 <reset>

                reset_cycle_long_pulses(self);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 fa64 	bl	80045d4 <reset_cycle_long_pulses>
                reset_unclassified_long_pulses(self);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 fa7c 	bl	800460a <reset_unclassified_long_pulses>
                reset_cycle_short_pulses(self);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 fa87 	bl	8004626 <reset_cycle_short_pulses>
 8004118:	e002      	b.n	8004120 <process_long_pulse+0x9c>
            }
			else{
				reset_unclassified_long_pulses(self);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 fa75 	bl	800460a <reset_unclassified_long_pulses>
			}
		}
	}

    // Put the pulse into either one of two buckets, or keep it as unclassified.
    uint8_t pulse_classified = 0;
 8004120:	2300      	movs	r3, #0
 8004122:	77fb      	strb	r3, [r7, #31]
    if (self->cycle_fix_level_ >= kCycleFixCandidate) {
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d02d      	beq.n	8004188 <process_long_pulse+0x104>
        // Put pulse into one of two buckets by start time.
    	uint16_t time_from_cycle_start = p->start_time - self->cycle_start_time_;
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	885a      	ldrh	r2, [r3, #2]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	891b      	ldrh	r3, [r3, #8]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	827b      	strh	r3, [r7, #18]
        for (int i = 0; i < NUM_BASE_STATIONS; i++) {
 8004138:	2300      	movs	r3, #0
 800413a:	61bb      	str	r3, [r7, #24]
 800413c:	e021      	b.n	8004182 <process_long_pulse+0xfe>
        	int16_t delta = time_from_cycle_start - long_pulse_starts[i];
 800413e:	4a19      	ldr	r2, [pc, #100]	; (80041a4 <process_long_pulse+0x120>)
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004146:	8a7a      	ldrh	r2, [r7, #18]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	b29b      	uxth	r3, r3
 800414c:	823b      	strh	r3, [r7, #16]
        	if(-LONG_PULSE_STARTS_ACCEPTED_RANGE <= delta && delta < LONG_PULSE_STARTS_ACCEPTED_RANGE) {
 800414e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004152:	f113 0f1e 	cmn.w	r3, #30
 8004156:	db11      	blt.n	800417c <process_long_pulse+0xf8>
 8004158:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800415c:	2b1d      	cmp	r3, #29
 800415e:	dc0d      	bgt.n	800417c <process_long_pulse+0xf8>
                vector_push(&self->cycle_long_pulses_[i], p);
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	2264      	movs	r2, #100	; 0x64
 8004164:	fb02 f303 	mul.w	r3, r2, r3
 8004168:	3310      	adds	r3, #16
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	4413      	add	r3, r2
 800416e:	6839      	ldr	r1, [r7, #0]
 8004170:	4618      	mov	r0, r3
 8004172:	f7ff fea1 	bl	8003eb8 <vector_push>
                pulse_classified = 1;
 8004176:	2301      	movs	r3, #1
 8004178:	77fb      	strb	r3, [r7, #31]
                break;
 800417a:	e005      	b.n	8004188 <process_long_pulse+0x104>
        for (int i = 0; i < NUM_BASE_STATIONS; i++) {
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	3301      	adds	r3, #1
 8004180:	61bb      	str	r3, [r7, #24]
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	2b01      	cmp	r3, #1
 8004186:	ddda      	ble.n	800413e <process_long_pulse+0xba>
            }
        }
    }
    if (!pulse_classified){
 8004188:	7ffb      	ldrb	r3, [r7, #31]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d106      	bne.n	800419c <process_long_pulse+0x118>
    	vector_push(&self->unclassified_long_pulses_, p);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8004194:	6839      	ldr	r1, [r7, #0]
 8004196:	4618      	mov	r0, r3
 8004198:	f7ff fe8e 	bl	8003eb8 <vector_push>
    }
}
 800419c:	bf00      	nop
 800419e:	3720      	adds	r7, #32
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	0801c388 	.word	0x0801c388

080041a8 <process_short_pulse>:

void process_short_pulse(PulseProcessor *self, Pulse *p){
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
	if (self->cycle_fix_level_ >= kCycleFixCandidate && p->input_idx < self->num_inputs_) {
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00f      	beq.n	80041da <process_short_pulse+0x32>
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	461a      	mov	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d208      	bcs.n	80041da <process_short_pulse+0x32>
	    // TODO: Filter out pulses outside of current cycle.
		vector_push(&self->cycle_short_pulses_, p);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	33d8      	adds	r3, #216	; 0xd8
 80041cc:	6839      	ldr	r1, [r7, #0]
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7ff fe72 	bl	8003eb8 <vector_push>

		//We can process the cycle now
		process_cycle_fix(self);
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f000 f805 	bl	80041e4 <process_cycle_fix>
	}
}
 80041da:	bf00      	nop
 80041dc:	3708      	adds	r7, #8
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
	...

080041e4 <process_cycle_fix>:

void process_cycle_fix(PulseProcessor *self) {
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b0a2      	sub	sp, #136	; 0x88
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
    int pulse_start_corrections[NUM_BASE_STATIONS] = {};
 80041ec:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80041f0:	2200      	movs	r2, #0
 80041f2:	601a      	str	r2, [r3, #0]
 80041f4:	605a      	str	r2, [r3, #4]
    uint16_t pulse_lens[NUM_BASE_STATIONS] = {};
 80041f6:	2300      	movs	r3, #0
 80041f8:	64fb      	str	r3, [r7, #76]	; 0x4c
    // Check if we have long pulses from at least one base station.
    if (self->cycle_long_pulses_[0].count > 0 || self->cycle_long_pulses_[1].count > 0) {
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d105      	bne.n	800420e <process_cycle_fix+0x2a>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004208:	2b00      	cmp	r3, #0
 800420a:	f000 80b7 	beq.w	800437c <process_cycle_fix+0x198>
        // Increase fix level if we have pulses from both stations.
        if (self->cycle_fix_level_ < kCycleFixMax && self->cycle_long_pulses_[0].count > 0 && self->cycle_long_pulses_[1].count > 0){
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	2b09      	cmp	r3, #9
 8004214:	d80d      	bhi.n	8004232 <process_cycle_fix+0x4e>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800421a:	2b00      	cmp	r3, #0
 800421c:	d009      	beq.n	8004232 <process_cycle_fix+0x4e>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004224:	2b00      	cmp	r3, #0
 8004226:	d004      	beq.n	8004232 <process_cycle_fix+0x4e>
        	self->cycle_fix_level_++;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	1c5a      	adds	r2, r3, #1
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	605a      	str	r2, [r3, #4]
        }

        // Average out long pulse lengths and start times for each base station across sensors.
        // pulse_start_corrections is the delta between actual start time and expected start time.
        // TODO: Take into account previous cycles as well, i.e. adjust slowly.
        for (int b = 0; b < NUM_BASE_STATIONS; b++){
 8004232:	2300      	movs	r3, #0
 8004234:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004238:	e090      	b.n	800435c <process_cycle_fix+0x178>
        	uint32_t num_pulses = self->cycle_long_pulses_[b].count;
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004240:	2164      	movs	r1, #100	; 0x64
 8004242:	fb01 f303 	mul.w	r3, r1, r3
 8004246:	4413      	add	r3, r2
 8004248:	3370      	adds	r3, #112	; 0x70
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	677b      	str	r3, [r7, #116]	; 0x74
            if (num_pulses) {
 800424e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004250:	2b00      	cmp	r3, #0
 8004252:	d07e      	beq.n	8004352 <process_cycle_fix+0x16e>
            	uint16_t expected_start_time = self->cycle_start_time_ + long_pulse_starts[b];
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	891a      	ldrh	r2, [r3, #8]
 8004258:	49c0      	ldr	r1, [pc, #768]	; (800455c <process_cycle_fix+0x378>)
 800425a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800425e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004262:	4413      	add	r3, r2
 8004264:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
                for (uint32_t i = 0; i < num_pulses; i++) {
 8004268:	2300      	movs	r3, #0
 800426a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800426e:	e03e      	b.n	80042ee <process_cycle_fix+0x10a>
                    const Pulse pulse = vector_get(&self->cycle_long_pulses_[b], i);
 8004270:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004274:	2264      	movs	r2, #100	; 0x64
 8004276:	fb02 f303 	mul.w	r3, r2, r3
 800427a:	3310      	adds	r3, #16
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	18d1      	adds	r1, r2, r3
 8004280:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004284:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004288:	4618      	mov	r0, r3
 800428a:	f7ff fe66 	bl	8003f5a <vector_get>
                    pulse_start_corrections[b] += pulse.start_time - expected_start_time;
 800428e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004298:	4413      	add	r3, r2
 800429a:	f853 2c38 	ldr.w	r2, [r3, #-56]
 800429e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80042a2:	4619      	mov	r1, r3
 80042a4:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 80042a8:	1acb      	subs	r3, r1, r3
 80042aa:	441a      	add	r2, r3
 80042ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	f107 0188 	add.w	r1, r7, #136	; 0x88
 80042b6:	440b      	add	r3, r1
 80042b8:	f843 2c38 	str.w	r2, [r3, #-56]
                    pulse_lens[b] += pulse.pulse_len;
 80042bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80042c0:	005b      	lsls	r3, r3, #1
 80042c2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80042c6:	4413      	add	r3, r2
 80042c8:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 80042cc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80042d0:	4413      	add	r3, r2
 80042d2:	b29a      	uxth	r2, r3
 80042d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80042d8:	005b      	lsls	r3, r3, #1
 80042da:	f107 0188 	add.w	r1, r7, #136	; 0x88
 80042de:	440b      	add	r3, r1
 80042e0:	f823 2c3c 	strh.w	r2, [r3, #-60]
                for (uint32_t i = 0; i < num_pulses; i++) {
 80042e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80042e8:	3301      	adds	r3, #1
 80042ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80042ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80042f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d3bb      	bcc.n	8004270 <process_cycle_fix+0x8c>
                }
                if (num_pulses > 1) {
 80042f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d929      	bls.n	8004352 <process_cycle_fix+0x16e>
                    pulse_start_corrections[b] /= num_pulses;
 80042fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004308:	4413      	add	r3, r2
 800430a:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800430e:	461a      	mov	r2, r3
 8004310:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004312:	fbb2 f3f3 	udiv	r3, r2, r3
 8004316:	461a      	mov	r2, r3
 8004318:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004322:	440b      	add	r3, r1
 8004324:	f843 2c38 	str.w	r2, [r3, #-56]
                    pulse_lens[b] /= num_pulses;
 8004328:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800432c:	005b      	lsls	r3, r3, #1
 800432e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004332:	4413      	add	r3, r2
 8004334:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8004338:	461a      	mov	r2, r3
 800433a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800433c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004340:	b29a      	uxth	r2, r3
 8004342:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004346:	005b      	lsls	r3, r3, #1
 8004348:	f107 0188 	add.w	r1, r7, #136	; 0x88
 800434c:	440b      	add	r3, r1
 800434e:	f823 2c3c 	strh.w	r2, [r3, #-60]
        for (int b = 0; b < NUM_BASE_STATIONS; b++){
 8004352:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004356:	3301      	adds	r3, #1
 8004358:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800435c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004360:	2b01      	cmp	r3, #1
 8004362:	f77f af6a 	ble.w	800423a <process_cycle_fix+0x56>
                }
            }
        }
        // Send pulse lengths to phase classifier.
        process_pulse_lengths(&self->phase_classifier_, self->cycle_idx_, pulse_lens);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f503 70d0 	add.w	r0, r3, #416	; 0x1a0
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8004374:	4619      	mov	r1, r3
 8004376:	f7fd fb01 	bl	800197c <process_pulse_lengths>
 800437a:	e008      	b.n	800438e <process_cycle_fix+0x1aa>
    }
    else {
        // No long pulses this cycle. We can survive several of such cycles, but our confidence in timing sinks.
        //self->cycle_fix_level_--;
    	if(self->cycle_fix_level_ > 0){
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d004      	beq.n	800438e <process_cycle_fix+0x1aa>
    		self->cycle_fix_level_--;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	1e5a      	subs	r2, r3, #1
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	605a      	str	r2, [r3, #4]
    	}
    }

    // Given the cycle phase, we can put the angle timings to a correct bucket.

    int cycle_phase = get_phase(&self->phase_classifier_, self->cycle_idx_);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f503 72d0 	add.w	r2, r3, #416	; 0x1a0
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	4619      	mov	r1, r3
 800439a:	4610      	mov	r0, r2
 800439c:	f7fd fb58 	bl	8001a50 <get_phase>
 80043a0:	66f8      	str	r0, [r7, #108]	; 0x6c
    if (cycle_phase >= 0) {
 80043a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	f2c0 80b5 	blt.w	8004514 <process_cycle_fix+0x330>
    	//UART_Print_int32_t(cycle_phase);
        // From (potentially several) short pulses for the same input, we choose the longest one.
        Pulse *short_pulses[MAX_NUM_INPUTS] = {};
 80043aa:	f107 030c 	add.w	r3, r7, #12
 80043ae:	2220      	movs	r2, #32
 80043b0:	2100      	movs	r1, #0
 80043b2:	4618      	mov	r0, r3
 80043b4:	f016 fac1 	bl	801a93a <memset>
        uint16_t short_pulse_timings[MAX_NUM_INPUTS] = {};
 80043b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80043bc:	2200      	movs	r2, #0
 80043be:	601a      	str	r2, [r3, #0]
 80043c0:	605a      	str	r2, [r3, #4]
 80043c2:	609a      	str	r2, [r3, #8]
 80043c4:	60da      	str	r2, [r3, #12]

        //Base 0 is emitting during cycle phases 0 and 1. Base 1 is emitting during cycle phases 2 and 3.
        uint32_t emitting_base = cycle_phase >> 1;
 80043c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043c8:	105b      	asrs	r3, r3, #1
 80043ca:	66bb      	str	r3, [r7, #104]	; 0x68
        uint16_t base_pulse_start = self->cycle_start_time_ + long_pulse_starts[emitting_base] + pulse_start_corrections[emitting_base];
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	891a      	ldrh	r2, [r3, #8]
 80043d0:	4962      	ldr	r1, [pc, #392]	; (800455c <process_cycle_fix+0x378>)
 80043d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80043d4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80043d8:	4413      	add	r3, r2
 80043da:	b29a      	uxth	r2, r3
 80043dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	f107 0188 	add.w	r1, r7, #136	; 0x88
 80043e4:	440b      	add	r3, r1
 80043e6:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	4413      	add	r3, r2
 80043ee:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
        for (uint32_t i = 0; i < self->cycle_short_pulses_.count; i++) {
 80043f2:	2300      	movs	r3, #0
 80043f4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80043f6:	e04a      	b.n	800448e <process_cycle_fix+0x2aa>
            Pulse p = vector_get(&self->cycle_short_pulses_, i);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f103 01d8 	add.w	r1, r3, #216	; 0xd8
 80043fe:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004400:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004404:	4618      	mov	r0, r3
 8004406:	f7ff fda8 	bl	8003f5a <vector_get>
            uint32_t input_idx = p.input_idx;
 800440a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800440e:	65fb      	str	r3, [r7, #92]	; 0x5c

            // To get better precision, we calculate pulse timing based on the long pulse from the same base station.
            uint16_t pulse_timing = p.start_time + p.pulse_len / 2 - base_pulse_start;
 8004410:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004412:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004414:	085b      	lsrs	r3, r3, #1
 8004416:	b29b      	uxth	r3, r3
 8004418:	4413      	add	r3, r2
 800441a:	b29a      	uxth	r2, r3
 800441c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

            // Get longest laser pulse.
            if (SHORT_PULSE_MIN_TIME < pulse_timing && pulse_timing < SHORT_PULSE_MAX_TIME){
 8004426:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800442a:	f5b3 6f99 	cmp.w	r3, #1224	; 0x4c8
 800442e:	d32b      	bcc.n	8004488 <process_cycle_fix+0x2a4>
 8004430:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004434:	f641 2278 	movw	r2, #6776	; 0x1a78
 8004438:	4293      	cmp	r3, r2
 800443a:	d825      	bhi.n	8004488 <process_cycle_fix+0x2a4>
            	if (!short_pulses[input_idx] || short_pulses[input_idx]->pulse_len < p.pulse_len) {
 800443c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004444:	4413      	add	r3, r2
 8004446:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00a      	beq.n	8004464 <process_cycle_fix+0x280>
 800444e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004456:	4413      	add	r3, r2
 8004458:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 800445c:	889a      	ldrh	r2, [r3, #4]
 800445e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004460:	429a      	cmp	r2, r3
 8004462:	d211      	bcs.n	8004488 <process_cycle_fix+0x2a4>
					short_pulses[input_idx] = &p;
 8004464:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800446c:	4413      	add	r3, r2
 800446e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8004472:	f843 2c7c 	str.w	r2, [r3, #-124]
					short_pulse_timings[input_idx] = pulse_timing;
 8004476:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004478:	005b      	lsls	r3, r3, #1
 800447a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800447e:	4413      	add	r3, r2
 8004480:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8004484:	f823 2c54 	strh.w	r2, [r3, #-84]
        for (uint32_t i = 0; i < self->cycle_short_pulses_.count; i++) {
 8004488:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800448a:	3301      	adds	r3, #1
 800448c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8004494:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004496:	429a      	cmp	r2, r3
 8004498:	d3ae      	bcc.n	80043f8 <process_cycle_fix+0x214>
            	}
            }
        }

        // Calculate the angles for inputs where we saw short pulses.
        for (uint32_t i = 0; i < self->num_inputs_; i++){
 800449a:	2300      	movs	r3, #0
 800449c:	67bb      	str	r3, [r7, #120]	; 0x78
 800449e:	e034      	b.n	800450a <process_cycle_fix+0x326>
            if (short_pulses[i]) {
 80044a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80044a8:	4413      	add	r3, r2
 80044aa:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d028      	beq.n	8004504 <process_cycle_fix+0x320>
                SensorAngles *angles = &self->angles_frame_.sensors[i];
 80044b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044b4:	015b      	lsls	r3, r3, #5
 80044b6:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	4413      	add	r3, r2
 80044be:	663b      	str	r3, [r7, #96]	; 0x60
                angles->angles[cycle_phase] = (float)M_PI * ((int)(short_pulse_timings[i] - ANGLE_CENTER_LEN)) / (float)CYCLE_PERIOD;
 80044c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044c2:	005b      	lsls	r3, r3, #1
 80044c4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80044c8:	4413      	add	r3, r2
 80044ca:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 80044ce:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 80044d2:	ee07 3a90 	vmov	s15, r3
 80044d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044da:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004560 <process_cycle_fix+0x37c>
 80044de:	ee27 7a87 	vmul.f32	s14, s15, s14
 80044e2:	eddf 6a20 	vldr	s13, [pc, #128]	; 8004564 <process_cycle_fix+0x380>
 80044e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80044ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80044ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	4413      	add	r3, r2
 80044f2:	edc3 7a00 	vstr	s15, [r3]
                angles->updated_cycles[cycle_phase] = self->cycle_idx_;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	68d9      	ldr	r1, [r3, #12]
 80044fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80044fe:	3204      	adds	r2, #4
 8004500:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (uint32_t i = 0; i < self->num_inputs_; i++){
 8004504:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004506:	3301      	adds	r3, #1
 8004508:	67bb      	str	r3, [r7, #120]	; 0x78
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004510:	429a      	cmp	r2, r3
 8004512:	d3c5      	bcc.n	80044a0 <process_cycle_fix+0x2bc>
        }
    }

    // Send the data down the pipeline every 4th cycle (30Hz). Can be increased to 120Hz if needed.

    if ((cycle_phase >= 0) ? (cycle_phase == 3) : (self->cycle_idx_ % 4 == 0)) {
 8004514:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004516:	2b00      	cmp	r3, #0
 8004518:	db06      	blt.n	8004528 <process_cycle_fix+0x344>
 800451a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800451c:	2b03      	cmp	r3, #3
 800451e:	bf0c      	ite	eq
 8004520:	2301      	moveq	r3, #1
 8004522:	2300      	movne	r3, #0
 8004524:	b2db      	uxtb	r3, r3
 8004526:	e008      	b.n	800453a <process_cycle_fix+0x356>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	f003 0303 	and.w	r3, r3, #3
 8004530:	2b00      	cmp	r3, #0
 8004532:	bf0c      	ite	eq
 8004534:	2301      	moveq	r3, #1
 8004536:	2300      	movne	r3, #0
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b00      	cmp	r3, #0
 800453c:	d02b      	beq.n	8004596 <process_cycle_fix+0x3b2>
        self->angles_frame_.time = self->cycle_start_time_;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	891a      	ldrh	r2, [r3, #8]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
        self->angles_frame_.fix_level = (cycle_phase >= 0 && self->cycle_fix_level_ >= kCycleFixAcquired)
                                        ? kCycleSynced : kCycleSyncing;
 8004548:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800454a:	2b00      	cmp	r3, #0
 800454c:	db0c      	blt.n	8004568 <process_cycle_fix+0x384>
        self->angles_frame_.fix_level = (cycle_phase >= 0 && self->cycle_fix_level_ >= kCycleFixAcquired)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	2b04      	cmp	r3, #4
 8004554:	d908      	bls.n	8004568 <process_cycle_fix+0x384>
                                        ? kCycleSynced : kCycleSyncing;
 8004556:	22c8      	movs	r2, #200	; 0xc8
 8004558:	e007      	b.n	800456a <process_cycle_fix+0x386>
 800455a:	bf00      	nop
 800455c:	0801c388 	.word	0x0801c388
 8004560:	40490fdb 	.word	0x40490fdb
 8004564:	46023400 	.word	0x46023400
 8004568:	2264      	movs	r2, #100	; 0x64
        self->angles_frame_.fix_level = (cycle_phase >= 0 && self->cycle_fix_level_ >= kCycleFixAcquired)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
        self->angles_frame_.cycle_idx = self->cycle_idx_;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	68da      	ldr	r2, [r3, #12]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
        self->angles_frame_.phase_id = cycle_phase;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800457e:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4

        //UART_Print_float(self->angles_frame_.sensors[0].angles[0]);
        consume_angles(self->next, &self->angles_frame_);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f8d3 22cc 	ldr.w	r2, [r3, #716]	; 0x2cc
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800458e:	4619      	mov	r1, r3
 8004590:	4610      	mov	r0, r2
 8004592:	f7fd ffe3 	bl	800255c <consume_angles>

    }

    // Prepare for the next cycle.
    reset_cycle_long_pulses(self);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 f81c 	bl	80045d4 <reset_cycle_long_pulses>
    reset_unclassified_long_pulses(self);
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f000 f834 	bl	800460a <reset_unclassified_long_pulses>
    reset_cycle_short_pulses(self);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 f83f 	bl	8004626 <reset_cycle_short_pulses>

    self->cycle_start_time_ += CYCLE_PERIOD + pulse_start_corrections[0];
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	891a      	ldrh	r2, [r3, #8]
 80045ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	4413      	add	r3, r2
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80045b8:	330d      	adds	r3, #13
 80045ba:	b29a      	uxth	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	811a      	strh	r2, [r3, #8]
    self->cycle_idx_++;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	1c5a      	adds	r2, r3, #1
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	60da      	str	r2, [r3, #12]
}
 80045ca:	bf00      	nop
 80045cc:	3788      	adds	r7, #136	; 0x88
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop

080045d4 <reset_cycle_long_pulses>:

void reset_cycle_long_pulses(PulseProcessor *self){
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < NUM_BASE_STATIONS; i++){
 80045dc:	2300      	movs	r3, #0
 80045de:	60fb      	str	r3, [r7, #12]
 80045e0:	e00c      	b.n	80045fc <reset_cycle_long_pulses+0x28>
	    vector_clear(&self->cycle_long_pulses_[i]);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2264      	movs	r2, #100	; 0x64
 80045e6:	fb02 f303 	mul.w	r3, r2, r3
 80045ea:	3310      	adds	r3, #16
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	4413      	add	r3, r2
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7ff fcda 	bl	8003faa <vector_clear>
	for (int i = 0; i < NUM_BASE_STATIONS; i++){
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	3301      	adds	r3, #1
 80045fa:	60fb      	str	r3, [r7, #12]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	ddef      	ble.n	80045e2 <reset_cycle_long_pulses+0xe>
	}
}
 8004602:	bf00      	nop
 8004604:	3710      	adds	r7, #16
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}

0800460a <reset_unclassified_long_pulses>:

void reset_unclassified_long_pulses(PulseProcessor *self){
 800460a:	b580      	push	{r7, lr}
 800460c:	b082      	sub	sp, #8
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
	vector_clear(&self->unclassified_long_pulses_);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8004618:	4618      	mov	r0, r3
 800461a:	f7ff fcc6 	bl	8003faa <vector_clear>
}
 800461e:	bf00      	nop
 8004620:	3708      	adds	r7, #8
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}

08004626 <reset_cycle_short_pulses>:

void reset_cycle_short_pulses(PulseProcessor *self){
 8004626:	b580      	push	{r7, lr}
 8004628:	b082      	sub	sp, #8
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
	vector_clear(&self->cycle_short_pulses_);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	33d8      	adds	r3, #216	; 0xd8
 8004632:	4618      	mov	r0, r3
 8004634:	f7ff fcb9 	bl	8003faa <vector_clear>
}
 8004638:	bf00      	nop
 800463a:	3708      	adds	r7, #8
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 8004640:	b480      	push	{r7}
 8004642:	af00      	add	r7, sp, #0

}
 8004644:	bf00      	nop
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr

0800464e <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800464e:	b480      	push	{r7}
 8004650:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8004652:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800465a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800465e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004662:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004666:	bf00      	nop
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <LL_APB1_GRP1_EnableClock>:
{
 8004670:	b480      	push	{r7}
 8004672:	b085      	sub	sp, #20
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8004678:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800467c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800467e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4313      	orrs	r3, r2
 8004686:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8004688:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800468c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4013      	ands	r3, r2
 8004692:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004694:	68fb      	ldr	r3, [r7, #12]
}
 8004696:	bf00      	nop
 8004698:	3714      	adds	r7, #20
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
	...

080046a4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	af00      	add	r7, sp, #0

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80046a8:	4b11      	ldr	r3, [pc, #68]	; (80046f0 <MX_RTC_Init+0x4c>)
 80046aa:	4a12      	ldr	r2, [pc, #72]	; (80046f4 <MX_RTC_Init+0x50>)
 80046ac:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80046ae:	4b10      	ldr	r3, [pc, #64]	; (80046f0 <MX_RTC_Init+0x4c>)
 80046b0:	2200      	movs	r2, #0
 80046b2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80046b4:	4b0e      	ldr	r3, [pc, #56]	; (80046f0 <MX_RTC_Init+0x4c>)
 80046b6:	220f      	movs	r2, #15
 80046b8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80046ba:	4b0d      	ldr	r3, [pc, #52]	; (80046f0 <MX_RTC_Init+0x4c>)
 80046bc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80046c0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80046c2:	4b0b      	ldr	r3, [pc, #44]	; (80046f0 <MX_RTC_Init+0x4c>)
 80046c4:	2200      	movs	r2, #0
 80046c6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80046c8:	4b09      	ldr	r3, [pc, #36]	; (80046f0 <MX_RTC_Init+0x4c>)
 80046ca:	2200      	movs	r2, #0
 80046cc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80046ce:	4b08      	ldr	r3, [pc, #32]	; (80046f0 <MX_RTC_Init+0x4c>)
 80046d0:	2200      	movs	r2, #0
 80046d2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80046d4:	4b06      	ldr	r3, [pc, #24]	; (80046f0 <MX_RTC_Init+0x4c>)
 80046d6:	2200      	movs	r2, #0
 80046d8:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80046da:	4805      	ldr	r0, [pc, #20]	; (80046f0 <MX_RTC_Init+0x4c>)
 80046dc:	f008 fc83 	bl	800cfe6 <HAL_RTC_Init>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d001      	beq.n	80046ea <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80046e6:	f7ff f969 	bl	80039bc <Error_Handler>
  }

}
 80046ea:	bf00      	nop
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	200287e8 	.word	0x200287e8
 80046f4:	40002800 	.word	0x40002800

080046f8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a06      	ldr	r2, [pc, #24]	; (8004720 <HAL_RTC_MspInit+0x28>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d105      	bne.n	8004716 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800470a:	f7ff ffa0 	bl	800464e <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800470e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004712:	f7ff ffad 	bl	8004670 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8004716:	bf00      	nop
 8004718:	3708      	adds	r7, #8
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	40002800 	.word	0x40002800

08004724 <RTC_ToEpoch>:
  }
}

/* USER CODE BEGIN 1 */
// Convert Date/Time structures to epoch time
uint32_t RTC_ToEpoch(RTC_TimeTypeDef *time, RTC_DateTypeDef *date) {
 8004724:	b480      	push	{r7}
 8004726:	b087      	sub	sp, #28
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
	uint32_t JDN;

	// These hardcore math's are taken from http://en.wikipedia.org/wiki/Julian_day

	// Calculate some coefficients
	a = (14 - date->Month) / 12;
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	785b      	ldrb	r3, [r3, #1]
 8004732:	f1c3 030e 	rsb	r3, r3, #14
 8004736:	4a44      	ldr	r2, [pc, #272]	; (8004848 <RTC_ToEpoch+0x124>)
 8004738:	fb82 1203 	smull	r1, r2, r2, r3
 800473c:	1052      	asrs	r2, r2, #1
 800473e:	17db      	asrs	r3, r3, #31
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	75fb      	strb	r3, [r7, #23]
	y = (date->Year + 2000) + 4800 - a; // years since 1 March, 4801 BC
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	78db      	ldrb	r3, [r3, #3]
 8004748:	b29a      	uxth	r2, r3
 800474a:	7dfb      	ldrb	r3, [r7, #23]
 800474c:	b29b      	uxth	r3, r3
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	b29b      	uxth	r3, r3
 8004752:	f503 53d4 	add.w	r3, r3, #6784	; 0x1a80
 8004756:	3310      	adds	r3, #16
 8004758:	82bb      	strh	r3, [r7, #20]
	m = date->Month + (12 * a) - 3; // since 1 March, 4801 BC
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	785a      	ldrb	r2, [r3, #1]
 800475e:	7dfb      	ldrb	r3, [r7, #23]
 8004760:	4619      	mov	r1, r3
 8004762:	0049      	lsls	r1, r1, #1
 8004764:	440b      	add	r3, r1
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	b2db      	uxtb	r3, r3
 800476a:	4413      	add	r3, r2
 800476c:	b2db      	uxtb	r3, r3
 800476e:	3b03      	subs	r3, #3
 8004770:	74fb      	strb	r3, [r7, #19]

	// Gregorian calendar date compute
	JDN = date->Date;
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	789b      	ldrb	r3, [r3, #2]
 8004776:	60fb      	str	r3, [r7, #12]
	JDN += (153 * m + 2) / 5;
 8004778:	7cfa      	ldrb	r2, [r7, #19]
 800477a:	4613      	mov	r3, r2
 800477c:	00db      	lsls	r3, r3, #3
 800477e:	4413      	add	r3, r2
 8004780:	011a      	lsls	r2, r3, #4
 8004782:	4413      	add	r3, r2
 8004784:	3302      	adds	r3, #2
 8004786:	4a31      	ldr	r2, [pc, #196]	; (800484c <RTC_ToEpoch+0x128>)
 8004788:	fb82 1203 	smull	r1, r2, r2, r3
 800478c:	1052      	asrs	r2, r2, #1
 800478e:	17db      	asrs	r3, r3, #31
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	461a      	mov	r2, r3
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	4413      	add	r3, r2
 8004798:	60fb      	str	r3, [r7, #12]
	JDN += 365 * y;
 800479a:	8abb      	ldrh	r3, [r7, #20]
 800479c:	f240 126d 	movw	r2, #365	; 0x16d
 80047a0:	fb02 f303 	mul.w	r3, r2, r3
 80047a4:	461a      	mov	r2, r3
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	4413      	add	r3, r2
 80047aa:	60fb      	str	r3, [r7, #12]
	JDN += y / 4;
 80047ac:	8abb      	ldrh	r3, [r7, #20]
 80047ae:	089b      	lsrs	r3, r3, #2
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	461a      	mov	r2, r3
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	4413      	add	r3, r2
 80047b8:	60fb      	str	r3, [r7, #12]
	JDN += -y / 100;
 80047ba:	8abb      	ldrh	r3, [r7, #20]
 80047bc:	425b      	negs	r3, r3
 80047be:	4a24      	ldr	r2, [pc, #144]	; (8004850 <RTC_ToEpoch+0x12c>)
 80047c0:	fb82 1203 	smull	r1, r2, r2, r3
 80047c4:	1152      	asrs	r2, r2, #5
 80047c6:	17db      	asrs	r3, r3, #31
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	461a      	mov	r2, r3
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	4413      	add	r3, r2
 80047d0:	60fb      	str	r3, [r7, #12]
	JDN += y / 400;
 80047d2:	8abb      	ldrh	r3, [r7, #20]
 80047d4:	4a1e      	ldr	r2, [pc, #120]	; (8004850 <RTC_ToEpoch+0x12c>)
 80047d6:	fba2 2303 	umull	r2, r3, r2, r3
 80047da:	09db      	lsrs	r3, r3, #7
 80047dc:	b29b      	uxth	r3, r3
 80047de:	461a      	mov	r2, r3
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	4413      	add	r3, r2
 80047e4:	60fb      	str	r3, [r7, #12]
	JDN = JDN - 32045;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f5a3 43fa 	sub.w	r3, r3, #32000	; 0x7d00
 80047ec:	3b2d      	subs	r3, #45	; 0x2d
 80047ee:	60fb      	str	r3, [r7, #12]
	JDN = JDN - JULIAN_DATE_BASE;    // Calculate from base date
 80047f0:	68fa      	ldr	r2, [r7, #12]
 80047f2:	4b18      	ldr	r3, [pc, #96]	; (8004854 <RTC_ToEpoch+0x130>)
 80047f4:	4413      	add	r3, r2
 80047f6:	60fb      	str	r3, [r7, #12]
	JDN *= 86400;                     // Days to seconds
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	4a17      	ldr	r2, [pc, #92]	; (8004858 <RTC_ToEpoch+0x134>)
 80047fc:	fb02 f303 	mul.w	r3, r2, r3
 8004800:	60fb      	str	r3, [r7, #12]
	JDN += time->Hours * 3600;    // ... and today seconds
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	461a      	mov	r2, r3
 8004808:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800480c:	fb03 f302 	mul.w	r3, r3, r2
 8004810:	461a      	mov	r2, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	4413      	add	r3, r2
 8004816:	60fb      	str	r3, [r7, #12]
	JDN += time->Minutes * 60;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	785b      	ldrb	r3, [r3, #1]
 800481c:	461a      	mov	r2, r3
 800481e:	4613      	mov	r3, r2
 8004820:	011b      	lsls	r3, r3, #4
 8004822:	1a9b      	subs	r3, r3, r2
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	461a      	mov	r2, r3
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	4413      	add	r3, r2
 800482c:	60fb      	str	r3, [r7, #12]
	JDN += time->Seconds;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	789b      	ldrb	r3, [r3, #2]
 8004832:	461a      	mov	r2, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	4413      	add	r3, r2
 8004838:	60fb      	str	r3, [r7, #12]

	return JDN;
 800483a:	68fb      	ldr	r3, [r7, #12]
}
 800483c:	4618      	mov	r0, r3
 800483e:	371c      	adds	r7, #28
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr
 8004848:	2aaaaaab 	.word	0x2aaaaaab
 800484c:	66666667 	.word	0x66666667
 8004850:	51eb851f 	.word	0x51eb851f
 8004854:	ffdac274 	.word	0xffdac274
 8004858:	00015180 	.word	0x00015180

0800485c <RTC_FromEpoch>:

//
//// Convert epoch time to Date/Time structures
void RTC_FromEpoch(uint32_t epoch, RTC_TimeTypeDef *time, RTC_DateTypeDef *date) {
 800485c:	b590      	push	{r4, r7, lr}
 800485e:	b095      	sub	sp, #84	; 0x54
 8004860:	af00      	add	r7, sp, #0
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	60b9      	str	r1, [r7, #8]
 8004866:	607a      	str	r2, [r7, #4]
	uint32_t b;
	uint32_t c;
	uint32_t d;
	uint32_t e;
	uint32_t m;
	int16_t  year  = 0;
 8004868:	2300      	movs	r3, #0
 800486a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	int16_t  month = 0;
 800486e:	2300      	movs	r3, #0
 8004870:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	int16_t  dow   = 0;
 8004874:	2300      	movs	r3, #0
 8004876:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	int16_t  mday  = 0;
 800487a:	2300      	movs	r3, #0
 800487c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	int16_t  hour  = 0;
 8004880:	2300      	movs	r3, #0
 8004882:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	int16_t  min   = 0;
 8004886:	2300      	movs	r3, #0
 8004888:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	int16_t  sec   = 0;
 800488c:	2300      	movs	r3, #0
 800488e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	uint64_t JD    = 0;
 8004892:	f04f 0300 	mov.w	r3, #0
 8004896:	f04f 0400 	mov.w	r4, #0
 800489a:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	uint64_t JDN   = 0;
 800489e:	f04f 0300 	mov.w	r3, #0
 80048a2:	f04f 0400 	mov.w	r4, #0
 80048a6:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

	// These hardcore math's are taken from http://en.wikipedia.org/wiki/Julian_day

	JD  = ((epoch + 43200) / (86400 >>1 )) + (2440587 << 1) + 1;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f503 4328 	add.w	r3, r3, #43008	; 0xa800
 80048b0:	33c0      	adds	r3, #192	; 0xc0
 80048b2:	4a7c      	ldr	r2, [pc, #496]	; (8004aa4 <RTC_FromEpoch+0x248>)
 80048b4:	fba2 2303 	umull	r2, r3, r2, r3
 80048b8:	0bda      	lsrs	r2, r3, #15
 80048ba:	4b7b      	ldr	r3, [pc, #492]	; (8004aa8 <RTC_FromEpoch+0x24c>)
 80048bc:	4413      	add	r3, r2
 80048be:	f04f 0400 	mov.w	r4, #0
 80048c2:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	JDN = JD >> 1;
 80048c6:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80048ca:	0864      	lsrs	r4, r4, #1
 80048cc:	ea4f 0333 	mov.w	r3, r3, rrx
 80048d0:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    tm = epoch; t1 = tm / 60; sec  = tm - (t1 * 60);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048da:	4a74      	ldr	r2, [pc, #464]	; (8004aac <RTC_FromEpoch+0x250>)
 80048dc:	fba2 2303 	umull	r2, r3, r2, r3
 80048e0:	095b      	lsrs	r3, r3, #5
 80048e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80048e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e6:	b29a      	uxth	r2, r3
 80048e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	4619      	mov	r1, r3
 80048ee:	0109      	lsls	r1, r1, #4
 80048f0:	1acb      	subs	r3, r1, r3
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    tm = t1;    t1 = tm / 60; min  = tm - (t1 * 60);
 80048fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004900:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004904:	4a69      	ldr	r2, [pc, #420]	; (8004aac <RTC_FromEpoch+0x250>)
 8004906:	fba2 2303 	umull	r2, r3, r2, r3
 800490a:	095b      	lsrs	r3, r3, #5
 800490c:	62bb      	str	r3, [r7, #40]	; 0x28
 800490e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004910:	b29a      	uxth	r2, r3
 8004912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004914:	b29b      	uxth	r3, r3
 8004916:	4619      	mov	r1, r3
 8004918:	0109      	lsls	r1, r1, #4
 800491a:	1acb      	subs	r3, r1, r3
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	b29b      	uxth	r3, r3
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	b29b      	uxth	r3, r3
 8004924:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    tm = t1;    t1 = tm / 24; hour = tm - (t1 * 24);
 8004928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800492a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800492c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800492e:	4a60      	ldr	r2, [pc, #384]	; (8004ab0 <RTC_FromEpoch+0x254>)
 8004930:	fba2 2303 	umull	r2, r3, r2, r3
 8004934:	091b      	lsrs	r3, r3, #4
 8004936:	62bb      	str	r3, [r7, #40]	; 0x28
 8004938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800493a:	b29a      	uxth	r2, r3
 800493c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800493e:	b29b      	uxth	r3, r3
 8004940:	4619      	mov	r1, r3
 8004942:	0049      	lsls	r1, r1, #1
 8004944:	440b      	add	r3, r1
 8004946:	00db      	lsls	r3, r3, #3
 8004948:	b29b      	uxth	r3, r3
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	b29b      	uxth	r3, r3
 800494e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

    dow   = JDN % 7;
 8004952:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004956:	f04f 0207 	mov.w	r2, #7
 800495a:	f04f 0300 	mov.w	r3, #0
 800495e:	f7fc f8d5 	bl	8000b0c <__aeabi_uldivmod>
 8004962:	461c      	mov	r4, r3
 8004964:	4613      	mov	r3, r2
 8004966:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    a     = JDN + 32044;
 800496a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800496c:	f503 43fa 	add.w	r3, r3, #32000	; 0x7d00
 8004970:	332c      	adds	r3, #44	; 0x2c
 8004972:	627b      	str	r3, [r7, #36]	; 0x24
    b     = ((4 * a) + 3) / 146097;
 8004974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	3303      	adds	r3, #3
 800497a:	4a4e      	ldr	r2, [pc, #312]	; (8004ab4 <RTC_FromEpoch+0x258>)
 800497c:	fba2 2303 	umull	r2, r3, r2, r3
 8004980:	0bdb      	lsrs	r3, r3, #15
 8004982:	623b      	str	r3, [r7, #32]
    c     = a - ((146097 * b) / 4);
 8004984:	6a3b      	ldr	r3, [r7, #32]
 8004986:	4a4c      	ldr	r2, [pc, #304]	; (8004ab8 <RTC_FromEpoch+0x25c>)
 8004988:	fb02 f303 	mul.w	r3, r2, r3
 800498c:	089b      	lsrs	r3, r3, #2
 800498e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	61fb      	str	r3, [r7, #28]
    d     = ((4 * c) + 3) / 1461;
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	3303      	adds	r3, #3
 800499a:	4a48      	ldr	r2, [pc, #288]	; (8004abc <RTC_FromEpoch+0x260>)
 800499c:	fba2 2303 	umull	r2, r3, r2, r3
 80049a0:	09db      	lsrs	r3, r3, #7
 80049a2:	61bb      	str	r3, [r7, #24]
    e     = c - ((1461 * d) / 4);
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	f240 52b5 	movw	r2, #1461	; 0x5b5
 80049aa:	fb02 f303 	mul.w	r3, r2, r3
 80049ae:	089b      	lsrs	r3, r3, #2
 80049b0:	69fa      	ldr	r2, [r7, #28]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	617b      	str	r3, [r7, #20]
    m     = ((5 * e) + 2) / 153;
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	4613      	mov	r3, r2
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	4413      	add	r3, r2
 80049be:	3302      	adds	r3, #2
 80049c0:	4a3f      	ldr	r2, [pc, #252]	; (8004ac0 <RTC_FromEpoch+0x264>)
 80049c2:	fba2 2303 	umull	r2, r3, r2, r3
 80049c6:	09db      	lsrs	r3, r3, #7
 80049c8:	613b      	str	r3, [r7, #16]
    mday  = e - (((153 * m) + 2) / 5) + 1;
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	b299      	uxth	r1, r3
 80049ce:	693a      	ldr	r2, [r7, #16]
 80049d0:	4613      	mov	r3, r2
 80049d2:	00db      	lsls	r3, r3, #3
 80049d4:	4413      	add	r3, r2
 80049d6:	011a      	lsls	r2, r3, #4
 80049d8:	4413      	add	r3, r2
 80049da:	3302      	adds	r3, #2
 80049dc:	4a39      	ldr	r2, [pc, #228]	; (8004ac4 <RTC_FromEpoch+0x268>)
 80049de:	fba2 2303 	umull	r2, r3, r2, r3
 80049e2:	089b      	lsrs	r3, r3, #2
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	1acb      	subs	r3, r1, r3
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	3301      	adds	r3, #1
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    month = m + 3 - (12 * (m / 10));
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	4932      	ldr	r1, [pc, #200]	; (8004ac4 <RTC_FromEpoch+0x268>)
 80049fa:	fba1 1303 	umull	r1, r3, r1, r3
 80049fe:	08db      	lsrs	r3, r3, #3
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	4619      	mov	r1, r3
 8004a04:	0049      	lsls	r1, r1, #1
 8004a06:	440b      	add	r3, r1
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	3303      	adds	r3, #3
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    year  = (100 * b) + d - 4800 + (m / 10);
 8004a18:	6a3b      	ldr	r3, [r7, #32]
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	0092      	lsls	r2, r2, #2
 8004a20:	4413      	add	r3, r2
 8004a22:	461a      	mov	r2, r3
 8004a24:	0091      	lsls	r1, r2, #2
 8004a26:	461a      	mov	r2, r3
 8004a28:	460b      	mov	r3, r1
 8004a2a:	4413      	add	r3, r2
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	b29a      	uxth	r2, r3
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	4413      	add	r3, r2
 8004a36:	b29a      	uxth	r2, r3
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	4922      	ldr	r1, [pc, #136]	; (8004ac4 <RTC_FromEpoch+0x268>)
 8004a3c:	fba1 1303 	umull	r1, r3, r1, r3
 8004a40:	08db      	lsrs	r3, r3, #3
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	4413      	add	r3, r2
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	f5a3 5396 	sub.w	r3, r3, #4800	; 0x12c0
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    date->Year    = year - 2000;
 8004a52:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	3330      	adds	r3, #48	; 0x30
 8004a5a:	b2da      	uxtb	r2, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	70da      	strb	r2, [r3, #3]
    date->Month   = month;
 8004a60:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004a64:	b2da      	uxtb	r2, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	705a      	strb	r2, [r3, #1]
    date->Date    = mday;
 8004a6a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004a6e:	b2da      	uxtb	r2, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	709a      	strb	r2, [r3, #2]
    date->WeekDay = dow;
 8004a74:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004a78:	b2da      	uxtb	r2, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	701a      	strb	r2, [r3, #0]
    time->Hours   = hour;
 8004a7e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004a82:	b2da      	uxtb	r2, r3
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	701a      	strb	r2, [r3, #0]
    time->Minutes = min;
 8004a88:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004a8c:	b2da      	uxtb	r2, r3
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	705a      	strb	r2, [r3, #1]
    time->Seconds = sec;
 8004a92:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004a96:	b2da      	uxtb	r2, r3
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	709a      	strb	r2, [r3, #2]
}
 8004a9c:	bf00      	nop
 8004a9e:	3754      	adds	r7, #84	; 0x54
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd90      	pop	{r4, r7, pc}
 8004aa4:	c22e4507 	.word	0xc22e4507
 8004aa8:	004a7b17 	.word	0x004a7b17
 8004aac:	88888889 	.word	0x88888889
 8004ab0:	aaaaaaab 	.word	0xaaaaaaab
 8004ab4:	396b06bd 	.word	0x396b06bd
 8004ab8:	00023ab1 	.word	0x00023ab1
 8004abc:	166db073 	.word	0x166db073
 8004ac0:	d62b80d7 	.word	0xd62b80d7
 8004ac4:	cccccccd 	.word	0xcccccccd

08004ac8 <LL_AHB3_GRP1_EnableClock>:
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b085      	sub	sp, #20
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8004ad0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ad4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ad6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8004ae0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ae4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4013      	ands	r3, r2
 8004aea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004aec:	68fb      	ldr	r3, [r7, #12]
}
 8004aee:	bf00      	nop
 8004af0:	3714      	adds	r7, #20
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr

08004afa <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004afa:	b580      	push	{r7, lr}
 8004afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8004afe:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004b02:	f7ff ffe1 	bl	8004ac8 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004b06:	2200      	movs	r2, #0
 8004b08:	210f      	movs	r1, #15
 8004b0a:	f06f 0001 	mvn.w	r0, #1
 8004b0e:	f002 ff34 	bl	800797a <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 5, 0);
 8004b12:	2200      	movs	r2, #0
 8004b14:	2105      	movs	r1, #5
 8004b16:	202e      	movs	r0, #46	; 0x2e
 8004b18:	f002 ff2f 	bl	800797a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8004b1c:	202e      	movs	r0, #46	; 0x2e
 8004b1e:	f002 ff46 	bl	80079ae <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */
  HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn , 15, 0);
 8004b22:	2200      	movs	r2, #0
 8004b24:	210f      	movs	r1, #15
 8004b26:	202c      	movs	r0, #44	; 0x2c
 8004b28:	f002 ff27 	bl	800797a <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn , 15, 0);
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	210f      	movs	r1, #15
 8004b30:	202d      	movs	r0, #45	; 0x2d
 8004b32:	f002 ff22 	bl	800797a <HAL_NVIC_SetPriority>
  /* USER CODE END MspInit 1 */
}
 8004b36:	bf00      	nop
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8004b3a:	b480      	push	{r7}
 8004b3c:	b085      	sub	sp, #20
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8004b42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b46:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004b48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004b52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b56:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
}
 8004b60:	bf00      	nop
 8004b62:	3714      	adds	r7, #20
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b08c      	sub	sp, #48	; 0x30
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004b74:	2300      	movs	r3, #0
 8004b76:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	6879      	ldr	r1, [r7, #4]
 8004b80:	2019      	movs	r0, #25
 8004b82:	f002 fefa 	bl	800797a <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004b86:	2019      	movs	r0, #25
 8004b88:	f002 ff11 	bl	80079ae <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004b8c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004b90:	f7ff ffd3 	bl	8004b3a <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004b94:	f107 0208 	add.w	r2, r7, #8
 8004b98:	f107 030c 	add.w	r3, r7, #12
 8004b9c:	4611      	mov	r1, r2
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f007 fd14 	bl	800c5cc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8004ba4:	f007 fcfc 	bl	800c5a0 <HAL_RCC_GetPCLK2Freq>
 8004ba8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bac:	4a12      	ldr	r2, [pc, #72]	; (8004bf8 <HAL_InitTick+0x8c>)
 8004bae:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb2:	0c9b      	lsrs	r3, r3, #18
 8004bb4:	3b01      	subs	r3, #1
 8004bb6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8004bb8:	4b10      	ldr	r3, [pc, #64]	; (8004bfc <HAL_InitTick+0x90>)
 8004bba:	4a11      	ldr	r2, [pc, #68]	; (8004c00 <HAL_InitTick+0x94>)
 8004bbc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8004bbe:	4b0f      	ldr	r3, [pc, #60]	; (8004bfc <HAL_InitTick+0x90>)
 8004bc0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004bc4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8004bc6:	4a0d      	ldr	r2, [pc, #52]	; (8004bfc <HAL_InitTick+0x90>)
 8004bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bca:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8004bcc:	4b0b      	ldr	r3, [pc, #44]	; (8004bfc <HAL_InitTick+0x90>)
 8004bce:	2200      	movs	r2, #0
 8004bd0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004bd2:	4b0a      	ldr	r3, [pc, #40]	; (8004bfc <HAL_InitTick+0x90>)
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8004bd8:	4808      	ldr	r0, [pc, #32]	; (8004bfc <HAL_InitTick+0x90>)
 8004bda:	f008 fd61 	bl	800d6a0 <HAL_TIM_Base_Init>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d104      	bne.n	8004bee <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8004be4:	4805      	ldr	r0, [pc, #20]	; (8004bfc <HAL_InitTick+0x90>)
 8004be6:	f008 fe21 	bl	800d82c <HAL_TIM_Base_Start_IT>
 8004bea:	4603      	mov	r3, r0
 8004bec:	e000      	b.n	8004bf0 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3730      	adds	r7, #48	; 0x30
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	431bde83 	.word	0x431bde83
 8004bfc:	2002880c 	.word	0x2002880c
 8004c00:	40012c00 	.word	0x40012c00

08004c04 <HAL_TSC_Init>:
  *         in the TSC_InitTypeDef structure and initialize the associated handle.
  * @param  htsc TSC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_Init(TSC_HandleTypeDef *htsc)
{
 8004c04:	b590      	push	{r4, r7, lr}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  /* Check TSC handle allocation */
  if (htsc == NULL)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d101      	bne.n	8004c16 <HAL_TSC_Init+0x12>
  {
    return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e072      	b.n	8004cfc <HAL_TSC_Init+0xf8>
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));
  assert_param(IS_TSC_GROUP(htsc->Init.ChannelIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.ShieldIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.SamplingIOs));

  if (htsc->State == HAL_TSC_STATE_RESET)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d106      	bne.n	8004c30 <HAL_TSC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htsc->Lock = HAL_UNLOCKED;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    htsc->MspInitCallback(htsc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_TSC_MspInit(htsc);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f001 f81c 	bl	8005c68 <HAL_TSC_MspInit>
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2202      	movs	r2, #2
 8004c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /*--------------------------------------------------------------------------*/
  /* Set TSC parameters */

  /* Enable TSC */
  htsc->Instance->CR = TSC_CR_TSCE;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	601a      	str	r2, [r3, #0]

  /* Set all functions */
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	6819      	ldr	r1, [r3, #0]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685a      	ldr	r2, [r3, #4]
                         htsc->Init.CTPulseLowLength |
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	689b      	ldr	r3, [r3, #8]
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8004c4e:	431a      	orrs	r2, r3
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	045b      	lsls	r3, r3, #17
                         htsc->Init.CTPulseLowLength |
 8004c56:	431a      	orrs	r2, r3
                         htsc->Init.SpreadSpectrumPrescaler |
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	695b      	ldr	r3, [r3, #20]
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 8004c5c:	431a      	orrs	r2, r3
                         htsc->Init.PulseGeneratorPrescaler |
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	699b      	ldr	r3, [r3, #24]
                         htsc->Init.SpreadSpectrumPrescaler |
 8004c62:	431a      	orrs	r2, r3
                         htsc->Init.MaxCountValue |
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	69db      	ldr	r3, [r3, #28]
                         htsc->Init.PulseGeneratorPrescaler |
 8004c68:	431a      	orrs	r2, r3
                         htsc->Init.SynchroPinPolarity |
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         htsc->Init.MaxCountValue |
 8004c6e:	431a      	orrs	r2, r3
                         htsc->Init.AcquisitionMode);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         htsc->Init.SynchroPinPolarity |
 8004c74:	431a      	orrs	r2, r3
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	430a      	orrs	r2, r1
 8004c7c:	601a      	str	r2, [r3, #0]

  /* Spread spectrum */
  if (htsc->Init.SpreadSpectrum == ENABLE)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	7b1b      	ldrb	r3, [r3, #12]
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d107      	bne.n	8004c96 <HAL_TSC_Init+0x92>
  {
    htsc->Instance->CR |= TSC_CR_SSE;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004c94:	601a      	str	r2, [r3, #0]
  }

  /* Disable Schmitt trigger hysteresis on all used TSC IOs */
  htsc->Instance->IOHCR = (~(htsc->Init.ChannelIOs | htsc->Init.ShieldIOs | htsc->Init.SamplingIOs));
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c9e:	431a      	orrs	r2, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca4:	431a      	orrs	r2, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	43d2      	mvns	r2, r2
 8004cac:	611a      	str	r2, [r3, #16]

  /* Set channel and shield IOs */
  htsc->Instance->IOCCR = (htsc->Init.ChannelIOs | htsc->Init.ShieldIOs);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	430a      	orrs	r2, r1
 8004cbc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set sampling IOs */
  htsc->Instance->IOSCR = htsc->Init.SamplingIOs;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004cc6:	621a      	str	r2, [r3, #32]

  /* Set the groups to be acquired */
  htsc->Instance->IOGCSR = TSC_extract_groups(htsc->Init.ChannelIOs);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681c      	ldr	r4, [r3, #0]
 8004cd0:	4610      	mov	r0, r2
 8004cd2:	f000 f952 	bl	8004f7a <TSC_extract_groups>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	6323      	str	r3, [r4, #48]	; 0x30

  /* Disable interrupts */
  htsc->Instance->IER &= (~(TSC_IT_EOA | TSC_IT_MCE));
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	685a      	ldr	r2, [r3, #4]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f022 0203 	bic.w	r2, r2, #3
 8004ce8:	605a      	str	r2, [r3, #4]

  /* Clear flags */
  htsc->Instance->ICR = (TSC_FLAG_EOA | TSC_FLAG_MCE);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	2203      	movs	r2, #3
 8004cf0:	609a      	str	r2, [r3, #8]

  /*--------------------------------------------------------------------------*/

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_READY;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8004cfa:	2300      	movs	r3, #0
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	370c      	adds	r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd90      	pop	{r4, r7, pc}

08004d04 <HAL_TSC_Start_IT>:
  * @param  htsc Pointer to a TSC_HandleTypeDef structure that contains
  *         the configuration information for the specified TSC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_TSC_Start_IT(TSC_HandleTypeDef *htsc)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));

  /* Process locked */
  __HAL_LOCK(htsc);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d101      	bne.n	8004d1a <HAL_TSC_Start_IT+0x16>
 8004d16:	2302      	movs	r3, #2
 8004d18:	e04b      	b.n	8004db2 <HAL_TSC_Start_IT+0xae>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Change TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2202      	movs	r2, #2
 8004d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable end of acquisition interrupt */
  __HAL_TSC_ENABLE_IT(htsc, TSC_IT_EOA);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	685a      	ldr	r2, [r3, #4]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f042 0201 	orr.w	r2, r2, #1
 8004d38:	605a      	str	r2, [r3, #4]

  /* Enable max count error interrupt (optional) */
  if (htsc->Init.MaxCountInterrupt == ENABLE)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d108      	bne.n	8004d56 <HAL_TSC_Start_IT+0x52>
  {
    __HAL_TSC_ENABLE_IT(htsc, TSC_IT_MCE);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	685a      	ldr	r2, [r3, #4]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f042 0202 	orr.w	r2, r2, #2
 8004d52:	605a      	str	r2, [r3, #4]
 8004d54:	e007      	b.n	8004d66 <HAL_TSC_Start_IT+0x62>
  }
  else
  {
    __HAL_TSC_DISABLE_IT(htsc, TSC_IT_MCE);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	685a      	ldr	r2, [r3, #4]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f022 0202 	bic.w	r2, r2, #2
 8004d64:	605a      	str	r2, [r3, #4]
  }

  /* Clear flags */
  __HAL_TSC_CLEAR_FLAG(htsc, (TSC_FLAG_EOA | TSC_FLAG_MCE));
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2203      	movs	r2, #3
 8004d6c:	609a      	str	r2, [r3, #8]

  /* Set touch sensing IOs not acquired to the specified IODefaultMode */
  if (htsc->Init.IODefaultMode == TSC_IODEF_OUT_PP_LOW)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d108      	bne.n	8004d88 <HAL_TSC_Start_IT+0x84>
  {
    __HAL_TSC_SET_IODEF_OUTPPLOW(htsc);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f022 0210 	bic.w	r2, r2, #16
 8004d84:	601a      	str	r2, [r3, #0]
 8004d86:	e007      	b.n	8004d98 <HAL_TSC_Start_IT+0x94>
  }
  else
  {
    __HAL_TSC_SET_IODEF_INFLOAT(htsc);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f042 0210 	orr.w	r2, r2, #16
 8004d96:	601a      	str	r2, [r3, #0]
  }

  /* Launch the acquisition */
  __HAL_TSC_START_ACQ(htsc);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f042 0202 	orr.w	r2, r2, #2
 8004da6:	601a      	str	r2, [r3, #0]

  /* Process unlocked */
  __HAL_UNLOCK(htsc);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	370c      	adds	r7, #12
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr

08004dbe <HAL_TSC_GroupGetStatus>:
  *         the configuration information for the specified TSC.
  * @param  gx_index Index of the group
  * @retval Group status
  */
TSC_GroupStatusTypeDef HAL_TSC_GroupGetStatus(TSC_HandleTypeDef *htsc, uint32_t gx_index)
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	b083      	sub	sp, #12
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
 8004dc6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));
  assert_param(IS_TSC_GROUP_INDEX(gx_index));

  /* Return the group status */
  return (__HAL_TSC_GET_GROUP_STATUS(htsc, gx_index));
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	f003 030f 	and.w	r3, r3, #15
 8004dd4:	3310      	adds	r3, #16
 8004dd6:	2101      	movs	r1, #1
 8004dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8004ddc:	401a      	ands	r2, r3
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	f003 030f 	and.w	r3, r3, #15
 8004de4:	3310      	adds	r3, #16
 8004de6:	2101      	movs	r1, #1
 8004de8:	fa01 f303 	lsl.w	r3, r1, r3
 8004dec:	429a      	cmp	r2, r3
 8004dee:	bf0c      	ite	eq
 8004df0:	2301      	moveq	r3, #1
 8004df2:	2300      	movne	r3, #0
 8004df4:	b2db      	uxtb	r3, r3
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	370c      	adds	r7, #12
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr

08004e02 <HAL_TSC_GroupGetValue>:
  *         the configuration information for the specified TSC.
  * @param  gx_index Index of the group
  * @retval Acquisition measure
  */
uint32_t HAL_TSC_GroupGetValue(TSC_HandleTypeDef *htsc, uint32_t gx_index)
{
 8004e02:	b480      	push	{r7}
 8004e04:	b083      	sub	sp, #12
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
 8004e0a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));
  assert_param(IS_TSC_GROUP_INDEX(gx_index));

  /* Return the group acquisition counter */
  return htsc->Instance->IOGXCR[gx_index];
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	330c      	adds	r3, #12
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	4413      	add	r3, r2
 8004e18:	685b      	ldr	r3, [r3, #4]
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	370c      	adds	r7, #12
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr

08004e26 <HAL_TSC_IOConfig>:
  *         the configuration information for the specified TSC.
  * @param  config Pointer to the configuration structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_IOConfig(TSC_HandleTypeDef *htsc, TSC_IOConfigTypeDef *config)
{
 8004e26:	b590      	push	{r4, r7, lr}
 8004e28:	b083      	sub	sp, #12
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
 8004e2e:	6039      	str	r1, [r7, #0]
  assert_param(IS_TSC_GROUP(config->ChannelIOs));
  assert_param(IS_TSC_GROUP(config->ShieldIOs));
  assert_param(IS_TSC_GROUP(config->SamplingIOs));

  /* Process locked */
  __HAL_LOCK(htsc);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d101      	bne.n	8004e3e <HAL_TSC_IOConfig+0x18>
 8004e3a:	2302      	movs	r3, #2
 8004e3c:	e032      	b.n	8004ea4 <HAL_TSC_IOConfig+0x7e>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2201      	movs	r2, #1
 8004e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Stop acquisition */
  __HAL_TSC_STOP_ACQ(htsc);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f022 0202 	bic.w	r2, r2, #2
 8004e54:	601a      	str	r2, [r3, #0]

  /* Disable Schmitt trigger hysteresis on all used TSC IOs */
  htsc->Instance->IOHCR = (~(config->ChannelIOs | config->ShieldIOs | config->SamplingIOs));
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	431a      	orrs	r2, r3
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	431a      	orrs	r2, r3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	43d2      	mvns	r2, r2
 8004e6c:	611a      	str	r2, [r3, #16]

  /* Set channel and shield IOs */
  htsc->Instance->IOCCR = (config->ChannelIOs | config->ShieldIOs);
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	6819      	ldr	r1, [r3, #0]
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	685a      	ldr	r2, [r3, #4]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	430a      	orrs	r2, r1
 8004e7c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set sampling IOs */
  htsc->Instance->IOSCR = config->SamplingIOs;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	683a      	ldr	r2, [r7, #0]
 8004e84:	6892      	ldr	r2, [r2, #8]
 8004e86:	621a      	str	r2, [r3, #32]

  /* Set groups to be acquired */
  htsc->Instance->IOGCSR = TSC_extract_groups(config->ChannelIOs);
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681c      	ldr	r4, [r3, #0]
 8004e90:	4610      	mov	r0, r2
 8004e92:	f000 f872 	bl	8004f7a <TSC_extract_groups>
 8004e96:	4603      	mov	r3, r0
 8004e98:	6323      	str	r3, [r4, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(htsc);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd90      	pop	{r4, r7, pc}

08004eac <HAL_TSC_IODischarge>:
  *         the configuration information for the specified TSC.
  * @param  choice This parameter can be set to ENABLE or DISABLE.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_IODischarge(TSC_HandleTypeDef *htsc, FunctionalState choice)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));

  /* Process locked */
  __HAL_LOCK(htsc);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d101      	bne.n	8004ec6 <HAL_TSC_IODischarge+0x1a>
 8004ec2:	2302      	movs	r3, #2
 8004ec4:	e01c      	b.n	8004f00 <HAL_TSC_IODischarge+0x54>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2201      	movs	r2, #1
 8004eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (choice == ENABLE)
 8004ece:	78fb      	ldrb	r3, [r7, #3]
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d108      	bne.n	8004ee6 <HAL_TSC_IODischarge+0x3a>
  {
    __HAL_TSC_SET_IODEF_OUTPPLOW(htsc);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f022 0210 	bic.w	r2, r2, #16
 8004ee2:	601a      	str	r2, [r3, #0]
 8004ee4:	e007      	b.n	8004ef6 <HAL_TSC_IODischarge+0x4a>
  }
  else
  {
    __HAL_TSC_SET_IODEF_INFLOAT(htsc);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f042 0210 	orr.w	r2, r2, #16
 8004ef4:	601a      	str	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(htsc);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return the group acquisition counter */
  return HAL_OK;
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	370c      	adds	r7, #12
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <HAL_TSC_IRQHandler>:
  * @param  htsc Pointer to a TSC_HandleTypeDef structure that contains
  *         the configuration information for the specified TSC.
  * @retval None
  */
void HAL_TSC_IRQHandler(TSC_HandleTypeDef *htsc)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));

  /* Check if the end of acquisition occurred */
  if (__HAL_TSC_GET_FLAG(htsc, TSC_FLAG_EOA) != RESET)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	f003 0301 	and.w	r3, r3, #1
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d103      	bne.n	8004f2a <HAL_TSC_IRQHandler+0x1e>
  {
    /* Clear EOA flag */
    __HAL_TSC_CLEAR_FLAG(htsc, TSC_FLAG_EOA);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	2201      	movs	r2, #1
 8004f28:	609a      	str	r2, [r3, #8]
  }

  /* Check if max count error occurred */
  if (__HAL_TSC_GET_FLAG(htsc, TSC_FLAG_MCE) != RESET)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	f003 0302 	and.w	r3, r3, #2
 8004f34:	2b02      	cmp	r3, #2
 8004f36:	d10b      	bne.n	8004f50 <HAL_TSC_IRQHandler+0x44>
  {
    /* Clear MCE flag */
    __HAL_TSC_CLEAR_FLAG(htsc, TSC_FLAG_MCE);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2202      	movs	r2, #2
 8004f3e:	609a      	str	r2, [r3, #8]
    /* Change TSC state */
    htsc->State = HAL_TSC_STATE_ERROR;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2203      	movs	r2, #3
 8004f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
#if (USE_HAL_TSC_REGISTER_CALLBACKS == 1)
    htsc->ErrorCallback(htsc);
#else
    /* Conversion completed callback */
    HAL_TSC_ErrorCallback(htsc);
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f000 f80c 	bl	8004f66 <HAL_TSC_ErrorCallback>
#else
    /* Conversion completed callback */
    HAL_TSC_ConvCpltCallback(htsc);
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }
}
 8004f4e:	e006      	b.n	8004f5e <HAL_TSC_IRQHandler+0x52>
    htsc->State = HAL_TSC_STATE_READY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    HAL_TSC_ConvCpltCallback(htsc);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 fac5 	bl	80054e8 <HAL_TSC_ConvCpltCallback>
}
 8004f5e:	bf00      	nop
 8004f60:	3708      	adds	r7, #8
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}

08004f66 <HAL_TSC_ErrorCallback>:
  * @param  htsc Pointer to a TSC_HandleTypeDef structure that contains
  *         the configuration information for the specified TSC.
  * @retval None
  */
__weak void HAL_TSC_ErrorCallback(TSC_HandleTypeDef *htsc)
{
 8004f66:	b480      	push	{r7}
 8004f68:	b083      	sub	sp, #12
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
  UNUSED(htsc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TSC_ErrorCallback could be implemented in the user file.
   */
}
 8004f6e:	bf00      	nop
 8004f70:	370c      	adds	r7, #12
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr

08004f7a <TSC_extract_groups>:
  * @brief  Utility function used to set the acquired groups mask.
  * @param  iomask Channels IOs mask
  * @retval Acquired groups mask
  */
static uint32_t TSC_extract_groups(uint32_t iomask)
{
 8004f7a:	b480      	push	{r7}
 8004f7c:	b085      	sub	sp, #20
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
  uint32_t groups = 0UL;
 8004f82:	2300      	movs	r3, #0
 8004f84:	60fb      	str	r3, [r7, #12]
  uint32_t idx;

  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8004f86:	2300      	movs	r3, #0
 8004f88:	60bb      	str	r3, [r7, #8]
 8004f8a:	e011      	b.n	8004fb0 <TSC_extract_groups+0x36>
  {
    if ((iomask & (0x0FUL << (idx * 4UL))) != 0UL )
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	220f      	movs	r2, #15
 8004f92:	409a      	lsls	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4013      	ands	r3, r2
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d006      	beq.n	8004faa <TSC_extract_groups+0x30>
    {
      groups |= (1UL << idx);
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	60fb      	str	r3, [r7, #12]
  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	3301      	adds	r3, #1
 8004fae:	60bb      	str	r3, [r7, #8]
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	2b06      	cmp	r3, #6
 8004fb4:	d9ea      	bls.n	8004f8c <TSC_extract_groups+0x12>
    }
  }

  return groups;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3714      	adds	r7, #20
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004fc8:	bf00      	nop
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr

08004fd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004fd2:	b480      	push	{r7}
 8004fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004fd6:	e7fe      	b.n	8004fd6 <HardFault_Handler+0x4>

08004fd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004fdc:	e7fe      	b.n	8004fdc <MemManage_Handler+0x4>

08004fde <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004fde:	b480      	push	{r7}
 8004fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004fe2:	e7fe      	b.n	8004fe2 <BusFault_Handler+0x4>

08004fe4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004fe8:	e7fe      	b.n	8004fe8 <UsageFault_Handler+0x4>

08004fea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004fea:	b480      	push	{r7}
 8004fec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004fee:	bf00      	nop
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8004ffc:	2004      	movs	r0, #4
 8004ffe:	f003 f9e5 	bl	80083cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  // received message from secondary MCU that a message is ready
//  osSemaphoreRelease(interProcessorInterruptSemHandle);
  osThreadFlagsSet(interProcTaskHandle, 0x00000004U);
 8005002:	4b04      	ldr	r3, [pc, #16]	; (8005014 <EXTI2_IRQHandler+0x1c>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	2104      	movs	r1, #4
 8005008:	4618      	mov	r0, r3
 800500a:	f00b fa3b 	bl	8010484 <osThreadFlagsSet>
  /* USER CODE END EXTI2_IRQn 1 */
}
 800500e:	bf00      	nop
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	20028094 	.word	0x20028094

08005018 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800501c:	4802      	ldr	r0, [pc, #8]	; (8005028 <DMA1_Channel1_IRQHandler+0x10>)
 800501e:	f002 fed6 	bl	8007dce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005022:	bf00      	nop
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	20027ae0 	.word	0x20027ae0

0800502c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8005030:	4802      	ldr	r0, [pc, #8]	; (800503c <USB_LP_IRQHandler+0x10>)
 8005032:	f005 fb5f 	bl	800a6f4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8005036:	bf00      	nop
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	20029f04 	.word	0x20029f04

08005040 <COMP_IRQHandler>:

/**
  * @brief This function handles COMP1 and COMP2 interrupts through EXTI lines 20 and 21.
  */
void COMP_IRQHandler(void)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP_IRQn 0 */

  /* USER CODE END COMP_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 8005044:	4802      	ldr	r0, [pc, #8]	; (8005050 <COMP_IRQHandler+0x10>)
 8005046:	f002 fb51 	bl	80076ec <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP_IRQn 1 */

  /* USER CODE END COMP_IRQn 1 */
}
 800504a:	bf00      	nop
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	200280c0 	.word	0x200280c0

08005054 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8005058:	2020      	movs	r0, #32
 800505a:	f003 f9b7 	bl	80083cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800505e:	bf00      	nop
 8005060:	bd80      	pop	{r7, pc}
	...

08005064 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005068:	4803      	ldr	r0, [pc, #12]	; (8005078 <TIM1_UP_TIM16_IRQHandler+0x14>)
 800506a:	f008 fe51 	bl	800dd10 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800506e:	4803      	ldr	r0, [pc, #12]	; (800507c <TIM1_UP_TIM16_IRQHandler+0x18>)
 8005070:	f008 fe4e 	bl	800dd10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8005074:	bf00      	nop
 8005076:	bd80      	pop	{r7, pc}
 8005078:	2002880c 	.word	0x2002880c
 800507c:	200288a4 	.word	0x200288a4

08005080 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005084:	4802      	ldr	r0, [pc, #8]	; (8005090 <TIM2_IRQHandler+0x10>)
 8005086:	f008 fe43 	bl	800dd10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800508a:	bf00      	nop
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	20028858 	.word	0x20028858

08005094 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005098:	4802      	ldr	r0, [pc, #8]	; (80050a4 <I2C1_EV_IRQHandler+0x10>)
 800509a:	f003 fdd1 	bl	8008c40 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800509e:	bf00      	nop
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	20028250 	.word	0x20028250

080050a8 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80050ac:	f003 f9a6 	bl	80083fc <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80050b0:	bf00      	nop
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <IPCC_C1_TX_IRQHandler>:

/* USER CODE BEGIN 1 */
void IPCC_C1_TX_IRQHandler(void)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	af00      	add	r7, sp, #0
  HW_IPCC_Tx_Handler();
 80050b8:	f014 fa12 	bl	80194e0 <HW_IPCC_Tx_Handler>

  return;
 80050bc:	bf00      	nop
}
 80050be:	bd80      	pop	{r7, pc}

080050c0 <IPCC_C1_RX_IRQHandler>:
void IPCC_C1_RX_IRQHandler(void)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	af00      	add	r7, sp, #0
  HW_IPCC_Rx_Handler();
 80050c4:	f014 f9b2 	bl	801942c <HW_IPCC_Rx_Handler>
  return;
 80050c8:	bf00      	nop
}
 80050ca:	bd80      	pop	{r7, pc}

080050cc <TSC_IRQHandler>:

/**
  * @brief This function handles TSC global interrupt.
  */
void TSC_IRQHandler(void)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TSC_IRQn 0 */

  /* USER CODE END TSC_IRQn 0 */
  HAL_TSC_IRQHandler(&htsc);
 80050d0:	4802      	ldr	r0, [pc, #8]	; (80050dc <TSC_IRQHandler+0x10>)
 80050d2:	f7ff ff1b 	bl	8004f0c <HAL_TSC_IRQHandler>
  /* USER CODE BEGIN TSC_IRQn 1 */

  /* USER CODE END TSC_IRQn 1 */
}
 80050d6:	bf00      	nop
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	20028924 	.word	0x20028924

080050e0 <logApplication>:
 * @param[in]     aFormat     User string format.
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
void logApplication(appliLogLevel_t aLogLevel, appliLogRegion_t aLogRegion, const char *aFormat, ...)
{
 80050e0:	b40c      	push	{r2, r3}
 80050e2:	b480      	push	{r7}
 80050e4:	b083      	sub	sp, #12
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	4603      	mov	r3, r0
 80050ea:	460a      	mov	r2, r1
 80050ec:	71fb      	strb	r3, [r7, #7]
 80050ee:	4613      	mov	r3, r2
 80050f0:	71bb      	strb	r3, [r7, #6]
  }else
  {
    /* Print nothing */
  }
#endif /* CFG_DEBUG_TRACE */
}
 80050f2:	bf00      	nop
 80050f4:	370c      	adds	r7, #12
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	b002      	add	sp, #8
 80050fe:	4770      	bx	lr

08005100 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005100:	b480      	push	{r7}
 8005102:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8005104:	4b26      	ldr	r3, [pc, #152]	; (80051a0 <SystemInit+0xa0>)
 8005106:	2200      	movs	r2, #0
 8005108:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 800510a:	4b25      	ldr	r3, [pc, #148]	; (80051a0 <SystemInit+0xa0>)
 800510c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005110:	4a23      	ldr	r2, [pc, #140]	; (80051a0 <SystemInit+0xa0>)
 8005112:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005116:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800511a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005124:	f043 0301 	orr.w	r3, r3, #1
 8005128:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800512a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800512e:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8005132:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8005134:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800513e:	4b19      	ldr	r3, [pc, #100]	; (80051a4 <SystemInit+0xa4>)
 8005140:	4013      	ands	r3, r2
 8005142:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8005144:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005148:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800514c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005150:	f023 0305 	bic.w	r3, r3, #5
 8005154:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8005158:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800515c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005160:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005164:	f023 0301 	bic.w	r3, r3, #1
 8005168:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800516c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005170:	4a0d      	ldr	r2, [pc, #52]	; (80051a8 <SystemInit+0xa8>)
 8005172:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8005174:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005178:	4a0b      	ldr	r2, [pc, #44]	; (80051a8 <SystemInit+0xa8>)
 800517a:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800517c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005186:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800518a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800518c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005190:	2200      	movs	r2, #0
 8005192:	619a      	str	r2, [r3, #24]
}
 8005194:	bf00      	nop
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr
 800519e:	bf00      	nop
 80051a0:	e000ed00 	.word	0xe000ed00
 80051a4:	faf6fefb 	.word	0xfaf6fefb
 80051a8:	22041000 	.word	0x22041000

080051ac <LL_AHB2_GRP1_EnableClock>:
{
 80051ac:	b480      	push	{r7}
 80051ae:	b085      	sub	sp, #20
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80051b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80051c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4013      	ands	r3, r2
 80051ce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80051d0:	68fb      	ldr	r3, [r7, #12]
}
 80051d2:	bf00      	nop
 80051d4:	3714      	adds	r7, #20
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr

080051de <LL_APB1_GRP1_EnableClock>:
{
 80051de:	b480      	push	{r7}
 80051e0:	b085      	sub	sp, #20
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80051e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051ea:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80051ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80051f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051fa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4013      	ands	r3, r2
 8005200:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005202:	68fb      	ldr	r3, [r7, #12]
}
 8005204:	bf00      	nop
 8005206:	3714      	adds	r7, #20
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <LL_APB2_GRP1_EnableClock>:
{
 8005210:	b480      	push	{r7}
 8005212:	b085      	sub	sp, #20
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8005218:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800521c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800521e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4313      	orrs	r3, r2
 8005226:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005228:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800522c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4013      	ands	r3, r2
 8005232:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005234:	68fb      	ldr	r3, [r7, #12]
}
 8005236:	bf00      	nop
 8005238:	3714      	adds	r7, #20
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr
	...

08005244 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim16;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b08e      	sub	sp, #56	; 0x38
 8005248:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800524a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800524e:	2200      	movs	r2, #0
 8005250:	601a      	str	r2, [r3, #0]
 8005252:	605a      	str	r2, [r3, #4]
 8005254:	609a      	str	r2, [r3, #8]
 8005256:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005258:	f107 031c 	add.w	r3, r7, #28
 800525c:	2200      	movs	r2, #0
 800525e:	601a      	str	r2, [r3, #0]
 8005260:	605a      	str	r2, [r3, #4]
 8005262:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005264:	463b      	mov	r3, r7
 8005266:	2200      	movs	r2, #0
 8005268:	601a      	str	r2, [r3, #0]
 800526a:	605a      	str	r2, [r3, #4]
 800526c:	609a      	str	r2, [r3, #8]
 800526e:	60da      	str	r2, [r3, #12]
 8005270:	611a      	str	r2, [r3, #16]
 8005272:	615a      	str	r2, [r3, #20]
 8005274:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8005276:	4b3d      	ldr	r3, [pc, #244]	; (800536c <MX_TIM2_Init+0x128>)
 8005278:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800527c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1599;
 800527e:	4b3b      	ldr	r3, [pc, #236]	; (800536c <MX_TIM2_Init+0x128>)
 8005280:	f240 623f 	movw	r2, #1599	; 0x63f
 8005284:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8005286:	4b39      	ldr	r3, [pc, #228]	; (800536c <MX_TIM2_Init+0x128>)
 8005288:	2220      	movs	r2, #32
 800528a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 800528c:	4b37      	ldr	r3, [pc, #220]	; (800536c <MX_TIM2_Init+0x128>)
 800528e:	220a      	movs	r2, #10
 8005290:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005292:	4b36      	ldr	r3, [pc, #216]	; (800536c <MX_TIM2_Init+0x128>)
 8005294:	2200      	movs	r2, #0
 8005296:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005298:	4b34      	ldr	r3, [pc, #208]	; (800536c <MX_TIM2_Init+0x128>)
 800529a:	2280      	movs	r2, #128	; 0x80
 800529c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800529e:	4833      	ldr	r0, [pc, #204]	; (800536c <MX_TIM2_Init+0x128>)
 80052a0:	f008 f9fe 	bl	800d6a0 <HAL_TIM_Base_Init>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d001      	beq.n	80052ae <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80052aa:	f7fe fb87 	bl	80039bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80052ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052b2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80052b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80052b8:	4619      	mov	r1, r3
 80052ba:	482c      	ldr	r0, [pc, #176]	; (800536c <MX_TIM2_Init+0x128>)
 80052bc:	f008 ffce 	bl	800e25c <HAL_TIM_ConfigClockSource>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d001      	beq.n	80052ca <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80052c6:	f7fe fb79 	bl	80039bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80052ca:	4828      	ldr	r0, [pc, #160]	; (800536c <MX_TIM2_Init+0x128>)
 80052cc:	f008 fb5d 	bl	800d98a <HAL_TIM_PWM_Init>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d001      	beq.n	80052da <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80052d6:	f7fe fb71 	bl	80039bc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80052da:	4824      	ldr	r0, [pc, #144]	; (800536c <MX_TIM2_Init+0x128>)
 80052dc:	f008 faf4 	bl	800d8c8 <HAL_TIM_OC_Init>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d001      	beq.n	80052ea <MX_TIM2_Init+0xa6>
  {
    Error_Handler();
 80052e6:	f7fe fb69 	bl	80039bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80052ea:	2320      	movs	r3, #32
 80052ec:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80052ee:	2300      	movs	r3, #0
 80052f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80052f2:	f107 031c 	add.w	r3, r7, #28
 80052f6:	4619      	mov	r1, r3
 80052f8:	481c      	ldr	r0, [pc, #112]	; (800536c <MX_TIM2_Init+0x128>)
 80052fa:	f009 fc2b 	bl	800eb54 <HAL_TIMEx_MasterConfigSynchronization>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d001      	beq.n	8005308 <MX_TIM2_Init+0xc4>
  {
    Error_Handler();
 8005304:	f7fe fb5a 	bl	80039bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005308:	2360      	movs	r3, #96	; 0x60
 800530a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 5;
 800530c:	2305      	movs	r3, #5
 800530e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005310:	2300      	movs	r3, #0
 8005312:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005314:	2300      	movs	r3, #0
 8005316:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005318:	463b      	mov	r3, r7
 800531a:	2204      	movs	r2, #4
 800531c:	4619      	mov	r1, r3
 800531e:	4813      	ldr	r0, [pc, #76]	; (800536c <MX_TIM2_Init+0x128>)
 8005320:	f008 fe8c 	bl	800e03c <HAL_TIM_PWM_ConfigChannel>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d001      	beq.n	800532e <MX_TIM2_Init+0xea>
  {
    Error_Handler();
 800532a:	f7fe fb47 	bl	80039bc <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_2);
 800532e:	4b0f      	ldr	r3, [pc, #60]	; (800536c <MX_TIM2_Init+0x128>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	699a      	ldr	r2, [r3, #24]
 8005334:	4b0d      	ldr	r3, [pc, #52]	; (800536c <MX_TIM2_Init+0x128>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800533c:	619a      	str	r2, [r3, #24]
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800533e:	2300      	movs	r3, #0
 8005340:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8005342:	2300      	movs	r3, #0
 8005344:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005346:	463b      	mov	r3, r7
 8005348:	220c      	movs	r2, #12
 800534a:	4619      	mov	r1, r3
 800534c:	4807      	ldr	r0, [pc, #28]	; (800536c <MX_TIM2_Init+0x128>)
 800534e:	f008 fdff 	bl	800df50 <HAL_TIM_OC_ConfigChannel>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d001      	beq.n	800535c <MX_TIM2_Init+0x118>
  {
    Error_Handler();
 8005358:	f7fe fb30 	bl	80039bc <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 800535c:	4803      	ldr	r0, [pc, #12]	; (800536c <MX_TIM2_Init+0x128>)
 800535e:	f000 f859 	bl	8005414 <HAL_TIM_MspPostInit>

}
 8005362:	bf00      	nop
 8005364:	3738      	adds	r7, #56	; 0x38
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	20028858 	.word	0x20028858

08005370 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8005374:	4b0f      	ldr	r3, [pc, #60]	; (80053b4 <MX_TIM16_Init+0x44>)
 8005376:	4a10      	ldr	r2, [pc, #64]	; (80053b8 <MX_TIM16_Init+0x48>)
 8005378:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 31;
 800537a:	4b0e      	ldr	r3, [pc, #56]	; (80053b4 <MX_TIM16_Init+0x44>)
 800537c:	221f      	movs	r2, #31
 800537e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005380:	4b0c      	ldr	r3, [pc, #48]	; (80053b4 <MX_TIM16_Init+0x44>)
 8005382:	2200      	movs	r2, #0
 8005384:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8005386:	4b0b      	ldr	r3, [pc, #44]	; (80053b4 <MX_TIM16_Init+0x44>)
 8005388:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800538c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800538e:	4b09      	ldr	r3, [pc, #36]	; (80053b4 <MX_TIM16_Init+0x44>)
 8005390:	2200      	movs	r2, #0
 8005392:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8005394:	4b07      	ldr	r3, [pc, #28]	; (80053b4 <MX_TIM16_Init+0x44>)
 8005396:	2200      	movs	r2, #0
 8005398:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800539a:	4b06      	ldr	r3, [pc, #24]	; (80053b4 <MX_TIM16_Init+0x44>)
 800539c:	2200      	movs	r2, #0
 800539e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80053a0:	4804      	ldr	r0, [pc, #16]	; (80053b4 <MX_TIM16_Init+0x44>)
 80053a2:	f008 f97d 	bl	800d6a0 <HAL_TIM_Base_Init>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d001      	beq.n	80053b0 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80053ac:	f7fe fb06 	bl	80039bc <Error_Handler>
  }

}
 80053b0:	bf00      	nop
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	200288a4 	.word	0x200288a4
 80053b8:	40014400 	.word	0x40014400

080053bc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b082      	sub	sp, #8
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053cc:	d10b      	bne.n	80053e6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80053ce:	2001      	movs	r0, #1
 80053d0:	f7ff ff05 	bl	80051de <LL_APB1_GRP1_EnableClock>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80053d4:	2200      	movs	r2, #0
 80053d6:	2105      	movs	r1, #5
 80053d8:	201c      	movs	r0, #28
 80053da:	f002 face 	bl	800797a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80053de:	201c      	movs	r0, #28
 80053e0:	f002 fae5 	bl	80079ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 80053e4:	e010      	b.n	8005408 <HAL_TIM_Base_MspInit+0x4c>
  else if(tim_baseHandle->Instance==TIM16)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a09      	ldr	r2, [pc, #36]	; (8005410 <HAL_TIM_Base_MspInit+0x54>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d10b      	bne.n	8005408 <HAL_TIM_Base_MspInit+0x4c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80053f0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80053f4:	f7ff ff0c 	bl	8005210 <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80053f8:	2200      	movs	r2, #0
 80053fa:	2100      	movs	r1, #0
 80053fc:	2019      	movs	r0, #25
 80053fe:	f002 fabc 	bl	800797a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005402:	2019      	movs	r0, #25
 8005404:	f002 fad3 	bl	80079ae <HAL_NVIC_EnableIRQ>
}
 8005408:	bf00      	nop
 800540a:	3708      	adds	r7, #8
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}
 8005410:	40014400 	.word	0x40014400

08005414 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b088      	sub	sp, #32
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800541c:	f107 030c 	add.w	r3, r7, #12
 8005420:	2200      	movs	r2, #0
 8005422:	601a      	str	r2, [r3, #0]
 8005424:	605a      	str	r2, [r3, #4]
 8005426:	609a      	str	r2, [r3, #8]
 8005428:	60da      	str	r2, [r3, #12]
 800542a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005434:	d112      	bne.n	800545c <HAL_TIM_MspPostInit+0x48>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005436:	2002      	movs	r0, #2
 8005438:	f7ff feb8 	bl	80051ac <LL_AHB2_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800543c:	2308      	movs	r3, #8
 800543e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005440:	2302      	movs	r3, #2
 8005442:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005444:	2300      	movs	r3, #0
 8005446:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005448:	2300      	movs	r3, #0
 800544a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800544c:	2301      	movs	r3, #1
 800544e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005450:	f107 030c 	add.w	r3, r7, #12
 8005454:	4619      	mov	r1, r3
 8005456:	4803      	ldr	r0, [pc, #12]	; (8005464 <HAL_TIM_MspPostInit+0x50>)
 8005458:	f002 fe18 	bl	800808c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800545c:	bf00      	nop
 800545e:	3720      	adds	r7, #32
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}
 8005464:	48000400 	.word	0x48000400

08005468 <HAL_COMP_TriggerCallback>:
uint16_t calibration_1 = 0;
union ColorComplex lightMessageComplexTouch = {0};
uint32_t lightsSimpleMessageReceivedTouch;
uint32_t prev_msg = 0;

void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp) {
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
	timestamp = __HAL_TIM_GET_COUNTER(&htim16);
 8005470:	4b1a      	ldr	r3, [pc, #104]	; (80054dc <HAL_COMP_TriggerCallback+0x74>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005476:	b29a      	uxth	r2, r3
 8005478:	4b19      	ldr	r3, [pc, #100]	; (80054e0 <HAL_COMP_TriggerCallback+0x78>)
 800547a:	801a      	strh	r2, [r3, #0]

//	GPIO_PinState pin_state = HAL_GPIO_ReadPin(LH_SIG_GPIO_Port, LH_SIG_Pin);
	uint32_t pin_state = HAL_COMP_GetOutputLevel(hcomp);
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f002 f963 	bl	8007748 <HAL_COMP_GetOutputLevel>
 8005482:	60f8      	str	r0, [r7, #12]
	if (pin_state == COMP_OUTPUT_LEVEL_HIGH) {
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2b01      	cmp	r3, #1
 8005488:	d109      	bne.n	800549e <HAL_COMP_TriggerCallback+0x36>
		//Rising edge
		input0.rise_time_ = timestamp;
 800548a:	4b15      	ldr	r3, [pc, #84]	; (80054e0 <HAL_COMP_TriggerCallback+0x78>)
 800548c:	881a      	ldrh	r2, [r3, #0]
 800548e:	4b15      	ldr	r3, [pc, #84]	; (80054e4 <HAL_COMP_TriggerCallback+0x7c>)
 8005490:	f8a3 240a 	strh.w	r2, [r3, #1034]	; 0x40a
		input0.rise_valid_ = 1;
 8005494:	4b13      	ldr	r3, [pc, #76]	; (80054e4 <HAL_COMP_TriggerCallback+0x7c>)
 8005496:	2201      	movs	r2, #1
 8005498:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
		//Falling edge
		enqueue_pulse(&input0, input0.rise_time_, timestamp - input0.rise_time_);
		input0.rise_valid_ = 0;
//		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
	}
}
 800549c:	e019      	b.n	80054d2 <HAL_COMP_TriggerCallback+0x6a>
	} else if (input0.rise_valid_ && pin_state == COMP_OUTPUT_LEVEL_LOW) {
 800549e:	4b11      	ldr	r3, [pc, #68]	; (80054e4 <HAL_COMP_TriggerCallback+0x7c>)
 80054a0:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d014      	beq.n	80054d2 <HAL_COMP_TriggerCallback+0x6a>
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d111      	bne.n	80054d2 <HAL_COMP_TriggerCallback+0x6a>
		enqueue_pulse(&input0, input0.rise_time_, timestamp - input0.rise_time_);
 80054ae:	4b0d      	ldr	r3, [pc, #52]	; (80054e4 <HAL_COMP_TriggerCallback+0x7c>)
 80054b0:	f8b3 140a 	ldrh.w	r1, [r3, #1034]	; 0x40a
 80054b4:	4b0a      	ldr	r3, [pc, #40]	; (80054e0 <HAL_COMP_TriggerCallback+0x78>)
 80054b6:	881a      	ldrh	r2, [r3, #0]
 80054b8:	4b0a      	ldr	r3, [pc, #40]	; (80054e4 <HAL_COMP_TriggerCallback+0x7c>)
 80054ba:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80054be:	1ad3      	subs	r3, r2, r3
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	461a      	mov	r2, r3
 80054c4:	4807      	ldr	r0, [pc, #28]	; (80054e4 <HAL_COMP_TriggerCallback+0x7c>)
 80054c6:	f7fd fed9 	bl	800327c <enqueue_pulse>
		input0.rise_valid_ = 0;
 80054ca:	4b06      	ldr	r3, [pc, #24]	; (80054e4 <HAL_COMP_TriggerCallback+0x7c>)
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
}
 80054d2:	bf00      	nop
 80054d4:	3710      	adds	r7, #16
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	200288a4 	.word	0x200288a4
 80054e0:	20000c7e 	.word	0x20000c7e
 80054e4:	20027c6c 	.word	0x20027c6c

080054e8 <HAL_TSC_ConvCpltCallback>:


uint32_t temp = 0x01;
// TODO: make threshold update if "touch" is active for too long
void HAL_TSC_ConvCpltCallback(TSC_HandleTypeDef *htsc) {
 80054e8:	b5b0      	push	{r4, r5, r7, lr}
 80054ea:	b086      	sub	sp, #24
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
	/*##-5- Discharge the touch-sensing IOs ####################################*/
	HAL_TSC_IODischarge(htsc, ENABLE);
 80054f0:	2101      	movs	r1, #1
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f7ff fcda 	bl	8004eac <HAL_TSC_IODischarge>
	/* Note: a delay can be added here */

	uint32_t uhTSCAcquisitionValue;
	TSC_GroupStatusTypeDef status = HAL_TSC_GroupGetStatus(htsc, TSC_GROUP2_IDX);
 80054f8:	2101      	movs	r1, #1
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f7ff fc5f 	bl	8004dbe <HAL_TSC_GroupGetStatus>
 8005500:	4603      	mov	r3, r0
 8005502:	75bb      	strb	r3, [r7, #22]
	uint32_t cur_time;
	/*##-6- Check if the acquisition is correct (no max count) #################*/
	if (status == TSC_GROUP_COMPLETED) {
 8005504:	7dbb      	ldrb	r3, [r7, #22]
 8005506:	2b01      	cmp	r3, #1
 8005508:	f040 8115 	bne.w	8005736 <HAL_TSC_ConvCpltCallback+0x24e>
		/*##-7- Read the acquisition value #######################################*/
		uhTSCAcquisitionValue = HAL_TSC_GroupGetValue(htsc, TSC_GROUP2_IDX);
 800550c:	2101      	movs	r1, #1
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f7ff fc77 	bl	8004e02 <HAL_TSC_GroupGetValue>
 8005514:	6138      	str	r0, [r7, #16]
		uint8_t touch;
		if (cap_sensor == 0) {
 8005516:	4ba0      	ldr	r3, [pc, #640]	; (8005798 <HAL_TSC_ConvCpltCallback+0x2b0>)
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d17d      	bne.n	800561a <HAL_TSC_ConvCpltCallback+0x132>
			if(calibration_0 <= CALIBRATION_SAMPLES){
 800551e:	4b9f      	ldr	r3, [pc, #636]	; (800579c <HAL_TSC_ConvCpltCallback+0x2b4>)
 8005520:	881b      	ldrh	r3, [r3, #0]
 8005522:	2b64      	cmp	r3, #100	; 0x64
 8005524:	d83a      	bhi.n	800559c <HAL_TSC_ConvCpltCallback+0xb4>
				touch = 0;
 8005526:	2300      	movs	r3, #0
 8005528:	75fb      	strb	r3, [r7, #23]
				if(calibration_0 == 0){
 800552a:	4b9c      	ldr	r3, [pc, #624]	; (800579c <HAL_TSC_ConvCpltCallback+0x2b4>)
 800552c:	881b      	ldrh	r3, [r3, #0]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d108      	bne.n	8005544 <HAL_TSC_ConvCpltCallback+0x5c>
					ts1_threshold = uhTSCAcquisitionValue;
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	ee07 3a90 	vmov	s15, r3
 8005538:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800553c:	4b98      	ldr	r3, [pc, #608]	; (80057a0 <HAL_TSC_ConvCpltCallback+0x2b8>)
 800553e:	edc3 7a00 	vstr	s15, [r3]
 8005542:	e024      	b.n	800558e <HAL_TSC_ConvCpltCallback+0xa6>
				}else{
					ts1_threshold = uhTSCAcquisitionValue * ALPHA_WEIGHT + ts1_threshold * (1-ALPHA_WEIGHT);
 8005544:	6938      	ldr	r0, [r7, #16]
 8005546:	f7fa ff67 	bl	8000418 <__aeabi_ui2d>
 800554a:	a38f      	add	r3, pc, #572	; (adr r3, 8005788 <HAL_TSC_ConvCpltCallback+0x2a0>)
 800554c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005550:	f7fa ffdc 	bl	800050c <__aeabi_dmul>
 8005554:	4603      	mov	r3, r0
 8005556:	460c      	mov	r4, r1
 8005558:	4625      	mov	r5, r4
 800555a:	461c      	mov	r4, r3
 800555c:	4b90      	ldr	r3, [pc, #576]	; (80057a0 <HAL_TSC_ConvCpltCallback+0x2b8>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4618      	mov	r0, r3
 8005562:	f7fa ff7b 	bl	800045c <__aeabi_f2d>
 8005566:	a38a      	add	r3, pc, #552	; (adr r3, 8005790 <HAL_TSC_ConvCpltCallback+0x2a8>)
 8005568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800556c:	f7fa ffce 	bl	800050c <__aeabi_dmul>
 8005570:	4602      	mov	r2, r0
 8005572:	460b      	mov	r3, r1
 8005574:	4620      	mov	r0, r4
 8005576:	4629      	mov	r1, r5
 8005578:	f7fa fe12 	bl	80001a0 <__adddf3>
 800557c:	4603      	mov	r3, r0
 800557e:	460c      	mov	r4, r1
 8005580:	4618      	mov	r0, r3
 8005582:	4621      	mov	r1, r4
 8005584:	f7fb fa72 	bl	8000a6c <__aeabi_d2f>
 8005588:	4602      	mov	r2, r0
 800558a:	4b85      	ldr	r3, [pc, #532]	; (80057a0 <HAL_TSC_ConvCpltCallback+0x2b8>)
 800558c:	601a      	str	r2, [r3, #0]
				}
				calibration_0 += 1;
 800558e:	4b83      	ldr	r3, [pc, #524]	; (800579c <HAL_TSC_ConvCpltCallback+0x2b4>)
 8005590:	881b      	ldrh	r3, [r3, #0]
 8005592:	3301      	adds	r3, #1
 8005594:	b29a      	uxth	r2, r3
 8005596:	4b81      	ldr	r3, [pc, #516]	; (800579c <HAL_TSC_ConvCpltCallback+0x2b4>)
 8005598:	801a      	strh	r2, [r3, #0]
 800559a:	e0ba      	b.n	8005712 <HAL_TSC_ConvCpltCallback+0x22a>
			}
			else{
				touch = (uhTSCAcquisitionValue <= (ts1_threshold - THRESHOLD_TOLERANCE));
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	ee07 3a90 	vmov	s15, r3
 80055a2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80055a6:	4b7e      	ldr	r3, [pc, #504]	; (80057a0 <HAL_TSC_ConvCpltCallback+0x2b8>)
 80055a8:	edd3 7a00 	vldr	s15, [r3]
 80055ac:	eddf 6a7d 	vldr	s13, [pc, #500]	; 80057a4 <HAL_TSC_ConvCpltCallback+0x2bc>
 80055b0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80055b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80055b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055bc:	bf94      	ite	ls
 80055be:	2301      	movls	r3, #1
 80055c0:	2300      	movhi	r3, #0
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	75fb      	strb	r3, [r7, #23]

				// if not touched, update threshold
				if(touch == 0){
 80055c6:	7dfb      	ldrb	r3, [r7, #23]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	f040 80a2 	bne.w	8005712 <HAL_TSC_ConvCpltCallback+0x22a>
					ts1_threshold = uhTSCAcquisitionValue * ALPHA_WEIGHT + ts1_threshold * (1-ALPHA_WEIGHT);
 80055ce:	6938      	ldr	r0, [r7, #16]
 80055d0:	f7fa ff22 	bl	8000418 <__aeabi_ui2d>
 80055d4:	a36c      	add	r3, pc, #432	; (adr r3, 8005788 <HAL_TSC_ConvCpltCallback+0x2a0>)
 80055d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055da:	f7fa ff97 	bl	800050c <__aeabi_dmul>
 80055de:	4603      	mov	r3, r0
 80055e0:	460c      	mov	r4, r1
 80055e2:	4625      	mov	r5, r4
 80055e4:	461c      	mov	r4, r3
 80055e6:	4b6e      	ldr	r3, [pc, #440]	; (80057a0 <HAL_TSC_ConvCpltCallback+0x2b8>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4618      	mov	r0, r3
 80055ec:	f7fa ff36 	bl	800045c <__aeabi_f2d>
 80055f0:	a367      	add	r3, pc, #412	; (adr r3, 8005790 <HAL_TSC_ConvCpltCallback+0x2a8>)
 80055f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f6:	f7fa ff89 	bl	800050c <__aeabi_dmul>
 80055fa:	4602      	mov	r2, r0
 80055fc:	460b      	mov	r3, r1
 80055fe:	4620      	mov	r0, r4
 8005600:	4629      	mov	r1, r5
 8005602:	f7fa fdcd 	bl	80001a0 <__adddf3>
 8005606:	4603      	mov	r3, r0
 8005608:	460c      	mov	r4, r1
 800560a:	4618      	mov	r0, r3
 800560c:	4621      	mov	r1, r4
 800560e:	f7fb fa2d 	bl	8000a6c <__aeabi_d2f>
 8005612:	4602      	mov	r2, r0
 8005614:	4b62      	ldr	r3, [pc, #392]	; (80057a0 <HAL_TSC_ConvCpltCallback+0x2b8>)
 8005616:	601a      	str	r2, [r3, #0]
 8005618:	e07b      	b.n	8005712 <HAL_TSC_ConvCpltCallback+0x22a>
				}
			}
		} else {
			if(calibration_1 <= CALIBRATION_SAMPLES){
 800561a:	4b63      	ldr	r3, [pc, #396]	; (80057a8 <HAL_TSC_ConvCpltCallback+0x2c0>)
 800561c:	881b      	ldrh	r3, [r3, #0]
 800561e:	2b64      	cmp	r3, #100	; 0x64
 8005620:	d83a      	bhi.n	8005698 <HAL_TSC_ConvCpltCallback+0x1b0>
				touch = 0;
 8005622:	2300      	movs	r3, #0
 8005624:	75fb      	strb	r3, [r7, #23]
				if(calibration_1 == 0){
 8005626:	4b60      	ldr	r3, [pc, #384]	; (80057a8 <HAL_TSC_ConvCpltCallback+0x2c0>)
 8005628:	881b      	ldrh	r3, [r3, #0]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d108      	bne.n	8005640 <HAL_TSC_ConvCpltCallback+0x158>
					ts2_threshold = uhTSCAcquisitionValue;
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	ee07 3a90 	vmov	s15, r3
 8005634:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005638:	4b5c      	ldr	r3, [pc, #368]	; (80057ac <HAL_TSC_ConvCpltCallback+0x2c4>)
 800563a:	edc3 7a00 	vstr	s15, [r3]
 800563e:	e024      	b.n	800568a <HAL_TSC_ConvCpltCallback+0x1a2>
				}else{
					ts2_threshold = uhTSCAcquisitionValue * ALPHA_WEIGHT + ts2_threshold * (1-ALPHA_WEIGHT);
 8005640:	6938      	ldr	r0, [r7, #16]
 8005642:	f7fa fee9 	bl	8000418 <__aeabi_ui2d>
 8005646:	a350      	add	r3, pc, #320	; (adr r3, 8005788 <HAL_TSC_ConvCpltCallback+0x2a0>)
 8005648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800564c:	f7fa ff5e 	bl	800050c <__aeabi_dmul>
 8005650:	4603      	mov	r3, r0
 8005652:	460c      	mov	r4, r1
 8005654:	4625      	mov	r5, r4
 8005656:	461c      	mov	r4, r3
 8005658:	4b54      	ldr	r3, [pc, #336]	; (80057ac <HAL_TSC_ConvCpltCallback+0x2c4>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4618      	mov	r0, r3
 800565e:	f7fa fefd 	bl	800045c <__aeabi_f2d>
 8005662:	a34b      	add	r3, pc, #300	; (adr r3, 8005790 <HAL_TSC_ConvCpltCallback+0x2a8>)
 8005664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005668:	f7fa ff50 	bl	800050c <__aeabi_dmul>
 800566c:	4602      	mov	r2, r0
 800566e:	460b      	mov	r3, r1
 8005670:	4620      	mov	r0, r4
 8005672:	4629      	mov	r1, r5
 8005674:	f7fa fd94 	bl	80001a0 <__adddf3>
 8005678:	4603      	mov	r3, r0
 800567a:	460c      	mov	r4, r1
 800567c:	4618      	mov	r0, r3
 800567e:	4621      	mov	r1, r4
 8005680:	f7fb f9f4 	bl	8000a6c <__aeabi_d2f>
 8005684:	4602      	mov	r2, r0
 8005686:	4b49      	ldr	r3, [pc, #292]	; (80057ac <HAL_TSC_ConvCpltCallback+0x2c4>)
 8005688:	601a      	str	r2, [r3, #0]
				}
				calibration_1 += 1;
 800568a:	4b47      	ldr	r3, [pc, #284]	; (80057a8 <HAL_TSC_ConvCpltCallback+0x2c0>)
 800568c:	881b      	ldrh	r3, [r3, #0]
 800568e:	3301      	adds	r3, #1
 8005690:	b29a      	uxth	r2, r3
 8005692:	4b45      	ldr	r3, [pc, #276]	; (80057a8 <HAL_TSC_ConvCpltCallback+0x2c0>)
 8005694:	801a      	strh	r2, [r3, #0]
 8005696:	e03c      	b.n	8005712 <HAL_TSC_ConvCpltCallback+0x22a>

			}
			else{
				touch = (uhTSCAcquisitionValue <= (ts2_threshold - THRESHOLD_TOLERANCE));
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	ee07 3a90 	vmov	s15, r3
 800569e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80056a2:	4b42      	ldr	r3, [pc, #264]	; (80057ac <HAL_TSC_ConvCpltCallback+0x2c4>)
 80056a4:	edd3 7a00 	vldr	s15, [r3]
 80056a8:	eddf 6a3e 	vldr	s13, [pc, #248]	; 80057a4 <HAL_TSC_ConvCpltCallback+0x2bc>
 80056ac:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80056b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80056b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056b8:	bf94      	ite	ls
 80056ba:	2301      	movls	r3, #1
 80056bc:	2300      	movhi	r3, #0
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	75fb      	strb	r3, [r7, #23]

				// if not touched, update threshold
				if(touch == 0){
 80056c2:	7dfb      	ldrb	r3, [r7, #23]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d124      	bne.n	8005712 <HAL_TSC_ConvCpltCallback+0x22a>
					ts2_threshold = uhTSCAcquisitionValue * ALPHA_WEIGHT + ts2_threshold * (1-ALPHA_WEIGHT);
 80056c8:	6938      	ldr	r0, [r7, #16]
 80056ca:	f7fa fea5 	bl	8000418 <__aeabi_ui2d>
 80056ce:	a32e      	add	r3, pc, #184	; (adr r3, 8005788 <HAL_TSC_ConvCpltCallback+0x2a0>)
 80056d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d4:	f7fa ff1a 	bl	800050c <__aeabi_dmul>
 80056d8:	4603      	mov	r3, r0
 80056da:	460c      	mov	r4, r1
 80056dc:	4625      	mov	r5, r4
 80056de:	461c      	mov	r4, r3
 80056e0:	4b32      	ldr	r3, [pc, #200]	; (80057ac <HAL_TSC_ConvCpltCallback+0x2c4>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4618      	mov	r0, r3
 80056e6:	f7fa feb9 	bl	800045c <__aeabi_f2d>
 80056ea:	a329      	add	r3, pc, #164	; (adr r3, 8005790 <HAL_TSC_ConvCpltCallback+0x2a8>)
 80056ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f0:	f7fa ff0c 	bl	800050c <__aeabi_dmul>
 80056f4:	4602      	mov	r2, r0
 80056f6:	460b      	mov	r3, r1
 80056f8:	4620      	mov	r0, r4
 80056fa:	4629      	mov	r1, r5
 80056fc:	f7fa fd50 	bl	80001a0 <__adddf3>
 8005700:	4603      	mov	r3, r0
 8005702:	460c      	mov	r4, r1
 8005704:	4618      	mov	r0, r3
 8005706:	4621      	mov	r1, r4
 8005708:	f7fb f9b0 	bl	8000a6c <__aeabi_d2f>
 800570c:	4602      	mov	r2, r0
 800570e:	4b27      	ldr	r3, [pc, #156]	; (80057ac <HAL_TSC_ConvCpltCallback+0x2c4>)
 8005710:	601a      	str	r2, [r3, #0]
				}
			}
		}

		cur_time = HAL_GetTick();
 8005712:	f000 fb5d 	bl	8005dd0 <HAL_GetTick>
 8005716:	60f8      	str	r0, [r7, #12]
		debounce(&dbs[cap_sensor], touch, cur_time);
 8005718:	4b1f      	ldr	r3, [pc, #124]	; (8005798 <HAL_TSC_ConvCpltCallback+0x2b0>)
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	00db      	lsls	r3, r3, #3
 800571e:	4a24      	ldr	r2, [pc, #144]	; (80057b0 <HAL_TSC_ConvCpltCallback+0x2c8>)
 8005720:	4413      	add	r3, r2
 8005722:	7df9      	ldrb	r1, [r7, #23]
 8005724:	68fa      	ldr	r2, [r7, #12]
 8005726:	4618      	mov	r0, r3
 8005728:	f000 fa06 	bl	8005b38 <debounce>
		process_touches(&touch_detector, dbs, cur_time);
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	4920      	ldr	r1, [pc, #128]	; (80057b0 <HAL_TSC_ConvCpltCallback+0x2c8>)
 8005730:	4820      	ldr	r0, [pc, #128]	; (80057b4 <HAL_TSC_ConvCpltCallback+0x2cc>)
 8005732:	f000 f843 	bl	80057bc <process_touches>
	}

	//Switches between the two channels to be acquired
	if (cap_sensor == 0) {
 8005736:	4b18      	ldr	r3, [pc, #96]	; (8005798 <HAL_TSC_ConvCpltCallback+0x2b0>)
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d106      	bne.n	800574c <HAL_TSC_ConvCpltCallback+0x264>
		IoConfig.ChannelIOs = TSC_GROUP2_IO4; /* TS4 touchkey */
 800573e:	4b1e      	ldr	r3, [pc, #120]	; (80057b8 <HAL_TSC_ConvCpltCallback+0x2d0>)
 8005740:	2280      	movs	r2, #128	; 0x80
 8005742:	601a      	str	r2, [r3, #0]
		cap_sensor = 1;
 8005744:	4b14      	ldr	r3, [pc, #80]	; (8005798 <HAL_TSC_ConvCpltCallback+0x2b0>)
 8005746:	2201      	movs	r2, #1
 8005748:	701a      	strb	r2, [r3, #0]
 800574a:	e005      	b.n	8005758 <HAL_TSC_ConvCpltCallback+0x270>
	} else {
		IoConfig.ChannelIOs = TSC_GROUP2_IO3; /* TS3 touchkey */
 800574c:	4b1a      	ldr	r3, [pc, #104]	; (80057b8 <HAL_TSC_ConvCpltCallback+0x2d0>)
 800574e:	2240      	movs	r2, #64	; 0x40
 8005750:	601a      	str	r2, [r3, #0]
		cap_sensor = 0;
 8005752:	4b11      	ldr	r3, [pc, #68]	; (8005798 <HAL_TSC_ConvCpltCallback+0x2b0>)
 8005754:	2200      	movs	r2, #0
 8005756:	701a      	strb	r2, [r3, #0]
	}

	if (HAL_TSC_IOConfig(htsc, &IoConfig) != HAL_OK) {
 8005758:	4917      	ldr	r1, [pc, #92]	; (80057b8 <HAL_TSC_ConvCpltCallback+0x2d0>)
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f7ff fb63 	bl	8004e26 <HAL_TSC_IOConfig>
 8005760:	4603      	mov	r3, r0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d001      	beq.n	800576a <HAL_TSC_ConvCpltCallback+0x282>
		/* Initialization Error */
		Error_Handler();
 8005766:	f7fe f929 	bl	80039bc <Error_Handler>
	}

	/*##-9- Re-start the acquisition process ###################################*/
	if (HAL_TSC_Start_IT(htsc) != HAL_OK) {
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f7ff faca 	bl	8004d04 <HAL_TSC_Start_IT>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d001      	beq.n	800577a <HAL_TSC_ConvCpltCallback+0x292>
		/* Acquisition Error */
		Error_Handler();
 8005776:	f7fe f921 	bl	80039bc <Error_Handler>
	}

}
 800577a:	bf00      	nop
 800577c:	3718      	adds	r7, #24
 800577e:	46bd      	mov	sp, r7
 8005780:	bdb0      	pop	{r4, r5, r7, pc}
 8005782:	bf00      	nop
 8005784:	f3af 8000 	nop.w
 8005788:	47ae147b 	.word	0x47ae147b
 800578c:	3f847ae1 	.word	0x3f847ae1
 8005790:	7ae147ae 	.word	0x7ae147ae
 8005794:	3fefae14 	.word	0x3fefae14
 8005798:	20000c80 	.word	0x20000c80
 800579c:	20000c94 	.word	0x20000c94
 80057a0:	200288fc 	.word	0x200288fc
 80057a4:	42700000 	.word	0x42700000
 80057a8:	20000c96 	.word	0x20000c96
 80057ac:	20028920 	.word	0x20028920
 80057b0:	20000c84 	.word	0x20000c84
 80057b4:	20028904 	.word	0x20028904
 80057b8:	200288f0 	.word	0x200288f0

080057bc <process_touches>:
}

uint8_t temp_flag = 1;
enum TouchType action = None;

void process_touches(volatile TouchDetector *self, Debouncer *dbs, uint32_t cur_time) {
 80057bc:	b580      	push	{r7, lr}
 80057be:	b08c      	sub	sp, #48	; 0x30
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	607a      	str	r2, [r7, #4]

//	action = None;

	if (self->touch_state == Idle) {
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	7e1b      	ldrb	r3, [r3, #24]
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d123      	bne.n	800581a <process_touches+0x5e>
		if (dbs[0].clean_out) {
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	795b      	ldrb	r3, [r3, #5]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00c      	beq.n	80057f4 <process_touches+0x38>
			// front button is held

			self->touch_state = OnePressed;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2201      	movs	r2, #1
 80057de:	761a      	strb	r2, [r3, #24]
			self->touches[0].cap_idx = 0;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2200      	movs	r2, #0
 80057e4:	701a      	strb	r2, [r3, #0]
			self->touches[0].start_t = cur_time;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	605a      	str	r2, [r3, #4]
			action = FrontHold;
 80057ec:	4b80      	ldr	r3, [pc, #512]	; (80059f0 <process_touches+0x234>)
 80057ee:	2205      	movs	r2, #5
 80057f0:	701a      	strb	r2, [r3, #0]
 80057f2:	e13c      	b.n	8005a6e <process_touches+0x2b2>

		} else if (dbs[1].clean_out) {
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	3308      	adds	r3, #8
 80057f8:	795b      	ldrb	r3, [r3, #5]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	f000 8137 	beq.w	8005a6e <process_touches+0x2b2>
			// back button is held

			self->touch_state = OnePressed;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2201      	movs	r2, #1
 8005804:	761a      	strb	r2, [r3, #24]
			self->touches[0].cap_idx = 1;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2201      	movs	r2, #1
 800580a:	701a      	strb	r2, [r3, #0]
			self->touches[0].start_t = cur_time;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	605a      	str	r2, [r3, #4]
			action = BackHold;
 8005812:	4b77      	ldr	r3, [pc, #476]	; (80059f0 <process_touches+0x234>)
 8005814:	2206      	movs	r2, #6
 8005816:	701a      	strb	r2, [r3, #0]
 8005818:	e129      	b.n	8005a6e <process_touches+0x2b2>
		}
	} else if (self->touch_state == OnePressed) {
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	7e1b      	ldrb	r3, [r3, #24]
 800581e:	b2db      	uxtb	r3, r3
 8005820:	2b01      	cmp	r3, #1
 8005822:	d130      	bne.n	8005886 <process_touches+0xca>
		if (dbs[1 - self->touches[0].cap_idx].clean_out) {
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	b2db      	uxtb	r3, r3
 800582a:	f1c3 0301 	rsb	r3, r3, #1
 800582e:	00db      	lsls	r3, r3, #3
 8005830:	68ba      	ldr	r2, [r7, #8]
 8005832:	4413      	add	r3, r2
 8005834:	795b      	ldrb	r3, [r3, #5]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d011      	beq.n	800585e <process_touches+0xa2>
			self->touch_state = TwoPressed;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2202      	movs	r2, #2
 800583e:	761a      	strb	r2, [r3, #24]
			self->touches[1].cap_idx = 1 - self->touches[0].cap_idx;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	b2db      	uxtb	r3, r3
 8005846:	f1c3 0301 	rsb	r3, r3, #1
 800584a:	b2da      	uxtb	r2, r3
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	731a      	strb	r2, [r3, #12]
			self->touches[1].start_t = cur_time;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	611a      	str	r2, [r3, #16]
			action = BothHold;
 8005856:	4b66      	ldr	r3, [pc, #408]	; (80059f0 <process_touches+0x234>)
 8005858:	2207      	movs	r2, #7
 800585a:	701a      	strb	r2, [r3, #0]
 800585c:	e107      	b.n	8005a6e <process_touches+0x2b2>

		} else if (!dbs[self->touches[0].cap_idx].clean_out) {
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	b2db      	uxtb	r3, r3
 8005864:	00db      	lsls	r3, r3, #3
 8005866:	68ba      	ldr	r2, [r7, #8]
 8005868:	4413      	add	r3, r2
 800586a:	795b      	ldrb	r3, [r3, #5]
 800586c:	2b00      	cmp	r3, #0
 800586e:	f040 80fe 	bne.w	8005a6e <process_touches+0x2b2>
			self->touch_state = OneReleasedNoPressed;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2203      	movs	r2, #3
 8005876:	761a      	strb	r2, [r3, #24]
			self->touches[0].end_t = cur_time;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	609a      	str	r2, [r3, #8]
			action = BothRelease;
 800587e:	4b5c      	ldr	r3, [pc, #368]	; (80059f0 <process_touches+0x234>)
 8005880:	2208      	movs	r2, #8
 8005882:	701a      	strb	r2, [r3, #0]
 8005884:	e0f3      	b.n	8005a6e <process_touches+0x2b2>

		}
	} else if (self->touch_state == TwoPressed) {
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	7e1b      	ldrb	r3, [r3, #24]
 800588a:	b2db      	uxtb	r3, r3
 800588c:	2b02      	cmp	r3, #2
 800588e:	d120      	bne.n	80058d2 <process_touches+0x116>
		if (!dbs[self->touches[0].cap_idx].clean_out) {
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	b2db      	uxtb	r3, r3
 8005896:	00db      	lsls	r3, r3, #3
 8005898:	68ba      	ldr	r2, [r7, #8]
 800589a:	4413      	add	r3, r2
 800589c:	795b      	ldrb	r3, [r3, #5]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d106      	bne.n	80058b0 <process_touches+0xf4>
			self->touch_state = FirstReleasedSecondPressed;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2204      	movs	r2, #4
 80058a6:	761a      	strb	r2, [r3, #24]
			self->touches[0].end_t = cur_time;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	609a      	str	r2, [r3, #8]
 80058ae:	e0de      	b.n	8005a6e <process_touches+0x2b2>
		} else if (!dbs[self->touches[1].cap_idx].clean_out) {
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	7b1b      	ldrb	r3, [r3, #12]
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	00db      	lsls	r3, r3, #3
 80058b8:	68ba      	ldr	r2, [r7, #8]
 80058ba:	4413      	add	r3, r2
 80058bc:	795b      	ldrb	r3, [r3, #5]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	f040 80d5 	bne.w	8005a6e <process_touches+0x2b2>
			self->touch_state = SecondReleasedFirstPressed;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2205      	movs	r2, #5
 80058c8:	761a      	strb	r2, [r3, #24]
			self->touches[1].end_t = cur_time;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	615a      	str	r2, [r3, #20]
 80058d0:	e0cd      	b.n	8005a6e <process_touches+0x2b2>
		}
	} else if (self->touch_state == OneReleasedNoPressed) {
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	7e1b      	ldrb	r3, [r3, #24]
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	2b03      	cmp	r3, #3
 80058da:	d136      	bne.n	800594a <process_touches+0x18e>
		if (dbs[1 - self->touches[0].cap_idx].clean_out) {
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	f1c3 0301 	rsb	r3, r3, #1
 80058e6:	00db      	lsls	r3, r3, #3
 80058e8:	68ba      	ldr	r2, [r7, #8]
 80058ea:	4413      	add	r3, r2
 80058ec:	795b      	ldrb	r3, [r3, #5]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d00e      	beq.n	8005910 <process_touches+0x154>
			self->touch_state = FirstReleasedSecondPressed;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2204      	movs	r2, #4
 80058f6:	761a      	strb	r2, [r3, #24]
			self->touches[1].cap_idx = (1 - self->touches[0].cap_idx);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	f1c3 0301 	rsb	r3, r3, #1
 8005902:	b2da      	uxtb	r2, r3
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	731a      	strb	r2, [r3, #12]
			self->touches[1].start_t = cur_time;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	611a      	str	r2, [r3, #16]
 800590e:	e0ae      	b.n	8005a6e <process_touches+0x2b2>
		} else if (cur_time - self->touches[0].end_t > MIN_SWIPE_GAP) {
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	1ad3      	subs	r3, r2, r3
 8005918:	2b0a      	cmp	r3, #10
 800591a:	f240 80a8 	bls.w	8005a6e <process_touches+0x2b2>
			uint32_t touch_duration = self->touches[0].end_t - self->touches[0].start_t;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	689a      	ldr	r2, [r3, #8]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	617b      	str	r3, [r7, #20]
			if (TAP_MIN_THRESHOLD < touch_duration && touch_duration < TAP_MAX_THRESHOLD) {
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	2b28      	cmp	r3, #40	; 0x28
 800592e:	d905      	bls.n	800593c <process_touches+0x180>
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	2bc7      	cmp	r3, #199	; 0xc7
 8005934:	d802      	bhi.n	800593c <process_touches+0x180>
				//Register a tap
				action = BothRelease;
 8005936:	4b2e      	ldr	r3, [pc, #184]	; (80059f0 <process_touches+0x234>)
 8005938:	2208      	movs	r2, #8
 800593a:	701a      	strb	r2, [r3, #0]
			}
			lightsSimpleMessageReceivedTouch = 0;
 800593c:	4b2d      	ldr	r3, [pc, #180]	; (80059f4 <process_touches+0x238>)
 800593e:	2200      	movs	r2, #0
 8005940:	601a      	str	r2, [r3, #0]
			self->touch_state = Idle;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2200      	movs	r2, #0
 8005946:	761a      	strb	r2, [r3, #24]
 8005948:	e091      	b.n	8005a6e <process_touches+0x2b2>
		}
	} else if (self->touch_state == FirstReleasedSecondPressed) {
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	7e1b      	ldrb	r3, [r3, #24]
 800594e:	b2db      	uxtb	r3, r3
 8005950:	2b04      	cmp	r3, #4
 8005952:	d151      	bne.n	80059f8 <process_touches+0x23c>
		if (!dbs[self->touches[1].cap_idx].clean_out) {
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	7b1b      	ldrb	r3, [r3, #12]
 8005958:	b2db      	uxtb	r3, r3
 800595a:	00db      	lsls	r3, r3, #3
 800595c:	68ba      	ldr	r2, [r7, #8]
 800595e:	4413      	add	r3, r2
 8005960:	795b      	ldrb	r3, [r3, #5]
 8005962:	2b00      	cmp	r3, #0
 8005964:	f040 8083 	bne.w	8005a6e <process_touches+0x2b2>
			self->touch_state = Idle;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2200      	movs	r2, #0
 800596c:	761a      	strb	r2, [r3, #24]
			self->touches[1].end_t = cur_time;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	615a      	str	r2, [r3, #20]
			action = None;
 8005974:	4b1e      	ldr	r3, [pc, #120]	; (80059f0 <process_touches+0x234>)
 8005976:	2200      	movs	r2, #0
 8005978:	701a      	strb	r2, [r3, #0]
			uint32_t touches_start_diff = self->touches[1].start_t - self->touches[0].start_t;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	691a      	ldr	r2, [r3, #16]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	623b      	str	r3, [r7, #32]
			uint32_t touches_end_diff = self->touches[1].end_t - self->touches[0].end_t;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	695a      	ldr	r2, [r3, #20]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	1ad3      	subs	r3, r2, r3
 8005990:	61fb      	str	r3, [r7, #28]
			uint32_t touch_duration = self->touches[1].end_t - self->touches[0].start_t;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	695a      	ldr	r2, [r3, #20]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	1ad3      	subs	r3, r2, r3
 800599c:	61bb      	str	r3, [r7, #24]

			//If touch start and touch end differences were small, then it was likely just a tap
			if ((touches_start_diff <= TAP_MIN_THRESHOLD) && (touches_end_diff <= TAP_MIN_THRESHOLD)
 800599e:	6a3b      	ldr	r3, [r7, #32]
 80059a0:	2b28      	cmp	r3, #40	; 0x28
 80059a2:	d80c      	bhi.n	80059be <process_touches+0x202>
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	2b28      	cmp	r3, #40	; 0x28
 80059a8:	d809      	bhi.n	80059be <process_touches+0x202>
					&& (TAP_MIN_THRESHOLD < touch_duration) && (touch_duration < TAP_MAX_THRESHOLD)) {
 80059aa:	69bb      	ldr	r3, [r7, #24]
 80059ac:	2b28      	cmp	r3, #40	; 0x28
 80059ae:	d906      	bls.n	80059be <process_touches+0x202>
 80059b0:	69bb      	ldr	r3, [r7, #24]
 80059b2:	2bc7      	cmp	r3, #199	; 0xc7
 80059b4:	d803      	bhi.n	80059be <process_touches+0x202>
				//Register a tap
				action = BothRelease;
 80059b6:	4b0e      	ldr	r3, [pc, #56]	; (80059f0 <process_touches+0x234>)
 80059b8:	2208      	movs	r2, #8
 80059ba:	701a      	strb	r2, [r3, #0]
 80059bc:	e013      	b.n	80059e6 <process_touches+0x22a>
			}
			//Otherwise, it was a swipe. Might have to adjust these thresholds to allow swipe detection
			else if (touches_start_diff > TAP_MIN_THRESHOLD && touches_end_diff > TAP_MIN_THRESHOLD) {
 80059be:	6a3b      	ldr	r3, [r7, #32]
 80059c0:	2b28      	cmp	r3, #40	; 0x28
 80059c2:	d910      	bls.n	80059e6 <process_touches+0x22a>
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	2b28      	cmp	r3, #40	; 0x28
 80059c8:	d90d      	bls.n	80059e6 <process_touches+0x22a>
				//Register a swipe
				action = (self->touches[0].cap_idx << 1) | self->touches[1].cap_idx;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	005b      	lsls	r3, r3, #1
 80059d2:	b25a      	sxtb	r2, r3
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	7b1b      	ldrb	r3, [r3, #12]
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	b25b      	sxtb	r3, r3
 80059dc:	4313      	orrs	r3, r2
 80059de:	b25b      	sxtb	r3, r3
 80059e0:	b2da      	uxtb	r2, r3
 80059e2:	4b03      	ldr	r3, [pc, #12]	; (80059f0 <process_touches+0x234>)
 80059e4:	701a      	strb	r2, [r3, #0]
			}

			self->touch_state = Idle;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2200      	movs	r2, #0
 80059ea:	761a      	strb	r2, [r3, #24]
 80059ec:	e03f      	b.n	8005a6e <process_touches+0x2b2>
 80059ee:	bf00      	nop
 80059f0:	20000c9c 	.word	0x20000c9c
 80059f4:	20028900 	.word	0x20028900
		}
	} else if (self->touch_state == SecondReleasedFirstPressed) {
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	7e1b      	ldrb	r3, [r3, #24]
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	2b05      	cmp	r3, #5
 8005a00:	d135      	bne.n	8005a6e <process_touches+0x2b2>
		if (!dbs[self->touches[0].cap_idx].clean_out) {
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	00db      	lsls	r3, r3, #3
 8005a0a:	68ba      	ldr	r2, [r7, #8]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	795b      	ldrb	r3, [r3, #5]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d12c      	bne.n	8005a6e <process_touches+0x2b2>
			self->touch_state = Idle;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2200      	movs	r2, #0
 8005a18:	761a      	strb	r2, [r3, #24]
			self->touches[0].end_t = cur_time;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	609a      	str	r2, [r3, #8]

			uint32_t touches_start_diff = self->touches[1].start_t - self->touches[0].start_t;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	691a      	ldr	r2, [r3, #16]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
			uint32_t touches_end_diff = self->touches[0].end_t - self->touches[1].end_t;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	689a      	ldr	r2, [r3, #8]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	695b      	ldr	r3, [r3, #20]
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	62bb      	str	r3, [r7, #40]	; 0x28
			uint32_t touch_duration = self->touches[0].end_t - self->touches[0].start_t;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	689a      	ldr	r2, [r3, #8]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	627b      	str	r3, [r7, #36]	; 0x24

			//If touch start and touch end differences were small, then it was likely just a tap
			if ((touches_start_diff <= TAP_MIN_THRESHOLD) && (touches_end_diff <= TAP_MIN_THRESHOLD)
 8005a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a46:	2b28      	cmp	r3, #40	; 0x28
 8005a48:	d80b      	bhi.n	8005a62 <process_touches+0x2a6>
 8005a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a4c:	2b28      	cmp	r3, #40	; 0x28
 8005a4e:	d808      	bhi.n	8005a62 <process_touches+0x2a6>
					&& (TAP_MIN_THRESHOLD < touch_duration) && (touch_duration < TAP_MAX_THRESHOLD)) {
 8005a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a52:	2b28      	cmp	r3, #40	; 0x28
 8005a54:	d905      	bls.n	8005a62 <process_touches+0x2a6>
 8005a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a58:	2bc7      	cmp	r3, #199	; 0xc7
 8005a5a:	d802      	bhi.n	8005a62 <process_touches+0x2a6>
				//Register a tap
				action = BothRelease;
 8005a5c:	4b32      	ldr	r3, [pc, #200]	; (8005b28 <process_touches+0x36c>)
 8005a5e:	2208      	movs	r2, #8
 8005a60:	701a      	strb	r2, [r3, #0]
			}
			lightsSimpleMessageReceivedTouch = 0;
 8005a62:	4b32      	ldr	r3, [pc, #200]	; (8005b2c <process_touches+0x370>)
 8005a64:	2200      	movs	r2, #0
 8005a66:	601a      	str	r2, [r3, #0]
			self->touch_state = Idle;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	761a      	strb	r2, [r3, #24]
		}
	}

	if( action == None){
 8005a6e:	4b2e      	ldr	r3, [pc, #184]	; (8005b28 <process_touches+0x36c>)
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d103      	bne.n	8005a7e <process_touches+0x2c2>
		lightsSimpleMessageReceivedTouch = 0x00; // off
 8005a76:	4b2d      	ldr	r3, [pc, #180]	; (8005b2c <process_touches+0x370>)
 8005a78:	2200      	movs	r2, #0
 8005a7a:	601a      	str	r2, [r3, #0]
 8005a7c:	e03e      	b.n	8005afc <process_touches+0x340>

	}else if(action == SwipeForward){
 8005a7e:	4b2a      	ldr	r3, [pc, #168]	; (8005b28 <process_touches+0x36c>)
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d103      	bne.n	8005a8e <process_touches+0x2d2>
		lightsSimpleMessageReceivedTouch = 0x03; // cyan (green + blue)
 8005a86:	4b29      	ldr	r3, [pc, #164]	; (8005b2c <process_touches+0x370>)
 8005a88:	2203      	movs	r2, #3
 8005a8a:	601a      	str	r2, [r3, #0]
 8005a8c:	e036      	b.n	8005afc <process_touches+0x340>

//		lightsSimpleMessageReceivedTouch |= 0x03 << 2;
//		lightsSimpleMessageReceivedTouch |= 0x03 << 4;
	}else if(action == SwipeBackward){
 8005a8e:	4b26      	ldr	r3, [pc, #152]	; (8005b28 <process_touches+0x36c>)
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	2b02      	cmp	r3, #2
 8005a94:	d103      	bne.n	8005a9e <process_touches+0x2e2>
		lightsSimpleMessageReceivedTouch = (0x01 << 6) | 0x01; // orange (green + red)
 8005a96:	4b25      	ldr	r3, [pc, #148]	; (8005b2c <process_touches+0x370>)
 8005a98:	2241      	movs	r2, #65	; 0x41
 8005a9a:	601a      	str	r2, [r3, #0]
 8005a9c:	e02e      	b.n	8005afc <process_touches+0x340>

//		lightsSimpleMessageReceivedTouch |= lightsSimpleMessageReceivedTouch << 2;
//		lightsSimpleMessageReceivedTouch |= lightsSimpleMessageReceivedTouch << 4;
	}else if(action == FrontRelease){
 8005a9e:	4b22      	ldr	r3, [pc, #136]	; (8005b28 <process_touches+0x36c>)
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	2b03      	cmp	r3, #3
 8005aa4:	d103      	bne.n	8005aae <process_touches+0x2f2>
		lightsSimpleMessageReceivedTouch = 0x00; // off
 8005aa6:	4b21      	ldr	r3, [pc, #132]	; (8005b2c <process_touches+0x370>)
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	601a      	str	r2, [r3, #0]
 8005aac:	e026      	b.n	8005afc <process_touches+0x340>
	}else if(action == BackRelease){
 8005aae:	4b1e      	ldr	r3, [pc, #120]	; (8005b28 <process_touches+0x36c>)
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	2b04      	cmp	r3, #4
 8005ab4:	d103      	bne.n	8005abe <process_touches+0x302>
		lightsSimpleMessageReceivedTouch = 0x00; // off
 8005ab6:	4b1d      	ldr	r3, [pc, #116]	; (8005b2c <process_touches+0x370>)
 8005ab8:	2200      	movs	r2, #0
 8005aba:	601a      	str	r2, [r3, #0]
 8005abc:	e01e      	b.n	8005afc <process_touches+0x340>
	}else if(action == FrontHold){
 8005abe:	4b1a      	ldr	r3, [pc, #104]	; (8005b28 <process_touches+0x36c>)
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	2b05      	cmp	r3, #5
 8005ac4:	d103      	bne.n	8005ace <process_touches+0x312>
		lightsSimpleMessageReceivedTouch = 0x01; // green
 8005ac6:	4b19      	ldr	r3, [pc, #100]	; (8005b2c <process_touches+0x370>)
 8005ac8:	2201      	movs	r2, #1
 8005aca:	601a      	str	r2, [r3, #0]
 8005acc:	e016      	b.n	8005afc <process_touches+0x340>

//		lightsSimpleMessageReceivedTouch |= 0x01 << 2;
//		lightsSimpleMessageReceivedTouch |= 0x01 << 4;
	}else if(action == BackHold){
 8005ace:	4b16      	ldr	r3, [pc, #88]	; (8005b28 <process_touches+0x36c>)
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	2b06      	cmp	r3, #6
 8005ad4:	d103      	bne.n	8005ade <process_touches+0x322>
		lightsSimpleMessageReceivedTouch = 0x02; // blue
 8005ad6:	4b15      	ldr	r3, [pc, #84]	; (8005b2c <process_touches+0x370>)
 8005ad8:	2202      	movs	r2, #2
 8005ada:	601a      	str	r2, [r3, #0]
 8005adc:	e00e      	b.n	8005afc <process_touches+0x340>

//		lightsSimpleMessageReceivedTouch |= 0x02 << 2;
//		lightsSimpleMessageReceivedTouch |= 0x02 << 4;
	}else if(action == BothHold){
 8005ade:	4b12      	ldr	r3, [pc, #72]	; (8005b28 <process_touches+0x36c>)
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	2b07      	cmp	r3, #7
 8005ae4:	d103      	bne.n	8005aee <process_touches+0x332>
		lightsSimpleMessageReceivedTouch = 0x01 << 6; // red
 8005ae6:	4b11      	ldr	r3, [pc, #68]	; (8005b2c <process_touches+0x370>)
 8005ae8:	2240      	movs	r2, #64	; 0x40
 8005aea:	601a      	str	r2, [r3, #0]
 8005aec:	e006      	b.n	8005afc <process_touches+0x340>

//		lightsSimpleMessageReceivedTouch |= lightsSimpleMessageReceivedTouch << 2;
//		lightsSimpleMessageReceivedTouch |= lightsSimpleMessageReceivedTouch << 4;
	}else if(action == BothRelease){
 8005aee:	4b0e      	ldr	r3, [pc, #56]	; (8005b28 <process_touches+0x36c>)
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	2b08      	cmp	r3, #8
 8005af4:	d102      	bne.n	8005afc <process_touches+0x340>
		lightsSimpleMessageReceivedTouch = 0x00; // off
 8005af6:	4b0d      	ldr	r3, [pc, #52]	; (8005b2c <process_touches+0x370>)
 8005af8:	2200      	movs	r2, #0
 8005afa:	601a      	str	r2, [r3, #0]
	}

	if(prev_msg != lightsSimpleMessageReceivedTouch ){
 8005afc:	4b0c      	ldr	r3, [pc, #48]	; (8005b30 <process_touches+0x374>)
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	4b0a      	ldr	r3, [pc, #40]	; (8005b2c <process_touches+0x370>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d00a      	beq.n	8005b1e <process_touches+0x362>
		prev_msg = lightsSimpleMessageReceivedTouch;
 8005b08:	4b08      	ldr	r3, [pc, #32]	; (8005b2c <process_touches+0x370>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a08      	ldr	r2, [pc, #32]	; (8005b30 <process_touches+0x374>)
 8005b0e:	6013      	str	r3, [r2, #0]

		osMessageQueuePut(lightsSimpleQueueHandle, &lightsSimpleMessageReceivedTouch, 0U, 0);
 8005b10:	4b08      	ldr	r3, [pc, #32]	; (8005b34 <process_touches+0x378>)
 8005b12:	6818      	ldr	r0, [r3, #0]
 8005b14:	2300      	movs	r3, #0
 8005b16:	2200      	movs	r2, #0
 8005b18:	4904      	ldr	r1, [pc, #16]	; (8005b2c <process_touches+0x370>)
 8005b1a:	f00b fa75 	bl	8011008 <osMessageQueuePut>

	}

}
 8005b1e:	bf00      	nop
 8005b20:	3730      	adds	r7, #48	; 0x30
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	20000c9c 	.word	0x20000c9c
 8005b2c:	20028900 	.word	0x20028900
 8005b30:	20000c98 	.word	0x20000c98
 8005b34:	20027c58 	.word	0x20027c58

08005b38 <debounce>:

void debounce(Debouncer *self, uint8_t noisy_in, uint32_t cur_time) {
 8005b38:	b480      	push	{r7}
 8005b3a:	b085      	sub	sp, #20
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	460b      	mov	r3, r1
 8005b42:	607a      	str	r2, [r7, #4]
 8005b44:	72fb      	strb	r3, [r7, #11]
	if (noisy_in != self->input) {
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	791b      	ldrb	r3, [r3, #4]
 8005b4a:	7afa      	ldrb	r2, [r7, #11]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d006      	beq.n	8005b5e <debounce+0x26>
		self->input = noisy_in;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	7afa      	ldrb	r2, [r7, #11]
 8005b54:	711a      	strb	r2, [r3, #4]
		self->start_t = cur_time;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	601a      	str	r2, [r3, #0]
	} else if (cur_time - self->start_t > DEBOUNCE_TIME) {
		self->clean_out = self->input;
	}
}
 8005b5c:	e009      	b.n	8005b72 <debounce+0x3a>
	} else if (cur_time - self->start_t > DEBOUNCE_TIME) {
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	2b1e      	cmp	r3, #30
 8005b68:	d903      	bls.n	8005b72 <debounce+0x3a>
		self->clean_out = self->input;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	791a      	ldrb	r2, [r3, #4]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	715a      	strb	r2, [r3, #5]
}
 8005b72:	bf00      	nop
 8005b74:	3714      	adds	r7, #20
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr

08005b7e <LL_AHB1_GRP1_EnableClock>:
{
 8005b7e:	b480      	push	{r7}
 8005b80:	b085      	sub	sp, #20
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8005b86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b8a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8005b96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b9a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4013      	ands	r3, r2
 8005ba0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
}
 8005ba4:	bf00      	nop
 8005ba6:	3714      	adds	r7, #20
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr

08005bb0 <LL_AHB2_GRP1_EnableClock>:
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b085      	sub	sp, #20
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005bb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bbc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005bbe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005bc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bcc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
}
 8005bd6:	bf00      	nop
 8005bd8:	3714      	adds	r7, #20
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr
	...

08005be4 <MX_TSC_Init>:

TSC_HandleTypeDef htsc;

/* TSC init function */
void MX_TSC_Init(void)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	af00      	add	r7, sp, #0
//  htsc.Init.MaxCountValue = TSC_MCV_511;
//  htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
//  htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
//  htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
//  htsc.Init.MaxCountInterrupt = DISABLE;
  htsc.Instance = TSC;
 8005be8:	4b1d      	ldr	r3, [pc, #116]	; (8005c60 <MX_TSC_Init+0x7c>)
 8005bea:	4a1e      	ldr	r2, [pc, #120]	; (8005c64 <MX_TSC_Init+0x80>)
 8005bec:	601a      	str	r2, [r3, #0]
	htsc.Init.CTPulseHighLength = TSC_CTPH_4CYCLES;
 8005bee:	4b1c      	ldr	r3, [pc, #112]	; (8005c60 <MX_TSC_Init+0x7c>)
 8005bf0:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8005bf4:	605a      	str	r2, [r3, #4]
	htsc.Init.CTPulseLowLength = TSC_CTPL_4CYCLES;
 8005bf6:	4b1a      	ldr	r3, [pc, #104]	; (8005c60 <MX_TSC_Init+0x7c>)
 8005bf8:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 8005bfc:	609a      	str	r2, [r3, #8]
	htsc.Init.SpreadSpectrum = DISABLE;
 8005bfe:	4b18      	ldr	r3, [pc, #96]	; (8005c60 <MX_TSC_Init+0x7c>)
 8005c00:	2200      	movs	r2, #0
 8005c02:	731a      	strb	r2, [r3, #12]
	htsc.Init.SpreadSpectrumDeviation = 1;
 8005c04:	4b16      	ldr	r3, [pc, #88]	; (8005c60 <MX_TSC_Init+0x7c>)
 8005c06:	2201      	movs	r2, #1
 8005c08:	611a      	str	r2, [r3, #16]
	htsc.Init.SpreadSpectrumPrescaler = TSC_SS_PRESC_DIV1;
 8005c0a:	4b15      	ldr	r3, [pc, #84]	; (8005c60 <MX_TSC_Init+0x7c>)
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	615a      	str	r2, [r3, #20]
	htsc.Init.PulseGeneratorPrescaler = TSC_PG_PRESC_DIV4;
 8005c10:	4b13      	ldr	r3, [pc, #76]	; (8005c60 <MX_TSC_Init+0x7c>)
 8005c12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005c16:	619a      	str	r2, [r3, #24]
//	htsc.Init.MaxCountValue = TSC_MCV_8191;
	htsc.Init.MaxCountValue = TSC_MCV_16383;
 8005c18:	4b11      	ldr	r3, [pc, #68]	; (8005c60 <MX_TSC_Init+0x7c>)
 8005c1a:	22c0      	movs	r2, #192	; 0xc0
 8005c1c:	61da      	str	r2, [r3, #28]
	htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
 8005c1e:	4b10      	ldr	r3, [pc, #64]	; (8005c60 <MX_TSC_Init+0x7c>)
 8005c20:	2200      	movs	r2, #0
 8005c22:	621a      	str	r2, [r3, #32]
	htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
 8005c24:	4b0e      	ldr	r3, [pc, #56]	; (8005c60 <MX_TSC_Init+0x7c>)
 8005c26:	2200      	movs	r2, #0
 8005c28:	625a      	str	r2, [r3, #36]	; 0x24
	htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
 8005c2a:	4b0d      	ldr	r3, [pc, #52]	; (8005c60 <MX_TSC_Init+0x7c>)
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	629a      	str	r2, [r3, #40]	; 0x28
	htsc.Init.MaxCountInterrupt = DISABLE;
 8005c30:	4b0b      	ldr	r3, [pc, #44]	; (8005c60 <MX_TSC_Init+0x7c>)
 8005c32:	2200      	movs	r2, #0
 8005c34:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

//  htsc.Init.ChannelIOs = TSC_GROUP2_IO2|TSC_GROUP2_IO3|TSC_GROUP2_IO4;
  htsc.Init.ChannelIOs = TSC_GROUP2_IO3|TSC_GROUP2_IO4;
 8005c38:	4b09      	ldr	r3, [pc, #36]	; (8005c60 <MX_TSC_Init+0x7c>)
 8005c3a:	22c0      	movs	r2, #192	; 0xc0
 8005c3c:	631a      	str	r2, [r3, #48]	; 0x30

  htsc.Init.ShieldIOs = 0;
 8005c3e:	4b08      	ldr	r3, [pc, #32]	; (8005c60 <MX_TSC_Init+0x7c>)
 8005c40:	2200      	movs	r2, #0
 8005c42:	635a      	str	r2, [r3, #52]	; 0x34
  htsc.Init.SamplingIOs = TSC_GROUP2_IO1;
 8005c44:	4b06      	ldr	r3, [pc, #24]	; (8005c60 <MX_TSC_Init+0x7c>)
 8005c46:	2210      	movs	r2, #16
 8005c48:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_TSC_Init(&htsc) != HAL_OK)
 8005c4a:	4805      	ldr	r0, [pc, #20]	; (8005c60 <MX_TSC_Init+0x7c>)
 8005c4c:	f7fe ffda 	bl	8004c04 <HAL_TSC_Init>
 8005c50:	4603      	mov	r3, r0
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d001      	beq.n	8005c5a <MX_TSC_Init+0x76>
  {
    Error_Handler();
 8005c56:	f7fd feb1 	bl	80039bc <Error_Handler>
  }

}
 8005c5a:	bf00      	nop
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	20028924 	.word	0x20028924
 8005c64:	40024000 	.word	0x40024000

08005c68 <HAL_TSC_MspInit>:

void HAL_TSC_MspInit(TSC_HandleTypeDef* tscHandle)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b088      	sub	sp, #32
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c70:	f107 030c 	add.w	r3, r7, #12
 8005c74:	2200      	movs	r2, #0
 8005c76:	601a      	str	r2, [r3, #0]
 8005c78:	605a      	str	r2, [r3, #4]
 8005c7a:	609a      	str	r2, [r3, #8]
 8005c7c:	60da      	str	r2, [r3, #12]
 8005c7e:	611a      	str	r2, [r3, #16]
  if(tscHandle->Instance==TSC)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a1a      	ldr	r2, [pc, #104]	; (8005cf0 <HAL_TSC_MspInit+0x88>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d12e      	bne.n	8005ce8 <HAL_TSC_MspInit+0x80>
  {
  /* USER CODE BEGIN TSC_MspInit 0 */

  /* USER CODE END TSC_MspInit 0 */
    /* TSC clock enable */
    __HAL_RCC_TSC_CLK_ENABLE();
 8005c8a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8005c8e:	f7ff ff76 	bl	8005b7e <LL_AHB1_GRP1_EnableClock>
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c92:	2002      	movs	r0, #2
 8005c94:	f7ff ff8c 	bl	8005bb0 <LL_AHB2_GRP1_EnableClock>
    PB4     ------> TSC_G2_IO1
    PB5     ------> TSC_G2_IO2
    PB6     ------> TSC_G2_IO3
    PB7     ------> TSC_G2_IO4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005c98:	2310      	movs	r3, #16
 8005c9a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005c9c:	2312      	movs	r3, #18
 8005c9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TSC;
 8005ca8:	2309      	movs	r3, #9
 8005caa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005cac:	f107 030c 	add.w	r3, r7, #12
 8005cb0:	4619      	mov	r1, r3
 8005cb2:	4810      	ldr	r0, [pc, #64]	; (8005cf4 <HAL_TSC_MspInit+0x8c>)
 8005cb4:	f002 f9ea 	bl	800808c <HAL_GPIO_Init>

//    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005cb8:	23c0      	movs	r3, #192	; 0xc0
 8005cba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cbc:	2302      	movs	r3, #2
 8005cbe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TSC;
 8005cc8:	2309      	movs	r3, #9
 8005cca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ccc:	f107 030c 	add.w	r3, r7, #12
 8005cd0:	4619      	mov	r1, r3
 8005cd2:	4808      	ldr	r0, [pc, #32]	; (8005cf4 <HAL_TSC_MspInit+0x8c>)
 8005cd4:	f002 f9da 	bl	800808c <HAL_GPIO_Init>

    /* TSC interrupt Init */
    HAL_NVIC_SetPriority(TSC_IRQn, 5, 0);
 8005cd8:	2200      	movs	r2, #0
 8005cda:	2105      	movs	r1, #5
 8005cdc:	2027      	movs	r0, #39	; 0x27
 8005cde:	f001 fe4c 	bl	800797a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TSC_IRQn);
 8005ce2:	2027      	movs	r0, #39	; 0x27
 8005ce4:	f001 fe63 	bl	80079ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TSC_MspInit 1 */

  /* USER CODE END TSC_MspInit 1 */
  }
}
 8005ce8:	bf00      	nop
 8005cea:	3720      	adds	r7, #32
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	40024000 	.word	0x40024000
 8005cf4:	48000400 	.word	0x48000400

08005cf8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8005cf8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005cfa:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005cfc:	3304      	adds	r3, #4

08005cfe <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005cfe:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005d00:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8005d02:	d3f9      	bcc.n	8005cf8 <CopyDataInit>
  bx lr
 8005d04:	4770      	bx	lr

08005d06 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8005d06:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8005d08:	3004      	adds	r0, #4

08005d0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8005d0a:	4288      	cmp	r0, r1
  bcc FillZerobss
 8005d0c:	d3fb      	bcc.n	8005d06 <FillZerobss>
  bx lr
 8005d0e:	4770      	bx	lr

08005d10 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:  ldr   r0, =_estack
 8005d10:	480c      	ldr	r0, [pc, #48]	; (8005d44 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8005d12:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8005d14:	480c      	ldr	r0, [pc, #48]	; (8005d48 <LoopForever+0x8>)
 8005d16:	490d      	ldr	r1, [pc, #52]	; (8005d4c <LoopForever+0xc>)
 8005d18:	4a0d      	ldr	r2, [pc, #52]	; (8005d50 <LoopForever+0x10>)
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	f7ff ffef 	bl	8005cfe <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8005d20:	480c      	ldr	r0, [pc, #48]	; (8005d54 <LoopForever+0x14>)
 8005d22:	490d      	ldr	r1, [pc, #52]	; (8005d58 <LoopForever+0x18>)
 8005d24:	2300      	movs	r3, #0
 8005d26:	f7ff fff0 	bl	8005d0a <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8005d2a:	480c      	ldr	r0, [pc, #48]	; (8005d5c <LoopForever+0x1c>)
 8005d2c:	490c      	ldr	r1, [pc, #48]	; (8005d60 <LoopForever+0x20>)
 8005d2e:	2300      	movs	r3, #0
 8005d30:	f7ff ffeb 	bl	8005d0a <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8005d34:	f7ff f9e4 	bl	8005100 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8005d38:	f014 fdd0 	bl	801a8dc <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8005d3c:	f7fd fd5e 	bl	80037fc <main>

08005d40 <LoopForever>:

LoopForever:
  b LoopForever
 8005d40:	e7fe      	b.n	8005d40 <LoopForever>
 8005d42:	0000      	.short	0x0000
Reset_Handler:  ldr   r0, =_estack
 8005d44:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8005d48:	20000004 	.word	0x20000004
 8005d4c:	200002dc 	.word	0x200002dc
 8005d50:	0801cd90 	.word	0x0801cd90
  INIT_BSS _sbss, _ebss
 8005d54:	20000390 	.word	0x20000390
 8005d58:	2002a178 	.word	0x2002a178
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8005d5c:	200300e0 	.word	0x200300e0
 8005d60:	20030b57 	.word	0x20030b57

08005d64 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005d64:	e7fe      	b.n	8005d64 <ADC1_IRQHandler>
	...

08005d68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b082      	sub	sp, #8
 8005d6c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005d72:	4b0c      	ldr	r3, [pc, #48]	; (8005da4 <HAL_Init+0x3c>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a0b      	ldr	r2, [pc, #44]	; (8005da4 <HAL_Init+0x3c>)
 8005d78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d7c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005d7e:	2003      	movs	r0, #3
 8005d80:	f001 fdf0 	bl	8007964 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005d84:	2000      	movs	r0, #0
 8005d86:	f7fe fef1 	bl	8004b6c <HAL_InitTick>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d002      	beq.n	8005d96 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	71fb      	strb	r3, [r7, #7]
 8005d94:	e001      	b.n	8005d9a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005d96:	f7fe feb0 	bl	8004afa <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005d9a:	79fb      	ldrb	r3, [r7, #7]
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3708      	adds	r7, #8
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	58004000 	.word	0x58004000

08005da8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005da8:	b480      	push	{r7}
 8005daa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005dac:	4b06      	ldr	r3, [pc, #24]	; (8005dc8 <HAL_IncTick+0x20>)
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	461a      	mov	r2, r3
 8005db2:	4b06      	ldr	r3, [pc, #24]	; (8005dcc <HAL_IncTick+0x24>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4413      	add	r3, r2
 8005db8:	4a04      	ldr	r2, [pc, #16]	; (8005dcc <HAL_IncTick+0x24>)
 8005dba:	6013      	str	r3, [r2, #0]
}
 8005dbc:	bf00      	nop
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr
 8005dc6:	bf00      	nop
 8005dc8:	20000080 	.word	0x20000080
 8005dcc:	20028968 	.word	0x20028968

08005dd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	af00      	add	r7, sp, #0
  return uwTick;
 8005dd4:	4b03      	ldr	r3, [pc, #12]	; (8005de4 <HAL_GetTick+0x14>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr
 8005de2:	bf00      	nop
 8005de4:	20028968 	.word	0x20028968

08005de8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8005de8:	b480      	push	{r7}
 8005dea:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8005dec:	4b03      	ldr	r3, [pc, #12]	; (8005dfc <HAL_GetTickPrio+0x14>)
 8005dee:	681b      	ldr	r3, [r3, #0]
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr
 8005dfa:	bf00      	nop
 8005dfc:	2000007c 	.word	0x2000007c

08005e00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b084      	sub	sp, #16
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8005e08:	f7ff ffe2 	bl	8005dd0 <HAL_GetTick>
 8005e0c:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e18:	d005      	beq.n	8005e26 <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 8005e1a:	4b09      	ldr	r3, [pc, #36]	; (8005e40 <HAL_Delay+0x40>)
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	461a      	mov	r2, r3
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	4413      	add	r3, r2
 8005e24:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8005e26:	bf00      	nop
 8005e28:	f7ff ffd2 	bl	8005dd0 <HAL_GetTick>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	1ad3      	subs	r3, r2, r3
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d8f7      	bhi.n	8005e28 <HAL_Delay+0x28>
    {
    }
  }
 8005e38:	bf00      	nop
 8005e3a:	3710      	adds	r7, #16
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}
 8005e40:	20000080 	.word	0x20000080

08005e44 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	6039      	str	r1, [r7, #0]
#if defined (ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	431a      	orrs	r2, r3
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	609a      	str	r2, [r3, #8]
#endif
}
 8005e5e:	bf00      	nop
 8005e60:	370c      	adds	r7, #12
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr

08005e6a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005e6a:	b480      	push	{r7}
 8005e6c:	b083      	sub	sp, #12
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
 8005e72:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	431a      	orrs	r2, r3
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	609a      	str	r2, [r3, #8]
}
 8005e84:	bf00      	nop
 8005e86:	370c      	adds	r7, #12
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b083      	sub	sp, #12
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	370c      	adds	r7, #12
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr

08005eac <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b087      	sub	sp, #28
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	60b9      	str	r1, [r7, #8]
 8005eb6:	607a      	str	r2, [r7, #4]
 8005eb8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	3360      	adds	r3, #96	; 0x60
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	4413      	add	r3, r2
 8005ec6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	4b08      	ldr	r3, [pc, #32]	; (8005ef0 <LL_ADC_SetOffset+0x44>)
 8005ece:	4013      	ands	r3, r2
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8005ed6:	683a      	ldr	r2, [r7, #0]
 8005ed8:	430a      	orrs	r2, r1
 8005eda:	4313      	orrs	r3, r2
 8005edc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005ee4:	bf00      	nop
 8005ee6:	371c      	adds	r7, #28
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr
 8005ef0:	03fff000 	.word	0x03fff000

08005ef4 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b085      	sub	sp, #20
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	3360      	adds	r3, #96	; 0x60
 8005f02:	461a      	mov	r2, r3
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	4413      	add	r3, r2
 8005f0a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3714      	adds	r7, #20
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b087      	sub	sp, #28
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	60b9      	str	r1, [r7, #8]
 8005f2a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	3360      	adds	r3, #96	; 0x60
 8005f30:	461a      	mov	r2, r3
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	4413      	add	r3, r2
 8005f38:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	431a      	orrs	r2, r3
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005f4a:	bf00      	nop
 8005f4c:	371c      	adds	r7, #28
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr

08005f56 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005f56:	b480      	push	{r7}
 8005f58:	b083      	sub	sp, #12
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
#if defined (ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d101      	bne.n	8005f6e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e000      	b.n	8005f70 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005f6e:	2300      	movs	r3, #0
#endif
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	370c      	adds	r7, #12
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b087      	sub	sp, #28
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	3330      	adds	r3, #48	; 0x30
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	0a1b      	lsrs	r3, r3, #8
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	f003 030c 	and.w	r3, r3, #12
 8005f98:	4413      	add	r3, r2
 8005f9a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	f003 031f 	and.w	r3, r3, #31
 8005fa6:	211f      	movs	r1, #31
 8005fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8005fac:	43db      	mvns	r3, r3
 8005fae:	401a      	ands	r2, r3
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	0e9b      	lsrs	r3, r3, #26
 8005fb4:	f003 011f 	and.w	r1, r3, #31
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	f003 031f 	and.w	r3, r3, #31
 8005fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8005fc2:	431a      	orrs	r2, r3
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif
}
 8005fc8:	bf00      	nop
 8005fca:	371c      	adds	r7, #28
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr

08005fd4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b087      	sub	sp, #28
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	60f8      	str	r0, [r7, #12]
 8005fdc:	60b9      	str	r1, [r7, #8]
 8005fde:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	3314      	adds	r3, #20
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	0e5b      	lsrs	r3, r3, #25
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	f003 0304 	and.w	r3, r3, #4
 8005ff0:	4413      	add	r3, r2
 8005ff2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	0d1b      	lsrs	r3, r3, #20
 8005ffc:	f003 031f 	and.w	r3, r3, #31
 8006000:	2107      	movs	r1, #7
 8006002:	fa01 f303 	lsl.w	r3, r1, r3
 8006006:	43db      	mvns	r3, r3
 8006008:	401a      	ands	r2, r3
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	0d1b      	lsrs	r3, r3, #20
 800600e:	f003 031f 	and.w	r3, r3, #31
 8006012:	6879      	ldr	r1, [r7, #4]
 8006014:	fa01 f303 	lsl.w	r3, r1, r3
 8006018:	431a      	orrs	r2, r3
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif
}
 800601e:	bf00      	nop
 8006020:	371c      	adds	r7, #28
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr
	...

0800602c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800602c:	b480      	push	{r7}
 800602e:	b085      	sub	sp, #20
 8006030:	af00      	add	r7, sp, #0
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	60b9      	str	r1, [r7, #8]
 8006036:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006044:	43db      	mvns	r3, r3
 8006046:	401a      	ands	r2, r3
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f003 0318 	and.w	r3, r3, #24
 800604e:	4908      	ldr	r1, [pc, #32]	; (8006070 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006050:	40d9      	lsrs	r1, r3
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	400b      	ands	r3, r1
 8006056:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800605a:	431a      	orrs	r2, r3
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8006062:	bf00      	nop
 8006064:	3714      	adds	r7, #20
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr
 800606e:	bf00      	nop
 8006070:	0007ffff 	.word	0x0007ffff

08006074 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8006084:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	6093      	str	r3, [r2, #8]
}
 800608c:	bf00      	nop
 800608e:	370c      	adds	r7, #12
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80060a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060ac:	d101      	bne.n	80060b2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80060ae:	2301      	movs	r3, #1
 80060b0:	e000      	b.n	80060b4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	370c      	adds	r7, #12
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80060d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80060d4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80060dc:	bf00      	nop
 80060de:	370c      	adds	r7, #12
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80060fc:	d101      	bne.n	8006102 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80060fe:	2301      	movs	r3, #1
 8006100:	e000      	b.n	8006104 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006102:	2300      	movs	r3, #0
}
 8006104:	4618      	mov	r0, r3
 8006106:	370c      	adds	r7, #12
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006110:	b480      	push	{r7}
 8006112:	b083      	sub	sp, #12
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006120:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006124:	f043 0201 	orr.w	r2, r3, #1
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800612c:	bf00      	nop
 800612e:	370c      	adds	r7, #12
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8006138:	b480      	push	{r7}
 800613a:	b083      	sub	sp, #12
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006148:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800614c:	f043 0202 	orr.w	r2, r3, #2
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8006154:	bf00      	nop
 8006156:	370c      	adds	r7, #12
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	f003 0301 	and.w	r3, r3, #1
 8006170:	2b01      	cmp	r3, #1
 8006172:	d101      	bne.n	8006178 <LL_ADC_IsEnabled+0x18>
 8006174:	2301      	movs	r3, #1
 8006176:	e000      	b.n	800617a <LL_ADC_IsEnabled+0x1a>
 8006178:	2300      	movs	r3, #0
}
 800617a:	4618      	mov	r0, r3
 800617c:	370c      	adds	r7, #12
 800617e:	46bd      	mov	sp, r7
 8006180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006184:	4770      	bx	lr

08006186 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8006186:	b480      	push	{r7}
 8006188:	b083      	sub	sp, #12
 800618a:	af00      	add	r7, sp, #0
 800618c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	f003 0302 	and.w	r3, r3, #2
 8006196:	2b02      	cmp	r3, #2
 8006198:	d101      	bne.n	800619e <LL_ADC_IsDisableOngoing+0x18>
 800619a:	2301      	movs	r3, #1
 800619c:	e000      	b.n	80061a0 <LL_ADC_IsDisableOngoing+0x1a>
 800619e:	2300      	movs	r3, #0
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	370c      	adds	r7, #12
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80061bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80061c0:	f043 0204 	orr.w	r2, r3, #4
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80061c8:	bf00      	nop
 80061ca:	370c      	adds	r7, #12
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b083      	sub	sp, #12
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80061e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80061e8:	f043 0210 	orr.w	r2, r3, #16
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80061f0:	bf00      	nop
 80061f2:	370c      	adds	r7, #12
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b083      	sub	sp, #12
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	f003 0304 	and.w	r3, r3, #4
 800620c:	2b04      	cmp	r3, #4
 800620e:	d101      	bne.n	8006214 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006210:	2301      	movs	r3, #1
 8006212:	e000      	b.n	8006216 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	370c      	adds	r7, #12
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr

08006222 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8006222:	b480      	push	{r7}
 8006224:	b083      	sub	sp, #12
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006232:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006236:	f043 0220 	orr.w	r2, r3, #32
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800623e:	bf00      	nop
 8006240:	370c      	adds	r7, #12
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr

0800624a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800624a:	b480      	push	{r7}
 800624c:	b083      	sub	sp, #12
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	f003 0308 	and.w	r3, r3, #8
 800625a:	2b08      	cmp	r3, #8
 800625c:	d101      	bne.n	8006262 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800625e:	2301      	movs	r3, #1
 8006260:	e000      	b.n	8006264 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006262:	2300      	movs	r3, #0
}
 8006264:	4618      	mov	r0, r3
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b088      	sub	sp, #32
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006278:	2300      	movs	r3, #0
 800627a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 800627c:	2300      	movs	r3, #0
 800627e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8006280:	2300      	movs	r3, #0
 8006282:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif

  /* Check ADC handle */
  if (hadc == NULL)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d101      	bne.n	800628e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	e12c      	b.n	80064e8 <HAL_ADC_Init+0x278>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	691b      	ldr	r3, [r3, #16]
 8006292:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006298:	2b00      	cmp	r3, #0
 800629a:	d109      	bne.n	80062b0 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f7fa fe35 	bl	8000f0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined (ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4618      	mov	r0, r3
 80062b6:	f7ff feef 	bl	8006098 <LL_ADC_IsDeepPowerDownEnabled>
 80062ba:	4603      	mov	r3, r0
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d004      	beq.n	80062ca <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4618      	mov	r0, r3
 80062c6:	f7ff fed5 	bl	8006074 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4618      	mov	r0, r3
 80062d0:	f7ff ff0a 	bl	80060e8 <LL_ADC_IsInternalRegulatorEnabled>
 80062d4:	4603      	mov	r3, r0
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d113      	bne.n	8006302 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4618      	mov	r0, r3
 80062e0:	f7ff feee 	bl	80060c0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80062e4:	4b82      	ldr	r3, [pc, #520]	; (80064f0 <HAL_ADC_Init+0x280>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	099b      	lsrs	r3, r3, #6
 80062ea:	4a82      	ldr	r2, [pc, #520]	; (80064f4 <HAL_ADC_Init+0x284>)
 80062ec:	fba2 2303 	umull	r2, r3, r2, r3
 80062f0:	099b      	lsrs	r3, r3, #6
 80062f2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80062f4:	e002      	b.n	80062fc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	3b01      	subs	r3, #1
 80062fa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d1f9      	bne.n	80062f6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4618      	mov	r0, r3
 8006308:	f7ff feee 	bl	80060e8 <LL_ADC_IsInternalRegulatorEnabled>
 800630c:	4603      	mov	r3, r0
 800630e:	2b00      	cmp	r3, #0
 8006310:	d10d      	bne.n	800632e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006316:	f043 0210 	orr.w	r2, r3, #16
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006322:	f043 0201 	orr.w	r2, r3, #1
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4618      	mov	r0, r3
 8006334:	f7ff ff62 	bl	80061fc <LL_ADC_REG_IsConversionOngoing>
 8006338:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800633e:	f003 0310 	and.w	r3, r3, #16
 8006342:	2b00      	cmp	r3, #0
 8006344:	f040 80c7 	bne.w	80064d6 <HAL_ADC_Init+0x266>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	2b00      	cmp	r3, #0
 800634c:	f040 80c3 	bne.w	80064d6 <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006354:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006358:	f043 0202 	orr.w	r2, r3, #2
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4618      	mov	r0, r3
 8006366:	f7ff fefb 	bl	8006160 <LL_ADC_IsEnabled>
 800636a:	4603      	mov	r3, r0
 800636c:	2b00      	cmp	r3, #0
 800636e:	d10b      	bne.n	8006388 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006370:	4861      	ldr	r0, [pc, #388]	; (80064f8 <HAL_ADC_Init+0x288>)
 8006372:	f7ff fef5 	bl	8006160 <LL_ADC_IsEnabled>
 8006376:	4603      	mov	r3, r0
 8006378:	2b00      	cmp	r3, #0
 800637a:	d105      	bne.n	8006388 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	4619      	mov	r1, r3
 8006382:	485e      	ldr	r0, [pc, #376]	; (80064fc <HAL_ADC_Init+0x28c>)
 8006384:	f7ff fd5e 	bl	8005e44 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	7e5b      	ldrb	r3, [r3, #25]
 800638c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006392:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8006398:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800639e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80063a6:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 80063a8:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80063aa:	69ba      	ldr	r2, [r7, #24]
 80063ac:	4313      	orrs	r3, r2
 80063ae:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d106      	bne.n	80063c8 <HAL_ADC_Init+0x158>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063be:	3b01      	subs	r3, #1
 80063c0:	045b      	lsls	r3, r3, #17
 80063c2:	69ba      	ldr	r2, [r7, #24]
 80063c4:	4313      	orrs	r3, r2
 80063c6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d009      	beq.n	80063e4 <HAL_ADC_Init+0x174>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063d4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063dc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80063de:	69ba      	ldr	r2, [r7, #24]
 80063e0:	4313      	orrs	r3, r2
 80063e2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	68da      	ldr	r2, [r3, #12]
 80063ea:	4b45      	ldr	r3, [pc, #276]	; (8006500 <HAL_ADC_Init+0x290>)
 80063ec:	4013      	ands	r3, r2
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	6812      	ldr	r2, [r2, #0]
 80063f2:	69b9      	ldr	r1, [r7, #24]
 80063f4:	430b      	orrs	r3, r1
 80063f6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4618      	mov	r0, r3
 80063fe:	f7ff fefd 	bl	80061fc <LL_ADC_REG_IsConversionOngoing>
 8006402:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4618      	mov	r0, r3
 800640a:	f7ff ff1e 	bl	800624a <LL_ADC_INJ_IsConversionOngoing>
 800640e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d13d      	bne.n	8006492 <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d13a      	bne.n	8006492 <HAL_ADC_Init+0x222>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006420:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006428:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800642a:	4313      	orrs	r3, r2
 800642c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006438:	f023 0302 	bic.w	r3, r3, #2
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	6812      	ldr	r2, [r2, #0]
 8006440:	69b9      	ldr	r1, [r7, #24]
 8006442:	430b      	orrs	r3, r1
 8006444:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800644c:	2b01      	cmp	r3, #1
 800644e:	d118      	bne.n	8006482 <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800645a:	f023 0304 	bic.w	r3, r3, #4
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006466:	4311      	orrs	r1, r2
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800646c:	4311      	orrs	r1, r2
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006472:	430a      	orrs	r2, r1
 8006474:	431a      	orrs	r2, r3
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f042 0201 	orr.w	r2, r2, #1
 800647e:	611a      	str	r2, [r3, #16]
 8006480:	e007      	b.n	8006492 <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	691a      	ldr	r2, [r3, #16]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f022 0201 	bic.w	r2, r2, #1
 8006490:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	2b01      	cmp	r3, #1
 8006498:	d10c      	bne.n	80064b4 <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064a0:	f023 010f 	bic.w	r1, r3, #15
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	69db      	ldr	r3, [r3, #28]
 80064a8:	1e5a      	subs	r2, r3, #1
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	430a      	orrs	r2, r1
 80064b0:	631a      	str	r2, [r3, #48]	; 0x30
 80064b2:	e007      	b.n	80064c4 <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f022 020f 	bic.w	r2, r2, #15
 80064c2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064c8:	f023 0303 	bic.w	r3, r3, #3
 80064cc:	f043 0201 	orr.w	r2, r3, #1
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	655a      	str	r2, [r3, #84]	; 0x54
 80064d4:	e007      	b.n	80064e6 <HAL_ADC_Init+0x276>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064da:	f043 0210 	orr.w	r2, r3, #16
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80064e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3720      	adds	r7, #32
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}
 80064f0:	20000078 	.word	0x20000078
 80064f4:	053e2d63 	.word	0x053e2d63
 80064f8:	50040000 	.word	0x50040000
 80064fc:	50040300 	.word	0x50040300
 8006500:	fff0c007 	.word	0xfff0c007

08006504 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b086      	sub	sp, #24
 8006508:	af00      	add	r7, sp, #0
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4618      	mov	r0, r3
 8006516:	f7ff fe71 	bl	80061fc <LL_ADC_REG_IsConversionOngoing>
 800651a:	4603      	mov	r3, r0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d167      	bne.n	80065f0 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006526:	2b01      	cmp	r3, #1
 8006528:	d101      	bne.n	800652e <HAL_ADC_Start_DMA+0x2a>
 800652a:	2302      	movs	r3, #2
 800652c:	e063      	b.n	80065f6 <HAL_ADC_Start_DMA+0xf2>
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2201      	movs	r2, #1
 8006532:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8006536:	68f8      	ldr	r0, [r7, #12]
 8006538:	f000 fd4c 	bl	8006fd4 <ADC_Enable>
 800653c:	4603      	mov	r3, r0
 800653e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8006540:	7dfb      	ldrb	r3, [r7, #23]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d14f      	bne.n	80065e6 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800654a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800654e:	f023 0301 	bic.w	r3, r3, #1
 8006552:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	655a      	str	r2, [r3, #84]	; 0x54
#if defined (ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800655e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006562:	2b00      	cmp	r3, #0
 8006564:	d006      	beq.n	8006574 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800656a:	f023 0206 	bic.w	r2, r3, #6
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	659a      	str	r2, [r3, #88]	; 0x58
 8006572:	e002      	b.n	800657a <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2200      	movs	r2, #0
 8006578:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800657e:	4a20      	ldr	r2, [pc, #128]	; (8006600 <HAL_ADC_Start_DMA+0xfc>)
 8006580:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006586:	4a1f      	ldr	r2, [pc, #124]	; (8006604 <HAL_ADC_Start_DMA+0x100>)
 8006588:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800658e:	4a1e      	ldr	r2, [pc, #120]	; (8006608 <HAL_ADC_Start_DMA+0x104>)
 8006590:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	221c      	movs	r2, #28
 8006598:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2200      	movs	r2, #0
 800659e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	685a      	ldr	r2, [r3, #4]
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f042 0210 	orr.w	r2, r2, #16
 80065b0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if defined (ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	68da      	ldr	r2, [r3, #12]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f042 0201 	orr.w	r2, r2, #1
 80065c0:	60da      	str	r2, [r3, #12]
#endif

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	3340      	adds	r3, #64	; 0x40
 80065cc:	4619      	mov	r1, r3
 80065ce:	68ba      	ldr	r2, [r7, #8]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f001 fac3 	bl	8007b5c <HAL_DMA_Start_IT>
 80065d6:	4603      	mov	r3, r0
 80065d8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4618      	mov	r0, r3
 80065e0:	f7ff fde4 	bl	80061ac <LL_ADC_REG_StartConversion>
 80065e4:	e006      	b.n	80065f4 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80065ee:	e001      	b.n	80065f4 <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80065f0:	2302      	movs	r3, #2
 80065f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80065f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3718      	adds	r7, #24
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	08007179 	.word	0x08007179
 8006604:	08007251 	.word	0x08007251
 8006608:	0800726d 	.word	0x0800726d

0800660c <HAL_ADC_Stop_DMA>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800661a:	2b01      	cmp	r3, #1
 800661c:	d101      	bne.n	8006622 <HAL_ADC_Stop_DMA+0x16>
 800661e:	2302      	movs	r3, #2
 8006620:	e051      	b.n	80066c6 <HAL_ADC_Stop_DMA+0xba>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2201      	movs	r2, #1
 8006626:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
#if defined (ADC_SUPPORT_2_5_MSPS)
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
#else
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800662a:	2103      	movs	r1, #3
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f000 fc1d 	bl	8006e6c <ADC_ConversionStop>
 8006632:	4603      	mov	r3, r0
 8006634:	73fb      	strb	r3, [r7, #15]
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8006636:	7bfb      	ldrb	r3, [r7, #15]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d13f      	bne.n	80066bc <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continous requests is kept) */
#if defined (ADC_SUPPORT_2_5_MSPS)
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	68da      	ldr	r2, [r3, #12]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f022 0201 	bic.w	r2, r2, #1
 800664a:	60da      	str	r2, [r3, #12]
#endif

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006650:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006654:	b2db      	uxtb	r3, r3
 8006656:	2b02      	cmp	r3, #2
 8006658:	d10f      	bne.n	800667a <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800665e:	4618      	mov	r0, r3
 8006660:	f001 faf7 	bl	8007c52 <HAL_DMA_Abort>
 8006664:	4603      	mov	r3, r0
 8006666:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8006668:	7bfb      	ldrb	r3, [r7, #15]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d005      	beq.n	800667a <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006672:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	685a      	ldr	r2, [r3, #4]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f022 0210 	bic.w	r2, r2, #16
 8006688:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 800668a:	7bfb      	ldrb	r3, [r7, #15]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d105      	bne.n	800669c <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f000 fd19 	bl	80070c8 <ADC_Disable>
 8006696:	4603      	mov	r3, r0
 8006698:	73fb      	strb	r3, [r7, #15]
 800669a:	e002      	b.n	80066a2 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 fd13 	bl	80070c8 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80066a2:	7bfb      	ldrb	r3, [r7, #15]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d109      	bne.n	80066bc <HAL_ADC_Stop_DMA+0xb0>
#if defined (ADC_SUPPORT_2_5_MSPS)
      ADC_STATE_CLR_SET(hadc->State,
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
#else
      ADC_STATE_CLR_SET(hadc->State,
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066ac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80066b0:	f023 0301 	bic.w	r3, r3, #1
 80066b4:	f043 0201 	orr.w	r2, r3, #1
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80066c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3710      	adds	r7, #16
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}

080066ce <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80066ce:	b480      	push	{r7}
 80066d0:	b083      	sub	sp, #12
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80066d6:	bf00      	nop
 80066d8:	370c      	adds	r7, #12
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr
	...

080066e4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b0b6      	sub	sp, #216	; 0xd8
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80066ee:	2300      	movs	r3, #0
 80066f0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80066f4:	2300      	movs	r3, #0
 80066f6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d101      	bne.n	8006706 <HAL_ADC_ConfigChannel+0x22>
 8006702:	2302      	movs	r3, #2
 8006704:	e39e      	b.n	8006e44 <HAL_ADC_ConfigChannel+0x760>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2201      	movs	r2, #1
 800670a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4618      	mov	r0, r3
 8006714:	f7ff fd72 	bl	80061fc <LL_ADC_REG_IsConversionOngoing>
 8006718:	4603      	mov	r3, r0
 800671a:	2b00      	cmp	r3, #0
 800671c:	f040 8383 	bne.w	8006e26 <HAL_ADC_ConfigChannel+0x742>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6818      	ldr	r0, [r3, #0]
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	6859      	ldr	r1, [r3, #4]
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	461a      	mov	r2, r3
 800672e:	f7ff fc25 	bl	8005f7c <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined (ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4618      	mov	r0, r3
 8006738:	f7ff fd60 	bl	80061fc <LL_ADC_REG_IsConversionOngoing>
 800673c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4618      	mov	r0, r3
 8006746:	f7ff fd80 	bl	800624a <LL_ADC_INJ_IsConversionOngoing>
 800674a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800674e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006752:	2b00      	cmp	r3, #0
 8006754:	f040 81a6 	bne.w	8006aa4 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006758:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800675c:	2b00      	cmp	r3, #0
 800675e:	f040 81a1 	bne.w	8006aa4 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6818      	ldr	r0, [r3, #0]
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	6819      	ldr	r1, [r3, #0]
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	461a      	mov	r2, r3
 8006770:	f7ff fc30 	bl	8005fd4 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	695a      	ldr	r2, [r3, #20]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	68db      	ldr	r3, [r3, #12]
 800677e:	08db      	lsrs	r3, r3, #3
 8006780:	f003 0303 	and.w	r3, r3, #3
 8006784:	005b      	lsls	r3, r3, #1
 8006786:	fa02 f303 	lsl.w	r3, r2, r3
 800678a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	691b      	ldr	r3, [r3, #16]
 8006792:	2b04      	cmp	r3, #4
 8006794:	d00a      	beq.n	80067ac <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6818      	ldr	r0, [r3, #0]
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	6919      	ldr	r1, [r3, #16]
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80067a6:	f7ff fb81 	bl	8005eac <LL_ADC_SetOffset>
 80067aa:	e17b      	b.n	8006aa4 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	2100      	movs	r1, #0
 80067b2:	4618      	mov	r0, r3
 80067b4:	f7ff fb9e 	bl	8005ef4 <LL_ADC_GetOffsetChannel>
 80067b8:	4603      	mov	r3, r0
 80067ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d10a      	bne.n	80067d8 <HAL_ADC_ConfigChannel+0xf4>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2100      	movs	r1, #0
 80067c8:	4618      	mov	r0, r3
 80067ca:	f7ff fb93 	bl	8005ef4 <LL_ADC_GetOffsetChannel>
 80067ce:	4603      	mov	r3, r0
 80067d0:	0e9b      	lsrs	r3, r3, #26
 80067d2:	f003 021f 	and.w	r2, r3, #31
 80067d6:	e01e      	b.n	8006816 <HAL_ADC_ConfigChannel+0x132>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2100      	movs	r1, #0
 80067de:	4618      	mov	r0, r3
 80067e0:	f7ff fb88 	bl	8005ef4 <LL_ADC_GetOffsetChannel>
 80067e4:	4603      	mov	r3, r0
 80067e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80067ee:	fa93 f3a3 	rbit	r3, r3
 80067f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 80067f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80067fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 80067fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006802:	2b00      	cmp	r3, #0
 8006804:	d101      	bne.n	800680a <HAL_ADC_ConfigChannel+0x126>
    return 32U;
 8006806:	2320      	movs	r3, #32
 8006808:	e004      	b.n	8006814 <HAL_ADC_ConfigChannel+0x130>
  return __builtin_clz(value);
 800680a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800680e:	fab3 f383 	clz	r3, r3
 8006812:	b2db      	uxtb	r3, r3
 8006814:	461a      	mov	r2, r3
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800681e:	2b00      	cmp	r3, #0
 8006820:	d105      	bne.n	800682e <HAL_ADC_ConfigChannel+0x14a>
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	0e9b      	lsrs	r3, r3, #26
 8006828:	f003 031f 	and.w	r3, r3, #31
 800682c:	e018      	b.n	8006860 <HAL_ADC_ConfigChannel+0x17c>
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006836:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800683a:	fa93 f3a3 	rbit	r3, r3
 800683e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8006842:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006846:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800684a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800684e:	2b00      	cmp	r3, #0
 8006850:	d101      	bne.n	8006856 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8006852:	2320      	movs	r3, #32
 8006854:	e004      	b.n	8006860 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8006856:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800685a:	fab3 f383 	clz	r3, r3
 800685e:	b2db      	uxtb	r3, r3
 8006860:	429a      	cmp	r2, r3
 8006862:	d106      	bne.n	8006872 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2200      	movs	r2, #0
 800686a:	2100      	movs	r1, #0
 800686c:	4618      	mov	r0, r3
 800686e:	f7ff fb57 	bl	8005f20 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2101      	movs	r1, #1
 8006878:	4618      	mov	r0, r3
 800687a:	f7ff fb3b 	bl	8005ef4 <LL_ADC_GetOffsetChannel>
 800687e:	4603      	mov	r3, r0
 8006880:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006884:	2b00      	cmp	r3, #0
 8006886:	d10a      	bne.n	800689e <HAL_ADC_ConfigChannel+0x1ba>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	2101      	movs	r1, #1
 800688e:	4618      	mov	r0, r3
 8006890:	f7ff fb30 	bl	8005ef4 <LL_ADC_GetOffsetChannel>
 8006894:	4603      	mov	r3, r0
 8006896:	0e9b      	lsrs	r3, r3, #26
 8006898:	f003 021f 	and.w	r2, r3, #31
 800689c:	e01e      	b.n	80068dc <HAL_ADC_ConfigChannel+0x1f8>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	2101      	movs	r1, #1
 80068a4:	4618      	mov	r0, r3
 80068a6:	f7ff fb25 	bl	8005ef4 <LL_ADC_GetOffsetChannel>
 80068aa:	4603      	mov	r3, r0
 80068ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068b0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80068b4:	fa93 f3a3 	rbit	r3, r3
 80068b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80068bc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80068c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80068c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d101      	bne.n	80068d0 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 80068cc:	2320      	movs	r3, #32
 80068ce:	e004      	b.n	80068da <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 80068d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80068d4:	fab3 f383 	clz	r3, r3
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	461a      	mov	r2, r3
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d105      	bne.n	80068f4 <HAL_ADC_ConfigChannel+0x210>
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	0e9b      	lsrs	r3, r3, #26
 80068ee:	f003 031f 	and.w	r3, r3, #31
 80068f2:	e018      	b.n	8006926 <HAL_ADC_ConfigChannel+0x242>
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006900:	fa93 f3a3 	rbit	r3, r3
 8006904:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8006908:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800690c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8006910:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006914:	2b00      	cmp	r3, #0
 8006916:	d101      	bne.n	800691c <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8006918:	2320      	movs	r3, #32
 800691a:	e004      	b.n	8006926 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 800691c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006920:	fab3 f383 	clz	r3, r3
 8006924:	b2db      	uxtb	r3, r3
 8006926:	429a      	cmp	r2, r3
 8006928:	d106      	bne.n	8006938 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	2200      	movs	r2, #0
 8006930:	2101      	movs	r1, #1
 8006932:	4618      	mov	r0, r3
 8006934:	f7ff faf4 	bl	8005f20 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	2102      	movs	r1, #2
 800693e:	4618      	mov	r0, r3
 8006940:	f7ff fad8 	bl	8005ef4 <LL_ADC_GetOffsetChannel>
 8006944:	4603      	mov	r3, r0
 8006946:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800694a:	2b00      	cmp	r3, #0
 800694c:	d10a      	bne.n	8006964 <HAL_ADC_ConfigChannel+0x280>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	2102      	movs	r1, #2
 8006954:	4618      	mov	r0, r3
 8006956:	f7ff facd 	bl	8005ef4 <LL_ADC_GetOffsetChannel>
 800695a:	4603      	mov	r3, r0
 800695c:	0e9b      	lsrs	r3, r3, #26
 800695e:	f003 021f 	and.w	r2, r3, #31
 8006962:	e01e      	b.n	80069a2 <HAL_ADC_ConfigChannel+0x2be>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	2102      	movs	r1, #2
 800696a:	4618      	mov	r0, r3
 800696c:	f7ff fac2 	bl	8005ef4 <LL_ADC_GetOffsetChannel>
 8006970:	4603      	mov	r3, r0
 8006972:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006976:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800697a:	fa93 f3a3 	rbit	r3, r3
 800697e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8006982:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006986:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800698a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800698e:	2b00      	cmp	r3, #0
 8006990:	d101      	bne.n	8006996 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8006992:	2320      	movs	r3, #32
 8006994:	e004      	b.n	80069a0 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8006996:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800699a:	fab3 f383 	clz	r3, r3
 800699e:	b2db      	uxtb	r3, r3
 80069a0:	461a      	mov	r2, r3
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d105      	bne.n	80069ba <HAL_ADC_ConfigChannel+0x2d6>
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	0e9b      	lsrs	r3, r3, #26
 80069b4:	f003 031f 	and.w	r3, r3, #31
 80069b8:	e016      	b.n	80069e8 <HAL_ADC_ConfigChannel+0x304>
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80069c6:	fa93 f3a3 	rbit	r3, r3
 80069ca:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80069cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80069ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80069d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d101      	bne.n	80069de <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 80069da:	2320      	movs	r3, #32
 80069dc:	e004      	b.n	80069e8 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 80069de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80069e2:	fab3 f383 	clz	r3, r3
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d106      	bne.n	80069fa <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	2200      	movs	r2, #0
 80069f2:	2102      	movs	r1, #2
 80069f4:	4618      	mov	r0, r3
 80069f6:	f7ff fa93 	bl	8005f20 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	2103      	movs	r1, #3
 8006a00:	4618      	mov	r0, r3
 8006a02:	f7ff fa77 	bl	8005ef4 <LL_ADC_GetOffsetChannel>
 8006a06:	4603      	mov	r3, r0
 8006a08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d10a      	bne.n	8006a26 <HAL_ADC_ConfigChannel+0x342>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	2103      	movs	r1, #3
 8006a16:	4618      	mov	r0, r3
 8006a18:	f7ff fa6c 	bl	8005ef4 <LL_ADC_GetOffsetChannel>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	0e9b      	lsrs	r3, r3, #26
 8006a20:	f003 021f 	and.w	r2, r3, #31
 8006a24:	e017      	b.n	8006a56 <HAL_ADC_ConfigChannel+0x372>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	2103      	movs	r1, #3
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f7ff fa61 	bl	8005ef4 <LL_ADC_GetOffsetChannel>
 8006a32:	4603      	mov	r3, r0
 8006a34:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a38:	fa93 f3a3 	rbit	r3, r3
 8006a3c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8006a3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a40:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8006a42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d101      	bne.n	8006a4c <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8006a48:	2320      	movs	r3, #32
 8006a4a:	e003      	b.n	8006a54 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8006a4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a4e:	fab3 f383 	clz	r3, r3
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	461a      	mov	r2, r3
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d105      	bne.n	8006a6e <HAL_ADC_ConfigChannel+0x38a>
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	0e9b      	lsrs	r3, r3, #26
 8006a68:	f003 031f 	and.w	r3, r3, #31
 8006a6c:	e011      	b.n	8006a92 <HAL_ADC_ConfigChannel+0x3ae>
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a76:	fa93 f3a3 	rbit	r3, r3
 8006a7a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8006a7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a7e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8006a80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d101      	bne.n	8006a8a <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8006a86:	2320      	movs	r3, #32
 8006a88:	e003      	b.n	8006a92 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8006a8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a8c:	fab3 f383 	clz	r3, r3
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d106      	bne.n	8006aa4 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	2103      	movs	r1, #3
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f7ff fa3e 	bl	8005f20 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f7ff fb59 	bl	8006160 <LL_ADC_IsEnabled>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	f040 81c1 	bne.w	8006e38 <HAL_ADC_ConfigChannel+0x754>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6818      	ldr	r0, [r3, #0]
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	6819      	ldr	r1, [r3, #0]
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	f7ff fab2 	bl	800602c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	68db      	ldr	r3, [r3, #12]
 8006acc:	4a8e      	ldr	r2, [pc, #568]	; (8006d08 <HAL_ADC_ConfigChannel+0x624>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	f040 8130 	bne.w	8006d34 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d10b      	bne.n	8006afc <HAL_ADC_ConfigChannel+0x418>
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	0e9b      	lsrs	r3, r3, #26
 8006aea:	3301      	adds	r3, #1
 8006aec:	f003 031f 	and.w	r3, r3, #31
 8006af0:	2b09      	cmp	r3, #9
 8006af2:	bf94      	ite	ls
 8006af4:	2301      	movls	r3, #1
 8006af6:	2300      	movhi	r3, #0
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	e019      	b.n	8006b30 <HAL_ADC_ConfigChannel+0x44c>
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b04:	fa93 f3a3 	rbit	r3, r3
 8006b08:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8006b0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b0c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8006b0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d101      	bne.n	8006b18 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8006b14:	2320      	movs	r3, #32
 8006b16:	e003      	b.n	8006b20 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8006b18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b1a:	fab3 f383 	clz	r3, r3
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	3301      	adds	r3, #1
 8006b22:	f003 031f 	and.w	r3, r3, #31
 8006b26:	2b09      	cmp	r3, #9
 8006b28:	bf94      	ite	ls
 8006b2a:	2301      	movls	r3, #1
 8006b2c:	2300      	movhi	r3, #0
 8006b2e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d079      	beq.n	8006c28 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d107      	bne.n	8006b50 <HAL_ADC_ConfigChannel+0x46c>
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	0e9b      	lsrs	r3, r3, #26
 8006b46:	3301      	adds	r3, #1
 8006b48:	069b      	lsls	r3, r3, #26
 8006b4a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006b4e:	e015      	b.n	8006b7c <HAL_ADC_ConfigChannel+0x498>
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b58:	fa93 f3a3 	rbit	r3, r3
 8006b5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006b5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b60:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8006b62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d101      	bne.n	8006b6c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8006b68:	2320      	movs	r3, #32
 8006b6a:	e003      	b.n	8006b74 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8006b6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b6e:	fab3 f383 	clz	r3, r3
 8006b72:	b2db      	uxtb	r3, r3
 8006b74:	3301      	adds	r3, #1
 8006b76:	069b      	lsls	r3, r3, #26
 8006b78:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d109      	bne.n	8006b9c <HAL_ADC_ConfigChannel+0x4b8>
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	0e9b      	lsrs	r3, r3, #26
 8006b8e:	3301      	adds	r3, #1
 8006b90:	f003 031f 	and.w	r3, r3, #31
 8006b94:	2101      	movs	r1, #1
 8006b96:	fa01 f303 	lsl.w	r3, r1, r3
 8006b9a:	e017      	b.n	8006bcc <HAL_ADC_ConfigChannel+0x4e8>
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ba2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ba4:	fa93 f3a3 	rbit	r3, r3
 8006ba8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8006baa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bac:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8006bae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d101      	bne.n	8006bb8 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8006bb4:	2320      	movs	r3, #32
 8006bb6:	e003      	b.n	8006bc0 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8006bb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bba:	fab3 f383 	clz	r3, r3
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	3301      	adds	r3, #1
 8006bc2:	f003 031f 	and.w	r3, r3, #31
 8006bc6:	2101      	movs	r1, #1
 8006bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8006bcc:	ea42 0103 	orr.w	r1, r2, r3
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d10a      	bne.n	8006bf2 <HAL_ADC_ConfigChannel+0x50e>
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	0e9b      	lsrs	r3, r3, #26
 8006be2:	3301      	adds	r3, #1
 8006be4:	f003 021f 	and.w	r2, r3, #31
 8006be8:	4613      	mov	r3, r2
 8006bea:	005b      	lsls	r3, r3, #1
 8006bec:	4413      	add	r3, r2
 8006bee:	051b      	lsls	r3, r3, #20
 8006bf0:	e018      	b.n	8006c24 <HAL_ADC_ConfigChannel+0x540>
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bfa:	fa93 f3a3 	rbit	r3, r3
 8006bfe:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c02:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8006c04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d101      	bne.n	8006c0e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8006c0a:	2320      	movs	r3, #32
 8006c0c:	e003      	b.n	8006c16 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8006c0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c10:	fab3 f383 	clz	r3, r3
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	3301      	adds	r3, #1
 8006c18:	f003 021f 	and.w	r2, r3, #31
 8006c1c:	4613      	mov	r3, r2
 8006c1e:	005b      	lsls	r3, r3, #1
 8006c20:	4413      	add	r3, r2
 8006c22:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006c24:	430b      	orrs	r3, r1
 8006c26:	e080      	b.n	8006d2a <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d107      	bne.n	8006c44 <HAL_ADC_ConfigChannel+0x560>
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	0e9b      	lsrs	r3, r3, #26
 8006c3a:	3301      	adds	r3, #1
 8006c3c:	069b      	lsls	r3, r3, #26
 8006c3e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006c42:	e015      	b.n	8006c70 <HAL_ADC_ConfigChannel+0x58c>
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c4c:	fa93 f3a3 	rbit	r3, r3
 8006c50:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8006c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c54:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8006c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d101      	bne.n	8006c60 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8006c5c:	2320      	movs	r3, #32
 8006c5e:	e003      	b.n	8006c68 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8006c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c62:	fab3 f383 	clz	r3, r3
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	3301      	adds	r3, #1
 8006c6a:	069b      	lsls	r3, r3, #26
 8006c6c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d109      	bne.n	8006c90 <HAL_ADC_ConfigChannel+0x5ac>
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	0e9b      	lsrs	r3, r3, #26
 8006c82:	3301      	adds	r3, #1
 8006c84:	f003 031f 	and.w	r3, r3, #31
 8006c88:	2101      	movs	r1, #1
 8006c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8006c8e:	e017      	b.n	8006cc0 <HAL_ADC_ConfigChannel+0x5dc>
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c96:	6a3b      	ldr	r3, [r7, #32]
 8006c98:	fa93 f3a3 	rbit	r3, r3
 8006c9c:	61fb      	str	r3, [r7, #28]
  return result;
 8006c9e:	69fb      	ldr	r3, [r7, #28]
 8006ca0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d101      	bne.n	8006cac <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8006ca8:	2320      	movs	r3, #32
 8006caa:	e003      	b.n	8006cb4 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8006cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cae:	fab3 f383 	clz	r3, r3
 8006cb2:	b2db      	uxtb	r3, r3
 8006cb4:	3301      	adds	r3, #1
 8006cb6:	f003 031f 	and.w	r3, r3, #31
 8006cba:	2101      	movs	r1, #1
 8006cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8006cc0:	ea42 0103 	orr.w	r1, r2, r3
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d10d      	bne.n	8006cec <HAL_ADC_ConfigChannel+0x608>
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	0e9b      	lsrs	r3, r3, #26
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	f003 021f 	and.w	r2, r3, #31
 8006cdc:	4613      	mov	r3, r2
 8006cde:	005b      	lsls	r3, r3, #1
 8006ce0:	4413      	add	r3, r2
 8006ce2:	3b1e      	subs	r3, #30
 8006ce4:	051b      	lsls	r3, r3, #20
 8006ce6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006cea:	e01d      	b.n	8006d28 <HAL_ADC_ConfigChannel+0x644>
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	fa93 f3a3 	rbit	r3, r3
 8006cf8:	613b      	str	r3, [r7, #16]
  return result;
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006cfe:	69bb      	ldr	r3, [r7, #24]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d103      	bne.n	8006d0c <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8006d04:	2320      	movs	r3, #32
 8006d06:	e005      	b.n	8006d14 <HAL_ADC_ConfigChannel+0x630>
 8006d08:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8006d0c:	69bb      	ldr	r3, [r7, #24]
 8006d0e:	fab3 f383 	clz	r3, r3
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	3301      	adds	r3, #1
 8006d16:	f003 021f 	and.w	r2, r3, #31
 8006d1a:	4613      	mov	r3, r2
 8006d1c:	005b      	lsls	r3, r3, #1
 8006d1e:	4413      	add	r3, r2
 8006d20:	3b1e      	subs	r3, #30
 8006d22:	051b      	lsls	r3, r3, #20
 8006d24:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006d28:	430b      	orrs	r3, r1
 8006d2a:	683a      	ldr	r2, [r7, #0]
 8006d2c:	6892      	ldr	r2, [r2, #8]
 8006d2e:	4619      	mov	r1, r3
 8006d30:	f7ff f950 	bl	8005fd4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	4b44      	ldr	r3, [pc, #272]	; (8006e4c <HAL_ADC_ConfigChannel+0x768>)
 8006d3a:	4013      	ands	r3, r2
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d07b      	beq.n	8006e38 <HAL_ADC_ConfigChannel+0x754>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006d40:	4843      	ldr	r0, [pc, #268]	; (8006e50 <HAL_ADC_ConfigChannel+0x76c>)
 8006d42:	f7ff f8a5 	bl	8005e90 <LL_ADC_GetCommonPathInternalCh>
 8006d46:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006d4a:	4842      	ldr	r0, [pc, #264]	; (8006e54 <HAL_ADC_ConfigChannel+0x770>)
 8006d4c:	f7ff fa08 	bl	8006160 <LL_ADC_IsEnabled>
 8006d50:	4603      	mov	r3, r0
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d15d      	bne.n	8006e12 <HAL_ADC_ConfigChannel+0x72e>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a3f      	ldr	r2, [pc, #252]	; (8006e58 <HAL_ADC_ConfigChannel+0x774>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d126      	bne.n	8006dae <HAL_ADC_ConfigChannel+0x6ca>
 8006d60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006d64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d120      	bne.n	8006dae <HAL_ADC_ConfigChannel+0x6ca>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a38      	ldr	r2, [pc, #224]	; (8006e54 <HAL_ADC_ConfigChannel+0x770>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d160      	bne.n	8006e38 <HAL_ADC_ConfigChannel+0x754>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8006d76:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006d7a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006d7e:	4619      	mov	r1, r3
 8006d80:	4833      	ldr	r0, [pc, #204]	; (8006e50 <HAL_ADC_ConfigChannel+0x76c>)
 8006d82:	f7ff f872 	bl	8005e6a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8006d86:	4b35      	ldr	r3, [pc, #212]	; (8006e5c <HAL_ADC_ConfigChannel+0x778>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	099b      	lsrs	r3, r3, #6
 8006d8c:	4a34      	ldr	r2, [pc, #208]	; (8006e60 <HAL_ADC_ConfigChannel+0x77c>)
 8006d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d92:	099a      	lsrs	r2, r3, #6
 8006d94:	4613      	mov	r3, r2
 8006d96:	005b      	lsls	r3, r3, #1
 8006d98:	4413      	add	r3, r2
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8006d9e:	e002      	b.n	8006da6 <HAL_ADC_ConfigChannel+0x6c2>
              {
                wait_loop_index--;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	3b01      	subs	r3, #1
 8006da4:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d1f9      	bne.n	8006da0 <HAL_ADC_ConfigChannel+0x6bc>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006dac:	e044      	b.n	8006e38 <HAL_ADC_ConfigChannel+0x754>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a2c      	ldr	r2, [pc, #176]	; (8006e64 <HAL_ADC_ConfigChannel+0x780>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d113      	bne.n	8006de0 <HAL_ADC_ConfigChannel+0x6fc>
 8006db8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006dbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d10d      	bne.n	8006de0 <HAL_ADC_ConfigChannel+0x6fc>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a22      	ldr	r2, [pc, #136]	; (8006e54 <HAL_ADC_ConfigChannel+0x770>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d134      	bne.n	8006e38 <HAL_ADC_ConfigChannel+0x754>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8006dce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006dd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	481d      	ldr	r0, [pc, #116]	; (8006e50 <HAL_ADC_ConfigChannel+0x76c>)
 8006dda:	f7ff f846 	bl	8005e6a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006dde:	e02b      	b.n	8006e38 <HAL_ADC_ConfigChannel+0x754>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a20      	ldr	r2, [pc, #128]	; (8006e68 <HAL_ADC_ConfigChannel+0x784>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d126      	bne.n	8006e38 <HAL_ADC_ConfigChannel+0x754>
 8006dea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006dee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d120      	bne.n	8006e38 <HAL_ADC_ConfigChannel+0x754>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a16      	ldr	r2, [pc, #88]	; (8006e54 <HAL_ADC_ConfigChannel+0x770>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d11b      	bne.n	8006e38 <HAL_ADC_ConfigChannel+0x754>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8006e00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006e04:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006e08:	4619      	mov	r1, r3
 8006e0a:	4811      	ldr	r0, [pc, #68]	; (8006e50 <HAL_ADC_ConfigChannel+0x76c>)
 8006e0c:	f7ff f82d 	bl	8005e6a <LL_ADC_SetCommonPathInternalCh>
 8006e10:	e012      	b.n	8006e38 <HAL_ADC_ConfigChannel+0x754>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e16:	f043 0220 	orr.w	r2, r3, #32
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8006e24:	e008      	b.n	8006e38 <HAL_ADC_ConfigChannel+0x754>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e2a:	f043 0220 	orr.w	r2, r3, #32
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8006e40:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	37d8      	adds	r7, #216	; 0xd8
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}
 8006e4c:	80080000 	.word	0x80080000
 8006e50:	50040300 	.word	0x50040300
 8006e54:	50040000 	.word	0x50040000
 8006e58:	c7520000 	.word	0xc7520000
 8006e5c:	20000078 	.word	0x20000078
 8006e60:	053e2d63 	.word	0x053e2d63
 8006e64:	cb840000 	.word	0xcb840000
 8006e68:	80000001 	.word	0x80000001

08006e6c <ADC_ConversionStop>:
  *
  *         (1) On STM32WB serie, parameter not available on devices: STM32WB10xx, STM32WB15xx.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b088      	sub	sp, #32
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
    }
    
  }
#else
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8006e76:	2300      	movs	r3, #0
 8006e78:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4618      	mov	r0, r3
 8006e84:	f7ff f9ba 	bl	80061fc <LL_ADC_REG_IsConversionOngoing>
 8006e88:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f7ff f9db 	bl	800624a <LL_ADC_INJ_IsConversionOngoing>
 8006e94:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d103      	bne.n	8006ea4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	f000 8090 	beq.w	8006fc4 <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	68db      	ldr	r3, [r3, #12]
 8006eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d02a      	beq.n	8006f08 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	7e5b      	ldrb	r3, [r3, #25]
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d126      	bne.n	8006f08 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	7e1b      	ldrb	r3, [r3, #24]
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d122      	bne.n	8006f08 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8006ec6:	e014      	b.n	8006ef2 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8006ec8:	69fb      	ldr	r3, [r7, #28]
 8006eca:	4a41      	ldr	r2, [pc, #260]	; (8006fd0 <ADC_ConversionStop+0x164>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d90d      	bls.n	8006eec <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ed4:	f043 0210 	orr.w	r2, r3, #16
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ee0:	f043 0201 	orr.w	r2, r3, #1
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	e06c      	b.n	8006fc6 <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8006eec:	69fb      	ldr	r3, [r7, #28]
 8006eee:	3301      	adds	r3, #1
 8006ef0:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006efc:	2b40      	cmp	r3, #64	; 0x40
 8006efe:	d1e3      	bne.n	8006ec8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	2240      	movs	r2, #64	; 0x40
 8006f06:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8006f08:	69bb      	ldr	r3, [r7, #24]
 8006f0a:	2b02      	cmp	r3, #2
 8006f0c:	d014      	beq.n	8006f38 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4618      	mov	r0, r3
 8006f14:	f7ff f972 	bl	80061fc <LL_ADC_REG_IsConversionOngoing>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d00c      	beq.n	8006f38 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4618      	mov	r0, r3
 8006f24:	f7ff f92f 	bl	8006186 <LL_ADC_IsDisableOngoing>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d104      	bne.n	8006f38 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4618      	mov	r0, r3
 8006f34:	f7ff f94e 	bl	80061d4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8006f38:	69bb      	ldr	r3, [r7, #24]
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d014      	beq.n	8006f68 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4618      	mov	r0, r3
 8006f44:	f7ff f981 	bl	800624a <LL_ADC_INJ_IsConversionOngoing>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d00c      	beq.n	8006f68 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4618      	mov	r0, r3
 8006f54:	f7ff f917 	bl	8006186 <LL_ADC_IsDisableOngoing>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d104      	bne.n	8006f68 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4618      	mov	r0, r3
 8006f64:	f7ff f95d 	bl	8006222 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8006f68:	69bb      	ldr	r3, [r7, #24]
 8006f6a:	2b02      	cmp	r3, #2
 8006f6c:	d004      	beq.n	8006f78 <ADC_ConversionStop+0x10c>
 8006f6e:	2b03      	cmp	r3, #3
 8006f70:	d105      	bne.n	8006f7e <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8006f72:	230c      	movs	r3, #12
 8006f74:	617b      	str	r3, [r7, #20]
        break;
 8006f76:	e005      	b.n	8006f84 <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8006f78:	2308      	movs	r3, #8
 8006f7a:	617b      	str	r3, [r7, #20]
        break;
 8006f7c:	e002      	b.n	8006f84 <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8006f7e:	2304      	movs	r3, #4
 8006f80:	617b      	str	r3, [r7, #20]
        break;
 8006f82:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8006f84:	f7fe ff24 	bl	8005dd0 <HAL_GetTick>
 8006f88:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8006f8a:	e014      	b.n	8006fb6 <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8006f8c:	f7fe ff20 	bl	8005dd0 <HAL_GetTick>
 8006f90:	4602      	mov	r2, r0
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	1ad3      	subs	r3, r2, r3
 8006f96:	2b05      	cmp	r3, #5
 8006f98:	d90d      	bls.n	8006fb6 <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f9e:	f043 0210 	orr.w	r2, r3, #16
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006faa:	f043 0201 	orr.w	r2, r3, #1
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	e007      	b.n	8006fc6 <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	689a      	ldr	r2, [r3, #8]
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	4013      	ands	r3, r2
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d1e3      	bne.n	8006f8c <ADC_ConversionStop+0x120>

  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return HAL status */
  return HAL_OK;
 8006fc4:	2300      	movs	r3, #0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3720      	adds	r7, #32
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
 8006fce:	bf00      	nop
 8006fd0:	a33fffff 	.word	0xa33fffff

08006fd4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b084      	sub	sp, #16
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f7ff f8bb 	bl	8006160 <LL_ADC_IsEnabled>
 8006fea:	4603      	mov	r3, r0
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d15e      	bne.n	80070ae <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if defined (ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	689a      	ldr	r2, [r3, #8]
 8006ff6:	4b30      	ldr	r3, [pc, #192]	; (80070b8 <ADC_Enable+0xe4>)
 8006ff8:	4013      	ands	r3, r2
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d00d      	beq.n	800701a <ADC_Enable+0x46>
#endif
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007002:	f043 0210 	orr.w	r2, r3, #16
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800700e:	f043 0201 	orr.w	r2, r3, #1
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8007016:	2301      	movs	r3, #1
 8007018:	e04a      	b.n	80070b0 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4618      	mov	r0, r3
 8007020:	f7ff f876 	bl	8006110 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8007024:	4825      	ldr	r0, [pc, #148]	; (80070bc <ADC_Enable+0xe8>)
 8007026:	f7fe ff33 	bl	8005e90 <LL_ADC_GetCommonPathInternalCh>
 800702a:	4603      	mov	r3, r0
 800702c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007030:	2b00      	cmp	r3, #0
 8007032:	d00f      	beq.n	8007054 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8007034:	4b22      	ldr	r3, [pc, #136]	; (80070c0 <ADC_Enable+0xec>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	099b      	lsrs	r3, r3, #6
 800703a:	4a22      	ldr	r2, [pc, #136]	; (80070c4 <ADC_Enable+0xf0>)
 800703c:	fba2 2303 	umull	r2, r3, r2, r3
 8007040:	099b      	lsrs	r3, r3, #6
 8007042:	3301      	adds	r3, #1
 8007044:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8007046:	e002      	b.n	800704e <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	3b01      	subs	r3, #1
 800704c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d1f9      	bne.n	8007048 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8007054:	f7fe febc 	bl	8005dd0 <HAL_GetTick>
 8007058:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800705a:	e021      	b.n	80070a0 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4618      	mov	r0, r3
 8007062:	f7ff f87d 	bl	8006160 <LL_ADC_IsEnabled>
 8007066:	4603      	mov	r3, r0
 8007068:	2b00      	cmp	r3, #0
 800706a:	d104      	bne.n	8007076 <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4618      	mov	r0, r3
 8007072:	f7ff f84d 	bl	8006110 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007076:	f7fe feab 	bl	8005dd0 <HAL_GetTick>
 800707a:	4602      	mov	r2, r0
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	1ad3      	subs	r3, r2, r3
 8007080:	2b02      	cmp	r3, #2
 8007082:	d90d      	bls.n	80070a0 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007088:	f043 0210 	orr.w	r2, r3, #16
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007094:	f043 0201 	orr.w	r2, r3, #1
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	659a      	str	r2, [r3, #88]	; 0x58
          
          return HAL_ERROR;
 800709c:	2301      	movs	r3, #1
 800709e:	e007      	b.n	80070b0 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f003 0301 	and.w	r3, r3, #1
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d1d6      	bne.n	800705c <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80070ae:	2300      	movs	r3, #0
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3710      	adds	r7, #16
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}
 80070b8:	8000003f 	.word	0x8000003f
 80070bc:	50040300 	.word	0x50040300
 80070c0:	20000078 	.word	0x20000078
 80070c4:	053e2d63 	.word	0x053e2d63

080070c8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4618      	mov	r0, r3
 80070d6:	f7ff f856 	bl	8006186 <LL_ADC_IsDisableOngoing>
 80070da:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4618      	mov	r0, r3
 80070e2:	f7ff f83d 	bl	8006160 <LL_ADC_IsEnabled>
 80070e6:	4603      	mov	r3, r0
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d040      	beq.n	800716e <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d13d      	bne.n	800716e <ADC_Disable+0xa6>
  {
    /* Check if conditions to disable the ADC are fulfilled */
#if defined (ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
#else
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	f003 030d 	and.w	r3, r3, #13
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d10c      	bne.n	800711a <ADC_Disable+0x52>
#endif
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4618      	mov	r0, r3
 8007106:	f7ff f817 	bl	8006138 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	2203      	movs	r2, #3
 8007110:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007112:	f7fe fe5d 	bl	8005dd0 <HAL_GetTick>
 8007116:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007118:	e022      	b.n	8007160 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800711e:	f043 0210 	orr.w	r2, r3, #16
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800712a:	f043 0201 	orr.w	r2, r3, #1
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8007132:	2301      	movs	r3, #1
 8007134:	e01c      	b.n	8007170 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007136:	f7fe fe4b 	bl	8005dd0 <HAL_GetTick>
 800713a:	4602      	mov	r2, r0
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	1ad3      	subs	r3, r2, r3
 8007140:	2b02      	cmp	r3, #2
 8007142:	d90d      	bls.n	8007160 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007148:	f043 0210 	orr.w	r2, r3, #16
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007154:	f043 0201 	orr.w	r2, r3, #1
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 800715c:	2301      	movs	r3, #1
 800715e:	e007      	b.n	8007170 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	689b      	ldr	r3, [r3, #8]
 8007166:	f003 0301 	and.w	r3, r3, #1
 800716a:	2b00      	cmp	r3, #0
 800716c:	d1e3      	bne.n	8007136 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800716e:	2300      	movs	r3, #0
}
 8007170:	4618      	mov	r0, r3
 8007172:	3710      	adds	r7, #16
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}

08007178 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007184:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800718a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800718e:	2b00      	cmp	r3, #0
 8007190:	d14b      	bne.n	800722a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007196:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	655a      	str	r2, [r3, #84]	; 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f003 0308 	and.w	r3, r3, #8
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d021      	beq.n	80071f0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4618      	mov	r0, r3
 80071b2:	f7fe fed0 	bl	8005f56 <LL_ADC_REG_IsTriggerSourceSWStart>
 80071b6:	4603      	mov	r3, r0
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d032      	beq.n	8007222 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	68db      	ldr	r3, [r3, #12]
 80071c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d12b      	bne.n	8007222 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d11f      	bne.n	8007222 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071e6:	f043 0201 	orr.w	r2, r3, #1
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	655a      	str	r2, [r3, #84]	; 0x54
 80071ee:	e018      	b.n	8007222 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	68db      	ldr	r3, [r3, #12]
 80071f6:	f003 0302 	and.w	r3, r3, #2
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d111      	bne.n	8007222 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007202:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800720e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007212:	2b00      	cmp	r3, #0
 8007214:	d105      	bne.n	8007222 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800721a:	f043 0201 	orr.w	r2, r3, #1
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007222:	68f8      	ldr	r0, [r7, #12]
 8007224:	f7fa faf8 	bl	8001818 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007228:	e00e      	b.n	8007248 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800722e:	f003 0310 	and.w	r3, r3, #16
 8007232:	2b00      	cmp	r3, #0
 8007234:	d003      	beq.n	800723e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8007236:	68f8      	ldr	r0, [r7, #12]
 8007238:	f7ff fa49 	bl	80066ce <HAL_ADC_ErrorCallback>
}
 800723c:	e004      	b.n	8007248 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	4798      	blx	r3
}
 8007248:	bf00      	nop
 800724a:	3710      	adds	r7, #16
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800725c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800725e:	68f8      	ldr	r0, [r7, #12]
 8007260:	f7fa faf2 	bl	8001848 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007264:	bf00      	nop
 8007266:	3710      	adds	r7, #16
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}

0800726c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b084      	sub	sp, #16
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007278:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800727e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800728a:	f043 0204 	orr.w	r2, r3, #4
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007292:	68f8      	ldr	r0, [r7, #12]
 8007294:	f7ff fa1b 	bl	80066ce <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007298:	bf00      	nop
 800729a:	3710      	adds	r7, #16
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}

080072a0 <LL_EXTI_EnableIT_0_31>:
{
 80072a0:	b480      	push	{r7}
 80072a2:	b083      	sub	sp, #12
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80072a8:	4b06      	ldr	r3, [pc, #24]	; (80072c4 <LL_EXTI_EnableIT_0_31+0x24>)
 80072aa:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80072ae:	4905      	ldr	r1, [pc, #20]	; (80072c4 <LL_EXTI_EnableIT_0_31+0x24>)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	4313      	orrs	r3, r2
 80072b4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80072b8:	bf00      	nop
 80072ba:	370c      	adds	r7, #12
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr
 80072c4:	58000800 	.word	0x58000800

080072c8 <LL_EXTI_DisableIT_0_31>:
{
 80072c8:	b480      	push	{r7}
 80072ca:	b083      	sub	sp, #12
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80072d0:	4b07      	ldr	r3, [pc, #28]	; (80072f0 <LL_EXTI_DisableIT_0_31+0x28>)
 80072d2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	43db      	mvns	r3, r3
 80072da:	4905      	ldr	r1, [pc, #20]	; (80072f0 <LL_EXTI_DisableIT_0_31+0x28>)
 80072dc:	4013      	ands	r3, r2
 80072de:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80072e2:	bf00      	nop
 80072e4:	370c      	adds	r7, #12
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr
 80072ee:	bf00      	nop
 80072f0:	58000800 	.word	0x58000800

080072f4 <LL_EXTI_EnableEvent_0_31>:
{
 80072f4:	b480      	push	{r7}
 80072f6:	b083      	sub	sp, #12
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80072fc:	4b06      	ldr	r3, [pc, #24]	; (8007318 <LL_EXTI_EnableEvent_0_31+0x24>)
 80072fe:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007302:	4905      	ldr	r1, [pc, #20]	; (8007318 <LL_EXTI_EnableEvent_0_31+0x24>)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	4313      	orrs	r3, r2
 8007308:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
}
 800730c:	bf00      	nop
 800730e:	370c      	adds	r7, #12
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr
 8007318:	58000800 	.word	0x58000800

0800731c <LL_EXTI_DisableEvent_0_31>:
{
 800731c:	b480      	push	{r7}
 800731e:	b083      	sub	sp, #12
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8007324:	4b07      	ldr	r3, [pc, #28]	; (8007344 <LL_EXTI_DisableEvent_0_31+0x28>)
 8007326:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	43db      	mvns	r3, r3
 800732e:	4905      	ldr	r1, [pc, #20]	; (8007344 <LL_EXTI_DisableEvent_0_31+0x28>)
 8007330:	4013      	ands	r3, r2
 8007332:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
}
 8007336:	bf00      	nop
 8007338:	370c      	adds	r7, #12
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr
 8007342:	bf00      	nop
 8007344:	58000800 	.word	0x58000800

08007348 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8007348:	b480      	push	{r7}
 800734a:	b083      	sub	sp, #12
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8007350:	4b05      	ldr	r3, [pc, #20]	; (8007368 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	4904      	ldr	r1, [pc, #16]	; (8007368 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	4313      	orrs	r3, r2
 800735a:	600b      	str	r3, [r1, #0]
}
 800735c:	bf00      	nop
 800735e:	370c      	adds	r7, #12
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr
 8007368:	58000800 	.word	0x58000800

0800736c <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 800736c:	b480      	push	{r7}
 800736e:	b083      	sub	sp, #12
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8007374:	4b06      	ldr	r3, [pc, #24]	; (8007390 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	43db      	mvns	r3, r3
 800737c:	4904      	ldr	r1, [pc, #16]	; (8007390 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800737e:	4013      	ands	r3, r2
 8007380:	600b      	str	r3, [r1, #0]

}
 8007382:	bf00      	nop
 8007384:	370c      	adds	r7, #12
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr
 800738e:	bf00      	nop
 8007390:	58000800 	.word	0x58000800

08007394 <LL_EXTI_EnableFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8007394:	b480      	push	{r7}
 8007396:	b083      	sub	sp, #12
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800739c:	4b05      	ldr	r3, [pc, #20]	; (80073b4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800739e:	685a      	ldr	r2, [r3, #4]
 80073a0:	4904      	ldr	r1, [pc, #16]	; (80073b4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	4313      	orrs	r3, r2
 80073a6:	604b      	str	r3, [r1, #4]
}
 80073a8:	bf00      	nop
 80073aa:	370c      	adds	r7, #12
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr
 80073b4:	58000800 	.word	0x58000800

080073b8 <LL_EXTI_DisableFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b083      	sub	sp, #12
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80073c0:	4b06      	ldr	r3, [pc, #24]	; (80073dc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80073c2:	685a      	ldr	r2, [r3, #4]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	43db      	mvns	r3, r3
 80073c8:	4904      	ldr	r1, [pc, #16]	; (80073dc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80073ca:	4013      	ands	r3, r2
 80073cc:	604b      	str	r3, [r1, #4]
}
 80073ce:	bf00      	nop
 80073d0:	370c      	adds	r7, #12
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr
 80073da:	bf00      	nop
 80073dc:	58000800 	.word	0x58000800

080073e0 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b083      	sub	sp, #12
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 80073e8:	4b07      	ldr	r3, [pc, #28]	; (8007408 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80073ea:	68da      	ldr	r2, [r3, #12]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	4013      	ands	r3, r2
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d101      	bne.n	80073fa <LL_EXTI_IsActiveFlag_0_31+0x1a>
 80073f6:	2301      	movs	r3, #1
 80073f8:	e000      	b.n	80073fc <LL_EXTI_IsActiveFlag_0_31+0x1c>
 80073fa:	2300      	movs	r3, #0
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	370c      	adds	r7, #12
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr
 8007408:	58000800 	.word	0x58000800

0800740c <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 800740c:	b480      	push	{r7}
 800740e:	b083      	sub	sp, #12
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8007414:	4a04      	ldr	r2, [pc, #16]	; (8007428 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	60d3      	str	r3, [r2, #12]
}
 800741a:	bf00      	nop
 800741c:	370c      	adds	r7, #12
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr
 8007426:	bf00      	nop
 8007428:	58000800 	.word	0x58000800

0800742c <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b088      	sub	sp, #32
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8007434:	2300      	movs	r3, #0
 8007436:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007438:	2300      	movs	r3, #0
 800743a:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d102      	bne.n	8007448 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8007442:	2301      	movs	r3, #1
 8007444:	77fb      	strb	r3, [r7, #31]
 8007446:	e0c4      	b.n	80075d2 <HAL_COMP_Init+0x1a6>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007452:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007456:	d102      	bne.n	800745e <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8007458:	2301      	movs	r3, #1
 800745a:	77fb      	strb	r3, [r7, #31]
 800745c:	e0b9      	b.n	80075d2 <HAL_COMP_Init+0x1a6>
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
#if defined(COMP2)
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
#endif

    if(hcomp->State == HAL_COMP_STATE_RESET)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007464:	b2db      	uxtb	r3, r3
 8007466:	2b00      	cmp	r3, #0
 8007468:	d109      	bne.n	800747e <HAL_COMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2200      	movs	r2, #0
 800746e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2200      	movs	r2, #0
 8007476:	629a      	str	r2, [r3, #40]	; 0x28
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f7fa fa4f 	bl	800191c <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007488:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	691a      	ldr	r2, [r3, #16]
               | hcomp->Init.InputPlus
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	68db      	ldr	r3, [r3, #12]
 8007492:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	69db      	ldr	r3, [r3, #28]
 8007498:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	695b      	ldr	r3, [r3, #20]
 800749e:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	699b      	ldr	r3, [r3, #24]
 80074a4:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (  hcomp->Init.InputMinus
 80074aa:	4313      	orrs	r3, r2
 80074ac:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
#if defined (COMP_CSR_WINMODE)
    MODIFY_REG(hcomp->Instance->CSR,
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	4b49      	ldr	r3, [pc, #292]	; (80075dc <HAL_COMP_Init+0x1b0>)
 80074b6:	4013      	ands	r3, r2
 80074b8:	687a      	ldr	r2, [r7, #4]
 80074ba:	6812      	ldr	r2, [r2, #0]
 80074bc:	6979      	ldr	r1, [r7, #20]
 80074be:	430b      	orrs	r3, r1
 80074c0:	6013      	str	r3, [r2, #0]
#if defined(COMP2)
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074ca:	d106      	bne.n	80074da <HAL_COMP_Init+0xae>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 80074cc:	4b44      	ldr	r3, [pc, #272]	; (80075e0 <HAL_COMP_Init+0x1b4>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a43      	ldr	r2, [pc, #268]	; (80075e0 <HAL_COMP_Init+0x1b4>)
 80074d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80074d6:	6013      	str	r3, [r2, #0]
 80074d8:	e005      	b.n	80074e6 <HAL_COMP_Init+0xba>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 80074da:	4b41      	ldr	r3, [pc, #260]	; (80075e0 <HAL_COMP_Init+0x1b4>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a40      	ldr	r2, [pc, #256]	; (80075e0 <HAL_COMP_Init+0x1b4>)
 80074e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80074e4:	6013      	str	r3, [r2, #0]
    }
#endif /* COMP2 */

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d015      	beq.n	8007520 <HAL_COMP_Init+0xf4>
 80074f4:	69bb      	ldr	r3, [r7, #24]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d112      	bne.n	8007520 <HAL_COMP_Init+0xf4>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80074fa:	4b3a      	ldr	r3, [pc, #232]	; (80075e4 <HAL_COMP_Init+0x1b8>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	099b      	lsrs	r3, r3, #6
 8007500:	4a39      	ldr	r2, [pc, #228]	; (80075e8 <HAL_COMP_Init+0x1bc>)
 8007502:	fba2 2303 	umull	r2, r3, r2, r3
 8007506:	099a      	lsrs	r2, r3, #6
 8007508:	4613      	mov	r3, r2
 800750a:	009b      	lsls	r3, r3, #2
 800750c:	4413      	add	r3, r2
 800750e:	009b      	lsls	r3, r3, #2
 8007510:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8007512:	e002      	b.n	800751a <HAL_COMP_Init+0xee>
      {
        wait_loop_index--;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	3b01      	subs	r3, #1
 8007518:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d1f9      	bne.n	8007514 <HAL_COMP_Init+0xe8>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a31      	ldr	r2, [pc, #196]	; (80075ec <HAL_COMP_Init+0x1c0>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d102      	bne.n	8007530 <HAL_COMP_Init+0x104>
 800752a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800752e:	e001      	b.n	8007534 <HAL_COMP_Init+0x108>
 8007530:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007534:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6a1b      	ldr	r3, [r3, #32]
 800753a:	f003 0303 	and.w	r3, r3, #3
 800753e:	2b00      	cmp	r3, #0
 8007540:	d037      	beq.n	80075b2 <HAL_COMP_Init+0x186>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6a1b      	ldr	r3, [r3, #32]
 8007546:	f003 0310 	and.w	r3, r3, #16
 800754a:	2b00      	cmp	r3, #0
 800754c:	d003      	beq.n	8007556 <HAL_COMP_Init+0x12a>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800754e:	6938      	ldr	r0, [r7, #16]
 8007550:	f7ff fefa 	bl	8007348 <LL_EXTI_EnableRisingTrig_0_31>
 8007554:	e002      	b.n	800755c <HAL_COMP_Init+0x130>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8007556:	6938      	ldr	r0, [r7, #16]
 8007558:	f7ff ff08 	bl	800736c <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6a1b      	ldr	r3, [r3, #32]
 8007560:	f003 0320 	and.w	r3, r3, #32
 8007564:	2b00      	cmp	r3, #0
 8007566:	d003      	beq.n	8007570 <HAL_COMP_Init+0x144>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8007568:	6938      	ldr	r0, [r7, #16]
 800756a:	f7ff ff13 	bl	8007394 <LL_EXTI_EnableFallingTrig_0_31>
 800756e:	e002      	b.n	8007576 <HAL_COMP_Init+0x14a>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8007570:	6938      	ldr	r0, [r7, #16]
 8007572:	f7ff ff21 	bl	80073b8 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearFlag_0_31(exti_line);
 8007576:	6938      	ldr	r0, [r7, #16]
 8007578:	f7ff ff48 	bl	800740c <LL_EXTI_ClearFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6a1b      	ldr	r3, [r3, #32]
 8007580:	f003 0302 	and.w	r3, r3, #2
 8007584:	2b00      	cmp	r3, #0
 8007586:	d003      	beq.n	8007590 <HAL_COMP_Init+0x164>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 8007588:	6938      	ldr	r0, [r7, #16]
 800758a:	f7ff feb3 	bl	80072f4 <LL_EXTI_EnableEvent_0_31>
 800758e:	e002      	b.n	8007596 <HAL_COMP_Init+0x16a>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8007590:	6938      	ldr	r0, [r7, #16]
 8007592:	f7ff fec3 	bl	800731c <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6a1b      	ldr	r3, [r3, #32]
 800759a:	f003 0301 	and.w	r3, r3, #1
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d003      	beq.n	80075aa <HAL_COMP_Init+0x17e>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 80075a2:	6938      	ldr	r0, [r7, #16]
 80075a4:	f7ff fe7c 	bl	80072a0 <LL_EXTI_EnableIT_0_31>
 80075a8:	e009      	b.n	80075be <HAL_COMP_Init+0x192>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 80075aa:	6938      	ldr	r0, [r7, #16]
 80075ac:	f7ff fe8c 	bl	80072c8 <LL_EXTI_DisableIT_0_31>
 80075b0:	e005      	b.n	80075be <HAL_COMP_Init+0x192>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 80075b2:	6938      	ldr	r0, [r7, #16]
 80075b4:	f7ff feb2 	bl	800731c <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 80075b8:	6938      	ldr	r0, [r7, #16]
 80075ba:	f7ff fe85 	bl	80072c8 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d103      	bne.n	80075d2 <HAL_COMP_Init+0x1a6>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2201      	movs	r2, #1
 80075ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 80075d2:	7ffb      	ldrb	r3, [r7, #31]
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3720      	adds	r7, #32
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}
 80075dc:	f9207c03 	.word	0xf9207c03
 80075e0:	40010204 	.word	0x40010204
 80075e4:	20000078 	.word	0x20000078
 80075e8:	053e2d63 	.word	0x053e2d63
 80075ec:	40010200 	.word	0x40010200

080075f0 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b085      	sub	sp, #20
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 80075f8:	2300      	movs	r3, #0
 80075fa:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80075fc:	2300      	movs	r3, #0
 80075fe:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d102      	bne.n	800760c <HAL_COMP_Start+0x1c>
  {
    status = HAL_ERROR;
 8007606:	2301      	movs	r3, #1
 8007608:	73fb      	strb	r3, [r7, #15]
 800760a:	e02f      	b.n	800766c <HAL_COMP_Start+0x7c>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007616:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800761a:	d102      	bne.n	8007622 <HAL_COMP_Start+0x32>
  {
    status = HAL_ERROR;
 800761c:	2301      	movs	r3, #1
 800761e:	73fb      	strb	r3, [r7, #15]
 8007620:	e024      	b.n	800766c <HAL_COMP_Start+0x7c>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007628:	b2db      	uxtb	r3, r3
 800762a:	2b01      	cmp	r3, #1
 800762c:	d11c      	bne.n	8007668 <HAL_COMP_Start+0x78>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	681a      	ldr	r2, [r3, #0]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f042 0201 	orr.w	r2, r2, #1
 800763c:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2202      	movs	r2, #2
 8007642:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8007646:	4b0d      	ldr	r3, [pc, #52]	; (800767c <HAL_COMP_Start+0x8c>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	099b      	lsrs	r3, r3, #6
 800764c:	4a0c      	ldr	r2, [pc, #48]	; (8007680 <HAL_COMP_Start+0x90>)
 800764e:	fba2 2303 	umull	r2, r3, r2, r3
 8007652:	099b      	lsrs	r3, r3, #6
 8007654:	00db      	lsls	r3, r3, #3
 8007656:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8007658:	e002      	b.n	8007660 <HAL_COMP_Start+0x70>
      {
        wait_loop_index--;
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	3b01      	subs	r3, #1
 800765e:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d1f9      	bne.n	800765a <HAL_COMP_Start+0x6a>
 8007666:	e001      	b.n	800766c <HAL_COMP_Start+0x7c>
      }
    }
    else
    {
      status = HAL_ERROR;
 8007668:	2301      	movs	r3, #1
 800766a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800766c:	7bfb      	ldrb	r3, [r7, #15]
}
 800766e:	4618      	mov	r0, r3
 8007670:	3714      	adds	r7, #20
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr
 800767a:	bf00      	nop
 800767c:	20000078 	.word	0x20000078
 8007680:	053e2d63 	.word	0x053e2d63

08007684 <HAL_COMP_Stop>:
  * @brief  Stop the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Stop(COMP_HandleTypeDef *hcomp)
{
 8007684:	b480      	push	{r7}
 8007686:	b085      	sub	sp, #20
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800768c:	2300      	movs	r3, #0
 800768e:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d102      	bne.n	800769c <HAL_COMP_Stop+0x18>
  {
    status = HAL_ERROR;
 8007696:	2301      	movs	r3, #1
 8007698:	73fb      	strb	r3, [r7, #15]
 800769a:	e01f      	b.n	80076dc <HAL_COMP_Stop+0x58>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80076a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80076aa:	d102      	bne.n	80076b2 <HAL_COMP_Stop+0x2e>
  {
    status = HAL_ERROR;
 80076ac:	2301      	movs	r3, #1
 80076ae:	73fb      	strb	r3, [r7, #15]
 80076b0:	e014      	b.n	80076dc <HAL_COMP_Stop+0x58>
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    /* Check compliant states: HAL_COMP_STATE_READY or HAL_COMP_STATE_BUSY    */
    /* (all states except HAL_COMP_STATE_RESET and except locked status.      */
    if(hcomp->State != HAL_COMP_STATE_RESET)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d00c      	beq.n	80076d8 <HAL_COMP_Stop+0x54>
    {
      /* Disable the selected comparator */
      CLEAR_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f022 0201 	bic.w	r2, r2, #1
 80076cc:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_READY;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2201      	movs	r2, #1
 80076d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 80076d6:	e001      	b.n	80076dc <HAL_COMP_Stop+0x58>
    }
    else
    {
      status = HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80076dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3714      	adds	r7, #20
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr
	...

080076ec <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ handler.
  * @param  hcomp  COMP handle
  * @retval None
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b084      	sub	sp, #16
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a11      	ldr	r2, [pc, #68]	; (8007740 <HAL_COMP_IRQHandler+0x54>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d102      	bne.n	8007704 <HAL_COMP_IRQHandler+0x18>
 80076fe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007702:	e001      	b.n	8007708 <HAL_COMP_IRQHandler+0x1c>
 8007704:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007708:	60fb      	str	r3, [r7, #12]

  /* Check COMP EXTI flag */
  if(LL_EXTI_IsActiveFlag_0_31(exti_line) != 0UL)
 800770a:	68f8      	ldr	r0, [r7, #12]
 800770c:	f7ff fe68 	bl	80073e0 <LL_EXTI_IsActiveFlag_0_31>
 8007710:	4603      	mov	r3, r0
 8007712:	2b00      	cmp	r3, #0
 8007714:	d010      	beq.n	8007738 <HAL_COMP_IRQHandler+0x4c>
  {
#if defined(COMP2)
    /* Check whether comparator is in independent or window mode */
    if(READ_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE) != 0UL)
 8007716:	4b0b      	ldr	r3, [pc, #44]	; (8007744 <HAL_COMP_IRQHandler+0x58>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800771e:	2b00      	cmp	r3, #0
 8007720:	d004      	beq.n	800772c <HAL_COMP_IRQHandler+0x40>
      /* Note: Pair of comparators in window mode can both trig IRQ when      */
      /*       input voltage is changing from "out of window" area            */
      /*       (low or high ) to the other "out of window" area (high or low).*/
      /*       Both flags must be cleared to call comparator trigger          */
      /*       callback is called once.                                       */
      LL_EXTI_ClearFlag_0_31((COMP_EXTI_LINE_COMP1 | COMP_EXTI_LINE_COMP2));
 8007722:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8007726:	f7ff fe71 	bl	800740c <LL_EXTI_ClearFlag_0_31>
 800772a:	e002      	b.n	8007732 <HAL_COMP_IRQHandler+0x46>
    }
    else
#endif /* COMP2 */
    {
      /* Clear COMP EXTI line pending bit */
      LL_EXTI_ClearFlag_0_31(exti_line);
 800772c:	68f8      	ldr	r0, [r7, #12]
 800772e:	f7ff fe6d 	bl	800740c <LL_EXTI_ClearFlag_0_31>

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f7fd fe98 	bl	8005468 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 8007738:	bf00      	nop
 800773a:	3710      	adds	r7, #16
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}
 8007740:	40010200 	.word	0x40010200
 8007744:	40010204 	.word	0x40010204

08007748 <HAL_COMP_GetOutputLevel>:
  *         @arg COMP_OUTPUT_LEVEL_LOW
  *         @arg COMP_OUTPUT_LEVEL_HIGH
  *
  */
uint32_t HAL_COMP_GetOutputLevel(COMP_HandleTypeDef *hcomp)
{
 8007748:	b480      	push	{r7}
 800774a:	b083      	sub	sp, #12
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

  return (uint32_t)(READ_BIT(hcomp->Instance->CSR, COMP_CSR_VALUE)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	0f9b      	lsrs	r3, r3, #30
 8007758:	f003 0301 	and.w	r3, r3, #1
                    >> COMP_OUTPUT_LEVEL_BITOFFSET_POS);
}
 800775c:	4618      	mov	r0, r3
 800775e:	370c      	adds	r7, #12
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr

08007768 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007768:	b480      	push	{r7}
 800776a:	b085      	sub	sp, #20
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f003 0307 	and.w	r3, r3, #7
 8007776:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007778:	4b0c      	ldr	r3, [pc, #48]	; (80077ac <__NVIC_SetPriorityGrouping+0x44>)
 800777a:	68db      	ldr	r3, [r3, #12]
 800777c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800777e:	68ba      	ldr	r2, [r7, #8]
 8007780:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007784:	4013      	ands	r3, r2
 8007786:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007790:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007794:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007798:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800779a:	4a04      	ldr	r2, [pc, #16]	; (80077ac <__NVIC_SetPriorityGrouping+0x44>)
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	60d3      	str	r3, [r2, #12]
}
 80077a0:	bf00      	nop
 80077a2:	3714      	adds	r7, #20
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr
 80077ac:	e000ed00 	.word	0xe000ed00

080077b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80077b0:	b480      	push	{r7}
 80077b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80077b4:	4b04      	ldr	r3, [pc, #16]	; (80077c8 <__NVIC_GetPriorityGrouping+0x18>)
 80077b6:	68db      	ldr	r3, [r3, #12]
 80077b8:	0a1b      	lsrs	r3, r3, #8
 80077ba:	f003 0307 	and.w	r3, r3, #7
}
 80077be:	4618      	mov	r0, r3
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr
 80077c8:	e000ed00 	.word	0xe000ed00

080077cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b083      	sub	sp, #12
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	4603      	mov	r3, r0
 80077d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80077d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	db0b      	blt.n	80077f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80077de:	79fb      	ldrb	r3, [r7, #7]
 80077e0:	f003 021f 	and.w	r2, r3, #31
 80077e4:	4907      	ldr	r1, [pc, #28]	; (8007804 <__NVIC_EnableIRQ+0x38>)
 80077e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077ea:	095b      	lsrs	r3, r3, #5
 80077ec:	2001      	movs	r0, #1
 80077ee:	fa00 f202 	lsl.w	r2, r0, r2
 80077f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80077f6:	bf00      	nop
 80077f8:	370c      	adds	r7, #12
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr
 8007802:	bf00      	nop
 8007804:	e000e100 	.word	0xe000e100

08007808 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8007808:	b480      	push	{r7}
 800780a:	b083      	sub	sp, #12
 800780c:	af00      	add	r7, sp, #0
 800780e:	4603      	mov	r3, r0
 8007810:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007816:	2b00      	cmp	r3, #0
 8007818:	db0c      	blt.n	8007834 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800781a:	79fb      	ldrb	r3, [r7, #7]
 800781c:	f003 021f 	and.w	r2, r3, #31
 8007820:	4907      	ldr	r1, [pc, #28]	; (8007840 <__NVIC_SetPendingIRQ+0x38>)
 8007822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007826:	095b      	lsrs	r3, r3, #5
 8007828:	2001      	movs	r0, #1
 800782a:	fa00 f202 	lsl.w	r2, r0, r2
 800782e:	3340      	adds	r3, #64	; 0x40
 8007830:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007834:	bf00      	nop
 8007836:	370c      	adds	r7, #12
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr
 8007840:	e000e100 	.word	0xe000e100

08007844 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8007844:	b480      	push	{r7}
 8007846:	b083      	sub	sp, #12
 8007848:	af00      	add	r7, sp, #0
 800784a:	4603      	mov	r3, r0
 800784c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800784e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007852:	2b00      	cmp	r3, #0
 8007854:	db0c      	blt.n	8007870 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007856:	79fb      	ldrb	r3, [r7, #7]
 8007858:	f003 021f 	and.w	r2, r3, #31
 800785c:	4907      	ldr	r1, [pc, #28]	; (800787c <__NVIC_ClearPendingIRQ+0x38>)
 800785e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007862:	095b      	lsrs	r3, r3, #5
 8007864:	2001      	movs	r0, #1
 8007866:	fa00 f202 	lsl.w	r2, r0, r2
 800786a:	3360      	adds	r3, #96	; 0x60
 800786c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007870:	bf00      	nop
 8007872:	370c      	adds	r7, #12
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr
 800787c:	e000e100 	.word	0xe000e100

08007880 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007880:	b480      	push	{r7}
 8007882:	b083      	sub	sp, #12
 8007884:	af00      	add	r7, sp, #0
 8007886:	4603      	mov	r3, r0
 8007888:	6039      	str	r1, [r7, #0]
 800788a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800788c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007890:	2b00      	cmp	r3, #0
 8007892:	db0a      	blt.n	80078aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	b2da      	uxtb	r2, r3
 8007898:	490c      	ldr	r1, [pc, #48]	; (80078cc <__NVIC_SetPriority+0x4c>)
 800789a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800789e:	0112      	lsls	r2, r2, #4
 80078a0:	b2d2      	uxtb	r2, r2
 80078a2:	440b      	add	r3, r1
 80078a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80078a8:	e00a      	b.n	80078c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	b2da      	uxtb	r2, r3
 80078ae:	4908      	ldr	r1, [pc, #32]	; (80078d0 <__NVIC_SetPriority+0x50>)
 80078b0:	79fb      	ldrb	r3, [r7, #7]
 80078b2:	f003 030f 	and.w	r3, r3, #15
 80078b6:	3b04      	subs	r3, #4
 80078b8:	0112      	lsls	r2, r2, #4
 80078ba:	b2d2      	uxtb	r2, r2
 80078bc:	440b      	add	r3, r1
 80078be:	761a      	strb	r2, [r3, #24]
}
 80078c0:	bf00      	nop
 80078c2:	370c      	adds	r7, #12
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr
 80078cc:	e000e100 	.word	0xe000e100
 80078d0:	e000ed00 	.word	0xe000ed00

080078d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b089      	sub	sp, #36	; 0x24
 80078d8:	af00      	add	r7, sp, #0
 80078da:	60f8      	str	r0, [r7, #12]
 80078dc:	60b9      	str	r1, [r7, #8]
 80078de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f003 0307 	and.w	r3, r3, #7
 80078e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80078e8:	69fb      	ldr	r3, [r7, #28]
 80078ea:	f1c3 0307 	rsb	r3, r3, #7
 80078ee:	2b04      	cmp	r3, #4
 80078f0:	bf28      	it	cs
 80078f2:	2304      	movcs	r3, #4
 80078f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80078f6:	69fb      	ldr	r3, [r7, #28]
 80078f8:	3304      	adds	r3, #4
 80078fa:	2b06      	cmp	r3, #6
 80078fc:	d902      	bls.n	8007904 <NVIC_EncodePriority+0x30>
 80078fe:	69fb      	ldr	r3, [r7, #28]
 8007900:	3b03      	subs	r3, #3
 8007902:	e000      	b.n	8007906 <NVIC_EncodePriority+0x32>
 8007904:	2300      	movs	r3, #0
 8007906:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007908:	f04f 32ff 	mov.w	r2, #4294967295
 800790c:	69bb      	ldr	r3, [r7, #24]
 800790e:	fa02 f303 	lsl.w	r3, r2, r3
 8007912:	43da      	mvns	r2, r3
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	401a      	ands	r2, r3
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800791c:	f04f 31ff 	mov.w	r1, #4294967295
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	fa01 f303 	lsl.w	r3, r1, r3
 8007926:	43d9      	mvns	r1, r3
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800792c:	4313      	orrs	r3, r2
         );
}
 800792e:	4618      	mov	r0, r3
 8007930:	3724      	adds	r7, #36	; 0x24
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr
	...

0800793c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800793c:	b480      	push	{r7}
 800793e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8007940:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8007944:	4b05      	ldr	r3, [pc, #20]	; (800795c <__NVIC_SystemReset+0x20>)
 8007946:	68db      	ldr	r3, [r3, #12]
 8007948:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800794c:	4903      	ldr	r1, [pc, #12]	; (800795c <__NVIC_SystemReset+0x20>)
 800794e:	4b04      	ldr	r3, [pc, #16]	; (8007960 <__NVIC_SystemReset+0x24>)
 8007950:	4313      	orrs	r3, r2
 8007952:	60cb      	str	r3, [r1, #12]
 8007954:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8007958:	bf00      	nop
 800795a:	e7fd      	b.n	8007958 <__NVIC_SystemReset+0x1c>
 800795c:	e000ed00 	.word	0xe000ed00
 8007960:	05fa0004 	.word	0x05fa0004

08007964 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b082      	sub	sp, #8
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f7ff fefb 	bl	8007768 <__NVIC_SetPriorityGrouping>
}
 8007972:	bf00      	nop
 8007974:	3708      	adds	r7, #8
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}

0800797a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800797a:	b580      	push	{r7, lr}
 800797c:	b086      	sub	sp, #24
 800797e:	af00      	add	r7, sp, #0
 8007980:	4603      	mov	r3, r0
 8007982:	60b9      	str	r1, [r7, #8]
 8007984:	607a      	str	r2, [r7, #4]
 8007986:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007988:	f7ff ff12 	bl	80077b0 <__NVIC_GetPriorityGrouping>
 800798c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	68b9      	ldr	r1, [r7, #8]
 8007992:	6978      	ldr	r0, [r7, #20]
 8007994:	f7ff ff9e 	bl	80078d4 <NVIC_EncodePriority>
 8007998:	4602      	mov	r2, r0
 800799a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800799e:	4611      	mov	r1, r2
 80079a0:	4618      	mov	r0, r3
 80079a2:	f7ff ff6d 	bl	8007880 <__NVIC_SetPriority>
}
 80079a6:	bf00      	nop
 80079a8:	3718      	adds	r7, #24
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}

080079ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80079ae:	b580      	push	{r7, lr}
 80079b0:	b082      	sub	sp, #8
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	4603      	mov	r3, r0
 80079b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80079b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079bc:	4618      	mov	r0, r3
 80079be:	f7ff ff05 	bl	80077cc <__NVIC_EnableIRQ>
}
 80079c2:	bf00      	nop
 80079c4:	3708      	adds	r7, #8
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}

080079ca <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80079ca:	b580      	push	{r7, lr}
 80079cc:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80079ce:	f7ff ffb5 	bl	800793c <__NVIC_SystemReset>

080079d2 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80079d2:	b580      	push	{r7, lr}
 80079d4:	b082      	sub	sp, #8
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	4603      	mov	r3, r0
 80079da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80079dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079e0:	4618      	mov	r0, r3
 80079e2:	f7ff ff11 	bl	8007808 <__NVIC_SetPendingIRQ>
}
 80079e6:	bf00      	nop
 80079e8:	3708      	adds	r7, #8
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}

080079ee <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80079ee:	b580      	push	{r7, lr}
 80079f0:	b082      	sub	sp, #8
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	4603      	mov	r3, r0
 80079f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80079f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079fc:	4618      	mov	r0, r3
 80079fe:	f7ff ff21 	bl	8007844 <__NVIC_ClearPendingIRQ>
}
 8007a02:	bf00      	nop
 8007a04:	3708      	adds	r7, #8
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}
	...

08007a0c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b084      	sub	sp, #16
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d101      	bne.n	8007a1e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	e08e      	b.n	8007b3c <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	461a      	mov	r2, r3
 8007a24:	4b47      	ldr	r3, [pc, #284]	; (8007b44 <HAL_DMA_Init+0x138>)
 8007a26:	429a      	cmp	r2, r3
 8007a28:	d80f      	bhi.n	8007a4a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	461a      	mov	r2, r3
 8007a30:	4b45      	ldr	r3, [pc, #276]	; (8007b48 <HAL_DMA_Init+0x13c>)
 8007a32:	4413      	add	r3, r2
 8007a34:	4a45      	ldr	r2, [pc, #276]	; (8007b4c <HAL_DMA_Init+0x140>)
 8007a36:	fba2 2303 	umull	r2, r3, r2, r3
 8007a3a:	091b      	lsrs	r3, r3, #4
 8007a3c:	009a      	lsls	r2, r3, #2
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	4a42      	ldr	r2, [pc, #264]	; (8007b50 <HAL_DMA_Init+0x144>)
 8007a46:	641a      	str	r2, [r3, #64]	; 0x40
 8007a48:	e00e      	b.n	8007a68 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	461a      	mov	r2, r3
 8007a50:	4b40      	ldr	r3, [pc, #256]	; (8007b54 <HAL_DMA_Init+0x148>)
 8007a52:	4413      	add	r3, r2
 8007a54:	4a3d      	ldr	r2, [pc, #244]	; (8007b4c <HAL_DMA_Init+0x140>)
 8007a56:	fba2 2303 	umull	r2, r3, r2, r3
 8007a5a:	091b      	lsrs	r3, r3, #4
 8007a5c:	009a      	lsls	r2, r3, #2
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	4a3c      	ldr	r2, [pc, #240]	; (8007b58 <HAL_DMA_Init+0x14c>)
 8007a66:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2202      	movs	r2, #2
 8007a6c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a82:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007a8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	691b      	ldr	r3, [r3, #16]
 8007a92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007a98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	699b      	ldr	r3, [r3, #24]
 8007a9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007aa4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6a1b      	ldr	r3, [r3, #32]
 8007aaa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007aac:	68fa      	ldr	r2, [r7, #12]
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	68fa      	ldr	r2, [r7, #12]
 8007ab8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f000 fa82 	bl	8007fc4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	689b      	ldr	r3, [r3, #8]
 8007ac4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ac8:	d102      	bne.n	8007ad0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2200      	movs	r2, #0
 8007ace:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	685a      	ldr	r2, [r3, #4]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ad8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8007adc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007ae6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d010      	beq.n	8007b12 <HAL_DMA_Init+0x106>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	2b04      	cmp	r3, #4
 8007af6:	d80c      	bhi.n	8007b12 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f000 faa1 	bl	8008040 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b02:	2200      	movs	r2, #0
 8007b04:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b0a:	687a      	ldr	r2, [r7, #4]
 8007b0c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007b0e:	605a      	str	r2, [r3, #4]
 8007b10:	e008      	b.n	8007b24 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2200      	movs	r2, #0
 8007b16:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2200      	movs	r2, #0
 8007b22:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2200      	movs	r2, #0
 8007b28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2200      	movs	r2, #0
 8007b36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007b3a:	2300      	movs	r3, #0
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3710      	adds	r7, #16
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}
 8007b44:	40020407 	.word	0x40020407
 8007b48:	bffdfff8 	.word	0xbffdfff8
 8007b4c:	cccccccd 	.word	0xcccccccd
 8007b50:	40020000 	.word	0x40020000
 8007b54:	bffdfbf8 	.word	0xbffdfbf8
 8007b58:	40020400 	.word	0x40020400

08007b5c <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b086      	sub	sp, #24
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	60f8      	str	r0, [r7, #12]
 8007b64:	60b9      	str	r1, [r7, #8]
 8007b66:	607a      	str	r2, [r7, #4]
 8007b68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d101      	bne.n	8007b7c <HAL_DMA_Start_IT+0x20>
 8007b78:	2302      	movs	r3, #2
 8007b7a:	e066      	b.n	8007c4a <HAL_DMA_Start_IT+0xee>
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007b8a:	b2db      	uxtb	r3, r3
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	d155      	bne.n	8007c3c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2202      	movs	r2, #2
 8007b94:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	681a      	ldr	r2, [r3, #0]
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f022 0201 	bic.w	r2, r2, #1
 8007bac:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	687a      	ldr	r2, [r7, #4]
 8007bb2:	68b9      	ldr	r1, [r7, #8]
 8007bb4:	68f8      	ldr	r0, [r7, #12]
 8007bb6:	f000 f9c7 	bl	8007f48 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d008      	beq.n	8007bd4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	681a      	ldr	r2, [r3, #0]
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f042 020e 	orr.w	r2, r2, #14
 8007bd0:	601a      	str	r2, [r3, #0]
 8007bd2:	e00f      	b.n	8007bf4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f022 0204 	bic.w	r2, r2, #4
 8007be2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	681a      	ldr	r2, [r3, #0]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f042 020a 	orr.w	r2, r2, #10
 8007bf2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d007      	beq.n	8007c12 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c06:	681a      	ldr	r2, [r3, #0]
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c10:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d007      	beq.n	8007c2a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c1e:	681a      	ldr	r2, [r3, #0]
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c28:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	681a      	ldr	r2, [r3, #0]
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f042 0201 	orr.w	r2, r2, #1
 8007c38:	601a      	str	r2, [r3, #0]
 8007c3a:	e005      	b.n	8007c48 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007c44:	2302      	movs	r3, #2
 8007c46:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007c48:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3718      	adds	r7, #24
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}

08007c52 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007c52:	b480      	push	{r7}
 8007c54:	b083      	sub	sp, #12
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d101      	bne.n	8007c64 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8007c60:	2301      	movs	r3, #1
 8007c62:	e04f      	b.n	8007d04 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007c6a:	b2db      	uxtb	r3, r3
 8007c6c:	2b02      	cmp	r3, #2
 8007c6e:	d008      	beq.n	8007c82 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2204      	movs	r2, #4
 8007c74:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e040      	b.n	8007d04 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	681a      	ldr	r2, [r3, #0]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f022 020e 	bic.w	r2, r2, #14
 8007c90:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c96:	681a      	ldr	r2, [r3, #0]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007ca0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	681a      	ldr	r2, [r3, #0]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f022 0201 	bic.w	r2, r2, #1
 8007cb0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cb6:	f003 021c 	and.w	r2, r3, #28
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cbe:	2101      	movs	r1, #1
 8007cc0:	fa01 f202 	lsl.w	r2, r1, r2
 8007cc4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007cce:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d00c      	beq.n	8007cf2 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cdc:	681a      	ldr	r2, [r3, #0]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ce2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007ce6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cec:	687a      	ldr	r2, [r7, #4]
 8007cee:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007cf0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8007d02:	2300      	movs	r3, #0
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	370c      	adds	r7, #12
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0e:	4770      	bx	lr

08007d10 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b084      	sub	sp, #16
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007d22:	b2db      	uxtb	r3, r3
 8007d24:	2b02      	cmp	r3, #2
 8007d26:	d005      	beq.n	8007d34 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2204      	movs	r2, #4
 8007d2c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	73fb      	strb	r3, [r7, #15]
 8007d32:	e047      	b.n	8007dc4 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f022 020e 	bic.w	r2, r2, #14
 8007d42:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	681a      	ldr	r2, [r3, #0]
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f022 0201 	bic.w	r2, r2, #1
 8007d52:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d58:	681a      	ldr	r2, [r3, #0]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007d62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d68:	f003 021c 	and.w	r2, r3, #28
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d70:	2101      	movs	r1, #1
 8007d72:	fa01 f202 	lsl.w	r2, r1, r2
 8007d76:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d7c:	687a      	ldr	r2, [r7, #4]
 8007d7e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007d80:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d00c      	beq.n	8007da4 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d8e:	681a      	ldr	r2, [r3, #0]
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007d98:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d9e:	687a      	ldr	r2, [r7, #4]
 8007da0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007da2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2201      	movs	r2, #1
 8007da8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2200      	movs	r2, #0
 8007db0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d003      	beq.n	8007dc4 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	4798      	blx	r3
    }
  }
  return status;
 8007dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3710      	adds	r7, #16
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}

08007dce <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007dce:	b580      	push	{r7, lr}
 8007dd0:	b084      	sub	sp, #16
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dea:	f003 031c 	and.w	r3, r3, #28
 8007dee:	2204      	movs	r2, #4
 8007df0:	409a      	lsls	r2, r3
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	4013      	ands	r3, r2
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d026      	beq.n	8007e48 <HAL_DMA_IRQHandler+0x7a>
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	f003 0304 	and.w	r3, r3, #4
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d021      	beq.n	8007e48 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f003 0320 	and.w	r3, r3, #32
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d107      	bne.n	8007e22 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	681a      	ldr	r2, [r3, #0]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f022 0204 	bic.w	r2, r2, #4
 8007e20:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e26:	f003 021c 	and.w	r2, r3, #28
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e2e:	2104      	movs	r1, #4
 8007e30:	fa01 f202 	lsl.w	r2, r1, r2
 8007e34:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d071      	beq.n	8007f22 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8007e46:	e06c      	b.n	8007f22 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e4c:	f003 031c 	and.w	r3, r3, #28
 8007e50:	2202      	movs	r2, #2
 8007e52:	409a      	lsls	r2, r3
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	4013      	ands	r3, r2
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d02e      	beq.n	8007eba <HAL_DMA_IRQHandler+0xec>
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	f003 0302 	and.w	r3, r3, #2
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d029      	beq.n	8007eba <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f003 0320 	and.w	r3, r3, #32
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d10b      	bne.n	8007e8c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f022 020a 	bic.w	r2, r2, #10
 8007e82:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2201      	movs	r2, #1
 8007e88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e90:	f003 021c 	and.w	r2, r3, #28
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e98:	2102      	movs	r1, #2
 8007e9a:	fa01 f202 	lsl.w	r2, r1, r2
 8007e9e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d038      	beq.n	8007f22 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007eb8:	e033      	b.n	8007f22 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ebe:	f003 031c 	and.w	r3, r3, #28
 8007ec2:	2208      	movs	r2, #8
 8007ec4:	409a      	lsls	r2, r3
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	4013      	ands	r3, r2
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d02a      	beq.n	8007f24 <HAL_DMA_IRQHandler+0x156>
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	f003 0308 	and.w	r3, r3, #8
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d025      	beq.n	8007f24 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	681a      	ldr	r2, [r3, #0]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f022 020e 	bic.w	r2, r2, #14
 8007ee6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eec:	f003 021c 	and.w	r2, r3, #28
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ef4:	2101      	movs	r1, #1
 8007ef6:	fa01 f202 	lsl.w	r2, r1, r2
 8007efa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2201      	movs	r2, #1
 8007f00:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2201      	movs	r2, #1
 8007f06:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d004      	beq.n	8007f24 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007f22:	bf00      	nop
 8007f24:	bf00      	nop
}
 8007f26:	3710      	adds	r7, #16
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}

08007f2c <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b083      	sub	sp, #12
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007f3a:	b2db      	uxtb	r3, r3
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	370c      	adds	r7, #12
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr

08007f48 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b085      	sub	sp, #20
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	60f8      	str	r0, [r7, #12]
 8007f50:	60b9      	str	r1, [r7, #8]
 8007f52:	607a      	str	r2, [r7, #4]
 8007f54:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f5a:	68fa      	ldr	r2, [r7, #12]
 8007f5c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007f5e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d004      	beq.n	8007f72 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f6c:	68fa      	ldr	r2, [r7, #12]
 8007f6e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007f70:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f76:	f003 021c 	and.w	r2, r3, #28
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f7e:	2101      	movs	r1, #1
 8007f80:	fa01 f202 	lsl.w	r2, r1, r2
 8007f84:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	683a      	ldr	r2, [r7, #0]
 8007f8c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	689b      	ldr	r3, [r3, #8]
 8007f92:	2b10      	cmp	r3, #16
 8007f94:	d108      	bne.n	8007fa8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	687a      	ldr	r2, [r7, #4]
 8007f9c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	68ba      	ldr	r2, [r7, #8]
 8007fa4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007fa6:	e007      	b.n	8007fb8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	68ba      	ldr	r2, [r7, #8]
 8007fae:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	687a      	ldr	r2, [r7, #4]
 8007fb6:	60da      	str	r2, [r3, #12]
}
 8007fb8:	bf00      	nop
 8007fba:	3714      	adds	r7, #20
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr

08007fc4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b085      	sub	sp, #20
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	461a      	mov	r2, r3
 8007fd2:	4b17      	ldr	r3, [pc, #92]	; (8008030 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	d80a      	bhi.n	8007fee <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fdc:	089b      	lsrs	r3, r3, #2
 8007fde:	009b      	lsls	r3, r3, #2
 8007fe0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007fe4:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8007fe8:	687a      	ldr	r2, [r7, #4]
 8007fea:	6493      	str	r3, [r2, #72]	; 0x48
 8007fec:	e007      	b.n	8007ffe <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ff2:	089b      	lsrs	r3, r3, #2
 8007ff4:	009a      	lsls	r2, r3, #2
 8007ff6:	4b0f      	ldr	r3, [pc, #60]	; (8008034 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8007ff8:	4413      	add	r3, r2
 8007ffa:	687a      	ldr	r2, [r7, #4]
 8007ffc:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	b2db      	uxtb	r3, r3
 8008004:	3b08      	subs	r3, #8
 8008006:	4a0c      	ldr	r2, [pc, #48]	; (8008038 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8008008:	fba2 2303 	umull	r2, r3, r2, r3
 800800c:	091b      	lsrs	r3, r3, #4
 800800e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	4a0a      	ldr	r2, [pc, #40]	; (800803c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8008014:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	f003 031f 	and.w	r3, r3, #31
 800801c:	2201      	movs	r2, #1
 800801e:	409a      	lsls	r2, r3
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	651a      	str	r2, [r3, #80]	; 0x50
}
 8008024:	bf00      	nop
 8008026:	3714      	adds	r7, #20
 8008028:	46bd      	mov	sp, r7
 800802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802e:	4770      	bx	lr
 8008030:	40020407 	.word	0x40020407
 8008034:	4002081c 	.word	0x4002081c
 8008038:	cccccccd 	.word	0xcccccccd
 800803c:	40020880 	.word	0x40020880

08008040 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008040:	b480      	push	{r7}
 8008042:	b085      	sub	sp, #20
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008050:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008052:	68fa      	ldr	r2, [r7, #12]
 8008054:	4b0b      	ldr	r3, [pc, #44]	; (8008084 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8008056:	4413      	add	r3, r2
 8008058:	009b      	lsls	r3, r3, #2
 800805a:	461a      	mov	r2, r3
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	4a09      	ldr	r2, [pc, #36]	; (8008088 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8008064:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	3b01      	subs	r3, #1
 800806a:	f003 0303 	and.w	r3, r3, #3
 800806e:	2201      	movs	r2, #1
 8008070:	409a      	lsls	r2, r3
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8008076:	bf00      	nop
 8008078:	3714      	adds	r7, #20
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr
 8008082:	bf00      	nop
 8008084:	1000823f 	.word	0x1000823f
 8008088:	40020940 	.word	0x40020940

0800808c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800808c:	b480      	push	{r7}
 800808e:	b087      	sub	sp, #28
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008096:	2300      	movs	r3, #0
 8008098:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800809a:	e14c      	b.n	8008336 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	681a      	ldr	r2, [r3, #0]
 80080a0:	2101      	movs	r1, #1
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	fa01 f303 	lsl.w	r3, r1, r3
 80080a8:	4013      	ands	r3, r2
 80080aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	f000 813e 	beq.w	8008330 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d00b      	beq.n	80080d4 <HAL_GPIO_Init+0x48>
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	2b02      	cmp	r3, #2
 80080c2:	d007      	beq.n	80080d4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80080c8:	2b11      	cmp	r3, #17
 80080ca:	d003      	beq.n	80080d4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	2b12      	cmp	r3, #18
 80080d2:	d130      	bne.n	8008136 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	005b      	lsls	r3, r3, #1
 80080de:	2203      	movs	r2, #3
 80080e0:	fa02 f303 	lsl.w	r3, r2, r3
 80080e4:	43db      	mvns	r3, r3
 80080e6:	693a      	ldr	r2, [r7, #16]
 80080e8:	4013      	ands	r3, r2
 80080ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	68da      	ldr	r2, [r3, #12]
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	005b      	lsls	r3, r3, #1
 80080f4:	fa02 f303 	lsl.w	r3, r2, r3
 80080f8:	693a      	ldr	r2, [r7, #16]
 80080fa:	4313      	orrs	r3, r2
 80080fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	693a      	ldr	r2, [r7, #16]
 8008102:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800810a:	2201      	movs	r2, #1
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	fa02 f303 	lsl.w	r3, r2, r3
 8008112:	43db      	mvns	r3, r3
 8008114:	693a      	ldr	r2, [r7, #16]
 8008116:	4013      	ands	r3, r2
 8008118:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	091b      	lsrs	r3, r3, #4
 8008120:	f003 0201 	and.w	r2, r3, #1
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	fa02 f303 	lsl.w	r3, r2, r3
 800812a:	693a      	ldr	r2, [r7, #16]
 800812c:	4313      	orrs	r3, r2
 800812e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	693a      	ldr	r2, [r7, #16]
 8008134:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	68db      	ldr	r3, [r3, #12]
 800813a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	005b      	lsls	r3, r3, #1
 8008140:	2203      	movs	r2, #3
 8008142:	fa02 f303 	lsl.w	r3, r2, r3
 8008146:	43db      	mvns	r3, r3
 8008148:	693a      	ldr	r2, [r7, #16]
 800814a:	4013      	ands	r3, r2
 800814c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	689a      	ldr	r2, [r3, #8]
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	005b      	lsls	r3, r3, #1
 8008156:	fa02 f303 	lsl.w	r3, r2, r3
 800815a:	693a      	ldr	r2, [r7, #16]
 800815c:	4313      	orrs	r3, r2
 800815e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	693a      	ldr	r2, [r7, #16]
 8008164:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	2b02      	cmp	r3, #2
 800816c:	d003      	beq.n	8008176 <HAL_GPIO_Init+0xea>
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	2b12      	cmp	r3, #18
 8008174:	d123      	bne.n	80081be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	08da      	lsrs	r2, r3, #3
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	3208      	adds	r2, #8
 800817e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008182:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	f003 0307 	and.w	r3, r3, #7
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	220f      	movs	r2, #15
 800818e:	fa02 f303 	lsl.w	r3, r2, r3
 8008192:	43db      	mvns	r3, r3
 8008194:	693a      	ldr	r2, [r7, #16]
 8008196:	4013      	ands	r3, r2
 8008198:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	691a      	ldr	r2, [r3, #16]
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	f003 0307 	and.w	r3, r3, #7
 80081a4:	009b      	lsls	r3, r3, #2
 80081a6:	fa02 f303 	lsl.w	r3, r2, r3
 80081aa:	693a      	ldr	r2, [r7, #16]
 80081ac:	4313      	orrs	r3, r2
 80081ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	08da      	lsrs	r2, r3, #3
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	3208      	adds	r2, #8
 80081b8:	6939      	ldr	r1, [r7, #16]
 80081ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	005b      	lsls	r3, r3, #1
 80081c8:	2203      	movs	r2, #3
 80081ca:	fa02 f303 	lsl.w	r3, r2, r3
 80081ce:	43db      	mvns	r3, r3
 80081d0:	693a      	ldr	r2, [r7, #16]
 80081d2:	4013      	ands	r3, r2
 80081d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	f003 0203 	and.w	r2, r3, #3
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	005b      	lsls	r3, r3, #1
 80081e2:	fa02 f303 	lsl.w	r3, r2, r3
 80081e6:	693a      	ldr	r2, [r7, #16]
 80081e8:	4313      	orrs	r3, r2
 80081ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	693a      	ldr	r2, [r7, #16]
 80081f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	685b      	ldr	r3, [r3, #4]
 80081f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	f000 8098 	beq.w	8008330 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8008200:	4a54      	ldr	r2, [pc, #336]	; (8008354 <HAL_GPIO_Init+0x2c8>)
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	089b      	lsrs	r3, r3, #2
 8008206:	3302      	adds	r3, #2
 8008208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800820c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	f003 0303 	and.w	r3, r3, #3
 8008214:	009b      	lsls	r3, r3, #2
 8008216:	220f      	movs	r2, #15
 8008218:	fa02 f303 	lsl.w	r3, r2, r3
 800821c:	43db      	mvns	r3, r3
 800821e:	693a      	ldr	r2, [r7, #16]
 8008220:	4013      	ands	r3, r2
 8008222:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800822a:	d019      	beq.n	8008260 <HAL_GPIO_Init+0x1d4>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	4a4a      	ldr	r2, [pc, #296]	; (8008358 <HAL_GPIO_Init+0x2cc>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d013      	beq.n	800825c <HAL_GPIO_Init+0x1d0>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	4a49      	ldr	r2, [pc, #292]	; (800835c <HAL_GPIO_Init+0x2d0>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d00d      	beq.n	8008258 <HAL_GPIO_Init+0x1cc>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	4a48      	ldr	r2, [pc, #288]	; (8008360 <HAL_GPIO_Init+0x2d4>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d007      	beq.n	8008254 <HAL_GPIO_Init+0x1c8>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	4a47      	ldr	r2, [pc, #284]	; (8008364 <HAL_GPIO_Init+0x2d8>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d101      	bne.n	8008250 <HAL_GPIO_Init+0x1c4>
 800824c:	2304      	movs	r3, #4
 800824e:	e008      	b.n	8008262 <HAL_GPIO_Init+0x1d6>
 8008250:	2307      	movs	r3, #7
 8008252:	e006      	b.n	8008262 <HAL_GPIO_Init+0x1d6>
 8008254:	2303      	movs	r3, #3
 8008256:	e004      	b.n	8008262 <HAL_GPIO_Init+0x1d6>
 8008258:	2302      	movs	r3, #2
 800825a:	e002      	b.n	8008262 <HAL_GPIO_Init+0x1d6>
 800825c:	2301      	movs	r3, #1
 800825e:	e000      	b.n	8008262 <HAL_GPIO_Init+0x1d6>
 8008260:	2300      	movs	r3, #0
 8008262:	697a      	ldr	r2, [r7, #20]
 8008264:	f002 0203 	and.w	r2, r2, #3
 8008268:	0092      	lsls	r2, r2, #2
 800826a:	4093      	lsls	r3, r2
 800826c:	693a      	ldr	r2, [r7, #16]
 800826e:	4313      	orrs	r3, r2
 8008270:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8008272:	4938      	ldr	r1, [pc, #224]	; (8008354 <HAL_GPIO_Init+0x2c8>)
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	089b      	lsrs	r3, r3, #2
 8008278:	3302      	adds	r3, #2
 800827a:	693a      	ldr	r2, [r7, #16]
 800827c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008280:	4b39      	ldr	r3, [pc, #228]	; (8008368 <HAL_GPIO_Init+0x2dc>)
 8008282:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008286:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	43db      	mvns	r3, r3
 800828c:	693a      	ldr	r2, [r7, #16]
 800828e:	4013      	ands	r3, r2
 8008290:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800829a:	2b00      	cmp	r3, #0
 800829c:	d003      	beq.n	80082a6 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800829e:	693a      	ldr	r2, [r7, #16]
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	4313      	orrs	r3, r2
 80082a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80082a6:	4a30      	ldr	r2, [pc, #192]	; (8008368 <HAL_GPIO_Init+0x2dc>)
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80082ae:	4b2e      	ldr	r3, [pc, #184]	; (8008368 <HAL_GPIO_Init+0x2dc>)
 80082b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	43db      	mvns	r3, r3
 80082ba:	693a      	ldr	r2, [r7, #16]
 80082bc:	4013      	ands	r3, r2
 80082be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	685b      	ldr	r3, [r3, #4]
 80082c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d003      	beq.n	80082d4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80082cc:	693a      	ldr	r2, [r7, #16]
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	4313      	orrs	r3, r2
 80082d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80082d4:	4a24      	ldr	r2, [pc, #144]	; (8008368 <HAL_GPIO_Init+0x2dc>)
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80082dc:	4b22      	ldr	r3, [pc, #136]	; (8008368 <HAL_GPIO_Init+0x2dc>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	43db      	mvns	r3, r3
 80082e6:	693a      	ldr	r2, [r7, #16]
 80082e8:	4013      	ands	r3, r2
 80082ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d003      	beq.n	8008300 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 80082f8:	693a      	ldr	r2, [r7, #16]
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	4313      	orrs	r3, r2
 80082fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008300:	4a19      	ldr	r2, [pc, #100]	; (8008368 <HAL_GPIO_Init+0x2dc>)
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008306:	4b18      	ldr	r3, [pc, #96]	; (8008368 <HAL_GPIO_Init+0x2dc>)
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	43db      	mvns	r3, r3
 8008310:	693a      	ldr	r2, [r7, #16]
 8008312:	4013      	ands	r3, r2
 8008314:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	685b      	ldr	r3, [r3, #4]
 800831a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800831e:	2b00      	cmp	r3, #0
 8008320:	d003      	beq.n	800832a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8008322:	693a      	ldr	r2, [r7, #16]
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	4313      	orrs	r3, r2
 8008328:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800832a:	4a0f      	ldr	r2, [pc, #60]	; (8008368 <HAL_GPIO_Init+0x2dc>)
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	3301      	adds	r3, #1
 8008334:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	681a      	ldr	r2, [r3, #0]
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	fa22 f303 	lsr.w	r3, r2, r3
 8008340:	2b00      	cmp	r3, #0
 8008342:	f47f aeab 	bne.w	800809c <HAL_GPIO_Init+0x10>
  }
}
 8008346:	bf00      	nop
 8008348:	371c      	adds	r7, #28
 800834a:	46bd      	mov	sp, r7
 800834c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008350:	4770      	bx	lr
 8008352:	bf00      	nop
 8008354:	40010000 	.word	0x40010000
 8008358:	48000400 	.word	0x48000400
 800835c:	48000800 	.word	0x48000800
 8008360:	48000c00 	.word	0x48000c00
 8008364:	48001000 	.word	0x48001000
 8008368:	58000800 	.word	0x58000800

0800836c <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800836c:	b480      	push	{r7}
 800836e:	b085      	sub	sp, #20
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	460b      	mov	r3, r1
 8008376:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	691a      	ldr	r2, [r3, #16]
 800837c:	887b      	ldrh	r3, [r7, #2]
 800837e:	4013      	ands	r3, r2
 8008380:	2b00      	cmp	r3, #0
 8008382:	d002      	beq.n	800838a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008384:	2301      	movs	r3, #1
 8008386:	73fb      	strb	r3, [r7, #15]
 8008388:	e001      	b.n	800838e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800838a:	2300      	movs	r3, #0
 800838c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800838e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008390:	4618      	mov	r0, r3
 8008392:	3714      	adds	r7, #20
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr

0800839c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800839c:	b480      	push	{r7}
 800839e:	b083      	sub	sp, #12
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
 80083a4:	460b      	mov	r3, r1
 80083a6:	807b      	strh	r3, [r7, #2]
 80083a8:	4613      	mov	r3, r2
 80083aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80083ac:	787b      	ldrb	r3, [r7, #1]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d003      	beq.n	80083ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80083b2:	887a      	ldrh	r2, [r7, #2]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80083b8:	e002      	b.n	80083c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80083ba:	887a      	ldrh	r2, [r7, #2]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80083c0:	bf00      	nop
 80083c2:	370c      	adds	r7, #12
 80083c4:	46bd      	mov	sp, r7
 80083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ca:	4770      	bx	lr

080083cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b082      	sub	sp, #8
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	4603      	mov	r3, r0
 80083d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80083d6:	4b08      	ldr	r3, [pc, #32]	; (80083f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80083d8:	68da      	ldr	r2, [r3, #12]
 80083da:	88fb      	ldrh	r3, [r7, #6]
 80083dc:	4013      	ands	r3, r2
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d006      	beq.n	80083f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80083e2:	4a05      	ldr	r2, [pc, #20]	; (80083f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80083e4:	88fb      	ldrh	r3, [r7, #6]
 80083e6:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80083e8:	88fb      	ldrh	r3, [r7, #6]
 80083ea:	4618      	mov	r0, r3
 80083ec:	f7fa fe2a 	bl	8003044 <HAL_GPIO_EXTI_Callback>
  }
}
 80083f0:	bf00      	nop
 80083f2:	3708      	adds	r7, #8
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}
 80083f8:	58000800 	.word	0x58000800

080083fc <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b082      	sub	sp, #8
 8008400:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8008402:	4b0a      	ldr	r3, [pc, #40]	; (800842c <HAL_HSEM_IRQHandler+0x30>)
 8008404:	68db      	ldr	r3, [r3, #12]
 8008406:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8008408:	4b08      	ldr	r3, [pc, #32]	; (800842c <HAL_HSEM_IRQHandler+0x30>)
 800840a:	681a      	ldr	r2, [r3, #0]
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	43db      	mvns	r3, r3
 8008410:	4906      	ldr	r1, [pc, #24]	; (800842c <HAL_HSEM_IRQHandler+0x30>)
 8008412:	4013      	ands	r3, r2
 8008414:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8008416:	4a05      	ldr	r2, [pc, #20]	; (800842c <HAL_HSEM_IRQHandler+0x30>)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 f807 	bl	8008430 <HAL_HSEM_FreeCallback>
}
 8008422:	bf00      	nop
 8008424:	3708      	adds	r7, #8
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
 800842a:	bf00      	nop
 800842c:	58001500 	.word	0x58001500

08008430 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8008430:	b480      	push	{r7}
 8008432:	b083      	sub	sp, #12
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8008438:	bf00      	nop
 800843a:	370c      	adds	r7, #12
 800843c:	46bd      	mov	sp, r7
 800843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008442:	4770      	bx	lr

08008444 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b082      	sub	sp, #8
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d101      	bne.n	8008456 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008452:	2301      	movs	r3, #1
 8008454:	e081      	b.n	800855a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800845c:	b2db      	uxtb	r3, r3
 800845e:	2b00      	cmp	r3, #0
 8008460:	d106      	bne.n	8008470 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2200      	movs	r2, #0
 8008466:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f7fa fd2c 	bl	8002ec8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2224      	movs	r2, #36	; 0x24
 8008474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	681a      	ldr	r2, [r3, #0]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f022 0201 	bic.w	r2, r2, #1
 8008486:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	685a      	ldr	r2, [r3, #4]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008494:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	689a      	ldr	r2, [r3, #8]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80084a4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	68db      	ldr	r3, [r3, #12]
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	d107      	bne.n	80084be <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	689a      	ldr	r2, [r3, #8]
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80084ba:	609a      	str	r2, [r3, #8]
 80084bc:	e006      	b.n	80084cc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	689a      	ldr	r2, [r3, #8]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80084ca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	68db      	ldr	r3, [r3, #12]
 80084d0:	2b02      	cmp	r3, #2
 80084d2:	d104      	bne.n	80084de <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80084dc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	687a      	ldr	r2, [r7, #4]
 80084e6:	6812      	ldr	r2, [r2, #0]
 80084e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80084ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084f0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	68da      	ldr	r2, [r3, #12]
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008500:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	691a      	ldr	r2, [r3, #16]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	695b      	ldr	r3, [r3, #20]
 800850a:	ea42 0103 	orr.w	r1, r2, r3
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	699b      	ldr	r3, [r3, #24]
 8008512:	021a      	lsls	r2, r3, #8
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	430a      	orrs	r2, r1
 800851a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	69d9      	ldr	r1, [r3, #28]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6a1a      	ldr	r2, [r3, #32]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	430a      	orrs	r2, r1
 800852a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	681a      	ldr	r2, [r3, #0]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f042 0201 	orr.w	r2, r2, #1
 800853a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2200      	movs	r2, #0
 8008540:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2220      	movs	r2, #32
 8008546:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2200      	movs	r2, #0
 800854e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2200      	movs	r2, #0
 8008554:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008558:	2300      	movs	r3, #0
}
 800855a:	4618      	mov	r0, r3
 800855c:	3708      	adds	r7, #8
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}
	...

08008564 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b088      	sub	sp, #32
 8008568:	af02      	add	r7, sp, #8
 800856a:	60f8      	str	r0, [r7, #12]
 800856c:	607a      	str	r2, [r7, #4]
 800856e:	461a      	mov	r2, r3
 8008570:	460b      	mov	r3, r1
 8008572:	817b      	strh	r3, [r7, #10]
 8008574:	4613      	mov	r3, r2
 8008576:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800857e:	b2db      	uxtb	r3, r3
 8008580:	2b20      	cmp	r3, #32
 8008582:	f040 80da 	bne.w	800873a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800858c:	2b01      	cmp	r3, #1
 800858e:	d101      	bne.n	8008594 <HAL_I2C_Master_Transmit+0x30>
 8008590:	2302      	movs	r3, #2
 8008592:	e0d3      	b.n	800873c <HAL_I2C_Master_Transmit+0x1d8>
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2201      	movs	r2, #1
 8008598:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800859c:	f7fd fc18 	bl	8005dd0 <HAL_GetTick>
 80085a0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	9300      	str	r3, [sp, #0]
 80085a6:	2319      	movs	r3, #25
 80085a8:	2201      	movs	r2, #1
 80085aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80085ae:	68f8      	ldr	r0, [r7, #12]
 80085b0:	f001 fc8b 	bl	8009eca <I2C_WaitOnFlagUntilTimeout>
 80085b4:	4603      	mov	r3, r0
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d001      	beq.n	80085be <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80085ba:	2301      	movs	r3, #1
 80085bc:	e0be      	b.n	800873c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	2221      	movs	r2, #33	; 0x21
 80085c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2210      	movs	r2, #16
 80085ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	2200      	movs	r2, #0
 80085d2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	687a      	ldr	r2, [r7, #4]
 80085d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	893a      	ldrh	r2, [r7, #8]
 80085de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	2200      	movs	r2, #0
 80085e4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085ea:	b29b      	uxth	r3, r3
 80085ec:	2bff      	cmp	r3, #255	; 0xff
 80085ee:	d90e      	bls.n	800860e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	22ff      	movs	r2, #255	; 0xff
 80085f4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085fa:	b2da      	uxtb	r2, r3
 80085fc:	8979      	ldrh	r1, [r7, #10]
 80085fe:	4b51      	ldr	r3, [pc, #324]	; (8008744 <HAL_I2C_Master_Transmit+0x1e0>)
 8008600:	9300      	str	r3, [sp, #0]
 8008602:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008606:	68f8      	ldr	r0, [r7, #12]
 8008608:	f001 fdee 	bl	800a1e8 <I2C_TransferConfig>
 800860c:	e06c      	b.n	80086e8 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008612:	b29a      	uxth	r2, r3
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800861c:	b2da      	uxtb	r2, r3
 800861e:	8979      	ldrh	r1, [r7, #10]
 8008620:	4b48      	ldr	r3, [pc, #288]	; (8008744 <HAL_I2C_Master_Transmit+0x1e0>)
 8008622:	9300      	str	r3, [sp, #0]
 8008624:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008628:	68f8      	ldr	r0, [r7, #12]
 800862a:	f001 fddd 	bl	800a1e8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800862e:	e05b      	b.n	80086e8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008630:	697a      	ldr	r2, [r7, #20]
 8008632:	6a39      	ldr	r1, [r7, #32]
 8008634:	68f8      	ldr	r0, [r7, #12]
 8008636:	f001 fc88 	bl	8009f4a <I2C_WaitOnTXISFlagUntilTimeout>
 800863a:	4603      	mov	r3, r0
 800863c:	2b00      	cmp	r3, #0
 800863e:	d001      	beq.n	8008644 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8008640:	2301      	movs	r3, #1
 8008642:	e07b      	b.n	800873c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008648:	781a      	ldrb	r2, [r3, #0]
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008654:	1c5a      	adds	r2, r3, #1
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800865e:	b29b      	uxth	r3, r3
 8008660:	3b01      	subs	r3, #1
 8008662:	b29a      	uxth	r2, r3
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800866c:	3b01      	subs	r3, #1
 800866e:	b29a      	uxth	r2, r3
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008678:	b29b      	uxth	r3, r3
 800867a:	2b00      	cmp	r3, #0
 800867c:	d034      	beq.n	80086e8 <HAL_I2C_Master_Transmit+0x184>
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008682:	2b00      	cmp	r3, #0
 8008684:	d130      	bne.n	80086e8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	9300      	str	r3, [sp, #0]
 800868a:	6a3b      	ldr	r3, [r7, #32]
 800868c:	2200      	movs	r2, #0
 800868e:	2180      	movs	r1, #128	; 0x80
 8008690:	68f8      	ldr	r0, [r7, #12]
 8008692:	f001 fc1a 	bl	8009eca <I2C_WaitOnFlagUntilTimeout>
 8008696:	4603      	mov	r3, r0
 8008698:	2b00      	cmp	r3, #0
 800869a:	d001      	beq.n	80086a0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800869c:	2301      	movs	r3, #1
 800869e:	e04d      	b.n	800873c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086a4:	b29b      	uxth	r3, r3
 80086a6:	2bff      	cmp	r3, #255	; 0xff
 80086a8:	d90e      	bls.n	80086c8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	22ff      	movs	r2, #255	; 0xff
 80086ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086b4:	b2da      	uxtb	r2, r3
 80086b6:	8979      	ldrh	r1, [r7, #10]
 80086b8:	2300      	movs	r3, #0
 80086ba:	9300      	str	r3, [sp, #0]
 80086bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80086c0:	68f8      	ldr	r0, [r7, #12]
 80086c2:	f001 fd91 	bl	800a1e8 <I2C_TransferConfig>
 80086c6:	e00f      	b.n	80086e8 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086cc:	b29a      	uxth	r2, r3
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086d6:	b2da      	uxtb	r2, r3
 80086d8:	8979      	ldrh	r1, [r7, #10]
 80086da:	2300      	movs	r3, #0
 80086dc:	9300      	str	r3, [sp, #0]
 80086de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80086e2:	68f8      	ldr	r0, [r7, #12]
 80086e4:	f001 fd80 	bl	800a1e8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086ec:	b29b      	uxth	r3, r3
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d19e      	bne.n	8008630 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80086f2:	697a      	ldr	r2, [r7, #20]
 80086f4:	6a39      	ldr	r1, [r7, #32]
 80086f6:	68f8      	ldr	r0, [r7, #12]
 80086f8:	f001 fc67 	bl	8009fca <I2C_WaitOnSTOPFlagUntilTimeout>
 80086fc:	4603      	mov	r3, r0
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d001      	beq.n	8008706 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8008702:	2301      	movs	r3, #1
 8008704:	e01a      	b.n	800873c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	2220      	movs	r2, #32
 800870c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	6859      	ldr	r1, [r3, #4]
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681a      	ldr	r2, [r3, #0]
 8008718:	4b0b      	ldr	r3, [pc, #44]	; (8008748 <HAL_I2C_Master_Transmit+0x1e4>)
 800871a:	400b      	ands	r3, r1
 800871c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	2220      	movs	r2, #32
 8008722:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2200      	movs	r2, #0
 800872a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	2200      	movs	r2, #0
 8008732:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008736:	2300      	movs	r3, #0
 8008738:	e000      	b.n	800873c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800873a:	2302      	movs	r3, #2
  }
}
 800873c:	4618      	mov	r0, r3
 800873e:	3718      	adds	r7, #24
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}
 8008744:	80002000 	.word	0x80002000
 8008748:	fe00e800 	.word	0xfe00e800

0800874c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b088      	sub	sp, #32
 8008750:	af02      	add	r7, sp, #8
 8008752:	60f8      	str	r0, [r7, #12]
 8008754:	607a      	str	r2, [r7, #4]
 8008756:	461a      	mov	r2, r3
 8008758:	460b      	mov	r3, r1
 800875a:	817b      	strh	r3, [r7, #10]
 800875c:	4613      	mov	r3, r2
 800875e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008766:	b2db      	uxtb	r3, r3
 8008768:	2b20      	cmp	r3, #32
 800876a:	f040 80db 	bne.w	8008924 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008774:	2b01      	cmp	r3, #1
 8008776:	d101      	bne.n	800877c <HAL_I2C_Master_Receive+0x30>
 8008778:	2302      	movs	r3, #2
 800877a:	e0d4      	b.n	8008926 <HAL_I2C_Master_Receive+0x1da>
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2201      	movs	r2, #1
 8008780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008784:	f7fd fb24 	bl	8005dd0 <HAL_GetTick>
 8008788:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	9300      	str	r3, [sp, #0]
 800878e:	2319      	movs	r3, #25
 8008790:	2201      	movs	r2, #1
 8008792:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008796:	68f8      	ldr	r0, [r7, #12]
 8008798:	f001 fb97 	bl	8009eca <I2C_WaitOnFlagUntilTimeout>
 800879c:	4603      	mov	r3, r0
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d001      	beq.n	80087a6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80087a2:	2301      	movs	r3, #1
 80087a4:	e0bf      	b.n	8008926 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	2222      	movs	r2, #34	; 0x22
 80087aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	2210      	movs	r2, #16
 80087b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	2200      	movs	r2, #0
 80087ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	687a      	ldr	r2, [r7, #4]
 80087c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	893a      	ldrh	r2, [r7, #8]
 80087c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	2200      	movs	r2, #0
 80087cc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087d2:	b29b      	uxth	r3, r3
 80087d4:	2bff      	cmp	r3, #255	; 0xff
 80087d6:	d90e      	bls.n	80087f6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	22ff      	movs	r2, #255	; 0xff
 80087dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087e2:	b2da      	uxtb	r2, r3
 80087e4:	8979      	ldrh	r1, [r7, #10]
 80087e6:	4b52      	ldr	r3, [pc, #328]	; (8008930 <HAL_I2C_Master_Receive+0x1e4>)
 80087e8:	9300      	str	r3, [sp, #0]
 80087ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80087ee:	68f8      	ldr	r0, [r7, #12]
 80087f0:	f001 fcfa 	bl	800a1e8 <I2C_TransferConfig>
 80087f4:	e06d      	b.n	80088d2 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087fa:	b29a      	uxth	r2, r3
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008804:	b2da      	uxtb	r2, r3
 8008806:	8979      	ldrh	r1, [r7, #10]
 8008808:	4b49      	ldr	r3, [pc, #292]	; (8008930 <HAL_I2C_Master_Receive+0x1e4>)
 800880a:	9300      	str	r3, [sp, #0]
 800880c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008810:	68f8      	ldr	r0, [r7, #12]
 8008812:	f001 fce9 	bl	800a1e8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8008816:	e05c      	b.n	80088d2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008818:	697a      	ldr	r2, [r7, #20]
 800881a:	6a39      	ldr	r1, [r7, #32]
 800881c:	68f8      	ldr	r0, [r7, #12]
 800881e:	f001 fc11 	bl	800a044 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008822:	4603      	mov	r3, r0
 8008824:	2b00      	cmp	r3, #0
 8008826:	d001      	beq.n	800882c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8008828:	2301      	movs	r3, #1
 800882a:	e07c      	b.n	8008926 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008836:	b2d2      	uxtb	r2, r2
 8008838:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800883e:	1c5a      	adds	r2, r3, #1
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008848:	3b01      	subs	r3, #1
 800884a:	b29a      	uxth	r2, r3
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008854:	b29b      	uxth	r3, r3
 8008856:	3b01      	subs	r3, #1
 8008858:	b29a      	uxth	r2, r3
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008862:	b29b      	uxth	r3, r3
 8008864:	2b00      	cmp	r3, #0
 8008866:	d034      	beq.n	80088d2 <HAL_I2C_Master_Receive+0x186>
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800886c:	2b00      	cmp	r3, #0
 800886e:	d130      	bne.n	80088d2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	9300      	str	r3, [sp, #0]
 8008874:	6a3b      	ldr	r3, [r7, #32]
 8008876:	2200      	movs	r2, #0
 8008878:	2180      	movs	r1, #128	; 0x80
 800887a:	68f8      	ldr	r0, [r7, #12]
 800887c:	f001 fb25 	bl	8009eca <I2C_WaitOnFlagUntilTimeout>
 8008880:	4603      	mov	r3, r0
 8008882:	2b00      	cmp	r3, #0
 8008884:	d001      	beq.n	800888a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8008886:	2301      	movs	r3, #1
 8008888:	e04d      	b.n	8008926 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800888e:	b29b      	uxth	r3, r3
 8008890:	2bff      	cmp	r3, #255	; 0xff
 8008892:	d90e      	bls.n	80088b2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	22ff      	movs	r2, #255	; 0xff
 8008898:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800889e:	b2da      	uxtb	r2, r3
 80088a0:	8979      	ldrh	r1, [r7, #10]
 80088a2:	2300      	movs	r3, #0
 80088a4:	9300      	str	r3, [sp, #0]
 80088a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80088aa:	68f8      	ldr	r0, [r7, #12]
 80088ac:	f001 fc9c 	bl	800a1e8 <I2C_TransferConfig>
 80088b0:	e00f      	b.n	80088d2 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088b6:	b29a      	uxth	r2, r3
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088c0:	b2da      	uxtb	r2, r3
 80088c2:	8979      	ldrh	r1, [r7, #10]
 80088c4:	2300      	movs	r3, #0
 80088c6:	9300      	str	r3, [sp, #0]
 80088c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80088cc:	68f8      	ldr	r0, [r7, #12]
 80088ce:	f001 fc8b 	bl	800a1e8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088d6:	b29b      	uxth	r3, r3
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d19d      	bne.n	8008818 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80088dc:	697a      	ldr	r2, [r7, #20]
 80088de:	6a39      	ldr	r1, [r7, #32]
 80088e0:	68f8      	ldr	r0, [r7, #12]
 80088e2:	f001 fb72 	bl	8009fca <I2C_WaitOnSTOPFlagUntilTimeout>
 80088e6:	4603      	mov	r3, r0
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d001      	beq.n	80088f0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80088ec:	2301      	movs	r3, #1
 80088ee:	e01a      	b.n	8008926 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	2220      	movs	r2, #32
 80088f6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	6859      	ldr	r1, [r3, #4]
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681a      	ldr	r2, [r3, #0]
 8008902:	4b0c      	ldr	r3, [pc, #48]	; (8008934 <HAL_I2C_Master_Receive+0x1e8>)
 8008904:	400b      	ands	r3, r1
 8008906:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2220      	movs	r2, #32
 800890c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2200      	movs	r2, #0
 8008914:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	2200      	movs	r2, #0
 800891c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008920:	2300      	movs	r3, #0
 8008922:	e000      	b.n	8008926 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8008924:	2302      	movs	r3, #2
  }
}
 8008926:	4618      	mov	r0, r3
 8008928:	3718      	adds	r7, #24
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}
 800892e:	bf00      	nop
 8008930:	80002400 	.word	0x80002400
 8008934:	fe00e800 	.word	0xfe00e800

08008938 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b088      	sub	sp, #32
 800893c:	af02      	add	r7, sp, #8
 800893e:	60f8      	str	r0, [r7, #12]
 8008940:	607a      	str	r2, [r7, #4]
 8008942:	461a      	mov	r2, r3
 8008944:	460b      	mov	r3, r1
 8008946:	817b      	strh	r3, [r7, #10]
 8008948:	4613      	mov	r3, r2
 800894a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008952:	b2db      	uxtb	r3, r3
 8008954:	2b20      	cmp	r3, #32
 8008956:	d153      	bne.n	8008a00 <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	699b      	ldr	r3, [r3, #24]
 800895e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008962:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008966:	d101      	bne.n	800896c <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
 8008968:	2302      	movs	r3, #2
 800896a:	e04a      	b.n	8008a02 <HAL_I2C_Master_Receive_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008972:	2b01      	cmp	r3, #1
 8008974:	d101      	bne.n	800897a <HAL_I2C_Master_Receive_IT+0x42>
 8008976:	2302      	movs	r3, #2
 8008978:	e043      	b.n	8008a02 <HAL_I2C_Master_Receive_IT+0xca>
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	2201      	movs	r2, #1
 800897e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2222      	movs	r2, #34	; 0x22
 8008986:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	2210      	movs	r2, #16
 800898e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	2200      	movs	r2, #0
 8008996:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	687a      	ldr	r2, [r7, #4]
 800899c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	893a      	ldrh	r2, [r7, #8]
 80089a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	4a19      	ldr	r2, [pc, #100]	; (8008a0c <HAL_I2C_Master_Receive_IT+0xd4>)
 80089a8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	4a18      	ldr	r2, [pc, #96]	; (8008a10 <HAL_I2C_Master_Receive_IT+0xd8>)
 80089ae:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089b4:	b29b      	uxth	r3, r3
 80089b6:	2bff      	cmp	r3, #255	; 0xff
 80089b8:	d906      	bls.n	80089c8 <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	22ff      	movs	r2, #255	; 0xff
 80089be:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80089c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80089c4:	617b      	str	r3, [r7, #20]
 80089c6:	e007      	b.n	80089d8 <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089cc:	b29a      	uxth	r2, r3
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80089d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80089d6:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089dc:	b2da      	uxtb	r2, r3
 80089de:	8979      	ldrh	r1, [r7, #10]
 80089e0:	4b0c      	ldr	r3, [pc, #48]	; (8008a14 <HAL_I2C_Master_Receive_IT+0xdc>)
 80089e2:	9300      	str	r3, [sp, #0]
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	68f8      	ldr	r0, [r7, #12]
 80089e8:	f001 fbfe 	bl	800a1e8 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	2200      	movs	r2, #0
 80089f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80089f4:	2102      	movs	r1, #2
 80089f6:	68f8      	ldr	r0, [r7, #12]
 80089f8:	f001 fc24 	bl	800a244 <I2C_Enable_IRQ>

    return HAL_OK;
 80089fc:	2300      	movs	r3, #0
 80089fe:	e000      	b.n	8008a02 <HAL_I2C_Master_Receive_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8008a00:	2302      	movs	r3, #2
  }
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3718      	adds	r7, #24
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
 8008a0a:	bf00      	nop
 8008a0c:	ffff0000 	.word	0xffff0000
 8008a10:	08008d1d 	.word	0x08008d1d
 8008a14:	80002400 	.word	0x80002400

08008a18 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b088      	sub	sp, #32
 8008a1c:	af02      	add	r7, sp, #8
 8008a1e:	60f8      	str	r0, [r7, #12]
 8008a20:	4608      	mov	r0, r1
 8008a22:	4611      	mov	r1, r2
 8008a24:	461a      	mov	r2, r3
 8008a26:	4603      	mov	r3, r0
 8008a28:	817b      	strh	r3, [r7, #10]
 8008a2a:	460b      	mov	r3, r1
 8008a2c:	813b      	strh	r3, [r7, #8]
 8008a2e:	4613      	mov	r3, r2
 8008a30:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a38:	b2db      	uxtb	r3, r3
 8008a3a:	2b20      	cmp	r3, #32
 8008a3c:	f040 80f9 	bne.w	8008c32 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a40:	6a3b      	ldr	r3, [r7, #32]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d002      	beq.n	8008a4c <HAL_I2C_Mem_Write+0x34>
 8008a46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d105      	bne.n	8008a58 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a52:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008a54:	2301      	movs	r3, #1
 8008a56:	e0ed      	b.n	8008c34 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008a5e:	2b01      	cmp	r3, #1
 8008a60:	d101      	bne.n	8008a66 <HAL_I2C_Mem_Write+0x4e>
 8008a62:	2302      	movs	r3, #2
 8008a64:	e0e6      	b.n	8008c34 <HAL_I2C_Mem_Write+0x21c>
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2201      	movs	r2, #1
 8008a6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008a6e:	f7fd f9af 	bl	8005dd0 <HAL_GetTick>
 8008a72:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	9300      	str	r3, [sp, #0]
 8008a78:	2319      	movs	r3, #25
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008a80:	68f8      	ldr	r0, [r7, #12]
 8008a82:	f001 fa22 	bl	8009eca <I2C_WaitOnFlagUntilTimeout>
 8008a86:	4603      	mov	r3, r0
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d001      	beq.n	8008a90 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	e0d1      	b.n	8008c34 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	2221      	movs	r2, #33	; 0x21
 8008a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	2240      	movs	r2, #64	; 0x40
 8008a9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	6a3a      	ldr	r2, [r7, #32]
 8008aaa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008ab0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008ab8:	88f8      	ldrh	r0, [r7, #6]
 8008aba:	893a      	ldrh	r2, [r7, #8]
 8008abc:	8979      	ldrh	r1, [r7, #10]
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	9301      	str	r3, [sp, #4]
 8008ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac4:	9300      	str	r3, [sp, #0]
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	68f8      	ldr	r0, [r7, #12]
 8008aca:	f000 fd27 	bl	800951c <I2C_RequestMemoryWrite>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d005      	beq.n	8008ae0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008adc:	2301      	movs	r3, #1
 8008ade:	e0a9      	b.n	8008c34 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ae4:	b29b      	uxth	r3, r3
 8008ae6:	2bff      	cmp	r3, #255	; 0xff
 8008ae8:	d90e      	bls.n	8008b08 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	22ff      	movs	r2, #255	; 0xff
 8008aee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008af4:	b2da      	uxtb	r2, r3
 8008af6:	8979      	ldrh	r1, [r7, #10]
 8008af8:	2300      	movs	r3, #0
 8008afa:	9300      	str	r3, [sp, #0]
 8008afc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008b00:	68f8      	ldr	r0, [r7, #12]
 8008b02:	f001 fb71 	bl	800a1e8 <I2C_TransferConfig>
 8008b06:	e00f      	b.n	8008b28 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b0c:	b29a      	uxth	r2, r3
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b16:	b2da      	uxtb	r2, r3
 8008b18:	8979      	ldrh	r1, [r7, #10]
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	9300      	str	r3, [sp, #0]
 8008b1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008b22:	68f8      	ldr	r0, [r7, #12]
 8008b24:	f001 fb60 	bl	800a1e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008b28:	697a      	ldr	r2, [r7, #20]
 8008b2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b2c:	68f8      	ldr	r0, [r7, #12]
 8008b2e:	f001 fa0c 	bl	8009f4a <I2C_WaitOnTXISFlagUntilTimeout>
 8008b32:	4603      	mov	r3, r0
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d001      	beq.n	8008b3c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008b38:	2301      	movs	r3, #1
 8008b3a:	e07b      	b.n	8008c34 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b40:	781a      	ldrb	r2, [r3, #0]
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b4c:	1c5a      	adds	r2, r3, #1
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b56:	b29b      	uxth	r3, r3
 8008b58:	3b01      	subs	r3, #1
 8008b5a:	b29a      	uxth	r2, r3
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b64:	3b01      	subs	r3, #1
 8008b66:	b29a      	uxth	r2, r3
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b70:	b29b      	uxth	r3, r3
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d034      	beq.n	8008be0 <HAL_I2C_Mem_Write+0x1c8>
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d130      	bne.n	8008be0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	9300      	str	r3, [sp, #0]
 8008b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b84:	2200      	movs	r2, #0
 8008b86:	2180      	movs	r1, #128	; 0x80
 8008b88:	68f8      	ldr	r0, [r7, #12]
 8008b8a:	f001 f99e 	bl	8009eca <I2C_WaitOnFlagUntilTimeout>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d001      	beq.n	8008b98 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008b94:	2301      	movs	r3, #1
 8008b96:	e04d      	b.n	8008c34 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b9c:	b29b      	uxth	r3, r3
 8008b9e:	2bff      	cmp	r3, #255	; 0xff
 8008ba0:	d90e      	bls.n	8008bc0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	22ff      	movs	r2, #255	; 0xff
 8008ba6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bac:	b2da      	uxtb	r2, r3
 8008bae:	8979      	ldrh	r1, [r7, #10]
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	9300      	str	r3, [sp, #0]
 8008bb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008bb8:	68f8      	ldr	r0, [r7, #12]
 8008bba:	f001 fb15 	bl	800a1e8 <I2C_TransferConfig>
 8008bbe:	e00f      	b.n	8008be0 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bc4:	b29a      	uxth	r2, r3
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bce:	b2da      	uxtb	r2, r3
 8008bd0:	8979      	ldrh	r1, [r7, #10]
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	9300      	str	r3, [sp, #0]
 8008bd6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008bda:	68f8      	ldr	r0, [r7, #12]
 8008bdc:	f001 fb04 	bl	800a1e8 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008be4:	b29b      	uxth	r3, r3
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d19e      	bne.n	8008b28 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008bea:	697a      	ldr	r2, [r7, #20]
 8008bec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008bee:	68f8      	ldr	r0, [r7, #12]
 8008bf0:	f001 f9eb 	bl	8009fca <I2C_WaitOnSTOPFlagUntilTimeout>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d001      	beq.n	8008bfe <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	e01a      	b.n	8008c34 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	2220      	movs	r2, #32
 8008c04:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	6859      	ldr	r1, [r3, #4]
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681a      	ldr	r2, [r3, #0]
 8008c10:	4b0a      	ldr	r3, [pc, #40]	; (8008c3c <HAL_I2C_Mem_Write+0x224>)
 8008c12:	400b      	ands	r3, r1
 8008c14:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	2220      	movs	r2, #32
 8008c1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	2200      	movs	r2, #0
 8008c22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	e000      	b.n	8008c34 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8008c32:	2302      	movs	r3, #2
  }
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3718      	adds	r7, #24
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}
 8008c3c:	fe00e800 	.word	0xfe00e800

08008c40 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b084      	sub	sp, #16
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	699b      	ldr	r3, [r3, #24]
 8008c4e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d005      	beq.n	8008c6c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c64:	68ba      	ldr	r2, [r7, #8]
 8008c66:	68f9      	ldr	r1, [r7, #12]
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	4798      	blx	r3
  }
}
 8008c6c:	bf00      	nop
 8008c6e:	3710      	adds	r7, #16
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}

08008c74 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b083      	sub	sp, #12
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8008c7c:	bf00      	nop
 8008c7e:	370c      	adds	r7, #12
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr

08008c88 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b083      	sub	sp, #12
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8008c90:	bf00      	nop
 8008c92:	370c      	adds	r7, #12
 8008c94:	46bd      	mov	sp, r7
 8008c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9a:	4770      	bx	lr

08008c9c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b083      	sub	sp, #12
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
 8008ca4:	460b      	mov	r3, r1
 8008ca6:	70fb      	strb	r3, [r7, #3]
 8008ca8:	4613      	mov	r3, r2
 8008caa:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8008cac:	bf00      	nop
 8008cae:	370c      	adds	r7, #12
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb6:	4770      	bx	lr

08008cb8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b083      	sub	sp, #12
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8008cc0:	bf00      	nop
 8008cc2:	370c      	adds	r7, #12
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr

08008ccc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b083      	sub	sp, #12
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8008cd4:	bf00      	nop
 8008cd6:	370c      	adds	r7, #12
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cde:	4770      	bx	lr

08008ce0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b083      	sub	sp, #12
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8008ce8:	bf00      	nop
 8008cea:	370c      	adds	r7, #12
 8008cec:	46bd      	mov	sp, r7
 8008cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf2:	4770      	bx	lr

08008cf4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b083      	sub	sp, #12
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8008cfc:	bf00      	nop
 8008cfe:	370c      	adds	r7, #12
 8008d00:	46bd      	mov	sp, r7
 8008d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d06:	4770      	bx	lr

08008d08 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b083      	sub	sp, #12
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8008d10:	bf00      	nop
 8008d12:	370c      	adds	r7, #12
 8008d14:	46bd      	mov	sp, r7
 8008d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1a:	4770      	bx	lr

08008d1c <I2C_Master_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b088      	sub	sp, #32
 8008d20:	af02      	add	r7, sp, #8
 8008d22:	60f8      	str	r0, [r7, #12]
 8008d24:	60b9      	str	r1, [r7, #8]
 8008d26:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008d32:	2b01      	cmp	r3, #1
 8008d34:	d101      	bne.n	8008d3a <I2C_Master_ISR_IT+0x1e>
 8008d36:	2302      	movs	r3, #2
 8008d38:	e115      	b.n	8008f66 <I2C_Master_ISR_IT+0x24a>
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	091b      	lsrs	r3, r3, #4
 8008d46:	f003 0301 	and.w	r3, r3, #1
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d013      	beq.n	8008d76 <I2C_Master_ISR_IT+0x5a>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	091b      	lsrs	r3, r3, #4
 8008d52:	f003 0301 	and.w	r3, r3, #1
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d00d      	beq.n	8008d76 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	2210      	movs	r2, #16
 8008d60:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d66:	f043 0204 	orr.w	r2, r3, #4
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008d6e:	68f8      	ldr	r0, [r7, #12]
 8008d70:	f001 f869 	bl	8009e46 <I2C_Flush_TXDR>
 8008d74:	e0e2      	b.n	8008f3c <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	089b      	lsrs	r3, r3, #2
 8008d7a:	f003 0301 	and.w	r3, r3, #1
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d023      	beq.n	8008dca <I2C_Master_ISR_IT+0xae>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	089b      	lsrs	r3, r3, #2
 8008d86:	f003 0301 	and.w	r3, r3, #1
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d01d      	beq.n	8008dca <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	f023 0304 	bic.w	r3, r3, #4
 8008d94:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da0:	b2d2      	uxtb	r2, r2
 8008da2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da8:	1c5a      	adds	r2, r3, #1
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008db2:	3b01      	subs	r3, #1
 8008db4:	b29a      	uxth	r2, r3
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008dbe:	b29b      	uxth	r3, r3
 8008dc0:	3b01      	subs	r3, #1
 8008dc2:	b29a      	uxth	r2, r3
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008dc8:	e0b8      	b.n	8008f3c <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	085b      	lsrs	r3, r3, #1
 8008dce:	f003 0301 	and.w	r3, r3, #1
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d01e      	beq.n	8008e14 <I2C_Master_ISR_IT+0xf8>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	085b      	lsrs	r3, r3, #1
 8008dda:	f003 0301 	and.w	r3, r3, #1
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d018      	beq.n	8008e14 <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008de6:	781a      	ldrb	r2, [r3, #0]
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df2:	1c5a      	adds	r2, r3, #1
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008dfc:	3b01      	subs	r3, #1
 8008dfe:	b29a      	uxth	r2, r3
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e08:	b29b      	uxth	r3, r3
 8008e0a:	3b01      	subs	r3, #1
 8008e0c:	b29a      	uxth	r2, r3
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008e12:	e093      	b.n	8008f3c <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	09db      	lsrs	r3, r3, #7
 8008e18:	f003 0301 	and.w	r3, r3, #1
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d05e      	beq.n	8008ede <I2C_Master_ISR_IT+0x1c2>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	099b      	lsrs	r3, r3, #6
 8008e24:	f003 0301 	and.w	r3, r3, #1
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d058      	beq.n	8008ede <I2C_Master_ISR_IT+0x1c2>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e30:	b29b      	uxth	r3, r3
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d041      	beq.n	8008eba <I2C_Master_ISR_IT+0x19e>
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d13d      	bne.n	8008eba <I2C_Master_ISR_IT+0x19e>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	b29b      	uxth	r3, r3
 8008e46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008e4a:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e50:	b29b      	uxth	r3, r3
 8008e52:	2bff      	cmp	r3, #255	; 0xff
 8008e54:	d90e      	bls.n	8008e74 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	22ff      	movs	r2, #255	; 0xff
 8008e5a:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e60:	b2da      	uxtb	r2, r3
 8008e62:	8a79      	ldrh	r1, [r7, #18]
 8008e64:	2300      	movs	r3, #0
 8008e66:	9300      	str	r3, [sp, #0]
 8008e68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008e6c:	68f8      	ldr	r0, [r7, #12]
 8008e6e:	f001 f9bb 	bl	800a1e8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008e72:	e033      	b.n	8008edc <I2C_Master_ISR_IT+0x1c0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e78:	b29a      	uxth	r2, r3
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e82:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008e86:	d00c      	beq.n	8008ea2 <I2C_Master_ISR_IT+0x186>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e8c:	b2da      	uxtb	r2, r3
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008e92:	8a79      	ldrh	r1, [r7, #18]
 8008e94:	2300      	movs	r3, #0
 8008e96:	9300      	str	r3, [sp, #0]
 8008e98:	4603      	mov	r3, r0
 8008e9a:	68f8      	ldr	r0, [r7, #12]
 8008e9c:	f001 f9a4 	bl	800a1e8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008ea0:	e01c      	b.n	8008edc <I2C_Master_ISR_IT+0x1c0>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ea6:	b2da      	uxtb	r2, r3
 8008ea8:	8a79      	ldrh	r1, [r7, #18]
 8008eaa:	2300      	movs	r3, #0
 8008eac:	9300      	str	r3, [sp, #0]
 8008eae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008eb2:	68f8      	ldr	r0, [r7, #12]
 8008eb4:	f001 f998 	bl	800a1e8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008eb8:	e010      	b.n	8008edc <I2C_Master_ISR_IT+0x1c0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	685b      	ldr	r3, [r3, #4]
 8008ec0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ec4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ec8:	d003      	beq.n	8008ed2 <I2C_Master_ISR_IT+0x1b6>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8008eca:	68f8      	ldr	r0, [r7, #12]
 8008ecc:	f000 fbfe 	bl	80096cc <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008ed0:	e034      	b.n	8008f3c <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008ed2:	2140      	movs	r1, #64	; 0x40
 8008ed4:	68f8      	ldr	r0, [r7, #12]
 8008ed6:	f000 febf 	bl	8009c58 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008eda:	e02f      	b.n	8008f3c <I2C_Master_ISR_IT+0x220>
 8008edc:	e02e      	b.n	8008f3c <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	099b      	lsrs	r3, r3, #6
 8008ee2:	f003 0301 	and.w	r3, r3, #1
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d028      	beq.n	8008f3c <I2C_Master_ISR_IT+0x220>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	099b      	lsrs	r3, r3, #6
 8008eee:	f003 0301 	and.w	r3, r3, #1
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d022      	beq.n	8008f3c <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008efa:	b29b      	uxth	r3, r3
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d119      	bne.n	8008f34 <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f0e:	d015      	beq.n	8008f3c <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f14:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008f18:	d108      	bne.n	8008f2c <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	685a      	ldr	r2, [r3, #4]
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008f28:	605a      	str	r2, [r3, #4]
 8008f2a:	e007      	b.n	8008f3c <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8008f2c:	68f8      	ldr	r0, [r7, #12]
 8008f2e:	f000 fbcd 	bl	80096cc <I2C_ITMasterSeqCplt>
 8008f32:	e003      	b.n	8008f3c <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008f34:	2140      	movs	r1, #64	; 0x40
 8008f36:	68f8      	ldr	r0, [r7, #12]
 8008f38:	f000 fe8e 	bl	8009c58 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	095b      	lsrs	r3, r3, #5
 8008f40:	f003 0301 	and.w	r3, r3, #1
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d009      	beq.n	8008f5c <I2C_Master_ISR_IT+0x240>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	095b      	lsrs	r3, r3, #5
 8008f4c:	f003 0301 	and.w	r3, r3, #1
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d003      	beq.n	8008f5c <I2C_Master_ISR_IT+0x240>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8008f54:	6979      	ldr	r1, [r7, #20]
 8008f56:	68f8      	ldr	r0, [r7, #12]
 8008f58:	f000 fc54 	bl	8009804 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008f64:	2300      	movs	r3, #0
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3718      	adds	r7, #24
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}

08008f6e <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8008f6e:	b580      	push	{r7, lr}
 8008f70:	b086      	sub	sp, #24
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	60f8      	str	r0, [r7, #12]
 8008f76:	60b9      	str	r1, [r7, #8]
 8008f78:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f7e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008f8a:	2b01      	cmp	r3, #1
 8008f8c:	d101      	bne.n	8008f92 <I2C_Slave_ISR_IT+0x24>
 8008f8e:	2302      	movs	r3, #2
 8008f90:	e0ec      	b.n	800916c <I2C_Slave_ISR_IT+0x1fe>
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	2201      	movs	r2, #1
 8008f96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008f9a:	693b      	ldr	r3, [r7, #16]
 8008f9c:	095b      	lsrs	r3, r3, #5
 8008f9e:	f003 0301 	and.w	r3, r3, #1
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d009      	beq.n	8008fba <I2C_Slave_ISR_IT+0x4c>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	095b      	lsrs	r3, r3, #5
 8008faa:	f003 0301 	and.w	r3, r3, #1
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d003      	beq.n	8008fba <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8008fb2:	6939      	ldr	r1, [r7, #16]
 8008fb4:	68f8      	ldr	r0, [r7, #12]
 8008fb6:	f000 fcef 	bl	8009998 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008fba:	693b      	ldr	r3, [r7, #16]
 8008fbc:	091b      	lsrs	r3, r3, #4
 8008fbe:	f003 0301 	and.w	r3, r3, #1
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d04d      	beq.n	8009062 <I2C_Slave_ISR_IT+0xf4>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	091b      	lsrs	r3, r3, #4
 8008fca:	f003 0301 	and.w	r3, r3, #1
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d047      	beq.n	8009062 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fd6:	b29b      	uxth	r3, r3
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d128      	bne.n	800902e <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008fe2:	b2db      	uxtb	r3, r3
 8008fe4:	2b28      	cmp	r3, #40	; 0x28
 8008fe6:	d108      	bne.n	8008ffa <I2C_Slave_ISR_IT+0x8c>
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008fee:	d104      	bne.n	8008ffa <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8008ff0:	6939      	ldr	r1, [r7, #16]
 8008ff2:	68f8      	ldr	r0, [r7, #12]
 8008ff4:	f000 fdda 	bl	8009bac <I2C_ITListenCplt>
 8008ff8:	e032      	b.n	8009060 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009000:	b2db      	uxtb	r3, r3
 8009002:	2b29      	cmp	r3, #41	; 0x29
 8009004:	d10e      	bne.n	8009024 <I2C_Slave_ISR_IT+0xb6>
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800900c:	d00a      	beq.n	8009024 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	2210      	movs	r2, #16
 8009014:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8009016:	68f8      	ldr	r0, [r7, #12]
 8009018:	f000 ff15 	bl	8009e46 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800901c:	68f8      	ldr	r0, [r7, #12]
 800901e:	f000 fb92 	bl	8009746 <I2C_ITSlaveSeqCplt>
 8009022:	e01d      	b.n	8009060 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	2210      	movs	r2, #16
 800902a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800902c:	e096      	b.n	800915c <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	2210      	movs	r2, #16
 8009034:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800903a:	f043 0204 	orr.w	r2, r3, #4
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d004      	beq.n	8009052 <I2C_Slave_ISR_IT+0xe4>
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800904e:	f040 8085 	bne.w	800915c <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009056:	4619      	mov	r1, r3
 8009058:	68f8      	ldr	r0, [r7, #12]
 800905a:	f000 fdfd 	bl	8009c58 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800905e:	e07d      	b.n	800915c <I2C_Slave_ISR_IT+0x1ee>
 8009060:	e07c      	b.n	800915c <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	089b      	lsrs	r3, r3, #2
 8009066:	f003 0301 	and.w	r3, r3, #1
 800906a:	2b00      	cmp	r3, #0
 800906c:	d030      	beq.n	80090d0 <I2C_Slave_ISR_IT+0x162>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	089b      	lsrs	r3, r3, #2
 8009072:	f003 0301 	and.w	r3, r3, #1
 8009076:	2b00      	cmp	r3, #0
 8009078:	d02a      	beq.n	80090d0 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800907e:	b29b      	uxth	r3, r3
 8009080:	2b00      	cmp	r3, #0
 8009082:	d018      	beq.n	80090b6 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800908e:	b2d2      	uxtb	r2, r2
 8009090:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009096:	1c5a      	adds	r2, r3, #1
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090a0:	3b01      	subs	r3, #1
 80090a2:	b29a      	uxth	r2, r3
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090ac:	b29b      	uxth	r3, r3
 80090ae:	3b01      	subs	r3, #1
 80090b0:	b29a      	uxth	r2, r3
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090ba:	b29b      	uxth	r3, r3
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d14f      	bne.n	8009160 <I2C_Slave_ISR_IT+0x1f2>
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80090c6:	d04b      	beq.n	8009160 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80090c8:	68f8      	ldr	r0, [r7, #12]
 80090ca:	f000 fb3c 	bl	8009746 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80090ce:	e047      	b.n	8009160 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	08db      	lsrs	r3, r3, #3
 80090d4:	f003 0301 	and.w	r3, r3, #1
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d00a      	beq.n	80090f2 <I2C_Slave_ISR_IT+0x184>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	08db      	lsrs	r3, r3, #3
 80090e0:	f003 0301 	and.w	r3, r3, #1
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d004      	beq.n	80090f2 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80090e8:	6939      	ldr	r1, [r7, #16]
 80090ea:	68f8      	ldr	r0, [r7, #12]
 80090ec:	f000 fa6a 	bl	80095c4 <I2C_ITAddrCplt>
 80090f0:	e037      	b.n	8009162 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	085b      	lsrs	r3, r3, #1
 80090f6:	f003 0301 	and.w	r3, r3, #1
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d031      	beq.n	8009162 <I2C_Slave_ISR_IT+0x1f4>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	085b      	lsrs	r3, r3, #1
 8009102:	f003 0301 	and.w	r3, r3, #1
 8009106:	2b00      	cmp	r3, #0
 8009108:	d02b      	beq.n	8009162 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800910e:	b29b      	uxth	r3, r3
 8009110:	2b00      	cmp	r3, #0
 8009112:	d018      	beq.n	8009146 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009118:	781a      	ldrb	r2, [r3, #0]
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009124:	1c5a      	adds	r2, r3, #1
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800912e:	b29b      	uxth	r3, r3
 8009130:	3b01      	subs	r3, #1
 8009132:	b29a      	uxth	r2, r3
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800913c:	3b01      	subs	r3, #1
 800913e:	b29a      	uxth	r2, r3
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	851a      	strh	r2, [r3, #40]	; 0x28
 8009144:	e00d      	b.n	8009162 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800914c:	d002      	beq.n	8009154 <I2C_Slave_ISR_IT+0x1e6>
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d106      	bne.n	8009162 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8009154:	68f8      	ldr	r0, [r7, #12]
 8009156:	f000 faf6 	bl	8009746 <I2C_ITSlaveSeqCplt>
 800915a:	e002      	b.n	8009162 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800915c:	bf00      	nop
 800915e:	e000      	b.n	8009162 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8009160:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	2200      	movs	r2, #0
 8009166:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800916a:	2300      	movs	r3, #0
}
 800916c:	4618      	mov	r0, r3
 800916e:	3718      	adds	r7, #24
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}

08009174 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b088      	sub	sp, #32
 8009178:	af02      	add	r7, sp, #8
 800917a:	60f8      	str	r0, [r7, #12]
 800917c:	60b9      	str	r1, [r7, #8]
 800917e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009186:	2b01      	cmp	r3, #1
 8009188:	d101      	bne.n	800918e <I2C_Master_ISR_DMA+0x1a>
 800918a:	2302      	movs	r3, #2
 800918c:	e0e1      	b.n	8009352 <I2C_Master_ISR_DMA+0x1de>
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	2201      	movs	r2, #1
 8009192:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	091b      	lsrs	r3, r3, #4
 800919a:	f003 0301 	and.w	r3, r3, #1
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d017      	beq.n	80091d2 <I2C_Master_ISR_DMA+0x5e>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	091b      	lsrs	r3, r3, #4
 80091a6:	f003 0301 	and.w	r3, r3, #1
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d011      	beq.n	80091d2 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	2210      	movs	r2, #16
 80091b4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091ba:	f043 0204 	orr.w	r2, r3, #4
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80091c2:	2120      	movs	r1, #32
 80091c4:	68f8      	ldr	r0, [r7, #12]
 80091c6:	f001 f83d 	bl	800a244 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80091ca:	68f8      	ldr	r0, [r7, #12]
 80091cc:	f000 fe3b 	bl	8009e46 <I2C_Flush_TXDR>
 80091d0:	e0ba      	b.n	8009348 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	09db      	lsrs	r3, r3, #7
 80091d6:	f003 0301 	and.w	r3, r3, #1
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d072      	beq.n	80092c4 <I2C_Master_ISR_DMA+0x150>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	099b      	lsrs	r3, r3, #6
 80091e2:	f003 0301 	and.w	r3, r3, #1
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d06c      	beq.n	80092c4 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	681a      	ldr	r2, [r3, #0]
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091f8:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091fe:	b29b      	uxth	r3, r3
 8009200:	2b00      	cmp	r3, #0
 8009202:	d04e      	beq.n	80092a2 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	685b      	ldr	r3, [r3, #4]
 800920a:	b29b      	uxth	r3, r3
 800920c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009210:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009216:	b29b      	uxth	r3, r3
 8009218:	2bff      	cmp	r3, #255	; 0xff
 800921a:	d906      	bls.n	800922a <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	22ff      	movs	r2, #255	; 0xff
 8009220:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8009222:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009226:	617b      	str	r3, [r7, #20]
 8009228:	e010      	b.n	800924c <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800922e:	b29a      	uxth	r2, r3
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009238:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800923c:	d003      	beq.n	8009246 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009242:	617b      	str	r3, [r7, #20]
 8009244:	e002      	b.n	800924c <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8009246:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800924a:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009250:	b2da      	uxtb	r2, r3
 8009252:	8a79      	ldrh	r1, [r7, #18]
 8009254:	2300      	movs	r3, #0
 8009256:	9300      	str	r3, [sp, #0]
 8009258:	697b      	ldr	r3, [r7, #20]
 800925a:	68f8      	ldr	r0, [r7, #12]
 800925c:	f000 ffc4 	bl	800a1e8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009264:	b29a      	uxth	r2, r3
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800926a:	1ad3      	subs	r3, r2, r3
 800926c:	b29a      	uxth	r2, r3
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009278:	b2db      	uxtb	r3, r3
 800927a:	2b22      	cmp	r3, #34	; 0x22
 800927c:	d108      	bne.n	8009290 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	681a      	ldr	r2, [r3, #0]
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800928c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800928e:	e05b      	b.n	8009348 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	681a      	ldr	r2, [r3, #0]
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800929e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80092a0:	e052      	b.n	8009348 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	685b      	ldr	r3, [r3, #4]
 80092a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80092b0:	d003      	beq.n	80092ba <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80092b2:	68f8      	ldr	r0, [r7, #12]
 80092b4:	f000 fa0a 	bl	80096cc <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80092b8:	e046      	b.n	8009348 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80092ba:	2140      	movs	r1, #64	; 0x40
 80092bc:	68f8      	ldr	r0, [r7, #12]
 80092be:	f000 fccb 	bl	8009c58 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80092c2:	e041      	b.n	8009348 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	099b      	lsrs	r3, r3, #6
 80092c8:	f003 0301 	and.w	r3, r3, #1
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d029      	beq.n	8009324 <I2C_Master_ISR_DMA+0x1b0>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	099b      	lsrs	r3, r3, #6
 80092d4:	f003 0301 	and.w	r3, r3, #1
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d023      	beq.n	8009324 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092e0:	b29b      	uxth	r3, r3
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d119      	bne.n	800931a <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	685b      	ldr	r3, [r3, #4]
 80092ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80092f4:	d027      	beq.n	8009346 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092fa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80092fe:	d108      	bne.n	8009312 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	685a      	ldr	r2, [r3, #4]
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800930e:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8009310:	e019      	b.n	8009346 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8009312:	68f8      	ldr	r0, [r7, #12]
 8009314:	f000 f9da 	bl	80096cc <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8009318:	e015      	b.n	8009346 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800931a:	2140      	movs	r1, #64	; 0x40
 800931c:	68f8      	ldr	r0, [r7, #12]
 800931e:	f000 fc9b 	bl	8009c58 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8009322:	e010      	b.n	8009346 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	095b      	lsrs	r3, r3, #5
 8009328:	f003 0301 	and.w	r3, r3, #1
 800932c:	2b00      	cmp	r3, #0
 800932e:	d00b      	beq.n	8009348 <I2C_Master_ISR_DMA+0x1d4>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	095b      	lsrs	r3, r3, #5
 8009334:	f003 0301 	and.w	r3, r3, #1
 8009338:	2b00      	cmp	r3, #0
 800933a:	d005      	beq.n	8009348 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800933c:	68b9      	ldr	r1, [r7, #8]
 800933e:	68f8      	ldr	r0, [r7, #12]
 8009340:	f000 fa60 	bl	8009804 <I2C_ITMasterCplt>
 8009344:	e000      	b.n	8009348 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8009346:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	2200      	movs	r2, #0
 800934c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009350:	2300      	movs	r3, #0
}
 8009352:	4618      	mov	r0, r3
 8009354:	3718      	adds	r7, #24
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}

0800935a <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800935a:	b580      	push	{r7, lr}
 800935c:	b088      	sub	sp, #32
 800935e:	af00      	add	r7, sp, #0
 8009360:	60f8      	str	r0, [r7, #12]
 8009362:	60b9      	str	r1, [r7, #8]
 8009364:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800936a:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800936c:	2300      	movs	r3, #0
 800936e:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009376:	2b01      	cmp	r3, #1
 8009378:	d101      	bne.n	800937e <I2C_Slave_ISR_DMA+0x24>
 800937a:	2302      	movs	r3, #2
 800937c:	e0c9      	b.n	8009512 <I2C_Slave_ISR_DMA+0x1b8>
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2201      	movs	r2, #1
 8009382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	095b      	lsrs	r3, r3, #5
 800938a:	f003 0301 	and.w	r3, r3, #1
 800938e:	2b00      	cmp	r3, #0
 8009390:	d009      	beq.n	80093a6 <I2C_Slave_ISR_DMA+0x4c>
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	095b      	lsrs	r3, r3, #5
 8009396:	f003 0301 	and.w	r3, r3, #1
 800939a:	2b00      	cmp	r3, #0
 800939c:	d003      	beq.n	80093a6 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800939e:	68b9      	ldr	r1, [r7, #8]
 80093a0:	68f8      	ldr	r0, [r7, #12]
 80093a2:	f000 faf9 	bl	8009998 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	091b      	lsrs	r3, r3, #4
 80093aa:	f003 0301 	and.w	r3, r3, #1
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	f000 809a 	beq.w	80094e8 <I2C_Slave_ISR_DMA+0x18e>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	091b      	lsrs	r3, r3, #4
 80093b8:	f003 0301 	and.w	r3, r3, #1
 80093bc:	2b00      	cmp	r3, #0
 80093be:	f000 8093 	beq.w	80094e8 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	0b9b      	lsrs	r3, r3, #14
 80093c6:	f003 0301 	and.w	r3, r3, #1
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d105      	bne.n	80093da <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	0bdb      	lsrs	r3, r3, #15
 80093d2:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d07f      	beq.n	80094da <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d00d      	beq.n	80093fe <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	0bdb      	lsrs	r3, r3, #15
 80093e6:	f003 0301 	and.w	r3, r3, #1
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d007      	beq.n	80093fe <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	685b      	ldr	r3, [r3, #4]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d101      	bne.n	80093fe <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 80093fa:	2301      	movs	r3, #1
 80093fc:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009402:	2b00      	cmp	r3, #0
 8009404:	d00d      	beq.n	8009422 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	0b9b      	lsrs	r3, r3, #14
 800940a:	f003 0301 	and.w	r3, r3, #1
 800940e:	2b00      	cmp	r3, #0
 8009410:	d007      	beq.n	8009422 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	685b      	ldr	r3, [r3, #4]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d101      	bne.n	8009422 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 800941e:	2301      	movs	r3, #1
 8009420:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8009422:	69fb      	ldr	r3, [r7, #28]
 8009424:	2b01      	cmp	r3, #1
 8009426:	d128      	bne.n	800947a <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800942e:	b2db      	uxtb	r3, r3
 8009430:	2b28      	cmp	r3, #40	; 0x28
 8009432:	d108      	bne.n	8009446 <I2C_Slave_ISR_DMA+0xec>
 8009434:	69bb      	ldr	r3, [r7, #24]
 8009436:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800943a:	d104      	bne.n	8009446 <I2C_Slave_ISR_DMA+0xec>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800943c:	68b9      	ldr	r1, [r7, #8]
 800943e:	68f8      	ldr	r0, [r7, #12]
 8009440:	f000 fbb4 	bl	8009bac <I2C_ITListenCplt>
 8009444:	e048      	b.n	80094d8 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800944c:	b2db      	uxtb	r3, r3
 800944e:	2b29      	cmp	r3, #41	; 0x29
 8009450:	d10e      	bne.n	8009470 <I2C_Slave_ISR_DMA+0x116>
 8009452:	69bb      	ldr	r3, [r7, #24]
 8009454:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009458:	d00a      	beq.n	8009470 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	2210      	movs	r2, #16
 8009460:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8009462:	68f8      	ldr	r0, [r7, #12]
 8009464:	f000 fcef 	bl	8009e46 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8009468:	68f8      	ldr	r0, [r7, #12]
 800946a:	f000 f96c 	bl	8009746 <I2C_ITSlaveSeqCplt>
 800946e:	e033      	b.n	80094d8 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	2210      	movs	r2, #16
 8009476:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8009478:	e034      	b.n	80094e4 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	2210      	movs	r2, #16
 8009480:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009486:	f043 0204 	orr.w	r2, r3, #4
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009494:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8009496:	69bb      	ldr	r3, [r7, #24]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d003      	beq.n	80094a4 <I2C_Slave_ISR_DMA+0x14a>
 800949c:	69bb      	ldr	r3, [r7, #24]
 800949e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80094a2:	d11f      	bne.n	80094e4 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80094a4:	7dfb      	ldrb	r3, [r7, #23]
 80094a6:	2b21      	cmp	r3, #33	; 0x21
 80094a8:	d002      	beq.n	80094b0 <I2C_Slave_ISR_DMA+0x156>
 80094aa:	7dfb      	ldrb	r3, [r7, #23]
 80094ac:	2b29      	cmp	r3, #41	; 0x29
 80094ae:	d103      	bne.n	80094b8 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	2221      	movs	r2, #33	; 0x21
 80094b4:	631a      	str	r2, [r3, #48]	; 0x30
 80094b6:	e008      	b.n	80094ca <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80094b8:	7dfb      	ldrb	r3, [r7, #23]
 80094ba:	2b22      	cmp	r3, #34	; 0x22
 80094bc:	d002      	beq.n	80094c4 <I2C_Slave_ISR_DMA+0x16a>
 80094be:	7dfb      	ldrb	r3, [r7, #23]
 80094c0:	2b2a      	cmp	r3, #42	; 0x2a
 80094c2:	d102      	bne.n	80094ca <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	2222      	movs	r2, #34	; 0x22
 80094c8:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094ce:	4619      	mov	r1, r3
 80094d0:	68f8      	ldr	r0, [r7, #12]
 80094d2:	f000 fbc1 	bl	8009c58 <I2C_ITError>
      if (treatdmanack == 1U)
 80094d6:	e005      	b.n	80094e4 <I2C_Slave_ISR_DMA+0x18a>
 80094d8:	e004      	b.n	80094e4 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	2210      	movs	r2, #16
 80094e0:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80094e2:	e011      	b.n	8009508 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 80094e4:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80094e6:	e00f      	b.n	8009508 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	08db      	lsrs	r3, r3, #3
 80094ec:	f003 0301 	and.w	r3, r3, #1
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d009      	beq.n	8009508 <I2C_Slave_ISR_DMA+0x1ae>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	08db      	lsrs	r3, r3, #3
 80094f8:	f003 0301 	and.w	r3, r3, #1
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d003      	beq.n	8009508 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8009500:	68b9      	ldr	r1, [r7, #8]
 8009502:	68f8      	ldr	r0, [r7, #12]
 8009504:	f000 f85e 	bl	80095c4 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	2200      	movs	r2, #0
 800950c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009510:	2300      	movs	r3, #0
}
 8009512:	4618      	mov	r0, r3
 8009514:	3720      	adds	r7, #32
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}
	...

0800951c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b086      	sub	sp, #24
 8009520:	af02      	add	r7, sp, #8
 8009522:	60f8      	str	r0, [r7, #12]
 8009524:	4608      	mov	r0, r1
 8009526:	4611      	mov	r1, r2
 8009528:	461a      	mov	r2, r3
 800952a:	4603      	mov	r3, r0
 800952c:	817b      	strh	r3, [r7, #10]
 800952e:	460b      	mov	r3, r1
 8009530:	813b      	strh	r3, [r7, #8]
 8009532:	4613      	mov	r3, r2
 8009534:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009536:	88fb      	ldrh	r3, [r7, #6]
 8009538:	b2da      	uxtb	r2, r3
 800953a:	8979      	ldrh	r1, [r7, #10]
 800953c:	4b20      	ldr	r3, [pc, #128]	; (80095c0 <I2C_RequestMemoryWrite+0xa4>)
 800953e:	9300      	str	r3, [sp, #0]
 8009540:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009544:	68f8      	ldr	r0, [r7, #12]
 8009546:	f000 fe4f 	bl	800a1e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800954a:	69fa      	ldr	r2, [r7, #28]
 800954c:	69b9      	ldr	r1, [r7, #24]
 800954e:	68f8      	ldr	r0, [r7, #12]
 8009550:	f000 fcfb 	bl	8009f4a <I2C_WaitOnTXISFlagUntilTimeout>
 8009554:	4603      	mov	r3, r0
 8009556:	2b00      	cmp	r3, #0
 8009558:	d001      	beq.n	800955e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800955a:	2301      	movs	r3, #1
 800955c:	e02c      	b.n	80095b8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800955e:	88fb      	ldrh	r3, [r7, #6]
 8009560:	2b01      	cmp	r3, #1
 8009562:	d105      	bne.n	8009570 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009564:	893b      	ldrh	r3, [r7, #8]
 8009566:	b2da      	uxtb	r2, r3
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	629a      	str	r2, [r3, #40]	; 0x28
 800956e:	e015      	b.n	800959c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009570:	893b      	ldrh	r3, [r7, #8]
 8009572:	0a1b      	lsrs	r3, r3, #8
 8009574:	b29b      	uxth	r3, r3
 8009576:	b2da      	uxtb	r2, r3
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800957e:	69fa      	ldr	r2, [r7, #28]
 8009580:	69b9      	ldr	r1, [r7, #24]
 8009582:	68f8      	ldr	r0, [r7, #12]
 8009584:	f000 fce1 	bl	8009f4a <I2C_WaitOnTXISFlagUntilTimeout>
 8009588:	4603      	mov	r3, r0
 800958a:	2b00      	cmp	r3, #0
 800958c:	d001      	beq.n	8009592 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800958e:	2301      	movs	r3, #1
 8009590:	e012      	b.n	80095b8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009592:	893b      	ldrh	r3, [r7, #8]
 8009594:	b2da      	uxtb	r2, r3
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800959c:	69fb      	ldr	r3, [r7, #28]
 800959e:	9300      	str	r3, [sp, #0]
 80095a0:	69bb      	ldr	r3, [r7, #24]
 80095a2:	2200      	movs	r2, #0
 80095a4:	2180      	movs	r1, #128	; 0x80
 80095a6:	68f8      	ldr	r0, [r7, #12]
 80095a8:	f000 fc8f 	bl	8009eca <I2C_WaitOnFlagUntilTimeout>
 80095ac:	4603      	mov	r3, r0
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d001      	beq.n	80095b6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80095b2:	2301      	movs	r3, #1
 80095b4:	e000      	b.n	80095b8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80095b6:	2300      	movs	r3, #0
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	3710      	adds	r7, #16
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}
 80095c0:	80002000 	.word	0x80002000

080095c4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b084      	sub	sp, #16
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80095d4:	b2db      	uxtb	r3, r3
 80095d6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80095da:	2b28      	cmp	r3, #40	; 0x28
 80095dc:	d16a      	bne.n	80096b4 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	699b      	ldr	r3, [r3, #24]
 80095e4:	0c1b      	lsrs	r3, r3, #16
 80095e6:	b2db      	uxtb	r3, r3
 80095e8:	f003 0301 	and.w	r3, r3, #1
 80095ec:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	699b      	ldr	r3, [r3, #24]
 80095f4:	0c1b      	lsrs	r3, r3, #16
 80095f6:	b29b      	uxth	r3, r3
 80095f8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80095fc:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	689b      	ldr	r3, [r3, #8]
 8009604:	b29b      	uxth	r3, r3
 8009606:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800960a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	68db      	ldr	r3, [r3, #12]
 8009612:	b29b      	uxth	r3, r3
 8009614:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8009618:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	68db      	ldr	r3, [r3, #12]
 800961e:	2b02      	cmp	r3, #2
 8009620:	d138      	bne.n	8009694 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8009622:	897b      	ldrh	r3, [r7, #10]
 8009624:	09db      	lsrs	r3, r3, #7
 8009626:	b29a      	uxth	r2, r3
 8009628:	89bb      	ldrh	r3, [r7, #12]
 800962a:	4053      	eors	r3, r2
 800962c:	b29b      	uxth	r3, r3
 800962e:	f003 0306 	and.w	r3, r3, #6
 8009632:	2b00      	cmp	r3, #0
 8009634:	d11c      	bne.n	8009670 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8009636:	897b      	ldrh	r3, [r7, #10]
 8009638:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800963e:	1c5a      	adds	r2, r3, #1
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009648:	2b02      	cmp	r3, #2
 800964a:	d13b      	bne.n	80096c4 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2200      	movs	r2, #0
 8009650:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	2208      	movs	r2, #8
 8009658:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2200      	movs	r2, #0
 800965e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8009662:	89ba      	ldrh	r2, [r7, #12]
 8009664:	7bfb      	ldrb	r3, [r7, #15]
 8009666:	4619      	mov	r1, r3
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f7ff fb17 	bl	8008c9c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800966e:	e029      	b.n	80096c4 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8009670:	893b      	ldrh	r3, [r7, #8]
 8009672:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8009674:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f000 fe47 	bl	800a30c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2200      	movs	r2, #0
 8009682:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8009686:	89ba      	ldrh	r2, [r7, #12]
 8009688:	7bfb      	ldrb	r3, [r7, #15]
 800968a:	4619      	mov	r1, r3
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f7ff fb05 	bl	8008c9c <HAL_I2C_AddrCallback>
}
 8009692:	e017      	b.n	80096c4 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8009694:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f000 fe37 	bl	800a30c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2200      	movs	r2, #0
 80096a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80096a6:	89ba      	ldrh	r2, [r7, #12]
 80096a8:	7bfb      	ldrb	r3, [r7, #15]
 80096aa:	4619      	mov	r1, r3
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f7ff faf5 	bl	8008c9c <HAL_I2C_AddrCallback>
}
 80096b2:	e007      	b.n	80096c4 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	2208      	movs	r2, #8
 80096ba:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2200      	movs	r2, #0
 80096c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80096c4:	bf00      	nop
 80096c6:	3710      	adds	r7, #16
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}

080096cc <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b082      	sub	sp, #8
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2200      	movs	r2, #0
 80096d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80096e2:	b2db      	uxtb	r3, r3
 80096e4:	2b21      	cmp	r3, #33	; 0x21
 80096e6:	d115      	bne.n	8009714 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2220      	movs	r2, #32
 80096ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2211      	movs	r2, #17
 80096f4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2200      	movs	r2, #0
 80096fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80096fc:	2101      	movs	r1, #1
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f000 fe04 	bl	800a30c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2200      	movs	r2, #0
 8009708:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f7f9 ff09 	bl	8003524 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009712:	e014      	b.n	800973e <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2220      	movs	r2, #32
 8009718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2212      	movs	r2, #18
 8009720:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2200      	movs	r2, #0
 8009726:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8009728:	2102      	movs	r1, #2
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f000 fdee 	bl	800a30c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2200      	movs	r2, #0
 8009734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f7f9 ff09 	bl	8003550 <HAL_I2C_MasterRxCpltCallback>
}
 800973e:	bf00      	nop
 8009740:	3708      	adds	r7, #8
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}

08009746 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8009746:	b580      	push	{r7, lr}
 8009748:	b084      	sub	sp, #16
 800974a:	af00      	add	r7, sp, #0
 800974c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2200      	movs	r2, #0
 800975a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	0b9b      	lsrs	r3, r3, #14
 8009762:	f003 0301 	and.w	r3, r3, #1
 8009766:	2b00      	cmp	r3, #0
 8009768:	d008      	beq.n	800977c <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	681a      	ldr	r2, [r3, #0]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009778:	601a      	str	r2, [r3, #0]
 800977a:	e00d      	b.n	8009798 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	0bdb      	lsrs	r3, r3, #15
 8009780:	f003 0301 	and.w	r3, r3, #1
 8009784:	2b00      	cmp	r3, #0
 8009786:	d007      	beq.n	8009798 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	681a      	ldr	r2, [r3, #0]
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009796:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800979e:	b2db      	uxtb	r3, r3
 80097a0:	2b29      	cmp	r3, #41	; 0x29
 80097a2:	d112      	bne.n	80097ca <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2228      	movs	r2, #40	; 0x28
 80097a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2221      	movs	r2, #33	; 0x21
 80097b0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80097b2:	2101      	movs	r1, #1
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f000 fda9 	bl	800a30c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2200      	movs	r2, #0
 80097be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f7ff fa56 	bl	8008c74 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80097c8:	e017      	b.n	80097fa <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80097d0:	b2db      	uxtb	r3, r3
 80097d2:	2b2a      	cmp	r3, #42	; 0x2a
 80097d4:	d111      	bne.n	80097fa <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2228      	movs	r2, #40	; 0x28
 80097da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2222      	movs	r2, #34	; 0x22
 80097e2:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80097e4:	2102      	movs	r1, #2
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f000 fd90 	bl	800a30c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2200      	movs	r2, #0
 80097f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f7ff fa47 	bl	8008c88 <HAL_I2C_SlaveRxCpltCallback>
}
 80097fa:	bf00      	nop
 80097fc:	3710      	adds	r7, #16
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}
	...

08009804 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b086      	sub	sp, #24
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
 800980c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	2220      	movs	r2, #32
 8009818:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009820:	b2db      	uxtb	r3, r3
 8009822:	2b21      	cmp	r3, #33	; 0x21
 8009824:	d107      	bne.n	8009836 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009826:	2101      	movs	r1, #1
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f000 fd6f 	bl	800a30c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2211      	movs	r2, #17
 8009832:	631a      	str	r2, [r3, #48]	; 0x30
 8009834:	e00c      	b.n	8009850 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800983c:	b2db      	uxtb	r3, r3
 800983e:	2b22      	cmp	r3, #34	; 0x22
 8009840:	d106      	bne.n	8009850 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8009842:	2102      	movs	r1, #2
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f000 fd61 	bl	800a30c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2212      	movs	r2, #18
 800984e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	6859      	ldr	r1, [r3, #4]
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681a      	ldr	r2, [r3, #0]
 800985a:	4b4d      	ldr	r3, [pc, #308]	; (8009990 <I2C_ITMasterCplt+0x18c>)
 800985c:	400b      	ands	r3, r1
 800985e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2200      	movs	r2, #0
 8009864:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	4a4a      	ldr	r2, [pc, #296]	; (8009994 <I2C_ITMasterCplt+0x190>)
 800986a:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800986c:	697b      	ldr	r3, [r7, #20]
 800986e:	091b      	lsrs	r3, r3, #4
 8009870:	f003 0301 	and.w	r3, r3, #1
 8009874:	2b00      	cmp	r3, #0
 8009876:	d009      	beq.n	800988c <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	2210      	movs	r2, #16
 800987e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009884:	f043 0204 	orr.w	r2, r3, #4
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009892:	b2db      	uxtb	r3, r3
 8009894:	2b60      	cmp	r3, #96	; 0x60
 8009896:	d10b      	bne.n	80098b0 <I2C_ITMasterCplt+0xac>
 8009898:	697b      	ldr	r3, [r7, #20]
 800989a:	089b      	lsrs	r3, r3, #2
 800989c:	f003 0301 	and.w	r3, r3, #1
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d005      	beq.n	80098b0 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098aa:	b2db      	uxtb	r3, r3
 80098ac:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80098ae:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f000 fac8 	bl	8009e46 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098ba:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80098c2:	b2db      	uxtb	r3, r3
 80098c4:	2b60      	cmp	r3, #96	; 0x60
 80098c6:	d002      	beq.n	80098ce <I2C_ITMasterCplt+0xca>
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d006      	beq.n	80098dc <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098d2:	4619      	mov	r1, r3
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f000 f9bf 	bl	8009c58 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80098da:	e054      	b.n	8009986 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80098e2:	b2db      	uxtb	r3, r3
 80098e4:	2b21      	cmp	r3, #33	; 0x21
 80098e6:	d124      	bne.n	8009932 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2220      	movs	r2, #32
 80098ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2200      	movs	r2, #0
 80098f4:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80098fc:	b2db      	uxtb	r3, r3
 80098fe:	2b40      	cmp	r3, #64	; 0x40
 8009900:	d10b      	bne.n	800991a <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2200      	movs	r2, #0
 8009906:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2200      	movs	r2, #0
 800990e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f7ff f9da 	bl	8008ccc <HAL_I2C_MemTxCpltCallback>
}
 8009918:	e035      	b.n	8009986 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2200      	movs	r2, #0
 800991e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2200      	movs	r2, #0
 8009926:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f7f9 fdfa 	bl	8003524 <HAL_I2C_MasterTxCpltCallback>
}
 8009930:	e029      	b.n	8009986 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009938:	b2db      	uxtb	r3, r3
 800993a:	2b22      	cmp	r3, #34	; 0x22
 800993c:	d123      	bne.n	8009986 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2220      	movs	r2, #32
 8009942:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2200      	movs	r2, #0
 800994a:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009952:	b2db      	uxtb	r3, r3
 8009954:	2b40      	cmp	r3, #64	; 0x40
 8009956:	d10b      	bne.n	8009970 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2200      	movs	r2, #0
 800995c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2200      	movs	r2, #0
 8009964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f7ff f9b9 	bl	8008ce0 <HAL_I2C_MemRxCpltCallback>
}
 800996e:	e00a      	b.n	8009986 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2200      	movs	r2, #0
 8009974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2200      	movs	r2, #0
 800997c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f7f9 fde5 	bl	8003550 <HAL_I2C_MasterRxCpltCallback>
}
 8009986:	bf00      	nop
 8009988:	3718      	adds	r7, #24
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}
 800998e:	bf00      	nop
 8009990:	fe00e800 	.word	0xfe00e800
 8009994:	ffff0000 	.word	0xffff0000

08009998 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b086      	sub	sp, #24
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
 80099a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80099b4:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	2220      	movs	r2, #32
 80099bc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80099be:	7bfb      	ldrb	r3, [r7, #15]
 80099c0:	2b21      	cmp	r3, #33	; 0x21
 80099c2:	d002      	beq.n	80099ca <I2C_ITSlaveCplt+0x32>
 80099c4:	7bfb      	ldrb	r3, [r7, #15]
 80099c6:	2b29      	cmp	r3, #41	; 0x29
 80099c8:	d108      	bne.n	80099dc <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80099ca:	f248 0101 	movw	r1, #32769	; 0x8001
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f000 fc9c 	bl	800a30c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2221      	movs	r2, #33	; 0x21
 80099d8:	631a      	str	r2, [r3, #48]	; 0x30
 80099da:	e00d      	b.n	80099f8 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80099dc:	7bfb      	ldrb	r3, [r7, #15]
 80099de:	2b22      	cmp	r3, #34	; 0x22
 80099e0:	d002      	beq.n	80099e8 <I2C_ITSlaveCplt+0x50>
 80099e2:	7bfb      	ldrb	r3, [r7, #15]
 80099e4:	2b2a      	cmp	r3, #42	; 0x2a
 80099e6:	d107      	bne.n	80099f8 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80099e8:	f248 0102 	movw	r1, #32770	; 0x8002
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f000 fc8d 	bl	800a30c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2222      	movs	r2, #34	; 0x22
 80099f6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	685a      	ldr	r2, [r3, #4]
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009a06:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	6859      	ldr	r1, [r3, #4]
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681a      	ldr	r2, [r3, #0]
 8009a12:	4b64      	ldr	r3, [pc, #400]	; (8009ba4 <I2C_ITSlaveCplt+0x20c>)
 8009a14:	400b      	ands	r3, r1
 8009a16:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f000 fa14 	bl	8009e46 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8009a1e:	693b      	ldr	r3, [r7, #16]
 8009a20:	0b9b      	lsrs	r3, r3, #14
 8009a22:	f003 0301 	and.w	r3, r3, #1
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d013      	beq.n	8009a52 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	681a      	ldr	r2, [r3, #0]
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009a38:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d020      	beq.n	8009a84 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	685b      	ldr	r3, [r3, #4]
 8009a4a:	b29a      	uxth	r2, r3
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009a50:	e018      	b.n	8009a84 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8009a52:	693b      	ldr	r3, [r7, #16]
 8009a54:	0bdb      	lsrs	r3, r3, #15
 8009a56:	f003 0301 	and.w	r3, r3, #1
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d012      	beq.n	8009a84 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	681a      	ldr	r2, [r3, #0]
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009a6c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d006      	beq.n	8009a84 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	685b      	ldr	r3, [r3, #4]
 8009a7e:	b29a      	uxth	r2, r3
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	089b      	lsrs	r3, r3, #2
 8009a88:	f003 0301 	and.w	r3, r3, #1
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d020      	beq.n	8009ad2 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8009a90:	697b      	ldr	r3, [r7, #20]
 8009a92:	f023 0304 	bic.w	r3, r3, #4
 8009a96:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aa2:	b2d2      	uxtb	r2, r2
 8009aa4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aaa:	1c5a      	adds	r2, r3, #1
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d00c      	beq.n	8009ad2 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009abc:	3b01      	subs	r3, #1
 8009abe:	b29a      	uxth	r2, r3
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ac8:	b29b      	uxth	r3, r3
 8009aca:	3b01      	subs	r3, #1
 8009acc:	b29a      	uxth	r2, r3
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ad6:	b29b      	uxth	r3, r3
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d005      	beq.n	8009ae8 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ae0:	f043 0204 	orr.w	r2, r3, #4
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2200      	movs	r2, #0
 8009aec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2200      	movs	r2, #0
 8009af4:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d010      	beq.n	8009b20 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b02:	4619      	mov	r1, r3
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f000 f8a7 	bl	8009c58 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b10:	b2db      	uxtb	r3, r3
 8009b12:	2b28      	cmp	r3, #40	; 0x28
 8009b14:	d141      	bne.n	8009b9a <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8009b16:	6979      	ldr	r1, [r7, #20]
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f000 f847 	bl	8009bac <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009b1e:	e03c      	b.n	8009b9a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009b28:	d014      	beq.n	8009b54 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8009b2a:	6878      	ldr	r0, [r7, #4]
 8009b2c:	f7ff fe0b 	bl	8009746 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	4a1d      	ldr	r2, [pc, #116]	; (8009ba8 <I2C_ITSlaveCplt+0x210>)
 8009b34:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2220      	movs	r2, #32
 8009b3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2200      	movs	r2, #0
 8009b42:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2200      	movs	r2, #0
 8009b48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f7ff f8b3 	bl	8008cb8 <HAL_I2C_ListenCpltCallback>
}
 8009b52:	e022      	b.n	8009b9a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b5a:	b2db      	uxtb	r3, r3
 8009b5c:	2b22      	cmp	r3, #34	; 0x22
 8009b5e:	d10e      	bne.n	8009b7e <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2220      	movs	r2, #32
 8009b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2200      	movs	r2, #0
 8009b72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f7ff f886 	bl	8008c88 <HAL_I2C_SlaveRxCpltCallback>
}
 8009b7c:	e00d      	b.n	8009b9a <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2220      	movs	r2, #32
 8009b82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2200      	movs	r2, #0
 8009b8a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2200      	movs	r2, #0
 8009b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	f7ff f86d 	bl	8008c74 <HAL_I2C_SlaveTxCpltCallback>
}
 8009b9a:	bf00      	nop
 8009b9c:	3718      	adds	r7, #24
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}
 8009ba2:	bf00      	nop
 8009ba4:	fe00e800 	.word	0xfe00e800
 8009ba8:	ffff0000 	.word	0xffff0000

08009bac <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b082      	sub	sp, #8
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
 8009bb4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	4a26      	ldr	r2, [pc, #152]	; (8009c54 <I2C_ITListenCplt+0xa8>)
 8009bba:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2220      	movs	r2, #32
 8009bc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2200      	movs	r2, #0
 8009bce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	089b      	lsrs	r3, r3, #2
 8009bdc:	f003 0301 	and.w	r3, r3, #1
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d022      	beq.n	8009c2a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bee:	b2d2      	uxtb	r2, r2
 8009bf0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bf6:	1c5a      	adds	r2, r3, #1
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d012      	beq.n	8009c2a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c08:	3b01      	subs	r3, #1
 8009c0a:	b29a      	uxth	r2, r3
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c14:	b29b      	uxth	r3, r3
 8009c16:	3b01      	subs	r3, #1
 8009c18:	b29a      	uxth	r2, r3
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c22:	f043 0204 	orr.w	r2, r3, #4
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009c2a:	f248 0103 	movw	r1, #32771	; 0x8003
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f000 fb6c 	bl	800a30c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	2210      	movs	r2, #16
 8009c3a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f7ff f837 	bl	8008cb8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8009c4a:	bf00      	nop
 8009c4c:	3708      	adds	r7, #8
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}
 8009c52:	bf00      	nop
 8009c54:	ffff0000 	.word	0xffff0000

08009c58 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b084      	sub	sp, #16
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	4a5d      	ldr	r2, [pc, #372]	; (8009dec <I2C_ITError+0x194>)
 8009c76:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	431a      	orrs	r2, r3
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8009c8a:	7bfb      	ldrb	r3, [r7, #15]
 8009c8c:	2b28      	cmp	r3, #40	; 0x28
 8009c8e:	d005      	beq.n	8009c9c <I2C_ITError+0x44>
 8009c90:	7bfb      	ldrb	r3, [r7, #15]
 8009c92:	2b29      	cmp	r3, #41	; 0x29
 8009c94:	d002      	beq.n	8009c9c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8009c96:	7bfb      	ldrb	r3, [r7, #15]
 8009c98:	2b2a      	cmp	r3, #42	; 0x2a
 8009c9a:	d10b      	bne.n	8009cb4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009c9c:	2103      	movs	r1, #3
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f000 fb34 	bl	800a30c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2228      	movs	r2, #40	; 0x28
 8009ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	4a50      	ldr	r2, [pc, #320]	; (8009df0 <I2C_ITError+0x198>)
 8009cb0:	635a      	str	r2, [r3, #52]	; 0x34
 8009cb2:	e011      	b.n	8009cd8 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009cb4:	f248 0103 	movw	r1, #32771	; 0x8003
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	f000 fb27 	bl	800a30c <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009cc4:	b2db      	uxtb	r3, r3
 8009cc6:	2b60      	cmp	r3, #96	; 0x60
 8009cc8:	d003      	beq.n	8009cd2 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2220      	movs	r2, #32
 8009cce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cdc:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d039      	beq.n	8009d5a <I2C_ITError+0x102>
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	2b11      	cmp	r3, #17
 8009cea:	d002      	beq.n	8009cf2 <I2C_ITError+0x9a>
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	2b21      	cmp	r3, #33	; 0x21
 8009cf0:	d133      	bne.n	8009d5a <I2C_ITError+0x102>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009cfc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009d00:	d107      	bne.n	8009d12 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	681a      	ldr	r2, [r3, #0]
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009d10:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d16:	4618      	mov	r0, r3
 8009d18:	f7fe f908 	bl	8007f2c <HAL_DMA_GetState>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	2b01      	cmp	r3, #1
 8009d20:	d017      	beq.n	8009d52 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d26:	4a33      	ldr	r2, [pc, #204]	; (8009df4 <I2C_ITError+0x19c>)
 8009d28:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d36:	4618      	mov	r0, r3
 8009d38:	f7fd ffea 	bl	8007d10 <HAL_DMA_Abort_IT>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d04d      	beq.n	8009dde <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d48:	687a      	ldr	r2, [r7, #4]
 8009d4a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009d4c:	4610      	mov	r0, r2
 8009d4e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009d50:	e045      	b.n	8009dde <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f000 f850 	bl	8009df8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009d58:	e041      	b.n	8009dde <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d039      	beq.n	8009dd6 <I2C_ITError+0x17e>
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	2b12      	cmp	r3, #18
 8009d66:	d002      	beq.n	8009d6e <I2C_ITError+0x116>
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	2b22      	cmp	r3, #34	; 0x22
 8009d6c:	d133      	bne.n	8009dd6 <I2C_ITError+0x17e>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009d78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d7c:	d107      	bne.n	8009d8e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	681a      	ldr	r2, [r3, #0]
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009d8c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d92:	4618      	mov	r0, r3
 8009d94:	f7fe f8ca 	bl	8007f2c <HAL_DMA_GetState>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	2b01      	cmp	r3, #1
 8009d9c:	d017      	beq.n	8009dce <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009da2:	4a14      	ldr	r2, [pc, #80]	; (8009df4 <I2C_ITError+0x19c>)
 8009da4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2200      	movs	r2, #0
 8009daa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009db2:	4618      	mov	r0, r3
 8009db4:	f7fd ffac 	bl	8007d10 <HAL_DMA_Abort_IT>
 8009db8:	4603      	mov	r3, r0
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d011      	beq.n	8009de2 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dc4:	687a      	ldr	r2, [r7, #4]
 8009dc6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009dc8:	4610      	mov	r0, r2
 8009dca:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009dcc:	e009      	b.n	8009de2 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f000 f812 	bl	8009df8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009dd4:	e005      	b.n	8009de2 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f000 f80e 	bl	8009df8 <I2C_TreatErrorCallback>
  }
}
 8009ddc:	e002      	b.n	8009de4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009dde:	bf00      	nop
 8009de0:	e000      	b.n	8009de4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009de2:	bf00      	nop
}
 8009de4:	bf00      	nop
 8009de6:	3710      	adds	r7, #16
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}
 8009dec:	ffff0000 	.word	0xffff0000
 8009df0:	08008f6f 	.word	0x08008f6f
 8009df4:	08009e8f 	.word	0x08009e8f

08009df8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b082      	sub	sp, #8
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009e06:	b2db      	uxtb	r3, r3
 8009e08:	2b60      	cmp	r3, #96	; 0x60
 8009e0a:	d10e      	bne.n	8009e2a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2220      	movs	r2, #32
 8009e10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2200      	movs	r2, #0
 8009e18:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f7fe ff70 	bl	8008d08 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009e28:	e009      	b.n	8009e3e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2200      	movs	r2, #0
 8009e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f7fe ff5b 	bl	8008cf4 <HAL_I2C_ErrorCallback>
}
 8009e3e:	bf00      	nop
 8009e40:	3708      	adds	r7, #8
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}

08009e46 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009e46:	b480      	push	{r7}
 8009e48:	b083      	sub	sp, #12
 8009e4a:	af00      	add	r7, sp, #0
 8009e4c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	699b      	ldr	r3, [r3, #24]
 8009e54:	f003 0302 	and.w	r3, r3, #2
 8009e58:	2b02      	cmp	r3, #2
 8009e5a:	d103      	bne.n	8009e64 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	2200      	movs	r2, #0
 8009e62:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	699b      	ldr	r3, [r3, #24]
 8009e6a:	f003 0301 	and.w	r3, r3, #1
 8009e6e:	2b01      	cmp	r3, #1
 8009e70:	d007      	beq.n	8009e82 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	699a      	ldr	r2, [r3, #24]
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	f042 0201 	orr.w	r2, r2, #1
 8009e80:	619a      	str	r2, [r3, #24]
  }
}
 8009e82:	bf00      	nop
 8009e84:	370c      	adds	r7, #12
 8009e86:	46bd      	mov	sp, r7
 8009e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8c:	4770      	bx	lr

08009e8e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8009e8e:	b580      	push	{r7, lr}
 8009e90:	b084      	sub	sp, #16
 8009e92:	af00      	add	r7, sp, #0
 8009e94:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e9a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d003      	beq.n	8009eac <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d003      	beq.n	8009ebc <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009eb8:	2200      	movs	r2, #0
 8009eba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8009ebc:	68f8      	ldr	r0, [r7, #12]
 8009ebe:	f7ff ff9b 	bl	8009df8 <I2C_TreatErrorCallback>
}
 8009ec2:	bf00      	nop
 8009ec4:	3710      	adds	r7, #16
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}

08009eca <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009eca:	b580      	push	{r7, lr}
 8009ecc:	b084      	sub	sp, #16
 8009ece:	af00      	add	r7, sp, #0
 8009ed0:	60f8      	str	r0, [r7, #12]
 8009ed2:	60b9      	str	r1, [r7, #8]
 8009ed4:	603b      	str	r3, [r7, #0]
 8009ed6:	4613      	mov	r3, r2
 8009ed8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009eda:	e022      	b.n	8009f22 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ee2:	d01e      	beq.n	8009f22 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ee4:	f7fb ff74 	bl	8005dd0 <HAL_GetTick>
 8009ee8:	4602      	mov	r2, r0
 8009eea:	69bb      	ldr	r3, [r7, #24]
 8009eec:	1ad3      	subs	r3, r2, r3
 8009eee:	683a      	ldr	r2, [r7, #0]
 8009ef0:	429a      	cmp	r2, r3
 8009ef2:	d302      	bcc.n	8009efa <I2C_WaitOnFlagUntilTimeout+0x30>
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d113      	bne.n	8009f22 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009efe:	f043 0220 	orr.w	r2, r3, #32
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	2220      	movs	r2, #32
 8009f0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	2200      	movs	r2, #0
 8009f12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8009f1e:	2301      	movs	r3, #1
 8009f20:	e00f      	b.n	8009f42 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	699a      	ldr	r2, [r3, #24]
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	4013      	ands	r3, r2
 8009f2c:	68ba      	ldr	r2, [r7, #8]
 8009f2e:	429a      	cmp	r2, r3
 8009f30:	bf0c      	ite	eq
 8009f32:	2301      	moveq	r3, #1
 8009f34:	2300      	movne	r3, #0
 8009f36:	b2db      	uxtb	r3, r3
 8009f38:	461a      	mov	r2, r3
 8009f3a:	79fb      	ldrb	r3, [r7, #7]
 8009f3c:	429a      	cmp	r2, r3
 8009f3e:	d0cd      	beq.n	8009edc <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009f40:	2300      	movs	r3, #0
}
 8009f42:	4618      	mov	r0, r3
 8009f44:	3710      	adds	r7, #16
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bd80      	pop	{r7, pc}

08009f4a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009f4a:	b580      	push	{r7, lr}
 8009f4c:	b084      	sub	sp, #16
 8009f4e:	af00      	add	r7, sp, #0
 8009f50:	60f8      	str	r0, [r7, #12]
 8009f52:	60b9      	str	r1, [r7, #8]
 8009f54:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009f56:	e02c      	b.n	8009fb2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8009f58:	687a      	ldr	r2, [r7, #4]
 8009f5a:	68b9      	ldr	r1, [r7, #8]
 8009f5c:	68f8      	ldr	r0, [r7, #12]
 8009f5e:	f000 f8dd 	bl	800a11c <I2C_IsAcknowledgeFailed>
 8009f62:	4603      	mov	r3, r0
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d001      	beq.n	8009f6c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009f68:	2301      	movs	r3, #1
 8009f6a:	e02a      	b.n	8009fc2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f72:	d01e      	beq.n	8009fb2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f74:	f7fb ff2c 	bl	8005dd0 <HAL_GetTick>
 8009f78:	4602      	mov	r2, r0
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	1ad3      	subs	r3, r2, r3
 8009f7e:	68ba      	ldr	r2, [r7, #8]
 8009f80:	429a      	cmp	r2, r3
 8009f82:	d302      	bcc.n	8009f8a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d113      	bne.n	8009fb2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f8e:	f043 0220 	orr.w	r2, r3, #32
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	2220      	movs	r2, #32
 8009f9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009fae:	2301      	movs	r3, #1
 8009fb0:	e007      	b.n	8009fc2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	699b      	ldr	r3, [r3, #24]
 8009fb8:	f003 0302 	and.w	r3, r3, #2
 8009fbc:	2b02      	cmp	r3, #2
 8009fbe:	d1cb      	bne.n	8009f58 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009fc0:	2300      	movs	r3, #0
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	3710      	adds	r7, #16
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}

08009fca <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009fca:	b580      	push	{r7, lr}
 8009fcc:	b084      	sub	sp, #16
 8009fce:	af00      	add	r7, sp, #0
 8009fd0:	60f8      	str	r0, [r7, #12]
 8009fd2:	60b9      	str	r1, [r7, #8]
 8009fd4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009fd6:	e028      	b.n	800a02a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8009fd8:	687a      	ldr	r2, [r7, #4]
 8009fda:	68b9      	ldr	r1, [r7, #8]
 8009fdc:	68f8      	ldr	r0, [r7, #12]
 8009fde:	f000 f89d 	bl	800a11c <I2C_IsAcknowledgeFailed>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d001      	beq.n	8009fec <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009fe8:	2301      	movs	r3, #1
 8009fea:	e026      	b.n	800a03a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009fec:	f7fb fef0 	bl	8005dd0 <HAL_GetTick>
 8009ff0:	4602      	mov	r2, r0
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	1ad3      	subs	r3, r2, r3
 8009ff6:	68ba      	ldr	r2, [r7, #8]
 8009ff8:	429a      	cmp	r2, r3
 8009ffa:	d302      	bcc.n	800a002 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d113      	bne.n	800a02a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a006:	f043 0220 	orr.w	r2, r3, #32
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	2220      	movs	r2, #32
 800a012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	2200      	movs	r2, #0
 800a01a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	2200      	movs	r2, #0
 800a022:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a026:	2301      	movs	r3, #1
 800a028:	e007      	b.n	800a03a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	699b      	ldr	r3, [r3, #24]
 800a030:	f003 0320 	and.w	r3, r3, #32
 800a034:	2b20      	cmp	r3, #32
 800a036:	d1cf      	bne.n	8009fd8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a038:	2300      	movs	r3, #0
}
 800a03a:	4618      	mov	r0, r3
 800a03c:	3710      	adds	r7, #16
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}
	...

0800a044 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b084      	sub	sp, #16
 800a048:	af00      	add	r7, sp, #0
 800a04a:	60f8      	str	r0, [r7, #12]
 800a04c:	60b9      	str	r1, [r7, #8]
 800a04e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a050:	e055      	b.n	800a0fe <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a052:	687a      	ldr	r2, [r7, #4]
 800a054:	68b9      	ldr	r1, [r7, #8]
 800a056:	68f8      	ldr	r0, [r7, #12]
 800a058:	f000 f860 	bl	800a11c <I2C_IsAcknowledgeFailed>
 800a05c:	4603      	mov	r3, r0
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d001      	beq.n	800a066 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a062:	2301      	movs	r3, #1
 800a064:	e053      	b.n	800a10e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	699b      	ldr	r3, [r3, #24]
 800a06c:	f003 0320 	and.w	r3, r3, #32
 800a070:	2b20      	cmp	r3, #32
 800a072:	d129      	bne.n	800a0c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	699b      	ldr	r3, [r3, #24]
 800a07a:	f003 0304 	and.w	r3, r3, #4
 800a07e:	2b04      	cmp	r3, #4
 800a080:	d105      	bne.n	800a08e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a086:	2b00      	cmp	r3, #0
 800a088:	d001      	beq.n	800a08e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800a08a:	2300      	movs	r3, #0
 800a08c:	e03f      	b.n	800a10e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	2220      	movs	r2, #32
 800a094:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	6859      	ldr	r1, [r3, #4]
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	681a      	ldr	r2, [r3, #0]
 800a0a0:	4b1d      	ldr	r3, [pc, #116]	; (800a118 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800a0a2:	400b      	ands	r3, r1
 800a0a4:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	2220      	movs	r2, #32
 800a0b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	e022      	b.n	800a10e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a0c8:	f7fb fe82 	bl	8005dd0 <HAL_GetTick>
 800a0cc:	4602      	mov	r2, r0
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	1ad3      	subs	r3, r2, r3
 800a0d2:	68ba      	ldr	r2, [r7, #8]
 800a0d4:	429a      	cmp	r2, r3
 800a0d6:	d302      	bcc.n	800a0de <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800a0d8:	68bb      	ldr	r3, [r7, #8]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d10f      	bne.n	800a0fe <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0e2:	f043 0220 	orr.w	r2, r3, #32
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	2220      	movs	r2, #32
 800a0ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	e007      	b.n	800a10e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	699b      	ldr	r3, [r3, #24]
 800a104:	f003 0304 	and.w	r3, r3, #4
 800a108:	2b04      	cmp	r3, #4
 800a10a:	d1a2      	bne.n	800a052 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a10c:	2300      	movs	r3, #0
}
 800a10e:	4618      	mov	r0, r3
 800a110:	3710      	adds	r7, #16
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}
 800a116:	bf00      	nop
 800a118:	fe00e800 	.word	0xfe00e800

0800a11c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b084      	sub	sp, #16
 800a120:	af00      	add	r7, sp, #0
 800a122:	60f8      	str	r0, [r7, #12]
 800a124:	60b9      	str	r1, [r7, #8]
 800a126:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	699b      	ldr	r3, [r3, #24]
 800a12e:	f003 0310 	and.w	r3, r3, #16
 800a132:	2b10      	cmp	r3, #16
 800a134:	d151      	bne.n	800a1da <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a136:	e022      	b.n	800a17e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a13e:	d01e      	beq.n	800a17e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a140:	f7fb fe46 	bl	8005dd0 <HAL_GetTick>
 800a144:	4602      	mov	r2, r0
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	1ad3      	subs	r3, r2, r3
 800a14a:	68ba      	ldr	r2, [r7, #8]
 800a14c:	429a      	cmp	r2, r3
 800a14e:	d302      	bcc.n	800a156 <I2C_IsAcknowledgeFailed+0x3a>
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d113      	bne.n	800a17e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a15a:	f043 0220 	orr.w	r2, r3, #32
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	2220      	movs	r2, #32
 800a166:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	2200      	movs	r2, #0
 800a16e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	2200      	movs	r2, #0
 800a176:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800a17a:	2301      	movs	r3, #1
 800a17c:	e02e      	b.n	800a1dc <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	699b      	ldr	r3, [r3, #24]
 800a184:	f003 0320 	and.w	r3, r3, #32
 800a188:	2b20      	cmp	r3, #32
 800a18a:	d1d5      	bne.n	800a138 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	2210      	movs	r2, #16
 800a192:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	2220      	movs	r2, #32
 800a19a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a19c:	68f8      	ldr	r0, [r7, #12]
 800a19e:	f7ff fe52 	bl	8009e46 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	6859      	ldr	r1, [r3, #4]
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	681a      	ldr	r2, [r3, #0]
 800a1ac:	4b0d      	ldr	r3, [pc, #52]	; (800a1e4 <I2C_IsAcknowledgeFailed+0xc8>)
 800a1ae:	400b      	ands	r3, r1
 800a1b0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1b6:	f043 0204 	orr.w	r2, r3, #4
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	2220      	movs	r2, #32
 800a1c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	e000      	b.n	800a1dc <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800a1da:	2300      	movs	r3, #0
}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	3710      	adds	r7, #16
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}
 800a1e4:	fe00e800 	.word	0xfe00e800

0800a1e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b085      	sub	sp, #20
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	60f8      	str	r0, [r7, #12]
 800a1f0:	607b      	str	r3, [r7, #4]
 800a1f2:	460b      	mov	r3, r1
 800a1f4:	817b      	strh	r3, [r7, #10]
 800a1f6:	4613      	mov	r3, r2
 800a1f8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	685a      	ldr	r2, [r3, #4]
 800a200:	69bb      	ldr	r3, [r7, #24]
 800a202:	0d5b      	lsrs	r3, r3, #21
 800a204:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800a208:	4b0d      	ldr	r3, [pc, #52]	; (800a240 <I2C_TransferConfig+0x58>)
 800a20a:	430b      	orrs	r3, r1
 800a20c:	43db      	mvns	r3, r3
 800a20e:	ea02 0103 	and.w	r1, r2, r3
 800a212:	897b      	ldrh	r3, [r7, #10]
 800a214:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a218:	7a7b      	ldrb	r3, [r7, #9]
 800a21a:	041b      	lsls	r3, r3, #16
 800a21c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a220:	431a      	orrs	r2, r3
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	431a      	orrs	r2, r3
 800a226:	69bb      	ldr	r3, [r7, #24]
 800a228:	431a      	orrs	r2, r3
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	430a      	orrs	r2, r1
 800a230:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800a232:	bf00      	nop
 800a234:	3714      	adds	r7, #20
 800a236:	46bd      	mov	sp, r7
 800a238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23c:	4770      	bx	lr
 800a23e:	bf00      	nop
 800a240:	03ff63ff 	.word	0x03ff63ff

0800a244 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800a244:	b480      	push	{r7}
 800a246:	b085      	sub	sp, #20
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	460b      	mov	r3, r1
 800a24e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800a250:	2300      	movs	r3, #0
 800a252:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a258:	4a2a      	ldr	r2, [pc, #168]	; (800a304 <I2C_Enable_IRQ+0xc0>)
 800a25a:	4293      	cmp	r3, r2
 800a25c:	d004      	beq.n	800a268 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800a262:	4a29      	ldr	r2, [pc, #164]	; (800a308 <I2C_Enable_IRQ+0xc4>)
 800a264:	4293      	cmp	r3, r2
 800a266:	d11d      	bne.n	800a2a4 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800a268:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	da03      	bge.n	800a278 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800a276:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800a278:	887b      	ldrh	r3, [r7, #2]
 800a27a:	2b10      	cmp	r3, #16
 800a27c:	d103      	bne.n	800a286 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800a284:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800a286:	887b      	ldrh	r3, [r7, #2]
 800a288:	2b20      	cmp	r3, #32
 800a28a:	d103      	bne.n	800a294 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800a292:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800a294:	887b      	ldrh	r3, [r7, #2]
 800a296:	2b40      	cmp	r3, #64	; 0x40
 800a298:	d125      	bne.n	800a2e6 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2a0:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800a2a2:	e020      	b.n	800a2e6 <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800a2a4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	da03      	bge.n	800a2b4 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800a2b2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800a2b4:	887b      	ldrh	r3, [r7, #2]
 800a2b6:	f003 0301 	and.w	r3, r3, #1
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d003      	beq.n	800a2c6 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800a2c4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800a2c6:	887b      	ldrh	r3, [r7, #2]
 800a2c8:	f003 0302 	and.w	r3, r3, #2
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d003      	beq.n	800a2d8 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800a2d6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800a2d8:	887b      	ldrh	r3, [r7, #2]
 800a2da:	2b20      	cmp	r3, #32
 800a2dc:	d103      	bne.n	800a2e6 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	f043 0320 	orr.w	r3, r3, #32
 800a2e4:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	6819      	ldr	r1, [r3, #0]
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	68fa      	ldr	r2, [r7, #12]
 800a2f2:	430a      	orrs	r2, r1
 800a2f4:	601a      	str	r2, [r3, #0]
}
 800a2f6:	bf00      	nop
 800a2f8:	3714      	adds	r7, #20
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a300:	4770      	bx	lr
 800a302:	bf00      	nop
 800a304:	08009175 	.word	0x08009175
 800a308:	0800935b 	.word	0x0800935b

0800a30c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800a30c:	b480      	push	{r7}
 800a30e:	b085      	sub	sp, #20
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
 800a314:	460b      	mov	r3, r1
 800a316:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800a318:	2300      	movs	r3, #0
 800a31a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800a31c:	887b      	ldrh	r3, [r7, #2]
 800a31e:	f003 0301 	and.w	r3, r3, #1
 800a322:	2b00      	cmp	r3, #0
 800a324:	d00f      	beq.n	800a346 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800a32c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a334:	b2db      	uxtb	r3, r3
 800a336:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a33a:	2b28      	cmp	r3, #40	; 0x28
 800a33c:	d003      	beq.n	800a346 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800a344:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800a346:	887b      	ldrh	r3, [r7, #2]
 800a348:	f003 0302 	and.w	r3, r3, #2
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d00f      	beq.n	800a370 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800a356:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a35e:	b2db      	uxtb	r3, r3
 800a360:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a364:	2b28      	cmp	r3, #40	; 0x28
 800a366:	d003      	beq.n	800a370 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800a36e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800a370:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a374:	2b00      	cmp	r3, #0
 800a376:	da03      	bge.n	800a380 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800a37e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800a380:	887b      	ldrh	r3, [r7, #2]
 800a382:	2b10      	cmp	r3, #16
 800a384:	d103      	bne.n	800a38e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800a38c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800a38e:	887b      	ldrh	r3, [r7, #2]
 800a390:	2b20      	cmp	r3, #32
 800a392:	d103      	bne.n	800a39c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	f043 0320 	orr.w	r3, r3, #32
 800a39a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800a39c:	887b      	ldrh	r3, [r7, #2]
 800a39e:	2b40      	cmp	r3, #64	; 0x40
 800a3a0:	d103      	bne.n	800a3aa <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3a8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	6819      	ldr	r1, [r3, #0]
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	43da      	mvns	r2, r3
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	400a      	ands	r2, r1
 800a3ba:	601a      	str	r2, [r3, #0]
}
 800a3bc:	bf00      	nop
 800a3be:	3714      	adds	r7, #20
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c6:	4770      	bx	lr

0800a3c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a3c8:	b480      	push	{r7}
 800a3ca:	b083      	sub	sp, #12
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
 800a3d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a3d8:	b2db      	uxtb	r3, r3
 800a3da:	2b20      	cmp	r3, #32
 800a3dc:	d138      	bne.n	800a450 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a3e4:	2b01      	cmp	r3, #1
 800a3e6:	d101      	bne.n	800a3ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a3e8:	2302      	movs	r3, #2
 800a3ea:	e032      	b.n	800a452 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2201      	movs	r2, #1
 800a3f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2224      	movs	r2, #36	; 0x24
 800a3f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	681a      	ldr	r2, [r3, #0]
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f022 0201 	bic.w	r2, r2, #1
 800a40a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	681a      	ldr	r2, [r3, #0]
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a41a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	6819      	ldr	r1, [r3, #0]
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	683a      	ldr	r2, [r7, #0]
 800a428:	430a      	orrs	r2, r1
 800a42a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	681a      	ldr	r2, [r3, #0]
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f042 0201 	orr.w	r2, r2, #1
 800a43a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2220      	movs	r2, #32
 800a440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2200      	movs	r2, #0
 800a448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a44c:	2300      	movs	r3, #0
 800a44e:	e000      	b.n	800a452 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a450:	2302      	movs	r3, #2
  }
}
 800a452:	4618      	mov	r0, r3
 800a454:	370c      	adds	r7, #12
 800a456:	46bd      	mov	sp, r7
 800a458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45c:	4770      	bx	lr

0800a45e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a45e:	b480      	push	{r7}
 800a460:	b085      	sub	sp, #20
 800a462:	af00      	add	r7, sp, #0
 800a464:	6078      	str	r0, [r7, #4]
 800a466:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a46e:	b2db      	uxtb	r3, r3
 800a470:	2b20      	cmp	r3, #32
 800a472:	d139      	bne.n	800a4e8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a47a:	2b01      	cmp	r3, #1
 800a47c:	d101      	bne.n	800a482 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a47e:	2302      	movs	r3, #2
 800a480:	e033      	b.n	800a4ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2201      	movs	r2, #1
 800a486:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2224      	movs	r2, #36	; 0x24
 800a48e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	681a      	ldr	r2, [r3, #0]
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f022 0201 	bic.w	r2, r2, #1
 800a4a0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a4b0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	021b      	lsls	r3, r3, #8
 800a4b6:	68fa      	ldr	r2, [r7, #12]
 800a4b8:	4313      	orrs	r3, r2
 800a4ba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	68fa      	ldr	r2, [r7, #12]
 800a4c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	681a      	ldr	r2, [r3, #0]
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f042 0201 	orr.w	r2, r2, #1
 800a4d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2220      	movs	r2, #32
 800a4d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2200      	movs	r2, #0
 800a4e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	e000      	b.n	800a4ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a4e8:	2302      	movs	r3, #2
  }
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	3714      	adds	r7, #20
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f4:	4770      	bx	lr

0800a4f6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800a4f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4f8:	b08b      	sub	sp, #44	; 0x2c
 800a4fa:	af06      	add	r7, sp, #24
 800a4fc:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d101      	bne.n	800a508 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800a504:	2301      	movs	r3, #1
 800a506:	e0ad      	b.n	800a664 <HAL_PCD_Init+0x16e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 800a50e:	b2db      	uxtb	r3, r3
 800a510:	2b00      	cmp	r3, #0
 800a512:	d106      	bne.n	800a522 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2200      	movs	r2, #0
 800a518:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f00f fbbf 	bl	8019ca0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2203      	movs	r2, #3
 800a526:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	4618      	mov	r0, r3
 800a530:	f004 fba7 	bl	800ec82 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a534:	2300      	movs	r3, #0
 800a536:	73fb      	strb	r3, [r7, #15]
 800a538:	e035      	b.n	800a5a6 <HAL_PCD_Init+0xb0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800a53a:	7bfb      	ldrb	r3, [r7, #15]
 800a53c:	687a      	ldr	r2, [r7, #4]
 800a53e:	015b      	lsls	r3, r3, #5
 800a540:	4413      	add	r3, r2
 800a542:	3329      	adds	r3, #41	; 0x29
 800a544:	2201      	movs	r2, #1
 800a546:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800a548:	7bfb      	ldrb	r3, [r7, #15]
 800a54a:	687a      	ldr	r2, [r7, #4]
 800a54c:	015b      	lsls	r3, r3, #5
 800a54e:	4413      	add	r3, r2
 800a550:	3328      	adds	r3, #40	; 0x28
 800a552:	7bfa      	ldrb	r2, [r7, #15]
 800a554:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800a556:	7bfb      	ldrb	r3, [r7, #15]
 800a558:	7bfa      	ldrb	r2, [r7, #15]
 800a55a:	b291      	uxth	r1, r2
 800a55c:	687a      	ldr	r2, [r7, #4]
 800a55e:	015b      	lsls	r3, r3, #5
 800a560:	4413      	add	r3, r2
 800a562:	3336      	adds	r3, #54	; 0x36
 800a564:	460a      	mov	r2, r1
 800a566:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800a568:	7bfb      	ldrb	r3, [r7, #15]
 800a56a:	687a      	ldr	r2, [r7, #4]
 800a56c:	015b      	lsls	r3, r3, #5
 800a56e:	4413      	add	r3, r2
 800a570:	332b      	adds	r3, #43	; 0x2b
 800a572:	2200      	movs	r2, #0
 800a574:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800a576:	7bfb      	ldrb	r3, [r7, #15]
 800a578:	687a      	ldr	r2, [r7, #4]
 800a57a:	015b      	lsls	r3, r3, #5
 800a57c:	4413      	add	r3, r2
 800a57e:	3338      	adds	r3, #56	; 0x38
 800a580:	2200      	movs	r2, #0
 800a582:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800a584:	7bfb      	ldrb	r3, [r7, #15]
 800a586:	687a      	ldr	r2, [r7, #4]
 800a588:	015b      	lsls	r3, r3, #5
 800a58a:	4413      	add	r3, r2
 800a58c:	333c      	adds	r3, #60	; 0x3c
 800a58e:	2200      	movs	r2, #0
 800a590:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800a592:	7bfb      	ldrb	r3, [r7, #15]
 800a594:	687a      	ldr	r2, [r7, #4]
 800a596:	3302      	adds	r3, #2
 800a598:	015b      	lsls	r3, r3, #5
 800a59a:	4413      	add	r3, r2
 800a59c:	2200      	movs	r2, #0
 800a59e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a5a0:	7bfb      	ldrb	r3, [r7, #15]
 800a5a2:	3301      	adds	r3, #1
 800a5a4:	73fb      	strb	r3, [r7, #15]
 800a5a6:	7bfa      	ldrb	r2, [r7, #15]
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	685b      	ldr	r3, [r3, #4]
 800a5ac:	429a      	cmp	r2, r3
 800a5ae:	d3c4      	bcc.n	800a53a <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	73fb      	strb	r3, [r7, #15]
 800a5b4:	e031      	b.n	800a61a <HAL_PCD_Init+0x124>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800a5b6:	7bfb      	ldrb	r3, [r7, #15]
 800a5b8:	687a      	ldr	r2, [r7, #4]
 800a5ba:	015b      	lsls	r3, r3, #5
 800a5bc:	4413      	add	r3, r2
 800a5be:	f203 1329 	addw	r3, r3, #297	; 0x129
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800a5c6:	7bfb      	ldrb	r3, [r7, #15]
 800a5c8:	687a      	ldr	r2, [r7, #4]
 800a5ca:	015b      	lsls	r3, r3, #5
 800a5cc:	4413      	add	r3, r2
 800a5ce:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a5d2:	7bfa      	ldrb	r2, [r7, #15]
 800a5d4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800a5d6:	7bfb      	ldrb	r3, [r7, #15]
 800a5d8:	687a      	ldr	r2, [r7, #4]
 800a5da:	015b      	lsls	r3, r3, #5
 800a5dc:	4413      	add	r3, r2
 800a5de:	f203 132b 	addw	r3, r3, #299	; 0x12b
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800a5e6:	7bfb      	ldrb	r3, [r7, #15]
 800a5e8:	687a      	ldr	r2, [r7, #4]
 800a5ea:	015b      	lsls	r3, r3, #5
 800a5ec:	4413      	add	r3, r2
 800a5ee:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800a5f6:	7bfb      	ldrb	r3, [r7, #15]
 800a5f8:	687a      	ldr	r2, [r7, #4]
 800a5fa:	015b      	lsls	r3, r3, #5
 800a5fc:	4413      	add	r3, r2
 800a5fe:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a602:	2200      	movs	r2, #0
 800a604:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800a606:	7bfb      	ldrb	r3, [r7, #15]
 800a608:	687a      	ldr	r2, [r7, #4]
 800a60a:	330a      	adds	r3, #10
 800a60c:	015b      	lsls	r3, r3, #5
 800a60e:	4413      	add	r3, r2
 800a610:	2200      	movs	r2, #0
 800a612:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a614:	7bfb      	ldrb	r3, [r7, #15]
 800a616:	3301      	adds	r3, #1
 800a618:	73fb      	strb	r3, [r7, #15]
 800a61a:	7bfa      	ldrb	r2, [r7, #15]
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	685b      	ldr	r3, [r3, #4]
 800a620:	429a      	cmp	r2, r3
 800a622:	d3c8      	bcc.n	800a5b6 <HAL_PCD_Init+0xc0>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	603b      	str	r3, [r7, #0]
 800a62a:	687e      	ldr	r6, [r7, #4]
 800a62c:	466d      	mov	r5, sp
 800a62e:	f106 0410 	add.w	r4, r6, #16
 800a632:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a634:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a636:	6823      	ldr	r3, [r4, #0]
 800a638:	602b      	str	r3, [r5, #0]
 800a63a:	1d33      	adds	r3, r6, #4
 800a63c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a63e:	6838      	ldr	r0, [r7, #0]
 800a640:	f004 fb3a 	bl	800ecb8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2200      	movs	r2, #0
 800a648:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2201      	movs	r2, #1
 800a650:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	69db      	ldr	r3, [r3, #28]
 800a658:	2b01      	cmp	r3, #1
 800a65a:	d102      	bne.n	800a662 <HAL_PCD_Init+0x16c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	f000 fe7b 	bl	800b358 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 800a662:	2300      	movs	r3, #0
}
 800a664:	4618      	mov	r0, r3
 800a666:	3714      	adds	r7, #20
 800a668:	46bd      	mov	sp, r7
 800a66a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a66c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b082      	sub	sp, #8
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800a67a:	2b01      	cmp	r3, #1
 800a67c:	d101      	bne.n	800a682 <HAL_PCD_Start+0x16>
 800a67e:	2302      	movs	r3, #2
 800a680:	e012      	b.n	800a6a8 <HAL_PCD_Start+0x3c>
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2201      	movs	r2, #1
 800a686:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DevConnect(hpcd->Instance);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	4618      	mov	r0, r3
 800a690:	f005 fd21 	bl	80100d6 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	4618      	mov	r0, r3
 800a69a:	f004 fad9 	bl	800ec50 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800a6a6:	2300      	movs	r3, #0
}
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	3708      	adds	r7, #8
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}

0800a6b0 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b082      	sub	sp, #8
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800a6be:	2b01      	cmp	r3, #1
 800a6c0:	d101      	bne.n	800a6c6 <HAL_PCD_Stop+0x16>
 800a6c2:	2302      	movs	r3, #2
 800a6c4:	e012      	b.n	800a6ec <HAL_PCD_Stop+0x3c>
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2201      	movs	r2, #1
 800a6ca:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  __HAL_PCD_DISABLE(hpcd);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	f004 fad5 	bl	800ec82 <USB_DisableGlobalInt>

  (void)USB_StopDevice(hpcd->Instance);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	4618      	mov	r0, r3
 800a6de:	f005 fccf 	bl	8010080 <USB_StopDevice>

  __HAL_UNLOCK(hpcd);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800a6ea:	2300      	movs	r3, #0
}
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	3708      	adds	r7, #8
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}

0800a6f4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b082      	sub	sp, #8
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	4618      	mov	r0, r3
 800a702:	f005 fcff 	bl	8010104 <USB_ReadInterrupts>
 800a706:	4603      	mov	r3, r0
 800a708:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a70c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a710:	d102      	bne.n	800a718 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	f000 fb33 	bl	800ad7e <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	4618      	mov	r0, r3
 800a71e:	f005 fcf1 	bl	8010104 <USB_ReadInterrupts>
 800a722:	4603      	mov	r3, r0
 800a724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a728:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a72c:	d112      	bne.n	800a754 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a736:	b29a      	uxth	r2, r3
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a740:	b292      	uxth	r2, r2
 800a742:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	f00f fb31 	bl	8019dae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800a74c:	2100      	movs	r1, #0
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	f000 f91e 	bl	800a990 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	4618      	mov	r0, r3
 800a75a:	f005 fcd3 	bl	8010104 <USB_ReadInterrupts>
 800a75e:	4603      	mov	r3, r0
 800a760:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a764:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a768:	d10b      	bne.n	800a782 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a772:	b29a      	uxth	r2, r3
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a77c:	b292      	uxth	r2, r2
 800a77e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	4618      	mov	r0, r3
 800a788:	f005 fcbc 	bl	8010104 <USB_ReadInterrupts>
 800a78c:	4603      	mov	r3, r0
 800a78e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a792:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a796:	d10b      	bne.n	800a7b0 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a7a0:	b29a      	uxth	r2, r3
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a7aa:	b292      	uxth	r2, r2
 800a7ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f005 fca5 	bl	8010104 <USB_ReadInterrupts>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a7c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7c4:	d133      	bne.n	800a82e <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a7ce:	b29a      	uxth	r2, r3
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f022 0204 	bic.w	r2, r2, #4
 800a7d8:	b292      	uxth	r2, r2
 800a7da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a7e6:	b29a      	uxth	r2, r3
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	f022 0208 	bic.w	r2, r2, #8
 800a7f0:	b292      	uxth	r2, r2
 800a7f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800a7fc:	2b01      	cmp	r3, #1
 800a7fe:	d107      	bne.n	800a810 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2200      	movs	r2, #0
 800a804:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800a808:	2100      	movs	r1, #0
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f00f fcda 	bl	801a1c4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800a810:	6878      	ldr	r0, [r7, #4]
 800a812:	f00f fb05 	bl	8019e20 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a81e:	b29a      	uxth	r2, r3
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a828:	b292      	uxth	r2, r2
 800a82a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	4618      	mov	r0, r3
 800a834:	f005 fc66 	bl	8010104 <USB_ReadInterrupts>
 800a838:	4603      	mov	r3, r0
 800a83a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a83e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a842:	d126      	bne.n	800a892 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a84c:	b29a      	uxth	r2, r3
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	f042 0208 	orr.w	r2, r2, #8
 800a856:	b292      	uxth	r2, r2
 800a858:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a864:	b29a      	uxth	r2, r3
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a86e:	b292      	uxth	r2, r2
 800a870:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a87c:	b29a      	uxth	r2, r3
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	f042 0204 	orr.w	r2, r2, #4
 800a886:	b292      	uxth	r2, r2
 800a888:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	f00f faad 	bl	8019dec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	4618      	mov	r0, r3
 800a898:	f005 fc34 	bl	8010104 <USB_ReadInterrupts>
 800a89c:	4603      	mov	r3, r0
 800a89e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8a2:	2b80      	cmp	r3, #128	; 0x80
 800a8a4:	d13f      	bne.n	800a926 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a8ae:	b29a      	uxth	r2, r3
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a8b8:	b292      	uxth	r2, r2
 800a8ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d12b      	bne.n	800a920 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a8d0:	b29a      	uxth	r2, r3
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	f042 0204 	orr.w	r2, r2, #4
 800a8da:	b292      	uxth	r2, r2
 800a8dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a8e8:	b29a      	uxth	r2, r3
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	f042 0208 	orr.w	r2, r2, #8
 800a8f2:	b292      	uxth	r2, r2
 800a8f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2201      	movs	r2, #1
 800a8fc:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800a908:	b29b      	uxth	r3, r3
 800a90a:	089b      	lsrs	r3, r3, #2
 800a90c:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800a916:	2101      	movs	r1, #1
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f00f fc53 	bl	801a1c4 <HAL_PCDEx_LPM_Callback>
 800a91e:	e002      	b.n	800a926 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 800a920:	6878      	ldr	r0, [r7, #4]
 800a922:	f00f fa63 	bl	8019dec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	4618      	mov	r0, r3
 800a92c:	f005 fbea 	bl	8010104 <USB_ReadInterrupts>
 800a930:	4603      	mov	r3, r0
 800a932:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a936:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a93a:	d10e      	bne.n	800a95a <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a944:	b29a      	uxth	r2, r3
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a94e:	b292      	uxth	r2, r2
 800a950:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	f00f fa1c 	bl	8019d92 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	4618      	mov	r0, r3
 800a960:	f005 fbd0 	bl	8010104 <USB_ReadInterrupts>
 800a964:	4603      	mov	r3, r0
 800a966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a96a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a96e:	d10b      	bne.n	800a988 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a978:	b29a      	uxth	r2, r3
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a982:	b292      	uxth	r2, r2
 800a984:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800a988:	bf00      	nop
 800a98a:	3708      	adds	r7, #8
 800a98c:	46bd      	mov	sp, r7
 800a98e:	bd80      	pop	{r7, pc}

0800a990 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b082      	sub	sp, #8
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
 800a998:	460b      	mov	r3, r1
 800a99a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800a9a2:	2b01      	cmp	r3, #1
 800a9a4:	d101      	bne.n	800a9aa <HAL_PCD_SetAddress+0x1a>
 800a9a6:	2302      	movs	r3, #2
 800a9a8:	e013      	b.n	800a9d2 <HAL_PCD_SetAddress+0x42>
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2201      	movs	r2, #1
 800a9ae:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	78fa      	ldrb	r2, [r7, #3]
 800a9b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	78fa      	ldrb	r2, [r7, #3]
 800a9c0:	4611      	mov	r1, r2
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f005 fb73 	bl	80100ae <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800a9d0:	2300      	movs	r3, #0
}
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	3708      	adds	r7, #8
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bd80      	pop	{r7, pc}

0800a9da <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800a9da:	b580      	push	{r7, lr}
 800a9dc:	b084      	sub	sp, #16
 800a9de:	af00      	add	r7, sp, #0
 800a9e0:	6078      	str	r0, [r7, #4]
 800a9e2:	4608      	mov	r0, r1
 800a9e4:	4611      	mov	r1, r2
 800a9e6:	461a      	mov	r2, r3
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	70fb      	strb	r3, [r7, #3]
 800a9ec:	460b      	mov	r3, r1
 800a9ee:	803b      	strh	r3, [r7, #0]
 800a9f0:	4613      	mov	r3, r2
 800a9f2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a9f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	da0b      	bge.n	800aa18 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800aa00:	78fb      	ldrb	r3, [r7, #3]
 800aa02:	f003 0307 	and.w	r3, r3, #7
 800aa06:	015b      	lsls	r3, r3, #5
 800aa08:	3328      	adds	r3, #40	; 0x28
 800aa0a:	687a      	ldr	r2, [r7, #4]
 800aa0c:	4413      	add	r3, r2
 800aa0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	2201      	movs	r2, #1
 800aa14:	705a      	strb	r2, [r3, #1]
 800aa16:	e00b      	b.n	800aa30 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800aa18:	78fb      	ldrb	r3, [r7, #3]
 800aa1a:	f003 0307 	and.w	r3, r3, #7
 800aa1e:	015b      	lsls	r3, r3, #5
 800aa20:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800aa24:	687a      	ldr	r2, [r7, #4]
 800aa26:	4413      	add	r3, r2
 800aa28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800aa30:	78fb      	ldrb	r3, [r7, #3]
 800aa32:	f003 0307 	and.w	r3, r3, #7
 800aa36:	b2da      	uxtb	r2, r3
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800aa3c:	883a      	ldrh	r2, [r7, #0]
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	78ba      	ldrb	r2, [r7, #2]
 800aa46:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	785b      	ldrb	r3, [r3, #1]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d004      	beq.n	800aa5a <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	781b      	ldrb	r3, [r3, #0]
 800aa54:	b29a      	uxth	r2, r3
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800aa5a:	78bb      	ldrb	r3, [r7, #2]
 800aa5c:	2b02      	cmp	r3, #2
 800aa5e:	d102      	bne.n	800aa66 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	2200      	movs	r2, #0
 800aa64:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800aa6c:	2b01      	cmp	r3, #1
 800aa6e:	d101      	bne.n	800aa74 <HAL_PCD_EP_Open+0x9a>
 800aa70:	2302      	movs	r3, #2
 800aa72:	e00e      	b.n	800aa92 <HAL_PCD_EP_Open+0xb8>
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2201      	movs	r2, #1
 800aa78:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	68f9      	ldr	r1, [r7, #12]
 800aa82:	4618      	mov	r0, r3
 800aa84:	f004 f93c 	bl	800ed00 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 800aa90:	7afb      	ldrb	r3, [r7, #11]
}
 800aa92:	4618      	mov	r0, r3
 800aa94:	3710      	adds	r7, #16
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bd80      	pop	{r7, pc}

0800aa9a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800aa9a:	b580      	push	{r7, lr}
 800aa9c:	b084      	sub	sp, #16
 800aa9e:	af00      	add	r7, sp, #0
 800aaa0:	6078      	str	r0, [r7, #4]
 800aaa2:	460b      	mov	r3, r1
 800aaa4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800aaa6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	da0b      	bge.n	800aac6 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800aaae:	78fb      	ldrb	r3, [r7, #3]
 800aab0:	f003 0307 	and.w	r3, r3, #7
 800aab4:	015b      	lsls	r3, r3, #5
 800aab6:	3328      	adds	r3, #40	; 0x28
 800aab8:	687a      	ldr	r2, [r7, #4]
 800aaba:	4413      	add	r3, r2
 800aabc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	2201      	movs	r2, #1
 800aac2:	705a      	strb	r2, [r3, #1]
 800aac4:	e00b      	b.n	800aade <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800aac6:	78fb      	ldrb	r3, [r7, #3]
 800aac8:	f003 0307 	and.w	r3, r3, #7
 800aacc:	015b      	lsls	r3, r3, #5
 800aace:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800aad2:	687a      	ldr	r2, [r7, #4]
 800aad4:	4413      	add	r3, r2
 800aad6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	2200      	movs	r2, #0
 800aadc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800aade:	78fb      	ldrb	r3, [r7, #3]
 800aae0:	f003 0307 	and.w	r3, r3, #7
 800aae4:	b2da      	uxtb	r2, r3
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800aaf0:	2b01      	cmp	r3, #1
 800aaf2:	d101      	bne.n	800aaf8 <HAL_PCD_EP_Close+0x5e>
 800aaf4:	2302      	movs	r3, #2
 800aaf6:	e00e      	b.n	800ab16 <HAL_PCD_EP_Close+0x7c>
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2201      	movs	r2, #1
 800aafc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	68f9      	ldr	r1, [r7, #12]
 800ab06:	4618      	mov	r0, r3
 800ab08:	f004 fca8 	bl	800f45c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2200      	movs	r2, #0
 800ab10:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800ab14:	2300      	movs	r3, #0
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	3710      	adds	r7, #16
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}

0800ab1e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800ab1e:	b580      	push	{r7, lr}
 800ab20:	b086      	sub	sp, #24
 800ab22:	af00      	add	r7, sp, #0
 800ab24:	60f8      	str	r0, [r7, #12]
 800ab26:	607a      	str	r2, [r7, #4]
 800ab28:	603b      	str	r3, [r7, #0]
 800ab2a:	460b      	mov	r3, r1
 800ab2c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ab2e:	7afb      	ldrb	r3, [r7, #11]
 800ab30:	f003 0307 	and.w	r3, r3, #7
 800ab34:	015b      	lsls	r3, r3, #5
 800ab36:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800ab3a:	68fa      	ldr	r2, [r7, #12]
 800ab3c:	4413      	add	r3, r2
 800ab3e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800ab40:	697b      	ldr	r3, [r7, #20]
 800ab42:	687a      	ldr	r2, [r7, #4]
 800ab44:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800ab46:	697b      	ldr	r3, [r7, #20]
 800ab48:	683a      	ldr	r2, [r7, #0]
 800ab4a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800ab4c:	697b      	ldr	r3, [r7, #20]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800ab52:	697b      	ldr	r3, [r7, #20]
 800ab54:	2200      	movs	r2, #0
 800ab56:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ab58:	7afb      	ldrb	r3, [r7, #11]
 800ab5a:	f003 0307 	and.w	r3, r3, #7
 800ab5e:	b2da      	uxtb	r2, r3
 800ab60:	697b      	ldr	r3, [r7, #20]
 800ab62:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800ab64:	7afb      	ldrb	r3, [r7, #11]
 800ab66:	f003 0307 	and.w	r3, r3, #7
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d106      	bne.n	800ab7c <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	6979      	ldr	r1, [r7, #20]
 800ab74:	4618      	mov	r0, r3
 800ab76:	f004 fe5e 	bl	800f836 <USB_EPStartXfer>
 800ab7a:	e005      	b.n	800ab88 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	6979      	ldr	r1, [r7, #20]
 800ab82:	4618      	mov	r0, r3
 800ab84:	f004 fe57 	bl	800f836 <USB_EPStartXfer>
  }

  return HAL_OK;
 800ab88:	2300      	movs	r3, #0
}
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	3718      	adds	r7, #24
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	bd80      	pop	{r7, pc}

0800ab92 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ab92:	b480      	push	{r7}
 800ab94:	b083      	sub	sp, #12
 800ab96:	af00      	add	r7, sp, #0
 800ab98:	6078      	str	r0, [r7, #4]
 800ab9a:	460b      	mov	r3, r1
 800ab9c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800ab9e:	78fb      	ldrb	r3, [r7, #3]
 800aba0:	f003 0307 	and.w	r3, r3, #7
 800aba4:	687a      	ldr	r2, [r7, #4]
 800aba6:	330a      	adds	r3, #10
 800aba8:	015b      	lsls	r3, r3, #5
 800abaa:	4413      	add	r3, r2
 800abac:	3304      	adds	r3, #4
 800abae:	681b      	ldr	r3, [r3, #0]
}
 800abb0:	4618      	mov	r0, r3
 800abb2:	370c      	adds	r7, #12
 800abb4:	46bd      	mov	sp, r7
 800abb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abba:	4770      	bx	lr

0800abbc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b086      	sub	sp, #24
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	60f8      	str	r0, [r7, #12]
 800abc4:	607a      	str	r2, [r7, #4]
 800abc6:	603b      	str	r3, [r7, #0]
 800abc8:	460b      	mov	r3, r1
 800abca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800abcc:	7afb      	ldrb	r3, [r7, #11]
 800abce:	f003 0307 	and.w	r3, r3, #7
 800abd2:	015b      	lsls	r3, r3, #5
 800abd4:	3328      	adds	r3, #40	; 0x28
 800abd6:	68fa      	ldr	r2, [r7, #12]
 800abd8:	4413      	add	r3, r2
 800abda:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800abdc:	697b      	ldr	r3, [r7, #20]
 800abde:	687a      	ldr	r2, [r7, #4]
 800abe0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800abe2:	697b      	ldr	r3, [r7, #20]
 800abe4:	683a      	ldr	r2, [r7, #0]
 800abe6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800abe8:	697b      	ldr	r3, [r7, #20]
 800abea:	2200      	movs	r2, #0
 800abec:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800abee:	697b      	ldr	r3, [r7, #20]
 800abf0:	2201      	movs	r2, #1
 800abf2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800abf4:	7afb      	ldrb	r3, [r7, #11]
 800abf6:	f003 0307 	and.w	r3, r3, #7
 800abfa:	b2da      	uxtb	r2, r3
 800abfc:	697b      	ldr	r3, [r7, #20]
 800abfe:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800ac00:	7afb      	ldrb	r3, [r7, #11]
 800ac02:	f003 0307 	and.w	r3, r3, #7
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d106      	bne.n	800ac18 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	6979      	ldr	r1, [r7, #20]
 800ac10:	4618      	mov	r0, r3
 800ac12:	f004 fe10 	bl	800f836 <USB_EPStartXfer>
 800ac16:	e005      	b.n	800ac24 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	6979      	ldr	r1, [r7, #20]
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f004 fe09 	bl	800f836 <USB_EPStartXfer>
  }

  return HAL_OK;
 800ac24:	2300      	movs	r3, #0
}
 800ac26:	4618      	mov	r0, r3
 800ac28:	3718      	adds	r7, #24
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}

0800ac2e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ac2e:	b580      	push	{r7, lr}
 800ac30:	b084      	sub	sp, #16
 800ac32:	af00      	add	r7, sp, #0
 800ac34:	6078      	str	r0, [r7, #4]
 800ac36:	460b      	mov	r3, r1
 800ac38:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800ac3a:	78fb      	ldrb	r3, [r7, #3]
 800ac3c:	f003 0207 	and.w	r2, r3, #7
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	685b      	ldr	r3, [r3, #4]
 800ac44:	429a      	cmp	r2, r3
 800ac46:	d901      	bls.n	800ac4c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800ac48:	2301      	movs	r3, #1
 800ac4a:	e046      	b.n	800acda <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800ac4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	da0b      	bge.n	800ac6c <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ac54:	78fb      	ldrb	r3, [r7, #3]
 800ac56:	f003 0307 	and.w	r3, r3, #7
 800ac5a:	015b      	lsls	r3, r3, #5
 800ac5c:	3328      	adds	r3, #40	; 0x28
 800ac5e:	687a      	ldr	r2, [r7, #4]
 800ac60:	4413      	add	r3, r2
 800ac62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	2201      	movs	r2, #1
 800ac68:	705a      	strb	r2, [r3, #1]
 800ac6a:	e009      	b.n	800ac80 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800ac6c:	78fb      	ldrb	r3, [r7, #3]
 800ac6e:	015b      	lsls	r3, r3, #5
 800ac70:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800ac74:	687a      	ldr	r2, [r7, #4]
 800ac76:	4413      	add	r3, r2
 800ac78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	2201      	movs	r2, #1
 800ac84:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ac86:	78fb      	ldrb	r3, [r7, #3]
 800ac88:	f003 0307 	and.w	r3, r3, #7
 800ac8c:	b2da      	uxtb	r2, r3
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800ac98:	2b01      	cmp	r3, #1
 800ac9a:	d101      	bne.n	800aca0 <HAL_PCD_EP_SetStall+0x72>
 800ac9c:	2302      	movs	r3, #2
 800ac9e:	e01c      	b.n	800acda <HAL_PCD_EP_SetStall+0xac>
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2201      	movs	r2, #1
 800aca4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	68f9      	ldr	r1, [r7, #12]
 800acae:	4618      	mov	r0, r3
 800acb0:	f005 f8e7 	bl	800fe82 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800acb4:	78fb      	ldrb	r3, [r7, #3]
 800acb6:	f003 0307 	and.w	r3, r3, #7
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d108      	bne.n	800acd0 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681a      	ldr	r2, [r3, #0]
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800acc8:	4619      	mov	r1, r3
 800acca:	4610      	mov	r0, r2
 800accc:	f005 fa2a 	bl	8010124 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2200      	movs	r2, #0
 800acd4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800acd8:	2300      	movs	r3, #0
}
 800acda:	4618      	mov	r0, r3
 800acdc:	3710      	adds	r7, #16
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd80      	pop	{r7, pc}

0800ace2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ace2:	b580      	push	{r7, lr}
 800ace4:	b084      	sub	sp, #16
 800ace6:	af00      	add	r7, sp, #0
 800ace8:	6078      	str	r0, [r7, #4]
 800acea:	460b      	mov	r3, r1
 800acec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800acee:	78fb      	ldrb	r3, [r7, #3]
 800acf0:	f003 020f 	and.w	r2, r3, #15
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	685b      	ldr	r3, [r3, #4]
 800acf8:	429a      	cmp	r2, r3
 800acfa:	d901      	bls.n	800ad00 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800acfc:	2301      	movs	r3, #1
 800acfe:	e03a      	b.n	800ad76 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800ad00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	da0b      	bge.n	800ad20 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ad08:	78fb      	ldrb	r3, [r7, #3]
 800ad0a:	f003 0307 	and.w	r3, r3, #7
 800ad0e:	015b      	lsls	r3, r3, #5
 800ad10:	3328      	adds	r3, #40	; 0x28
 800ad12:	687a      	ldr	r2, [r7, #4]
 800ad14:	4413      	add	r3, r2
 800ad16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	2201      	movs	r2, #1
 800ad1c:	705a      	strb	r2, [r3, #1]
 800ad1e:	e00b      	b.n	800ad38 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ad20:	78fb      	ldrb	r3, [r7, #3]
 800ad22:	f003 0307 	and.w	r3, r3, #7
 800ad26:	015b      	lsls	r3, r3, #5
 800ad28:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800ad2c:	687a      	ldr	r2, [r7, #4]
 800ad2e:	4413      	add	r3, r2
 800ad30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	2200      	movs	r2, #0
 800ad36:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ad3e:	78fb      	ldrb	r3, [r7, #3]
 800ad40:	f003 0307 	and.w	r3, r3, #7
 800ad44:	b2da      	uxtb	r2, r3
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800ad50:	2b01      	cmp	r3, #1
 800ad52:	d101      	bne.n	800ad58 <HAL_PCD_EP_ClrStall+0x76>
 800ad54:	2302      	movs	r3, #2
 800ad56:	e00e      	b.n	800ad76 <HAL_PCD_EP_ClrStall+0x94>
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2201      	movs	r2, #1
 800ad5c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	68f9      	ldr	r1, [r7, #12]
 800ad66:	4618      	mov	r0, r3
 800ad68:	f005 f8dc 	bl	800ff24 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2200      	movs	r2, #0
 800ad70:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800ad74:	2300      	movs	r3, #0
}
 800ad76:	4618      	mov	r0, r3
 800ad78:	3710      	adds	r7, #16
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}

0800ad7e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800ad7e:	b580      	push	{r7, lr}
 800ad80:	b08e      	sub	sp, #56	; 0x38
 800ad82:	af00      	add	r7, sp, #0
 800ad84:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800ad86:	e29c      	b.n	800b2c2 <PCD_EP_ISR_Handler+0x544>
  {
    wIstr = hpcd->Instance->ISTR;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800ad90:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800ad92:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ad94:	b2db      	uxtb	r3, r3
 800ad96:	f003 030f 	and.w	r3, r3, #15
 800ad9a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800ad9e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	f040 8152 	bne.w	800b04c <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800ada8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800adaa:	f003 0310 	and.w	r3, r3, #16
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d150      	bne.n	800ae54 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	881b      	ldrh	r3, [r3, #0]
 800adb8:	b29b      	uxth	r3, r3
 800adba:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800adbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800adc2:	81fb      	strh	r3, [r7, #14]
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681a      	ldr	r2, [r3, #0]
 800adc8:	89fb      	ldrh	r3, [r7, #14]
 800adca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800adce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800add2:	b29b      	uxth	r3, r3
 800add4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	3328      	adds	r3, #40	; 0x28
 800adda:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ade4:	b29b      	uxth	r3, r3
 800ade6:	461a      	mov	r2, r3
 800ade8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adea:	781b      	ldrb	r3, [r3, #0]
 800adec:	00db      	lsls	r3, r3, #3
 800adee:	4413      	add	r3, r2
 800adf0:	687a      	ldr	r2, [r7, #4]
 800adf2:	6812      	ldr	r2, [r2, #0]
 800adf4:	4413      	add	r3, r2
 800adf6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800adfa:	881b      	ldrh	r3, [r3, #0]
 800adfc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800ae00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae02:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800ae04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae06:	695a      	ldr	r2, [r3, #20]
 800ae08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae0a:	69db      	ldr	r3, [r3, #28]
 800ae0c:	441a      	add	r2, r3
 800ae0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae10:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800ae12:	2100      	movs	r1, #0
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	f00e ffa5 	bl	8019d64 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ae20:	b2db      	uxtb	r3, r3
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	f000 824d 	beq.w	800b2c2 <PCD_EP_ISR_Handler+0x544>
 800ae28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae2a:	699b      	ldr	r3, [r3, #24]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	f040 8248 	bne.w	800b2c2 <PCD_EP_ISR_Handler+0x544>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ae38:	b2db      	uxtb	r3, r3
 800ae3a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ae3e:	b2da      	uxtb	r2, r3
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	b292      	uxth	r2, r2
 800ae46:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800ae52:	e236      	b.n	800b2c2 <PCD_EP_ISR_Handler+0x544>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800ae5a:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	881b      	ldrh	r3, [r3, #0]
 800ae62:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800ae64:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ae66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d032      	beq.n	800aed4 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae76:	b29b      	uxth	r3, r3
 800ae78:	461a      	mov	r2, r3
 800ae7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae7c:	781b      	ldrb	r3, [r3, #0]
 800ae7e:	00db      	lsls	r3, r3, #3
 800ae80:	4413      	add	r3, r2
 800ae82:	687a      	ldr	r2, [r7, #4]
 800ae84:	6812      	ldr	r2, [r2, #0]
 800ae86:	4413      	add	r3, r2
 800ae88:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ae8c:	881b      	ldrh	r3, [r3, #0]
 800ae8e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800ae92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae94:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	6818      	ldr	r0, [r3, #0]
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	f503 710c 	add.w	r1, r3, #560	; 0x230
 800aea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aea2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800aea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aea6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800aea8:	b29b      	uxth	r3, r3
 800aeaa:	f005 f988 	bl	80101be <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	881b      	ldrh	r3, [r3, #0]
 800aeb4:	b29a      	uxth	r2, r3
 800aeb6:	f640 738f 	movw	r3, #3983	; 0xf8f
 800aeba:	4013      	ands	r3, r2
 800aebc:	823b      	strh	r3, [r7, #16]
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	8a3a      	ldrh	r2, [r7, #16]
 800aec4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800aec8:	b292      	uxth	r2, r2
 800aeca:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f00e ff1f 	bl	8019d10 <HAL_PCD_SetupStageCallback>
 800aed2:	e1f6      	b.n	800b2c2 <PCD_EP_ISR_Handler+0x544>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800aed4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	f280 81f2 	bge.w	800b2c2 <PCD_EP_ISR_Handler+0x544>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	881b      	ldrh	r3, [r3, #0]
 800aee4:	b29a      	uxth	r2, r3
 800aee6:	f640 738f 	movw	r3, #3983	; 0xf8f
 800aeea:	4013      	ands	r3, r2
 800aeec:	83fb      	strh	r3, [r7, #30]
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	8bfa      	ldrh	r2, [r7, #30]
 800aef4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800aef8:	b292      	uxth	r2, r2
 800aefa:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800af04:	b29b      	uxth	r3, r3
 800af06:	461a      	mov	r2, r3
 800af08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af0a:	781b      	ldrb	r3, [r3, #0]
 800af0c:	00db      	lsls	r3, r3, #3
 800af0e:	4413      	add	r3, r2
 800af10:	687a      	ldr	r2, [r7, #4]
 800af12:	6812      	ldr	r2, [r2, #0]
 800af14:	4413      	add	r3, r2
 800af16:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800af1a:	881b      	ldrh	r3, [r3, #0]
 800af1c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800af20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af22:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800af24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af26:	69db      	ldr	r3, [r3, #28]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d019      	beq.n	800af60 <PCD_EP_ISR_Handler+0x1e2>
 800af2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af2e:	695b      	ldr	r3, [r3, #20]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d015      	beq.n	800af60 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	6818      	ldr	r0, [r3, #0]
 800af38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af3a:	6959      	ldr	r1, [r3, #20]
 800af3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af3e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800af40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af42:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800af44:	b29b      	uxth	r3, r3
 800af46:	f005 f93a 	bl	80101be <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800af4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af4c:	695a      	ldr	r2, [r3, #20]
 800af4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af50:	69db      	ldr	r3, [r3, #28]
 800af52:	441a      	add	r2, r3
 800af54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af56:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800af58:	2100      	movs	r1, #0
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	f00e feea 	bl	8019d34 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	61bb      	str	r3, [r7, #24]
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800af6e:	b29b      	uxth	r3, r3
 800af70:	461a      	mov	r2, r3
 800af72:	69bb      	ldr	r3, [r7, #24]
 800af74:	4413      	add	r3, r2
 800af76:	61bb      	str	r3, [r7, #24]
 800af78:	69bb      	ldr	r3, [r7, #24]
 800af7a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800af7e:	617b      	str	r3, [r7, #20]
 800af80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af82:	691b      	ldr	r3, [r3, #16]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d112      	bne.n	800afae <PCD_EP_ISR_Handler+0x230>
 800af88:	697b      	ldr	r3, [r7, #20]
 800af8a:	881b      	ldrh	r3, [r3, #0]
 800af8c:	b29b      	uxth	r3, r3
 800af8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800af92:	b29a      	uxth	r2, r3
 800af94:	697b      	ldr	r3, [r7, #20]
 800af96:	801a      	strh	r2, [r3, #0]
 800af98:	697b      	ldr	r3, [r7, #20]
 800af9a:	881b      	ldrh	r3, [r3, #0]
 800af9c:	b29b      	uxth	r3, r3
 800af9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800afa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800afa6:	b29a      	uxth	r2, r3
 800afa8:	697b      	ldr	r3, [r7, #20]
 800afaa:	801a      	strh	r2, [r3, #0]
 800afac:	e02f      	b.n	800b00e <PCD_EP_ISR_Handler+0x290>
 800afae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afb0:	691b      	ldr	r3, [r3, #16]
 800afb2:	2b3e      	cmp	r3, #62	; 0x3e
 800afb4:	d813      	bhi.n	800afde <PCD_EP_ISR_Handler+0x260>
 800afb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afb8:	691b      	ldr	r3, [r3, #16]
 800afba:	085b      	lsrs	r3, r3, #1
 800afbc:	633b      	str	r3, [r7, #48]	; 0x30
 800afbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afc0:	691b      	ldr	r3, [r3, #16]
 800afc2:	f003 0301 	and.w	r3, r3, #1
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d002      	beq.n	800afd0 <PCD_EP_ISR_Handler+0x252>
 800afca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afcc:	3301      	adds	r3, #1
 800afce:	633b      	str	r3, [r7, #48]	; 0x30
 800afd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afd2:	b29b      	uxth	r3, r3
 800afd4:	029b      	lsls	r3, r3, #10
 800afd6:	b29a      	uxth	r2, r3
 800afd8:	697b      	ldr	r3, [r7, #20]
 800afda:	801a      	strh	r2, [r3, #0]
 800afdc:	e017      	b.n	800b00e <PCD_EP_ISR_Handler+0x290>
 800afde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afe0:	691b      	ldr	r3, [r3, #16]
 800afe2:	095b      	lsrs	r3, r3, #5
 800afe4:	633b      	str	r3, [r7, #48]	; 0x30
 800afe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afe8:	691b      	ldr	r3, [r3, #16]
 800afea:	f003 031f 	and.w	r3, r3, #31
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d102      	bne.n	800aff8 <PCD_EP_ISR_Handler+0x27a>
 800aff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aff4:	3b01      	subs	r3, #1
 800aff6:	633b      	str	r3, [r7, #48]	; 0x30
 800aff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800affa:	b29b      	uxth	r3, r3
 800affc:	029b      	lsls	r3, r3, #10
 800affe:	b29b      	uxth	r3, r3
 800b000:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b004:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b008:	b29a      	uxth	r2, r3
 800b00a:	697b      	ldr	r3, [r7, #20]
 800b00c:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	881b      	ldrh	r3, [r3, #0]
 800b014:	b29b      	uxth	r3, r3
 800b016:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b01a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b01e:	827b      	strh	r3, [r7, #18]
 800b020:	8a7b      	ldrh	r3, [r7, #18]
 800b022:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b026:	827b      	strh	r3, [r7, #18]
 800b028:	8a7b      	ldrh	r3, [r7, #18]
 800b02a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b02e:	827b      	strh	r3, [r7, #18]
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681a      	ldr	r2, [r3, #0]
 800b034:	8a7b      	ldrh	r3, [r7, #18]
 800b036:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b03a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b03e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b042:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b046:	b29b      	uxth	r3, r3
 800b048:	8013      	strh	r3, [r2, #0]
 800b04a:	e13a      	b.n	800b2c2 <PCD_EP_ISR_Handler+0x544>
    else
    {
      /* Decode and service non control endpoints interrupt */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	461a      	mov	r2, r3
 800b052:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800b056:	009b      	lsls	r3, r3, #2
 800b058:	4413      	add	r3, r2
 800b05a:	881b      	ldrh	r3, [r3, #0]
 800b05c:	857b      	strh	r3, [r7, #42]	; 0x2a
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800b05e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800b062:	2b00      	cmp	r3, #0
 800b064:	f280 80d6 	bge.w	800b214 <PCD_EP_ISR_Handler+0x496>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	461a      	mov	r2, r3
 800b06e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800b072:	009b      	lsls	r3, r3, #2
 800b074:	4413      	add	r3, r2
 800b076:	881b      	ldrh	r3, [r3, #0]
 800b078:	b29a      	uxth	r2, r3
 800b07a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800b07e:	4013      	ands	r3, r2
 800b080:	853b      	strh	r3, [r7, #40]	; 0x28
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	461a      	mov	r2, r3
 800b088:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800b08c:	009b      	lsls	r3, r3, #2
 800b08e:	4413      	add	r3, r2
 800b090:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b092:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b096:	b292      	uxth	r2, r2
 800b098:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800b09a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800b09e:	015b      	lsls	r3, r3, #5
 800b0a0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b0a4:	687a      	ldr	r2, [r7, #4]
 800b0a6:	4413      	add	r3, r2
 800b0a8:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT double Buffering */
        if (ep->doublebuffer == 0U)
 800b0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ac:	7b1b      	ldrb	r3, [r3, #12]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d11f      	bne.n	800b0f2 <PCD_EP_ISR_Handler+0x374>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b0ba:	b29b      	uxth	r3, r3
 800b0bc:	461a      	mov	r2, r3
 800b0be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0c0:	781b      	ldrb	r3, [r3, #0]
 800b0c2:	00db      	lsls	r3, r3, #3
 800b0c4:	4413      	add	r3, r2
 800b0c6:	687a      	ldr	r2, [r7, #4]
 800b0c8:	6812      	ldr	r2, [r2, #0]
 800b0ca:	4413      	add	r3, r2
 800b0cc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b0d0:	881b      	ldrh	r3, [r3, #0]
 800b0d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b0d6:	86fb      	strh	r3, [r7, #54]	; 0x36
          if (count != 0U)
 800b0d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d075      	beq.n	800b1ca <PCD_EP_ISR_Handler+0x44c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	6818      	ldr	r0, [r3, #0]
 800b0e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0e4:	6959      	ldr	r1, [r3, #20]
 800b0e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0e8:	88da      	ldrh	r2, [r3, #6]
 800b0ea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b0ec:	f005 f867 	bl	80101be <USB_ReadPMA>
 800b0f0:	e06b      	b.n	800b1ca <PCD_EP_ISR_Handler+0x44c>
          }
        }
        else
        {
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	461a      	mov	r2, r3
 800b0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0fa:	781b      	ldrb	r3, [r3, #0]
 800b0fc:	009b      	lsls	r3, r3, #2
 800b0fe:	4413      	add	r3, r2
 800b100:	881b      	ldrh	r3, [r3, #0]
 800b102:	b29b      	uxth	r3, r3
 800b104:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b108:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b10c:	847b      	strh	r3, [r7, #34]	; 0x22
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	461a      	mov	r2, r3
 800b114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b116:	781b      	ldrb	r3, [r3, #0]
 800b118:	009b      	lsls	r3, r3, #2
 800b11a:	441a      	add	r2, r3
 800b11c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b11e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b122:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b126:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b12a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b12e:	b29b      	uxth	r3, r3
 800b130:	8013      	strh	r3, [r2, #0]

          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	461a      	mov	r2, r3
 800b138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b13a:	781b      	ldrb	r3, [r3, #0]
 800b13c:	009b      	lsls	r3, r3, #2
 800b13e:	4413      	add	r3, r2
 800b140:	881b      	ldrh	r3, [r3, #0]
 800b142:	b29b      	uxth	r3, r3
 800b144:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d01f      	beq.n	800b18c <PCD_EP_ISR_Handler+0x40e>
          {
            /* read from endpoint BUF0Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b154:	b29b      	uxth	r3, r3
 800b156:	461a      	mov	r2, r3
 800b158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b15a:	781b      	ldrb	r3, [r3, #0]
 800b15c:	00db      	lsls	r3, r3, #3
 800b15e:	4413      	add	r3, r2
 800b160:	687a      	ldr	r2, [r7, #4]
 800b162:	6812      	ldr	r2, [r2, #0]
 800b164:	4413      	add	r3, r2
 800b166:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b16a:	881b      	ldrh	r3, [r3, #0]
 800b16c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b170:	86fb      	strh	r3, [r7, #54]	; 0x36
            if (count != 0U)
 800b172:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b174:	2b00      	cmp	r3, #0
 800b176:	d028      	beq.n	800b1ca <PCD_EP_ISR_Handler+0x44c>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	6818      	ldr	r0, [r3, #0]
 800b17c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b17e:	6959      	ldr	r1, [r3, #20]
 800b180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b182:	891a      	ldrh	r2, [r3, #8]
 800b184:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b186:	f005 f81a 	bl	80101be <USB_ReadPMA>
 800b18a:	e01e      	b.n	800b1ca <PCD_EP_ISR_Handler+0x44c>
            }
          }
          else
          {
            /* read from endpoint BUF1Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b194:	b29b      	uxth	r3, r3
 800b196:	461a      	mov	r2, r3
 800b198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b19a:	781b      	ldrb	r3, [r3, #0]
 800b19c:	00db      	lsls	r3, r3, #3
 800b19e:	4413      	add	r3, r2
 800b1a0:	687a      	ldr	r2, [r7, #4]
 800b1a2:	6812      	ldr	r2, [r2, #0]
 800b1a4:	4413      	add	r3, r2
 800b1a6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b1aa:	881b      	ldrh	r3, [r3, #0]
 800b1ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b1b0:	86fb      	strh	r3, [r7, #54]	; 0x36
            if (count != 0U)
 800b1b2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d008      	beq.n	800b1ca <PCD_EP_ISR_Handler+0x44c>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	6818      	ldr	r0, [r3, #0]
 800b1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1be:	6959      	ldr	r1, [r3, #20]
 800b1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1c2:	895a      	ldrh	r2, [r3, #10]
 800b1c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b1c6:	f004 fffa 	bl	80101be <USB_ReadPMA>
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800b1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1cc:	69da      	ldr	r2, [r3, #28]
 800b1ce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b1d0:	441a      	add	r2, r3
 800b1d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800b1d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d8:	695a      	ldr	r2, [r3, #20]
 800b1da:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b1dc:	441a      	add	r2, r3
 800b1de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1e0:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800b1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1e4:	699b      	ldr	r3, [r3, #24]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d004      	beq.n	800b1f4 <PCD_EP_ISR_Handler+0x476>
 800b1ea:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ee:	691b      	ldr	r3, [r3, #16]
 800b1f0:	429a      	cmp	r2, r3
 800b1f2:	d206      	bcs.n	800b202 <PCD_EP_ISR_Handler+0x484>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800b1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1f6:	781b      	ldrb	r3, [r3, #0]
 800b1f8:	4619      	mov	r1, r3
 800b1fa:	6878      	ldr	r0, [r7, #4]
 800b1fc:	f00e fd9a 	bl	8019d34 <HAL_PCD_DataOutStageCallback>
 800b200:	e008      	b.n	800b214 <PCD_EP_ISR_Handler+0x496>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800b202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b204:	7819      	ldrb	r1, [r3, #0]
 800b206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b208:	695a      	ldr	r2, [r3, #20]
 800b20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b20c:	699b      	ldr	r3, [r3, #24]
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f7ff fc85 	bl	800ab1e <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800b214:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d051      	beq.n	800b2c2 <PCD_EP_ISR_Handler+0x544>
      {
        ep = &hpcd->IN_ep[epindex];
 800b21e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800b222:	015b      	lsls	r3, r3, #5
 800b224:	3328      	adds	r3, #40	; 0x28
 800b226:	687a      	ldr	r2, [r7, #4]
 800b228:	4413      	add	r3, r2
 800b22a:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	461a      	mov	r2, r3
 800b232:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800b236:	009b      	lsls	r3, r3, #2
 800b238:	4413      	add	r3, r2
 800b23a:	881b      	ldrh	r3, [r3, #0]
 800b23c:	b29b      	uxth	r3, r3
 800b23e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800b242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b246:	843b      	strh	r3, [r7, #32]
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	461a      	mov	r2, r3
 800b24e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800b252:	009b      	lsls	r3, r3, #2
 800b254:	441a      	add	r2, r3
 800b256:	8c3b      	ldrh	r3, [r7, #32]
 800b258:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b25c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b260:	b29b      	uxth	r3, r3
 800b262:	8013      	strh	r3, [r2, #0]

        /* multi-packet on the NON control IN endpoint */
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b26c:	b29b      	uxth	r3, r3
 800b26e:	461a      	mov	r2, r3
 800b270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b272:	781b      	ldrb	r3, [r3, #0]
 800b274:	00db      	lsls	r3, r3, #3
 800b276:	4413      	add	r3, r2
 800b278:	687a      	ldr	r2, [r7, #4]
 800b27a:	6812      	ldr	r2, [r2, #0]
 800b27c:	4413      	add	r3, r2
 800b27e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b282:	881b      	ldrh	r3, [r3, #0]
 800b284:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b28a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800b28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b28e:	695a      	ldr	r2, [r3, #20]
 800b290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b292:	69db      	ldr	r3, [r3, #28]
 800b294:	441a      	add	r2, r3
 800b296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b298:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 800b29a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b29c:	699b      	ldr	r3, [r3, #24]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d106      	bne.n	800b2b0 <PCD_EP_ISR_Handler+0x532>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800b2a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2a4:	781b      	ldrb	r3, [r3, #0]
 800b2a6:	4619      	mov	r1, r3
 800b2a8:	6878      	ldr	r0, [r7, #4]
 800b2aa:	f00e fd5b 	bl	8019d64 <HAL_PCD_DataInStageCallback>
 800b2ae:	e008      	b.n	800b2c2 <PCD_EP_ISR_Handler+0x544>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800b2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2b2:	7819      	ldrb	r1, [r3, #0]
 800b2b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2b6:	695a      	ldr	r2, [r3, #20]
 800b2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ba:	699b      	ldr	r3, [r3, #24]
 800b2bc:	6878      	ldr	r0, [r7, #4]
 800b2be:	f7ff fc7d 	bl	800abbc <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b2ca:	b29b      	uxth	r3, r3
 800b2cc:	b21b      	sxth	r3, r3
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	f6ff ad5a 	blt.w	800ad88 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 800b2d4:	2300      	movs	r3, #0
}
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	3738      	adds	r7, #56	; 0x38
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bd80      	pop	{r7, pc}

0800b2de <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 800b2de:	b480      	push	{r7}
 800b2e0:	b087      	sub	sp, #28
 800b2e2:	af00      	add	r7, sp, #0
 800b2e4:	60f8      	str	r0, [r7, #12]
 800b2e6:	607b      	str	r3, [r7, #4]
 800b2e8:	460b      	mov	r3, r1
 800b2ea:	817b      	strh	r3, [r7, #10]
 800b2ec:	4613      	mov	r3, r2
 800b2ee:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800b2f0:	897b      	ldrh	r3, [r7, #10]
 800b2f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2f6:	b29b      	uxth	r3, r3
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d008      	beq.n	800b30e <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b2fc:	897b      	ldrh	r3, [r7, #10]
 800b2fe:	f003 0307 	and.w	r3, r3, #7
 800b302:	015b      	lsls	r3, r3, #5
 800b304:	3328      	adds	r3, #40	; 0x28
 800b306:	68fa      	ldr	r2, [r7, #12]
 800b308:	4413      	add	r3, r2
 800b30a:	617b      	str	r3, [r7, #20]
 800b30c:	e006      	b.n	800b31c <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800b30e:	897b      	ldrh	r3, [r7, #10]
 800b310:	015b      	lsls	r3, r3, #5
 800b312:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b316:	68fa      	ldr	r2, [r7, #12]
 800b318:	4413      	add	r3, r2
 800b31a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800b31c:	893b      	ldrh	r3, [r7, #8]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d107      	bne.n	800b332 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800b322:	697b      	ldr	r3, [r7, #20]
 800b324:	2200      	movs	r2, #0
 800b326:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	b29a      	uxth	r2, r3
 800b32c:	697b      	ldr	r3, [r7, #20]
 800b32e:	80da      	strh	r2, [r3, #6]
 800b330:	e00b      	b.n	800b34a <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800b332:	697b      	ldr	r3, [r7, #20]
 800b334:	2201      	movs	r2, #1
 800b336:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	b29a      	uxth	r2, r3
 800b33c:	697b      	ldr	r3, [r7, #20]
 800b33e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	0c1b      	lsrs	r3, r3, #16
 800b344:	b29a      	uxth	r2, r3
 800b346:	697b      	ldr	r3, [r7, #20]
 800b348:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800b34a:	2300      	movs	r3, #0
}
 800b34c:	4618      	mov	r0, r3
 800b34e:	371c      	adds	r7, #28
 800b350:	46bd      	mov	sp, r7
 800b352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b356:	4770      	bx	lr

0800b358 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800b358:	b480      	push	{r7}
 800b35a:	b085      	sub	sp, #20
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	2201      	movs	r2, #1
 800b36a:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	2200      	movs	r2, #0
 800b372:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800b37c:	b29b      	uxth	r3, r3
 800b37e:	f043 0301 	orr.w	r3, r3, #1
 800b382:	b29a      	uxth	r2, r3
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800b390:	b29b      	uxth	r3, r3
 800b392:	f043 0302 	orr.w	r3, r3, #2
 800b396:	b29a      	uxth	r2, r3
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800b39e:	2300      	movs	r3, #0
}
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	3714      	adds	r7, #20
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3aa:	4770      	bx	lr

0800b3ac <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800b3ac:	b480      	push	{r7}
 800b3ae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b3b0:	4b05      	ldr	r3, [pc, #20]	; (800b3c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	4a04      	ldr	r2, [pc, #16]	; (800b3c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800b3b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b3ba:	6013      	str	r3, [r2, #0]
}
 800b3bc:	bf00      	nop
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c4:	4770      	bx	lr
 800b3c6:	bf00      	nop
 800b3c8:	58000400 	.word	0x58000400

0800b3cc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800b3cc:	b480      	push	{r7}
 800b3ce:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 800b3d0:	4b04      	ldr	r3, [pc, #16]	; (800b3e4 <HAL_PWREx_GetVoltageRange+0x18>)
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800b3d8:	4618      	mov	r0, r3
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e0:	4770      	bx	lr
 800b3e2:	bf00      	nop
 800b3e4:	58000400 	.word	0x58000400

0800b3e8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800b3e8:	b480      	push	{r7}
 800b3ea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800b3ec:	4b05      	ldr	r3, [pc, #20]	; (800b404 <HAL_PWREx_EnableVddUSB+0x1c>)
 800b3ee:	685b      	ldr	r3, [r3, #4]
 800b3f0:	4a04      	ldr	r2, [pc, #16]	; (800b404 <HAL_PWREx_EnableVddUSB+0x1c>)
 800b3f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b3f6:	6053      	str	r3, [r2, #4]
}
 800b3f8:	bf00      	nop
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b400:	4770      	bx	lr
 800b402:	bf00      	nop
 800b404:	58000400 	.word	0x58000400

0800b408 <LL_RCC_HSE_IsEnabledDiv2>:
{
 800b408:	b480      	push	{r7}
 800b40a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800b40c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b416:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b41a:	d101      	bne.n	800b420 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800b41c:	2301      	movs	r3, #1
 800b41e:	e000      	b.n	800b422 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800b420:	2300      	movs	r3, #0
}
 800b422:	4618      	mov	r0, r3
 800b424:	46bd      	mov	sp, r7
 800b426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42a:	4770      	bx	lr

0800b42c <LL_RCC_HSE_Enable>:
{
 800b42c:	b480      	push	{r7}
 800b42e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800b430:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b43a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b43e:	6013      	str	r3, [r2, #0]
}
 800b440:	bf00      	nop
 800b442:	46bd      	mov	sp, r7
 800b444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b448:	4770      	bx	lr

0800b44a <LL_RCC_HSE_Disable>:
{
 800b44a:	b480      	push	{r7}
 800b44c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800b44e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b458:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b45c:	6013      	str	r3, [r2, #0]
}
 800b45e:	bf00      	nop
 800b460:	46bd      	mov	sp, r7
 800b462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b466:	4770      	bx	lr

0800b468 <LL_RCC_HSE_IsReady>:
{
 800b468:	b480      	push	{r7}
 800b46a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800b46c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b476:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b47a:	d101      	bne.n	800b480 <LL_RCC_HSE_IsReady+0x18>
 800b47c:	2301      	movs	r3, #1
 800b47e:	e000      	b.n	800b482 <LL_RCC_HSE_IsReady+0x1a>
 800b480:	2300      	movs	r3, #0
}
 800b482:	4618      	mov	r0, r3
 800b484:	46bd      	mov	sp, r7
 800b486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48a:	4770      	bx	lr

0800b48c <LL_RCC_HSI_Enable>:
{
 800b48c:	b480      	push	{r7}
 800b48e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800b490:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b49a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b49e:	6013      	str	r3, [r2, #0]
}
 800b4a0:	bf00      	nop
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a8:	4770      	bx	lr

0800b4aa <LL_RCC_HSI_Disable>:
{
 800b4aa:	b480      	push	{r7}
 800b4ac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800b4ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b4b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b4bc:	6013      	str	r3, [r2, #0]
}
 800b4be:	bf00      	nop
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c6:	4770      	bx	lr

0800b4c8 <LL_RCC_HSI_IsReady>:
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800b4cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b4d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b4da:	d101      	bne.n	800b4e0 <LL_RCC_HSI_IsReady+0x18>
 800b4dc:	2301      	movs	r3, #1
 800b4de:	e000      	b.n	800b4e2 <LL_RCC_HSI_IsReady+0x1a>
 800b4e0:	2300      	movs	r3, #0
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ea:	4770      	bx	lr

0800b4ec <LL_RCC_HSI_SetCalibTrimming>:
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b083      	sub	sp, #12
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800b4f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b4f8:	685b      	ldr	r3, [r3, #4]
 800b4fa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	061b      	lsls	r3, r3, #24
 800b502:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b506:	4313      	orrs	r3, r2
 800b508:	604b      	str	r3, [r1, #4]
}
 800b50a:	bf00      	nop
 800b50c:	370c      	adds	r7, #12
 800b50e:	46bd      	mov	sp, r7
 800b510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b514:	4770      	bx	lr

0800b516 <LL_RCC_HSI48_Enable>:
{
 800b516:	b480      	push	{r7}
 800b518:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800b51a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b51e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b522:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b526:	f043 0301 	orr.w	r3, r3, #1
 800b52a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800b52e:	bf00      	nop
 800b530:	46bd      	mov	sp, r7
 800b532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b536:	4770      	bx	lr

0800b538 <LL_RCC_HSI48_Disable>:
{
 800b538:	b480      	push	{r7}
 800b53a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800b53c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b540:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b544:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b548:	f023 0301 	bic.w	r3, r3, #1
 800b54c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800b550:	bf00      	nop
 800b552:	46bd      	mov	sp, r7
 800b554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b558:	4770      	bx	lr

0800b55a <LL_RCC_HSI48_IsReady>:
{
 800b55a:	b480      	push	{r7}
 800b55c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800b55e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b562:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b566:	f003 0302 	and.w	r3, r3, #2
 800b56a:	2b02      	cmp	r3, #2
 800b56c:	d101      	bne.n	800b572 <LL_RCC_HSI48_IsReady+0x18>
 800b56e:	2301      	movs	r3, #1
 800b570:	e000      	b.n	800b574 <LL_RCC_HSI48_IsReady+0x1a>
 800b572:	2300      	movs	r3, #0
}
 800b574:	4618      	mov	r0, r3
 800b576:	46bd      	mov	sp, r7
 800b578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57c:	4770      	bx	lr

0800b57e <LL_RCC_LSE_Enable>:
{
 800b57e:	b480      	push	{r7}
 800b580:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800b582:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b58a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b58e:	f043 0301 	orr.w	r3, r3, #1
 800b592:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800b596:	bf00      	nop
 800b598:	46bd      	mov	sp, r7
 800b59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59e:	4770      	bx	lr

0800b5a0 <LL_RCC_LSE_Disable>:
{
 800b5a0:	b480      	push	{r7}
 800b5a2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800b5a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b5a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b5b0:	f023 0301 	bic.w	r3, r3, #1
 800b5b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800b5b8:	bf00      	nop
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c0:	4770      	bx	lr

0800b5c2 <LL_RCC_LSE_EnableBypass>:
{
 800b5c2:	b480      	push	{r7}
 800b5c4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800b5c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b5ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b5d2:	f043 0304 	orr.w	r3, r3, #4
 800b5d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800b5da:	bf00      	nop
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e2:	4770      	bx	lr

0800b5e4 <LL_RCC_LSE_DisableBypass>:
{
 800b5e4:	b480      	push	{r7}
 800b5e6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800b5e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b5ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b5f4:	f023 0304 	bic.w	r3, r3, #4
 800b5f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800b5fc:	bf00      	nop
 800b5fe:	46bd      	mov	sp, r7
 800b600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b604:	4770      	bx	lr

0800b606 <LL_RCC_LSE_IsReady>:
{
 800b606:	b480      	push	{r7}
 800b608:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800b60a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b60e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b612:	f003 0302 	and.w	r3, r3, #2
 800b616:	2b02      	cmp	r3, #2
 800b618:	d101      	bne.n	800b61e <LL_RCC_LSE_IsReady+0x18>
 800b61a:	2301      	movs	r3, #1
 800b61c:	e000      	b.n	800b620 <LL_RCC_LSE_IsReady+0x1a>
 800b61e:	2300      	movs	r3, #0
}
 800b620:	4618      	mov	r0, r3
 800b622:	46bd      	mov	sp, r7
 800b624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b628:	4770      	bx	lr

0800b62a <LL_RCC_LSI1_Enable>:
{
 800b62a:	b480      	push	{r7}
 800b62c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800b62e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b632:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b636:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b63a:	f043 0301 	orr.w	r3, r3, #1
 800b63e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800b642:	bf00      	nop
 800b644:	46bd      	mov	sp, r7
 800b646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64a:	4770      	bx	lr

0800b64c <LL_RCC_LSI1_Disable>:
{
 800b64c:	b480      	push	{r7}
 800b64e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800b650:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b654:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b658:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b65c:	f023 0301 	bic.w	r3, r3, #1
 800b660:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800b664:	bf00      	nop
 800b666:	46bd      	mov	sp, r7
 800b668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66c:	4770      	bx	lr

0800b66e <LL_RCC_LSI1_IsReady>:
{
 800b66e:	b480      	push	{r7}
 800b670:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800b672:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b676:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b67a:	f003 0302 	and.w	r3, r3, #2
 800b67e:	2b02      	cmp	r3, #2
 800b680:	d101      	bne.n	800b686 <LL_RCC_LSI1_IsReady+0x18>
 800b682:	2301      	movs	r3, #1
 800b684:	e000      	b.n	800b688 <LL_RCC_LSI1_IsReady+0x1a>
 800b686:	2300      	movs	r3, #0
}
 800b688:	4618      	mov	r0, r3
 800b68a:	46bd      	mov	sp, r7
 800b68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b690:	4770      	bx	lr

0800b692 <LL_RCC_LSI2_Enable>:
{
 800b692:	b480      	push	{r7}
 800b694:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800b696:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b69a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b69e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b6a2:	f043 0304 	orr.w	r3, r3, #4
 800b6a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800b6aa:	bf00      	nop
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b2:	4770      	bx	lr

0800b6b4 <LL_RCC_LSI2_Disable>:
{
 800b6b4:	b480      	push	{r7}
 800b6b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800b6b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b6bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b6c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b6c4:	f023 0304 	bic.w	r3, r3, #4
 800b6c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800b6cc:	bf00      	nop
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d4:	4770      	bx	lr

0800b6d6 <LL_RCC_LSI2_IsReady>:
{
 800b6d6:	b480      	push	{r7}
 800b6d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800b6da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b6de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b6e2:	f003 0308 	and.w	r3, r3, #8
 800b6e6:	2b08      	cmp	r3, #8
 800b6e8:	d101      	bne.n	800b6ee <LL_RCC_LSI2_IsReady+0x18>
 800b6ea:	2301      	movs	r3, #1
 800b6ec:	e000      	b.n	800b6f0 <LL_RCC_LSI2_IsReady+0x1a>
 800b6ee:	2300      	movs	r3, #0
}
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f8:	4770      	bx	lr

0800b6fa <LL_RCC_LSI2_SetTrimming>:
{
 800b6fa:	b480      	push	{r7}
 800b6fc:	b083      	sub	sp, #12
 800b6fe:	af00      	add	r7, sp, #0
 800b700:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800b702:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b706:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b70a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	021b      	lsls	r3, r3, #8
 800b712:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b716:	4313      	orrs	r3, r2
 800b718:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800b71c:	bf00      	nop
 800b71e:	370c      	adds	r7, #12
 800b720:	46bd      	mov	sp, r7
 800b722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b726:	4770      	bx	lr

0800b728 <LL_RCC_MSI_Enable>:
{
 800b728:	b480      	push	{r7}
 800b72a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800b72c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b736:	f043 0301 	orr.w	r3, r3, #1
 800b73a:	6013      	str	r3, [r2, #0]
}
 800b73c:	bf00      	nop
 800b73e:	46bd      	mov	sp, r7
 800b740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b744:	4770      	bx	lr

0800b746 <LL_RCC_MSI_Disable>:
{
 800b746:	b480      	push	{r7}
 800b748:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800b74a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b754:	f023 0301 	bic.w	r3, r3, #1
 800b758:	6013      	str	r3, [r2, #0]
}
 800b75a:	bf00      	nop
 800b75c:	46bd      	mov	sp, r7
 800b75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b762:	4770      	bx	lr

0800b764 <LL_RCC_MSI_IsReady>:
{
 800b764:	b480      	push	{r7}
 800b766:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800b768:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	f003 0302 	and.w	r3, r3, #2
 800b772:	2b02      	cmp	r3, #2
 800b774:	d101      	bne.n	800b77a <LL_RCC_MSI_IsReady+0x16>
 800b776:	2301      	movs	r3, #1
 800b778:	e000      	b.n	800b77c <LL_RCC_MSI_IsReady+0x18>
 800b77a:	2300      	movs	r3, #0
}
 800b77c:	4618      	mov	r0, r3
 800b77e:	46bd      	mov	sp, r7
 800b780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b784:	4770      	bx	lr

0800b786 <LL_RCC_MSI_SetRange>:
{
 800b786:	b480      	push	{r7}
 800b788:	b083      	sub	sp, #12
 800b78a:	af00      	add	r7, sp, #0
 800b78c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800b78e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b798:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	4313      	orrs	r3, r2
 800b7a0:	600b      	str	r3, [r1, #0]
}
 800b7a2:	bf00      	nop
 800b7a4:	370c      	adds	r7, #12
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ac:	4770      	bx	lr

0800b7ae <LL_RCC_MSI_GetRange>:
{
 800b7ae:	b480      	push	{r7}
 800b7b0:	b083      	sub	sp, #12
 800b7b2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800b7b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b7be:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2bb0      	cmp	r3, #176	; 0xb0
 800b7c4:	d901      	bls.n	800b7ca <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800b7c6:	23b0      	movs	r3, #176	; 0xb0
 800b7c8:	607b      	str	r3, [r7, #4]
  return msiRange;
 800b7ca:	687b      	ldr	r3, [r7, #4]
}
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	370c      	adds	r7, #12
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d6:	4770      	bx	lr

0800b7d8 <LL_RCC_MSI_SetCalibTrimming>:
{
 800b7d8:	b480      	push	{r7}
 800b7da:	b083      	sub	sp, #12
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800b7e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b7e4:	685b      	ldr	r3, [r3, #4]
 800b7e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	021b      	lsls	r3, r3, #8
 800b7ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b7f2:	4313      	orrs	r3, r2
 800b7f4:	604b      	str	r3, [r1, #4]
}
 800b7f6:	bf00      	nop
 800b7f8:	370c      	adds	r7, #12
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b800:	4770      	bx	lr

0800b802 <LL_RCC_SetSysClkSource>:
{
 800b802:	b480      	push	{r7}
 800b804:	b083      	sub	sp, #12
 800b806:	af00      	add	r7, sp, #0
 800b808:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800b80a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b80e:	689b      	ldr	r3, [r3, #8]
 800b810:	f023 0203 	bic.w	r2, r3, #3
 800b814:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	4313      	orrs	r3, r2
 800b81c:	608b      	str	r3, [r1, #8]
}
 800b81e:	bf00      	nop
 800b820:	370c      	adds	r7, #12
 800b822:	46bd      	mov	sp, r7
 800b824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b828:	4770      	bx	lr

0800b82a <LL_RCC_GetSysClkSource>:
{
 800b82a:	b480      	push	{r7}
 800b82c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800b82e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b832:	689b      	ldr	r3, [r3, #8]
 800b834:	f003 030c 	and.w	r3, r3, #12
}
 800b838:	4618      	mov	r0, r3
 800b83a:	46bd      	mov	sp, r7
 800b83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b840:	4770      	bx	lr

0800b842 <LL_RCC_SetAHBPrescaler>:
{
 800b842:	b480      	push	{r7}
 800b844:	b083      	sub	sp, #12
 800b846:	af00      	add	r7, sp, #0
 800b848:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800b84a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b84e:	689b      	ldr	r3, [r3, #8]
 800b850:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b854:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	4313      	orrs	r3, r2
 800b85c:	608b      	str	r3, [r1, #8]
}
 800b85e:	bf00      	nop
 800b860:	370c      	adds	r7, #12
 800b862:	46bd      	mov	sp, r7
 800b864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b868:	4770      	bx	lr

0800b86a <LL_C2_RCC_SetAHBPrescaler>:
{
 800b86a:	b480      	push	{r7}
 800b86c:	b083      	sub	sp, #12
 800b86e:	af00      	add	r7, sp, #0
 800b870:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800b872:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b876:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800b87a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b87e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	4313      	orrs	r3, r2
 800b886:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800b88a:	bf00      	nop
 800b88c:	370c      	adds	r7, #12
 800b88e:	46bd      	mov	sp, r7
 800b890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b894:	4770      	bx	lr

0800b896 <LL_RCC_SetAHB4Prescaler>:
{
 800b896:	b480      	push	{r7}
 800b898:	b083      	sub	sp, #12
 800b89a:	af00      	add	r7, sp, #0
 800b89c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800b89e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b8a2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800b8a6:	f023 020f 	bic.w	r2, r3, #15
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	091b      	lsrs	r3, r3, #4
 800b8ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b8b2:	4313      	orrs	r3, r2
 800b8b4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800b8b8:	bf00      	nop
 800b8ba:	370c      	adds	r7, #12
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c2:	4770      	bx	lr

0800b8c4 <LL_RCC_SetAPB1Prescaler>:
{
 800b8c4:	b480      	push	{r7}
 800b8c6:	b083      	sub	sp, #12
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800b8cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b8d0:	689b      	ldr	r3, [r3, #8]
 800b8d2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b8d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	4313      	orrs	r3, r2
 800b8de:	608b      	str	r3, [r1, #8]
}
 800b8e0:	bf00      	nop
 800b8e2:	370c      	adds	r7, #12
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ea:	4770      	bx	lr

0800b8ec <LL_RCC_SetAPB2Prescaler>:
{
 800b8ec:	b480      	push	{r7}
 800b8ee:	b083      	sub	sp, #12
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800b8f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b8f8:	689b      	ldr	r3, [r3, #8]
 800b8fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b8fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	4313      	orrs	r3, r2
 800b906:	608b      	str	r3, [r1, #8]
}
 800b908:	bf00      	nop
 800b90a:	370c      	adds	r7, #12
 800b90c:	46bd      	mov	sp, r7
 800b90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b912:	4770      	bx	lr

0800b914 <LL_RCC_GetAHBPrescaler>:
{
 800b914:	b480      	push	{r7}
 800b916:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800b918:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b91c:	689b      	ldr	r3, [r3, #8]
 800b91e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800b922:	4618      	mov	r0, r3
 800b924:	46bd      	mov	sp, r7
 800b926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92a:	4770      	bx	lr

0800b92c <LL_C2_RCC_GetAHBPrescaler>:
{
 800b92c:	b480      	push	{r7}
 800b92e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 800b930:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b934:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800b938:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800b93c:	4618      	mov	r0, r3
 800b93e:	46bd      	mov	sp, r7
 800b940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b944:	4770      	bx	lr

0800b946 <LL_RCC_GetAHB4Prescaler>:
{
 800b946:	b480      	push	{r7}
 800b948:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800b94a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b94e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800b952:	011b      	lsls	r3, r3, #4
 800b954:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800b958:	4618      	mov	r0, r3
 800b95a:	46bd      	mov	sp, r7
 800b95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b960:	4770      	bx	lr

0800b962 <LL_RCC_GetAPB1Prescaler>:
{
 800b962:	b480      	push	{r7}
 800b964:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800b966:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b96a:	689b      	ldr	r3, [r3, #8]
 800b96c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800b970:	4618      	mov	r0, r3
 800b972:	46bd      	mov	sp, r7
 800b974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b978:	4770      	bx	lr

0800b97a <LL_RCC_GetAPB2Prescaler>:
{
 800b97a:	b480      	push	{r7}
 800b97c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800b97e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b982:	689b      	ldr	r3, [r3, #8]
 800b984:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800b988:	4618      	mov	r0, r3
 800b98a:	46bd      	mov	sp, r7
 800b98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b990:	4770      	bx	lr

0800b992 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800b992:	b480      	push	{r7}
 800b994:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800b996:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b9a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b9a4:	6013      	str	r3, [r2, #0]
}
 800b9a6:	bf00      	nop
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ae:	4770      	bx	lr

0800b9b0 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800b9b0:	b480      	push	{r7}
 800b9b2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800b9b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b9be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b9c2:	6013      	str	r3, [r2, #0]
}
 800b9c4:	bf00      	nop
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9cc:	4770      	bx	lr

0800b9ce <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800b9ce:	b480      	push	{r7}
 800b9d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800b9d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b9dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b9e0:	d101      	bne.n	800b9e6 <LL_RCC_PLL_IsReady+0x18>
 800b9e2:	2301      	movs	r3, #1
 800b9e4:	e000      	b.n	800b9e8 <LL_RCC_PLL_IsReady+0x1a>
 800b9e6:	2300      	movs	r3, #0
}
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f0:	4770      	bx	lr

0800b9f2 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800b9f2:	b480      	push	{r7}
 800b9f4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800b9f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b9fa:	68db      	ldr	r3, [r3, #12]
 800b9fc:	0a1b      	lsrs	r3, r3, #8
 800b9fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800ba02:	4618      	mov	r0, r3
 800ba04:	46bd      	mov	sp, r7
 800ba06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0a:	4770      	bx	lr

0800ba0c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800ba0c:	b480      	push	{r7}
 800ba0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800ba10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ba14:	68db      	ldr	r3, [r3, #12]
 800ba16:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba22:	4770      	bx	lr

0800ba24 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800ba24:	b480      	push	{r7}
 800ba26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800ba28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ba2c:	68db      	ldr	r3, [r3, #12]
 800ba2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800ba32:	4618      	mov	r0, r3
 800ba34:	46bd      	mov	sp, r7
 800ba36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3a:	4770      	bx	lr

0800ba3c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800ba3c:	b480      	push	{r7}
 800ba3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800ba40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ba44:	68db      	ldr	r3, [r3, #12]
 800ba46:	f003 0303 	and.w	r3, r3, #3
}
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba52:	4770      	bx	lr

0800ba54 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800ba54:	b480      	push	{r7}
 800ba56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800ba58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ba5c:	689b      	ldr	r3, [r3, #8]
 800ba5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ba62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba66:	d101      	bne.n	800ba6c <LL_RCC_IsActiveFlag_HPRE+0x18>
 800ba68:	2301      	movs	r3, #1
 800ba6a:	e000      	b.n	800ba6e <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800ba6c:	2300      	movs	r3, #0
}
 800ba6e:	4618      	mov	r0, r3
 800ba70:	46bd      	mov	sp, r7
 800ba72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba76:	4770      	bx	lr

0800ba78 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800ba78:	b480      	push	{r7}
 800ba7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800ba7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ba80:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800ba84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ba8c:	d101      	bne.n	800ba92 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800ba8e:	2301      	movs	r3, #1
 800ba90:	e000      	b.n	800ba94 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800ba92:	2300      	movs	r3, #0
}
 800ba94:	4618      	mov	r0, r3
 800ba96:	46bd      	mov	sp, r7
 800ba98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9c:	4770      	bx	lr

0800ba9e <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800ba9e:	b480      	push	{r7}
 800baa0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800baa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800baa6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800baaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800baae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bab2:	d101      	bne.n	800bab8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800bab4:	2301      	movs	r3, #1
 800bab6:	e000      	b.n	800baba <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800bab8:	2300      	movs	r3, #0
}
 800baba:	4618      	mov	r0, r3
 800babc:	46bd      	mov	sp, r7
 800babe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac2:	4770      	bx	lr

0800bac4 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800bac4:	b480      	push	{r7}
 800bac6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800bac8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bacc:	689b      	ldr	r3, [r3, #8]
 800bace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bad2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bad6:	d101      	bne.n	800badc <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800bad8:	2301      	movs	r3, #1
 800bada:	e000      	b.n	800bade <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800badc:	2300      	movs	r3, #0
}
 800bade:	4618      	mov	r0, r3
 800bae0:	46bd      	mov	sp, r7
 800bae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae6:	4770      	bx	lr

0800bae8 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800bae8:	b480      	push	{r7}
 800baea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800baec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800baf0:	689b      	ldr	r3, [r3, #8]
 800baf2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800baf6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bafa:	d101      	bne.n	800bb00 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800bafc:	2301      	movs	r3, #1
 800bafe:	e000      	b.n	800bb02 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800bb00:	2300      	movs	r3, #0
}
 800bb02:	4618      	mov	r0, r3
 800bb04:	46bd      	mov	sp, r7
 800bb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0a:	4770      	bx	lr

0800bb0c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bb0c:	b590      	push	{r4, r7, lr}
 800bb0e:	b08d      	sub	sp, #52	; 0x34
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d101      	bne.n	800bb1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800bb1a:	2301      	movs	r3, #1
 800bb1c:	e37e      	b.n	800c21c <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	f003 0320 	and.w	r3, r3, #32
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	f000 8092 	beq.w	800bc50 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bb2c:	f7ff fe7d 	bl	800b82a <LL_RCC_GetSysClkSource>
 800bb30:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800bb32:	f7ff ff83 	bl	800ba3c <LL_RCC_PLL_GetMainSource>
 800bb36:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800bb38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d005      	beq.n	800bb4a <HAL_RCC_OscConfig+0x3e>
 800bb3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb40:	2b0c      	cmp	r3, #12
 800bb42:	d14c      	bne.n	800bbde <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800bb44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb46:	2b01      	cmp	r3, #1
 800bb48:	d149      	bne.n	800bbde <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800bb4a:	f7ff fe0b 	bl	800b764 <LL_RCC_MSI_IsReady>
 800bb4e:	4603      	mov	r3, r0
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d005      	beq.n	800bb60 <HAL_RCC_OscConfig+0x54>
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	69db      	ldr	r3, [r3, #28]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d101      	bne.n	800bb60 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800bb5c:	2301      	movs	r3, #1
 800bb5e:	e35d      	b.n	800c21c <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800bb64:	f7ff fe23 	bl	800b7ae <LL_RCC_MSI_GetRange>
 800bb68:	4603      	mov	r3, r0
 800bb6a:	429c      	cmp	r4, r3
 800bb6c:	d914      	bls.n	800bb98 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb72:	4618      	mov	r0, r3
 800bb74:	f000 fd5c 	bl	800c630 <RCC_SetFlashLatencyFromMSIRange>
 800bb78:	4603      	mov	r3, r0
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d001      	beq.n	800bb82 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 800bb7e:	2301      	movs	r3, #1
 800bb80:	e34c      	b.n	800c21c <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb86:	4618      	mov	r0, r3
 800bb88:	f7ff fdfd 	bl	800b786 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	6a1b      	ldr	r3, [r3, #32]
 800bb90:	4618      	mov	r0, r3
 800bb92:	f7ff fe21 	bl	800b7d8 <LL_RCC_MSI_SetCalibTrimming>
 800bb96:	e013      	b.n	800bbc0 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	f7ff fdf2 	bl	800b786 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	6a1b      	ldr	r3, [r3, #32]
 800bba6:	4618      	mov	r0, r3
 800bba8:	f7ff fe16 	bl	800b7d8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	f000 fd3d 	bl	800c630 <RCC_SetFlashLatencyFromMSIRange>
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d001      	beq.n	800bbc0 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 800bbbc:	2301      	movs	r3, #1
 800bbbe:	e32d      	b.n	800c21c <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800bbc0:	f000 fcda 	bl	800c578 <HAL_RCC_GetHCLKFreq>
 800bbc4:	4602      	mov	r2, r0
 800bbc6:	4bb3      	ldr	r3, [pc, #716]	; (800be94 <HAL_RCC_OscConfig+0x388>)
 800bbc8:	601a      	str	r2, [r3, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800bbca:	4bb3      	ldr	r3, [pc, #716]	; (800be98 <HAL_RCC_OscConfig+0x38c>)
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	4618      	mov	r0, r3
 800bbd0:	f7f8 ffcc 	bl	8004b6c <HAL_InitTick>
 800bbd4:	4603      	mov	r3, r0
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d039      	beq.n	800bc4e <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 800bbda:	2301      	movs	r3, #1
 800bbdc:	e31e      	b.n	800c21c <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	69db      	ldr	r3, [r3, #28]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d01e      	beq.n	800bc24 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800bbe6:	f7ff fd9f 	bl	800b728 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800bbea:	f7fa f8f1 	bl	8005dd0 <HAL_GetTick>
 800bbee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800bbf0:	e008      	b.n	800bc04 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800bbf2:	f7fa f8ed 	bl	8005dd0 <HAL_GetTick>
 800bbf6:	4602      	mov	r2, r0
 800bbf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbfa:	1ad3      	subs	r3, r2, r3
 800bbfc:	2b02      	cmp	r3, #2
 800bbfe:	d901      	bls.n	800bc04 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800bc00:	2303      	movs	r3, #3
 800bc02:	e30b      	b.n	800c21c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 800bc04:	f7ff fdae 	bl	800b764 <LL_RCC_MSI_IsReady>
 800bc08:	4603      	mov	r3, r0
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d0f1      	beq.n	800bbf2 <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc12:	4618      	mov	r0, r3
 800bc14:	f7ff fdb7 	bl	800b786 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	6a1b      	ldr	r3, [r3, #32]
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	f7ff fddb 	bl	800b7d8 <LL_RCC_MSI_SetCalibTrimming>
 800bc22:	e015      	b.n	800bc50 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800bc24:	f7ff fd8f 	bl	800b746 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800bc28:	f7fa f8d2 	bl	8005dd0 <HAL_GetTick>
 800bc2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800bc2e:	e008      	b.n	800bc42 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800bc30:	f7fa f8ce 	bl	8005dd0 <HAL_GetTick>
 800bc34:	4602      	mov	r2, r0
 800bc36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc38:	1ad3      	subs	r3, r2, r3
 800bc3a:	2b02      	cmp	r3, #2
 800bc3c:	d901      	bls.n	800bc42 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 800bc3e:	2303      	movs	r3, #3
 800bc40:	e2ec      	b.n	800c21c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 800bc42:	f7ff fd8f 	bl	800b764 <LL_RCC_MSI_IsReady>
 800bc46:	4603      	mov	r3, r0
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d1f1      	bne.n	800bc30 <HAL_RCC_OscConfig+0x124>
 800bc4c:	e000      	b.n	800bc50 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800bc4e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	f003 0301 	and.w	r3, r3, #1
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d04e      	beq.n	800bcfa <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bc5c:	f7ff fde5 	bl	800b82a <LL_RCC_GetSysClkSource>
 800bc60:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800bc62:	f7ff feeb 	bl	800ba3c <LL_RCC_PLL_GetMainSource>
 800bc66:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800bc68:	6a3b      	ldr	r3, [r7, #32]
 800bc6a:	2b08      	cmp	r3, #8
 800bc6c:	d005      	beq.n	800bc7a <HAL_RCC_OscConfig+0x16e>
 800bc6e:	6a3b      	ldr	r3, [r7, #32]
 800bc70:	2b0c      	cmp	r3, #12
 800bc72:	d10d      	bne.n	800bc90 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800bc74:	69fb      	ldr	r3, [r7, #28]
 800bc76:	2b03      	cmp	r3, #3
 800bc78:	d10a      	bne.n	800bc90 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bc7a:	f7ff fbf5 	bl	800b468 <LL_RCC_HSE_IsReady>
 800bc7e:	4603      	mov	r3, r0
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d039      	beq.n	800bcf8 <HAL_RCC_OscConfig+0x1ec>
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	685b      	ldr	r3, [r3, #4]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d135      	bne.n	800bcf8 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 800bc8c:	2301      	movs	r3, #1
 800bc8e:	e2c5      	b.n	800c21c <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	685b      	ldr	r3, [r3, #4]
 800bc94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc98:	d102      	bne.n	800bca0 <HAL_RCC_OscConfig+0x194>
 800bc9a:	f7ff fbc7 	bl	800b42c <LL_RCC_HSE_Enable>
 800bc9e:	e001      	b.n	800bca4 <HAL_RCC_OscConfig+0x198>
 800bca0:	f7ff fbd3 	bl	800b44a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	685b      	ldr	r3, [r3, #4]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d012      	beq.n	800bcd2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bcac:	f7fa f890 	bl	8005dd0 <HAL_GetTick>
 800bcb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800bcb2:	e008      	b.n	800bcc6 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bcb4:	f7fa f88c 	bl	8005dd0 <HAL_GetTick>
 800bcb8:	4602      	mov	r2, r0
 800bcba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcbc:	1ad3      	subs	r3, r2, r3
 800bcbe:	2b64      	cmp	r3, #100	; 0x64
 800bcc0:	d901      	bls.n	800bcc6 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 800bcc2:	2303      	movs	r3, #3
 800bcc4:	e2aa      	b.n	800c21c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 800bcc6:	f7ff fbcf 	bl	800b468 <LL_RCC_HSE_IsReady>
 800bcca:	4603      	mov	r3, r0
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d0f1      	beq.n	800bcb4 <HAL_RCC_OscConfig+0x1a8>
 800bcd0:	e013      	b.n	800bcfa <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bcd2:	f7fa f87d 	bl	8005dd0 <HAL_GetTick>
 800bcd6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800bcd8:	e008      	b.n	800bcec <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bcda:	f7fa f879 	bl	8005dd0 <HAL_GetTick>
 800bcde:	4602      	mov	r2, r0
 800bce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bce2:	1ad3      	subs	r3, r2, r3
 800bce4:	2b64      	cmp	r3, #100	; 0x64
 800bce6:	d901      	bls.n	800bcec <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800bce8:	2303      	movs	r3, #3
 800bcea:	e297      	b.n	800c21c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 800bcec:	f7ff fbbc 	bl	800b468 <LL_RCC_HSE_IsReady>
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d1f1      	bne.n	800bcda <HAL_RCC_OscConfig+0x1ce>
 800bcf6:	e000      	b.n	800bcfa <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bcf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	f003 0302 	and.w	r3, r3, #2
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d051      	beq.n	800bdaa <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bd06:	f7ff fd90 	bl	800b82a <LL_RCC_GetSysClkSource>
 800bd0a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800bd0c:	f7ff fe96 	bl	800ba3c <LL_RCC_PLL_GetMainSource>
 800bd10:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800bd12:	69bb      	ldr	r3, [r7, #24]
 800bd14:	2b04      	cmp	r3, #4
 800bd16:	d005      	beq.n	800bd24 <HAL_RCC_OscConfig+0x218>
 800bd18:	69bb      	ldr	r3, [r7, #24]
 800bd1a:	2b0c      	cmp	r3, #12
 800bd1c:	d113      	bne.n	800bd46 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800bd1e:	697b      	ldr	r3, [r7, #20]
 800bd20:	2b02      	cmp	r3, #2
 800bd22:	d110      	bne.n	800bd46 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bd24:	f7ff fbd0 	bl	800b4c8 <LL_RCC_HSI_IsReady>
 800bd28:	4603      	mov	r3, r0
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d005      	beq.n	800bd3a <HAL_RCC_OscConfig+0x22e>
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	68db      	ldr	r3, [r3, #12]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d101      	bne.n	800bd3a <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 800bd36:	2301      	movs	r3, #1
 800bd38:	e270      	b.n	800c21c <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	691b      	ldr	r3, [r3, #16]
 800bd3e:	4618      	mov	r0, r3
 800bd40:	f7ff fbd4 	bl	800b4ec <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bd44:	e031      	b.n	800bdaa <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	68db      	ldr	r3, [r3, #12]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d019      	beq.n	800bd82 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bd4e:	f7ff fb9d 	bl	800b48c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd52:	f7fa f83d 	bl	8005dd0 <HAL_GetTick>
 800bd56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800bd58:	e008      	b.n	800bd6c <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bd5a:	f7fa f839 	bl	8005dd0 <HAL_GetTick>
 800bd5e:	4602      	mov	r2, r0
 800bd60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd62:	1ad3      	subs	r3, r2, r3
 800bd64:	2b02      	cmp	r3, #2
 800bd66:	d901      	bls.n	800bd6c <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 800bd68:	2303      	movs	r3, #3
 800bd6a:	e257      	b.n	800c21c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 800bd6c:	f7ff fbac 	bl	800b4c8 <LL_RCC_HSI_IsReady>
 800bd70:	4603      	mov	r3, r0
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d0f1      	beq.n	800bd5a <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	691b      	ldr	r3, [r3, #16]
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	f7ff fbb6 	bl	800b4ec <LL_RCC_HSI_SetCalibTrimming>
 800bd80:	e013      	b.n	800bdaa <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bd82:	f7ff fb92 	bl	800b4aa <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd86:	f7fa f823 	bl	8005dd0 <HAL_GetTick>
 800bd8a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800bd8c:	e008      	b.n	800bda0 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bd8e:	f7fa f81f 	bl	8005dd0 <HAL_GetTick>
 800bd92:	4602      	mov	r2, r0
 800bd94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd96:	1ad3      	subs	r3, r2, r3
 800bd98:	2b02      	cmp	r3, #2
 800bd9a:	d901      	bls.n	800bda0 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 800bd9c:	2303      	movs	r3, #3
 800bd9e:	e23d      	b.n	800c21c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 800bda0:	f7ff fb92 	bl	800b4c8 <LL_RCC_HSI_IsReady>
 800bda4:	4603      	mov	r3, r0
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d1f1      	bne.n	800bd8e <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	f003 0308 	and.w	r3, r3, #8
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d106      	bne.n	800bdc4 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	f000 80a3 	beq.w	800bf0a <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	695b      	ldr	r3, [r3, #20]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d076      	beq.n	800beba <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	f003 0310 	and.w	r3, r3, #16
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d046      	beq.n	800be66 <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800bdd8:	f7ff fc49 	bl	800b66e <LL_RCC_LSI1_IsReady>
 800bddc:	4603      	mov	r3, r0
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d113      	bne.n	800be0a <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800bde2:	f7ff fc22 	bl	800b62a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800bde6:	f7f9 fff3 	bl	8005dd0 <HAL_GetTick>
 800bdea:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800bdec:	e008      	b.n	800be00 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800bdee:	f7f9 ffef 	bl	8005dd0 <HAL_GetTick>
 800bdf2:	4602      	mov	r2, r0
 800bdf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdf6:	1ad3      	subs	r3, r2, r3
 800bdf8:	2b02      	cmp	r3, #2
 800bdfa:	d901      	bls.n	800be00 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 800bdfc:	2303      	movs	r3, #3
 800bdfe:	e20d      	b.n	800c21c <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800be00:	f7ff fc35 	bl	800b66e <LL_RCC_LSI1_IsReady>
 800be04:	4603      	mov	r3, r0
 800be06:	2b00      	cmp	r3, #0
 800be08:	d0f1      	beq.n	800bdee <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800be0a:	f7ff fc42 	bl	800b692 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be0e:	f7f9 ffdf 	bl	8005dd0 <HAL_GetTick>
 800be12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800be14:	e008      	b.n	800be28 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800be16:	f7f9 ffdb 	bl	8005dd0 <HAL_GetTick>
 800be1a:	4602      	mov	r2, r0
 800be1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be1e:	1ad3      	subs	r3, r2, r3
 800be20:	2b03      	cmp	r3, #3
 800be22:	d901      	bls.n	800be28 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 800be24:	2303      	movs	r3, #3
 800be26:	e1f9      	b.n	800c21c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800be28:	f7ff fc55 	bl	800b6d6 <LL_RCC_LSI2_IsReady>
 800be2c:	4603      	mov	r3, r0
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d0f1      	beq.n	800be16 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	699b      	ldr	r3, [r3, #24]
 800be36:	4618      	mov	r0, r3
 800be38:	f7ff fc5f 	bl	800b6fa <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800be3c:	f7ff fc06 	bl	800b64c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be40:	f7f9 ffc6 	bl	8005dd0 <HAL_GetTick>
 800be44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800be46:	e008      	b.n	800be5a <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800be48:	f7f9 ffc2 	bl	8005dd0 <HAL_GetTick>
 800be4c:	4602      	mov	r2, r0
 800be4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be50:	1ad3      	subs	r3, r2, r3
 800be52:	2b02      	cmp	r3, #2
 800be54:	d901      	bls.n	800be5a <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 800be56:	2303      	movs	r3, #3
 800be58:	e1e0      	b.n	800c21c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800be5a:	f7ff fc08 	bl	800b66e <LL_RCC_LSI1_IsReady>
 800be5e:	4603      	mov	r3, r0
 800be60:	2b00      	cmp	r3, #0
 800be62:	d1f1      	bne.n	800be48 <HAL_RCC_OscConfig+0x33c>
 800be64:	e051      	b.n	800bf0a <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800be66:	f7ff fbe0 	bl	800b62a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be6a:	f7f9 ffb1 	bl	8005dd0 <HAL_GetTick>
 800be6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800be70:	e008      	b.n	800be84 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800be72:	f7f9 ffad 	bl	8005dd0 <HAL_GetTick>
 800be76:	4602      	mov	r2, r0
 800be78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be7a:	1ad3      	subs	r3, r2, r3
 800be7c:	2b02      	cmp	r3, #2
 800be7e:	d901      	bls.n	800be84 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 800be80:	2303      	movs	r3, #3
 800be82:	e1cb      	b.n	800c21c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800be84:	f7ff fbf3 	bl	800b66e <LL_RCC_LSI1_IsReady>
 800be88:	4603      	mov	r3, r0
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d0f1      	beq.n	800be72 <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800be8e:	f7ff fc11 	bl	800b6b4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800be92:	e00c      	b.n	800beae <HAL_RCC_OscConfig+0x3a2>
 800be94:	20000078 	.word	0x20000078
 800be98:	2000007c 	.word	0x2000007c
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800be9c:	f7f9 ff98 	bl	8005dd0 <HAL_GetTick>
 800bea0:	4602      	mov	r2, r0
 800bea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bea4:	1ad3      	subs	r3, r2, r3
 800bea6:	2b03      	cmp	r3, #3
 800bea8:	d901      	bls.n	800beae <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800beaa:	2303      	movs	r3, #3
 800beac:	e1b6      	b.n	800c21c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800beae:	f7ff fc12 	bl	800b6d6 <LL_RCC_LSI2_IsReady>
 800beb2:	4603      	mov	r3, r0
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d1f1      	bne.n	800be9c <HAL_RCC_OscConfig+0x390>
 800beb8:	e027      	b.n	800bf0a <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800beba:	f7ff fbfb 	bl	800b6b4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bebe:	f7f9 ff87 	bl	8005dd0 <HAL_GetTick>
 800bec2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800bec4:	e008      	b.n	800bed8 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800bec6:	f7f9 ff83 	bl	8005dd0 <HAL_GetTick>
 800beca:	4602      	mov	r2, r0
 800becc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bece:	1ad3      	subs	r3, r2, r3
 800bed0:	2b03      	cmp	r3, #3
 800bed2:	d901      	bls.n	800bed8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800bed4:	2303      	movs	r3, #3
 800bed6:	e1a1      	b.n	800c21c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800bed8:	f7ff fbfd 	bl	800b6d6 <LL_RCC_LSI2_IsReady>
 800bedc:	4603      	mov	r3, r0
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d1f1      	bne.n	800bec6 <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800bee2:	f7ff fbb3 	bl	800b64c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bee6:	f7f9 ff73 	bl	8005dd0 <HAL_GetTick>
 800beea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800beec:	e008      	b.n	800bf00 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800beee:	f7f9 ff6f 	bl	8005dd0 <HAL_GetTick>
 800bef2:	4602      	mov	r2, r0
 800bef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bef6:	1ad3      	subs	r3, r2, r3
 800bef8:	2b02      	cmp	r3, #2
 800befa:	d901      	bls.n	800bf00 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800befc:	2303      	movs	r3, #3
 800befe:	e18d      	b.n	800c21c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800bf00:	f7ff fbb5 	bl	800b66e <LL_RCC_LSI1_IsReady>
 800bf04:	4603      	mov	r3, r0
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d1f1      	bne.n	800beee <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	f003 0304 	and.w	r3, r3, #4
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d05b      	beq.n	800bfce <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bf16:	4bb5      	ldr	r3, [pc, #724]	; (800c1ec <HAL_RCC_OscConfig+0x6e0>)
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d114      	bne.n	800bf4c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800bf22:	f7ff fa43 	bl	800b3ac <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bf26:	f7f9 ff53 	bl	8005dd0 <HAL_GetTick>
 800bf2a:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bf2c:	e008      	b.n	800bf40 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bf2e:	f7f9 ff4f 	bl	8005dd0 <HAL_GetTick>
 800bf32:	4602      	mov	r2, r0
 800bf34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf36:	1ad3      	subs	r3, r2, r3
 800bf38:	2b02      	cmp	r3, #2
 800bf3a:	d901      	bls.n	800bf40 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 800bf3c:	2303      	movs	r3, #3
 800bf3e:	e16d      	b.n	800c21c <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bf40:	4baa      	ldr	r3, [pc, #680]	; (800c1ec <HAL_RCC_OscConfig+0x6e0>)
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d0f0      	beq.n	800bf2e <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	689b      	ldr	r3, [r3, #8]
 800bf50:	2b01      	cmp	r3, #1
 800bf52:	d102      	bne.n	800bf5a <HAL_RCC_OscConfig+0x44e>
 800bf54:	f7ff fb13 	bl	800b57e <LL_RCC_LSE_Enable>
 800bf58:	e00c      	b.n	800bf74 <HAL_RCC_OscConfig+0x468>
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	689b      	ldr	r3, [r3, #8]
 800bf5e:	2b05      	cmp	r3, #5
 800bf60:	d104      	bne.n	800bf6c <HAL_RCC_OscConfig+0x460>
 800bf62:	f7ff fb2e 	bl	800b5c2 <LL_RCC_LSE_EnableBypass>
 800bf66:	f7ff fb0a 	bl	800b57e <LL_RCC_LSE_Enable>
 800bf6a:	e003      	b.n	800bf74 <HAL_RCC_OscConfig+0x468>
 800bf6c:	f7ff fb18 	bl	800b5a0 <LL_RCC_LSE_Disable>
 800bf70:	f7ff fb38 	bl	800b5e4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	689b      	ldr	r3, [r3, #8]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d014      	beq.n	800bfa6 <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bf7c:	f7f9 ff28 	bl	8005dd0 <HAL_GetTick>
 800bf80:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800bf82:	e00a      	b.n	800bf9a <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bf84:	f7f9 ff24 	bl	8005dd0 <HAL_GetTick>
 800bf88:	4602      	mov	r2, r0
 800bf8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf8c:	1ad3      	subs	r3, r2, r3
 800bf8e:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf92:	4293      	cmp	r3, r2
 800bf94:	d901      	bls.n	800bf9a <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 800bf96:	2303      	movs	r3, #3
 800bf98:	e140      	b.n	800c21c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 800bf9a:	f7ff fb34 	bl	800b606 <LL_RCC_LSE_IsReady>
 800bf9e:	4603      	mov	r3, r0
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d0ef      	beq.n	800bf84 <HAL_RCC_OscConfig+0x478>
 800bfa4:	e013      	b.n	800bfce <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bfa6:	f7f9 ff13 	bl	8005dd0 <HAL_GetTick>
 800bfaa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800bfac:	e00a      	b.n	800bfc4 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bfae:	f7f9 ff0f 	bl	8005dd0 <HAL_GetTick>
 800bfb2:	4602      	mov	r2, r0
 800bfb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfb6:	1ad3      	subs	r3, r2, r3
 800bfb8:	f241 3288 	movw	r2, #5000	; 0x1388
 800bfbc:	4293      	cmp	r3, r2
 800bfbe:	d901      	bls.n	800bfc4 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 800bfc0:	2303      	movs	r3, #3
 800bfc2:	e12b      	b.n	800c21c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 800bfc4:	f7ff fb1f 	bl	800b606 <LL_RCC_LSE_IsReady>
 800bfc8:	4603      	mov	r3, r0
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d1ef      	bne.n	800bfae <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d02c      	beq.n	800c034 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d014      	beq.n	800c00c <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800bfe2:	f7ff fa98 	bl	800b516 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bfe6:	f7f9 fef3 	bl	8005dd0 <HAL_GetTick>
 800bfea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800bfec:	e008      	b.n	800c000 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bfee:	f7f9 feef 	bl	8005dd0 <HAL_GetTick>
 800bff2:	4602      	mov	r2, r0
 800bff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bff6:	1ad3      	subs	r3, r2, r3
 800bff8:	2b02      	cmp	r3, #2
 800bffa:	d901      	bls.n	800c000 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 800bffc:	2303      	movs	r3, #3
 800bffe:	e10d      	b.n	800c21c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800c000:	f7ff faab 	bl	800b55a <LL_RCC_HSI48_IsReady>
 800c004:	4603      	mov	r3, r0
 800c006:	2b00      	cmp	r3, #0
 800c008:	d0f1      	beq.n	800bfee <HAL_RCC_OscConfig+0x4e2>
 800c00a:	e013      	b.n	800c034 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c00c:	f7ff fa94 	bl	800b538 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c010:	f7f9 fede 	bl	8005dd0 <HAL_GetTick>
 800c014:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800c016:	e008      	b.n	800c02a <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c018:	f7f9 feda 	bl	8005dd0 <HAL_GetTick>
 800c01c:	4602      	mov	r2, r0
 800c01e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c020:	1ad3      	subs	r3, r2, r3
 800c022:	2b02      	cmp	r3, #2
 800c024:	d901      	bls.n	800c02a <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 800c026:	2303      	movs	r3, #3
 800c028:	e0f8      	b.n	800c21c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800c02a:	f7ff fa96 	bl	800b55a <LL_RCC_HSI48_IsReady>
 800c02e:	4603      	mov	r3, r0
 800c030:	2b00      	cmp	r3, #0
 800c032:	d1f1      	bne.n	800c018 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c038:	2b00      	cmp	r3, #0
 800c03a:	f000 80ee 	beq.w	800c21a <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c03e:	f7ff fbf4 	bl	800b82a <LL_RCC_GetSysClkSource>
 800c042:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800c044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c048:	68db      	ldr	r3, [r3, #12]
 800c04a:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c050:	2b02      	cmp	r3, #2
 800c052:	f040 80af 	bne.w	800c1b4 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	f003 0203 	and.w	r2, r3, #3
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c060:	429a      	cmp	r2, r3
 800c062:	d123      	bne.n	800c0ac <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c06e:	429a      	cmp	r2, r3
 800c070:	d11c      	bne.n	800c0ac <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	0a1b      	lsrs	r3, r3, #8
 800c076:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c07e:	429a      	cmp	r2, r3
 800c080:	d114      	bne.n	800c0ac <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800c08c:	429a      	cmp	r2, r3
 800c08e:	d10d      	bne.n	800c0ac <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800c09a:	429a      	cmp	r2, r3
 800c09c:	d106      	bne.n	800c0ac <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800c0a8:	429a      	cmp	r2, r3
 800c0aa:	d05d      	beq.n	800c168 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c0ac:	693b      	ldr	r3, [r7, #16]
 800c0ae:	2b0c      	cmp	r3, #12
 800c0b0:	d058      	beq.n	800c164 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800c0b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d001      	beq.n	800c0c4 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 800c0c0:	2301      	movs	r3, #1
 800c0c2:	e0ab      	b.n	800c21c <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800c0c4:	f7ff fc74 	bl	800b9b0 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c0c8:	f7f9 fe82 	bl	8005dd0 <HAL_GetTick>
 800c0cc:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c0ce:	e008      	b.n	800c0e2 <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c0d0:	f7f9 fe7e 	bl	8005dd0 <HAL_GetTick>
 800c0d4:	4602      	mov	r2, r0
 800c0d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0d8:	1ad3      	subs	r3, r2, r3
 800c0da:	2b02      	cmp	r3, #2
 800c0dc:	d901      	bls.n	800c0e2 <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 800c0de:	2303      	movs	r3, #3
 800c0e0:	e09c      	b.n	800c21c <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c0e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d1ef      	bne.n	800c0d0 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c0f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c0f4:	68da      	ldr	r2, [r3, #12]
 800c0f6:	4b3e      	ldr	r3, [pc, #248]	; (800c1f0 <HAL_RCC_OscConfig+0x6e4>)
 800c0f8:	4013      	ands	r3, r2
 800c0fa:	687a      	ldr	r2, [r7, #4]
 800c0fc:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800c0fe:	687a      	ldr	r2, [r7, #4]
 800c100:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800c102:	4311      	orrs	r1, r2
 800c104:	687a      	ldr	r2, [r7, #4]
 800c106:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c108:	0212      	lsls	r2, r2, #8
 800c10a:	4311      	orrs	r1, r2
 800c10c:	687a      	ldr	r2, [r7, #4]
 800c10e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c110:	4311      	orrs	r1, r2
 800c112:	687a      	ldr	r2, [r7, #4]
 800c114:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800c116:	4311      	orrs	r1, r2
 800c118:	687a      	ldr	r2, [r7, #4]
 800c11a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800c11c:	430a      	orrs	r2, r1
 800c11e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c122:	4313      	orrs	r3, r2
 800c124:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800c126:	f7ff fc34 	bl	800b992 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c12a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c12e:	68db      	ldr	r3, [r3, #12]
 800c130:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c134:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c138:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c13a:	f7f9 fe49 	bl	8005dd0 <HAL_GetTick>
 800c13e:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c140:	e008      	b.n	800c154 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c142:	f7f9 fe45 	bl	8005dd0 <HAL_GetTick>
 800c146:	4602      	mov	r2, r0
 800c148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c14a:	1ad3      	subs	r3, r2, r3
 800c14c:	2b02      	cmp	r3, #2
 800c14e:	d901      	bls.n	800c154 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 800c150:	2303      	movs	r3, #3
 800c152:	e063      	b.n	800c21c <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c154:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d0ef      	beq.n	800c142 <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c162:	e05a      	b.n	800c21a <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800c164:	2301      	movs	r3, #1
 800c166:	e059      	b.n	800c21c <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c172:	2b00      	cmp	r3, #0
 800c174:	d151      	bne.n	800c21a <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800c176:	f7ff fc0c 	bl	800b992 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c17a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c17e:	68db      	ldr	r3, [r3, #12]
 800c180:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c188:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c18a:	f7f9 fe21 	bl	8005dd0 <HAL_GetTick>
 800c18e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c190:	e008      	b.n	800c1a4 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c192:	f7f9 fe1d 	bl	8005dd0 <HAL_GetTick>
 800c196:	4602      	mov	r2, r0
 800c198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c19a:	1ad3      	subs	r3, r2, r3
 800c19c:	2b02      	cmp	r3, #2
 800c19e:	d901      	bls.n	800c1a4 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 800c1a0:	2303      	movs	r3, #3
 800c1a2:	e03b      	b.n	800c21c <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c1a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d0ef      	beq.n	800c192 <HAL_RCC_OscConfig+0x686>
 800c1b2:	e032      	b.n	800c21a <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c1b4:	693b      	ldr	r3, [r7, #16]
 800c1b6:	2b0c      	cmp	r3, #12
 800c1b8:	d02d      	beq.n	800c216 <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c1ba:	f7ff fbf9 	bl	800b9b0 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800c1be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c1c2:	68db      	ldr	r3, [r3, #12]
 800c1c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c1c8:	f023 0303 	bic.w	r3, r3, #3
 800c1cc:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 800c1ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c1d2:	68db      	ldr	r3, [r3, #12]
 800c1d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c1d8:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800c1dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c1e0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c1e2:	f7f9 fdf5 	bl	8005dd0 <HAL_GetTick>
 800c1e6:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c1e8:	e00d      	b.n	800c206 <HAL_RCC_OscConfig+0x6fa>
 800c1ea:	bf00      	nop
 800c1ec:	58000400 	.word	0x58000400
 800c1f0:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c1f4:	f7f9 fdec 	bl	8005dd0 <HAL_GetTick>
 800c1f8:	4602      	mov	r2, r0
 800c1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1fc:	1ad3      	subs	r3, r2, r3
 800c1fe:	2b02      	cmp	r3, #2
 800c200:	d901      	bls.n	800c206 <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 800c202:	2303      	movs	r3, #3
 800c204:	e00a      	b.n	800c21c <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c206:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c210:	2b00      	cmp	r3, #0
 800c212:	d1ef      	bne.n	800c1f4 <HAL_RCC_OscConfig+0x6e8>
 800c214:	e001      	b.n	800c21a <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800c216:	2301      	movs	r3, #1
 800c218:	e000      	b.n	800c21c <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 800c21a:	2300      	movs	r3, #0
}
 800c21c:	4618      	mov	r0, r3
 800c21e:	3734      	adds	r7, #52	; 0x34
 800c220:	46bd      	mov	sp, r7
 800c222:	bd90      	pop	{r4, r7, pc}

0800c224 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b084      	sub	sp, #16
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
 800c22c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d101      	bne.n	800c238 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c234:	2301      	movs	r3, #1
 800c236:	e12d      	b.n	800c494 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c238:	4b98      	ldr	r3, [pc, #608]	; (800c49c <HAL_RCC_ClockConfig+0x278>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	f003 0307 	and.w	r3, r3, #7
 800c240:	683a      	ldr	r2, [r7, #0]
 800c242:	429a      	cmp	r2, r3
 800c244:	d91b      	bls.n	800c27e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c246:	4b95      	ldr	r3, [pc, #596]	; (800c49c <HAL_RCC_ClockConfig+0x278>)
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	f023 0207 	bic.w	r2, r3, #7
 800c24e:	4993      	ldr	r1, [pc, #588]	; (800c49c <HAL_RCC_ClockConfig+0x278>)
 800c250:	683b      	ldr	r3, [r7, #0]
 800c252:	4313      	orrs	r3, r2
 800c254:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c256:	f7f9 fdbb 	bl	8005dd0 <HAL_GetTick>
 800c25a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c25c:	e008      	b.n	800c270 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800c25e:	f7f9 fdb7 	bl	8005dd0 <HAL_GetTick>
 800c262:	4602      	mov	r2, r0
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	1ad3      	subs	r3, r2, r3
 800c268:	2b02      	cmp	r3, #2
 800c26a:	d901      	bls.n	800c270 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800c26c:	2303      	movs	r3, #3
 800c26e:	e111      	b.n	800c494 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c270:	4b8a      	ldr	r3, [pc, #552]	; (800c49c <HAL_RCC_ClockConfig+0x278>)
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	f003 0307 	and.w	r3, r3, #7
 800c278:	683a      	ldr	r2, [r7, #0]
 800c27a:	429a      	cmp	r2, r3
 800c27c:	d1ef      	bne.n	800c25e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	f003 0302 	and.w	r3, r3, #2
 800c286:	2b00      	cmp	r3, #0
 800c288:	d016      	beq.n	800c2b8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	689b      	ldr	r3, [r3, #8]
 800c28e:	4618      	mov	r0, r3
 800c290:	f7ff fad7 	bl	800b842 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800c294:	f7f9 fd9c 	bl	8005dd0 <HAL_GetTick>
 800c298:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800c29a:	e008      	b.n	800c2ae <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800c29c:	f7f9 fd98 	bl	8005dd0 <HAL_GetTick>
 800c2a0:	4602      	mov	r2, r0
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	1ad3      	subs	r3, r2, r3
 800c2a6:	2b02      	cmp	r3, #2
 800c2a8:	d901      	bls.n	800c2ae <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800c2aa:	2303      	movs	r3, #3
 800c2ac:	e0f2      	b.n	800c494 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800c2ae:	f7ff fbd1 	bl	800ba54 <LL_RCC_IsActiveFlag_HPRE>
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d0f1      	beq.n	800c29c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	f003 0320 	and.w	r3, r3, #32
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d016      	beq.n	800c2f2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	695b      	ldr	r3, [r3, #20]
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	f7ff face 	bl	800b86a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800c2ce:	f7f9 fd7f 	bl	8005dd0 <HAL_GetTick>
 800c2d2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800c2d4:	e008      	b.n	800c2e8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800c2d6:	f7f9 fd7b 	bl	8005dd0 <HAL_GetTick>
 800c2da:	4602      	mov	r2, r0
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	1ad3      	subs	r3, r2, r3
 800c2e0:	2b02      	cmp	r3, #2
 800c2e2:	d901      	bls.n	800c2e8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800c2e4:	2303      	movs	r3, #3
 800c2e6:	e0d5      	b.n	800c494 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800c2e8:	f7ff fbc6 	bl	800ba78 <LL_RCC_IsActiveFlag_C2HPRE>
 800c2ec:	4603      	mov	r3, r0
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d0f1      	beq.n	800c2d6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d016      	beq.n	800c32c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	699b      	ldr	r3, [r3, #24]
 800c302:	4618      	mov	r0, r3
 800c304:	f7ff fac7 	bl	800b896 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800c308:	f7f9 fd62 	bl	8005dd0 <HAL_GetTick>
 800c30c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800c30e:	e008      	b.n	800c322 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800c310:	f7f9 fd5e 	bl	8005dd0 <HAL_GetTick>
 800c314:	4602      	mov	r2, r0
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	1ad3      	subs	r3, r2, r3
 800c31a:	2b02      	cmp	r3, #2
 800c31c:	d901      	bls.n	800c322 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800c31e:	2303      	movs	r3, #3
 800c320:	e0b8      	b.n	800c494 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800c322:	f7ff fbbc 	bl	800ba9e <LL_RCC_IsActiveFlag_SHDHPRE>
 800c326:	4603      	mov	r3, r0
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d0f1      	beq.n	800c310 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	f003 0304 	and.w	r3, r3, #4
 800c334:	2b00      	cmp	r3, #0
 800c336:	d016      	beq.n	800c366 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	68db      	ldr	r3, [r3, #12]
 800c33c:	4618      	mov	r0, r3
 800c33e:	f7ff fac1 	bl	800b8c4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800c342:	f7f9 fd45 	bl	8005dd0 <HAL_GetTick>
 800c346:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800c348:	e008      	b.n	800c35c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800c34a:	f7f9 fd41 	bl	8005dd0 <HAL_GetTick>
 800c34e:	4602      	mov	r2, r0
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	1ad3      	subs	r3, r2, r3
 800c354:	2b02      	cmp	r3, #2
 800c356:	d901      	bls.n	800c35c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800c358:	2303      	movs	r3, #3
 800c35a:	e09b      	b.n	800c494 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800c35c:	f7ff fbb2 	bl	800bac4 <LL_RCC_IsActiveFlag_PPRE1>
 800c360:	4603      	mov	r3, r0
 800c362:	2b00      	cmp	r3, #0
 800c364:	d0f1      	beq.n	800c34a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	f003 0308 	and.w	r3, r3, #8
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d017      	beq.n	800c3a2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	691b      	ldr	r3, [r3, #16]
 800c376:	00db      	lsls	r3, r3, #3
 800c378:	4618      	mov	r0, r3
 800c37a:	f7ff fab7 	bl	800b8ec <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800c37e:	f7f9 fd27 	bl	8005dd0 <HAL_GetTick>
 800c382:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800c384:	e008      	b.n	800c398 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800c386:	f7f9 fd23 	bl	8005dd0 <HAL_GetTick>
 800c38a:	4602      	mov	r2, r0
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	1ad3      	subs	r3, r2, r3
 800c390:	2b02      	cmp	r3, #2
 800c392:	d901      	bls.n	800c398 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800c394:	2303      	movs	r3, #3
 800c396:	e07d      	b.n	800c494 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800c398:	f7ff fba6 	bl	800bae8 <LL_RCC_IsActiveFlag_PPRE2>
 800c39c:	4603      	mov	r3, r0
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d0f1      	beq.n	800c386 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	f003 0301 	and.w	r3, r3, #1
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d043      	beq.n	800c436 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	685b      	ldr	r3, [r3, #4]
 800c3b2:	2b02      	cmp	r3, #2
 800c3b4:	d106      	bne.n	800c3c4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800c3b6:	f7ff f857 	bl	800b468 <LL_RCC_HSE_IsReady>
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d11e      	bne.n	800c3fe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800c3c0:	2301      	movs	r3, #1
 800c3c2:	e067      	b.n	800c494 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	685b      	ldr	r3, [r3, #4]
 800c3c8:	2b03      	cmp	r3, #3
 800c3ca:	d106      	bne.n	800c3da <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800c3cc:	f7ff faff 	bl	800b9ce <LL_RCC_PLL_IsReady>
 800c3d0:	4603      	mov	r3, r0
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d113      	bne.n	800c3fe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800c3d6:	2301      	movs	r3, #1
 800c3d8:	e05c      	b.n	800c494 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	685b      	ldr	r3, [r3, #4]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d106      	bne.n	800c3f0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800c3e2:	f7ff f9bf 	bl	800b764 <LL_RCC_MSI_IsReady>
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d108      	bne.n	800c3fe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800c3ec:	2301      	movs	r3, #1
 800c3ee:	e051      	b.n	800c494 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800c3f0:	f7ff f86a 	bl	800b4c8 <LL_RCC_HSI_IsReady>
 800c3f4:	4603      	mov	r3, r0
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d101      	bne.n	800c3fe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800c3fa:	2301      	movs	r3, #1
 800c3fc:	e04a      	b.n	800c494 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	685b      	ldr	r3, [r3, #4]
 800c402:	4618      	mov	r0, r3
 800c404:	f7ff f9fd 	bl	800b802 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c408:	f7f9 fce2 	bl	8005dd0 <HAL_GetTick>
 800c40c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c40e:	e00a      	b.n	800c426 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c410:	f7f9 fcde 	bl	8005dd0 <HAL_GetTick>
 800c414:	4602      	mov	r2, r0
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	1ad3      	subs	r3, r2, r3
 800c41a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c41e:	4293      	cmp	r3, r2
 800c420:	d901      	bls.n	800c426 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800c422:	2303      	movs	r3, #3
 800c424:	e036      	b.n	800c494 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c426:	f7ff fa00 	bl	800b82a <LL_RCC_GetSysClkSource>
 800c42a:	4602      	mov	r2, r0
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	685b      	ldr	r3, [r3, #4]
 800c430:	009b      	lsls	r3, r3, #2
 800c432:	429a      	cmp	r2, r3
 800c434:	d1ec      	bne.n	800c410 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c436:	4b19      	ldr	r3, [pc, #100]	; (800c49c <HAL_RCC_ClockConfig+0x278>)
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	f003 0307 	and.w	r3, r3, #7
 800c43e:	683a      	ldr	r2, [r7, #0]
 800c440:	429a      	cmp	r2, r3
 800c442:	d21b      	bcs.n	800c47c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c444:	4b15      	ldr	r3, [pc, #84]	; (800c49c <HAL_RCC_ClockConfig+0x278>)
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	f023 0207 	bic.w	r2, r3, #7
 800c44c:	4913      	ldr	r1, [pc, #76]	; (800c49c <HAL_RCC_ClockConfig+0x278>)
 800c44e:	683b      	ldr	r3, [r7, #0]
 800c450:	4313      	orrs	r3, r2
 800c452:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c454:	f7f9 fcbc 	bl	8005dd0 <HAL_GetTick>
 800c458:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c45a:	e008      	b.n	800c46e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800c45c:	f7f9 fcb8 	bl	8005dd0 <HAL_GetTick>
 800c460:	4602      	mov	r2, r0
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	1ad3      	subs	r3, r2, r3
 800c466:	2b02      	cmp	r3, #2
 800c468:	d901      	bls.n	800c46e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800c46a:	2303      	movs	r3, #3
 800c46c:	e012      	b.n	800c494 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c46e:	4b0b      	ldr	r3, [pc, #44]	; (800c49c <HAL_RCC_ClockConfig+0x278>)
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	f003 0307 	and.w	r3, r3, #7
 800c476:	683a      	ldr	r2, [r7, #0]
 800c478:	429a      	cmp	r2, r3
 800c47a:	d1ef      	bne.n	800c45c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800c47c:	f000 f87c 	bl	800c578 <HAL_RCC_GetHCLKFreq>
 800c480:	4602      	mov	r2, r0
 800c482:	4b07      	ldr	r3, [pc, #28]	; (800c4a0 <HAL_RCC_ClockConfig+0x27c>)
 800c484:	601a      	str	r2, [r3, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800c486:	f7f9 fcaf 	bl	8005de8 <HAL_GetTickPrio>
 800c48a:	4603      	mov	r3, r0
 800c48c:	4618      	mov	r0, r3
 800c48e:	f7f8 fb6d 	bl	8004b6c <HAL_InitTick>
 800c492:	4603      	mov	r3, r0
}
 800c494:	4618      	mov	r0, r3
 800c496:	3710      	adds	r7, #16
 800c498:	46bd      	mov	sp, r7
 800c49a:	bd80      	pop	{r7, pc}
 800c49c:	58004000 	.word	0x58004000
 800c4a0:	20000078 	.word	0x20000078

0800c4a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c4a4:	b590      	push	{r4, r7, lr}
 800c4a6:	b085      	sub	sp, #20
 800c4a8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c4aa:	f7ff f9be 	bl	800b82a <LL_RCC_GetSysClkSource>
 800c4ae:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d10a      	bne.n	800c4cc <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800c4b6:	f7ff f97a 	bl	800b7ae <LL_RCC_MSI_GetRange>
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	091b      	lsrs	r3, r3, #4
 800c4be:	f003 030f 	and.w	r3, r3, #15
 800c4c2:	4a2a      	ldr	r2, [pc, #168]	; (800c56c <HAL_RCC_GetSysClockFreq+0xc8>)
 800c4c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4c8:	60fb      	str	r3, [r7, #12]
 800c4ca:	e04a      	b.n	800c562 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	2b04      	cmp	r3, #4
 800c4d0:	d102      	bne.n	800c4d8 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800c4d2:	4b27      	ldr	r3, [pc, #156]	; (800c570 <HAL_RCC_GetSysClockFreq+0xcc>)
 800c4d4:	60fb      	str	r3, [r7, #12]
 800c4d6:	e044      	b.n	800c562 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	2b08      	cmp	r3, #8
 800c4dc:	d10a      	bne.n	800c4f4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800c4de:	f7fe ff93 	bl	800b408 <LL_RCC_HSE_IsEnabledDiv2>
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	2b01      	cmp	r3, #1
 800c4e6:	d102      	bne.n	800c4ee <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800c4e8:	4b21      	ldr	r3, [pc, #132]	; (800c570 <HAL_RCC_GetSysClockFreq+0xcc>)
 800c4ea:	60fb      	str	r3, [r7, #12]
 800c4ec:	e039      	b.n	800c562 <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800c4ee:	4b21      	ldr	r3, [pc, #132]	; (800c574 <HAL_RCC_GetSysClockFreq+0xd0>)
 800c4f0:	60fb      	str	r3, [r7, #12]
 800c4f2:	e036      	b.n	800c562 <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800c4f4:	f7ff faa2 	bl	800ba3c <LL_RCC_PLL_GetMainSource>
 800c4f8:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800c4fa:	683b      	ldr	r3, [r7, #0]
 800c4fc:	2b02      	cmp	r3, #2
 800c4fe:	d002      	beq.n	800c506 <HAL_RCC_GetSysClockFreq+0x62>
 800c500:	2b03      	cmp	r3, #3
 800c502:	d003      	beq.n	800c50c <HAL_RCC_GetSysClockFreq+0x68>
 800c504:	e00d      	b.n	800c522 <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800c506:	4b1a      	ldr	r3, [pc, #104]	; (800c570 <HAL_RCC_GetSysClockFreq+0xcc>)
 800c508:	60bb      	str	r3, [r7, #8]
        break;
 800c50a:	e015      	b.n	800c538 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800c50c:	f7fe ff7c 	bl	800b408 <LL_RCC_HSE_IsEnabledDiv2>
 800c510:	4603      	mov	r3, r0
 800c512:	2b01      	cmp	r3, #1
 800c514:	d102      	bne.n	800c51c <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800c516:	4b16      	ldr	r3, [pc, #88]	; (800c570 <HAL_RCC_GetSysClockFreq+0xcc>)
 800c518:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800c51a:	e00d      	b.n	800c538 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 800c51c:	4b15      	ldr	r3, [pc, #84]	; (800c574 <HAL_RCC_GetSysClockFreq+0xd0>)
 800c51e:	60bb      	str	r3, [r7, #8]
        break;
 800c520:	e00a      	b.n	800c538 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800c522:	f7ff f944 	bl	800b7ae <LL_RCC_MSI_GetRange>
 800c526:	4603      	mov	r3, r0
 800c528:	091b      	lsrs	r3, r3, #4
 800c52a:	f003 030f 	and.w	r3, r3, #15
 800c52e:	4a0f      	ldr	r2, [pc, #60]	; (800c56c <HAL_RCC_GetSysClockFreq+0xc8>)
 800c530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c534:	60bb      	str	r3, [r7, #8]
        break;
 800c536:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 800c538:	f7ff fa5b 	bl	800b9f2 <LL_RCC_PLL_GetN>
 800c53c:	4602      	mov	r2, r0
 800c53e:	68bb      	ldr	r3, [r7, #8]
 800c540:	fb03 f402 	mul.w	r4, r3, r2
 800c544:	f7ff fa6e 	bl	800ba24 <LL_RCC_PLL_GetDivider>
 800c548:	4603      	mov	r3, r0
 800c54a:	091b      	lsrs	r3, r3, #4
 800c54c:	3301      	adds	r3, #1
 800c54e:	fbb4 f4f3 	udiv	r4, r4, r3
 800c552:	f7ff fa5b 	bl	800ba0c <LL_RCC_PLL_GetR>
 800c556:	4603      	mov	r3, r0
 800c558:	0f5b      	lsrs	r3, r3, #29
 800c55a:	3301      	adds	r3, #1
 800c55c:	fbb4 f3f3 	udiv	r3, r4, r3
 800c560:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 800c562:	68fb      	ldr	r3, [r7, #12]
}
 800c564:	4618      	mov	r0, r3
 800c566:	3714      	adds	r7, #20
 800c568:	46bd      	mov	sp, r7
 800c56a:	bd90      	pop	{r4, r7, pc}
 800c56c:	0801c3ec 	.word	0x0801c3ec
 800c570:	00f42400 	.word	0x00f42400
 800c574:	01e84800 	.word	0x01e84800

0800c578 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c578:	b598      	push	{r3, r4, r7, lr}
 800c57a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800c57c:	f7ff ff92 	bl	800c4a4 <HAL_RCC_GetSysClockFreq>
 800c580:	4604      	mov	r4, r0
 800c582:	f7ff f9c7 	bl	800b914 <LL_RCC_GetAHBPrescaler>
 800c586:	4603      	mov	r3, r0
 800c588:	091b      	lsrs	r3, r3, #4
 800c58a:	f003 030f 	and.w	r3, r3, #15
 800c58e:	4a03      	ldr	r2, [pc, #12]	; (800c59c <HAL_RCC_GetHCLKFreq+0x24>)
 800c590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c594:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800c598:	4618      	mov	r0, r3
 800c59a:	bd98      	pop	{r3, r4, r7, pc}
 800c59c:	0801c38c 	.word	0x0801c38c

0800c5a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c5a0:	b598      	push	{r3, r4, r7, lr}
 800c5a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800c5a4:	f7ff ffe8 	bl	800c578 <HAL_RCC_GetHCLKFreq>
 800c5a8:	4604      	mov	r4, r0
 800c5aa:	f7ff f9e6 	bl	800b97a <LL_RCC_GetAPB2Prescaler>
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	0adb      	lsrs	r3, r3, #11
 800c5b2:	f003 0307 	and.w	r3, r3, #7
 800c5b6:	4a04      	ldr	r2, [pc, #16]	; (800c5c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 800c5b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5bc:	f003 031f 	and.w	r3, r3, #31
 800c5c0:	fa24 f303 	lsr.w	r3, r4, r3
}
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	bd98      	pop	{r3, r4, r7, pc}
 800c5c8:	0801c3cc 	.word	0x0801c3cc

0800c5cc <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b082      	sub	sp, #8
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
 800c5d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |  \
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	226f      	movs	r2, #111	; 0x6f
 800c5da:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 800c5dc:	f7ff f925 	bl	800b82a <LL_RCC_GetSysClkSource>
 800c5e0:	4602      	mov	r2, r0
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 800c5e6:	f7ff f995 	bl	800b914 <LL_RCC_GetAHBPrescaler>
 800c5ea:	4602      	mov	r2, r0
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 800c5f0:	f7ff f9b7 	bl	800b962 <LL_RCC_GetAPB1Prescaler>
 800c5f4:	4602      	mov	r2, r0
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 800c5fa:	f7ff f9be 	bl	800b97a <LL_RCC_GetAPB2Prescaler>
 800c5fe:	4602      	mov	r2, r0
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 800c604:	f7ff f992 	bl	800b92c <LL_C2_RCC_GetAHBPrescaler>
 800c608:	4602      	mov	r2, r0
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 800c60e:	f7ff f99a 	bl	800b946 <LL_RCC_GetAHB4Prescaler>
 800c612:	4602      	mov	r2, r0
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800c618:	4b04      	ldr	r3, [pc, #16]	; (800c62c <HAL_RCC_GetClockConfig+0x60>)
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	f003 0207 	and.w	r2, r3, #7
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	601a      	str	r2, [r3, #0]
}
 800c624:	bf00      	nop
 800c626:	3708      	adds	r7, #8
 800c628:	46bd      	mov	sp, r7
 800c62a:	bd80      	pop	{r7, pc}
 800c62c:	58004000 	.word	0x58004000

0800c630 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800c630:	b590      	push	{r4, r7, lr}
 800c632:	b085      	sub	sp, #20
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	2bb0      	cmp	r3, #176	; 0xb0
 800c63c:	d903      	bls.n	800c646 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800c63e:	4b15      	ldr	r3, [pc, #84]	; (800c694 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800c640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c642:	60fb      	str	r3, [r7, #12]
 800c644:	e007      	b.n	800c656 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	091b      	lsrs	r3, r3, #4
 800c64a:	f003 030f 	and.w	r3, r3, #15
 800c64e:	4a11      	ldr	r2, [pc, #68]	; (800c694 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800c650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c654:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800c656:	f7ff f976 	bl	800b946 <LL_RCC_GetAHB4Prescaler>
 800c65a:	4603      	mov	r3, r0
 800c65c:	091b      	lsrs	r3, r3, #4
 800c65e:	f003 030f 	and.w	r3, r3, #15
 800c662:	4a0d      	ldr	r2, [pc, #52]	; (800c698 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800c664:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c668:	68fa      	ldr	r2, [r7, #12]
 800c66a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c66e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800c670:	68bb      	ldr	r3, [r7, #8]
 800c672:	4a0a      	ldr	r2, [pc, #40]	; (800c69c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800c674:	fba2 2303 	umull	r2, r3, r2, r3
 800c678:	0c9c      	lsrs	r4, r3, #18
 800c67a:	f7fe fea7 	bl	800b3cc <HAL_PWREx_GetVoltageRange>
 800c67e:	4603      	mov	r3, r0
 800c680:	4619      	mov	r1, r3
 800c682:	4620      	mov	r0, r4
 800c684:	f000 f80c 	bl	800c6a0 <RCC_SetFlashLatency>
 800c688:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 800c68a:	4618      	mov	r0, r3
 800c68c:	3714      	adds	r7, #20
 800c68e:	46bd      	mov	sp, r7
 800c690:	bd90      	pop	{r4, r7, pc}
 800c692:	bf00      	nop
 800c694:	0801c3ec 	.word	0x0801c3ec
 800c698:	0801c38c 	.word	0x0801c38c
 800c69c:	431bde83 	.word	0x431bde83

0800c6a0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800c6a0:	b590      	push	{r4, r7, lr}
 800c6a2:	b093      	sub	sp, #76	; 0x4c
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]
 800c6a8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800c6aa:	4b39      	ldr	r3, [pc, #228]	; (800c790 <RCC_SetFlashLatency+0xf0>)
 800c6ac:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800c6b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c6b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800c6b6:	4a37      	ldr	r2, [pc, #220]	; (800c794 <RCC_SetFlashLatency+0xf4>)
 800c6b8:	f107 031c 	add.w	r3, r7, #28
 800c6bc:	ca07      	ldmia	r2, {r0, r1, r2}
 800c6be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800c6c2:	4b35      	ldr	r3, [pc, #212]	; (800c798 <RCC_SetFlashLatency+0xf8>)
 800c6c4:	f107 040c 	add.w	r4, r7, #12
 800c6c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c6ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c6d8:	d11c      	bne.n	800c714 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800c6da:	2300      	movs	r3, #0
 800c6dc:	643b      	str	r3, [r7, #64]	; 0x40
 800c6de:	e015      	b.n	800c70c <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800c6e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6e2:	009b      	lsls	r3, r3, #2
 800c6e4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800c6e8:	4413      	add	r3, r2
 800c6ea:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800c6ee:	687a      	ldr	r2, [r7, #4]
 800c6f0:	429a      	cmp	r2, r3
 800c6f2:	d808      	bhi.n	800c706 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800c6f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6f6:	009b      	lsls	r3, r3, #2
 800c6f8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800c6fc:	4413      	add	r3, r2
 800c6fe:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800c702:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800c704:	e022      	b.n	800c74c <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800c706:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c708:	3301      	adds	r3, #1
 800c70a:	643b      	str	r3, [r7, #64]	; 0x40
 800c70c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c70e:	2b03      	cmp	r3, #3
 800c710:	d9e6      	bls.n	800c6e0 <RCC_SetFlashLatency+0x40>
 800c712:	e01b      	b.n	800c74c <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800c714:	2300      	movs	r3, #0
 800c716:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c718:	e015      	b.n	800c746 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800c71a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c71c:	009b      	lsls	r3, r3, #2
 800c71e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800c722:	4413      	add	r3, r2
 800c724:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800c728:	687a      	ldr	r2, [r7, #4]
 800c72a:	429a      	cmp	r2, r3
 800c72c:	d808      	bhi.n	800c740 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800c72e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c730:	009b      	lsls	r3, r3, #2
 800c732:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800c736:	4413      	add	r3, r2
 800c738:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800c73c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800c73e:	e005      	b.n	800c74c <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800c740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c742:	3301      	adds	r3, #1
 800c744:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c748:	2b02      	cmp	r3, #2
 800c74a:	d9e6      	bls.n	800c71a <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 800c74c:	4b13      	ldr	r3, [pc, #76]	; (800c79c <RCC_SetFlashLatency+0xfc>)
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	f023 0207 	bic.w	r2, r3, #7
 800c754:	4911      	ldr	r1, [pc, #68]	; (800c79c <RCC_SetFlashLatency+0xfc>)
 800c756:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c758:	4313      	orrs	r3, r2
 800c75a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c75c:	f7f9 fb38 	bl	8005dd0 <HAL_GetTick>
 800c760:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800c762:	e008      	b.n	800c776 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800c764:	f7f9 fb34 	bl	8005dd0 <HAL_GetTick>
 800c768:	4602      	mov	r2, r0
 800c76a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c76c:	1ad3      	subs	r3, r2, r3
 800c76e:	2b02      	cmp	r3, #2
 800c770:	d901      	bls.n	800c776 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 800c772:	2303      	movs	r3, #3
 800c774:	e007      	b.n	800c786 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800c776:	4b09      	ldr	r3, [pc, #36]	; (800c79c <RCC_SetFlashLatency+0xfc>)
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	f003 0307 	and.w	r3, r3, #7
 800c77e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c780:	429a      	cmp	r2, r3
 800c782:	d1ef      	bne.n	800c764 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 800c784:	2300      	movs	r3, #0
}
 800c786:	4618      	mov	r0, r3
 800c788:	374c      	adds	r7, #76	; 0x4c
 800c78a:	46bd      	mov	sp, r7
 800c78c:	bd90      	pop	{r4, r7, pc}
 800c78e:	bf00      	nop
 800c790:	0801bcdc 	.word	0x0801bcdc
 800c794:	0801bcec 	.word	0x0801bcec
 800c798:	0801bcf8 	.word	0x0801bcf8
 800c79c:	58004000 	.word	0x58004000

0800c7a0 <LL_RCC_LSE_IsEnabled>:
{
 800c7a0:	b480      	push	{r7}
 800c7a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800c7a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c7a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c7ac:	f003 0301 	and.w	r3, r3, #1
 800c7b0:	2b01      	cmp	r3, #1
 800c7b2:	d101      	bne.n	800c7b8 <LL_RCC_LSE_IsEnabled+0x18>
 800c7b4:	2301      	movs	r3, #1
 800c7b6:	e000      	b.n	800c7ba <LL_RCC_LSE_IsEnabled+0x1a>
 800c7b8:	2300      	movs	r3, #0
}
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c2:	4770      	bx	lr

0800c7c4 <LL_RCC_LSE_IsReady>:
{
 800c7c4:	b480      	push	{r7}
 800c7c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800c7c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c7cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c7d0:	f003 0302 	and.w	r3, r3, #2
 800c7d4:	2b02      	cmp	r3, #2
 800c7d6:	d101      	bne.n	800c7dc <LL_RCC_LSE_IsReady+0x18>
 800c7d8:	2301      	movs	r3, #1
 800c7da:	e000      	b.n	800c7de <LL_RCC_LSE_IsReady+0x1a>
 800c7dc:	2300      	movs	r3, #0
}
 800c7de:	4618      	mov	r0, r3
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e6:	4770      	bx	lr

0800c7e8 <LL_RCC_SetRFWKPClockSource>:
{
 800c7e8:	b480      	push	{r7}
 800c7ea:	b083      	sub	sp, #12
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800c7f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c7f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c7f8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800c7fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	4313      	orrs	r3, r2
 800c804:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800c808:	bf00      	nop
 800c80a:	370c      	adds	r7, #12
 800c80c:	46bd      	mov	sp, r7
 800c80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c812:	4770      	bx	lr

0800c814 <LL_RCC_SetSMPSClockSource>:
{
 800c814:	b480      	push	{r7}
 800c816:	b083      	sub	sp, #12
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800c81c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c822:	f023 0203 	bic.w	r2, r3, #3
 800c826:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	4313      	orrs	r3, r2
 800c82e:	624b      	str	r3, [r1, #36]	; 0x24
}
 800c830:	bf00      	nop
 800c832:	370c      	adds	r7, #12
 800c834:	46bd      	mov	sp, r7
 800c836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83a:	4770      	bx	lr

0800c83c <LL_RCC_SetSMPSPrescaler>:
{
 800c83c:	b480      	push	{r7}
 800c83e:	b083      	sub	sp, #12
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800c844:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c84a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800c84e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	4313      	orrs	r3, r2
 800c856:	624b      	str	r3, [r1, #36]	; 0x24
}
 800c858:	bf00      	nop
 800c85a:	370c      	adds	r7, #12
 800c85c:	46bd      	mov	sp, r7
 800c85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c862:	4770      	bx	lr

0800c864 <LL_RCC_SetUSARTClockSource>:
{
 800c864:	b480      	push	{r7}
 800c866:	b083      	sub	sp, #12
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800c86c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c874:	f023 0203 	bic.w	r2, r3, #3
 800c878:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	4313      	orrs	r3, r2
 800c880:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800c884:	bf00      	nop
 800c886:	370c      	adds	r7, #12
 800c888:	46bd      	mov	sp, r7
 800c88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88e:	4770      	bx	lr

0800c890 <LL_RCC_SetLPUARTClockSource>:
{
 800c890:	b480      	push	{r7}
 800c892:	b083      	sub	sp, #12
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800c898:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c89c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c8a0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c8a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	4313      	orrs	r3, r2
 800c8ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800c8b0:	bf00      	nop
 800c8b2:	370c      	adds	r7, #12
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ba:	4770      	bx	lr

0800c8bc <LL_RCC_SetI2CClockSource>:
{
 800c8bc:	b480      	push	{r7}
 800c8be:	b083      	sub	sp, #12
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800c8c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c8c8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	091b      	lsrs	r3, r3, #4
 800c8d0:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800c8d4:	43db      	mvns	r3, r3
 800c8d6:	401a      	ands	r2, r3
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	011b      	lsls	r3, r3, #4
 800c8dc:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800c8e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c8e4:	4313      	orrs	r3, r2
 800c8e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800c8ea:	bf00      	nop
 800c8ec:	370c      	adds	r7, #12
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f4:	4770      	bx	lr

0800c8f6 <LL_RCC_SetLPTIMClockSource>:
{
 800c8f6:	b480      	push	{r7}
 800c8f8:	b083      	sub	sp, #12
 800c8fa:	af00      	add	r7, sp, #0
 800c8fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800c8fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c902:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	0c1b      	lsrs	r3, r3, #16
 800c90a:	041b      	lsls	r3, r3, #16
 800c90c:	43db      	mvns	r3, r3
 800c90e:	401a      	ands	r2, r3
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	041b      	lsls	r3, r3, #16
 800c914:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c918:	4313      	orrs	r3, r2
 800c91a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800c91e:	bf00      	nop
 800c920:	370c      	adds	r7, #12
 800c922:	46bd      	mov	sp, r7
 800c924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c928:	4770      	bx	lr

0800c92a <LL_RCC_SetSAIClockSource>:
{
 800c92a:	b480      	push	{r7}
 800c92c:	b083      	sub	sp, #12
 800c92e:	af00      	add	r7, sp, #0
 800c930:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800c932:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c93a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c93e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	4313      	orrs	r3, r2
 800c946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800c94a:	bf00      	nop
 800c94c:	370c      	adds	r7, #12
 800c94e:	46bd      	mov	sp, r7
 800c950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c954:	4770      	bx	lr

0800c956 <LL_RCC_SetRNGClockSource>:
{
 800c956:	b480      	push	{r7}
 800c958:	b083      	sub	sp, #12
 800c95a:	af00      	add	r7, sp, #0
 800c95c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800c95e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c966:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800c96a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	4313      	orrs	r3, r2
 800c972:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800c976:	bf00      	nop
 800c978:	370c      	adds	r7, #12
 800c97a:	46bd      	mov	sp, r7
 800c97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c980:	4770      	bx	lr

0800c982 <LL_RCC_SetCLK48ClockSource>:
{
 800c982:	b480      	push	{r7}
 800c984:	b083      	sub	sp, #12
 800c986:	af00      	add	r7, sp, #0
 800c988:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800c98a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c98e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c992:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c996:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	4313      	orrs	r3, r2
 800c99e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800c9a2:	bf00      	nop
 800c9a4:	370c      	adds	r7, #12
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ac:	4770      	bx	lr

0800c9ae <LL_RCC_SetUSBClockSource>:
{
 800c9ae:	b580      	push	{r7, lr}
 800c9b0:	b082      	sub	sp, #8
 800c9b2:	af00      	add	r7, sp, #0
 800c9b4:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800c9b6:	6878      	ldr	r0, [r7, #4]
 800c9b8:	f7ff ffe3 	bl	800c982 <LL_RCC_SetCLK48ClockSource>
}
 800c9bc:	bf00      	nop
 800c9be:	3708      	adds	r7, #8
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	bd80      	pop	{r7, pc}

0800c9c4 <LL_RCC_SetADCClockSource>:
{
 800c9c4:	b480      	push	{r7}
 800c9c6:	b083      	sub	sp, #12
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800c9cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c9d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c9d4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c9d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	4313      	orrs	r3, r2
 800c9e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800c9e4:	bf00      	nop
 800c9e6:	370c      	adds	r7, #12
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ee:	4770      	bx	lr

0800c9f0 <LL_RCC_SetRTCClockSource>:
{
 800c9f0:	b480      	push	{r7}
 800c9f2:	b083      	sub	sp, #12
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800c9f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c9fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ca00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ca04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	4313      	orrs	r3, r2
 800ca0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800ca10:	bf00      	nop
 800ca12:	370c      	adds	r7, #12
 800ca14:	46bd      	mov	sp, r7
 800ca16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1a:	4770      	bx	lr

0800ca1c <LL_RCC_GetRTCClockSource>:
{
 800ca1c:	b480      	push	{r7}
 800ca1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800ca20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ca24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ca28:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	46bd      	mov	sp, r7
 800ca30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca34:	4770      	bx	lr

0800ca36 <LL_RCC_ForceBackupDomainReset>:
{
 800ca36:	b480      	push	{r7}
 800ca38:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800ca3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ca3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ca42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ca46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ca4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800ca4e:	bf00      	nop
 800ca50:	46bd      	mov	sp, r7
 800ca52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca56:	4770      	bx	lr

0800ca58 <LL_RCC_ReleaseBackupDomainReset>:
{
 800ca58:	b480      	push	{r7}
 800ca5a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800ca5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ca60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ca64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ca68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ca6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800ca70:	bf00      	nop
 800ca72:	46bd      	mov	sp, r7
 800ca74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca78:	4770      	bx	lr

0800ca7a <LL_RCC_PLLSAI1_Enable>:
{
 800ca7a:	b480      	push	{r7}
 800ca7c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800ca7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ca88:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ca8c:	6013      	str	r3, [r2, #0]
}
 800ca8e:	bf00      	nop
 800ca90:	46bd      	mov	sp, r7
 800ca92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca96:	4770      	bx	lr

0800ca98 <LL_RCC_PLLSAI1_Disable>:
{
 800ca98:	b480      	push	{r7}
 800ca9a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800ca9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800caa6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800caaa:	6013      	str	r3, [r2, #0]
}
 800caac:	bf00      	nop
 800caae:	46bd      	mov	sp, r7
 800cab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab4:	4770      	bx	lr

0800cab6 <LL_RCC_PLLSAI1_IsReady>:
{
 800cab6:	b480      	push	{r7}
 800cab8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800caba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cac4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cac8:	d101      	bne.n	800cace <LL_RCC_PLLSAI1_IsReady+0x18>
 800caca:	2301      	movs	r3, #1
 800cacc:	e000      	b.n	800cad0 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800cace:	2300      	movs	r3, #0
}
 800cad0:	4618      	mov	r0, r3
 800cad2:	46bd      	mov	sp, r7
 800cad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad8:	4770      	bx	lr

0800cada <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800cada:	b580      	push	{r7, lr}
 800cadc:	b088      	sub	sp, #32
 800cade:	af00      	add	r7, sp, #0
 800cae0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800cae2:	2300      	movs	r3, #0
 800cae4:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800cae6:	2300      	movs	r3, #0
 800cae8:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d033      	beq.n	800cb5e <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cafa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cafe:	d00c      	beq.n	800cb1a <HAL_RCCEx_PeriphCLKConfig+0x40>
 800cb00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cb04:	d802      	bhi.n	800cb0c <HAL_RCCEx_PeriphCLKConfig+0x32>
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d010      	beq.n	800cb2c <HAL_RCCEx_PeriphCLKConfig+0x52>
 800cb0a:	e017      	b.n	800cb3c <HAL_RCCEx_PeriphCLKConfig+0x62>
 800cb0c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cb10:	d017      	beq.n	800cb42 <HAL_RCCEx_PeriphCLKConfig+0x68>
 800cb12:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800cb16:	d016      	beq.n	800cb46 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 800cb18:	e010      	b.n	800cb3c <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800cb1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cb1e:	68db      	ldr	r3, [r3, #12]
 800cb20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800cb24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cb28:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800cb2a:	e00d      	b.n	800cb48 <HAL_RCCEx_PeriphCLKConfig+0x6e>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	3304      	adds	r3, #4
 800cb30:	4618      	mov	r0, r3
 800cb32:	f000 f947 	bl	800cdc4 <RCCEx_PLLSAI1_ConfigNP>
 800cb36:	4603      	mov	r3, r0
 800cb38:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800cb3a:	e005      	b.n	800cb48 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800cb3c:	2301      	movs	r3, #1
 800cb3e:	77fb      	strb	r3, [r7, #31]
        break;
 800cb40:	e002      	b.n	800cb48 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 800cb42:	bf00      	nop
 800cb44:	e000      	b.n	800cb48 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 800cb46:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cb48:	7ffb      	ldrb	r3, [r7, #31]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d105      	bne.n	800cb5a <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb52:	4618      	mov	r0, r3
 800cb54:	f7ff fee9 	bl	800c92a <LL_RCC_SetSAIClockSource>
 800cb58:	e001      	b.n	800cb5e <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb5a:	7ffb      	ldrb	r3, [r7, #31]
 800cb5c:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d046      	beq.n	800cbf8 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800cb6a:	f7ff ff57 	bl	800ca1c <LL_RCC_GetRTCClockSource>
 800cb6e:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb74:	69ba      	ldr	r2, [r7, #24]
 800cb76:	429a      	cmp	r2, r3
 800cb78:	d03c      	beq.n	800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800cb7a:	f7fe fc17 	bl	800b3ac <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800cb7e:	69bb      	ldr	r3, [r7, #24]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d105      	bne.n	800cb90 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb88:	4618      	mov	r0, r3
 800cb8a:	f7ff ff31 	bl	800c9f0 <LL_RCC_SetRTCClockSource>
 800cb8e:	e02e      	b.n	800cbee <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800cb90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cb94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cb98:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800cb9a:	f7ff ff4c 	bl	800ca36 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800cb9e:	f7ff ff5b 	bl	800ca58 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800cba2:	697b      	ldr	r3, [r7, #20]
 800cba4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbac:	4313      	orrs	r3, r2
 800cbae:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800cbb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800cbb4:	697b      	ldr	r3, [r7, #20]
 800cbb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800cbba:	f7ff fdf1 	bl	800c7a0 <LL_RCC_LSE_IsEnabled>
 800cbbe:	4603      	mov	r3, r0
 800cbc0:	2b01      	cmp	r3, #1
 800cbc2:	d114      	bne.n	800cbee <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800cbc4:	f7f9 f904 	bl	8005dd0 <HAL_GetTick>
 800cbc8:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800cbca:	e00b      	b.n	800cbe4 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cbcc:	f7f9 f900 	bl	8005dd0 <HAL_GetTick>
 800cbd0:	4602      	mov	r2, r0
 800cbd2:	693b      	ldr	r3, [r7, #16]
 800cbd4:	1ad3      	subs	r3, r2, r3
 800cbd6:	f241 3288 	movw	r2, #5000	; 0x1388
 800cbda:	4293      	cmp	r3, r2
 800cbdc:	d902      	bls.n	800cbe4 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 800cbde:	2303      	movs	r3, #3
 800cbe0:	77fb      	strb	r3, [r7, #31]
              break;
 800cbe2:	e004      	b.n	800cbee <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 800cbe4:	f7ff fdee 	bl	800c7c4 <LL_RCC_LSE_IsReady>
 800cbe8:	4603      	mov	r3, r0
 800cbea:	2b01      	cmp	r3, #1
 800cbec:	d1ee      	bne.n	800cbcc <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800cbee:	7ffb      	ldrb	r3, [r7, #31]
 800cbf0:	77bb      	strb	r3, [r7, #30]
 800cbf2:	e001      	b.n	800cbf8 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cbf4:	7ffb      	ldrb	r3, [r7, #31]
 800cbf6:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	f003 0301 	and.w	r3, r3, #1
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d004      	beq.n	800cc0e <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	699b      	ldr	r3, [r3, #24]
 800cc08:	4618      	mov	r0, r3
 800cc0a:	f7ff fe2b 	bl	800c864 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	f003 0302 	and.w	r3, r3, #2
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d004      	beq.n	800cc24 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	69db      	ldr	r3, [r3, #28]
 800cc1e:	4618      	mov	r0, r3
 800cc20:	f7ff fe36 	bl	800c890 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	f003 0310 	and.w	r3, r3, #16
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d004      	beq.n	800cc3a <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc34:	4618      	mov	r0, r3
 800cc36:	f7ff fe5e 	bl	800c8f6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	f003 0320 	and.w	r3, r3, #32
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d004      	beq.n	800cc50 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	f7ff fe53 	bl	800c8f6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	f003 0304 	and.w	r3, r3, #4
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d004      	beq.n	800cc66 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	6a1b      	ldr	r3, [r3, #32]
 800cc60:	4618      	mov	r0, r3
 800cc62:	f7ff fe2b 	bl	800c8bc <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	f003 0308 	and.w	r3, r3, #8
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d004      	beq.n	800cc7c <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc76:	4618      	mov	r0, r3
 800cc78:	f7ff fe20 	bl	800c8bc <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d022      	beq.n	800ccce <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	f7ff fe8e 	bl	800c9ae <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cc9a:	d107      	bne.n	800ccac <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800cc9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cca0:	68db      	ldr	r3, [r3, #12]
 800cca2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800cca6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ccaa:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccb0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ccb4:	d10b      	bne.n	800ccce <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	3304      	adds	r3, #4
 800ccba:	4618      	mov	r0, r3
 800ccbc:	f000 f8dd 	bl	800ce7a <RCCEx_PLLSAI1_ConfigNQ>
 800ccc0:	4603      	mov	r3, r0
 800ccc2:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 800ccc4:	7ffb      	ldrb	r3, [r7, #31]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d001      	beq.n	800ccce <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* set overall return value */
      status = ret;
 800ccca:	7ffb      	ldrb	r3, [r7, #31]
 800cccc:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d02b      	beq.n	800cd32 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cce2:	d008      	beq.n	800ccf6 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cce8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ccec:	d003      	beq.n	800ccf6 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d105      	bne.n	800cd02 <HAL_RCCEx_PeriphCLKConfig+0x228>
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	f7ff fe2b 	bl	800c956 <LL_RCC_SetRNGClockSource>
 800cd00:	e00a      	b.n	800cd18 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cd0a:	60fb      	str	r3, [r7, #12]
 800cd0c:	2000      	movs	r0, #0
 800cd0e:	f7ff fe22 	bl	800c956 <LL_RCC_SetRNGClockSource>
 800cd12:	68f8      	ldr	r0, [r7, #12]
 800cd14:	f7ff fe35 	bl	800c982 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd1c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800cd20:	d107      	bne.n	800cd32 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800cd22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cd26:	68db      	ldr	r3, [r3, #12]
 800cd28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800cd2c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cd30:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d022      	beq.n	800cd84 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd42:	4618      	mov	r0, r3
 800cd44:	f7ff fe3e 	bl	800c9c4 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd50:	d107      	bne.n	800cd62 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800cd52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cd56:	68db      	ldr	r3, [r3, #12]
 800cd58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800cd5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cd60:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cd6a:	d10b      	bne.n	800cd84 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	3304      	adds	r3, #4
 800cd70:	4618      	mov	r0, r3
 800cd72:	f000 f8dd 	bl	800cf30 <RCCEx_PLLSAI1_ConfigNR>
 800cd76:	4603      	mov	r3, r0
 800cd78:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 800cd7a:	7ffb      	ldrb	r3, [r7, #31]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d001      	beq.n	800cd84 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* set overall return value */
      status = ret;
 800cd80:	7ffb      	ldrb	r3, [r7, #31]
 800cd82:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d004      	beq.n	800cd9a <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd94:	4618      	mov	r0, r3
 800cd96:	f7ff fd27 	bl	800c7e8 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d009      	beq.n	800cdba <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cdaa:	4618      	mov	r0, r3
 800cdac:	f7ff fd46 	bl	800c83c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	f7ff fd2d 	bl	800c814 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 800cdba:	7fbb      	ldrb	r3, [r7, #30]
}
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	3720      	adds	r7, #32
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	bd80      	pop	{r7, pc}

0800cdc4 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	b084      	sub	sp, #16
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cdcc:	2300      	movs	r3, #0
 800cdce:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800cdd0:	f7ff fe62 	bl	800ca98 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800cdd4:	f7f8 fffc 	bl	8005dd0 <HAL_GetTick>
 800cdd8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800cdda:	e009      	b.n	800cdf0 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800cddc:	f7f8 fff8 	bl	8005dd0 <HAL_GetTick>
 800cde0:	4602      	mov	r2, r0
 800cde2:	68bb      	ldr	r3, [r7, #8]
 800cde4:	1ad3      	subs	r3, r2, r3
 800cde6:	2b02      	cmp	r3, #2
 800cde8:	d902      	bls.n	800cdf0 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800cdea:	2303      	movs	r3, #3
 800cdec:	73fb      	strb	r3, [r7, #15]
      break;
 800cdee:	e004      	b.n	800cdfa <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800cdf0:	f7ff fe61 	bl	800cab6 <LL_RCC_PLLSAI1_IsReady>
 800cdf4:	4603      	mov	r3, r0
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d1f0      	bne.n	800cddc <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800cdfa:	7bfb      	ldrb	r3, [r7, #15]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d137      	bne.n	800ce70 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800ce00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ce04:	691b      	ldr	r3, [r3, #16]
 800ce06:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	021b      	lsls	r3, r3, #8
 800ce10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ce14:	4313      	orrs	r3, r2
 800ce16:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800ce18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ce1c:	691b      	ldr	r3, [r3, #16]
 800ce1e:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	685b      	ldr	r3, [r3, #4]
 800ce26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ce2a:	4313      	orrs	r3, r2
 800ce2c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800ce2e:	f7ff fe24 	bl	800ca7a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ce32:	f7f8 ffcd 	bl	8005dd0 <HAL_GetTick>
 800ce36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800ce38:	e009      	b.n	800ce4e <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ce3a:	f7f8 ffc9 	bl	8005dd0 <HAL_GetTick>
 800ce3e:	4602      	mov	r2, r0
 800ce40:	68bb      	ldr	r3, [r7, #8]
 800ce42:	1ad3      	subs	r3, r2, r3
 800ce44:	2b02      	cmp	r3, #2
 800ce46:	d902      	bls.n	800ce4e <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800ce48:	2303      	movs	r3, #3
 800ce4a:	73fb      	strb	r3, [r7, #15]
        break;
 800ce4c:	e004      	b.n	800ce58 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800ce4e:	f7ff fe32 	bl	800cab6 <LL_RCC_PLLSAI1_IsReady>
 800ce52:	4603      	mov	r3, r0
 800ce54:	2b01      	cmp	r3, #1
 800ce56:	d1f0      	bne.n	800ce3a <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800ce58:	7bfb      	ldrb	r3, [r7, #15]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d108      	bne.n	800ce70 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800ce5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ce62:	691a      	ldr	r2, [r3, #16]
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	691b      	ldr	r3, [r3, #16]
 800ce68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ce6c:	4313      	orrs	r3, r2
 800ce6e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800ce70:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce72:	4618      	mov	r0, r3
 800ce74:	3710      	adds	r7, #16
 800ce76:	46bd      	mov	sp, r7
 800ce78:	bd80      	pop	{r7, pc}

0800ce7a <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800ce7a:	b580      	push	{r7, lr}
 800ce7c:	b084      	sub	sp, #16
 800ce7e:	af00      	add	r7, sp, #0
 800ce80:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ce82:	2300      	movs	r3, #0
 800ce84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800ce86:	f7ff fe07 	bl	800ca98 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ce8a:	f7f8 ffa1 	bl	8005dd0 <HAL_GetTick>
 800ce8e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800ce90:	e009      	b.n	800cea6 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ce92:	f7f8 ff9d 	bl	8005dd0 <HAL_GetTick>
 800ce96:	4602      	mov	r2, r0
 800ce98:	68bb      	ldr	r3, [r7, #8]
 800ce9a:	1ad3      	subs	r3, r2, r3
 800ce9c:	2b02      	cmp	r3, #2
 800ce9e:	d902      	bls.n	800cea6 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800cea0:	2303      	movs	r3, #3
 800cea2:	73fb      	strb	r3, [r7, #15]
      break;
 800cea4:	e004      	b.n	800ceb0 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800cea6:	f7ff fe06 	bl	800cab6 <LL_RCC_PLLSAI1_IsReady>
 800ceaa:	4603      	mov	r3, r0
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d1f0      	bne.n	800ce92 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800ceb0:	7bfb      	ldrb	r3, [r7, #15]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d137      	bne.n	800cf26 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800ceb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ceba:	691b      	ldr	r3, [r3, #16]
 800cebc:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	021b      	lsls	r3, r3, #8
 800cec6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ceca:	4313      	orrs	r3, r2
 800cecc:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800cece:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ced2:	691b      	ldr	r3, [r3, #16]
 800ced4:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	689b      	ldr	r3, [r3, #8]
 800cedc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800cee0:	4313      	orrs	r3, r2
 800cee2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800cee4:	f7ff fdc9 	bl	800ca7a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cee8:	f7f8 ff72 	bl	8005dd0 <HAL_GetTick>
 800ceec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800ceee:	e009      	b.n	800cf04 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800cef0:	f7f8 ff6e 	bl	8005dd0 <HAL_GetTick>
 800cef4:	4602      	mov	r2, r0
 800cef6:	68bb      	ldr	r3, [r7, #8]
 800cef8:	1ad3      	subs	r3, r2, r3
 800cefa:	2b02      	cmp	r3, #2
 800cefc:	d902      	bls.n	800cf04 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800cefe:	2303      	movs	r3, #3
 800cf00:	73fb      	strb	r3, [r7, #15]
        break;
 800cf02:	e004      	b.n	800cf0e <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800cf04:	f7ff fdd7 	bl	800cab6 <LL_RCC_PLLSAI1_IsReady>
 800cf08:	4603      	mov	r3, r0
 800cf0a:	2b01      	cmp	r3, #1
 800cf0c:	d1f0      	bne.n	800cef0 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800cf0e:	7bfb      	ldrb	r3, [r7, #15]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d108      	bne.n	800cf26 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800cf14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cf18:	691a      	ldr	r2, [r3, #16]
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	691b      	ldr	r3, [r3, #16]
 800cf1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800cf22:	4313      	orrs	r3, r2
 800cf24:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800cf26:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf28:	4618      	mov	r0, r3
 800cf2a:	3710      	adds	r7, #16
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	bd80      	pop	{r7, pc}

0800cf30 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b084      	sub	sp, #16
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cf38:	2300      	movs	r3, #0
 800cf3a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800cf3c:	f7ff fdac 	bl	800ca98 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800cf40:	f7f8 ff46 	bl	8005dd0 <HAL_GetTick>
 800cf44:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800cf46:	e009      	b.n	800cf5c <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800cf48:	f7f8 ff42 	bl	8005dd0 <HAL_GetTick>
 800cf4c:	4602      	mov	r2, r0
 800cf4e:	68bb      	ldr	r3, [r7, #8]
 800cf50:	1ad3      	subs	r3, r2, r3
 800cf52:	2b02      	cmp	r3, #2
 800cf54:	d902      	bls.n	800cf5c <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800cf56:	2303      	movs	r3, #3
 800cf58:	73fb      	strb	r3, [r7, #15]
      break;
 800cf5a:	e004      	b.n	800cf66 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800cf5c:	f7ff fdab 	bl	800cab6 <LL_RCC_PLLSAI1_IsReady>
 800cf60:	4603      	mov	r3, r0
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d1f0      	bne.n	800cf48 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800cf66:	7bfb      	ldrb	r3, [r7, #15]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d137      	bne.n	800cfdc <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800cf6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cf70:	691b      	ldr	r3, [r3, #16]
 800cf72:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	021b      	lsls	r3, r3, #8
 800cf7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800cf80:	4313      	orrs	r3, r2
 800cf82:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800cf84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cf88:	691b      	ldr	r3, [r3, #16]
 800cf8a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	68db      	ldr	r3, [r3, #12]
 800cf92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800cf96:	4313      	orrs	r3, r2
 800cf98:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800cf9a:	f7ff fd6e 	bl	800ca7a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cf9e:	f7f8 ff17 	bl	8005dd0 <HAL_GetTick>
 800cfa2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800cfa4:	e009      	b.n	800cfba <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800cfa6:	f7f8 ff13 	bl	8005dd0 <HAL_GetTick>
 800cfaa:	4602      	mov	r2, r0
 800cfac:	68bb      	ldr	r3, [r7, #8]
 800cfae:	1ad3      	subs	r3, r2, r3
 800cfb0:	2b02      	cmp	r3, #2
 800cfb2:	d902      	bls.n	800cfba <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800cfb4:	2303      	movs	r3, #3
 800cfb6:	73fb      	strb	r3, [r7, #15]
        break;
 800cfb8:	e004      	b.n	800cfc4 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800cfba:	f7ff fd7c 	bl	800cab6 <LL_RCC_PLLSAI1_IsReady>
 800cfbe:	4603      	mov	r3, r0
 800cfc0:	2b01      	cmp	r3, #1
 800cfc2:	d1f0      	bne.n	800cfa6 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800cfc4:	7bfb      	ldrb	r3, [r7, #15]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d108      	bne.n	800cfdc <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800cfca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cfce:	691a      	ldr	r2, [r3, #16]
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	691b      	ldr	r3, [r3, #16]
 800cfd4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800cfd8:	4313      	orrs	r3, r2
 800cfda:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800cfdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfde:	4618      	mov	r0, r3
 800cfe0:	3710      	adds	r7, #16
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	bd80      	pop	{r7, pc}

0800cfe6 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800cfe6:	b580      	push	{r7, lr}
 800cfe8:	b082      	sub	sp, #8
 800cfea:	af00      	add	r7, sp, #0
 800cfec:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d101      	bne.n	800cff8 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800cff4:	2301      	movs	r3, #1
 800cff6:	e090      	b.n	800d11a <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800cffe:	b2db      	uxtb	r3, r3
 800d000:	2b00      	cmp	r3, #0
 800d002:	d106      	bne.n	800d012 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	2200      	movs	r2, #0
 800d008:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800d00c:	6878      	ldr	r0, [r7, #4]
 800d00e:	f7f7 fb73 	bl	80046f8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	2202      	movs	r2, #2
 800d016:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	22ca      	movs	r2, #202	; 0xca
 800d020:	625a      	str	r2, [r3, #36]	; 0x24
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	2253      	movs	r2, #83	; 0x53
 800d028:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800d02a:	6878      	ldr	r0, [r7, #4]
 800d02c:	f000 faba 	bl	800d5a4 <RTC_EnterInitMode>
 800d030:	4603      	mov	r3, r0
 800d032:	2b00      	cmp	r3, #0
 800d034:	d009      	beq.n	800d04a <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	22ff      	movs	r2, #255	; 0xff
 800d03c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	2204      	movs	r2, #4
 800d042:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 800d046:	2301      	movs	r3, #1
 800d048:	e067      	b.n	800d11a <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	689b      	ldr	r3, [r3, #8]
 800d050:	687a      	ldr	r2, [r7, #4]
 800d052:	6812      	ldr	r2, [r2, #0]
 800d054:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d058:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d05c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	6899      	ldr	r1, [r3, #8]
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	685a      	ldr	r2, [r3, #4]
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	691b      	ldr	r3, [r3, #16]
 800d06c:	431a      	orrs	r2, r3
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	699b      	ldr	r3, [r3, #24]
 800d072:	431a      	orrs	r2, r3
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	430a      	orrs	r2, r1
 800d07a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	687a      	ldr	r2, [r7, #4]
 800d082:	68d2      	ldr	r2, [r2, #12]
 800d084:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	6919      	ldr	r1, [r3, #16]
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	689b      	ldr	r3, [r3, #8]
 800d090:	041a      	lsls	r2, r3, #16
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	430a      	orrs	r2, r1
 800d098:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	68da      	ldr	r2, [r3, #12]
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d0a8:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	f022 0203 	bic.w	r2, r2, #3
 800d0b8:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	69da      	ldr	r2, [r3, #28]
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	695b      	ldr	r3, [r3, #20]
 800d0c8:	431a      	orrs	r2, r3
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	430a      	orrs	r2, r1
 800d0d0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	689b      	ldr	r3, [r3, #8]
 800d0d8:	f003 0320 	and.w	r3, r3, #32
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d113      	bne.n	800d108 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d0e0:	6878      	ldr	r0, [r7, #4]
 800d0e2:	f000 fa39 	bl	800d558 <HAL_RTC_WaitForSynchro>
 800d0e6:	4603      	mov	r3, r0
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d00d      	beq.n	800d108 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	22ff      	movs	r2, #255	; 0xff
 800d0f2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	2204      	movs	r2, #4
 800d0f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	2200      	movs	r2, #0
 800d100:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800d104:	2301      	movs	r3, #1
 800d106:	e008      	b.n	800d11a <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	22ff      	movs	r2, #255	; 0xff
 800d10e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	2201      	movs	r2, #1
 800d114:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 800d118:	2300      	movs	r3, #0
  }
}
 800d11a:	4618      	mov	r0, r3
 800d11c:	3708      	adds	r7, #8
 800d11e:	46bd      	mov	sp, r7
 800d120:	bd80      	pop	{r7, pc}

0800d122 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d122:	b590      	push	{r4, r7, lr}
 800d124:	b087      	sub	sp, #28
 800d126:	af00      	add	r7, sp, #0
 800d128:	60f8      	str	r0, [r7, #12]
 800d12a:	60b9      	str	r1, [r7, #8]
 800d12c:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d134:	2b01      	cmp	r3, #1
 800d136:	d101      	bne.n	800d13c <HAL_RTC_SetTime+0x1a>
 800d138:	2302      	movs	r3, #2
 800d13a:	e0b2      	b.n	800d2a2 <HAL_RTC_SetTime+0x180>
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	2201      	movs	r2, #1
 800d140:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	2202      	movs	r2, #2
 800d148:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if(Format == RTC_FORMAT_BIN)
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d126      	bne.n	800d1a0 <HAL_RTC_SetTime+0x7e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	689b      	ldr	r3, [r3, #8]
 800d158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d102      	bne.n	800d166 <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800d160:	68bb      	ldr	r3, [r7, #8]
 800d162:	2200      	movs	r2, #0
 800d164:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800d166:	68bb      	ldr	r3, [r7, #8]
 800d168:	781b      	ldrb	r3, [r3, #0]
 800d16a:	4618      	mov	r0, r3
 800d16c:	f000 fa44 	bl	800d5f8 <RTC_ByteToBcd2>
 800d170:	4603      	mov	r3, r0
 800d172:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800d174:	68bb      	ldr	r3, [r7, #8]
 800d176:	785b      	ldrb	r3, [r3, #1]
 800d178:	4618      	mov	r0, r3
 800d17a:	f000 fa3d 	bl	800d5f8 <RTC_ByteToBcd2>
 800d17e:	4603      	mov	r3, r0
 800d180:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800d182:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800d184:	68bb      	ldr	r3, [r7, #8]
 800d186:	789b      	ldrb	r3, [r3, #2]
 800d188:	4618      	mov	r0, r3
 800d18a:	f000 fa35 	bl	800d5f8 <RTC_ByteToBcd2>
 800d18e:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800d190:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800d194:	68bb      	ldr	r3, [r7, #8]
 800d196:	78db      	ldrb	r3, [r3, #3]
 800d198:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800d19a:	4313      	orrs	r3, r2
 800d19c:	617b      	str	r3, [r7, #20]
 800d19e:	e018      	b.n	800d1d2 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	689b      	ldr	r3, [r3, #8]
 800d1a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d102      	bne.n	800d1b4 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800d1ae:	68bb      	ldr	r3, [r7, #8]
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800d1b4:	68bb      	ldr	r3, [r7, #8]
 800d1b6:	781b      	ldrb	r3, [r3, #0]
 800d1b8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800d1ba:	68bb      	ldr	r3, [r7, #8]
 800d1bc:	785b      	ldrb	r3, [r3, #1]
 800d1be:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800d1c0:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800d1c2:	68ba      	ldr	r2, [r7, #8]
 800d1c4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800d1c6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800d1c8:	68bb      	ldr	r3, [r7, #8]
 800d1ca:	78db      	ldrb	r3, [r3, #3]
 800d1cc:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800d1ce:	4313      	orrs	r3, r2
 800d1d0:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	22ca      	movs	r2, #202	; 0xca
 800d1d8:	625a      	str	r2, [r3, #36]	; 0x24
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	2253      	movs	r2, #83	; 0x53
 800d1e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800d1e2:	68f8      	ldr	r0, [r7, #12]
 800d1e4:	f000 f9de 	bl	800d5a4 <RTC_EnterInitMode>
 800d1e8:	4603      	mov	r3, r0
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d00d      	beq.n	800d20a <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	22ff      	movs	r2, #255	; 0xff
 800d1f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	2204      	movs	r2, #4
 800d1fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	2200      	movs	r2, #0
 800d202:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800d206:	2301      	movs	r3, #1
 800d208:	e04b      	b.n	800d2a2 <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	681a      	ldr	r2, [r3, #0]
 800d20e:	697b      	ldr	r3, [r7, #20]
 800d210:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800d214:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800d218:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	689a      	ldr	r2, [r3, #8]
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d228:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	6899      	ldr	r1, [r3, #8]
 800d230:	68bb      	ldr	r3, [r7, #8]
 800d232:	68da      	ldr	r2, [r3, #12]
 800d234:	68bb      	ldr	r3, [r7, #8]
 800d236:	691b      	ldr	r3, [r3, #16]
 800d238:	431a      	orrs	r2, r3
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	430a      	orrs	r2, r1
 800d240:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	68da      	ldr	r2, [r3, #12]
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d250:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	689b      	ldr	r3, [r3, #8]
 800d258:	f003 0320 	and.w	r3, r3, #32
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d113      	bne.n	800d288 <HAL_RTC_SetTime+0x166>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d260:	68f8      	ldr	r0, [r7, #12]
 800d262:	f000 f979 	bl	800d558 <HAL_RTC_WaitForSynchro>
 800d266:	4603      	mov	r3, r0
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d00d      	beq.n	800d288 <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	22ff      	movs	r2, #255	; 0xff
 800d272:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	2204      	movs	r2, #4
 800d278:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	2200      	movs	r2, #0
 800d280:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800d284:	2301      	movs	r3, #1
 800d286:	e00c      	b.n	800d2a2 <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	22ff      	movs	r2, #255	; 0xff
 800d28e:	625a      	str	r2, [r3, #36]	; 0x24
    
   hrtc->State = HAL_RTC_STATE_READY;
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	2201      	movs	r2, #1
 800d294:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

   __HAL_UNLOCK(hrtc); 
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	2200      	movs	r2, #0
 800d29c:	f883 2020 	strb.w	r2, [r3, #32]

   return HAL_OK;
 800d2a0:	2300      	movs	r3, #0
  }
}
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	371c      	adds	r7, #28
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	bd90      	pop	{r4, r7, pc}

0800d2aa <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d2aa:	b580      	push	{r7, lr}
 800d2ac:	b086      	sub	sp, #24
 800d2ae:	af00      	add	r7, sp, #0
 800d2b0:	60f8      	str	r0, [r7, #12]
 800d2b2:	60b9      	str	r1, [r7, #8]
 800d2b4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d2bc:	68bb      	ldr	r3, [r7, #8]
 800d2be:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	691b      	ldr	r3, [r3, #16]
 800d2c6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800d2ca:	68bb      	ldr	r3, [r7, #8]
 800d2cc:	609a      	str	r2, [r3, #8]
  
  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800d2d8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800d2dc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800d2de:	697b      	ldr	r3, [r7, #20]
 800d2e0:	0c1b      	lsrs	r3, r3, #16
 800d2e2:	b2db      	uxtb	r3, r3
 800d2e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d2e8:	b2da      	uxtb	r2, r3
 800d2ea:	68bb      	ldr	r3, [r7, #8]
 800d2ec:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 800d2ee:	697b      	ldr	r3, [r7, #20]
 800d2f0:	0a1b      	lsrs	r3, r3, #8
 800d2f2:	b2db      	uxtb	r3, r3
 800d2f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d2f8:	b2da      	uxtb	r2, r3
 800d2fa:	68bb      	ldr	r3, [r7, #8]
 800d2fc:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800d2fe:	697b      	ldr	r3, [r7, #20]
 800d300:	b2db      	uxtb	r3, r3
 800d302:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d306:	b2da      	uxtb	r2, r3
 800d308:	68bb      	ldr	r3, [r7, #8]
 800d30a:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800d30c:	697b      	ldr	r3, [r7, #20]
 800d30e:	0c1b      	lsrs	r3, r3, #16
 800d310:	b2db      	uxtb	r3, r3
 800d312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d316:	b2da      	uxtb	r2, r3
 800d318:	68bb      	ldr	r3, [r7, #8]
 800d31a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d11a      	bne.n	800d358 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800d322:	68bb      	ldr	r3, [r7, #8]
 800d324:	781b      	ldrb	r3, [r3, #0]
 800d326:	4618      	mov	r0, r3
 800d328:	f000 f986 	bl	800d638 <RTC_Bcd2ToByte>
 800d32c:	4603      	mov	r3, r0
 800d32e:	461a      	mov	r2, r3
 800d330:	68bb      	ldr	r3, [r7, #8]
 800d332:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800d334:	68bb      	ldr	r3, [r7, #8]
 800d336:	785b      	ldrb	r3, [r3, #1]
 800d338:	4618      	mov	r0, r3
 800d33a:	f000 f97d 	bl	800d638 <RTC_Bcd2ToByte>
 800d33e:	4603      	mov	r3, r0
 800d340:	461a      	mov	r2, r3
 800d342:	68bb      	ldr	r3, [r7, #8]
 800d344:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800d346:	68bb      	ldr	r3, [r7, #8]
 800d348:	789b      	ldrb	r3, [r3, #2]
 800d34a:	4618      	mov	r0, r3
 800d34c:	f000 f974 	bl	800d638 <RTC_Bcd2ToByte>
 800d350:	4603      	mov	r3, r0
 800d352:	461a      	mov	r2, r3
 800d354:	68bb      	ldr	r3, [r7, #8]
 800d356:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800d358:	2300      	movs	r3, #0
}
 800d35a:	4618      	mov	r0, r3
 800d35c:	3718      	adds	r7, #24
 800d35e:	46bd      	mov	sp, r7
 800d360:	bd80      	pop	{r7, pc}

0800d362 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d362:	b590      	push	{r4, r7, lr}
 800d364:	b087      	sub	sp, #28
 800d366:	af00      	add	r7, sp, #0
 800d368:	60f8      	str	r0, [r7, #12]
 800d36a:	60b9      	str	r1, [r7, #8]
 800d36c:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d374:	2b01      	cmp	r3, #1
 800d376:	d101      	bne.n	800d37c <HAL_RTC_SetDate+0x1a>
 800d378:	2302      	movs	r3, #2
 800d37a:	e09c      	b.n	800d4b6 <HAL_RTC_SetDate+0x154>
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	2201      	movs	r2, #1
 800d380:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	2202      	movs	r2, #2
 800d388:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d10e      	bne.n	800d3b0 <HAL_RTC_SetDate+0x4e>
 800d392:	68bb      	ldr	r3, [r7, #8]
 800d394:	785b      	ldrb	r3, [r3, #1]
 800d396:	f003 0310 	and.w	r3, r3, #16
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d008      	beq.n	800d3b0 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800d39e:	68bb      	ldr	r3, [r7, #8]
 800d3a0:	785b      	ldrb	r3, [r3, #1]
 800d3a2:	f023 0310 	bic.w	r3, r3, #16
 800d3a6:	b2db      	uxtb	r3, r3
 800d3a8:	330a      	adds	r3, #10
 800d3aa:	b2da      	uxtb	r2, r3
 800d3ac:	68bb      	ldr	r3, [r7, #8]
 800d3ae:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d11c      	bne.n	800d3f0 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800d3b6:	68bb      	ldr	r3, [r7, #8]
 800d3b8:	78db      	ldrb	r3, [r3, #3]
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	f000 f91c 	bl	800d5f8 <RTC_ByteToBcd2>
 800d3c0:	4603      	mov	r3, r0
 800d3c2:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800d3c4:	68bb      	ldr	r3, [r7, #8]
 800d3c6:	785b      	ldrb	r3, [r3, #1]
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	f000 f915 	bl	800d5f8 <RTC_ByteToBcd2>
 800d3ce:	4603      	mov	r3, r0
 800d3d0:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800d3d2:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800d3d4:	68bb      	ldr	r3, [r7, #8]
 800d3d6:	789b      	ldrb	r3, [r3, #2]
 800d3d8:	4618      	mov	r0, r3
 800d3da:	f000 f90d 	bl	800d5f8 <RTC_ByteToBcd2>
 800d3de:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800d3e0:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800d3e4:	68bb      	ldr	r3, [r7, #8]
 800d3e6:	781b      	ldrb	r3, [r3, #0]
 800d3e8:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800d3ea:	4313      	orrs	r3, r2
 800d3ec:	617b      	str	r3, [r7, #20]
 800d3ee:	e00e      	b.n	800d40e <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800d3f0:	68bb      	ldr	r3, [r7, #8]
 800d3f2:	78db      	ldrb	r3, [r3, #3]
 800d3f4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800d3f6:	68bb      	ldr	r3, [r7, #8]
 800d3f8:	785b      	ldrb	r3, [r3, #1]
 800d3fa:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800d3fc:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800d3fe:	68ba      	ldr	r2, [r7, #8]
 800d400:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800d402:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800d404:	68bb      	ldr	r3, [r7, #8]
 800d406:	781b      	ldrb	r3, [r3, #0]
 800d408:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800d40a:	4313      	orrs	r3, r2
 800d40c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	22ca      	movs	r2, #202	; 0xca
 800d414:	625a      	str	r2, [r3, #36]	; 0x24
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	2253      	movs	r2, #83	; 0x53
 800d41c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800d41e:	68f8      	ldr	r0, [r7, #12]
 800d420:	f000 f8c0 	bl	800d5a4 <RTC_EnterInitMode>
 800d424:	4603      	mov	r3, r0
 800d426:	2b00      	cmp	r3, #0
 800d428:	d00d      	beq.n	800d446 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	22ff      	movs	r2, #255	; 0xff
 800d430:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	2204      	movs	r2, #4
 800d436:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	2200      	movs	r2, #0
 800d43e:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800d442:	2301      	movs	r3, #1
 800d444:	e037      	b.n	800d4b6 <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	681a      	ldr	r2, [r3, #0]
 800d44a:	697b      	ldr	r3, [r7, #20]
 800d44c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d450:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d454:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	68da      	ldr	r2, [r3, #12]
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d464:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	689b      	ldr	r3, [r3, #8]
 800d46c:	f003 0320 	and.w	r3, r3, #32
 800d470:	2b00      	cmp	r3, #0
 800d472:	d113      	bne.n	800d49c <HAL_RTC_SetDate+0x13a>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d474:	68f8      	ldr	r0, [r7, #12]
 800d476:	f000 f86f 	bl	800d558 <HAL_RTC_WaitForSynchro>
 800d47a:	4603      	mov	r3, r0
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d00d      	beq.n	800d49c <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	22ff      	movs	r2, #255	; 0xff
 800d486:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	2204      	movs	r2, #4
 800d48c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	2200      	movs	r2, #0
 800d494:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800d498:	2301      	movs	r3, #1
 800d49a:	e00c      	b.n	800d4b6 <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	22ff      	movs	r2, #255	; 0xff
 800d4a2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	2201      	movs	r2, #1
 800d4a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 800d4b4:	2300      	movs	r3, #0
  }
}
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	371c      	adds	r7, #28
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	bd90      	pop	{r4, r7, pc}

0800d4be <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d4be:	b580      	push	{r7, lr}
 800d4c0:	b086      	sub	sp, #24
 800d4c2:	af00      	add	r7, sp, #0
 800d4c4:	60f8      	str	r0, [r7, #12]
 800d4c6:	60b9      	str	r1, [r7, #8]
 800d4c8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	685b      	ldr	r3, [r3, #4]
 800d4d0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d4d4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d4d8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800d4da:	697b      	ldr	r3, [r7, #20]
 800d4dc:	0c1b      	lsrs	r3, r3, #16
 800d4de:	b2da      	uxtb	r2, r3
 800d4e0:	68bb      	ldr	r3, [r7, #8]
 800d4e2:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800d4e4:	697b      	ldr	r3, [r7, #20]
 800d4e6:	0a1b      	lsrs	r3, r3, #8
 800d4e8:	b2db      	uxtb	r3, r3
 800d4ea:	f003 031f 	and.w	r3, r3, #31
 800d4ee:	b2da      	uxtb	r2, r3
 800d4f0:	68bb      	ldr	r3, [r7, #8]
 800d4f2:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800d4f4:	697b      	ldr	r3, [r7, #20]
 800d4f6:	b2db      	uxtb	r3, r3
 800d4f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d4fc:	b2da      	uxtb	r2, r3
 800d4fe:	68bb      	ldr	r3, [r7, #8]
 800d500:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 800d502:	697b      	ldr	r3, [r7, #20]
 800d504:	0b5b      	lsrs	r3, r3, #13
 800d506:	b2db      	uxtb	r3, r3
 800d508:	f003 0307 	and.w	r3, r3, #7
 800d50c:	b2da      	uxtb	r2, r3
 800d50e:	68bb      	ldr	r3, [r7, #8]
 800d510:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d11a      	bne.n	800d54e <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800d518:	68bb      	ldr	r3, [r7, #8]
 800d51a:	78db      	ldrb	r3, [r3, #3]
 800d51c:	4618      	mov	r0, r3
 800d51e:	f000 f88b 	bl	800d638 <RTC_Bcd2ToByte>
 800d522:	4603      	mov	r3, r0
 800d524:	461a      	mov	r2, r3
 800d526:	68bb      	ldr	r3, [r7, #8]
 800d528:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800d52a:	68bb      	ldr	r3, [r7, #8]
 800d52c:	785b      	ldrb	r3, [r3, #1]
 800d52e:	4618      	mov	r0, r3
 800d530:	f000 f882 	bl	800d638 <RTC_Bcd2ToByte>
 800d534:	4603      	mov	r3, r0
 800d536:	461a      	mov	r2, r3
 800d538:	68bb      	ldr	r3, [r7, #8]
 800d53a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800d53c:	68bb      	ldr	r3, [r7, #8]
 800d53e:	789b      	ldrb	r3, [r3, #2]
 800d540:	4618      	mov	r0, r3
 800d542:	f000 f879 	bl	800d638 <RTC_Bcd2ToByte>
 800d546:	4603      	mov	r3, r0
 800d548:	461a      	mov	r2, r3
 800d54a:	68bb      	ldr	r3, [r7, #8]
 800d54c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800d54e:	2300      	movs	r3, #0
}
 800d550:	4618      	mov	r0, r3
 800d552:	3718      	adds	r7, #24
 800d554:	46bd      	mov	sp, r7
 800d556:	bd80      	pop	{r7, pc}

0800d558 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800d558:	b580      	push	{r7, lr}
 800d55a:	b084      	sub	sp, #16
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	68da      	ldr	r2, [r3, #12]
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800d56e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800d570:	f7f8 fc2e 	bl	8005dd0 <HAL_GetTick>
 800d574:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d576:	e009      	b.n	800d58c <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800d578:	f7f8 fc2a 	bl	8005dd0 <HAL_GetTick>
 800d57c:	4602      	mov	r2, r0
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	1ad3      	subs	r3, r2, r3
 800d582:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d586:	d901      	bls.n	800d58c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800d588:	2303      	movs	r3, #3
 800d58a:	e007      	b.n	800d59c <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	68db      	ldr	r3, [r3, #12]
 800d592:	f003 0320 	and.w	r3, r3, #32
 800d596:	2b00      	cmp	r3, #0
 800d598:	d0ee      	beq.n	800d578 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800d59a:	2300      	movs	r3, #0
}
 800d59c:	4618      	mov	r0, r3
 800d59e:	3710      	adds	r7, #16
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	bd80      	pop	{r7, pc}

0800d5a4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800d5a4:	b580      	push	{r7, lr}
 800d5a6:	b084      	sub	sp, #16
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	68db      	ldr	r3, [r3, #12]
 800d5b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d119      	bne.n	800d5ee <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	f04f 32ff 	mov.w	r2, #4294967295
 800d5c2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800d5c4:	f7f8 fc04 	bl	8005dd0 <HAL_GetTick>
 800d5c8:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800d5ca:	e009      	b.n	800d5e0 <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800d5cc:	f7f8 fc00 	bl	8005dd0 <HAL_GetTick>
 800d5d0:	4602      	mov	r2, r0
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	1ad3      	subs	r3, r2, r3
 800d5d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d5da:	d901      	bls.n	800d5e0 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800d5dc:	2303      	movs	r3, #3
 800d5de:	e007      	b.n	800d5f0 <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	68db      	ldr	r3, [r3, #12]
 800d5e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d0ee      	beq.n	800d5cc <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800d5ee:	2300      	movs	r3, #0
}
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	3710      	adds	r7, #16
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	bd80      	pop	{r7, pc}

0800d5f8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800d5f8:	b480      	push	{r7}
 800d5fa:	b085      	sub	sp, #20
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	4603      	mov	r3, r0
 800d600:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800d602:	2300      	movs	r3, #0
 800d604:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800d606:	79fb      	ldrb	r3, [r7, #7]
 800d608:	72fb      	strb	r3, [r7, #11]

  while(Param >= 10U)
 800d60a:	e005      	b.n	800d618 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	3301      	adds	r3, #1
 800d610:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800d612:	7afb      	ldrb	r3, [r7, #11]
 800d614:	3b0a      	subs	r3, #10
 800d616:	72fb      	strb	r3, [r7, #11]
  while(Param >= 10U)
 800d618:	7afb      	ldrb	r3, [r7, #11]
 800d61a:	2b09      	cmp	r3, #9
 800d61c:	d8f6      	bhi.n	800d60c <RTC_ByteToBcd2+0x14>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	b2db      	uxtb	r3, r3
 800d622:	011b      	lsls	r3, r3, #4
 800d624:	b2da      	uxtb	r2, r3
 800d626:	7afb      	ldrb	r3, [r7, #11]
 800d628:	4313      	orrs	r3, r2
 800d62a:	b2db      	uxtb	r3, r3
}
 800d62c:	4618      	mov	r0, r3
 800d62e:	3714      	adds	r7, #20
 800d630:	46bd      	mov	sp, r7
 800d632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d636:	4770      	bx	lr

0800d638 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800d638:	b480      	push	{r7}
 800d63a:	b085      	sub	sp, #20
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	4603      	mov	r3, r0
 800d640:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800d642:	79fb      	ldrb	r3, [r7, #7]
 800d644:	091b      	lsrs	r3, r3, #4
 800d646:	b2db      	uxtb	r3, r3
 800d648:	461a      	mov	r2, r3
 800d64a:	4613      	mov	r3, r2
 800d64c:	009b      	lsls	r3, r3, #2
 800d64e:	4413      	add	r3, r2
 800d650:	005b      	lsls	r3, r3, #1
 800d652:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	b2da      	uxtb	r2, r3
 800d658:	79fb      	ldrb	r3, [r7, #7]
 800d65a:	f003 030f 	and.w	r3, r3, #15
 800d65e:	b2db      	uxtb	r3, r3
 800d660:	4413      	add	r3, r2
 800d662:	b2db      	uxtb	r3, r3
}
 800d664:	4618      	mov	r0, r3
 800d666:	3714      	adds	r7, #20
 800d668:	46bd      	mov	sp, r7
 800d66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66e:	4770      	bx	lr

0800d670 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800d670:	b480      	push	{r7}
 800d672:	b087      	sub	sp, #28
 800d674:	af00      	add	r7, sp, #0
 800d676:	60f8      	str	r0, [r7, #12]
 800d678:	60b9      	str	r1, [r7, #8]
 800d67a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	3350      	adds	r3, #80	; 0x50
 800d682:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800d684:	68bb      	ldr	r3, [r7, #8]
 800d686:	009b      	lsls	r3, r3, #2
 800d688:	697a      	ldr	r2, [r7, #20]
 800d68a:	4413      	add	r3, r2
 800d68c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800d68e:	697b      	ldr	r3, [r7, #20]
 800d690:	687a      	ldr	r2, [r7, #4]
 800d692:	601a      	str	r2, [r3, #0]
}
 800d694:	bf00      	nop
 800d696:	371c      	adds	r7, #28
 800d698:	46bd      	mov	sp, r7
 800d69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d69e:	4770      	bx	lr

0800d6a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b082      	sub	sp, #8
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d101      	bne.n	800d6b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d6ae:	2301      	movs	r3, #1
 800d6b0:	e049      	b.n	800d746 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d6b8:	b2db      	uxtb	r3, r3
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d106      	bne.n	800d6cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d6c6:	6878      	ldr	r0, [r7, #4]
 800d6c8:	f7f7 fe78 	bl	80053bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	2202      	movs	r2, #2
 800d6d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	681a      	ldr	r2, [r3, #0]
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	3304      	adds	r3, #4
 800d6dc:	4619      	mov	r1, r3
 800d6de:	4610      	mov	r0, r2
 800d6e0:	f000 fe94 	bl	800e40c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	2201      	movs	r2, #1
 800d6e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	2201      	movs	r2, #1
 800d6f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	2201      	movs	r2, #1
 800d6f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	2201      	movs	r2, #1
 800d700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	2201      	movs	r2, #1
 800d708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	2201      	movs	r2, #1
 800d710:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	2201      	movs	r2, #1
 800d718:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	2201      	movs	r2, #1
 800d720:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	2201      	movs	r2, #1
 800d728:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	2201      	movs	r2, #1
 800d730:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	2201      	movs	r2, #1
 800d738:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	2201      	movs	r2, #1
 800d740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d744:	2300      	movs	r3, #0
}
 800d746:	4618      	mov	r0, r3
 800d748:	3708      	adds	r7, #8
 800d74a:	46bd      	mov	sp, r7
 800d74c:	bd80      	pop	{r7, pc}
	...

0800d750 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800d750:	b480      	push	{r7}
 800d752:	b085      	sub	sp, #20
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d75e:	b2db      	uxtb	r3, r3
 800d760:	2b01      	cmp	r3, #1
 800d762:	d001      	beq.n	800d768 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800d764:	2301      	movs	r3, #1
 800d766:	e02e      	b.n	800d7c6 <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	2202      	movs	r2, #2
 800d76c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	4a17      	ldr	r2, [pc, #92]	; (800d7d4 <HAL_TIM_Base_Start+0x84>)
 800d776:	4293      	cmp	r3, r2
 800d778:	d004      	beq.n	800d784 <HAL_TIM_Base_Start+0x34>
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d782:	d115      	bne.n	800d7b0 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	689a      	ldr	r2, [r3, #8]
 800d78a:	4b13      	ldr	r3, [pc, #76]	; (800d7d8 <HAL_TIM_Base_Start+0x88>)
 800d78c:	4013      	ands	r3, r2
 800d78e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	2b06      	cmp	r3, #6
 800d794:	d015      	beq.n	800d7c2 <HAL_TIM_Base_Start+0x72>
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d79c:	d011      	beq.n	800d7c2 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	681a      	ldr	r2, [r3, #0]
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	f042 0201 	orr.w	r2, r2, #1
 800d7ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d7ae:	e008      	b.n	800d7c2 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	681a      	ldr	r2, [r3, #0]
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	f042 0201 	orr.w	r2, r2, #1
 800d7be:	601a      	str	r2, [r3, #0]
 800d7c0:	e000      	b.n	800d7c4 <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d7c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d7c4:	2300      	movs	r3, #0
}
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	3714      	adds	r7, #20
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d0:	4770      	bx	lr
 800d7d2:	bf00      	nop
 800d7d4:	40012c00 	.word	0x40012c00
 800d7d8:	00010007 	.word	0x00010007

0800d7dc <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800d7dc:	b480      	push	{r7}
 800d7de:	b083      	sub	sp, #12
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	6a1a      	ldr	r2, [r3, #32]
 800d7ea:	f241 1311 	movw	r3, #4369	; 0x1111
 800d7ee:	4013      	ands	r3, r2
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d10f      	bne.n	800d814 <HAL_TIM_Base_Stop+0x38>
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	6a1a      	ldr	r2, [r3, #32]
 800d7fa:	f240 4344 	movw	r3, #1092	; 0x444
 800d7fe:	4013      	ands	r3, r2
 800d800:	2b00      	cmp	r3, #0
 800d802:	d107      	bne.n	800d814 <HAL_TIM_Base_Stop+0x38>
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	681a      	ldr	r2, [r3, #0]
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	f022 0201 	bic.w	r2, r2, #1
 800d812:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	2201      	movs	r2, #1
 800d818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800d81c:	2300      	movs	r3, #0
}
 800d81e:	4618      	mov	r0, r3
 800d820:	370c      	adds	r7, #12
 800d822:	46bd      	mov	sp, r7
 800d824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d828:	4770      	bx	lr
	...

0800d82c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d82c:	b480      	push	{r7}
 800d82e:	b085      	sub	sp, #20
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d83a:	b2db      	uxtb	r3, r3
 800d83c:	2b01      	cmp	r3, #1
 800d83e:	d001      	beq.n	800d844 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d840:	2301      	movs	r3, #1
 800d842:	e036      	b.n	800d8b2 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	2202      	movs	r2, #2
 800d848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	68da      	ldr	r2, [r3, #12]
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	f042 0201 	orr.w	r2, r2, #1
 800d85a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	4a17      	ldr	r2, [pc, #92]	; (800d8c0 <HAL_TIM_Base_Start_IT+0x94>)
 800d862:	4293      	cmp	r3, r2
 800d864:	d004      	beq.n	800d870 <HAL_TIM_Base_Start_IT+0x44>
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d86e:	d115      	bne.n	800d89c <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	689a      	ldr	r2, [r3, #8]
 800d876:	4b13      	ldr	r3, [pc, #76]	; (800d8c4 <HAL_TIM_Base_Start_IT+0x98>)
 800d878:	4013      	ands	r3, r2
 800d87a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	2b06      	cmp	r3, #6
 800d880:	d015      	beq.n	800d8ae <HAL_TIM_Base_Start_IT+0x82>
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d888:	d011      	beq.n	800d8ae <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	681a      	ldr	r2, [r3, #0]
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	f042 0201 	orr.w	r2, r2, #1
 800d898:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d89a:	e008      	b.n	800d8ae <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	681a      	ldr	r2, [r3, #0]
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	f042 0201 	orr.w	r2, r2, #1
 800d8aa:	601a      	str	r2, [r3, #0]
 800d8ac:	e000      	b.n	800d8b0 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d8ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d8b0:	2300      	movs	r3, #0
}
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	3714      	adds	r7, #20
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8bc:	4770      	bx	lr
 800d8be:	bf00      	nop
 800d8c0:	40012c00 	.word	0x40012c00
 800d8c4:	00010007 	.word	0x00010007

0800d8c8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	b082      	sub	sp, #8
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d101      	bne.n	800d8da <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800d8d6:	2301      	movs	r3, #1
 800d8d8:	e049      	b.n	800d96e <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d8e0:	b2db      	uxtb	r3, r3
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d106      	bne.n	800d8f4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	2200      	movs	r2, #0
 800d8ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800d8ee:	6878      	ldr	r0, [r7, #4]
 800d8f0:	f000 f841 	bl	800d976 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	2202      	movs	r2, #2
 800d8f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	681a      	ldr	r2, [r3, #0]
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	3304      	adds	r3, #4
 800d904:	4619      	mov	r1, r3
 800d906:	4610      	mov	r0, r2
 800d908:	f000 fd80 	bl	800e40c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	2201      	movs	r2, #1
 800d910:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	2201      	movs	r2, #1
 800d918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	2201      	movs	r2, #1
 800d920:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	2201      	movs	r2, #1
 800d928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	2201      	movs	r2, #1
 800d930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	2201      	movs	r2, #1
 800d938:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	2201      	movs	r2, #1
 800d940:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	2201      	movs	r2, #1
 800d948:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	2201      	movs	r2, #1
 800d950:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	2201      	movs	r2, #1
 800d958:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	2201      	movs	r2, #1
 800d960:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	2201      	movs	r2, #1
 800d968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d96c:	2300      	movs	r3, #0
}
 800d96e:	4618      	mov	r0, r3
 800d970:	3708      	adds	r7, #8
 800d972:	46bd      	mov	sp, r7
 800d974:	bd80      	pop	{r7, pc}

0800d976 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800d976:	b480      	push	{r7}
 800d978:	b083      	sub	sp, #12
 800d97a:	af00      	add	r7, sp, #0
 800d97c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800d97e:	bf00      	nop
 800d980:	370c      	adds	r7, #12
 800d982:	46bd      	mov	sp, r7
 800d984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d988:	4770      	bx	lr

0800d98a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d98a:	b580      	push	{r7, lr}
 800d98c:	b082      	sub	sp, #8
 800d98e:	af00      	add	r7, sp, #0
 800d990:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d101      	bne.n	800d99c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d998:	2301      	movs	r3, #1
 800d99a:	e049      	b.n	800da30 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d9a2:	b2db      	uxtb	r3, r3
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d106      	bne.n	800d9b6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	2200      	movs	r2, #0
 800d9ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d9b0:	6878      	ldr	r0, [r7, #4]
 800d9b2:	f000 f841 	bl	800da38 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	2202      	movs	r2, #2
 800d9ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	681a      	ldr	r2, [r3, #0]
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	3304      	adds	r3, #4
 800d9c6:	4619      	mov	r1, r3
 800d9c8:	4610      	mov	r0, r2
 800d9ca:	f000 fd1f 	bl	800e40c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	2201      	movs	r2, #1
 800d9d2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	2201      	movs	r2, #1
 800d9da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	2201      	movs	r2, #1
 800d9e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	2201      	movs	r2, #1
 800d9ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	2201      	movs	r2, #1
 800d9f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	2201      	movs	r2, #1
 800d9fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	2201      	movs	r2, #1
 800da02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	2201      	movs	r2, #1
 800da0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	2201      	movs	r2, #1
 800da12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	2201      	movs	r2, #1
 800da1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	2201      	movs	r2, #1
 800da22:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	2201      	movs	r2, #1
 800da2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800da2e:	2300      	movs	r3, #0
}
 800da30:	4618      	mov	r0, r3
 800da32:	3708      	adds	r7, #8
 800da34:	46bd      	mov	sp, r7
 800da36:	bd80      	pop	{r7, pc}

0800da38 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800da38:	b480      	push	{r7}
 800da3a:	b083      	sub	sp, #12
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800da40:	bf00      	nop
 800da42:	370c      	adds	r7, #12
 800da44:	46bd      	mov	sp, r7
 800da46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4a:	4770      	bx	lr

0800da4c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800da4c:	b580      	push	{r7, lr}
 800da4e:	b084      	sub	sp, #16
 800da50:	af00      	add	r7, sp, #0
 800da52:	6078      	str	r0, [r7, #4]
 800da54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800da56:	683b      	ldr	r3, [r7, #0]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d109      	bne.n	800da70 <HAL_TIM_PWM_Start+0x24>
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800da62:	b2db      	uxtb	r3, r3
 800da64:	2b01      	cmp	r3, #1
 800da66:	bf14      	ite	ne
 800da68:	2301      	movne	r3, #1
 800da6a:	2300      	moveq	r3, #0
 800da6c:	b2db      	uxtb	r3, r3
 800da6e:	e03c      	b.n	800daea <HAL_TIM_PWM_Start+0x9e>
 800da70:	683b      	ldr	r3, [r7, #0]
 800da72:	2b04      	cmp	r3, #4
 800da74:	d109      	bne.n	800da8a <HAL_TIM_PWM_Start+0x3e>
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800da7c:	b2db      	uxtb	r3, r3
 800da7e:	2b01      	cmp	r3, #1
 800da80:	bf14      	ite	ne
 800da82:	2301      	movne	r3, #1
 800da84:	2300      	moveq	r3, #0
 800da86:	b2db      	uxtb	r3, r3
 800da88:	e02f      	b.n	800daea <HAL_TIM_PWM_Start+0x9e>
 800da8a:	683b      	ldr	r3, [r7, #0]
 800da8c:	2b08      	cmp	r3, #8
 800da8e:	d109      	bne.n	800daa4 <HAL_TIM_PWM_Start+0x58>
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800da96:	b2db      	uxtb	r3, r3
 800da98:	2b01      	cmp	r3, #1
 800da9a:	bf14      	ite	ne
 800da9c:	2301      	movne	r3, #1
 800da9e:	2300      	moveq	r3, #0
 800daa0:	b2db      	uxtb	r3, r3
 800daa2:	e022      	b.n	800daea <HAL_TIM_PWM_Start+0x9e>
 800daa4:	683b      	ldr	r3, [r7, #0]
 800daa6:	2b0c      	cmp	r3, #12
 800daa8:	d109      	bne.n	800dabe <HAL_TIM_PWM_Start+0x72>
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dab0:	b2db      	uxtb	r3, r3
 800dab2:	2b01      	cmp	r3, #1
 800dab4:	bf14      	ite	ne
 800dab6:	2301      	movne	r3, #1
 800dab8:	2300      	moveq	r3, #0
 800daba:	b2db      	uxtb	r3, r3
 800dabc:	e015      	b.n	800daea <HAL_TIM_PWM_Start+0x9e>
 800dabe:	683b      	ldr	r3, [r7, #0]
 800dac0:	2b10      	cmp	r3, #16
 800dac2:	d109      	bne.n	800dad8 <HAL_TIM_PWM_Start+0x8c>
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800daca:	b2db      	uxtb	r3, r3
 800dacc:	2b01      	cmp	r3, #1
 800dace:	bf14      	ite	ne
 800dad0:	2301      	movne	r3, #1
 800dad2:	2300      	moveq	r3, #0
 800dad4:	b2db      	uxtb	r3, r3
 800dad6:	e008      	b.n	800daea <HAL_TIM_PWM_Start+0x9e>
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800dade:	b2db      	uxtb	r3, r3
 800dae0:	2b01      	cmp	r3, #1
 800dae2:	bf14      	ite	ne
 800dae4:	2301      	movne	r3, #1
 800dae6:	2300      	moveq	r3, #0
 800dae8:	b2db      	uxtb	r3, r3
 800daea:	2b00      	cmp	r3, #0
 800daec:	d001      	beq.n	800daf2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800daee:	2301      	movs	r3, #1
 800daf0:	e079      	b.n	800dbe6 <HAL_TIM_PWM_Start+0x19a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800daf2:	683b      	ldr	r3, [r7, #0]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d104      	bne.n	800db02 <HAL_TIM_PWM_Start+0xb6>
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	2202      	movs	r2, #2
 800dafc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800db00:	e023      	b.n	800db4a <HAL_TIM_PWM_Start+0xfe>
 800db02:	683b      	ldr	r3, [r7, #0]
 800db04:	2b04      	cmp	r3, #4
 800db06:	d104      	bne.n	800db12 <HAL_TIM_PWM_Start+0xc6>
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	2202      	movs	r2, #2
 800db0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800db10:	e01b      	b.n	800db4a <HAL_TIM_PWM_Start+0xfe>
 800db12:	683b      	ldr	r3, [r7, #0]
 800db14:	2b08      	cmp	r3, #8
 800db16:	d104      	bne.n	800db22 <HAL_TIM_PWM_Start+0xd6>
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	2202      	movs	r2, #2
 800db1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800db20:	e013      	b.n	800db4a <HAL_TIM_PWM_Start+0xfe>
 800db22:	683b      	ldr	r3, [r7, #0]
 800db24:	2b0c      	cmp	r3, #12
 800db26:	d104      	bne.n	800db32 <HAL_TIM_PWM_Start+0xe6>
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	2202      	movs	r2, #2
 800db2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800db30:	e00b      	b.n	800db4a <HAL_TIM_PWM_Start+0xfe>
 800db32:	683b      	ldr	r3, [r7, #0]
 800db34:	2b10      	cmp	r3, #16
 800db36:	d104      	bne.n	800db42 <HAL_TIM_PWM_Start+0xf6>
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	2202      	movs	r2, #2
 800db3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800db40:	e003      	b.n	800db4a <HAL_TIM_PWM_Start+0xfe>
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	2202      	movs	r2, #2
 800db46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	2201      	movs	r2, #1
 800db50:	6839      	ldr	r1, [r7, #0]
 800db52:	4618      	mov	r0, r3
 800db54:	f000 ffd8 	bl	800eb08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	4a24      	ldr	r2, [pc, #144]	; (800dbf0 <HAL_TIM_PWM_Start+0x1a4>)
 800db5e:	4293      	cmp	r3, r2
 800db60:	d009      	beq.n	800db76 <HAL_TIM_PWM_Start+0x12a>
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	4a23      	ldr	r2, [pc, #140]	; (800dbf4 <HAL_TIM_PWM_Start+0x1a8>)
 800db68:	4293      	cmp	r3, r2
 800db6a:	d004      	beq.n	800db76 <HAL_TIM_PWM_Start+0x12a>
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	4a21      	ldr	r2, [pc, #132]	; (800dbf8 <HAL_TIM_PWM_Start+0x1ac>)
 800db72:	4293      	cmp	r3, r2
 800db74:	d101      	bne.n	800db7a <HAL_TIM_PWM_Start+0x12e>
 800db76:	2301      	movs	r3, #1
 800db78:	e000      	b.n	800db7c <HAL_TIM_PWM_Start+0x130>
 800db7a:	2300      	movs	r3, #0
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d007      	beq.n	800db90 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800db8e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	4a16      	ldr	r2, [pc, #88]	; (800dbf0 <HAL_TIM_PWM_Start+0x1a4>)
 800db96:	4293      	cmp	r3, r2
 800db98:	d004      	beq.n	800dba4 <HAL_TIM_PWM_Start+0x158>
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dba2:	d115      	bne.n	800dbd0 <HAL_TIM_PWM_Start+0x184>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	689a      	ldr	r2, [r3, #8]
 800dbaa:	4b14      	ldr	r3, [pc, #80]	; (800dbfc <HAL_TIM_PWM_Start+0x1b0>)
 800dbac:	4013      	ands	r3, r2
 800dbae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	2b06      	cmp	r3, #6
 800dbb4:	d015      	beq.n	800dbe2 <HAL_TIM_PWM_Start+0x196>
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dbbc:	d011      	beq.n	800dbe2 <HAL_TIM_PWM_Start+0x196>
    {
      __HAL_TIM_ENABLE(htim);
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	681a      	ldr	r2, [r3, #0]
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	f042 0201 	orr.w	r2, r2, #1
 800dbcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dbce:	e008      	b.n	800dbe2 <HAL_TIM_PWM_Start+0x196>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	681a      	ldr	r2, [r3, #0]
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	f042 0201 	orr.w	r2, r2, #1
 800dbde:	601a      	str	r2, [r3, #0]
 800dbe0:	e000      	b.n	800dbe4 <HAL_TIM_PWM_Start+0x198>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dbe2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800dbe4:	2300      	movs	r3, #0
}
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	3710      	adds	r7, #16
 800dbea:	46bd      	mov	sp, r7
 800dbec:	bd80      	pop	{r7, pc}
 800dbee:	bf00      	nop
 800dbf0:	40012c00 	.word	0x40012c00
 800dbf4:	40014400 	.word	0x40014400
 800dbf8:	40014800 	.word	0x40014800
 800dbfc:	00010007 	.word	0x00010007

0800dc00 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b082      	sub	sp, #8
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
 800dc08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	2200      	movs	r2, #0
 800dc10:	6839      	ldr	r1, [r7, #0]
 800dc12:	4618      	mov	r0, r3
 800dc14:	f000 ff78 	bl	800eb08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	4a39      	ldr	r2, [pc, #228]	; (800dd04 <HAL_TIM_PWM_Stop+0x104>)
 800dc1e:	4293      	cmp	r3, r2
 800dc20:	d009      	beq.n	800dc36 <HAL_TIM_PWM_Stop+0x36>
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	4a38      	ldr	r2, [pc, #224]	; (800dd08 <HAL_TIM_PWM_Stop+0x108>)
 800dc28:	4293      	cmp	r3, r2
 800dc2a:	d004      	beq.n	800dc36 <HAL_TIM_PWM_Stop+0x36>
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	4a36      	ldr	r2, [pc, #216]	; (800dd0c <HAL_TIM_PWM_Stop+0x10c>)
 800dc32:	4293      	cmp	r3, r2
 800dc34:	d101      	bne.n	800dc3a <HAL_TIM_PWM_Stop+0x3a>
 800dc36:	2301      	movs	r3, #1
 800dc38:	e000      	b.n	800dc3c <HAL_TIM_PWM_Stop+0x3c>
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d017      	beq.n	800dc70 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	6a1a      	ldr	r2, [r3, #32]
 800dc46:	f241 1311 	movw	r3, #4369	; 0x1111
 800dc4a:	4013      	ands	r3, r2
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d10f      	bne.n	800dc70 <HAL_TIM_PWM_Stop+0x70>
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	6a1a      	ldr	r2, [r3, #32]
 800dc56:	f240 4344 	movw	r3, #1092	; 0x444
 800dc5a:	4013      	ands	r3, r2
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d107      	bne.n	800dc70 <HAL_TIM_PWM_Stop+0x70>
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800dc6e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	6a1a      	ldr	r2, [r3, #32]
 800dc76:	f241 1311 	movw	r3, #4369	; 0x1111
 800dc7a:	4013      	ands	r3, r2
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d10f      	bne.n	800dca0 <HAL_TIM_PWM_Stop+0xa0>
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	6a1a      	ldr	r2, [r3, #32]
 800dc86:	f240 4344 	movw	r3, #1092	; 0x444
 800dc8a:	4013      	ands	r3, r2
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d107      	bne.n	800dca0 <HAL_TIM_PWM_Stop+0xa0>
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	681a      	ldr	r2, [r3, #0]
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	f022 0201 	bic.w	r2, r2, #1
 800dc9e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800dca0:	683b      	ldr	r3, [r7, #0]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d104      	bne.n	800dcb0 <HAL_TIM_PWM_Stop+0xb0>
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	2201      	movs	r2, #1
 800dcaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800dcae:	e023      	b.n	800dcf8 <HAL_TIM_PWM_Stop+0xf8>
 800dcb0:	683b      	ldr	r3, [r7, #0]
 800dcb2:	2b04      	cmp	r3, #4
 800dcb4:	d104      	bne.n	800dcc0 <HAL_TIM_PWM_Stop+0xc0>
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	2201      	movs	r2, #1
 800dcba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800dcbe:	e01b      	b.n	800dcf8 <HAL_TIM_PWM_Stop+0xf8>
 800dcc0:	683b      	ldr	r3, [r7, #0]
 800dcc2:	2b08      	cmp	r3, #8
 800dcc4:	d104      	bne.n	800dcd0 <HAL_TIM_PWM_Stop+0xd0>
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	2201      	movs	r2, #1
 800dcca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800dcce:	e013      	b.n	800dcf8 <HAL_TIM_PWM_Stop+0xf8>
 800dcd0:	683b      	ldr	r3, [r7, #0]
 800dcd2:	2b0c      	cmp	r3, #12
 800dcd4:	d104      	bne.n	800dce0 <HAL_TIM_PWM_Stop+0xe0>
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	2201      	movs	r2, #1
 800dcda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800dcde:	e00b      	b.n	800dcf8 <HAL_TIM_PWM_Stop+0xf8>
 800dce0:	683b      	ldr	r3, [r7, #0]
 800dce2:	2b10      	cmp	r3, #16
 800dce4:	d104      	bne.n	800dcf0 <HAL_TIM_PWM_Stop+0xf0>
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	2201      	movs	r2, #1
 800dcea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800dcee:	e003      	b.n	800dcf8 <HAL_TIM_PWM_Stop+0xf8>
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	2201      	movs	r2, #1
 800dcf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800dcf8:	2300      	movs	r3, #0
}
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	3708      	adds	r7, #8
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	bd80      	pop	{r7, pc}
 800dd02:	bf00      	nop
 800dd04:	40012c00 	.word	0x40012c00
 800dd08:	40014400 	.word	0x40014400
 800dd0c:	40014800 	.word	0x40014800

0800dd10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800dd10:	b580      	push	{r7, lr}
 800dd12:	b082      	sub	sp, #8
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	691b      	ldr	r3, [r3, #16]
 800dd1e:	f003 0302 	and.w	r3, r3, #2
 800dd22:	2b02      	cmp	r3, #2
 800dd24:	d122      	bne.n	800dd6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	68db      	ldr	r3, [r3, #12]
 800dd2c:	f003 0302 	and.w	r3, r3, #2
 800dd30:	2b02      	cmp	r3, #2
 800dd32:	d11b      	bne.n	800dd6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	f06f 0202 	mvn.w	r2, #2
 800dd3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	2201      	movs	r2, #1
 800dd42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	699b      	ldr	r3, [r3, #24]
 800dd4a:	f003 0303 	and.w	r3, r3, #3
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d003      	beq.n	800dd5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800dd52:	6878      	ldr	r0, [r7, #4]
 800dd54:	f000 fb45 	bl	800e3e2 <HAL_TIM_IC_CaptureCallback>
 800dd58:	e005      	b.n	800dd66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800dd5a:	6878      	ldr	r0, [r7, #4]
 800dd5c:	f000 fb37 	bl	800e3ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dd60:	6878      	ldr	r0, [r7, #4]
 800dd62:	f7f3 fd89 	bl	8001878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	2200      	movs	r2, #0
 800dd6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	691b      	ldr	r3, [r3, #16]
 800dd72:	f003 0304 	and.w	r3, r3, #4
 800dd76:	2b04      	cmp	r3, #4
 800dd78:	d122      	bne.n	800ddc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	68db      	ldr	r3, [r3, #12]
 800dd80:	f003 0304 	and.w	r3, r3, #4
 800dd84:	2b04      	cmp	r3, #4
 800dd86:	d11b      	bne.n	800ddc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	f06f 0204 	mvn.w	r2, #4
 800dd90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	2202      	movs	r2, #2
 800dd96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	699b      	ldr	r3, [r3, #24]
 800dd9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d003      	beq.n	800ddae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dda6:	6878      	ldr	r0, [r7, #4]
 800dda8:	f000 fb1b 	bl	800e3e2 <HAL_TIM_IC_CaptureCallback>
 800ddac:	e005      	b.n	800ddba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ddae:	6878      	ldr	r0, [r7, #4]
 800ddb0:	f000 fb0d 	bl	800e3ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ddb4:	6878      	ldr	r0, [r7, #4]
 800ddb6:	f7f3 fd5f 	bl	8001878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	2200      	movs	r2, #0
 800ddbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	691b      	ldr	r3, [r3, #16]
 800ddc6:	f003 0308 	and.w	r3, r3, #8
 800ddca:	2b08      	cmp	r3, #8
 800ddcc:	d122      	bne.n	800de14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	68db      	ldr	r3, [r3, #12]
 800ddd4:	f003 0308 	and.w	r3, r3, #8
 800ddd8:	2b08      	cmp	r3, #8
 800ddda:	d11b      	bne.n	800de14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	f06f 0208 	mvn.w	r2, #8
 800dde4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	2204      	movs	r2, #4
 800ddea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	69db      	ldr	r3, [r3, #28]
 800ddf2:	f003 0303 	and.w	r3, r3, #3
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d003      	beq.n	800de02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ddfa:	6878      	ldr	r0, [r7, #4]
 800ddfc:	f000 faf1 	bl	800e3e2 <HAL_TIM_IC_CaptureCallback>
 800de00:	e005      	b.n	800de0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800de02:	6878      	ldr	r0, [r7, #4]
 800de04:	f000 fae3 	bl	800e3ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800de08:	6878      	ldr	r0, [r7, #4]
 800de0a:	f7f3 fd35 	bl	8001878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	2200      	movs	r2, #0
 800de12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	691b      	ldr	r3, [r3, #16]
 800de1a:	f003 0310 	and.w	r3, r3, #16
 800de1e:	2b10      	cmp	r3, #16
 800de20:	d122      	bne.n	800de68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	68db      	ldr	r3, [r3, #12]
 800de28:	f003 0310 	and.w	r3, r3, #16
 800de2c:	2b10      	cmp	r3, #16
 800de2e:	d11b      	bne.n	800de68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	f06f 0210 	mvn.w	r2, #16
 800de38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	2208      	movs	r2, #8
 800de3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	69db      	ldr	r3, [r3, #28]
 800de46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d003      	beq.n	800de56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800de4e:	6878      	ldr	r0, [r7, #4]
 800de50:	f000 fac7 	bl	800e3e2 <HAL_TIM_IC_CaptureCallback>
 800de54:	e005      	b.n	800de62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800de56:	6878      	ldr	r0, [r7, #4]
 800de58:	f000 fab9 	bl	800e3ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800de5c:	6878      	ldr	r0, [r7, #4]
 800de5e:	f7f3 fd0b 	bl	8001878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	2200      	movs	r2, #0
 800de66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	691b      	ldr	r3, [r3, #16]
 800de6e:	f003 0301 	and.w	r3, r3, #1
 800de72:	2b01      	cmp	r3, #1
 800de74:	d10e      	bne.n	800de94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	68db      	ldr	r3, [r3, #12]
 800de7c:	f003 0301 	and.w	r3, r3, #1
 800de80:	2b01      	cmp	r3, #1
 800de82:	d107      	bne.n	800de94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	f06f 0201 	mvn.w	r2, #1
 800de8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800de8e:	6878      	ldr	r0, [r7, #4]
 800de90:	f7f5 fd82 	bl	8003998 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	691b      	ldr	r3, [r3, #16]
 800de9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800de9e:	2b80      	cmp	r3, #128	; 0x80
 800dea0:	d10e      	bne.n	800dec0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	68db      	ldr	r3, [r3, #12]
 800dea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800deac:	2b80      	cmp	r3, #128	; 0x80
 800deae:	d107      	bne.n	800dec0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800deb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800deba:	6878      	ldr	r0, [r7, #4]
 800debc:	f000 feb4 	bl	800ec28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	691b      	ldr	r3, [r3, #16]
 800dec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800deca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dece:	d10e      	bne.n	800deee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	68db      	ldr	r3, [r3, #12]
 800ded6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800deda:	2b80      	cmp	r3, #128	; 0x80
 800dedc:	d107      	bne.n	800deee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800dee6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800dee8:	6878      	ldr	r0, [r7, #4]
 800deea:	f000 fea7 	bl	800ec3c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	691b      	ldr	r3, [r3, #16]
 800def4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800def8:	2b40      	cmp	r3, #64	; 0x40
 800defa:	d10e      	bne.n	800df1a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	68db      	ldr	r3, [r3, #12]
 800df02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df06:	2b40      	cmp	r3, #64	; 0x40
 800df08:	d107      	bne.n	800df1a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800df12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800df14:	6878      	ldr	r0, [r7, #4]
 800df16:	f000 fa6e 	bl	800e3f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	691b      	ldr	r3, [r3, #16]
 800df20:	f003 0320 	and.w	r3, r3, #32
 800df24:	2b20      	cmp	r3, #32
 800df26:	d10e      	bne.n	800df46 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	68db      	ldr	r3, [r3, #12]
 800df2e:	f003 0320 	and.w	r3, r3, #32
 800df32:	2b20      	cmp	r3, #32
 800df34:	d107      	bne.n	800df46 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	f06f 0220 	mvn.w	r2, #32
 800df3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800df40:	6878      	ldr	r0, [r7, #4]
 800df42:	f000 fe67 	bl	800ec14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800df46:	bf00      	nop
 800df48:	3708      	adds	r7, #8
 800df4a:	46bd      	mov	sp, r7
 800df4c:	bd80      	pop	{r7, pc}
	...

0800df50 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800df50:	b580      	push	{r7, lr}
 800df52:	b084      	sub	sp, #16
 800df54:	af00      	add	r7, sp, #0
 800df56:	60f8      	str	r0, [r7, #12]
 800df58:	60b9      	str	r1, [r7, #8]
 800df5a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800df62:	2b01      	cmp	r3, #1
 800df64:	d101      	bne.n	800df6a <HAL_TIM_OC_ConfigChannel+0x1a>
 800df66:	2302      	movs	r3, #2
 800df68:	e064      	b.n	800e034 <HAL_TIM_OC_ConfigChannel+0xe4>
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	2201      	movs	r2, #1
 800df6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	2b14      	cmp	r3, #20
 800df76:	d857      	bhi.n	800e028 <HAL_TIM_OC_ConfigChannel+0xd8>
 800df78:	a201      	add	r2, pc, #4	; (adr r2, 800df80 <HAL_TIM_OC_ConfigChannel+0x30>)
 800df7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df7e:	bf00      	nop
 800df80:	0800dfd5 	.word	0x0800dfd5
 800df84:	0800e029 	.word	0x0800e029
 800df88:	0800e029 	.word	0x0800e029
 800df8c:	0800e029 	.word	0x0800e029
 800df90:	0800dfe3 	.word	0x0800dfe3
 800df94:	0800e029 	.word	0x0800e029
 800df98:	0800e029 	.word	0x0800e029
 800df9c:	0800e029 	.word	0x0800e029
 800dfa0:	0800dff1 	.word	0x0800dff1
 800dfa4:	0800e029 	.word	0x0800e029
 800dfa8:	0800e029 	.word	0x0800e029
 800dfac:	0800e029 	.word	0x0800e029
 800dfb0:	0800dfff 	.word	0x0800dfff
 800dfb4:	0800e029 	.word	0x0800e029
 800dfb8:	0800e029 	.word	0x0800e029
 800dfbc:	0800e029 	.word	0x0800e029
 800dfc0:	0800e00d 	.word	0x0800e00d
 800dfc4:	0800e029 	.word	0x0800e029
 800dfc8:	0800e029 	.word	0x0800e029
 800dfcc:	0800e029 	.word	0x0800e029
 800dfd0:	0800e01b 	.word	0x0800e01b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	68b9      	ldr	r1, [r7, #8]
 800dfda:	4618      	mov	r0, r3
 800dfdc:	f000 fa7a 	bl	800e4d4 <TIM_OC1_SetConfig>
      break;
 800dfe0:	e023      	b.n	800e02a <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	68b9      	ldr	r1, [r7, #8]
 800dfe8:	4618      	mov	r0, r3
 800dfea:	f000 faef 	bl	800e5cc <TIM_OC2_SetConfig>
      break;
 800dfee:	e01c      	b.n	800e02a <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	68b9      	ldr	r1, [r7, #8]
 800dff6:	4618      	mov	r0, r3
 800dff8:	f000 fb62 	bl	800e6c0 <TIM_OC3_SetConfig>
      break;
 800dffc:	e015      	b.n	800e02a <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	68b9      	ldr	r1, [r7, #8]
 800e004:	4618      	mov	r0, r3
 800e006:	f000 fbd3 	bl	800e7b0 <TIM_OC4_SetConfig>
      break;
 800e00a:	e00e      	b.n	800e02a <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	68b9      	ldr	r1, [r7, #8]
 800e012:	4618      	mov	r0, r3
 800e014:	f000 fc2a 	bl	800e86c <TIM_OC5_SetConfig>
      break;
 800e018:	e007      	b.n	800e02a <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	68b9      	ldr	r1, [r7, #8]
 800e020:	4618      	mov	r0, r3
 800e022:	f000 fc7b 	bl	800e91c <TIM_OC6_SetConfig>
      break;
 800e026:	e000      	b.n	800e02a <HAL_TIM_OC_ConfigChannel+0xda>
    }

    default:
      break;
 800e028:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	2200      	movs	r2, #0
 800e02e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e032:	2300      	movs	r3, #0
}
 800e034:	4618      	mov	r0, r3
 800e036:	3710      	adds	r7, #16
 800e038:	46bd      	mov	sp, r7
 800e03a:	bd80      	pop	{r7, pc}

0800e03c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e03c:	b580      	push	{r7, lr}
 800e03e:	b084      	sub	sp, #16
 800e040:	af00      	add	r7, sp, #0
 800e042:	60f8      	str	r0, [r7, #12]
 800e044:	60b9      	str	r1, [r7, #8]
 800e046:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e04e:	2b01      	cmp	r3, #1
 800e050:	d101      	bne.n	800e056 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800e052:	2302      	movs	r3, #2
 800e054:	e0fd      	b.n	800e252 <HAL_TIM_PWM_ConfigChannel+0x216>
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	2201      	movs	r2, #1
 800e05a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	2b14      	cmp	r3, #20
 800e062:	f200 80f0 	bhi.w	800e246 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800e066:	a201      	add	r2, pc, #4	; (adr r2, 800e06c <HAL_TIM_PWM_ConfigChannel+0x30>)
 800e068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e06c:	0800e0c1 	.word	0x0800e0c1
 800e070:	0800e247 	.word	0x0800e247
 800e074:	0800e247 	.word	0x0800e247
 800e078:	0800e247 	.word	0x0800e247
 800e07c:	0800e101 	.word	0x0800e101
 800e080:	0800e247 	.word	0x0800e247
 800e084:	0800e247 	.word	0x0800e247
 800e088:	0800e247 	.word	0x0800e247
 800e08c:	0800e143 	.word	0x0800e143
 800e090:	0800e247 	.word	0x0800e247
 800e094:	0800e247 	.word	0x0800e247
 800e098:	0800e247 	.word	0x0800e247
 800e09c:	0800e183 	.word	0x0800e183
 800e0a0:	0800e247 	.word	0x0800e247
 800e0a4:	0800e247 	.word	0x0800e247
 800e0a8:	0800e247 	.word	0x0800e247
 800e0ac:	0800e1c5 	.word	0x0800e1c5
 800e0b0:	0800e247 	.word	0x0800e247
 800e0b4:	0800e247 	.word	0x0800e247
 800e0b8:	0800e247 	.word	0x0800e247
 800e0bc:	0800e205 	.word	0x0800e205
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	68b9      	ldr	r1, [r7, #8]
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	f000 fa04 	bl	800e4d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	699a      	ldr	r2, [r3, #24]
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	f042 0208 	orr.w	r2, r2, #8
 800e0da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	699a      	ldr	r2, [r3, #24]
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	f022 0204 	bic.w	r2, r2, #4
 800e0ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	6999      	ldr	r1, [r3, #24]
 800e0f2:	68bb      	ldr	r3, [r7, #8]
 800e0f4:	691a      	ldr	r2, [r3, #16]
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	430a      	orrs	r2, r1
 800e0fc:	619a      	str	r2, [r3, #24]
      break;
 800e0fe:	e0a3      	b.n	800e248 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	68b9      	ldr	r1, [r7, #8]
 800e106:	4618      	mov	r0, r3
 800e108:	f000 fa60 	bl	800e5cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	699a      	ldr	r2, [r3, #24]
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e11a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	699a      	ldr	r2, [r3, #24]
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e12a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	6999      	ldr	r1, [r3, #24]
 800e132:	68bb      	ldr	r3, [r7, #8]
 800e134:	691b      	ldr	r3, [r3, #16]
 800e136:	021a      	lsls	r2, r3, #8
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	430a      	orrs	r2, r1
 800e13e:	619a      	str	r2, [r3, #24]
      break;
 800e140:	e082      	b.n	800e248 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	68b9      	ldr	r1, [r7, #8]
 800e148:	4618      	mov	r0, r3
 800e14a:	f000 fab9 	bl	800e6c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	69da      	ldr	r2, [r3, #28]
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	f042 0208 	orr.w	r2, r2, #8
 800e15c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	69da      	ldr	r2, [r3, #28]
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	f022 0204 	bic.w	r2, r2, #4
 800e16c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	69d9      	ldr	r1, [r3, #28]
 800e174:	68bb      	ldr	r3, [r7, #8]
 800e176:	691a      	ldr	r2, [r3, #16]
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	430a      	orrs	r2, r1
 800e17e:	61da      	str	r2, [r3, #28]
      break;
 800e180:	e062      	b.n	800e248 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	68b9      	ldr	r1, [r7, #8]
 800e188:	4618      	mov	r0, r3
 800e18a:	f000 fb11 	bl	800e7b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	69da      	ldr	r2, [r3, #28]
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e19c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	69da      	ldr	r2, [r3, #28]
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e1ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	69d9      	ldr	r1, [r3, #28]
 800e1b4:	68bb      	ldr	r3, [r7, #8]
 800e1b6:	691b      	ldr	r3, [r3, #16]
 800e1b8:	021a      	lsls	r2, r3, #8
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	430a      	orrs	r2, r1
 800e1c0:	61da      	str	r2, [r3, #28]
      break;
 800e1c2:	e041      	b.n	800e248 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	68b9      	ldr	r1, [r7, #8]
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	f000 fb4e 	bl	800e86c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	f042 0208 	orr.w	r2, r2, #8
 800e1de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	f022 0204 	bic.w	r2, r2, #4
 800e1ee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e1f6:	68bb      	ldr	r3, [r7, #8]
 800e1f8:	691a      	ldr	r2, [r3, #16]
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	430a      	orrs	r2, r1
 800e200:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800e202:	e021      	b.n	800e248 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	68b9      	ldr	r1, [r7, #8]
 800e20a:	4618      	mov	r0, r3
 800e20c:	f000 fb86 	bl	800e91c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e21e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e22e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e236:	68bb      	ldr	r3, [r7, #8]
 800e238:	691b      	ldr	r3, [r3, #16]
 800e23a:	021a      	lsls	r2, r3, #8
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	430a      	orrs	r2, r1
 800e242:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800e244:	e000      	b.n	800e248 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800e246:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	2200      	movs	r2, #0
 800e24c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e250:	2300      	movs	r3, #0
}
 800e252:	4618      	mov	r0, r3
 800e254:	3710      	adds	r7, #16
 800e256:	46bd      	mov	sp, r7
 800e258:	bd80      	pop	{r7, pc}
 800e25a:	bf00      	nop

0800e25c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e25c:	b580      	push	{r7, lr}
 800e25e:	b084      	sub	sp, #16
 800e260:	af00      	add	r7, sp, #0
 800e262:	6078      	str	r0, [r7, #4]
 800e264:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e26c:	2b01      	cmp	r3, #1
 800e26e:	d101      	bne.n	800e274 <HAL_TIM_ConfigClockSource+0x18>
 800e270:	2302      	movs	r3, #2
 800e272:	e0a8      	b.n	800e3c6 <HAL_TIM_ConfigClockSource+0x16a>
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	2201      	movs	r2, #1
 800e278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	2202      	movs	r2, #2
 800e280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	689b      	ldr	r3, [r3, #8]
 800e28a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800e292:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800e296:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e29e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	68fa      	ldr	r2, [r7, #12]
 800e2a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e2a8:	683b      	ldr	r3, [r7, #0]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	2b40      	cmp	r3, #64	; 0x40
 800e2ae:	d067      	beq.n	800e380 <HAL_TIM_ConfigClockSource+0x124>
 800e2b0:	2b40      	cmp	r3, #64	; 0x40
 800e2b2:	d80b      	bhi.n	800e2cc <HAL_TIM_ConfigClockSource+0x70>
 800e2b4:	2b10      	cmp	r3, #16
 800e2b6:	d073      	beq.n	800e3a0 <HAL_TIM_ConfigClockSource+0x144>
 800e2b8:	2b10      	cmp	r3, #16
 800e2ba:	d802      	bhi.n	800e2c2 <HAL_TIM_ConfigClockSource+0x66>
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d06f      	beq.n	800e3a0 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800e2c0:	e078      	b.n	800e3b4 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800e2c2:	2b20      	cmp	r3, #32
 800e2c4:	d06c      	beq.n	800e3a0 <HAL_TIM_ConfigClockSource+0x144>
 800e2c6:	2b30      	cmp	r3, #48	; 0x30
 800e2c8:	d06a      	beq.n	800e3a0 <HAL_TIM_ConfigClockSource+0x144>
      break;
 800e2ca:	e073      	b.n	800e3b4 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800e2cc:	2b70      	cmp	r3, #112	; 0x70
 800e2ce:	d00d      	beq.n	800e2ec <HAL_TIM_ConfigClockSource+0x90>
 800e2d0:	2b70      	cmp	r3, #112	; 0x70
 800e2d2:	d804      	bhi.n	800e2de <HAL_TIM_ConfigClockSource+0x82>
 800e2d4:	2b50      	cmp	r3, #80	; 0x50
 800e2d6:	d033      	beq.n	800e340 <HAL_TIM_ConfigClockSource+0xe4>
 800e2d8:	2b60      	cmp	r3, #96	; 0x60
 800e2da:	d041      	beq.n	800e360 <HAL_TIM_ConfigClockSource+0x104>
      break;
 800e2dc:	e06a      	b.n	800e3b4 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800e2de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e2e2:	d066      	beq.n	800e3b2 <HAL_TIM_ConfigClockSource+0x156>
 800e2e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e2e8:	d017      	beq.n	800e31a <HAL_TIM_ConfigClockSource+0xbe>
      break;
 800e2ea:	e063      	b.n	800e3b4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	6818      	ldr	r0, [r3, #0]
 800e2f0:	683b      	ldr	r3, [r7, #0]
 800e2f2:	6899      	ldr	r1, [r3, #8]
 800e2f4:	683b      	ldr	r3, [r7, #0]
 800e2f6:	685a      	ldr	r2, [r3, #4]
 800e2f8:	683b      	ldr	r3, [r7, #0]
 800e2fa:	68db      	ldr	r3, [r3, #12]
 800e2fc:	f000 fbe4 	bl	800eac8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	689b      	ldr	r3, [r3, #8]
 800e306:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e30e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	68fa      	ldr	r2, [r7, #12]
 800e316:	609a      	str	r2, [r3, #8]
      break;
 800e318:	e04c      	b.n	800e3b4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	6818      	ldr	r0, [r3, #0]
 800e31e:	683b      	ldr	r3, [r7, #0]
 800e320:	6899      	ldr	r1, [r3, #8]
 800e322:	683b      	ldr	r3, [r7, #0]
 800e324:	685a      	ldr	r2, [r3, #4]
 800e326:	683b      	ldr	r3, [r7, #0]
 800e328:	68db      	ldr	r3, [r3, #12]
 800e32a:	f000 fbcd 	bl	800eac8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	689a      	ldr	r2, [r3, #8]
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e33c:	609a      	str	r2, [r3, #8]
      break;
 800e33e:	e039      	b.n	800e3b4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	6818      	ldr	r0, [r3, #0]
 800e344:	683b      	ldr	r3, [r7, #0]
 800e346:	6859      	ldr	r1, [r3, #4]
 800e348:	683b      	ldr	r3, [r7, #0]
 800e34a:	68db      	ldr	r3, [r3, #12]
 800e34c:	461a      	mov	r2, r3
 800e34e:	f000 fb3f 	bl	800e9d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	2150      	movs	r1, #80	; 0x50
 800e358:	4618      	mov	r0, r3
 800e35a:	f000 fb98 	bl	800ea8e <TIM_ITRx_SetConfig>
      break;
 800e35e:	e029      	b.n	800e3b4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	6818      	ldr	r0, [r3, #0]
 800e364:	683b      	ldr	r3, [r7, #0]
 800e366:	6859      	ldr	r1, [r3, #4]
 800e368:	683b      	ldr	r3, [r7, #0]
 800e36a:	68db      	ldr	r3, [r3, #12]
 800e36c:	461a      	mov	r2, r3
 800e36e:	f000 fb5e 	bl	800ea2e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	2160      	movs	r1, #96	; 0x60
 800e378:	4618      	mov	r0, r3
 800e37a:	f000 fb88 	bl	800ea8e <TIM_ITRx_SetConfig>
      break;
 800e37e:	e019      	b.n	800e3b4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	6818      	ldr	r0, [r3, #0]
 800e384:	683b      	ldr	r3, [r7, #0]
 800e386:	6859      	ldr	r1, [r3, #4]
 800e388:	683b      	ldr	r3, [r7, #0]
 800e38a:	68db      	ldr	r3, [r3, #12]
 800e38c:	461a      	mov	r2, r3
 800e38e:	f000 fb1f 	bl	800e9d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	2140      	movs	r1, #64	; 0x40
 800e398:	4618      	mov	r0, r3
 800e39a:	f000 fb78 	bl	800ea8e <TIM_ITRx_SetConfig>
      break;
 800e39e:	e009      	b.n	800e3b4 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	681a      	ldr	r2, [r3, #0]
 800e3a4:	683b      	ldr	r3, [r7, #0]
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	4619      	mov	r1, r3
 800e3aa:	4610      	mov	r0, r2
 800e3ac:	f000 fb6f 	bl	800ea8e <TIM_ITRx_SetConfig>
        break;
 800e3b0:	e000      	b.n	800e3b4 <HAL_TIM_ConfigClockSource+0x158>
      break;
 800e3b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	2201      	movs	r2, #1
 800e3b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	2200      	movs	r2, #0
 800e3c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e3c4:	2300      	movs	r3, #0
}
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	3710      	adds	r7, #16
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	bd80      	pop	{r7, pc}

0800e3ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e3ce:	b480      	push	{r7}
 800e3d0:	b083      	sub	sp, #12
 800e3d2:	af00      	add	r7, sp, #0
 800e3d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e3d6:	bf00      	nop
 800e3d8:	370c      	adds	r7, #12
 800e3da:	46bd      	mov	sp, r7
 800e3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e0:	4770      	bx	lr

0800e3e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e3e2:	b480      	push	{r7}
 800e3e4:	b083      	sub	sp, #12
 800e3e6:	af00      	add	r7, sp, #0
 800e3e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e3ea:	bf00      	nop
 800e3ec:	370c      	adds	r7, #12
 800e3ee:	46bd      	mov	sp, r7
 800e3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f4:	4770      	bx	lr

0800e3f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e3f6:	b480      	push	{r7}
 800e3f8:	b083      	sub	sp, #12
 800e3fa:	af00      	add	r7, sp, #0
 800e3fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e3fe:	bf00      	nop
 800e400:	370c      	adds	r7, #12
 800e402:	46bd      	mov	sp, r7
 800e404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e408:	4770      	bx	lr
	...

0800e40c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e40c:	b480      	push	{r7}
 800e40e:	b085      	sub	sp, #20
 800e410:	af00      	add	r7, sp, #0
 800e412:	6078      	str	r0, [r7, #4]
 800e414:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	4a2a      	ldr	r2, [pc, #168]	; (800e4c8 <TIM_Base_SetConfig+0xbc>)
 800e420:	4293      	cmp	r3, r2
 800e422:	d003      	beq.n	800e42c <TIM_Base_SetConfig+0x20>
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e42a:	d108      	bne.n	800e43e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e432:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e434:	683b      	ldr	r3, [r7, #0]
 800e436:	685b      	ldr	r3, [r3, #4]
 800e438:	68fa      	ldr	r2, [r7, #12]
 800e43a:	4313      	orrs	r3, r2
 800e43c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	4a21      	ldr	r2, [pc, #132]	; (800e4c8 <TIM_Base_SetConfig+0xbc>)
 800e442:	4293      	cmp	r3, r2
 800e444:	d00b      	beq.n	800e45e <TIM_Base_SetConfig+0x52>
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e44c:	d007      	beq.n	800e45e <TIM_Base_SetConfig+0x52>
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	4a1e      	ldr	r2, [pc, #120]	; (800e4cc <TIM_Base_SetConfig+0xc0>)
 800e452:	4293      	cmp	r3, r2
 800e454:	d003      	beq.n	800e45e <TIM_Base_SetConfig+0x52>
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	4a1d      	ldr	r2, [pc, #116]	; (800e4d0 <TIM_Base_SetConfig+0xc4>)
 800e45a:	4293      	cmp	r3, r2
 800e45c:	d108      	bne.n	800e470 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e464:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e466:	683b      	ldr	r3, [r7, #0]
 800e468:	68db      	ldr	r3, [r3, #12]
 800e46a:	68fa      	ldr	r2, [r7, #12]
 800e46c:	4313      	orrs	r3, r2
 800e46e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e476:	683b      	ldr	r3, [r7, #0]
 800e478:	695b      	ldr	r3, [r3, #20]
 800e47a:	4313      	orrs	r3, r2
 800e47c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	68fa      	ldr	r2, [r7, #12]
 800e482:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e484:	683b      	ldr	r3, [r7, #0]
 800e486:	689a      	ldr	r2, [r3, #8]
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e48c:	683b      	ldr	r3, [r7, #0]
 800e48e:	681a      	ldr	r2, [r3, #0]
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	4a0c      	ldr	r2, [pc, #48]	; (800e4c8 <TIM_Base_SetConfig+0xbc>)
 800e498:	4293      	cmp	r3, r2
 800e49a:	d007      	beq.n	800e4ac <TIM_Base_SetConfig+0xa0>
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	4a0b      	ldr	r2, [pc, #44]	; (800e4cc <TIM_Base_SetConfig+0xc0>)
 800e4a0:	4293      	cmp	r3, r2
 800e4a2:	d003      	beq.n	800e4ac <TIM_Base_SetConfig+0xa0>
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	4a0a      	ldr	r2, [pc, #40]	; (800e4d0 <TIM_Base_SetConfig+0xc4>)
 800e4a8:	4293      	cmp	r3, r2
 800e4aa:	d103      	bne.n	800e4b4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e4ac:	683b      	ldr	r3, [r7, #0]
 800e4ae:	691a      	ldr	r2, [r3, #16]
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	2201      	movs	r2, #1
 800e4b8:	615a      	str	r2, [r3, #20]
}
 800e4ba:	bf00      	nop
 800e4bc:	3714      	adds	r7, #20
 800e4be:	46bd      	mov	sp, r7
 800e4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c4:	4770      	bx	lr
 800e4c6:	bf00      	nop
 800e4c8:	40012c00 	.word	0x40012c00
 800e4cc:	40014400 	.word	0x40014400
 800e4d0:	40014800 	.word	0x40014800

0800e4d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e4d4:	b480      	push	{r7}
 800e4d6:	b087      	sub	sp, #28
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	6078      	str	r0, [r7, #4]
 800e4dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	6a1b      	ldr	r3, [r3, #32]
 800e4e2:	f023 0201 	bic.w	r2, r3, #1
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	6a1b      	ldr	r3, [r3, #32]
 800e4ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	685b      	ldr	r3, [r3, #4]
 800e4f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	699b      	ldr	r3, [r3, #24]
 800e4fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e506:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	f023 0303 	bic.w	r3, r3, #3
 800e50e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e510:	683b      	ldr	r3, [r7, #0]
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	68fa      	ldr	r2, [r7, #12]
 800e516:	4313      	orrs	r3, r2
 800e518:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e51a:	697b      	ldr	r3, [r7, #20]
 800e51c:	f023 0302 	bic.w	r3, r3, #2
 800e520:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e522:	683b      	ldr	r3, [r7, #0]
 800e524:	689b      	ldr	r3, [r3, #8]
 800e526:	697a      	ldr	r2, [r7, #20]
 800e528:	4313      	orrs	r3, r2
 800e52a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	4a24      	ldr	r2, [pc, #144]	; (800e5c0 <TIM_OC1_SetConfig+0xec>)
 800e530:	4293      	cmp	r3, r2
 800e532:	d007      	beq.n	800e544 <TIM_OC1_SetConfig+0x70>
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	4a23      	ldr	r2, [pc, #140]	; (800e5c4 <TIM_OC1_SetConfig+0xf0>)
 800e538:	4293      	cmp	r3, r2
 800e53a:	d003      	beq.n	800e544 <TIM_OC1_SetConfig+0x70>
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	4a22      	ldr	r2, [pc, #136]	; (800e5c8 <TIM_OC1_SetConfig+0xf4>)
 800e540:	4293      	cmp	r3, r2
 800e542:	d10c      	bne.n	800e55e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e544:	697b      	ldr	r3, [r7, #20]
 800e546:	f023 0308 	bic.w	r3, r3, #8
 800e54a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e54c:	683b      	ldr	r3, [r7, #0]
 800e54e:	68db      	ldr	r3, [r3, #12]
 800e550:	697a      	ldr	r2, [r7, #20]
 800e552:	4313      	orrs	r3, r2
 800e554:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e556:	697b      	ldr	r3, [r7, #20]
 800e558:	f023 0304 	bic.w	r3, r3, #4
 800e55c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	4a17      	ldr	r2, [pc, #92]	; (800e5c0 <TIM_OC1_SetConfig+0xec>)
 800e562:	4293      	cmp	r3, r2
 800e564:	d007      	beq.n	800e576 <TIM_OC1_SetConfig+0xa2>
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	4a17      	ldr	r2, [pc, #92]	; (800e5c8 <TIM_OC1_SetConfig+0xf4>)
 800e56a:	4293      	cmp	r3, r2
 800e56c:	d003      	beq.n	800e576 <TIM_OC1_SetConfig+0xa2>
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	4a14      	ldr	r2, [pc, #80]	; (800e5c4 <TIM_OC1_SetConfig+0xf0>)
 800e572:	4293      	cmp	r3, r2
 800e574:	d111      	bne.n	800e59a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e576:	693b      	ldr	r3, [r7, #16]
 800e578:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e57c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e57e:	693b      	ldr	r3, [r7, #16]
 800e580:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e584:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e586:	683b      	ldr	r3, [r7, #0]
 800e588:	695b      	ldr	r3, [r3, #20]
 800e58a:	693a      	ldr	r2, [r7, #16]
 800e58c:	4313      	orrs	r3, r2
 800e58e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e590:	683b      	ldr	r3, [r7, #0]
 800e592:	699b      	ldr	r3, [r3, #24]
 800e594:	693a      	ldr	r2, [r7, #16]
 800e596:	4313      	orrs	r3, r2
 800e598:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	693a      	ldr	r2, [r7, #16]
 800e59e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	68fa      	ldr	r2, [r7, #12]
 800e5a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e5a6:	683b      	ldr	r3, [r7, #0]
 800e5a8:	685a      	ldr	r2, [r3, #4]
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	697a      	ldr	r2, [r7, #20]
 800e5b2:	621a      	str	r2, [r3, #32]
}
 800e5b4:	bf00      	nop
 800e5b6:	371c      	adds	r7, #28
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5be:	4770      	bx	lr
 800e5c0:	40012c00 	.word	0x40012c00
 800e5c4:	40014800 	.word	0x40014800
 800e5c8:	40014400 	.word	0x40014400

0800e5cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e5cc:	b480      	push	{r7}
 800e5ce:	b087      	sub	sp, #28
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	6078      	str	r0, [r7, #4]
 800e5d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	6a1b      	ldr	r3, [r3, #32]
 800e5da:	f023 0210 	bic.w	r2, r3, #16
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	6a1b      	ldr	r3, [r3, #32]
 800e5e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	685b      	ldr	r3, [r3, #4]
 800e5ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	699b      	ldr	r3, [r3, #24]
 800e5f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e5fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e5fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e606:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e608:	683b      	ldr	r3, [r7, #0]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	021b      	lsls	r3, r3, #8
 800e60e:	68fa      	ldr	r2, [r7, #12]
 800e610:	4313      	orrs	r3, r2
 800e612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e614:	697b      	ldr	r3, [r7, #20]
 800e616:	f023 0320 	bic.w	r3, r3, #32
 800e61a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e61c:	683b      	ldr	r3, [r7, #0]
 800e61e:	689b      	ldr	r3, [r3, #8]
 800e620:	011b      	lsls	r3, r3, #4
 800e622:	697a      	ldr	r2, [r7, #20]
 800e624:	4313      	orrs	r3, r2
 800e626:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	4a22      	ldr	r2, [pc, #136]	; (800e6b4 <TIM_OC2_SetConfig+0xe8>)
 800e62c:	4293      	cmp	r3, r2
 800e62e:	d10d      	bne.n	800e64c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e630:	697b      	ldr	r3, [r7, #20]
 800e632:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e636:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e638:	683b      	ldr	r3, [r7, #0]
 800e63a:	68db      	ldr	r3, [r3, #12]
 800e63c:	011b      	lsls	r3, r3, #4
 800e63e:	697a      	ldr	r2, [r7, #20]
 800e640:	4313      	orrs	r3, r2
 800e642:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e644:	697b      	ldr	r3, [r7, #20]
 800e646:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e64a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	4a19      	ldr	r2, [pc, #100]	; (800e6b4 <TIM_OC2_SetConfig+0xe8>)
 800e650:	4293      	cmp	r3, r2
 800e652:	d007      	beq.n	800e664 <TIM_OC2_SetConfig+0x98>
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	4a18      	ldr	r2, [pc, #96]	; (800e6b8 <TIM_OC2_SetConfig+0xec>)
 800e658:	4293      	cmp	r3, r2
 800e65a:	d003      	beq.n	800e664 <TIM_OC2_SetConfig+0x98>
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	4a17      	ldr	r2, [pc, #92]	; (800e6bc <TIM_OC2_SetConfig+0xf0>)
 800e660:	4293      	cmp	r3, r2
 800e662:	d113      	bne.n	800e68c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e664:	693b      	ldr	r3, [r7, #16]
 800e666:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e66a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e66c:	693b      	ldr	r3, [r7, #16]
 800e66e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e672:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e674:	683b      	ldr	r3, [r7, #0]
 800e676:	695b      	ldr	r3, [r3, #20]
 800e678:	009b      	lsls	r3, r3, #2
 800e67a:	693a      	ldr	r2, [r7, #16]
 800e67c:	4313      	orrs	r3, r2
 800e67e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e680:	683b      	ldr	r3, [r7, #0]
 800e682:	699b      	ldr	r3, [r3, #24]
 800e684:	009b      	lsls	r3, r3, #2
 800e686:	693a      	ldr	r2, [r7, #16]
 800e688:	4313      	orrs	r3, r2
 800e68a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	693a      	ldr	r2, [r7, #16]
 800e690:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	68fa      	ldr	r2, [r7, #12]
 800e696:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e698:	683b      	ldr	r3, [r7, #0]
 800e69a:	685a      	ldr	r2, [r3, #4]
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	697a      	ldr	r2, [r7, #20]
 800e6a4:	621a      	str	r2, [r3, #32]
}
 800e6a6:	bf00      	nop
 800e6a8:	371c      	adds	r7, #28
 800e6aa:	46bd      	mov	sp, r7
 800e6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b0:	4770      	bx	lr
 800e6b2:	bf00      	nop
 800e6b4:	40012c00 	.word	0x40012c00
 800e6b8:	40014400 	.word	0x40014400
 800e6bc:	40014800 	.word	0x40014800

0800e6c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e6c0:	b480      	push	{r7}
 800e6c2:	b087      	sub	sp, #28
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	6078      	str	r0, [r7, #4]
 800e6c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	6a1b      	ldr	r3, [r3, #32]
 800e6ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	6a1b      	ldr	r3, [r3, #32]
 800e6da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	685b      	ldr	r3, [r3, #4]
 800e6e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	69db      	ldr	r3, [r3, #28]
 800e6e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e6ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e6f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	f023 0303 	bic.w	r3, r3, #3
 800e6fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e6fc:	683b      	ldr	r3, [r7, #0]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	68fa      	ldr	r2, [r7, #12]
 800e702:	4313      	orrs	r3, r2
 800e704:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e706:	697b      	ldr	r3, [r7, #20]
 800e708:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e70c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e70e:	683b      	ldr	r3, [r7, #0]
 800e710:	689b      	ldr	r3, [r3, #8]
 800e712:	021b      	lsls	r3, r3, #8
 800e714:	697a      	ldr	r2, [r7, #20]
 800e716:	4313      	orrs	r3, r2
 800e718:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	4a21      	ldr	r2, [pc, #132]	; (800e7a4 <TIM_OC3_SetConfig+0xe4>)
 800e71e:	4293      	cmp	r3, r2
 800e720:	d10d      	bne.n	800e73e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e722:	697b      	ldr	r3, [r7, #20]
 800e724:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e728:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e72a:	683b      	ldr	r3, [r7, #0]
 800e72c:	68db      	ldr	r3, [r3, #12]
 800e72e:	021b      	lsls	r3, r3, #8
 800e730:	697a      	ldr	r2, [r7, #20]
 800e732:	4313      	orrs	r3, r2
 800e734:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e736:	697b      	ldr	r3, [r7, #20]
 800e738:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e73c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	4a18      	ldr	r2, [pc, #96]	; (800e7a4 <TIM_OC3_SetConfig+0xe4>)
 800e742:	4293      	cmp	r3, r2
 800e744:	d007      	beq.n	800e756 <TIM_OC3_SetConfig+0x96>
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	4a17      	ldr	r2, [pc, #92]	; (800e7a8 <TIM_OC3_SetConfig+0xe8>)
 800e74a:	4293      	cmp	r3, r2
 800e74c:	d003      	beq.n	800e756 <TIM_OC3_SetConfig+0x96>
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	4a16      	ldr	r2, [pc, #88]	; (800e7ac <TIM_OC3_SetConfig+0xec>)
 800e752:	4293      	cmp	r3, r2
 800e754:	d113      	bne.n	800e77e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e756:	693b      	ldr	r3, [r7, #16]
 800e758:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e75c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e75e:	693b      	ldr	r3, [r7, #16]
 800e760:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e764:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e766:	683b      	ldr	r3, [r7, #0]
 800e768:	695b      	ldr	r3, [r3, #20]
 800e76a:	011b      	lsls	r3, r3, #4
 800e76c:	693a      	ldr	r2, [r7, #16]
 800e76e:	4313      	orrs	r3, r2
 800e770:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e772:	683b      	ldr	r3, [r7, #0]
 800e774:	699b      	ldr	r3, [r3, #24]
 800e776:	011b      	lsls	r3, r3, #4
 800e778:	693a      	ldr	r2, [r7, #16]
 800e77a:	4313      	orrs	r3, r2
 800e77c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	693a      	ldr	r2, [r7, #16]
 800e782:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	68fa      	ldr	r2, [r7, #12]
 800e788:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e78a:	683b      	ldr	r3, [r7, #0]
 800e78c:	685a      	ldr	r2, [r3, #4]
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	697a      	ldr	r2, [r7, #20]
 800e796:	621a      	str	r2, [r3, #32]
}
 800e798:	bf00      	nop
 800e79a:	371c      	adds	r7, #28
 800e79c:	46bd      	mov	sp, r7
 800e79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a2:	4770      	bx	lr
 800e7a4:	40012c00 	.word	0x40012c00
 800e7a8:	40014400 	.word	0x40014400
 800e7ac:	40014800 	.word	0x40014800

0800e7b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e7b0:	b480      	push	{r7}
 800e7b2:	b087      	sub	sp, #28
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	6078      	str	r0, [r7, #4]
 800e7b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	6a1b      	ldr	r3, [r3, #32]
 800e7be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	6a1b      	ldr	r3, [r3, #32]
 800e7ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	685b      	ldr	r3, [r3, #4]
 800e7d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	69db      	ldr	r3, [r3, #28]
 800e7d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e7de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e7e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e7ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e7ec:	683b      	ldr	r3, [r7, #0]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	021b      	lsls	r3, r3, #8
 800e7f2:	68fa      	ldr	r2, [r7, #12]
 800e7f4:	4313      	orrs	r3, r2
 800e7f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e7f8:	693b      	ldr	r3, [r7, #16]
 800e7fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e7fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e800:	683b      	ldr	r3, [r7, #0]
 800e802:	689b      	ldr	r3, [r3, #8]
 800e804:	031b      	lsls	r3, r3, #12
 800e806:	693a      	ldr	r2, [r7, #16]
 800e808:	4313      	orrs	r3, r2
 800e80a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	4a14      	ldr	r2, [pc, #80]	; (800e860 <TIM_OC4_SetConfig+0xb0>)
 800e810:	4293      	cmp	r3, r2
 800e812:	d007      	beq.n	800e824 <TIM_OC4_SetConfig+0x74>
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	4a13      	ldr	r2, [pc, #76]	; (800e864 <TIM_OC4_SetConfig+0xb4>)
 800e818:	4293      	cmp	r3, r2
 800e81a:	d003      	beq.n	800e824 <TIM_OC4_SetConfig+0x74>
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	4a12      	ldr	r2, [pc, #72]	; (800e868 <TIM_OC4_SetConfig+0xb8>)
 800e820:	4293      	cmp	r3, r2
 800e822:	d109      	bne.n	800e838 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e824:	697b      	ldr	r3, [r7, #20]
 800e826:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e82a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e82c:	683b      	ldr	r3, [r7, #0]
 800e82e:	695b      	ldr	r3, [r3, #20]
 800e830:	019b      	lsls	r3, r3, #6
 800e832:	697a      	ldr	r2, [r7, #20]
 800e834:	4313      	orrs	r3, r2
 800e836:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	697a      	ldr	r2, [r7, #20]
 800e83c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	68fa      	ldr	r2, [r7, #12]
 800e842:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e844:	683b      	ldr	r3, [r7, #0]
 800e846:	685a      	ldr	r2, [r3, #4]
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	693a      	ldr	r2, [r7, #16]
 800e850:	621a      	str	r2, [r3, #32]
}
 800e852:	bf00      	nop
 800e854:	371c      	adds	r7, #28
 800e856:	46bd      	mov	sp, r7
 800e858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e85c:	4770      	bx	lr
 800e85e:	bf00      	nop
 800e860:	40012c00 	.word	0x40012c00
 800e864:	40014400 	.word	0x40014400
 800e868:	40014800 	.word	0x40014800

0800e86c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e86c:	b480      	push	{r7}
 800e86e:	b087      	sub	sp, #28
 800e870:	af00      	add	r7, sp, #0
 800e872:	6078      	str	r0, [r7, #4]
 800e874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	6a1b      	ldr	r3, [r3, #32]
 800e87a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	6a1b      	ldr	r3, [r3, #32]
 800e886:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	685b      	ldr	r3, [r3, #4]
 800e88c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e89a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e89e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e8a0:	683b      	ldr	r3, [r7, #0]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	68fa      	ldr	r2, [r7, #12]
 800e8a6:	4313      	orrs	r3, r2
 800e8a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e8aa:	693b      	ldr	r3, [r7, #16]
 800e8ac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800e8b0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e8b2:	683b      	ldr	r3, [r7, #0]
 800e8b4:	689b      	ldr	r3, [r3, #8]
 800e8b6:	041b      	lsls	r3, r3, #16
 800e8b8:	693a      	ldr	r2, [r7, #16]
 800e8ba:	4313      	orrs	r3, r2
 800e8bc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	4a13      	ldr	r2, [pc, #76]	; (800e910 <TIM_OC5_SetConfig+0xa4>)
 800e8c2:	4293      	cmp	r3, r2
 800e8c4:	d007      	beq.n	800e8d6 <TIM_OC5_SetConfig+0x6a>
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	4a12      	ldr	r2, [pc, #72]	; (800e914 <TIM_OC5_SetConfig+0xa8>)
 800e8ca:	4293      	cmp	r3, r2
 800e8cc:	d003      	beq.n	800e8d6 <TIM_OC5_SetConfig+0x6a>
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	4a11      	ldr	r2, [pc, #68]	; (800e918 <TIM_OC5_SetConfig+0xac>)
 800e8d2:	4293      	cmp	r3, r2
 800e8d4:	d109      	bne.n	800e8ea <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e8d6:	697b      	ldr	r3, [r7, #20]
 800e8d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e8dc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e8de:	683b      	ldr	r3, [r7, #0]
 800e8e0:	695b      	ldr	r3, [r3, #20]
 800e8e2:	021b      	lsls	r3, r3, #8
 800e8e4:	697a      	ldr	r2, [r7, #20]
 800e8e6:	4313      	orrs	r3, r2
 800e8e8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	697a      	ldr	r2, [r7, #20]
 800e8ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	68fa      	ldr	r2, [r7, #12]
 800e8f4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e8f6:	683b      	ldr	r3, [r7, #0]
 800e8f8:	685a      	ldr	r2, [r3, #4]
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	693a      	ldr	r2, [r7, #16]
 800e902:	621a      	str	r2, [r3, #32]
}
 800e904:	bf00      	nop
 800e906:	371c      	adds	r7, #28
 800e908:	46bd      	mov	sp, r7
 800e90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e90e:	4770      	bx	lr
 800e910:	40012c00 	.word	0x40012c00
 800e914:	40014400 	.word	0x40014400
 800e918:	40014800 	.word	0x40014800

0800e91c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e91c:	b480      	push	{r7}
 800e91e:	b087      	sub	sp, #28
 800e920:	af00      	add	r7, sp, #0
 800e922:	6078      	str	r0, [r7, #4]
 800e924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	6a1b      	ldr	r3, [r3, #32]
 800e92a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	6a1b      	ldr	r3, [r3, #32]
 800e936:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	685b      	ldr	r3, [r3, #4]
 800e93c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e94a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e94e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e950:	683b      	ldr	r3, [r7, #0]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	021b      	lsls	r3, r3, #8
 800e956:	68fa      	ldr	r2, [r7, #12]
 800e958:	4313      	orrs	r3, r2
 800e95a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e95c:	693b      	ldr	r3, [r7, #16]
 800e95e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e962:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e964:	683b      	ldr	r3, [r7, #0]
 800e966:	689b      	ldr	r3, [r3, #8]
 800e968:	051b      	lsls	r3, r3, #20
 800e96a:	693a      	ldr	r2, [r7, #16]
 800e96c:	4313      	orrs	r3, r2
 800e96e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	4a14      	ldr	r2, [pc, #80]	; (800e9c4 <TIM_OC6_SetConfig+0xa8>)
 800e974:	4293      	cmp	r3, r2
 800e976:	d007      	beq.n	800e988 <TIM_OC6_SetConfig+0x6c>
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	4a13      	ldr	r2, [pc, #76]	; (800e9c8 <TIM_OC6_SetConfig+0xac>)
 800e97c:	4293      	cmp	r3, r2
 800e97e:	d003      	beq.n	800e988 <TIM_OC6_SetConfig+0x6c>
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	4a12      	ldr	r2, [pc, #72]	; (800e9cc <TIM_OC6_SetConfig+0xb0>)
 800e984:	4293      	cmp	r3, r2
 800e986:	d109      	bne.n	800e99c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e988:	697b      	ldr	r3, [r7, #20]
 800e98a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e98e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e990:	683b      	ldr	r3, [r7, #0]
 800e992:	695b      	ldr	r3, [r3, #20]
 800e994:	029b      	lsls	r3, r3, #10
 800e996:	697a      	ldr	r2, [r7, #20]
 800e998:	4313      	orrs	r3, r2
 800e99a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	697a      	ldr	r2, [r7, #20]
 800e9a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	68fa      	ldr	r2, [r7, #12]
 800e9a6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e9a8:	683b      	ldr	r3, [r7, #0]
 800e9aa:	685a      	ldr	r2, [r3, #4]
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	693a      	ldr	r2, [r7, #16]
 800e9b4:	621a      	str	r2, [r3, #32]
}
 800e9b6:	bf00      	nop
 800e9b8:	371c      	adds	r7, #28
 800e9ba:	46bd      	mov	sp, r7
 800e9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c0:	4770      	bx	lr
 800e9c2:	bf00      	nop
 800e9c4:	40012c00 	.word	0x40012c00
 800e9c8:	40014400 	.word	0x40014400
 800e9cc:	40014800 	.word	0x40014800

0800e9d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e9d0:	b480      	push	{r7}
 800e9d2:	b087      	sub	sp, #28
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	60f8      	str	r0, [r7, #12]
 800e9d8:	60b9      	str	r1, [r7, #8]
 800e9da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	6a1b      	ldr	r3, [r3, #32]
 800e9e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	6a1b      	ldr	r3, [r3, #32]
 800e9e6:	f023 0201 	bic.w	r2, r3, #1
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	699b      	ldr	r3, [r3, #24]
 800e9f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e9f4:	693b      	ldr	r3, [r7, #16]
 800e9f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e9fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	011b      	lsls	r3, r3, #4
 800ea00:	693a      	ldr	r2, [r7, #16]
 800ea02:	4313      	orrs	r3, r2
 800ea04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ea06:	697b      	ldr	r3, [r7, #20]
 800ea08:	f023 030a 	bic.w	r3, r3, #10
 800ea0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ea0e:	697a      	ldr	r2, [r7, #20]
 800ea10:	68bb      	ldr	r3, [r7, #8]
 800ea12:	4313      	orrs	r3, r2
 800ea14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	693a      	ldr	r2, [r7, #16]
 800ea1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	697a      	ldr	r2, [r7, #20]
 800ea20:	621a      	str	r2, [r3, #32]
}
 800ea22:	bf00      	nop
 800ea24:	371c      	adds	r7, #28
 800ea26:	46bd      	mov	sp, r7
 800ea28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea2c:	4770      	bx	lr

0800ea2e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ea2e:	b480      	push	{r7}
 800ea30:	b087      	sub	sp, #28
 800ea32:	af00      	add	r7, sp, #0
 800ea34:	60f8      	str	r0, [r7, #12]
 800ea36:	60b9      	str	r1, [r7, #8]
 800ea38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	6a1b      	ldr	r3, [r3, #32]
 800ea3e:	f023 0210 	bic.w	r2, r3, #16
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	699b      	ldr	r3, [r3, #24]
 800ea4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	6a1b      	ldr	r3, [r3, #32]
 800ea50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ea52:	697b      	ldr	r3, [r7, #20]
 800ea54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ea58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	031b      	lsls	r3, r3, #12
 800ea5e:	697a      	ldr	r2, [r7, #20]
 800ea60:	4313      	orrs	r3, r2
 800ea62:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ea64:	693b      	ldr	r3, [r7, #16]
 800ea66:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ea6a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ea6c:	68bb      	ldr	r3, [r7, #8]
 800ea6e:	011b      	lsls	r3, r3, #4
 800ea70:	693a      	ldr	r2, [r7, #16]
 800ea72:	4313      	orrs	r3, r2
 800ea74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	697a      	ldr	r2, [r7, #20]
 800ea7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	693a      	ldr	r2, [r7, #16]
 800ea80:	621a      	str	r2, [r3, #32]
}
 800ea82:	bf00      	nop
 800ea84:	371c      	adds	r7, #28
 800ea86:	46bd      	mov	sp, r7
 800ea88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea8c:	4770      	bx	lr

0800ea8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ea8e:	b480      	push	{r7}
 800ea90:	b085      	sub	sp, #20
 800ea92:	af00      	add	r7, sp, #0
 800ea94:	6078      	str	r0, [r7, #4]
 800ea96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	689b      	ldr	r3, [r3, #8]
 800ea9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800eaa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eaa8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800eaaa:	683a      	ldr	r2, [r7, #0]
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	4313      	orrs	r3, r2
 800eab0:	f043 0307 	orr.w	r3, r3, #7
 800eab4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	68fa      	ldr	r2, [r7, #12]
 800eaba:	609a      	str	r2, [r3, #8]
}
 800eabc:	bf00      	nop
 800eabe:	3714      	adds	r7, #20
 800eac0:	46bd      	mov	sp, r7
 800eac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac6:	4770      	bx	lr

0800eac8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800eac8:	b480      	push	{r7}
 800eaca:	b087      	sub	sp, #28
 800eacc:	af00      	add	r7, sp, #0
 800eace:	60f8      	str	r0, [r7, #12]
 800ead0:	60b9      	str	r1, [r7, #8]
 800ead2:	607a      	str	r2, [r7, #4]
 800ead4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	689b      	ldr	r3, [r3, #8]
 800eada:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800eadc:	697b      	ldr	r3, [r7, #20]
 800eade:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800eae2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800eae4:	683b      	ldr	r3, [r7, #0]
 800eae6:	021a      	lsls	r2, r3, #8
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	431a      	orrs	r2, r3
 800eaec:	68bb      	ldr	r3, [r7, #8]
 800eaee:	4313      	orrs	r3, r2
 800eaf0:	697a      	ldr	r2, [r7, #20]
 800eaf2:	4313      	orrs	r3, r2
 800eaf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	697a      	ldr	r2, [r7, #20]
 800eafa:	609a      	str	r2, [r3, #8]
}
 800eafc:	bf00      	nop
 800eafe:	371c      	adds	r7, #28
 800eb00:	46bd      	mov	sp, r7
 800eb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb06:	4770      	bx	lr

0800eb08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800eb08:	b480      	push	{r7}
 800eb0a:	b087      	sub	sp, #28
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	60f8      	str	r0, [r7, #12]
 800eb10:	60b9      	str	r1, [r7, #8]
 800eb12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800eb14:	68bb      	ldr	r3, [r7, #8]
 800eb16:	f003 031f 	and.w	r3, r3, #31
 800eb1a:	2201      	movs	r2, #1
 800eb1c:	fa02 f303 	lsl.w	r3, r2, r3
 800eb20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	6a1a      	ldr	r2, [r3, #32]
 800eb26:	697b      	ldr	r3, [r7, #20]
 800eb28:	43db      	mvns	r3, r3
 800eb2a:	401a      	ands	r2, r3
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	6a1a      	ldr	r2, [r3, #32]
 800eb34:	68bb      	ldr	r3, [r7, #8]
 800eb36:	f003 031f 	and.w	r3, r3, #31
 800eb3a:	6879      	ldr	r1, [r7, #4]
 800eb3c:	fa01 f303 	lsl.w	r3, r1, r3
 800eb40:	431a      	orrs	r2, r3
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	621a      	str	r2, [r3, #32]
}
 800eb46:	bf00      	nop
 800eb48:	371c      	adds	r7, #28
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb50:	4770      	bx	lr
	...

0800eb54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800eb54:	b480      	push	{r7}
 800eb56:	b085      	sub	sp, #20
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	6078      	str	r0, [r7, #4]
 800eb5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eb64:	2b01      	cmp	r3, #1
 800eb66:	d101      	bne.n	800eb6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800eb68:	2302      	movs	r3, #2
 800eb6a:	e04a      	b.n	800ec02 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	2201      	movs	r2, #1
 800eb70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	2202      	movs	r2, #2
 800eb78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	685b      	ldr	r3, [r3, #4]
 800eb82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	689b      	ldr	r3, [r3, #8]
 800eb8a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	4a1f      	ldr	r2, [pc, #124]	; (800ec10 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800eb92:	4293      	cmp	r3, r2
 800eb94:	d108      	bne.n	800eba8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800eb9c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800eb9e:	683b      	ldr	r3, [r7, #0]
 800eba0:	685b      	ldr	r3, [r3, #4]
 800eba2:	68fa      	ldr	r2, [r7, #12]
 800eba4:	4313      	orrs	r3, r2
 800eba6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ebae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ebb0:	683b      	ldr	r3, [r7, #0]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	68fa      	ldr	r2, [r7, #12]
 800ebb6:	4313      	orrs	r3, r2
 800ebb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	68fa      	ldr	r2, [r7, #12]
 800ebc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	4a12      	ldr	r2, [pc, #72]	; (800ec10 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800ebc8:	4293      	cmp	r3, r2
 800ebca:	d004      	beq.n	800ebd6 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ebd4:	d10c      	bne.n	800ebf0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ebd6:	68bb      	ldr	r3, [r7, #8]
 800ebd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ebdc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ebde:	683b      	ldr	r3, [r7, #0]
 800ebe0:	689b      	ldr	r3, [r3, #8]
 800ebe2:	68ba      	ldr	r2, [r7, #8]
 800ebe4:	4313      	orrs	r3, r2
 800ebe6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	68ba      	ldr	r2, [r7, #8]
 800ebee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	2201      	movs	r2, #1
 800ebf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	2200      	movs	r2, #0
 800ebfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ec00:	2300      	movs	r3, #0
}
 800ec02:	4618      	mov	r0, r3
 800ec04:	3714      	adds	r7, #20
 800ec06:	46bd      	mov	sp, r7
 800ec08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec0c:	4770      	bx	lr
 800ec0e:	bf00      	nop
 800ec10:	40012c00 	.word	0x40012c00

0800ec14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ec14:	b480      	push	{r7}
 800ec16:	b083      	sub	sp, #12
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ec1c:	bf00      	nop
 800ec1e:	370c      	adds	r7, #12
 800ec20:	46bd      	mov	sp, r7
 800ec22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec26:	4770      	bx	lr

0800ec28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ec28:	b480      	push	{r7}
 800ec2a:	b083      	sub	sp, #12
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ec30:	bf00      	nop
 800ec32:	370c      	adds	r7, #12
 800ec34:	46bd      	mov	sp, r7
 800ec36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec3a:	4770      	bx	lr

0800ec3c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ec3c:	b480      	push	{r7}
 800ec3e:	b083      	sub	sp, #12
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ec44:	bf00      	nop
 800ec46:	370c      	adds	r7, #12
 800ec48:	46bd      	mov	sp, r7
 800ec4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec4e:	4770      	bx	lr

0800ec50 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800ec50:	b480      	push	{r7}
 800ec52:	b085      	sub	sp, #20
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800ec58:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800ec5c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= (uint16_t)winterruptmask;
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800ec64:	b29a      	uxth	r2, r3
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	b29b      	uxth	r3, r3
 800ec6a:	4313      	orrs	r3, r2
 800ec6c:	b29a      	uxth	r2, r3
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800ec74:	2300      	movs	r3, #0
}
 800ec76:	4618      	mov	r0, r3
 800ec78:	3714      	adds	r7, #20
 800ec7a:	46bd      	mov	sp, r7
 800ec7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec80:	4770      	bx	lr

0800ec82 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800ec82:	b480      	push	{r7}
 800ec84:	b085      	sub	sp, #20
 800ec86:	af00      	add	r7, sp, #0
 800ec88:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800ec8a:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800ec8e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800ec96:	b29a      	uxth	r2, r3
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	b29b      	uxth	r3, r3
 800ec9c:	43db      	mvns	r3, r3
 800ec9e:	b29b      	uxth	r3, r3
 800eca0:	4013      	ands	r3, r2
 800eca2:	b29a      	uxth	r2, r3
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800ecaa:	2300      	movs	r3, #0
}
 800ecac:	4618      	mov	r0, r3
 800ecae:	3714      	adds	r7, #20
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb6:	4770      	bx	lr

0800ecb8 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800ecb8:	b084      	sub	sp, #16
 800ecba:	b580      	push	{r7, lr}
 800ecbc:	b082      	sub	sp, #8
 800ecbe:	af00      	add	r7, sp, #0
 800ecc0:	6078      	str	r0, [r7, #4]
 800ecc2:	f107 0014 	add.w	r0, r7, #20
 800ecc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	2201      	movs	r2, #1
 800ecce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	2200      	movs	r2, #0
 800ecd6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	2200      	movs	r2, #0
 800ecde:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	2200      	movs	r2, #0
 800ece6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 800ecea:	6878      	ldr	r0, [r7, #4]
 800ecec:	f7ff ffb0 	bl	800ec50 <USB_EnableGlobalInt>

  return HAL_OK;
 800ecf0:	2300      	movs	r3, #0
}
 800ecf2:	4618      	mov	r0, r3
 800ecf4:	3708      	adds	r7, #8
 800ecf6:	46bd      	mov	sp, r7
 800ecf8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ecfc:	b004      	add	sp, #16
 800ecfe:	4770      	bx	lr

0800ed00 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ed00:	b480      	push	{r7}
 800ed02:	b09d      	sub	sp, #116	; 0x74
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	6078      	str	r0, [r7, #4]
 800ed08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800ed10:	687a      	ldr	r2, [r7, #4]
 800ed12:	683b      	ldr	r3, [r7, #0]
 800ed14:	781b      	ldrb	r3, [r3, #0]
 800ed16:	009b      	lsls	r3, r3, #2
 800ed18:	4413      	add	r3, r2
 800ed1a:	881b      	ldrh	r3, [r3, #0]
 800ed1c:	b29b      	uxth	r3, r3
 800ed1e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800ed22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ed26:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800ed2a:	683b      	ldr	r3, [r7, #0]
 800ed2c:	78db      	ldrb	r3, [r3, #3]
 800ed2e:	2b03      	cmp	r3, #3
 800ed30:	d81f      	bhi.n	800ed72 <USB_ActivateEndpoint+0x72>
 800ed32:	a201      	add	r2, pc, #4	; (adr r2, 800ed38 <USB_ActivateEndpoint+0x38>)
 800ed34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed38:	0800ed49 	.word	0x0800ed49
 800ed3c:	0800ed65 	.word	0x0800ed65
 800ed40:	0800ed7b 	.word	0x0800ed7b
 800ed44:	0800ed57 	.word	0x0800ed57
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800ed48:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ed4c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ed50:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800ed54:	e012      	b.n	800ed7c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800ed56:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ed5a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800ed5e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800ed62:	e00b      	b.n	800ed7c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800ed64:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ed68:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ed6c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800ed70:	e004      	b.n	800ed7c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800ed72:	2301      	movs	r3, #1
 800ed74:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800ed78:	e000      	b.n	800ed7c <USB_ActivateEndpoint+0x7c>
      break;
 800ed7a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800ed7c:	687a      	ldr	r2, [r7, #4]
 800ed7e:	683b      	ldr	r3, [r7, #0]
 800ed80:	781b      	ldrb	r3, [r3, #0]
 800ed82:	009b      	lsls	r3, r3, #2
 800ed84:	441a      	add	r2, r3
 800ed86:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ed8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ed8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ed92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ed96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed9a:	b29b      	uxth	r3, r3
 800ed9c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800ed9e:	687a      	ldr	r2, [r7, #4]
 800eda0:	683b      	ldr	r3, [r7, #0]
 800eda2:	781b      	ldrb	r3, [r3, #0]
 800eda4:	009b      	lsls	r3, r3, #2
 800eda6:	4413      	add	r3, r2
 800eda8:	881b      	ldrh	r3, [r3, #0]
 800edaa:	b29b      	uxth	r3, r3
 800edac:	b21b      	sxth	r3, r3
 800edae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800edb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800edb6:	b21a      	sxth	r2, r3
 800edb8:	683b      	ldr	r3, [r7, #0]
 800edba:	781b      	ldrb	r3, [r3, #0]
 800edbc:	b21b      	sxth	r3, r3
 800edbe:	4313      	orrs	r3, r2
 800edc0:	b21b      	sxth	r3, r3
 800edc2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800edc6:	687a      	ldr	r2, [r7, #4]
 800edc8:	683b      	ldr	r3, [r7, #0]
 800edca:	781b      	ldrb	r3, [r3, #0]
 800edcc:	009b      	lsls	r3, r3, #2
 800edce:	441a      	add	r2, r3
 800edd0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800edd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800edd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800eddc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ede0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ede4:	b29b      	uxth	r3, r3
 800ede6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800ede8:	683b      	ldr	r3, [r7, #0]
 800edea:	7b1b      	ldrb	r3, [r3, #12]
 800edec:	2b00      	cmp	r3, #0
 800edee:	f040 8149 	bne.w	800f084 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800edf2:	683b      	ldr	r3, [r7, #0]
 800edf4:	785b      	ldrb	r3, [r3, #1]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	f000 8084 	beq.w	800ef04 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	61bb      	str	r3, [r7, #24]
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ee06:	b29b      	uxth	r3, r3
 800ee08:	461a      	mov	r2, r3
 800ee0a:	69bb      	ldr	r3, [r7, #24]
 800ee0c:	4413      	add	r3, r2
 800ee0e:	61bb      	str	r3, [r7, #24]
 800ee10:	683b      	ldr	r3, [r7, #0]
 800ee12:	781b      	ldrb	r3, [r3, #0]
 800ee14:	00da      	lsls	r2, r3, #3
 800ee16:	69bb      	ldr	r3, [r7, #24]
 800ee18:	4413      	add	r3, r2
 800ee1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ee1e:	617b      	str	r3, [r7, #20]
 800ee20:	683b      	ldr	r3, [r7, #0]
 800ee22:	88db      	ldrh	r3, [r3, #6]
 800ee24:	085b      	lsrs	r3, r3, #1
 800ee26:	b29b      	uxth	r3, r3
 800ee28:	005b      	lsls	r3, r3, #1
 800ee2a:	b29a      	uxth	r2, r3
 800ee2c:	697b      	ldr	r3, [r7, #20]
 800ee2e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ee30:	687a      	ldr	r2, [r7, #4]
 800ee32:	683b      	ldr	r3, [r7, #0]
 800ee34:	781b      	ldrb	r3, [r3, #0]
 800ee36:	009b      	lsls	r3, r3, #2
 800ee38:	4413      	add	r3, r2
 800ee3a:	881b      	ldrh	r3, [r3, #0]
 800ee3c:	827b      	strh	r3, [r7, #18]
 800ee3e:	8a7b      	ldrh	r3, [r7, #18]
 800ee40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d01b      	beq.n	800ee80 <USB_ActivateEndpoint+0x180>
 800ee48:	687a      	ldr	r2, [r7, #4]
 800ee4a:	683b      	ldr	r3, [r7, #0]
 800ee4c:	781b      	ldrb	r3, [r3, #0]
 800ee4e:	009b      	lsls	r3, r3, #2
 800ee50:	4413      	add	r3, r2
 800ee52:	881b      	ldrh	r3, [r3, #0]
 800ee54:	b29b      	uxth	r3, r3
 800ee56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ee5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ee5e:	823b      	strh	r3, [r7, #16]
 800ee60:	687a      	ldr	r2, [r7, #4]
 800ee62:	683b      	ldr	r3, [r7, #0]
 800ee64:	781b      	ldrb	r3, [r3, #0]
 800ee66:	009b      	lsls	r3, r3, #2
 800ee68:	441a      	add	r2, r3
 800ee6a:	8a3b      	ldrh	r3, [r7, #16]
 800ee6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ee70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ee74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ee78:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ee7c:	b29b      	uxth	r3, r3
 800ee7e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ee80:	683b      	ldr	r3, [r7, #0]
 800ee82:	78db      	ldrb	r3, [r3, #3]
 800ee84:	2b01      	cmp	r3, #1
 800ee86:	d020      	beq.n	800eeca <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ee88:	687a      	ldr	r2, [r7, #4]
 800ee8a:	683b      	ldr	r3, [r7, #0]
 800ee8c:	781b      	ldrb	r3, [r3, #0]
 800ee8e:	009b      	lsls	r3, r3, #2
 800ee90:	4413      	add	r3, r2
 800ee92:	881b      	ldrh	r3, [r3, #0]
 800ee94:	b29b      	uxth	r3, r3
 800ee96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ee9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ee9e:	81bb      	strh	r3, [r7, #12]
 800eea0:	89bb      	ldrh	r3, [r7, #12]
 800eea2:	f083 0320 	eor.w	r3, r3, #32
 800eea6:	81bb      	strh	r3, [r7, #12]
 800eea8:	687a      	ldr	r2, [r7, #4]
 800eeaa:	683b      	ldr	r3, [r7, #0]
 800eeac:	781b      	ldrb	r3, [r3, #0]
 800eeae:	009b      	lsls	r3, r3, #2
 800eeb0:	441a      	add	r2, r3
 800eeb2:	89bb      	ldrh	r3, [r7, #12]
 800eeb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800eeb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800eebc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800eec0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eec4:	b29b      	uxth	r3, r3
 800eec6:	8013      	strh	r3, [r2, #0]
 800eec8:	e2bf      	b.n	800f44a <USB_ActivateEndpoint+0x74a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800eeca:	687a      	ldr	r2, [r7, #4]
 800eecc:	683b      	ldr	r3, [r7, #0]
 800eece:	781b      	ldrb	r3, [r3, #0]
 800eed0:	009b      	lsls	r3, r3, #2
 800eed2:	4413      	add	r3, r2
 800eed4:	881b      	ldrh	r3, [r3, #0]
 800eed6:	b29b      	uxth	r3, r3
 800eed8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800eedc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eee0:	81fb      	strh	r3, [r7, #14]
 800eee2:	687a      	ldr	r2, [r7, #4]
 800eee4:	683b      	ldr	r3, [r7, #0]
 800eee6:	781b      	ldrb	r3, [r3, #0]
 800eee8:	009b      	lsls	r3, r3, #2
 800eeea:	441a      	add	r2, r3
 800eeec:	89fb      	ldrh	r3, [r7, #14]
 800eeee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800eef2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800eef6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800eefa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eefe:	b29b      	uxth	r3, r3
 800ef00:	8013      	strh	r3, [r2, #0]
 800ef02:	e2a2      	b.n	800f44a <USB_ActivateEndpoint+0x74a>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	633b      	str	r3, [r7, #48]	; 0x30
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ef0e:	b29b      	uxth	r3, r3
 800ef10:	461a      	mov	r2, r3
 800ef12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef14:	4413      	add	r3, r2
 800ef16:	633b      	str	r3, [r7, #48]	; 0x30
 800ef18:	683b      	ldr	r3, [r7, #0]
 800ef1a:	781b      	ldrb	r3, [r3, #0]
 800ef1c:	00da      	lsls	r2, r3, #3
 800ef1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef20:	4413      	add	r3, r2
 800ef22:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ef26:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ef28:	683b      	ldr	r3, [r7, #0]
 800ef2a:	88db      	ldrh	r3, [r3, #6]
 800ef2c:	085b      	lsrs	r3, r3, #1
 800ef2e:	b29b      	uxth	r3, r3
 800ef30:	005b      	lsls	r3, r3, #1
 800ef32:	b29a      	uxth	r2, r3
 800ef34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef36:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ef42:	b29b      	uxth	r3, r3
 800ef44:	461a      	mov	r2, r3
 800ef46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef48:	4413      	add	r3, r2
 800ef4a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ef4c:	683b      	ldr	r3, [r7, #0]
 800ef4e:	781b      	ldrb	r3, [r3, #0]
 800ef50:	00da      	lsls	r2, r3, #3
 800ef52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef54:	4413      	add	r3, r2
 800ef56:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ef5a:	627b      	str	r3, [r7, #36]	; 0x24
 800ef5c:	683b      	ldr	r3, [r7, #0]
 800ef5e:	691b      	ldr	r3, [r3, #16]
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d112      	bne.n	800ef8a <USB_ActivateEndpoint+0x28a>
 800ef64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef66:	881b      	ldrh	r3, [r3, #0]
 800ef68:	b29b      	uxth	r3, r3
 800ef6a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ef6e:	b29a      	uxth	r2, r3
 800ef70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef72:	801a      	strh	r2, [r3, #0]
 800ef74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef76:	881b      	ldrh	r3, [r3, #0]
 800ef78:	b29b      	uxth	r3, r3
 800ef7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ef7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ef82:	b29a      	uxth	r2, r3
 800ef84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef86:	801a      	strh	r2, [r3, #0]
 800ef88:	e02f      	b.n	800efea <USB_ActivateEndpoint+0x2ea>
 800ef8a:	683b      	ldr	r3, [r7, #0]
 800ef8c:	691b      	ldr	r3, [r3, #16]
 800ef8e:	2b3e      	cmp	r3, #62	; 0x3e
 800ef90:	d813      	bhi.n	800efba <USB_ActivateEndpoint+0x2ba>
 800ef92:	683b      	ldr	r3, [r7, #0]
 800ef94:	691b      	ldr	r3, [r3, #16]
 800ef96:	085b      	lsrs	r3, r3, #1
 800ef98:	66bb      	str	r3, [r7, #104]	; 0x68
 800ef9a:	683b      	ldr	r3, [r7, #0]
 800ef9c:	691b      	ldr	r3, [r3, #16]
 800ef9e:	f003 0301 	and.w	r3, r3, #1
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d002      	beq.n	800efac <USB_ActivateEndpoint+0x2ac>
 800efa6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800efa8:	3301      	adds	r3, #1
 800efaa:	66bb      	str	r3, [r7, #104]	; 0x68
 800efac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800efae:	b29b      	uxth	r3, r3
 800efb0:	029b      	lsls	r3, r3, #10
 800efb2:	b29a      	uxth	r2, r3
 800efb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efb6:	801a      	strh	r2, [r3, #0]
 800efb8:	e017      	b.n	800efea <USB_ActivateEndpoint+0x2ea>
 800efba:	683b      	ldr	r3, [r7, #0]
 800efbc:	691b      	ldr	r3, [r3, #16]
 800efbe:	095b      	lsrs	r3, r3, #5
 800efc0:	66bb      	str	r3, [r7, #104]	; 0x68
 800efc2:	683b      	ldr	r3, [r7, #0]
 800efc4:	691b      	ldr	r3, [r3, #16]
 800efc6:	f003 031f 	and.w	r3, r3, #31
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d102      	bne.n	800efd4 <USB_ActivateEndpoint+0x2d4>
 800efce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800efd0:	3b01      	subs	r3, #1
 800efd2:	66bb      	str	r3, [r7, #104]	; 0x68
 800efd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800efd6:	b29b      	uxth	r3, r3
 800efd8:	029b      	lsls	r3, r3, #10
 800efda:	b29b      	uxth	r3, r3
 800efdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800efe0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800efe4:	b29a      	uxth	r2, r3
 800efe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efe8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800efea:	687a      	ldr	r2, [r7, #4]
 800efec:	683b      	ldr	r3, [r7, #0]
 800efee:	781b      	ldrb	r3, [r3, #0]
 800eff0:	009b      	lsls	r3, r3, #2
 800eff2:	4413      	add	r3, r2
 800eff4:	881b      	ldrh	r3, [r3, #0]
 800eff6:	847b      	strh	r3, [r7, #34]	; 0x22
 800eff8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800effa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800effe:	2b00      	cmp	r3, #0
 800f000:	d01b      	beq.n	800f03a <USB_ActivateEndpoint+0x33a>
 800f002:	687a      	ldr	r2, [r7, #4]
 800f004:	683b      	ldr	r3, [r7, #0]
 800f006:	781b      	ldrb	r3, [r3, #0]
 800f008:	009b      	lsls	r3, r3, #2
 800f00a:	4413      	add	r3, r2
 800f00c:	881b      	ldrh	r3, [r3, #0]
 800f00e:	b29b      	uxth	r3, r3
 800f010:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f014:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f018:	843b      	strh	r3, [r7, #32]
 800f01a:	687a      	ldr	r2, [r7, #4]
 800f01c:	683b      	ldr	r3, [r7, #0]
 800f01e:	781b      	ldrb	r3, [r3, #0]
 800f020:	009b      	lsls	r3, r3, #2
 800f022:	441a      	add	r2, r3
 800f024:	8c3b      	ldrh	r3, [r7, #32]
 800f026:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f02a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f02e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f036:	b29b      	uxth	r3, r3
 800f038:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f03a:	687a      	ldr	r2, [r7, #4]
 800f03c:	683b      	ldr	r3, [r7, #0]
 800f03e:	781b      	ldrb	r3, [r3, #0]
 800f040:	009b      	lsls	r3, r3, #2
 800f042:	4413      	add	r3, r2
 800f044:	881b      	ldrh	r3, [r3, #0]
 800f046:	b29b      	uxth	r3, r3
 800f048:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f04c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f050:	83fb      	strh	r3, [r7, #30]
 800f052:	8bfb      	ldrh	r3, [r7, #30]
 800f054:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800f058:	83fb      	strh	r3, [r7, #30]
 800f05a:	8bfb      	ldrh	r3, [r7, #30]
 800f05c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800f060:	83fb      	strh	r3, [r7, #30]
 800f062:	687a      	ldr	r2, [r7, #4]
 800f064:	683b      	ldr	r3, [r7, #0]
 800f066:	781b      	ldrb	r3, [r3, #0]
 800f068:	009b      	lsls	r3, r3, #2
 800f06a:	441a      	add	r2, r3
 800f06c:	8bfb      	ldrh	r3, [r7, #30]
 800f06e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f072:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f076:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f07a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f07e:	b29b      	uxth	r3, r3
 800f080:	8013      	strh	r3, [r2, #0]
 800f082:	e1e2      	b.n	800f44a <USB_ActivateEndpoint+0x74a>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800f084:	687a      	ldr	r2, [r7, #4]
 800f086:	683b      	ldr	r3, [r7, #0]
 800f088:	781b      	ldrb	r3, [r3, #0]
 800f08a:	009b      	lsls	r3, r3, #2
 800f08c:	4413      	add	r3, r2
 800f08e:	881b      	ldrh	r3, [r3, #0]
 800f090:	b29b      	uxth	r3, r3
 800f092:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f09a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800f09e:	687a      	ldr	r2, [r7, #4]
 800f0a0:	683b      	ldr	r3, [r7, #0]
 800f0a2:	781b      	ldrb	r3, [r3, #0]
 800f0a4:	009b      	lsls	r3, r3, #2
 800f0a6:	441a      	add	r2, r3
 800f0a8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800f0ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f0b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f0b4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800f0b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f0bc:	b29b      	uxth	r3, r3
 800f0be:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	663b      	str	r3, [r7, #96]	; 0x60
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f0ca:	b29b      	uxth	r3, r3
 800f0cc:	461a      	mov	r2, r3
 800f0ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f0d0:	4413      	add	r3, r2
 800f0d2:	663b      	str	r3, [r7, #96]	; 0x60
 800f0d4:	683b      	ldr	r3, [r7, #0]
 800f0d6:	781b      	ldrb	r3, [r3, #0]
 800f0d8:	00da      	lsls	r2, r3, #3
 800f0da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f0dc:	4413      	add	r3, r2
 800f0de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f0e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f0e4:	683b      	ldr	r3, [r7, #0]
 800f0e6:	891b      	ldrh	r3, [r3, #8]
 800f0e8:	085b      	lsrs	r3, r3, #1
 800f0ea:	b29b      	uxth	r3, r3
 800f0ec:	005b      	lsls	r3, r3, #1
 800f0ee:	b29a      	uxth	r2, r3
 800f0f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f0f2:	801a      	strh	r2, [r3, #0]
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	65bb      	str	r3, [r7, #88]	; 0x58
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f0fe:	b29b      	uxth	r3, r3
 800f100:	461a      	mov	r2, r3
 800f102:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f104:	4413      	add	r3, r2
 800f106:	65bb      	str	r3, [r7, #88]	; 0x58
 800f108:	683b      	ldr	r3, [r7, #0]
 800f10a:	781b      	ldrb	r3, [r3, #0]
 800f10c:	00da      	lsls	r2, r3, #3
 800f10e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f110:	4413      	add	r3, r2
 800f112:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800f116:	657b      	str	r3, [r7, #84]	; 0x54
 800f118:	683b      	ldr	r3, [r7, #0]
 800f11a:	895b      	ldrh	r3, [r3, #10]
 800f11c:	085b      	lsrs	r3, r3, #1
 800f11e:	b29b      	uxth	r3, r3
 800f120:	005b      	lsls	r3, r3, #1
 800f122:	b29a      	uxth	r2, r3
 800f124:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f126:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800f128:	683b      	ldr	r3, [r7, #0]
 800f12a:	785b      	ldrb	r3, [r3, #1]
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	f040 80b1 	bne.w	800f294 <USB_ActivateEndpoint+0x594>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f132:	687a      	ldr	r2, [r7, #4]
 800f134:	683b      	ldr	r3, [r7, #0]
 800f136:	781b      	ldrb	r3, [r3, #0]
 800f138:	009b      	lsls	r3, r3, #2
 800f13a:	4413      	add	r3, r2
 800f13c:	881b      	ldrh	r3, [r3, #0]
 800f13e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800f142:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f146:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d01d      	beq.n	800f18a <USB_ActivateEndpoint+0x48a>
 800f14e:	687a      	ldr	r2, [r7, #4]
 800f150:	683b      	ldr	r3, [r7, #0]
 800f152:	781b      	ldrb	r3, [r3, #0]
 800f154:	009b      	lsls	r3, r3, #2
 800f156:	4413      	add	r3, r2
 800f158:	881b      	ldrh	r3, [r3, #0]
 800f15a:	b29b      	uxth	r3, r3
 800f15c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f160:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f164:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800f168:	687a      	ldr	r2, [r7, #4]
 800f16a:	683b      	ldr	r3, [r7, #0]
 800f16c:	781b      	ldrb	r3, [r3, #0]
 800f16e:	009b      	lsls	r3, r3, #2
 800f170:	441a      	add	r2, r3
 800f172:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f176:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f17a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f17e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f182:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f186:	b29b      	uxth	r3, r3
 800f188:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f18a:	687a      	ldr	r2, [r7, #4]
 800f18c:	683b      	ldr	r3, [r7, #0]
 800f18e:	781b      	ldrb	r3, [r3, #0]
 800f190:	009b      	lsls	r3, r3, #2
 800f192:	4413      	add	r3, r2
 800f194:	881b      	ldrh	r3, [r3, #0]
 800f196:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800f198:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f19a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d01b      	beq.n	800f1da <USB_ActivateEndpoint+0x4da>
 800f1a2:	687a      	ldr	r2, [r7, #4]
 800f1a4:	683b      	ldr	r3, [r7, #0]
 800f1a6:	781b      	ldrb	r3, [r3, #0]
 800f1a8:	009b      	lsls	r3, r3, #2
 800f1aa:	4413      	add	r3, r2
 800f1ac:	881b      	ldrh	r3, [r3, #0]
 800f1ae:	b29b      	uxth	r3, r3
 800f1b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f1b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f1b8:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800f1ba:	687a      	ldr	r2, [r7, #4]
 800f1bc:	683b      	ldr	r3, [r7, #0]
 800f1be:	781b      	ldrb	r3, [r3, #0]
 800f1c0:	009b      	lsls	r3, r3, #2
 800f1c2:	441a      	add	r2, r3
 800f1c4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f1c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f1ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f1ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f1d2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f1d6:	b29b      	uxth	r3, r3
 800f1d8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 800f1da:	687a      	ldr	r2, [r7, #4]
 800f1dc:	683b      	ldr	r3, [r7, #0]
 800f1de:	781b      	ldrb	r3, [r3, #0]
 800f1e0:	009b      	lsls	r3, r3, #2
 800f1e2:	4413      	add	r3, r2
 800f1e4:	881b      	ldrh	r3, [r3, #0]
 800f1e6:	b29b      	uxth	r3, r3
 800f1e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f1ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f1f0:	877b      	strh	r3, [r7, #58]	; 0x3a
 800f1f2:	687a      	ldr	r2, [r7, #4]
 800f1f4:	683b      	ldr	r3, [r7, #0]
 800f1f6:	781b      	ldrb	r3, [r3, #0]
 800f1f8:	009b      	lsls	r3, r3, #2
 800f1fa:	441a      	add	r2, r3
 800f1fc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f1fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f202:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f206:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f20a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f20e:	b29b      	uxth	r3, r3
 800f210:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f212:	687a      	ldr	r2, [r7, #4]
 800f214:	683b      	ldr	r3, [r7, #0]
 800f216:	781b      	ldrb	r3, [r3, #0]
 800f218:	009b      	lsls	r3, r3, #2
 800f21a:	4413      	add	r3, r2
 800f21c:	881b      	ldrh	r3, [r3, #0]
 800f21e:	b29b      	uxth	r3, r3
 800f220:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f224:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f228:	873b      	strh	r3, [r7, #56]	; 0x38
 800f22a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800f22c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800f230:	873b      	strh	r3, [r7, #56]	; 0x38
 800f232:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800f234:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800f238:	873b      	strh	r3, [r7, #56]	; 0x38
 800f23a:	687a      	ldr	r2, [r7, #4]
 800f23c:	683b      	ldr	r3, [r7, #0]
 800f23e:	781b      	ldrb	r3, [r3, #0]
 800f240:	009b      	lsls	r3, r3, #2
 800f242:	441a      	add	r2, r3
 800f244:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800f246:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f24a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f24e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f252:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f256:	b29b      	uxth	r3, r3
 800f258:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f25a:	687a      	ldr	r2, [r7, #4]
 800f25c:	683b      	ldr	r3, [r7, #0]
 800f25e:	781b      	ldrb	r3, [r3, #0]
 800f260:	009b      	lsls	r3, r3, #2
 800f262:	4413      	add	r3, r2
 800f264:	881b      	ldrh	r3, [r3, #0]
 800f266:	b29b      	uxth	r3, r3
 800f268:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f26c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f270:	86fb      	strh	r3, [r7, #54]	; 0x36
 800f272:	687a      	ldr	r2, [r7, #4]
 800f274:	683b      	ldr	r3, [r7, #0]
 800f276:	781b      	ldrb	r3, [r3, #0]
 800f278:	009b      	lsls	r3, r3, #2
 800f27a:	441a      	add	r2, r3
 800f27c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f27e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f282:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f286:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f28a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f28e:	b29b      	uxth	r3, r3
 800f290:	8013      	strh	r3, [r2, #0]
 800f292:	e0da      	b.n	800f44a <USB_ActivateEndpoint+0x74a>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f294:	687a      	ldr	r2, [r7, #4]
 800f296:	683b      	ldr	r3, [r7, #0]
 800f298:	781b      	ldrb	r3, [r3, #0]
 800f29a:	009b      	lsls	r3, r3, #2
 800f29c:	4413      	add	r3, r2
 800f29e:	881b      	ldrh	r3, [r3, #0]
 800f2a0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800f2a4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800f2a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d01d      	beq.n	800f2ec <USB_ActivateEndpoint+0x5ec>
 800f2b0:	687a      	ldr	r2, [r7, #4]
 800f2b2:	683b      	ldr	r3, [r7, #0]
 800f2b4:	781b      	ldrb	r3, [r3, #0]
 800f2b6:	009b      	lsls	r3, r3, #2
 800f2b8:	4413      	add	r3, r2
 800f2ba:	881b      	ldrh	r3, [r3, #0]
 800f2bc:	b29b      	uxth	r3, r3
 800f2be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f2c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f2c6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800f2ca:	687a      	ldr	r2, [r7, #4]
 800f2cc:	683b      	ldr	r3, [r7, #0]
 800f2ce:	781b      	ldrb	r3, [r3, #0]
 800f2d0:	009b      	lsls	r3, r3, #2
 800f2d2:	441a      	add	r2, r3
 800f2d4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800f2d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f2dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f2e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f2e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f2e8:	b29b      	uxth	r3, r3
 800f2ea:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f2ec:	687a      	ldr	r2, [r7, #4]
 800f2ee:	683b      	ldr	r3, [r7, #0]
 800f2f0:	781b      	ldrb	r3, [r3, #0]
 800f2f2:	009b      	lsls	r3, r3, #2
 800f2f4:	4413      	add	r3, r2
 800f2f6:	881b      	ldrh	r3, [r3, #0]
 800f2f8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800f2fc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f304:	2b00      	cmp	r3, #0
 800f306:	d01d      	beq.n	800f344 <USB_ActivateEndpoint+0x644>
 800f308:	687a      	ldr	r2, [r7, #4]
 800f30a:	683b      	ldr	r3, [r7, #0]
 800f30c:	781b      	ldrb	r3, [r3, #0]
 800f30e:	009b      	lsls	r3, r3, #2
 800f310:	4413      	add	r3, r2
 800f312:	881b      	ldrh	r3, [r3, #0]
 800f314:	b29b      	uxth	r3, r3
 800f316:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f31a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f31e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800f322:	687a      	ldr	r2, [r7, #4]
 800f324:	683b      	ldr	r3, [r7, #0]
 800f326:	781b      	ldrb	r3, [r3, #0]
 800f328:	009b      	lsls	r3, r3, #2
 800f32a:	441a      	add	r2, r3
 800f32c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800f330:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f334:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f338:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f33c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f340:	b29b      	uxth	r3, r3
 800f342:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800f344:	687a      	ldr	r2, [r7, #4]
 800f346:	683b      	ldr	r3, [r7, #0]
 800f348:	781b      	ldrb	r3, [r3, #0]
 800f34a:	009b      	lsls	r3, r3, #2
 800f34c:	4413      	add	r3, r2
 800f34e:	881b      	ldrh	r3, [r3, #0]
 800f350:	b29b      	uxth	r3, r3
 800f352:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f35a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800f35e:	687a      	ldr	r2, [r7, #4]
 800f360:	683b      	ldr	r3, [r7, #0]
 800f362:	781b      	ldrb	r3, [r3, #0]
 800f364:	009b      	lsls	r3, r3, #2
 800f366:	441a      	add	r2, r3
 800f368:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800f36c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f370:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f374:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f37c:	b29b      	uxth	r3, r3
 800f37e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f380:	683b      	ldr	r3, [r7, #0]
 800f382:	78db      	ldrb	r3, [r3, #3]
 800f384:	2b01      	cmp	r3, #1
 800f386:	d024      	beq.n	800f3d2 <USB_ActivateEndpoint+0x6d2>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800f388:	687a      	ldr	r2, [r7, #4]
 800f38a:	683b      	ldr	r3, [r7, #0]
 800f38c:	781b      	ldrb	r3, [r3, #0]
 800f38e:	009b      	lsls	r3, r3, #2
 800f390:	4413      	add	r3, r2
 800f392:	881b      	ldrh	r3, [r3, #0]
 800f394:	b29b      	uxth	r3, r3
 800f396:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f39a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f39e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800f3a2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f3a6:	f083 0320 	eor.w	r3, r3, #32
 800f3aa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800f3ae:	687a      	ldr	r2, [r7, #4]
 800f3b0:	683b      	ldr	r3, [r7, #0]
 800f3b2:	781b      	ldrb	r3, [r3, #0]
 800f3b4:	009b      	lsls	r3, r3, #2
 800f3b6:	441a      	add	r2, r3
 800f3b8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f3bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f3c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f3c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f3c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f3cc:	b29b      	uxth	r3, r3
 800f3ce:	8013      	strh	r3, [r2, #0]
 800f3d0:	e01d      	b.n	800f40e <USB_ActivateEndpoint+0x70e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f3d2:	687a      	ldr	r2, [r7, #4]
 800f3d4:	683b      	ldr	r3, [r7, #0]
 800f3d6:	781b      	ldrb	r3, [r3, #0]
 800f3d8:	009b      	lsls	r3, r3, #2
 800f3da:	4413      	add	r3, r2
 800f3dc:	881b      	ldrh	r3, [r3, #0]
 800f3de:	b29b      	uxth	r3, r3
 800f3e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f3e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f3e8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800f3ec:	687a      	ldr	r2, [r7, #4]
 800f3ee:	683b      	ldr	r3, [r7, #0]
 800f3f0:	781b      	ldrb	r3, [r3, #0]
 800f3f2:	009b      	lsls	r3, r3, #2
 800f3f4:	441a      	add	r2, r3
 800f3f6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800f3fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f3fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f402:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f406:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f40a:	b29b      	uxth	r3, r3
 800f40c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f40e:	687a      	ldr	r2, [r7, #4]
 800f410:	683b      	ldr	r3, [r7, #0]
 800f412:	781b      	ldrb	r3, [r3, #0]
 800f414:	009b      	lsls	r3, r3, #2
 800f416:	4413      	add	r3, r2
 800f418:	881b      	ldrh	r3, [r3, #0]
 800f41a:	b29b      	uxth	r3, r3
 800f41c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f420:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f424:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800f428:	687a      	ldr	r2, [r7, #4]
 800f42a:	683b      	ldr	r3, [r7, #0]
 800f42c:	781b      	ldrb	r3, [r3, #0]
 800f42e:	009b      	lsls	r3, r3, #2
 800f430:	441a      	add	r2, r3
 800f432:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f436:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f43a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f43e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f442:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f446:	b29b      	uxth	r3, r3
 800f448:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800f44a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800f44e:	4618      	mov	r0, r3
 800f450:	3774      	adds	r7, #116	; 0x74
 800f452:	46bd      	mov	sp, r7
 800f454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f458:	4770      	bx	lr
 800f45a:	bf00      	nop

0800f45c <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f45c:	b480      	push	{r7}
 800f45e:	b08d      	sub	sp, #52	; 0x34
 800f460:	af00      	add	r7, sp, #0
 800f462:	6078      	str	r0, [r7, #4]
 800f464:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800f466:	683b      	ldr	r3, [r7, #0]
 800f468:	7b1b      	ldrb	r3, [r3, #12]
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	f040 808e 	bne.w	800f58c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800f470:	683b      	ldr	r3, [r7, #0]
 800f472:	785b      	ldrb	r3, [r3, #1]
 800f474:	2b00      	cmp	r3, #0
 800f476:	d044      	beq.n	800f502 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f478:	687a      	ldr	r2, [r7, #4]
 800f47a:	683b      	ldr	r3, [r7, #0]
 800f47c:	781b      	ldrb	r3, [r3, #0]
 800f47e:	009b      	lsls	r3, r3, #2
 800f480:	4413      	add	r3, r2
 800f482:	881b      	ldrh	r3, [r3, #0]
 800f484:	81bb      	strh	r3, [r7, #12]
 800f486:	89bb      	ldrh	r3, [r7, #12]
 800f488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d01b      	beq.n	800f4c8 <USB_DeactivateEndpoint+0x6c>
 800f490:	687a      	ldr	r2, [r7, #4]
 800f492:	683b      	ldr	r3, [r7, #0]
 800f494:	781b      	ldrb	r3, [r3, #0]
 800f496:	009b      	lsls	r3, r3, #2
 800f498:	4413      	add	r3, r2
 800f49a:	881b      	ldrh	r3, [r3, #0]
 800f49c:	b29b      	uxth	r3, r3
 800f49e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f4a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f4a6:	817b      	strh	r3, [r7, #10]
 800f4a8:	687a      	ldr	r2, [r7, #4]
 800f4aa:	683b      	ldr	r3, [r7, #0]
 800f4ac:	781b      	ldrb	r3, [r3, #0]
 800f4ae:	009b      	lsls	r3, r3, #2
 800f4b0:	441a      	add	r2, r3
 800f4b2:	897b      	ldrh	r3, [r7, #10]
 800f4b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f4b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f4bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f4c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f4c4:	b29b      	uxth	r3, r3
 800f4c6:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f4c8:	687a      	ldr	r2, [r7, #4]
 800f4ca:	683b      	ldr	r3, [r7, #0]
 800f4cc:	781b      	ldrb	r3, [r3, #0]
 800f4ce:	009b      	lsls	r3, r3, #2
 800f4d0:	4413      	add	r3, r2
 800f4d2:	881b      	ldrh	r3, [r3, #0]
 800f4d4:	b29b      	uxth	r3, r3
 800f4d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f4da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f4de:	813b      	strh	r3, [r7, #8]
 800f4e0:	687a      	ldr	r2, [r7, #4]
 800f4e2:	683b      	ldr	r3, [r7, #0]
 800f4e4:	781b      	ldrb	r3, [r3, #0]
 800f4e6:	009b      	lsls	r3, r3, #2
 800f4e8:	441a      	add	r2, r3
 800f4ea:	893b      	ldrh	r3, [r7, #8]
 800f4ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f4f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f4f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f4f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f4fc:	b29b      	uxth	r3, r3
 800f4fe:	8013      	strh	r3, [r2, #0]
 800f500:	e192      	b.n	800f828 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f502:	687a      	ldr	r2, [r7, #4]
 800f504:	683b      	ldr	r3, [r7, #0]
 800f506:	781b      	ldrb	r3, [r3, #0]
 800f508:	009b      	lsls	r3, r3, #2
 800f50a:	4413      	add	r3, r2
 800f50c:	881b      	ldrh	r3, [r3, #0]
 800f50e:	827b      	strh	r3, [r7, #18]
 800f510:	8a7b      	ldrh	r3, [r7, #18]
 800f512:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f516:	2b00      	cmp	r3, #0
 800f518:	d01b      	beq.n	800f552 <USB_DeactivateEndpoint+0xf6>
 800f51a:	687a      	ldr	r2, [r7, #4]
 800f51c:	683b      	ldr	r3, [r7, #0]
 800f51e:	781b      	ldrb	r3, [r3, #0]
 800f520:	009b      	lsls	r3, r3, #2
 800f522:	4413      	add	r3, r2
 800f524:	881b      	ldrh	r3, [r3, #0]
 800f526:	b29b      	uxth	r3, r3
 800f528:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f52c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f530:	823b      	strh	r3, [r7, #16]
 800f532:	687a      	ldr	r2, [r7, #4]
 800f534:	683b      	ldr	r3, [r7, #0]
 800f536:	781b      	ldrb	r3, [r3, #0]
 800f538:	009b      	lsls	r3, r3, #2
 800f53a:	441a      	add	r2, r3
 800f53c:	8a3b      	ldrh	r3, [r7, #16]
 800f53e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f542:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f546:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f54a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f54e:	b29b      	uxth	r3, r3
 800f550:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f552:	687a      	ldr	r2, [r7, #4]
 800f554:	683b      	ldr	r3, [r7, #0]
 800f556:	781b      	ldrb	r3, [r3, #0]
 800f558:	009b      	lsls	r3, r3, #2
 800f55a:	4413      	add	r3, r2
 800f55c:	881b      	ldrh	r3, [r3, #0]
 800f55e:	b29b      	uxth	r3, r3
 800f560:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f564:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f568:	81fb      	strh	r3, [r7, #14]
 800f56a:	687a      	ldr	r2, [r7, #4]
 800f56c:	683b      	ldr	r3, [r7, #0]
 800f56e:	781b      	ldrb	r3, [r3, #0]
 800f570:	009b      	lsls	r3, r3, #2
 800f572:	441a      	add	r2, r3
 800f574:	89fb      	ldrh	r3, [r7, #14]
 800f576:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f57a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f57e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f582:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f586:	b29b      	uxth	r3, r3
 800f588:	8013      	strh	r3, [r2, #0]
 800f58a:	e14d      	b.n	800f828 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800f58c:	683b      	ldr	r3, [r7, #0]
 800f58e:	785b      	ldrb	r3, [r3, #1]
 800f590:	2b00      	cmp	r3, #0
 800f592:	f040 80a5 	bne.w	800f6e0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f596:	687a      	ldr	r2, [r7, #4]
 800f598:	683b      	ldr	r3, [r7, #0]
 800f59a:	781b      	ldrb	r3, [r3, #0]
 800f59c:	009b      	lsls	r3, r3, #2
 800f59e:	4413      	add	r3, r2
 800f5a0:	881b      	ldrh	r3, [r3, #0]
 800f5a2:	843b      	strh	r3, [r7, #32]
 800f5a4:	8c3b      	ldrh	r3, [r7, #32]
 800f5a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d01b      	beq.n	800f5e6 <USB_DeactivateEndpoint+0x18a>
 800f5ae:	687a      	ldr	r2, [r7, #4]
 800f5b0:	683b      	ldr	r3, [r7, #0]
 800f5b2:	781b      	ldrb	r3, [r3, #0]
 800f5b4:	009b      	lsls	r3, r3, #2
 800f5b6:	4413      	add	r3, r2
 800f5b8:	881b      	ldrh	r3, [r3, #0]
 800f5ba:	b29b      	uxth	r3, r3
 800f5bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f5c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f5c4:	83fb      	strh	r3, [r7, #30]
 800f5c6:	687a      	ldr	r2, [r7, #4]
 800f5c8:	683b      	ldr	r3, [r7, #0]
 800f5ca:	781b      	ldrb	r3, [r3, #0]
 800f5cc:	009b      	lsls	r3, r3, #2
 800f5ce:	441a      	add	r2, r3
 800f5d0:	8bfb      	ldrh	r3, [r7, #30]
 800f5d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f5d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f5da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f5de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f5e2:	b29b      	uxth	r3, r3
 800f5e4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f5e6:	687a      	ldr	r2, [r7, #4]
 800f5e8:	683b      	ldr	r3, [r7, #0]
 800f5ea:	781b      	ldrb	r3, [r3, #0]
 800f5ec:	009b      	lsls	r3, r3, #2
 800f5ee:	4413      	add	r3, r2
 800f5f0:	881b      	ldrh	r3, [r3, #0]
 800f5f2:	83bb      	strh	r3, [r7, #28]
 800f5f4:	8bbb      	ldrh	r3, [r7, #28]
 800f5f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d01b      	beq.n	800f636 <USB_DeactivateEndpoint+0x1da>
 800f5fe:	687a      	ldr	r2, [r7, #4]
 800f600:	683b      	ldr	r3, [r7, #0]
 800f602:	781b      	ldrb	r3, [r3, #0]
 800f604:	009b      	lsls	r3, r3, #2
 800f606:	4413      	add	r3, r2
 800f608:	881b      	ldrh	r3, [r3, #0]
 800f60a:	b29b      	uxth	r3, r3
 800f60c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f610:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f614:	837b      	strh	r3, [r7, #26]
 800f616:	687a      	ldr	r2, [r7, #4]
 800f618:	683b      	ldr	r3, [r7, #0]
 800f61a:	781b      	ldrb	r3, [r3, #0]
 800f61c:	009b      	lsls	r3, r3, #2
 800f61e:	441a      	add	r2, r3
 800f620:	8b7b      	ldrh	r3, [r7, #26]
 800f622:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f626:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f62a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f62e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f632:	b29b      	uxth	r3, r3
 800f634:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800f636:	687a      	ldr	r2, [r7, #4]
 800f638:	683b      	ldr	r3, [r7, #0]
 800f63a:	781b      	ldrb	r3, [r3, #0]
 800f63c:	009b      	lsls	r3, r3, #2
 800f63e:	4413      	add	r3, r2
 800f640:	881b      	ldrh	r3, [r3, #0]
 800f642:	b29b      	uxth	r3, r3
 800f644:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f648:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f64c:	833b      	strh	r3, [r7, #24]
 800f64e:	687a      	ldr	r2, [r7, #4]
 800f650:	683b      	ldr	r3, [r7, #0]
 800f652:	781b      	ldrb	r3, [r3, #0]
 800f654:	009b      	lsls	r3, r3, #2
 800f656:	441a      	add	r2, r3
 800f658:	8b3b      	ldrh	r3, [r7, #24]
 800f65a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f65e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f662:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f666:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f66a:	b29b      	uxth	r3, r3
 800f66c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f66e:	687a      	ldr	r2, [r7, #4]
 800f670:	683b      	ldr	r3, [r7, #0]
 800f672:	781b      	ldrb	r3, [r3, #0]
 800f674:	009b      	lsls	r3, r3, #2
 800f676:	4413      	add	r3, r2
 800f678:	881b      	ldrh	r3, [r3, #0]
 800f67a:	b29b      	uxth	r3, r3
 800f67c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f680:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f684:	82fb      	strh	r3, [r7, #22]
 800f686:	687a      	ldr	r2, [r7, #4]
 800f688:	683b      	ldr	r3, [r7, #0]
 800f68a:	781b      	ldrb	r3, [r3, #0]
 800f68c:	009b      	lsls	r3, r3, #2
 800f68e:	441a      	add	r2, r3
 800f690:	8afb      	ldrh	r3, [r7, #22]
 800f692:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f696:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f69a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f69e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f6a2:	b29b      	uxth	r3, r3
 800f6a4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f6a6:	687a      	ldr	r2, [r7, #4]
 800f6a8:	683b      	ldr	r3, [r7, #0]
 800f6aa:	781b      	ldrb	r3, [r3, #0]
 800f6ac:	009b      	lsls	r3, r3, #2
 800f6ae:	4413      	add	r3, r2
 800f6b0:	881b      	ldrh	r3, [r3, #0]
 800f6b2:	b29b      	uxth	r3, r3
 800f6b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f6b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f6bc:	82bb      	strh	r3, [r7, #20]
 800f6be:	687a      	ldr	r2, [r7, #4]
 800f6c0:	683b      	ldr	r3, [r7, #0]
 800f6c2:	781b      	ldrb	r3, [r3, #0]
 800f6c4:	009b      	lsls	r3, r3, #2
 800f6c6:	441a      	add	r2, r3
 800f6c8:	8abb      	ldrh	r3, [r7, #20]
 800f6ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f6ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f6d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f6d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f6da:	b29b      	uxth	r3, r3
 800f6dc:	8013      	strh	r3, [r2, #0]
 800f6de:	e0a3      	b.n	800f828 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f6e0:	687a      	ldr	r2, [r7, #4]
 800f6e2:	683b      	ldr	r3, [r7, #0]
 800f6e4:	781b      	ldrb	r3, [r3, #0]
 800f6e6:	009b      	lsls	r3, r3, #2
 800f6e8:	4413      	add	r3, r2
 800f6ea:	881b      	ldrh	r3, [r3, #0]
 800f6ec:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800f6ee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f6f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d01b      	beq.n	800f730 <USB_DeactivateEndpoint+0x2d4>
 800f6f8:	687a      	ldr	r2, [r7, #4]
 800f6fa:	683b      	ldr	r3, [r7, #0]
 800f6fc:	781b      	ldrb	r3, [r3, #0]
 800f6fe:	009b      	lsls	r3, r3, #2
 800f700:	4413      	add	r3, r2
 800f702:	881b      	ldrh	r3, [r3, #0]
 800f704:	b29b      	uxth	r3, r3
 800f706:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f70a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f70e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800f710:	687a      	ldr	r2, [r7, #4]
 800f712:	683b      	ldr	r3, [r7, #0]
 800f714:	781b      	ldrb	r3, [r3, #0]
 800f716:	009b      	lsls	r3, r3, #2
 800f718:	441a      	add	r2, r3
 800f71a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f71c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f720:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f724:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f72c:	b29b      	uxth	r3, r3
 800f72e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f730:	687a      	ldr	r2, [r7, #4]
 800f732:	683b      	ldr	r3, [r7, #0]
 800f734:	781b      	ldrb	r3, [r3, #0]
 800f736:	009b      	lsls	r3, r3, #2
 800f738:	4413      	add	r3, r2
 800f73a:	881b      	ldrh	r3, [r3, #0]
 800f73c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800f73e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f744:	2b00      	cmp	r3, #0
 800f746:	d01b      	beq.n	800f780 <USB_DeactivateEndpoint+0x324>
 800f748:	687a      	ldr	r2, [r7, #4]
 800f74a:	683b      	ldr	r3, [r7, #0]
 800f74c:	781b      	ldrb	r3, [r3, #0]
 800f74e:	009b      	lsls	r3, r3, #2
 800f750:	4413      	add	r3, r2
 800f752:	881b      	ldrh	r3, [r3, #0]
 800f754:	b29b      	uxth	r3, r3
 800f756:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f75a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f75e:	853b      	strh	r3, [r7, #40]	; 0x28
 800f760:	687a      	ldr	r2, [r7, #4]
 800f762:	683b      	ldr	r3, [r7, #0]
 800f764:	781b      	ldrb	r3, [r3, #0]
 800f766:	009b      	lsls	r3, r3, #2
 800f768:	441a      	add	r2, r3
 800f76a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f76c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f770:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f774:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f778:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f77c:	b29b      	uxth	r3, r3
 800f77e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800f780:	687a      	ldr	r2, [r7, #4]
 800f782:	683b      	ldr	r3, [r7, #0]
 800f784:	781b      	ldrb	r3, [r3, #0]
 800f786:	009b      	lsls	r3, r3, #2
 800f788:	4413      	add	r3, r2
 800f78a:	881b      	ldrh	r3, [r3, #0]
 800f78c:	b29b      	uxth	r3, r3
 800f78e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f796:	84fb      	strh	r3, [r7, #38]	; 0x26
 800f798:	687a      	ldr	r2, [r7, #4]
 800f79a:	683b      	ldr	r3, [r7, #0]
 800f79c:	781b      	ldrb	r3, [r3, #0]
 800f79e:	009b      	lsls	r3, r3, #2
 800f7a0:	441a      	add	r2, r3
 800f7a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f7a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f7a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f7ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f7b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f7b4:	b29b      	uxth	r3, r3
 800f7b6:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f7b8:	687a      	ldr	r2, [r7, #4]
 800f7ba:	683b      	ldr	r3, [r7, #0]
 800f7bc:	781b      	ldrb	r3, [r3, #0]
 800f7be:	009b      	lsls	r3, r3, #2
 800f7c0:	4413      	add	r3, r2
 800f7c2:	881b      	ldrh	r3, [r3, #0]
 800f7c4:	b29b      	uxth	r3, r3
 800f7c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f7ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f7ce:	84bb      	strh	r3, [r7, #36]	; 0x24
 800f7d0:	687a      	ldr	r2, [r7, #4]
 800f7d2:	683b      	ldr	r3, [r7, #0]
 800f7d4:	781b      	ldrb	r3, [r3, #0]
 800f7d6:	009b      	lsls	r3, r3, #2
 800f7d8:	441a      	add	r2, r3
 800f7da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f7dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f7e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f7e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f7e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f7ec:	b29b      	uxth	r3, r3
 800f7ee:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f7f0:	687a      	ldr	r2, [r7, #4]
 800f7f2:	683b      	ldr	r3, [r7, #0]
 800f7f4:	781b      	ldrb	r3, [r3, #0]
 800f7f6:	009b      	lsls	r3, r3, #2
 800f7f8:	4413      	add	r3, r2
 800f7fa:	881b      	ldrh	r3, [r3, #0]
 800f7fc:	b29b      	uxth	r3, r3
 800f7fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f806:	847b      	strh	r3, [r7, #34]	; 0x22
 800f808:	687a      	ldr	r2, [r7, #4]
 800f80a:	683b      	ldr	r3, [r7, #0]
 800f80c:	781b      	ldrb	r3, [r3, #0]
 800f80e:	009b      	lsls	r3, r3, #2
 800f810:	441a      	add	r2, r3
 800f812:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f814:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f818:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f81c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f824:	b29b      	uxth	r3, r3
 800f826:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800f828:	2300      	movs	r3, #0
}
 800f82a:	4618      	mov	r0, r3
 800f82c:	3734      	adds	r7, #52	; 0x34
 800f82e:	46bd      	mov	sp, r7
 800f830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f834:	4770      	bx	lr

0800f836 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f836:	b580      	push	{r7, lr}
 800f838:	b0a0      	sub	sp, #128	; 0x80
 800f83a:	af00      	add	r7, sp, #0
 800f83c:	6078      	str	r0, [r7, #4]
 800f83e:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f840:	683b      	ldr	r3, [r7, #0]
 800f842:	785b      	ldrb	r3, [r3, #1]
 800f844:	2b01      	cmp	r3, #1
 800f846:	f040 81a1 	bne.w	800fb8c <USB_EPStartXfer+0x356>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800f84a:	683b      	ldr	r3, [r7, #0]
 800f84c:	699a      	ldr	r2, [r3, #24]
 800f84e:	683b      	ldr	r3, [r7, #0]
 800f850:	691b      	ldr	r3, [r3, #16]
 800f852:	429a      	cmp	r2, r3
 800f854:	d909      	bls.n	800f86a <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 800f856:	683b      	ldr	r3, [r7, #0]
 800f858:	691b      	ldr	r3, [r3, #16]
 800f85a:	67bb      	str	r3, [r7, #120]	; 0x78
      ep->xfer_len -= len;
 800f85c:	683b      	ldr	r3, [r7, #0]
 800f85e:	699a      	ldr	r2, [r3, #24]
 800f860:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f862:	1ad2      	subs	r2, r2, r3
 800f864:	683b      	ldr	r3, [r7, #0]
 800f866:	619a      	str	r2, [r3, #24]
 800f868:	e005      	b.n	800f876 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800f86a:	683b      	ldr	r3, [r7, #0]
 800f86c:	699b      	ldr	r3, [r3, #24]
 800f86e:	67bb      	str	r3, [r7, #120]	; 0x78
      ep->xfer_len = 0U;
 800f870:	683b      	ldr	r3, [r7, #0]
 800f872:	2200      	movs	r2, #0
 800f874:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800f876:	683b      	ldr	r3, [r7, #0]
 800f878:	7b1b      	ldrb	r3, [r3, #12]
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d11f      	bne.n	800f8be <USB_EPStartXfer+0x88>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800f87e:	683b      	ldr	r3, [r7, #0]
 800f880:	6959      	ldr	r1, [r3, #20]
 800f882:	683b      	ldr	r3, [r7, #0]
 800f884:	88da      	ldrh	r2, [r3, #6]
 800f886:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f888:	b29b      	uxth	r3, r3
 800f88a:	6878      	ldr	r0, [r7, #4]
 800f88c:	f000 fc56 	bl	801013c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	613b      	str	r3, [r7, #16]
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f89a:	b29b      	uxth	r3, r3
 800f89c:	461a      	mov	r2, r3
 800f89e:	693b      	ldr	r3, [r7, #16]
 800f8a0:	4413      	add	r3, r2
 800f8a2:	613b      	str	r3, [r7, #16]
 800f8a4:	683b      	ldr	r3, [r7, #0]
 800f8a6:	781b      	ldrb	r3, [r3, #0]
 800f8a8:	00da      	lsls	r2, r3, #3
 800f8aa:	693b      	ldr	r3, [r7, #16]
 800f8ac:	4413      	add	r3, r2
 800f8ae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800f8b2:	60fb      	str	r3, [r7, #12]
 800f8b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f8b6:	b29a      	uxth	r2, r3
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	801a      	strh	r2, [r3, #0]
 800f8bc:	e141      	b.n	800fb42 <USB_EPStartXfer+0x30c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800f8be:	687a      	ldr	r2, [r7, #4]
 800f8c0:	683b      	ldr	r3, [r7, #0]
 800f8c2:	781b      	ldrb	r3, [r3, #0]
 800f8c4:	009b      	lsls	r3, r3, #2
 800f8c6:	4413      	add	r3, r2
 800f8c8:	881b      	ldrh	r3, [r3, #0]
 800f8ca:	b29b      	uxth	r3, r3
 800f8cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d076      	beq.n	800f9c2 <USB_EPStartXfer+0x18c>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	627b      	str	r3, [r7, #36]	; 0x24
 800f8d8:	683b      	ldr	r3, [r7, #0]
 800f8da:	785b      	ldrb	r3, [r3, #1]
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d153      	bne.n	800f988 <USB_EPStartXfer+0x152>
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	61fb      	str	r3, [r7, #28]
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f8ea:	b29b      	uxth	r3, r3
 800f8ec:	461a      	mov	r2, r3
 800f8ee:	69fb      	ldr	r3, [r7, #28]
 800f8f0:	4413      	add	r3, r2
 800f8f2:	61fb      	str	r3, [r7, #28]
 800f8f4:	683b      	ldr	r3, [r7, #0]
 800f8f6:	781b      	ldrb	r3, [r3, #0]
 800f8f8:	00da      	lsls	r2, r3, #3
 800f8fa:	69fb      	ldr	r3, [r7, #28]
 800f8fc:	4413      	add	r3, r2
 800f8fe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f902:	61bb      	str	r3, [r7, #24]
 800f904:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f906:	2b00      	cmp	r3, #0
 800f908:	d112      	bne.n	800f930 <USB_EPStartXfer+0xfa>
 800f90a:	69bb      	ldr	r3, [r7, #24]
 800f90c:	881b      	ldrh	r3, [r3, #0]
 800f90e:	b29b      	uxth	r3, r3
 800f910:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800f914:	b29a      	uxth	r2, r3
 800f916:	69bb      	ldr	r3, [r7, #24]
 800f918:	801a      	strh	r2, [r3, #0]
 800f91a:	69bb      	ldr	r3, [r7, #24]
 800f91c:	881b      	ldrh	r3, [r3, #0]
 800f91e:	b29b      	uxth	r3, r3
 800f920:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f924:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f928:	b29a      	uxth	r2, r3
 800f92a:	69bb      	ldr	r3, [r7, #24]
 800f92c:	801a      	strh	r2, [r3, #0]
 800f92e:	e043      	b.n	800f9b8 <USB_EPStartXfer+0x182>
 800f930:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f932:	2b3e      	cmp	r3, #62	; 0x3e
 800f934:	d811      	bhi.n	800f95a <USB_EPStartXfer+0x124>
 800f936:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f938:	085b      	lsrs	r3, r3, #1
 800f93a:	677b      	str	r3, [r7, #116]	; 0x74
 800f93c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f93e:	f003 0301 	and.w	r3, r3, #1
 800f942:	2b00      	cmp	r3, #0
 800f944:	d002      	beq.n	800f94c <USB_EPStartXfer+0x116>
 800f946:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f948:	3301      	adds	r3, #1
 800f94a:	677b      	str	r3, [r7, #116]	; 0x74
 800f94c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f94e:	b29b      	uxth	r3, r3
 800f950:	029b      	lsls	r3, r3, #10
 800f952:	b29a      	uxth	r2, r3
 800f954:	69bb      	ldr	r3, [r7, #24]
 800f956:	801a      	strh	r2, [r3, #0]
 800f958:	e02e      	b.n	800f9b8 <USB_EPStartXfer+0x182>
 800f95a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f95c:	095b      	lsrs	r3, r3, #5
 800f95e:	677b      	str	r3, [r7, #116]	; 0x74
 800f960:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f962:	f003 031f 	and.w	r3, r3, #31
 800f966:	2b00      	cmp	r3, #0
 800f968:	d102      	bne.n	800f970 <USB_EPStartXfer+0x13a>
 800f96a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f96c:	3b01      	subs	r3, #1
 800f96e:	677b      	str	r3, [r7, #116]	; 0x74
 800f970:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f972:	b29b      	uxth	r3, r3
 800f974:	029b      	lsls	r3, r3, #10
 800f976:	b29b      	uxth	r3, r3
 800f978:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f97c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f980:	b29a      	uxth	r2, r3
 800f982:	69bb      	ldr	r3, [r7, #24]
 800f984:	801a      	strh	r2, [r3, #0]
 800f986:	e017      	b.n	800f9b8 <USB_EPStartXfer+0x182>
 800f988:	683b      	ldr	r3, [r7, #0]
 800f98a:	785b      	ldrb	r3, [r3, #1]
 800f98c:	2b01      	cmp	r3, #1
 800f98e:	d113      	bne.n	800f9b8 <USB_EPStartXfer+0x182>
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f996:	b29b      	uxth	r3, r3
 800f998:	461a      	mov	r2, r3
 800f99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f99c:	4413      	add	r3, r2
 800f99e:	627b      	str	r3, [r7, #36]	; 0x24
 800f9a0:	683b      	ldr	r3, [r7, #0]
 800f9a2:	781b      	ldrb	r3, [r3, #0]
 800f9a4:	00da      	lsls	r2, r3, #3
 800f9a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9a8:	4413      	add	r3, r2
 800f9aa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f9ae:	623b      	str	r3, [r7, #32]
 800f9b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f9b2:	b29a      	uxth	r2, r3
 800f9b4:	6a3b      	ldr	r3, [r7, #32]
 800f9b6:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 800f9b8:	683b      	ldr	r3, [r7, #0]
 800f9ba:	895b      	ldrh	r3, [r3, #10]
 800f9bc:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 800f9c0:	e075      	b.n	800faae <USB_EPStartXfer+0x278>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800f9c2:	683b      	ldr	r3, [r7, #0]
 800f9c4:	785b      	ldrb	r3, [r3, #1]
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d153      	bne.n	800fa72 <USB_EPStartXfer+0x23c>
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f9d4:	b29b      	uxth	r3, r3
 800f9d6:	461a      	mov	r2, r3
 800f9d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9da:	4413      	add	r3, r2
 800f9dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f9de:	683b      	ldr	r3, [r7, #0]
 800f9e0:	781b      	ldrb	r3, [r3, #0]
 800f9e2:	00da      	lsls	r2, r3, #3
 800f9e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9e6:	4413      	add	r3, r2
 800f9e8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800f9ec:	62bb      	str	r3, [r7, #40]	; 0x28
 800f9ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d112      	bne.n	800fa1a <USB_EPStartXfer+0x1e4>
 800f9f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9f6:	881b      	ldrh	r3, [r3, #0]
 800f9f8:	b29b      	uxth	r3, r3
 800f9fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800f9fe:	b29a      	uxth	r2, r3
 800fa00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa02:	801a      	strh	r2, [r3, #0]
 800fa04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa06:	881b      	ldrh	r3, [r3, #0]
 800fa08:	b29b      	uxth	r3, r3
 800fa0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fa0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fa12:	b29a      	uxth	r2, r3
 800fa14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa16:	801a      	strh	r2, [r3, #0]
 800fa18:	e045      	b.n	800faa6 <USB_EPStartXfer+0x270>
 800fa1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fa1c:	2b3e      	cmp	r3, #62	; 0x3e
 800fa1e:	d811      	bhi.n	800fa44 <USB_EPStartXfer+0x20e>
 800fa20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fa22:	085b      	lsrs	r3, r3, #1
 800fa24:	673b      	str	r3, [r7, #112]	; 0x70
 800fa26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fa28:	f003 0301 	and.w	r3, r3, #1
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d002      	beq.n	800fa36 <USB_EPStartXfer+0x200>
 800fa30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fa32:	3301      	adds	r3, #1
 800fa34:	673b      	str	r3, [r7, #112]	; 0x70
 800fa36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fa38:	b29b      	uxth	r3, r3
 800fa3a:	029b      	lsls	r3, r3, #10
 800fa3c:	b29a      	uxth	r2, r3
 800fa3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa40:	801a      	strh	r2, [r3, #0]
 800fa42:	e030      	b.n	800faa6 <USB_EPStartXfer+0x270>
 800fa44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fa46:	095b      	lsrs	r3, r3, #5
 800fa48:	673b      	str	r3, [r7, #112]	; 0x70
 800fa4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fa4c:	f003 031f 	and.w	r3, r3, #31
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d102      	bne.n	800fa5a <USB_EPStartXfer+0x224>
 800fa54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fa56:	3b01      	subs	r3, #1
 800fa58:	673b      	str	r3, [r7, #112]	; 0x70
 800fa5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fa5c:	b29b      	uxth	r3, r3
 800fa5e:	029b      	lsls	r3, r3, #10
 800fa60:	b29b      	uxth	r3, r3
 800fa62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fa66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fa6a:	b29a      	uxth	r2, r3
 800fa6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa6e:	801a      	strh	r2, [r3, #0]
 800fa70:	e019      	b.n	800faa6 <USB_EPStartXfer+0x270>
 800fa72:	683b      	ldr	r3, [r7, #0]
 800fa74:	785b      	ldrb	r3, [r3, #1]
 800fa76:	2b01      	cmp	r3, #1
 800fa78:	d115      	bne.n	800faa6 <USB_EPStartXfer+0x270>
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	637b      	str	r3, [r7, #52]	; 0x34
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fa84:	b29b      	uxth	r3, r3
 800fa86:	461a      	mov	r2, r3
 800fa88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa8a:	4413      	add	r3, r2
 800fa8c:	637b      	str	r3, [r7, #52]	; 0x34
 800fa8e:	683b      	ldr	r3, [r7, #0]
 800fa90:	781b      	ldrb	r3, [r3, #0]
 800fa92:	00da      	lsls	r2, r3, #3
 800fa94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa96:	4413      	add	r3, r2
 800fa98:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800fa9c:	633b      	str	r3, [r7, #48]	; 0x30
 800fa9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800faa0:	b29a      	uxth	r2, r3
 800faa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faa4:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr0;
 800faa6:	683b      	ldr	r3, [r7, #0]
 800faa8:	891b      	ldrh	r3, [r3, #8]
 800faaa:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800faae:	683b      	ldr	r3, [r7, #0]
 800fab0:	6959      	ldr	r1, [r3, #20]
 800fab2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fab4:	b29b      	uxth	r3, r3
 800fab6:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 800faba:	6878      	ldr	r0, [r7, #4]
 800fabc:	f000 fb3e 	bl	801013c <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800fac0:	683b      	ldr	r3, [r7, #0]
 800fac2:	785b      	ldrb	r3, [r3, #1]
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d11c      	bne.n	800fb02 <USB_EPStartXfer+0x2cc>
 800fac8:	687a      	ldr	r2, [r7, #4]
 800faca:	683b      	ldr	r3, [r7, #0]
 800facc:	781b      	ldrb	r3, [r3, #0]
 800face:	009b      	lsls	r3, r3, #2
 800fad0:	4413      	add	r3, r2
 800fad2:	881b      	ldrh	r3, [r3, #0]
 800fad4:	b29b      	uxth	r3, r3
 800fad6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fade:	82bb      	strh	r3, [r7, #20]
 800fae0:	687a      	ldr	r2, [r7, #4]
 800fae2:	683b      	ldr	r3, [r7, #0]
 800fae4:	781b      	ldrb	r3, [r3, #0]
 800fae6:	009b      	lsls	r3, r3, #2
 800fae8:	441a      	add	r2, r3
 800faea:	8abb      	ldrh	r3, [r7, #20]
 800faec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800faf0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800faf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800faf8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800fafc:	b29b      	uxth	r3, r3
 800fafe:	8013      	strh	r3, [r2, #0]
 800fb00:	e01f      	b.n	800fb42 <USB_EPStartXfer+0x30c>
 800fb02:	683b      	ldr	r3, [r7, #0]
 800fb04:	785b      	ldrb	r3, [r3, #1]
 800fb06:	2b01      	cmp	r3, #1
 800fb08:	d11b      	bne.n	800fb42 <USB_EPStartXfer+0x30c>
 800fb0a:	687a      	ldr	r2, [r7, #4]
 800fb0c:	683b      	ldr	r3, [r7, #0]
 800fb0e:	781b      	ldrb	r3, [r3, #0]
 800fb10:	009b      	lsls	r3, r3, #2
 800fb12:	4413      	add	r3, r2
 800fb14:	881b      	ldrh	r3, [r3, #0]
 800fb16:	b29b      	uxth	r3, r3
 800fb18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fb1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fb20:	82fb      	strh	r3, [r7, #22]
 800fb22:	687a      	ldr	r2, [r7, #4]
 800fb24:	683b      	ldr	r3, [r7, #0]
 800fb26:	781b      	ldrb	r3, [r3, #0]
 800fb28:	009b      	lsls	r3, r3, #2
 800fb2a:	441a      	add	r2, r3
 800fb2c:	8afb      	ldrh	r3, [r7, #22]
 800fb2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fb32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fb36:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800fb3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fb3e:	b29b      	uxth	r3, r3
 800fb40:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800fb42:	687a      	ldr	r2, [r7, #4]
 800fb44:	683b      	ldr	r3, [r7, #0]
 800fb46:	781b      	ldrb	r3, [r3, #0]
 800fb48:	009b      	lsls	r3, r3, #2
 800fb4a:	4413      	add	r3, r2
 800fb4c:	881b      	ldrh	r3, [r3, #0]
 800fb4e:	b29b      	uxth	r3, r3
 800fb50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fb54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fb58:	817b      	strh	r3, [r7, #10]
 800fb5a:	897b      	ldrh	r3, [r7, #10]
 800fb5c:	f083 0310 	eor.w	r3, r3, #16
 800fb60:	817b      	strh	r3, [r7, #10]
 800fb62:	897b      	ldrh	r3, [r7, #10]
 800fb64:	f083 0320 	eor.w	r3, r3, #32
 800fb68:	817b      	strh	r3, [r7, #10]
 800fb6a:	687a      	ldr	r2, [r7, #4]
 800fb6c:	683b      	ldr	r3, [r7, #0]
 800fb6e:	781b      	ldrb	r3, [r3, #0]
 800fb70:	009b      	lsls	r3, r3, #2
 800fb72:	441a      	add	r2, r3
 800fb74:	897b      	ldrh	r3, [r7, #10]
 800fb76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fb7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fb7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fb82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fb86:	b29b      	uxth	r3, r3
 800fb88:	8013      	strh	r3, [r2, #0]
 800fb8a:	e175      	b.n	800fe78 <USB_EPStartXfer+0x642>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800fb8c:	683b      	ldr	r3, [r7, #0]
 800fb8e:	699a      	ldr	r2, [r3, #24]
 800fb90:	683b      	ldr	r3, [r7, #0]
 800fb92:	691b      	ldr	r3, [r3, #16]
 800fb94:	429a      	cmp	r2, r3
 800fb96:	d909      	bls.n	800fbac <USB_EPStartXfer+0x376>
    {
      len = ep->maxpacket;
 800fb98:	683b      	ldr	r3, [r7, #0]
 800fb9a:	691b      	ldr	r3, [r3, #16]
 800fb9c:	67bb      	str	r3, [r7, #120]	; 0x78
      ep->xfer_len -= len;
 800fb9e:	683b      	ldr	r3, [r7, #0]
 800fba0:	699a      	ldr	r2, [r3, #24]
 800fba2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fba4:	1ad2      	subs	r2, r2, r3
 800fba6:	683b      	ldr	r3, [r7, #0]
 800fba8:	619a      	str	r2, [r3, #24]
 800fbaa:	e005      	b.n	800fbb8 <USB_EPStartXfer+0x382>
    }
    else
    {
      len = ep->xfer_len;
 800fbac:	683b      	ldr	r3, [r7, #0]
 800fbae:	699b      	ldr	r3, [r3, #24]
 800fbb0:	67bb      	str	r3, [r7, #120]	; 0x78
      ep->xfer_len = 0U;
 800fbb2:	683b      	ldr	r3, [r7, #0]
 800fbb4:	2200      	movs	r2, #0
 800fbb6:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 800fbb8:	683b      	ldr	r3, [r7, #0]
 800fbba:	7b1b      	ldrb	r3, [r3, #12]
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d153      	bne.n	800fc68 <USB_EPStartXfer+0x432>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	643b      	str	r3, [r7, #64]	; 0x40
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fbca:	b29b      	uxth	r3, r3
 800fbcc:	461a      	mov	r2, r3
 800fbce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fbd0:	4413      	add	r3, r2
 800fbd2:	643b      	str	r3, [r7, #64]	; 0x40
 800fbd4:	683b      	ldr	r3, [r7, #0]
 800fbd6:	781b      	ldrb	r3, [r3, #0]
 800fbd8:	00da      	lsls	r2, r3, #3
 800fbda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fbdc:	4413      	add	r3, r2
 800fbde:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800fbe2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fbe4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d112      	bne.n	800fc10 <USB_EPStartXfer+0x3da>
 800fbea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbec:	881b      	ldrh	r3, [r3, #0]
 800fbee:	b29b      	uxth	r3, r3
 800fbf0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800fbf4:	b29a      	uxth	r2, r3
 800fbf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbf8:	801a      	strh	r2, [r3, #0]
 800fbfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbfc:	881b      	ldrh	r3, [r3, #0]
 800fbfe:	b29b      	uxth	r3, r3
 800fc00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fc04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fc08:	b29a      	uxth	r2, r3
 800fc0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc0c:	801a      	strh	r2, [r3, #0]
 800fc0e:	e10f      	b.n	800fe30 <USB_EPStartXfer+0x5fa>
 800fc10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fc12:	2b3e      	cmp	r3, #62	; 0x3e
 800fc14:	d811      	bhi.n	800fc3a <USB_EPStartXfer+0x404>
 800fc16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fc18:	085b      	lsrs	r3, r3, #1
 800fc1a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800fc1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fc1e:	f003 0301 	and.w	r3, r3, #1
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d002      	beq.n	800fc2c <USB_EPStartXfer+0x3f6>
 800fc26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fc28:	3301      	adds	r3, #1
 800fc2a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800fc2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fc2e:	b29b      	uxth	r3, r3
 800fc30:	029b      	lsls	r3, r3, #10
 800fc32:	b29a      	uxth	r2, r3
 800fc34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc36:	801a      	strh	r2, [r3, #0]
 800fc38:	e0fa      	b.n	800fe30 <USB_EPStartXfer+0x5fa>
 800fc3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fc3c:	095b      	lsrs	r3, r3, #5
 800fc3e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800fc40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fc42:	f003 031f 	and.w	r3, r3, #31
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d102      	bne.n	800fc50 <USB_EPStartXfer+0x41a>
 800fc4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fc4c:	3b01      	subs	r3, #1
 800fc4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800fc50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fc52:	b29b      	uxth	r3, r3
 800fc54:	029b      	lsls	r3, r3, #10
 800fc56:	b29b      	uxth	r3, r3
 800fc58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fc5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fc60:	b29a      	uxth	r2, r3
 800fc62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc64:	801a      	strh	r2, [r3, #0]
 800fc66:	e0e3      	b.n	800fe30 <USB_EPStartXfer+0x5fa>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800fc68:	683b      	ldr	r3, [r7, #0]
 800fc6a:	785b      	ldrb	r3, [r3, #1]
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d153      	bne.n	800fd18 <USB_EPStartXfer+0x4e2>
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	65bb      	str	r3, [r7, #88]	; 0x58
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fc7a:	b29b      	uxth	r3, r3
 800fc7c:	461a      	mov	r2, r3
 800fc7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fc80:	4413      	add	r3, r2
 800fc82:	65bb      	str	r3, [r7, #88]	; 0x58
 800fc84:	683b      	ldr	r3, [r7, #0]
 800fc86:	781b      	ldrb	r3, [r3, #0]
 800fc88:	00da      	lsls	r2, r3, #3
 800fc8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fc8c:	4413      	add	r3, r2
 800fc8e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800fc92:	657b      	str	r3, [r7, #84]	; 0x54
 800fc94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d112      	bne.n	800fcc0 <USB_EPStartXfer+0x48a>
 800fc9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fc9c:	881b      	ldrh	r3, [r3, #0]
 800fc9e:	b29b      	uxth	r3, r3
 800fca0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800fca4:	b29a      	uxth	r2, r3
 800fca6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fca8:	801a      	strh	r2, [r3, #0]
 800fcaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fcac:	881b      	ldrh	r3, [r3, #0]
 800fcae:	b29b      	uxth	r3, r3
 800fcb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fcb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fcb8:	b29a      	uxth	r2, r3
 800fcba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fcbc:	801a      	strh	r2, [r3, #0]
 800fcbe:	e045      	b.n	800fd4c <USB_EPStartXfer+0x516>
 800fcc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fcc2:	2b3e      	cmp	r3, #62	; 0x3e
 800fcc4:	d811      	bhi.n	800fcea <USB_EPStartXfer+0x4b4>
 800fcc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fcc8:	085b      	lsrs	r3, r3, #1
 800fcca:	66bb      	str	r3, [r7, #104]	; 0x68
 800fccc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fcce:	f003 0301 	and.w	r3, r3, #1
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d002      	beq.n	800fcdc <USB_EPStartXfer+0x4a6>
 800fcd6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fcd8:	3301      	adds	r3, #1
 800fcda:	66bb      	str	r3, [r7, #104]	; 0x68
 800fcdc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fcde:	b29b      	uxth	r3, r3
 800fce0:	029b      	lsls	r3, r3, #10
 800fce2:	b29a      	uxth	r2, r3
 800fce4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fce6:	801a      	strh	r2, [r3, #0]
 800fce8:	e030      	b.n	800fd4c <USB_EPStartXfer+0x516>
 800fcea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fcec:	095b      	lsrs	r3, r3, #5
 800fcee:	66bb      	str	r3, [r7, #104]	; 0x68
 800fcf0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fcf2:	f003 031f 	and.w	r3, r3, #31
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d102      	bne.n	800fd00 <USB_EPStartXfer+0x4ca>
 800fcfa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fcfc:	3b01      	subs	r3, #1
 800fcfe:	66bb      	str	r3, [r7, #104]	; 0x68
 800fd00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fd02:	b29b      	uxth	r3, r3
 800fd04:	029b      	lsls	r3, r3, #10
 800fd06:	b29b      	uxth	r3, r3
 800fd08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fd0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fd10:	b29a      	uxth	r2, r3
 800fd12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fd14:	801a      	strh	r2, [r3, #0]
 800fd16:	e019      	b.n	800fd4c <USB_EPStartXfer+0x516>
 800fd18:	683b      	ldr	r3, [r7, #0]
 800fd1a:	785b      	ldrb	r3, [r3, #1]
 800fd1c:	2b01      	cmp	r3, #1
 800fd1e:	d115      	bne.n	800fd4c <USB_EPStartXfer+0x516>
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	663b      	str	r3, [r7, #96]	; 0x60
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fd2a:	b29b      	uxth	r3, r3
 800fd2c:	461a      	mov	r2, r3
 800fd2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fd30:	4413      	add	r3, r2
 800fd32:	663b      	str	r3, [r7, #96]	; 0x60
 800fd34:	683b      	ldr	r3, [r7, #0]
 800fd36:	781b      	ldrb	r3, [r3, #0]
 800fd38:	00da      	lsls	r2, r3, #3
 800fd3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fd3c:	4413      	add	r3, r2
 800fd3e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800fd42:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fd44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fd46:	b29a      	uxth	r2, r3
 800fd48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fd4a:	801a      	strh	r2, [r3, #0]
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	653b      	str	r3, [r7, #80]	; 0x50
 800fd50:	683b      	ldr	r3, [r7, #0]
 800fd52:	785b      	ldrb	r3, [r3, #1]
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d153      	bne.n	800fe00 <USB_EPStartXfer+0x5ca>
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	64bb      	str	r3, [r7, #72]	; 0x48
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fd62:	b29b      	uxth	r3, r3
 800fd64:	461a      	mov	r2, r3
 800fd66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd68:	4413      	add	r3, r2
 800fd6a:	64bb      	str	r3, [r7, #72]	; 0x48
 800fd6c:	683b      	ldr	r3, [r7, #0]
 800fd6e:	781b      	ldrb	r3, [r3, #0]
 800fd70:	00da      	lsls	r2, r3, #3
 800fd72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd74:	4413      	add	r3, r2
 800fd76:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800fd7a:	647b      	str	r3, [r7, #68]	; 0x44
 800fd7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d112      	bne.n	800fda8 <USB_EPStartXfer+0x572>
 800fd82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fd84:	881b      	ldrh	r3, [r3, #0]
 800fd86:	b29b      	uxth	r3, r3
 800fd88:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800fd8c:	b29a      	uxth	r2, r3
 800fd8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fd90:	801a      	strh	r2, [r3, #0]
 800fd92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fd94:	881b      	ldrh	r3, [r3, #0]
 800fd96:	b29b      	uxth	r3, r3
 800fd98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fd9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fda0:	b29a      	uxth	r2, r3
 800fda2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fda4:	801a      	strh	r2, [r3, #0]
 800fda6:	e043      	b.n	800fe30 <USB_EPStartXfer+0x5fa>
 800fda8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fdaa:	2b3e      	cmp	r3, #62	; 0x3e
 800fdac:	d811      	bhi.n	800fdd2 <USB_EPStartXfer+0x59c>
 800fdae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fdb0:	085b      	lsrs	r3, r3, #1
 800fdb2:	667b      	str	r3, [r7, #100]	; 0x64
 800fdb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fdb6:	f003 0301 	and.w	r3, r3, #1
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d002      	beq.n	800fdc4 <USB_EPStartXfer+0x58e>
 800fdbe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fdc0:	3301      	adds	r3, #1
 800fdc2:	667b      	str	r3, [r7, #100]	; 0x64
 800fdc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fdc6:	b29b      	uxth	r3, r3
 800fdc8:	029b      	lsls	r3, r3, #10
 800fdca:	b29a      	uxth	r2, r3
 800fdcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fdce:	801a      	strh	r2, [r3, #0]
 800fdd0:	e02e      	b.n	800fe30 <USB_EPStartXfer+0x5fa>
 800fdd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fdd4:	095b      	lsrs	r3, r3, #5
 800fdd6:	667b      	str	r3, [r7, #100]	; 0x64
 800fdd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fdda:	f003 031f 	and.w	r3, r3, #31
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d102      	bne.n	800fde8 <USB_EPStartXfer+0x5b2>
 800fde2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fde4:	3b01      	subs	r3, #1
 800fde6:	667b      	str	r3, [r7, #100]	; 0x64
 800fde8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fdea:	b29b      	uxth	r3, r3
 800fdec:	029b      	lsls	r3, r3, #10
 800fdee:	b29b      	uxth	r3, r3
 800fdf0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fdf4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fdf8:	b29a      	uxth	r2, r3
 800fdfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fdfc:	801a      	strh	r2, [r3, #0]
 800fdfe:	e017      	b.n	800fe30 <USB_EPStartXfer+0x5fa>
 800fe00:	683b      	ldr	r3, [r7, #0]
 800fe02:	785b      	ldrb	r3, [r3, #1]
 800fe04:	2b01      	cmp	r3, #1
 800fe06:	d113      	bne.n	800fe30 <USB_EPStartXfer+0x5fa>
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fe0e:	b29b      	uxth	r3, r3
 800fe10:	461a      	mov	r2, r3
 800fe12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe14:	4413      	add	r3, r2
 800fe16:	653b      	str	r3, [r7, #80]	; 0x50
 800fe18:	683b      	ldr	r3, [r7, #0]
 800fe1a:	781b      	ldrb	r3, [r3, #0]
 800fe1c:	00da      	lsls	r2, r3, #3
 800fe1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe20:	4413      	add	r3, r2
 800fe22:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800fe26:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fe28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fe2a:	b29a      	uxth	r2, r3
 800fe2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe2e:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800fe30:	687a      	ldr	r2, [r7, #4]
 800fe32:	683b      	ldr	r3, [r7, #0]
 800fe34:	781b      	ldrb	r3, [r3, #0]
 800fe36:	009b      	lsls	r3, r3, #2
 800fe38:	4413      	add	r3, r2
 800fe3a:	881b      	ldrh	r3, [r3, #0]
 800fe3c:	b29b      	uxth	r3, r3
 800fe3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fe42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fe46:	877b      	strh	r3, [r7, #58]	; 0x3a
 800fe48:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fe4a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800fe4e:	877b      	strh	r3, [r7, #58]	; 0x3a
 800fe50:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fe52:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800fe56:	877b      	strh	r3, [r7, #58]	; 0x3a
 800fe58:	687a      	ldr	r2, [r7, #4]
 800fe5a:	683b      	ldr	r3, [r7, #0]
 800fe5c:	781b      	ldrb	r3, [r3, #0]
 800fe5e:	009b      	lsls	r3, r3, #2
 800fe60:	441a      	add	r2, r3
 800fe62:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fe64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fe68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fe6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fe70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe74:	b29b      	uxth	r3, r3
 800fe76:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800fe78:	2300      	movs	r3, #0
}
 800fe7a:	4618      	mov	r0, r3
 800fe7c:	3780      	adds	r7, #128	; 0x80
 800fe7e:	46bd      	mov	sp, r7
 800fe80:	bd80      	pop	{r7, pc}

0800fe82 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800fe82:	b480      	push	{r7}
 800fe84:	b085      	sub	sp, #20
 800fe86:	af00      	add	r7, sp, #0
 800fe88:	6078      	str	r0, [r7, #4]
 800fe8a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800fe8c:	683b      	ldr	r3, [r7, #0]
 800fe8e:	785b      	ldrb	r3, [r3, #1]
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d020      	beq.n	800fed6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800fe94:	687a      	ldr	r2, [r7, #4]
 800fe96:	683b      	ldr	r3, [r7, #0]
 800fe98:	781b      	ldrb	r3, [r3, #0]
 800fe9a:	009b      	lsls	r3, r3, #2
 800fe9c:	4413      	add	r3, r2
 800fe9e:	881b      	ldrh	r3, [r3, #0]
 800fea0:	b29b      	uxth	r3, r3
 800fea2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fea6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800feaa:	81bb      	strh	r3, [r7, #12]
 800feac:	89bb      	ldrh	r3, [r7, #12]
 800feae:	f083 0310 	eor.w	r3, r3, #16
 800feb2:	81bb      	strh	r3, [r7, #12]
 800feb4:	687a      	ldr	r2, [r7, #4]
 800feb6:	683b      	ldr	r3, [r7, #0]
 800feb8:	781b      	ldrb	r3, [r3, #0]
 800feba:	009b      	lsls	r3, r3, #2
 800febc:	441a      	add	r2, r3
 800febe:	89bb      	ldrh	r3, [r7, #12]
 800fec0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fec4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fec8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fecc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fed0:	b29b      	uxth	r3, r3
 800fed2:	8013      	strh	r3, [r2, #0]
 800fed4:	e01f      	b.n	800ff16 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800fed6:	687a      	ldr	r2, [r7, #4]
 800fed8:	683b      	ldr	r3, [r7, #0]
 800feda:	781b      	ldrb	r3, [r3, #0]
 800fedc:	009b      	lsls	r3, r3, #2
 800fede:	4413      	add	r3, r2
 800fee0:	881b      	ldrh	r3, [r3, #0]
 800fee2:	b29b      	uxth	r3, r3
 800fee4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fee8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800feec:	81fb      	strh	r3, [r7, #14]
 800feee:	89fb      	ldrh	r3, [r7, #14]
 800fef0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800fef4:	81fb      	strh	r3, [r7, #14]
 800fef6:	687a      	ldr	r2, [r7, #4]
 800fef8:	683b      	ldr	r3, [r7, #0]
 800fefa:	781b      	ldrb	r3, [r3, #0]
 800fefc:	009b      	lsls	r3, r3, #2
 800fefe:	441a      	add	r2, r3
 800ff00:	89fb      	ldrh	r3, [r7, #14]
 800ff02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ff06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ff0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ff0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ff12:	b29b      	uxth	r3, r3
 800ff14:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ff16:	2300      	movs	r3, #0
}
 800ff18:	4618      	mov	r0, r3
 800ff1a:	3714      	adds	r7, #20
 800ff1c:	46bd      	mov	sp, r7
 800ff1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff22:	4770      	bx	lr

0800ff24 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ff24:	b480      	push	{r7}
 800ff26:	b087      	sub	sp, #28
 800ff28:	af00      	add	r7, sp, #0
 800ff2a:	6078      	str	r0, [r7, #4]
 800ff2c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800ff2e:	683b      	ldr	r3, [r7, #0]
 800ff30:	7b1b      	ldrb	r3, [r3, #12]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	f040 809d 	bne.w	8010072 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800ff38:	683b      	ldr	r3, [r7, #0]
 800ff3a:	785b      	ldrb	r3, [r3, #1]
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d04c      	beq.n	800ffda <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ff40:	687a      	ldr	r2, [r7, #4]
 800ff42:	683b      	ldr	r3, [r7, #0]
 800ff44:	781b      	ldrb	r3, [r3, #0]
 800ff46:	009b      	lsls	r3, r3, #2
 800ff48:	4413      	add	r3, r2
 800ff4a:	881b      	ldrh	r3, [r3, #0]
 800ff4c:	823b      	strh	r3, [r7, #16]
 800ff4e:	8a3b      	ldrh	r3, [r7, #16]
 800ff50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d01b      	beq.n	800ff90 <USB_EPClearStall+0x6c>
 800ff58:	687a      	ldr	r2, [r7, #4]
 800ff5a:	683b      	ldr	r3, [r7, #0]
 800ff5c:	781b      	ldrb	r3, [r3, #0]
 800ff5e:	009b      	lsls	r3, r3, #2
 800ff60:	4413      	add	r3, r2
 800ff62:	881b      	ldrh	r3, [r3, #0]
 800ff64:	b29b      	uxth	r3, r3
 800ff66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ff6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ff6e:	81fb      	strh	r3, [r7, #14]
 800ff70:	687a      	ldr	r2, [r7, #4]
 800ff72:	683b      	ldr	r3, [r7, #0]
 800ff74:	781b      	ldrb	r3, [r3, #0]
 800ff76:	009b      	lsls	r3, r3, #2
 800ff78:	441a      	add	r2, r3
 800ff7a:	89fb      	ldrh	r3, [r7, #14]
 800ff7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ff80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ff84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ff88:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ff8c:	b29b      	uxth	r3, r3
 800ff8e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ff90:	683b      	ldr	r3, [r7, #0]
 800ff92:	78db      	ldrb	r3, [r3, #3]
 800ff94:	2b01      	cmp	r3, #1
 800ff96:	d06c      	beq.n	8010072 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ff98:	687a      	ldr	r2, [r7, #4]
 800ff9a:	683b      	ldr	r3, [r7, #0]
 800ff9c:	781b      	ldrb	r3, [r3, #0]
 800ff9e:	009b      	lsls	r3, r3, #2
 800ffa0:	4413      	add	r3, r2
 800ffa2:	881b      	ldrh	r3, [r3, #0]
 800ffa4:	b29b      	uxth	r3, r3
 800ffa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ffaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ffae:	81bb      	strh	r3, [r7, #12]
 800ffb0:	89bb      	ldrh	r3, [r7, #12]
 800ffb2:	f083 0320 	eor.w	r3, r3, #32
 800ffb6:	81bb      	strh	r3, [r7, #12]
 800ffb8:	687a      	ldr	r2, [r7, #4]
 800ffba:	683b      	ldr	r3, [r7, #0]
 800ffbc:	781b      	ldrb	r3, [r3, #0]
 800ffbe:	009b      	lsls	r3, r3, #2
 800ffc0:	441a      	add	r2, r3
 800ffc2:	89bb      	ldrh	r3, [r7, #12]
 800ffc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ffc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ffcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ffd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ffd4:	b29b      	uxth	r3, r3
 800ffd6:	8013      	strh	r3, [r2, #0]
 800ffd8:	e04b      	b.n	8010072 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ffda:	687a      	ldr	r2, [r7, #4]
 800ffdc:	683b      	ldr	r3, [r7, #0]
 800ffde:	781b      	ldrb	r3, [r3, #0]
 800ffe0:	009b      	lsls	r3, r3, #2
 800ffe2:	4413      	add	r3, r2
 800ffe4:	881b      	ldrh	r3, [r3, #0]
 800ffe6:	82fb      	strh	r3, [r7, #22]
 800ffe8:	8afb      	ldrh	r3, [r7, #22]
 800ffea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d01b      	beq.n	801002a <USB_EPClearStall+0x106>
 800fff2:	687a      	ldr	r2, [r7, #4]
 800fff4:	683b      	ldr	r3, [r7, #0]
 800fff6:	781b      	ldrb	r3, [r3, #0]
 800fff8:	009b      	lsls	r3, r3, #2
 800fffa:	4413      	add	r3, r2
 800fffc:	881b      	ldrh	r3, [r3, #0]
 800fffe:	b29b      	uxth	r3, r3
 8010000:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010004:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010008:	82bb      	strh	r3, [r7, #20]
 801000a:	687a      	ldr	r2, [r7, #4]
 801000c:	683b      	ldr	r3, [r7, #0]
 801000e:	781b      	ldrb	r3, [r3, #0]
 8010010:	009b      	lsls	r3, r3, #2
 8010012:	441a      	add	r2, r3
 8010014:	8abb      	ldrh	r3, [r7, #20]
 8010016:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801001a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801001e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010022:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010026:	b29b      	uxth	r3, r3
 8010028:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801002a:	687a      	ldr	r2, [r7, #4]
 801002c:	683b      	ldr	r3, [r7, #0]
 801002e:	781b      	ldrb	r3, [r3, #0]
 8010030:	009b      	lsls	r3, r3, #2
 8010032:	4413      	add	r3, r2
 8010034:	881b      	ldrh	r3, [r3, #0]
 8010036:	b29b      	uxth	r3, r3
 8010038:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801003c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010040:	827b      	strh	r3, [r7, #18]
 8010042:	8a7b      	ldrh	r3, [r7, #18]
 8010044:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8010048:	827b      	strh	r3, [r7, #18]
 801004a:	8a7b      	ldrh	r3, [r7, #18]
 801004c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8010050:	827b      	strh	r3, [r7, #18]
 8010052:	687a      	ldr	r2, [r7, #4]
 8010054:	683b      	ldr	r3, [r7, #0]
 8010056:	781b      	ldrb	r3, [r3, #0]
 8010058:	009b      	lsls	r3, r3, #2
 801005a:	441a      	add	r2, r3
 801005c:	8a7b      	ldrh	r3, [r7, #18]
 801005e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010062:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010066:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801006a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801006e:	b29b      	uxth	r3, r3
 8010070:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8010072:	2300      	movs	r3, #0
}
 8010074:	4618      	mov	r0, r3
 8010076:	371c      	adds	r7, #28
 8010078:	46bd      	mov	sp, r7
 801007a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801007e:	4770      	bx	lr

08010080 <USB_StopDevice>:
  * @brief  USB_StopDevice : Stop the usb device mode
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_TypeDef *USBx)
{
 8010080:	b480      	push	{r7}
 8010082:	b083      	sub	sp, #12
 8010084:	af00      	add	r7, sp, #0
 8010086:	6078      	str	r0, [r7, #4]
  /* disable all interrupts and force USB reset */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	2201      	movs	r2, #1
 801008c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* clear interrupt status register */
  USBx->ISTR = 0U;
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	2200      	movs	r2, #0
 8010094:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* switch-off device */
  USBx->CNTR = (uint16_t)(USB_CNTR_FRES | USB_CNTR_PDWN);
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	2203      	movs	r2, #3
 801009c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80100a0:	2300      	movs	r3, #0
}
 80100a2:	4618      	mov	r0, r3
 80100a4:	370c      	adds	r7, #12
 80100a6:	46bd      	mov	sp, r7
 80100a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ac:	4770      	bx	lr

080100ae <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80100ae:	b480      	push	{r7}
 80100b0:	b083      	sub	sp, #12
 80100b2:	af00      	add	r7, sp, #0
 80100b4:	6078      	str	r0, [r7, #4]
 80100b6:	460b      	mov	r3, r1
 80100b8:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80100ba:	78fb      	ldrb	r3, [r7, #3]
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d103      	bne.n	80100c8 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	2280      	movs	r2, #128	; 0x80
 80100c4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80100c8:	2300      	movs	r3, #0
}
 80100ca:	4618      	mov	r0, r3
 80100cc:	370c      	adds	r7, #12
 80100ce:	46bd      	mov	sp, r7
 80100d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100d4:	4770      	bx	lr

080100d6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80100d6:	b480      	push	{r7}
 80100d8:	b083      	sub	sp, #12
 80100da:	af00      	add	r7, sp, #0
 80100dc:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80100e4:	b29b      	uxth	r3, r3
 80100e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80100ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80100ee:	b29a      	uxth	r2, r3
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80100f6:	2300      	movs	r3, #0
}
 80100f8:	4618      	mov	r0, r3
 80100fa:	370c      	adds	r7, #12
 80100fc:	46bd      	mov	sp, r7
 80100fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010102:	4770      	bx	lr

08010104 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8010104:	b480      	push	{r7}
 8010106:	b085      	sub	sp, #20
 8010108:	af00      	add	r7, sp, #0
 801010a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8010112:	b29b      	uxth	r3, r3
 8010114:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8010116:	68fb      	ldr	r3, [r7, #12]
}
 8010118:	4618      	mov	r0, r3
 801011a:	3714      	adds	r7, #20
 801011c:	46bd      	mov	sp, r7
 801011e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010122:	4770      	bx	lr

08010124 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8010124:	b480      	push	{r7}
 8010126:	b083      	sub	sp, #12
 8010128:	af00      	add	r7, sp, #0
 801012a:	6078      	str	r0, [r7, #4]
 801012c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 801012e:	2300      	movs	r3, #0
}
 8010130:	4618      	mov	r0, r3
 8010132:	370c      	adds	r7, #12
 8010134:	46bd      	mov	sp, r7
 8010136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801013a:	4770      	bx	lr

0801013c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801013c:	b480      	push	{r7}
 801013e:	b08d      	sub	sp, #52	; 0x34
 8010140:	af00      	add	r7, sp, #0
 8010142:	60f8      	str	r0, [r7, #12]
 8010144:	60b9      	str	r1, [r7, #8]
 8010146:	4611      	mov	r1, r2
 8010148:	461a      	mov	r2, r3
 801014a:	460b      	mov	r3, r1
 801014c:	80fb      	strh	r3, [r7, #6]
 801014e:	4613      	mov	r3, r2
 8010150:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8010152:	88bb      	ldrh	r3, [r7, #4]
 8010154:	3301      	adds	r3, #1
 8010156:	085b      	lsrs	r3, r3, #1
 8010158:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801015e:	68bb      	ldr	r3, [r7, #8]
 8010160:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8010162:	88fa      	ldrh	r2, [r7, #6]
 8010164:	69fb      	ldr	r3, [r7, #28]
 8010166:	4413      	add	r3, r2
 8010168:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801016c:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 801016e:	6a3b      	ldr	r3, [r7, #32]
 8010170:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010172:	e01b      	b.n	80101ac <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8010174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010176:	781b      	ldrb	r3, [r3, #0]
 8010178:	61bb      	str	r3, [r7, #24]
    pBuf++;
 801017a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801017c:	3301      	adds	r3, #1
 801017e:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8010180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010182:	781b      	ldrb	r3, [r3, #0]
 8010184:	b29b      	uxth	r3, r3
 8010186:	021b      	lsls	r3, r3, #8
 8010188:	b29b      	uxth	r3, r3
 801018a:	461a      	mov	r2, r3
 801018c:	69bb      	ldr	r3, [r7, #24]
 801018e:	4313      	orrs	r3, r2
 8010190:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8010192:	697b      	ldr	r3, [r7, #20]
 8010194:	b29a      	uxth	r2, r3
 8010196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010198:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 801019a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801019c:	3302      	adds	r3, #2
 801019e:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 80101a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101a2:	3301      	adds	r3, #1
 80101a4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80101a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101a8:	3b01      	subs	r3, #1
 80101aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80101ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d1e0      	bne.n	8010174 <USB_WritePMA+0x38>
  }
}
 80101b2:	bf00      	nop
 80101b4:	3734      	adds	r7, #52	; 0x34
 80101b6:	46bd      	mov	sp, r7
 80101b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101bc:	4770      	bx	lr

080101be <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80101be:	b480      	push	{r7}
 80101c0:	b08b      	sub	sp, #44	; 0x2c
 80101c2:	af00      	add	r7, sp, #0
 80101c4:	60f8      	str	r0, [r7, #12]
 80101c6:	60b9      	str	r1, [r7, #8]
 80101c8:	4611      	mov	r1, r2
 80101ca:	461a      	mov	r2, r3
 80101cc:	460b      	mov	r3, r1
 80101ce:	80fb      	strh	r3, [r7, #6]
 80101d0:	4613      	mov	r3, r2
 80101d2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80101d4:	88bb      	ldrh	r3, [r7, #4]
 80101d6:	085b      	lsrs	r3, r3, #1
 80101d8:	b29b      	uxth	r3, r3
 80101da:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80101e0:	68bb      	ldr	r3, [r7, #8]
 80101e2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80101e4:	88fa      	ldrh	r2, [r7, #6]
 80101e6:	697b      	ldr	r3, [r7, #20]
 80101e8:	4413      	add	r3, r2
 80101ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80101ee:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80101f0:	69bb      	ldr	r3, [r7, #24]
 80101f2:	627b      	str	r3, [r7, #36]	; 0x24
 80101f4:	e018      	b.n	8010228 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80101f6:	6a3b      	ldr	r3, [r7, #32]
 80101f8:	881b      	ldrh	r3, [r3, #0]
 80101fa:	b29b      	uxth	r3, r3
 80101fc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80101fe:	6a3b      	ldr	r3, [r7, #32]
 8010200:	3302      	adds	r3, #2
 8010202:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8010204:	693b      	ldr	r3, [r7, #16]
 8010206:	b2da      	uxtb	r2, r3
 8010208:	69fb      	ldr	r3, [r7, #28]
 801020a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801020c:	69fb      	ldr	r3, [r7, #28]
 801020e:	3301      	adds	r3, #1
 8010210:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8010212:	693b      	ldr	r3, [r7, #16]
 8010214:	0a1b      	lsrs	r3, r3, #8
 8010216:	b2da      	uxtb	r2, r3
 8010218:	69fb      	ldr	r3, [r7, #28]
 801021a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801021c:	69fb      	ldr	r3, [r7, #28]
 801021e:	3301      	adds	r3, #1
 8010220:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8010222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010224:	3b01      	subs	r3, #1
 8010226:	627b      	str	r3, [r7, #36]	; 0x24
 8010228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801022a:	2b00      	cmp	r3, #0
 801022c:	d1e3      	bne.n	80101f6 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 801022e:	88bb      	ldrh	r3, [r7, #4]
 8010230:	f003 0301 	and.w	r3, r3, #1
 8010234:	b29b      	uxth	r3, r3
 8010236:	2b00      	cmp	r3, #0
 8010238:	d007      	beq.n	801024a <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 801023a:	6a3b      	ldr	r3, [r7, #32]
 801023c:	881b      	ldrh	r3, [r3, #0]
 801023e:	b29b      	uxth	r3, r3
 8010240:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8010242:	693b      	ldr	r3, [r7, #16]
 8010244:	b2da      	uxtb	r2, r3
 8010246:	69fb      	ldr	r3, [r7, #28]
 8010248:	701a      	strb	r2, [r3, #0]
  }
}
 801024a:	bf00      	nop
 801024c:	372c      	adds	r7, #44	; 0x2c
 801024e:	46bd      	mov	sp, r7
 8010250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010254:	4770      	bx	lr

08010256 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8010256:	b480      	push	{r7}
 8010258:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 801025a:	bf00      	nop
 801025c:	46bd      	mov	sp, r7
 801025e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010262:	4770      	bx	lr

08010264 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8010264:	b480      	push	{r7}
 8010266:	b085      	sub	sp, #20
 8010268:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801026a:	f3ef 8305 	mrs	r3, IPSR
 801026e:	60bb      	str	r3, [r7, #8]
  return(result);
 8010270:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010272:	2b00      	cmp	r3, #0
 8010274:	d10f      	bne.n	8010296 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010276:	f3ef 8310 	mrs	r3, PRIMASK
 801027a:	607b      	str	r3, [r7, #4]
  return(result);
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	2b00      	cmp	r3, #0
 8010280:	d105      	bne.n	801028e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010282:	f3ef 8311 	mrs	r3, BASEPRI
 8010286:	603b      	str	r3, [r7, #0]
  return(result);
 8010288:	683b      	ldr	r3, [r7, #0]
 801028a:	2b00      	cmp	r3, #0
 801028c:	d007      	beq.n	801029e <osKernelInitialize+0x3a>
 801028e:	4b0e      	ldr	r3, [pc, #56]	; (80102c8 <osKernelInitialize+0x64>)
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	2b02      	cmp	r3, #2
 8010294:	d103      	bne.n	801029e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8010296:	f06f 0305 	mvn.w	r3, #5
 801029a:	60fb      	str	r3, [r7, #12]
 801029c:	e00c      	b.n	80102b8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 801029e:	4b0a      	ldr	r3, [pc, #40]	; (80102c8 <osKernelInitialize+0x64>)
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d105      	bne.n	80102b2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80102a6:	4b08      	ldr	r3, [pc, #32]	; (80102c8 <osKernelInitialize+0x64>)
 80102a8:	2201      	movs	r2, #1
 80102aa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80102ac:	2300      	movs	r3, #0
 80102ae:	60fb      	str	r3, [r7, #12]
 80102b0:	e002      	b.n	80102b8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80102b2:	f04f 33ff 	mov.w	r3, #4294967295
 80102b6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80102b8:	68fb      	ldr	r3, [r7, #12]
}
 80102ba:	4618      	mov	r0, r3
 80102bc:	3714      	adds	r7, #20
 80102be:	46bd      	mov	sp, r7
 80102c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102c4:	4770      	bx	lr
 80102c6:	bf00      	nop
 80102c8:	20000ca0 	.word	0x20000ca0

080102cc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80102cc:	b580      	push	{r7, lr}
 80102ce:	b084      	sub	sp, #16
 80102d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80102d2:	f3ef 8305 	mrs	r3, IPSR
 80102d6:	60bb      	str	r3, [r7, #8]
  return(result);
 80102d8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d10f      	bne.n	80102fe <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80102de:	f3ef 8310 	mrs	r3, PRIMASK
 80102e2:	607b      	str	r3, [r7, #4]
  return(result);
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d105      	bne.n	80102f6 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80102ea:	f3ef 8311 	mrs	r3, BASEPRI
 80102ee:	603b      	str	r3, [r7, #0]
  return(result);
 80102f0:	683b      	ldr	r3, [r7, #0]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d007      	beq.n	8010306 <osKernelStart+0x3a>
 80102f6:	4b0f      	ldr	r3, [pc, #60]	; (8010334 <osKernelStart+0x68>)
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	2b02      	cmp	r3, #2
 80102fc:	d103      	bne.n	8010306 <osKernelStart+0x3a>
    stat = osErrorISR;
 80102fe:	f06f 0305 	mvn.w	r3, #5
 8010302:	60fb      	str	r3, [r7, #12]
 8010304:	e010      	b.n	8010328 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8010306:	4b0b      	ldr	r3, [pc, #44]	; (8010334 <osKernelStart+0x68>)
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	2b01      	cmp	r3, #1
 801030c:	d109      	bne.n	8010322 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801030e:	f7ff ffa2 	bl	8010256 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8010312:	4b08      	ldr	r3, [pc, #32]	; (8010334 <osKernelStart+0x68>)
 8010314:	2202      	movs	r2, #2
 8010316:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8010318:	f002 ff0c 	bl	8013134 <vTaskStartScheduler>
      stat = osOK;
 801031c:	2300      	movs	r3, #0
 801031e:	60fb      	str	r3, [r7, #12]
 8010320:	e002      	b.n	8010328 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8010322:	f04f 33ff 	mov.w	r3, #4294967295
 8010326:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8010328:	68fb      	ldr	r3, [r7, #12]
}
 801032a:	4618      	mov	r0, r3
 801032c:	3710      	adds	r7, #16
 801032e:	46bd      	mov	sp, r7
 8010330:	bd80      	pop	{r7, pc}
 8010332:	bf00      	nop
 8010334:	20000ca0 	.word	0x20000ca0

08010338 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8010338:	b580      	push	{r7, lr}
 801033a:	b090      	sub	sp, #64	; 0x40
 801033c:	af04      	add	r7, sp, #16
 801033e:	60f8      	str	r0, [r7, #12]
 8010340:	60b9      	str	r1, [r7, #8]
 8010342:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8010344:	2300      	movs	r3, #0
 8010346:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010348:	f3ef 8305 	mrs	r3, IPSR
 801034c:	61fb      	str	r3, [r7, #28]
  return(result);
 801034e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8010350:	2b00      	cmp	r3, #0
 8010352:	f040 8090 	bne.w	8010476 <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010356:	f3ef 8310 	mrs	r3, PRIMASK
 801035a:	61bb      	str	r3, [r7, #24]
  return(result);
 801035c:	69bb      	ldr	r3, [r7, #24]
 801035e:	2b00      	cmp	r3, #0
 8010360:	d105      	bne.n	801036e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010362:	f3ef 8311 	mrs	r3, BASEPRI
 8010366:	617b      	str	r3, [r7, #20]
  return(result);
 8010368:	697b      	ldr	r3, [r7, #20]
 801036a:	2b00      	cmp	r3, #0
 801036c:	d003      	beq.n	8010376 <osThreadNew+0x3e>
 801036e:	4b44      	ldr	r3, [pc, #272]	; (8010480 <osThreadNew+0x148>)
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	2b02      	cmp	r3, #2
 8010374:	d07f      	beq.n	8010476 <osThreadNew+0x13e>
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	2b00      	cmp	r3, #0
 801037a:	d07c      	beq.n	8010476 <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 801037c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010380:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8010382:	2318      	movs	r3, #24
 8010384:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8010386:	2300      	movs	r3, #0
 8010388:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 801038a:	f04f 33ff 	mov.w	r3, #4294967295
 801038e:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	2b00      	cmp	r3, #0
 8010394:	d045      	beq.n	8010422 <osThreadNew+0xea>
      if (attr->name != NULL) {
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	2b00      	cmp	r3, #0
 801039c:	d002      	beq.n	80103a4 <osThreadNew+0x6c>
        name = attr->name;
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	699b      	ldr	r3, [r3, #24]
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d002      	beq.n	80103b2 <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	699b      	ldr	r3, [r3, #24]
 80103b0:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80103b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d008      	beq.n	80103ca <osThreadNew+0x92>
 80103b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103ba:	2b38      	cmp	r3, #56	; 0x38
 80103bc:	d805      	bhi.n	80103ca <osThreadNew+0x92>
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	685b      	ldr	r3, [r3, #4]
 80103c2:	f003 0301 	and.w	r3, r3, #1
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d001      	beq.n	80103ce <osThreadNew+0x96>
        return (NULL);
 80103ca:	2300      	movs	r3, #0
 80103cc:	e054      	b.n	8010478 <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	695b      	ldr	r3, [r3, #20]
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d003      	beq.n	80103de <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	695b      	ldr	r3, [r3, #20]
 80103da:	089b      	lsrs	r3, r3, #2
 80103dc:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	689b      	ldr	r3, [r3, #8]
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d00e      	beq.n	8010404 <osThreadNew+0xcc>
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	68db      	ldr	r3, [r3, #12]
 80103ea:	2b63      	cmp	r3, #99	; 0x63
 80103ec:	d90a      	bls.n	8010404 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d006      	beq.n	8010404 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	695b      	ldr	r3, [r3, #20]
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d002      	beq.n	8010404 <osThreadNew+0xcc>
        mem = 1;
 80103fe:	2301      	movs	r3, #1
 8010400:	623b      	str	r3, [r7, #32]
 8010402:	e010      	b.n	8010426 <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	689b      	ldr	r3, [r3, #8]
 8010408:	2b00      	cmp	r3, #0
 801040a:	d10c      	bne.n	8010426 <osThreadNew+0xee>
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	68db      	ldr	r3, [r3, #12]
 8010410:	2b00      	cmp	r3, #0
 8010412:	d108      	bne.n	8010426 <osThreadNew+0xee>
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	691b      	ldr	r3, [r3, #16]
 8010418:	2b00      	cmp	r3, #0
 801041a:	d104      	bne.n	8010426 <osThreadNew+0xee>
          mem = 0;
 801041c:	2300      	movs	r3, #0
 801041e:	623b      	str	r3, [r7, #32]
 8010420:	e001      	b.n	8010426 <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 8010422:	2300      	movs	r3, #0
 8010424:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8010426:	6a3b      	ldr	r3, [r7, #32]
 8010428:	2b01      	cmp	r3, #1
 801042a:	d110      	bne.n	801044e <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8010430:	687a      	ldr	r2, [r7, #4]
 8010432:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010434:	9202      	str	r2, [sp, #8]
 8010436:	9301      	str	r3, [sp, #4]
 8010438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801043a:	9300      	str	r3, [sp, #0]
 801043c:	68bb      	ldr	r3, [r7, #8]
 801043e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010440:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010442:	68f8      	ldr	r0, [r7, #12]
 8010444:	f002 fc9e 	bl	8012d84 <xTaskCreateStatic>
 8010448:	4603      	mov	r3, r0
 801044a:	613b      	str	r3, [r7, #16]
 801044c:	e013      	b.n	8010476 <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 801044e:	6a3b      	ldr	r3, [r7, #32]
 8010450:	2b00      	cmp	r3, #0
 8010452:	d110      	bne.n	8010476 <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8010454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010456:	b29a      	uxth	r2, r3
 8010458:	f107 0310 	add.w	r3, r7, #16
 801045c:	9301      	str	r3, [sp, #4]
 801045e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010460:	9300      	str	r3, [sp, #0]
 8010462:	68bb      	ldr	r3, [r7, #8]
 8010464:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010466:	68f8      	ldr	r0, [r7, #12]
 8010468:	f002 fce6 	bl	8012e38 <xTaskCreate>
 801046c:	4603      	mov	r3, r0
 801046e:	2b01      	cmp	r3, #1
 8010470:	d001      	beq.n	8010476 <osThreadNew+0x13e>
          hTask = NULL;
 8010472:	2300      	movs	r3, #0
 8010474:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8010476:	693b      	ldr	r3, [r7, #16]
}
 8010478:	4618      	mov	r0, r3
 801047a:	3730      	adds	r7, #48	; 0x30
 801047c:	46bd      	mov	sp, r7
 801047e:	bd80      	pop	{r7, pc}
 8010480:	20000ca0 	.word	0x20000ca0

08010484 <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8010484:	b580      	push	{r7, lr}
 8010486:	b08a      	sub	sp, #40	; 0x28
 8010488:	af02      	add	r7, sp, #8
 801048a:	6078      	str	r0, [r7, #4]
 801048c:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 8010492:	69fb      	ldr	r3, [r7, #28]
 8010494:	2b00      	cmp	r3, #0
 8010496:	d002      	beq.n	801049e <osThreadFlagsSet+0x1a>
 8010498:	683b      	ldr	r3, [r7, #0]
 801049a:	2b00      	cmp	r3, #0
 801049c:	da03      	bge.n	80104a6 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 801049e:	f06f 0303 	mvn.w	r3, #3
 80104a2:	60fb      	str	r3, [r7, #12]
 80104a4:	e046      	b.n	8010534 <osThreadFlagsSet+0xb0>
  }
  else {
    rflags = (uint32_t)osError;
 80104a6:	f04f 33ff 	mov.w	r3, #4294967295
 80104aa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80104ac:	f3ef 8305 	mrs	r3, IPSR
 80104b0:	61bb      	str	r3, [r7, #24]
  return(result);
 80104b2:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d10f      	bne.n	80104d8 <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80104b8:	f3ef 8310 	mrs	r3, PRIMASK
 80104bc:	617b      	str	r3, [r7, #20]
  return(result);
 80104be:	697b      	ldr	r3, [r7, #20]
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d105      	bne.n	80104d0 <osThreadFlagsSet+0x4c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80104c4:	f3ef 8311 	mrs	r3, BASEPRI
 80104c8:	613b      	str	r3, [r7, #16]
  return(result);
 80104ca:	693b      	ldr	r3, [r7, #16]
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d024      	beq.n	801051a <osThreadFlagsSet+0x96>
 80104d0:	4b1b      	ldr	r3, [pc, #108]	; (8010540 <osThreadFlagsSet+0xbc>)
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	2b02      	cmp	r3, #2
 80104d6:	d120      	bne.n	801051a <osThreadFlagsSet+0x96>
      yield = pdFALSE;
 80104d8:	2300      	movs	r3, #0
 80104da:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 80104dc:	f107 0308 	add.w	r3, r7, #8
 80104e0:	9300      	str	r3, [sp, #0]
 80104e2:	2300      	movs	r3, #0
 80104e4:	2201      	movs	r2, #1
 80104e6:	6839      	ldr	r1, [r7, #0]
 80104e8:	69f8      	ldr	r0, [r7, #28]
 80104ea:	f003 fd95 	bl	8014018 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 80104ee:	f107 020c 	add.w	r2, r7, #12
 80104f2:	2300      	movs	r3, #0
 80104f4:	9300      	str	r3, [sp, #0]
 80104f6:	4613      	mov	r3, r2
 80104f8:	2200      	movs	r2, #0
 80104fa:	2100      	movs	r1, #0
 80104fc:	69f8      	ldr	r0, [r7, #28]
 80104fe:	f003 fd8b 	bl	8014018 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8010502:	68bb      	ldr	r3, [r7, #8]
 8010504:	2b00      	cmp	r3, #0
 8010506:	d015      	beq.n	8010534 <osThreadFlagsSet+0xb0>
 8010508:	4b0e      	ldr	r3, [pc, #56]	; (8010544 <osThreadFlagsSet+0xc0>)
 801050a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801050e:	601a      	str	r2, [r3, #0]
 8010510:	f3bf 8f4f 	dsb	sy
 8010514:	f3bf 8f6f 	isb	sy
 8010518:	e00c      	b.n	8010534 <osThreadFlagsSet+0xb0>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 801051a:	2300      	movs	r3, #0
 801051c:	2201      	movs	r2, #1
 801051e:	6839      	ldr	r1, [r7, #0]
 8010520:	69f8      	ldr	r0, [r7, #28]
 8010522:	f003 fcc3 	bl	8013eac <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8010526:	f107 030c 	add.w	r3, r7, #12
 801052a:	2200      	movs	r2, #0
 801052c:	2100      	movs	r1, #0
 801052e:	69f8      	ldr	r0, [r7, #28]
 8010530:	f003 fcbc 	bl	8013eac <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8010534:	68fb      	ldr	r3, [r7, #12]
}
 8010536:	4618      	mov	r0, r3
 8010538:	3720      	adds	r7, #32
 801053a:	46bd      	mov	sp, r7
 801053c:	bd80      	pop	{r7, pc}
 801053e:	bf00      	nop
 8010540:	20000ca0 	.word	0x20000ca0
 8010544:	e000ed04 	.word	0xe000ed04

08010548 <osThreadFlagsClear>:

uint32_t osThreadFlagsClear (uint32_t flags) {
 8010548:	b580      	push	{r7, lr}
 801054a:	b088      	sub	sp, #32
 801054c:	af00      	add	r7, sp, #0
 801054e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010550:	f3ef 8305 	mrs	r3, IPSR
 8010554:	617b      	str	r3, [r7, #20]
  return(result);
 8010556:	697b      	ldr	r3, [r7, #20]
  TaskHandle_t hTask;
  uint32_t rflags, cflags;

  if (IS_IRQ()) {
 8010558:	2b00      	cmp	r3, #0
 801055a:	d10f      	bne.n	801057c <osThreadFlagsClear+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801055c:	f3ef 8310 	mrs	r3, PRIMASK
 8010560:	613b      	str	r3, [r7, #16]
  return(result);
 8010562:	693b      	ldr	r3, [r7, #16]
 8010564:	2b00      	cmp	r3, #0
 8010566:	d105      	bne.n	8010574 <osThreadFlagsClear+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010568:	f3ef 8311 	mrs	r3, BASEPRI
 801056c:	60fb      	str	r3, [r7, #12]
  return(result);
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	2b00      	cmp	r3, #0
 8010572:	d007      	beq.n	8010584 <osThreadFlagsClear+0x3c>
 8010574:	4b1b      	ldr	r3, [pc, #108]	; (80105e4 <osThreadFlagsClear+0x9c>)
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	2b02      	cmp	r3, #2
 801057a:	d103      	bne.n	8010584 <osThreadFlagsClear+0x3c>
    rflags = (uint32_t)osErrorISR;
 801057c:	f06f 0305 	mvn.w	r3, #5
 8010580:	61fb      	str	r3, [r7, #28]
 8010582:	e02a      	b.n	80105da <osThreadFlagsClear+0x92>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	2b00      	cmp	r3, #0
 8010588:	da03      	bge.n	8010592 <osThreadFlagsClear+0x4a>
    rflags = (uint32_t)osErrorParameter;
 801058a:	f06f 0303 	mvn.w	r3, #3
 801058e:	61fb      	str	r3, [r7, #28]
 8010590:	e023      	b.n	80105da <osThreadFlagsClear+0x92>
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 8010592:	f003 fa9b 	bl	8013acc <xTaskGetCurrentTaskHandle>
 8010596:	61b8      	str	r0, [r7, #24]

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &cflags) == pdPASS) {
 8010598:	f107 0308 	add.w	r3, r7, #8
 801059c:	2200      	movs	r2, #0
 801059e:	2100      	movs	r1, #0
 80105a0:	69b8      	ldr	r0, [r7, #24]
 80105a2:	f003 fc83 	bl	8013eac <xTaskGenericNotify>
 80105a6:	4603      	mov	r3, r0
 80105a8:	2b01      	cmp	r3, #1
 80105aa:	d113      	bne.n	80105d4 <osThreadFlagsClear+0x8c>
      rflags = cflags;
 80105ac:	68bb      	ldr	r3, [r7, #8]
 80105ae:	61fb      	str	r3, [r7, #28]
      cflags &= ~flags;
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	43da      	mvns	r2, r3
 80105b4:	68bb      	ldr	r3, [r7, #8]
 80105b6:	4013      	ands	r3, r2
 80105b8:	60bb      	str	r3, [r7, #8]

      if (xTaskNotify (hTask, cflags, eSetValueWithOverwrite) != pdPASS) {
 80105ba:	68b9      	ldr	r1, [r7, #8]
 80105bc:	2300      	movs	r3, #0
 80105be:	2203      	movs	r2, #3
 80105c0:	69b8      	ldr	r0, [r7, #24]
 80105c2:	f003 fc73 	bl	8013eac <xTaskGenericNotify>
 80105c6:	4603      	mov	r3, r0
 80105c8:	2b01      	cmp	r3, #1
 80105ca:	d006      	beq.n	80105da <osThreadFlagsClear+0x92>
        rflags = (uint32_t)osError;
 80105cc:	f04f 33ff 	mov.w	r3, #4294967295
 80105d0:	61fb      	str	r3, [r7, #28]
 80105d2:	e002      	b.n	80105da <osThreadFlagsClear+0x92>
      }
    }
    else {
      rflags = (uint32_t)osError;
 80105d4:	f04f 33ff 	mov.w	r3, #4294967295
 80105d8:	61fb      	str	r3, [r7, #28]
    }
  }

  /* Return flags before clearing */
  return (rflags);
 80105da:	69fb      	ldr	r3, [r7, #28]
}
 80105dc:	4618      	mov	r0, r3
 80105de:	3720      	adds	r7, #32
 80105e0:	46bd      	mov	sp, r7
 80105e2:	bd80      	pop	{r7, pc}
 80105e4:	20000ca0 	.word	0x20000ca0

080105e8 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 80105e8:	b580      	push	{r7, lr}
 80105ea:	b08e      	sub	sp, #56	; 0x38
 80105ec:	af00      	add	r7, sp, #0
 80105ee:	60f8      	str	r0, [r7, #12]
 80105f0:	60b9      	str	r1, [r7, #8]
 80105f2:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80105f4:	f3ef 8305 	mrs	r3, IPSR
 80105f8:	61fb      	str	r3, [r7, #28]
  return(result);
 80105fa:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d10f      	bne.n	8010620 <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010600:	f3ef 8310 	mrs	r3, PRIMASK
 8010604:	61bb      	str	r3, [r7, #24]
  return(result);
 8010606:	69bb      	ldr	r3, [r7, #24]
 8010608:	2b00      	cmp	r3, #0
 801060a:	d105      	bne.n	8010618 <osThreadFlagsWait+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801060c:	f3ef 8311 	mrs	r3, BASEPRI
 8010610:	617b      	str	r3, [r7, #20]
  return(result);
 8010612:	697b      	ldr	r3, [r7, #20]
 8010614:	2b00      	cmp	r3, #0
 8010616:	d007      	beq.n	8010628 <osThreadFlagsWait+0x40>
 8010618:	4b3c      	ldr	r3, [pc, #240]	; (801070c <osThreadFlagsWait+0x124>)
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	2b02      	cmp	r3, #2
 801061e:	d103      	bne.n	8010628 <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 8010620:	f06f 0305 	mvn.w	r3, #5
 8010624:	637b      	str	r3, [r7, #52]	; 0x34
 8010626:	e06b      	b.n	8010700 <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	2b00      	cmp	r3, #0
 801062c:	da03      	bge.n	8010636 <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 801062e:	f06f 0303 	mvn.w	r3, #3
 8010632:	637b      	str	r3, [r7, #52]	; 0x34
 8010634:	e064      	b.n	8010700 <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8010636:	68bb      	ldr	r3, [r7, #8]
 8010638:	f003 0302 	and.w	r3, r3, #2
 801063c:	2b00      	cmp	r3, #0
 801063e:	d002      	beq.n	8010646 <osThreadFlagsWait+0x5e>
      clear = 0U;
 8010640:	2300      	movs	r3, #0
 8010642:	633b      	str	r3, [r7, #48]	; 0x30
 8010644:	e001      	b.n	801064a <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 801064a:	2300      	movs	r3, #0
 801064c:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 8010652:	f002 feb7 	bl	80133c4 <xTaskGetTickCount>
 8010656:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8010658:	f107 0210 	add.w	r2, r7, #16
 801065c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801065e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010660:	2000      	movs	r0, #0
 8010662:	f003 fbc9 	bl	8013df8 <xTaskNotifyWait>
 8010666:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 8010668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801066a:	2b01      	cmp	r3, #1
 801066c:	d137      	bne.n	80106de <osThreadFlagsWait+0xf6>
        rflags &= flags;
 801066e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	4013      	ands	r3, r2
 8010674:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 8010676:	693b      	ldr	r3, [r7, #16]
 8010678:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801067a:	4313      	orrs	r3, r2
 801067c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 801067e:	68bb      	ldr	r3, [r7, #8]
 8010680:	f003 0301 	and.w	r3, r3, #1
 8010684:	2b00      	cmp	r3, #0
 8010686:	d00c      	beq.n	80106a2 <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 8010688:	68fa      	ldr	r2, [r7, #12]
 801068a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801068c:	4013      	ands	r3, r2
 801068e:	68fa      	ldr	r2, [r7, #12]
 8010690:	429a      	cmp	r2, r3
 8010692:	d032      	beq.n	80106fa <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	2b00      	cmp	r3, #0
 8010698:	d10f      	bne.n	80106ba <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 801069a:	f06f 0302 	mvn.w	r3, #2
 801069e:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 80106a0:	e02e      	b.n	8010700 <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 80106a2:	68fa      	ldr	r2, [r7, #12]
 80106a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106a6:	4013      	ands	r3, r2
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d128      	bne.n	80106fe <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d103      	bne.n	80106ba <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 80106b2:	f06f 0302 	mvn.w	r3, #2
 80106b6:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 80106b8:	e022      	b.n	8010700 <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 80106ba:	f002 fe83 	bl	80133c4 <xTaskGetTickCount>
 80106be:	4602      	mov	r2, r0
 80106c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106c2:	1ad3      	subs	r3, r2, r3
 80106c4:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 80106c6:	6a3a      	ldr	r2, [r7, #32]
 80106c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106ca:	429a      	cmp	r2, r3
 80106cc:	d902      	bls.n	80106d4 <osThreadFlagsWait+0xec>
          tout  = 0;
 80106ce:	2300      	movs	r3, #0
 80106d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80106d2:	e00e      	b.n	80106f2 <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 80106d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80106d6:	6a3b      	ldr	r3, [r7, #32]
 80106d8:	1ad3      	subs	r3, r2, r3
 80106da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80106dc:	e009      	b.n	80106f2 <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d103      	bne.n	80106ec <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 80106e4:	f06f 0302 	mvn.w	r3, #2
 80106e8:	637b      	str	r3, [r7, #52]	; 0x34
 80106ea:	e002      	b.n	80106f2 <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 80106ec:	f06f 0301 	mvn.w	r3, #1
 80106f0:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 80106f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d1af      	bne.n	8010658 <osThreadFlagsWait+0x70>
 80106f8:	e002      	b.n	8010700 <osThreadFlagsWait+0x118>
            break;
 80106fa:	bf00      	nop
 80106fc:	e000      	b.n	8010700 <osThreadFlagsWait+0x118>
            break;
 80106fe:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8010700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010702:	4618      	mov	r0, r3
 8010704:	3738      	adds	r7, #56	; 0x38
 8010706:	46bd      	mov	sp, r7
 8010708:	bd80      	pop	{r7, pc}
 801070a:	bf00      	nop
 801070c:	20000ca0 	.word	0x20000ca0

08010710 <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 8010710:	b580      	push	{r7, lr}
 8010712:	b086      	sub	sp, #24
 8010714:	af00      	add	r7, sp, #0
 8010716:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010718:	f3ef 8305 	mrs	r3, IPSR
 801071c:	613b      	str	r3, [r7, #16]
  return(result);
 801071e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010720:	2b00      	cmp	r3, #0
 8010722:	d10f      	bne.n	8010744 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010724:	f3ef 8310 	mrs	r3, PRIMASK
 8010728:	60fb      	str	r3, [r7, #12]
  return(result);
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	2b00      	cmp	r3, #0
 801072e:	d105      	bne.n	801073c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010730:	f3ef 8311 	mrs	r3, BASEPRI
 8010734:	60bb      	str	r3, [r7, #8]
  return(result);
 8010736:	68bb      	ldr	r3, [r7, #8]
 8010738:	2b00      	cmp	r3, #0
 801073a:	d007      	beq.n	801074c <osDelay+0x3c>
 801073c:	4b0a      	ldr	r3, [pc, #40]	; (8010768 <osDelay+0x58>)
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	2b02      	cmp	r3, #2
 8010742:	d103      	bne.n	801074c <osDelay+0x3c>
    stat = osErrorISR;
 8010744:	f06f 0305 	mvn.w	r3, #5
 8010748:	617b      	str	r3, [r7, #20]
 801074a:	e007      	b.n	801075c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 801074c:	2300      	movs	r3, #0
 801074e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	2b00      	cmp	r3, #0
 8010754:	d002      	beq.n	801075c <osDelay+0x4c>
      vTaskDelay(ticks);
 8010756:	6878      	ldr	r0, [r7, #4]
 8010758:	f002 fcb8 	bl	80130cc <vTaskDelay>
    }
  }

  return (stat);
 801075c:	697b      	ldr	r3, [r7, #20]
}
 801075e:	4618      	mov	r0, r3
 8010760:	3718      	adds	r7, #24
 8010762:	46bd      	mov	sp, r7
 8010764:	bd80      	pop	{r7, pc}
 8010766:	bf00      	nop
 8010768:	20000ca0 	.word	0x20000ca0

0801076c <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 801076c:	b580      	push	{r7, lr}
 801076e:	b084      	sub	sp, #16
 8010770:	af00      	add	r7, sp, #0
 8010772:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8010774:	6878      	ldr	r0, [r7, #4]
 8010776:	f004 f981 	bl	8014a7c <pvTimerGetTimerID>
 801077a:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	2b00      	cmp	r3, #0
 8010780:	d005      	beq.n	801078e <TimerCallback+0x22>
    callb->func (callb->arg);
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	68fa      	ldr	r2, [r7, #12]
 8010788:	6852      	ldr	r2, [r2, #4]
 801078a:	4610      	mov	r0, r2
 801078c:	4798      	blx	r3
  }
}
 801078e:	bf00      	nop
 8010790:	3710      	adds	r7, #16
 8010792:	46bd      	mov	sp, r7
 8010794:	bd80      	pop	{r7, pc}
	...

08010798 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8010798:	b580      	push	{r7, lr}
 801079a:	b08e      	sub	sp, #56	; 0x38
 801079c:	af02      	add	r7, sp, #8
 801079e:	60f8      	str	r0, [r7, #12]
 80107a0:	607a      	str	r2, [r7, #4]
 80107a2:	603b      	str	r3, [r7, #0]
 80107a4:	460b      	mov	r3, r1
 80107a6:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 80107a8:	2300      	movs	r3, #0
 80107aa:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80107ac:	f3ef 8305 	mrs	r3, IPSR
 80107b0:	61bb      	str	r3, [r7, #24]
  return(result);
 80107b2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d16a      	bne.n	801088e <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80107b8:	f3ef 8310 	mrs	r3, PRIMASK
 80107bc:	617b      	str	r3, [r7, #20]
  return(result);
 80107be:	697b      	ldr	r3, [r7, #20]
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d105      	bne.n	80107d0 <osTimerNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80107c4:	f3ef 8311 	mrs	r3, BASEPRI
 80107c8:	613b      	str	r3, [r7, #16]
  return(result);
 80107ca:	693b      	ldr	r3, [r7, #16]
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d003      	beq.n	80107d8 <osTimerNew+0x40>
 80107d0:	4b31      	ldr	r3, [pc, #196]	; (8010898 <osTimerNew+0x100>)
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	2b02      	cmp	r3, #2
 80107d6:	d05a      	beq.n	801088e <osTimerNew+0xf6>
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d057      	beq.n	801088e <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 80107de:	2008      	movs	r0, #8
 80107e0:	f000 fd60 	bl	80112a4 <pvPortMalloc>
 80107e4:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 80107e6:	69fb      	ldr	r3, [r7, #28]
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d050      	beq.n	801088e <osTimerNew+0xf6>
      callb->func = func;
 80107ec:	69fb      	ldr	r3, [r7, #28]
 80107ee:	68fa      	ldr	r2, [r7, #12]
 80107f0:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 80107f2:	69fb      	ldr	r3, [r7, #28]
 80107f4:	687a      	ldr	r2, [r7, #4]
 80107f6:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 80107f8:	7afb      	ldrb	r3, [r7, #11]
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d102      	bne.n	8010804 <osTimerNew+0x6c>
        reload = pdFALSE;
 80107fe:	2300      	movs	r3, #0
 8010800:	627b      	str	r3, [r7, #36]	; 0x24
 8010802:	e001      	b.n	8010808 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 8010804:	2301      	movs	r3, #1
 8010806:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 8010808:	f04f 33ff 	mov.w	r3, #4294967295
 801080c:	623b      	str	r3, [r7, #32]
      name = NULL;
 801080e:	2300      	movs	r3, #0
 8010810:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 8010812:	683b      	ldr	r3, [r7, #0]
 8010814:	2b00      	cmp	r3, #0
 8010816:	d01c      	beq.n	8010852 <osTimerNew+0xba>
        if (attr->name != NULL) {
 8010818:	683b      	ldr	r3, [r7, #0]
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	2b00      	cmp	r3, #0
 801081e:	d002      	beq.n	8010826 <osTimerNew+0x8e>
          name = attr->name;
 8010820:	683b      	ldr	r3, [r7, #0]
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8010826:	683b      	ldr	r3, [r7, #0]
 8010828:	689b      	ldr	r3, [r3, #8]
 801082a:	2b00      	cmp	r3, #0
 801082c:	d006      	beq.n	801083c <osTimerNew+0xa4>
 801082e:	683b      	ldr	r3, [r7, #0]
 8010830:	68db      	ldr	r3, [r3, #12]
 8010832:	2b2b      	cmp	r3, #43	; 0x2b
 8010834:	d902      	bls.n	801083c <osTimerNew+0xa4>
          mem = 1;
 8010836:	2301      	movs	r3, #1
 8010838:	623b      	str	r3, [r7, #32]
 801083a:	e00c      	b.n	8010856 <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801083c:	683b      	ldr	r3, [r7, #0]
 801083e:	689b      	ldr	r3, [r3, #8]
 8010840:	2b00      	cmp	r3, #0
 8010842:	d108      	bne.n	8010856 <osTimerNew+0xbe>
 8010844:	683b      	ldr	r3, [r7, #0]
 8010846:	68db      	ldr	r3, [r3, #12]
 8010848:	2b00      	cmp	r3, #0
 801084a:	d104      	bne.n	8010856 <osTimerNew+0xbe>
            mem = 0;
 801084c:	2300      	movs	r3, #0
 801084e:	623b      	str	r3, [r7, #32]
 8010850:	e001      	b.n	8010856 <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 8010852:	2300      	movs	r3, #0
 8010854:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 8010856:	6a3b      	ldr	r3, [r7, #32]
 8010858:	2b01      	cmp	r3, #1
 801085a:	d10c      	bne.n	8010876 <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 801085c:	683b      	ldr	r3, [r7, #0]
 801085e:	689b      	ldr	r3, [r3, #8]
 8010860:	9301      	str	r3, [sp, #4]
 8010862:	4b0e      	ldr	r3, [pc, #56]	; (801089c <osTimerNew+0x104>)
 8010864:	9300      	str	r3, [sp, #0]
 8010866:	69fb      	ldr	r3, [r7, #28]
 8010868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801086a:	2101      	movs	r1, #1
 801086c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801086e:	f003 fd68 	bl	8014342 <xTimerCreateStatic>
 8010872:	62b8      	str	r0, [r7, #40]	; 0x28
 8010874:	e00b      	b.n	801088e <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 8010876:	6a3b      	ldr	r3, [r7, #32]
 8010878:	2b00      	cmp	r3, #0
 801087a:	d108      	bne.n	801088e <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 801087c:	4b07      	ldr	r3, [pc, #28]	; (801089c <osTimerNew+0x104>)
 801087e:	9300      	str	r3, [sp, #0]
 8010880:	69fb      	ldr	r3, [r7, #28]
 8010882:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010884:	2101      	movs	r1, #1
 8010886:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010888:	f003 fd3a 	bl	8014300 <xTimerCreate>
 801088c:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 801088e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8010890:	4618      	mov	r0, r3
 8010892:	3730      	adds	r7, #48	; 0x30
 8010894:	46bd      	mov	sp, r7
 8010896:	bd80      	pop	{r7, pc}
 8010898:	20000ca0 	.word	0x20000ca0
 801089c:	0801076d 	.word	0x0801076d

080108a0 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 80108a0:	b580      	push	{r7, lr}
 80108a2:	b08a      	sub	sp, #40	; 0x28
 80108a4:	af02      	add	r7, sp, #8
 80108a6:	6078      	str	r0, [r7, #4]
 80108a8:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80108ae:	f3ef 8305 	mrs	r3, IPSR
 80108b2:	617b      	str	r3, [r7, #20]
  return(result);
 80108b4:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d10f      	bne.n	80108da <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80108ba:	f3ef 8310 	mrs	r3, PRIMASK
 80108be:	613b      	str	r3, [r7, #16]
  return(result);
 80108c0:	693b      	ldr	r3, [r7, #16]
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d105      	bne.n	80108d2 <osTimerStart+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80108c6:	f3ef 8311 	mrs	r3, BASEPRI
 80108ca:	60fb      	str	r3, [r7, #12]
  return(result);
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d007      	beq.n	80108e2 <osTimerStart+0x42>
 80108d2:	4b12      	ldr	r3, [pc, #72]	; (801091c <osTimerStart+0x7c>)
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	2b02      	cmp	r3, #2
 80108d8:	d103      	bne.n	80108e2 <osTimerStart+0x42>
    stat = osErrorISR;
 80108da:	f06f 0305 	mvn.w	r3, #5
 80108de:	61fb      	str	r3, [r7, #28]
 80108e0:	e017      	b.n	8010912 <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 80108e2:	69bb      	ldr	r3, [r7, #24]
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d103      	bne.n	80108f0 <osTimerStart+0x50>
    stat = osErrorParameter;
 80108e8:	f06f 0303 	mvn.w	r3, #3
 80108ec:	61fb      	str	r3, [r7, #28]
 80108ee:	e010      	b.n	8010912 <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 80108f0:	2300      	movs	r3, #0
 80108f2:	9300      	str	r3, [sp, #0]
 80108f4:	2300      	movs	r3, #0
 80108f6:	683a      	ldr	r2, [r7, #0]
 80108f8:	2104      	movs	r1, #4
 80108fa:	69b8      	ldr	r0, [r7, #24]
 80108fc:	f003 fd98 	bl	8014430 <xTimerGenericCommand>
 8010900:	4603      	mov	r3, r0
 8010902:	2b01      	cmp	r3, #1
 8010904:	d102      	bne.n	801090c <osTimerStart+0x6c>
      stat = osOK;
 8010906:	2300      	movs	r3, #0
 8010908:	61fb      	str	r3, [r7, #28]
 801090a:	e002      	b.n	8010912 <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 801090c:	f06f 0302 	mvn.w	r3, #2
 8010910:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 8010912:	69fb      	ldr	r3, [r7, #28]
}
 8010914:	4618      	mov	r0, r3
 8010916:	3720      	adds	r7, #32
 8010918:	46bd      	mov	sp, r7
 801091a:	bd80      	pop	{r7, pc}
 801091c:	20000ca0 	.word	0x20000ca0

08010920 <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 8010920:	b580      	push	{r7, lr}
 8010922:	b08a      	sub	sp, #40	; 0x28
 8010924:	af02      	add	r7, sp, #8
 8010926:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801092c:	f3ef 8305 	mrs	r3, IPSR
 8010930:	617b      	str	r3, [r7, #20]
  return(result);
 8010932:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010934:	2b00      	cmp	r3, #0
 8010936:	d10f      	bne.n	8010958 <osTimerStop+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010938:	f3ef 8310 	mrs	r3, PRIMASK
 801093c:	613b      	str	r3, [r7, #16]
  return(result);
 801093e:	693b      	ldr	r3, [r7, #16]
 8010940:	2b00      	cmp	r3, #0
 8010942:	d105      	bne.n	8010950 <osTimerStop+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010944:	f3ef 8311 	mrs	r3, BASEPRI
 8010948:	60fb      	str	r3, [r7, #12]
  return(result);
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	2b00      	cmp	r3, #0
 801094e:	d007      	beq.n	8010960 <osTimerStop+0x40>
 8010950:	4b17      	ldr	r3, [pc, #92]	; (80109b0 <osTimerStop+0x90>)
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	2b02      	cmp	r3, #2
 8010956:	d103      	bne.n	8010960 <osTimerStop+0x40>
    stat = osErrorISR;
 8010958:	f06f 0305 	mvn.w	r3, #5
 801095c:	61fb      	str	r3, [r7, #28]
 801095e:	e021      	b.n	80109a4 <osTimerStop+0x84>
  }
  else if (hTimer == NULL) {
 8010960:	69bb      	ldr	r3, [r7, #24]
 8010962:	2b00      	cmp	r3, #0
 8010964:	d103      	bne.n	801096e <osTimerStop+0x4e>
    stat = osErrorParameter;
 8010966:	f06f 0303 	mvn.w	r3, #3
 801096a:	61fb      	str	r3, [r7, #28]
 801096c:	e01a      	b.n	80109a4 <osTimerStop+0x84>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 801096e:	69b8      	ldr	r0, [r7, #24]
 8010970:	f004 f85c 	bl	8014a2c <xTimerIsTimerActive>
 8010974:	4603      	mov	r3, r0
 8010976:	2b00      	cmp	r3, #0
 8010978:	d103      	bne.n	8010982 <osTimerStop+0x62>
      stat = osErrorResource;
 801097a:	f06f 0302 	mvn.w	r3, #2
 801097e:	61fb      	str	r3, [r7, #28]
 8010980:	e010      	b.n	80109a4 <osTimerStop+0x84>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 8010982:	2300      	movs	r3, #0
 8010984:	9300      	str	r3, [sp, #0]
 8010986:	2300      	movs	r3, #0
 8010988:	2200      	movs	r2, #0
 801098a:	2103      	movs	r1, #3
 801098c:	69b8      	ldr	r0, [r7, #24]
 801098e:	f003 fd4f 	bl	8014430 <xTimerGenericCommand>
 8010992:	4603      	mov	r3, r0
 8010994:	2b01      	cmp	r3, #1
 8010996:	d102      	bne.n	801099e <osTimerStop+0x7e>
        stat = osOK;
 8010998:	2300      	movs	r3, #0
 801099a:	61fb      	str	r3, [r7, #28]
 801099c:	e002      	b.n	80109a4 <osTimerStop+0x84>
      } else {
        stat = osError;
 801099e:	f04f 33ff 	mov.w	r3, #4294967295
 80109a2:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 80109a4:	69fb      	ldr	r3, [r7, #28]
}
 80109a6:	4618      	mov	r0, r3
 80109a8:	3720      	adds	r7, #32
 80109aa:	46bd      	mov	sp, r7
 80109ac:	bd80      	pop	{r7, pc}
 80109ae:	bf00      	nop
 80109b0:	20000ca0 	.word	0x20000ca0

080109b4 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80109b4:	b580      	push	{r7, lr}
 80109b6:	b08a      	sub	sp, #40	; 0x28
 80109b8:	af00      	add	r7, sp, #0
 80109ba:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80109bc:	2300      	movs	r3, #0
 80109be:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80109c0:	f3ef 8305 	mrs	r3, IPSR
 80109c4:	613b      	str	r3, [r7, #16]
  return(result);
 80109c6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	f040 8085 	bne.w	8010ad8 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80109ce:	f3ef 8310 	mrs	r3, PRIMASK
 80109d2:	60fb      	str	r3, [r7, #12]
  return(result);
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d105      	bne.n	80109e6 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80109da:	f3ef 8311 	mrs	r3, BASEPRI
 80109de:	60bb      	str	r3, [r7, #8]
  return(result);
 80109e0:	68bb      	ldr	r3, [r7, #8]
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d003      	beq.n	80109ee <osMutexNew+0x3a>
 80109e6:	4b3f      	ldr	r3, [pc, #252]	; (8010ae4 <osMutexNew+0x130>)
 80109e8:	681b      	ldr	r3, [r3, #0]
 80109ea:	2b02      	cmp	r3, #2
 80109ec:	d074      	beq.n	8010ad8 <osMutexNew+0x124>
    if (attr != NULL) {
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d003      	beq.n	80109fc <osMutexNew+0x48>
      type = attr->attr_bits;
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	685b      	ldr	r3, [r3, #4]
 80109f8:	623b      	str	r3, [r7, #32]
 80109fa:	e001      	b.n	8010a00 <osMutexNew+0x4c>
    } else {
      type = 0U;
 80109fc:	2300      	movs	r3, #0
 80109fe:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8010a00:	6a3b      	ldr	r3, [r7, #32]
 8010a02:	f003 0301 	and.w	r3, r3, #1
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d002      	beq.n	8010a10 <osMutexNew+0x5c>
      rmtx = 1U;
 8010a0a:	2301      	movs	r3, #1
 8010a0c:	61fb      	str	r3, [r7, #28]
 8010a0e:	e001      	b.n	8010a14 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8010a10:	2300      	movs	r3, #0
 8010a12:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8010a14:	6a3b      	ldr	r3, [r7, #32]
 8010a16:	f003 0308 	and.w	r3, r3, #8
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d15c      	bne.n	8010ad8 <osMutexNew+0x124>
      mem = -1;
 8010a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8010a22:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d015      	beq.n	8010a56 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	689b      	ldr	r3, [r3, #8]
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d006      	beq.n	8010a40 <osMutexNew+0x8c>
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	68db      	ldr	r3, [r3, #12]
 8010a36:	2b4f      	cmp	r3, #79	; 0x4f
 8010a38:	d902      	bls.n	8010a40 <osMutexNew+0x8c>
          mem = 1;
 8010a3a:	2301      	movs	r3, #1
 8010a3c:	61bb      	str	r3, [r7, #24]
 8010a3e:	e00c      	b.n	8010a5a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	689b      	ldr	r3, [r3, #8]
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d108      	bne.n	8010a5a <osMutexNew+0xa6>
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	68db      	ldr	r3, [r3, #12]
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d104      	bne.n	8010a5a <osMutexNew+0xa6>
            mem = 0;
 8010a50:	2300      	movs	r3, #0
 8010a52:	61bb      	str	r3, [r7, #24]
 8010a54:	e001      	b.n	8010a5a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8010a56:	2300      	movs	r3, #0
 8010a58:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8010a5a:	69bb      	ldr	r3, [r7, #24]
 8010a5c:	2b01      	cmp	r3, #1
 8010a5e:	d112      	bne.n	8010a86 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8010a60:	69fb      	ldr	r3, [r7, #28]
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d007      	beq.n	8010a76 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	689b      	ldr	r3, [r3, #8]
 8010a6a:	4619      	mov	r1, r3
 8010a6c:	2004      	movs	r0, #4
 8010a6e:	f001 fa56 	bl	8011f1e <xQueueCreateMutexStatic>
 8010a72:	6278      	str	r0, [r7, #36]	; 0x24
 8010a74:	e016      	b.n	8010aa4 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	689b      	ldr	r3, [r3, #8]
 8010a7a:	4619      	mov	r1, r3
 8010a7c:	2001      	movs	r0, #1
 8010a7e:	f001 fa4e 	bl	8011f1e <xQueueCreateMutexStatic>
 8010a82:	6278      	str	r0, [r7, #36]	; 0x24
 8010a84:	e00e      	b.n	8010aa4 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8010a86:	69bb      	ldr	r3, [r7, #24]
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d10b      	bne.n	8010aa4 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8010a8c:	69fb      	ldr	r3, [r7, #28]
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d004      	beq.n	8010a9c <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8010a92:	2004      	movs	r0, #4
 8010a94:	f001 fa2b 	bl	8011eee <xQueueCreateMutex>
 8010a98:	6278      	str	r0, [r7, #36]	; 0x24
 8010a9a:	e003      	b.n	8010aa4 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8010a9c:	2001      	movs	r0, #1
 8010a9e:	f001 fa26 	bl	8011eee <xQueueCreateMutex>
 8010aa2:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8010aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d00c      	beq.n	8010ac4 <osMutexNew+0x110>
        if (attr != NULL) {
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d003      	beq.n	8010ab8 <osMutexNew+0x104>
          name = attr->name;
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	617b      	str	r3, [r7, #20]
 8010ab6:	e001      	b.n	8010abc <osMutexNew+0x108>
        } else {
          name = NULL;
 8010ab8:	2300      	movs	r3, #0
 8010aba:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8010abc:	6979      	ldr	r1, [r7, #20]
 8010abe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010ac0:	f002 f8da 	bl	8012c78 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8010ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d006      	beq.n	8010ad8 <osMutexNew+0x124>
 8010aca:	69fb      	ldr	r3, [r7, #28]
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d003      	beq.n	8010ad8 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8010ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ad2:	f043 0301 	orr.w	r3, r3, #1
 8010ad6:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8010ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010ada:	4618      	mov	r0, r3
 8010adc:	3728      	adds	r7, #40	; 0x28
 8010ade:	46bd      	mov	sp, r7
 8010ae0:	bd80      	pop	{r7, pc}
 8010ae2:	bf00      	nop
 8010ae4:	20000ca0 	.word	0x20000ca0

08010ae8 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8010ae8:	b580      	push	{r7, lr}
 8010aea:	b088      	sub	sp, #32
 8010aec:	af00      	add	r7, sp, #0
 8010aee:	6078      	str	r0, [r7, #4]
 8010af0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	f023 0301 	bic.w	r3, r3, #1
 8010af8:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	f003 0301 	and.w	r3, r3, #1
 8010b00:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8010b02:	2300      	movs	r3, #0
 8010b04:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010b06:	f3ef 8305 	mrs	r3, IPSR
 8010b0a:	613b      	str	r3, [r7, #16]
  return(result);
 8010b0c:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d10f      	bne.n	8010b32 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010b12:	f3ef 8310 	mrs	r3, PRIMASK
 8010b16:	60fb      	str	r3, [r7, #12]
  return(result);
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d105      	bne.n	8010b2a <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010b1e:	f3ef 8311 	mrs	r3, BASEPRI
 8010b22:	60bb      	str	r3, [r7, #8]
  return(result);
 8010b24:	68bb      	ldr	r3, [r7, #8]
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d007      	beq.n	8010b3a <osMutexAcquire+0x52>
 8010b2a:	4b1d      	ldr	r3, [pc, #116]	; (8010ba0 <osMutexAcquire+0xb8>)
 8010b2c:	681b      	ldr	r3, [r3, #0]
 8010b2e:	2b02      	cmp	r3, #2
 8010b30:	d103      	bne.n	8010b3a <osMutexAcquire+0x52>
    stat = osErrorISR;
 8010b32:	f06f 0305 	mvn.w	r3, #5
 8010b36:	61fb      	str	r3, [r7, #28]
 8010b38:	e02c      	b.n	8010b94 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8010b3a:	69bb      	ldr	r3, [r7, #24]
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d103      	bne.n	8010b48 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8010b40:	f06f 0303 	mvn.w	r3, #3
 8010b44:	61fb      	str	r3, [r7, #28]
 8010b46:	e025      	b.n	8010b94 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8010b48:	697b      	ldr	r3, [r7, #20]
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d011      	beq.n	8010b72 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8010b4e:	6839      	ldr	r1, [r7, #0]
 8010b50:	69b8      	ldr	r0, [r7, #24]
 8010b52:	f001 fa32 	bl	8011fba <xQueueTakeMutexRecursive>
 8010b56:	4603      	mov	r3, r0
 8010b58:	2b01      	cmp	r3, #1
 8010b5a:	d01b      	beq.n	8010b94 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8010b5c:	683b      	ldr	r3, [r7, #0]
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d003      	beq.n	8010b6a <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8010b62:	f06f 0301 	mvn.w	r3, #1
 8010b66:	61fb      	str	r3, [r7, #28]
 8010b68:	e014      	b.n	8010b94 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8010b6a:	f06f 0302 	mvn.w	r3, #2
 8010b6e:	61fb      	str	r3, [r7, #28]
 8010b70:	e010      	b.n	8010b94 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8010b72:	6839      	ldr	r1, [r7, #0]
 8010b74:	69b8      	ldr	r0, [r7, #24]
 8010b76:	f001 fdaf 	bl	80126d8 <xQueueSemaphoreTake>
 8010b7a:	4603      	mov	r3, r0
 8010b7c:	2b01      	cmp	r3, #1
 8010b7e:	d009      	beq.n	8010b94 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8010b80:	683b      	ldr	r3, [r7, #0]
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d003      	beq.n	8010b8e <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8010b86:	f06f 0301 	mvn.w	r3, #1
 8010b8a:	61fb      	str	r3, [r7, #28]
 8010b8c:	e002      	b.n	8010b94 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8010b8e:	f06f 0302 	mvn.w	r3, #2
 8010b92:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8010b94:	69fb      	ldr	r3, [r7, #28]
}
 8010b96:	4618      	mov	r0, r3
 8010b98:	3720      	adds	r7, #32
 8010b9a:	46bd      	mov	sp, r7
 8010b9c:	bd80      	pop	{r7, pc}
 8010b9e:	bf00      	nop
 8010ba0:	20000ca0 	.word	0x20000ca0

08010ba4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8010ba4:	b580      	push	{r7, lr}
 8010ba6:	b088      	sub	sp, #32
 8010ba8:	af00      	add	r7, sp, #0
 8010baa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	f023 0301 	bic.w	r3, r3, #1
 8010bb2:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	f003 0301 	and.w	r3, r3, #1
 8010bba:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8010bbc:	2300      	movs	r3, #0
 8010bbe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010bc0:	f3ef 8305 	mrs	r3, IPSR
 8010bc4:	613b      	str	r3, [r7, #16]
  return(result);
 8010bc6:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d10f      	bne.n	8010bec <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010bcc:	f3ef 8310 	mrs	r3, PRIMASK
 8010bd0:	60fb      	str	r3, [r7, #12]
  return(result);
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d105      	bne.n	8010be4 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010bd8:	f3ef 8311 	mrs	r3, BASEPRI
 8010bdc:	60bb      	str	r3, [r7, #8]
  return(result);
 8010bde:	68bb      	ldr	r3, [r7, #8]
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d007      	beq.n	8010bf4 <osMutexRelease+0x50>
 8010be4:	4b16      	ldr	r3, [pc, #88]	; (8010c40 <osMutexRelease+0x9c>)
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	2b02      	cmp	r3, #2
 8010bea:	d103      	bne.n	8010bf4 <osMutexRelease+0x50>
    stat = osErrorISR;
 8010bec:	f06f 0305 	mvn.w	r3, #5
 8010bf0:	61fb      	str	r3, [r7, #28]
 8010bf2:	e01f      	b.n	8010c34 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8010bf4:	69bb      	ldr	r3, [r7, #24]
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d103      	bne.n	8010c02 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8010bfa:	f06f 0303 	mvn.w	r3, #3
 8010bfe:	61fb      	str	r3, [r7, #28]
 8010c00:	e018      	b.n	8010c34 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8010c02:	697b      	ldr	r3, [r7, #20]
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d009      	beq.n	8010c1c <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8010c08:	69b8      	ldr	r0, [r7, #24]
 8010c0a:	f001 f9a3 	bl	8011f54 <xQueueGiveMutexRecursive>
 8010c0e:	4603      	mov	r3, r0
 8010c10:	2b01      	cmp	r3, #1
 8010c12:	d00f      	beq.n	8010c34 <osMutexRelease+0x90>
        stat = osErrorResource;
 8010c14:	f06f 0302 	mvn.w	r3, #2
 8010c18:	61fb      	str	r3, [r7, #28]
 8010c1a:	e00b      	b.n	8010c34 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8010c1c:	2300      	movs	r3, #0
 8010c1e:	2200      	movs	r2, #0
 8010c20:	2100      	movs	r1, #0
 8010c22:	69b8      	ldr	r0, [r7, #24]
 8010c24:	f001 fa64 	bl	80120f0 <xQueueGenericSend>
 8010c28:	4603      	mov	r3, r0
 8010c2a:	2b01      	cmp	r3, #1
 8010c2c:	d002      	beq.n	8010c34 <osMutexRelease+0x90>
        stat = osErrorResource;
 8010c2e:	f06f 0302 	mvn.w	r3, #2
 8010c32:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8010c34:	69fb      	ldr	r3, [r7, #28]
}
 8010c36:	4618      	mov	r0, r3
 8010c38:	3720      	adds	r7, #32
 8010c3a:	46bd      	mov	sp, r7
 8010c3c:	bd80      	pop	{r7, pc}
 8010c3e:	bf00      	nop
 8010c40:	20000ca0 	.word	0x20000ca0

08010c44 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8010c44:	b580      	push	{r7, lr}
 8010c46:	b08c      	sub	sp, #48	; 0x30
 8010c48:	af02      	add	r7, sp, #8
 8010c4a:	60f8      	str	r0, [r7, #12]
 8010c4c:	60b9      	str	r1, [r7, #8]
 8010c4e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8010c50:	2300      	movs	r3, #0
 8010c52:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010c54:	f3ef 8305 	mrs	r3, IPSR
 8010c58:	61bb      	str	r3, [r7, #24]
  return(result);
 8010c5a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	f040 8087 	bne.w	8010d70 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010c62:	f3ef 8310 	mrs	r3, PRIMASK
 8010c66:	617b      	str	r3, [r7, #20]
  return(result);
 8010c68:	697b      	ldr	r3, [r7, #20]
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d105      	bne.n	8010c7a <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010c6e:	f3ef 8311 	mrs	r3, BASEPRI
 8010c72:	613b      	str	r3, [r7, #16]
  return(result);
 8010c74:	693b      	ldr	r3, [r7, #16]
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d003      	beq.n	8010c82 <osSemaphoreNew+0x3e>
 8010c7a:	4b40      	ldr	r3, [pc, #256]	; (8010d7c <osSemaphoreNew+0x138>)
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	2b02      	cmp	r3, #2
 8010c80:	d076      	beq.n	8010d70 <osSemaphoreNew+0x12c>
 8010c82:	68fb      	ldr	r3, [r7, #12]
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d073      	beq.n	8010d70 <osSemaphoreNew+0x12c>
 8010c88:	68ba      	ldr	r2, [r7, #8]
 8010c8a:	68fb      	ldr	r3, [r7, #12]
 8010c8c:	429a      	cmp	r2, r3
 8010c8e:	d86f      	bhi.n	8010d70 <osSemaphoreNew+0x12c>
    mem = -1;
 8010c90:	f04f 33ff 	mov.w	r3, #4294967295
 8010c94:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d015      	beq.n	8010cc8 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	689b      	ldr	r3, [r3, #8]
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d006      	beq.n	8010cb2 <osSemaphoreNew+0x6e>
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	68db      	ldr	r3, [r3, #12]
 8010ca8:	2b4f      	cmp	r3, #79	; 0x4f
 8010caa:	d902      	bls.n	8010cb2 <osSemaphoreNew+0x6e>
        mem = 1;
 8010cac:	2301      	movs	r3, #1
 8010cae:	623b      	str	r3, [r7, #32]
 8010cb0:	e00c      	b.n	8010ccc <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	689b      	ldr	r3, [r3, #8]
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d108      	bne.n	8010ccc <osSemaphoreNew+0x88>
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	68db      	ldr	r3, [r3, #12]
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d104      	bne.n	8010ccc <osSemaphoreNew+0x88>
          mem = 0;
 8010cc2:	2300      	movs	r3, #0
 8010cc4:	623b      	str	r3, [r7, #32]
 8010cc6:	e001      	b.n	8010ccc <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8010cc8:	2300      	movs	r3, #0
 8010cca:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8010ccc:	6a3b      	ldr	r3, [r7, #32]
 8010cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010cd2:	d04d      	beq.n	8010d70 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 8010cd4:	68fb      	ldr	r3, [r7, #12]
 8010cd6:	2b01      	cmp	r3, #1
 8010cd8:	d129      	bne.n	8010d2e <osSemaphoreNew+0xea>
        if (mem == 1) {
 8010cda:	6a3b      	ldr	r3, [r7, #32]
 8010cdc:	2b01      	cmp	r3, #1
 8010cde:	d10b      	bne.n	8010cf8 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	689a      	ldr	r2, [r3, #8]
 8010ce4:	2303      	movs	r3, #3
 8010ce6:	9300      	str	r3, [sp, #0]
 8010ce8:	4613      	mov	r3, r2
 8010cea:	2200      	movs	r2, #0
 8010cec:	2100      	movs	r1, #0
 8010cee:	2001      	movs	r0, #1
 8010cf0:	f001 f80e 	bl	8011d10 <xQueueGenericCreateStatic>
 8010cf4:	6278      	str	r0, [r7, #36]	; 0x24
 8010cf6:	e005      	b.n	8010d04 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8010cf8:	2203      	movs	r2, #3
 8010cfa:	2100      	movs	r1, #0
 8010cfc:	2001      	movs	r0, #1
 8010cfe:	f001 f87a 	bl	8011df6 <xQueueGenericCreate>
 8010d02:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8010d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d022      	beq.n	8010d50 <osSemaphoreNew+0x10c>
 8010d0a:	68bb      	ldr	r3, [r7, #8]
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d01f      	beq.n	8010d50 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8010d10:	2300      	movs	r3, #0
 8010d12:	2200      	movs	r2, #0
 8010d14:	2100      	movs	r1, #0
 8010d16:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010d18:	f001 f9ea 	bl	80120f0 <xQueueGenericSend>
 8010d1c:	4603      	mov	r3, r0
 8010d1e:	2b01      	cmp	r3, #1
 8010d20:	d016      	beq.n	8010d50 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 8010d22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010d24:	f001 fe5d 	bl	80129e2 <vQueueDelete>
            hSemaphore = NULL;
 8010d28:	2300      	movs	r3, #0
 8010d2a:	627b      	str	r3, [r7, #36]	; 0x24
 8010d2c:	e010      	b.n	8010d50 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 8010d2e:	6a3b      	ldr	r3, [r7, #32]
 8010d30:	2b01      	cmp	r3, #1
 8010d32:	d108      	bne.n	8010d46 <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	689b      	ldr	r3, [r3, #8]
 8010d38:	461a      	mov	r2, r3
 8010d3a:	68b9      	ldr	r1, [r7, #8]
 8010d3c:	68f8      	ldr	r0, [r7, #12]
 8010d3e:	f001 f971 	bl	8012024 <xQueueCreateCountingSemaphoreStatic>
 8010d42:	6278      	str	r0, [r7, #36]	; 0x24
 8010d44:	e004      	b.n	8010d50 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8010d46:	68b9      	ldr	r1, [r7, #8]
 8010d48:	68f8      	ldr	r0, [r7, #12]
 8010d4a:	f001 f9a0 	bl	801208e <xQueueCreateCountingSemaphore>
 8010d4e:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8010d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d00c      	beq.n	8010d70 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d003      	beq.n	8010d64 <osSemaphoreNew+0x120>
          name = attr->name;
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	61fb      	str	r3, [r7, #28]
 8010d62:	e001      	b.n	8010d68 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 8010d64:	2300      	movs	r3, #0
 8010d66:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8010d68:	69f9      	ldr	r1, [r7, #28]
 8010d6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010d6c:	f001 ff84 	bl	8012c78 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8010d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010d72:	4618      	mov	r0, r3
 8010d74:	3728      	adds	r7, #40	; 0x28
 8010d76:	46bd      	mov	sp, r7
 8010d78:	bd80      	pop	{r7, pc}
 8010d7a:	bf00      	nop
 8010d7c:	20000ca0 	.word	0x20000ca0

08010d80 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8010d80:	b580      	push	{r7, lr}
 8010d82:	b088      	sub	sp, #32
 8010d84:	af00      	add	r7, sp, #0
 8010d86:	6078      	str	r0, [r7, #4]
 8010d88:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8010d8e:	2300      	movs	r3, #0
 8010d90:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8010d92:	69bb      	ldr	r3, [r7, #24]
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d103      	bne.n	8010da0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8010d98:	f06f 0303 	mvn.w	r3, #3
 8010d9c:	61fb      	str	r3, [r7, #28]
 8010d9e:	e04b      	b.n	8010e38 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010da0:	f3ef 8305 	mrs	r3, IPSR
 8010da4:	617b      	str	r3, [r7, #20]
  return(result);
 8010da6:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d10f      	bne.n	8010dcc <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010dac:	f3ef 8310 	mrs	r3, PRIMASK
 8010db0:	613b      	str	r3, [r7, #16]
  return(result);
 8010db2:	693b      	ldr	r3, [r7, #16]
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d105      	bne.n	8010dc4 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010db8:	f3ef 8311 	mrs	r3, BASEPRI
 8010dbc:	60fb      	str	r3, [r7, #12]
  return(result);
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d026      	beq.n	8010e12 <osSemaphoreAcquire+0x92>
 8010dc4:	4b1f      	ldr	r3, [pc, #124]	; (8010e44 <osSemaphoreAcquire+0xc4>)
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	2b02      	cmp	r3, #2
 8010dca:	d122      	bne.n	8010e12 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8010dcc:	683b      	ldr	r3, [r7, #0]
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d003      	beq.n	8010dda <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8010dd2:	f06f 0303 	mvn.w	r3, #3
 8010dd6:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8010dd8:	e02d      	b.n	8010e36 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8010dda:	2300      	movs	r3, #0
 8010ddc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8010dde:	f107 0308 	add.w	r3, r7, #8
 8010de2:	461a      	mov	r2, r3
 8010de4:	2100      	movs	r1, #0
 8010de6:	69b8      	ldr	r0, [r7, #24]
 8010de8:	f001 fd7e 	bl	80128e8 <xQueueReceiveFromISR>
 8010dec:	4603      	mov	r3, r0
 8010dee:	2b01      	cmp	r3, #1
 8010df0:	d003      	beq.n	8010dfa <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8010df2:	f06f 0302 	mvn.w	r3, #2
 8010df6:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8010df8:	e01d      	b.n	8010e36 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8010dfa:	68bb      	ldr	r3, [r7, #8]
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d01a      	beq.n	8010e36 <osSemaphoreAcquire+0xb6>
 8010e00:	4b11      	ldr	r3, [pc, #68]	; (8010e48 <osSemaphoreAcquire+0xc8>)
 8010e02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010e06:	601a      	str	r2, [r3, #0]
 8010e08:	f3bf 8f4f 	dsb	sy
 8010e0c:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8010e10:	e011      	b.n	8010e36 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8010e12:	6839      	ldr	r1, [r7, #0]
 8010e14:	69b8      	ldr	r0, [r7, #24]
 8010e16:	f001 fc5f 	bl	80126d8 <xQueueSemaphoreTake>
 8010e1a:	4603      	mov	r3, r0
 8010e1c:	2b01      	cmp	r3, #1
 8010e1e:	d00b      	beq.n	8010e38 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8010e20:	683b      	ldr	r3, [r7, #0]
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d003      	beq.n	8010e2e <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8010e26:	f06f 0301 	mvn.w	r3, #1
 8010e2a:	61fb      	str	r3, [r7, #28]
 8010e2c:	e004      	b.n	8010e38 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8010e2e:	f06f 0302 	mvn.w	r3, #2
 8010e32:	61fb      	str	r3, [r7, #28]
 8010e34:	e000      	b.n	8010e38 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8010e36:	bf00      	nop
      }
    }
  }

  return (stat);
 8010e38:	69fb      	ldr	r3, [r7, #28]
}
 8010e3a:	4618      	mov	r0, r3
 8010e3c:	3720      	adds	r7, #32
 8010e3e:	46bd      	mov	sp, r7
 8010e40:	bd80      	pop	{r7, pc}
 8010e42:	bf00      	nop
 8010e44:	20000ca0 	.word	0x20000ca0
 8010e48:	e000ed04 	.word	0xe000ed04

08010e4c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8010e4c:	b580      	push	{r7, lr}
 8010e4e:	b088      	sub	sp, #32
 8010e50:	af00      	add	r7, sp, #0
 8010e52:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8010e58:	2300      	movs	r3, #0
 8010e5a:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8010e5c:	69bb      	ldr	r3, [r7, #24]
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d103      	bne.n	8010e6a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8010e62:	f06f 0303 	mvn.w	r3, #3
 8010e66:	61fb      	str	r3, [r7, #28]
 8010e68:	e03e      	b.n	8010ee8 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010e6a:	f3ef 8305 	mrs	r3, IPSR
 8010e6e:	617b      	str	r3, [r7, #20]
  return(result);
 8010e70:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d10f      	bne.n	8010e96 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010e76:	f3ef 8310 	mrs	r3, PRIMASK
 8010e7a:	613b      	str	r3, [r7, #16]
  return(result);
 8010e7c:	693b      	ldr	r3, [r7, #16]
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d105      	bne.n	8010e8e <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010e82:	f3ef 8311 	mrs	r3, BASEPRI
 8010e86:	60fb      	str	r3, [r7, #12]
  return(result);
 8010e88:	68fb      	ldr	r3, [r7, #12]
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d01e      	beq.n	8010ecc <osSemaphoreRelease+0x80>
 8010e8e:	4b19      	ldr	r3, [pc, #100]	; (8010ef4 <osSemaphoreRelease+0xa8>)
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	2b02      	cmp	r3, #2
 8010e94:	d11a      	bne.n	8010ecc <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8010e96:	2300      	movs	r3, #0
 8010e98:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8010e9a:	f107 0308 	add.w	r3, r7, #8
 8010e9e:	4619      	mov	r1, r3
 8010ea0:	69b8      	ldr	r0, [r7, #24]
 8010ea2:	f001 fab3 	bl	801240c <xQueueGiveFromISR>
 8010ea6:	4603      	mov	r3, r0
 8010ea8:	2b01      	cmp	r3, #1
 8010eaa:	d003      	beq.n	8010eb4 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8010eac:	f06f 0302 	mvn.w	r3, #2
 8010eb0:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8010eb2:	e018      	b.n	8010ee6 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8010eb4:	68bb      	ldr	r3, [r7, #8]
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d015      	beq.n	8010ee6 <osSemaphoreRelease+0x9a>
 8010eba:	4b0f      	ldr	r3, [pc, #60]	; (8010ef8 <osSemaphoreRelease+0xac>)
 8010ebc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010ec0:	601a      	str	r2, [r3, #0]
 8010ec2:	f3bf 8f4f 	dsb	sy
 8010ec6:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8010eca:	e00c      	b.n	8010ee6 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8010ecc:	2300      	movs	r3, #0
 8010ece:	2200      	movs	r2, #0
 8010ed0:	2100      	movs	r1, #0
 8010ed2:	69b8      	ldr	r0, [r7, #24]
 8010ed4:	f001 f90c 	bl	80120f0 <xQueueGenericSend>
 8010ed8:	4603      	mov	r3, r0
 8010eda:	2b01      	cmp	r3, #1
 8010edc:	d004      	beq.n	8010ee8 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8010ede:	f06f 0302 	mvn.w	r3, #2
 8010ee2:	61fb      	str	r3, [r7, #28]
 8010ee4:	e000      	b.n	8010ee8 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8010ee6:	bf00      	nop
    }
  }

  return (stat);
 8010ee8:	69fb      	ldr	r3, [r7, #28]
}
 8010eea:	4618      	mov	r0, r3
 8010eec:	3720      	adds	r7, #32
 8010eee:	46bd      	mov	sp, r7
 8010ef0:	bd80      	pop	{r7, pc}
 8010ef2:	bf00      	nop
 8010ef4:	20000ca0 	.word	0x20000ca0
 8010ef8:	e000ed04 	.word	0xe000ed04

08010efc <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8010efc:	b580      	push	{r7, lr}
 8010efe:	b08c      	sub	sp, #48	; 0x30
 8010f00:	af02      	add	r7, sp, #8
 8010f02:	60f8      	str	r0, [r7, #12]
 8010f04:	60b9      	str	r1, [r7, #8]
 8010f06:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8010f08:	2300      	movs	r3, #0
 8010f0a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010f0c:	f3ef 8305 	mrs	r3, IPSR
 8010f10:	61bb      	str	r3, [r7, #24]
  return(result);
 8010f12:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d170      	bne.n	8010ffa <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010f18:	f3ef 8310 	mrs	r3, PRIMASK
 8010f1c:	617b      	str	r3, [r7, #20]
  return(result);
 8010f1e:	697b      	ldr	r3, [r7, #20]
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d105      	bne.n	8010f30 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010f24:	f3ef 8311 	mrs	r3, BASEPRI
 8010f28:	613b      	str	r3, [r7, #16]
  return(result);
 8010f2a:	693b      	ldr	r3, [r7, #16]
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d003      	beq.n	8010f38 <osMessageQueueNew+0x3c>
 8010f30:	4b34      	ldr	r3, [pc, #208]	; (8011004 <osMessageQueueNew+0x108>)
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	2b02      	cmp	r3, #2
 8010f36:	d060      	beq.n	8010ffa <osMessageQueueNew+0xfe>
 8010f38:	68fb      	ldr	r3, [r7, #12]
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d05d      	beq.n	8010ffa <osMessageQueueNew+0xfe>
 8010f3e:	68bb      	ldr	r3, [r7, #8]
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d05a      	beq.n	8010ffa <osMessageQueueNew+0xfe>
    mem = -1;
 8010f44:	f04f 33ff 	mov.w	r3, #4294967295
 8010f48:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d029      	beq.n	8010fa4 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	689b      	ldr	r3, [r3, #8]
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d012      	beq.n	8010f7e <osMessageQueueNew+0x82>
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	68db      	ldr	r3, [r3, #12]
 8010f5c:	2b4f      	cmp	r3, #79	; 0x4f
 8010f5e:	d90e      	bls.n	8010f7e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d00a      	beq.n	8010f7e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	695a      	ldr	r2, [r3, #20]
 8010f6c:	68fb      	ldr	r3, [r7, #12]
 8010f6e:	68b9      	ldr	r1, [r7, #8]
 8010f70:	fb01 f303 	mul.w	r3, r1, r3
 8010f74:	429a      	cmp	r2, r3
 8010f76:	d302      	bcc.n	8010f7e <osMessageQueueNew+0x82>
        mem = 1;
 8010f78:	2301      	movs	r3, #1
 8010f7a:	623b      	str	r3, [r7, #32]
 8010f7c:	e014      	b.n	8010fa8 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	689b      	ldr	r3, [r3, #8]
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d110      	bne.n	8010fa8 <osMessageQueueNew+0xac>
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	68db      	ldr	r3, [r3, #12]
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d10c      	bne.n	8010fa8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d108      	bne.n	8010fa8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	695b      	ldr	r3, [r3, #20]
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d104      	bne.n	8010fa8 <osMessageQueueNew+0xac>
          mem = 0;
 8010f9e:	2300      	movs	r3, #0
 8010fa0:	623b      	str	r3, [r7, #32]
 8010fa2:	e001      	b.n	8010fa8 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8010fa4:	2300      	movs	r3, #0
 8010fa6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8010fa8:	6a3b      	ldr	r3, [r7, #32]
 8010faa:	2b01      	cmp	r3, #1
 8010fac:	d10c      	bne.n	8010fc8 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	691a      	ldr	r2, [r3, #16]
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	6899      	ldr	r1, [r3, #8]
 8010fb6:	2300      	movs	r3, #0
 8010fb8:	9300      	str	r3, [sp, #0]
 8010fba:	460b      	mov	r3, r1
 8010fbc:	68b9      	ldr	r1, [r7, #8]
 8010fbe:	68f8      	ldr	r0, [r7, #12]
 8010fc0:	f000 fea6 	bl	8011d10 <xQueueGenericCreateStatic>
 8010fc4:	6278      	str	r0, [r7, #36]	; 0x24
 8010fc6:	e008      	b.n	8010fda <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8010fc8:	6a3b      	ldr	r3, [r7, #32]
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d105      	bne.n	8010fda <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8010fce:	2200      	movs	r2, #0
 8010fd0:	68b9      	ldr	r1, [r7, #8]
 8010fd2:	68f8      	ldr	r0, [r7, #12]
 8010fd4:	f000 ff0f 	bl	8011df6 <xQueueGenericCreate>
 8010fd8:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8010fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d00c      	beq.n	8010ffa <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d003      	beq.n	8010fee <osMessageQueueNew+0xf2>
        name = attr->name;
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	61fb      	str	r3, [r7, #28]
 8010fec:	e001      	b.n	8010ff2 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8010fee:	2300      	movs	r3, #0
 8010ff0:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8010ff2:	69f9      	ldr	r1, [r7, #28]
 8010ff4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010ff6:	f001 fe3f 	bl	8012c78 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8010ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	3728      	adds	r7, #40	; 0x28
 8011000:	46bd      	mov	sp, r7
 8011002:	bd80      	pop	{r7, pc}
 8011004:	20000ca0 	.word	0x20000ca0

08011008 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8011008:	b580      	push	{r7, lr}
 801100a:	b08a      	sub	sp, #40	; 0x28
 801100c:	af00      	add	r7, sp, #0
 801100e:	60f8      	str	r0, [r7, #12]
 8011010:	60b9      	str	r1, [r7, #8]
 8011012:	603b      	str	r3, [r7, #0]
 8011014:	4613      	mov	r3, r2
 8011016:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801101c:	2300      	movs	r3, #0
 801101e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011020:	f3ef 8305 	mrs	r3, IPSR
 8011024:	61fb      	str	r3, [r7, #28]
  return(result);
 8011026:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8011028:	2b00      	cmp	r3, #0
 801102a:	d10f      	bne.n	801104c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801102c:	f3ef 8310 	mrs	r3, PRIMASK
 8011030:	61bb      	str	r3, [r7, #24]
  return(result);
 8011032:	69bb      	ldr	r3, [r7, #24]
 8011034:	2b00      	cmp	r3, #0
 8011036:	d105      	bne.n	8011044 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011038:	f3ef 8311 	mrs	r3, BASEPRI
 801103c:	617b      	str	r3, [r7, #20]
  return(result);
 801103e:	697b      	ldr	r3, [r7, #20]
 8011040:	2b00      	cmp	r3, #0
 8011042:	d02c      	beq.n	801109e <osMessageQueuePut+0x96>
 8011044:	4b28      	ldr	r3, [pc, #160]	; (80110e8 <osMessageQueuePut+0xe0>)
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	2b02      	cmp	r3, #2
 801104a:	d128      	bne.n	801109e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801104c:	6a3b      	ldr	r3, [r7, #32]
 801104e:	2b00      	cmp	r3, #0
 8011050:	d005      	beq.n	801105e <osMessageQueuePut+0x56>
 8011052:	68bb      	ldr	r3, [r7, #8]
 8011054:	2b00      	cmp	r3, #0
 8011056:	d002      	beq.n	801105e <osMessageQueuePut+0x56>
 8011058:	683b      	ldr	r3, [r7, #0]
 801105a:	2b00      	cmp	r3, #0
 801105c:	d003      	beq.n	8011066 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 801105e:	f06f 0303 	mvn.w	r3, #3
 8011062:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011064:	e039      	b.n	80110da <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8011066:	2300      	movs	r3, #0
 8011068:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 801106a:	f107 0210 	add.w	r2, r7, #16
 801106e:	2300      	movs	r3, #0
 8011070:	68b9      	ldr	r1, [r7, #8]
 8011072:	6a38      	ldr	r0, [r7, #32]
 8011074:	f001 f936 	bl	80122e4 <xQueueGenericSendFromISR>
 8011078:	4603      	mov	r3, r0
 801107a:	2b01      	cmp	r3, #1
 801107c:	d003      	beq.n	8011086 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 801107e:	f06f 0302 	mvn.w	r3, #2
 8011082:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011084:	e029      	b.n	80110da <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8011086:	693b      	ldr	r3, [r7, #16]
 8011088:	2b00      	cmp	r3, #0
 801108a:	d026      	beq.n	80110da <osMessageQueuePut+0xd2>
 801108c:	4b17      	ldr	r3, [pc, #92]	; (80110ec <osMessageQueuePut+0xe4>)
 801108e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011092:	601a      	str	r2, [r3, #0]
 8011094:	f3bf 8f4f 	dsb	sy
 8011098:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801109c:	e01d      	b.n	80110da <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801109e:	6a3b      	ldr	r3, [r7, #32]
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d002      	beq.n	80110aa <osMessageQueuePut+0xa2>
 80110a4:	68bb      	ldr	r3, [r7, #8]
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d103      	bne.n	80110b2 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 80110aa:	f06f 0303 	mvn.w	r3, #3
 80110ae:	627b      	str	r3, [r7, #36]	; 0x24
 80110b0:	e014      	b.n	80110dc <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80110b2:	2300      	movs	r3, #0
 80110b4:	683a      	ldr	r2, [r7, #0]
 80110b6:	68b9      	ldr	r1, [r7, #8]
 80110b8:	6a38      	ldr	r0, [r7, #32]
 80110ba:	f001 f819 	bl	80120f0 <xQueueGenericSend>
 80110be:	4603      	mov	r3, r0
 80110c0:	2b01      	cmp	r3, #1
 80110c2:	d00b      	beq.n	80110dc <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 80110c4:	683b      	ldr	r3, [r7, #0]
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d003      	beq.n	80110d2 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 80110ca:	f06f 0301 	mvn.w	r3, #1
 80110ce:	627b      	str	r3, [r7, #36]	; 0x24
 80110d0:	e004      	b.n	80110dc <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 80110d2:	f06f 0302 	mvn.w	r3, #2
 80110d6:	627b      	str	r3, [r7, #36]	; 0x24
 80110d8:	e000      	b.n	80110dc <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80110da:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80110dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80110de:	4618      	mov	r0, r3
 80110e0:	3728      	adds	r7, #40	; 0x28
 80110e2:	46bd      	mov	sp, r7
 80110e4:	bd80      	pop	{r7, pc}
 80110e6:	bf00      	nop
 80110e8:	20000ca0 	.word	0x20000ca0
 80110ec:	e000ed04 	.word	0xe000ed04

080110f0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80110f0:	b580      	push	{r7, lr}
 80110f2:	b08a      	sub	sp, #40	; 0x28
 80110f4:	af00      	add	r7, sp, #0
 80110f6:	60f8      	str	r0, [r7, #12]
 80110f8:	60b9      	str	r1, [r7, #8]
 80110fa:	607a      	str	r2, [r7, #4]
 80110fc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8011102:	2300      	movs	r3, #0
 8011104:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011106:	f3ef 8305 	mrs	r3, IPSR
 801110a:	61fb      	str	r3, [r7, #28]
  return(result);
 801110c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 801110e:	2b00      	cmp	r3, #0
 8011110:	d10f      	bne.n	8011132 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011112:	f3ef 8310 	mrs	r3, PRIMASK
 8011116:	61bb      	str	r3, [r7, #24]
  return(result);
 8011118:	69bb      	ldr	r3, [r7, #24]
 801111a:	2b00      	cmp	r3, #0
 801111c:	d105      	bne.n	801112a <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801111e:	f3ef 8311 	mrs	r3, BASEPRI
 8011122:	617b      	str	r3, [r7, #20]
  return(result);
 8011124:	697b      	ldr	r3, [r7, #20]
 8011126:	2b00      	cmp	r3, #0
 8011128:	d02c      	beq.n	8011184 <osMessageQueueGet+0x94>
 801112a:	4b28      	ldr	r3, [pc, #160]	; (80111cc <osMessageQueueGet+0xdc>)
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	2b02      	cmp	r3, #2
 8011130:	d128      	bne.n	8011184 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011132:	6a3b      	ldr	r3, [r7, #32]
 8011134:	2b00      	cmp	r3, #0
 8011136:	d005      	beq.n	8011144 <osMessageQueueGet+0x54>
 8011138:	68bb      	ldr	r3, [r7, #8]
 801113a:	2b00      	cmp	r3, #0
 801113c:	d002      	beq.n	8011144 <osMessageQueueGet+0x54>
 801113e:	683b      	ldr	r3, [r7, #0]
 8011140:	2b00      	cmp	r3, #0
 8011142:	d003      	beq.n	801114c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8011144:	f06f 0303 	mvn.w	r3, #3
 8011148:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801114a:	e038      	b.n	80111be <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 801114c:	2300      	movs	r3, #0
 801114e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8011150:	f107 0310 	add.w	r3, r7, #16
 8011154:	461a      	mov	r2, r3
 8011156:	68b9      	ldr	r1, [r7, #8]
 8011158:	6a38      	ldr	r0, [r7, #32]
 801115a:	f001 fbc5 	bl	80128e8 <xQueueReceiveFromISR>
 801115e:	4603      	mov	r3, r0
 8011160:	2b01      	cmp	r3, #1
 8011162:	d003      	beq.n	801116c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8011164:	f06f 0302 	mvn.w	r3, #2
 8011168:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801116a:	e028      	b.n	80111be <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 801116c:	693b      	ldr	r3, [r7, #16]
 801116e:	2b00      	cmp	r3, #0
 8011170:	d025      	beq.n	80111be <osMessageQueueGet+0xce>
 8011172:	4b17      	ldr	r3, [pc, #92]	; (80111d0 <osMessageQueueGet+0xe0>)
 8011174:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011178:	601a      	str	r2, [r3, #0]
 801117a:	f3bf 8f4f 	dsb	sy
 801117e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011182:	e01c      	b.n	80111be <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8011184:	6a3b      	ldr	r3, [r7, #32]
 8011186:	2b00      	cmp	r3, #0
 8011188:	d002      	beq.n	8011190 <osMessageQueueGet+0xa0>
 801118a:	68bb      	ldr	r3, [r7, #8]
 801118c:	2b00      	cmp	r3, #0
 801118e:	d103      	bne.n	8011198 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8011190:	f06f 0303 	mvn.w	r3, #3
 8011194:	627b      	str	r3, [r7, #36]	; 0x24
 8011196:	e013      	b.n	80111c0 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8011198:	683a      	ldr	r2, [r7, #0]
 801119a:	68b9      	ldr	r1, [r7, #8]
 801119c:	6a38      	ldr	r0, [r7, #32]
 801119e:	f001 f9bf 	bl	8012520 <xQueueReceive>
 80111a2:	4603      	mov	r3, r0
 80111a4:	2b01      	cmp	r3, #1
 80111a6:	d00b      	beq.n	80111c0 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 80111a8:	683b      	ldr	r3, [r7, #0]
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d003      	beq.n	80111b6 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 80111ae:	f06f 0301 	mvn.w	r3, #1
 80111b2:	627b      	str	r3, [r7, #36]	; 0x24
 80111b4:	e004      	b.n	80111c0 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 80111b6:	f06f 0302 	mvn.w	r3, #2
 80111ba:	627b      	str	r3, [r7, #36]	; 0x24
 80111bc:	e000      	b.n	80111c0 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80111be:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80111c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80111c2:	4618      	mov	r0, r3
 80111c4:	3728      	adds	r7, #40	; 0x28
 80111c6:	46bd      	mov	sp, r7
 80111c8:	bd80      	pop	{r7, pc}
 80111ca:	bf00      	nop
 80111cc:	20000ca0 	.word	0x20000ca0
 80111d0:	e000ed04 	.word	0xe000ed04

080111d4 <osMessageQueueReset>:
  }

  return (space);
}

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 80111d4:	b580      	push	{r7, lr}
 80111d6:	b088      	sub	sp, #32
 80111d8:	af00      	add	r7, sp, #0
 80111da:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80111e0:	f3ef 8305 	mrs	r3, IPSR
 80111e4:	617b      	str	r3, [r7, #20]
  return(result);
 80111e6:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d10f      	bne.n	801120c <osMessageQueueReset+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80111ec:	f3ef 8310 	mrs	r3, PRIMASK
 80111f0:	613b      	str	r3, [r7, #16]
  return(result);
 80111f2:	693b      	ldr	r3, [r7, #16]
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d105      	bne.n	8011204 <osMessageQueueReset+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80111f8:	f3ef 8311 	mrs	r3, BASEPRI
 80111fc:	60fb      	str	r3, [r7, #12]
  return(result);
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	2b00      	cmp	r3, #0
 8011202:	d007      	beq.n	8011214 <osMessageQueueReset+0x40>
 8011204:	4b0c      	ldr	r3, [pc, #48]	; (8011238 <osMessageQueueReset+0x64>)
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	2b02      	cmp	r3, #2
 801120a:	d103      	bne.n	8011214 <osMessageQueueReset+0x40>
    stat = osErrorISR;
 801120c:	f06f 0305 	mvn.w	r3, #5
 8011210:	61fb      	str	r3, [r7, #28]
 8011212:	e00c      	b.n	801122e <osMessageQueueReset+0x5a>
  }
  else if (hQueue == NULL) {
 8011214:	69bb      	ldr	r3, [r7, #24]
 8011216:	2b00      	cmp	r3, #0
 8011218:	d103      	bne.n	8011222 <osMessageQueueReset+0x4e>
    stat = osErrorParameter;
 801121a:	f06f 0303 	mvn.w	r3, #3
 801121e:	61fb      	str	r3, [r7, #28]
 8011220:	e005      	b.n	801122e <osMessageQueueReset+0x5a>
  }
  else {
    stat = osOK;
 8011222:	2300      	movs	r3, #0
 8011224:	61fb      	str	r3, [r7, #28]
    (void)xQueueReset (hQueue);
 8011226:	2100      	movs	r1, #0
 8011228:	69b8      	ldr	r0, [r7, #24]
 801122a:	f000 fd09 	bl	8011c40 <xQueueGenericReset>
  }

  return (stat);
 801122e:	69fb      	ldr	r3, [r7, #28]
}
 8011230:	4618      	mov	r0, r3
 8011232:	3720      	adds	r7, #32
 8011234:	46bd      	mov	sp, r7
 8011236:	bd80      	pop	{r7, pc}
 8011238:	20000ca0 	.word	0x20000ca0

0801123c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 801123c:	b480      	push	{r7}
 801123e:	b085      	sub	sp, #20
 8011240:	af00      	add	r7, sp, #0
 8011242:	60f8      	str	r0, [r7, #12]
 8011244:	60b9      	str	r1, [r7, #8]
 8011246:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8011248:	68fb      	ldr	r3, [r7, #12]
 801124a:	4a07      	ldr	r2, [pc, #28]	; (8011268 <vApplicationGetIdleTaskMemory+0x2c>)
 801124c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801124e:	68bb      	ldr	r3, [r7, #8]
 8011250:	4a06      	ldr	r2, [pc, #24]	; (801126c <vApplicationGetIdleTaskMemory+0x30>)
 8011252:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	f44f 7200 	mov.w	r2, #512	; 0x200
 801125a:	601a      	str	r2, [r3, #0]
}
 801125c:	bf00      	nop
 801125e:	3714      	adds	r7, #20
 8011260:	46bd      	mov	sp, r7
 8011262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011266:	4770      	bx	lr
 8011268:	20000ca4 	.word	0x20000ca4
 801126c:	20000d08 	.word	0x20000d08

08011270 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8011270:	b480      	push	{r7}
 8011272:	b085      	sub	sp, #20
 8011274:	af00      	add	r7, sp, #0
 8011276:	60f8      	str	r0, [r7, #12]
 8011278:	60b9      	str	r1, [r7, #8]
 801127a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	4a07      	ldr	r2, [pc, #28]	; (801129c <vApplicationGetTimerTaskMemory+0x2c>)
 8011280:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8011282:	68bb      	ldr	r3, [r7, #8]
 8011284:	4a06      	ldr	r2, [pc, #24]	; (80112a0 <vApplicationGetTimerTaskMemory+0x30>)
 8011286:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801128e:	601a      	str	r2, [r3, #0]
}
 8011290:	bf00      	nop
 8011292:	3714      	adds	r7, #20
 8011294:	46bd      	mov	sp, r7
 8011296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801129a:	4770      	bx	lr
 801129c:	20001508 	.word	0x20001508
 80112a0:	2000156c 	.word	0x2000156c

080112a4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80112a4:	b580      	push	{r7, lr}
 80112a6:	b08a      	sub	sp, #40	; 0x28
 80112a8:	af00      	add	r7, sp, #0
 80112aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80112ac:	2300      	movs	r3, #0
 80112ae:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80112b0:	f001 ffa6 	bl	8013200 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80112b4:	4b59      	ldr	r3, [pc, #356]	; (801141c <pvPortMalloc+0x178>)
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d101      	bne.n	80112c0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80112bc:	f000 f910 	bl	80114e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80112c0:	4b57      	ldr	r3, [pc, #348]	; (8011420 <pvPortMalloc+0x17c>)
 80112c2:	681a      	ldr	r2, [r3, #0]
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	4013      	ands	r3, r2
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	f040 808c 	bne.w	80113e6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d01c      	beq.n	801130e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80112d4:	2208      	movs	r2, #8
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	4413      	add	r3, r2
 80112da:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	f003 0307 	and.w	r3, r3, #7
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d013      	beq.n	801130e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	f023 0307 	bic.w	r3, r3, #7
 80112ec:	3308      	adds	r3, #8
 80112ee:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	f003 0307 	and.w	r3, r3, #7
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d009      	beq.n	801130e <pvPortMalloc+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80112fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112fe:	f383 8811 	msr	BASEPRI, r3
 8011302:	f3bf 8f6f 	isb	sy
 8011306:	f3bf 8f4f 	dsb	sy
 801130a:	617b      	str	r3, [r7, #20]
 801130c:	e7fe      	b.n	801130c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	2b00      	cmp	r3, #0
 8011312:	d068      	beq.n	80113e6 <pvPortMalloc+0x142>
 8011314:	4b43      	ldr	r3, [pc, #268]	; (8011424 <pvPortMalloc+0x180>)
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	687a      	ldr	r2, [r7, #4]
 801131a:	429a      	cmp	r2, r3
 801131c:	d863      	bhi.n	80113e6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801131e:	4b42      	ldr	r3, [pc, #264]	; (8011428 <pvPortMalloc+0x184>)
 8011320:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011322:	4b41      	ldr	r3, [pc, #260]	; (8011428 <pvPortMalloc+0x184>)
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011328:	e004      	b.n	8011334 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 801132a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801132c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801132e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011330:	681b      	ldr	r3, [r3, #0]
 8011332:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011336:	685b      	ldr	r3, [r3, #4]
 8011338:	687a      	ldr	r2, [r7, #4]
 801133a:	429a      	cmp	r2, r3
 801133c:	d903      	bls.n	8011346 <pvPortMalloc+0xa2>
 801133e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	2b00      	cmp	r3, #0
 8011344:	d1f1      	bne.n	801132a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011346:	4b35      	ldr	r3, [pc, #212]	; (801141c <pvPortMalloc+0x178>)
 8011348:	681b      	ldr	r3, [r3, #0]
 801134a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801134c:	429a      	cmp	r2, r3
 801134e:	d04a      	beq.n	80113e6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011350:	6a3b      	ldr	r3, [r7, #32]
 8011352:	681b      	ldr	r3, [r3, #0]
 8011354:	2208      	movs	r2, #8
 8011356:	4413      	add	r3, r2
 8011358:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801135a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801135c:	681a      	ldr	r2, [r3, #0]
 801135e:	6a3b      	ldr	r3, [r7, #32]
 8011360:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011364:	685a      	ldr	r2, [r3, #4]
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	1ad2      	subs	r2, r2, r3
 801136a:	2308      	movs	r3, #8
 801136c:	005b      	lsls	r3, r3, #1
 801136e:	429a      	cmp	r2, r3
 8011370:	d91e      	bls.n	80113b0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	4413      	add	r3, r2
 8011378:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801137a:	69bb      	ldr	r3, [r7, #24]
 801137c:	f003 0307 	and.w	r3, r3, #7
 8011380:	2b00      	cmp	r3, #0
 8011382:	d009      	beq.n	8011398 <pvPortMalloc+0xf4>
 8011384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011388:	f383 8811 	msr	BASEPRI, r3
 801138c:	f3bf 8f6f 	isb	sy
 8011390:	f3bf 8f4f 	dsb	sy
 8011394:	613b      	str	r3, [r7, #16]
 8011396:	e7fe      	b.n	8011396 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801139a:	685a      	ldr	r2, [r3, #4]
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	1ad2      	subs	r2, r2, r3
 80113a0:	69bb      	ldr	r3, [r7, #24]
 80113a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80113a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113a6:	687a      	ldr	r2, [r7, #4]
 80113a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80113aa:	69b8      	ldr	r0, [r7, #24]
 80113ac:	f000 f8fc 	bl	80115a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80113b0:	4b1c      	ldr	r3, [pc, #112]	; (8011424 <pvPortMalloc+0x180>)
 80113b2:	681a      	ldr	r2, [r3, #0]
 80113b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113b6:	685b      	ldr	r3, [r3, #4]
 80113b8:	1ad3      	subs	r3, r2, r3
 80113ba:	4a1a      	ldr	r2, [pc, #104]	; (8011424 <pvPortMalloc+0x180>)
 80113bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80113be:	4b19      	ldr	r3, [pc, #100]	; (8011424 <pvPortMalloc+0x180>)
 80113c0:	681a      	ldr	r2, [r3, #0]
 80113c2:	4b1a      	ldr	r3, [pc, #104]	; (801142c <pvPortMalloc+0x188>)
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	429a      	cmp	r2, r3
 80113c8:	d203      	bcs.n	80113d2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80113ca:	4b16      	ldr	r3, [pc, #88]	; (8011424 <pvPortMalloc+0x180>)
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	4a17      	ldr	r2, [pc, #92]	; (801142c <pvPortMalloc+0x188>)
 80113d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80113d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113d4:	685a      	ldr	r2, [r3, #4]
 80113d6:	4b12      	ldr	r3, [pc, #72]	; (8011420 <pvPortMalloc+0x17c>)
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	431a      	orrs	r2, r3
 80113dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80113e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113e2:	2200      	movs	r2, #0
 80113e4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80113e6:	f001 ff51 	bl	801328c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 80113ea:	69fb      	ldr	r3, [r7, #28]
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d101      	bne.n	80113f4 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 80113f0:	f7ef ff5e 	bl	80012b0 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80113f4:	69fb      	ldr	r3, [r7, #28]
 80113f6:	f003 0307 	and.w	r3, r3, #7
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d009      	beq.n	8011412 <pvPortMalloc+0x16e>
 80113fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011402:	f383 8811 	msr	BASEPRI, r3
 8011406:	f3bf 8f6f 	isb	sy
 801140a:	f3bf 8f4f 	dsb	sy
 801140e:	60fb      	str	r3, [r7, #12]
 8011410:	e7fe      	b.n	8011410 <pvPortMalloc+0x16c>
	return pvReturn;
 8011412:	69fb      	ldr	r3, [r7, #28]
}
 8011414:	4618      	mov	r0, r3
 8011416:	3728      	adds	r7, #40	; 0x28
 8011418:	46bd      	mov	sp, r7
 801141a:	bd80      	pop	{r7, pc}
 801141c:	20026f64 	.word	0x20026f64
 8011420:	20026f70 	.word	0x20026f70
 8011424:	20026f68 	.word	0x20026f68
 8011428:	20026f5c 	.word	0x20026f5c
 801142c:	20026f6c 	.word	0x20026f6c

08011430 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011430:	b580      	push	{r7, lr}
 8011432:	b086      	sub	sp, #24
 8011434:	af00      	add	r7, sp, #0
 8011436:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	2b00      	cmp	r3, #0
 8011440:	d046      	beq.n	80114d0 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011442:	2308      	movs	r3, #8
 8011444:	425b      	negs	r3, r3
 8011446:	697a      	ldr	r2, [r7, #20]
 8011448:	4413      	add	r3, r2
 801144a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801144c:	697b      	ldr	r3, [r7, #20]
 801144e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011450:	693b      	ldr	r3, [r7, #16]
 8011452:	685a      	ldr	r2, [r3, #4]
 8011454:	4b20      	ldr	r3, [pc, #128]	; (80114d8 <vPortFree+0xa8>)
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	4013      	ands	r3, r2
 801145a:	2b00      	cmp	r3, #0
 801145c:	d109      	bne.n	8011472 <vPortFree+0x42>
 801145e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011462:	f383 8811 	msr	BASEPRI, r3
 8011466:	f3bf 8f6f 	isb	sy
 801146a:	f3bf 8f4f 	dsb	sy
 801146e:	60fb      	str	r3, [r7, #12]
 8011470:	e7fe      	b.n	8011470 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011472:	693b      	ldr	r3, [r7, #16]
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	2b00      	cmp	r3, #0
 8011478:	d009      	beq.n	801148e <vPortFree+0x5e>
 801147a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801147e:	f383 8811 	msr	BASEPRI, r3
 8011482:	f3bf 8f6f 	isb	sy
 8011486:	f3bf 8f4f 	dsb	sy
 801148a:	60bb      	str	r3, [r7, #8]
 801148c:	e7fe      	b.n	801148c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801148e:	693b      	ldr	r3, [r7, #16]
 8011490:	685a      	ldr	r2, [r3, #4]
 8011492:	4b11      	ldr	r3, [pc, #68]	; (80114d8 <vPortFree+0xa8>)
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	4013      	ands	r3, r2
 8011498:	2b00      	cmp	r3, #0
 801149a:	d019      	beq.n	80114d0 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801149c:	693b      	ldr	r3, [r7, #16]
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d115      	bne.n	80114d0 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80114a4:	693b      	ldr	r3, [r7, #16]
 80114a6:	685a      	ldr	r2, [r3, #4]
 80114a8:	4b0b      	ldr	r3, [pc, #44]	; (80114d8 <vPortFree+0xa8>)
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	43db      	mvns	r3, r3
 80114ae:	401a      	ands	r2, r3
 80114b0:	693b      	ldr	r3, [r7, #16]
 80114b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80114b4:	f001 fea4 	bl	8013200 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80114b8:	693b      	ldr	r3, [r7, #16]
 80114ba:	685a      	ldr	r2, [r3, #4]
 80114bc:	4b07      	ldr	r3, [pc, #28]	; (80114dc <vPortFree+0xac>)
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	4413      	add	r3, r2
 80114c2:	4a06      	ldr	r2, [pc, #24]	; (80114dc <vPortFree+0xac>)
 80114c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80114c6:	6938      	ldr	r0, [r7, #16]
 80114c8:	f000 f86e 	bl	80115a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80114cc:	f001 fede 	bl	801328c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80114d0:	bf00      	nop
 80114d2:	3718      	adds	r7, #24
 80114d4:	46bd      	mov	sp, r7
 80114d6:	bd80      	pop	{r7, pc}
 80114d8:	20026f70 	.word	0x20026f70
 80114dc:	20026f68 	.word	0x20026f68

080114e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80114e0:	b480      	push	{r7}
 80114e2:	b085      	sub	sp, #20
 80114e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80114e6:	4b29      	ldr	r3, [pc, #164]	; (801158c <prvHeapInit+0xac>)
 80114e8:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80114ea:	4b29      	ldr	r3, [pc, #164]	; (8011590 <prvHeapInit+0xb0>)
 80114ec:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80114ee:	68fb      	ldr	r3, [r7, #12]
 80114f0:	f003 0307 	and.w	r3, r3, #7
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d00c      	beq.n	8011512 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	3307      	adds	r3, #7
 80114fc:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	f023 0307 	bic.w	r3, r3, #7
 8011504:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011506:	68ba      	ldr	r2, [r7, #8]
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	1ad3      	subs	r3, r2, r3
 801150c:	4a20      	ldr	r2, [pc, #128]	; (8011590 <prvHeapInit+0xb0>)
 801150e:	4413      	add	r3, r2
 8011510:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011516:	4a1f      	ldr	r2, [pc, #124]	; (8011594 <prvHeapInit+0xb4>)
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801151c:	4b1d      	ldr	r3, [pc, #116]	; (8011594 <prvHeapInit+0xb4>)
 801151e:	2200      	movs	r2, #0
 8011520:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	68ba      	ldr	r2, [r7, #8]
 8011526:	4413      	add	r3, r2
 8011528:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801152a:	2208      	movs	r2, #8
 801152c:	68fb      	ldr	r3, [r7, #12]
 801152e:	1a9b      	subs	r3, r3, r2
 8011530:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	f023 0307 	bic.w	r3, r3, #7
 8011538:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	4a16      	ldr	r2, [pc, #88]	; (8011598 <prvHeapInit+0xb8>)
 801153e:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011540:	4b15      	ldr	r3, [pc, #84]	; (8011598 <prvHeapInit+0xb8>)
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	2200      	movs	r2, #0
 8011546:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011548:	4b13      	ldr	r3, [pc, #76]	; (8011598 <prvHeapInit+0xb8>)
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	2200      	movs	r2, #0
 801154e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011554:	683b      	ldr	r3, [r7, #0]
 8011556:	68fa      	ldr	r2, [r7, #12]
 8011558:	1ad2      	subs	r2, r2, r3
 801155a:	683b      	ldr	r3, [r7, #0]
 801155c:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801155e:	4b0e      	ldr	r3, [pc, #56]	; (8011598 <prvHeapInit+0xb8>)
 8011560:	681a      	ldr	r2, [r3, #0]
 8011562:	683b      	ldr	r3, [r7, #0]
 8011564:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011566:	683b      	ldr	r3, [r7, #0]
 8011568:	685b      	ldr	r3, [r3, #4]
 801156a:	4a0c      	ldr	r2, [pc, #48]	; (801159c <prvHeapInit+0xbc>)
 801156c:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801156e:	683b      	ldr	r3, [r7, #0]
 8011570:	685b      	ldr	r3, [r3, #4]
 8011572:	4a0b      	ldr	r2, [pc, #44]	; (80115a0 <prvHeapInit+0xc0>)
 8011574:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011576:	4b0b      	ldr	r3, [pc, #44]	; (80115a4 <prvHeapInit+0xc4>)
 8011578:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801157c:	601a      	str	r2, [r3, #0]
}
 801157e:	bf00      	nop
 8011580:	3714      	adds	r7, #20
 8011582:	46bd      	mov	sp, r7
 8011584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011588:	4770      	bx	lr
 801158a:	bf00      	nop
 801158c:	000249f0 	.word	0x000249f0
 8011590:	2000256c 	.word	0x2000256c
 8011594:	20026f5c 	.word	0x20026f5c
 8011598:	20026f64 	.word	0x20026f64
 801159c:	20026f6c 	.word	0x20026f6c
 80115a0:	20026f68 	.word	0x20026f68
 80115a4:	20026f70 	.word	0x20026f70

080115a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80115a8:	b480      	push	{r7}
 80115aa:	b085      	sub	sp, #20
 80115ac:	af00      	add	r7, sp, #0
 80115ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80115b0:	4b28      	ldr	r3, [pc, #160]	; (8011654 <prvInsertBlockIntoFreeList+0xac>)
 80115b2:	60fb      	str	r3, [r7, #12]
 80115b4:	e002      	b.n	80115bc <prvInsertBlockIntoFreeList+0x14>
 80115b6:	68fb      	ldr	r3, [r7, #12]
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	60fb      	str	r3, [r7, #12]
 80115bc:	68fb      	ldr	r3, [r7, #12]
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	687a      	ldr	r2, [r7, #4]
 80115c2:	429a      	cmp	r2, r3
 80115c4:	d8f7      	bhi.n	80115b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80115c6:	68fb      	ldr	r3, [r7, #12]
 80115c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80115ca:	68fb      	ldr	r3, [r7, #12]
 80115cc:	685b      	ldr	r3, [r3, #4]
 80115ce:	68ba      	ldr	r2, [r7, #8]
 80115d0:	4413      	add	r3, r2
 80115d2:	687a      	ldr	r2, [r7, #4]
 80115d4:	429a      	cmp	r2, r3
 80115d6:	d108      	bne.n	80115ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80115d8:	68fb      	ldr	r3, [r7, #12]
 80115da:	685a      	ldr	r2, [r3, #4]
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	685b      	ldr	r3, [r3, #4]
 80115e0:	441a      	add	r2, r3
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80115e6:	68fb      	ldr	r3, [r7, #12]
 80115e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	685b      	ldr	r3, [r3, #4]
 80115f2:	68ba      	ldr	r2, [r7, #8]
 80115f4:	441a      	add	r2, r3
 80115f6:	68fb      	ldr	r3, [r7, #12]
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	429a      	cmp	r2, r3
 80115fc:	d118      	bne.n	8011630 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80115fe:	68fb      	ldr	r3, [r7, #12]
 8011600:	681a      	ldr	r2, [r3, #0]
 8011602:	4b15      	ldr	r3, [pc, #84]	; (8011658 <prvInsertBlockIntoFreeList+0xb0>)
 8011604:	681b      	ldr	r3, [r3, #0]
 8011606:	429a      	cmp	r2, r3
 8011608:	d00d      	beq.n	8011626 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	685a      	ldr	r2, [r3, #4]
 801160e:	68fb      	ldr	r3, [r7, #12]
 8011610:	681b      	ldr	r3, [r3, #0]
 8011612:	685b      	ldr	r3, [r3, #4]
 8011614:	441a      	add	r2, r3
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801161a:	68fb      	ldr	r3, [r7, #12]
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	681a      	ldr	r2, [r3, #0]
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	601a      	str	r2, [r3, #0]
 8011624:	e008      	b.n	8011638 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011626:	4b0c      	ldr	r3, [pc, #48]	; (8011658 <prvInsertBlockIntoFreeList+0xb0>)
 8011628:	681a      	ldr	r2, [r3, #0]
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	601a      	str	r2, [r3, #0]
 801162e:	e003      	b.n	8011638 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	681a      	ldr	r2, [r3, #0]
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011638:	68fa      	ldr	r2, [r7, #12]
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	429a      	cmp	r2, r3
 801163e:	d002      	beq.n	8011646 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011640:	68fb      	ldr	r3, [r7, #12]
 8011642:	687a      	ldr	r2, [r7, #4]
 8011644:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011646:	bf00      	nop
 8011648:	3714      	adds	r7, #20
 801164a:	46bd      	mov	sp, r7
 801164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011650:	4770      	bx	lr
 8011652:	bf00      	nop
 8011654:	20026f5c 	.word	0x20026f5c
 8011658:	20026f64 	.word	0x20026f64

0801165c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801165c:	b480      	push	{r7}
 801165e:	b083      	sub	sp, #12
 8011660:	af00      	add	r7, sp, #0
 8011662:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	f103 0208 	add.w	r2, r3, #8
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	f04f 32ff 	mov.w	r2, #4294967295
 8011674:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	f103 0208 	add.w	r2, r3, #8
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	f103 0208 	add.w	r2, r3, #8
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	2200      	movs	r2, #0
 801168e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011690:	bf00      	nop
 8011692:	370c      	adds	r7, #12
 8011694:	46bd      	mov	sp, r7
 8011696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801169a:	4770      	bx	lr

0801169c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801169c:	b480      	push	{r7}
 801169e:	b083      	sub	sp, #12
 80116a0:	af00      	add	r7, sp, #0
 80116a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	2200      	movs	r2, #0
 80116a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80116aa:	bf00      	nop
 80116ac:	370c      	adds	r7, #12
 80116ae:	46bd      	mov	sp, r7
 80116b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116b4:	4770      	bx	lr

080116b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80116b6:	b480      	push	{r7}
 80116b8:	b085      	sub	sp, #20
 80116ba:	af00      	add	r7, sp, #0
 80116bc:	6078      	str	r0, [r7, #4]
 80116be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	685b      	ldr	r3, [r3, #4]
 80116c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80116c6:	683b      	ldr	r3, [r7, #0]
 80116c8:	68fa      	ldr	r2, [r7, #12]
 80116ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80116cc:	68fb      	ldr	r3, [r7, #12]
 80116ce:	689a      	ldr	r2, [r3, #8]
 80116d0:	683b      	ldr	r3, [r7, #0]
 80116d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80116d4:	68fb      	ldr	r3, [r7, #12]
 80116d6:	689b      	ldr	r3, [r3, #8]
 80116d8:	683a      	ldr	r2, [r7, #0]
 80116da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	683a      	ldr	r2, [r7, #0]
 80116e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80116e2:	683b      	ldr	r3, [r7, #0]
 80116e4:	687a      	ldr	r2, [r7, #4]
 80116e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	1c5a      	adds	r2, r3, #1
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	601a      	str	r2, [r3, #0]
}
 80116f2:	bf00      	nop
 80116f4:	3714      	adds	r7, #20
 80116f6:	46bd      	mov	sp, r7
 80116f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116fc:	4770      	bx	lr

080116fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80116fe:	b480      	push	{r7}
 8011700:	b085      	sub	sp, #20
 8011702:	af00      	add	r7, sp, #0
 8011704:	6078      	str	r0, [r7, #4]
 8011706:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8011708:	683b      	ldr	r3, [r7, #0]
 801170a:	681b      	ldr	r3, [r3, #0]
 801170c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801170e:	68bb      	ldr	r3, [r7, #8]
 8011710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011714:	d103      	bne.n	801171e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	691b      	ldr	r3, [r3, #16]
 801171a:	60fb      	str	r3, [r7, #12]
 801171c:	e00c      	b.n	8011738 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	3308      	adds	r3, #8
 8011722:	60fb      	str	r3, [r7, #12]
 8011724:	e002      	b.n	801172c <vListInsert+0x2e>
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	685b      	ldr	r3, [r3, #4]
 801172a:	60fb      	str	r3, [r7, #12]
 801172c:	68fb      	ldr	r3, [r7, #12]
 801172e:	685b      	ldr	r3, [r3, #4]
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	68ba      	ldr	r2, [r7, #8]
 8011734:	429a      	cmp	r2, r3
 8011736:	d2f6      	bcs.n	8011726 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	685a      	ldr	r2, [r3, #4]
 801173c:	683b      	ldr	r3, [r7, #0]
 801173e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8011740:	683b      	ldr	r3, [r7, #0]
 8011742:	685b      	ldr	r3, [r3, #4]
 8011744:	683a      	ldr	r2, [r7, #0]
 8011746:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8011748:	683b      	ldr	r3, [r7, #0]
 801174a:	68fa      	ldr	r2, [r7, #12]
 801174c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801174e:	68fb      	ldr	r3, [r7, #12]
 8011750:	683a      	ldr	r2, [r7, #0]
 8011752:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8011754:	683b      	ldr	r3, [r7, #0]
 8011756:	687a      	ldr	r2, [r7, #4]
 8011758:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	681b      	ldr	r3, [r3, #0]
 801175e:	1c5a      	adds	r2, r3, #1
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	601a      	str	r2, [r3, #0]
}
 8011764:	bf00      	nop
 8011766:	3714      	adds	r7, #20
 8011768:	46bd      	mov	sp, r7
 801176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801176e:	4770      	bx	lr

08011770 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011770:	b480      	push	{r7}
 8011772:	b085      	sub	sp, #20
 8011774:	af00      	add	r7, sp, #0
 8011776:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	691b      	ldr	r3, [r3, #16]
 801177c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	685b      	ldr	r3, [r3, #4]
 8011782:	687a      	ldr	r2, [r7, #4]
 8011784:	6892      	ldr	r2, [r2, #8]
 8011786:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	689b      	ldr	r3, [r3, #8]
 801178c:	687a      	ldr	r2, [r7, #4]
 801178e:	6852      	ldr	r2, [r2, #4]
 8011790:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	685b      	ldr	r3, [r3, #4]
 8011796:	687a      	ldr	r2, [r7, #4]
 8011798:	429a      	cmp	r2, r3
 801179a:	d103      	bne.n	80117a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	689a      	ldr	r2, [r3, #8]
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	2200      	movs	r2, #0
 80117a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80117aa:	68fb      	ldr	r3, [r7, #12]
 80117ac:	681b      	ldr	r3, [r3, #0]
 80117ae:	1e5a      	subs	r2, r3, #1
 80117b0:	68fb      	ldr	r3, [r7, #12]
 80117b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80117b4:	68fb      	ldr	r3, [r7, #12]
 80117b6:	681b      	ldr	r3, [r3, #0]
}
 80117b8:	4618      	mov	r0, r3
 80117ba:	3714      	adds	r7, #20
 80117bc:	46bd      	mov	sp, r7
 80117be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117c2:	4770      	bx	lr

080117c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80117c4:	b480      	push	{r7}
 80117c6:	b085      	sub	sp, #20
 80117c8:	af00      	add	r7, sp, #0
 80117ca:	60f8      	str	r0, [r7, #12]
 80117cc:	60b9      	str	r1, [r7, #8]
 80117ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80117d0:	68fb      	ldr	r3, [r7, #12]
 80117d2:	3b04      	subs	r3, #4
 80117d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80117dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80117de:	68fb      	ldr	r3, [r7, #12]
 80117e0:	3b04      	subs	r3, #4
 80117e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80117e4:	68bb      	ldr	r3, [r7, #8]
 80117e6:	f023 0201 	bic.w	r2, r3, #1
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	3b04      	subs	r3, #4
 80117f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80117f4:	4a0c      	ldr	r2, [pc, #48]	; (8011828 <pxPortInitialiseStack+0x64>)
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80117fa:	68fb      	ldr	r3, [r7, #12]
 80117fc:	3b14      	subs	r3, #20
 80117fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011800:	687a      	ldr	r2, [r7, #4]
 8011802:	68fb      	ldr	r3, [r7, #12]
 8011804:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011806:	68fb      	ldr	r3, [r7, #12]
 8011808:	3b04      	subs	r3, #4
 801180a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	f06f 0202 	mvn.w	r2, #2
 8011812:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011814:	68fb      	ldr	r3, [r7, #12]
 8011816:	3b20      	subs	r3, #32
 8011818:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801181a:	68fb      	ldr	r3, [r7, #12]
}
 801181c:	4618      	mov	r0, r3
 801181e:	3714      	adds	r7, #20
 8011820:	46bd      	mov	sp, r7
 8011822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011826:	4770      	bx	lr
 8011828:	0801182d 	.word	0x0801182d

0801182c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801182c:	b480      	push	{r7}
 801182e:	b085      	sub	sp, #20
 8011830:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011832:	2300      	movs	r3, #0
 8011834:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011836:	4b11      	ldr	r3, [pc, #68]	; (801187c <prvTaskExitError+0x50>)
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801183e:	d009      	beq.n	8011854 <prvTaskExitError+0x28>
 8011840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011844:	f383 8811 	msr	BASEPRI, r3
 8011848:	f3bf 8f6f 	isb	sy
 801184c:	f3bf 8f4f 	dsb	sy
 8011850:	60fb      	str	r3, [r7, #12]
 8011852:	e7fe      	b.n	8011852 <prvTaskExitError+0x26>
 8011854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011858:	f383 8811 	msr	BASEPRI, r3
 801185c:	f3bf 8f6f 	isb	sy
 8011860:	f3bf 8f4f 	dsb	sy
 8011864:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011866:	bf00      	nop
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	2b00      	cmp	r3, #0
 801186c:	d0fc      	beq.n	8011868 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801186e:	bf00      	nop
 8011870:	3714      	adds	r7, #20
 8011872:	46bd      	mov	sp, r7
 8011874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011878:	4770      	bx	lr
 801187a:	bf00      	nop
 801187c:	20000084 	.word	0x20000084

08011880 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011880:	4b07      	ldr	r3, [pc, #28]	; (80118a0 <pxCurrentTCBConst2>)
 8011882:	6819      	ldr	r1, [r3, #0]
 8011884:	6808      	ldr	r0, [r1, #0]
 8011886:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801188a:	f380 8809 	msr	PSP, r0
 801188e:	f3bf 8f6f 	isb	sy
 8011892:	f04f 0000 	mov.w	r0, #0
 8011896:	f380 8811 	msr	BASEPRI, r0
 801189a:	4770      	bx	lr
 801189c:	f3af 8000 	nop.w

080118a0 <pxCurrentTCBConst2>:
 80118a0:	20026f7c 	.word	0x20026f7c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80118a4:	bf00      	nop
 80118a6:	bf00      	nop

080118a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80118a8:	4808      	ldr	r0, [pc, #32]	; (80118cc <prvPortStartFirstTask+0x24>)
 80118aa:	6800      	ldr	r0, [r0, #0]
 80118ac:	6800      	ldr	r0, [r0, #0]
 80118ae:	f380 8808 	msr	MSP, r0
 80118b2:	f04f 0000 	mov.w	r0, #0
 80118b6:	f380 8814 	msr	CONTROL, r0
 80118ba:	b662      	cpsie	i
 80118bc:	b661      	cpsie	f
 80118be:	f3bf 8f4f 	dsb	sy
 80118c2:	f3bf 8f6f 	isb	sy
 80118c6:	df00      	svc	0
 80118c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80118ca:	bf00      	nop
 80118cc:	e000ed08 	.word	0xe000ed08

080118d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80118d0:	b580      	push	{r7, lr}
 80118d2:	b086      	sub	sp, #24
 80118d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80118d6:	4b44      	ldr	r3, [pc, #272]	; (80119e8 <xPortStartScheduler+0x118>)
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	4a44      	ldr	r2, [pc, #272]	; (80119ec <xPortStartScheduler+0x11c>)
 80118dc:	4293      	cmp	r3, r2
 80118de:	d109      	bne.n	80118f4 <xPortStartScheduler+0x24>
 80118e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118e4:	f383 8811 	msr	BASEPRI, r3
 80118e8:	f3bf 8f6f 	isb	sy
 80118ec:	f3bf 8f4f 	dsb	sy
 80118f0:	613b      	str	r3, [r7, #16]
 80118f2:	e7fe      	b.n	80118f2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80118f4:	4b3c      	ldr	r3, [pc, #240]	; (80119e8 <xPortStartScheduler+0x118>)
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	4a3d      	ldr	r2, [pc, #244]	; (80119f0 <xPortStartScheduler+0x120>)
 80118fa:	4293      	cmp	r3, r2
 80118fc:	d109      	bne.n	8011912 <xPortStartScheduler+0x42>
 80118fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011902:	f383 8811 	msr	BASEPRI, r3
 8011906:	f3bf 8f6f 	isb	sy
 801190a:	f3bf 8f4f 	dsb	sy
 801190e:	60fb      	str	r3, [r7, #12]
 8011910:	e7fe      	b.n	8011910 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011912:	4b38      	ldr	r3, [pc, #224]	; (80119f4 <xPortStartScheduler+0x124>)
 8011914:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8011916:	697b      	ldr	r3, [r7, #20]
 8011918:	781b      	ldrb	r3, [r3, #0]
 801191a:	b2db      	uxtb	r3, r3
 801191c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801191e:	697b      	ldr	r3, [r7, #20]
 8011920:	22ff      	movs	r2, #255	; 0xff
 8011922:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011924:	697b      	ldr	r3, [r7, #20]
 8011926:	781b      	ldrb	r3, [r3, #0]
 8011928:	b2db      	uxtb	r3, r3
 801192a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801192c:	78fb      	ldrb	r3, [r7, #3]
 801192e:	b2db      	uxtb	r3, r3
 8011930:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011934:	b2da      	uxtb	r2, r3
 8011936:	4b30      	ldr	r3, [pc, #192]	; (80119f8 <xPortStartScheduler+0x128>)
 8011938:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801193a:	4b30      	ldr	r3, [pc, #192]	; (80119fc <xPortStartScheduler+0x12c>)
 801193c:	2207      	movs	r2, #7
 801193e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011940:	e009      	b.n	8011956 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8011942:	4b2e      	ldr	r3, [pc, #184]	; (80119fc <xPortStartScheduler+0x12c>)
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	3b01      	subs	r3, #1
 8011948:	4a2c      	ldr	r2, [pc, #176]	; (80119fc <xPortStartScheduler+0x12c>)
 801194a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801194c:	78fb      	ldrb	r3, [r7, #3]
 801194e:	b2db      	uxtb	r3, r3
 8011950:	005b      	lsls	r3, r3, #1
 8011952:	b2db      	uxtb	r3, r3
 8011954:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011956:	78fb      	ldrb	r3, [r7, #3]
 8011958:	b2db      	uxtb	r3, r3
 801195a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801195e:	2b80      	cmp	r3, #128	; 0x80
 8011960:	d0ef      	beq.n	8011942 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011962:	4b26      	ldr	r3, [pc, #152]	; (80119fc <xPortStartScheduler+0x12c>)
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	f1c3 0307 	rsb	r3, r3, #7
 801196a:	2b04      	cmp	r3, #4
 801196c:	d009      	beq.n	8011982 <xPortStartScheduler+0xb2>
 801196e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011972:	f383 8811 	msr	BASEPRI, r3
 8011976:	f3bf 8f6f 	isb	sy
 801197a:	f3bf 8f4f 	dsb	sy
 801197e:	60bb      	str	r3, [r7, #8]
 8011980:	e7fe      	b.n	8011980 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011982:	4b1e      	ldr	r3, [pc, #120]	; (80119fc <xPortStartScheduler+0x12c>)
 8011984:	681b      	ldr	r3, [r3, #0]
 8011986:	021b      	lsls	r3, r3, #8
 8011988:	4a1c      	ldr	r2, [pc, #112]	; (80119fc <xPortStartScheduler+0x12c>)
 801198a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801198c:	4b1b      	ldr	r3, [pc, #108]	; (80119fc <xPortStartScheduler+0x12c>)
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8011994:	4a19      	ldr	r2, [pc, #100]	; (80119fc <xPortStartScheduler+0x12c>)
 8011996:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	b2da      	uxtb	r2, r3
 801199c:	697b      	ldr	r3, [r7, #20]
 801199e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80119a0:	4b17      	ldr	r3, [pc, #92]	; (8011a00 <xPortStartScheduler+0x130>)
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	4a16      	ldr	r2, [pc, #88]	; (8011a00 <xPortStartScheduler+0x130>)
 80119a6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80119aa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80119ac:	4b14      	ldr	r3, [pc, #80]	; (8011a00 <xPortStartScheduler+0x130>)
 80119ae:	681b      	ldr	r3, [r3, #0]
 80119b0:	4a13      	ldr	r2, [pc, #76]	; (8011a00 <xPortStartScheduler+0x130>)
 80119b2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80119b6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80119b8:	f000 f8d6 	bl	8011b68 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80119bc:	4b11      	ldr	r3, [pc, #68]	; (8011a04 <xPortStartScheduler+0x134>)
 80119be:	2200      	movs	r2, #0
 80119c0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80119c2:	f000 f8f5 	bl	8011bb0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80119c6:	4b10      	ldr	r3, [pc, #64]	; (8011a08 <xPortStartScheduler+0x138>)
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	4a0f      	ldr	r2, [pc, #60]	; (8011a08 <xPortStartScheduler+0x138>)
 80119cc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80119d0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80119d2:	f7ff ff69 	bl	80118a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80119d6:	f001 fdc5 	bl	8013564 <vTaskSwitchContext>
	prvTaskExitError();
 80119da:	f7ff ff27 	bl	801182c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80119de:	2300      	movs	r3, #0
}
 80119e0:	4618      	mov	r0, r3
 80119e2:	3718      	adds	r7, #24
 80119e4:	46bd      	mov	sp, r7
 80119e6:	bd80      	pop	{r7, pc}
 80119e8:	e000ed00 	.word	0xe000ed00
 80119ec:	410fc271 	.word	0x410fc271
 80119f0:	410fc270 	.word	0x410fc270
 80119f4:	e000e400 	.word	0xe000e400
 80119f8:	20026f74 	.word	0x20026f74
 80119fc:	20026f78 	.word	0x20026f78
 8011a00:	e000ed20 	.word	0xe000ed20
 8011a04:	20000084 	.word	0x20000084
 8011a08:	e000ef34 	.word	0xe000ef34

08011a0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011a0c:	b480      	push	{r7}
 8011a0e:	b083      	sub	sp, #12
 8011a10:	af00      	add	r7, sp, #0
 8011a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a16:	f383 8811 	msr	BASEPRI, r3
 8011a1a:	f3bf 8f6f 	isb	sy
 8011a1e:	f3bf 8f4f 	dsb	sy
 8011a22:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011a24:	4b0e      	ldr	r3, [pc, #56]	; (8011a60 <vPortEnterCritical+0x54>)
 8011a26:	681b      	ldr	r3, [r3, #0]
 8011a28:	3301      	adds	r3, #1
 8011a2a:	4a0d      	ldr	r2, [pc, #52]	; (8011a60 <vPortEnterCritical+0x54>)
 8011a2c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011a2e:	4b0c      	ldr	r3, [pc, #48]	; (8011a60 <vPortEnterCritical+0x54>)
 8011a30:	681b      	ldr	r3, [r3, #0]
 8011a32:	2b01      	cmp	r3, #1
 8011a34:	d10e      	bne.n	8011a54 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011a36:	4b0b      	ldr	r3, [pc, #44]	; (8011a64 <vPortEnterCritical+0x58>)
 8011a38:	681b      	ldr	r3, [r3, #0]
 8011a3a:	b2db      	uxtb	r3, r3
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d009      	beq.n	8011a54 <vPortEnterCritical+0x48>
 8011a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a44:	f383 8811 	msr	BASEPRI, r3
 8011a48:	f3bf 8f6f 	isb	sy
 8011a4c:	f3bf 8f4f 	dsb	sy
 8011a50:	603b      	str	r3, [r7, #0]
 8011a52:	e7fe      	b.n	8011a52 <vPortEnterCritical+0x46>
	}
}
 8011a54:	bf00      	nop
 8011a56:	370c      	adds	r7, #12
 8011a58:	46bd      	mov	sp, r7
 8011a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a5e:	4770      	bx	lr
 8011a60:	20000084 	.word	0x20000084
 8011a64:	e000ed04 	.word	0xe000ed04

08011a68 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011a68:	b480      	push	{r7}
 8011a6a:	b083      	sub	sp, #12
 8011a6c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8011a6e:	4b11      	ldr	r3, [pc, #68]	; (8011ab4 <vPortExitCritical+0x4c>)
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d109      	bne.n	8011a8a <vPortExitCritical+0x22>
 8011a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a7a:	f383 8811 	msr	BASEPRI, r3
 8011a7e:	f3bf 8f6f 	isb	sy
 8011a82:	f3bf 8f4f 	dsb	sy
 8011a86:	607b      	str	r3, [r7, #4]
 8011a88:	e7fe      	b.n	8011a88 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8011a8a:	4b0a      	ldr	r3, [pc, #40]	; (8011ab4 <vPortExitCritical+0x4c>)
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	3b01      	subs	r3, #1
 8011a90:	4a08      	ldr	r2, [pc, #32]	; (8011ab4 <vPortExitCritical+0x4c>)
 8011a92:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011a94:	4b07      	ldr	r3, [pc, #28]	; (8011ab4 <vPortExitCritical+0x4c>)
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d104      	bne.n	8011aa6 <vPortExitCritical+0x3e>
 8011a9c:	2300      	movs	r3, #0
 8011a9e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011aa0:	683b      	ldr	r3, [r7, #0]
 8011aa2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8011aa6:	bf00      	nop
 8011aa8:	370c      	adds	r7, #12
 8011aaa:	46bd      	mov	sp, r7
 8011aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ab0:	4770      	bx	lr
 8011ab2:	bf00      	nop
 8011ab4:	20000084 	.word	0x20000084
	...

08011ac0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011ac0:	f3ef 8009 	mrs	r0, PSP
 8011ac4:	f3bf 8f6f 	isb	sy
 8011ac8:	4b15      	ldr	r3, [pc, #84]	; (8011b20 <pxCurrentTCBConst>)
 8011aca:	681a      	ldr	r2, [r3, #0]
 8011acc:	f01e 0f10 	tst.w	lr, #16
 8011ad0:	bf08      	it	eq
 8011ad2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011ad6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ada:	6010      	str	r0, [r2, #0]
 8011adc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011ae0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011ae4:	f380 8811 	msr	BASEPRI, r0
 8011ae8:	f3bf 8f4f 	dsb	sy
 8011aec:	f3bf 8f6f 	isb	sy
 8011af0:	f001 fd38 	bl	8013564 <vTaskSwitchContext>
 8011af4:	f04f 0000 	mov.w	r0, #0
 8011af8:	f380 8811 	msr	BASEPRI, r0
 8011afc:	bc09      	pop	{r0, r3}
 8011afe:	6819      	ldr	r1, [r3, #0]
 8011b00:	6808      	ldr	r0, [r1, #0]
 8011b02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b06:	f01e 0f10 	tst.w	lr, #16
 8011b0a:	bf08      	it	eq
 8011b0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011b10:	f380 8809 	msr	PSP, r0
 8011b14:	f3bf 8f6f 	isb	sy
 8011b18:	4770      	bx	lr
 8011b1a:	bf00      	nop
 8011b1c:	f3af 8000 	nop.w

08011b20 <pxCurrentTCBConst>:
 8011b20:	20026f7c 	.word	0x20026f7c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011b24:	bf00      	nop
 8011b26:	bf00      	nop

08011b28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011b28:	b580      	push	{r7, lr}
 8011b2a:	b082      	sub	sp, #8
 8011b2c:	af00      	add	r7, sp, #0
	__asm volatile
 8011b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b32:	f383 8811 	msr	BASEPRI, r3
 8011b36:	f3bf 8f6f 	isb	sy
 8011b3a:	f3bf 8f4f 	dsb	sy
 8011b3e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011b40:	f001 fc50 	bl	80133e4 <xTaskIncrementTick>
 8011b44:	4603      	mov	r3, r0
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	d003      	beq.n	8011b52 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8011b4a:	4b06      	ldr	r3, [pc, #24]	; (8011b64 <SysTick_Handler+0x3c>)
 8011b4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b50:	601a      	str	r2, [r3, #0]
 8011b52:	2300      	movs	r3, #0
 8011b54:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011b56:	683b      	ldr	r3, [r7, #0]
 8011b58:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8011b5c:	bf00      	nop
 8011b5e:	3708      	adds	r7, #8
 8011b60:	46bd      	mov	sp, r7
 8011b62:	bd80      	pop	{r7, pc}
 8011b64:	e000ed04 	.word	0xe000ed04

08011b68 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8011b68:	b480      	push	{r7}
 8011b6a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011b6c:	4b0b      	ldr	r3, [pc, #44]	; (8011b9c <vPortSetupTimerInterrupt+0x34>)
 8011b6e:	2200      	movs	r2, #0
 8011b70:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011b72:	4b0b      	ldr	r3, [pc, #44]	; (8011ba0 <vPortSetupTimerInterrupt+0x38>)
 8011b74:	2200      	movs	r2, #0
 8011b76:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8011b78:	4b0a      	ldr	r3, [pc, #40]	; (8011ba4 <vPortSetupTimerInterrupt+0x3c>)
 8011b7a:	681b      	ldr	r3, [r3, #0]
 8011b7c:	4a0a      	ldr	r2, [pc, #40]	; (8011ba8 <vPortSetupTimerInterrupt+0x40>)
 8011b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8011b82:	099b      	lsrs	r3, r3, #6
 8011b84:	4a09      	ldr	r2, [pc, #36]	; (8011bac <vPortSetupTimerInterrupt+0x44>)
 8011b86:	3b01      	subs	r3, #1
 8011b88:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8011b8a:	4b04      	ldr	r3, [pc, #16]	; (8011b9c <vPortSetupTimerInterrupt+0x34>)
 8011b8c:	2207      	movs	r2, #7
 8011b8e:	601a      	str	r2, [r3, #0]
}
 8011b90:	bf00      	nop
 8011b92:	46bd      	mov	sp, r7
 8011b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b98:	4770      	bx	lr
 8011b9a:	bf00      	nop
 8011b9c:	e000e010 	.word	0xe000e010
 8011ba0:	e000e018 	.word	0xe000e018
 8011ba4:	20000078 	.word	0x20000078
 8011ba8:	10624dd3 	.word	0x10624dd3
 8011bac:	e000e014 	.word	0xe000e014

08011bb0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011bb0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011bc0 <vPortEnableVFP+0x10>
 8011bb4:	6801      	ldr	r1, [r0, #0]
 8011bb6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8011bba:	6001      	str	r1, [r0, #0]
 8011bbc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011bbe:	bf00      	nop
 8011bc0:	e000ed88 	.word	0xe000ed88

08011bc4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011bc4:	b480      	push	{r7}
 8011bc6:	b085      	sub	sp, #20
 8011bc8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8011bca:	f3ef 8305 	mrs	r3, IPSR
 8011bce:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011bd0:	68fb      	ldr	r3, [r7, #12]
 8011bd2:	2b0f      	cmp	r3, #15
 8011bd4:	d913      	bls.n	8011bfe <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8011bd6:	4a16      	ldr	r2, [pc, #88]	; (8011c30 <vPortValidateInterruptPriority+0x6c>)
 8011bd8:	68fb      	ldr	r3, [r7, #12]
 8011bda:	4413      	add	r3, r2
 8011bdc:	781b      	ldrb	r3, [r3, #0]
 8011bde:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011be0:	4b14      	ldr	r3, [pc, #80]	; (8011c34 <vPortValidateInterruptPriority+0x70>)
 8011be2:	781b      	ldrb	r3, [r3, #0]
 8011be4:	7afa      	ldrb	r2, [r7, #11]
 8011be6:	429a      	cmp	r2, r3
 8011be8:	d209      	bcs.n	8011bfe <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8011bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bee:	f383 8811 	msr	BASEPRI, r3
 8011bf2:	f3bf 8f6f 	isb	sy
 8011bf6:	f3bf 8f4f 	dsb	sy
 8011bfa:	607b      	str	r3, [r7, #4]
 8011bfc:	e7fe      	b.n	8011bfc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011bfe:	4b0e      	ldr	r3, [pc, #56]	; (8011c38 <vPortValidateInterruptPriority+0x74>)
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8011c06:	4b0d      	ldr	r3, [pc, #52]	; (8011c3c <vPortValidateInterruptPriority+0x78>)
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	429a      	cmp	r2, r3
 8011c0c:	d909      	bls.n	8011c22 <vPortValidateInterruptPriority+0x5e>
 8011c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c12:	f383 8811 	msr	BASEPRI, r3
 8011c16:	f3bf 8f6f 	isb	sy
 8011c1a:	f3bf 8f4f 	dsb	sy
 8011c1e:	603b      	str	r3, [r7, #0]
 8011c20:	e7fe      	b.n	8011c20 <vPortValidateInterruptPriority+0x5c>
	}
 8011c22:	bf00      	nop
 8011c24:	3714      	adds	r7, #20
 8011c26:	46bd      	mov	sp, r7
 8011c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c2c:	4770      	bx	lr
 8011c2e:	bf00      	nop
 8011c30:	e000e3f0 	.word	0xe000e3f0
 8011c34:	20026f74 	.word	0x20026f74
 8011c38:	e000ed0c 	.word	0xe000ed0c
 8011c3c:	20026f78 	.word	0x20026f78

08011c40 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011c40:	b580      	push	{r7, lr}
 8011c42:	b084      	sub	sp, #16
 8011c44:	af00      	add	r7, sp, #0
 8011c46:	6078      	str	r0, [r7, #4]
 8011c48:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011c4e:	68fb      	ldr	r3, [r7, #12]
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d109      	bne.n	8011c68 <xQueueGenericReset+0x28>
 8011c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c58:	f383 8811 	msr	BASEPRI, r3
 8011c5c:	f3bf 8f6f 	isb	sy
 8011c60:	f3bf 8f4f 	dsb	sy
 8011c64:	60bb      	str	r3, [r7, #8]
 8011c66:	e7fe      	b.n	8011c66 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8011c68:	f7ff fed0 	bl	8011a0c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	681a      	ldr	r2, [r3, #0]
 8011c70:	68fb      	ldr	r3, [r7, #12]
 8011c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011c74:	68f9      	ldr	r1, [r7, #12]
 8011c76:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011c78:	fb01 f303 	mul.w	r3, r1, r3
 8011c7c:	441a      	add	r2, r3
 8011c7e:	68fb      	ldr	r3, [r7, #12]
 8011c80:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8011c82:	68fb      	ldr	r3, [r7, #12]
 8011c84:	2200      	movs	r2, #0
 8011c86:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8011c88:	68fb      	ldr	r3, [r7, #12]
 8011c8a:	681a      	ldr	r2, [r3, #0]
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011c90:	68fb      	ldr	r3, [r7, #12]
 8011c92:	681a      	ldr	r2, [r3, #0]
 8011c94:	68fb      	ldr	r3, [r7, #12]
 8011c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011c98:	3b01      	subs	r3, #1
 8011c9a:	68f9      	ldr	r1, [r7, #12]
 8011c9c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011c9e:	fb01 f303 	mul.w	r3, r1, r3
 8011ca2:	441a      	add	r2, r3
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8011ca8:	68fb      	ldr	r3, [r7, #12]
 8011caa:	22ff      	movs	r2, #255	; 0xff
 8011cac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8011cb0:	68fb      	ldr	r3, [r7, #12]
 8011cb2:	22ff      	movs	r2, #255	; 0xff
 8011cb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8011cb8:	683b      	ldr	r3, [r7, #0]
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d114      	bne.n	8011ce8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011cbe:	68fb      	ldr	r3, [r7, #12]
 8011cc0:	691b      	ldr	r3, [r3, #16]
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d01a      	beq.n	8011cfc <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	3310      	adds	r3, #16
 8011cca:	4618      	mov	r0, r3
 8011ccc:	f001 fd20 	bl	8013710 <xTaskRemoveFromEventList>
 8011cd0:	4603      	mov	r3, r0
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d012      	beq.n	8011cfc <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8011cd6:	4b0d      	ldr	r3, [pc, #52]	; (8011d0c <xQueueGenericReset+0xcc>)
 8011cd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011cdc:	601a      	str	r2, [r3, #0]
 8011cde:	f3bf 8f4f 	dsb	sy
 8011ce2:	f3bf 8f6f 	isb	sy
 8011ce6:	e009      	b.n	8011cfc <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011ce8:	68fb      	ldr	r3, [r7, #12]
 8011cea:	3310      	adds	r3, #16
 8011cec:	4618      	mov	r0, r3
 8011cee:	f7ff fcb5 	bl	801165c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8011cf2:	68fb      	ldr	r3, [r7, #12]
 8011cf4:	3324      	adds	r3, #36	; 0x24
 8011cf6:	4618      	mov	r0, r3
 8011cf8:	f7ff fcb0 	bl	801165c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8011cfc:	f7ff feb4 	bl	8011a68 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8011d00:	2301      	movs	r3, #1
}
 8011d02:	4618      	mov	r0, r3
 8011d04:	3710      	adds	r7, #16
 8011d06:	46bd      	mov	sp, r7
 8011d08:	bd80      	pop	{r7, pc}
 8011d0a:	bf00      	nop
 8011d0c:	e000ed04 	.word	0xe000ed04

08011d10 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8011d10:	b580      	push	{r7, lr}
 8011d12:	b08e      	sub	sp, #56	; 0x38
 8011d14:	af02      	add	r7, sp, #8
 8011d16:	60f8      	str	r0, [r7, #12]
 8011d18:	60b9      	str	r1, [r7, #8]
 8011d1a:	607a      	str	r2, [r7, #4]
 8011d1c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011d1e:	68fb      	ldr	r3, [r7, #12]
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d109      	bne.n	8011d38 <xQueueGenericCreateStatic+0x28>
 8011d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d28:	f383 8811 	msr	BASEPRI, r3
 8011d2c:	f3bf 8f6f 	isb	sy
 8011d30:	f3bf 8f4f 	dsb	sy
 8011d34:	62bb      	str	r3, [r7, #40]	; 0x28
 8011d36:	e7fe      	b.n	8011d36 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8011d38:	683b      	ldr	r3, [r7, #0]
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	d109      	bne.n	8011d52 <xQueueGenericCreateStatic+0x42>
 8011d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d42:	f383 8811 	msr	BASEPRI, r3
 8011d46:	f3bf 8f6f 	isb	sy
 8011d4a:	f3bf 8f4f 	dsb	sy
 8011d4e:	627b      	str	r3, [r7, #36]	; 0x24
 8011d50:	e7fe      	b.n	8011d50 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d002      	beq.n	8011d5e <xQueueGenericCreateStatic+0x4e>
 8011d58:	68bb      	ldr	r3, [r7, #8]
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d001      	beq.n	8011d62 <xQueueGenericCreateStatic+0x52>
 8011d5e:	2301      	movs	r3, #1
 8011d60:	e000      	b.n	8011d64 <xQueueGenericCreateStatic+0x54>
 8011d62:	2300      	movs	r3, #0
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	d109      	bne.n	8011d7c <xQueueGenericCreateStatic+0x6c>
 8011d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d6c:	f383 8811 	msr	BASEPRI, r3
 8011d70:	f3bf 8f6f 	isb	sy
 8011d74:	f3bf 8f4f 	dsb	sy
 8011d78:	623b      	str	r3, [r7, #32]
 8011d7a:	e7fe      	b.n	8011d7a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d102      	bne.n	8011d88 <xQueueGenericCreateStatic+0x78>
 8011d82:	68bb      	ldr	r3, [r7, #8]
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d101      	bne.n	8011d8c <xQueueGenericCreateStatic+0x7c>
 8011d88:	2301      	movs	r3, #1
 8011d8a:	e000      	b.n	8011d8e <xQueueGenericCreateStatic+0x7e>
 8011d8c:	2300      	movs	r3, #0
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d109      	bne.n	8011da6 <xQueueGenericCreateStatic+0x96>
 8011d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d96:	f383 8811 	msr	BASEPRI, r3
 8011d9a:	f3bf 8f6f 	isb	sy
 8011d9e:	f3bf 8f4f 	dsb	sy
 8011da2:	61fb      	str	r3, [r7, #28]
 8011da4:	e7fe      	b.n	8011da4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8011da6:	2350      	movs	r3, #80	; 0x50
 8011da8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8011daa:	697b      	ldr	r3, [r7, #20]
 8011dac:	2b50      	cmp	r3, #80	; 0x50
 8011dae:	d009      	beq.n	8011dc4 <xQueueGenericCreateStatic+0xb4>
 8011db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011db4:	f383 8811 	msr	BASEPRI, r3
 8011db8:	f3bf 8f6f 	isb	sy
 8011dbc:	f3bf 8f4f 	dsb	sy
 8011dc0:	61bb      	str	r3, [r7, #24]
 8011dc2:	e7fe      	b.n	8011dc2 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8011dc4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011dc6:	683b      	ldr	r3, [r7, #0]
 8011dc8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8011dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d00d      	beq.n	8011dec <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8011dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dd2:	2201      	movs	r2, #1
 8011dd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011dd8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8011ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dde:	9300      	str	r3, [sp, #0]
 8011de0:	4613      	mov	r3, r2
 8011de2:	687a      	ldr	r2, [r7, #4]
 8011de4:	68b9      	ldr	r1, [r7, #8]
 8011de6:	68f8      	ldr	r0, [r7, #12]
 8011de8:	f000 f844 	bl	8011e74 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8011dee:	4618      	mov	r0, r3
 8011df0:	3730      	adds	r7, #48	; 0x30
 8011df2:	46bd      	mov	sp, r7
 8011df4:	bd80      	pop	{r7, pc}

08011df6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8011df6:	b580      	push	{r7, lr}
 8011df8:	b08a      	sub	sp, #40	; 0x28
 8011dfa:	af02      	add	r7, sp, #8
 8011dfc:	60f8      	str	r0, [r7, #12]
 8011dfe:	60b9      	str	r1, [r7, #8]
 8011e00:	4613      	mov	r3, r2
 8011e02:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d109      	bne.n	8011e1e <xQueueGenericCreate+0x28>
 8011e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e0e:	f383 8811 	msr	BASEPRI, r3
 8011e12:	f3bf 8f6f 	isb	sy
 8011e16:	f3bf 8f4f 	dsb	sy
 8011e1a:	613b      	str	r3, [r7, #16]
 8011e1c:	e7fe      	b.n	8011e1c <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8011e1e:	68bb      	ldr	r3, [r7, #8]
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d102      	bne.n	8011e2a <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8011e24:	2300      	movs	r3, #0
 8011e26:	61fb      	str	r3, [r7, #28]
 8011e28:	e004      	b.n	8011e34 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011e2a:	68fb      	ldr	r3, [r7, #12]
 8011e2c:	68ba      	ldr	r2, [r7, #8]
 8011e2e:	fb02 f303 	mul.w	r3, r2, r3
 8011e32:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8011e34:	69fb      	ldr	r3, [r7, #28]
 8011e36:	3350      	adds	r3, #80	; 0x50
 8011e38:	4618      	mov	r0, r3
 8011e3a:	f7ff fa33 	bl	80112a4 <pvPortMalloc>
 8011e3e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8011e40:	69bb      	ldr	r3, [r7, #24]
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d011      	beq.n	8011e6a <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8011e46:	69bb      	ldr	r3, [r7, #24]
 8011e48:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011e4a:	697b      	ldr	r3, [r7, #20]
 8011e4c:	3350      	adds	r3, #80	; 0x50
 8011e4e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8011e50:	69bb      	ldr	r3, [r7, #24]
 8011e52:	2200      	movs	r2, #0
 8011e54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011e58:	79fa      	ldrb	r2, [r7, #7]
 8011e5a:	69bb      	ldr	r3, [r7, #24]
 8011e5c:	9300      	str	r3, [sp, #0]
 8011e5e:	4613      	mov	r3, r2
 8011e60:	697a      	ldr	r2, [r7, #20]
 8011e62:	68b9      	ldr	r1, [r7, #8]
 8011e64:	68f8      	ldr	r0, [r7, #12]
 8011e66:	f000 f805 	bl	8011e74 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011e6a:	69bb      	ldr	r3, [r7, #24]
	}
 8011e6c:	4618      	mov	r0, r3
 8011e6e:	3720      	adds	r7, #32
 8011e70:	46bd      	mov	sp, r7
 8011e72:	bd80      	pop	{r7, pc}

08011e74 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8011e74:	b580      	push	{r7, lr}
 8011e76:	b084      	sub	sp, #16
 8011e78:	af00      	add	r7, sp, #0
 8011e7a:	60f8      	str	r0, [r7, #12]
 8011e7c:	60b9      	str	r1, [r7, #8]
 8011e7e:	607a      	str	r2, [r7, #4]
 8011e80:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8011e82:	68bb      	ldr	r3, [r7, #8]
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d103      	bne.n	8011e90 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8011e88:	69bb      	ldr	r3, [r7, #24]
 8011e8a:	69ba      	ldr	r2, [r7, #24]
 8011e8c:	601a      	str	r2, [r3, #0]
 8011e8e:	e002      	b.n	8011e96 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8011e90:	69bb      	ldr	r3, [r7, #24]
 8011e92:	687a      	ldr	r2, [r7, #4]
 8011e94:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8011e96:	69bb      	ldr	r3, [r7, #24]
 8011e98:	68fa      	ldr	r2, [r7, #12]
 8011e9a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8011e9c:	69bb      	ldr	r3, [r7, #24]
 8011e9e:	68ba      	ldr	r2, [r7, #8]
 8011ea0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8011ea2:	2101      	movs	r1, #1
 8011ea4:	69b8      	ldr	r0, [r7, #24]
 8011ea6:	f7ff fecb 	bl	8011c40 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8011eaa:	69bb      	ldr	r3, [r7, #24]
 8011eac:	78fa      	ldrb	r2, [r7, #3]
 8011eae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8011eb2:	bf00      	nop
 8011eb4:	3710      	adds	r7, #16
 8011eb6:	46bd      	mov	sp, r7
 8011eb8:	bd80      	pop	{r7, pc}

08011eba <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8011eba:	b580      	push	{r7, lr}
 8011ebc:	b082      	sub	sp, #8
 8011ebe:	af00      	add	r7, sp, #0
 8011ec0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d00e      	beq.n	8011ee6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	2200      	movs	r2, #0
 8011ecc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	2200      	movs	r2, #0
 8011ed2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	2200      	movs	r2, #0
 8011ed8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8011eda:	2300      	movs	r3, #0
 8011edc:	2200      	movs	r2, #0
 8011ede:	2100      	movs	r1, #0
 8011ee0:	6878      	ldr	r0, [r7, #4]
 8011ee2:	f000 f905 	bl	80120f0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8011ee6:	bf00      	nop
 8011ee8:	3708      	adds	r7, #8
 8011eea:	46bd      	mov	sp, r7
 8011eec:	bd80      	pop	{r7, pc}

08011eee <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8011eee:	b580      	push	{r7, lr}
 8011ef0:	b086      	sub	sp, #24
 8011ef2:	af00      	add	r7, sp, #0
 8011ef4:	4603      	mov	r3, r0
 8011ef6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8011ef8:	2301      	movs	r3, #1
 8011efa:	617b      	str	r3, [r7, #20]
 8011efc:	2300      	movs	r3, #0
 8011efe:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8011f00:	79fb      	ldrb	r3, [r7, #7]
 8011f02:	461a      	mov	r2, r3
 8011f04:	6939      	ldr	r1, [r7, #16]
 8011f06:	6978      	ldr	r0, [r7, #20]
 8011f08:	f7ff ff75 	bl	8011df6 <xQueueGenericCreate>
 8011f0c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8011f0e:	68f8      	ldr	r0, [r7, #12]
 8011f10:	f7ff ffd3 	bl	8011eba <prvInitialiseMutex>

		return xNewQueue;
 8011f14:	68fb      	ldr	r3, [r7, #12]
	}
 8011f16:	4618      	mov	r0, r3
 8011f18:	3718      	adds	r7, #24
 8011f1a:	46bd      	mov	sp, r7
 8011f1c:	bd80      	pop	{r7, pc}

08011f1e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8011f1e:	b580      	push	{r7, lr}
 8011f20:	b088      	sub	sp, #32
 8011f22:	af02      	add	r7, sp, #8
 8011f24:	4603      	mov	r3, r0
 8011f26:	6039      	str	r1, [r7, #0]
 8011f28:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8011f2a:	2301      	movs	r3, #1
 8011f2c:	617b      	str	r3, [r7, #20]
 8011f2e:	2300      	movs	r3, #0
 8011f30:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8011f32:	79fb      	ldrb	r3, [r7, #7]
 8011f34:	9300      	str	r3, [sp, #0]
 8011f36:	683b      	ldr	r3, [r7, #0]
 8011f38:	2200      	movs	r2, #0
 8011f3a:	6939      	ldr	r1, [r7, #16]
 8011f3c:	6978      	ldr	r0, [r7, #20]
 8011f3e:	f7ff fee7 	bl	8011d10 <xQueueGenericCreateStatic>
 8011f42:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8011f44:	68f8      	ldr	r0, [r7, #12]
 8011f46:	f7ff ffb8 	bl	8011eba <prvInitialiseMutex>

		return xNewQueue;
 8011f4a:	68fb      	ldr	r3, [r7, #12]
	}
 8011f4c:	4618      	mov	r0, r3
 8011f4e:	3718      	adds	r7, #24
 8011f50:	46bd      	mov	sp, r7
 8011f52:	bd80      	pop	{r7, pc}

08011f54 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8011f54:	b590      	push	{r4, r7, lr}
 8011f56:	b087      	sub	sp, #28
 8011f58:	af00      	add	r7, sp, #0
 8011f5a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8011f60:	693b      	ldr	r3, [r7, #16]
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d109      	bne.n	8011f7a <xQueueGiveMutexRecursive+0x26>
 8011f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f6a:	f383 8811 	msr	BASEPRI, r3
 8011f6e:	f3bf 8f6f 	isb	sy
 8011f72:	f3bf 8f4f 	dsb	sy
 8011f76:	60fb      	str	r3, [r7, #12]
 8011f78:	e7fe      	b.n	8011f78 <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8011f7a:	693b      	ldr	r3, [r7, #16]
 8011f7c:	689c      	ldr	r4, [r3, #8]
 8011f7e:	f001 fda5 	bl	8013acc <xTaskGetCurrentTaskHandle>
 8011f82:	4603      	mov	r3, r0
 8011f84:	429c      	cmp	r4, r3
 8011f86:	d111      	bne.n	8011fac <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8011f88:	693b      	ldr	r3, [r7, #16]
 8011f8a:	68db      	ldr	r3, [r3, #12]
 8011f8c:	1e5a      	subs	r2, r3, #1
 8011f8e:	693b      	ldr	r3, [r7, #16]
 8011f90:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8011f92:	693b      	ldr	r3, [r7, #16]
 8011f94:	68db      	ldr	r3, [r3, #12]
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d105      	bne.n	8011fa6 <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8011f9a:	2300      	movs	r3, #0
 8011f9c:	2200      	movs	r2, #0
 8011f9e:	2100      	movs	r1, #0
 8011fa0:	6938      	ldr	r0, [r7, #16]
 8011fa2:	f000 f8a5 	bl	80120f0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8011fa6:	2301      	movs	r3, #1
 8011fa8:	617b      	str	r3, [r7, #20]
 8011faa:	e001      	b.n	8011fb0 <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8011fac:	2300      	movs	r3, #0
 8011fae:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8011fb0:	697b      	ldr	r3, [r7, #20]
	}
 8011fb2:	4618      	mov	r0, r3
 8011fb4:	371c      	adds	r7, #28
 8011fb6:	46bd      	mov	sp, r7
 8011fb8:	bd90      	pop	{r4, r7, pc}

08011fba <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8011fba:	b590      	push	{r4, r7, lr}
 8011fbc:	b087      	sub	sp, #28
 8011fbe:	af00      	add	r7, sp, #0
 8011fc0:	6078      	str	r0, [r7, #4]
 8011fc2:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8011fc8:	693b      	ldr	r3, [r7, #16]
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	d109      	bne.n	8011fe2 <xQueueTakeMutexRecursive+0x28>
 8011fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fd2:	f383 8811 	msr	BASEPRI, r3
 8011fd6:	f3bf 8f6f 	isb	sy
 8011fda:	f3bf 8f4f 	dsb	sy
 8011fde:	60fb      	str	r3, [r7, #12]
 8011fe0:	e7fe      	b.n	8011fe0 <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8011fe2:	693b      	ldr	r3, [r7, #16]
 8011fe4:	689c      	ldr	r4, [r3, #8]
 8011fe6:	f001 fd71 	bl	8013acc <xTaskGetCurrentTaskHandle>
 8011fea:	4603      	mov	r3, r0
 8011fec:	429c      	cmp	r4, r3
 8011fee:	d107      	bne.n	8012000 <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8011ff0:	693b      	ldr	r3, [r7, #16]
 8011ff2:	68db      	ldr	r3, [r3, #12]
 8011ff4:	1c5a      	adds	r2, r3, #1
 8011ff6:	693b      	ldr	r3, [r7, #16]
 8011ff8:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8011ffa:	2301      	movs	r3, #1
 8011ffc:	617b      	str	r3, [r7, #20]
 8011ffe:	e00c      	b.n	801201a <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8012000:	6839      	ldr	r1, [r7, #0]
 8012002:	6938      	ldr	r0, [r7, #16]
 8012004:	f000 fb68 	bl	80126d8 <xQueueSemaphoreTake>
 8012008:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 801200a:	697b      	ldr	r3, [r7, #20]
 801200c:	2b00      	cmp	r3, #0
 801200e:	d004      	beq.n	801201a <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8012010:	693b      	ldr	r3, [r7, #16]
 8012012:	68db      	ldr	r3, [r3, #12]
 8012014:	1c5a      	adds	r2, r3, #1
 8012016:	693b      	ldr	r3, [r7, #16]
 8012018:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 801201a:	697b      	ldr	r3, [r7, #20]
	}
 801201c:	4618      	mov	r0, r3
 801201e:	371c      	adds	r7, #28
 8012020:	46bd      	mov	sp, r7
 8012022:	bd90      	pop	{r4, r7, pc}

08012024 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8012024:	b580      	push	{r7, lr}
 8012026:	b08a      	sub	sp, #40	; 0x28
 8012028:	af02      	add	r7, sp, #8
 801202a:	60f8      	str	r0, [r7, #12]
 801202c:	60b9      	str	r1, [r7, #8]
 801202e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8012030:	68fb      	ldr	r3, [r7, #12]
 8012032:	2b00      	cmp	r3, #0
 8012034:	d109      	bne.n	801204a <xQueueCreateCountingSemaphoreStatic+0x26>
 8012036:	f04f 0350 	mov.w	r3, #80	; 0x50
 801203a:	f383 8811 	msr	BASEPRI, r3
 801203e:	f3bf 8f6f 	isb	sy
 8012042:	f3bf 8f4f 	dsb	sy
 8012046:	61bb      	str	r3, [r7, #24]
 8012048:	e7fe      	b.n	8012048 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 801204a:	68ba      	ldr	r2, [r7, #8]
 801204c:	68fb      	ldr	r3, [r7, #12]
 801204e:	429a      	cmp	r2, r3
 8012050:	d909      	bls.n	8012066 <xQueueCreateCountingSemaphoreStatic+0x42>
 8012052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012056:	f383 8811 	msr	BASEPRI, r3
 801205a:	f3bf 8f6f 	isb	sy
 801205e:	f3bf 8f4f 	dsb	sy
 8012062:	617b      	str	r3, [r7, #20]
 8012064:	e7fe      	b.n	8012064 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8012066:	2302      	movs	r3, #2
 8012068:	9300      	str	r3, [sp, #0]
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	2200      	movs	r2, #0
 801206e:	2100      	movs	r1, #0
 8012070:	68f8      	ldr	r0, [r7, #12]
 8012072:	f7ff fe4d 	bl	8011d10 <xQueueGenericCreateStatic>
 8012076:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8012078:	69fb      	ldr	r3, [r7, #28]
 801207a:	2b00      	cmp	r3, #0
 801207c:	d002      	beq.n	8012084 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801207e:	69fb      	ldr	r3, [r7, #28]
 8012080:	68ba      	ldr	r2, [r7, #8]
 8012082:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8012084:	69fb      	ldr	r3, [r7, #28]
	}
 8012086:	4618      	mov	r0, r3
 8012088:	3720      	adds	r7, #32
 801208a:	46bd      	mov	sp, r7
 801208c:	bd80      	pop	{r7, pc}

0801208e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 801208e:	b580      	push	{r7, lr}
 8012090:	b086      	sub	sp, #24
 8012092:	af00      	add	r7, sp, #0
 8012094:	6078      	str	r0, [r7, #4]
 8012096:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	2b00      	cmp	r3, #0
 801209c:	d109      	bne.n	80120b2 <xQueueCreateCountingSemaphore+0x24>
 801209e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120a2:	f383 8811 	msr	BASEPRI, r3
 80120a6:	f3bf 8f6f 	isb	sy
 80120aa:	f3bf 8f4f 	dsb	sy
 80120ae:	613b      	str	r3, [r7, #16]
 80120b0:	e7fe      	b.n	80120b0 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 80120b2:	683a      	ldr	r2, [r7, #0]
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	429a      	cmp	r2, r3
 80120b8:	d909      	bls.n	80120ce <xQueueCreateCountingSemaphore+0x40>
 80120ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120be:	f383 8811 	msr	BASEPRI, r3
 80120c2:	f3bf 8f6f 	isb	sy
 80120c6:	f3bf 8f4f 	dsb	sy
 80120ca:	60fb      	str	r3, [r7, #12]
 80120cc:	e7fe      	b.n	80120cc <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80120ce:	2202      	movs	r2, #2
 80120d0:	2100      	movs	r1, #0
 80120d2:	6878      	ldr	r0, [r7, #4]
 80120d4:	f7ff fe8f 	bl	8011df6 <xQueueGenericCreate>
 80120d8:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80120da:	697b      	ldr	r3, [r7, #20]
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d002      	beq.n	80120e6 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80120e0:	697b      	ldr	r3, [r7, #20]
 80120e2:	683a      	ldr	r2, [r7, #0]
 80120e4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80120e6:	697b      	ldr	r3, [r7, #20]
	}
 80120e8:	4618      	mov	r0, r3
 80120ea:	3718      	adds	r7, #24
 80120ec:	46bd      	mov	sp, r7
 80120ee:	bd80      	pop	{r7, pc}

080120f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80120f0:	b580      	push	{r7, lr}
 80120f2:	b08e      	sub	sp, #56	; 0x38
 80120f4:	af00      	add	r7, sp, #0
 80120f6:	60f8      	str	r0, [r7, #12]
 80120f8:	60b9      	str	r1, [r7, #8]
 80120fa:	607a      	str	r2, [r7, #4]
 80120fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80120fe:	2300      	movs	r3, #0
 8012100:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012102:	68fb      	ldr	r3, [r7, #12]
 8012104:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012108:	2b00      	cmp	r3, #0
 801210a:	d109      	bne.n	8012120 <xQueueGenericSend+0x30>
 801210c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012110:	f383 8811 	msr	BASEPRI, r3
 8012114:	f3bf 8f6f 	isb	sy
 8012118:	f3bf 8f4f 	dsb	sy
 801211c:	62bb      	str	r3, [r7, #40]	; 0x28
 801211e:	e7fe      	b.n	801211e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012120:	68bb      	ldr	r3, [r7, #8]
 8012122:	2b00      	cmp	r3, #0
 8012124:	d103      	bne.n	801212e <xQueueGenericSend+0x3e>
 8012126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801212a:	2b00      	cmp	r3, #0
 801212c:	d101      	bne.n	8012132 <xQueueGenericSend+0x42>
 801212e:	2301      	movs	r3, #1
 8012130:	e000      	b.n	8012134 <xQueueGenericSend+0x44>
 8012132:	2300      	movs	r3, #0
 8012134:	2b00      	cmp	r3, #0
 8012136:	d109      	bne.n	801214c <xQueueGenericSend+0x5c>
 8012138:	f04f 0350 	mov.w	r3, #80	; 0x50
 801213c:	f383 8811 	msr	BASEPRI, r3
 8012140:	f3bf 8f6f 	isb	sy
 8012144:	f3bf 8f4f 	dsb	sy
 8012148:	627b      	str	r3, [r7, #36]	; 0x24
 801214a:	e7fe      	b.n	801214a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801214c:	683b      	ldr	r3, [r7, #0]
 801214e:	2b02      	cmp	r3, #2
 8012150:	d103      	bne.n	801215a <xQueueGenericSend+0x6a>
 8012152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012156:	2b01      	cmp	r3, #1
 8012158:	d101      	bne.n	801215e <xQueueGenericSend+0x6e>
 801215a:	2301      	movs	r3, #1
 801215c:	e000      	b.n	8012160 <xQueueGenericSend+0x70>
 801215e:	2300      	movs	r3, #0
 8012160:	2b00      	cmp	r3, #0
 8012162:	d109      	bne.n	8012178 <xQueueGenericSend+0x88>
 8012164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012168:	f383 8811 	msr	BASEPRI, r3
 801216c:	f3bf 8f6f 	isb	sy
 8012170:	f3bf 8f4f 	dsb	sy
 8012174:	623b      	str	r3, [r7, #32]
 8012176:	e7fe      	b.n	8012176 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012178:	f001 fcb8 	bl	8013aec <xTaskGetSchedulerState>
 801217c:	4603      	mov	r3, r0
 801217e:	2b00      	cmp	r3, #0
 8012180:	d102      	bne.n	8012188 <xQueueGenericSend+0x98>
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	2b00      	cmp	r3, #0
 8012186:	d101      	bne.n	801218c <xQueueGenericSend+0x9c>
 8012188:	2301      	movs	r3, #1
 801218a:	e000      	b.n	801218e <xQueueGenericSend+0x9e>
 801218c:	2300      	movs	r3, #0
 801218e:	2b00      	cmp	r3, #0
 8012190:	d109      	bne.n	80121a6 <xQueueGenericSend+0xb6>
 8012192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012196:	f383 8811 	msr	BASEPRI, r3
 801219a:	f3bf 8f6f 	isb	sy
 801219e:	f3bf 8f4f 	dsb	sy
 80121a2:	61fb      	str	r3, [r7, #28]
 80121a4:	e7fe      	b.n	80121a4 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80121a6:	f7ff fc31 	bl	8011a0c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80121aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80121ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80121b2:	429a      	cmp	r2, r3
 80121b4:	d302      	bcc.n	80121bc <xQueueGenericSend+0xcc>
 80121b6:	683b      	ldr	r3, [r7, #0]
 80121b8:	2b02      	cmp	r3, #2
 80121ba:	d129      	bne.n	8012210 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80121bc:	683a      	ldr	r2, [r7, #0]
 80121be:	68b9      	ldr	r1, [r7, #8]
 80121c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80121c2:	f000 fc48 	bl	8012a56 <prvCopyDataToQueue>
 80121c6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80121c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d010      	beq.n	80121f2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80121d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121d2:	3324      	adds	r3, #36	; 0x24
 80121d4:	4618      	mov	r0, r3
 80121d6:	f001 fa9b 	bl	8013710 <xTaskRemoveFromEventList>
 80121da:	4603      	mov	r3, r0
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d013      	beq.n	8012208 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80121e0:	4b3f      	ldr	r3, [pc, #252]	; (80122e0 <xQueueGenericSend+0x1f0>)
 80121e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80121e6:	601a      	str	r2, [r3, #0]
 80121e8:	f3bf 8f4f 	dsb	sy
 80121ec:	f3bf 8f6f 	isb	sy
 80121f0:	e00a      	b.n	8012208 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80121f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d007      	beq.n	8012208 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80121f8:	4b39      	ldr	r3, [pc, #228]	; (80122e0 <xQueueGenericSend+0x1f0>)
 80121fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80121fe:	601a      	str	r2, [r3, #0]
 8012200:	f3bf 8f4f 	dsb	sy
 8012204:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8012208:	f7ff fc2e 	bl	8011a68 <vPortExitCritical>
				return pdPASS;
 801220c:	2301      	movs	r3, #1
 801220e:	e063      	b.n	80122d8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	2b00      	cmp	r3, #0
 8012214:	d103      	bne.n	801221e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012216:	f7ff fc27 	bl	8011a68 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801221a:	2300      	movs	r3, #0
 801221c:	e05c      	b.n	80122d8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801221e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012220:	2b00      	cmp	r3, #0
 8012222:	d106      	bne.n	8012232 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012224:	f107 0314 	add.w	r3, r7, #20
 8012228:	4618      	mov	r0, r3
 801222a:	f001 fad5 	bl	80137d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801222e:	2301      	movs	r3, #1
 8012230:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012232:	f7ff fc19 	bl	8011a68 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012236:	f000 ffe3 	bl	8013200 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801223a:	f7ff fbe7 	bl	8011a0c <vPortEnterCritical>
 801223e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012240:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012244:	b25b      	sxtb	r3, r3
 8012246:	f1b3 3fff 	cmp.w	r3, #4294967295
 801224a:	d103      	bne.n	8012254 <xQueueGenericSend+0x164>
 801224c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801224e:	2200      	movs	r2, #0
 8012250:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012256:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801225a:	b25b      	sxtb	r3, r3
 801225c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012260:	d103      	bne.n	801226a <xQueueGenericSend+0x17a>
 8012262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012264:	2200      	movs	r2, #0
 8012266:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801226a:	f7ff fbfd 	bl	8011a68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801226e:	1d3a      	adds	r2, r7, #4
 8012270:	f107 0314 	add.w	r3, r7, #20
 8012274:	4611      	mov	r1, r2
 8012276:	4618      	mov	r0, r3
 8012278:	f001 fac4 	bl	8013804 <xTaskCheckForTimeOut>
 801227c:	4603      	mov	r3, r0
 801227e:	2b00      	cmp	r3, #0
 8012280:	d124      	bne.n	80122cc <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8012282:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012284:	f000 fcdf 	bl	8012c46 <prvIsQueueFull>
 8012288:	4603      	mov	r3, r0
 801228a:	2b00      	cmp	r3, #0
 801228c:	d018      	beq.n	80122c0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801228e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012290:	3310      	adds	r3, #16
 8012292:	687a      	ldr	r2, [r7, #4]
 8012294:	4611      	mov	r1, r2
 8012296:	4618      	mov	r0, r3
 8012298:	f001 f9ec 	bl	8013674 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801229c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801229e:	f000 fc6a 	bl	8012b76 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80122a2:	f000 fff3 	bl	801328c <xTaskResumeAll>
 80122a6:	4603      	mov	r3, r0
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	f47f af7c 	bne.w	80121a6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80122ae:	4b0c      	ldr	r3, [pc, #48]	; (80122e0 <xQueueGenericSend+0x1f0>)
 80122b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80122b4:	601a      	str	r2, [r3, #0]
 80122b6:	f3bf 8f4f 	dsb	sy
 80122ba:	f3bf 8f6f 	isb	sy
 80122be:	e772      	b.n	80121a6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80122c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80122c2:	f000 fc58 	bl	8012b76 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80122c6:	f000 ffe1 	bl	801328c <xTaskResumeAll>
 80122ca:	e76c      	b.n	80121a6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80122cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80122ce:	f000 fc52 	bl	8012b76 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80122d2:	f000 ffdb 	bl	801328c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80122d6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80122d8:	4618      	mov	r0, r3
 80122da:	3738      	adds	r7, #56	; 0x38
 80122dc:	46bd      	mov	sp, r7
 80122de:	bd80      	pop	{r7, pc}
 80122e0:	e000ed04 	.word	0xe000ed04

080122e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80122e4:	b580      	push	{r7, lr}
 80122e6:	b08e      	sub	sp, #56	; 0x38
 80122e8:	af00      	add	r7, sp, #0
 80122ea:	60f8      	str	r0, [r7, #12]
 80122ec:	60b9      	str	r1, [r7, #8]
 80122ee:	607a      	str	r2, [r7, #4]
 80122f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80122f2:	68fb      	ldr	r3, [r7, #12]
 80122f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80122f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	d109      	bne.n	8012310 <xQueueGenericSendFromISR+0x2c>
 80122fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012300:	f383 8811 	msr	BASEPRI, r3
 8012304:	f3bf 8f6f 	isb	sy
 8012308:	f3bf 8f4f 	dsb	sy
 801230c:	627b      	str	r3, [r7, #36]	; 0x24
 801230e:	e7fe      	b.n	801230e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012310:	68bb      	ldr	r3, [r7, #8]
 8012312:	2b00      	cmp	r3, #0
 8012314:	d103      	bne.n	801231e <xQueueGenericSendFromISR+0x3a>
 8012316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801231a:	2b00      	cmp	r3, #0
 801231c:	d101      	bne.n	8012322 <xQueueGenericSendFromISR+0x3e>
 801231e:	2301      	movs	r3, #1
 8012320:	e000      	b.n	8012324 <xQueueGenericSendFromISR+0x40>
 8012322:	2300      	movs	r3, #0
 8012324:	2b00      	cmp	r3, #0
 8012326:	d109      	bne.n	801233c <xQueueGenericSendFromISR+0x58>
 8012328:	f04f 0350 	mov.w	r3, #80	; 0x50
 801232c:	f383 8811 	msr	BASEPRI, r3
 8012330:	f3bf 8f6f 	isb	sy
 8012334:	f3bf 8f4f 	dsb	sy
 8012338:	623b      	str	r3, [r7, #32]
 801233a:	e7fe      	b.n	801233a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801233c:	683b      	ldr	r3, [r7, #0]
 801233e:	2b02      	cmp	r3, #2
 8012340:	d103      	bne.n	801234a <xQueueGenericSendFromISR+0x66>
 8012342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012346:	2b01      	cmp	r3, #1
 8012348:	d101      	bne.n	801234e <xQueueGenericSendFromISR+0x6a>
 801234a:	2301      	movs	r3, #1
 801234c:	e000      	b.n	8012350 <xQueueGenericSendFromISR+0x6c>
 801234e:	2300      	movs	r3, #0
 8012350:	2b00      	cmp	r3, #0
 8012352:	d109      	bne.n	8012368 <xQueueGenericSendFromISR+0x84>
 8012354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012358:	f383 8811 	msr	BASEPRI, r3
 801235c:	f3bf 8f6f 	isb	sy
 8012360:	f3bf 8f4f 	dsb	sy
 8012364:	61fb      	str	r3, [r7, #28]
 8012366:	e7fe      	b.n	8012366 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012368:	f7ff fc2c 	bl	8011bc4 <vPortValidateInterruptPriority>
	__asm volatile
 801236c:	f3ef 8211 	mrs	r2, BASEPRI
 8012370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012374:	f383 8811 	msr	BASEPRI, r3
 8012378:	f3bf 8f6f 	isb	sy
 801237c:	f3bf 8f4f 	dsb	sy
 8012380:	61ba      	str	r2, [r7, #24]
 8012382:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8012384:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012386:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801238a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801238c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801238e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012390:	429a      	cmp	r2, r3
 8012392:	d302      	bcc.n	801239a <xQueueGenericSendFromISR+0xb6>
 8012394:	683b      	ldr	r3, [r7, #0]
 8012396:	2b02      	cmp	r3, #2
 8012398:	d12c      	bne.n	80123f4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801239a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801239c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80123a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80123a4:	683a      	ldr	r2, [r7, #0]
 80123a6:	68b9      	ldr	r1, [r7, #8]
 80123a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80123aa:	f000 fb54 	bl	8012a56 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80123ae:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80123b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80123b6:	d112      	bne.n	80123de <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80123b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d016      	beq.n	80123ee <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80123c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123c2:	3324      	adds	r3, #36	; 0x24
 80123c4:	4618      	mov	r0, r3
 80123c6:	f001 f9a3 	bl	8013710 <xTaskRemoveFromEventList>
 80123ca:	4603      	mov	r3, r0
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d00e      	beq.n	80123ee <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	d00b      	beq.n	80123ee <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	2201      	movs	r2, #1
 80123da:	601a      	str	r2, [r3, #0]
 80123dc:	e007      	b.n	80123ee <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80123de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80123e2:	3301      	adds	r3, #1
 80123e4:	b2db      	uxtb	r3, r3
 80123e6:	b25a      	sxtb	r2, r3
 80123e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80123ee:	2301      	movs	r3, #1
 80123f0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80123f2:	e001      	b.n	80123f8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80123f4:	2300      	movs	r3, #0
 80123f6:	637b      	str	r3, [r7, #52]	; 0x34
 80123f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123fa:	613b      	str	r3, [r7, #16]
	__asm volatile
 80123fc:	693b      	ldr	r3, [r7, #16]
 80123fe:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012404:	4618      	mov	r0, r3
 8012406:	3738      	adds	r7, #56	; 0x38
 8012408:	46bd      	mov	sp, r7
 801240a:	bd80      	pop	{r7, pc}

0801240c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801240c:	b580      	push	{r7, lr}
 801240e:	b08e      	sub	sp, #56	; 0x38
 8012410:	af00      	add	r7, sp, #0
 8012412:	6078      	str	r0, [r7, #4]
 8012414:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801241a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801241c:	2b00      	cmp	r3, #0
 801241e:	d109      	bne.n	8012434 <xQueueGiveFromISR+0x28>
	__asm volatile
 8012420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012424:	f383 8811 	msr	BASEPRI, r3
 8012428:	f3bf 8f6f 	isb	sy
 801242c:	f3bf 8f4f 	dsb	sy
 8012430:	623b      	str	r3, [r7, #32]
 8012432:	e7fe      	b.n	8012432 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012438:	2b00      	cmp	r3, #0
 801243a:	d009      	beq.n	8012450 <xQueueGiveFromISR+0x44>
 801243c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012440:	f383 8811 	msr	BASEPRI, r3
 8012444:	f3bf 8f6f 	isb	sy
 8012448:	f3bf 8f4f 	dsb	sy
 801244c:	61fb      	str	r3, [r7, #28]
 801244e:	e7fe      	b.n	801244e <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8012450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012452:	681b      	ldr	r3, [r3, #0]
 8012454:	2b00      	cmp	r3, #0
 8012456:	d103      	bne.n	8012460 <xQueueGiveFromISR+0x54>
 8012458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801245a:	689b      	ldr	r3, [r3, #8]
 801245c:	2b00      	cmp	r3, #0
 801245e:	d101      	bne.n	8012464 <xQueueGiveFromISR+0x58>
 8012460:	2301      	movs	r3, #1
 8012462:	e000      	b.n	8012466 <xQueueGiveFromISR+0x5a>
 8012464:	2300      	movs	r3, #0
 8012466:	2b00      	cmp	r3, #0
 8012468:	d109      	bne.n	801247e <xQueueGiveFromISR+0x72>
 801246a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801246e:	f383 8811 	msr	BASEPRI, r3
 8012472:	f3bf 8f6f 	isb	sy
 8012476:	f3bf 8f4f 	dsb	sy
 801247a:	61bb      	str	r3, [r7, #24]
 801247c:	e7fe      	b.n	801247c <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801247e:	f7ff fba1 	bl	8011bc4 <vPortValidateInterruptPriority>
	__asm volatile
 8012482:	f3ef 8211 	mrs	r2, BASEPRI
 8012486:	f04f 0350 	mov.w	r3, #80	; 0x50
 801248a:	f383 8811 	msr	BASEPRI, r3
 801248e:	f3bf 8f6f 	isb	sy
 8012492:	f3bf 8f4f 	dsb	sy
 8012496:	617a      	str	r2, [r7, #20]
 8012498:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801249a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801249c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801249e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80124a2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80124a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80124a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80124aa:	429a      	cmp	r2, r3
 80124ac:	d22b      	bcs.n	8012506 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80124ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80124b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80124b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124ba:	1c5a      	adds	r2, r3, #1
 80124bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124be:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80124c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80124c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124c8:	d112      	bne.n	80124f0 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80124ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d016      	beq.n	8012500 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80124d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124d4:	3324      	adds	r3, #36	; 0x24
 80124d6:	4618      	mov	r0, r3
 80124d8:	f001 f91a 	bl	8013710 <xTaskRemoveFromEventList>
 80124dc:	4603      	mov	r3, r0
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d00e      	beq.n	8012500 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80124e2:	683b      	ldr	r3, [r7, #0]
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d00b      	beq.n	8012500 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80124e8:	683b      	ldr	r3, [r7, #0]
 80124ea:	2201      	movs	r2, #1
 80124ec:	601a      	str	r2, [r3, #0]
 80124ee:	e007      	b.n	8012500 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80124f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80124f4:	3301      	adds	r3, #1
 80124f6:	b2db      	uxtb	r3, r3
 80124f8:	b25a      	sxtb	r2, r3
 80124fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012500:	2301      	movs	r3, #1
 8012502:	637b      	str	r3, [r7, #52]	; 0x34
 8012504:	e001      	b.n	801250a <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012506:	2300      	movs	r3, #0
 8012508:	637b      	str	r3, [r7, #52]	; 0x34
 801250a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801250c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801250e:	68fb      	ldr	r3, [r7, #12]
 8012510:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012516:	4618      	mov	r0, r3
 8012518:	3738      	adds	r7, #56	; 0x38
 801251a:	46bd      	mov	sp, r7
 801251c:	bd80      	pop	{r7, pc}
	...

08012520 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8012520:	b580      	push	{r7, lr}
 8012522:	b08c      	sub	sp, #48	; 0x30
 8012524:	af00      	add	r7, sp, #0
 8012526:	60f8      	str	r0, [r7, #12]
 8012528:	60b9      	str	r1, [r7, #8]
 801252a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801252c:	2300      	movs	r3, #0
 801252e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012530:	68fb      	ldr	r3, [r7, #12]
 8012532:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012536:	2b00      	cmp	r3, #0
 8012538:	d109      	bne.n	801254e <xQueueReceive+0x2e>
	__asm volatile
 801253a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801253e:	f383 8811 	msr	BASEPRI, r3
 8012542:	f3bf 8f6f 	isb	sy
 8012546:	f3bf 8f4f 	dsb	sy
 801254a:	623b      	str	r3, [r7, #32]
 801254c:	e7fe      	b.n	801254c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801254e:	68bb      	ldr	r3, [r7, #8]
 8012550:	2b00      	cmp	r3, #0
 8012552:	d103      	bne.n	801255c <xQueueReceive+0x3c>
 8012554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012558:	2b00      	cmp	r3, #0
 801255a:	d101      	bne.n	8012560 <xQueueReceive+0x40>
 801255c:	2301      	movs	r3, #1
 801255e:	e000      	b.n	8012562 <xQueueReceive+0x42>
 8012560:	2300      	movs	r3, #0
 8012562:	2b00      	cmp	r3, #0
 8012564:	d109      	bne.n	801257a <xQueueReceive+0x5a>
 8012566:	f04f 0350 	mov.w	r3, #80	; 0x50
 801256a:	f383 8811 	msr	BASEPRI, r3
 801256e:	f3bf 8f6f 	isb	sy
 8012572:	f3bf 8f4f 	dsb	sy
 8012576:	61fb      	str	r3, [r7, #28]
 8012578:	e7fe      	b.n	8012578 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801257a:	f001 fab7 	bl	8013aec <xTaskGetSchedulerState>
 801257e:	4603      	mov	r3, r0
 8012580:	2b00      	cmp	r3, #0
 8012582:	d102      	bne.n	801258a <xQueueReceive+0x6a>
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	2b00      	cmp	r3, #0
 8012588:	d101      	bne.n	801258e <xQueueReceive+0x6e>
 801258a:	2301      	movs	r3, #1
 801258c:	e000      	b.n	8012590 <xQueueReceive+0x70>
 801258e:	2300      	movs	r3, #0
 8012590:	2b00      	cmp	r3, #0
 8012592:	d109      	bne.n	80125a8 <xQueueReceive+0x88>
 8012594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012598:	f383 8811 	msr	BASEPRI, r3
 801259c:	f3bf 8f6f 	isb	sy
 80125a0:	f3bf 8f4f 	dsb	sy
 80125a4:	61bb      	str	r3, [r7, #24]
 80125a6:	e7fe      	b.n	80125a6 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80125a8:	f7ff fa30 	bl	8011a0c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80125ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80125b0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80125b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d01f      	beq.n	80125f8 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80125b8:	68b9      	ldr	r1, [r7, #8]
 80125ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80125bc:	f000 fab5 	bl	8012b2a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80125c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125c2:	1e5a      	subs	r2, r3, #1
 80125c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125c6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80125c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125ca:	691b      	ldr	r3, [r3, #16]
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d00f      	beq.n	80125f0 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80125d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125d2:	3310      	adds	r3, #16
 80125d4:	4618      	mov	r0, r3
 80125d6:	f001 f89b 	bl	8013710 <xTaskRemoveFromEventList>
 80125da:	4603      	mov	r3, r0
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d007      	beq.n	80125f0 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80125e0:	4b3c      	ldr	r3, [pc, #240]	; (80126d4 <xQueueReceive+0x1b4>)
 80125e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80125e6:	601a      	str	r2, [r3, #0]
 80125e8:	f3bf 8f4f 	dsb	sy
 80125ec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80125f0:	f7ff fa3a 	bl	8011a68 <vPortExitCritical>
				return pdPASS;
 80125f4:	2301      	movs	r3, #1
 80125f6:	e069      	b.n	80126cc <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d103      	bne.n	8012606 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80125fe:	f7ff fa33 	bl	8011a68 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012602:	2300      	movs	r3, #0
 8012604:	e062      	b.n	80126cc <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012608:	2b00      	cmp	r3, #0
 801260a:	d106      	bne.n	801261a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801260c:	f107 0310 	add.w	r3, r7, #16
 8012610:	4618      	mov	r0, r3
 8012612:	f001 f8e1 	bl	80137d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012616:	2301      	movs	r3, #1
 8012618:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801261a:	f7ff fa25 	bl	8011a68 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801261e:	f000 fdef 	bl	8013200 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012622:	f7ff f9f3 	bl	8011a0c <vPortEnterCritical>
 8012626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012628:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801262c:	b25b      	sxtb	r3, r3
 801262e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012632:	d103      	bne.n	801263c <xQueueReceive+0x11c>
 8012634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012636:	2200      	movs	r2, #0
 8012638:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801263c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801263e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012642:	b25b      	sxtb	r3, r3
 8012644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012648:	d103      	bne.n	8012652 <xQueueReceive+0x132>
 801264a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801264c:	2200      	movs	r2, #0
 801264e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012652:	f7ff fa09 	bl	8011a68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012656:	1d3a      	adds	r2, r7, #4
 8012658:	f107 0310 	add.w	r3, r7, #16
 801265c:	4611      	mov	r1, r2
 801265e:	4618      	mov	r0, r3
 8012660:	f001 f8d0 	bl	8013804 <xTaskCheckForTimeOut>
 8012664:	4603      	mov	r3, r0
 8012666:	2b00      	cmp	r3, #0
 8012668:	d123      	bne.n	80126b2 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801266a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801266c:	f000 fad5 	bl	8012c1a <prvIsQueueEmpty>
 8012670:	4603      	mov	r3, r0
 8012672:	2b00      	cmp	r3, #0
 8012674:	d017      	beq.n	80126a6 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012678:	3324      	adds	r3, #36	; 0x24
 801267a:	687a      	ldr	r2, [r7, #4]
 801267c:	4611      	mov	r1, r2
 801267e:	4618      	mov	r0, r3
 8012680:	f000 fff8 	bl	8013674 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012684:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012686:	f000 fa76 	bl	8012b76 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801268a:	f000 fdff 	bl	801328c <xTaskResumeAll>
 801268e:	4603      	mov	r3, r0
 8012690:	2b00      	cmp	r3, #0
 8012692:	d189      	bne.n	80125a8 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8012694:	4b0f      	ldr	r3, [pc, #60]	; (80126d4 <xQueueReceive+0x1b4>)
 8012696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801269a:	601a      	str	r2, [r3, #0]
 801269c:	f3bf 8f4f 	dsb	sy
 80126a0:	f3bf 8f6f 	isb	sy
 80126a4:	e780      	b.n	80125a8 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80126a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80126a8:	f000 fa65 	bl	8012b76 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80126ac:	f000 fdee 	bl	801328c <xTaskResumeAll>
 80126b0:	e77a      	b.n	80125a8 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80126b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80126b4:	f000 fa5f 	bl	8012b76 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80126b8:	f000 fde8 	bl	801328c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80126bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80126be:	f000 faac 	bl	8012c1a <prvIsQueueEmpty>
 80126c2:	4603      	mov	r3, r0
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	f43f af6f 	beq.w	80125a8 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80126ca:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80126cc:	4618      	mov	r0, r3
 80126ce:	3730      	adds	r7, #48	; 0x30
 80126d0:	46bd      	mov	sp, r7
 80126d2:	bd80      	pop	{r7, pc}
 80126d4:	e000ed04 	.word	0xe000ed04

080126d8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80126d8:	b580      	push	{r7, lr}
 80126da:	b08e      	sub	sp, #56	; 0x38
 80126dc:	af00      	add	r7, sp, #0
 80126de:	6078      	str	r0, [r7, #4]
 80126e0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80126e2:	2300      	movs	r3, #0
 80126e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80126ea:	2300      	movs	r3, #0
 80126ec:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80126ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d109      	bne.n	8012708 <xQueueSemaphoreTake+0x30>
 80126f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126f8:	f383 8811 	msr	BASEPRI, r3
 80126fc:	f3bf 8f6f 	isb	sy
 8012700:	f3bf 8f4f 	dsb	sy
 8012704:	623b      	str	r3, [r7, #32]
 8012706:	e7fe      	b.n	8012706 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801270a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801270c:	2b00      	cmp	r3, #0
 801270e:	d009      	beq.n	8012724 <xQueueSemaphoreTake+0x4c>
 8012710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012714:	f383 8811 	msr	BASEPRI, r3
 8012718:	f3bf 8f6f 	isb	sy
 801271c:	f3bf 8f4f 	dsb	sy
 8012720:	61fb      	str	r3, [r7, #28]
 8012722:	e7fe      	b.n	8012722 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012724:	f001 f9e2 	bl	8013aec <xTaskGetSchedulerState>
 8012728:	4603      	mov	r3, r0
 801272a:	2b00      	cmp	r3, #0
 801272c:	d102      	bne.n	8012734 <xQueueSemaphoreTake+0x5c>
 801272e:	683b      	ldr	r3, [r7, #0]
 8012730:	2b00      	cmp	r3, #0
 8012732:	d101      	bne.n	8012738 <xQueueSemaphoreTake+0x60>
 8012734:	2301      	movs	r3, #1
 8012736:	e000      	b.n	801273a <xQueueSemaphoreTake+0x62>
 8012738:	2300      	movs	r3, #0
 801273a:	2b00      	cmp	r3, #0
 801273c:	d109      	bne.n	8012752 <xQueueSemaphoreTake+0x7a>
 801273e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012742:	f383 8811 	msr	BASEPRI, r3
 8012746:	f3bf 8f6f 	isb	sy
 801274a:	f3bf 8f4f 	dsb	sy
 801274e:	61bb      	str	r3, [r7, #24]
 8012750:	e7fe      	b.n	8012750 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012752:	f7ff f95b 	bl	8011a0c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8012756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801275a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801275c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801275e:	2b00      	cmp	r3, #0
 8012760:	d024      	beq.n	80127ac <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8012762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012764:	1e5a      	subs	r2, r3, #1
 8012766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012768:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801276a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801276c:	681b      	ldr	r3, [r3, #0]
 801276e:	2b00      	cmp	r3, #0
 8012770:	d104      	bne.n	801277c <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8012772:	f001 fb2d 	bl	8013dd0 <pvTaskIncrementMutexHeldCount>
 8012776:	4602      	mov	r2, r0
 8012778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801277a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801277c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801277e:	691b      	ldr	r3, [r3, #16]
 8012780:	2b00      	cmp	r3, #0
 8012782:	d00f      	beq.n	80127a4 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012786:	3310      	adds	r3, #16
 8012788:	4618      	mov	r0, r3
 801278a:	f000 ffc1 	bl	8013710 <xTaskRemoveFromEventList>
 801278e:	4603      	mov	r3, r0
 8012790:	2b00      	cmp	r3, #0
 8012792:	d007      	beq.n	80127a4 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012794:	4b53      	ldr	r3, [pc, #332]	; (80128e4 <xQueueSemaphoreTake+0x20c>)
 8012796:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801279a:	601a      	str	r2, [r3, #0]
 801279c:	f3bf 8f4f 	dsb	sy
 80127a0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80127a4:	f7ff f960 	bl	8011a68 <vPortExitCritical>
				return pdPASS;
 80127a8:	2301      	movs	r3, #1
 80127aa:	e096      	b.n	80128da <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80127ac:	683b      	ldr	r3, [r7, #0]
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d110      	bne.n	80127d4 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80127b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	d009      	beq.n	80127cc <xQueueSemaphoreTake+0xf4>
 80127b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127bc:	f383 8811 	msr	BASEPRI, r3
 80127c0:	f3bf 8f6f 	isb	sy
 80127c4:	f3bf 8f4f 	dsb	sy
 80127c8:	617b      	str	r3, [r7, #20]
 80127ca:	e7fe      	b.n	80127ca <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80127cc:	f7ff f94c 	bl	8011a68 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80127d0:	2300      	movs	r3, #0
 80127d2:	e082      	b.n	80128da <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 80127d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d106      	bne.n	80127e8 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80127da:	f107 030c 	add.w	r3, r7, #12
 80127de:	4618      	mov	r0, r3
 80127e0:	f000 fffa 	bl	80137d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80127e4:	2301      	movs	r3, #1
 80127e6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80127e8:	f7ff f93e 	bl	8011a68 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80127ec:	f000 fd08 	bl	8013200 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80127f0:	f7ff f90c 	bl	8011a0c <vPortEnterCritical>
 80127f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80127fa:	b25b      	sxtb	r3, r3
 80127fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012800:	d103      	bne.n	801280a <xQueueSemaphoreTake+0x132>
 8012802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012804:	2200      	movs	r2, #0
 8012806:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801280a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801280c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012810:	b25b      	sxtb	r3, r3
 8012812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012816:	d103      	bne.n	8012820 <xQueueSemaphoreTake+0x148>
 8012818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801281a:	2200      	movs	r2, #0
 801281c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012820:	f7ff f922 	bl	8011a68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012824:	463a      	mov	r2, r7
 8012826:	f107 030c 	add.w	r3, r7, #12
 801282a:	4611      	mov	r1, r2
 801282c:	4618      	mov	r0, r3
 801282e:	f000 ffe9 	bl	8013804 <xTaskCheckForTimeOut>
 8012832:	4603      	mov	r3, r0
 8012834:	2b00      	cmp	r3, #0
 8012836:	d132      	bne.n	801289e <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012838:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801283a:	f000 f9ee 	bl	8012c1a <prvIsQueueEmpty>
 801283e:	4603      	mov	r3, r0
 8012840:	2b00      	cmp	r3, #0
 8012842:	d026      	beq.n	8012892 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	2b00      	cmp	r3, #0
 801284a:	d109      	bne.n	8012860 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 801284c:	f7ff f8de 	bl	8011a0c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012852:	689b      	ldr	r3, [r3, #8]
 8012854:	4618      	mov	r0, r3
 8012856:	f001 f967 	bl	8013b28 <xTaskPriorityInherit>
 801285a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 801285c:	f7ff f904 	bl	8011a68 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012862:	3324      	adds	r3, #36	; 0x24
 8012864:	683a      	ldr	r2, [r7, #0]
 8012866:	4611      	mov	r1, r2
 8012868:	4618      	mov	r0, r3
 801286a:	f000 ff03 	bl	8013674 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801286e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012870:	f000 f981 	bl	8012b76 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012874:	f000 fd0a 	bl	801328c <xTaskResumeAll>
 8012878:	4603      	mov	r3, r0
 801287a:	2b00      	cmp	r3, #0
 801287c:	f47f af69 	bne.w	8012752 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8012880:	4b18      	ldr	r3, [pc, #96]	; (80128e4 <xQueueSemaphoreTake+0x20c>)
 8012882:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012886:	601a      	str	r2, [r3, #0]
 8012888:	f3bf 8f4f 	dsb	sy
 801288c:	f3bf 8f6f 	isb	sy
 8012890:	e75f      	b.n	8012752 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8012892:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012894:	f000 f96f 	bl	8012b76 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012898:	f000 fcf8 	bl	801328c <xTaskResumeAll>
 801289c:	e759      	b.n	8012752 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801289e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80128a0:	f000 f969 	bl	8012b76 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80128a4:	f000 fcf2 	bl	801328c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80128a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80128aa:	f000 f9b6 	bl	8012c1a <prvIsQueueEmpty>
 80128ae:	4603      	mov	r3, r0
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	f43f af4e 	beq.w	8012752 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80128b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d00d      	beq.n	80128d8 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 80128bc:	f7ff f8a6 	bl	8011a0c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80128c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80128c2:	f000 f8b0 	bl	8012a26 <prvGetDisinheritPriorityAfterTimeout>
 80128c6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80128c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128ca:	689b      	ldr	r3, [r3, #8]
 80128cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80128ce:	4618      	mov	r0, r3
 80128d0:	f001 f9fe 	bl	8013cd0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80128d4:	f7ff f8c8 	bl	8011a68 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80128d8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80128da:	4618      	mov	r0, r3
 80128dc:	3738      	adds	r7, #56	; 0x38
 80128de:	46bd      	mov	sp, r7
 80128e0:	bd80      	pop	{r7, pc}
 80128e2:	bf00      	nop
 80128e4:	e000ed04 	.word	0xe000ed04

080128e8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80128e8:	b580      	push	{r7, lr}
 80128ea:	b08e      	sub	sp, #56	; 0x38
 80128ec:	af00      	add	r7, sp, #0
 80128ee:	60f8      	str	r0, [r7, #12]
 80128f0:	60b9      	str	r1, [r7, #8]
 80128f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80128f4:	68fb      	ldr	r3, [r7, #12]
 80128f6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80128f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d109      	bne.n	8012912 <xQueueReceiveFromISR+0x2a>
 80128fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012902:	f383 8811 	msr	BASEPRI, r3
 8012906:	f3bf 8f6f 	isb	sy
 801290a:	f3bf 8f4f 	dsb	sy
 801290e:	623b      	str	r3, [r7, #32]
 8012910:	e7fe      	b.n	8012910 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012912:	68bb      	ldr	r3, [r7, #8]
 8012914:	2b00      	cmp	r3, #0
 8012916:	d103      	bne.n	8012920 <xQueueReceiveFromISR+0x38>
 8012918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801291a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801291c:	2b00      	cmp	r3, #0
 801291e:	d101      	bne.n	8012924 <xQueueReceiveFromISR+0x3c>
 8012920:	2301      	movs	r3, #1
 8012922:	e000      	b.n	8012926 <xQueueReceiveFromISR+0x3e>
 8012924:	2300      	movs	r3, #0
 8012926:	2b00      	cmp	r3, #0
 8012928:	d109      	bne.n	801293e <xQueueReceiveFromISR+0x56>
 801292a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801292e:	f383 8811 	msr	BASEPRI, r3
 8012932:	f3bf 8f6f 	isb	sy
 8012936:	f3bf 8f4f 	dsb	sy
 801293a:	61fb      	str	r3, [r7, #28]
 801293c:	e7fe      	b.n	801293c <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801293e:	f7ff f941 	bl	8011bc4 <vPortValidateInterruptPriority>
	__asm volatile
 8012942:	f3ef 8211 	mrs	r2, BASEPRI
 8012946:	f04f 0350 	mov.w	r3, #80	; 0x50
 801294a:	f383 8811 	msr	BASEPRI, r3
 801294e:	f3bf 8f6f 	isb	sy
 8012952:	f3bf 8f4f 	dsb	sy
 8012956:	61ba      	str	r2, [r7, #24]
 8012958:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801295a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801295c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801295e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012962:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012966:	2b00      	cmp	r3, #0
 8012968:	d02f      	beq.n	80129ca <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801296a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801296c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012970:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012974:	68b9      	ldr	r1, [r7, #8]
 8012976:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012978:	f000 f8d7 	bl	8012b2a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801297c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801297e:	1e5a      	subs	r2, r3, #1
 8012980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012982:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8012984:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012988:	f1b3 3fff 	cmp.w	r3, #4294967295
 801298c:	d112      	bne.n	80129b4 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801298e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012990:	691b      	ldr	r3, [r3, #16]
 8012992:	2b00      	cmp	r3, #0
 8012994:	d016      	beq.n	80129c4 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012998:	3310      	adds	r3, #16
 801299a:	4618      	mov	r0, r3
 801299c:	f000 feb8 	bl	8013710 <xTaskRemoveFromEventList>
 80129a0:	4603      	mov	r3, r0
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d00e      	beq.n	80129c4 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d00b      	beq.n	80129c4 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	2201      	movs	r2, #1
 80129b0:	601a      	str	r2, [r3, #0]
 80129b2:	e007      	b.n	80129c4 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80129b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80129b8:	3301      	adds	r3, #1
 80129ba:	b2db      	uxtb	r3, r3
 80129bc:	b25a      	sxtb	r2, r3
 80129be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80129c4:	2301      	movs	r3, #1
 80129c6:	637b      	str	r3, [r7, #52]	; 0x34
 80129c8:	e001      	b.n	80129ce <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80129ca:	2300      	movs	r3, #0
 80129cc:	637b      	str	r3, [r7, #52]	; 0x34
 80129ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129d0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80129d2:	693b      	ldr	r3, [r7, #16]
 80129d4:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80129d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80129da:	4618      	mov	r0, r3
 80129dc:	3738      	adds	r7, #56	; 0x38
 80129de:	46bd      	mov	sp, r7
 80129e0:	bd80      	pop	{r7, pc}

080129e2 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80129e2:	b580      	push	{r7, lr}
 80129e4:	b084      	sub	sp, #16
 80129e6:	af00      	add	r7, sp, #0
 80129e8:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80129ee:	68fb      	ldr	r3, [r7, #12]
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d109      	bne.n	8012a08 <vQueueDelete+0x26>
	__asm volatile
 80129f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129f8:	f383 8811 	msr	BASEPRI, r3
 80129fc:	f3bf 8f6f 	isb	sy
 8012a00:	f3bf 8f4f 	dsb	sy
 8012a04:	60bb      	str	r3, [r7, #8]
 8012a06:	e7fe      	b.n	8012a06 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8012a08:	68f8      	ldr	r0, [r7, #12]
 8012a0a:	f000 f95d 	bl	8012cc8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8012a0e:	68fb      	ldr	r3, [r7, #12]
 8012a10:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d102      	bne.n	8012a1e <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8012a18:	68f8      	ldr	r0, [r7, #12]
 8012a1a:	f7fe fd09 	bl	8011430 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8012a1e:	bf00      	nop
 8012a20:	3710      	adds	r7, #16
 8012a22:	46bd      	mov	sp, r7
 8012a24:	bd80      	pop	{r7, pc}

08012a26 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8012a26:	b480      	push	{r7}
 8012a28:	b085      	sub	sp, #20
 8012a2a:	af00      	add	r7, sp, #0
 8012a2c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d006      	beq.n	8012a44 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a3a:	681b      	ldr	r3, [r3, #0]
 8012a3c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8012a40:	60fb      	str	r3, [r7, #12]
 8012a42:	e001      	b.n	8012a48 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8012a44:	2300      	movs	r3, #0
 8012a46:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8012a48:	68fb      	ldr	r3, [r7, #12]
	}
 8012a4a:	4618      	mov	r0, r3
 8012a4c:	3714      	adds	r7, #20
 8012a4e:	46bd      	mov	sp, r7
 8012a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a54:	4770      	bx	lr

08012a56 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8012a56:	b580      	push	{r7, lr}
 8012a58:	b086      	sub	sp, #24
 8012a5a:	af00      	add	r7, sp, #0
 8012a5c:	60f8      	str	r0, [r7, #12]
 8012a5e:	60b9      	str	r1, [r7, #8]
 8012a60:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8012a62:	2300      	movs	r3, #0
 8012a64:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012a66:	68fb      	ldr	r3, [r7, #12]
 8012a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012a6a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012a6c:	68fb      	ldr	r3, [r7, #12]
 8012a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d10d      	bne.n	8012a90 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012a74:	68fb      	ldr	r3, [r7, #12]
 8012a76:	681b      	ldr	r3, [r3, #0]
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d14d      	bne.n	8012b18 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012a7c:	68fb      	ldr	r3, [r7, #12]
 8012a7e:	689b      	ldr	r3, [r3, #8]
 8012a80:	4618      	mov	r0, r3
 8012a82:	f001 f8b9 	bl	8013bf8 <xTaskPriorityDisinherit>
 8012a86:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8012a88:	68fb      	ldr	r3, [r7, #12]
 8012a8a:	2200      	movs	r2, #0
 8012a8c:	609a      	str	r2, [r3, #8]
 8012a8e:	e043      	b.n	8012b18 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d119      	bne.n	8012aca <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012a96:	68fb      	ldr	r3, [r7, #12]
 8012a98:	6858      	ldr	r0, [r3, #4]
 8012a9a:	68fb      	ldr	r3, [r7, #12]
 8012a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a9e:	461a      	mov	r2, r3
 8012aa0:	68b9      	ldr	r1, [r7, #8]
 8012aa2:	f007 ff3f 	bl	801a924 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012aa6:	68fb      	ldr	r3, [r7, #12]
 8012aa8:	685a      	ldr	r2, [r3, #4]
 8012aaa:	68fb      	ldr	r3, [r7, #12]
 8012aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012aae:	441a      	add	r2, r3
 8012ab0:	68fb      	ldr	r3, [r7, #12]
 8012ab2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012ab4:	68fb      	ldr	r3, [r7, #12]
 8012ab6:	685a      	ldr	r2, [r3, #4]
 8012ab8:	68fb      	ldr	r3, [r7, #12]
 8012aba:	689b      	ldr	r3, [r3, #8]
 8012abc:	429a      	cmp	r2, r3
 8012abe:	d32b      	bcc.n	8012b18 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8012ac0:	68fb      	ldr	r3, [r7, #12]
 8012ac2:	681a      	ldr	r2, [r3, #0]
 8012ac4:	68fb      	ldr	r3, [r7, #12]
 8012ac6:	605a      	str	r2, [r3, #4]
 8012ac8:	e026      	b.n	8012b18 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8012aca:	68fb      	ldr	r3, [r7, #12]
 8012acc:	68d8      	ldr	r0, [r3, #12]
 8012ace:	68fb      	ldr	r3, [r7, #12]
 8012ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ad2:	461a      	mov	r2, r3
 8012ad4:	68b9      	ldr	r1, [r7, #8]
 8012ad6:	f007 ff25 	bl	801a924 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8012ada:	68fb      	ldr	r3, [r7, #12]
 8012adc:	68da      	ldr	r2, [r3, #12]
 8012ade:	68fb      	ldr	r3, [r7, #12]
 8012ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ae2:	425b      	negs	r3, r3
 8012ae4:	441a      	add	r2, r3
 8012ae6:	68fb      	ldr	r3, [r7, #12]
 8012ae8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012aea:	68fb      	ldr	r3, [r7, #12]
 8012aec:	68da      	ldr	r2, [r3, #12]
 8012aee:	68fb      	ldr	r3, [r7, #12]
 8012af0:	681b      	ldr	r3, [r3, #0]
 8012af2:	429a      	cmp	r2, r3
 8012af4:	d207      	bcs.n	8012b06 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8012af6:	68fb      	ldr	r3, [r7, #12]
 8012af8:	689a      	ldr	r2, [r3, #8]
 8012afa:	68fb      	ldr	r3, [r7, #12]
 8012afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012afe:	425b      	negs	r3, r3
 8012b00:	441a      	add	r2, r3
 8012b02:	68fb      	ldr	r3, [r7, #12]
 8012b04:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	2b02      	cmp	r3, #2
 8012b0a:	d105      	bne.n	8012b18 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012b0c:	693b      	ldr	r3, [r7, #16]
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d002      	beq.n	8012b18 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8012b12:	693b      	ldr	r3, [r7, #16]
 8012b14:	3b01      	subs	r3, #1
 8012b16:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012b18:	693b      	ldr	r3, [r7, #16]
 8012b1a:	1c5a      	adds	r2, r3, #1
 8012b1c:	68fb      	ldr	r3, [r7, #12]
 8012b1e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8012b20:	697b      	ldr	r3, [r7, #20]
}
 8012b22:	4618      	mov	r0, r3
 8012b24:	3718      	adds	r7, #24
 8012b26:	46bd      	mov	sp, r7
 8012b28:	bd80      	pop	{r7, pc}

08012b2a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8012b2a:	b580      	push	{r7, lr}
 8012b2c:	b082      	sub	sp, #8
 8012b2e:	af00      	add	r7, sp, #0
 8012b30:	6078      	str	r0, [r7, #4]
 8012b32:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d018      	beq.n	8012b6e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	68da      	ldr	r2, [r3, #12]
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b44:	441a      	add	r2, r3
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	68da      	ldr	r2, [r3, #12]
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	689b      	ldr	r3, [r3, #8]
 8012b52:	429a      	cmp	r2, r3
 8012b54:	d303      	bcc.n	8012b5e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	681a      	ldr	r2, [r3, #0]
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	68d9      	ldr	r1, [r3, #12]
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b66:	461a      	mov	r2, r3
 8012b68:	6838      	ldr	r0, [r7, #0]
 8012b6a:	f007 fedb 	bl	801a924 <memcpy>
	}
}
 8012b6e:	bf00      	nop
 8012b70:	3708      	adds	r7, #8
 8012b72:	46bd      	mov	sp, r7
 8012b74:	bd80      	pop	{r7, pc}

08012b76 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012b76:	b580      	push	{r7, lr}
 8012b78:	b084      	sub	sp, #16
 8012b7a:	af00      	add	r7, sp, #0
 8012b7c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012b7e:	f7fe ff45 	bl	8011a0c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012b88:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012b8a:	e011      	b.n	8012bb0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d012      	beq.n	8012bba <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	3324      	adds	r3, #36	; 0x24
 8012b98:	4618      	mov	r0, r3
 8012b9a:	f000 fdb9 	bl	8013710 <xTaskRemoveFromEventList>
 8012b9e:	4603      	mov	r3, r0
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d001      	beq.n	8012ba8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8012ba4:	f000 fe8e 	bl	80138c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8012ba8:	7bfb      	ldrb	r3, [r7, #15]
 8012baa:	3b01      	subs	r3, #1
 8012bac:	b2db      	uxtb	r3, r3
 8012bae:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012bb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	dce9      	bgt.n	8012b8c <prvUnlockQueue+0x16>
 8012bb8:	e000      	b.n	8012bbc <prvUnlockQueue+0x46>
					break;
 8012bba:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	22ff      	movs	r2, #255	; 0xff
 8012bc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8012bc4:	f7fe ff50 	bl	8011a68 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8012bc8:	f7fe ff20 	bl	8011a0c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012bd2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012bd4:	e011      	b.n	8012bfa <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	691b      	ldr	r3, [r3, #16]
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	d012      	beq.n	8012c04 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	3310      	adds	r3, #16
 8012be2:	4618      	mov	r0, r3
 8012be4:	f000 fd94 	bl	8013710 <xTaskRemoveFromEventList>
 8012be8:	4603      	mov	r3, r0
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	d001      	beq.n	8012bf2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8012bee:	f000 fe69 	bl	80138c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8012bf2:	7bbb      	ldrb	r3, [r7, #14]
 8012bf4:	3b01      	subs	r3, #1
 8012bf6:	b2db      	uxtb	r3, r3
 8012bf8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012bfa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	dce9      	bgt.n	8012bd6 <prvUnlockQueue+0x60>
 8012c02:	e000      	b.n	8012c06 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8012c04:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	22ff      	movs	r2, #255	; 0xff
 8012c0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8012c0e:	f7fe ff2b 	bl	8011a68 <vPortExitCritical>
}
 8012c12:	bf00      	nop
 8012c14:	3710      	adds	r7, #16
 8012c16:	46bd      	mov	sp, r7
 8012c18:	bd80      	pop	{r7, pc}

08012c1a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8012c1a:	b580      	push	{r7, lr}
 8012c1c:	b084      	sub	sp, #16
 8012c1e:	af00      	add	r7, sp, #0
 8012c20:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012c22:	f7fe fef3 	bl	8011a0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	d102      	bne.n	8012c34 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8012c2e:	2301      	movs	r3, #1
 8012c30:	60fb      	str	r3, [r7, #12]
 8012c32:	e001      	b.n	8012c38 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8012c34:	2300      	movs	r3, #0
 8012c36:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012c38:	f7fe ff16 	bl	8011a68 <vPortExitCritical>

	return xReturn;
 8012c3c:	68fb      	ldr	r3, [r7, #12]
}
 8012c3e:	4618      	mov	r0, r3
 8012c40:	3710      	adds	r7, #16
 8012c42:	46bd      	mov	sp, r7
 8012c44:	bd80      	pop	{r7, pc}

08012c46 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8012c46:	b580      	push	{r7, lr}
 8012c48:	b084      	sub	sp, #16
 8012c4a:	af00      	add	r7, sp, #0
 8012c4c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012c4e:	f7fe fedd 	bl	8011a0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012c5a:	429a      	cmp	r2, r3
 8012c5c:	d102      	bne.n	8012c64 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8012c5e:	2301      	movs	r3, #1
 8012c60:	60fb      	str	r3, [r7, #12]
 8012c62:	e001      	b.n	8012c68 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8012c64:	2300      	movs	r3, #0
 8012c66:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012c68:	f7fe fefe 	bl	8011a68 <vPortExitCritical>

	return xReturn;
 8012c6c:	68fb      	ldr	r3, [r7, #12]
}
 8012c6e:	4618      	mov	r0, r3
 8012c70:	3710      	adds	r7, #16
 8012c72:	46bd      	mov	sp, r7
 8012c74:	bd80      	pop	{r7, pc}
	...

08012c78 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8012c78:	b480      	push	{r7}
 8012c7a:	b085      	sub	sp, #20
 8012c7c:	af00      	add	r7, sp, #0
 8012c7e:	6078      	str	r0, [r7, #4]
 8012c80:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012c82:	2300      	movs	r3, #0
 8012c84:	60fb      	str	r3, [r7, #12]
 8012c86:	e014      	b.n	8012cb2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8012c88:	4a0e      	ldr	r2, [pc, #56]	; (8012cc4 <vQueueAddToRegistry+0x4c>)
 8012c8a:	68fb      	ldr	r3, [r7, #12]
 8012c8c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	d10b      	bne.n	8012cac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8012c94:	490b      	ldr	r1, [pc, #44]	; (8012cc4 <vQueueAddToRegistry+0x4c>)
 8012c96:	68fb      	ldr	r3, [r7, #12]
 8012c98:	683a      	ldr	r2, [r7, #0]
 8012c9a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8012c9e:	4a09      	ldr	r2, [pc, #36]	; (8012cc4 <vQueueAddToRegistry+0x4c>)
 8012ca0:	68fb      	ldr	r3, [r7, #12]
 8012ca2:	00db      	lsls	r3, r3, #3
 8012ca4:	4413      	add	r3, r2
 8012ca6:	687a      	ldr	r2, [r7, #4]
 8012ca8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8012caa:	e005      	b.n	8012cb8 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012cac:	68fb      	ldr	r3, [r7, #12]
 8012cae:	3301      	adds	r3, #1
 8012cb0:	60fb      	str	r3, [r7, #12]
 8012cb2:	68fb      	ldr	r3, [r7, #12]
 8012cb4:	2b0b      	cmp	r3, #11
 8012cb6:	d9e7      	bls.n	8012c88 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8012cb8:	bf00      	nop
 8012cba:	3714      	adds	r7, #20
 8012cbc:	46bd      	mov	sp, r7
 8012cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cc2:	4770      	bx	lr
 8012cc4:	2002896c 	.word	0x2002896c

08012cc8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8012cc8:	b480      	push	{r7}
 8012cca:	b085      	sub	sp, #20
 8012ccc:	af00      	add	r7, sp, #0
 8012cce:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012cd0:	2300      	movs	r3, #0
 8012cd2:	60fb      	str	r3, [r7, #12]
 8012cd4:	e016      	b.n	8012d04 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8012cd6:	4a10      	ldr	r2, [pc, #64]	; (8012d18 <vQueueUnregisterQueue+0x50>)
 8012cd8:	68fb      	ldr	r3, [r7, #12]
 8012cda:	00db      	lsls	r3, r3, #3
 8012cdc:	4413      	add	r3, r2
 8012cde:	685b      	ldr	r3, [r3, #4]
 8012ce0:	687a      	ldr	r2, [r7, #4]
 8012ce2:	429a      	cmp	r2, r3
 8012ce4:	d10b      	bne.n	8012cfe <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8012ce6:	4a0c      	ldr	r2, [pc, #48]	; (8012d18 <vQueueUnregisterQueue+0x50>)
 8012ce8:	68fb      	ldr	r3, [r7, #12]
 8012cea:	2100      	movs	r1, #0
 8012cec:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8012cf0:	4a09      	ldr	r2, [pc, #36]	; (8012d18 <vQueueUnregisterQueue+0x50>)
 8012cf2:	68fb      	ldr	r3, [r7, #12]
 8012cf4:	00db      	lsls	r3, r3, #3
 8012cf6:	4413      	add	r3, r2
 8012cf8:	2200      	movs	r2, #0
 8012cfa:	605a      	str	r2, [r3, #4]
				break;
 8012cfc:	e005      	b.n	8012d0a <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012cfe:	68fb      	ldr	r3, [r7, #12]
 8012d00:	3301      	adds	r3, #1
 8012d02:	60fb      	str	r3, [r7, #12]
 8012d04:	68fb      	ldr	r3, [r7, #12]
 8012d06:	2b0b      	cmp	r3, #11
 8012d08:	d9e5      	bls.n	8012cd6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8012d0a:	bf00      	nop
 8012d0c:	3714      	adds	r7, #20
 8012d0e:	46bd      	mov	sp, r7
 8012d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d14:	4770      	bx	lr
 8012d16:	bf00      	nop
 8012d18:	2002896c 	.word	0x2002896c

08012d1c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8012d1c:	b580      	push	{r7, lr}
 8012d1e:	b086      	sub	sp, #24
 8012d20:	af00      	add	r7, sp, #0
 8012d22:	60f8      	str	r0, [r7, #12]
 8012d24:	60b9      	str	r1, [r7, #8]
 8012d26:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8012d28:	68fb      	ldr	r3, [r7, #12]
 8012d2a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8012d2c:	f7fe fe6e 	bl	8011a0c <vPortEnterCritical>
 8012d30:	697b      	ldr	r3, [r7, #20]
 8012d32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012d36:	b25b      	sxtb	r3, r3
 8012d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d3c:	d103      	bne.n	8012d46 <vQueueWaitForMessageRestricted+0x2a>
 8012d3e:	697b      	ldr	r3, [r7, #20]
 8012d40:	2200      	movs	r2, #0
 8012d42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012d46:	697b      	ldr	r3, [r7, #20]
 8012d48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012d4c:	b25b      	sxtb	r3, r3
 8012d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d52:	d103      	bne.n	8012d5c <vQueueWaitForMessageRestricted+0x40>
 8012d54:	697b      	ldr	r3, [r7, #20]
 8012d56:	2200      	movs	r2, #0
 8012d58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012d5c:	f7fe fe84 	bl	8011a68 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8012d60:	697b      	ldr	r3, [r7, #20]
 8012d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d106      	bne.n	8012d76 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8012d68:	697b      	ldr	r3, [r7, #20]
 8012d6a:	3324      	adds	r3, #36	; 0x24
 8012d6c:	687a      	ldr	r2, [r7, #4]
 8012d6e:	68b9      	ldr	r1, [r7, #8]
 8012d70:	4618      	mov	r0, r3
 8012d72:	f000 fca3 	bl	80136bc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8012d76:	6978      	ldr	r0, [r7, #20]
 8012d78:	f7ff fefd 	bl	8012b76 <prvUnlockQueue>
	}
 8012d7c:	bf00      	nop
 8012d7e:	3718      	adds	r7, #24
 8012d80:	46bd      	mov	sp, r7
 8012d82:	bd80      	pop	{r7, pc}

08012d84 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8012d84:	b580      	push	{r7, lr}
 8012d86:	b08e      	sub	sp, #56	; 0x38
 8012d88:	af04      	add	r7, sp, #16
 8012d8a:	60f8      	str	r0, [r7, #12]
 8012d8c:	60b9      	str	r1, [r7, #8]
 8012d8e:	607a      	str	r2, [r7, #4]
 8012d90:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8012d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d109      	bne.n	8012dac <xTaskCreateStatic+0x28>
 8012d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d9c:	f383 8811 	msr	BASEPRI, r3
 8012da0:	f3bf 8f6f 	isb	sy
 8012da4:	f3bf 8f4f 	dsb	sy
 8012da8:	623b      	str	r3, [r7, #32]
 8012daa:	e7fe      	b.n	8012daa <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8012dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	d109      	bne.n	8012dc6 <xTaskCreateStatic+0x42>
 8012db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012db6:	f383 8811 	msr	BASEPRI, r3
 8012dba:	f3bf 8f6f 	isb	sy
 8012dbe:	f3bf 8f4f 	dsb	sy
 8012dc2:	61fb      	str	r3, [r7, #28]
 8012dc4:	e7fe      	b.n	8012dc4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8012dc6:	2364      	movs	r3, #100	; 0x64
 8012dc8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8012dca:	693b      	ldr	r3, [r7, #16]
 8012dcc:	2b64      	cmp	r3, #100	; 0x64
 8012dce:	d009      	beq.n	8012de4 <xTaskCreateStatic+0x60>
 8012dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dd4:	f383 8811 	msr	BASEPRI, r3
 8012dd8:	f3bf 8f6f 	isb	sy
 8012ddc:	f3bf 8f4f 	dsb	sy
 8012de0:	61bb      	str	r3, [r7, #24]
 8012de2:	e7fe      	b.n	8012de2 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8012de4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8012de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d01e      	beq.n	8012e2a <xTaskCreateStatic+0xa6>
 8012dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d01b      	beq.n	8012e2a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012df4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8012df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012df8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012dfa:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8012dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dfe:	2202      	movs	r2, #2
 8012e00:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8012e04:	2300      	movs	r3, #0
 8012e06:	9303      	str	r3, [sp, #12]
 8012e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e0a:	9302      	str	r3, [sp, #8]
 8012e0c:	f107 0314 	add.w	r3, r7, #20
 8012e10:	9301      	str	r3, [sp, #4]
 8012e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e14:	9300      	str	r3, [sp, #0]
 8012e16:	683b      	ldr	r3, [r7, #0]
 8012e18:	687a      	ldr	r2, [r7, #4]
 8012e1a:	68b9      	ldr	r1, [r7, #8]
 8012e1c:	68f8      	ldr	r0, [r7, #12]
 8012e1e:	f000 f850 	bl	8012ec2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012e22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012e24:	f000 f8e2 	bl	8012fec <prvAddNewTaskToReadyList>
 8012e28:	e001      	b.n	8012e2e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8012e2a:	2300      	movs	r3, #0
 8012e2c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8012e2e:	697b      	ldr	r3, [r7, #20]
	}
 8012e30:	4618      	mov	r0, r3
 8012e32:	3728      	adds	r7, #40	; 0x28
 8012e34:	46bd      	mov	sp, r7
 8012e36:	bd80      	pop	{r7, pc}

08012e38 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8012e38:	b580      	push	{r7, lr}
 8012e3a:	b08c      	sub	sp, #48	; 0x30
 8012e3c:	af04      	add	r7, sp, #16
 8012e3e:	60f8      	str	r0, [r7, #12]
 8012e40:	60b9      	str	r1, [r7, #8]
 8012e42:	603b      	str	r3, [r7, #0]
 8012e44:	4613      	mov	r3, r2
 8012e46:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8012e48:	88fb      	ldrh	r3, [r7, #6]
 8012e4a:	009b      	lsls	r3, r3, #2
 8012e4c:	4618      	mov	r0, r3
 8012e4e:	f7fe fa29 	bl	80112a4 <pvPortMalloc>
 8012e52:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8012e54:	697b      	ldr	r3, [r7, #20]
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d00e      	beq.n	8012e78 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8012e5a:	2064      	movs	r0, #100	; 0x64
 8012e5c:	f7fe fa22 	bl	80112a4 <pvPortMalloc>
 8012e60:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8012e62:	69fb      	ldr	r3, [r7, #28]
 8012e64:	2b00      	cmp	r3, #0
 8012e66:	d003      	beq.n	8012e70 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8012e68:	69fb      	ldr	r3, [r7, #28]
 8012e6a:	697a      	ldr	r2, [r7, #20]
 8012e6c:	631a      	str	r2, [r3, #48]	; 0x30
 8012e6e:	e005      	b.n	8012e7c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8012e70:	6978      	ldr	r0, [r7, #20]
 8012e72:	f7fe fadd 	bl	8011430 <vPortFree>
 8012e76:	e001      	b.n	8012e7c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8012e78:	2300      	movs	r3, #0
 8012e7a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8012e7c:	69fb      	ldr	r3, [r7, #28]
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d017      	beq.n	8012eb2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8012e82:	69fb      	ldr	r3, [r7, #28]
 8012e84:	2200      	movs	r2, #0
 8012e86:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8012e8a:	88fa      	ldrh	r2, [r7, #6]
 8012e8c:	2300      	movs	r3, #0
 8012e8e:	9303      	str	r3, [sp, #12]
 8012e90:	69fb      	ldr	r3, [r7, #28]
 8012e92:	9302      	str	r3, [sp, #8]
 8012e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e96:	9301      	str	r3, [sp, #4]
 8012e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e9a:	9300      	str	r3, [sp, #0]
 8012e9c:	683b      	ldr	r3, [r7, #0]
 8012e9e:	68b9      	ldr	r1, [r7, #8]
 8012ea0:	68f8      	ldr	r0, [r7, #12]
 8012ea2:	f000 f80e 	bl	8012ec2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012ea6:	69f8      	ldr	r0, [r7, #28]
 8012ea8:	f000 f8a0 	bl	8012fec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8012eac:	2301      	movs	r3, #1
 8012eae:	61bb      	str	r3, [r7, #24]
 8012eb0:	e002      	b.n	8012eb8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8012eb6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8012eb8:	69bb      	ldr	r3, [r7, #24]
	}
 8012eba:	4618      	mov	r0, r3
 8012ebc:	3720      	adds	r7, #32
 8012ebe:	46bd      	mov	sp, r7
 8012ec0:	bd80      	pop	{r7, pc}

08012ec2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8012ec2:	b580      	push	{r7, lr}
 8012ec4:	b088      	sub	sp, #32
 8012ec6:	af00      	add	r7, sp, #0
 8012ec8:	60f8      	str	r0, [r7, #12]
 8012eca:	60b9      	str	r1, [r7, #8]
 8012ecc:	607a      	str	r2, [r7, #4]
 8012ece:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8012ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ed2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	009b      	lsls	r3, r3, #2
 8012ed8:	461a      	mov	r2, r3
 8012eda:	21a5      	movs	r1, #165	; 0xa5
 8012edc:	f007 fd2d 	bl	801a93a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8012ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ee2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8012eea:	3b01      	subs	r3, #1
 8012eec:	009b      	lsls	r3, r3, #2
 8012eee:	4413      	add	r3, r2
 8012ef0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8012ef2:	69bb      	ldr	r3, [r7, #24]
 8012ef4:	f023 0307 	bic.w	r3, r3, #7
 8012ef8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8012efa:	69bb      	ldr	r3, [r7, #24]
 8012efc:	f003 0307 	and.w	r3, r3, #7
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	d009      	beq.n	8012f18 <prvInitialiseNewTask+0x56>
 8012f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f08:	f383 8811 	msr	BASEPRI, r3
 8012f0c:	f3bf 8f6f 	isb	sy
 8012f10:	f3bf 8f4f 	dsb	sy
 8012f14:	617b      	str	r3, [r7, #20]
 8012f16:	e7fe      	b.n	8012f16 <prvInitialiseNewTask+0x54>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8012f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f1a:	69ba      	ldr	r2, [r7, #24]
 8012f1c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8012f1e:	68bb      	ldr	r3, [r7, #8]
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	d01f      	beq.n	8012f64 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012f24:	2300      	movs	r3, #0
 8012f26:	61fb      	str	r3, [r7, #28]
 8012f28:	e012      	b.n	8012f50 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8012f2a:	68ba      	ldr	r2, [r7, #8]
 8012f2c:	69fb      	ldr	r3, [r7, #28]
 8012f2e:	4413      	add	r3, r2
 8012f30:	7819      	ldrb	r1, [r3, #0]
 8012f32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012f34:	69fb      	ldr	r3, [r7, #28]
 8012f36:	4413      	add	r3, r2
 8012f38:	3334      	adds	r3, #52	; 0x34
 8012f3a:	460a      	mov	r2, r1
 8012f3c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8012f3e:	68ba      	ldr	r2, [r7, #8]
 8012f40:	69fb      	ldr	r3, [r7, #28]
 8012f42:	4413      	add	r3, r2
 8012f44:	781b      	ldrb	r3, [r3, #0]
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	d006      	beq.n	8012f58 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012f4a:	69fb      	ldr	r3, [r7, #28]
 8012f4c:	3301      	adds	r3, #1
 8012f4e:	61fb      	str	r3, [r7, #28]
 8012f50:	69fb      	ldr	r3, [r7, #28]
 8012f52:	2b0f      	cmp	r3, #15
 8012f54:	d9e9      	bls.n	8012f2a <prvInitialiseNewTask+0x68>
 8012f56:	e000      	b.n	8012f5a <prvInitialiseNewTask+0x98>
			{
				break;
 8012f58:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8012f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f5c:	2200      	movs	r2, #0
 8012f5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012f62:	e003      	b.n	8012f6c <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8012f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f66:	2200      	movs	r2, #0
 8012f68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8012f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f6e:	2b37      	cmp	r3, #55	; 0x37
 8012f70:	d901      	bls.n	8012f76 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8012f72:	2337      	movs	r3, #55	; 0x37
 8012f74:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8012f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012f7a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8012f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012f80:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 8012f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f84:	2200      	movs	r2, #0
 8012f86:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8012f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f8a:	3304      	adds	r3, #4
 8012f8c:	4618      	mov	r0, r3
 8012f8e:	f7fe fb85 	bl	801169c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f94:	3318      	adds	r3, #24
 8012f96:	4618      	mov	r0, r3
 8012f98:	f7fe fb80 	bl	801169c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8012f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012fa0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fa4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012faa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8012fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012fb0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8012fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fb4:	2200      	movs	r2, #0
 8012fb6:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8012fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fba:	2200      	movs	r2, #0
 8012fbc:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fc0:	2200      	movs	r2, #0
 8012fc2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012fc6:	683a      	ldr	r2, [r7, #0]
 8012fc8:	68f9      	ldr	r1, [r7, #12]
 8012fca:	69b8      	ldr	r0, [r7, #24]
 8012fcc:	f7fe fbfa 	bl	80117c4 <pxPortInitialiseStack>
 8012fd0:	4602      	mov	r2, r0
 8012fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fd4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8012fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	d002      	beq.n	8012fe2 <prvInitialiseNewTask+0x120>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8012fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012fe0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012fe2:	bf00      	nop
 8012fe4:	3720      	adds	r7, #32
 8012fe6:	46bd      	mov	sp, r7
 8012fe8:	bd80      	pop	{r7, pc}
	...

08012fec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8012fec:	b580      	push	{r7, lr}
 8012fee:	b082      	sub	sp, #8
 8012ff0:	af00      	add	r7, sp, #0
 8012ff2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8012ff4:	f7fe fd0a 	bl	8011a0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012ff8:	4b2d      	ldr	r3, [pc, #180]	; (80130b0 <prvAddNewTaskToReadyList+0xc4>)
 8012ffa:	681b      	ldr	r3, [r3, #0]
 8012ffc:	3301      	adds	r3, #1
 8012ffe:	4a2c      	ldr	r2, [pc, #176]	; (80130b0 <prvAddNewTaskToReadyList+0xc4>)
 8013000:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8013002:	4b2c      	ldr	r3, [pc, #176]	; (80130b4 <prvAddNewTaskToReadyList+0xc8>)
 8013004:	681b      	ldr	r3, [r3, #0]
 8013006:	2b00      	cmp	r3, #0
 8013008:	d109      	bne.n	801301e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801300a:	4a2a      	ldr	r2, [pc, #168]	; (80130b4 <prvAddNewTaskToReadyList+0xc8>)
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013010:	4b27      	ldr	r3, [pc, #156]	; (80130b0 <prvAddNewTaskToReadyList+0xc4>)
 8013012:	681b      	ldr	r3, [r3, #0]
 8013014:	2b01      	cmp	r3, #1
 8013016:	d110      	bne.n	801303a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8013018:	f000 fc9e 	bl	8013958 <prvInitialiseTaskLists>
 801301c:	e00d      	b.n	801303a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801301e:	4b26      	ldr	r3, [pc, #152]	; (80130b8 <prvAddNewTaskToReadyList+0xcc>)
 8013020:	681b      	ldr	r3, [r3, #0]
 8013022:	2b00      	cmp	r3, #0
 8013024:	d109      	bne.n	801303a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8013026:	4b23      	ldr	r3, [pc, #140]	; (80130b4 <prvAddNewTaskToReadyList+0xc8>)
 8013028:	681b      	ldr	r3, [r3, #0]
 801302a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013030:	429a      	cmp	r2, r3
 8013032:	d802      	bhi.n	801303a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013034:	4a1f      	ldr	r2, [pc, #124]	; (80130b4 <prvAddNewTaskToReadyList+0xc8>)
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801303a:	4b20      	ldr	r3, [pc, #128]	; (80130bc <prvAddNewTaskToReadyList+0xd0>)
 801303c:	681b      	ldr	r3, [r3, #0]
 801303e:	3301      	adds	r3, #1
 8013040:	4a1e      	ldr	r2, [pc, #120]	; (80130bc <prvAddNewTaskToReadyList+0xd0>)
 8013042:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8013044:	4b1d      	ldr	r3, [pc, #116]	; (80130bc <prvAddNewTaskToReadyList+0xd0>)
 8013046:	681a      	ldr	r2, [r3, #0]
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013050:	4b1b      	ldr	r3, [pc, #108]	; (80130c0 <prvAddNewTaskToReadyList+0xd4>)
 8013052:	681b      	ldr	r3, [r3, #0]
 8013054:	429a      	cmp	r2, r3
 8013056:	d903      	bls.n	8013060 <prvAddNewTaskToReadyList+0x74>
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801305c:	4a18      	ldr	r2, [pc, #96]	; (80130c0 <prvAddNewTaskToReadyList+0xd4>)
 801305e:	6013      	str	r3, [r2, #0]
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013064:	4613      	mov	r3, r2
 8013066:	009b      	lsls	r3, r3, #2
 8013068:	4413      	add	r3, r2
 801306a:	009b      	lsls	r3, r3, #2
 801306c:	4a15      	ldr	r2, [pc, #84]	; (80130c4 <prvAddNewTaskToReadyList+0xd8>)
 801306e:	441a      	add	r2, r3
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	3304      	adds	r3, #4
 8013074:	4619      	mov	r1, r3
 8013076:	4610      	mov	r0, r2
 8013078:	f7fe fb1d 	bl	80116b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801307c:	f7fe fcf4 	bl	8011a68 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013080:	4b0d      	ldr	r3, [pc, #52]	; (80130b8 <prvAddNewTaskToReadyList+0xcc>)
 8013082:	681b      	ldr	r3, [r3, #0]
 8013084:	2b00      	cmp	r3, #0
 8013086:	d00e      	beq.n	80130a6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013088:	4b0a      	ldr	r3, [pc, #40]	; (80130b4 <prvAddNewTaskToReadyList+0xc8>)
 801308a:	681b      	ldr	r3, [r3, #0]
 801308c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013092:	429a      	cmp	r2, r3
 8013094:	d207      	bcs.n	80130a6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013096:	4b0c      	ldr	r3, [pc, #48]	; (80130c8 <prvAddNewTaskToReadyList+0xdc>)
 8013098:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801309c:	601a      	str	r2, [r3, #0]
 801309e:	f3bf 8f4f 	dsb	sy
 80130a2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80130a6:	bf00      	nop
 80130a8:	3708      	adds	r7, #8
 80130aa:	46bd      	mov	sp, r7
 80130ac:	bd80      	pop	{r7, pc}
 80130ae:	bf00      	nop
 80130b0:	20027450 	.word	0x20027450
 80130b4:	20026f7c 	.word	0x20026f7c
 80130b8:	2002745c 	.word	0x2002745c
 80130bc:	2002746c 	.word	0x2002746c
 80130c0:	20027458 	.word	0x20027458
 80130c4:	20026f80 	.word	0x20026f80
 80130c8:	e000ed04 	.word	0xe000ed04

080130cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80130cc:	b580      	push	{r7, lr}
 80130ce:	b084      	sub	sp, #16
 80130d0:	af00      	add	r7, sp, #0
 80130d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80130d4:	2300      	movs	r3, #0
 80130d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d016      	beq.n	801310c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80130de:	4b13      	ldr	r3, [pc, #76]	; (801312c <vTaskDelay+0x60>)
 80130e0:	681b      	ldr	r3, [r3, #0]
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d009      	beq.n	80130fa <vTaskDelay+0x2e>
 80130e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130ea:	f383 8811 	msr	BASEPRI, r3
 80130ee:	f3bf 8f6f 	isb	sy
 80130f2:	f3bf 8f4f 	dsb	sy
 80130f6:	60bb      	str	r3, [r7, #8]
 80130f8:	e7fe      	b.n	80130f8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80130fa:	f000 f881 	bl	8013200 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80130fe:	2100      	movs	r1, #0
 8013100:	6878      	ldr	r0, [r7, #4]
 8013102:	f001 f861 	bl	80141c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8013106:	f000 f8c1 	bl	801328c <xTaskResumeAll>
 801310a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801310c:	68fb      	ldr	r3, [r7, #12]
 801310e:	2b00      	cmp	r3, #0
 8013110:	d107      	bne.n	8013122 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8013112:	4b07      	ldr	r3, [pc, #28]	; (8013130 <vTaskDelay+0x64>)
 8013114:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013118:	601a      	str	r2, [r3, #0]
 801311a:	f3bf 8f4f 	dsb	sy
 801311e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013122:	bf00      	nop
 8013124:	3710      	adds	r7, #16
 8013126:	46bd      	mov	sp, r7
 8013128:	bd80      	pop	{r7, pc}
 801312a:	bf00      	nop
 801312c:	20027478 	.word	0x20027478
 8013130:	e000ed04 	.word	0xe000ed04

08013134 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013134:	b580      	push	{r7, lr}
 8013136:	b08a      	sub	sp, #40	; 0x28
 8013138:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801313a:	2300      	movs	r3, #0
 801313c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801313e:	2300      	movs	r3, #0
 8013140:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8013142:	463a      	mov	r2, r7
 8013144:	1d39      	adds	r1, r7, #4
 8013146:	f107 0308 	add.w	r3, r7, #8
 801314a:	4618      	mov	r0, r3
 801314c:	f7fe f876 	bl	801123c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013150:	6839      	ldr	r1, [r7, #0]
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	68ba      	ldr	r2, [r7, #8]
 8013156:	9202      	str	r2, [sp, #8]
 8013158:	9301      	str	r3, [sp, #4]
 801315a:	2300      	movs	r3, #0
 801315c:	9300      	str	r3, [sp, #0]
 801315e:	2300      	movs	r3, #0
 8013160:	460a      	mov	r2, r1
 8013162:	4921      	ldr	r1, [pc, #132]	; (80131e8 <vTaskStartScheduler+0xb4>)
 8013164:	4821      	ldr	r0, [pc, #132]	; (80131ec <vTaskStartScheduler+0xb8>)
 8013166:	f7ff fe0d 	bl	8012d84 <xTaskCreateStatic>
 801316a:	4602      	mov	r2, r0
 801316c:	4b20      	ldr	r3, [pc, #128]	; (80131f0 <vTaskStartScheduler+0xbc>)
 801316e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8013170:	4b1f      	ldr	r3, [pc, #124]	; (80131f0 <vTaskStartScheduler+0xbc>)
 8013172:	681b      	ldr	r3, [r3, #0]
 8013174:	2b00      	cmp	r3, #0
 8013176:	d002      	beq.n	801317e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8013178:	2301      	movs	r3, #1
 801317a:	617b      	str	r3, [r7, #20]
 801317c:	e001      	b.n	8013182 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801317e:	2300      	movs	r3, #0
 8013180:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8013182:	697b      	ldr	r3, [r7, #20]
 8013184:	2b01      	cmp	r3, #1
 8013186:	d102      	bne.n	801318e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8013188:	f001 f872 	bl	8014270 <xTimerCreateTimerTask>
 801318c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801318e:	697b      	ldr	r3, [r7, #20]
 8013190:	2b01      	cmp	r3, #1
 8013192:	d117      	bne.n	80131c4 <vTaskStartScheduler+0x90>
 8013194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013198:	f383 8811 	msr	BASEPRI, r3
 801319c:	f3bf 8f6f 	isb	sy
 80131a0:	f3bf 8f4f 	dsb	sy
 80131a4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80131a6:	4b13      	ldr	r3, [pc, #76]	; (80131f4 <vTaskStartScheduler+0xc0>)
 80131a8:	f04f 32ff 	mov.w	r2, #4294967295
 80131ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80131ae:	4b12      	ldr	r3, [pc, #72]	; (80131f8 <vTaskStartScheduler+0xc4>)
 80131b0:	2201      	movs	r2, #1
 80131b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80131b4:	4b11      	ldr	r3, [pc, #68]	; (80131fc <vTaskStartScheduler+0xc8>)
 80131b6:	2200      	movs	r2, #0
 80131b8:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80131ba:	f7ee f850 	bl	800125e <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80131be:	f7fe fb87 	bl	80118d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80131c2:	e00d      	b.n	80131e0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80131c4:	697b      	ldr	r3, [r7, #20]
 80131c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80131ca:	d109      	bne.n	80131e0 <vTaskStartScheduler+0xac>
 80131cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131d0:	f383 8811 	msr	BASEPRI, r3
 80131d4:	f3bf 8f6f 	isb	sy
 80131d8:	f3bf 8f4f 	dsb	sy
 80131dc:	60fb      	str	r3, [r7, #12]
 80131de:	e7fe      	b.n	80131de <vTaskStartScheduler+0xaa>
}
 80131e0:	bf00      	nop
 80131e2:	3718      	adds	r7, #24
 80131e4:	46bd      	mov	sp, r7
 80131e6:	bd80      	pop	{r7, pc}
 80131e8:	0801bd08 	.word	0x0801bd08
 80131ec:	080138dd 	.word	0x080138dd
 80131f0:	20027474 	.word	0x20027474
 80131f4:	20027470 	.word	0x20027470
 80131f8:	2002745c 	.word	0x2002745c
 80131fc:	20027454 	.word	0x20027454

08013200 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013200:	b480      	push	{r7}
 8013202:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8013204:	4b04      	ldr	r3, [pc, #16]	; (8013218 <vTaskSuspendAll+0x18>)
 8013206:	681b      	ldr	r3, [r3, #0]
 8013208:	3301      	adds	r3, #1
 801320a:	4a03      	ldr	r2, [pc, #12]	; (8013218 <vTaskSuspendAll+0x18>)
 801320c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 801320e:	bf00      	nop
 8013210:	46bd      	mov	sp, r7
 8013212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013216:	4770      	bx	lr
 8013218:	20027478 	.word	0x20027478

0801321c <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 801321c:	b480      	push	{r7}
 801321e:	b083      	sub	sp, #12
 8013220:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 8013222:	2300      	movs	r3, #0
 8013224:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 8013226:	4b14      	ldr	r3, [pc, #80]	; (8013278 <prvGetExpectedIdleTime+0x5c>)
 8013228:	681b      	ldr	r3, [r3, #0]
 801322a:	2b00      	cmp	r3, #0
 801322c:	d001      	beq.n	8013232 <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 801322e:	2301      	movs	r3, #1
 8013230:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 8013232:	4b12      	ldr	r3, [pc, #72]	; (801327c <prvGetExpectedIdleTime+0x60>)
 8013234:	681b      	ldr	r3, [r3, #0]
 8013236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013238:	2b00      	cmp	r3, #0
 801323a:	d002      	beq.n	8013242 <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 801323c:	2300      	movs	r3, #0
 801323e:	607b      	str	r3, [r7, #4]
 8013240:	e012      	b.n	8013268 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 8013242:	4b0f      	ldr	r3, [pc, #60]	; (8013280 <prvGetExpectedIdleTime+0x64>)
 8013244:	681b      	ldr	r3, [r3, #0]
 8013246:	2b01      	cmp	r3, #1
 8013248:	d902      	bls.n	8013250 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 801324a:	2300      	movs	r3, #0
 801324c:	607b      	str	r3, [r7, #4]
 801324e:	e00b      	b.n	8013268 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 8013250:	683b      	ldr	r3, [r7, #0]
 8013252:	2b00      	cmp	r3, #0
 8013254:	d002      	beq.n	801325c <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 8013256:	2300      	movs	r3, #0
 8013258:	607b      	str	r3, [r7, #4]
 801325a:	e005      	b.n	8013268 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 801325c:	4b09      	ldr	r3, [pc, #36]	; (8013284 <prvGetExpectedIdleTime+0x68>)
 801325e:	681a      	ldr	r2, [r3, #0]
 8013260:	4b09      	ldr	r3, [pc, #36]	; (8013288 <prvGetExpectedIdleTime+0x6c>)
 8013262:	681b      	ldr	r3, [r3, #0]
 8013264:	1ad3      	subs	r3, r2, r3
 8013266:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 8013268:	687b      	ldr	r3, [r7, #4]
	}
 801326a:	4618      	mov	r0, r3
 801326c:	370c      	adds	r7, #12
 801326e:	46bd      	mov	sp, r7
 8013270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013274:	4770      	bx	lr
 8013276:	bf00      	nop
 8013278:	20027458 	.word	0x20027458
 801327c:	20026f7c 	.word	0x20026f7c
 8013280:	20026f80 	.word	0x20026f80
 8013284:	20027470 	.word	0x20027470
 8013288:	20027454 	.word	0x20027454

0801328c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801328c:	b580      	push	{r7, lr}
 801328e:	b084      	sub	sp, #16
 8013290:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013292:	2300      	movs	r3, #0
 8013294:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013296:	2300      	movs	r3, #0
 8013298:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801329a:	4b41      	ldr	r3, [pc, #260]	; (80133a0 <xTaskResumeAll+0x114>)
 801329c:	681b      	ldr	r3, [r3, #0]
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d109      	bne.n	80132b6 <xTaskResumeAll+0x2a>
 80132a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132a6:	f383 8811 	msr	BASEPRI, r3
 80132aa:	f3bf 8f6f 	isb	sy
 80132ae:	f3bf 8f4f 	dsb	sy
 80132b2:	603b      	str	r3, [r7, #0]
 80132b4:	e7fe      	b.n	80132b4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80132b6:	f7fe fba9 	bl	8011a0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80132ba:	4b39      	ldr	r3, [pc, #228]	; (80133a0 <xTaskResumeAll+0x114>)
 80132bc:	681b      	ldr	r3, [r3, #0]
 80132be:	3b01      	subs	r3, #1
 80132c0:	4a37      	ldr	r2, [pc, #220]	; (80133a0 <xTaskResumeAll+0x114>)
 80132c2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80132c4:	4b36      	ldr	r3, [pc, #216]	; (80133a0 <xTaskResumeAll+0x114>)
 80132c6:	681b      	ldr	r3, [r3, #0]
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d162      	bne.n	8013392 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80132cc:	4b35      	ldr	r3, [pc, #212]	; (80133a4 <xTaskResumeAll+0x118>)
 80132ce:	681b      	ldr	r3, [r3, #0]
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	d05e      	beq.n	8013392 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80132d4:	e02f      	b.n	8013336 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80132d6:	4b34      	ldr	r3, [pc, #208]	; (80133a8 <xTaskResumeAll+0x11c>)
 80132d8:	68db      	ldr	r3, [r3, #12]
 80132da:	68db      	ldr	r3, [r3, #12]
 80132dc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	3318      	adds	r3, #24
 80132e2:	4618      	mov	r0, r3
 80132e4:	f7fe fa44 	bl	8011770 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80132e8:	68fb      	ldr	r3, [r7, #12]
 80132ea:	3304      	adds	r3, #4
 80132ec:	4618      	mov	r0, r3
 80132ee:	f7fe fa3f 	bl	8011770 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80132f2:	68fb      	ldr	r3, [r7, #12]
 80132f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80132f6:	4b2d      	ldr	r3, [pc, #180]	; (80133ac <xTaskResumeAll+0x120>)
 80132f8:	681b      	ldr	r3, [r3, #0]
 80132fa:	429a      	cmp	r2, r3
 80132fc:	d903      	bls.n	8013306 <xTaskResumeAll+0x7a>
 80132fe:	68fb      	ldr	r3, [r7, #12]
 8013300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013302:	4a2a      	ldr	r2, [pc, #168]	; (80133ac <xTaskResumeAll+0x120>)
 8013304:	6013      	str	r3, [r2, #0]
 8013306:	68fb      	ldr	r3, [r7, #12]
 8013308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801330a:	4613      	mov	r3, r2
 801330c:	009b      	lsls	r3, r3, #2
 801330e:	4413      	add	r3, r2
 8013310:	009b      	lsls	r3, r3, #2
 8013312:	4a27      	ldr	r2, [pc, #156]	; (80133b0 <xTaskResumeAll+0x124>)
 8013314:	441a      	add	r2, r3
 8013316:	68fb      	ldr	r3, [r7, #12]
 8013318:	3304      	adds	r3, #4
 801331a:	4619      	mov	r1, r3
 801331c:	4610      	mov	r0, r2
 801331e:	f7fe f9ca 	bl	80116b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013322:	68fb      	ldr	r3, [r7, #12]
 8013324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013326:	4b23      	ldr	r3, [pc, #140]	; (80133b4 <xTaskResumeAll+0x128>)
 8013328:	681b      	ldr	r3, [r3, #0]
 801332a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801332c:	429a      	cmp	r2, r3
 801332e:	d302      	bcc.n	8013336 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8013330:	4b21      	ldr	r3, [pc, #132]	; (80133b8 <xTaskResumeAll+0x12c>)
 8013332:	2201      	movs	r2, #1
 8013334:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013336:	4b1c      	ldr	r3, [pc, #112]	; (80133a8 <xTaskResumeAll+0x11c>)
 8013338:	681b      	ldr	r3, [r3, #0]
 801333a:	2b00      	cmp	r3, #0
 801333c:	d1cb      	bne.n	80132d6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801333e:	68fb      	ldr	r3, [r7, #12]
 8013340:	2b00      	cmp	r3, #0
 8013342:	d001      	beq.n	8013348 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013344:	f000 fba2 	bl	8013a8c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8013348:	4b1c      	ldr	r3, [pc, #112]	; (80133bc <xTaskResumeAll+0x130>)
 801334a:	681b      	ldr	r3, [r3, #0]
 801334c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	2b00      	cmp	r3, #0
 8013352:	d010      	beq.n	8013376 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013354:	f000 f846 	bl	80133e4 <xTaskIncrementTick>
 8013358:	4603      	mov	r3, r0
 801335a:	2b00      	cmp	r3, #0
 801335c:	d002      	beq.n	8013364 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 801335e:	4b16      	ldr	r3, [pc, #88]	; (80133b8 <xTaskResumeAll+0x12c>)
 8013360:	2201      	movs	r2, #1
 8013362:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	3b01      	subs	r3, #1
 8013368:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	2b00      	cmp	r3, #0
 801336e:	d1f1      	bne.n	8013354 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8013370:	4b12      	ldr	r3, [pc, #72]	; (80133bc <xTaskResumeAll+0x130>)
 8013372:	2200      	movs	r2, #0
 8013374:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013376:	4b10      	ldr	r3, [pc, #64]	; (80133b8 <xTaskResumeAll+0x12c>)
 8013378:	681b      	ldr	r3, [r3, #0]
 801337a:	2b00      	cmp	r3, #0
 801337c:	d009      	beq.n	8013392 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801337e:	2301      	movs	r3, #1
 8013380:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013382:	4b0f      	ldr	r3, [pc, #60]	; (80133c0 <xTaskResumeAll+0x134>)
 8013384:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013388:	601a      	str	r2, [r3, #0]
 801338a:	f3bf 8f4f 	dsb	sy
 801338e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013392:	f7fe fb69 	bl	8011a68 <vPortExitCritical>

	return xAlreadyYielded;
 8013396:	68bb      	ldr	r3, [r7, #8]
}
 8013398:	4618      	mov	r0, r3
 801339a:	3710      	adds	r7, #16
 801339c:	46bd      	mov	sp, r7
 801339e:	bd80      	pop	{r7, pc}
 80133a0:	20027478 	.word	0x20027478
 80133a4:	20027450 	.word	0x20027450
 80133a8:	20027410 	.word	0x20027410
 80133ac:	20027458 	.word	0x20027458
 80133b0:	20026f80 	.word	0x20026f80
 80133b4:	20026f7c 	.word	0x20026f7c
 80133b8:	20027464 	.word	0x20027464
 80133bc:	20027460 	.word	0x20027460
 80133c0:	e000ed04 	.word	0xe000ed04

080133c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80133c4:	b480      	push	{r7}
 80133c6:	b083      	sub	sp, #12
 80133c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80133ca:	4b05      	ldr	r3, [pc, #20]	; (80133e0 <xTaskGetTickCount+0x1c>)
 80133cc:	681b      	ldr	r3, [r3, #0]
 80133ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80133d0:	687b      	ldr	r3, [r7, #4]
}
 80133d2:	4618      	mov	r0, r3
 80133d4:	370c      	adds	r7, #12
 80133d6:	46bd      	mov	sp, r7
 80133d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133dc:	4770      	bx	lr
 80133de:	bf00      	nop
 80133e0:	20027454 	.word	0x20027454

080133e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80133e4:	b580      	push	{r7, lr}
 80133e6:	b086      	sub	sp, #24
 80133e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80133ea:	2300      	movs	r3, #0
 80133ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80133ee:	4b52      	ldr	r3, [pc, #328]	; (8013538 <xTaskIncrementTick+0x154>)
 80133f0:	681b      	ldr	r3, [r3, #0]
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	f040 808e 	bne.w	8013514 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80133f8:	4b50      	ldr	r3, [pc, #320]	; (801353c <xTaskIncrementTick+0x158>)
 80133fa:	681b      	ldr	r3, [r3, #0]
 80133fc:	3301      	adds	r3, #1
 80133fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013400:	4a4e      	ldr	r2, [pc, #312]	; (801353c <xTaskIncrementTick+0x158>)
 8013402:	693b      	ldr	r3, [r7, #16]
 8013404:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013406:	693b      	ldr	r3, [r7, #16]
 8013408:	2b00      	cmp	r3, #0
 801340a:	d11f      	bne.n	801344c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 801340c:	4b4c      	ldr	r3, [pc, #304]	; (8013540 <xTaskIncrementTick+0x15c>)
 801340e:	681b      	ldr	r3, [r3, #0]
 8013410:	681b      	ldr	r3, [r3, #0]
 8013412:	2b00      	cmp	r3, #0
 8013414:	d009      	beq.n	801342a <xTaskIncrementTick+0x46>
 8013416:	f04f 0350 	mov.w	r3, #80	; 0x50
 801341a:	f383 8811 	msr	BASEPRI, r3
 801341e:	f3bf 8f6f 	isb	sy
 8013422:	f3bf 8f4f 	dsb	sy
 8013426:	603b      	str	r3, [r7, #0]
 8013428:	e7fe      	b.n	8013428 <xTaskIncrementTick+0x44>
 801342a:	4b45      	ldr	r3, [pc, #276]	; (8013540 <xTaskIncrementTick+0x15c>)
 801342c:	681b      	ldr	r3, [r3, #0]
 801342e:	60fb      	str	r3, [r7, #12]
 8013430:	4b44      	ldr	r3, [pc, #272]	; (8013544 <xTaskIncrementTick+0x160>)
 8013432:	681b      	ldr	r3, [r3, #0]
 8013434:	4a42      	ldr	r2, [pc, #264]	; (8013540 <xTaskIncrementTick+0x15c>)
 8013436:	6013      	str	r3, [r2, #0]
 8013438:	4a42      	ldr	r2, [pc, #264]	; (8013544 <xTaskIncrementTick+0x160>)
 801343a:	68fb      	ldr	r3, [r7, #12]
 801343c:	6013      	str	r3, [r2, #0]
 801343e:	4b42      	ldr	r3, [pc, #264]	; (8013548 <xTaskIncrementTick+0x164>)
 8013440:	681b      	ldr	r3, [r3, #0]
 8013442:	3301      	adds	r3, #1
 8013444:	4a40      	ldr	r2, [pc, #256]	; (8013548 <xTaskIncrementTick+0x164>)
 8013446:	6013      	str	r3, [r2, #0]
 8013448:	f000 fb20 	bl	8013a8c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801344c:	4b3f      	ldr	r3, [pc, #252]	; (801354c <xTaskIncrementTick+0x168>)
 801344e:	681b      	ldr	r3, [r3, #0]
 8013450:	693a      	ldr	r2, [r7, #16]
 8013452:	429a      	cmp	r2, r3
 8013454:	d349      	bcc.n	80134ea <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013456:	4b3a      	ldr	r3, [pc, #232]	; (8013540 <xTaskIncrementTick+0x15c>)
 8013458:	681b      	ldr	r3, [r3, #0]
 801345a:	681b      	ldr	r3, [r3, #0]
 801345c:	2b00      	cmp	r3, #0
 801345e:	d104      	bne.n	801346a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013460:	4b3a      	ldr	r3, [pc, #232]	; (801354c <xTaskIncrementTick+0x168>)
 8013462:	f04f 32ff 	mov.w	r2, #4294967295
 8013466:	601a      	str	r2, [r3, #0]
					break;
 8013468:	e03f      	b.n	80134ea <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801346a:	4b35      	ldr	r3, [pc, #212]	; (8013540 <xTaskIncrementTick+0x15c>)
 801346c:	681b      	ldr	r3, [r3, #0]
 801346e:	68db      	ldr	r3, [r3, #12]
 8013470:	68db      	ldr	r3, [r3, #12]
 8013472:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8013474:	68bb      	ldr	r3, [r7, #8]
 8013476:	685b      	ldr	r3, [r3, #4]
 8013478:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801347a:	693a      	ldr	r2, [r7, #16]
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	429a      	cmp	r2, r3
 8013480:	d203      	bcs.n	801348a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013482:	4a32      	ldr	r2, [pc, #200]	; (801354c <xTaskIncrementTick+0x168>)
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8013488:	e02f      	b.n	80134ea <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801348a:	68bb      	ldr	r3, [r7, #8]
 801348c:	3304      	adds	r3, #4
 801348e:	4618      	mov	r0, r3
 8013490:	f7fe f96e 	bl	8011770 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013494:	68bb      	ldr	r3, [r7, #8]
 8013496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013498:	2b00      	cmp	r3, #0
 801349a:	d004      	beq.n	80134a6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801349c:	68bb      	ldr	r3, [r7, #8]
 801349e:	3318      	adds	r3, #24
 80134a0:	4618      	mov	r0, r3
 80134a2:	f7fe f965 	bl	8011770 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80134a6:	68bb      	ldr	r3, [r7, #8]
 80134a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134aa:	4b29      	ldr	r3, [pc, #164]	; (8013550 <xTaskIncrementTick+0x16c>)
 80134ac:	681b      	ldr	r3, [r3, #0]
 80134ae:	429a      	cmp	r2, r3
 80134b0:	d903      	bls.n	80134ba <xTaskIncrementTick+0xd6>
 80134b2:	68bb      	ldr	r3, [r7, #8]
 80134b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134b6:	4a26      	ldr	r2, [pc, #152]	; (8013550 <xTaskIncrementTick+0x16c>)
 80134b8:	6013      	str	r3, [r2, #0]
 80134ba:	68bb      	ldr	r3, [r7, #8]
 80134bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134be:	4613      	mov	r3, r2
 80134c0:	009b      	lsls	r3, r3, #2
 80134c2:	4413      	add	r3, r2
 80134c4:	009b      	lsls	r3, r3, #2
 80134c6:	4a23      	ldr	r2, [pc, #140]	; (8013554 <xTaskIncrementTick+0x170>)
 80134c8:	441a      	add	r2, r3
 80134ca:	68bb      	ldr	r3, [r7, #8]
 80134cc:	3304      	adds	r3, #4
 80134ce:	4619      	mov	r1, r3
 80134d0:	4610      	mov	r0, r2
 80134d2:	f7fe f8f0 	bl	80116b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80134d6:	68bb      	ldr	r3, [r7, #8]
 80134d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134da:	4b1f      	ldr	r3, [pc, #124]	; (8013558 <xTaskIncrementTick+0x174>)
 80134dc:	681b      	ldr	r3, [r3, #0]
 80134de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134e0:	429a      	cmp	r2, r3
 80134e2:	d3b8      	bcc.n	8013456 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80134e4:	2301      	movs	r3, #1
 80134e6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80134e8:	e7b5      	b.n	8013456 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80134ea:	4b1b      	ldr	r3, [pc, #108]	; (8013558 <xTaskIncrementTick+0x174>)
 80134ec:	681b      	ldr	r3, [r3, #0]
 80134ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134f0:	4918      	ldr	r1, [pc, #96]	; (8013554 <xTaskIncrementTick+0x170>)
 80134f2:	4613      	mov	r3, r2
 80134f4:	009b      	lsls	r3, r3, #2
 80134f6:	4413      	add	r3, r2
 80134f8:	009b      	lsls	r3, r3, #2
 80134fa:	440b      	add	r3, r1
 80134fc:	681b      	ldr	r3, [r3, #0]
 80134fe:	2b01      	cmp	r3, #1
 8013500:	d901      	bls.n	8013506 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8013502:	2301      	movs	r3, #1
 8013504:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 8013506:	4b15      	ldr	r3, [pc, #84]	; (801355c <xTaskIncrementTick+0x178>)
 8013508:	681b      	ldr	r3, [r3, #0]
 801350a:	2b00      	cmp	r3, #0
 801350c:	d109      	bne.n	8013522 <xTaskIncrementTick+0x13e>
			{
				vApplicationTickHook();
 801350e:	f7ed feb4 	bl	800127a <vApplicationTickHook>
 8013512:	e006      	b.n	8013522 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8013514:	4b11      	ldr	r3, [pc, #68]	; (801355c <xTaskIncrementTick+0x178>)
 8013516:	681b      	ldr	r3, [r3, #0]
 8013518:	3301      	adds	r3, #1
 801351a:	4a10      	ldr	r2, [pc, #64]	; (801355c <xTaskIncrementTick+0x178>)
 801351c:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 801351e:	f7ed feac 	bl	800127a <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8013522:	4b0f      	ldr	r3, [pc, #60]	; (8013560 <xTaskIncrementTick+0x17c>)
 8013524:	681b      	ldr	r3, [r3, #0]
 8013526:	2b00      	cmp	r3, #0
 8013528:	d001      	beq.n	801352e <xTaskIncrementTick+0x14a>
		{
			xSwitchRequired = pdTRUE;
 801352a:	2301      	movs	r3, #1
 801352c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 801352e:	697b      	ldr	r3, [r7, #20]
}
 8013530:	4618      	mov	r0, r3
 8013532:	3718      	adds	r7, #24
 8013534:	46bd      	mov	sp, r7
 8013536:	bd80      	pop	{r7, pc}
 8013538:	20027478 	.word	0x20027478
 801353c:	20027454 	.word	0x20027454
 8013540:	20027408 	.word	0x20027408
 8013544:	2002740c 	.word	0x2002740c
 8013548:	20027468 	.word	0x20027468
 801354c:	20027470 	.word	0x20027470
 8013550:	20027458 	.word	0x20027458
 8013554:	20026f80 	.word	0x20026f80
 8013558:	20026f7c 	.word	0x20026f7c
 801355c:	20027460 	.word	0x20027460
 8013560:	20027464 	.word	0x20027464

08013564 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013564:	b580      	push	{r7, lr}
 8013566:	b084      	sub	sp, #16
 8013568:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801356a:	4b3b      	ldr	r3, [pc, #236]	; (8013658 <vTaskSwitchContext+0xf4>)
 801356c:	681b      	ldr	r3, [r3, #0]
 801356e:	2b00      	cmp	r3, #0
 8013570:	d003      	beq.n	801357a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8013572:	4b3a      	ldr	r3, [pc, #232]	; (801365c <vTaskSwitchContext+0xf8>)
 8013574:	2201      	movs	r2, #1
 8013576:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013578:	e06a      	b.n	8013650 <vTaskSwitchContext+0xec>
		xYieldPending = pdFALSE;
 801357a:	4b38      	ldr	r3, [pc, #224]	; (801365c <vTaskSwitchContext+0xf8>)
 801357c:	2200      	movs	r2, #0
 801357e:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8013580:	f7ed fe74 	bl	800126c <getRunTimeCounterValue>
 8013584:	4602      	mov	r2, r0
 8013586:	4b36      	ldr	r3, [pc, #216]	; (8013660 <vTaskSwitchContext+0xfc>)
 8013588:	601a      	str	r2, [r3, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 801358a:	4b35      	ldr	r3, [pc, #212]	; (8013660 <vTaskSwitchContext+0xfc>)
 801358c:	681a      	ldr	r2, [r3, #0]
 801358e:	4b35      	ldr	r3, [pc, #212]	; (8013664 <vTaskSwitchContext+0x100>)
 8013590:	681b      	ldr	r3, [r3, #0]
 8013592:	429a      	cmp	r2, r3
 8013594:	d909      	bls.n	80135aa <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8013596:	4b34      	ldr	r3, [pc, #208]	; (8013668 <vTaskSwitchContext+0x104>)
 8013598:	681b      	ldr	r3, [r3, #0]
 801359a:	6d99      	ldr	r1, [r3, #88]	; 0x58
 801359c:	4a30      	ldr	r2, [pc, #192]	; (8013660 <vTaskSwitchContext+0xfc>)
 801359e:	6810      	ldr	r0, [r2, #0]
 80135a0:	4a30      	ldr	r2, [pc, #192]	; (8013664 <vTaskSwitchContext+0x100>)
 80135a2:	6812      	ldr	r2, [r2, #0]
 80135a4:	1a82      	subs	r2, r0, r2
 80135a6:	440a      	add	r2, r1
 80135a8:	659a      	str	r2, [r3, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 80135aa:	4b2d      	ldr	r3, [pc, #180]	; (8013660 <vTaskSwitchContext+0xfc>)
 80135ac:	681b      	ldr	r3, [r3, #0]
 80135ae:	4a2d      	ldr	r2, [pc, #180]	; (8013664 <vTaskSwitchContext+0x100>)
 80135b0:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80135b2:	4b2d      	ldr	r3, [pc, #180]	; (8013668 <vTaskSwitchContext+0x104>)
 80135b4:	681b      	ldr	r3, [r3, #0]
 80135b6:	681a      	ldr	r2, [r3, #0]
 80135b8:	4b2b      	ldr	r3, [pc, #172]	; (8013668 <vTaskSwitchContext+0x104>)
 80135ba:	681b      	ldr	r3, [r3, #0]
 80135bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80135be:	429a      	cmp	r2, r3
 80135c0:	d808      	bhi.n	80135d4 <vTaskSwitchContext+0x70>
 80135c2:	4b29      	ldr	r3, [pc, #164]	; (8013668 <vTaskSwitchContext+0x104>)
 80135c4:	681a      	ldr	r2, [r3, #0]
 80135c6:	4b28      	ldr	r3, [pc, #160]	; (8013668 <vTaskSwitchContext+0x104>)
 80135c8:	681b      	ldr	r3, [r3, #0]
 80135ca:	3334      	adds	r3, #52	; 0x34
 80135cc:	4619      	mov	r1, r3
 80135ce:	4610      	mov	r0, r2
 80135d0:	f7ed fe5a 	bl	8001288 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80135d4:	4b25      	ldr	r3, [pc, #148]	; (801366c <vTaskSwitchContext+0x108>)
 80135d6:	681b      	ldr	r3, [r3, #0]
 80135d8:	60fb      	str	r3, [r7, #12]
 80135da:	e00f      	b.n	80135fc <vTaskSwitchContext+0x98>
 80135dc:	68fb      	ldr	r3, [r7, #12]
 80135de:	2b00      	cmp	r3, #0
 80135e0:	d109      	bne.n	80135f6 <vTaskSwitchContext+0x92>
 80135e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135e6:	f383 8811 	msr	BASEPRI, r3
 80135ea:	f3bf 8f6f 	isb	sy
 80135ee:	f3bf 8f4f 	dsb	sy
 80135f2:	607b      	str	r3, [r7, #4]
 80135f4:	e7fe      	b.n	80135f4 <vTaskSwitchContext+0x90>
 80135f6:	68fb      	ldr	r3, [r7, #12]
 80135f8:	3b01      	subs	r3, #1
 80135fa:	60fb      	str	r3, [r7, #12]
 80135fc:	491c      	ldr	r1, [pc, #112]	; (8013670 <vTaskSwitchContext+0x10c>)
 80135fe:	68fa      	ldr	r2, [r7, #12]
 8013600:	4613      	mov	r3, r2
 8013602:	009b      	lsls	r3, r3, #2
 8013604:	4413      	add	r3, r2
 8013606:	009b      	lsls	r3, r3, #2
 8013608:	440b      	add	r3, r1
 801360a:	681b      	ldr	r3, [r3, #0]
 801360c:	2b00      	cmp	r3, #0
 801360e:	d0e5      	beq.n	80135dc <vTaskSwitchContext+0x78>
 8013610:	68fa      	ldr	r2, [r7, #12]
 8013612:	4613      	mov	r3, r2
 8013614:	009b      	lsls	r3, r3, #2
 8013616:	4413      	add	r3, r2
 8013618:	009b      	lsls	r3, r3, #2
 801361a:	4a15      	ldr	r2, [pc, #84]	; (8013670 <vTaskSwitchContext+0x10c>)
 801361c:	4413      	add	r3, r2
 801361e:	60bb      	str	r3, [r7, #8]
 8013620:	68bb      	ldr	r3, [r7, #8]
 8013622:	685b      	ldr	r3, [r3, #4]
 8013624:	685a      	ldr	r2, [r3, #4]
 8013626:	68bb      	ldr	r3, [r7, #8]
 8013628:	605a      	str	r2, [r3, #4]
 801362a:	68bb      	ldr	r3, [r7, #8]
 801362c:	685a      	ldr	r2, [r3, #4]
 801362e:	68bb      	ldr	r3, [r7, #8]
 8013630:	3308      	adds	r3, #8
 8013632:	429a      	cmp	r2, r3
 8013634:	d104      	bne.n	8013640 <vTaskSwitchContext+0xdc>
 8013636:	68bb      	ldr	r3, [r7, #8]
 8013638:	685b      	ldr	r3, [r3, #4]
 801363a:	685a      	ldr	r2, [r3, #4]
 801363c:	68bb      	ldr	r3, [r7, #8]
 801363e:	605a      	str	r2, [r3, #4]
 8013640:	68bb      	ldr	r3, [r7, #8]
 8013642:	685b      	ldr	r3, [r3, #4]
 8013644:	68db      	ldr	r3, [r3, #12]
 8013646:	4a08      	ldr	r2, [pc, #32]	; (8013668 <vTaskSwitchContext+0x104>)
 8013648:	6013      	str	r3, [r2, #0]
 801364a:	4a08      	ldr	r2, [pc, #32]	; (801366c <vTaskSwitchContext+0x108>)
 801364c:	68fb      	ldr	r3, [r7, #12]
 801364e:	6013      	str	r3, [r2, #0]
}
 8013650:	bf00      	nop
 8013652:	3710      	adds	r7, #16
 8013654:	46bd      	mov	sp, r7
 8013656:	bd80      	pop	{r7, pc}
 8013658:	20027478 	.word	0x20027478
 801365c:	20027464 	.word	0x20027464
 8013660:	20027480 	.word	0x20027480
 8013664:	2002747c 	.word	0x2002747c
 8013668:	20026f7c 	.word	0x20026f7c
 801366c:	20027458 	.word	0x20027458
 8013670:	20026f80 	.word	0x20026f80

08013674 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8013674:	b580      	push	{r7, lr}
 8013676:	b084      	sub	sp, #16
 8013678:	af00      	add	r7, sp, #0
 801367a:	6078      	str	r0, [r7, #4]
 801367c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	2b00      	cmp	r3, #0
 8013682:	d109      	bne.n	8013698 <vTaskPlaceOnEventList+0x24>
 8013684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013688:	f383 8811 	msr	BASEPRI, r3
 801368c:	f3bf 8f6f 	isb	sy
 8013690:	f3bf 8f4f 	dsb	sy
 8013694:	60fb      	str	r3, [r7, #12]
 8013696:	e7fe      	b.n	8013696 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013698:	4b07      	ldr	r3, [pc, #28]	; (80136b8 <vTaskPlaceOnEventList+0x44>)
 801369a:	681b      	ldr	r3, [r3, #0]
 801369c:	3318      	adds	r3, #24
 801369e:	4619      	mov	r1, r3
 80136a0:	6878      	ldr	r0, [r7, #4]
 80136a2:	f7fe f82c 	bl	80116fe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80136a6:	2101      	movs	r1, #1
 80136a8:	6838      	ldr	r0, [r7, #0]
 80136aa:	f000 fd8d 	bl	80141c8 <prvAddCurrentTaskToDelayedList>
}
 80136ae:	bf00      	nop
 80136b0:	3710      	adds	r7, #16
 80136b2:	46bd      	mov	sp, r7
 80136b4:	bd80      	pop	{r7, pc}
 80136b6:	bf00      	nop
 80136b8:	20026f7c 	.word	0x20026f7c

080136bc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80136bc:	b580      	push	{r7, lr}
 80136be:	b086      	sub	sp, #24
 80136c0:	af00      	add	r7, sp, #0
 80136c2:	60f8      	str	r0, [r7, #12]
 80136c4:	60b9      	str	r1, [r7, #8]
 80136c6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80136c8:	68fb      	ldr	r3, [r7, #12]
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	d109      	bne.n	80136e2 <vTaskPlaceOnEventListRestricted+0x26>
 80136ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136d2:	f383 8811 	msr	BASEPRI, r3
 80136d6:	f3bf 8f6f 	isb	sy
 80136da:	f3bf 8f4f 	dsb	sy
 80136de:	617b      	str	r3, [r7, #20]
 80136e0:	e7fe      	b.n	80136e0 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80136e2:	4b0a      	ldr	r3, [pc, #40]	; (801370c <vTaskPlaceOnEventListRestricted+0x50>)
 80136e4:	681b      	ldr	r3, [r3, #0]
 80136e6:	3318      	adds	r3, #24
 80136e8:	4619      	mov	r1, r3
 80136ea:	68f8      	ldr	r0, [r7, #12]
 80136ec:	f7fd ffe3 	bl	80116b6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	d002      	beq.n	80136fc <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80136f6:	f04f 33ff 	mov.w	r3, #4294967295
 80136fa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80136fc:	6879      	ldr	r1, [r7, #4]
 80136fe:	68b8      	ldr	r0, [r7, #8]
 8013700:	f000 fd62 	bl	80141c8 <prvAddCurrentTaskToDelayedList>
	}
 8013704:	bf00      	nop
 8013706:	3718      	adds	r7, #24
 8013708:	46bd      	mov	sp, r7
 801370a:	bd80      	pop	{r7, pc}
 801370c:	20026f7c 	.word	0x20026f7c

08013710 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8013710:	b580      	push	{r7, lr}
 8013712:	b086      	sub	sp, #24
 8013714:	af00      	add	r7, sp, #0
 8013716:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	68db      	ldr	r3, [r3, #12]
 801371c:	68db      	ldr	r3, [r3, #12]
 801371e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8013720:	693b      	ldr	r3, [r7, #16]
 8013722:	2b00      	cmp	r3, #0
 8013724:	d109      	bne.n	801373a <xTaskRemoveFromEventList+0x2a>
 8013726:	f04f 0350 	mov.w	r3, #80	; 0x50
 801372a:	f383 8811 	msr	BASEPRI, r3
 801372e:	f3bf 8f6f 	isb	sy
 8013732:	f3bf 8f4f 	dsb	sy
 8013736:	60fb      	str	r3, [r7, #12]
 8013738:	e7fe      	b.n	8013738 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801373a:	693b      	ldr	r3, [r7, #16]
 801373c:	3318      	adds	r3, #24
 801373e:	4618      	mov	r0, r3
 8013740:	f7fe f816 	bl	8011770 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013744:	4b1e      	ldr	r3, [pc, #120]	; (80137c0 <xTaskRemoveFromEventList+0xb0>)
 8013746:	681b      	ldr	r3, [r3, #0]
 8013748:	2b00      	cmp	r3, #0
 801374a:	d11f      	bne.n	801378c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801374c:	693b      	ldr	r3, [r7, #16]
 801374e:	3304      	adds	r3, #4
 8013750:	4618      	mov	r0, r3
 8013752:	f7fe f80d 	bl	8011770 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8013756:	693b      	ldr	r3, [r7, #16]
 8013758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801375a:	4b1a      	ldr	r3, [pc, #104]	; (80137c4 <xTaskRemoveFromEventList+0xb4>)
 801375c:	681b      	ldr	r3, [r3, #0]
 801375e:	429a      	cmp	r2, r3
 8013760:	d903      	bls.n	801376a <xTaskRemoveFromEventList+0x5a>
 8013762:	693b      	ldr	r3, [r7, #16]
 8013764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013766:	4a17      	ldr	r2, [pc, #92]	; (80137c4 <xTaskRemoveFromEventList+0xb4>)
 8013768:	6013      	str	r3, [r2, #0]
 801376a:	693b      	ldr	r3, [r7, #16]
 801376c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801376e:	4613      	mov	r3, r2
 8013770:	009b      	lsls	r3, r3, #2
 8013772:	4413      	add	r3, r2
 8013774:	009b      	lsls	r3, r3, #2
 8013776:	4a14      	ldr	r2, [pc, #80]	; (80137c8 <xTaskRemoveFromEventList+0xb8>)
 8013778:	441a      	add	r2, r3
 801377a:	693b      	ldr	r3, [r7, #16]
 801377c:	3304      	adds	r3, #4
 801377e:	4619      	mov	r1, r3
 8013780:	4610      	mov	r0, r2
 8013782:	f7fd ff98 	bl	80116b6 <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 8013786:	f000 f981 	bl	8013a8c <prvResetNextTaskUnblockTime>
 801378a:	e005      	b.n	8013798 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801378c:	693b      	ldr	r3, [r7, #16]
 801378e:	3318      	adds	r3, #24
 8013790:	4619      	mov	r1, r3
 8013792:	480e      	ldr	r0, [pc, #56]	; (80137cc <xTaskRemoveFromEventList+0xbc>)
 8013794:	f7fd ff8f 	bl	80116b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013798:	693b      	ldr	r3, [r7, #16]
 801379a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801379c:	4b0c      	ldr	r3, [pc, #48]	; (80137d0 <xTaskRemoveFromEventList+0xc0>)
 801379e:	681b      	ldr	r3, [r3, #0]
 80137a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80137a2:	429a      	cmp	r2, r3
 80137a4:	d905      	bls.n	80137b2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80137a6:	2301      	movs	r3, #1
 80137a8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80137aa:	4b0a      	ldr	r3, [pc, #40]	; (80137d4 <xTaskRemoveFromEventList+0xc4>)
 80137ac:	2201      	movs	r2, #1
 80137ae:	601a      	str	r2, [r3, #0]
 80137b0:	e001      	b.n	80137b6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80137b2:	2300      	movs	r3, #0
 80137b4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80137b6:	697b      	ldr	r3, [r7, #20]
}
 80137b8:	4618      	mov	r0, r3
 80137ba:	3718      	adds	r7, #24
 80137bc:	46bd      	mov	sp, r7
 80137be:	bd80      	pop	{r7, pc}
 80137c0:	20027478 	.word	0x20027478
 80137c4:	20027458 	.word	0x20027458
 80137c8:	20026f80 	.word	0x20026f80
 80137cc:	20027410 	.word	0x20027410
 80137d0:	20026f7c 	.word	0x20026f7c
 80137d4:	20027464 	.word	0x20027464

080137d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80137d8:	b480      	push	{r7}
 80137da:	b083      	sub	sp, #12
 80137dc:	af00      	add	r7, sp, #0
 80137de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80137e0:	4b06      	ldr	r3, [pc, #24]	; (80137fc <vTaskInternalSetTimeOutState+0x24>)
 80137e2:	681a      	ldr	r2, [r3, #0]
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80137e8:	4b05      	ldr	r3, [pc, #20]	; (8013800 <vTaskInternalSetTimeOutState+0x28>)
 80137ea:	681a      	ldr	r2, [r3, #0]
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	605a      	str	r2, [r3, #4]
}
 80137f0:	bf00      	nop
 80137f2:	370c      	adds	r7, #12
 80137f4:	46bd      	mov	sp, r7
 80137f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137fa:	4770      	bx	lr
 80137fc:	20027468 	.word	0x20027468
 8013800:	20027454 	.word	0x20027454

08013804 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8013804:	b580      	push	{r7, lr}
 8013806:	b088      	sub	sp, #32
 8013808:	af00      	add	r7, sp, #0
 801380a:	6078      	str	r0, [r7, #4]
 801380c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	2b00      	cmp	r3, #0
 8013812:	d109      	bne.n	8013828 <xTaskCheckForTimeOut+0x24>
 8013814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013818:	f383 8811 	msr	BASEPRI, r3
 801381c:	f3bf 8f6f 	isb	sy
 8013820:	f3bf 8f4f 	dsb	sy
 8013824:	613b      	str	r3, [r7, #16]
 8013826:	e7fe      	b.n	8013826 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8013828:	683b      	ldr	r3, [r7, #0]
 801382a:	2b00      	cmp	r3, #0
 801382c:	d109      	bne.n	8013842 <xTaskCheckForTimeOut+0x3e>
 801382e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013832:	f383 8811 	msr	BASEPRI, r3
 8013836:	f3bf 8f6f 	isb	sy
 801383a:	f3bf 8f4f 	dsb	sy
 801383e:	60fb      	str	r3, [r7, #12]
 8013840:	e7fe      	b.n	8013840 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8013842:	f7fe f8e3 	bl	8011a0c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8013846:	4b1d      	ldr	r3, [pc, #116]	; (80138bc <xTaskCheckForTimeOut+0xb8>)
 8013848:	681b      	ldr	r3, [r3, #0]
 801384a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	685b      	ldr	r3, [r3, #4]
 8013850:	69ba      	ldr	r2, [r7, #24]
 8013852:	1ad3      	subs	r3, r2, r3
 8013854:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8013856:	683b      	ldr	r3, [r7, #0]
 8013858:	681b      	ldr	r3, [r3, #0]
 801385a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801385e:	d102      	bne.n	8013866 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8013860:	2300      	movs	r3, #0
 8013862:	61fb      	str	r3, [r7, #28]
 8013864:	e023      	b.n	80138ae <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	681a      	ldr	r2, [r3, #0]
 801386a:	4b15      	ldr	r3, [pc, #84]	; (80138c0 <xTaskCheckForTimeOut+0xbc>)
 801386c:	681b      	ldr	r3, [r3, #0]
 801386e:	429a      	cmp	r2, r3
 8013870:	d007      	beq.n	8013882 <xTaskCheckForTimeOut+0x7e>
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	685b      	ldr	r3, [r3, #4]
 8013876:	69ba      	ldr	r2, [r7, #24]
 8013878:	429a      	cmp	r2, r3
 801387a:	d302      	bcc.n	8013882 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801387c:	2301      	movs	r3, #1
 801387e:	61fb      	str	r3, [r7, #28]
 8013880:	e015      	b.n	80138ae <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8013882:	683b      	ldr	r3, [r7, #0]
 8013884:	681b      	ldr	r3, [r3, #0]
 8013886:	697a      	ldr	r2, [r7, #20]
 8013888:	429a      	cmp	r2, r3
 801388a:	d20b      	bcs.n	80138a4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801388c:	683b      	ldr	r3, [r7, #0]
 801388e:	681a      	ldr	r2, [r3, #0]
 8013890:	697b      	ldr	r3, [r7, #20]
 8013892:	1ad2      	subs	r2, r2, r3
 8013894:	683b      	ldr	r3, [r7, #0]
 8013896:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8013898:	6878      	ldr	r0, [r7, #4]
 801389a:	f7ff ff9d 	bl	80137d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801389e:	2300      	movs	r3, #0
 80138a0:	61fb      	str	r3, [r7, #28]
 80138a2:	e004      	b.n	80138ae <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80138a4:	683b      	ldr	r3, [r7, #0]
 80138a6:	2200      	movs	r2, #0
 80138a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80138aa:	2301      	movs	r3, #1
 80138ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80138ae:	f7fe f8db 	bl	8011a68 <vPortExitCritical>

	return xReturn;
 80138b2:	69fb      	ldr	r3, [r7, #28]
}
 80138b4:	4618      	mov	r0, r3
 80138b6:	3720      	adds	r7, #32
 80138b8:	46bd      	mov	sp, r7
 80138ba:	bd80      	pop	{r7, pc}
 80138bc:	20027454 	.word	0x20027454
 80138c0:	20027468 	.word	0x20027468

080138c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80138c4:	b480      	push	{r7}
 80138c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80138c8:	4b03      	ldr	r3, [pc, #12]	; (80138d8 <vTaskMissedYield+0x14>)
 80138ca:	2201      	movs	r2, #1
 80138cc:	601a      	str	r2, [r3, #0]
}
 80138ce:	bf00      	nop
 80138d0:	46bd      	mov	sp, r7
 80138d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138d6:	4770      	bx	lr
 80138d8:	20027464 	.word	0x20027464

080138dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80138dc:	b580      	push	{r7, lr}
 80138de:	b084      	sub	sp, #16
 80138e0:	af00      	add	r7, sp, #0
 80138e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80138e4:	f000 f878 	bl	80139d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80138e8:	4b17      	ldr	r3, [pc, #92]	; (8013948 <prvIdleTask+0x6c>)
 80138ea:	681b      	ldr	r3, [r3, #0]
 80138ec:	2b01      	cmp	r3, #1
 80138ee:	d907      	bls.n	8013900 <prvIdleTask+0x24>
			{
				taskYIELD();
 80138f0:	4b16      	ldr	r3, [pc, #88]	; (801394c <prvIdleTask+0x70>)
 80138f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80138f6:	601a      	str	r2, [r3, #0]
 80138f8:	f3bf 8f4f 	dsb	sy
 80138fc:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 8013900:	f7ff fc8c 	bl	801321c <prvGetExpectedIdleTime>
 8013904:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8013906:	68fb      	ldr	r3, [r7, #12]
 8013908:	2b01      	cmp	r3, #1
 801390a:	d9eb      	bls.n	80138e4 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 801390c:	f7ff fc78 	bl	8013200 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 8013910:	4b0f      	ldr	r3, [pc, #60]	; (8013950 <prvIdleTask+0x74>)
 8013912:	681a      	ldr	r2, [r3, #0]
 8013914:	4b0f      	ldr	r3, [pc, #60]	; (8013954 <prvIdleTask+0x78>)
 8013916:	681b      	ldr	r3, [r3, #0]
 8013918:	429a      	cmp	r2, r3
 801391a:	d209      	bcs.n	8013930 <prvIdleTask+0x54>
 801391c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013920:	f383 8811 	msr	BASEPRI, r3
 8013924:	f3bf 8f6f 	isb	sy
 8013928:	f3bf 8f4f 	dsb	sy
 801392c:	60bb      	str	r3, [r7, #8]
 801392e:	e7fe      	b.n	801392e <prvIdleTask+0x52>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 8013930:	f7ff fc74 	bl	801321c <prvGetExpectedIdleTime>
 8013934:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8013936:	68fb      	ldr	r3, [r7, #12]
 8013938:	2b01      	cmp	r3, #1
 801393a:	d902      	bls.n	8013942 <prvIdleTask+0x66>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 801393c:	68f8      	ldr	r0, [r7, #12]
 801393e:	f7ee fdd3 	bl	80024e8 <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 8013942:	f7ff fca3 	bl	801328c <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 8013946:	e7cd      	b.n	80138e4 <prvIdleTask+0x8>
 8013948:	20026f80 	.word	0x20026f80
 801394c:	e000ed04 	.word	0xe000ed04
 8013950:	20027470 	.word	0x20027470
 8013954:	20027454 	.word	0x20027454

08013958 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8013958:	b580      	push	{r7, lr}
 801395a:	b082      	sub	sp, #8
 801395c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801395e:	2300      	movs	r3, #0
 8013960:	607b      	str	r3, [r7, #4]
 8013962:	e00c      	b.n	801397e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8013964:	687a      	ldr	r2, [r7, #4]
 8013966:	4613      	mov	r3, r2
 8013968:	009b      	lsls	r3, r3, #2
 801396a:	4413      	add	r3, r2
 801396c:	009b      	lsls	r3, r3, #2
 801396e:	4a12      	ldr	r2, [pc, #72]	; (80139b8 <prvInitialiseTaskLists+0x60>)
 8013970:	4413      	add	r3, r2
 8013972:	4618      	mov	r0, r3
 8013974:	f7fd fe72 	bl	801165c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	3301      	adds	r3, #1
 801397c:	607b      	str	r3, [r7, #4]
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	2b37      	cmp	r3, #55	; 0x37
 8013982:	d9ef      	bls.n	8013964 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8013984:	480d      	ldr	r0, [pc, #52]	; (80139bc <prvInitialiseTaskLists+0x64>)
 8013986:	f7fd fe69 	bl	801165c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801398a:	480d      	ldr	r0, [pc, #52]	; (80139c0 <prvInitialiseTaskLists+0x68>)
 801398c:	f7fd fe66 	bl	801165c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013990:	480c      	ldr	r0, [pc, #48]	; (80139c4 <prvInitialiseTaskLists+0x6c>)
 8013992:	f7fd fe63 	bl	801165c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8013996:	480c      	ldr	r0, [pc, #48]	; (80139c8 <prvInitialiseTaskLists+0x70>)
 8013998:	f7fd fe60 	bl	801165c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801399c:	480b      	ldr	r0, [pc, #44]	; (80139cc <prvInitialiseTaskLists+0x74>)
 801399e:	f7fd fe5d 	bl	801165c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80139a2:	4b0b      	ldr	r3, [pc, #44]	; (80139d0 <prvInitialiseTaskLists+0x78>)
 80139a4:	4a05      	ldr	r2, [pc, #20]	; (80139bc <prvInitialiseTaskLists+0x64>)
 80139a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80139a8:	4b0a      	ldr	r3, [pc, #40]	; (80139d4 <prvInitialiseTaskLists+0x7c>)
 80139aa:	4a05      	ldr	r2, [pc, #20]	; (80139c0 <prvInitialiseTaskLists+0x68>)
 80139ac:	601a      	str	r2, [r3, #0]
}
 80139ae:	bf00      	nop
 80139b0:	3708      	adds	r7, #8
 80139b2:	46bd      	mov	sp, r7
 80139b4:	bd80      	pop	{r7, pc}
 80139b6:	bf00      	nop
 80139b8:	20026f80 	.word	0x20026f80
 80139bc:	200273e0 	.word	0x200273e0
 80139c0:	200273f4 	.word	0x200273f4
 80139c4:	20027410 	.word	0x20027410
 80139c8:	20027424 	.word	0x20027424
 80139cc:	2002743c 	.word	0x2002743c
 80139d0:	20027408 	.word	0x20027408
 80139d4:	2002740c 	.word	0x2002740c

080139d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80139d8:	b580      	push	{r7, lr}
 80139da:	b082      	sub	sp, #8
 80139dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80139de:	e019      	b.n	8013a14 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80139e0:	f7fe f814 	bl	8011a0c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80139e4:	4b0f      	ldr	r3, [pc, #60]	; (8013a24 <prvCheckTasksWaitingTermination+0x4c>)
 80139e6:	68db      	ldr	r3, [r3, #12]
 80139e8:	68db      	ldr	r3, [r3, #12]
 80139ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	3304      	adds	r3, #4
 80139f0:	4618      	mov	r0, r3
 80139f2:	f7fd febd 	bl	8011770 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80139f6:	4b0c      	ldr	r3, [pc, #48]	; (8013a28 <prvCheckTasksWaitingTermination+0x50>)
 80139f8:	681b      	ldr	r3, [r3, #0]
 80139fa:	3b01      	subs	r3, #1
 80139fc:	4a0a      	ldr	r2, [pc, #40]	; (8013a28 <prvCheckTasksWaitingTermination+0x50>)
 80139fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8013a00:	4b0a      	ldr	r3, [pc, #40]	; (8013a2c <prvCheckTasksWaitingTermination+0x54>)
 8013a02:	681b      	ldr	r3, [r3, #0]
 8013a04:	3b01      	subs	r3, #1
 8013a06:	4a09      	ldr	r2, [pc, #36]	; (8013a2c <prvCheckTasksWaitingTermination+0x54>)
 8013a08:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8013a0a:	f7fe f82d 	bl	8011a68 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8013a0e:	6878      	ldr	r0, [r7, #4]
 8013a10:	f000 f80e 	bl	8013a30 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013a14:	4b05      	ldr	r3, [pc, #20]	; (8013a2c <prvCheckTasksWaitingTermination+0x54>)
 8013a16:	681b      	ldr	r3, [r3, #0]
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	d1e1      	bne.n	80139e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8013a1c:	bf00      	nop
 8013a1e:	3708      	adds	r7, #8
 8013a20:	46bd      	mov	sp, r7
 8013a22:	bd80      	pop	{r7, pc}
 8013a24:	20027424 	.word	0x20027424
 8013a28:	20027450 	.word	0x20027450
 8013a2c:	20027438 	.word	0x20027438

08013a30 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8013a30:	b580      	push	{r7, lr}
 8013a32:	b084      	sub	sp, #16
 8013a34:	af00      	add	r7, sp, #0
 8013a36:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	d108      	bne.n	8013a54 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8013a42:	687b      	ldr	r3, [r7, #4]
 8013a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013a46:	4618      	mov	r0, r3
 8013a48:	f7fd fcf2 	bl	8011430 <vPortFree>
				vPortFree( pxTCB );
 8013a4c:	6878      	ldr	r0, [r7, #4]
 8013a4e:	f7fd fcef 	bl	8011430 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8013a52:	e017      	b.n	8013a84 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8013a5a:	2b01      	cmp	r3, #1
 8013a5c:	d103      	bne.n	8013a66 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8013a5e:	6878      	ldr	r0, [r7, #4]
 8013a60:	f7fd fce6 	bl	8011430 <vPortFree>
	}
 8013a64:	e00e      	b.n	8013a84 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8013a6c:	2b02      	cmp	r3, #2
 8013a6e:	d009      	beq.n	8013a84 <prvDeleteTCB+0x54>
 8013a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a74:	f383 8811 	msr	BASEPRI, r3
 8013a78:	f3bf 8f6f 	isb	sy
 8013a7c:	f3bf 8f4f 	dsb	sy
 8013a80:	60fb      	str	r3, [r7, #12]
 8013a82:	e7fe      	b.n	8013a82 <prvDeleteTCB+0x52>
	}
 8013a84:	bf00      	nop
 8013a86:	3710      	adds	r7, #16
 8013a88:	46bd      	mov	sp, r7
 8013a8a:	bd80      	pop	{r7, pc}

08013a8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8013a8c:	b480      	push	{r7}
 8013a8e:	b083      	sub	sp, #12
 8013a90:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013a92:	4b0c      	ldr	r3, [pc, #48]	; (8013ac4 <prvResetNextTaskUnblockTime+0x38>)
 8013a94:	681b      	ldr	r3, [r3, #0]
 8013a96:	681b      	ldr	r3, [r3, #0]
 8013a98:	2b00      	cmp	r3, #0
 8013a9a:	d104      	bne.n	8013aa6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8013a9c:	4b0a      	ldr	r3, [pc, #40]	; (8013ac8 <prvResetNextTaskUnblockTime+0x3c>)
 8013a9e:	f04f 32ff 	mov.w	r2, #4294967295
 8013aa2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8013aa4:	e008      	b.n	8013ab8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013aa6:	4b07      	ldr	r3, [pc, #28]	; (8013ac4 <prvResetNextTaskUnblockTime+0x38>)
 8013aa8:	681b      	ldr	r3, [r3, #0]
 8013aaa:	68db      	ldr	r3, [r3, #12]
 8013aac:	68db      	ldr	r3, [r3, #12]
 8013aae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	685b      	ldr	r3, [r3, #4]
 8013ab4:	4a04      	ldr	r2, [pc, #16]	; (8013ac8 <prvResetNextTaskUnblockTime+0x3c>)
 8013ab6:	6013      	str	r3, [r2, #0]
}
 8013ab8:	bf00      	nop
 8013aba:	370c      	adds	r7, #12
 8013abc:	46bd      	mov	sp, r7
 8013abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ac2:	4770      	bx	lr
 8013ac4:	20027408 	.word	0x20027408
 8013ac8:	20027470 	.word	0x20027470

08013acc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8013acc:	b480      	push	{r7}
 8013ace:	b083      	sub	sp, #12
 8013ad0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8013ad2:	4b05      	ldr	r3, [pc, #20]	; (8013ae8 <xTaskGetCurrentTaskHandle+0x1c>)
 8013ad4:	681b      	ldr	r3, [r3, #0]
 8013ad6:	607b      	str	r3, [r7, #4]

		return xReturn;
 8013ad8:	687b      	ldr	r3, [r7, #4]
	}
 8013ada:	4618      	mov	r0, r3
 8013adc:	370c      	adds	r7, #12
 8013ade:	46bd      	mov	sp, r7
 8013ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ae4:	4770      	bx	lr
 8013ae6:	bf00      	nop
 8013ae8:	20026f7c 	.word	0x20026f7c

08013aec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8013aec:	b480      	push	{r7}
 8013aee:	b083      	sub	sp, #12
 8013af0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8013af2:	4b0b      	ldr	r3, [pc, #44]	; (8013b20 <xTaskGetSchedulerState+0x34>)
 8013af4:	681b      	ldr	r3, [r3, #0]
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	d102      	bne.n	8013b00 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8013afa:	2301      	movs	r3, #1
 8013afc:	607b      	str	r3, [r7, #4]
 8013afe:	e008      	b.n	8013b12 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013b00:	4b08      	ldr	r3, [pc, #32]	; (8013b24 <xTaskGetSchedulerState+0x38>)
 8013b02:	681b      	ldr	r3, [r3, #0]
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	d102      	bne.n	8013b0e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8013b08:	2302      	movs	r3, #2
 8013b0a:	607b      	str	r3, [r7, #4]
 8013b0c:	e001      	b.n	8013b12 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8013b0e:	2300      	movs	r3, #0
 8013b10:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8013b12:	687b      	ldr	r3, [r7, #4]
	}
 8013b14:	4618      	mov	r0, r3
 8013b16:	370c      	adds	r7, #12
 8013b18:	46bd      	mov	sp, r7
 8013b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b1e:	4770      	bx	lr
 8013b20:	2002745c 	.word	0x2002745c
 8013b24:	20027478 	.word	0x20027478

08013b28 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8013b28:	b580      	push	{r7, lr}
 8013b2a:	b084      	sub	sp, #16
 8013b2c:	af00      	add	r7, sp, #0
 8013b2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8013b34:	2300      	movs	r3, #0
 8013b36:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	d051      	beq.n	8013be2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8013b3e:	68bb      	ldr	r3, [r7, #8]
 8013b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b42:	4b2a      	ldr	r3, [pc, #168]	; (8013bec <xTaskPriorityInherit+0xc4>)
 8013b44:	681b      	ldr	r3, [r3, #0]
 8013b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b48:	429a      	cmp	r2, r3
 8013b4a:	d241      	bcs.n	8013bd0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013b4c:	68bb      	ldr	r3, [r7, #8]
 8013b4e:	699b      	ldr	r3, [r3, #24]
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	db06      	blt.n	8013b62 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013b54:	4b25      	ldr	r3, [pc, #148]	; (8013bec <xTaskPriorityInherit+0xc4>)
 8013b56:	681b      	ldr	r3, [r3, #0]
 8013b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b5a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013b5e:	68bb      	ldr	r3, [r7, #8]
 8013b60:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8013b62:	68bb      	ldr	r3, [r7, #8]
 8013b64:	6959      	ldr	r1, [r3, #20]
 8013b66:	68bb      	ldr	r3, [r7, #8]
 8013b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b6a:	4613      	mov	r3, r2
 8013b6c:	009b      	lsls	r3, r3, #2
 8013b6e:	4413      	add	r3, r2
 8013b70:	009b      	lsls	r3, r3, #2
 8013b72:	4a1f      	ldr	r2, [pc, #124]	; (8013bf0 <xTaskPriorityInherit+0xc8>)
 8013b74:	4413      	add	r3, r2
 8013b76:	4299      	cmp	r1, r3
 8013b78:	d122      	bne.n	8013bc0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013b7a:	68bb      	ldr	r3, [r7, #8]
 8013b7c:	3304      	adds	r3, #4
 8013b7e:	4618      	mov	r0, r3
 8013b80:	f7fd fdf6 	bl	8011770 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013b84:	4b19      	ldr	r3, [pc, #100]	; (8013bec <xTaskPriorityInherit+0xc4>)
 8013b86:	681b      	ldr	r3, [r3, #0]
 8013b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b8a:	68bb      	ldr	r3, [r7, #8]
 8013b8c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8013b8e:	68bb      	ldr	r3, [r7, #8]
 8013b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b92:	4b18      	ldr	r3, [pc, #96]	; (8013bf4 <xTaskPriorityInherit+0xcc>)
 8013b94:	681b      	ldr	r3, [r3, #0]
 8013b96:	429a      	cmp	r2, r3
 8013b98:	d903      	bls.n	8013ba2 <xTaskPriorityInherit+0x7a>
 8013b9a:	68bb      	ldr	r3, [r7, #8]
 8013b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b9e:	4a15      	ldr	r2, [pc, #84]	; (8013bf4 <xTaskPriorityInherit+0xcc>)
 8013ba0:	6013      	str	r3, [r2, #0]
 8013ba2:	68bb      	ldr	r3, [r7, #8]
 8013ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ba6:	4613      	mov	r3, r2
 8013ba8:	009b      	lsls	r3, r3, #2
 8013baa:	4413      	add	r3, r2
 8013bac:	009b      	lsls	r3, r3, #2
 8013bae:	4a10      	ldr	r2, [pc, #64]	; (8013bf0 <xTaskPriorityInherit+0xc8>)
 8013bb0:	441a      	add	r2, r3
 8013bb2:	68bb      	ldr	r3, [r7, #8]
 8013bb4:	3304      	adds	r3, #4
 8013bb6:	4619      	mov	r1, r3
 8013bb8:	4610      	mov	r0, r2
 8013bba:	f7fd fd7c 	bl	80116b6 <vListInsertEnd>
 8013bbe:	e004      	b.n	8013bca <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013bc0:	4b0a      	ldr	r3, [pc, #40]	; (8013bec <xTaskPriorityInherit+0xc4>)
 8013bc2:	681b      	ldr	r3, [r3, #0]
 8013bc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013bc6:	68bb      	ldr	r3, [r7, #8]
 8013bc8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8013bca:	2301      	movs	r3, #1
 8013bcc:	60fb      	str	r3, [r7, #12]
 8013bce:	e008      	b.n	8013be2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8013bd0:	68bb      	ldr	r3, [r7, #8]
 8013bd2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013bd4:	4b05      	ldr	r3, [pc, #20]	; (8013bec <xTaskPriorityInherit+0xc4>)
 8013bd6:	681b      	ldr	r3, [r3, #0]
 8013bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013bda:	429a      	cmp	r2, r3
 8013bdc:	d201      	bcs.n	8013be2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8013bde:	2301      	movs	r3, #1
 8013be0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013be2:	68fb      	ldr	r3, [r7, #12]
	}
 8013be4:	4618      	mov	r0, r3
 8013be6:	3710      	adds	r7, #16
 8013be8:	46bd      	mov	sp, r7
 8013bea:	bd80      	pop	{r7, pc}
 8013bec:	20026f7c 	.word	0x20026f7c
 8013bf0:	20026f80 	.word	0x20026f80
 8013bf4:	20027458 	.word	0x20027458

08013bf8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8013bf8:	b580      	push	{r7, lr}
 8013bfa:	b086      	sub	sp, #24
 8013bfc:	af00      	add	r7, sp, #0
 8013bfe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8013c04:	2300      	movs	r3, #0
 8013c06:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	d054      	beq.n	8013cb8 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8013c0e:	4b2d      	ldr	r3, [pc, #180]	; (8013cc4 <xTaskPriorityDisinherit+0xcc>)
 8013c10:	681b      	ldr	r3, [r3, #0]
 8013c12:	693a      	ldr	r2, [r7, #16]
 8013c14:	429a      	cmp	r2, r3
 8013c16:	d009      	beq.n	8013c2c <xTaskPriorityDisinherit+0x34>
 8013c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c1c:	f383 8811 	msr	BASEPRI, r3
 8013c20:	f3bf 8f6f 	isb	sy
 8013c24:	f3bf 8f4f 	dsb	sy
 8013c28:	60fb      	str	r3, [r7, #12]
 8013c2a:	e7fe      	b.n	8013c2a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8013c2c:	693b      	ldr	r3, [r7, #16]
 8013c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	d109      	bne.n	8013c48 <xTaskPriorityDisinherit+0x50>
 8013c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c38:	f383 8811 	msr	BASEPRI, r3
 8013c3c:	f3bf 8f6f 	isb	sy
 8013c40:	f3bf 8f4f 	dsb	sy
 8013c44:	60bb      	str	r3, [r7, #8]
 8013c46:	e7fe      	b.n	8013c46 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8013c48:	693b      	ldr	r3, [r7, #16]
 8013c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013c4c:	1e5a      	subs	r2, r3, #1
 8013c4e:	693b      	ldr	r3, [r7, #16]
 8013c50:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8013c52:	693b      	ldr	r3, [r7, #16]
 8013c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c56:	693b      	ldr	r3, [r7, #16]
 8013c58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013c5a:	429a      	cmp	r2, r3
 8013c5c:	d02c      	beq.n	8013cb8 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8013c5e:	693b      	ldr	r3, [r7, #16]
 8013c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d128      	bne.n	8013cb8 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013c66:	693b      	ldr	r3, [r7, #16]
 8013c68:	3304      	adds	r3, #4
 8013c6a:	4618      	mov	r0, r3
 8013c6c:	f7fd fd80 	bl	8011770 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8013c70:	693b      	ldr	r3, [r7, #16]
 8013c72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013c74:	693b      	ldr	r3, [r7, #16]
 8013c76:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013c78:	693b      	ldr	r3, [r7, #16]
 8013c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c7c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013c80:	693b      	ldr	r3, [r7, #16]
 8013c82:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8013c84:	693b      	ldr	r3, [r7, #16]
 8013c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c88:	4b0f      	ldr	r3, [pc, #60]	; (8013cc8 <xTaskPriorityDisinherit+0xd0>)
 8013c8a:	681b      	ldr	r3, [r3, #0]
 8013c8c:	429a      	cmp	r2, r3
 8013c8e:	d903      	bls.n	8013c98 <xTaskPriorityDisinherit+0xa0>
 8013c90:	693b      	ldr	r3, [r7, #16]
 8013c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c94:	4a0c      	ldr	r2, [pc, #48]	; (8013cc8 <xTaskPriorityDisinherit+0xd0>)
 8013c96:	6013      	str	r3, [r2, #0]
 8013c98:	693b      	ldr	r3, [r7, #16]
 8013c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c9c:	4613      	mov	r3, r2
 8013c9e:	009b      	lsls	r3, r3, #2
 8013ca0:	4413      	add	r3, r2
 8013ca2:	009b      	lsls	r3, r3, #2
 8013ca4:	4a09      	ldr	r2, [pc, #36]	; (8013ccc <xTaskPriorityDisinherit+0xd4>)
 8013ca6:	441a      	add	r2, r3
 8013ca8:	693b      	ldr	r3, [r7, #16]
 8013caa:	3304      	adds	r3, #4
 8013cac:	4619      	mov	r1, r3
 8013cae:	4610      	mov	r0, r2
 8013cb0:	f7fd fd01 	bl	80116b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8013cb4:	2301      	movs	r3, #1
 8013cb6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013cb8:	697b      	ldr	r3, [r7, #20]
	}
 8013cba:	4618      	mov	r0, r3
 8013cbc:	3718      	adds	r7, #24
 8013cbe:	46bd      	mov	sp, r7
 8013cc0:	bd80      	pop	{r7, pc}
 8013cc2:	bf00      	nop
 8013cc4:	20026f7c 	.word	0x20026f7c
 8013cc8:	20027458 	.word	0x20027458
 8013ccc:	20026f80 	.word	0x20026f80

08013cd0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8013cd0:	b580      	push	{r7, lr}
 8013cd2:	b088      	sub	sp, #32
 8013cd4:	af00      	add	r7, sp, #0
 8013cd6:	6078      	str	r0, [r7, #4]
 8013cd8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8013cde:	2301      	movs	r3, #1
 8013ce0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	d068      	beq.n	8013dba <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8013ce8:	69bb      	ldr	r3, [r7, #24]
 8013cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	d109      	bne.n	8013d04 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8013cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cf4:	f383 8811 	msr	BASEPRI, r3
 8013cf8:	f3bf 8f6f 	isb	sy
 8013cfc:	f3bf 8f4f 	dsb	sy
 8013d00:	60fb      	str	r3, [r7, #12]
 8013d02:	e7fe      	b.n	8013d02 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8013d04:	69bb      	ldr	r3, [r7, #24]
 8013d06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013d08:	683a      	ldr	r2, [r7, #0]
 8013d0a:	429a      	cmp	r2, r3
 8013d0c:	d902      	bls.n	8013d14 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8013d0e:	683b      	ldr	r3, [r7, #0]
 8013d10:	61fb      	str	r3, [r7, #28]
 8013d12:	e002      	b.n	8013d1a <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8013d14:	69bb      	ldr	r3, [r7, #24]
 8013d16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013d18:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8013d1a:	69bb      	ldr	r3, [r7, #24]
 8013d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d1e:	69fa      	ldr	r2, [r7, #28]
 8013d20:	429a      	cmp	r2, r3
 8013d22:	d04a      	beq.n	8013dba <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8013d24:	69bb      	ldr	r3, [r7, #24]
 8013d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013d28:	697a      	ldr	r2, [r7, #20]
 8013d2a:	429a      	cmp	r2, r3
 8013d2c:	d145      	bne.n	8013dba <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8013d2e:	4b25      	ldr	r3, [pc, #148]	; (8013dc4 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 8013d30:	681b      	ldr	r3, [r3, #0]
 8013d32:	69ba      	ldr	r2, [r7, #24]
 8013d34:	429a      	cmp	r2, r3
 8013d36:	d109      	bne.n	8013d4c <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8013d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d3c:	f383 8811 	msr	BASEPRI, r3
 8013d40:	f3bf 8f6f 	isb	sy
 8013d44:	f3bf 8f4f 	dsb	sy
 8013d48:	60bb      	str	r3, [r7, #8]
 8013d4a:	e7fe      	b.n	8013d4a <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8013d4c:	69bb      	ldr	r3, [r7, #24]
 8013d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d50:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8013d52:	69bb      	ldr	r3, [r7, #24]
 8013d54:	69fa      	ldr	r2, [r7, #28]
 8013d56:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013d58:	69bb      	ldr	r3, [r7, #24]
 8013d5a:	699b      	ldr	r3, [r3, #24]
 8013d5c:	2b00      	cmp	r3, #0
 8013d5e:	db04      	blt.n	8013d6a <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013d60:	69fb      	ldr	r3, [r7, #28]
 8013d62:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013d66:	69bb      	ldr	r3, [r7, #24]
 8013d68:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8013d6a:	69bb      	ldr	r3, [r7, #24]
 8013d6c:	6959      	ldr	r1, [r3, #20]
 8013d6e:	693a      	ldr	r2, [r7, #16]
 8013d70:	4613      	mov	r3, r2
 8013d72:	009b      	lsls	r3, r3, #2
 8013d74:	4413      	add	r3, r2
 8013d76:	009b      	lsls	r3, r3, #2
 8013d78:	4a13      	ldr	r2, [pc, #76]	; (8013dc8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8013d7a:	4413      	add	r3, r2
 8013d7c:	4299      	cmp	r1, r3
 8013d7e:	d11c      	bne.n	8013dba <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013d80:	69bb      	ldr	r3, [r7, #24]
 8013d82:	3304      	adds	r3, #4
 8013d84:	4618      	mov	r0, r3
 8013d86:	f7fd fcf3 	bl	8011770 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8013d8a:	69bb      	ldr	r3, [r7, #24]
 8013d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d8e:	4b0f      	ldr	r3, [pc, #60]	; (8013dcc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8013d90:	681b      	ldr	r3, [r3, #0]
 8013d92:	429a      	cmp	r2, r3
 8013d94:	d903      	bls.n	8013d9e <vTaskPriorityDisinheritAfterTimeout+0xce>
 8013d96:	69bb      	ldr	r3, [r7, #24]
 8013d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d9a:	4a0c      	ldr	r2, [pc, #48]	; (8013dcc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8013d9c:	6013      	str	r3, [r2, #0]
 8013d9e:	69bb      	ldr	r3, [r7, #24]
 8013da0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013da2:	4613      	mov	r3, r2
 8013da4:	009b      	lsls	r3, r3, #2
 8013da6:	4413      	add	r3, r2
 8013da8:	009b      	lsls	r3, r3, #2
 8013daa:	4a07      	ldr	r2, [pc, #28]	; (8013dc8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8013dac:	441a      	add	r2, r3
 8013dae:	69bb      	ldr	r3, [r7, #24]
 8013db0:	3304      	adds	r3, #4
 8013db2:	4619      	mov	r1, r3
 8013db4:	4610      	mov	r0, r2
 8013db6:	f7fd fc7e 	bl	80116b6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013dba:	bf00      	nop
 8013dbc:	3720      	adds	r7, #32
 8013dbe:	46bd      	mov	sp, r7
 8013dc0:	bd80      	pop	{r7, pc}
 8013dc2:	bf00      	nop
 8013dc4:	20026f7c 	.word	0x20026f7c
 8013dc8:	20026f80 	.word	0x20026f80
 8013dcc:	20027458 	.word	0x20027458

08013dd0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8013dd0:	b480      	push	{r7}
 8013dd2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8013dd4:	4b07      	ldr	r3, [pc, #28]	; (8013df4 <pvTaskIncrementMutexHeldCount+0x24>)
 8013dd6:	681b      	ldr	r3, [r3, #0]
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	d004      	beq.n	8013de6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8013ddc:	4b05      	ldr	r3, [pc, #20]	; (8013df4 <pvTaskIncrementMutexHeldCount+0x24>)
 8013dde:	681b      	ldr	r3, [r3, #0]
 8013de0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013de2:	3201      	adds	r2, #1
 8013de4:	655a      	str	r2, [r3, #84]	; 0x54
		}

		return pxCurrentTCB;
 8013de6:	4b03      	ldr	r3, [pc, #12]	; (8013df4 <pvTaskIncrementMutexHeldCount+0x24>)
 8013de8:	681b      	ldr	r3, [r3, #0]
	}
 8013dea:	4618      	mov	r0, r3
 8013dec:	46bd      	mov	sp, r7
 8013dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013df2:	4770      	bx	lr
 8013df4:	20026f7c 	.word	0x20026f7c

08013df8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8013df8:	b580      	push	{r7, lr}
 8013dfa:	b086      	sub	sp, #24
 8013dfc:	af00      	add	r7, sp, #0
 8013dfe:	60f8      	str	r0, [r7, #12]
 8013e00:	60b9      	str	r1, [r7, #8]
 8013e02:	607a      	str	r2, [r7, #4]
 8013e04:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8013e06:	f7fd fe01 	bl	8011a0c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8013e0a:	4b26      	ldr	r3, [pc, #152]	; (8013ea4 <xTaskNotifyWait+0xac>)
 8013e0c:	681b      	ldr	r3, [r3, #0]
 8013e0e:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8013e12:	b2db      	uxtb	r3, r3
 8013e14:	2b02      	cmp	r3, #2
 8013e16:	d01a      	beq.n	8013e4e <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8013e18:	4b22      	ldr	r3, [pc, #136]	; (8013ea4 <xTaskNotifyWait+0xac>)
 8013e1a:	681b      	ldr	r3, [r3, #0]
 8013e1c:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8013e1e:	68fa      	ldr	r2, [r7, #12]
 8013e20:	43d2      	mvns	r2, r2
 8013e22:	400a      	ands	r2, r1
 8013e24:	65da      	str	r2, [r3, #92]	; 0x5c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8013e26:	4b1f      	ldr	r3, [pc, #124]	; (8013ea4 <xTaskNotifyWait+0xac>)
 8013e28:	681b      	ldr	r3, [r3, #0]
 8013e2a:	2201      	movs	r2, #1
 8013e2c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

				if( xTicksToWait > ( TickType_t ) 0 )
 8013e30:	683b      	ldr	r3, [r7, #0]
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	d00b      	beq.n	8013e4e <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013e36:	2101      	movs	r1, #1
 8013e38:	6838      	ldr	r0, [r7, #0]
 8013e3a:	f000 f9c5 	bl	80141c8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8013e3e:	4b1a      	ldr	r3, [pc, #104]	; (8013ea8 <xTaskNotifyWait+0xb0>)
 8013e40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013e44:	601a      	str	r2, [r3, #0]
 8013e46:	f3bf 8f4f 	dsb	sy
 8013e4a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8013e4e:	f7fd fe0b 	bl	8011a68 <vPortExitCritical>

		taskENTER_CRITICAL();
 8013e52:	f7fd fddb 	bl	8011a0c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	d004      	beq.n	8013e66 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8013e5c:	4b11      	ldr	r3, [pc, #68]	; (8013ea4 <xTaskNotifyWait+0xac>)
 8013e5e:	681b      	ldr	r3, [r3, #0]
 8013e60:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8013e66:	4b0f      	ldr	r3, [pc, #60]	; (8013ea4 <xTaskNotifyWait+0xac>)
 8013e68:	681b      	ldr	r3, [r3, #0]
 8013e6a:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8013e6e:	b2db      	uxtb	r3, r3
 8013e70:	2b02      	cmp	r3, #2
 8013e72:	d002      	beq.n	8013e7a <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8013e74:	2300      	movs	r3, #0
 8013e76:	617b      	str	r3, [r7, #20]
 8013e78:	e008      	b.n	8013e8c <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8013e7a:	4b0a      	ldr	r3, [pc, #40]	; (8013ea4 <xTaskNotifyWait+0xac>)
 8013e7c:	681b      	ldr	r3, [r3, #0]
 8013e7e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8013e80:	68ba      	ldr	r2, [r7, #8]
 8013e82:	43d2      	mvns	r2, r2
 8013e84:	400a      	ands	r2, r1
 8013e86:	65da      	str	r2, [r3, #92]	; 0x5c
				xReturn = pdTRUE;
 8013e88:	2301      	movs	r3, #1
 8013e8a:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013e8c:	4b05      	ldr	r3, [pc, #20]	; (8013ea4 <xTaskNotifyWait+0xac>)
 8013e8e:	681b      	ldr	r3, [r3, #0]
 8013e90:	2200      	movs	r2, #0
 8013e92:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		}
		taskEXIT_CRITICAL();
 8013e96:	f7fd fde7 	bl	8011a68 <vPortExitCritical>

		return xReturn;
 8013e9a:	697b      	ldr	r3, [r7, #20]
	}
 8013e9c:	4618      	mov	r0, r3
 8013e9e:	3718      	adds	r7, #24
 8013ea0:	46bd      	mov	sp, r7
 8013ea2:	bd80      	pop	{r7, pc}
 8013ea4:	20026f7c 	.word	0x20026f7c
 8013ea8:	e000ed04 	.word	0xe000ed04

08013eac <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8013eac:	b580      	push	{r7, lr}
 8013eae:	b08a      	sub	sp, #40	; 0x28
 8013eb0:	af00      	add	r7, sp, #0
 8013eb2:	60f8      	str	r0, [r7, #12]
 8013eb4:	60b9      	str	r1, [r7, #8]
 8013eb6:	603b      	str	r3, [r7, #0]
 8013eb8:	4613      	mov	r3, r2
 8013eba:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8013ebc:	2301      	movs	r3, #1
 8013ebe:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8013ec0:	68fb      	ldr	r3, [r7, #12]
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d109      	bne.n	8013eda <xTaskGenericNotify+0x2e>
 8013ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013eca:	f383 8811 	msr	BASEPRI, r3
 8013ece:	f3bf 8f6f 	isb	sy
 8013ed2:	f3bf 8f4f 	dsb	sy
 8013ed6:	61bb      	str	r3, [r7, #24]
 8013ed8:	e7fe      	b.n	8013ed8 <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 8013eda:	68fb      	ldr	r3, [r7, #12]
 8013edc:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8013ede:	f7fd fd95 	bl	8011a0c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8013ee2:	683b      	ldr	r3, [r7, #0]
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d003      	beq.n	8013ef0 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8013ee8:	6a3b      	ldr	r3, [r7, #32]
 8013eea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013eec:	683b      	ldr	r3, [r7, #0]
 8013eee:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8013ef0:	6a3b      	ldr	r3, [r7, #32]
 8013ef2:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8013ef6:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8013ef8:	6a3b      	ldr	r3, [r7, #32]
 8013efa:	2202      	movs	r2, #2
 8013efc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

			switch( eAction )
 8013f00:	79fb      	ldrb	r3, [r7, #7]
 8013f02:	2b04      	cmp	r3, #4
 8013f04:	d827      	bhi.n	8013f56 <xTaskGenericNotify+0xaa>
 8013f06:	a201      	add	r2, pc, #4	; (adr r2, 8013f0c <xTaskGenericNotify+0x60>)
 8013f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013f0c:	08013f75 	.word	0x08013f75
 8013f10:	08013f21 	.word	0x08013f21
 8013f14:	08013f2f 	.word	0x08013f2f
 8013f18:	08013f3b 	.word	0x08013f3b
 8013f1c:	08013f43 	.word	0x08013f43
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8013f20:	6a3b      	ldr	r3, [r7, #32]
 8013f22:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013f24:	68bb      	ldr	r3, [r7, #8]
 8013f26:	431a      	orrs	r2, r3
 8013f28:	6a3b      	ldr	r3, [r7, #32]
 8013f2a:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8013f2c:	e025      	b.n	8013f7a <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8013f2e:	6a3b      	ldr	r3, [r7, #32]
 8013f30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013f32:	1c5a      	adds	r2, r3, #1
 8013f34:	6a3b      	ldr	r3, [r7, #32]
 8013f36:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8013f38:	e01f      	b.n	8013f7a <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8013f3a:	6a3b      	ldr	r3, [r7, #32]
 8013f3c:	68ba      	ldr	r2, [r7, #8]
 8013f3e:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8013f40:	e01b      	b.n	8013f7a <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8013f42:	7ffb      	ldrb	r3, [r7, #31]
 8013f44:	2b02      	cmp	r3, #2
 8013f46:	d003      	beq.n	8013f50 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8013f48:	6a3b      	ldr	r3, [r7, #32]
 8013f4a:	68ba      	ldr	r2, [r7, #8]
 8013f4c:	65da      	str	r2, [r3, #92]	; 0x5c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8013f4e:	e014      	b.n	8013f7a <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 8013f50:	2300      	movs	r3, #0
 8013f52:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8013f54:	e011      	b.n	8013f7a <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8013f56:	6a3b      	ldr	r3, [r7, #32]
 8013f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f5e:	d00b      	beq.n	8013f78 <xTaskGenericNotify+0xcc>
 8013f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f64:	f383 8811 	msr	BASEPRI, r3
 8013f68:	f3bf 8f6f 	isb	sy
 8013f6c:	f3bf 8f4f 	dsb	sy
 8013f70:	617b      	str	r3, [r7, #20]
 8013f72:	e7fe      	b.n	8013f72 <xTaskGenericNotify+0xc6>
					break;
 8013f74:	bf00      	nop
 8013f76:	e000      	b.n	8013f7a <xTaskGenericNotify+0xce>

					break;
 8013f78:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8013f7a:	7ffb      	ldrb	r3, [r7, #31]
 8013f7c:	2b01      	cmp	r3, #1
 8013f7e:	d13b      	bne.n	8013ff8 <xTaskGenericNotify+0x14c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013f80:	6a3b      	ldr	r3, [r7, #32]
 8013f82:	3304      	adds	r3, #4
 8013f84:	4618      	mov	r0, r3
 8013f86:	f7fd fbf3 	bl	8011770 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8013f8a:	6a3b      	ldr	r3, [r7, #32]
 8013f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f8e:	4b1e      	ldr	r3, [pc, #120]	; (8014008 <xTaskGenericNotify+0x15c>)
 8013f90:	681b      	ldr	r3, [r3, #0]
 8013f92:	429a      	cmp	r2, r3
 8013f94:	d903      	bls.n	8013f9e <xTaskGenericNotify+0xf2>
 8013f96:	6a3b      	ldr	r3, [r7, #32]
 8013f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f9a:	4a1b      	ldr	r2, [pc, #108]	; (8014008 <xTaskGenericNotify+0x15c>)
 8013f9c:	6013      	str	r3, [r2, #0]
 8013f9e:	6a3b      	ldr	r3, [r7, #32]
 8013fa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013fa2:	4613      	mov	r3, r2
 8013fa4:	009b      	lsls	r3, r3, #2
 8013fa6:	4413      	add	r3, r2
 8013fa8:	009b      	lsls	r3, r3, #2
 8013faa:	4a18      	ldr	r2, [pc, #96]	; (801400c <xTaskGenericNotify+0x160>)
 8013fac:	441a      	add	r2, r3
 8013fae:	6a3b      	ldr	r3, [r7, #32]
 8013fb0:	3304      	adds	r3, #4
 8013fb2:	4619      	mov	r1, r3
 8013fb4:	4610      	mov	r0, r2
 8013fb6:	f7fd fb7e 	bl	80116b6 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8013fba:	6a3b      	ldr	r3, [r7, #32]
 8013fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	d009      	beq.n	8013fd6 <xTaskGenericNotify+0x12a>
 8013fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fc6:	f383 8811 	msr	BASEPRI, r3
 8013fca:	f3bf 8f6f 	isb	sy
 8013fce:	f3bf 8f4f 	dsb	sy
 8013fd2:	613b      	str	r3, [r7, #16]
 8013fd4:	e7fe      	b.n	8013fd4 <xTaskGenericNotify+0x128>
					the tick count equals xNextTaskUnblockTime.  However if
					tickless idling is used it might be more important to enter
					sleep mode at the earliest possible time - so reset
					xNextTaskUnblockTime here to ensure it is updated at the
					earliest possible time. */
					prvResetNextTaskUnblockTime();
 8013fd6:	f7ff fd59 	bl	8013a8c <prvResetNextTaskUnblockTime>
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013fda:	6a3b      	ldr	r3, [r7, #32]
 8013fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013fde:	4b0c      	ldr	r3, [pc, #48]	; (8014010 <xTaskGenericNotify+0x164>)
 8013fe0:	681b      	ldr	r3, [r3, #0]
 8013fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013fe4:	429a      	cmp	r2, r3
 8013fe6:	d907      	bls.n	8013ff8 <xTaskGenericNotify+0x14c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8013fe8:	4b0a      	ldr	r3, [pc, #40]	; (8014014 <xTaskGenericNotify+0x168>)
 8013fea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013fee:	601a      	str	r2, [r3, #0]
 8013ff0:	f3bf 8f4f 	dsb	sy
 8013ff4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8013ff8:	f7fd fd36 	bl	8011a68 <vPortExitCritical>

		return xReturn;
 8013ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8013ffe:	4618      	mov	r0, r3
 8014000:	3728      	adds	r7, #40	; 0x28
 8014002:	46bd      	mov	sp, r7
 8014004:	bd80      	pop	{r7, pc}
 8014006:	bf00      	nop
 8014008:	20027458 	.word	0x20027458
 801400c:	20026f80 	.word	0x20026f80
 8014010:	20026f7c 	.word	0x20026f7c
 8014014:	e000ed04 	.word	0xe000ed04

08014018 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8014018:	b580      	push	{r7, lr}
 801401a:	b08e      	sub	sp, #56	; 0x38
 801401c:	af00      	add	r7, sp, #0
 801401e:	60f8      	str	r0, [r7, #12]
 8014020:	60b9      	str	r1, [r7, #8]
 8014022:	603b      	str	r3, [r7, #0]
 8014024:	4613      	mov	r3, r2
 8014026:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8014028:	2301      	movs	r3, #1
 801402a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 801402c:	68fb      	ldr	r3, [r7, #12]
 801402e:	2b00      	cmp	r3, #0
 8014030:	d109      	bne.n	8014046 <xTaskGenericNotifyFromISR+0x2e>
 8014032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014036:	f383 8811 	msr	BASEPRI, r3
 801403a:	f3bf 8f6f 	isb	sy
 801403e:	f3bf 8f4f 	dsb	sy
 8014042:	627b      	str	r3, [r7, #36]	; 0x24
 8014044:	e7fe      	b.n	8014044 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014046:	f7fd fdbd 	bl	8011bc4 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 801404a:	68fb      	ldr	r3, [r7, #12]
 801404c:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 801404e:	f3ef 8211 	mrs	r2, BASEPRI
 8014052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014056:	f383 8811 	msr	BASEPRI, r3
 801405a:	f3bf 8f6f 	isb	sy
 801405e:	f3bf 8f4f 	dsb	sy
 8014062:	623a      	str	r2, [r7, #32]
 8014064:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8014066:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014068:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 801406a:	683b      	ldr	r3, [r7, #0]
 801406c:	2b00      	cmp	r3, #0
 801406e:	d003      	beq.n	8014078 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8014070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014072:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8014074:	683b      	ldr	r3, [r7, #0]
 8014076:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8014078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801407a:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 801407e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8014082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014084:	2202      	movs	r2, #2
 8014086:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

			switch( eAction )
 801408a:	79fb      	ldrb	r3, [r7, #7]
 801408c:	2b04      	cmp	r3, #4
 801408e:	d829      	bhi.n	80140e4 <xTaskGenericNotifyFromISR+0xcc>
 8014090:	a201      	add	r2, pc, #4	; (adr r2, 8014098 <xTaskGenericNotifyFromISR+0x80>)
 8014092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014096:	bf00      	nop
 8014098:	08014103 	.word	0x08014103
 801409c:	080140ad 	.word	0x080140ad
 80140a0:	080140bb 	.word	0x080140bb
 80140a4:	080140c7 	.word	0x080140c7
 80140a8:	080140cf 	.word	0x080140cf
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80140ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80140b0:	68bb      	ldr	r3, [r7, #8]
 80140b2:	431a      	orrs	r2, r3
 80140b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140b6:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 80140b8:	e026      	b.n	8014108 <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80140ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80140be:	1c5a      	adds	r2, r3, #1
 80140c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140c2:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 80140c4:	e020      	b.n	8014108 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80140c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140c8:	68ba      	ldr	r2, [r7, #8]
 80140ca:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 80140cc:	e01c      	b.n	8014108 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80140ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80140d2:	2b02      	cmp	r3, #2
 80140d4:	d003      	beq.n	80140de <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80140d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140d8:	68ba      	ldr	r2, [r7, #8]
 80140da:	65da      	str	r2, [r3, #92]	; 0x5c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80140dc:	e014      	b.n	8014108 <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 80140de:	2300      	movs	r3, #0
 80140e0:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 80140e2:	e011      	b.n	8014108 <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80140e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80140e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80140ec:	d00b      	beq.n	8014106 <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 80140ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140f2:	f383 8811 	msr	BASEPRI, r3
 80140f6:	f3bf 8f6f 	isb	sy
 80140fa:	f3bf 8f4f 	dsb	sy
 80140fe:	61bb      	str	r3, [r7, #24]
 8014100:	e7fe      	b.n	8014100 <xTaskGenericNotifyFromISR+0xe8>
					break;
 8014102:	bf00      	nop
 8014104:	e000      	b.n	8014108 <xTaskGenericNotifyFromISR+0xf0>
					break;
 8014106:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8014108:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801410c:	2b01      	cmp	r3, #1
 801410e:	d145      	bne.n	801419c <xTaskGenericNotifyFromISR+0x184>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8014110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014114:	2b00      	cmp	r3, #0
 8014116:	d009      	beq.n	801412c <xTaskGenericNotifyFromISR+0x114>
 8014118:	f04f 0350 	mov.w	r3, #80	; 0x50
 801411c:	f383 8811 	msr	BASEPRI, r3
 8014120:	f3bf 8f6f 	isb	sy
 8014124:	f3bf 8f4f 	dsb	sy
 8014128:	617b      	str	r3, [r7, #20]
 801412a:	e7fe      	b.n	801412a <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801412c:	4b20      	ldr	r3, [pc, #128]	; (80141b0 <xTaskGenericNotifyFromISR+0x198>)
 801412e:	681b      	ldr	r3, [r3, #0]
 8014130:	2b00      	cmp	r3, #0
 8014132:	d11d      	bne.n	8014170 <xTaskGenericNotifyFromISR+0x158>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014136:	3304      	adds	r3, #4
 8014138:	4618      	mov	r0, r3
 801413a:	f7fd fb19 	bl	8011770 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801413e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014142:	4b1c      	ldr	r3, [pc, #112]	; (80141b4 <xTaskGenericNotifyFromISR+0x19c>)
 8014144:	681b      	ldr	r3, [r3, #0]
 8014146:	429a      	cmp	r2, r3
 8014148:	d903      	bls.n	8014152 <xTaskGenericNotifyFromISR+0x13a>
 801414a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801414c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801414e:	4a19      	ldr	r2, [pc, #100]	; (80141b4 <xTaskGenericNotifyFromISR+0x19c>)
 8014150:	6013      	str	r3, [r2, #0]
 8014152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014156:	4613      	mov	r3, r2
 8014158:	009b      	lsls	r3, r3, #2
 801415a:	4413      	add	r3, r2
 801415c:	009b      	lsls	r3, r3, #2
 801415e:	4a16      	ldr	r2, [pc, #88]	; (80141b8 <xTaskGenericNotifyFromISR+0x1a0>)
 8014160:	441a      	add	r2, r3
 8014162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014164:	3304      	adds	r3, #4
 8014166:	4619      	mov	r1, r3
 8014168:	4610      	mov	r0, r2
 801416a:	f7fd faa4 	bl	80116b6 <vListInsertEnd>
 801416e:	e005      	b.n	801417c <xTaskGenericNotifyFromISR+0x164>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8014170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014172:	3318      	adds	r3, #24
 8014174:	4619      	mov	r1, r3
 8014176:	4811      	ldr	r0, [pc, #68]	; (80141bc <xTaskGenericNotifyFromISR+0x1a4>)
 8014178:	f7fd fa9d 	bl	80116b6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801417c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801417e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014180:	4b0f      	ldr	r3, [pc, #60]	; (80141c0 <xTaskGenericNotifyFromISR+0x1a8>)
 8014182:	681b      	ldr	r3, [r3, #0]
 8014184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014186:	429a      	cmp	r2, r3
 8014188:	d908      	bls.n	801419c <xTaskGenericNotifyFromISR+0x184>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 801418a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801418c:	2b00      	cmp	r3, #0
 801418e:	d002      	beq.n	8014196 <xTaskGenericNotifyFromISR+0x17e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8014190:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014192:	2201      	movs	r2, #1
 8014194:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8014196:	4b0b      	ldr	r3, [pc, #44]	; (80141c4 <xTaskGenericNotifyFromISR+0x1ac>)
 8014198:	2201      	movs	r2, #1
 801419a:	601a      	str	r2, [r3, #0]
 801419c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801419e:	613b      	str	r3, [r7, #16]
	__asm volatile
 80141a0:	693b      	ldr	r3, [r7, #16]
 80141a2:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80141a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 80141a8:	4618      	mov	r0, r3
 80141aa:	3738      	adds	r7, #56	; 0x38
 80141ac:	46bd      	mov	sp, r7
 80141ae:	bd80      	pop	{r7, pc}
 80141b0:	20027478 	.word	0x20027478
 80141b4:	20027458 	.word	0x20027458
 80141b8:	20026f80 	.word	0x20026f80
 80141bc:	20027410 	.word	0x20027410
 80141c0:	20026f7c 	.word	0x20026f7c
 80141c4:	20027464 	.word	0x20027464

080141c8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80141c8:	b580      	push	{r7, lr}
 80141ca:	b084      	sub	sp, #16
 80141cc:	af00      	add	r7, sp, #0
 80141ce:	6078      	str	r0, [r7, #4]
 80141d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80141d2:	4b21      	ldr	r3, [pc, #132]	; (8014258 <prvAddCurrentTaskToDelayedList+0x90>)
 80141d4:	681b      	ldr	r3, [r3, #0]
 80141d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80141d8:	4b20      	ldr	r3, [pc, #128]	; (801425c <prvAddCurrentTaskToDelayedList+0x94>)
 80141da:	681b      	ldr	r3, [r3, #0]
 80141dc:	3304      	adds	r3, #4
 80141de:	4618      	mov	r0, r3
 80141e0:	f7fd fac6 	bl	8011770 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80141ea:	d10a      	bne.n	8014202 <prvAddCurrentTaskToDelayedList+0x3a>
 80141ec:	683b      	ldr	r3, [r7, #0]
 80141ee:	2b00      	cmp	r3, #0
 80141f0:	d007      	beq.n	8014202 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80141f2:	4b1a      	ldr	r3, [pc, #104]	; (801425c <prvAddCurrentTaskToDelayedList+0x94>)
 80141f4:	681b      	ldr	r3, [r3, #0]
 80141f6:	3304      	adds	r3, #4
 80141f8:	4619      	mov	r1, r3
 80141fa:	4819      	ldr	r0, [pc, #100]	; (8014260 <prvAddCurrentTaskToDelayedList+0x98>)
 80141fc:	f7fd fa5b 	bl	80116b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8014200:	e026      	b.n	8014250 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8014202:	68fa      	ldr	r2, [r7, #12]
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	4413      	add	r3, r2
 8014208:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801420a:	4b14      	ldr	r3, [pc, #80]	; (801425c <prvAddCurrentTaskToDelayedList+0x94>)
 801420c:	681b      	ldr	r3, [r3, #0]
 801420e:	68ba      	ldr	r2, [r7, #8]
 8014210:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8014212:	68ba      	ldr	r2, [r7, #8]
 8014214:	68fb      	ldr	r3, [r7, #12]
 8014216:	429a      	cmp	r2, r3
 8014218:	d209      	bcs.n	801422e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801421a:	4b12      	ldr	r3, [pc, #72]	; (8014264 <prvAddCurrentTaskToDelayedList+0x9c>)
 801421c:	681a      	ldr	r2, [r3, #0]
 801421e:	4b0f      	ldr	r3, [pc, #60]	; (801425c <prvAddCurrentTaskToDelayedList+0x94>)
 8014220:	681b      	ldr	r3, [r3, #0]
 8014222:	3304      	adds	r3, #4
 8014224:	4619      	mov	r1, r3
 8014226:	4610      	mov	r0, r2
 8014228:	f7fd fa69 	bl	80116fe <vListInsert>
}
 801422c:	e010      	b.n	8014250 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801422e:	4b0e      	ldr	r3, [pc, #56]	; (8014268 <prvAddCurrentTaskToDelayedList+0xa0>)
 8014230:	681a      	ldr	r2, [r3, #0]
 8014232:	4b0a      	ldr	r3, [pc, #40]	; (801425c <prvAddCurrentTaskToDelayedList+0x94>)
 8014234:	681b      	ldr	r3, [r3, #0]
 8014236:	3304      	adds	r3, #4
 8014238:	4619      	mov	r1, r3
 801423a:	4610      	mov	r0, r2
 801423c:	f7fd fa5f 	bl	80116fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8014240:	4b0a      	ldr	r3, [pc, #40]	; (801426c <prvAddCurrentTaskToDelayedList+0xa4>)
 8014242:	681b      	ldr	r3, [r3, #0]
 8014244:	68ba      	ldr	r2, [r7, #8]
 8014246:	429a      	cmp	r2, r3
 8014248:	d202      	bcs.n	8014250 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801424a:	4a08      	ldr	r2, [pc, #32]	; (801426c <prvAddCurrentTaskToDelayedList+0xa4>)
 801424c:	68bb      	ldr	r3, [r7, #8]
 801424e:	6013      	str	r3, [r2, #0]
}
 8014250:	bf00      	nop
 8014252:	3710      	adds	r7, #16
 8014254:	46bd      	mov	sp, r7
 8014256:	bd80      	pop	{r7, pc}
 8014258:	20027454 	.word	0x20027454
 801425c:	20026f7c 	.word	0x20026f7c
 8014260:	2002743c 	.word	0x2002743c
 8014264:	2002740c 	.word	0x2002740c
 8014268:	20027408 	.word	0x20027408
 801426c:	20027470 	.word	0x20027470

08014270 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8014270:	b580      	push	{r7, lr}
 8014272:	b08a      	sub	sp, #40	; 0x28
 8014274:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8014276:	2300      	movs	r3, #0
 8014278:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801427a:	f000 fb97 	bl	80149ac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801427e:	4b1c      	ldr	r3, [pc, #112]	; (80142f0 <xTimerCreateTimerTask+0x80>)
 8014280:	681b      	ldr	r3, [r3, #0]
 8014282:	2b00      	cmp	r3, #0
 8014284:	d021      	beq.n	80142ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8014286:	2300      	movs	r3, #0
 8014288:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801428a:	2300      	movs	r3, #0
 801428c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801428e:	1d3a      	adds	r2, r7, #4
 8014290:	f107 0108 	add.w	r1, r7, #8
 8014294:	f107 030c 	add.w	r3, r7, #12
 8014298:	4618      	mov	r0, r3
 801429a:	f7fc ffe9 	bl	8011270 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801429e:	6879      	ldr	r1, [r7, #4]
 80142a0:	68bb      	ldr	r3, [r7, #8]
 80142a2:	68fa      	ldr	r2, [r7, #12]
 80142a4:	9202      	str	r2, [sp, #8]
 80142a6:	9301      	str	r3, [sp, #4]
 80142a8:	2302      	movs	r3, #2
 80142aa:	9300      	str	r3, [sp, #0]
 80142ac:	2300      	movs	r3, #0
 80142ae:	460a      	mov	r2, r1
 80142b0:	4910      	ldr	r1, [pc, #64]	; (80142f4 <xTimerCreateTimerTask+0x84>)
 80142b2:	4811      	ldr	r0, [pc, #68]	; (80142f8 <xTimerCreateTimerTask+0x88>)
 80142b4:	f7fe fd66 	bl	8012d84 <xTaskCreateStatic>
 80142b8:	4602      	mov	r2, r0
 80142ba:	4b10      	ldr	r3, [pc, #64]	; (80142fc <xTimerCreateTimerTask+0x8c>)
 80142bc:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80142be:	4b0f      	ldr	r3, [pc, #60]	; (80142fc <xTimerCreateTimerTask+0x8c>)
 80142c0:	681b      	ldr	r3, [r3, #0]
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	d001      	beq.n	80142ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80142c6:	2301      	movs	r3, #1
 80142c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80142ca:	697b      	ldr	r3, [r7, #20]
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	d109      	bne.n	80142e4 <xTimerCreateTimerTask+0x74>
	__asm volatile
 80142d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142d4:	f383 8811 	msr	BASEPRI, r3
 80142d8:	f3bf 8f6f 	isb	sy
 80142dc:	f3bf 8f4f 	dsb	sy
 80142e0:	613b      	str	r3, [r7, #16]
 80142e2:	e7fe      	b.n	80142e2 <xTimerCreateTimerTask+0x72>
	return xReturn;
 80142e4:	697b      	ldr	r3, [r7, #20]
}
 80142e6:	4618      	mov	r0, r3
 80142e8:	3718      	adds	r7, #24
 80142ea:	46bd      	mov	sp, r7
 80142ec:	bd80      	pop	{r7, pc}
 80142ee:	bf00      	nop
 80142f0:	200274b4 	.word	0x200274b4
 80142f4:	0801bd10 	.word	0x0801bd10
 80142f8:	08014561 	.word	0x08014561
 80142fc:	200274b8 	.word	0x200274b8

08014300 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8014300:	b580      	push	{r7, lr}
 8014302:	b088      	sub	sp, #32
 8014304:	af02      	add	r7, sp, #8
 8014306:	60f8      	str	r0, [r7, #12]
 8014308:	60b9      	str	r1, [r7, #8]
 801430a:	607a      	str	r2, [r7, #4]
 801430c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 801430e:	202c      	movs	r0, #44	; 0x2c
 8014310:	f7fc ffc8 	bl	80112a4 <pvPortMalloc>
 8014314:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8014316:	697b      	ldr	r3, [r7, #20]
 8014318:	2b00      	cmp	r3, #0
 801431a:	d00d      	beq.n	8014338 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 801431c:	697b      	ldr	r3, [r7, #20]
 801431e:	2200      	movs	r2, #0
 8014320:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8014324:	697b      	ldr	r3, [r7, #20]
 8014326:	9301      	str	r3, [sp, #4]
 8014328:	6a3b      	ldr	r3, [r7, #32]
 801432a:	9300      	str	r3, [sp, #0]
 801432c:	683b      	ldr	r3, [r7, #0]
 801432e:	687a      	ldr	r2, [r7, #4]
 8014330:	68b9      	ldr	r1, [r7, #8]
 8014332:	68f8      	ldr	r0, [r7, #12]
 8014334:	f000 f841 	bl	80143ba <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8014338:	697b      	ldr	r3, [r7, #20]
	}
 801433a:	4618      	mov	r0, r3
 801433c:	3718      	adds	r7, #24
 801433e:	46bd      	mov	sp, r7
 8014340:	bd80      	pop	{r7, pc}

08014342 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8014342:	b580      	push	{r7, lr}
 8014344:	b08a      	sub	sp, #40	; 0x28
 8014346:	af02      	add	r7, sp, #8
 8014348:	60f8      	str	r0, [r7, #12]
 801434a:	60b9      	str	r1, [r7, #8]
 801434c:	607a      	str	r2, [r7, #4]
 801434e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8014350:	232c      	movs	r3, #44	; 0x2c
 8014352:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8014354:	693b      	ldr	r3, [r7, #16]
 8014356:	2b2c      	cmp	r3, #44	; 0x2c
 8014358:	d009      	beq.n	801436e <xTimerCreateStatic+0x2c>
 801435a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801435e:	f383 8811 	msr	BASEPRI, r3
 8014362:	f3bf 8f6f 	isb	sy
 8014366:	f3bf 8f4f 	dsb	sy
 801436a:	61bb      	str	r3, [r7, #24]
 801436c:	e7fe      	b.n	801436c <xTimerCreateStatic+0x2a>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801436e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8014370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014372:	2b00      	cmp	r3, #0
 8014374:	d109      	bne.n	801438a <xTimerCreateStatic+0x48>
 8014376:	f04f 0350 	mov.w	r3, #80	; 0x50
 801437a:	f383 8811 	msr	BASEPRI, r3
 801437e:	f3bf 8f6f 	isb	sy
 8014382:	f3bf 8f4f 	dsb	sy
 8014386:	617b      	str	r3, [r7, #20]
 8014388:	e7fe      	b.n	8014388 <xTimerCreateStatic+0x46>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 801438a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801438c:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 801438e:	69fb      	ldr	r3, [r7, #28]
 8014390:	2b00      	cmp	r3, #0
 8014392:	d00d      	beq.n	80143b0 <xTimerCreateStatic+0x6e>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8014394:	69fb      	ldr	r3, [r7, #28]
 8014396:	2202      	movs	r2, #2
 8014398:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 801439c:	69fb      	ldr	r3, [r7, #28]
 801439e:	9301      	str	r3, [sp, #4]
 80143a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143a2:	9300      	str	r3, [sp, #0]
 80143a4:	683b      	ldr	r3, [r7, #0]
 80143a6:	687a      	ldr	r2, [r7, #4]
 80143a8:	68b9      	ldr	r1, [r7, #8]
 80143aa:	68f8      	ldr	r0, [r7, #12]
 80143ac:	f000 f805 	bl	80143ba <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80143b0:	69fb      	ldr	r3, [r7, #28]
	}
 80143b2:	4618      	mov	r0, r3
 80143b4:	3720      	adds	r7, #32
 80143b6:	46bd      	mov	sp, r7
 80143b8:	bd80      	pop	{r7, pc}

080143ba <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80143ba:	b580      	push	{r7, lr}
 80143bc:	b086      	sub	sp, #24
 80143be:	af00      	add	r7, sp, #0
 80143c0:	60f8      	str	r0, [r7, #12]
 80143c2:	60b9      	str	r1, [r7, #8]
 80143c4:	607a      	str	r2, [r7, #4]
 80143c6:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80143c8:	68bb      	ldr	r3, [r7, #8]
 80143ca:	2b00      	cmp	r3, #0
 80143cc:	d109      	bne.n	80143e2 <prvInitialiseNewTimer+0x28>
 80143ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143d2:	f383 8811 	msr	BASEPRI, r3
 80143d6:	f3bf 8f6f 	isb	sy
 80143da:	f3bf 8f4f 	dsb	sy
 80143de:	617b      	str	r3, [r7, #20]
 80143e0:	e7fe      	b.n	80143e0 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 80143e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	d01e      	beq.n	8014426 <prvInitialiseNewTimer+0x6c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80143e8:	f000 fae0 	bl	80149ac <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80143ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143ee:	68fa      	ldr	r2, [r7, #12]
 80143f0:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80143f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143f4:	68ba      	ldr	r2, [r7, #8]
 80143f6:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80143f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143fa:	683a      	ldr	r2, [r7, #0]
 80143fc:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80143fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014400:	6a3a      	ldr	r2, [r7, #32]
 8014402:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8014404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014406:	3304      	adds	r3, #4
 8014408:	4618      	mov	r0, r3
 801440a:	f7fd f947 	bl	801169c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	2b00      	cmp	r3, #0
 8014412:	d008      	beq.n	8014426 <prvInitialiseNewTimer+0x6c>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8014414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014416:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801441a:	f043 0304 	orr.w	r3, r3, #4
 801441e:	b2da      	uxtb	r2, r3
 8014420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014422:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8014426:	bf00      	nop
 8014428:	3718      	adds	r7, #24
 801442a:	46bd      	mov	sp, r7
 801442c:	bd80      	pop	{r7, pc}
	...

08014430 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8014430:	b580      	push	{r7, lr}
 8014432:	b08a      	sub	sp, #40	; 0x28
 8014434:	af00      	add	r7, sp, #0
 8014436:	60f8      	str	r0, [r7, #12]
 8014438:	60b9      	str	r1, [r7, #8]
 801443a:	607a      	str	r2, [r7, #4]
 801443c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801443e:	2300      	movs	r3, #0
 8014440:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8014442:	68fb      	ldr	r3, [r7, #12]
 8014444:	2b00      	cmp	r3, #0
 8014446:	d109      	bne.n	801445c <xTimerGenericCommand+0x2c>
 8014448:	f04f 0350 	mov.w	r3, #80	; 0x50
 801444c:	f383 8811 	msr	BASEPRI, r3
 8014450:	f3bf 8f6f 	isb	sy
 8014454:	f3bf 8f4f 	dsb	sy
 8014458:	623b      	str	r3, [r7, #32]
 801445a:	e7fe      	b.n	801445a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801445c:	4b19      	ldr	r3, [pc, #100]	; (80144c4 <xTimerGenericCommand+0x94>)
 801445e:	681b      	ldr	r3, [r3, #0]
 8014460:	2b00      	cmp	r3, #0
 8014462:	d02a      	beq.n	80144ba <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8014464:	68bb      	ldr	r3, [r7, #8]
 8014466:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801446c:	68fb      	ldr	r3, [r7, #12]
 801446e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8014470:	68bb      	ldr	r3, [r7, #8]
 8014472:	2b05      	cmp	r3, #5
 8014474:	dc18      	bgt.n	80144a8 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8014476:	f7ff fb39 	bl	8013aec <xTaskGetSchedulerState>
 801447a:	4603      	mov	r3, r0
 801447c:	2b02      	cmp	r3, #2
 801447e:	d109      	bne.n	8014494 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8014480:	4b10      	ldr	r3, [pc, #64]	; (80144c4 <xTimerGenericCommand+0x94>)
 8014482:	6818      	ldr	r0, [r3, #0]
 8014484:	f107 0110 	add.w	r1, r7, #16
 8014488:	2300      	movs	r3, #0
 801448a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801448c:	f7fd fe30 	bl	80120f0 <xQueueGenericSend>
 8014490:	6278      	str	r0, [r7, #36]	; 0x24
 8014492:	e012      	b.n	80144ba <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8014494:	4b0b      	ldr	r3, [pc, #44]	; (80144c4 <xTimerGenericCommand+0x94>)
 8014496:	6818      	ldr	r0, [r3, #0]
 8014498:	f107 0110 	add.w	r1, r7, #16
 801449c:	2300      	movs	r3, #0
 801449e:	2200      	movs	r2, #0
 80144a0:	f7fd fe26 	bl	80120f0 <xQueueGenericSend>
 80144a4:	6278      	str	r0, [r7, #36]	; 0x24
 80144a6:	e008      	b.n	80144ba <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80144a8:	4b06      	ldr	r3, [pc, #24]	; (80144c4 <xTimerGenericCommand+0x94>)
 80144aa:	6818      	ldr	r0, [r3, #0]
 80144ac:	f107 0110 	add.w	r1, r7, #16
 80144b0:	2300      	movs	r3, #0
 80144b2:	683a      	ldr	r2, [r7, #0]
 80144b4:	f7fd ff16 	bl	80122e4 <xQueueGenericSendFromISR>
 80144b8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80144ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80144bc:	4618      	mov	r0, r3
 80144be:	3728      	adds	r7, #40	; 0x28
 80144c0:	46bd      	mov	sp, r7
 80144c2:	bd80      	pop	{r7, pc}
 80144c4:	200274b4 	.word	0x200274b4

080144c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80144c8:	b580      	push	{r7, lr}
 80144ca:	b088      	sub	sp, #32
 80144cc:	af02      	add	r7, sp, #8
 80144ce:	6078      	str	r0, [r7, #4]
 80144d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80144d2:	4b22      	ldr	r3, [pc, #136]	; (801455c <prvProcessExpiredTimer+0x94>)
 80144d4:	681b      	ldr	r3, [r3, #0]
 80144d6:	68db      	ldr	r3, [r3, #12]
 80144d8:	68db      	ldr	r3, [r3, #12]
 80144da:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80144dc:	697b      	ldr	r3, [r7, #20]
 80144de:	3304      	adds	r3, #4
 80144e0:	4618      	mov	r0, r3
 80144e2:	f7fd f945 	bl	8011770 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80144e6:	697b      	ldr	r3, [r7, #20]
 80144e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80144ec:	f003 0304 	and.w	r3, r3, #4
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	d021      	beq.n	8014538 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80144f4:	697b      	ldr	r3, [r7, #20]
 80144f6:	699a      	ldr	r2, [r3, #24]
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	18d1      	adds	r1, r2, r3
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	683a      	ldr	r2, [r7, #0]
 8014500:	6978      	ldr	r0, [r7, #20]
 8014502:	f000 f8d1 	bl	80146a8 <prvInsertTimerInActiveList>
 8014506:	4603      	mov	r3, r0
 8014508:	2b00      	cmp	r3, #0
 801450a:	d01e      	beq.n	801454a <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801450c:	2300      	movs	r3, #0
 801450e:	9300      	str	r3, [sp, #0]
 8014510:	2300      	movs	r3, #0
 8014512:	687a      	ldr	r2, [r7, #4]
 8014514:	2100      	movs	r1, #0
 8014516:	6978      	ldr	r0, [r7, #20]
 8014518:	f7ff ff8a 	bl	8014430 <xTimerGenericCommand>
 801451c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801451e:	693b      	ldr	r3, [r7, #16]
 8014520:	2b00      	cmp	r3, #0
 8014522:	d112      	bne.n	801454a <prvProcessExpiredTimer+0x82>
 8014524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014528:	f383 8811 	msr	BASEPRI, r3
 801452c:	f3bf 8f6f 	isb	sy
 8014530:	f3bf 8f4f 	dsb	sy
 8014534:	60fb      	str	r3, [r7, #12]
 8014536:	e7fe      	b.n	8014536 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014538:	697b      	ldr	r3, [r7, #20]
 801453a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801453e:	f023 0301 	bic.w	r3, r3, #1
 8014542:	b2da      	uxtb	r2, r3
 8014544:	697b      	ldr	r3, [r7, #20]
 8014546:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801454a:	697b      	ldr	r3, [r7, #20]
 801454c:	6a1b      	ldr	r3, [r3, #32]
 801454e:	6978      	ldr	r0, [r7, #20]
 8014550:	4798      	blx	r3
}
 8014552:	bf00      	nop
 8014554:	3718      	adds	r7, #24
 8014556:	46bd      	mov	sp, r7
 8014558:	bd80      	pop	{r7, pc}
 801455a:	bf00      	nop
 801455c:	200274ac 	.word	0x200274ac

08014560 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8014560:	b580      	push	{r7, lr}
 8014562:	b084      	sub	sp, #16
 8014564:	af00      	add	r7, sp, #0
 8014566:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8014568:	f107 0308 	add.w	r3, r7, #8
 801456c:	4618      	mov	r0, r3
 801456e:	f000 f857 	bl	8014620 <prvGetNextExpireTime>
 8014572:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8014574:	68bb      	ldr	r3, [r7, #8]
 8014576:	4619      	mov	r1, r3
 8014578:	68f8      	ldr	r0, [r7, #12]
 801457a:	f000 f803 	bl	8014584 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801457e:	f000 f8d5 	bl	801472c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8014582:	e7f1      	b.n	8014568 <prvTimerTask+0x8>

08014584 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8014584:	b580      	push	{r7, lr}
 8014586:	b084      	sub	sp, #16
 8014588:	af00      	add	r7, sp, #0
 801458a:	6078      	str	r0, [r7, #4]
 801458c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801458e:	f7fe fe37 	bl	8013200 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8014592:	f107 0308 	add.w	r3, r7, #8
 8014596:	4618      	mov	r0, r3
 8014598:	f000 f866 	bl	8014668 <prvSampleTimeNow>
 801459c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801459e:	68bb      	ldr	r3, [r7, #8]
 80145a0:	2b00      	cmp	r3, #0
 80145a2:	d130      	bne.n	8014606 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80145a4:	683b      	ldr	r3, [r7, #0]
 80145a6:	2b00      	cmp	r3, #0
 80145a8:	d10a      	bne.n	80145c0 <prvProcessTimerOrBlockTask+0x3c>
 80145aa:	687a      	ldr	r2, [r7, #4]
 80145ac:	68fb      	ldr	r3, [r7, #12]
 80145ae:	429a      	cmp	r2, r3
 80145b0:	d806      	bhi.n	80145c0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80145b2:	f7fe fe6b 	bl	801328c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80145b6:	68f9      	ldr	r1, [r7, #12]
 80145b8:	6878      	ldr	r0, [r7, #4]
 80145ba:	f7ff ff85 	bl	80144c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80145be:	e024      	b.n	801460a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80145c0:	683b      	ldr	r3, [r7, #0]
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	d008      	beq.n	80145d8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80145c6:	4b13      	ldr	r3, [pc, #76]	; (8014614 <prvProcessTimerOrBlockTask+0x90>)
 80145c8:	681b      	ldr	r3, [r3, #0]
 80145ca:	681b      	ldr	r3, [r3, #0]
 80145cc:	2b00      	cmp	r3, #0
 80145ce:	d101      	bne.n	80145d4 <prvProcessTimerOrBlockTask+0x50>
 80145d0:	2301      	movs	r3, #1
 80145d2:	e000      	b.n	80145d6 <prvProcessTimerOrBlockTask+0x52>
 80145d4:	2300      	movs	r3, #0
 80145d6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80145d8:	4b0f      	ldr	r3, [pc, #60]	; (8014618 <prvProcessTimerOrBlockTask+0x94>)
 80145da:	6818      	ldr	r0, [r3, #0]
 80145dc:	687a      	ldr	r2, [r7, #4]
 80145de:	68fb      	ldr	r3, [r7, #12]
 80145e0:	1ad3      	subs	r3, r2, r3
 80145e2:	683a      	ldr	r2, [r7, #0]
 80145e4:	4619      	mov	r1, r3
 80145e6:	f7fe fb99 	bl	8012d1c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80145ea:	f7fe fe4f 	bl	801328c <xTaskResumeAll>
 80145ee:	4603      	mov	r3, r0
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	d10a      	bne.n	801460a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80145f4:	4b09      	ldr	r3, [pc, #36]	; (801461c <prvProcessTimerOrBlockTask+0x98>)
 80145f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80145fa:	601a      	str	r2, [r3, #0]
 80145fc:	f3bf 8f4f 	dsb	sy
 8014600:	f3bf 8f6f 	isb	sy
}
 8014604:	e001      	b.n	801460a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8014606:	f7fe fe41 	bl	801328c <xTaskResumeAll>
}
 801460a:	bf00      	nop
 801460c:	3710      	adds	r7, #16
 801460e:	46bd      	mov	sp, r7
 8014610:	bd80      	pop	{r7, pc}
 8014612:	bf00      	nop
 8014614:	200274b0 	.word	0x200274b0
 8014618:	200274b4 	.word	0x200274b4
 801461c:	e000ed04 	.word	0xe000ed04

08014620 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8014620:	b480      	push	{r7}
 8014622:	b085      	sub	sp, #20
 8014624:	af00      	add	r7, sp, #0
 8014626:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8014628:	4b0e      	ldr	r3, [pc, #56]	; (8014664 <prvGetNextExpireTime+0x44>)
 801462a:	681b      	ldr	r3, [r3, #0]
 801462c:	681b      	ldr	r3, [r3, #0]
 801462e:	2b00      	cmp	r3, #0
 8014630:	d101      	bne.n	8014636 <prvGetNextExpireTime+0x16>
 8014632:	2201      	movs	r2, #1
 8014634:	e000      	b.n	8014638 <prvGetNextExpireTime+0x18>
 8014636:	2200      	movs	r2, #0
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	681b      	ldr	r3, [r3, #0]
 8014640:	2b00      	cmp	r3, #0
 8014642:	d105      	bne.n	8014650 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014644:	4b07      	ldr	r3, [pc, #28]	; (8014664 <prvGetNextExpireTime+0x44>)
 8014646:	681b      	ldr	r3, [r3, #0]
 8014648:	68db      	ldr	r3, [r3, #12]
 801464a:	681b      	ldr	r3, [r3, #0]
 801464c:	60fb      	str	r3, [r7, #12]
 801464e:	e001      	b.n	8014654 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8014650:	2300      	movs	r3, #0
 8014652:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8014654:	68fb      	ldr	r3, [r7, #12]
}
 8014656:	4618      	mov	r0, r3
 8014658:	3714      	adds	r7, #20
 801465a:	46bd      	mov	sp, r7
 801465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014660:	4770      	bx	lr
 8014662:	bf00      	nop
 8014664:	200274ac 	.word	0x200274ac

08014668 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8014668:	b580      	push	{r7, lr}
 801466a:	b084      	sub	sp, #16
 801466c:	af00      	add	r7, sp, #0
 801466e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8014670:	f7fe fea8 	bl	80133c4 <xTaskGetTickCount>
 8014674:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8014676:	4b0b      	ldr	r3, [pc, #44]	; (80146a4 <prvSampleTimeNow+0x3c>)
 8014678:	681b      	ldr	r3, [r3, #0]
 801467a:	68fa      	ldr	r2, [r7, #12]
 801467c:	429a      	cmp	r2, r3
 801467e:	d205      	bcs.n	801468c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8014680:	f000 f930 	bl	80148e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	2201      	movs	r2, #1
 8014688:	601a      	str	r2, [r3, #0]
 801468a:	e002      	b.n	8014692 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	2200      	movs	r2, #0
 8014690:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8014692:	4a04      	ldr	r2, [pc, #16]	; (80146a4 <prvSampleTimeNow+0x3c>)
 8014694:	68fb      	ldr	r3, [r7, #12]
 8014696:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8014698:	68fb      	ldr	r3, [r7, #12]
}
 801469a:	4618      	mov	r0, r3
 801469c:	3710      	adds	r7, #16
 801469e:	46bd      	mov	sp, r7
 80146a0:	bd80      	pop	{r7, pc}
 80146a2:	bf00      	nop
 80146a4:	200274bc 	.word	0x200274bc

080146a8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80146a8:	b580      	push	{r7, lr}
 80146aa:	b086      	sub	sp, #24
 80146ac:	af00      	add	r7, sp, #0
 80146ae:	60f8      	str	r0, [r7, #12]
 80146b0:	60b9      	str	r1, [r7, #8]
 80146b2:	607a      	str	r2, [r7, #4]
 80146b4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80146b6:	2300      	movs	r3, #0
 80146b8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80146ba:	68fb      	ldr	r3, [r7, #12]
 80146bc:	68ba      	ldr	r2, [r7, #8]
 80146be:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80146c0:	68fb      	ldr	r3, [r7, #12]
 80146c2:	68fa      	ldr	r2, [r7, #12]
 80146c4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80146c6:	68ba      	ldr	r2, [r7, #8]
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	429a      	cmp	r2, r3
 80146cc:	d812      	bhi.n	80146f4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80146ce:	687a      	ldr	r2, [r7, #4]
 80146d0:	683b      	ldr	r3, [r7, #0]
 80146d2:	1ad2      	subs	r2, r2, r3
 80146d4:	68fb      	ldr	r3, [r7, #12]
 80146d6:	699b      	ldr	r3, [r3, #24]
 80146d8:	429a      	cmp	r2, r3
 80146da:	d302      	bcc.n	80146e2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80146dc:	2301      	movs	r3, #1
 80146de:	617b      	str	r3, [r7, #20]
 80146e0:	e01b      	b.n	801471a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80146e2:	4b10      	ldr	r3, [pc, #64]	; (8014724 <prvInsertTimerInActiveList+0x7c>)
 80146e4:	681a      	ldr	r2, [r3, #0]
 80146e6:	68fb      	ldr	r3, [r7, #12]
 80146e8:	3304      	adds	r3, #4
 80146ea:	4619      	mov	r1, r3
 80146ec:	4610      	mov	r0, r2
 80146ee:	f7fd f806 	bl	80116fe <vListInsert>
 80146f2:	e012      	b.n	801471a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80146f4:	687a      	ldr	r2, [r7, #4]
 80146f6:	683b      	ldr	r3, [r7, #0]
 80146f8:	429a      	cmp	r2, r3
 80146fa:	d206      	bcs.n	801470a <prvInsertTimerInActiveList+0x62>
 80146fc:	68ba      	ldr	r2, [r7, #8]
 80146fe:	683b      	ldr	r3, [r7, #0]
 8014700:	429a      	cmp	r2, r3
 8014702:	d302      	bcc.n	801470a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8014704:	2301      	movs	r3, #1
 8014706:	617b      	str	r3, [r7, #20]
 8014708:	e007      	b.n	801471a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801470a:	4b07      	ldr	r3, [pc, #28]	; (8014728 <prvInsertTimerInActiveList+0x80>)
 801470c:	681a      	ldr	r2, [r3, #0]
 801470e:	68fb      	ldr	r3, [r7, #12]
 8014710:	3304      	adds	r3, #4
 8014712:	4619      	mov	r1, r3
 8014714:	4610      	mov	r0, r2
 8014716:	f7fc fff2 	bl	80116fe <vListInsert>
		}
	}

	return xProcessTimerNow;
 801471a:	697b      	ldr	r3, [r7, #20]
}
 801471c:	4618      	mov	r0, r3
 801471e:	3718      	adds	r7, #24
 8014720:	46bd      	mov	sp, r7
 8014722:	bd80      	pop	{r7, pc}
 8014724:	200274b0 	.word	0x200274b0
 8014728:	200274ac 	.word	0x200274ac

0801472c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801472c:	b580      	push	{r7, lr}
 801472e:	b08e      	sub	sp, #56	; 0x38
 8014730:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8014732:	e0c6      	b.n	80148c2 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	2b00      	cmp	r3, #0
 8014738:	da17      	bge.n	801476a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801473a:	1d3b      	adds	r3, r7, #4
 801473c:	3304      	adds	r3, #4
 801473e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8014740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014742:	2b00      	cmp	r3, #0
 8014744:	d109      	bne.n	801475a <prvProcessReceivedCommands+0x2e>
 8014746:	f04f 0350 	mov.w	r3, #80	; 0x50
 801474a:	f383 8811 	msr	BASEPRI, r3
 801474e:	f3bf 8f6f 	isb	sy
 8014752:	f3bf 8f4f 	dsb	sy
 8014756:	61fb      	str	r3, [r7, #28]
 8014758:	e7fe      	b.n	8014758 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801475a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801475c:	681b      	ldr	r3, [r3, #0]
 801475e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014760:	6850      	ldr	r0, [r2, #4]
 8014762:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014764:	6892      	ldr	r2, [r2, #8]
 8014766:	4611      	mov	r1, r2
 8014768:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	2b00      	cmp	r3, #0
 801476e:	f2c0 80a7 	blt.w	80148c0 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8014772:	68fb      	ldr	r3, [r7, #12]
 8014774:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8014776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014778:	695b      	ldr	r3, [r3, #20]
 801477a:	2b00      	cmp	r3, #0
 801477c:	d004      	beq.n	8014788 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801477e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014780:	3304      	adds	r3, #4
 8014782:	4618      	mov	r0, r3
 8014784:	f7fc fff4 	bl	8011770 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8014788:	463b      	mov	r3, r7
 801478a:	4618      	mov	r0, r3
 801478c:	f7ff ff6c 	bl	8014668 <prvSampleTimeNow>
 8014790:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	2b09      	cmp	r3, #9
 8014796:	f200 8094 	bhi.w	80148c2 <prvProcessReceivedCommands+0x196>
 801479a:	a201      	add	r2, pc, #4	; (adr r2, 80147a0 <prvProcessReceivedCommands+0x74>)
 801479c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80147a0:	080147c9 	.word	0x080147c9
 80147a4:	080147c9 	.word	0x080147c9
 80147a8:	080147c9 	.word	0x080147c9
 80147ac:	0801483b 	.word	0x0801483b
 80147b0:	0801484f 	.word	0x0801484f
 80147b4:	08014897 	.word	0x08014897
 80147b8:	080147c9 	.word	0x080147c9
 80147bc:	080147c9 	.word	0x080147c9
 80147c0:	0801483b 	.word	0x0801483b
 80147c4:	0801484f 	.word	0x0801484f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80147c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80147ce:	f043 0301 	orr.w	r3, r3, #1
 80147d2:	b2da      	uxtb	r2, r3
 80147d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80147da:	68ba      	ldr	r2, [r7, #8]
 80147dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147de:	699b      	ldr	r3, [r3, #24]
 80147e0:	18d1      	adds	r1, r2, r3
 80147e2:	68bb      	ldr	r3, [r7, #8]
 80147e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80147e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80147e8:	f7ff ff5e 	bl	80146a8 <prvInsertTimerInActiveList>
 80147ec:	4603      	mov	r3, r0
 80147ee:	2b00      	cmp	r3, #0
 80147f0:	d067      	beq.n	80148c2 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80147f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147f4:	6a1b      	ldr	r3, [r3, #32]
 80147f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80147f8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80147fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014800:	f003 0304 	and.w	r3, r3, #4
 8014804:	2b00      	cmp	r3, #0
 8014806:	d05c      	beq.n	80148c2 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8014808:	68ba      	ldr	r2, [r7, #8]
 801480a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801480c:	699b      	ldr	r3, [r3, #24]
 801480e:	441a      	add	r2, r3
 8014810:	2300      	movs	r3, #0
 8014812:	9300      	str	r3, [sp, #0]
 8014814:	2300      	movs	r3, #0
 8014816:	2100      	movs	r1, #0
 8014818:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801481a:	f7ff fe09 	bl	8014430 <xTimerGenericCommand>
 801481e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8014820:	6a3b      	ldr	r3, [r7, #32]
 8014822:	2b00      	cmp	r3, #0
 8014824:	d14d      	bne.n	80148c2 <prvProcessReceivedCommands+0x196>
 8014826:	f04f 0350 	mov.w	r3, #80	; 0x50
 801482a:	f383 8811 	msr	BASEPRI, r3
 801482e:	f3bf 8f6f 	isb	sy
 8014832:	f3bf 8f4f 	dsb	sy
 8014836:	61bb      	str	r3, [r7, #24]
 8014838:	e7fe      	b.n	8014838 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801483a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801483c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014840:	f023 0301 	bic.w	r3, r3, #1
 8014844:	b2da      	uxtb	r2, r3
 8014846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014848:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801484c:	e039      	b.n	80148c2 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801484e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014850:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014854:	f043 0301 	orr.w	r3, r3, #1
 8014858:	b2da      	uxtb	r2, r3
 801485a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801485c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8014860:	68ba      	ldr	r2, [r7, #8]
 8014862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014864:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8014866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014868:	699b      	ldr	r3, [r3, #24]
 801486a:	2b00      	cmp	r3, #0
 801486c:	d109      	bne.n	8014882 <prvProcessReceivedCommands+0x156>
 801486e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014872:	f383 8811 	msr	BASEPRI, r3
 8014876:	f3bf 8f6f 	isb	sy
 801487a:	f3bf 8f4f 	dsb	sy
 801487e:	617b      	str	r3, [r7, #20]
 8014880:	e7fe      	b.n	8014880 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8014882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014884:	699a      	ldr	r2, [r3, #24]
 8014886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014888:	18d1      	adds	r1, r2, r3
 801488a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801488c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801488e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014890:	f7ff ff0a 	bl	80146a8 <prvInsertTimerInActiveList>
					break;
 8014894:	e015      	b.n	80148c2 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8014896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014898:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801489c:	f003 0302 	and.w	r3, r3, #2
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	d103      	bne.n	80148ac <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 80148a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80148a6:	f7fc fdc3 	bl	8011430 <vPortFree>
 80148aa:	e00a      	b.n	80148c2 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80148ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80148b2:	f023 0301 	bic.w	r3, r3, #1
 80148b6:	b2da      	uxtb	r2, r3
 80148b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80148be:	e000      	b.n	80148c2 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80148c0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80148c2:	4b07      	ldr	r3, [pc, #28]	; (80148e0 <prvProcessReceivedCommands+0x1b4>)
 80148c4:	681b      	ldr	r3, [r3, #0]
 80148c6:	1d39      	adds	r1, r7, #4
 80148c8:	2200      	movs	r2, #0
 80148ca:	4618      	mov	r0, r3
 80148cc:	f7fd fe28 	bl	8012520 <xQueueReceive>
 80148d0:	4603      	mov	r3, r0
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	f47f af2e 	bne.w	8014734 <prvProcessReceivedCommands+0x8>
	}
}
 80148d8:	bf00      	nop
 80148da:	3730      	adds	r7, #48	; 0x30
 80148dc:	46bd      	mov	sp, r7
 80148de:	bd80      	pop	{r7, pc}
 80148e0:	200274b4 	.word	0x200274b4

080148e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80148e4:	b580      	push	{r7, lr}
 80148e6:	b088      	sub	sp, #32
 80148e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80148ea:	e047      	b.n	801497c <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80148ec:	4b2d      	ldr	r3, [pc, #180]	; (80149a4 <prvSwitchTimerLists+0xc0>)
 80148ee:	681b      	ldr	r3, [r3, #0]
 80148f0:	68db      	ldr	r3, [r3, #12]
 80148f2:	681b      	ldr	r3, [r3, #0]
 80148f4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80148f6:	4b2b      	ldr	r3, [pc, #172]	; (80149a4 <prvSwitchTimerLists+0xc0>)
 80148f8:	681b      	ldr	r3, [r3, #0]
 80148fa:	68db      	ldr	r3, [r3, #12]
 80148fc:	68db      	ldr	r3, [r3, #12]
 80148fe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014900:	68fb      	ldr	r3, [r7, #12]
 8014902:	3304      	adds	r3, #4
 8014904:	4618      	mov	r0, r3
 8014906:	f7fc ff33 	bl	8011770 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801490a:	68fb      	ldr	r3, [r7, #12]
 801490c:	6a1b      	ldr	r3, [r3, #32]
 801490e:	68f8      	ldr	r0, [r7, #12]
 8014910:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014912:	68fb      	ldr	r3, [r7, #12]
 8014914:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014918:	f003 0304 	and.w	r3, r3, #4
 801491c:	2b00      	cmp	r3, #0
 801491e:	d02d      	beq.n	801497c <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8014920:	68fb      	ldr	r3, [r7, #12]
 8014922:	699b      	ldr	r3, [r3, #24]
 8014924:	693a      	ldr	r2, [r7, #16]
 8014926:	4413      	add	r3, r2
 8014928:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801492a:	68ba      	ldr	r2, [r7, #8]
 801492c:	693b      	ldr	r3, [r7, #16]
 801492e:	429a      	cmp	r2, r3
 8014930:	d90e      	bls.n	8014950 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8014932:	68fb      	ldr	r3, [r7, #12]
 8014934:	68ba      	ldr	r2, [r7, #8]
 8014936:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014938:	68fb      	ldr	r3, [r7, #12]
 801493a:	68fa      	ldr	r2, [r7, #12]
 801493c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801493e:	4b19      	ldr	r3, [pc, #100]	; (80149a4 <prvSwitchTimerLists+0xc0>)
 8014940:	681a      	ldr	r2, [r3, #0]
 8014942:	68fb      	ldr	r3, [r7, #12]
 8014944:	3304      	adds	r3, #4
 8014946:	4619      	mov	r1, r3
 8014948:	4610      	mov	r0, r2
 801494a:	f7fc fed8 	bl	80116fe <vListInsert>
 801494e:	e015      	b.n	801497c <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014950:	2300      	movs	r3, #0
 8014952:	9300      	str	r3, [sp, #0]
 8014954:	2300      	movs	r3, #0
 8014956:	693a      	ldr	r2, [r7, #16]
 8014958:	2100      	movs	r1, #0
 801495a:	68f8      	ldr	r0, [r7, #12]
 801495c:	f7ff fd68 	bl	8014430 <xTimerGenericCommand>
 8014960:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	2b00      	cmp	r3, #0
 8014966:	d109      	bne.n	801497c <prvSwitchTimerLists+0x98>
 8014968:	f04f 0350 	mov.w	r3, #80	; 0x50
 801496c:	f383 8811 	msr	BASEPRI, r3
 8014970:	f3bf 8f6f 	isb	sy
 8014974:	f3bf 8f4f 	dsb	sy
 8014978:	603b      	str	r3, [r7, #0]
 801497a:	e7fe      	b.n	801497a <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801497c:	4b09      	ldr	r3, [pc, #36]	; (80149a4 <prvSwitchTimerLists+0xc0>)
 801497e:	681b      	ldr	r3, [r3, #0]
 8014980:	681b      	ldr	r3, [r3, #0]
 8014982:	2b00      	cmp	r3, #0
 8014984:	d1b2      	bne.n	80148ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8014986:	4b07      	ldr	r3, [pc, #28]	; (80149a4 <prvSwitchTimerLists+0xc0>)
 8014988:	681b      	ldr	r3, [r3, #0]
 801498a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801498c:	4b06      	ldr	r3, [pc, #24]	; (80149a8 <prvSwitchTimerLists+0xc4>)
 801498e:	681b      	ldr	r3, [r3, #0]
 8014990:	4a04      	ldr	r2, [pc, #16]	; (80149a4 <prvSwitchTimerLists+0xc0>)
 8014992:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8014994:	4a04      	ldr	r2, [pc, #16]	; (80149a8 <prvSwitchTimerLists+0xc4>)
 8014996:	697b      	ldr	r3, [r7, #20]
 8014998:	6013      	str	r3, [r2, #0]
}
 801499a:	bf00      	nop
 801499c:	3718      	adds	r7, #24
 801499e:	46bd      	mov	sp, r7
 80149a0:	bd80      	pop	{r7, pc}
 80149a2:	bf00      	nop
 80149a4:	200274ac 	.word	0x200274ac
 80149a8:	200274b0 	.word	0x200274b0

080149ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80149ac:	b580      	push	{r7, lr}
 80149ae:	b082      	sub	sp, #8
 80149b0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80149b2:	f7fd f82b 	bl	8011a0c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80149b6:	4b15      	ldr	r3, [pc, #84]	; (8014a0c <prvCheckForValidListAndQueue+0x60>)
 80149b8:	681b      	ldr	r3, [r3, #0]
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	d120      	bne.n	8014a00 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80149be:	4814      	ldr	r0, [pc, #80]	; (8014a10 <prvCheckForValidListAndQueue+0x64>)
 80149c0:	f7fc fe4c 	bl	801165c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80149c4:	4813      	ldr	r0, [pc, #76]	; (8014a14 <prvCheckForValidListAndQueue+0x68>)
 80149c6:	f7fc fe49 	bl	801165c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80149ca:	4b13      	ldr	r3, [pc, #76]	; (8014a18 <prvCheckForValidListAndQueue+0x6c>)
 80149cc:	4a10      	ldr	r2, [pc, #64]	; (8014a10 <prvCheckForValidListAndQueue+0x64>)
 80149ce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80149d0:	4b12      	ldr	r3, [pc, #72]	; (8014a1c <prvCheckForValidListAndQueue+0x70>)
 80149d2:	4a10      	ldr	r2, [pc, #64]	; (8014a14 <prvCheckForValidListAndQueue+0x68>)
 80149d4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80149d6:	2300      	movs	r3, #0
 80149d8:	9300      	str	r3, [sp, #0]
 80149da:	4b11      	ldr	r3, [pc, #68]	; (8014a20 <prvCheckForValidListAndQueue+0x74>)
 80149dc:	4a11      	ldr	r2, [pc, #68]	; (8014a24 <prvCheckForValidListAndQueue+0x78>)
 80149de:	2110      	movs	r1, #16
 80149e0:	200a      	movs	r0, #10
 80149e2:	f7fd f995 	bl	8011d10 <xQueueGenericCreateStatic>
 80149e6:	4602      	mov	r2, r0
 80149e8:	4b08      	ldr	r3, [pc, #32]	; (8014a0c <prvCheckForValidListAndQueue+0x60>)
 80149ea:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80149ec:	4b07      	ldr	r3, [pc, #28]	; (8014a0c <prvCheckForValidListAndQueue+0x60>)
 80149ee:	681b      	ldr	r3, [r3, #0]
 80149f0:	2b00      	cmp	r3, #0
 80149f2:	d005      	beq.n	8014a00 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80149f4:	4b05      	ldr	r3, [pc, #20]	; (8014a0c <prvCheckForValidListAndQueue+0x60>)
 80149f6:	681b      	ldr	r3, [r3, #0]
 80149f8:	490b      	ldr	r1, [pc, #44]	; (8014a28 <prvCheckForValidListAndQueue+0x7c>)
 80149fa:	4618      	mov	r0, r3
 80149fc:	f7fe f93c 	bl	8012c78 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014a00:	f7fd f832 	bl	8011a68 <vPortExitCritical>
}
 8014a04:	bf00      	nop
 8014a06:	46bd      	mov	sp, r7
 8014a08:	bd80      	pop	{r7, pc}
 8014a0a:	bf00      	nop
 8014a0c:	200274b4 	.word	0x200274b4
 8014a10:	20027484 	.word	0x20027484
 8014a14:	20027498 	.word	0x20027498
 8014a18:	200274ac 	.word	0x200274ac
 8014a1c:	200274b0 	.word	0x200274b0
 8014a20:	20027560 	.word	0x20027560
 8014a24:	200274c0 	.word	0x200274c0
 8014a28:	0801bd18 	.word	0x0801bd18

08014a2c <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 8014a2c:	b580      	push	{r7, lr}
 8014a2e:	b086      	sub	sp, #24
 8014a30:	af00      	add	r7, sp, #0
 8014a32:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	d109      	bne.n	8014a52 <xTimerIsTimerActive+0x26>
 8014a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a42:	f383 8811 	msr	BASEPRI, r3
 8014a46:	f3bf 8f6f 	isb	sy
 8014a4a:	f3bf 8f4f 	dsb	sy
 8014a4e:	60fb      	str	r3, [r7, #12]
 8014a50:	e7fe      	b.n	8014a50 <xTimerIsTimerActive+0x24>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 8014a52:	f7fc ffdb 	bl	8011a0c <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 8014a56:	693b      	ldr	r3, [r7, #16]
 8014a58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014a5c:	f003 0301 	and.w	r3, r3, #1
 8014a60:	2b00      	cmp	r3, #0
 8014a62:	d102      	bne.n	8014a6a <xTimerIsTimerActive+0x3e>
		{
			xReturn = pdFALSE;
 8014a64:	2300      	movs	r3, #0
 8014a66:	617b      	str	r3, [r7, #20]
 8014a68:	e001      	b.n	8014a6e <xTimerIsTimerActive+0x42>
		}
		else
		{
			xReturn = pdTRUE;
 8014a6a:	2301      	movs	r3, #1
 8014a6c:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8014a6e:	f7fc fffb 	bl	8011a68 <vPortExitCritical>

	return xReturn;
 8014a72:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 8014a74:	4618      	mov	r0, r3
 8014a76:	3718      	adds	r7, #24
 8014a78:	46bd      	mov	sp, r7
 8014a7a:	bd80      	pop	{r7, pc}

08014a7c <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8014a7c:	b580      	push	{r7, lr}
 8014a7e:	b086      	sub	sp, #24
 8014a80:	af00      	add	r7, sp, #0
 8014a82:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	d109      	bne.n	8014aa2 <pvTimerGetTimerID+0x26>
 8014a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a92:	f383 8811 	msr	BASEPRI, r3
 8014a96:	f3bf 8f6f 	isb	sy
 8014a9a:	f3bf 8f4f 	dsb	sy
 8014a9e:	60fb      	str	r3, [r7, #12]
 8014aa0:	e7fe      	b.n	8014aa0 <pvTimerGetTimerID+0x24>

	taskENTER_CRITICAL();
 8014aa2:	f7fc ffb3 	bl	8011a0c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8014aa6:	697b      	ldr	r3, [r7, #20]
 8014aa8:	69db      	ldr	r3, [r3, #28]
 8014aaa:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8014aac:	f7fc ffdc 	bl	8011a68 <vPortExitCritical>

	return pvReturn;
 8014ab0:	693b      	ldr	r3, [r7, #16]
}
 8014ab2:	4618      	mov	r0, r3
 8014ab4:	3718      	adds	r7, #24
 8014ab6:	46bd      	mov	sp, r7
 8014ab8:	bd80      	pop	{r7, pc}

08014aba <otCoapHeaderInit>:
extern otCoapRequestHandler defaultCoapRequestHandlerCb;

#if OPENTHREAD_ENABLE_APPLICATION_COAP

void otCoapHeaderInit(otCoapHeader *aHeader, otCoapType aType, otCoapCode aCode)
{
 8014aba:	b580      	push	{r7, lr}
 8014abc:	b084      	sub	sp, #16
 8014abe:	af00      	add	r7, sp, #0
 8014ac0:	6078      	str	r0, [r7, #4]
 8014ac2:	460b      	mov	r3, r1
 8014ac4:	70fb      	strb	r3, [r7, #3]
 8014ac6:	4613      	mov	r3, r2
 8014ac8:	70bb      	strb	r3, [r7, #2]
    Pre_OtCmdProcessing();
 8014aca:	f004 fac5 	bl	8019058 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014ace:	f004 fa61 	bl	8018f94 <THREAD_Get_OTCmdPayloadBuffer>
 8014ad2:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_INIT;
 8014ad4:	68fb      	ldr	r3, [r7, #12]
 8014ad6:	2200      	movs	r2, #0
 8014ad8:	f062 0260 	orn	r2, r2, #96	; 0x60
 8014adc:	701a      	strb	r2, [r3, #0]
 8014ade:	2200      	movs	r2, #0
 8014ae0:	705a      	strb	r2, [r3, #1]
 8014ae2:	2200      	movs	r2, #0
 8014ae4:	709a      	strb	r2, [r3, #2]
 8014ae6:	2200      	movs	r2, #0
 8014ae8:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 8014aea:	68fb      	ldr	r3, [r7, #12]
 8014aec:	2200      	movs	r2, #0
 8014aee:	f042 0203 	orr.w	r2, r2, #3
 8014af2:	711a      	strb	r2, [r3, #4]
 8014af4:	2200      	movs	r2, #0
 8014af6:	715a      	strb	r2, [r3, #5]
 8014af8:	2200      	movs	r2, #0
 8014afa:	719a      	strb	r2, [r3, #6]
 8014afc:	2200      	movs	r2, #0
 8014afe:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8014b00:	687a      	ldr	r2, [r7, #4]
 8014b02:	68fb      	ldr	r3, [r7, #12]
 8014b04:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = aType;
 8014b06:	78fa      	ldrb	r2, [r7, #3]
 8014b08:	68fb      	ldr	r3, [r7, #12]
 8014b0a:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (otCoapCode) aCode;
 8014b0c:	78ba      	ldrb	r2, [r7, #2]
 8014b0e:	68fb      	ldr	r3, [r7, #12]
 8014b10:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 8014b12:	f004 fa63 	bl	8018fdc <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014b16:	f004 fa49 	bl	8018fac <THREAD_Get_OTCmdRspPayloadBuffer>
 8014b1a:	60f8      	str	r0, [r7, #12]
}
 8014b1c:	bf00      	nop
 8014b1e:	3710      	adds	r7, #16
 8014b20:	46bd      	mov	sp, r7
 8014b22:	bd80      	pop	{r7, pc}

08014b24 <otCoapHeaderSetToken>:

void otCoapHeaderSetToken(otCoapHeader *aHeader, const uint8_t *aToken, uint8_t aTokenLength)
{
 8014b24:	b580      	push	{r7, lr}
 8014b26:	b086      	sub	sp, #24
 8014b28:	af00      	add	r7, sp, #0
 8014b2a:	60f8      	str	r0, [r7, #12]
 8014b2c:	60b9      	str	r1, [r7, #8]
 8014b2e:	4613      	mov	r3, r2
 8014b30:	71fb      	strb	r3, [r7, #7]
    Pre_OtCmdProcessing();
 8014b32:	f004 fa91 	bl	8019058 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014b36:	f004 fa2d 	bl	8018f94 <THREAD_Get_OTCmdPayloadBuffer>
 8014b3a:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_TOKEN;
 8014b3c:	697b      	ldr	r3, [r7, #20]
 8014b3e:	2200      	movs	r2, #0
 8014b40:	f062 025f 	orn	r2, r2, #95	; 0x5f
 8014b44:	701a      	strb	r2, [r3, #0]
 8014b46:	2200      	movs	r2, #0
 8014b48:	705a      	strb	r2, [r3, #1]
 8014b4a:	2200      	movs	r2, #0
 8014b4c:	709a      	strb	r2, [r3, #2]
 8014b4e:	2200      	movs	r2, #0
 8014b50:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 8014b52:	697b      	ldr	r3, [r7, #20]
 8014b54:	2200      	movs	r2, #0
 8014b56:	f042 0203 	orr.w	r2, r2, #3
 8014b5a:	711a      	strb	r2, [r3, #4]
 8014b5c:	2200      	movs	r2, #0
 8014b5e:	715a      	strb	r2, [r3, #5]
 8014b60:	2200      	movs	r2, #0
 8014b62:	719a      	strb	r2, [r3, #6]
 8014b64:	2200      	movs	r2, #0
 8014b66:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8014b68:	68fa      	ldr	r2, [r7, #12]
 8014b6a:	697b      	ldr	r3, [r7, #20]
 8014b6c:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aToken;
 8014b6e:	68ba      	ldr	r2, [r7, #8]
 8014b70:	697b      	ldr	r3, [r7, #20]
 8014b72:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (otCoapCode) aTokenLength;
 8014b74:	79fa      	ldrb	r2, [r7, #7]
 8014b76:	697b      	ldr	r3, [r7, #20]
 8014b78:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 8014b7a:	f004 fa2f 	bl	8018fdc <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014b7e:	f004 fa15 	bl	8018fac <THREAD_Get_OTCmdRspPayloadBuffer>
 8014b82:	6178      	str	r0, [r7, #20]
}
 8014b84:	bf00      	nop
 8014b86:	3718      	adds	r7, #24
 8014b88:	46bd      	mov	sp, r7
 8014b8a:	bd80      	pop	{r7, pc}

08014b8c <otCoapHeaderGenerateToken>:

void otCoapHeaderGenerateToken(otCoapHeader *aHeader, uint8_t aTokenLength)
{
 8014b8c:	b580      	push	{r7, lr}
 8014b8e:	b084      	sub	sp, #16
 8014b90:	af00      	add	r7, sp, #0
 8014b92:	6078      	str	r0, [r7, #4]
 8014b94:	460b      	mov	r3, r1
 8014b96:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 8014b98:	f004 fa5e 	bl	8019058 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014b9c:	f004 f9fa 	bl	8018f94 <THREAD_Get_OTCmdPayloadBuffer>
 8014ba0:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GENERATE_TOKEN;
 8014ba2:	68fb      	ldr	r3, [r7, #12]
 8014ba4:	2200      	movs	r2, #0
 8014ba6:	f062 025e 	orn	r2, r2, #94	; 0x5e
 8014baa:	701a      	strb	r2, [r3, #0]
 8014bac:	2200      	movs	r2, #0
 8014bae:	705a      	strb	r2, [r3, #1]
 8014bb0:	2200      	movs	r2, #0
 8014bb2:	709a      	strb	r2, [r3, #2]
 8014bb4:	2200      	movs	r2, #0
 8014bb6:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 8014bb8:	68fb      	ldr	r3, [r7, #12]
 8014bba:	2200      	movs	r2, #0
 8014bbc:	f042 0202 	orr.w	r2, r2, #2
 8014bc0:	711a      	strb	r2, [r3, #4]
 8014bc2:	2200      	movs	r2, #0
 8014bc4:	715a      	strb	r2, [r3, #5]
 8014bc6:	2200      	movs	r2, #0
 8014bc8:	719a      	strb	r2, [r3, #6]
 8014bca:	2200      	movs	r2, #0
 8014bcc:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8014bce:	687a      	ldr	r2, [r7, #4]
 8014bd0:	68fb      	ldr	r3, [r7, #12]
 8014bd2:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aTokenLength;
 8014bd4:	78fa      	ldrb	r2, [r7, #3]
 8014bd6:	68fb      	ldr	r3, [r7, #12]
 8014bd8:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 8014bda:	f004 f9ff 	bl	8018fdc <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014bde:	f004 f9e5 	bl	8018fac <THREAD_Get_OTCmdRspPayloadBuffer>
 8014be2:	60f8      	str	r0, [r7, #12]
}
 8014be4:	bf00      	nop
 8014be6:	3710      	adds	r7, #16
 8014be8:	46bd      	mov	sp, r7
 8014bea:	bd80      	pop	{r7, pc}

08014bec <otCoapHeaderAppendContentFormatOption>:

otError otCoapHeaderAppendContentFormatOption(otCoapHeader *aHeader, otCoapOptionContentFormat aContentFormat)
{
 8014bec:	b580      	push	{r7, lr}
 8014bee:	b084      	sub	sp, #16
 8014bf0:	af00      	add	r7, sp, #0
 8014bf2:	6078      	str	r0, [r7, #4]
 8014bf4:	460b      	mov	r3, r1
 8014bf6:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 8014bf8:	f004 fa2e 	bl	8019058 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014bfc:	f004 f9ca 	bl	8018f94 <THREAD_Get_OTCmdPayloadBuffer>
 8014c00:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_APPEND_CONTENT_FORMAT_OPTION;
 8014c02:	68fb      	ldr	r3, [r7, #12]
 8014c04:	2200      	movs	r2, #0
 8014c06:	f062 025d 	orn	r2, r2, #93	; 0x5d
 8014c0a:	701a      	strb	r2, [r3, #0]
 8014c0c:	2200      	movs	r2, #0
 8014c0e:	705a      	strb	r2, [r3, #1]
 8014c10:	2200      	movs	r2, #0
 8014c12:	709a      	strb	r2, [r3, #2]
 8014c14:	2200      	movs	r2, #0
 8014c16:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 8014c18:	68fb      	ldr	r3, [r7, #12]
 8014c1a:	2200      	movs	r2, #0
 8014c1c:	f042 0202 	orr.w	r2, r2, #2
 8014c20:	711a      	strb	r2, [r3, #4]
 8014c22:	2200      	movs	r2, #0
 8014c24:	715a      	strb	r2, [r3, #5]
 8014c26:	2200      	movs	r2, #0
 8014c28:	719a      	strb	r2, [r3, #6]
 8014c2a:	2200      	movs	r2, #0
 8014c2c:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8014c2e:	687a      	ldr	r2, [r7, #4]
 8014c30:	68fb      	ldr	r3, [r7, #12]
 8014c32:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aContentFormat;
 8014c34:	78fa      	ldrb	r2, [r7, #3]
 8014c36:	68fb      	ldr	r3, [r7, #12]
 8014c38:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 8014c3a:	f004 f9cf 	bl	8018fdc <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014c3e:	f004 f9b5 	bl	8018fac <THREAD_Get_OTCmdRspPayloadBuffer>
 8014c42:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 8014c44:	68fb      	ldr	r3, [r7, #12]
 8014c46:	689b      	ldr	r3, [r3, #8]
 8014c48:	b2db      	uxtb	r3, r3
}
 8014c4a:	4618      	mov	r0, r3
 8014c4c:	3710      	adds	r7, #16
 8014c4e:	46bd      	mov	sp, r7
 8014c50:	bd80      	pop	{r7, pc}

08014c52 <otCoapHeaderAppendUriPathOptions>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError) p_ot_req->Data[0];
}

otError otCoapHeaderAppendUriPathOptions(otCoapHeader *aHeader, const char *aUriPath)
{
 8014c52:	b580      	push	{r7, lr}
 8014c54:	b084      	sub	sp, #16
 8014c56:	af00      	add	r7, sp, #0
 8014c58:	6078      	str	r0, [r7, #4]
 8014c5a:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 8014c5c:	f004 f9fc 	bl	8019058 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014c60:	f004 f998 	bl	8018f94 <THREAD_Get_OTCmdPayloadBuffer>
 8014c64:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_APPEND_URI_PATH_OPTIONS;
 8014c66:	68fb      	ldr	r3, [r7, #12]
 8014c68:	2200      	movs	r2, #0
 8014c6a:	f062 0250 	orn	r2, r2, #80	; 0x50
 8014c6e:	701a      	strb	r2, [r3, #0]
 8014c70:	2200      	movs	r2, #0
 8014c72:	705a      	strb	r2, [r3, #1]
 8014c74:	2200      	movs	r2, #0
 8014c76:	709a      	strb	r2, [r3, #2]
 8014c78:	2200      	movs	r2, #0
 8014c7a:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 8014c7c:	68fb      	ldr	r3, [r7, #12]
 8014c7e:	2200      	movs	r2, #0
 8014c80:	f042 0202 	orr.w	r2, r2, #2
 8014c84:	711a      	strb	r2, [r3, #4]
 8014c86:	2200      	movs	r2, #0
 8014c88:	715a      	strb	r2, [r3, #5]
 8014c8a:	2200      	movs	r2, #0
 8014c8c:	719a      	strb	r2, [r3, #6]
 8014c8e:	2200      	movs	r2, #0
 8014c90:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8014c92:	687a      	ldr	r2, [r7, #4]
 8014c94:	68fb      	ldr	r3, [r7, #12]
 8014c96:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aUriPath;
 8014c98:	683a      	ldr	r2, [r7, #0]
 8014c9a:	68fb      	ldr	r3, [r7, #12]
 8014c9c:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 8014c9e:	f004 f99d 	bl	8018fdc <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014ca2:	f004 f983 	bl	8018fac <THREAD_Get_OTCmdRspPayloadBuffer>
 8014ca6:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 8014ca8:	68fb      	ldr	r3, [r7, #12]
 8014caa:	689b      	ldr	r3, [r3, #8]
 8014cac:	b2db      	uxtb	r3, r3
}
 8014cae:	4618      	mov	r0, r3
 8014cb0:	3710      	adds	r7, #16
 8014cb2:	46bd      	mov	sp, r7
 8014cb4:	bd80      	pop	{r7, pc}

08014cb6 <otCoapHeaderSetPayloadMarker>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError) p_ot_req->Data[0];
}

otError otCoapHeaderSetPayloadMarker(otCoapHeader *aHeader)
{
 8014cb6:	b580      	push	{r7, lr}
 8014cb8:	b084      	sub	sp, #16
 8014cba:	af00      	add	r7, sp, #0
 8014cbc:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8014cbe:	f004 f9cb 	bl	8019058 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014cc2:	f004 f967 	bl	8018f94 <THREAD_Get_OTCmdPayloadBuffer>
 8014cc6:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_PAYLOAD_MARKER;
 8014cc8:	68fb      	ldr	r3, [r7, #12]
 8014cca:	2200      	movs	r2, #0
 8014ccc:	f062 024d 	orn	r2, r2, #77	; 0x4d
 8014cd0:	701a      	strb	r2, [r3, #0]
 8014cd2:	2200      	movs	r2, #0
 8014cd4:	705a      	strb	r2, [r3, #1]
 8014cd6:	2200      	movs	r2, #0
 8014cd8:	709a      	strb	r2, [r3, #2]
 8014cda:	2200      	movs	r2, #0
 8014cdc:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8014cde:	68fb      	ldr	r3, [r7, #12]
 8014ce0:	2200      	movs	r2, #0
 8014ce2:	f042 0201 	orr.w	r2, r2, #1
 8014ce6:	711a      	strb	r2, [r3, #4]
 8014ce8:	2200      	movs	r2, #0
 8014cea:	715a      	strb	r2, [r3, #5]
 8014cec:	2200      	movs	r2, #0
 8014cee:	719a      	strb	r2, [r3, #6]
 8014cf0:	2200      	movs	r2, #0
 8014cf2:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8014cf4:	687a      	ldr	r2, [r7, #4]
 8014cf6:	68fb      	ldr	r3, [r7, #12]
 8014cf8:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8014cfa:	f004 f96f 	bl	8018fdc <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014cfe:	f004 f955 	bl	8018fac <THREAD_Get_OTCmdRspPayloadBuffer>
 8014d02:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 8014d04:	68fb      	ldr	r3, [r7, #12]
 8014d06:	689b      	ldr	r3, [r3, #8]
 8014d08:	b2db      	uxtb	r3, r3
}
 8014d0a:	4618      	mov	r0, r3
 8014d0c:	3710      	adds	r7, #16
 8014d0e:	46bd      	mov	sp, r7
 8014d10:	bd80      	pop	{r7, pc}

08014d12 <otCoapHeaderSetMessageId>:

void otCoapHeaderSetMessageId(otCoapHeader *aHeader, uint16_t aMessageId)
{
 8014d12:	b580      	push	{r7, lr}
 8014d14:	b084      	sub	sp, #16
 8014d16:	af00      	add	r7, sp, #0
 8014d18:	6078      	str	r0, [r7, #4]
 8014d1a:	460b      	mov	r3, r1
 8014d1c:	807b      	strh	r3, [r7, #2]
    Pre_OtCmdProcessing();
 8014d1e:	f004 f99b 	bl	8019058 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014d22:	f004 f937 	bl	8018f94 <THREAD_Get_OTCmdPayloadBuffer>
 8014d26:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_MESSAGE_ID;
 8014d28:	68fb      	ldr	r3, [r7, #12]
 8014d2a:	2200      	movs	r2, #0
 8014d2c:	f062 0256 	orn	r2, r2, #86	; 0x56
 8014d30:	701a      	strb	r2, [r3, #0]
 8014d32:	2200      	movs	r2, #0
 8014d34:	705a      	strb	r2, [r3, #1]
 8014d36:	2200      	movs	r2, #0
 8014d38:	709a      	strb	r2, [r3, #2]
 8014d3a:	2200      	movs	r2, #0
 8014d3c:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 8014d3e:	68fb      	ldr	r3, [r7, #12]
 8014d40:	2200      	movs	r2, #0
 8014d42:	f042 0202 	orr.w	r2, r2, #2
 8014d46:	711a      	strb	r2, [r3, #4]
 8014d48:	2200      	movs	r2, #0
 8014d4a:	715a      	strb	r2, [r3, #5]
 8014d4c:	2200      	movs	r2, #0
 8014d4e:	719a      	strb	r2, [r3, #6]
 8014d50:	2200      	movs	r2, #0
 8014d52:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8014d54:	687a      	ldr	r2, [r7, #4]
 8014d56:	68fb      	ldr	r3, [r7, #12]
 8014d58:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint16_t ) aMessageId;
 8014d5a:	887a      	ldrh	r2, [r7, #2]
 8014d5c:	68fb      	ldr	r3, [r7, #12]
 8014d5e:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 8014d60:	f004 f93c 	bl	8018fdc <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014d64:	f004 f922 	bl	8018fac <THREAD_Get_OTCmdRspPayloadBuffer>
 8014d68:	60f8      	str	r0, [r7, #12]
}
 8014d6a:	bf00      	nop
 8014d6c:	3710      	adds	r7, #16
 8014d6e:	46bd      	mov	sp, r7
 8014d70:	bd80      	pop	{r7, pc}

08014d72 <otCoapHeaderGetType>:

otCoapType otCoapHeaderGetType(const otCoapHeader *aHeader)
{
 8014d72:	b580      	push	{r7, lr}
 8014d74:	b084      	sub	sp, #16
 8014d76:	af00      	add	r7, sp, #0
 8014d78:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8014d7a:	f004 f96d 	bl	8019058 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014d7e:	f004 f909 	bl	8018f94 <THREAD_Get_OTCmdPayloadBuffer>
 8014d82:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TYPE;
 8014d84:	68fb      	ldr	r3, [r7, #12]
 8014d86:	2200      	movs	r2, #0
 8014d88:	f062 0261 	orn	r2, r2, #97	; 0x61
 8014d8c:	701a      	strb	r2, [r3, #0]
 8014d8e:	2200      	movs	r2, #0
 8014d90:	705a      	strb	r2, [r3, #1]
 8014d92:	2200      	movs	r2, #0
 8014d94:	709a      	strb	r2, [r3, #2]
 8014d96:	2200      	movs	r2, #0
 8014d98:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8014d9a:	68fb      	ldr	r3, [r7, #12]
 8014d9c:	2200      	movs	r2, #0
 8014d9e:	f042 0201 	orr.w	r2, r2, #1
 8014da2:	711a      	strb	r2, [r3, #4]
 8014da4:	2200      	movs	r2, #0
 8014da6:	715a      	strb	r2, [r3, #5]
 8014da8:	2200      	movs	r2, #0
 8014daa:	719a      	strb	r2, [r3, #6]
 8014dac:	2200      	movs	r2, #0
 8014dae:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8014db0:	687a      	ldr	r2, [r7, #4]
 8014db2:	68fb      	ldr	r3, [r7, #12]
 8014db4:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8014db6:	f004 f911 	bl	8018fdc <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014dba:	f004 f8f7 	bl	8018fac <THREAD_Get_OTCmdRspPayloadBuffer>
 8014dbe:	60f8      	str	r0, [r7, #12]
    return (otCoapType)p_ot_req->Data[0];
 8014dc0:	68fb      	ldr	r3, [r7, #12]
 8014dc2:	689b      	ldr	r3, [r3, #8]
 8014dc4:	b2db      	uxtb	r3, r3
}
 8014dc6:	4618      	mov	r0, r3
 8014dc8:	3710      	adds	r7, #16
 8014dca:	46bd      	mov	sp, r7
 8014dcc:	bd80      	pop	{r7, pc}

08014dce <otCoapHeaderGetCode>:

otCoapCode otCoapHeaderGetCode(const otCoapHeader *aHeader)
{
 8014dce:	b580      	push	{r7, lr}
 8014dd0:	b084      	sub	sp, #16
 8014dd2:	af00      	add	r7, sp, #0
 8014dd4:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8014dd6:	f004 f93f 	bl	8019058 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014dda:	f004 f8db 	bl	8018f94 <THREAD_Get_OTCmdPayloadBuffer>
 8014dde:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_CODE;
 8014de0:	68fb      	ldr	r3, [r7, #12]
 8014de2:	2200      	movs	r2, #0
 8014de4:	f062 024c 	orn	r2, r2, #76	; 0x4c
 8014de8:	701a      	strb	r2, [r3, #0]
 8014dea:	2200      	movs	r2, #0
 8014dec:	705a      	strb	r2, [r3, #1]
 8014dee:	2200      	movs	r2, #0
 8014df0:	709a      	strb	r2, [r3, #2]
 8014df2:	2200      	movs	r2, #0
 8014df4:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8014df6:	68fb      	ldr	r3, [r7, #12]
 8014df8:	2200      	movs	r2, #0
 8014dfa:	f042 0201 	orr.w	r2, r2, #1
 8014dfe:	711a      	strb	r2, [r3, #4]
 8014e00:	2200      	movs	r2, #0
 8014e02:	715a      	strb	r2, [r3, #5]
 8014e04:	2200      	movs	r2, #0
 8014e06:	719a      	strb	r2, [r3, #6]
 8014e08:	2200      	movs	r2, #0
 8014e0a:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8014e0c:	687a      	ldr	r2, [r7, #4]
 8014e0e:	68fb      	ldr	r3, [r7, #12]
 8014e10:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8014e12:	f004 f8e3 	bl	8018fdc <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014e16:	f004 f8c9 	bl	8018fac <THREAD_Get_OTCmdRspPayloadBuffer>
 8014e1a:	60f8      	str	r0, [r7, #12]
    return (otCoapCode)p_ot_req->Data[0];
 8014e1c:	68fb      	ldr	r3, [r7, #12]
 8014e1e:	689b      	ldr	r3, [r3, #8]
 8014e20:	b2db      	uxtb	r3, r3
}
 8014e22:	4618      	mov	r0, r3
 8014e24:	3710      	adds	r7, #16
 8014e26:	46bd      	mov	sp, r7
 8014e28:	bd80      	pop	{r7, pc}

08014e2a <otCoapHeaderGetMessageId>:

uint16_t otCoapHeaderGetMessageId(const otCoapHeader *aHeader)
{
 8014e2a:	b580      	push	{r7, lr}
 8014e2c:	b084      	sub	sp, #16
 8014e2e:	af00      	add	r7, sp, #0
 8014e30:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8014e32:	f004 f911 	bl	8019058 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014e36:	f004 f8ad 	bl	8018f94 <THREAD_Get_OTCmdPayloadBuffer>
 8014e3a:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_MESSAGE_ID;
 8014e3c:	68fb      	ldr	r3, [r7, #12]
 8014e3e:	2200      	movs	r2, #0
 8014e40:	f062 0255 	orn	r2, r2, #85	; 0x55
 8014e44:	701a      	strb	r2, [r3, #0]
 8014e46:	2200      	movs	r2, #0
 8014e48:	705a      	strb	r2, [r3, #1]
 8014e4a:	2200      	movs	r2, #0
 8014e4c:	709a      	strb	r2, [r3, #2]
 8014e4e:	2200      	movs	r2, #0
 8014e50:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8014e52:	68fb      	ldr	r3, [r7, #12]
 8014e54:	2200      	movs	r2, #0
 8014e56:	f042 0201 	orr.w	r2, r2, #1
 8014e5a:	711a      	strb	r2, [r3, #4]
 8014e5c:	2200      	movs	r2, #0
 8014e5e:	715a      	strb	r2, [r3, #5]
 8014e60:	2200      	movs	r2, #0
 8014e62:	719a      	strb	r2, [r3, #6]
 8014e64:	2200      	movs	r2, #0
 8014e66:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8014e68:	687a      	ldr	r2, [r7, #4]
 8014e6a:	68fb      	ldr	r3, [r7, #12]
 8014e6c:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8014e6e:	f004 f8b5 	bl	8018fdc <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014e72:	f004 f89b 	bl	8018fac <THREAD_Get_OTCmdRspPayloadBuffer>
 8014e76:	60f8      	str	r0, [r7, #12]
    return (uint16_t)p_ot_req->Data[0];
 8014e78:	68fb      	ldr	r3, [r7, #12]
 8014e7a:	689b      	ldr	r3, [r3, #8]
 8014e7c:	b29b      	uxth	r3, r3
}
 8014e7e:	4618      	mov	r0, r3
 8014e80:	3710      	adds	r7, #16
 8014e82:	46bd      	mov	sp, r7
 8014e84:	bd80      	pop	{r7, pc}

08014e86 <otCoapHeaderGetTokenLength>:

uint8_t otCoapHeaderGetTokenLength(const otCoapHeader *aHeader)
{
 8014e86:	b580      	push	{r7, lr}
 8014e88:	b084      	sub	sp, #16
 8014e8a:	af00      	add	r7, sp, #0
 8014e8c:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8014e8e:	f004 f8e3 	bl	8019058 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014e92:	f004 f87f 	bl	8018f94 <THREAD_Get_OTCmdPayloadBuffer>
 8014e96:	60f8      	str	r0, [r7, #12]

   p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TOKEN_LENGTH;
 8014e98:	68fb      	ldr	r3, [r7, #12]
 8014e9a:	2200      	movs	r2, #0
 8014e9c:	f062 0254 	orn	r2, r2, #84	; 0x54
 8014ea0:	701a      	strb	r2, [r3, #0]
 8014ea2:	2200      	movs	r2, #0
 8014ea4:	705a      	strb	r2, [r3, #1]
 8014ea6:	2200      	movs	r2, #0
 8014ea8:	709a      	strb	r2, [r3, #2]
 8014eaa:	2200      	movs	r2, #0
 8014eac:	70da      	strb	r2, [r3, #3]

   p_ot_req->Size=1;
 8014eae:	68fb      	ldr	r3, [r7, #12]
 8014eb0:	2200      	movs	r2, #0
 8014eb2:	f042 0201 	orr.w	r2, r2, #1
 8014eb6:	711a      	strb	r2, [r3, #4]
 8014eb8:	2200      	movs	r2, #0
 8014eba:	715a      	strb	r2, [r3, #5]
 8014ebc:	2200      	movs	r2, #0
 8014ebe:	719a      	strb	r2, [r3, #6]
 8014ec0:	2200      	movs	r2, #0
 8014ec2:	71da      	strb	r2, [r3, #7]
   p_ot_req->Data[0] = (uint32_t) aHeader;
 8014ec4:	687a      	ldr	r2, [r7, #4]
 8014ec6:	68fb      	ldr	r3, [r7, #12]
 8014ec8:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8014eca:	f004 f887 	bl	8018fdc <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014ece:	f004 f86d 	bl	8018fac <THREAD_Get_OTCmdRspPayloadBuffer>
 8014ed2:	60f8      	str	r0, [r7, #12]
   return (uint8_t)p_ot_req->Data[0];
 8014ed4:	68fb      	ldr	r3, [r7, #12]
 8014ed6:	689b      	ldr	r3, [r3, #8]
 8014ed8:	b2db      	uxtb	r3, r3
}
 8014eda:	4618      	mov	r0, r3
 8014edc:	3710      	adds	r7, #16
 8014ede:	46bd      	mov	sp, r7
 8014ee0:	bd80      	pop	{r7, pc}

08014ee2 <otCoapHeaderGetToken>:

const uint8_t *otCoapHeaderGetToken(const otCoapHeader *aHeader)
{
 8014ee2:	b580      	push	{r7, lr}
 8014ee4:	b084      	sub	sp, #16
 8014ee6:	af00      	add	r7, sp, #0
 8014ee8:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8014eea:	f004 f8b5 	bl	8019058 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014eee:	f004 f851 	bl	8018f94 <THREAD_Get_OTCmdPayloadBuffer>
 8014ef2:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TOKEN;
 8014ef4:	68fb      	ldr	r3, [r7, #12]
 8014ef6:	2200      	movs	r2, #0
 8014ef8:	f062 0253 	orn	r2, r2, #83	; 0x53
 8014efc:	701a      	strb	r2, [r3, #0]
 8014efe:	2200      	movs	r2, #0
 8014f00:	705a      	strb	r2, [r3, #1]
 8014f02:	2200      	movs	r2, #0
 8014f04:	709a      	strb	r2, [r3, #2]
 8014f06:	2200      	movs	r2, #0
 8014f08:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8014f0a:	68fb      	ldr	r3, [r7, #12]
 8014f0c:	2200      	movs	r2, #0
 8014f0e:	f042 0201 	orr.w	r2, r2, #1
 8014f12:	711a      	strb	r2, [r3, #4]
 8014f14:	2200      	movs	r2, #0
 8014f16:	715a      	strb	r2, [r3, #5]
 8014f18:	2200      	movs	r2, #0
 8014f1a:	719a      	strb	r2, [r3, #6]
 8014f1c:	2200      	movs	r2, #0
 8014f1e:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8014f20:	687a      	ldr	r2, [r7, #4]
 8014f22:	68fb      	ldr	r3, [r7, #12]
 8014f24:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8014f26:	f004 f859 	bl	8018fdc <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014f2a:	f004 f83f 	bl	8018fac <THREAD_Get_OTCmdRspPayloadBuffer>
 8014f2e:	60f8      	str	r0, [r7, #12]
    return (uint8_t *)p_ot_req->Data[0];
 8014f30:	68fb      	ldr	r3, [r7, #12]
 8014f32:	689b      	ldr	r3, [r3, #8]
}
 8014f34:	4618      	mov	r0, r3
 8014f36:	3710      	adds	r7, #16
 8014f38:	46bd      	mov	sp, r7
 8014f3a:	bd80      	pop	{r7, pc}

08014f3c <otCoapNewMessage>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otCoapOption *)p_ot_req->Data[0];
}

otMessage *otCoapNewMessage(otInstance *aInstance, const otCoapHeader *aHeader)
{
 8014f3c:	b580      	push	{r7, lr}
 8014f3e:	b084      	sub	sp, #16
 8014f40:	af00      	add	r7, sp, #0
 8014f42:	6078      	str	r0, [r7, #4]
 8014f44:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 8014f46:	f004 f887 	bl	8019058 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014f4a:	f004 f823 	bl	8018f94 <THREAD_Get_OTCmdPayloadBuffer>
 8014f4e:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_NEW_MESSAGE;
 8014f50:	68fb      	ldr	r3, [r7, #12]
 8014f52:	2200      	movs	r2, #0
 8014f54:	f062 0259 	orn	r2, r2, #89	; 0x59
 8014f58:	701a      	strb	r2, [r3, #0]
 8014f5a:	2200      	movs	r2, #0
 8014f5c:	705a      	strb	r2, [r3, #1]
 8014f5e:	2200      	movs	r2, #0
 8014f60:	709a      	strb	r2, [r3, #2]
 8014f62:	2200      	movs	r2, #0
 8014f64:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8014f66:	68fb      	ldr	r3, [r7, #12]
 8014f68:	2200      	movs	r2, #0
 8014f6a:	f042 0201 	orr.w	r2, r2, #1
 8014f6e:	711a      	strb	r2, [r3, #4]
 8014f70:	2200      	movs	r2, #0
 8014f72:	715a      	strb	r2, [r3, #5]
 8014f74:	2200      	movs	r2, #0
 8014f76:	719a      	strb	r2, [r3, #6]
 8014f78:	2200      	movs	r2, #0
 8014f7a:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8014f7c:	683a      	ldr	r2, [r7, #0]
 8014f7e:	68fb      	ldr	r3, [r7, #12]
 8014f80:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8014f82:	f004 f82b 	bl	8018fdc <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014f86:	f004 f811 	bl	8018fac <THREAD_Get_OTCmdRspPayloadBuffer>
 8014f8a:	60f8      	str	r0, [r7, #12]
    return (otMessage *)p_ot_req->Data[0];
 8014f8c:	68fb      	ldr	r3, [r7, #12]
 8014f8e:	689b      	ldr	r3, [r3, #8]

}
 8014f90:	4618      	mov	r0, r3
 8014f92:	3710      	adds	r7, #16
 8014f94:	46bd      	mov	sp, r7
 8014f96:	bd80      	pop	{r7, pc}

08014f98 <otCoapSendRequest>:

otError otCoapSendRequest(otInstance *aInstance,otMessage *aMessage, const otMessageInfo *aMessageInfo,
                              otCoapResponseHandler aHandler, void *aContext)
{
 8014f98:	b580      	push	{r7, lr}
 8014f9a:	b086      	sub	sp, #24
 8014f9c:	af00      	add	r7, sp, #0
 8014f9e:	60f8      	str	r0, [r7, #12]
 8014fa0:	60b9      	str	r1, [r7, #8]
 8014fa2:	607a      	str	r2, [r7, #4]
 8014fa4:	603b      	str	r3, [r7, #0]
    Pre_OtCmdProcessing();
 8014fa6:	f004 f857 	bl	8019058 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014faa:	f003 fff3 	bl	8018f94 <THREAD_Get_OTCmdPayloadBuffer>
 8014fae:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_REQUEST;
 8014fb0:	697b      	ldr	r3, [r7, #20]
 8014fb2:	2200      	movs	r2, #0
 8014fb4:	f062 0258 	orn	r2, r2, #88	; 0x58
 8014fb8:	701a      	strb	r2, [r3, #0]
 8014fba:	2200      	movs	r2, #0
 8014fbc:	705a      	strb	r2, [r3, #1]
 8014fbe:	2200      	movs	r2, #0
 8014fc0:	709a      	strb	r2, [r3, #2]
 8014fc2:	2200      	movs	r2, #0
 8014fc4:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 8014fc6:	697b      	ldr	r3, [r7, #20]
 8014fc8:	2200      	movs	r2, #0
 8014fca:	f042 0203 	orr.w	r2, r2, #3
 8014fce:	711a      	strb	r2, [r3, #4]
 8014fd0:	2200      	movs	r2, #0
 8014fd2:	715a      	strb	r2, [r3, #5]
 8014fd4:	2200      	movs	r2, #0
 8014fd6:	719a      	strb	r2, [r3, #6]
 8014fd8:	2200      	movs	r2, #0
 8014fda:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 8014fdc:	68ba      	ldr	r2, [r7, #8]
 8014fde:	697b      	ldr	r3, [r7, #20]
 8014fe0:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 8014fe2:	687a      	ldr	r2, [r7, #4]
 8014fe4:	697b      	ldr	r3, [r7, #20]
 8014fe6:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aHandler;
 8014fe8:	683a      	ldr	r2, [r7, #0]
 8014fea:	697b      	ldr	r3, [r7, #20]
 8014fec:	611a      	str	r2, [r3, #16]
    p_ot_req->Data[3] = (uint32_t) aContext;
 8014fee:	6a3a      	ldr	r2, [r7, #32]
 8014ff0:	697b      	ldr	r3, [r7, #20]
 8014ff2:	615a      	str	r2, [r3, #20]

    Ot_Cmd_Transfer();
 8014ff4:	f003 fff2 	bl	8018fdc <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014ff8:	f003 ffd8 	bl	8018fac <THREAD_Get_OTCmdRspPayloadBuffer>
 8014ffc:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 8014ffe:	697b      	ldr	r3, [r7, #20]
 8015000:	689b      	ldr	r3, [r3, #8]
 8015002:	b2db      	uxtb	r3, r3
}
 8015004:	4618      	mov	r0, r3
 8015006:	3718      	adds	r7, #24
 8015008:	46bd      	mov	sp, r7
 801500a:	bd80      	pop	{r7, pc}

0801500c <otCoapStart>:

otError otCoapStart(otInstance *aInstance, uint16_t aPort)
{
 801500c:	b580      	push	{r7, lr}
 801500e:	b084      	sub	sp, #16
 8015010:	af00      	add	r7, sp, #0
 8015012:	6078      	str	r0, [r7, #4]
 8015014:	460b      	mov	r3, r1
 8015016:	807b      	strh	r3, [r7, #2]
    Pre_OtCmdProcessing();
 8015018:	f004 f81e 	bl	8019058 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 801501c:	f003 ffba 	bl	8018f94 <THREAD_Get_OTCmdPayloadBuffer>
 8015020:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_START;
 8015022:	68fb      	ldr	r3, [r7, #12]
 8015024:	2200      	movs	r2, #0
 8015026:	f062 024b 	orn	r2, r2, #75	; 0x4b
 801502a:	701a      	strb	r2, [r3, #0]
 801502c:	2200      	movs	r2, #0
 801502e:	705a      	strb	r2, [r3, #1]
 8015030:	2200      	movs	r2, #0
 8015032:	709a      	strb	r2, [r3, #2]
 8015034:	2200      	movs	r2, #0
 8015036:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8015038:	68fb      	ldr	r3, [r7, #12]
 801503a:	2200      	movs	r2, #0
 801503c:	f042 0201 	orr.w	r2, r2, #1
 8015040:	711a      	strb	r2, [r3, #4]
 8015042:	2200      	movs	r2, #0
 8015044:	715a      	strb	r2, [r3, #5]
 8015046:	2200      	movs	r2, #0
 8015048:	719a      	strb	r2, [r3, #6]
 801504a:	2200      	movs	r2, #0
 801504c:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint16_t) aPort;
 801504e:	887a      	ldrh	r2, [r7, #2]
 8015050:	68fb      	ldr	r3, [r7, #12]
 8015052:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8015054:	f003 ffc2 	bl	8018fdc <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8015058:	f003 ffa8 	bl	8018fac <THREAD_Get_OTCmdRspPayloadBuffer>
 801505c:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 801505e:	68fb      	ldr	r3, [r7, #12]
 8015060:	689b      	ldr	r3, [r3, #8]
 8015062:	b2db      	uxtb	r3, r3
}
 8015064:	4618      	mov	r0, r3
 8015066:	3710      	adds	r7, #16
 8015068:	46bd      	mov	sp, r7
 801506a:	bd80      	pop	{r7, pc}

0801506c <otCoapAddResource>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError)p_ot_req->Data[0];
}

otError otCoapAddResource(otInstance *aInstance, otCoapResource *aResource)
{
 801506c:	b580      	push	{r7, lr}
 801506e:	b084      	sub	sp, #16
 8015070:	af00      	add	r7, sp, #0
 8015072:	6078      	str	r0, [r7, #4]
 8015074:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 8015076:	f003 ffef 	bl	8019058 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 801507a:	f003 ff8b 	bl	8018f94 <THREAD_Get_OTCmdPayloadBuffer>
 801507e:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_ADD_RESSOURCE;
 8015080:	68fb      	ldr	r3, [r7, #12]
 8015082:	2200      	movs	r2, #0
 8015084:	f062 0249 	orn	r2, r2, #73	; 0x49
 8015088:	701a      	strb	r2, [r3, #0]
 801508a:	2200      	movs	r2, #0
 801508c:	705a      	strb	r2, [r3, #1]
 801508e:	2200      	movs	r2, #0
 8015090:	709a      	strb	r2, [r3, #2]
 8015092:	2200      	movs	r2, #0
 8015094:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8015096:	68fb      	ldr	r3, [r7, #12]
 8015098:	2200      	movs	r2, #0
 801509a:	f042 0201 	orr.w	r2, r2, #1
 801509e:	711a      	strb	r2, [r3, #4]
 80150a0:	2200      	movs	r2, #0
 80150a2:	715a      	strb	r2, [r3, #5]
 80150a4:	2200      	movs	r2, #0
 80150a6:	719a      	strb	r2, [r3, #6]
 80150a8:	2200      	movs	r2, #0
 80150aa:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aResource;
 80150ac:	683a      	ldr	r2, [r7, #0]
 80150ae:	68fb      	ldr	r3, [r7, #12]
 80150b0:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 80150b2:	f003 ff93 	bl	8018fdc <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80150b6:	f003 ff79 	bl	8018fac <THREAD_Get_OTCmdRspPayloadBuffer>
 80150ba:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 80150bc:	68fb      	ldr	r3, [r7, #12]
 80150be:	689b      	ldr	r3, [r3, #8]
 80150c0:	b2db      	uxtb	r3, r3
}
 80150c2:	4618      	mov	r0, r3
 80150c4:	3710      	adds	r7, #16
 80150c6:	46bd      	mov	sp, r7
 80150c8:	bd80      	pop	{r7, pc}

080150ca <otCoapSendResponse>:

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otCoapSendResponse(otInstance *aInstance, otMessage *aMessage, const otMessageInfo *aMessageInfo)
{
 80150ca:	b580      	push	{r7, lr}
 80150cc:	b086      	sub	sp, #24
 80150ce:	af00      	add	r7, sp, #0
 80150d0:	60f8      	str	r0, [r7, #12]
 80150d2:	60b9      	str	r1, [r7, #8]
 80150d4:	607a      	str	r2, [r7, #4]
    Pre_OtCmdProcessing();
 80150d6:	f003 ffbf 	bl	8019058 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80150da:	f003 ff5b 	bl	8018f94 <THREAD_Get_OTCmdPayloadBuffer>
 80150de:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_RESPONSE;
 80150e0:	697b      	ldr	r3, [r7, #20]
 80150e2:	2200      	movs	r2, #0
 80150e4:	f062 0257 	orn	r2, r2, #87	; 0x57
 80150e8:	701a      	strb	r2, [r3, #0]
 80150ea:	2200      	movs	r2, #0
 80150ec:	705a      	strb	r2, [r3, #1]
 80150ee:	2200      	movs	r2, #0
 80150f0:	709a      	strb	r2, [r3, #2]
 80150f2:	2200      	movs	r2, #0
 80150f4:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 80150f6:	697b      	ldr	r3, [r7, #20]
 80150f8:	2200      	movs	r2, #0
 80150fa:	f042 0202 	orr.w	r2, r2, #2
 80150fe:	711a      	strb	r2, [r3, #4]
 8015100:	2200      	movs	r2, #0
 8015102:	715a      	strb	r2, [r3, #5]
 8015104:	2200      	movs	r2, #0
 8015106:	719a      	strb	r2, [r3, #6]
 8015108:	2200      	movs	r2, #0
 801510a:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 801510c:	68ba      	ldr	r2, [r7, #8]
 801510e:	697b      	ldr	r3, [r7, #20]
 8015110:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 8015112:	687a      	ldr	r2, [r7, #4]
 8015114:	697b      	ldr	r3, [r7, #20]
 8015116:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 8015118:	f003 ff60 	bl	8018fdc <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801511c:	f003 ff46 	bl	8018fac <THREAD_Get_OTCmdRspPayloadBuffer>
 8015120:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 8015122:	697b      	ldr	r3, [r7, #20]
 8015124:	689b      	ldr	r3, [r3, #8]
 8015126:	b2db      	uxtb	r3, r3
}
 8015128:	4618      	mov	r0, r3
 801512a:	3718      	adds	r7, #24
 801512c:	46bd      	mov	sp, r7
 801512e:	bd80      	pop	{r7, pc}

08015130 <otInstanceInitSingle>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otInstance *)p_ot_req->Data[0];
}
#else
otInstance *otInstanceInitSingle(void)
{
 8015130:	b580      	push	{r7, lr}
 8015132:	b082      	sub	sp, #8
 8015134:	af00      	add	r7, sp, #0
    Pre_OtCmdProcessing();
 8015136:	f003 ff8f 	bl	8019058 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 801513a:	f003 ff2b 	bl	8018f94 <THREAD_Get_OTCmdPayloadBuffer>
 801513e:	6078      	str	r0, [r7, #4]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_INIT_SINGLE;
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	2200      	movs	r2, #0
 8015144:	f062 026b 	orn	r2, r2, #107	; 0x6b
 8015148:	701a      	strb	r2, [r3, #0]
 801514a:	2200      	movs	r2, #0
 801514c:	705a      	strb	r2, [r3, #1]
 801514e:	2200      	movs	r2, #0
 8015150:	709a      	strb	r2, [r3, #2]
 8015152:	2200      	movs	r2, #0
 8015154:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	2200      	movs	r2, #0
 801515a:	711a      	strb	r2, [r3, #4]
 801515c:	2200      	movs	r2, #0
 801515e:	715a      	strb	r2, [r3, #5]
 8015160:	2200      	movs	r2, #0
 8015162:	719a      	strb	r2, [r3, #6]
 8015164:	2200      	movs	r2, #0
 8015166:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 8015168:	f003 ff38 	bl	8018fdc <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801516c:	f003 ff1e 	bl	8018fac <THREAD_Get_OTCmdRspPayloadBuffer>
 8015170:	6078      	str	r0, [r7, #4]
    return (otInstance *)p_ot_req->Data[0];
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	689b      	ldr	r3, [r3, #8]
}
 8015176:	4618      	mov	r0, r3
 8015178:	3708      	adds	r7, #8
 801517a:	46bd      	mov	sp, r7
 801517c:	bd80      	pop	{r7, pc}

0801517e <otInstanceFinalize>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (bool)p_ot_req->Data[0];
}

void otInstanceFinalize(otInstance *aInstance)
{
 801517e:	b580      	push	{r7, lr}
 8015180:	b084      	sub	sp, #16
 8015182:	af00      	add	r7, sp, #0
 8015184:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8015186:	f003 ff67 	bl	8019058 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 801518a:	f003 ff03 	bl	8018f94 <THREAD_Get_OTCmdPayloadBuffer>
 801518e:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_FINALIZE;
 8015190:	68fb      	ldr	r3, [r7, #12]
 8015192:	2200      	movs	r2, #0
 8015194:	f062 0269 	orn	r2, r2, #105	; 0x69
 8015198:	701a      	strb	r2, [r3, #0]
 801519a:	2200      	movs	r2, #0
 801519c:	705a      	strb	r2, [r3, #1]
 801519e:	2200      	movs	r2, #0
 80151a0:	709a      	strb	r2, [r3, #2]
 80151a2:	2200      	movs	r2, #0
 80151a4:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 80151a6:	68fb      	ldr	r3, [r7, #12]
 80151a8:	2200      	movs	r2, #0
 80151aa:	711a      	strb	r2, [r3, #4]
 80151ac:	2200      	movs	r2, #0
 80151ae:	715a      	strb	r2, [r3, #5]
 80151b0:	2200      	movs	r2, #0
 80151b2:	719a      	strb	r2, [r3, #6]
 80151b4:	2200      	movs	r2, #0
 80151b6:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 80151b8:	f003 ff10 	bl	8018fdc <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80151bc:	f003 fef6 	bl	8018fac <THREAD_Get_OTCmdRspPayloadBuffer>
 80151c0:	60f8      	str	r0, [r7, #12]
}
 80151c2:	bf00      	nop
 80151c4:	3710      	adds	r7, #16
 80151c6:	46bd      	mov	sp, r7
 80151c8:	bd80      	pop	{r7, pc}
	...

080151cc <otSetStateChangedCallback>:

OTAPI otError OTCALL otSetStateChangedCallback(otInstance *aInstance, otStateChangedCallback aCallback,
                                               void *aContext)
{
 80151cc:	b580      	push	{r7, lr}
 80151ce:	b086      	sub	sp, #24
 80151d0:	af00      	add	r7, sp, #0
 80151d2:	60f8      	str	r0, [r7, #12]
 80151d4:	60b9      	str	r1, [r7, #8]
 80151d6:	607a      	str	r2, [r7, #4]
    Pre_OtCmdProcessing();
 80151d8:	f003 ff3e 	bl	8019058 <Pre_OtCmdProcessing>
    /* Store the callback function */
    otStateChangedCb = aCallback;
 80151dc:	4a15      	ldr	r2, [pc, #84]	; (8015234 <otSetStateChangedCallback+0x68>)
 80151de:	68bb      	ldr	r3, [r7, #8]
 80151e0:	6013      	str	r3, [r2, #0]
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80151e2:	f003 fed7 	bl	8018f94 <THREAD_Get_OTCmdPayloadBuffer>
 80151e6:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_SET_STATE_CHANGED_CALLBACK;
 80151e8:	697b      	ldr	r3, [r7, #20]
 80151ea:	2200      	movs	r2, #0
 80151ec:	f062 0268 	orn	r2, r2, #104	; 0x68
 80151f0:	701a      	strb	r2, [r3, #0]
 80151f2:	2200      	movs	r2, #0
 80151f4:	705a      	strb	r2, [r3, #1]
 80151f6:	2200      	movs	r2, #0
 80151f8:	709a      	strb	r2, [r3, #2]
 80151fa:	2200      	movs	r2, #0
 80151fc:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 80151fe:	697b      	ldr	r3, [r7, #20]
 8015200:	2200      	movs	r2, #0
 8015202:	f042 0201 	orr.w	r2, r2, #1
 8015206:	711a      	strb	r2, [r3, #4]
 8015208:	2200      	movs	r2, #0
 801520a:	715a      	strb	r2, [r3, #5]
 801520c:	2200      	movs	r2, #0
 801520e:	719a      	strb	r2, [r3, #6]
 8015210:	2200      	movs	r2, #0
 8015212:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t)aContext;
 8015214:	687a      	ldr	r2, [r7, #4]
 8015216:	697b      	ldr	r3, [r7, #20]
 8015218:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 801521a:	f003 fedf 	bl	8018fdc <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801521e:	f003 fec5 	bl	8018fac <THREAD_Get_OTCmdRspPayloadBuffer>
 8015222:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 8015224:	697b      	ldr	r3, [r7, #20]
 8015226:	689b      	ldr	r3, [r3, #8]
 8015228:	b2db      	uxtb	r3, r3
}
 801522a:	4618      	mov	r0, r3
 801522c:	3718      	adds	r7, #24
 801522e:	46bd      	mov	sp, r7
 8015230:	bd80      	pop	{r7, pc}
 8015232:	bf00      	nop
 8015234:	200275b0 	.word	0x200275b0

08015238 <otInstanceErasePersistentInfo>:

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otInstanceErasePersistentInfo(otInstance *aInstance)
{
 8015238:	b580      	push	{r7, lr}
 801523a:	b084      	sub	sp, #16
 801523c:	af00      	add	r7, sp, #0
 801523e:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8015240:	f003 ff0a 	bl	8019058 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8015244:	f003 fea6 	bl	8018f94 <THREAD_Get_OTCmdPayloadBuffer>
 8015248:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_ERASE_PERSISTENT_INFO;
 801524a:	68fb      	ldr	r3, [r7, #12]
 801524c:	2200      	movs	r2, #0
 801524e:	f062 0264 	orn	r2, r2, #100	; 0x64
 8015252:	701a      	strb	r2, [r3, #0]
 8015254:	2200      	movs	r2, #0
 8015256:	705a      	strb	r2, [r3, #1]
 8015258:	2200      	movs	r2, #0
 801525a:	709a      	strb	r2, [r3, #2]
 801525c:	2200      	movs	r2, #0
 801525e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 8015260:	68fb      	ldr	r3, [r7, #12]
 8015262:	2200      	movs	r2, #0
 8015264:	711a      	strb	r2, [r3, #4]
 8015266:	2200      	movs	r2, #0
 8015268:	715a      	strb	r2, [r3, #5]
 801526a:	2200      	movs	r2, #0
 801526c:	719a      	strb	r2, [r3, #6]
 801526e:	2200      	movs	r2, #0
 8015270:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 8015272:	f003 feb3 	bl	8018fdc <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8015276:	f003 fe99 	bl	8018fac <THREAD_Get_OTCmdRspPayloadBuffer>
 801527a:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 801527c:	68fb      	ldr	r3, [r7, #12]
 801527e:	689b      	ldr	r3, [r3, #8]
 8015280:	b2db      	uxtb	r3, r3
}
 8015282:	4618      	mov	r0, r3
 8015284:	3710      	adds	r7, #16
 8015286:	46bd      	mov	sp, r7
 8015288:	bd80      	pop	{r7, pc}

0801528a <otIp6SetEnabled>:
extern otIp6SlaacIidCreate aIidCreateCb;
extern otIp6ReceiveCallback otIp6ReceiveCb;


OTAPI otError OTCALL otIp6SetEnabled(otInstance *aInstance, bool aEnabled)
{
 801528a:	b580      	push	{r7, lr}
 801528c:	b084      	sub	sp, #16
 801528e:	af00      	add	r7, sp, #0
 8015290:	6078      	str	r0, [r7, #4]
 8015292:	460b      	mov	r3, r1
 8015294:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 8015296:	f003 fedf 	bl	8019058 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 801529a:	f003 fe7b 	bl	8018f94 <THREAD_Get_OTCmdPayloadBuffer>
 801529e:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_SET_ENABLED;
 80152a0:	68fb      	ldr	r3, [r7, #12]
 80152a2:	2200      	movs	r2, #0
 80152a4:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 80152a8:	701a      	strb	r2, [r3, #0]
 80152aa:	2200      	movs	r2, #0
 80152ac:	705a      	strb	r2, [r3, #1]
 80152ae:	2200      	movs	r2, #0
 80152b0:	709a      	strb	r2, [r3, #2]
 80152b2:	2200      	movs	r2, #0
 80152b4:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 80152b6:	68fb      	ldr	r3, [r7, #12]
 80152b8:	2200      	movs	r2, #0
 80152ba:	f042 0201 	orr.w	r2, r2, #1
 80152be:	711a      	strb	r2, [r3, #4]
 80152c0:	2200      	movs	r2, #0
 80152c2:	715a      	strb	r2, [r3, #5]
 80152c4:	2200      	movs	r2, #0
 80152c6:	719a      	strb	r2, [r3, #6]
 80152c8:	2200      	movs	r2, #0
 80152ca:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 80152cc:	78fa      	ldrb	r2, [r7, #3]
 80152ce:	68fb      	ldr	r3, [r7, #12]
 80152d0:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 80152d2:	f003 fe83 	bl	8018fdc <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80152d6:	f003 fe69 	bl	8018fac <THREAD_Get_OTCmdRspPayloadBuffer>
 80152da:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 80152dc:	68fb      	ldr	r3, [r7, #12]
 80152de:	689b      	ldr	r3, [r3, #8]
 80152e0:	b2db      	uxtb	r3, r3
}
 80152e2:	4618      	mov	r0, r3
 80152e4:	3710      	adds	r7, #16
 80152e6:	46bd      	mov	sp, r7
 80152e8:	bd80      	pop	{r7, pc}

080152ea <otIp6IsEnabled>:

OTAPI bool OTCALL otIp6IsEnabled(otInstance *aInstance)
{
 80152ea:	b580      	push	{r7, lr}
 80152ec:	b084      	sub	sp, #16
 80152ee:	af00      	add	r7, sp, #0
 80152f0:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 80152f2:	f003 feb1 	bl	8019058 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80152f6:	f003 fe4d 	bl	8018f94 <THREAD_Get_OTCmdPayloadBuffer>
 80152fa:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_IS_ENABLED;
 80152fc:	68fb      	ldr	r3, [r7, #12]
 80152fe:	2200      	movs	r2, #0
 8015300:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 8015304:	701a      	strb	r2, [r3, #0]
 8015306:	2200      	movs	r2, #0
 8015308:	705a      	strb	r2, [r3, #1]
 801530a:	2200      	movs	r2, #0
 801530c:	709a      	strb	r2, [r3, #2]
 801530e:	2200      	movs	r2, #0
 8015310:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 8015312:	68fb      	ldr	r3, [r7, #12]
 8015314:	2200      	movs	r2, #0
 8015316:	711a      	strb	r2, [r3, #4]
 8015318:	2200      	movs	r2, #0
 801531a:	715a      	strb	r2, [r3, #5]
 801531c:	2200      	movs	r2, #0
 801531e:	719a      	strb	r2, [r3, #6]
 8015320:	2200      	movs	r2, #0
 8015322:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 8015324:	f003 fe5a 	bl	8018fdc <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8015328:	f003 fe40 	bl	8018fac <THREAD_Get_OTCmdRspPayloadBuffer>
 801532c:	60f8      	str	r0, [r7, #12]
  return (bool)p_ot_req->Data[0];
 801532e:	68fb      	ldr	r3, [r7, #12]
 8015330:	689b      	ldr	r3, [r3, #8]
 8015332:	2b00      	cmp	r3, #0
 8015334:	bf14      	ite	ne
 8015336:	2301      	movne	r3, #1
 8015338:	2300      	moveq	r3, #0
 801533a:	b2db      	uxtb	r3, r3
}
 801533c:	4618      	mov	r0, r3
 801533e:	3710      	adds	r7, #16
 8015340:	46bd      	mov	sp, r7
 8015342:	bd80      	pop	{r7, pc}

08015344 <otIp6GetUnicastAddresses>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

OTAPI const otNetifAddress *OTCALL otIp6GetUnicastAddresses(otInstance *aInstance)
{
 8015344:	b580      	push	{r7, lr}
 8015346:	b084      	sub	sp, #16
 8015348:	af00      	add	r7, sp, #0
 801534a:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 801534c:	f003 fe84 	bl	8019058 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8015350:	f003 fe20 	bl	8018f94 <THREAD_Get_OTCmdPayloadBuffer>
 8015354:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_GET_UNICAST_ADDRESSES;
 8015356:	68fb      	ldr	r3, [r7, #12]
 8015358:	2200      	movs	r2, #0
 801535a:	f042 022b 	orr.w	r2, r2, #43	; 0x2b
 801535e:	701a      	strb	r2, [r3, #0]
 8015360:	2200      	movs	r2, #0
 8015362:	705a      	strb	r2, [r3, #1]
 8015364:	2200      	movs	r2, #0
 8015366:	709a      	strb	r2, [r3, #2]
 8015368:	2200      	movs	r2, #0
 801536a:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 801536c:	68fb      	ldr	r3, [r7, #12]
 801536e:	2200      	movs	r2, #0
 8015370:	711a      	strb	r2, [r3, #4]
 8015372:	2200      	movs	r2, #0
 8015374:	715a      	strb	r2, [r3, #5]
 8015376:	2200      	movs	r2, #0
 8015378:	719a      	strb	r2, [r3, #6]
 801537a:	2200      	movs	r2, #0
 801537c:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 801537e:	f003 fe2d 	bl	8018fdc <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8015382:	f003 fe13 	bl	8018fac <THREAD_Get_OTCmdRspPayloadBuffer>
 8015386:	60f8      	str	r0, [r7, #12]
  return (otNetifAddress *)p_ot_req->Data[0];
 8015388:	68fb      	ldr	r3, [r7, #12]
 801538a:	689b      	ldr	r3, [r3, #8]
}
 801538c:	4618      	mov	r0, r3
 801538e:	3710      	adds	r7, #16
 8015390:	46bd      	mov	sp, r7
 8015392:	bd80      	pop	{r7, pc}

08015394 <otIp6GetMulticastAddresses>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

const otNetifMulticastAddress *otIp6GetMulticastAddresses(otInstance *aInstance)
{
 8015394:	b580      	push	{r7, lr}
 8015396:	b084      	sub	sp, #16
 8015398:	af00      	add	r7, sp, #0
 801539a:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 801539c:	f003 fe5c 	bl	8019058 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80153a0:	f003 fdf8 	bl	8018f94 <THREAD_Get_OTCmdPayloadBuffer>
 80153a4:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_GET_MULTICAST_ADDRESSES;
 80153a6:	68fb      	ldr	r3, [r7, #12]
 80153a8:	2200      	movs	r2, #0
 80153aa:	f042 022e 	orr.w	r2, r2, #46	; 0x2e
 80153ae:	701a      	strb	r2, [r3, #0]
 80153b0:	2200      	movs	r2, #0
 80153b2:	705a      	strb	r2, [r3, #1]
 80153b4:	2200      	movs	r2, #0
 80153b6:	709a      	strb	r2, [r3, #2]
 80153b8:	2200      	movs	r2, #0
 80153ba:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 80153bc:	68fb      	ldr	r3, [r7, #12]
 80153be:	2200      	movs	r2, #0
 80153c0:	711a      	strb	r2, [r3, #4]
 80153c2:	2200      	movs	r2, #0
 80153c4:	715a      	strb	r2, [r3, #5]
 80153c6:	2200      	movs	r2, #0
 80153c8:	719a      	strb	r2, [r3, #6]
 80153ca:	2200      	movs	r2, #0
 80153cc:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 80153ce:	f003 fe05 	bl	8018fdc <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80153d2:	f003 fdeb 	bl	8018fac <THREAD_Get_OTCmdRspPayloadBuffer>
 80153d6:	60f8      	str	r0, [r7, #12]
  return (otNetifMulticastAddress *)p_ot_req->Data[0];
 80153d8:	68fb      	ldr	r3, [r7, #12]
 80153da:	689b      	ldr	r3, [r3, #8]
}
 80153dc:	4618      	mov	r0, r3
 80153de:	3710      	adds	r7, #16
 80153e0:	46bd      	mov	sp, r7
 80153e2:	bd80      	pop	{r7, pc}

080153e4 <otIp6IsAddressEqual>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint16_t *)p_ot_req->Data[0];
}

OTAPI bool OTCALL otIp6IsAddressEqual(const otIp6Address *a, const otIp6Address *b)
{
 80153e4:	b580      	push	{r7, lr}
 80153e6:	b084      	sub	sp, #16
 80153e8:	af00      	add	r7, sp, #0
 80153ea:	6078      	str	r0, [r7, #4]
 80153ec:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 80153ee:	f003 fe33 	bl	8019058 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80153f2:	f003 fdcf 	bl	8018f94 <THREAD_Get_OTCmdPayloadBuffer>
 80153f6:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_IS_ADDRESS_EQUAL;
 80153f8:	68fb      	ldr	r3, [r7, #12]
 80153fa:	2200      	movs	r2, #0
 80153fc:	f042 023e 	orr.w	r2, r2, #62	; 0x3e
 8015400:	701a      	strb	r2, [r3, #0]
 8015402:	2200      	movs	r2, #0
 8015404:	705a      	strb	r2, [r3, #1]
 8015406:	2200      	movs	r2, #0
 8015408:	709a      	strb	r2, [r3, #2]
 801540a:	2200      	movs	r2, #0
 801540c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 801540e:	68fb      	ldr	r3, [r7, #12]
 8015410:	2200      	movs	r2, #0
 8015412:	f042 0202 	orr.w	r2, r2, #2
 8015416:	711a      	strb	r2, [r3, #4]
 8015418:	2200      	movs	r2, #0
 801541a:	715a      	strb	r2, [r3, #5]
 801541c:	2200      	movs	r2, #0
 801541e:	719a      	strb	r2, [r3, #6]
 8015420:	2200      	movs	r2, #0
 8015422:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)a;
 8015424:	687a      	ldr	r2, [r7, #4]
 8015426:	68fb      	ldr	r3, [r7, #12]
 8015428:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t)b;
 801542a:	683a      	ldr	r2, [r7, #0]
 801542c:	68fb      	ldr	r3, [r7, #12]
 801542e:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 8015430:	f003 fdd4 	bl	8018fdc <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8015434:	f003 fdba 	bl	8018fac <THREAD_Get_OTCmdRspPayloadBuffer>
 8015438:	60f8      	str	r0, [r7, #12]
  return (bool)p_ot_req->Data[0];
 801543a:	68fb      	ldr	r3, [r7, #12]
 801543c:	689b      	ldr	r3, [r3, #8]
 801543e:	2b00      	cmp	r3, #0
 8015440:	bf14      	ite	ne
 8015442:	2301      	movne	r3, #1
 8015444:	2300      	moveq	r3, #0
 8015446:	b2db      	uxtb	r3, r3
}
 8015448:	4618      	mov	r0, r3
 801544a:	3710      	adds	r7, #16
 801544c:	46bd      	mov	sp, r7
 801544e:	bd80      	pop	{r7, pc}

08015450 <otIp6AddressFromString>:

OTAPI otError OTCALL otIp6AddressFromString(const char *aString, otIp6Address *aAddress)
{
 8015450:	b580      	push	{r7, lr}
 8015452:	b084      	sub	sp, #16
 8015454:	af00      	add	r7, sp, #0
 8015456:	6078      	str	r0, [r7, #4]
 8015458:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 801545a:	f003 fdfd 	bl	8019058 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 801545e:	f003 fd99 	bl	8018f94 <THREAD_Get_OTCmdPayloadBuffer>
 8015462:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_ADDRESS_FROM_STRING;
 8015464:	68fb      	ldr	r3, [r7, #12]
 8015466:	2200      	movs	r2, #0
 8015468:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 801546c:	701a      	strb	r2, [r3, #0]
 801546e:	2200      	movs	r2, #0
 8015470:	705a      	strb	r2, [r3, #1]
 8015472:	2200      	movs	r2, #0
 8015474:	709a      	strb	r2, [r3, #2]
 8015476:	2200      	movs	r2, #0
 8015478:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 801547a:	68fb      	ldr	r3, [r7, #12]
 801547c:	2200      	movs	r2, #0
 801547e:	f042 0202 	orr.w	r2, r2, #2
 8015482:	711a      	strb	r2, [r3, #4]
 8015484:	2200      	movs	r2, #0
 8015486:	715a      	strb	r2, [r3, #5]
 8015488:	2200      	movs	r2, #0
 801548a:	719a      	strb	r2, [r3, #6]
 801548c:	2200      	movs	r2, #0
 801548e:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aString;
 8015490:	687a      	ldr	r2, [r7, #4]
 8015492:	68fb      	ldr	r3, [r7, #12]
 8015494:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aAddress;
 8015496:	683a      	ldr	r2, [r7, #0]
 8015498:	68fb      	ldr	r3, [r7, #12]
 801549a:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 801549c:	f003 fd9e 	bl	8018fdc <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80154a0:	f003 fd84 	bl	8018fac <THREAD_Get_OTCmdRspPayloadBuffer>
 80154a4:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 80154a6:	68fb      	ldr	r3, [r7, #12]
 80154a8:	689b      	ldr	r3, [r3, #8]
 80154aa:	b2db      	uxtb	r3, r3
}
 80154ac:	4618      	mov	r0, r3
 80154ae:	3710      	adds	r7, #16
 80154b0:	46bd      	mov	sp, r7
 80154b2:	bd80      	pop	{r7, pc}

080154b4 <otLinkSetChannel>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint8_t)p_ot_req->Data[0];
}

OTAPI otError OTCALL otLinkSetChannel(otInstance *aInstance, uint8_t aChannel)
{
 80154b4:	b580      	push	{r7, lr}
 80154b6:	b084      	sub	sp, #16
 80154b8:	af00      	add	r7, sp, #0
 80154ba:	6078      	str	r0, [r7, #4]
 80154bc:	460b      	mov	r3, r1
 80154be:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 80154c0:	f003 fdca 	bl	8019058 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80154c4:	f003 fd66 	bl	8018f94 <THREAD_Get_OTCmdPayloadBuffer>
 80154c8:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_CHANNEL;
 80154ca:	68fb      	ldr	r3, [r7, #12]
 80154cc:	2200      	movs	r2, #0
 80154ce:	f042 0208 	orr.w	r2, r2, #8
 80154d2:	701a      	strb	r2, [r3, #0]
 80154d4:	2200      	movs	r2, #0
 80154d6:	705a      	strb	r2, [r3, #1]
 80154d8:	2200      	movs	r2, #0
 80154da:	709a      	strb	r2, [r3, #2]
 80154dc:	2200      	movs	r2, #0
 80154de:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 80154e0:	68fb      	ldr	r3, [r7, #12]
 80154e2:	2200      	movs	r2, #0
 80154e4:	f042 0201 	orr.w	r2, r2, #1
 80154e8:	711a      	strb	r2, [r3, #4]
 80154ea:	2200      	movs	r2, #0
 80154ec:	715a      	strb	r2, [r3, #5]
 80154ee:	2200      	movs	r2, #0
 80154f0:	719a      	strb	r2, [r3, #6]
 80154f2:	2200      	movs	r2, #0
 80154f4:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aChannel;
 80154f6:	78fa      	ldrb	r2, [r7, #3]
 80154f8:	68fb      	ldr	r3, [r7, #12]
 80154fa:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 80154fc:	f003 fd6e 	bl	8018fdc <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8015500:	f003 fd54 	bl	8018fac <THREAD_Get_OTCmdRspPayloadBuffer>
 8015504:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8015506:	68fb      	ldr	r3, [r7, #12]
 8015508:	689b      	ldr	r3, [r3, #8]
 801550a:	b2db      	uxtb	r3, r3
}
 801550c:	4618      	mov	r0, r3
 801550e:	3710      	adds	r7, #16
 8015510:	46bd      	mov	sp, r7
 8015512:	bd80      	pop	{r7, pc}

08015514 <otLinkSetPanId>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otPanId)p_ot_req->Data[0];
}

OTAPI otError OTCALL otLinkSetPanId(otInstance *aInstance, otPanId aPanId)
{
 8015514:	b580      	push	{r7, lr}
 8015516:	b084      	sub	sp, #16
 8015518:	af00      	add	r7, sp, #0
 801551a:	6078      	str	r0, [r7, #4]
 801551c:	460b      	mov	r3, r1
 801551e:	807b      	strh	r3, [r7, #2]
  Pre_OtCmdProcessing();
 8015520:	f003 fd9a 	bl	8019058 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8015524:	f003 fd36 	bl	8018f94 <THREAD_Get_OTCmdPayloadBuffer>
 8015528:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_PANID;
 801552a:	68fb      	ldr	r3, [r7, #12]
 801552c:	2200      	movs	r2, #0
 801552e:	f042 020f 	orr.w	r2, r2, #15
 8015532:	701a      	strb	r2, [r3, #0]
 8015534:	2200      	movs	r2, #0
 8015536:	705a      	strb	r2, [r3, #1]
 8015538:	2200      	movs	r2, #0
 801553a:	709a      	strb	r2, [r3, #2]
 801553c:	2200      	movs	r2, #0
 801553e:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8015540:	68fb      	ldr	r3, [r7, #12]
 8015542:	2200      	movs	r2, #0
 8015544:	f042 0201 	orr.w	r2, r2, #1
 8015548:	711a      	strb	r2, [r3, #4]
 801554a:	2200      	movs	r2, #0
 801554c:	715a      	strb	r2, [r3, #5]
 801554e:	2200      	movs	r2, #0
 8015550:	719a      	strb	r2, [r3, #6]
 8015552:	2200      	movs	r2, #0
 8015554:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aPanId;
 8015556:	887a      	ldrh	r2, [r7, #2]
 8015558:	68fb      	ldr	r3, [r7, #12]
 801555a:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 801555c:	f003 fd3e 	bl	8018fdc <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8015560:	f003 fd24 	bl	8018fac <THREAD_Get_OTCmdRspPayloadBuffer>
 8015564:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8015566:	68fb      	ldr	r3, [r7, #12]
 8015568:	689b      	ldr	r3, [r3, #8]
 801556a:	b2db      	uxtb	r3, r3
}
 801556c:	4618      	mov	r0, r3
 801556e:	3710      	adds	r7, #16
 8015570:	46bd      	mov	sp, r7
 8015572:	bd80      	pop	{r7, pc}

08015574 <otMessageFree>:
#include "thread.h"
#include "message.h"


void otMessageFree(otMessage *aMessage)
{
 8015574:	b580      	push	{r7, lr}
 8015576:	b084      	sub	sp, #16
 8015578:	af00      	add	r7, sp, #0
 801557a:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 801557c:	f003 fd6c 	bl	8019058 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8015580:	f003 fd08 	bl	8018f94 <THREAD_Get_OTCmdPayloadBuffer>
 8015584:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_FREE;
 8015586:	68fb      	ldr	r3, [r7, #12]
 8015588:	2200      	movs	r2, #0
 801558a:	f062 0246 	orn	r2, r2, #70	; 0x46
 801558e:	701a      	strb	r2, [r3, #0]
 8015590:	2200      	movs	r2, #0
 8015592:	705a      	strb	r2, [r3, #1]
 8015594:	2200      	movs	r2, #0
 8015596:	709a      	strb	r2, [r3, #2]
 8015598:	2200      	movs	r2, #0
 801559a:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 801559c:	68fb      	ldr	r3, [r7, #12]
 801559e:	2200      	movs	r2, #0
 80155a0:	f042 0201 	orr.w	r2, r2, #1
 80155a4:	711a      	strb	r2, [r3, #4]
 80155a6:	2200      	movs	r2, #0
 80155a8:	715a      	strb	r2, [r3, #5]
 80155aa:	2200      	movs	r2, #0
 80155ac:	719a      	strb	r2, [r3, #6]
 80155ae:	2200      	movs	r2, #0
 80155b0:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 80155b2:	687a      	ldr	r2, [r7, #4]
 80155b4:	68fb      	ldr	r3, [r7, #12]
 80155b6:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 80155b8:	f003 fd10 	bl	8018fdc <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80155bc:	f003 fcf6 	bl	8018fac <THREAD_Get_OTCmdRspPayloadBuffer>
 80155c0:	60f8      	str	r0, [r7, #12]
}
 80155c2:	bf00      	nop
 80155c4:	3710      	adds	r7, #16
 80155c6:	46bd      	mov	sp, r7
 80155c8:	bd80      	pop	{r7, pc}

080155ca <otMessageGetOffset>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError)p_ot_req->Data[0];
}

uint16_t otMessageGetOffset(otMessage *aMessage)
{
 80155ca:	b580      	push	{r7, lr}
 80155cc:	b084      	sub	sp, #16
 80155ce:	af00      	add	r7, sp, #0
 80155d0:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 80155d2:	f003 fd41 	bl	8019058 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80155d6:	f003 fcdd 	bl	8018f94 <THREAD_Get_OTCmdPayloadBuffer>
 80155da:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_GET_OFFSET;
 80155dc:	68fb      	ldr	r3, [r7, #12]
 80155de:	2200      	movs	r2, #0
 80155e0:	f062 0243 	orn	r2, r2, #67	; 0x43
 80155e4:	701a      	strb	r2, [r3, #0]
 80155e6:	2200      	movs	r2, #0
 80155e8:	705a      	strb	r2, [r3, #1]
 80155ea:	2200      	movs	r2, #0
 80155ec:	709a      	strb	r2, [r3, #2]
 80155ee:	2200      	movs	r2, #0
 80155f0:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 80155f2:	68fb      	ldr	r3, [r7, #12]
 80155f4:	2200      	movs	r2, #0
 80155f6:	f042 0201 	orr.w	r2, r2, #1
 80155fa:	711a      	strb	r2, [r3, #4]
 80155fc:	2200      	movs	r2, #0
 80155fe:	715a      	strb	r2, [r3, #5]
 8015600:	2200      	movs	r2, #0
 8015602:	719a      	strb	r2, [r3, #6]
 8015604:	2200      	movs	r2, #0
 8015606:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 8015608:	687a      	ldr	r2, [r7, #4]
 801560a:	68fb      	ldr	r3, [r7, #12]
 801560c:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 801560e:	f003 fce5 	bl	8018fdc <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8015612:	f003 fccb 	bl	8018fac <THREAD_Get_OTCmdRspPayloadBuffer>
 8015616:	60f8      	str	r0, [r7, #12]
    return (uint16_t)p_ot_req->Data[0];
 8015618:	68fb      	ldr	r3, [r7, #12]
 801561a:	689b      	ldr	r3, [r3, #8]
 801561c:	b29b      	uxth	r3, r3
}
 801561e:	4618      	mov	r0, r3
 8015620:	3710      	adds	r7, #16
 8015622:	46bd      	mov	sp, r7
 8015624:	bd80      	pop	{r7, pc}

08015626 <otMessageAppend>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (int8_t)p_ot_req->Data[0];
}

otError otMessageAppend(otMessage *aMessage, const void *aBuf, uint16_t aLength)
{
 8015626:	b580      	push	{r7, lr}
 8015628:	b086      	sub	sp, #24
 801562a:	af00      	add	r7, sp, #0
 801562c:	60f8      	str	r0, [r7, #12]
 801562e:	60b9      	str	r1, [r7, #8]
 8015630:	4613      	mov	r3, r2
 8015632:	80fb      	strh	r3, [r7, #6]
    Pre_OtCmdProcessing();
 8015634:	f003 fd10 	bl	8019058 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8015638:	f003 fcac 	bl	8018f94 <THREAD_Get_OTCmdPayloadBuffer>
 801563c:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_APPEND;
 801563e:	697b      	ldr	r3, [r7, #20]
 8015640:	2200      	movs	r2, #0
 8015642:	f062 023e 	orn	r2, r2, #62	; 0x3e
 8015646:	701a      	strb	r2, [r3, #0]
 8015648:	2200      	movs	r2, #0
 801564a:	705a      	strb	r2, [r3, #1]
 801564c:	2200      	movs	r2, #0
 801564e:	709a      	strb	r2, [r3, #2]
 8015650:	2200      	movs	r2, #0
 8015652:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 8015654:	697b      	ldr	r3, [r7, #20]
 8015656:	2200      	movs	r2, #0
 8015658:	f042 0203 	orr.w	r2, r2, #3
 801565c:	711a      	strb	r2, [r3, #4]
 801565e:	2200      	movs	r2, #0
 8015660:	715a      	strb	r2, [r3, #5]
 8015662:	2200      	movs	r2, #0
 8015664:	719a      	strb	r2, [r3, #6]
 8015666:	2200      	movs	r2, #0
 8015668:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 801566a:	68fa      	ldr	r2, [r7, #12]
 801566c:	697b      	ldr	r3, [r7, #20]
 801566e:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aBuf;
 8015670:	68ba      	ldr	r2, [r7, #8]
 8015672:	697b      	ldr	r3, [r7, #20]
 8015674:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aLength;
 8015676:	88fa      	ldrh	r2, [r7, #6]
 8015678:	697b      	ldr	r3, [r7, #20]
 801567a:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 801567c:	f003 fcae 	bl	8018fdc <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8015680:	f003 fc94 	bl	8018fac <THREAD_Get_OTCmdRspPayloadBuffer>
 8015684:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 8015686:	697b      	ldr	r3, [r7, #20]
 8015688:	689b      	ldr	r3, [r3, #8]
 801568a:	b2db      	uxtb	r3, r3
}
 801568c:	4618      	mov	r0, r3
 801568e:	3718      	adds	r7, #24
 8015690:	46bd      	mov	sp, r7
 8015692:	bd80      	pop	{r7, pc}

08015694 <otMessageRead>:

int otMessageRead(otMessage *aMessage, uint16_t aOffset, void *aBuf, uint16_t aLength)
{
 8015694:	b580      	push	{r7, lr}
 8015696:	b086      	sub	sp, #24
 8015698:	af00      	add	r7, sp, #0
 801569a:	60f8      	str	r0, [r7, #12]
 801569c:	607a      	str	r2, [r7, #4]
 801569e:	461a      	mov	r2, r3
 80156a0:	460b      	mov	r3, r1
 80156a2:	817b      	strh	r3, [r7, #10]
 80156a4:	4613      	mov	r3, r2
 80156a6:	813b      	strh	r3, [r7, #8]
    Pre_OtCmdProcessing();
 80156a8:	f003 fcd6 	bl	8019058 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80156ac:	f003 fc72 	bl	8018f94 <THREAD_Get_OTCmdPayloadBuffer>
 80156b0:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_READ;
 80156b2:	697b      	ldr	r3, [r7, #20]
 80156b4:	2200      	movs	r2, #0
 80156b6:	f062 023d 	orn	r2, r2, #61	; 0x3d
 80156ba:	701a      	strb	r2, [r3, #0]
 80156bc:	2200      	movs	r2, #0
 80156be:	705a      	strb	r2, [r3, #1]
 80156c0:	2200      	movs	r2, #0
 80156c2:	709a      	strb	r2, [r3, #2]
 80156c4:	2200      	movs	r2, #0
 80156c6:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=4;
 80156c8:	697b      	ldr	r3, [r7, #20]
 80156ca:	2200      	movs	r2, #0
 80156cc:	f042 0204 	orr.w	r2, r2, #4
 80156d0:	711a      	strb	r2, [r3, #4]
 80156d2:	2200      	movs	r2, #0
 80156d4:	715a      	strb	r2, [r3, #5]
 80156d6:	2200      	movs	r2, #0
 80156d8:	719a      	strb	r2, [r3, #6]
 80156da:	2200      	movs	r2, #0
 80156dc:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 80156de:	68fa      	ldr	r2, [r7, #12]
 80156e0:	697b      	ldr	r3, [r7, #20]
 80156e2:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aOffset;
 80156e4:	897a      	ldrh	r2, [r7, #10]
 80156e6:	697b      	ldr	r3, [r7, #20]
 80156e8:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aBuf;
 80156ea:	687a      	ldr	r2, [r7, #4]
 80156ec:	697b      	ldr	r3, [r7, #20]
 80156ee:	611a      	str	r2, [r3, #16]
    p_ot_req->Data[3] = (uint32_t) aLength;
 80156f0:	893a      	ldrh	r2, [r7, #8]
 80156f2:	697b      	ldr	r3, [r7, #20]
 80156f4:	615a      	str	r2, [r3, #20]

    Ot_Cmd_Transfer();
 80156f6:	f003 fc71 	bl	8018fdc <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80156fa:	f003 fc57 	bl	8018fac <THREAD_Get_OTCmdRspPayloadBuffer>
 80156fe:	6178      	str	r0, [r7, #20]
    return (int)p_ot_req->Data[0];
 8015700:	697b      	ldr	r3, [r7, #20]
 8015702:	689b      	ldr	r3, [r3, #8]
}
 8015704:	4618      	mov	r0, r3
 8015706:	3718      	adds	r7, #24
 8015708:	46bd      	mov	sp, r7
 801570a:	bd80      	pop	{r7, pc}

0801570c <OpenThread_CallBack_Processing>:
  * @param  None
  * @retval None
  */

HAL_StatusTypeDef OpenThread_CallBack_Processing(void)
{
 801570c:	b5b0      	push	{r4, r5, r7, lr}
 801570e:	b084      	sub	sp, #16
 8015710:	af02      	add	r7, sp, #8
    HAL_StatusTypeDef status = HAL_OK;
 8015712:	2300      	movs	r3, #0
 8015714:	71fb      	strb	r3, [r7, #7]


    /* Get pointer on received event buffer from M0 */
    Thread_OT_Cmd_Request_t* p_notification = THREAD_Get_NotificationPayloadBuffer();
 8015716:	f003 fc55 	bl	8018fc4 <THREAD_Get_NotificationPayloadBuffer>
 801571a:	6038      	str	r0, [r7, #0]

    switch(p_notification->ID)
 801571c:	683b      	ldr	r3, [r7, #0]
 801571e:	681b      	ldr	r3, [r3, #0]
 8015720:	3b01      	subs	r3, #1
 8015722:	2b17      	cmp	r3, #23
 8015724:	f200 81c3 	bhi.w	8015aae <OpenThread_CallBack_Processing+0x3a2>
 8015728:	a201      	add	r2, pc, #4	; (adr r2, 8015730 <OpenThread_CallBack_Processing+0x24>)
 801572a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801572e:	bf00      	nop
 8015730:	08015791 	.word	0x08015791
 8015734:	080157ad 	.word	0x080157ad
 8015738:	08015811 	.word	0x08015811
 801573c:	08015859 	.word	0x08015859
 8015740:	08015865 	.word	0x08015865
 8015744:	08015883 	.word	0x08015883
 8015748:	080158a1 	.word	0x080158a1
 801574c:	080158bf 	.word	0x080158bf
 8015750:	080158dd 	.word	0x080158dd
 8015754:	080158fb 	.word	0x080158fb
 8015758:	0801591d 	.word	0x0801591d
 801575c:	0801593b 	.word	0x0801593b
 8015760:	08015aaf 	.word	0x08015aaf
 8015764:	08015961 	.word	0x08015961
 8015768:	08015995 	.word	0x08015995
 801576c:	080159bd 	.word	0x080159bd
 8015770:	080159db 	.word	0x080159db
 8015774:	08015a49 	.word	0x08015a49
 8015778:	08015a71 	.word	0x08015a71
 801577c:	08015aaf 	.word	0x08015aaf
 8015780:	08015a8f 	.word	0x08015a8f
 8015784:	08015aaf 	.word	0x08015aaf
 8015788:	08015aaf 	.word	0x08015aaf
 801578c:	080157e9 	.word	0x080157e9
    {
    case MSG_M0TOM4_NOTIFY_STATE_CHANGE:
        if (otStateChangedCb != NULL)
 8015790:	4b9b      	ldr	r3, [pc, #620]	; (8015a00 <OpenThread_CallBack_Processing+0x2f4>)
 8015792:	681b      	ldr	r3, [r3, #0]
 8015794:	2b00      	cmp	r3, #0
 8015796:	f000 818d 	beq.w	8015ab4 <OpenThread_CallBack_Processing+0x3a8>
        {
            otStateChangedCb((uint32_t) p_notification->Data[0],
 801579a:	4b99      	ldr	r3, [pc, #612]	; (8015a00 <OpenThread_CallBack_Processing+0x2f4>)
 801579c:	681b      	ldr	r3, [r3, #0]
 801579e:	683a      	ldr	r2, [r7, #0]
 80157a0:	6890      	ldr	r0, [r2, #8]
                    (void*) p_notification->Data[1]);
 80157a2:	683a      	ldr	r2, [r7, #0]
 80157a4:	68d2      	ldr	r2, [r2, #12]
            otStateChangedCb((uint32_t) p_notification->Data[0],
 80157a6:	4611      	mov	r1, r2
 80157a8:	4798      	blx	r3
        }
        break;
 80157aa:	e183      	b.n	8015ab4 <OpenThread_CallBack_Processing+0x3a8>
    case MSG_M0TOM4_COAP_REQUEST_HANDLER:
        mySTCoapContext = (STCoapSpecificRequestContextType * ) p_notification->Data[0];
 80157ac:	683b      	ldr	r3, [r7, #0]
 80157ae:	689b      	ldr	r3, [r3, #8]
 80157b0:	461a      	mov	r2, r3
 80157b2:	4b94      	ldr	r3, [pc, #592]	; (8015a04 <OpenThread_CallBack_Processing+0x2f8>)
 80157b4:	601a      	str	r2, [r3, #0]
        coapRequestHandlerCb = mySTCoapContext->mHandler;
 80157b6:	4b93      	ldr	r3, [pc, #588]	; (8015a04 <OpenThread_CallBack_Processing+0x2f8>)
 80157b8:	681b      	ldr	r3, [r3, #0]
 80157ba:	685b      	ldr	r3, [r3, #4]
 80157bc:	4a92      	ldr	r2, [pc, #584]	; (8015a08 <OpenThread_CallBack_Processing+0x2fc>)
 80157be:	6013      	str	r3, [r2, #0]
        if (coapRequestHandlerCb != NULL)
 80157c0:	4b91      	ldr	r3, [pc, #580]	; (8015a08 <OpenThread_CallBack_Processing+0x2fc>)
 80157c2:	681b      	ldr	r3, [r3, #0]
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	f000 8177 	beq.w	8015ab8 <OpenThread_CallBack_Processing+0x3ac>
        {
            coapRequestHandlerCb(mySTCoapContext->mContext,
 80157ca:	4b8f      	ldr	r3, [pc, #572]	; (8015a08 <OpenThread_CallBack_Processing+0x2fc>)
 80157cc:	681c      	ldr	r4, [r3, #0]
 80157ce:	4b8d      	ldr	r3, [pc, #564]	; (8015a04 <OpenThread_CallBack_Processing+0x2f8>)
 80157d0:	681b      	ldr	r3, [r3, #0]
 80157d2:	6818      	ldr	r0, [r3, #0]
                                (otCoapHeader *) p_notification->Data[1],
 80157d4:	683b      	ldr	r3, [r7, #0]
 80157d6:	68db      	ldr	r3, [r3, #12]
            coapRequestHandlerCb(mySTCoapContext->mContext,
 80157d8:	4619      	mov	r1, r3
                                (otMessage *) p_notification->Data[2],
 80157da:	683b      	ldr	r3, [r7, #0]
 80157dc:	691b      	ldr	r3, [r3, #16]
            coapRequestHandlerCb(mySTCoapContext->mContext,
 80157de:	461a      	mov	r2, r3
                                (otMessageInfo *) p_notification->Data[3]);
 80157e0:	683b      	ldr	r3, [r7, #0]
 80157e2:	695b      	ldr	r3, [r3, #20]
            coapRequestHandlerCb(mySTCoapContext->mContext,
 80157e4:	47a0      	blx	r4
        }
        break;
 80157e6:	e167      	b.n	8015ab8 <OpenThread_CallBack_Processing+0x3ac>
    case MSG_M0TOM4_DEFAULT_COAP_REQUEST_HANDLER:
        if (defaultCoapRequestHandlerCb != NULL)
 80157e8:	4b88      	ldr	r3, [pc, #544]	; (8015a0c <OpenThread_CallBack_Processing+0x300>)
 80157ea:	681b      	ldr	r3, [r3, #0]
 80157ec:	2b00      	cmp	r3, #0
 80157ee:	f000 8165 	beq.w	8015abc <OpenThread_CallBack_Processing+0x3b0>
        {
            defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 80157f2:	4b86      	ldr	r3, [pc, #536]	; (8015a0c <OpenThread_CallBack_Processing+0x300>)
 80157f4:	681c      	ldr	r4, [r3, #0]
 80157f6:	683b      	ldr	r3, [r7, #0]
 80157f8:	689b      	ldr	r3, [r3, #8]
 80157fa:	4618      	mov	r0, r3
                    (otCoapHeader *) p_notification->Data[1],
 80157fc:	683b      	ldr	r3, [r7, #0]
 80157fe:	68db      	ldr	r3, [r3, #12]
            defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 8015800:	4619      	mov	r1, r3
                    (otMessage *) p_notification->Data[2],
 8015802:	683b      	ldr	r3, [r7, #0]
 8015804:	691b      	ldr	r3, [r3, #16]
            defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 8015806:	461a      	mov	r2, r3
                    (otMessageInfo *) p_notification->Data[3]);
 8015808:	683b      	ldr	r3, [r7, #0]
 801580a:	695b      	ldr	r3, [r3, #20]
            defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 801580c:	47a0      	blx	r4
        }
        break;
 801580e:	e155      	b.n	8015abc <OpenThread_CallBack_Processing+0x3b0>
    case MSG_M0TOM4_COAP_RESPONSE_HANDLER: 
        mySTCoapResponseContext = (STCoapSpecificResponseContextType * ) p_notification->Data[0];
 8015810:	683b      	ldr	r3, [r7, #0]
 8015812:	689b      	ldr	r3, [r3, #8]
 8015814:	461a      	mov	r2, r3
 8015816:	4b7e      	ldr	r3, [pc, #504]	; (8015a10 <OpenThread_CallBack_Processing+0x304>)
 8015818:	601a      	str	r2, [r3, #0]
        coapResponseHandlerCb = mySTCoapResponseContext->mHandler;
 801581a:	4b7d      	ldr	r3, [pc, #500]	; (8015a10 <OpenThread_CallBack_Processing+0x304>)
 801581c:	681b      	ldr	r3, [r3, #0]
 801581e:	685b      	ldr	r3, [r3, #4]
 8015820:	4a7c      	ldr	r2, [pc, #496]	; (8015a14 <OpenThread_CallBack_Processing+0x308>)
 8015822:	6013      	str	r3, [r2, #0]
        if (coapResponseHandlerCb != NULL)
 8015824:	4b7b      	ldr	r3, [pc, #492]	; (8015a14 <OpenThread_CallBack_Processing+0x308>)
 8015826:	681b      	ldr	r3, [r3, #0]
 8015828:	2b00      	cmp	r3, #0
 801582a:	f000 8149 	beq.w	8015ac0 <OpenThread_CallBack_Processing+0x3b4>
        {
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 801582e:	4b79      	ldr	r3, [pc, #484]	; (8015a14 <OpenThread_CallBack_Processing+0x308>)
 8015830:	681c      	ldr	r4, [r3, #0]
 8015832:	4b77      	ldr	r3, [pc, #476]	; (8015a10 <OpenThread_CallBack_Processing+0x304>)
 8015834:	681b      	ldr	r3, [r3, #0]
 8015836:	6818      	ldr	r0, [r3, #0]
                    (otCoapHeader *) p_notification->Data[1],
 8015838:	683b      	ldr	r3, [r7, #0]
 801583a:	68db      	ldr	r3, [r3, #12]
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 801583c:	4619      	mov	r1, r3
                    (otMessage *) p_notification->Data[2],
 801583e:	683b      	ldr	r3, [r7, #0]
 8015840:	691b      	ldr	r3, [r3, #16]
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 8015842:	461a      	mov	r2, r3
                    (otMessageInfo *) p_notification->Data[3],
 8015844:	683b      	ldr	r3, [r7, #0]
 8015846:	695b      	ldr	r3, [r3, #20]
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 8015848:	461d      	mov	r5, r3
                    (otError) p_notification->Data[4]);
 801584a:	683b      	ldr	r3, [r7, #0]
 801584c:	699b      	ldr	r3, [r3, #24]
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 801584e:	b2db      	uxtb	r3, r3
 8015850:	9300      	str	r3, [sp, #0]
 8015852:	462b      	mov	r3, r5
 8015854:	47a0      	blx	r4
        }
        break;
 8015856:	e133      	b.n	8015ac0 <OpenThread_CallBack_Processing+0x3b4>
    case MSG_M0TOM4_NOTIFY_STACK_RESET:
        /* Store Thread NVM data in Flash*/
        SHCI_C2_FLASH_StoreData(THREAD_IP);
 8015858:	2001      	movs	r0, #1
 801585a:	f000 f9a3 	bl	8015ba4 <SHCI_C2_FLASH_StoreData>
        /* Perform an NVIC Reset in order to reinitalize the device */
        HAL_NVIC_SystemReset();
 801585e:	f7f2 f8b4 	bl	80079ca <HAL_NVIC_SystemReset>
        break;
 8015862:	e14c      	b.n	8015afe <OpenThread_CallBack_Processing+0x3f2>
    case MSG_M0TOM4_IP6_RECEIVE:
        if (otIp6ReceiveCb != NULL)
 8015864:	4b6c      	ldr	r3, [pc, #432]	; (8015a18 <OpenThread_CallBack_Processing+0x30c>)
 8015866:	681b      	ldr	r3, [r3, #0]
 8015868:	2b00      	cmp	r3, #0
 801586a:	f000 812b 	beq.w	8015ac4 <OpenThread_CallBack_Processing+0x3b8>
        {
            otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 801586e:	4b6a      	ldr	r3, [pc, #424]	; (8015a18 <OpenThread_CallBack_Processing+0x30c>)
 8015870:	681b      	ldr	r3, [r3, #0]
 8015872:	683a      	ldr	r2, [r7, #0]
 8015874:	6892      	ldr	r2, [r2, #8]
 8015876:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 8015878:	683a      	ldr	r2, [r7, #0]
 801587a:	68d2      	ldr	r2, [r2, #12]
            otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 801587c:	4611      	mov	r1, r2
 801587e:	4798      	blx	r3
        }
        break;
 8015880:	e120      	b.n	8015ac4 <OpenThread_CallBack_Processing+0x3b8>
    case MSG_M0TOM4_IP6_SLAAC_IID_CREATE:
        if (aIidCreateCb != NULL)
 8015882:	4b66      	ldr	r3, [pc, #408]	; (8015a1c <OpenThread_CallBack_Processing+0x310>)
 8015884:	681b      	ldr	r3, [r3, #0]
 8015886:	2b00      	cmp	r3, #0
 8015888:	f000 811e 	beq.w	8015ac8 <OpenThread_CallBack_Processing+0x3bc>
        {
            /* Not passing otInstance as first parameter, because created on M0, passing NULL instead */
            aIidCreateCb(NULL, (otNetifAddress*) p_notification->Data[0],
 801588c:	4b63      	ldr	r3, [pc, #396]	; (8015a1c <OpenThread_CallBack_Processing+0x310>)
 801588e:	681b      	ldr	r3, [r3, #0]
 8015890:	683a      	ldr	r2, [r7, #0]
 8015892:	6892      	ldr	r2, [r2, #8]
 8015894:	4611      	mov	r1, r2
                    (void*) p_notification->Data[1]);
 8015896:	683a      	ldr	r2, [r7, #0]
 8015898:	68d2      	ldr	r2, [r2, #12]
            aIidCreateCb(NULL, (otNetifAddress*) p_notification->Data[0],
 801589a:	2000      	movs	r0, #0
 801589c:	4798      	blx	r3
        }
        break;
 801589e:	e113      	b.n	8015ac8 <OpenThread_CallBack_Processing+0x3bc>
    case MSG_M0TOM4_HANDLE_ACTIVE_SCAN_RESULT:
        if (otHandleActiveScanResultCb != NULL)
 80158a0:	4b5f      	ldr	r3, [pc, #380]	; (8015a20 <OpenThread_CallBack_Processing+0x314>)
 80158a2:	681b      	ldr	r3, [r3, #0]
 80158a4:	2b00      	cmp	r3, #0
 80158a6:	f000 8111 	beq.w	8015acc <OpenThread_CallBack_Processing+0x3c0>
        {
            otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 80158aa:	4b5d      	ldr	r3, [pc, #372]	; (8015a20 <OpenThread_CallBack_Processing+0x314>)
 80158ac:	681b      	ldr	r3, [r3, #0]
 80158ae:	683a      	ldr	r2, [r7, #0]
 80158b0:	6892      	ldr	r2, [r2, #8]
 80158b2:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 80158b4:	683a      	ldr	r2, [r7, #0]
 80158b6:	68d2      	ldr	r2, [r2, #12]
            otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 80158b8:	4611      	mov	r1, r2
 80158ba:	4798      	blx	r3
        }
        break;
 80158bc:	e106      	b.n	8015acc <OpenThread_CallBack_Processing+0x3c0>
    case MSG_M0TOM4_HANDLE_ENERGY_SCAN_RESULT:
        if (otHandleEnergyScanResultCb != NULL)
 80158be:	4b59      	ldr	r3, [pc, #356]	; (8015a24 <OpenThread_CallBack_Processing+0x318>)
 80158c0:	681b      	ldr	r3, [r3, #0]
 80158c2:	2b00      	cmp	r3, #0
 80158c4:	f000 8104 	beq.w	8015ad0 <OpenThread_CallBack_Processing+0x3c4>
        {
            otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 80158c8:	4b56      	ldr	r3, [pc, #344]	; (8015a24 <OpenThread_CallBack_Processing+0x318>)
 80158ca:	681b      	ldr	r3, [r3, #0]
 80158cc:	683a      	ldr	r2, [r7, #0]
 80158ce:	6892      	ldr	r2, [r2, #8]
 80158d0:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 80158d2:	683a      	ldr	r2, [r7, #0]
 80158d4:	68d2      	ldr	r2, [r2, #12]
            otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 80158d6:	4611      	mov	r1, r2
 80158d8:	4798      	blx	r3
        }
        break;
 80158da:	e0f9      	b.n	8015ad0 <OpenThread_CallBack_Processing+0x3c4>
    case MSG_M0TOM4_HANDLE_LINK_PCAP:
        if (otLinkPcapCb != NULL)
 80158dc:	4b52      	ldr	r3, [pc, #328]	; (8015a28 <OpenThread_CallBack_Processing+0x31c>)
 80158de:	681b      	ldr	r3, [r3, #0]
 80158e0:	2b00      	cmp	r3, #0
 80158e2:	f000 80f7 	beq.w	8015ad4 <OpenThread_CallBack_Processing+0x3c8>
        {
            otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 80158e6:	4b50      	ldr	r3, [pc, #320]	; (8015a28 <OpenThread_CallBack_Processing+0x31c>)
 80158e8:	681b      	ldr	r3, [r3, #0]
 80158ea:	683a      	ldr	r2, [r7, #0]
 80158ec:	6892      	ldr	r2, [r2, #8]
 80158ee:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 80158f0:	683a      	ldr	r2, [r7, #0]
 80158f2:	68d2      	ldr	r2, [r2, #12]
            otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 80158f4:	4611      	mov	r1, r2
 80158f6:	4798      	blx	r3
        }
        break;
 80158f8:	e0ec      	b.n	8015ad4 <OpenThread_CallBack_Processing+0x3c8>
    case MSG_M0TOM4_RECEIVE_DIAGNOSTIC_GET_CALLBACK:
        if (otReceiveDiagnosticGetCb != NULL)
 80158fa:	4b4c      	ldr	r3, [pc, #304]	; (8015a2c <OpenThread_CallBack_Processing+0x320>)
 80158fc:	681b      	ldr	r3, [r3, #0]
 80158fe:	2b00      	cmp	r3, #0
 8015900:	f000 80ea 	beq.w	8015ad8 <OpenThread_CallBack_Processing+0x3cc>
        {
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 8015904:	4b49      	ldr	r3, [pc, #292]	; (8015a2c <OpenThread_CallBack_Processing+0x320>)
 8015906:	681b      	ldr	r3, [r3, #0]
 8015908:	683a      	ldr	r2, [r7, #0]
 801590a:	6892      	ldr	r2, [r2, #8]
 801590c:	4610      	mov	r0, r2
                    (otMessageInfo*) p_notification->Data[1],
 801590e:	683a      	ldr	r2, [r7, #0]
 8015910:	68d2      	ldr	r2, [r2, #12]
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 8015912:	4611      	mov	r1, r2
                    (void*) p_notification->Data[2]);
 8015914:	683a      	ldr	r2, [r7, #0]
 8015916:	6912      	ldr	r2, [r2, #16]
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 8015918:	4798      	blx	r3
        }
        break;
 801591a:	e0dd      	b.n	8015ad8 <OpenThread_CallBack_Processing+0x3cc>
#if OPENTHREAD_FTD
    case MSG_M0TOM4_THREAD_FTD_CHILD_TABLE_CALLBACK:
        if (otThreadChildTableCallbackCb != NULL)
 801591c:	4b44      	ldr	r3, [pc, #272]	; (8015a30 <OpenThread_CallBack_Processing+0x324>)
 801591e:	681b      	ldr	r3, [r3, #0]
 8015920:	2b00      	cmp	r3, #0
 8015922:	f000 80db 	beq.w	8015adc <OpenThread_CallBack_Processing+0x3d0>
        {
            otThreadChildTableCallbackCb((otThreadChildTableEvent) p_notification->Data[0],
 8015926:	4b42      	ldr	r3, [pc, #264]	; (8015a30 <OpenThread_CallBack_Processing+0x324>)
 8015928:	681b      	ldr	r3, [r3, #0]
 801592a:	683a      	ldr	r2, [r7, #0]
 801592c:	6892      	ldr	r2, [r2, #8]
 801592e:	b2d0      	uxtb	r0, r2
                    (const otChildInfo *) p_notification->Data[1]);
 8015930:	683a      	ldr	r2, [r7, #0]
 8015932:	68d2      	ldr	r2, [r2, #12]
            otThreadChildTableCallbackCb((otThreadChildTableEvent) p_notification->Data[0],
 8015934:	4611      	mov	r1, r2
 8015936:	4798      	blx	r3
        }
        break;
 8015938:	e0d0      	b.n	8015adc <OpenThread_CallBack_Processing+0x3d0>
#endif
    case MSG_M0TOM4_COMMISSIONER_ENERGY_REPORT_CALLBACK:
        if (otCommissionerEnergyReportCb != NULL)
 801593a:	4b3e      	ldr	r3, [pc, #248]	; (8015a34 <OpenThread_CallBack_Processing+0x328>)
 801593c:	681b      	ldr	r3, [r3, #0]
 801593e:	2b00      	cmp	r3, #0
 8015940:	f000 80ce 	beq.w	8015ae0 <OpenThread_CallBack_Processing+0x3d4>
        {
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 8015944:	4b3b      	ldr	r3, [pc, #236]	; (8015a34 <OpenThread_CallBack_Processing+0x328>)
 8015946:	681c      	ldr	r4, [r3, #0]
 8015948:	683b      	ldr	r3, [r7, #0]
 801594a:	6898      	ldr	r0, [r3, #8]
                    (uint8_t*) p_notification->Data[1],
 801594c:	683b      	ldr	r3, [r7, #0]
 801594e:	68db      	ldr	r3, [r3, #12]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 8015950:	4619      	mov	r1, r3
                    (uint8_t) p_notification->Data[2],
 8015952:	683b      	ldr	r3, [r7, #0]
 8015954:	691b      	ldr	r3, [r3, #16]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 8015956:	b2da      	uxtb	r2, r3
                    (void*) p_notification->Data[3]);
 8015958:	683b      	ldr	r3, [r7, #0]
 801595a:	695b      	ldr	r3, [r3, #20]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 801595c:	47a0      	blx	r4
        }
        break;
 801595e:	e0bf      	b.n	8015ae0 <OpenThread_CallBack_Processing+0x3d4>
    case MSG_M0TOM4_DNS_RESPONSE_HANDLER:
        if (otDnsResponseHandlerCb != NULL)
 8015960:	4b35      	ldr	r3, [pc, #212]	; (8015a38 <OpenThread_CallBack_Processing+0x32c>)
 8015962:	681b      	ldr	r3, [r3, #0]
 8015964:	2b00      	cmp	r3, #0
 8015966:	f000 80bd 	beq.w	8015ae4 <OpenThread_CallBack_Processing+0x3d8>
        {
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 801596a:	4b33      	ldr	r3, [pc, #204]	; (8015a38 <OpenThread_CallBack_Processing+0x32c>)
 801596c:	681c      	ldr	r4, [r3, #0]
 801596e:	683b      	ldr	r3, [r7, #0]
 8015970:	689b      	ldr	r3, [r3, #8]
 8015972:	4618      	mov	r0, r3
                    (char*) p_notification->Data[1],
 8015974:	683b      	ldr	r3, [r7, #0]
 8015976:	68db      	ldr	r3, [r3, #12]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 8015978:	4619      	mov	r1, r3
                    (otIp6Address*) p_notification->Data[2],
 801597a:	683b      	ldr	r3, [r7, #0]
 801597c:	691b      	ldr	r3, [r3, #16]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 801597e:	461d      	mov	r5, r3
                    (uint32_t) p_notification->Data[3],
 8015980:	683b      	ldr	r3, [r7, #0]
 8015982:	695a      	ldr	r2, [r3, #20]
                    (otError) p_notification->Data[4]);
 8015984:	683b      	ldr	r3, [r7, #0]
 8015986:	699b      	ldr	r3, [r3, #24]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 8015988:	b2db      	uxtb	r3, r3
 801598a:	9300      	str	r3, [sp, #0]
 801598c:	4613      	mov	r3, r2
 801598e:	462a      	mov	r2, r5
 8015990:	47a0      	blx	r4
        }
        break;
 8015992:	e0a7      	b.n	8015ae4 <OpenThread_CallBack_Processing+0x3d8>
    case MSG_M0TOM4_ICMP6_RECEIVE_CALLBACK:
        if (otIcmp6ReceiveCb != NULL)
 8015994:	4b29      	ldr	r3, [pc, #164]	; (8015a3c <OpenThread_CallBack_Processing+0x330>)
 8015996:	681b      	ldr	r3, [r3, #0]
 8015998:	2b00      	cmp	r3, #0
 801599a:	f000 80a5 	beq.w	8015ae8 <OpenThread_CallBack_Processing+0x3dc>
        {
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 801599e:	4b27      	ldr	r3, [pc, #156]	; (8015a3c <OpenThread_CallBack_Processing+0x330>)
 80159a0:	681c      	ldr	r4, [r3, #0]
 80159a2:	683b      	ldr	r3, [r7, #0]
 80159a4:	689b      	ldr	r3, [r3, #8]
 80159a6:	4618      	mov	r0, r3
                    (otMessage*) p_notification->Data[1],
 80159a8:	683b      	ldr	r3, [r7, #0]
 80159aa:	68db      	ldr	r3, [r3, #12]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 80159ac:	4619      	mov	r1, r3
                    (otMessageInfo*) p_notification->Data[2],
 80159ae:	683b      	ldr	r3, [r7, #0]
 80159b0:	691b      	ldr	r3, [r3, #16]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 80159b2:	461a      	mov	r2, r3
                    (otIcmp6Header*) p_notification->Data[3]);
 80159b4:	683b      	ldr	r3, [r7, #0]
 80159b6:	695b      	ldr	r3, [r3, #20]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 80159b8:	47a0      	blx	r4
        }
        break;
 80159ba:	e095      	b.n	8015ae8 <OpenThread_CallBack_Processing+0x3dc>
    case MSG_M0TOM4_JOINER_CALLBACK:
        if (otJoinerCb != NULL)
 80159bc:	4b20      	ldr	r3, [pc, #128]	; (8015a40 <OpenThread_CallBack_Processing+0x334>)
 80159be:	681b      	ldr	r3, [r3, #0]
 80159c0:	2b00      	cmp	r3, #0
 80159c2:	f000 8093 	beq.w	8015aec <OpenThread_CallBack_Processing+0x3e0>
        {
            otJoinerCb((otError) p_notification->Data[0],
 80159c6:	4b1e      	ldr	r3, [pc, #120]	; (8015a40 <OpenThread_CallBack_Processing+0x334>)
 80159c8:	681b      	ldr	r3, [r3, #0]
 80159ca:	683a      	ldr	r2, [r7, #0]
 80159cc:	6892      	ldr	r2, [r2, #8]
 80159ce:	b2d0      	uxtb	r0, r2
                    (void*) p_notification->Data[1]);
 80159d0:	683a      	ldr	r2, [r7, #0]
 80159d2:	68d2      	ldr	r2, [r2, #12]
            otJoinerCb((otError) p_notification->Data[0],
 80159d4:	4611      	mov	r1, r2
 80159d6:	4798      	blx	r3
        }
        break;
 80159d8:	e088      	b.n	8015aec <OpenThread_CallBack_Processing+0x3e0>
    case MSG_M0TOM4_LINK_RAW_RECEIVE_DONE:
        if (otLinkRawReceiveDoneCb != NULL)
 80159da:	4b1a      	ldr	r3, [pc, #104]	; (8015a44 <OpenThread_CallBack_Processing+0x338>)
 80159dc:	681b      	ldr	r3, [r3, #0]
 80159de:	2b00      	cmp	r3, #0
 80159e0:	f000 8086 	beq.w	8015af0 <OpenThread_CallBack_Processing+0x3e4>
        {
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 80159e4:	4b17      	ldr	r3, [pc, #92]	; (8015a44 <OpenThread_CallBack_Processing+0x338>)
 80159e6:	681b      	ldr	r3, [r3, #0]
 80159e8:	683a      	ldr	r2, [r7, #0]
 80159ea:	6892      	ldr	r2, [r2, #8]
 80159ec:	4610      	mov	r0, r2
                    (otRadioFrame*) p_notification->Data[1],
 80159ee:	683a      	ldr	r2, [r7, #0]
 80159f0:	68d2      	ldr	r2, [r2, #12]
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 80159f2:	4611      	mov	r1, r2
                    (otError) p_notification->Data[2]);
 80159f4:	683a      	ldr	r2, [r7, #0]
 80159f6:	6912      	ldr	r2, [r2, #16]
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 80159f8:	b2d2      	uxtb	r2, r2
 80159fa:	4798      	blx	r3
        }
        break;
 80159fc:	e078      	b.n	8015af0 <OpenThread_CallBack_Processing+0x3e4>
 80159fe:	bf00      	nop
 8015a00:	200275b0 	.word	0x200275b0
 8015a04:	200289d0 	.word	0x200289d0
 8015a08:	200275f0 	.word	0x200275f0
 8015a0c:	200275f4 	.word	0x200275f4
 8015a10:	200289cc 	.word	0x200289cc
 8015a14:	200275f8 	.word	0x200275f8
 8015a18:	200275b8 	.word	0x200275b8
 8015a1c:	200275b4 	.word	0x200275b4
 8015a20:	200275bc 	.word	0x200275bc
 8015a24:	200275c0 	.word	0x200275c0
 8015a28:	200275c4 	.word	0x200275c4
 8015a2c:	200275c8 	.word	0x200275c8
 8015a30:	200275cc 	.word	0x200275cc
 8015a34:	200275d0 	.word	0x200275d0
 8015a38:	200275d4 	.word	0x200275d4
 8015a3c:	200275d8 	.word	0x200275d8
 8015a40:	200275dc 	.word	0x200275dc
 8015a44:	200275e0 	.word	0x200275e0
    case MSG_M0TOM4_LINK_RAW_TRANSMIT_DONE:
        if (otLinkRawTransmitDoneCb != NULL)
 8015a48:	4b30      	ldr	r3, [pc, #192]	; (8015b0c <OpenThread_CallBack_Processing+0x400>)
 8015a4a:	681b      	ldr	r3, [r3, #0]
 8015a4c:	2b00      	cmp	r3, #0
 8015a4e:	d051      	beq.n	8015af4 <OpenThread_CallBack_Processing+0x3e8>
        {
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 8015a50:	4b2e      	ldr	r3, [pc, #184]	; (8015b0c <OpenThread_CallBack_Processing+0x400>)
 8015a52:	681c      	ldr	r4, [r3, #0]
 8015a54:	683b      	ldr	r3, [r7, #0]
 8015a56:	689b      	ldr	r3, [r3, #8]
 8015a58:	4618      	mov	r0, r3
                    (otRadioFrame*) p_notification->Data[1],
 8015a5a:	683b      	ldr	r3, [r7, #0]
 8015a5c:	68db      	ldr	r3, [r3, #12]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 8015a5e:	4619      	mov	r1, r3
                    (otRadioFrame*) p_notification->Data[2],
 8015a60:	683b      	ldr	r3, [r7, #0]
 8015a62:	691b      	ldr	r3, [r3, #16]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 8015a64:	461a      	mov	r2, r3
                    (otError) p_notification->Data[3]);
 8015a66:	683b      	ldr	r3, [r7, #0]
 8015a68:	695b      	ldr	r3, [r3, #20]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 8015a6a:	b2db      	uxtb	r3, r3
 8015a6c:	47a0      	blx	r4
        }
        break;
 8015a6e:	e041      	b.n	8015af4 <OpenThread_CallBack_Processing+0x3e8>
    case MSG_M0TOM4_LINK_RAW_ENERGY_SCAN_DONE:
        if (otLinkRawEnergyScanDoneCb != NULL)
 8015a70:	4b27      	ldr	r3, [pc, #156]	; (8015b10 <OpenThread_CallBack_Processing+0x404>)
 8015a72:	681b      	ldr	r3, [r3, #0]
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	d03f      	beq.n	8015af8 <OpenThread_CallBack_Processing+0x3ec>
        {
            otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 8015a78:	4b25      	ldr	r3, [pc, #148]	; (8015b10 <OpenThread_CallBack_Processing+0x404>)
 8015a7a:	681b      	ldr	r3, [r3, #0]
 8015a7c:	683a      	ldr	r2, [r7, #0]
 8015a7e:	6892      	ldr	r2, [r2, #8]
 8015a80:	4610      	mov	r0, r2
                    (int8_t) p_notification->Data[1]);
 8015a82:	683a      	ldr	r2, [r7, #0]
 8015a84:	68d2      	ldr	r2, [r2, #12]
            otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 8015a86:	b252      	sxtb	r2, r2
 8015a88:	4611      	mov	r1, r2
 8015a8a:	4798      	blx	r3
        }
        break;
 8015a8c:	e034      	b.n	8015af8 <OpenThread_CallBack_Processing+0x3ec>
    case MSG_M0TOM4_UDP_RECEIVE:
        if (otUdpReceiveCb != NULL)
 8015a8e:	4b21      	ldr	r3, [pc, #132]	; (8015b14 <OpenThread_CallBack_Processing+0x408>)
 8015a90:	681b      	ldr	r3, [r3, #0]
 8015a92:	2b00      	cmp	r3, #0
 8015a94:	d032      	beq.n	8015afc <OpenThread_CallBack_Processing+0x3f0>
        {
            otUdpReceiveCb((void*) p_notification->Data[0],
 8015a96:	4b1f      	ldr	r3, [pc, #124]	; (8015b14 <OpenThread_CallBack_Processing+0x408>)
 8015a98:	681b      	ldr	r3, [r3, #0]
 8015a9a:	683a      	ldr	r2, [r7, #0]
 8015a9c:	6892      	ldr	r2, [r2, #8]
 8015a9e:	4610      	mov	r0, r2
                    (otMessage*) p_notification->Data[1],
 8015aa0:	683a      	ldr	r2, [r7, #0]
 8015aa2:	68d2      	ldr	r2, [r2, #12]
            otUdpReceiveCb((void*) p_notification->Data[0],
 8015aa4:	4611      	mov	r1, r2
                    (otMessageInfo*) p_notification->Data[2]);
 8015aa6:	683a      	ldr	r2, [r7, #0]
 8015aa8:	6912      	ldr	r2, [r2, #16]
            otUdpReceiveCb((void*) p_notification->Data[0],
 8015aaa:	4798      	blx	r3
        }
        break;
 8015aac:	e026      	b.n	8015afc <OpenThread_CallBack_Processing+0x3f0>
                    (void *) p_notification->Data[1]);
        }
        break;
#endif
    default:
        status = HAL_ERROR;
 8015aae:	2301      	movs	r3, #1
 8015ab0:	71fb      	strb	r3, [r7, #7]
        break;
 8015ab2:	e024      	b.n	8015afe <OpenThread_CallBack_Processing+0x3f2>
        break;
 8015ab4:	bf00      	nop
 8015ab6:	e022      	b.n	8015afe <OpenThread_CallBack_Processing+0x3f2>
        break;
 8015ab8:	bf00      	nop
 8015aba:	e020      	b.n	8015afe <OpenThread_CallBack_Processing+0x3f2>
        break;
 8015abc:	bf00      	nop
 8015abe:	e01e      	b.n	8015afe <OpenThread_CallBack_Processing+0x3f2>
        break;
 8015ac0:	bf00      	nop
 8015ac2:	e01c      	b.n	8015afe <OpenThread_CallBack_Processing+0x3f2>
        break;
 8015ac4:	bf00      	nop
 8015ac6:	e01a      	b.n	8015afe <OpenThread_CallBack_Processing+0x3f2>
        break;
 8015ac8:	bf00      	nop
 8015aca:	e018      	b.n	8015afe <OpenThread_CallBack_Processing+0x3f2>
        break;
 8015acc:	bf00      	nop
 8015ace:	e016      	b.n	8015afe <OpenThread_CallBack_Processing+0x3f2>
        break;
 8015ad0:	bf00      	nop
 8015ad2:	e014      	b.n	8015afe <OpenThread_CallBack_Processing+0x3f2>
        break;
 8015ad4:	bf00      	nop
 8015ad6:	e012      	b.n	8015afe <OpenThread_CallBack_Processing+0x3f2>
        break;
 8015ad8:	bf00      	nop
 8015ada:	e010      	b.n	8015afe <OpenThread_CallBack_Processing+0x3f2>
        break;
 8015adc:	bf00      	nop
 8015ade:	e00e      	b.n	8015afe <OpenThread_CallBack_Processing+0x3f2>
        break;
 8015ae0:	bf00      	nop
 8015ae2:	e00c      	b.n	8015afe <OpenThread_CallBack_Processing+0x3f2>
        break;
 8015ae4:	bf00      	nop
 8015ae6:	e00a      	b.n	8015afe <OpenThread_CallBack_Processing+0x3f2>
        break;
 8015ae8:	bf00      	nop
 8015aea:	e008      	b.n	8015afe <OpenThread_CallBack_Processing+0x3f2>
        break;
 8015aec:	bf00      	nop
 8015aee:	e006      	b.n	8015afe <OpenThread_CallBack_Processing+0x3f2>
        break;
 8015af0:	bf00      	nop
 8015af2:	e004      	b.n	8015afe <OpenThread_CallBack_Processing+0x3f2>
        break;
 8015af4:	bf00      	nop
 8015af6:	e002      	b.n	8015afe <OpenThread_CallBack_Processing+0x3f2>
        break;
 8015af8:	bf00      	nop
 8015afa:	e000      	b.n	8015afe <OpenThread_CallBack_Processing+0x3f2>
        break;
 8015afc:	bf00      	nop
    }

    TL_THREAD_SendAck();
 8015afe:	f000 fdbd 	bl	801667c <TL_THREAD_SendAck>
    return status;
 8015b02:	79fb      	ldrb	r3, [r7, #7]

}
 8015b04:	4618      	mov	r0, r3
 8015b06:	3708      	adds	r7, #8
 8015b08:	46bd      	mov	sp, r7
 8015b0a:	bdb0      	pop	{r4, r5, r7, pc}
 8015b0c:	200275e4 	.word	0x200275e4
 8015b10:	200275e8 	.word	0x200275e8
 8015b14:	200275ec 	.word	0x200275ec

08015b18 <otPlatRadioSetTransmitPower>:
 * @retval OT_ERROR_NONE             Successfully set the transmit power.
 * @retval OT_ERROR_NOT_IMPLEMENTED  Transmit power configuration via dBm is not implemented.
 *
 */
otError otPlatRadioSetTransmitPower(otInstance *aInstance, int8_t aPower)
{
 8015b18:	b580      	push	{r7, lr}
 8015b1a:	b084      	sub	sp, #16
 8015b1c:	af00      	add	r7, sp, #0
 8015b1e:	6078      	str	r0, [r7, #4]
 8015b20:	460b      	mov	r3, r1
 8015b22:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 8015b24:	f003 fa98 	bl	8019058 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8015b28:	f003 fa34 	bl	8018f94 <THREAD_Get_OTCmdPayloadBuffer>
 8015b2c:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_RADIO_SET_TRANSMIT_POWER;
 8015b2e:	68fb      	ldr	r3, [r7, #12]
 8015b30:	2200      	movs	r2, #0
 8015b32:	f042 024d 	orr.w	r2, r2, #77	; 0x4d
 8015b36:	701a      	strb	r2, [r3, #0]
 8015b38:	2200      	movs	r2, #0
 8015b3a:	f042 0201 	orr.w	r2, r2, #1
 8015b3e:	705a      	strb	r2, [r3, #1]
 8015b40:	2200      	movs	r2, #0
 8015b42:	709a      	strb	r2, [r3, #2]
 8015b44:	2200      	movs	r2, #0
 8015b46:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8015b48:	68fb      	ldr	r3, [r7, #12]
 8015b4a:	2200      	movs	r2, #0
 8015b4c:	f042 0201 	orr.w	r2, r2, #1
 8015b50:	711a      	strb	r2, [r3, #4]
 8015b52:	2200      	movs	r2, #0
 8015b54:	715a      	strb	r2, [r3, #5]
 8015b56:	2200      	movs	r2, #0
 8015b58:	719a      	strb	r2, [r3, #6]
 8015b5a:	2200      	movs	r2, #0
 8015b5c:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aPower;
 8015b5e:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8015b62:	68fb      	ldr	r3, [r7, #12]
 8015b64:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8015b66:	f003 fa39 	bl	8018fdc <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8015b6a:	f003 fa1f 	bl	8018fac <THREAD_Get_OTCmdRspPayloadBuffer>
 8015b6e:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 8015b70:	68fb      	ldr	r3, [r7, #12]
 8015b72:	689b      	ldr	r3, [r3, #8]
 8015b74:	b2db      	uxtb	r3, r3
}
 8015b76:	4618      	mov	r0, r3
 8015b78:	3710      	adds	r7, #16
 8015b7a:	46bd      	mov	sp, r7
 8015b7c:	bd80      	pop	{r7, pc}

08015b7e <SHCI_C2_THREAD_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_THREAD_Init( void )
{
 8015b7e:	b580      	push	{r7, lr}
 8015b80:	b086      	sub	sp, #24
 8015b82:	af00      	add	r7, sp, #0
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8015b84:	1d3b      	adds	r3, r7, #4
 8015b86:	617b      	str	r3, [r7, #20]

  shci_send( SHCI_OPCODE_C2_THREAD_INIT,
 8015b88:	697b      	ldr	r3, [r7, #20]
 8015b8a:	2200      	movs	r2, #0
 8015b8c:	2100      	movs	r1, #0
 8015b8e:	f64f 4067 	movw	r0, #64615	; 0xfc67
 8015b92:	f000 f939 	bl	8015e08 <shci_send>
             0,
             0,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8015b96:	697b      	ldr	r3, [r7, #20]
 8015b98:	330b      	adds	r3, #11
 8015b9a:	78db      	ldrb	r3, [r3, #3]
}
 8015b9c:	4618      	mov	r0, r3
 8015b9e:	3718      	adds	r7, #24
 8015ba0:	46bd      	mov	sp, r7
 8015ba2:	bd80      	pop	{r7, pc}

08015ba4 <SHCI_C2_FLASH_StoreData>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_FLASH_StoreData( SHCI_C2_FLASH_Ip_t Ip )
{
 8015ba4:	b580      	push	{r7, lr}
 8015ba6:	b088      	sub	sp, #32
 8015ba8:	af00      	add	r7, sp, #0
 8015baa:	4603      	mov	r3, r0
 8015bac:	71fb      	strb	r3, [r7, #7]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8015bae:	f107 030c 	add.w	r3, r7, #12
 8015bb2:	61fb      	str	r3, [r7, #28]

  local_buffer[0] = Ip;
 8015bb4:	79fb      	ldrb	r3, [r7, #7]
 8015bb6:	733b      	strb	r3, [r7, #12]

  shci_send( SHCI_OPCODE_C2_FLASH_STORE_DATA,
 8015bb8:	f107 020c 	add.w	r2, r7, #12
 8015bbc:	69fb      	ldr	r3, [r7, #28]
 8015bbe:	2101      	movs	r1, #1
 8015bc0:	f64f 406b 	movw	r0, #64619	; 0xfc6b
 8015bc4:	f000 f920 	bl	8015e08 <shci_send>
             1,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8015bc8:	69fb      	ldr	r3, [r7, #28]
 8015bca:	330b      	adds	r3, #11
 8015bcc:	78db      	ldrb	r3, [r3, #3]
}
 8015bce:	4618      	mov	r0, r3
 8015bd0:	3720      	adds	r7, #32
 8015bd2:	46bd      	mov	sp, r7
 8015bd4:	bd80      	pop	{r7, pc}
	...

08015bd8 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8015bd8:	b480      	push	{r7}
 8015bda:	b08b      	sub	sp, #44	; 0x2c
 8015bdc:	af00      	add	r7, sp, #0
 8015bde:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8015be0:	2300      	movs	r3, #0
 8015be2:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8015be4:	2300      	movs	r3, #0
 8015be6:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8015be8:	2300      	movs	r3, #0
 8015bea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8015bec:	2300      	movs	r3, #0
 8015bee:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8015bf0:	2300      	movs	r3, #0
 8015bf2:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8015bf4:	2300      	movs	r3, #0
 8015bf6:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8015bf8:	2300      	movs	r3, #0
 8015bfa:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8015bfc:	2300      	movs	r3, #0
 8015bfe:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8015c00:	4b4a      	ldr	r3, [pc, #296]	; (8015d2c <SHCI_GetWirelessFwInfo+0x154>)
 8015c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015c04:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8015c08:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8015c0a:	693b      	ldr	r3, [r7, #16]
 8015c0c:	009b      	lsls	r3, r3, #2
 8015c0e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8015c12:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8015c16:	681b      	ldr	r3, [r3, #0]
 8015c18:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8015c1a:	68bb      	ldr	r3, [r7, #8]
 8015c1c:	681b      	ldr	r3, [r3, #0]
 8015c1e:	4a44      	ldr	r2, [pc, #272]	; (8015d30 <SHCI_GetWirelessFwInfo+0x158>)
 8015c20:	4293      	cmp	r3, r2
 8015c22:	d10f      	bne.n	8015c44 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8015c24:	68bb      	ldr	r3, [r7, #8]
 8015c26:	695b      	ldr	r3, [r3, #20]
 8015c28:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8015c2a:	68bb      	ldr	r3, [r7, #8]
 8015c2c:	699b      	ldr	r3, [r3, #24]
 8015c2e:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8015c30:	68bb      	ldr	r3, [r7, #8]
 8015c32:	69db      	ldr	r3, [r3, #28]
 8015c34:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8015c36:	68bb      	ldr	r3, [r7, #8]
 8015c38:	68db      	ldr	r3, [r3, #12]
 8015c3a:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8015c3c:	68bb      	ldr	r3, [r7, #8]
 8015c3e:	691b      	ldr	r3, [r3, #16]
 8015c40:	617b      	str	r3, [r7, #20]
 8015c42:	e01a      	b.n	8015c7a <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */

    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8015c44:	693b      	ldr	r3, [r7, #16]
 8015c46:	009b      	lsls	r3, r3, #2
 8015c48:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8015c4c:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8015c50:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8015c52:	68fb      	ldr	r3, [r7, #12]
 8015c54:	681b      	ldr	r3, [r3, #0]
 8015c56:	691b      	ldr	r3, [r3, #16]
 8015c58:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8015c5a:	68fb      	ldr	r3, [r7, #12]
 8015c5c:	681b      	ldr	r3, [r3, #0]
 8015c5e:	695b      	ldr	r3, [r3, #20]
 8015c60:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8015c62:	68fb      	ldr	r3, [r7, #12]
 8015c64:	681b      	ldr	r3, [r3, #0]
 8015c66:	699b      	ldr	r3, [r3, #24]
 8015c68:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8015c6a:	68fb      	ldr	r3, [r7, #12]
 8015c6c:	681b      	ldr	r3, [r3, #0]
 8015c6e:	685b      	ldr	r3, [r3, #4]
 8015c70:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8015c72:	68fb      	ldr	r3, [r7, #12]
 8015c74:	681b      	ldr	r3, [r3, #0]
 8015c76:	689b      	ldr	r3, [r3, #8]
 8015c78:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8015c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c7c:	0e1b      	lsrs	r3, r3, #24
 8015c7e:	b2da      	uxtb	r2, r3
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8015c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c86:	0c1b      	lsrs	r3, r3, #16
 8015c88:	b2da      	uxtb	r2, r3
 8015c8a:	687b      	ldr	r3, [r7, #4]
 8015c8c:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8015c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c90:	0a1b      	lsrs	r3, r3, #8
 8015c92:	b2da      	uxtb	r2, r3
 8015c94:	687b      	ldr	r3, [r7, #4]
 8015c96:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8015c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c9a:	091b      	lsrs	r3, r3, #4
 8015c9c:	b2db      	uxtb	r3, r3
 8015c9e:	f003 030f 	and.w	r3, r3, #15
 8015ca2:	b2da      	uxtb	r2, r3
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8015ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015caa:	b2db      	uxtb	r3, r3
 8015cac:	f003 030f 	and.w	r3, r3, #15
 8015cb0:	b2da      	uxtb	r2, r3
 8015cb2:	687b      	ldr	r3, [r7, #4]
 8015cb4:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8015cb6:	6a3b      	ldr	r3, [r7, #32]
 8015cb8:	0e1b      	lsrs	r3, r3, #24
 8015cba:	b2da      	uxtb	r2, r3
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8015cc0:	6a3b      	ldr	r3, [r7, #32]
 8015cc2:	0c1b      	lsrs	r3, r3, #16
 8015cc4:	b2da      	uxtb	r2, r3
 8015cc6:	687b      	ldr	r3, [r7, #4]
 8015cc8:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8015cca:	6a3b      	ldr	r3, [r7, #32]
 8015ccc:	0a1b      	lsrs	r3, r3, #8
 8015cce:	b2da      	uxtb	r2, r3
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8015cd4:	6a3b      	ldr	r3, [r7, #32]
 8015cd6:	b2da      	uxtb	r2, r3
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8015cdc:	69fb      	ldr	r3, [r7, #28]
 8015cde:	b2da      	uxtb	r2, r3
 8015ce0:	687b      	ldr	r3, [r7, #4]
 8015ce2:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8015ce4:	69bb      	ldr	r3, [r7, #24]
 8015ce6:	0e1b      	lsrs	r3, r3, #24
 8015ce8:	b2da      	uxtb	r2, r3
 8015cea:	687b      	ldr	r3, [r7, #4]
 8015cec:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8015cee:	69bb      	ldr	r3, [r7, #24]
 8015cf0:	0c1b      	lsrs	r3, r3, #16
 8015cf2:	b2da      	uxtb	r2, r3
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8015cf8:	69bb      	ldr	r3, [r7, #24]
 8015cfa:	0a1b      	lsrs	r3, r3, #8
 8015cfc:	b2da      	uxtb	r2, r3
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8015d02:	697b      	ldr	r3, [r7, #20]
 8015d04:	0e1b      	lsrs	r3, r3, #24
 8015d06:	b2da      	uxtb	r2, r3
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8015d0c:	697b      	ldr	r3, [r7, #20]
 8015d0e:	0c1b      	lsrs	r3, r3, #16
 8015d10:	b2da      	uxtb	r2, r3
 8015d12:	687b      	ldr	r3, [r7, #4]
 8015d14:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8015d16:	697b      	ldr	r3, [r7, #20]
 8015d18:	b2da      	uxtb	r2, r3
 8015d1a:	687b      	ldr	r3, [r7, #4]
 8015d1c:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8015d1e:	2300      	movs	r3, #0
}
 8015d20:	4618      	mov	r0, r3
 8015d22:	372c      	adds	r7, #44	; 0x2c
 8015d24:	46bd      	mov	sp, r7
 8015d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d2a:	4770      	bx	lr
 8015d2c:	58004000 	.word	0x58004000
 8015d30:	a94656b9 	.word	0xa94656b9

08015d34 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8015d34:	b580      	push	{r7, lr}
 8015d36:	b082      	sub	sp, #8
 8015d38:	af00      	add	r7, sp, #0
 8015d3a:	6078      	str	r0, [r7, #4]
 8015d3c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8015d3e:	683b      	ldr	r3, [r7, #0]
 8015d40:	685b      	ldr	r3, [r3, #4]
 8015d42:	4a08      	ldr	r2, [pc, #32]	; (8015d64 <shci_init+0x30>)
 8015d44:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8015d46:	4a08      	ldr	r2, [pc, #32]	; (8015d68 <shci_init+0x34>)
 8015d48:	687b      	ldr	r3, [r7, #4]
 8015d4a:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8015d4c:	4806      	ldr	r0, [pc, #24]	; (8015d68 <shci_init+0x34>)
 8015d4e:	f000 f911 	bl	8015f74 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8015d52:	683b      	ldr	r3, [r7, #0]
 8015d54:	681b      	ldr	r3, [r3, #0]
 8015d56:	4618      	mov	r0, r3
 8015d58:	f000 f894 	bl	8015e84 <TlInit>

  return;
 8015d5c:	bf00      	nop
}
 8015d5e:	3708      	adds	r7, #8
 8015d60:	46bd      	mov	sp, r7
 8015d62:	bd80      	pop	{r7, pc}
 8015d64:	2002761c 	.word	0x2002761c
 8015d68:	200275fc 	.word	0x200275fc

08015d6c <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8015d6c:	b580      	push	{r7, lr}
 8015d6e:	b084      	sub	sp, #16
 8015d70:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8015d72:	4822      	ldr	r0, [pc, #136]	; (8015dfc <shci_user_evt_proc+0x90>)
 8015d74:	f000 f922 	bl	8015fbc <LST_is_empty>
 8015d78:	4603      	mov	r3, r0
 8015d7a:	2b00      	cmp	r3, #0
 8015d7c:	d12b      	bne.n	8015dd6 <shci_user_evt_proc+0x6a>
 8015d7e:	4b20      	ldr	r3, [pc, #128]	; (8015e00 <shci_user_evt_proc+0x94>)
 8015d80:	781b      	ldrb	r3, [r3, #0]
 8015d82:	2b00      	cmp	r3, #0
 8015d84:	d027      	beq.n	8015dd6 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8015d86:	f107 030c 	add.w	r3, r7, #12
 8015d8a:	4619      	mov	r1, r3
 8015d8c:	481b      	ldr	r0, [pc, #108]	; (8015dfc <shci_user_evt_proc+0x90>)
 8015d8e:	f000 f99c 	bl	80160ca <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8015d92:	4b1c      	ldr	r3, [pc, #112]	; (8015e04 <shci_user_evt_proc+0x98>)
 8015d94:	69db      	ldr	r3, [r3, #28]
 8015d96:	2b00      	cmp	r3, #0
 8015d98:	d00c      	beq.n	8015db4 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8015d9a:	68fb      	ldr	r3, [r7, #12]
 8015d9c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8015d9e:	2301      	movs	r3, #1
 8015da0:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8015da2:	4b18      	ldr	r3, [pc, #96]	; (8015e04 <shci_user_evt_proc+0x98>)
 8015da4:	69db      	ldr	r3, [r3, #28]
 8015da6:	1d3a      	adds	r2, r7, #4
 8015da8:	4610      	mov	r0, r2
 8015daa:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8015dac:	793a      	ldrb	r2, [r7, #4]
 8015dae:	4b14      	ldr	r3, [pc, #80]	; (8015e00 <shci_user_evt_proc+0x94>)
 8015db0:	701a      	strb	r2, [r3, #0]
 8015db2:	e002      	b.n	8015dba <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8015db4:	4b12      	ldr	r3, [pc, #72]	; (8015e00 <shci_user_evt_proc+0x94>)
 8015db6:	2201      	movs	r2, #1
 8015db8:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8015dba:	4b11      	ldr	r3, [pc, #68]	; (8015e00 <shci_user_evt_proc+0x94>)
 8015dbc:	781b      	ldrb	r3, [r3, #0]
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	d004      	beq.n	8015dcc <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8015dc2:	68fb      	ldr	r3, [r7, #12]
 8015dc4:	4618      	mov	r0, r3
 8015dc6:	f000 fcd5 	bl	8016774 <TL_MM_EvtDone>
 8015dca:	e004      	b.n	8015dd6 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8015dcc:	68fb      	ldr	r3, [r7, #12]
 8015dce:	4619      	mov	r1, r3
 8015dd0:	480a      	ldr	r0, [pc, #40]	; (8015dfc <shci_user_evt_proc+0x90>)
 8015dd2:	f000 f913 	bl	8015ffc <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8015dd6:	4809      	ldr	r0, [pc, #36]	; (8015dfc <shci_user_evt_proc+0x90>)
 8015dd8:	f000 f8f0 	bl	8015fbc <LST_is_empty>
 8015ddc:	4603      	mov	r3, r0
 8015dde:	2b00      	cmp	r3, #0
 8015de0:	d107      	bne.n	8015df2 <shci_user_evt_proc+0x86>
 8015de2:	4b07      	ldr	r3, [pc, #28]	; (8015e00 <shci_user_evt_proc+0x94>)
 8015de4:	781b      	ldrb	r3, [r3, #0]
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	d003      	beq.n	8015df2 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8015dea:	4804      	ldr	r0, [pc, #16]	; (8015dfc <shci_user_evt_proc+0x90>)
 8015dec:	f7eb f9fa 	bl	80011e4 <shci_notify_asynch_evt>
  }


  return;
 8015df0:	bf00      	nop
 8015df2:	bf00      	nop
}
 8015df4:	3710      	adds	r7, #16
 8015df6:	46bd      	mov	sp, r7
 8015df8:	bd80      	pop	{r7, pc}
 8015dfa:	bf00      	nop
 8015dfc:	20000378 	.word	0x20000378
 8015e00:	20000388 	.word	0x20000388
 8015e04:	200275fc 	.word	0x200275fc

08015e08 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8015e08:	b580      	push	{r7, lr}
 8015e0a:	b084      	sub	sp, #16
 8015e0c:	af00      	add	r7, sp, #0
 8015e0e:	60ba      	str	r2, [r7, #8]
 8015e10:	607b      	str	r3, [r7, #4]
 8015e12:	4603      	mov	r3, r0
 8015e14:	81fb      	strh	r3, [r7, #14]
 8015e16:	460b      	mov	r3, r1
 8015e18:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8015e1a:	2000      	movs	r0, #0
 8015e1c:	f000 f864 	bl	8015ee8 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8015e20:	4b16      	ldr	r3, [pc, #88]	; (8015e7c <shci_send+0x74>)
 8015e22:	681b      	ldr	r3, [r3, #0]
 8015e24:	89fa      	ldrh	r2, [r7, #14]
 8015e26:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8015e2a:	4b14      	ldr	r3, [pc, #80]	; (8015e7c <shci_send+0x74>)
 8015e2c:	681b      	ldr	r3, [r3, #0]
 8015e2e:	7b7a      	ldrb	r2, [r7, #13]
 8015e30:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8015e32:	4b12      	ldr	r3, [pc, #72]	; (8015e7c <shci_send+0x74>)
 8015e34:	681b      	ldr	r3, [r3, #0]
 8015e36:	330c      	adds	r3, #12
 8015e38:	7b7a      	ldrb	r2, [r7, #13]
 8015e3a:	68b9      	ldr	r1, [r7, #8]
 8015e3c:	4618      	mov	r0, r3
 8015e3e:	f004 fd71 	bl	801a924 <memcpy>

  shciContext.io.Send(0,0);
 8015e42:	4b0f      	ldr	r3, [pc, #60]	; (8015e80 <shci_send+0x78>)
 8015e44:	691b      	ldr	r3, [r3, #16]
 8015e46:	2100      	movs	r1, #0
 8015e48:	2000      	movs	r0, #0
 8015e4a:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8015e4c:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8015e50:	f7eb f9e8 	bl	8001224 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	f103 0008 	add.w	r0, r3, #8
 8015e5a:	4b08      	ldr	r3, [pc, #32]	; (8015e7c <shci_send+0x74>)
 8015e5c:	6819      	ldr	r1, [r3, #0]
 8015e5e:	4b07      	ldr	r3, [pc, #28]	; (8015e7c <shci_send+0x74>)
 8015e60:	681b      	ldr	r3, [r3, #0]
 8015e62:	789b      	ldrb	r3, [r3, #2]
 8015e64:	3303      	adds	r3, #3
 8015e66:	461a      	mov	r2, r3
 8015e68:	f004 fd5c 	bl	801a924 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8015e6c:	2001      	movs	r0, #1
 8015e6e:	f000 f83b 	bl	8015ee8 <Cmd_SetStatus>

  return;
 8015e72:	bf00      	nop
}
 8015e74:	3710      	adds	r7, #16
 8015e76:	46bd      	mov	sp, r7
 8015e78:	bd80      	pop	{r7, pc}
 8015e7a:	bf00      	nop
 8015e7c:	20000384 	.word	0x20000384
 8015e80:	200275fc 	.word	0x200275fc

08015e84 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8015e84:	b580      	push	{r7, lr}
 8015e86:	b086      	sub	sp, #24
 8015e88:	af00      	add	r7, sp, #0
 8015e8a:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8015e8c:	4a10      	ldr	r2, [pc, #64]	; (8015ed0 <TlInit+0x4c>)
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8015e92:	4810      	ldr	r0, [pc, #64]	; (8015ed4 <TlInit+0x50>)
 8015e94:	f000 f882 	bl	8015f9c <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8015e98:	2001      	movs	r0, #1
 8015e9a:	f000 f825 	bl	8015ee8 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8015e9e:	4b0e      	ldr	r3, [pc, #56]	; (8015ed8 <TlInit+0x54>)
 8015ea0:	2201      	movs	r2, #1
 8015ea2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8015ea4:	4b0d      	ldr	r3, [pc, #52]	; (8015edc <TlInit+0x58>)
 8015ea6:	681b      	ldr	r3, [r3, #0]
 8015ea8:	2b00      	cmp	r3, #0
 8015eaa:	d00c      	beq.n	8015ec6 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8015eac:	687b      	ldr	r3, [r7, #4]
 8015eae:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8015eb0:	4b0b      	ldr	r3, [pc, #44]	; (8015ee0 <TlInit+0x5c>)
 8015eb2:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8015eb4:	4b0b      	ldr	r3, [pc, #44]	; (8015ee4 <TlInit+0x60>)
 8015eb6:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8015eb8:	4b08      	ldr	r3, [pc, #32]	; (8015edc <TlInit+0x58>)
 8015eba:	681b      	ldr	r3, [r3, #0]
 8015ebc:	f107 020c 	add.w	r2, r7, #12
 8015ec0:	4610      	mov	r0, r2
 8015ec2:	4798      	blx	r3
  }

  return;
 8015ec4:	bf00      	nop
 8015ec6:	bf00      	nop
}
 8015ec8:	3718      	adds	r7, #24
 8015eca:	46bd      	mov	sp, r7
 8015ecc:	bd80      	pop	{r7, pc}
 8015ece:	bf00      	nop
 8015ed0:	20000384 	.word	0x20000384
 8015ed4:	20000378 	.word	0x20000378
 8015ed8:	20000388 	.word	0x20000388
 8015edc:	200275fc 	.word	0x200275fc
 8015ee0:	08015f39 	.word	0x08015f39
 8015ee4:	08015f51 	.word	0x08015f51

08015ee8 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8015ee8:	b580      	push	{r7, lr}
 8015eea:	b082      	sub	sp, #8
 8015eec:	af00      	add	r7, sp, #0
 8015eee:	4603      	mov	r3, r0
 8015ef0:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8015ef2:	79fb      	ldrb	r3, [r7, #7]
 8015ef4:	2b00      	cmp	r3, #0
 8015ef6:	d10b      	bne.n	8015f10 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8015ef8:	4b0d      	ldr	r3, [pc, #52]	; (8015f30 <Cmd_SetStatus+0x48>)
 8015efa:	681b      	ldr	r3, [r3, #0]
 8015efc:	2b00      	cmp	r3, #0
 8015efe:	d003      	beq.n	8015f08 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8015f00:	4b0b      	ldr	r3, [pc, #44]	; (8015f30 <Cmd_SetStatus+0x48>)
 8015f02:	681b      	ldr	r3, [r3, #0]
 8015f04:	2000      	movs	r0, #0
 8015f06:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8015f08:	4b0a      	ldr	r3, [pc, #40]	; (8015f34 <Cmd_SetStatus+0x4c>)
 8015f0a:	2200      	movs	r2, #0
 8015f0c:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8015f0e:	e00b      	b.n	8015f28 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8015f10:	4b08      	ldr	r3, [pc, #32]	; (8015f34 <Cmd_SetStatus+0x4c>)
 8015f12:	2201      	movs	r2, #1
 8015f14:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8015f16:	4b06      	ldr	r3, [pc, #24]	; (8015f30 <Cmd_SetStatus+0x48>)
 8015f18:	681b      	ldr	r3, [r3, #0]
 8015f1a:	2b00      	cmp	r3, #0
 8015f1c:	d004      	beq.n	8015f28 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8015f1e:	4b04      	ldr	r3, [pc, #16]	; (8015f30 <Cmd_SetStatus+0x48>)
 8015f20:	681b      	ldr	r3, [r3, #0]
 8015f22:	2001      	movs	r0, #1
 8015f24:	4798      	blx	r3
  return;
 8015f26:	bf00      	nop
 8015f28:	bf00      	nop
}
 8015f2a:	3708      	adds	r7, #8
 8015f2c:	46bd      	mov	sp, r7
 8015f2e:	bd80      	pop	{r7, pc}
 8015f30:	2002761c 	.word	0x2002761c
 8015f34:	20000380 	.word	0x20000380

08015f38 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8015f38:	b580      	push	{r7, lr}
 8015f3a:	b082      	sub	sp, #8
 8015f3c:	af00      	add	r7, sp, #0
 8015f3e:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8015f40:	2000      	movs	r0, #0
 8015f42:	f7eb f95f 	bl	8001204 <shci_cmd_resp_release>

  return;
 8015f46:	bf00      	nop
}
 8015f48:	3708      	adds	r7, #8
 8015f4a:	46bd      	mov	sp, r7
 8015f4c:	bd80      	pop	{r7, pc}
	...

08015f50 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8015f50:	b580      	push	{r7, lr}
 8015f52:	b082      	sub	sp, #8
 8015f54:	af00      	add	r7, sp, #0
 8015f56:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8015f58:	6879      	ldr	r1, [r7, #4]
 8015f5a:	4805      	ldr	r0, [pc, #20]	; (8015f70 <TlUserEvtReceived+0x20>)
 8015f5c:	f000 f872 	bl	8016044 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8015f60:	4803      	ldr	r0, [pc, #12]	; (8015f70 <TlUserEvtReceived+0x20>)
 8015f62:	f7eb f93f 	bl	80011e4 <shci_notify_asynch_evt>

  return;
 8015f66:	bf00      	nop
}
 8015f68:	3708      	adds	r7, #8
 8015f6a:	46bd      	mov	sp, r7
 8015f6c:	bd80      	pop	{r7, pc}
 8015f6e:	bf00      	nop
 8015f70:	20000378 	.word	0x20000378

08015f74 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8015f74:	b480      	push	{r7}
 8015f76:	b083      	sub	sp, #12
 8015f78:	af00      	add	r7, sp, #0
 8015f7a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	4a05      	ldr	r2, [pc, #20]	; (8015f94 <shci_register_io_bus+0x20>)
 8015f80:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8015f82:	687b      	ldr	r3, [r7, #4]
 8015f84:	4a04      	ldr	r2, [pc, #16]	; (8015f98 <shci_register_io_bus+0x24>)
 8015f86:	611a      	str	r2, [r3, #16]

  return;
 8015f88:	bf00      	nop
}
 8015f8a:	370c      	adds	r7, #12
 8015f8c:	46bd      	mov	sp, r7
 8015f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f92:	4770      	bx	lr
 8015f94:	08016511 	.word	0x08016511
 8015f98:	08016565 	.word	0x08016565

08015f9c <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8015f9c:	b480      	push	{r7}
 8015f9e:	b083      	sub	sp, #12
 8015fa0:	af00      	add	r7, sp, #0
 8015fa2:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	687a      	ldr	r2, [r7, #4]
 8015fa8:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8015faa:	687b      	ldr	r3, [r7, #4]
 8015fac:	687a      	ldr	r2, [r7, #4]
 8015fae:	605a      	str	r2, [r3, #4]
}
 8015fb0:	bf00      	nop
 8015fb2:	370c      	adds	r7, #12
 8015fb4:	46bd      	mov	sp, r7
 8015fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fba:	4770      	bx	lr

08015fbc <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8015fbc:	b480      	push	{r7}
 8015fbe:	b087      	sub	sp, #28
 8015fc0:	af00      	add	r7, sp, #0
 8015fc2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015fc4:	f3ef 8310 	mrs	r3, PRIMASK
 8015fc8:	60fb      	str	r3, [r7, #12]
  return(result);
 8015fca:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8015fcc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8015fce:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8015fd0:	687b      	ldr	r3, [r7, #4]
 8015fd2:	681b      	ldr	r3, [r3, #0]
 8015fd4:	687a      	ldr	r2, [r7, #4]
 8015fd6:	429a      	cmp	r2, r3
 8015fd8:	d102      	bne.n	8015fe0 <LST_is_empty+0x24>
  {
    return_value = TRUE;
 8015fda:	2301      	movs	r3, #1
 8015fdc:	75fb      	strb	r3, [r7, #23]
 8015fde:	e001      	b.n	8015fe4 <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 8015fe0:	2300      	movs	r3, #0
 8015fe2:	75fb      	strb	r3, [r7, #23]
 8015fe4:	693b      	ldr	r3, [r7, #16]
 8015fe6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015fe8:	68bb      	ldr	r3, [r7, #8]
 8015fea:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8015fee:	7dfb      	ldrb	r3, [r7, #23]
}
 8015ff0:	4618      	mov	r0, r3
 8015ff2:	371c      	adds	r7, #28
 8015ff4:	46bd      	mov	sp, r7
 8015ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ffa:	4770      	bx	lr

08015ffc <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8015ffc:	b480      	push	{r7}
 8015ffe:	b087      	sub	sp, #28
 8016000:	af00      	add	r7, sp, #0
 8016002:	6078      	str	r0, [r7, #4]
 8016004:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016006:	f3ef 8310 	mrs	r3, PRIMASK
 801600a:	60fb      	str	r3, [r7, #12]
  return(result);
 801600c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 801600e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016010:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8016012:	687b      	ldr	r3, [r7, #4]
 8016014:	681a      	ldr	r2, [r3, #0]
 8016016:	683b      	ldr	r3, [r7, #0]
 8016018:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 801601a:	683b      	ldr	r3, [r7, #0]
 801601c:	687a      	ldr	r2, [r7, #4]
 801601e:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8016020:	687b      	ldr	r3, [r7, #4]
 8016022:	683a      	ldr	r2, [r7, #0]
 8016024:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8016026:	683b      	ldr	r3, [r7, #0]
 8016028:	681b      	ldr	r3, [r3, #0]
 801602a:	683a      	ldr	r2, [r7, #0]
 801602c:	605a      	str	r2, [r3, #4]
 801602e:	697b      	ldr	r3, [r7, #20]
 8016030:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016032:	693b      	ldr	r3, [r7, #16]
 8016034:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8016038:	bf00      	nop
 801603a:	371c      	adds	r7, #28
 801603c:	46bd      	mov	sp, r7
 801603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016042:	4770      	bx	lr

08016044 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8016044:	b480      	push	{r7}
 8016046:	b087      	sub	sp, #28
 8016048:	af00      	add	r7, sp, #0
 801604a:	6078      	str	r0, [r7, #4]
 801604c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801604e:	f3ef 8310 	mrs	r3, PRIMASK
 8016052:	60fb      	str	r3, [r7, #12]
  return(result);
 8016054:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8016056:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016058:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 801605a:	683b      	ldr	r3, [r7, #0]
 801605c:	687a      	ldr	r2, [r7, #4]
 801605e:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8016060:	687b      	ldr	r3, [r7, #4]
 8016062:	685a      	ldr	r2, [r3, #4]
 8016064:	683b      	ldr	r3, [r7, #0]
 8016066:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8016068:	687b      	ldr	r3, [r7, #4]
 801606a:	683a      	ldr	r2, [r7, #0]
 801606c:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 801606e:	683b      	ldr	r3, [r7, #0]
 8016070:	685b      	ldr	r3, [r3, #4]
 8016072:	683a      	ldr	r2, [r7, #0]
 8016074:	601a      	str	r2, [r3, #0]
 8016076:	697b      	ldr	r3, [r7, #20]
 8016078:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801607a:	693b      	ldr	r3, [r7, #16]
 801607c:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8016080:	bf00      	nop
 8016082:	371c      	adds	r7, #28
 8016084:	46bd      	mov	sp, r7
 8016086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801608a:	4770      	bx	lr

0801608c <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 801608c:	b480      	push	{r7}
 801608e:	b087      	sub	sp, #28
 8016090:	af00      	add	r7, sp, #0
 8016092:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016094:	f3ef 8310 	mrs	r3, PRIMASK
 8016098:	60fb      	str	r3, [r7, #12]
  return(result);
 801609a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 801609c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801609e:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 80160a0:	687b      	ldr	r3, [r7, #4]
 80160a2:	685b      	ldr	r3, [r3, #4]
 80160a4:	687a      	ldr	r2, [r7, #4]
 80160a6:	6812      	ldr	r2, [r2, #0]
 80160a8:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	681b      	ldr	r3, [r3, #0]
 80160ae:	687a      	ldr	r2, [r7, #4]
 80160b0:	6852      	ldr	r2, [r2, #4]
 80160b2:	605a      	str	r2, [r3, #4]
 80160b4:	697b      	ldr	r3, [r7, #20]
 80160b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80160b8:	693b      	ldr	r3, [r7, #16]
 80160ba:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80160be:	bf00      	nop
 80160c0:	371c      	adds	r7, #28
 80160c2:	46bd      	mov	sp, r7
 80160c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160c8:	4770      	bx	lr

080160ca <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 80160ca:	b580      	push	{r7, lr}
 80160cc:	b086      	sub	sp, #24
 80160ce:	af00      	add	r7, sp, #0
 80160d0:	6078      	str	r0, [r7, #4]
 80160d2:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80160d4:	f3ef 8310 	mrs	r3, PRIMASK
 80160d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80160da:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80160dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80160de:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	681a      	ldr	r2, [r3, #0]
 80160e4:	683b      	ldr	r3, [r7, #0]
 80160e6:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	681b      	ldr	r3, [r3, #0]
 80160ec:	4618      	mov	r0, r3
 80160ee:	f7ff ffcd 	bl	801608c <LST_remove_node>
 80160f2:	697b      	ldr	r3, [r7, #20]
 80160f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80160f6:	693b      	ldr	r3, [r7, #16]
 80160f8:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80160fc:	bf00      	nop
 80160fe:	3718      	adds	r7, #24
 8016100:	46bd      	mov	sp, r7
 8016102:	bd80      	pop	{r7, pc}

08016104 <otThreadSetEnabled>:
extern otHandleActiveScanResult otHandleActiveScanResultCb;
extern otReceiveDiagnosticGetCallback otReceiveDiagnosticGetCb;


OTAPI otError OTCALL otThreadSetEnabled(otInstance *aInstance, bool aEnabled)
{
 8016104:	b580      	push	{r7, lr}
 8016106:	b084      	sub	sp, #16
 8016108:	af00      	add	r7, sp, #0
 801610a:	6078      	str	r0, [r7, #4]
 801610c:	460b      	mov	r3, r1
 801610e:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 8016110:	f002 ffa2 	bl	8019058 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8016114:	f002 ff3e 	bl	8018f94 <THREAD_Get_OTCmdPayloadBuffer>
 8016118:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_ENABLED;
 801611a:	68fb      	ldr	r3, [r7, #12]
 801611c:	2200      	movs	r2, #0
 801611e:	f042 0242 	orr.w	r2, r2, #66	; 0x42
 8016122:	701a      	strb	r2, [r3, #0]
 8016124:	2200      	movs	r2, #0
 8016126:	705a      	strb	r2, [r3, #1]
 8016128:	2200      	movs	r2, #0
 801612a:	709a      	strb	r2, [r3, #2]
 801612c:	2200      	movs	r2, #0
 801612e:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8016130:	68fb      	ldr	r3, [r7, #12]
 8016132:	2200      	movs	r2, #0
 8016134:	f042 0201 	orr.w	r2, r2, #1
 8016138:	711a      	strb	r2, [r3, #4]
 801613a:	2200      	movs	r2, #0
 801613c:	715a      	strb	r2, [r3, #5]
 801613e:	2200      	movs	r2, #0
 8016140:	719a      	strb	r2, [r3, #6]
 8016142:	2200      	movs	r2, #0
 8016144:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 8016146:	78fa      	ldrb	r2, [r7, #3]
 8016148:	68fb      	ldr	r3, [r7, #12]
 801614a:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 801614c:	f002 ff46 	bl	8018fdc <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8016150:	f002 ff2c 	bl	8018fac <THREAD_Get_OTCmdRspPayloadBuffer>
 8016154:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8016156:	68fb      	ldr	r3, [r7, #12]
 8016158:	689b      	ldr	r3, [r3, #8]
 801615a:	b2db      	uxtb	r3, r3
}
 801615c:	4618      	mov	r0, r3
 801615e:	3710      	adds	r7, #16
 8016160:	46bd      	mov	sp, r7
 8016162:	bd80      	pop	{r7, pc}

08016164 <otThreadSetChildTimeout>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint32_t)p_ot_req->Data[0];
}

OTAPI void OTCALL otThreadSetChildTimeout(otInstance *aInstance, uint32_t aTimeout)
{
 8016164:	b580      	push	{r7, lr}
 8016166:	b084      	sub	sp, #16
 8016168:	af00      	add	r7, sp, #0
 801616a:	6078      	str	r0, [r7, #4]
 801616c:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 801616e:	f002 ff73 	bl	8019058 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8016172:	f002 ff0f 	bl	8018f94 <THREAD_Get_OTCmdPayloadBuffer>
 8016176:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_CHILD_TIMEOUT;
 8016178:	68fb      	ldr	r3, [r7, #12]
 801617a:	2200      	movs	r2, #0
 801617c:	f042 0249 	orr.w	r2, r2, #73	; 0x49
 8016180:	701a      	strb	r2, [r3, #0]
 8016182:	2200      	movs	r2, #0
 8016184:	705a      	strb	r2, [r3, #1]
 8016186:	2200      	movs	r2, #0
 8016188:	709a      	strb	r2, [r3, #2]
 801618a:	2200      	movs	r2, #0
 801618c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 801618e:	68fb      	ldr	r3, [r7, #12]
 8016190:	2200      	movs	r2, #0
 8016192:	f042 0201 	orr.w	r2, r2, #1
 8016196:	711a      	strb	r2, [r3, #4]
 8016198:	2200      	movs	r2, #0
 801619a:	715a      	strb	r2, [r3, #5]
 801619c:	2200      	movs	r2, #0
 801619e:	719a      	strb	r2, [r3, #6]
 80161a0:	2200      	movs	r2, #0
 80161a2:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aTimeout;
 80161a4:	68fb      	ldr	r3, [r7, #12]
 80161a6:	683a      	ldr	r2, [r7, #0]
 80161a8:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 80161aa:	f002 ff17 	bl	8018fdc <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80161ae:	f002 fefd 	bl	8018fac <THREAD_Get_OTCmdRspPayloadBuffer>
 80161b2:	60f8      	str	r0, [r7, #12]
}
 80161b4:	bf00      	nop
 80161b6:	3710      	adds	r7, #16
 80161b8:	46bd      	mov	sp, r7
 80161ba:	bd80      	pop	{r7, pc}

080161bc <otThreadSetExtendedPanId>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otExtendedPanId *)p_ot_req->Data[0];
}

OTAPI otError OTCALL otThreadSetExtendedPanId(otInstance *aInstance, const otExtendedPanId *aExtendedPanId)
{
 80161bc:	b580      	push	{r7, lr}
 80161be:	b084      	sub	sp, #16
 80161c0:	af00      	add	r7, sp, #0
 80161c2:	6078      	str	r0, [r7, #4]
 80161c4:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 80161c6:	f002 ff47 	bl	8019058 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80161ca:	f002 fee3 	bl	8018f94 <THREAD_Get_OTCmdPayloadBuffer>
 80161ce:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_EXTPANID;
 80161d0:	68fb      	ldr	r3, [r7, #12]
 80161d2:	2200      	movs	r2, #0
 80161d4:	f042 024b 	orr.w	r2, r2, #75	; 0x4b
 80161d8:	701a      	strb	r2, [r3, #0]
 80161da:	2200      	movs	r2, #0
 80161dc:	705a      	strb	r2, [r3, #1]
 80161de:	2200      	movs	r2, #0
 80161e0:	709a      	strb	r2, [r3, #2]
 80161e2:	2200      	movs	r2, #0
 80161e4:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 80161e6:	68fb      	ldr	r3, [r7, #12]
 80161e8:	2200      	movs	r2, #0
 80161ea:	f042 0201 	orr.w	r2, r2, #1
 80161ee:	711a      	strb	r2, [r3, #4]
 80161f0:	2200      	movs	r2, #0
 80161f2:	715a      	strb	r2, [r3, #5]
 80161f4:	2200      	movs	r2, #0
 80161f6:	719a      	strb	r2, [r3, #6]
 80161f8:	2200      	movs	r2, #0
 80161fa:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aExtendedPanId;
 80161fc:	683a      	ldr	r2, [r7, #0]
 80161fe:	68fb      	ldr	r3, [r7, #12]
 8016200:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8016202:	f002 feeb 	bl	8018fdc <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8016206:	f002 fed1 	bl	8018fac <THREAD_Get_OTCmdRspPayloadBuffer>
 801620a:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 801620c:	68fb      	ldr	r3, [r7, #12]
 801620e:	689b      	ldr	r3, [r3, #8]
 8016210:	b2db      	uxtb	r3, r3
}
 8016212:	4618      	mov	r0, r3
 8016214:	3710      	adds	r7, #16
 8016216:	46bd      	mov	sp, r7
 8016218:	bd80      	pop	{r7, pc}

0801621a <otThreadSetMasterKey>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otMasterKey *)p_ot_req->Data[0];
}

OTAPI otError OTCALL otThreadSetMasterKey(otInstance *aInstance, const otMasterKey *aKey)
{
 801621a:	b580      	push	{r7, lr}
 801621c:	b084      	sub	sp, #16
 801621e:	af00      	add	r7, sp, #0
 8016220:	6078      	str	r0, [r7, #4]
 8016222:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8016224:	f002 ff18 	bl	8019058 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8016228:	f002 feb4 	bl	8018f94 <THREAD_Get_OTCmdPayloadBuffer>
 801622c:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_MASTER_KEY;
 801622e:	68fb      	ldr	r3, [r7, #12]
 8016230:	2200      	movs	r2, #0
 8016232:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8016236:	701a      	strb	r2, [r3, #0]
 8016238:	2200      	movs	r2, #0
 801623a:	705a      	strb	r2, [r3, #1]
 801623c:	2200      	movs	r2, #0
 801623e:	709a      	strb	r2, [r3, #2]
 8016240:	2200      	movs	r2, #0
 8016242:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8016244:	68fb      	ldr	r3, [r7, #12]
 8016246:	2200      	movs	r2, #0
 8016248:	f042 0201 	orr.w	r2, r2, #1
 801624c:	711a      	strb	r2, [r3, #4]
 801624e:	2200      	movs	r2, #0
 8016250:	715a      	strb	r2, [r3, #5]
 8016252:	2200      	movs	r2, #0
 8016254:	719a      	strb	r2, [r3, #6]
 8016256:	2200      	movs	r2, #0
 8016258:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aKey;
 801625a:	683a      	ldr	r2, [r7, #0]
 801625c:	68fb      	ldr	r3, [r7, #12]
 801625e:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8016260:	f002 febc 	bl	8018fdc <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8016264:	f002 fea2 	bl	8018fac <THREAD_Get_OTCmdRspPayloadBuffer>
 8016268:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 801626a:	68fb      	ldr	r3, [r7, #12]
 801626c:	689b      	ldr	r3, [r3, #8]
 801626e:	b2db      	uxtb	r3, r3
}
 8016270:	4618      	mov	r0, r3
 8016272:	3710      	adds	r7, #16
 8016274:	46bd      	mov	sp, r7
 8016276:	bd80      	pop	{r7, pc}

08016278 <otThreadGetMeshLocalEid>:

OTAPI const otIp6Address *OTCALL otThreadGetMeshLocalEid(otInstance *aInstance)
{
 8016278:	b580      	push	{r7, lr}
 801627a:	b084      	sub	sp, #16
 801627c:	af00      	add	r7, sp, #0
 801627e:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8016280:	f002 feea 	bl	8019058 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8016284:	f002 fe86 	bl	8018f94 <THREAD_Get_OTCmdPayloadBuffer>
 8016288:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_MESH_LOCAL_EID;
 801628a:	68fb      	ldr	r3, [r7, #12]
 801628c:	2200      	movs	r2, #0
 801628e:	f042 0251 	orr.w	r2, r2, #81	; 0x51
 8016292:	701a      	strb	r2, [r3, #0]
 8016294:	2200      	movs	r2, #0
 8016296:	705a      	strb	r2, [r3, #1]
 8016298:	2200      	movs	r2, #0
 801629a:	709a      	strb	r2, [r3, #2]
 801629c:	2200      	movs	r2, #0
 801629e:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 80162a0:	68fb      	ldr	r3, [r7, #12]
 80162a2:	2200      	movs	r2, #0
 80162a4:	711a      	strb	r2, [r3, #4]
 80162a6:	2200      	movs	r2, #0
 80162a8:	715a      	strb	r2, [r3, #5]
 80162aa:	2200      	movs	r2, #0
 80162ac:	719a      	strb	r2, [r3, #6]
 80162ae:	2200      	movs	r2, #0
 80162b0:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 80162b2:	f002 fe93 	bl	8018fdc <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80162b6:	f002 fe79 	bl	8018fac <THREAD_Get_OTCmdRspPayloadBuffer>
 80162ba:	60f8      	str	r0, [r7, #12]
  return (otIp6Address *)p_ot_req->Data[0];
 80162bc:	68fb      	ldr	r3, [r7, #12]
 80162be:	689b      	ldr	r3, [r3, #8]
}
 80162c0:	4618      	mov	r0, r3
 80162c2:	3710      	adds	r7, #16
 80162c4:	46bd      	mov	sp, r7
 80162c6:	bd80      	pop	{r7, pc}

080162c8 <otThreadGetLinkLocalIp6Address>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

const otIp6Address *otThreadGetLinkLocalIp6Address(otInstance *aInstance)
{
 80162c8:	b580      	push	{r7, lr}
 80162ca:	b084      	sub	sp, #16
 80162cc:	af00      	add	r7, sp, #0
 80162ce:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 80162d0:	f002 fec2 	bl	8019058 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80162d4:	f002 fe5e 	bl	8018f94 <THREAD_Get_OTCmdPayloadBuffer>
 80162d8:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_LINK_LOCAL_IP6_ADDRESS;
 80162da:	68fb      	ldr	r3, [r7, #12]
 80162dc:	2200      	movs	r2, #0
 80162de:	f042 0254 	orr.w	r2, r2, #84	; 0x54
 80162e2:	701a      	strb	r2, [r3, #0]
 80162e4:	2200      	movs	r2, #0
 80162e6:	705a      	strb	r2, [r3, #1]
 80162e8:	2200      	movs	r2, #0
 80162ea:	709a      	strb	r2, [r3, #2]
 80162ec:	2200      	movs	r2, #0
 80162ee:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 80162f0:	68fb      	ldr	r3, [r7, #12]
 80162f2:	2200      	movs	r2, #0
 80162f4:	711a      	strb	r2, [r3, #4]
 80162f6:	2200      	movs	r2, #0
 80162f8:	715a      	strb	r2, [r3, #5]
 80162fa:	2200      	movs	r2, #0
 80162fc:	719a      	strb	r2, [r3, #6]
 80162fe:	2200      	movs	r2, #0
 8016300:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 8016302:	f002 fe6b 	bl	8018fdc <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8016306:	f002 fe51 	bl	8018fac <THREAD_Get_OTCmdRspPayloadBuffer>
 801630a:	60f8      	str	r0, [r7, #12]
  return (otIp6Address *)p_ot_req->Data[0];
 801630c:	68fb      	ldr	r3, [r7, #12]
 801630e:	689b      	ldr	r3, [r3, #8]
}
 8016310:	4618      	mov	r0, r3
 8016312:	3710      	adds	r7, #16
 8016314:	46bd      	mov	sp, r7
 8016316:	bd80      	pop	{r7, pc}

08016318 <otThreadSetNetworkName>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (char *)p_ot_req->Data[0];
}

OTAPI otError OTCALL otThreadSetNetworkName(otInstance *aInstance, const char *aNetworkName)
{
 8016318:	b580      	push	{r7, lr}
 801631a:	b084      	sub	sp, #16
 801631c:	af00      	add	r7, sp, #0
 801631e:	6078      	str	r0, [r7, #4]
 8016320:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8016322:	f002 fe99 	bl	8019058 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8016326:	f002 fe35 	bl	8018f94 <THREAD_Get_OTCmdPayloadBuffer>
 801632a:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_NETWORK_NAME;
 801632c:	68fb      	ldr	r3, [r7, #12]
 801632e:	2200      	movs	r2, #0
 8016330:	f042 0256 	orr.w	r2, r2, #86	; 0x56
 8016334:	701a      	strb	r2, [r3, #0]
 8016336:	2200      	movs	r2, #0
 8016338:	705a      	strb	r2, [r3, #1]
 801633a:	2200      	movs	r2, #0
 801633c:	709a      	strb	r2, [r3, #2]
 801633e:	2200      	movs	r2, #0
 8016340:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8016342:	68fb      	ldr	r3, [r7, #12]
 8016344:	2200      	movs	r2, #0
 8016346:	f042 0201 	orr.w	r2, r2, #1
 801634a:	711a      	strb	r2, [r3, #4]
 801634c:	2200      	movs	r2, #0
 801634e:	715a      	strb	r2, [r3, #5]
 8016350:	2200      	movs	r2, #0
 8016352:	719a      	strb	r2, [r3, #6]
 8016354:	2200      	movs	r2, #0
 8016356:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aNetworkName;
 8016358:	683a      	ldr	r2, [r7, #0]
 801635a:	68fb      	ldr	r3, [r7, #12]
 801635c:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 801635e:	f002 fe3d 	bl	8018fdc <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8016362:	f002 fe23 	bl	8018fac <THREAD_Get_OTCmdRspPayloadBuffer>
 8016366:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8016368:	68fb      	ldr	r3, [r7, #12]
 801636a:	689b      	ldr	r3, [r3, #8]
 801636c:	b2db      	uxtb	r3, r3
}
 801636e:	4618      	mov	r0, r3
 8016370:	3710      	adds	r7, #16
 8016372:	46bd      	mov	sp, r7
 8016374:	bd80      	pop	{r7, pc}

08016376 <otThreadGetDeviceRole>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

OTAPI otDeviceRole OTCALL otThreadGetDeviceRole(otInstance *aInstance)
{
 8016376:	b580      	push	{r7, lr}
 8016378:	b084      	sub	sp, #16
 801637a:	af00      	add	r7, sp, #0
 801637c:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 801637e:	f002 fe6b 	bl	8019058 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8016382:	f002 fe07 	bl	8018f94 <THREAD_Get_OTCmdPayloadBuffer>
 8016386:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_DEVICE_ROLE;
 8016388:	68fb      	ldr	r3, [r7, #12]
 801638a:	2200      	movs	r2, #0
 801638c:	f042 025e 	orr.w	r2, r2, #94	; 0x5e
 8016390:	701a      	strb	r2, [r3, #0]
 8016392:	2200      	movs	r2, #0
 8016394:	705a      	strb	r2, [r3, #1]
 8016396:	2200      	movs	r2, #0
 8016398:	709a      	strb	r2, [r3, #2]
 801639a:	2200      	movs	r2, #0
 801639c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 801639e:	68fb      	ldr	r3, [r7, #12]
 80163a0:	2200      	movs	r2, #0
 80163a2:	711a      	strb	r2, [r3, #4]
 80163a4:	2200      	movs	r2, #0
 80163a6:	715a      	strb	r2, [r3, #5]
 80163a8:	2200      	movs	r2, #0
 80163aa:	719a      	strb	r2, [r3, #6]
 80163ac:	2200      	movs	r2, #0
 80163ae:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 80163b0:	f002 fe14 	bl	8018fdc <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80163b4:	f002 fdfa 	bl	8018fac <THREAD_Get_OTCmdRspPayloadBuffer>
 80163b8:	60f8      	str	r0, [r7, #12]
  return (otDeviceRole)p_ot_req->Data[0];
 80163ba:	68fb      	ldr	r3, [r7, #12]
 80163bc:	689b      	ldr	r3, [r3, #8]
 80163be:	b2db      	uxtb	r3, r3
}
 80163c0:	4618      	mov	r0, r3
 80163c2:	3710      	adds	r7, #16
 80163c4:	46bd      	mov	sp, r7
 80163c6:	bd80      	pop	{r7, pc}

080163c8 <otThreadGetRloc16>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint32_t)p_ot_req->Data[0];
}

OTAPI uint16_t OTCALL otThreadGetRloc16(otInstance *aInstance)
{
 80163c8:	b580      	push	{r7, lr}
 80163ca:	b084      	sub	sp, #16
 80163cc:	af00      	add	r7, sp, #0
 80163ce:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 80163d0:	f002 fe42 	bl	8019058 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80163d4:	f002 fdde 	bl	8018f94 <THREAD_Get_OTCmdPayloadBuffer>
 80163d8:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_RLOC_16;
 80163da:	68fb      	ldr	r3, [r7, #12]
 80163dc:	2200      	movs	r2, #0
 80163de:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80163e2:	701a      	strb	r2, [r3, #0]
 80163e4:	2200      	movs	r2, #0
 80163e6:	705a      	strb	r2, [r3, #1]
 80163e8:	2200      	movs	r2, #0
 80163ea:	709a      	strb	r2, [r3, #2]
 80163ec:	2200      	movs	r2, #0
 80163ee:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 80163f0:	68fb      	ldr	r3, [r7, #12]
 80163f2:	2200      	movs	r2, #0
 80163f4:	711a      	strb	r2, [r3, #4]
 80163f6:	2200      	movs	r2, #0
 80163f8:	715a      	strb	r2, [r3, #5]
 80163fa:	2200      	movs	r2, #0
 80163fc:	719a      	strb	r2, [r3, #6]
 80163fe:	2200      	movs	r2, #0
 8016400:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 8016402:	f002 fdeb 	bl	8018fdc <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8016406:	f002 fdd1 	bl	8018fac <THREAD_Get_OTCmdRspPayloadBuffer>
 801640a:	60f8      	str	r0, [r7, #12]
  return (uint16_t)p_ot_req->Data[0];
 801640c:	68fb      	ldr	r3, [r7, #12]
 801640e:	689b      	ldr	r3, [r3, #8]
 8016410:	b29b      	uxth	r3, r3
}
 8016412:	4618      	mov	r0, r3
 8016414:	3710      	adds	r7, #16
 8016416:	46bd      	mov	sp, r7
 8016418:	bd80      	pop	{r7, pc}

0801641a <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 801641a:	b580      	push	{r7, lr}
 801641c:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 801641e:	f003 f8bb 	bl	8019598 <HW_IPCC_Enable>

  return;
 8016422:	bf00      	nop
}
 8016424:	bd80      	pop	{r7, pc}
	...

08016428 <TL_Init>:


void TL_Init( void )
{
 8016428:	b580      	push	{r7, lr}
 801642a:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 801642c:	4b10      	ldr	r3, [pc, #64]	; (8016470 <TL_Init+0x48>)
 801642e:	4a11      	ldr	r2, [pc, #68]	; (8016474 <TL_Init+0x4c>)
 8016430:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8016432:	4b0f      	ldr	r3, [pc, #60]	; (8016470 <TL_Init+0x48>)
 8016434:	4a10      	ldr	r2, [pc, #64]	; (8016478 <TL_Init+0x50>)
 8016436:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8016438:	4b0d      	ldr	r3, [pc, #52]	; (8016470 <TL_Init+0x48>)
 801643a:	4a10      	ldr	r2, [pc, #64]	; (801647c <TL_Init+0x54>)
 801643c:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 801643e:	4b0c      	ldr	r3, [pc, #48]	; (8016470 <TL_Init+0x48>)
 8016440:	4a0f      	ldr	r2, [pc, #60]	; (8016480 <TL_Init+0x58>)
 8016442:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_lld_ble_table = &TL_LldBleTable;
 8016444:	4b0a      	ldr	r3, [pc, #40]	; (8016470 <TL_Init+0x48>)
 8016446:	4a0f      	ldr	r2, [pc, #60]	; (8016484 <TL_Init+0x5c>)
 8016448:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 801644a:	4b09      	ldr	r3, [pc, #36]	; (8016470 <TL_Init+0x48>)
 801644c:	4a0e      	ldr	r2, [pc, #56]	; (8016488 <TL_Init+0x60>)
 801644e:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8016450:	4b07      	ldr	r3, [pc, #28]	; (8016470 <TL_Init+0x48>)
 8016452:	4a0e      	ldr	r2, [pc, #56]	; (801648c <TL_Init+0x64>)
 8016454:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8016456:	4b06      	ldr	r3, [pc, #24]	; (8016470 <TL_Init+0x48>)
 8016458:	4a0d      	ldr	r2, [pc, #52]	; (8016490 <TL_Init+0x68>)
 801645a:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 801645c:	4b04      	ldr	r3, [pc, #16]	; (8016470 <TL_Init+0x48>)
 801645e:	4a0d      	ldr	r2, [pc, #52]	; (8016494 <TL_Init+0x6c>)
 8016460:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8016462:	4b03      	ldr	r3, [pc, #12]	; (8016470 <TL_Init+0x48>)
 8016464:	4a0c      	ldr	r2, [pc, #48]	; (8016498 <TL_Init+0x70>)
 8016466:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8016468:	f003 f8aa 	bl	80195c0 <HW_IPCC_Init>

  return;
 801646c:	bf00      	nop
}
 801646e:	bd80      	pop	{r7, pc}
 8016470:	20030000 	.word	0x20030000
 8016474:	20030028 	.word	0x20030028
 8016478:	20030048 	.word	0x20030048
 801647c:	20030058 	.word	0x20030058
 8016480:	20030064 	.word	0x20030064
 8016484:	2003006c 	.word	0x2003006c
 8016488:	20030074 	.word	0x20030074
 801648c:	2003007c 	.word	0x2003007c
 8016490:	20030098 	.word	0x20030098
 8016494:	2003009c 	.word	0x2003009c
 8016498:	200300a8 	.word	0x200300a8

0801649c <HW_IPCC_BLE_RxEvtNot>:

  return 0;
}

void HW_IPCC_BLE_RxEvtNot(void)
{
 801649c:	b580      	push	{r7, lr}
 801649e:	b082      	sub	sp, #8
 80164a0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 80164a2:	e01c      	b.n	80164de <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 80164a4:	1d3b      	adds	r3, r7, #4
 80164a6:	4619      	mov	r1, r3
 80164a8:	4812      	ldr	r0, [pc, #72]	; (80164f4 <HW_IPCC_BLE_RxEvtNot+0x58>)
 80164aa:	f7ff fe0e 	bl	80160ca <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80164ae:	687b      	ldr	r3, [r7, #4]
 80164b0:	7a5b      	ldrb	r3, [r3, #9]
 80164b2:	2b0f      	cmp	r3, #15
 80164b4:	d003      	beq.n	80164be <HW_IPCC_BLE_RxEvtNot+0x22>
 80164b6:	687b      	ldr	r3, [r7, #4]
 80164b8:	7a5b      	ldrb	r3, [r3, #9]
 80164ba:	2b0e      	cmp	r3, #14
 80164bc:	d105      	bne.n	80164ca <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 80164be:	687b      	ldr	r3, [r7, #4]
 80164c0:	4619      	mov	r1, r3
 80164c2:	2002      	movs	r0, #2
 80164c4:	f000 f9ba 	bl	801683c <OutputDbgTrace>
 80164c8:	e004      	b.n	80164d4 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 80164ca:	687b      	ldr	r3, [r7, #4]
 80164cc:	4619      	mov	r1, r3
 80164ce:	2003      	movs	r0, #3
 80164d0:	f000 f9b4 	bl	801683c <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 80164d4:	4b08      	ldr	r3, [pc, #32]	; (80164f8 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 80164d6:	681b      	ldr	r3, [r3, #0]
 80164d8:	687a      	ldr	r2, [r7, #4]
 80164da:	4610      	mov	r0, r2
 80164dc:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 80164de:	4805      	ldr	r0, [pc, #20]	; (80164f4 <HW_IPCC_BLE_RxEvtNot+0x58>)
 80164e0:	f7ff fd6c 	bl	8015fbc <LST_is_empty>
 80164e4:	4603      	mov	r3, r0
 80164e6:	2b00      	cmp	r3, #0
 80164e8:	d0dc      	beq.n	80164a4 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 80164ea:	bf00      	nop
}
 80164ec:	3708      	adds	r7, #8
 80164ee:	46bd      	mov	sp, r7
 80164f0:	bd80      	pop	{r7, pc}
 80164f2:	bf00      	nop
 80164f4:	200300c4 	.word	0x200300c4
 80164f8:	20027628 	.word	0x20027628

080164fc <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 80164fc:	b580      	push	{r7, lr}
 80164fe:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8016500:	4b02      	ldr	r3, [pc, #8]	; (801650c <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8016502:	681b      	ldr	r3, [r3, #0]
 8016504:	4798      	blx	r3

  return;
 8016506:	bf00      	nop
}
 8016508:	bd80      	pop	{r7, pc}
 801650a:	bf00      	nop
 801650c:	2002762c 	.word	0x2002762c

08016510 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8016510:	b580      	push	{r7, lr}
 8016512:	b084      	sub	sp, #16
 8016514:	af00      	add	r7, sp, #0
 8016516:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8016518:	687b      	ldr	r3, [r7, #4]
 801651a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 801651c:	480d      	ldr	r0, [pc, #52]	; (8016554 <TL_SYS_Init+0x44>)
 801651e:	f7ff fd3d 	bl	8015f9c <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8016522:	4b0d      	ldr	r3, [pc, #52]	; (8016558 <TL_SYS_Init+0x48>)
 8016524:	68db      	ldr	r3, [r3, #12]
 8016526:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8016528:	68fb      	ldr	r3, [r7, #12]
 801652a:	689a      	ldr	r2, [r3, #8]
 801652c:	68bb      	ldr	r3, [r7, #8]
 801652e:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8016530:	68bb      	ldr	r3, [r7, #8]
 8016532:	4a08      	ldr	r2, [pc, #32]	; (8016554 <TL_SYS_Init+0x44>)
 8016534:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8016536:	f003 f871 	bl	801961c <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 801653a:	68fb      	ldr	r3, [r7, #12]
 801653c:	681b      	ldr	r3, [r3, #0]
 801653e:	4a07      	ldr	r2, [pc, #28]	; (801655c <TL_SYS_Init+0x4c>)
 8016540:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8016542:	68fb      	ldr	r3, [r7, #12]
 8016544:	685b      	ldr	r3, [r3, #4]
 8016546:	4a06      	ldr	r2, [pc, #24]	; (8016560 <TL_SYS_Init+0x50>)
 8016548:	6013      	str	r3, [r2, #0]

  return 0;
 801654a:	2300      	movs	r3, #0
}
 801654c:	4618      	mov	r0, r3
 801654e:	3710      	adds	r7, #16
 8016550:	46bd      	mov	sp, r7
 8016552:	bd80      	pop	{r7, pc}
 8016554:	200300cc 	.word	0x200300cc
 8016558:	20030000 	.word	0x20030000
 801655c:	20027630 	.word	0x20027630
 8016560:	20027634 	.word	0x20027634

08016564 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8016564:	b580      	push	{r7, lr}
 8016566:	b082      	sub	sp, #8
 8016568:	af00      	add	r7, sp, #0
 801656a:	6078      	str	r0, [r7, #4]
 801656c:	460b      	mov	r3, r1
 801656e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8016570:	4b09      	ldr	r3, [pc, #36]	; (8016598 <TL_SYS_SendCmd+0x34>)
 8016572:	68db      	ldr	r3, [r3, #12]
 8016574:	681b      	ldr	r3, [r3, #0]
 8016576:	2210      	movs	r2, #16
 8016578:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 801657a:	4b07      	ldr	r3, [pc, #28]	; (8016598 <TL_SYS_SendCmd+0x34>)
 801657c:	68db      	ldr	r3, [r3, #12]
 801657e:	681b      	ldr	r3, [r3, #0]
 8016580:	4619      	mov	r1, r3
 8016582:	2004      	movs	r0, #4
 8016584:	f000 f95a 	bl	801683c <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8016588:	f003 f852 	bl	8019630 <HW_IPCC_SYS_SendCmd>

  return 0;
 801658c:	2300      	movs	r3, #0
}
 801658e:	4618      	mov	r0, r3
 8016590:	3708      	adds	r7, #8
 8016592:	46bd      	mov	sp, r7
 8016594:	bd80      	pop	{r7, pc}
 8016596:	bf00      	nop
 8016598:	20030000 	.word	0x20030000

0801659c <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 801659c:	b580      	push	{r7, lr}
 801659e:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80165a0:	4b07      	ldr	r3, [pc, #28]	; (80165c0 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80165a2:	68db      	ldr	r3, [r3, #12]
 80165a4:	681b      	ldr	r3, [r3, #0]
 80165a6:	4619      	mov	r1, r3
 80165a8:	2005      	movs	r0, #5
 80165aa:	f000 f947 	bl	801683c <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80165ae:	4b05      	ldr	r3, [pc, #20]	; (80165c4 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 80165b0:	681b      	ldr	r3, [r3, #0]
 80165b2:	4a03      	ldr	r2, [pc, #12]	; (80165c0 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80165b4:	68d2      	ldr	r2, [r2, #12]
 80165b6:	6812      	ldr	r2, [r2, #0]
 80165b8:	4610      	mov	r0, r2
 80165ba:	4798      	blx	r3

  return;
 80165bc:	bf00      	nop
}
 80165be:	bd80      	pop	{r7, pc}
 80165c0:	20030000 	.word	0x20030000
 80165c4:	20027630 	.word	0x20027630

080165c8 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 80165c8:	b580      	push	{r7, lr}
 80165ca:	b082      	sub	sp, #8
 80165cc:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80165ce:	e00e      	b.n	80165ee <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 80165d0:	1d3b      	adds	r3, r7, #4
 80165d2:	4619      	mov	r1, r3
 80165d4:	480b      	ldr	r0, [pc, #44]	; (8016604 <HW_IPCC_SYS_EvtNot+0x3c>)
 80165d6:	f7ff fd78 	bl	80160ca <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 80165da:	687b      	ldr	r3, [r7, #4]
 80165dc:	4619      	mov	r1, r3
 80165de:	2006      	movs	r0, #6
 80165e0:	f000 f92c 	bl	801683c <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 80165e4:	4b08      	ldr	r3, [pc, #32]	; (8016608 <HW_IPCC_SYS_EvtNot+0x40>)
 80165e6:	681b      	ldr	r3, [r3, #0]
 80165e8:	687a      	ldr	r2, [r7, #4]
 80165ea:	4610      	mov	r0, r2
 80165ec:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80165ee:	4805      	ldr	r0, [pc, #20]	; (8016604 <HW_IPCC_SYS_EvtNot+0x3c>)
 80165f0:	f7ff fce4 	bl	8015fbc <LST_is_empty>
 80165f4:	4603      	mov	r3, r0
 80165f6:	2b00      	cmp	r3, #0
 80165f8:	d0ea      	beq.n	80165d0 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 80165fa:	bf00      	nop
}
 80165fc:	3708      	adds	r7, #8
 80165fe:	46bd      	mov	sp, r7
 8016600:	bd80      	pop	{r7, pc}
 8016602:	bf00      	nop
 8016604:	200300cc 	.word	0x200300cc
 8016608:	20027634 	.word	0x20027634

0801660c <TL_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void TL_THREAD_Init( TL_TH_Config_t *p_Config )
{
 801660c:	b580      	push	{r7, lr}
 801660e:	b084      	sub	sp, #16
 8016610:	af00      	add	r7, sp, #0
 8016612:	6078      	str	r0, [r7, #4]
  MB_ThreadTable_t  * p_thread_table;

  p_thread_table = TL_RefTable.p_thread_table;
 8016614:	4b0a      	ldr	r3, [pc, #40]	; (8016640 <TL_THREAD_Init+0x34>)
 8016616:	689b      	ldr	r3, [r3, #8]
 8016618:	60fb      	str	r3, [r7, #12]

  p_thread_table->clicmdrsp_buffer = p_Config->p_ThreadCliRspBuffer;
 801661a:	687b      	ldr	r3, [r7, #4]
 801661c:	685a      	ldr	r2, [r3, #4]
 801661e:	68fb      	ldr	r3, [r7, #12]
 8016620:	605a      	str	r2, [r3, #4]
  p_thread_table->otcmdrsp_buffer = p_Config->p_ThreadOtCmdRspBuffer;
 8016622:	687b      	ldr	r3, [r7, #4]
 8016624:	681a      	ldr	r2, [r3, #0]
 8016626:	68fb      	ldr	r3, [r7, #12]
 8016628:	609a      	str	r2, [r3, #8]
  p_thread_table->notack_buffer = p_Config->p_ThreadNotAckBuffer;
 801662a:	687b      	ldr	r3, [r7, #4]
 801662c:	689a      	ldr	r2, [r3, #8]
 801662e:	68fb      	ldr	r3, [r7, #12]
 8016630:	601a      	str	r2, [r3, #0]

  HW_IPCC_THREAD_Init();
 8016632:	f003 f823 	bl	801967c <HW_IPCC_THREAD_Init>

  return;
 8016636:	bf00      	nop
}
 8016638:	3710      	adds	r7, #16
 801663a:	46bd      	mov	sp, r7
 801663c:	bd80      	pop	{r7, pc}
 801663e:	bf00      	nop
 8016640:	20030000 	.word	0x20030000

08016644 <TL_OT_SendCmd>:

void TL_OT_SendCmd( void )
{
 8016644:	b580      	push	{r7, lr}
 8016646:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->otcmdrsp_buffer))->cmdserial.type = TL_OTCMD_PKT_TYPE;
 8016648:	4b04      	ldr	r3, [pc, #16]	; (801665c <TL_OT_SendCmd+0x18>)
 801664a:	689b      	ldr	r3, [r3, #8]
 801664c:	689b      	ldr	r3, [r3, #8]
 801664e:	2208      	movs	r2, #8
 8016650:	721a      	strb	r2, [r3, #8]

  HW_IPCC_OT_SendCmd();
 8016652:	f003 f821 	bl	8019698 <HW_IPCC_OT_SendCmd>

  return;
 8016656:	bf00      	nop
}
 8016658:	bd80      	pop	{r7, pc}
 801665a:	bf00      	nop
 801665c:	20030000 	.word	0x20030000

08016660 <TL_CLI_SendCmd>:

void TL_CLI_SendCmd( void )
{
 8016660:	b580      	push	{r7, lr}
 8016662:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->clicmdrsp_buffer))->cmdserial.type = TL_CLICMD_PKT_TYPE;
 8016664:	4b04      	ldr	r3, [pc, #16]	; (8016678 <TL_CLI_SendCmd+0x18>)
 8016666:	689b      	ldr	r3, [r3, #8]
 8016668:	685b      	ldr	r3, [r3, #4]
 801666a:	220a      	movs	r2, #10
 801666c:	721a      	strb	r2, [r3, #8]

  HW_IPCC_CLI_SendCmd();
 801666e:	f003 f821 	bl	80196b4 <HW_IPCC_CLI_SendCmd>

  return;
 8016672:	bf00      	nop
}
 8016674:	bd80      	pop	{r7, pc}
 8016676:	bf00      	nop
 8016678:	20030000 	.word	0x20030000

0801667c <TL_THREAD_SendAck>:

void TL_THREAD_SendAck ( void )
{
 801667c:	b580      	push	{r7, lr}
 801667e:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 8016680:	4b04      	ldr	r3, [pc, #16]	; (8016694 <TL_THREAD_SendAck+0x18>)
 8016682:	689b      	ldr	r3, [r3, #8]
 8016684:	681b      	ldr	r3, [r3, #0]
 8016686:	220d      	movs	r2, #13
 8016688:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_SendAck();
 801668a:	f003 f81d 	bl	80196c8 <HW_IPCC_THREAD_SendAck>

  return;
 801668e:	bf00      	nop
}
 8016690:	bd80      	pop	{r7, pc}
 8016692:	bf00      	nop
 8016694:	20030000 	.word	0x20030000

08016698 <TL_THREAD_CliSendAck>:

void TL_THREAD_CliSendAck ( void )
{
 8016698:	b580      	push	{r7, lr}
 801669a:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 801669c:	4b04      	ldr	r3, [pc, #16]	; (80166b0 <TL_THREAD_CliSendAck+0x18>)
 801669e:	689b      	ldr	r3, [r3, #8]
 80166a0:	681b      	ldr	r3, [r3, #0]
 80166a2:	220d      	movs	r2, #13
 80166a4:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_CliSendAck();
 80166a6:	f003 f81d 	bl	80196e4 <HW_IPCC_THREAD_CliSendAck>

  return;
 80166aa:	bf00      	nop
}
 80166ac:	bd80      	pop	{r7, pc}
 80166ae:	bf00      	nop
 80166b0:	20030000 	.word	0x20030000

080166b4 <HW_IPCC_OT_CmdEvtNot>:

void HW_IPCC_OT_CmdEvtNot(void)
{
 80166b4:	b580      	push	{r7, lr}
 80166b6:	af00      	add	r7, sp, #0
  TL_OT_CmdEvtReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->otcmdrsp_buffer) );
 80166b8:	4b03      	ldr	r3, [pc, #12]	; (80166c8 <HW_IPCC_OT_CmdEvtNot+0x14>)
 80166ba:	689b      	ldr	r3, [r3, #8]
 80166bc:	689b      	ldr	r3, [r3, #8]
 80166be:	4618      	mov	r0, r3
 80166c0:	f002 fcb0 	bl	8019024 <TL_OT_CmdEvtReceived>

  return;
 80166c4:	bf00      	nop
}
 80166c6:	bd80      	pop	{r7, pc}
 80166c8:	20030000 	.word	0x20030000

080166cc <HW_IPCC_THREAD_EvtNot>:

void HW_IPCC_THREAD_EvtNot( void )
{
 80166cc:	b580      	push	{r7, lr}
 80166ce:	af00      	add	r7, sp, #0
  TL_THREAD_NotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->notack_buffer) );
 80166d0:	4b03      	ldr	r3, [pc, #12]	; (80166e0 <HW_IPCC_THREAD_EvtNot+0x14>)
 80166d2:	689b      	ldr	r3, [r3, #8]
 80166d4:	681b      	ldr	r3, [r3, #0]
 80166d6:	4618      	mov	r0, r3
 80166d8:	f002 fcae 	bl	8019038 <TL_THREAD_NotReceived>

  return;
 80166dc:	bf00      	nop
}
 80166de:	bd80      	pop	{r7, pc}
 80166e0:	20030000 	.word	0x20030000

080166e4 <HW_IPCC_THREAD_CliEvtNot>:

void HW_IPCC_THREAD_CliEvtNot( void )
{
 80166e4:	b580      	push	{r7, lr}
 80166e6:	af00      	add	r7, sp, #0
  TL_THREAD_CliNotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->clicmdrsp_buffer) );
 80166e8:	4b03      	ldr	r3, [pc, #12]	; (80166f8 <HW_IPCC_THREAD_CliEvtNot+0x14>)
 80166ea:	689b      	ldr	r3, [r3, #8]
 80166ec:	685b      	ldr	r3, [r3, #4]
 80166ee:	4618      	mov	r0, r3
 80166f0:	f002 fd50 	bl	8019194 <TL_THREAD_CliNotReceived>

  return;
 80166f4:	bf00      	nop
}
 80166f6:	bd80      	pop	{r7, pc}
 80166f8:	20030000 	.word	0x20030000

080166fc <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 80166fc:	b580      	push	{r7, lr}
 80166fe:	b082      	sub	sp, #8
 8016700:	af00      	add	r7, sp, #0
 8016702:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8016704:	4817      	ldr	r0, [pc, #92]	; (8016764 <TL_MM_Init+0x68>)
 8016706:	f7ff fc49 	bl	8015f9c <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 801670a:	4817      	ldr	r0, [pc, #92]	; (8016768 <TL_MM_Init+0x6c>)
 801670c:	f7ff fc46 	bl	8015f9c <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8016710:	4b16      	ldr	r3, [pc, #88]	; (801676c <TL_MM_Init+0x70>)
 8016712:	691b      	ldr	r3, [r3, #16]
 8016714:	4a16      	ldr	r2, [pc, #88]	; (8016770 <TL_MM_Init+0x74>)
 8016716:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8016718:	4b15      	ldr	r3, [pc, #84]	; (8016770 <TL_MM_Init+0x74>)
 801671a:	681b      	ldr	r3, [r3, #0]
 801671c:	687a      	ldr	r2, [r7, #4]
 801671e:	6892      	ldr	r2, [r2, #8]
 8016720:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8016722:	4b13      	ldr	r3, [pc, #76]	; (8016770 <TL_MM_Init+0x74>)
 8016724:	681b      	ldr	r3, [r3, #0]
 8016726:	687a      	ldr	r2, [r7, #4]
 8016728:	68d2      	ldr	r2, [r2, #12]
 801672a:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 801672c:	4b10      	ldr	r3, [pc, #64]	; (8016770 <TL_MM_Init+0x74>)
 801672e:	681b      	ldr	r3, [r3, #0]
 8016730:	4a0c      	ldr	r2, [pc, #48]	; (8016764 <TL_MM_Init+0x68>)
 8016732:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8016734:	4b0e      	ldr	r3, [pc, #56]	; (8016770 <TL_MM_Init+0x74>)
 8016736:	681b      	ldr	r3, [r3, #0]
 8016738:	687a      	ldr	r2, [r7, #4]
 801673a:	6812      	ldr	r2, [r2, #0]
 801673c:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 801673e:	4b0c      	ldr	r3, [pc, #48]	; (8016770 <TL_MM_Init+0x74>)
 8016740:	681b      	ldr	r3, [r3, #0]
 8016742:	687a      	ldr	r2, [r7, #4]
 8016744:	6852      	ldr	r2, [r2, #4]
 8016746:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8016748:	4b09      	ldr	r3, [pc, #36]	; (8016770 <TL_MM_Init+0x74>)
 801674a:	681b      	ldr	r3, [r3, #0]
 801674c:	687a      	ldr	r2, [r7, #4]
 801674e:	6912      	ldr	r2, [r2, #16]
 8016750:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8016752:	4b07      	ldr	r3, [pc, #28]	; (8016770 <TL_MM_Init+0x74>)
 8016754:	681b      	ldr	r3, [r3, #0]
 8016756:	687a      	ldr	r2, [r7, #4]
 8016758:	6952      	ldr	r2, [r2, #20]
 801675a:	619a      	str	r2, [r3, #24]

  return;
 801675c:	bf00      	nop
}
 801675e:	3708      	adds	r7, #8
 8016760:	46bd      	mov	sp, r7
 8016762:	bd80      	pop	{r7, pc}
 8016764:	200300b4 	.word	0x200300b4
 8016768:	20027620 	.word	0x20027620
 801676c:	20030000 	.word	0x20030000
 8016770:	20027638 	.word	0x20027638

08016774 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8016774:	b580      	push	{r7, lr}
 8016776:	b082      	sub	sp, #8
 8016778:	af00      	add	r7, sp, #0
 801677a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 801677c:	6879      	ldr	r1, [r7, #4]
 801677e:	4807      	ldr	r0, [pc, #28]	; (801679c <TL_MM_EvtDone+0x28>)
 8016780:	f7ff fc60 	bl	8016044 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8016784:	6879      	ldr	r1, [r7, #4]
 8016786:	2000      	movs	r0, #0
 8016788:	f000 f858 	bl	801683c <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 801678c:	4804      	ldr	r0, [pc, #16]	; (80167a0 <TL_MM_EvtDone+0x2c>)
 801678e:	f002 ffdb 	bl	8019748 <HW_IPCC_MM_SendFreeBuf>

  return;
 8016792:	bf00      	nop
}
 8016794:	3708      	adds	r7, #8
 8016796:	46bd      	mov	sp, r7
 8016798:	bd80      	pop	{r7, pc}
 801679a:	bf00      	nop
 801679c:	20027620 	.word	0x20027620
 80167a0:	080167a5 	.word	0x080167a5

080167a4 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 80167a4:	b580      	push	{r7, lr}
 80167a6:	b082      	sub	sp, #8
 80167a8:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80167aa:	e00c      	b.n	80167c6 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 80167ac:	1d3b      	adds	r3, r7, #4
 80167ae:	4619      	mov	r1, r3
 80167b0:	480a      	ldr	r0, [pc, #40]	; (80167dc <SendFreeBuf+0x38>)
 80167b2:	f7ff fc8a 	bl	80160ca <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 80167b6:	4b0a      	ldr	r3, [pc, #40]	; (80167e0 <SendFreeBuf+0x3c>)
 80167b8:	691b      	ldr	r3, [r3, #16]
 80167ba:	691b      	ldr	r3, [r3, #16]
 80167bc:	687a      	ldr	r2, [r7, #4]
 80167be:	4611      	mov	r1, r2
 80167c0:	4618      	mov	r0, r3
 80167c2:	f7ff fc3f 	bl	8016044 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80167c6:	4805      	ldr	r0, [pc, #20]	; (80167dc <SendFreeBuf+0x38>)
 80167c8:	f7ff fbf8 	bl	8015fbc <LST_is_empty>
 80167cc:	4603      	mov	r3, r0
 80167ce:	2b00      	cmp	r3, #0
 80167d0:	d0ec      	beq.n	80167ac <SendFreeBuf+0x8>
  }

  return;
 80167d2:	bf00      	nop
}
 80167d4:	3708      	adds	r7, #8
 80167d6:	46bd      	mov	sp, r7
 80167d8:	bd80      	pop	{r7, pc}
 80167da:	bf00      	nop
 80167dc:	20027620 	.word	0x20027620
 80167e0:	20030000 	.word	0x20030000

080167e4 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 80167e4:	b580      	push	{r7, lr}
 80167e6:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 80167e8:	4805      	ldr	r0, [pc, #20]	; (8016800 <TL_TRACES_Init+0x1c>)
 80167ea:	f7ff fbd7 	bl	8015f9c <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 80167ee:	4b05      	ldr	r3, [pc, #20]	; (8016804 <TL_TRACES_Init+0x20>)
 80167f0:	695b      	ldr	r3, [r3, #20]
 80167f2:	4a03      	ldr	r2, [pc, #12]	; (8016800 <TL_TRACES_Init+0x1c>)
 80167f4:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 80167f6:	f002 ffdd 	bl	80197b4 <HW_IPCC_TRACES_Init>

  return;
 80167fa:	bf00      	nop
}
 80167fc:	bd80      	pop	{r7, pc}
 80167fe:	bf00      	nop
 8016800:	200300bc 	.word	0x200300bc
 8016804:	20030000 	.word	0x20030000

08016808 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8016808:	b580      	push	{r7, lr}
 801680a:	b082      	sub	sp, #8
 801680c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 801680e:	e008      	b.n	8016822 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8016810:	1d3b      	adds	r3, r7, #4
 8016812:	4619      	mov	r1, r3
 8016814:	4808      	ldr	r0, [pc, #32]	; (8016838 <HW_IPCC_TRACES_EvtNot+0x30>)
 8016816:	f7ff fc58 	bl	80160ca <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	4618      	mov	r0, r3
 801681e:	f7ea fd13 	bl	8001248 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8016822:	4805      	ldr	r0, [pc, #20]	; (8016838 <HW_IPCC_TRACES_EvtNot+0x30>)
 8016824:	f7ff fbca 	bl	8015fbc <LST_is_empty>
 8016828:	4603      	mov	r3, r0
 801682a:	2b00      	cmp	r3, #0
 801682c:	d0f0      	beq.n	8016810 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 801682e:	bf00      	nop
}
 8016830:	3708      	adds	r7, #8
 8016832:	46bd      	mov	sp, r7
 8016834:	bd80      	pop	{r7, pc}
 8016836:	bf00      	nop
 8016838:	200300bc 	.word	0x200300bc

0801683c <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 801683c:	b480      	push	{r7}
 801683e:	b085      	sub	sp, #20
 8016840:	af00      	add	r7, sp, #0
 8016842:	4603      	mov	r3, r0
 8016844:	6039      	str	r1, [r7, #0]
 8016846:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8016848:	79fb      	ldrb	r3, [r7, #7]
 801684a:	2b06      	cmp	r3, #6
 801684c:	d849      	bhi.n	80168e2 <OutputDbgTrace+0xa6>
 801684e:	a201      	add	r2, pc, #4	; (adr r2, 8016854 <OutputDbgTrace+0x18>)
 8016850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016854:	08016871 	.word	0x08016871
 8016858:	08016893 	.word	0x08016893
 801685c:	08016899 	.word	0x08016899
 8016860:	080168b3 	.word	0x080168b3
 8016864:	080168bf 	.word	0x080168bf
 8016868:	080168c5 	.word	0x080168c5
 801686c:	080168d7 	.word	0x080168d7
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8016870:	683b      	ldr	r3, [r7, #0]
 8016872:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8016874:	68fb      	ldr	r3, [r7, #12]
 8016876:	7a5b      	ldrb	r3, [r3, #9]
 8016878:	2b0f      	cmp	r3, #15
 801687a:	d004      	beq.n	8016886 <OutputDbgTrace+0x4a>
 801687c:	2bff      	cmp	r3, #255	; 0xff
 801687e:	d004      	beq.n	801688a <OutputDbgTrace+0x4e>
 8016880:	2b0e      	cmp	r3, #14
 8016882:	d004      	beq.n	801688e <OutputDbgTrace+0x52>
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8016884:	e004      	b.n	8016890 <OutputDbgTrace+0x54>
          break;
 8016886:	bf00      	nop
 8016888:	e02c      	b.n	80168e4 <OutputDbgTrace+0xa8>
          break;
 801688a:	bf00      	nop
 801688c:	e02a      	b.n	80168e4 <OutputDbgTrace+0xa8>
          break;
 801688e:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8016890:	e028      	b.n	80168e4 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8016892:	683b      	ldr	r3, [r7, #0]
 8016894:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8016896:	e025      	b.n	80168e4 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8016898:	683b      	ldr	r3, [r7, #0]
 801689a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 801689c:	68fb      	ldr	r3, [r7, #12]
 801689e:	7a5b      	ldrb	r3, [r3, #9]
 80168a0:	2b0e      	cmp	r3, #14
 80168a2:	d002      	beq.n	80168aa <OutputDbgTrace+0x6e>
 80168a4:	2b0f      	cmp	r3, #15
 80168a6:	d002      	beq.n	80168ae <OutputDbgTrace+0x72>
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 80168a8:	e002      	b.n	80168b0 <OutputDbgTrace+0x74>
          break;
 80168aa:	bf00      	nop
 80168ac:	e01a      	b.n	80168e4 <OutputDbgTrace+0xa8>
          break;
 80168ae:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80168b0:	e018      	b.n	80168e4 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80168b2:	683b      	ldr	r3, [r7, #0]
 80168b4:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80168b6:	68fb      	ldr	r3, [r7, #12]
 80168b8:	7a5b      	ldrb	r3, [r3, #9]
 80168ba:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80168bc:	e012      	b.n	80168e4 <OutputDbgTrace+0xa8>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80168be:	683b      	ldr	r3, [r7, #0]
 80168c0:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80168c2:	e00f      	b.n	80168e4 <OutputDbgTrace+0xa8>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80168c4:	683b      	ldr	r3, [r7, #0]
 80168c6:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80168c8:	68fb      	ldr	r3, [r7, #12]
 80168ca:	7a5b      	ldrb	r3, [r3, #9]
 80168cc:	2b0e      	cmp	r3, #14
 80168ce:	d000      	beq.n	80168d2 <OutputDbgTrace+0x96>
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 80168d0:	e000      	b.n	80168d4 <OutputDbgTrace+0x98>
          break;
 80168d2:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80168d4:	e006      	b.n	80168e4 <OutputDbgTrace+0xa8>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80168d6:	683b      	ldr	r3, [r7, #0]
 80168d8:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80168da:	68fb      	ldr	r3, [r7, #12]
 80168dc:	7a5b      	ldrb	r3, [r3, #9]
 80168de:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80168e0:	e000      	b.n	80168e4 <OutputDbgTrace+0xa8>

    default:
      break;
 80168e2:	bf00      	nop
  }

  return;
 80168e4:	bf00      	nop
}
 80168e6:	3714      	adds	r7, #20
 80168e8:	46bd      	mov	sp, r7
 80168ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168ee:	4770      	bx	lr

080168f0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80168f0:	b580      	push	{r7, lr}
 80168f2:	b084      	sub	sp, #16
 80168f4:	af00      	add	r7, sp, #0
 80168f6:	6078      	str	r0, [r7, #4]
 80168f8:	460b      	mov	r3, r1
 80168fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80168fc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8016900:	f003 fc96 	bl	801a230 <USBD_static_malloc>
 8016904:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8016906:	68fb      	ldr	r3, [r7, #12]
 8016908:	2b00      	cmp	r3, #0
 801690a:	d105      	bne.n	8016918 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	2200      	movs	r2, #0
 8016910:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8016914:	2302      	movs	r3, #2
 8016916:	e066      	b.n	80169e6 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8016918:	687b      	ldr	r3, [r7, #4]
 801691a:	68fa      	ldr	r2, [r7, #12]
 801691c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016920:	687b      	ldr	r3, [r7, #4]
 8016922:	7c1b      	ldrb	r3, [r3, #16]
 8016924:	2b00      	cmp	r3, #0
 8016926:	d119      	bne.n	801695c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8016928:	f44f 7300 	mov.w	r3, #512	; 0x200
 801692c:	2202      	movs	r2, #2
 801692e:	2181      	movs	r1, #129	; 0x81
 8016930:	6878      	ldr	r0, [r7, #4]
 8016932:	f003 fb29 	bl	8019f88 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8016936:	687b      	ldr	r3, [r7, #4]
 8016938:	2201      	movs	r2, #1
 801693a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801693c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016940:	2202      	movs	r2, #2
 8016942:	2101      	movs	r1, #1
 8016944:	6878      	ldr	r0, [r7, #4]
 8016946:	f003 fb1f 	bl	8019f88 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801694a:	687b      	ldr	r3, [r7, #4]
 801694c:	2201      	movs	r2, #1
 801694e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8016952:	687b      	ldr	r3, [r7, #4]
 8016954:	2210      	movs	r2, #16
 8016956:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 801695a:	e016      	b.n	801698a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801695c:	2340      	movs	r3, #64	; 0x40
 801695e:	2202      	movs	r2, #2
 8016960:	2181      	movs	r1, #129	; 0x81
 8016962:	6878      	ldr	r0, [r7, #4]
 8016964:	f003 fb10 	bl	8019f88 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8016968:	687b      	ldr	r3, [r7, #4]
 801696a:	2201      	movs	r2, #1
 801696c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801696e:	2340      	movs	r3, #64	; 0x40
 8016970:	2202      	movs	r2, #2
 8016972:	2101      	movs	r1, #1
 8016974:	6878      	ldr	r0, [r7, #4]
 8016976:	f003 fb07 	bl	8019f88 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801697a:	687b      	ldr	r3, [r7, #4]
 801697c:	2201      	movs	r2, #1
 801697e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8016982:	687b      	ldr	r3, [r7, #4]
 8016984:	2210      	movs	r2, #16
 8016986:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801698a:	2308      	movs	r3, #8
 801698c:	2203      	movs	r2, #3
 801698e:	2182      	movs	r1, #130	; 0x82
 8016990:	6878      	ldr	r0, [r7, #4]
 8016992:	f003 faf9 	bl	8019f88 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8016996:	687b      	ldr	r3, [r7, #4]
 8016998:	2201      	movs	r2, #1
 801699a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80169a4:	681b      	ldr	r3, [r3, #0]
 80169a6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80169a8:	68fb      	ldr	r3, [r7, #12]
 80169aa:	2200      	movs	r2, #0
 80169ac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80169b0:	68fb      	ldr	r3, [r7, #12]
 80169b2:	2200      	movs	r2, #0
 80169b4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80169b8:	687b      	ldr	r3, [r7, #4]
 80169ba:	7c1b      	ldrb	r3, [r3, #16]
 80169bc:	2b00      	cmp	r3, #0
 80169be:	d109      	bne.n	80169d4 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80169c0:	68fb      	ldr	r3, [r7, #12]
 80169c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80169c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80169ca:	2101      	movs	r1, #1
 80169cc:	6878      	ldr	r0, [r7, #4]
 80169ce:	f003 fbc4 	bl	801a15a <USBD_LL_PrepareReceive>
 80169d2:	e007      	b.n	80169e4 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80169d4:	68fb      	ldr	r3, [r7, #12]
 80169d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80169da:	2340      	movs	r3, #64	; 0x40
 80169dc:	2101      	movs	r1, #1
 80169de:	6878      	ldr	r0, [r7, #4]
 80169e0:	f003 fbbb 	bl	801a15a <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80169e4:	2300      	movs	r3, #0
}
 80169e6:	4618      	mov	r0, r3
 80169e8:	3710      	adds	r7, #16
 80169ea:	46bd      	mov	sp, r7
 80169ec:	bd80      	pop	{r7, pc}

080169ee <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80169ee:	b580      	push	{r7, lr}
 80169f0:	b082      	sub	sp, #8
 80169f2:	af00      	add	r7, sp, #0
 80169f4:	6078      	str	r0, [r7, #4]
 80169f6:	460b      	mov	r3, r1
 80169f8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80169fa:	2181      	movs	r1, #129	; 0x81
 80169fc:	6878      	ldr	r0, [r7, #4]
 80169fe:	f003 fae9 	bl	8019fd4 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8016a02:	687b      	ldr	r3, [r7, #4]
 8016a04:	2200      	movs	r2, #0
 8016a06:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8016a08:	2101      	movs	r1, #1
 8016a0a:	6878      	ldr	r0, [r7, #4]
 8016a0c:	f003 fae2 	bl	8019fd4 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8016a10:	687b      	ldr	r3, [r7, #4]
 8016a12:	2200      	movs	r2, #0
 8016a14:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8016a18:	2182      	movs	r1, #130	; 0x82
 8016a1a:	6878      	ldr	r0, [r7, #4]
 8016a1c:	f003 fada 	bl	8019fd4 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8016a20:	687b      	ldr	r3, [r7, #4]
 8016a22:	2200      	movs	r2, #0
 8016a24:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8016a28:	687b      	ldr	r3, [r7, #4]
 8016a2a:	2200      	movs	r2, #0
 8016a2c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8016a30:	687b      	ldr	r3, [r7, #4]
 8016a32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016a36:	2b00      	cmp	r3, #0
 8016a38:	d00e      	beq.n	8016a58 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8016a3a:	687b      	ldr	r3, [r7, #4]
 8016a3c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016a40:	685b      	ldr	r3, [r3, #4]
 8016a42:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8016a44:	687b      	ldr	r3, [r7, #4]
 8016a46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016a4a:	4618      	mov	r0, r3
 8016a4c:	f003 fbfe 	bl	801a24c <USBD_static_free>
    pdev->pClassData = NULL;
 8016a50:	687b      	ldr	r3, [r7, #4]
 8016a52:	2200      	movs	r2, #0
 8016a54:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8016a58:	2300      	movs	r3, #0
}
 8016a5a:	4618      	mov	r0, r3
 8016a5c:	3708      	adds	r7, #8
 8016a5e:	46bd      	mov	sp, r7
 8016a60:	bd80      	pop	{r7, pc}
	...

08016a64 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8016a64:	b580      	push	{r7, lr}
 8016a66:	b086      	sub	sp, #24
 8016a68:	af00      	add	r7, sp, #0
 8016a6a:	6078      	str	r0, [r7, #4]
 8016a6c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016a74:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8016a76:	2300      	movs	r3, #0
 8016a78:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8016a7a:	2300      	movs	r3, #0
 8016a7c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8016a7e:	2300      	movs	r3, #0
 8016a80:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8016a82:	693b      	ldr	r3, [r7, #16]
 8016a84:	2b00      	cmp	r3, #0
 8016a86:	d101      	bne.n	8016a8c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8016a88:	2303      	movs	r3, #3
 8016a8a:	e0af      	b.n	8016bec <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016a8c:	683b      	ldr	r3, [r7, #0]
 8016a8e:	781b      	ldrb	r3, [r3, #0]
 8016a90:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016a94:	2b00      	cmp	r3, #0
 8016a96:	d03f      	beq.n	8016b18 <USBD_CDC_Setup+0xb4>
 8016a98:	2b20      	cmp	r3, #32
 8016a9a:	f040 809f 	bne.w	8016bdc <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8016a9e:	683b      	ldr	r3, [r7, #0]
 8016aa0:	88db      	ldrh	r3, [r3, #6]
 8016aa2:	2b00      	cmp	r3, #0
 8016aa4:	d02e      	beq.n	8016b04 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8016aa6:	683b      	ldr	r3, [r7, #0]
 8016aa8:	781b      	ldrb	r3, [r3, #0]
 8016aaa:	b25b      	sxtb	r3, r3
 8016aac:	2b00      	cmp	r3, #0
 8016aae:	da16      	bge.n	8016ade <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8016ab0:	687b      	ldr	r3, [r7, #4]
 8016ab2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016ab6:	689b      	ldr	r3, [r3, #8]
 8016ab8:	683a      	ldr	r2, [r7, #0]
 8016aba:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8016abc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8016abe:	683a      	ldr	r2, [r7, #0]
 8016ac0:	88d2      	ldrh	r2, [r2, #6]
 8016ac2:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8016ac4:	683b      	ldr	r3, [r7, #0]
 8016ac6:	88db      	ldrh	r3, [r3, #6]
 8016ac8:	2b07      	cmp	r3, #7
 8016aca:	bf28      	it	cs
 8016acc:	2307      	movcs	r3, #7
 8016ace:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8016ad0:	693b      	ldr	r3, [r7, #16]
 8016ad2:	89fa      	ldrh	r2, [r7, #14]
 8016ad4:	4619      	mov	r1, r3
 8016ad6:	6878      	ldr	r0, [r7, #4]
 8016ad8:	f001 faaa 	bl	8018030 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8016adc:	e085      	b.n	8016bea <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8016ade:	683b      	ldr	r3, [r7, #0]
 8016ae0:	785a      	ldrb	r2, [r3, #1]
 8016ae2:	693b      	ldr	r3, [r7, #16]
 8016ae4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8016ae8:	683b      	ldr	r3, [r7, #0]
 8016aea:	88db      	ldrh	r3, [r3, #6]
 8016aec:	b2da      	uxtb	r2, r3
 8016aee:	693b      	ldr	r3, [r7, #16]
 8016af0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8016af4:	6939      	ldr	r1, [r7, #16]
 8016af6:	683b      	ldr	r3, [r7, #0]
 8016af8:	88db      	ldrh	r3, [r3, #6]
 8016afa:	461a      	mov	r2, r3
 8016afc:	6878      	ldr	r0, [r7, #4]
 8016afe:	f001 fac3 	bl	8018088 <USBD_CtlPrepareRx>
      break;
 8016b02:	e072      	b.n	8016bea <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8016b04:	687b      	ldr	r3, [r7, #4]
 8016b06:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016b0a:	689b      	ldr	r3, [r3, #8]
 8016b0c:	683a      	ldr	r2, [r7, #0]
 8016b0e:	7850      	ldrb	r0, [r2, #1]
 8016b10:	2200      	movs	r2, #0
 8016b12:	6839      	ldr	r1, [r7, #0]
 8016b14:	4798      	blx	r3
      break;
 8016b16:	e068      	b.n	8016bea <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016b18:	683b      	ldr	r3, [r7, #0]
 8016b1a:	785b      	ldrb	r3, [r3, #1]
 8016b1c:	2b0b      	cmp	r3, #11
 8016b1e:	d852      	bhi.n	8016bc6 <USBD_CDC_Setup+0x162>
 8016b20:	a201      	add	r2, pc, #4	; (adr r2, 8016b28 <USBD_CDC_Setup+0xc4>)
 8016b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016b26:	bf00      	nop
 8016b28:	08016b59 	.word	0x08016b59
 8016b2c:	08016bd5 	.word	0x08016bd5
 8016b30:	08016bc7 	.word	0x08016bc7
 8016b34:	08016bc7 	.word	0x08016bc7
 8016b38:	08016bc7 	.word	0x08016bc7
 8016b3c:	08016bc7 	.word	0x08016bc7
 8016b40:	08016bc7 	.word	0x08016bc7
 8016b44:	08016bc7 	.word	0x08016bc7
 8016b48:	08016bc7 	.word	0x08016bc7
 8016b4c:	08016bc7 	.word	0x08016bc7
 8016b50:	08016b83 	.word	0x08016b83
 8016b54:	08016bad 	.word	0x08016bad
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016b58:	687b      	ldr	r3, [r7, #4]
 8016b5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016b5e:	b2db      	uxtb	r3, r3
 8016b60:	2b03      	cmp	r3, #3
 8016b62:	d107      	bne.n	8016b74 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8016b64:	f107 030a 	add.w	r3, r7, #10
 8016b68:	2202      	movs	r2, #2
 8016b6a:	4619      	mov	r1, r3
 8016b6c:	6878      	ldr	r0, [r7, #4]
 8016b6e:	f001 fa5f 	bl	8018030 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8016b72:	e032      	b.n	8016bda <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8016b74:	6839      	ldr	r1, [r7, #0]
 8016b76:	6878      	ldr	r0, [r7, #4]
 8016b78:	f001 f9e9 	bl	8017f4e <USBD_CtlError>
            ret = USBD_FAIL;
 8016b7c:	2303      	movs	r3, #3
 8016b7e:	75fb      	strb	r3, [r7, #23]
          break;
 8016b80:	e02b      	b.n	8016bda <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016b82:	687b      	ldr	r3, [r7, #4]
 8016b84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016b88:	b2db      	uxtb	r3, r3
 8016b8a:	2b03      	cmp	r3, #3
 8016b8c:	d107      	bne.n	8016b9e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8016b8e:	f107 030d 	add.w	r3, r7, #13
 8016b92:	2201      	movs	r2, #1
 8016b94:	4619      	mov	r1, r3
 8016b96:	6878      	ldr	r0, [r7, #4]
 8016b98:	f001 fa4a 	bl	8018030 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8016b9c:	e01d      	b.n	8016bda <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8016b9e:	6839      	ldr	r1, [r7, #0]
 8016ba0:	6878      	ldr	r0, [r7, #4]
 8016ba2:	f001 f9d4 	bl	8017f4e <USBD_CtlError>
            ret = USBD_FAIL;
 8016ba6:	2303      	movs	r3, #3
 8016ba8:	75fb      	strb	r3, [r7, #23]
          break;
 8016baa:	e016      	b.n	8016bda <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8016bac:	687b      	ldr	r3, [r7, #4]
 8016bae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016bb2:	b2db      	uxtb	r3, r3
 8016bb4:	2b03      	cmp	r3, #3
 8016bb6:	d00f      	beq.n	8016bd8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8016bb8:	6839      	ldr	r1, [r7, #0]
 8016bba:	6878      	ldr	r0, [r7, #4]
 8016bbc:	f001 f9c7 	bl	8017f4e <USBD_CtlError>
            ret = USBD_FAIL;
 8016bc0:	2303      	movs	r3, #3
 8016bc2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8016bc4:	e008      	b.n	8016bd8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8016bc6:	6839      	ldr	r1, [r7, #0]
 8016bc8:	6878      	ldr	r0, [r7, #4]
 8016bca:	f001 f9c0 	bl	8017f4e <USBD_CtlError>
          ret = USBD_FAIL;
 8016bce:	2303      	movs	r3, #3
 8016bd0:	75fb      	strb	r3, [r7, #23]
          break;
 8016bd2:	e002      	b.n	8016bda <USBD_CDC_Setup+0x176>
          break;
 8016bd4:	bf00      	nop
 8016bd6:	e008      	b.n	8016bea <USBD_CDC_Setup+0x186>
          break;
 8016bd8:	bf00      	nop
      }
      break;
 8016bda:	e006      	b.n	8016bea <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8016bdc:	6839      	ldr	r1, [r7, #0]
 8016bde:	6878      	ldr	r0, [r7, #4]
 8016be0:	f001 f9b5 	bl	8017f4e <USBD_CtlError>
      ret = USBD_FAIL;
 8016be4:	2303      	movs	r3, #3
 8016be6:	75fb      	strb	r3, [r7, #23]
      break;
 8016be8:	bf00      	nop
  }

  return (uint8_t)ret;
 8016bea:	7dfb      	ldrb	r3, [r7, #23]
}
 8016bec:	4618      	mov	r0, r3
 8016bee:	3718      	adds	r7, #24
 8016bf0:	46bd      	mov	sp, r7
 8016bf2:	bd80      	pop	{r7, pc}

08016bf4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8016bf4:	b580      	push	{r7, lr}
 8016bf6:	b084      	sub	sp, #16
 8016bf8:	af00      	add	r7, sp, #0
 8016bfa:	6078      	str	r0, [r7, #4]
 8016bfc:	460b      	mov	r3, r1
 8016bfe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8016c00:	687b      	ldr	r3, [r7, #4]
 8016c02:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016c06:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8016c08:	687b      	ldr	r3, [r7, #4]
 8016c0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016c0e:	2b00      	cmp	r3, #0
 8016c10:	d101      	bne.n	8016c16 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8016c12:	2303      	movs	r3, #3
 8016c14:	e04c      	b.n	8016cb0 <USBD_CDC_DataIn+0xbc>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8016c16:	687b      	ldr	r3, [r7, #4]
 8016c18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016c1c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8016c1e:	78fa      	ldrb	r2, [r7, #3]
 8016c20:	6879      	ldr	r1, [r7, #4]
 8016c22:	4613      	mov	r3, r2
 8016c24:	009b      	lsls	r3, r3, #2
 8016c26:	4413      	add	r3, r2
 8016c28:	009b      	lsls	r3, r3, #2
 8016c2a:	440b      	add	r3, r1
 8016c2c:	3318      	adds	r3, #24
 8016c2e:	681b      	ldr	r3, [r3, #0]
 8016c30:	2b00      	cmp	r3, #0
 8016c32:	d026      	beq.n	8016c82 <USBD_CDC_DataIn+0x8e>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8016c34:	78fa      	ldrb	r2, [r7, #3]
 8016c36:	6879      	ldr	r1, [r7, #4]
 8016c38:	4613      	mov	r3, r2
 8016c3a:	009b      	lsls	r3, r3, #2
 8016c3c:	4413      	add	r3, r2
 8016c3e:	009b      	lsls	r3, r3, #2
 8016c40:	440b      	add	r3, r1
 8016c42:	3318      	adds	r3, #24
 8016c44:	681b      	ldr	r3, [r3, #0]
 8016c46:	78fa      	ldrb	r2, [r7, #3]
 8016c48:	68f9      	ldr	r1, [r7, #12]
 8016c4a:	0152      	lsls	r2, r2, #5
 8016c4c:	440a      	add	r2, r1
 8016c4e:	3238      	adds	r2, #56	; 0x38
 8016c50:	6812      	ldr	r2, [r2, #0]
 8016c52:	fbb3 f1f2 	udiv	r1, r3, r2
 8016c56:	fb02 f201 	mul.w	r2, r2, r1
 8016c5a:	1a9b      	subs	r3, r3, r2
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8016c5c:	2b00      	cmp	r3, #0
 8016c5e:	d110      	bne.n	8016c82 <USBD_CDC_DataIn+0x8e>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8016c60:	78fa      	ldrb	r2, [r7, #3]
 8016c62:	6879      	ldr	r1, [r7, #4]
 8016c64:	4613      	mov	r3, r2
 8016c66:	009b      	lsls	r3, r3, #2
 8016c68:	4413      	add	r3, r2
 8016c6a:	009b      	lsls	r3, r3, #2
 8016c6c:	440b      	add	r3, r1
 8016c6e:	3318      	adds	r3, #24
 8016c70:	2200      	movs	r2, #0
 8016c72:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8016c74:	78f9      	ldrb	r1, [r7, #3]
 8016c76:	2300      	movs	r3, #0
 8016c78:	2200      	movs	r2, #0
 8016c7a:	6878      	ldr	r0, [r7, #4]
 8016c7c:	f003 fa4c 	bl	801a118 <USBD_LL_Transmit>
 8016c80:	e015      	b.n	8016cae <USBD_CDC_DataIn+0xba>
  }
  else
  {
    hcdc->TxState = 0U;
 8016c82:	68bb      	ldr	r3, [r7, #8]
 8016c84:	2200      	movs	r2, #0
 8016c86:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8016c8a:	687b      	ldr	r3, [r7, #4]
 8016c8c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016c90:	691b      	ldr	r3, [r3, #16]
 8016c92:	2b00      	cmp	r3, #0
 8016c94:	d00b      	beq.n	8016cae <USBD_CDC_DataIn+0xba>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8016c96:	687b      	ldr	r3, [r7, #4]
 8016c98:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016c9c:	691b      	ldr	r3, [r3, #16]
 8016c9e:	68ba      	ldr	r2, [r7, #8]
 8016ca0:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8016ca4:	68ba      	ldr	r2, [r7, #8]
 8016ca6:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8016caa:	78fa      	ldrb	r2, [r7, #3]
 8016cac:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8016cae:	2300      	movs	r3, #0
}
 8016cb0:	4618      	mov	r0, r3
 8016cb2:	3710      	adds	r7, #16
 8016cb4:	46bd      	mov	sp, r7
 8016cb6:	bd80      	pop	{r7, pc}

08016cb8 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8016cb8:	b580      	push	{r7, lr}
 8016cba:	b084      	sub	sp, #16
 8016cbc:	af00      	add	r7, sp, #0
 8016cbe:	6078      	str	r0, [r7, #4]
 8016cc0:	460b      	mov	r3, r1
 8016cc2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8016cc4:	687b      	ldr	r3, [r7, #4]
 8016cc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016cca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8016ccc:	687b      	ldr	r3, [r7, #4]
 8016cce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016cd2:	2b00      	cmp	r3, #0
 8016cd4:	d101      	bne.n	8016cda <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8016cd6:	2303      	movs	r3, #3
 8016cd8:	e015      	b.n	8016d06 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8016cda:	78fb      	ldrb	r3, [r7, #3]
 8016cdc:	4619      	mov	r1, r3
 8016cde:	6878      	ldr	r0, [r7, #4]
 8016ce0:	f003 fa5c 	bl	801a19c <USBD_LL_GetRxDataSize>
 8016ce4:	4602      	mov	r2, r0
 8016ce6:	68fb      	ldr	r3, [r7, #12]
 8016ce8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8016cec:	687b      	ldr	r3, [r7, #4]
 8016cee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016cf2:	68db      	ldr	r3, [r3, #12]
 8016cf4:	68fa      	ldr	r2, [r7, #12]
 8016cf6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8016cfa:	68fa      	ldr	r2, [r7, #12]
 8016cfc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8016d00:	4611      	mov	r1, r2
 8016d02:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8016d04:	2300      	movs	r3, #0
}
 8016d06:	4618      	mov	r0, r3
 8016d08:	3710      	adds	r7, #16
 8016d0a:	46bd      	mov	sp, r7
 8016d0c:	bd80      	pop	{r7, pc}

08016d0e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8016d0e:	b580      	push	{r7, lr}
 8016d10:	b084      	sub	sp, #16
 8016d12:	af00      	add	r7, sp, #0
 8016d14:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8016d16:	687b      	ldr	r3, [r7, #4]
 8016d18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016d1c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8016d1e:	68fb      	ldr	r3, [r7, #12]
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	d101      	bne.n	8016d28 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8016d24:	2303      	movs	r3, #3
 8016d26:	e01b      	b.n	8016d60 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8016d28:	687b      	ldr	r3, [r7, #4]
 8016d2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016d2e:	2b00      	cmp	r3, #0
 8016d30:	d015      	beq.n	8016d5e <USBD_CDC_EP0_RxReady+0x50>
 8016d32:	68fb      	ldr	r3, [r7, #12]
 8016d34:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8016d38:	2bff      	cmp	r3, #255	; 0xff
 8016d3a:	d010      	beq.n	8016d5e <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8016d3c:	687b      	ldr	r3, [r7, #4]
 8016d3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016d42:	689b      	ldr	r3, [r3, #8]
 8016d44:	68fa      	ldr	r2, [r7, #12]
 8016d46:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8016d4a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8016d4c:	68fa      	ldr	r2, [r7, #12]
 8016d4e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8016d52:	b292      	uxth	r2, r2
 8016d54:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8016d56:	68fb      	ldr	r3, [r7, #12]
 8016d58:	22ff      	movs	r2, #255	; 0xff
 8016d5a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8016d5e:	2300      	movs	r3, #0
}
 8016d60:	4618      	mov	r0, r3
 8016d62:	3710      	adds	r7, #16
 8016d64:	46bd      	mov	sp, r7
 8016d66:	bd80      	pop	{r7, pc}

08016d68 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8016d68:	b480      	push	{r7}
 8016d6a:	b083      	sub	sp, #12
 8016d6c:	af00      	add	r7, sp, #0
 8016d6e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8016d70:	687b      	ldr	r3, [r7, #4]
 8016d72:	2243      	movs	r2, #67	; 0x43
 8016d74:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8016d76:	4b03      	ldr	r3, [pc, #12]	; (8016d84 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8016d78:	4618      	mov	r0, r3
 8016d7a:	370c      	adds	r7, #12
 8016d7c:	46bd      	mov	sp, r7
 8016d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d82:	4770      	bx	lr
 8016d84:	20000110 	.word	0x20000110

08016d88 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8016d88:	b480      	push	{r7}
 8016d8a:	b083      	sub	sp, #12
 8016d8c:	af00      	add	r7, sp, #0
 8016d8e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8016d90:	687b      	ldr	r3, [r7, #4]
 8016d92:	2243      	movs	r2, #67	; 0x43
 8016d94:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8016d96:	4b03      	ldr	r3, [pc, #12]	; (8016da4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8016d98:	4618      	mov	r0, r3
 8016d9a:	370c      	adds	r7, #12
 8016d9c:	46bd      	mov	sp, r7
 8016d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016da2:	4770      	bx	lr
 8016da4:	200000cc 	.word	0x200000cc

08016da8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8016da8:	b480      	push	{r7}
 8016daa:	b083      	sub	sp, #12
 8016dac:	af00      	add	r7, sp, #0
 8016dae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8016db0:	687b      	ldr	r3, [r7, #4]
 8016db2:	2243      	movs	r2, #67	; 0x43
 8016db4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8016db6:	4b03      	ldr	r3, [pc, #12]	; (8016dc4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8016db8:	4618      	mov	r0, r3
 8016dba:	370c      	adds	r7, #12
 8016dbc:	46bd      	mov	sp, r7
 8016dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dc2:	4770      	bx	lr
 8016dc4:	20000154 	.word	0x20000154

08016dc8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8016dc8:	b480      	push	{r7}
 8016dca:	b083      	sub	sp, #12
 8016dcc:	af00      	add	r7, sp, #0
 8016dce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8016dd0:	687b      	ldr	r3, [r7, #4]
 8016dd2:	220a      	movs	r2, #10
 8016dd4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8016dd6:	4b03      	ldr	r3, [pc, #12]	; (8016de4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8016dd8:	4618      	mov	r0, r3
 8016dda:	370c      	adds	r7, #12
 8016ddc:	46bd      	mov	sp, r7
 8016dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016de2:	4770      	bx	lr
 8016de4:	20000088 	.word	0x20000088

08016de8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8016de8:	b480      	push	{r7}
 8016dea:	b083      	sub	sp, #12
 8016dec:	af00      	add	r7, sp, #0
 8016dee:	6078      	str	r0, [r7, #4]
 8016df0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8016df2:	683b      	ldr	r3, [r7, #0]
 8016df4:	2b00      	cmp	r3, #0
 8016df6:	d101      	bne.n	8016dfc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8016df8:	2303      	movs	r3, #3
 8016dfa:	e004      	b.n	8016e06 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8016dfc:	687b      	ldr	r3, [r7, #4]
 8016dfe:	683a      	ldr	r2, [r7, #0]
 8016e00:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8016e04:	2300      	movs	r3, #0
}
 8016e06:	4618      	mov	r0, r3
 8016e08:	370c      	adds	r7, #12
 8016e0a:	46bd      	mov	sp, r7
 8016e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e10:	4770      	bx	lr

08016e12 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8016e12:	b480      	push	{r7}
 8016e14:	b087      	sub	sp, #28
 8016e16:	af00      	add	r7, sp, #0
 8016e18:	60f8      	str	r0, [r7, #12]
 8016e1a:	60b9      	str	r1, [r7, #8]
 8016e1c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8016e1e:	68fb      	ldr	r3, [r7, #12]
 8016e20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016e24:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8016e26:	697b      	ldr	r3, [r7, #20]
 8016e28:	2b00      	cmp	r3, #0
 8016e2a:	d101      	bne.n	8016e30 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8016e2c:	2303      	movs	r3, #3
 8016e2e:	e008      	b.n	8016e42 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8016e30:	697b      	ldr	r3, [r7, #20]
 8016e32:	68ba      	ldr	r2, [r7, #8]
 8016e34:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8016e38:	697b      	ldr	r3, [r7, #20]
 8016e3a:	687a      	ldr	r2, [r7, #4]
 8016e3c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8016e40:	2300      	movs	r3, #0
}
 8016e42:	4618      	mov	r0, r3
 8016e44:	371c      	adds	r7, #28
 8016e46:	46bd      	mov	sp, r7
 8016e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e4c:	4770      	bx	lr

08016e4e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8016e4e:	b480      	push	{r7}
 8016e50:	b085      	sub	sp, #20
 8016e52:	af00      	add	r7, sp, #0
 8016e54:	6078      	str	r0, [r7, #4]
 8016e56:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8016e58:	687b      	ldr	r3, [r7, #4]
 8016e5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016e5e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8016e60:	68fb      	ldr	r3, [r7, #12]
 8016e62:	2b00      	cmp	r3, #0
 8016e64:	d101      	bne.n	8016e6a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8016e66:	2303      	movs	r3, #3
 8016e68:	e004      	b.n	8016e74 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8016e6a:	68fb      	ldr	r3, [r7, #12]
 8016e6c:	683a      	ldr	r2, [r7, #0]
 8016e6e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8016e72:	2300      	movs	r3, #0
}
 8016e74:	4618      	mov	r0, r3
 8016e76:	3714      	adds	r7, #20
 8016e78:	46bd      	mov	sp, r7
 8016e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e7e:	4770      	bx	lr

08016e80 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8016e80:	b580      	push	{r7, lr}
 8016e82:	b084      	sub	sp, #16
 8016e84:	af00      	add	r7, sp, #0
 8016e86:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8016e88:	687b      	ldr	r3, [r7, #4]
 8016e8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016e8e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8016e90:	687b      	ldr	r3, [r7, #4]
 8016e92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016e96:	2b00      	cmp	r3, #0
 8016e98:	d101      	bne.n	8016e9e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8016e9a:	2303      	movs	r3, #3
 8016e9c:	e016      	b.n	8016ecc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016e9e:	687b      	ldr	r3, [r7, #4]
 8016ea0:	7c1b      	ldrb	r3, [r3, #16]
 8016ea2:	2b00      	cmp	r3, #0
 8016ea4:	d109      	bne.n	8016eba <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8016ea6:	68fb      	ldr	r3, [r7, #12]
 8016ea8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8016eac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016eb0:	2101      	movs	r1, #1
 8016eb2:	6878      	ldr	r0, [r7, #4]
 8016eb4:	f003 f951 	bl	801a15a <USBD_LL_PrepareReceive>
 8016eb8:	e007      	b.n	8016eca <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8016eba:	68fb      	ldr	r3, [r7, #12]
 8016ebc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8016ec0:	2340      	movs	r3, #64	; 0x40
 8016ec2:	2101      	movs	r1, #1
 8016ec4:	6878      	ldr	r0, [r7, #4]
 8016ec6:	f003 f948 	bl	801a15a <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8016eca:	2300      	movs	r3, #0
}
 8016ecc:	4618      	mov	r0, r3
 8016ece:	3710      	adds	r7, #16
 8016ed0:	46bd      	mov	sp, r7
 8016ed2:	bd80      	pop	{r7, pc}

08016ed4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8016ed4:	b580      	push	{r7, lr}
 8016ed6:	b086      	sub	sp, #24
 8016ed8:	af00      	add	r7, sp, #0
 8016eda:	60f8      	str	r0, [r7, #12]
 8016edc:	60b9      	str	r1, [r7, #8]
 8016ede:	4613      	mov	r3, r2
 8016ee0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8016ee2:	68fb      	ldr	r3, [r7, #12]
 8016ee4:	2b00      	cmp	r3, #0
 8016ee6:	d101      	bne.n	8016eec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8016ee8:	2303      	movs	r3, #3
 8016eea:	e01f      	b.n	8016f2c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8016eec:	68fb      	ldr	r3, [r7, #12]
 8016eee:	2200      	movs	r2, #0
 8016ef0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8016ef4:	68fb      	ldr	r3, [r7, #12]
 8016ef6:	2200      	movs	r2, #0
 8016ef8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8016efc:	68fb      	ldr	r3, [r7, #12]
 8016efe:	2200      	movs	r2, #0
 8016f00:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8016f04:	68bb      	ldr	r3, [r7, #8]
 8016f06:	2b00      	cmp	r3, #0
 8016f08:	d003      	beq.n	8016f12 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8016f0a:	68fb      	ldr	r3, [r7, #12]
 8016f0c:	68ba      	ldr	r2, [r7, #8]
 8016f0e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016f12:	68fb      	ldr	r3, [r7, #12]
 8016f14:	2201      	movs	r2, #1
 8016f16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8016f1a:	68fb      	ldr	r3, [r7, #12]
 8016f1c:	79fa      	ldrb	r2, [r7, #7]
 8016f1e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8016f20:	68f8      	ldr	r0, [r7, #12]
 8016f22:	f002 ff99 	bl	8019e58 <USBD_LL_Init>
 8016f26:	4603      	mov	r3, r0
 8016f28:	75fb      	strb	r3, [r7, #23]

  return ret;
 8016f2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8016f2c:	4618      	mov	r0, r3
 8016f2e:	3718      	adds	r7, #24
 8016f30:	46bd      	mov	sp, r7
 8016f32:	bd80      	pop	{r7, pc}

08016f34 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8016f34:	b580      	push	{r7, lr}
 8016f36:	b084      	sub	sp, #16
 8016f38:	af00      	add	r7, sp, #0
 8016f3a:	6078      	str	r0, [r7, #4]
 8016f3c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8016f3e:	2300      	movs	r3, #0
 8016f40:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8016f42:	683b      	ldr	r3, [r7, #0]
 8016f44:	2b00      	cmp	r3, #0
 8016f46:	d101      	bne.n	8016f4c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8016f48:	2303      	movs	r3, #3
 8016f4a:	e016      	b.n	8016f7a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8016f4c:	687b      	ldr	r3, [r7, #4]
 8016f4e:	683a      	ldr	r2, [r7, #0]
 8016f50:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8016f54:	687b      	ldr	r3, [r7, #4]
 8016f56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016f5c:	2b00      	cmp	r3, #0
 8016f5e:	d00b      	beq.n	8016f78 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8016f60:	687b      	ldr	r3, [r7, #4]
 8016f62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016f68:	f107 020e 	add.w	r2, r7, #14
 8016f6c:	4610      	mov	r0, r2
 8016f6e:	4798      	blx	r3
 8016f70:	4602      	mov	r2, r0
 8016f72:	687b      	ldr	r3, [r7, #4]
 8016f74:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8016f78:	2300      	movs	r3, #0
}
 8016f7a:	4618      	mov	r0, r3
 8016f7c:	3710      	adds	r7, #16
 8016f7e:	46bd      	mov	sp, r7
 8016f80:	bd80      	pop	{r7, pc}

08016f82 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8016f82:	b580      	push	{r7, lr}
 8016f84:	b082      	sub	sp, #8
 8016f86:	af00      	add	r7, sp, #0
 8016f88:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8016f8a:	6878      	ldr	r0, [r7, #4]
 8016f8c:	f002 ffc6 	bl	8019f1c <USBD_LL_Start>
 8016f90:	4603      	mov	r3, r0
}
 8016f92:	4618      	mov	r0, r3
 8016f94:	3708      	adds	r7, #8
 8016f96:	46bd      	mov	sp, r7
 8016f98:	bd80      	pop	{r7, pc}

08016f9a <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 8016f9a:	b580      	push	{r7, lr}
 8016f9c:	b082      	sub	sp, #8
 8016f9e:	af00      	add	r7, sp, #0
 8016fa0:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 8016fa2:	6878      	ldr	r0, [r7, #4]
 8016fa4:	f002 ffd5 	bl	8019f52 <USBD_LL_Stop>

  /* Free Class Resources */
  if (pdev->pClass != NULL)
 8016fa8:	687b      	ldr	r3, [r7, #4]
 8016faa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016fae:	2b00      	cmp	r3, #0
 8016fb0:	d009      	beq.n	8016fc6 <USBD_Stop+0x2c>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8016fb2:	687b      	ldr	r3, [r7, #4]
 8016fb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016fb8:	685b      	ldr	r3, [r3, #4]
 8016fba:	687a      	ldr	r2, [r7, #4]
 8016fbc:	6852      	ldr	r2, [r2, #4]
 8016fbe:	b2d2      	uxtb	r2, r2
 8016fc0:	4611      	mov	r1, r2
 8016fc2:	6878      	ldr	r0, [r7, #4]
 8016fc4:	4798      	blx	r3
  }

  return USBD_OK;
 8016fc6:	2300      	movs	r3, #0
}
 8016fc8:	4618      	mov	r0, r3
 8016fca:	3708      	adds	r7, #8
 8016fcc:	46bd      	mov	sp, r7
 8016fce:	bd80      	pop	{r7, pc}

08016fd0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8016fd0:	b480      	push	{r7}
 8016fd2:	b083      	sub	sp, #12
 8016fd4:	af00      	add	r7, sp, #0
 8016fd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8016fd8:	2300      	movs	r3, #0
}
 8016fda:	4618      	mov	r0, r3
 8016fdc:	370c      	adds	r7, #12
 8016fde:	46bd      	mov	sp, r7
 8016fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fe4:	4770      	bx	lr

08016fe6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8016fe6:	b580      	push	{r7, lr}
 8016fe8:	b084      	sub	sp, #16
 8016fea:	af00      	add	r7, sp, #0
 8016fec:	6078      	str	r0, [r7, #4]
 8016fee:	460b      	mov	r3, r1
 8016ff0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8016ff2:	2303      	movs	r3, #3
 8016ff4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8016ff6:	687b      	ldr	r3, [r7, #4]
 8016ff8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016ffc:	2b00      	cmp	r3, #0
 8016ffe:	d009      	beq.n	8017014 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8017000:	687b      	ldr	r3, [r7, #4]
 8017002:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017006:	681b      	ldr	r3, [r3, #0]
 8017008:	78fa      	ldrb	r2, [r7, #3]
 801700a:	4611      	mov	r1, r2
 801700c:	6878      	ldr	r0, [r7, #4]
 801700e:	4798      	blx	r3
 8017010:	4603      	mov	r3, r0
 8017012:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8017014:	7bfb      	ldrb	r3, [r7, #15]
}
 8017016:	4618      	mov	r0, r3
 8017018:	3710      	adds	r7, #16
 801701a:	46bd      	mov	sp, r7
 801701c:	bd80      	pop	{r7, pc}

0801701e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801701e:	b580      	push	{r7, lr}
 8017020:	b082      	sub	sp, #8
 8017022:	af00      	add	r7, sp, #0
 8017024:	6078      	str	r0, [r7, #4]
 8017026:	460b      	mov	r3, r1
 8017028:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 801702a:	687b      	ldr	r3, [r7, #4]
 801702c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017030:	2b00      	cmp	r3, #0
 8017032:	d007      	beq.n	8017044 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8017034:	687b      	ldr	r3, [r7, #4]
 8017036:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801703a:	685b      	ldr	r3, [r3, #4]
 801703c:	78fa      	ldrb	r2, [r7, #3]
 801703e:	4611      	mov	r1, r2
 8017040:	6878      	ldr	r0, [r7, #4]
 8017042:	4798      	blx	r3
  }

  return USBD_OK;
 8017044:	2300      	movs	r3, #0
}
 8017046:	4618      	mov	r0, r3
 8017048:	3708      	adds	r7, #8
 801704a:	46bd      	mov	sp, r7
 801704c:	bd80      	pop	{r7, pc}

0801704e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801704e:	b580      	push	{r7, lr}
 8017050:	b084      	sub	sp, #16
 8017052:	af00      	add	r7, sp, #0
 8017054:	6078      	str	r0, [r7, #4]
 8017056:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8017058:	687b      	ldr	r3, [r7, #4]
 801705a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801705e:	6839      	ldr	r1, [r7, #0]
 8017060:	4618      	mov	r0, r3
 8017062:	f000 ff3a 	bl	8017eda <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8017066:	687b      	ldr	r3, [r7, #4]
 8017068:	2201      	movs	r2, #1
 801706a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801706e:	687b      	ldr	r3, [r7, #4]
 8017070:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8017074:	461a      	mov	r2, r3
 8017076:	687b      	ldr	r3, [r7, #4]
 8017078:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801707c:	687b      	ldr	r3, [r7, #4]
 801707e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8017082:	f003 031f 	and.w	r3, r3, #31
 8017086:	2b01      	cmp	r3, #1
 8017088:	d00e      	beq.n	80170a8 <USBD_LL_SetupStage+0x5a>
 801708a:	2b01      	cmp	r3, #1
 801708c:	d302      	bcc.n	8017094 <USBD_LL_SetupStage+0x46>
 801708e:	2b02      	cmp	r3, #2
 8017090:	d014      	beq.n	80170bc <USBD_LL_SetupStage+0x6e>
 8017092:	e01d      	b.n	80170d0 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8017094:	687b      	ldr	r3, [r7, #4]
 8017096:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801709a:	4619      	mov	r1, r3
 801709c:	6878      	ldr	r0, [r7, #4]
 801709e:	f000 f9ef 	bl	8017480 <USBD_StdDevReq>
 80170a2:	4603      	mov	r3, r0
 80170a4:	73fb      	strb	r3, [r7, #15]
      break;
 80170a6:	e020      	b.n	80170ea <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80170a8:	687b      	ldr	r3, [r7, #4]
 80170aa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80170ae:	4619      	mov	r1, r3
 80170b0:	6878      	ldr	r0, [r7, #4]
 80170b2:	f000 fa53 	bl	801755c <USBD_StdItfReq>
 80170b6:	4603      	mov	r3, r0
 80170b8:	73fb      	strb	r3, [r7, #15]
      break;
 80170ba:	e016      	b.n	80170ea <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80170bc:	687b      	ldr	r3, [r7, #4]
 80170be:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80170c2:	4619      	mov	r1, r3
 80170c4:	6878      	ldr	r0, [r7, #4]
 80170c6:	f000 fa90 	bl	80175ea <USBD_StdEPReq>
 80170ca:	4603      	mov	r3, r0
 80170cc:	73fb      	strb	r3, [r7, #15]
      break;
 80170ce:	e00c      	b.n	80170ea <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80170d0:	687b      	ldr	r3, [r7, #4]
 80170d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80170d6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80170da:	b2db      	uxtb	r3, r3
 80170dc:	4619      	mov	r1, r3
 80170de:	6878      	ldr	r0, [r7, #4]
 80170e0:	f002 ff97 	bl	801a012 <USBD_LL_StallEP>
 80170e4:	4603      	mov	r3, r0
 80170e6:	73fb      	strb	r3, [r7, #15]
      break;
 80170e8:	bf00      	nop
  }

  return ret;
 80170ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80170ec:	4618      	mov	r0, r3
 80170ee:	3710      	adds	r7, #16
 80170f0:	46bd      	mov	sp, r7
 80170f2:	bd80      	pop	{r7, pc}

080170f4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80170f4:	b580      	push	{r7, lr}
 80170f6:	b086      	sub	sp, #24
 80170f8:	af00      	add	r7, sp, #0
 80170fa:	60f8      	str	r0, [r7, #12]
 80170fc:	460b      	mov	r3, r1
 80170fe:	607a      	str	r2, [r7, #4]
 8017100:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8017102:	7afb      	ldrb	r3, [r7, #11]
 8017104:	2b00      	cmp	r3, #0
 8017106:	d138      	bne.n	801717a <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8017108:	68fb      	ldr	r3, [r7, #12]
 801710a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801710e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8017110:	68fb      	ldr	r3, [r7, #12]
 8017112:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8017116:	2b03      	cmp	r3, #3
 8017118:	d14a      	bne.n	80171b0 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 801711a:	693b      	ldr	r3, [r7, #16]
 801711c:	689a      	ldr	r2, [r3, #8]
 801711e:	693b      	ldr	r3, [r7, #16]
 8017120:	68db      	ldr	r3, [r3, #12]
 8017122:	429a      	cmp	r2, r3
 8017124:	d913      	bls.n	801714e <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8017126:	693b      	ldr	r3, [r7, #16]
 8017128:	689a      	ldr	r2, [r3, #8]
 801712a:	693b      	ldr	r3, [r7, #16]
 801712c:	68db      	ldr	r3, [r3, #12]
 801712e:	1ad2      	subs	r2, r2, r3
 8017130:	693b      	ldr	r3, [r7, #16]
 8017132:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8017134:	693b      	ldr	r3, [r7, #16]
 8017136:	68da      	ldr	r2, [r3, #12]
 8017138:	693b      	ldr	r3, [r7, #16]
 801713a:	689b      	ldr	r3, [r3, #8]
 801713c:	4293      	cmp	r3, r2
 801713e:	bf28      	it	cs
 8017140:	4613      	movcs	r3, r2
 8017142:	461a      	mov	r2, r3
 8017144:	6879      	ldr	r1, [r7, #4]
 8017146:	68f8      	ldr	r0, [r7, #12]
 8017148:	f000 ffbb 	bl	80180c2 <USBD_CtlContinueRx>
 801714c:	e030      	b.n	80171b0 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801714e:	68fb      	ldr	r3, [r7, #12]
 8017150:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017154:	b2db      	uxtb	r3, r3
 8017156:	2b03      	cmp	r3, #3
 8017158:	d10b      	bne.n	8017172 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 801715a:	68fb      	ldr	r3, [r7, #12]
 801715c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017160:	691b      	ldr	r3, [r3, #16]
 8017162:	2b00      	cmp	r3, #0
 8017164:	d005      	beq.n	8017172 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8017166:	68fb      	ldr	r3, [r7, #12]
 8017168:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801716c:	691b      	ldr	r3, [r3, #16]
 801716e:	68f8      	ldr	r0, [r7, #12]
 8017170:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8017172:	68f8      	ldr	r0, [r7, #12]
 8017174:	f000 ffb6 	bl	80180e4 <USBD_CtlSendStatus>
 8017178:	e01a      	b.n	80171b0 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801717a:	68fb      	ldr	r3, [r7, #12]
 801717c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017180:	b2db      	uxtb	r3, r3
 8017182:	2b03      	cmp	r3, #3
 8017184:	d114      	bne.n	80171b0 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8017186:	68fb      	ldr	r3, [r7, #12]
 8017188:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801718c:	699b      	ldr	r3, [r3, #24]
 801718e:	2b00      	cmp	r3, #0
 8017190:	d00e      	beq.n	80171b0 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8017192:	68fb      	ldr	r3, [r7, #12]
 8017194:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017198:	699b      	ldr	r3, [r3, #24]
 801719a:	7afa      	ldrb	r2, [r7, #11]
 801719c:	4611      	mov	r1, r2
 801719e:	68f8      	ldr	r0, [r7, #12]
 80171a0:	4798      	blx	r3
 80171a2:	4603      	mov	r3, r0
 80171a4:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80171a6:	7dfb      	ldrb	r3, [r7, #23]
 80171a8:	2b00      	cmp	r3, #0
 80171aa:	d001      	beq.n	80171b0 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80171ac:	7dfb      	ldrb	r3, [r7, #23]
 80171ae:	e000      	b.n	80171b2 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80171b0:	2300      	movs	r3, #0
}
 80171b2:	4618      	mov	r0, r3
 80171b4:	3718      	adds	r7, #24
 80171b6:	46bd      	mov	sp, r7
 80171b8:	bd80      	pop	{r7, pc}

080171ba <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80171ba:	b580      	push	{r7, lr}
 80171bc:	b086      	sub	sp, #24
 80171be:	af00      	add	r7, sp, #0
 80171c0:	60f8      	str	r0, [r7, #12]
 80171c2:	460b      	mov	r3, r1
 80171c4:	607a      	str	r2, [r7, #4]
 80171c6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80171c8:	7afb      	ldrb	r3, [r7, #11]
 80171ca:	2b00      	cmp	r3, #0
 80171cc:	d16b      	bne.n	80172a6 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80171ce:	68fb      	ldr	r3, [r7, #12]
 80171d0:	3314      	adds	r3, #20
 80171d2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80171d4:	68fb      	ldr	r3, [r7, #12]
 80171d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80171da:	2b02      	cmp	r3, #2
 80171dc:	d156      	bne.n	801728c <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80171de:	693b      	ldr	r3, [r7, #16]
 80171e0:	689a      	ldr	r2, [r3, #8]
 80171e2:	693b      	ldr	r3, [r7, #16]
 80171e4:	68db      	ldr	r3, [r3, #12]
 80171e6:	429a      	cmp	r2, r3
 80171e8:	d914      	bls.n	8017214 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80171ea:	693b      	ldr	r3, [r7, #16]
 80171ec:	689a      	ldr	r2, [r3, #8]
 80171ee:	693b      	ldr	r3, [r7, #16]
 80171f0:	68db      	ldr	r3, [r3, #12]
 80171f2:	1ad2      	subs	r2, r2, r3
 80171f4:	693b      	ldr	r3, [r7, #16]
 80171f6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80171f8:	693b      	ldr	r3, [r7, #16]
 80171fa:	689b      	ldr	r3, [r3, #8]
 80171fc:	461a      	mov	r2, r3
 80171fe:	6879      	ldr	r1, [r7, #4]
 8017200:	68f8      	ldr	r0, [r7, #12]
 8017202:	f000 ff30 	bl	8018066 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8017206:	2300      	movs	r3, #0
 8017208:	2200      	movs	r2, #0
 801720a:	2100      	movs	r1, #0
 801720c:	68f8      	ldr	r0, [r7, #12]
 801720e:	f002 ffa4 	bl	801a15a <USBD_LL_PrepareReceive>
 8017212:	e03b      	b.n	801728c <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8017214:	693b      	ldr	r3, [r7, #16]
 8017216:	68da      	ldr	r2, [r3, #12]
 8017218:	693b      	ldr	r3, [r7, #16]
 801721a:	689b      	ldr	r3, [r3, #8]
 801721c:	429a      	cmp	r2, r3
 801721e:	d11c      	bne.n	801725a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8017220:	693b      	ldr	r3, [r7, #16]
 8017222:	685a      	ldr	r2, [r3, #4]
 8017224:	693b      	ldr	r3, [r7, #16]
 8017226:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8017228:	429a      	cmp	r2, r3
 801722a:	d316      	bcc.n	801725a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801722c:	693b      	ldr	r3, [r7, #16]
 801722e:	685a      	ldr	r2, [r3, #4]
 8017230:	68fb      	ldr	r3, [r7, #12]
 8017232:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8017236:	429a      	cmp	r2, r3
 8017238:	d20f      	bcs.n	801725a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801723a:	2200      	movs	r2, #0
 801723c:	2100      	movs	r1, #0
 801723e:	68f8      	ldr	r0, [r7, #12]
 8017240:	f000 ff11 	bl	8018066 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8017244:	68fb      	ldr	r3, [r7, #12]
 8017246:	2200      	movs	r2, #0
 8017248:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801724c:	2300      	movs	r3, #0
 801724e:	2200      	movs	r2, #0
 8017250:	2100      	movs	r1, #0
 8017252:	68f8      	ldr	r0, [r7, #12]
 8017254:	f002 ff81 	bl	801a15a <USBD_LL_PrepareReceive>
 8017258:	e018      	b.n	801728c <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801725a:	68fb      	ldr	r3, [r7, #12]
 801725c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017260:	b2db      	uxtb	r3, r3
 8017262:	2b03      	cmp	r3, #3
 8017264:	d10b      	bne.n	801727e <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8017266:	68fb      	ldr	r3, [r7, #12]
 8017268:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801726c:	68db      	ldr	r3, [r3, #12]
 801726e:	2b00      	cmp	r3, #0
 8017270:	d005      	beq.n	801727e <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8017272:	68fb      	ldr	r3, [r7, #12]
 8017274:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017278:	68db      	ldr	r3, [r3, #12]
 801727a:	68f8      	ldr	r0, [r7, #12]
 801727c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801727e:	2180      	movs	r1, #128	; 0x80
 8017280:	68f8      	ldr	r0, [r7, #12]
 8017282:	f002 fec6 	bl	801a012 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8017286:	68f8      	ldr	r0, [r7, #12]
 8017288:	f000 ff3f 	bl	801810a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 801728c:	68fb      	ldr	r3, [r7, #12]
 801728e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8017292:	2b01      	cmp	r3, #1
 8017294:	d122      	bne.n	80172dc <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8017296:	68f8      	ldr	r0, [r7, #12]
 8017298:	f7ff fe9a 	bl	8016fd0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801729c:	68fb      	ldr	r3, [r7, #12]
 801729e:	2200      	movs	r2, #0
 80172a0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80172a4:	e01a      	b.n	80172dc <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80172a6:	68fb      	ldr	r3, [r7, #12]
 80172a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80172ac:	b2db      	uxtb	r3, r3
 80172ae:	2b03      	cmp	r3, #3
 80172b0:	d114      	bne.n	80172dc <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80172b2:	68fb      	ldr	r3, [r7, #12]
 80172b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80172b8:	695b      	ldr	r3, [r3, #20]
 80172ba:	2b00      	cmp	r3, #0
 80172bc:	d00e      	beq.n	80172dc <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80172be:	68fb      	ldr	r3, [r7, #12]
 80172c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80172c4:	695b      	ldr	r3, [r3, #20]
 80172c6:	7afa      	ldrb	r2, [r7, #11]
 80172c8:	4611      	mov	r1, r2
 80172ca:	68f8      	ldr	r0, [r7, #12]
 80172cc:	4798      	blx	r3
 80172ce:	4603      	mov	r3, r0
 80172d0:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80172d2:	7dfb      	ldrb	r3, [r7, #23]
 80172d4:	2b00      	cmp	r3, #0
 80172d6:	d001      	beq.n	80172dc <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80172d8:	7dfb      	ldrb	r3, [r7, #23]
 80172da:	e000      	b.n	80172de <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80172dc:	2300      	movs	r3, #0
}
 80172de:	4618      	mov	r0, r3
 80172e0:	3718      	adds	r7, #24
 80172e2:	46bd      	mov	sp, r7
 80172e4:	bd80      	pop	{r7, pc}

080172e6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80172e6:	b580      	push	{r7, lr}
 80172e8:	b082      	sub	sp, #8
 80172ea:	af00      	add	r7, sp, #0
 80172ec:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80172ee:	687b      	ldr	r3, [r7, #4]
 80172f0:	2201      	movs	r2, #1
 80172f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80172f6:	687b      	ldr	r3, [r7, #4]
 80172f8:	2200      	movs	r2, #0
 80172fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80172fe:	687b      	ldr	r3, [r7, #4]
 8017300:	2200      	movs	r2, #0
 8017302:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8017304:	687b      	ldr	r3, [r7, #4]
 8017306:	2200      	movs	r2, #0
 8017308:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 801730c:	687b      	ldr	r3, [r7, #4]
 801730e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017312:	2b00      	cmp	r3, #0
 8017314:	d101      	bne.n	801731a <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8017316:	2303      	movs	r3, #3
 8017318:	e02f      	b.n	801737a <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 801731a:	687b      	ldr	r3, [r7, #4]
 801731c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8017320:	2b00      	cmp	r3, #0
 8017322:	d00f      	beq.n	8017344 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8017324:	687b      	ldr	r3, [r7, #4]
 8017326:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801732a:	685b      	ldr	r3, [r3, #4]
 801732c:	2b00      	cmp	r3, #0
 801732e:	d009      	beq.n	8017344 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8017330:	687b      	ldr	r3, [r7, #4]
 8017332:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017336:	685b      	ldr	r3, [r3, #4]
 8017338:	687a      	ldr	r2, [r7, #4]
 801733a:	6852      	ldr	r2, [r2, #4]
 801733c:	b2d2      	uxtb	r2, r2
 801733e:	4611      	mov	r1, r2
 8017340:	6878      	ldr	r0, [r7, #4]
 8017342:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8017344:	2340      	movs	r3, #64	; 0x40
 8017346:	2200      	movs	r2, #0
 8017348:	2100      	movs	r1, #0
 801734a:	6878      	ldr	r0, [r7, #4]
 801734c:	f002 fe1c 	bl	8019f88 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8017350:	687b      	ldr	r3, [r7, #4]
 8017352:	2201      	movs	r2, #1
 8017354:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8017358:	687b      	ldr	r3, [r7, #4]
 801735a:	2240      	movs	r2, #64	; 0x40
 801735c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8017360:	2340      	movs	r3, #64	; 0x40
 8017362:	2200      	movs	r2, #0
 8017364:	2180      	movs	r1, #128	; 0x80
 8017366:	6878      	ldr	r0, [r7, #4]
 8017368:	f002 fe0e 	bl	8019f88 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801736c:	687b      	ldr	r3, [r7, #4]
 801736e:	2201      	movs	r2, #1
 8017370:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8017372:	687b      	ldr	r3, [r7, #4]
 8017374:	2240      	movs	r2, #64	; 0x40
 8017376:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8017378:	2300      	movs	r3, #0
}
 801737a:	4618      	mov	r0, r3
 801737c:	3708      	adds	r7, #8
 801737e:	46bd      	mov	sp, r7
 8017380:	bd80      	pop	{r7, pc}

08017382 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8017382:	b480      	push	{r7}
 8017384:	b083      	sub	sp, #12
 8017386:	af00      	add	r7, sp, #0
 8017388:	6078      	str	r0, [r7, #4]
 801738a:	460b      	mov	r3, r1
 801738c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801738e:	687b      	ldr	r3, [r7, #4]
 8017390:	78fa      	ldrb	r2, [r7, #3]
 8017392:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8017394:	2300      	movs	r3, #0
}
 8017396:	4618      	mov	r0, r3
 8017398:	370c      	adds	r7, #12
 801739a:	46bd      	mov	sp, r7
 801739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173a0:	4770      	bx	lr

080173a2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80173a2:	b480      	push	{r7}
 80173a4:	b083      	sub	sp, #12
 80173a6:	af00      	add	r7, sp, #0
 80173a8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80173aa:	687b      	ldr	r3, [r7, #4]
 80173ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80173b0:	b2da      	uxtb	r2, r3
 80173b2:	687b      	ldr	r3, [r7, #4]
 80173b4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80173b8:	687b      	ldr	r3, [r7, #4]
 80173ba:	2204      	movs	r2, #4
 80173bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80173c0:	2300      	movs	r3, #0
}
 80173c2:	4618      	mov	r0, r3
 80173c4:	370c      	adds	r7, #12
 80173c6:	46bd      	mov	sp, r7
 80173c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173cc:	4770      	bx	lr

080173ce <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80173ce:	b480      	push	{r7}
 80173d0:	b083      	sub	sp, #12
 80173d2:	af00      	add	r7, sp, #0
 80173d4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80173d6:	687b      	ldr	r3, [r7, #4]
 80173d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80173dc:	b2db      	uxtb	r3, r3
 80173de:	2b04      	cmp	r3, #4
 80173e0:	d106      	bne.n	80173f0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80173e2:	687b      	ldr	r3, [r7, #4]
 80173e4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80173e8:	b2da      	uxtb	r2, r3
 80173ea:	687b      	ldr	r3, [r7, #4]
 80173ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80173f0:	2300      	movs	r3, #0
}
 80173f2:	4618      	mov	r0, r3
 80173f4:	370c      	adds	r7, #12
 80173f6:	46bd      	mov	sp, r7
 80173f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173fc:	4770      	bx	lr

080173fe <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80173fe:	b580      	push	{r7, lr}
 8017400:	b082      	sub	sp, #8
 8017402:	af00      	add	r7, sp, #0
 8017404:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8017406:	687b      	ldr	r3, [r7, #4]
 8017408:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801740c:	2b00      	cmp	r3, #0
 801740e:	d101      	bne.n	8017414 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8017410:	2303      	movs	r3, #3
 8017412:	e012      	b.n	801743a <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017414:	687b      	ldr	r3, [r7, #4]
 8017416:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801741a:	b2db      	uxtb	r3, r3
 801741c:	2b03      	cmp	r3, #3
 801741e:	d10b      	bne.n	8017438 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8017420:	687b      	ldr	r3, [r7, #4]
 8017422:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017426:	69db      	ldr	r3, [r3, #28]
 8017428:	2b00      	cmp	r3, #0
 801742a:	d005      	beq.n	8017438 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 801742c:	687b      	ldr	r3, [r7, #4]
 801742e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017432:	69db      	ldr	r3, [r3, #28]
 8017434:	6878      	ldr	r0, [r7, #4]
 8017436:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8017438:	2300      	movs	r3, #0
}
 801743a:	4618      	mov	r0, r3
 801743c:	3708      	adds	r7, #8
 801743e:	46bd      	mov	sp, r7
 8017440:	bd80      	pop	{r7, pc}

08017442 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8017442:	b480      	push	{r7}
 8017444:	b087      	sub	sp, #28
 8017446:	af00      	add	r7, sp, #0
 8017448:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 801744a:	687b      	ldr	r3, [r7, #4]
 801744c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801744e:	697b      	ldr	r3, [r7, #20]
 8017450:	781b      	ldrb	r3, [r3, #0]
 8017452:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8017454:	697b      	ldr	r3, [r7, #20]
 8017456:	3301      	adds	r3, #1
 8017458:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801745a:	697b      	ldr	r3, [r7, #20]
 801745c:	781b      	ldrb	r3, [r3, #0]
 801745e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8017460:	8a3b      	ldrh	r3, [r7, #16]
 8017462:	021b      	lsls	r3, r3, #8
 8017464:	b21a      	sxth	r2, r3
 8017466:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801746a:	4313      	orrs	r3, r2
 801746c:	b21b      	sxth	r3, r3
 801746e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8017470:	89fb      	ldrh	r3, [r7, #14]
}
 8017472:	4618      	mov	r0, r3
 8017474:	371c      	adds	r7, #28
 8017476:	46bd      	mov	sp, r7
 8017478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801747c:	4770      	bx	lr
	...

08017480 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017480:	b580      	push	{r7, lr}
 8017482:	b084      	sub	sp, #16
 8017484:	af00      	add	r7, sp, #0
 8017486:	6078      	str	r0, [r7, #4]
 8017488:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801748a:	2300      	movs	r3, #0
 801748c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801748e:	683b      	ldr	r3, [r7, #0]
 8017490:	781b      	ldrb	r3, [r3, #0]
 8017492:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8017496:	2b20      	cmp	r3, #32
 8017498:	d004      	beq.n	80174a4 <USBD_StdDevReq+0x24>
 801749a:	2b40      	cmp	r3, #64	; 0x40
 801749c:	d002      	beq.n	80174a4 <USBD_StdDevReq+0x24>
 801749e:	2b00      	cmp	r3, #0
 80174a0:	d00a      	beq.n	80174b8 <USBD_StdDevReq+0x38>
 80174a2:	e050      	b.n	8017546 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80174a4:	687b      	ldr	r3, [r7, #4]
 80174a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80174aa:	689b      	ldr	r3, [r3, #8]
 80174ac:	6839      	ldr	r1, [r7, #0]
 80174ae:	6878      	ldr	r0, [r7, #4]
 80174b0:	4798      	blx	r3
 80174b2:	4603      	mov	r3, r0
 80174b4:	73fb      	strb	r3, [r7, #15]
      break;
 80174b6:	e04b      	b.n	8017550 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80174b8:	683b      	ldr	r3, [r7, #0]
 80174ba:	785b      	ldrb	r3, [r3, #1]
 80174bc:	2b09      	cmp	r3, #9
 80174be:	d83c      	bhi.n	801753a <USBD_StdDevReq+0xba>
 80174c0:	a201      	add	r2, pc, #4	; (adr r2, 80174c8 <USBD_StdDevReq+0x48>)
 80174c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80174c6:	bf00      	nop
 80174c8:	0801751d 	.word	0x0801751d
 80174cc:	08017531 	.word	0x08017531
 80174d0:	0801753b 	.word	0x0801753b
 80174d4:	08017527 	.word	0x08017527
 80174d8:	0801753b 	.word	0x0801753b
 80174dc:	080174fb 	.word	0x080174fb
 80174e0:	080174f1 	.word	0x080174f1
 80174e4:	0801753b 	.word	0x0801753b
 80174e8:	08017513 	.word	0x08017513
 80174ec:	08017505 	.word	0x08017505
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80174f0:	6839      	ldr	r1, [r7, #0]
 80174f2:	6878      	ldr	r0, [r7, #4]
 80174f4:	f000 f9d4 	bl	80178a0 <USBD_GetDescriptor>
          break;
 80174f8:	e024      	b.n	8017544 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80174fa:	6839      	ldr	r1, [r7, #0]
 80174fc:	6878      	ldr	r0, [r7, #4]
 80174fe:	f000 fb63 	bl	8017bc8 <USBD_SetAddress>
          break;
 8017502:	e01f      	b.n	8017544 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8017504:	6839      	ldr	r1, [r7, #0]
 8017506:	6878      	ldr	r0, [r7, #4]
 8017508:	f000 fba2 	bl	8017c50 <USBD_SetConfig>
 801750c:	4603      	mov	r3, r0
 801750e:	73fb      	strb	r3, [r7, #15]
          break;
 8017510:	e018      	b.n	8017544 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8017512:	6839      	ldr	r1, [r7, #0]
 8017514:	6878      	ldr	r0, [r7, #4]
 8017516:	f000 fc41 	bl	8017d9c <USBD_GetConfig>
          break;
 801751a:	e013      	b.n	8017544 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801751c:	6839      	ldr	r1, [r7, #0]
 801751e:	6878      	ldr	r0, [r7, #4]
 8017520:	f000 fc71 	bl	8017e06 <USBD_GetStatus>
          break;
 8017524:	e00e      	b.n	8017544 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8017526:	6839      	ldr	r1, [r7, #0]
 8017528:	6878      	ldr	r0, [r7, #4]
 801752a:	f000 fca0 	bl	8017e6e <USBD_SetFeature>
          break;
 801752e:	e009      	b.n	8017544 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8017530:	6839      	ldr	r1, [r7, #0]
 8017532:	6878      	ldr	r0, [r7, #4]
 8017534:	f000 fcaf 	bl	8017e96 <USBD_ClrFeature>
          break;
 8017538:	e004      	b.n	8017544 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 801753a:	6839      	ldr	r1, [r7, #0]
 801753c:	6878      	ldr	r0, [r7, #4]
 801753e:	f000 fd06 	bl	8017f4e <USBD_CtlError>
          break;
 8017542:	bf00      	nop
      }
      break;
 8017544:	e004      	b.n	8017550 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8017546:	6839      	ldr	r1, [r7, #0]
 8017548:	6878      	ldr	r0, [r7, #4]
 801754a:	f000 fd00 	bl	8017f4e <USBD_CtlError>
      break;
 801754e:	bf00      	nop
  }

  return ret;
 8017550:	7bfb      	ldrb	r3, [r7, #15]
}
 8017552:	4618      	mov	r0, r3
 8017554:	3710      	adds	r7, #16
 8017556:	46bd      	mov	sp, r7
 8017558:	bd80      	pop	{r7, pc}
 801755a:	bf00      	nop

0801755c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801755c:	b580      	push	{r7, lr}
 801755e:	b084      	sub	sp, #16
 8017560:	af00      	add	r7, sp, #0
 8017562:	6078      	str	r0, [r7, #4]
 8017564:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8017566:	2300      	movs	r3, #0
 8017568:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801756a:	683b      	ldr	r3, [r7, #0]
 801756c:	781b      	ldrb	r3, [r3, #0]
 801756e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8017572:	2b20      	cmp	r3, #32
 8017574:	d003      	beq.n	801757e <USBD_StdItfReq+0x22>
 8017576:	2b40      	cmp	r3, #64	; 0x40
 8017578:	d001      	beq.n	801757e <USBD_StdItfReq+0x22>
 801757a:	2b00      	cmp	r3, #0
 801757c:	d12b      	bne.n	80175d6 <USBD_StdItfReq+0x7a>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801757e:	687b      	ldr	r3, [r7, #4]
 8017580:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017584:	b2db      	uxtb	r3, r3
 8017586:	3b01      	subs	r3, #1
 8017588:	2b02      	cmp	r3, #2
 801758a:	d81d      	bhi.n	80175c8 <USBD_StdItfReq+0x6c>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801758c:	683b      	ldr	r3, [r7, #0]
 801758e:	889b      	ldrh	r3, [r3, #4]
 8017590:	b2db      	uxtb	r3, r3
 8017592:	2b01      	cmp	r3, #1
 8017594:	d813      	bhi.n	80175be <USBD_StdItfReq+0x62>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8017596:	687b      	ldr	r3, [r7, #4]
 8017598:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801759c:	689b      	ldr	r3, [r3, #8]
 801759e:	6839      	ldr	r1, [r7, #0]
 80175a0:	6878      	ldr	r0, [r7, #4]
 80175a2:	4798      	blx	r3
 80175a4:	4603      	mov	r3, r0
 80175a6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80175a8:	683b      	ldr	r3, [r7, #0]
 80175aa:	88db      	ldrh	r3, [r3, #6]
 80175ac:	2b00      	cmp	r3, #0
 80175ae:	d110      	bne.n	80175d2 <USBD_StdItfReq+0x76>
 80175b0:	7bfb      	ldrb	r3, [r7, #15]
 80175b2:	2b00      	cmp	r3, #0
 80175b4:	d10d      	bne.n	80175d2 <USBD_StdItfReq+0x76>
            {
              (void)USBD_CtlSendStatus(pdev);
 80175b6:	6878      	ldr	r0, [r7, #4]
 80175b8:	f000 fd94 	bl	80180e4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80175bc:	e009      	b.n	80175d2 <USBD_StdItfReq+0x76>
            USBD_CtlError(pdev, req);
 80175be:	6839      	ldr	r1, [r7, #0]
 80175c0:	6878      	ldr	r0, [r7, #4]
 80175c2:	f000 fcc4 	bl	8017f4e <USBD_CtlError>
          break;
 80175c6:	e004      	b.n	80175d2 <USBD_StdItfReq+0x76>

        default:
          USBD_CtlError(pdev, req);
 80175c8:	6839      	ldr	r1, [r7, #0]
 80175ca:	6878      	ldr	r0, [r7, #4]
 80175cc:	f000 fcbf 	bl	8017f4e <USBD_CtlError>
          break;
 80175d0:	e000      	b.n	80175d4 <USBD_StdItfReq+0x78>
          break;
 80175d2:	bf00      	nop
      }
      break;
 80175d4:	e004      	b.n	80175e0 <USBD_StdItfReq+0x84>

    default:
      USBD_CtlError(pdev, req);
 80175d6:	6839      	ldr	r1, [r7, #0]
 80175d8:	6878      	ldr	r0, [r7, #4]
 80175da:	f000 fcb8 	bl	8017f4e <USBD_CtlError>
      break;
 80175de:	bf00      	nop
  }

  return ret;
 80175e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80175e2:	4618      	mov	r0, r3
 80175e4:	3710      	adds	r7, #16
 80175e6:	46bd      	mov	sp, r7
 80175e8:	bd80      	pop	{r7, pc}

080175ea <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80175ea:	b580      	push	{r7, lr}
 80175ec:	b084      	sub	sp, #16
 80175ee:	af00      	add	r7, sp, #0
 80175f0:	6078      	str	r0, [r7, #4]
 80175f2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80175f4:	2300      	movs	r3, #0
 80175f6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80175f8:	683b      	ldr	r3, [r7, #0]
 80175fa:	889b      	ldrh	r3, [r3, #4]
 80175fc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80175fe:	683b      	ldr	r3, [r7, #0]
 8017600:	781b      	ldrb	r3, [r3, #0]
 8017602:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8017606:	2b20      	cmp	r3, #32
 8017608:	d004      	beq.n	8017614 <USBD_StdEPReq+0x2a>
 801760a:	2b40      	cmp	r3, #64	; 0x40
 801760c:	d002      	beq.n	8017614 <USBD_StdEPReq+0x2a>
 801760e:	2b00      	cmp	r3, #0
 8017610:	d00a      	beq.n	8017628 <USBD_StdEPReq+0x3e>
 8017612:	e13a      	b.n	801788a <USBD_StdEPReq+0x2a0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8017614:	687b      	ldr	r3, [r7, #4]
 8017616:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801761a:	689b      	ldr	r3, [r3, #8]
 801761c:	6839      	ldr	r1, [r7, #0]
 801761e:	6878      	ldr	r0, [r7, #4]
 8017620:	4798      	blx	r3
 8017622:	4603      	mov	r3, r0
 8017624:	73fb      	strb	r3, [r7, #15]
      break;
 8017626:	e135      	b.n	8017894 <USBD_StdEPReq+0x2aa>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8017628:	683b      	ldr	r3, [r7, #0]
 801762a:	785b      	ldrb	r3, [r3, #1]
 801762c:	2b01      	cmp	r3, #1
 801762e:	d03f      	beq.n	80176b0 <USBD_StdEPReq+0xc6>
 8017630:	2b03      	cmp	r3, #3
 8017632:	d002      	beq.n	801763a <USBD_StdEPReq+0x50>
 8017634:	2b00      	cmp	r3, #0
 8017636:	d07b      	beq.n	8017730 <USBD_StdEPReq+0x146>
 8017638:	e121      	b.n	801787e <USBD_StdEPReq+0x294>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801763a:	687b      	ldr	r3, [r7, #4]
 801763c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017640:	b2db      	uxtb	r3, r3
 8017642:	2b02      	cmp	r3, #2
 8017644:	d002      	beq.n	801764c <USBD_StdEPReq+0x62>
 8017646:	2b03      	cmp	r3, #3
 8017648:	d015      	beq.n	8017676 <USBD_StdEPReq+0x8c>
 801764a:	e02b      	b.n	80176a4 <USBD_StdEPReq+0xba>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801764c:	7bbb      	ldrb	r3, [r7, #14]
 801764e:	2b00      	cmp	r3, #0
 8017650:	d00c      	beq.n	801766c <USBD_StdEPReq+0x82>
 8017652:	7bbb      	ldrb	r3, [r7, #14]
 8017654:	2b80      	cmp	r3, #128	; 0x80
 8017656:	d009      	beq.n	801766c <USBD_StdEPReq+0x82>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8017658:	7bbb      	ldrb	r3, [r7, #14]
 801765a:	4619      	mov	r1, r3
 801765c:	6878      	ldr	r0, [r7, #4]
 801765e:	f002 fcd8 	bl	801a012 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8017662:	2180      	movs	r1, #128	; 0x80
 8017664:	6878      	ldr	r0, [r7, #4]
 8017666:	f002 fcd4 	bl	801a012 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801766a:	e020      	b.n	80176ae <USBD_StdEPReq+0xc4>
                USBD_CtlError(pdev, req);
 801766c:	6839      	ldr	r1, [r7, #0]
 801766e:	6878      	ldr	r0, [r7, #4]
 8017670:	f000 fc6d 	bl	8017f4e <USBD_CtlError>
              break;
 8017674:	e01b      	b.n	80176ae <USBD_StdEPReq+0xc4>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8017676:	683b      	ldr	r3, [r7, #0]
 8017678:	885b      	ldrh	r3, [r3, #2]
 801767a:	2b00      	cmp	r3, #0
 801767c:	d10e      	bne.n	801769c <USBD_StdEPReq+0xb2>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801767e:	7bbb      	ldrb	r3, [r7, #14]
 8017680:	2b00      	cmp	r3, #0
 8017682:	d00b      	beq.n	801769c <USBD_StdEPReq+0xb2>
 8017684:	7bbb      	ldrb	r3, [r7, #14]
 8017686:	2b80      	cmp	r3, #128	; 0x80
 8017688:	d008      	beq.n	801769c <USBD_StdEPReq+0xb2>
 801768a:	683b      	ldr	r3, [r7, #0]
 801768c:	88db      	ldrh	r3, [r3, #6]
 801768e:	2b00      	cmp	r3, #0
 8017690:	d104      	bne.n	801769c <USBD_StdEPReq+0xb2>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8017692:	7bbb      	ldrb	r3, [r7, #14]
 8017694:	4619      	mov	r1, r3
 8017696:	6878      	ldr	r0, [r7, #4]
 8017698:	f002 fcbb 	bl	801a012 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801769c:	6878      	ldr	r0, [r7, #4]
 801769e:	f000 fd21 	bl	80180e4 <USBD_CtlSendStatus>

              break;
 80176a2:	e004      	b.n	80176ae <USBD_StdEPReq+0xc4>

            default:
              USBD_CtlError(pdev, req);
 80176a4:	6839      	ldr	r1, [r7, #0]
 80176a6:	6878      	ldr	r0, [r7, #4]
 80176a8:	f000 fc51 	bl	8017f4e <USBD_CtlError>
              break;
 80176ac:	bf00      	nop
          }
          break;
 80176ae:	e0eb      	b.n	8017888 <USBD_StdEPReq+0x29e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80176b0:	687b      	ldr	r3, [r7, #4]
 80176b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80176b6:	b2db      	uxtb	r3, r3
 80176b8:	2b02      	cmp	r3, #2
 80176ba:	d002      	beq.n	80176c2 <USBD_StdEPReq+0xd8>
 80176bc:	2b03      	cmp	r3, #3
 80176be:	d015      	beq.n	80176ec <USBD_StdEPReq+0x102>
 80176c0:	e02f      	b.n	8017722 <USBD_StdEPReq+0x138>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80176c2:	7bbb      	ldrb	r3, [r7, #14]
 80176c4:	2b00      	cmp	r3, #0
 80176c6:	d00c      	beq.n	80176e2 <USBD_StdEPReq+0xf8>
 80176c8:	7bbb      	ldrb	r3, [r7, #14]
 80176ca:	2b80      	cmp	r3, #128	; 0x80
 80176cc:	d009      	beq.n	80176e2 <USBD_StdEPReq+0xf8>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80176ce:	7bbb      	ldrb	r3, [r7, #14]
 80176d0:	4619      	mov	r1, r3
 80176d2:	6878      	ldr	r0, [r7, #4]
 80176d4:	f002 fc9d 	bl	801a012 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80176d8:	2180      	movs	r1, #128	; 0x80
 80176da:	6878      	ldr	r0, [r7, #4]
 80176dc:	f002 fc99 	bl	801a012 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80176e0:	e025      	b.n	801772e <USBD_StdEPReq+0x144>
                USBD_CtlError(pdev, req);
 80176e2:	6839      	ldr	r1, [r7, #0]
 80176e4:	6878      	ldr	r0, [r7, #4]
 80176e6:	f000 fc32 	bl	8017f4e <USBD_CtlError>
              break;
 80176ea:	e020      	b.n	801772e <USBD_StdEPReq+0x144>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80176ec:	683b      	ldr	r3, [r7, #0]
 80176ee:	885b      	ldrh	r3, [r3, #2]
 80176f0:	2b00      	cmp	r3, #0
 80176f2:	d11b      	bne.n	801772c <USBD_StdEPReq+0x142>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80176f4:	7bbb      	ldrb	r3, [r7, #14]
 80176f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80176fa:	2b00      	cmp	r3, #0
 80176fc:	d004      	beq.n	8017708 <USBD_StdEPReq+0x11e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80176fe:	7bbb      	ldrb	r3, [r7, #14]
 8017700:	4619      	mov	r1, r3
 8017702:	6878      	ldr	r0, [r7, #4]
 8017704:	f002 fca4 	bl	801a050 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8017708:	6878      	ldr	r0, [r7, #4]
 801770a:	f000 fceb 	bl	80180e4 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801770e:	687b      	ldr	r3, [r7, #4]
 8017710:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017714:	689b      	ldr	r3, [r3, #8]
 8017716:	6839      	ldr	r1, [r7, #0]
 8017718:	6878      	ldr	r0, [r7, #4]
 801771a:	4798      	blx	r3
 801771c:	4603      	mov	r3, r0
 801771e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8017720:	e004      	b.n	801772c <USBD_StdEPReq+0x142>

            default:
              USBD_CtlError(pdev, req);
 8017722:	6839      	ldr	r1, [r7, #0]
 8017724:	6878      	ldr	r0, [r7, #4]
 8017726:	f000 fc12 	bl	8017f4e <USBD_CtlError>
              break;
 801772a:	e000      	b.n	801772e <USBD_StdEPReq+0x144>
              break;
 801772c:	bf00      	nop
          }
          break;
 801772e:	e0ab      	b.n	8017888 <USBD_StdEPReq+0x29e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8017730:	687b      	ldr	r3, [r7, #4]
 8017732:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017736:	b2db      	uxtb	r3, r3
 8017738:	2b02      	cmp	r3, #2
 801773a:	d002      	beq.n	8017742 <USBD_StdEPReq+0x158>
 801773c:	2b03      	cmp	r3, #3
 801773e:	d032      	beq.n	80177a6 <USBD_StdEPReq+0x1bc>
 8017740:	e097      	b.n	8017872 <USBD_StdEPReq+0x288>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8017742:	7bbb      	ldrb	r3, [r7, #14]
 8017744:	2b00      	cmp	r3, #0
 8017746:	d007      	beq.n	8017758 <USBD_StdEPReq+0x16e>
 8017748:	7bbb      	ldrb	r3, [r7, #14]
 801774a:	2b80      	cmp	r3, #128	; 0x80
 801774c:	d004      	beq.n	8017758 <USBD_StdEPReq+0x16e>
              {
                USBD_CtlError(pdev, req);
 801774e:	6839      	ldr	r1, [r7, #0]
 8017750:	6878      	ldr	r0, [r7, #4]
 8017752:	f000 fbfc 	bl	8017f4e <USBD_CtlError>
                break;
 8017756:	e091      	b.n	801787c <USBD_StdEPReq+0x292>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017758:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801775c:	2b00      	cmp	r3, #0
 801775e:	da0b      	bge.n	8017778 <USBD_StdEPReq+0x18e>
 8017760:	7bbb      	ldrb	r3, [r7, #14]
 8017762:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017766:	4613      	mov	r3, r2
 8017768:	009b      	lsls	r3, r3, #2
 801776a:	4413      	add	r3, r2
 801776c:	009b      	lsls	r3, r3, #2
 801776e:	3310      	adds	r3, #16
 8017770:	687a      	ldr	r2, [r7, #4]
 8017772:	4413      	add	r3, r2
 8017774:	3304      	adds	r3, #4
 8017776:	e00b      	b.n	8017790 <USBD_StdEPReq+0x1a6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8017778:	7bbb      	ldrb	r3, [r7, #14]
 801777a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801777e:	4613      	mov	r3, r2
 8017780:	009b      	lsls	r3, r3, #2
 8017782:	4413      	add	r3, r2
 8017784:	009b      	lsls	r3, r3, #2
 8017786:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801778a:	687a      	ldr	r2, [r7, #4]
 801778c:	4413      	add	r3, r2
 801778e:	3304      	adds	r3, #4
 8017790:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8017792:	68bb      	ldr	r3, [r7, #8]
 8017794:	2200      	movs	r2, #0
 8017796:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8017798:	68bb      	ldr	r3, [r7, #8]
 801779a:	2202      	movs	r2, #2
 801779c:	4619      	mov	r1, r3
 801779e:	6878      	ldr	r0, [r7, #4]
 80177a0:	f000 fc46 	bl	8018030 <USBD_CtlSendData>
              break;
 80177a4:	e06a      	b.n	801787c <USBD_StdEPReq+0x292>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80177a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80177aa:	2b00      	cmp	r3, #0
 80177ac:	da11      	bge.n	80177d2 <USBD_StdEPReq+0x1e8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80177ae:	7bbb      	ldrb	r3, [r7, #14]
 80177b0:	f003 020f 	and.w	r2, r3, #15
 80177b4:	6879      	ldr	r1, [r7, #4]
 80177b6:	4613      	mov	r3, r2
 80177b8:	009b      	lsls	r3, r3, #2
 80177ba:	4413      	add	r3, r2
 80177bc:	009b      	lsls	r3, r3, #2
 80177be:	440b      	add	r3, r1
 80177c0:	3324      	adds	r3, #36	; 0x24
 80177c2:	881b      	ldrh	r3, [r3, #0]
 80177c4:	2b00      	cmp	r3, #0
 80177c6:	d117      	bne.n	80177f8 <USBD_StdEPReq+0x20e>
                {
                  USBD_CtlError(pdev, req);
 80177c8:	6839      	ldr	r1, [r7, #0]
 80177ca:	6878      	ldr	r0, [r7, #4]
 80177cc:	f000 fbbf 	bl	8017f4e <USBD_CtlError>
                  break;
 80177d0:	e054      	b.n	801787c <USBD_StdEPReq+0x292>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80177d2:	7bbb      	ldrb	r3, [r7, #14]
 80177d4:	f003 020f 	and.w	r2, r3, #15
 80177d8:	6879      	ldr	r1, [r7, #4]
 80177da:	4613      	mov	r3, r2
 80177dc:	009b      	lsls	r3, r3, #2
 80177de:	4413      	add	r3, r2
 80177e0:	009b      	lsls	r3, r3, #2
 80177e2:	440b      	add	r3, r1
 80177e4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80177e8:	881b      	ldrh	r3, [r3, #0]
 80177ea:	2b00      	cmp	r3, #0
 80177ec:	d104      	bne.n	80177f8 <USBD_StdEPReq+0x20e>
                {
                  USBD_CtlError(pdev, req);
 80177ee:	6839      	ldr	r1, [r7, #0]
 80177f0:	6878      	ldr	r0, [r7, #4]
 80177f2:	f000 fbac 	bl	8017f4e <USBD_CtlError>
                  break;
 80177f6:	e041      	b.n	801787c <USBD_StdEPReq+0x292>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80177f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80177fc:	2b00      	cmp	r3, #0
 80177fe:	da0b      	bge.n	8017818 <USBD_StdEPReq+0x22e>
 8017800:	7bbb      	ldrb	r3, [r7, #14]
 8017802:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017806:	4613      	mov	r3, r2
 8017808:	009b      	lsls	r3, r3, #2
 801780a:	4413      	add	r3, r2
 801780c:	009b      	lsls	r3, r3, #2
 801780e:	3310      	adds	r3, #16
 8017810:	687a      	ldr	r2, [r7, #4]
 8017812:	4413      	add	r3, r2
 8017814:	3304      	adds	r3, #4
 8017816:	e00b      	b.n	8017830 <USBD_StdEPReq+0x246>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8017818:	7bbb      	ldrb	r3, [r7, #14]
 801781a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801781e:	4613      	mov	r3, r2
 8017820:	009b      	lsls	r3, r3, #2
 8017822:	4413      	add	r3, r2
 8017824:	009b      	lsls	r3, r3, #2
 8017826:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801782a:	687a      	ldr	r2, [r7, #4]
 801782c:	4413      	add	r3, r2
 801782e:	3304      	adds	r3, #4
 8017830:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8017832:	7bbb      	ldrb	r3, [r7, #14]
 8017834:	2b00      	cmp	r3, #0
 8017836:	d002      	beq.n	801783e <USBD_StdEPReq+0x254>
 8017838:	7bbb      	ldrb	r3, [r7, #14]
 801783a:	2b80      	cmp	r3, #128	; 0x80
 801783c:	d103      	bne.n	8017846 <USBD_StdEPReq+0x25c>
              {
                pep->status = 0x0000U;
 801783e:	68bb      	ldr	r3, [r7, #8]
 8017840:	2200      	movs	r2, #0
 8017842:	601a      	str	r2, [r3, #0]
 8017844:	e00e      	b.n	8017864 <USBD_StdEPReq+0x27a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8017846:	7bbb      	ldrb	r3, [r7, #14]
 8017848:	4619      	mov	r1, r3
 801784a:	6878      	ldr	r0, [r7, #4]
 801784c:	f002 fc1f 	bl	801a08e <USBD_LL_IsStallEP>
 8017850:	4603      	mov	r3, r0
 8017852:	2b00      	cmp	r3, #0
 8017854:	d003      	beq.n	801785e <USBD_StdEPReq+0x274>
              {
                pep->status = 0x0001U;
 8017856:	68bb      	ldr	r3, [r7, #8]
 8017858:	2201      	movs	r2, #1
 801785a:	601a      	str	r2, [r3, #0]
 801785c:	e002      	b.n	8017864 <USBD_StdEPReq+0x27a>
              }
              else
              {
                pep->status = 0x0000U;
 801785e:	68bb      	ldr	r3, [r7, #8]
 8017860:	2200      	movs	r2, #0
 8017862:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8017864:	68bb      	ldr	r3, [r7, #8]
 8017866:	2202      	movs	r2, #2
 8017868:	4619      	mov	r1, r3
 801786a:	6878      	ldr	r0, [r7, #4]
 801786c:	f000 fbe0 	bl	8018030 <USBD_CtlSendData>
              break;
 8017870:	e004      	b.n	801787c <USBD_StdEPReq+0x292>

            default:
              USBD_CtlError(pdev, req);
 8017872:	6839      	ldr	r1, [r7, #0]
 8017874:	6878      	ldr	r0, [r7, #4]
 8017876:	f000 fb6a 	bl	8017f4e <USBD_CtlError>
              break;
 801787a:	bf00      	nop
          }
          break;
 801787c:	e004      	b.n	8017888 <USBD_StdEPReq+0x29e>

        default:
          USBD_CtlError(pdev, req);
 801787e:	6839      	ldr	r1, [r7, #0]
 8017880:	6878      	ldr	r0, [r7, #4]
 8017882:	f000 fb64 	bl	8017f4e <USBD_CtlError>
          break;
 8017886:	bf00      	nop
      }
      break;
 8017888:	e004      	b.n	8017894 <USBD_StdEPReq+0x2aa>

    default:
      USBD_CtlError(pdev, req);
 801788a:	6839      	ldr	r1, [r7, #0]
 801788c:	6878      	ldr	r0, [r7, #4]
 801788e:	f000 fb5e 	bl	8017f4e <USBD_CtlError>
      break;
 8017892:	bf00      	nop
  }

  return ret;
 8017894:	7bfb      	ldrb	r3, [r7, #15]
}
 8017896:	4618      	mov	r0, r3
 8017898:	3710      	adds	r7, #16
 801789a:	46bd      	mov	sp, r7
 801789c:	bd80      	pop	{r7, pc}
	...

080178a0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80178a0:	b580      	push	{r7, lr}
 80178a2:	b084      	sub	sp, #16
 80178a4:	af00      	add	r7, sp, #0
 80178a6:	6078      	str	r0, [r7, #4]
 80178a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80178aa:	2300      	movs	r3, #0
 80178ac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80178ae:	2300      	movs	r3, #0
 80178b0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80178b2:	2300      	movs	r3, #0
 80178b4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80178b6:	683b      	ldr	r3, [r7, #0]
 80178b8:	885b      	ldrh	r3, [r3, #2]
 80178ba:	0a1b      	lsrs	r3, r3, #8
 80178bc:	b29b      	uxth	r3, r3
 80178be:	3b01      	subs	r3, #1
 80178c0:	2b0e      	cmp	r3, #14
 80178c2:	f200 8152 	bhi.w	8017b6a <USBD_GetDescriptor+0x2ca>
 80178c6:	a201      	add	r2, pc, #4	; (adr r2, 80178cc <USBD_GetDescriptor+0x2c>)
 80178c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80178cc:	0801793d 	.word	0x0801793d
 80178d0:	08017955 	.word	0x08017955
 80178d4:	08017995 	.word	0x08017995
 80178d8:	08017b6b 	.word	0x08017b6b
 80178dc:	08017b6b 	.word	0x08017b6b
 80178e0:	08017b0b 	.word	0x08017b0b
 80178e4:	08017b37 	.word	0x08017b37
 80178e8:	08017b6b 	.word	0x08017b6b
 80178ec:	08017b6b 	.word	0x08017b6b
 80178f0:	08017b6b 	.word	0x08017b6b
 80178f4:	08017b6b 	.word	0x08017b6b
 80178f8:	08017b6b 	.word	0x08017b6b
 80178fc:	08017b6b 	.word	0x08017b6b
 8017900:	08017b6b 	.word	0x08017b6b
 8017904:	08017909 	.word	0x08017909
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8017908:	687b      	ldr	r3, [r7, #4]
 801790a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801790e:	69db      	ldr	r3, [r3, #28]
 8017910:	2b00      	cmp	r3, #0
 8017912:	d00b      	beq.n	801792c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8017914:	687b      	ldr	r3, [r7, #4]
 8017916:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801791a:	69db      	ldr	r3, [r3, #28]
 801791c:	687a      	ldr	r2, [r7, #4]
 801791e:	7c12      	ldrb	r2, [r2, #16]
 8017920:	f107 0108 	add.w	r1, r7, #8
 8017924:	4610      	mov	r0, r2
 8017926:	4798      	blx	r3
 8017928:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801792a:	e126      	b.n	8017b7a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801792c:	6839      	ldr	r1, [r7, #0]
 801792e:	6878      	ldr	r0, [r7, #4]
 8017930:	f000 fb0d 	bl	8017f4e <USBD_CtlError>
        err++;
 8017934:	7afb      	ldrb	r3, [r7, #11]
 8017936:	3301      	adds	r3, #1
 8017938:	72fb      	strb	r3, [r7, #11]
      break;
 801793a:	e11e      	b.n	8017b7a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801793c:	687b      	ldr	r3, [r7, #4]
 801793e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017942:	681b      	ldr	r3, [r3, #0]
 8017944:	687a      	ldr	r2, [r7, #4]
 8017946:	7c12      	ldrb	r2, [r2, #16]
 8017948:	f107 0108 	add.w	r1, r7, #8
 801794c:	4610      	mov	r0, r2
 801794e:	4798      	blx	r3
 8017950:	60f8      	str	r0, [r7, #12]
      break;
 8017952:	e112      	b.n	8017b7a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017954:	687b      	ldr	r3, [r7, #4]
 8017956:	7c1b      	ldrb	r3, [r3, #16]
 8017958:	2b00      	cmp	r3, #0
 801795a:	d10d      	bne.n	8017978 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801795c:	687b      	ldr	r3, [r7, #4]
 801795e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017964:	f107 0208 	add.w	r2, r7, #8
 8017968:	4610      	mov	r0, r2
 801796a:	4798      	blx	r3
 801796c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801796e:	68fb      	ldr	r3, [r7, #12]
 8017970:	3301      	adds	r3, #1
 8017972:	2202      	movs	r2, #2
 8017974:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8017976:	e100      	b.n	8017b7a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8017978:	687b      	ldr	r3, [r7, #4]
 801797a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801797e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017980:	f107 0208 	add.w	r2, r7, #8
 8017984:	4610      	mov	r0, r2
 8017986:	4798      	blx	r3
 8017988:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801798a:	68fb      	ldr	r3, [r7, #12]
 801798c:	3301      	adds	r3, #1
 801798e:	2202      	movs	r2, #2
 8017990:	701a      	strb	r2, [r3, #0]
      break;
 8017992:	e0f2      	b.n	8017b7a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8017994:	683b      	ldr	r3, [r7, #0]
 8017996:	885b      	ldrh	r3, [r3, #2]
 8017998:	b2db      	uxtb	r3, r3
 801799a:	2b05      	cmp	r3, #5
 801799c:	f200 80ac 	bhi.w	8017af8 <USBD_GetDescriptor+0x258>
 80179a0:	a201      	add	r2, pc, #4	; (adr r2, 80179a8 <USBD_GetDescriptor+0x108>)
 80179a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80179a6:	bf00      	nop
 80179a8:	080179c1 	.word	0x080179c1
 80179ac:	080179f5 	.word	0x080179f5
 80179b0:	08017a29 	.word	0x08017a29
 80179b4:	08017a5d 	.word	0x08017a5d
 80179b8:	08017a91 	.word	0x08017a91
 80179bc:	08017ac5 	.word	0x08017ac5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80179c0:	687b      	ldr	r3, [r7, #4]
 80179c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80179c6:	685b      	ldr	r3, [r3, #4]
 80179c8:	2b00      	cmp	r3, #0
 80179ca:	d00b      	beq.n	80179e4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80179cc:	687b      	ldr	r3, [r7, #4]
 80179ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80179d2:	685b      	ldr	r3, [r3, #4]
 80179d4:	687a      	ldr	r2, [r7, #4]
 80179d6:	7c12      	ldrb	r2, [r2, #16]
 80179d8:	f107 0108 	add.w	r1, r7, #8
 80179dc:	4610      	mov	r0, r2
 80179de:	4798      	blx	r3
 80179e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80179e2:	e091      	b.n	8017b08 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80179e4:	6839      	ldr	r1, [r7, #0]
 80179e6:	6878      	ldr	r0, [r7, #4]
 80179e8:	f000 fab1 	bl	8017f4e <USBD_CtlError>
            err++;
 80179ec:	7afb      	ldrb	r3, [r7, #11]
 80179ee:	3301      	adds	r3, #1
 80179f0:	72fb      	strb	r3, [r7, #11]
          break;
 80179f2:	e089      	b.n	8017b08 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80179f4:	687b      	ldr	r3, [r7, #4]
 80179f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80179fa:	689b      	ldr	r3, [r3, #8]
 80179fc:	2b00      	cmp	r3, #0
 80179fe:	d00b      	beq.n	8017a18 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8017a00:	687b      	ldr	r3, [r7, #4]
 8017a02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017a06:	689b      	ldr	r3, [r3, #8]
 8017a08:	687a      	ldr	r2, [r7, #4]
 8017a0a:	7c12      	ldrb	r2, [r2, #16]
 8017a0c:	f107 0108 	add.w	r1, r7, #8
 8017a10:	4610      	mov	r0, r2
 8017a12:	4798      	blx	r3
 8017a14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017a16:	e077      	b.n	8017b08 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017a18:	6839      	ldr	r1, [r7, #0]
 8017a1a:	6878      	ldr	r0, [r7, #4]
 8017a1c:	f000 fa97 	bl	8017f4e <USBD_CtlError>
            err++;
 8017a20:	7afb      	ldrb	r3, [r7, #11]
 8017a22:	3301      	adds	r3, #1
 8017a24:	72fb      	strb	r3, [r7, #11]
          break;
 8017a26:	e06f      	b.n	8017b08 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8017a28:	687b      	ldr	r3, [r7, #4]
 8017a2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017a2e:	68db      	ldr	r3, [r3, #12]
 8017a30:	2b00      	cmp	r3, #0
 8017a32:	d00b      	beq.n	8017a4c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8017a34:	687b      	ldr	r3, [r7, #4]
 8017a36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017a3a:	68db      	ldr	r3, [r3, #12]
 8017a3c:	687a      	ldr	r2, [r7, #4]
 8017a3e:	7c12      	ldrb	r2, [r2, #16]
 8017a40:	f107 0108 	add.w	r1, r7, #8
 8017a44:	4610      	mov	r0, r2
 8017a46:	4798      	blx	r3
 8017a48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017a4a:	e05d      	b.n	8017b08 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017a4c:	6839      	ldr	r1, [r7, #0]
 8017a4e:	6878      	ldr	r0, [r7, #4]
 8017a50:	f000 fa7d 	bl	8017f4e <USBD_CtlError>
            err++;
 8017a54:	7afb      	ldrb	r3, [r7, #11]
 8017a56:	3301      	adds	r3, #1
 8017a58:	72fb      	strb	r3, [r7, #11]
          break;
 8017a5a:	e055      	b.n	8017b08 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8017a5c:	687b      	ldr	r3, [r7, #4]
 8017a5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017a62:	691b      	ldr	r3, [r3, #16]
 8017a64:	2b00      	cmp	r3, #0
 8017a66:	d00b      	beq.n	8017a80 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8017a68:	687b      	ldr	r3, [r7, #4]
 8017a6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017a6e:	691b      	ldr	r3, [r3, #16]
 8017a70:	687a      	ldr	r2, [r7, #4]
 8017a72:	7c12      	ldrb	r2, [r2, #16]
 8017a74:	f107 0108 	add.w	r1, r7, #8
 8017a78:	4610      	mov	r0, r2
 8017a7a:	4798      	blx	r3
 8017a7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017a7e:	e043      	b.n	8017b08 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017a80:	6839      	ldr	r1, [r7, #0]
 8017a82:	6878      	ldr	r0, [r7, #4]
 8017a84:	f000 fa63 	bl	8017f4e <USBD_CtlError>
            err++;
 8017a88:	7afb      	ldrb	r3, [r7, #11]
 8017a8a:	3301      	adds	r3, #1
 8017a8c:	72fb      	strb	r3, [r7, #11]
          break;
 8017a8e:	e03b      	b.n	8017b08 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8017a90:	687b      	ldr	r3, [r7, #4]
 8017a92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017a96:	695b      	ldr	r3, [r3, #20]
 8017a98:	2b00      	cmp	r3, #0
 8017a9a:	d00b      	beq.n	8017ab4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8017a9c:	687b      	ldr	r3, [r7, #4]
 8017a9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017aa2:	695b      	ldr	r3, [r3, #20]
 8017aa4:	687a      	ldr	r2, [r7, #4]
 8017aa6:	7c12      	ldrb	r2, [r2, #16]
 8017aa8:	f107 0108 	add.w	r1, r7, #8
 8017aac:	4610      	mov	r0, r2
 8017aae:	4798      	blx	r3
 8017ab0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017ab2:	e029      	b.n	8017b08 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017ab4:	6839      	ldr	r1, [r7, #0]
 8017ab6:	6878      	ldr	r0, [r7, #4]
 8017ab8:	f000 fa49 	bl	8017f4e <USBD_CtlError>
            err++;
 8017abc:	7afb      	ldrb	r3, [r7, #11]
 8017abe:	3301      	adds	r3, #1
 8017ac0:	72fb      	strb	r3, [r7, #11]
          break;
 8017ac2:	e021      	b.n	8017b08 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8017ac4:	687b      	ldr	r3, [r7, #4]
 8017ac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017aca:	699b      	ldr	r3, [r3, #24]
 8017acc:	2b00      	cmp	r3, #0
 8017ace:	d00b      	beq.n	8017ae8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8017ad0:	687b      	ldr	r3, [r7, #4]
 8017ad2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017ad6:	699b      	ldr	r3, [r3, #24]
 8017ad8:	687a      	ldr	r2, [r7, #4]
 8017ada:	7c12      	ldrb	r2, [r2, #16]
 8017adc:	f107 0108 	add.w	r1, r7, #8
 8017ae0:	4610      	mov	r0, r2
 8017ae2:	4798      	blx	r3
 8017ae4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017ae6:	e00f      	b.n	8017b08 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017ae8:	6839      	ldr	r1, [r7, #0]
 8017aea:	6878      	ldr	r0, [r7, #4]
 8017aec:	f000 fa2f 	bl	8017f4e <USBD_CtlError>
            err++;
 8017af0:	7afb      	ldrb	r3, [r7, #11]
 8017af2:	3301      	adds	r3, #1
 8017af4:	72fb      	strb	r3, [r7, #11]
          break;
 8017af6:	e007      	b.n	8017b08 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8017af8:	6839      	ldr	r1, [r7, #0]
 8017afa:	6878      	ldr	r0, [r7, #4]
 8017afc:	f000 fa27 	bl	8017f4e <USBD_CtlError>
          err++;
 8017b00:	7afb      	ldrb	r3, [r7, #11]
 8017b02:	3301      	adds	r3, #1
 8017b04:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8017b06:	bf00      	nop
      }
      break;
 8017b08:	e037      	b.n	8017b7a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017b0a:	687b      	ldr	r3, [r7, #4]
 8017b0c:	7c1b      	ldrb	r3, [r3, #16]
 8017b0e:	2b00      	cmp	r3, #0
 8017b10:	d109      	bne.n	8017b26 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8017b12:	687b      	ldr	r3, [r7, #4]
 8017b14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017b1a:	f107 0208 	add.w	r2, r7, #8
 8017b1e:	4610      	mov	r0, r2
 8017b20:	4798      	blx	r3
 8017b22:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8017b24:	e029      	b.n	8017b7a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8017b26:	6839      	ldr	r1, [r7, #0]
 8017b28:	6878      	ldr	r0, [r7, #4]
 8017b2a:	f000 fa10 	bl	8017f4e <USBD_CtlError>
        err++;
 8017b2e:	7afb      	ldrb	r3, [r7, #11]
 8017b30:	3301      	adds	r3, #1
 8017b32:	72fb      	strb	r3, [r7, #11]
      break;
 8017b34:	e021      	b.n	8017b7a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017b36:	687b      	ldr	r3, [r7, #4]
 8017b38:	7c1b      	ldrb	r3, [r3, #16]
 8017b3a:	2b00      	cmp	r3, #0
 8017b3c:	d10d      	bne.n	8017b5a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8017b3e:	687b      	ldr	r3, [r7, #4]
 8017b40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017b46:	f107 0208 	add.w	r2, r7, #8
 8017b4a:	4610      	mov	r0, r2
 8017b4c:	4798      	blx	r3
 8017b4e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8017b50:	68fb      	ldr	r3, [r7, #12]
 8017b52:	3301      	adds	r3, #1
 8017b54:	2207      	movs	r2, #7
 8017b56:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8017b58:	e00f      	b.n	8017b7a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8017b5a:	6839      	ldr	r1, [r7, #0]
 8017b5c:	6878      	ldr	r0, [r7, #4]
 8017b5e:	f000 f9f6 	bl	8017f4e <USBD_CtlError>
        err++;
 8017b62:	7afb      	ldrb	r3, [r7, #11]
 8017b64:	3301      	adds	r3, #1
 8017b66:	72fb      	strb	r3, [r7, #11]
      break;
 8017b68:	e007      	b.n	8017b7a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8017b6a:	6839      	ldr	r1, [r7, #0]
 8017b6c:	6878      	ldr	r0, [r7, #4]
 8017b6e:	f000 f9ee 	bl	8017f4e <USBD_CtlError>
      err++;
 8017b72:	7afb      	ldrb	r3, [r7, #11]
 8017b74:	3301      	adds	r3, #1
 8017b76:	72fb      	strb	r3, [r7, #11]
      break;
 8017b78:	bf00      	nop
  }

  if (err != 0U)
 8017b7a:	7afb      	ldrb	r3, [r7, #11]
 8017b7c:	2b00      	cmp	r3, #0
 8017b7e:	d11e      	bne.n	8017bbe <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8017b80:	683b      	ldr	r3, [r7, #0]
 8017b82:	88db      	ldrh	r3, [r3, #6]
 8017b84:	2b00      	cmp	r3, #0
 8017b86:	d016      	beq.n	8017bb6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8017b88:	893b      	ldrh	r3, [r7, #8]
 8017b8a:	2b00      	cmp	r3, #0
 8017b8c:	d00e      	beq.n	8017bac <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8017b8e:	683b      	ldr	r3, [r7, #0]
 8017b90:	88da      	ldrh	r2, [r3, #6]
 8017b92:	893b      	ldrh	r3, [r7, #8]
 8017b94:	4293      	cmp	r3, r2
 8017b96:	bf28      	it	cs
 8017b98:	4613      	movcs	r3, r2
 8017b9a:	b29b      	uxth	r3, r3
 8017b9c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8017b9e:	893b      	ldrh	r3, [r7, #8]
 8017ba0:	461a      	mov	r2, r3
 8017ba2:	68f9      	ldr	r1, [r7, #12]
 8017ba4:	6878      	ldr	r0, [r7, #4]
 8017ba6:	f000 fa43 	bl	8018030 <USBD_CtlSendData>
 8017baa:	e009      	b.n	8017bc0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8017bac:	6839      	ldr	r1, [r7, #0]
 8017bae:	6878      	ldr	r0, [r7, #4]
 8017bb0:	f000 f9cd 	bl	8017f4e <USBD_CtlError>
 8017bb4:	e004      	b.n	8017bc0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8017bb6:	6878      	ldr	r0, [r7, #4]
 8017bb8:	f000 fa94 	bl	80180e4 <USBD_CtlSendStatus>
 8017bbc:	e000      	b.n	8017bc0 <USBD_GetDescriptor+0x320>
    return;
 8017bbe:	bf00      	nop
  }
}
 8017bc0:	3710      	adds	r7, #16
 8017bc2:	46bd      	mov	sp, r7
 8017bc4:	bd80      	pop	{r7, pc}
 8017bc6:	bf00      	nop

08017bc8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017bc8:	b580      	push	{r7, lr}
 8017bca:	b084      	sub	sp, #16
 8017bcc:	af00      	add	r7, sp, #0
 8017bce:	6078      	str	r0, [r7, #4]
 8017bd0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8017bd2:	683b      	ldr	r3, [r7, #0]
 8017bd4:	889b      	ldrh	r3, [r3, #4]
 8017bd6:	2b00      	cmp	r3, #0
 8017bd8:	d131      	bne.n	8017c3e <USBD_SetAddress+0x76>
 8017bda:	683b      	ldr	r3, [r7, #0]
 8017bdc:	88db      	ldrh	r3, [r3, #6]
 8017bde:	2b00      	cmp	r3, #0
 8017be0:	d12d      	bne.n	8017c3e <USBD_SetAddress+0x76>
 8017be2:	683b      	ldr	r3, [r7, #0]
 8017be4:	885b      	ldrh	r3, [r3, #2]
 8017be6:	2b7f      	cmp	r3, #127	; 0x7f
 8017be8:	d829      	bhi.n	8017c3e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8017bea:	683b      	ldr	r3, [r7, #0]
 8017bec:	885b      	ldrh	r3, [r3, #2]
 8017bee:	b2db      	uxtb	r3, r3
 8017bf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017bf4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017bf6:	687b      	ldr	r3, [r7, #4]
 8017bf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017bfc:	b2db      	uxtb	r3, r3
 8017bfe:	2b03      	cmp	r3, #3
 8017c00:	d104      	bne.n	8017c0c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8017c02:	6839      	ldr	r1, [r7, #0]
 8017c04:	6878      	ldr	r0, [r7, #4]
 8017c06:	f000 f9a2 	bl	8017f4e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017c0a:	e01c      	b.n	8017c46 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8017c0c:	687b      	ldr	r3, [r7, #4]
 8017c0e:	7bfa      	ldrb	r2, [r7, #15]
 8017c10:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8017c14:	7bfb      	ldrb	r3, [r7, #15]
 8017c16:	4619      	mov	r1, r3
 8017c18:	6878      	ldr	r0, [r7, #4]
 8017c1a:	f002 fa5e 	bl	801a0da <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8017c1e:	6878      	ldr	r0, [r7, #4]
 8017c20:	f000 fa60 	bl	80180e4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8017c24:	7bfb      	ldrb	r3, [r7, #15]
 8017c26:	2b00      	cmp	r3, #0
 8017c28:	d004      	beq.n	8017c34 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8017c2a:	687b      	ldr	r3, [r7, #4]
 8017c2c:	2202      	movs	r2, #2
 8017c2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017c32:	e008      	b.n	8017c46 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8017c34:	687b      	ldr	r3, [r7, #4]
 8017c36:	2201      	movs	r2, #1
 8017c38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017c3c:	e003      	b.n	8017c46 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8017c3e:	6839      	ldr	r1, [r7, #0]
 8017c40:	6878      	ldr	r0, [r7, #4]
 8017c42:	f000 f984 	bl	8017f4e <USBD_CtlError>
  }
}
 8017c46:	bf00      	nop
 8017c48:	3710      	adds	r7, #16
 8017c4a:	46bd      	mov	sp, r7
 8017c4c:	bd80      	pop	{r7, pc}
	...

08017c50 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017c50:	b580      	push	{r7, lr}
 8017c52:	b084      	sub	sp, #16
 8017c54:	af00      	add	r7, sp, #0
 8017c56:	6078      	str	r0, [r7, #4]
 8017c58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8017c5a:	2300      	movs	r3, #0
 8017c5c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8017c5e:	683b      	ldr	r3, [r7, #0]
 8017c60:	885b      	ldrh	r3, [r3, #2]
 8017c62:	b2da      	uxtb	r2, r3
 8017c64:	4b4c      	ldr	r3, [pc, #304]	; (8017d98 <USBD_SetConfig+0x148>)
 8017c66:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8017c68:	4b4b      	ldr	r3, [pc, #300]	; (8017d98 <USBD_SetConfig+0x148>)
 8017c6a:	781b      	ldrb	r3, [r3, #0]
 8017c6c:	2b01      	cmp	r3, #1
 8017c6e:	d905      	bls.n	8017c7c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8017c70:	6839      	ldr	r1, [r7, #0]
 8017c72:	6878      	ldr	r0, [r7, #4]
 8017c74:	f000 f96b 	bl	8017f4e <USBD_CtlError>
    return USBD_FAIL;
 8017c78:	2303      	movs	r3, #3
 8017c7a:	e088      	b.n	8017d8e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8017c7c:	687b      	ldr	r3, [r7, #4]
 8017c7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017c82:	b2db      	uxtb	r3, r3
 8017c84:	2b02      	cmp	r3, #2
 8017c86:	d002      	beq.n	8017c8e <USBD_SetConfig+0x3e>
 8017c88:	2b03      	cmp	r3, #3
 8017c8a:	d025      	beq.n	8017cd8 <USBD_SetConfig+0x88>
 8017c8c:	e071      	b.n	8017d72 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8017c8e:	4b42      	ldr	r3, [pc, #264]	; (8017d98 <USBD_SetConfig+0x148>)
 8017c90:	781b      	ldrb	r3, [r3, #0]
 8017c92:	2b00      	cmp	r3, #0
 8017c94:	d01c      	beq.n	8017cd0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8017c96:	4b40      	ldr	r3, [pc, #256]	; (8017d98 <USBD_SetConfig+0x148>)
 8017c98:	781b      	ldrb	r3, [r3, #0]
 8017c9a:	461a      	mov	r2, r3
 8017c9c:	687b      	ldr	r3, [r7, #4]
 8017c9e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8017ca0:	4b3d      	ldr	r3, [pc, #244]	; (8017d98 <USBD_SetConfig+0x148>)
 8017ca2:	781b      	ldrb	r3, [r3, #0]
 8017ca4:	4619      	mov	r1, r3
 8017ca6:	6878      	ldr	r0, [r7, #4]
 8017ca8:	f7ff f99d 	bl	8016fe6 <USBD_SetClassConfig>
 8017cac:	4603      	mov	r3, r0
 8017cae:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8017cb0:	7bfb      	ldrb	r3, [r7, #15]
 8017cb2:	2b00      	cmp	r3, #0
 8017cb4:	d004      	beq.n	8017cc0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8017cb6:	6839      	ldr	r1, [r7, #0]
 8017cb8:	6878      	ldr	r0, [r7, #4]
 8017cba:	f000 f948 	bl	8017f4e <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8017cbe:	e065      	b.n	8017d8c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8017cc0:	6878      	ldr	r0, [r7, #4]
 8017cc2:	f000 fa0f 	bl	80180e4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8017cc6:	687b      	ldr	r3, [r7, #4]
 8017cc8:	2203      	movs	r2, #3
 8017cca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8017cce:	e05d      	b.n	8017d8c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8017cd0:	6878      	ldr	r0, [r7, #4]
 8017cd2:	f000 fa07 	bl	80180e4 <USBD_CtlSendStatus>
      break;
 8017cd6:	e059      	b.n	8017d8c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8017cd8:	4b2f      	ldr	r3, [pc, #188]	; (8017d98 <USBD_SetConfig+0x148>)
 8017cda:	781b      	ldrb	r3, [r3, #0]
 8017cdc:	2b00      	cmp	r3, #0
 8017cde:	d112      	bne.n	8017d06 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8017ce0:	687b      	ldr	r3, [r7, #4]
 8017ce2:	2202      	movs	r2, #2
 8017ce4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8017ce8:	4b2b      	ldr	r3, [pc, #172]	; (8017d98 <USBD_SetConfig+0x148>)
 8017cea:	781b      	ldrb	r3, [r3, #0]
 8017cec:	461a      	mov	r2, r3
 8017cee:	687b      	ldr	r3, [r7, #4]
 8017cf0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8017cf2:	4b29      	ldr	r3, [pc, #164]	; (8017d98 <USBD_SetConfig+0x148>)
 8017cf4:	781b      	ldrb	r3, [r3, #0]
 8017cf6:	4619      	mov	r1, r3
 8017cf8:	6878      	ldr	r0, [r7, #4]
 8017cfa:	f7ff f990 	bl	801701e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8017cfe:	6878      	ldr	r0, [r7, #4]
 8017d00:	f000 f9f0 	bl	80180e4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8017d04:	e042      	b.n	8017d8c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8017d06:	4b24      	ldr	r3, [pc, #144]	; (8017d98 <USBD_SetConfig+0x148>)
 8017d08:	781b      	ldrb	r3, [r3, #0]
 8017d0a:	461a      	mov	r2, r3
 8017d0c:	687b      	ldr	r3, [r7, #4]
 8017d0e:	685b      	ldr	r3, [r3, #4]
 8017d10:	429a      	cmp	r2, r3
 8017d12:	d02a      	beq.n	8017d6a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8017d14:	687b      	ldr	r3, [r7, #4]
 8017d16:	685b      	ldr	r3, [r3, #4]
 8017d18:	b2db      	uxtb	r3, r3
 8017d1a:	4619      	mov	r1, r3
 8017d1c:	6878      	ldr	r0, [r7, #4]
 8017d1e:	f7ff f97e 	bl	801701e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8017d22:	4b1d      	ldr	r3, [pc, #116]	; (8017d98 <USBD_SetConfig+0x148>)
 8017d24:	781b      	ldrb	r3, [r3, #0]
 8017d26:	461a      	mov	r2, r3
 8017d28:	687b      	ldr	r3, [r7, #4]
 8017d2a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8017d2c:	4b1a      	ldr	r3, [pc, #104]	; (8017d98 <USBD_SetConfig+0x148>)
 8017d2e:	781b      	ldrb	r3, [r3, #0]
 8017d30:	4619      	mov	r1, r3
 8017d32:	6878      	ldr	r0, [r7, #4]
 8017d34:	f7ff f957 	bl	8016fe6 <USBD_SetClassConfig>
 8017d38:	4603      	mov	r3, r0
 8017d3a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8017d3c:	7bfb      	ldrb	r3, [r7, #15]
 8017d3e:	2b00      	cmp	r3, #0
 8017d40:	d00f      	beq.n	8017d62 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8017d42:	6839      	ldr	r1, [r7, #0]
 8017d44:	6878      	ldr	r0, [r7, #4]
 8017d46:	f000 f902 	bl	8017f4e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8017d4a:	687b      	ldr	r3, [r7, #4]
 8017d4c:	685b      	ldr	r3, [r3, #4]
 8017d4e:	b2db      	uxtb	r3, r3
 8017d50:	4619      	mov	r1, r3
 8017d52:	6878      	ldr	r0, [r7, #4]
 8017d54:	f7ff f963 	bl	801701e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8017d58:	687b      	ldr	r3, [r7, #4]
 8017d5a:	2202      	movs	r2, #2
 8017d5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8017d60:	e014      	b.n	8017d8c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8017d62:	6878      	ldr	r0, [r7, #4]
 8017d64:	f000 f9be 	bl	80180e4 <USBD_CtlSendStatus>
      break;
 8017d68:	e010      	b.n	8017d8c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8017d6a:	6878      	ldr	r0, [r7, #4]
 8017d6c:	f000 f9ba 	bl	80180e4 <USBD_CtlSendStatus>
      break;
 8017d70:	e00c      	b.n	8017d8c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8017d72:	6839      	ldr	r1, [r7, #0]
 8017d74:	6878      	ldr	r0, [r7, #4]
 8017d76:	f000 f8ea 	bl	8017f4e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8017d7a:	4b07      	ldr	r3, [pc, #28]	; (8017d98 <USBD_SetConfig+0x148>)
 8017d7c:	781b      	ldrb	r3, [r3, #0]
 8017d7e:	4619      	mov	r1, r3
 8017d80:	6878      	ldr	r0, [r7, #4]
 8017d82:	f7ff f94c 	bl	801701e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8017d86:	2303      	movs	r3, #3
 8017d88:	73fb      	strb	r3, [r7, #15]
      break;
 8017d8a:	bf00      	nop
  }

  return ret;
 8017d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8017d8e:	4618      	mov	r0, r3
 8017d90:	3710      	adds	r7, #16
 8017d92:	46bd      	mov	sp, r7
 8017d94:	bd80      	pop	{r7, pc}
 8017d96:	bf00      	nop
 8017d98:	2002763c 	.word	0x2002763c

08017d9c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017d9c:	b580      	push	{r7, lr}
 8017d9e:	b082      	sub	sp, #8
 8017da0:	af00      	add	r7, sp, #0
 8017da2:	6078      	str	r0, [r7, #4]
 8017da4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8017da6:	683b      	ldr	r3, [r7, #0]
 8017da8:	88db      	ldrh	r3, [r3, #6]
 8017daa:	2b01      	cmp	r3, #1
 8017dac:	d004      	beq.n	8017db8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8017dae:	6839      	ldr	r1, [r7, #0]
 8017db0:	6878      	ldr	r0, [r7, #4]
 8017db2:	f000 f8cc 	bl	8017f4e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8017db6:	e022      	b.n	8017dfe <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8017db8:	687b      	ldr	r3, [r7, #4]
 8017dba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017dbe:	b2db      	uxtb	r3, r3
 8017dc0:	2b01      	cmp	r3, #1
 8017dc2:	db17      	blt.n	8017df4 <USBD_GetConfig+0x58>
 8017dc4:	2b02      	cmp	r3, #2
 8017dc6:	dd02      	ble.n	8017dce <USBD_GetConfig+0x32>
 8017dc8:	2b03      	cmp	r3, #3
 8017dca:	d00b      	beq.n	8017de4 <USBD_GetConfig+0x48>
 8017dcc:	e012      	b.n	8017df4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8017dce:	687b      	ldr	r3, [r7, #4]
 8017dd0:	2200      	movs	r2, #0
 8017dd2:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8017dd4:	687b      	ldr	r3, [r7, #4]
 8017dd6:	3308      	adds	r3, #8
 8017dd8:	2201      	movs	r2, #1
 8017dda:	4619      	mov	r1, r3
 8017ddc:	6878      	ldr	r0, [r7, #4]
 8017dde:	f000 f927 	bl	8018030 <USBD_CtlSendData>
        break;
 8017de2:	e00c      	b.n	8017dfe <USBD_GetConfig+0x62>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8017de4:	687b      	ldr	r3, [r7, #4]
 8017de6:	3304      	adds	r3, #4
 8017de8:	2201      	movs	r2, #1
 8017dea:	4619      	mov	r1, r3
 8017dec:	6878      	ldr	r0, [r7, #4]
 8017dee:	f000 f91f 	bl	8018030 <USBD_CtlSendData>
        break;
 8017df2:	e004      	b.n	8017dfe <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8017df4:	6839      	ldr	r1, [r7, #0]
 8017df6:	6878      	ldr	r0, [r7, #4]
 8017df8:	f000 f8a9 	bl	8017f4e <USBD_CtlError>
        break;
 8017dfc:	bf00      	nop
}
 8017dfe:	bf00      	nop
 8017e00:	3708      	adds	r7, #8
 8017e02:	46bd      	mov	sp, r7
 8017e04:	bd80      	pop	{r7, pc}

08017e06 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017e06:	b580      	push	{r7, lr}
 8017e08:	b082      	sub	sp, #8
 8017e0a:	af00      	add	r7, sp, #0
 8017e0c:	6078      	str	r0, [r7, #4]
 8017e0e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8017e10:	687b      	ldr	r3, [r7, #4]
 8017e12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017e16:	b2db      	uxtb	r3, r3
 8017e18:	3b01      	subs	r3, #1
 8017e1a:	2b02      	cmp	r3, #2
 8017e1c:	d81e      	bhi.n	8017e5c <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8017e1e:	683b      	ldr	r3, [r7, #0]
 8017e20:	88db      	ldrh	r3, [r3, #6]
 8017e22:	2b02      	cmp	r3, #2
 8017e24:	d004      	beq.n	8017e30 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8017e26:	6839      	ldr	r1, [r7, #0]
 8017e28:	6878      	ldr	r0, [r7, #4]
 8017e2a:	f000 f890 	bl	8017f4e <USBD_CtlError>
        break;
 8017e2e:	e01a      	b.n	8017e66 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8017e30:	687b      	ldr	r3, [r7, #4]
 8017e32:	2201      	movs	r2, #1
 8017e34:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8017e36:	687b      	ldr	r3, [r7, #4]
 8017e38:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8017e3c:	2b00      	cmp	r3, #0
 8017e3e:	d005      	beq.n	8017e4c <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8017e40:	687b      	ldr	r3, [r7, #4]
 8017e42:	68db      	ldr	r3, [r3, #12]
 8017e44:	f043 0202 	orr.w	r2, r3, #2
 8017e48:	687b      	ldr	r3, [r7, #4]
 8017e4a:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8017e4c:	687b      	ldr	r3, [r7, #4]
 8017e4e:	330c      	adds	r3, #12
 8017e50:	2202      	movs	r2, #2
 8017e52:	4619      	mov	r1, r3
 8017e54:	6878      	ldr	r0, [r7, #4]
 8017e56:	f000 f8eb 	bl	8018030 <USBD_CtlSendData>
      break;
 8017e5a:	e004      	b.n	8017e66 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8017e5c:	6839      	ldr	r1, [r7, #0]
 8017e5e:	6878      	ldr	r0, [r7, #4]
 8017e60:	f000 f875 	bl	8017f4e <USBD_CtlError>
      break;
 8017e64:	bf00      	nop
  }
}
 8017e66:	bf00      	nop
 8017e68:	3708      	adds	r7, #8
 8017e6a:	46bd      	mov	sp, r7
 8017e6c:	bd80      	pop	{r7, pc}

08017e6e <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017e6e:	b580      	push	{r7, lr}
 8017e70:	b082      	sub	sp, #8
 8017e72:	af00      	add	r7, sp, #0
 8017e74:	6078      	str	r0, [r7, #4]
 8017e76:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8017e78:	683b      	ldr	r3, [r7, #0]
 8017e7a:	885b      	ldrh	r3, [r3, #2]
 8017e7c:	2b01      	cmp	r3, #1
 8017e7e:	d106      	bne.n	8017e8e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8017e80:	687b      	ldr	r3, [r7, #4]
 8017e82:	2201      	movs	r2, #1
 8017e84:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8017e88:	6878      	ldr	r0, [r7, #4]
 8017e8a:	f000 f92b 	bl	80180e4 <USBD_CtlSendStatus>
  }
}
 8017e8e:	bf00      	nop
 8017e90:	3708      	adds	r7, #8
 8017e92:	46bd      	mov	sp, r7
 8017e94:	bd80      	pop	{r7, pc}

08017e96 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017e96:	b580      	push	{r7, lr}
 8017e98:	b082      	sub	sp, #8
 8017e9a:	af00      	add	r7, sp, #0
 8017e9c:	6078      	str	r0, [r7, #4]
 8017e9e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8017ea0:	687b      	ldr	r3, [r7, #4]
 8017ea2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017ea6:	b2db      	uxtb	r3, r3
 8017ea8:	3b01      	subs	r3, #1
 8017eaa:	2b02      	cmp	r3, #2
 8017eac:	d80b      	bhi.n	8017ec6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8017eae:	683b      	ldr	r3, [r7, #0]
 8017eb0:	885b      	ldrh	r3, [r3, #2]
 8017eb2:	2b01      	cmp	r3, #1
 8017eb4:	d10c      	bne.n	8017ed0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8017eb6:	687b      	ldr	r3, [r7, #4]
 8017eb8:	2200      	movs	r2, #0
 8017eba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8017ebe:	6878      	ldr	r0, [r7, #4]
 8017ec0:	f000 f910 	bl	80180e4 <USBD_CtlSendStatus>
      }
      break;
 8017ec4:	e004      	b.n	8017ed0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8017ec6:	6839      	ldr	r1, [r7, #0]
 8017ec8:	6878      	ldr	r0, [r7, #4]
 8017eca:	f000 f840 	bl	8017f4e <USBD_CtlError>
      break;
 8017ece:	e000      	b.n	8017ed2 <USBD_ClrFeature+0x3c>
      break;
 8017ed0:	bf00      	nop
  }
}
 8017ed2:	bf00      	nop
 8017ed4:	3708      	adds	r7, #8
 8017ed6:	46bd      	mov	sp, r7
 8017ed8:	bd80      	pop	{r7, pc}

08017eda <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8017eda:	b580      	push	{r7, lr}
 8017edc:	b084      	sub	sp, #16
 8017ede:	af00      	add	r7, sp, #0
 8017ee0:	6078      	str	r0, [r7, #4]
 8017ee2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8017ee4:	683b      	ldr	r3, [r7, #0]
 8017ee6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8017ee8:	68fb      	ldr	r3, [r7, #12]
 8017eea:	781a      	ldrb	r2, [r3, #0]
 8017eec:	687b      	ldr	r3, [r7, #4]
 8017eee:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8017ef0:	68fb      	ldr	r3, [r7, #12]
 8017ef2:	3301      	adds	r3, #1
 8017ef4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8017ef6:	68fb      	ldr	r3, [r7, #12]
 8017ef8:	781a      	ldrb	r2, [r3, #0]
 8017efa:	687b      	ldr	r3, [r7, #4]
 8017efc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8017efe:	68fb      	ldr	r3, [r7, #12]
 8017f00:	3301      	adds	r3, #1
 8017f02:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8017f04:	68f8      	ldr	r0, [r7, #12]
 8017f06:	f7ff fa9c 	bl	8017442 <SWAPBYTE>
 8017f0a:	4603      	mov	r3, r0
 8017f0c:	461a      	mov	r2, r3
 8017f0e:	687b      	ldr	r3, [r7, #4]
 8017f10:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8017f12:	68fb      	ldr	r3, [r7, #12]
 8017f14:	3301      	adds	r3, #1
 8017f16:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8017f18:	68fb      	ldr	r3, [r7, #12]
 8017f1a:	3301      	adds	r3, #1
 8017f1c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8017f1e:	68f8      	ldr	r0, [r7, #12]
 8017f20:	f7ff fa8f 	bl	8017442 <SWAPBYTE>
 8017f24:	4603      	mov	r3, r0
 8017f26:	461a      	mov	r2, r3
 8017f28:	687b      	ldr	r3, [r7, #4]
 8017f2a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8017f2c:	68fb      	ldr	r3, [r7, #12]
 8017f2e:	3301      	adds	r3, #1
 8017f30:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8017f32:	68fb      	ldr	r3, [r7, #12]
 8017f34:	3301      	adds	r3, #1
 8017f36:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8017f38:	68f8      	ldr	r0, [r7, #12]
 8017f3a:	f7ff fa82 	bl	8017442 <SWAPBYTE>
 8017f3e:	4603      	mov	r3, r0
 8017f40:	461a      	mov	r2, r3
 8017f42:	687b      	ldr	r3, [r7, #4]
 8017f44:	80da      	strh	r2, [r3, #6]
}
 8017f46:	bf00      	nop
 8017f48:	3710      	adds	r7, #16
 8017f4a:	46bd      	mov	sp, r7
 8017f4c:	bd80      	pop	{r7, pc}

08017f4e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017f4e:	b580      	push	{r7, lr}
 8017f50:	b082      	sub	sp, #8
 8017f52:	af00      	add	r7, sp, #0
 8017f54:	6078      	str	r0, [r7, #4]
 8017f56:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8017f58:	2180      	movs	r1, #128	; 0x80
 8017f5a:	6878      	ldr	r0, [r7, #4]
 8017f5c:	f002 f859 	bl	801a012 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8017f60:	2100      	movs	r1, #0
 8017f62:	6878      	ldr	r0, [r7, #4]
 8017f64:	f002 f855 	bl	801a012 <USBD_LL_StallEP>
}
 8017f68:	bf00      	nop
 8017f6a:	3708      	adds	r7, #8
 8017f6c:	46bd      	mov	sp, r7
 8017f6e:	bd80      	pop	{r7, pc}

08017f70 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8017f70:	b580      	push	{r7, lr}
 8017f72:	b086      	sub	sp, #24
 8017f74:	af00      	add	r7, sp, #0
 8017f76:	60f8      	str	r0, [r7, #12]
 8017f78:	60b9      	str	r1, [r7, #8]
 8017f7a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8017f7c:	2300      	movs	r3, #0
 8017f7e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8017f80:	68fb      	ldr	r3, [r7, #12]
 8017f82:	2b00      	cmp	r3, #0
 8017f84:	d036      	beq.n	8017ff4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8017f86:	68fb      	ldr	r3, [r7, #12]
 8017f88:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8017f8a:	6938      	ldr	r0, [r7, #16]
 8017f8c:	f000 f836 	bl	8017ffc <USBD_GetLen>
 8017f90:	4603      	mov	r3, r0
 8017f92:	3301      	adds	r3, #1
 8017f94:	b29b      	uxth	r3, r3
 8017f96:	005b      	lsls	r3, r3, #1
 8017f98:	b29a      	uxth	r2, r3
 8017f9a:	687b      	ldr	r3, [r7, #4]
 8017f9c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8017f9e:	7dfb      	ldrb	r3, [r7, #23]
 8017fa0:	68ba      	ldr	r2, [r7, #8]
 8017fa2:	4413      	add	r3, r2
 8017fa4:	687a      	ldr	r2, [r7, #4]
 8017fa6:	7812      	ldrb	r2, [r2, #0]
 8017fa8:	701a      	strb	r2, [r3, #0]
  idx++;
 8017faa:	7dfb      	ldrb	r3, [r7, #23]
 8017fac:	3301      	adds	r3, #1
 8017fae:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8017fb0:	7dfb      	ldrb	r3, [r7, #23]
 8017fb2:	68ba      	ldr	r2, [r7, #8]
 8017fb4:	4413      	add	r3, r2
 8017fb6:	2203      	movs	r2, #3
 8017fb8:	701a      	strb	r2, [r3, #0]
  idx++;
 8017fba:	7dfb      	ldrb	r3, [r7, #23]
 8017fbc:	3301      	adds	r3, #1
 8017fbe:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8017fc0:	e013      	b.n	8017fea <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8017fc2:	7dfb      	ldrb	r3, [r7, #23]
 8017fc4:	68ba      	ldr	r2, [r7, #8]
 8017fc6:	4413      	add	r3, r2
 8017fc8:	693a      	ldr	r2, [r7, #16]
 8017fca:	7812      	ldrb	r2, [r2, #0]
 8017fcc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8017fce:	693b      	ldr	r3, [r7, #16]
 8017fd0:	3301      	adds	r3, #1
 8017fd2:	613b      	str	r3, [r7, #16]
    idx++;
 8017fd4:	7dfb      	ldrb	r3, [r7, #23]
 8017fd6:	3301      	adds	r3, #1
 8017fd8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8017fda:	7dfb      	ldrb	r3, [r7, #23]
 8017fdc:	68ba      	ldr	r2, [r7, #8]
 8017fde:	4413      	add	r3, r2
 8017fe0:	2200      	movs	r2, #0
 8017fe2:	701a      	strb	r2, [r3, #0]
    idx++;
 8017fe4:	7dfb      	ldrb	r3, [r7, #23]
 8017fe6:	3301      	adds	r3, #1
 8017fe8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8017fea:	693b      	ldr	r3, [r7, #16]
 8017fec:	781b      	ldrb	r3, [r3, #0]
 8017fee:	2b00      	cmp	r3, #0
 8017ff0:	d1e7      	bne.n	8017fc2 <USBD_GetString+0x52>
 8017ff2:	e000      	b.n	8017ff6 <USBD_GetString+0x86>
    return;
 8017ff4:	bf00      	nop
  }
}
 8017ff6:	3718      	adds	r7, #24
 8017ff8:	46bd      	mov	sp, r7
 8017ffa:	bd80      	pop	{r7, pc}

08017ffc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8017ffc:	b480      	push	{r7}
 8017ffe:	b085      	sub	sp, #20
 8018000:	af00      	add	r7, sp, #0
 8018002:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8018004:	2300      	movs	r3, #0
 8018006:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8018008:	687b      	ldr	r3, [r7, #4]
 801800a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801800c:	e005      	b.n	801801a <USBD_GetLen+0x1e>
  {
    len++;
 801800e:	7bfb      	ldrb	r3, [r7, #15]
 8018010:	3301      	adds	r3, #1
 8018012:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8018014:	68bb      	ldr	r3, [r7, #8]
 8018016:	3301      	adds	r3, #1
 8018018:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801801a:	68bb      	ldr	r3, [r7, #8]
 801801c:	781b      	ldrb	r3, [r3, #0]
 801801e:	2b00      	cmp	r3, #0
 8018020:	d1f5      	bne.n	801800e <USBD_GetLen+0x12>
  }

  return len;
 8018022:	7bfb      	ldrb	r3, [r7, #15]
}
 8018024:	4618      	mov	r0, r3
 8018026:	3714      	adds	r7, #20
 8018028:	46bd      	mov	sp, r7
 801802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801802e:	4770      	bx	lr

08018030 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8018030:	b580      	push	{r7, lr}
 8018032:	b084      	sub	sp, #16
 8018034:	af00      	add	r7, sp, #0
 8018036:	60f8      	str	r0, [r7, #12]
 8018038:	60b9      	str	r1, [r7, #8]
 801803a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801803c:	68fb      	ldr	r3, [r7, #12]
 801803e:	2202      	movs	r2, #2
 8018040:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8018044:	68fb      	ldr	r3, [r7, #12]
 8018046:	687a      	ldr	r2, [r7, #4]
 8018048:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801804a:	68fb      	ldr	r3, [r7, #12]
 801804c:	687a      	ldr	r2, [r7, #4]
 801804e:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8018050:	687b      	ldr	r3, [r7, #4]
 8018052:	68ba      	ldr	r2, [r7, #8]
 8018054:	2100      	movs	r1, #0
 8018056:	68f8      	ldr	r0, [r7, #12]
 8018058:	f002 f85e 	bl	801a118 <USBD_LL_Transmit>

  return USBD_OK;
 801805c:	2300      	movs	r3, #0
}
 801805e:	4618      	mov	r0, r3
 8018060:	3710      	adds	r7, #16
 8018062:	46bd      	mov	sp, r7
 8018064:	bd80      	pop	{r7, pc}

08018066 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8018066:	b580      	push	{r7, lr}
 8018068:	b084      	sub	sp, #16
 801806a:	af00      	add	r7, sp, #0
 801806c:	60f8      	str	r0, [r7, #12]
 801806e:	60b9      	str	r1, [r7, #8]
 8018070:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8018072:	687b      	ldr	r3, [r7, #4]
 8018074:	68ba      	ldr	r2, [r7, #8]
 8018076:	2100      	movs	r1, #0
 8018078:	68f8      	ldr	r0, [r7, #12]
 801807a:	f002 f84d 	bl	801a118 <USBD_LL_Transmit>

  return USBD_OK;
 801807e:	2300      	movs	r3, #0
}
 8018080:	4618      	mov	r0, r3
 8018082:	3710      	adds	r7, #16
 8018084:	46bd      	mov	sp, r7
 8018086:	bd80      	pop	{r7, pc}

08018088 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8018088:	b580      	push	{r7, lr}
 801808a:	b084      	sub	sp, #16
 801808c:	af00      	add	r7, sp, #0
 801808e:	60f8      	str	r0, [r7, #12]
 8018090:	60b9      	str	r1, [r7, #8]
 8018092:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8018094:	68fb      	ldr	r3, [r7, #12]
 8018096:	2203      	movs	r2, #3
 8018098:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801809c:	68fb      	ldr	r3, [r7, #12]
 801809e:	687a      	ldr	r2, [r7, #4]
 80180a0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80180a4:	68fb      	ldr	r3, [r7, #12]
 80180a6:	687a      	ldr	r2, [r7, #4]
 80180a8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80180ac:	687b      	ldr	r3, [r7, #4]
 80180ae:	68ba      	ldr	r2, [r7, #8]
 80180b0:	2100      	movs	r1, #0
 80180b2:	68f8      	ldr	r0, [r7, #12]
 80180b4:	f002 f851 	bl	801a15a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80180b8:	2300      	movs	r3, #0
}
 80180ba:	4618      	mov	r0, r3
 80180bc:	3710      	adds	r7, #16
 80180be:	46bd      	mov	sp, r7
 80180c0:	bd80      	pop	{r7, pc}

080180c2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80180c2:	b580      	push	{r7, lr}
 80180c4:	b084      	sub	sp, #16
 80180c6:	af00      	add	r7, sp, #0
 80180c8:	60f8      	str	r0, [r7, #12]
 80180ca:	60b9      	str	r1, [r7, #8]
 80180cc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80180ce:	687b      	ldr	r3, [r7, #4]
 80180d0:	68ba      	ldr	r2, [r7, #8]
 80180d2:	2100      	movs	r1, #0
 80180d4:	68f8      	ldr	r0, [r7, #12]
 80180d6:	f002 f840 	bl	801a15a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80180da:	2300      	movs	r3, #0
}
 80180dc:	4618      	mov	r0, r3
 80180de:	3710      	adds	r7, #16
 80180e0:	46bd      	mov	sp, r7
 80180e2:	bd80      	pop	{r7, pc}

080180e4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80180e4:	b580      	push	{r7, lr}
 80180e6:	b082      	sub	sp, #8
 80180e8:	af00      	add	r7, sp, #0
 80180ea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80180ec:	687b      	ldr	r3, [r7, #4]
 80180ee:	2204      	movs	r2, #4
 80180f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80180f4:	2300      	movs	r3, #0
 80180f6:	2200      	movs	r2, #0
 80180f8:	2100      	movs	r1, #0
 80180fa:	6878      	ldr	r0, [r7, #4]
 80180fc:	f002 f80c 	bl	801a118 <USBD_LL_Transmit>

  return USBD_OK;
 8018100:	2300      	movs	r3, #0
}
 8018102:	4618      	mov	r0, r3
 8018104:	3708      	adds	r7, #8
 8018106:	46bd      	mov	sp, r7
 8018108:	bd80      	pop	{r7, pc}

0801810a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801810a:	b580      	push	{r7, lr}
 801810c:	b082      	sub	sp, #8
 801810e:	af00      	add	r7, sp, #0
 8018110:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8018112:	687b      	ldr	r3, [r7, #4]
 8018114:	2205      	movs	r2, #5
 8018116:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801811a:	2300      	movs	r3, #0
 801811c:	2200      	movs	r2, #0
 801811e:	2100      	movs	r1, #0
 8018120:	6878      	ldr	r0, [r7, #4]
 8018122:	f002 f81a 	bl	801a15a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8018126:	2300      	movs	r3, #0
}
 8018128:	4618      	mov	r0, r3
 801812a:	3708      	adds	r7, #8
 801812c:	46bd      	mov	sp, r7
 801812e:	bd80      	pop	{r7, pc}

08018130 <APP_THREAD_Init>:
/* USER CODE END PV */

/* Functions Definition ------------------------------------------------------*/

void APP_THREAD_Init( void )
{
 8018130:	b580      	push	{r7, lr}
 8018132:	b082      	sub	sp, #8
 8018134:	af00      	add	r7, sp, #0
  /* USER CODE END APP_THREAD_INIT_1 */

  SHCI_CmdStatus_t ThreadInitStatus;

  /* Check the compatibility with the Coprocessor Wireless Firmware loaded */
  APP_THREAD_CheckWirelessFirmwareInfo();
 8018136:	f000 fa1d 	bl	8018574 <APP_THREAD_CheckWirelessFirmwareInfo>
#if (CFG_USB_INTERFACE_ENABLE != 0)
  VCP_Init(&VcpTxBuffer[0], &VcpRxBuffer[0]);
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */

  /* Register cmdbuffer */
  APP_THREAD_RegisterCmdBuffer(&ThreadOtCmdBuffer);
 801813a:	480e      	ldr	r0, [pc, #56]	; (8018174 <APP_THREAD_Init+0x44>)
 801813c:	f000 ff1a 	bl	8018f74 <APP_THREAD_RegisterCmdBuffer>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_DISABLE);
 8018140:	2101      	movs	r1, #1
 8018142:	2002      	movs	r0, #2
 8018144:	f002 f8d0 	bl	801a2e8 <UTIL_LPM_SetOffMode>

  /* Init config buffer and call TL_THREAD_Init */
  APP_THREAD_TL_THREAD_INIT();
 8018148:	f001 f80c 	bl	8019164 <APP_THREAD_TL_THREAD_INIT>

  /* Configure UART for sending CLI command from M4 */
  APP_THREAD_Init_UART_CLI();
 801814c:	f000 fff8 	bl	8019140 <APP_THREAD_Init_UART_CLI>

  /* Send Thread start system cmd to M0 */
  ThreadInitStatus = SHCI_C2_THREAD_Init();
 8018150:	f7fd fd15 	bl	8015b7e <SHCI_C2_THREAD_Init>
 8018154:	4603      	mov	r3, r0
 8018156:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN APP_THREAD_INIT_TIMER */

  /* USER CODE END APP_THREAD_INIT_TIMER */

  /* Create the different FreeRTOS tasks requested to run this Thread application*/
  OsTaskMsgM0ToM4Id = osThreadNew(APP_THREAD_FreeRTOSProcessMsgM0ToM4Task, NULL,&ThreadMsgM0ToM4Process_attr);
 8018158:	4a07      	ldr	r2, [pc, #28]	; (8018178 <APP_THREAD_Init+0x48>)
 801815a:	2100      	movs	r1, #0
 801815c:	4807      	ldr	r0, [pc, #28]	; (801817c <APP_THREAD_Init+0x4c>)
 801815e:	f7f8 f8eb 	bl	8010338 <osThreadNew>
 8018162:	4602      	mov	r2, r0
 8018164:	4b06      	ldr	r3, [pc, #24]	; (8018180 <APP_THREAD_Init+0x50>)
 8018166:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN APP_THREAD_INIT_FREERTOS */

  /* USER CODE END APP_THREAD_INIT_FREERTOS */

  /* Configure the Thread device at start */
  APP_THREAD_DeviceConfig();
 8018168:	f000 f892 	bl	8018290 <APP_THREAD_DeviceConfig>

  /* USER CODE BEGIN APP_THREAD_INIT_2 */

  /* USER CODE END APP_THREAD_INIT_2 */
}
 801816c:	bf00      	nop
 801816e:	3708      	adds	r7, #8
 8018170:	46bd      	mov	sp, r7
 8018172:	bd80      	pop	{r7, pc}
 8018174:	20030834 	.word	0x20030834
 8018178:	0801c42c 	.word	0x0801c42c
 801817c:	08018631 	.word	0x08018631
 8018180:	20027754 	.word	0x20027754

08018184 <APP_THREAD_Error>:
  * @param  ErrId :
  * @param  ErrCode
  * @retval None
  */
void APP_THREAD_Error(uint32_t ErrId, uint32_t ErrCode)
{
 8018184:	b580      	push	{r7, lr}
 8018186:	b082      	sub	sp, #8
 8018188:	af00      	add	r7, sp, #0
 801818a:	6078      	str	r0, [r7, #4]
 801818c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN APP_THREAD_Error_1 */

  /* USER CODE END APP_THREAD_Error_1 */
  switch(ErrId)
 801818e:	687b      	ldr	r3, [r7, #4]
 8018190:	2b1a      	cmp	r3, #26
 8018192:	d861      	bhi.n	8018258 <APP_THREAD_Error+0xd4>
 8018194:	a201      	add	r2, pc, #4	; (adr r2, 801819c <APP_THREAD_Error+0x18>)
 8018196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801819a:	bf00      	nop
 801819c:	08018209 	.word	0x08018209
 80181a0:	08018213 	.word	0x08018213
 80181a4:	0801821d 	.word	0x0801821d
 80181a8:	08018227 	.word	0x08018227
 80181ac:	08018231 	.word	0x08018231
 80181b0:	0801823b 	.word	0x0801823b
 80181b4:	08018245 	.word	0x08018245
 80181b8:	08018259 	.word	0x08018259
 80181bc:	08018259 	.word	0x08018259
 80181c0:	08018259 	.word	0x08018259
 80181c4:	08018259 	.word	0x08018259
 80181c8:	08018259 	.word	0x08018259
 80181cc:	08018259 	.word	0x08018259
 80181d0:	08018259 	.word	0x08018259
 80181d4:	08018259 	.word	0x08018259
 80181d8:	08018259 	.word	0x08018259
 80181dc:	08018259 	.word	0x08018259
 80181e0:	08018259 	.word	0x08018259
 80181e4:	08018259 	.word	0x08018259
 80181e8:	08018259 	.word	0x08018259
 80181ec:	08018259 	.word	0x08018259
 80181f0:	08018259 	.word	0x08018259
 80181f4:	08018259 	.word	0x08018259
 80181f8:	08018259 	.word	0x08018259
 80181fc:	08018259 	.word	0x08018259
 8018200:	08018259 	.word	0x08018259
 8018204:	0801824f 	.word	0x0801824f
  {
  case ERR_REC_MULTI_MSG_FROM_M0 :
    APP_THREAD_TraceError("ERROR : ERR_REC_MULTI_MSG_FROM_M0 ", ErrCode);
 8018208:	6839      	ldr	r1, [r7, #0]
 801820a:	4818      	ldr	r0, [pc, #96]	; (801826c <APP_THREAD_Error+0xe8>)
 801820c:	f000 f9a6 	bl	801855c <APP_THREAD_TraceError>
    break;
 8018210:	e027      	b.n	8018262 <APP_THREAD_Error+0xde>
  case ERR_THREAD_SET_STATE_CB :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_STATE_CB ",ErrCode);
 8018212:	6839      	ldr	r1, [r7, #0]
 8018214:	4816      	ldr	r0, [pc, #88]	; (8018270 <APP_THREAD_Error+0xec>)
 8018216:	f000 f9a1 	bl	801855c <APP_THREAD_TraceError>
    break;
 801821a:	e022      	b.n	8018262 <APP_THREAD_Error+0xde>
  case ERR_THREAD_SET_CHANNEL :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_CHANNEL ",ErrCode);
 801821c:	6839      	ldr	r1, [r7, #0]
 801821e:	4815      	ldr	r0, [pc, #84]	; (8018274 <APP_THREAD_Error+0xf0>)
 8018220:	f000 f99c 	bl	801855c <APP_THREAD_TraceError>
    break;
 8018224:	e01d      	b.n	8018262 <APP_THREAD_Error+0xde>
  case ERR_THREAD_SET_PANID :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_PANID ",ErrCode);
 8018226:	6839      	ldr	r1, [r7, #0]
 8018228:	4813      	ldr	r0, [pc, #76]	; (8018278 <APP_THREAD_Error+0xf4>)
 801822a:	f000 f997 	bl	801855c <APP_THREAD_TraceError>
    break;
 801822e:	e018      	b.n	8018262 <APP_THREAD_Error+0xde>
  case ERR_THREAD_IPV6_ENABLE :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_IPV6_ENABLE ",ErrCode);
 8018230:	6839      	ldr	r1, [r7, #0]
 8018232:	4812      	ldr	r0, [pc, #72]	; (801827c <APP_THREAD_Error+0xf8>)
 8018234:	f000 f992 	bl	801855c <APP_THREAD_TraceError>
    break;
 8018238:	e013      	b.n	8018262 <APP_THREAD_Error+0xde>
  case ERR_THREAD_START :
    APP_THREAD_TraceError("ERROR: ERR_THREAD_START ", ErrCode);
 801823a:	6839      	ldr	r1, [r7, #0]
 801823c:	4810      	ldr	r0, [pc, #64]	; (8018280 <APP_THREAD_Error+0xfc>)
 801823e:	f000 f98d 	bl	801855c <APP_THREAD_TraceError>
    break;
 8018242:	e00e      	b.n	8018262 <APP_THREAD_Error+0xde>
  case ERR_THREAD_ERASE_PERSISTENT_INFO :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_ERASE_PERSISTENT_INFO ",ErrCode);
 8018244:	6839      	ldr	r1, [r7, #0]
 8018246:	480f      	ldr	r0, [pc, #60]	; (8018284 <APP_THREAD_Error+0x100>)
 8018248:	f000 f988 	bl	801855c <APP_THREAD_TraceError>
    break;
 801824c:	e009      	b.n	8018262 <APP_THREAD_Error+0xde>
  case ERR_THREAD_CHECK_WIRELESS :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_CHECK_WIRELESS ",ErrCode);
 801824e:	6839      	ldr	r1, [r7, #0]
 8018250:	480d      	ldr	r0, [pc, #52]	; (8018288 <APP_THREAD_Error+0x104>)
 8018252:	f000 f983 	bl	801855c <APP_THREAD_TraceError>
    break;
 8018256:	e004      	b.n	8018262 <APP_THREAD_Error+0xde>
  /* USER CODE BEGIN APP_THREAD_Error_2 */

  /* USER CODE END APP_THREAD_Error_2 */
  default :
    APP_THREAD_TraceError("ERROR Unknown ", 0);
 8018258:	2100      	movs	r1, #0
 801825a:	480c      	ldr	r0, [pc, #48]	; (801828c <APP_THREAD_Error+0x108>)
 801825c:	f000 f97e 	bl	801855c <APP_THREAD_TraceError>
    break;
 8018260:	bf00      	nop
  }
}
 8018262:	bf00      	nop
 8018264:	3708      	adds	r7, #8
 8018266:	46bd      	mov	sp, r7
 8018268:	bd80      	pop	{r7, pc}
 801826a:	bf00      	nop
 801826c:	0801bdb4 	.word	0x0801bdb4
 8018270:	0801bdd8 	.word	0x0801bdd8
 8018274:	0801bdfc 	.word	0x0801bdfc
 8018278:	0801be1c 	.word	0x0801be1c
 801827c:	0801be3c 	.word	0x0801be3c
 8018280:	0801be5c 	.word	0x0801be5c
 8018284:	0801be78 	.word	0x0801be78
 8018288:	0801bea4 	.word	0x0801bea4
 801828c:	0801bec8 	.word	0x0801bec8

08018290 <APP_THREAD_DeviceConfig>:
 * @brief Thread initialization.
 * @param  None
 * @retval None
 */
static void APP_THREAD_DeviceConfig(void)
{
 8018290:	b590      	push	{r4, r7, lr}
 8018292:	b083      	sub	sp, #12
 8018294:	af00      	add	r7, sp, #0
  otError error;
  error = otInstanceErasePersistentInfo(NULL);
 8018296:	2000      	movs	r0, #0
 8018298:	f7fc ffce 	bl	8015238 <otInstanceErasePersistentInfo>
 801829c:	4603      	mov	r3, r0
 801829e:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 80182a0:	79fb      	ldrb	r3, [r7, #7]
 80182a2:	2b00      	cmp	r3, #0
 80182a4:	d004      	beq.n	80182b0 <APP_THREAD_DeviceConfig+0x20>
  {
    APP_THREAD_Error(ERR_THREAD_ERASE_PERSISTENT_INFO,error);
 80182a6:	79fb      	ldrb	r3, [r7, #7]
 80182a8:	4619      	mov	r1, r3
 80182aa:	2006      	movs	r0, #6
 80182ac:	f7ff ff6a 	bl	8018184 <APP_THREAD_Error>
  }
  otInstanceFinalize(NULL);
 80182b0:	2000      	movs	r0, #0
 80182b2:	f7fc ff64 	bl	801517e <otInstanceFinalize>
  otInstanceInitSingle();
 80182b6:	f7fc ff3b 	bl	8015130 <otInstanceInitSingle>
  error = otSetStateChangedCallback(NULL, APP_THREAD_StateNotif, NULL);
 80182ba:	2200      	movs	r2, #0
 80182bc:	4979      	ldr	r1, [pc, #484]	; (80184a4 <APP_THREAD_DeviceConfig+0x214>)
 80182be:	2000      	movs	r0, #0
 80182c0:	f7fc ff84 	bl	80151cc <otSetStateChangedCallback>
 80182c4:	4603      	mov	r3, r0
 80182c6:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 80182c8:	79fb      	ldrb	r3, [r7, #7]
 80182ca:	2b00      	cmp	r3, #0
 80182cc:	d004      	beq.n	80182d8 <APP_THREAD_DeviceConfig+0x48>
  {
    APP_THREAD_Error(ERR_THREAD_SET_STATE_CB,error);
 80182ce:	79fb      	ldrb	r3, [r7, #7]
 80182d0:	4619      	mov	r1, r3
 80182d2:	2001      	movs	r0, #1
 80182d4:	f7ff ff56 	bl	8018184 <APP_THREAD_Error>
  }
  error = otLinkSetChannel(NULL, C_CHANNEL_NB);
 80182d8:	2117      	movs	r1, #23
 80182da:	2000      	movs	r0, #0
 80182dc:	f7fd f8ea 	bl	80154b4 <otLinkSetChannel>
 80182e0:	4603      	mov	r3, r0
 80182e2:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 80182e4:	79fb      	ldrb	r3, [r7, #7]
 80182e6:	2b00      	cmp	r3, #0
 80182e8:	d004      	beq.n	80182f4 <APP_THREAD_DeviceConfig+0x64>
  {
    APP_THREAD_Error(ERR_THREAD_SET_CHANNEL,error);
 80182ea:	79fb      	ldrb	r3, [r7, #7]
 80182ec:	4619      	mov	r1, r3
 80182ee:	2002      	movs	r0, #2
 80182f0:	f7ff ff48 	bl	8018184 <APP_THREAD_Error>
  }
  error = otLinkSetPanId(NULL, C_PANID);
 80182f4:	f241 2134 	movw	r1, #4660	; 0x1234
 80182f8:	2000      	movs	r0, #0
 80182fa:	f7fd f90b 	bl	8015514 <otLinkSetPanId>
 80182fe:	4603      	mov	r3, r0
 8018300:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8018302:	79fb      	ldrb	r3, [r7, #7]
 8018304:	2b00      	cmp	r3, #0
 8018306:	d004      	beq.n	8018312 <APP_THREAD_DeviceConfig+0x82>
  {
    APP_THREAD_Error(ERR_THREAD_SET_PANID,error);
 8018308:	79fb      	ldrb	r3, [r7, #7]
 801830a:	4619      	mov	r1, r3
 801830c:	2003      	movs	r0, #3
 801830e:	f7ff ff39 	bl	8018184 <APP_THREAD_Error>
  }
  error = otIp6SetEnabled(NULL, true);
 8018312:	2101      	movs	r1, #1
 8018314:	2000      	movs	r0, #0
 8018316:	f7fc ffb8 	bl	801528a <otIp6SetEnabled>
 801831a:	4603      	mov	r3, r0
 801831c:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 801831e:	79fb      	ldrb	r3, [r7, #7]
 8018320:	2b00      	cmp	r3, #0
 8018322:	d004      	beq.n	801832e <APP_THREAD_DeviceConfig+0x9e>
  {
    APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE,error);
 8018324:	79fb      	ldrb	r3, [r7, #7]
 8018326:	4619      	mov	r1, r3
 8018328:	2004      	movs	r0, #4
 801832a:	f7ff ff2b 	bl	8018184 <APP_THREAD_Error>
  }
  error = otThreadSetEnabled(NULL, true);
 801832e:	2101      	movs	r1, #1
 8018330:	2000      	movs	r0, #0
 8018332:	f7fd fee7 	bl	8016104 <otThreadSetEnabled>
 8018336:	4603      	mov	r3, r0
 8018338:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 801833a:	79fb      	ldrb	r3, [r7, #7]
 801833c:	2b00      	cmp	r3, #0
 801833e:	d004      	beq.n	801834a <APP_THREAD_DeviceConfig+0xba>
  {
    APP_THREAD_Error(ERR_THREAD_START,error);
 8018340:	79fb      	ldrb	r3, [r7, #7]
 8018342:	4619      	mov	r1, r3
 8018344:	2005      	movs	r0, #5
 8018346:	f7ff ff1d 	bl	8018184 <APP_THREAD_Error>
  }

  /* USER CODE BEGIN DEVICECONFIG */
	error = otThreadSetEnabled(NULL, false);
 801834a:	2100      	movs	r1, #0
 801834c:	2000      	movs	r0, #0
 801834e:	f7fd fed9 	bl	8016104 <otThreadSetEnabled>
 8018352:	4603      	mov	r3, r0
 8018354:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 8018356:	79fb      	ldrb	r3, [r7, #7]
 8018358:	2b00      	cmp	r3, #0
 801835a:	d004      	beq.n	8018366 <APP_THREAD_DeviceConfig+0xd6>
		APP_THREAD_Error(ERR_THREAD_START, error);
 801835c:	79fb      	ldrb	r3, [r7, #7]
 801835e:	4619      	mov	r1, r3
 8018360:	2005      	movs	r0, #5
 8018362:	f7ff ff0f 	bl	8018184 <APP_THREAD_Error>
	}

	error = otIp6SetEnabled(NULL, false);
 8018366:	2100      	movs	r1, #0
 8018368:	2000      	movs	r0, #0
 801836a:	f7fc ff8e 	bl	801528a <otIp6SetEnabled>
 801836e:	4603      	mov	r3, r0
 8018370:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 8018372:	79fb      	ldrb	r3, [r7, #7]
 8018374:	2b00      	cmp	r3, #0
 8018376:	d004      	beq.n	8018382 <APP_THREAD_DeviceConfig+0xf2>
		APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE, error);
 8018378:	79fb      	ldrb	r3, [r7, #7]
 801837a:	4619      	mov	r1, r3
 801837c:	2004      	movs	r0, #4
 801837e:	f7ff ff01 	bl	8018184 <APP_THREAD_Error>
	}

	error = otPlatRadioSetTransmitPower(NULL, TRANSMIT_POWER);
 8018382:	2106      	movs	r1, #6
 8018384:	2000      	movs	r0, #0
 8018386:	f7fd fbc7 	bl	8015b18 <otPlatRadioSetTransmitPower>
 801838a:	4603      	mov	r3, r0
 801838c:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 801838e:	79fb      	ldrb	r3, [r7, #7]
 8018390:	2b00      	cmp	r3, #0
 8018392:	d004      	beq.n	801839e <APP_THREAD_DeviceConfig+0x10e>
		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
 8018394:	79fb      	ldrb	r3, [r7, #7]
 8018396:	4619      	mov	r1, r3
 8018398:	2002      	movs	r0, #2
 801839a:	f7ff fef3 	bl	8018184 <APP_THREAD_Error>
	}

	otThreadSetChildTimeout(NULL, CHILD_SUPERVISION_TIMEOUT);
 801839e:	2103      	movs	r1, #3
 80183a0:	2000      	movs	r0, #0
 80183a2:	f7fd fedf 	bl	8016164 <otThreadSetChildTimeout>
//	otChildSupervisionSetInterval(NULL, CHILD_SUPERVISION_INTERVAL);

//   error = otIp6AddressFromString("ff12::1", &multicastAddr);
//   error = otIp6SubscribeMulticastAddress(NULL, &multicastAddr);

	error = otThreadSetMasterKey(NULL, &masterKey);
 80183a6:	4940      	ldr	r1, [pc, #256]	; (80184a8 <APP_THREAD_DeviceConfig+0x218>)
 80183a8:	2000      	movs	r0, #0
 80183aa:	f7fd ff36 	bl	801621a <otThreadSetMasterKey>
 80183ae:	4603      	mov	r3, r0
 80183b0:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 80183b2:	79fb      	ldrb	r3, [r7, #7]
 80183b4:	2b00      	cmp	r3, #0
 80183b6:	d004      	beq.n	80183c2 <APP_THREAD_DeviceConfig+0x132>
		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
 80183b8:	79fb      	ldrb	r3, [r7, #7]
 80183ba:	4619      	mov	r1, r3
 80183bc:	2002      	movs	r0, #2
 80183be:	f7ff fee1 	bl	8018184 <APP_THREAD_Error>
	}

	error = otThreadSetNetworkName(NULL, networkName);
 80183c2:	493a      	ldr	r1, [pc, #232]	; (80184ac <APP_THREAD_DeviceConfig+0x21c>)
 80183c4:	2000      	movs	r0, #0
 80183c6:	f7fd ffa7 	bl	8016318 <otThreadSetNetworkName>
 80183ca:	4603      	mov	r3, r0
 80183cc:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 80183ce:	79fb      	ldrb	r3, [r7, #7]
 80183d0:	2b00      	cmp	r3, #0
 80183d2:	d004      	beq.n	80183de <APP_THREAD_DeviceConfig+0x14e>
		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
 80183d4:	79fb      	ldrb	r3, [r7, #7]
 80183d6:	4619      	mov	r1, r3
 80183d8:	2002      	movs	r0, #2
 80183da:	f7ff fed3 	bl	8018184 <APP_THREAD_Error>
	}
	error = otThreadSetExtendedPanId(NULL, &extendedPanId);
 80183de:	4934      	ldr	r1, [pc, #208]	; (80184b0 <APP_THREAD_DeviceConfig+0x220>)
 80183e0:	2000      	movs	r0, #0
 80183e2:	f7fd feeb 	bl	80161bc <otThreadSetExtendedPanId>
 80183e6:	4603      	mov	r3, r0
 80183e8:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 80183ea:	79fb      	ldrb	r3, [r7, #7]
 80183ec:	2b00      	cmp	r3, #0
 80183ee:	d004      	beq.n	80183fa <APP_THREAD_DeviceConfig+0x16a>
		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
 80183f0:	79fb      	ldrb	r3, [r7, #7]
 80183f2:	4619      	mov	r1, r3
 80183f4:	2002      	movs	r0, #2
 80183f6:	f7ff fec5 	bl	8018184 <APP_THREAD_Error>
	}

	error = otIp6SetEnabled(NULL, true);
 80183fa:	2101      	movs	r1, #1
 80183fc:	2000      	movs	r0, #0
 80183fe:	f7fc ff44 	bl	801528a <otIp6SetEnabled>
 8018402:	4603      	mov	r3, r0
 8018404:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 8018406:	79fb      	ldrb	r3, [r7, #7]
 8018408:	2b00      	cmp	r3, #0
 801840a:	d004      	beq.n	8018416 <APP_THREAD_DeviceConfig+0x186>
		APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE, error);
 801840c:	79fb      	ldrb	r3, [r7, #7]
 801840e:	4619      	mov	r1, r3
 8018410:	2004      	movs	r0, #4
 8018412:	f7ff feb7 	bl	8018184 <APP_THREAD_Error>
	}

	error = otThreadSetEnabled(NULL, true);
 8018416:	2101      	movs	r1, #1
 8018418:	2000      	movs	r0, #0
 801841a:	f7fd fe73 	bl	8016104 <otThreadSetEnabled>
 801841e:	4603      	mov	r3, r0
 8018420:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 8018422:	79fb      	ldrb	r3, [r7, #7]
 8018424:	2b00      	cmp	r3, #0
 8018426:	d004      	beq.n	8018432 <APP_THREAD_DeviceConfig+0x1a2>
		APP_THREAD_Error(ERR_THREAD_START, error);
 8018428:	79fb      	ldrb	r3, [r7, #7]
 801842a:	4619      	mov	r1, r3
 801842c:	2005      	movs	r0, #5
 801842e:	f7ff fea9 	bl	8018184 <APP_THREAD_Error>
	}

	error = otCoapStart(NULL, OT_DEFAULT_COAP_PORT);
 8018432:	f241 6133 	movw	r1, #5683	; 0x1633
 8018436:	2000      	movs	r0, #0
 8018438:	f7fc fde8 	bl	801500c <otCoapStart>
 801843c:	4603      	mov	r3, r0
 801843e:	71fb      	strb	r3, [r7, #7]
	//  error = otCoapAddResource(NULL, &OT_Light_Ressource);
	error = otCoapAddResource(NULL, &OT_Lights_Complex_Ressource);
 8018440:	491c      	ldr	r1, [pc, #112]	; (80184b4 <APP_THREAD_DeviceConfig+0x224>)
 8018442:	2000      	movs	r0, #0
 8018444:	f7fc fe12 	bl	801506c <otCoapAddResource>
 8018448:	4603      	mov	r3, r0
 801844a:	71fb      	strb	r3, [r7, #7]
	error = otCoapAddResource(NULL, &OT_Lights_Simple_Ressource);
 801844c:	491a      	ldr	r1, [pc, #104]	; (80184b8 <APP_THREAD_DeviceConfig+0x228>)
 801844e:	2000      	movs	r0, #0
 8018450:	f7fc fe0c 	bl	801506c <otCoapAddResource>
 8018454:	4603      	mov	r3, r0
 8018456:	71fb      	strb	r3, [r7, #7]
	error = otCoapAddResource(NULL, &OT_Border_Time_Ressource);
 8018458:	4918      	ldr	r1, [pc, #96]	; (80184bc <APP_THREAD_DeviceConfig+0x22c>)
 801845a:	2000      	movs	r0, #0
 801845c:	f7fc fe06 	bl	801506c <otCoapAddResource>
 8018460:	4603      	mov	r3, r0
 8018462:	71fb      	strb	r3, [r7, #7]
	error = otCoapAddResource(NULL, &OT_Node_Info_Ressource);
 8018464:	4916      	ldr	r1, [pc, #88]	; (80184c0 <APP_THREAD_DeviceConfig+0x230>)
 8018466:	2000      	movs	r0, #0
 8018468:	f7fc fe00 	bl	801506c <otCoapAddResource>
 801846c:	4603      	mov	r3, r0
 801846e:	71fb      	strb	r3, [r7, #7]
	  error = otCoapAddResource(NULL, &OT_RessourceFuotaProvisioning);
	  error = otCoapAddResource(NULL, &OT_RessourceFuotaParameters);
	  error = otCoapAddResource(NULL, &OT_RessourceFuotaSend);
#endif
#ifndef DONGLE_CODE
    error = otCoapAddResource(NULL, &OT_Toggle_Logging_Ressource);
 8018470:	4914      	ldr	r1, [pc, #80]	; (80184c4 <APP_THREAD_DeviceConfig+0x234>)
 8018472:	2000      	movs	r0, #0
 8018474:	f7fc fdfa 	bl	801506c <otCoapAddResource>
 8018478:	4603      	mov	r3, r0
 801847a:	71fb      	strb	r3, [r7, #7]
#endif
	// set default multicast address for border router
//    otIp6AddressFromString("ff03::1", &borderRouter.ipv6);
	otIp6AddressFromString("ff03::1", &multicastAddr);
 801847c:	4912      	ldr	r1, [pc, #72]	; (80184c8 <APP_THREAD_DeviceConfig+0x238>)
 801847e:	4813      	ldr	r0, [pc, #76]	; (80184cc <APP_THREAD_DeviceConfig+0x23c>)
 8018480:	f7fc ffe6 	bl	8015450 <otIp6AddressFromString>
	memcpy(&borderRouter.ipv6, &multicastAddr, sizeof(multicastAddr));
 8018484:	4a12      	ldr	r2, [pc, #72]	; (80184d0 <APP_THREAD_DeviceConfig+0x240>)
 8018486:	4b10      	ldr	r3, [pc, #64]	; (80184c8 <APP_THREAD_DeviceConfig+0x238>)
 8018488:	4614      	mov	r4, r2
 801848a:	6818      	ldr	r0, [r3, #0]
 801848c:	6859      	ldr	r1, [r3, #4]
 801848e:	689a      	ldr	r2, [r3, #8]
 8018490:	68db      	ldr	r3, [r3, #12]
 8018492:	c40f      	stmia	r4!, {r0, r1, r2, r3}

	// set UID in local state variable
//	msgSendMyIP.uid = (uint32_t)  DBGMCU->IDCODE;
//	 = UID64_BASE;
	stm32UID(msgSendMyIP.uid);
 8018494:	480f      	ldr	r0, [pc, #60]	; (80184d4 <APP_THREAD_DeviceConfig+0x244>)
 8018496:	f000 f8e5 	bl	8018664 <stm32UID>

  /* USER CODE END DEVICECONFIG */
}
 801849a:	bf00      	nop
 801849c:	370c      	adds	r7, #12
 801849e:	46bd      	mov	sp, r7
 80184a0:	bd90      	pop	{r4, r7, pc}
 80184a2:	bf00      	nop
 80184a4:	080184d9 	.word	0x080184d9
 80184a8:	0801c4a4 	.word	0x0801c4a4
 80184ac:	0801c4bc 	.word	0x0801c4bc
 80184b0:	0801c4b4 	.word	0x0801c4b4
 80184b4:	20000198 	.word	0x20000198
 80184b8:	200001a8 	.word	0x200001a8
 80184bc:	200001b8 	.word	0x200001b8
 80184c0:	200001c8 	.word	0x200001c8
 80184c4:	200001d8 	.word	0x200001d8
 80184c8:	200289fc 	.word	0x200289fc
 80184cc:	0801bed8 	.word	0x0801bed8
 80184d0:	20027820 	.word	0x20027820
 80184d4:	20000200 	.word	0x20000200

080184d8 <APP_THREAD_StateNotif>:
 *         aContext: Context
 *
 * @retval None
 */
static void APP_THREAD_StateNotif(uint32_t NotifFlags, void *pContext)
{
 80184d8:	b590      	push	{r4, r7, lr}
 80184da:	b083      	sub	sp, #12
 80184dc:	af00      	add	r7, sp, #0
 80184de:	6078      	str	r0, [r7, #4]
 80184e0:	6039      	str	r1, [r7, #0]

  /* USER CODE BEGIN APP_THREAD_STATENOTIF */

  /* USER CODE END APP_THREAD_STATENOTIF */

  if ((NotifFlags & (uint32_t)OT_CHANGED_THREAD_ROLE) == (uint32_t)OT_CHANGED_THREAD_ROLE)
 80184e2:	687b      	ldr	r3, [r7, #4]
 80184e4:	f003 0304 	and.w	r3, r3, #4
 80184e8:	2b00      	cmp	r3, #0
 80184ea:	d02f      	beq.n	801854c <APP_THREAD_StateNotif+0x74>
  {
    switch (otThreadGetDeviceRole(NULL))
 80184ec:	2000      	movs	r0, #0
 80184ee:	f7fd ff42 	bl	8016376 <otThreadGetDeviceRole>
 80184f2:	4603      	mov	r3, r0
 80184f4:	2b04      	cmp	r3, #4
 80184f6:	d826      	bhi.n	8018546 <APP_THREAD_StateNotif+0x6e>
 80184f8:	a201      	add	r2, pc, #4	; (adr r2, 8018500 <APP_THREAD_StateNotif+0x28>)
 80184fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80184fe:	bf00      	nop
 8018500:	08018515 	.word	0x08018515
 8018504:	08018525 	.word	0x08018525
 8018508:	08018535 	.word	0x08018535
 801850c:	0801853b 	.word	0x0801853b
 8018510:	08018541 	.word	0x08018541
    {
    case OT_DEVICE_ROLE_DISABLED:
      /* USER CODE BEGIN OT_DEVICE_ROLE_DISABLED */
			borderRouter.epoch = 0;
 8018514:	4a10      	ldr	r2, [pc, #64]	; (8018558 <APP_THREAD_StateNotif+0x80>)
 8018516:	f04f 0300 	mov.w	r3, #0
 801851a:	f04f 0400 	mov.w	r4, #0
 801851e:	e9c2 3404 	strd	r3, r4, [r2, #16]
      /* USER CODE END OT_DEVICE_ROLE_DISABLED */
      break;
 8018522:	e014      	b.n	801854e <APP_THREAD_StateNotif+0x76>
    case OT_DEVICE_ROLE_DETACHED:
      /* USER CODE BEGIN OT_DEVICE_ROLE_DETACHED */
			borderRouter.epoch = 0;
 8018524:	4a0c      	ldr	r2, [pc, #48]	; (8018558 <APP_THREAD_StateNotif+0x80>)
 8018526:	f04f 0300 	mov.w	r3, #0
 801852a:	f04f 0400 	mov.w	r4, #0
 801852e:	e9c2 3404 	strd	r3, r4, [r2, #16]
      /* USER CODE END OT_DEVICE_ROLE_DETACHED */
      break;
 8018532:	e00c      	b.n	801854e <APP_THREAD_StateNotif+0x76>
#ifdef DONGLE_CODE
			BSP_LED_On(LED_GREEN);
			BSP_LED_Off(LED_RED);
			BSP_LED_Off(LED_BLUE);
#endif
			APP_THREAD_UpdateBorderRouter();
 8018534:	f000 f8f2 	bl	801871c <APP_THREAD_UpdateBorderRouter>
      /* USER CODE END OT_DEVICE_ROLE_CHILD */
      break;
 8018538:	e009      	b.n	801854e <APP_THREAD_StateNotif+0x76>
#ifdef DONGLE_CODE
			BSP_LED_Off(LED_GREEN);
			BSP_LED_Off(LED_RED);
			BSP_LED_On(LED_BLUE);
#endif
			APP_THREAD_UpdateBorderRouter();
 801853a:	f000 f8ef 	bl	801871c <APP_THREAD_UpdateBorderRouter>
      /* USER CODE END OT_DEVICE_ROLE_ROUTER */
      break;
 801853e:	e006      	b.n	801854e <APP_THREAD_StateNotif+0x76>
#ifdef DONGLE_CODE
			BSP_LED_On(LED_GREEN);
			BSP_LED_Off(LED_RED);
			BSP_LED_On(LED_BLUE);
#endif
			APP_THREAD_UpdateBorderRouter();
 8018540:	f000 f8ec 	bl	801871c <APP_THREAD_UpdateBorderRouter>
      /* USER CODE END OT_DEVICE_ROLE_LEADER */
      break;
 8018544:	e003      	b.n	801854e <APP_THREAD_StateNotif+0x76>
    default:
      /* USER CODE BEGIN DEFAULT */
			APP_THREAD_UpdateBorderRouter();
 8018546:	f000 f8e9 	bl	801871c <APP_THREAD_UpdateBorderRouter>
      /* USER CODE END DEFAULT */
      break;
 801854a:	e000      	b.n	801854e <APP_THREAD_StateNotif+0x76>
    }
  }
 801854c:	bf00      	nop
}
 801854e:	bf00      	nop
 8018550:	370c      	adds	r7, #12
 8018552:	46bd      	mov	sp, r7
 8018554:	bd90      	pop	{r4, r7, pc}
 8018556:	bf00      	nop
 8018558:	20027820 	.word	0x20027820

0801855c <APP_THREAD_TraceError>:
  * @param  pMess  : Message associated to the error.
  * @param  ErrCode: Error code associated to the module (OpenThread or other module if any)
  * @retval None
  */
static void APP_THREAD_TraceError(const char * pMess, uint32_t ErrCode)
{
 801855c:	b480      	push	{r7}
 801855e:	b083      	sub	sp, #12
 8018560:	af00      	add	r7, sp, #0
 8018562:	6078      	str	r0, [r7, #4]
 8018564:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TRACE_ERROR */

  /* USER CODE END TRACE_ERROR */
}
 8018566:	bf00      	nop
 8018568:	370c      	adds	r7, #12
 801856a:	46bd      	mov	sp, r7
 801856c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018570:	4770      	bx	lr
	...

08018574 <APP_THREAD_CheckWirelessFirmwareInfo>:
 *        and display associated informations
 * @param  None
 * @retval None
 */
static void APP_THREAD_CheckWirelessFirmwareInfo(void)
{
 8018574:	b580      	push	{r7, lr}
 8018576:	b088      	sub	sp, #32
 8018578:	af02      	add	r7, sp, #8
  WirelessFwInfo_t wireless_info_instance;
  WirelessFwInfo_t* p_wireless_info = &wireless_info_instance;
 801857a:	1d3b      	adds	r3, r7, #4
 801857c:	617b      	str	r3, [r7, #20]

  if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success)
 801857e:	6978      	ldr	r0, [r7, #20]
 8018580:	f7fd fb2a 	bl	8015bd8 <SHCI_GetWirelessFwInfo>
 8018584:	4603      	mov	r3, r0
 8018586:	2b00      	cmp	r3, #0
 8018588:	d004      	beq.n	8018594 <APP_THREAD_CheckWirelessFirmwareInfo+0x20>
  {
    APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 801858a:	2101      	movs	r1, #1
 801858c:	201a      	movs	r0, #26
 801858e:	f7ff fdf9 	bl	8018184 <APP_THREAD_Error>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
      break;
    }
    APP_DBG("**********************************************************");
  }
}
 8018592:	e03d      	b.n	8018610 <APP_THREAD_CheckWirelessFirmwareInfo+0x9c>
    APP_DBG("**********************************************************");
 8018594:	4a20      	ldr	r2, [pc, #128]	; (8018618 <APP_THREAD_CheckWirelessFirmwareInfo+0xa4>)
 8018596:	2101      	movs	r1, #1
 8018598:	2000      	movs	r0, #0
 801859a:	f7ec fda1 	bl	80050e0 <logApplication>
    APP_DBG("WIRELESS COPROCESSOR FW:");
 801859e:	4a1f      	ldr	r2, [pc, #124]	; (801861c <APP_THREAD_CheckWirelessFirmwareInfo+0xa8>)
 80185a0:	2101      	movs	r1, #1
 80185a2:	2000      	movs	r0, #0
 80185a4:	f7ec fd9c 	bl	80050e0 <logApplication>
    APP_DBG("VERSION ID = %d.%d.%d", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor, p_wireless_info->VersionSub);
 80185a8:	697b      	ldr	r3, [r7, #20]
 80185aa:	781b      	ldrb	r3, [r3, #0]
 80185ac:	4619      	mov	r1, r3
 80185ae:	697b      	ldr	r3, [r7, #20]
 80185b0:	785b      	ldrb	r3, [r3, #1]
 80185b2:	461a      	mov	r2, r3
 80185b4:	697b      	ldr	r3, [r7, #20]
 80185b6:	789b      	ldrb	r3, [r3, #2]
 80185b8:	9301      	str	r3, [sp, #4]
 80185ba:	9200      	str	r2, [sp, #0]
 80185bc:	460b      	mov	r3, r1
 80185be:	4a18      	ldr	r2, [pc, #96]	; (8018620 <APP_THREAD_CheckWirelessFirmwareInfo+0xac>)
 80185c0:	2101      	movs	r1, #1
 80185c2:	2000      	movs	r0, #0
 80185c4:	f7ec fd8c 	bl	80050e0 <logApplication>
    switch(p_wireless_info->StackType)
 80185c8:	697b      	ldr	r3, [r7, #20]
 80185ca:	7a5b      	ldrb	r3, [r3, #9]
 80185cc:	2b11      	cmp	r3, #17
 80185ce:	d009      	beq.n	80185e4 <APP_THREAD_CheckWirelessFirmwareInfo+0x70>
 80185d0:	2b50      	cmp	r3, #80	; 0x50
 80185d2:	d00d      	beq.n	80185f0 <APP_THREAD_CheckWirelessFirmwareInfo+0x7c>
 80185d4:	2b10      	cmp	r3, #16
 80185d6:	d111      	bne.n	80185fc <APP_THREAD_CheckWirelessFirmwareInfo+0x88>
      APP_DBG("FW Type : Thread FTD");
 80185d8:	4a12      	ldr	r2, [pc, #72]	; (8018624 <APP_THREAD_CheckWirelessFirmwareInfo+0xb0>)
 80185da:	2101      	movs	r1, #1
 80185dc:	2000      	movs	r0, #0
 80185de:	f7ec fd7f 	bl	80050e0 <logApplication>
      break;
 80185e2:	e010      	b.n	8018606 <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_DBG("FW Type : Thread MTD");
 80185e4:	4a10      	ldr	r2, [pc, #64]	; (8018628 <APP_THREAD_CheckWirelessFirmwareInfo+0xb4>)
 80185e6:	2101      	movs	r1, #1
 80185e8:	2000      	movs	r0, #0
 80185ea:	f7ec fd79 	bl	80050e0 <logApplication>
      break;
 80185ee:	e00a      	b.n	8018606 <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_DBG("FW Type : Static Concurrent Mode BLE/Thread");
 80185f0:	4a0e      	ldr	r2, [pc, #56]	; (801862c <APP_THREAD_CheckWirelessFirmwareInfo+0xb8>)
 80185f2:	2101      	movs	r1, #1
 80185f4:	2000      	movs	r0, #0
 80185f6:	f7ec fd73 	bl	80050e0 <logApplication>
      break;
 80185fa:	e004      	b.n	8018606 <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 80185fc:	2101      	movs	r1, #1
 80185fe:	201a      	movs	r0, #26
 8018600:	f7ff fdc0 	bl	8018184 <APP_THREAD_Error>
      break;
 8018604:	bf00      	nop
    APP_DBG("**********************************************************");
 8018606:	4a04      	ldr	r2, [pc, #16]	; (8018618 <APP_THREAD_CheckWirelessFirmwareInfo+0xa4>)
 8018608:	2101      	movs	r1, #1
 801860a:	2000      	movs	r0, #0
 801860c:	f7ec fd68 	bl	80050e0 <logApplication>
}
 8018610:	bf00      	nop
 8018612:	3718      	adds	r7, #24
 8018614:	46bd      	mov	sp, r7
 8018616:	bd80      	pop	{r7, pc}
 8018618:	0801bee0 	.word	0x0801bee0
 801861c:	0801bf1c 	.word	0x0801bf1c
 8018620:	0801bf38 	.word	0x0801bf38
 8018624:	0801bf50 	.word	0x0801bf50
 8018628:	0801bf68 	.word	0x0801bf68
 801862c:	0801bf80 	.word	0x0801bf80

08018630 <APP_THREAD_FreeRTOSProcessMsgM0ToM4Task>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void APP_THREAD_FreeRTOSProcessMsgM0ToM4Task(void *argument)
{
 8018630:	b580      	push	{r7, lr}
 8018632:	b082      	sub	sp, #8
 8018634:	af00      	add	r7, sp, #0
 8018636:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN APP_THREAD_FREERTOS_PROCESS_MSG_M0_TO_M4_1 */

    /* USER END END APP_THREAD_FREERTOS_PROCESS_MSG_M0_TO_M4_1 */
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 8018638:	f04f 32ff 	mov.w	r2, #4294967295
 801863c:	2101      	movs	r1, #1
 801863e:	2001      	movs	r0, #1
 8018640:	f7f7 ffd2 	bl	80105e8 <osThreadFlagsWait>
    APP_THREAD_ProcessMsgM0ToM4();
 8018644:	f000 fdc0 	bl	80191c8 <APP_THREAD_ProcessMsgM0ToM4>
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 8018648:	e7f6      	b.n	8018638 <APP_THREAD_FreeRTOSProcessMsgM0ToM4Task+0x8>

0801864a <APP_THREAD_FreeRTOSSendCLIToM0Task>:
  }
}

#if (CFG_FULL_LOW_POWER == 0)
static void APP_THREAD_FreeRTOSSendCLIToM0Task(void *argument)
{
 801864a:	b580      	push	{r7, lr}
 801864c:	b082      	sub	sp, #8
 801864e:	af00      	add	r7, sp, #0
 8018650:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN APP_THREAD_FREERTOS_SEND_CLI_TO_M0_1 */

    /* USER END END APP_THREAD_FREERTOS_SEND_CLI_TO_M0_1 */
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 8018652:	f04f 32ff 	mov.w	r2, #4294967295
 8018656:	2101      	movs	r1, #1
 8018658:	2001      	movs	r0, #1
 801865a:	f7f7 ffc5 	bl	80105e8 <osThreadFlagsWait>
    Send_CLI_To_M0();
 801865e:	f000 fd35 	bl	80190cc <Send_CLI_To_M0>
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 8018662:	e7f6      	b.n	8018652 <APP_THREAD_FreeRTOSSendCLIToM0Task+0x8>

08018664 <stm32UID>:
  }
}
#endif /* (CFG_FULL_LOW_POWER == 0) */

/* USER CODE BEGIN FREERTOS_WRAPPER_FUNCTIONS */
void stm32UID(uint8_t* uid) {
 8018664:	b480      	push	{r7}
 8018666:	b085      	sub	sp, #20
 8018668:	af00      	add	r7, sp, #0
 801866a:	6078      	str	r0, [r7, #4]
  for(uint8_t i = 0; i < 12; i++) {
 801866c:	2300      	movs	r3, #0
 801866e:	73fb      	strb	r3, [r7, #15]
 8018670:	e00c      	b.n	801868c <stm32UID+0x28>
    uid[i] = *(volatile uint8_t *)(UID_BASE + i);
 8018672:	7bfa      	ldrb	r2, [r7, #15]
 8018674:	4b0a      	ldr	r3, [pc, #40]	; (80186a0 <stm32UID+0x3c>)
 8018676:	4413      	add	r3, r2
 8018678:	4619      	mov	r1, r3
 801867a:	7bfb      	ldrb	r3, [r7, #15]
 801867c:	687a      	ldr	r2, [r7, #4]
 801867e:	4413      	add	r3, r2
 8018680:	780a      	ldrb	r2, [r1, #0]
 8018682:	b2d2      	uxtb	r2, r2
 8018684:	701a      	strb	r2, [r3, #0]
  for(uint8_t i = 0; i < 12; i++) {
 8018686:	7bfb      	ldrb	r3, [r7, #15]
 8018688:	3301      	adds	r3, #1
 801868a:	73fb      	strb	r3, [r7, #15]
 801868c:	7bfb      	ldrb	r3, [r7, #15]
 801868e:	2b0b      	cmp	r3, #11
 8018690:	d9ef      	bls.n	8018672 <stm32UID+0xe>
    }
  }
 8018692:	bf00      	nop
 8018694:	3714      	adds	r7, #20
 8018696:	46bd      	mov	sp, r7
 8018698:	f85d 7b04 	ldr.w	r7, [sp], #4
 801869c:	4770      	bx	lr
 801869e:	bf00      	nop
 80186a0:	1fff7590 	.word	0x1fff7590

080186a4 <APP_THREAD_DummyRespHandler>:
  return;
}
#endif

static void APP_THREAD_DummyRespHandler(void *p_context, otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo, otError Result) {
 80186a4:	b480      	push	{r7}
 80186a6:	b085      	sub	sp, #20
 80186a8:	af00      	add	r7, sp, #0
 80186aa:	60f8      	str	r0, [r7, #12]
 80186ac:	60b9      	str	r1, [r7, #8]
 80186ae:	607a      	str	r2, [r7, #4]
 80186b0:	603b      	str	r3, [r7, #0]
	UNUSED(p_context);
	UNUSED(pHeader);
	UNUSED(pMessage);
	UNUSED(pMessageInfo);
	UNUSED(Result);
}
 80186b2:	bf00      	nop
 80186b4:	3714      	adds	r7, #20
 80186b6:	46bd      	mov	sp, r7
 80186b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186bc:	4770      	bx	lr
	...

080186c0 <APP_THREAD_CoapRespHandler_UpdateBorderRouter>:

volatile uint16_t test_num;
static void APP_THREAD_CoapRespHandler_UpdateBorderRouter(otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo, otError Result) {
 80186c0:	b5b0      	push	{r4, r5, r7, lr}
 80186c2:	b084      	sub	sp, #16
 80186c4:	af00      	add	r7, sp, #0
 80186c6:	60f8      	str	r0, [r7, #12]
 80186c8:	60b9      	str	r1, [r7, #8]
 80186ca:	607a      	str	r2, [r7, #4]
 80186cc:	70fb      	strb	r3, [r7, #3]

//	taskENTER_CRITICAL();
//	test_num = otMessageGetLength(pMessage);
//	test_num = otMessageRead(pMessage, otMessageGetOffset(pMessage), &receivedSystemCal, sizeof(receivedSystemCal));

	if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &receivedSystemCal, sizeof(receivedSystemCal))
 80186ce:	68b8      	ldr	r0, [r7, #8]
 80186d0:	f7fc ff7b 	bl	80155ca <otMessageGetOffset>
 80186d4:	4603      	mov	r3, r0
 80186d6:	4619      	mov	r1, r3
 80186d8:	2318      	movs	r3, #24
 80186da:	4a0e      	ldr	r2, [pc, #56]	; (8018714 <APP_THREAD_CoapRespHandler_UpdateBorderRouter+0x54>)
 80186dc:	68b8      	ldr	r0, [r7, #8]
 80186de:	f7fc ffd9 	bl	8015694 <otMessageRead>
 80186e2:	4603      	mov	r3, r0
 80186e4:	2b18      	cmp	r3, #24
 80186e6:	d110      	bne.n	801870a <APP_THREAD_CoapRespHandler_UpdateBorderRouter+0x4a>
			== sizeof(receivedSystemCal)) {

			// if successful, update border router state variable
			memcpy(&borderRouter, &receivedSystemCal, sizeof(receivedSystemCal));
 80186e8:	4a0b      	ldr	r2, [pc, #44]	; (8018718 <APP_THREAD_CoapRespHandler_UpdateBorderRouter+0x58>)
 80186ea:	4b0a      	ldr	r3, [pc, #40]	; (8018714 <APP_THREAD_CoapRespHandler_UpdateBorderRouter+0x54>)
 80186ec:	4614      	mov	r4, r2
 80186ee:	461d      	mov	r5, r3
 80186f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80186f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80186f4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80186f8:	e884 0003 	stmia.w	r4, {r0, r1}

			// update the onboard RTC unix time
			updateRTC(borderRouter.epoch);
 80186fc:	4b06      	ldr	r3, [pc, #24]	; (8018718 <APP_THREAD_CoapRespHandler_UpdateBorderRouter+0x58>)
 80186fe:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8018702:	4618      	mov	r0, r3
 8018704:	4621      	mov	r1, r4
 8018706:	f000 f995 	bl	8018a34 <updateRTC>
	}
//	taskEXIT_CRITICAL();
}
 801870a:	bf00      	nop
 801870c:	3710      	adds	r7, #16
 801870e:	46bd      	mov	sp, r7
 8018710:	bdb0      	pop	{r4, r5, r7, pc}
 8018712:	bf00      	nop
 8018714:	20027838 	.word	0x20027838
 8018718:	20027820 	.word	0x20027820

0801871c <APP_THREAD_UpdateBorderRouter>:
//volatile otNetifMulticastAddress *test_addr;
//volatile otExtAddress *test_ext_addr;
//volatile otExtAddress test_1;
//volatile otExtAddress test_2;

void APP_THREAD_UpdateBorderRouter() {
 801871c:	b580      	push	{r7, lr}
 801871e:	af00      	add	r7, sp, #0

	// if border router IP is still multicast (ff03::1), attempt to sync
	if (otIp6IsAddressEqual(&multicastAddr, &borderRouter.ipv6)) {
 8018720:	4906      	ldr	r1, [pc, #24]	; (801873c <APP_THREAD_UpdateBorderRouter+0x20>)
 8018722:	4807      	ldr	r0, [pc, #28]	; (8018740 <APP_THREAD_UpdateBorderRouter+0x24>)
 8018724:	f7fc fe5e 	bl	80153e4 <otIp6IsAddressEqual>
 8018728:	4603      	mov	r3, r0
 801872a:	2b00      	cmp	r3, #0
 801872c:	d003      	beq.n	8018736 <APP_THREAD_UpdateBorderRouter+0x1a>
		APP_THREAD_SyncWithBorderRouter();
 801872e:	f000 f809 	bl	8018744 <APP_THREAD_SyncWithBorderRouter>
		APP_THREAD_SendMyInfo();
 8018732:	f000 f81d 	bl	8018770 <APP_THREAD_SendMyInfo>
	}

	// send IP to border router
	//APP_THREAD_SendMyInfo();
}
 8018736:	bf00      	nop
 8018738:	bd80      	pop	{r7, pc}
 801873a:	bf00      	nop
 801873c:	20027820 	.word	0x20027820
 8018740:	200289fc 	.word	0x200289fc

08018744 <APP_THREAD_SyncWithBorderRouter>:

// send a GET request to border router via multicast
void APP_THREAD_SyncWithBorderRouter() {
 8018744:	b580      	push	{r7, lr}
 8018746:	b084      	sub	sp, #16
 8018748:	af04      	add	r7, sp, #16
	APP_THREAD_SendCoapMsgForBorderSync(NULL, 0, &multicastAddr, (char *) borderSyncResource, NO_ACK, OT_COAP_CODE_GET, 1U);
 801874a:	2301      	movs	r3, #1
 801874c:	9302      	str	r3, [sp, #8]
 801874e:	2301      	movs	r3, #1
 8018750:	9301      	str	r3, [sp, #4]
 8018752:	2300      	movs	r3, #0
 8018754:	9300      	str	r3, [sp, #0]
 8018756:	4b04      	ldr	r3, [pc, #16]	; (8018768 <APP_THREAD_SyncWithBorderRouter+0x24>)
 8018758:	4a04      	ldr	r2, [pc, #16]	; (801876c <APP_THREAD_SyncWithBorderRouter+0x28>)
 801875a:	2100      	movs	r1, #0
 801875c:	2000      	movs	r0, #0
 801875e:	f000 faf5 	bl	8018d4c <APP_THREAD_SendCoapMsgForBorderSync>
}
 8018762:	bf00      	nop
 8018764:	46bd      	mov	sp, r7
 8018766:	bd80      	pop	{r7, pc}
 8018768:	0801c474 	.word	0x0801c474
 801876c:	200289fc 	.word	0x200289fc

08018770 <APP_THREAD_SendMyInfo>:

void APP_THREAD_SendMyInfo() {
 8018770:	b580      	push	{r7, lr}
 8018772:	b084      	sub	sp, #16
 8018774:	af04      	add	r7, sp, #16
////	test_1 = test_ext_addr[0];
////	test_2 = &test_ext_addr;
//
//	error = otThreadGetNextNeighborInfo(NULL, &test_neighbor_iterator, &test_info_neighbor);
	// TODO: does this need an ACK
	APP_THREAD_SendCoapMsg(&msgSendMyIP, sizeof(msgSendMyIP), &borderRouter.ipv6, (char*) nodeInfoResource, NO_ACK,
 8018776:	2301      	movs	r3, #1
 8018778:	9302      	str	r3, [sp, #8]
 801877a:	2303      	movs	r3, #3
 801877c:	9301      	str	r3, [sp, #4]
 801877e:	2300      	movs	r3, #0
 8018780:	9300      	str	r3, [sp, #0]
 8018782:	4b04      	ldr	r3, [pc, #16]	; (8018794 <APP_THREAD_SendMyInfo+0x24>)
 8018784:	4a04      	ldr	r2, [pc, #16]	; (8018798 <APP_THREAD_SendMyInfo+0x28>)
 8018786:	2122      	movs	r1, #34	; 0x22
 8018788:	4804      	ldr	r0, [pc, #16]	; (801879c <APP_THREAD_SendMyInfo+0x2c>)
 801878a:	f000 f9bd 	bl	8018b08 <APP_THREAD_SendCoapMsg>
			OT_COAP_CODE_PUT, 1U);
//	APP_THREAD_SendCoapUnicastMsg(NULL, NULL, borderRouter.ipv6  , borderSyncResource, 1U);
}
 801878e:	bf00      	nop
 8018790:	46bd      	mov	sp, r7
 8018792:	bd80      	pop	{r7, pc}
 8018794:	0801c494 	.word	0x0801c494
 8018798:	20027820 	.word	0x20027820
 801879c:	200001e8 	.word	0x200001e8

080187a0 <APP_THREAD_SendBorderMessage>:

void APP_THREAD_SendBorderMessage(void *packet, uint8_t len, char *resource) {
 80187a0:	b580      	push	{r7, lr}
 80187a2:	b088      	sub	sp, #32
 80187a4:	af04      	add	r7, sp, #16
 80187a6:	60f8      	str	r0, [r7, #12]
 80187a8:	460b      	mov	r3, r1
 80187aa:	607a      	str	r2, [r7, #4]
 80187ac:	72fb      	strb	r3, [r7, #11]
//	APP_THREAD_SendCoapMsg(sensorPacket, borderRouter.ipv6, borderPacket, otCoapType type);
	APP_THREAD_SendCoapMsg(packet, len, &borderRouter.ipv6, resource, NO_ACK, OT_COAP_CODE_PUT, 1U);
 80187ae:	7afb      	ldrb	r3, [r7, #11]
 80187b0:	b299      	uxth	r1, r3
 80187b2:	2301      	movs	r3, #1
 80187b4:	9302      	str	r3, [sp, #8]
 80187b6:	2303      	movs	r3, #3
 80187b8:	9301      	str	r3, [sp, #4]
 80187ba:	2300      	movs	r3, #0
 80187bc:	9300      	str	r3, [sp, #0]
 80187be:	687b      	ldr	r3, [r7, #4]
 80187c0:	4a03      	ldr	r2, [pc, #12]	; (80187d0 <APP_THREAD_SendBorderMessage+0x30>)
 80187c2:	68f8      	ldr	r0, [r7, #12]
 80187c4:	f000 f9a0 	bl	8018b08 <APP_THREAD_SendCoapMsg>
}
 80187c8:	bf00      	nop
 80187ca:	3710      	adds	r7, #16
 80187cc:	46bd      	mov	sp, r7
 80187ce:	bd80      	pop	{r7, pc}
 80187d0:	20027820 	.word	0x20027820

080187d4 <APP_THREAD_SendBorderPacket>:

void APP_THREAD_SendBorderPacket(struct LogPacket *sensorPacket) {
 80187d4:	b580      	push	{r7, lr}
 80187d6:	b086      	sub	sp, #24
 80187d8:	af04      	add	r7, sp, #16
 80187da:	6078      	str	r0, [r7, #4]
//	APP_THREAD_SendCoapMsg(sensorPacket, borderRouter.ipv6, borderPacket, otCoapType type);
	APP_THREAD_SendCoapMsg(sensorPacket, sizeof(struct LogPacket), &borderRouter.ipv6, (char*) borderPacket, NO_ACK,
 80187dc:	2301      	movs	r3, #1
 80187de:	9302      	str	r3, [sp, #8]
 80187e0:	2303      	movs	r3, #3
 80187e2:	9301      	str	r3, [sp, #4]
 80187e4:	2300      	movs	r3, #0
 80187e6:	9300      	str	r3, [sp, #0]
 80187e8:	4b04      	ldr	r3, [pc, #16]	; (80187fc <APP_THREAD_SendBorderPacket+0x28>)
 80187ea:	4a05      	ldr	r2, [pc, #20]	; (8018800 <APP_THREAD_SendBorderPacket+0x2c>)
 80187ec:	21cc      	movs	r1, #204	; 0xcc
 80187ee:	6878      	ldr	r0, [r7, #4]
 80187f0:	f000 f98a 	bl	8018b08 <APP_THREAD_SendCoapMsg>
			OT_COAP_CODE_PUT, 1U);

}
 80187f4:	bf00      	nop
 80187f6:	3708      	adds	r7, #8
 80187f8:	46bd      	mov	sp, r7
 80187fa:	bd80      	pop	{r7, pc}
 80187fc:	0801c484 	.word	0x0801c484
 8018800:	20027820 	.word	0x20027820

08018804 <APP_THREAD_CoapLightsSimpleRequestHandler>:

static void APP_THREAD_CoapLightsSimpleRequestHandler(otCoapHeader *pHeader, otMessage *pMessage,
		otMessageInfo *pMessageInfo) {
 8018804:	b580      	push	{r7, lr}
 8018806:	b084      	sub	sp, #16
 8018808:	af00      	add	r7, sp, #0
 801880a:	60f8      	str	r0, [r7, #12]
 801880c:	60b9      	str	r1, [r7, #8]
 801880e:	607a      	str	r2, [r7, #4]
	do {

		// if get, send response with current log message
		if (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_GET) {
 8018810:	68f8      	ldr	r0, [r7, #12]
 8018812:	f7fc fadc 	bl	8014dce <otCoapHeaderGetCode>
 8018816:	4603      	mov	r3, r0
 8018818:	2b01      	cmp	r3, #1
 801881a:	d106      	bne.n	801882a <APP_THREAD_CoapLightsSimpleRequestHandler+0x26>
			APP_THREAD_SendDataResponse(&lightsSimpleMessage, sizeof(lightsSimpleMessage), pHeader, pMessageInfo);
 801881c:	687b      	ldr	r3, [r7, #4]
 801881e:	68fa      	ldr	r2, [r7, #12]
 8018820:	2104      	movs	r1, #4
 8018822:	4822      	ldr	r0, [pc, #136]	; (80188ac <APP_THREAD_CoapLightsSimpleRequestHandler+0xa8>)
 8018824:	f000 fb48 	bl	8018eb8 <APP_THREAD_SendDataResponse>
			break;
 8018828:	e03c      	b.n	80188a4 <APP_THREAD_CoapLightsSimpleRequestHandler+0xa0>
		}

		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &lightsSimpleMessage, sizeof(lightsSimpleMessage))
 801882a:	68b8      	ldr	r0, [r7, #8]
 801882c:	f7fc fecd 	bl	80155ca <otMessageGetOffset>
 8018830:	4603      	mov	r3, r0
 8018832:	4619      	mov	r1, r3
 8018834:	2304      	movs	r3, #4
 8018836:	4a1d      	ldr	r2, [pc, #116]	; (80188ac <APP_THREAD_CoapLightsSimpleRequestHandler+0xa8>)
 8018838:	68b8      	ldr	r0, [r7, #8]
 801883a:	f7fc ff2b 	bl	8015694 <otMessageRead>
 801883e:	4603      	mov	r3, r0
 8018840:	2b04      	cmp	r3, #4
 8018842:	d112      	bne.n	801886a <APP_THREAD_CoapLightsSimpleRequestHandler+0x66>
				== 4U) {
			if ((otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_PUT)
 8018844:	68f8      	ldr	r0, [r7, #12]
 8018846:	f7fc fac2 	bl	8014dce <otCoapHeaderGetCode>
 801884a:	4603      	mov	r3, r0
 801884c:	2b03      	cmp	r3, #3
 801884e:	d005      	beq.n	801885c <APP_THREAD_CoapLightsSimpleRequestHandler+0x58>
					|| (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_POST)) {
 8018850:	68f8      	ldr	r0, [r7, #12]
 8018852:	f7fc fabc 	bl	8014dce <otCoapHeaderGetCode>
 8018856:	4603      	mov	r3, r0
 8018858:	2b02      	cmp	r3, #2
 801885a:	d106      	bne.n	801886a <APP_THREAD_CoapLightsSimpleRequestHandler+0x66>
				osMessageQueuePut(lightsSimpleQueueHandle, &lightsSimpleMessage, 0U, 0U);
 801885c:	4b14      	ldr	r3, [pc, #80]	; (80188b0 <APP_THREAD_CoapLightsSimpleRequestHandler+0xac>)
 801885e:	6818      	ldr	r0, [r3, #0]
 8018860:	2300      	movs	r3, #0
 8018862:	2200      	movs	r2, #0
 8018864:	4911      	ldr	r1, [pc, #68]	; (80188ac <APP_THREAD_CoapLightsSimpleRequestHandler+0xa8>)
 8018866:	f7f8 fbcf 	bl	8011008 <osMessageQueuePut>
			}

		}

		tempMessageInfo = pMessageInfo;
 801886a:	4a12      	ldr	r2, [pc, #72]	; (80188b4 <APP_THREAD_CoapLightsSimpleRequestHandler+0xb0>)
 801886c:	687b      	ldr	r3, [r7, #4]
 801886e:	6013      	str	r3, [r2, #0]
		receivedMessage = (otMessageInfo*) pMessage;
 8018870:	4a11      	ldr	r2, [pc, #68]	; (80188b8 <APP_THREAD_CoapLightsSimpleRequestHandler+0xb4>)
 8018872:	68bb      	ldr	r3, [r7, #8]
 8018874:	6013      	str	r3, [r2, #0]

		if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE) {
 8018876:	68f8      	ldr	r0, [r7, #12]
 8018878:	f7fc fa7b 	bl	8014d72 <otCoapHeaderGetType>
 801887c:	4603      	mov	r3, r0
 801887e:	2b00      	cmp	r3, #0
 8018880:	d106      	bne.n	8018890 <APP_THREAD_CoapLightsSimpleRequestHandler+0x8c>
//			APP_THREAD_SendDataResponse(pHeader, pMessageInfo, NULL, 0);
			APP_THREAD_SendDataResponse(NULL, 0, pHeader, pMessageInfo);
 8018882:	687b      	ldr	r3, [r7, #4]
 8018884:	68fa      	ldr	r2, [r7, #12]
 8018886:	2100      	movs	r1, #0
 8018888:	2000      	movs	r0, #0
 801888a:	f000 fb15 	bl	8018eb8 <APP_THREAD_SendDataResponse>
			break;
 801888e:	e009      	b.n	80188a4 <APP_THREAD_CoapLightsSimpleRequestHandler+0xa0>

		}

		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &OT_ReceivedCommand, 1U) != 1U) {
 8018890:	68b8      	ldr	r0, [r7, #8]
 8018892:	f7fc fe9a 	bl	80155ca <otMessageGetOffset>
 8018896:	4603      	mov	r3, r0
 8018898:	4619      	mov	r1, r3
 801889a:	2301      	movs	r3, #1
 801889c:	4a07      	ldr	r2, [pc, #28]	; (80188bc <APP_THREAD_CoapLightsSimpleRequestHandler+0xb8>)
 801889e:	68b8      	ldr	r0, [r7, #8]
 80188a0:	f7fc fef8 	bl	8015694 <otMessageRead>

		if (OT_ReceivedCommand == 1U) {
			//BSP_LED_Toggle(LED1);
		}
	} while (false);
}
 80188a4:	bf00      	nop
 80188a6:	3710      	adds	r7, #16
 80188a8:	46bd      	mov	sp, r7
 80188aa:	bd80      	pop	{r7, pc}
 80188ac:	200280a0 	.word	0x200280a0
 80188b0:	20027c58 	.word	0x20027c58
 80188b4:	200289d4 	.word	0x200289d4
 80188b8:	20028a10 	.word	0x20028a10
 80188bc:	2002781d 	.word	0x2002781d

080188c0 <APP_THREAD_CoapToggleLoggingRequestHandler>:

#ifndef DONGLE_CODE
// request handler for when receiving a message directed at the data logging resource
static void APP_THREAD_CoapToggleLoggingRequestHandler(otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo) {
 80188c0:	b580      	push	{r7, lr}
 80188c2:	b084      	sub	sp, #16
 80188c4:	af00      	add	r7, sp, #0
 80188c6:	60f8      	str	r0, [r7, #12]
 80188c8:	60b9      	str	r1, [r7, #8]
 80188ca:	607a      	str	r2, [r7, #4]
	do {
		// if get, send response with current log message
		if (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_GET) {
 80188cc:	68f8      	ldr	r0, [r7, #12]
 80188ce:	f7fc fa7e 	bl	8014dce <otCoapHeaderGetCode>
 80188d2:	4603      	mov	r3, r0
 80188d4:	2b01      	cmp	r3, #1
 80188d6:	d106      	bne.n	80188e6 <APP_THREAD_CoapToggleLoggingRequestHandler+0x26>
			APP_THREAD_SendDataResponse(&logMessage, sizeof(logMessage), pHeader, pMessageInfo);
 80188d8:	687b      	ldr	r3, [r7, #4]
 80188da:	68fa      	ldr	r2, [r7, #12]
 80188dc:	2106      	movs	r1, #6
 80188de:	481a      	ldr	r0, [pc, #104]	; (8018948 <APP_THREAD_CoapToggleLoggingRequestHandler+0x88>)
 80188e0:	f000 faea 	bl	8018eb8 <APP_THREAD_SendDataResponse>
			break;
 80188e4:	e02c      	b.n	8018940 <APP_THREAD_CoapToggleLoggingRequestHandler+0x80>
		}

		// TODO : this will overwrite log message so maybe add a safer method
		if ( otMessageRead(pMessage, otMessageGetOffset(pMessage), &logMessage, sizeof(logMessage)) == sizeof(logMessage)){
 80188e6:	68b8      	ldr	r0, [r7, #8]
 80188e8:	f7fc fe6f 	bl	80155ca <otMessageGetOffset>
 80188ec:	4603      	mov	r3, r0
 80188ee:	4619      	mov	r1, r3
 80188f0:	2306      	movs	r3, #6
 80188f2:	4a15      	ldr	r2, [pc, #84]	; (8018948 <APP_THREAD_CoapToggleLoggingRequestHandler+0x88>)
 80188f4:	68b8      	ldr	r0, [r7, #8]
 80188f6:	f7fc fecd 	bl	8015694 <otMessageRead>
 80188fa:	4603      	mov	r3, r0
 80188fc:	2b06      	cmp	r3, #6
 80188fe:	d112      	bne.n	8018926 <APP_THREAD_CoapToggleLoggingRequestHandler+0x66>
//			otMessageRead(pMessage, otMessageGetOffset(pMessage), &logMessage, sizeof(logMessage));
			// if post or put, add to queue for masterthread processing
			if ((otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_PUT)
 8018900:	68f8      	ldr	r0, [r7, #12]
 8018902:	f7fc fa64 	bl	8014dce <otCoapHeaderGetCode>
 8018906:	4603      	mov	r3, r0
 8018908:	2b03      	cmp	r3, #3
 801890a:	d005      	beq.n	8018918 <APP_THREAD_CoapToggleLoggingRequestHandler+0x58>
					|| (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_POST)) {
 801890c:	68f8      	ldr	r0, [r7, #12]
 801890e:	f7fc fa5e 	bl	8014dce <otCoapHeaderGetCode>
 8018912:	4603      	mov	r3, r0
 8018914:	2b02      	cmp	r3, #2
 8018916:	d106      	bne.n	8018926 <APP_THREAD_CoapToggleLoggingRequestHandler+0x66>
				osMessageQueuePut(togLoggingQueueHandle, &logMessage, 0U, 0U);
 8018918:	4b0c      	ldr	r3, [pc, #48]	; (801894c <APP_THREAD_CoapToggleLoggingRequestHandler+0x8c>)
 801891a:	6818      	ldr	r0, [r3, #0]
 801891c:	2300      	movs	r3, #0
 801891e:	2200      	movs	r2, #0
 8018920:	4909      	ldr	r1, [pc, #36]	; (8018948 <APP_THREAD_CoapToggleLoggingRequestHandler+0x88>)
 8018922:	f7f8 fb71 	bl	8011008 <osMessageQueuePut>
			}
		}


		if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE) {
 8018926:	68f8      	ldr	r0, [r7, #12]
 8018928:	f7fc fa23 	bl	8014d72 <otCoapHeaderGetType>
 801892c:	4603      	mov	r3, r0
 801892e:	2b00      	cmp	r3, #0
 8018930:	d106      	bne.n	8018940 <APP_THREAD_CoapToggleLoggingRequestHandler+0x80>
			APP_THREAD_SendDataResponse(NULL, 0, pHeader, pMessageInfo);
 8018932:	687b      	ldr	r3, [r7, #4]
 8018934:	68fa      	ldr	r2, [r7, #12]
 8018936:	2100      	movs	r1, #0
 8018938:	2000      	movs	r0, #0
 801893a:	f000 fabd 	bl	8018eb8 <APP_THREAD_SendDataResponse>
			break;
 801893e:	bf00      	nop
		}

	} while (false);
}
 8018940:	bf00      	nop
 8018942:	3710      	adds	r7, #16
 8018944:	46bd      	mov	sp, r7
 8018946:	bd80      	pop	{r7, pc}
 8018948:	200289dc 	.word	0x200289dc
 801894c:	20028088 	.word	0x20028088

08018950 <APP_THREAD_CoapBorderTimeRequestHandler>:
#endif


// request handler for when receiving a message directed at the border router synchronizing resource
static void APP_THREAD_CoapBorderTimeRequestHandler(otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo) {
 8018950:	b5b0      	push	{r4, r5, r7, lr}
 8018952:	b084      	sub	sp, #16
 8018954:	af00      	add	r7, sp, #0
 8018956:	60f8      	str	r0, [r7, #12]
 8018958:	60b9      	str	r1, [r7, #8]
 801895a:	607a      	str	r2, [r7, #4]
	do {
#ifdef DONGLE_CODE
		BSP_LED_Toggle(LED_RED);
#endif
		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &receivedSystemCal, sizeof(receivedSystemCal))
 801895c:	68b8      	ldr	r0, [r7, #8]
 801895e:	f7fc fe34 	bl	80155ca <otMessageGetOffset>
 8018962:	4603      	mov	r3, r0
 8018964:	4619      	mov	r1, r3
 8018966:	2318      	movs	r3, #24
 8018968:	4a1f      	ldr	r2, [pc, #124]	; (80189e8 <APP_THREAD_CoapBorderTimeRequestHandler+0x98>)
 801896a:	68b8      	ldr	r0, [r7, #8]
 801896c:	f7fc fe92 	bl	8015694 <otMessageRead>
 8018970:	4603      	mov	r3, r0
 8018972:	2b18      	cmp	r3, #24
 8018974:	d11c      	bne.n	80189b0 <APP_THREAD_CoapBorderTimeRequestHandler+0x60>
				== sizeof(receivedSystemCal)) {
			// if the message was a put request, copy message over to border router info struct
			if ((otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_PUT)
 8018976:	68f8      	ldr	r0, [r7, #12]
 8018978:	f7fc fa29 	bl	8014dce <otCoapHeaderGetCode>
 801897c:	4603      	mov	r3, r0
 801897e:	2b03      	cmp	r3, #3
 8018980:	d005      	beq.n	801898e <APP_THREAD_CoapBorderTimeRequestHandler+0x3e>
					|| (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_POST)) {
 8018982:	68f8      	ldr	r0, [r7, #12]
 8018984:	f7fc fa23 	bl	8014dce <otCoapHeaderGetCode>
 8018988:	4603      	mov	r3, r0
 801898a:	2b02      	cmp	r3, #2
 801898c:	d110      	bne.n	80189b0 <APP_THREAD_CoapBorderTimeRequestHandler+0x60>

				memcpy(&borderRouter, &receivedSystemCal, sizeof(receivedSystemCal));
 801898e:	4a17      	ldr	r2, [pc, #92]	; (80189ec <APP_THREAD_CoapBorderTimeRequestHandler+0x9c>)
 8018990:	4b15      	ldr	r3, [pc, #84]	; (80189e8 <APP_THREAD_CoapBorderTimeRequestHandler+0x98>)
 8018992:	4614      	mov	r4, r2
 8018994:	461d      	mov	r5, r3
 8018996:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018998:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801899a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801899e:	e884 0003 	stmia.w	r4, {r0, r1}

				// update the onboard RTC unix time
				updateRTC(borderRouter.epoch);
 80189a2:	4b12      	ldr	r3, [pc, #72]	; (80189ec <APP_THREAD_CoapBorderTimeRequestHandler+0x9c>)
 80189a4:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80189a8:	4618      	mov	r0, r3
 80189aa:	4621      	mov	r1, r4
 80189ac:	f000 f842 	bl	8018a34 <updateRTC>
			}
		}

		receivedMessage = (otMessageInfo*) pMessage;
 80189b0:	4a0f      	ldr	r2, [pc, #60]	; (80189f0 <APP_THREAD_CoapBorderTimeRequestHandler+0xa0>)
 80189b2:	68bb      	ldr	r3, [r7, #8]
 80189b4:	6013      	str	r3, [r2, #0]

		if (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_GET) {
 80189b6:	68f8      	ldr	r0, [r7, #12]
 80189b8:	f7fc fa09 	bl	8014dce <otCoapHeaderGetCode>
 80189bc:	4603      	mov	r3, r0
 80189be:	2b01      	cmp	r3, #1
 80189c0:	d00c      	beq.n	80189dc <APP_THREAD_CoapBorderTimeRequestHandler+0x8c>
			//APP_THREAD_SendDataResponse(&borderRouter, sizeof(borderRouter), pHeader, pMessageInfo);

			break;
		}

		if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE) {
 80189c2:	68f8      	ldr	r0, [r7, #12]
 80189c4:	f7fc f9d5 	bl	8014d72 <otCoapHeaderGetType>
 80189c8:	4603      	mov	r3, r0
 80189ca:	2b00      	cmp	r3, #0
 80189cc:	d107      	bne.n	80189de <APP_THREAD_CoapBorderTimeRequestHandler+0x8e>
			APP_THREAD_SendDataResponse(NULL, 0 , pHeader, pMessageInfo);
 80189ce:	687b      	ldr	r3, [r7, #4]
 80189d0:	68fa      	ldr	r2, [r7, #12]
 80189d2:	2100      	movs	r1, #0
 80189d4:	2000      	movs	r0, #0
 80189d6:	f000 fa6f 	bl	8018eb8 <APP_THREAD_SendDataResponse>
			break;
 80189da:	e000      	b.n	80189de <APP_THREAD_CoapBorderTimeRequestHandler+0x8e>
			break;
 80189dc:	bf00      	nop
		}

	} while (false);
}
 80189de:	bf00      	nop
 80189e0:	3710      	adds	r7, #16
 80189e2:	46bd      	mov	sp, r7
 80189e4:	bdb0      	pop	{r4, r5, r7, pc}
 80189e6:	bf00      	nop
 80189e8:	20027838 	.word	0x20027838
 80189ec:	20027820 	.word	0x20027820
 80189f0:	20028a10 	.word	0x20028a10

080189f4 <APP_THREAD_CoapNodeInfoRequestHandler>:

// Only get requests allowed for this resource
struct sendIP_struct tempVar = {"test","test",0};
//char test_string[200] = "test";
static void APP_THREAD_CoapNodeInfoRequestHandler(otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo) {
 80189f4:	b580      	push	{r7, lr}
 80189f6:	b084      	sub	sp, #16
 80189f8:	af00      	add	r7, sp, #0
 80189fa:	60f8      	str	r0, [r7, #12]
 80189fc:	60b9      	str	r1, [r7, #8]
 80189fe:	607a      	str	r2, [r7, #4]
//		}

//		receivedMessage = (otMessageInfo*) pMessage;

		// send info if requested
		if (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_GET) {
 8018a00:	68f8      	ldr	r0, [r7, #12]
 8018a02:	f7fc f9e4 	bl	8014dce <otCoapHeaderGetCode>
 8018a06:	4603      	mov	r3, r0
 8018a08:	2b01      	cmp	r3, #1
 8018a0a:	d103      	bne.n	8018a14 <APP_THREAD_CoapNodeInfoRequestHandler+0x20>
//			APP_THREAD_SendDataResponse(&borderRouter, sizeof(borderRouter), pHeader, pMessageInfo);
//			APP_THREAD_SendDataResponse(&msgSendMyIP, sizeof(msgSendMyIP), pHeader, pMessageInfo);
			APP_THREAD_SendMyInfo();
 8018a0c:	f7ff feb0 	bl	8018770 <APP_THREAD_SendMyInfo>

			break;
 8018a10:	bf00      	nop
		if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE) {
			APP_THREAD_SendDataResponse(NULL, 0, pHeader, pMessageInfo);
		}

	} while (false);
}
 8018a12:	e00b      	b.n	8018a2c <APP_THREAD_CoapNodeInfoRequestHandler+0x38>
		if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE) {
 8018a14:	68f8      	ldr	r0, [r7, #12]
 8018a16:	f7fc f9ac 	bl	8014d72 <otCoapHeaderGetType>
 8018a1a:	4603      	mov	r3, r0
 8018a1c:	2b00      	cmp	r3, #0
 8018a1e:	d105      	bne.n	8018a2c <APP_THREAD_CoapNodeInfoRequestHandler+0x38>
			APP_THREAD_SendDataResponse(NULL, 0, pHeader, pMessageInfo);
 8018a20:	687b      	ldr	r3, [r7, #4]
 8018a22:	68fa      	ldr	r2, [r7, #12]
 8018a24:	2100      	movs	r1, #0
 8018a26:	2000      	movs	r0, #0
 8018a28:	f000 fa46 	bl	8018eb8 <APP_THREAD_SendDataResponse>
}
 8018a2c:	bf00      	nop
 8018a2e:	3710      	adds	r7, #16
 8018a30:	46bd      	mov	sp, r7
 8018a32:	bd80      	pop	{r7, pc}

08018a34 <updateRTC>:

void updateRTC(time_t now) {
 8018a34:	b580      	push	{r7, lr}
 8018a36:	b088      	sub	sp, #32
 8018a38:	af00      	add	r7, sp, #0
 8018a3a:	e9c7 0100 	strd	r0, r1, [r7]
	RTC_DateTypeDef sDate;

	// https://www.st.com/content/ccc/resource/technical/document/application_note/2a/c2/6f/74/fa/0d/46/3a/CD00015424.pdf/files/CD00015424.pdf/jcr:content/translations/en.CD00015424.pdf
//	struct tm *time_tm;

	RTC_FromEpoch(now, &sTime, &sDate);
 8018a3e:	683b      	ldr	r3, [r7, #0]
 8018a40:	f107 0208 	add.w	r2, r7, #8
 8018a44:	f107 010c 	add.w	r1, r7, #12
 8018a48:	4618      	mov	r0, r3
 8018a4a:	f7eb ff07 	bl	800485c <RTC_FromEpoch>

	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) {
 8018a4e:	f107 030c 	add.w	r3, r7, #12
 8018a52:	2200      	movs	r2, #0
 8018a54:	4619      	mov	r1, r3
 8018a56:	480a      	ldr	r0, [pc, #40]	; (8018a80 <updateRTC+0x4c>)
 8018a58:	f7f4 fb63 	bl	800d122 <HAL_RTC_SetTime>
	}

	/*
	 * update the RTC
	 */
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) {
 8018a5c:	f107 0308 	add.w	r3, r7, #8
 8018a60:	2200      	movs	r2, #0
 8018a62:	4619      	mov	r1, r3
 8018a64:	4806      	ldr	r0, [pc, #24]	; (8018a80 <updateRTC+0x4c>)
 8018a66:	f7f4 fc7c 	bl	800d362 <HAL_RTC_SetDate>
	}

	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0x32F2); // lock it in with the backup registers
 8018a6a:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8018a6e:	2100      	movs	r1, #0
 8018a70:	4803      	ldr	r0, [pc, #12]	; (8018a80 <updateRTC+0x4c>)
 8018a72:	f7f4 fdfd 	bl	800d670 <HAL_RTCEx_BKUPWrite>
}
 8018a76:	bf00      	nop
 8018a78:	3720      	adds	r7, #32
 8018a7a:	46bd      	mov	sp, r7
 8018a7c:	bd80      	pop	{r7, pc}
 8018a7e:	bf00      	nop
 8018a80:	200287e8 	.word	0x200287e8

08018a84 <APP_THREAD_CoapLightsComplexRequestHandler>:

static void APP_THREAD_CoapLightsComplexRequestHandler(otCoapHeader *pHeader, otMessage *pMessage,
		otMessageInfo *pMessageInfo) {
 8018a84:	b580      	push	{r7, lr}
 8018a86:	b084      	sub	sp, #16
 8018a88:	af00      	add	r7, sp, #0
 8018a8a:	60f8      	str	r0, [r7, #12]
 8018a8c:	60b9      	str	r1, [r7, #8]
 8018a8e:	607a      	str	r2, [r7, #4]
	do {
		//APP_THREAD_SendCoapUnicastRequest();

		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &lightMessageComplex, sizeof(lightMessageComplex))
 8018a90:	68b8      	ldr	r0, [r7, #8]
 8018a92:	f7fc fd9a 	bl	80155ca <otMessageGetOffset>
 8018a96:	4603      	mov	r3, r0
 8018a98:	4619      	mov	r1, r3
 8018a9a:	2312      	movs	r3, #18
 8018a9c:	4a16      	ldr	r2, [pc, #88]	; (8018af8 <APP_THREAD_CoapLightsComplexRequestHandler+0x74>)
 8018a9e:	68b8      	ldr	r0, [r7, #8]
 8018aa0:	f7fc fdf8 	bl	8015694 <otMessageRead>
 8018aa4:	4603      	mov	r3, r0
 8018aa6:	2b12      	cmp	r3, #18
 8018aa8:	d102      	bne.n	8018ab0 <APP_THREAD_CoapLightsComplexRequestHandler+0x2c>
				== sizeof(lightMessageComplex)) {
			FrontLightsSet(&lightMessageComplex);
 8018aaa:	4813      	ldr	r0, [pc, #76]	; (8018af8 <APP_THREAD_CoapLightsComplexRequestHandler+0x74>)
 8018aac:	f7ea fdd4 	bl	8003658 <FrontLightsSet>
		}

		tempMessageInfo = pMessageInfo;
 8018ab0:	4a12      	ldr	r2, [pc, #72]	; (8018afc <APP_THREAD_CoapLightsComplexRequestHandler+0x78>)
 8018ab2:	687b      	ldr	r3, [r7, #4]
 8018ab4:	6013      	str	r3, [r2, #0]
		receivedMessage = (otMessageInfo*) pMessage;
 8018ab6:	4a12      	ldr	r2, [pc, #72]	; (8018b00 <APP_THREAD_CoapLightsComplexRequestHandler+0x7c>)
 8018ab8:	68bb      	ldr	r3, [r7, #8]
 8018aba:	6013      	str	r3, [r2, #0]

		if (otCoapHeaderGetType(pHeader) != OT_COAP_TYPE_NON_CONFIRMABLE) {
 8018abc:	68f8      	ldr	r0, [r7, #12]
 8018abe:	f7fc f958 	bl	8014d72 <otCoapHeaderGetType>
 8018ac2:	4603      	mov	r3, r0
 8018ac4:	2b10      	cmp	r3, #16
 8018ac6:	d110      	bne.n	8018aea <APP_THREAD_CoapLightsComplexRequestHandler+0x66>
			break;
		}

		if (otCoapHeaderGetCode(pHeader) != OT_COAP_CODE_PUT) {
 8018ac8:	68f8      	ldr	r0, [r7, #12]
 8018aca:	f7fc f980 	bl	8014dce <otCoapHeaderGetCode>
 8018ace:	4603      	mov	r3, r0
 8018ad0:	2b03      	cmp	r3, #3
 8018ad2:	d10c      	bne.n	8018aee <APP_THREAD_CoapLightsComplexRequestHandler+0x6a>
			break;
		}

		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &OT_ReceivedCommand, 1U) != 1U) {
 8018ad4:	68b8      	ldr	r0, [r7, #8]
 8018ad6:	f7fc fd78 	bl	80155ca <otMessageGetOffset>
 8018ada:	4603      	mov	r3, r0
 8018adc:	4619      	mov	r1, r3
 8018ade:	2301      	movs	r3, #1
 8018ae0:	4a08      	ldr	r2, [pc, #32]	; (8018b04 <APP_THREAD_CoapLightsComplexRequestHandler+0x80>)
 8018ae2:	68b8      	ldr	r0, [r7, #8]
 8018ae4:	f7fc fdd6 	bl	8015694 <otMessageRead>
		if (OT_ReceivedCommand == 1U) {
			//BSP_LED_Toggle(LED1);
		}

	} while (false);
}
 8018ae8:	e002      	b.n	8018af0 <APP_THREAD_CoapLightsComplexRequestHandler+0x6c>
			break;
 8018aea:	bf00      	nop
 8018aec:	e000      	b.n	8018af0 <APP_THREAD_CoapLightsComplexRequestHandler+0x6c>
			break;
 8018aee:	bf00      	nop
}
 8018af0:	bf00      	nop
 8018af2:	3710      	adds	r7, #16
 8018af4:	46bd      	mov	sp, r7
 8018af6:	bd80      	pop	{r7, pc}
 8018af8:	200289e8 	.word	0x200289e8
 8018afc:	200289d4 	.word	0x200289d4
 8018b00:	20028a10 	.word	0x20028a10
 8018b04:	2002781d 	.word	0x2002781d

08018b08 <APP_THREAD_SendCoapMsg>:
}


//static char empty_message[10] = "";
void APP_THREAD_SendCoapMsg(void *message, uint16_t msgSize, otIp6Address *ipv6_addr, char *resource,
		uint8_t request_ack, otCoapCode coapCode, uint8_t msgID) {
 8018b08:	b590      	push	{r4, r7, lr}
 8018b0a:	b087      	sub	sp, #28
 8018b0c:	af02      	add	r7, sp, #8
 8018b0e:	60f8      	str	r0, [r7, #12]
 8018b10:	607a      	str	r2, [r7, #4]
 8018b12:	603b      	str	r3, [r7, #0]
 8018b14:	460b      	mov	r3, r1
 8018b16:	817b      	strh	r3, [r7, #10]
	/************ SET MESSAGE INFO (WHERE THE PACKET GOES) ************/
	// https://openthread.io/reference/struct/ot-message-info.html#structot_message_info
	do {
		// REMOVE BELOW CALLS (ONLY FOR DEBUGGING)
			  myRloc16 = otThreadGetRloc16(NULL);
 8018b18:	2000      	movs	r0, #0
 8018b1a:	f7fd fc55 	bl	80163c8 <otThreadGetRloc16>
 8018b1e:	4603      	mov	r3, r0
 8018b20:	461a      	mov	r2, r3
 8018b22:	4b7e      	ldr	r3, [pc, #504]	; (8018d1c <APP_THREAD_SendCoapMsg+0x214>)
 8018b24:	801a      	strh	r2, [r3, #0]
			  unicastAddresses = (otNetifAddress *OTCALL) otIp6GetUnicastAddresses(NULL);
 8018b26:	2000      	movs	r0, #0
 8018b28:	f7fc fc0c 	bl	8015344 <otIp6GetUnicastAddresses>
 8018b2c:	4602      	mov	r2, r0
 8018b2e:	4b7c      	ldr	r3, [pc, #496]	; (8018d20 <APP_THREAD_SendCoapMsg+0x218>)
 8018b30:	601a      	str	r2, [r3, #0]
			  isEnabledIpv6 = otIp6IsEnabled(NULL);
 8018b32:	2000      	movs	r0, #0
 8018b34:	f7fc fbd9 	bl	80152ea <otIp6IsEnabled>
 8018b38:	4603      	mov	r3, r0
 8018b3a:	461a      	mov	r2, r3
 8018b3c:	4b79      	ldr	r3, [pc, #484]	; (8018d24 <APP_THREAD_SendCoapMsg+0x21c>)
 8018b3e:	701a      	strb	r2, [r3, #0]
			  multicastAddresses = (otNetifMulticastAddress *) otIp6GetMulticastAddresses(NULL);
 8018b40:	2000      	movs	r0, #0
 8018b42:	f7fc fc27 	bl	8015394 <otIp6GetMulticastAddresses>
 8018b46:	4602      	mov	r2, r0
 8018b48:	4b77      	ldr	r3, [pc, #476]	; (8018d28 <APP_THREAD_SendCoapMsg+0x220>)
 8018b4a:	601a      	str	r2, [r3, #0]
			  meshLocalEID =  (otIp6Address *OTCALL) otThreadGetMeshLocalEid(NULL);
 8018b4c:	2000      	movs	r0, #0
 8018b4e:	f7fd fb93 	bl	8016278 <otThreadGetMeshLocalEid>
 8018b52:	4602      	mov	r2, r0
 8018b54:	4b75      	ldr	r3, [pc, #468]	; (8018d2c <APP_THREAD_SendCoapMsg+0x224>)
 8018b56:	601a      	str	r2, [r3, #0]
			  linkLocalIPV6 = (otIp6Address *) otThreadGetLinkLocalIp6Address(NULL);
 8018b58:	2000      	movs	r0, #0
 8018b5a:	f7fd fbb5 	bl	80162c8 <otThreadGetLinkLocalIp6Address>
 8018b5e:	4602      	mov	r2, r0
 8018b60:	4b73      	ldr	r3, [pc, #460]	; (8018d30 <APP_THREAD_SendCoapMsg+0x228>)
 8018b62:	601a      	str	r2, [r3, #0]

		// clear info
		memset(&OT_MessageInfo, 0, sizeof(OT_MessageInfo));
 8018b64:	222c      	movs	r2, #44	; 0x2c
 8018b66:	2100      	movs	r1, #0
 8018b68:	4872      	ldr	r0, [pc, #456]	; (8018d34 <APP_THREAD_SendCoapMsg+0x22c>)
 8018b6a:	f001 fee6 	bl	801a93a <memset>

		// add destination IPv6 address to header
		// TODO : swap the below statements once ST has their shit fixed

		if(msgSize > 100){ // TODO : semd to borderRouter if the message is a log message (this is a temporary fix)
 8018b6e:	897b      	ldrh	r3, [r7, #10]
 8018b70:	2b64      	cmp	r3, #100	; 0x64
 8018b72:	d914      	bls.n	8018b9e <APP_THREAD_SendCoapMsg+0x96>
#ifndef BORDER_ROUTER_NODE_TRANSMITTER
			memcpy(&OT_MessageInfo.mPeerAddr, &borderRouter.ipv6, sizeof(otIp6Address));
 8018b74:	4b6f      	ldr	r3, [pc, #444]	; (8018d34 <APP_THREAD_SendCoapMsg+0x22c>)
 8018b76:	4a70      	ldr	r2, [pc, #448]	; (8018d38 <APP_THREAD_SendCoapMsg+0x230>)
 8018b78:	f103 0410 	add.w	r4, r3, #16
 8018b7c:	4613      	mov	r3, r2
 8018b7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018b80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			memcpy(&OT_MessageInfo.mSockAddr, otThreadGetMeshLocalEid(NULL), sizeof(OT_MessageInfo.mSockAddr));
 8018b84:	2000      	movs	r0, #0
 8018b86:	f7fd fb77 	bl	8016278 <otThreadGetMeshLocalEid>
 8018b8a:	4602      	mov	r2, r0
 8018b8c:	4b69      	ldr	r3, [pc, #420]	; (8018d34 <APP_THREAD_SendCoapMsg+0x22c>)
 8018b8e:	461c      	mov	r4, r3
 8018b90:	4613      	mov	r3, r2
 8018b92:	6818      	ldr	r0, [r3, #0]
 8018b94:	6859      	ldr	r1, [r3, #4]
 8018b96:	689a      	ldr	r2, [r3, #8]
 8018b98:	68db      	ldr	r3, [r3, #12]
 8018b9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018b9c:	e015      	b.n	8018bca <APP_THREAD_SendCoapMsg+0xc2>
//			otIp6AddressFromString("fd11:22::c34c:7994:cccc:4b82", &OT_MessageInfo.mSockAddr);
#else
			memcpy(&OT_MessageInfo.mPeerAddr, &multicastAddr, sizeof(otIp6Address));
#endif
		}else{
			memcpy(&OT_MessageInfo.mPeerAddr, &multicastAddr, sizeof(otIp6Address));
 8018b9e:	4b65      	ldr	r3, [pc, #404]	; (8018d34 <APP_THREAD_SendCoapMsg+0x22c>)
 8018ba0:	4a66      	ldr	r2, [pc, #408]	; (8018d3c <APP_THREAD_SendCoapMsg+0x234>)
 8018ba2:	f103 0410 	add.w	r4, r3, #16
 8018ba6:	4613      	mov	r3, r2
 8018ba8:	6818      	ldr	r0, [r3, #0]
 8018baa:	6859      	ldr	r1, [r3, #4]
 8018bac:	689a      	ldr	r2, [r3, #8]
 8018bae:	68db      	ldr	r3, [r3, #12]
 8018bb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
			memcpy(&OT_MessageInfo.mSockAddr, otThreadGetMeshLocalEid(NULL), sizeof(OT_MessageInfo.mSockAddr));
 8018bb2:	2000      	movs	r0, #0
 8018bb4:	f7fd fb60 	bl	8016278 <otThreadGetMeshLocalEid>
 8018bb8:	4602      	mov	r2, r0
 8018bba:	4b5e      	ldr	r3, [pc, #376]	; (8018d34 <APP_THREAD_SendCoapMsg+0x22c>)
 8018bbc:	461c      	mov	r4, r3
 8018bbe:	4613      	mov	r3, r2
 8018bc0:	6818      	ldr	r0, [r3, #0]
 8018bc2:	6859      	ldr	r1, [r3, #4]
 8018bc4:	689a      	ldr	r2, [r3, #8]
 8018bc6:	68db      	ldr	r3, [r3, #12]
 8018bc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
//			  otIp6AddressFromString("fd11:22::c34c:7994:19f2:4b82", &OT_MessageInfo.mSockAddr);

//			  otIp6AddressFromString("fd11:22::c34c:7994:cccc:4b82", &OT_MessageInfo.mSockAddr);

		// populate message information
		OT_MessageInfo.mInterfaceId = OT_NETIF_INTERFACE_ID_THREAD;
 8018bca:	4b5a      	ldr	r3, [pc, #360]	; (8018d34 <APP_THREAD_SendCoapMsg+0x22c>)
 8018bcc:	2201      	movs	r2, #1
 8018bce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		OT_MessageInfo.mPeerPort = OT_DEFAULT_COAP_PORT;
 8018bd2:	4b58      	ldr	r3, [pc, #352]	; (8018d34 <APP_THREAD_SendCoapMsg+0x22c>)
 8018bd4:	f241 6233 	movw	r2, #5683	; 0x1633
 8018bd8:	845a      	strh	r2, [r3, #34]	; 0x22
		OT_MessageInfo.mHopLimit = 64;
 8018bda:	4b56      	ldr	r3, [pc, #344]	; (8018d34 <APP_THREAD_SendCoapMsg+0x22c>)
 8018bdc:	2240      	movs	r2, #64	; 0x40
 8018bde:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

		/************** CREATE NEW MESSAGE ********************ifco*/

		// create header
		if (request_ack && (coapCode == OT_COAP_CODE_PUT))
 8018be2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018be6:	2b00      	cmp	r3, #0
 8018be8:	d009      	beq.n	8018bfe <APP_THREAD_SendCoapMsg+0xf6>
 8018bea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018bee:	2b03      	cmp	r3, #3
 8018bf0:	d105      	bne.n	8018bfe <APP_THREAD_SendCoapMsg+0xf6>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_PUT);
 8018bf2:	2203      	movs	r2, #3
 8018bf4:	2100      	movs	r1, #0
 8018bf6:	4852      	ldr	r0, [pc, #328]	; (8018d40 <APP_THREAD_SendCoapMsg+0x238>)
 8018bf8:	f7fb ff5f 	bl	8014aba <otCoapHeaderInit>
 8018bfc:	e04a      	b.n	8018c94 <APP_THREAD_SendCoapMsg+0x18c>
		else if (request_ack && (coapCode == OT_COAP_CODE_GET))
 8018bfe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018c02:	2b00      	cmp	r3, #0
 8018c04:	d009      	beq.n	8018c1a <APP_THREAD_SendCoapMsg+0x112>
 8018c06:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018c0a:	2b01      	cmp	r3, #1
 8018c0c:	d105      	bne.n	8018c1a <APP_THREAD_SendCoapMsg+0x112>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_GET);
 8018c0e:	2201      	movs	r2, #1
 8018c10:	2100      	movs	r1, #0
 8018c12:	484b      	ldr	r0, [pc, #300]	; (8018d40 <APP_THREAD_SendCoapMsg+0x238>)
 8018c14:	f7fb ff51 	bl	8014aba <otCoapHeaderInit>
 8018c18:	e03c      	b.n	8018c94 <APP_THREAD_SendCoapMsg+0x18c>
		else if (request_ack && (coapCode == OT_COAP_CODE_POST))
 8018c1a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018c1e:	2b00      	cmp	r3, #0
 8018c20:	d009      	beq.n	8018c36 <APP_THREAD_SendCoapMsg+0x12e>
 8018c22:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018c26:	2b02      	cmp	r3, #2
 8018c28:	d105      	bne.n	8018c36 <APP_THREAD_SendCoapMsg+0x12e>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_POST);
 8018c2a:	2202      	movs	r2, #2
 8018c2c:	2100      	movs	r1, #0
 8018c2e:	4844      	ldr	r0, [pc, #272]	; (8018d40 <APP_THREAD_SendCoapMsg+0x238>)
 8018c30:	f7fb ff43 	bl	8014aba <otCoapHeaderInit>
 8018c34:	e02e      	b.n	8018c94 <APP_THREAD_SendCoapMsg+0x18c>
		else if (!request_ack && (coapCode == OT_COAP_CODE_PUT))
 8018c36:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018c3a:	2b00      	cmp	r3, #0
 8018c3c:	d109      	bne.n	8018c52 <APP_THREAD_SendCoapMsg+0x14a>
 8018c3e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018c42:	2b03      	cmp	r3, #3
 8018c44:	d105      	bne.n	8018c52 <APP_THREAD_SendCoapMsg+0x14a>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_PUT);
 8018c46:	2203      	movs	r2, #3
 8018c48:	2110      	movs	r1, #16
 8018c4a:	483d      	ldr	r0, [pc, #244]	; (8018d40 <APP_THREAD_SendCoapMsg+0x238>)
 8018c4c:	f7fb ff35 	bl	8014aba <otCoapHeaderInit>
 8018c50:	e020      	b.n	8018c94 <APP_THREAD_SendCoapMsg+0x18c>
		else if (!request_ack && (coapCode == OT_COAP_CODE_GET))
 8018c52:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018c56:	2b00      	cmp	r3, #0
 8018c58:	d109      	bne.n	8018c6e <APP_THREAD_SendCoapMsg+0x166>
 8018c5a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018c5e:	2b01      	cmp	r3, #1
 8018c60:	d105      	bne.n	8018c6e <APP_THREAD_SendCoapMsg+0x166>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_GET);
 8018c62:	2201      	movs	r2, #1
 8018c64:	2110      	movs	r1, #16
 8018c66:	4836      	ldr	r0, [pc, #216]	; (8018d40 <APP_THREAD_SendCoapMsg+0x238>)
 8018c68:	f7fb ff27 	bl	8014aba <otCoapHeaderInit>
 8018c6c:	e012      	b.n	8018c94 <APP_THREAD_SendCoapMsg+0x18c>
		else if (!request_ack && (coapCode == OT_COAP_CODE_POST))
 8018c6e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018c72:	2b00      	cmp	r3, #0
 8018c74:	d109      	bne.n	8018c8a <APP_THREAD_SendCoapMsg+0x182>
 8018c76:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018c7a:	2b02      	cmp	r3, #2
 8018c7c:	d105      	bne.n	8018c8a <APP_THREAD_SendCoapMsg+0x182>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_POST);
 8018c7e:	2202      	movs	r2, #2
 8018c80:	2110      	movs	r1, #16
 8018c82:	482f      	ldr	r0, [pc, #188]	; (8018d40 <APP_THREAD_SendCoapMsg+0x238>)
 8018c84:	f7fb ff19 	bl	8014aba <otCoapHeaderInit>
 8018c88:	e004      	b.n	8018c94 <APP_THREAD_SendCoapMsg+0x18c>
		else
			return // this return should never happen

//			  otCoapHeaderSetMessageId(&OT_Header, msgID); `//may not need since sendRequest should set to 0
			otCoapHeaderGenerateToken(&OT_Header, 2U); //This function sets the Token length and randomizes its value.
 8018c8a:	2102      	movs	r1, #2
 8018c8c:	482c      	ldr	r0, [pc, #176]	; (8018d40 <APP_THREAD_SendCoapMsg+0x238>)
 8018c8e:	f7fb ff7d 	bl	8014b8c <otCoapHeaderGenerateToken>
 8018c92:	e040      	b.n	8018d16 <APP_THREAD_SendCoapMsg+0x20e>

		// add the name of the resource
		error = otCoapHeaderAppendUriPathOptions(&OT_Header, resource);
 8018c94:	6839      	ldr	r1, [r7, #0]
 8018c96:	482a      	ldr	r0, [pc, #168]	; (8018d40 <APP_THREAD_SendCoapMsg+0x238>)
 8018c98:	f7fb ffdb 	bl	8014c52 <otCoapHeaderAppendUriPathOptions>
 8018c9c:	4603      	mov	r3, r0
 8018c9e:	461a      	mov	r2, r3
 8018ca0:	4b28      	ldr	r3, [pc, #160]	; (8018d44 <APP_THREAD_SendCoapMsg+0x23c>)
 8018ca2:	701a      	strb	r2, [r3, #0]
//			  if (error != OT_ERROR_NONE) while(1);

		// need this so the coap server doesnt try to parse as 'utf-8' and error out
		otCoapHeaderAppendContentFormatOption(&OT_Header, OT_COAP_OPTION_CONTENT_FORMAT_OCTET_STREAM);
 8018ca4:	212a      	movs	r1, #42	; 0x2a
 8018ca6:	4826      	ldr	r0, [pc, #152]	; (8018d40 <APP_THREAD_SendCoapMsg+0x238>)
 8018ca8:	f7fb ffa0 	bl	8014bec <otCoapHeaderAppendContentFormatOption>
//			  if (error != OT_ERROR_NONE) while(1);

		// This function adds Payload Marker indicating beginning of the payload to the CoAP header
		if (msgSize > 0) {
 8018cac:	897b      	ldrh	r3, [r7, #10]
 8018cae:	2b00      	cmp	r3, #0
 8018cb0:	d002      	beq.n	8018cb8 <APP_THREAD_SendCoapMsg+0x1b0>
			otCoapHeaderSetPayloadMarker(&OT_Header); //TODO: if no msg, dont set marker and remove empty message below
 8018cb2:	4823      	ldr	r0, [pc, #140]	; (8018d40 <APP_THREAD_SendCoapMsg+0x238>)
 8018cb4:	f7fb ffff 	bl	8014cb6 <otCoapHeaderSetPayloadMarker>
		}

		// creates new message with headers but with empty payload
		pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 8018cb8:	4921      	ldr	r1, [pc, #132]	; (8018d40 <APP_THREAD_SendCoapMsg+0x238>)
 8018cba:	2000      	movs	r0, #0
 8018cbc:	f7fc f93e 	bl	8014f3c <otCoapNewMessage>
 8018cc0:	4602      	mov	r2, r0
 8018cc2:	4b21      	ldr	r3, [pc, #132]	; (8018d48 <APP_THREAD_SendCoapMsg+0x240>)
 8018cc4:	601a      	str	r2, [r3, #0]
//			while (1);

		// Append bytes to a message (this is where the payload gets added)

		// append message if there was one given
		if (msgSize > 0) {
 8018cc6:	897b      	ldrh	r3, [r7, #10]
 8018cc8:	2b00      	cmp	r3, #0
 8018cca:	d00a      	beq.n	8018ce2 <APP_THREAD_SendCoapMsg+0x1da>
			error = otMessageAppend(pOT_Message, message, msgSize);
 8018ccc:	4b1e      	ldr	r3, [pc, #120]	; (8018d48 <APP_THREAD_SendCoapMsg+0x240>)
 8018cce:	681b      	ldr	r3, [r3, #0]
 8018cd0:	897a      	ldrh	r2, [r7, #10]
 8018cd2:	68f9      	ldr	r1, [r7, #12]
 8018cd4:	4618      	mov	r0, r3
 8018cd6:	f7fc fca6 	bl	8015626 <otMessageAppend>
 8018cda:	4603      	mov	r3, r0
 8018cdc:	461a      	mov	r2, r3
 8018cde:	4b19      	ldr	r3, [pc, #100]	; (8018d44 <APP_THREAD_SendCoapMsg+0x23c>)
 8018ce0:	701a      	strb	r2, [r3, #0]
//			  if (error != OT_ERROR_NONE) while(1);

		// TODO: the response function should only be used for the border update event (I think only if message is embedded in ACK)?


		error = otCoapSendRequest(NULL,
 8018ce2:	4b19      	ldr	r3, [pc, #100]	; (8018d48 <APP_THREAD_SendCoapMsg+0x240>)
 8018ce4:	6819      	ldr	r1, [r3, #0]
 8018ce6:	2300      	movs	r3, #0
 8018ce8:	9300      	str	r3, [sp, #0]
 8018cea:	2300      	movs	r3, #0
 8018cec:	4a11      	ldr	r2, [pc, #68]	; (8018d34 <APP_THREAD_SendCoapMsg+0x22c>)
 8018cee:	2000      	movs	r0, #0
 8018cf0:	f7fc f952 	bl	8014f98 <otCoapSendRequest>
 8018cf4:	4603      	mov	r3, r0
 8018cf6:	461a      	mov	r2, r3
 8018cf8:	4b12      	ldr	r3, [pc, #72]	; (8018d44 <APP_THREAD_SendCoapMsg+0x23c>)
 8018cfa:	701a      	strb	r2, [r3, #0]
								NULL,
								(void*) NULL);


		// if error: free allocated message buffer if one was allocated
		if (error != OT_ERROR_NONE && pOT_Message != NULL) {
 8018cfc:	4b11      	ldr	r3, [pc, #68]	; (8018d44 <APP_THREAD_SendCoapMsg+0x23c>)
 8018cfe:	781b      	ldrb	r3, [r3, #0]
 8018d00:	2b00      	cmp	r3, #0
 8018d02:	d008      	beq.n	8018d16 <APP_THREAD_SendCoapMsg+0x20e>
 8018d04:	4b10      	ldr	r3, [pc, #64]	; (8018d48 <APP_THREAD_SendCoapMsg+0x240>)
 8018d06:	681b      	ldr	r3, [r3, #0]
 8018d08:	2b00      	cmp	r3, #0
 8018d0a:	d004      	beq.n	8018d16 <APP_THREAD_SendCoapMsg+0x20e>
			otMessageFree(pOT_Message);
 8018d0c:	4b0e      	ldr	r3, [pc, #56]	; (8018d48 <APP_THREAD_SendCoapMsg+0x240>)
 8018d0e:	681b      	ldr	r3, [r3, #0]
 8018d10:	4618      	mov	r0, r3
 8018d12:	f7fc fc2f 	bl	8015574 <otMessageFree>
		}

	} while (false);
}
 8018d16:	3714      	adds	r7, #20
 8018d18:	46bd      	mov	sp, r7
 8018d1a:	bd90      	pop	{r4, r7, pc}
 8018d1c:	20028a22 	.word	0x20028a22
 8018d20:	20028a24 	.word	0x20028a24
 8018d24:	20028a0c 	.word	0x20028a0c
 8018d28:	200289d8 	.word	0x200289d8
 8018d2c:	20028a1c 	.word	0x20028a1c
 8018d30:	200289e4 	.word	0x200289e4
 8018d34:	2002775c 	.word	0x2002775c
 8018d38:	20027820 	.word	0x20027820
 8018d3c:	200289fc 	.word	0x200289fc
 8018d40:	20027788 	.word	0x20027788
 8018d44:	2002781c 	.word	0x2002781c
 8018d48:	20027818 	.word	0x20027818

08018d4c <APP_THREAD_SendCoapMsgForBorderSync>:

static void APP_THREAD_SendCoapMsgForBorderSync(void *message, uint16_t msgSize, otIp6Address *ipv6_addr, char *resource,
		uint8_t request_ack, otCoapCode coapCode, uint8_t msgID) {
 8018d4c:	b590      	push	{r4, r7, lr}
 8018d4e:	b087      	sub	sp, #28
 8018d50:	af02      	add	r7, sp, #8
 8018d52:	60f8      	str	r0, [r7, #12]
 8018d54:	607a      	str	r2, [r7, #4]
 8018d56:	603b      	str	r3, [r7, #0]
 8018d58:	460b      	mov	r3, r1
 8018d5a:	817b      	strh	r3, [r7, #10]
//			  multicastAddresses = otIp6GetMulticastAddresses(NULL);
//			  meshLocalEID =  otThreadGetMeshLocalEid(NULL);
//			  linkLocalIPV6 = otThreadGetLinkLocalIp6Address(NULL);

		// clear info
		memset(&OT_MessageInfo, 0, sizeof(OT_MessageInfo));
 8018d5c:	222c      	movs	r2, #44	; 0x2c
 8018d5e:	2100      	movs	r1, #0
 8018d60:	484e      	ldr	r0, [pc, #312]	; (8018e9c <APP_THREAD_SendCoapMsgForBorderSync+0x150>)
 8018d62:	f001 fdea 	bl	801a93a <memset>

		// add destination IPv6 address to header
		// TODO : swap the below statements once ST has their shit fixed


		memcpy(&OT_MessageInfo.mPeerAddr, &multicastAddr, sizeof(otIp6Address));
 8018d66:	4b4d      	ldr	r3, [pc, #308]	; (8018e9c <APP_THREAD_SendCoapMsgForBorderSync+0x150>)
 8018d68:	4a4d      	ldr	r2, [pc, #308]	; (8018ea0 <APP_THREAD_SendCoapMsgForBorderSync+0x154>)
 8018d6a:	f103 0410 	add.w	r4, r3, #16
 8018d6e:	4613      	mov	r3, r2
 8018d70:	6818      	ldr	r0, [r3, #0]
 8018d72:	6859      	ldr	r1, [r3, #4]
 8018d74:	689a      	ldr	r2, [r3, #8]
 8018d76:	68db      	ldr	r3, [r3, #12]
 8018d78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
//			  otIp6AddressFromString("fd11:22::c34c:7994:19f2:4b82", &OT_MessageInfo.mSockAddr);

//			  otIp6AddressFromString("fd11:22::c34c:7994:cccc:4b82", &OT_MessageInfo.mSockAddr);

		// populate message information
		OT_MessageInfo.mInterfaceId = OT_NETIF_INTERFACE_ID_THREAD;
 8018d7a:	4b48      	ldr	r3, [pc, #288]	; (8018e9c <APP_THREAD_SendCoapMsgForBorderSync+0x150>)
 8018d7c:	2201      	movs	r2, #1
 8018d7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		OT_MessageInfo.mPeerPort = OT_DEFAULT_COAP_PORT;
 8018d82:	4b46      	ldr	r3, [pc, #280]	; (8018e9c <APP_THREAD_SendCoapMsgForBorderSync+0x150>)
 8018d84:	f241 6233 	movw	r2, #5683	; 0x1633
 8018d88:	845a      	strh	r2, [r3, #34]	; 0x22
		OT_MessageInfo.mHopLimit = 64;
 8018d8a:	4b44      	ldr	r3, [pc, #272]	; (8018e9c <APP_THREAD_SendCoapMsgForBorderSync+0x150>)
 8018d8c:	2240      	movs	r2, #64	; 0x40
 8018d8e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

		/************** CREATE NEW MESSAGE ********************ifco*/

		// create header
		if (request_ack && (coapCode == OT_COAP_CODE_PUT))
 8018d92:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018d96:	2b00      	cmp	r3, #0
 8018d98:	d009      	beq.n	8018dae <APP_THREAD_SendCoapMsgForBorderSync+0x62>
 8018d9a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018d9e:	2b03      	cmp	r3, #3
 8018da0:	d105      	bne.n	8018dae <APP_THREAD_SendCoapMsgForBorderSync+0x62>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_PUT);
 8018da2:	2203      	movs	r2, #3
 8018da4:	2100      	movs	r1, #0
 8018da6:	483f      	ldr	r0, [pc, #252]	; (8018ea4 <APP_THREAD_SendCoapMsgForBorderSync+0x158>)
 8018da8:	f7fb fe87 	bl	8014aba <otCoapHeaderInit>
 8018dac:	e04a      	b.n	8018e44 <APP_THREAD_SendCoapMsgForBorderSync+0xf8>
		else if (request_ack && (coapCode == OT_COAP_CODE_GET))
 8018dae:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018db2:	2b00      	cmp	r3, #0
 8018db4:	d009      	beq.n	8018dca <APP_THREAD_SendCoapMsgForBorderSync+0x7e>
 8018db6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018dba:	2b01      	cmp	r3, #1
 8018dbc:	d105      	bne.n	8018dca <APP_THREAD_SendCoapMsgForBorderSync+0x7e>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_GET);
 8018dbe:	2201      	movs	r2, #1
 8018dc0:	2100      	movs	r1, #0
 8018dc2:	4838      	ldr	r0, [pc, #224]	; (8018ea4 <APP_THREAD_SendCoapMsgForBorderSync+0x158>)
 8018dc4:	f7fb fe79 	bl	8014aba <otCoapHeaderInit>
 8018dc8:	e03c      	b.n	8018e44 <APP_THREAD_SendCoapMsgForBorderSync+0xf8>
		else if (request_ack && (coapCode == OT_COAP_CODE_POST))
 8018dca:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018dce:	2b00      	cmp	r3, #0
 8018dd0:	d009      	beq.n	8018de6 <APP_THREAD_SendCoapMsgForBorderSync+0x9a>
 8018dd2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018dd6:	2b02      	cmp	r3, #2
 8018dd8:	d105      	bne.n	8018de6 <APP_THREAD_SendCoapMsgForBorderSync+0x9a>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_POST);
 8018dda:	2202      	movs	r2, #2
 8018ddc:	2100      	movs	r1, #0
 8018dde:	4831      	ldr	r0, [pc, #196]	; (8018ea4 <APP_THREAD_SendCoapMsgForBorderSync+0x158>)
 8018de0:	f7fb fe6b 	bl	8014aba <otCoapHeaderInit>
 8018de4:	e02e      	b.n	8018e44 <APP_THREAD_SendCoapMsgForBorderSync+0xf8>
		else if (!request_ack && (coapCode == OT_COAP_CODE_PUT))
 8018de6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018dea:	2b00      	cmp	r3, #0
 8018dec:	d109      	bne.n	8018e02 <APP_THREAD_SendCoapMsgForBorderSync+0xb6>
 8018dee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018df2:	2b03      	cmp	r3, #3
 8018df4:	d105      	bne.n	8018e02 <APP_THREAD_SendCoapMsgForBorderSync+0xb6>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_PUT);
 8018df6:	2203      	movs	r2, #3
 8018df8:	2110      	movs	r1, #16
 8018dfa:	482a      	ldr	r0, [pc, #168]	; (8018ea4 <APP_THREAD_SendCoapMsgForBorderSync+0x158>)
 8018dfc:	f7fb fe5d 	bl	8014aba <otCoapHeaderInit>
 8018e00:	e020      	b.n	8018e44 <APP_THREAD_SendCoapMsgForBorderSync+0xf8>
		else if (!request_ack && (coapCode == OT_COAP_CODE_GET))
 8018e02:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018e06:	2b00      	cmp	r3, #0
 8018e08:	d109      	bne.n	8018e1e <APP_THREAD_SendCoapMsgForBorderSync+0xd2>
 8018e0a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018e0e:	2b01      	cmp	r3, #1
 8018e10:	d105      	bne.n	8018e1e <APP_THREAD_SendCoapMsgForBorderSync+0xd2>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_GET);
 8018e12:	2201      	movs	r2, #1
 8018e14:	2110      	movs	r1, #16
 8018e16:	4823      	ldr	r0, [pc, #140]	; (8018ea4 <APP_THREAD_SendCoapMsgForBorderSync+0x158>)
 8018e18:	f7fb fe4f 	bl	8014aba <otCoapHeaderInit>
 8018e1c:	e012      	b.n	8018e44 <APP_THREAD_SendCoapMsgForBorderSync+0xf8>
		else if (!request_ack && (coapCode == OT_COAP_CODE_POST))
 8018e1e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018e22:	2b00      	cmp	r3, #0
 8018e24:	d109      	bne.n	8018e3a <APP_THREAD_SendCoapMsgForBorderSync+0xee>
 8018e26:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018e2a:	2b02      	cmp	r3, #2
 8018e2c:	d105      	bne.n	8018e3a <APP_THREAD_SendCoapMsgForBorderSync+0xee>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_POST);
 8018e2e:	2202      	movs	r2, #2
 8018e30:	2110      	movs	r1, #16
 8018e32:	481c      	ldr	r0, [pc, #112]	; (8018ea4 <APP_THREAD_SendCoapMsgForBorderSync+0x158>)
 8018e34:	f7fb fe41 	bl	8014aba <otCoapHeaderInit>
 8018e38:	e004      	b.n	8018e44 <APP_THREAD_SendCoapMsgForBorderSync+0xf8>
		else
			return // this return should never happen

//			  otCoapHeaderSetMessageId(&OT_Header, msgID); `//may not need since sendRequest should set to 0
			otCoapHeaderGenerateToken(&OT_Header, 2U); //This function sets the Token length and randomizes its value.
 8018e3a:	2102      	movs	r1, #2
 8018e3c:	4819      	ldr	r0, [pc, #100]	; (8018ea4 <APP_THREAD_SendCoapMsgForBorderSync+0x158>)
 8018e3e:	f7fb fea5 	bl	8014b8c <otCoapHeaderGenerateToken>
 8018e42:	e028      	b.n	8018e96 <APP_THREAD_SendCoapMsgForBorderSync+0x14a>

		// add the name of the resource
		error = otCoapHeaderAppendUriPathOptions(&OT_Header, resource);
 8018e44:	6839      	ldr	r1, [r7, #0]
 8018e46:	4817      	ldr	r0, [pc, #92]	; (8018ea4 <APP_THREAD_SendCoapMsgForBorderSync+0x158>)
 8018e48:	f7fb ff03 	bl	8014c52 <otCoapHeaderAppendUriPathOptions>
 8018e4c:	4603      	mov	r3, r0
 8018e4e:	461a      	mov	r2, r3
 8018e50:	4b15      	ldr	r3, [pc, #84]	; (8018ea8 <APP_THREAD_SendCoapMsgForBorderSync+0x15c>)
 8018e52:	701a      	strb	r2, [r3, #0]

		// This function adds Payload Marker indicating beginning of the payload to the CoAP header
//		otCoapHeaderSetPayloadMarker(&OT_Header);

		// creates new message with headers but with empty payload
		pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 8018e54:	4913      	ldr	r1, [pc, #76]	; (8018ea4 <APP_THREAD_SendCoapMsgForBorderSync+0x158>)
 8018e56:	2000      	movs	r0, #0
 8018e58:	f7fc f870 	bl	8014f3c <otCoapNewMessage>
 8018e5c:	4602      	mov	r2, r0
 8018e5e:	4b13      	ldr	r3, [pc, #76]	; (8018eac <APP_THREAD_SendCoapMsgForBorderSync+0x160>)
 8018e60:	601a      	str	r2, [r3, #0]
			 // if (error != OT_ERROR_NONE) while(1);

		// TODO: the response function should only be used for the border update event (I think only if message is embedded in ACK)?


		error = otCoapSendRequest(NULL, pOT_Message, &OT_MessageInfo, &APP_THREAD_DummyRespHandler,
 8018e62:	4b12      	ldr	r3, [pc, #72]	; (8018eac <APP_THREAD_SendCoapMsgForBorderSync+0x160>)
 8018e64:	6819      	ldr	r1, [r3, #0]
 8018e66:	4b12      	ldr	r3, [pc, #72]	; (8018eb0 <APP_THREAD_SendCoapMsgForBorderSync+0x164>)
 8018e68:	9300      	str	r3, [sp, #0]
 8018e6a:	4b12      	ldr	r3, [pc, #72]	; (8018eb4 <APP_THREAD_SendCoapMsgForBorderSync+0x168>)
 8018e6c:	4a0b      	ldr	r2, [pc, #44]	; (8018e9c <APP_THREAD_SendCoapMsgForBorderSync+0x150>)
 8018e6e:	2000      	movs	r0, #0
 8018e70:	f7fc f892 	bl	8014f98 <otCoapSendRequest>
 8018e74:	4603      	mov	r3, r0
 8018e76:	461a      	mov	r2, r3
 8018e78:	4b0b      	ldr	r3, [pc, #44]	; (8018ea8 <APP_THREAD_SendCoapMsgForBorderSync+0x15c>)
 8018e7a:	701a      	strb	r2, [r3, #0]
				(void*) &APP_THREAD_CoapRespHandler_UpdateBorderRouter);



		// if error: free allocated message buffer if one was allocated
		if (error != OT_ERROR_NONE && pOT_Message != NULL) {
 8018e7c:	4b0a      	ldr	r3, [pc, #40]	; (8018ea8 <APP_THREAD_SendCoapMsgForBorderSync+0x15c>)
 8018e7e:	781b      	ldrb	r3, [r3, #0]
 8018e80:	2b00      	cmp	r3, #0
 8018e82:	d008      	beq.n	8018e96 <APP_THREAD_SendCoapMsgForBorderSync+0x14a>
 8018e84:	4b09      	ldr	r3, [pc, #36]	; (8018eac <APP_THREAD_SendCoapMsgForBorderSync+0x160>)
 8018e86:	681b      	ldr	r3, [r3, #0]
 8018e88:	2b00      	cmp	r3, #0
 8018e8a:	d004      	beq.n	8018e96 <APP_THREAD_SendCoapMsgForBorderSync+0x14a>
			otMessageFree(pOT_Message);
 8018e8c:	4b07      	ldr	r3, [pc, #28]	; (8018eac <APP_THREAD_SendCoapMsgForBorderSync+0x160>)
 8018e8e:	681b      	ldr	r3, [r3, #0]
 8018e90:	4618      	mov	r0, r3
 8018e92:	f7fc fb6f 	bl	8015574 <otMessageFree>
		}

	} while (false);

}
 8018e96:	3714      	adds	r7, #20
 8018e98:	46bd      	mov	sp, r7
 8018e9a:	bd90      	pop	{r4, r7, pc}
 8018e9c:	2002775c 	.word	0x2002775c
 8018ea0:	200289fc 	.word	0x200289fc
 8018ea4:	20027788 	.word	0x20027788
 8018ea8:	2002781c 	.word	0x2002781c
 8018eac:	20027818 	.word	0x20027818
 8018eb0:	080186c1 	.word	0x080186c1
 8018eb4:	080186a5 	.word	0x080186a5

08018eb8 <APP_THREAD_SendDataResponse>:
request and the Acknowledgement MUST match, and the tokens of the
response and original request MUST match.  In a separate
response, just the tokens of the response and original request
MUST match.*/

static void APP_THREAD_SendDataResponse(void *message, uint16_t msgSize, otCoapHeader *pRequestHeader, const otMessageInfo *pMessageInfo) {
 8018eb8:	b590      	push	{r4, r7, lr}
 8018eba:	b087      	sub	sp, #28
 8018ebc:	af00      	add	r7, sp, #0
 8018ebe:	60f8      	str	r0, [r7, #12]
 8018ec0:	607a      	str	r2, [r7, #4]
 8018ec2:	603b      	str	r3, [r7, #0]
 8018ec4:	460b      	mov	r3, r1
 8018ec6:	817b      	strh	r3, [r7, #10]
	otError error = OT_ERROR_NONE;
 8018ec8:	2300      	movs	r3, #0
 8018eca:	75fb      	strb	r3, [r7, #23]

	//APP_DBG(" ********* APP_THREAD_SendDataResponse \r\n");
	otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_ACKNOWLEDGMENT, OT_COAP_CODE_CHANGED);
 8018ecc:	2244      	movs	r2, #68	; 0x44
 8018ece:	2120      	movs	r1, #32
 8018ed0:	4826      	ldr	r0, [pc, #152]	; (8018f6c <APP_THREAD_SendDataResponse+0xb4>)
 8018ed2:	f7fb fdf2 	bl	8014aba <otCoapHeaderInit>
	otCoapHeaderSetMessageId(&OT_Header, otCoapHeaderGetMessageId(pRequestHeader));
 8018ed6:	6878      	ldr	r0, [r7, #4]
 8018ed8:	f7fb ffa7 	bl	8014e2a <otCoapHeaderGetMessageId>
 8018edc:	4603      	mov	r3, r0
 8018ede:	4619      	mov	r1, r3
 8018ee0:	4822      	ldr	r0, [pc, #136]	; (8018f6c <APP_THREAD_SendDataResponse+0xb4>)
 8018ee2:	f7fb ff16 	bl	8014d12 <otCoapHeaderSetMessageId>
	otCoapHeaderSetToken(&OT_Header, otCoapHeaderGetToken(pRequestHeader), otCoapHeaderGetTokenLength(pRequestHeader));
 8018ee6:	6878      	ldr	r0, [r7, #4]
 8018ee8:	f7fb fffb 	bl	8014ee2 <otCoapHeaderGetToken>
 8018eec:	4604      	mov	r4, r0
 8018eee:	6878      	ldr	r0, [r7, #4]
 8018ef0:	f7fb ffc9 	bl	8014e86 <otCoapHeaderGetTokenLength>
 8018ef4:	4603      	mov	r3, r0
 8018ef6:	461a      	mov	r2, r3
 8018ef8:	4621      	mov	r1, r4
 8018efa:	481c      	ldr	r0, [pc, #112]	; (8018f6c <APP_THREAD_SendDataResponse+0xb4>)
 8018efc:	f7fb fe12 	bl	8014b24 <otCoapHeaderSetToken>

	if (msgSize > 0){
 8018f00:	897b      	ldrh	r3, [r7, #10]
 8018f02:	2b00      	cmp	r3, #0
 8018f04:	d006      	beq.n	8018f14 <APP_THREAD_SendDataResponse+0x5c>
		// need this so the coap server doesnt try to parse as 'utf-8' and error out
		otCoapHeaderAppendContentFormatOption(&OT_Header, OT_COAP_OPTION_CONTENT_FORMAT_OCTET_STREAM);
 8018f06:	212a      	movs	r1, #42	; 0x2a
 8018f08:	4818      	ldr	r0, [pc, #96]	; (8018f6c <APP_THREAD_SendDataResponse+0xb4>)
 8018f0a:	f7fb fe6f 	bl	8014bec <otCoapHeaderAppendContentFormatOption>
//			  if (error != OT_ERROR_NONE) while(1);

		// This function adds Payload Marker indicating beginning of the payload to the CoAP header
		otCoapHeaderSetPayloadMarker(&OT_Header); //TODO: if no msg, dont set marker and remove empty message below
 8018f0e:	4817      	ldr	r0, [pc, #92]	; (8018f6c <APP_THREAD_SendDataResponse+0xb4>)
 8018f10:	f7fb fed1 	bl	8014cb6 <otCoapHeaderSetPayloadMarker>
	}

	pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 8018f14:	4915      	ldr	r1, [pc, #84]	; (8018f6c <APP_THREAD_SendDataResponse+0xb4>)
 8018f16:	2000      	movs	r0, #0
 8018f18:	f7fc f810 	bl	8014f3c <otCoapNewMessage>
 8018f1c:	4602      	mov	r2, r0
 8018f1e:	4b14      	ldr	r3, [pc, #80]	; (8018f70 <APP_THREAD_SendDataResponse+0xb8>)
 8018f20:	601a      	str	r2, [r3, #0]
	if (pOT_Message == NULL) {
		//APP_THREAD_Error(ERR_NEW_MSG_ALLOC,error);
	}

	// append message if there was one given
	if (msgSize > 0) {
 8018f22:	897b      	ldrh	r3, [r7, #10]
 8018f24:	2b00      	cmp	r3, #0
 8018f26:	d008      	beq.n	8018f3a <APP_THREAD_SendDataResponse+0x82>
		error = otMessageAppend(pOT_Message, message, msgSize);
 8018f28:	4b11      	ldr	r3, [pc, #68]	; (8018f70 <APP_THREAD_SendDataResponse+0xb8>)
 8018f2a:	681b      	ldr	r3, [r3, #0]
 8018f2c:	897a      	ldrh	r2, [r7, #10]
 8018f2e:	68f9      	ldr	r1, [r7, #12]
 8018f30:	4618      	mov	r0, r3
 8018f32:	f7fc fb78 	bl	8015626 <otMessageAppend>
 8018f36:	4603      	mov	r3, r0
 8018f38:	75fb      	strb	r3, [r7, #23]
	}

	error = otCoapSendResponse(NULL, pOT_Message, pMessageInfo);
 8018f3a:	4b0d      	ldr	r3, [pc, #52]	; (8018f70 <APP_THREAD_SendDataResponse+0xb8>)
 8018f3c:	681b      	ldr	r3, [r3, #0]
 8018f3e:	683a      	ldr	r2, [r7, #0]
 8018f40:	4619      	mov	r1, r3
 8018f42:	2000      	movs	r0, #0
 8018f44:	f7fc f8c1 	bl	80150ca <otCoapSendResponse>
 8018f48:	4603      	mov	r3, r0
 8018f4a:	75fb      	strb	r3, [r7, #23]
	if (error != OT_ERROR_NONE && pOT_Message != NULL) {
 8018f4c:	7dfb      	ldrb	r3, [r7, #23]
 8018f4e:	2b00      	cmp	r3, #0
 8018f50:	d008      	beq.n	8018f64 <APP_THREAD_SendDataResponse+0xac>
 8018f52:	4b07      	ldr	r3, [pc, #28]	; (8018f70 <APP_THREAD_SendDataResponse+0xb8>)
 8018f54:	681b      	ldr	r3, [r3, #0]
 8018f56:	2b00      	cmp	r3, #0
 8018f58:	d004      	beq.n	8018f64 <APP_THREAD_SendDataResponse+0xac>
		otMessageFree(pOT_Message);
 8018f5a:	4b05      	ldr	r3, [pc, #20]	; (8018f70 <APP_THREAD_SendDataResponse+0xb8>)
 8018f5c:	681b      	ldr	r3, [r3, #0]
 8018f5e:	4618      	mov	r0, r3
 8018f60:	f7fc fb08 	bl	8015574 <otMessageFree>
		//APP_THREAD_Error(ERR_THREAD_DATA_RESPONSE,error);
	}
}
 8018f64:	bf00      	nop
 8018f66:	371c      	adds	r7, #28
 8018f68:	46bd      	mov	sp, r7
 8018f6a:	bd90      	pop	{r4, r7, pc}
 8018f6c:	20027788 	.word	0x20027788
 8018f70:	20027818 	.word	0x20027818

08018f74 <APP_THREAD_RegisterCmdBuffer>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void APP_THREAD_RegisterCmdBuffer(TL_CmdPacket_t* p_buffer)
{
 8018f74:	b480      	push	{r7}
 8018f76:	b083      	sub	sp, #12
 8018f78:	af00      	add	r7, sp, #0
 8018f7a:	6078      	str	r0, [r7, #4]
  p_thread_otcmdbuffer = p_buffer;
 8018f7c:	4a04      	ldr	r2, [pc, #16]	; (8018f90 <APP_THREAD_RegisterCmdBuffer+0x1c>)
 8018f7e:	687b      	ldr	r3, [r7, #4]
 8018f80:	6013      	str	r3, [r2, #0]
}
 8018f82:	bf00      	nop
 8018f84:	370c      	adds	r7, #12
 8018f86:	46bd      	mov	sp, r7
 8018f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f8c:	4770      	bx	lr
 8018f8e:	bf00      	nop
 8018f90:	20027744 	.word	0x20027744

08018f94 <THREAD_Get_OTCmdPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdPayloadBuffer(void)
{
 8018f94:	b480      	push	{r7}
 8018f96:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)p_thread_otcmdbuffer->cmdserial.cmd.payload;
 8018f98:	4b03      	ldr	r3, [pc, #12]	; (8018fa8 <THREAD_Get_OTCmdPayloadBuffer+0x14>)
 8018f9a:	681b      	ldr	r3, [r3, #0]
 8018f9c:	330c      	adds	r3, #12
}
 8018f9e:	4618      	mov	r0, r3
 8018fa0:	46bd      	mov	sp, r7
 8018fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fa6:	4770      	bx	lr
 8018fa8:	20027744 	.word	0x20027744

08018fac <THREAD_Get_OTCmdRspPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdRspPayloadBuffer(void)
{
 8018fac:	b480      	push	{r7}
 8018fae:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)((TL_EvtPacket_t *)p_thread_otcmdbuffer)->evtserial.evt.payload;
 8018fb0:	4b03      	ldr	r3, [pc, #12]	; (8018fc0 <THREAD_Get_OTCmdRspPayloadBuffer+0x14>)
 8018fb2:	681b      	ldr	r3, [r3, #0]
 8018fb4:	330b      	adds	r3, #11
}
 8018fb6:	4618      	mov	r0, r3
 8018fb8:	46bd      	mov	sp, r7
 8018fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fbe:	4770      	bx	lr
 8018fc0:	20027744 	.word	0x20027744

08018fc4 <THREAD_Get_NotificationPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_NotificationPayloadBuffer(void)
{
 8018fc4:	b480      	push	{r7}
 8018fc6:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)(p_thread_notif_M0_to_M4)->evtserial.evt.payload;
 8018fc8:	4b03      	ldr	r3, [pc, #12]	; (8018fd8 <THREAD_Get_NotificationPayloadBuffer+0x14>)
 8018fca:	681b      	ldr	r3, [r3, #0]
 8018fcc:	330b      	adds	r3, #11
}
 8018fce:	4618      	mov	r0, r3
 8018fd0:	46bd      	mov	sp, r7
 8018fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fd6:	4770      	bx	lr
 8018fd8:	20027748 	.word	0x20027748

08018fdc <Ot_Cmd_Transfer>:
 *
 * @param   None
 * @return  None
 */
void Ot_Cmd_Transfer(void)
{
 8018fdc:	b580      	push	{r7, lr}
 8018fde:	b082      	sub	sp, #8
 8018fe0:	af00      	add	r7, sp, #0
  /* OpenThread OT command cmdcode range 0x280 .. 0x3DF = 352 */
  p_thread_otcmdbuffer->cmdserial.cmd.cmdcode = 0x280U;
 8018fe2:	4b0f      	ldr	r3, [pc, #60]	; (8019020 <Ot_Cmd_Transfer+0x44>)
 8018fe4:	681b      	ldr	r3, [r3, #0]
 8018fe6:	2200      	movs	r2, #0
 8018fe8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8018fec:	725a      	strb	r2, [r3, #9]
 8018fee:	2200      	movs	r2, #0
 8018ff0:	f042 0202 	orr.w	r2, r2, #2
 8018ff4:	729a      	strb	r2, [r3, #10]
  /* Size = otCmdBuffer->Size (Number of OT cmd arguments : 1 arg = 32bits so multiply by 4 to get size in bytes)
   * + ID (4 bytes) + Size (4 bytes) */
  uint32_t l_size = ((Thread_OT_Cmd_Request_t*)(p_thread_otcmdbuffer->cmdserial.cmd.payload))->Size * 4U + 8U;
 8018ff6:	4b0a      	ldr	r3, [pc, #40]	; (8019020 <Ot_Cmd_Transfer+0x44>)
 8018ff8:	681b      	ldr	r3, [r3, #0]
 8018ffa:	330c      	adds	r3, #12
 8018ffc:	685b      	ldr	r3, [r3, #4]
 8018ffe:	3302      	adds	r3, #2
 8019000:	009b      	lsls	r3, r3, #2
 8019002:	607b      	str	r3, [r7, #4]
  p_thread_otcmdbuffer->cmdserial.cmd.plen = l_size;
 8019004:	4b06      	ldr	r3, [pc, #24]	; (8019020 <Ot_Cmd_Transfer+0x44>)
 8019006:	681b      	ldr	r3, [r3, #0]
 8019008:	687a      	ldr	r2, [r7, #4]
 801900a:	b2d2      	uxtb	r2, r2
 801900c:	72da      	strb	r2, [r3, #11]

  TL_OT_SendCmd();
 801900e:	f7fd fb19 	bl	8016644 <TL_OT_SendCmd>

  /* Wait completion of cmd */
  Wait_Getting_Ack_From_M0();
 8019012:	f000 f829 	bl	8019068 <Wait_Getting_Ack_From_M0>
}
 8019016:	bf00      	nop
 8019018:	3708      	adds	r7, #8
 801901a:	46bd      	mov	sp, r7
 801901c:	bd80      	pop	{r7, pc}
 801901e:	bf00      	nop
 8019020:	20027744 	.word	0x20027744

08019024 <TL_OT_CmdEvtReceived>:
 *
 * @param   Otbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_OT_CmdEvtReceived( TL_EvtPacket_t * Otbuffer )
{
 8019024:	b580      	push	{r7, lr}
 8019026:	b082      	sub	sp, #8
 8019028:	af00      	add	r7, sp, #0
 801902a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Otbuffer);

  Receive_Ack_From_M0();
 801902c:	f000 f82e 	bl	801908c <Receive_Ack_From_M0>
}
 8019030:	bf00      	nop
 8019032:	3708      	adds	r7, #8
 8019034:	46bd      	mov	sp, r7
 8019036:	bd80      	pop	{r7, pc}

08019038 <TL_THREAD_NotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_NotReceived( TL_EvtPacket_t * Notbuffer )
{
 8019038:	b580      	push	{r7, lr}
 801903a:	b082      	sub	sp, #8
 801903c:	af00      	add	r7, sp, #0
 801903e:	6078      	str	r0, [r7, #4]
  p_thread_notif_M0_to_M4 = Notbuffer;
 8019040:	4a04      	ldr	r2, [pc, #16]	; (8019054 <TL_THREAD_NotReceived+0x1c>)
 8019042:	687b      	ldr	r3, [r7, #4]
 8019044:	6013      	str	r3, [r2, #0]

  Receive_Notification_From_M0();
 8019046:	f000 f82d 	bl	80190a4 <Receive_Notification_From_M0>
}
 801904a:	bf00      	nop
 801904c:	3708      	adds	r7, #8
 801904e:	46bd      	mov	sp, r7
 8019050:	bd80      	pop	{r7, pc}
 8019052:	bf00      	nop
 8019054:	20027748 	.word	0x20027748

08019058 <Pre_OtCmdProcessing>:
  *         pending before sending a new ot command.
  * @param  None
  * @retval None
  */
void Pre_OtCmdProcessing(void)
{
 8019058:	b480      	push	{r7}
 801905a:	af00      	add	r7, sp, #0

}
 801905c:	bf00      	nop
 801905e:	46bd      	mov	sp, r7
 8019060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019064:	4770      	bx	lr
	...

08019068 <Wait_Getting_Ack_From_M0>:
  *
  * @param  None
  * @retval None
  */
static void Wait_Getting_Ack_From_M0(void)
{
 8019068:	b480      	push	{r7}
 801906a:	af00      	add	r7, sp, #0
  while (FlagReceiveAckFromM0 == 0)
 801906c:	bf00      	nop
 801906e:	4b06      	ldr	r3, [pc, #24]	; (8019088 <Wait_Getting_Ack_From_M0+0x20>)
 8019070:	681b      	ldr	r3, [r3, #0]
 8019072:	2b00      	cmp	r3, #0
 8019074:	d0fb      	beq.n	801906e <Wait_Getting_Ack_From_M0+0x6>
  {
  }
  FlagReceiveAckFromM0 = 0;
 8019076:	4b04      	ldr	r3, [pc, #16]	; (8019088 <Wait_Getting_Ack_From_M0+0x20>)
 8019078:	2200      	movs	r2, #0
 801907a:	601a      	str	r2, [r3, #0]
}
 801907c:	bf00      	nop
 801907e:	46bd      	mov	sp, r7
 8019080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019084:	4770      	bx	lr
 8019086:	bf00      	nop
 8019088:	20027750 	.word	0x20027750

0801908c <Receive_Ack_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Ack_From_M0(void)
{
 801908c:	b480      	push	{r7}
 801908e:	af00      	add	r7, sp, #0
  FlagReceiveAckFromM0 = 1;
 8019090:	4b03      	ldr	r3, [pc, #12]	; (80190a0 <Receive_Ack_From_M0+0x14>)
 8019092:	2201      	movs	r2, #1
 8019094:	601a      	str	r2, [r3, #0]
}
 8019096:	bf00      	nop
 8019098:	46bd      	mov	sp, r7
 801909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801909e:	4770      	bx	lr
 80190a0:	20027750 	.word	0x20027750

080190a4 <Receive_Notification_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Notification_From_M0(void)
{
 80190a4:	b580      	push	{r7, lr}
 80190a6:	af00      	add	r7, sp, #0
  CptReceiveMsgFromM0++;
 80190a8:	4b06      	ldr	r3, [pc, #24]	; (80190c4 <Receive_Notification_From_M0+0x20>)
 80190aa:	681b      	ldr	r3, [r3, #0]
 80190ac:	3301      	adds	r3, #1
 80190ae:	4a05      	ldr	r2, [pc, #20]	; (80190c4 <Receive_Notification_From_M0+0x20>)
 80190b0:	6013      	str	r3, [r2, #0]
  osThreadFlagsSet(OsTaskMsgM0ToM4Id,1);
 80190b2:	4b05      	ldr	r3, [pc, #20]	; (80190c8 <Receive_Notification_From_M0+0x24>)
 80190b4:	681b      	ldr	r3, [r3, #0]
 80190b6:	2101      	movs	r1, #1
 80190b8:	4618      	mov	r0, r3
 80190ba:	f7f7 f9e3 	bl	8010484 <osThreadFlagsSet>
}
 80190be:	bf00      	nop
 80190c0:	bd80      	pop	{r7, pc}
 80190c2:	bf00      	nop
 80190c4:	2002774c 	.word	0x2002774c
 80190c8:	20027754 	.word	0x20027754

080190cc <Send_CLI_To_M0>:
 * @brief Process sends receive CLI command to M0.
 * @param  None
 * @retval None
 */
static void Send_CLI_To_M0(void)
{
 80190cc:	b580      	push	{r7, lr}
 80190ce:	af00      	add	r7, sp, #0
  memset(ThreadCliCmdBuffer.cmdserial.cmd.payload, 0x0U, 255U);
 80190d0:	22ff      	movs	r2, #255	; 0xff
 80190d2:	2100      	movs	r1, #0
 80190d4:	4812      	ldr	r0, [pc, #72]	; (8019120 <Send_CLI_To_M0+0x54>)
 80190d6:	f001 fc30 	bl	801a93a <memset>
  memcpy(ThreadCliCmdBuffer.cmdserial.cmd.payload, CommandString, indexReceiveChar);
 80190da:	4b12      	ldr	r3, [pc, #72]	; (8019124 <Send_CLI_To_M0+0x58>)
 80190dc:	881b      	ldrh	r3, [r3, #0]
 80190de:	b29b      	uxth	r3, r3
 80190e0:	461a      	mov	r2, r3
 80190e2:	4911      	ldr	r1, [pc, #68]	; (8019128 <Send_CLI_To_M0+0x5c>)
 80190e4:	480e      	ldr	r0, [pc, #56]	; (8019120 <Send_CLI_To_M0+0x54>)
 80190e6:	f001 fc1d 	bl	801a924 <memcpy>
  ThreadCliCmdBuffer.cmdserial.cmd.plen = indexReceiveChar;
 80190ea:	4b0e      	ldr	r3, [pc, #56]	; (8019124 <Send_CLI_To_M0+0x58>)
 80190ec:	881b      	ldrh	r3, [r3, #0]
 80190ee:	b29b      	uxth	r3, r3
 80190f0:	b2da      	uxtb	r2, r3
 80190f2:	4b0e      	ldr	r3, [pc, #56]	; (801912c <Send_CLI_To_M0+0x60>)
 80190f4:	72da      	strb	r2, [r3, #11]
  ThreadCliCmdBuffer.cmdserial.cmd.cmdcode = 0x0;
 80190f6:	4b0d      	ldr	r3, [pc, #52]	; (801912c <Send_CLI_To_M0+0x60>)
 80190f8:	2200      	movs	r2, #0
 80190fa:	725a      	strb	r2, [r3, #9]
 80190fc:	2200      	movs	r2, #0
 80190fe:	729a      	strb	r2, [r3, #10]

  /* Clear receive buffer, character counter and command complete */
  CptReceiveCmdFromUser = 0;
 8019100:	4b0b      	ldr	r3, [pc, #44]	; (8019130 <Send_CLI_To_M0+0x64>)
 8019102:	2200      	movs	r2, #0
 8019104:	801a      	strh	r2, [r3, #0]
  indexReceiveChar = 0;
 8019106:	4b07      	ldr	r3, [pc, #28]	; (8019124 <Send_CLI_To_M0+0x58>)
 8019108:	2200      	movs	r2, #0
 801910a:	801a      	strh	r2, [r3, #0]
  memset(CommandString, 0, C_SIZE_CMD_STRING);
 801910c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8019110:	2100      	movs	r1, #0
 8019112:	4805      	ldr	r0, [pc, #20]	; (8019128 <Send_CLI_To_M0+0x5c>)
 8019114:	f001 fc11 	bl	801a93a <memset>

  TL_CLI_SendCmd();
 8019118:	f7fd faa2 	bl	8016660 <TL_CLI_SendCmd>
}
 801911c:	bf00      	nop
 801911e:	bd80      	pop	{r7, pc}
 8019120:	20030a58 	.word	0x20030a58
 8019124:	20027740 	.word	0x20027740
 8019128:	20027640 	.word	0x20027640
 801912c:	20030a4c 	.word	0x20030a4c
 8019130:	20027742 	.word	0x20027742

08019134 <Send_CLI_Ack_For_OT>:
 * @brief Send notification for CLI TL Channel.
 * @param  None
 * @retval None
 */
static void Send_CLI_Ack_For_OT(void)
{
 8019134:	b580      	push	{r7, lr}
 8019136:	af00      	add	r7, sp, #0

  /* Notify M0 that characters have been sent to UART */
  TL_THREAD_CliSendAck();
 8019138:	f7fd faae 	bl	8016698 <TL_THREAD_CliSendAck>
}
 801913c:	bf00      	nop
 801913e:	bd80      	pop	{r7, pc}

08019140 <APP_THREAD_Init_UART_CLI>:
 * @brief Perform initialization of CLI UART interface.
 * @param  None
 * @retval None
 */
void APP_THREAD_Init_UART_CLI(void)
{
 8019140:	b580      	push	{r7, lr}
 8019142:	af00      	add	r7, sp, #0
#if (CFG_FULL_LOW_POWER == 0)
  OsTaskCliId = osThreadNew(APP_THREAD_FreeRTOSSendCLIToM0Task, NULL,&ThreadCliProcess_attr);
 8019144:	4a04      	ldr	r2, [pc, #16]	; (8019158 <APP_THREAD_Init_UART_CLI+0x18>)
 8019146:	2100      	movs	r1, #0
 8019148:	4804      	ldr	r0, [pc, #16]	; (801915c <APP_THREAD_Init_UART_CLI+0x1c>)
 801914a:	f7f7 f8f5 	bl	8010338 <osThreadNew>
 801914e:	4602      	mov	r2, r0
 8019150:	4b03      	ldr	r3, [pc, #12]	; (8019160 <APP_THREAD_Init_UART_CLI+0x20>)
 8019152:	601a      	str	r2, [r3, #0]
#else
#if (CFG_FULL_LOW_POWER == 0)
//  HW_UART_Receive_IT(CFG_CLI_UART, aRxBuffer, 1, RxCpltCallback);
#endif /* (CFG_FULL_LOW_POWER == 0) */
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */
}
 8019154:	bf00      	nop
 8019156:	bd80      	pop	{r7, pc}
 8019158:	0801c450 	.word	0x0801c450
 801915c:	0801864b 	.word	0x0801864b
 8019160:	20027758 	.word	0x20027758

08019164 <APP_THREAD_TL_THREAD_INIT>:
 * @brief Perform initialization of TL for THREAD.
 * @param  None
 * @retval None
 */
void APP_THREAD_TL_THREAD_INIT(void)
{
 8019164:	b580      	push	{r7, lr}
 8019166:	af00      	add	r7, sp, #0
  ThreadConfigBuffer.p_ThreadOtCmdRspBuffer = (uint8_t*)&ThreadOtCmdBuffer;
 8019168:	4b06      	ldr	r3, [pc, #24]	; (8019184 <APP_THREAD_TL_THREAD_INIT+0x20>)
 801916a:	4a07      	ldr	r2, [pc, #28]	; (8019188 <APP_THREAD_TL_THREAD_INIT+0x24>)
 801916c:	601a      	str	r2, [r3, #0]
  ThreadConfigBuffer.p_ThreadNotAckBuffer = (uint8_t*)ThreadNotifRspEvtBuffer;
 801916e:	4b05      	ldr	r3, [pc, #20]	; (8019184 <APP_THREAD_TL_THREAD_INIT+0x20>)
 8019170:	4a06      	ldr	r2, [pc, #24]	; (801918c <APP_THREAD_TL_THREAD_INIT+0x28>)
 8019172:	609a      	str	r2, [r3, #8]
  ThreadConfigBuffer.p_ThreadCliRspBuffer = (uint8_t*)&ThreadCliCmdBuffer;
 8019174:	4b03      	ldr	r3, [pc, #12]	; (8019184 <APP_THREAD_TL_THREAD_INIT+0x20>)
 8019176:	4a06      	ldr	r2, [pc, #24]	; (8019190 <APP_THREAD_TL_THREAD_INIT+0x2c>)
 8019178:	605a      	str	r2, [r3, #4]

  TL_THREAD_Init( &ThreadConfigBuffer );
 801917a:	4802      	ldr	r0, [pc, #8]	; (8019184 <APP_THREAD_TL_THREAD_INIT+0x20>)
 801917c:	f7fd fa46 	bl	801660c <TL_THREAD_Init>
}
 8019180:	bf00      	nop
 8019182:	bd80      	pop	{r7, pc}
 8019184:	200300d4 	.word	0x200300d4
 8019188:	20030834 	.word	0x20030834
 801918c:	20030940 	.word	0x20030940
 8019190:	20030a4c 	.word	0x20030a4c

08019194 <TL_THREAD_CliNotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_CliNotReceived( TL_EvtPacket_t * Notbuffer )
{
 8019194:	b580      	push	{r7, lr}
 8019196:	b084      	sub	sp, #16
 8019198:	af00      	add	r7, sp, #0
 801919a:	6078      	str	r0, [r7, #4]
  TL_CmdPacket_t* l_CliBuffer = (TL_CmdPacket_t*)Notbuffer;
 801919c:	687b      	ldr	r3, [r7, #4]
 801919e:	60fb      	str	r3, [r7, #12]
  uint8_t l_size = l_CliBuffer->cmdserial.cmd.plen;
 80191a0:	68fb      	ldr	r3, [r7, #12]
 80191a2:	7adb      	ldrb	r3, [r3, #11]
 80191a4:	72fb      	strb	r3, [r7, #11]

  /* WORKAROUND: if string to output is "> " then respond directly to M0 and do not output it */
  if (strcmp((const char *)l_CliBuffer->cmdserial.cmd.payload, "> ") != 0)
 80191a6:	68fb      	ldr	r3, [r7, #12]
 80191a8:	330c      	adds	r3, #12
 80191aa:	4906      	ldr	r1, [pc, #24]	; (80191c4 <TL_THREAD_CliNotReceived+0x30>)
 80191ac:	4618      	mov	r0, r3
 80191ae:	f7e6 ffe7 	bl	8000180 <strcmp>
 80191b2:	4603      	mov	r3, r0
 80191b4:	2b00      	cmp	r3, #0
 80191b6:	d101      	bne.n	80191bc <TL_THREAD_CliNotReceived+0x28>
//    HW_UART_Transmit_IT(CFG_CLI_UART, l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
#endif /*USAGE_OF_VCP */
  }
  else
  {
    Send_CLI_Ack_For_OT();
 80191b8:	f7ff ffbc 	bl	8019134 <Send_CLI_Ack_For_OT>
  }
}
 80191bc:	bf00      	nop
 80191be:	3710      	adds	r7, #16
 80191c0:	46bd      	mov	sp, r7
 80191c2:	bd80      	pop	{r7, pc}
 80191c4:	0801bfac 	.word	0x0801bfac

080191c8 <APP_THREAD_ProcessMsgM0ToM4>:
 * @brief Process the messages coming from the M0.
 * @param  None
 * @retval None
 */
void APP_THREAD_ProcessMsgM0ToM4(void)
{
 80191c8:	b580      	push	{r7, lr}
 80191ca:	af00      	add	r7, sp, #0
  if (CptReceiveMsgFromM0 != 0)
 80191cc:	4b09      	ldr	r3, [pc, #36]	; (80191f4 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 80191ce:	681b      	ldr	r3, [r3, #0]
 80191d0:	2b00      	cmp	r3, #0
 80191d2:	d00d      	beq.n	80191f0 <APP_THREAD_ProcessMsgM0ToM4+0x28>
  {
    /* If CptReceiveMsgFromM0 is > 1. it means that we did not serve all the events from the radio */
    if (CptReceiveMsgFromM0 > 1U)
 80191d4:	4b07      	ldr	r3, [pc, #28]	; (80191f4 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 80191d6:	681b      	ldr	r3, [r3, #0]
 80191d8:	2b01      	cmp	r3, #1
 80191da:	d904      	bls.n	80191e6 <APP_THREAD_ProcessMsgM0ToM4+0x1e>
    {
      APP_THREAD_Error(ERR_REC_MULTI_MSG_FROM_M0, 0);
 80191dc:	2100      	movs	r1, #0
 80191de:	2000      	movs	r0, #0
 80191e0:	f7fe ffd0 	bl	8018184 <APP_THREAD_Error>
 80191e4:	e001      	b.n	80191ea <APP_THREAD_ProcessMsgM0ToM4+0x22>
    }
    else
    {
      OpenThread_CallBack_Processing();
 80191e6:	f7fc fa91 	bl	801570c <OpenThread_CallBack_Processing>
    }
    /* Reset counter */
    CptReceiveMsgFromM0 = 0;
 80191ea:	4b02      	ldr	r3, [pc, #8]	; (80191f4 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 80191ec:	2200      	movs	r2, #0
 80191ee:	601a      	str	r2, [r3, #0]
  }
}
 80191f0:	bf00      	nop
 80191f2:	bd80      	pop	{r7, pc}
 80191f4:	2002774c 	.word	0x2002774c

080191f8 <LL_C2_EXTI_EnableEvent_32_63>:
{
 80191f8:	b480      	push	{r7}
 80191fa:	b083      	sub	sp, #12
 80191fc:	af00      	add	r7, sp, #0
 80191fe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8019200:	4b06      	ldr	r3, [pc, #24]	; (801921c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8019202:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8019206:	4905      	ldr	r1, [pc, #20]	; (801921c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8019208:	687b      	ldr	r3, [r7, #4]
 801920a:	4313      	orrs	r3, r2
 801920c:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8019210:	bf00      	nop
 8019212:	370c      	adds	r7, #12
 8019214:	46bd      	mov	sp, r7
 8019216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801921a:	4770      	bx	lr
 801921c:	58000800 	.word	0x58000800

08019220 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8019220:	b480      	push	{r7}
 8019222:	b083      	sub	sp, #12
 8019224:	af00      	add	r7, sp, #0
 8019226:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8019228:	4b05      	ldr	r3, [pc, #20]	; (8019240 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 801922a:	6a1a      	ldr	r2, [r3, #32]
 801922c:	4904      	ldr	r1, [pc, #16]	; (8019240 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 801922e:	687b      	ldr	r3, [r7, #4]
 8019230:	4313      	orrs	r3, r2
 8019232:	620b      	str	r3, [r1, #32]
}
 8019234:	bf00      	nop
 8019236:	370c      	adds	r7, #12
 8019238:	46bd      	mov	sp, r7
 801923a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801923e:	4770      	bx	lr
 8019240:	58000800 	.word	0x58000800

08019244 <LL_PWR_EnableBootC2>:
{
 8019244:	b480      	push	{r7}
 8019246:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8019248:	4b05      	ldr	r3, [pc, #20]	; (8019260 <LL_PWR_EnableBootC2+0x1c>)
 801924a:	68db      	ldr	r3, [r3, #12]
 801924c:	4a04      	ldr	r2, [pc, #16]	; (8019260 <LL_PWR_EnableBootC2+0x1c>)
 801924e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8019252:	60d3      	str	r3, [r2, #12]
}
 8019254:	bf00      	nop
 8019256:	46bd      	mov	sp, r7
 8019258:	f85d 7b04 	ldr.w	r7, [sp], #4
 801925c:	4770      	bx	lr
 801925e:	bf00      	nop
 8019260:	58000400 	.word	0x58000400

08019264 <LL_AHB3_GRP1_EnableClock>:
{
 8019264:	b480      	push	{r7}
 8019266:	b085      	sub	sp, #20
 8019268:	af00      	add	r7, sp, #0
 801926a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 801926c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019270:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019272:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8019276:	687b      	ldr	r3, [r7, #4]
 8019278:	4313      	orrs	r3, r2
 801927a:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 801927c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019280:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019282:	687b      	ldr	r3, [r7, #4]
 8019284:	4013      	ands	r3, r2
 8019286:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8019288:	68fb      	ldr	r3, [r7, #12]
}
 801928a:	bf00      	nop
 801928c:	3714      	adds	r7, #20
 801928e:	46bd      	mov	sp, r7
 8019290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019294:	4770      	bx	lr

08019296 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8019296:	b480      	push	{r7}
 8019298:	b085      	sub	sp, #20
 801929a:	af00      	add	r7, sp, #0
 801929c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 801929e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80192a2:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80192a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80192aa:	687b      	ldr	r3, [r7, #4]
 80192ac:	4313      	orrs	r3, r2
 80192ae:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 80192b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80192b6:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80192ba:	687b      	ldr	r3, [r7, #4]
 80192bc:	4013      	ands	r3, r2
 80192be:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80192c0:	68fb      	ldr	r3, [r7, #12]
}
 80192c2:	bf00      	nop
 80192c4:	3714      	adds	r7, #20
 80192c6:	46bd      	mov	sp, r7
 80192c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192cc:	4770      	bx	lr

080192ce <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 80192ce:	b480      	push	{r7}
 80192d0:	b083      	sub	sp, #12
 80192d2:	af00      	add	r7, sp, #0
 80192d4:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 80192d6:	687b      	ldr	r3, [r7, #4]
 80192d8:	681b      	ldr	r3, [r3, #0]
 80192da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80192de:	687b      	ldr	r3, [r7, #4]
 80192e0:	601a      	str	r2, [r3, #0]
}
 80192e2:	bf00      	nop
 80192e4:	370c      	adds	r7, #12
 80192e6:	46bd      	mov	sp, r7
 80192e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192ec:	4770      	bx	lr

080192ee <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 80192ee:	b480      	push	{r7}
 80192f0:	b083      	sub	sp, #12
 80192f2:	af00      	add	r7, sp, #0
 80192f4:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 80192f6:	687b      	ldr	r3, [r7, #4]
 80192f8:	681b      	ldr	r3, [r3, #0]
 80192fa:	f043 0201 	orr.w	r2, r3, #1
 80192fe:	687b      	ldr	r3, [r7, #4]
 8019300:	601a      	str	r2, [r3, #0]
}
 8019302:	bf00      	nop
 8019304:	370c      	adds	r7, #12
 8019306:	46bd      	mov	sp, r7
 8019308:	f85d 7b04 	ldr.w	r7, [sp], #4
 801930c:	4770      	bx	lr

0801930e <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 801930e:	b480      	push	{r7}
 8019310:	b083      	sub	sp, #12
 8019312:	af00      	add	r7, sp, #0
 8019314:	6078      	str	r0, [r7, #4]
 8019316:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8019318:	687b      	ldr	r3, [r7, #4]
 801931a:	685a      	ldr	r2, [r3, #4]
 801931c:	683b      	ldr	r3, [r7, #0]
 801931e:	041b      	lsls	r3, r3, #16
 8019320:	43db      	mvns	r3, r3
 8019322:	401a      	ands	r2, r3
 8019324:	687b      	ldr	r3, [r7, #4]
 8019326:	605a      	str	r2, [r3, #4]
}
 8019328:	bf00      	nop
 801932a:	370c      	adds	r7, #12
 801932c:	46bd      	mov	sp, r7
 801932e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019332:	4770      	bx	lr

08019334 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8019334:	b480      	push	{r7}
 8019336:	b083      	sub	sp, #12
 8019338:	af00      	add	r7, sp, #0
 801933a:	6078      	str	r0, [r7, #4]
 801933c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 801933e:	687b      	ldr	r3, [r7, #4]
 8019340:	685a      	ldr	r2, [r3, #4]
 8019342:	683b      	ldr	r3, [r7, #0]
 8019344:	041b      	lsls	r3, r3, #16
 8019346:	431a      	orrs	r2, r3
 8019348:	687b      	ldr	r3, [r7, #4]
 801934a:	605a      	str	r2, [r3, #4]
}
 801934c:	bf00      	nop
 801934e:	370c      	adds	r7, #12
 8019350:	46bd      	mov	sp, r7
 8019352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019356:	4770      	bx	lr

08019358 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8019358:	b480      	push	{r7}
 801935a:	b083      	sub	sp, #12
 801935c:	af00      	add	r7, sp, #0
 801935e:	6078      	str	r0, [r7, #4]
 8019360:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8019362:	687b      	ldr	r3, [r7, #4]
 8019364:	685a      	ldr	r2, [r3, #4]
 8019366:	683b      	ldr	r3, [r7, #0]
 8019368:	43db      	mvns	r3, r3
 801936a:	401a      	ands	r2, r3
 801936c:	687b      	ldr	r3, [r7, #4]
 801936e:	605a      	str	r2, [r3, #4]
}
 8019370:	bf00      	nop
 8019372:	370c      	adds	r7, #12
 8019374:	46bd      	mov	sp, r7
 8019376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801937a:	4770      	bx	lr

0801937c <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 801937c:	b480      	push	{r7}
 801937e:	b083      	sub	sp, #12
 8019380:	af00      	add	r7, sp, #0
 8019382:	6078      	str	r0, [r7, #4]
 8019384:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8019386:	687b      	ldr	r3, [r7, #4]
 8019388:	685a      	ldr	r2, [r3, #4]
 801938a:	683b      	ldr	r3, [r7, #0]
 801938c:	431a      	orrs	r2, r3
 801938e:	687b      	ldr	r3, [r7, #4]
 8019390:	605a      	str	r2, [r3, #4]
}
 8019392:	bf00      	nop
 8019394:	370c      	adds	r7, #12
 8019396:	46bd      	mov	sp, r7
 8019398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801939c:	4770      	bx	lr

0801939e <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 801939e:	b480      	push	{r7}
 80193a0:	b083      	sub	sp, #12
 80193a2:	af00      	add	r7, sp, #0
 80193a4:	6078      	str	r0, [r7, #4]
 80193a6:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80193a8:	687b      	ldr	r3, [r7, #4]
 80193aa:	683a      	ldr	r2, [r7, #0]
 80193ac:	609a      	str	r2, [r3, #8]
}
 80193ae:	bf00      	nop
 80193b0:	370c      	adds	r7, #12
 80193b2:	46bd      	mov	sp, r7
 80193b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193b8:	4770      	bx	lr

080193ba <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80193ba:	b480      	push	{r7}
 80193bc:	b083      	sub	sp, #12
 80193be:	af00      	add	r7, sp, #0
 80193c0:	6078      	str	r0, [r7, #4]
 80193c2:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80193c4:	683b      	ldr	r3, [r7, #0]
 80193c6:	041a      	lsls	r2, r3, #16
 80193c8:	687b      	ldr	r3, [r7, #4]
 80193ca:	609a      	str	r2, [r3, #8]
}
 80193cc:	bf00      	nop
 80193ce:	370c      	adds	r7, #12
 80193d0:	46bd      	mov	sp, r7
 80193d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193d6:	4770      	bx	lr

080193d8 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80193d8:	b480      	push	{r7}
 80193da:	b083      	sub	sp, #12
 80193dc:	af00      	add	r7, sp, #0
 80193de:	6078      	str	r0, [r7, #4]
 80193e0:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 80193e2:	687b      	ldr	r3, [r7, #4]
 80193e4:	68da      	ldr	r2, [r3, #12]
 80193e6:	683b      	ldr	r3, [r7, #0]
 80193e8:	4013      	ands	r3, r2
 80193ea:	683a      	ldr	r2, [r7, #0]
 80193ec:	429a      	cmp	r2, r3
 80193ee:	d101      	bne.n	80193f4 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 80193f0:	2301      	movs	r3, #1
 80193f2:	e000      	b.n	80193f6 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 80193f4:	2300      	movs	r3, #0
}
 80193f6:	4618      	mov	r0, r3
 80193f8:	370c      	adds	r7, #12
 80193fa:	46bd      	mov	sp, r7
 80193fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019400:	4770      	bx	lr

08019402 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8019402:	b480      	push	{r7}
 8019404:	b083      	sub	sp, #12
 8019406:	af00      	add	r7, sp, #0
 8019408:	6078      	str	r0, [r7, #4]
 801940a:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 801940c:	687b      	ldr	r3, [r7, #4]
 801940e:	69da      	ldr	r2, [r3, #28]
 8019410:	683b      	ldr	r3, [r7, #0]
 8019412:	4013      	ands	r3, r2
 8019414:	683a      	ldr	r2, [r7, #0]
 8019416:	429a      	cmp	r2, r3
 8019418:	d101      	bne.n	801941e <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 801941a:	2301      	movs	r3, #1
 801941c:	e000      	b.n	8019420 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 801941e:	2300      	movs	r3, #0
}
 8019420:	4618      	mov	r0, r3
 8019422:	370c      	adds	r7, #12
 8019424:	46bd      	mov	sp, r7
 8019426:	f85d 7b04 	ldr.w	r7, [sp], #4
 801942a:	4770      	bx	lr

0801942c <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 801942c:	b580      	push	{r7, lr}
 801942e:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8019430:	2102      	movs	r1, #2
 8019432:	482a      	ldr	r0, [pc, #168]	; (80194dc <HW_IPCC_Rx_Handler+0xb0>)
 8019434:	f7ff ffe5 	bl	8019402 <LL_C2_IPCC_IsActiveFlag_CHx>
 8019438:	4603      	mov	r3, r0
 801943a:	2b00      	cmp	r3, #0
 801943c:	d009      	beq.n	8019452 <HW_IPCC_Rx_Handler+0x26>
 801943e:	4b27      	ldr	r3, [pc, #156]	; (80194dc <HW_IPCC_Rx_Handler+0xb0>)
 8019440:	685b      	ldr	r3, [r3, #4]
 8019442:	43db      	mvns	r3, r3
 8019444:	f003 0302 	and.w	r3, r3, #2
 8019448:	2b00      	cmp	r3, #0
 801944a:	d002      	beq.n	8019452 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 801944c:	f000 f90a 	bl	8019664 <HW_IPCC_SYS_EvtHandler>
 8019450:	e041      	b.n	80194d6 <HW_IPCC_Rx_Handler+0xaa>
  {
    HW_IPCC_MAC_802_15_4_NotEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL ))
 8019452:	2104      	movs	r1, #4
 8019454:	4821      	ldr	r0, [pc, #132]	; (80194dc <HW_IPCC_Rx_Handler+0xb0>)
 8019456:	f7ff ffd4 	bl	8019402 <LL_C2_IPCC_IsActiveFlag_CHx>
 801945a:	4603      	mov	r3, r0
 801945c:	2b00      	cmp	r3, #0
 801945e:	d009      	beq.n	8019474 <HW_IPCC_Rx_Handler+0x48>
 8019460:	4b1e      	ldr	r3, [pc, #120]	; (80194dc <HW_IPCC_Rx_Handler+0xb0>)
 8019462:	685b      	ldr	r3, [r3, #4]
 8019464:	43db      	mvns	r3, r3
 8019466:	f003 0304 	and.w	r3, r3, #4
 801946a:	2b00      	cmp	r3, #0
 801946c:	d002      	beq.n	8019474 <HW_IPCC_Rx_Handler+0x48>
  {
    HW_IPCC_THREAD_NotEvtHandler();
 801946e:	f000 f953 	bl	8019718 <HW_IPCC_THREAD_NotEvtHandler>
 8019472:	e030      	b.n	80194d6 <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
 8019474:	2110      	movs	r1, #16
 8019476:	4819      	ldr	r0, [pc, #100]	; (80194dc <HW_IPCC_Rx_Handler+0xb0>)
 8019478:	f7ff ffc3 	bl	8019402 <LL_C2_IPCC_IsActiveFlag_CHx>
 801947c:	4603      	mov	r3, r0
 801947e:	2b00      	cmp	r3, #0
 8019480:	d009      	beq.n	8019496 <HW_IPCC_Rx_Handler+0x6a>
 8019482:	4b16      	ldr	r3, [pc, #88]	; (80194dc <HW_IPCC_Rx_Handler+0xb0>)
 8019484:	685b      	ldr	r3, [r3, #4]
 8019486:	43db      	mvns	r3, r3
 8019488:	f003 0310 	and.w	r3, r3, #16
 801948c:	2b00      	cmp	r3, #0
 801948e:	d002      	beq.n	8019496 <HW_IPCC_Rx_Handler+0x6a>
  {
    HW_IPCC_THREAD_CliNotEvtHandler();
 8019490:	f000 f94e 	bl	8019730 <HW_IPCC_THREAD_CliNotEvtHandler>
 8019494:	e01f      	b.n	80194d6 <HW_IPCC_Rx_Handler+0xaa>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8019496:	2101      	movs	r1, #1
 8019498:	4810      	ldr	r0, [pc, #64]	; (80194dc <HW_IPCC_Rx_Handler+0xb0>)
 801949a:	f7ff ffb2 	bl	8019402 <LL_C2_IPCC_IsActiveFlag_CHx>
 801949e:	4603      	mov	r3, r0
 80194a0:	2b00      	cmp	r3, #0
 80194a2:	d008      	beq.n	80194b6 <HW_IPCC_Rx_Handler+0x8a>
 80194a4:	4b0d      	ldr	r3, [pc, #52]	; (80194dc <HW_IPCC_Rx_Handler+0xb0>)
 80194a6:	685b      	ldr	r3, [r3, #4]
 80194a8:	f003 0301 	and.w	r3, r3, #1
 80194ac:	2b00      	cmp	r3, #0
 80194ae:	d102      	bne.n	80194b6 <HW_IPCC_Rx_Handler+0x8a>
  {
    HW_IPCC_BLE_EvtHandler();
 80194b0:	f000 f89c 	bl	80195ec <HW_IPCC_BLE_EvtHandler>
 80194b4:	e00f      	b.n	80194d6 <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 80194b6:	2108      	movs	r1, #8
 80194b8:	4808      	ldr	r0, [pc, #32]	; (80194dc <HW_IPCC_Rx_Handler+0xb0>)
 80194ba:	f7ff ffa2 	bl	8019402 <LL_C2_IPCC_IsActiveFlag_CHx>
 80194be:	4603      	mov	r3, r0
 80194c0:	2b00      	cmp	r3, #0
 80194c2:	d009      	beq.n	80194d8 <HW_IPCC_Rx_Handler+0xac>
 80194c4:	4b05      	ldr	r3, [pc, #20]	; (80194dc <HW_IPCC_Rx_Handler+0xb0>)
 80194c6:	685b      	ldr	r3, [r3, #4]
 80194c8:	43db      	mvns	r3, r3
 80194ca:	f003 0308 	and.w	r3, r3, #8
 80194ce:	2b00      	cmp	r3, #0
 80194d0:	d002      	beq.n	80194d8 <HW_IPCC_Rx_Handler+0xac>
  {
    HW_IPCC_TRACES_EvtHandler();
 80194d2:	f000 f979 	bl	80197c8 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80194d6:	bf00      	nop
 80194d8:	bf00      	nop
}
 80194da:	bd80      	pop	{r7, pc}
 80194dc:	58000c00 	.word	0x58000c00

080194e0 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 80194e0:	b580      	push	{r7, lr}
 80194e2:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80194e4:	2102      	movs	r1, #2
 80194e6:	482b      	ldr	r0, [pc, #172]	; (8019594 <HW_IPCC_Tx_Handler+0xb4>)
 80194e8:	f7ff ff76 	bl	80193d8 <LL_C1_IPCC_IsActiveFlag_CHx>
 80194ec:	4603      	mov	r3, r0
 80194ee:	2b00      	cmp	r3, #0
 80194f0:	d109      	bne.n	8019506 <HW_IPCC_Tx_Handler+0x26>
 80194f2:	4b28      	ldr	r3, [pc, #160]	; (8019594 <HW_IPCC_Tx_Handler+0xb4>)
 80194f4:	685b      	ldr	r3, [r3, #4]
 80194f6:	43db      	mvns	r3, r3
 80194f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80194fc:	2b00      	cmp	r3, #0
 80194fe:	d002      	beq.n	8019506 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8019500:	f000 f8a4 	bl	801964c <HW_IPCC_SYS_CmdEvtHandler>
 8019504:	e042      	b.n	801958c <HW_IPCC_Tx_Handler+0xac>
  {
    HW_IPCC_MAC_802_15_4_CmdEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
 8019506:	2104      	movs	r1, #4
 8019508:	4822      	ldr	r0, [pc, #136]	; (8019594 <HW_IPCC_Tx_Handler+0xb4>)
 801950a:	f7ff ff65 	bl	80193d8 <LL_C1_IPCC_IsActiveFlag_CHx>
 801950e:	4603      	mov	r3, r0
 8019510:	2b00      	cmp	r3, #0
 8019512:	d109      	bne.n	8019528 <HW_IPCC_Tx_Handler+0x48>
 8019514:	4b1f      	ldr	r3, [pc, #124]	; (8019594 <HW_IPCC_Tx_Handler+0xb4>)
 8019516:	685b      	ldr	r3, [r3, #4]
 8019518:	43db      	mvns	r3, r3
 801951a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801951e:	2b00      	cmp	r3, #0
 8019520:	d002      	beq.n	8019528 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_OT_CmdEvtHandler();
 8019522:	f000 f8ed 	bl	8019700 <HW_IPCC_OT_CmdEvtHandler>
 8019526:	e031      	b.n	801958c <HW_IPCC_Tx_Handler+0xac>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8019528:	2102      	movs	r1, #2
 801952a:	481a      	ldr	r0, [pc, #104]	; (8019594 <HW_IPCC_Tx_Handler+0xb4>)
 801952c:	f7ff ff54 	bl	80193d8 <LL_C1_IPCC_IsActiveFlag_CHx>
 8019530:	4603      	mov	r3, r0
 8019532:	2b00      	cmp	r3, #0
 8019534:	d109      	bne.n	801954a <HW_IPCC_Tx_Handler+0x6a>
 8019536:	4b17      	ldr	r3, [pc, #92]	; (8019594 <HW_IPCC_Tx_Handler+0xb4>)
 8019538:	685b      	ldr	r3, [r3, #4]
 801953a:	43db      	mvns	r3, r3
 801953c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8019540:	2b00      	cmp	r3, #0
 8019542:	d002      	beq.n	801954a <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8019544:	f000 f882 	bl	801964c <HW_IPCC_SYS_CmdEvtHandler>
 8019548:	e020      	b.n	801958c <HW_IPCC_Tx_Handler+0xac>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 801954a:	2108      	movs	r1, #8
 801954c:	4811      	ldr	r0, [pc, #68]	; (8019594 <HW_IPCC_Tx_Handler+0xb4>)
 801954e:	f7ff ff43 	bl	80193d8 <LL_C1_IPCC_IsActiveFlag_CHx>
 8019552:	4603      	mov	r3, r0
 8019554:	2b00      	cmp	r3, #0
 8019556:	d109      	bne.n	801956c <HW_IPCC_Tx_Handler+0x8c>
 8019558:	4b0e      	ldr	r3, [pc, #56]	; (8019594 <HW_IPCC_Tx_Handler+0xb4>)
 801955a:	685b      	ldr	r3, [r3, #4]
 801955c:	43db      	mvns	r3, r3
 801955e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8019562:	2b00      	cmp	r3, #0
 8019564:	d002      	beq.n	801956c <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_MM_FreeBufHandler();
 8019566:	f000 f911 	bl	801978c <HW_IPCC_MM_FreeBufHandler>
 801956a:	e00f      	b.n	801958c <HW_IPCC_Tx_Handler+0xac>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 801956c:	2120      	movs	r1, #32
 801956e:	4809      	ldr	r0, [pc, #36]	; (8019594 <HW_IPCC_Tx_Handler+0xb4>)
 8019570:	f7ff ff32 	bl	80193d8 <LL_C1_IPCC_IsActiveFlag_CHx>
 8019574:	4603      	mov	r3, r0
 8019576:	2b00      	cmp	r3, #0
 8019578:	d109      	bne.n	801958e <HW_IPCC_Tx_Handler+0xae>
 801957a:	4b06      	ldr	r3, [pc, #24]	; (8019594 <HW_IPCC_Tx_Handler+0xb4>)
 801957c:	685b      	ldr	r3, [r3, #4]
 801957e:	43db      	mvns	r3, r3
 8019580:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8019584:	2b00      	cmp	r3, #0
 8019586:	d002      	beq.n	801958e <HW_IPCC_Tx_Handler+0xae>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8019588:	f000 f83c 	bl	8019604 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 801958c:	bf00      	nop
 801958e:	bf00      	nop
}
 8019590:	bd80      	pop	{r7, pc}
 8019592:	bf00      	nop
 8019594:	58000c00 	.word	0x58000c00

08019598 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8019598:	b580      	push	{r7, lr}
 801959a:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 801959c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80195a0:	f7ff fe79 	bl	8019296 <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 80195a4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80195a8:	f7ff fe26 	bl	80191f8 <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 80195ac:	f44f 7000 	mov.w	r0, #512	; 0x200
 80195b0:	f7ff fe36 	bl	8019220 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 80195b4:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 80195b6:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 80195b8:	f7ff fe44 	bl	8019244 <LL_PWR_EnableBootC2>

  return;
 80195bc:	bf00      	nop
}
 80195be:	bd80      	pop	{r7, pc}

080195c0 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 80195c0:	b580      	push	{r7, lr}
 80195c2:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 80195c4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80195c8:	f7ff fe4c 	bl	8019264 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 80195cc:	4806      	ldr	r0, [pc, #24]	; (80195e8 <HW_IPCC_Init+0x28>)
 80195ce:	f7ff fe8e 	bl	80192ee <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 80195d2:	4805      	ldr	r0, [pc, #20]	; (80195e8 <HW_IPCC_Init+0x28>)
 80195d4:	f7ff fe7b 	bl	80192ce <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80195d8:	202c      	movs	r0, #44	; 0x2c
 80195da:	f7ee f9e8 	bl	80079ae <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80195de:	202d      	movs	r0, #45	; 0x2d
 80195e0:	f7ee f9e5 	bl	80079ae <HAL_NVIC_EnableIRQ>

  return;
 80195e4:	bf00      	nop
}
 80195e6:	bd80      	pop	{r7, pc}
 80195e8:	58000c00 	.word	0x58000c00

080195ec <HW_IPCC_BLE_EvtHandler>:

  return;
}

static void HW_IPCC_BLE_EvtHandler( void )
{
 80195ec:	b580      	push	{r7, lr}
 80195ee:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 80195f0:	f7fc ff54 	bl	801649c <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80195f4:	2101      	movs	r1, #1
 80195f6:	4802      	ldr	r0, [pc, #8]	; (8019600 <HW_IPCC_BLE_EvtHandler+0x14>)
 80195f8:	f7ff fed1 	bl	801939e <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80195fc:	bf00      	nop
}
 80195fe:	bd80      	pop	{r7, pc}
 8019600:	58000c00 	.word	0x58000c00

08019604 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8019604:	b580      	push	{r7, lr}
 8019606:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8019608:	2120      	movs	r1, #32
 801960a:	4803      	ldr	r0, [pc, #12]	; (8019618 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 801960c:	f7ff fe92 	bl	8019334 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8019610:	f7fc ff74 	bl	80164fc <HW_IPCC_BLE_AclDataAckNot>

  return;
 8019614:	bf00      	nop
}
 8019616:	bd80      	pop	{r7, pc}
 8019618:	58000c00 	.word	0x58000c00

0801961c <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 801961c:	b580      	push	{r7, lr}
 801961e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8019620:	2102      	movs	r1, #2
 8019622:	4802      	ldr	r0, [pc, #8]	; (801962c <HW_IPCC_SYS_Init+0x10>)
 8019624:	f7ff fe98 	bl	8019358 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8019628:	bf00      	nop
}
 801962a:	bd80      	pop	{r7, pc}
 801962c:	58000c00 	.word	0x58000c00

08019630 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8019630:	b580      	push	{r7, lr}
 8019632:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8019634:	2102      	movs	r1, #2
 8019636:	4804      	ldr	r0, [pc, #16]	; (8019648 <HW_IPCC_SYS_SendCmd+0x18>)
 8019638:	f7ff febf 	bl	80193ba <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 801963c:	2102      	movs	r1, #2
 801963e:	4802      	ldr	r0, [pc, #8]	; (8019648 <HW_IPCC_SYS_SendCmd+0x18>)
 8019640:	f7ff fe65 	bl	801930e <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8019644:	bf00      	nop
}
 8019646:	bd80      	pop	{r7, pc}
 8019648:	58000c00 	.word	0x58000c00

0801964c <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 801964c:	b580      	push	{r7, lr}
 801964e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8019650:	2102      	movs	r1, #2
 8019652:	4803      	ldr	r0, [pc, #12]	; (8019660 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8019654:	f7ff fe6e 	bl	8019334 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8019658:	f7fc ffa0 	bl	801659c <HW_IPCC_SYS_CmdEvtNot>

  return;
 801965c:	bf00      	nop
}
 801965e:	bd80      	pop	{r7, pc}
 8019660:	58000c00 	.word	0x58000c00

08019664 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8019664:	b580      	push	{r7, lr}
 8019666:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8019668:	f7fc ffae 	bl	80165c8 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 801966c:	2102      	movs	r1, #2
 801966e:	4802      	ldr	r0, [pc, #8]	; (8019678 <HW_IPCC_SYS_EvtHandler+0x14>)
 8019670:	f7ff fe95 	bl	801939e <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8019674:	bf00      	nop
}
 8019676:	bd80      	pop	{r7, pc}
 8019678:	58000c00 	.word	0x58000c00

0801967c <HW_IPCC_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void HW_IPCC_THREAD_Init( void )
{
 801967c:	b580      	push	{r7, lr}
 801967e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8019680:	2104      	movs	r1, #4
 8019682:	4804      	ldr	r0, [pc, #16]	; (8019694 <HW_IPCC_THREAD_Init+0x18>)
 8019684:	f7ff fe68 	bl	8019358 <LL_C1_IPCC_EnableReceiveChannel>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8019688:	2110      	movs	r1, #16
 801968a:	4802      	ldr	r0, [pc, #8]	; (8019694 <HW_IPCC_THREAD_Init+0x18>)
 801968c:	f7ff fe64 	bl	8019358 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8019690:	bf00      	nop
}
 8019692:	bd80      	pop	{r7, pc}
 8019694:	58000c00 	.word	0x58000c00

08019698 <HW_IPCC_OT_SendCmd>:

void HW_IPCC_OT_SendCmd( void )
{
 8019698:	b580      	push	{r7, lr}
 801969a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 801969c:	2104      	movs	r1, #4
 801969e:	4804      	ldr	r0, [pc, #16]	; (80196b0 <HW_IPCC_OT_SendCmd+0x18>)
 80196a0:	f7ff fe8b 	bl	80193ba <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 80196a4:	2104      	movs	r1, #4
 80196a6:	4802      	ldr	r0, [pc, #8]	; (80196b0 <HW_IPCC_OT_SendCmd+0x18>)
 80196a8:	f7ff fe31 	bl	801930e <LL_C1_IPCC_EnableTransmitChannel>

  return;
 80196ac:	bf00      	nop
}
 80196ae:	bd80      	pop	{r7, pc}
 80196b0:	58000c00 	.word	0x58000c00

080196b4 <HW_IPCC_CLI_SendCmd>:

void HW_IPCC_CLI_SendCmd( void )
{
 80196b4:	b580      	push	{r7, lr}
 80196b6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_CMD_CHANNEL );
 80196b8:	2110      	movs	r1, #16
 80196ba:	4802      	ldr	r0, [pc, #8]	; (80196c4 <HW_IPCC_CLI_SendCmd+0x10>)
 80196bc:	f7ff fe7d 	bl	80193ba <LL_C1_IPCC_SetFlag_CHx>

  return;
 80196c0:	bf00      	nop
}
 80196c2:	bd80      	pop	{r7, pc}
 80196c4:	58000c00 	.word	0x58000c00

080196c8 <HW_IPCC_THREAD_SendAck>:

void HW_IPCC_THREAD_SendAck( void )
{
 80196c8:	b580      	push	{r7, lr}
 80196ca:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 80196cc:	2104      	movs	r1, #4
 80196ce:	4804      	ldr	r0, [pc, #16]	; (80196e0 <HW_IPCC_THREAD_SendAck+0x18>)
 80196d0:	f7ff fe65 	bl	801939e <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 80196d4:	2104      	movs	r1, #4
 80196d6:	4802      	ldr	r0, [pc, #8]	; (80196e0 <HW_IPCC_THREAD_SendAck+0x18>)
 80196d8:	f7ff fe3e 	bl	8019358 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80196dc:	bf00      	nop
}
 80196de:	bd80      	pop	{r7, pc}
 80196e0:	58000c00 	.word	0x58000c00

080196e4 <HW_IPCC_THREAD_CliSendAck>:

void HW_IPCC_THREAD_CliSendAck( void )
{
 80196e4:	b580      	push	{r7, lr}
 80196e6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 80196e8:	2110      	movs	r1, #16
 80196ea:	4804      	ldr	r0, [pc, #16]	; (80196fc <HW_IPCC_THREAD_CliSendAck+0x18>)
 80196ec:	f7ff fe57 	bl	801939e <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 80196f0:	2110      	movs	r1, #16
 80196f2:	4802      	ldr	r0, [pc, #8]	; (80196fc <HW_IPCC_THREAD_CliSendAck+0x18>)
 80196f4:	f7ff fe30 	bl	8019358 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80196f8:	bf00      	nop
}
 80196fa:	bd80      	pop	{r7, pc}
 80196fc:	58000c00 	.word	0x58000c00

08019700 <HW_IPCC_OT_CmdEvtHandler>:

static void HW_IPCC_OT_CmdEvtHandler( void )
{
 8019700:	b580      	push	{r7, lr}
 8019702:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8019704:	2104      	movs	r1, #4
 8019706:	4803      	ldr	r0, [pc, #12]	; (8019714 <HW_IPCC_OT_CmdEvtHandler+0x14>)
 8019708:	f7ff fe14 	bl	8019334 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_OT_CmdEvtNot();
 801970c:	f7fc ffd2 	bl	80166b4 <HW_IPCC_OT_CmdEvtNot>

  return;
 8019710:	bf00      	nop
}
 8019712:	bd80      	pop	{r7, pc}
 8019714:	58000c00 	.word	0x58000c00

08019718 <HW_IPCC_THREAD_NotEvtHandler>:

static void HW_IPCC_THREAD_NotEvtHandler( void )
{
 8019718:	b580      	push	{r7, lr}
 801971a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 801971c:	2104      	movs	r1, #4
 801971e:	4803      	ldr	r0, [pc, #12]	; (801972c <HW_IPCC_THREAD_NotEvtHandler+0x14>)
 8019720:	f7ff fe2c 	bl	801937c <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_EvtNot();
 8019724:	f7fc ffd2 	bl	80166cc <HW_IPCC_THREAD_EvtNot>

  return;
 8019728:	bf00      	nop
}
 801972a:	bd80      	pop	{r7, pc}
 801972c:	58000c00 	.word	0x58000c00

08019730 <HW_IPCC_THREAD_CliNotEvtHandler>:

static void HW_IPCC_THREAD_CliNotEvtHandler( void )
{
 8019730:	b580      	push	{r7, lr}
 8019732:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8019734:	2110      	movs	r1, #16
 8019736:	4803      	ldr	r0, [pc, #12]	; (8019744 <HW_IPCC_THREAD_CliNotEvtHandler+0x14>)
 8019738:	f7ff fe20 	bl	801937c <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_CliEvtNot();
 801973c:	f7fc ffd2 	bl	80166e4 <HW_IPCC_THREAD_CliEvtNot>

  return;
 8019740:	bf00      	nop
}
 8019742:	bd80      	pop	{r7, pc}
 8019744:	58000c00 	.word	0x58000c00

08019748 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8019748:	b580      	push	{r7, lr}
 801974a:	b082      	sub	sp, #8
 801974c:	af00      	add	r7, sp, #0
 801974e:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8019750:	2108      	movs	r1, #8
 8019752:	480c      	ldr	r0, [pc, #48]	; (8019784 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8019754:	f7ff fe40 	bl	80193d8 <LL_C1_IPCC_IsActiveFlag_CHx>
 8019758:	4603      	mov	r3, r0
 801975a:	2b00      	cmp	r3, #0
 801975c:	d007      	beq.n	801976e <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 801975e:	4a0a      	ldr	r2, [pc, #40]	; (8019788 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8019760:	687b      	ldr	r3, [r7, #4]
 8019762:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8019764:	2108      	movs	r1, #8
 8019766:	4807      	ldr	r0, [pc, #28]	; (8019784 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8019768:	f7ff fdd1 	bl	801930e <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 801976c:	e006      	b.n	801977c <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 801976e:	687b      	ldr	r3, [r7, #4]
 8019770:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8019772:	2108      	movs	r1, #8
 8019774:	4803      	ldr	r0, [pc, #12]	; (8019784 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8019776:	f7ff fe20 	bl	80193ba <LL_C1_IPCC_SetFlag_CHx>
  return;
 801977a:	bf00      	nop
}
 801977c:	3708      	adds	r7, #8
 801977e:	46bd      	mov	sp, r7
 8019780:	bd80      	pop	{r7, pc}
 8019782:	bf00      	nop
 8019784:	58000c00 	.word	0x58000c00
 8019788:	20027850 	.word	0x20027850

0801978c <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 801978c:	b580      	push	{r7, lr}
 801978e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8019790:	2108      	movs	r1, #8
 8019792:	4806      	ldr	r0, [pc, #24]	; (80197ac <HW_IPCC_MM_FreeBufHandler+0x20>)
 8019794:	f7ff fdce 	bl	8019334 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8019798:	4b05      	ldr	r3, [pc, #20]	; (80197b0 <HW_IPCC_MM_FreeBufHandler+0x24>)
 801979a:	681b      	ldr	r3, [r3, #0]
 801979c:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 801979e:	2108      	movs	r1, #8
 80197a0:	4802      	ldr	r0, [pc, #8]	; (80197ac <HW_IPCC_MM_FreeBufHandler+0x20>)
 80197a2:	f7ff fe0a 	bl	80193ba <LL_C1_IPCC_SetFlag_CHx>

  return;
 80197a6:	bf00      	nop
}
 80197a8:	bd80      	pop	{r7, pc}
 80197aa:	bf00      	nop
 80197ac:	58000c00 	.word	0x58000c00
 80197b0:	20027850 	.word	0x20027850

080197b4 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 80197b4:	b580      	push	{r7, lr}
 80197b6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 80197b8:	2108      	movs	r1, #8
 80197ba:	4802      	ldr	r0, [pc, #8]	; (80197c4 <HW_IPCC_TRACES_Init+0x10>)
 80197bc:	f7ff fdcc 	bl	8019358 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80197c0:	bf00      	nop
}
 80197c2:	bd80      	pop	{r7, pc}
 80197c4:	58000c00 	.word	0x58000c00

080197c8 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 80197c8:	b580      	push	{r7, lr}
 80197ca:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 80197cc:	f7fd f81c 	bl	8016808 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 80197d0:	2108      	movs	r1, #8
 80197d2:	4802      	ldr	r0, [pc, #8]	; (80197dc <HW_IPCC_TRACES_EvtHandler+0x14>)
 80197d4:	f7ff fde3 	bl	801939e <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80197d8:	bf00      	nop
}
 80197da:	bd80      	pop	{r7, pc}
 80197dc:	58000c00 	.word	0x58000c00

080197e0 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80197e0:	b580      	push	{r7, lr}
 80197e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */
  
  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80197e4:	2200      	movs	r2, #0
 80197e6:	4912      	ldr	r1, [pc, #72]	; (8019830 <MX_USB_Device_Init+0x50>)
 80197e8:	4812      	ldr	r0, [pc, #72]	; (8019834 <MX_USB_Device_Init+0x54>)
 80197ea:	f7fd fb73 	bl	8016ed4 <USBD_Init>
 80197ee:	4603      	mov	r3, r0
 80197f0:	2b00      	cmp	r3, #0
 80197f2:	d001      	beq.n	80197f8 <MX_USB_Device_Init+0x18>
    Error_Handler();
 80197f4:	f7ea f8e2 	bl	80039bc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80197f8:	490f      	ldr	r1, [pc, #60]	; (8019838 <MX_USB_Device_Init+0x58>)
 80197fa:	480e      	ldr	r0, [pc, #56]	; (8019834 <MX_USB_Device_Init+0x54>)
 80197fc:	f7fd fb9a 	bl	8016f34 <USBD_RegisterClass>
 8019800:	4603      	mov	r3, r0
 8019802:	2b00      	cmp	r3, #0
 8019804:	d001      	beq.n	801980a <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8019806:	f7ea f8d9 	bl	80039bc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 801980a:	490c      	ldr	r1, [pc, #48]	; (801983c <MX_USB_Device_Init+0x5c>)
 801980c:	4809      	ldr	r0, [pc, #36]	; (8019834 <MX_USB_Device_Init+0x54>)
 801980e:	f7fd faeb 	bl	8016de8 <USBD_CDC_RegisterInterface>
 8019812:	4603      	mov	r3, r0
 8019814:	2b00      	cmp	r3, #0
 8019816:	d001      	beq.n	801981c <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8019818:	f7ea f8d0 	bl	80039bc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 801981c:	4805      	ldr	r0, [pc, #20]	; (8019834 <MX_USB_Device_Init+0x54>)
 801981e:	f7fd fbb0 	bl	8016f82 <USBD_Start>
 8019822:	4603      	mov	r3, r0
 8019824:	2b00      	cmp	r3, #0
 8019826:	d001      	beq.n	801982c <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8019828:	f7ea f8c8 	bl	80039bc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */
  
  /* USER CODE END USB_Device_Init_PostTreatment */
}
 801982c:	bf00      	nop
 801982e:	bd80      	pop	{r7, pc}
 8019830:	20000220 	.word	0x20000220
 8019834:	20028a28 	.word	0x20028a28
 8019838:	20000094 	.word	0x20000094
 801983c:	2000020c 	.word	0x2000020c

08019840 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8019840:	b580      	push	{r7, lr}
 8019842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8019844:	2200      	movs	r2, #0
 8019846:	4905      	ldr	r1, [pc, #20]	; (801985c <CDC_Init_FS+0x1c>)
 8019848:	4805      	ldr	r0, [pc, #20]	; (8019860 <CDC_Init_FS+0x20>)
 801984a:	f7fd fae2 	bl	8016e12 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801984e:	4905      	ldr	r1, [pc, #20]	; (8019864 <CDC_Init_FS+0x24>)
 8019850:	4803      	ldr	r0, [pc, #12]	; (8019860 <CDC_Init_FS+0x20>)
 8019852:	f7fd fafc 	bl	8016e4e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8019856:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8019858:	4618      	mov	r0, r3
 801985a:	bd80      	pop	{r7, pc}
 801985c:	200294f8 	.word	0x200294f8
 8019860:	20028a28 	.word	0x20028a28
 8019864:	20028cf8 	.word	0x20028cf8

08019868 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8019868:	b480      	push	{r7}
 801986a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801986c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801986e:	4618      	mov	r0, r3
 8019870:	46bd      	mov	sp, r7
 8019872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019876:	4770      	bx	lr

08019878 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8019878:	b480      	push	{r7}
 801987a:	b083      	sub	sp, #12
 801987c:	af00      	add	r7, sp, #0
 801987e:	4603      	mov	r3, r0
 8019880:	6039      	str	r1, [r7, #0]
 8019882:	71fb      	strb	r3, [r7, #7]
 8019884:	4613      	mov	r3, r2
 8019886:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8019888:	79fb      	ldrb	r3, [r7, #7]
 801988a:	2b23      	cmp	r3, #35	; 0x23
 801988c:	d84a      	bhi.n	8019924 <CDC_Control_FS+0xac>
 801988e:	a201      	add	r2, pc, #4	; (adr r2, 8019894 <CDC_Control_FS+0x1c>)
 8019890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019894:	08019925 	.word	0x08019925
 8019898:	08019925 	.word	0x08019925
 801989c:	08019925 	.word	0x08019925
 80198a0:	08019925 	.word	0x08019925
 80198a4:	08019925 	.word	0x08019925
 80198a8:	08019925 	.word	0x08019925
 80198ac:	08019925 	.word	0x08019925
 80198b0:	08019925 	.word	0x08019925
 80198b4:	08019925 	.word	0x08019925
 80198b8:	08019925 	.word	0x08019925
 80198bc:	08019925 	.word	0x08019925
 80198c0:	08019925 	.word	0x08019925
 80198c4:	08019925 	.word	0x08019925
 80198c8:	08019925 	.word	0x08019925
 80198cc:	08019925 	.word	0x08019925
 80198d0:	08019925 	.word	0x08019925
 80198d4:	08019925 	.word	0x08019925
 80198d8:	08019925 	.word	0x08019925
 80198dc:	08019925 	.word	0x08019925
 80198e0:	08019925 	.word	0x08019925
 80198e4:	08019925 	.word	0x08019925
 80198e8:	08019925 	.word	0x08019925
 80198ec:	08019925 	.word	0x08019925
 80198f0:	08019925 	.word	0x08019925
 80198f4:	08019925 	.word	0x08019925
 80198f8:	08019925 	.word	0x08019925
 80198fc:	08019925 	.word	0x08019925
 8019900:	08019925 	.word	0x08019925
 8019904:	08019925 	.word	0x08019925
 8019908:	08019925 	.word	0x08019925
 801990c:	08019925 	.word	0x08019925
 8019910:	08019925 	.word	0x08019925
 8019914:	08019925 	.word	0x08019925
 8019918:	08019925 	.word	0x08019925
 801991c:	08019925 	.word	0x08019925
 8019920:	08019925 	.word	0x08019925
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8019924:	bf00      	nop
  }

  return (USBD_OK);
 8019926:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8019928:	4618      	mov	r0, r3
 801992a:	370c      	adds	r7, #12
 801992c:	46bd      	mov	sp, r7
 801992e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019932:	4770      	bx	lr

08019934 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8019934:	b580      	push	{r7, lr}
 8019936:	b082      	sub	sp, #8
 8019938:	af00      	add	r7, sp, #0
 801993a:	6078      	str	r0, [r7, #4]
 801993c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if(*Len == 6){
 801993e:	683b      	ldr	r3, [r7, #0]
 8019940:	681b      	ldr	r3, [r3, #0]
 8019942:	2b06      	cmp	r3, #6
 8019944:	d133      	bne.n	80199ae <CDC_Receive_FS+0x7a>
	  receivedMsgPacket.len = 6;
 8019946:	4b2a      	ldr	r3, [pc, #168]	; (80199f0 <CDC_Receive_FS+0xbc>)
 8019948:	2206      	movs	r2, #6
 801994a:	701a      	strb	r2, [r3, #0]

	  receivedMsgPacket.buf[0] = Buf[0] - '0';
 801994c:	687b      	ldr	r3, [r7, #4]
 801994e:	781b      	ldrb	r3, [r3, #0]
 8019950:	3b30      	subs	r3, #48	; 0x30
 8019952:	b2da      	uxtb	r2, r3
 8019954:	4b26      	ldr	r3, [pc, #152]	; (80199f0 <CDC_Receive_FS+0xbc>)
 8019956:	705a      	strb	r2, [r3, #1]
	  receivedMsgPacket.buf[1] = Buf[1] - '0';
 8019958:	687b      	ldr	r3, [r7, #4]
 801995a:	3301      	adds	r3, #1
 801995c:	781b      	ldrb	r3, [r3, #0]
 801995e:	3b30      	subs	r3, #48	; 0x30
 8019960:	b2da      	uxtb	r2, r3
 8019962:	4b23      	ldr	r3, [pc, #140]	; (80199f0 <CDC_Receive_FS+0xbc>)
 8019964:	709a      	strb	r2, [r3, #2]
	  receivedMsgPacket.buf[2] = Buf[2] - '0';
 8019966:	687b      	ldr	r3, [r7, #4]
 8019968:	3302      	adds	r3, #2
 801996a:	781b      	ldrb	r3, [r3, #0]
 801996c:	3b30      	subs	r3, #48	; 0x30
 801996e:	b2da      	uxtb	r2, r3
 8019970:	4b1f      	ldr	r3, [pc, #124]	; (80199f0 <CDC_Receive_FS+0xbc>)
 8019972:	70da      	strb	r2, [r3, #3]
	  receivedMsgPacket.buf[3] = Buf[3] - '0';
 8019974:	687b      	ldr	r3, [r7, #4]
 8019976:	3303      	adds	r3, #3
 8019978:	781b      	ldrb	r3, [r3, #0]
 801997a:	3b30      	subs	r3, #48	; 0x30
 801997c:	b2da      	uxtb	r2, r3
 801997e:	4b1c      	ldr	r3, [pc, #112]	; (80199f0 <CDC_Receive_FS+0xbc>)
 8019980:	711a      	strb	r2, [r3, #4]
	  receivedMsgPacket.buf[4] = Buf[4] - '0';
 8019982:	687b      	ldr	r3, [r7, #4]
 8019984:	3304      	adds	r3, #4
 8019986:	781b      	ldrb	r3, [r3, #0]
 8019988:	3b30      	subs	r3, #48	; 0x30
 801998a:	b2da      	uxtb	r2, r3
 801998c:	4b18      	ldr	r3, [pc, #96]	; (80199f0 <CDC_Receive_FS+0xbc>)
 801998e:	715a      	strb	r2, [r3, #5]
	  receivedMsgPacket.buf[5]  = Buf[5] - '0';
 8019990:	687b      	ldr	r3, [r7, #4]
 8019992:	3305      	adds	r3, #5
 8019994:	781b      	ldrb	r3, [r3, #0]
 8019996:	3b30      	subs	r3, #48	; 0x30
 8019998:	b2da      	uxtb	r2, r3
 801999a:	4b15      	ldr	r3, [pc, #84]	; (80199f0 <CDC_Receive_FS+0xbc>)
 801999c:	719a      	strb	r2, [r3, #6]

	  osMessageQueuePut(msgPasssingUSB_QueueHandle, &receivedMsgPacket, 0, 0);
 801999e:	4b15      	ldr	r3, [pc, #84]	; (80199f4 <CDC_Receive_FS+0xc0>)
 80199a0:	6818      	ldr	r0, [r3, #0]
 80199a2:	2300      	movs	r3, #0
 80199a4:	2200      	movs	r2, #0
 80199a6:	4912      	ldr	r1, [pc, #72]	; (80199f0 <CDC_Receive_FS+0xbc>)
 80199a8:	f7f7 fb2e 	bl	8011008 <osMessageQueuePut>
 80199ac:	e013      	b.n	80199d6 <CDC_Receive_FS+0xa2>

//	  APP_THREAD_SendCoapMsg(&logReceivedMessage, sizeof(struct LogMessage), &multicastAddr, "togLog", NO_ACK, OT_COAP_CODE_PUT, 1U);
  }
  else if(*Len == 4){
 80199ae:	683b      	ldr	r3, [r7, #0]
 80199b0:	681b      	ldr	r3, [r3, #0]
 80199b2:	2b04      	cmp	r3, #4
 80199b4:	d10f      	bne.n	80199d6 <CDC_Receive_FS+0xa2>
	  receivedMsgPacket.len = 1;
 80199b6:	4b0e      	ldr	r3, [pc, #56]	; (80199f0 <CDC_Receive_FS+0xbc>)
 80199b8:	2201      	movs	r2, #1
 80199ba:	701a      	strb	r2, [r3, #0]

	  receivedMsgPacket.buf[0] = Buf[0] - '0';
 80199bc:	687b      	ldr	r3, [r7, #4]
 80199be:	781b      	ldrb	r3, [r3, #0]
 80199c0:	3b30      	subs	r3, #48	; 0x30
 80199c2:	b2da      	uxtb	r2, r3
 80199c4:	4b0a      	ldr	r3, [pc, #40]	; (80199f0 <CDC_Receive_FS+0xbc>)
 80199c6:	705a      	strb	r2, [r3, #1]

	  osMessageQueuePut(msgPasssingUSB_QueueHandle, &receivedMsgPacket, 0, 0);
 80199c8:	4b0a      	ldr	r3, [pc, #40]	; (80199f4 <CDC_Receive_FS+0xc0>)
 80199ca:	6818      	ldr	r0, [r3, #0]
 80199cc:	2300      	movs	r3, #0
 80199ce:	2200      	movs	r2, #0
 80199d0:	4907      	ldr	r1, [pc, #28]	; (80199f0 <CDC_Receive_FS+0xbc>)
 80199d2:	f7f7 fb19 	bl	8011008 <osMessageQueuePut>

//	  APP_THREAD_SendCoapMsg(&lightsSimpleReceivedMessage, sizeof(lightsSimpleReceivedMessage), &multicastAddr, "lightS", NO_ACK, OT_COAP_CODE_PUT, 1U);
  }
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80199d6:	6879      	ldr	r1, [r7, #4]
 80199d8:	4807      	ldr	r0, [pc, #28]	; (80199f8 <CDC_Receive_FS+0xc4>)
 80199da:	f7fd fa38 	bl	8016e4e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80199de:	4806      	ldr	r0, [pc, #24]	; (80199f8 <CDC_Receive_FS+0xc4>)
 80199e0:	f7fd fa4e 	bl	8016e80 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80199e4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80199e6:	4618      	mov	r0, r3
 80199e8:	3708      	adds	r7, #8
 80199ea:	46bd      	mov	sp, r7
 80199ec:	bd80      	pop	{r7, pc}
 80199ee:	bf00      	nop
 80199f0:	20029cf8 	.word	0x20029cf8
 80199f4:	20027c4c 	.word	0x20027c4c
 80199f8:	20028a28 	.word	0x20028a28

080199fc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80199fc:	b480      	push	{r7}
 80199fe:	b087      	sub	sp, #28
 8019a00:	af00      	add	r7, sp, #0
 8019a02:	60f8      	str	r0, [r7, #12]
 8019a04:	60b9      	str	r1, [r7, #8]
 8019a06:	4613      	mov	r3, r2
 8019a08:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8019a0a:	2300      	movs	r3, #0
 8019a0c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8019a0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8019a12:	4618      	mov	r0, r3
 8019a14:	371c      	adds	r7, #28
 8019a16:	46bd      	mov	sp, r7
 8019a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a1c:	4770      	bx	lr
	...

08019a20 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019a20:	b480      	push	{r7}
 8019a22:	b083      	sub	sp, #12
 8019a24:	af00      	add	r7, sp, #0
 8019a26:	4603      	mov	r3, r0
 8019a28:	6039      	str	r1, [r7, #0]
 8019a2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8019a2c:	683b      	ldr	r3, [r7, #0]
 8019a2e:	2212      	movs	r2, #18
 8019a30:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8019a32:	4b03      	ldr	r3, [pc, #12]	; (8019a40 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8019a34:	4618      	mov	r0, r3
 8019a36:	370c      	adds	r7, #12
 8019a38:	46bd      	mov	sp, r7
 8019a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a3e:	4770      	bx	lr
 8019a40:	20000240 	.word	0x20000240

08019a44 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019a44:	b480      	push	{r7}
 8019a46:	b083      	sub	sp, #12
 8019a48:	af00      	add	r7, sp, #0
 8019a4a:	4603      	mov	r3, r0
 8019a4c:	6039      	str	r1, [r7, #0]
 8019a4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8019a50:	683b      	ldr	r3, [r7, #0]
 8019a52:	2204      	movs	r2, #4
 8019a54:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8019a56:	4b03      	ldr	r3, [pc, #12]	; (8019a64 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8019a58:	4618      	mov	r0, r3
 8019a5a:	370c      	adds	r7, #12
 8019a5c:	46bd      	mov	sp, r7
 8019a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a62:	4770      	bx	lr
 8019a64:	20000254 	.word	0x20000254

08019a68 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019a68:	b580      	push	{r7, lr}
 8019a6a:	b082      	sub	sp, #8
 8019a6c:	af00      	add	r7, sp, #0
 8019a6e:	4603      	mov	r3, r0
 8019a70:	6039      	str	r1, [r7, #0]
 8019a72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8019a74:	79fb      	ldrb	r3, [r7, #7]
 8019a76:	2b00      	cmp	r3, #0
 8019a78:	d105      	bne.n	8019a86 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8019a7a:	683a      	ldr	r2, [r7, #0]
 8019a7c:	4907      	ldr	r1, [pc, #28]	; (8019a9c <USBD_CDC_ProductStrDescriptor+0x34>)
 8019a7e:	4808      	ldr	r0, [pc, #32]	; (8019aa0 <USBD_CDC_ProductStrDescriptor+0x38>)
 8019a80:	f7fe fa76 	bl	8017f70 <USBD_GetString>
 8019a84:	e004      	b.n	8019a90 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8019a86:	683a      	ldr	r2, [r7, #0]
 8019a88:	4904      	ldr	r1, [pc, #16]	; (8019a9c <USBD_CDC_ProductStrDescriptor+0x34>)
 8019a8a:	4805      	ldr	r0, [pc, #20]	; (8019aa0 <USBD_CDC_ProductStrDescriptor+0x38>)
 8019a8c:	f7fe fa70 	bl	8017f70 <USBD_GetString>
  }
  return USBD_StrDesc;
 8019a90:	4b02      	ldr	r3, [pc, #8]	; (8019a9c <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8019a92:	4618      	mov	r0, r3
 8019a94:	3708      	adds	r7, #8
 8019a96:	46bd      	mov	sp, r7
 8019a98:	bd80      	pop	{r7, pc}
 8019a9a:	bf00      	nop
 8019a9c:	20029d04 	.word	0x20029d04
 8019aa0:	0801bfb0 	.word	0x0801bfb0

08019aa4 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019aa4:	b580      	push	{r7, lr}
 8019aa6:	b082      	sub	sp, #8
 8019aa8:	af00      	add	r7, sp, #0
 8019aaa:	4603      	mov	r3, r0
 8019aac:	6039      	str	r1, [r7, #0]
 8019aae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8019ab0:	683a      	ldr	r2, [r7, #0]
 8019ab2:	4904      	ldr	r1, [pc, #16]	; (8019ac4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8019ab4:	4804      	ldr	r0, [pc, #16]	; (8019ac8 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8019ab6:	f7fe fa5b 	bl	8017f70 <USBD_GetString>
  return USBD_StrDesc;
 8019aba:	4b02      	ldr	r3, [pc, #8]	; (8019ac4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8019abc:	4618      	mov	r0, r3
 8019abe:	3708      	adds	r7, #8
 8019ac0:	46bd      	mov	sp, r7
 8019ac2:	bd80      	pop	{r7, pc}
 8019ac4:	20029d04 	.word	0x20029d04
 8019ac8:	0801bfc8 	.word	0x0801bfc8

08019acc <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019acc:	b580      	push	{r7, lr}
 8019ace:	b082      	sub	sp, #8
 8019ad0:	af00      	add	r7, sp, #0
 8019ad2:	4603      	mov	r3, r0
 8019ad4:	6039      	str	r1, [r7, #0]
 8019ad6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8019ad8:	683b      	ldr	r3, [r7, #0]
 8019ada:	221a      	movs	r2, #26
 8019adc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8019ade:	f000 f843 	bl	8019b68 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */
  
  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8019ae2:	4b02      	ldr	r3, [pc, #8]	; (8019aec <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8019ae4:	4618      	mov	r0, r3
 8019ae6:	3708      	adds	r7, #8
 8019ae8:	46bd      	mov	sp, r7
 8019aea:	bd80      	pop	{r7, pc}
 8019aec:	20000258 	.word	0x20000258

08019af0 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019af0:	b580      	push	{r7, lr}
 8019af2:	b082      	sub	sp, #8
 8019af4:	af00      	add	r7, sp, #0
 8019af6:	4603      	mov	r3, r0
 8019af8:	6039      	str	r1, [r7, #0]
 8019afa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8019afc:	79fb      	ldrb	r3, [r7, #7]
 8019afe:	2b00      	cmp	r3, #0
 8019b00:	d105      	bne.n	8019b0e <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8019b02:	683a      	ldr	r2, [r7, #0]
 8019b04:	4907      	ldr	r1, [pc, #28]	; (8019b24 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8019b06:	4808      	ldr	r0, [pc, #32]	; (8019b28 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8019b08:	f7fe fa32 	bl	8017f70 <USBD_GetString>
 8019b0c:	e004      	b.n	8019b18 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8019b0e:	683a      	ldr	r2, [r7, #0]
 8019b10:	4904      	ldr	r1, [pc, #16]	; (8019b24 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8019b12:	4805      	ldr	r0, [pc, #20]	; (8019b28 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8019b14:	f7fe fa2c 	bl	8017f70 <USBD_GetString>
  }
  return USBD_StrDesc;
 8019b18:	4b02      	ldr	r3, [pc, #8]	; (8019b24 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8019b1a:	4618      	mov	r0, r3
 8019b1c:	3708      	adds	r7, #8
 8019b1e:	46bd      	mov	sp, r7
 8019b20:	bd80      	pop	{r7, pc}
 8019b22:	bf00      	nop
 8019b24:	20029d04 	.word	0x20029d04
 8019b28:	0801bfdc 	.word	0x0801bfdc

08019b2c <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019b2c:	b580      	push	{r7, lr}
 8019b2e:	b082      	sub	sp, #8
 8019b30:	af00      	add	r7, sp, #0
 8019b32:	4603      	mov	r3, r0
 8019b34:	6039      	str	r1, [r7, #0]
 8019b36:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8019b38:	79fb      	ldrb	r3, [r7, #7]
 8019b3a:	2b00      	cmp	r3, #0
 8019b3c:	d105      	bne.n	8019b4a <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8019b3e:	683a      	ldr	r2, [r7, #0]
 8019b40:	4907      	ldr	r1, [pc, #28]	; (8019b60 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8019b42:	4808      	ldr	r0, [pc, #32]	; (8019b64 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8019b44:	f7fe fa14 	bl	8017f70 <USBD_GetString>
 8019b48:	e004      	b.n	8019b54 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8019b4a:	683a      	ldr	r2, [r7, #0]
 8019b4c:	4904      	ldr	r1, [pc, #16]	; (8019b60 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8019b4e:	4805      	ldr	r0, [pc, #20]	; (8019b64 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8019b50:	f7fe fa0e 	bl	8017f70 <USBD_GetString>
  }
  return USBD_StrDesc;
 8019b54:	4b02      	ldr	r3, [pc, #8]	; (8019b60 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8019b56:	4618      	mov	r0, r3
 8019b58:	3708      	adds	r7, #8
 8019b5a:	46bd      	mov	sp, r7
 8019b5c:	bd80      	pop	{r7, pc}
 8019b5e:	bf00      	nop
 8019b60:	20029d04 	.word	0x20029d04
 8019b64:	0801bfe8 	.word	0x0801bfe8

08019b68 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8019b68:	b580      	push	{r7, lr}
 8019b6a:	b084      	sub	sp, #16
 8019b6c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8019b6e:	4b0f      	ldr	r3, [pc, #60]	; (8019bac <Get_SerialNum+0x44>)
 8019b70:	681b      	ldr	r3, [r3, #0]
 8019b72:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8019b74:	4b0e      	ldr	r3, [pc, #56]	; (8019bb0 <Get_SerialNum+0x48>)
 8019b76:	681b      	ldr	r3, [r3, #0]
 8019b78:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8019b7a:	4b0e      	ldr	r3, [pc, #56]	; (8019bb4 <Get_SerialNum+0x4c>)
 8019b7c:	681b      	ldr	r3, [r3, #0]
 8019b7e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8019b80:	68fa      	ldr	r2, [r7, #12]
 8019b82:	687b      	ldr	r3, [r7, #4]
 8019b84:	4413      	add	r3, r2
 8019b86:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8019b88:	68fb      	ldr	r3, [r7, #12]
 8019b8a:	2b00      	cmp	r3, #0
 8019b8c:	d009      	beq.n	8019ba2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8019b8e:	2208      	movs	r2, #8
 8019b90:	4909      	ldr	r1, [pc, #36]	; (8019bb8 <Get_SerialNum+0x50>)
 8019b92:	68f8      	ldr	r0, [r7, #12]
 8019b94:	f000 f814 	bl	8019bc0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8019b98:	2204      	movs	r2, #4
 8019b9a:	4908      	ldr	r1, [pc, #32]	; (8019bbc <Get_SerialNum+0x54>)
 8019b9c:	68b8      	ldr	r0, [r7, #8]
 8019b9e:	f000 f80f 	bl	8019bc0 <IntToUnicode>
  }
}
 8019ba2:	bf00      	nop
 8019ba4:	3710      	adds	r7, #16
 8019ba6:	46bd      	mov	sp, r7
 8019ba8:	bd80      	pop	{r7, pc}
 8019baa:	bf00      	nop
 8019bac:	1fff7590 	.word	0x1fff7590
 8019bb0:	1fff7594 	.word	0x1fff7594
 8019bb4:	1fff7598 	.word	0x1fff7598
 8019bb8:	2000025a 	.word	0x2000025a
 8019bbc:	2000026a 	.word	0x2000026a

08019bc0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8019bc0:	b480      	push	{r7}
 8019bc2:	b087      	sub	sp, #28
 8019bc4:	af00      	add	r7, sp, #0
 8019bc6:	60f8      	str	r0, [r7, #12]
 8019bc8:	60b9      	str	r1, [r7, #8]
 8019bca:	4613      	mov	r3, r2
 8019bcc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8019bce:	2300      	movs	r3, #0
 8019bd0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8019bd2:	2300      	movs	r3, #0
 8019bd4:	75fb      	strb	r3, [r7, #23]
 8019bd6:	e027      	b.n	8019c28 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8019bd8:	68fb      	ldr	r3, [r7, #12]
 8019bda:	0f1b      	lsrs	r3, r3, #28
 8019bdc:	2b09      	cmp	r3, #9
 8019bde:	d80b      	bhi.n	8019bf8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8019be0:	68fb      	ldr	r3, [r7, #12]
 8019be2:	0f1b      	lsrs	r3, r3, #28
 8019be4:	b2da      	uxtb	r2, r3
 8019be6:	7dfb      	ldrb	r3, [r7, #23]
 8019be8:	005b      	lsls	r3, r3, #1
 8019bea:	4619      	mov	r1, r3
 8019bec:	68bb      	ldr	r3, [r7, #8]
 8019bee:	440b      	add	r3, r1
 8019bf0:	3230      	adds	r2, #48	; 0x30
 8019bf2:	b2d2      	uxtb	r2, r2
 8019bf4:	701a      	strb	r2, [r3, #0]
 8019bf6:	e00a      	b.n	8019c0e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8019bf8:	68fb      	ldr	r3, [r7, #12]
 8019bfa:	0f1b      	lsrs	r3, r3, #28
 8019bfc:	b2da      	uxtb	r2, r3
 8019bfe:	7dfb      	ldrb	r3, [r7, #23]
 8019c00:	005b      	lsls	r3, r3, #1
 8019c02:	4619      	mov	r1, r3
 8019c04:	68bb      	ldr	r3, [r7, #8]
 8019c06:	440b      	add	r3, r1
 8019c08:	3237      	adds	r2, #55	; 0x37
 8019c0a:	b2d2      	uxtb	r2, r2
 8019c0c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8019c0e:	68fb      	ldr	r3, [r7, #12]
 8019c10:	011b      	lsls	r3, r3, #4
 8019c12:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8019c14:	7dfb      	ldrb	r3, [r7, #23]
 8019c16:	005b      	lsls	r3, r3, #1
 8019c18:	3301      	adds	r3, #1
 8019c1a:	68ba      	ldr	r2, [r7, #8]
 8019c1c:	4413      	add	r3, r2
 8019c1e:	2200      	movs	r2, #0
 8019c20:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8019c22:	7dfb      	ldrb	r3, [r7, #23]
 8019c24:	3301      	adds	r3, #1
 8019c26:	75fb      	strb	r3, [r7, #23]
 8019c28:	7dfa      	ldrb	r2, [r7, #23]
 8019c2a:	79fb      	ldrb	r3, [r7, #7]
 8019c2c:	429a      	cmp	r2, r3
 8019c2e:	d3d3      	bcc.n	8019bd8 <IntToUnicode+0x18>
  }
}
 8019c30:	bf00      	nop
 8019c32:	371c      	adds	r7, #28
 8019c34:	46bd      	mov	sp, r7
 8019c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c3a:	4770      	bx	lr

08019c3c <LL_AHB2_GRP1_EnableClock>:
{
 8019c3c:	b480      	push	{r7}
 8019c3e:	b085      	sub	sp, #20
 8019c40:	af00      	add	r7, sp, #0
 8019c42:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8019c44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019c48:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8019c4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8019c4e:	687b      	ldr	r3, [r7, #4]
 8019c50:	4313      	orrs	r3, r2
 8019c52:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8019c54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019c58:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8019c5a:	687b      	ldr	r3, [r7, #4]
 8019c5c:	4013      	ands	r3, r2
 8019c5e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8019c60:	68fb      	ldr	r3, [r7, #12]
}
 8019c62:	bf00      	nop
 8019c64:	3714      	adds	r7, #20
 8019c66:	46bd      	mov	sp, r7
 8019c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c6c:	4770      	bx	lr

08019c6e <LL_APB1_GRP1_EnableClock>:
{
 8019c6e:	b480      	push	{r7}
 8019c70:	b085      	sub	sp, #20
 8019c72:	af00      	add	r7, sp, #0
 8019c74:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8019c76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019c7a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8019c7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8019c80:	687b      	ldr	r3, [r7, #4]
 8019c82:	4313      	orrs	r3, r2
 8019c84:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8019c86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019c8a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8019c8c:	687b      	ldr	r3, [r7, #4]
 8019c8e:	4013      	ands	r3, r2
 8019c90:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8019c92:	68fb      	ldr	r3, [r7, #12]
}
 8019c94:	bf00      	nop
 8019c96:	3714      	adds	r7, #20
 8019c98:	46bd      	mov	sp, r7
 8019c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c9e:	4770      	bx	lr

08019ca0 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 8019ca0:	b580      	push	{r7, lr}
 8019ca2:	b088      	sub	sp, #32
 8019ca4:	af00      	add	r7, sp, #0
 8019ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8019ca8:	f107 030c 	add.w	r3, r7, #12
 8019cac:	2200      	movs	r2, #0
 8019cae:	601a      	str	r2, [r3, #0]
 8019cb0:	605a      	str	r2, [r3, #4]
 8019cb2:	609a      	str	r2, [r3, #8]
 8019cb4:	60da      	str	r2, [r3, #12]
 8019cb6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8019cb8:	687b      	ldr	r3, [r7, #4]
 8019cba:	681b      	ldr	r3, [r3, #0]
 8019cbc:	4a13      	ldr	r2, [pc, #76]	; (8019d0c <HAL_PCD_MspInit+0x6c>)
 8019cbe:	4293      	cmp	r3, r2
 8019cc0:	d120      	bne.n	8019d04 <HAL_PCD_MspInit+0x64>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8019cc2:	2001      	movs	r0, #1
 8019cc4:	f7ff ffba 	bl	8019c3c <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8019cc8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8019ccc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019cce:	2302      	movs	r3, #2
 8019cd0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019cd2:	2300      	movs	r3, #0
 8019cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8019cd6:	2300      	movs	r3, #0
 8019cd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8019cda:	230a      	movs	r3, #10
 8019cdc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8019cde:	f107 030c 	add.w	r3, r7, #12
 8019ce2:	4619      	mov	r1, r3
 8019ce4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8019ce8:	f7ee f9d0 	bl	800808c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8019cec:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8019cf0:	f7ff ffbd 	bl	8019c6e <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 8019cf4:	2200      	movs	r2, #0
 8019cf6:	2105      	movs	r1, #5
 8019cf8:	2014      	movs	r0, #20
 8019cfa:	f7ed fe3e 	bl	800797a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8019cfe:	2014      	movs	r0, #20
 8019d00:	f7ed fe55 	bl	80079ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8019d04:	bf00      	nop
 8019d06:	3720      	adds	r7, #32
 8019d08:	46bd      	mov	sp, r7
 8019d0a:	bd80      	pop	{r7, pc}
 8019d0c:	40006800 	.word	0x40006800

08019d10 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019d10:	b580      	push	{r7, lr}
 8019d12:	b082      	sub	sp, #8
 8019d14:	af00      	add	r7, sp, #0
 8019d16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */
  
  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8019d18:	687b      	ldr	r3, [r7, #4]
 8019d1a:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8019d1e:	687b      	ldr	r3, [r7, #4]
 8019d20:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8019d24:	4619      	mov	r1, r3
 8019d26:	4610      	mov	r0, r2
 8019d28:	f7fd f991 	bl	801704e <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */
  
  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8019d2c:	bf00      	nop
 8019d2e:	3708      	adds	r7, #8
 8019d30:	46bd      	mov	sp, r7
 8019d32:	bd80      	pop	{r7, pc}

08019d34 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019d34:	b580      	push	{r7, lr}
 8019d36:	b082      	sub	sp, #8
 8019d38:	af00      	add	r7, sp, #0
 8019d3a:	6078      	str	r0, [r7, #4]
 8019d3c:	460b      	mov	r3, r1
 8019d3e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8019d40:	687b      	ldr	r3, [r7, #4]
 8019d42:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 8019d46:	78fb      	ldrb	r3, [r7, #3]
 8019d48:	687a      	ldr	r2, [r7, #4]
 8019d4a:	015b      	lsls	r3, r3, #5
 8019d4c:	4413      	add	r3, r2
 8019d4e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8019d52:	681a      	ldr	r2, [r3, #0]
 8019d54:	78fb      	ldrb	r3, [r7, #3]
 8019d56:	4619      	mov	r1, r3
 8019d58:	f7fd f9cc 	bl	80170f4 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8019d5c:	bf00      	nop
 8019d5e:	3708      	adds	r7, #8
 8019d60:	46bd      	mov	sp, r7
 8019d62:	bd80      	pop	{r7, pc}

08019d64 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019d64:	b580      	push	{r7, lr}
 8019d66:	b082      	sub	sp, #8
 8019d68:	af00      	add	r7, sp, #0
 8019d6a:	6078      	str	r0, [r7, #4]
 8019d6c:	460b      	mov	r3, r1
 8019d6e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8019d70:	687b      	ldr	r3, [r7, #4]
 8019d72:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 8019d76:	78fb      	ldrb	r3, [r7, #3]
 8019d78:	687a      	ldr	r2, [r7, #4]
 8019d7a:	015b      	lsls	r3, r3, #5
 8019d7c:	4413      	add	r3, r2
 8019d7e:	333c      	adds	r3, #60	; 0x3c
 8019d80:	681a      	ldr	r2, [r3, #0]
 8019d82:	78fb      	ldrb	r3, [r7, #3]
 8019d84:	4619      	mov	r1, r3
 8019d86:	f7fd fa18 	bl	80171ba <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */
  
  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8019d8a:	bf00      	nop
 8019d8c:	3708      	adds	r7, #8
 8019d8e:	46bd      	mov	sp, r7
 8019d90:	bd80      	pop	{r7, pc}

08019d92 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019d92:	b580      	push	{r7, lr}
 8019d94:	b082      	sub	sp, #8
 8019d96:	af00      	add	r7, sp, #0
 8019d98:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8019d9a:	687b      	ldr	r3, [r7, #4]
 8019d9c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8019da0:	4618      	mov	r0, r3
 8019da2:	f7fd fb2c 	bl	80173fe <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8019da6:	bf00      	nop
 8019da8:	3708      	adds	r7, #8
 8019daa:	46bd      	mov	sp, r7
 8019dac:	bd80      	pop	{r7, pc}

08019dae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019dae:	b580      	push	{r7, lr}
 8019db0:	b084      	sub	sp, #16
 8019db2:	af00      	add	r7, sp, #0
 8019db4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8019db6:	2301      	movs	r3, #1
 8019db8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8019dba:	687b      	ldr	r3, [r7, #4]
 8019dbc:	689b      	ldr	r3, [r3, #8]
 8019dbe:	2b02      	cmp	r3, #2
 8019dc0:	d001      	beq.n	8019dc6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8019dc2:	f7e9 fdfb 	bl	80039bc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8019dc6:	687b      	ldr	r3, [r7, #4]
 8019dc8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8019dcc:	7bfa      	ldrb	r2, [r7, #15]
 8019dce:	4611      	mov	r1, r2
 8019dd0:	4618      	mov	r0, r3
 8019dd2:	f7fd fad6 	bl	8017382 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8019dd6:	687b      	ldr	r3, [r7, #4]
 8019dd8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8019ddc:	4618      	mov	r0, r3
 8019dde:	f7fd fa82 	bl	80172e6 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8019de2:	bf00      	nop
 8019de4:	3710      	adds	r7, #16
 8019de6:	46bd      	mov	sp, r7
 8019de8:	bd80      	pop	{r7, pc}
	...

08019dec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019dec:	b580      	push	{r7, lr}
 8019dee:	b082      	sub	sp, #8
 8019df0:	af00      	add	r7, sp, #0
 8019df2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8019df4:	687b      	ldr	r3, [r7, #4]
 8019df6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8019dfa:	4618      	mov	r0, r3
 8019dfc:	f7fd fad1 	bl	80173a2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8019e00:	687b      	ldr	r3, [r7, #4]
 8019e02:	699b      	ldr	r3, [r3, #24]
 8019e04:	2b00      	cmp	r3, #0
 8019e06:	d005      	beq.n	8019e14 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019e08:	4b04      	ldr	r3, [pc, #16]	; (8019e1c <HAL_PCD_SuspendCallback+0x30>)
 8019e0a:	691b      	ldr	r3, [r3, #16]
 8019e0c:	4a03      	ldr	r2, [pc, #12]	; (8019e1c <HAL_PCD_SuspendCallback+0x30>)
 8019e0e:	f043 0306 	orr.w	r3, r3, #6
 8019e12:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8019e14:	bf00      	nop
 8019e16:	3708      	adds	r7, #8
 8019e18:	46bd      	mov	sp, r7
 8019e1a:	bd80      	pop	{r7, pc}
 8019e1c:	e000ed00 	.word	0xe000ed00

08019e20 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019e20:	b580      	push	{r7, lr}
 8019e22:	b082      	sub	sp, #8
 8019e24:	af00      	add	r7, sp, #0
 8019e26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8019e28:	687b      	ldr	r3, [r7, #4]
 8019e2a:	699b      	ldr	r3, [r3, #24]
 8019e2c:	2b00      	cmp	r3, #0
 8019e2e:	d007      	beq.n	8019e40 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019e30:	4b08      	ldr	r3, [pc, #32]	; (8019e54 <HAL_PCD_ResumeCallback+0x34>)
 8019e32:	691b      	ldr	r3, [r3, #16]
 8019e34:	4a07      	ldr	r2, [pc, #28]	; (8019e54 <HAL_PCD_ResumeCallback+0x34>)
 8019e36:	f023 0306 	bic.w	r3, r3, #6
 8019e3a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8019e3c:	f000 fa10 	bl	801a260 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8019e40:	687b      	ldr	r3, [r7, #4]
 8019e42:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8019e46:	4618      	mov	r0, r3
 8019e48:	f7fd fac1 	bl	80173ce <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8019e4c:	bf00      	nop
 8019e4e:	3708      	adds	r7, #8
 8019e50:	46bd      	mov	sp, r7
 8019e52:	bd80      	pop	{r7, pc}
 8019e54:	e000ed00 	.word	0xe000ed00

08019e58 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8019e58:	b580      	push	{r7, lr}
 8019e5a:	b082      	sub	sp, #8
 8019e5c:	af00      	add	r7, sp, #0
 8019e5e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8019e60:	4a2c      	ldr	r2, [pc, #176]	; (8019f14 <USBD_LL_Init+0xbc>)
 8019e62:	687b      	ldr	r3, [r7, #4]
 8019e64:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8019e68:	687b      	ldr	r3, [r7, #4]
 8019e6a:	4a2a      	ldr	r2, [pc, #168]	; (8019f14 <USBD_LL_Init+0xbc>)
 8019e6c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8019e70:	f7f1 faba 	bl	800b3e8 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8019e74:	4b27      	ldr	r3, [pc, #156]	; (8019f14 <USBD_LL_Init+0xbc>)
 8019e76:	4a28      	ldr	r2, [pc, #160]	; (8019f18 <USBD_LL_Init+0xc0>)
 8019e78:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8019e7a:	4b26      	ldr	r3, [pc, #152]	; (8019f14 <USBD_LL_Init+0xbc>)
 8019e7c:	2208      	movs	r2, #8
 8019e7e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8019e80:	4b24      	ldr	r3, [pc, #144]	; (8019f14 <USBD_LL_Init+0xbc>)
 8019e82:	2202      	movs	r2, #2
 8019e84:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8019e86:	4b23      	ldr	r3, [pc, #140]	; (8019f14 <USBD_LL_Init+0xbc>)
 8019e88:	2202      	movs	r2, #2
 8019e8a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8019e8c:	4b21      	ldr	r3, [pc, #132]	; (8019f14 <USBD_LL_Init+0xbc>)
 8019e8e:	2200      	movs	r2, #0
 8019e90:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8019e92:	4b20      	ldr	r3, [pc, #128]	; (8019f14 <USBD_LL_Init+0xbc>)
 8019e94:	2200      	movs	r2, #0
 8019e96:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8019e98:	4b1e      	ldr	r3, [pc, #120]	; (8019f14 <USBD_LL_Init+0xbc>)
 8019e9a:	2200      	movs	r2, #0
 8019e9c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8019e9e:	4b1d      	ldr	r3, [pc, #116]	; (8019f14 <USBD_LL_Init+0xbc>)
 8019ea0:	2200      	movs	r2, #0
 8019ea2:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8019ea4:	481b      	ldr	r0, [pc, #108]	; (8019f14 <USBD_LL_Init+0xbc>)
 8019ea6:	f7f0 fb26 	bl	800a4f6 <HAL_PCD_Init>
 8019eaa:	4603      	mov	r3, r0
 8019eac:	2b00      	cmp	r3, #0
 8019eae:	d001      	beq.n	8019eb4 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8019eb0:	f7e9 fd84 	bl	80039bc <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */
  
  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8019eb4:	687b      	ldr	r3, [r7, #4]
 8019eb6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8019eba:	2318      	movs	r3, #24
 8019ebc:	2200      	movs	r2, #0
 8019ebe:	2100      	movs	r1, #0
 8019ec0:	f7f1 fa0d 	bl	800b2de <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8019ec4:	687b      	ldr	r3, [r7, #4]
 8019ec6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8019eca:	2358      	movs	r3, #88	; 0x58
 8019ecc:	2200      	movs	r2, #0
 8019ece:	2180      	movs	r1, #128	; 0x80
 8019ed0:	f7f1 fa05 	bl	800b2de <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8019ed4:	687b      	ldr	r3, [r7, #4]
 8019ed6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8019eda:	23c0      	movs	r3, #192	; 0xc0
 8019edc:	2200      	movs	r2, #0
 8019ede:	2181      	movs	r1, #129	; 0x81
 8019ee0:	f7f1 f9fd 	bl	800b2de <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8019ee4:	687b      	ldr	r3, [r7, #4]
 8019ee6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8019eea:	f44f 7388 	mov.w	r3, #272	; 0x110
 8019eee:	2200      	movs	r2, #0
 8019ef0:	2101      	movs	r1, #1
 8019ef2:	f7f1 f9f4 	bl	800b2de <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8019ef6:	687b      	ldr	r3, [r7, #4]
 8019ef8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8019efc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8019f00:	2200      	movs	r2, #0
 8019f02:	2182      	movs	r1, #130	; 0x82
 8019f04:	f7f1 f9eb 	bl	800b2de <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8019f08:	2300      	movs	r3, #0
}
 8019f0a:	4618      	mov	r0, r3
 8019f0c:	3708      	adds	r7, #8
 8019f0e:	46bd      	mov	sp, r7
 8019f10:	bd80      	pop	{r7, pc}
 8019f12:	bf00      	nop
 8019f14:	20029f04 	.word	0x20029f04
 8019f18:	40006800 	.word	0x40006800

08019f1c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8019f1c:	b580      	push	{r7, lr}
 8019f1e:	b084      	sub	sp, #16
 8019f20:	af00      	add	r7, sp, #0
 8019f22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019f24:	2300      	movs	r3, #0
 8019f26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019f28:	2300      	movs	r3, #0
 8019f2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8019f2c:	687b      	ldr	r3, [r7, #4]
 8019f2e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019f32:	4618      	mov	r0, r3
 8019f34:	f7f0 fb9a 	bl	800a66c <HAL_PCD_Start>
 8019f38:	4603      	mov	r3, r0
 8019f3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019f3c:	7bfb      	ldrb	r3, [r7, #15]
 8019f3e:	4618      	mov	r0, r3
 8019f40:	f000 f994 	bl	801a26c <USBD_Get_USB_Status>
 8019f44:	4603      	mov	r3, r0
 8019f46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019f48:	7bbb      	ldrb	r3, [r7, #14]
}
 8019f4a:	4618      	mov	r0, r3
 8019f4c:	3710      	adds	r7, #16
 8019f4e:	46bd      	mov	sp, r7
 8019f50:	bd80      	pop	{r7, pc}

08019f52 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 8019f52:	b580      	push	{r7, lr}
 8019f54:	b084      	sub	sp, #16
 8019f56:	af00      	add	r7, sp, #0
 8019f58:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019f5a:	2300      	movs	r3, #0
 8019f5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019f5e:	2300      	movs	r3, #0
 8019f60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 8019f62:	687b      	ldr	r3, [r7, #4]
 8019f64:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019f68:	4618      	mov	r0, r3
 8019f6a:	f7f0 fba1 	bl	800a6b0 <HAL_PCD_Stop>
 8019f6e:	4603      	mov	r3, r0
 8019f70:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019f72:	7bfb      	ldrb	r3, [r7, #15]
 8019f74:	4618      	mov	r0, r3
 8019f76:	f000 f979 	bl	801a26c <USBD_Get_USB_Status>
 8019f7a:	4603      	mov	r3, r0
 8019f7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019f7e:	7bbb      	ldrb	r3, [r7, #14]
}
 8019f80:	4618      	mov	r0, r3
 8019f82:	3710      	adds	r7, #16
 8019f84:	46bd      	mov	sp, r7
 8019f86:	bd80      	pop	{r7, pc}

08019f88 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8019f88:	b580      	push	{r7, lr}
 8019f8a:	b084      	sub	sp, #16
 8019f8c:	af00      	add	r7, sp, #0
 8019f8e:	6078      	str	r0, [r7, #4]
 8019f90:	4608      	mov	r0, r1
 8019f92:	4611      	mov	r1, r2
 8019f94:	461a      	mov	r2, r3
 8019f96:	4603      	mov	r3, r0
 8019f98:	70fb      	strb	r3, [r7, #3]
 8019f9a:	460b      	mov	r3, r1
 8019f9c:	70bb      	strb	r3, [r7, #2]
 8019f9e:	4613      	mov	r3, r2
 8019fa0:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019fa2:	2300      	movs	r3, #0
 8019fa4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019fa6:	2300      	movs	r3, #0
 8019fa8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8019faa:	687b      	ldr	r3, [r7, #4]
 8019fac:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8019fb0:	78bb      	ldrb	r3, [r7, #2]
 8019fb2:	883a      	ldrh	r2, [r7, #0]
 8019fb4:	78f9      	ldrb	r1, [r7, #3]
 8019fb6:	f7f0 fd10 	bl	800a9da <HAL_PCD_EP_Open>
 8019fba:	4603      	mov	r3, r0
 8019fbc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019fbe:	7bfb      	ldrb	r3, [r7, #15]
 8019fc0:	4618      	mov	r0, r3
 8019fc2:	f000 f953 	bl	801a26c <USBD_Get_USB_Status>
 8019fc6:	4603      	mov	r3, r0
 8019fc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019fca:	7bbb      	ldrb	r3, [r7, #14]
}
 8019fcc:	4618      	mov	r0, r3
 8019fce:	3710      	adds	r7, #16
 8019fd0:	46bd      	mov	sp, r7
 8019fd2:	bd80      	pop	{r7, pc}

08019fd4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019fd4:	b580      	push	{r7, lr}
 8019fd6:	b084      	sub	sp, #16
 8019fd8:	af00      	add	r7, sp, #0
 8019fda:	6078      	str	r0, [r7, #4]
 8019fdc:	460b      	mov	r3, r1
 8019fde:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019fe0:	2300      	movs	r3, #0
 8019fe2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019fe4:	2300      	movs	r3, #0
 8019fe6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8019fe8:	687b      	ldr	r3, [r7, #4]
 8019fea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019fee:	78fa      	ldrb	r2, [r7, #3]
 8019ff0:	4611      	mov	r1, r2
 8019ff2:	4618      	mov	r0, r3
 8019ff4:	f7f0 fd51 	bl	800aa9a <HAL_PCD_EP_Close>
 8019ff8:	4603      	mov	r3, r0
 8019ffa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019ffc:	7bfb      	ldrb	r3, [r7, #15]
 8019ffe:	4618      	mov	r0, r3
 801a000:	f000 f934 	bl	801a26c <USBD_Get_USB_Status>
 801a004:	4603      	mov	r3, r0
 801a006:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a008:	7bbb      	ldrb	r3, [r7, #14]
}
 801a00a:	4618      	mov	r0, r3
 801a00c:	3710      	adds	r7, #16
 801a00e:	46bd      	mov	sp, r7
 801a010:	bd80      	pop	{r7, pc}

0801a012 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a012:	b580      	push	{r7, lr}
 801a014:	b084      	sub	sp, #16
 801a016:	af00      	add	r7, sp, #0
 801a018:	6078      	str	r0, [r7, #4]
 801a01a:	460b      	mov	r3, r1
 801a01c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a01e:	2300      	movs	r3, #0
 801a020:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a022:	2300      	movs	r3, #0
 801a024:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801a026:	687b      	ldr	r3, [r7, #4]
 801a028:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801a02c:	78fa      	ldrb	r2, [r7, #3]
 801a02e:	4611      	mov	r1, r2
 801a030:	4618      	mov	r0, r3
 801a032:	f7f0 fdfc 	bl	800ac2e <HAL_PCD_EP_SetStall>
 801a036:	4603      	mov	r3, r0
 801a038:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a03a:	7bfb      	ldrb	r3, [r7, #15]
 801a03c:	4618      	mov	r0, r3
 801a03e:	f000 f915 	bl	801a26c <USBD_Get_USB_Status>
 801a042:	4603      	mov	r3, r0
 801a044:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a046:	7bbb      	ldrb	r3, [r7, #14]
}
 801a048:	4618      	mov	r0, r3
 801a04a:	3710      	adds	r7, #16
 801a04c:	46bd      	mov	sp, r7
 801a04e:	bd80      	pop	{r7, pc}

0801a050 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a050:	b580      	push	{r7, lr}
 801a052:	b084      	sub	sp, #16
 801a054:	af00      	add	r7, sp, #0
 801a056:	6078      	str	r0, [r7, #4]
 801a058:	460b      	mov	r3, r1
 801a05a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a05c:	2300      	movs	r3, #0
 801a05e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a060:	2300      	movs	r3, #0
 801a062:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801a064:	687b      	ldr	r3, [r7, #4]
 801a066:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801a06a:	78fa      	ldrb	r2, [r7, #3]
 801a06c:	4611      	mov	r1, r2
 801a06e:	4618      	mov	r0, r3
 801a070:	f7f0 fe37 	bl	800ace2 <HAL_PCD_EP_ClrStall>
 801a074:	4603      	mov	r3, r0
 801a076:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a078:	7bfb      	ldrb	r3, [r7, #15]
 801a07a:	4618      	mov	r0, r3
 801a07c:	f000 f8f6 	bl	801a26c <USBD_Get_USB_Status>
 801a080:	4603      	mov	r3, r0
 801a082:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a084:	7bbb      	ldrb	r3, [r7, #14]
}
 801a086:	4618      	mov	r0, r3
 801a088:	3710      	adds	r7, #16
 801a08a:	46bd      	mov	sp, r7
 801a08c:	bd80      	pop	{r7, pc}

0801a08e <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a08e:	b480      	push	{r7}
 801a090:	b085      	sub	sp, #20
 801a092:	af00      	add	r7, sp, #0
 801a094:	6078      	str	r0, [r7, #4]
 801a096:	460b      	mov	r3, r1
 801a098:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801a09a:	687b      	ldr	r3, [r7, #4]
 801a09c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801a0a0:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801a0a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a0a6:	2b00      	cmp	r3, #0
 801a0a8:	da08      	bge.n	801a0bc <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801a0aa:	78fb      	ldrb	r3, [r7, #3]
 801a0ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801a0b0:	68fa      	ldr	r2, [r7, #12]
 801a0b2:	015b      	lsls	r3, r3, #5
 801a0b4:	4413      	add	r3, r2
 801a0b6:	332a      	adds	r3, #42	; 0x2a
 801a0b8:	781b      	ldrb	r3, [r3, #0]
 801a0ba:	e008      	b.n	801a0ce <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801a0bc:	78fb      	ldrb	r3, [r7, #3]
 801a0be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801a0c2:	68fa      	ldr	r2, [r7, #12]
 801a0c4:	015b      	lsls	r3, r3, #5
 801a0c6:	4413      	add	r3, r2
 801a0c8:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 801a0cc:	781b      	ldrb	r3, [r3, #0]
  }
}
 801a0ce:	4618      	mov	r0, r3
 801a0d0:	3714      	adds	r7, #20
 801a0d2:	46bd      	mov	sp, r7
 801a0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0d8:	4770      	bx	lr

0801a0da <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801a0da:	b580      	push	{r7, lr}
 801a0dc:	b084      	sub	sp, #16
 801a0de:	af00      	add	r7, sp, #0
 801a0e0:	6078      	str	r0, [r7, #4]
 801a0e2:	460b      	mov	r3, r1
 801a0e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a0e6:	2300      	movs	r3, #0
 801a0e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a0ea:	2300      	movs	r3, #0
 801a0ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801a0ee:	687b      	ldr	r3, [r7, #4]
 801a0f0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801a0f4:	78fa      	ldrb	r2, [r7, #3]
 801a0f6:	4611      	mov	r1, r2
 801a0f8:	4618      	mov	r0, r3
 801a0fa:	f7f0 fc49 	bl	800a990 <HAL_PCD_SetAddress>
 801a0fe:	4603      	mov	r3, r0
 801a100:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a102:	7bfb      	ldrb	r3, [r7, #15]
 801a104:	4618      	mov	r0, r3
 801a106:	f000 f8b1 	bl	801a26c <USBD_Get_USB_Status>
 801a10a:	4603      	mov	r3, r0
 801a10c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a10e:	7bbb      	ldrb	r3, [r7, #14]
}
 801a110:	4618      	mov	r0, r3
 801a112:	3710      	adds	r7, #16
 801a114:	46bd      	mov	sp, r7
 801a116:	bd80      	pop	{r7, pc}

0801a118 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801a118:	b580      	push	{r7, lr}
 801a11a:	b086      	sub	sp, #24
 801a11c:	af00      	add	r7, sp, #0
 801a11e:	60f8      	str	r0, [r7, #12]
 801a120:	607a      	str	r2, [r7, #4]
 801a122:	603b      	str	r3, [r7, #0]
 801a124:	460b      	mov	r3, r1
 801a126:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a128:	2300      	movs	r3, #0
 801a12a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a12c:	2300      	movs	r3, #0
 801a12e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801a130:	68fb      	ldr	r3, [r7, #12]
 801a132:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801a136:	7af9      	ldrb	r1, [r7, #11]
 801a138:	683b      	ldr	r3, [r7, #0]
 801a13a:	687a      	ldr	r2, [r7, #4]
 801a13c:	f7f0 fd3e 	bl	800abbc <HAL_PCD_EP_Transmit>
 801a140:	4603      	mov	r3, r0
 801a142:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a144:	7dfb      	ldrb	r3, [r7, #23]
 801a146:	4618      	mov	r0, r3
 801a148:	f000 f890 	bl	801a26c <USBD_Get_USB_Status>
 801a14c:	4603      	mov	r3, r0
 801a14e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801a150:	7dbb      	ldrb	r3, [r7, #22]
}
 801a152:	4618      	mov	r0, r3
 801a154:	3718      	adds	r7, #24
 801a156:	46bd      	mov	sp, r7
 801a158:	bd80      	pop	{r7, pc}

0801a15a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801a15a:	b580      	push	{r7, lr}
 801a15c:	b086      	sub	sp, #24
 801a15e:	af00      	add	r7, sp, #0
 801a160:	60f8      	str	r0, [r7, #12]
 801a162:	607a      	str	r2, [r7, #4]
 801a164:	603b      	str	r3, [r7, #0]
 801a166:	460b      	mov	r3, r1
 801a168:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a16a:	2300      	movs	r3, #0
 801a16c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a16e:	2300      	movs	r3, #0
 801a170:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801a172:	68fb      	ldr	r3, [r7, #12]
 801a174:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801a178:	7af9      	ldrb	r1, [r7, #11]
 801a17a:	683b      	ldr	r3, [r7, #0]
 801a17c:	687a      	ldr	r2, [r7, #4]
 801a17e:	f7f0 fcce 	bl	800ab1e <HAL_PCD_EP_Receive>
 801a182:	4603      	mov	r3, r0
 801a184:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a186:	7dfb      	ldrb	r3, [r7, #23]
 801a188:	4618      	mov	r0, r3
 801a18a:	f000 f86f 	bl	801a26c <USBD_Get_USB_Status>
 801a18e:	4603      	mov	r3, r0
 801a190:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801a192:	7dbb      	ldrb	r3, [r7, #22]
}
 801a194:	4618      	mov	r0, r3
 801a196:	3718      	adds	r7, #24
 801a198:	46bd      	mov	sp, r7
 801a19a:	bd80      	pop	{r7, pc}

0801a19c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a19c:	b580      	push	{r7, lr}
 801a19e:	b082      	sub	sp, #8
 801a1a0:	af00      	add	r7, sp, #0
 801a1a2:	6078      	str	r0, [r7, #4]
 801a1a4:	460b      	mov	r3, r1
 801a1a6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801a1a8:	687b      	ldr	r3, [r7, #4]
 801a1aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801a1ae:	78fa      	ldrb	r2, [r7, #3]
 801a1b0:	4611      	mov	r1, r2
 801a1b2:	4618      	mov	r0, r3
 801a1b4:	f7f0 fced 	bl	800ab92 <HAL_PCD_EP_GetRxCount>
 801a1b8:	4603      	mov	r3, r0
}
 801a1ba:	4618      	mov	r0, r3
 801a1bc:	3708      	adds	r7, #8
 801a1be:	46bd      	mov	sp, r7
 801a1c0:	bd80      	pop	{r7, pc}
	...

0801a1c4 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a1c4:	b580      	push	{r7, lr}
 801a1c6:	b082      	sub	sp, #8
 801a1c8:	af00      	add	r7, sp, #0
 801a1ca:	6078      	str	r0, [r7, #4]
 801a1cc:	460b      	mov	r3, r1
 801a1ce:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 801a1d0:	78fb      	ldrb	r3, [r7, #3]
 801a1d2:	2b00      	cmp	r3, #0
 801a1d4:	d002      	beq.n	801a1dc <HAL_PCDEx_LPM_Callback+0x18>
 801a1d6:	2b01      	cmp	r3, #1
 801a1d8:	d013      	beq.n	801a202 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
  /* USER CODE END LPM_Callback */
}
 801a1da:	e023      	b.n	801a224 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 801a1dc:	687b      	ldr	r3, [r7, #4]
 801a1de:	699b      	ldr	r3, [r3, #24]
 801a1e0:	2b00      	cmp	r3, #0
 801a1e2:	d007      	beq.n	801a1f4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 801a1e4:	f000 f83c 	bl	801a260 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801a1e8:	4b10      	ldr	r3, [pc, #64]	; (801a22c <HAL_PCDEx_LPM_Callback+0x68>)
 801a1ea:	691b      	ldr	r3, [r3, #16]
 801a1ec:	4a0f      	ldr	r2, [pc, #60]	; (801a22c <HAL_PCDEx_LPM_Callback+0x68>)
 801a1ee:	f023 0306 	bic.w	r3, r3, #6
 801a1f2:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 801a1f4:	687b      	ldr	r3, [r7, #4]
 801a1f6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801a1fa:	4618      	mov	r0, r3
 801a1fc:	f7fd f8e7 	bl	80173ce <USBD_LL_Resume>
    break;
 801a200:	e010      	b.n	801a224 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 801a202:	687b      	ldr	r3, [r7, #4]
 801a204:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801a208:	4618      	mov	r0, r3
 801a20a:	f7fd f8ca 	bl	80173a2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801a20e:	687b      	ldr	r3, [r7, #4]
 801a210:	699b      	ldr	r3, [r3, #24]
 801a212:	2b00      	cmp	r3, #0
 801a214:	d005      	beq.n	801a222 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801a216:	4b05      	ldr	r3, [pc, #20]	; (801a22c <HAL_PCDEx_LPM_Callback+0x68>)
 801a218:	691b      	ldr	r3, [r3, #16]
 801a21a:	4a04      	ldr	r2, [pc, #16]	; (801a22c <HAL_PCDEx_LPM_Callback+0x68>)
 801a21c:	f043 0306 	orr.w	r3, r3, #6
 801a220:	6113      	str	r3, [r2, #16]
    break;   
 801a222:	bf00      	nop
}
 801a224:	bf00      	nop
 801a226:	3708      	adds	r7, #8
 801a228:	46bd      	mov	sp, r7
 801a22a:	bd80      	pop	{r7, pc}
 801a22c:	e000ed00 	.word	0xe000ed00

0801a230 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801a230:	b480      	push	{r7}
 801a232:	b083      	sub	sp, #12
 801a234:	af00      	add	r7, sp, #0
 801a236:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801a238:	4b03      	ldr	r3, [pc, #12]	; (801a248 <USBD_static_malloc+0x18>)
}
 801a23a:	4618      	mov	r0, r3
 801a23c:	370c      	adds	r7, #12
 801a23e:	46bd      	mov	sp, r7
 801a240:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a244:	4770      	bx	lr
 801a246:	bf00      	nop
 801a248:	20027854 	.word	0x20027854

0801a24c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801a24c:	b480      	push	{r7}
 801a24e:	b083      	sub	sp, #12
 801a250:	af00      	add	r7, sp, #0
 801a252:	6078      	str	r0, [r7, #4]

}
 801a254:	bf00      	nop
 801a256:	370c      	adds	r7, #12
 801a258:	46bd      	mov	sp, r7
 801a25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a25e:	4770      	bx	lr

0801a260 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801a260:	b580      	push	{r7, lr}
 801a262:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801a264:	f7e9 faf2 	bl	800384c <SystemClock_Config>
}
 801a268:	bf00      	nop
 801a26a:	bd80      	pop	{r7, pc}

0801a26c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801a26c:	b480      	push	{r7}
 801a26e:	b085      	sub	sp, #20
 801a270:	af00      	add	r7, sp, #0
 801a272:	4603      	mov	r3, r0
 801a274:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a276:	2300      	movs	r3, #0
 801a278:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801a27a:	79fb      	ldrb	r3, [r7, #7]
 801a27c:	2b03      	cmp	r3, #3
 801a27e:	d817      	bhi.n	801a2b0 <USBD_Get_USB_Status+0x44>
 801a280:	a201      	add	r2, pc, #4	; (adr r2, 801a288 <USBD_Get_USB_Status+0x1c>)
 801a282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a286:	bf00      	nop
 801a288:	0801a299 	.word	0x0801a299
 801a28c:	0801a29f 	.word	0x0801a29f
 801a290:	0801a2a5 	.word	0x0801a2a5
 801a294:	0801a2ab 	.word	0x0801a2ab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801a298:	2300      	movs	r3, #0
 801a29a:	73fb      	strb	r3, [r7, #15]
    break;
 801a29c:	e00b      	b.n	801a2b6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801a29e:	2303      	movs	r3, #3
 801a2a0:	73fb      	strb	r3, [r7, #15]
    break;
 801a2a2:	e008      	b.n	801a2b6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801a2a4:	2301      	movs	r3, #1
 801a2a6:	73fb      	strb	r3, [r7, #15]
    break;
 801a2a8:	e005      	b.n	801a2b6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801a2aa:	2303      	movs	r3, #3
 801a2ac:	73fb      	strb	r3, [r7, #15]
    break;
 801a2ae:	e002      	b.n	801a2b6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801a2b0:	2303      	movs	r3, #3
 801a2b2:	73fb      	strb	r3, [r7, #15]
    break;
 801a2b4:	bf00      	nop
  }
  return usb_status;
 801a2b6:	7bfb      	ldrb	r3, [r7, #15]
}
 801a2b8:	4618      	mov	r0, r3
 801a2ba:	3714      	adds	r7, #20
 801a2bc:	46bd      	mov	sp, r7
 801a2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2c2:	4770      	bx	lr

0801a2c4 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801a2c4:	b480      	push	{r7}
 801a2c6:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801a2c8:	4b05      	ldr	r3, [pc, #20]	; (801a2e0 <UTIL_LPM_Init+0x1c>)
 801a2ca:	2200      	movs	r2, #0
 801a2cc:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801a2ce:	4b05      	ldr	r3, [pc, #20]	; (801a2e4 <UTIL_LPM_Init+0x20>)
 801a2d0:	2200      	movs	r2, #0
 801a2d2:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801a2d4:	bf00      	nop
 801a2d6:	46bd      	mov	sp, r7
 801a2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2dc:	4770      	bx	lr
 801a2de:	bf00      	nop
 801a2e0:	20027a74 	.word	0x20027a74
 801a2e4:	20027a78 	.word	0x20027a78

0801a2e8 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801a2e8:	b480      	push	{r7}
 801a2ea:	b087      	sub	sp, #28
 801a2ec:	af00      	add	r7, sp, #0
 801a2ee:	6078      	str	r0, [r7, #4]
 801a2f0:	460b      	mov	r3, r1
 801a2f2:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a2f4:	f3ef 8310 	mrs	r3, PRIMASK
 801a2f8:	613b      	str	r3, [r7, #16]
  return(result);
 801a2fa:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801a2fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a2fe:	b672      	cpsid	i
  
  switch(state)
 801a300:	78fb      	ldrb	r3, [r7, #3]
 801a302:	2b00      	cmp	r3, #0
 801a304:	d009      	beq.n	801a31a <UTIL_LPM_SetOffMode+0x32>
 801a306:	2b01      	cmp	r3, #1
 801a308:	d000      	beq.n	801a30c <UTIL_LPM_SetOffMode+0x24>
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
  default :
    {
      break;
 801a30a:	e00e      	b.n	801a32a <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 801a30c:	4b0c      	ldr	r3, [pc, #48]	; (801a340 <UTIL_LPM_SetOffMode+0x58>)
 801a30e:	681a      	ldr	r2, [r3, #0]
 801a310:	687b      	ldr	r3, [r7, #4]
 801a312:	4313      	orrs	r3, r2
 801a314:	4a0a      	ldr	r2, [pc, #40]	; (801a340 <UTIL_LPM_SetOffMode+0x58>)
 801a316:	6013      	str	r3, [r2, #0]
      break;
 801a318:	e007      	b.n	801a32a <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 801a31a:	687b      	ldr	r3, [r7, #4]
 801a31c:	43da      	mvns	r2, r3
 801a31e:	4b08      	ldr	r3, [pc, #32]	; (801a340 <UTIL_LPM_SetOffMode+0x58>)
 801a320:	681b      	ldr	r3, [r3, #0]
 801a322:	4013      	ands	r3, r2
 801a324:	4a06      	ldr	r2, [pc, #24]	; (801a340 <UTIL_LPM_SetOffMode+0x58>)
 801a326:	6013      	str	r3, [r2, #0]
      break;
 801a328:	bf00      	nop
 801a32a:	697b      	ldr	r3, [r7, #20]
 801a32c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a32e:	68fb      	ldr	r3, [r7, #12]
 801a330:	f383 8810 	msr	PRIMASK, r3
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801a334:	bf00      	nop
 801a336:	371c      	adds	r7, #28
 801a338:	46bd      	mov	sp, r7
 801a33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a33e:	4770      	bx	lr
 801a340:	20027a78 	.word	0x20027a78

0801a344 <arm_power_f32>:
 801a344:	b430      	push	{r4, r5}
 801a346:	088d      	lsrs	r5, r1, #2
 801a348:	eddf 5a20 	vldr	s11, [pc, #128]	; 801a3cc <arm_power_f32+0x88>
 801a34c:	d020      	beq.n	801a390 <arm_power_f32+0x4c>
 801a34e:	f100 0310 	add.w	r3, r0, #16
 801a352:	462c      	mov	r4, r5
 801a354:	ed53 6a04 	vldr	s13, [r3, #-16]
 801a358:	ed13 7a03 	vldr	s14, [r3, #-12]
 801a35c:	ed53 7a02 	vldr	s15, [r3, #-8]
 801a360:	ed13 6a01 	vldr	s12, [r3, #-4]
 801a364:	ee66 6aa6 	vmul.f32	s13, s13, s13
 801a368:	ee27 7a07 	vmul.f32	s14, s14, s14
 801a36c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801a370:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801a374:	ee37 7a26 	vadd.f32	s14, s14, s13
 801a378:	ee26 6a06 	vmul.f32	s12, s12, s12
 801a37c:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a380:	3c01      	subs	r4, #1
 801a382:	f103 0310 	add.w	r3, r3, #16
 801a386:	ee76 5a27 	vadd.f32	s11, s12, s15
 801a38a:	d1e3      	bne.n	801a354 <arm_power_f32+0x10>
 801a38c:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 801a390:	f011 0103 	ands.w	r1, r1, #3
 801a394:	d015      	beq.n	801a3c2 <arm_power_f32+0x7e>
 801a396:	edd0 7a00 	vldr	s15, [r0]
 801a39a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801a39e:	3901      	subs	r1, #1
 801a3a0:	ee75 5aa7 	vadd.f32	s11, s11, s15
 801a3a4:	d00d      	beq.n	801a3c2 <arm_power_f32+0x7e>
 801a3a6:	edd0 7a01 	vldr	s15, [r0, #4]
 801a3aa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801a3ae:	2901      	cmp	r1, #1
 801a3b0:	ee75 5aa7 	vadd.f32	s11, s11, s15
 801a3b4:	d005      	beq.n	801a3c2 <arm_power_f32+0x7e>
 801a3b6:	edd0 7a02 	vldr	s15, [r0, #8]
 801a3ba:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801a3be:	ee75 5aa7 	vadd.f32	s11, s11, s15
 801a3c2:	edc2 5a00 	vstr	s11, [r2]
 801a3c6:	bc30      	pop	{r4, r5}
 801a3c8:	4770      	bx	lr
 801a3ca:	bf00      	nop
 801a3cc:	00000000 	.word	0x00000000

0801a3d0 <arm_mat_mult_f32>:
 801a3d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a3d4:	8845      	ldrh	r5, [r0, #2]
 801a3d6:	880b      	ldrh	r3, [r1, #0]
 801a3d8:	8806      	ldrh	r6, [r0, #0]
 801a3da:	6847      	ldr	r7, [r0, #4]
 801a3dc:	6854      	ldr	r4, [r2, #4]
 801a3de:	6848      	ldr	r0, [r1, #4]
 801a3e0:	b08b      	sub	sp, #44	; 0x2c
 801a3e2:	42ab      	cmp	r3, r5
 801a3e4:	9109      	str	r1, [sp, #36]	; 0x24
 801a3e6:	9604      	str	r6, [sp, #16]
 801a3e8:	8849      	ldrh	r1, [r1, #2]
 801a3ea:	f040 808a 	bne.w	801a502 <arm_mat_mult_f32+0x132>
 801a3ee:	8815      	ldrh	r5, [r2, #0]
 801a3f0:	42b5      	cmp	r5, r6
 801a3f2:	f040 8086 	bne.w	801a502 <arm_mat_mult_f32+0x132>
 801a3f6:	8852      	ldrh	r2, [r2, #2]
 801a3f8:	428a      	cmp	r2, r1
 801a3fa:	f040 8082 	bne.w	801a502 <arm_mat_mult_f32+0x132>
 801a3fe:	ea4f 0893 	mov.w	r8, r3, lsr #2
 801a402:	1d01      	adds	r1, r0, #4
 801a404:	0116      	lsls	r6, r2, #4
 801a406:	9108      	str	r1, [sp, #32]
 801a408:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 801a40c:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 801a410:	9101      	str	r1, [sp, #4]
 801a412:	fb06 f108 	mul.w	r1, r6, r8
 801a416:	0095      	lsls	r5, r2, #2
 801a418:	9103      	str	r1, [sp, #12]
 801a41a:	00d2      	lsls	r2, r2, #3
 801a41c:	ea4f 018c 	mov.w	r1, ip, lsl #2
 801a420:	f003 0903 	and.w	r9, r3, #3
 801a424:	009b      	lsls	r3, r3, #2
 801a426:	f107 0b10 	add.w	fp, r7, #16
 801a42a:	eb04 0a05 	add.w	sl, r4, r5
 801a42e:	9107      	str	r1, [sp, #28]
 801a430:	9202      	str	r2, [sp, #8]
 801a432:	9306      	str	r3, [sp, #24]
 801a434:	f1ab 0310 	sub.w	r3, fp, #16
 801a438:	9305      	str	r3, [sp, #20]
 801a43a:	9b07      	ldr	r3, [sp, #28]
 801a43c:	f8dd e020 	ldr.w	lr, [sp, #32]
 801a440:	eb03 0c0a 	add.w	ip, r3, sl
 801a444:	eddf 7a31 	vldr	s15, [pc, #196]	; 801a50c <arm_mat_mult_f32+0x13c>
 801a448:	f1b8 0f00 	cmp.w	r8, #0
 801a44c:	d053      	beq.n	801a4f6 <arm_mat_mult_f32+0x126>
 801a44e:	9b02      	ldr	r3, [sp, #8]
 801a450:	4644      	mov	r4, r8
 801a452:	18c1      	adds	r1, r0, r3
 801a454:	4602      	mov	r2, r0
 801a456:	465b      	mov	r3, fp
 801a458:	ed92 6a00 	vldr	s12, [r2]
 801a45c:	ed13 7a04 	vldr	s14, [r3, #-16]
 801a460:	ed53 4a03 	vldr	s9, [r3, #-12]
 801a464:	ed53 6a02 	vldr	s13, [r3, #-8]
 801a468:	ed91 5a00 	vldr	s10, [r1]
 801a46c:	ed53 5a01 	vldr	s11, [r3, #-4]
 801a470:	1957      	adds	r7, r2, r5
 801a472:	ee27 7a06 	vmul.f32	s14, s14, s12
 801a476:	ed97 6a00 	vldr	s12, [r7]
 801a47a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a47e:	ee26 6a24 	vmul.f32	s12, s12, s9
 801a482:	194f      	adds	r7, r1, r5
 801a484:	ee36 6a27 	vadd.f32	s12, s12, s15
 801a488:	ee26 7a85 	vmul.f32	s14, s13, s10
 801a48c:	edd7 7a00 	vldr	s15, [r7]
 801a490:	ee37 7a06 	vadd.f32	s14, s14, s12
 801a494:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801a498:	3c01      	subs	r4, #1
 801a49a:	4432      	add	r2, r6
 801a49c:	4431      	add	r1, r6
 801a49e:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a4a2:	f103 0310 	add.w	r3, r3, #16
 801a4a6:	d1d7      	bne.n	801a458 <arm_mat_mult_f32+0x88>
 801a4a8:	9b03      	ldr	r3, [sp, #12]
 801a4aa:	9a01      	ldr	r2, [sp, #4]
 801a4ac:	4418      	add	r0, r3
 801a4ae:	f1b9 0f00 	cmp.w	r9, #0
 801a4b2:	d00b      	beq.n	801a4cc <arm_mat_mult_f32+0xfc>
 801a4b4:	464b      	mov	r3, r9
 801a4b6:	edd0 6a00 	vldr	s13, [r0]
 801a4ba:	ecb2 7a01 	vldmia	r2!, {s14}
 801a4be:	ee27 7a26 	vmul.f32	s14, s14, s13
 801a4c2:	3b01      	subs	r3, #1
 801a4c4:	4428      	add	r0, r5
 801a4c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a4ca:	d1f4      	bne.n	801a4b6 <arm_mat_mult_f32+0xe6>
 801a4cc:	ecec 7a01 	vstmia	ip!, {s15}
 801a4d0:	45d4      	cmp	ip, sl
 801a4d2:	4670      	mov	r0, lr
 801a4d4:	f10e 0e04 	add.w	lr, lr, #4
 801a4d8:	d1b4      	bne.n	801a444 <arm_mat_mult_f32+0x74>
 801a4da:	9a01      	ldr	r2, [sp, #4]
 801a4dc:	9b06      	ldr	r3, [sp, #24]
 801a4de:	4611      	mov	r1, r2
 801a4e0:	4419      	add	r1, r3
 801a4e2:	449b      	add	fp, r3
 801a4e4:	9b04      	ldr	r3, [sp, #16]
 801a4e6:	9101      	str	r1, [sp, #4]
 801a4e8:	3b01      	subs	r3, #1
 801a4ea:	44aa      	add	sl, r5
 801a4ec:	9304      	str	r3, [sp, #16]
 801a4ee:	d004      	beq.n	801a4fa <arm_mat_mult_f32+0x12a>
 801a4f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a4f2:	6858      	ldr	r0, [r3, #4]
 801a4f4:	e79e      	b.n	801a434 <arm_mat_mult_f32+0x64>
 801a4f6:	9a05      	ldr	r2, [sp, #20]
 801a4f8:	e7d9      	b.n	801a4ae <arm_mat_mult_f32+0xde>
 801a4fa:	4618      	mov	r0, r3
 801a4fc:	b00b      	add	sp, #44	; 0x2c
 801a4fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a502:	f06f 0002 	mvn.w	r0, #2
 801a506:	b00b      	add	sp, #44	; 0x2c
 801a508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a50c:	00000000 	.word	0x00000000

0801a510 <arm_sin_f32>:
 801a510:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801a590 <arm_sin_f32+0x80>
 801a514:	ee20 0a27 	vmul.f32	s0, s0, s15
 801a518:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801a51c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a520:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801a524:	d504      	bpl.n	801a530 <arm_sin_f32+0x20>
 801a526:	ee17 3a90 	vmov	r3, s15
 801a52a:	3b01      	subs	r3, #1
 801a52c:	ee07 3a90 	vmov	s15, r3
 801a530:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a534:	ed9f 7a17 	vldr	s14, [pc, #92]	; 801a594 <arm_sin_f32+0x84>
 801a538:	ee30 0a67 	vsub.f32	s0, s0, s15
 801a53c:	ee20 0a07 	vmul.f32	s0, s0, s14
 801a540:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801a544:	ee17 3a90 	vmov	r3, s15
 801a548:	b29b      	uxth	r3, r3
 801a54a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a54e:	d21a      	bcs.n	801a586 <arm_sin_f32+0x76>
 801a550:	ee07 3a90 	vmov	s15, r3
 801a554:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801a558:	1c59      	adds	r1, r3, #1
 801a55a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801a55e:	4a0e      	ldr	r2, [pc, #56]	; (801a598 <arm_sin_f32+0x88>)
 801a560:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801a564:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a568:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801a56c:	ed93 7a00 	vldr	s14, [r3]
 801a570:	edd2 6a00 	vldr	s13, [r2]
 801a574:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801a578:	ee20 0a26 	vmul.f32	s0, s0, s13
 801a57c:	ee67 7a87 	vmul.f32	s15, s15, s14
 801a580:	ee37 0a80 	vadd.f32	s0, s15, s0
 801a584:	4770      	bx	lr
 801a586:	ee30 0a47 	vsub.f32	s0, s0, s14
 801a58a:	2101      	movs	r1, #1
 801a58c:	2300      	movs	r3, #0
 801a58e:	e7e6      	b.n	801a55e <arm_sin_f32+0x4e>
 801a590:	3e22f983 	.word	0x3e22f983
 801a594:	44000000 	.word	0x44000000
 801a598:	0801c4d0 	.word	0x0801c4d0

0801a59c <arm_cos_f32>:
 801a59c:	eddf 7a21 	vldr	s15, [pc, #132]	; 801a624 <arm_cos_f32+0x88>
 801a5a0:	ee20 0a27 	vmul.f32	s0, s0, s15
 801a5a4:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 801a5a8:	ee30 0a27 	vadd.f32	s0, s0, s15
 801a5ac:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801a5b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a5b4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801a5b8:	d504      	bpl.n	801a5c4 <arm_cos_f32+0x28>
 801a5ba:	ee17 3a90 	vmov	r3, s15
 801a5be:	3b01      	subs	r3, #1
 801a5c0:	ee07 3a90 	vmov	s15, r3
 801a5c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a5c8:	ed9f 7a17 	vldr	s14, [pc, #92]	; 801a628 <arm_cos_f32+0x8c>
 801a5cc:	ee30 0a67 	vsub.f32	s0, s0, s15
 801a5d0:	ee20 0a07 	vmul.f32	s0, s0, s14
 801a5d4:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801a5d8:	ee17 3a90 	vmov	r3, s15
 801a5dc:	b29b      	uxth	r3, r3
 801a5de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a5e2:	d21a      	bcs.n	801a61a <arm_cos_f32+0x7e>
 801a5e4:	ee07 3a90 	vmov	s15, r3
 801a5e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801a5ec:	1c59      	adds	r1, r3, #1
 801a5ee:	ee30 0a67 	vsub.f32	s0, s0, s15
 801a5f2:	4a0e      	ldr	r2, [pc, #56]	; (801a62c <arm_cos_f32+0x90>)
 801a5f4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801a5f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a5fc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801a600:	ed93 7a00 	vldr	s14, [r3]
 801a604:	edd2 6a00 	vldr	s13, [r2]
 801a608:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801a60c:	ee20 0a26 	vmul.f32	s0, s0, s13
 801a610:	ee67 7a87 	vmul.f32	s15, s15, s14
 801a614:	ee37 0a80 	vadd.f32	s0, s15, s0
 801a618:	4770      	bx	lr
 801a61a:	ee30 0a47 	vsub.f32	s0, s0, s14
 801a61e:	2101      	movs	r1, #1
 801a620:	2300      	movs	r3, #0
 801a622:	e7e6      	b.n	801a5f2 <arm_cos_f32+0x56>
 801a624:	3e22f983 	.word	0x3e22f983
 801a628:	44000000 	.word	0x44000000
 801a62c:	0801c4d0 	.word	0x0801c4d0

0801a630 <arm_sub_f32>:
 801a630:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 801a634:	b4f0      	push	{r4, r5, r6, r7}
 801a636:	d033      	beq.n	801a6a0 <arm_sub_f32+0x70>
 801a638:	f100 0610 	add.w	r6, r0, #16
 801a63c:	f101 0510 	add.w	r5, r1, #16
 801a640:	f102 0410 	add.w	r4, r2, #16
 801a644:	4667      	mov	r7, ip
 801a646:	ed15 7a04 	vldr	s14, [r5, #-16]
 801a64a:	ed56 7a04 	vldr	s15, [r6, #-16]
 801a64e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a652:	3f01      	subs	r7, #1
 801a654:	ed44 7a04 	vstr	s15, [r4, #-16]
 801a658:	ed15 7a03 	vldr	s14, [r5, #-12]
 801a65c:	ed56 7a03 	vldr	s15, [r6, #-12]
 801a660:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a664:	f106 0610 	add.w	r6, r6, #16
 801a668:	ed44 7a03 	vstr	s15, [r4, #-12]
 801a66c:	ed15 7a02 	vldr	s14, [r5, #-8]
 801a670:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 801a674:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a678:	f105 0510 	add.w	r5, r5, #16
 801a67c:	ed44 7a02 	vstr	s15, [r4, #-8]
 801a680:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 801a684:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 801a688:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a68c:	f104 0410 	add.w	r4, r4, #16
 801a690:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 801a694:	d1d7      	bne.n	801a646 <arm_sub_f32+0x16>
 801a696:	ea4f 140c 	mov.w	r4, ip, lsl #4
 801a69a:	4420      	add	r0, r4
 801a69c:	4421      	add	r1, r4
 801a69e:	4422      	add	r2, r4
 801a6a0:	f013 0303 	ands.w	r3, r3, #3
 801a6a4:	d01b      	beq.n	801a6de <arm_sub_f32+0xae>
 801a6a6:	edd0 7a00 	vldr	s15, [r0]
 801a6aa:	ed91 7a00 	vldr	s14, [r1]
 801a6ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a6b2:	3b01      	subs	r3, #1
 801a6b4:	edc2 7a00 	vstr	s15, [r2]
 801a6b8:	d011      	beq.n	801a6de <arm_sub_f32+0xae>
 801a6ba:	edd0 7a01 	vldr	s15, [r0, #4]
 801a6be:	ed91 7a01 	vldr	s14, [r1, #4]
 801a6c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a6c6:	2b01      	cmp	r3, #1
 801a6c8:	edc2 7a01 	vstr	s15, [r2, #4]
 801a6cc:	d007      	beq.n	801a6de <arm_sub_f32+0xae>
 801a6ce:	edd0 7a02 	vldr	s15, [r0, #8]
 801a6d2:	ed91 7a02 	vldr	s14, [r1, #8]
 801a6d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a6da:	edc2 7a02 	vstr	s15, [r2, #8]
 801a6de:	bcf0      	pop	{r4, r5, r6, r7}
 801a6e0:	4770      	bx	lr
 801a6e2:	bf00      	nop

0801a6e4 <arm_scale_f32>:
 801a6e4:	b470      	push	{r4, r5, r6}
 801a6e6:	0896      	lsrs	r6, r2, #2
 801a6e8:	d025      	beq.n	801a736 <arm_scale_f32+0x52>
 801a6ea:	f100 0410 	add.w	r4, r0, #16
 801a6ee:	f101 0310 	add.w	r3, r1, #16
 801a6f2:	4635      	mov	r5, r6
 801a6f4:	ed54 7a04 	vldr	s15, [r4, #-16]
 801a6f8:	ee67 7a80 	vmul.f32	s15, s15, s0
 801a6fc:	3d01      	subs	r5, #1
 801a6fe:	ed43 7a04 	vstr	s15, [r3, #-16]
 801a702:	ed54 7a03 	vldr	s15, [r4, #-12]
 801a706:	ee67 7a80 	vmul.f32	s15, s15, s0
 801a70a:	f104 0410 	add.w	r4, r4, #16
 801a70e:	ed43 7a03 	vstr	s15, [r3, #-12]
 801a712:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 801a716:	ee67 7a80 	vmul.f32	s15, s15, s0
 801a71a:	f103 0310 	add.w	r3, r3, #16
 801a71e:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 801a722:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 801a726:	ee67 7a80 	vmul.f32	s15, s15, s0
 801a72a:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 801a72e:	d1e1      	bne.n	801a6f4 <arm_scale_f32+0x10>
 801a730:	0136      	lsls	r6, r6, #4
 801a732:	4430      	add	r0, r6
 801a734:	4431      	add	r1, r6
 801a736:	f012 0203 	ands.w	r2, r2, #3
 801a73a:	d015      	beq.n	801a768 <arm_scale_f32+0x84>
 801a73c:	edd0 7a00 	vldr	s15, [r0]
 801a740:	ee67 7a80 	vmul.f32	s15, s15, s0
 801a744:	3a01      	subs	r2, #1
 801a746:	edc1 7a00 	vstr	s15, [r1]
 801a74a:	d00d      	beq.n	801a768 <arm_scale_f32+0x84>
 801a74c:	edd0 7a01 	vldr	s15, [r0, #4]
 801a750:	ee67 7a80 	vmul.f32	s15, s15, s0
 801a754:	2a01      	cmp	r2, #1
 801a756:	edc1 7a01 	vstr	s15, [r1, #4]
 801a75a:	d005      	beq.n	801a768 <arm_scale_f32+0x84>
 801a75c:	edd0 7a02 	vldr	s15, [r0, #8]
 801a760:	ee27 0a80 	vmul.f32	s0, s15, s0
 801a764:	ed81 0a02 	vstr	s0, [r1, #8]
 801a768:	bc70      	pop	{r4, r5, r6}
 801a76a:	4770      	bx	lr

0801a76c <arm_dot_prod_f32>:
 801a76c:	b4f0      	push	{r4, r5, r6, r7}
 801a76e:	0897      	lsrs	r7, r2, #2
 801a770:	eddf 5a29 	vldr	s11, [pc, #164]	; 801a818 <arm_dot_prod_f32+0xac>
 801a774:	d02d      	beq.n	801a7d2 <arm_dot_prod_f32+0x66>
 801a776:	f100 0510 	add.w	r5, r0, #16
 801a77a:	f101 0410 	add.w	r4, r1, #16
 801a77e:	463e      	mov	r6, r7
 801a780:	ed55 6a04 	vldr	s13, [r5, #-16]
 801a784:	ed54 3a04 	vldr	s7, [r4, #-16]
 801a788:	ed15 7a03 	vldr	s14, [r5, #-12]
 801a78c:	ed14 4a03 	vldr	s8, [r4, #-12]
 801a790:	ed55 7a02 	vldr	s15, [r5, #-8]
 801a794:	ed54 4a02 	vldr	s9, [r4, #-8]
 801a798:	ed15 6a01 	vldr	s12, [r5, #-4]
 801a79c:	ed14 5a01 	vldr	s10, [r4, #-4]
 801a7a0:	ee66 6aa3 	vmul.f32	s13, s13, s7
 801a7a4:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a7a8:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801a7ac:	ee67 7aa4 	vmul.f32	s15, s15, s9
 801a7b0:	ee37 7a26 	vadd.f32	s14, s14, s13
 801a7b4:	ee66 6a05 	vmul.f32	s13, s12, s10
 801a7b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a7bc:	3e01      	subs	r6, #1
 801a7be:	f105 0510 	add.w	r5, r5, #16
 801a7c2:	ee76 5aa7 	vadd.f32	s11, s13, s15
 801a7c6:	f104 0410 	add.w	r4, r4, #16
 801a7ca:	d1d9      	bne.n	801a780 <arm_dot_prod_f32+0x14>
 801a7cc:	013f      	lsls	r7, r7, #4
 801a7ce:	4438      	add	r0, r7
 801a7d0:	4439      	add	r1, r7
 801a7d2:	f012 0203 	ands.w	r2, r2, #3
 801a7d6:	d01b      	beq.n	801a810 <arm_dot_prod_f32+0xa4>
 801a7d8:	edd1 7a00 	vldr	s15, [r1]
 801a7dc:	ed90 7a00 	vldr	s14, [r0]
 801a7e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 801a7e4:	3a01      	subs	r2, #1
 801a7e6:	ee75 5aa7 	vadd.f32	s11, s11, s15
 801a7ea:	d011      	beq.n	801a810 <arm_dot_prod_f32+0xa4>
 801a7ec:	edd1 7a01 	vldr	s15, [r1, #4]
 801a7f0:	ed90 7a01 	vldr	s14, [r0, #4]
 801a7f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 801a7f8:	2a01      	cmp	r2, #1
 801a7fa:	ee75 5aa7 	vadd.f32	s11, s11, s15
 801a7fe:	d007      	beq.n	801a810 <arm_dot_prod_f32+0xa4>
 801a800:	edd0 7a02 	vldr	s15, [r0, #8]
 801a804:	ed91 7a02 	vldr	s14, [r1, #8]
 801a808:	ee67 7a87 	vmul.f32	s15, s15, s14
 801a80c:	ee75 5aa7 	vadd.f32	s11, s11, s15
 801a810:	edc3 5a00 	vstr	s11, [r3]
 801a814:	bcf0      	pop	{r4, r5, r6, r7}
 801a816:	4770      	bx	lr
 801a818:	00000000 	.word	0x00000000

0801a81c <arm_add_f32>:
 801a81c:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 801a820:	b4f0      	push	{r4, r5, r6, r7}
 801a822:	d033      	beq.n	801a88c <arm_add_f32+0x70>
 801a824:	f100 0610 	add.w	r6, r0, #16
 801a828:	f101 0510 	add.w	r5, r1, #16
 801a82c:	f102 0410 	add.w	r4, r2, #16
 801a830:	4667      	mov	r7, ip
 801a832:	ed15 7a04 	vldr	s14, [r5, #-16]
 801a836:	ed56 7a04 	vldr	s15, [r6, #-16]
 801a83a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a83e:	3f01      	subs	r7, #1
 801a840:	ed44 7a04 	vstr	s15, [r4, #-16]
 801a844:	ed15 7a03 	vldr	s14, [r5, #-12]
 801a848:	ed56 7a03 	vldr	s15, [r6, #-12]
 801a84c:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a850:	f106 0610 	add.w	r6, r6, #16
 801a854:	ed44 7a03 	vstr	s15, [r4, #-12]
 801a858:	ed15 7a02 	vldr	s14, [r5, #-8]
 801a85c:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 801a860:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a864:	f105 0510 	add.w	r5, r5, #16
 801a868:	ed44 7a02 	vstr	s15, [r4, #-8]
 801a86c:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 801a870:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 801a874:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a878:	f104 0410 	add.w	r4, r4, #16
 801a87c:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 801a880:	d1d7      	bne.n	801a832 <arm_add_f32+0x16>
 801a882:	ea4f 140c 	mov.w	r4, ip, lsl #4
 801a886:	4420      	add	r0, r4
 801a888:	4421      	add	r1, r4
 801a88a:	4422      	add	r2, r4
 801a88c:	f013 0303 	ands.w	r3, r3, #3
 801a890:	d01b      	beq.n	801a8ca <arm_add_f32+0xae>
 801a892:	edd1 7a00 	vldr	s15, [r1]
 801a896:	ed90 7a00 	vldr	s14, [r0]
 801a89a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a89e:	3b01      	subs	r3, #1
 801a8a0:	edc2 7a00 	vstr	s15, [r2]
 801a8a4:	d011      	beq.n	801a8ca <arm_add_f32+0xae>
 801a8a6:	edd0 7a01 	vldr	s15, [r0, #4]
 801a8aa:	ed91 7a01 	vldr	s14, [r1, #4]
 801a8ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a8b2:	2b01      	cmp	r3, #1
 801a8b4:	edc2 7a01 	vstr	s15, [r2, #4]
 801a8b8:	d007      	beq.n	801a8ca <arm_add_f32+0xae>
 801a8ba:	edd0 7a02 	vldr	s15, [r0, #8]
 801a8be:	ed91 7a02 	vldr	s14, [r1, #8]
 801a8c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a8c6:	edc2 7a02 	vstr	s15, [r2, #8]
 801a8ca:	bcf0      	pop	{r4, r5, r6, r7}
 801a8cc:	4770      	bx	lr
 801a8ce:	bf00      	nop

0801a8d0 <__errno>:
 801a8d0:	4b01      	ldr	r3, [pc, #4]	; (801a8d8 <__errno+0x8>)
 801a8d2:	6818      	ldr	r0, [r3, #0]
 801a8d4:	4770      	bx	lr
 801a8d6:	bf00      	nop
 801a8d8:	20000274 	.word	0x20000274

0801a8dc <__libc_init_array>:
 801a8dc:	b570      	push	{r4, r5, r6, lr}
 801a8de:	4e0d      	ldr	r6, [pc, #52]	; (801a914 <__libc_init_array+0x38>)
 801a8e0:	4c0d      	ldr	r4, [pc, #52]	; (801a918 <__libc_init_array+0x3c>)
 801a8e2:	1ba4      	subs	r4, r4, r6
 801a8e4:	10a4      	asrs	r4, r4, #2
 801a8e6:	2500      	movs	r5, #0
 801a8e8:	42a5      	cmp	r5, r4
 801a8ea:	d109      	bne.n	801a900 <__libc_init_array+0x24>
 801a8ec:	4e0b      	ldr	r6, [pc, #44]	; (801a91c <__libc_init_array+0x40>)
 801a8ee:	4c0c      	ldr	r4, [pc, #48]	; (801a920 <__libc_init_array+0x44>)
 801a8f0:	f001 f8d4 	bl	801ba9c <_init>
 801a8f4:	1ba4      	subs	r4, r4, r6
 801a8f6:	10a4      	asrs	r4, r4, #2
 801a8f8:	2500      	movs	r5, #0
 801a8fa:	42a5      	cmp	r5, r4
 801a8fc:	d105      	bne.n	801a90a <__libc_init_array+0x2e>
 801a8fe:	bd70      	pop	{r4, r5, r6, pc}
 801a900:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801a904:	4798      	blx	r3
 801a906:	3501      	adds	r5, #1
 801a908:	e7ee      	b.n	801a8e8 <__libc_init_array+0xc>
 801a90a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801a90e:	4798      	blx	r3
 801a910:	3501      	adds	r5, #1
 801a912:	e7f2      	b.n	801a8fa <__libc_init_array+0x1e>
 801a914:	0801cd88 	.word	0x0801cd88
 801a918:	0801cd88 	.word	0x0801cd88
 801a91c:	0801cd88 	.word	0x0801cd88
 801a920:	0801cd8c 	.word	0x0801cd8c

0801a924 <memcpy>:
 801a924:	b510      	push	{r4, lr}
 801a926:	1e43      	subs	r3, r0, #1
 801a928:	440a      	add	r2, r1
 801a92a:	4291      	cmp	r1, r2
 801a92c:	d100      	bne.n	801a930 <memcpy+0xc>
 801a92e:	bd10      	pop	{r4, pc}
 801a930:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a934:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a938:	e7f7      	b.n	801a92a <memcpy+0x6>

0801a93a <memset>:
 801a93a:	4402      	add	r2, r0
 801a93c:	4603      	mov	r3, r0
 801a93e:	4293      	cmp	r3, r2
 801a940:	d100      	bne.n	801a944 <memset+0xa>
 801a942:	4770      	bx	lr
 801a944:	f803 1b01 	strb.w	r1, [r3], #1
 801a948:	e7f9      	b.n	801a93e <memset+0x4>
	...

0801a94c <pow>:
 801a94c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a950:	ed2d 8b04 	vpush	{d8-d9}
 801a954:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 801ac28 <pow+0x2dc>
 801a958:	b08d      	sub	sp, #52	; 0x34
 801a95a:	ec57 6b10 	vmov	r6, r7, d0
 801a95e:	ec55 4b11 	vmov	r4, r5, d1
 801a962:	f000 f9b5 	bl	801acd0 <__ieee754_pow>
 801a966:	f999 3000 	ldrsb.w	r3, [r9]
 801a96a:	9300      	str	r3, [sp, #0]
 801a96c:	3301      	adds	r3, #1
 801a96e:	eeb0 8a40 	vmov.f32	s16, s0
 801a972:	eef0 8a60 	vmov.f32	s17, s1
 801a976:	46c8      	mov	r8, r9
 801a978:	d05f      	beq.n	801aa3a <pow+0xee>
 801a97a:	4622      	mov	r2, r4
 801a97c:	462b      	mov	r3, r5
 801a97e:	4620      	mov	r0, r4
 801a980:	4629      	mov	r1, r5
 801a982:	f7e6 f85d 	bl	8000a40 <__aeabi_dcmpun>
 801a986:	4683      	mov	fp, r0
 801a988:	2800      	cmp	r0, #0
 801a98a:	d156      	bne.n	801aa3a <pow+0xee>
 801a98c:	4632      	mov	r2, r6
 801a98e:	463b      	mov	r3, r7
 801a990:	4630      	mov	r0, r6
 801a992:	4639      	mov	r1, r7
 801a994:	f7e6 f854 	bl	8000a40 <__aeabi_dcmpun>
 801a998:	9001      	str	r0, [sp, #4]
 801a99a:	b1e8      	cbz	r0, 801a9d8 <pow+0x8c>
 801a99c:	2200      	movs	r2, #0
 801a99e:	2300      	movs	r3, #0
 801a9a0:	4620      	mov	r0, r4
 801a9a2:	4629      	mov	r1, r5
 801a9a4:	f7e6 f81a 	bl	80009dc <__aeabi_dcmpeq>
 801a9a8:	2800      	cmp	r0, #0
 801a9aa:	d046      	beq.n	801aa3a <pow+0xee>
 801a9ac:	2301      	movs	r3, #1
 801a9ae:	9302      	str	r3, [sp, #8]
 801a9b0:	4b96      	ldr	r3, [pc, #600]	; (801ac0c <pow+0x2c0>)
 801a9b2:	9303      	str	r3, [sp, #12]
 801a9b4:	4b96      	ldr	r3, [pc, #600]	; (801ac10 <pow+0x2c4>)
 801a9b6:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801a9ba:	2200      	movs	r2, #0
 801a9bc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801a9c0:	9b00      	ldr	r3, [sp, #0]
 801a9c2:	2b02      	cmp	r3, #2
 801a9c4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801a9c8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801a9cc:	d033      	beq.n	801aa36 <pow+0xea>
 801a9ce:	a802      	add	r0, sp, #8
 801a9d0:	f000 ff50 	bl	801b874 <matherr>
 801a9d4:	bb48      	cbnz	r0, 801aa2a <pow+0xde>
 801a9d6:	e05d      	b.n	801aa94 <pow+0x148>
 801a9d8:	f04f 0a00 	mov.w	sl, #0
 801a9dc:	f04f 0b00 	mov.w	fp, #0
 801a9e0:	4652      	mov	r2, sl
 801a9e2:	465b      	mov	r3, fp
 801a9e4:	4630      	mov	r0, r6
 801a9e6:	4639      	mov	r1, r7
 801a9e8:	f7e5 fff8 	bl	80009dc <__aeabi_dcmpeq>
 801a9ec:	ec4b ab19 	vmov	d9, sl, fp
 801a9f0:	2800      	cmp	r0, #0
 801a9f2:	d054      	beq.n	801aa9e <pow+0x152>
 801a9f4:	4652      	mov	r2, sl
 801a9f6:	465b      	mov	r3, fp
 801a9f8:	4620      	mov	r0, r4
 801a9fa:	4629      	mov	r1, r5
 801a9fc:	f7e5 ffee 	bl	80009dc <__aeabi_dcmpeq>
 801aa00:	4680      	mov	r8, r0
 801aa02:	b318      	cbz	r0, 801aa4c <pow+0x100>
 801aa04:	2301      	movs	r3, #1
 801aa06:	9302      	str	r3, [sp, #8]
 801aa08:	4b80      	ldr	r3, [pc, #512]	; (801ac0c <pow+0x2c0>)
 801aa0a:	9303      	str	r3, [sp, #12]
 801aa0c:	9b01      	ldr	r3, [sp, #4]
 801aa0e:	930a      	str	r3, [sp, #40]	; 0x28
 801aa10:	9b00      	ldr	r3, [sp, #0]
 801aa12:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801aa16:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801aa1a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801aa1e:	2b00      	cmp	r3, #0
 801aa20:	d0d5      	beq.n	801a9ce <pow+0x82>
 801aa22:	4b7b      	ldr	r3, [pc, #492]	; (801ac10 <pow+0x2c4>)
 801aa24:	2200      	movs	r2, #0
 801aa26:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801aa2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801aa2c:	b11b      	cbz	r3, 801aa36 <pow+0xea>
 801aa2e:	f7ff ff4f 	bl	801a8d0 <__errno>
 801aa32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801aa34:	6003      	str	r3, [r0, #0]
 801aa36:	ed9d 8b08 	vldr	d8, [sp, #32]
 801aa3a:	eeb0 0a48 	vmov.f32	s0, s16
 801aa3e:	eef0 0a68 	vmov.f32	s1, s17
 801aa42:	b00d      	add	sp, #52	; 0x34
 801aa44:	ecbd 8b04 	vpop	{d8-d9}
 801aa48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa4c:	ec45 4b10 	vmov	d0, r4, r5
 801aa50:	f000 ff08 	bl	801b864 <finite>
 801aa54:	2800      	cmp	r0, #0
 801aa56:	d0f0      	beq.n	801aa3a <pow+0xee>
 801aa58:	4652      	mov	r2, sl
 801aa5a:	465b      	mov	r3, fp
 801aa5c:	4620      	mov	r0, r4
 801aa5e:	4629      	mov	r1, r5
 801aa60:	f7e5 ffc6 	bl	80009f0 <__aeabi_dcmplt>
 801aa64:	2800      	cmp	r0, #0
 801aa66:	d0e8      	beq.n	801aa3a <pow+0xee>
 801aa68:	2301      	movs	r3, #1
 801aa6a:	9302      	str	r3, [sp, #8]
 801aa6c:	4b67      	ldr	r3, [pc, #412]	; (801ac0c <pow+0x2c0>)
 801aa6e:	9303      	str	r3, [sp, #12]
 801aa70:	f999 3000 	ldrsb.w	r3, [r9]
 801aa74:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 801aa78:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801aa7c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801aa80:	b913      	cbnz	r3, 801aa88 <pow+0x13c>
 801aa82:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801aa86:	e7a2      	b.n	801a9ce <pow+0x82>
 801aa88:	4962      	ldr	r1, [pc, #392]	; (801ac14 <pow+0x2c8>)
 801aa8a:	2000      	movs	r0, #0
 801aa8c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801aa90:	2b02      	cmp	r3, #2
 801aa92:	d19c      	bne.n	801a9ce <pow+0x82>
 801aa94:	f7ff ff1c 	bl	801a8d0 <__errno>
 801aa98:	2321      	movs	r3, #33	; 0x21
 801aa9a:	6003      	str	r3, [r0, #0]
 801aa9c:	e7c5      	b.n	801aa2a <pow+0xde>
 801aa9e:	eeb0 0a48 	vmov.f32	s0, s16
 801aaa2:	eef0 0a68 	vmov.f32	s1, s17
 801aaa6:	f000 fedd 	bl	801b864 <finite>
 801aaaa:	9000      	str	r0, [sp, #0]
 801aaac:	2800      	cmp	r0, #0
 801aaae:	f040 8081 	bne.w	801abb4 <pow+0x268>
 801aab2:	ec47 6b10 	vmov	d0, r6, r7
 801aab6:	f000 fed5 	bl	801b864 <finite>
 801aaba:	2800      	cmp	r0, #0
 801aabc:	d07a      	beq.n	801abb4 <pow+0x268>
 801aabe:	ec45 4b10 	vmov	d0, r4, r5
 801aac2:	f000 fecf 	bl	801b864 <finite>
 801aac6:	2800      	cmp	r0, #0
 801aac8:	d074      	beq.n	801abb4 <pow+0x268>
 801aaca:	ec53 2b18 	vmov	r2, r3, d8
 801aace:	ee18 0a10 	vmov	r0, s16
 801aad2:	4619      	mov	r1, r3
 801aad4:	f7e5 ffb4 	bl	8000a40 <__aeabi_dcmpun>
 801aad8:	f999 9000 	ldrsb.w	r9, [r9]
 801aadc:	4b4b      	ldr	r3, [pc, #300]	; (801ac0c <pow+0x2c0>)
 801aade:	b1b0      	cbz	r0, 801ab0e <pow+0x1c2>
 801aae0:	2201      	movs	r2, #1
 801aae2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801aae6:	9b00      	ldr	r3, [sp, #0]
 801aae8:	930a      	str	r3, [sp, #40]	; 0x28
 801aaea:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801aaee:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801aaf2:	f1b9 0f00 	cmp.w	r9, #0
 801aaf6:	d0c4      	beq.n	801aa82 <pow+0x136>
 801aaf8:	4652      	mov	r2, sl
 801aafa:	465b      	mov	r3, fp
 801aafc:	4650      	mov	r0, sl
 801aafe:	4659      	mov	r1, fp
 801ab00:	f7e5 fe2e 	bl	8000760 <__aeabi_ddiv>
 801ab04:	f1b9 0f02 	cmp.w	r9, #2
 801ab08:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801ab0c:	e7c1      	b.n	801aa92 <pow+0x146>
 801ab0e:	2203      	movs	r2, #3
 801ab10:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801ab14:	900a      	str	r0, [sp, #40]	; 0x28
 801ab16:	4629      	mov	r1, r5
 801ab18:	4620      	mov	r0, r4
 801ab1a:	2200      	movs	r2, #0
 801ab1c:	4b3e      	ldr	r3, [pc, #248]	; (801ac18 <pow+0x2cc>)
 801ab1e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801ab22:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801ab26:	f7e5 fcf1 	bl	800050c <__aeabi_dmul>
 801ab2a:	4604      	mov	r4, r0
 801ab2c:	460d      	mov	r5, r1
 801ab2e:	f1b9 0f00 	cmp.w	r9, #0
 801ab32:	d124      	bne.n	801ab7e <pow+0x232>
 801ab34:	4b39      	ldr	r3, [pc, #228]	; (801ac1c <pow+0x2d0>)
 801ab36:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801ab3a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801ab3e:	4630      	mov	r0, r6
 801ab40:	4652      	mov	r2, sl
 801ab42:	465b      	mov	r3, fp
 801ab44:	4639      	mov	r1, r7
 801ab46:	f7e5 ff53 	bl	80009f0 <__aeabi_dcmplt>
 801ab4a:	2800      	cmp	r0, #0
 801ab4c:	d056      	beq.n	801abfc <pow+0x2b0>
 801ab4e:	ec45 4b10 	vmov	d0, r4, r5
 801ab52:	f000 fe99 	bl	801b888 <rint>
 801ab56:	4622      	mov	r2, r4
 801ab58:	462b      	mov	r3, r5
 801ab5a:	ec51 0b10 	vmov	r0, r1, d0
 801ab5e:	f7e5 ff3d 	bl	80009dc <__aeabi_dcmpeq>
 801ab62:	b920      	cbnz	r0, 801ab6e <pow+0x222>
 801ab64:	4b2e      	ldr	r3, [pc, #184]	; (801ac20 <pow+0x2d4>)
 801ab66:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801ab6a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801ab6e:	f998 3000 	ldrsb.w	r3, [r8]
 801ab72:	2b02      	cmp	r3, #2
 801ab74:	d142      	bne.n	801abfc <pow+0x2b0>
 801ab76:	f7ff feab 	bl	801a8d0 <__errno>
 801ab7a:	2322      	movs	r3, #34	; 0x22
 801ab7c:	e78d      	b.n	801aa9a <pow+0x14e>
 801ab7e:	4b29      	ldr	r3, [pc, #164]	; (801ac24 <pow+0x2d8>)
 801ab80:	2200      	movs	r2, #0
 801ab82:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801ab86:	4630      	mov	r0, r6
 801ab88:	4652      	mov	r2, sl
 801ab8a:	465b      	mov	r3, fp
 801ab8c:	4639      	mov	r1, r7
 801ab8e:	f7e5 ff2f 	bl	80009f0 <__aeabi_dcmplt>
 801ab92:	2800      	cmp	r0, #0
 801ab94:	d0eb      	beq.n	801ab6e <pow+0x222>
 801ab96:	ec45 4b10 	vmov	d0, r4, r5
 801ab9a:	f000 fe75 	bl	801b888 <rint>
 801ab9e:	4622      	mov	r2, r4
 801aba0:	462b      	mov	r3, r5
 801aba2:	ec51 0b10 	vmov	r0, r1, d0
 801aba6:	f7e5 ff19 	bl	80009dc <__aeabi_dcmpeq>
 801abaa:	2800      	cmp	r0, #0
 801abac:	d1df      	bne.n	801ab6e <pow+0x222>
 801abae:	2200      	movs	r2, #0
 801abb0:	4b18      	ldr	r3, [pc, #96]	; (801ac14 <pow+0x2c8>)
 801abb2:	e7da      	b.n	801ab6a <pow+0x21e>
 801abb4:	2200      	movs	r2, #0
 801abb6:	2300      	movs	r3, #0
 801abb8:	ec51 0b18 	vmov	r0, r1, d8
 801abbc:	f7e5 ff0e 	bl	80009dc <__aeabi_dcmpeq>
 801abc0:	2800      	cmp	r0, #0
 801abc2:	f43f af3a 	beq.w	801aa3a <pow+0xee>
 801abc6:	ec47 6b10 	vmov	d0, r6, r7
 801abca:	f000 fe4b 	bl	801b864 <finite>
 801abce:	2800      	cmp	r0, #0
 801abd0:	f43f af33 	beq.w	801aa3a <pow+0xee>
 801abd4:	ec45 4b10 	vmov	d0, r4, r5
 801abd8:	f000 fe44 	bl	801b864 <finite>
 801abdc:	2800      	cmp	r0, #0
 801abde:	f43f af2c 	beq.w	801aa3a <pow+0xee>
 801abe2:	2304      	movs	r3, #4
 801abe4:	9302      	str	r3, [sp, #8]
 801abe6:	4b09      	ldr	r3, [pc, #36]	; (801ac0c <pow+0x2c0>)
 801abe8:	9303      	str	r3, [sp, #12]
 801abea:	2300      	movs	r3, #0
 801abec:	930a      	str	r3, [sp, #40]	; 0x28
 801abee:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801abf2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801abf6:	ed8d 9b08 	vstr	d9, [sp, #32]
 801abfa:	e7b8      	b.n	801ab6e <pow+0x222>
 801abfc:	a802      	add	r0, sp, #8
 801abfe:	f000 fe39 	bl	801b874 <matherr>
 801ac02:	2800      	cmp	r0, #0
 801ac04:	f47f af11 	bne.w	801aa2a <pow+0xde>
 801ac08:	e7b5      	b.n	801ab76 <pow+0x22a>
 801ac0a:	bf00      	nop
 801ac0c:	0801cd34 	.word	0x0801cd34
 801ac10:	3ff00000 	.word	0x3ff00000
 801ac14:	fff00000 	.word	0xfff00000
 801ac18:	3fe00000 	.word	0x3fe00000
 801ac1c:	47efffff 	.word	0x47efffff
 801ac20:	c7efffff 	.word	0xc7efffff
 801ac24:	7ff00000 	.word	0x7ff00000
 801ac28:	200002d8 	.word	0x200002d8

0801ac2c <sqrtf>:
 801ac2c:	b510      	push	{r4, lr}
 801ac2e:	ed2d 8b02 	vpush	{d8}
 801ac32:	b08a      	sub	sp, #40	; 0x28
 801ac34:	eeb0 8a40 	vmov.f32	s16, s0
 801ac38:	f000 fe08 	bl	801b84c <__ieee754_sqrtf>
 801ac3c:	4b21      	ldr	r3, [pc, #132]	; (801acc4 <sqrtf+0x98>)
 801ac3e:	f993 4000 	ldrsb.w	r4, [r3]
 801ac42:	1c63      	adds	r3, r4, #1
 801ac44:	d02c      	beq.n	801aca0 <sqrtf+0x74>
 801ac46:	eeb4 8a48 	vcmp.f32	s16, s16
 801ac4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ac4e:	d627      	bvs.n	801aca0 <sqrtf+0x74>
 801ac50:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801ac54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ac58:	d522      	bpl.n	801aca0 <sqrtf+0x74>
 801ac5a:	2301      	movs	r3, #1
 801ac5c:	9300      	str	r3, [sp, #0]
 801ac5e:	4b1a      	ldr	r3, [pc, #104]	; (801acc8 <sqrtf+0x9c>)
 801ac60:	9301      	str	r3, [sp, #4]
 801ac62:	ee18 0a10 	vmov	r0, s16
 801ac66:	2300      	movs	r3, #0
 801ac68:	9308      	str	r3, [sp, #32]
 801ac6a:	f7e5 fbf7 	bl	800045c <__aeabi_f2d>
 801ac6e:	2200      	movs	r2, #0
 801ac70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801ac74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ac78:	2300      	movs	r3, #0
 801ac7a:	b9ac      	cbnz	r4, 801aca8 <sqrtf+0x7c>
 801ac7c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801ac80:	4668      	mov	r0, sp
 801ac82:	f000 fdf7 	bl	801b874 <matherr>
 801ac86:	b1b8      	cbz	r0, 801acb8 <sqrtf+0x8c>
 801ac88:	9b08      	ldr	r3, [sp, #32]
 801ac8a:	b11b      	cbz	r3, 801ac94 <sqrtf+0x68>
 801ac8c:	f7ff fe20 	bl	801a8d0 <__errno>
 801ac90:	9b08      	ldr	r3, [sp, #32]
 801ac92:	6003      	str	r3, [r0, #0]
 801ac94:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ac98:	f7e5 fee8 	bl	8000a6c <__aeabi_d2f>
 801ac9c:	ee00 0a10 	vmov	s0, r0
 801aca0:	b00a      	add	sp, #40	; 0x28
 801aca2:	ecbd 8b02 	vpop	{d8}
 801aca6:	bd10      	pop	{r4, pc}
 801aca8:	4610      	mov	r0, r2
 801acaa:	4619      	mov	r1, r3
 801acac:	f7e5 fd58 	bl	8000760 <__aeabi_ddiv>
 801acb0:	2c02      	cmp	r4, #2
 801acb2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801acb6:	d1e3      	bne.n	801ac80 <sqrtf+0x54>
 801acb8:	f7ff fe0a 	bl	801a8d0 <__errno>
 801acbc:	2321      	movs	r3, #33	; 0x21
 801acbe:	6003      	str	r3, [r0, #0]
 801acc0:	e7e2      	b.n	801ac88 <sqrtf+0x5c>
 801acc2:	bf00      	nop
 801acc4:	200002d8 	.word	0x200002d8
 801acc8:	0801cd38 	.word	0x0801cd38
 801accc:	00000000 	.word	0x00000000

0801acd0 <__ieee754_pow>:
 801acd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801acd4:	b091      	sub	sp, #68	; 0x44
 801acd6:	ed8d 1b00 	vstr	d1, [sp]
 801acda:	e9dd 2900 	ldrd	r2, r9, [sp]
 801acde:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801ace2:	ea58 0302 	orrs.w	r3, r8, r2
 801ace6:	ec57 6b10 	vmov	r6, r7, d0
 801acea:	f000 84be 	beq.w	801b66a <__ieee754_pow+0x99a>
 801acee:	4b7a      	ldr	r3, [pc, #488]	; (801aed8 <__ieee754_pow+0x208>)
 801acf0:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801acf4:	429c      	cmp	r4, r3
 801acf6:	463d      	mov	r5, r7
 801acf8:	ee10 aa10 	vmov	sl, s0
 801acfc:	dc09      	bgt.n	801ad12 <__ieee754_pow+0x42>
 801acfe:	d103      	bne.n	801ad08 <__ieee754_pow+0x38>
 801ad00:	b93e      	cbnz	r6, 801ad12 <__ieee754_pow+0x42>
 801ad02:	45a0      	cmp	r8, r4
 801ad04:	dc0d      	bgt.n	801ad22 <__ieee754_pow+0x52>
 801ad06:	e001      	b.n	801ad0c <__ieee754_pow+0x3c>
 801ad08:	4598      	cmp	r8, r3
 801ad0a:	dc02      	bgt.n	801ad12 <__ieee754_pow+0x42>
 801ad0c:	4598      	cmp	r8, r3
 801ad0e:	d10e      	bne.n	801ad2e <__ieee754_pow+0x5e>
 801ad10:	b16a      	cbz	r2, 801ad2e <__ieee754_pow+0x5e>
 801ad12:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801ad16:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801ad1a:	ea54 030a 	orrs.w	r3, r4, sl
 801ad1e:	f000 84a4 	beq.w	801b66a <__ieee754_pow+0x99a>
 801ad22:	486e      	ldr	r0, [pc, #440]	; (801aedc <__ieee754_pow+0x20c>)
 801ad24:	b011      	add	sp, #68	; 0x44
 801ad26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad2a:	f000 bda5 	b.w	801b878 <nan>
 801ad2e:	2d00      	cmp	r5, #0
 801ad30:	da53      	bge.n	801adda <__ieee754_pow+0x10a>
 801ad32:	4b6b      	ldr	r3, [pc, #428]	; (801aee0 <__ieee754_pow+0x210>)
 801ad34:	4598      	cmp	r8, r3
 801ad36:	dc4d      	bgt.n	801add4 <__ieee754_pow+0x104>
 801ad38:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801ad3c:	4598      	cmp	r8, r3
 801ad3e:	dd4c      	ble.n	801adda <__ieee754_pow+0x10a>
 801ad40:	ea4f 5328 	mov.w	r3, r8, asr #20
 801ad44:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801ad48:	2b14      	cmp	r3, #20
 801ad4a:	dd26      	ble.n	801ad9a <__ieee754_pow+0xca>
 801ad4c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801ad50:	fa22 f103 	lsr.w	r1, r2, r3
 801ad54:	fa01 f303 	lsl.w	r3, r1, r3
 801ad58:	4293      	cmp	r3, r2
 801ad5a:	d13e      	bne.n	801adda <__ieee754_pow+0x10a>
 801ad5c:	f001 0101 	and.w	r1, r1, #1
 801ad60:	f1c1 0b02 	rsb	fp, r1, #2
 801ad64:	2a00      	cmp	r2, #0
 801ad66:	d15b      	bne.n	801ae20 <__ieee754_pow+0x150>
 801ad68:	4b5b      	ldr	r3, [pc, #364]	; (801aed8 <__ieee754_pow+0x208>)
 801ad6a:	4598      	cmp	r8, r3
 801ad6c:	d124      	bne.n	801adb8 <__ieee754_pow+0xe8>
 801ad6e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801ad72:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801ad76:	ea53 030a 	orrs.w	r3, r3, sl
 801ad7a:	f000 8476 	beq.w	801b66a <__ieee754_pow+0x99a>
 801ad7e:	4b59      	ldr	r3, [pc, #356]	; (801aee4 <__ieee754_pow+0x214>)
 801ad80:	429c      	cmp	r4, r3
 801ad82:	dd2d      	ble.n	801ade0 <__ieee754_pow+0x110>
 801ad84:	f1b9 0f00 	cmp.w	r9, #0
 801ad88:	f280 8473 	bge.w	801b672 <__ieee754_pow+0x9a2>
 801ad8c:	2000      	movs	r0, #0
 801ad8e:	2100      	movs	r1, #0
 801ad90:	ec41 0b10 	vmov	d0, r0, r1
 801ad94:	b011      	add	sp, #68	; 0x44
 801ad96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad9a:	2a00      	cmp	r2, #0
 801ad9c:	d13e      	bne.n	801ae1c <__ieee754_pow+0x14c>
 801ad9e:	f1c3 0314 	rsb	r3, r3, #20
 801ada2:	fa48 f103 	asr.w	r1, r8, r3
 801ada6:	fa01 f303 	lsl.w	r3, r1, r3
 801adaa:	4543      	cmp	r3, r8
 801adac:	f040 8469 	bne.w	801b682 <__ieee754_pow+0x9b2>
 801adb0:	f001 0101 	and.w	r1, r1, #1
 801adb4:	f1c1 0b02 	rsb	fp, r1, #2
 801adb8:	4b4b      	ldr	r3, [pc, #300]	; (801aee8 <__ieee754_pow+0x218>)
 801adba:	4598      	cmp	r8, r3
 801adbc:	d118      	bne.n	801adf0 <__ieee754_pow+0x120>
 801adbe:	f1b9 0f00 	cmp.w	r9, #0
 801adc2:	f280 845a 	bge.w	801b67a <__ieee754_pow+0x9aa>
 801adc6:	4948      	ldr	r1, [pc, #288]	; (801aee8 <__ieee754_pow+0x218>)
 801adc8:	4632      	mov	r2, r6
 801adca:	463b      	mov	r3, r7
 801adcc:	2000      	movs	r0, #0
 801adce:	f7e5 fcc7 	bl	8000760 <__aeabi_ddiv>
 801add2:	e7dd      	b.n	801ad90 <__ieee754_pow+0xc0>
 801add4:	f04f 0b02 	mov.w	fp, #2
 801add8:	e7c4      	b.n	801ad64 <__ieee754_pow+0x94>
 801adda:	f04f 0b00 	mov.w	fp, #0
 801adde:	e7c1      	b.n	801ad64 <__ieee754_pow+0x94>
 801ade0:	f1b9 0f00 	cmp.w	r9, #0
 801ade4:	dad2      	bge.n	801ad8c <__ieee754_pow+0xbc>
 801ade6:	e9dd 0300 	ldrd	r0, r3, [sp]
 801adea:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801adee:	e7cf      	b.n	801ad90 <__ieee754_pow+0xc0>
 801adf0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801adf4:	d106      	bne.n	801ae04 <__ieee754_pow+0x134>
 801adf6:	4632      	mov	r2, r6
 801adf8:	463b      	mov	r3, r7
 801adfa:	4610      	mov	r0, r2
 801adfc:	4619      	mov	r1, r3
 801adfe:	f7e5 fb85 	bl	800050c <__aeabi_dmul>
 801ae02:	e7c5      	b.n	801ad90 <__ieee754_pow+0xc0>
 801ae04:	4b39      	ldr	r3, [pc, #228]	; (801aeec <__ieee754_pow+0x21c>)
 801ae06:	4599      	cmp	r9, r3
 801ae08:	d10a      	bne.n	801ae20 <__ieee754_pow+0x150>
 801ae0a:	2d00      	cmp	r5, #0
 801ae0c:	db08      	blt.n	801ae20 <__ieee754_pow+0x150>
 801ae0e:	ec47 6b10 	vmov	d0, r6, r7
 801ae12:	b011      	add	sp, #68	; 0x44
 801ae14:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae18:	f000 bc68 	b.w	801b6ec <__ieee754_sqrt>
 801ae1c:	f04f 0b00 	mov.w	fp, #0
 801ae20:	ec47 6b10 	vmov	d0, r6, r7
 801ae24:	f000 fd15 	bl	801b852 <fabs>
 801ae28:	ec51 0b10 	vmov	r0, r1, d0
 801ae2c:	f1ba 0f00 	cmp.w	sl, #0
 801ae30:	d127      	bne.n	801ae82 <__ieee754_pow+0x1b2>
 801ae32:	b124      	cbz	r4, 801ae3e <__ieee754_pow+0x16e>
 801ae34:	4b2c      	ldr	r3, [pc, #176]	; (801aee8 <__ieee754_pow+0x218>)
 801ae36:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801ae3a:	429a      	cmp	r2, r3
 801ae3c:	d121      	bne.n	801ae82 <__ieee754_pow+0x1b2>
 801ae3e:	f1b9 0f00 	cmp.w	r9, #0
 801ae42:	da05      	bge.n	801ae50 <__ieee754_pow+0x180>
 801ae44:	4602      	mov	r2, r0
 801ae46:	460b      	mov	r3, r1
 801ae48:	2000      	movs	r0, #0
 801ae4a:	4927      	ldr	r1, [pc, #156]	; (801aee8 <__ieee754_pow+0x218>)
 801ae4c:	f7e5 fc88 	bl	8000760 <__aeabi_ddiv>
 801ae50:	2d00      	cmp	r5, #0
 801ae52:	da9d      	bge.n	801ad90 <__ieee754_pow+0xc0>
 801ae54:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801ae58:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801ae5c:	ea54 030b 	orrs.w	r3, r4, fp
 801ae60:	d108      	bne.n	801ae74 <__ieee754_pow+0x1a4>
 801ae62:	4602      	mov	r2, r0
 801ae64:	460b      	mov	r3, r1
 801ae66:	4610      	mov	r0, r2
 801ae68:	4619      	mov	r1, r3
 801ae6a:	f7e5 f997 	bl	800019c <__aeabi_dsub>
 801ae6e:	4602      	mov	r2, r0
 801ae70:	460b      	mov	r3, r1
 801ae72:	e7ac      	b.n	801adce <__ieee754_pow+0xfe>
 801ae74:	f1bb 0f01 	cmp.w	fp, #1
 801ae78:	d18a      	bne.n	801ad90 <__ieee754_pow+0xc0>
 801ae7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ae7e:	4619      	mov	r1, r3
 801ae80:	e786      	b.n	801ad90 <__ieee754_pow+0xc0>
 801ae82:	0fed      	lsrs	r5, r5, #31
 801ae84:	1e6b      	subs	r3, r5, #1
 801ae86:	930d      	str	r3, [sp, #52]	; 0x34
 801ae88:	ea5b 0303 	orrs.w	r3, fp, r3
 801ae8c:	d102      	bne.n	801ae94 <__ieee754_pow+0x1c4>
 801ae8e:	4632      	mov	r2, r6
 801ae90:	463b      	mov	r3, r7
 801ae92:	e7e8      	b.n	801ae66 <__ieee754_pow+0x196>
 801ae94:	4b16      	ldr	r3, [pc, #88]	; (801aef0 <__ieee754_pow+0x220>)
 801ae96:	4598      	cmp	r8, r3
 801ae98:	f340 80fe 	ble.w	801b098 <__ieee754_pow+0x3c8>
 801ae9c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801aea0:	4598      	cmp	r8, r3
 801aea2:	dd0a      	ble.n	801aeba <__ieee754_pow+0x1ea>
 801aea4:	4b0f      	ldr	r3, [pc, #60]	; (801aee4 <__ieee754_pow+0x214>)
 801aea6:	429c      	cmp	r4, r3
 801aea8:	dc0d      	bgt.n	801aec6 <__ieee754_pow+0x1f6>
 801aeaa:	f1b9 0f00 	cmp.w	r9, #0
 801aeae:	f6bf af6d 	bge.w	801ad8c <__ieee754_pow+0xbc>
 801aeb2:	a307      	add	r3, pc, #28	; (adr r3, 801aed0 <__ieee754_pow+0x200>)
 801aeb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aeb8:	e79f      	b.n	801adfa <__ieee754_pow+0x12a>
 801aeba:	4b0e      	ldr	r3, [pc, #56]	; (801aef4 <__ieee754_pow+0x224>)
 801aebc:	429c      	cmp	r4, r3
 801aebe:	ddf4      	ble.n	801aeaa <__ieee754_pow+0x1da>
 801aec0:	4b09      	ldr	r3, [pc, #36]	; (801aee8 <__ieee754_pow+0x218>)
 801aec2:	429c      	cmp	r4, r3
 801aec4:	dd18      	ble.n	801aef8 <__ieee754_pow+0x228>
 801aec6:	f1b9 0f00 	cmp.w	r9, #0
 801aeca:	dcf2      	bgt.n	801aeb2 <__ieee754_pow+0x1e2>
 801aecc:	e75e      	b.n	801ad8c <__ieee754_pow+0xbc>
 801aece:	bf00      	nop
 801aed0:	8800759c 	.word	0x8800759c
 801aed4:	7e37e43c 	.word	0x7e37e43c
 801aed8:	7ff00000 	.word	0x7ff00000
 801aedc:	0801cd3d 	.word	0x0801cd3d
 801aee0:	433fffff 	.word	0x433fffff
 801aee4:	3fefffff 	.word	0x3fefffff
 801aee8:	3ff00000 	.word	0x3ff00000
 801aeec:	3fe00000 	.word	0x3fe00000
 801aef0:	41e00000 	.word	0x41e00000
 801aef4:	3feffffe 	.word	0x3feffffe
 801aef8:	2200      	movs	r2, #0
 801aefa:	4b63      	ldr	r3, [pc, #396]	; (801b088 <__ieee754_pow+0x3b8>)
 801aefc:	f7e5 f94e 	bl	800019c <__aeabi_dsub>
 801af00:	a355      	add	r3, pc, #340	; (adr r3, 801b058 <__ieee754_pow+0x388>)
 801af02:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af06:	4604      	mov	r4, r0
 801af08:	460d      	mov	r5, r1
 801af0a:	f7e5 faff 	bl	800050c <__aeabi_dmul>
 801af0e:	a354      	add	r3, pc, #336	; (adr r3, 801b060 <__ieee754_pow+0x390>)
 801af10:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af14:	4606      	mov	r6, r0
 801af16:	460f      	mov	r7, r1
 801af18:	4620      	mov	r0, r4
 801af1a:	4629      	mov	r1, r5
 801af1c:	f7e5 faf6 	bl	800050c <__aeabi_dmul>
 801af20:	2200      	movs	r2, #0
 801af22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801af26:	4b59      	ldr	r3, [pc, #356]	; (801b08c <__ieee754_pow+0x3bc>)
 801af28:	4620      	mov	r0, r4
 801af2a:	4629      	mov	r1, r5
 801af2c:	f7e5 faee 	bl	800050c <__aeabi_dmul>
 801af30:	4602      	mov	r2, r0
 801af32:	460b      	mov	r3, r1
 801af34:	a14c      	add	r1, pc, #304	; (adr r1, 801b068 <__ieee754_pow+0x398>)
 801af36:	e9d1 0100 	ldrd	r0, r1, [r1]
 801af3a:	f7e5 f92f 	bl	800019c <__aeabi_dsub>
 801af3e:	4622      	mov	r2, r4
 801af40:	462b      	mov	r3, r5
 801af42:	f7e5 fae3 	bl	800050c <__aeabi_dmul>
 801af46:	4602      	mov	r2, r0
 801af48:	460b      	mov	r3, r1
 801af4a:	2000      	movs	r0, #0
 801af4c:	4950      	ldr	r1, [pc, #320]	; (801b090 <__ieee754_pow+0x3c0>)
 801af4e:	f7e5 f925 	bl	800019c <__aeabi_dsub>
 801af52:	4622      	mov	r2, r4
 801af54:	462b      	mov	r3, r5
 801af56:	4680      	mov	r8, r0
 801af58:	4689      	mov	r9, r1
 801af5a:	4620      	mov	r0, r4
 801af5c:	4629      	mov	r1, r5
 801af5e:	f7e5 fad5 	bl	800050c <__aeabi_dmul>
 801af62:	4602      	mov	r2, r0
 801af64:	460b      	mov	r3, r1
 801af66:	4640      	mov	r0, r8
 801af68:	4649      	mov	r1, r9
 801af6a:	f7e5 facf 	bl	800050c <__aeabi_dmul>
 801af6e:	a340      	add	r3, pc, #256	; (adr r3, 801b070 <__ieee754_pow+0x3a0>)
 801af70:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af74:	f7e5 faca 	bl	800050c <__aeabi_dmul>
 801af78:	4602      	mov	r2, r0
 801af7a:	460b      	mov	r3, r1
 801af7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801af80:	f7e5 f90c 	bl	800019c <__aeabi_dsub>
 801af84:	4602      	mov	r2, r0
 801af86:	460b      	mov	r3, r1
 801af88:	4604      	mov	r4, r0
 801af8a:	460d      	mov	r5, r1
 801af8c:	4630      	mov	r0, r6
 801af8e:	4639      	mov	r1, r7
 801af90:	f7e5 f906 	bl	80001a0 <__adddf3>
 801af94:	2000      	movs	r0, #0
 801af96:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801af9a:	4632      	mov	r2, r6
 801af9c:	463b      	mov	r3, r7
 801af9e:	f7e5 f8fd 	bl	800019c <__aeabi_dsub>
 801afa2:	4602      	mov	r2, r0
 801afa4:	460b      	mov	r3, r1
 801afa6:	4620      	mov	r0, r4
 801afa8:	4629      	mov	r1, r5
 801afaa:	f7e5 f8f7 	bl	800019c <__aeabi_dsub>
 801afae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801afb0:	f10b 33ff 	add.w	r3, fp, #4294967295
 801afb4:	4313      	orrs	r3, r2
 801afb6:	4606      	mov	r6, r0
 801afb8:	460f      	mov	r7, r1
 801afba:	f040 81eb 	bne.w	801b394 <__ieee754_pow+0x6c4>
 801afbe:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 801b078 <__ieee754_pow+0x3a8>
 801afc2:	e9dd 4500 	ldrd	r4, r5, [sp]
 801afc6:	2400      	movs	r4, #0
 801afc8:	4622      	mov	r2, r4
 801afca:	462b      	mov	r3, r5
 801afcc:	e9dd 0100 	ldrd	r0, r1, [sp]
 801afd0:	ed8d 7b02 	vstr	d7, [sp, #8]
 801afd4:	f7e5 f8e2 	bl	800019c <__aeabi_dsub>
 801afd8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801afdc:	f7e5 fa96 	bl	800050c <__aeabi_dmul>
 801afe0:	e9dd 2300 	ldrd	r2, r3, [sp]
 801afe4:	4680      	mov	r8, r0
 801afe6:	4689      	mov	r9, r1
 801afe8:	4630      	mov	r0, r6
 801afea:	4639      	mov	r1, r7
 801afec:	f7e5 fa8e 	bl	800050c <__aeabi_dmul>
 801aff0:	4602      	mov	r2, r0
 801aff2:	460b      	mov	r3, r1
 801aff4:	4640      	mov	r0, r8
 801aff6:	4649      	mov	r1, r9
 801aff8:	f7e5 f8d2 	bl	80001a0 <__adddf3>
 801affc:	4622      	mov	r2, r4
 801affe:	462b      	mov	r3, r5
 801b000:	4680      	mov	r8, r0
 801b002:	4689      	mov	r9, r1
 801b004:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b008:	f7e5 fa80 	bl	800050c <__aeabi_dmul>
 801b00c:	460b      	mov	r3, r1
 801b00e:	4604      	mov	r4, r0
 801b010:	460d      	mov	r5, r1
 801b012:	4602      	mov	r2, r0
 801b014:	4649      	mov	r1, r9
 801b016:	4640      	mov	r0, r8
 801b018:	e9cd 4500 	strd	r4, r5, [sp]
 801b01c:	f7e5 f8c0 	bl	80001a0 <__adddf3>
 801b020:	4b1c      	ldr	r3, [pc, #112]	; (801b094 <__ieee754_pow+0x3c4>)
 801b022:	4299      	cmp	r1, r3
 801b024:	4606      	mov	r6, r0
 801b026:	460f      	mov	r7, r1
 801b028:	468b      	mov	fp, r1
 801b02a:	f340 82f7 	ble.w	801b61c <__ieee754_pow+0x94c>
 801b02e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801b032:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801b036:	4303      	orrs	r3, r0
 801b038:	f000 81ea 	beq.w	801b410 <__ieee754_pow+0x740>
 801b03c:	a310      	add	r3, pc, #64	; (adr r3, 801b080 <__ieee754_pow+0x3b0>)
 801b03e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b042:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b046:	f7e5 fa61 	bl	800050c <__aeabi_dmul>
 801b04a:	a30d      	add	r3, pc, #52	; (adr r3, 801b080 <__ieee754_pow+0x3b0>)
 801b04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b050:	e6d5      	b.n	801adfe <__ieee754_pow+0x12e>
 801b052:	bf00      	nop
 801b054:	f3af 8000 	nop.w
 801b058:	60000000 	.word	0x60000000
 801b05c:	3ff71547 	.word	0x3ff71547
 801b060:	f85ddf44 	.word	0xf85ddf44
 801b064:	3e54ae0b 	.word	0x3e54ae0b
 801b068:	55555555 	.word	0x55555555
 801b06c:	3fd55555 	.word	0x3fd55555
 801b070:	652b82fe 	.word	0x652b82fe
 801b074:	3ff71547 	.word	0x3ff71547
 801b078:	00000000 	.word	0x00000000
 801b07c:	bff00000 	.word	0xbff00000
 801b080:	8800759c 	.word	0x8800759c
 801b084:	7e37e43c 	.word	0x7e37e43c
 801b088:	3ff00000 	.word	0x3ff00000
 801b08c:	3fd00000 	.word	0x3fd00000
 801b090:	3fe00000 	.word	0x3fe00000
 801b094:	408fffff 	.word	0x408fffff
 801b098:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801b09c:	f04f 0200 	mov.w	r2, #0
 801b0a0:	da05      	bge.n	801b0ae <__ieee754_pow+0x3de>
 801b0a2:	4bd3      	ldr	r3, [pc, #844]	; (801b3f0 <__ieee754_pow+0x720>)
 801b0a4:	f7e5 fa32 	bl	800050c <__aeabi_dmul>
 801b0a8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801b0ac:	460c      	mov	r4, r1
 801b0ae:	1523      	asrs	r3, r4, #20
 801b0b0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801b0b4:	4413      	add	r3, r2
 801b0b6:	9309      	str	r3, [sp, #36]	; 0x24
 801b0b8:	4bce      	ldr	r3, [pc, #824]	; (801b3f4 <__ieee754_pow+0x724>)
 801b0ba:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801b0be:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801b0c2:	429c      	cmp	r4, r3
 801b0c4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801b0c8:	dd08      	ble.n	801b0dc <__ieee754_pow+0x40c>
 801b0ca:	4bcb      	ldr	r3, [pc, #812]	; (801b3f8 <__ieee754_pow+0x728>)
 801b0cc:	429c      	cmp	r4, r3
 801b0ce:	f340 815e 	ble.w	801b38e <__ieee754_pow+0x6be>
 801b0d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b0d4:	3301      	adds	r3, #1
 801b0d6:	9309      	str	r3, [sp, #36]	; 0x24
 801b0d8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801b0dc:	f04f 0a00 	mov.w	sl, #0
 801b0e0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801b0e4:	930c      	str	r3, [sp, #48]	; 0x30
 801b0e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b0e8:	4bc4      	ldr	r3, [pc, #784]	; (801b3fc <__ieee754_pow+0x72c>)
 801b0ea:	4413      	add	r3, r2
 801b0ec:	ed93 7b00 	vldr	d7, [r3]
 801b0f0:	4629      	mov	r1, r5
 801b0f2:	ec53 2b17 	vmov	r2, r3, d7
 801b0f6:	ed8d 7b06 	vstr	d7, [sp, #24]
 801b0fa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801b0fe:	f7e5 f84d 	bl	800019c <__aeabi_dsub>
 801b102:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801b106:	4606      	mov	r6, r0
 801b108:	460f      	mov	r7, r1
 801b10a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b10e:	f7e5 f847 	bl	80001a0 <__adddf3>
 801b112:	4602      	mov	r2, r0
 801b114:	460b      	mov	r3, r1
 801b116:	2000      	movs	r0, #0
 801b118:	49b9      	ldr	r1, [pc, #740]	; (801b400 <__ieee754_pow+0x730>)
 801b11a:	f7e5 fb21 	bl	8000760 <__aeabi_ddiv>
 801b11e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801b122:	4602      	mov	r2, r0
 801b124:	460b      	mov	r3, r1
 801b126:	4630      	mov	r0, r6
 801b128:	4639      	mov	r1, r7
 801b12a:	f7e5 f9ef 	bl	800050c <__aeabi_dmul>
 801b12e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b132:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801b136:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801b13a:	2300      	movs	r3, #0
 801b13c:	9302      	str	r3, [sp, #8]
 801b13e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801b142:	106d      	asrs	r5, r5, #1
 801b144:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801b148:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801b14c:	2200      	movs	r2, #0
 801b14e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801b152:	4640      	mov	r0, r8
 801b154:	4649      	mov	r1, r9
 801b156:	4614      	mov	r4, r2
 801b158:	461d      	mov	r5, r3
 801b15a:	f7e5 f9d7 	bl	800050c <__aeabi_dmul>
 801b15e:	4602      	mov	r2, r0
 801b160:	460b      	mov	r3, r1
 801b162:	4630      	mov	r0, r6
 801b164:	4639      	mov	r1, r7
 801b166:	f7e5 f819 	bl	800019c <__aeabi_dsub>
 801b16a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801b16e:	4606      	mov	r6, r0
 801b170:	460f      	mov	r7, r1
 801b172:	4620      	mov	r0, r4
 801b174:	4629      	mov	r1, r5
 801b176:	f7e5 f811 	bl	800019c <__aeabi_dsub>
 801b17a:	4602      	mov	r2, r0
 801b17c:	460b      	mov	r3, r1
 801b17e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801b182:	f7e5 f80b 	bl	800019c <__aeabi_dsub>
 801b186:	4642      	mov	r2, r8
 801b188:	464b      	mov	r3, r9
 801b18a:	f7e5 f9bf 	bl	800050c <__aeabi_dmul>
 801b18e:	4602      	mov	r2, r0
 801b190:	460b      	mov	r3, r1
 801b192:	4630      	mov	r0, r6
 801b194:	4639      	mov	r1, r7
 801b196:	f7e5 f801 	bl	800019c <__aeabi_dsub>
 801b19a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801b19e:	f7e5 f9b5 	bl	800050c <__aeabi_dmul>
 801b1a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801b1a6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801b1aa:	4610      	mov	r0, r2
 801b1ac:	4619      	mov	r1, r3
 801b1ae:	f7e5 f9ad 	bl	800050c <__aeabi_dmul>
 801b1b2:	a37b      	add	r3, pc, #492	; (adr r3, 801b3a0 <__ieee754_pow+0x6d0>)
 801b1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1b8:	4604      	mov	r4, r0
 801b1ba:	460d      	mov	r5, r1
 801b1bc:	f7e5 f9a6 	bl	800050c <__aeabi_dmul>
 801b1c0:	a379      	add	r3, pc, #484	; (adr r3, 801b3a8 <__ieee754_pow+0x6d8>)
 801b1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1c6:	f7e4 ffeb 	bl	80001a0 <__adddf3>
 801b1ca:	4622      	mov	r2, r4
 801b1cc:	462b      	mov	r3, r5
 801b1ce:	f7e5 f99d 	bl	800050c <__aeabi_dmul>
 801b1d2:	a377      	add	r3, pc, #476	; (adr r3, 801b3b0 <__ieee754_pow+0x6e0>)
 801b1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1d8:	f7e4 ffe2 	bl	80001a0 <__adddf3>
 801b1dc:	4622      	mov	r2, r4
 801b1de:	462b      	mov	r3, r5
 801b1e0:	f7e5 f994 	bl	800050c <__aeabi_dmul>
 801b1e4:	a374      	add	r3, pc, #464	; (adr r3, 801b3b8 <__ieee754_pow+0x6e8>)
 801b1e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1ea:	f7e4 ffd9 	bl	80001a0 <__adddf3>
 801b1ee:	4622      	mov	r2, r4
 801b1f0:	462b      	mov	r3, r5
 801b1f2:	f7e5 f98b 	bl	800050c <__aeabi_dmul>
 801b1f6:	a372      	add	r3, pc, #456	; (adr r3, 801b3c0 <__ieee754_pow+0x6f0>)
 801b1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1fc:	f7e4 ffd0 	bl	80001a0 <__adddf3>
 801b200:	4622      	mov	r2, r4
 801b202:	462b      	mov	r3, r5
 801b204:	f7e5 f982 	bl	800050c <__aeabi_dmul>
 801b208:	a36f      	add	r3, pc, #444	; (adr r3, 801b3c8 <__ieee754_pow+0x6f8>)
 801b20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b20e:	f7e4 ffc7 	bl	80001a0 <__adddf3>
 801b212:	4622      	mov	r2, r4
 801b214:	4606      	mov	r6, r0
 801b216:	460f      	mov	r7, r1
 801b218:	462b      	mov	r3, r5
 801b21a:	4620      	mov	r0, r4
 801b21c:	4629      	mov	r1, r5
 801b21e:	f7e5 f975 	bl	800050c <__aeabi_dmul>
 801b222:	4602      	mov	r2, r0
 801b224:	460b      	mov	r3, r1
 801b226:	4630      	mov	r0, r6
 801b228:	4639      	mov	r1, r7
 801b22a:	f7e5 f96f 	bl	800050c <__aeabi_dmul>
 801b22e:	4642      	mov	r2, r8
 801b230:	4604      	mov	r4, r0
 801b232:	460d      	mov	r5, r1
 801b234:	464b      	mov	r3, r9
 801b236:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b23a:	f7e4 ffb1 	bl	80001a0 <__adddf3>
 801b23e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801b242:	f7e5 f963 	bl	800050c <__aeabi_dmul>
 801b246:	4622      	mov	r2, r4
 801b248:	462b      	mov	r3, r5
 801b24a:	f7e4 ffa9 	bl	80001a0 <__adddf3>
 801b24e:	4642      	mov	r2, r8
 801b250:	4606      	mov	r6, r0
 801b252:	460f      	mov	r7, r1
 801b254:	464b      	mov	r3, r9
 801b256:	4640      	mov	r0, r8
 801b258:	4649      	mov	r1, r9
 801b25a:	f7e5 f957 	bl	800050c <__aeabi_dmul>
 801b25e:	2200      	movs	r2, #0
 801b260:	4b68      	ldr	r3, [pc, #416]	; (801b404 <__ieee754_pow+0x734>)
 801b262:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801b266:	f7e4 ff9b 	bl	80001a0 <__adddf3>
 801b26a:	4632      	mov	r2, r6
 801b26c:	463b      	mov	r3, r7
 801b26e:	f7e4 ff97 	bl	80001a0 <__adddf3>
 801b272:	9802      	ldr	r0, [sp, #8]
 801b274:	460d      	mov	r5, r1
 801b276:	4604      	mov	r4, r0
 801b278:	4602      	mov	r2, r0
 801b27a:	460b      	mov	r3, r1
 801b27c:	4640      	mov	r0, r8
 801b27e:	4649      	mov	r1, r9
 801b280:	f7e5 f944 	bl	800050c <__aeabi_dmul>
 801b284:	2200      	movs	r2, #0
 801b286:	4680      	mov	r8, r0
 801b288:	4689      	mov	r9, r1
 801b28a:	4b5e      	ldr	r3, [pc, #376]	; (801b404 <__ieee754_pow+0x734>)
 801b28c:	4620      	mov	r0, r4
 801b28e:	4629      	mov	r1, r5
 801b290:	f7e4 ff84 	bl	800019c <__aeabi_dsub>
 801b294:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801b298:	f7e4 ff80 	bl	800019c <__aeabi_dsub>
 801b29c:	4602      	mov	r2, r0
 801b29e:	460b      	mov	r3, r1
 801b2a0:	4630      	mov	r0, r6
 801b2a2:	4639      	mov	r1, r7
 801b2a4:	f7e4 ff7a 	bl	800019c <__aeabi_dsub>
 801b2a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801b2ac:	f7e5 f92e 	bl	800050c <__aeabi_dmul>
 801b2b0:	4622      	mov	r2, r4
 801b2b2:	4606      	mov	r6, r0
 801b2b4:	460f      	mov	r7, r1
 801b2b6:	462b      	mov	r3, r5
 801b2b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b2bc:	f7e5 f926 	bl	800050c <__aeabi_dmul>
 801b2c0:	4602      	mov	r2, r0
 801b2c2:	460b      	mov	r3, r1
 801b2c4:	4630      	mov	r0, r6
 801b2c6:	4639      	mov	r1, r7
 801b2c8:	f7e4 ff6a 	bl	80001a0 <__adddf3>
 801b2cc:	4606      	mov	r6, r0
 801b2ce:	460f      	mov	r7, r1
 801b2d0:	4602      	mov	r2, r0
 801b2d2:	460b      	mov	r3, r1
 801b2d4:	4640      	mov	r0, r8
 801b2d6:	4649      	mov	r1, r9
 801b2d8:	f7e4 ff62 	bl	80001a0 <__adddf3>
 801b2dc:	9802      	ldr	r0, [sp, #8]
 801b2de:	a33c      	add	r3, pc, #240	; (adr r3, 801b3d0 <__ieee754_pow+0x700>)
 801b2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2e4:	4604      	mov	r4, r0
 801b2e6:	460d      	mov	r5, r1
 801b2e8:	f7e5 f910 	bl	800050c <__aeabi_dmul>
 801b2ec:	4642      	mov	r2, r8
 801b2ee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801b2f2:	464b      	mov	r3, r9
 801b2f4:	4620      	mov	r0, r4
 801b2f6:	4629      	mov	r1, r5
 801b2f8:	f7e4 ff50 	bl	800019c <__aeabi_dsub>
 801b2fc:	4602      	mov	r2, r0
 801b2fe:	460b      	mov	r3, r1
 801b300:	4630      	mov	r0, r6
 801b302:	4639      	mov	r1, r7
 801b304:	f7e4 ff4a 	bl	800019c <__aeabi_dsub>
 801b308:	a333      	add	r3, pc, #204	; (adr r3, 801b3d8 <__ieee754_pow+0x708>)
 801b30a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b30e:	f7e5 f8fd 	bl	800050c <__aeabi_dmul>
 801b312:	a333      	add	r3, pc, #204	; (adr r3, 801b3e0 <__ieee754_pow+0x710>)
 801b314:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b318:	4606      	mov	r6, r0
 801b31a:	460f      	mov	r7, r1
 801b31c:	4620      	mov	r0, r4
 801b31e:	4629      	mov	r1, r5
 801b320:	f7e5 f8f4 	bl	800050c <__aeabi_dmul>
 801b324:	4602      	mov	r2, r0
 801b326:	460b      	mov	r3, r1
 801b328:	4630      	mov	r0, r6
 801b32a:	4639      	mov	r1, r7
 801b32c:	f7e4 ff38 	bl	80001a0 <__adddf3>
 801b330:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b332:	4b35      	ldr	r3, [pc, #212]	; (801b408 <__ieee754_pow+0x738>)
 801b334:	4413      	add	r3, r2
 801b336:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b33a:	f7e4 ff31 	bl	80001a0 <__adddf3>
 801b33e:	4604      	mov	r4, r0
 801b340:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b342:	460d      	mov	r5, r1
 801b344:	f7e5 f878 	bl	8000438 <__aeabi_i2d>
 801b348:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b34a:	4b30      	ldr	r3, [pc, #192]	; (801b40c <__ieee754_pow+0x73c>)
 801b34c:	4413      	add	r3, r2
 801b34e:	e9d3 8900 	ldrd	r8, r9, [r3]
 801b352:	4606      	mov	r6, r0
 801b354:	460f      	mov	r7, r1
 801b356:	4622      	mov	r2, r4
 801b358:	462b      	mov	r3, r5
 801b35a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b35e:	f7e4 ff1f 	bl	80001a0 <__adddf3>
 801b362:	4642      	mov	r2, r8
 801b364:	464b      	mov	r3, r9
 801b366:	f7e4 ff1b 	bl	80001a0 <__adddf3>
 801b36a:	4632      	mov	r2, r6
 801b36c:	463b      	mov	r3, r7
 801b36e:	f7e4 ff17 	bl	80001a0 <__adddf3>
 801b372:	9802      	ldr	r0, [sp, #8]
 801b374:	4632      	mov	r2, r6
 801b376:	463b      	mov	r3, r7
 801b378:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b37c:	f7e4 ff0e 	bl	800019c <__aeabi_dsub>
 801b380:	4642      	mov	r2, r8
 801b382:	464b      	mov	r3, r9
 801b384:	f7e4 ff0a 	bl	800019c <__aeabi_dsub>
 801b388:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801b38c:	e607      	b.n	801af9e <__ieee754_pow+0x2ce>
 801b38e:	f04f 0a01 	mov.w	sl, #1
 801b392:	e6a5      	b.n	801b0e0 <__ieee754_pow+0x410>
 801b394:	ed9f 7b14 	vldr	d7, [pc, #80]	; 801b3e8 <__ieee754_pow+0x718>
 801b398:	e613      	b.n	801afc2 <__ieee754_pow+0x2f2>
 801b39a:	bf00      	nop
 801b39c:	f3af 8000 	nop.w
 801b3a0:	4a454eef 	.word	0x4a454eef
 801b3a4:	3fca7e28 	.word	0x3fca7e28
 801b3a8:	93c9db65 	.word	0x93c9db65
 801b3ac:	3fcd864a 	.word	0x3fcd864a
 801b3b0:	a91d4101 	.word	0xa91d4101
 801b3b4:	3fd17460 	.word	0x3fd17460
 801b3b8:	518f264d 	.word	0x518f264d
 801b3bc:	3fd55555 	.word	0x3fd55555
 801b3c0:	db6fabff 	.word	0xdb6fabff
 801b3c4:	3fdb6db6 	.word	0x3fdb6db6
 801b3c8:	33333303 	.word	0x33333303
 801b3cc:	3fe33333 	.word	0x3fe33333
 801b3d0:	e0000000 	.word	0xe0000000
 801b3d4:	3feec709 	.word	0x3feec709
 801b3d8:	dc3a03fd 	.word	0xdc3a03fd
 801b3dc:	3feec709 	.word	0x3feec709
 801b3e0:	145b01f5 	.word	0x145b01f5
 801b3e4:	be3e2fe0 	.word	0xbe3e2fe0
 801b3e8:	00000000 	.word	0x00000000
 801b3ec:	3ff00000 	.word	0x3ff00000
 801b3f0:	43400000 	.word	0x43400000
 801b3f4:	0003988e 	.word	0x0003988e
 801b3f8:	000bb679 	.word	0x000bb679
 801b3fc:	0801cd40 	.word	0x0801cd40
 801b400:	3ff00000 	.word	0x3ff00000
 801b404:	40080000 	.word	0x40080000
 801b408:	0801cd60 	.word	0x0801cd60
 801b40c:	0801cd50 	.word	0x0801cd50
 801b410:	a3b4      	add	r3, pc, #720	; (adr r3, 801b6e4 <__ieee754_pow+0xa14>)
 801b412:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b416:	4640      	mov	r0, r8
 801b418:	4649      	mov	r1, r9
 801b41a:	f7e4 fec1 	bl	80001a0 <__adddf3>
 801b41e:	4622      	mov	r2, r4
 801b420:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b424:	462b      	mov	r3, r5
 801b426:	4630      	mov	r0, r6
 801b428:	4639      	mov	r1, r7
 801b42a:	f7e4 feb7 	bl	800019c <__aeabi_dsub>
 801b42e:	4602      	mov	r2, r0
 801b430:	460b      	mov	r3, r1
 801b432:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b436:	f7e5 faf9 	bl	8000a2c <__aeabi_dcmpgt>
 801b43a:	2800      	cmp	r0, #0
 801b43c:	f47f adfe 	bne.w	801b03c <__ieee754_pow+0x36c>
 801b440:	4aa3      	ldr	r2, [pc, #652]	; (801b6d0 <__ieee754_pow+0xa00>)
 801b442:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801b446:	4293      	cmp	r3, r2
 801b448:	f340 810a 	ble.w	801b660 <__ieee754_pow+0x990>
 801b44c:	151b      	asrs	r3, r3, #20
 801b44e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801b452:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801b456:	fa4a f303 	asr.w	r3, sl, r3
 801b45a:	445b      	add	r3, fp
 801b45c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801b460:	4e9c      	ldr	r6, [pc, #624]	; (801b6d4 <__ieee754_pow+0xa04>)
 801b462:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801b466:	4116      	asrs	r6, r2
 801b468:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801b46c:	2000      	movs	r0, #0
 801b46e:	ea23 0106 	bic.w	r1, r3, r6
 801b472:	f1c2 0214 	rsb	r2, r2, #20
 801b476:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801b47a:	fa4a fa02 	asr.w	sl, sl, r2
 801b47e:	f1bb 0f00 	cmp.w	fp, #0
 801b482:	4602      	mov	r2, r0
 801b484:	460b      	mov	r3, r1
 801b486:	4620      	mov	r0, r4
 801b488:	4629      	mov	r1, r5
 801b48a:	bfb8      	it	lt
 801b48c:	f1ca 0a00 	rsblt	sl, sl, #0
 801b490:	f7e4 fe84 	bl	800019c <__aeabi_dsub>
 801b494:	e9cd 0100 	strd	r0, r1, [sp]
 801b498:	4642      	mov	r2, r8
 801b49a:	464b      	mov	r3, r9
 801b49c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b4a0:	f7e4 fe7e 	bl	80001a0 <__adddf3>
 801b4a4:	2000      	movs	r0, #0
 801b4a6:	a378      	add	r3, pc, #480	; (adr r3, 801b688 <__ieee754_pow+0x9b8>)
 801b4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4ac:	4604      	mov	r4, r0
 801b4ae:	460d      	mov	r5, r1
 801b4b0:	f7e5 f82c 	bl	800050c <__aeabi_dmul>
 801b4b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b4b8:	4606      	mov	r6, r0
 801b4ba:	460f      	mov	r7, r1
 801b4bc:	4620      	mov	r0, r4
 801b4be:	4629      	mov	r1, r5
 801b4c0:	f7e4 fe6c 	bl	800019c <__aeabi_dsub>
 801b4c4:	4602      	mov	r2, r0
 801b4c6:	460b      	mov	r3, r1
 801b4c8:	4640      	mov	r0, r8
 801b4ca:	4649      	mov	r1, r9
 801b4cc:	f7e4 fe66 	bl	800019c <__aeabi_dsub>
 801b4d0:	a36f      	add	r3, pc, #444	; (adr r3, 801b690 <__ieee754_pow+0x9c0>)
 801b4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4d6:	f7e5 f819 	bl	800050c <__aeabi_dmul>
 801b4da:	a36f      	add	r3, pc, #444	; (adr r3, 801b698 <__ieee754_pow+0x9c8>)
 801b4dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4e0:	4680      	mov	r8, r0
 801b4e2:	4689      	mov	r9, r1
 801b4e4:	4620      	mov	r0, r4
 801b4e6:	4629      	mov	r1, r5
 801b4e8:	f7e5 f810 	bl	800050c <__aeabi_dmul>
 801b4ec:	4602      	mov	r2, r0
 801b4ee:	460b      	mov	r3, r1
 801b4f0:	4640      	mov	r0, r8
 801b4f2:	4649      	mov	r1, r9
 801b4f4:	f7e4 fe54 	bl	80001a0 <__adddf3>
 801b4f8:	4604      	mov	r4, r0
 801b4fa:	460d      	mov	r5, r1
 801b4fc:	4602      	mov	r2, r0
 801b4fe:	460b      	mov	r3, r1
 801b500:	4630      	mov	r0, r6
 801b502:	4639      	mov	r1, r7
 801b504:	f7e4 fe4c 	bl	80001a0 <__adddf3>
 801b508:	4632      	mov	r2, r6
 801b50a:	463b      	mov	r3, r7
 801b50c:	4680      	mov	r8, r0
 801b50e:	4689      	mov	r9, r1
 801b510:	f7e4 fe44 	bl	800019c <__aeabi_dsub>
 801b514:	4602      	mov	r2, r0
 801b516:	460b      	mov	r3, r1
 801b518:	4620      	mov	r0, r4
 801b51a:	4629      	mov	r1, r5
 801b51c:	f7e4 fe3e 	bl	800019c <__aeabi_dsub>
 801b520:	4642      	mov	r2, r8
 801b522:	4606      	mov	r6, r0
 801b524:	460f      	mov	r7, r1
 801b526:	464b      	mov	r3, r9
 801b528:	4640      	mov	r0, r8
 801b52a:	4649      	mov	r1, r9
 801b52c:	f7e4 ffee 	bl	800050c <__aeabi_dmul>
 801b530:	a35b      	add	r3, pc, #364	; (adr r3, 801b6a0 <__ieee754_pow+0x9d0>)
 801b532:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b536:	4604      	mov	r4, r0
 801b538:	460d      	mov	r5, r1
 801b53a:	f7e4 ffe7 	bl	800050c <__aeabi_dmul>
 801b53e:	a35a      	add	r3, pc, #360	; (adr r3, 801b6a8 <__ieee754_pow+0x9d8>)
 801b540:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b544:	f7e4 fe2a 	bl	800019c <__aeabi_dsub>
 801b548:	4622      	mov	r2, r4
 801b54a:	462b      	mov	r3, r5
 801b54c:	f7e4 ffde 	bl	800050c <__aeabi_dmul>
 801b550:	a357      	add	r3, pc, #348	; (adr r3, 801b6b0 <__ieee754_pow+0x9e0>)
 801b552:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b556:	f7e4 fe23 	bl	80001a0 <__adddf3>
 801b55a:	4622      	mov	r2, r4
 801b55c:	462b      	mov	r3, r5
 801b55e:	f7e4 ffd5 	bl	800050c <__aeabi_dmul>
 801b562:	a355      	add	r3, pc, #340	; (adr r3, 801b6b8 <__ieee754_pow+0x9e8>)
 801b564:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b568:	f7e4 fe18 	bl	800019c <__aeabi_dsub>
 801b56c:	4622      	mov	r2, r4
 801b56e:	462b      	mov	r3, r5
 801b570:	f7e4 ffcc 	bl	800050c <__aeabi_dmul>
 801b574:	a352      	add	r3, pc, #328	; (adr r3, 801b6c0 <__ieee754_pow+0x9f0>)
 801b576:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b57a:	f7e4 fe11 	bl	80001a0 <__adddf3>
 801b57e:	4622      	mov	r2, r4
 801b580:	462b      	mov	r3, r5
 801b582:	f7e4 ffc3 	bl	800050c <__aeabi_dmul>
 801b586:	4602      	mov	r2, r0
 801b588:	460b      	mov	r3, r1
 801b58a:	4640      	mov	r0, r8
 801b58c:	4649      	mov	r1, r9
 801b58e:	f7e4 fe05 	bl	800019c <__aeabi_dsub>
 801b592:	4604      	mov	r4, r0
 801b594:	460d      	mov	r5, r1
 801b596:	4602      	mov	r2, r0
 801b598:	460b      	mov	r3, r1
 801b59a:	4640      	mov	r0, r8
 801b59c:	4649      	mov	r1, r9
 801b59e:	f7e4 ffb5 	bl	800050c <__aeabi_dmul>
 801b5a2:	2200      	movs	r2, #0
 801b5a4:	e9cd 0100 	strd	r0, r1, [sp]
 801b5a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801b5ac:	4620      	mov	r0, r4
 801b5ae:	4629      	mov	r1, r5
 801b5b0:	f7e4 fdf4 	bl	800019c <__aeabi_dsub>
 801b5b4:	4602      	mov	r2, r0
 801b5b6:	460b      	mov	r3, r1
 801b5b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b5bc:	f7e5 f8d0 	bl	8000760 <__aeabi_ddiv>
 801b5c0:	4632      	mov	r2, r6
 801b5c2:	4604      	mov	r4, r0
 801b5c4:	460d      	mov	r5, r1
 801b5c6:	463b      	mov	r3, r7
 801b5c8:	4640      	mov	r0, r8
 801b5ca:	4649      	mov	r1, r9
 801b5cc:	f7e4 ff9e 	bl	800050c <__aeabi_dmul>
 801b5d0:	4632      	mov	r2, r6
 801b5d2:	463b      	mov	r3, r7
 801b5d4:	f7e4 fde4 	bl	80001a0 <__adddf3>
 801b5d8:	4602      	mov	r2, r0
 801b5da:	460b      	mov	r3, r1
 801b5dc:	4620      	mov	r0, r4
 801b5de:	4629      	mov	r1, r5
 801b5e0:	f7e4 fddc 	bl	800019c <__aeabi_dsub>
 801b5e4:	4642      	mov	r2, r8
 801b5e6:	464b      	mov	r3, r9
 801b5e8:	f7e4 fdd8 	bl	800019c <__aeabi_dsub>
 801b5ec:	4602      	mov	r2, r0
 801b5ee:	460b      	mov	r3, r1
 801b5f0:	2000      	movs	r0, #0
 801b5f2:	4939      	ldr	r1, [pc, #228]	; (801b6d8 <__ieee754_pow+0xa08>)
 801b5f4:	f7e4 fdd2 	bl	800019c <__aeabi_dsub>
 801b5f8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 801b5fc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801b600:	4602      	mov	r2, r0
 801b602:	460b      	mov	r3, r1
 801b604:	da2f      	bge.n	801b666 <__ieee754_pow+0x996>
 801b606:	4650      	mov	r0, sl
 801b608:	ec43 2b10 	vmov	d0, r2, r3
 801b60c:	f000 f9c0 	bl	801b990 <scalbn>
 801b610:	ec51 0b10 	vmov	r0, r1, d0
 801b614:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801b618:	f7ff bbf1 	b.w	801adfe <__ieee754_pow+0x12e>
 801b61c:	4b2f      	ldr	r3, [pc, #188]	; (801b6dc <__ieee754_pow+0xa0c>)
 801b61e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801b622:	429e      	cmp	r6, r3
 801b624:	f77f af0c 	ble.w	801b440 <__ieee754_pow+0x770>
 801b628:	4b2d      	ldr	r3, [pc, #180]	; (801b6e0 <__ieee754_pow+0xa10>)
 801b62a:	440b      	add	r3, r1
 801b62c:	4303      	orrs	r3, r0
 801b62e:	d00b      	beq.n	801b648 <__ieee754_pow+0x978>
 801b630:	a325      	add	r3, pc, #148	; (adr r3, 801b6c8 <__ieee754_pow+0x9f8>)
 801b632:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b636:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b63a:	f7e4 ff67 	bl	800050c <__aeabi_dmul>
 801b63e:	a322      	add	r3, pc, #136	; (adr r3, 801b6c8 <__ieee754_pow+0x9f8>)
 801b640:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b644:	f7ff bbdb 	b.w	801adfe <__ieee754_pow+0x12e>
 801b648:	4622      	mov	r2, r4
 801b64a:	462b      	mov	r3, r5
 801b64c:	f7e4 fda6 	bl	800019c <__aeabi_dsub>
 801b650:	4642      	mov	r2, r8
 801b652:	464b      	mov	r3, r9
 801b654:	f7e5 f9e0 	bl	8000a18 <__aeabi_dcmpge>
 801b658:	2800      	cmp	r0, #0
 801b65a:	f43f aef1 	beq.w	801b440 <__ieee754_pow+0x770>
 801b65e:	e7e7      	b.n	801b630 <__ieee754_pow+0x960>
 801b660:	f04f 0a00 	mov.w	sl, #0
 801b664:	e718      	b.n	801b498 <__ieee754_pow+0x7c8>
 801b666:	4621      	mov	r1, r4
 801b668:	e7d4      	b.n	801b614 <__ieee754_pow+0x944>
 801b66a:	2000      	movs	r0, #0
 801b66c:	491a      	ldr	r1, [pc, #104]	; (801b6d8 <__ieee754_pow+0xa08>)
 801b66e:	f7ff bb8f 	b.w	801ad90 <__ieee754_pow+0xc0>
 801b672:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b676:	f7ff bb8b 	b.w	801ad90 <__ieee754_pow+0xc0>
 801b67a:	4630      	mov	r0, r6
 801b67c:	4639      	mov	r1, r7
 801b67e:	f7ff bb87 	b.w	801ad90 <__ieee754_pow+0xc0>
 801b682:	4693      	mov	fp, r2
 801b684:	f7ff bb98 	b.w	801adb8 <__ieee754_pow+0xe8>
 801b688:	00000000 	.word	0x00000000
 801b68c:	3fe62e43 	.word	0x3fe62e43
 801b690:	fefa39ef 	.word	0xfefa39ef
 801b694:	3fe62e42 	.word	0x3fe62e42
 801b698:	0ca86c39 	.word	0x0ca86c39
 801b69c:	be205c61 	.word	0xbe205c61
 801b6a0:	72bea4d0 	.word	0x72bea4d0
 801b6a4:	3e663769 	.word	0x3e663769
 801b6a8:	c5d26bf1 	.word	0xc5d26bf1
 801b6ac:	3ebbbd41 	.word	0x3ebbbd41
 801b6b0:	af25de2c 	.word	0xaf25de2c
 801b6b4:	3f11566a 	.word	0x3f11566a
 801b6b8:	16bebd93 	.word	0x16bebd93
 801b6bc:	3f66c16c 	.word	0x3f66c16c
 801b6c0:	5555553e 	.word	0x5555553e
 801b6c4:	3fc55555 	.word	0x3fc55555
 801b6c8:	c2f8f359 	.word	0xc2f8f359
 801b6cc:	01a56e1f 	.word	0x01a56e1f
 801b6d0:	3fe00000 	.word	0x3fe00000
 801b6d4:	000fffff 	.word	0x000fffff
 801b6d8:	3ff00000 	.word	0x3ff00000
 801b6dc:	4090cbff 	.word	0x4090cbff
 801b6e0:	3f6f3400 	.word	0x3f6f3400
 801b6e4:	652b82fe 	.word	0x652b82fe
 801b6e8:	3c971547 	.word	0x3c971547

0801b6ec <__ieee754_sqrt>:
 801b6ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b6f0:	4955      	ldr	r1, [pc, #340]	; (801b848 <__ieee754_sqrt+0x15c>)
 801b6f2:	ec55 4b10 	vmov	r4, r5, d0
 801b6f6:	43a9      	bics	r1, r5
 801b6f8:	462b      	mov	r3, r5
 801b6fa:	462a      	mov	r2, r5
 801b6fc:	d112      	bne.n	801b724 <__ieee754_sqrt+0x38>
 801b6fe:	ee10 2a10 	vmov	r2, s0
 801b702:	ee10 0a10 	vmov	r0, s0
 801b706:	4629      	mov	r1, r5
 801b708:	f7e4 ff00 	bl	800050c <__aeabi_dmul>
 801b70c:	4602      	mov	r2, r0
 801b70e:	460b      	mov	r3, r1
 801b710:	4620      	mov	r0, r4
 801b712:	4629      	mov	r1, r5
 801b714:	f7e4 fd44 	bl	80001a0 <__adddf3>
 801b718:	4604      	mov	r4, r0
 801b71a:	460d      	mov	r5, r1
 801b71c:	ec45 4b10 	vmov	d0, r4, r5
 801b720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b724:	2d00      	cmp	r5, #0
 801b726:	ee10 0a10 	vmov	r0, s0
 801b72a:	4621      	mov	r1, r4
 801b72c:	dc0f      	bgt.n	801b74e <__ieee754_sqrt+0x62>
 801b72e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801b732:	4330      	orrs	r0, r6
 801b734:	d0f2      	beq.n	801b71c <__ieee754_sqrt+0x30>
 801b736:	b155      	cbz	r5, 801b74e <__ieee754_sqrt+0x62>
 801b738:	ee10 2a10 	vmov	r2, s0
 801b73c:	4620      	mov	r0, r4
 801b73e:	4629      	mov	r1, r5
 801b740:	f7e4 fd2c 	bl	800019c <__aeabi_dsub>
 801b744:	4602      	mov	r2, r0
 801b746:	460b      	mov	r3, r1
 801b748:	f7e5 f80a 	bl	8000760 <__aeabi_ddiv>
 801b74c:	e7e4      	b.n	801b718 <__ieee754_sqrt+0x2c>
 801b74e:	151b      	asrs	r3, r3, #20
 801b750:	d073      	beq.n	801b83a <__ieee754_sqrt+0x14e>
 801b752:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801b756:	07dd      	lsls	r5, r3, #31
 801b758:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801b75c:	bf48      	it	mi
 801b75e:	0fc8      	lsrmi	r0, r1, #31
 801b760:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801b764:	bf44      	itt	mi
 801b766:	0049      	lslmi	r1, r1, #1
 801b768:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 801b76c:	2500      	movs	r5, #0
 801b76e:	1058      	asrs	r0, r3, #1
 801b770:	0fcb      	lsrs	r3, r1, #31
 801b772:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 801b776:	0049      	lsls	r1, r1, #1
 801b778:	2316      	movs	r3, #22
 801b77a:	462c      	mov	r4, r5
 801b77c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 801b780:	19a7      	adds	r7, r4, r6
 801b782:	4297      	cmp	r7, r2
 801b784:	bfde      	ittt	le
 801b786:	19bc      	addle	r4, r7, r6
 801b788:	1bd2      	suble	r2, r2, r7
 801b78a:	19ad      	addle	r5, r5, r6
 801b78c:	0fcf      	lsrs	r7, r1, #31
 801b78e:	3b01      	subs	r3, #1
 801b790:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 801b794:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801b798:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801b79c:	d1f0      	bne.n	801b780 <__ieee754_sqrt+0x94>
 801b79e:	f04f 0c20 	mov.w	ip, #32
 801b7a2:	469e      	mov	lr, r3
 801b7a4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801b7a8:	42a2      	cmp	r2, r4
 801b7aa:	eb06 070e 	add.w	r7, r6, lr
 801b7ae:	dc02      	bgt.n	801b7b6 <__ieee754_sqrt+0xca>
 801b7b0:	d112      	bne.n	801b7d8 <__ieee754_sqrt+0xec>
 801b7b2:	428f      	cmp	r7, r1
 801b7b4:	d810      	bhi.n	801b7d8 <__ieee754_sqrt+0xec>
 801b7b6:	2f00      	cmp	r7, #0
 801b7b8:	eb07 0e06 	add.w	lr, r7, r6
 801b7bc:	da42      	bge.n	801b844 <__ieee754_sqrt+0x158>
 801b7be:	f1be 0f00 	cmp.w	lr, #0
 801b7c2:	db3f      	blt.n	801b844 <__ieee754_sqrt+0x158>
 801b7c4:	f104 0801 	add.w	r8, r4, #1
 801b7c8:	1b12      	subs	r2, r2, r4
 801b7ca:	428f      	cmp	r7, r1
 801b7cc:	bf88      	it	hi
 801b7ce:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801b7d2:	1bc9      	subs	r1, r1, r7
 801b7d4:	4433      	add	r3, r6
 801b7d6:	4644      	mov	r4, r8
 801b7d8:	0052      	lsls	r2, r2, #1
 801b7da:	f1bc 0c01 	subs.w	ip, ip, #1
 801b7de:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801b7e2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801b7e6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801b7ea:	d1dd      	bne.n	801b7a8 <__ieee754_sqrt+0xbc>
 801b7ec:	430a      	orrs	r2, r1
 801b7ee:	d006      	beq.n	801b7fe <__ieee754_sqrt+0x112>
 801b7f0:	1c5c      	adds	r4, r3, #1
 801b7f2:	bf13      	iteet	ne
 801b7f4:	3301      	addne	r3, #1
 801b7f6:	3501      	addeq	r5, #1
 801b7f8:	4663      	moveq	r3, ip
 801b7fa:	f023 0301 	bicne.w	r3, r3, #1
 801b7fe:	106a      	asrs	r2, r5, #1
 801b800:	085b      	lsrs	r3, r3, #1
 801b802:	07e9      	lsls	r1, r5, #31
 801b804:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801b808:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801b80c:	bf48      	it	mi
 801b80e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801b812:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801b816:	461c      	mov	r4, r3
 801b818:	e780      	b.n	801b71c <__ieee754_sqrt+0x30>
 801b81a:	0aca      	lsrs	r2, r1, #11
 801b81c:	3815      	subs	r0, #21
 801b81e:	0549      	lsls	r1, r1, #21
 801b820:	2a00      	cmp	r2, #0
 801b822:	d0fa      	beq.n	801b81a <__ieee754_sqrt+0x12e>
 801b824:	02d6      	lsls	r6, r2, #11
 801b826:	d50a      	bpl.n	801b83e <__ieee754_sqrt+0x152>
 801b828:	f1c3 0420 	rsb	r4, r3, #32
 801b82c:	fa21 f404 	lsr.w	r4, r1, r4
 801b830:	1e5d      	subs	r5, r3, #1
 801b832:	4099      	lsls	r1, r3
 801b834:	4322      	orrs	r2, r4
 801b836:	1b43      	subs	r3, r0, r5
 801b838:	e78b      	b.n	801b752 <__ieee754_sqrt+0x66>
 801b83a:	4618      	mov	r0, r3
 801b83c:	e7f0      	b.n	801b820 <__ieee754_sqrt+0x134>
 801b83e:	0052      	lsls	r2, r2, #1
 801b840:	3301      	adds	r3, #1
 801b842:	e7ef      	b.n	801b824 <__ieee754_sqrt+0x138>
 801b844:	46a0      	mov	r8, r4
 801b846:	e7bf      	b.n	801b7c8 <__ieee754_sqrt+0xdc>
 801b848:	7ff00000 	.word	0x7ff00000

0801b84c <__ieee754_sqrtf>:
 801b84c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801b850:	4770      	bx	lr

0801b852 <fabs>:
 801b852:	ec51 0b10 	vmov	r0, r1, d0
 801b856:	ee10 2a10 	vmov	r2, s0
 801b85a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801b85e:	ec43 2b10 	vmov	d0, r2, r3
 801b862:	4770      	bx	lr

0801b864 <finite>:
 801b864:	ee10 3a90 	vmov	r3, s1
 801b868:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 801b86c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801b870:	0fc0      	lsrs	r0, r0, #31
 801b872:	4770      	bx	lr

0801b874 <matherr>:
 801b874:	2000      	movs	r0, #0
 801b876:	4770      	bx	lr

0801b878 <nan>:
 801b878:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801b880 <nan+0x8>
 801b87c:	4770      	bx	lr
 801b87e:	bf00      	nop
 801b880:	00000000 	.word	0x00000000
 801b884:	7ff80000 	.word	0x7ff80000

0801b888 <rint>:
 801b888:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b88a:	ec51 0b10 	vmov	r0, r1, d0
 801b88e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801b892:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801b896:	2e13      	cmp	r6, #19
 801b898:	460b      	mov	r3, r1
 801b89a:	ee10 4a10 	vmov	r4, s0
 801b89e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801b8a2:	dc56      	bgt.n	801b952 <rint+0xca>
 801b8a4:	2e00      	cmp	r6, #0
 801b8a6:	da2b      	bge.n	801b900 <rint+0x78>
 801b8a8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801b8ac:	4302      	orrs	r2, r0
 801b8ae:	d023      	beq.n	801b8f8 <rint+0x70>
 801b8b0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801b8b4:	4302      	orrs	r2, r0
 801b8b6:	4254      	negs	r4, r2
 801b8b8:	4314      	orrs	r4, r2
 801b8ba:	0c4b      	lsrs	r3, r1, #17
 801b8bc:	0b24      	lsrs	r4, r4, #12
 801b8be:	045b      	lsls	r3, r3, #17
 801b8c0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801b8c4:	ea44 0103 	orr.w	r1, r4, r3
 801b8c8:	460b      	mov	r3, r1
 801b8ca:	492f      	ldr	r1, [pc, #188]	; (801b988 <rint+0x100>)
 801b8cc:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 801b8d0:	e9d1 6700 	ldrd	r6, r7, [r1]
 801b8d4:	4602      	mov	r2, r0
 801b8d6:	4639      	mov	r1, r7
 801b8d8:	4630      	mov	r0, r6
 801b8da:	f7e4 fc61 	bl	80001a0 <__adddf3>
 801b8de:	e9cd 0100 	strd	r0, r1, [sp]
 801b8e2:	463b      	mov	r3, r7
 801b8e4:	4632      	mov	r2, r6
 801b8e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b8ea:	f7e4 fc57 	bl	800019c <__aeabi_dsub>
 801b8ee:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801b8f2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801b8f6:	4639      	mov	r1, r7
 801b8f8:	ec41 0b10 	vmov	d0, r0, r1
 801b8fc:	b003      	add	sp, #12
 801b8fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b900:	4a22      	ldr	r2, [pc, #136]	; (801b98c <rint+0x104>)
 801b902:	4132      	asrs	r2, r6
 801b904:	ea01 0702 	and.w	r7, r1, r2
 801b908:	4307      	orrs	r7, r0
 801b90a:	d0f5      	beq.n	801b8f8 <rint+0x70>
 801b90c:	0852      	lsrs	r2, r2, #1
 801b90e:	4011      	ands	r1, r2
 801b910:	430c      	orrs	r4, r1
 801b912:	d00b      	beq.n	801b92c <rint+0xa4>
 801b914:	ea23 0202 	bic.w	r2, r3, r2
 801b918:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801b91c:	2e13      	cmp	r6, #19
 801b91e:	fa43 f306 	asr.w	r3, r3, r6
 801b922:	bf0c      	ite	eq
 801b924:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 801b928:	2400      	movne	r4, #0
 801b92a:	4313      	orrs	r3, r2
 801b92c:	4916      	ldr	r1, [pc, #88]	; (801b988 <rint+0x100>)
 801b92e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801b932:	4622      	mov	r2, r4
 801b934:	e9d5 4500 	ldrd	r4, r5, [r5]
 801b938:	4620      	mov	r0, r4
 801b93a:	4629      	mov	r1, r5
 801b93c:	f7e4 fc30 	bl	80001a0 <__adddf3>
 801b940:	e9cd 0100 	strd	r0, r1, [sp]
 801b944:	4622      	mov	r2, r4
 801b946:	462b      	mov	r3, r5
 801b948:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b94c:	f7e4 fc26 	bl	800019c <__aeabi_dsub>
 801b950:	e7d2      	b.n	801b8f8 <rint+0x70>
 801b952:	2e33      	cmp	r6, #51	; 0x33
 801b954:	dd07      	ble.n	801b966 <rint+0xde>
 801b956:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801b95a:	d1cd      	bne.n	801b8f8 <rint+0x70>
 801b95c:	ee10 2a10 	vmov	r2, s0
 801b960:	f7e4 fc1e 	bl	80001a0 <__adddf3>
 801b964:	e7c8      	b.n	801b8f8 <rint+0x70>
 801b966:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 801b96a:	f04f 32ff 	mov.w	r2, #4294967295
 801b96e:	40f2      	lsrs	r2, r6
 801b970:	4210      	tst	r0, r2
 801b972:	d0c1      	beq.n	801b8f8 <rint+0x70>
 801b974:	0852      	lsrs	r2, r2, #1
 801b976:	4210      	tst	r0, r2
 801b978:	bf1f      	itttt	ne
 801b97a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801b97e:	ea20 0202 	bicne.w	r2, r0, r2
 801b982:	4134      	asrne	r4, r6
 801b984:	4314      	orrne	r4, r2
 801b986:	e7d1      	b.n	801b92c <rint+0xa4>
 801b988:	0801cd70 	.word	0x0801cd70
 801b98c:	000fffff 	.word	0x000fffff

0801b990 <scalbn>:
 801b990:	b570      	push	{r4, r5, r6, lr}
 801b992:	ec55 4b10 	vmov	r4, r5, d0
 801b996:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801b99a:	4606      	mov	r6, r0
 801b99c:	462b      	mov	r3, r5
 801b99e:	b9aa      	cbnz	r2, 801b9cc <scalbn+0x3c>
 801b9a0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801b9a4:	4323      	orrs	r3, r4
 801b9a6:	d03b      	beq.n	801ba20 <scalbn+0x90>
 801b9a8:	4b31      	ldr	r3, [pc, #196]	; (801ba70 <scalbn+0xe0>)
 801b9aa:	4629      	mov	r1, r5
 801b9ac:	2200      	movs	r2, #0
 801b9ae:	ee10 0a10 	vmov	r0, s0
 801b9b2:	f7e4 fdab 	bl	800050c <__aeabi_dmul>
 801b9b6:	4b2f      	ldr	r3, [pc, #188]	; (801ba74 <scalbn+0xe4>)
 801b9b8:	429e      	cmp	r6, r3
 801b9ba:	4604      	mov	r4, r0
 801b9bc:	460d      	mov	r5, r1
 801b9be:	da12      	bge.n	801b9e6 <scalbn+0x56>
 801b9c0:	a327      	add	r3, pc, #156	; (adr r3, 801ba60 <scalbn+0xd0>)
 801b9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b9c6:	f7e4 fda1 	bl	800050c <__aeabi_dmul>
 801b9ca:	e009      	b.n	801b9e0 <scalbn+0x50>
 801b9cc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801b9d0:	428a      	cmp	r2, r1
 801b9d2:	d10c      	bne.n	801b9ee <scalbn+0x5e>
 801b9d4:	ee10 2a10 	vmov	r2, s0
 801b9d8:	4620      	mov	r0, r4
 801b9da:	4629      	mov	r1, r5
 801b9dc:	f7e4 fbe0 	bl	80001a0 <__adddf3>
 801b9e0:	4604      	mov	r4, r0
 801b9e2:	460d      	mov	r5, r1
 801b9e4:	e01c      	b.n	801ba20 <scalbn+0x90>
 801b9e6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801b9ea:	460b      	mov	r3, r1
 801b9ec:	3a36      	subs	r2, #54	; 0x36
 801b9ee:	4432      	add	r2, r6
 801b9f0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801b9f4:	428a      	cmp	r2, r1
 801b9f6:	dd0b      	ble.n	801ba10 <scalbn+0x80>
 801b9f8:	ec45 4b11 	vmov	d1, r4, r5
 801b9fc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 801ba68 <scalbn+0xd8>
 801ba00:	f000 f83c 	bl	801ba7c <copysign>
 801ba04:	a318      	add	r3, pc, #96	; (adr r3, 801ba68 <scalbn+0xd8>)
 801ba06:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba0a:	ec51 0b10 	vmov	r0, r1, d0
 801ba0e:	e7da      	b.n	801b9c6 <scalbn+0x36>
 801ba10:	2a00      	cmp	r2, #0
 801ba12:	dd08      	ble.n	801ba26 <scalbn+0x96>
 801ba14:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801ba18:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801ba1c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801ba20:	ec45 4b10 	vmov	d0, r4, r5
 801ba24:	bd70      	pop	{r4, r5, r6, pc}
 801ba26:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801ba2a:	da0d      	bge.n	801ba48 <scalbn+0xb8>
 801ba2c:	f24c 3350 	movw	r3, #50000	; 0xc350
 801ba30:	429e      	cmp	r6, r3
 801ba32:	ec45 4b11 	vmov	d1, r4, r5
 801ba36:	dce1      	bgt.n	801b9fc <scalbn+0x6c>
 801ba38:	ed9f 0b09 	vldr	d0, [pc, #36]	; 801ba60 <scalbn+0xd0>
 801ba3c:	f000 f81e 	bl	801ba7c <copysign>
 801ba40:	a307      	add	r3, pc, #28	; (adr r3, 801ba60 <scalbn+0xd0>)
 801ba42:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba46:	e7e0      	b.n	801ba0a <scalbn+0x7a>
 801ba48:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801ba4c:	3236      	adds	r2, #54	; 0x36
 801ba4e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801ba52:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801ba56:	4620      	mov	r0, r4
 801ba58:	4629      	mov	r1, r5
 801ba5a:	2200      	movs	r2, #0
 801ba5c:	4b06      	ldr	r3, [pc, #24]	; (801ba78 <scalbn+0xe8>)
 801ba5e:	e7b2      	b.n	801b9c6 <scalbn+0x36>
 801ba60:	c2f8f359 	.word	0xc2f8f359
 801ba64:	01a56e1f 	.word	0x01a56e1f
 801ba68:	8800759c 	.word	0x8800759c
 801ba6c:	7e37e43c 	.word	0x7e37e43c
 801ba70:	43500000 	.word	0x43500000
 801ba74:	ffff3cb0 	.word	0xffff3cb0
 801ba78:	3c900000 	.word	0x3c900000

0801ba7c <copysign>:
 801ba7c:	ec51 0b10 	vmov	r0, r1, d0
 801ba80:	ee11 0a90 	vmov	r0, s3
 801ba84:	ee10 2a10 	vmov	r2, s0
 801ba88:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801ba8c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801ba90:	ea41 0300 	orr.w	r3, r1, r0
 801ba94:	ec43 2b10 	vmov	d0, r2, r3
 801ba98:	4770      	bx	lr
	...

0801ba9c <_init>:
 801ba9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ba9e:	bf00      	nop
 801baa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801baa2:	bc08      	pop	{r3}
 801baa4:	469e      	mov	lr, r3
 801baa6:	4770      	bx	lr

0801baa8 <_fini>:
 801baa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801baaa:	bf00      	nop
 801baac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801baae:	bc08      	pop	{r3}
 801bab0:	469e      	mov	lr, r3
 801bab2:	4770      	bx	lr
