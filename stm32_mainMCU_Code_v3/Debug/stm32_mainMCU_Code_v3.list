
stm32_mainMCU_Code_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016f9c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011f8  080170e0  080170e0  000270e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080182d8  080182d8  000282d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080182e0  080182e0  000282e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080182e4  080182e4  000282e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000015c  20000004  080182e8  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  20000160  08018444  00030160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200001fc  080184dd  000301fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00028474  20000210  080184ee  00030210  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20028684  080184ee  00038684  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003020d  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000024  20030000  20030000  00040000  2**2
                  ALLOC
 13 MB_MEM1       000000a0  20030024  20030024  00040000  2**2
                  ALLOC
 14 MB_MEM2       00000a97  200300c4  200300c4  00040000  2**2
                  ALLOC
 15 .debug_info   00064af6  00000000  00000000  0003023d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 0000b0b3  00000000  00000000  00094d33  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 00003b30  00000000  00000000  0009fde8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00003638  00000000  00000000  000a3918  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   000268e4  00000000  00000000  000a6f50  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    00018692  00000000  00000000  000cd834  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      000000f0  00000000  00000000  000e5ec6  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000f3c0  00000000  00000000  000e5fb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_loc    0000131b  00000000  00000000  000f5378  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000210 	.word	0x20000210
 800015c:	00000000 	.word	0x00000000
 8000160:	080170c4 	.word	0x080170c4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000214 	.word	0x20000214
 800017c:	080170c4 	.word	0x080170c4

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <__aeabi_drsub>:
 8000194:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000198:	e002      	b.n	80001a0 <__adddf3>
 800019a:	bf00      	nop

0800019c <__aeabi_dsub>:
 800019c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001a0 <__adddf3>:
 80001a0:	b530      	push	{r4, r5, lr}
 80001a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001aa:	ea94 0f05 	teq	r4, r5
 80001ae:	bf08      	it	eq
 80001b0:	ea90 0f02 	teqeq	r0, r2
 80001b4:	bf1f      	itttt	ne
 80001b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c6:	f000 80e2 	beq.w	800038e <__adddf3+0x1ee>
 80001ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001d2:	bfb8      	it	lt
 80001d4:	426d      	neglt	r5, r5
 80001d6:	dd0c      	ble.n	80001f2 <__adddf3+0x52>
 80001d8:	442c      	add	r4, r5
 80001da:	ea80 0202 	eor.w	r2, r0, r2
 80001de:	ea81 0303 	eor.w	r3, r1, r3
 80001e2:	ea82 0000 	eor.w	r0, r2, r0
 80001e6:	ea83 0101 	eor.w	r1, r3, r1
 80001ea:	ea80 0202 	eor.w	r2, r0, r2
 80001ee:	ea81 0303 	eor.w	r3, r1, r3
 80001f2:	2d36      	cmp	r5, #54	; 0x36
 80001f4:	bf88      	it	hi
 80001f6:	bd30      	pophi	{r4, r5, pc}
 80001f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000200:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000204:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x70>
 800020a:	4240      	negs	r0, r0
 800020c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000210:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000214:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000218:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800021c:	d002      	beq.n	8000224 <__adddf3+0x84>
 800021e:	4252      	negs	r2, r2
 8000220:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000224:	ea94 0f05 	teq	r4, r5
 8000228:	f000 80a7 	beq.w	800037a <__adddf3+0x1da>
 800022c:	f1a4 0401 	sub.w	r4, r4, #1
 8000230:	f1d5 0e20 	rsbs	lr, r5, #32
 8000234:	db0d      	blt.n	8000252 <__adddf3+0xb2>
 8000236:	fa02 fc0e 	lsl.w	ip, r2, lr
 800023a:	fa22 f205 	lsr.w	r2, r2, r5
 800023e:	1880      	adds	r0, r0, r2
 8000240:	f141 0100 	adc.w	r1, r1, #0
 8000244:	fa03 f20e 	lsl.w	r2, r3, lr
 8000248:	1880      	adds	r0, r0, r2
 800024a:	fa43 f305 	asr.w	r3, r3, r5
 800024e:	4159      	adcs	r1, r3
 8000250:	e00e      	b.n	8000270 <__adddf3+0xd0>
 8000252:	f1a5 0520 	sub.w	r5, r5, #32
 8000256:	f10e 0e20 	add.w	lr, lr, #32
 800025a:	2a01      	cmp	r2, #1
 800025c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000260:	bf28      	it	cs
 8000262:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000266:	fa43 f305 	asr.w	r3, r3, r5
 800026a:	18c0      	adds	r0, r0, r3
 800026c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000270:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000274:	d507      	bpl.n	8000286 <__adddf3+0xe6>
 8000276:	f04f 0e00 	mov.w	lr, #0
 800027a:	f1dc 0c00 	rsbs	ip, ip, #0
 800027e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000282:	eb6e 0101 	sbc.w	r1, lr, r1
 8000286:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800028a:	d31b      	bcc.n	80002c4 <__adddf3+0x124>
 800028c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000290:	d30c      	bcc.n	80002ac <__adddf3+0x10c>
 8000292:	0849      	lsrs	r1, r1, #1
 8000294:	ea5f 0030 	movs.w	r0, r0, rrx
 8000298:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800029c:	f104 0401 	add.w	r4, r4, #1
 80002a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a8:	f080 809a 	bcs.w	80003e0 <__adddf3+0x240>
 80002ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002b0:	bf08      	it	eq
 80002b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b6:	f150 0000 	adcs.w	r0, r0, #0
 80002ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002be:	ea41 0105 	orr.w	r1, r1, r5
 80002c2:	bd30      	pop	{r4, r5, pc}
 80002c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c8:	4140      	adcs	r0, r0
 80002ca:	eb41 0101 	adc.w	r1, r1, r1
 80002ce:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002d2:	f1a4 0401 	sub.w	r4, r4, #1
 80002d6:	d1e9      	bne.n	80002ac <__adddf3+0x10c>
 80002d8:	f091 0f00 	teq	r1, #0
 80002dc:	bf04      	itt	eq
 80002de:	4601      	moveq	r1, r0
 80002e0:	2000      	moveq	r0, #0
 80002e2:	fab1 f381 	clz	r3, r1
 80002e6:	bf08      	it	eq
 80002e8:	3320      	addeq	r3, #32
 80002ea:	f1a3 030b 	sub.w	r3, r3, #11
 80002ee:	f1b3 0220 	subs.w	r2, r3, #32
 80002f2:	da0c      	bge.n	800030e <__adddf3+0x16e>
 80002f4:	320c      	adds	r2, #12
 80002f6:	dd08      	ble.n	800030a <__adddf3+0x16a>
 80002f8:	f102 0c14 	add.w	ip, r2, #20
 80002fc:	f1c2 020c 	rsb	r2, r2, #12
 8000300:	fa01 f00c 	lsl.w	r0, r1, ip
 8000304:	fa21 f102 	lsr.w	r1, r1, r2
 8000308:	e00c      	b.n	8000324 <__adddf3+0x184>
 800030a:	f102 0214 	add.w	r2, r2, #20
 800030e:	bfd8      	it	le
 8000310:	f1c2 0c20 	rsble	ip, r2, #32
 8000314:	fa01 f102 	lsl.w	r1, r1, r2
 8000318:	fa20 fc0c 	lsr.w	ip, r0, ip
 800031c:	bfdc      	itt	le
 800031e:	ea41 010c 	orrle.w	r1, r1, ip
 8000322:	4090      	lslle	r0, r2
 8000324:	1ae4      	subs	r4, r4, r3
 8000326:	bfa2      	ittt	ge
 8000328:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800032c:	4329      	orrge	r1, r5
 800032e:	bd30      	popge	{r4, r5, pc}
 8000330:	ea6f 0404 	mvn.w	r4, r4
 8000334:	3c1f      	subs	r4, #31
 8000336:	da1c      	bge.n	8000372 <__adddf3+0x1d2>
 8000338:	340c      	adds	r4, #12
 800033a:	dc0e      	bgt.n	800035a <__adddf3+0x1ba>
 800033c:	f104 0414 	add.w	r4, r4, #20
 8000340:	f1c4 0220 	rsb	r2, r4, #32
 8000344:	fa20 f004 	lsr.w	r0, r0, r4
 8000348:	fa01 f302 	lsl.w	r3, r1, r2
 800034c:	ea40 0003 	orr.w	r0, r0, r3
 8000350:	fa21 f304 	lsr.w	r3, r1, r4
 8000354:	ea45 0103 	orr.w	r1, r5, r3
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f1c4 040c 	rsb	r4, r4, #12
 800035e:	f1c4 0220 	rsb	r2, r4, #32
 8000362:	fa20 f002 	lsr.w	r0, r0, r2
 8000366:	fa01 f304 	lsl.w	r3, r1, r4
 800036a:	ea40 0003 	orr.w	r0, r0, r3
 800036e:	4629      	mov	r1, r5
 8000370:	bd30      	pop	{r4, r5, pc}
 8000372:	fa21 f004 	lsr.w	r0, r1, r4
 8000376:	4629      	mov	r1, r5
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	f094 0f00 	teq	r4, #0
 800037e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000382:	bf06      	itte	eq
 8000384:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000388:	3401      	addeq	r4, #1
 800038a:	3d01      	subne	r5, #1
 800038c:	e74e      	b.n	800022c <__adddf3+0x8c>
 800038e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000392:	bf18      	it	ne
 8000394:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000398:	d029      	beq.n	80003ee <__adddf3+0x24e>
 800039a:	ea94 0f05 	teq	r4, r5
 800039e:	bf08      	it	eq
 80003a0:	ea90 0f02 	teqeq	r0, r2
 80003a4:	d005      	beq.n	80003b2 <__adddf3+0x212>
 80003a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003aa:	bf04      	itt	eq
 80003ac:	4619      	moveq	r1, r3
 80003ae:	4610      	moveq	r0, r2
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	ea91 0f03 	teq	r1, r3
 80003b6:	bf1e      	ittt	ne
 80003b8:	2100      	movne	r1, #0
 80003ba:	2000      	movne	r0, #0
 80003bc:	bd30      	popne	{r4, r5, pc}
 80003be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003c2:	d105      	bne.n	80003d0 <__adddf3+0x230>
 80003c4:	0040      	lsls	r0, r0, #1
 80003c6:	4149      	adcs	r1, r1
 80003c8:	bf28      	it	cs
 80003ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d4:	bf3c      	itt	cc
 80003d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003da:	bd30      	popcc	{r4, r5, pc}
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e8:	f04f 0000 	mov.w	r0, #0
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003f2:	bf1a      	itte	ne
 80003f4:	4619      	movne	r1, r3
 80003f6:	4610      	movne	r0, r2
 80003f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003fc:	bf1c      	itt	ne
 80003fe:	460b      	movne	r3, r1
 8000400:	4602      	movne	r2, r0
 8000402:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000406:	bf06      	itte	eq
 8000408:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800040c:	ea91 0f03 	teqeq	r1, r3
 8000410:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	bf00      	nop

08000418 <__aeabi_ui2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f04f 0500 	mov.w	r5, #0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e750      	b.n	80002d8 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_i2d>:
 8000438:	f090 0f00 	teq	r0, #0
 800043c:	bf04      	itt	eq
 800043e:	2100      	moveq	r1, #0
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000448:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800044c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000450:	bf48      	it	mi
 8000452:	4240      	negmi	r0, r0
 8000454:	f04f 0100 	mov.w	r1, #0
 8000458:	e73e      	b.n	80002d8 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_f2d>:
 800045c:	0042      	lsls	r2, r0, #1
 800045e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000462:	ea4f 0131 	mov.w	r1, r1, rrx
 8000466:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800046a:	bf1f      	itttt	ne
 800046c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000470:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000474:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000478:	4770      	bxne	lr
 800047a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047e:	bf08      	it	eq
 8000480:	4770      	bxeq	lr
 8000482:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000486:	bf04      	itt	eq
 8000488:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000494:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000498:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800049c:	e71c      	b.n	80002d8 <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_ul2d>:
 80004a0:	ea50 0201 	orrs.w	r2, r0, r1
 80004a4:	bf08      	it	eq
 80004a6:	4770      	bxeq	lr
 80004a8:	b530      	push	{r4, r5, lr}
 80004aa:	f04f 0500 	mov.w	r5, #0
 80004ae:	e00a      	b.n	80004c6 <__aeabi_l2d+0x16>

080004b0 <__aeabi_l2d>:
 80004b0:	ea50 0201 	orrs.w	r2, r0, r1
 80004b4:	bf08      	it	eq
 80004b6:	4770      	bxeq	lr
 80004b8:	b530      	push	{r4, r5, lr}
 80004ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004be:	d502      	bpl.n	80004c6 <__aeabi_l2d+0x16>
 80004c0:	4240      	negs	r0, r0
 80004c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004d2:	f43f aed8 	beq.w	8000286 <__adddf3+0xe6>
 80004d6:	f04f 0203 	mov.w	r2, #3
 80004da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004de:	bf18      	it	ne
 80004e0:	3203      	addne	r2, #3
 80004e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e6:	bf18      	it	ne
 80004e8:	3203      	addne	r2, #3
 80004ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ee:	f1c2 0320 	rsb	r3, r2, #32
 80004f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f6:	fa20 f002 	lsr.w	r0, r0, r2
 80004fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fe:	ea40 000e 	orr.w	r0, r0, lr
 8000502:	fa21 f102 	lsr.w	r1, r1, r2
 8000506:	4414      	add	r4, r2
 8000508:	e6bd      	b.n	8000286 <__adddf3+0xe6>
 800050a:	bf00      	nop

0800050c <__aeabi_dmul>:
 800050c:	b570      	push	{r4, r5, r6, lr}
 800050e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000512:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000516:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800051a:	bf1d      	ittte	ne
 800051c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000520:	ea94 0f0c 	teqne	r4, ip
 8000524:	ea95 0f0c 	teqne	r5, ip
 8000528:	f000 f8de 	bleq	80006e8 <__aeabi_dmul+0x1dc>
 800052c:	442c      	add	r4, r5
 800052e:	ea81 0603 	eor.w	r6, r1, r3
 8000532:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000536:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800053a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053e:	bf18      	it	ne
 8000540:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000544:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000548:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800054c:	d038      	beq.n	80005c0 <__aeabi_dmul+0xb4>
 800054e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000552:	f04f 0500 	mov.w	r5, #0
 8000556:	fbe1 e502 	umlal	lr, r5, r1, r2
 800055a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000562:	f04f 0600 	mov.w	r6, #0
 8000566:	fbe1 5603 	umlal	r5, r6, r1, r3
 800056a:	f09c 0f00 	teq	ip, #0
 800056e:	bf18      	it	ne
 8000570:	f04e 0e01 	orrne.w	lr, lr, #1
 8000574:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000578:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800057c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000580:	d204      	bcs.n	800058c <__aeabi_dmul+0x80>
 8000582:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000586:	416d      	adcs	r5, r5
 8000588:	eb46 0606 	adc.w	r6, r6, r6
 800058c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000590:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000594:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000598:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800059c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a4:	bf88      	it	hi
 80005a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005aa:	d81e      	bhi.n	80005ea <__aeabi_dmul+0xde>
 80005ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005b0:	bf08      	it	eq
 80005b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b6:	f150 0000 	adcs.w	r0, r0, #0
 80005ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005be:	bd70      	pop	{r4, r5, r6, pc}
 80005c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c4:	ea46 0101 	orr.w	r1, r6, r1
 80005c8:	ea40 0002 	orr.w	r0, r0, r2
 80005cc:	ea81 0103 	eor.w	r1, r1, r3
 80005d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d4:	bfc2      	ittt	gt
 80005d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005de:	bd70      	popgt	{r4, r5, r6, pc}
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f04f 0e00 	mov.w	lr, #0
 80005e8:	3c01      	subs	r4, #1
 80005ea:	f300 80ab 	bgt.w	8000744 <__aeabi_dmul+0x238>
 80005ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005f2:	bfde      	ittt	le
 80005f4:	2000      	movle	r0, #0
 80005f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005fa:	bd70      	pople	{r4, r5, r6, pc}
 80005fc:	f1c4 0400 	rsb	r4, r4, #0
 8000600:	3c20      	subs	r4, #32
 8000602:	da35      	bge.n	8000670 <__aeabi_dmul+0x164>
 8000604:	340c      	adds	r4, #12
 8000606:	dc1b      	bgt.n	8000640 <__aeabi_dmul+0x134>
 8000608:	f104 0414 	add.w	r4, r4, #20
 800060c:	f1c4 0520 	rsb	r5, r4, #32
 8000610:	fa00 f305 	lsl.w	r3, r0, r5
 8000614:	fa20 f004 	lsr.w	r0, r0, r4
 8000618:	fa01 f205 	lsl.w	r2, r1, r5
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000624:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	fa21 f604 	lsr.w	r6, r1, r4
 8000630:	eb42 0106 	adc.w	r1, r2, r6
 8000634:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000638:	bf08      	it	eq
 800063a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063e:	bd70      	pop	{r4, r5, r6, pc}
 8000640:	f1c4 040c 	rsb	r4, r4, #12
 8000644:	f1c4 0520 	rsb	r5, r4, #32
 8000648:	fa00 f304 	lsl.w	r3, r0, r4
 800064c:	fa20 f005 	lsr.w	r0, r0, r5
 8000650:	fa01 f204 	lsl.w	r2, r1, r4
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	f141 0100 	adc.w	r1, r1, #0
 8000664:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000668:	bf08      	it	eq
 800066a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f205 	lsl.w	r2, r0, r5
 8000678:	ea4e 0e02 	orr.w	lr, lr, r2
 800067c:	fa20 f304 	lsr.w	r3, r0, r4
 8000680:	fa01 f205 	lsl.w	r2, r1, r5
 8000684:	ea43 0302 	orr.w	r3, r3, r2
 8000688:	fa21 f004 	lsr.w	r0, r1, r4
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	fa21 f204 	lsr.w	r2, r1, r4
 8000694:	ea20 0002 	bic.w	r0, r0, r2
 8000698:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f094 0f00 	teq	r4, #0
 80006ac:	d10f      	bne.n	80006ce <__aeabi_dmul+0x1c2>
 80006ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006b2:	0040      	lsls	r0, r0, #1
 80006b4:	eb41 0101 	adc.w	r1, r1, r1
 80006b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3c01      	subeq	r4, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1a6>
 80006c2:	ea41 0106 	orr.w	r1, r1, r6
 80006c6:	f095 0f00 	teq	r5, #0
 80006ca:	bf18      	it	ne
 80006cc:	4770      	bxne	lr
 80006ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006d2:	0052      	lsls	r2, r2, #1
 80006d4:	eb43 0303 	adc.w	r3, r3, r3
 80006d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006dc:	bf08      	it	eq
 80006de:	3d01      	subeq	r5, #1
 80006e0:	d0f7      	beq.n	80006d2 <__aeabi_dmul+0x1c6>
 80006e2:	ea43 0306 	orr.w	r3, r3, r6
 80006e6:	4770      	bx	lr
 80006e8:	ea94 0f0c 	teq	r4, ip
 80006ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006f0:	bf18      	it	ne
 80006f2:	ea95 0f0c 	teqne	r5, ip
 80006f6:	d00c      	beq.n	8000712 <__aeabi_dmul+0x206>
 80006f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006fc:	bf18      	it	ne
 80006fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000702:	d1d1      	bne.n	80006a8 <__aeabi_dmul+0x19c>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000716:	bf06      	itte	eq
 8000718:	4610      	moveq	r0, r2
 800071a:	4619      	moveq	r1, r3
 800071c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000720:	d019      	beq.n	8000756 <__aeabi_dmul+0x24a>
 8000722:	ea94 0f0c 	teq	r4, ip
 8000726:	d102      	bne.n	800072e <__aeabi_dmul+0x222>
 8000728:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800072c:	d113      	bne.n	8000756 <__aeabi_dmul+0x24a>
 800072e:	ea95 0f0c 	teq	r5, ip
 8000732:	d105      	bne.n	8000740 <__aeabi_dmul+0x234>
 8000734:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000738:	bf1c      	itt	ne
 800073a:	4610      	movne	r0, r2
 800073c:	4619      	movne	r1, r3
 800073e:	d10a      	bne.n	8000756 <__aeabi_dmul+0x24a>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800075a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075e:	bd70      	pop	{r4, r5, r6, pc}

08000760 <__aeabi_ddiv>:
 8000760:	b570      	push	{r4, r5, r6, lr}
 8000762:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000766:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800076a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076e:	bf1d      	ittte	ne
 8000770:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000774:	ea94 0f0c 	teqne	r4, ip
 8000778:	ea95 0f0c 	teqne	r5, ip
 800077c:	f000 f8a7 	bleq	80008ce <__aeabi_ddiv+0x16e>
 8000780:	eba4 0405 	sub.w	r4, r4, r5
 8000784:	ea81 0e03 	eor.w	lr, r1, r3
 8000788:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800078c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000790:	f000 8088 	beq.w	80008a4 <__aeabi_ddiv+0x144>
 8000794:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000798:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800079c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b8:	429d      	cmp	r5, r3
 80007ba:	bf08      	it	eq
 80007bc:	4296      	cmpeq	r6, r2
 80007be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c6:	d202      	bcs.n	80007ce <__aeabi_ddiv+0x6e>
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	1ab6      	subs	r6, r6, r2
 80007d0:	eb65 0503 	sbc.w	r5, r5, r3
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000802:	bf22      	ittt	cs
 8000804:	1ab6      	subcs	r6, r6, r2
 8000806:	4675      	movcs	r5, lr
 8000808:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	ebb6 0e02 	subs.w	lr, r6, r2
 8000816:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081a:	bf22      	ittt	cs
 800081c:	1ab6      	subcs	r6, r6, r2
 800081e:	4675      	movcs	r5, lr
 8000820:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	ebb6 0e02 	subs.w	lr, r6, r2
 800082e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000832:	bf22      	ittt	cs
 8000834:	1ab6      	subcs	r6, r6, r2
 8000836:	4675      	movcs	r5, lr
 8000838:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800083c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000840:	d018      	beq.n	8000874 <__aeabi_ddiv+0x114>
 8000842:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000846:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800084a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000852:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000856:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800085a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085e:	d1c0      	bne.n	80007e2 <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	d10b      	bne.n	800087e <__aeabi_ddiv+0x11e>
 8000866:	ea41 0100 	orr.w	r1, r1, r0
 800086a:	f04f 0000 	mov.w	r0, #0
 800086e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000872:	e7b6      	b.n	80007e2 <__aeabi_ddiv+0x82>
 8000874:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000878:	bf04      	itt	eq
 800087a:	4301      	orreq	r1, r0
 800087c:	2000      	moveq	r0, #0
 800087e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000882:	bf88      	it	hi
 8000884:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000888:	f63f aeaf 	bhi.w	80005ea <__aeabi_dmul+0xde>
 800088c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000890:	bf04      	itt	eq
 8000892:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000896:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800089a:	f150 0000 	adcs.w	r0, r0, #0
 800089e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008a2:	bd70      	pop	{r4, r5, r6, pc}
 80008a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008b0:	bfc2      	ittt	gt
 80008b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ba:	bd70      	popgt	{r4, r5, r6, pc}
 80008bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008c0:	f04f 0e00 	mov.w	lr, #0
 80008c4:	3c01      	subs	r4, #1
 80008c6:	e690      	b.n	80005ea <__aeabi_dmul+0xde>
 80008c8:	ea45 0e06 	orr.w	lr, r5, r6
 80008cc:	e68d      	b.n	80005ea <__aeabi_dmul+0xde>
 80008ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008d2:	ea94 0f0c 	teq	r4, ip
 80008d6:	bf08      	it	eq
 80008d8:	ea95 0f0c 	teqeq	r5, ip
 80008dc:	f43f af3b 	beq.w	8000756 <__aeabi_dmul+0x24a>
 80008e0:	ea94 0f0c 	teq	r4, ip
 80008e4:	d10a      	bne.n	80008fc <__aeabi_ddiv+0x19c>
 80008e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ea:	f47f af34 	bne.w	8000756 <__aeabi_dmul+0x24a>
 80008ee:	ea95 0f0c 	teq	r5, ip
 80008f2:	f47f af25 	bne.w	8000740 <__aeabi_dmul+0x234>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e72c      	b.n	8000756 <__aeabi_dmul+0x24a>
 80008fc:	ea95 0f0c 	teq	r5, ip
 8000900:	d106      	bne.n	8000910 <__aeabi_ddiv+0x1b0>
 8000902:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000906:	f43f aefd 	beq.w	8000704 <__aeabi_dmul+0x1f8>
 800090a:	4610      	mov	r0, r2
 800090c:	4619      	mov	r1, r3
 800090e:	e722      	b.n	8000756 <__aeabi_dmul+0x24a>
 8000910:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000914:	bf18      	it	ne
 8000916:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800091a:	f47f aec5 	bne.w	80006a8 <__aeabi_dmul+0x19c>
 800091e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000922:	f47f af0d 	bne.w	8000740 <__aeabi_dmul+0x234>
 8000926:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800092a:	f47f aeeb 	bne.w	8000704 <__aeabi_dmul+0x1f8>
 800092e:	e712      	b.n	8000756 <__aeabi_dmul+0x24a>

08000930 <__gedf2>:
 8000930:	f04f 3cff 	mov.w	ip, #4294967295
 8000934:	e006      	b.n	8000944 <__cmpdf2+0x4>
 8000936:	bf00      	nop

08000938 <__ledf2>:
 8000938:	f04f 0c01 	mov.w	ip, #1
 800093c:	e002      	b.n	8000944 <__cmpdf2+0x4>
 800093e:	bf00      	nop

08000940 <__cmpdf2>:
 8000940:	f04f 0c01 	mov.w	ip, #1
 8000944:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000948:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800094c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000950:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000954:	bf18      	it	ne
 8000956:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800095a:	d01b      	beq.n	8000994 <__cmpdf2+0x54>
 800095c:	b001      	add	sp, #4
 800095e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000962:	bf0c      	ite	eq
 8000964:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000968:	ea91 0f03 	teqne	r1, r3
 800096c:	bf02      	ittt	eq
 800096e:	ea90 0f02 	teqeq	r0, r2
 8000972:	2000      	moveq	r0, #0
 8000974:	4770      	bxeq	lr
 8000976:	f110 0f00 	cmn.w	r0, #0
 800097a:	ea91 0f03 	teq	r1, r3
 800097e:	bf58      	it	pl
 8000980:	4299      	cmppl	r1, r3
 8000982:	bf08      	it	eq
 8000984:	4290      	cmpeq	r0, r2
 8000986:	bf2c      	ite	cs
 8000988:	17d8      	asrcs	r0, r3, #31
 800098a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098e:	f040 0001 	orr.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	d102      	bne.n	80009a4 <__cmpdf2+0x64>
 800099e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009a2:	d107      	bne.n	80009b4 <__cmpdf2+0x74>
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	d1d6      	bne.n	800095c <__cmpdf2+0x1c>
 80009ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009b2:	d0d3      	beq.n	800095c <__cmpdf2+0x1c>
 80009b4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <__aeabi_cdrcmple>:
 80009bc:	4684      	mov	ip, r0
 80009be:	4610      	mov	r0, r2
 80009c0:	4662      	mov	r2, ip
 80009c2:	468c      	mov	ip, r1
 80009c4:	4619      	mov	r1, r3
 80009c6:	4663      	mov	r3, ip
 80009c8:	e000      	b.n	80009cc <__aeabi_cdcmpeq>
 80009ca:	bf00      	nop

080009cc <__aeabi_cdcmpeq>:
 80009cc:	b501      	push	{r0, lr}
 80009ce:	f7ff ffb7 	bl	8000940 <__cmpdf2>
 80009d2:	2800      	cmp	r0, #0
 80009d4:	bf48      	it	mi
 80009d6:	f110 0f00 	cmnmi.w	r0, #0
 80009da:	bd01      	pop	{r0, pc}

080009dc <__aeabi_dcmpeq>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff fff4 	bl	80009cc <__aeabi_cdcmpeq>
 80009e4:	bf0c      	ite	eq
 80009e6:	2001      	moveq	r0, #1
 80009e8:	2000      	movne	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmplt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffea 	bl	80009cc <__aeabi_cdcmpeq>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmple>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffe0 	bl	80009cc <__aeabi_cdcmpeq>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpge>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffce 	bl	80009bc <__aeabi_cdrcmple>
 8000a20:	bf94      	ite	ls
 8000a22:	2001      	movls	r0, #1
 8000a24:	2000      	movhi	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpgt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffc4 	bl	80009bc <__aeabi_cdrcmple>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmpun>:
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__aeabi_dcmpun+0x10>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d10a      	bne.n	8000a66 <__aeabi_dcmpun+0x26>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__aeabi_dcmpun+0x20>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_dcmpun+0x26>
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0001 	mov.w	r0, #1
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_d2f>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a74:	bf24      	itt	cs
 8000a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7e:	d90d      	bls.n	8000a9c <__aeabi_d2f+0x30>
 8000a80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a94:	bf08      	it	eq
 8000a96:	f020 0001 	biceq.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa0:	d121      	bne.n	8000ae6 <__aeabi_d2f+0x7a>
 8000aa2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa6:	bfbc      	itt	lt
 8000aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	4770      	bxlt	lr
 8000aae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab6:	f1c2 0218 	rsb	r2, r2, #24
 8000aba:	f1c2 0c20 	rsb	ip, r2, #32
 8000abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	f040 0001 	orrne.w	r0, r0, #1
 8000acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad8:	ea40 000c 	orr.w	r0, r0, ip
 8000adc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae4:	e7cc      	b.n	8000a80 <__aeabi_d2f+0x14>
 8000ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aea:	d107      	bne.n	8000afc <__aeabi_d2f+0x90>
 8000aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af0:	bf1e      	ittt	ne
 8000af2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000afa:	4770      	bxne	lr
 8000afc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_uldivmod>:
 8000b0c:	b953      	cbnz	r3, 8000b24 <__aeabi_uldivmod+0x18>
 8000b0e:	b94a      	cbnz	r2, 8000b24 <__aeabi_uldivmod+0x18>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bf08      	it	eq
 8000b14:	2800      	cmpeq	r0, #0
 8000b16:	bf1c      	itt	ne
 8000b18:	f04f 31ff 	movne.w	r1, #4294967295
 8000b1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b20:	f000 b972 	b.w	8000e08 <__aeabi_idiv0>
 8000b24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b2c:	f000 f806 	bl	8000b3c <__udivmoddi4>
 8000b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b38:	b004      	add	sp, #16
 8000b3a:	4770      	bx	lr

08000b3c <__udivmoddi4>:
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b40:	9e08      	ldr	r6, [sp, #32]
 8000b42:	4604      	mov	r4, r0
 8000b44:	4688      	mov	r8, r1
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d14b      	bne.n	8000be2 <__udivmoddi4+0xa6>
 8000b4a:	428a      	cmp	r2, r1
 8000b4c:	4615      	mov	r5, r2
 8000b4e:	d967      	bls.n	8000c20 <__udivmoddi4+0xe4>
 8000b50:	fab2 f282 	clz	r2, r2
 8000b54:	b14a      	cbz	r2, 8000b6a <__udivmoddi4+0x2e>
 8000b56:	f1c2 0720 	rsb	r7, r2, #32
 8000b5a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b5e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b62:	4095      	lsls	r5, r2
 8000b64:	ea47 0803 	orr.w	r8, r7, r3
 8000b68:	4094      	lsls	r4, r2
 8000b6a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b6e:	0c23      	lsrs	r3, r4, #16
 8000b70:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b74:	fa1f fc85 	uxth.w	ip, r5
 8000b78:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b7c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b80:	fb07 f10c 	mul.w	r1, r7, ip
 8000b84:	4299      	cmp	r1, r3
 8000b86:	d909      	bls.n	8000b9c <__udivmoddi4+0x60>
 8000b88:	18eb      	adds	r3, r5, r3
 8000b8a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b8e:	f080 811b 	bcs.w	8000dc8 <__udivmoddi4+0x28c>
 8000b92:	4299      	cmp	r1, r3
 8000b94:	f240 8118 	bls.w	8000dc8 <__udivmoddi4+0x28c>
 8000b98:	3f02      	subs	r7, #2
 8000b9a:	442b      	add	r3, r5
 8000b9c:	1a5b      	subs	r3, r3, r1
 8000b9e:	b2a4      	uxth	r4, r4
 8000ba0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ba4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ba8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bac:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bb0:	45a4      	cmp	ip, r4
 8000bb2:	d909      	bls.n	8000bc8 <__udivmoddi4+0x8c>
 8000bb4:	192c      	adds	r4, r5, r4
 8000bb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bba:	f080 8107 	bcs.w	8000dcc <__udivmoddi4+0x290>
 8000bbe:	45a4      	cmp	ip, r4
 8000bc0:	f240 8104 	bls.w	8000dcc <__udivmoddi4+0x290>
 8000bc4:	3802      	subs	r0, #2
 8000bc6:	442c      	add	r4, r5
 8000bc8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bcc:	eba4 040c 	sub.w	r4, r4, ip
 8000bd0:	2700      	movs	r7, #0
 8000bd2:	b11e      	cbz	r6, 8000bdc <__udivmoddi4+0xa0>
 8000bd4:	40d4      	lsrs	r4, r2
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bdc:	4639      	mov	r1, r7
 8000bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d909      	bls.n	8000bfa <__udivmoddi4+0xbe>
 8000be6:	2e00      	cmp	r6, #0
 8000be8:	f000 80eb 	beq.w	8000dc2 <__udivmoddi4+0x286>
 8000bec:	2700      	movs	r7, #0
 8000bee:	e9c6 0100 	strd	r0, r1, [r6]
 8000bf2:	4638      	mov	r0, r7
 8000bf4:	4639      	mov	r1, r7
 8000bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfa:	fab3 f783 	clz	r7, r3
 8000bfe:	2f00      	cmp	r7, #0
 8000c00:	d147      	bne.n	8000c92 <__udivmoddi4+0x156>
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d302      	bcc.n	8000c0c <__udivmoddi4+0xd0>
 8000c06:	4282      	cmp	r2, r0
 8000c08:	f200 80fa 	bhi.w	8000e00 <__udivmoddi4+0x2c4>
 8000c0c:	1a84      	subs	r4, r0, r2
 8000c0e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c12:	2001      	movs	r0, #1
 8000c14:	4698      	mov	r8, r3
 8000c16:	2e00      	cmp	r6, #0
 8000c18:	d0e0      	beq.n	8000bdc <__udivmoddi4+0xa0>
 8000c1a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c1e:	e7dd      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000c20:	b902      	cbnz	r2, 8000c24 <__udivmoddi4+0xe8>
 8000c22:	deff      	udf	#255	; 0xff
 8000c24:	fab2 f282 	clz	r2, r2
 8000c28:	2a00      	cmp	r2, #0
 8000c2a:	f040 808f 	bne.w	8000d4c <__udivmoddi4+0x210>
 8000c2e:	1b49      	subs	r1, r1, r5
 8000c30:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c34:	fa1f f885 	uxth.w	r8, r5
 8000c38:	2701      	movs	r7, #1
 8000c3a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c3e:	0c23      	lsrs	r3, r4, #16
 8000c40:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c48:	fb08 f10c 	mul.w	r1, r8, ip
 8000c4c:	4299      	cmp	r1, r3
 8000c4e:	d907      	bls.n	8000c60 <__udivmoddi4+0x124>
 8000c50:	18eb      	adds	r3, r5, r3
 8000c52:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c56:	d202      	bcs.n	8000c5e <__udivmoddi4+0x122>
 8000c58:	4299      	cmp	r1, r3
 8000c5a:	f200 80cd 	bhi.w	8000df8 <__udivmoddi4+0x2bc>
 8000c5e:	4684      	mov	ip, r0
 8000c60:	1a59      	subs	r1, r3, r1
 8000c62:	b2a3      	uxth	r3, r4
 8000c64:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c68:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c6c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c70:	fb08 f800 	mul.w	r8, r8, r0
 8000c74:	45a0      	cmp	r8, r4
 8000c76:	d907      	bls.n	8000c88 <__udivmoddi4+0x14c>
 8000c78:	192c      	adds	r4, r5, r4
 8000c7a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7e:	d202      	bcs.n	8000c86 <__udivmoddi4+0x14a>
 8000c80:	45a0      	cmp	r8, r4
 8000c82:	f200 80b6 	bhi.w	8000df2 <__udivmoddi4+0x2b6>
 8000c86:	4618      	mov	r0, r3
 8000c88:	eba4 0408 	sub.w	r4, r4, r8
 8000c8c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c90:	e79f      	b.n	8000bd2 <__udivmoddi4+0x96>
 8000c92:	f1c7 0c20 	rsb	ip, r7, #32
 8000c96:	40bb      	lsls	r3, r7
 8000c98:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c9c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ca0:	fa01 f407 	lsl.w	r4, r1, r7
 8000ca4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ca8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cac:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cb0:	4325      	orrs	r5, r4
 8000cb2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cb6:	0c2c      	lsrs	r4, r5, #16
 8000cb8:	fb08 3319 	mls	r3, r8, r9, r3
 8000cbc:	fa1f fa8e 	uxth.w	sl, lr
 8000cc0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cc4:	fb09 f40a 	mul.w	r4, r9, sl
 8000cc8:	429c      	cmp	r4, r3
 8000cca:	fa02 f207 	lsl.w	r2, r2, r7
 8000cce:	fa00 f107 	lsl.w	r1, r0, r7
 8000cd2:	d90b      	bls.n	8000cec <__udivmoddi4+0x1b0>
 8000cd4:	eb1e 0303 	adds.w	r3, lr, r3
 8000cd8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cdc:	f080 8087 	bcs.w	8000dee <__udivmoddi4+0x2b2>
 8000ce0:	429c      	cmp	r4, r3
 8000ce2:	f240 8084 	bls.w	8000dee <__udivmoddi4+0x2b2>
 8000ce6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cea:	4473      	add	r3, lr
 8000cec:	1b1b      	subs	r3, r3, r4
 8000cee:	b2ad      	uxth	r5, r5
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cfc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d00:	45a2      	cmp	sl, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x1da>
 8000d04:	eb1e 0404 	adds.w	r4, lr, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	d26b      	bcs.n	8000de6 <__udivmoddi4+0x2aa>
 8000d0e:	45a2      	cmp	sl, r4
 8000d10:	d969      	bls.n	8000de6 <__udivmoddi4+0x2aa>
 8000d12:	3802      	subs	r0, #2
 8000d14:	4474      	add	r4, lr
 8000d16:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d1e:	eba4 040a 	sub.w	r4, r4, sl
 8000d22:	454c      	cmp	r4, r9
 8000d24:	46c2      	mov	sl, r8
 8000d26:	464b      	mov	r3, r9
 8000d28:	d354      	bcc.n	8000dd4 <__udivmoddi4+0x298>
 8000d2a:	d051      	beq.n	8000dd0 <__udivmoddi4+0x294>
 8000d2c:	2e00      	cmp	r6, #0
 8000d2e:	d069      	beq.n	8000e04 <__udivmoddi4+0x2c8>
 8000d30:	ebb1 050a 	subs.w	r5, r1, sl
 8000d34:	eb64 0403 	sbc.w	r4, r4, r3
 8000d38:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d3c:	40fd      	lsrs	r5, r7
 8000d3e:	40fc      	lsrs	r4, r7
 8000d40:	ea4c 0505 	orr.w	r5, ip, r5
 8000d44:	e9c6 5400 	strd	r5, r4, [r6]
 8000d48:	2700      	movs	r7, #0
 8000d4a:	e747      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000d4c:	f1c2 0320 	rsb	r3, r2, #32
 8000d50:	fa20 f703 	lsr.w	r7, r0, r3
 8000d54:	4095      	lsls	r5, r2
 8000d56:	fa01 f002 	lsl.w	r0, r1, r2
 8000d5a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d5e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d62:	4338      	orrs	r0, r7
 8000d64:	0c01      	lsrs	r1, r0, #16
 8000d66:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d6a:	fa1f f885 	uxth.w	r8, r5
 8000d6e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d76:	fb07 f308 	mul.w	r3, r7, r8
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d80:	d907      	bls.n	8000d92 <__udivmoddi4+0x256>
 8000d82:	1869      	adds	r1, r5, r1
 8000d84:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d88:	d22f      	bcs.n	8000dea <__udivmoddi4+0x2ae>
 8000d8a:	428b      	cmp	r3, r1
 8000d8c:	d92d      	bls.n	8000dea <__udivmoddi4+0x2ae>
 8000d8e:	3f02      	subs	r7, #2
 8000d90:	4429      	add	r1, r5
 8000d92:	1acb      	subs	r3, r1, r3
 8000d94:	b281      	uxth	r1, r0
 8000d96:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d9a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da2:	fb00 f308 	mul.w	r3, r0, r8
 8000da6:	428b      	cmp	r3, r1
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x27e>
 8000daa:	1869      	adds	r1, r5, r1
 8000dac:	f100 3cff 	add.w	ip, r0, #4294967295
 8000db0:	d217      	bcs.n	8000de2 <__udivmoddi4+0x2a6>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d915      	bls.n	8000de2 <__udivmoddi4+0x2a6>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4429      	add	r1, r5
 8000dba:	1ac9      	subs	r1, r1, r3
 8000dbc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000dc0:	e73b      	b.n	8000c3a <__udivmoddi4+0xfe>
 8000dc2:	4637      	mov	r7, r6
 8000dc4:	4630      	mov	r0, r6
 8000dc6:	e709      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000dc8:	4607      	mov	r7, r0
 8000dca:	e6e7      	b.n	8000b9c <__udivmoddi4+0x60>
 8000dcc:	4618      	mov	r0, r3
 8000dce:	e6fb      	b.n	8000bc8 <__udivmoddi4+0x8c>
 8000dd0:	4541      	cmp	r1, r8
 8000dd2:	d2ab      	bcs.n	8000d2c <__udivmoddi4+0x1f0>
 8000dd4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dd8:	eb69 020e 	sbc.w	r2, r9, lr
 8000ddc:	3801      	subs	r0, #1
 8000dde:	4613      	mov	r3, r2
 8000de0:	e7a4      	b.n	8000d2c <__udivmoddi4+0x1f0>
 8000de2:	4660      	mov	r0, ip
 8000de4:	e7e9      	b.n	8000dba <__udivmoddi4+0x27e>
 8000de6:	4618      	mov	r0, r3
 8000de8:	e795      	b.n	8000d16 <__udivmoddi4+0x1da>
 8000dea:	4667      	mov	r7, ip
 8000dec:	e7d1      	b.n	8000d92 <__udivmoddi4+0x256>
 8000dee:	4681      	mov	r9, r0
 8000df0:	e77c      	b.n	8000cec <__udivmoddi4+0x1b0>
 8000df2:	3802      	subs	r0, #2
 8000df4:	442c      	add	r4, r5
 8000df6:	e747      	b.n	8000c88 <__udivmoddi4+0x14c>
 8000df8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dfc:	442b      	add	r3, r5
 8000dfe:	e72f      	b.n	8000c60 <__udivmoddi4+0x124>
 8000e00:	4638      	mov	r0, r7
 8000e02:	e708      	b.n	8000c16 <__udivmoddi4+0xda>
 8000e04:	4637      	mov	r7, r6
 8000e06:	e6e9      	b.n	8000bdc <__udivmoddi4+0xa0>

08000e08 <__aeabi_idiv0>:
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop

08000e0c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000e24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e30:	68fb      	ldr	r3, [r7, #12]
}
 8000e32:	bf00      	nop
 8000e34:	3714      	adds	r7, #20
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
	...

08000e40 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e46:	463b      	mov	r3, r7
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
 8000e54:	615a      	str	r2, [r3, #20]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000e56:	4b2b      	ldr	r3, [pc, #172]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e58:	4a2b      	ldr	r2, [pc, #172]	; (8000f08 <MX_ADC1_Init+0xc8>)
 8000e5a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8000e5c:	4b29      	ldr	r3, [pc, #164]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e5e:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8000e62:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000e64:	4b27      	ldr	r3, [pc, #156]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e66:	2210      	movs	r2, #16
 8000e68:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e6a:	4b26      	ldr	r3, [pc, #152]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e70:	4b24      	ldr	r3, [pc, #144]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e76:	4b23      	ldr	r3, [pc, #140]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e78:	2204      	movs	r2, #4
 8000e7a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e7c:	4b21      	ldr	r3, [pc, #132]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e82:	4b20      	ldr	r3, [pc, #128]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e84:	2201      	movs	r2, #1
 8000e86:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000e88:	4b1e      	ldr	r3, [pc, #120]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e8e:	4b1d      	ldr	r3, [pc, #116]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000e96:	4b1b      	ldr	r3, [pc, #108]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e9c:	4b19      	ldr	r3, [pc, #100]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ea2:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000ea8:	4b16      	ldr	r3, [pc, #88]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000eaa:	2201      	movs	r2, #1
 8000eac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000eb0:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000eb6:	4b13      	ldr	r3, [pc, #76]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ebe:	4811      	ldr	r0, [pc, #68]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000ec0:	f005 feac 	bl	8006c1c <HAL_ADC_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000eca:	f003 fa45 	bl	8004358 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000ece:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <MX_ADC1_Init+0xcc>)
 8000ed0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ed2:	2306      	movs	r3, #6
 8000ed4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000ed6:	2306      	movs	r3, #6
 8000ed8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000eda:	237f      	movs	r3, #127	; 0x7f
 8000edc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ede:	2304      	movs	r3, #4
 8000ee0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ee6:	463b      	mov	r3, r7
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4806      	ldr	r0, [pc, #24]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000eec:	f006 f8cc 	bl	8007088 <HAL_ADC_ConfigChannel>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 8000ef6:	f003 fa2f 	bl	8004358 <Error_Handler>
  }

}
 8000efa:	bf00      	nop
 8000efc:	3718      	adds	r7, #24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	200276e8 	.word	0x200276e8
 8000f08:	50040000 	.word	0x50040000
 8000f0c:	14f00020 	.word	0x14f00020

08000f10 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b088      	sub	sp, #32
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 030c 	add.w	r3, r7, #12
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a21      	ldr	r2, [pc, #132]	; (8000fb4 <HAL_ADC_MspInit+0xa4>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d13c      	bne.n	8000fac <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000f32:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f36:	f7ff ff69 	bl	8000e0c <LL_AHB2_GRP1_EnableClock>
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3a:	2001      	movs	r0, #1
 8000f3c:	f7ff ff66 	bl	8000e0c <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f40:	2301      	movs	r3, #1
 8000f42:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f44:	2303      	movs	r3, #3
 8000f46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4c:	f107 030c 	add.w	r3, r7, #12
 8000f50:	4619      	mov	r1, r3
 8000f52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f56:	f007 fce1 	bl	800891c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000f5a:	4b17      	ldr	r3, [pc, #92]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f5c:	4a17      	ldr	r2, [pc, #92]	; (8000fbc <HAL_ADC_MspInit+0xac>)
 8000f5e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000f60:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f62:	2205      	movs	r2, #5
 8000f64:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f66:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f6c:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f74:	2280      	movs	r2, #128	; 0x80
 8000f76:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f78:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f86:	2220      	movs	r2, #32
 8000f88:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f8a:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f90:	4809      	ldr	r0, [pc, #36]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f92:	f007 f993 	bl	80082bc <HAL_DMA_Init>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <HAL_ADC_MspInit+0x90>
    {
      Error_Handler();
 8000f9c:	f003 f9dc 	bl	8004358 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4a05      	ldr	r2, [pc, #20]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000fa4:	64da      	str	r2, [r3, #76]	; 0x4c
 8000fa6:	4a04      	ldr	r2, [pc, #16]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fac:	bf00      	nop
 8000fae:	3720      	adds	r7, #32
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	50040000 	.word	0x50040000
 8000fb8:	2002774c 	.word	0x2002774c
 8000fbc:	40020008 	.word	0x40020008

08000fc0 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000fc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000fd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	608b      	str	r3, [r1, #8]
}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <APPE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 8000fec:	f000 f80a 	bl	8001004 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000ff0:	4903      	ldr	r1, [pc, #12]	; (8001000 <APPE_Init+0x18>)
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	f002 f964 	bl	80032c0 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  //UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000ff8:	f000 f80e 	bl	8001018 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000ffc:	bf00      	nop
}
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20028448 	.word	0x20028448

08001004 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config( void )
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0

  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001008:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800100c:	f7ff ffd8 	bl	8000fc0 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init( );
 8001010:	f014 fc6c 	bl	80158ec <UTIL_LPM_Init>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 8001014:	bf00      	nop
}
 8001016:	bd80      	pop	{r7, pc}

08001018 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b088      	sub	sp, #32
 800101c:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800101e:	f012 ff6d 	bl	8013efc <TL_Init>

  MtxShciId = osMutexNew( NULL );
 8001022:	2000      	movs	r0, #0
 8001024:	f00d fb7c 	bl	800e720 <osMutexNew>
 8001028:	4602      	mov	r2, r0
 800102a:	4b17      	ldr	r3, [pc, #92]	; (8001088 <appe_Tl_Init+0x70>)
 800102c:	601a      	str	r2, [r3, #0]
  SemShciId = osSemaphoreNew( 1, 0, NULL ); /*< Create the semaphore and make it busy at initialization */
 800102e:	2200      	movs	r2, #0
 8001030:	2100      	movs	r1, #0
 8001032:	2001      	movs	r0, #1
 8001034:	f00d fcbc 	bl	800e9b0 <osSemaphoreNew>
 8001038:	4602      	mov	r2, r0
 800103a:	4b14      	ldr	r3, [pc, #80]	; (800108c <appe_Tl_Init+0x74>)
 800103c:	601a      	str	r2, [r3, #0]

  /** FreeRTOS system task creation */
  ShciUserEvtProcessId = osThreadNew(ShciUserEvtProcess, NULL, &ShciUserEvtProcess_attr);
 800103e:	4a14      	ldr	r2, [pc, #80]	; (8001090 <appe_Tl_Init+0x78>)
 8001040:	2100      	movs	r1, #0
 8001042:	4814      	ldr	r0, [pc, #80]	; (8001094 <appe_Tl_Init+0x7c>)
 8001044:	f00d f828 	bl	800e098 <osThreadNew>
 8001048:	4602      	mov	r2, r0
 800104a:	4b13      	ldr	r3, [pc, #76]	; (8001098 <appe_Tl_Init+0x80>)
 800104c:	601a      	str	r2, [r3, #0]

  /**< System channel initialization */
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 800104e:	4b13      	ldr	r3, [pc, #76]	; (800109c <appe_Tl_Init+0x84>)
 8001050:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001052:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <appe_Tl_Init+0x88>)
 8001054:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8001056:	463b      	mov	r3, r7
 8001058:	4619      	mov	r1, r3
 800105a:	4812      	ldr	r0, [pc, #72]	; (80010a4 <appe_Tl_Init+0x8c>)
 800105c:	f012 fc7a 	bl	8013954 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = 0;
 8001060:	2300      	movs	r3, #0
 8001062:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8001064:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <appe_Tl_Init+0x90>)
 8001066:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8001068:	4b10      	ldr	r3, [pc, #64]	; (80010ac <appe_Tl_Init+0x94>)
 800106a:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800106c:	f240 533c 	movw	r3, #1340	; 0x53c
 8001070:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8001072:	f107 0308 	add.w	r3, r7, #8
 8001076:	4618      	mov	r0, r3
 8001078:	f013 f87e 	bl	8014178 <TL_MM_Init>

  TL_Enable();
 800107c:	f012 ff38 	bl	8013ef0 <TL_Enable>

  return;
 8001080:	bf00      	nop
}
 8001082:	3720      	adds	r7, #32
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	200277ac 	.word	0x200277ac
 800108c:	200277c4 	.word	0x200277c4
 8001090:	0801758c 	.word	0x0801758c
 8001094:	08001199 	.word	0x08001199
 8001098:	200277b0 	.word	0x200277b0
 800109c:	20030600 	.word	0x20030600
 80010a0:	080010b1 	.word	0x080010b1
 80010a4:	080010f1 	.word	0x080010f1
 80010a8:	2003070c 	.word	0x2003070c
 80010ac:	200300c4 	.word	0x200300c4

080010b0 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	71fb      	strb	r3, [r7, #7]
  switch (status)
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d002      	beq.n	80010c6 <APPE_SysStatusNot+0x16>
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d008      	beq.n	80010d6 <APPE_SysStatusNot+0x26>
    case SHCI_TL_CmdAvailable:
      osMutexRelease( MtxShciId );
      break;

    default:
      break;
 80010c4:	e00d      	b.n	80010e2 <APPE_SysStatusNot+0x32>
      osMutexAcquire( MtxShciId, osWaitForever );
 80010c6:	4b09      	ldr	r3, [pc, #36]	; (80010ec <APPE_SysStatusNot+0x3c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f04f 31ff 	mov.w	r1, #4294967295
 80010ce:	4618      	mov	r0, r3
 80010d0:	f00d fbc0 	bl	800e854 <osMutexAcquire>
      break;
 80010d4:	e005      	b.n	80010e2 <APPE_SysStatusNot+0x32>
      osMutexRelease( MtxShciId );
 80010d6:	4b05      	ldr	r3, [pc, #20]	; (80010ec <APPE_SysStatusNot+0x3c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4618      	mov	r0, r3
 80010dc:	f00d fc18 	bl	800e910 <osMutexRelease>
      break;
 80010e0:	bf00      	nop
  }
  return;
 80010e2:	bf00      	nop
}
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	200277ac 	.word	0x200277ac

080010f0 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	330b      	adds	r3, #11
 80010fe:	60fb      	str	r3, [r7, #12]

  switch(p_sys_event->subevtcode)
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	881b      	ldrh	r3, [r3, #0]
 8001104:	b29b      	uxth	r3, r3
 8001106:	f5b3 4f12 	cmp.w	r3, #37376	; 0x9200
 800110a:	d004      	beq.n	8001116 <APPE_SysUserEvtRx+0x26>
 800110c:	f249 2201 	movw	r2, #37377	; 0x9201
 8001110:	4293      	cmp	r3, r2
 8001112:	d003      	beq.n	800111c <APPE_SysUserEvtRx+0x2c>
         break;
     case SHCI_SUB_EVT_ERROR_NOTIF:
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
         break;
     default:
         break;
 8001114:	e008      	b.n	8001128 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtReadyProcessing();
 8001116:	f000 f833 	bl	8001180 <APPE_SysEvtReadyProcessing>
         break;
 800111a:	e005      	b.n	8001128 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	789b      	ldrb	r3, [r3, #2]
 8001120:	4618      	mov	r0, r3
 8001122:	f000 f805 	bl	8001130 <APPE_SysEvtError>
         break;
 8001126:	bf00      	nop
  }
  return;
 8001128:	bf00      	nop
}
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError( SCHI_SystemErrCode_t ErrorCode)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	71fb      	strb	r3, [r7, #7]
  switch(ErrorCode)
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	2b7d      	cmp	r3, #125	; 0x7d
 800113e:	d002      	beq.n	8001146 <APPE_SysEvtError+0x16>
 8001140:	2b7e      	cmp	r3, #126	; 0x7e
 8001142:	d006      	beq.n	8001152 <APPE_SysEvtError+0x22>
 8001144:	e00b      	b.n	800115e <APPE_SysEvtError+0x2e>
  {
  case ERR_THREAD_LLD_FATAL_ERROR:
       APP_DBG("** ERR_THREAD : LLD_FATAL_ERROR \n");
 8001146:	4a0b      	ldr	r2, [pc, #44]	; (8001174 <APPE_SysEvtError+0x44>)
 8001148:	2101      	movs	r1, #1
 800114a:	2000      	movs	r0, #0
 800114c:	f004 fc18 	bl	8005980 <logApplication>
       break;
 8001150:	e00c      	b.n	800116c <APPE_SysEvtError+0x3c>
  case ERR_THREAD_UNKNOWN_CMD:
       APP_DBG("** ERR_THREAD : UNKNOWN_CMD \n");
 8001152:	4a09      	ldr	r2, [pc, #36]	; (8001178 <APPE_SysEvtError+0x48>)
 8001154:	2101      	movs	r1, #1
 8001156:	2000      	movs	r0, #0
 8001158:	f004 fc12 	bl	8005980 <logApplication>
       break;
 800115c:	e006      	b.n	800116c <APPE_SysEvtError+0x3c>
  default:
       APP_DBG("** ERR_THREAD : ErroCode=%d \n",ErrorCode);
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	4a06      	ldr	r2, [pc, #24]	; (800117c <APPE_SysEvtError+0x4c>)
 8001162:	2101      	movs	r1, #1
 8001164:	2000      	movs	r0, #0
 8001166:	f004 fc0b 	bl	8005980 <logApplication>
       break;
 800116a:	bf00      	nop
  }
  return;
 800116c:	bf00      	nop
}
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	080170f8 	.word	0x080170f8
 8001178:	0801711c 	.word	0x0801711c
 800117c:	0801713c 	.word	0x0801713c

08001180 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing( void )
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* Traces channel initialization */
  TL_TRACES_Init( );
 8001184:	f013 f868 	bl	8014258 <TL_TRACES_Init>

  APP_THREAD_Init();
 8001188:	f013 f892 	bl	80142b0 <APP_THREAD_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 800118c:	2100      	movs	r1, #0
 800118e:	2001      	movs	r0, #1
 8001190:	f014 fbbe 	bl	8015910 <UTIL_LPM_SetOffMode>
  return;
 8001194:	bf00      	nop
}
 8001196:	bd80      	pop	{r7, pc}

08001198 <ShciUserEvtProcess>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void ShciUserEvtProcess(void *argument)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN SHCI_USER_EVT_PROCESS_1 */

    /* USER CODE END SHCI_USER_EVT_PROCESS_1 */
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 80011a0:	f04f 32ff 	mov.w	r2, #4294967295
 80011a4:	2100      	movs	r1, #0
 80011a6:	2001      	movs	r0, #1
 80011a8:	f00d f8d4 	bl	800e354 <osThreadFlagsWait>
     shci_user_evt_proc();
 80011ac:	f012 fbee 	bl	801398c <shci_user_evt_proc>
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 80011b0:	e7f6      	b.n	80011a0 <ShciUserEvtProcess+0x8>
	...

080011b4 <shci_notify_asynch_evt>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void shci_notify_asynch_evt(void* pdata)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  osThreadFlagsSet(ShciUserEvtProcessId,1);
 80011bc:	4b04      	ldr	r3, [pc, #16]	; (80011d0 <shci_notify_asynch_evt+0x1c>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2101      	movs	r1, #1
 80011c2:	4618      	mov	r0, r3
 80011c4:	f00d f814 	bl	800e1f0 <osThreadFlagsSet>
  return;
 80011c8:	bf00      	nop
}
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	200277b0 	.word	0x200277b0

080011d4 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  osSemaphoreRelease( SemShciId );
 80011dc:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <shci_cmd_resp_release+0x1c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f00d fce9 	bl	800ebb8 <osSemaphoreRelease>
  return;
 80011e6:	bf00      	nop
}
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	200277c4 	.word	0x200277c4

080011f4 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  osSemaphoreAcquire( SemShciId, osWaitForever );
 80011fc:	4b05      	ldr	r3, [pc, #20]	; (8001214 <shci_cmd_resp_wait+0x20>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f04f 31ff 	mov.w	r1, #4294967295
 8001204:	4618      	mov	r0, r3
 8001206:	f00d fc71 	bl	800eaec <osSemaphoreAcquire>
  return;
 800120a:	bf00      	nop
}
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	200277c4 	.word	0x200277c4

08001218 <TL_TRACES_EvtReceived>:

/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
#endif /* CFG_DEBUG_TRACE */
  /* Release buffer */
  TL_MM_EvtDone( hcievt );
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f012 ffe5 	bl	80141f0 <TL_MM_EvtDone>
}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <configureTimerForRunTimeStats>:

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
volatile unsigned long ulHighFrequencyTimerTicks;
__weak void configureTimerForRunTimeStats(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0

}
 8001232:	bf00      	nop
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
return HAL_GetTick();
 8001240:	f005 fab2 	bl	80067a8 <HAL_GetTick>
 8001244:	4603      	mov	r3, r0
}
 8001246:	4618      	mov	r0, r3
 8001248:	bd80      	pop	{r7, pc}

0800124a <vApplicationTickHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 3 */
__weak void vApplicationTickHook( void )
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 800124e:	bf00      	nop
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
volatile uint8_t test=0;
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]

   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
	test += 1;
 8001262:	4b06      	ldr	r3, [pc, #24]	; (800127c <vApplicationStackOverflowHook+0x24>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	b2db      	uxtb	r3, r3
 8001268:	3301      	adds	r3, #1
 800126a:	b2da      	uxtb	r2, r3
 800126c:	4b03      	ldr	r3, [pc, #12]	; (800127c <vApplicationStackOverflowHook+0x24>)
 800126e:	701a      	strb	r2, [r3, #0]
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	2000022c 	.word	0x2000022c

08001280 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
	test += 1;
 8001284:	4b05      	ldr	r3, [pc, #20]	; (800129c <vApplicationMallocFailedHook+0x1c>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	b2db      	uxtb	r3, r3
 800128a:	3301      	adds	r3, #1
 800128c:	b2da      	uxtb	r2, r3
 800128e:	4b03      	ldr	r3, [pc, #12]	; (800129c <vApplicationMallocFailedHook+0x1c>)
 8001290:	701a      	strb	r2, [r3, #0]

}
 8001292:	bf00      	nop
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	2000022c 	.word	0x2000022c

080012a0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of messageI2C_Lock */
  messageI2C_LockHandle = osSemaphoreNew(1, 1, &messageI2C_Lock_attributes);
 80012a4:	4a68      	ldr	r2, [pc, #416]	; (8001448 <MX_FREERTOS_Init+0x1a8>)
 80012a6:	2101      	movs	r1, #1
 80012a8:	2001      	movs	r0, #1
 80012aa:	f00d fb81 	bl	800e9b0 <osSemaphoreNew>
 80012ae:	4602      	mov	r2, r0
 80012b0:	4b66      	ldr	r3, [pc, #408]	; (800144c <MX_FREERTOS_Init+0x1ac>)
 80012b2:	601a      	str	r2, [r3, #0]

  /* creation of locNotify */
  locNotifyHandle = osSemaphoreNew(1, 1, &locNotify_attributes);
 80012b4:	4a66      	ldr	r2, [pc, #408]	; (8001450 <MX_FREERTOS_Init+0x1b0>)
 80012b6:	2101      	movs	r1, #1
 80012b8:	2001      	movs	r0, #1
 80012ba:	f00d fb79 	bl	800e9b0 <osSemaphoreNew>
 80012be:	4602      	mov	r2, r0
 80012c0:	4b64      	ldr	r3, [pc, #400]	; (8001454 <MX_FREERTOS_Init+0x1b4>)
 80012c2:	601a      	str	r2, [r3, #0]

  /* creation of locComplete */
  locCompleteHandle = osSemaphoreNew(1, 1, &locComplete_attributes);
 80012c4:	4a64      	ldr	r2, [pc, #400]	; (8001458 <MX_FREERTOS_Init+0x1b8>)
 80012c6:	2101      	movs	r1, #1
 80012c8:	2001      	movs	r0, #1
 80012ca:	f00d fb71 	bl	800e9b0 <osSemaphoreNew>
 80012ce:	4602      	mov	r2, r0
 80012d0:	4b62      	ldr	r3, [pc, #392]	; (800145c <MX_FREERTOS_Init+0x1bc>)
 80012d2:	601a      	str	r2, [r3, #0]

  /* creation of lightingLabDemoEnd */
  lightingLabDemoEndHandle = osSemaphoreNew(1, 1, &lightingLabDemoEnd_attributes);
 80012d4:	4a62      	ldr	r2, [pc, #392]	; (8001460 <MX_FREERTOS_Init+0x1c0>)
 80012d6:	2101      	movs	r1, #1
 80012d8:	2001      	movs	r0, #1
 80012da:	f00d fb69 	bl	800e9b0 <osSemaphoreNew>
 80012de:	4602      	mov	r2, r0
 80012e0:	4b60      	ldr	r3, [pc, #384]	; (8001464 <MX_FREERTOS_Init+0x1c4>)
 80012e2:	601a      	str	r2, [r3, #0]
//  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of viveTimer */
  viveTimerHandle = osTimerNew(get3D_location, osTimerPeriodic, (void*) &viveStateVar, &viveTimer_attributes);
 80012e4:	4b60      	ldr	r3, [pc, #384]	; (8001468 <MX_FREERTOS_Init+0x1c8>)
 80012e6:	4a61      	ldr	r2, [pc, #388]	; (800146c <MX_FREERTOS_Init+0x1cc>)
 80012e8:	2101      	movs	r1, #1
 80012ea:	4861      	ldr	r0, [pc, #388]	; (8001470 <MX_FREERTOS_Init+0x1d0>)
 80012ec:	f00d f90a 	bl	800e504 <osTimerNew>
 80012f0:	4602      	mov	r2, r0
 80012f2:	4b60      	ldr	r3, [pc, #384]	; (8001474 <MX_FREERTOS_Init+0x1d4>)
 80012f4:	601a      	str	r2, [r3, #0]

  /* creation of watchDogTimer */
  watchDogTimerHandle = osTimerNew(watchDogReset, osTimerPeriodic, NULL, &watchDogTimer_attributes);
 80012f6:	4b60      	ldr	r3, [pc, #384]	; (8001478 <MX_FREERTOS_Init+0x1d8>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	2101      	movs	r1, #1
 80012fc:	485f      	ldr	r0, [pc, #380]	; (800147c <MX_FREERTOS_Init+0x1dc>)
 80012fe:	f00d f901 	bl	800e504 <osTimerNew>
 8001302:	4602      	mov	r2, r0
 8001304:	4b5e      	ldr	r3, [pc, #376]	; (8001480 <MX_FREERTOS_Init+0x1e0>)
 8001306:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
//  /* start timers, add new ones, ... */
  osTimerStart(watchDogTimerHandle, WATCHDOG_PERIOD);
 8001308:	4b5d      	ldr	r3, [pc, #372]	; (8001480 <MX_FREERTOS_Init+0x1e0>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f241 3188 	movw	r1, #5000	; 0x1388
 8001310:	4618      	mov	r0, r3
 8001312:	f00d f97b 	bl	800e60c <osTimerStart>

  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of blinkMsgQueue */
  blinkMsgQueueHandle = osMessageQueueNew (10, 108, &blinkMsgQueue_attributes);
 8001316:	4a5b      	ldr	r2, [pc, #364]	; (8001484 <MX_FREERTOS_Init+0x1e4>)
 8001318:	216c      	movs	r1, #108	; 0x6c
 800131a:	200a      	movs	r0, #10
 800131c:	f00d fca4 	bl	800ec68 <osMessageQueueNew>
 8001320:	4602      	mov	r2, r0
 8001322:	4b59      	ldr	r3, [pc, #356]	; (8001488 <MX_FREERTOS_Init+0x1e8>)
 8001324:	601a      	str	r2, [r3, #0]

  /* creation of lightsSimpleQueue */
  lightsSimpleQueueHandle = osMessageQueueNew (3, 4, &lightsSimpleQueue_attributes);
 8001326:	4a59      	ldr	r2, [pc, #356]	; (800148c <MX_FREERTOS_Init+0x1ec>)
 8001328:	2104      	movs	r1, #4
 800132a:	2003      	movs	r0, #3
 800132c:	f00d fc9c 	bl	800ec68 <osMessageQueueNew>
 8001330:	4602      	mov	r2, r0
 8001332:	4b57      	ldr	r3, [pc, #348]	; (8001490 <MX_FREERTOS_Init+0x1f0>)
 8001334:	601a      	str	r2, [r3, #0]

  /* creation of togLoggingQueue */
  togLoggingQueueHandle = osMessageQueueNew (4, 6, &togLoggingQueue_attributes);
 8001336:	4a57      	ldr	r2, [pc, #348]	; (8001494 <MX_FREERTOS_Init+0x1f4>)
 8001338:	2106      	movs	r1, #6
 800133a:	2004      	movs	r0, #4
 800133c:	f00d fc94 	bl	800ec68 <osMessageQueueNew>
 8001340:	4602      	mov	r2, r0
 8001342:	4b55      	ldr	r3, [pc, #340]	; (8001498 <MX_FREERTOS_Init+0x1f8>)
 8001344:	601a      	str	r2, [r3, #0]

  /* creation of interProcessorMsgQueue */
  interProcessorMsgQueueHandle = osMessageQueueNew (10, 24, &interProcessorMsgQueue_attributes);
 8001346:	4a55      	ldr	r2, [pc, #340]	; (800149c <MX_FREERTOS_Init+0x1fc>)
 8001348:	2118      	movs	r1, #24
 800134a:	200a      	movs	r0, #10
 800134c:	f00d fc8c 	bl	800ec68 <osMessageQueueNew>
 8001350:	4602      	mov	r2, r0
 8001352:	4b53      	ldr	r3, [pc, #332]	; (80014a0 <MX_FREERTOS_Init+0x200>)
 8001354:	601a      	str	r2, [r3, #0]

  /* creation of inertialSensingQueue */
  inertialSensingQueueHandle = osMessageQueueNew (10, 40, &inertialSensingQueue_attributes);
 8001356:	4a53      	ldr	r2, [pc, #332]	; (80014a4 <MX_FREERTOS_Init+0x204>)
 8001358:	2128      	movs	r1, #40	; 0x28
 800135a:	200a      	movs	r0, #10
 800135c:	f00d fc84 	bl	800ec68 <osMessageQueueNew>
 8001360:	4602      	mov	r2, r0
 8001362:	4b51      	ldr	r3, [pc, #324]	; (80014a8 <MX_FREERTOS_Init+0x208>)
 8001364:	601a      	str	r2, [r3, #0]

  /* creation of activitySampleQueue */
  activitySampleQueueHandle = osMessageQueueNew (10, 16, &activitySampleQueue_attributes);
 8001366:	4a51      	ldr	r2, [pc, #324]	; (80014ac <MX_FREERTOS_Init+0x20c>)
 8001368:	2110      	movs	r1, #16
 800136a:	200a      	movs	r0, #10
 800136c:	f00d fc7c 	bl	800ec68 <osMessageQueueNew>
 8001370:	4602      	mov	r2, r0
 8001372:	4b4f      	ldr	r3, [pc, #316]	; (80014b0 <MX_FREERTOS_Init+0x210>)
 8001374:	601a      	str	r2, [r3, #0]

  /* creation of rotationSampleQueue */
  rotationSampleQueueHandle = osMessageQueueNew (3, 24, &rotationSampleQueue_attributes);
 8001376:	4a4f      	ldr	r2, [pc, #316]	; (80014b4 <MX_FREERTOS_Init+0x214>)
 8001378:	2118      	movs	r1, #24
 800137a:	2003      	movs	r0, #3
 800137c:	f00d fc74 	bl	800ec68 <osMessageQueueNew>
 8001380:	4602      	mov	r2, r0
 8001382:	4b4d      	ldr	r3, [pc, #308]	; (80014b8 <MX_FREERTOS_Init+0x218>)
 8001384:	601a      	str	r2, [r3, #0]

  /* creation of pulseQueue */
  pulseQueueHandle = osMessageQueueNew (10, 6, &pulseQueue_attributes);
 8001386:	4a4d      	ldr	r2, [pc, #308]	; (80014bc <MX_FREERTOS_Init+0x21c>)
 8001388:	2106      	movs	r1, #6
 800138a:	200a      	movs	r0, #10
 800138c:	f00d fc6c 	bl	800ec68 <osMessageQueueNew>
 8001390:	4602      	mov	r2, r0
 8001392:	4b4b      	ldr	r3, [pc, #300]	; (80014c0 <MX_FREERTOS_Init+0x220>)
 8001394:	601a      	str	r2, [r3, #0]

  /* creation of viveQueue */
  viveQueueHandle = osMessageQueueNew (10, 24, &viveQueue_attributes);
 8001396:	4a4b      	ldr	r2, [pc, #300]	; (80014c4 <MX_FREERTOS_Init+0x224>)
 8001398:	2118      	movs	r1, #24
 800139a:	200a      	movs	r0, #10
 800139c:	f00d fc64 	bl	800ec68 <osMessageQueueNew>
 80013a0:	4602      	mov	r2, r0
 80013a2:	4b49      	ldr	r3, [pc, #292]	; (80014c8 <MX_FREERTOS_Init+0x228>)
 80013a4:	601a      	str	r2, [r3, #0]

  /* creation of statusQueue */
  statusQueueHandle = osMessageQueueNew (1, sizeof(uint32_t), &statusQueue_attributes);
 80013a6:	4a49      	ldr	r2, [pc, #292]	; (80014cc <MX_FREERTOS_Init+0x22c>)
 80013a8:	2104      	movs	r1, #4
 80013aa:	2001      	movs	r0, #1
 80013ac:	f00d fc5c 	bl	800ec68 <osMessageQueueNew>
 80013b0:	4602      	mov	r2, r0
 80013b2:	4b47      	ldr	r3, [pc, #284]	; (80014d0 <MX_FREERTOS_Init+0x230>)
 80013b4:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(DefaultTask, NULL, &defaultTask_attributes);
 80013b6:	4a47      	ldr	r2, [pc, #284]	; (80014d4 <MX_FREERTOS_Init+0x234>)
 80013b8:	2100      	movs	r1, #0
 80013ba:	4847      	ldr	r0, [pc, #284]	; (80014d8 <MX_FREERTOS_Init+0x238>)
 80013bc:	f00c fe6c 	bl	800e098 <osThreadNew>
 80013c0:	4602      	mov	r2, r0
 80013c2:	4b46      	ldr	r3, [pc, #280]	; (80014dc <MX_FREERTOS_Init+0x23c>)
 80013c4:	601a      	str	r2, [r3, #0]

  /* creation of frontLightsTask */
  frontLightsTaskHandle = osThreadNew(ThreadFrontLightsTask, NULL, &frontLightsTask_attributes);
 80013c6:	4a46      	ldr	r2, [pc, #280]	; (80014e0 <MX_FREERTOS_Init+0x240>)
 80013c8:	2100      	movs	r1, #0
 80013ca:	4846      	ldr	r0, [pc, #280]	; (80014e4 <MX_FREERTOS_Init+0x244>)
 80013cc:	f00c fe64 	bl	800e098 <osThreadNew>
 80013d0:	4602      	mov	r2, r0
 80013d2:	4b45      	ldr	r3, [pc, #276]	; (80014e8 <MX_FREERTOS_Init+0x248>)
 80013d4:	601a      	str	r2, [r3, #0]

  /* creation of masterTask */
  masterTaskHandle = osThreadNew(MasterThreadTask, NULL, &masterTask_attributes);
 80013d6:	4a45      	ldr	r2, [pc, #276]	; (80014ec <MX_FREERTOS_Init+0x24c>)
 80013d8:	2100      	movs	r1, #0
 80013da:	4845      	ldr	r0, [pc, #276]	; (80014f0 <MX_FREERTOS_Init+0x250>)
 80013dc:	f00c fe5c 	bl	800e098 <osThreadNew>
 80013e0:	4602      	mov	r2, r0
 80013e2:	4b44      	ldr	r3, [pc, #272]	; (80014f4 <MX_FREERTOS_Init+0x254>)
 80013e4:	601a      	str	r2, [r3, #0]

  /* creation of inertialTask */
  inertialTaskHandle = osThreadNew(InertialSensingTask, NULL, &inertialTask_attributes);
 80013e6:	4a44      	ldr	r2, [pc, #272]	; (80014f8 <MX_FREERTOS_Init+0x258>)
 80013e8:	2100      	movs	r1, #0
 80013ea:	4844      	ldr	r0, [pc, #272]	; (80014fc <MX_FREERTOS_Init+0x25c>)
 80013ec:	f00c fe54 	bl	800e098 <osThreadNew>
 80013f0:	4602      	mov	r2, r0
 80013f2:	4b43      	ldr	r3, [pc, #268]	; (8001500 <MX_FREERTOS_Init+0x260>)
 80013f4:	601a      	str	r2, [r3, #0]

  /* creation of pulseTask */
  pulseTaskHandle = osThreadNew(PulseHandlerTask, NULL, &pulseTask_attributes);
 80013f6:	4a43      	ldr	r2, [pc, #268]	; (8001504 <MX_FREERTOS_Init+0x264>)
 80013f8:	2100      	movs	r1, #0
 80013fa:	4843      	ldr	r0, [pc, #268]	; (8001508 <MX_FREERTOS_Init+0x268>)
 80013fc:	f00c fe4c 	bl	800e098 <osThreadNew>
 8001400:	4602      	mov	r2, r0
 8001402:	4b42      	ldr	r3, [pc, #264]	; (800150c <MX_FREERTOS_Init+0x26c>)
 8001404:	601a      	str	r2, [r3, #0]

  /* creation of interProcTask */
  interProcTaskHandle = osThreadNew(InterProcessorTask, NULL, &interProcTask_attributes);
 8001406:	4a42      	ldr	r2, [pc, #264]	; (8001510 <MX_FREERTOS_Init+0x270>)
 8001408:	2100      	movs	r1, #0
 800140a:	4842      	ldr	r0, [pc, #264]	; (8001514 <MX_FREERTOS_Init+0x274>)
 800140c:	f00c fe44 	bl	800e098 <osThreadNew>
 8001410:	4602      	mov	r2, r0
 8001412:	4b41      	ldr	r3, [pc, #260]	; (8001518 <MX_FREERTOS_Init+0x278>)
 8001414:	601a      	str	r2, [r3, #0]

  /* creation of blinkTask */
  blinkTaskHandle = osThreadNew(BlinkTask, NULL, &blinkTask_attributes);
 8001416:	4a41      	ldr	r2, [pc, #260]	; (800151c <MX_FREERTOS_Init+0x27c>)
 8001418:	2100      	movs	r1, #0
 800141a:	4841      	ldr	r0, [pc, #260]	; (8001520 <MX_FREERTOS_Init+0x280>)
 800141c:	f00c fe3c 	bl	800e098 <osThreadNew>
 8001420:	4602      	mov	r2, r0
 8001422:	4b40      	ldr	r3, [pc, #256]	; (8001524 <MX_FREERTOS_Init+0x284>)
 8001424:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  // ensure binary notification semaphores are initially empty
  osSemaphoreAcquire(locNotifyHandle, 0);
 8001426:	4b0b      	ldr	r3, [pc, #44]	; (8001454 <MX_FREERTOS_Init+0x1b4>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2100      	movs	r1, #0
 800142c:	4618      	mov	r0, r3
 800142e:	f00d fb5d 	bl	800eaec <osSemaphoreAcquire>
  osSemaphoreAcquire(locCompleteHandle, 0);
 8001432:	4b0a      	ldr	r3, [pc, #40]	; (800145c <MX_FREERTOS_Init+0x1bc>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2100      	movs	r1, #0
 8001438:	4618      	mov	r0, r3
 800143a:	f00d fb57 	bl	800eaec <osSemaphoreAcquire>

   /* add threads, ... */


	/* Init code for STM32_WPAN */
	APPE_Init();
 800143e:	f7ff fdd3 	bl	8000fe8 <APPE_Init>


  /* USER CODE END RTOS_THREADS */

}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	080177bc 	.word	0x080177bc
 800144c:	200278b4 	.word	0x200278b4
 8001450:	080177cc 	.word	0x080177cc
 8001454:	20027cfc 	.word	0x20027cfc
 8001458:	080177dc 	.word	0x080177dc
 800145c:	20027cf4 	.word	0x20027cf4
 8001460:	080177ec 	.word	0x080177ec
 8001464:	200278c0 	.word	0x200278c0
 8001468:	0801779c 	.word	0x0801779c
 800146c:	20000af4 	.word	0x20000af4
 8001470:	08003b4d 	.word	0x08003b4d
 8001474:	200278a4 	.word	0x200278a4
 8001478:	080177ac 	.word	0x080177ac
 800147c:	08001539 	.word	0x08001539
 8001480:	20027d0c 	.word	0x20027d0c
 8001484:	080176ac 	.word	0x080176ac
 8001488:	20027d08 	.word	0x20027d08
 800148c:	080176c4 	.word	0x080176c4
 8001490:	200278bc 	.word	0x200278bc
 8001494:	080176dc 	.word	0x080176dc
 8001498:	20027cec 	.word	0x20027cec
 800149c:	080176f4 	.word	0x080176f4
 80014a0:	200278c4 	.word	0x200278c4
 80014a4:	0801770c 	.word	0x0801770c
 80014a8:	200278b8 	.word	0x200278b8
 80014ac:	08017724 	.word	0x08017724
 80014b0:	200278ac 	.word	0x200278ac
 80014b4:	0801773c 	.word	0x0801773c
 80014b8:	200278cc 	.word	0x200278cc
 80014bc:	08017754 	.word	0x08017754
 80014c0:	200277b4 	.word	0x200277b4
 80014c4:	0801776c 	.word	0x0801776c
 80014c8:	200277b8 	.word	0x200277b8
 80014cc:	08017784 	.word	0x08017784
 80014d0:	200278c8 	.word	0x200278c8
 80014d4:	080175b0 	.word	0x080175b0
 80014d8:	08001529 	.word	0x08001529
 80014dc:	2002789c 	.word	0x2002789c
 80014e0:	080175d4 	.word	0x080175d4
 80014e4:	0800408d 	.word	0x0800408d
 80014e8:	200278a8 	.word	0x200278a8
 80014ec:	080175f8 	.word	0x080175f8
 80014f0:	08004369 	.word	0x08004369
 80014f4:	20027cf0 	.word	0x20027cf0
 80014f8:	0801761c 	.word	0x0801761c
 80014fc:	08003945 	.word	0x08003945
 8001500:	20027d10 	.word	0x20027d10
 8001504:	08017640 	.word	0x08017640
 8001508:	08003abd 	.word	0x08003abd
 800150c:	20027d00 	.word	0x20027d00
 8001510:	08017664 	.word	0x08017664
 8001514:	08003cc5 	.word	0x08003cc5
 8001518:	20027cf8 	.word	0x20027cf8
 800151c:	08017688 	.word	0x08017688
 8001520:	0800154d 	.word	0x0800154d
 8001524:	200278a0 	.word	0x200278a0

08001528 <DefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_DefaultTask */
__weak void DefaultTask(void *argument)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001530:	2001      	movs	r0, #1
 8001532:	f00c ffa3 	bl	800e47c <osDelay>
 8001536:	e7fb      	b.n	8001530 <DefaultTask+0x8>

08001538 <watchDogReset>:
  /* USER CODE END DefaultTask */
}

/* watchDogReset function */
void watchDogReset(void *argument)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN watchDogReset */
//	 HAL_IWDG_Refresh(&hiwdg);
  /* USER CODE END watchDogReset */
}
 8001540:	bf00      	nop
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <BlinkTask>:
/**
 * @brief Thread initialization.
 * @param  None
 * @retval None
 */
void BlinkTask(void *argument) {
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]

	uint32_t evt;

	while (1) {
		evt = osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 8001554:	f04f 32ff 	mov.w	r2, #4294967295
 8001558:	2100      	movs	r1, #0
 800155a:	2001      	movs	r0, #1
 800155c:	f00c fefa 	bl	800e354 <osThreadFlagsWait>
 8001560:	60f8      	str	r0, [r7, #12]

		// if signal was received successfully, start blink task
		if ((evt & 0x00000001U) == 0x00000001U) {
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	f003 0301 	and.w	r3, r3, #1
 8001568:	2b00      	cmp	r3, #0
 800156a:	d0f3      	beq.n	8001554 <BlinkTask+0x8>

			// tell other threads that blink has been activated
			osMessageQueueGet(statusQueueHandle, &statusMessage, 0U, osWaitForever);
 800156c:	4b62      	ldr	r3, [pc, #392]	; (80016f8 <BlinkTask+0x1ac>)
 800156e:	6818      	ldr	r0, [r3, #0]
 8001570:	f04f 33ff 	mov.w	r3, #4294967295
 8001574:	2200      	movs	r2, #0
 8001576:	4961      	ldr	r1, [pc, #388]	; (80016fc <BlinkTask+0x1b0>)
 8001578:	f00d fc70 	bl	800ee5c <osMessageQueueGet>
			statusMessage.blinkEnabled = 1;
 800157c:	4b5f      	ldr	r3, [pc, #380]	; (80016fc <BlinkTask+0x1b0>)
 800157e:	2201      	movs	r2, #1
 8001580:	709a      	strb	r2, [r3, #2]
			osMessageQueuePut(statusQueueHandle, (void*) &statusMessage, 0U, 0);
 8001582:	4b5d      	ldr	r3, [pc, #372]	; (80016f8 <BlinkTask+0x1ac>)
 8001584:	6818      	ldr	r0, [r3, #0]
 8001586:	2300      	movs	r3, #0
 8001588:	2200      	movs	r2, #0
 800158a:	495c      	ldr	r1, [pc, #368]	; (80016fc <BlinkTask+0x1b0>)
 800158c:	f00d fbf2 	bl	800ed74 <osMessageQueuePut>

			// start timer and PWM channel for blink LED
			HAL_TIM_Base_Start(&htim2);
 8001590:	485b      	ldr	r0, [pc, #364]	; (8001700 <BlinkTask+0x1b4>)
 8001592:	f00b fc7d 	bl	800ce90 <HAL_TIM_Base_Start>
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001596:	2104      	movs	r1, #4
 8001598:	4859      	ldr	r0, [pc, #356]	; (8001700 <BlinkTask+0x1b4>)
 800159a:	f00b fd2f 	bl	800cffc <HAL_TIM_PWM_Start>

			// start timer for ADC to sample at 1kHz
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*) blink_buffer, sizeof(blink_buffer));
 800159e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80015a2:	4958      	ldr	r1, [pc, #352]	; (8001704 <BlinkTask+0x1b8>)
 80015a4:	4858      	ldr	r0, [pc, #352]	; (8001708 <BlinkTask+0x1bc>)
 80015a6:	f005 fc7f 	bl	8006ea8 <HAL_ADC_Start_DMA>
			// message passing until told to stop
			//      note: DMA triggers callback where buffers are switched and the full one
			//      is passed by reference via queue to masterThread for packetization
			while (1) {
				// wait for data ready flag and/or stop task flasg
				evt = osThreadFlagsWait(0x00000006U, osFlagsWaitAny, osWaitForever);
 80015aa:	f04f 32ff 	mov.w	r2, #4294967295
 80015ae:	2100      	movs	r1, #0
 80015b0:	2006      	movs	r0, #6
 80015b2:	f00c fecf 	bl	800e354 <osThreadFlagsWait>
 80015b6:	60f8      	str	r0, [r7, #12]

				if ((evt & 0x00000004U) == 0x00000004U) {
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	f003 0304 	and.w	r3, r3, #4
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d064      	beq.n	800168c <BlinkTask+0x140>

					// interpolate timestamps for blink packets
					if (previousTick_ms == 0) {
 80015c2:	4b52      	ldr	r3, [pc, #328]	; (800170c <BlinkTask+0x1c0>)
 80015c4:	edd3 7a00 	vldr	s15, [r3]
 80015c8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80015cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015d0:	d108      	bne.n	80015e4 <BlinkTask+0x98>
						previousTick_ms = HAL_GetTick();
 80015d2:	f005 f8e9 	bl	80067a8 <HAL_GetTick>
 80015d6:	ee07 0a90 	vmov	s15, r0
 80015da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015de:	4b4b      	ldr	r3, [pc, #300]	; (800170c <BlinkTask+0x1c0>)
 80015e0:	edc3 7a00 	vstr	s15, [r3]
					}
					tick_ms_diff = (HAL_GetTick() - previousTick_ms) / ((float) BLINK_ITERATOR_COUNT);
 80015e4:	f005 f8e0 	bl	80067a8 <HAL_GetTick>
 80015e8:	ee07 0a90 	vmov	s15, r0
 80015ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015f0:	4b46      	ldr	r3, [pc, #280]	; (800170c <BlinkTask+0x1c0>)
 80015f2:	edd3 7a00 	vldr	s15, [r3]
 80015f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015fa:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80015fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001602:	4b43      	ldr	r3, [pc, #268]	; (8001710 <BlinkTask+0x1c4>)
 8001604:	edc3 7a00 	vstr	s15, [r3]

					// because of COAP packet size restrictions, separate blink packet into chunks of size BLINK_PACKET_SIZE
					for (iterator = 0; iterator < BLINK_ITERATOR_COUNT; iterator++) {
 8001608:	4b42      	ldr	r3, [pc, #264]	; (8001714 <BlinkTask+0x1c8>)
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	e039      	b.n	8001684 <BlinkTask+0x138>

						// grab packet of size BLINK_PACKET_SIZE
						memcpy(blinkMsgBuffer_1.data, &(blink_buffer[iterator * BLINK_PACKET_SIZE]), BLINK_PACKET_SIZE);
 8001610:	4b40      	ldr	r3, [pc, #256]	; (8001714 <BlinkTask+0x1c8>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2264      	movs	r2, #100	; 0x64
 8001616:	fb02 f303 	mul.w	r3, r2, r3
 800161a:	4a3a      	ldr	r2, [pc, #232]	; (8001704 <BlinkTask+0x1b8>)
 800161c:	4413      	add	r3, r2
 800161e:	4a3e      	ldr	r2, [pc, #248]	; (8001718 <BlinkTask+0x1cc>)
 8001620:	4610      	mov	r0, r2
 8001622:	4619      	mov	r1, r3
 8001624:	2364      	movs	r3, #100	; 0x64
 8001626:	461a      	mov	r2, r3
 8001628:	f014 fc90 	bl	8015f4c <memcpy>
						blinkMsgBuffer_1.tick_ms = previousTick_ms + tick_ms_diff;
 800162c:	4b37      	ldr	r3, [pc, #220]	; (800170c <BlinkTask+0x1c0>)
 800162e:	ed93 7a00 	vldr	s14, [r3]
 8001632:	4b37      	ldr	r3, [pc, #220]	; (8001710 <BlinkTask+0x1c4>)
 8001634:	edd3 7a00 	vldr	s15, [r3]
 8001638:	ee77 7a27 	vadd.f32	s15, s14, s15
 800163c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001640:	ee17 2a90 	vmov	r2, s15
 8001644:	4b34      	ldr	r3, [pc, #208]	; (8001718 <BlinkTask+0x1cc>)
 8001646:	665a      	str	r2, [r3, #100]	; 0x64
						blinkMsgBuffer_1.payload_ID = payload_ID;
 8001648:	4b34      	ldr	r3, [pc, #208]	; (800171c <BlinkTask+0x1d0>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a32      	ldr	r2, [pc, #200]	; (8001718 <BlinkTask+0x1cc>)
 800164e:	6693      	str	r3, [r2, #104]	; 0x68

						// add tick cnt
						previousTick_ms = blinkMsgBuffer_1.tick_ms;
 8001650:	4b31      	ldr	r3, [pc, #196]	; (8001718 <BlinkTask+0x1cc>)
 8001652:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001654:	ee07 3a90 	vmov	s15, r3
 8001658:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800165c:	4b2b      	ldr	r3, [pc, #172]	; (800170c <BlinkTask+0x1c0>)
 800165e:	edc3 7a00 	vstr	s15, [r3]
						payload_ID++;
 8001662:	4b2e      	ldr	r3, [pc, #184]	; (800171c <BlinkTask+0x1d0>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	3301      	adds	r3, #1
 8001668:	4a2c      	ldr	r2, [pc, #176]	; (800171c <BlinkTask+0x1d0>)
 800166a:	6013      	str	r3, [r2, #0]

						// put into queue
						osMessageQueuePut(blinkMsgQueueHandle, (void*) &blinkMsgBuffer_1, 0U, 0);
 800166c:	4b2c      	ldr	r3, [pc, #176]	; (8001720 <BlinkTask+0x1d4>)
 800166e:	6818      	ldr	r0, [r3, #0]
 8001670:	2300      	movs	r3, #0
 8001672:	2200      	movs	r2, #0
 8001674:	4928      	ldr	r1, [pc, #160]	; (8001718 <BlinkTask+0x1cc>)
 8001676:	f00d fb7d 	bl	800ed74 <osMessageQueuePut>
					for (iterator = 0; iterator < BLINK_ITERATOR_COUNT; iterator++) {
 800167a:	4b26      	ldr	r3, [pc, #152]	; (8001714 <BlinkTask+0x1c8>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	3301      	adds	r3, #1
 8001680:	4a24      	ldr	r2, [pc, #144]	; (8001714 <BlinkTask+0x1c8>)
 8001682:	6013      	str	r3, [r2, #0]
 8001684:	4b23      	ldr	r3, [pc, #140]	; (8001714 <BlinkTask+0x1c8>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2b09      	cmp	r3, #9
 800168a:	d9c1      	bls.n	8001610 <BlinkTask+0xc4>
					}
				}

				// stop timer and put thread in idle if signal was reset
				if ((evt & 0x00000002U) == 0x00000002U) {
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d089      	beq.n	80015aa <BlinkTask+0x5e>

					HAL_ADC_Stop_DMA(&hadc1);
 8001696:	481c      	ldr	r0, [pc, #112]	; (8001708 <BlinkTask+0x1bc>)
 8001698:	f005 fc8a 	bl	8006fb0 <HAL_ADC_Stop_DMA>
					HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 800169c:	2104      	movs	r1, #4
 800169e:	4818      	ldr	r0, [pc, #96]	; (8001700 <BlinkTask+0x1b4>)
 80016a0:	f00b fcf6 	bl	800d090 <HAL_TIM_PWM_Stop>
					HAL_TIM_Base_Stop(&htim2);
 80016a4:	4816      	ldr	r0, [pc, #88]	; (8001700 <BlinkTask+0x1b4>)
 80016a6:	f00b fc1d 	bl	800cee4 <HAL_TIM_Base_Stop>
					previousTick_ms = 0;
 80016aa:	4b18      	ldr	r3, [pc, #96]	; (800170c <BlinkTask+0x1c0>)
 80016ac:	f04f 0200 	mov.w	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]

					/* tell threads that blink is disabled */
					osMessageQueueGet(statusQueueHandle, &statusMessage, 0U, osWaitForever);
 80016b2:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <BlinkTask+0x1ac>)
 80016b4:	6818      	ldr	r0, [r3, #0]
 80016b6:	f04f 33ff 	mov.w	r3, #4294967295
 80016ba:	2200      	movs	r2, #0
 80016bc:	490f      	ldr	r1, [pc, #60]	; (80016fc <BlinkTask+0x1b0>)
 80016be:	f00d fbcd 	bl	800ee5c <osMessageQueueGet>
					statusMessage.blinkEnabled = 0;
 80016c2:	4b0e      	ldr	r3, [pc, #56]	; (80016fc <BlinkTask+0x1b0>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	709a      	strb	r2, [r3, #2]
					// notify 3D localization thread that blink is deactivating if active
					if (statusMessage.positionEnabled == 1) {
 80016c8:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <BlinkTask+0x1b0>)
 80016ca:	795b      	ldrb	r3, [r3, #5]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d104      	bne.n	80016da <BlinkTask+0x18e>
						osSemaphoreRelease(locNotifyHandle);
 80016d0:	4b14      	ldr	r3, [pc, #80]	; (8001724 <BlinkTask+0x1d8>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f00d fa6f 	bl	800ebb8 <osSemaphoreRelease>
					}
					osMessageQueuePut(statusQueueHandle, (void*) &statusMessage, 0U, 0);
 80016da:	4b07      	ldr	r3, [pc, #28]	; (80016f8 <BlinkTask+0x1ac>)
 80016dc:	6818      	ldr	r0, [r3, #0]
 80016de:	2300      	movs	r3, #0
 80016e0:	2200      	movs	r2, #0
 80016e2:	4906      	ldr	r1, [pc, #24]	; (80016fc <BlinkTask+0x1b0>)
 80016e4:	f00d fb46 	bl	800ed74 <osMessageQueuePut>

					// empty queue
					osMessageQueueReset(blinkMsgQueueHandle);
 80016e8:	4b0d      	ldr	r3, [pc, #52]	; (8001720 <BlinkTask+0x1d4>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f00d fc27 	bl	800ef40 <osMessageQueueReset>

					break;
 80016f2:	bf00      	nop
		evt = osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 80016f4:	e72e      	b.n	8001554 <BlinkTask+0x8>
 80016f6:	bf00      	nop
 80016f8:	200278c8 	.word	0x200278c8
 80016fc:	20027d18 	.word	0x20027d18
 8001700:	200284ac 	.word	0x200284ac
 8001704:	2000029c 	.word	0x2000029c
 8001708:	200276e8 	.word	0x200276e8
 800170c:	20000a74 	.word	0x20000a74
 8001710:	20000a78 	.word	0x20000a78
 8001714:	20000a70 	.word	0x20000a70
 8001718:	20000230 	.word	0x20000230
 800171c:	20000a6c 	.word	0x20000a6c
 8001720:	20027d08 	.word	0x20027d08
 8001724:	20027cfc 	.word	0x20027cfc

08001728 <HAL_ADC_ConvCpltCallback>:
//volatile uint8_t i = 0;
//void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc) {
//	i++;
//}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
	blink_ptr = &blink_buffer[BLINK_HALF_BUFFER_SIZE];
 8001730:	4b06      	ldr	r3, [pc, #24]	; (800174c <HAL_ADC_ConvCpltCallback+0x24>)
 8001732:	4a07      	ldr	r2, [pc, #28]	; (8001750 <HAL_ADC_ConvCpltCallback+0x28>)
 8001734:	601a      	str	r2, [r3, #0]
	osThreadFlagsSet(blinkTaskHandle, 0x00000004U);
 8001736:	4b07      	ldr	r3, [pc, #28]	; (8001754 <HAL_ADC_ConvCpltCallback+0x2c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2104      	movs	r1, #4
 800173c:	4618      	mov	r0, r3
 800173e:	f00c fd57 	bl	800e1f0 <osThreadFlagsSet>

}
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20027d14 	.word	0x20027d14
 8001750:	20000684 	.word	0x20000684
 8001754:	200278a0 	.word	0x200278a0

08001758 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
	blink_ptr = blink_buffer;
 8001760:	4b06      	ldr	r3, [pc, #24]	; (800177c <HAL_ADC_ConvHalfCpltCallback+0x24>)
 8001762:	4a07      	ldr	r2, [pc, #28]	; (8001780 <HAL_ADC_ConvHalfCpltCallback+0x28>)
 8001764:	601a      	str	r2, [r3, #0]
	osThreadFlagsSet(blinkTaskHandle, 0x00000004U);
 8001766:	4b07      	ldr	r3, [pc, #28]	; (8001784 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2104      	movs	r1, #4
 800176c:	4618      	mov	r0, r3
 800176e:	f00c fd3f 	bl	800e1f0 <osThreadFlagsSet>

}
 8001772:	bf00      	nop
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20027d14 	.word	0x20027d14
 8001780:	2000029c 	.word	0x2000029c
 8001784:	200278a0 	.word	0x200278a0

08001788 <LL_AHB2_GRP1_EnableClock>:
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001790:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001794:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001796:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4313      	orrs	r3, r2
 800179e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80017a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4013      	ands	r3, r2
 80017aa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017ac:	68fb      	ldr	r3, [r7, #12]
}
 80017ae:	bf00      	nop
 80017b0:	3714      	adds	r7, #20
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
	...

080017bc <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 80017c0:	4b12      	ldr	r3, [pc, #72]	; (800180c <MX_COMP1_Init+0x50>)
 80017c2:	4a13      	ldr	r2, [pc, #76]	; (8001810 <MX_COMP1_Init+0x54>)
 80017c4:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_1_2VREFINT;
 80017c6:	4b11      	ldr	r3, [pc, #68]	; (800180c <MX_COMP1_Init+0x50>)
 80017c8:	4a12      	ldr	r2, [pc, #72]	; (8001814 <MX_COMP1_Init+0x58>)
 80017ca:	611a      	str	r2, [r3, #16]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO3;
 80017cc:	4b0f      	ldr	r3, [pc, #60]	; (800180c <MX_COMP1_Init+0x50>)
 80017ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017d2:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80017d4:	4b0d      	ldr	r3, [pc, #52]	; (800180c <MX_COMP1_Init+0x50>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80017da:	4b0c      	ldr	r3, [pc, #48]	; (800180c <MX_COMP1_Init+0x50>)
 80017dc:	2200      	movs	r2, #0
 80017de:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80017e0:	4b0a      	ldr	r3, [pc, #40]	; (800180c <MX_COMP1_Init+0x50>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	61da      	str	r2, [r3, #28]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 80017e6:	4b09      	ldr	r3, [pc, #36]	; (800180c <MX_COMP1_Init+0x50>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	609a      	str	r2, [r3, #8]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 80017ec:	4b07      	ldr	r3, [pc, #28]	; (800180c <MX_COMP1_Init+0x50>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 80017f2:	4b06      	ldr	r3, [pc, #24]	; (800180c <MX_COMP1_Init+0x50>)
 80017f4:	2231      	movs	r2, #49	; 0x31
 80017f6:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80017f8:	4804      	ldr	r0, [pc, #16]	; (800180c <MX_COMP1_Init+0x50>)
 80017fa:	f006 fa3f 	bl	8007c7c <HAL_COMP_Init>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_COMP1_Init+0x4c>
  {
    Error_Handler();
 8001804:	f002 fda8 	bl	8004358 <Error_Handler>
  }

}
 8001808:	bf00      	nop
 800180a:	bd80      	pop	{r7, pc}
 800180c:	20027d20 	.word	0x20027d20
 8001810:	40010200 	.word	0x40010200
 8001814:	00c00010 	.word	0x00c00010

08001818 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b088      	sub	sp, #32
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001820:	f107 030c 	add.w	r3, r7, #12
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	60da      	str	r2, [r3, #12]
 800182e:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a0f      	ldr	r2, [pc, #60]	; (8001874 <HAL_COMP_MspInit+0x5c>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d117      	bne.n	800186a <HAL_COMP_MspInit+0x52>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800183a:	2001      	movs	r0, #1
 800183c:	f7ff ffa4 	bl	8001788 <LL_AHB2_GRP1_EnableClock>
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = LH_SIG_Pin;
 8001840:	2302      	movs	r3, #2
 8001842:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001844:	2303      	movs	r3, #3
 8001846:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(LH_SIG_GPIO_Port, &GPIO_InitStruct);
 800184c:	f107 030c 	add.w	r3, r7, #12
 8001850:	4619      	mov	r1, r3
 8001852:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001856:	f007 f861 	bl	800891c <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(COMP_IRQn, 5, 0);
 800185a:	2200      	movs	r2, #0
 800185c:	2105      	movs	r1, #5
 800185e:	2016      	movs	r0, #22
 8001860:	f006 fcd5 	bl	800820e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP_IRQn);
 8001864:	2016      	movs	r0, #22
 8001866:	f006 fcec 	bl	8008242 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 800186a:	bf00      	nop
 800186c:	3720      	adds	r7, #32
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40010200 	.word	0x40010200

08001878 <process_pulse_lengths>:
    kPhaseFixAcquired = 4,
    kPhaseFixFinal = 16,
};

//length of pulse_lens is num_base_stations
void process_pulse_lengths(CyclePhaseClassifier * self, uint32_t cycle_idx, const uint16_t *pulse_lens){
 8001878:	b480      	push	{r7}
 800187a:	b089      	sub	sp, #36	; 0x24
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
	int cur_phase_id = -1;
 8001884:	f04f 33ff 	mov.w	r3, #4294967295
 8001888:	61fb      	str	r3, [r7, #28]
	if(pulse_lens[0] > 0 && pulse_lens[1] > 0){
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	881b      	ldrh	r3, [r3, #0]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d02a      	beq.n	80018e8 <process_pulse_lengths+0x70>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	3302      	adds	r3, #2
 8001896:	881b      	ldrh	r3, [r3, #0]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d025      	beq.n	80018e8 <process_pulse_lengths+0x70>
		uint8_t cur_more = pulse_lens[0] > pulse_lens[1];
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	881a      	ldrh	r2, [r3, #0]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	3302      	adds	r3, #2
 80018a4:	881b      	ldrh	r3, [r3, #0]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	bf8c      	ite	hi
 80018aa:	2301      	movhi	r3, #1
 80018ac:	2300      	movls	r3, #0
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	76fb      	strb	r3, [r7, #27]
        if (cycle_idx == self->prev_full_cycle_idx_ + 1) {
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	3301      	adds	r3, #1
 80018b8:	68ba      	ldr	r2, [r7, #8]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d10e      	bne.n	80018dc <process_pulse_lengths+0x64>
            // To get current phase, we use simple fact that in phases 0 and 1, first pulse is shorter than the second,
            // and in phases 2, 3 it is longer. This allows us to estimate current phase using comparison between
            // the pair of pulses in current cycle (cur_more) and the previous one.
            self->phase_history_ = (self->phase_history_ << 1) | cur_more;  // phase_history_ keeps a bit for each pulse comparison.
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	005a      	lsls	r2, r3, #1
 80018c4:	7efb      	ldrb	r3, [r7, #27]
 80018c6:	431a      	orrs	r2, r3
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	605a      	str	r2, [r3, #4]
            static const char phases[4] = {1, 2, 0, 3};
            cur_phase_id = phases[self->phase_history_ & 0x3];  // 2 least significant bits give us enough info to get phase.
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f003 0303 	and.w	r3, r3, #3
 80018d4:	4a1c      	ldr	r2, [pc, #112]	; (8001948 <process_pulse_lengths+0xd0>)
 80018d6:	5cd3      	ldrb	r3, [r2, r3]
 80018d8:	61fb      	str	r3, [r7, #28]
 80018da:	e002      	b.n	80018e2 <process_pulse_lengths+0x6a>
            //UART_Print_int32_t(cur_phase_id);
        }
        else {
            self->phase_history_ = cur_more;
 80018dc:	7efa      	ldrb	r2, [r7, #27]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	605a      	str	r2, [r3, #4]
        }
        self->prev_full_cycle_idx_ = cycle_idx;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	68ba      	ldr	r2, [r7, #8]
 80018e6:	601a      	str	r2, [r3, #0]
	}

    // If we haven't achieved final fix yet, check the cur_phase_id is as expected.
    if (cur_phase_id >= 0 && self->fix_level_ < kPhaseFixFinal) {
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	db26      	blt.n	800193c <process_pulse_lengths+0xc4>
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	2b0f      	cmp	r3, #15
 80018f4:	dc22      	bgt.n	800193c <process_pulse_lengths+0xc4>
        if (self->fix_level_ == kPhaseFixNone) {
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d10a      	bne.n	8001914 <process_pulse_lengths+0x9c>
            // Use current phase_id as the candidate.
            self->fix_level_ = kPhaseFixCandidate;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2201      	movs	r2, #1
 8001902:	609a      	str	r2, [r3, #8]
            self->phase_shift_ = (cur_phase_id - cycle_idx) & 0x3;
 8001904:	69fa      	ldr	r2, [r7, #28]
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	f003 0203 	and.w	r2, r3, #3
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	60da      	str	r2, [r3, #12]
            // Either add or remove confidence that the phase_shift_ is correct.
            int expected_phase_id = (cycle_idx + self->phase_shift_) & 0x3;
            self->fix_level_ += (cur_phase_id == expected_phase_id) ? +1 : -1;
        }
    }
}
 8001912:	e013      	b.n	800193c <process_pulse_lengths+0xc4>
            int expected_phase_id = (cycle_idx + self->phase_shift_) & 0x3;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	68da      	ldr	r2, [r3, #12]
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	4413      	add	r3, r2
 800191c:	f003 0303 	and.w	r3, r3, #3
 8001920:	617b      	str	r3, [r7, #20]
            self->fix_level_ += (cur_phase_id == expected_phase_id) ? +1 : -1;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	69f9      	ldr	r1, [r7, #28]
 8001928:	697a      	ldr	r2, [r7, #20]
 800192a:	4291      	cmp	r1, r2
 800192c:	d101      	bne.n	8001932 <process_pulse_lengths+0xba>
 800192e:	2201      	movs	r2, #1
 8001930:	e001      	b.n	8001936 <process_pulse_lengths+0xbe>
 8001932:	f04f 32ff 	mov.w	r2, #4294967295
 8001936:	441a      	add	r2, r3
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	609a      	str	r2, [r3, #8]
}
 800193c:	bf00      	nop
 800193e:	3724      	adds	r7, #36	; 0x24
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	080177fc 	.word	0x080177fc

0800194c <get_phase>:
float expected_pulse_len(CyclePhaseClassifier * self, uint8_t skip, uint8_t data, uint8_t axis) {
    // See https://github.com/nairol/LighthouseRedox/blob/master/docs/Light%20Emissions.md
    return self->pulse_base_len_ + (skip << 2 | data << 1 | axis) * 10.416f;
}

int get_phase(CyclePhaseClassifier * self, uint32_t cycle_idx) {
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
    if (self->fix_level_ >= kPhaseFixAcquired) {
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	2b03      	cmp	r3, #3
 800195c:	dd06      	ble.n	800196c <get_phase+0x20>
        return (cycle_idx + self->phase_shift_) & 0x3;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	68da      	ldr	r2, [r3, #12]
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	4413      	add	r3, r2
 8001966:	f003 0303 	and.w	r3, r3, #3
 800196a:	e001      	b.n	8001970 <get_phase+0x24>
    } else {
        return -1;
 800196c:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8001970:	4618      	mov	r0, r3
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <reset>:

void reset(CyclePhaseClassifier * self) {
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
    self->fix_level_ = kPhaseFixNone;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	609a      	str	r2, [r3, #8]
    self->prev_full_cycle_idx_ = -1;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f04f 32ff 	mov.w	r2, #4294967295
 8001990:	601a      	str	r2, [r3, #0]
    self->pulse_base_len_ = 62.5f;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a05      	ldr	r2, [pc, #20]	; (80019ac <reset+0x30>)
 8001996:	611a      	str	r2, [r3, #16]
    self->phase_history_ = 0;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2200      	movs	r2, #0
 800199c:	605a      	str	r2, [r3, #4]
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	427a0000 	.word	0x427a0000

080019b0 <LL_AHB1_GRP1_EnableClock>:
{
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80019b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80019be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80019c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4013      	ands	r3, r2
 80019d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019d4:	68fb      	ldr	r3, [r7, #12]
}
 80019d6:	bf00      	nop
 80019d8:	3714      	adds	r7, #20
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80019e6:	2004      	movs	r0, #4
 80019e8:	f7ff ffe2 	bl	80019b0 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019ec:	2001      	movs	r0, #1
 80019ee:	f7ff ffdf 	bl	80019b0 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80019f2:	2200      	movs	r2, #0
 80019f4:	2105      	movs	r1, #5
 80019f6:	200b      	movs	r0, #11
 80019f8:	f006 fc09 	bl	800820e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80019fc:	200b      	movs	r0, #11
 80019fe:	f006 fc20 	bl	8008242 <HAL_NVIC_EnableIRQ>

}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}
	...

08001a08 <IMU_begin>:

/* Functions Definition ------------------------------------------------------*/
//Attempt communication with the device
//Return true if we got a 'Polo' back from Marco
bool IMU_begin(uint8_t deviceAddress, uint8_t intPin, GPIO_TypeDef* intPort)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	603a      	str	r2, [r7, #0]
 8001a12:	71fb      	strb	r3, [r7, #7]
 8001a14:	460b      	mov	r3, r1
 8001a16:	71bb      	strb	r3, [r7, #6]
	_deviceAddress = deviceAddress << 1; //If provided, store the I2C address from user
 8001a18:	79fb      	ldrb	r3, [r7, #7]
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	b2da      	uxtb	r2, r3
 8001a1e:	4b12      	ldr	r3, [pc, #72]	; (8001a68 <IMU_begin+0x60>)
 8001a20:	701a      	strb	r2, [r3, #0]
//	_i2cPort = &wirePort;			//Grab which port the user wants us to use
	_int = intPin;					//Get the pin that the user wants to use for interrupts. By default, it's NULL and we'll not use it in dataAvailable() function.
 8001a22:	4a12      	ldr	r2, [pc, #72]	; (8001a6c <IMU_begin+0x64>)
 8001a24:	79bb      	ldrb	r3, [r7, #6]
 8001a26:	7013      	strb	r3, [r2, #0]
	_intPort = intPort;
 8001a28:	4a11      	ldr	r2, [pc, #68]	; (8001a70 <IMU_begin+0x68>)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	6013      	str	r3, [r2, #0]
	//But if they forget, we start the hardware here.
	//_i2cPort->begin();


	//Begin by resetting the IMU
	IMU_softReset();
 8001a2e:	f000 fa85 	bl	8001f3c <IMU_softReset>

	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 8001a32:	4b10      	ldr	r3, [pc, #64]	; (8001a74 <IMU_begin+0x6c>)
 8001a34:	22f9      	movs	r2, #249	; 0xf9
 8001a36:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;							  //Reserved
 8001a38:	4b0e      	ldr	r3, [pc, #56]	; (8001a74 <IMU_begin+0x6c>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	705a      	strb	r2, [r3, #1]


	//Transmit packet on channel 2, 2 bytes
	IMU_sendPacket(CHANNEL_CONTROL, 2);
 8001a3e:	2302      	movs	r3, #2
 8001a40:	2102      	movs	r1, #2
 8001a42:	4618      	mov	r0, r3
 8001a44:	f000 fc14 	bl	8002270 <IMU_sendPacket>

	//Now we wait for response
	if (IMU_receivePacket() == true)
 8001a48:	f000 fb6a 	bl	8002120 <IMU_receivePacket>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d005      	beq.n	8001a5e <IMU_begin+0x56>
	{
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 8001a52:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <IMU_begin+0x6c>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	2bf8      	cmp	r3, #248	; 0xf8
 8001a58:	d101      	bne.n	8001a5e <IMU_begin+0x56>
		{
			return (true);
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e000      	b.n	8001a60 <IMU_begin+0x58>
		}
	}

	return (false); //Something went wrong
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	20000006 	.word	0x20000006
 8001a6c:	20027da2 	.word	0x20027da2
 8001a70:	20027e68 	.word	0x20027e68
 8001a74:	20027de0 	.word	0x20027de0

08001a78 <IMU_dataAvailable>:
//}

//Updates the latest variables if possible
//Returns false if new readings are not available
bool IMU_dataAvailable(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
	//If we have an interrupt pin connection available, check if data is available.
	//If int pin is not set, then we'll rely on receivePacket() to timeout
	//See issue 13: https://github.com/sparkfun/SparkFun_BNO080_Arduino_Library/issues/13
	if (_int != 255)
 8001a7c:	4b17      	ldr	r3, [pc, #92]	; (8001adc <IMU_dataAvailable+0x64>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	2bff      	cmp	r3, #255	; 0xff
 8001a82:	d00d      	beq.n	8001aa0 <IMU_dataAvailable+0x28>
	{
		if( HAL_GPIO_ReadPin(_intPort, _int) == GPIO_PIN_SET)
 8001a84:	4b16      	ldr	r3, [pc, #88]	; (8001ae0 <IMU_dataAvailable+0x68>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	4b14      	ldr	r3, [pc, #80]	; (8001adc <IMU_dataAvailable+0x64>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4610      	mov	r0, r2
 8001a92:	f007 f8b3 	bl	8008bfc <HAL_GPIO_ReadPin>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d101      	bne.n	8001aa0 <IMU_dataAvailable+0x28>
			return (false);
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	e01b      	b.n	8001ad8 <IMU_dataAvailable+0x60>
//			return (false);
	}

//	if(HAL_GPIO_ReadPin(_intPort, _int) == GPIO_PIN_SET)
//	{
	if (IMU_receivePacket() == true)
 8001aa0:	f000 fb3e 	bl	8002120 <IMU_receivePacket>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d015      	beq.n	8001ad6 <IMU_dataAvailable+0x5e>
	{
		//Check to see if this packet is a sensor reporting its data to us
		if (shtpHeader[2] == CHANNEL_REPORTS && shtpData[0] == SHTP_REPORT_BASE_TIMESTAMP)
 8001aaa:	4b0e      	ldr	r3, [pc, #56]	; (8001ae4 <IMU_dataAvailable+0x6c>)
 8001aac:	789b      	ldrb	r3, [r3, #2]
 8001aae:	2203      	movs	r2, #3
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d107      	bne.n	8001ac4 <IMU_dataAvailable+0x4c>
 8001ab4:	4b0c      	ldr	r3, [pc, #48]	; (8001ae8 <IMU_dataAvailable+0x70>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	2bfb      	cmp	r3, #251	; 0xfb
 8001aba:	d103      	bne.n	8001ac4 <IMU_dataAvailable+0x4c>
		{
			IMU_parseInputReport(); //This will update the rawAccelX, etc variables depending on which feature report is found
 8001abc:	f000 f832 	bl	8001b24 <IMU_parseInputReport>
			return (true);
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e009      	b.n	8001ad8 <IMU_dataAvailable+0x60>
		}
		else if (shtpHeader[2] == CHANNEL_CONTROL)
 8001ac4:	4b07      	ldr	r3, [pc, #28]	; (8001ae4 <IMU_dataAvailable+0x6c>)
 8001ac6:	789b      	ldrb	r3, [r3, #2]
 8001ac8:	2202      	movs	r2, #2
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d103      	bne.n	8001ad6 <IMU_dataAvailable+0x5e>
		{
			IMU_parseCommandReport(); //This will update responses to commands, calibrationStatus, etc.
 8001ace:	f000 f80d 	bl	8001aec <IMU_parseCommandReport>
			return (true);
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e000      	b.n	8001ad8 <IMU_dataAvailable+0x60>
		}
	}
//	}
	return (false);
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	20027da2 	.word	0x20027da2
 8001ae0:	20027e68 	.word	0x20027e68
 8001ae4:	20027d50 	.word	0x20027d50
 8001ae8:	20027de0 	.word	0x20027de0

08001aec <IMU_parseCommandReport>:
//shtpData[5 + 5]: R5
//shtpData[5 + 6]: R6
//shtpData[5 + 7]: R7
//shtpData[5 + 8]: R8
void IMU_parseCommandReport(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
	if (shtpData[0] == SHTP_REPORT_COMMAND_RESPONSE)
 8001af2:	4b0a      	ldr	r3, [pc, #40]	; (8001b1c <IMU_parseCommandReport+0x30>)
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	2bf1      	cmp	r3, #241	; 0xf1
 8001af8:	d109      	bne.n	8001b0e <IMU_parseCommandReport+0x22>
	{
		//The BNO080 responds with this report to command requests. It's up to use to remember which command we issued.
		uint8_t command = shtpData[2]; //This is the Command byte of the response
 8001afa:	4b08      	ldr	r3, [pc, #32]	; (8001b1c <IMU_parseCommandReport+0x30>)
 8001afc:	789b      	ldrb	r3, [r3, #2]
 8001afe:	71fb      	strb	r3, [r7, #7]

		if (command == COMMAND_ME_CALIBRATE)
 8001b00:	79fb      	ldrb	r3, [r7, #7]
 8001b02:	2b07      	cmp	r3, #7
 8001b04:	d103      	bne.n	8001b0e <IMU_parseCommandReport+0x22>
		{
			calibrationStatus = shtpData[5 + 0]; //R0 - Status (0 = success, non-zero = fail)
 8001b06:	4b05      	ldr	r3, [pc, #20]	; (8001b1c <IMU_parseCommandReport+0x30>)
 8001b08:	795a      	ldrb	r2, [r3, #5]
 8001b0a:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <IMU_parseCommandReport+0x34>)
 8001b0c:	701a      	strb	r2, [r3, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	20027de0 	.word	0x20027de0
 8001b20:	20027e93 	.word	0x20027e93

08001b24 <IMU_parseInputReport>:
//shtpData[6:7]: j/accel y/gyro y/etc
//shtpData[8:9]: k/accel z/gyro z/etc
//shtpData[10:11]: real/gyro temp/etc
//shtpData[12:13]: Accuracy estimate
void IMU_parseInputReport(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0
	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)shtpHeader[1] << 8 | shtpHeader[0]);
 8001b2a:	4b96      	ldr	r3, [pc, #600]	; (8001d84 <IMU_parseInputReport+0x260>)
 8001b2c:	785b      	ldrb	r3, [r3, #1]
 8001b2e:	021b      	lsls	r3, r3, #8
 8001b30:	b21a      	sxth	r2, r3
 8001b32:	4b94      	ldr	r3, [pc, #592]	; (8001d84 <IMU_parseInputReport+0x260>)
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	b21b      	sxth	r3, r3
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	823b      	strh	r3, [r7, #16]
	dataLength &= ~(1 << 15); //Clear the MSbit. This bit indicates if this package is a continuation of the last.
 8001b3c:	8a3b      	ldrh	r3, [r7, #16]
 8001b3e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001b42:	823b      	strh	r3, [r7, #16]
	//Ignore it for now. TODO catch this as an error and exit

	dataLength -= 4; //Remove the header bytes from the data count
 8001b44:	8a3b      	ldrh	r3, [r7, #16]
 8001b46:	3b04      	subs	r3, #4
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	823b      	strh	r3, [r7, #16]

	timeStamp = ((uint32_t)shtpData[4] << (8 * 3)) | ((uint32_t)shtpData[3] << (8 * 2)) | ((uint32_t)shtpData[2] << (8 * 1)) | ((uint32_t)shtpData[1] << (8 * 0));
 8001b4c:	4b8e      	ldr	r3, [pc, #568]	; (8001d88 <IMU_parseInputReport+0x264>)
 8001b4e:	791b      	ldrb	r3, [r3, #4]
 8001b50:	061a      	lsls	r2, r3, #24
 8001b52:	4b8d      	ldr	r3, [pc, #564]	; (8001d88 <IMU_parseInputReport+0x264>)
 8001b54:	78db      	ldrb	r3, [r3, #3]
 8001b56:	041b      	lsls	r3, r3, #16
 8001b58:	431a      	orrs	r2, r3
 8001b5a:	4b8b      	ldr	r3, [pc, #556]	; (8001d88 <IMU_parseInputReport+0x264>)
 8001b5c:	789b      	ldrb	r3, [r3, #2]
 8001b5e:	021b      	lsls	r3, r3, #8
 8001b60:	4313      	orrs	r3, r2
 8001b62:	4a89      	ldr	r2, [pc, #548]	; (8001d88 <IMU_parseInputReport+0x264>)
 8001b64:	7852      	ldrb	r2, [r2, #1]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	4a88      	ldr	r2, [pc, #544]	; (8001d8c <IMU_parseInputReport+0x268>)
 8001b6a:	6013      	str	r3, [r2, #0]

	uint8_t status = shtpData[5 + 2] & 0x03; //Get status bits
 8001b6c:	4b86      	ldr	r3, [pc, #536]	; (8001d88 <IMU_parseInputReport+0x264>)
 8001b6e:	79db      	ldrb	r3, [r3, #7]
 8001b70:	f003 0303 	and.w	r3, r3, #3
 8001b74:	73fb      	strb	r3, [r7, #15]
	uint16_t data1 = (uint16_t)shtpData[5 + 5] << 8 | shtpData[5 + 4];
 8001b76:	4b84      	ldr	r3, [pc, #528]	; (8001d88 <IMU_parseInputReport+0x264>)
 8001b78:	7a9b      	ldrb	r3, [r3, #10]
 8001b7a:	021b      	lsls	r3, r3, #8
 8001b7c:	b21a      	sxth	r2, r3
 8001b7e:	4b82      	ldr	r3, [pc, #520]	; (8001d88 <IMU_parseInputReport+0x264>)
 8001b80:	7a5b      	ldrb	r3, [r3, #9]
 8001b82:	b21b      	sxth	r3, r3
 8001b84:	4313      	orrs	r3, r2
 8001b86:	b21b      	sxth	r3, r3
 8001b88:	81bb      	strh	r3, [r7, #12]
	uint16_t data2 = (uint16_t)shtpData[5 + 7] << 8 | shtpData[5 + 6];
 8001b8a:	4b7f      	ldr	r3, [pc, #508]	; (8001d88 <IMU_parseInputReport+0x264>)
 8001b8c:	7b1b      	ldrb	r3, [r3, #12]
 8001b8e:	021b      	lsls	r3, r3, #8
 8001b90:	b21a      	sxth	r2, r3
 8001b92:	4b7d      	ldr	r3, [pc, #500]	; (8001d88 <IMU_parseInputReport+0x264>)
 8001b94:	7adb      	ldrb	r3, [r3, #11]
 8001b96:	b21b      	sxth	r3, r3
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	b21b      	sxth	r3, r3
 8001b9c:	817b      	strh	r3, [r7, #10]
	uint16_t data3 = (uint16_t)shtpData[5 + 9] << 8 | shtpData[5 + 8];
 8001b9e:	4b7a      	ldr	r3, [pc, #488]	; (8001d88 <IMU_parseInputReport+0x264>)
 8001ba0:	7b9b      	ldrb	r3, [r3, #14]
 8001ba2:	021b      	lsls	r3, r3, #8
 8001ba4:	b21a      	sxth	r2, r3
 8001ba6:	4b78      	ldr	r3, [pc, #480]	; (8001d88 <IMU_parseInputReport+0x264>)
 8001ba8:	7b5b      	ldrb	r3, [r3, #13]
 8001baa:	b21b      	sxth	r3, r3
 8001bac:	4313      	orrs	r3, r2
 8001bae:	b21b      	sxth	r3, r3
 8001bb0:	813b      	strh	r3, [r7, #8]
	uint16_t data4 = 0;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	82fb      	strh	r3, [r7, #22]
	uint16_t data5 = 0; //We would need to change this to uin32_t to capture time stamp value on Raw Accel/Gyro/Mag reports
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	82bb      	strh	r3, [r7, #20]

	if (dataLength - 5 > 9)
 8001bba:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001bbe:	3b05      	subs	r3, #5
 8001bc0:	2b09      	cmp	r3, #9
 8001bc2:	dd09      	ble.n	8001bd8 <IMU_parseInputReport+0xb4>
	{
		data4 = (uint16_t)shtpData[5 + 11] << 8 | shtpData[5 + 10];
 8001bc4:	4b70      	ldr	r3, [pc, #448]	; (8001d88 <IMU_parseInputReport+0x264>)
 8001bc6:	7c1b      	ldrb	r3, [r3, #16]
 8001bc8:	021b      	lsls	r3, r3, #8
 8001bca:	b21a      	sxth	r2, r3
 8001bcc:	4b6e      	ldr	r3, [pc, #440]	; (8001d88 <IMU_parseInputReport+0x264>)
 8001bce:	7bdb      	ldrb	r3, [r3, #15]
 8001bd0:	b21b      	sxth	r3, r3
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	b21b      	sxth	r3, r3
 8001bd6:	82fb      	strh	r3, [r7, #22]
	}
	if (dataLength - 5 > 11)
 8001bd8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001bdc:	3b05      	subs	r3, #5
 8001bde:	2b0b      	cmp	r3, #11
 8001be0:	dd09      	ble.n	8001bf6 <IMU_parseInputReport+0xd2>
	{
		data5 = (uint16_t)shtpData[5 + 13] << 8 | shtpData[5 + 12];
 8001be2:	4b69      	ldr	r3, [pc, #420]	; (8001d88 <IMU_parseInputReport+0x264>)
 8001be4:	7c9b      	ldrb	r3, [r3, #18]
 8001be6:	021b      	lsls	r3, r3, #8
 8001be8:	b21a      	sxth	r2, r3
 8001bea:	4b67      	ldr	r3, [pc, #412]	; (8001d88 <IMU_parseInputReport+0x264>)
 8001bec:	7c5b      	ldrb	r3, [r3, #17]
 8001bee:	b21b      	sxth	r3, r3
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	b21b      	sxth	r3, r3
 8001bf4:	82bb      	strh	r3, [r7, #20]
	}

	//Store these generic values to their proper global variable
	if (shtpData[5] == SENSOR_REPORTID_ACCELEROMETER)
 8001bf6:	4b64      	ldr	r3, [pc, #400]	; (8001d88 <IMU_parseInputReport+0x264>)
 8001bf8:	795b      	ldrb	r3, [r3, #5]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d10d      	bne.n	8001c1a <IMU_parseInputReport+0xf6>
	{
		accelAccuracy = status;
 8001bfe:	7bfb      	ldrb	r3, [r7, #15]
 8001c00:	b29a      	uxth	r2, r3
 8001c02:	4b63      	ldr	r3, [pc, #396]	; (8001d90 <IMU_parseInputReport+0x26c>)
 8001c04:	801a      	strh	r2, [r3, #0]
		rawAccelX = data1;
 8001c06:	4a63      	ldr	r2, [pc, #396]	; (8001d94 <IMU_parseInputReport+0x270>)
 8001c08:	89bb      	ldrh	r3, [r7, #12]
 8001c0a:	8013      	strh	r3, [r2, #0]
		rawAccelY = data2;
 8001c0c:	4a62      	ldr	r2, [pc, #392]	; (8001d98 <IMU_parseInputReport+0x274>)
 8001c0e:	897b      	ldrh	r3, [r7, #10]
 8001c10:	8013      	strh	r3, [r2, #0]
		rawAccelZ = data3;
 8001c12:	4a62      	ldr	r2, [pc, #392]	; (8001d9c <IMU_parseInputReport+0x278>)
 8001c14:	893b      	ldrh	r3, [r7, #8]
 8001c16:	8013      	strh	r3, [r2, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 8001c18:	e16a      	b.n	8001ef0 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_LINEAR_ACCELERATION)
 8001c1a:	4b5b      	ldr	r3, [pc, #364]	; (8001d88 <IMU_parseInputReport+0x264>)
 8001c1c:	795b      	ldrb	r3, [r3, #5]
 8001c1e:	2b04      	cmp	r3, #4
 8001c20:	d10d      	bne.n	8001c3e <IMU_parseInputReport+0x11a>
		accelLinAccuracy = status;
 8001c22:	7bfb      	ldrb	r3, [r7, #15]
 8001c24:	b29a      	uxth	r2, r3
 8001c26:	4b5e      	ldr	r3, [pc, #376]	; (8001da0 <IMU_parseInputReport+0x27c>)
 8001c28:	801a      	strh	r2, [r3, #0]
		rawLinAccelX = data1;
 8001c2a:	4a5e      	ldr	r2, [pc, #376]	; (8001da4 <IMU_parseInputReport+0x280>)
 8001c2c:	89bb      	ldrh	r3, [r7, #12]
 8001c2e:	8013      	strh	r3, [r2, #0]
		rawLinAccelY = data2;
 8001c30:	4a5d      	ldr	r2, [pc, #372]	; (8001da8 <IMU_parseInputReport+0x284>)
 8001c32:	897b      	ldrh	r3, [r7, #10]
 8001c34:	8013      	strh	r3, [r2, #0]
		rawLinAccelZ = data3;
 8001c36:	4a5d      	ldr	r2, [pc, #372]	; (8001dac <IMU_parseInputReport+0x288>)
 8001c38:	893b      	ldrh	r3, [r7, #8]
 8001c3a:	8013      	strh	r3, [r2, #0]
}
 8001c3c:	e158      	b.n	8001ef0 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_GYROSCOPE)
 8001c3e:	4b52      	ldr	r3, [pc, #328]	; (8001d88 <IMU_parseInputReport+0x264>)
 8001c40:	795b      	ldrb	r3, [r3, #5]
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d10d      	bne.n	8001c62 <IMU_parseInputReport+0x13e>
		gyroAccuracy = status;
 8001c46:	7bfb      	ldrb	r3, [r7, #15]
 8001c48:	b29a      	uxth	r2, r3
 8001c4a:	4b59      	ldr	r3, [pc, #356]	; (8001db0 <IMU_parseInputReport+0x28c>)
 8001c4c:	801a      	strh	r2, [r3, #0]
		rawGyroX = data1;
 8001c4e:	4a59      	ldr	r2, [pc, #356]	; (8001db4 <IMU_parseInputReport+0x290>)
 8001c50:	89bb      	ldrh	r3, [r7, #12]
 8001c52:	8013      	strh	r3, [r2, #0]
		rawGyroY = data2;
 8001c54:	4a58      	ldr	r2, [pc, #352]	; (8001db8 <IMU_parseInputReport+0x294>)
 8001c56:	897b      	ldrh	r3, [r7, #10]
 8001c58:	8013      	strh	r3, [r2, #0]
		rawGyroZ = data3;
 8001c5a:	4a58      	ldr	r2, [pc, #352]	; (8001dbc <IMU_parseInputReport+0x298>)
 8001c5c:	893b      	ldrh	r3, [r7, #8]
 8001c5e:	8013      	strh	r3, [r2, #0]
}
 8001c60:	e146      	b.n	8001ef0 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_MAGNETIC_FIELD)
 8001c62:	4b49      	ldr	r3, [pc, #292]	; (8001d88 <IMU_parseInputReport+0x264>)
 8001c64:	795b      	ldrb	r3, [r3, #5]
 8001c66:	2b03      	cmp	r3, #3
 8001c68:	d10d      	bne.n	8001c86 <IMU_parseInputReport+0x162>
		magAccuracy = status;
 8001c6a:	7bfb      	ldrb	r3, [r7, #15]
 8001c6c:	b29a      	uxth	r2, r3
 8001c6e:	4b54      	ldr	r3, [pc, #336]	; (8001dc0 <IMU_parseInputReport+0x29c>)
 8001c70:	801a      	strh	r2, [r3, #0]
		rawMagX = data1;
 8001c72:	4a54      	ldr	r2, [pc, #336]	; (8001dc4 <IMU_parseInputReport+0x2a0>)
 8001c74:	89bb      	ldrh	r3, [r7, #12]
 8001c76:	8013      	strh	r3, [r2, #0]
		rawMagY = data2;
 8001c78:	4a53      	ldr	r2, [pc, #332]	; (8001dc8 <IMU_parseInputReport+0x2a4>)
 8001c7a:	897b      	ldrh	r3, [r7, #10]
 8001c7c:	8013      	strh	r3, [r2, #0]
		rawMagZ = data3;
 8001c7e:	4a53      	ldr	r2, [pc, #332]	; (8001dcc <IMU_parseInputReport+0x2a8>)
 8001c80:	893b      	ldrh	r3, [r7, #8]
 8001c82:	8013      	strh	r3, [r2, #0]
}
 8001c84:	e134      	b.n	8001ef0 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_ROTATION_VECTOR || shtpData[5] == SENSOR_REPORTID_GAME_ROTATION_VECTOR)
 8001c86:	4b40      	ldr	r3, [pc, #256]	; (8001d88 <IMU_parseInputReport+0x264>)
 8001c88:	795b      	ldrb	r3, [r3, #5]
 8001c8a:	2b05      	cmp	r3, #5
 8001c8c:	d003      	beq.n	8001c96 <IMU_parseInputReport+0x172>
 8001c8e:	4b3e      	ldr	r3, [pc, #248]	; (8001d88 <IMU_parseInputReport+0x264>)
 8001c90:	795b      	ldrb	r3, [r3, #5]
 8001c92:	2b08      	cmp	r3, #8
 8001c94:	d166      	bne.n	8001d64 <IMU_parseInputReport+0x240>
		rotSample.tick_ms = HAL_GetTick();
 8001c96:	f004 fd87 	bl	80067a8 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	4b4c      	ldr	r3, [pc, #304]	; (8001dd0 <IMU_parseInputReport+0x2ac>)
 8001c9e:	615a      	str	r2, [r3, #20]
		rotSample.quatI =  IMU_qToFloat(data1, rotationVector_Q1);;
 8001ca0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001ca4:	4b4b      	ldr	r3, [pc, #300]	; (8001dd4 <IMU_parseInputReport+0x2b0>)
 8001ca6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	4619      	mov	r1, r3
 8001cae:	4610      	mov	r0, r2
 8001cb0:	f000 f966 	bl	8001f80 <IMU_qToFloat>
 8001cb4:	eef0 7a40 	vmov.f32	s15, s0
 8001cb8:	4b45      	ldr	r3, [pc, #276]	; (8001dd0 <IMU_parseInputReport+0x2ac>)
 8001cba:	edc3 7a00 	vstr	s15, [r3]
		rotSample.quatJ =  IMU_qToFloat(data2, rotationVector_Q1);;
 8001cbe:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001cc2:	4b44      	ldr	r3, [pc, #272]	; (8001dd4 <IMU_parseInputReport+0x2b0>)
 8001cc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4610      	mov	r0, r2
 8001cce:	f000 f957 	bl	8001f80 <IMU_qToFloat>
 8001cd2:	eef0 7a40 	vmov.f32	s15, s0
 8001cd6:	4b3e      	ldr	r3, [pc, #248]	; (8001dd0 <IMU_parseInputReport+0x2ac>)
 8001cd8:	edc3 7a01 	vstr	s15, [r3, #4]
		rotSample.quatK =  IMU_qToFloat(data3, rotationVector_Q1);;
 8001cdc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001ce0:	4b3c      	ldr	r3, [pc, #240]	; (8001dd4 <IMU_parseInputReport+0x2b0>)
 8001ce2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4610      	mov	r0, r2
 8001cec:	f000 f948 	bl	8001f80 <IMU_qToFloat>
 8001cf0:	eef0 7a40 	vmov.f32	s15, s0
 8001cf4:	4b36      	ldr	r3, [pc, #216]	; (8001dd0 <IMU_parseInputReport+0x2ac>)
 8001cf6:	edc3 7a02 	vstr	s15, [r3, #8]
		rotSample.quatReal = IMU_qToFloat(data4, rotationVector_Q1);
 8001cfa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001cfe:	4b35      	ldr	r3, [pc, #212]	; (8001dd4 <IMU_parseInputReport+0x2b0>)
 8001d00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	4619      	mov	r1, r3
 8001d08:	4610      	mov	r0, r2
 8001d0a:	f000 f939 	bl	8001f80 <IMU_qToFloat>
 8001d0e:	eef0 7a40 	vmov.f32	s15, s0
 8001d12:	4b2f      	ldr	r3, [pc, #188]	; (8001dd0 <IMU_parseInputReport+0x2ac>)
 8001d14:	edc3 7a03 	vstr	s15, [r3, #12]
		rotSample.quatRadianAccuracy = IMU_qToFloat(data5, 12);
 8001d18:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001d1c:	210c      	movs	r1, #12
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f000 f92e 	bl	8001f80 <IMU_qToFloat>
 8001d24:	eef0 7a40 	vmov.f32	s15, s0
 8001d28:	4b29      	ldr	r3, [pc, #164]	; (8001dd0 <IMU_parseInputReport+0x2ac>)
 8001d2a:	edc3 7a04 	vstr	s15, [r3, #16]
		osMessageQueuePut(rotationSampleQueueHandle, &rotSample, 0U, 0);
 8001d2e:	4b2a      	ldr	r3, [pc, #168]	; (8001dd8 <IMU_parseInputReport+0x2b4>)
 8001d30:	6818      	ldr	r0, [r3, #0]
 8001d32:	2300      	movs	r3, #0
 8001d34:	2200      	movs	r2, #0
 8001d36:	4926      	ldr	r1, [pc, #152]	; (8001dd0 <IMU_parseInputReport+0x2ac>)
 8001d38:	f00d f81c 	bl	800ed74 <osMessageQueuePut>
		quatAccuracy = status;
 8001d3c:	7bfb      	ldrb	r3, [r7, #15]
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	4b26      	ldr	r3, [pc, #152]	; (8001ddc <IMU_parseInputReport+0x2b8>)
 8001d42:	801a      	strh	r2, [r3, #0]
		rawQuatI = data1;
 8001d44:	4a26      	ldr	r2, [pc, #152]	; (8001de0 <IMU_parseInputReport+0x2bc>)
 8001d46:	89bb      	ldrh	r3, [r7, #12]
 8001d48:	8013      	strh	r3, [r2, #0]
		rawQuatJ = data2;
 8001d4a:	4a26      	ldr	r2, [pc, #152]	; (8001de4 <IMU_parseInputReport+0x2c0>)
 8001d4c:	897b      	ldrh	r3, [r7, #10]
 8001d4e:	8013      	strh	r3, [r2, #0]
		rawQuatK = data3;
 8001d50:	4a25      	ldr	r2, [pc, #148]	; (8001de8 <IMU_parseInputReport+0x2c4>)
 8001d52:	893b      	ldrh	r3, [r7, #8]
 8001d54:	8013      	strh	r3, [r2, #0]
		rawQuatReal = data4;
 8001d56:	4a25      	ldr	r2, [pc, #148]	; (8001dec <IMU_parseInputReport+0x2c8>)
 8001d58:	8afb      	ldrh	r3, [r7, #22]
 8001d5a:	8013      	strh	r3, [r2, #0]
		rawQuatRadianAccuracy = data5; //Only available on rotation vector, not game rot vector
 8001d5c:	4a24      	ldr	r2, [pc, #144]	; (8001df0 <IMU_parseInputReport+0x2cc>)
 8001d5e:	8abb      	ldrh	r3, [r7, #20]
 8001d60:	8013      	strh	r3, [r2, #0]
}
 8001d62:	e0c5      	b.n	8001ef0 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_STEP_COUNTER)
 8001d64:	4b08      	ldr	r3, [pc, #32]	; (8001d88 <IMU_parseInputReport+0x264>)
 8001d66:	795b      	ldrb	r3, [r3, #5]
 8001d68:	2b11      	cmp	r3, #17
 8001d6a:	d147      	bne.n	8001dfc <IMU_parseInputReport+0x2d8>
		stepSample.tick_ms = HAL_GetTick();
 8001d6c:	f004 fd1c 	bl	80067a8 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	4b20      	ldr	r3, [pc, #128]	; (8001df4 <IMU_parseInputReport+0x2d0>)
 8001d74:	605a      	str	r2, [r3, #4]
		stepSample.stepCount = data3;
 8001d76:	4a1f      	ldr	r2, [pc, #124]	; (8001df4 <IMU_parseInputReport+0x2d0>)
 8001d78:	893b      	ldrh	r3, [r7, #8]
 8001d7a:	8013      	strh	r3, [r2, #0]
		stepCount = data3; //Bytes 8/9
 8001d7c:	4a1e      	ldr	r2, [pc, #120]	; (8001df8 <IMU_parseInputReport+0x2d4>)
 8001d7e:	893b      	ldrh	r3, [r7, #8]
 8001d80:	8013      	strh	r3, [r2, #0]
}
 8001d82:	e0b5      	b.n	8001ef0 <IMU_parseInputReport+0x3cc>
 8001d84:	20027d50 	.word	0x20027d50
 8001d88:	20027de0 	.word	0x20027de0
 8001d8c:	20027d6c 	.word	0x20027d6c
 8001d90:	20027ea8 	.word	0x20027ea8
 8001d94:	20027e90 	.word	0x20027e90
 8001d98:	20027eac 	.word	0x20027eac
 8001d9c:	20027da8 	.word	0x20027da8
 8001da0:	20027da4 	.word	0x20027da4
 8001da4:	20027d76 	.word	0x20027d76
 8001da8:	20027e94 	.word	0x20027e94
 8001dac:	20027dd2 	.word	0x20027dd2
 8001db0:	20027dd4 	.word	0x20027dd4
 8001db4:	20027dd6 	.word	0x20027dd6
 8001db8:	20027d9e 	.word	0x20027d9e
 8001dbc:	20027d9c 	.word	0x20027d9c
 8001dc0:	20027d54 	.word	0x20027d54
 8001dc4:	20027da0 	.word	0x20027da0
 8001dc8:	20027e96 	.word	0x20027e96
 8001dcc:	20027da6 	.word	0x20027da6
 8001dd0:	20027db8 	.word	0x20027db8
 8001dd4:	20000004 	.word	0x20000004
 8001dd8:	200278cc 	.word	0x200278cc
 8001ddc:	20027d72 	.word	0x20027d72
 8001de0:	20027eaa 	.word	0x20027eaa
 8001de4:	20027dd0 	.word	0x20027dd0
 8001de8:	20027d4c 	.word	0x20027d4c
 8001dec:	20027d68 	.word	0x20027d68
 8001df0:	20027daa 	.word	0x20027daa
 8001df4:	20027d58 	.word	0x20027d58
 8001df8:	20027eae 	.word	0x20027eae
	else if (shtpData[5] == SENSOR_REPORTID_STABILITY_CLASSIFIER)
 8001dfc:	4b3e      	ldr	r3, [pc, #248]	; (8001ef8 <IMU_parseInputReport+0x3d4>)
 8001dfe:	795b      	ldrb	r3, [r3, #5]
 8001e00:	2b13      	cmp	r3, #19
 8001e02:	d10d      	bne.n	8001e20 <IMU_parseInputReport+0x2fc>
		stabilitySample.tick_ms = HAL_GetTick();
 8001e04:	f004 fcd0 	bl	80067a8 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	4b3c      	ldr	r3, [pc, #240]	; (8001efc <IMU_parseInputReport+0x3d8>)
 8001e0c:	605a      	str	r2, [r3, #4]
		stabilitySample.stabilityClass = shtpData[5 + 4];
 8001e0e:	4b3a      	ldr	r3, [pc, #232]	; (8001ef8 <IMU_parseInputReport+0x3d4>)
 8001e10:	7a5a      	ldrb	r2, [r3, #9]
 8001e12:	4b3a      	ldr	r3, [pc, #232]	; (8001efc <IMU_parseInputReport+0x3d8>)
 8001e14:	701a      	strb	r2, [r3, #0]
		stabilityClassifier = shtpData[5 + 4]; //Byte 4 only
 8001e16:	4b38      	ldr	r3, [pc, #224]	; (8001ef8 <IMU_parseInputReport+0x3d4>)
 8001e18:	7a5a      	ldrb	r2, [r3, #9]
 8001e1a:	4b39      	ldr	r3, [pc, #228]	; (8001f00 <IMU_parseInputReport+0x3dc>)
 8001e1c:	701a      	strb	r2, [r3, #0]
}
 8001e1e:	e067      	b.n	8001ef0 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_PERSONAL_ACTIVITY_CLASSIFIER)
 8001e20:	4b35      	ldr	r3, [pc, #212]	; (8001ef8 <IMU_parseInputReport+0x3d4>)
 8001e22:	795b      	ldrb	r3, [r3, #5]
 8001e24:	2b1e      	cmp	r3, #30
 8001e26:	d12b      	bne.n	8001e80 <IMU_parseInputReport+0x35c>
		activitySample.tick_ms = HAL_GetTick();
 8001e28:	f004 fcbe 	bl	80067a8 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	4b35      	ldr	r3, [pc, #212]	; (8001f04 <IMU_parseInputReport+0x3e0>)
 8001e30:	60da      	str	r2, [r3, #12]
		for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 8001e32:	2300      	movs	r3, #0
 8001e34:	74fb      	strb	r3, [r7, #19]
 8001e36:	e00c      	b.n	8001e52 <IMU_parseInputReport+0x32e>
			_activityConfidences[x] = shtpData[5 + 6 + x]; //5 bytes of timestamp, byte 6 is first confidence byte
 8001e38:	7cfb      	ldrb	r3, [r7, #19]
 8001e3a:	f103 020b 	add.w	r2, r3, #11
 8001e3e:	4b32      	ldr	r3, [pc, #200]	; (8001f08 <IMU_parseInputReport+0x3e4>)
 8001e40:	6819      	ldr	r1, [r3, #0]
 8001e42:	7cfb      	ldrb	r3, [r7, #19]
 8001e44:	440b      	add	r3, r1
 8001e46:	492c      	ldr	r1, [pc, #176]	; (8001ef8 <IMU_parseInputReport+0x3d4>)
 8001e48:	5c8a      	ldrb	r2, [r1, r2]
 8001e4a:	701a      	strb	r2, [r3, #0]
		for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 8001e4c:	7cfb      	ldrb	r3, [r7, #19]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	74fb      	strb	r3, [r7, #19]
 8001e52:	7cfb      	ldrb	r3, [r7, #19]
 8001e54:	2b08      	cmp	r3, #8
 8001e56:	d9ef      	bls.n	8001e38 <IMU_parseInputReport+0x314>
		activityClassifier = shtpData[5 + 5]; //Most likely state
 8001e58:	4b27      	ldr	r3, [pc, #156]	; (8001ef8 <IMU_parseInputReport+0x3d4>)
 8001e5a:	7a9a      	ldrb	r2, [r3, #10]
 8001e5c:	4b2b      	ldr	r3, [pc, #172]	; (8001f0c <IMU_parseInputReport+0x3e8>)
 8001e5e:	701a      	strb	r2, [r3, #0]
		memcpy(activitySample.activityConfidence, _activityConfidences, 9);
 8001e60:	4b29      	ldr	r3, [pc, #164]	; (8001f08 <IMU_parseInputReport+0x3e4>)
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	4b27      	ldr	r3, [pc, #156]	; (8001f04 <IMU_parseInputReport+0x3e0>)
 8001e66:	6810      	ldr	r0, [r2, #0]
 8001e68:	6851      	ldr	r1, [r2, #4]
 8001e6a:	c303      	stmia	r3!, {r0, r1}
 8001e6c:	7a12      	ldrb	r2, [r2, #8]
 8001e6e:	701a      	strb	r2, [r3, #0]
		osMessageQueuePut(activitySampleQueueHandle, &activitySample, 0U, 0);
 8001e70:	4b27      	ldr	r3, [pc, #156]	; (8001f10 <IMU_parseInputReport+0x3ec>)
 8001e72:	6818      	ldr	r0, [r3, #0]
 8001e74:	2300      	movs	r3, #0
 8001e76:	2200      	movs	r2, #0
 8001e78:	4922      	ldr	r1, [pc, #136]	; (8001f04 <IMU_parseInputReport+0x3e0>)
 8001e7a:	f00c ff7b 	bl	800ed74 <osMessageQueuePut>
}
 8001e7e:	e037      	b.n	8001ef0 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_RAW_ACCELEROMETER)
 8001e80:	4b1d      	ldr	r3, [pc, #116]	; (8001ef8 <IMU_parseInputReport+0x3d4>)
 8001e82:	795b      	ldrb	r3, [r3, #5]
 8001e84:	2b14      	cmp	r3, #20
 8001e86:	d109      	bne.n	8001e9c <IMU_parseInputReport+0x378>
		memsRawAccelX = data1;
 8001e88:	4a22      	ldr	r2, [pc, #136]	; (8001f14 <IMU_parseInputReport+0x3f0>)
 8001e8a:	89bb      	ldrh	r3, [r7, #12]
 8001e8c:	8013      	strh	r3, [r2, #0]
		memsRawAccelY = data2;
 8001e8e:	4a22      	ldr	r2, [pc, #136]	; (8001f18 <IMU_parseInputReport+0x3f4>)
 8001e90:	897b      	ldrh	r3, [r7, #10]
 8001e92:	8013      	strh	r3, [r2, #0]
		memsRawAccelZ = data3;
 8001e94:	4a21      	ldr	r2, [pc, #132]	; (8001f1c <IMU_parseInputReport+0x3f8>)
 8001e96:	893b      	ldrh	r3, [r7, #8]
 8001e98:	8013      	strh	r3, [r2, #0]
}
 8001e9a:	e029      	b.n	8001ef0 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_RAW_GYROSCOPE)
 8001e9c:	4b16      	ldr	r3, [pc, #88]	; (8001ef8 <IMU_parseInputReport+0x3d4>)
 8001e9e:	795b      	ldrb	r3, [r3, #5]
 8001ea0:	2b15      	cmp	r3, #21
 8001ea2:	d109      	bne.n	8001eb8 <IMU_parseInputReport+0x394>
		memsRawGyroX = data1;
 8001ea4:	4a1e      	ldr	r2, [pc, #120]	; (8001f20 <IMU_parseInputReport+0x3fc>)
 8001ea6:	89bb      	ldrh	r3, [r7, #12]
 8001ea8:	8013      	strh	r3, [r2, #0]
		memsRawGyroY = data2;
 8001eaa:	4a1e      	ldr	r2, [pc, #120]	; (8001f24 <IMU_parseInputReport+0x400>)
 8001eac:	897b      	ldrh	r3, [r7, #10]
 8001eae:	8013      	strh	r3, [r2, #0]
		memsRawGyroZ = data3;
 8001eb0:	4a1d      	ldr	r2, [pc, #116]	; (8001f28 <IMU_parseInputReport+0x404>)
 8001eb2:	893b      	ldrh	r3, [r7, #8]
 8001eb4:	8013      	strh	r3, [r2, #0]
}
 8001eb6:	e01b      	b.n	8001ef0 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_RAW_MAGNETOMETER)
 8001eb8:	4b0f      	ldr	r3, [pc, #60]	; (8001ef8 <IMU_parseInputReport+0x3d4>)
 8001eba:	795b      	ldrb	r3, [r3, #5]
 8001ebc:	2b16      	cmp	r3, #22
 8001ebe:	d109      	bne.n	8001ed4 <IMU_parseInputReport+0x3b0>
		memsRawMagX = data1;
 8001ec0:	4a1a      	ldr	r2, [pc, #104]	; (8001f2c <IMU_parseInputReport+0x408>)
 8001ec2:	89bb      	ldrh	r3, [r7, #12]
 8001ec4:	8013      	strh	r3, [r2, #0]
		memsRawMagY = data2;
 8001ec6:	4a1a      	ldr	r2, [pc, #104]	; (8001f30 <IMU_parseInputReport+0x40c>)
 8001ec8:	897b      	ldrh	r3, [r7, #10]
 8001eca:	8013      	strh	r3, [r2, #0]
		memsRawMagZ = data3;
 8001ecc:	4a19      	ldr	r2, [pc, #100]	; (8001f34 <IMU_parseInputReport+0x410>)
 8001ece:	893b      	ldrh	r3, [r7, #8]
 8001ed0:	8013      	strh	r3, [r2, #0]
}
 8001ed2:	e00d      	b.n	8001ef0 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SHTP_REPORT_COMMAND_RESPONSE)
 8001ed4:	4b08      	ldr	r3, [pc, #32]	; (8001ef8 <IMU_parseInputReport+0x3d4>)
 8001ed6:	795b      	ldrb	r3, [r3, #5]
 8001ed8:	2bf1      	cmp	r3, #241	; 0xf1
 8001eda:	d109      	bne.n	8001ef0 <IMU_parseInputReport+0x3cc>
		uint8_t command = shtpData[5 + 2]; //This is the Command byte of the response
 8001edc:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <IMU_parseInputReport+0x3d4>)
 8001ede:	79db      	ldrb	r3, [r3, #7]
 8001ee0:	71fb      	strb	r3, [r7, #7]
		if (command == COMMAND_ME_CALIBRATE)
 8001ee2:	79fb      	ldrb	r3, [r7, #7]
 8001ee4:	2b07      	cmp	r3, #7
 8001ee6:	d103      	bne.n	8001ef0 <IMU_parseInputReport+0x3cc>
			calibrationStatus = shtpData[5 + 5]; //R0 - Status (0 = success, non-zero = fail)
 8001ee8:	4b03      	ldr	r3, [pc, #12]	; (8001ef8 <IMU_parseInputReport+0x3d4>)
 8001eea:	7a9a      	ldrb	r2, [r3, #10]
 8001eec:	4b12      	ldr	r3, [pc, #72]	; (8001f38 <IMU_parseInputReport+0x414>)
 8001eee:	701a      	strb	r2, [r3, #0]
}
 8001ef0:	bf00      	nop
 8001ef2:	3718      	adds	r7, #24
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	20027de0 	.word	0x20027de0
 8001efc:	20027d60 	.word	0x20027d60
 8001f00:	20027dda 	.word	0x20027dda
 8001f04:	20027e98 	.word	0x20027e98
 8001f08:	20027db4 	.word	0x20027db4
 8001f0c:	20027e92 	.word	0x20027e92
 8001f10:	200278ac 	.word	0x200278ac
 8001f14:	20027dd8 	.word	0x20027dd8
 8001f18:	20027db2 	.word	0x20027db2
 8001f1c:	20027e62 	.word	0x20027e62
 8001f20:	20027d56 	.word	0x20027d56
 8001f24:	20027ddc 	.word	0x20027ddc
 8001f28:	20027dac 	.word	0x20027dac
 8001f2c:	20027db0 	.word	0x20027db0
 8001f30:	20027dae 	.word	0x20027dae
 8001f34:	20027d74 	.word	0x20027d74
 8001f38:	20027e93 	.word	0x20027e93

08001f3c <IMU_softReset>:
//Send command to reset IC
//Read all advertisement packets from sensor
//The sensor has been seen to reset twice if we attempt too much too quickly.
//This seems to work reliably.
void IMU_softReset(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
	shtpData[0] = 1; //Reset
 8001f40:	4b0d      	ldr	r3, [pc, #52]	; (8001f78 <IMU_softReset+0x3c>)
 8001f42:	2201      	movs	r2, #1
 8001f44:	701a      	strb	r2, [r3, #0]

	//Attempt to start communication with sensor
	IMU_sendPacket(CHANNEL_EXECUTABLE, 1); //Transmit packet on channel 1, 1 byte
 8001f46:	2301      	movs	r3, #1
 8001f48:	2101      	movs	r1, #1
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f000 f990 	bl	8002270 <IMU_sendPacket>

	//Read all incoming data and flush it
	HAL_Delay(200);
 8001f50:	20c8      	movs	r0, #200	; 0xc8
 8001f52:	f004 fc41 	bl	80067d8 <HAL_Delay>
	while (IMU_receivePacket() == true)
 8001f56:	bf00      	nop
 8001f58:	f000 f8e2 	bl	8002120 <IMU_receivePacket>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1fa      	bne.n	8001f58 <IMU_softReset+0x1c>
		;
	HAL_Delay(200);
 8001f62:	20c8      	movs	r0, #200	; 0xc8
 8001f64:	f004 fc38 	bl	80067d8 <HAL_Delay>
	while (IMU_receivePacket() == true)
 8001f68:	bf00      	nop
 8001f6a:	f000 f8d9 	bl	8002120 <IMU_receivePacket>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d1fa      	bne.n	8001f6a <IMU_softReset+0x2e>
		;
}
 8001f74:	bf00      	nop
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	20027de0 	.word	0x20027de0
 8001f7c:	00000000 	.word	0x00000000

08001f80 <IMU_qToFloat>:
}

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float IMU_qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
 8001f80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	4603      	mov	r3, r0
 8001f88:	460a      	mov	r2, r1
 8001f8a:	80fb      	strh	r3, [r7, #6]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	717b      	strb	r3, [r7, #5]
	float qFloat = fixedPointValue;
 8001f90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f94:	ee07 3a90 	vmov	s15, r3
 8001f98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f9c:	edc7 7a03 	vstr	s15, [r7, #12]
	qFloat *= pow(2, qPoint * -1);
 8001fa0:	797b      	ldrb	r3, [r7, #5]
 8001fa2:	425b      	negs	r3, r3
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7fe fa47 	bl	8000438 <__aeabi_i2d>
 8001faa:	4603      	mov	r3, r0
 8001fac:	460c      	mov	r4, r1
 8001fae:	ec44 3b11 	vmov	d1, r3, r4
 8001fb2:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8001ff8 <IMU_qToFloat+0x78>
 8001fb6:	f013 ffdd 	bl	8015f74 <pow>
 8001fba:	ec56 5b10 	vmov	r5, r6, d0
 8001fbe:	68f8      	ldr	r0, [r7, #12]
 8001fc0:	f7fe fa4c 	bl	800045c <__aeabi_f2d>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	460c      	mov	r4, r1
 8001fc8:	461a      	mov	r2, r3
 8001fca:	4623      	mov	r3, r4
 8001fcc:	4628      	mov	r0, r5
 8001fce:	4631      	mov	r1, r6
 8001fd0:	f7fe fa9c 	bl	800050c <__aeabi_dmul>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	460c      	mov	r4, r1
 8001fd8:	4618      	mov	r0, r3
 8001fda:	4621      	mov	r1, r4
 8001fdc:	f7fe fd46 	bl	8000a6c <__aeabi_d2f>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	60fb      	str	r3, [r7, #12]
	return (qFloat);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	ee07 3a90 	vmov	s15, r3
}
 8001fea:	eeb0 0a67 	vmov.f32	s0, s15
 8001fee:	3714      	adds	r7, #20
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ff4:	f3af 8000 	nop.w
 8001ff8:	00000000 	.word	0x00000000
 8001ffc:	40000000 	.word	0x40000000

08002000 <IMU_enableRotationVector>:

//Sends the packet to enable the rotation vector
void IMU_enableRotationVector(uint16_t timeBetweenReports)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	4603      	mov	r3, r0
 8002008:	80fb      	strh	r3, [r7, #6]
	IMU_setFeatureCommand_2(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports);
 800200a:	88fb      	ldrh	r3, [r7, #6]
 800200c:	4619      	mov	r1, r3
 800200e:	2005      	movs	r0, #5
 8002010:	f000 f81a 	bl	8002048 <IMU_setFeatureCommand_2>
}
 8002014:	bf00      	nop
 8002016:	3708      	adds	r7, #8
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <IMU_enableActivityClassifier>:
	IMU_setFeatureCommand_2(SENSOR_REPORTID_RAW_MAGNETOMETER, timeBetweenReports);
}

//Sends the packet to enable the various activity classifiers
void IMU_enableActivityClassifier(uint16_t timeBetweenReports, uint32_t activitiesToEnable, uint8_t *activityConfidences)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	4603      	mov	r3, r0
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	607a      	str	r2, [r7, #4]
 8002028:	81fb      	strh	r3, [r7, #14]
	_activityConfidences = activityConfidences; //Store pointer to array
 800202a:	4a06      	ldr	r2, [pc, #24]	; (8002044 <IMU_enableActivityClassifier+0x28>)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6013      	str	r3, [r2, #0]

	IMU_setFeatureCommand_3(SENSOR_REPORTID_PERSONAL_ACTIVITY_CLASSIFIER, timeBetweenReports, activitiesToEnable);
 8002030:	89fb      	ldrh	r3, [r7, #14]
 8002032:	68ba      	ldr	r2, [r7, #8]
 8002034:	4619      	mov	r1, r3
 8002036:	201e      	movs	r0, #30
 8002038:	f000 f818 	bl	800206c <IMU_setFeatureCommand_3>
}
 800203c:	bf00      	nop
 800203e:	3710      	adds	r7, #16
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	20027db4 	.word	0x20027db4

08002048 <IMU_setFeatureCommand_2>:
	return (false);
}

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
void IMU_setFeatureCommand_2(uint8_t reportID, uint16_t timeBetweenReports)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	460a      	mov	r2, r1
 8002052:	71fb      	strb	r3, [r7, #7]
 8002054:	4613      	mov	r3, r2
 8002056:	80bb      	strh	r3, [r7, #4]
	IMU_setFeatureCommand_3(reportID, timeBetweenReports, 0); //No specific config
 8002058:	88b9      	ldrh	r1, [r7, #4]
 800205a:	79fb      	ldrb	r3, [r7, #7]
 800205c:	2200      	movs	r2, #0
 800205e:	4618      	mov	r0, r3
 8002060:	f000 f804 	bl	800206c <IMU_setFeatureCommand_3>
}
 8002064:	bf00      	nop
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <IMU_setFeatureCommand_3>:

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void IMU_setFeatureCommand_3(uint8_t reportID, uint16_t timeBetweenReports, uint32_t specificConfig)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	4603      	mov	r3, r0
 8002074:	603a      	str	r2, [r7, #0]
 8002076:	71fb      	strb	r3, [r7, #7]
 8002078:	460b      	mov	r3, r1
 800207a:	80bb      	strh	r3, [r7, #4]
	long microsBetweenReports = (long)timeBetweenReports * 1000L;
 800207c:	88bb      	ldrh	r3, [r7, #4]
 800207e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002082:	fb02 f303 	mul.w	r3, r2, r3
 8002086:	60fb      	str	r3, [r7, #12]

	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 8002088:	4b24      	ldr	r3, [pc, #144]	; (800211c <IMU_setFeatureCommand_3+0xb0>)
 800208a:	22fd      	movs	r2, #253	; 0xfd
 800208c:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;							   //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 800208e:	4a23      	ldr	r2, [pc, #140]	; (800211c <IMU_setFeatureCommand_3+0xb0>)
 8002090:	79fb      	ldrb	r3, [r7, #7]
 8002092:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;								   //Feature flags
 8002094:	4b21      	ldr	r3, [pc, #132]	; (800211c <IMU_setFeatureCommand_3+0xb0>)
 8002096:	2200      	movs	r2, #0
 8002098:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;								   //Change sensitivity (LSB)
 800209a:	4b20      	ldr	r3, [pc, #128]	; (800211c <IMU_setFeatureCommand_3+0xb0>)
 800209c:	2200      	movs	r2, #0
 800209e:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;								   //Change sensitivity (MSB)
 80020a0:	4b1e      	ldr	r3, [pc, #120]	; (800211c <IMU_setFeatureCommand_3+0xb0>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	b2da      	uxtb	r2, r3
 80020aa:	4b1c      	ldr	r3, [pc, #112]	; (800211c <IMU_setFeatureCommand_3+0xb0>)
 80020ac:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	121b      	asrs	r3, r3, #8
 80020b2:	b2da      	uxtb	r2, r3
 80020b4:	4b19      	ldr	r3, [pc, #100]	; (800211c <IMU_setFeatureCommand_3+0xb0>)
 80020b6:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	141b      	asrs	r3, r3, #16
 80020bc:	b2da      	uxtb	r2, r3
 80020be:	4b17      	ldr	r3, [pc, #92]	; (800211c <IMU_setFeatureCommand_3+0xb0>)
 80020c0:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	0e1b      	lsrs	r3, r3, #24
 80020c6:	b2da      	uxtb	r2, r3
 80020c8:	4b14      	ldr	r3, [pc, #80]	; (800211c <IMU_setFeatureCommand_3+0xb0>)
 80020ca:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;								   //Batch Interval (LSB)
 80020cc:	4b13      	ldr	r3, [pc, #76]	; (800211c <IMU_setFeatureCommand_3+0xb0>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;								   //Batch Interval
 80020d2:	4b12      	ldr	r3, [pc, #72]	; (800211c <IMU_setFeatureCommand_3+0xb0>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;								   //Batch Interval
 80020d8:	4b10      	ldr	r3, [pc, #64]	; (800211c <IMU_setFeatureCommand_3+0xb0>)
 80020da:	2200      	movs	r2, #0
 80020dc:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;								   //Batch Interval (MSB)
 80020de:	4b0f      	ldr	r3, [pc, #60]	; (800211c <IMU_setFeatureCommand_3+0xb0>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   //Sensor-specific config (LSB)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	b2da      	uxtb	r2, r3
 80020e8:	4b0c      	ldr	r3, [pc, #48]	; (800211c <IMU_setFeatureCommand_3+0xb0>)
 80020ea:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   //Sensor-specific config
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	0a1b      	lsrs	r3, r3, #8
 80020f0:	b2da      	uxtb	r2, r3
 80020f2:	4b0a      	ldr	r3, [pc, #40]	; (800211c <IMU_setFeatureCommand_3+0xb0>)
 80020f4:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	  //Sensor-specific config
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	0c1b      	lsrs	r3, r3, #16
 80020fa:	b2da      	uxtb	r2, r3
 80020fc:	4b07      	ldr	r3, [pc, #28]	; (800211c <IMU_setFeatureCommand_3+0xb0>)
 80020fe:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	  //Sensor-specific config (MSB)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	0e1b      	lsrs	r3, r3, #24
 8002104:	b2da      	uxtb	r2, r3
 8002106:	4b05      	ldr	r3, [pc, #20]	; (800211c <IMU_setFeatureCommand_3+0xb0>)
 8002108:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	IMU_sendPacket(CHANNEL_CONTROL, 17);
 800210a:	2302      	movs	r3, #2
 800210c:	2111      	movs	r1, #17
 800210e:	4618      	mov	r0, r3
 8002110:	f000 f8ae 	bl	8002270 <IMU_sendPacket>
}
 8002114:	bf00      	nop
 8002116:	3710      	adds	r7, #16
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	20027de0 	.word	0x20027de0

08002120 <IMU_receivePacket>:
//}

//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
bool IMU_receivePacket(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af02      	add	r7, sp, #8
	if( HAL_GPIO_ReadPin(_intPort, _int) == GPIO_PIN_SET)
 8002126:	4b22      	ldr	r3, [pc, #136]	; (80021b0 <IMU_receivePacket+0x90>)
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	4b22      	ldr	r3, [pc, #136]	; (80021b4 <IMU_receivePacket+0x94>)
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	b29b      	uxth	r3, r3
 8002130:	4619      	mov	r1, r3
 8002132:	4610      	mov	r0, r2
 8002134:	f006 fd62 	bl	8008bfc <HAL_GPIO_ReadPin>
 8002138:	4603      	mov	r3, r0
 800213a:	2b01      	cmp	r3, #1
 800213c:	d101      	bne.n	8002142 <IMU_receivePacket+0x22>
		return (false);
 800213e:	2300      	movs	r3, #0
 8002140:	e031      	b.n	80021a6 <IMU_receivePacket+0x86>

	//Ask for four bytes to find out how much data we need to read
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8002142:	4b1d      	ldr	r3, [pc, #116]	; (80021b8 <IMU_receivePacket+0x98>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f04f 31ff 	mov.w	r1, #4294967295
 800214a:	4618      	mov	r0, r3
 800214c:	f00c fcce 	bl	800eaec <osSemaphoreAcquire>
//	taskENTER_CRITICAL();
	HAL_I2C_Master_Receive(&hi2c1, _deviceAddress, shtpHeader, (uint8_t) 4, 100);
 8002150:	4b1a      	ldr	r3, [pc, #104]	; (80021bc <IMU_receivePacket+0x9c>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	b299      	uxth	r1, r3
 8002156:	2364      	movs	r3, #100	; 0x64
 8002158:	9300      	str	r3, [sp, #0]
 800215a:	2304      	movs	r3, #4
 800215c:	4a18      	ldr	r2, [pc, #96]	; (80021c0 <IMU_receivePacket+0xa0>)
 800215e:	4819      	ldr	r0, [pc, #100]	; (80021c4 <IMU_receivePacket+0xa4>)
 8002160:	f006 ff00 	bl	8008f64 <HAL_I2C_Master_Receive>
//		osSemaphoreRelease(messageI2C_LockSem);
//		osDelay(100);
//		osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
//	}
//	taskEXIT_CRITICAL();
	osSemaphoreRelease(messageI2C_LockHandle);
 8002164:	4b14      	ldr	r3, [pc, #80]	; (80021b8 <IMU_receivePacket+0x98>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4618      	mov	r0, r3
 800216a:	f00c fd25 	bl	800ebb8 <osSemaphoreRelease>

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ( ((uint16_t)shtpHeader[PACKET_MSB] << 8) | shtpHeader[PACKET_LSB]);
 800216e:	4b14      	ldr	r3, [pc, #80]	; (80021c0 <IMU_receivePacket+0xa0>)
 8002170:	785b      	ldrb	r3, [r3, #1]
 8002172:	021b      	lsls	r3, r3, #8
 8002174:	b21a      	sxth	r2, r3
 8002176:	4b12      	ldr	r3, [pc, #72]	; (80021c0 <IMU_receivePacket+0xa0>)
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	b21b      	sxth	r3, r3
 800217c:	4313      	orrs	r3, r2
 800217e:	80fb      	strh	r3, [r7, #6]
	dataLength &= ~(1 << 15); //Clear the MSbit.
 8002180:	88fb      	ldrh	r3, [r7, #6]
 8002182:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002186:	80fb      	strh	r3, [r7, #6]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 8002188:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d101      	bne.n	8002194 <IMU_receivePacket+0x74>
	{
		//Packet is empty
		return (false); //All done
 8002190:	2300      	movs	r3, #0
 8002192:	e008      	b.n	80021a6 <IMU_receivePacket+0x86>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 8002194:	88fb      	ldrh	r3, [r7, #6]
 8002196:	3b04      	subs	r3, #4
 8002198:	b29b      	uxth	r3, r3
 800219a:	80fb      	strh	r3, [r7, #6]

	IMU_getData(dataLength);
 800219c:	88fb      	ldrh	r3, [r7, #6]
 800219e:	4618      	mov	r0, r3
 80021a0:	f000 f812 	bl	80021c8 <IMU_getData>


	return (true); //We're done!
 80021a4:	2301      	movs	r3, #1
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	20027e68 	.word	0x20027e68
 80021b4:	20027da2 	.word	0x20027da2
 80021b8:	200278b4 	.word	0x200278b4
 80021bc:	20000006 	.word	0x20000006
 80021c0:	20027d50 	.word	0x20027d50
 80021c4:	20027eb0 	.word	0x20027eb0

080021c8 <IMU_getData>:

//Sends multiple requests to sensor until all data bytes are received from sensor
//The shtpData buffer has max capacity of MAX_PACKET_SIZE. Any bytes over this amount will be lost.
//Arduino I2C read limit is 32 bytes. Header is 4 bytes, so max data we can read per interation is 28 bytes
bool IMU_getData(uint16_t bytesRemaining)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af02      	add	r7, sp, #8
 80021ce:	4603      	mov	r3, r0
 80021d0:	80fb      	strh	r3, [r7, #6]
	uint16_t dataSpot = 0; //Start at the beginning of shtpData array
 80021d2:	2300      	movs	r3, #0
 80021d4:	81fb      	strh	r3, [r7, #14]
//	uint8_t receiveBuffer[28] = {0};
//	uint8_t receivePacket[I2C_BUFFER_LENGTH - 4] = {0};


	//Setup a series of chunked 32 byte reads
	while (bytesRemaining > 0)
 80021d6:	e036      	b.n	8002246 <IMU_getData+0x7e>
	{
		uint16_t numberOfBytesToRead = bytesRemaining;
 80021d8:	88fb      	ldrh	r3, [r7, #6]
 80021da:	81bb      	strh	r3, [r7, #12]
		if (numberOfBytesToRead > (I2C_BUFFER_LENGTH - 4))
 80021dc:	89bb      	ldrh	r3, [r7, #12]
 80021de:	2b1c      	cmp	r3, #28
 80021e0:	d901      	bls.n	80021e6 <IMU_getData+0x1e>
			numberOfBytesToRead = (I2C_BUFFER_LENGTH - 4);
 80021e2:	231c      	movs	r3, #28
 80021e4:	81bb      	strh	r3, [r7, #12]

		osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 80021e6:	4b1c      	ldr	r3, [pc, #112]	; (8002258 <IMU_getData+0x90>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f04f 31ff 	mov.w	r1, #4294967295
 80021ee:	4618      	mov	r0, r3
 80021f0:	f00c fc7c 	bl	800eaec <osSemaphoreAcquire>
//		taskENTER_CRITICAL();
		HAL_I2C_Master_Receive(&hi2c1, _deviceAddress, receiveBuffer, (uint8_t)(numberOfBytesToRead + 4), 100);
 80021f4:	4b19      	ldr	r3, [pc, #100]	; (800225c <IMU_getData+0x94>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	b299      	uxth	r1, r3
 80021fa:	89bb      	ldrh	r3, [r7, #12]
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	3304      	adds	r3, #4
 8002200:	b2db      	uxtb	r3, r3
 8002202:	b29a      	uxth	r2, r3
 8002204:	2364      	movs	r3, #100	; 0x64
 8002206:	9300      	str	r3, [sp, #0]
 8002208:	4613      	mov	r3, r2
 800220a:	4a15      	ldr	r2, [pc, #84]	; (8002260 <IMU_getData+0x98>)
 800220c:	4815      	ldr	r0, [pc, #84]	; (8002264 <IMU_getData+0x9c>)
 800220e:	f006 fea9 	bl	8008f64 <HAL_I2C_Master_Receive>
//			osSemaphoreRelease(messageI2C_LockSem);
//			osDelay(100);
//			osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
//		}
//		taskEXIT_CRITICAL();
		osSemaphoreRelease(messageI2C_LockHandle);
 8002212:	4b11      	ldr	r3, [pc, #68]	; (8002258 <IMU_getData+0x90>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4618      	mov	r0, r3
 8002218:	f00c fcce 	bl	800ebb8 <osSemaphoreRelease>
//		_i2cPort->requestFrom((uint8_t)_deviceAddress, (uint8_t)(numberOfBytesToRead + 4));
//		if (waitForI2C() == false)
//			return (0); //Error

		// first four bytes are header bytes and can be thrown away
		if ( (dataSpot + numberOfBytesToRead) < MAX_PACKET_SIZE){
 800221c:	89fa      	ldrh	r2, [r7, #14]
 800221e:	89bb      	ldrh	r3, [r7, #12]
 8002220:	4413      	add	r3, r2
 8002222:	2b7f      	cmp	r3, #127	; 0x7f
 8002224:	dc07      	bgt.n	8002236 <IMU_getData+0x6e>
			memcpy(&(shtpData[dataSpot]), &(receiveBuffer[4]), numberOfBytesToRead);
 8002226:	89fb      	ldrh	r3, [r7, #14]
 8002228:	4a0f      	ldr	r2, [pc, #60]	; (8002268 <IMU_getData+0xa0>)
 800222a:	4413      	add	r3, r2
 800222c:	89ba      	ldrh	r2, [r7, #12]
 800222e:	490f      	ldr	r1, [pc, #60]	; (800226c <IMU_getData+0xa4>)
 8002230:	4618      	mov	r0, r3
 8002232:	f013 fe8b 	bl	8015f4c <memcpy>
			// Do nothing with the data
		}

		// increment data index
		// TODO: this can be changed to receive a larger buffer since this constraint is for the Arduino
		dataSpot += numberOfBytesToRead;
 8002236:	89fa      	ldrh	r2, [r7, #14]
 8002238:	89bb      	ldrh	r3, [r7, #12]
 800223a:	4413      	add	r3, r2
 800223c:	81fb      	strh	r3, [r7, #14]

		bytesRemaining -= numberOfBytesToRead;
 800223e:	88fa      	ldrh	r2, [r7, #6]
 8002240:	89bb      	ldrh	r3, [r7, #12]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	80fb      	strh	r3, [r7, #6]
	while (bytesRemaining > 0)
 8002246:	88fb      	ldrh	r3, [r7, #6]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d1c5      	bne.n	80021d8 <IMU_getData+0x10>
	}
	return (true); //Done!
 800224c:	2301      	movs	r3, #1
}
 800224e:	4618      	mov	r0, r3
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	200278b4 	.word	0x200278b4
 800225c:	20000006 	.word	0x20000006
 8002260:	20000a84 	.word	0x20000a84
 8002264:	20027eb0 	.word	0x20027eb0
 8002268:	20027de0 	.word	0x20027de0
 800226c:	20000a88 	.word	0x20000a88

08002270 <IMU_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
bool IMU_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af02      	add	r7, sp, #8
 8002276:	4603      	mov	r3, r0
 8002278:	460a      	mov	r2, r1
 800227a:	71fb      	strb	r3, [r7, #7]
 800227c:	4613      	mov	r3, r2
 800227e:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 8002280:	79bb      	ldrb	r3, [r7, #6]
 8002282:	3304      	adds	r3, #4
 8002284:	73fb      	strb	r3, [r7, #15]

	/*  *********** POPULATE HEADER ****************************** */
	outPacket[0] = packetLength & 0xFF; 				//Packet length LSB
 8002286:	4a1b      	ldr	r2, [pc, #108]	; (80022f4 <IMU_sendPacket+0x84>)
 8002288:	7bfb      	ldrb	r3, [r7, #15]
 800228a:	7013      	strb	r3, [r2, #0]
	outPacket[1] = packetLength >> 8; 					//Packet length MSB
 800228c:	7bfb      	ldrb	r3, [r7, #15]
 800228e:	121b      	asrs	r3, r3, #8
 8002290:	b2da      	uxtb	r2, r3
 8002292:	4b18      	ldr	r3, [pc, #96]	; (80022f4 <IMU_sendPacket+0x84>)
 8002294:	705a      	strb	r2, [r3, #1]
	outPacket[2] = channelNumber; 						//Channel number
 8002296:	4a17      	ldr	r2, [pc, #92]	; (80022f4 <IMU_sendPacket+0x84>)
 8002298:	79fb      	ldrb	r3, [r7, #7]
 800229a:	7093      	strb	r3, [r2, #2]
	outPacket[3] = sequenceNumber[channelNumber]++;	//Send the sequence number, increments with each packet sent, different counter for each channel
 800229c:	79fb      	ldrb	r3, [r7, #7]
 800229e:	4a16      	ldr	r2, [pc, #88]	; (80022f8 <IMU_sendPacket+0x88>)
 80022a0:	5cd2      	ldrb	r2, [r2, r3]
 80022a2:	1c51      	adds	r1, r2, #1
 80022a4:	b2c8      	uxtb	r0, r1
 80022a6:	4914      	ldr	r1, [pc, #80]	; (80022f8 <IMU_sendPacket+0x88>)
 80022a8:	54c8      	strb	r0, [r1, r3]
 80022aa:	4b12      	ldr	r3, [pc, #72]	; (80022f4 <IMU_sendPacket+0x84>)
 80022ac:	70da      	strb	r2, [r3, #3]

	/*  *********** FILL PAYLOAD ********************************* */
	memcpy(&(outPacket[4]), shtpData, dataLength);
 80022ae:	79bb      	ldrb	r3, [r7, #6]
 80022b0:	461a      	mov	r2, r3
 80022b2:	4912      	ldr	r1, [pc, #72]	; (80022fc <IMU_sendPacket+0x8c>)
 80022b4:	4812      	ldr	r0, [pc, #72]	; (8002300 <IMU_sendPacket+0x90>)
 80022b6:	f013 fe49 	bl	8015f4c <memcpy>

	/*  *********** SEND TO IMU ********************************** */
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 80022ba:	4b12      	ldr	r3, [pc, #72]	; (8002304 <IMU_sendPacket+0x94>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f04f 31ff 	mov.w	r1, #4294967295
 80022c2:	4618      	mov	r0, r3
 80022c4:	f00c fc12 	bl	800eaec <osSemaphoreAcquire>
//	taskENTER_CRITICAL();
	HAL_I2C_Master_Transmit(&hi2c1, _deviceAddress, outPacket, packetLength, 100);
 80022c8:	4b0f      	ldr	r3, [pc, #60]	; (8002308 <IMU_sendPacket+0x98>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	b299      	uxth	r1, r3
 80022ce:	7bfb      	ldrb	r3, [r7, #15]
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	2364      	movs	r3, #100	; 0x64
 80022d4:	9300      	str	r3, [sp, #0]
 80022d6:	4613      	mov	r3, r2
 80022d8:	4a06      	ldr	r2, [pc, #24]	; (80022f4 <IMU_sendPacket+0x84>)
 80022da:	480c      	ldr	r0, [pc, #48]	; (800230c <IMU_sendPacket+0x9c>)
 80022dc:	f006 fd4e 	bl	8008d7c <HAL_I2C_Master_Transmit>
//		osSemaphoreRelease(messageI2C_LockSem);
//		osDelay(100);
//		osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
//	}
//	taskEXIT_CRITICAL();
	osSemaphoreRelease(messageI2C_LockHandle);
 80022e0:	4b08      	ldr	r3, [pc, #32]	; (8002304 <IMU_sendPacket+0x94>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f00c fc67 	bl	800ebb8 <osSemaphoreRelease>

	return (true);
 80022ea:	2301      	movs	r3, #1
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3710      	adds	r7, #16
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	20027e6c 	.word	0x20027e6c
 80022f8:	20000a7c 	.word	0x20000a7c
 80022fc:	20027de0 	.word	0x20027de0
 8002300:	20027e70 	.word	0x20027e70
 8002304:	200278b4 	.word	0x200278b4
 8002308:	20000006 	.word	0x20000006
 800230c:	20027eb0 	.word	0x20027eb0

08002310 <vPortSuppressTicksAndSleep>:
 *
 * @param: xExpectedIdleTime is given in number of FreeRTOS Ticks
 * @retval: None
 */
void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  /* Stop the SysTick  to avoid the interrupt to occur while in the critical section.
   * Otherwise, this will prevent the device to enter low power mode
   * At this time, an update of the systick will not be considered
   *
   */
  portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 8002318:	4b1e      	ldr	r3, [pc, #120]	; (8002394 <vPortSuppressTicksAndSleep+0x84>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a1d      	ldr	r2, [pc, #116]	; (8002394 <vPortSuppressTicksAndSleep+0x84>)
 800231e:	f023 0301 	bic.w	r3, r3, #1
 8002322:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002324:	b672      	cpsid	i
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002326:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800232a:	f3bf 8f6f 	isb	sy
  __DSB();
  __ISB();

  /* If a context switch is pending or a task is waiting for the scheduler
        to be unsuspended then abandon the low power entry. */
  if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 800232e:	f00f f9c7 	bl	80116c0 <eTaskConfirmSleepModeStatus>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d107      	bne.n	8002348 <vPortSuppressTicksAndSleep+0x38>
  {
    /* Restart SysTick. */
    portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8002338:	4b16      	ldr	r3, [pc, #88]	; (8002394 <vPortSuppressTicksAndSleep+0x84>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a15      	ldr	r2, [pc, #84]	; (8002394 <vPortSuppressTicksAndSleep+0x84>)
 800233e:	f043 0301 	orr.w	r3, r3, #1
 8002342:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002344:	b662      	cpsie	i
    portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

    /* Exit with interrUpts enabled. */
    __enable_irq();
  }
}
 8002346:	e021      	b.n	800238c <vPortSuppressTicksAndSleep+0x7c>
    if (xExpectedIdleTime != (~0))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800234e:	d002      	beq.n	8002356 <vPortSuppressTicksAndSleep+0x46>
      LpTimerStart( xExpectedIdleTime );
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f000 f869 	bl	8002428 <LpTimerStart>
    LpEnter( );
 8002356:	f000 f8cb 	bl	80024f0 <LpEnter>
    if (xExpectedIdleTime != (~0))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002360:	d005      	beq.n	800236e <vPortSuppressTicksAndSleep+0x5e>
      ulCompleteTickPeriods = LpGetElapsedTime( );
 8002362:	f000 f8cd 	bl	8002500 <LpGetElapsedTime>
 8002366:	60f8      	str	r0, [r7, #12]
      vTaskStepTick( ulCompleteTickPeriods );
 8002368:	68f8      	ldr	r0, [r7, #12]
 800236a:	f00e fec3 	bl	80110f4 <vTaskStepTick>
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800236e:	4b0a      	ldr	r3, [pc, #40]	; (8002398 <vPortSuppressTicksAndSleep+0x88>)
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8002374:	4b07      	ldr	r3, [pc, #28]	; (8002394 <vPortSuppressTicksAndSleep+0x84>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a06      	ldr	r2, [pc, #24]	; (8002394 <vPortSuppressTicksAndSleep+0x84>)
 800237a:	f043 0301 	orr.w	r3, r3, #1
 800237e:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8002380:	4b06      	ldr	r3, [pc, #24]	; (800239c <vPortSuppressTicksAndSleep+0x8c>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a06      	ldr	r2, [pc, #24]	; (80023a0 <vPortSuppressTicksAndSleep+0x90>)
 8002386:	3b01      	subs	r3, #1
 8002388:	6013      	str	r3, [r2, #0]
 800238a:	b662      	cpsie	i
}
 800238c:	bf00      	nop
 800238e:	3710      	adds	r7, #16
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	e000e010 	.word	0xe000e010
 8002398:	e000e018 	.word	0xe000e018
 800239c:	20000aa4 	.word	0x20000aa4
 80023a0:	e000e014 	.word	0xe000e014

080023a4 <vPortSetupTimerInterrupt>:
 * However, as at that time, it is not yet known whereas the low power mode that will be used is stop mode or
 * sleep mode, it is easier and simpler to go with a low power timer as soon as the tick need to be
 * suppressed.
 */
void vPortSetupTimerInterrupt( void )
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  LpTimerInit( );
 80023a8:	f000 f828 	bl	80023fc <LpTimerInit>

  /* Calculate the constants required to configure the tick interrupt. */
  ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 80023ac:	4b0d      	ldr	r3, [pc, #52]	; (80023e4 <vPortSetupTimerInterrupt+0x40>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a0d      	ldr	r2, [pc, #52]	; (80023e8 <vPortSetupTimerInterrupt+0x44>)
 80023b2:	fba2 2303 	umull	r2, r3, r2, r3
 80023b6:	099b      	lsrs	r3, r3, #6
 80023b8:	4a0c      	ldr	r2, [pc, #48]	; (80023ec <vPortSetupTimerInterrupt+0x48>)
 80023ba:	6013      	str	r3, [r2, #0]

  /* Stop and clear the SysTick. */
  portNVIC_SYSTICK_CTRL_REG = 0UL;
 80023bc:	4b0c      	ldr	r3, [pc, #48]	; (80023f0 <vPortSetupTimerInterrupt+0x4c>)
 80023be:	2200      	movs	r2, #0
 80023c0:	601a      	str	r2, [r3, #0]
  portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80023c2:	4b0c      	ldr	r3, [pc, #48]	; (80023f4 <vPortSetupTimerInterrupt+0x50>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]

  /* Configure SysTick to interrupt at the requested rate. */
  portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80023c8:	4b06      	ldr	r3, [pc, #24]	; (80023e4 <vPortSetupTimerInterrupt+0x40>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a06      	ldr	r2, [pc, #24]	; (80023e8 <vPortSetupTimerInterrupt+0x44>)
 80023ce:	fba2 2303 	umull	r2, r3, r2, r3
 80023d2:	099b      	lsrs	r3, r3, #6
 80023d4:	4a08      	ldr	r2, [pc, #32]	; (80023f8 <vPortSetupTimerInterrupt+0x54>)
 80023d6:	3b01      	subs	r3, #1
 80023d8:	6013      	str	r3, [r2, #0]
  portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80023da:	4b05      	ldr	r3, [pc, #20]	; (80023f0 <vPortSetupTimerInterrupt+0x4c>)
 80023dc:	2207      	movs	r2, #7
 80023de:	601a      	str	r2, [r3, #0]
}
 80023e0:	bf00      	nop
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	20000078 	.word	0x20000078
 80023e8:	10624dd3 	.word	0x10624dd3
 80023ec:	20000aa4 	.word	0x20000aa4
 80023f0:	e000e010 	.word	0xe000e010
 80023f4:	e000e018 	.word	0xe000e018
 80023f8:	e000e014 	.word	0xe000e014

080023fc <LpTimerInit>:
 *
 * @param  None
 * @retval None
 */
static void LpTimerInit( void )
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  ( void ) HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(LpTimerContext.LpTimerFreeRTOS_Id), hw_ts_SingleShot, LpTimerCb);
 8002400:	4b03      	ldr	r3, [pc, #12]	; (8002410 <LpTimerInit+0x14>)
 8002402:	2200      	movs	r2, #0
 8002404:	4903      	ldr	r1, [pc, #12]	; (8002414 <LpTimerInit+0x18>)
 8002406:	2000      	movs	r0, #0
 8002408:	f001 f83a 	bl	8003480 <HW_TS_Create>

  return;
 800240c:	bf00      	nop
}
 800240e:	bd80      	pop	{r7, pc}
 8002410:	08002419 	.word	0x08002419
 8002414:	20000aac 	.word	0x20000aac

08002418 <LpTimerCb>:
 *
 * @param  None
 * @retval None
 */
static void LpTimerCb( void )
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  /**
   * Nothing to be done
   */

  return;
 800241c:	bf00      	nop
}
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
	...

08002428 <LpTimerStart>:
 *
 * @param  time_to_sleep : Number of FreeRTOS ticks
 * @retval None
 */
static void LpTimerStart( uint32_t time_to_sleep )
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  /* Converts the number of FreeRTOS ticks into hw timer tick */
  if(time_to_sleep <=  0x10C6)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f241 02c6 	movw	r2, #4294	; 0x10c6
 8002436:	4293      	cmp	r3, r2
 8002438:	d80c      	bhi.n	8002454 <LpTimerStart+0x2c>
  {
    /**
     * ( time_to_sleep * 1000 * 1000 ) fit a 32bits word
     */
    time_to_sleep = (time_to_sleep * 1000 * 1000 );
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a28      	ldr	r2, [pc, #160]	; (80024e0 <LpTimerStart+0xb8>)
 800243e:	fb02 f303 	mul.w	r3, r2, r3
 8002442:	607b      	str	r3, [r7, #4]
    time_to_sleep = time_to_sleep / ( CFG_TS_TICK_VAL * configTICK_RATE_HZ );
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	099b      	lsrs	r3, r3, #6
 8002448:	4a26      	ldr	r2, [pc, #152]	; (80024e4 <LpTimerStart+0xbc>)
 800244a:	fba2 2303 	umull	r2, r3, r2, r3
 800244e:	095b      	lsrs	r3, r3, #5
 8002450:	607b      	str	r3, [r7, #4]
 8002452:	e034      	b.n	80024be <LpTimerStart+0x96>
  }
  else if(time_to_sleep <= 0x418937)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a24      	ldr	r2, [pc, #144]	; (80024e8 <LpTimerStart+0xc0>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d81b      	bhi.n	8002494 <LpTimerStart+0x6c>
  {
    /**
     * ( time_to_sleep * 1000 ) fit a 32bits word
     */
    time_to_sleep = (time_to_sleep * 1000);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002462:	fb02 f303 	mul.w	r3, r2, r3
 8002466:	607b      	str	r3, [r7, #4]
    time_to_sleep = time_to_sleep / ( CFG_TS_TICK_VAL * configTICK_RATE_HZ );
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	099b      	lsrs	r3, r3, #6
 800246c:	4a1d      	ldr	r2, [pc, #116]	; (80024e4 <LpTimerStart+0xbc>)
 800246e:	fba2 2303 	umull	r2, r3, r2, r3
 8002472:	095b      	lsrs	r3, r3, #5
 8002474:	607b      	str	r3, [r7, #4]
    if(time_to_sleep <= 0x418937)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a1b      	ldr	r2, [pc, #108]	; (80024e8 <LpTimerStart+0xc0>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d806      	bhi.n	800248c <LpTimerStart+0x64>
    {
      /**
       * ( time_to_sleep * 1000 ) fit a 32bits word
       */
      time_to_sleep = (time_to_sleep * 1000);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002484:	fb02 f303 	mul.w	r3, r2, r3
 8002488:	607b      	str	r3, [r7, #4]
 800248a:	e018      	b.n	80024be <LpTimerStart+0x96>
    }
    else
    {
      time_to_sleep = (~0); /* Max value */
 800248c:	f04f 33ff 	mov.w	r3, #4294967295
 8002490:	607b      	str	r3, [r7, #4]
 8002492:	e014      	b.n	80024be <LpTimerStart+0x96>
    }
  }
  else
  {
    time_to_sleep = time_to_sleep / ( CFG_TS_TICK_VAL * configTICK_RATE_HZ );
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	099b      	lsrs	r3, r3, #6
 8002498:	4a12      	ldr	r2, [pc, #72]	; (80024e4 <LpTimerStart+0xbc>)
 800249a:	fba2 2303 	umull	r2, r3, r2, r3
 800249e:	095b      	lsrs	r3, r3, #5
 80024a0:	607b      	str	r3, [r7, #4]
    if(time_to_sleep <= 0x10C6)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f241 02c6 	movw	r2, #4294	; 0x10c6
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d805      	bhi.n	80024b8 <LpTimerStart+0x90>
    {
      /**
       * ( time_to_sleep * 1000 * 1000 ) fit a 32bits word
       */
      time_to_sleep = (time_to_sleep * 1000 * 1000 );
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4a0c      	ldr	r2, [pc, #48]	; (80024e0 <LpTimerStart+0xb8>)
 80024b0:	fb02 f303 	mul.w	r3, r2, r3
 80024b4:	607b      	str	r3, [r7, #4]
 80024b6:	e002      	b.n	80024be <LpTimerStart+0x96>
    }
    else
    {
      time_to_sleep = (~0); /* Max value */
 80024b8:	f04f 33ff 	mov.w	r3, #4294967295
 80024bc:	607b      	str	r3, [r7, #4]
    }
  }

  HW_TS_Start(LpTimerContext.LpTimerFreeRTOS_Id, time_to_sleep);
 80024be:	4b0b      	ldr	r3, [pc, #44]	; (80024ec <LpTimerStart+0xc4>)
 80024c0:	791b      	ldrb	r3, [r3, #4]
 80024c2:	6879      	ldr	r1, [r7, #4]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f001 f8db 	bl	8003680 <HW_TS_Start>
   * There might be other timers already running in the timer server that may elapse
   * before this one.
   * Store how long before the next event so that on wakeup, it will be possible to calculate
   * how long the tick has been suppressed
   */
  LpTimerContext.LpTimeLeftOnEntry = HW_TS_RTC_ReadLeftTicksToCount( );
 80024ca:	f001 f95f 	bl	800378c <HW_TS_RTC_ReadLeftTicksToCount>
 80024ce:	4603      	mov	r3, r0
 80024d0:	461a      	mov	r2, r3
 80024d2:	4b06      	ldr	r3, [pc, #24]	; (80024ec <LpTimerStart+0xc4>)
 80024d4:	601a      	str	r2, [r3, #0]

  return;
 80024d6:	bf00      	nop
}
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	000f4240 	.word	0x000f4240
 80024e4:	0113094d 	.word	0x0113094d
 80024e8:	00418937 	.word	0x00418937
 80024ec:	20000aa8 	.word	0x20000aa8

080024f0 <LpEnter>:
 *
 * @param  None
 * @retval None
 */
static void LpEnter( void )
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif
  return;
 80024f4:	bf00      	nop
}
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
	...

08002500 <LpGetElapsedTime>:
 *
 * @param  None
 * @retval The number of tick rate (FreeRTOS tick)
 */
static uint32_t LpGetElapsedTime( void )
{
 8002500:	b590      	push	{r4, r7, lr}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
  uint64_t return_value;

  return_value = (configTICK_RATE_HZ) * (CFG_TS_TICK_VAL) * (uint64_t)(LpTimerContext.LpTimeLeftOnEntry - HW_TS_RTC_ReadLeftTicksToCount( ));
 8002506:	4b16      	ldr	r3, [pc, #88]	; (8002560 <LpGetElapsedTime+0x60>)
 8002508:	681c      	ldr	r4, [r3, #0]
 800250a:	f001 f93f 	bl	800378c <HW_TS_RTC_ReadLeftTicksToCount>
 800250e:	4603      	mov	r3, r0
 8002510:	1ae3      	subs	r3, r4, r3
 8002512:	f04f 0400 	mov.w	r4, #0
 8002516:	4a13      	ldr	r2, [pc, #76]	; (8002564 <LpGetElapsedTime+0x64>)
 8002518:	fb02 f104 	mul.w	r1, r2, r4
 800251c:	2200      	movs	r2, #0
 800251e:	fb02 f203 	mul.w	r2, r2, r3
 8002522:	440a      	add	r2, r1
 8002524:	490f      	ldr	r1, [pc, #60]	; (8002564 <LpGetElapsedTime+0x64>)
 8002526:	fba3 3401 	umull	r3, r4, r3, r1
 800252a:	4422      	add	r2, r4
 800252c:	4614      	mov	r4, r2
 800252e:	e9c7 3400 	strd	r3, r4, [r7]
 8002532:	e9c7 3400 	strd	r3, r4, [r7]
  return_value = return_value / (1000 * 1000);
 8002536:	e9d7 0100 	ldrd	r0, r1, [r7]
 800253a:	4a0b      	ldr	r2, [pc, #44]	; (8002568 <LpGetElapsedTime+0x68>)
 800253c:	f04f 0300 	mov.w	r3, #0
 8002540:	f7fe fae4 	bl	8000b0c <__aeabi_uldivmod>
 8002544:	4603      	mov	r3, r0
 8002546:	460c      	mov	r4, r1
 8002548:	e9c7 3400 	strd	r3, r4, [r7]
   * The system may have been out from another reason than the timer
   * Stop the timer after the elapsed time is calculated other wise, HW_TS_RTC_ReadLeftTicksToCount()
   * may return 0xFFFF ( TIMER LIST EMPTY )
   * It does not hurt stopping a timer that exists but is not running.
   */
  HW_TS_Stop(LpTimerContext.LpTimerFreeRTOS_Id);
 800254c:	4b04      	ldr	r3, [pc, #16]	; (8002560 <LpGetElapsedTime+0x60>)
 800254e:	791b      	ldrb	r3, [r3, #4]
 8002550:	4618      	mov	r0, r3
 8002552:	f001 f80b 	bl	800356c <HW_TS_Stop>

  return (uint32_t)return_value;
 8002556:	683b      	ldr	r3, [r7, #0]
}
 8002558:	4618      	mov	r0, r3
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	bd90      	pop	{r4, r7, pc}
 8002560:	20000aa8 	.word	0x20000aa8
 8002564:	00077240 	.word	0x00077240
 8002568:	000f4240 	.word	0x000f4240

0800256c <_GeometryBuilder>:

BaseStationGeometryDef bs_1 = {{1.738303, 2.430314,  0.781285},
							  {0.285992, -0.253563, 0.924075, 0.040683, 0.966697, 0.252668, -0.957368, -0.034667, 0.286784}};
SensorLocalGeometry s_loc_geo = {0, {0.0, 0.0, 0.0}};

void _GeometryBuilder(GeometryBuilder *self){
 800256c:	b4b0      	push	{r4, r5, r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]

	self->base_stations_[0] = bs_0;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4a12      	ldr	r2, [pc, #72]	; (80025c0 <_GeometryBuilder+0x54>)
 8002578:	461c      	mov	r4, r3
 800257a:	4615      	mov	r5, r2
 800257c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800257e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002580:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002582:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002584:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002588:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	self->base_stations_[1] = bs_1;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4a0d      	ldr	r2, [pc, #52]	; (80025c4 <_GeometryBuilder+0x58>)
 8002590:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8002594:	4615      	mov	r5, r2
 8002596:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002598:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800259a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800259c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800259e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80025a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	self->sensors[0] = s_loc_geo;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a07      	ldr	r2, [pc, #28]	; (80025c8 <_GeometryBuilder+0x5c>)
 80025aa:	f103 0460 	add.w	r4, r3, #96	; 0x60
 80025ae:	4613      	mov	r3, r2
 80025b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80025b6:	bf00      	nop
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bcb0      	pop	{r4, r5, r7}
 80025be:	4770      	bx	lr
 80025c0:	20000008 	.word	0x20000008
 80025c4:	20000038 	.word	0x20000038
 80025c8:	20000ab0 	.word	0x20000ab0

080025cc <consume_angles>:

void consume_angles(GeometryBuilder * self, const SensorAnglesFrame * f) {
 80025cc:	b5b0      	push	{r4, r5, r7, lr}
 80025ce:	b096      	sub	sp, #88	; 0x58
 80025d0:	af02      	add	r7, sp, #8
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
    // First 2 angles - x, y of station B; second 2 angles - x, y of station C.
    // Coordinate system: Y - Up;  X ->  Z v  (to the viewer)
    // Station 'looks' to inverse Z axis (vector 0;0;-1).
    if (f->fix_level >= kCycleSynced) {
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	2bc7      	cmp	r3, #199	; 0xc7
 80025dc:	f340 8093 	ble.w	8002706 <consume_angles+0x13a>
        SensorLocalGeometry *sens_def = &self->sensors[0];
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	3360      	adds	r3, #96	; 0x60
 80025e4:	643b      	str	r3, [r7, #64]	; 0x40
        SensorAngles *sens = &f->sensors[sens_def->input_idx];
 80025e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	015b      	lsls	r3, r3, #5
 80025ec:	3310      	adds	r3, #16
 80025ee:	683a      	ldr	r2, [r7, #0]
 80025f0:	4413      	add	r3, r2
 80025f2:	63fb      	str	r3, [r7, #60]	; 0x3c

        // Check angles are fresh enough.
        uint32_t max_stale = 0;
 80025f4:	2300      	movs	r3, #0
 80025f6:	64fb      	str	r3, [r7, #76]	; 0x4c
        for (int i = 0; i < NUM_CYCLE_PHASES; i++){
 80025f8:	2300      	movs	r3, #0
 80025fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80025fc:	e011      	b.n	8002622 <consume_angles+0x56>
        	//Get time since we last updated the angles for phase i
        	int stale = f->cycle_idx - sens->updated_cycles[i];
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	689a      	ldr	r2, [r3, #8]
 8002602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002604:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002606:	3104      	adds	r1, #4
 8002608:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	63bb      	str	r3, [r7, #56]	; 0x38
        	max_stale = (stale > max_stale) ? stale : max_stale;
 8002610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002612:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002614:	4293      	cmp	r3, r2
 8002616:	bf38      	it	cc
 8002618:	4613      	movcc	r3, r2
 800261a:	64fb      	str	r3, [r7, #76]	; 0x4c
        for (int i = 0; i < NUM_CYCLE_PHASES; i++){
 800261c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800261e:	3301      	adds	r3, #1
 8002620:	64bb      	str	r3, [r7, #72]	; 0x48
 8002622:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002624:	2b03      	cmp	r3, #3
 8002626:	ddea      	ble.n	80025fe <consume_angles+0x32>
        }

        if (max_stale < NUM_CYCLE_PHASES * 3) {  // We tolerate stale angles up to 2 cycles old.
 8002628:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800262a:	2b0b      	cmp	r3, #11
 800262c:	d86b      	bhi.n	8002706 <consume_angles+0x13a>
            float ray1[VEC3D_SIZE], ray2[VEC3D_SIZE], origin1[VEC3D_SIZE], origin2[VEC3D_SIZE];
            calc_ray_vec(&self->base_stations_[0], sens->angles[0], sens->angles[1], ray1, origin1);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002632:	edd3 7a00 	vldr	s15, [r3]
 8002636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002638:	ed93 7a01 	vldr	s14, [r3, #4]
 800263c:	f107 0214 	add.w	r2, r7, #20
 8002640:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002644:	4619      	mov	r1, r3
 8002646:	eef0 0a47 	vmov.f32	s1, s14
 800264a:	eeb0 0a67 	vmov.f32	s0, s15
 800264e:	f000 f8e5 	bl	800281c <calc_ray_vec>
            calc_ray_vec(&self->base_stations_[1], sens->angles[2], sens->angles[3], ray2, origin2);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8002658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800265a:	edd3 7a02 	vldr	s15, [r3, #8]
 800265e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002660:	ed93 7a03 	vldr	s14, [r3, #12]
 8002664:	f107 0208 	add.w	r2, r7, #8
 8002668:	f107 0320 	add.w	r3, r7, #32
 800266c:	4619      	mov	r1, r3
 800266e:	eef0 0a47 	vmov.f32	s1, s14
 8002672:	eeb0 0a67 	vmov.f32	s0, s15
 8002676:	f000 f8d1 	bl	800281c <calc_ray_vec>

            intersect_lines(origin1, ray1, origin2, ray2, self->vive_vars_.pos, &self->vive_vars_.pos_delta);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	3370      	adds	r3, #112	; 0x70
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	327c      	adds	r2, #124	; 0x7c
 8002682:	f107 0520 	add.w	r5, r7, #32
 8002686:	f107 0408 	add.w	r4, r7, #8
 800268a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800268e:	f107 0014 	add.w	r0, r7, #20
 8002692:	9201      	str	r2, [sp, #4]
 8002694:	9300      	str	r3, [sp, #0]
 8002696:	462b      	mov	r3, r5
 8002698:	4622      	mov	r2, r4
 800269a:	f000 f945 	bl	8002928 <intersect_lines>

            // Translate object position depending on the position of sensor relative to object.
            for (int i = 0; i < VEC3D_SIZE; i++){
 800269e:	2300      	movs	r3, #0
 80026a0:	647b      	str	r3, [r7, #68]	; 0x44
 80026a2:	e019      	b.n	80026d8 <consume_angles+0x10c>
            	self->vive_vars_.pos[i] -= sens_def->pos[i];
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026a8:	331c      	adds	r3, #28
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	4413      	add	r3, r2
 80026ae:	ed93 7a00 	vldr	s14, [r3]
 80026b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80026b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	4413      	add	r3, r2
 80026ba:	3304      	adds	r3, #4
 80026bc:	edd3 7a00 	vldr	s15, [r3]
 80026c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026c8:	331c      	adds	r3, #28
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	4413      	add	r3, r2
 80026ce:	edc3 7a00 	vstr	s15, [r3]
            for (int i = 0; i < VEC3D_SIZE; i++){
 80026d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026d4:	3301      	adds	r3, #1
 80026d6:	647b      	str	r3, [r7, #68]	; 0x44
 80026d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026da:	2b02      	cmp	r3, #2
 80026dc:	dde2      	ble.n	80026a4 <consume_angles+0xd8>
            }

            self->vive_vars_.time_ms = HAL_GetTick();
 80026de:	f004 f863 	bl	80067a8 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

            //Put VIVE measurements in the message queue
            osMessageQueuePut(viveQueueHandle, (void *) &self->vive_vars_, NULL, 0);
 80026ea:	4b09      	ldr	r3, [pc, #36]	; (8002710 <consume_angles+0x144>)
 80026ec:	6818      	ldr	r0, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f103 0170 	add.w	r1, r3, #112	; 0x70
 80026f4:	2300      	movs	r3, #0
 80026f6:	2200      	movs	r2, #0
 80026f8:	f00c fb3c 	bl	800ed74 <osMessageQueuePut>
            // tell timer function that localization is complete
			osSemaphoreRelease(locCompleteHandle);
 80026fc:	4b05      	ldr	r3, [pc, #20]	; (8002714 <consume_angles+0x148>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4618      	mov	r0, r3
 8002702:	f00c fa59 	bl	800ebb8 <osSemaphoreRelease>
        else {
            // Angles too stale - cannot calculate position anymore.

        }
    }
}
 8002706:	bf00      	nop
 8002708:	3750      	adds	r7, #80	; 0x50
 800270a:	46bd      	mov	sp, r7
 800270c:	bdb0      	pop	{r4, r5, r7, pc}
 800270e:	bf00      	nop
 8002710:	200277b8 	.word	0x200277b8
 8002714:	20027cf4 	.word	0x20027cf4

08002718 <vec_cross_product>:
    // TODO: Make compatible with multiple geometry objects.
    //set_led_state(self->pos_.fix_level >= kStaleFix ? kFixFound : kNoFix);
}
*/

void vec_cross_product(float *a, float *b, float *res) {
 8002718:	b480      	push	{r7}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	607a      	str	r2, [r7, #4]
    res[0] = a[1] * b[2] - a[2] * b[1];
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	3304      	adds	r3, #4
 8002728:	ed93 7a00 	vldr	s14, [r3]
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	3308      	adds	r3, #8
 8002730:	edd3 7a00 	vldr	s15, [r3]
 8002734:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	3308      	adds	r3, #8
 800273c:	edd3 6a00 	vldr	s13, [r3]
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	3304      	adds	r3, #4
 8002744:	edd3 7a00 	vldr	s15, [r3]
 8002748:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800274c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	edc3 7a00 	vstr	s15, [r3]
    res[1] = a[2] * b[0] - a[0] * b[2];
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	3308      	adds	r3, #8
 800275a:	ed93 7a00 	vldr	s14, [r3]
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	edd3 7a00 	vldr	s15, [r3]
 8002764:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	edd3 6a00 	vldr	s13, [r3]
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	3308      	adds	r3, #8
 8002772:	edd3 7a00 	vldr	s15, [r3]
 8002776:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	3304      	adds	r3, #4
 800277e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002782:	edc3 7a00 	vstr	s15, [r3]
    res[2] = a[0] * b[1] - a[1] * b[0];
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	ed93 7a00 	vldr	s14, [r3]
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	3304      	adds	r3, #4
 8002790:	edd3 7a00 	vldr	s15, [r3]
 8002794:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	3304      	adds	r3, #4
 800279c:	edd3 6a00 	vldr	s13, [r3]
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	edd3 7a00 	vldr	s15, [r3]
 80027a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	3308      	adds	r3, #8
 80027ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027b2:	edc3 7a00 	vstr	s15, [r3]
}
 80027b6:	bf00      	nop
 80027b8:	3714      	adds	r7, #20
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr

080027c2 <vec_length>:

float vec_length(float *vec) {
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b086      	sub	sp, #24
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
    float pow, res;

    arm_power_f32(vec, VEC3D_SIZE, &pow); // returns sum of squares
 80027ca:	f107 030c 	add.w	r3, r7, #12
 80027ce:	461a      	mov	r2, r3
 80027d0:	2103      	movs	r1, #3
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f013 f8ca 	bl	801596c <arm_power_f32>
    arm_sqrt_f32(pow, &res);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	617b      	str	r3, [r7, #20]
 80027dc:	f107 0308 	add.w	r3, r7, #8
 80027e0:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 80027e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80027e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027ee:	db09      	blt.n	8002804 <vec_length+0x42>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 80027f0:	ed97 0a05 	vldr	s0, [r7, #20]
 80027f4:	f013 fd2e 	bl	8016254 <sqrtf>
 80027f8:	eef0 7a40 	vmov.f32	s15, s0
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	edc3 7a00 	vstr	s15, [r3]
 8002802:	e003      	b.n	800280c <vec_length+0x4a>

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	f04f 0200 	mov.w	r2, #0
 800280a:	601a      	str	r2, [r3, #0]

    return res;
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	ee07 3a90 	vmov	s15, r3
}
 8002812:	eeb0 0a67 	vmov.f32	s0, s15
 8002816:	3718      	adds	r7, #24
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <calc_ray_vec>:

void calc_ray_vec(const BaseStationGeometryDef * bs, float angle1, float angle2, float *res, float *origin) {
 800281c:	b580      	push	{r7, lr}
 800281e:	b09a      	sub	sp, #104	; 0x68
 8002820:	af00      	add	r7, sp, #0
 8002822:	6178      	str	r0, [r7, #20]
 8002824:	ed87 0a04 	vstr	s0, [r7, #16]
 8002828:	edc7 0a03 	vstr	s1, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	607a      	str	r2, [r7, #4]
    float a[VEC3D_SIZE] = {arm_cos_f32(angle1), 0, -arm_sin_f32(angle1)};  // Normal vector to X plane
 8002830:	ed97 0a04 	vldr	s0, [r7, #16]
 8002834:	f013 f9c6 	bl	8015bc4 <arm_cos_f32>
 8002838:	eef0 7a40 	vmov.f32	s15, s0
 800283c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 8002840:	f04f 0300 	mov.w	r3, #0
 8002844:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002846:	ed97 0a04 	vldr	s0, [r7, #16]
 800284a:	f013 f975 	bl	8015b38 <arm_sin_f32>
 800284e:	eef0 7a40 	vmov.f32	s15, s0
 8002852:	eef1 7a67 	vneg.f32	s15, s15
 8002856:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    float b[VEC3D_SIZE] = {0, arm_cos_f32(angle2), arm_sin_f32(angle2)};   // Normal vector to Y plane
 800285a:	f04f 0300 	mov.w	r3, #0
 800285e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002860:	ed97 0a03 	vldr	s0, [r7, #12]
 8002864:	f013 f9ae 	bl	8015bc4 <arm_cos_f32>
 8002868:	eef0 7a40 	vmov.f32	s15, s0
 800286c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
 8002870:	ed97 0a03 	vldr	s0, [r7, #12]
 8002874:	f013 f960 	bl	8015b38 <arm_sin_f32>
 8002878:	eef0 7a40 	vmov.f32	s15, s0
 800287c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    float ray[VEC3D_SIZE] = {};
 8002880:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002884:	2200      	movs	r2, #0
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	605a      	str	r2, [r3, #4]
 800288a:	609a      	str	r2, [r3, #8]
    vec_cross_product(b, a, ray); // Intersection of two planes -> ray vector.
 800288c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002890:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002894:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002898:	4618      	mov	r0, r3
 800289a:	f7ff ff3d 	bl	8002718 <vec_cross_product>
    float len = vec_length(ray);
 800289e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7ff ff8d 	bl	80027c2 <vec_length>
 80028a8:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
    arm_scale_f32(ray, 1/len, ray, VEC3D_SIZE); // Normalize ray length.
 80028ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80028b0:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80028b4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80028b8:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80028bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80028c0:	2203      	movs	r2, #3
 80028c2:	eeb0 0a66 	vmov.f32	s0, s13
 80028c6:	4618      	mov	r0, r3
 80028c8:	f013 fa20 	bl	8015d0c <arm_scale_f32>

    arm_matrix_instance_f32 source_rotation_matrix = {3, 3, (const float*) bs->mat};
 80028cc:	2303      	movs	r3, #3
 80028ce:	873b      	strh	r3, [r7, #56]	; 0x38
 80028d0:	2303      	movs	r3, #3
 80028d2:	877b      	strh	r3, [r7, #58]	; 0x3a
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	330c      	adds	r3, #12
 80028d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    arm_matrix_instance_f32 ray_vec = {3, 1, ray};
 80028da:	2303      	movs	r3, #3
 80028dc:	863b      	strh	r3, [r7, #48]	; 0x30
 80028de:	2301      	movs	r3, #1
 80028e0:	867b      	strh	r3, [r7, #50]	; 0x32
 80028e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80028e6:	637b      	str	r3, [r7, #52]	; 0x34
    arm_matrix_instance_f32 ray_rotated_vec = {3, 1, res};
 80028e8:	2303      	movs	r3, #3
 80028ea:	853b      	strh	r3, [r7, #40]	; 0x28
 80028ec:	2301      	movs	r3, #1
 80028ee:	857b      	strh	r3, [r7, #42]	; 0x2a
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    arm_mat_mult_f32(&source_rotation_matrix, &ray_vec, &ray_rotated_vec);
 80028f4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80028f8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80028fc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002900:	4618      	mov	r0, r3
 8002902:	f013 f879 	bl	80159f8 <arm_mat_mult_f32>

    // TODO: Make geometry adjustments within base station.
    float rotated_origin_delta[VEC3D_SIZE] = {};
 8002906:	f107 031c 	add.w	r3, r7, #28
 800290a:	2200      	movs	r2, #0
 800290c:	601a      	str	r2, [r3, #0]
 800290e:	605a      	str	r2, [r3, #4]
 8002910:	609a      	str	r2, [r3, #8]
    //vec3d base_origin_delta = {-0.025f, -0.025f, 0.f};  // Rotors are slightly off center in base station.
    // arm_matrix_instance_f32 origin_vec = {3, 1, base_origin_delta};
    // arm_matrix_instance_f32 origin_rotated_vec = {3, 1, rotated_origin_delta};
    // arm_mat_mult_f32(&source_rotation_matrix, &origin_vec, &origin_rotated_vec);
    arm_add_f32((const float *) bs->origin, rotated_origin_delta, origin, VEC3D_SIZE);
 8002912:	6978      	ldr	r0, [r7, #20]
 8002914:	f107 011c 	add.w	r1, r7, #28
 8002918:	2303      	movs	r3, #3
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	f013 fa92 	bl	8015e44 <arm_add_f32>
}
 8002920:	bf00      	nop
 8002922:	3768      	adds	r7, #104	; 0x68
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <intersect_lines>:


uint8_t intersect_lines(float *orig1, float *vec1, float *orig2, float *vec2, float *res, float *dist) {
 8002928:	b580      	push	{r7, lr}
 800292a:	b098      	sub	sp, #96	; 0x60
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
 8002934:	603b      	str	r3, [r7, #0]
    // Algorithm: http://geomalgorithms.com/a07-_distance.html#Distance-between-Lines

    float w0[VEC3D_SIZE] = {};
 8002936:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800293a:	2200      	movs	r2, #0
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	605a      	str	r2, [r3, #4]
 8002940:	609a      	str	r2, [r3, #8]
    arm_sub_f32((const float *)orig1, (const float *)orig2, w0, VEC3D_SIZE);
 8002942:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002946:	2303      	movs	r3, #3
 8002948:	6879      	ldr	r1, [r7, #4]
 800294a:	68f8      	ldr	r0, [r7, #12]
 800294c:	f013 f984 	bl	8015c58 <arm_sub_f32>

    float a, b, c, d, e;
    arm_dot_prod_f32((const float *)vec1, (const float *)vec1, VEC3D_SIZE, &a);
 8002950:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002954:	2203      	movs	r2, #3
 8002956:	68b9      	ldr	r1, [r7, #8]
 8002958:	68b8      	ldr	r0, [r7, #8]
 800295a:	f013 fa1b 	bl	8015d94 <arm_dot_prod_f32>
    arm_dot_prod_f32((const float *)vec1, (const float *)vec2, VEC3D_SIZE, &b);
 800295e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002962:	2203      	movs	r2, #3
 8002964:	6839      	ldr	r1, [r7, #0]
 8002966:	68b8      	ldr	r0, [r7, #8]
 8002968:	f013 fa14 	bl	8015d94 <arm_dot_prod_f32>
    arm_dot_prod_f32((const float *)vec2, (const float *)vec2, VEC3D_SIZE, &c);
 800296c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002970:	2203      	movs	r2, #3
 8002972:	6839      	ldr	r1, [r7, #0]
 8002974:	6838      	ldr	r0, [r7, #0]
 8002976:	f013 fa0d 	bl	8015d94 <arm_dot_prod_f32>
    arm_dot_prod_f32((const float *)vec1, w0, VEC3D_SIZE, &d);
 800297a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800297e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002982:	2203      	movs	r2, #3
 8002984:	68b8      	ldr	r0, [r7, #8]
 8002986:	f013 fa05 	bl	8015d94 <arm_dot_prod_f32>
    arm_dot_prod_f32((const float *)vec2, w0, VEC3D_SIZE, &e);
 800298a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800298e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002992:	2203      	movs	r2, #3
 8002994:	6838      	ldr	r0, [r7, #0]
 8002996:	f013 f9fd 	bl	8015d94 <arm_dot_prod_f32>

    float denom = a * c - b * b;
 800299a:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800299e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80029a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029a6:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 80029aa:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80029ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029b6:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    if (fabs(denom) < 1e-5f)
 80029ba:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80029be:	eef0 7ae7 	vabs.f32	s15, s15
 80029c2:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8002ae0 <intersect_lines+0x1b8>
 80029c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ce:	d501      	bpl.n	80029d4 <intersect_lines+0xac>
        return 0;
 80029d0:	2300      	movs	r3, #0
 80029d2:	e081      	b.n	8002ad8 <intersect_lines+0x1b0>

    // Closest point to 2nd line on 1st line
    float t1 = (b * e - c * d) / denom;
 80029d4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80029d8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80029dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029e0:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 80029e4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80029e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029ec:	ee77 6a67 	vsub.f32	s13, s14, s15
 80029f0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80029f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029f8:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    float pt1[VEC3D_SIZE] = {};
 80029fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a00:	2200      	movs	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	605a      	str	r2, [r3, #4]
 8002a06:	609a      	str	r2, [r3, #8]
    arm_scale_f32((const float *)vec1, t1, pt1, VEC3D_SIZE);
 8002a08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a0c:	2203      	movs	r2, #3
 8002a0e:	4619      	mov	r1, r3
 8002a10:	ed97 0a16 	vldr	s0, [r7, #88]	; 0x58
 8002a14:	68b8      	ldr	r0, [r7, #8]
 8002a16:	f013 f979 	bl	8015d0c <arm_scale_f32>
    arm_add_f32(pt1, (const float *)orig1, pt1, VEC3D_SIZE);
 8002a1a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a1e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002a22:	2303      	movs	r3, #3
 8002a24:	68f9      	ldr	r1, [r7, #12]
 8002a26:	f013 fa0d 	bl	8015e44 <arm_add_f32>

    // Closest point to 1st line on 2nd line
    float t2 = (a * e - b * d) / denom;
 8002a2a:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002a2e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002a32:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a36:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8002a3a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002a3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a42:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002a46:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002a4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a4e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    float pt2[VEC3D_SIZE] = {};
 8002a52:	f107 031c 	add.w	r3, r7, #28
 8002a56:	2200      	movs	r2, #0
 8002a58:	601a      	str	r2, [r3, #0]
 8002a5a:	605a      	str	r2, [r3, #4]
 8002a5c:	609a      	str	r2, [r3, #8]
    arm_scale_f32((const float *)vec2, t2, pt2, VEC3D_SIZE);
 8002a5e:	f107 031c 	add.w	r3, r7, #28
 8002a62:	2203      	movs	r2, #3
 8002a64:	4619      	mov	r1, r3
 8002a66:	ed97 0a15 	vldr	s0, [r7, #84]	; 0x54
 8002a6a:	6838      	ldr	r0, [r7, #0]
 8002a6c:	f013 f94e 	bl	8015d0c <arm_scale_f32>
    arm_add_f32(pt2, (const float *)orig2, pt2, VEC3D_SIZE);
 8002a70:	f107 021c 	add.w	r2, r7, #28
 8002a74:	f107 001c 	add.w	r0, r7, #28
 8002a78:	2303      	movs	r3, #3
 8002a7a:	6879      	ldr	r1, [r7, #4]
 8002a7c:	f013 f9e2 	bl	8015e44 <arm_add_f32>

    // Result is in the middle
    float tmp[VEC3D_SIZE] = {};
 8002a80:	f107 0310 	add.w	r3, r7, #16
 8002a84:	2200      	movs	r2, #0
 8002a86:	601a      	str	r2, [r3, #0]
 8002a88:	605a      	str	r2, [r3, #4]
 8002a8a:	609a      	str	r2, [r3, #8]
    arm_add_f32(pt1, pt2, tmp, VEC3D_SIZE);
 8002a8c:	f107 0210 	add.w	r2, r7, #16
 8002a90:	f107 011c 	add.w	r1, r7, #28
 8002a94:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002a98:	2303      	movs	r3, #3
 8002a9a:	f013 f9d3 	bl	8015e44 <arm_add_f32>
    arm_scale_f32(tmp, 0.5f, res, VEC3D_SIZE);
 8002a9e:	f107 0310 	add.w	r3, r7, #16
 8002aa2:	2203      	movs	r2, #3
 8002aa4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002aa6:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f013 f92e 	bl	8015d0c <arm_scale_f32>

    // Dist is distance between pt1 and pt2
    arm_sub_f32(pt1, pt2, tmp, VEC3D_SIZE);
 8002ab0:	f107 0210 	add.w	r2, r7, #16
 8002ab4:	f107 011c 	add.w	r1, r7, #28
 8002ab8:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002abc:	2303      	movs	r3, #3
 8002abe:	f013 f8cb 	bl	8015c58 <arm_sub_f32>
    *dist = vec_length(tmp);
 8002ac2:	f107 0310 	add.w	r3, r7, #16
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7ff fe7b 	bl	80027c2 <vec_length>
 8002acc:	eef0 7a40 	vmov.f32	s15, s0
 8002ad0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ad2:	edc3 7a00 	vstr	s15, [r3]

    return 1;
 8002ad6:	2301      	movs	r3, #1
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3760      	adds	r7, #96	; 0x60
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	3727c5ac 	.word	0x3727c5ac

08002ae4 <LL_AHB2_GRP1_EnableClock>:
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002aec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002af0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002af2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002afc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b00:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4013      	ands	r3, r2
 8002b06:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002b08:	68fb      	ldr	r3, [r7, #12]
}
 8002b0a:	bf00      	nop
 8002b0c:	3714      	adds	r7, #20
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
	...

08002b18 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b1e:	1d3b      	adds	r3, r7, #4
 8002b20:	2200      	movs	r2, #0
 8002b22:	601a      	str	r2, [r3, #0]
 8002b24:	605a      	str	r2, [r3, #4]
 8002b26:	609a      	str	r2, [r3, #8]
 8002b28:	60da      	str	r2, [r3, #12]
 8002b2a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b2c:	2004      	movs	r0, #4
 8002b2e:	f7ff ffd9 	bl	8002ae4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b32:	2080      	movs	r0, #128	; 0x80
 8002b34:	f7ff ffd6 	bl	8002ae4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b38:	2002      	movs	r0, #2
 8002b3a:	f7ff ffd3 	bl	8002ae4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b3e:	2001      	movs	r0, #1
 8002b40:	f7ff ffd0 	bl	8002ae4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b44:	2010      	movs	r0, #16
 8002b46:	f7ff ffcd 	bl	8002ae4 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002b4a:	2308      	movs	r3, #8
 8002b4c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b52:	2300      	movs	r3, #0
 8002b54:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002b56:	1d3b      	adds	r3, r7, #4
 8002b58:	4619      	mov	r1, r3
 8002b5a:	4829      	ldr	r0, [pc, #164]	; (8002c00 <MX_GPIO_Init+0xe8>)
 8002b5c:	f005 fede 	bl	800891c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 PB0 PB1 
                           PB4 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0|GPIO_PIN_1 
 8002b60:	f240 33f3 	movw	r3, #1011	; 0x3f3
 8002b64:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b66:	2303      	movs	r3, #3
 8002b68:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b6e:	1d3b      	adds	r3, r7, #4
 8002b70:	4619      	mov	r1, r3
 8002b72:	4824      	ldr	r0, [pc, #144]	; (8002c04 <MX_GPIO_Init+0xec>)
 8002b74:	f005 fed2 	bl	800891c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 PA6 
                           PA7 PA8 PA11 PA12 
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6 
 8002b78:	f649 13dc 	movw	r3, #39388	; 0x99dc
 8002b7c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12 
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b82:	2300      	movs	r3, #0
 8002b84:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b86:	1d3b      	adds	r3, r7, #4
 8002b88:	4619      	mov	r1, r3
 8002b8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b8e:	f005 fec5 	bl	800891c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8002b92:	2320      	movs	r3, #32
 8002b94:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002b96:	4b1c      	ldr	r3, [pc, #112]	; (8002c08 <MX_GPIO_Init+0xf0>)
 8002b98:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8002b9e:	1d3b      	adds	r3, r7, #4
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ba6:	f005 feb9 	bl	800891c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXPANSION_INT_Pin;
 8002baa:	2304      	movs	r3, #4
 8002bac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002bae:	4b17      	ldr	r3, [pc, #92]	; (8002c0c <MX_GPIO_Init+0xf4>)
 8002bb0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(EXPANSION_INT_GPIO_Port, &GPIO_InitStruct);
 8002bb6:	1d3b      	adds	r3, r7, #4
 8002bb8:	4619      	mov	r1, r3
 8002bba:	4812      	ldr	r0, [pc, #72]	; (8002c04 <MX_GPIO_Init+0xec>)
 8002bbc:	f005 feae 	bl	800891c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002bc0:	2310      	movs	r3, #16
 8002bc2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002bcc:	1d3b      	adds	r3, r7, #4
 8002bce:	4619      	mov	r1, r3
 8002bd0:	480f      	ldr	r0, [pc, #60]	; (8002c10 <MX_GPIO_Init+0xf8>)
 8002bd2:	f005 fea3 	bl	800891c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	2105      	movs	r1, #5
 8002bda:	2008      	movs	r0, #8
 8002bdc:	f005 fb17 	bl	800820e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002be0:	2008      	movs	r0, #8
 8002be2:	f005 fb2e 	bl	8008242 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8002be6:	2200      	movs	r2, #0
 8002be8:	2105      	movs	r1, #5
 8002bea:	2017      	movs	r0, #23
 8002bec:	f005 fb0f 	bl	800820e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002bf0:	2017      	movs	r0, #23
 8002bf2:	f005 fb26 	bl	8008242 <HAL_NVIC_EnableIRQ>

}
 8002bf6:	bf00      	nop
 8002bf8:	3718      	adds	r7, #24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	48001c00 	.word	0x48001c00
 8002c04:	48000400 	.word	0x48000400
 8002c08:	10210000 	.word	0x10210000
 8002c0c:	10110000 	.word	0x10110000
 8002c10:	48001000 	.word	0x48001000

08002c14 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002c1c:	4b06      	ldr	r3, [pc, #24]	; (8002c38 <LL_EXTI_EnableIT_0_31+0x24>)
 8002c1e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002c22:	4905      	ldr	r1, [pc, #20]	; (8002c38 <LL_EXTI_EnableIT_0_31+0x24>)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr
 8002c38:	58000800 	.word	0x58000800

08002c3c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002c44:	4b05      	ldr	r3, [pc, #20]	; (8002c5c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	4904      	ldr	r1, [pc, #16]	; (8002c5c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	600b      	str	r3, [r1, #0]

}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr
 8002c5c:	58000800 	.word	0x58000800

08002c60 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002c66:	4b0d      	ldr	r3, [pc, #52]	; (8002c9c <ReadRtcSsrValue+0x3c>)
 8002c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002c6e:	4b0b      	ldr	r3, [pc, #44]	; (8002c9c <ReadRtcSsrValue+0x3c>)
 8002c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8002c76:	e005      	b.n	8002c84 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002c7c:	4b07      	ldr	r3, [pc, #28]	; (8002c9c <ReadRtcSsrValue+0x3c>)
 8002c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d1f5      	bne.n	8002c78 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8002c8c:	683b      	ldr	r3, [r7, #0]
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	40002800 	.word	0x40002800

08002ca0 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	460a      	mov	r2, r1
 8002caa:	71fb      	strb	r3, [r7, #7]
 8002cac:	4613      	mov	r3, r2
 8002cae:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8002cb0:	79ba      	ldrb	r2, [r7, #6]
 8002cb2:	491d      	ldr	r1, [pc, #116]	; (8002d28 <LinkTimerAfter+0x88>)
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	4413      	add	r3, r2
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	440b      	add	r3, r1
 8002cbe:	3315      	adds	r3, #21
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002cc4:	7bfb      	ldrb	r3, [r7, #15]
 8002cc6:	2b06      	cmp	r3, #6
 8002cc8:	d009      	beq.n	8002cde <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8002cca:	7bfa      	ldrb	r2, [r7, #15]
 8002ccc:	4916      	ldr	r1, [pc, #88]	; (8002d28 <LinkTimerAfter+0x88>)
 8002cce:	4613      	mov	r3, r2
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	4413      	add	r3, r2
 8002cd4:	00db      	lsls	r3, r3, #3
 8002cd6:	440b      	add	r3, r1
 8002cd8:	3314      	adds	r3, #20
 8002cda:	79fa      	ldrb	r2, [r7, #7]
 8002cdc:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8002cde:	79fa      	ldrb	r2, [r7, #7]
 8002ce0:	4911      	ldr	r1, [pc, #68]	; (8002d28 <LinkTimerAfter+0x88>)
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	4413      	add	r3, r2
 8002ce8:	00db      	lsls	r3, r3, #3
 8002cea:	440b      	add	r3, r1
 8002cec:	3315      	adds	r3, #21
 8002cee:	7bfa      	ldrb	r2, [r7, #15]
 8002cf0:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8002cf2:	79fa      	ldrb	r2, [r7, #7]
 8002cf4:	490c      	ldr	r1, [pc, #48]	; (8002d28 <LinkTimerAfter+0x88>)
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	4413      	add	r3, r2
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	440b      	add	r3, r1
 8002d00:	3314      	adds	r3, #20
 8002d02:	79ba      	ldrb	r2, [r7, #6]
 8002d04:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8002d06:	79ba      	ldrb	r2, [r7, #6]
 8002d08:	4907      	ldr	r1, [pc, #28]	; (8002d28 <LinkTimerAfter+0x88>)
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	4413      	add	r3, r2
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	440b      	add	r3, r1
 8002d14:	3315      	adds	r3, #21
 8002d16:	79fa      	ldrb	r2, [r7, #7]
 8002d18:	701a      	strb	r2, [r3, #0]

  return;
 8002d1a:	bf00      	nop
}
 8002d1c:	3714      	adds	r7, #20
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	20000160 	.word	0x20000160

08002d2c <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	4603      	mov	r3, r0
 8002d34:	460a      	mov	r2, r1
 8002d36:	71fb      	strb	r3, [r7, #7]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8002d3c:	4b29      	ldr	r3, [pc, #164]	; (8002de4 <LinkTimerBefore+0xb8>)
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	79ba      	ldrb	r2, [r7, #6]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d032      	beq.n	8002dae <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8002d48:	79ba      	ldrb	r2, [r7, #6]
 8002d4a:	4927      	ldr	r1, [pc, #156]	; (8002de8 <LinkTimerBefore+0xbc>)
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	4413      	add	r3, r2
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	440b      	add	r3, r1
 8002d56:	3314      	adds	r3, #20
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8002d5c:	7bfa      	ldrb	r2, [r7, #15]
 8002d5e:	4922      	ldr	r1, [pc, #136]	; (8002de8 <LinkTimerBefore+0xbc>)
 8002d60:	4613      	mov	r3, r2
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	4413      	add	r3, r2
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	440b      	add	r3, r1
 8002d6a:	3315      	adds	r3, #21
 8002d6c:	79fa      	ldrb	r2, [r7, #7]
 8002d6e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8002d70:	79fa      	ldrb	r2, [r7, #7]
 8002d72:	491d      	ldr	r1, [pc, #116]	; (8002de8 <LinkTimerBefore+0xbc>)
 8002d74:	4613      	mov	r3, r2
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	4413      	add	r3, r2
 8002d7a:	00db      	lsls	r3, r3, #3
 8002d7c:	440b      	add	r3, r1
 8002d7e:	3315      	adds	r3, #21
 8002d80:	79ba      	ldrb	r2, [r7, #6]
 8002d82:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8002d84:	79fa      	ldrb	r2, [r7, #7]
 8002d86:	4918      	ldr	r1, [pc, #96]	; (8002de8 <LinkTimerBefore+0xbc>)
 8002d88:	4613      	mov	r3, r2
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	4413      	add	r3, r2
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	440b      	add	r3, r1
 8002d92:	3314      	adds	r3, #20
 8002d94:	7bfa      	ldrb	r2, [r7, #15]
 8002d96:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002d98:	79ba      	ldrb	r2, [r7, #6]
 8002d9a:	4913      	ldr	r1, [pc, #76]	; (8002de8 <LinkTimerBefore+0xbc>)
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	4413      	add	r3, r2
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	440b      	add	r3, r1
 8002da6:	3314      	adds	r3, #20
 8002da8:	79fa      	ldrb	r2, [r7, #7]
 8002daa:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8002dac:	e014      	b.n	8002dd8 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8002dae:	79fa      	ldrb	r2, [r7, #7]
 8002db0:	490d      	ldr	r1, [pc, #52]	; (8002de8 <LinkTimerBefore+0xbc>)
 8002db2:	4613      	mov	r3, r2
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	4413      	add	r3, r2
 8002db8:	00db      	lsls	r3, r3, #3
 8002dba:	440b      	add	r3, r1
 8002dbc:	3315      	adds	r3, #21
 8002dbe:	79ba      	ldrb	r2, [r7, #6]
 8002dc0:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002dc2:	79ba      	ldrb	r2, [r7, #6]
 8002dc4:	4908      	ldr	r1, [pc, #32]	; (8002de8 <LinkTimerBefore+0xbc>)
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	4413      	add	r3, r2
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	440b      	add	r3, r1
 8002dd0:	3314      	adds	r3, #20
 8002dd2:	79fa      	ldrb	r2, [r7, #7]
 8002dd4:	701a      	strb	r2, [r3, #0]
  return;
 8002dd6:	bf00      	nop
}
 8002dd8:	3714      	adds	r7, #20
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	200001f0 	.word	0x200001f0
 8002de8:	20000160 	.word	0x20000160

08002dec <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	4603      	mov	r3, r0
 8002df4:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002df6:	4b4e      	ldr	r3, [pc, #312]	; (8002f30 <linkTimer+0x144>)
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	2b06      	cmp	r3, #6
 8002dfe:	d118      	bne.n	8002e32 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002e00:	4b4b      	ldr	r3, [pc, #300]	; (8002f30 <linkTimer+0x144>)
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	b2da      	uxtb	r2, r3
 8002e06:	4b4b      	ldr	r3, [pc, #300]	; (8002f34 <linkTimer+0x148>)
 8002e08:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8002e0a:	4a49      	ldr	r2, [pc, #292]	; (8002f30 <linkTimer+0x144>)
 8002e0c:	79fb      	ldrb	r3, [r7, #7]
 8002e0e:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8002e10:	79fa      	ldrb	r2, [r7, #7]
 8002e12:	4949      	ldr	r1, [pc, #292]	; (8002f38 <linkTimer+0x14c>)
 8002e14:	4613      	mov	r3, r2
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	4413      	add	r3, r2
 8002e1a:	00db      	lsls	r3, r3, #3
 8002e1c:	440b      	add	r3, r1
 8002e1e:	3315      	adds	r3, #21
 8002e20:	2206      	movs	r2, #6
 8002e22:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002e24:	4b45      	ldr	r3, [pc, #276]	; (8002f3c <linkTimer+0x150>)
 8002e26:	f04f 32ff 	mov.w	r2, #4294967295
 8002e2a:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	81fb      	strh	r3, [r7, #14]
 8002e30:	e078      	b.n	8002f24 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8002e32:	f000 f909 	bl	8003048 <ReturnTimeElapsed>
 8002e36:	4603      	mov	r3, r0
 8002e38:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8002e3a:	79fa      	ldrb	r2, [r7, #7]
 8002e3c:	493e      	ldr	r1, [pc, #248]	; (8002f38 <linkTimer+0x14c>)
 8002e3e:	4613      	mov	r3, r2
 8002e40:	005b      	lsls	r3, r3, #1
 8002e42:	4413      	add	r3, r2
 8002e44:	00db      	lsls	r3, r3, #3
 8002e46:	440b      	add	r3, r1
 8002e48:	3308      	adds	r3, #8
 8002e4a:	6819      	ldr	r1, [r3, #0]
 8002e4c:	89fb      	ldrh	r3, [r7, #14]
 8002e4e:	79fa      	ldrb	r2, [r7, #7]
 8002e50:	4419      	add	r1, r3
 8002e52:	4839      	ldr	r0, [pc, #228]	; (8002f38 <linkTimer+0x14c>)
 8002e54:	4613      	mov	r3, r2
 8002e56:	005b      	lsls	r3, r3, #1
 8002e58:	4413      	add	r3, r2
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	4403      	add	r3, r0
 8002e5e:	3308      	adds	r3, #8
 8002e60:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8002e62:	79fa      	ldrb	r2, [r7, #7]
 8002e64:	4934      	ldr	r1, [pc, #208]	; (8002f38 <linkTimer+0x14c>)
 8002e66:	4613      	mov	r3, r2
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	4413      	add	r3, r2
 8002e6c:	00db      	lsls	r3, r3, #3
 8002e6e:	440b      	add	r3, r1
 8002e70:	3308      	adds	r3, #8
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8002e76:	4b2e      	ldr	r3, [pc, #184]	; (8002f30 <linkTimer+0x144>)
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	4a2e      	ldr	r2, [pc, #184]	; (8002f38 <linkTimer+0x14c>)
 8002e80:	460b      	mov	r3, r1
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	440b      	add	r3, r1
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	4413      	add	r3, r2
 8002e8a:	3308      	adds	r3, #8
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68ba      	ldr	r2, [r7, #8]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d337      	bcc.n	8002f04 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8002e94:	4b26      	ldr	r3, [pc, #152]	; (8002f30 <linkTimer+0x144>)
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8002e9a:	7b7a      	ldrb	r2, [r7, #13]
 8002e9c:	4926      	ldr	r1, [pc, #152]	; (8002f38 <linkTimer+0x14c>)
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	4413      	add	r3, r2
 8002ea4:	00db      	lsls	r3, r3, #3
 8002ea6:	440b      	add	r3, r1
 8002ea8:	3315      	adds	r3, #21
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8002eae:	e013      	b.n	8002ed8 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8002eb0:	7b7a      	ldrb	r2, [r7, #13]
 8002eb2:	4921      	ldr	r1, [pc, #132]	; (8002f38 <linkTimer+0x14c>)
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	005b      	lsls	r3, r3, #1
 8002eb8:	4413      	add	r3, r2
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	440b      	add	r3, r1
 8002ebe:	3315      	adds	r3, #21
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8002ec4:	7b7a      	ldrb	r2, [r7, #13]
 8002ec6:	491c      	ldr	r1, [pc, #112]	; (8002f38 <linkTimer+0x14c>)
 8002ec8:	4613      	mov	r3, r2
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	4413      	add	r3, r2
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	440b      	add	r3, r1
 8002ed2:	3315      	adds	r3, #21
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8002ed8:	7b3b      	ldrb	r3, [r7, #12]
 8002eda:	2b06      	cmp	r3, #6
 8002edc:	d00b      	beq.n	8002ef6 <linkTimer+0x10a>
 8002ede:	7b3a      	ldrb	r2, [r7, #12]
 8002ee0:	4915      	ldr	r1, [pc, #84]	; (8002f38 <linkTimer+0x14c>)
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	005b      	lsls	r3, r3, #1
 8002ee6:	4413      	add	r3, r2
 8002ee8:	00db      	lsls	r3, r3, #3
 8002eea:	440b      	add	r3, r1
 8002eec:	3308      	adds	r3, #8
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68ba      	ldr	r2, [r7, #8]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d2dc      	bcs.n	8002eb0 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8002ef6:	7b7a      	ldrb	r2, [r7, #13]
 8002ef8:	79fb      	ldrb	r3, [r7, #7]
 8002efa:	4611      	mov	r1, r2
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7ff fecf 	bl	8002ca0 <LinkTimerAfter>
 8002f02:	e00f      	b.n	8002f24 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8002f04:	4b0a      	ldr	r3, [pc, #40]	; (8002f30 <linkTimer+0x144>)
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	b2da      	uxtb	r2, r3
 8002f0a:	79fb      	ldrb	r3, [r7, #7]
 8002f0c:	4611      	mov	r1, r2
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7ff ff0c 	bl	8002d2c <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8002f14:	4b06      	ldr	r3, [pc, #24]	; (8002f30 <linkTimer+0x144>)
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	b2da      	uxtb	r2, r3
 8002f1a:	4b06      	ldr	r3, [pc, #24]	; (8002f34 <linkTimer+0x148>)
 8002f1c:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8002f1e:	4a04      	ldr	r2, [pc, #16]	; (8002f30 <linkTimer+0x144>)
 8002f20:	79fb      	ldrb	r3, [r7, #7]
 8002f22:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8002f24:	89fb      	ldrh	r3, [r7, #14]
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	200001f0 	.word	0x200001f0
 8002f34:	200001f1 	.word	0x200001f1
 8002f38:	20000160 	.word	0x20000160
 8002f3c:	200001f4 	.word	0x200001f4

08002f40 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	4603      	mov	r3, r0
 8002f48:	460a      	mov	r2, r1
 8002f4a:	71fb      	strb	r3, [r7, #7]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8002f50:	4b39      	ldr	r3, [pc, #228]	; (8003038 <UnlinkTimer+0xf8>)
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	79fa      	ldrb	r2, [r7, #7]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d111      	bne.n	8002f80 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002f5c:	4b36      	ldr	r3, [pc, #216]	; (8003038 <UnlinkTimer+0xf8>)
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	b2da      	uxtb	r2, r3
 8002f62:	4b36      	ldr	r3, [pc, #216]	; (800303c <UnlinkTimer+0xfc>)
 8002f64:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8002f66:	79fa      	ldrb	r2, [r7, #7]
 8002f68:	4935      	ldr	r1, [pc, #212]	; (8003040 <UnlinkTimer+0x100>)
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	4413      	add	r3, r2
 8002f70:	00db      	lsls	r3, r3, #3
 8002f72:	440b      	add	r3, r1
 8002f74:	3315      	adds	r3, #21
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	b2da      	uxtb	r2, r3
 8002f7a:	4b2f      	ldr	r3, [pc, #188]	; (8003038 <UnlinkTimer+0xf8>)
 8002f7c:	701a      	strb	r2, [r3, #0]
 8002f7e:	e03e      	b.n	8002ffe <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8002f80:	79fa      	ldrb	r2, [r7, #7]
 8002f82:	492f      	ldr	r1, [pc, #188]	; (8003040 <UnlinkTimer+0x100>)
 8002f84:	4613      	mov	r3, r2
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	4413      	add	r3, r2
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	440b      	add	r3, r1
 8002f8e:	3314      	adds	r3, #20
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8002f94:	79fa      	ldrb	r2, [r7, #7]
 8002f96:	492a      	ldr	r1, [pc, #168]	; (8003040 <UnlinkTimer+0x100>)
 8002f98:	4613      	mov	r3, r2
 8002f9a:	005b      	lsls	r3, r3, #1
 8002f9c:	4413      	add	r3, r2
 8002f9e:	00db      	lsls	r3, r3, #3
 8002fa0:	440b      	add	r3, r1
 8002fa2:	3315      	adds	r3, #21
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8002fa8:	79f9      	ldrb	r1, [r7, #7]
 8002faa:	7bfa      	ldrb	r2, [r7, #15]
 8002fac:	4824      	ldr	r0, [pc, #144]	; (8003040 <UnlinkTimer+0x100>)
 8002fae:	460b      	mov	r3, r1
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	440b      	add	r3, r1
 8002fb4:	00db      	lsls	r3, r3, #3
 8002fb6:	4403      	add	r3, r0
 8002fb8:	3315      	adds	r3, #21
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	b2d8      	uxtb	r0, r3
 8002fbe:	4920      	ldr	r1, [pc, #128]	; (8003040 <UnlinkTimer+0x100>)
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	005b      	lsls	r3, r3, #1
 8002fc4:	4413      	add	r3, r2
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	440b      	add	r3, r1
 8002fca:	3315      	adds	r3, #21
 8002fcc:	4602      	mov	r2, r0
 8002fce:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002fd0:	7bbb      	ldrb	r3, [r7, #14]
 8002fd2:	2b06      	cmp	r3, #6
 8002fd4:	d013      	beq.n	8002ffe <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8002fd6:	79f9      	ldrb	r1, [r7, #7]
 8002fd8:	7bba      	ldrb	r2, [r7, #14]
 8002fda:	4819      	ldr	r0, [pc, #100]	; (8003040 <UnlinkTimer+0x100>)
 8002fdc:	460b      	mov	r3, r1
 8002fde:	005b      	lsls	r3, r3, #1
 8002fe0:	440b      	add	r3, r1
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	4403      	add	r3, r0
 8002fe6:	3314      	adds	r3, #20
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	b2d8      	uxtb	r0, r3
 8002fec:	4914      	ldr	r1, [pc, #80]	; (8003040 <UnlinkTimer+0x100>)
 8002fee:	4613      	mov	r3, r2
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	4413      	add	r3, r2
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	440b      	add	r3, r1
 8002ff8:	3314      	adds	r3, #20
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8002ffe:	79fa      	ldrb	r2, [r7, #7]
 8003000:	490f      	ldr	r1, [pc, #60]	; (8003040 <UnlinkTimer+0x100>)
 8003002:	4613      	mov	r3, r2
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	4413      	add	r3, r2
 8003008:	00db      	lsls	r3, r3, #3
 800300a:	440b      	add	r3, r1
 800300c:	330c      	adds	r3, #12
 800300e:	2201      	movs	r2, #1
 8003010:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8003012:	4b09      	ldr	r3, [pc, #36]	; (8003038 <UnlinkTimer+0xf8>)
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	b2db      	uxtb	r3, r3
 8003018:	2b06      	cmp	r3, #6
 800301a:	d107      	bne.n	800302c <UnlinkTimer+0xec>
 800301c:	79bb      	ldrb	r3, [r7, #6]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d104      	bne.n	800302c <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8003022:	4b08      	ldr	r3, [pc, #32]	; (8003044 <UnlinkTimer+0x104>)
 8003024:	f04f 32ff 	mov.w	r2, #4294967295
 8003028:	601a      	str	r2, [r3, #0]
  }

  return;
 800302a:	bf00      	nop
 800302c:	bf00      	nop
}
 800302e:	3714      	adds	r7, #20
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr
 8003038:	200001f0 	.word	0x200001f0
 800303c:	200001f1 	.word	0x200001f1
 8003040:	20000160 	.word	0x20000160
 8003044:	200001f4 	.word	0x200001f4

08003048 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 800304e:	4b1a      	ldr	r3, [pc, #104]	; (80030b8 <ReturnTimeElapsed+0x70>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003056:	d026      	beq.n	80030a6 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8003058:	f7ff fe02 	bl	8002c60 <ReadRtcSsrValue>
 800305c:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 800305e:	4b16      	ldr	r3, [pc, #88]	; (80030b8 <ReturnTimeElapsed+0x70>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	429a      	cmp	r2, r3
 8003066:	d805      	bhi.n	8003074 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8003068:	4b13      	ldr	r3, [pc, #76]	; (80030b8 <ReturnTimeElapsed+0x70>)
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	607b      	str	r3, [r7, #4]
 8003072:	e00a      	b.n	800308a <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8003074:	4b11      	ldr	r3, [pc, #68]	; (80030bc <ReturnTimeElapsed+0x74>)
 8003076:	881b      	ldrh	r3, [r3, #0]
 8003078:	461a      	mov	r2, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8003080:	4b0d      	ldr	r3, [pc, #52]	; (80030b8 <ReturnTimeElapsed+0x70>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	683a      	ldr	r2, [r7, #0]
 8003086:	4413      	add	r3, r2
 8003088:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 800308a:	4b0d      	ldr	r3, [pc, #52]	; (80030c0 <ReturnTimeElapsed+0x78>)
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	461a      	mov	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	fb02 f303 	mul.w	r3, r2, r3
 8003096:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8003098:	4b0a      	ldr	r3, [pc, #40]	; (80030c4 <ReturnTimeElapsed+0x7c>)
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	461a      	mov	r2, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	40d3      	lsrs	r3, r2
 80030a2:	607b      	str	r3, [r7, #4]
 80030a4:	e001      	b.n	80030aa <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 80030a6:	2300      	movs	r3, #0
 80030a8:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	b29b      	uxth	r3, r3
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	200001f4 	.word	0x200001f4
 80030bc:	20000ac6 	.word	0x20000ac6
 80030c0:	20000ac5 	.word	0x20000ac5
 80030c4:	20000ac4 	.word	0x20000ac4

080030c8 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	4603      	mov	r3, r0
 80030d0:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 80030d2:	88fb      	ldrh	r3, [r7, #6]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d108      	bne.n	80030ea <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80030d8:	f7ff fdc2 	bl	8002c60 <ReadRtcSsrValue>
 80030dc:	4602      	mov	r2, r0
 80030de:	4b24      	ldr	r3, [pc, #144]	; (8003170 <RestartWakeupCounter+0xa8>)
 80030e0:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80030e2:	2003      	movs	r0, #3
 80030e4:	f005 f8cd 	bl	8008282 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 80030e8:	e03e      	b.n	8003168 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 80030ea:	88fb      	ldrh	r3, [r7, #6]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d803      	bhi.n	80030f8 <RestartWakeupCounter+0x30>
 80030f0:	4b20      	ldr	r3, [pc, #128]	; (8003174 <RestartWakeupCounter+0xac>)
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d002      	beq.n	80030fe <RestartWakeupCounter+0x36>
      Value -= 1;
 80030f8:	88fb      	ldrh	r3, [r7, #6]
 80030fa:	3b01      	subs	r3, #1
 80030fc:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80030fe:	bf00      	nop
 8003100:	4b1d      	ldr	r3, [pc, #116]	; (8003178 <RestartWakeupCounter+0xb0>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	f003 0304 	and.w	r3, r3, #4
 800310c:	2b00      	cmp	r3, #0
 800310e:	d0f7      	beq.n	8003100 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8003110:	4b19      	ldr	r3, [pc, #100]	; (8003178 <RestartWakeupCounter+0xb0>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	b2da      	uxtb	r2, r3
 800311a:	4b17      	ldr	r3, [pc, #92]	; (8003178 <RestartWakeupCounter+0xb0>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003124:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8003126:	4b15      	ldr	r3, [pc, #84]	; (800317c <RestartWakeupCounter+0xb4>)
 8003128:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800312c:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800312e:	2003      	movs	r0, #3
 8003130:	f005 f8b5 	bl	800829e <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8003134:	4b12      	ldr	r3, [pc, #72]	; (8003180 <RestartWakeupCounter+0xb8>)
 8003136:	695b      	ldr	r3, [r3, #20]
 8003138:	0c1b      	lsrs	r3, r3, #16
 800313a:	041b      	lsls	r3, r3, #16
 800313c:	88fa      	ldrh	r2, [r7, #6]
 800313e:	4910      	ldr	r1, [pc, #64]	; (8003180 <RestartWakeupCounter+0xb8>)
 8003140:	4313      	orrs	r3, r2
 8003142:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8003144:	f7ff fd8c 	bl	8002c60 <ReadRtcSsrValue>
 8003148:	4602      	mov	r2, r0
 800314a:	4b09      	ldr	r3, [pc, #36]	; (8003170 <RestartWakeupCounter+0xa8>)
 800314c:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 800314e:	4b0a      	ldr	r3, [pc, #40]	; (8003178 <RestartWakeupCounter+0xb0>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	689a      	ldr	r2, [r3, #8]
 8003156:	4b08      	ldr	r3, [pc, #32]	; (8003178 <RestartWakeupCounter+0xb0>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003160:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8003162:	f3af 8000 	nop.w
  return ;
 8003166:	bf00      	nop
}
 8003168:	3708      	adds	r7, #8
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	200001f4 	.word	0x200001f4
 8003174:	20000ac4 	.word	0x20000ac4
 8003178:	20000ac0 	.word	0x20000ac0
 800317c:	58000800 	.word	0x58000800
 8003180:	40002800 	.word	0x40002800

08003184 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800318a:	4b47      	ldr	r3, [pc, #284]	; (80032a8 <RescheduleTimerList+0x124>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003192:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003196:	d108      	bne.n	80031aa <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8003198:	bf00      	nop
 800319a:	4b44      	ldr	r3, [pc, #272]	; (80032ac <RescheduleTimerList+0x128>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	f003 0304 	and.w	r3, r3, #4
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1f7      	bne.n	800319a <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 80031aa:	4b40      	ldr	r3, [pc, #256]	; (80032ac <RescheduleTimerList+0x128>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	689a      	ldr	r2, [r3, #8]
 80031b2:	4b3e      	ldr	r3, [pc, #248]	; (80032ac <RescheduleTimerList+0x128>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031bc:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 80031be:	4b3c      	ldr	r3, [pc, #240]	; (80032b0 <RescheduleTimerList+0x12c>)
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 80031c4:	7bfa      	ldrb	r2, [r7, #15]
 80031c6:	493b      	ldr	r1, [pc, #236]	; (80032b4 <RescheduleTimerList+0x130>)
 80031c8:	4613      	mov	r3, r2
 80031ca:	005b      	lsls	r3, r3, #1
 80031cc:	4413      	add	r3, r2
 80031ce:	00db      	lsls	r3, r3, #3
 80031d0:	440b      	add	r3, r1
 80031d2:	3308      	adds	r3, #8
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 80031d8:	f7ff ff36 	bl	8003048 <ReturnTimeElapsed>
 80031dc:	4603      	mov	r3, r0
 80031de:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 80031e0:	88fb      	ldrh	r3, [r7, #6]
 80031e2:	68ba      	ldr	r2, [r7, #8]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d205      	bcs.n	80031f4 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 80031e8:	2300      	movs	r3, #0
 80031ea:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80031ec:	4b32      	ldr	r3, [pc, #200]	; (80032b8 <RescheduleTimerList+0x134>)
 80031ee:	2201      	movs	r2, #1
 80031f0:	701a      	strb	r2, [r3, #0]
 80031f2:	e04d      	b.n	8003290 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 80031f4:	88fb      	ldrh	r3, [r7, #6]
 80031f6:	4a31      	ldr	r2, [pc, #196]	; (80032bc <RescheduleTimerList+0x138>)
 80031f8:	8812      	ldrh	r2, [r2, #0]
 80031fa:	b292      	uxth	r2, r2
 80031fc:	4413      	add	r3, r2
 80031fe:	461a      	mov	r2, r3
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	4293      	cmp	r3, r2
 8003204:	d906      	bls.n	8003214 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8003206:	4b2d      	ldr	r3, [pc, #180]	; (80032bc <RescheduleTimerList+0x138>)
 8003208:	881b      	ldrh	r3, [r3, #0]
 800320a:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 800320c:	4b2a      	ldr	r3, [pc, #168]	; (80032b8 <RescheduleTimerList+0x134>)
 800320e:	2200      	movs	r2, #0
 8003210:	701a      	strb	r2, [r3, #0]
 8003212:	e03d      	b.n	8003290 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	b29a      	uxth	r2, r3
 8003218:	88fb      	ldrh	r3, [r7, #6]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800321e:	4b26      	ldr	r3, [pc, #152]	; (80032b8 <RescheduleTimerList+0x134>)
 8003220:	2201      	movs	r2, #1
 8003222:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003224:	e034      	b.n	8003290 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8003226:	7bfa      	ldrb	r2, [r7, #15]
 8003228:	4922      	ldr	r1, [pc, #136]	; (80032b4 <RescheduleTimerList+0x130>)
 800322a:	4613      	mov	r3, r2
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	4413      	add	r3, r2
 8003230:	00db      	lsls	r3, r3, #3
 8003232:	440b      	add	r3, r1
 8003234:	3308      	adds	r3, #8
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	88fb      	ldrh	r3, [r7, #6]
 800323a:	429a      	cmp	r2, r3
 800323c:	d20a      	bcs.n	8003254 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 800323e:	7bfa      	ldrb	r2, [r7, #15]
 8003240:	491c      	ldr	r1, [pc, #112]	; (80032b4 <RescheduleTimerList+0x130>)
 8003242:	4613      	mov	r3, r2
 8003244:	005b      	lsls	r3, r3, #1
 8003246:	4413      	add	r3, r2
 8003248:	00db      	lsls	r3, r3, #3
 800324a:	440b      	add	r3, r1
 800324c:	3308      	adds	r3, #8
 800324e:	2200      	movs	r2, #0
 8003250:	601a      	str	r2, [r3, #0]
 8003252:	e013      	b.n	800327c <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8003254:	7bfa      	ldrb	r2, [r7, #15]
 8003256:	4917      	ldr	r1, [pc, #92]	; (80032b4 <RescheduleTimerList+0x130>)
 8003258:	4613      	mov	r3, r2
 800325a:	005b      	lsls	r3, r3, #1
 800325c:	4413      	add	r3, r2
 800325e:	00db      	lsls	r3, r3, #3
 8003260:	440b      	add	r3, r1
 8003262:	3308      	adds	r3, #8
 8003264:	6819      	ldr	r1, [r3, #0]
 8003266:	88fb      	ldrh	r3, [r7, #6]
 8003268:	7bfa      	ldrb	r2, [r7, #15]
 800326a:	1ac9      	subs	r1, r1, r3
 800326c:	4811      	ldr	r0, [pc, #68]	; (80032b4 <RescheduleTimerList+0x130>)
 800326e:	4613      	mov	r3, r2
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	4413      	add	r3, r2
 8003274:	00db      	lsls	r3, r3, #3
 8003276:	4403      	add	r3, r0
 8003278:	3308      	adds	r3, #8
 800327a:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 800327c:	7bfa      	ldrb	r2, [r7, #15]
 800327e:	490d      	ldr	r1, [pc, #52]	; (80032b4 <RescheduleTimerList+0x130>)
 8003280:	4613      	mov	r3, r2
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	4413      	add	r3, r2
 8003286:	00db      	lsls	r3, r3, #3
 8003288:	440b      	add	r3, r1
 800328a:	3315      	adds	r3, #21
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003290:	7bfb      	ldrb	r3, [r7, #15]
 8003292:	2b06      	cmp	r3, #6
 8003294:	d1c7      	bne.n	8003226 <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8003296:	89bb      	ldrh	r3, [r7, #12]
 8003298:	4618      	mov	r0, r3
 800329a:	f7ff ff15 	bl	80030c8 <RestartWakeupCounter>

  return ;
 800329e:	bf00      	nop
}
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	40002800 	.word	0x40002800
 80032ac:	20000ac0 	.word	0x20000ac0
 80032b0:	200001f0 	.word	0x200001f0
 80032b4:	20000160 	.word	0x20000160
 80032b8:	200001f8 	.word	0x200001f8
 80032bc:	20000ac8 	.word	0x20000ac8

080032c0 <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b086      	sub	sp, #24
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	4603      	mov	r3, r0
 80032c8:	6039      	str	r1, [r7, #0]
 80032ca:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 80032cc:	4a61      	ldr	r2, [pc, #388]	; (8003454 <HW_TS_Init+0x194>)
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80032d2:	4b60      	ldr	r3, [pc, #384]	; (8003454 <HW_TS_Init+0x194>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	22ca      	movs	r2, #202	; 0xca
 80032da:	625a      	str	r2, [r3, #36]	; 0x24
 80032dc:	4b5d      	ldr	r3, [pc, #372]	; (8003454 <HW_TS_Init+0x194>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2253      	movs	r2, #83	; 0x53
 80032e4:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80032e6:	4b5c      	ldr	r3, [pc, #368]	; (8003458 <HW_TS_Init+0x198>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	4a5b      	ldr	r2, [pc, #364]	; (8003458 <HW_TS_Init+0x198>)
 80032ec:	f043 0320 	orr.w	r3, r3, #32
 80032f0:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80032f2:	4b59      	ldr	r3, [pc, #356]	; (8003458 <HW_TS_Init+0x198>)
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	f003 0307 	and.w	r3, r3, #7
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	f1c3 0304 	rsb	r3, r3, #4
 8003302:	b2da      	uxtb	r2, r3
 8003304:	4b55      	ldr	r3, [pc, #340]	; (800345c <HW_TS_Init+0x19c>)
 8003306:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8003308:	4b53      	ldr	r3, [pc, #332]	; (8003458 <HW_TS_Init+0x198>)
 800330a:	691b      	ldr	r3, [r3, #16]
 800330c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003310:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8003314:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	fa92 f2a2 	rbit	r2, r2
 800331c:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800331e:	68ba      	ldr	r2, [r7, #8]
 8003320:	fab2 f282 	clz	r2, r2
 8003324:	b2d2      	uxtb	r2, r2
 8003326:	40d3      	lsrs	r3, r2
 8003328:	b2db      	uxtb	r3, r3
 800332a:	3301      	adds	r3, #1
 800332c:	b2da      	uxtb	r2, r3
 800332e:	4b4c      	ldr	r3, [pc, #304]	; (8003460 <HW_TS_Init+0x1a0>)
 8003330:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8003332:	4b49      	ldr	r3, [pc, #292]	; (8003458 <HW_TS_Init+0x198>)
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	b29b      	uxth	r3, r3
 8003338:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800333c:	b29b      	uxth	r3, r3
 800333e:	3301      	adds	r3, #1
 8003340:	b29a      	uxth	r2, r3
 8003342:	4b48      	ldr	r3, [pc, #288]	; (8003464 <HW_TS_Init+0x1a4>)
 8003344:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8003346:	4b47      	ldr	r3, [pc, #284]	; (8003464 <HW_TS_Init+0x1a4>)
 8003348:	881b      	ldrh	r3, [r3, #0]
 800334a:	3b01      	subs	r3, #1
 800334c:	4a44      	ldr	r2, [pc, #272]	; (8003460 <HW_TS_Init+0x1a0>)
 800334e:	7812      	ldrb	r2, [r2, #0]
 8003350:	fb02 f303 	mul.w	r3, r2, r3
 8003354:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003358:	4a40      	ldr	r2, [pc, #256]	; (800345c <HW_TS_Init+0x19c>)
 800335a:	7812      	ldrb	r2, [r2, #0]
 800335c:	40d3      	lsrs	r3, r2
 800335e:	613b      	str	r3, [r7, #16]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003366:	4293      	cmp	r3, r2
 8003368:	d904      	bls.n	8003374 <HW_TS_Init+0xb4>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 800336a:	4b3f      	ldr	r3, [pc, #252]	; (8003468 <HW_TS_Init+0x1a8>)
 800336c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003370:	801a      	strh	r2, [r3, #0]
 8003372:	e003      	b.n	800337c <HW_TS_Init+0xbc>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	b29a      	uxth	r2, r3
 8003378:	4b3b      	ldr	r3, [pc, #236]	; (8003468 <HW_TS_Init+0x1a8>)
 800337a:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800337c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003380:	f7ff fc5c 	bl	8002c3c <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8003384:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003388:	f7ff fc44 	bl	8002c14 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 800338c:	79fb      	ldrb	r3, [r7, #7]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d143      	bne.n	800341a <HW_TS_Init+0x15a>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8003392:	4b36      	ldr	r3, [pc, #216]	; (800346c <HW_TS_Init+0x1ac>)
 8003394:	2201      	movs	r2, #1
 8003396:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8003398:	4b35      	ldr	r3, [pc, #212]	; (8003470 <HW_TS_Init+0x1b0>)
 800339a:	f04f 32ff 	mov.w	r2, #4294967295
 800339e:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80033a0:	2300      	movs	r3, #0
 80033a2:	75fb      	strb	r3, [r7, #23]
 80033a4:	e00c      	b.n	80033c0 <HW_TS_Init+0x100>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80033a6:	7dfa      	ldrb	r2, [r7, #23]
 80033a8:	4932      	ldr	r1, [pc, #200]	; (8003474 <HW_TS_Init+0x1b4>)
 80033aa:	4613      	mov	r3, r2
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	4413      	add	r3, r2
 80033b0:	00db      	lsls	r3, r3, #3
 80033b2:	440b      	add	r3, r1
 80033b4:	330c      	adds	r3, #12
 80033b6:	2200      	movs	r2, #0
 80033b8:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80033ba:	7dfb      	ldrb	r3, [r7, #23]
 80033bc:	3301      	adds	r3, #1
 80033be:	75fb      	strb	r3, [r7, #23]
 80033c0:	7dfb      	ldrb	r3, [r7, #23]
 80033c2:	2b05      	cmp	r3, #5
 80033c4:	d9ef      	bls.n	80033a6 <HW_TS_Init+0xe6>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 80033c6:	4b2c      	ldr	r3, [pc, #176]	; (8003478 <HW_TS_Init+0x1b8>)
 80033c8:	2206      	movs	r2, #6
 80033ca:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 80033cc:	4b21      	ldr	r3, [pc, #132]	; (8003454 <HW_TS_Init+0x194>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	689a      	ldr	r2, [r3, #8]
 80033d4:	4b1f      	ldr	r3, [pc, #124]	; (8003454 <HW_TS_Init+0x194>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033de:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80033e0:	4b1c      	ldr	r3, [pc, #112]	; (8003454 <HW_TS_Init+0x194>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	b2da      	uxtb	r2, r3
 80033ea:	4b1a      	ldr	r3, [pc, #104]	; (8003454 <HW_TS_Init+0x194>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80033f4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80033f6:	4b21      	ldr	r3, [pc, #132]	; (800347c <HW_TS_Init+0x1bc>)
 80033f8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80033fc:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80033fe:	2003      	movs	r0, #3
 8003400:	f004 ff4d 	bl	800829e <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8003404:	4b13      	ldr	r3, [pc, #76]	; (8003454 <HW_TS_Init+0x194>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	689a      	ldr	r2, [r3, #8]
 800340c:	4b11      	ldr	r3, [pc, #68]	; (8003454 <HW_TS_Init+0x194>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003416:	609a      	str	r2, [r3, #8]
 8003418:	e00a      	b.n	8003430 <HW_TS_Init+0x170>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 800341a:	4b0e      	ldr	r3, [pc, #56]	; (8003454 <HW_TS_Init+0x194>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003426:	2b00      	cmp	r3, #0
 8003428:	d002      	beq.n	8003430 <HW_TS_Init+0x170>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800342a:	2003      	movs	r0, #3
 800342c:	f004 ff29 	bl	8008282 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8003430:	4b08      	ldr	r3, [pc, #32]	; (8003454 <HW_TS_Init+0x194>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	22ff      	movs	r2, #255	; 0xff
 8003438:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800343a:	2200      	movs	r2, #0
 800343c:	2106      	movs	r1, #6
 800343e:	2003      	movs	r0, #3
 8003440:	f004 fee5 	bl	800820e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8003444:	2003      	movs	r0, #3
 8003446:	f004 fefc 	bl	8008242 <HAL_NVIC_EnableIRQ>

  return;
 800344a:	bf00      	nop
}
 800344c:	3718      	adds	r7, #24
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	20000ac0 	.word	0x20000ac0
 8003458:	40002800 	.word	0x40002800
 800345c:	20000ac4 	.word	0x20000ac4
 8003460:	20000ac5 	.word	0x20000ac5
 8003464:	20000ac6 	.word	0x20000ac6
 8003468:	20000ac8 	.word	0x20000ac8
 800346c:	200001f8 	.word	0x200001f8
 8003470:	200001f4 	.word	0x200001f4
 8003474:	20000160 	.word	0x20000160
 8003478:	200001f0 	.word	0x200001f0
 800347c:	58000800 	.word	0x58000800

08003480 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8003480:	b480      	push	{r7}
 8003482:	b08b      	sub	sp, #44	; 0x2c
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	603b      	str	r3, [r7, #0]
 800348c:	4613      	mov	r3, r2
 800348e:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8003490:	2300      	movs	r3, #0
 8003492:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003496:	f3ef 8310 	mrs	r3, PRIMASK
 800349a:	61fb      	str	r3, [r7, #28]
  return(result);
 800349c:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800349e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80034a0:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80034a2:	e004      	b.n	80034ae <HW_TS_Create+0x2e>
  {
    loop++;
 80034a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80034a8:	3301      	adds	r3, #1
 80034aa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80034ae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80034b2:	2b05      	cmp	r3, #5
 80034b4:	d80c      	bhi.n	80034d0 <HW_TS_Create+0x50>
 80034b6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80034ba:	492b      	ldr	r1, [pc, #172]	; (8003568 <HW_TS_Create+0xe8>)
 80034bc:	4613      	mov	r3, r2
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	4413      	add	r3, r2
 80034c2:	00db      	lsls	r3, r3, #3
 80034c4:	440b      	add	r3, r1
 80034c6:	330c      	adds	r3, #12
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d1e9      	bne.n	80034a4 <HW_TS_Create+0x24>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80034d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80034d4:	2b06      	cmp	r3, #6
 80034d6:	d037      	beq.n	8003548 <HW_TS_Create+0xc8>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 80034d8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80034dc:	4922      	ldr	r1, [pc, #136]	; (8003568 <HW_TS_Create+0xe8>)
 80034de:	4613      	mov	r3, r2
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	4413      	add	r3, r2
 80034e4:	00db      	lsls	r3, r3, #3
 80034e6:	440b      	add	r3, r1
 80034e8:	330c      	adds	r3, #12
 80034ea:	2201      	movs	r2, #1
 80034ec:	701a      	strb	r2, [r3, #0]
 80034ee:	6a3b      	ldr	r3, [r7, #32]
 80034f0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 80034f8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80034fc:	491a      	ldr	r1, [pc, #104]	; (8003568 <HW_TS_Create+0xe8>)
 80034fe:	4613      	mov	r3, r2
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	4413      	add	r3, r2
 8003504:	00db      	lsls	r3, r3, #3
 8003506:	440b      	add	r3, r1
 8003508:	3310      	adds	r3, #16
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 800350e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003512:	4915      	ldr	r1, [pc, #84]	; (8003568 <HW_TS_Create+0xe8>)
 8003514:	4613      	mov	r3, r2
 8003516:	005b      	lsls	r3, r3, #1
 8003518:	4413      	add	r3, r2
 800351a:	00db      	lsls	r3, r3, #3
 800351c:	440b      	add	r3, r1
 800351e:	330d      	adds	r3, #13
 8003520:	79fa      	ldrb	r2, [r7, #7]
 8003522:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8003524:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003528:	490f      	ldr	r1, [pc, #60]	; (8003568 <HW_TS_Create+0xe8>)
 800352a:	4613      	mov	r3, r2
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	4413      	add	r3, r2
 8003530:	00db      	lsls	r3, r3, #3
 8003532:	440b      	add	r3, r1
 8003534:	683a      	ldr	r2, [r7, #0]
 8003536:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800353e:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8003540:	2300      	movs	r3, #0
 8003542:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003546:	e007      	b.n	8003558 <HW_TS_Create+0xd8>
 8003548:	6a3b      	ldr	r3, [r7, #32]
 800354a:	617b      	str	r3, [r7, #20]
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	f383 8810 	msr	PRIMASK, r3
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8003552:	2301      	movs	r3, #1
 8003554:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8003558:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800355c:	4618      	mov	r0, r3
 800355e:	372c      	adds	r7, #44	; 0x2c
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr
 8003568:	20000160 	.word	0x20000160

0800356c <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b086      	sub	sp, #24
 8003570:	af00      	add	r7, sp, #0
 8003572:	4603      	mov	r3, r0
 8003574:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003576:	f3ef 8310 	mrs	r3, PRIMASK
 800357a:	60fb      	str	r3, [r7, #12]
  return(result);
 800357c:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800357e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003580:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8003582:	2003      	movs	r0, #3
 8003584:	f004 fe6b 	bl	800825e <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8003588:	4b37      	ldr	r3, [pc, #220]	; (8003668 <HW_TS_Stop+0xfc>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	22ca      	movs	r2, #202	; 0xca
 8003590:	625a      	str	r2, [r3, #36]	; 0x24
 8003592:	4b35      	ldr	r3, [pc, #212]	; (8003668 <HW_TS_Stop+0xfc>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2253      	movs	r2, #83	; 0x53
 800359a:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800359c:	79fa      	ldrb	r2, [r7, #7]
 800359e:	4933      	ldr	r1, [pc, #204]	; (800366c <HW_TS_Stop+0x100>)
 80035a0:	4613      	mov	r3, r2
 80035a2:	005b      	lsls	r3, r3, #1
 80035a4:	4413      	add	r3, r2
 80035a6:	00db      	lsls	r3, r3, #3
 80035a8:	440b      	add	r3, r1
 80035aa:	330c      	adds	r3, #12
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d148      	bne.n	8003646 <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80035b4:	79fb      	ldrb	r3, [r7, #7]
 80035b6:	2100      	movs	r1, #0
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7ff fcc1 	bl	8002f40 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80035be:	4b2c      	ldr	r3, [pc, #176]	; (8003670 <HW_TS_Stop+0x104>)
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80035c4:	7cfb      	ldrb	r3, [r7, #19]
 80035c6:	2b06      	cmp	r3, #6
 80035c8:	d135      	bne.n	8003636 <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80035ca:	4b2a      	ldr	r3, [pc, #168]	; (8003674 <HW_TS_Stop+0x108>)
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035d6:	d108      	bne.n	80035ea <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 80035d8:	bf00      	nop
 80035da:	4b23      	ldr	r3, [pc, #140]	; (8003668 <HW_TS_Stop+0xfc>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	f003 0304 	and.w	r3, r3, #4
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1f7      	bne.n	80035da <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 80035ea:	4b1f      	ldr	r3, [pc, #124]	; (8003668 <HW_TS_Stop+0xfc>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689a      	ldr	r2, [r3, #8]
 80035f2:	4b1d      	ldr	r3, [pc, #116]	; (8003668 <HW_TS_Stop+0xfc>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035fc:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80035fe:	bf00      	nop
 8003600:	4b19      	ldr	r3, [pc, #100]	; (8003668 <HW_TS_Stop+0xfc>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	f003 0304 	and.w	r3, r3, #4
 800360c:	2b00      	cmp	r3, #0
 800360e:	d0f7      	beq.n	8003600 <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8003610:	4b15      	ldr	r3, [pc, #84]	; (8003668 <HW_TS_Stop+0xfc>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	b2da      	uxtb	r2, r3
 800361a:	4b13      	ldr	r3, [pc, #76]	; (8003668 <HW_TS_Stop+0xfc>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003624:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8003626:	4b14      	ldr	r3, [pc, #80]	; (8003678 <HW_TS_Stop+0x10c>)
 8003628:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800362c:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800362e:	2003      	movs	r0, #3
 8003630:	f004 fe35 	bl	800829e <HAL_NVIC_ClearPendingIRQ>
 8003634:	e007      	b.n	8003646 <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8003636:	4b11      	ldr	r3, [pc, #68]	; (800367c <HW_TS_Stop+0x110>)
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	b2db      	uxtb	r3, r3
 800363c:	7cfa      	ldrb	r2, [r7, #19]
 800363e:	429a      	cmp	r2, r3
 8003640:	d001      	beq.n	8003646 <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 8003642:	f7ff fd9f 	bl	8003184 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8003646:	4b08      	ldr	r3, [pc, #32]	; (8003668 <HW_TS_Stop+0xfc>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	22ff      	movs	r2, #255	; 0xff
 800364e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8003650:	2003      	movs	r0, #3
 8003652:	f004 fdf6 	bl	8008242 <HAL_NVIC_EnableIRQ>
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8003660:	bf00      	nop
}
 8003662:	3718      	adds	r7, #24
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	20000ac0 	.word	0x20000ac0
 800366c:	20000160 	.word	0x20000160
 8003670:	200001f0 	.word	0x200001f0
 8003674:	40002800 	.word	0x40002800
 8003678:	58000800 	.word	0x58000800
 800367c:	200001f1 	.word	0x200001f1

08003680 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b086      	sub	sp, #24
 8003684:	af00      	add	r7, sp, #0
 8003686:	4603      	mov	r3, r0
 8003688:	6039      	str	r1, [r7, #0]
 800368a:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800368c:	79fa      	ldrb	r2, [r7, #7]
 800368e:	493b      	ldr	r1, [pc, #236]	; (800377c <HW_TS_Start+0xfc>)
 8003690:	4613      	mov	r3, r2
 8003692:	005b      	lsls	r3, r3, #1
 8003694:	4413      	add	r3, r2
 8003696:	00db      	lsls	r3, r3, #3
 8003698:	440b      	add	r3, r1
 800369a:	330c      	adds	r3, #12
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d103      	bne.n	80036ac <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80036a4:	79fb      	ldrb	r3, [r7, #7]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7ff ff60 	bl	800356c <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036ac:	f3ef 8310 	mrs	r3, PRIMASK
 80036b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80036b2:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80036b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80036b6:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80036b8:	2003      	movs	r0, #3
 80036ba:	f004 fdd0 	bl	800825e <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80036be:	4b30      	ldr	r3, [pc, #192]	; (8003780 <HW_TS_Start+0x100>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	22ca      	movs	r2, #202	; 0xca
 80036c6:	625a      	str	r2, [r3, #36]	; 0x24
 80036c8:	4b2d      	ldr	r3, [pc, #180]	; (8003780 <HW_TS_Start+0x100>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2253      	movs	r2, #83	; 0x53
 80036d0:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80036d2:	79fa      	ldrb	r2, [r7, #7]
 80036d4:	4929      	ldr	r1, [pc, #164]	; (800377c <HW_TS_Start+0xfc>)
 80036d6:	4613      	mov	r3, r2
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	4413      	add	r3, r2
 80036dc:	00db      	lsls	r3, r3, #3
 80036de:	440b      	add	r3, r1
 80036e0:	330c      	adds	r3, #12
 80036e2:	2202      	movs	r2, #2
 80036e4:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80036e6:	79fa      	ldrb	r2, [r7, #7]
 80036e8:	4924      	ldr	r1, [pc, #144]	; (800377c <HW_TS_Start+0xfc>)
 80036ea:	4613      	mov	r3, r2
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	4413      	add	r3, r2
 80036f0:	00db      	lsls	r3, r3, #3
 80036f2:	440b      	add	r3, r1
 80036f4:	3308      	adds	r3, #8
 80036f6:	683a      	ldr	r2, [r7, #0]
 80036f8:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80036fa:	79fa      	ldrb	r2, [r7, #7]
 80036fc:	491f      	ldr	r1, [pc, #124]	; (800377c <HW_TS_Start+0xfc>)
 80036fe:	4613      	mov	r3, r2
 8003700:	005b      	lsls	r3, r3, #1
 8003702:	4413      	add	r3, r2
 8003704:	00db      	lsls	r3, r3, #3
 8003706:	440b      	add	r3, r1
 8003708:	3304      	adds	r3, #4
 800370a:	683a      	ldr	r2, [r7, #0]
 800370c:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 800370e:	79fb      	ldrb	r3, [r7, #7]
 8003710:	4618      	mov	r0, r3
 8003712:	f7ff fb6b 	bl	8002dec <linkTimer>
 8003716:	4603      	mov	r3, r0
 8003718:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 800371a:	4b1a      	ldr	r3, [pc, #104]	; (8003784 <HW_TS_Start+0x104>)
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8003720:	4b19      	ldr	r3, [pc, #100]	; (8003788 <HW_TS_Start+0x108>)
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	b2db      	uxtb	r3, r3
 8003726:	7c7a      	ldrb	r2, [r7, #17]
 8003728:	429a      	cmp	r2, r3
 800372a:	d002      	beq.n	8003732 <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 800372c:	f7ff fd2a 	bl	8003184 <RescheduleTimerList>
 8003730:	e013      	b.n	800375a <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8003732:	79fa      	ldrb	r2, [r7, #7]
 8003734:	4911      	ldr	r1, [pc, #68]	; (800377c <HW_TS_Start+0xfc>)
 8003736:	4613      	mov	r3, r2
 8003738:	005b      	lsls	r3, r3, #1
 800373a:	4413      	add	r3, r2
 800373c:	00db      	lsls	r3, r3, #3
 800373e:	440b      	add	r3, r1
 8003740:	3308      	adds	r3, #8
 8003742:	6819      	ldr	r1, [r3, #0]
 8003744:	8a7b      	ldrh	r3, [r7, #18]
 8003746:	79fa      	ldrb	r2, [r7, #7]
 8003748:	1ac9      	subs	r1, r1, r3
 800374a:	480c      	ldr	r0, [pc, #48]	; (800377c <HW_TS_Start+0xfc>)
 800374c:	4613      	mov	r3, r2
 800374e:	005b      	lsls	r3, r3, #1
 8003750:	4413      	add	r3, r2
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	4403      	add	r3, r0
 8003756:	3308      	adds	r3, #8
 8003758:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800375a:	4b09      	ldr	r3, [pc, #36]	; (8003780 <HW_TS_Start+0x100>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	22ff      	movs	r2, #255	; 0xff
 8003762:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8003764:	2003      	movs	r0, #3
 8003766:	f004 fd6c 	bl	8008242 <HAL_NVIC_EnableIRQ>
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8003774:	bf00      	nop
}
 8003776:	3718      	adds	r7, #24
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	20000160 	.word	0x20000160
 8003780:	20000ac0 	.word	0x20000ac0
 8003784:	200001f0 	.word	0x200001f0
 8003788:	200001f1 	.word	0x200001f1

0800378c <HW_TS_RTC_ReadLeftTicksToCount>:

uint16_t HW_TS_RTC_ReadLeftTicksToCount(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b086      	sub	sp, #24
 8003790:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003792:	f3ef 8310 	mrs	r3, PRIMASK
 8003796:	60bb      	str	r3, [r7, #8]
  return(result);
 8003798:	68bb      	ldr	r3, [r7, #8]
  uint32_t primask_bit;
  uint16_t return_value, auro_reload_value, elapsed_time_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800379a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800379c:	b672      	cpsid	i
  __disable_irq();                /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800379e:	4b13      	ldr	r3, [pc, #76]	; (80037ec <HW_TS_RTC_ReadLeftTicksToCount+0x60>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037aa:	d112      	bne.n	80037d2 <HW_TS_RTC_ReadLeftTicksToCount+0x46>
  {
    auro_reload_value = (uint32_t)(READ_BIT(RTC->WUTR, RTC_WUTR_WUT));
 80037ac:	4b0f      	ldr	r3, [pc, #60]	; (80037ec <HW_TS_RTC_ReadLeftTicksToCount+0x60>)
 80037ae:	695b      	ldr	r3, [r3, #20]
 80037b0:	81fb      	strh	r3, [r7, #14]

    elapsed_time_value = ReturnTimeElapsed();
 80037b2:	f7ff fc49 	bl	8003048 <ReturnTimeElapsed>
 80037b6:	4603      	mov	r3, r0
 80037b8:	81bb      	strh	r3, [r7, #12]

    if(auro_reload_value > elapsed_time_value)
 80037ba:	89fa      	ldrh	r2, [r7, #14]
 80037bc:	89bb      	ldrh	r3, [r7, #12]
 80037be:	429a      	cmp	r2, r3
 80037c0:	d904      	bls.n	80037cc <HW_TS_RTC_ReadLeftTicksToCount+0x40>
    {
      return_value = auro_reload_value - elapsed_time_value;
 80037c2:	89fa      	ldrh	r2, [r7, #14]
 80037c4:	89bb      	ldrh	r3, [r7, #12]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	82fb      	strh	r3, [r7, #22]
 80037ca:	e005      	b.n	80037d8 <HW_TS_RTC_ReadLeftTicksToCount+0x4c>
    }
    else
    {
      return_value = 0;
 80037cc:	2300      	movs	r3, #0
 80037ce:	82fb      	strh	r3, [r7, #22]
 80037d0:	e002      	b.n	80037d8 <HW_TS_RTC_ReadLeftTicksToCount+0x4c>
    }
  }
  else
  {
    return_value = TIMER_LIST_EMPTY;
 80037d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80037d6:	82fb      	strh	r3, [r7, #22]
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f383 8810 	msr	PRIMASK, r3
  }

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return (return_value);
 80037e2:	8afb      	ldrh	r3, [r7, #22]
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3718      	adds	r7, #24
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	40002800 	.word	0x40002800

080037f0 <LL_AHB2_GRP1_EnableClock>:
{
 80037f0:	b480      	push	{r7}
 80037f2:	b085      	sub	sp, #20
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80037f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4313      	orrs	r3, r2
 8003806:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003808:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800380c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4013      	ands	r3, r2
 8003812:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003814:	68fb      	ldr	r3, [r7, #12]
}
 8003816:	bf00      	nop
 8003818:	3714      	adds	r7, #20
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr

08003822 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_USB
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8003822:	b480      	push	{r7}
 8003824:	b085      	sub	sp, #20
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800382a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800382e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003830:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4313      	orrs	r3, r2
 8003838:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800383a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800383e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4013      	ands	r3, r2
 8003844:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003846:	68fb      	ldr	r3, [r7, #12]
}
 8003848:	bf00      	nop
 800384a:	3714      	adds	r7, #20
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8003858:	4b1b      	ldr	r3, [pc, #108]	; (80038c8 <MX_I2C1_Init+0x74>)
 800385a:	4a1c      	ldr	r2, [pc, #112]	; (80038cc <MX_I2C1_Init+0x78>)
 800385c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00E27CAE;
 800385e:	4b1a      	ldr	r3, [pc, #104]	; (80038c8 <MX_I2C1_Init+0x74>)
 8003860:	4a1b      	ldr	r2, [pc, #108]	; (80038d0 <MX_I2C1_Init+0x7c>)
 8003862:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003864:	4b18      	ldr	r3, [pc, #96]	; (80038c8 <MX_I2C1_Init+0x74>)
 8003866:	2200      	movs	r2, #0
 8003868:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800386a:	4b17      	ldr	r3, [pc, #92]	; (80038c8 <MX_I2C1_Init+0x74>)
 800386c:	2201      	movs	r2, #1
 800386e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003870:	4b15      	ldr	r3, [pc, #84]	; (80038c8 <MX_I2C1_Init+0x74>)
 8003872:	2200      	movs	r2, #0
 8003874:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003876:	4b14      	ldr	r3, [pc, #80]	; (80038c8 <MX_I2C1_Init+0x74>)
 8003878:	2200      	movs	r2, #0
 800387a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800387c:	4b12      	ldr	r3, [pc, #72]	; (80038c8 <MX_I2C1_Init+0x74>)
 800387e:	2200      	movs	r2, #0
 8003880:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003882:	4b11      	ldr	r3, [pc, #68]	; (80038c8 <MX_I2C1_Init+0x74>)
 8003884:	2200      	movs	r2, #0
 8003886:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003888:	4b0f      	ldr	r3, [pc, #60]	; (80038c8 <MX_I2C1_Init+0x74>)
 800388a:	2200      	movs	r2, #0
 800388c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800388e:	480e      	ldr	r0, [pc, #56]	; (80038c8 <MX_I2C1_Init+0x74>)
 8003890:	f005 f9e4 	bl	8008c5c <HAL_I2C_Init>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d001      	beq.n	800389e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800389a:	f000 fd5d 	bl	8004358 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800389e:	2100      	movs	r1, #0
 80038a0:	4809      	ldr	r0, [pc, #36]	; (80038c8 <MX_I2C1_Init+0x74>)
 80038a2:	f007 f8dc 	bl	800aa5e <HAL_I2CEx_ConfigAnalogFilter>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d001      	beq.n	80038b0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80038ac:	f000 fd54 	bl	8004358 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80038b0:	2100      	movs	r1, #0
 80038b2:	4805      	ldr	r0, [pc, #20]	; (80038c8 <MX_I2C1_Init+0x74>)
 80038b4:	f007 f91e 	bl	800aaf4 <HAL_I2CEx_ConfigDigitalFilter>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80038be:	f000 fd4b 	bl	8004358 <Error_Handler>
  }

}
 80038c2:	bf00      	nop
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	20027eb0 	.word	0x20027eb0
 80038cc:	40005400 	.word	0x40005400
 80038d0:	00e27cae 	.word	0x00e27cae

080038d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b088      	sub	sp, #32
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038dc:	f107 030c 	add.w	r3, r7, #12
 80038e0:	2200      	movs	r2, #0
 80038e2:	601a      	str	r2, [r3, #0]
 80038e4:	605a      	str	r2, [r3, #4]
 80038e6:	609a      	str	r2, [r3, #8]
 80038e8:	60da      	str	r2, [r3, #12]
 80038ea:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a13      	ldr	r2, [pc, #76]	; (8003940 <HAL_I2C_MspInit+0x6c>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d120      	bne.n	8003938 <HAL_I2C_MspInit+0x64>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038f6:	2001      	movs	r0, #1
 80038f8:	f7ff ff7a 	bl	80037f0 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80038fc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003900:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003902:	2312      	movs	r3, #18
 8003904:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003906:	2300      	movs	r3, #0
 8003908:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800390a:	2300      	movs	r3, #0
 800390c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800390e:	2304      	movs	r3, #4
 8003910:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003912:	f107 030c 	add.w	r3, r7, #12
 8003916:	4619      	mov	r1, r3
 8003918:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800391c:	f004 fffe 	bl	800891c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003920:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003924:	f7ff ff7d 	bl	8003822 <LL_APB1_GRP1_EnableClock>

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8003928:	2200      	movs	r2, #0
 800392a:	2105      	movs	r1, #5
 800392c:	201e      	movs	r0, #30
 800392e:	f004 fc6e 	bl	800820e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003932:	201e      	movs	r0, #30
 8003934:	f004 fc85 	bl	8008242 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003938:	bf00      	nop
 800393a:	3720      	adds	r7, #32
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	40005400 	.word	0x40005400

08003944 <InertialSensingTask>:
uint32_t enableActivities = 0x1F; //Enable all 9 possible activities including Unknown
uint8_t inertialEnabled = 0;

struct inertialData inertialPacket;

void InertialSensingTask(void *argument){
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
	inertialEnabled = 1;
 800394c:	4b38      	ldr	r3, [pc, #224]	; (8003a30 <InertialSensingTask+0xec>)
 800394e:	2201      	movs	r2, #1
 8003950:	701a      	strb	r2, [r3, #0]
#ifndef DONGLE_CODE
	IMU_begin(BNO080_ADDRESS, IMU_INT_Pin, IMU_INT_GPIO_Port);
 8003952:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003956:	2120      	movs	r1, #32
 8003958:	204a      	movs	r0, #74	; 0x4a
 800395a:	f7fe f855 	bl	8001a08 <IMU_begin>
#endif

	uint32_t evt = 0;
 800395e:	2300      	movs	r3, #0
 8003960:	60fb      	str	r3, [r7, #12]

	while(1){

		/********* WAIT FOR START CONDITION FROM MASTER THREAD ************************/
		osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 8003962:	f04f 32ff 	mov.w	r2, #4294967295
 8003966:	2100      	movs	r1, #0
 8003968:	2001      	movs	r0, #1
 800396a:	f00a fcf3 	bl	800e354 <osThreadFlagsWait>

		// configure IMU
		osDelay(500);
 800396e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003972:	f00a fd83 	bl	800e47c <osDelay>
		IMU_enableRotationVector(ROT_VEC_PERIOD);
 8003976:	2064      	movs	r0, #100	; 0x64
 8003978:	f7fe fb42 	bl	8002000 <IMU_enableRotationVector>
		osDelay(100);
 800397c:	2064      	movs	r0, #100	; 0x64
 800397e:	f00a fd7d 	bl	800e47c <osDelay>
		IMU_enableActivityClassifier(ACT_CLASS_PERIOD , enableActivities, activityClasses);
 8003982:	4b2c      	ldr	r3, [pc, #176]	; (8003a34 <InertialSensingTask+0xf0>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a2c      	ldr	r2, [pc, #176]	; (8003a38 <InertialSensingTask+0xf4>)
 8003988:	4619      	mov	r1, r3
 800398a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800398e:	f7fe fb45 	bl	800201c <IMU_enableActivityClassifier>

		// give some time for things to buffer
		// TODO: remove this to see if it still works fine
		osDelay(400);
 8003992:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003996:	f00a fd71 	bl	800e47c <osDelay>

		while(1){

			// grab packets
			osDelay(100);
 800399a:	2064      	movs	r0, #100	; 0x64
 800399c:	f00a fd6e 	bl	800e47c <osDelay>
			osMessageQueueGet(rotationSampleQueueHandle, &inertialPacket.rotationMatrix, 0U, 100);
 80039a0:	4b26      	ldr	r3, [pc, #152]	; (8003a3c <InertialSensingTask+0xf8>)
 80039a2:	6818      	ldr	r0, [r3, #0]
 80039a4:	2364      	movs	r3, #100	; 0x64
 80039a6:	2200      	movs	r2, #0
 80039a8:	4925      	ldr	r1, [pc, #148]	; (8003a40 <InertialSensingTask+0xfc>)
 80039aa:	f00b fa57 	bl	800ee5c <osMessageQueueGet>
			osMessageQueueGet(activitySampleQueueHandle, &inertialPacket.activity, 0U, 0);
 80039ae:	4b25      	ldr	r3, [pc, #148]	; (8003a44 <InertialSensingTask+0x100>)
 80039b0:	6818      	ldr	r0, [r3, #0]
 80039b2:	2300      	movs	r3, #0
 80039b4:	2200      	movs	r2, #0
 80039b6:	4924      	ldr	r1, [pc, #144]	; (8003a48 <InertialSensingTask+0x104>)
 80039b8:	f00b fa50 	bl	800ee5c <osMessageQueueGet>
			osMessageQueuePut(inertialSensingQueueHandle, &inertialPacket, 0U, 0);
 80039bc:	4b23      	ldr	r3, [pc, #140]	; (8003a4c <InertialSensingTask+0x108>)
 80039be:	6818      	ldr	r0, [r3, #0]
 80039c0:	2300      	movs	r3, #0
 80039c2:	2200      	movs	r2, #0
 80039c4:	491e      	ldr	r1, [pc, #120]	; (8003a40 <InertialSensingTask+0xfc>)
 80039c6:	f00b f9d5 	bl	800ed74 <osMessageQueuePut>

			if( HAL_GPIO_ReadPin(IMU_INT_GPIO_Port, IMU_INT_Pin) == GPIO_PIN_RESET) IMU_dataAvailable();
 80039ca:	2120      	movs	r1, #32
 80039cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039d0:	f005 f914 	bl	8008bfc <HAL_GPIO_ReadPin>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <InertialSensingTask+0x9a>
 80039da:	f7fe f84d 	bl	8001a78 <IMU_dataAvailable>

			// check for break condition
			evt = osThreadFlagsWait (0x00000002U, osFlagsWaitAny, 0);
 80039de:	2200      	movs	r2, #0
 80039e0:	2100      	movs	r1, #0
 80039e2:	2002      	movs	r0, #2
 80039e4:	f00a fcb6 	bl	800e354 <osThreadFlagsWait>
 80039e8:	60f8      	str	r0, [r7, #12]

			// stop timer and put thread in idle if signal was reset
			if( (evt & 0x00000002U) == 0x00000002U){
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f003 0302 	and.w	r3, r3, #2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d0d2      	beq.n	800399a <InertialSensingTask+0x56>

				// reset IMU
				IMU_softReset();
 80039f4:	f7fe faa2 	bl	8001f3c <IMU_softReset>

				// give some time to ensure no interrupts are handled
				osDelay(500);
 80039f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80039fc:	f00a fd3e 	bl	800e47c <osDelay>

				inertialEnabled = 0;
 8003a00:	4b0b      	ldr	r3, [pc, #44]	; (8003a30 <InertialSensingTask+0xec>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	701a      	strb	r2, [r3, #0]

				// empty queues
				osMessageQueueReset(inertialSensingQueueHandle);
 8003a06:	4b11      	ldr	r3, [pc, #68]	; (8003a4c <InertialSensingTask+0x108>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f00b fa98 	bl	800ef40 <osMessageQueueReset>
				osMessageQueueReset(activitySampleQueueHandle);
 8003a10:	4b0c      	ldr	r3, [pc, #48]	; (8003a44 <InertialSensingTask+0x100>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f00b fa93 	bl	800ef40 <osMessageQueueReset>
				osMessageQueueReset(rotationSampleQueueHandle);
 8003a1a:	4b08      	ldr	r3, [pc, #32]	; (8003a3c <InertialSensingTask+0xf8>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f00b fa8e 	bl	800ef40 <osMessageQueueReset>

				// clear any flags
				osThreadFlagsClear(0x0000000EU);
 8003a24:	200e      	movs	r0, #14
 8003a26:	f00a fc45 	bl	800e2b4 <osThreadFlagsClear>

				// exit and wait for next start condition
				break;
 8003a2a:	bf00      	nop
		osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 8003a2c:	e799      	b.n	8003962 <InertialSensingTask+0x1e>
 8003a2e:	bf00      	nop
 8003a30:	20000aca 	.word	0x20000aca
 8003a34:	20000068 	.word	0x20000068
 8003a38:	20027f40 	.word	0x20027f40
 8003a3c:	200278cc 	.word	0x200278cc
 8003a40:	20027f04 	.word	0x20027f04
 8003a44:	200278ac 	.word	0x200278ac
 8003a48:	20027f1c 	.word	0x20027f1c
 8003a4c:	200278b8 	.word	0x200278b8

08003a50 <HAL_GPIO_EXTI_Callback>:
		}
	}
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	4603      	mov	r3, r0
 8003a58:	80fb      	strh	r3, [r7, #6]
    // if interrupt is triggered, sample!
	// todo: only do when inertial measurements are enabled?
	if((GPIO_Pin == IMU_INT_Pin) && (inertialEnabled == 1)){
 8003a5a:	88fb      	ldrh	r3, [r7, #6]
 8003a5c:	2b20      	cmp	r3, #32
 8003a5e:	d105      	bne.n	8003a6c <HAL_GPIO_EXTI_Callback+0x1c>
 8003a60:	4b04      	ldr	r3, [pc, #16]	; (8003a74 <HAL_GPIO_EXTI_Callback+0x24>)
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d101      	bne.n	8003a6c <HAL_GPIO_EXTI_Callback+0x1c>
		IMU_dataAvailable();
 8003a68:	f7fe f806 	bl	8001a78 <IMU_dataAvailable>
	}
}
 8003a6c:	bf00      	nop
 8003a6e:	3708      	adds	r7, #8
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	20000aca 	.word	0x20000aca

08003a78 <_Input>:
#include "string.h"

PulseProcessor pulse_processor;
GeometryBuilder geometry_builder;

void _Input(Input *self, uint8_t input_idx){
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	460b      	mov	r3, r1
 8003a82:	70fb      	strb	r3, [r7, #3]
	_GeometryBuilder(&geometry_builder);
 8003a84:	480b      	ldr	r0, [pc, #44]	; (8003ab4 <_Input+0x3c>)
 8003a86:	f7fe fd71 	bl	800256c <_GeometryBuilder>
	_PulseProcessor(&pulse_processor, 1);
 8003a8a:	2101      	movs	r1, #1
 8003a8c:	480a      	ldr	r0, [pc, #40]	; (8003ab8 <_Input+0x40>)
 8003a8e:	f000 ff35 	bl	80048fc <_PulseProcessor>
	pulse_processor.next = &geometry_builder;
 8003a92:	4b09      	ldr	r3, [pc, #36]	; (8003ab8 <_Input+0x40>)
 8003a94:	4a07      	ldr	r2, [pc, #28]	; (8003ab4 <_Input+0x3c>)
 8003a96:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
	self->next = &pulse_processor;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a06      	ldr	r2, [pc, #24]	; (8003ab8 <_Input+0x40>)
 8003a9e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
	self->input_idx_ = input_idx;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	78fa      	ldrb	r2, [r7, #3]
 8003aa6:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408

}
 8003aaa:	bf00      	nop
 8003aac:	3708      	adds	r7, #8
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	20027f6c 	.word	0x20027f6c
 8003ab8:	20027ff4 	.word	0x20027ff4

08003abc <PulseHandlerTask>:
volatile uint32_t count = 0;
Pulse p;
void PulseHandlerTask(void *argument){
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
	uint32_t evt = 0;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	60fb      	str	r3, [r7, #12]
	while(1){
		osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 8003ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8003acc:	2100      	movs	r1, #0
 8003ace:	2001      	movs	r0, #1
 8003ad0:	f00a fc40 	bl	800e354 <osThreadFlagsWait>
		//Start interrupt
//		HAL_NVIC_EnableIRQ(COMP_IRQn);
		HAL_TIM_Base_Start(&htim16);
 8003ad4:	4818      	ldr	r0, [pc, #96]	; (8003b38 <PulseHandlerTask+0x7c>)
 8003ad6:	f009 f9db 	bl	800ce90 <HAL_TIM_Base_Start>
		HAL_COMP_Start(&hcomp1);
 8003ada:	4818      	ldr	r0, [pc, #96]	; (8003b3c <PulseHandlerTask+0x80>)
 8003adc:	f004 f9b0 	bl	8007e40 <HAL_COMP_Start>
		_Input(&input0, 0);
 8003ae0:	2100      	movs	r1, #0
 8003ae2:	4817      	ldr	r0, [pc, #92]	; (8003b40 <PulseHandlerTask+0x84>)
 8003ae4:	f7ff ffc8 	bl	8003a78 <_Input>
		while(1){
			osMessageQueueGet (pulseQueueHandle, (void *) &p, NULL, osWaitForever);
 8003ae8:	4b16      	ldr	r3, [pc, #88]	; (8003b44 <PulseHandlerTask+0x88>)
 8003aea:	6818      	ldr	r0, [r3, #0]
 8003aec:	f04f 33ff 	mov.w	r3, #4294967295
 8003af0:	2200      	movs	r2, #0
 8003af2:	4915      	ldr	r1, [pc, #84]	; (8003b48 <PulseHandlerTask+0x8c>)
 8003af4:	f00b f9b2 	bl	800ee5c <osMessageQueueGet>
			consume_pulse(input0.next, &p);
 8003af8:	4b11      	ldr	r3, [pc, #68]	; (8003b40 <PulseHandlerTask+0x84>)
 8003afa:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8003afe:	4912      	ldr	r1, [pc, #72]	; (8003b48 <PulseHandlerTask+0x8c>)
 8003b00:	4618      	mov	r0, r3
 8003b02:	f000 ff2f 	bl	8004964 <consume_pulse>

			evt = osThreadFlagsWait(0x00000002U, osFlagsWaitAny, 0);
 8003b06:	2200      	movs	r2, #0
 8003b08:	2100      	movs	r1, #0
 8003b0a:	2002      	movs	r0, #2
 8003b0c:	f00a fc22 	bl	800e354 <osThreadFlagsWait>
 8003b10:	60f8      	str	r0, [r7, #12]
			if((evt & 0x00000002U) == 0x00000002U){
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d0e5      	beq.n	8003ae8 <PulseHandlerTask+0x2c>
				//Stop interrupt
//				HAL_NVIC_DisableIRQ(COMP_IRQn);
				HAL_COMP_Stop(&hcomp1);
 8003b1c:	4807      	ldr	r0, [pc, #28]	; (8003b3c <PulseHandlerTask+0x80>)
 8003b1e:	f004 f9d9 	bl	8007ed4 <HAL_COMP_Stop>
				HAL_TIM_Base_Stop(&htim16);
 8003b22:	4805      	ldr	r0, [pc, #20]	; (8003b38 <PulseHandlerTask+0x7c>)
 8003b24:	f009 f9de 	bl	800cee4 <HAL_TIM_Base_Stop>
				osMessageQueueReset(pulseQueueHandle);
 8003b28:	4b06      	ldr	r3, [pc, #24]	; (8003b44 <PulseHandlerTask+0x88>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f00b fa07 	bl	800ef40 <osMessageQueueReset>
				break;
 8003b32:	bf00      	nop
		osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 8003b34:	e7c8      	b.n	8003ac8 <PulseHandlerTask+0xc>
 8003b36:	bf00      	nop
 8003b38:	200284ec 	.word	0x200284ec
 8003b3c:	20027d20 	.word	0x20027d20
 8003b40:	200278d0 	.word	0x200278d0
 8003b44:	200277b4 	.word	0x200277b4
 8003b48:	20027f4c 	.word	0x20027f4c

08003b4c <get3D_location>:

VIVEVars vive_vars;
struct LogMessage statusMessage;
struct VIVEVars vive_loc_demo;

void get3D_location(void *arguments){
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]

	uint8_t blinkActive	= 0;
 8003b54:	2300      	movs	r3, #0
 8003b56:	73fb      	strb	r3, [r7, #15]
	uint32_t blinkState;

	memcpy(&blinkState, arguments, sizeof(blinkState));
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	60bb      	str	r3, [r7, #8]

	// ensures semaphores are clear
	osSemaphoreAcquire(locCompleteHandle, 0);
 8003b5e:	4b3f      	ldr	r3, [pc, #252]	; (8003c5c <get3D_location+0x110>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2100      	movs	r1, #0
 8003b64:	4618      	mov	r0, r3
 8003b66:	f00a ffc1 	bl	800eaec <osSemaphoreAcquire>
	osSemaphoreAcquire(locNotifyHandle, 0);
 8003b6a:	4b3d      	ldr	r3, [pc, #244]	; (8003c60 <get3D_location+0x114>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2100      	movs	r1, #0
 8003b70:	4618      	mov	r0, r3
 8003b72:	f00a ffbb 	bl	800eaec <osSemaphoreAcquire>

	osMessageQueueGet(statusQueueHandle, &statusMessage, 0U, osWaitForever);
 8003b76:	4b3b      	ldr	r3, [pc, #236]	; (8003c64 <get3D_location+0x118>)
 8003b78:	6818      	ldr	r0, [r3, #0]
 8003b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b7e:	2200      	movs	r2, #0
 8003b80:	4939      	ldr	r1, [pc, #228]	; (8003c68 <get3D_location+0x11c>)
 8003b82:	f00b f96b 	bl	800ee5c <osMessageQueueGet>
	if(statusMessage.blinkEnabled == 1){
 8003b86:	4b38      	ldr	r3, [pc, #224]	; (8003c68 <get3D_location+0x11c>)
 8003b88:	789b      	ldrb	r3, [r3, #2]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d116      	bne.n	8003bbc <get3D_location+0x70>
		osMessageQueuePut(statusQueueHandle, (void *) &statusMessage, 0U, 0);
 8003b8e:	4b35      	ldr	r3, [pc, #212]	; (8003c64 <get3D_location+0x118>)
 8003b90:	6818      	ldr	r0, [r3, #0]
 8003b92:	2300      	movs	r3, #0
 8003b94:	2200      	movs	r2, #0
 8003b96:	4934      	ldr	r1, [pc, #208]	; (8003c68 <get3D_location+0x11c>)
 8003b98:	f00b f8ec 	bl	800ed74 <osMessageQueuePut>

		blinkActive = 1;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	73fb      	strb	r3, [r7, #15]

		// disable blink if active
		osThreadFlagsSet(blinkTaskHandle, 0x00000002U);
 8003ba0:	4b32      	ldr	r3, [pc, #200]	; (8003c6c <get3D_location+0x120>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2102      	movs	r1, #2
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f00a fb22 	bl	800e1f0 <osThreadFlagsSet>

		// wait for blink thread to turn off
		//TODO: make safer by making a break condition
		osSemaphoreAcquire(locNotifyHandle, osWaitForever);
 8003bac:	4b2c      	ldr	r3, [pc, #176]	; (8003c60 <get3D_location+0x114>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f00a ff99 	bl	800eaec <osSemaphoreAcquire>
 8003bba:	e006      	b.n	8003bca <get3D_location+0x7e>
	}
	else{
		osMessageQueuePut(statusQueueHandle, (void *) &statusMessage, 0U, 0);
 8003bbc:	4b29      	ldr	r3, [pc, #164]	; (8003c64 <get3D_location+0x118>)
 8003bbe:	6818      	ldr	r0, [r3, #0]
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	4928      	ldr	r1, [pc, #160]	; (8003c68 <get3D_location+0x11c>)
 8003bc6:	f00b f8d5 	bl	800ed74 <osMessageQueuePut>
	}

	// stop blink code if running and hold I2C bus from being used
	// 		the timeout is to ensure to turn off the thread if no signal is seen
	//TODO: optimize the timeout
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003bca:	4b29      	ldr	r3, [pc, #164]	; (8003c70 <get3D_location+0x124>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f04f 31ff 	mov.w	r1, #4294967295
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f00a ff8a 	bl	800eaec <osSemaphoreAcquire>

	// turn on 3D localization
	osThreadFlagsSet(pulseTaskHandle, 0x00000001U);
 8003bd8:	4b26      	ldr	r3, [pc, #152]	; (8003c74 <get3D_location+0x128>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2101      	movs	r1, #1
 8003bde:	4618      	mov	r0, r3
 8003be0:	f00a fb06 	bl	800e1f0 <osThreadFlagsSet>

	// wait for completion
	osSemaphoreAcquire (locCompleteHandle, GET_3D_LOC_TIMEOUT);
 8003be4:	4b1d      	ldr	r3, [pc, #116]	; (8003c5c <get3D_location+0x110>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8003bec:	4618      	mov	r0, r3
 8003bee:	f00a ff7d 	bl	800eaec <osSemaphoreAcquire>

#ifdef VIVE_THREAD_INFINITE_TIMEOUT
	osDelay(osWaitForever);
#endif

	if(blinkState == LIGHT_LAB_DEMO){
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d119      	bne.n	8003c2c <get3D_location+0xe0>
		while(osOK != osSemaphoreAcquire(lightingLabDemoEndHandle, 0)){
 8003bf8:	e00f      	b.n	8003c1a <get3D_location+0xce>
			if(osOK == osMessageQueueGet(viveQueueHandle, &vive_loc_demo, 0U, 1000)){
 8003bfa:	4b1f      	ldr	r3, [pc, #124]	; (8003c78 <get3D_location+0x12c>)
 8003bfc:	6818      	ldr	r0, [r3, #0]
 8003bfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c02:	2200      	movs	r2, #0
 8003c04:	491d      	ldr	r1, [pc, #116]	; (8003c7c <get3D_location+0x130>)
 8003c06:	f00b f929 	bl	800ee5c <osMessageQueueGet>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d104      	bne.n	8003c1a <get3D_location+0xce>
				APP_THREAD_SendBorderMessage(&vive_loc_demo, sizeof(VIVEVars), "capLoc");
 8003c10:	4a1b      	ldr	r2, [pc, #108]	; (8003c80 <get3D_location+0x134>)
 8003c12:	2118      	movs	r1, #24
 8003c14:	4819      	ldr	r0, [pc, #100]	; (8003c7c <get3D_location+0x130>)
 8003c16:	f010 fe9f 	bl	8014958 <APP_THREAD_SendBorderMessage>
		while(osOK != osSemaphoreAcquire(lightingLabDemoEndHandle, 0)){
 8003c1a:	4b1a      	ldr	r3, [pc, #104]	; (8003c84 <get3D_location+0x138>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2100      	movs	r1, #0
 8003c20:	4618      	mov	r0, r3
 8003c22:	f00a ff63 	bl	800eaec <osSemaphoreAcquire>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1e6      	bne.n	8003bfa <get3D_location+0xae>
//			}
		}
	}

	// release I2C handle
	osSemaphoreRelease(messageI2C_LockHandle);
 8003c2c:	4b10      	ldr	r3, [pc, #64]	; (8003c70 <get3D_location+0x124>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4618      	mov	r0, r3
 8003c32:	f00a ffc1 	bl	800ebb8 <osSemaphoreRelease>

	// turn off 3D localization
	osThreadFlagsSet(pulseTaskHandle, 0x00000002U);
 8003c36:	4b0f      	ldr	r3, [pc, #60]	; (8003c74 <get3D_location+0x128>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2102      	movs	r1, #2
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f00a fad7 	bl	800e1f0 <osThreadFlagsSet>

	if(blinkActive){
 8003c42:	7bfb      	ldrb	r3, [r7, #15]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d005      	beq.n	8003c54 <get3D_location+0x108>
//		// wait for blink thread to turn off
//		//TODO: make safer by making a break condition
//		osSemaphoreAcquire(locNotifyHandle, osWaitForever);

		// enable blink thread
		osThreadFlagsSet(blinkTaskHandle, 0x00000001U);
 8003c48:	4b08      	ldr	r3, [pc, #32]	; (8003c6c <get3D_location+0x120>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2101      	movs	r1, #1
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f00a face 	bl	800e1f0 <osThreadFlagsSet>
	}

}
 8003c54:	bf00      	nop
 8003c56:	3710      	adds	r7, #16
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	20027cf4 	.word	0x20027cf4
 8003c60:	20027cfc 	.word	0x20027cfc
 8003c64:	200278c8 	.word	0x200278c8
 8003c68:	20027d18 	.word	0x20027d18
 8003c6c:	200278a0 	.word	0x200278a0
 8003c70:	200278b4 	.word	0x200278b4
 8003c74:	20027d00 	.word	0x20027d00
 8003c78:	200277b8 	.word	0x200277b8
 8003c7c:	200282c4 	.word	0x200282c4
 8003c80:	080172c4 	.word	0x080172c4
 8003c84:	200278c0 	.word	0x200278c0

08003c88 <enqueue_pulse>:


void enqueue_pulse(Input *self, uint16_t start_time, uint16_t len){
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	460b      	mov	r3, r1
 8003c92:	807b      	strh	r3, [r7, #2]
 8003c94:	4613      	mov	r3, r2
 8003c96:	803b      	strh	r3, [r7, #0]
	Pulse p_in = {self->input_idx_, start_time, len};
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 8003c9e:	723b      	strb	r3, [r7, #8]
 8003ca0:	887b      	ldrh	r3, [r7, #2]
 8003ca2:	817b      	strh	r3, [r7, #10]
 8003ca4:	883b      	ldrh	r3, [r7, #0]
 8003ca6:	81bb      	strh	r3, [r7, #12]
	osMessageQueuePut(pulseQueueHandle, (const void *) &p_in, NULL, 0);
 8003ca8:	4b05      	ldr	r3, [pc, #20]	; (8003cc0 <enqueue_pulse+0x38>)
 8003caa:	6818      	ldr	r0, [r3, #0]
 8003cac:	f107 0108 	add.w	r1, r7, #8
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f00b f85e 	bl	800ed74 <osMessageQueuePut>
//	count = osMessageQueueGetCount(pulseQueueHandle);
}
 8003cb8:	bf00      	nop
 8003cba:	3710      	adds	r7, #16
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	200277b4 	.word	0x200277b4

08003cc4 <InterProcessorTask>:
extern struct LogPacket sensorPacket;
extern struct LogMessage togLogMessageReceived;
static const struct LogMessage nullMessage = {0};
struct LogMessage commandToSend;

void InterProcessorTask(void *argument){
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b086      	sub	sp, #24
 8003cc8:	af02      	add	r7, sp, #8
 8003cca:	6078      	str	r0, [r7, #4]
	uint32_t evt = 0;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	60fb      	str	r3, [r7, #12]
#ifndef DONGLE_CODE
	// ensure secondary processor is not active, trying to send data
	// 		note: this should only happen when debugging and resetting the main processor while secondary is logging
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003cd0:	4b76      	ldr	r3, [pc, #472]	; (8003eac <InterProcessorTask+0x1e8>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f04f 31ff 	mov.w	r1, #4294967295
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f00a ff07 	bl	800eaec <osSemaphoreAcquire>
	while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &nullMessage, sizeof(togLogMessageReceived), 100) != HAL_OK);
 8003cde:	bf00      	nop
 8003ce0:	2364      	movs	r3, #100	; 0x64
 8003ce2:	9300      	str	r3, [sp, #0]
 8003ce4:	2306      	movs	r3, #6
 8003ce6:	4a72      	ldr	r2, [pc, #456]	; (8003eb0 <InterProcessorTask+0x1ec>)
 8003ce8:	21e6      	movs	r1, #230	; 0xe6
 8003cea:	4872      	ldr	r0, [pc, #456]	; (8003eb4 <InterProcessorTask+0x1f0>)
 8003cec:	f005 f846 	bl	8008d7c <HAL_I2C_Master_Transmit>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1f4      	bne.n	8003ce0 <InterProcessorTask+0x1c>
	osSemaphoreRelease(messageI2C_LockHandle);
 8003cf6:	4b6d      	ldr	r3, [pc, #436]	; (8003eac <InterProcessorTask+0x1e8>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f00a ff5c 	bl	800ebb8 <osSemaphoreRelease>
#endif
	while(1){

		evt = osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 8003d00:	f04f 32ff 	mov.w	r2, #4294967295
 8003d04:	2100      	movs	r1, #0
 8003d06:	2001      	movs	r0, #1
 8003d08:	f00a fb24 	bl	800e354 <osThreadFlagsWait>
 8003d0c:	60f8      	str	r0, [r7, #12]

		// if signal was received successfully, start blink task
		if ( (evt & 0x00000001U) == 0x00000001U)  {
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f003 0301 	and.w	r3, r3, #1
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d0f3      	beq.n	8003d00 <InterProcessorTask+0x3c>

			// tell secondary processor to start logging (in blocking mode)
			memcpy(&commandToSend, &togLogMessageReceived, sizeof(struct LogMessage));
 8003d18:	4b67      	ldr	r3, [pc, #412]	; (8003eb8 <InterProcessorTask+0x1f4>)
 8003d1a:	4a68      	ldr	r2, [pc, #416]	; (8003ebc <InterProcessorTask+0x1f8>)
 8003d1c:	6811      	ldr	r1, [r2, #0]
 8003d1e:	6019      	str	r1, [r3, #0]
 8003d20:	8892      	ldrh	r2, [r2, #4]
 8003d22:	809a      	strh	r2, [r3, #4]
//			osThreadFlagsClear(0x0000000FU);
			osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003d24:	4b61      	ldr	r3, [pc, #388]	; (8003eac <InterProcessorTask+0x1e8>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f04f 31ff 	mov.w	r1, #4294967295
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f00a fedd 	bl	800eaec <osSemaphoreAcquire>
			//while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &commandToSend, sizeof(togLogMessageReceived), 100) != HAL_OK);
			HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &commandToSend, sizeof(togLogMessageReceived), 100);
 8003d32:	2364      	movs	r3, #100	; 0x64
 8003d34:	9300      	str	r3, [sp, #0]
 8003d36:	2306      	movs	r3, #6
 8003d38:	4a5f      	ldr	r2, [pc, #380]	; (8003eb8 <InterProcessorTask+0x1f4>)
 8003d3a:	21e6      	movs	r1, #230	; 0xe6
 8003d3c:	485d      	ldr	r0, [pc, #372]	; (8003eb4 <InterProcessorTask+0x1f0>)
 8003d3e:	f005 f81d 	bl	8008d7c <HAL_I2C_Master_Transmit>

			osDelay(100);
 8003d42:	2064      	movs	r0, #100	; 0x64
 8003d44:	f00a fb9a 	bl	800e47c <osDelay>
			osSemaphoreRelease(messageI2C_LockHandle);
 8003d48:	4b58      	ldr	r3, [pc, #352]	; (8003eac <InterProcessorTask+0x1e8>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f00a ff33 	bl	800ebb8 <osSemaphoreRelease>

			// message passing until told to stop
			while(1){

				// grab an event flag if available
				evt = osThreadFlagsWait (0x00000006U, osFlagsWaitAny, osWaitForever);
 8003d52:	f04f 32ff 	mov.w	r2, #4294967295
 8003d56:	2100      	movs	r1, #0
 8003d58:	2006      	movs	r0, #6
 8003d5a:	f00a fafb 	bl	800e354 <osThreadFlagsWait>
 8003d5e:	60f8      	str	r0, [r7, #12]

				// if an interrupt is received indicating a message is waiting to be received
 				if( (evt & 0x00000004U) == 0x00000004U){
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f003 0304 	and.w	r3, r3, #4
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d079      	beq.n	8003e5e <InterProcessorTask+0x19a>

 					osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003d6a:	4b50      	ldr	r3, [pc, #320]	; (8003eac <InterProcessorTask+0x1e8>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f04f 31ff 	mov.w	r1, #4294967295
 8003d72:	4618      	mov	r0, r3
 8003d74:	f00a feba 	bl	800eaec <osSemaphoreAcquire>

 					// send command packet to MCU
 					while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &commandToSend, sizeof(struct LogMessage), 100) != HAL_OK){
 8003d78:	e00e      	b.n	8003d98 <InterProcessorTask+0xd4>
 						osSemaphoreRelease(messageI2C_LockHandle);
 8003d7a:	4b4c      	ldr	r3, [pc, #304]	; (8003eac <InterProcessorTask+0x1e8>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f00a ff1a 	bl	800ebb8 <osSemaphoreRelease>
 						osDelay(100);
 8003d84:	2064      	movs	r0, #100	; 0x64
 8003d86:	f00a fb79 	bl	800e47c <osDelay>
 						osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003d8a:	4b48      	ldr	r3, [pc, #288]	; (8003eac <InterProcessorTask+0x1e8>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f04f 31ff 	mov.w	r1, #4294967295
 8003d92:	4618      	mov	r0, r3
 8003d94:	f00a feaa 	bl	800eaec <osSemaphoreAcquire>
 					while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &commandToSend, sizeof(struct LogMessage), 100) != HAL_OK){
 8003d98:	2364      	movs	r3, #100	; 0x64
 8003d9a:	9300      	str	r3, [sp, #0]
 8003d9c:	2306      	movs	r3, #6
 8003d9e:	4a46      	ldr	r2, [pc, #280]	; (8003eb8 <InterProcessorTask+0x1f4>)
 8003da0:	21e6      	movs	r1, #230	; 0xe6
 8003da2:	4844      	ldr	r0, [pc, #272]	; (8003eb4 <InterProcessorTask+0x1f0>)
 8003da4:	f004 ffea 	bl	8008d7c <HAL_I2C_Master_Transmit>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1e5      	bne.n	8003d7a <InterProcessorTask+0xb6>
// 					evt = osThreadFlagsWait(0x00000010U, osFlagsWaitAny, osWaitForever);
 					// ensure I2C is disabled
// 					HAL_I2C_Master_Abort_IT(&hi2c1, SECONDARY_MCU_ADDRESS << 1);

 					// clear receiving flag
 					osThreadFlagsClear(0x00000008U);
 8003dae:	2008      	movs	r0, #8
 8003db0:	f00a fa80 	bl	800e2b4 <osThreadFlagsClear>
 					// grab packet from secondary MCU
 					while(HAL_I2C_Master_Receive_IT(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &receivedPacket, sizeof(struct secondaryProcessorData)) != HAL_OK){
 8003db4:	e00e      	b.n	8003dd4 <InterProcessorTask+0x110>
 						osSemaphoreRelease(messageI2C_LockHandle);
 8003db6:	4b3d      	ldr	r3, [pc, #244]	; (8003eac <InterProcessorTask+0x1e8>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f00a fefc 	bl	800ebb8 <osSemaphoreRelease>
 						osDelay(100);
 8003dc0:	2064      	movs	r0, #100	; 0x64
 8003dc2:	f00a fb5b 	bl	800e47c <osDelay>
 						osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003dc6:	4b39      	ldr	r3, [pc, #228]	; (8003eac <InterProcessorTask+0x1e8>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f04f 31ff 	mov.w	r1, #4294967295
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f00a fe8c 	bl	800eaec <osSemaphoreAcquire>
 					while(HAL_I2C_Master_Receive_IT(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &receivedPacket, sizeof(struct secondaryProcessorData)) != HAL_OK){
 8003dd4:	2358      	movs	r3, #88	; 0x58
 8003dd6:	4a3a      	ldr	r2, [pc, #232]	; (8003ec0 <InterProcessorTask+0x1fc>)
 8003dd8:	21e6      	movs	r1, #230	; 0xe6
 8003dda:	4836      	ldr	r0, [pc, #216]	; (8003eb4 <InterProcessorTask+0x1f0>)
 8003ddc:	f005 f9b8 	bl	8009150 <HAL_I2C_Master_Receive_IT>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1e7      	bne.n	8003db6 <InterProcessorTask+0xf2>
 					}
// 					taskEXIT_CRITICAL();
					// wait until packet is received
					evt = osThreadFlagsWait(0x0000000AU, osFlagsWaitAny, osWaitForever);
 8003de6:	f04f 32ff 	mov.w	r2, #4294967295
 8003dea:	2100      	movs	r1, #0
 8003dec:	200a      	movs	r0, #10
 8003dee:	f00a fab1 	bl	800e354 <osThreadFlagsWait>
 8003df2:	60f8      	str	r0, [r7, #12]
					// ensure I2C is disabled
//					HAL_I2C_Master_Abort_IT(&hi2c1, SECONDARY_MCU_ADDRESS << 1);

					osSemaphoreRelease(messageI2C_LockHandle);
 8003df4:	4b2d      	ldr	r3, [pc, #180]	; (8003eac <InterProcessorTask+0x1e8>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f00a fedd 	bl	800ebb8 <osSemaphoreRelease>


//					evt = osThreadFlagsWait(0x00000002U, osFlagsWaitAny, 0);
					// if thread was told to stop, break from while loop!
					if( (evt & 0x00000002U) == 0x00000002U ) break;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f003 0302 	and.w	r3, r3, #2
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d14e      	bne.n	8003ea6 <InterProcessorTask+0x1e2>

					// package received data into 100ms chunks and put in queue
					parsedPacket.tick_ms = receivedPacket.tick_ms;
 8003e08:	4b2d      	ldr	r3, [pc, #180]	; (8003ec0 <InterProcessorTask+0x1fc>)
 8003e0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e0c:	4a2d      	ldr	r2, [pc, #180]	; (8003ec4 <InterProcessorTask+0x200>)
 8003e0e:	6113      	str	r3, [r2, #16]
					parsedPacket.epoch = receivedPacket.epoch;
 8003e10:	4b2b      	ldr	r3, [pc, #172]	; (8003ec0 <InterProcessorTask+0x1fc>)
 8003e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e14:	4a2b      	ldr	r2, [pc, #172]	; (8003ec4 <InterProcessorTask+0x200>)
 8003e16:	6153      	str	r3, [r2, #20]

					for(int i = 0; i < 5; i++)
 8003e18:	2300      	movs	r3, #0
 8003e1a:	60bb      	str	r3, [r7, #8]
 8003e1c:	e01c      	b.n	8003e58 <InterProcessorTask+0x194>
					{
						memcpy(&parsedPacket.temple, &receivedPacket.temp.temple[i], sizeof(struct thermopileData));
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	00db      	lsls	r3, r3, #3
 8003e22:	4a27      	ldr	r2, [pc, #156]	; (8003ec0 <InterProcessorTask+0x1fc>)
 8003e24:	4413      	add	r3, r2
 8003e26:	2208      	movs	r2, #8
 8003e28:	4619      	mov	r1, r3
 8003e2a:	4826      	ldr	r0, [pc, #152]	; (8003ec4 <InterProcessorTask+0x200>)
 8003e2c:	f012 f88e 	bl	8015f4c <memcpy>
						memcpy(&parsedPacket.nose, &receivedPacket.temp.nose[i], sizeof(struct thermopileData));
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	3305      	adds	r3, #5
 8003e34:	00db      	lsls	r3, r3, #3
 8003e36:	4a22      	ldr	r2, [pc, #136]	; (8003ec0 <InterProcessorTask+0x1fc>)
 8003e38:	4413      	add	r3, r2
 8003e3a:	2208      	movs	r2, #8
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	4822      	ldr	r0, [pc, #136]	; (8003ec8 <InterProcessorTask+0x204>)
 8003e40:	f012 f884 	bl	8015f4c <memcpy>

						// pass to master thread to handle
						osMessageQueuePut(interProcessorMsgQueueHandle, (void *) &parsedPacket, 0U, 0);
 8003e44:	4b21      	ldr	r3, [pc, #132]	; (8003ecc <InterProcessorTask+0x208>)
 8003e46:	6818      	ldr	r0, [r3, #0]
 8003e48:	2300      	movs	r3, #0
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	491d      	ldr	r1, [pc, #116]	; (8003ec4 <InterProcessorTask+0x200>)
 8003e4e:	f00a ff91 	bl	800ed74 <osMessageQueuePut>
					for(int i = 0; i < 5; i++)
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	3301      	adds	r3, #1
 8003e56:	60bb      	str	r3, [r7, #8]
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	2b04      	cmp	r3, #4
 8003e5c:	dddf      	ble.n	8003e1e <InterProcessorTask+0x15a>

					}
				}

				// stop thread and clear queues
				if( (evt & 0x00000002U) == 0x00000002U){
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f003 0302 	and.w	r3, r3, #2
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	f43f af74 	beq.w	8003d52 <InterProcessorTask+0x8e>

					/// clear transmission flag
// 					osThreadFlagsClear(0x00000010U);
					// tell secondary processor to stop logging (in blocking mode)
					osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003e6a:	4b10      	ldr	r3, [pc, #64]	; (8003eac <InterProcessorTask+0x1e8>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f04f 31ff 	mov.w	r1, #4294967295
 8003e72:	4618      	mov	r0, r3
 8003e74:	f00a fe3a 	bl	800eaec <osSemaphoreAcquire>
					while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &nullMessage, sizeof(togLogMessageReceived), 100) != HAL_OK);
 8003e78:	bf00      	nop
 8003e7a:	2364      	movs	r3, #100	; 0x64
 8003e7c:	9300      	str	r3, [sp, #0]
 8003e7e:	2306      	movs	r3, #6
 8003e80:	4a0b      	ldr	r2, [pc, #44]	; (8003eb0 <InterProcessorTask+0x1ec>)
 8003e82:	21e6      	movs	r1, #230	; 0xe6
 8003e84:	480b      	ldr	r0, [pc, #44]	; (8003eb4 <InterProcessorTask+0x1f0>)
 8003e86:	f004 ff79 	bl	8008d7c <HAL_I2C_Master_Transmit>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d1f4      	bne.n	8003e7a <InterProcessorTask+0x1b6>
					osSemaphoreRelease(messageI2C_LockHandle);
 8003e90:	4b06      	ldr	r3, [pc, #24]	; (8003eac <InterProcessorTask+0x1e8>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4618      	mov	r0, r3
 8003e96:	f00a fe8f 	bl	800ebb8 <osSemaphoreRelease>
					// wait until transmit is complete
//					evt = osThreadFlagsWait(0x00000010U, osFlagsWaitAny, osWaitForever);

					// empty queue
					osMessageQueueReset(interProcessorMsgQueueHandle);
 8003e9a:	4b0c      	ldr	r3, [pc, #48]	; (8003ecc <InterProcessorTask+0x208>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f00b f84e 	bl	800ef40 <osMessageQueueReset>

					break;
 8003ea4:	e000      	b.n	8003ea8 <InterProcessorTask+0x1e4>
					if( (evt & 0x00000002U) == 0x00000002U ) break;
 8003ea6:	bf00      	nop
		evt = osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 8003ea8:	e72a      	b.n	8003d00 <InterProcessorTask+0x3c>
 8003eaa:	bf00      	nop
 8003eac:	200278b4 	.word	0x200278b4
 8003eb0:	08017800 	.word	0x08017800
 8003eb4:	20027eb0 	.word	0x20027eb0
 8003eb8:	20028334 	.word	0x20028334
 8003ebc:	200277bc 	.word	0x200277bc
 8003ec0:	200282dc 	.word	0x200282dc
 8003ec4:	2002833c 	.word	0x2002833c
 8003ec8:	20028344 	.word	0x20028344
 8003ecc:	200278c4 	.word	0x200278c4

08003ed0 <HAL_I2C_MasterTxCpltCallback>:
//	osThreadFlagsSet(interProcessorTaskHandle, 0x00000008U);
//}

volatile uint8_t test_1 = 0;
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
	// notify sending thread that message has been sent
//	osThreadFlagsSet(sendMsgToMainTaskHandle, 0x00000001U);
	osThreadFlagsSet(interProcTaskHandle, 0x00000010U);
 8003ed8:	4b06      	ldr	r3, [pc, #24]	; (8003ef4 <HAL_I2C_MasterTxCpltCallback+0x24>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2110      	movs	r1, #16
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f00a f986 	bl	800e1f0 <osThreadFlagsSet>
	test_1 = 1;
 8003ee4:	4b04      	ldr	r3, [pc, #16]	; (8003ef8 <HAL_I2C_MasterTxCpltCallback+0x28>)
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	701a      	strb	r2, [r3, #0]
}
 8003eea:	bf00      	nop
 8003eec:	3708      	adds	r7, #8
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	20027cf8 	.word	0x20027cf8
 8003ef8:	20000acb 	.word	0x20000acb

08003efc <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
	// notify receiving thread that a message has been received
	osThreadFlagsSet(interProcTaskHandle, 0x00000008U);
 8003f04:	4b04      	ldr	r3, [pc, #16]	; (8003f18 <HAL_I2C_MasterRxCpltCallback+0x1c>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2108      	movs	r1, #8
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f00a f970 	bl	800e1f0 <osThreadFlagsSet>
}
 8003f10:	bf00      	nop
 8003f12:	3708      	adds	r7, #8
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	20027cf8 	.word	0x20027cf8

08003f1c <setup_LP5523>:
const uint8_t packet_array[9] = {LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN};
uint8_t deviceAddress;
uint8_t led_PWM[9] = {0};
uint8_t packet;

void setup_LP5523(uint8_t ADDR){
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b086      	sub	sp, #24
 8003f20:	af04      	add	r7, sp, #16
 8003f22:	4603      	mov	r3, r0
 8003f24:	71fb      	strb	r3, [r7, #7]

#ifndef DONGLE_CODE
	deviceAddress = ADDR << 1;
 8003f26:	79fb      	ldrb	r3, [r7, #7]
 8003f28:	005b      	lsls	r3, r3, #1
 8003f2a:	b2da      	uxtb	r2, r3
 8003f2c:	4b2e      	ldr	r3, [pc, #184]	; (8003fe8 <setup_LP5523+0xcc>)
 8003f2e:	701a      	strb	r2, [r3, #0]

	// enable chip
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003f30:	4b2e      	ldr	r3, [pc, #184]	; (8003fec <setup_LP5523+0xd0>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f04f 31ff 	mov.w	r1, #4294967295
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f00a fdd7 	bl	800eaec <osSemaphoreAcquire>
	packet = LP5525_CHIP_EN;
 8003f3e:	4b2c      	ldr	r3, [pc, #176]	; (8003ff0 <setup_LP5523+0xd4>)
 8003f40:	2240      	movs	r2, #64	; 0x40
 8003f42:	701a      	strb	r2, [r3, #0]
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_EN_CNTRL1_REG, 1, &packet, 1, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_EN_CNTRL1_REG, 1, &packet, 1, I2C_TIMEOUT);
 8003f44:	4b28      	ldr	r3, [pc, #160]	; (8003fe8 <setup_LP5523+0xcc>)
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	b299      	uxth	r1, r3
 8003f4a:	2364      	movs	r3, #100	; 0x64
 8003f4c:	9302      	str	r3, [sp, #8]
 8003f4e:	2301      	movs	r3, #1
 8003f50:	9301      	str	r3, [sp, #4]
 8003f52:	4b27      	ldr	r3, [pc, #156]	; (8003ff0 <setup_LP5523+0xd4>)
 8003f54:	9300      	str	r3, [sp, #0]
 8003f56:	2301      	movs	r3, #1
 8003f58:	2200      	movs	r2, #0
 8003f5a:	4826      	ldr	r0, [pc, #152]	; (8003ff4 <setup_LP5523+0xd8>)
 8003f5c:	f005 f968 	bl	8009230 <HAL_I2C_Mem_Write>

	// put charge-pump in auto-mode, serial auto increment, internal clock
	packet = CP_MODE_AUTO | EN_AUTO_INC | INT_CLK_EN;
 8003f60:	4b23      	ldr	r3, [pc, #140]	; (8003ff0 <setup_LP5523+0xd4>)
 8003f62:	224f      	movs	r2, #79	; 0x4f
 8003f64:	701a      	strb	r2, [r3, #0]
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_MISC_REG, 1, &packet, 1, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_MISC_REG, 1, &packet, 1, I2C_TIMEOUT);
 8003f66:	4b20      	ldr	r3, [pc, #128]	; (8003fe8 <setup_LP5523+0xcc>)
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	b299      	uxth	r1, r3
 8003f6c:	2364      	movs	r3, #100	; 0x64
 8003f6e:	9302      	str	r3, [sp, #8]
 8003f70:	2301      	movs	r3, #1
 8003f72:	9301      	str	r3, [sp, #4]
 8003f74:	4b1e      	ldr	r3, [pc, #120]	; (8003ff0 <setup_LP5523+0xd4>)
 8003f76:	9300      	str	r3, [sp, #0]
 8003f78:	2301      	movs	r3, #1
 8003f7a:	2236      	movs	r2, #54	; 0x36
 8003f7c:	481d      	ldr	r0, [pc, #116]	; (8003ff4 <setup_LP5523+0xd8>)
 8003f7e:	f005 f957 	bl	8009230 <HAL_I2C_Mem_Write>

	// set PWM level (0 to 255)
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_PWM_REG, 1, led_PWM, 9, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_PWM_REG, 1, led_PWM, 9, I2C_TIMEOUT);
 8003f82:	4b19      	ldr	r3, [pc, #100]	; (8003fe8 <setup_LP5523+0xcc>)
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	b299      	uxth	r1, r3
 8003f88:	2364      	movs	r3, #100	; 0x64
 8003f8a:	9302      	str	r3, [sp, #8]
 8003f8c:	2309      	movs	r3, #9
 8003f8e:	9301      	str	r3, [sp, #4]
 8003f90:	4b19      	ldr	r3, [pc, #100]	; (8003ff8 <setup_LP5523+0xdc>)
 8003f92:	9300      	str	r3, [sp, #0]
 8003f94:	2301      	movs	r3, #1
 8003f96:	2216      	movs	r2, #22
 8003f98:	4816      	ldr	r0, [pc, #88]	; (8003ff4 <setup_LP5523+0xd8>)
 8003f9a:	f005 f949 	bl	8009230 <HAL_I2C_Mem_Write>

	// set current control (0 to 25.5 mA) - step size is 100uA
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CURRENT_CTRL_REG, 1, led_current, 9, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CURRENT_CTRL_REG, 1, led_current, 9, I2C_TIMEOUT);
 8003f9e:	4b12      	ldr	r3, [pc, #72]	; (8003fe8 <setup_LP5523+0xcc>)
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	b299      	uxth	r1, r3
 8003fa4:	2364      	movs	r3, #100	; 0x64
 8003fa6:	9302      	str	r3, [sp, #8]
 8003fa8:	2309      	movs	r3, #9
 8003faa:	9301      	str	r3, [sp, #4]
 8003fac:	4b13      	ldr	r3, [pc, #76]	; (8003ffc <setup_LP5523+0xe0>)
 8003fae:	9300      	str	r3, [sp, #0]
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	2226      	movs	r2, #38	; 0x26
 8003fb4:	480f      	ldr	r0, [pc, #60]	; (8003ff4 <setup_LP5523+0xd8>)
 8003fb6:	f005 f93b 	bl	8009230 <HAL_I2C_Mem_Write>

	// enable logarithmic dimming
//	packet = LOG_EN;
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CNTRL_REG, 1, packet_array, 9, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CNTRL_REG, 1, packet_array, 9, I2C_TIMEOUT);
 8003fba:	4b0b      	ldr	r3, [pc, #44]	; (8003fe8 <setup_LP5523+0xcc>)
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	b299      	uxth	r1, r3
 8003fc0:	2364      	movs	r3, #100	; 0x64
 8003fc2:	9302      	str	r3, [sp, #8]
 8003fc4:	2309      	movs	r3, #9
 8003fc6:	9301      	str	r3, [sp, #4]
 8003fc8:	4b0d      	ldr	r3, [pc, #52]	; (8004000 <setup_LP5523+0xe4>)
 8003fca:	9300      	str	r3, [sp, #0]
 8003fcc:	2301      	movs	r3, #1
 8003fce:	2206      	movs	r2, #6
 8003fd0:	4808      	ldr	r0, [pc, #32]	; (8003ff4 <setup_LP5523+0xd8>)
 8003fd2:	f005 f92d 	bl	8009230 <HAL_I2C_Mem_Write>

	osSemaphoreRelease(messageI2C_LockHandle);
 8003fd6:	4b05      	ldr	r3, [pc, #20]	; (8003fec <setup_LP5523+0xd0>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f00a fdec 	bl	800ebb8 <osSemaphoreRelease>
#else
	BSP_LED_Init(LED_BLUE);
	BSP_LED_Init(LED_GREEN);
	BSP_LED_Init(LED_RED);
#endif
}
 8003fe0:	bf00      	nop
 8003fe2:	3708      	adds	r7, #8
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	20028355 	.word	0x20028355
 8003fec:	200278b4 	.word	0x200278b4
 8003ff0:	20028354 	.word	0x20028354
 8003ff4:	20027eb0 	.word	0x20027eb0
 8003ff8:	20000ae4 	.word	0x20000ae4
 8003ffc:	2000006c 	.word	0x2000006c
 8004000:	08017808 	.word	0x08017808

08004004 <FrontLightsSet>:
//
//  return true;
//}


void FrontLightsSet(union ColorComplex *setColors){
 8004004:	b580      	push	{r7, lr}
 8004006:	b086      	sub	sp, #24
 8004008:	af04      	add	r7, sp, #16
 800400a:	6078      	str	r0, [r7, #4]

	memcpy(led_left_PWM, setColors, 9);
 800400c:	4b1b      	ldr	r3, [pc, #108]	; (800407c <FrontLightsSet+0x78>)
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	6810      	ldr	r0, [r2, #0]
 8004012:	6851      	ldr	r1, [r2, #4]
 8004014:	c303      	stmia	r3!, {r0, r1}
 8004016:	7a12      	ldrb	r2, [r2, #8]
 8004018:	701a      	strb	r2, [r3, #0]
	memcpy(led_right_PWM, &(setColors->color[9]), 9);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f103 0209 	add.w	r2, r3, #9
 8004020:	4b17      	ldr	r3, [pc, #92]	; (8004080 <FrontLightsSet+0x7c>)
 8004022:	6810      	ldr	r0, [r2, #0]
 8004024:	6851      	ldr	r1, [r2, #4]
 8004026:	c303      	stmia	r3!, {r0, r1}
 8004028:	7a12      	ldrb	r2, [r2, #8]
 800402a:	701a      	strb	r2, [r3, #0]
#ifndef DONGLE_CODE
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 800402c:	4b15      	ldr	r3, [pc, #84]	; (8004084 <FrontLightsSet+0x80>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f04f 31ff 	mov.w	r1, #4294967295
 8004034:	4618      	mov	r0, r3
 8004036:	f00a fd59 	bl	800eaec <osSemaphoreAcquire>
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_LEFT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_left_PWM, 9, I2C_TIMEOUT);
 800403a:	2364      	movs	r3, #100	; 0x64
 800403c:	9302      	str	r3, [sp, #8]
 800403e:	2309      	movs	r3, #9
 8004040:	9301      	str	r3, [sp, #4]
 8004042:	4b0e      	ldr	r3, [pc, #56]	; (800407c <FrontLightsSet+0x78>)
 8004044:	9300      	str	r3, [sp, #0]
 8004046:	2301      	movs	r3, #1
 8004048:	2216      	movs	r2, #22
 800404a:	2168      	movs	r1, #104	; 0x68
 800404c:	480e      	ldr	r0, [pc, #56]	; (8004088 <FrontLightsSet+0x84>)
 800404e:	f005 f8ef 	bl	8009230 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_RIGHT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_right_PWM, 9, I2C_TIMEOUT);
 8004052:	2364      	movs	r3, #100	; 0x64
 8004054:	9302      	str	r3, [sp, #8]
 8004056:	2309      	movs	r3, #9
 8004058:	9301      	str	r3, [sp, #4]
 800405a:	4b09      	ldr	r3, [pc, #36]	; (8004080 <FrontLightsSet+0x7c>)
 800405c:	9300      	str	r3, [sp, #0]
 800405e:	2301      	movs	r3, #1
 8004060:	2216      	movs	r2, #22
 8004062:	216a      	movs	r1, #106	; 0x6a
 8004064:	4808      	ldr	r0, [pc, #32]	; (8004088 <FrontLightsSet+0x84>)
 8004066:	f005 f8e3 	bl	8009230 <HAL_I2C_Mem_Write>
	osSemaphoreRelease(messageI2C_LockHandle);
 800406a:	4b06      	ldr	r3, [pc, #24]	; (8004084 <FrontLightsSet+0x80>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4618      	mov	r0, r3
 8004070:	f00a fda2 	bl	800ebb8 <osSemaphoreRelease>
	    	else
	    	{
	    		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
	    	}
#endif
}
 8004074:	bf00      	nop
 8004076:	3708      	adds	r7, #8
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	20000acc 	.word	0x20000acc
 8004080:	20000ad8 	.word	0x20000ad8
 8004084:	200278b4 	.word	0x200278b4
 8004088:	20027eb0 	.word	0x20027eb0

0800408c <ThreadFrontLightsTask>:
    };

struct test_color tempComplexLight;

void ThreadFrontLightsTask(void *argument)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b08a      	sub	sp, #40	; 0x28
 8004090:	af04      	add	r7, sp, #16
 8004092:	6078      	str	r0, [r7, #4]

//	osDelay(1); // added delay because it seems that semaphores arent fully initialized and code stalls when releasing semaphore
//#ifndef DONGLE_CODE
	setup_LP5523(LIS3DH_LEFT_ADDRESS);
 8004094:	2034      	movs	r0, #52	; 0x34
 8004096:	f7ff ff41 	bl	8003f1c <setup_LP5523>
	setup_LP5523(LIS3DH_RIGHT_ADDRESS);
 800409a:	2035      	movs	r0, #53	; 0x35
 800409c:	f7ff ff3e 	bl	8003f1c <setup_LP5523>

	uint32_t lightsSimpleMessageReceived;

	while(1){

		lightsSimpleMessageReceived = 0;
 80040a0:	2300      	movs	r3, #0
 80040a2:	60fb      	str	r3, [r7, #12]
//		tempComplexLight.right_side_r = 150;
//		tempComplexLight.right_top_r = 150;
//
//		FrontLightsSet(&tempComplexLight);

		osDelay(1);
 80040a4:	2001      	movs	r0, #1
 80040a6:	f00a f9e9 	bl	800e47c <osDelay>

		osMessageQueueGet(lightsSimpleQueueHandle, &lightsSimpleMessageReceived, 0U, osWaitForever);
 80040aa:	4b2f      	ldr	r3, [pc, #188]	; (8004168 <ThreadFrontLightsTask+0xdc>)
 80040ac:	6818      	ldr	r0, [r3, #0]
 80040ae:	f107 010c 	add.w	r1, r7, #12
 80040b2:	f04f 33ff 	mov.w	r3, #4294967295
 80040b6:	2200      	movs	r2, #0
 80040b8:	f00a fed0 	bl	800ee5c <osMessageQueueGet>

		for(int i = 0; i<= 8; i++){
 80040bc:	2300      	movs	r3, #0
 80040be:	617b      	str	r3, [r7, #20]
 80040c0:	e011      	b.n	80040e6 <ThreadFrontLightsTask+0x5a>
			led_left_PWM[i] = (lightsSimpleMessageReceived & 0x01) * 255;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	425b      	negs	r3, r3
 80040ce:	b2d9      	uxtb	r1, r3
 80040d0:	4a26      	ldr	r2, [pc, #152]	; (800416c <ThreadFrontLightsTask+0xe0>)
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	4413      	add	r3, r2
 80040d6:	460a      	mov	r2, r1
 80040d8:	701a      	strb	r2, [r3, #0]
			lightsSimpleMessageReceived = lightsSimpleMessageReceived >> 1;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	085b      	lsrs	r3, r3, #1
 80040de:	60fb      	str	r3, [r7, #12]
		for(int i = 0; i<= 8; i++){
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	3301      	adds	r3, #1
 80040e4:	617b      	str	r3, [r7, #20]
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	2b08      	cmp	r3, #8
 80040ea:	ddea      	ble.n	80040c2 <ThreadFrontLightsTask+0x36>
		}

		for(int i = 0; i<= 8; i++){
 80040ec:	2300      	movs	r3, #0
 80040ee:	613b      	str	r3, [r7, #16]
 80040f0:	e011      	b.n	8004116 <ThreadFrontLightsTask+0x8a>
			led_right_PWM[i] = (lightsSimpleMessageReceived & 0x01) * 255;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	f003 0301 	and.w	r3, r3, #1
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	425b      	negs	r3, r3
 80040fe:	b2d9      	uxtb	r1, r3
 8004100:	4a1b      	ldr	r2, [pc, #108]	; (8004170 <ThreadFrontLightsTask+0xe4>)
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	4413      	add	r3, r2
 8004106:	460a      	mov	r2, r1
 8004108:	701a      	strb	r2, [r3, #0]
			lightsSimpleMessageReceived = lightsSimpleMessageReceived >> 1;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	085b      	lsrs	r3, r3, #1
 800410e:	60fb      	str	r3, [r7, #12]
		for(int i = 0; i<= 8; i++){
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	3301      	adds	r3, #1
 8004114:	613b      	str	r3, [r7, #16]
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	2b08      	cmp	r3, #8
 800411a:	ddea      	ble.n	80040f2 <ThreadFrontLightsTask+0x66>
		}

		osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 800411c:	4b15      	ldr	r3, [pc, #84]	; (8004174 <ThreadFrontLightsTask+0xe8>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f04f 31ff 	mov.w	r1, #4294967295
 8004124:	4618      	mov	r0, r3
 8004126:	f00a fce1 	bl	800eaec <osSemaphoreAcquire>
		HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_LEFT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_left_PWM, 9, I2C_TIMEOUT);
 800412a:	2364      	movs	r3, #100	; 0x64
 800412c:	9302      	str	r3, [sp, #8]
 800412e:	2309      	movs	r3, #9
 8004130:	9301      	str	r3, [sp, #4]
 8004132:	4b0e      	ldr	r3, [pc, #56]	; (800416c <ThreadFrontLightsTask+0xe0>)
 8004134:	9300      	str	r3, [sp, #0]
 8004136:	2301      	movs	r3, #1
 8004138:	2216      	movs	r2, #22
 800413a:	2168      	movs	r1, #104	; 0x68
 800413c:	480e      	ldr	r0, [pc, #56]	; (8004178 <ThreadFrontLightsTask+0xec>)
 800413e:	f005 f877 	bl	8009230 <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_RIGHT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_right_PWM, 9, I2C_TIMEOUT);
 8004142:	2364      	movs	r3, #100	; 0x64
 8004144:	9302      	str	r3, [sp, #8]
 8004146:	2309      	movs	r3, #9
 8004148:	9301      	str	r3, [sp, #4]
 800414a:	4b09      	ldr	r3, [pc, #36]	; (8004170 <ThreadFrontLightsTask+0xe4>)
 800414c:	9300      	str	r3, [sp, #0]
 800414e:	2301      	movs	r3, #1
 8004150:	2216      	movs	r2, #22
 8004152:	216a      	movs	r1, #106	; 0x6a
 8004154:	4808      	ldr	r0, [pc, #32]	; (8004178 <ThreadFrontLightsTask+0xec>)
 8004156:	f005 f86b 	bl	8009230 <HAL_I2C_Mem_Write>
		osSemaphoreRelease(messageI2C_LockHandle);
 800415a:	4b06      	ldr	r3, [pc, #24]	; (8004174 <ThreadFrontLightsTask+0xe8>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4618      	mov	r0, r3
 8004160:	f00a fd2a 	bl	800ebb8 <osSemaphoreRelease>
		lightsSimpleMessageReceived = 0;
 8004164:	e79c      	b.n	80040a0 <ThreadFrontLightsTask+0x14>
 8004166:	bf00      	nop
 8004168:	200278bc 	.word	0x200278bc
 800416c:	20000acc 	.word	0x20000acc
 8004170:	20000ad8 	.word	0x20000ad8
 8004174:	200278b4 	.word	0x200278b4
 8004178:	20027eb0 	.word	0x20027eb0

0800417c <LL_RCC_LSE_SetDriveCapability>:
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8004184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800418c:	f023 0218 	bic.w	r2, r3, #24
 8004190:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4313      	orrs	r3, r2
 8004198:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80041ac:	f002 faca 	bl	8006744 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80041b0:	f000 f81c 	bl	80041ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80041b4:	f7fe fcb0 	bl	8002b18 <MX_GPIO_Init>
  MX_DMA_Init();
 80041b8:	f7fd fc13 	bl	80019e2 <MX_DMA_Init>
  MX_ADC1_Init();
 80041bc:	f7fc fe40 	bl	8000e40 <MX_ADC1_Init>
  MX_RTC_Init();
 80041c0:	f000 fef2 	bl	8004fa8 <MX_RTC_Init>
  MX_TIM2_Init();
 80041c4:	f001 fd30 	bl	8005c28 <MX_TIM2_Init>
  MX_RF_Init();
 80041c8:	f000 fed6 	bl	8004f78 <MX_RF_Init>
  MX_I2C1_Init();
 80041cc:	f7ff fb42 	bl	8003854 <MX_I2C1_Init>
  MX_COMP1_Init();
 80041d0:	f7fd faf4 	bl	80017bc <MX_COMP1_Init>
  MX_TIM16_Init();
 80041d4:	f001 fd9e 	bl	8005d14 <MX_TIM16_Init>
//  MX_IWDG_Init();
  /* USER CODE BEGIN 2 */
  MX_TSC_Init();
 80041d8:	f002 f9f2 	bl	80065c0 <MX_TSC_Init>

//  HAL_IWDG_Refresh(&hiwdg);

  /* USER CODE END 2 */
  /* Init scheduler */
  osKernelInitialize();
 80041dc:	f009 fef4 	bl	800dfc8 <osKernelInitialize>
 
  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 80041e0:	f7fd f85e 	bl	80012a0 <MX_FREERTOS_Init>
 
  /* Start scheduler */
  osKernelStart();
 80041e4:	f009 ff24 	bl	800e030 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80041e8:	e7fe      	b.n	80041e8 <main+0x40>
	...

080041ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b0ae      	sub	sp, #184	; 0xb8
 80041f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80041f2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80041f6:	2248      	movs	r2, #72	; 0x48
 80041f8:	2100      	movs	r1, #0
 80041fa:	4618      	mov	r0, r3
 80041fc:	f011 feb1 	bl	8015f62 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004200:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004204:	2200      	movs	r2, #0
 8004206:	601a      	str	r2, [r3, #0]
 8004208:	605a      	str	r2, [r3, #4]
 800420a:	609a      	str	r2, [r3, #8]
 800420c:	60da      	str	r2, [r3, #12]
 800420e:	611a      	str	r2, [r3, #16]
 8004210:	615a      	str	r2, [r3, #20]
 8004212:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004214:	1d3b      	adds	r3, r7, #4
 8004216:	2250      	movs	r2, #80	; 0x50
 8004218:	2100      	movs	r1, #0
 800421a:	4618      	mov	r0, r3
 800421c:	f011 fea1 	bl	8015f62 <memset>

  /** Macro to configure the PLL multiplication factor 
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV2);
 8004220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800422a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800422e:	f043 0310 	orr.w	r3, r3, #16
 8004232:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8004234:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800423e:	f043 0303 	orr.w	r3, r3, #3
 8004242:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability 
  */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8004244:	2000      	movs	r0, #0
 8004246:	f7ff ff99 	bl	800417c <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800424a:	4b39      	ldr	r3, [pc, #228]	; (8004330 <SystemClock_Config+0x144>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004252:	4a37      	ldr	r2, [pc, #220]	; (8004330 <SystemClock_Config+0x144>)
 8004254:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004258:	6013      	str	r3, [r2, #0]
 800425a:	4b35      	ldr	r3, [pc, #212]	; (8004330 <SystemClock_Config+0x144>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004262:	603b      	str	r3, [r7, #0]
 8004264:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 8004266:	230f      	movs	r3, #15
 8004268:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800426a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800426e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004270:	2301      	movs	r3, #1
 8004272:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004274:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004278:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800427a:	2340      	movs	r3, #64	; 0x40
 800427c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004280:	2305      	movs	r3, #5
 8004282:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004286:	2300      	movs	r3, #0
 8004288:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800428c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004290:	4618      	mov	r0, r3
 8004292:	f007 f839 	bl	800b308 <HAL_RCC_OscConfig>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d001      	beq.n	80042a0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800429c:	f000 f85c 	bl	8004358 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80042a0:	236f      	movs	r3, #111	; 0x6f
 80042a2:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80042a4:	2302      	movs	r3, #2
 80042a6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80042a8:	2300      	movs	r3, #0
 80042aa:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80042ac:	2300      	movs	r3, #0
 80042ae:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80042b0:	2300      	movs	r3, #0
 80042b2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80042b4:	2300      	movs	r3, #0
 80042b6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80042b8:	2300      	movs	r3, #0
 80042ba:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80042bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80042c0:	2101      	movs	r1, #1
 80042c2:	4618      	mov	r0, r3
 80042c4:	f007 fb7e 	bl	800b9c4 <HAL_RCC_ClockConfig>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80042ce:	f000 f843 	bl	8004358 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 80042d2:	f643 4304 	movw	r3, #15364	; 0x3c04
 80042d6:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 80042d8:	2306      	movs	r3, #6
 80042da:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80042dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042e0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80042e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042e6:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80042e8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80042ec:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADCCLK;
 80042ee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80042f2:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80042f4:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80042f8:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80042fa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80042fe:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004300:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004304:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSI;
 8004306:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800430a:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 800430c:	2302      	movs	r3, #2
 800430e:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8004310:	2300      	movs	r3, #0
 8004312:	653b      	str	r3, [r7, #80]	; 0x50

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004314:	1d3b      	adds	r3, r7, #4
 8004316:	4618      	mov	r0, r3
 8004318:	f007 ffab 	bl	800c272 <HAL_RCCEx_PeriphCLKConfig>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d001      	beq.n	8004326 <SystemClock_Config+0x13a>
  {
    Error_Handler();
 8004322:	f000 f819 	bl	8004358 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8004326:	bf00      	nop
 8004328:	37b8      	adds	r7, #184	; 0xb8
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	58000400 	.word	0x58000400

08004334 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a04      	ldr	r2, [pc, #16]	; (8004354 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d101      	bne.n	800434a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004346:	f002 fa1d 	bl	8006784 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800434a:	bf00      	nop
 800434c:	3708      	adds	r7, #8
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	40012c00 	.word	0x40012c00

08004358 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004358:	b480      	push	{r7}
 800435a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800435c:	bf00      	nop
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
	...

08004368 <MasterThreadTask>:
//struct SystemStatus systemStatus = { 0 };
uint32_t startTime = 0;
uint32_t viveStateVar = 0;
uint64_t waitTime = 0;

void MasterThreadTask(void *argument) {
 8004368:	b590      	push	{r4, r7, lr}
 800436a:	b085      	sub	sp, #20
 800436c:	af02      	add	r7, sp, #8
 800436e:	6078      	str	r0, [r7, #4]

#ifndef DONGLE_CODE
	touchSensingStart();
 8004370:	f001 fef0 	bl	8006154 <touchSensingStart>
#endif

	while (1) {
		// check if the queue has a new message (a command to start/stop logging)
		//   .... this function waits forever
		osMessageQueueGet(togLoggingQueueHandle, &togLogMessageReceived, 0U,
 8004374:	4b69      	ldr	r3, [pc, #420]	; (800451c <MasterThreadTask+0x1b4>)
 8004376:	6818      	ldr	r0, [r3, #0]
 8004378:	f04f 33ff 	mov.w	r3, #4294967295
 800437c:	2200      	movs	r2, #0
 800437e:	4968      	ldr	r1, [pc, #416]	; (8004520 <MasterThreadTask+0x1b8>)
 8004380:	f00a fd6c 	bl	800ee5c <osMessageQueueGet>
#endif



		// pass variable to share system state
		osMessageQueueReset(statusQueueHandle);
 8004384:	4b67      	ldr	r3, [pc, #412]	; (8004524 <MasterThreadTask+0x1bc>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4618      	mov	r0, r3
 800438a:	f00a fdd9 	bl	800ef40 <osMessageQueueReset>
		osMessageQueuePut(statusQueueHandle, (void*) &nullStatusMessage, 0U, 0);
 800438e:	4b65      	ldr	r3, [pc, #404]	; (8004524 <MasterThreadTask+0x1bc>)
 8004390:	6818      	ldr	r0, [r3, #0]
 8004392:	2300      	movs	r3, #0
 8004394:	2200      	movs	r2, #0
 8004396:	4964      	ldr	r1, [pc, #400]	; (8004528 <MasterThreadTask+0x1c0>)
 8004398:	f00a fcec 	bl	800ed74 <osMessageQueuePut>

		// if the received command enables logging
		//    otherwise, skip if statement and wait for an enabling command
		if (logEnabled == 0 && togLogMessageReceived.logStatus == ENABLE_LOG) {
 800439c:	4b63      	ldr	r3, [pc, #396]	; (800452c <MasterThreadTask+0x1c4>)
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d156      	bne.n	8004452 <MasterThreadTask+0xea>
 80043a4:	4b5e      	ldr	r3, [pc, #376]	; (8004520 <MasterThreadTask+0x1b8>)
 80043a6:	785b      	ldrb	r3, [r3, #1]
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d152      	bne.n	8004452 <MasterThreadTask+0xea>
			logEnabled = 1;
 80043ac:	4b5f      	ldr	r3, [pc, #380]	; (800452c <MasterThreadTask+0x1c4>)
 80043ae:	2201      	movs	r2, #1
 80043b0:	701a      	strb	r2, [r3, #0]

			// keep record of this message so new message doesn't overwrite
			memcpy(&prevLogMessage, &togLogMessageReceived, sizeof(struct LogMessage));
 80043b2:	4b5f      	ldr	r3, [pc, #380]	; (8004530 <MasterThreadTask+0x1c8>)
 80043b4:	4a5a      	ldr	r2, [pc, #360]	; (8004520 <MasterThreadTask+0x1b8>)
 80043b6:	6811      	ldr	r1, [r2, #0]
 80043b8:	6019      	str	r1, [r3, #0]
 80043ba:	8892      	ldrh	r2, [r2, #4]
 80043bc:	809a      	strh	r2, [r3, #4]

			// start all sensor subsystems
			masterEnterRoutine();
 80043be:	f000 f94b 	bl	8004658 <masterEnterRoutine>

			// add a delay to ensure all threads are given enough time to collect initial samples
			osDelay(500);
 80043c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80043c6:	f00a f859 	bl	800e47c <osDelay>

			while (1) {
				startTime = HAL_GetTick();
 80043ca:	f002 f9ed 	bl	80067a8 <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	4b58      	ldr	r3, [pc, #352]	; (8004534 <MasterThreadTask+0x1cc>)
 80043d2:	601a      	str	r2, [r3, #0]
				/**********************************************************************************/
				/*.... WAIT UNTIL DATA PACKET IS READY.....*/
				/**********************************************************************************/

				// grab data from sensor thread queues
				grabSensorData();
 80043d4:	f000 f8c2 	bl	800455c <grabSensorData>

				// add all sensor data into a packet
				packetizeData(&sensorPacket, &blinkMsgReceived, &secondaryProcessorMsgReceived, &inertialMsgReceived,
 80043d8:	4b57      	ldr	r3, [pc, #348]	; (8004538 <MasterThreadTask+0x1d0>)
 80043da:	9300      	str	r3, [sp, #0]
 80043dc:	4b57      	ldr	r3, [pc, #348]	; (800453c <MasterThreadTask+0x1d4>)
 80043de:	4a58      	ldr	r2, [pc, #352]	; (8004540 <MasterThreadTask+0x1d8>)
 80043e0:	4958      	ldr	r1, [pc, #352]	; (8004544 <MasterThreadTask+0x1dc>)
 80043e2:	4859      	ldr	r0, [pc, #356]	; (8004548 <MasterThreadTask+0x1e0>)
 80043e4:	f000 f9c0 	bl	8004768 <packetizeData>

				/**********************************************************************************/
				/*.... SEND PACKET TO BORDER ROUTER .....*/
				/**********************************************************************************/

				APP_THREAD_SendBorderPacket(&sensorPacket);
 80043e8:	4857      	ldr	r0, [pc, #348]	; (8004548 <MasterThreadTask+0x1e0>)
 80043ea:	f010 facf 	bl	801498c <APP_THREAD_SendBorderPacket>
				/*.... CHECK IF NODE HAS BEEN REQUESTED TO STOP .....*/
				/**********************************************************************************/

				// check if the queue has a new message (potentially a command to stop logging)
				//   otherwise, timeout
				if (osMessageQueueGet(togLoggingQueueHandle, &togLogMessageReceived, 0U, 0) == osOK) {
 80043ee:	4b4b      	ldr	r3, [pc, #300]	; (800451c <MasterThreadTask+0x1b4>)
 80043f0:	6818      	ldr	r0, [r3, #0]
 80043f2:	2300      	movs	r3, #0
 80043f4:	2200      	movs	r2, #0
 80043f6:	494a      	ldr	r1, [pc, #296]	; (8004520 <MasterThreadTask+0x1b8>)
 80043f8:	f00a fd30 	bl	800ee5c <osMessageQueueGet>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d107      	bne.n	8004412 <MasterThreadTask+0xaa>
					// disable threads
					if (togLogMessageReceived.status == DISABLE_SENSING) {
 8004402:	4b47      	ldr	r3, [pc, #284]	; (8004520 <MasterThreadTask+0x1b8>)
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d103      	bne.n	8004412 <MasterThreadTask+0xaa>

						masterExitRoutine();
 800440a:	f000 f973 	bl	80046f4 <masterExitRoutine>

						// break out of first while loop and wait until told to start logging again
						break;
 800440e:	bf00      	nop
		if (logEnabled == 0 && togLogMessageReceived.logStatus == ENABLE_LOG) {
 8004410:	e082      	b.n	8004518 <MasterThreadTask+0x1b0>
					}
				}

				// add delay to wait for next transmission period
				waitTime = PACKET_SEND_PERIOD - (HAL_GetTick() - startTime);
 8004412:	4b48      	ldr	r3, [pc, #288]	; (8004534 <MasterThreadTask+0x1cc>)
 8004414:	681c      	ldr	r4, [r3, #0]
 8004416:	f002 f9c7 	bl	80067a8 <HAL_GetTick>
 800441a:	4603      	mov	r3, r0
 800441c:	1ae3      	subs	r3, r4, r3
 800441e:	3364      	adds	r3, #100	; 0x64
 8004420:	f04f 0400 	mov.w	r4, #0
 8004424:	4a49      	ldr	r2, [pc, #292]	; (800454c <MasterThreadTask+0x1e4>)
 8004426:	e9c2 3400 	strd	r3, r4, [r2]
				// if wait time is less than zero (i.e. the border packet send took longer than PACKET_SEND_PERIOD)
				if(waitTime <= 0){
 800442a:	4b48      	ldr	r3, [pc, #288]	; (800454c <MasterThreadTask+0x1e4>)
 800442c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004430:	4323      	orrs	r3, r4
 8004432:	d107      	bne.n	8004444 <MasterThreadTask+0xdc>
					waitTime = 0; //set to zero (i.e. dont wait)
 8004434:	4a45      	ldr	r2, [pc, #276]	; (800454c <MasterThreadTask+0x1e4>)
 8004436:	f04f 0300 	mov.w	r3, #0
 800443a:	f04f 0400 	mov.w	r4, #0
 800443e:	e9c2 3400 	strd	r3, r4, [r2]
 8004442:	e7c2      	b.n	80043ca <MasterThreadTask+0x62>
				}
				else{
					osDelay(waitTime);
 8004444:	4b41      	ldr	r3, [pc, #260]	; (800454c <MasterThreadTask+0x1e4>)
 8004446:	e9d3 3400 	ldrd	r3, r4, [r3]
 800444a:	4618      	mov	r0, r3
 800444c:	f00a f816 	bl	800e47c <osDelay>
				startTime = HAL_GetTick();
 8004450:	e7bb      	b.n	80043ca <MasterThreadTask+0x62>
				}

			}
		}
		else if (logEnabled == 1 && togLogMessageReceived.logStatus == DISABLE_LOG) {
 8004452:	4b36      	ldr	r3, [pc, #216]	; (800452c <MasterThreadTask+0x1c4>)
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	2b01      	cmp	r3, #1
 8004458:	d109      	bne.n	800446e <MasterThreadTask+0x106>
 800445a:	4b31      	ldr	r3, [pc, #196]	; (8004520 <MasterThreadTask+0x1b8>)
 800445c:	785b      	ldrb	r3, [r3, #1]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d105      	bne.n	800446e <MasterThreadTask+0x106>
			logEnabled = 0;
 8004462:	4b32      	ldr	r3, [pc, #200]	; (800452c <MasterThreadTask+0x1c4>)
 8004464:	2200      	movs	r2, #0
 8004466:	701a      	strb	r2, [r3, #0]
			masterExitRoutine();
 8004468:	f000 f944 	bl	80046f4 <masterExitRoutine>
 800446c:	e054      	b.n	8004518 <MasterThreadTask+0x1b0>
		}
		else if (lightLabDemoEnabled == 0 && togLogMessageReceived.status == LIGHT_LAB_DEMO){
 800446e:	4b38      	ldr	r3, [pc, #224]	; (8004550 <MasterThreadTask+0x1e8>)
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d13e      	bne.n	80044f4 <MasterThreadTask+0x18c>
 8004476:	4b2a      	ldr	r3, [pc, #168]	; (8004520 <MasterThreadTask+0x1b8>)
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	2b02      	cmp	r3, #2
 800447c:	d13a      	bne.n	80044f4 <MasterThreadTask+0x18c>
			// keep record of this message so new message doesn't overwrite
			memcpy(&prevLogMessage, &togLogMessageReceived, sizeof(struct LogMessage));
 800447e:	4b2c      	ldr	r3, [pc, #176]	; (8004530 <MasterThreadTask+0x1c8>)
 8004480:	4a27      	ldr	r2, [pc, #156]	; (8004520 <MasterThreadTask+0x1b8>)
 8004482:	6811      	ldr	r1, [r2, #0]
 8004484:	6019      	str	r1, [r3, #0]
 8004486:	8892      	ldrh	r2, [r2, #4]
 8004488:	809a      	strh	r2, [r3, #4]

			// if requesting another feature to be enabled but the logging is still enabled
			if(logEnabled == 1){
 800448a:	4b28      	ldr	r3, [pc, #160]	; (800452c <MasterThreadTask+0x1c4>)
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d104      	bne.n	800449c <MasterThreadTask+0x134>
				logEnabled = 0;
 8004492:	4b26      	ldr	r3, [pc, #152]	; (800452c <MasterThreadTask+0x1c4>)
 8004494:	2200      	movs	r2, #0
 8004496:	701a      	strb	r2, [r3, #0]
				masterExitRoutine();
 8004498:	f000 f92c 	bl	80046f4 <masterExitRoutine>
			}

			lightLabDemoEnabled = LIGHT_LAB_DEMO;
 800449c:	4b2c      	ldr	r3, [pc, #176]	; (8004550 <MasterThreadTask+0x1e8>)
 800449e:	2202      	movs	r2, #2
 80044a0:	701a      	strb	r2, [r3, #0]

			// enable functionality
			osSemaphoreAcquire(lightingLabDemoEndHandle, 0);
 80044a2:	4b2c      	ldr	r3, [pc, #176]	; (8004554 <MasterThreadTask+0x1ec>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2100      	movs	r1, #0
 80044a8:	4618      	mov	r0, r3
 80044aa:	f00a fb1f 	bl	800eaec <osSemaphoreAcquire>
			viveStateVar = lightLabDemoEnabled;
 80044ae:	4b28      	ldr	r3, [pc, #160]	; (8004550 <MasterThreadTask+0x1e8>)
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	461a      	mov	r2, r3
 80044b4:	4b28      	ldr	r3, [pc, #160]	; (8004558 <MasterThreadTask+0x1f0>)
 80044b6:	601a      	str	r2, [r3, #0]

			// start all sensor subsystems
			masterEnterRoutine();
 80044b8:	f000 f8ce 	bl	8004658 <masterEnterRoutine>

			// add a delay to ensure all threads are given enough time to collect initial samples
			osDelay(500);
 80044bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80044c0:	f009 ffdc 	bl	800e47c <osDelay>

			while(1){
				if (osMessageQueueGet(togLoggingQueueHandle, &togLogMessageReceived, 0U, osWaitForever) == osOK) {
 80044c4:	4b15      	ldr	r3, [pc, #84]	; (800451c <MasterThreadTask+0x1b4>)
 80044c6:	6818      	ldr	r0, [r3, #0]
 80044c8:	f04f 33ff 	mov.w	r3, #4294967295
 80044cc:	2200      	movs	r2, #0
 80044ce:	4914      	ldr	r1, [pc, #80]	; (8004520 <MasterThreadTask+0x1b8>)
 80044d0:	f00a fcc4 	bl	800ee5c <osMessageQueueGet>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1f4      	bne.n	80044c4 <MasterThreadTask+0x15c>
					// disable threads
					if (togLogMessageReceived.status == DISABLE_SENSING) {
 80044da:	4b11      	ldr	r3, [pc, #68]	; (8004520 <MasterThreadTask+0x1b8>)
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d1f0      	bne.n	80044c4 <MasterThreadTask+0x15c>

						osSemaphoreRelease(lightingLabDemoEndHandle);
 80044e2:	4b1c      	ldr	r3, [pc, #112]	; (8004554 <MasterThreadTask+0x1ec>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f00a fb66 	bl	800ebb8 <osSemaphoreRelease>
						masterExitRoutine();
 80044ec:	f000 f902 	bl	80046f4 <masterExitRoutine>

						// break out of first while loop and wait until told to start logging again
						break;
 80044f0:	bf00      	nop
		else if (lightLabDemoEnabled == 0 && togLogMessageReceived.status == LIGHT_LAB_DEMO){
 80044f2:	e011      	b.n	8004518 <MasterThreadTask+0x1b0>
					}
				}
			}
		}
		else if ((lightLabDemoEnabled == LIGHT_LAB_DEMO) && (togLogMessageReceived.status == DISABLE_LOG)){
 80044f4:	4b16      	ldr	r3, [pc, #88]	; (8004550 <MasterThreadTask+0x1e8>)
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	f47f af3b 	bne.w	8004374 <MasterThreadTask+0xc>
 80044fe:	4b08      	ldr	r3, [pc, #32]	; (8004520 <MasterThreadTask+0x1b8>)
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	2b00      	cmp	r3, #0
 8004504:	f47f af36 	bne.w	8004374 <MasterThreadTask+0xc>

			osSemaphoreRelease(lightingLabDemoEndHandle);
 8004508:	4b12      	ldr	r3, [pc, #72]	; (8004554 <MasterThreadTask+0x1ec>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4618      	mov	r0, r3
 800450e:	f00a fb53 	bl	800ebb8 <osSemaphoreRelease>


			lightLabDemoEnabled = 0;
 8004512:	4b0f      	ldr	r3, [pc, #60]	; (8004550 <MasterThreadTask+0x1e8>)
 8004514:	2200      	movs	r2, #0
 8004516:	701a      	strb	r2, [r3, #0]
		osMessageQueueGet(togLoggingQueueHandle, &togLogMessageReceived, 0U,
 8004518:	e72c      	b.n	8004374 <MasterThreadTask+0xc>
 800451a:	bf00      	nop
 800451c:	20027cec 	.word	0x20027cec
 8004520:	200277bc 	.word	0x200277bc
 8004524:	200278c8 	.word	0x200278c8
 8004528:	08017814 	.word	0x08017814
 800452c:	20000aed 	.word	0x20000aed
 8004530:	20027894 	.word	0x20027894
 8004534:	20000af0 	.word	0x20000af0
 8004538:	200283d8 	.word	0x200283d8
 800453c:	200283f0 	.word	0x200283f0
 8004540:	2002842c 	.word	0x2002842c
 8004544:	2002836c 	.word	0x2002836c
 8004548:	200277c8 	.word	0x200277c8
 800454c:	20000af8 	.word	0x20000af8
 8004550:	20000aee 	.word	0x20000aee
 8004554:	200278c0 	.word	0x200278c0
 8004558:	20000af4 	.word	0x20000af4

0800455c <grabSensorData>:
		}

	}
}

void grabSensorData(void) {
 800455c:	b5b0      	push	{r4, r5, r7, lr}
 800455e:	af00      	add	r7, sp, #0
	if (prevLogMessage.blinkEnabled == SENSOR_ENABLE) {
 8004560:	4b30      	ldr	r3, [pc, #192]	; (8004624 <grabSensorData+0xc8>)
 8004562:	789b      	ldrb	r3, [r3, #2]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d111      	bne.n	800458c <grabSensorData+0x30>
		if (osOK != osMessageQueueGet(blinkMsgQueueHandle, &blinkMsgReceived, 0U, 0)) {
 8004568:	4b2f      	ldr	r3, [pc, #188]	; (8004628 <grabSensorData+0xcc>)
 800456a:	6818      	ldr	r0, [r3, #0]
 800456c:	2300      	movs	r3, #0
 800456e:	2200      	movs	r2, #0
 8004570:	492e      	ldr	r1, [pc, #184]	; (800462c <grabSensorData+0xd0>)
 8004572:	f00a fc73 	bl	800ee5c <osMessageQueueGet>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d007      	beq.n	800458c <grabSensorData+0x30>
			memcpy(&blinkMsgReceived, &nullBlinkMsg, sizeof(struct blinkData));
 800457c:	4a2b      	ldr	r2, [pc, #172]	; (800462c <grabSensorData+0xd0>)
 800457e:	4b2c      	ldr	r3, [pc, #176]	; (8004630 <grabSensorData+0xd4>)
 8004580:	4610      	mov	r0, r2
 8004582:	4619      	mov	r1, r3
 8004584:	236c      	movs	r3, #108	; 0x6c
 8004586:	461a      	mov	r2, r3
 8004588:	f011 fce0 	bl	8015f4c <memcpy>
		}
	}

	if ((prevLogMessage.tempEnabled == SENSOR_ENABLE)) {
 800458c:	4b25      	ldr	r3, [pc, #148]	; (8004624 <grabSensorData+0xc8>)
 800458e:	78db      	ldrb	r3, [r3, #3]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d113      	bne.n	80045bc <grabSensorData+0x60>
		if (osOK != osMessageQueueGet(interProcessorMsgQueueHandle, &secondaryProcessorMsgReceived, 0U, 0)) {
 8004594:	4b27      	ldr	r3, [pc, #156]	; (8004634 <grabSensorData+0xd8>)
 8004596:	6818      	ldr	r0, [r3, #0]
 8004598:	2300      	movs	r3, #0
 800459a:	2200      	movs	r2, #0
 800459c:	4926      	ldr	r1, [pc, #152]	; (8004638 <grabSensorData+0xdc>)
 800459e:	f00a fc5d 	bl	800ee5c <osMessageQueueGet>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d009      	beq.n	80045bc <grabSensorData+0x60>
			memcpy(&secondaryProcessorMsgReceived, &nullSecondaryProcessorMsgReceived,
 80045a8:	4a23      	ldr	r2, [pc, #140]	; (8004638 <grabSensorData+0xdc>)
 80045aa:	4b24      	ldr	r3, [pc, #144]	; (800463c <grabSensorData+0xe0>)
 80045ac:	4614      	mov	r4, r2
 80045ae:	461d      	mov	r5, r3
 80045b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80045b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80045b4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80045b8:	e884 0003 	stmia.w	r4, {r0, r1}
					sizeof(struct parsedSecondaryProcessorPacket));
		}
	}

	if ((prevLogMessage.positionEnabled == SENSOR_ENABLE)) {
 80045bc:	4b19      	ldr	r3, [pc, #100]	; (8004624 <grabSensorData+0xc8>)
 80045be:	795b      	ldrb	r3, [r3, #5]
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d113      	bne.n	80045ec <grabSensorData+0x90>
		if (osOK != osMessageQueueGet(viveQueueHandle, &vive_loc, 0U, 0)) {
 80045c4:	4b1e      	ldr	r3, [pc, #120]	; (8004640 <grabSensorData+0xe4>)
 80045c6:	6818      	ldr	r0, [r3, #0]
 80045c8:	2300      	movs	r3, #0
 80045ca:	2200      	movs	r2, #0
 80045cc:	491d      	ldr	r1, [pc, #116]	; (8004644 <grabSensorData+0xe8>)
 80045ce:	f00a fc45 	bl	800ee5c <osMessageQueueGet>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d009      	beq.n	80045ec <grabSensorData+0x90>
			memcpy(&vive_loc, &nullViveMsgReceived, sizeof(VIVEVars));
 80045d8:	4a1a      	ldr	r2, [pc, #104]	; (8004644 <grabSensorData+0xe8>)
 80045da:	4b1b      	ldr	r3, [pc, #108]	; (8004648 <grabSensorData+0xec>)
 80045dc:	4614      	mov	r4, r2
 80045de:	461d      	mov	r5, r3
 80045e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80045e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80045e4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80045e8:	e884 0003 	stmia.w	r4, {r0, r1}

		}
	}

	if ((prevLogMessage.intertialEnabled == SENSOR_ENABLE)) {
 80045ec:	4b0d      	ldr	r3, [pc, #52]	; (8004624 <grabSensorData+0xc8>)
 80045ee:	791b      	ldrb	r3, [r3, #4]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d115      	bne.n	8004620 <grabSensorData+0xc4>
		if (osOK != osMessageQueueGet(inertialSensingQueueHandle, &inertialMsgReceived, 0U, 0)) {
 80045f4:	4b15      	ldr	r3, [pc, #84]	; (800464c <grabSensorData+0xf0>)
 80045f6:	6818      	ldr	r0, [r3, #0]
 80045f8:	2300      	movs	r3, #0
 80045fa:	2200      	movs	r2, #0
 80045fc:	4914      	ldr	r1, [pc, #80]	; (8004650 <grabSensorData+0xf4>)
 80045fe:	f00a fc2d 	bl	800ee5c <osMessageQueueGet>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d00b      	beq.n	8004620 <grabSensorData+0xc4>
			memcpy(&inertialMsgReceived, &nullInertialMsgReceived, sizeof(struct inertialData));
 8004608:	4a11      	ldr	r2, [pc, #68]	; (8004650 <grabSensorData+0xf4>)
 800460a:	4b12      	ldr	r3, [pc, #72]	; (8004654 <grabSensorData+0xf8>)
 800460c:	4614      	mov	r4, r2
 800460e:	461d      	mov	r5, r3
 8004610:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004612:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004614:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004616:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004618:	e895 0003 	ldmia.w	r5, {r0, r1}
 800461c:	e884 0003 	stmia.w	r4, {r0, r1}
		}
	}
}
 8004620:	bf00      	nop
 8004622:	bdb0      	pop	{r4, r5, r7, pc}
 8004624:	20027894 	.word	0x20027894
 8004628:	20027d08 	.word	0x20027d08
 800462c:	2002836c 	.word	0x2002836c
 8004630:	0801781c 	.word	0x0801781c
 8004634:	200278c4 	.word	0x200278c4
 8004638:	2002842c 	.word	0x2002842c
 800463c:	08017888 	.word	0x08017888
 8004640:	200277b8 	.word	0x200277b8
 8004644:	200283d8 	.word	0x200283d8
 8004648:	080178c8 	.word	0x080178c8
 800464c:	200278b8 	.word	0x200278b8
 8004650:	200283f0 	.word	0x200283f0
 8004654:	080178a0 	.word	0x080178a0

08004658 <masterEnterRoutine>:

void masterEnterRoutine(void) {
 8004658:	b580      	push	{r7, lr}
 800465a:	af00      	add	r7, sp, #0
	if (prevLogMessage.blinkEnabled == SENSOR_ENABLE) {
 800465c:	4b1e      	ldr	r3, [pc, #120]	; (80046d8 <masterEnterRoutine+0x80>)
 800465e:	789b      	ldrb	r3, [r3, #2]
 8004660:	2b01      	cmp	r3, #1
 8004662:	d105      	bne.n	8004670 <masterEnterRoutine+0x18>
		osThreadFlagsSet(blinkTaskHandle, 0x00000001U);
 8004664:	4b1d      	ldr	r3, [pc, #116]	; (80046dc <masterEnterRoutine+0x84>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2101      	movs	r1, #1
 800466a:	4618      	mov	r0, r3
 800466c:	f009 fdc0 	bl	800e1f0 <osThreadFlagsSet>
	}

	if (prevLogMessage.positionEnabled == SENSOR_ENABLE) {
 8004670:	4b19      	ldr	r3, [pc, #100]	; (80046d8 <masterEnterRoutine+0x80>)
 8004672:	795b      	ldrb	r3, [r3, #5]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d118      	bne.n	80046aa <masterEnterRoutine+0x52>
		// update status queue to notify other threads position is active
		osMessageQueueGet(statusQueueHandle, &statusMessage, 0U, osWaitForever);
 8004678:	4b19      	ldr	r3, [pc, #100]	; (80046e0 <masterEnterRoutine+0x88>)
 800467a:	6818      	ldr	r0, [r3, #0]
 800467c:	f04f 33ff 	mov.w	r3, #4294967295
 8004680:	2200      	movs	r2, #0
 8004682:	4918      	ldr	r1, [pc, #96]	; (80046e4 <masterEnterRoutine+0x8c>)
 8004684:	f00a fbea 	bl	800ee5c <osMessageQueueGet>
		statusMessage.positionEnabled = 1;
 8004688:	4b16      	ldr	r3, [pc, #88]	; (80046e4 <masterEnterRoutine+0x8c>)
 800468a:	2201      	movs	r2, #1
 800468c:	715a      	strb	r2, [r3, #5]
		osMessageQueuePut(statusQueueHandle, (void*) &statusMessage, 0U, 0);
 800468e:	4b14      	ldr	r3, [pc, #80]	; (80046e0 <masterEnterRoutine+0x88>)
 8004690:	6818      	ldr	r0, [r3, #0]
 8004692:	2300      	movs	r3, #0
 8004694:	2200      	movs	r2, #0
 8004696:	4913      	ldr	r1, [pc, #76]	; (80046e4 <masterEnterRoutine+0x8c>)
 8004698:	f00a fb6c 	bl	800ed74 <osMessageQueuePut>

		// start timer for 3D position sample to be taken
		osTimerStart(viveTimerHandle, VIVE_SAMPLE_PERIOD);
 800469c:	4b12      	ldr	r3, [pc, #72]	; (80046e8 <masterEnterRoutine+0x90>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80046a4:	4618      	mov	r0, r3
 80046a6:	f009 ffb1 	bl	800e60c <osTimerStart>
	}

	if ((prevLogMessage.tempEnabled == SENSOR_ENABLE)) {
 80046aa:	4b0b      	ldr	r3, [pc, #44]	; (80046d8 <masterEnterRoutine+0x80>)
 80046ac:	78db      	ldrb	r3, [r3, #3]
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d105      	bne.n	80046be <masterEnterRoutine+0x66>
		osThreadFlagsSet(interProcTaskHandle, 0x00000001U);
 80046b2:	4b0e      	ldr	r3, [pc, #56]	; (80046ec <masterEnterRoutine+0x94>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2101      	movs	r1, #1
 80046b8:	4618      	mov	r0, r3
 80046ba:	f009 fd99 	bl	800e1f0 <osThreadFlagsSet>
	}

	if ((prevLogMessage.intertialEnabled == SENSOR_ENABLE)) {
 80046be:	4b06      	ldr	r3, [pc, #24]	; (80046d8 <masterEnterRoutine+0x80>)
 80046c0:	791b      	ldrb	r3, [r3, #4]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d105      	bne.n	80046d2 <masterEnterRoutine+0x7a>
		osThreadFlagsSet(inertialTaskHandle, 0x00000001U);
 80046c6:	4b0a      	ldr	r3, [pc, #40]	; (80046f0 <masterEnterRoutine+0x98>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2101      	movs	r1, #1
 80046cc:	4618      	mov	r0, r3
 80046ce:	f009 fd8f 	bl	800e1f0 <osThreadFlagsSet>
	}
}
 80046d2:	bf00      	nop
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	20027894 	.word	0x20027894
 80046dc:	200278a0 	.word	0x200278a0
 80046e0:	200278c8 	.word	0x200278c8
 80046e4:	20027d18 	.word	0x20027d18
 80046e8:	200278a4 	.word	0x200278a4
 80046ec:	20027cf8 	.word	0x20027cf8
 80046f0:	20027d10 	.word	0x20027d10

080046f4 <masterExitRoutine>:

void masterExitRoutine(void) {
 80046f4:	b580      	push	{r7, lr}
 80046f6:	af00      	add	r7, sp, #0
	if (prevLogMessage.blinkEnabled == SENSOR_ENABLE) {
 80046f8:	4b15      	ldr	r3, [pc, #84]	; (8004750 <masterExitRoutine+0x5c>)
 80046fa:	789b      	ldrb	r3, [r3, #2]
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d105      	bne.n	800470c <masterExitRoutine+0x18>
		osThreadFlagsSet(blinkTaskHandle, 0x00000002U);
 8004700:	4b14      	ldr	r3, [pc, #80]	; (8004754 <masterExitRoutine+0x60>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2102      	movs	r1, #2
 8004706:	4618      	mov	r0, r3
 8004708:	f009 fd72 	bl	800e1f0 <osThreadFlagsSet>
	}

	if (prevLogMessage.positionEnabled == SENSOR_ENABLE) {
 800470c:	4b10      	ldr	r3, [pc, #64]	; (8004750 <masterExitRoutine+0x5c>)
 800470e:	795b      	ldrb	r3, [r3, #5]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d107      	bne.n	8004724 <masterExitRoutine+0x30>
		// stop timer for 3D position sensing
		osTimerStop(viveTimerHandle);
 8004714:	4b10      	ldr	r3, [pc, #64]	; (8004758 <masterExitRoutine+0x64>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4618      	mov	r0, r3
 800471a:	f009 ffb7 	bl	800e68c <osTimerStop>
		viveStateVar = 0;
 800471e:	4b0f      	ldr	r3, [pc, #60]	; (800475c <masterExitRoutine+0x68>)
 8004720:	2200      	movs	r2, #0
 8004722:	601a      	str	r2, [r3, #0]
	}

	if ((prevLogMessage.tempEnabled == SENSOR_ENABLE)) {
 8004724:	4b0a      	ldr	r3, [pc, #40]	; (8004750 <masterExitRoutine+0x5c>)
 8004726:	78db      	ldrb	r3, [r3, #3]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d105      	bne.n	8004738 <masterExitRoutine+0x44>
		osThreadFlagsSet(interProcTaskHandle, 0x00000002U);
 800472c:	4b0c      	ldr	r3, [pc, #48]	; (8004760 <masterExitRoutine+0x6c>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2102      	movs	r1, #2
 8004732:	4618      	mov	r0, r3
 8004734:	f009 fd5c 	bl	800e1f0 <osThreadFlagsSet>
	}

	if ((prevLogMessage.intertialEnabled == SENSOR_ENABLE)) {
 8004738:	4b05      	ldr	r3, [pc, #20]	; (8004750 <masterExitRoutine+0x5c>)
 800473a:	791b      	ldrb	r3, [r3, #4]
 800473c:	2b01      	cmp	r3, #1
 800473e:	d105      	bne.n	800474c <masterExitRoutine+0x58>
		osThreadFlagsSet(inertialTaskHandle, 0x00000002U);
 8004740:	4b08      	ldr	r3, [pc, #32]	; (8004764 <masterExitRoutine+0x70>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2102      	movs	r1, #2
 8004746:	4618      	mov	r0, r3
 8004748:	f009 fd52 	bl	800e1f0 <osThreadFlagsSet>
	}

}
 800474c:	bf00      	nop
 800474e:	bd80      	pop	{r7, pc}
 8004750:	20027894 	.word	0x20027894
 8004754:	200278a0 	.word	0x200278a0
 8004758:	200278a4 	.word	0x200278a4
 800475c:	20000af4 	.word	0x20000af4
 8004760:	20027cf8 	.word	0x20027cf8
 8004764:	20027d10 	.word	0x20027d10

08004768 <packetizeData>:



void packetizeData(struct LogPacket *packet, struct blinkData *blink,
		struct parsedSecondaryProcessorPacket *processorMsg, struct inertialData *inertialMsg, VIVEVars *posMsg) {
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]
 8004774:	603b      	str	r3, [r7, #0]
	// get processor tick counts (in terms of ms)
	packet->tick_ms = HAL_GetTick();
 8004776:	f002 f817 	bl	80067a8 <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	// get epoch time from RTC
	HAL_RTC_GetTime(&hrtc, &RTC_time, RTC_FORMAT_BIN);
 8004782:	2200      	movs	r2, #0
 8004784:	4917      	ldr	r1, [pc, #92]	; (80047e4 <packetizeData+0x7c>)
 8004786:	4818      	ldr	r0, [pc, #96]	; (80047e8 <packetizeData+0x80>)
 8004788:	f008 f95b 	bl	800ca42 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &RTC_date, RTC_FORMAT_BIN);
 800478c:	2200      	movs	r2, #0
 800478e:	4917      	ldr	r1, [pc, #92]	; (80047ec <packetizeData+0x84>)
 8004790:	4815      	ldr	r0, [pc, #84]	; (80047e8 <packetizeData+0x80>)
 8004792:	f008 fa60 	bl	800cc56 <HAL_RTC_GetDate>
	packet->epoch = RTC_ToEpoch(&RTC_time, &RTC_date);
 8004796:	4915      	ldr	r1, [pc, #84]	; (80047ec <packetizeData+0x84>)
 8004798:	4812      	ldr	r0, [pc, #72]	; (80047e4 <packetizeData+0x7c>)
 800479a:	f000 fc35 	bl	8005008 <RTC_ToEpoch>
 800479e:	4602      	mov	r2, r0
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

	// add sensor data
	memcpy(&(packet->blink), blink, sizeof(struct blinkData));
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	226c      	movs	r2, #108	; 0x6c
 80047aa:	68b9      	ldr	r1, [r7, #8]
 80047ac:	4618      	mov	r0, r3
 80047ae:	f011 fbcd 	bl	8015f4c <memcpy>
	memcpy(&(packet->procData), processorMsg, sizeof(struct parsedSecondaryProcessorPacket));
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	336c      	adds	r3, #108	; 0x6c
 80047b6:	2218      	movs	r2, #24
 80047b8:	6879      	ldr	r1, [r7, #4]
 80047ba:	4618      	mov	r0, r3
 80047bc:	f011 fbc6 	bl	8015f4c <memcpy>
	memcpy(&(packet->inertial), inertialMsg, sizeof(struct inertialData));
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	3384      	adds	r3, #132	; 0x84
 80047c4:	2228      	movs	r2, #40	; 0x28
 80047c6:	6839      	ldr	r1, [r7, #0]
 80047c8:	4618      	mov	r0, r3
 80047ca:	f011 fbbf 	bl	8015f4c <memcpy>
	memcpy(&(packet->pos), posMsg, sizeof(struct VIVEVars));
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	33ac      	adds	r3, #172	; 0xac
 80047d2:	2218      	movs	r2, #24
 80047d4:	69b9      	ldr	r1, [r7, #24]
 80047d6:	4618      	mov	r0, r3
 80047d8:	f011 fbb8 	bl	8015f4c <memcpy>
}
 80047dc:	bf00      	nop
 80047de:	3710      	adds	r7, #16
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	20028418 	.word	0x20028418
 80047e8:	20028448 	.word	0x20028448
 80047ec:	20028444 	.word	0x20028444

080047f0 <vector_push>:
	kCycleFixAcquired = 5,
	kCycleFixMax = 10
};

void vector_push(vector *self, Pulse *item)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
    if (self->count < MAX_CAPACITY){
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047fe:	2b0f      	cmp	r3, #15
 8004800:	d80f      	bhi.n	8004822 <vector_push+0x32>
    	self->items[self->count++] = *item;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004806:	1c51      	adds	r1, r2, #1
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6619      	str	r1, [r3, #96]	; 0x60
 800480c:	6879      	ldr	r1, [r7, #4]
 800480e:	4613      	mov	r3, r2
 8004810:	005b      	lsls	r3, r3, #1
 8004812:	4413      	add	r3, r2
 8004814:	005b      	lsls	r3, r3, #1
 8004816:	440b      	add	r3, r1
 8004818:	683a      	ldr	r2, [r7, #0]
 800481a:	6811      	ldr	r1, [r2, #0]
 800481c:	6019      	str	r1, [r3, #0]
 800481e:	8892      	ldrh	r2, [r2, #4]
 8004820:	809a      	strh	r2, [r3, #4]
    }
}
 8004822:	bf00      	nop
 8004824:	370c      	adds	r7, #12
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr

0800482e <vector_pop>:

Pulse vector_pop(vector *self){
 800482e:	b480      	push	{r7}
 8004830:	b085      	sub	sp, #20
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
 8004836:	6039      	str	r1, [r7, #0]
	if(self->count > 0){
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800483c:	2b00      	cmp	r3, #0
 800483e:	d01c      	beq.n	800487a <vector_pop+0x4c>
		Pulse last = self->items[self->count - 1];
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004844:	1e5a      	subs	r2, r3, #1
 8004846:	6839      	ldr	r1, [r7, #0]
 8004848:	4613      	mov	r3, r2
 800484a:	005b      	lsls	r3, r3, #1
 800484c:	4413      	add	r3, r2
 800484e:	005b      	lsls	r3, r3, #1
 8004850:	18ca      	adds	r2, r1, r3
 8004852:	f107 0308 	add.w	r3, r7, #8
 8004856:	6810      	ldr	r0, [r2, #0]
 8004858:	6018      	str	r0, [r3, #0]
 800485a:	8892      	ldrh	r2, [r2, #4]
 800485c:	809a      	strh	r2, [r3, #4]
		self->count--;
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004862:	1e5a      	subs	r2, r3, #1
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	661a      	str	r2, [r3, #96]	; 0x60
		return last;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	461a      	mov	r2, r3
 800486c:	f107 0308 	add.w	r3, r7, #8
 8004870:	6818      	ldr	r0, [r3, #0]
 8004872:	6010      	str	r0, [r2, #0]
 8004874:	889b      	ldrh	r3, [r3, #4]
 8004876:	8093      	strh	r3, [r2, #4]
 8004878:	e005      	b.n	8004886 <vector_pop+0x58>
	}
	return self->items[0];
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	683a      	ldr	r2, [r7, #0]
 800487e:	6810      	ldr	r0, [r2, #0]
 8004880:	6018      	str	r0, [r3, #0]
 8004882:	8892      	ldrh	r2, [r2, #4]
 8004884:	809a      	strh	r2, [r3, #4]
}
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	3714      	adds	r7, #20
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr

08004892 <vector_get>:

Pulse vector_get(vector *self, int index)
{
 8004892:	b480      	push	{r7}
 8004894:	b085      	sub	sp, #20
 8004896:	af00      	add	r7, sp, #0
 8004898:	60f8      	str	r0, [r7, #12]
 800489a:	60b9      	str	r1, [r7, #8]
 800489c:	607a      	str	r2, [r7, #4]
    if (index >= 0 && index < self->count){
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	db12      	blt.n	80048ca <vector_get+0x38>
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d90d      	bls.n	80048ca <vector_get+0x38>
    	return self->items[index];
 80048ae:	68f8      	ldr	r0, [r7, #12]
 80048b0:	68b9      	ldr	r1, [r7, #8]
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	4613      	mov	r3, r2
 80048b6:	005b      	lsls	r3, r3, #1
 80048b8:	4413      	add	r3, r2
 80048ba:	005b      	lsls	r3, r3, #1
 80048bc:	18ca      	adds	r2, r1, r3
 80048be:	4603      	mov	r3, r0
 80048c0:	6811      	ldr	r1, [r2, #0]
 80048c2:	6019      	str	r1, [r3, #0]
 80048c4:	8892      	ldrh	r2, [r2, #4]
 80048c6:	809a      	strh	r2, [r3, #4]
 80048c8:	e005      	b.n	80048d6 <vector_get+0x44>
    }
    return self->items[0];
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	68ba      	ldr	r2, [r7, #8]
 80048ce:	6810      	ldr	r0, [r2, #0]
 80048d0:	6018      	str	r0, [r3, #0]
 80048d2:	8892      	ldrh	r2, [r2, #4]
 80048d4:	809a      	strh	r2, [r3, #4]
}
 80048d6:	68f8      	ldr	r0, [r7, #12]
 80048d8:	3714      	adds	r7, #20
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr

080048e2 <vector_clear>:

void vector_clear(vector *self){
 80048e2:	b480      	push	{r7}
 80048e4:	b083      	sub	sp, #12
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
	self->count = 0;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	661a      	str	r2, [r3, #96]	; 0x60
}
 80048f0:	bf00      	nop
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <_PulseProcessor>:

void _PulseProcessor(PulseProcessor *self, uint32_t num_inputs){
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
	self->num_inputs_ = num_inputs;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	683a      	ldr	r2, [r7, #0]
 800490a:	601a      	str	r2, [r3, #0]
	self->cycle_fix_level_ = 0;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	605a      	str	r2, [r3, #4]
	self->cycle_idx_ = 0;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	60da      	str	r2, [r3, #12]


	for(int i = 0; i < NUM_BASE_STATIONS; i++){
 8004918:	2300      	movs	r3, #0
 800491a:	60fb      	str	r3, [r7, #12]
 800491c:	e00c      	b.n	8004938 <_PulseProcessor+0x3c>
		vector_clear(&self->cycle_long_pulses_[i]);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2264      	movs	r2, #100	; 0x64
 8004922:	fb02 f303 	mul.w	r3, r2, r3
 8004926:	3310      	adds	r3, #16
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	4413      	add	r3, r2
 800492c:	4618      	mov	r0, r3
 800492e:	f7ff ffd8 	bl	80048e2 <vector_clear>
	for(int i = 0; i < NUM_BASE_STATIONS; i++){
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	3301      	adds	r3, #1
 8004936:	60fb      	str	r3, [r7, #12]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2b01      	cmp	r3, #1
 800493c:	ddef      	ble.n	800491e <_PulseProcessor+0x22>
	}
	vector_clear(&self->cycle_short_pulses_);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	33d8      	adds	r3, #216	; 0xd8
 8004942:	4618      	mov	r0, r3
 8004944:	f7ff ffcd 	bl	80048e2 <vector_clear>
	vector_clear(&self->unclassified_long_pulses_);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800494e:	4618      	mov	r0, r3
 8004950:	f7ff ffc7 	bl	80048e2 <vector_clear>
	self->time_from_last_long_pulse_ = 0;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	f8a3 22c8 	strh.w	r2, [r3, #712]	; 0x2c8
}
 800495c:	bf00      	nop
 800495e:	3710      	adds	r7, #16
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}

08004964 <consume_pulse>:

uint8_t prev_pulse_short = 0;
void consume_pulse(PulseProcessor *self, Pulse* p){
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
	//vector_push(&debug_ar, p);
	if(p->pulse_len >= MAX_LONG_PULSE_LEN){
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	889b      	ldrh	r3, [r3, #4]
 8004972:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8004976:	d303      	bcc.n	8004980 <consume_pulse+0x1c>
		//Ignore very long pulses
		prev_pulse_short = 0;
 8004978:	4b0f      	ldr	r3, [pc, #60]	; (80049b8 <consume_pulse+0x54>)
 800497a:	2200      	movs	r2, #0
 800497c:	701a      	strb	r2, [r3, #0]
		if(prev_pulse_short != 1){ // check to make sure this isnt a duplicate pulse (if it is, ignore!)
			process_short_pulse(self, p);
			prev_pulse_short = 1;
		}
	}
}
 800497e:	e016      	b.n	80049ae <consume_pulse+0x4a>
	else if(p->pulse_len >= MIN_LONG_PULSE_LEN){ // Long pulse - likely sync pulse
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	889b      	ldrh	r3, [r3, #4]
 8004984:	2b27      	cmp	r3, #39	; 0x27
 8004986:	d907      	bls.n	8004998 <consume_pulse+0x34>
		prev_pulse_short = 0;
 8004988:	4b0b      	ldr	r3, [pc, #44]	; (80049b8 <consume_pulse+0x54>)
 800498a:	2200      	movs	r2, #0
 800498c:	701a      	strb	r2, [r3, #0]
		process_long_pulse(self, p);
 800498e:	6839      	ldr	r1, [r7, #0]
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f000 f813 	bl	80049bc <process_long_pulse>
}
 8004996:	e00a      	b.n	80049ae <consume_pulse+0x4a>
		if(prev_pulse_short != 1){ // check to make sure this isnt a duplicate pulse (if it is, ignore!)
 8004998:	4b07      	ldr	r3, [pc, #28]	; (80049b8 <consume_pulse+0x54>)
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	2b01      	cmp	r3, #1
 800499e:	d006      	beq.n	80049ae <consume_pulse+0x4a>
			process_short_pulse(self, p);
 80049a0:	6839      	ldr	r1, [r7, #0]
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 f89c 	bl	8004ae0 <process_short_pulse>
			prev_pulse_short = 1;
 80049a8:	4b03      	ldr	r3, [pc, #12]	; (80049b8 <consume_pulse+0x54>)
 80049aa:	2201      	movs	r2, #1
 80049ac:	701a      	strb	r2, [r3, #0]
}
 80049ae:	bf00      	nop
 80049b0:	3708      	adds	r7, #8
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	20000b00 	.word	0x20000b00

080049bc <process_long_pulse>:

void process_long_pulse(PulseProcessor *self, Pulse* p){
 80049bc:	b580      	push	{r7, lr}
 80049be:	b088      	sub	sp, #32
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
	if(self->cycle_fix_level_ == kCycleFixNone){
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d144      	bne.n	8004a58 <process_long_pulse+0x9c>
        // Bootstrap mode. We keep the previous long pulse in unclassified_long_pulses_ vector.
        // With this algorithm 2 base stations needed for a fix. We search for a situation where the last pulse was
        // second in last cycle, which means (8333-400) us difference in start time.
		if(self->unclassified_long_pulses_.count > 0){
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d03f      	beq.n	8004a58 <process_long_pulse+0x9c>
			Pulse last_long_pulse = vector_pop(&self->unclassified_long_pulses_);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f503 729e 	add.w	r2, r3, #316	; 0x13c
 80049de:	f107 0308 	add.w	r3, r7, #8
 80049e2:	4611      	mov	r1, r2
 80049e4:	4618      	mov	r0, r3
 80049e6:	f7ff ff22 	bl	800482e <vector_pop>

			self->time_from_last_long_pulse_ = p->start_time - last_long_pulse.start_time;
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	885a      	ldrh	r2, [r3, #2]
 80049ee:	897b      	ldrh	r3, [r7, #10]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	b29a      	uxth	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f8a3 22c8 	strh.w	r2, [r3, #712]	; 0x2c8


			int delta = self->time_from_last_long_pulse_ - (CYCLE_PERIOD - long_pulse_starts[1]);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f8b3 32c8 	ldrh.w	r3, [r3, #712]	; 0x2c8
 8004a00:	461a      	mov	r2, r3
 8004a02:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 8004a06:	f5c3 5302 	rsb	r3, r3, #8320	; 0x2080
 8004a0a:	330d      	adds	r3, #13
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	617b      	str	r3, [r7, #20]
			if(-LONG_PULSE_STARTS_ACCEPTED_RANGE <= delta && delta < LONG_PULSE_STARTS_ACCEPTED_RANGE){
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	f113 0f1e 	cmn.w	r3, #30
 8004a16:	db1c      	blt.n	8004a52 <process_long_pulse+0x96>
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	2b1d      	cmp	r3, #29
 8004a1c:	dc19      	bgt.n	8004a52 <process_long_pulse+0x96>
                // Found candidate first pulse.
                self->cycle_fix_level_ = kCycleFixCandidate;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2201      	movs	r2, #1
 8004a22:	605a      	str	r2, [r3, #4]
                self->cycle_start_time_ = p->start_time;
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	885a      	ldrh	r2, [r3, #2]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	811a      	strh	r2, [r3, #8]
                self->cycle_idx_ = 0;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	60da      	str	r2, [r3, #12]

                reset(&self->phase_classifier_);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f7fc ff9f 	bl	800197c <reset>

                reset_cycle_long_pulses(self);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 fa64 	bl	8004f0c <reset_cycle_long_pulses>
                reset_unclassified_long_pulses(self);
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f000 fa7c 	bl	8004f42 <reset_unclassified_long_pulses>
                reset_cycle_short_pulses(self);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 fa87 	bl	8004f5e <reset_cycle_short_pulses>
 8004a50:	e002      	b.n	8004a58 <process_long_pulse+0x9c>
            }
			else{
				reset_unclassified_long_pulses(self);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 fa75 	bl	8004f42 <reset_unclassified_long_pulses>
			}
		}
	}

    // Put the pulse into either one of two buckets, or keep it as unclassified.
    uint8_t pulse_classified = 0;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	77fb      	strb	r3, [r7, #31]
    if (self->cycle_fix_level_ >= kCycleFixCandidate) {
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d02d      	beq.n	8004ac0 <process_long_pulse+0x104>
        // Put pulse into one of two buckets by start time.
    	uint16_t time_from_cycle_start = p->start_time - self->cycle_start_time_;
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	885a      	ldrh	r2, [r3, #2]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	891b      	ldrh	r3, [r3, #8]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	827b      	strh	r3, [r7, #18]
        for (int i = 0; i < NUM_BASE_STATIONS; i++) {
 8004a70:	2300      	movs	r3, #0
 8004a72:	61bb      	str	r3, [r7, #24]
 8004a74:	e021      	b.n	8004aba <process_long_pulse+0xfe>
        	int16_t delta = time_from_cycle_start - long_pulse_starts[i];
 8004a76:	4a19      	ldr	r2, [pc, #100]	; (8004adc <process_long_pulse+0x120>)
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a7e:	8a7a      	ldrh	r2, [r7, #18]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	823b      	strh	r3, [r7, #16]
        	if(-LONG_PULSE_STARTS_ACCEPTED_RANGE <= delta && delta < LONG_PULSE_STARTS_ACCEPTED_RANGE) {
 8004a86:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004a8a:	f113 0f1e 	cmn.w	r3, #30
 8004a8e:	db11      	blt.n	8004ab4 <process_long_pulse+0xf8>
 8004a90:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004a94:	2b1d      	cmp	r3, #29
 8004a96:	dc0d      	bgt.n	8004ab4 <process_long_pulse+0xf8>
                vector_push(&self->cycle_long_pulses_[i], p);
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	2264      	movs	r2, #100	; 0x64
 8004a9c:	fb02 f303 	mul.w	r3, r2, r3
 8004aa0:	3310      	adds	r3, #16
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	4413      	add	r3, r2
 8004aa6:	6839      	ldr	r1, [r7, #0]
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f7ff fea1 	bl	80047f0 <vector_push>
                pulse_classified = 1;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	77fb      	strb	r3, [r7, #31]
                break;
 8004ab2:	e005      	b.n	8004ac0 <process_long_pulse+0x104>
        for (int i = 0; i < NUM_BASE_STATIONS; i++) {
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	61bb      	str	r3, [r7, #24]
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	ddda      	ble.n	8004a76 <process_long_pulse+0xba>
            }
        }
    }
    if (!pulse_classified){
 8004ac0:	7ffb      	ldrb	r3, [r7, #31]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d106      	bne.n	8004ad4 <process_long_pulse+0x118>
    	vector_push(&self->unclassified_long_pulses_, p);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8004acc:	6839      	ldr	r1, [r7, #0]
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f7ff fe8e 	bl	80047f0 <vector_push>
    }
}
 8004ad4:	bf00      	nop
 8004ad6:	3720      	adds	r7, #32
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	080178e0 	.word	0x080178e0

08004ae0 <process_short_pulse>:

void process_short_pulse(PulseProcessor *self, Pulse *p){
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
	if (self->cycle_fix_level_ >= kCycleFixCandidate && p->input_idx < self->num_inputs_) {
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d00f      	beq.n	8004b12 <process_short_pulse+0x32>
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	461a      	mov	r2, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d208      	bcs.n	8004b12 <process_short_pulse+0x32>
	    // TODO: Filter out pulses outside of current cycle.
		vector_push(&self->cycle_short_pulses_, p);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	33d8      	adds	r3, #216	; 0xd8
 8004b04:	6839      	ldr	r1, [r7, #0]
 8004b06:	4618      	mov	r0, r3
 8004b08:	f7ff fe72 	bl	80047f0 <vector_push>

		//We can process the cycle now
		process_cycle_fix(self);
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 f805 	bl	8004b1c <process_cycle_fix>
	}
}
 8004b12:	bf00      	nop
 8004b14:	3708      	adds	r7, #8
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
	...

08004b1c <process_cycle_fix>:

void process_cycle_fix(PulseProcessor *self) {
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b0a2      	sub	sp, #136	; 0x88
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
    int pulse_start_corrections[NUM_BASE_STATIONS] = {};
 8004b24:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004b28:	2200      	movs	r2, #0
 8004b2a:	601a      	str	r2, [r3, #0]
 8004b2c:	605a      	str	r2, [r3, #4]
    uint16_t pulse_lens[NUM_BASE_STATIONS] = {};
 8004b2e:	2300      	movs	r3, #0
 8004b30:	64fb      	str	r3, [r7, #76]	; 0x4c
    // Check if we have long pulses from at least one base station.
    if (self->cycle_long_pulses_[0].count > 0 || self->cycle_long_pulses_[1].count > 0) {
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d105      	bne.n	8004b46 <process_cycle_fix+0x2a>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	f000 80b7 	beq.w	8004cb4 <process_cycle_fix+0x198>
        // Increase fix level if we have pulses from both stations.
        if (self->cycle_fix_level_ < kCycleFixMax && self->cycle_long_pulses_[0].count > 0 && self->cycle_long_pulses_[1].count > 0){
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	2b09      	cmp	r3, #9
 8004b4c:	d80d      	bhi.n	8004b6a <process_cycle_fix+0x4e>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d009      	beq.n	8004b6a <process_cycle_fix+0x4e>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d004      	beq.n	8004b6a <process_cycle_fix+0x4e>
        	self->cycle_fix_level_++;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	1c5a      	adds	r2, r3, #1
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	605a      	str	r2, [r3, #4]
        }

        // Average out long pulse lengths and start times for each base station across sensors.
        // pulse_start_corrections is the delta between actual start time and expected start time.
        // TODO: Take into account previous cycles as well, i.e. adjust slowly.
        for (int b = 0; b < NUM_BASE_STATIONS; b++){
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b70:	e090      	b.n	8004c94 <process_cycle_fix+0x178>
        	uint32_t num_pulses = self->cycle_long_pulses_[b].count;
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b78:	2164      	movs	r1, #100	; 0x64
 8004b7a:	fb01 f303 	mul.w	r3, r1, r3
 8004b7e:	4413      	add	r3, r2
 8004b80:	3370      	adds	r3, #112	; 0x70
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	677b      	str	r3, [r7, #116]	; 0x74
            if (num_pulses) {
 8004b86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d07e      	beq.n	8004c8a <process_cycle_fix+0x16e>
            	uint16_t expected_start_time = self->cycle_start_time_ + long_pulse_starts[b];
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	891a      	ldrh	r2, [r3, #8]
 8004b90:	49c0      	ldr	r1, [pc, #768]	; (8004e94 <process_cycle_fix+0x378>)
 8004b92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b96:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004b9a:	4413      	add	r3, r2
 8004b9c:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
                for (uint32_t i = 0; i < num_pulses; i++) {
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004ba6:	e03e      	b.n	8004c26 <process_cycle_fix+0x10a>
                    const Pulse pulse = vector_get(&self->cycle_long_pulses_[b], i);
 8004ba8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004bac:	2264      	movs	r2, #100	; 0x64
 8004bae:	fb02 f303 	mul.w	r3, r2, r3
 8004bb2:	3310      	adds	r3, #16
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	18d1      	adds	r1, r2, r3
 8004bb8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004bbc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f7ff fe66 	bl	8004892 <vector_get>
                    pulse_start_corrections[b] += pulse.start_time - expected_start_time;
 8004bc6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004bd0:	4413      	add	r3, r2
 8004bd2:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8004bd6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004bda:	4619      	mov	r1, r3
 8004bdc:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8004be0:	1acb      	subs	r3, r1, r3
 8004be2:	441a      	add	r2, r3
 8004be4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004bee:	440b      	add	r3, r1
 8004bf0:	f843 2c38 	str.w	r2, [r3, #-56]
                    pulse_lens[b] += pulse.pulse_len;
 8004bf4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004bf8:	005b      	lsls	r3, r3, #1
 8004bfa:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004bfe:	4413      	add	r3, r2
 8004c00:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8004c04:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004c08:	4413      	add	r3, r2
 8004c0a:	b29a      	uxth	r2, r3
 8004c0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c10:	005b      	lsls	r3, r3, #1
 8004c12:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004c16:	440b      	add	r3, r1
 8004c18:	f823 2c3c 	strh.w	r2, [r3, #-60]
                for (uint32_t i = 0; i < num_pulses; i++) {
 8004c1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c20:	3301      	adds	r3, #1
 8004c22:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c26:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004c2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d3bb      	bcc.n	8004ba8 <process_cycle_fix+0x8c>
                }
                if (num_pulses > 1) {
 8004c30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d929      	bls.n	8004c8a <process_cycle_fix+0x16e>
                    pulse_start_corrections[b] /= num_pulses;
 8004c36:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004c40:	4413      	add	r3, r2
 8004c42:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8004c46:	461a      	mov	r2, r3
 8004c48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c4e:	461a      	mov	r2, r3
 8004c50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004c5a:	440b      	add	r3, r1
 8004c5c:	f843 2c38 	str.w	r2, [r3, #-56]
                    pulse_lens[b] /= num_pulses;
 8004c60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c64:	005b      	lsls	r3, r3, #1
 8004c66:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004c6a:	4413      	add	r3, r2
 8004c6c:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8004c70:	461a      	mov	r2, r3
 8004c72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c78:	b29a      	uxth	r2, r3
 8004c7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c7e:	005b      	lsls	r3, r3, #1
 8004c80:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004c84:	440b      	add	r3, r1
 8004c86:	f823 2c3c 	strh.w	r2, [r3, #-60]
        for (int b = 0; b < NUM_BASE_STATIONS; b++){
 8004c8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c8e:	3301      	adds	r3, #1
 8004c90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	f77f af6a 	ble.w	8004b72 <process_cycle_fix+0x56>
                }
            }
        }
        // Send pulse lengths to phase classifier.
        process_pulse_lengths(&self->phase_classifier_, self->cycle_idx_, pulse_lens);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f503 70d0 	add.w	r0, r3, #416	; 0x1a0
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8004cac:	4619      	mov	r1, r3
 8004cae:	f7fc fde3 	bl	8001878 <process_pulse_lengths>
 8004cb2:	e008      	b.n	8004cc6 <process_cycle_fix+0x1aa>
    }
    else {
        // No long pulses this cycle. We can survive several of such cycles, but our confidence in timing sinks.
        //self->cycle_fix_level_--;
    	if(self->cycle_fix_level_ > 0){
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d004      	beq.n	8004cc6 <process_cycle_fix+0x1aa>
    		self->cycle_fix_level_--;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	1e5a      	subs	r2, r3, #1
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	605a      	str	r2, [r3, #4]
    	}
    }

    // Given the cycle phase, we can put the angle timings to a correct bucket.

    int cycle_phase = get_phase(&self->phase_classifier_, self->cycle_idx_);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f503 72d0 	add.w	r2, r3, #416	; 0x1a0
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	4610      	mov	r0, r2
 8004cd4:	f7fc fe3a 	bl	800194c <get_phase>
 8004cd8:	66f8      	str	r0, [r7, #108]	; 0x6c
    if (cycle_phase >= 0) {
 8004cda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	f2c0 80b5 	blt.w	8004e4c <process_cycle_fix+0x330>
    	//UART_Print_int32_t(cycle_phase);
        // From (potentially several) short pulses for the same input, we choose the longest one.
        Pulse *short_pulses[MAX_NUM_INPUTS] = {};
 8004ce2:	f107 030c 	add.w	r3, r7, #12
 8004ce6:	2220      	movs	r2, #32
 8004ce8:	2100      	movs	r1, #0
 8004cea:	4618      	mov	r0, r3
 8004cec:	f011 f939 	bl	8015f62 <memset>
        uint16_t short_pulse_timings[MAX_NUM_INPUTS] = {};
 8004cf0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	601a      	str	r2, [r3, #0]
 8004cf8:	605a      	str	r2, [r3, #4]
 8004cfa:	609a      	str	r2, [r3, #8]
 8004cfc:	60da      	str	r2, [r3, #12]

        //Base 0 is emitting during cycle phases 0 and 1. Base 1 is emitting during cycle phases 2 and 3.
        uint32_t emitting_base = cycle_phase >> 1;
 8004cfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d00:	105b      	asrs	r3, r3, #1
 8004d02:	66bb      	str	r3, [r7, #104]	; 0x68
        uint16_t base_pulse_start = self->cycle_start_time_ + long_pulse_starts[emitting_base] + pulse_start_corrections[emitting_base];
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	891a      	ldrh	r2, [r3, #8]
 8004d08:	4962      	ldr	r1, [pc, #392]	; (8004e94 <process_cycle_fix+0x378>)
 8004d0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d0c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004d10:	4413      	add	r3, r2
 8004d12:	b29a      	uxth	r2, r3
 8004d14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004d1c:	440b      	add	r3, r1
 8004d1e:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	4413      	add	r3, r2
 8004d26:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
        for (uint32_t i = 0; i < self->cycle_short_pulses_.count; i++) {
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004d2e:	e04a      	b.n	8004dc6 <process_cycle_fix+0x2aa>
            Pulse p = vector_get(&self->cycle_short_pulses_, i);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f103 01d8 	add.w	r1, r3, #216	; 0xd8
 8004d36:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004d38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f7ff fda8 	bl	8004892 <vector_get>
            uint32_t input_idx = p.input_idx;
 8004d42:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004d46:	65fb      	str	r3, [r7, #92]	; 0x5c

            // To get better precision, we calculate pulse timing based on the long pulse from the same base station.
            uint16_t pulse_timing = p.start_time + p.pulse_len / 2 - base_pulse_start;
 8004d48:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004d4a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004d4c:	085b      	lsrs	r3, r3, #1
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	4413      	add	r3, r2
 8004d52:	b29a      	uxth	r2, r3
 8004d54:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

            // Get longest laser pulse.
            if (SHORT_PULSE_MIN_TIME < pulse_timing && pulse_timing < SHORT_PULSE_MAX_TIME){
 8004d5e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004d62:	f5b3 6f99 	cmp.w	r3, #1224	; 0x4c8
 8004d66:	d32b      	bcc.n	8004dc0 <process_cycle_fix+0x2a4>
 8004d68:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004d6c:	f641 2278 	movw	r2, #6776	; 0x1a78
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d825      	bhi.n	8004dc0 <process_cycle_fix+0x2a4>
            	if (!short_pulses[input_idx] || short_pulses[input_idx]->pulse_len < p.pulse_len) {
 8004d74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004d7c:	4413      	add	r3, r2
 8004d7e:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00a      	beq.n	8004d9c <process_cycle_fix+0x280>
 8004d86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004d8e:	4413      	add	r3, r2
 8004d90:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8004d94:	889a      	ldrh	r2, [r3, #4]
 8004d96:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d211      	bcs.n	8004dc0 <process_cycle_fix+0x2a4>
					short_pulses[input_idx] = &p;
 8004d9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004da4:	4413      	add	r3, r2
 8004da6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8004daa:	f843 2c7c 	str.w	r2, [r3, #-124]
					short_pulse_timings[input_idx] = pulse_timing;
 8004dae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004db0:	005b      	lsls	r3, r3, #1
 8004db2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004db6:	4413      	add	r3, r2
 8004db8:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8004dbc:	f823 2c54 	strh.w	r2, [r3, #-84]
        for (uint32_t i = 0; i < self->cycle_short_pulses_.count; i++) {
 8004dc0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8004dcc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d3ae      	bcc.n	8004d30 <process_cycle_fix+0x214>
            	}
            }
        }

        // Calculate the angles for inputs where we saw short pulses.
        for (uint32_t i = 0; i < self->num_inputs_; i++){
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	67bb      	str	r3, [r7, #120]	; 0x78
 8004dd6:	e034      	b.n	8004e42 <process_cycle_fix+0x326>
            if (short_pulses[i]) {
 8004dd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004de0:	4413      	add	r3, r2
 8004de2:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d028      	beq.n	8004e3c <process_cycle_fix+0x320>
                SensorAngles *angles = &self->angles_frame_.sensors[i];
 8004dea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004dec:	015b      	lsls	r3, r3, #5
 8004dee:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	4413      	add	r3, r2
 8004df6:	663b      	str	r3, [r7, #96]	; 0x60
                angles->angles[cycle_phase] = (float)M_PI * ((int)(short_pulse_timings[i] - ANGLE_CENTER_LEN)) / (float)CYCLE_PERIOD;
 8004df8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004dfa:	005b      	lsls	r3, r3, #1
 8004dfc:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004e00:	4413      	add	r3, r2
 8004e02:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8004e06:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8004e0a:	ee07 3a90 	vmov	s15, r3
 8004e0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e12:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004e98 <process_cycle_fix+0x37c>
 8004e16:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004e1a:	eddf 6a20 	vldr	s13, [pc, #128]	; 8004e9c <process_cycle_fix+0x380>
 8004e1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004e22:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	4413      	add	r3, r2
 8004e2a:	edc3 7a00 	vstr	s15, [r3]
                angles->updated_cycles[cycle_phase] = self->cycle_idx_;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	68d9      	ldr	r1, [r3, #12]
 8004e32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e34:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004e36:	3204      	adds	r2, #4
 8004e38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (uint32_t i = 0; i < self->num_inputs_; i++){
 8004e3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e3e:	3301      	adds	r3, #1
 8004e40:	67bb      	str	r3, [r7, #120]	; 0x78
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d3c5      	bcc.n	8004dd8 <process_cycle_fix+0x2bc>
        }
    }

    // Send the data down the pipeline every 4th cycle (30Hz). Can be increased to 120Hz if needed.

    if ((cycle_phase >= 0) ? (cycle_phase == 3) : (self->cycle_idx_ % 4 == 0)) {
 8004e4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	db06      	blt.n	8004e60 <process_cycle_fix+0x344>
 8004e52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e54:	2b03      	cmp	r3, #3
 8004e56:	bf0c      	ite	eq
 8004e58:	2301      	moveq	r3, #1
 8004e5a:	2300      	movne	r3, #0
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	e008      	b.n	8004e72 <process_cycle_fix+0x356>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	f003 0303 	and.w	r3, r3, #3
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	bf0c      	ite	eq
 8004e6c:	2301      	moveq	r3, #1
 8004e6e:	2300      	movne	r3, #0
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d02b      	beq.n	8004ece <process_cycle_fix+0x3b2>
        self->angles_frame_.time = self->cycle_start_time_;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	891a      	ldrh	r2, [r3, #8]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
        self->angles_frame_.fix_level = (cycle_phase >= 0 && self->cycle_fix_level_ >= kCycleFixAcquired)
                                        ? kCycleSynced : kCycleSyncing;
 8004e80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	db0c      	blt.n	8004ea0 <process_cycle_fix+0x384>
        self->angles_frame_.fix_level = (cycle_phase >= 0 && self->cycle_fix_level_ >= kCycleFixAcquired)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	2b04      	cmp	r3, #4
 8004e8c:	d908      	bls.n	8004ea0 <process_cycle_fix+0x384>
                                        ? kCycleSynced : kCycleSyncing;
 8004e8e:	22c8      	movs	r2, #200	; 0xc8
 8004e90:	e007      	b.n	8004ea2 <process_cycle_fix+0x386>
 8004e92:	bf00      	nop
 8004e94:	080178e0 	.word	0x080178e0
 8004e98:	40490fdb 	.word	0x40490fdb
 8004e9c:	46023400 	.word	0x46023400
 8004ea0:	2264      	movs	r2, #100	; 0x64
        self->angles_frame_.fix_level = (cycle_phase >= 0 && self->cycle_fix_level_ >= kCycleFixAcquired)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
        self->angles_frame_.cycle_idx = self->cycle_idx_;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	68da      	ldr	r2, [r3, #12]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
        self->angles_frame_.phase_id = cycle_phase;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004eb6:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4

        //UART_Print_float(self->angles_frame_.sensors[0].angles[0]);
        consume_angles(self->next, &self->angles_frame_);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f8d3 22cc 	ldr.w	r2, [r3, #716]	; 0x2cc
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	4610      	mov	r0, r2
 8004eca:	f7fd fb7f 	bl	80025cc <consume_angles>

    }

    // Prepare for the next cycle.
    reset_cycle_long_pulses(self);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f000 f81c 	bl	8004f0c <reset_cycle_long_pulses>
    reset_unclassified_long_pulses(self);
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f000 f834 	bl	8004f42 <reset_unclassified_long_pulses>
    reset_cycle_short_pulses(self);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 f83f 	bl	8004f5e <reset_cycle_short_pulses>

    self->cycle_start_time_ += CYCLE_PERIOD + pulse_start_corrections[0];
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	891a      	ldrh	r2, [r3, #8]
 8004ee4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	4413      	add	r3, r2
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8004ef0:	330d      	adds	r3, #13
 8004ef2:	b29a      	uxth	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	811a      	strh	r2, [r3, #8]
    self->cycle_idx_++;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	1c5a      	adds	r2, r3, #1
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	60da      	str	r2, [r3, #12]
}
 8004f02:	bf00      	nop
 8004f04:	3788      	adds	r7, #136	; 0x88
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop

08004f0c <reset_cycle_long_pulses>:

void reset_cycle_long_pulses(PulseProcessor *self){
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < NUM_BASE_STATIONS; i++){
 8004f14:	2300      	movs	r3, #0
 8004f16:	60fb      	str	r3, [r7, #12]
 8004f18:	e00c      	b.n	8004f34 <reset_cycle_long_pulses+0x28>
	    vector_clear(&self->cycle_long_pulses_[i]);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2264      	movs	r2, #100	; 0x64
 8004f1e:	fb02 f303 	mul.w	r3, r2, r3
 8004f22:	3310      	adds	r3, #16
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	4413      	add	r3, r2
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f7ff fcda 	bl	80048e2 <vector_clear>
	for (int i = 0; i < NUM_BASE_STATIONS; i++){
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	3301      	adds	r3, #1
 8004f32:	60fb      	str	r3, [r7, #12]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	ddef      	ble.n	8004f1a <reset_cycle_long_pulses+0xe>
	}
}
 8004f3a:	bf00      	nop
 8004f3c:	3710      	adds	r7, #16
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}

08004f42 <reset_unclassified_long_pulses>:

void reset_unclassified_long_pulses(PulseProcessor *self){
 8004f42:	b580      	push	{r7, lr}
 8004f44:	b082      	sub	sp, #8
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
	vector_clear(&self->unclassified_long_pulses_);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8004f50:	4618      	mov	r0, r3
 8004f52:	f7ff fcc6 	bl	80048e2 <vector_clear>
}
 8004f56:	bf00      	nop
 8004f58:	3708      	adds	r7, #8
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}

08004f5e <reset_cycle_short_pulses>:

void reset_cycle_short_pulses(PulseProcessor *self){
 8004f5e:	b580      	push	{r7, lr}
 8004f60:	b082      	sub	sp, #8
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
	vector_clear(&self->cycle_short_pulses_);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	33d8      	adds	r3, #216	; 0xd8
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f7ff fcb9 	bl	80048e2 <vector_clear>
}
 8004f70:	bf00      	nop
 8004f72:	3708      	adds	r7, #8
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	af00      	add	r7, sp, #0

}
 8004f7c:	bf00      	nop
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr

08004f86 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8004f86:	b480      	push	{r7}
 8004f88:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8004f8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004f9e:	bf00      	nop
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	af00      	add	r7, sp, #0

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8004fac:	4b0b      	ldr	r3, [pc, #44]	; (8004fdc <MX_RTC_Init+0x34>)
 8004fae:	4a0c      	ldr	r2, [pc, #48]	; (8004fe0 <MX_RTC_Init+0x38>)
 8004fb0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004fb2:	4b0a      	ldr	r3, [pc, #40]	; (8004fdc <MX_RTC_Init+0x34>)
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8004fb8:	4b08      	ldr	r3, [pc, #32]	; (8004fdc <MX_RTC_Init+0x34>)
 8004fba:	220f      	movs	r2, #15
 8004fbc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8004fbe:	4b07      	ldr	r3, [pc, #28]	; (8004fdc <MX_RTC_Init+0x34>)
 8004fc0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8004fc4:	60da      	str	r2, [r3, #12]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004fc6:	4805      	ldr	r0, [pc, #20]	; (8004fdc <MX_RTC_Init+0x34>)
 8004fc8:	f007 fbd9 	bl	800c77e <HAL_RTC_Init>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d001      	beq.n	8004fd6 <MX_RTC_Init+0x2e>
  {
    Error_Handler();
 8004fd2:	f7ff f9c1 	bl	8004358 <Error_Handler>
  }

}
 8004fd6:	bf00      	nop
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	20028448 	.word	0x20028448
 8004fe0:	40002800 	.word	0x40002800

08004fe4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a04      	ldr	r2, [pc, #16]	; (8005004 <HAL_RTC_MspInit+0x20>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d101      	bne.n	8004ffa <HAL_RTC_MspInit+0x16>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004ff6:	f7ff ffc6 	bl	8004f86 <LL_RCC_EnableRTC>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8004ffa:	bf00      	nop
 8004ffc:	3708      	adds	r7, #8
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	40002800 	.word	0x40002800

08005008 <RTC_ToEpoch>:
  }
} 

/* USER CODE BEGIN 1 */
// Convert Date/Time structures to epoch time
uint32_t RTC_ToEpoch(RTC_TimeTypeDef *time, RTC_DateTypeDef *date) {
 8005008:	b480      	push	{r7}
 800500a:	b087      	sub	sp, #28
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
	uint32_t JDN;

	// These hardcore math's are taken from http://en.wikipedia.org/wiki/Julian_day

	// Calculate some coefficients
	a = (14 - date->Month) / 12;
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	785b      	ldrb	r3, [r3, #1]
 8005016:	f1c3 030e 	rsb	r3, r3, #14
 800501a:	4a44      	ldr	r2, [pc, #272]	; (800512c <RTC_ToEpoch+0x124>)
 800501c:	fb82 1203 	smull	r1, r2, r2, r3
 8005020:	1052      	asrs	r2, r2, #1
 8005022:	17db      	asrs	r3, r3, #31
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	75fb      	strb	r3, [r7, #23]
	y = (date->Year + 2000) + 4800 - a; // years since 1 March, 4801 BC
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	78db      	ldrb	r3, [r3, #3]
 800502c:	b29a      	uxth	r2, r3
 800502e:	7dfb      	ldrb	r3, [r7, #23]
 8005030:	b29b      	uxth	r3, r3
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	b29b      	uxth	r3, r3
 8005036:	f503 53d4 	add.w	r3, r3, #6784	; 0x1a80
 800503a:	3310      	adds	r3, #16
 800503c:	82bb      	strh	r3, [r7, #20]
	m = date->Month + (12 * a) - 3; // since 1 March, 4801 BC
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	785a      	ldrb	r2, [r3, #1]
 8005042:	7dfb      	ldrb	r3, [r7, #23]
 8005044:	4619      	mov	r1, r3
 8005046:	0049      	lsls	r1, r1, #1
 8005048:	440b      	add	r3, r1
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	b2db      	uxtb	r3, r3
 800504e:	4413      	add	r3, r2
 8005050:	b2db      	uxtb	r3, r3
 8005052:	3b03      	subs	r3, #3
 8005054:	74fb      	strb	r3, [r7, #19]

	// Gregorian calendar date compute
	JDN = date->Date;
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	789b      	ldrb	r3, [r3, #2]
 800505a:	60fb      	str	r3, [r7, #12]
	JDN += (153 * m + 2) / 5;
 800505c:	7cfa      	ldrb	r2, [r7, #19]
 800505e:	4613      	mov	r3, r2
 8005060:	00db      	lsls	r3, r3, #3
 8005062:	4413      	add	r3, r2
 8005064:	011a      	lsls	r2, r3, #4
 8005066:	4413      	add	r3, r2
 8005068:	3302      	adds	r3, #2
 800506a:	4a31      	ldr	r2, [pc, #196]	; (8005130 <RTC_ToEpoch+0x128>)
 800506c:	fb82 1203 	smull	r1, r2, r2, r3
 8005070:	1052      	asrs	r2, r2, #1
 8005072:	17db      	asrs	r3, r3, #31
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	461a      	mov	r2, r3
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	4413      	add	r3, r2
 800507c:	60fb      	str	r3, [r7, #12]
	JDN += 365 * y;
 800507e:	8abb      	ldrh	r3, [r7, #20]
 8005080:	f240 126d 	movw	r2, #365	; 0x16d
 8005084:	fb02 f303 	mul.w	r3, r2, r3
 8005088:	461a      	mov	r2, r3
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	4413      	add	r3, r2
 800508e:	60fb      	str	r3, [r7, #12]
	JDN += y / 4;
 8005090:	8abb      	ldrh	r3, [r7, #20]
 8005092:	089b      	lsrs	r3, r3, #2
 8005094:	b29b      	uxth	r3, r3
 8005096:	461a      	mov	r2, r3
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	4413      	add	r3, r2
 800509c:	60fb      	str	r3, [r7, #12]
	JDN += -y / 100;
 800509e:	8abb      	ldrh	r3, [r7, #20]
 80050a0:	425b      	negs	r3, r3
 80050a2:	4a24      	ldr	r2, [pc, #144]	; (8005134 <RTC_ToEpoch+0x12c>)
 80050a4:	fb82 1203 	smull	r1, r2, r2, r3
 80050a8:	1152      	asrs	r2, r2, #5
 80050aa:	17db      	asrs	r3, r3, #31
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	461a      	mov	r2, r3
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	4413      	add	r3, r2
 80050b4:	60fb      	str	r3, [r7, #12]
	JDN += y / 400;
 80050b6:	8abb      	ldrh	r3, [r7, #20]
 80050b8:	4a1e      	ldr	r2, [pc, #120]	; (8005134 <RTC_ToEpoch+0x12c>)
 80050ba:	fba2 2303 	umull	r2, r3, r2, r3
 80050be:	09db      	lsrs	r3, r3, #7
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	461a      	mov	r2, r3
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	4413      	add	r3, r2
 80050c8:	60fb      	str	r3, [r7, #12]
	JDN = JDN - 32045;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f5a3 43fa 	sub.w	r3, r3, #32000	; 0x7d00
 80050d0:	3b2d      	subs	r3, #45	; 0x2d
 80050d2:	60fb      	str	r3, [r7, #12]
	JDN = JDN - JULIAN_DATE_BASE;    // Calculate from base date
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	4b18      	ldr	r3, [pc, #96]	; (8005138 <RTC_ToEpoch+0x130>)
 80050d8:	4413      	add	r3, r2
 80050da:	60fb      	str	r3, [r7, #12]
	JDN *= 86400;                     // Days to seconds
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	4a17      	ldr	r2, [pc, #92]	; (800513c <RTC_ToEpoch+0x134>)
 80050e0:	fb02 f303 	mul.w	r3, r2, r3
 80050e4:	60fb      	str	r3, [r7, #12]
	JDN += time->Hours * 3600;    // ... and today seconds
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	461a      	mov	r2, r3
 80050ec:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80050f0:	fb03 f302 	mul.w	r3, r3, r2
 80050f4:	461a      	mov	r2, r3
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	4413      	add	r3, r2
 80050fa:	60fb      	str	r3, [r7, #12]
	JDN += time->Minutes * 60;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	785b      	ldrb	r3, [r3, #1]
 8005100:	461a      	mov	r2, r3
 8005102:	4613      	mov	r3, r2
 8005104:	011b      	lsls	r3, r3, #4
 8005106:	1a9b      	subs	r3, r3, r2
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	461a      	mov	r2, r3
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	4413      	add	r3, r2
 8005110:	60fb      	str	r3, [r7, #12]
	JDN += time->Seconds;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	789b      	ldrb	r3, [r3, #2]
 8005116:	461a      	mov	r2, r3
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	4413      	add	r3, r2
 800511c:	60fb      	str	r3, [r7, #12]

	return JDN;
 800511e:	68fb      	ldr	r3, [r7, #12]
}
 8005120:	4618      	mov	r0, r3
 8005122:	371c      	adds	r7, #28
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr
 800512c:	2aaaaaab 	.word	0x2aaaaaab
 8005130:	66666667 	.word	0x66666667
 8005134:	51eb851f 	.word	0x51eb851f
 8005138:	ffdac274 	.word	0xffdac274
 800513c:	00015180 	.word	0x00015180

08005140 <RTC_FromEpoch>:

//
//// Convert epoch time to Date/Time structures
void RTC_FromEpoch(uint32_t epoch, RTC_TimeTypeDef *time, RTC_DateTypeDef *date) {
 8005140:	b590      	push	{r4, r7, lr}
 8005142:	b095      	sub	sp, #84	; 0x54
 8005144:	af00      	add	r7, sp, #0
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	607a      	str	r2, [r7, #4]
	uint32_t b;
	uint32_t c;
	uint32_t d;
	uint32_t e;
	uint32_t m;
	int16_t  year  = 0;
 800514c:	2300      	movs	r3, #0
 800514e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	int16_t  month = 0;
 8005152:	2300      	movs	r3, #0
 8005154:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	int16_t  dow   = 0;
 8005158:	2300      	movs	r3, #0
 800515a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	int16_t  mday  = 0;
 800515e:	2300      	movs	r3, #0
 8005160:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	int16_t  hour  = 0;
 8005164:	2300      	movs	r3, #0
 8005166:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	int16_t  min   = 0;
 800516a:	2300      	movs	r3, #0
 800516c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	int16_t  sec   = 0;
 8005170:	2300      	movs	r3, #0
 8005172:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	uint64_t JD    = 0;
 8005176:	f04f 0300 	mov.w	r3, #0
 800517a:	f04f 0400 	mov.w	r4, #0
 800517e:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	uint64_t JDN   = 0;
 8005182:	f04f 0300 	mov.w	r3, #0
 8005186:	f04f 0400 	mov.w	r4, #0
 800518a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

	// These hardcore math's are taken from http://en.wikipedia.org/wiki/Julian_day

	JD  = ((epoch + 43200) / (86400 >>1 )) + (2440587 << 1) + 1;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	f503 4328 	add.w	r3, r3, #43008	; 0xa800
 8005194:	33c0      	adds	r3, #192	; 0xc0
 8005196:	4a7c      	ldr	r2, [pc, #496]	; (8005388 <RTC_FromEpoch+0x248>)
 8005198:	fba2 2303 	umull	r2, r3, r2, r3
 800519c:	0bda      	lsrs	r2, r3, #15
 800519e:	4b7b      	ldr	r3, [pc, #492]	; (800538c <RTC_FromEpoch+0x24c>)
 80051a0:	4413      	add	r3, r2
 80051a2:	f04f 0400 	mov.w	r4, #0
 80051a6:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	JDN = JD >> 1;
 80051aa:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80051ae:	0864      	lsrs	r4, r4, #1
 80051b0:	ea4f 0333 	mov.w	r3, r3, rrx
 80051b4:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    tm = epoch; t1 = tm / 60; sec  = tm - (t1 * 60);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051be:	4a74      	ldr	r2, [pc, #464]	; (8005390 <RTC_FromEpoch+0x250>)
 80051c0:	fba2 2303 	umull	r2, r3, r2, r3
 80051c4:	095b      	lsrs	r3, r3, #5
 80051c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80051c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ca:	b29a      	uxth	r2, r3
 80051cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	4619      	mov	r1, r3
 80051d2:	0109      	lsls	r1, r1, #4
 80051d4:	1acb      	subs	r3, r1, r3
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	b29b      	uxth	r3, r3
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	b29b      	uxth	r3, r3
 80051de:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    tm = t1;    t1 = tm / 60; min  = tm - (t1 * 60);
 80051e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e8:	4a69      	ldr	r2, [pc, #420]	; (8005390 <RTC_FromEpoch+0x250>)
 80051ea:	fba2 2303 	umull	r2, r3, r2, r3
 80051ee:	095b      	lsrs	r3, r3, #5
 80051f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80051f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f4:	b29a      	uxth	r2, r3
 80051f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	4619      	mov	r1, r3
 80051fc:	0109      	lsls	r1, r1, #4
 80051fe:	1acb      	subs	r3, r1, r3
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	b29b      	uxth	r3, r3
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	b29b      	uxth	r3, r3
 8005208:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    tm = t1;    t1 = tm / 24; hour = tm - (t1 * 24);
 800520c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005212:	4a60      	ldr	r2, [pc, #384]	; (8005394 <RTC_FromEpoch+0x254>)
 8005214:	fba2 2303 	umull	r2, r3, r2, r3
 8005218:	091b      	lsrs	r3, r3, #4
 800521a:	62bb      	str	r3, [r7, #40]	; 0x28
 800521c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800521e:	b29a      	uxth	r2, r3
 8005220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005222:	b29b      	uxth	r3, r3
 8005224:	4619      	mov	r1, r3
 8005226:	0049      	lsls	r1, r1, #1
 8005228:	440b      	add	r3, r1
 800522a:	00db      	lsls	r3, r3, #3
 800522c:	b29b      	uxth	r3, r3
 800522e:	1ad3      	subs	r3, r2, r3
 8005230:	b29b      	uxth	r3, r3
 8005232:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

    dow   = JDN % 7;
 8005236:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800523a:	f04f 0207 	mov.w	r2, #7
 800523e:	f04f 0300 	mov.w	r3, #0
 8005242:	f7fb fc63 	bl	8000b0c <__aeabi_uldivmod>
 8005246:	461c      	mov	r4, r3
 8005248:	4613      	mov	r3, r2
 800524a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    a     = JDN + 32044;
 800524e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005250:	f503 43fa 	add.w	r3, r3, #32000	; 0x7d00
 8005254:	332c      	adds	r3, #44	; 0x2c
 8005256:	627b      	str	r3, [r7, #36]	; 0x24
    b     = ((4 * a) + 3) / 146097;
 8005258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	3303      	adds	r3, #3
 800525e:	4a4e      	ldr	r2, [pc, #312]	; (8005398 <RTC_FromEpoch+0x258>)
 8005260:	fba2 2303 	umull	r2, r3, r2, r3
 8005264:	0bdb      	lsrs	r3, r3, #15
 8005266:	623b      	str	r3, [r7, #32]
    c     = a - ((146097 * b) / 4);
 8005268:	6a3b      	ldr	r3, [r7, #32]
 800526a:	4a4c      	ldr	r2, [pc, #304]	; (800539c <RTC_FromEpoch+0x25c>)
 800526c:	fb02 f303 	mul.w	r3, r2, r3
 8005270:	089b      	lsrs	r3, r3, #2
 8005272:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	61fb      	str	r3, [r7, #28]
    d     = ((4 * c) + 3) / 1461;
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	3303      	adds	r3, #3
 800527e:	4a48      	ldr	r2, [pc, #288]	; (80053a0 <RTC_FromEpoch+0x260>)
 8005280:	fba2 2303 	umull	r2, r3, r2, r3
 8005284:	09db      	lsrs	r3, r3, #7
 8005286:	61bb      	str	r3, [r7, #24]
    e     = c - ((1461 * d) / 4);
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	f240 52b5 	movw	r2, #1461	; 0x5b5
 800528e:	fb02 f303 	mul.w	r3, r2, r3
 8005292:	089b      	lsrs	r3, r3, #2
 8005294:	69fa      	ldr	r2, [r7, #28]
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	617b      	str	r3, [r7, #20]
    m     = ((5 * e) + 2) / 153;
 800529a:	697a      	ldr	r2, [r7, #20]
 800529c:	4613      	mov	r3, r2
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	4413      	add	r3, r2
 80052a2:	3302      	adds	r3, #2
 80052a4:	4a3f      	ldr	r2, [pc, #252]	; (80053a4 <RTC_FromEpoch+0x264>)
 80052a6:	fba2 2303 	umull	r2, r3, r2, r3
 80052aa:	09db      	lsrs	r3, r3, #7
 80052ac:	613b      	str	r3, [r7, #16]
    mday  = e - (((153 * m) + 2) / 5) + 1;
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	b299      	uxth	r1, r3
 80052b2:	693a      	ldr	r2, [r7, #16]
 80052b4:	4613      	mov	r3, r2
 80052b6:	00db      	lsls	r3, r3, #3
 80052b8:	4413      	add	r3, r2
 80052ba:	011a      	lsls	r2, r3, #4
 80052bc:	4413      	add	r3, r2
 80052be:	3302      	adds	r3, #2
 80052c0:	4a39      	ldr	r2, [pc, #228]	; (80053a8 <RTC_FromEpoch+0x268>)
 80052c2:	fba2 2303 	umull	r2, r3, r2, r3
 80052c6:	089b      	lsrs	r3, r3, #2
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	1acb      	subs	r3, r1, r3
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	3301      	adds	r3, #1
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    month = m + 3 - (12 * (m / 10));
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	b29a      	uxth	r2, r3
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	4932      	ldr	r1, [pc, #200]	; (80053a8 <RTC_FromEpoch+0x268>)
 80052de:	fba1 1303 	umull	r1, r3, r1, r3
 80052e2:	08db      	lsrs	r3, r3, #3
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	4619      	mov	r1, r3
 80052e8:	0049      	lsls	r1, r1, #1
 80052ea:	440b      	add	r3, r1
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	3303      	adds	r3, #3
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    year  = (100 * b) + d - 4800 + (m / 10);
 80052fc:	6a3b      	ldr	r3, [r7, #32]
 80052fe:	b29b      	uxth	r3, r3
 8005300:	461a      	mov	r2, r3
 8005302:	0092      	lsls	r2, r2, #2
 8005304:	4413      	add	r3, r2
 8005306:	461a      	mov	r2, r3
 8005308:	0091      	lsls	r1, r2, #2
 800530a:	461a      	mov	r2, r3
 800530c:	460b      	mov	r3, r1
 800530e:	4413      	add	r3, r2
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	b29a      	uxth	r2, r3
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	b29b      	uxth	r3, r3
 8005318:	4413      	add	r3, r2
 800531a:	b29a      	uxth	r2, r3
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	4922      	ldr	r1, [pc, #136]	; (80053a8 <RTC_FromEpoch+0x268>)
 8005320:	fba1 1303 	umull	r1, r3, r1, r3
 8005324:	08db      	lsrs	r3, r3, #3
 8005326:	b29b      	uxth	r3, r3
 8005328:	4413      	add	r3, r2
 800532a:	b29b      	uxth	r3, r3
 800532c:	f5a3 5396 	sub.w	r3, r3, #4800	; 0x12c0
 8005330:	b29b      	uxth	r3, r3
 8005332:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    date->Year    = year - 2000;
 8005336:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800533a:	b2db      	uxtb	r3, r3
 800533c:	3330      	adds	r3, #48	; 0x30
 800533e:	b2da      	uxtb	r2, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	70da      	strb	r2, [r3, #3]
    date->Month   = month;
 8005344:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005348:	b2da      	uxtb	r2, r3
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	705a      	strb	r2, [r3, #1]
    date->Date    = mday;
 800534e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005352:	b2da      	uxtb	r2, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	709a      	strb	r2, [r3, #2]
    date->WeekDay = dow;
 8005358:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800535c:	b2da      	uxtb	r2, r3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	701a      	strb	r2, [r3, #0]
    time->Hours   = hour;
 8005362:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005366:	b2da      	uxtb	r2, r3
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	701a      	strb	r2, [r3, #0]
    time->Minutes = min;
 800536c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005370:	b2da      	uxtb	r2, r3
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	705a      	strb	r2, [r3, #1]
    time->Seconds = sec;
 8005376:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800537a:	b2da      	uxtb	r2, r3
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	709a      	strb	r2, [r3, #2]
}
 8005380:	bf00      	nop
 8005382:	3754      	adds	r7, #84	; 0x54
 8005384:	46bd      	mov	sp, r7
 8005386:	bd90      	pop	{r4, r7, pc}
 8005388:	c22e4507 	.word	0xc22e4507
 800538c:	004a7b17 	.word	0x004a7b17
 8005390:	88888889 	.word	0x88888889
 8005394:	aaaaaaab 	.word	0xaaaaaaab
 8005398:	396b06bd 	.word	0x396b06bd
 800539c:	00023ab1 	.word	0x00023ab1
 80053a0:	166db073 	.word	0x166db073
 80053a4:	d62b80d7 	.word	0xd62b80d7
 80053a8:	cccccccd 	.word	0xcccccccd

080053ac <LL_AHB3_GRP1_EnableClock>:
{
 80053ac:	b480      	push	{r7}
 80053ae:	b085      	sub	sp, #20
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80053b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80053ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80053c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4013      	ands	r3, r2
 80053ce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80053d0:	68fb      	ldr	r3, [r7, #12]
}
 80053d2:	bf00      	nop
 80053d4:	3714      	adds	r7, #20
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr

080053de <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80053de:	b580      	push	{r7, lr}
 80053e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80053e2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80053e6:	f7ff ffe1 	bl	80053ac <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80053ea:	2200      	movs	r2, #0
 80053ec:	210f      	movs	r1, #15
 80053ee:	f06f 0001 	mvn.w	r0, #1
 80053f2:	f002 ff0c 	bl	800820e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */
  HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn , 15, 0);
 80053f6:	2200      	movs	r2, #0
 80053f8:	210f      	movs	r1, #15
 80053fa:	202c      	movs	r0, #44	; 0x2c
 80053fc:	f002 ff07 	bl	800820e <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn , 15, 0);
 8005400:	2200      	movs	r2, #0
 8005402:	210f      	movs	r1, #15
 8005404:	202d      	movs	r0, #45	; 0x2d
 8005406:	f002 ff02 	bl	800820e <HAL_NVIC_SetPriority>
  /* USER CODE END MspInit 1 */
}
 800540a:	bf00      	nop
 800540c:	bd80      	pop	{r7, pc}

0800540e <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800540e:	b480      	push	{r7}
 8005410:	b085      	sub	sp, #20
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8005416:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800541a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800541c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	4313      	orrs	r3, r2
 8005424:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005426:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800542a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4013      	ands	r3, r2
 8005430:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005432:	68fb      	ldr	r3, [r7, #12]
}
 8005434:	bf00      	nop
 8005436:	3714      	adds	r7, #20
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b08c      	sub	sp, #48	; 0x30
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005448:	2300      	movs	r3, #0
 800544a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800544c:	2300      	movs	r3, #0
 800544e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8005450:	2200      	movs	r2, #0
 8005452:	6879      	ldr	r1, [r7, #4]
 8005454:	2019      	movs	r0, #25
 8005456:	f002 feda 	bl	800820e <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 800545a:	2019      	movs	r0, #25
 800545c:	f002 fef1 	bl	8008242 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8005460:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005464:	f7ff ffd3 	bl	800540e <LL_APB2_GRP1_EnableClock>
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005468:	f107 0208 	add.w	r2, r7, #8
 800546c:	f107 030c 	add.w	r3, r7, #12
 8005470:	4611      	mov	r1, r2
 8005472:	4618      	mov	r0, r3
 8005474:	f006 fc76 	bl	800bd64 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8005478:	f006 fc5e 	bl	800bd38 <HAL_RCC_GetPCLK2Freq>
 800547c:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800547e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005480:	4a12      	ldr	r2, [pc, #72]	; (80054cc <HAL_InitTick+0x8c>)
 8005482:	fba2 2303 	umull	r2, r3, r2, r3
 8005486:	0c9b      	lsrs	r3, r3, #18
 8005488:	3b01      	subs	r3, #1
 800548a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800548c:	4b10      	ldr	r3, [pc, #64]	; (80054d0 <HAL_InitTick+0x90>)
 800548e:	4a11      	ldr	r2, [pc, #68]	; (80054d4 <HAL_InitTick+0x94>)
 8005490:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8005492:	4b0f      	ldr	r3, [pc, #60]	; (80054d0 <HAL_InitTick+0x90>)
 8005494:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005498:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800549a:	4a0d      	ldr	r2, [pc, #52]	; (80054d0 <HAL_InitTick+0x90>)
 800549c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800549e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80054a0:	4b0b      	ldr	r3, [pc, #44]	; (80054d0 <HAL_InitTick+0x90>)
 80054a2:	2200      	movs	r2, #0
 80054a4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80054a6:	4b0a      	ldr	r3, [pc, #40]	; (80054d0 <HAL_InitTick+0x90>)
 80054a8:	2200      	movs	r2, #0
 80054aa:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80054ac:	4808      	ldr	r0, [pc, #32]	; (80054d0 <HAL_InitTick+0x90>)
 80054ae:	f007 fcc3 	bl	800ce38 <HAL_TIM_Base_Init>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d104      	bne.n	80054c2 <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80054b8:	4805      	ldr	r0, [pc, #20]	; (80054d0 <HAL_InitTick+0x90>)
 80054ba:	f007 fd3f 	bl	800cf3c <HAL_TIM_Base_Start_IT>
 80054be:	4603      	mov	r3, r0
 80054c0:	e000      	b.n	80054c4 <HAL_InitTick+0x84>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3730      	adds	r7, #48	; 0x30
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	431bde83 	.word	0x431bde83
 80054d0:	2002846c 	.word	0x2002846c
 80054d4:	40012c00 	.word	0x40012c00

080054d8 <HAL_TSC_Init>:
  *         in the TSC_InitTypeDef structure and initialize the associated handle.
  * @param  htsc TSC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_Init(TSC_HandleTypeDef *htsc)
{
 80054d8:	b590      	push	{r4, r7, lr}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  /* Check TSC handle allocation */
  if (htsc == NULL)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d101      	bne.n	80054ea <HAL_TSC_Init+0x12>
  {
    return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e072      	b.n	80055d0 <HAL_TSC_Init+0xf8>
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));
  assert_param(IS_TSC_GROUP(htsc->Init.ChannelIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.ShieldIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.SamplingIOs));

  if (htsc->State == HAL_TSC_STATE_RESET)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d106      	bne.n	8005504 <HAL_TSC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htsc->Lock = HAL_UNLOCKED;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    htsc->MspInitCallback(htsc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_TSC_MspInit(htsc);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f001 f8a0 	bl	8006644 <HAL_TSC_MspInit>
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2202      	movs	r2, #2
 8005508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /*--------------------------------------------------------------------------*/
  /* Set TSC parameters */

  /* Enable TSC */
  htsc->Instance->CR = TSC_CR_TSCE;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2201      	movs	r2, #1
 8005512:	601a      	str	r2, [r3, #0]

  /* Set all functions */
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	6819      	ldr	r1, [r3, #0]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	685a      	ldr	r2, [r3, #4]
                         htsc->Init.CTPulseLowLength |
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	689b      	ldr	r3, [r3, #8]
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8005522:	431a      	orrs	r2, r3
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	045b      	lsls	r3, r3, #17
                         htsc->Init.CTPulseLowLength |
 800552a:	431a      	orrs	r2, r3
                         htsc->Init.SpreadSpectrumPrescaler |
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	695b      	ldr	r3, [r3, #20]
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 8005530:	431a      	orrs	r2, r3
                         htsc->Init.PulseGeneratorPrescaler |
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	699b      	ldr	r3, [r3, #24]
                         htsc->Init.SpreadSpectrumPrescaler |
 8005536:	431a      	orrs	r2, r3
                         htsc->Init.MaxCountValue |
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	69db      	ldr	r3, [r3, #28]
                         htsc->Init.PulseGeneratorPrescaler |
 800553c:	431a      	orrs	r2, r3
                         htsc->Init.SynchroPinPolarity |
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         htsc->Init.MaxCountValue |
 8005542:	431a      	orrs	r2, r3
                         htsc->Init.AcquisitionMode);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         htsc->Init.SynchroPinPolarity |
 8005548:	431a      	orrs	r2, r3
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	430a      	orrs	r2, r1
 8005550:	601a      	str	r2, [r3, #0]

  /* Spread spectrum */
  if (htsc->Init.SpreadSpectrum == ENABLE)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	7b1b      	ldrb	r3, [r3, #12]
 8005556:	2b01      	cmp	r3, #1
 8005558:	d107      	bne.n	800556a <HAL_TSC_Init+0x92>
  {
    htsc->Instance->CR |= TSC_CR_SSE;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005568:	601a      	str	r2, [r3, #0]
  }

  /* Disable Schmitt trigger hysteresis on all used TSC IOs */
  htsc->Instance->IOHCR = (~(htsc->Init.ChannelIOs | htsc->Init.ShieldIOs | htsc->Init.SamplingIOs));
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005572:	431a      	orrs	r2, r3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005578:	431a      	orrs	r2, r3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	43d2      	mvns	r2, r2
 8005580:	611a      	str	r2, [r3, #16]

  /* Set channel and shield IOs */
  htsc->Instance->IOCCR = (htsc->Init.ChannelIOs | htsc->Init.ShieldIOs);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	430a      	orrs	r2, r1
 8005590:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set sampling IOs */
  htsc->Instance->IOSCR = htsc->Init.SamplingIOs;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800559a:	621a      	str	r2, [r3, #32]

  /* Set the groups to be acquired */
  htsc->Instance->IOGCSR = TSC_extract_groups(htsc->Init.ChannelIOs);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681c      	ldr	r4, [r3, #0]
 80055a4:	4610      	mov	r0, r2
 80055a6:	f000 f952 	bl	800584e <TSC_extract_groups>
 80055aa:	4603      	mov	r3, r0
 80055ac:	6323      	str	r3, [r4, #48]	; 0x30

  /* Disable interrupts */
  htsc->Instance->IER &= (~(TSC_IT_EOA | TSC_IT_MCE));
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	685a      	ldr	r2, [r3, #4]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f022 0203 	bic.w	r2, r2, #3
 80055bc:	605a      	str	r2, [r3, #4]

  /* Clear flags */
  htsc->Instance->ICR = (TSC_FLAG_EOA | TSC_FLAG_MCE);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	2203      	movs	r2, #3
 80055c4:	609a      	str	r2, [r3, #8]

  /*--------------------------------------------------------------------------*/

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_READY;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2201      	movs	r2, #1
 80055ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80055ce:	2300      	movs	r3, #0
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd90      	pop	{r4, r7, pc}

080055d8 <HAL_TSC_Start_IT>:
  * @param  htsc Pointer to a TSC_HandleTypeDef structure that contains
  *         the configuration information for the specified TSC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_TSC_Start_IT(TSC_HandleTypeDef *htsc)
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));

  /* Process locked */
  __HAL_LOCK(htsc);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d101      	bne.n	80055ee <HAL_TSC_Start_IT+0x16>
 80055ea:	2302      	movs	r3, #2
 80055ec:	e04b      	b.n	8005686 <HAL_TSC_Start_IT+0xae>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2201      	movs	r2, #1
 80055f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Change TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2202      	movs	r2, #2
 80055fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable end of acquisition interrupt */
  __HAL_TSC_ENABLE_IT(htsc, TSC_IT_EOA);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	685a      	ldr	r2, [r3, #4]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f042 0201 	orr.w	r2, r2, #1
 800560c:	605a      	str	r2, [r3, #4]

  /* Enable max count error interrupt (optional) */
  if (htsc->Init.MaxCountInterrupt == ENABLE)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005614:	2b01      	cmp	r3, #1
 8005616:	d108      	bne.n	800562a <HAL_TSC_Start_IT+0x52>
  {
    __HAL_TSC_ENABLE_IT(htsc, TSC_IT_MCE);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	685a      	ldr	r2, [r3, #4]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f042 0202 	orr.w	r2, r2, #2
 8005626:	605a      	str	r2, [r3, #4]
 8005628:	e007      	b.n	800563a <HAL_TSC_Start_IT+0x62>
  }
  else
  {
    __HAL_TSC_DISABLE_IT(htsc, TSC_IT_MCE);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	685a      	ldr	r2, [r3, #4]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f022 0202 	bic.w	r2, r2, #2
 8005638:	605a      	str	r2, [r3, #4]
  }

  /* Clear flags */
  __HAL_TSC_CLEAR_FLAG(htsc, (TSC_FLAG_EOA | TSC_FLAG_MCE));
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2203      	movs	r2, #3
 8005640:	609a      	str	r2, [r3, #8]

  /* Set touch sensing IOs not acquired to the specified IODefaultMode */
  if (htsc->Init.IODefaultMode == TSC_IODEF_OUT_PP_LOW)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a1b      	ldr	r3, [r3, #32]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d108      	bne.n	800565c <HAL_TSC_Start_IT+0x84>
  {
    __HAL_TSC_SET_IODEF_OUTPPLOW(htsc);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f022 0210 	bic.w	r2, r2, #16
 8005658:	601a      	str	r2, [r3, #0]
 800565a:	e007      	b.n	800566c <HAL_TSC_Start_IT+0x94>
  }
  else
  {
    __HAL_TSC_SET_IODEF_INFLOAT(htsc);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f042 0210 	orr.w	r2, r2, #16
 800566a:	601a      	str	r2, [r3, #0]
  }

  /* Launch the acquisition */
  __HAL_TSC_START_ACQ(htsc);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f042 0202 	orr.w	r2, r2, #2
 800567a:	601a      	str	r2, [r3, #0]

  /* Process unlocked */
  __HAL_UNLOCK(htsc);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	370c      	adds	r7, #12
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr

08005692 <HAL_TSC_GroupGetStatus>:
  *         the configuration information for the specified TSC.
  * @param  gx_index Index of the group
  * @retval Group status
  */
TSC_GroupStatusTypeDef HAL_TSC_GroupGetStatus(TSC_HandleTypeDef *htsc, uint32_t gx_index)
{
 8005692:	b480      	push	{r7}
 8005694:	b083      	sub	sp, #12
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
 800569a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));
  assert_param(IS_TSC_GROUP_INDEX(gx_index));

  /* Return the group status */
  return (__HAL_TSC_GET_GROUP_STATUS(htsc, gx_index));
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	f003 030f 	and.w	r3, r3, #15
 80056a8:	3310      	adds	r3, #16
 80056aa:	2101      	movs	r1, #1
 80056ac:	fa01 f303 	lsl.w	r3, r1, r3
 80056b0:	401a      	ands	r2, r3
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	f003 030f 	and.w	r3, r3, #15
 80056b8:	3310      	adds	r3, #16
 80056ba:	2101      	movs	r1, #1
 80056bc:	fa01 f303 	lsl.w	r3, r1, r3
 80056c0:	429a      	cmp	r2, r3
 80056c2:	bf0c      	ite	eq
 80056c4:	2301      	moveq	r3, #1
 80056c6:	2300      	movne	r3, #0
 80056c8:	b2db      	uxtb	r3, r3
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	370c      	adds	r7, #12
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr

080056d6 <HAL_TSC_GroupGetValue>:
  *         the configuration information for the specified TSC.
  * @param  gx_index Index of the group
  * @retval Acquisition measure
  */
uint32_t HAL_TSC_GroupGetValue(TSC_HandleTypeDef *htsc, uint32_t gx_index)
{
 80056d6:	b480      	push	{r7}
 80056d8:	b083      	sub	sp, #12
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
 80056de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));
  assert_param(IS_TSC_GROUP_INDEX(gx_index));

  /* Return the group acquisition counter */
  return htsc->Instance->IOGXCR[gx_index];
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	330c      	adds	r3, #12
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	4413      	add	r3, r2
 80056ec:	685b      	ldr	r3, [r3, #4]
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	370c      	adds	r7, #12
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr

080056fa <HAL_TSC_IOConfig>:
  *         the configuration information for the specified TSC.
  * @param  config Pointer to the configuration structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_IOConfig(TSC_HandleTypeDef *htsc, TSC_IOConfigTypeDef *config)
{
 80056fa:	b590      	push	{r4, r7, lr}
 80056fc:	b083      	sub	sp, #12
 80056fe:	af00      	add	r7, sp, #0
 8005700:	6078      	str	r0, [r7, #4]
 8005702:	6039      	str	r1, [r7, #0]
  assert_param(IS_TSC_GROUP(config->ChannelIOs));
  assert_param(IS_TSC_GROUP(config->ShieldIOs));
  assert_param(IS_TSC_GROUP(config->SamplingIOs));

  /* Process locked */
  __HAL_LOCK(htsc);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800570a:	2b01      	cmp	r3, #1
 800570c:	d101      	bne.n	8005712 <HAL_TSC_IOConfig+0x18>
 800570e:	2302      	movs	r3, #2
 8005710:	e032      	b.n	8005778 <HAL_TSC_IOConfig+0x7e>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2201      	movs	r2, #1
 8005716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Stop acquisition */
  __HAL_TSC_STOP_ACQ(htsc);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f022 0202 	bic.w	r2, r2, #2
 8005728:	601a      	str	r2, [r3, #0]

  /* Disable Schmitt trigger hysteresis on all used TSC IOs */
  htsc->Instance->IOHCR = (~(config->ChannelIOs | config->ShieldIOs | config->SamplingIOs));
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	431a      	orrs	r2, r3
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	431a      	orrs	r2, r3
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	43d2      	mvns	r2, r2
 8005740:	611a      	str	r2, [r3, #16]

  /* Set channel and shield IOs */
  htsc->Instance->IOCCR = (config->ChannelIOs | config->ShieldIOs);
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	6819      	ldr	r1, [r3, #0]
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	685a      	ldr	r2, [r3, #4]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	430a      	orrs	r2, r1
 8005750:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set sampling IOs */
  htsc->Instance->IOSCR = config->SamplingIOs;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	683a      	ldr	r2, [r7, #0]
 8005758:	6892      	ldr	r2, [r2, #8]
 800575a:	621a      	str	r2, [r3, #32]

  /* Set groups to be acquired */
  htsc->Instance->IOGCSR = TSC_extract_groups(config->ChannelIOs);
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681c      	ldr	r4, [r3, #0]
 8005764:	4610      	mov	r0, r2
 8005766:	f000 f872 	bl	800584e <TSC_extract_groups>
 800576a:	4603      	mov	r3, r0
 800576c:	6323      	str	r3, [r4, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(htsc);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005776:	2300      	movs	r3, #0
}
 8005778:	4618      	mov	r0, r3
 800577a:	370c      	adds	r7, #12
 800577c:	46bd      	mov	sp, r7
 800577e:	bd90      	pop	{r4, r7, pc}

08005780 <HAL_TSC_IODischarge>:
  *         the configuration information for the specified TSC.
  * @param  choice This parameter can be set to ENABLE or DISABLE.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_IODischarge(TSC_HandleTypeDef *htsc, FunctionalState choice)
{
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	460b      	mov	r3, r1
 800578a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));

  /* Process locked */
  __HAL_LOCK(htsc);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005792:	2b01      	cmp	r3, #1
 8005794:	d101      	bne.n	800579a <HAL_TSC_IODischarge+0x1a>
 8005796:	2302      	movs	r3, #2
 8005798:	e01c      	b.n	80057d4 <HAL_TSC_IODischarge+0x54>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2201      	movs	r2, #1
 800579e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (choice == ENABLE)
 80057a2:	78fb      	ldrb	r3, [r7, #3]
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d108      	bne.n	80057ba <HAL_TSC_IODischarge+0x3a>
  {
    __HAL_TSC_SET_IODEF_OUTPPLOW(htsc);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f022 0210 	bic.w	r2, r2, #16
 80057b6:	601a      	str	r2, [r3, #0]
 80057b8:	e007      	b.n	80057ca <HAL_TSC_IODischarge+0x4a>
  }
  else
  {
    __HAL_TSC_SET_IODEF_INFLOAT(htsc);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f042 0210 	orr.w	r2, r2, #16
 80057c8:	601a      	str	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(htsc);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return the group acquisition counter */
  return HAL_OK;
 80057d2:	2300      	movs	r3, #0
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	370c      	adds	r7, #12
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <HAL_TSC_IRQHandler>:
  * @param  htsc Pointer to a TSC_HandleTypeDef structure that contains
  *         the configuration information for the specified TSC.
  * @retval None
  */
void HAL_TSC_IRQHandler(TSC_HandleTypeDef *htsc)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));

  /* Check if the end of acquisition occurred */
  if (__HAL_TSC_GET_FLAG(htsc, TSC_FLAG_EOA) != RESET)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	f003 0301 	and.w	r3, r3, #1
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d103      	bne.n	80057fe <HAL_TSC_IRQHandler+0x1e>
  {
    /* Clear EOA flag */
    __HAL_TSC_CLEAR_FLAG(htsc, TSC_FLAG_EOA);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2201      	movs	r2, #1
 80057fc:	609a      	str	r2, [r3, #8]
  }

  /* Check if max count error occurred */
  if (__HAL_TSC_GET_FLAG(htsc, TSC_FLAG_MCE) != RESET)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	f003 0302 	and.w	r3, r3, #2
 8005808:	2b02      	cmp	r3, #2
 800580a:	d10b      	bne.n	8005824 <HAL_TSC_IRQHandler+0x44>
  {
    /* Clear MCE flag */
    __HAL_TSC_CLEAR_FLAG(htsc, TSC_FLAG_MCE);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2202      	movs	r2, #2
 8005812:	609a      	str	r2, [r3, #8]
    /* Change TSC state */
    htsc->State = HAL_TSC_STATE_ERROR;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2203      	movs	r2, #3
 8005818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
#if (USE_HAL_TSC_REGISTER_CALLBACKS == 1)
    htsc->ErrorCallback(htsc);
#else
    /* Conversion completed callback */
    HAL_TSC_ErrorCallback(htsc);
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 f80c 	bl	800583a <HAL_TSC_ErrorCallback>
#else
    /* Conversion completed callback */
    HAL_TSC_ConvCpltCallback(htsc);
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }
}
 8005822:	e006      	b.n	8005832 <HAL_TSC_IRQHandler+0x52>
    htsc->State = HAL_TSC_STATE_READY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    HAL_TSC_ConvCpltCallback(htsc);
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f000 fb27 	bl	8005e80 <HAL_TSC_ConvCpltCallback>
}
 8005832:	bf00      	nop
 8005834:	3708      	adds	r7, #8
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}

0800583a <HAL_TSC_ErrorCallback>:
  * @param  htsc Pointer to a TSC_HandleTypeDef structure that contains
  *         the configuration information for the specified TSC.
  * @retval None
  */
__weak void HAL_TSC_ErrorCallback(TSC_HandleTypeDef *htsc)
{
 800583a:	b480      	push	{r7}
 800583c:	b083      	sub	sp, #12
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
  UNUSED(htsc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TSC_ErrorCallback could be implemented in the user file.
   */
}
 8005842:	bf00      	nop
 8005844:	370c      	adds	r7, #12
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr

0800584e <TSC_extract_groups>:
  * @brief  Utility function used to set the acquired groups mask.
  * @param  iomask Channels IOs mask
  * @retval Acquired groups mask
  */
static uint32_t TSC_extract_groups(uint32_t iomask)
{
 800584e:	b480      	push	{r7}
 8005850:	b085      	sub	sp, #20
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
  uint32_t groups = 0UL;
 8005856:	2300      	movs	r3, #0
 8005858:	60fb      	str	r3, [r7, #12]
  uint32_t idx;

  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 800585a:	2300      	movs	r3, #0
 800585c:	60bb      	str	r3, [r7, #8]
 800585e:	e011      	b.n	8005884 <TSC_extract_groups+0x36>
  {
    if ((iomask & (0x0FUL << (idx * 4UL))) != 0UL )
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	220f      	movs	r2, #15
 8005866:	409a      	lsls	r2, r3
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4013      	ands	r3, r2
 800586c:	2b00      	cmp	r3, #0
 800586e:	d006      	beq.n	800587e <TSC_extract_groups+0x30>
    {
      groups |= (1UL << idx);
 8005870:	2201      	movs	r2, #1
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	fa02 f303 	lsl.w	r3, r2, r3
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	4313      	orrs	r3, r2
 800587c:	60fb      	str	r3, [r7, #12]
  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	3301      	adds	r3, #1
 8005882:	60bb      	str	r3, [r7, #8]
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	2b06      	cmp	r3, #6
 8005888:	d9ea      	bls.n	8005860 <TSC_extract_groups+0x12>
    }
  }

  return groups;
 800588a:	68fb      	ldr	r3, [r7, #12]
}
 800588c:	4618      	mov	r0, r3
 800588e:	3714      	adds	r7, #20
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005898:	b480      	push	{r7}
 800589a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800589c:	bf00      	nop
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr

080058a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80058a6:	b480      	push	{r7}
 80058a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80058aa:	e7fe      	b.n	80058aa <HardFault_Handler+0x4>

080058ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80058ac:	b480      	push	{r7}
 80058ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80058b0:	e7fe      	b.n	80058b0 <MemManage_Handler+0x4>

080058b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80058b2:	b480      	push	{r7}
 80058b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80058b6:	e7fe      	b.n	80058b6 <BusFault_Handler+0x4>

080058b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80058b8:	b480      	push	{r7}
 80058ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80058bc:	e7fe      	b.n	80058bc <UsageFault_Handler+0x4>

080058be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80058be:	b480      	push	{r7}
 80058c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80058c2:	bf00      	nop
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80058d0:	2004      	movs	r0, #4
 80058d2:	f003 f9ab 	bl	8008c2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  // received message from secondary MCU that a message is ready
//  osSemaphoreRelease(interProcessorInterruptSemHandle);
  osThreadFlagsSet(interProcTaskHandle, 0x00000004U);
 80058d6:	4b04      	ldr	r3, [pc, #16]	; (80058e8 <EXTI2_IRQHandler+0x1c>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2104      	movs	r1, #4
 80058dc:	4618      	mov	r0, r3
 80058de:	f008 fc87 	bl	800e1f0 <osThreadFlagsSet>
  /* USER CODE END EXTI2_IRQn 1 */
}
 80058e2:	bf00      	nop
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	20027cf8 	.word	0x20027cf8

080058ec <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80058f0:	4802      	ldr	r0, [pc, #8]	; (80058fc <DMA1_Channel1_IRQHandler+0x10>)
 80058f2:	f002 fec4 	bl	800867e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80058f6:	bf00      	nop
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	2002774c 	.word	0x2002774c

08005900 <COMP_IRQHandler>:

/**
  * @brief This function handles COMP1 and COMP2 interrupts through EXTI lines 20 and 21.
  */
void COMP_IRQHandler(void)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP_IRQn 0 */

  /* USER CODE END COMP_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 8005904:	4802      	ldr	r0, [pc, #8]	; (8005910 <COMP_IRQHandler+0x10>)
 8005906:	f002 fb19 	bl	8007f3c <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP_IRQn 1 */

  /* USER CODE END COMP_IRQn 1 */
}
 800590a:	bf00      	nop
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	20027d20 	.word	0x20027d20

08005914 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8005918:	2020      	movs	r0, #32
 800591a:	f003 f987 	bl	8008c2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800591e:	bf00      	nop
 8005920:	bd80      	pop	{r7, pc}
	...

08005924 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005928:	4803      	ldr	r0, [pc, #12]	; (8005938 <TIM1_UP_TIM16_IRQHandler+0x14>)
 800592a:	f007 fc11 	bl	800d150 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800592e:	4803      	ldr	r0, [pc, #12]	; (800593c <TIM1_UP_TIM16_IRQHandler+0x18>)
 8005930:	f007 fc0e 	bl	800d150 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8005934:	bf00      	nop
 8005936:	bd80      	pop	{r7, pc}
 8005938:	2002846c 	.word	0x2002846c
 800593c:	200284ec 	.word	0x200284ec

08005940 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005944:	4802      	ldr	r0, [pc, #8]	; (8005950 <I2C1_EV_IRQHandler+0x10>)
 8005946:	f003 fd87 	bl	8009458 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800594a:	bf00      	nop
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop
 8005950:	20027eb0 	.word	0x20027eb0

08005954 <IPCC_C1_TX_IRQHandler>:

/* USER CODE BEGIN 1 */
void IPCC_C1_TX_IRQHandler(void)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	af00      	add	r7, sp, #0
  HW_IPCC_Tx_Handler();
 8005958:	f00f fe4c 	bl	80155f4 <HW_IPCC_Tx_Handler>

  return;
 800595c:	bf00      	nop
}
 800595e:	bd80      	pop	{r7, pc}

08005960 <IPCC_C1_RX_IRQHandler>:
void IPCC_C1_RX_IRQHandler(void)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	af00      	add	r7, sp, #0
  HW_IPCC_Rx_Handler();
 8005964:	f00f fdec 	bl	8015540 <HW_IPCC_Rx_Handler>
  return;
 8005968:	bf00      	nop
}
 800596a:	bd80      	pop	{r7, pc}

0800596c <TSC_IRQHandler>:

/**
  * @brief This function handles TSC global interrupt.
  */
void TSC_IRQHandler(void)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TSC_IRQn 0 */

  /* USER CODE END TSC_IRQn 0 */
  HAL_TSC_IRQHandler(&htsc);
 8005970:	4802      	ldr	r0, [pc, #8]	; (800597c <TSC_IRQHandler+0x10>)
 8005972:	f7ff ff35 	bl	80057e0 <HAL_TSC_IRQHandler>
  /* USER CODE BEGIN TSC_IRQn 1 */

  /* USER CODE END TSC_IRQn 1 */
}
 8005976:	bf00      	nop
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	20028560 	.word	0x20028560

08005980 <logApplication>:
 * @param[in]     aFormat     User string format.
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
void logApplication(appliLogLevel_t aLogLevel, appliLogRegion_t aLogRegion, const char *aFormat, ...)
{
 8005980:	b40c      	push	{r2, r3}
 8005982:	b480      	push	{r7}
 8005984:	b083      	sub	sp, #12
 8005986:	af00      	add	r7, sp, #0
 8005988:	4603      	mov	r3, r0
 800598a:	460a      	mov	r2, r1
 800598c:	71fb      	strb	r3, [r7, #7]
 800598e:	4613      	mov	r3, r2
 8005990:	71bb      	strb	r3, [r7, #6]
  }else
  {
    /* Print nothing */
  }
#endif /* CFG_DEBUG_TRACE */
}
 8005992:	bf00      	nop
 8005994:	370c      	adds	r7, #12
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	b002      	add	sp, #8
 800599e:	4770      	bx	lr

080059a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80059a0:	b480      	push	{r7}
 80059a2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 80059a4:	4b26      	ldr	r3, [pc, #152]	; (8005a40 <SystemInit+0xa0>)
 80059a6:	2200      	movs	r2, #0
 80059a8:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 80059aa:	4b25      	ldr	r3, [pc, #148]	; (8005a40 <SystemInit+0xa0>)
 80059ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059b0:	4a23      	ldr	r2, [pc, #140]	; (8005a40 <SystemInit+0xa0>)
 80059b2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80059b6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80059ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059c4:	f043 0301 	orr.w	r3, r3, #1
 80059c8:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80059ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059ce:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80059d2:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80059d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059de:	4b19      	ldr	r3, [pc, #100]	; (8005a44 <SystemInit+0xa4>)
 80059e0:	4013      	ands	r3, r2
 80059e2:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80059e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059f0:	f023 0305 	bic.w	r3, r3, #5
 80059f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80059f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a04:	f023 0301 	bic.w	r3, r3, #1
 8005a08:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8005a0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a10:	4a0d      	ldr	r2, [pc, #52]	; (8005a48 <SystemInit+0xa8>)
 8005a12:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8005a14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a18:	4a0b      	ldr	r2, [pc, #44]	; (8005a48 <SystemInit+0xa8>)
 8005a1a:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005a1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a2a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005a2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a30:	2200      	movs	r2, #0
 8005a32:	619a      	str	r2, [r3, #24]
}
 8005a34:	bf00      	nop
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr
 8005a3e:	bf00      	nop
 8005a40:	e000ed00 	.word	0xe000ed00
 8005a44:	faf6fefb 	.word	0xfaf6fefb
 8005a48:	22041000 	.word	0x22041000

08005a4c <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b087      	sub	sp, #28
 8005a50:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8005a52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	091b      	lsrs	r3, r3, #4
 8005a5a:	f003 030f 	and.w	r3, r3, #15
 8005a5e:	4a47      	ldr	r2, [pc, #284]	; (8005b7c <SystemCoreClockUpdate+0x130>)
 8005a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a64:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	f003 030c 	and.w	r3, r3, #12
 8005a70:	2b0c      	cmp	r3, #12
 8005a72:	d867      	bhi.n	8005b44 <SystemCoreClockUpdate+0xf8>
 8005a74:	a201      	add	r2, pc, #4	; (adr r2, 8005a7c <SystemCoreClockUpdate+0x30>)
 8005a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a7a:	bf00      	nop
 8005a7c:	08005ab1 	.word	0x08005ab1
 8005a80:	08005b45 	.word	0x08005b45
 8005a84:	08005b45 	.word	0x08005b45
 8005a88:	08005b45 	.word	0x08005b45
 8005a8c:	08005ab9 	.word	0x08005ab9
 8005a90:	08005b45 	.word	0x08005b45
 8005a94:	08005b45 	.word	0x08005b45
 8005a98:	08005b45 	.word	0x08005b45
 8005a9c:	08005ac1 	.word	0x08005ac1
 8005aa0:	08005b45 	.word	0x08005b45
 8005aa4:	08005b45 	.word	0x08005b45
 8005aa8:	08005b45 	.word	0x08005b45
 8005aac:	08005ac9 	.word	0x08005ac9
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8005ab0:	4a33      	ldr	r2, [pc, #204]	; (8005b80 <SystemCoreClockUpdate+0x134>)
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	6013      	str	r3, [r2, #0]
      break;
 8005ab6:	e049      	b.n	8005b4c <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 8005ab8:	4b31      	ldr	r3, [pc, #196]	; (8005b80 <SystemCoreClockUpdate+0x134>)
 8005aba:	4a32      	ldr	r2, [pc, #200]	; (8005b84 <SystemCoreClockUpdate+0x138>)
 8005abc:	601a      	str	r2, [r3, #0]
      break;
 8005abe:	e045      	b.n	8005b4c <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8005ac0:	4b2f      	ldr	r3, [pc, #188]	; (8005b80 <SystemCoreClockUpdate+0x134>)
 8005ac2:	4a31      	ldr	r2, [pc, #196]	; (8005b88 <SystemCoreClockUpdate+0x13c>)
 8005ac4:	601a      	str	r2, [r3, #0]
      break;
 8005ac6:	e041      	b.n	8005b4c <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005ac8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	f003 0303 	and.w	r3, r3, #3
 8005ad2:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8005ad4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	091b      	lsrs	r3, r3, #4
 8005adc:	f003 0307 	and.w	r3, r3, #7
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2b02      	cmp	r3, #2
 8005ae8:	d105      	bne.n	8005af6 <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 8005aea:	4a26      	ldr	r2, [pc, #152]	; (8005b84 <SystemCoreClockUpdate+0x138>)
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8005af2:	617b      	str	r3, [r7, #20]
 8005af4:	e00d      	b.n	8005b12 <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2b03      	cmp	r3, #3
 8005afa:	d105      	bne.n	8005b08 <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 8005afc:	4a22      	ldr	r2, [pc, #136]	; (8005b88 <SystemCoreClockUpdate+0x13c>)
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b04:	617b      	str	r3, [r7, #20]
 8005b06:	e004      	b.n	8005b12 <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 8005b08:	693a      	ldr	r2, [r7, #16]
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b10:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	0a1b      	lsrs	r3, r3, #8
 8005b1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	fb02 f303 	mul.w	r3, r2, r3
 8005b24:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8005b26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	0f5b      	lsrs	r3, r3, #29
 8005b2e:	f003 0307 	and.w	r3, r3, #7
 8005b32:	3301      	adds	r3, #1
 8005b34:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 8005b36:	697a      	ldr	r2, [r7, #20]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b3e:	4a10      	ldr	r2, [pc, #64]	; (8005b80 <SystemCoreClockUpdate+0x134>)
 8005b40:	6013      	str	r3, [r2, #0]
      break;
 8005b42:	e003      	b.n	8005b4c <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 8005b44:	4a0e      	ldr	r2, [pc, #56]	; (8005b80 <SystemCoreClockUpdate+0x134>)
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	6013      	str	r3, [r2, #0]
      break;
 8005b4a:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005b4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	091b      	lsrs	r3, r3, #4
 8005b54:	f003 030f 	and.w	r3, r3, #15
 8005b58:	4a0c      	ldr	r2, [pc, #48]	; (8005b8c <SystemCoreClockUpdate+0x140>)
 8005b5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b5e:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8005b60:	4b07      	ldr	r3, [pc, #28]	; (8005b80 <SystemCoreClockUpdate+0x134>)
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b6a:	4a05      	ldr	r2, [pc, #20]	; (8005b80 <SystemCoreClockUpdate+0x134>)
 8005b6c:	6013      	str	r3, [r2, #0]

}
 8005b6e:	bf00      	nop
 8005b70:	371c      	adds	r7, #28
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr
 8005b7a:	bf00      	nop
 8005b7c:	08017944 	.word	0x08017944
 8005b80:	20000078 	.word	0x20000078
 8005b84:	00f42400 	.word	0x00f42400
 8005b88:	01e84800 	.word	0x01e84800
 8005b8c:	080178e4 	.word	0x080178e4

08005b90 <LL_AHB2_GRP1_EnableClock>:
{
 8005b90:	b480      	push	{r7}
 8005b92:	b085      	sub	sp, #20
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005b98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005ba8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
}
 8005bb6:	bf00      	nop
 8005bb8:	3714      	adds	r7, #20
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr

08005bc2 <LL_APB1_GRP1_EnableClock>:
{
 8005bc2:	b480      	push	{r7}
 8005bc4:	b085      	sub	sp, #20
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8005bca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bce:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005bd0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8005bda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bde:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4013      	ands	r3, r2
 8005be4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005be6:	68fb      	ldr	r3, [r7, #12]
}
 8005be8:	bf00      	nop
 8005bea:	3714      	adds	r7, #20
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr

08005bf4 <LL_APB2_GRP1_EnableClock>:
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b085      	sub	sp, #20
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8005bfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c00:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005c02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005c0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c10:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4013      	ands	r3, r2
 8005c16:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005c18:	68fb      	ldr	r3, [r7, #12]
}
 8005c1a:	bf00      	nop
 8005c1c:	3714      	adds	r7, #20
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr
	...

08005c28 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim16;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b08e      	sub	sp, #56	; 0x38
 8005c2c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005c2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c32:	2200      	movs	r2, #0
 8005c34:	601a      	str	r2, [r3, #0]
 8005c36:	605a      	str	r2, [r3, #4]
 8005c38:	609a      	str	r2, [r3, #8]
 8005c3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005c3c:	f107 031c 	add.w	r3, r7, #28
 8005c40:	2200      	movs	r2, #0
 8005c42:	601a      	str	r2, [r3, #0]
 8005c44:	605a      	str	r2, [r3, #4]
 8005c46:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005c48:	463b      	mov	r3, r7
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	601a      	str	r2, [r3, #0]
 8005c4e:	605a      	str	r2, [r3, #4]
 8005c50:	609a      	str	r2, [r3, #8]
 8005c52:	60da      	str	r2, [r3, #12]
 8005c54:	611a      	str	r2, [r3, #16]
 8005c56:	615a      	str	r2, [r3, #20]
 8005c58:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8005c5a:	4b2d      	ldr	r3, [pc, #180]	; (8005d10 <MX_TIM2_Init+0xe8>)
 8005c5c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005c60:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 639;
 8005c62:	4b2b      	ldr	r3, [pc, #172]	; (8005d10 <MX_TIM2_Init+0xe8>)
 8005c64:	f240 227f 	movw	r2, #639	; 0x27f
 8005c68:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c6a:	4b29      	ldr	r3, [pc, #164]	; (8005d10 <MX_TIM2_Init+0xe8>)
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8005c70:	4b27      	ldr	r3, [pc, #156]	; (8005d10 <MX_TIM2_Init+0xe8>)
 8005c72:	2209      	movs	r2, #9
 8005c74:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c76:	4b26      	ldr	r3, [pc, #152]	; (8005d10 <MX_TIM2_Init+0xe8>)
 8005c78:	2200      	movs	r2, #0
 8005c7a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005c7c:	4b24      	ldr	r3, [pc, #144]	; (8005d10 <MX_TIM2_Init+0xe8>)
 8005c7e:	2200      	movs	r2, #0
 8005c80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005c82:	4823      	ldr	r0, [pc, #140]	; (8005d10 <MX_TIM2_Init+0xe8>)
 8005c84:	f007 f8d8 	bl	800ce38 <HAL_TIM_Base_Init>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d001      	beq.n	8005c92 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8005c8e:	f7fe fb63 	bl	8004358 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005c92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c96:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005c98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	481c      	ldr	r0, [pc, #112]	; (8005d10 <MX_TIM2_Init+0xe8>)
 8005ca0:	f007 fc8e 	bl	800d5c0 <HAL_TIM_ConfigClockSource>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d001      	beq.n	8005cae <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8005caa:	f7fe fb55 	bl	8004358 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8005cae:	4818      	ldr	r0, [pc, #96]	; (8005d10 <MX_TIM2_Init+0xe8>)
 8005cb0:	f007 f96e 	bl	800cf90 <HAL_TIM_PWM_Init>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d001      	beq.n	8005cbe <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8005cba:	f7fe fb4d 	bl	8004358 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005cbe:	2320      	movs	r3, #32
 8005cc0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005cc6:	f107 031c 	add.w	r3, r7, #28
 8005cca:	4619      	mov	r1, r3
 8005ccc:	4810      	ldr	r0, [pc, #64]	; (8005d10 <MX_TIM2_Init+0xe8>)
 8005cce:	f008 f8fd 	bl	800decc <HAL_TIMEx_MasterConfigSynchronization>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d001      	beq.n	8005cdc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8005cd8:	f7fe fb3e 	bl	8004358 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005cdc:	2360      	movs	r3, #96	; 0x60
 8005cde:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 9;
 8005ce0:	2309      	movs	r3, #9
 8005ce2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005cec:	463b      	mov	r3, r7
 8005cee:	2204      	movs	r2, #4
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	4807      	ldr	r0, [pc, #28]	; (8005d10 <MX_TIM2_Init+0xe8>)
 8005cf4:	f007 fb4c 	bl	800d390 <HAL_TIM_PWM_ConfigChannel>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d001      	beq.n	8005d02 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8005cfe:	f7fe fb2b 	bl	8004358 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8005d02:	4803      	ldr	r0, [pc, #12]	; (8005d10 <MX_TIM2_Init+0xe8>)
 8005d04:	f000 f850 	bl	8005da8 <HAL_TIM_MspPostInit>

}
 8005d08:	bf00      	nop
 8005d0a:	3738      	adds	r7, #56	; 0x38
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	200284ac 	.word	0x200284ac

08005d14 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8005d18:	4b0f      	ldr	r3, [pc, #60]	; (8005d58 <MX_TIM16_Init+0x44>)
 8005d1a:	4a10      	ldr	r2, [pc, #64]	; (8005d5c <MX_TIM16_Init+0x48>)
 8005d1c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 31;
 8005d1e:	4b0e      	ldr	r3, [pc, #56]	; (8005d58 <MX_TIM16_Init+0x44>)
 8005d20:	221f      	movs	r2, #31
 8005d22:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d24:	4b0c      	ldr	r3, [pc, #48]	; (8005d58 <MX_TIM16_Init+0x44>)
 8005d26:	2200      	movs	r2, #0
 8005d28:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8005d2a:	4b0b      	ldr	r3, [pc, #44]	; (8005d58 <MX_TIM16_Init+0x44>)
 8005d2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d30:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005d32:	4b09      	ldr	r3, [pc, #36]	; (8005d58 <MX_TIM16_Init+0x44>)
 8005d34:	2200      	movs	r2, #0
 8005d36:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8005d38:	4b07      	ldr	r3, [pc, #28]	; (8005d58 <MX_TIM16_Init+0x44>)
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005d3e:	4b06      	ldr	r3, [pc, #24]	; (8005d58 <MX_TIM16_Init+0x44>)
 8005d40:	2200      	movs	r2, #0
 8005d42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8005d44:	4804      	ldr	r0, [pc, #16]	; (8005d58 <MX_TIM16_Init+0x44>)
 8005d46:	f007 f877 	bl	800ce38 <HAL_TIM_Base_Init>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d001      	beq.n	8005d54 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8005d50:	f7fe fb02 	bl	8004358 <Error_Handler>
  }

}
 8005d54:	bf00      	nop
 8005d56:	bd80      	pop	{r7, pc}
 8005d58:	200284ec 	.word	0x200284ec
 8005d5c:	40014400 	.word	0x40014400

08005d60 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b082      	sub	sp, #8
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d70:	d103      	bne.n	8005d7a <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005d72:	2001      	movs	r0, #1
 8005d74:	f7ff ff25 	bl	8005bc2 <LL_APB1_GRP1_EnableClock>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8005d78:	e010      	b.n	8005d9c <HAL_TIM_Base_MspInit+0x3c>
  else if(tim_baseHandle->Instance==TIM16)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a09      	ldr	r2, [pc, #36]	; (8005da4 <HAL_TIM_Base_MspInit+0x44>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d10b      	bne.n	8005d9c <HAL_TIM_Base_MspInit+0x3c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8005d84:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8005d88:	f7ff ff34 	bl	8005bf4 <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	2100      	movs	r1, #0
 8005d90:	2019      	movs	r0, #25
 8005d92:	f002 fa3c 	bl	800820e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005d96:	2019      	movs	r0, #25
 8005d98:	f002 fa53 	bl	8008242 <HAL_NVIC_EnableIRQ>
}
 8005d9c:	bf00      	nop
 8005d9e:	3708      	adds	r7, #8
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	40014400 	.word	0x40014400

08005da8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b088      	sub	sp, #32
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005db0:	f107 030c 	add.w	r3, r7, #12
 8005db4:	2200      	movs	r2, #0
 8005db6:	601a      	str	r2, [r3, #0]
 8005db8:	605a      	str	r2, [r3, #4]
 8005dba:	609a      	str	r2, [r3, #8]
 8005dbc:	60da      	str	r2, [r3, #12]
 8005dbe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dc8:	d112      	bne.n	8005df0 <HAL_TIM_MspPostInit+0x48>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005dca:	2002      	movs	r0, #2
 8005dcc:	f7ff fee0 	bl	8005b90 <LL_AHB2_GRP1_EnableClock>
    /**TIM2 GPIO Configuration    
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005dd0:	2308      	movs	r3, #8
 8005dd2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005dd4:	2302      	movs	r3, #2
 8005dd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005de0:	2301      	movs	r3, #1
 8005de2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005de4:	f107 030c 	add.w	r3, r7, #12
 8005de8:	4619      	mov	r1, r3
 8005dea:	4803      	ldr	r0, [pc, #12]	; (8005df8 <HAL_TIM_MspPostInit+0x50>)
 8005dec:	f002 fd96 	bl	800891c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8005df0:	bf00      	nop
 8005df2:	3720      	adds	r7, #32
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}
 8005df8:	48000400 	.word	0x48000400

08005dfc <HAL_COMP_TriggerCallback>:
uint16_t calibration_1 = 0;
union ColorComplex lightMessageComplexTouch = {0};
uint32_t lightsSimpleMessageReceivedTouch;
uint32_t prev_msg = 0;

void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp) {
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
	timestamp = __HAL_TIM_GET_COUNTER(&htim16);
 8005e04:	4b1a      	ldr	r3, [pc, #104]	; (8005e70 <HAL_COMP_TriggerCallback+0x74>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0a:	b29a      	uxth	r2, r3
 8005e0c:	4b19      	ldr	r3, [pc, #100]	; (8005e74 <HAL_COMP_TriggerCallback+0x78>)
 8005e0e:	801a      	strh	r2, [r3, #0]

//	GPIO_PinState pin_state = HAL_GPIO_ReadPin(LH_SIG_GPIO_Port, LH_SIG_Pin);
	uint32_t pin_state = HAL_COMP_GetOutputLevel(hcomp);
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f002 f8c1 	bl	8007f98 <HAL_COMP_GetOutputLevel>
 8005e16:	60f8      	str	r0, [r7, #12]
	if (pin_state == COMP_OUTPUT_LEVEL_HIGH) {
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d109      	bne.n	8005e32 <HAL_COMP_TriggerCallback+0x36>
		//Rising edge
		input0.rise_time_ = timestamp;
 8005e1e:	4b15      	ldr	r3, [pc, #84]	; (8005e74 <HAL_COMP_TriggerCallback+0x78>)
 8005e20:	881a      	ldrh	r2, [r3, #0]
 8005e22:	4b15      	ldr	r3, [pc, #84]	; (8005e78 <HAL_COMP_TriggerCallback+0x7c>)
 8005e24:	f8a3 240a 	strh.w	r2, [r3, #1034]	; 0x40a
		input0.rise_valid_ = 1;
 8005e28:	4b13      	ldr	r3, [pc, #76]	; (8005e78 <HAL_COMP_TriggerCallback+0x7c>)
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
		//Falling edge
		enqueue_pulse(&input0, input0.rise_time_, timestamp - input0.rise_time_);
		input0.rise_valid_ = 0;
//		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
	}
}
 8005e30:	e019      	b.n	8005e66 <HAL_COMP_TriggerCallback+0x6a>
	} else if (input0.rise_valid_ && pin_state == COMP_OUTPUT_LEVEL_LOW) {
 8005e32:	4b11      	ldr	r3, [pc, #68]	; (8005e78 <HAL_COMP_TriggerCallback+0x7c>)
 8005e34:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d014      	beq.n	8005e66 <HAL_COMP_TriggerCallback+0x6a>
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d111      	bne.n	8005e66 <HAL_COMP_TriggerCallback+0x6a>
		enqueue_pulse(&input0, input0.rise_time_, timestamp - input0.rise_time_);
 8005e42:	4b0d      	ldr	r3, [pc, #52]	; (8005e78 <HAL_COMP_TriggerCallback+0x7c>)
 8005e44:	f8b3 140a 	ldrh.w	r1, [r3, #1034]	; 0x40a
 8005e48:	4b0a      	ldr	r3, [pc, #40]	; (8005e74 <HAL_COMP_TriggerCallback+0x78>)
 8005e4a:	881a      	ldrh	r2, [r3, #0]
 8005e4c:	4b0a      	ldr	r3, [pc, #40]	; (8005e78 <HAL_COMP_TriggerCallback+0x7c>)
 8005e4e:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	461a      	mov	r2, r3
 8005e58:	4807      	ldr	r0, [pc, #28]	; (8005e78 <HAL_COMP_TriggerCallback+0x7c>)
 8005e5a:	f7fd ff15 	bl	8003c88 <enqueue_pulse>
		input0.rise_valid_ = 0;
 8005e5e:	4b06      	ldr	r3, [pc, #24]	; (8005e78 <HAL_COMP_TriggerCallback+0x7c>)
 8005e60:	2200      	movs	r2, #0
 8005e62:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
}
 8005e66:	bf00      	nop
 8005e68:	3710      	adds	r7, #16
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	200284ec 	.word	0x200284ec
 8005e74:	20000b02 	.word	0x20000b02
 8005e78:	200278d0 	.word	0x200278d0
 8005e7c:	00000000 	.word	0x00000000

08005e80 <HAL_TSC_ConvCpltCallback>:


uint32_t temp = 0x01;
// TODO: make threshold update if "touch" is active for too long
void HAL_TSC_ConvCpltCallback(TSC_HandleTypeDef *htsc) {
 8005e80:	b5b0      	push	{r4, r5, r7, lr}
 8005e82:	b086      	sub	sp, #24
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
	/*##-5- Discharge the touch-sensing IOs ####################################*/
	HAL_TSC_IODischarge(htsc, ENABLE);
 8005e88:	2101      	movs	r1, #1
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f7ff fc78 	bl	8005780 <HAL_TSC_IODischarge>
	/* Note: a delay can be added here */

	uint32_t uhTSCAcquisitionValue;
	TSC_GroupStatusTypeDef status = HAL_TSC_GroupGetStatus(htsc, TSC_GROUP2_IDX);
 8005e90:	2101      	movs	r1, #1
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f7ff fbfd 	bl	8005692 <HAL_TSC_GroupGetStatus>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	75bb      	strb	r3, [r7, #22]
	uint32_t cur_time;
	/*##-6- Check if the acquisition is correct (no max count) #################*/
	if (status == TSC_GROUP_COMPLETED) {
 8005e9c:	7dbb      	ldrb	r3, [r7, #22]
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	f040 8115 	bne.w	80060ce <HAL_TSC_ConvCpltCallback+0x24e>
		/*##-7- Read the acquisition value #######################################*/
		uhTSCAcquisitionValue = HAL_TSC_GroupGetValue(htsc, TSC_GROUP2_IDX);
 8005ea4:	2101      	movs	r1, #1
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f7ff fc15 	bl	80056d6 <HAL_TSC_GroupGetValue>
 8005eac:	6138      	str	r0, [r7, #16]
		uint8_t touch;
		if (cap_sensor == 0) {
 8005eae:	4ba0      	ldr	r3, [pc, #640]	; (8006130 <HAL_TSC_ConvCpltCallback+0x2b0>)
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d17d      	bne.n	8005fb2 <HAL_TSC_ConvCpltCallback+0x132>
			if(calibration_0 <= CALIBRATION_SAMPLES){
 8005eb6:	4b9f      	ldr	r3, [pc, #636]	; (8006134 <HAL_TSC_ConvCpltCallback+0x2b4>)
 8005eb8:	881b      	ldrh	r3, [r3, #0]
 8005eba:	2b64      	cmp	r3, #100	; 0x64
 8005ebc:	d83a      	bhi.n	8005f34 <HAL_TSC_ConvCpltCallback+0xb4>
				touch = 0;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	75fb      	strb	r3, [r7, #23]
				if(calibration_0 == 0){
 8005ec2:	4b9c      	ldr	r3, [pc, #624]	; (8006134 <HAL_TSC_ConvCpltCallback+0x2b4>)
 8005ec4:	881b      	ldrh	r3, [r3, #0]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d108      	bne.n	8005edc <HAL_TSC_ConvCpltCallback+0x5c>
					ts1_threshold = uhTSCAcquisitionValue;
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	ee07 3a90 	vmov	s15, r3
 8005ed0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ed4:	4b98      	ldr	r3, [pc, #608]	; (8006138 <HAL_TSC_ConvCpltCallback+0x2b8>)
 8005ed6:	edc3 7a00 	vstr	s15, [r3]
 8005eda:	e024      	b.n	8005f26 <HAL_TSC_ConvCpltCallback+0xa6>
				}else{
					ts1_threshold = uhTSCAcquisitionValue * ALPHA_WEIGHT + ts1_threshold * (1-ALPHA_WEIGHT);
 8005edc:	6938      	ldr	r0, [r7, #16]
 8005ede:	f7fa fa9b 	bl	8000418 <__aeabi_ui2d>
 8005ee2:	a38f      	add	r3, pc, #572	; (adr r3, 8006120 <HAL_TSC_ConvCpltCallback+0x2a0>)
 8005ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee8:	f7fa fb10 	bl	800050c <__aeabi_dmul>
 8005eec:	4603      	mov	r3, r0
 8005eee:	460c      	mov	r4, r1
 8005ef0:	4625      	mov	r5, r4
 8005ef2:	461c      	mov	r4, r3
 8005ef4:	4b90      	ldr	r3, [pc, #576]	; (8006138 <HAL_TSC_ConvCpltCallback+0x2b8>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f7fa faaf 	bl	800045c <__aeabi_f2d>
 8005efe:	a38a      	add	r3, pc, #552	; (adr r3, 8006128 <HAL_TSC_ConvCpltCallback+0x2a8>)
 8005f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f04:	f7fa fb02 	bl	800050c <__aeabi_dmul>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	460b      	mov	r3, r1
 8005f0c:	4620      	mov	r0, r4
 8005f0e:	4629      	mov	r1, r5
 8005f10:	f7fa f946 	bl	80001a0 <__adddf3>
 8005f14:	4603      	mov	r3, r0
 8005f16:	460c      	mov	r4, r1
 8005f18:	4618      	mov	r0, r3
 8005f1a:	4621      	mov	r1, r4
 8005f1c:	f7fa fda6 	bl	8000a6c <__aeabi_d2f>
 8005f20:	4602      	mov	r2, r0
 8005f22:	4b85      	ldr	r3, [pc, #532]	; (8006138 <HAL_TSC_ConvCpltCallback+0x2b8>)
 8005f24:	601a      	str	r2, [r3, #0]
				}
				calibration_0 += 1;
 8005f26:	4b83      	ldr	r3, [pc, #524]	; (8006134 <HAL_TSC_ConvCpltCallback+0x2b4>)
 8005f28:	881b      	ldrh	r3, [r3, #0]
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	b29a      	uxth	r2, r3
 8005f2e:	4b81      	ldr	r3, [pc, #516]	; (8006134 <HAL_TSC_ConvCpltCallback+0x2b4>)
 8005f30:	801a      	strh	r2, [r3, #0]
 8005f32:	e0ba      	b.n	80060aa <HAL_TSC_ConvCpltCallback+0x22a>
			}
			else{
				touch = (uhTSCAcquisitionValue <= (ts1_threshold - THRESHOLD_TOLERANCE));
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	ee07 3a90 	vmov	s15, r3
 8005f3a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005f3e:	4b7e      	ldr	r3, [pc, #504]	; (8006138 <HAL_TSC_ConvCpltCallback+0x2b8>)
 8005f40:	edd3 7a00 	vldr	s15, [r3]
 8005f44:	eddf 6a7d 	vldr	s13, [pc, #500]	; 800613c <HAL_TSC_ConvCpltCallback+0x2bc>
 8005f48:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005f4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f54:	bf94      	ite	ls
 8005f56:	2301      	movls	r3, #1
 8005f58:	2300      	movhi	r3, #0
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	75fb      	strb	r3, [r7, #23]

				// if not touched, update threshold
				if(touch == 0){
 8005f5e:	7dfb      	ldrb	r3, [r7, #23]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	f040 80a2 	bne.w	80060aa <HAL_TSC_ConvCpltCallback+0x22a>
					ts1_threshold = uhTSCAcquisitionValue * ALPHA_WEIGHT + ts1_threshold * (1-ALPHA_WEIGHT);
 8005f66:	6938      	ldr	r0, [r7, #16]
 8005f68:	f7fa fa56 	bl	8000418 <__aeabi_ui2d>
 8005f6c:	a36c      	add	r3, pc, #432	; (adr r3, 8006120 <HAL_TSC_ConvCpltCallback+0x2a0>)
 8005f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f72:	f7fa facb 	bl	800050c <__aeabi_dmul>
 8005f76:	4603      	mov	r3, r0
 8005f78:	460c      	mov	r4, r1
 8005f7a:	4625      	mov	r5, r4
 8005f7c:	461c      	mov	r4, r3
 8005f7e:	4b6e      	ldr	r3, [pc, #440]	; (8006138 <HAL_TSC_ConvCpltCallback+0x2b8>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4618      	mov	r0, r3
 8005f84:	f7fa fa6a 	bl	800045c <__aeabi_f2d>
 8005f88:	a367      	add	r3, pc, #412	; (adr r3, 8006128 <HAL_TSC_ConvCpltCallback+0x2a8>)
 8005f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f8e:	f7fa fabd 	bl	800050c <__aeabi_dmul>
 8005f92:	4602      	mov	r2, r0
 8005f94:	460b      	mov	r3, r1
 8005f96:	4620      	mov	r0, r4
 8005f98:	4629      	mov	r1, r5
 8005f9a:	f7fa f901 	bl	80001a0 <__adddf3>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	460c      	mov	r4, r1
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	4621      	mov	r1, r4
 8005fa6:	f7fa fd61 	bl	8000a6c <__aeabi_d2f>
 8005faa:	4602      	mov	r2, r0
 8005fac:	4b62      	ldr	r3, [pc, #392]	; (8006138 <HAL_TSC_ConvCpltCallback+0x2b8>)
 8005fae:	601a      	str	r2, [r3, #0]
 8005fb0:	e07b      	b.n	80060aa <HAL_TSC_ConvCpltCallback+0x22a>
				}
			}
		} else {
			if(calibration_1 <= CALIBRATION_SAMPLES){
 8005fb2:	4b63      	ldr	r3, [pc, #396]	; (8006140 <HAL_TSC_ConvCpltCallback+0x2c0>)
 8005fb4:	881b      	ldrh	r3, [r3, #0]
 8005fb6:	2b64      	cmp	r3, #100	; 0x64
 8005fb8:	d83a      	bhi.n	8006030 <HAL_TSC_ConvCpltCallback+0x1b0>
				touch = 0;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	75fb      	strb	r3, [r7, #23]
				if(calibration_1 == 0){
 8005fbe:	4b60      	ldr	r3, [pc, #384]	; (8006140 <HAL_TSC_ConvCpltCallback+0x2c0>)
 8005fc0:	881b      	ldrh	r3, [r3, #0]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d108      	bne.n	8005fd8 <HAL_TSC_ConvCpltCallback+0x158>
					ts2_threshold = uhTSCAcquisitionValue;
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	ee07 3a90 	vmov	s15, r3
 8005fcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fd0:	4b5c      	ldr	r3, [pc, #368]	; (8006144 <HAL_TSC_ConvCpltCallback+0x2c4>)
 8005fd2:	edc3 7a00 	vstr	s15, [r3]
 8005fd6:	e024      	b.n	8006022 <HAL_TSC_ConvCpltCallback+0x1a2>
				}else{
					ts2_threshold = uhTSCAcquisitionValue * ALPHA_WEIGHT + ts2_threshold * (1-ALPHA_WEIGHT);
 8005fd8:	6938      	ldr	r0, [r7, #16]
 8005fda:	f7fa fa1d 	bl	8000418 <__aeabi_ui2d>
 8005fde:	a350      	add	r3, pc, #320	; (adr r3, 8006120 <HAL_TSC_ConvCpltCallback+0x2a0>)
 8005fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe4:	f7fa fa92 	bl	800050c <__aeabi_dmul>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	460c      	mov	r4, r1
 8005fec:	4625      	mov	r5, r4
 8005fee:	461c      	mov	r4, r3
 8005ff0:	4b54      	ldr	r3, [pc, #336]	; (8006144 <HAL_TSC_ConvCpltCallback+0x2c4>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f7fa fa31 	bl	800045c <__aeabi_f2d>
 8005ffa:	a34b      	add	r3, pc, #300	; (adr r3, 8006128 <HAL_TSC_ConvCpltCallback+0x2a8>)
 8005ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006000:	f7fa fa84 	bl	800050c <__aeabi_dmul>
 8006004:	4602      	mov	r2, r0
 8006006:	460b      	mov	r3, r1
 8006008:	4620      	mov	r0, r4
 800600a:	4629      	mov	r1, r5
 800600c:	f7fa f8c8 	bl	80001a0 <__adddf3>
 8006010:	4603      	mov	r3, r0
 8006012:	460c      	mov	r4, r1
 8006014:	4618      	mov	r0, r3
 8006016:	4621      	mov	r1, r4
 8006018:	f7fa fd28 	bl	8000a6c <__aeabi_d2f>
 800601c:	4602      	mov	r2, r0
 800601e:	4b49      	ldr	r3, [pc, #292]	; (8006144 <HAL_TSC_ConvCpltCallback+0x2c4>)
 8006020:	601a      	str	r2, [r3, #0]
				}
				calibration_1 += 1;
 8006022:	4b47      	ldr	r3, [pc, #284]	; (8006140 <HAL_TSC_ConvCpltCallback+0x2c0>)
 8006024:	881b      	ldrh	r3, [r3, #0]
 8006026:	3301      	adds	r3, #1
 8006028:	b29a      	uxth	r2, r3
 800602a:	4b45      	ldr	r3, [pc, #276]	; (8006140 <HAL_TSC_ConvCpltCallback+0x2c0>)
 800602c:	801a      	strh	r2, [r3, #0]
 800602e:	e03c      	b.n	80060aa <HAL_TSC_ConvCpltCallback+0x22a>

			}
			else{
				touch = (uhTSCAcquisitionValue <= (ts2_threshold - THRESHOLD_TOLERANCE));
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	ee07 3a90 	vmov	s15, r3
 8006036:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800603a:	4b42      	ldr	r3, [pc, #264]	; (8006144 <HAL_TSC_ConvCpltCallback+0x2c4>)
 800603c:	edd3 7a00 	vldr	s15, [r3]
 8006040:	eddf 6a3e 	vldr	s13, [pc, #248]	; 800613c <HAL_TSC_ConvCpltCallback+0x2bc>
 8006044:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006048:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800604c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006050:	bf94      	ite	ls
 8006052:	2301      	movls	r3, #1
 8006054:	2300      	movhi	r3, #0
 8006056:	b2db      	uxtb	r3, r3
 8006058:	75fb      	strb	r3, [r7, #23]

				// if not touched, update threshold
				if(touch == 0){
 800605a:	7dfb      	ldrb	r3, [r7, #23]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d124      	bne.n	80060aa <HAL_TSC_ConvCpltCallback+0x22a>
					ts2_threshold = uhTSCAcquisitionValue * ALPHA_WEIGHT + ts2_threshold * (1-ALPHA_WEIGHT);
 8006060:	6938      	ldr	r0, [r7, #16]
 8006062:	f7fa f9d9 	bl	8000418 <__aeabi_ui2d>
 8006066:	a32e      	add	r3, pc, #184	; (adr r3, 8006120 <HAL_TSC_ConvCpltCallback+0x2a0>)
 8006068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800606c:	f7fa fa4e 	bl	800050c <__aeabi_dmul>
 8006070:	4603      	mov	r3, r0
 8006072:	460c      	mov	r4, r1
 8006074:	4625      	mov	r5, r4
 8006076:	461c      	mov	r4, r3
 8006078:	4b32      	ldr	r3, [pc, #200]	; (8006144 <HAL_TSC_ConvCpltCallback+0x2c4>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4618      	mov	r0, r3
 800607e:	f7fa f9ed 	bl	800045c <__aeabi_f2d>
 8006082:	a329      	add	r3, pc, #164	; (adr r3, 8006128 <HAL_TSC_ConvCpltCallback+0x2a8>)
 8006084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006088:	f7fa fa40 	bl	800050c <__aeabi_dmul>
 800608c:	4602      	mov	r2, r0
 800608e:	460b      	mov	r3, r1
 8006090:	4620      	mov	r0, r4
 8006092:	4629      	mov	r1, r5
 8006094:	f7fa f884 	bl	80001a0 <__adddf3>
 8006098:	4603      	mov	r3, r0
 800609a:	460c      	mov	r4, r1
 800609c:	4618      	mov	r0, r3
 800609e:	4621      	mov	r1, r4
 80060a0:	f7fa fce4 	bl	8000a6c <__aeabi_d2f>
 80060a4:	4602      	mov	r2, r0
 80060a6:	4b27      	ldr	r3, [pc, #156]	; (8006144 <HAL_TSC_ConvCpltCallback+0x2c4>)
 80060a8:	601a      	str	r2, [r3, #0]
				}
			}
		}

		cur_time = HAL_GetTick();
 80060aa:	f000 fb7d 	bl	80067a8 <HAL_GetTick>
 80060ae:	60f8      	str	r0, [r7, #12]
		debounce(&dbs[cap_sensor], touch, cur_time);
 80060b0:	4b1f      	ldr	r3, [pc, #124]	; (8006130 <HAL_TSC_ConvCpltCallback+0x2b0>)
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	00db      	lsls	r3, r3, #3
 80060b6:	4a24      	ldr	r2, [pc, #144]	; (8006148 <HAL_TSC_ConvCpltCallback+0x2c8>)
 80060b8:	4413      	add	r3, r2
 80060ba:	7df9      	ldrb	r1, [r7, #23]
 80060bc:	68fa      	ldr	r2, [r7, #12]
 80060be:	4618      	mov	r0, r3
 80060c0:	f000 fa28 	bl	8006514 <debounce>
		process_touches(&touch_detector, dbs, cur_time);
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	4920      	ldr	r1, [pc, #128]	; (8006148 <HAL_TSC_ConvCpltCallback+0x2c8>)
 80060c8:	4820      	ldr	r0, [pc, #128]	; (800614c <HAL_TSC_ConvCpltCallback+0x2cc>)
 80060ca:	f000 f879 	bl	80061c0 <process_touches>
	}

	//Switches between the two channels to be acquired
	if (cap_sensor == 0) {
 80060ce:	4b18      	ldr	r3, [pc, #96]	; (8006130 <HAL_TSC_ConvCpltCallback+0x2b0>)
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d106      	bne.n	80060e4 <HAL_TSC_ConvCpltCallback+0x264>
		IoConfig.ChannelIOs = TSC_GROUP2_IO4; /* TS4 touchkey */
 80060d6:	4b1e      	ldr	r3, [pc, #120]	; (8006150 <HAL_TSC_ConvCpltCallback+0x2d0>)
 80060d8:	2280      	movs	r2, #128	; 0x80
 80060da:	601a      	str	r2, [r3, #0]
		cap_sensor = 1;
 80060dc:	4b14      	ldr	r3, [pc, #80]	; (8006130 <HAL_TSC_ConvCpltCallback+0x2b0>)
 80060de:	2201      	movs	r2, #1
 80060e0:	701a      	strb	r2, [r3, #0]
 80060e2:	e005      	b.n	80060f0 <HAL_TSC_ConvCpltCallback+0x270>
	} else {
		IoConfig.ChannelIOs = TSC_GROUP2_IO3; /* TS3 touchkey */
 80060e4:	4b1a      	ldr	r3, [pc, #104]	; (8006150 <HAL_TSC_ConvCpltCallback+0x2d0>)
 80060e6:	2240      	movs	r2, #64	; 0x40
 80060e8:	601a      	str	r2, [r3, #0]
		cap_sensor = 0;
 80060ea:	4b11      	ldr	r3, [pc, #68]	; (8006130 <HAL_TSC_ConvCpltCallback+0x2b0>)
 80060ec:	2200      	movs	r2, #0
 80060ee:	701a      	strb	r2, [r3, #0]
	}

	if (HAL_TSC_IOConfig(htsc, &IoConfig) != HAL_OK) {
 80060f0:	4917      	ldr	r1, [pc, #92]	; (8006150 <HAL_TSC_ConvCpltCallback+0x2d0>)
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f7ff fb01 	bl	80056fa <HAL_TSC_IOConfig>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d001      	beq.n	8006102 <HAL_TSC_ConvCpltCallback+0x282>
		/* Initialization Error */
		Error_Handler();
 80060fe:	f7fe f92b 	bl	8004358 <Error_Handler>
	}

	/*##-9- Re-start the acquisition process ###################################*/
	if (HAL_TSC_Start_IT(htsc) != HAL_OK) {
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f7ff fa68 	bl	80055d8 <HAL_TSC_Start_IT>
 8006108:	4603      	mov	r3, r0
 800610a:	2b00      	cmp	r3, #0
 800610c:	d001      	beq.n	8006112 <HAL_TSC_ConvCpltCallback+0x292>
		/* Acquisition Error */
		Error_Handler();
 800610e:	f7fe f923 	bl	8004358 <Error_Handler>
	}

}
 8006112:	bf00      	nop
 8006114:	3718      	adds	r7, #24
 8006116:	46bd      	mov	sp, r7
 8006118:	bdb0      	pop	{r4, r5, r7, pc}
 800611a:	bf00      	nop
 800611c:	f3af 8000 	nop.w
 8006120:	47ae147b 	.word	0x47ae147b
 8006124:	3f847ae1 	.word	0x3f847ae1
 8006128:	7ae147ae 	.word	0x7ae147ae
 800612c:	3fefae14 	.word	0x3fefae14
 8006130:	20000b04 	.word	0x20000b04
 8006134:	20000b18 	.word	0x20000b18
 8006138:	20028538 	.word	0x20028538
 800613c:	42700000 	.word	0x42700000
 8006140:	20000b1a 	.word	0x20000b1a
 8006144:	2002855c 	.word	0x2002855c
 8006148:	20000b08 	.word	0x20000b08
 800614c:	20028540 	.word	0x20028540
 8006150:	2002852c 	.word	0x2002852c

08006154 <touchSensingStart>:


void touchSensingStart(void) {
 8006154:	b580      	push	{r7, lr}
 8006156:	af00      	add	r7, sp, #0
	ts1_threshold = 0;
 8006158:	4b15      	ldr	r3, [pc, #84]	; (80061b0 <touchSensingStart+0x5c>)
 800615a:	f04f 0200 	mov.w	r2, #0
 800615e:	601a      	str	r2, [r3, #0]
	ts2_threshold = 0;
 8006160:	4b14      	ldr	r3, [pc, #80]	; (80061b4 <touchSensingStart+0x60>)
 8006162:	f04f 0200 	mov.w	r2, #0
 8006166:	601a      	str	r2, [r3, #0]

	IoConfig.ChannelIOs = TSC_GROUP2_IO3; /* Start with the first channel */
 8006168:	4b13      	ldr	r3, [pc, #76]	; (80061b8 <touchSensingStart+0x64>)
 800616a:	2240      	movs	r2, #64	; 0x40
 800616c:	601a      	str	r2, [r3, #0]
	IoConfig.SamplingIOs = TSC_GROUP2_IO1;
 800616e:	4b12      	ldr	r3, [pc, #72]	; (80061b8 <touchSensingStart+0x64>)
 8006170:	2210      	movs	r2, #16
 8006172:	609a      	str	r2, [r3, #8]
	IoConfig.ShieldIOs = 0;
 8006174:	4b10      	ldr	r3, [pc, #64]	; (80061b8 <touchSensingStart+0x64>)
 8006176:	2200      	movs	r2, #0
 8006178:	605a      	str	r2, [r3, #4]

	if (HAL_TSC_IOConfig(&htsc, &IoConfig) != HAL_OK) {
 800617a:	490f      	ldr	r1, [pc, #60]	; (80061b8 <touchSensingStart+0x64>)
 800617c:	480f      	ldr	r0, [pc, #60]	; (80061bc <touchSensingStart+0x68>)
 800617e:	f7ff fabc 	bl	80056fa <HAL_TSC_IOConfig>
 8006182:	4603      	mov	r3, r0
 8006184:	2b00      	cmp	r3, #0
 8006186:	d001      	beq.n	800618c <touchSensingStart+0x38>
		/* Initialization Error */
		Error_Handler();
 8006188:	f7fe f8e6 	bl	8004358 <Error_Handler>
	}

	HAL_TSC_IODischarge(&htsc, ENABLE);
 800618c:	2101      	movs	r1, #1
 800618e:	480b      	ldr	r0, [pc, #44]	; (80061bc <touchSensingStart+0x68>)
 8006190:	f7ff faf6 	bl	8005780 <HAL_TSC_IODischarge>
	HAL_Delay(5); /* 1 ms is more than enough to discharge all capacitors */
 8006194:	2005      	movs	r0, #5
 8006196:	f000 fb1f 	bl	80067d8 <HAL_Delay>
	if (HAL_TSC_Start_IT(&htsc) != HAL_OK) {
 800619a:	4808      	ldr	r0, [pc, #32]	; (80061bc <touchSensingStart+0x68>)
 800619c:	f7ff fa1c 	bl	80055d8 <HAL_TSC_Start_IT>
 80061a0:	4603      	mov	r3, r0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d001      	beq.n	80061aa <touchSensingStart+0x56>
		/* Acquisition Error */
		Error_Handler();
 80061a6:	f7fe f8d7 	bl	8004358 <Error_Handler>
	}
}
 80061aa:	bf00      	nop
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	20028538 	.word	0x20028538
 80061b4:	2002855c 	.word	0x2002855c
 80061b8:	2002852c 	.word	0x2002852c
 80061bc:	20028560 	.word	0x20028560

080061c0 <process_touches>:
}

uint8_t temp_flag = 1;
enum TouchType action = None;

void process_touches(TouchDetector *self, Debouncer *dbs, uint32_t cur_time) {
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b08c      	sub	sp, #48	; 0x30
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	607a      	str	r2, [r7, #4]

//	action = None;

	if (self->touch_state == Idle) {
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	7e1b      	ldrb	r3, [r3, #24]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d123      	bne.n	800621c <process_touches+0x5c>
		if (dbs[0].clean_out) {
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	795b      	ldrb	r3, [r3, #5]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d00c      	beq.n	80061f6 <process_touches+0x36>
			// front button is held

			self->touch_state = OnePressed;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2201      	movs	r2, #1
 80061e0:	761a      	strb	r2, [r3, #24]
			self->touches[0].cap_idx = 0;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2200      	movs	r2, #0
 80061e6:	701a      	strb	r2, [r3, #0]
			self->touches[0].start_t = cur_time;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	605a      	str	r2, [r3, #4]
			action = FrontHold;
 80061ee:	4b99      	ldr	r3, [pc, #612]	; (8006454 <process_touches+0x294>)
 80061f0:	2205      	movs	r2, #5
 80061f2:	701a      	strb	r2, [r3, #0]
 80061f4:	e126      	b.n	8006444 <process_touches+0x284>

		} else if (dbs[1].clean_out) {
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	3308      	adds	r3, #8
 80061fa:	795b      	ldrb	r3, [r3, #5]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	f000 8121 	beq.w	8006444 <process_touches+0x284>
			// back button is held

			self->touch_state = OnePressed;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2201      	movs	r2, #1
 8006206:	761a      	strb	r2, [r3, #24]
			self->touches[0].cap_idx = 1;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2201      	movs	r2, #1
 800620c:	701a      	strb	r2, [r3, #0]
			self->touches[0].start_t = cur_time;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	605a      	str	r2, [r3, #4]
			action = BackHold;
 8006214:	4b8f      	ldr	r3, [pc, #572]	; (8006454 <process_touches+0x294>)
 8006216:	2206      	movs	r2, #6
 8006218:	701a      	strb	r2, [r3, #0]
 800621a:	e113      	b.n	8006444 <process_touches+0x284>
		}
	} else if (self->touch_state == OnePressed) {
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	7e1b      	ldrb	r3, [r3, #24]
 8006220:	2b01      	cmp	r3, #1
 8006222:	d12d      	bne.n	8006280 <process_touches+0xc0>
		if (dbs[1 - self->touches[0].cap_idx].clean_out) {
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	f1c3 0301 	rsb	r3, r3, #1
 800622c:	00db      	lsls	r3, r3, #3
 800622e:	68ba      	ldr	r2, [r7, #8]
 8006230:	4413      	add	r3, r2
 8006232:	795b      	ldrb	r3, [r3, #5]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d010      	beq.n	800625a <process_touches+0x9a>
			self->touch_state = TwoPressed;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2202      	movs	r2, #2
 800623c:	761a      	strb	r2, [r3, #24]
			self->touches[1].cap_idx = 1 - self->touches[0].cap_idx;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	f1c3 0301 	rsb	r3, r3, #1
 8006246:	b2da      	uxtb	r2, r3
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	731a      	strb	r2, [r3, #12]
			self->touches[1].start_t = cur_time;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	611a      	str	r2, [r3, #16]
			action = BothHold;
 8006252:	4b80      	ldr	r3, [pc, #512]	; (8006454 <process_touches+0x294>)
 8006254:	2207      	movs	r2, #7
 8006256:	701a      	strb	r2, [r3, #0]
 8006258:	e0f4      	b.n	8006444 <process_touches+0x284>

		} else if (!dbs[self->touches[0].cap_idx].clean_out) {
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	00db      	lsls	r3, r3, #3
 8006260:	68ba      	ldr	r2, [r7, #8]
 8006262:	4413      	add	r3, r2
 8006264:	795b      	ldrb	r3, [r3, #5]
 8006266:	2b00      	cmp	r3, #0
 8006268:	f040 80ec 	bne.w	8006444 <process_touches+0x284>
			self->touch_state = OneReleasedNoPressed;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2203      	movs	r2, #3
 8006270:	761a      	strb	r2, [r3, #24]
			self->touches[0].end_t = cur_time;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	609a      	str	r2, [r3, #8]
			action = BothRelease;
 8006278:	4b76      	ldr	r3, [pc, #472]	; (8006454 <process_touches+0x294>)
 800627a:	2208      	movs	r2, #8
 800627c:	701a      	strb	r2, [r3, #0]
 800627e:	e0e1      	b.n	8006444 <process_touches+0x284>

		}
	} else if (self->touch_state == TwoPressed) {
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	7e1b      	ldrb	r3, [r3, #24]
 8006284:	2b02      	cmp	r3, #2
 8006286:	d11e      	bne.n	80062c6 <process_touches+0x106>
		if (!dbs[self->touches[0].cap_idx].clean_out) {
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	00db      	lsls	r3, r3, #3
 800628e:	68ba      	ldr	r2, [r7, #8]
 8006290:	4413      	add	r3, r2
 8006292:	795b      	ldrb	r3, [r3, #5]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d106      	bne.n	80062a6 <process_touches+0xe6>
			self->touch_state = FirstReleasedSecondPressed;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2204      	movs	r2, #4
 800629c:	761a      	strb	r2, [r3, #24]
			self->touches[0].end_t = cur_time;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	609a      	str	r2, [r3, #8]
 80062a4:	e0ce      	b.n	8006444 <process_touches+0x284>
		} else if (!dbs[self->touches[1].cap_idx].clean_out) {
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	7b1b      	ldrb	r3, [r3, #12]
 80062aa:	00db      	lsls	r3, r3, #3
 80062ac:	68ba      	ldr	r2, [r7, #8]
 80062ae:	4413      	add	r3, r2
 80062b0:	795b      	ldrb	r3, [r3, #5]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	f040 80c6 	bne.w	8006444 <process_touches+0x284>
			self->touch_state = SecondReleasedFirstPressed;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2205      	movs	r2, #5
 80062bc:	761a      	strb	r2, [r3, #24]
			self->touches[1].end_t = cur_time;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	615a      	str	r2, [r3, #20]
 80062c4:	e0be      	b.n	8006444 <process_touches+0x284>
		}
	} else if (self->touch_state == OneReleasedNoPressed) {
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	7e1b      	ldrb	r3, [r3, #24]
 80062ca:	2b03      	cmp	r3, #3
 80062cc:	d134      	bne.n	8006338 <process_touches+0x178>
		if (dbs[1 - self->touches[0].cap_idx].clean_out) {
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	f1c3 0301 	rsb	r3, r3, #1
 80062d6:	00db      	lsls	r3, r3, #3
 80062d8:	68ba      	ldr	r2, [r7, #8]
 80062da:	4413      	add	r3, r2
 80062dc:	795b      	ldrb	r3, [r3, #5]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d00d      	beq.n	80062fe <process_touches+0x13e>
			self->touch_state = FirstReleasedSecondPressed;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2204      	movs	r2, #4
 80062e6:	761a      	strb	r2, [r3, #24]
			self->touches[1].cap_idx = (1 - self->touches[0].cap_idx);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	f1c3 0301 	rsb	r3, r3, #1
 80062f0:	b2da      	uxtb	r2, r3
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	731a      	strb	r2, [r3, #12]
			self->touches[1].start_t = cur_time;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	611a      	str	r2, [r3, #16]
 80062fc:	e0a2      	b.n	8006444 <process_touches+0x284>
		} else if (cur_time - self->touches[0].end_t > MIN_SWIPE_GAP) {
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	1ad3      	subs	r3, r2, r3
 8006306:	2b0a      	cmp	r3, #10
 8006308:	f240 809c 	bls.w	8006444 <process_touches+0x284>
			uint32_t touch_duration = self->touches[0].end_t - self->touches[0].start_t;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	689a      	ldr	r2, [r3, #8]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	1ad3      	subs	r3, r2, r3
 8006316:	617b      	str	r3, [r7, #20]
			if (TAP_MIN_THRESHOLD < touch_duration && touch_duration < TAP_MAX_THRESHOLD) {
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	2b28      	cmp	r3, #40	; 0x28
 800631c:	d905      	bls.n	800632a <process_touches+0x16a>
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	2bc7      	cmp	r3, #199	; 0xc7
 8006322:	d802      	bhi.n	800632a <process_touches+0x16a>
				//Register a tap
				action = BothRelease;
 8006324:	4b4b      	ldr	r3, [pc, #300]	; (8006454 <process_touches+0x294>)
 8006326:	2208      	movs	r2, #8
 8006328:	701a      	strb	r2, [r3, #0]
			}
			lightsSimpleMessageReceivedTouch = 0;
 800632a:	4b4b      	ldr	r3, [pc, #300]	; (8006458 <process_touches+0x298>)
 800632c:	2200      	movs	r2, #0
 800632e:	601a      	str	r2, [r3, #0]
			self->touch_state = Idle;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2200      	movs	r2, #0
 8006334:	761a      	strb	r2, [r3, #24]
 8006336:	e085      	b.n	8006444 <process_touches+0x284>
		}
	} else if (self->touch_state == FirstReleasedSecondPressed) {
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	7e1b      	ldrb	r3, [r3, #24]
 800633c:	2b04      	cmp	r3, #4
 800633e:	d148      	bne.n	80063d2 <process_touches+0x212>
		if (!dbs[self->touches[1].cap_idx].clean_out) {
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	7b1b      	ldrb	r3, [r3, #12]
 8006344:	00db      	lsls	r3, r3, #3
 8006346:	68ba      	ldr	r2, [r7, #8]
 8006348:	4413      	add	r3, r2
 800634a:	795b      	ldrb	r3, [r3, #5]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d179      	bne.n	8006444 <process_touches+0x284>
			self->touch_state = Idle;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2200      	movs	r2, #0
 8006354:	761a      	strb	r2, [r3, #24]
			self->touches[1].end_t = cur_time;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	615a      	str	r2, [r3, #20]
			action = None;
 800635c:	4b3d      	ldr	r3, [pc, #244]	; (8006454 <process_touches+0x294>)
 800635e:	2200      	movs	r2, #0
 8006360:	701a      	strb	r2, [r3, #0]
			uint32_t touches_start_diff = self->touches[1].start_t - self->touches[0].start_t;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	691a      	ldr	r2, [r3, #16]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	1ad3      	subs	r3, r2, r3
 800636c:	623b      	str	r3, [r7, #32]
			uint32_t touches_end_diff = self->touches[1].end_t - self->touches[0].end_t;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	695a      	ldr	r2, [r3, #20]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	1ad3      	subs	r3, r2, r3
 8006378:	61fb      	str	r3, [r7, #28]
			uint32_t touch_duration = self->touches[1].end_t - self->touches[0].start_t;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	695a      	ldr	r2, [r3, #20]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	1ad3      	subs	r3, r2, r3
 8006384:	61bb      	str	r3, [r7, #24]

			//If touch start and touch end differences were small, then it was likely just a tap
			if ((touches_start_diff <= TAP_MIN_THRESHOLD) && (touches_end_diff <= TAP_MIN_THRESHOLD)
 8006386:	6a3b      	ldr	r3, [r7, #32]
 8006388:	2b28      	cmp	r3, #40	; 0x28
 800638a:	d80c      	bhi.n	80063a6 <process_touches+0x1e6>
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	2b28      	cmp	r3, #40	; 0x28
 8006390:	d809      	bhi.n	80063a6 <process_touches+0x1e6>
					&& (TAP_MIN_THRESHOLD < touch_duration) && (touch_duration < TAP_MAX_THRESHOLD)) {
 8006392:	69bb      	ldr	r3, [r7, #24]
 8006394:	2b28      	cmp	r3, #40	; 0x28
 8006396:	d906      	bls.n	80063a6 <process_touches+0x1e6>
 8006398:	69bb      	ldr	r3, [r7, #24]
 800639a:	2bc7      	cmp	r3, #199	; 0xc7
 800639c:	d803      	bhi.n	80063a6 <process_touches+0x1e6>
				//Register a tap
				action = BothRelease;
 800639e:	4b2d      	ldr	r3, [pc, #180]	; (8006454 <process_touches+0x294>)
 80063a0:	2208      	movs	r2, #8
 80063a2:	701a      	strb	r2, [r3, #0]
 80063a4:	e011      	b.n	80063ca <process_touches+0x20a>
			}
			//Otherwise, it was a swipe. Might have to adjust these thresholds to allow swipe detection
			else if (touches_start_diff > TAP_MIN_THRESHOLD && touches_end_diff > TAP_MIN_THRESHOLD) {
 80063a6:	6a3b      	ldr	r3, [r7, #32]
 80063a8:	2b28      	cmp	r3, #40	; 0x28
 80063aa:	d90e      	bls.n	80063ca <process_touches+0x20a>
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	2b28      	cmp	r3, #40	; 0x28
 80063b0:	d90b      	bls.n	80063ca <process_touches+0x20a>
				//Register a swipe
				action = (self->touches[0].cap_idx << 1) | self->touches[1].cap_idx;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	005b      	lsls	r3, r3, #1
 80063b8:	b25a      	sxtb	r2, r3
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	7b1b      	ldrb	r3, [r3, #12]
 80063be:	b25b      	sxtb	r3, r3
 80063c0:	4313      	orrs	r3, r2
 80063c2:	b25b      	sxtb	r3, r3
 80063c4:	b2da      	uxtb	r2, r3
 80063c6:	4b23      	ldr	r3, [pc, #140]	; (8006454 <process_touches+0x294>)
 80063c8:	701a      	strb	r2, [r3, #0]
			}

			self->touch_state = Idle;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2200      	movs	r2, #0
 80063ce:	761a      	strb	r2, [r3, #24]
 80063d0:	e038      	b.n	8006444 <process_touches+0x284>
		}
	} else if (self->touch_state == SecondReleasedFirstPressed) {
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	7e1b      	ldrb	r3, [r3, #24]
 80063d6:	2b05      	cmp	r3, #5
 80063d8:	d134      	bne.n	8006444 <process_touches+0x284>
		if (!dbs[self->touches[0].cap_idx].clean_out) {
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	00db      	lsls	r3, r3, #3
 80063e0:	68ba      	ldr	r2, [r7, #8]
 80063e2:	4413      	add	r3, r2
 80063e4:	795b      	ldrb	r3, [r3, #5]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d12c      	bne.n	8006444 <process_touches+0x284>
			self->touch_state = Idle;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2200      	movs	r2, #0
 80063ee:	761a      	strb	r2, [r3, #24]
			self->touches[0].end_t = cur_time;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	609a      	str	r2, [r3, #8]

			uint32_t touches_start_diff = self->touches[1].start_t - self->touches[0].start_t;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	691a      	ldr	r2, [r3, #16]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	1ad3      	subs	r3, r2, r3
 8006400:	62fb      	str	r3, [r7, #44]	; 0x2c
			uint32_t touches_end_diff = self->touches[0].end_t - self->touches[1].end_t;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	689a      	ldr	r2, [r3, #8]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	695b      	ldr	r3, [r3, #20]
 800640a:	1ad3      	subs	r3, r2, r3
 800640c:	62bb      	str	r3, [r7, #40]	; 0x28
			uint32_t touch_duration = self->touches[0].end_t - self->touches[0].start_t;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	689a      	ldr	r2, [r3, #8]
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	1ad3      	subs	r3, r2, r3
 8006418:	627b      	str	r3, [r7, #36]	; 0x24

			//If touch start and touch end differences were small, then it was likely just a tap
			if ((touches_start_diff <= TAP_MIN_THRESHOLD) && (touches_end_diff <= TAP_MIN_THRESHOLD)
 800641a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800641c:	2b28      	cmp	r3, #40	; 0x28
 800641e:	d80b      	bhi.n	8006438 <process_touches+0x278>
 8006420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006422:	2b28      	cmp	r3, #40	; 0x28
 8006424:	d808      	bhi.n	8006438 <process_touches+0x278>
					&& (TAP_MIN_THRESHOLD < touch_duration) && (touch_duration < TAP_MAX_THRESHOLD)) {
 8006426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006428:	2b28      	cmp	r3, #40	; 0x28
 800642a:	d905      	bls.n	8006438 <process_touches+0x278>
 800642c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642e:	2bc7      	cmp	r3, #199	; 0xc7
 8006430:	d802      	bhi.n	8006438 <process_touches+0x278>
				//Register a tap
				action = BothRelease;
 8006432:	4b08      	ldr	r3, [pc, #32]	; (8006454 <process_touches+0x294>)
 8006434:	2208      	movs	r2, #8
 8006436:	701a      	strb	r2, [r3, #0]
			}
			lightsSimpleMessageReceivedTouch = 0;
 8006438:	4b07      	ldr	r3, [pc, #28]	; (8006458 <process_touches+0x298>)
 800643a:	2200      	movs	r2, #0
 800643c:	601a      	str	r2, [r3, #0]
			self->touch_state = Idle;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2200      	movs	r2, #0
 8006442:	761a      	strb	r2, [r3, #24]
		}
	}

	if( action == None){
 8006444:	4b03      	ldr	r3, [pc, #12]	; (8006454 <process_touches+0x294>)
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d107      	bne.n	800645c <process_touches+0x29c>
		lightsSimpleMessageReceivedTouch = 0x00; // off
 800644c:	4b02      	ldr	r3, [pc, #8]	; (8006458 <process_touches+0x298>)
 800644e:	2200      	movs	r2, #0
 8006450:	601a      	str	r2, [r3, #0]
 8006452:	e042      	b.n	80064da <process_touches+0x31a>
 8006454:	20000b20 	.word	0x20000b20
 8006458:	2002853c 	.word	0x2002853c

	}else if(action == SwipeForward){
 800645c:	4b29      	ldr	r3, [pc, #164]	; (8006504 <process_touches+0x344>)
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	2b01      	cmp	r3, #1
 8006462:	d103      	bne.n	800646c <process_touches+0x2ac>
		lightsSimpleMessageReceivedTouch = 0x03; // cyan (green + blue)
 8006464:	4b28      	ldr	r3, [pc, #160]	; (8006508 <process_touches+0x348>)
 8006466:	2203      	movs	r2, #3
 8006468:	601a      	str	r2, [r3, #0]
 800646a:	e036      	b.n	80064da <process_touches+0x31a>

//		lightsSimpleMessageReceivedTouch |= 0x03 << 2;
//		lightsSimpleMessageReceivedTouch |= 0x03 << 4;
	}else if(action == SwipeBackward){
 800646c:	4b25      	ldr	r3, [pc, #148]	; (8006504 <process_touches+0x344>)
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	2b02      	cmp	r3, #2
 8006472:	d103      	bne.n	800647c <process_touches+0x2bc>
		lightsSimpleMessageReceivedTouch = (0x01 << 6) | 0x01; // orange (green + red)
 8006474:	4b24      	ldr	r3, [pc, #144]	; (8006508 <process_touches+0x348>)
 8006476:	2241      	movs	r2, #65	; 0x41
 8006478:	601a      	str	r2, [r3, #0]
 800647a:	e02e      	b.n	80064da <process_touches+0x31a>

//		lightsSimpleMessageReceivedTouch |= lightsSimpleMessageReceivedTouch << 2;
//		lightsSimpleMessageReceivedTouch |= lightsSimpleMessageReceivedTouch << 4;
	}else if(action == FrontRelease){
 800647c:	4b21      	ldr	r3, [pc, #132]	; (8006504 <process_touches+0x344>)
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	2b03      	cmp	r3, #3
 8006482:	d103      	bne.n	800648c <process_touches+0x2cc>
		lightsSimpleMessageReceivedTouch = 0x00; // off
 8006484:	4b20      	ldr	r3, [pc, #128]	; (8006508 <process_touches+0x348>)
 8006486:	2200      	movs	r2, #0
 8006488:	601a      	str	r2, [r3, #0]
 800648a:	e026      	b.n	80064da <process_touches+0x31a>
	}else if(action == BackRelease){
 800648c:	4b1d      	ldr	r3, [pc, #116]	; (8006504 <process_touches+0x344>)
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	2b04      	cmp	r3, #4
 8006492:	d103      	bne.n	800649c <process_touches+0x2dc>
		lightsSimpleMessageReceivedTouch = 0x00; // off
 8006494:	4b1c      	ldr	r3, [pc, #112]	; (8006508 <process_touches+0x348>)
 8006496:	2200      	movs	r2, #0
 8006498:	601a      	str	r2, [r3, #0]
 800649a:	e01e      	b.n	80064da <process_touches+0x31a>
	}else if(action == FrontHold){
 800649c:	4b19      	ldr	r3, [pc, #100]	; (8006504 <process_touches+0x344>)
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	2b05      	cmp	r3, #5
 80064a2:	d103      	bne.n	80064ac <process_touches+0x2ec>
		lightsSimpleMessageReceivedTouch = 0x01; // green
 80064a4:	4b18      	ldr	r3, [pc, #96]	; (8006508 <process_touches+0x348>)
 80064a6:	2201      	movs	r2, #1
 80064a8:	601a      	str	r2, [r3, #0]
 80064aa:	e016      	b.n	80064da <process_touches+0x31a>

//		lightsSimpleMessageReceivedTouch |= 0x01 << 2;
//		lightsSimpleMessageReceivedTouch |= 0x01 << 4;
	}else if(action == BackHold){
 80064ac:	4b15      	ldr	r3, [pc, #84]	; (8006504 <process_touches+0x344>)
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	2b06      	cmp	r3, #6
 80064b2:	d103      	bne.n	80064bc <process_touches+0x2fc>
		lightsSimpleMessageReceivedTouch = 0x02; // blue
 80064b4:	4b14      	ldr	r3, [pc, #80]	; (8006508 <process_touches+0x348>)
 80064b6:	2202      	movs	r2, #2
 80064b8:	601a      	str	r2, [r3, #0]
 80064ba:	e00e      	b.n	80064da <process_touches+0x31a>

//		lightsSimpleMessageReceivedTouch |= 0x02 << 2;
//		lightsSimpleMessageReceivedTouch |= 0x02 << 4;
	}else if(action == BothHold){
 80064bc:	4b11      	ldr	r3, [pc, #68]	; (8006504 <process_touches+0x344>)
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	2b07      	cmp	r3, #7
 80064c2:	d103      	bne.n	80064cc <process_touches+0x30c>
		lightsSimpleMessageReceivedTouch = 0x01 << 6; // red
 80064c4:	4b10      	ldr	r3, [pc, #64]	; (8006508 <process_touches+0x348>)
 80064c6:	2240      	movs	r2, #64	; 0x40
 80064c8:	601a      	str	r2, [r3, #0]
 80064ca:	e006      	b.n	80064da <process_touches+0x31a>

//		lightsSimpleMessageReceivedTouch |= lightsSimpleMessageReceivedTouch << 2;
//		lightsSimpleMessageReceivedTouch |= lightsSimpleMessageReceivedTouch << 4;
	}else if(action == BothRelease){
 80064cc:	4b0d      	ldr	r3, [pc, #52]	; (8006504 <process_touches+0x344>)
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	2b08      	cmp	r3, #8
 80064d2:	d102      	bne.n	80064da <process_touches+0x31a>
		lightsSimpleMessageReceivedTouch = 0x00; // off
 80064d4:	4b0c      	ldr	r3, [pc, #48]	; (8006508 <process_touches+0x348>)
 80064d6:	2200      	movs	r2, #0
 80064d8:	601a      	str	r2, [r3, #0]
	}

	if(prev_msg != lightsSimpleMessageReceivedTouch ){
 80064da:	4b0c      	ldr	r3, [pc, #48]	; (800650c <process_touches+0x34c>)
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	4b0a      	ldr	r3, [pc, #40]	; (8006508 <process_touches+0x348>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d00a      	beq.n	80064fc <process_touches+0x33c>
		prev_msg = lightsSimpleMessageReceivedTouch;
 80064e6:	4b08      	ldr	r3, [pc, #32]	; (8006508 <process_touches+0x348>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a08      	ldr	r2, [pc, #32]	; (800650c <process_touches+0x34c>)
 80064ec:	6013      	str	r3, [r2, #0]

		osMessageQueuePut(lightsSimpleQueueHandle, &lightsSimpleMessageReceivedTouch, 0U, 0);
 80064ee:	4b08      	ldr	r3, [pc, #32]	; (8006510 <process_touches+0x350>)
 80064f0:	6818      	ldr	r0, [r3, #0]
 80064f2:	2300      	movs	r3, #0
 80064f4:	2200      	movs	r2, #0
 80064f6:	4904      	ldr	r1, [pc, #16]	; (8006508 <process_touches+0x348>)
 80064f8:	f008 fc3c 	bl	800ed74 <osMessageQueuePut>

	}

}
 80064fc:	bf00      	nop
 80064fe:	3730      	adds	r7, #48	; 0x30
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}
 8006504:	20000b20 	.word	0x20000b20
 8006508:	2002853c 	.word	0x2002853c
 800650c:	20000b1c 	.word	0x20000b1c
 8006510:	200278bc 	.word	0x200278bc

08006514 <debounce>:

void debounce(Debouncer *self, uint8_t noisy_in, uint32_t cur_time) {
 8006514:	b480      	push	{r7}
 8006516:	b085      	sub	sp, #20
 8006518:	af00      	add	r7, sp, #0
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	460b      	mov	r3, r1
 800651e:	607a      	str	r2, [r7, #4]
 8006520:	72fb      	strb	r3, [r7, #11]
	if (noisy_in != self->input) {
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	791b      	ldrb	r3, [r3, #4]
 8006526:	7afa      	ldrb	r2, [r7, #11]
 8006528:	429a      	cmp	r2, r3
 800652a:	d006      	beq.n	800653a <debounce+0x26>
		self->input = noisy_in;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	7afa      	ldrb	r2, [r7, #11]
 8006530:	711a      	strb	r2, [r3, #4]
		self->start_t = cur_time;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	601a      	str	r2, [r3, #0]
	} else if (cur_time - self->start_t > DEBOUNCE_TIME) {
		self->clean_out = self->input;
	}
}
 8006538:	e009      	b.n	800654e <debounce+0x3a>
	} else if (cur_time - self->start_t > DEBOUNCE_TIME) {
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	1ad3      	subs	r3, r2, r3
 8006542:	2b1e      	cmp	r3, #30
 8006544:	d903      	bls.n	800654e <debounce+0x3a>
		self->clean_out = self->input;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	791a      	ldrb	r2, [r3, #4]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	715a      	strb	r2, [r3, #5]
}
 800654e:	bf00      	nop
 8006550:	3714      	adds	r7, #20
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr

0800655a <LL_AHB1_GRP1_EnableClock>:
{
 800655a:	b480      	push	{r7}
 800655c:	b085      	sub	sp, #20
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8006562:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006566:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006568:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	4313      	orrs	r3, r2
 8006570:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8006572:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006576:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	4013      	ands	r3, r2
 800657c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800657e:	68fb      	ldr	r3, [r7, #12]
}
 8006580:	bf00      	nop
 8006582:	3714      	adds	r7, #20
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <LL_AHB2_GRP1_EnableClock>:
{
 800658c:	b480      	push	{r7}
 800658e:	b085      	sub	sp, #20
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8006594:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006598:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800659a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4313      	orrs	r3, r2
 80065a2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80065a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	4013      	ands	r3, r2
 80065ae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80065b0:	68fb      	ldr	r3, [r7, #12]
}
 80065b2:	bf00      	nop
 80065b4:	3714      	adds	r7, #20
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr
	...

080065c0 <MX_TSC_Init>:

TSC_HandleTypeDef htsc;

/* TSC init function */
void MX_TSC_Init(void)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	af00      	add	r7, sp, #0
//  htsc.Init.MaxCountValue = TSC_MCV_511;
//  htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
//  htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
//  htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
//  htsc.Init.MaxCountInterrupt = DISABLE;
  htsc.Instance = TSC;
 80065c4:	4b1d      	ldr	r3, [pc, #116]	; (800663c <MX_TSC_Init+0x7c>)
 80065c6:	4a1e      	ldr	r2, [pc, #120]	; (8006640 <MX_TSC_Init+0x80>)
 80065c8:	601a      	str	r2, [r3, #0]
	htsc.Init.CTPulseHighLength = TSC_CTPH_4CYCLES;
 80065ca:	4b1c      	ldr	r3, [pc, #112]	; (800663c <MX_TSC_Init+0x7c>)
 80065cc:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80065d0:	605a      	str	r2, [r3, #4]
	htsc.Init.CTPulseLowLength = TSC_CTPL_4CYCLES;
 80065d2:	4b1a      	ldr	r3, [pc, #104]	; (800663c <MX_TSC_Init+0x7c>)
 80065d4:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 80065d8:	609a      	str	r2, [r3, #8]
	htsc.Init.SpreadSpectrum = DISABLE;
 80065da:	4b18      	ldr	r3, [pc, #96]	; (800663c <MX_TSC_Init+0x7c>)
 80065dc:	2200      	movs	r2, #0
 80065de:	731a      	strb	r2, [r3, #12]
	htsc.Init.SpreadSpectrumDeviation = 1;
 80065e0:	4b16      	ldr	r3, [pc, #88]	; (800663c <MX_TSC_Init+0x7c>)
 80065e2:	2201      	movs	r2, #1
 80065e4:	611a      	str	r2, [r3, #16]
	htsc.Init.SpreadSpectrumPrescaler = TSC_SS_PRESC_DIV1;
 80065e6:	4b15      	ldr	r3, [pc, #84]	; (800663c <MX_TSC_Init+0x7c>)
 80065e8:	2200      	movs	r2, #0
 80065ea:	615a      	str	r2, [r3, #20]
	htsc.Init.PulseGeneratorPrescaler = TSC_PG_PRESC_DIV4;
 80065ec:	4b13      	ldr	r3, [pc, #76]	; (800663c <MX_TSC_Init+0x7c>)
 80065ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80065f2:	619a      	str	r2, [r3, #24]
//	htsc.Init.MaxCountValue = TSC_MCV_8191;
	htsc.Init.MaxCountValue = TSC_MCV_16383;
 80065f4:	4b11      	ldr	r3, [pc, #68]	; (800663c <MX_TSC_Init+0x7c>)
 80065f6:	22c0      	movs	r2, #192	; 0xc0
 80065f8:	61da      	str	r2, [r3, #28]
	htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
 80065fa:	4b10      	ldr	r3, [pc, #64]	; (800663c <MX_TSC_Init+0x7c>)
 80065fc:	2200      	movs	r2, #0
 80065fe:	621a      	str	r2, [r3, #32]
	htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
 8006600:	4b0e      	ldr	r3, [pc, #56]	; (800663c <MX_TSC_Init+0x7c>)
 8006602:	2200      	movs	r2, #0
 8006604:	625a      	str	r2, [r3, #36]	; 0x24
	htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
 8006606:	4b0d      	ldr	r3, [pc, #52]	; (800663c <MX_TSC_Init+0x7c>)
 8006608:	2200      	movs	r2, #0
 800660a:	629a      	str	r2, [r3, #40]	; 0x28
	htsc.Init.MaxCountInterrupt = DISABLE;
 800660c:	4b0b      	ldr	r3, [pc, #44]	; (800663c <MX_TSC_Init+0x7c>)
 800660e:	2200      	movs	r2, #0
 8006610:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

//  htsc.Init.ChannelIOs = TSC_GROUP2_IO2|TSC_GROUP2_IO3|TSC_GROUP2_IO4;
  htsc.Init.ChannelIOs = TSC_GROUP2_IO3|TSC_GROUP2_IO4;
 8006614:	4b09      	ldr	r3, [pc, #36]	; (800663c <MX_TSC_Init+0x7c>)
 8006616:	22c0      	movs	r2, #192	; 0xc0
 8006618:	631a      	str	r2, [r3, #48]	; 0x30

  htsc.Init.ShieldIOs = 0;
 800661a:	4b08      	ldr	r3, [pc, #32]	; (800663c <MX_TSC_Init+0x7c>)
 800661c:	2200      	movs	r2, #0
 800661e:	635a      	str	r2, [r3, #52]	; 0x34
  htsc.Init.SamplingIOs = TSC_GROUP2_IO1;
 8006620:	4b06      	ldr	r3, [pc, #24]	; (800663c <MX_TSC_Init+0x7c>)
 8006622:	2210      	movs	r2, #16
 8006624:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_TSC_Init(&htsc) != HAL_OK)
 8006626:	4805      	ldr	r0, [pc, #20]	; (800663c <MX_TSC_Init+0x7c>)
 8006628:	f7fe ff56 	bl	80054d8 <HAL_TSC_Init>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d001      	beq.n	8006636 <MX_TSC_Init+0x76>
  {
    Error_Handler();
 8006632:	f7fd fe91 	bl	8004358 <Error_Handler>
  }

}
 8006636:	bf00      	nop
 8006638:	bd80      	pop	{r7, pc}
 800663a:	bf00      	nop
 800663c:	20028560 	.word	0x20028560
 8006640:	40024000 	.word	0x40024000

08006644 <HAL_TSC_MspInit>:

void HAL_TSC_MspInit(TSC_HandleTypeDef* tscHandle)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b088      	sub	sp, #32
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800664c:	f107 030c 	add.w	r3, r7, #12
 8006650:	2200      	movs	r2, #0
 8006652:	601a      	str	r2, [r3, #0]
 8006654:	605a      	str	r2, [r3, #4]
 8006656:	609a      	str	r2, [r3, #8]
 8006658:	60da      	str	r2, [r3, #12]
 800665a:	611a      	str	r2, [r3, #16]
  if(tscHandle->Instance==TSC)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a1a      	ldr	r2, [pc, #104]	; (80066cc <HAL_TSC_MspInit+0x88>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d12e      	bne.n	80066c4 <HAL_TSC_MspInit+0x80>
  {
  /* USER CODE BEGIN TSC_MspInit 0 */

  /* USER CODE END TSC_MspInit 0 */
    /* TSC clock enable */
    __HAL_RCC_TSC_CLK_ENABLE();
 8006666:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800666a:	f7ff ff76 	bl	800655a <LL_AHB1_GRP1_EnableClock>
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800666e:	2002      	movs	r0, #2
 8006670:	f7ff ff8c 	bl	800658c <LL_AHB2_GRP1_EnableClock>
    PB4     ------> TSC_G2_IO1
    PB5     ------> TSC_G2_IO2
    PB6     ------> TSC_G2_IO3
    PB7     ------> TSC_G2_IO4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8006674:	2310      	movs	r3, #16
 8006676:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006678:	2312      	movs	r3, #18
 800667a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800667c:	2300      	movs	r3, #0
 800667e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006680:	2300      	movs	r3, #0
 8006682:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TSC;
 8006684:	2309      	movs	r3, #9
 8006686:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006688:	f107 030c 	add.w	r3, r7, #12
 800668c:	4619      	mov	r1, r3
 800668e:	4810      	ldr	r0, [pc, #64]	; (80066d0 <HAL_TSC_MspInit+0x8c>)
 8006690:	f002 f944 	bl	800891c <HAL_GPIO_Init>

//    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006694:	23c0      	movs	r3, #192	; 0xc0
 8006696:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006698:	2302      	movs	r3, #2
 800669a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800669c:	2300      	movs	r3, #0
 800669e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066a0:	2300      	movs	r3, #0
 80066a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TSC;
 80066a4:	2309      	movs	r3, #9
 80066a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80066a8:	f107 030c 	add.w	r3, r7, #12
 80066ac:	4619      	mov	r1, r3
 80066ae:	4808      	ldr	r0, [pc, #32]	; (80066d0 <HAL_TSC_MspInit+0x8c>)
 80066b0:	f002 f934 	bl	800891c <HAL_GPIO_Init>

    /* TSC interrupt Init */
    HAL_NVIC_SetPriority(TSC_IRQn, 5, 0);
 80066b4:	2200      	movs	r2, #0
 80066b6:	2105      	movs	r1, #5
 80066b8:	2027      	movs	r0, #39	; 0x27
 80066ba:	f001 fda8 	bl	800820e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TSC_IRQn);
 80066be:	2027      	movs	r0, #39	; 0x27
 80066c0:	f001 fdbf 	bl	8008242 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TSC_MspInit 1 */

  /* USER CODE END TSC_MspInit 1 */
  }
}
 80066c4:	bf00      	nop
 80066c6:	3720      	adds	r7, #32
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}
 80066cc:	40024000 	.word	0x40024000
 80066d0:	48000400 	.word	0x48000400

080066d4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80066d4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80066d6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80066d8:	3304      	adds	r3, #4

080066da <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80066da:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80066dc:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80066de:	d3f9      	bcc.n	80066d4 <CopyDataInit>
  bx lr
 80066e0:	4770      	bx	lr

080066e2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80066e2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80066e4:	3004      	adds	r0, #4

080066e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80066e6:	4288      	cmp	r0, r1
  bcc FillZerobss
 80066e8:	d3fb      	bcc.n	80066e2 <FillZerobss>
  bx lr
 80066ea:	4770      	bx	lr

080066ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:  ldr   r0, =_estack
 80066ec:	480c      	ldr	r0, [pc, #48]	; (8006720 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80066ee:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80066f0:	480c      	ldr	r0, [pc, #48]	; (8006724 <LoopForever+0x8>)
 80066f2:	490d      	ldr	r1, [pc, #52]	; (8006728 <LoopForever+0xc>)
 80066f4:	4a0d      	ldr	r2, [pc, #52]	; (800672c <LoopForever+0x10>)
 80066f6:	2300      	movs	r3, #0
 80066f8:	f7ff ffef 	bl	80066da <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80066fc:	480c      	ldr	r0, [pc, #48]	; (8006730 <LoopForever+0x14>)
 80066fe:	490d      	ldr	r1, [pc, #52]	; (8006734 <LoopForever+0x18>)
 8006700:	2300      	movs	r3, #0
 8006702:	f7ff fff0 	bl	80066e6 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8006706:	480c      	ldr	r0, [pc, #48]	; (8006738 <LoopForever+0x1c>)
 8006708:	490c      	ldr	r1, [pc, #48]	; (800673c <LoopForever+0x20>)
 800670a:	2300      	movs	r3, #0
 800670c:	f7ff ffeb 	bl	80066e6 <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8006710:	f7ff f946 	bl	80059a0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8006714:	f00f fbf6 	bl	8015f04 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8006718:	f7fd fd46 	bl	80041a8 <main>

0800671c <LoopForever>:

LoopForever:
  b LoopForever
 800671c:	e7fe      	b.n	800671c <LoopForever>
 800671e:	0000      	.short	0x0000
Reset_Handler:  ldr   r0, =_estack
 8006720:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8006724:	20000004 	.word	0x20000004
 8006728:	20000160 	.word	0x20000160
 800672c:	080182e8 	.word	0x080182e8
  INIT_BSS _sbss, _ebss
 8006730:	20000210 	.word	0x20000210
 8006734:	20028684 	.word	0x20028684
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8006738:	200300c4 	.word	0x200300c4
 800673c:	20030b5b 	.word	0x20030b5b

08006740 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006740:	e7fe      	b.n	8006740 <ADC1_IRQHandler>
	...

08006744 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b082      	sub	sp, #8
 8006748:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800674a:	2300      	movs	r3, #0
 800674c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800674e:	4b0c      	ldr	r3, [pc, #48]	; (8006780 <HAL_Init+0x3c>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a0b      	ldr	r2, [pc, #44]	; (8006780 <HAL_Init+0x3c>)
 8006754:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006758:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800675a:	2003      	movs	r0, #3
 800675c:	f001 fd4c 	bl	80081f8 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006760:	2000      	movs	r0, #0
 8006762:	f7fe fe6d 	bl	8005440 <HAL_InitTick>
 8006766:	4603      	mov	r3, r0
 8006768:	2b00      	cmp	r3, #0
 800676a:	d002      	beq.n	8006772 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	71fb      	strb	r3, [r7, #7]
 8006770:	e001      	b.n	8006776 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006772:	f7fe fe34 	bl	80053de <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006776:	79fb      	ldrb	r3, [r7, #7]
}
 8006778:	4618      	mov	r0, r3
 800677a:	3708      	adds	r7, #8
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}
 8006780:	58004000 	.word	0x58004000

08006784 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006784:	b480      	push	{r7}
 8006786:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006788:	4b05      	ldr	r3, [pc, #20]	; (80067a0 <HAL_IncTick+0x1c>)
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	4b05      	ldr	r3, [pc, #20]	; (80067a4 <HAL_IncTick+0x20>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4413      	add	r3, r2
 8006792:	4a03      	ldr	r2, [pc, #12]	; (80067a0 <HAL_IncTick+0x1c>)
 8006794:	6013      	str	r3, [r2, #0]
}
 8006796:	bf00      	nop
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr
 80067a0:	200285a4 	.word	0x200285a4
 80067a4:	20000080 	.word	0x20000080

080067a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80067a8:	b480      	push	{r7}
 80067aa:	af00      	add	r7, sp, #0
  return uwTick;
 80067ac:	4b03      	ldr	r3, [pc, #12]	; (80067bc <HAL_GetTick+0x14>)
 80067ae:	681b      	ldr	r3, [r3, #0]
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr
 80067ba:	bf00      	nop
 80067bc:	200285a4 	.word	0x200285a4

080067c0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80067c0:	b480      	push	{r7}
 80067c2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80067c4:	4b03      	ldr	r3, [pc, #12]	; (80067d4 <HAL_GetTickPrio+0x14>)
 80067c6:	681b      	ldr	r3, [r3, #0]
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr
 80067d2:	bf00      	nop
 80067d4:	2000007c 	.word	0x2000007c

080067d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 80067e0:	f7ff ffe2 	bl	80067a8 <HAL_GetTick>
 80067e4:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067f0:	d004      	beq.n	80067fc <HAL_Delay+0x24>
    {
      wait += (uint32_t)(uwTickFreq);
 80067f2:	4b09      	ldr	r3, [pc, #36]	; (8006818 <HAL_Delay+0x40>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	68fa      	ldr	r2, [r7, #12]
 80067f8:	4413      	add	r3, r2
 80067fa:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 80067fc:	bf00      	nop
 80067fe:	f7ff ffd3 	bl	80067a8 <HAL_GetTick>
 8006802:	4602      	mov	r2, r0
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	1ad3      	subs	r3, r2, r3
 8006808:	68fa      	ldr	r2, [r7, #12]
 800680a:	429a      	cmp	r2, r3
 800680c:	d8f7      	bhi.n	80067fe <HAL_Delay+0x26>
    {
    }
  }
 800680e:	bf00      	nop
 8006810:	3710      	adds	r7, #16
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
 8006816:	bf00      	nop
 8006818:	20000080 	.word	0x20000080

0800681c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
//  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
}
 8006826:	bf00      	nop
 8006828:	370c      	adds	r7, #12
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr

08006832 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8006832:	b480      	push	{r7}
 8006834:	b083      	sub	sp, #12
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
 800683a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	431a      	orrs	r2, r3
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	609a      	str	r2, [r3, #8]
}
 800684c:	bf00      	nop
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr

08006858 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006858:	b480      	push	{r7}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8006868:	4618      	mov	r0, r3
 800686a:	370c      	adds	r7, #12
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8006874:	b490      	push	{r4, r7}
 8006876:	b084      	sub	sp, #16
 8006878:	af00      	add	r7, sp, #0
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	60b9      	str	r1, [r7, #8]
 800687e:	607a      	str	r2, [r7, #4]
 8006880:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	3360      	adds	r3, #96	; 0x60
 8006886:	461a      	mov	r2, r3
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	4413      	add	r3, r2
 800688e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8006890:	6822      	ldr	r2, [r4, #0]
 8006892:	4b08      	ldr	r3, [pc, #32]	; (80068b4 <LL_ADC_SetOffset+0x40>)
 8006894:	4013      	ands	r3, r2
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800689c:	683a      	ldr	r2, [r7, #0]
 800689e:	430a      	orrs	r2, r1
 80068a0:	4313      	orrs	r3, r2
 80068a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068a6:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80068a8:	bf00      	nop
 80068aa:	3710      	adds	r7, #16
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bc90      	pop	{r4, r7}
 80068b0:	4770      	bx	lr
 80068b2:	bf00      	nop
 80068b4:	03fff000 	.word	0x03fff000

080068b8 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80068b8:	b490      	push	{r4, r7}
 80068ba:	b082      	sub	sp, #8
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	3360      	adds	r3, #96	; 0x60
 80068c6:	461a      	mov	r2, r3
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	009b      	lsls	r3, r3, #2
 80068cc:	4413      	add	r3, r2
 80068ce:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80068d0:	6823      	ldr	r3, [r4, #0]
 80068d2:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3708      	adds	r7, #8
 80068da:	46bd      	mov	sp, r7
 80068dc:	bc90      	pop	{r4, r7}
 80068de:	4770      	bx	lr

080068e0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80068e0:	b490      	push	{r4, r7}
 80068e2:	b084      	sub	sp, #16
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	60b9      	str	r1, [r7, #8]
 80068ea:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	3360      	adds	r3, #96	; 0x60
 80068f0:	461a      	mov	r2, r3
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	4413      	add	r3, r2
 80068f8:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80068fa:	6823      	ldr	r3, [r4, #0]
 80068fc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	4313      	orrs	r3, r2
 8006904:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8006906:	bf00      	nop
 8006908:	3710      	adds	r7, #16
 800690a:	46bd      	mov	sp, r7
 800690c:	bc90      	pop	{r4, r7}
 800690e:	4770      	bx	lr

08006910 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8006910:	b480      	push	{r7}
 8006912:	b083      	sub	sp, #12
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	68db      	ldr	r3, [r3, #12]
 800691c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006920:	2b00      	cmp	r3, #0
 8006922:	d101      	bne.n	8006928 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8006924:	2301      	movs	r3, #1
 8006926:	e000      	b.n	800692a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8006928:	2300      	movs	r3, #0
}
 800692a:	4618      	mov	r0, r3
 800692c:	370c      	adds	r7, #12
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr

08006936 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006936:	b490      	push	{r4, r7}
 8006938:	b084      	sub	sp, #16
 800693a:	af00      	add	r7, sp, #0
 800693c:	60f8      	str	r0, [r7, #12]
 800693e:	60b9      	str	r1, [r7, #8]
 8006940:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	3330      	adds	r3, #48	; 0x30
 8006946:	461a      	mov	r2, r3
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	0a1b      	lsrs	r3, r3, #8
 800694c:	009b      	lsls	r3, r3, #2
 800694e:	f003 030c 	and.w	r3, r3, #12
 8006952:	4413      	add	r3, r2
 8006954:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8006956:	6822      	ldr	r2, [r4, #0]
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	f003 031f 	and.w	r3, r3, #31
 800695e:	211f      	movs	r1, #31
 8006960:	fa01 f303 	lsl.w	r3, r1, r3
 8006964:	43db      	mvns	r3, r3
 8006966:	401a      	ands	r2, r3
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	0e9b      	lsrs	r3, r3, #26
 800696c:	f003 011f 	and.w	r1, r3, #31
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	f003 031f 	and.w	r3, r3, #31
 8006976:	fa01 f303 	lsl.w	r3, r1, r3
 800697a:	4313      	orrs	r3, r2
 800697c:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800697e:	bf00      	nop
 8006980:	3710      	adds	r7, #16
 8006982:	46bd      	mov	sp, r7
 8006984:	bc90      	pop	{r4, r7}
 8006986:	4770      	bx	lr

08006988 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006988:	b490      	push	{r4, r7}
 800698a:	b084      	sub	sp, #16
 800698c:	af00      	add	r7, sp, #0
 800698e:	60f8      	str	r0, [r7, #12]
 8006990:	60b9      	str	r1, [r7, #8]
 8006992:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	3314      	adds	r3, #20
 8006998:	461a      	mov	r2, r3
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	0e5b      	lsrs	r3, r3, #25
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	f003 0304 	and.w	r3, r3, #4
 80069a4:	4413      	add	r3, r2
 80069a6:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80069a8:	6822      	ldr	r2, [r4, #0]
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	0d1b      	lsrs	r3, r3, #20
 80069ae:	f003 031f 	and.w	r3, r3, #31
 80069b2:	2107      	movs	r1, #7
 80069b4:	fa01 f303 	lsl.w	r3, r1, r3
 80069b8:	43db      	mvns	r3, r3
 80069ba:	401a      	ands	r2, r3
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	0d1b      	lsrs	r3, r3, #20
 80069c0:	f003 031f 	and.w	r3, r3, #31
 80069c4:	6879      	ldr	r1, [r7, #4]
 80069c6:	fa01 f303 	lsl.w	r3, r1, r3
 80069ca:	4313      	orrs	r3, r2
 80069cc:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80069ce:	bf00      	nop
 80069d0:	3710      	adds	r7, #16
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bc90      	pop	{r4, r7}
 80069d6:	4770      	bx	lr

080069d8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80069d8:	b480      	push	{r7}
 80069da:	b085      	sub	sp, #20
 80069dc:	af00      	add	r7, sp, #0
 80069de:	60f8      	str	r0, [r7, #12]
 80069e0:	60b9      	str	r1, [r7, #8]
 80069e2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069f0:	43db      	mvns	r3, r3
 80069f2:	401a      	ands	r2, r3
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f003 0318 	and.w	r3, r3, #24
 80069fa:	4908      	ldr	r1, [pc, #32]	; (8006a1c <LL_ADC_SetChannelSingleDiff+0x44>)
 80069fc:	40d9      	lsrs	r1, r3
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	400b      	ands	r3, r1
 8006a02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a06:	431a      	orrs	r2, r3
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8006a0e:	bf00      	nop
 8006a10:	3714      	adds	r7, #20
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr
 8006a1a:	bf00      	nop
 8006a1c:	0007ffff 	.word	0x0007ffff

08006a20 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b083      	sub	sp, #12
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8006a30:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	6093      	str	r3, [r2, #8]
}
 8006a38:	bf00      	nop
 8006a3a:	370c      	adds	r7, #12
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a58:	d101      	bne.n	8006a5e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e000      	b.n	8006a60 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006a5e:	2300      	movs	r3, #0
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	370c      	adds	r7, #12
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8006a7c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006a80:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006a88:	bf00      	nop
 8006a8a:	370c      	adds	r7, #12
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr

08006a94 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b083      	sub	sp, #12
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006aa4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006aa8:	d101      	bne.n	8006aae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e000      	b.n	8006ab0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006aae:	2300      	movs	r3, #0
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	370c      	adds	r7, #12
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006acc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006ad0:	f043 0201 	orr.w	r2, r3, #1
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8006ad8:	bf00      	nop
 8006ada:	370c      	adds	r7, #12
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr

08006ae4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b083      	sub	sp, #12
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006af4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006af8:	f043 0202 	orr.w	r2, r3, #2
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8006b00:	bf00      	nop
 8006b02:	370c      	adds	r7, #12
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr

08006b0c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	f003 0301 	and.w	r3, r3, #1
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d101      	bne.n	8006b24 <LL_ADC_IsEnabled+0x18>
 8006b20:	2301      	movs	r3, #1
 8006b22:	e000      	b.n	8006b26 <LL_ADC_IsEnabled+0x1a>
 8006b24:	2300      	movs	r3, #0
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	370c      	adds	r7, #12
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr

08006b32 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8006b32:	b480      	push	{r7}
 8006b34:	b083      	sub	sp, #12
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	f003 0302 	and.w	r3, r3, #2
 8006b42:	2b02      	cmp	r3, #2
 8006b44:	d101      	bne.n	8006b4a <LL_ADC_IsDisableOngoing+0x18>
 8006b46:	2301      	movs	r3, #1
 8006b48:	e000      	b.n	8006b4c <LL_ADC_IsDisableOngoing+0x1a>
 8006b4a:	2300      	movs	r3, #0
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	370c      	adds	r7, #12
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr

08006b58 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b083      	sub	sp, #12
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b68:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006b6c:	f043 0204 	orr.w	r2, r3, #4
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8006b74:	bf00      	nop
 8006b76:	370c      	adds	r7, #12
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr

08006b80 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b083      	sub	sp, #12
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006b94:	f043 0210 	orr.w	r2, r3, #16
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8006b9c:	bf00      	nop
 8006b9e:	370c      	adds	r7, #12
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr

08006ba8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b083      	sub	sp, #12
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	f003 0304 	and.w	r3, r3, #4
 8006bb8:	2b04      	cmp	r3, #4
 8006bba:	d101      	bne.n	8006bc0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	e000      	b.n	8006bc2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006bc0:	2300      	movs	r3, #0
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	370c      	adds	r7, #12
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr

08006bce <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8006bce:	b480      	push	{r7}
 8006bd0:	b083      	sub	sp, #12
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	689b      	ldr	r3, [r3, #8]
 8006bda:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006bde:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006be2:	f043 0220 	orr.w	r2, r3, #32
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8006bea:	bf00      	nop
 8006bec:	370c      	adds	r7, #12
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr

08006bf6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006bf6:	b480      	push	{r7}
 8006bf8:	b083      	sub	sp, #12
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	f003 0308 	and.w	r3, r3, #8
 8006c06:	2b08      	cmp	r3, #8
 8006c08:	d101      	bne.n	8006c0e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e000      	b.n	8006c10 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006c0e:	2300      	movs	r3, #0
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	370c      	adds	r7, #12
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b088      	sub	sp, #32
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006c24:	2300      	movs	r3, #0
 8006c26:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d101      	bne.n	8006c36 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e12a      	b.n	8006e8c <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	691b      	ldr	r3, [r3, #16]
 8006c3a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d109      	bne.n	8006c58 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f7fa f963 	bl	8000f10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f7ff fef1 	bl	8006a44 <LL_ADC_IsDeepPowerDownEnabled>
 8006c62:	4603      	mov	r3, r0
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d004      	beq.n	8006c72 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f7ff fed7 	bl	8006a20 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4618      	mov	r0, r3
 8006c78:	f7ff ff0c 	bl	8006a94 <LL_ADC_IsInternalRegulatorEnabled>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d113      	bne.n	8006caa <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4618      	mov	r0, r3
 8006c88:	f7ff fef0 	bl	8006a6c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8006c8c:	4b81      	ldr	r3, [pc, #516]	; (8006e94 <HAL_ADC_Init+0x278>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	099b      	lsrs	r3, r3, #6
 8006c92:	4a81      	ldr	r2, [pc, #516]	; (8006e98 <HAL_ADC_Init+0x27c>)
 8006c94:	fba2 2303 	umull	r2, r3, r2, r3
 8006c98:	099b      	lsrs	r3, r3, #6
 8006c9a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006c9c:	e002      	b.n	8006ca4 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	3b01      	subs	r3, #1
 8006ca2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d1f9      	bne.n	8006c9e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f7ff fef0 	bl	8006a94 <LL_ADC_IsInternalRegulatorEnabled>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d10d      	bne.n	8006cd6 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cbe:	f043 0210 	orr.w	r2, r3, #16
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cca:	f043 0201 	orr.w	r2, r3, #1
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f7ff ff64 	bl	8006ba8 <LL_ADC_REG_IsConversionOngoing>
 8006ce0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ce6:	f003 0310 	and.w	r3, r3, #16
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	f040 80c5 	bne.w	8006e7a <HAL_ADC_Init+0x25e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	f040 80c1 	bne.w	8006e7a <HAL_ADC_Init+0x25e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cfc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006d00:	f043 0202 	orr.w	r2, r3, #2
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f7ff fefd 	bl	8006b0c <LL_ADC_IsEnabled>
 8006d12:	4603      	mov	r3, r0
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d10b      	bne.n	8006d30 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006d18:	4860      	ldr	r0, [pc, #384]	; (8006e9c <HAL_ADC_Init+0x280>)
 8006d1a:	f7ff fef7 	bl	8006b0c <LL_ADC_IsEnabled>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d105      	bne.n	8006d30 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	4619      	mov	r1, r3
 8006d2a:	485d      	ldr	r0, [pc, #372]	; (8006ea0 <HAL_ADC_Init+0x284>)
 8006d2c:	f7ff fd76 	bl	800681c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	7e5b      	ldrb	r3, [r3, #25]
 8006d34:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006d3a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8006d40:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8006d46:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006d4e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006d50:	4313      	orrs	r3, r2
 8006d52:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d106      	bne.n	8006d6c <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d62:	3b01      	subs	r3, #1
 8006d64:	045b      	lsls	r3, r3, #17
 8006d66:	69ba      	ldr	r2, [r7, #24]
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d009      	beq.n	8006d88 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d78:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d80:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006d82:	69ba      	ldr	r2, [r7, #24]
 8006d84:	4313      	orrs	r3, r2
 8006d86:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	68da      	ldr	r2, [r3, #12]
 8006d8e:	4b45      	ldr	r3, [pc, #276]	; (8006ea4 <HAL_ADC_Init+0x288>)
 8006d90:	4013      	ands	r3, r2
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	6812      	ldr	r2, [r2, #0]
 8006d96:	69b9      	ldr	r1, [r7, #24]
 8006d98:	430b      	orrs	r3, r1
 8006d9a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4618      	mov	r0, r3
 8006da2:	f7ff ff01 	bl	8006ba8 <LL_ADC_REG_IsConversionOngoing>
 8006da6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4618      	mov	r0, r3
 8006dae:	f7ff ff22 	bl	8006bf6 <LL_ADC_INJ_IsConversionOngoing>
 8006db2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d13d      	bne.n	8006e36 <HAL_ADC_Init+0x21a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d13a      	bne.n	8006e36 <HAL_ADC_Init+0x21a>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006dc4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006dcc:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	68db      	ldr	r3, [r3, #12]
 8006dd8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ddc:	f023 0302 	bic.w	r3, r3, #2
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	6812      	ldr	r2, [r2, #0]
 8006de4:	69b9      	ldr	r1, [r7, #24]
 8006de6:	430b      	orrs	r3, r1
 8006de8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	d118      	bne.n	8006e26 <HAL_ADC_Init+0x20a>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	691b      	ldr	r3, [r3, #16]
 8006dfa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006dfe:	f023 0304 	bic.w	r3, r3, #4
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006e0a:	4311      	orrs	r1, r2
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006e10:	4311      	orrs	r1, r2
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006e16:	430a      	orrs	r2, r1
 8006e18:	431a      	orrs	r2, r3
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f042 0201 	orr.w	r2, r2, #1
 8006e22:	611a      	str	r2, [r3, #16]
 8006e24:	e007      	b.n	8006e36 <HAL_ADC_Init+0x21a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	691a      	ldr	r2, [r3, #16]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f022 0201 	bic.w	r2, r2, #1
 8006e34:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	691b      	ldr	r3, [r3, #16]
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d10c      	bne.n	8006e58 <HAL_ADC_Init+0x23c>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e44:	f023 010f 	bic.w	r1, r3, #15
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	69db      	ldr	r3, [r3, #28]
 8006e4c:	1e5a      	subs	r2, r3, #1
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	430a      	orrs	r2, r1
 8006e54:	631a      	str	r2, [r3, #48]	; 0x30
 8006e56:	e007      	b.n	8006e68 <HAL_ADC_Init+0x24c>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f022 020f 	bic.w	r2, r2, #15
 8006e66:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e6c:	f023 0303 	bic.w	r3, r3, #3
 8006e70:	f043 0201 	orr.w	r2, r3, #1
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	655a      	str	r2, [r3, #84]	; 0x54
 8006e78:	e007      	b.n	8006e8a <HAL_ADC_Init+0x26e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e7e:	f043 0210 	orr.w	r2, r3, #16
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006e8a:	7ffb      	ldrb	r3, [r7, #31]
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3720      	adds	r7, #32
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}
 8006e94:	20000078 	.word	0x20000078
 8006e98:	053e2d63 	.word	0x053e2d63
 8006e9c:	50040000 	.word	0x50040000
 8006ea0:	50040300 	.word	0x50040300
 8006ea4:	fff0c007 	.word	0xfff0c007

08006ea8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b086      	sub	sp, #24
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f7ff fe75 	bl	8006ba8 <LL_ADC_REG_IsConversionOngoing>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d167      	bne.n	8006f94 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	d101      	bne.n	8006ed2 <HAL_ADC_Start_DMA+0x2a>
 8006ece:	2302      	movs	r3, #2
 8006ed0:	e063      	b.n	8006f9a <HAL_ADC_Start_DMA+0xf2>
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8006eda:	68f8      	ldr	r0, [r7, #12]
 8006edc:	f000 fcc2 	bl	8007864 <ADC_Enable>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8006ee4:	7dfb      	ldrb	r3, [r7, #23]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d14f      	bne.n	8006f8a <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eee:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006ef2:	f023 0301 	bic.w	r3, r3, #1
 8006ef6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                          HAL_ADC_STATE_REG_BUSY);

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d006      	beq.n	8006f18 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f0e:	f023 0206 	bic.w	r2, r3, #6
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	659a      	str	r2, [r3, #88]	; 0x58
 8006f16:	e002      	b.n	8006f1e <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f22:	4a20      	ldr	r2, [pc, #128]	; (8006fa4 <HAL_ADC_Start_DMA+0xfc>)
 8006f24:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f2a:	4a1f      	ldr	r2, [pc, #124]	; (8006fa8 <HAL_ADC_Start_DMA+0x100>)
 8006f2c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f32:	4a1e      	ldr	r2, [pc, #120]	; (8006fac <HAL_ADC_Start_DMA+0x104>)
 8006f34:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	221c      	movs	r2, #28
 8006f3c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2200      	movs	r2, #0
 8006f42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	685a      	ldr	r2, [r3, #4]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f042 0210 	orr.w	r2, r2, #16
 8006f54:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	68da      	ldr	r2, [r3, #12]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f042 0201 	orr.w	r2, r2, #1
 8006f64:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	3340      	adds	r3, #64	; 0x40
 8006f70:	4619      	mov	r1, r3
 8006f72:	68ba      	ldr	r2, [r7, #8]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f001 fa49 	bl	800840c <HAL_DMA_Start_IT>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4618      	mov	r0, r3
 8006f84:	f7ff fde8 	bl	8006b58 <LL_ADC_REG_StartConversion>
 8006f88:	e006      	b.n	8006f98 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8006f92:	e001      	b.n	8006f98 <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006f94:	2302      	movs	r3, #2
 8006f96:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006f98:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3718      	adds	r7, #24
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
 8006fa2:	bf00      	nop
 8006fa4:	080079c9 	.word	0x080079c9
 8006fa8:	08007aa1 	.word	0x08007aa1
 8006fac:	08007abd 	.word	0x08007abd

08006fb0 <HAL_ADC_Stop_DMA>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d101      	bne.n	8006fc6 <HAL_ADC_Stop_DMA+0x16>
 8006fc2:	2302      	movs	r3, #2
 8006fc4:	e051      	b.n	800706a <HAL_ADC_Stop_DMA+0xba>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2201      	movs	r2, #1
 8006fca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8006fce:	2103      	movs	r1, #3
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 fb93 	bl	80076fc <ADC_ConversionStop>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8006fda:	7bfb      	ldrb	r3, [r7, #15]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d13f      	bne.n	8007060 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	68da      	ldr	r2, [r3, #12]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f022 0201 	bic.w	r2, r2, #1
 8006fee:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ff4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006ff8:	b2db      	uxtb	r3, r3
 8006ffa:	2b02      	cmp	r3, #2
 8006ffc:	d10f      	bne.n	800701e <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007002:	4618      	mov	r0, r3
 8007004:	f001 fa7d 	bl	8008502 <HAL_DMA_Abort>
 8007008:	4603      	mov	r3, r0
 800700a:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800700c:	7bfb      	ldrb	r3, [r7, #15]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d005      	beq.n	800701e <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007016:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	685a      	ldr	r2, [r3, #4]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f022 0210 	bic.w	r2, r2, #16
 800702c:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 800702e:	7bfb      	ldrb	r3, [r7, #15]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d105      	bne.n	8007040 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f000 fc6f 	bl	8007918 <ADC_Disable>
 800703a:	4603      	mov	r3, r0
 800703c:	73fb      	strb	r3, [r7, #15]
 800703e:	e002      	b.n	8007046 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 fc69 	bl	8007918 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8007046:	7bfb      	ldrb	r3, [r7, #15]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d109      	bne.n	8007060 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007050:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007054:	f023 0301 	bic.w	r3, r3, #1
 8007058:	f043 0201 	orr.w	r2, r3, #1
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8007068:	7bfb      	ldrb	r3, [r7, #15]
}
 800706a:	4618      	mov	r0, r3
 800706c:	3710      	adds	r7, #16
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}

08007072 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007072:	b480      	push	{r7}
 8007074:	b083      	sub	sp, #12
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800707a:	bf00      	nop
 800707c:	370c      	adds	r7, #12
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr
	...

08007088 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b0a6      	sub	sp, #152	; 0x98
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007092:	2300      	movs	r3, #0
 8007094:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8007098:	2300      	movs	r3, #0
 800709a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d101      	bne.n	80070aa <HAL_ADC_ConfigChannel+0x22>
 80070a6:	2302      	movs	r3, #2
 80070a8:	e31e      	b.n	80076e8 <HAL_ADC_ConfigChannel+0x660>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2201      	movs	r2, #1
 80070ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4618      	mov	r0, r3
 80070b8:	f7ff fd76 	bl	8006ba8 <LL_ADC_REG_IsConversionOngoing>
 80070bc:	4603      	mov	r3, r0
 80070be:	2b00      	cmp	r3, #0
 80070c0:	f040 8303 	bne.w	80076ca <HAL_ADC_ConfigChannel+0x642>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6818      	ldr	r0, [r3, #0]
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	6859      	ldr	r1, [r3, #4]
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	461a      	mov	r2, r3
 80070d2:	f7ff fc30 	bl	8006936 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4618      	mov	r0, r3
 80070dc:	f7ff fd64 	bl	8006ba8 <LL_ADC_REG_IsConversionOngoing>
 80070e0:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4618      	mov	r0, r3
 80070ea:	f7ff fd84 	bl	8006bf6 <LL_ADC_INJ_IsConversionOngoing>
 80070ee:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80070f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	f040 8148 	bne.w	800738c <HAL_ADC_ConfigChannel+0x304>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80070fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007100:	2b00      	cmp	r3, #0
 8007102:	f040 8143 	bne.w	800738c <HAL_ADC_ConfigChannel+0x304>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6818      	ldr	r0, [r3, #0]
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	6819      	ldr	r1, [r3, #0]
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	461a      	mov	r2, r3
 8007114:	f7ff fc38 	bl	8006988 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	695a      	ldr	r2, [r3, #20]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	68db      	ldr	r3, [r3, #12]
 8007122:	08db      	lsrs	r3, r3, #3
 8007124:	f003 0303 	and.w	r3, r3, #3
 8007128:	005b      	lsls	r3, r3, #1
 800712a:	fa02 f303 	lsl.w	r3, r2, r3
 800712e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	691b      	ldr	r3, [r3, #16]
 8007136:	2b04      	cmp	r3, #4
 8007138:	d00a      	beq.n	8007150 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6818      	ldr	r0, [r3, #0]
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	6919      	ldr	r1, [r3, #16]
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800714a:	f7ff fb93 	bl	8006874 <LL_ADC_SetOffset>
 800714e:	e11d      	b.n	800738c <HAL_ADC_ConfigChannel+0x304>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	2100      	movs	r1, #0
 8007156:	4618      	mov	r0, r3
 8007158:	f7ff fbae 	bl	80068b8 <LL_ADC_GetOffsetChannel>
 800715c:	4603      	mov	r3, r0
 800715e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007162:	2b00      	cmp	r3, #0
 8007164:	d10a      	bne.n	800717c <HAL_ADC_ConfigChannel+0xf4>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	2100      	movs	r1, #0
 800716c:	4618      	mov	r0, r3
 800716e:	f7ff fba3 	bl	80068b8 <LL_ADC_GetOffsetChannel>
 8007172:	4603      	mov	r3, r0
 8007174:	0e9b      	lsrs	r3, r3, #26
 8007176:	f003 021f 	and.w	r2, r3, #31
 800717a:	e012      	b.n	80071a2 <HAL_ADC_ConfigChannel+0x11a>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	2100      	movs	r1, #0
 8007182:	4618      	mov	r0, r3
 8007184:	f7ff fb98 	bl	80068b8 <LL_ADC_GetOffsetChannel>
 8007188:	4603      	mov	r3, r0
 800718a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800718e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007192:	fa93 f3a3 	rbit	r3, r3
 8007196:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8007198:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800719a:	fab3 f383 	clz	r3, r3
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	461a      	mov	r2, r3
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d105      	bne.n	80071ba <HAL_ADC_ConfigChannel+0x132>
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	0e9b      	lsrs	r3, r3, #26
 80071b4:	f003 031f 	and.w	r3, r3, #31
 80071b8:	e00a      	b.n	80071d0 <HAL_ADC_ConfigChannel+0x148>
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071c2:	fa93 f3a3 	rbit	r3, r3
 80071c6:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 80071c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071ca:	fab3 f383 	clz	r3, r3
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d106      	bne.n	80071e2 <HAL_ADC_ConfigChannel+0x15a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	2200      	movs	r2, #0
 80071da:	2100      	movs	r1, #0
 80071dc:	4618      	mov	r0, r3
 80071de:	f7ff fb7f 	bl	80068e0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	2101      	movs	r1, #1
 80071e8:	4618      	mov	r0, r3
 80071ea:	f7ff fb65 	bl	80068b8 <LL_ADC_GetOffsetChannel>
 80071ee:	4603      	mov	r3, r0
 80071f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d10a      	bne.n	800720e <HAL_ADC_ConfigChannel+0x186>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	2101      	movs	r1, #1
 80071fe:	4618      	mov	r0, r3
 8007200:	f7ff fb5a 	bl	80068b8 <LL_ADC_GetOffsetChannel>
 8007204:	4603      	mov	r3, r0
 8007206:	0e9b      	lsrs	r3, r3, #26
 8007208:	f003 021f 	and.w	r2, r3, #31
 800720c:	e010      	b.n	8007230 <HAL_ADC_ConfigChannel+0x1a8>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	2101      	movs	r1, #1
 8007214:	4618      	mov	r0, r3
 8007216:	f7ff fb4f 	bl	80068b8 <LL_ADC_GetOffsetChannel>
 800721a:	4603      	mov	r3, r0
 800721c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800721e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007220:	fa93 f3a3 	rbit	r3, r3
 8007224:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8007226:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007228:	fab3 f383 	clz	r3, r3
 800722c:	b2db      	uxtb	r3, r3
 800722e:	461a      	mov	r2, r3
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007238:	2b00      	cmp	r3, #0
 800723a:	d105      	bne.n	8007248 <HAL_ADC_ConfigChannel+0x1c0>
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	0e9b      	lsrs	r3, r3, #26
 8007242:	f003 031f 	and.w	r3, r3, #31
 8007246:	e00a      	b.n	800725e <HAL_ADC_ConfigChannel+0x1d6>
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800724e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007250:	fa93 f3a3 	rbit	r3, r3
 8007254:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8007256:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007258:	fab3 f383 	clz	r3, r3
 800725c:	b2db      	uxtb	r3, r3
 800725e:	429a      	cmp	r2, r3
 8007260:	d106      	bne.n	8007270 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	2200      	movs	r2, #0
 8007268:	2101      	movs	r1, #1
 800726a:	4618      	mov	r0, r3
 800726c:	f7ff fb38 	bl	80068e0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	2102      	movs	r1, #2
 8007276:	4618      	mov	r0, r3
 8007278:	f7ff fb1e 	bl	80068b8 <LL_ADC_GetOffsetChannel>
 800727c:	4603      	mov	r3, r0
 800727e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007282:	2b00      	cmp	r3, #0
 8007284:	d10a      	bne.n	800729c <HAL_ADC_ConfigChannel+0x214>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	2102      	movs	r1, #2
 800728c:	4618      	mov	r0, r3
 800728e:	f7ff fb13 	bl	80068b8 <LL_ADC_GetOffsetChannel>
 8007292:	4603      	mov	r3, r0
 8007294:	0e9b      	lsrs	r3, r3, #26
 8007296:	f003 021f 	and.w	r2, r3, #31
 800729a:	e010      	b.n	80072be <HAL_ADC_ConfigChannel+0x236>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	2102      	movs	r1, #2
 80072a2:	4618      	mov	r0, r3
 80072a4:	f7ff fb08 	bl	80068b8 <LL_ADC_GetOffsetChannel>
 80072a8:	4603      	mov	r3, r0
 80072aa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072ae:	fa93 f3a3 	rbit	r3, r3
 80072b2:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 80072b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072b6:	fab3 f383 	clz	r3, r3
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	461a      	mov	r2, r3
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d105      	bne.n	80072d6 <HAL_ADC_ConfigChannel+0x24e>
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	0e9b      	lsrs	r3, r3, #26
 80072d0:	f003 031f 	and.w	r3, r3, #31
 80072d4:	e00a      	b.n	80072ec <HAL_ADC_ConfigChannel+0x264>
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80072de:	fa93 f3a3 	rbit	r3, r3
 80072e2:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80072e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072e6:	fab3 f383 	clz	r3, r3
 80072ea:	b2db      	uxtb	r3, r3
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d106      	bne.n	80072fe <HAL_ADC_ConfigChannel+0x276>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	2200      	movs	r2, #0
 80072f6:	2102      	movs	r1, #2
 80072f8:	4618      	mov	r0, r3
 80072fa:	f7ff faf1 	bl	80068e0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	2103      	movs	r1, #3
 8007304:	4618      	mov	r0, r3
 8007306:	f7ff fad7 	bl	80068b8 <LL_ADC_GetOffsetChannel>
 800730a:	4603      	mov	r3, r0
 800730c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007310:	2b00      	cmp	r3, #0
 8007312:	d10a      	bne.n	800732a <HAL_ADC_ConfigChannel+0x2a2>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	2103      	movs	r1, #3
 800731a:	4618      	mov	r0, r3
 800731c:	f7ff facc 	bl	80068b8 <LL_ADC_GetOffsetChannel>
 8007320:	4603      	mov	r3, r0
 8007322:	0e9b      	lsrs	r3, r3, #26
 8007324:	f003 021f 	and.w	r2, r3, #31
 8007328:	e010      	b.n	800734c <HAL_ADC_ConfigChannel+0x2c4>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	2103      	movs	r1, #3
 8007330:	4618      	mov	r0, r3
 8007332:	f7ff fac1 	bl	80068b8 <LL_ADC_GetOffsetChannel>
 8007336:	4603      	mov	r3, r0
 8007338:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800733a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800733c:	fa93 f3a3 	rbit	r3, r3
 8007340:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8007342:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007344:	fab3 f383 	clz	r3, r3
 8007348:	b2db      	uxtb	r3, r3
 800734a:	461a      	mov	r2, r3
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007354:	2b00      	cmp	r3, #0
 8007356:	d105      	bne.n	8007364 <HAL_ADC_ConfigChannel+0x2dc>
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	0e9b      	lsrs	r3, r3, #26
 800735e:	f003 031f 	and.w	r3, r3, #31
 8007362:	e00a      	b.n	800737a <HAL_ADC_ConfigChannel+0x2f2>
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800736a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800736c:	fa93 f3a3 	rbit	r3, r3
 8007370:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8007372:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007374:	fab3 f383 	clz	r3, r3
 8007378:	b2db      	uxtb	r3, r3
 800737a:	429a      	cmp	r2, r3
 800737c:	d106      	bne.n	800738c <HAL_ADC_ConfigChannel+0x304>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	2200      	movs	r2, #0
 8007384:	2103      	movs	r1, #3
 8007386:	4618      	mov	r0, r3
 8007388:	f7ff faaa 	bl	80068e0 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4618      	mov	r0, r3
 8007392:	f7ff fbbb 	bl	8006b0c <LL_ADC_IsEnabled>
 8007396:	4603      	mov	r3, r0
 8007398:	2b00      	cmp	r3, #0
 800739a:	f040 819f 	bne.w	80076dc <HAL_ADC_ConfigChannel+0x654>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6818      	ldr	r0, [r3, #0]
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	6819      	ldr	r1, [r3, #0]
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	461a      	mov	r2, r3
 80073ac:	f7ff fb14 	bl	80069d8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	68db      	ldr	r3, [r3, #12]
 80073b4:	4aab      	ldr	r2, [pc, #684]	; (8007664 <HAL_ADC_ConfigChannel+0x5dc>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	f040 80fd 	bne.w	80075b6 <HAL_ADC_ConfigChannel+0x52e>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d10b      	bne.n	80073e4 <HAL_ADC_ConfigChannel+0x35c>
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	0e9b      	lsrs	r3, r3, #26
 80073d2:	3301      	adds	r3, #1
 80073d4:	f003 031f 	and.w	r3, r3, #31
 80073d8:	2b09      	cmp	r3, #9
 80073da:	bf94      	ite	ls
 80073dc:	2301      	movls	r3, #1
 80073de:	2300      	movhi	r3, #0
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	e012      	b.n	800740a <HAL_ADC_ConfigChannel+0x382>
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073ec:	fa93 f3a3 	rbit	r3, r3
 80073f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80073f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073f4:	fab3 f383 	clz	r3, r3
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	3301      	adds	r3, #1
 80073fc:	f003 031f 	and.w	r3, r3, #31
 8007400:	2b09      	cmp	r3, #9
 8007402:	bf94      	ite	ls
 8007404:	2301      	movls	r3, #1
 8007406:	2300      	movhi	r3, #0
 8007408:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800740a:	2b00      	cmp	r3, #0
 800740c:	d064      	beq.n	80074d8 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007416:	2b00      	cmp	r3, #0
 8007418:	d107      	bne.n	800742a <HAL_ADC_ConfigChannel+0x3a2>
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	0e9b      	lsrs	r3, r3, #26
 8007420:	3301      	adds	r3, #1
 8007422:	069b      	lsls	r3, r3, #26
 8007424:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007428:	e00e      	b.n	8007448 <HAL_ADC_ConfigChannel+0x3c0>
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007432:	fa93 f3a3 	rbit	r3, r3
 8007436:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8007438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800743a:	fab3 f383 	clz	r3, r3
 800743e:	b2db      	uxtb	r3, r3
 8007440:	3301      	adds	r3, #1
 8007442:	069b      	lsls	r3, r3, #26
 8007444:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007450:	2b00      	cmp	r3, #0
 8007452:	d109      	bne.n	8007468 <HAL_ADC_ConfigChannel+0x3e0>
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	0e9b      	lsrs	r3, r3, #26
 800745a:	3301      	adds	r3, #1
 800745c:	f003 031f 	and.w	r3, r3, #31
 8007460:	2101      	movs	r1, #1
 8007462:	fa01 f303 	lsl.w	r3, r1, r3
 8007466:	e010      	b.n	800748a <HAL_ADC_ConfigChannel+0x402>
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800746e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007470:	fa93 f3a3 	rbit	r3, r3
 8007474:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8007476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007478:	fab3 f383 	clz	r3, r3
 800747c:	b2db      	uxtb	r3, r3
 800747e:	3301      	adds	r3, #1
 8007480:	f003 031f 	and.w	r3, r3, #31
 8007484:	2101      	movs	r1, #1
 8007486:	fa01 f303 	lsl.w	r3, r1, r3
 800748a:	ea42 0103 	orr.w	r1, r2, r3
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007496:	2b00      	cmp	r3, #0
 8007498:	d10a      	bne.n	80074b0 <HAL_ADC_ConfigChannel+0x428>
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	0e9b      	lsrs	r3, r3, #26
 80074a0:	3301      	adds	r3, #1
 80074a2:	f003 021f 	and.w	r2, r3, #31
 80074a6:	4613      	mov	r3, r2
 80074a8:	005b      	lsls	r3, r3, #1
 80074aa:	4413      	add	r3, r2
 80074ac:	051b      	lsls	r3, r3, #20
 80074ae:	e011      	b.n	80074d4 <HAL_ADC_ConfigChannel+0x44c>
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b8:	fa93 f3a3 	rbit	r3, r3
 80074bc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80074be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c0:	fab3 f383 	clz	r3, r3
 80074c4:	b2db      	uxtb	r3, r3
 80074c6:	3301      	adds	r3, #1
 80074c8:	f003 021f 	and.w	r2, r3, #31
 80074cc:	4613      	mov	r3, r2
 80074ce:	005b      	lsls	r3, r3, #1
 80074d0:	4413      	add	r3, r2
 80074d2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80074d4:	430b      	orrs	r3, r1
 80074d6:	e069      	b.n	80075ac <HAL_ADC_ConfigChannel+0x524>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d107      	bne.n	80074f4 <HAL_ADC_ConfigChannel+0x46c>
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	0e9b      	lsrs	r3, r3, #26
 80074ea:	3301      	adds	r3, #1
 80074ec:	069b      	lsls	r3, r3, #26
 80074ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80074f2:	e00e      	b.n	8007512 <HAL_ADC_ConfigChannel+0x48a>
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074fa:	6a3b      	ldr	r3, [r7, #32]
 80074fc:	fa93 f3a3 	rbit	r3, r3
 8007500:	61fb      	str	r3, [r7, #28]
  return result;
 8007502:	69fb      	ldr	r3, [r7, #28]
 8007504:	fab3 f383 	clz	r3, r3
 8007508:	b2db      	uxtb	r3, r3
 800750a:	3301      	adds	r3, #1
 800750c:	069b      	lsls	r3, r3, #26
 800750e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800751a:	2b00      	cmp	r3, #0
 800751c:	d109      	bne.n	8007532 <HAL_ADC_ConfigChannel+0x4aa>
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	0e9b      	lsrs	r3, r3, #26
 8007524:	3301      	adds	r3, #1
 8007526:	f003 031f 	and.w	r3, r3, #31
 800752a:	2101      	movs	r1, #1
 800752c:	fa01 f303 	lsl.w	r3, r1, r3
 8007530:	e010      	b.n	8007554 <HAL_ADC_ConfigChannel+0x4cc>
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007538:	69bb      	ldr	r3, [r7, #24]
 800753a:	fa93 f3a3 	rbit	r3, r3
 800753e:	617b      	str	r3, [r7, #20]
  return result;
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	fab3 f383 	clz	r3, r3
 8007546:	b2db      	uxtb	r3, r3
 8007548:	3301      	adds	r3, #1
 800754a:	f003 031f 	and.w	r3, r3, #31
 800754e:	2101      	movs	r1, #1
 8007550:	fa01 f303 	lsl.w	r3, r1, r3
 8007554:	ea42 0103 	orr.w	r1, r2, r3
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007560:	2b00      	cmp	r3, #0
 8007562:	d10d      	bne.n	8007580 <HAL_ADC_ConfigChannel+0x4f8>
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	0e9b      	lsrs	r3, r3, #26
 800756a:	3301      	adds	r3, #1
 800756c:	f003 021f 	and.w	r2, r3, #31
 8007570:	4613      	mov	r3, r2
 8007572:	005b      	lsls	r3, r3, #1
 8007574:	4413      	add	r3, r2
 8007576:	3b1e      	subs	r3, #30
 8007578:	051b      	lsls	r3, r3, #20
 800757a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800757e:	e014      	b.n	80075aa <HAL_ADC_ConfigChannel+0x522>
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	fa93 f3a3 	rbit	r3, r3
 800758c:	60fb      	str	r3, [r7, #12]
  return result;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	fab3 f383 	clz	r3, r3
 8007594:	b2db      	uxtb	r3, r3
 8007596:	3301      	adds	r3, #1
 8007598:	f003 021f 	and.w	r2, r3, #31
 800759c:	4613      	mov	r3, r2
 800759e:	005b      	lsls	r3, r3, #1
 80075a0:	4413      	add	r3, r2
 80075a2:	3b1e      	subs	r3, #30
 80075a4:	051b      	lsls	r3, r3, #20
 80075a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80075aa:	430b      	orrs	r3, r1
 80075ac:	683a      	ldr	r2, [r7, #0]
 80075ae:	6892      	ldr	r2, [r2, #8]
 80075b0:	4619      	mov	r1, r3
 80075b2:	f7ff f9e9 	bl	8006988 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	681a      	ldr	r2, [r3, #0]
 80075ba:	4b2b      	ldr	r3, [pc, #172]	; (8007668 <HAL_ADC_ConfigChannel+0x5e0>)
 80075bc:	4013      	ands	r3, r2
 80075be:	2b00      	cmp	r3, #0
 80075c0:	f000 808c 	beq.w	80076dc <HAL_ADC_ConfigChannel+0x654>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80075c4:	4829      	ldr	r0, [pc, #164]	; (800766c <HAL_ADC_ConfigChannel+0x5e4>)
 80075c6:	f7ff f947 	bl	8006858 <LL_ADC_GetCommonPathInternalCh>
 80075ca:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80075ce:	4828      	ldr	r0, [pc, #160]	; (8007670 <HAL_ADC_ConfigChannel+0x5e8>)
 80075d0:	f7ff fa9c 	bl	8006b0c <LL_ADC_IsEnabled>
 80075d4:	4603      	mov	r3, r0
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d16d      	bne.n	80076b6 <HAL_ADC_ConfigChannel+0x62e>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a25      	ldr	r2, [pc, #148]	; (8007674 <HAL_ADC_ConfigChannel+0x5ec>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d126      	bne.n	8007632 <HAL_ADC_ConfigChannel+0x5aa>
 80075e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80075e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d120      	bne.n	8007632 <HAL_ADC_ConfigChannel+0x5aa>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a1e      	ldr	r2, [pc, #120]	; (8007670 <HAL_ADC_ConfigChannel+0x5e8>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d170      	bne.n	80076dc <HAL_ADC_ConfigChannel+0x654>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80075fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80075fe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007602:	4619      	mov	r1, r3
 8007604:	4819      	ldr	r0, [pc, #100]	; (800766c <HAL_ADC_ConfigChannel+0x5e4>)
 8007606:	f7ff f914 	bl	8006832 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800760a:	4b1b      	ldr	r3, [pc, #108]	; (8007678 <HAL_ADC_ConfigChannel+0x5f0>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	099b      	lsrs	r3, r3, #6
 8007610:	4a1a      	ldr	r2, [pc, #104]	; (800767c <HAL_ADC_ConfigChannel+0x5f4>)
 8007612:	fba2 2303 	umull	r2, r3, r2, r3
 8007616:	099a      	lsrs	r2, r3, #6
 8007618:	4613      	mov	r3, r2
 800761a:	005b      	lsls	r3, r3, #1
 800761c:	4413      	add	r3, r2
 800761e:	009b      	lsls	r3, r3, #2
 8007620:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8007622:	e002      	b.n	800762a <HAL_ADC_ConfigChannel+0x5a2>
              {
                wait_loop_index--;
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	3b01      	subs	r3, #1
 8007628:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d1f9      	bne.n	8007624 <HAL_ADC_ConfigChannel+0x59c>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007630:	e054      	b.n	80076dc <HAL_ADC_ConfigChannel+0x654>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a12      	ldr	r2, [pc, #72]	; (8007680 <HAL_ADC_ConfigChannel+0x5f8>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d123      	bne.n	8007684 <HAL_ADC_ConfigChannel+0x5fc>
 800763c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007640:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007644:	2b00      	cmp	r3, #0
 8007646:	d11d      	bne.n	8007684 <HAL_ADC_ConfigChannel+0x5fc>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a08      	ldr	r2, [pc, #32]	; (8007670 <HAL_ADC_ConfigChannel+0x5e8>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d144      	bne.n	80076dc <HAL_ADC_ConfigChannel+0x654>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8007652:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007656:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800765a:	4619      	mov	r1, r3
 800765c:	4803      	ldr	r0, [pc, #12]	; (800766c <HAL_ADC_ConfigChannel+0x5e4>)
 800765e:	f7ff f8e8 	bl	8006832 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007662:	e03b      	b.n	80076dc <HAL_ADC_ConfigChannel+0x654>
 8007664:	407f0000 	.word	0x407f0000
 8007668:	80080000 	.word	0x80080000
 800766c:	50040300 	.word	0x50040300
 8007670:	50040000 	.word	0x50040000
 8007674:	c7520000 	.word	0xc7520000
 8007678:	20000078 	.word	0x20000078
 800767c:	053e2d63 	.word	0x053e2d63
 8007680:	cb840000 	.word	0xcb840000
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a19      	ldr	r2, [pc, #100]	; (80076f0 <HAL_ADC_ConfigChannel+0x668>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d126      	bne.n	80076dc <HAL_ADC_ConfigChannel+0x654>
 800768e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007692:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007696:	2b00      	cmp	r3, #0
 8007698:	d120      	bne.n	80076dc <HAL_ADC_ConfigChannel+0x654>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a15      	ldr	r2, [pc, #84]	; (80076f4 <HAL_ADC_ConfigChannel+0x66c>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d11b      	bne.n	80076dc <HAL_ADC_ConfigChannel+0x654>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80076a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80076a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80076ac:	4619      	mov	r1, r3
 80076ae:	4812      	ldr	r0, [pc, #72]	; (80076f8 <HAL_ADC_ConfigChannel+0x670>)
 80076b0:	f7ff f8bf 	bl	8006832 <LL_ADC_SetCommonPathInternalCh>
 80076b4:	e012      	b.n	80076dc <HAL_ADC_ConfigChannel+0x654>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076ba:	f043 0220 	orr.w	r2, r3, #32
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80076c2:	2301      	movs	r3, #1
 80076c4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80076c8:	e008      	b.n	80076dc <HAL_ADC_ConfigChannel+0x654>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076ce:	f043 0220 	orr.w	r2, r3, #32
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80076d6:	2301      	movs	r3, #1
 80076d8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2200      	movs	r2, #0
 80076e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80076e4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3798      	adds	r7, #152	; 0x98
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}
 80076f0:	80000001 	.word	0x80000001
 80076f4:	50040000 	.word	0x50040000
 80076f8:	50040300 	.word	0x50040300

080076fc <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b088      	sub	sp, #32
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8007706:	2300      	movs	r3, #0
 8007708:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4618      	mov	r0, r3
 8007714:	f7ff fa48 	bl	8006ba8 <LL_ADC_REG_IsConversionOngoing>
 8007718:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4618      	mov	r0, r3
 8007720:	f7ff fa69 	bl	8006bf6 <LL_ADC_INJ_IsConversionOngoing>
 8007724:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d103      	bne.n	8007734 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2b00      	cmp	r3, #0
 8007730:	f000 8090 	beq.w	8007854 <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	68db      	ldr	r3, [r3, #12]
 800773a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800773e:	2b00      	cmp	r3, #0
 8007740:	d02a      	beq.n	8007798 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	7e5b      	ldrb	r3, [r3, #25]
 8007746:	2b01      	cmp	r3, #1
 8007748:	d126      	bne.n	8007798 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	7e1b      	ldrb	r3, [r3, #24]
 800774e:	2b01      	cmp	r3, #1
 8007750:	d122      	bne.n	8007798 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8007752:	2301      	movs	r3, #1
 8007754:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8007756:	e014      	b.n	8007782 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8007758:	69fb      	ldr	r3, [r7, #28]
 800775a:	4a41      	ldr	r2, [pc, #260]	; (8007860 <ADC_ConversionStop+0x164>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d90d      	bls.n	800777c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007764:	f043 0210 	orr.w	r2, r3, #16
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007770:	f043 0201 	orr.w	r2, r3, #1
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8007778:	2301      	movs	r3, #1
 800777a:	e06c      	b.n	8007856 <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800777c:	69fb      	ldr	r3, [r7, #28]
 800777e:	3301      	adds	r3, #1
 8007780:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800778c:	2b40      	cmp	r3, #64	; 0x40
 800778e:	d1e3      	bne.n	8007758 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	2240      	movs	r2, #64	; 0x40
 8007796:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8007798:	69bb      	ldr	r3, [r7, #24]
 800779a:	2b02      	cmp	r3, #2
 800779c:	d014      	beq.n	80077c8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4618      	mov	r0, r3
 80077a4:	f7ff fa00 	bl	8006ba8 <LL_ADC_REG_IsConversionOngoing>
 80077a8:	4603      	mov	r3, r0
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d00c      	beq.n	80077c8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4618      	mov	r0, r3
 80077b4:	f7ff f9bd 	bl	8006b32 <LL_ADC_IsDisableOngoing>
 80077b8:	4603      	mov	r3, r0
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d104      	bne.n	80077c8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4618      	mov	r0, r3
 80077c4:	f7ff f9dc 	bl	8006b80 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80077c8:	69bb      	ldr	r3, [r7, #24]
 80077ca:	2b01      	cmp	r3, #1
 80077cc:	d014      	beq.n	80077f8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4618      	mov	r0, r3
 80077d4:	f7ff fa0f 	bl	8006bf6 <LL_ADC_INJ_IsConversionOngoing>
 80077d8:	4603      	mov	r3, r0
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d00c      	beq.n	80077f8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4618      	mov	r0, r3
 80077e4:	f7ff f9a5 	bl	8006b32 <LL_ADC_IsDisableOngoing>
 80077e8:	4603      	mov	r3, r0
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d104      	bne.n	80077f8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4618      	mov	r0, r3
 80077f4:	f7ff f9eb 	bl	8006bce <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80077f8:	69bb      	ldr	r3, [r7, #24]
 80077fa:	2b02      	cmp	r3, #2
 80077fc:	d004      	beq.n	8007808 <ADC_ConversionStop+0x10c>
 80077fe:	2b03      	cmp	r3, #3
 8007800:	d105      	bne.n	800780e <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8007802:	230c      	movs	r3, #12
 8007804:	617b      	str	r3, [r7, #20]
        break;
 8007806:	e005      	b.n	8007814 <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8007808:	2308      	movs	r3, #8
 800780a:	617b      	str	r3, [r7, #20]
        break;
 800780c:	e002      	b.n	8007814 <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800780e:	2304      	movs	r3, #4
 8007810:	617b      	str	r3, [r7, #20]
        break;
 8007812:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8007814:	f7fe ffc8 	bl	80067a8 <HAL_GetTick>
 8007818:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800781a:	e014      	b.n	8007846 <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800781c:	f7fe ffc4 	bl	80067a8 <HAL_GetTick>
 8007820:	4602      	mov	r2, r0
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	1ad3      	subs	r3, r2, r3
 8007826:	2b05      	cmp	r3, #5
 8007828:	d90d      	bls.n	8007846 <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800782e:	f043 0210 	orr.w	r2, r3, #16
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800783a:	f043 0201 	orr.w	r2, r3, #1
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8007842:	2301      	movs	r3, #1
 8007844:	e007      	b.n	8007856 <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	689a      	ldr	r2, [r3, #8]
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	4013      	ands	r3, r2
 8007850:	2b00      	cmp	r3, #0
 8007852:	d1e3      	bne.n	800781c <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8007854:	2300      	movs	r3, #0
}
 8007856:	4618      	mov	r0, r3
 8007858:	3720      	adds	r7, #32
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}
 800785e:	bf00      	nop
 8007860:	a33fffff 	.word	0xa33fffff

08007864 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b084      	sub	sp, #16
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4618      	mov	r0, r3
 8007872:	f7ff f94b 	bl	8006b0c <LL_ADC_IsEnabled>
 8007876:	4603      	mov	r3, r0
 8007878:	2b00      	cmp	r3, #0
 800787a:	d146      	bne.n	800790a <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	689a      	ldr	r2, [r3, #8]
 8007882:	4b24      	ldr	r3, [pc, #144]	; (8007914 <ADC_Enable+0xb0>)
 8007884:	4013      	ands	r3, r2
 8007886:	2b00      	cmp	r3, #0
 8007888:	d00d      	beq.n	80078a6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800788e:	f043 0210 	orr.w	r2, r3, #16
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800789a:	f043 0201 	orr.w	r2, r3, #1
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80078a2:	2301      	movs	r3, #1
 80078a4:	e032      	b.n	800790c <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4618      	mov	r0, r3
 80078ac:	f7ff f906 	bl	8006abc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80078b0:	f7fe ff7a 	bl	80067a8 <HAL_GetTick>
 80078b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80078b6:	e021      	b.n	80078fc <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4618      	mov	r0, r3
 80078be:	f7ff f925 	bl	8006b0c <LL_ADC_IsEnabled>
 80078c2:	4603      	mov	r3, r0
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d104      	bne.n	80078d2 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4618      	mov	r0, r3
 80078ce:	f7ff f8f5 	bl	8006abc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80078d2:	f7fe ff69 	bl	80067a8 <HAL_GetTick>
 80078d6:	4602      	mov	r2, r0
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	1ad3      	subs	r3, r2, r3
 80078dc:	2b02      	cmp	r3, #2
 80078de:	d90d      	bls.n	80078fc <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078e4:	f043 0210 	orr.w	r2, r3, #16
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078f0:	f043 0201 	orr.w	r2, r3, #1
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80078f8:	2301      	movs	r3, #1
 80078fa:	e007      	b.n	800790c <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f003 0301 	and.w	r3, r3, #1
 8007906:	2b01      	cmp	r3, #1
 8007908:	d1d6      	bne.n	80078b8 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800790a:	2300      	movs	r3, #0
}
 800790c:	4618      	mov	r0, r3
 800790e:	3710      	adds	r7, #16
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}
 8007914:	8000003f 	.word	0x8000003f

08007918 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b084      	sub	sp, #16
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4618      	mov	r0, r3
 8007926:	f7ff f904 	bl	8006b32 <LL_ADC_IsDisableOngoing>
 800792a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4618      	mov	r0, r3
 8007932:	f7ff f8eb 	bl	8006b0c <LL_ADC_IsEnabled>
 8007936:	4603      	mov	r3, r0
 8007938:	2b00      	cmp	r3, #0
 800793a:	d040      	beq.n	80079be <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d13d      	bne.n	80079be <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	f003 030d 	and.w	r3, r3, #13
 800794c:	2b01      	cmp	r3, #1
 800794e:	d10c      	bne.n	800796a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4618      	mov	r0, r3
 8007956:	f7ff f8c5 	bl	8006ae4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	2203      	movs	r2, #3
 8007960:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007962:	f7fe ff21 	bl	80067a8 <HAL_GetTick>
 8007966:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007968:	e022      	b.n	80079b0 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800796e:	f043 0210 	orr.w	r2, r3, #16
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800797a:	f043 0201 	orr.w	r2, r3, #1
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8007982:	2301      	movs	r3, #1
 8007984:	e01c      	b.n	80079c0 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007986:	f7fe ff0f 	bl	80067a8 <HAL_GetTick>
 800798a:	4602      	mov	r2, r0
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	1ad3      	subs	r3, r2, r3
 8007990:	2b02      	cmp	r3, #2
 8007992:	d90d      	bls.n	80079b0 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007998:	f043 0210 	orr.w	r2, r3, #16
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079a4:	f043 0201 	orr.w	r2, r3, #1
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80079ac:	2301      	movs	r3, #1
 80079ae:	e007      	b.n	80079c0 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	689b      	ldr	r3, [r3, #8]
 80079b6:	f003 0301 	and.w	r3, r3, #1
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d1e3      	bne.n	8007986 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80079be:	2300      	movs	r3, #0
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3710      	adds	r7, #16
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079d4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079da:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d14b      	bne.n	8007a7a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079e6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f003 0308 	and.w	r3, r3, #8
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d021      	beq.n	8007a40 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4618      	mov	r0, r3
 8007a02:	f7fe ff85 	bl	8006910 <LL_ADC_REG_IsTriggerSourceSWStart>
 8007a06:	4603      	mov	r3, r0
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d032      	beq.n	8007a72 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	68db      	ldr	r3, [r3, #12]
 8007a12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d12b      	bne.n	8007a72 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d11f      	bne.n	8007a72 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a36:	f043 0201 	orr.w	r2, r3, #1
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	655a      	str	r2, [r3, #84]	; 0x54
 8007a3e:	e018      	b.n	8007a72 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	68db      	ldr	r3, [r3, #12]
 8007a46:	f003 0302 	and.w	r3, r3, #2
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d111      	bne.n	8007a72 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d105      	bne.n	8007a72 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a6a:	f043 0201 	orr.w	r2, r3, #1
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007a72:	68f8      	ldr	r0, [r7, #12]
 8007a74:	f7f9 fe58 	bl	8001728 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007a78:	e00e      	b.n	8007a98 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a7e:	f003 0310 	and.w	r3, r3, #16
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d003      	beq.n	8007a8e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8007a86:	68f8      	ldr	r0, [r7, #12]
 8007a88:	f7ff faf3 	bl	8007072 <HAL_ADC_ErrorCallback>
}
 8007a8c:	e004      	b.n	8007a98 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	4798      	blx	r3
}
 8007a98:	bf00      	nop
 8007a9a:	3710      	adds	r7, #16
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b084      	sub	sp, #16
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aac:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007aae:	68f8      	ldr	r0, [r7, #12]
 8007ab0:	f7f9 fe52 	bl	8001758 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007ab4:	bf00      	nop
 8007ab6:	3710      	adds	r7, #16
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}

08007abc <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b084      	sub	sp, #16
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ac8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ace:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ada:	f043 0204 	orr.w	r2, r3, #4
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007ae2:	68f8      	ldr	r0, [r7, #12]
 8007ae4:	f7ff fac5 	bl	8007072 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007ae8:	bf00      	nop
 8007aea:	3710      	adds	r7, #16
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <LL_EXTI_EnableIT_0_31>:
{
 8007af0:	b480      	push	{r7}
 8007af2:	b083      	sub	sp, #12
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8007af8:	4b06      	ldr	r3, [pc, #24]	; (8007b14 <LL_EXTI_EnableIT_0_31+0x24>)
 8007afa:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007afe:	4905      	ldr	r1, [pc, #20]	; (8007b14 <LL_EXTI_EnableIT_0_31+0x24>)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	4313      	orrs	r3, r2
 8007b04:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8007b08:	bf00      	nop
 8007b0a:	370c      	adds	r7, #12
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr
 8007b14:	58000800 	.word	0x58000800

08007b18 <LL_EXTI_DisableIT_0_31>:
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b083      	sub	sp, #12
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8007b20:	4b07      	ldr	r3, [pc, #28]	; (8007b40 <LL_EXTI_DisableIT_0_31+0x28>)
 8007b22:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	43db      	mvns	r3, r3
 8007b2a:	4905      	ldr	r1, [pc, #20]	; (8007b40 <LL_EXTI_DisableIT_0_31+0x28>)
 8007b2c:	4013      	ands	r3, r2
 8007b2e:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8007b32:	bf00      	nop
 8007b34:	370c      	adds	r7, #12
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr
 8007b3e:	bf00      	nop
 8007b40:	58000800 	.word	0x58000800

08007b44 <LL_EXTI_EnableEvent_0_31>:
{
 8007b44:	b480      	push	{r7}
 8007b46:	b083      	sub	sp, #12
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8007b4c:	4b06      	ldr	r3, [pc, #24]	; (8007b68 <LL_EXTI_EnableEvent_0_31+0x24>)
 8007b4e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007b52:	4905      	ldr	r1, [pc, #20]	; (8007b68 <LL_EXTI_EnableEvent_0_31+0x24>)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	4313      	orrs	r3, r2
 8007b58:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
}
 8007b5c:	bf00      	nop
 8007b5e:	370c      	adds	r7, #12
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr
 8007b68:	58000800 	.word	0x58000800

08007b6c <LL_EXTI_DisableEvent_0_31>:
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b083      	sub	sp, #12
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8007b74:	4b07      	ldr	r3, [pc, #28]	; (8007b94 <LL_EXTI_DisableEvent_0_31+0x28>)
 8007b76:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	43db      	mvns	r3, r3
 8007b7e:	4905      	ldr	r1, [pc, #20]	; (8007b94 <LL_EXTI_DisableEvent_0_31+0x28>)
 8007b80:	4013      	ands	r3, r2
 8007b82:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
}
 8007b86:	bf00      	nop
 8007b88:	370c      	adds	r7, #12
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b90:	4770      	bx	lr
 8007b92:	bf00      	nop
 8007b94:	58000800 	.word	0x58000800

08007b98 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b083      	sub	sp, #12
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8007ba0:	4b05      	ldr	r3, [pc, #20]	; (8007bb8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8007ba2:	681a      	ldr	r2, [r3, #0]
 8007ba4:	4904      	ldr	r1, [pc, #16]	; (8007bb8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	600b      	str	r3, [r1, #0]
}
 8007bac:	bf00      	nop
 8007bae:	370c      	adds	r7, #12
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr
 8007bb8:	58000800 	.word	0x58000800

08007bbc <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b083      	sub	sp, #12
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8007bc4:	4b06      	ldr	r3, [pc, #24]	; (8007be0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8007bc6:	681a      	ldr	r2, [r3, #0]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	43db      	mvns	r3, r3
 8007bcc:	4904      	ldr	r1, [pc, #16]	; (8007be0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8007bce:	4013      	ands	r3, r2
 8007bd0:	600b      	str	r3, [r1, #0]

}
 8007bd2:	bf00      	nop
 8007bd4:	370c      	adds	r7, #12
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bdc:	4770      	bx	lr
 8007bde:	bf00      	nop
 8007be0:	58000800 	.word	0x58000800

08007be4 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b083      	sub	sp, #12
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8007bec:	4b05      	ldr	r3, [pc, #20]	; (8007c04 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8007bee:	685a      	ldr	r2, [r3, #4]
 8007bf0:	4904      	ldr	r1, [pc, #16]	; (8007c04 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	604b      	str	r3, [r1, #4]
}
 8007bf8:	bf00      	nop
 8007bfa:	370c      	adds	r7, #12
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr
 8007c04:	58000800 	.word	0x58000800

08007c08 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b083      	sub	sp, #12
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8007c10:	4b06      	ldr	r3, [pc, #24]	; (8007c2c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8007c12:	685a      	ldr	r2, [r3, #4]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	43db      	mvns	r3, r3
 8007c18:	4904      	ldr	r1, [pc, #16]	; (8007c2c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8007c1a:	4013      	ands	r3, r2
 8007c1c:	604b      	str	r3, [r1, #4]
}
 8007c1e:	bf00      	nop
 8007c20:	370c      	adds	r7, #12
 8007c22:	46bd      	mov	sp, r7
 8007c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c28:	4770      	bx	lr
 8007c2a:	bf00      	nop
 8007c2c:	58000800 	.word	0x58000800

08007c30 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b083      	sub	sp, #12
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8007c38:	4b07      	ldr	r3, [pc, #28]	; (8007c58 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8007c3a:	68da      	ldr	r2, [r3, #12]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	4013      	ands	r3, r2
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d101      	bne.n	8007c4a <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8007c46:	2301      	movs	r3, #1
 8007c48:	e000      	b.n	8007c4c <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8007c4a:	2300      	movs	r3, #0
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	370c      	adds	r7, #12
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr
 8007c58:	58000800 	.word	0x58000800

08007c5c <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b083      	sub	sp, #12
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8007c64:	4a04      	ldr	r2, [pc, #16]	; (8007c78 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	60d3      	str	r3, [r2, #12]
}
 8007c6a:	bf00      	nop
 8007c6c:	370c      	adds	r7, #12
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr
 8007c76:	bf00      	nop
 8007c78:	58000800 	.word	0x58000800

08007c7c <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b088      	sub	sp, #32
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8007c84:	2300      	movs	r3, #0
 8007c86:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d102      	bne.n	8007c98 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8007c92:	2301      	movs	r3, #1
 8007c94:	77fb      	strb	r3, [r7, #31]
 8007c96:	e0c4      	b.n	8007e22 <HAL_COMP_Init+0x1a6>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ca2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ca6:	d102      	bne.n	8007cae <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8007ca8:	2301      	movs	r3, #1
 8007caa:	77fb      	strb	r3, [r7, #31]
 8007cac:	e0b9      	b.n	8007e22 <HAL_COMP_Init+0x1a6>
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007cb4:	b2db      	uxtb	r3, r3
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d109      	bne.n	8007cce <HAL_COMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	629a      	str	r2, [r3, #40]	; 0x28
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f7f9 fda5 	bl	8001818 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007cd8:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	691a      	ldr	r2, [r3, #16]
               | hcomp->Init.InputPlus
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	68db      	ldr	r3, [r3, #12]
 8007ce2:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	69db      	ldr	r3, [r3, #28]
 8007ce8:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	695b      	ldr	r3, [r3, #20]
 8007cee:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	699b      	ldr	r3, [r3, #24]
 8007cf4:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (  hcomp->Init.InputMinus
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	681a      	ldr	r2, [r3, #0]
 8007d04:	4b49      	ldr	r3, [pc, #292]	; (8007e2c <HAL_COMP_Init+0x1b0>)
 8007d06:	4013      	ands	r3, r2
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	6812      	ldr	r2, [r2, #0]
 8007d0c:	6979      	ldr	r1, [r7, #20]
 8007d0e:	430b      	orrs	r3, r1
 8007d10:	6013      	str	r3, [r2, #0]

    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d1a:	d106      	bne.n	8007d2a <HAL_COMP_Init+0xae>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8007d1c:	4b44      	ldr	r3, [pc, #272]	; (8007e30 <HAL_COMP_Init+0x1b4>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a43      	ldr	r2, [pc, #268]	; (8007e30 <HAL_COMP_Init+0x1b4>)
 8007d22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007d26:	6013      	str	r3, [r2, #0]
 8007d28:	e005      	b.n	8007d36 <HAL_COMP_Init+0xba>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8007d2a:	4b41      	ldr	r3, [pc, #260]	; (8007e30 <HAL_COMP_Init+0x1b4>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a40      	ldr	r2, [pc, #256]	; (8007e30 <HAL_COMP_Init+0x1b4>)
 8007d30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007d34:	6013      	str	r3, [r2, #0]
    }

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d015      	beq.n	8007d70 <HAL_COMP_Init+0xf4>
 8007d44:	69bb      	ldr	r3, [r7, #24]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d112      	bne.n	8007d70 <HAL_COMP_Init+0xf4>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8007d4a:	4b3a      	ldr	r3, [pc, #232]	; (8007e34 <HAL_COMP_Init+0x1b8>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	099b      	lsrs	r3, r3, #6
 8007d50:	4a39      	ldr	r2, [pc, #228]	; (8007e38 <HAL_COMP_Init+0x1bc>)
 8007d52:	fba2 2303 	umull	r2, r3, r2, r3
 8007d56:	099a      	lsrs	r2, r3, #6
 8007d58:	4613      	mov	r3, r2
 8007d5a:	009b      	lsls	r3, r3, #2
 8007d5c:	4413      	add	r3, r2
 8007d5e:	009b      	lsls	r3, r3, #2
 8007d60:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8007d62:	e002      	b.n	8007d6a <HAL_COMP_Init+0xee>
      {
        wait_loop_index--;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	3b01      	subs	r3, #1
 8007d68:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d1f9      	bne.n	8007d64 <HAL_COMP_Init+0xe8>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a31      	ldr	r2, [pc, #196]	; (8007e3c <HAL_COMP_Init+0x1c0>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d102      	bne.n	8007d80 <HAL_COMP_Init+0x104>
 8007d7a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007d7e:	e001      	b.n	8007d84 <HAL_COMP_Init+0x108>
 8007d80:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007d84:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6a1b      	ldr	r3, [r3, #32]
 8007d8a:	f003 0303 	and.w	r3, r3, #3
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d037      	beq.n	8007e02 <HAL_COMP_Init+0x186>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6a1b      	ldr	r3, [r3, #32]
 8007d96:	f003 0310 	and.w	r3, r3, #16
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d003      	beq.n	8007da6 <HAL_COMP_Init+0x12a>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8007d9e:	6938      	ldr	r0, [r7, #16]
 8007da0:	f7ff fefa 	bl	8007b98 <LL_EXTI_EnableRisingTrig_0_31>
 8007da4:	e002      	b.n	8007dac <HAL_COMP_Init+0x130>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8007da6:	6938      	ldr	r0, [r7, #16]
 8007da8:	f7ff ff08 	bl	8007bbc <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6a1b      	ldr	r3, [r3, #32]
 8007db0:	f003 0320 	and.w	r3, r3, #32
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d003      	beq.n	8007dc0 <HAL_COMP_Init+0x144>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8007db8:	6938      	ldr	r0, [r7, #16]
 8007dba:	f7ff ff13 	bl	8007be4 <LL_EXTI_EnableFallingTrig_0_31>
 8007dbe:	e002      	b.n	8007dc6 <HAL_COMP_Init+0x14a>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8007dc0:	6938      	ldr	r0, [r7, #16]
 8007dc2:	f7ff ff21 	bl	8007c08 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearFlag_0_31(exti_line);
 8007dc6:	6938      	ldr	r0, [r7, #16]
 8007dc8:	f7ff ff48 	bl	8007c5c <LL_EXTI_ClearFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6a1b      	ldr	r3, [r3, #32]
 8007dd0:	f003 0302 	and.w	r3, r3, #2
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d003      	beq.n	8007de0 <HAL_COMP_Init+0x164>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 8007dd8:	6938      	ldr	r0, [r7, #16]
 8007dda:	f7ff feb3 	bl	8007b44 <LL_EXTI_EnableEvent_0_31>
 8007dde:	e002      	b.n	8007de6 <HAL_COMP_Init+0x16a>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8007de0:	6938      	ldr	r0, [r7, #16]
 8007de2:	f7ff fec3 	bl	8007b6c <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6a1b      	ldr	r3, [r3, #32]
 8007dea:	f003 0301 	and.w	r3, r3, #1
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d003      	beq.n	8007dfa <HAL_COMP_Init+0x17e>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 8007df2:	6938      	ldr	r0, [r7, #16]
 8007df4:	f7ff fe7c 	bl	8007af0 <LL_EXTI_EnableIT_0_31>
 8007df8:	e009      	b.n	8007e0e <HAL_COMP_Init+0x192>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8007dfa:	6938      	ldr	r0, [r7, #16]
 8007dfc:	f7ff fe8c 	bl	8007b18 <LL_EXTI_DisableIT_0_31>
 8007e00:	e005      	b.n	8007e0e <HAL_COMP_Init+0x192>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 8007e02:	6938      	ldr	r0, [r7, #16]
 8007e04:	f7ff feb2 	bl	8007b6c <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 8007e08:	6938      	ldr	r0, [r7, #16]
 8007e0a:	f7ff fe85 	bl	8007b18 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d103      	bne.n	8007e22 <HAL_COMP_Init+0x1a6>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2201      	movs	r2, #1
 8007e1e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8007e22:	7ffb      	ldrb	r3, [r7, #31]
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3720      	adds	r7, #32
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}
 8007e2c:	f9207c03 	.word	0xf9207c03
 8007e30:	40010204 	.word	0x40010204
 8007e34:	20000078 	.word	0x20000078
 8007e38:	053e2d63 	.word	0x053e2d63
 8007e3c:	40010200 	.word	0x40010200

08007e40 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b085      	sub	sp, #20
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d102      	bne.n	8007e5c <HAL_COMP_Start+0x1c>
  {
    status = HAL_ERROR;
 8007e56:	2301      	movs	r3, #1
 8007e58:	73fb      	strb	r3, [r7, #15]
 8007e5a:	e02f      	b.n	8007ebc <HAL_COMP_Start+0x7c>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e6a:	d102      	bne.n	8007e72 <HAL_COMP_Start+0x32>
  {
    status = HAL_ERROR;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	73fb      	strb	r3, [r7, #15]
 8007e70:	e024      	b.n	8007ebc <HAL_COMP_Start+0x7c>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007e78:	b2db      	uxtb	r3, r3
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	d11c      	bne.n	8007eb8 <HAL_COMP_Start+0x78>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	681a      	ldr	r2, [r3, #0]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f042 0201 	orr.w	r2, r2, #1
 8007e8c:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2202      	movs	r2, #2
 8007e92:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8007e96:	4b0d      	ldr	r3, [pc, #52]	; (8007ecc <HAL_COMP_Start+0x8c>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	099b      	lsrs	r3, r3, #6
 8007e9c:	4a0c      	ldr	r2, [pc, #48]	; (8007ed0 <HAL_COMP_Start+0x90>)
 8007e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8007ea2:	099b      	lsrs	r3, r3, #6
 8007ea4:	00db      	lsls	r3, r3, #3
 8007ea6:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8007ea8:	e002      	b.n	8007eb0 <HAL_COMP_Start+0x70>
      {
        wait_loop_index--;
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	3b01      	subs	r3, #1
 8007eae:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d1f9      	bne.n	8007eaa <HAL_COMP_Start+0x6a>
 8007eb6:	e001      	b.n	8007ebc <HAL_COMP_Start+0x7c>
      }
    }
    else
    {
      status = HAL_ERROR;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3714      	adds	r7, #20
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec8:	4770      	bx	lr
 8007eca:	bf00      	nop
 8007ecc:	20000078 	.word	0x20000078
 8007ed0:	053e2d63 	.word	0x053e2d63

08007ed4 <HAL_COMP_Stop>:
  * @brief  Stop the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Stop(COMP_HandleTypeDef *hcomp)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b085      	sub	sp, #20
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007edc:	2300      	movs	r3, #0
 8007ede:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d102      	bne.n	8007eec <HAL_COMP_Stop+0x18>
  {
    status = HAL_ERROR;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	73fb      	strb	r3, [r7, #15]
 8007eea:	e01f      	b.n	8007f2c <HAL_COMP_Stop+0x58>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ef6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007efa:	d102      	bne.n	8007f02 <HAL_COMP_Stop+0x2e>
  {
    status = HAL_ERROR;
 8007efc:	2301      	movs	r3, #1
 8007efe:	73fb      	strb	r3, [r7, #15]
 8007f00:	e014      	b.n	8007f2c <HAL_COMP_Stop+0x58>
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    /* Check compliant states: HAL_COMP_STATE_READY or HAL_COMP_STATE_BUSY    */
    /* (all states except HAL_COMP_STATE_RESET and except locked status.      */
    if(hcomp->State != HAL_COMP_STATE_RESET)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007f08:	b2db      	uxtb	r3, r3
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d00c      	beq.n	8007f28 <HAL_COMP_Stop+0x54>
    {
      /* Disable the selected comparator */
      CLEAR_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	681a      	ldr	r2, [r3, #0]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f022 0201 	bic.w	r2, r2, #1
 8007f1c:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_READY;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2201      	movs	r2, #1
 8007f22:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8007f26:	e001      	b.n	8007f2c <HAL_COMP_Stop+0x58>
    }
    else
    {
      status = HAL_ERROR;
 8007f28:	2301      	movs	r3, #1
 8007f2a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3714      	adds	r7, #20
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr
	...

08007f3c <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ handler.
  * @param  hcomp  COMP handle
  * @retval None
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b084      	sub	sp, #16
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a11      	ldr	r2, [pc, #68]	; (8007f90 <HAL_COMP_IRQHandler+0x54>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d102      	bne.n	8007f54 <HAL_COMP_IRQHandler+0x18>
 8007f4e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007f52:	e001      	b.n	8007f58 <HAL_COMP_IRQHandler+0x1c>
 8007f54:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007f58:	60fb      	str	r3, [r7, #12]

  /* Check COMP EXTI flag */
  if(LL_EXTI_IsActiveFlag_0_31(exti_line) != 0UL)
 8007f5a:	68f8      	ldr	r0, [r7, #12]
 8007f5c:	f7ff fe68 	bl	8007c30 <LL_EXTI_IsActiveFlag_0_31>
 8007f60:	4603      	mov	r3, r0
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d010      	beq.n	8007f88 <HAL_COMP_IRQHandler+0x4c>
  {
    /* Check whether comparator is in independent or window mode */
    if(READ_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE) != 0UL)
 8007f66:	4b0b      	ldr	r3, [pc, #44]	; (8007f94 <HAL_COMP_IRQHandler+0x58>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d004      	beq.n	8007f7c <HAL_COMP_IRQHandler+0x40>
      /* Note: Pair of comparators in window mode can both trig IRQ when      */
      /*       input voltage is changing from "out of window" area            */
      /*       (low or high ) to the other "out of window" area (high or low).*/
      /*       Both flags must be cleared to call comparator trigger          */
      /*       callback is called once.                                       */
      LL_EXTI_ClearFlag_0_31((COMP_EXTI_LINE_COMP1 | COMP_EXTI_LINE_COMP2));
 8007f72:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8007f76:	f7ff fe71 	bl	8007c5c <LL_EXTI_ClearFlag_0_31>
 8007f7a:	e002      	b.n	8007f82 <HAL_COMP_IRQHandler+0x46>
    }
    else
    {
      /* Clear COMP EXTI line pending bit */
      LL_EXTI_ClearFlag_0_31(exti_line);
 8007f7c:	68f8      	ldr	r0, [r7, #12]
 8007f7e:	f7ff fe6d 	bl	8007c5c <LL_EXTI_ClearFlag_0_31>

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f7fd ff3a 	bl	8005dfc <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 8007f88:	bf00      	nop
 8007f8a:	3710      	adds	r7, #16
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}
 8007f90:	40010200 	.word	0x40010200
 8007f94:	40010204 	.word	0x40010204

08007f98 <HAL_COMP_GetOutputLevel>:
  *         @arg COMP_OUTPUT_LEVEL_LOW
  *         @arg COMP_OUTPUT_LEVEL_HIGH
  *
  */
uint32_t HAL_COMP_GetOutputLevel(COMP_HandleTypeDef *hcomp)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b083      	sub	sp, #12
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

  return (uint32_t)(READ_BIT(hcomp->Instance->CSR, COMP_CSR_VALUE)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	0f9b      	lsrs	r3, r3, #30
 8007fa8:	f003 0301 	and.w	r3, r3, #1
                    >> COMP_OUTPUT_LEVEL_BITOFFSET_POS);
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	370c      	adds	r7, #12
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr

08007fb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b085      	sub	sp, #20
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f003 0307 	and.w	r3, r3, #7
 8007fc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007fc8:	4b0c      	ldr	r3, [pc, #48]	; (8007ffc <__NVIC_SetPriorityGrouping+0x44>)
 8007fca:	68db      	ldr	r3, [r3, #12]
 8007fcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007fce:	68ba      	ldr	r2, [r7, #8]
 8007fd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007fd4:	4013      	ands	r3, r2
 8007fd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007fe0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007fe4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fe8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007fea:	4a04      	ldr	r2, [pc, #16]	; (8007ffc <__NVIC_SetPriorityGrouping+0x44>)
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	60d3      	str	r3, [r2, #12]
}
 8007ff0:	bf00      	nop
 8007ff2:	3714      	adds	r7, #20
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffa:	4770      	bx	lr
 8007ffc:	e000ed00 	.word	0xe000ed00

08008000 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008000:	b480      	push	{r7}
 8008002:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008004:	4b04      	ldr	r3, [pc, #16]	; (8008018 <__NVIC_GetPriorityGrouping+0x18>)
 8008006:	68db      	ldr	r3, [r3, #12]
 8008008:	0a1b      	lsrs	r3, r3, #8
 800800a:	f003 0307 	and.w	r3, r3, #7
}
 800800e:	4618      	mov	r0, r3
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr
 8008018:	e000ed00 	.word	0xe000ed00

0800801c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800801c:	b480      	push	{r7}
 800801e:	b083      	sub	sp, #12
 8008020:	af00      	add	r7, sp, #0
 8008022:	4603      	mov	r3, r0
 8008024:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800802a:	2b00      	cmp	r3, #0
 800802c:	db0b      	blt.n	8008046 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800802e:	79fb      	ldrb	r3, [r7, #7]
 8008030:	f003 021f 	and.w	r2, r3, #31
 8008034:	4907      	ldr	r1, [pc, #28]	; (8008054 <__NVIC_EnableIRQ+0x38>)
 8008036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800803a:	095b      	lsrs	r3, r3, #5
 800803c:	2001      	movs	r0, #1
 800803e:	fa00 f202 	lsl.w	r2, r0, r2
 8008042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008046:	bf00      	nop
 8008048:	370c      	adds	r7, #12
 800804a:	46bd      	mov	sp, r7
 800804c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008050:	4770      	bx	lr
 8008052:	bf00      	nop
 8008054:	e000e100 	.word	0xe000e100

08008058 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8008058:	b480      	push	{r7}
 800805a:	b083      	sub	sp, #12
 800805c:	af00      	add	r7, sp, #0
 800805e:	4603      	mov	r3, r0
 8008060:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008066:	2b00      	cmp	r3, #0
 8008068:	db10      	blt.n	800808c <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800806a:	79fb      	ldrb	r3, [r7, #7]
 800806c:	f003 021f 	and.w	r2, r3, #31
 8008070:	4909      	ldr	r1, [pc, #36]	; (8008098 <__NVIC_DisableIRQ+0x40>)
 8008072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008076:	095b      	lsrs	r3, r3, #5
 8008078:	2001      	movs	r0, #1
 800807a:	fa00 f202 	lsl.w	r2, r0, r2
 800807e:	3320      	adds	r3, #32
 8008080:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8008084:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008088:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 800808c:	bf00      	nop
 800808e:	370c      	adds	r7, #12
 8008090:	46bd      	mov	sp, r7
 8008092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008096:	4770      	bx	lr
 8008098:	e000e100 	.word	0xe000e100

0800809c <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800809c:	b480      	push	{r7}
 800809e:	b083      	sub	sp, #12
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	4603      	mov	r3, r0
 80080a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80080a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	db0c      	blt.n	80080c8 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80080ae:	79fb      	ldrb	r3, [r7, #7]
 80080b0:	f003 021f 	and.w	r2, r3, #31
 80080b4:	4907      	ldr	r1, [pc, #28]	; (80080d4 <__NVIC_SetPendingIRQ+0x38>)
 80080b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080ba:	095b      	lsrs	r3, r3, #5
 80080bc:	2001      	movs	r0, #1
 80080be:	fa00 f202 	lsl.w	r2, r0, r2
 80080c2:	3340      	adds	r3, #64	; 0x40
 80080c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80080c8:	bf00      	nop
 80080ca:	370c      	adds	r7, #12
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr
 80080d4:	e000e100 	.word	0xe000e100

080080d8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80080d8:	b480      	push	{r7}
 80080da:	b083      	sub	sp, #12
 80080dc:	af00      	add	r7, sp, #0
 80080de:	4603      	mov	r3, r0
 80080e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80080e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	db0c      	blt.n	8008104 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80080ea:	79fb      	ldrb	r3, [r7, #7]
 80080ec:	f003 021f 	and.w	r2, r3, #31
 80080f0:	4907      	ldr	r1, [pc, #28]	; (8008110 <__NVIC_ClearPendingIRQ+0x38>)
 80080f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080f6:	095b      	lsrs	r3, r3, #5
 80080f8:	2001      	movs	r0, #1
 80080fa:	fa00 f202 	lsl.w	r2, r0, r2
 80080fe:	3360      	adds	r3, #96	; 0x60
 8008100:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008104:	bf00      	nop
 8008106:	370c      	adds	r7, #12
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr
 8008110:	e000e100 	.word	0xe000e100

08008114 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008114:	b480      	push	{r7}
 8008116:	b083      	sub	sp, #12
 8008118:	af00      	add	r7, sp, #0
 800811a:	4603      	mov	r3, r0
 800811c:	6039      	str	r1, [r7, #0]
 800811e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008124:	2b00      	cmp	r3, #0
 8008126:	db0a      	blt.n	800813e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	b2da      	uxtb	r2, r3
 800812c:	490c      	ldr	r1, [pc, #48]	; (8008160 <__NVIC_SetPriority+0x4c>)
 800812e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008132:	0112      	lsls	r2, r2, #4
 8008134:	b2d2      	uxtb	r2, r2
 8008136:	440b      	add	r3, r1
 8008138:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800813c:	e00a      	b.n	8008154 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	b2da      	uxtb	r2, r3
 8008142:	4908      	ldr	r1, [pc, #32]	; (8008164 <__NVIC_SetPriority+0x50>)
 8008144:	79fb      	ldrb	r3, [r7, #7]
 8008146:	f003 030f 	and.w	r3, r3, #15
 800814a:	3b04      	subs	r3, #4
 800814c:	0112      	lsls	r2, r2, #4
 800814e:	b2d2      	uxtb	r2, r2
 8008150:	440b      	add	r3, r1
 8008152:	761a      	strb	r2, [r3, #24]
}
 8008154:	bf00      	nop
 8008156:	370c      	adds	r7, #12
 8008158:	46bd      	mov	sp, r7
 800815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815e:	4770      	bx	lr
 8008160:	e000e100 	.word	0xe000e100
 8008164:	e000ed00 	.word	0xe000ed00

08008168 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008168:	b480      	push	{r7}
 800816a:	b089      	sub	sp, #36	; 0x24
 800816c:	af00      	add	r7, sp, #0
 800816e:	60f8      	str	r0, [r7, #12]
 8008170:	60b9      	str	r1, [r7, #8]
 8008172:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f003 0307 	and.w	r3, r3, #7
 800817a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800817c:	69fb      	ldr	r3, [r7, #28]
 800817e:	f1c3 0307 	rsb	r3, r3, #7
 8008182:	2b04      	cmp	r3, #4
 8008184:	bf28      	it	cs
 8008186:	2304      	movcs	r3, #4
 8008188:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800818a:	69fb      	ldr	r3, [r7, #28]
 800818c:	3304      	adds	r3, #4
 800818e:	2b06      	cmp	r3, #6
 8008190:	d902      	bls.n	8008198 <NVIC_EncodePriority+0x30>
 8008192:	69fb      	ldr	r3, [r7, #28]
 8008194:	3b03      	subs	r3, #3
 8008196:	e000      	b.n	800819a <NVIC_EncodePriority+0x32>
 8008198:	2300      	movs	r3, #0
 800819a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800819c:	f04f 32ff 	mov.w	r2, #4294967295
 80081a0:	69bb      	ldr	r3, [r7, #24]
 80081a2:	fa02 f303 	lsl.w	r3, r2, r3
 80081a6:	43da      	mvns	r2, r3
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	401a      	ands	r2, r3
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80081b0:	f04f 31ff 	mov.w	r1, #4294967295
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	fa01 f303 	lsl.w	r3, r1, r3
 80081ba:	43d9      	mvns	r1, r3
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80081c0:	4313      	orrs	r3, r2
         );
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3724      	adds	r7, #36	; 0x24
 80081c6:	46bd      	mov	sp, r7
 80081c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081cc:	4770      	bx	lr
	...

080081d0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80081d0:	b480      	push	{r7}
 80081d2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80081d4:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80081d8:	4b05      	ldr	r3, [pc, #20]	; (80081f0 <__NVIC_SystemReset+0x20>)
 80081da:	68db      	ldr	r3, [r3, #12]
 80081dc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80081e0:	4903      	ldr	r1, [pc, #12]	; (80081f0 <__NVIC_SystemReset+0x20>)
 80081e2:	4b04      	ldr	r3, [pc, #16]	; (80081f4 <__NVIC_SystemReset+0x24>)
 80081e4:	4313      	orrs	r3, r2
 80081e6:	60cb      	str	r3, [r1, #12]
 80081e8:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80081ec:	bf00      	nop
 80081ee:	e7fd      	b.n	80081ec <__NVIC_SystemReset+0x1c>
 80081f0:	e000ed00 	.word	0xe000ed00
 80081f4:	05fa0004 	.word	0x05fa0004

080081f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b082      	sub	sp, #8
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f7ff fed9 	bl	8007fb8 <__NVIC_SetPriorityGrouping>
}
 8008206:	bf00      	nop
 8008208:	3708      	adds	r7, #8
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}

0800820e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800820e:	b580      	push	{r7, lr}
 8008210:	b086      	sub	sp, #24
 8008212:	af00      	add	r7, sp, #0
 8008214:	4603      	mov	r3, r0
 8008216:	60b9      	str	r1, [r7, #8]
 8008218:	607a      	str	r2, [r7, #4]
 800821a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800821c:	f7ff fef0 	bl	8008000 <__NVIC_GetPriorityGrouping>
 8008220:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008222:	687a      	ldr	r2, [r7, #4]
 8008224:	68b9      	ldr	r1, [r7, #8]
 8008226:	6978      	ldr	r0, [r7, #20]
 8008228:	f7ff ff9e 	bl	8008168 <NVIC_EncodePriority>
 800822c:	4602      	mov	r2, r0
 800822e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008232:	4611      	mov	r1, r2
 8008234:	4618      	mov	r0, r3
 8008236:	f7ff ff6d 	bl	8008114 <__NVIC_SetPriority>
}
 800823a:	bf00      	nop
 800823c:	3718      	adds	r7, #24
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}

08008242 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008242:	b580      	push	{r7, lr}
 8008244:	b082      	sub	sp, #8
 8008246:	af00      	add	r7, sp, #0
 8008248:	4603      	mov	r3, r0
 800824a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800824c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008250:	4618      	mov	r0, r3
 8008252:	f7ff fee3 	bl	800801c <__NVIC_EnableIRQ>
}
 8008256:	bf00      	nop
 8008258:	3708      	adds	r7, #8
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}

0800825e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800825e:	b580      	push	{r7, lr}
 8008260:	b082      	sub	sp, #8
 8008262:	af00      	add	r7, sp, #0
 8008264:	4603      	mov	r3, r0
 8008266:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8008268:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800826c:	4618      	mov	r0, r3
 800826e:	f7ff fef3 	bl	8008058 <__NVIC_DisableIRQ>
}
 8008272:	bf00      	nop
 8008274:	3708      	adds	r7, #8
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}

0800827a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800827a:	b580      	push	{r7, lr}
 800827c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800827e:	f7ff ffa7 	bl	80081d0 <__NVIC_SystemReset>

08008282 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8008282:	b580      	push	{r7, lr}
 8008284:	b082      	sub	sp, #8
 8008286:	af00      	add	r7, sp, #0
 8008288:	4603      	mov	r3, r0
 800828a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 800828c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008290:	4618      	mov	r0, r3
 8008292:	f7ff ff03 	bl	800809c <__NVIC_SetPendingIRQ>
}
 8008296:	bf00      	nop
 8008298:	3708      	adds	r7, #8
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}

0800829e <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800829e:	b580      	push	{r7, lr}
 80082a0:	b082      	sub	sp, #8
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	4603      	mov	r3, r0
 80082a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80082a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082ac:	4618      	mov	r0, r3
 80082ae:	f7ff ff13 	bl	80080d8 <__NVIC_ClearPendingIRQ>
}
 80082b2:	bf00      	nop
 80082b4:	3708      	adds	r7, #8
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}
	...

080082bc <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b084      	sub	sp, #16
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d101      	bne.n	80082ce <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80082ca:	2301      	movs	r3, #1
 80082cc:	e08d      	b.n	80083ea <HAL_DMA_Init+0x12e>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	461a      	mov	r2, r3
 80082d4:	4b47      	ldr	r3, [pc, #284]	; (80083f4 <HAL_DMA_Init+0x138>)
 80082d6:	429a      	cmp	r2, r3
 80082d8:	d80f      	bhi.n	80082fa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	461a      	mov	r2, r3
 80082e0:	4b45      	ldr	r3, [pc, #276]	; (80083f8 <HAL_DMA_Init+0x13c>)
 80082e2:	4413      	add	r3, r2
 80082e4:	4a45      	ldr	r2, [pc, #276]	; (80083fc <HAL_DMA_Init+0x140>)
 80082e6:	fba2 2303 	umull	r2, r3, r2, r3
 80082ea:	091b      	lsrs	r3, r3, #4
 80082ec:	009a      	lsls	r2, r3, #2
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	4a42      	ldr	r2, [pc, #264]	; (8008400 <HAL_DMA_Init+0x144>)
 80082f6:	641a      	str	r2, [r3, #64]	; 0x40
 80082f8:	e00e      	b.n	8008318 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	461a      	mov	r2, r3
 8008300:	4b40      	ldr	r3, [pc, #256]	; (8008404 <HAL_DMA_Init+0x148>)
 8008302:	4413      	add	r3, r2
 8008304:	4a3d      	ldr	r2, [pc, #244]	; (80083fc <HAL_DMA_Init+0x140>)
 8008306:	fba2 2303 	umull	r2, r3, r2, r3
 800830a:	091b      	lsrs	r3, r3, #4
 800830c:	009a      	lsls	r2, r3, #2
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	4a3c      	ldr	r2, [pc, #240]	; (8008408 <HAL_DMA_Init+0x14c>)
 8008316:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2202      	movs	r2, #2
 800831c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800832e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008332:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800833c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	691b      	ldr	r3, [r3, #16]
 8008342:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008348:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	699b      	ldr	r3, [r3, #24]
 800834e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008354:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6a1b      	ldr	r3, [r3, #32]
 800835a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800835c:	68fa      	ldr	r2, [r7, #12]
 800835e:	4313      	orrs	r3, r2
 8008360:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	68fa      	ldr	r2, [r7, #12]
 8008368:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 fa74 	bl	8008858 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	689b      	ldr	r3, [r3, #8]
 8008374:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008378:	d102      	bne.n	8008380 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2200      	movs	r2, #0
 800837e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	685a      	ldr	r2, [r3, #4]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008388:	b2d2      	uxtb	r2, r2
 800838a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008390:	687a      	ldr	r2, [r7, #4]
 8008392:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008394:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d010      	beq.n	80083c0 <HAL_DMA_Init+0x104>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	2b04      	cmp	r3, #4
 80083a4:	d80c      	bhi.n	80083c0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f000 fa94 	bl	80088d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083b0:	2200      	movs	r2, #0
 80083b2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083b8:	687a      	ldr	r2, [r7, #4]
 80083ba:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80083bc:	605a      	str	r2, [r3, #4]
 80083be:	e008      	b.n	80083d2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2200      	movs	r2, #0
 80083c4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2200      	movs	r2, #0
 80083ca:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2200      	movs	r2, #0
 80083d0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2200      	movs	r2, #0
 80083d6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2201      	movs	r2, #1
 80083dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2200      	movs	r2, #0
 80083e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80083e8:	2300      	movs	r3, #0
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3710      	adds	r7, #16
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}
 80083f2:	bf00      	nop
 80083f4:	40020407 	.word	0x40020407
 80083f8:	bffdfff8 	.word	0xbffdfff8
 80083fc:	cccccccd 	.word	0xcccccccd
 8008400:	40020000 	.word	0x40020000
 8008404:	bffdfbf8 	.word	0xbffdfbf8
 8008408:	40020400 	.word	0x40020400

0800840c <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b086      	sub	sp, #24
 8008410:	af00      	add	r7, sp, #0
 8008412:	60f8      	str	r0, [r7, #12]
 8008414:	60b9      	str	r1, [r7, #8]
 8008416:	607a      	str	r2, [r7, #4]
 8008418:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800841a:	2300      	movs	r3, #0
 800841c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008424:	2b01      	cmp	r3, #1
 8008426:	d101      	bne.n	800842c <HAL_DMA_Start_IT+0x20>
 8008428:	2302      	movs	r3, #2
 800842a:	e066      	b.n	80084fa <HAL_DMA_Start_IT+0xee>
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2201      	movs	r2, #1
 8008430:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800843a:	b2db      	uxtb	r3, r3
 800843c:	2b01      	cmp	r3, #1
 800843e:	d155      	bne.n	80084ec <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2202      	movs	r2, #2
 8008444:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2200      	movs	r2, #0
 800844c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	681a      	ldr	r2, [r3, #0]
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f022 0201 	bic.w	r2, r2, #1
 800845c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	687a      	ldr	r2, [r7, #4]
 8008462:	68b9      	ldr	r1, [r7, #8]
 8008464:	68f8      	ldr	r0, [r7, #12]
 8008466:	f000 f9b9 	bl	80087dc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800846e:	2b00      	cmp	r3, #0
 8008470:	d008      	beq.n	8008484 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	681a      	ldr	r2, [r3, #0]
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f042 020e 	orr.w	r2, r2, #14
 8008480:	601a      	str	r2, [r3, #0]
 8008482:	e00f      	b.n	80084a4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	681a      	ldr	r2, [r3, #0]
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f022 0204 	bic.w	r2, r2, #4
 8008492:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	681a      	ldr	r2, [r3, #0]
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f042 020a 	orr.w	r2, r2, #10
 80084a2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d007      	beq.n	80084c2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084b6:	681a      	ldr	r2, [r3, #0]
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80084c0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d007      	beq.n	80084da <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084ce:	681a      	ldr	r2, [r3, #0]
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80084d8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	681a      	ldr	r2, [r3, #0]
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f042 0201 	orr.w	r2, r2, #1
 80084e8:	601a      	str	r2, [r3, #0]
 80084ea:	e005      	b.n	80084f8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2200      	movs	r2, #0
 80084f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80084f4:	2302      	movs	r3, #2
 80084f6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80084f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3718      	adds	r7, #24
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}

08008502 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008502:	b480      	push	{r7}
 8008504:	b083      	sub	sp, #12
 8008506:	af00      	add	r7, sp, #0
 8008508:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d101      	bne.n	8008514 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8008510:	2301      	movs	r3, #1
 8008512:	e04f      	b.n	80085b4 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800851a:	b2db      	uxtb	r3, r3
 800851c:	2b02      	cmp	r3, #2
 800851e:	d008      	beq.n	8008532 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2204      	movs	r2, #4
 8008524:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2200      	movs	r2, #0
 800852a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800852e:	2301      	movs	r3, #1
 8008530:	e040      	b.n	80085b4 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	681a      	ldr	r2, [r3, #0]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f022 020e 	bic.w	r2, r2, #14
 8008540:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008546:	681a      	ldr	r2, [r3, #0]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800854c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008550:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	681a      	ldr	r2, [r3, #0]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f022 0201 	bic.w	r2, r2, #1
 8008560:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008566:	f003 021c 	and.w	r2, r3, #28
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800856e:	2101      	movs	r1, #1
 8008570:	fa01 f202 	lsl.w	r2, r1, r2
 8008574:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800857a:	687a      	ldr	r2, [r7, #4]
 800857c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800857e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008584:	2b00      	cmp	r3, #0
 8008586:	d00c      	beq.n	80085a2 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800858c:	681a      	ldr	r2, [r3, #0]
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008592:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008596:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800859c:	687a      	ldr	r2, [r7, #4]
 800859e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80085a0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2201      	movs	r2, #1
 80085a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2200      	movs	r2, #0
 80085ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80085b2:	2300      	movs	r3, #0
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	370c      	adds	r7, #12
 80085b8:	46bd      	mov	sp, r7
 80085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085be:	4770      	bx	lr

080085c0 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b084      	sub	sp, #16
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80085c8:	2300      	movs	r3, #0
 80085ca:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80085d2:	b2db      	uxtb	r3, r3
 80085d4:	2b02      	cmp	r3, #2
 80085d6:	d005      	beq.n	80085e4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2204      	movs	r2, #4
 80085dc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80085de:	2301      	movs	r3, #1
 80085e0:	73fb      	strb	r3, [r7, #15]
 80085e2:	e047      	b.n	8008674 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	681a      	ldr	r2, [r3, #0]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f022 020e 	bic.w	r2, r2, #14
 80085f2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	681a      	ldr	r2, [r3, #0]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f022 0201 	bic.w	r2, r2, #1
 8008602:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008608:	681a      	ldr	r2, [r3, #0]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800860e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008612:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008618:	f003 021c 	and.w	r2, r3, #28
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008620:	2101      	movs	r1, #1
 8008622:	fa01 f202 	lsl.w	r2, r1, r2
 8008626:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800862c:	687a      	ldr	r2, [r7, #4]
 800862e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008630:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008636:	2b00      	cmp	r3, #0
 8008638:	d00c      	beq.n	8008654 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800863e:	681a      	ldr	r2, [r3, #0]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008644:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008648:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800864e:	687a      	ldr	r2, [r7, #4]
 8008650:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008652:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2201      	movs	r2, #1
 8008658:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2200      	movs	r2, #0
 8008660:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008668:	2b00      	cmp	r3, #0
 800866a:	d003      	beq.n	8008674 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	4798      	blx	r3
    }
  }
  return status;
 8008674:	7bfb      	ldrb	r3, [r7, #15]
}
 8008676:	4618      	mov	r0, r3
 8008678:	3710      	adds	r7, #16
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}

0800867e <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800867e:	b580      	push	{r7, lr}
 8008680:	b084      	sub	sp, #16
 8008682:	af00      	add	r7, sp, #0
 8008684:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800869a:	f003 031c 	and.w	r3, r3, #28
 800869e:	2204      	movs	r2, #4
 80086a0:	409a      	lsls	r2, r3
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	4013      	ands	r3, r2
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d026      	beq.n	80086f8 <HAL_DMA_IRQHandler+0x7a>
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	f003 0304 	and.w	r3, r3, #4
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d021      	beq.n	80086f8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f003 0320 	and.w	r3, r3, #32
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d107      	bne.n	80086d2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	681a      	ldr	r2, [r3, #0]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f022 0204 	bic.w	r2, r2, #4
 80086d0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086d6:	f003 021c 	and.w	r2, r3, #28
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086de:	2104      	movs	r1, #4
 80086e0:	fa01 f202 	lsl.w	r2, r1, r2
 80086e4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d071      	beq.n	80087d2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80086f6:	e06c      	b.n	80087d2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086fc:	f003 031c 	and.w	r3, r3, #28
 8008700:	2202      	movs	r2, #2
 8008702:	409a      	lsls	r2, r3
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	4013      	ands	r3, r2
 8008708:	2b00      	cmp	r3, #0
 800870a:	d02e      	beq.n	800876a <HAL_DMA_IRQHandler+0xec>
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	f003 0302 	and.w	r3, r3, #2
 8008712:	2b00      	cmp	r3, #0
 8008714:	d029      	beq.n	800876a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f003 0320 	and.w	r3, r3, #32
 8008720:	2b00      	cmp	r3, #0
 8008722:	d10b      	bne.n	800873c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	681a      	ldr	r2, [r3, #0]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f022 020a 	bic.w	r2, r2, #10
 8008732:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2201      	movs	r2, #1
 8008738:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008740:	f003 021c 	and.w	r2, r3, #28
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008748:	2102      	movs	r1, #2
 800874a:	fa01 f202 	lsl.w	r2, r1, r2
 800874e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2200      	movs	r2, #0
 8008754:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800875c:	2b00      	cmp	r3, #0
 800875e:	d038      	beq.n	80087d2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8008768:	e033      	b.n	80087d2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800876e:	f003 031c 	and.w	r3, r3, #28
 8008772:	2208      	movs	r2, #8
 8008774:	409a      	lsls	r2, r3
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	4013      	ands	r3, r2
 800877a:	2b00      	cmp	r3, #0
 800877c:	d02a      	beq.n	80087d4 <HAL_DMA_IRQHandler+0x156>
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	f003 0308 	and.w	r3, r3, #8
 8008784:	2b00      	cmp	r3, #0
 8008786:	d025      	beq.n	80087d4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	681a      	ldr	r2, [r3, #0]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f022 020e 	bic.w	r2, r2, #14
 8008796:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800879c:	f003 021c 	and.w	r2, r3, #28
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087a4:	2101      	movs	r1, #1
 80087a6:	fa01 f202 	lsl.w	r2, r1, r2
 80087aa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2201      	movs	r2, #1
 80087b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2201      	movs	r2, #1
 80087b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2200      	movs	r2, #0
 80087be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d004      	beq.n	80087d4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80087d2:	bf00      	nop
 80087d4:	bf00      	nop
}
 80087d6:	3710      	adds	r7, #16
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}

080087dc <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80087dc:	b480      	push	{r7}
 80087de:	b085      	sub	sp, #20
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	60b9      	str	r1, [r7, #8]
 80087e6:	607a      	str	r2, [r7, #4]
 80087e8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087ee:	68fa      	ldr	r2, [r7, #12]
 80087f0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80087f2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d004      	beq.n	8008806 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008800:	68fa      	ldr	r2, [r7, #12]
 8008802:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008804:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800880a:	f003 021c 	and.w	r2, r3, #28
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008812:	2101      	movs	r1, #1
 8008814:	fa01 f202 	lsl.w	r2, r1, r2
 8008818:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	683a      	ldr	r2, [r7, #0]
 8008820:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	689b      	ldr	r3, [r3, #8]
 8008826:	2b10      	cmp	r3, #16
 8008828:	d108      	bne.n	800883c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	68ba      	ldr	r2, [r7, #8]
 8008838:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800883a:	e007      	b.n	800884c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	68ba      	ldr	r2, [r7, #8]
 8008842:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	687a      	ldr	r2, [r7, #4]
 800884a:	60da      	str	r2, [r3, #12]
}
 800884c:	bf00      	nop
 800884e:	3714      	adds	r7, #20
 8008850:	46bd      	mov	sp, r7
 8008852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008856:	4770      	bx	lr

08008858 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008858:	b480      	push	{r7}
 800885a:	b085      	sub	sp, #20
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	461a      	mov	r2, r3
 8008866:	4b17      	ldr	r3, [pc, #92]	; (80088c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8008868:	429a      	cmp	r2, r3
 800886a:	d80a      	bhi.n	8008882 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008870:	089b      	lsrs	r3, r3, #2
 8008872:	009b      	lsls	r3, r3, #2
 8008874:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008878:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800887c:	687a      	ldr	r2, [r7, #4]
 800887e:	6493      	str	r3, [r2, #72]	; 0x48
 8008880:	e007      	b.n	8008892 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008886:	089b      	lsrs	r3, r3, #2
 8008888:	009a      	lsls	r2, r3, #2
 800888a:	4b0f      	ldr	r3, [pc, #60]	; (80088c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800888c:	4413      	add	r3, r2
 800888e:	687a      	ldr	r2, [r7, #4]
 8008890:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	b2db      	uxtb	r3, r3
 8008898:	3b08      	subs	r3, #8
 800889a:	4a0c      	ldr	r2, [pc, #48]	; (80088cc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800889c:	fba2 2303 	umull	r2, r3, r2, r3
 80088a0:	091b      	lsrs	r3, r3, #4
 80088a2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	4a0a      	ldr	r2, [pc, #40]	; (80088d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80088a8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	f003 031c 	and.w	r3, r3, #28
 80088b0:	2201      	movs	r2, #1
 80088b2:	409a      	lsls	r2, r3
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80088b8:	bf00      	nop
 80088ba:	3714      	adds	r7, #20
 80088bc:	46bd      	mov	sp, r7
 80088be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c2:	4770      	bx	lr
 80088c4:	40020407 	.word	0x40020407
 80088c8:	4002081c 	.word	0x4002081c
 80088cc:	cccccccd 	.word	0xcccccccd
 80088d0:	40020880 	.word	0x40020880

080088d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b085      	sub	sp, #20
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	685b      	ldr	r3, [r3, #4]
 80088e0:	b2db      	uxtb	r3, r3
 80088e2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80088e4:	68fa      	ldr	r2, [r7, #12]
 80088e6:	4b0b      	ldr	r3, [pc, #44]	; (8008914 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80088e8:	4413      	add	r3, r2
 80088ea:	009b      	lsls	r3, r3, #2
 80088ec:	461a      	mov	r2, r3
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	4a08      	ldr	r2, [pc, #32]	; (8008918 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80088f6:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	3b01      	subs	r3, #1
 80088fc:	f003 0303 	and.w	r3, r3, #3
 8008900:	2201      	movs	r2, #1
 8008902:	409a      	lsls	r2, r3
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8008908:	bf00      	nop
 800890a:	3714      	adds	r7, #20
 800890c:	46bd      	mov	sp, r7
 800890e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008912:	4770      	bx	lr
 8008914:	1000823f 	.word	0x1000823f
 8008918:	40020940 	.word	0x40020940

0800891c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800891c:	b480      	push	{r7}
 800891e:	b087      	sub	sp, #28
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008926:	2300      	movs	r3, #0
 8008928:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800892a:	e14c      	b.n	8008bc6 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	681a      	ldr	r2, [r3, #0]
 8008930:	2101      	movs	r1, #1
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	fa01 f303 	lsl.w	r3, r1, r3
 8008938:	4013      	ands	r3, r2
 800893a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	2b00      	cmp	r3, #0
 8008940:	f000 813e 	beq.w	8008bc0 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	2b02      	cmp	r3, #2
 800894a:	d003      	beq.n	8008954 <HAL_GPIO_Init+0x38>
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	2b12      	cmp	r3, #18
 8008952:	d123      	bne.n	800899c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	08da      	lsrs	r2, r3, #3
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	3208      	adds	r2, #8
 800895c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008960:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	f003 0307 	and.w	r3, r3, #7
 8008968:	009b      	lsls	r3, r3, #2
 800896a:	220f      	movs	r2, #15
 800896c:	fa02 f303 	lsl.w	r3, r2, r3
 8008970:	43db      	mvns	r3, r3
 8008972:	693a      	ldr	r2, [r7, #16]
 8008974:	4013      	ands	r3, r2
 8008976:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	691a      	ldr	r2, [r3, #16]
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	f003 0307 	and.w	r3, r3, #7
 8008982:	009b      	lsls	r3, r3, #2
 8008984:	fa02 f303 	lsl.w	r3, r2, r3
 8008988:	693a      	ldr	r2, [r7, #16]
 800898a:	4313      	orrs	r3, r2
 800898c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	08da      	lsrs	r2, r3, #3
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	3208      	adds	r2, #8
 8008996:	6939      	ldr	r1, [r7, #16]
 8008998:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	005b      	lsls	r3, r3, #1
 80089a6:	2203      	movs	r2, #3
 80089a8:	fa02 f303 	lsl.w	r3, r2, r3
 80089ac:	43db      	mvns	r3, r3
 80089ae:	693a      	ldr	r2, [r7, #16]
 80089b0:	4013      	ands	r3, r2
 80089b2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	f003 0203 	and.w	r2, r3, #3
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	005b      	lsls	r3, r3, #1
 80089c0:	fa02 f303 	lsl.w	r3, r2, r3
 80089c4:	693a      	ldr	r2, [r7, #16]
 80089c6:	4313      	orrs	r3, r2
 80089c8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	693a      	ldr	r2, [r7, #16]
 80089ce:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	685b      	ldr	r3, [r3, #4]
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	d00b      	beq.n	80089f0 <HAL_GPIO_Init+0xd4>
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	2b02      	cmp	r3, #2
 80089de:	d007      	beq.n	80089f0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80089e4:	2b11      	cmp	r3, #17
 80089e6:	d003      	beq.n	80089f0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	2b12      	cmp	r3, #18
 80089ee:	d130      	bne.n	8008a52 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	689b      	ldr	r3, [r3, #8]
 80089f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	005b      	lsls	r3, r3, #1
 80089fa:	2203      	movs	r2, #3
 80089fc:	fa02 f303 	lsl.w	r3, r2, r3
 8008a00:	43db      	mvns	r3, r3
 8008a02:	693a      	ldr	r2, [r7, #16]
 8008a04:	4013      	ands	r3, r2
 8008a06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	68da      	ldr	r2, [r3, #12]
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	005b      	lsls	r3, r3, #1
 8008a10:	fa02 f303 	lsl.w	r3, r2, r3
 8008a14:	693a      	ldr	r2, [r7, #16]
 8008a16:	4313      	orrs	r3, r2
 8008a18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	693a      	ldr	r2, [r7, #16]
 8008a1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	685b      	ldr	r3, [r3, #4]
 8008a24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008a26:	2201      	movs	r2, #1
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a2e:	43db      	mvns	r3, r3
 8008a30:	693a      	ldr	r2, [r7, #16]
 8008a32:	4013      	ands	r3, r2
 8008a34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	685b      	ldr	r3, [r3, #4]
 8008a3a:	091b      	lsrs	r3, r3, #4
 8008a3c:	f003 0201 	and.w	r2, r3, #1
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	fa02 f303 	lsl.w	r3, r2, r3
 8008a46:	693a      	ldr	r2, [r7, #16]
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	693a      	ldr	r2, [r7, #16]
 8008a50:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	68db      	ldr	r3, [r3, #12]
 8008a56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	005b      	lsls	r3, r3, #1
 8008a5c:	2203      	movs	r2, #3
 8008a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8008a62:	43db      	mvns	r3, r3
 8008a64:	693a      	ldr	r2, [r7, #16]
 8008a66:	4013      	ands	r3, r2
 8008a68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	689a      	ldr	r2, [r3, #8]
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	005b      	lsls	r3, r3, #1
 8008a72:	fa02 f303 	lsl.w	r3, r2, r3
 8008a76:	693a      	ldr	r2, [r7, #16]
 8008a78:	4313      	orrs	r3, r2
 8008a7a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	693a      	ldr	r2, [r7, #16]
 8008a80:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	685b      	ldr	r3, [r3, #4]
 8008a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	f000 8098 	beq.w	8008bc0 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8008a90:	4a54      	ldr	r2, [pc, #336]	; (8008be4 <HAL_GPIO_Init+0x2c8>)
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	089b      	lsrs	r3, r3, #2
 8008a96:	3302      	adds	r3, #2
 8008a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	f003 0303 	and.w	r3, r3, #3
 8008aa4:	009b      	lsls	r3, r3, #2
 8008aa6:	220f      	movs	r2, #15
 8008aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8008aac:	43db      	mvns	r3, r3
 8008aae:	693a      	ldr	r2, [r7, #16]
 8008ab0:	4013      	ands	r3, r2
 8008ab2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008aba:	d019      	beq.n	8008af0 <HAL_GPIO_Init+0x1d4>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	4a4a      	ldr	r2, [pc, #296]	; (8008be8 <HAL_GPIO_Init+0x2cc>)
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d013      	beq.n	8008aec <HAL_GPIO_Init+0x1d0>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	4a49      	ldr	r2, [pc, #292]	; (8008bec <HAL_GPIO_Init+0x2d0>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d00d      	beq.n	8008ae8 <HAL_GPIO_Init+0x1cc>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	4a48      	ldr	r2, [pc, #288]	; (8008bf0 <HAL_GPIO_Init+0x2d4>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d007      	beq.n	8008ae4 <HAL_GPIO_Init+0x1c8>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	4a47      	ldr	r2, [pc, #284]	; (8008bf4 <HAL_GPIO_Init+0x2d8>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d101      	bne.n	8008ae0 <HAL_GPIO_Init+0x1c4>
 8008adc:	2304      	movs	r3, #4
 8008ade:	e008      	b.n	8008af2 <HAL_GPIO_Init+0x1d6>
 8008ae0:	2307      	movs	r3, #7
 8008ae2:	e006      	b.n	8008af2 <HAL_GPIO_Init+0x1d6>
 8008ae4:	2303      	movs	r3, #3
 8008ae6:	e004      	b.n	8008af2 <HAL_GPIO_Init+0x1d6>
 8008ae8:	2302      	movs	r3, #2
 8008aea:	e002      	b.n	8008af2 <HAL_GPIO_Init+0x1d6>
 8008aec:	2301      	movs	r3, #1
 8008aee:	e000      	b.n	8008af2 <HAL_GPIO_Init+0x1d6>
 8008af0:	2300      	movs	r3, #0
 8008af2:	697a      	ldr	r2, [r7, #20]
 8008af4:	f002 0203 	and.w	r2, r2, #3
 8008af8:	0092      	lsls	r2, r2, #2
 8008afa:	4093      	lsls	r3, r2
 8008afc:	693a      	ldr	r2, [r7, #16]
 8008afe:	4313      	orrs	r3, r2
 8008b00:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8008b02:	4938      	ldr	r1, [pc, #224]	; (8008be4 <HAL_GPIO_Init+0x2c8>)
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	089b      	lsrs	r3, r3, #2
 8008b08:	3302      	adds	r3, #2
 8008b0a:	693a      	ldr	r2, [r7, #16]
 8008b0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008b10:	4b39      	ldr	r3, [pc, #228]	; (8008bf8 <HAL_GPIO_Init+0x2dc>)
 8008b12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	43db      	mvns	r3, r3
 8008b1c:	693a      	ldr	r2, [r7, #16]
 8008b1e:	4013      	ands	r3, r2
 8008b20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	685b      	ldr	r3, [r3, #4]
 8008b26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d003      	beq.n	8008b36 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8008b2e:	693a      	ldr	r2, [r7, #16]
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	4313      	orrs	r3, r2
 8008b34:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008b36:	4a30      	ldr	r2, [pc, #192]	; (8008bf8 <HAL_GPIO_Init+0x2dc>)
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8008b3e:	4b2e      	ldr	r3, [pc, #184]	; (8008bf8 <HAL_GPIO_Init+0x2dc>)
 8008b40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	43db      	mvns	r3, r3
 8008b4a:	693a      	ldr	r2, [r7, #16]
 8008b4c:	4013      	ands	r3, r2
 8008b4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	685b      	ldr	r3, [r3, #4]
 8008b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d003      	beq.n	8008b64 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8008b5c:	693a      	ldr	r2, [r7, #16]
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	4313      	orrs	r3, r2
 8008b62:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008b64:	4a24      	ldr	r2, [pc, #144]	; (8008bf8 <HAL_GPIO_Init+0x2dc>)
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008b6c:	4b22      	ldr	r3, [pc, #136]	; (8008bf8 <HAL_GPIO_Init+0x2dc>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	43db      	mvns	r3, r3
 8008b76:	693a      	ldr	r2, [r7, #16]
 8008b78:	4013      	ands	r3, r2
 8008b7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d003      	beq.n	8008b90 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8008b88:	693a      	ldr	r2, [r7, #16]
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008b90:	4a19      	ldr	r2, [pc, #100]	; (8008bf8 <HAL_GPIO_Init+0x2dc>)
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008b96:	4b18      	ldr	r3, [pc, #96]	; (8008bf8 <HAL_GPIO_Init+0x2dc>)
 8008b98:	685b      	ldr	r3, [r3, #4]
 8008b9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	43db      	mvns	r3, r3
 8008ba0:	693a      	ldr	r2, [r7, #16]
 8008ba2:	4013      	ands	r3, r2
 8008ba4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	685b      	ldr	r3, [r3, #4]
 8008baa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d003      	beq.n	8008bba <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8008bb2:	693a      	ldr	r2, [r7, #16]
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	4313      	orrs	r3, r2
 8008bb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008bba:	4a0f      	ldr	r2, [pc, #60]	; (8008bf8 <HAL_GPIO_Init+0x2dc>)
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	681a      	ldr	r2, [r3, #0]
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	f47f aeab 	bne.w	800892c <HAL_GPIO_Init+0x10>
  }
}
 8008bd6:	bf00      	nop
 8008bd8:	371c      	adds	r7, #28
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be0:	4770      	bx	lr
 8008be2:	bf00      	nop
 8008be4:	40010000 	.word	0x40010000
 8008be8:	48000400 	.word	0x48000400
 8008bec:	48000800 	.word	0x48000800
 8008bf0:	48000c00 	.word	0x48000c00
 8008bf4:	48001000 	.word	0x48001000
 8008bf8:	58000800 	.word	0x58000800

08008bfc <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b085      	sub	sp, #20
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	460b      	mov	r3, r1
 8008c06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	691a      	ldr	r2, [r3, #16]
 8008c0c:	887b      	ldrh	r3, [r7, #2]
 8008c0e:	4013      	ands	r3, r2
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d002      	beq.n	8008c1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008c14:	2301      	movs	r3, #1
 8008c16:	73fb      	strb	r3, [r7, #15]
 8008c18:	e001      	b.n	8008c1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3714      	adds	r7, #20
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr

08008c2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b082      	sub	sp, #8
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	4603      	mov	r3, r0
 8008c34:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8008c36:	4b08      	ldr	r3, [pc, #32]	; (8008c58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008c38:	68da      	ldr	r2, [r3, #12]
 8008c3a:	88fb      	ldrh	r3, [r7, #6]
 8008c3c:	4013      	ands	r3, r2
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d006      	beq.n	8008c50 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008c42:	4a05      	ldr	r2, [pc, #20]	; (8008c58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008c44:	88fb      	ldrh	r3, [r7, #6]
 8008c46:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008c48:	88fb      	ldrh	r3, [r7, #6]
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f7fa ff00 	bl	8003a50 <HAL_GPIO_EXTI_Callback>
  }
}
 8008c50:	bf00      	nop
 8008c52:	3708      	adds	r7, #8
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}
 8008c58:	58000800 	.word	0x58000800

08008c5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b082      	sub	sp, #8
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d101      	bne.n	8008c6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	e081      	b.n	8008d72 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c74:	b2db      	uxtb	r3, r3
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d106      	bne.n	8008c88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f7fa fe26 	bl	80038d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2224      	movs	r2, #36	; 0x24
 8008c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	681a      	ldr	r2, [r3, #0]
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f022 0201 	bic.w	r2, r2, #1
 8008c9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	685a      	ldr	r2, [r3, #4]
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008cac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	689a      	ldr	r2, [r3, #8]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008cbc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	68db      	ldr	r3, [r3, #12]
 8008cc2:	2b01      	cmp	r3, #1
 8008cc4:	d107      	bne.n	8008cd6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	689a      	ldr	r2, [r3, #8]
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008cd2:	609a      	str	r2, [r3, #8]
 8008cd4:	e006      	b.n	8008ce4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	689a      	ldr	r2, [r3, #8]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008ce2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	68db      	ldr	r3, [r3, #12]
 8008ce8:	2b02      	cmp	r3, #2
 8008cea:	d104      	bne.n	8008cf6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008cf4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	687a      	ldr	r2, [r7, #4]
 8008cfe:	6812      	ldr	r2, [r2, #0]
 8008d00:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008d04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d08:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	68da      	ldr	r2, [r3, #12]
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008d18:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	691a      	ldr	r2, [r3, #16]
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	695b      	ldr	r3, [r3, #20]
 8008d22:	ea42 0103 	orr.w	r1, r2, r3
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	699b      	ldr	r3, [r3, #24]
 8008d2a:	021a      	lsls	r2, r3, #8
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	430a      	orrs	r2, r1
 8008d32:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	69d9      	ldr	r1, [r3, #28]
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6a1a      	ldr	r2, [r3, #32]
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	430a      	orrs	r2, r1
 8008d42:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	681a      	ldr	r2, [r3, #0]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f042 0201 	orr.w	r2, r2, #1
 8008d52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2200      	movs	r2, #0
 8008d58:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2220      	movs	r2, #32
 8008d5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2200      	movs	r2, #0
 8008d66:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008d70:	2300      	movs	r3, #0
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3708      	adds	r7, #8
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}
	...

08008d7c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b088      	sub	sp, #32
 8008d80:	af02      	add	r7, sp, #8
 8008d82:	60f8      	str	r0, [r7, #12]
 8008d84:	607a      	str	r2, [r7, #4]
 8008d86:	461a      	mov	r2, r3
 8008d88:	460b      	mov	r3, r1
 8008d8a:	817b      	strh	r3, [r7, #10]
 8008d8c:	4613      	mov	r3, r2
 8008d8e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d96:	b2db      	uxtb	r3, r3
 8008d98:	2b20      	cmp	r3, #32
 8008d9a:	f040 80da 	bne.w	8008f52 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008da4:	2b01      	cmp	r3, #1
 8008da6:	d101      	bne.n	8008dac <HAL_I2C_Master_Transmit+0x30>
 8008da8:	2302      	movs	r3, #2
 8008daa:	e0d3      	b.n	8008f54 <HAL_I2C_Master_Transmit+0x1d8>
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	2201      	movs	r2, #1
 8008db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008db4:	f7fd fcf8 	bl	80067a8 <HAL_GetTick>
 8008db8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	9300      	str	r3, [sp, #0]
 8008dbe:	2319      	movs	r3, #25
 8008dc0:	2201      	movs	r2, #1
 8008dc2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008dc6:	68f8      	ldr	r0, [r7, #12]
 8008dc8:	f001 fbba 	bl	800a540 <I2C_WaitOnFlagUntilTimeout>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d001      	beq.n	8008dd6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	e0be      	b.n	8008f54 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	2221      	movs	r2, #33	; 0x21
 8008dda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	2210      	movs	r2, #16
 8008de2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2200      	movs	r2, #0
 8008dea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	687a      	ldr	r2, [r7, #4]
 8008df0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	893a      	ldrh	r2, [r7, #8]
 8008df6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e02:	b29b      	uxth	r3, r3
 8008e04:	2bff      	cmp	r3, #255	; 0xff
 8008e06:	d90e      	bls.n	8008e26 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	22ff      	movs	r2, #255	; 0xff
 8008e0c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e12:	b2da      	uxtb	r2, r3
 8008e14:	8979      	ldrh	r1, [r7, #10]
 8008e16:	4b51      	ldr	r3, [pc, #324]	; (8008f5c <HAL_I2C_Master_Transmit+0x1e0>)
 8008e18:	9300      	str	r3, [sp, #0]
 8008e1a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008e1e:	68f8      	ldr	r0, [r7, #12]
 8008e20:	f001 fd1c 	bl	800a85c <I2C_TransferConfig>
 8008e24:	e06c      	b.n	8008f00 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e2a:	b29a      	uxth	r2, r3
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e34:	b2da      	uxtb	r2, r3
 8008e36:	8979      	ldrh	r1, [r7, #10]
 8008e38:	4b48      	ldr	r3, [pc, #288]	; (8008f5c <HAL_I2C_Master_Transmit+0x1e0>)
 8008e3a:	9300      	str	r3, [sp, #0]
 8008e3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008e40:	68f8      	ldr	r0, [r7, #12]
 8008e42:	f001 fd0b 	bl	800a85c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8008e46:	e05b      	b.n	8008f00 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008e48:	697a      	ldr	r2, [r7, #20]
 8008e4a:	6a39      	ldr	r1, [r7, #32]
 8008e4c:	68f8      	ldr	r0, [r7, #12]
 8008e4e:	f001 fbb7 	bl	800a5c0 <I2C_WaitOnTXISFlagUntilTimeout>
 8008e52:	4603      	mov	r3, r0
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d001      	beq.n	8008e5c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8008e58:	2301      	movs	r3, #1
 8008e5a:	e07b      	b.n	8008f54 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e60:	781a      	ldrb	r2, [r3, #0]
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e6c:	1c5a      	adds	r2, r3, #1
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e76:	b29b      	uxth	r3, r3
 8008e78:	3b01      	subs	r3, #1
 8008e7a:	b29a      	uxth	r2, r3
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e84:	3b01      	subs	r3, #1
 8008e86:	b29a      	uxth	r2, r3
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e90:	b29b      	uxth	r3, r3
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d034      	beq.n	8008f00 <HAL_I2C_Master_Transmit+0x184>
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d130      	bne.n	8008f00 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	9300      	str	r3, [sp, #0]
 8008ea2:	6a3b      	ldr	r3, [r7, #32]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	2180      	movs	r1, #128	; 0x80
 8008ea8:	68f8      	ldr	r0, [r7, #12]
 8008eaa:	f001 fb49 	bl	800a540 <I2C_WaitOnFlagUntilTimeout>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d001      	beq.n	8008eb8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	e04d      	b.n	8008f54 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ebc:	b29b      	uxth	r3, r3
 8008ebe:	2bff      	cmp	r3, #255	; 0xff
 8008ec0:	d90e      	bls.n	8008ee0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	22ff      	movs	r2, #255	; 0xff
 8008ec6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ecc:	b2da      	uxtb	r2, r3
 8008ece:	8979      	ldrh	r1, [r7, #10]
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	9300      	str	r3, [sp, #0]
 8008ed4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008ed8:	68f8      	ldr	r0, [r7, #12]
 8008eda:	f001 fcbf 	bl	800a85c <I2C_TransferConfig>
 8008ede:	e00f      	b.n	8008f00 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ee4:	b29a      	uxth	r2, r3
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008eee:	b2da      	uxtb	r2, r3
 8008ef0:	8979      	ldrh	r1, [r7, #10]
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	9300      	str	r3, [sp, #0]
 8008ef6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008efa:	68f8      	ldr	r0, [r7, #12]
 8008efc:	f001 fcae 	bl	800a85c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f04:	b29b      	uxth	r3, r3
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d19e      	bne.n	8008e48 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008f0a:	697a      	ldr	r2, [r7, #20]
 8008f0c:	6a39      	ldr	r1, [r7, #32]
 8008f0e:	68f8      	ldr	r0, [r7, #12]
 8008f10:	f001 fb96 	bl	800a640 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008f14:	4603      	mov	r3, r0
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d001      	beq.n	8008f1e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	e01a      	b.n	8008f54 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	2220      	movs	r2, #32
 8008f24:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	6859      	ldr	r1, [r3, #4]
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681a      	ldr	r2, [r3, #0]
 8008f30:	4b0b      	ldr	r3, [pc, #44]	; (8008f60 <HAL_I2C_Master_Transmit+0x1e4>)
 8008f32:	400b      	ands	r3, r1
 8008f34:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	2220      	movs	r2, #32
 8008f3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	2200      	movs	r2, #0
 8008f42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	e000      	b.n	8008f54 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8008f52:	2302      	movs	r3, #2
  }
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3718      	adds	r7, #24
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}
 8008f5c:	80002000 	.word	0x80002000
 8008f60:	fe00e800 	.word	0xfe00e800

08008f64 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b088      	sub	sp, #32
 8008f68:	af02      	add	r7, sp, #8
 8008f6a:	60f8      	str	r0, [r7, #12]
 8008f6c:	607a      	str	r2, [r7, #4]
 8008f6e:	461a      	mov	r2, r3
 8008f70:	460b      	mov	r3, r1
 8008f72:	817b      	strh	r3, [r7, #10]
 8008f74:	4613      	mov	r3, r2
 8008f76:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f7e:	b2db      	uxtb	r3, r3
 8008f80:	2b20      	cmp	r3, #32
 8008f82:	f040 80db 	bne.w	800913c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008f8c:	2b01      	cmp	r3, #1
 8008f8e:	d101      	bne.n	8008f94 <HAL_I2C_Master_Receive+0x30>
 8008f90:	2302      	movs	r3, #2
 8008f92:	e0d4      	b.n	800913e <HAL_I2C_Master_Receive+0x1da>
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	2201      	movs	r2, #1
 8008f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008f9c:	f7fd fc04 	bl	80067a8 <HAL_GetTick>
 8008fa0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	9300      	str	r3, [sp, #0]
 8008fa6:	2319      	movs	r3, #25
 8008fa8:	2201      	movs	r2, #1
 8008faa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008fae:	68f8      	ldr	r0, [r7, #12]
 8008fb0:	f001 fac6 	bl	800a540 <I2C_WaitOnFlagUntilTimeout>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d001      	beq.n	8008fbe <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8008fba:	2301      	movs	r3, #1
 8008fbc:	e0bf      	b.n	800913e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	2222      	movs	r2, #34	; 0x22
 8008fc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	2210      	movs	r2, #16
 8008fca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	687a      	ldr	r2, [r7, #4]
 8008fd8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	893a      	ldrh	r2, [r7, #8]
 8008fde:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fea:	b29b      	uxth	r3, r3
 8008fec:	2bff      	cmp	r3, #255	; 0xff
 8008fee:	d90e      	bls.n	800900e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	22ff      	movs	r2, #255	; 0xff
 8008ff4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ffa:	b2da      	uxtb	r2, r3
 8008ffc:	8979      	ldrh	r1, [r7, #10]
 8008ffe:	4b52      	ldr	r3, [pc, #328]	; (8009148 <HAL_I2C_Master_Receive+0x1e4>)
 8009000:	9300      	str	r3, [sp, #0]
 8009002:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009006:	68f8      	ldr	r0, [r7, #12]
 8009008:	f001 fc28 	bl	800a85c <I2C_TransferConfig>
 800900c:	e06d      	b.n	80090ea <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009012:	b29a      	uxth	r2, r3
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800901c:	b2da      	uxtb	r2, r3
 800901e:	8979      	ldrh	r1, [r7, #10]
 8009020:	4b49      	ldr	r3, [pc, #292]	; (8009148 <HAL_I2C_Master_Receive+0x1e4>)
 8009022:	9300      	str	r3, [sp, #0]
 8009024:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009028:	68f8      	ldr	r0, [r7, #12]
 800902a:	f001 fc17 	bl	800a85c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800902e:	e05c      	b.n	80090ea <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009030:	697a      	ldr	r2, [r7, #20]
 8009032:	6a39      	ldr	r1, [r7, #32]
 8009034:	68f8      	ldr	r0, [r7, #12]
 8009036:	f001 fb3f 	bl	800a6b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800903a:	4603      	mov	r3, r0
 800903c:	2b00      	cmp	r3, #0
 800903e:	d001      	beq.n	8009044 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8009040:	2301      	movs	r3, #1
 8009042:	e07c      	b.n	800913e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800904e:	b2d2      	uxtb	r2, r2
 8009050:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009056:	1c5a      	adds	r2, r3, #1
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009060:	3b01      	subs	r3, #1
 8009062:	b29a      	uxth	r2, r3
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800906c:	b29b      	uxth	r3, r3
 800906e:	3b01      	subs	r3, #1
 8009070:	b29a      	uxth	r2, r3
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800907a:	b29b      	uxth	r3, r3
 800907c:	2b00      	cmp	r3, #0
 800907e:	d034      	beq.n	80090ea <HAL_I2C_Master_Receive+0x186>
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009084:	2b00      	cmp	r3, #0
 8009086:	d130      	bne.n	80090ea <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	9300      	str	r3, [sp, #0]
 800908c:	6a3b      	ldr	r3, [r7, #32]
 800908e:	2200      	movs	r2, #0
 8009090:	2180      	movs	r1, #128	; 0x80
 8009092:	68f8      	ldr	r0, [r7, #12]
 8009094:	f001 fa54 	bl	800a540 <I2C_WaitOnFlagUntilTimeout>
 8009098:	4603      	mov	r3, r0
 800909a:	2b00      	cmp	r3, #0
 800909c:	d001      	beq.n	80090a2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800909e:	2301      	movs	r3, #1
 80090a0:	e04d      	b.n	800913e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090a6:	b29b      	uxth	r3, r3
 80090a8:	2bff      	cmp	r3, #255	; 0xff
 80090aa:	d90e      	bls.n	80090ca <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	22ff      	movs	r2, #255	; 0xff
 80090b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090b6:	b2da      	uxtb	r2, r3
 80090b8:	8979      	ldrh	r1, [r7, #10]
 80090ba:	2300      	movs	r3, #0
 80090bc:	9300      	str	r3, [sp, #0]
 80090be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80090c2:	68f8      	ldr	r0, [r7, #12]
 80090c4:	f001 fbca 	bl	800a85c <I2C_TransferConfig>
 80090c8:	e00f      	b.n	80090ea <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090ce:	b29a      	uxth	r2, r3
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090d8:	b2da      	uxtb	r2, r3
 80090da:	8979      	ldrh	r1, [r7, #10]
 80090dc:	2300      	movs	r3, #0
 80090de:	9300      	str	r3, [sp, #0]
 80090e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80090e4:	68f8      	ldr	r0, [r7, #12]
 80090e6:	f001 fbb9 	bl	800a85c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090ee:	b29b      	uxth	r3, r3
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d19d      	bne.n	8009030 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80090f4:	697a      	ldr	r2, [r7, #20]
 80090f6:	6a39      	ldr	r1, [r7, #32]
 80090f8:	68f8      	ldr	r0, [r7, #12]
 80090fa:	f001 faa1 	bl	800a640 <I2C_WaitOnSTOPFlagUntilTimeout>
 80090fe:	4603      	mov	r3, r0
 8009100:	2b00      	cmp	r3, #0
 8009102:	d001      	beq.n	8009108 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8009104:	2301      	movs	r3, #1
 8009106:	e01a      	b.n	800913e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	2220      	movs	r2, #32
 800910e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	6859      	ldr	r1, [r3, #4]
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681a      	ldr	r2, [r3, #0]
 800911a:	4b0c      	ldr	r3, [pc, #48]	; (800914c <HAL_I2C_Master_Receive+0x1e8>)
 800911c:	400b      	ands	r3, r1
 800911e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	2220      	movs	r2, #32
 8009124:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	2200      	movs	r2, #0
 800912c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	2200      	movs	r2, #0
 8009134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009138:	2300      	movs	r3, #0
 800913a:	e000      	b.n	800913e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800913c:	2302      	movs	r3, #2
  }
}
 800913e:	4618      	mov	r0, r3
 8009140:	3718      	adds	r7, #24
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}
 8009146:	bf00      	nop
 8009148:	80002400 	.word	0x80002400
 800914c:	fe00e800 	.word	0xfe00e800

08009150 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b088      	sub	sp, #32
 8009154:	af02      	add	r7, sp, #8
 8009156:	60f8      	str	r0, [r7, #12]
 8009158:	607a      	str	r2, [r7, #4]
 800915a:	461a      	mov	r2, r3
 800915c:	460b      	mov	r3, r1
 800915e:	817b      	strh	r3, [r7, #10]
 8009160:	4613      	mov	r3, r2
 8009162:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800916a:	b2db      	uxtb	r3, r3
 800916c:	2b20      	cmp	r3, #32
 800916e:	d153      	bne.n	8009218 <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	699b      	ldr	r3, [r3, #24]
 8009176:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800917a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800917e:	d101      	bne.n	8009184 <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
 8009180:	2302      	movs	r3, #2
 8009182:	e04a      	b.n	800921a <HAL_I2C_Master_Receive_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800918a:	2b01      	cmp	r3, #1
 800918c:	d101      	bne.n	8009192 <HAL_I2C_Master_Receive_IT+0x42>
 800918e:	2302      	movs	r3, #2
 8009190:	e043      	b.n	800921a <HAL_I2C_Master_Receive_IT+0xca>
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2201      	movs	r2, #1
 8009196:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	2222      	movs	r2, #34	; 0x22
 800919e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	2210      	movs	r2, #16
 80091a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2200      	movs	r2, #0
 80091ae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	687a      	ldr	r2, [r7, #4]
 80091b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	893a      	ldrh	r2, [r7, #8]
 80091ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	4a19      	ldr	r2, [pc, #100]	; (8009224 <HAL_I2C_Master_Receive_IT+0xd4>)
 80091c0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	4a18      	ldr	r2, [pc, #96]	; (8009228 <HAL_I2C_Master_Receive_IT+0xd8>)
 80091c6:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091cc:	b29b      	uxth	r3, r3
 80091ce:	2bff      	cmp	r3, #255	; 0xff
 80091d0:	d906      	bls.n	80091e0 <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	22ff      	movs	r2, #255	; 0xff
 80091d6:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80091d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80091dc:	617b      	str	r3, [r7, #20]
 80091de:	e007      	b.n	80091f0 <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091e4:	b29a      	uxth	r2, r3
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80091ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80091ee:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091f4:	b2da      	uxtb	r2, r3
 80091f6:	8979      	ldrh	r1, [r7, #10]
 80091f8:	4b0c      	ldr	r3, [pc, #48]	; (800922c <HAL_I2C_Master_Receive_IT+0xdc>)
 80091fa:	9300      	str	r3, [sp, #0]
 80091fc:	697b      	ldr	r3, [r7, #20]
 80091fe:	68f8      	ldr	r0, [r7, #12]
 8009200:	f001 fb2c 	bl	800a85c <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2200      	movs	r2, #0
 8009208:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800920c:	2102      	movs	r1, #2
 800920e:	68f8      	ldr	r0, [r7, #12]
 8009210:	f001 fb52 	bl	800a8b8 <I2C_Enable_IRQ>

    return HAL_OK;
 8009214:	2300      	movs	r3, #0
 8009216:	e000      	b.n	800921a <HAL_I2C_Master_Receive_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8009218:	2302      	movs	r3, #2
  }
}
 800921a:	4618      	mov	r0, r3
 800921c:	3718      	adds	r7, #24
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}
 8009222:	bf00      	nop
 8009224:	ffff0000 	.word	0xffff0000
 8009228:	08009535 	.word	0x08009535
 800922c:	80002400 	.word	0x80002400

08009230 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b088      	sub	sp, #32
 8009234:	af02      	add	r7, sp, #8
 8009236:	60f8      	str	r0, [r7, #12]
 8009238:	4608      	mov	r0, r1
 800923a:	4611      	mov	r1, r2
 800923c:	461a      	mov	r2, r3
 800923e:	4603      	mov	r3, r0
 8009240:	817b      	strh	r3, [r7, #10]
 8009242:	460b      	mov	r3, r1
 8009244:	813b      	strh	r3, [r7, #8]
 8009246:	4613      	mov	r3, r2
 8009248:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009250:	b2db      	uxtb	r3, r3
 8009252:	2b20      	cmp	r3, #32
 8009254:	f040 80f9 	bne.w	800944a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009258:	6a3b      	ldr	r3, [r7, #32]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d002      	beq.n	8009264 <HAL_I2C_Mem_Write+0x34>
 800925e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009260:	2b00      	cmp	r3, #0
 8009262:	d105      	bne.n	8009270 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	f44f 7200 	mov.w	r2, #512	; 0x200
 800926a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800926c:	2301      	movs	r3, #1
 800926e:	e0ed      	b.n	800944c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009276:	2b01      	cmp	r3, #1
 8009278:	d101      	bne.n	800927e <HAL_I2C_Mem_Write+0x4e>
 800927a:	2302      	movs	r3, #2
 800927c:	e0e6      	b.n	800944c <HAL_I2C_Mem_Write+0x21c>
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	2201      	movs	r2, #1
 8009282:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009286:	f7fd fa8f 	bl	80067a8 <HAL_GetTick>
 800928a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	9300      	str	r3, [sp, #0]
 8009290:	2319      	movs	r3, #25
 8009292:	2201      	movs	r2, #1
 8009294:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009298:	68f8      	ldr	r0, [r7, #12]
 800929a:	f001 f951 	bl	800a540 <I2C_WaitOnFlagUntilTimeout>
 800929e:	4603      	mov	r3, r0
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d001      	beq.n	80092a8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80092a4:	2301      	movs	r3, #1
 80092a6:	e0d1      	b.n	800944c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	2221      	movs	r2, #33	; 0x21
 80092ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	2240      	movs	r2, #64	; 0x40
 80092b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	2200      	movs	r2, #0
 80092bc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	6a3a      	ldr	r2, [r7, #32]
 80092c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80092c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	2200      	movs	r2, #0
 80092ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80092d0:	88f8      	ldrh	r0, [r7, #6]
 80092d2:	893a      	ldrh	r2, [r7, #8]
 80092d4:	8979      	ldrh	r1, [r7, #10]
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	9301      	str	r3, [sp, #4]
 80092da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092dc:	9300      	str	r3, [sp, #0]
 80092de:	4603      	mov	r3, r0
 80092e0:	68f8      	ldr	r0, [r7, #12]
 80092e2:	f000 fd0f 	bl	8009d04 <I2C_RequestMemoryWrite>
 80092e6:	4603      	mov	r3, r0
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d005      	beq.n	80092f8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	2200      	movs	r2, #0
 80092f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80092f4:	2301      	movs	r3, #1
 80092f6:	e0a9      	b.n	800944c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092fc:	b29b      	uxth	r3, r3
 80092fe:	2bff      	cmp	r3, #255	; 0xff
 8009300:	d90e      	bls.n	8009320 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	22ff      	movs	r2, #255	; 0xff
 8009306:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800930c:	b2da      	uxtb	r2, r3
 800930e:	8979      	ldrh	r1, [r7, #10]
 8009310:	2300      	movs	r3, #0
 8009312:	9300      	str	r3, [sp, #0]
 8009314:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009318:	68f8      	ldr	r0, [r7, #12]
 800931a:	f001 fa9f 	bl	800a85c <I2C_TransferConfig>
 800931e:	e00f      	b.n	8009340 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009324:	b29a      	uxth	r2, r3
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800932e:	b2da      	uxtb	r2, r3
 8009330:	8979      	ldrh	r1, [r7, #10]
 8009332:	2300      	movs	r3, #0
 8009334:	9300      	str	r3, [sp, #0]
 8009336:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800933a:	68f8      	ldr	r0, [r7, #12]
 800933c:	f001 fa8e 	bl	800a85c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009340:	697a      	ldr	r2, [r7, #20]
 8009342:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009344:	68f8      	ldr	r0, [r7, #12]
 8009346:	f001 f93b 	bl	800a5c0 <I2C_WaitOnTXISFlagUntilTimeout>
 800934a:	4603      	mov	r3, r0
 800934c:	2b00      	cmp	r3, #0
 800934e:	d001      	beq.n	8009354 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8009350:	2301      	movs	r3, #1
 8009352:	e07b      	b.n	800944c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009358:	781a      	ldrb	r2, [r3, #0]
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009364:	1c5a      	adds	r2, r3, #1
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800936e:	b29b      	uxth	r3, r3
 8009370:	3b01      	subs	r3, #1
 8009372:	b29a      	uxth	r2, r3
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800937c:	3b01      	subs	r3, #1
 800937e:	b29a      	uxth	r2, r3
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009388:	b29b      	uxth	r3, r3
 800938a:	2b00      	cmp	r3, #0
 800938c:	d034      	beq.n	80093f8 <HAL_I2C_Mem_Write+0x1c8>
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009392:	2b00      	cmp	r3, #0
 8009394:	d130      	bne.n	80093f8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	9300      	str	r3, [sp, #0]
 800939a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800939c:	2200      	movs	r2, #0
 800939e:	2180      	movs	r1, #128	; 0x80
 80093a0:	68f8      	ldr	r0, [r7, #12]
 80093a2:	f001 f8cd 	bl	800a540 <I2C_WaitOnFlagUntilTimeout>
 80093a6:	4603      	mov	r3, r0
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d001      	beq.n	80093b0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80093ac:	2301      	movs	r3, #1
 80093ae:	e04d      	b.n	800944c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093b4:	b29b      	uxth	r3, r3
 80093b6:	2bff      	cmp	r3, #255	; 0xff
 80093b8:	d90e      	bls.n	80093d8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	22ff      	movs	r2, #255	; 0xff
 80093be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093c4:	b2da      	uxtb	r2, r3
 80093c6:	8979      	ldrh	r1, [r7, #10]
 80093c8:	2300      	movs	r3, #0
 80093ca:	9300      	str	r3, [sp, #0]
 80093cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80093d0:	68f8      	ldr	r0, [r7, #12]
 80093d2:	f001 fa43 	bl	800a85c <I2C_TransferConfig>
 80093d6:	e00f      	b.n	80093f8 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093dc:	b29a      	uxth	r2, r3
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093e6:	b2da      	uxtb	r2, r3
 80093e8:	8979      	ldrh	r1, [r7, #10]
 80093ea:	2300      	movs	r3, #0
 80093ec:	9300      	str	r3, [sp, #0]
 80093ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80093f2:	68f8      	ldr	r0, [r7, #12]
 80093f4:	f001 fa32 	bl	800a85c <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093fc:	b29b      	uxth	r3, r3
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d19e      	bne.n	8009340 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009402:	697a      	ldr	r2, [r7, #20]
 8009404:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009406:	68f8      	ldr	r0, [r7, #12]
 8009408:	f001 f91a 	bl	800a640 <I2C_WaitOnSTOPFlagUntilTimeout>
 800940c:	4603      	mov	r3, r0
 800940e:	2b00      	cmp	r3, #0
 8009410:	d001      	beq.n	8009416 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8009412:	2301      	movs	r3, #1
 8009414:	e01a      	b.n	800944c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	2220      	movs	r2, #32
 800941c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	6859      	ldr	r1, [r3, #4]
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681a      	ldr	r2, [r3, #0]
 8009428:	4b0a      	ldr	r3, [pc, #40]	; (8009454 <HAL_I2C_Mem_Write+0x224>)
 800942a:	400b      	ands	r3, r1
 800942c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	2220      	movs	r2, #32
 8009432:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	2200      	movs	r2, #0
 800943a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	2200      	movs	r2, #0
 8009442:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009446:	2300      	movs	r3, #0
 8009448:	e000      	b.n	800944c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800944a:	2302      	movs	r3, #2
  }
}
 800944c:	4618      	mov	r0, r3
 800944e:	3718      	adds	r7, #24
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}
 8009454:	fe00e800 	.word	0xfe00e800

08009458 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b084      	sub	sp, #16
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	699b      	ldr	r3, [r3, #24]
 8009466:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009474:	2b00      	cmp	r3, #0
 8009476:	d005      	beq.n	8009484 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800947c:	68ba      	ldr	r2, [r7, #8]
 800947e:	68f9      	ldr	r1, [r7, #12]
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	4798      	blx	r3
  }
}
 8009484:	bf00      	nop
 8009486:	3710      	adds	r7, #16
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}

0800948c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800948c:	b480      	push	{r7}
 800948e:	b083      	sub	sp, #12
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8009494:	bf00      	nop
 8009496:	370c      	adds	r7, #12
 8009498:	46bd      	mov	sp, r7
 800949a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949e:	4770      	bx	lr

080094a0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80094a0:	b480      	push	{r7}
 80094a2:	b083      	sub	sp, #12
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80094a8:	bf00      	nop
 80094aa:	370c      	adds	r7, #12
 80094ac:	46bd      	mov	sp, r7
 80094ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b2:	4770      	bx	lr

080094b4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80094b4:	b480      	push	{r7}
 80094b6:	b083      	sub	sp, #12
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
 80094bc:	460b      	mov	r3, r1
 80094be:	70fb      	strb	r3, [r7, #3]
 80094c0:	4613      	mov	r3, r2
 80094c2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80094c4:	bf00      	nop
 80094c6:	370c      	adds	r7, #12
 80094c8:	46bd      	mov	sp, r7
 80094ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ce:	4770      	bx	lr

080094d0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b083      	sub	sp, #12
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80094d8:	bf00      	nop
 80094da:	370c      	adds	r7, #12
 80094dc:	46bd      	mov	sp, r7
 80094de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e2:	4770      	bx	lr

080094e4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80094e4:	b480      	push	{r7}
 80094e6:	b083      	sub	sp, #12
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80094ec:	bf00      	nop
 80094ee:	370c      	adds	r7, #12
 80094f0:	46bd      	mov	sp, r7
 80094f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f6:	4770      	bx	lr

080094f8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b083      	sub	sp, #12
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8009500:	bf00      	nop
 8009502:	370c      	adds	r7, #12
 8009504:	46bd      	mov	sp, r7
 8009506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950a:	4770      	bx	lr

0800950c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800950c:	b480      	push	{r7}
 800950e:	b083      	sub	sp, #12
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8009514:	bf00      	nop
 8009516:	370c      	adds	r7, #12
 8009518:	46bd      	mov	sp, r7
 800951a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951e:	4770      	bx	lr

08009520 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009520:	b480      	push	{r7}
 8009522:	b083      	sub	sp, #12
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8009528:	bf00      	nop
 800952a:	370c      	adds	r7, #12
 800952c:	46bd      	mov	sp, r7
 800952e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009532:	4770      	bx	lr

08009534 <I2C_Master_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b088      	sub	sp, #32
 8009538:	af02      	add	r7, sp, #8
 800953a:	60f8      	str	r0, [r7, #12]
 800953c:	60b9      	str	r1, [r7, #8]
 800953e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800954a:	2b01      	cmp	r3, #1
 800954c:	d101      	bne.n	8009552 <I2C_Master_ISR_IT+0x1e>
 800954e:	2302      	movs	r3, #2
 8009550:	e115      	b.n	800977e <I2C_Master_ISR_IT+0x24a>
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	2201      	movs	r2, #1
 8009556:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	091b      	lsrs	r3, r3, #4
 800955e:	f003 0301 	and.w	r3, r3, #1
 8009562:	2b00      	cmp	r3, #0
 8009564:	d013      	beq.n	800958e <I2C_Master_ISR_IT+0x5a>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	091b      	lsrs	r3, r3, #4
 800956a:	f003 0301 	and.w	r3, r3, #1
 800956e:	2b00      	cmp	r3, #0
 8009570:	d00d      	beq.n	800958e <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	2210      	movs	r2, #16
 8009578:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800957e:	f043 0204 	orr.w	r2, r3, #4
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009586:	68f8      	ldr	r0, [r7, #12]
 8009588:	f000 ff92 	bl	800a4b0 <I2C_Flush_TXDR>
 800958c:	e0e2      	b.n	8009754 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	089b      	lsrs	r3, r3, #2
 8009592:	f003 0301 	and.w	r3, r3, #1
 8009596:	2b00      	cmp	r3, #0
 8009598:	d023      	beq.n	80095e2 <I2C_Master_ISR_IT+0xae>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	089b      	lsrs	r3, r3, #2
 800959e:	f003 0301 	and.w	r3, r3, #1
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d01d      	beq.n	80095e2 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	f023 0304 	bic.w	r3, r3, #4
 80095ac:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b8:	b2d2      	uxtb	r2, r2
 80095ba:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c0:	1c5a      	adds	r2, r3, #1
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095ca:	3b01      	subs	r3, #1
 80095cc:	b29a      	uxth	r2, r3
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095d6:	b29b      	uxth	r3, r3
 80095d8:	3b01      	subs	r3, #1
 80095da:	b29a      	uxth	r2, r3
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80095e0:	e0b8      	b.n	8009754 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	085b      	lsrs	r3, r3, #1
 80095e6:	f003 0301 	and.w	r3, r3, #1
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d01e      	beq.n	800962c <I2C_Master_ISR_IT+0xf8>
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	085b      	lsrs	r3, r3, #1
 80095f2:	f003 0301 	and.w	r3, r3, #1
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d018      	beq.n	800962c <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095fe:	781a      	ldrb	r2, [r3, #0]
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800960a:	1c5a      	adds	r2, r3, #1
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009614:	3b01      	subs	r3, #1
 8009616:	b29a      	uxth	r2, r3
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009620:	b29b      	uxth	r3, r3
 8009622:	3b01      	subs	r3, #1
 8009624:	b29a      	uxth	r2, r3
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	855a      	strh	r2, [r3, #42]	; 0x2a
 800962a:	e093      	b.n	8009754 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	09db      	lsrs	r3, r3, #7
 8009630:	f003 0301 	and.w	r3, r3, #1
 8009634:	2b00      	cmp	r3, #0
 8009636:	d05e      	beq.n	80096f6 <I2C_Master_ISR_IT+0x1c2>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	099b      	lsrs	r3, r3, #6
 800963c:	f003 0301 	and.w	r3, r3, #1
 8009640:	2b00      	cmp	r3, #0
 8009642:	d058      	beq.n	80096f6 <I2C_Master_ISR_IT+0x1c2>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009648:	b29b      	uxth	r3, r3
 800964a:	2b00      	cmp	r3, #0
 800964c:	d041      	beq.n	80096d2 <I2C_Master_ISR_IT+0x19e>
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009652:	2b00      	cmp	r3, #0
 8009654:	d13d      	bne.n	80096d2 <I2C_Master_ISR_IT+0x19e>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	685b      	ldr	r3, [r3, #4]
 800965c:	b29b      	uxth	r3, r3
 800965e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009662:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009668:	b29b      	uxth	r3, r3
 800966a:	2bff      	cmp	r3, #255	; 0xff
 800966c:	d90e      	bls.n	800968c <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	22ff      	movs	r2, #255	; 0xff
 8009672:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009678:	b2da      	uxtb	r2, r3
 800967a:	8a79      	ldrh	r1, [r7, #18]
 800967c:	2300      	movs	r3, #0
 800967e:	9300      	str	r3, [sp, #0]
 8009680:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009684:	68f8      	ldr	r0, [r7, #12]
 8009686:	f001 f8e9 	bl	800a85c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800968a:	e033      	b.n	80096f4 <I2C_Master_ISR_IT+0x1c0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009690:	b29a      	uxth	r2, r3
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800969a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800969e:	d00c      	beq.n	80096ba <I2C_Master_ISR_IT+0x186>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096a4:	b2da      	uxtb	r2, r3
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80096aa:	8a79      	ldrh	r1, [r7, #18]
 80096ac:	2300      	movs	r3, #0
 80096ae:	9300      	str	r3, [sp, #0]
 80096b0:	4603      	mov	r3, r0
 80096b2:	68f8      	ldr	r0, [r7, #12]
 80096b4:	f001 f8d2 	bl	800a85c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80096b8:	e01c      	b.n	80096f4 <I2C_Master_ISR_IT+0x1c0>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096be:	b2da      	uxtb	r2, r3
 80096c0:	8a79      	ldrh	r1, [r7, #18]
 80096c2:	2300      	movs	r3, #0
 80096c4:	9300      	str	r3, [sp, #0]
 80096c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80096ca:	68f8      	ldr	r0, [r7, #12]
 80096cc:	f001 f8c6 	bl	800a85c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80096d0:	e010      	b.n	80096f4 <I2C_Master_ISR_IT+0x1c0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	685b      	ldr	r3, [r3, #4]
 80096d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80096e0:	d003      	beq.n	80096ea <I2C_Master_ISR_IT+0x1b6>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80096e2:	68f8      	ldr	r0, [r7, #12]
 80096e4:	f000 fbe4 	bl	8009eb0 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80096e8:	e034      	b.n	8009754 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80096ea:	2140      	movs	r1, #64	; 0x40
 80096ec:	68f8      	ldr	r0, [r7, #12]
 80096ee:	f000 fe1f 	bl	800a330 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80096f2:	e02f      	b.n	8009754 <I2C_Master_ISR_IT+0x220>
 80096f4:	e02e      	b.n	8009754 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	099b      	lsrs	r3, r3, #6
 80096fa:	f003 0301 	and.w	r3, r3, #1
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d028      	beq.n	8009754 <I2C_Master_ISR_IT+0x220>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	099b      	lsrs	r3, r3, #6
 8009706:	f003 0301 	and.w	r3, r3, #1
 800970a:	2b00      	cmp	r3, #0
 800970c:	d022      	beq.n	8009754 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009712:	b29b      	uxth	r3, r3
 8009714:	2b00      	cmp	r3, #0
 8009716:	d119      	bne.n	800974c <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	685b      	ldr	r3, [r3, #4]
 800971e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009722:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009726:	d015      	beq.n	8009754 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800972c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009730:	d108      	bne.n	8009744 <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	685a      	ldr	r2, [r3, #4]
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009740:	605a      	str	r2, [r3, #4]
 8009742:	e007      	b.n	8009754 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8009744:	68f8      	ldr	r0, [r7, #12]
 8009746:	f000 fbb3 	bl	8009eb0 <I2C_ITMasterSeqCplt>
 800974a:	e003      	b.n	8009754 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800974c:	2140      	movs	r1, #64	; 0x40
 800974e:	68f8      	ldr	r0, [r7, #12]
 8009750:	f000 fdee 	bl	800a330 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	095b      	lsrs	r3, r3, #5
 8009758:	f003 0301 	and.w	r3, r3, #1
 800975c:	2b00      	cmp	r3, #0
 800975e:	d009      	beq.n	8009774 <I2C_Master_ISR_IT+0x240>
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	095b      	lsrs	r3, r3, #5
 8009764:	f003 0301 	and.w	r3, r3, #1
 8009768:	2b00      	cmp	r3, #0
 800976a:	d003      	beq.n	8009774 <I2C_Master_ISR_IT+0x240>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800976c:	6979      	ldr	r1, [r7, #20]
 800976e:	68f8      	ldr	r0, [r7, #12]
 8009770:	f000 fc18 	bl	8009fa4 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	2200      	movs	r2, #0
 8009778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800977c:	2300      	movs	r3, #0
}
 800977e:	4618      	mov	r0, r3
 8009780:	3718      	adds	r7, #24
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}

08009786 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8009786:	b580      	push	{r7, lr}
 8009788:	b086      	sub	sp, #24
 800978a:	af00      	add	r7, sp, #0
 800978c:	60f8      	str	r0, [r7, #12]
 800978e:	60b9      	str	r1, [r7, #8]
 8009790:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009796:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80097a2:	2b01      	cmp	r3, #1
 80097a4:	d101      	bne.n	80097aa <I2C_Slave_ISR_IT+0x24>
 80097a6:	2302      	movs	r3, #2
 80097a8:	e0ec      	b.n	8009984 <I2C_Slave_ISR_IT+0x1fe>
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2201      	movs	r2, #1
 80097ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	095b      	lsrs	r3, r3, #5
 80097b6:	f003 0301 	and.w	r3, r3, #1
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d009      	beq.n	80097d2 <I2C_Slave_ISR_IT+0x4c>
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	095b      	lsrs	r3, r3, #5
 80097c2:	f003 0301 	and.w	r3, r3, #1
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d003      	beq.n	80097d2 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80097ca:	6939      	ldr	r1, [r7, #16]
 80097cc:	68f8      	ldr	r0, [r7, #12]
 80097ce:	f000 fc85 	bl	800a0dc <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	091b      	lsrs	r3, r3, #4
 80097d6:	f003 0301 	and.w	r3, r3, #1
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d04d      	beq.n	800987a <I2C_Slave_ISR_IT+0xf4>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	091b      	lsrs	r3, r3, #4
 80097e2:	f003 0301 	and.w	r3, r3, #1
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d047      	beq.n	800987a <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097ee:	b29b      	uxth	r3, r3
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d128      	bne.n	8009846 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80097fa:	b2db      	uxtb	r3, r3
 80097fc:	2b28      	cmp	r3, #40	; 0x28
 80097fe:	d108      	bne.n	8009812 <I2C_Slave_ISR_IT+0x8c>
 8009800:	697b      	ldr	r3, [r7, #20]
 8009802:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009806:	d104      	bne.n	8009812 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8009808:	6939      	ldr	r1, [r7, #16]
 800980a:	68f8      	ldr	r0, [r7, #12]
 800980c:	f000 fd3c 	bl	800a288 <I2C_ITListenCplt>
 8009810:	e032      	b.n	8009878 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009818:	b2db      	uxtb	r3, r3
 800981a:	2b29      	cmp	r3, #41	; 0x29
 800981c:	d10e      	bne.n	800983c <I2C_Slave_ISR_IT+0xb6>
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009824:	d00a      	beq.n	800983c <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	2210      	movs	r2, #16
 800982c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800982e:	68f8      	ldr	r0, [r7, #12]
 8009830:	f000 fe3e 	bl	800a4b0 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8009834:	68f8      	ldr	r0, [r7, #12]
 8009836:	f000 fb78 	bl	8009f2a <I2C_ITSlaveSeqCplt>
 800983a:	e01d      	b.n	8009878 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	2210      	movs	r2, #16
 8009842:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8009844:	e096      	b.n	8009974 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	2210      	movs	r2, #16
 800984c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009852:	f043 0204 	orr.w	r2, r3, #4
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800985a:	697b      	ldr	r3, [r7, #20]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d004      	beq.n	800986a <I2C_Slave_ISR_IT+0xe4>
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009866:	f040 8085 	bne.w	8009974 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800986e:	4619      	mov	r1, r3
 8009870:	68f8      	ldr	r0, [r7, #12]
 8009872:	f000 fd5d 	bl	800a330 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8009876:	e07d      	b.n	8009974 <I2C_Slave_ISR_IT+0x1ee>
 8009878:	e07c      	b.n	8009974 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800987a:	693b      	ldr	r3, [r7, #16]
 800987c:	089b      	lsrs	r3, r3, #2
 800987e:	f003 0301 	and.w	r3, r3, #1
 8009882:	2b00      	cmp	r3, #0
 8009884:	d030      	beq.n	80098e8 <I2C_Slave_ISR_IT+0x162>
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	089b      	lsrs	r3, r3, #2
 800988a:	f003 0301 	and.w	r3, r3, #1
 800988e:	2b00      	cmp	r3, #0
 8009890:	d02a      	beq.n	80098e8 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009896:	b29b      	uxth	r3, r3
 8009898:	2b00      	cmp	r3, #0
 800989a:	d018      	beq.n	80098ce <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098a6:	b2d2      	uxtb	r2, r2
 80098a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ae:	1c5a      	adds	r2, r3, #1
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098b8:	3b01      	subs	r3, #1
 80098ba:	b29a      	uxth	r2, r3
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098c4:	b29b      	uxth	r3, r3
 80098c6:	3b01      	subs	r3, #1
 80098c8:	b29a      	uxth	r2, r3
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098d2:	b29b      	uxth	r3, r3
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d14f      	bne.n	8009978 <I2C_Slave_ISR_IT+0x1f2>
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80098de:	d04b      	beq.n	8009978 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80098e0:	68f8      	ldr	r0, [r7, #12]
 80098e2:	f000 fb22 	bl	8009f2a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80098e6:	e047      	b.n	8009978 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80098e8:	693b      	ldr	r3, [r7, #16]
 80098ea:	08db      	lsrs	r3, r3, #3
 80098ec:	f003 0301 	and.w	r3, r3, #1
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d00a      	beq.n	800990a <I2C_Slave_ISR_IT+0x184>
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	08db      	lsrs	r3, r3, #3
 80098f8:	f003 0301 	and.w	r3, r3, #1
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d004      	beq.n	800990a <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8009900:	6939      	ldr	r1, [r7, #16]
 8009902:	68f8      	ldr	r0, [r7, #12]
 8009904:	f000 fa52 	bl	8009dac <I2C_ITAddrCplt>
 8009908:	e037      	b.n	800997a <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	085b      	lsrs	r3, r3, #1
 800990e:	f003 0301 	and.w	r3, r3, #1
 8009912:	2b00      	cmp	r3, #0
 8009914:	d031      	beq.n	800997a <I2C_Slave_ISR_IT+0x1f4>
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	085b      	lsrs	r3, r3, #1
 800991a:	f003 0301 	and.w	r3, r3, #1
 800991e:	2b00      	cmp	r3, #0
 8009920:	d02b      	beq.n	800997a <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009926:	b29b      	uxth	r3, r3
 8009928:	2b00      	cmp	r3, #0
 800992a:	d018      	beq.n	800995e <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009930:	781a      	ldrb	r2, [r3, #0]
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800993c:	1c5a      	adds	r2, r3, #1
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009946:	b29b      	uxth	r3, r3
 8009948:	3b01      	subs	r3, #1
 800994a:	b29a      	uxth	r2, r3
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009954:	3b01      	subs	r3, #1
 8009956:	b29a      	uxth	r2, r3
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	851a      	strh	r2, [r3, #40]	; 0x28
 800995c:	e00d      	b.n	800997a <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800995e:	697b      	ldr	r3, [r7, #20]
 8009960:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009964:	d002      	beq.n	800996c <I2C_Slave_ISR_IT+0x1e6>
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d106      	bne.n	800997a <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800996c:	68f8      	ldr	r0, [r7, #12]
 800996e:	f000 fadc 	bl	8009f2a <I2C_ITSlaveSeqCplt>
 8009972:	e002      	b.n	800997a <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8009974:	bf00      	nop
 8009976:	e000      	b.n	800997a <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8009978:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	2200      	movs	r2, #0
 800997e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009982:	2300      	movs	r3, #0
}
 8009984:	4618      	mov	r0, r3
 8009986:	3718      	adds	r7, #24
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}

0800998c <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b088      	sub	sp, #32
 8009990:	af02      	add	r7, sp, #8
 8009992:	60f8      	str	r0, [r7, #12]
 8009994:	60b9      	str	r1, [r7, #8]
 8009996:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800999e:	2b01      	cmp	r3, #1
 80099a0:	d101      	bne.n	80099a6 <I2C_Master_ISR_DMA+0x1a>
 80099a2:	2302      	movs	r3, #2
 80099a4:	e0e1      	b.n	8009b6a <I2C_Master_ISR_DMA+0x1de>
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	2201      	movs	r2, #1
 80099aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	091b      	lsrs	r3, r3, #4
 80099b2:	f003 0301 	and.w	r3, r3, #1
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d017      	beq.n	80099ea <I2C_Master_ISR_DMA+0x5e>
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	091b      	lsrs	r3, r3, #4
 80099be:	f003 0301 	and.w	r3, r3, #1
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d011      	beq.n	80099ea <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	2210      	movs	r2, #16
 80099cc:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099d2:	f043 0204 	orr.w	r2, r3, #4
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80099da:	2112      	movs	r1, #18
 80099dc:	68f8      	ldr	r0, [r7, #12]
 80099de:	f000 ff6b 	bl	800a8b8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80099e2:	68f8      	ldr	r0, [r7, #12]
 80099e4:	f000 fd64 	bl	800a4b0 <I2C_Flush_TXDR>
 80099e8:	e0ba      	b.n	8009b60 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	09db      	lsrs	r3, r3, #7
 80099ee:	f003 0301 	and.w	r3, r3, #1
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d072      	beq.n	8009adc <I2C_Master_ISR_DMA+0x150>
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	099b      	lsrs	r3, r3, #6
 80099fa:	f003 0301 	and.w	r3, r3, #1
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d06c      	beq.n	8009adc <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	681a      	ldr	r2, [r3, #0]
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a10:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a16:	b29b      	uxth	r3, r3
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d04e      	beq.n	8009aba <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	685b      	ldr	r3, [r3, #4]
 8009a22:	b29b      	uxth	r3, r3
 8009a24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009a28:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a2e:	b29b      	uxth	r3, r3
 8009a30:	2bff      	cmp	r3, #255	; 0xff
 8009a32:	d906      	bls.n	8009a42 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	22ff      	movs	r2, #255	; 0xff
 8009a38:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8009a3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009a3e:	617b      	str	r3, [r7, #20]
 8009a40:	e010      	b.n	8009a64 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a46:	b29a      	uxth	r2, r3
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a50:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009a54:	d003      	beq.n	8009a5e <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a5a:	617b      	str	r3, [r7, #20]
 8009a5c:	e002      	b.n	8009a64 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8009a5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009a62:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a68:	b2da      	uxtb	r2, r3
 8009a6a:	8a79      	ldrh	r1, [r7, #18]
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	9300      	str	r3, [sp, #0]
 8009a70:	697b      	ldr	r3, [r7, #20]
 8009a72:	68f8      	ldr	r0, [r7, #12]
 8009a74:	f000 fef2 	bl	800a85c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a7c:	b29a      	uxth	r2, r3
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a82:	1ad3      	subs	r3, r2, r3
 8009a84:	b29a      	uxth	r2, r3
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a90:	b2db      	uxtb	r3, r3
 8009a92:	2b22      	cmp	r3, #34	; 0x22
 8009a94:	d108      	bne.n	8009aa8 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	681a      	ldr	r2, [r3, #0]
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009aa4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8009aa6:	e05b      	b.n	8009b60 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	681a      	ldr	r2, [r3, #0]
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009ab6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8009ab8:	e052      	b.n	8009b60 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	685b      	ldr	r3, [r3, #4]
 8009ac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ac4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009ac8:	d003      	beq.n	8009ad2 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8009aca:	68f8      	ldr	r0, [r7, #12]
 8009acc:	f000 f9f0 	bl	8009eb0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8009ad0:	e046      	b.n	8009b60 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009ad2:	2140      	movs	r1, #64	; 0x40
 8009ad4:	68f8      	ldr	r0, [r7, #12]
 8009ad6:	f000 fc2b 	bl	800a330 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8009ada:	e041      	b.n	8009b60 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	099b      	lsrs	r3, r3, #6
 8009ae0:	f003 0301 	and.w	r3, r3, #1
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d029      	beq.n	8009b3c <I2C_Master_ISR_DMA+0x1b0>
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	099b      	lsrs	r3, r3, #6
 8009aec:	f003 0301 	and.w	r3, r3, #1
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d023      	beq.n	8009b3c <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009af8:	b29b      	uxth	r3, r3
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d119      	bne.n	8009b32 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	685b      	ldr	r3, [r3, #4]
 8009b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b0c:	d027      	beq.n	8009b5e <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b12:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009b16:	d108      	bne.n	8009b2a <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	685a      	ldr	r2, [r3, #4]
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009b26:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8009b28:	e019      	b.n	8009b5e <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8009b2a:	68f8      	ldr	r0, [r7, #12]
 8009b2c:	f000 f9c0 	bl	8009eb0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8009b30:	e015      	b.n	8009b5e <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009b32:	2140      	movs	r1, #64	; 0x40
 8009b34:	68f8      	ldr	r0, [r7, #12]
 8009b36:	f000 fbfb 	bl	800a330 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8009b3a:	e010      	b.n	8009b5e <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	095b      	lsrs	r3, r3, #5
 8009b40:	f003 0301 	and.w	r3, r3, #1
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d00b      	beq.n	8009b60 <I2C_Master_ISR_DMA+0x1d4>
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	095b      	lsrs	r3, r3, #5
 8009b4c:	f003 0301 	and.w	r3, r3, #1
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d005      	beq.n	8009b60 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8009b54:	68b9      	ldr	r1, [r7, #8]
 8009b56:	68f8      	ldr	r0, [r7, #12]
 8009b58:	f000 fa24 	bl	8009fa4 <I2C_ITMasterCplt>
 8009b5c:	e000      	b.n	8009b60 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8009b5e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	2200      	movs	r2, #0
 8009b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009b68:	2300      	movs	r3, #0
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	3718      	adds	r7, #24
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}

08009b72 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8009b72:	b580      	push	{r7, lr}
 8009b74:	b086      	sub	sp, #24
 8009b76:	af00      	add	r7, sp, #0
 8009b78:	60f8      	str	r0, [r7, #12]
 8009b7a:	60b9      	str	r1, [r7, #8]
 8009b7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b82:	613b      	str	r3, [r7, #16]
  uint32_t treatdmanack = 0U;
 8009b84:	2300      	movs	r3, #0
 8009b86:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009b8e:	2b01      	cmp	r3, #1
 8009b90:	d101      	bne.n	8009b96 <I2C_Slave_ISR_DMA+0x24>
 8009b92:	2302      	movs	r3, #2
 8009b94:	e0b1      	b.n	8009cfa <I2C_Slave_ISR_DMA+0x188>
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	2201      	movs	r2, #1
 8009b9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	095b      	lsrs	r3, r3, #5
 8009ba2:	f003 0301 	and.w	r3, r3, #1
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d009      	beq.n	8009bbe <I2C_Slave_ISR_DMA+0x4c>
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	095b      	lsrs	r3, r3, #5
 8009bae:	f003 0301 	and.w	r3, r3, #1
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d003      	beq.n	8009bbe <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8009bb6:	68b9      	ldr	r1, [r7, #8]
 8009bb8:	68f8      	ldr	r0, [r7, #12]
 8009bba:	f000 fa8f 	bl	800a0dc <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009bbe:	68bb      	ldr	r3, [r7, #8]
 8009bc0:	091b      	lsrs	r3, r3, #4
 8009bc2:	f003 0301 	and.w	r3, r3, #1
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	f000 8082 	beq.w	8009cd0 <I2C_Slave_ISR_DMA+0x15e>
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	091b      	lsrs	r3, r3, #4
 8009bd0:	f003 0301 	and.w	r3, r3, #1
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d07b      	beq.n	8009cd0 <I2C_Slave_ISR_DMA+0x15e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	0b9b      	lsrs	r3, r3, #14
 8009bdc:	f003 0301 	and.w	r3, r3, #1
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d105      	bne.n	8009bf0 <I2C_Slave_ISR_DMA+0x7e>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	0bdb      	lsrs	r3, r3, #15
 8009be8:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d068      	beq.n	8009cc2 <I2C_Slave_ISR_DMA+0x150>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d00d      	beq.n	8009c14 <I2C_Slave_ISR_DMA+0xa2>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	0bdb      	lsrs	r3, r3, #15
 8009bfc:	f003 0301 	and.w	r3, r3, #1
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d007      	beq.n	8009c14 <I2C_Slave_ISR_DMA+0xa2>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	685b      	ldr	r3, [r3, #4]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d101      	bne.n	8009c14 <I2C_Slave_ISR_DMA+0xa2>
          {
            treatdmanack = 1U;
 8009c10:	2301      	movs	r3, #1
 8009c12:	617b      	str	r3, [r7, #20]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d00d      	beq.n	8009c38 <I2C_Slave_ISR_DMA+0xc6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	0b9b      	lsrs	r3, r3, #14
 8009c20:	f003 0301 	and.w	r3, r3, #1
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d007      	beq.n	8009c38 <I2C_Slave_ISR_DMA+0xc6>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	685b      	ldr	r3, [r3, #4]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d101      	bne.n	8009c38 <I2C_Slave_ISR_DMA+0xc6>
          {
            treatdmanack = 1U;
 8009c34:	2301      	movs	r3, #1
 8009c36:	617b      	str	r3, [r7, #20]
          }
        }
      }

      if (treatdmanack == 1U)
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	2b01      	cmp	r3, #1
 8009c3c:	d128      	bne.n	8009c90 <I2C_Slave_ISR_DMA+0x11e>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c44:	b2db      	uxtb	r3, r3
 8009c46:	2b28      	cmp	r3, #40	; 0x28
 8009c48:	d108      	bne.n	8009c5c <I2C_Slave_ISR_DMA+0xea>
 8009c4a:	693b      	ldr	r3, [r7, #16]
 8009c4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009c50:	d104      	bne.n	8009c5c <I2C_Slave_ISR_DMA+0xea>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8009c52:	68b9      	ldr	r1, [r7, #8]
 8009c54:	68f8      	ldr	r0, [r7, #12]
 8009c56:	f000 fb17 	bl	800a288 <I2C_ITListenCplt>
 8009c5a:	e031      	b.n	8009cc0 <I2C_Slave_ISR_DMA+0x14e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c62:	b2db      	uxtb	r3, r3
 8009c64:	2b29      	cmp	r3, #41	; 0x29
 8009c66:	d10e      	bne.n	8009c86 <I2C_Slave_ISR_DMA+0x114>
 8009c68:	693b      	ldr	r3, [r7, #16]
 8009c6a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009c6e:	d00a      	beq.n	8009c86 <I2C_Slave_ISR_DMA+0x114>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	2210      	movs	r2, #16
 8009c76:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8009c78:	68f8      	ldr	r0, [r7, #12]
 8009c7a:	f000 fc19 	bl	800a4b0 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8009c7e:	68f8      	ldr	r0, [r7, #12]
 8009c80:	f000 f953 	bl	8009f2a <I2C_ITSlaveSeqCplt>
 8009c84:	e01c      	b.n	8009cc0 <I2C_Slave_ISR_DMA+0x14e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	2210      	movs	r2, #16
 8009c8c:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8009c8e:	e01d      	b.n	8009ccc <I2C_Slave_ISR_DMA+0x15a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	2210      	movs	r2, #16
 8009c96:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c9c:	f043 0204 	orr.w	r2, r3, #4
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	645a      	str	r2, [r3, #68]	; 0x44

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d003      	beq.n	8009cb2 <I2C_Slave_ISR_DMA+0x140>
 8009caa:	693b      	ldr	r3, [r7, #16]
 8009cac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009cb0:	d10c      	bne.n	8009ccc <I2C_Slave_ISR_DMA+0x15a>
        {
          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cb6:	4619      	mov	r1, r3
 8009cb8:	68f8      	ldr	r0, [r7, #12]
 8009cba:	f000 fb39 	bl	800a330 <I2C_ITError>
      if (treatdmanack == 1U)
 8009cbe:	e005      	b.n	8009ccc <I2C_Slave_ISR_DMA+0x15a>
 8009cc0:	e004      	b.n	8009ccc <I2C_Slave_ISR_DMA+0x15a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	2210      	movs	r2, #16
 8009cc8:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009cca:	e011      	b.n	8009cf0 <I2C_Slave_ISR_DMA+0x17e>
      if (treatdmanack == 1U)
 8009ccc:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009cce:	e00f      	b.n	8009cf0 <I2C_Slave_ISR_DMA+0x17e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	08db      	lsrs	r3, r3, #3
 8009cd4:	f003 0301 	and.w	r3, r3, #1
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d009      	beq.n	8009cf0 <I2C_Slave_ISR_DMA+0x17e>
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	08db      	lsrs	r3, r3, #3
 8009ce0:	f003 0301 	and.w	r3, r3, #1
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d003      	beq.n	8009cf0 <I2C_Slave_ISR_DMA+0x17e>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8009ce8:	68b9      	ldr	r1, [r7, #8]
 8009cea:	68f8      	ldr	r0, [r7, #12]
 8009cec:	f000 f85e 	bl	8009dac <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009cf8:	2300      	movs	r3, #0
}
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	3718      	adds	r7, #24
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}
	...

08009d04 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b086      	sub	sp, #24
 8009d08:	af02      	add	r7, sp, #8
 8009d0a:	60f8      	str	r0, [r7, #12]
 8009d0c:	4608      	mov	r0, r1
 8009d0e:	4611      	mov	r1, r2
 8009d10:	461a      	mov	r2, r3
 8009d12:	4603      	mov	r3, r0
 8009d14:	817b      	strh	r3, [r7, #10]
 8009d16:	460b      	mov	r3, r1
 8009d18:	813b      	strh	r3, [r7, #8]
 8009d1a:	4613      	mov	r3, r2
 8009d1c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009d1e:	88fb      	ldrh	r3, [r7, #6]
 8009d20:	b2da      	uxtb	r2, r3
 8009d22:	8979      	ldrh	r1, [r7, #10]
 8009d24:	4b20      	ldr	r3, [pc, #128]	; (8009da8 <I2C_RequestMemoryWrite+0xa4>)
 8009d26:	9300      	str	r3, [sp, #0]
 8009d28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009d2c:	68f8      	ldr	r0, [r7, #12]
 8009d2e:	f000 fd95 	bl	800a85c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009d32:	69fa      	ldr	r2, [r7, #28]
 8009d34:	69b9      	ldr	r1, [r7, #24]
 8009d36:	68f8      	ldr	r0, [r7, #12]
 8009d38:	f000 fc42 	bl	800a5c0 <I2C_WaitOnTXISFlagUntilTimeout>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d001      	beq.n	8009d46 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8009d42:	2301      	movs	r3, #1
 8009d44:	e02c      	b.n	8009da0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009d46:	88fb      	ldrh	r3, [r7, #6]
 8009d48:	2b01      	cmp	r3, #1
 8009d4a:	d105      	bne.n	8009d58 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009d4c:	893b      	ldrh	r3, [r7, #8]
 8009d4e:	b2da      	uxtb	r2, r3
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	629a      	str	r2, [r3, #40]	; 0x28
 8009d56:	e015      	b.n	8009d84 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009d58:	893b      	ldrh	r3, [r7, #8]
 8009d5a:	0a1b      	lsrs	r3, r3, #8
 8009d5c:	b29b      	uxth	r3, r3
 8009d5e:	b2da      	uxtb	r2, r3
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009d66:	69fa      	ldr	r2, [r7, #28]
 8009d68:	69b9      	ldr	r1, [r7, #24]
 8009d6a:	68f8      	ldr	r0, [r7, #12]
 8009d6c:	f000 fc28 	bl	800a5c0 <I2C_WaitOnTXISFlagUntilTimeout>
 8009d70:	4603      	mov	r3, r0
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d001      	beq.n	8009d7a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8009d76:	2301      	movs	r3, #1
 8009d78:	e012      	b.n	8009da0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009d7a:	893b      	ldrh	r3, [r7, #8]
 8009d7c:	b2da      	uxtb	r2, r3
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009d84:	69fb      	ldr	r3, [r7, #28]
 8009d86:	9300      	str	r3, [sp, #0]
 8009d88:	69bb      	ldr	r3, [r7, #24]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	2180      	movs	r1, #128	; 0x80
 8009d8e:	68f8      	ldr	r0, [r7, #12]
 8009d90:	f000 fbd6 	bl	800a540 <I2C_WaitOnFlagUntilTimeout>
 8009d94:	4603      	mov	r3, r0
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d001      	beq.n	8009d9e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	e000      	b.n	8009da0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8009d9e:	2300      	movs	r3, #0
}
 8009da0:	4618      	mov	r0, r3
 8009da2:	3710      	adds	r7, #16
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bd80      	pop	{r7, pc}
 8009da8:	80002000 	.word	0x80002000

08009dac <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b084      	sub	sp, #16
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
 8009db4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009dbc:	b2db      	uxtb	r3, r3
 8009dbe:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009dc2:	2b28      	cmp	r3, #40	; 0x28
 8009dc4:	d168      	bne.n	8009e98 <I2C_ITAddrCplt+0xec>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	699b      	ldr	r3, [r3, #24]
 8009dcc:	0c1b      	lsrs	r3, r3, #16
 8009dce:	b2db      	uxtb	r3, r3
 8009dd0:	f003 0301 	and.w	r3, r3, #1
 8009dd4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	699b      	ldr	r3, [r3, #24]
 8009ddc:	0c1b      	lsrs	r3, r3, #16
 8009dde:	b29b      	uxth	r3, r3
 8009de0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8009de4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	689b      	ldr	r3, [r3, #8]
 8009dec:	b29b      	uxth	r3, r3
 8009dee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009df2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	68db      	ldr	r3, [r3, #12]
 8009dfa:	b29b      	uxth	r3, r3
 8009dfc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8009e00:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	68db      	ldr	r3, [r3, #12]
 8009e06:	2b02      	cmp	r3, #2
 8009e08:	d137      	bne.n	8009e7a <I2C_ITAddrCplt+0xce>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8009e0a:	897b      	ldrh	r3, [r7, #10]
 8009e0c:	09db      	lsrs	r3, r3, #7
 8009e0e:	b29a      	uxth	r2, r3
 8009e10:	89bb      	ldrh	r3, [r7, #12]
 8009e12:	4053      	eors	r3, r2
 8009e14:	b29b      	uxth	r3, r3
 8009e16:	f003 0306 	and.w	r3, r3, #6
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d11c      	bne.n	8009e58 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8009e1e:	897b      	ldrh	r3, [r7, #10]
 8009e20:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e26:	1c5a      	adds	r2, r3, #1
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e30:	2b02      	cmp	r3, #2
 8009e32:	d139      	bne.n	8009ea8 <I2C_ITAddrCplt+0xfc>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2200      	movs	r2, #0
 8009e38:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	2208      	movs	r2, #8
 8009e40:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2200      	movs	r2, #0
 8009e46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8009e4a:	89ba      	ldrh	r2, [r7, #12]
 8009e4c:	7bfb      	ldrb	r3, [r7, #15]
 8009e4e:	4619      	mov	r1, r3
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f7ff fb2f 	bl	80094b4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8009e56:	e027      	b.n	8009ea8 <I2C_ITAddrCplt+0xfc>
        slaveaddrcode = ownadd2code;
 8009e58:	893b      	ldrh	r3, [r7, #8]
 8009e5a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8009e5c:	2104      	movs	r1, #4
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f000 fd98 	bl	800a994 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2200      	movs	r2, #0
 8009e68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8009e6c:	89ba      	ldrh	r2, [r7, #12]
 8009e6e:	7bfb      	ldrb	r3, [r7, #15]
 8009e70:	4619      	mov	r1, r3
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f7ff fb1e 	bl	80094b4 <HAL_I2C_AddrCallback>
}
 8009e78:	e016      	b.n	8009ea8 <I2C_ITAddrCplt+0xfc>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8009e7a:	2104      	movs	r1, #4
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f000 fd89 	bl	800a994 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	2200      	movs	r2, #0
 8009e86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8009e8a:	89ba      	ldrh	r2, [r7, #12]
 8009e8c:	7bfb      	ldrb	r3, [r7, #15]
 8009e8e:	4619      	mov	r1, r3
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f7ff fb0f 	bl	80094b4 <HAL_I2C_AddrCallback>
}
 8009e96:	e007      	b.n	8009ea8 <I2C_ITAddrCplt+0xfc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	2208      	movs	r2, #8
 8009e9e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8009ea8:	bf00      	nop
 8009eaa:	3710      	adds	r7, #16
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}

08009eb0 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b082      	sub	sp, #8
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009ec6:	b2db      	uxtb	r3, r3
 8009ec8:	2b21      	cmp	r3, #33	; 0x21
 8009eca:	d115      	bne.n	8009ef8 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2220      	movs	r2, #32
 8009ed0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2211      	movs	r2, #17
 8009ed8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2200      	movs	r2, #0
 8009ede:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009ee0:	2101      	movs	r1, #1
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f000 fd56 	bl	800a994 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2200      	movs	r2, #0
 8009eec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f7f9 ffed 	bl	8003ed0 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009ef6:	e014      	b.n	8009f22 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2220      	movs	r2, #32
 8009efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2212      	movs	r2, #18
 8009f04:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2200      	movs	r2, #0
 8009f0a:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8009f0c:	2102      	movs	r1, #2
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f000 fd40 	bl	800a994 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2200      	movs	r2, #0
 8009f18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f7f9 ffed 	bl	8003efc <HAL_I2C_MasterRxCpltCallback>
}
 8009f22:	bf00      	nop
 8009f24:	3708      	adds	r7, #8
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}

08009f2a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8009f2a:	b580      	push	{r7, lr}
 8009f2c:	b082      	sub	sp, #8
 8009f2e:	af00      	add	r7, sp, #0
 8009f30:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2200      	movs	r2, #0
 8009f36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009f40:	b2db      	uxtb	r3, r3
 8009f42:	2b29      	cmp	r3, #41	; 0x29
 8009f44:	d112      	bne.n	8009f6c <I2C_ITSlaveSeqCplt+0x42>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2228      	movs	r2, #40	; 0x28
 8009f4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2221      	movs	r2, #33	; 0x21
 8009f52:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009f54:	2101      	movs	r1, #1
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f000 fd1c 	bl	800a994 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2200      	movs	r2, #0
 8009f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f7ff fa91 	bl	800948c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009f6a:	e017      	b.n	8009f9c <I2C_ITSlaveSeqCplt+0x72>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009f72:	b2db      	uxtb	r3, r3
 8009f74:	2b2a      	cmp	r3, #42	; 0x2a
 8009f76:	d111      	bne.n	8009f9c <I2C_ITSlaveSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2228      	movs	r2, #40	; 0x28
 8009f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2222      	movs	r2, #34	; 0x22
 8009f84:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8009f86:	2102      	movs	r1, #2
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f000 fd03 	bl	800a994 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2200      	movs	r2, #0
 8009f92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f7ff fa82 	bl	80094a0 <HAL_I2C_SlaveRxCpltCallback>
}
 8009f9c:	bf00      	nop
 8009f9e:	3708      	adds	r7, #8
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}

08009fa4 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b084      	sub	sp, #16
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
 8009fac:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	2220      	movs	r2, #32
 8009fb4:	61da      	str	r2, [r3, #28]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	6859      	ldr	r1, [r3, #4]
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681a      	ldr	r2, [r3, #0]
 8009fc0:	4b44      	ldr	r3, [pc, #272]	; (800a0d4 <I2C_ITMasterCplt+0x130>)
 8009fc2:	400b      	ands	r3, r1
 8009fc4:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->PreviousState = I2C_STATE_NONE;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2200      	movs	r2, #0
 8009fca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->XferISR       = NULL;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2200      	movs	r2, #0
 8009fd0:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	4a40      	ldr	r2, [pc, #256]	; (800a0d8 <I2C_ITMasterCplt+0x134>)
 8009fd6:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET)
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	091b      	lsrs	r3, r3, #4
 8009fdc:	f003 0301 	and.w	r3, r3, #1
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d009      	beq.n	8009ff8 <I2C_ITMasterCplt+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	2210      	movs	r2, #16
 8009fea:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ff0:	f043 0204 	orr.w	r2, r3, #4
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f000 fa59 	bl	800a4b0 <I2C_Flush_TXDR>

  /* Disable Interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8009ffe:	2103      	movs	r1, #3
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f000 fcc7 	bl	800a994 <I2C_Disable_IRQ>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a00a:	60fb      	str	r3, [r7, #12]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a012:	b2db      	uxtb	r3, r3
 800a014:	2b60      	cmp	r3, #96	; 0x60
 800a016:	d002      	beq.n	800a01e <I2C_ITMasterCplt+0x7a>
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d006      	beq.n	800a02c <I2C_ITMasterCplt+0x88>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a022:	4619      	mov	r1, r3
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	f000 f983 	bl	800a330 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a02a:	e04e      	b.n	800a0ca <I2C_ITMasterCplt+0x126>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a032:	b2db      	uxtb	r3, r3
 800a034:	2b21      	cmp	r3, #33	; 0x21
 800a036:	d121      	bne.n	800a07c <I2C_ITMasterCplt+0xd8>
    hi2c->State = HAL_I2C_STATE_READY;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2220      	movs	r2, #32
 800a03c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a046:	b2db      	uxtb	r3, r3
 800a048:	2b40      	cmp	r3, #64	; 0x40
 800a04a:	d10b      	bne.n	800a064 <I2C_ITMasterCplt+0xc0>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2200      	movs	r2, #0
 800a050:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2200      	movs	r2, #0
 800a058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f7ff fa41 	bl	80094e4 <HAL_I2C_MemTxCpltCallback>
}
 800a062:	e032      	b.n	800a0ca <I2C_ITMasterCplt+0x126>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2200      	movs	r2, #0
 800a068:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2200      	movs	r2, #0
 800a070:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	f7f9 ff2b 	bl	8003ed0 <HAL_I2C_MasterTxCpltCallback>
}
 800a07a:	e026      	b.n	800a0ca <I2C_ITMasterCplt+0x126>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a082:	b2db      	uxtb	r3, r3
 800a084:	2b22      	cmp	r3, #34	; 0x22
 800a086:	d120      	bne.n	800a0ca <I2C_ITMasterCplt+0x126>
    hi2c->State = HAL_I2C_STATE_READY;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2220      	movs	r2, #32
 800a08c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a096:	b2db      	uxtb	r3, r3
 800a098:	2b40      	cmp	r3, #64	; 0x40
 800a09a:	d10b      	bne.n	800a0b4 <I2C_ITMasterCplt+0x110>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800a0ac:	6878      	ldr	r0, [r7, #4]
 800a0ae:	f7ff fa23 	bl	80094f8 <HAL_I2C_MemRxCpltCallback>
}
 800a0b2:	e00a      	b.n	800a0ca <I2C_ITMasterCplt+0x126>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	f7f9 ff19 	bl	8003efc <HAL_I2C_MasterRxCpltCallback>
}
 800a0ca:	bf00      	nop
 800a0cc:	3710      	adds	r7, #16
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}
 800a0d2:	bf00      	nop
 800a0d4:	fe00e800 	.word	0xfe00e800
 800a0d8:	ffff0000 	.word	0xffff0000

0800a0dc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b084      	sub	sp, #16
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
 800a0e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	60bb      	str	r3, [r7, #8]
  uint32_t tmpITFlags = ITFlags;
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	60fb      	str	r3, [r7, #12]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	2220      	movs	r2, #32
 800a0f8:	61da      	str	r2, [r3, #28]

  /* Disable all interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800a0fa:	2107      	movs	r1, #7
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f000 fc49 	bl	800a994 <I2C_Disable_IRQ>

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	685a      	ldr	r2, [r3, #4]
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a110:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	6859      	ldr	r1, [r3, #4]
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681a      	ldr	r2, [r3, #0]
 800a11c:	4b58      	ldr	r3, [pc, #352]	; (800a280 <I2C_ITSlaveCplt+0x1a4>)
 800a11e:	400b      	ands	r3, r1
 800a120:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f000 f9c4 	bl	800a4b0 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	0b9b      	lsrs	r3, r3, #14
 800a12c:	f003 0301 	and.w	r3, r3, #1
 800a130:	2b00      	cmp	r3, #0
 800a132:	d00b      	beq.n	800a14c <I2C_ITSlaveCplt+0x70>
  {
    if (hi2c->hdmatx != NULL)
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d018      	beq.n	800a16e <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	685b      	ldr	r3, [r3, #4]
 800a144:	b29a      	uxth	r2, r3
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a14a:	e010      	b.n	800a16e <I2C_ITSlaveCplt+0x92>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	0bdb      	lsrs	r3, r3, #15
 800a150:	f003 0301 	and.w	r3, r3, #1
 800a154:	2b00      	cmp	r3, #0
 800a156:	d00a      	beq.n	800a16e <I2C_ITSlaveCplt+0x92>
  {
    if (hi2c->hdmarx != NULL)
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d006      	beq.n	800a16e <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	685b      	ldr	r3, [r3, #4]
 800a168:	b29a      	uxth	r2, r3
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	089b      	lsrs	r3, r3, #2
 800a172:	f003 0301 	and.w	r3, r3, #1
 800a176:	2b00      	cmp	r3, #0
 800a178:	d020      	beq.n	800a1bc <I2C_ITSlaveCplt+0xe0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	f023 0304 	bic.w	r3, r3, #4
 800a180:	60fb      	str	r3, [r7, #12]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a18c:	b2d2      	uxtb	r2, r2
 800a18e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a194:	1c5a      	adds	r2, r3, #1
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d00c      	beq.n	800a1bc <I2C_ITSlaveCplt+0xe0>
    {
      hi2c->XferSize--;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a1a6:	3b01      	subs	r3, #1
 800a1a8:	b29a      	uxth	r2, r3
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a1b2:	b29b      	uxth	r3, r3
 800a1b4:	3b01      	subs	r3, #1
 800a1b6:	b29a      	uxth	r2, r3
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a1c0:	b29b      	uxth	r3, r3
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d005      	beq.n	800a1d2 <I2C_ITSlaveCplt+0xf6>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1ca:	f043 0204 	orr.w	r2, r3, #4
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->PreviousState = I2C_STATE_NONE;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d010      	beq.n	800a210 <I2C_ITSlaveCplt+0x134>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1f2:	4619      	mov	r1, r3
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	f000 f89b 	bl	800a330 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a200:	b2db      	uxtb	r3, r3
 800a202:	2b28      	cmp	r3, #40	; 0x28
 800a204:	d138      	bne.n	800a278 <I2C_ITSlaveCplt+0x19c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800a206:	68f9      	ldr	r1, [r7, #12]
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f000 f83d 	bl	800a288 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a20e:	e033      	b.n	800a278 <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a214:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a218:	d011      	beq.n	800a23e <I2C_ITSlaveCplt+0x162>
    I2C_ITSlaveSeqCplt(hi2c);
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f7ff fe85 	bl	8009f2a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	4a18      	ldr	r2, [pc, #96]	; (800a284 <I2C_ITSlaveCplt+0x1a8>)
 800a224:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2220      	movs	r2, #32
 800a22a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2200      	movs	r2, #0
 800a232:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	f7ff f94a 	bl	80094d0 <HAL_I2C_ListenCpltCallback>
}
 800a23c:	e01c      	b.n	800a278 <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a244:	b2db      	uxtb	r3, r3
 800a246:	2b22      	cmp	r3, #34	; 0x22
 800a248:	d10b      	bne.n	800a262 <I2C_ITSlaveCplt+0x186>
    hi2c->State = HAL_I2C_STATE_READY;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2220      	movs	r2, #32
 800a24e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2200      	movs	r2, #0
 800a256:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f7ff f920 	bl	80094a0 <HAL_I2C_SlaveRxCpltCallback>
}
 800a260:	e00a      	b.n	800a278 <I2C_ITSlaveCplt+0x19c>
    hi2c->State = HAL_I2C_STATE_READY;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2220      	movs	r2, #32
 800a266:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2200      	movs	r2, #0
 800a26e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f7ff f90a 	bl	800948c <HAL_I2C_SlaveTxCpltCallback>
}
 800a278:	bf00      	nop
 800a27a:	3710      	adds	r7, #16
 800a27c:	46bd      	mov	sp, r7
 800a27e:	bd80      	pop	{r7, pc}
 800a280:	fe00e800 	.word	0xfe00e800
 800a284:	ffff0000 	.word	0xffff0000

0800a288 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b082      	sub	sp, #8
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
 800a290:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	4a25      	ldr	r2, [pc, #148]	; (800a32c <I2C_ITListenCplt+0xa4>)
 800a296:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2200      	movs	r2, #0
 800a29c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2220      	movs	r2, #32
 800a2a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	089b      	lsrs	r3, r3, #2
 800a2b8:	f003 0301 	and.w	r3, r3, #1
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d022      	beq.n	800a306 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ca:	b2d2      	uxtb	r2, r2
 800a2cc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d2:	1c5a      	adds	r2, r3, #1
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d012      	beq.n	800a306 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2e4:	3b01      	subs	r3, #1
 800a2e6:	b29a      	uxth	r2, r3
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2f0:	b29b      	uxth	r3, r3
 800a2f2:	3b01      	subs	r3, #1
 800a2f4:	b29a      	uxth	r2, r3
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2fe:	f043 0204 	orr.w	r2, r3, #4
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800a306:	2107      	movs	r1, #7
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f000 fb43 	bl	800a994 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	2210      	movs	r2, #16
 800a314:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2200      	movs	r2, #0
 800a31a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f7ff f8d6 	bl	80094d0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800a324:	bf00      	nop
 800a326:	3708      	adds	r7, #8
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd80      	pop	{r7, pc}
 800a32c:	ffff0000 	.word	0xffff0000

0800a330 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b084      	sub	sp, #16
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
 800a338:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a340:	73fb      	strb	r3, [r7, #15]

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2200      	movs	r2, #0
 800a346:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	4a55      	ldr	r2, [pc, #340]	; (800a4a4 <I2C_ITError+0x174>)
 800a34e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2200      	movs	r2, #0
 800a354:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	431a      	orrs	r2, r3
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800a362:	7bfb      	ldrb	r3, [r7, #15]
 800a364:	2b28      	cmp	r3, #40	; 0x28
 800a366:	d005      	beq.n	800a374 <I2C_ITError+0x44>
 800a368:	7bfb      	ldrb	r3, [r7, #15]
 800a36a:	2b29      	cmp	r3, #41	; 0x29
 800a36c:	d002      	beq.n	800a374 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800a36e:	7bfb      	ldrb	r3, [r7, #15]
 800a370:	2b2a      	cmp	r3, #42	; 0x2a
 800a372:	d10e      	bne.n	800a392 <I2C_ITError+0x62>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800a374:	2103      	movs	r1, #3
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f000 fb0c 	bl	800a994 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2228      	movs	r2, #40	; 0x28
 800a380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2200      	movs	r2, #0
 800a388:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	4a46      	ldr	r2, [pc, #280]	; (800a4a8 <I2C_ITError+0x178>)
 800a38e:	635a      	str	r2, [r3, #52]	; 0x34
 800a390:	e013      	b.n	800a3ba <I2C_ITError+0x8a>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800a392:	2107      	movs	r1, #7
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f000 fafd 	bl	800a994 <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a3a0:	b2db      	uxtb	r3, r3
 800a3a2:	2b60      	cmp	r3, #96	; 0x60
 800a3a4:	d003      	beq.n	800a3ae <I2C_ITError+0x7e>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2220      	movs	r2, #32
 800a3aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a3c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a3c8:	d123      	bne.n	800a412 <I2C_ITError+0xe2>
  {
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	681a      	ldr	r2, [r3, #0]
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a3d8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d05c      	beq.n	800a49c <I2C_ITError+0x16c>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3e6:	4a31      	ldr	r2, [pc, #196]	; (800a4ac <I2C_ITError+0x17c>)
 800a3e8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f7fe f8e2 	bl	80085c0 <HAL_DMA_Abort_IT>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d04c      	beq.n	800a49c <I2C_ITError+0x16c>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a408:	687a      	ldr	r2, [r7, #4]
 800a40a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a40c:	4610      	mov	r0, r2
 800a40e:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a410:	e044      	b.n	800a49c <I2C_ITError+0x16c>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a41c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a420:	d123      	bne.n	800a46a <I2C_ITError+0x13a>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	681a      	ldr	r2, [r3, #0]
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a430:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a436:	2b00      	cmp	r3, #0
 800a438:	d030      	beq.n	800a49c <I2C_ITError+0x16c>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a43e:	4a1b      	ldr	r2, [pc, #108]	; (800a4ac <I2C_ITError+0x17c>)
 800a440:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2200      	movs	r2, #0
 800a446:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a44e:	4618      	mov	r0, r3
 800a450:	f7fe f8b6 	bl	80085c0 <HAL_DMA_Abort_IT>
 800a454:	4603      	mov	r3, r0
 800a456:	2b00      	cmp	r3, #0
 800a458:	d020      	beq.n	800a49c <I2C_ITError+0x16c>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a45e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a460:	687a      	ldr	r2, [r7, #4]
 800a462:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800a464:	4610      	mov	r0, r2
 800a466:	4798      	blx	r3
}
 800a468:	e018      	b.n	800a49c <I2C_ITError+0x16c>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a470:	b2db      	uxtb	r3, r3
 800a472:	2b60      	cmp	r3, #96	; 0x60
 800a474:	d10b      	bne.n	800a48e <I2C_ITError+0x15e>
    hi2c->State = HAL_I2C_STATE_READY;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2220      	movs	r2, #32
 800a47a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2200      	movs	r2, #0
 800a482:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f7ff f84a 	bl	8009520 <HAL_I2C_AbortCpltCallback>
}
 800a48c:	e006      	b.n	800a49c <I2C_ITError+0x16c>
    __HAL_UNLOCK(hi2c);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2200      	movs	r2, #0
 800a492:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	f7ff f838 	bl	800950c <HAL_I2C_ErrorCallback>
}
 800a49c:	bf00      	nop
 800a49e:	3710      	adds	r7, #16
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bd80      	pop	{r7, pc}
 800a4a4:	ffff0000 	.word	0xffff0000
 800a4a8:	08009787 	.word	0x08009787
 800a4ac:	0800a4f9 	.word	0x0800a4f9

0800a4b0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b083      	sub	sp, #12
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	699b      	ldr	r3, [r3, #24]
 800a4be:	f003 0302 	and.w	r3, r3, #2
 800a4c2:	2b02      	cmp	r3, #2
 800a4c4:	d103      	bne.n	800a4ce <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	699b      	ldr	r3, [r3, #24]
 800a4d4:	f003 0301 	and.w	r3, r3, #1
 800a4d8:	2b01      	cmp	r3, #1
 800a4da:	d007      	beq.n	800a4ec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	699a      	ldr	r2, [r3, #24]
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	f042 0201 	orr.w	r2, r2, #1
 800a4ea:	619a      	str	r2, [r3, #24]
  }
}
 800a4ec:	bf00      	nop
 800a4ee:	370c      	adds	r7, #12
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f6:	4770      	bx	lr

0800a4f8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b084      	sub	sp, #16
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a504:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a50a:	2200      	movs	r2, #0
 800a50c:	639a      	str	r2, [r3, #56]	; 0x38
  hi2c->hdmarx->XferAbortCallback = NULL;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a512:	2200      	movs	r2, #0
 800a514:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a51c:	b2db      	uxtb	r3, r3
 800a51e:	2b60      	cmp	r3, #96	; 0x60
 800a520:	d107      	bne.n	800a532 <I2C_DMAAbort+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	2220      	movs	r2, #32
 800a526:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800a52a:	68f8      	ldr	r0, [r7, #12]
 800a52c:	f7fe fff8 	bl	8009520 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a530:	e002      	b.n	800a538 <I2C_DMAAbort+0x40>
    HAL_I2C_ErrorCallback(hi2c);
 800a532:	68f8      	ldr	r0, [r7, #12]
 800a534:	f7fe ffea 	bl	800950c <HAL_I2C_ErrorCallback>
}
 800a538:	bf00      	nop
 800a53a:	3710      	adds	r7, #16
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}

0800a540 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b084      	sub	sp, #16
 800a544:	af00      	add	r7, sp, #0
 800a546:	60f8      	str	r0, [r7, #12]
 800a548:	60b9      	str	r1, [r7, #8]
 800a54a:	603b      	str	r3, [r7, #0]
 800a54c:	4613      	mov	r3, r2
 800a54e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a550:	e022      	b.n	800a598 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a558:	d01e      	beq.n	800a598 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a55a:	f7fc f925 	bl	80067a8 <HAL_GetTick>
 800a55e:	4602      	mov	r2, r0
 800a560:	69bb      	ldr	r3, [r7, #24]
 800a562:	1ad3      	subs	r3, r2, r3
 800a564:	683a      	ldr	r2, [r7, #0]
 800a566:	429a      	cmp	r2, r3
 800a568:	d302      	bcc.n	800a570 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d113      	bne.n	800a598 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a574:	f043 0220 	orr.w	r2, r3, #32
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	2220      	movs	r2, #32
 800a580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	2200      	movs	r2, #0
 800a588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	2200      	movs	r2, #0
 800a590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800a594:	2301      	movs	r3, #1
 800a596:	e00f      	b.n	800a5b8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	699a      	ldr	r2, [r3, #24]
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	4013      	ands	r3, r2
 800a5a2:	68ba      	ldr	r2, [r7, #8]
 800a5a4:	429a      	cmp	r2, r3
 800a5a6:	bf0c      	ite	eq
 800a5a8:	2301      	moveq	r3, #1
 800a5aa:	2300      	movne	r3, #0
 800a5ac:	b2db      	uxtb	r3, r3
 800a5ae:	461a      	mov	r2, r3
 800a5b0:	79fb      	ldrb	r3, [r7, #7]
 800a5b2:	429a      	cmp	r2, r3
 800a5b4:	d0cd      	beq.n	800a552 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a5b6:	2300      	movs	r3, #0
}
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	3710      	adds	r7, #16
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bd80      	pop	{r7, pc}

0800a5c0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b084      	sub	sp, #16
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	60f8      	str	r0, [r7, #12]
 800a5c8:	60b9      	str	r1, [r7, #8]
 800a5ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a5cc:	e02c      	b.n	800a628 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a5ce:	687a      	ldr	r2, [r7, #4]
 800a5d0:	68b9      	ldr	r1, [r7, #8]
 800a5d2:	68f8      	ldr	r0, [r7, #12]
 800a5d4:	f000 f8dc 	bl	800a790 <I2C_IsAcknowledgeFailed>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d001      	beq.n	800a5e2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a5de:	2301      	movs	r3, #1
 800a5e0:	e02a      	b.n	800a638 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5e8:	d01e      	beq.n	800a628 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a5ea:	f7fc f8dd 	bl	80067a8 <HAL_GetTick>
 800a5ee:	4602      	mov	r2, r0
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	1ad3      	subs	r3, r2, r3
 800a5f4:	68ba      	ldr	r2, [r7, #8]
 800a5f6:	429a      	cmp	r2, r3
 800a5f8:	d302      	bcc.n	800a600 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d113      	bne.n	800a628 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a604:	f043 0220 	orr.w	r2, r3, #32
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	2220      	movs	r2, #32
 800a610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	2200      	movs	r2, #0
 800a618:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	2200      	movs	r2, #0
 800a620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a624:	2301      	movs	r3, #1
 800a626:	e007      	b.n	800a638 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	699b      	ldr	r3, [r3, #24]
 800a62e:	f003 0302 	and.w	r3, r3, #2
 800a632:	2b02      	cmp	r3, #2
 800a634:	d1cb      	bne.n	800a5ce <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a636:	2300      	movs	r3, #0
}
 800a638:	4618      	mov	r0, r3
 800a63a:	3710      	adds	r7, #16
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bd80      	pop	{r7, pc}

0800a640 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b084      	sub	sp, #16
 800a644:	af00      	add	r7, sp, #0
 800a646:	60f8      	str	r0, [r7, #12]
 800a648:	60b9      	str	r1, [r7, #8]
 800a64a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a64c:	e028      	b.n	800a6a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a64e:	687a      	ldr	r2, [r7, #4]
 800a650:	68b9      	ldr	r1, [r7, #8]
 800a652:	68f8      	ldr	r0, [r7, #12]
 800a654:	f000 f89c 	bl	800a790 <I2C_IsAcknowledgeFailed>
 800a658:	4603      	mov	r3, r0
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d001      	beq.n	800a662 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a65e:	2301      	movs	r3, #1
 800a660:	e026      	b.n	800a6b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a662:	f7fc f8a1 	bl	80067a8 <HAL_GetTick>
 800a666:	4602      	mov	r2, r0
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	1ad3      	subs	r3, r2, r3
 800a66c:	68ba      	ldr	r2, [r7, #8]
 800a66e:	429a      	cmp	r2, r3
 800a670:	d302      	bcc.n	800a678 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d113      	bne.n	800a6a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a67c:	f043 0220 	orr.w	r2, r3, #32
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	2220      	movs	r2, #32
 800a688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	2200      	movs	r2, #0
 800a690:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	2200      	movs	r2, #0
 800a698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a69c:	2301      	movs	r3, #1
 800a69e:	e007      	b.n	800a6b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	699b      	ldr	r3, [r3, #24]
 800a6a6:	f003 0320 	and.w	r3, r3, #32
 800a6aa:	2b20      	cmp	r3, #32
 800a6ac:	d1cf      	bne.n	800a64e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a6ae:	2300      	movs	r3, #0
}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	3710      	adds	r7, #16
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd80      	pop	{r7, pc}

0800a6b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b084      	sub	sp, #16
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	60f8      	str	r0, [r7, #12]
 800a6c0:	60b9      	str	r1, [r7, #8]
 800a6c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a6c4:	e055      	b.n	800a772 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a6c6:	687a      	ldr	r2, [r7, #4]
 800a6c8:	68b9      	ldr	r1, [r7, #8]
 800a6ca:	68f8      	ldr	r0, [r7, #12]
 800a6cc:	f000 f860 	bl	800a790 <I2C_IsAcknowledgeFailed>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d001      	beq.n	800a6da <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	e053      	b.n	800a782 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	699b      	ldr	r3, [r3, #24]
 800a6e0:	f003 0320 	and.w	r3, r3, #32
 800a6e4:	2b20      	cmp	r3, #32
 800a6e6:	d129      	bne.n	800a73c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	699b      	ldr	r3, [r3, #24]
 800a6ee:	f003 0304 	and.w	r3, r3, #4
 800a6f2:	2b04      	cmp	r3, #4
 800a6f4:	d105      	bne.n	800a702 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d001      	beq.n	800a702 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800a6fe:	2300      	movs	r3, #0
 800a700:	e03f      	b.n	800a782 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	2220      	movs	r2, #32
 800a708:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	6859      	ldr	r1, [r3, #4]
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	681a      	ldr	r2, [r3, #0]
 800a714:	4b1d      	ldr	r3, [pc, #116]	; (800a78c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800a716:	400b      	ands	r3, r1
 800a718:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	2200      	movs	r2, #0
 800a71e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	2220      	movs	r2, #32
 800a724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	2200      	movs	r2, #0
 800a72c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	2200      	movs	r2, #0
 800a734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a738:	2301      	movs	r3, #1
 800a73a:	e022      	b.n	800a782 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a73c:	f7fc f834 	bl	80067a8 <HAL_GetTick>
 800a740:	4602      	mov	r2, r0
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	1ad3      	subs	r3, r2, r3
 800a746:	68ba      	ldr	r2, [r7, #8]
 800a748:	429a      	cmp	r2, r3
 800a74a:	d302      	bcc.n	800a752 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d10f      	bne.n	800a772 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a756:	f043 0220 	orr.w	r2, r3, #32
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	2220      	movs	r2, #32
 800a762:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	2200      	movs	r2, #0
 800a76a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a76e:	2301      	movs	r3, #1
 800a770:	e007      	b.n	800a782 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	699b      	ldr	r3, [r3, #24]
 800a778:	f003 0304 	and.w	r3, r3, #4
 800a77c:	2b04      	cmp	r3, #4
 800a77e:	d1a2      	bne.n	800a6c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a780:	2300      	movs	r3, #0
}
 800a782:	4618      	mov	r0, r3
 800a784:	3710      	adds	r7, #16
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}
 800a78a:	bf00      	nop
 800a78c:	fe00e800 	.word	0xfe00e800

0800a790 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b084      	sub	sp, #16
 800a794:	af00      	add	r7, sp, #0
 800a796:	60f8      	str	r0, [r7, #12]
 800a798:	60b9      	str	r1, [r7, #8]
 800a79a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	699b      	ldr	r3, [r3, #24]
 800a7a2:	f003 0310 	and.w	r3, r3, #16
 800a7a6:	2b10      	cmp	r3, #16
 800a7a8:	d151      	bne.n	800a84e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a7aa:	e022      	b.n	800a7f2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7b2:	d01e      	beq.n	800a7f2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a7b4:	f7fb fff8 	bl	80067a8 <HAL_GetTick>
 800a7b8:	4602      	mov	r2, r0
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	1ad3      	subs	r3, r2, r3
 800a7be:	68ba      	ldr	r2, [r7, #8]
 800a7c0:	429a      	cmp	r2, r3
 800a7c2:	d302      	bcc.n	800a7ca <I2C_IsAcknowledgeFailed+0x3a>
 800a7c4:	68bb      	ldr	r3, [r7, #8]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d113      	bne.n	800a7f2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7ce:	f043 0220 	orr.w	r2, r3, #32
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	2220      	movs	r2, #32
 800a7da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	e02e      	b.n	800a850 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	699b      	ldr	r3, [r3, #24]
 800a7f8:	f003 0320 	and.w	r3, r3, #32
 800a7fc:	2b20      	cmp	r3, #32
 800a7fe:	d1d5      	bne.n	800a7ac <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	2210      	movs	r2, #16
 800a806:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	2220      	movs	r2, #32
 800a80e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a810:	68f8      	ldr	r0, [r7, #12]
 800a812:	f7ff fe4d 	bl	800a4b0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	6859      	ldr	r1, [r3, #4]
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	681a      	ldr	r2, [r3, #0]
 800a820:	4b0d      	ldr	r3, [pc, #52]	; (800a858 <I2C_IsAcknowledgeFailed+0xc8>)
 800a822:	400b      	ands	r3, r1
 800a824:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a82a:	f043 0204 	orr.w	r2, r3, #4
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	2220      	movs	r2, #32
 800a836:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	2200      	movs	r2, #0
 800a83e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	2200      	movs	r2, #0
 800a846:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800a84a:	2301      	movs	r3, #1
 800a84c:	e000      	b.n	800a850 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800a84e:	2300      	movs	r3, #0
}
 800a850:	4618      	mov	r0, r3
 800a852:	3710      	adds	r7, #16
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}
 800a858:	fe00e800 	.word	0xfe00e800

0800a85c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800a85c:	b480      	push	{r7}
 800a85e:	b085      	sub	sp, #20
 800a860:	af00      	add	r7, sp, #0
 800a862:	60f8      	str	r0, [r7, #12]
 800a864:	607b      	str	r3, [r7, #4]
 800a866:	460b      	mov	r3, r1
 800a868:	817b      	strh	r3, [r7, #10]
 800a86a:	4613      	mov	r3, r2
 800a86c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	685a      	ldr	r2, [r3, #4]
 800a874:	69bb      	ldr	r3, [r7, #24]
 800a876:	0d5b      	lsrs	r3, r3, #21
 800a878:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800a87c:	4b0d      	ldr	r3, [pc, #52]	; (800a8b4 <I2C_TransferConfig+0x58>)
 800a87e:	430b      	orrs	r3, r1
 800a880:	43db      	mvns	r3, r3
 800a882:	ea02 0103 	and.w	r1, r2, r3
 800a886:	897b      	ldrh	r3, [r7, #10]
 800a888:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a88c:	7a7b      	ldrb	r3, [r7, #9]
 800a88e:	041b      	lsls	r3, r3, #16
 800a890:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a894:	431a      	orrs	r2, r3
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	431a      	orrs	r2, r3
 800a89a:	69bb      	ldr	r3, [r7, #24]
 800a89c:	431a      	orrs	r2, r3
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	430a      	orrs	r2, r1
 800a8a4:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800a8a6:	bf00      	nop
 800a8a8:	3714      	adds	r7, #20
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b0:	4770      	bx	lr
 800a8b2:	bf00      	nop
 800a8b4:	03ff63ff 	.word	0x03ff63ff

0800a8b8 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800a8b8:	b480      	push	{r7}
 800a8ba:	b085      	sub	sp, #20
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
 800a8c0:	460b      	mov	r3, r1
 800a8c2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8cc:	4a2f      	ldr	r2, [pc, #188]	; (800a98c <I2C_Enable_IRQ+0xd4>)
 800a8ce:	4293      	cmp	r3, r2
 800a8d0:	d004      	beq.n	800a8dc <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800a8d6:	4a2e      	ldr	r2, [pc, #184]	; (800a990 <I2C_Enable_IRQ+0xd8>)
 800a8d8:	4293      	cmp	r3, r2
 800a8da:	d124      	bne.n	800a926 <I2C_Enable_IRQ+0x6e>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800a8dc:	887b      	ldrh	r3, [r7, #2]
 800a8de:	f003 0304 	and.w	r3, r3, #4
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d003      	beq.n	800a8ee <I2C_Enable_IRQ+0x36>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800a8ec:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 800a8ee:	887b      	ldrh	r3, [r7, #2]
 800a8f0:	f003 0311 	and.w	r3, r3, #17
 800a8f4:	2b11      	cmp	r3, #17
 800a8f6:	d103      	bne.n	800a900 <I2C_Enable_IRQ+0x48>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800a8fe:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800a900:	887b      	ldrh	r3, [r7, #2]
 800a902:	f003 0312 	and.w	r3, r3, #18
 800a906:	2b12      	cmp	r3, #18
 800a908:	d103      	bne.n	800a912 <I2C_Enable_IRQ+0x5a>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	f043 0320 	orr.w	r3, r3, #32
 800a910:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 800a912:	887b      	ldrh	r3, [r7, #2]
 800a914:	f003 0312 	and.w	r3, r3, #18
 800a918:	2b12      	cmp	r3, #18
 800a91a:	d128      	bne.n	800a96e <I2C_Enable_IRQ+0xb6>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a922:	60fb      	str	r3, [r7, #12]
    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 800a924:	e023      	b.n	800a96e <I2C_Enable_IRQ+0xb6>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800a926:	887b      	ldrh	r3, [r7, #2]
 800a928:	f003 0304 	and.w	r3, r3, #4
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d003      	beq.n	800a938 <I2C_Enable_IRQ+0x80>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800a936:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800a938:	887b      	ldrh	r3, [r7, #2]
 800a93a:	f003 0301 	and.w	r3, r3, #1
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d003      	beq.n	800a94a <I2C_Enable_IRQ+0x92>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800a948:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800a94a:	887b      	ldrh	r3, [r7, #2]
 800a94c:	f003 0302 	and.w	r3, r3, #2
 800a950:	2b00      	cmp	r3, #0
 800a952:	d003      	beq.n	800a95c <I2C_Enable_IRQ+0xa4>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800a95a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800a95c:	887b      	ldrh	r3, [r7, #2]
 800a95e:	f003 0312 	and.w	r3, r3, #18
 800a962:	2b12      	cmp	r3, #18
 800a964:	d103      	bne.n	800a96e <I2C_Enable_IRQ+0xb6>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	f043 0320 	orr.w	r3, r3, #32
 800a96c:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	6819      	ldr	r1, [r3, #0]
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	68fa      	ldr	r2, [r7, #12]
 800a97a:	430a      	orrs	r2, r1
 800a97c:	601a      	str	r2, [r3, #0]
}
 800a97e:	bf00      	nop
 800a980:	3714      	adds	r7, #20
 800a982:	46bd      	mov	sp, r7
 800a984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a988:	4770      	bx	lr
 800a98a:	bf00      	nop
 800a98c:	0800998d 	.word	0x0800998d
 800a990:	08009b73 	.word	0x08009b73

0800a994 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800a994:	b480      	push	{r7}
 800a996:	b085      	sub	sp, #20
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
 800a99c:	460b      	mov	r3, r1
 800a99e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800a9a4:	887b      	ldrh	r3, [r7, #2]
 800a9a6:	f003 0301 	and.w	r3, r3, #1
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d00f      	beq.n	800a9ce <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800a9b4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a9bc:	b2db      	uxtb	r3, r3
 800a9be:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a9c2:	2b28      	cmp	r3, #40	; 0x28
 800a9c4:	d003      	beq.n	800a9ce <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800a9cc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800a9ce:	887b      	ldrh	r3, [r7, #2]
 800a9d0:	f003 0302 	and.w	r3, r3, #2
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d00f      	beq.n	800a9f8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800a9de:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a9e6:	b2db      	uxtb	r3, r3
 800a9e8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a9ec:	2b28      	cmp	r3, #40	; 0x28
 800a9ee:	d003      	beq.n	800a9f8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800a9f6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800a9f8:	887b      	ldrh	r3, [r7, #2]
 800a9fa:	f003 0304 	and.w	r3, r3, #4
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d003      	beq.n	800aa0a <I2C_Disable_IRQ+0x76>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800aa08:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 800aa0a:	887b      	ldrh	r3, [r7, #2]
 800aa0c:	f003 0311 	and.w	r3, r3, #17
 800aa10:	2b11      	cmp	r3, #17
 800aa12:	d103      	bne.n	800aa1c <I2C_Disable_IRQ+0x88>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800aa1a:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800aa1c:	887b      	ldrh	r3, [r7, #2]
 800aa1e:	f003 0312 	and.w	r3, r3, #18
 800aa22:	2b12      	cmp	r3, #18
 800aa24:	d103      	bne.n	800aa2e <I2C_Disable_IRQ+0x9a>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	f043 0320 	orr.w	r3, r3, #32
 800aa2c:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 800aa2e:	887b      	ldrh	r3, [r7, #2]
 800aa30:	f003 0312 	and.w	r3, r3, #18
 800aa34:	2b12      	cmp	r3, #18
 800aa36:	d103      	bne.n	800aa40 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa3e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	6819      	ldr	r1, [r3, #0]
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	43da      	mvns	r2, r3
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	400a      	ands	r2, r1
 800aa50:	601a      	str	r2, [r3, #0]
}
 800aa52:	bf00      	nop
 800aa54:	3714      	adds	r7, #20
 800aa56:	46bd      	mov	sp, r7
 800aa58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5c:	4770      	bx	lr

0800aa5e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800aa5e:	b480      	push	{r7}
 800aa60:	b083      	sub	sp, #12
 800aa62:	af00      	add	r7, sp, #0
 800aa64:	6078      	str	r0, [r7, #4]
 800aa66:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aa6e:	b2db      	uxtb	r3, r3
 800aa70:	2b20      	cmp	r3, #32
 800aa72:	d138      	bne.n	800aae6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aa7a:	2b01      	cmp	r3, #1
 800aa7c:	d101      	bne.n	800aa82 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800aa7e:	2302      	movs	r3, #2
 800aa80:	e032      	b.n	800aae8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	2201      	movs	r2, #1
 800aa86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	2224      	movs	r2, #36	; 0x24
 800aa8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	681a      	ldr	r2, [r3, #0]
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	f022 0201 	bic.w	r2, r2, #1
 800aaa0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	681a      	ldr	r2, [r3, #0]
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800aab0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	6819      	ldr	r1, [r3, #0]
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	683a      	ldr	r2, [r7, #0]
 800aabe:	430a      	orrs	r2, r1
 800aac0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	681a      	ldr	r2, [r3, #0]
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	f042 0201 	orr.w	r2, r2, #1
 800aad0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	2220      	movs	r2, #32
 800aad6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2200      	movs	r2, #0
 800aade:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800aae2:	2300      	movs	r3, #0
 800aae4:	e000      	b.n	800aae8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800aae6:	2302      	movs	r3, #2
  }
}
 800aae8:	4618      	mov	r0, r3
 800aaea:	370c      	adds	r7, #12
 800aaec:	46bd      	mov	sp, r7
 800aaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf2:	4770      	bx	lr

0800aaf4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800aaf4:	b480      	push	{r7}
 800aaf6:	b085      	sub	sp, #20
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
 800aafc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab04:	b2db      	uxtb	r3, r3
 800ab06:	2b20      	cmp	r3, #32
 800ab08:	d139      	bne.n	800ab7e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ab10:	2b01      	cmp	r3, #1
 800ab12:	d101      	bne.n	800ab18 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800ab14:	2302      	movs	r3, #2
 800ab16:	e033      	b.n	800ab80 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2201      	movs	r2, #1
 800ab1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2224      	movs	r2, #36	; 0x24
 800ab24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	681a      	ldr	r2, [r3, #0]
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	f022 0201 	bic.w	r2, r2, #1
 800ab36:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800ab46:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	021b      	lsls	r3, r3, #8
 800ab4c:	68fa      	ldr	r2, [r7, #12]
 800ab4e:	4313      	orrs	r3, r2
 800ab50:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	68fa      	ldr	r2, [r7, #12]
 800ab58:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	681a      	ldr	r2, [r3, #0]
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	f042 0201 	orr.w	r2, r2, #1
 800ab68:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	2220      	movs	r2, #32
 800ab6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2200      	movs	r2, #0
 800ab76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	e000      	b.n	800ab80 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800ab7e:	2302      	movs	r3, #2
  }
}
 800ab80:	4618      	mov	r0, r3
 800ab82:	3714      	adds	r7, #20
 800ab84:	46bd      	mov	sp, r7
 800ab86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8a:	4770      	bx	lr

0800ab8c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800ab8c:	b480      	push	{r7}
 800ab8e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ab90:	4b05      	ldr	r3, [pc, #20]	; (800aba8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	4a04      	ldr	r2, [pc, #16]	; (800aba8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800ab96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab9a:	6013      	str	r3, [r2, #0]
}
 800ab9c:	bf00      	nop
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba4:	4770      	bx	lr
 800aba6:	bf00      	nop
 800aba8:	58000400 	.word	0x58000400

0800abac <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800abac:	b480      	push	{r7}
 800abae:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 800abb0:	4b04      	ldr	r3, [pc, #16]	; (800abc4 <HAL_PWREx_GetVoltageRange+0x18>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800abb8:	4618      	mov	r0, r3
 800abba:	46bd      	mov	sp, r7
 800abbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc0:	4770      	bx	lr
 800abc2:	bf00      	nop
 800abc4:	58000400 	.word	0x58000400

0800abc8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 800abc8:	b480      	push	{r7}
 800abca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800abcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800abd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800abda:	d101      	bne.n	800abe0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800abdc:	2301      	movs	r3, #1
 800abde:	e000      	b.n	800abe2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800abe0:	2300      	movs	r3, #0
}
 800abe2:	4618      	mov	r0, r3
 800abe4:	46bd      	mov	sp, r7
 800abe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abea:	4770      	bx	lr

0800abec <LL_RCC_HSE_EnableBypass>:
{
 800abec:	b480      	push	{r7}
 800abee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 800abf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800abfa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800abfe:	6013      	str	r3, [r2, #0]
}
 800ac00:	bf00      	nop
 800ac02:	46bd      	mov	sp, r7
 800ac04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac08:	4770      	bx	lr

0800ac0a <LL_RCC_HSE_DisableBypass>:
{
 800ac0a:	b480      	push	{r7}
 800ac0c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 800ac0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ac18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ac1c:	6013      	str	r3, [r2, #0]
}
 800ac1e:	bf00      	nop
 800ac20:	46bd      	mov	sp, r7
 800ac22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac26:	4770      	bx	lr

0800ac28 <LL_RCC_HSE_Enable>:
{
 800ac28:	b480      	push	{r7}
 800ac2a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800ac2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ac36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ac3a:	6013      	str	r3, [r2, #0]
}
 800ac3c:	bf00      	nop
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac44:	4770      	bx	lr

0800ac46 <LL_RCC_HSE_Disable>:
{
 800ac46:	b480      	push	{r7}
 800ac48:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800ac4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ac54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ac58:	6013      	str	r3, [r2, #0]
}
 800ac5a:	bf00      	nop
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac62:	4770      	bx	lr

0800ac64 <LL_RCC_HSE_IsReady>:
{
 800ac64:	b480      	push	{r7}
 800ac66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800ac68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac76:	d101      	bne.n	800ac7c <LL_RCC_HSE_IsReady+0x18>
 800ac78:	2301      	movs	r3, #1
 800ac7a:	e000      	b.n	800ac7e <LL_RCC_HSE_IsReady+0x1a>
 800ac7c:	2300      	movs	r3, #0
}
 800ac7e:	4618      	mov	r0, r3
 800ac80:	46bd      	mov	sp, r7
 800ac82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac86:	4770      	bx	lr

0800ac88 <LL_RCC_HSI_Enable>:
{
 800ac88:	b480      	push	{r7}
 800ac8a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800ac8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ac96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ac9a:	6013      	str	r3, [r2, #0]
}
 800ac9c:	bf00      	nop
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca4:	4770      	bx	lr

0800aca6 <LL_RCC_HSI_Disable>:
{
 800aca6:	b480      	push	{r7}
 800aca8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800acaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800acb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800acb8:	6013      	str	r3, [r2, #0]
}
 800acba:	bf00      	nop
 800acbc:	46bd      	mov	sp, r7
 800acbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc2:	4770      	bx	lr

0800acc4 <LL_RCC_HSI_IsReady>:
{
 800acc4:	b480      	push	{r7}
 800acc6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800acc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800acd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800acd6:	d101      	bne.n	800acdc <LL_RCC_HSI_IsReady+0x18>
 800acd8:	2301      	movs	r3, #1
 800acda:	e000      	b.n	800acde <LL_RCC_HSI_IsReady+0x1a>
 800acdc:	2300      	movs	r3, #0
}
 800acde:	4618      	mov	r0, r3
 800ace0:	46bd      	mov	sp, r7
 800ace2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace6:	4770      	bx	lr

0800ace8 <LL_RCC_HSI_SetCalibTrimming>:
{
 800ace8:	b480      	push	{r7}
 800acea:	b083      	sub	sp, #12
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800acf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800acf4:	685b      	ldr	r3, [r3, #4]
 800acf6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	061b      	lsls	r3, r3, #24
 800acfe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ad02:	4313      	orrs	r3, r2
 800ad04:	604b      	str	r3, [r1, #4]
}
 800ad06:	bf00      	nop
 800ad08:	370c      	adds	r7, #12
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad10:	4770      	bx	lr

0800ad12 <LL_RCC_HSI48_Enable>:
{
 800ad12:	b480      	push	{r7}
 800ad14:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800ad16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ad1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ad1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ad22:	f043 0301 	orr.w	r3, r3, #1
 800ad26:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800ad2a:	bf00      	nop
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad32:	4770      	bx	lr

0800ad34 <LL_RCC_HSI48_Disable>:
{
 800ad34:	b480      	push	{r7}
 800ad36:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800ad38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ad3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ad40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ad44:	f023 0301 	bic.w	r3, r3, #1
 800ad48:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800ad4c:	bf00      	nop
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad54:	4770      	bx	lr

0800ad56 <LL_RCC_HSI48_IsReady>:
{
 800ad56:	b480      	push	{r7}
 800ad58:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800ad5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ad5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ad62:	f003 0302 	and.w	r3, r3, #2
 800ad66:	2b02      	cmp	r3, #2
 800ad68:	d101      	bne.n	800ad6e <LL_RCC_HSI48_IsReady+0x18>
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	e000      	b.n	800ad70 <LL_RCC_HSI48_IsReady+0x1a>
 800ad6e:	2300      	movs	r3, #0
}
 800ad70:	4618      	mov	r0, r3
 800ad72:	46bd      	mov	sp, r7
 800ad74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad78:	4770      	bx	lr

0800ad7a <LL_RCC_LSE_Enable>:
{
 800ad7a:	b480      	push	{r7}
 800ad7c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800ad7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ad82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ad8a:	f043 0301 	orr.w	r3, r3, #1
 800ad8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800ad92:	bf00      	nop
 800ad94:	46bd      	mov	sp, r7
 800ad96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9a:	4770      	bx	lr

0800ad9c <LL_RCC_LSE_Disable>:
{
 800ad9c:	b480      	push	{r7}
 800ad9e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800ada0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ada4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ada8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800adac:	f023 0301 	bic.w	r3, r3, #1
 800adb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800adb4:	bf00      	nop
 800adb6:	46bd      	mov	sp, r7
 800adb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbc:	4770      	bx	lr

0800adbe <LL_RCC_LSE_EnableBypass>:
{
 800adbe:	b480      	push	{r7}
 800adc0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800adc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800adc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800adca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800adce:	f043 0304 	orr.w	r3, r3, #4
 800add2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800add6:	bf00      	nop
 800add8:	46bd      	mov	sp, r7
 800adda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adde:	4770      	bx	lr

0800ade0 <LL_RCC_LSE_DisableBypass>:
{
 800ade0:	b480      	push	{r7}
 800ade2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800ade4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ade8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800adec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800adf0:	f023 0304 	bic.w	r3, r3, #4
 800adf4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800adf8:	bf00      	nop
 800adfa:	46bd      	mov	sp, r7
 800adfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae00:	4770      	bx	lr

0800ae02 <LL_RCC_LSE_IsReady>:
{
 800ae02:	b480      	push	{r7}
 800ae04:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800ae06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ae0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae0e:	f003 0302 	and.w	r3, r3, #2
 800ae12:	2b02      	cmp	r3, #2
 800ae14:	d101      	bne.n	800ae1a <LL_RCC_LSE_IsReady+0x18>
 800ae16:	2301      	movs	r3, #1
 800ae18:	e000      	b.n	800ae1c <LL_RCC_LSE_IsReady+0x1a>
 800ae1a:	2300      	movs	r3, #0
}
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae24:	4770      	bx	lr

0800ae26 <LL_RCC_LSI1_Enable>:
{
 800ae26:	b480      	push	{r7}
 800ae28:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800ae2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ae2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ae32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ae36:	f043 0301 	orr.w	r3, r3, #1
 800ae3a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800ae3e:	bf00      	nop
 800ae40:	46bd      	mov	sp, r7
 800ae42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae46:	4770      	bx	lr

0800ae48 <LL_RCC_LSI1_Disable>:
{
 800ae48:	b480      	push	{r7}
 800ae4a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800ae4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ae50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ae54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ae58:	f023 0301 	bic.w	r3, r3, #1
 800ae5c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800ae60:	bf00      	nop
 800ae62:	46bd      	mov	sp, r7
 800ae64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae68:	4770      	bx	lr

0800ae6a <LL_RCC_LSI1_IsReady>:
{
 800ae6a:	b480      	push	{r7}
 800ae6c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800ae6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ae72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ae76:	f003 0302 	and.w	r3, r3, #2
 800ae7a:	2b02      	cmp	r3, #2
 800ae7c:	d101      	bne.n	800ae82 <LL_RCC_LSI1_IsReady+0x18>
 800ae7e:	2301      	movs	r3, #1
 800ae80:	e000      	b.n	800ae84 <LL_RCC_LSI1_IsReady+0x1a>
 800ae82:	2300      	movs	r3, #0
}
 800ae84:	4618      	mov	r0, r3
 800ae86:	46bd      	mov	sp, r7
 800ae88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8c:	4770      	bx	lr

0800ae8e <LL_RCC_LSI2_Enable>:
{
 800ae8e:	b480      	push	{r7}
 800ae90:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800ae92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ae96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ae9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ae9e:	f043 0304 	orr.w	r3, r3, #4
 800aea2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800aea6:	bf00      	nop
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeae:	4770      	bx	lr

0800aeb0 <LL_RCC_LSI2_Disable>:
{
 800aeb0:	b480      	push	{r7}
 800aeb2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800aeb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aeb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aebc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800aec0:	f023 0304 	bic.w	r3, r3, #4
 800aec4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800aec8:	bf00      	nop
 800aeca:	46bd      	mov	sp, r7
 800aecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed0:	4770      	bx	lr

0800aed2 <LL_RCC_LSI2_IsReady>:
{
 800aed2:	b480      	push	{r7}
 800aed4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800aed6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aeda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aede:	f003 0308 	and.w	r3, r3, #8
 800aee2:	2b08      	cmp	r3, #8
 800aee4:	d101      	bne.n	800aeea <LL_RCC_LSI2_IsReady+0x18>
 800aee6:	2301      	movs	r3, #1
 800aee8:	e000      	b.n	800aeec <LL_RCC_LSI2_IsReady+0x1a>
 800aeea:	2300      	movs	r3, #0
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	46bd      	mov	sp, r7
 800aef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef4:	4770      	bx	lr

0800aef6 <LL_RCC_LSI2_SetTrimming>:
{
 800aef6:	b480      	push	{r7}
 800aef8:	b083      	sub	sp, #12
 800aefa:	af00      	add	r7, sp, #0
 800aefc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800aefe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800af02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800af06:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	021b      	lsls	r3, r3, #8
 800af0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800af12:	4313      	orrs	r3, r2
 800af14:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800af18:	bf00      	nop
 800af1a:	370c      	adds	r7, #12
 800af1c:	46bd      	mov	sp, r7
 800af1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af22:	4770      	bx	lr

0800af24 <LL_RCC_MSI_Enable>:
{
 800af24:	b480      	push	{r7}
 800af26:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800af28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800af32:	f043 0301 	orr.w	r3, r3, #1
 800af36:	6013      	str	r3, [r2, #0]
}
 800af38:	bf00      	nop
 800af3a:	46bd      	mov	sp, r7
 800af3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af40:	4770      	bx	lr

0800af42 <LL_RCC_MSI_Disable>:
{
 800af42:	b480      	push	{r7}
 800af44:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800af46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800af50:	f023 0301 	bic.w	r3, r3, #1
 800af54:	6013      	str	r3, [r2, #0]
}
 800af56:	bf00      	nop
 800af58:	46bd      	mov	sp, r7
 800af5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5e:	4770      	bx	lr

0800af60 <LL_RCC_MSI_IsReady>:
{
 800af60:	b480      	push	{r7}
 800af62:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800af64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	f003 0302 	and.w	r3, r3, #2
 800af6e:	2b02      	cmp	r3, #2
 800af70:	d101      	bne.n	800af76 <LL_RCC_MSI_IsReady+0x16>
 800af72:	2301      	movs	r3, #1
 800af74:	e000      	b.n	800af78 <LL_RCC_MSI_IsReady+0x18>
 800af76:	2300      	movs	r3, #0
}
 800af78:	4618      	mov	r0, r3
 800af7a:	46bd      	mov	sp, r7
 800af7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af80:	4770      	bx	lr

0800af82 <LL_RCC_MSI_SetRange>:
{
 800af82:	b480      	push	{r7}
 800af84:	b083      	sub	sp, #12
 800af86:	af00      	add	r7, sp, #0
 800af88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800af8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800af94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	4313      	orrs	r3, r2
 800af9c:	600b      	str	r3, [r1, #0]
}
 800af9e:	bf00      	nop
 800afa0:	370c      	adds	r7, #12
 800afa2:	46bd      	mov	sp, r7
 800afa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa8:	4770      	bx	lr

0800afaa <LL_RCC_MSI_GetRange>:
{
 800afaa:	b480      	push	{r7}
 800afac:	b083      	sub	sp, #12
 800afae:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800afb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800afba:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2bb0      	cmp	r3, #176	; 0xb0
 800afc0:	d901      	bls.n	800afc6 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800afc2:	23b0      	movs	r3, #176	; 0xb0
 800afc4:	607b      	str	r3, [r7, #4]
  return msiRange;
 800afc6:	687b      	ldr	r3, [r7, #4]
}
 800afc8:	4618      	mov	r0, r3
 800afca:	370c      	adds	r7, #12
 800afcc:	46bd      	mov	sp, r7
 800afce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd2:	4770      	bx	lr

0800afd4 <LL_RCC_MSI_SetCalibTrimming>:
{
 800afd4:	b480      	push	{r7}
 800afd6:	b083      	sub	sp, #12
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800afdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800afe0:	685b      	ldr	r3, [r3, #4]
 800afe2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	021b      	lsls	r3, r3, #8
 800afea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800afee:	4313      	orrs	r3, r2
 800aff0:	604b      	str	r3, [r1, #4]
}
 800aff2:	bf00      	nop
 800aff4:	370c      	adds	r7, #12
 800aff6:	46bd      	mov	sp, r7
 800aff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affc:	4770      	bx	lr

0800affe <LL_RCC_SetSysClkSource>:
{
 800affe:	b480      	push	{r7}
 800b000:	b083      	sub	sp, #12
 800b002:	af00      	add	r7, sp, #0
 800b004:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800b006:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b00a:	689b      	ldr	r3, [r3, #8]
 800b00c:	f023 0203 	bic.w	r2, r3, #3
 800b010:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	4313      	orrs	r3, r2
 800b018:	608b      	str	r3, [r1, #8]
}
 800b01a:	bf00      	nop
 800b01c:	370c      	adds	r7, #12
 800b01e:	46bd      	mov	sp, r7
 800b020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b024:	4770      	bx	lr

0800b026 <LL_RCC_GetSysClkSource>:
{
 800b026:	b480      	push	{r7}
 800b028:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800b02a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b02e:	689b      	ldr	r3, [r3, #8]
 800b030:	f003 030c 	and.w	r3, r3, #12
}
 800b034:	4618      	mov	r0, r3
 800b036:	46bd      	mov	sp, r7
 800b038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03c:	4770      	bx	lr

0800b03e <LL_RCC_SetAHBPrescaler>:
{
 800b03e:	b480      	push	{r7}
 800b040:	b083      	sub	sp, #12
 800b042:	af00      	add	r7, sp, #0
 800b044:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800b046:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b04a:	689b      	ldr	r3, [r3, #8]
 800b04c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b050:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	4313      	orrs	r3, r2
 800b058:	608b      	str	r3, [r1, #8]
}
 800b05a:	bf00      	nop
 800b05c:	370c      	adds	r7, #12
 800b05e:	46bd      	mov	sp, r7
 800b060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b064:	4770      	bx	lr

0800b066 <LL_C2_RCC_SetAHBPrescaler>:
{
 800b066:	b480      	push	{r7}
 800b068:	b083      	sub	sp, #12
 800b06a:	af00      	add	r7, sp, #0
 800b06c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800b06e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b072:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800b076:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b07a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	4313      	orrs	r3, r2
 800b082:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800b086:	bf00      	nop
 800b088:	370c      	adds	r7, #12
 800b08a:	46bd      	mov	sp, r7
 800b08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b090:	4770      	bx	lr

0800b092 <LL_RCC_SetAHB4Prescaler>:
{
 800b092:	b480      	push	{r7}
 800b094:	b083      	sub	sp, #12
 800b096:	af00      	add	r7, sp, #0
 800b098:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800b09a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b09e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800b0a2:	f023 020f 	bic.w	r2, r3, #15
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	091b      	lsrs	r3, r3, #4
 800b0aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b0ae:	4313      	orrs	r3, r2
 800b0b0:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800b0b4:	bf00      	nop
 800b0b6:	370c      	adds	r7, #12
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0be:	4770      	bx	lr

0800b0c0 <LL_RCC_SetAPB1Prescaler>:
{
 800b0c0:	b480      	push	{r7}
 800b0c2:	b083      	sub	sp, #12
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800b0c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b0cc:	689b      	ldr	r3, [r3, #8]
 800b0ce:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b0d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	4313      	orrs	r3, r2
 800b0da:	608b      	str	r3, [r1, #8]
}
 800b0dc:	bf00      	nop
 800b0de:	370c      	adds	r7, #12
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e6:	4770      	bx	lr

0800b0e8 <LL_RCC_SetAPB2Prescaler>:
{
 800b0e8:	b480      	push	{r7}
 800b0ea:	b083      	sub	sp, #12
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800b0f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b0f4:	689b      	ldr	r3, [r3, #8]
 800b0f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b0fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	4313      	orrs	r3, r2
 800b102:	608b      	str	r3, [r1, #8]
}
 800b104:	bf00      	nop
 800b106:	370c      	adds	r7, #12
 800b108:	46bd      	mov	sp, r7
 800b10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10e:	4770      	bx	lr

0800b110 <LL_RCC_GetAHBPrescaler>:
{
 800b110:	b480      	push	{r7}
 800b112:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800b114:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b118:	689b      	ldr	r3, [r3, #8]
 800b11a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800b11e:	4618      	mov	r0, r3
 800b120:	46bd      	mov	sp, r7
 800b122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b126:	4770      	bx	lr

0800b128 <LL_C2_RCC_GetAHBPrescaler>:
{
 800b128:	b480      	push	{r7}
 800b12a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 800b12c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b130:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800b134:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800b138:	4618      	mov	r0, r3
 800b13a:	46bd      	mov	sp, r7
 800b13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b140:	4770      	bx	lr

0800b142 <LL_RCC_GetAHB4Prescaler>:
{
 800b142:	b480      	push	{r7}
 800b144:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800b146:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b14a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800b14e:	011b      	lsls	r3, r3, #4
 800b150:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800b154:	4618      	mov	r0, r3
 800b156:	46bd      	mov	sp, r7
 800b158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15c:	4770      	bx	lr

0800b15e <LL_RCC_GetAPB1Prescaler>:
{
 800b15e:	b480      	push	{r7}
 800b160:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800b162:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b166:	689b      	ldr	r3, [r3, #8]
 800b168:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800b16c:	4618      	mov	r0, r3
 800b16e:	46bd      	mov	sp, r7
 800b170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b174:	4770      	bx	lr

0800b176 <LL_RCC_GetAPB2Prescaler>:
{
 800b176:	b480      	push	{r7}
 800b178:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800b17a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b17e:	689b      	ldr	r3, [r3, #8]
 800b180:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800b184:	4618      	mov	r0, r3
 800b186:	46bd      	mov	sp, r7
 800b188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18c:	4770      	bx	lr

0800b18e <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800b18e:	b480      	push	{r7}
 800b190:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800b192:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b19c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b1a0:	6013      	str	r3, [r2, #0]
}
 800b1a2:	bf00      	nop
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1aa:	4770      	bx	lr

0800b1ac <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800b1ac:	b480      	push	{r7}
 800b1ae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800b1b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b1ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b1be:	6013      	str	r3, [r2, #0]
}
 800b1c0:	bf00      	nop
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c8:	4770      	bx	lr

0800b1ca <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800b1ca:	b480      	push	{r7}
 800b1cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800b1ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b1d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b1dc:	d101      	bne.n	800b1e2 <LL_RCC_PLL_IsReady+0x18>
 800b1de:	2301      	movs	r3, #1
 800b1e0:	e000      	b.n	800b1e4 <LL_RCC_PLL_IsReady+0x1a>
 800b1e2:	2300      	movs	r3, #0
}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ec:	4770      	bx	lr

0800b1ee <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800b1ee:	b480      	push	{r7}
 800b1f0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800b1f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b1f6:	68db      	ldr	r3, [r3, #12]
 800b1f8:	0a1b      	lsrs	r3, r3, #8
 800b1fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800b1fe:	4618      	mov	r0, r3
 800b200:	46bd      	mov	sp, r7
 800b202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b206:	4770      	bx	lr

0800b208 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800b208:	b480      	push	{r7}
 800b20a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800b20c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b210:	68db      	ldr	r3, [r3, #12]
 800b212:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800b216:	4618      	mov	r0, r3
 800b218:	46bd      	mov	sp, r7
 800b21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21e:	4770      	bx	lr

0800b220 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800b220:	b480      	push	{r7}
 800b222:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800b224:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b228:	68db      	ldr	r3, [r3, #12]
 800b22a:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800b22e:	4618      	mov	r0, r3
 800b230:	46bd      	mov	sp, r7
 800b232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b236:	4770      	bx	lr

0800b238 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800b238:	b480      	push	{r7}
 800b23a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800b23c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b240:	68db      	ldr	r3, [r3, #12]
 800b242:	f003 0303 	and.w	r3, r3, #3
}
 800b246:	4618      	mov	r0, r3
 800b248:	46bd      	mov	sp, r7
 800b24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24e:	4770      	bx	lr

0800b250 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800b250:	b480      	push	{r7}
 800b252:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800b254:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b258:	689b      	ldr	r3, [r3, #8]
 800b25a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b25e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b262:	d101      	bne.n	800b268 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800b264:	2301      	movs	r3, #1
 800b266:	e000      	b.n	800b26a <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800b268:	2300      	movs	r3, #0
}
 800b26a:	4618      	mov	r0, r3
 800b26c:	46bd      	mov	sp, r7
 800b26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b272:	4770      	bx	lr

0800b274 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800b274:	b480      	push	{r7}
 800b276:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800b278:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b27c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800b280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b284:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b288:	d101      	bne.n	800b28e <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800b28a:	2301      	movs	r3, #1
 800b28c:	e000      	b.n	800b290 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800b28e:	2300      	movs	r3, #0
}
 800b290:	4618      	mov	r0, r3
 800b292:	46bd      	mov	sp, r7
 800b294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b298:	4770      	bx	lr

0800b29a <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800b29a:	b480      	push	{r7}
 800b29c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800b29e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b2a2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800b2a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b2aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2ae:	d101      	bne.n	800b2b4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800b2b0:	2301      	movs	r3, #1
 800b2b2:	e000      	b.n	800b2b6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800b2b4:	2300      	movs	r3, #0
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2be:	4770      	bx	lr

0800b2c0 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800b2c0:	b480      	push	{r7}
 800b2c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800b2c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b2c8:	689b      	ldr	r3, [r3, #8]
 800b2ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b2d2:	d101      	bne.n	800b2d8 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800b2d4:	2301      	movs	r3, #1
 800b2d6:	e000      	b.n	800b2da <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800b2d8:	2300      	movs	r3, #0
}
 800b2da:	4618      	mov	r0, r3
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e2:	4770      	bx	lr

0800b2e4 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800b2e4:	b480      	push	{r7}
 800b2e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800b2e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b2ec:	689b      	ldr	r3, [r3, #8]
 800b2ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b2f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b2f6:	d101      	bne.n	800b2fc <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800b2f8:	2301      	movs	r3, #1
 800b2fa:	e000      	b.n	800b2fe <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800b2fc:	2300      	movs	r3, #0
}
 800b2fe:	4618      	mov	r0, r3
 800b300:	46bd      	mov	sp, r7
 800b302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b306:	4770      	bx	lr

0800b308 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b308:	b590      	push	{r4, r7, lr}
 800b30a:	b08b      	sub	sp, #44	; 0x2c
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d101      	bne.n	800b31a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b316:	2301      	movs	r3, #1
 800b318:	e34b      	b.n	800b9b2 <HAL_RCC_OscConfig+0x6aa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	f003 0320 	and.w	r3, r3, #32
 800b322:	2b00      	cmp	r3, #0
 800b324:	f000 808f 	beq.w	800b446 <HAL_RCC_OscConfig+0x13e>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b328:	f7ff fe7d 	bl	800b026 <LL_RCC_GetSysClkSource>
 800b32c:	6278      	str	r0, [r7, #36]	; 0x24
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b32e:	f7ff ff83 	bl	800b238 <LL_RCC_PLL_GetMainSource>
 800b332:	6238      	str	r0, [r7, #32]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800b334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b336:	2b00      	cmp	r3, #0
 800b338:	d005      	beq.n	800b346 <HAL_RCC_OscConfig+0x3e>
 800b33a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b33c:	2b0c      	cmp	r3, #12
 800b33e:	d149      	bne.n	800b3d4 <HAL_RCC_OscConfig+0xcc>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800b340:	6a3b      	ldr	r3, [r7, #32]
 800b342:	2b01      	cmp	r3, #1
 800b344:	d146      	bne.n	800b3d4 <HAL_RCC_OscConfig+0xcc>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800b346:	f7ff fe0b 	bl	800af60 <LL_RCC_MSI_IsReady>
 800b34a:	4603      	mov	r3, r0
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d005      	beq.n	800b35c <HAL_RCC_OscConfig+0x54>
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	69db      	ldr	r3, [r3, #28]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d101      	bne.n	800b35c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800b358:	2301      	movs	r3, #1
 800b35a:	e32a      	b.n	800b9b2 <HAL_RCC_OscConfig+0x6aa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800b360:	f7ff fe23 	bl	800afaa <LL_RCC_MSI_GetRange>
 800b364:	4603      	mov	r3, r0
 800b366:	429c      	cmp	r4, r3
 800b368:	d914      	bls.n	800b394 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b36e:	4618      	mov	r0, r3
 800b370:	f000 fd2a 	bl	800bdc8 <RCC_SetFlashLatencyFromMSIRange>
 800b374:	4603      	mov	r3, r0
 800b376:	2b00      	cmp	r3, #0
 800b378:	d001      	beq.n	800b37e <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 800b37a:	2301      	movs	r3, #1
 800b37c:	e319      	b.n	800b9b2 <HAL_RCC_OscConfig+0x6aa>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b382:	4618      	mov	r0, r3
 800b384:	f7ff fdfd 	bl	800af82 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	6a1b      	ldr	r3, [r3, #32]
 800b38c:	4618      	mov	r0, r3
 800b38e:	f7ff fe21 	bl	800afd4 <LL_RCC_MSI_SetCalibTrimming>
 800b392:	e013      	b.n	800b3bc <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b398:	4618      	mov	r0, r3
 800b39a:	f7ff fdf2 	bl	800af82 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6a1b      	ldr	r3, [r3, #32]
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	f7ff fe16 	bl	800afd4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	f000 fd0b 	bl	800bdc8 <RCC_SetFlashLatencyFromMSIRange>
 800b3b2:	4603      	mov	r3, r0
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d001      	beq.n	800b3bc <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 800b3b8:	2301      	movs	r3, #1
 800b3ba:	e2fa      	b.n	800b9b2 <HAL_RCC_OscConfig+0x6aa>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 800b3bc:	f7fa fb46 	bl	8005a4c <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800b3c0:	4bb4      	ldr	r3, [pc, #720]	; (800b694 <HAL_RCC_OscConfig+0x38c>)
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	f7fa f83b 	bl	8005440 <HAL_InitTick>
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d039      	beq.n	800b444 <HAL_RCC_OscConfig+0x13c>
        {
          return HAL_ERROR;
 800b3d0:	2301      	movs	r3, #1
 800b3d2:	e2ee      	b.n	800b9b2 <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	69db      	ldr	r3, [r3, #28]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d01e      	beq.n	800b41a <HAL_RCC_OscConfig+0x112>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800b3dc:	f7ff fda2 	bl	800af24 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800b3e0:	f7fb f9e2 	bl	80067a8 <HAL_GetTick>
 800b3e4:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800b3e6:	e008      	b.n	800b3fa <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800b3e8:	f7fb f9de 	bl	80067a8 <HAL_GetTick>
 800b3ec:	4602      	mov	r2, r0
 800b3ee:	69fb      	ldr	r3, [r7, #28]
 800b3f0:	1ad3      	subs	r3, r2, r3
 800b3f2:	2b02      	cmp	r3, #2
 800b3f4:	d901      	bls.n	800b3fa <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800b3f6:	2303      	movs	r3, #3
 800b3f8:	e2db      	b.n	800b9b2 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() == 0U)
 800b3fa:	f7ff fdb1 	bl	800af60 <LL_RCC_MSI_IsReady>
 800b3fe:	4603      	mov	r3, r0
 800b400:	2b00      	cmp	r3, #0
 800b402:	d0f1      	beq.n	800b3e8 <HAL_RCC_OscConfig+0xe0>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b408:	4618      	mov	r0, r3
 800b40a:	f7ff fdba 	bl	800af82 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	6a1b      	ldr	r3, [r3, #32]
 800b412:	4618      	mov	r0, r3
 800b414:	f7ff fdde 	bl	800afd4 <LL_RCC_MSI_SetCalibTrimming>
 800b418:	e015      	b.n	800b446 <HAL_RCC_OscConfig+0x13e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800b41a:	f7ff fd92 	bl	800af42 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800b41e:	f7fb f9c3 	bl	80067a8 <HAL_GetTick>
 800b422:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800b424:	e008      	b.n	800b438 <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800b426:	f7fb f9bf 	bl	80067a8 <HAL_GetTick>
 800b42a:	4602      	mov	r2, r0
 800b42c:	69fb      	ldr	r3, [r7, #28]
 800b42e:	1ad3      	subs	r3, r2, r3
 800b430:	2b02      	cmp	r3, #2
 800b432:	d901      	bls.n	800b438 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 800b434:	2303      	movs	r3, #3
 800b436:	e2bc      	b.n	800b9b2 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() != 0U)
 800b438:	f7ff fd92 	bl	800af60 <LL_RCC_MSI_IsReady>
 800b43c:	4603      	mov	r3, r0
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d1f1      	bne.n	800b426 <HAL_RCC_OscConfig+0x11e>
 800b442:	e000      	b.n	800b446 <HAL_RCC_OscConfig+0x13e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800b444:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	f003 0301 	and.w	r3, r3, #1
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d05a      	beq.n	800b508 <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b452:	f7ff fde8 	bl	800b026 <LL_RCC_GetSysClkSource>
 800b456:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b458:	f7ff feee 	bl	800b238 <LL_RCC_PLL_GetMainSource>
 800b45c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800b45e:	69bb      	ldr	r3, [r7, #24]
 800b460:	2b08      	cmp	r3, #8
 800b462:	d005      	beq.n	800b470 <HAL_RCC_OscConfig+0x168>
 800b464:	69bb      	ldr	r3, [r7, #24]
 800b466:	2b0c      	cmp	r3, #12
 800b468:	d10d      	bne.n	800b486 <HAL_RCC_OscConfig+0x17e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800b46a:	697b      	ldr	r3, [r7, #20]
 800b46c:	2b03      	cmp	r3, #3
 800b46e:	d10a      	bne.n	800b486 <HAL_RCC_OscConfig+0x17e>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b470:	f7ff fbf8 	bl	800ac64 <LL_RCC_HSE_IsReady>
 800b474:	4603      	mov	r3, r0
 800b476:	2b00      	cmp	r3, #0
 800b478:	d045      	beq.n	800b506 <HAL_RCC_OscConfig+0x1fe>
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	685b      	ldr	r3, [r3, #4]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d141      	bne.n	800b506 <HAL_RCC_OscConfig+0x1fe>
      {
        return HAL_ERROR;
 800b482:	2301      	movs	r3, #1
 800b484:	e295      	b.n	800b9b2 <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	685b      	ldr	r3, [r3, #4]
 800b48a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b48e:	d102      	bne.n	800b496 <HAL_RCC_OscConfig+0x18e>
 800b490:	f7ff fbca 	bl	800ac28 <LL_RCC_HSE_Enable>
 800b494:	e00d      	b.n	800b4b2 <HAL_RCC_OscConfig+0x1aa>
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	685b      	ldr	r3, [r3, #4]
 800b49a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b49e:	d104      	bne.n	800b4aa <HAL_RCC_OscConfig+0x1a2>
 800b4a0:	f7ff fba4 	bl	800abec <LL_RCC_HSE_EnableBypass>
 800b4a4:	f7ff fbc0 	bl	800ac28 <LL_RCC_HSE_Enable>
 800b4a8:	e003      	b.n	800b4b2 <HAL_RCC_OscConfig+0x1aa>
 800b4aa:	f7ff fbcc 	bl	800ac46 <LL_RCC_HSE_Disable>
 800b4ae:	f7ff fbac 	bl	800ac0a <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	685b      	ldr	r3, [r3, #4]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d012      	beq.n	800b4e0 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b4ba:	f7fb f975 	bl	80067a8 <HAL_GetTick>
 800b4be:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800b4c0:	e008      	b.n	800b4d4 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b4c2:	f7fb f971 	bl	80067a8 <HAL_GetTick>
 800b4c6:	4602      	mov	r2, r0
 800b4c8:	69fb      	ldr	r3, [r7, #28]
 800b4ca:	1ad3      	subs	r3, r2, r3
 800b4cc:	2b64      	cmp	r3, #100	; 0x64
 800b4ce:	d901      	bls.n	800b4d4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800b4d0:	2303      	movs	r3, #3
 800b4d2:	e26e      	b.n	800b9b2 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() == 0U)
 800b4d4:	f7ff fbc6 	bl	800ac64 <LL_RCC_HSE_IsReady>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d0f1      	beq.n	800b4c2 <HAL_RCC_OscConfig+0x1ba>
 800b4de:	e013      	b.n	800b508 <HAL_RCC_OscConfig+0x200>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b4e0:	f7fb f962 	bl	80067a8 <HAL_GetTick>
 800b4e4:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800b4e6:	e008      	b.n	800b4fa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b4e8:	f7fb f95e 	bl	80067a8 <HAL_GetTick>
 800b4ec:	4602      	mov	r2, r0
 800b4ee:	69fb      	ldr	r3, [r7, #28]
 800b4f0:	1ad3      	subs	r3, r2, r3
 800b4f2:	2b64      	cmp	r3, #100	; 0x64
 800b4f4:	d901      	bls.n	800b4fa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800b4f6:	2303      	movs	r3, #3
 800b4f8:	e25b      	b.n	800b9b2 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() != 0U)
 800b4fa:	f7ff fbb3 	bl	800ac64 <LL_RCC_HSE_IsReady>
 800b4fe:	4603      	mov	r3, r0
 800b500:	2b00      	cmp	r3, #0
 800b502:	d1f1      	bne.n	800b4e8 <HAL_RCC_OscConfig+0x1e0>
 800b504:	e000      	b.n	800b508 <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b506:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	f003 0302 	and.w	r3, r3, #2
 800b510:	2b00      	cmp	r3, #0
 800b512:	d051      	beq.n	800b5b8 <HAL_RCC_OscConfig+0x2b0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b514:	f7ff fd87 	bl	800b026 <LL_RCC_GetSysClkSource>
 800b518:	6138      	str	r0, [r7, #16]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b51a:	f7ff fe8d 	bl	800b238 <LL_RCC_PLL_GetMainSource>
 800b51e:	60f8      	str	r0, [r7, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800b520:	693b      	ldr	r3, [r7, #16]
 800b522:	2b04      	cmp	r3, #4
 800b524:	d005      	beq.n	800b532 <HAL_RCC_OscConfig+0x22a>
 800b526:	693b      	ldr	r3, [r7, #16]
 800b528:	2b0c      	cmp	r3, #12
 800b52a:	d113      	bne.n	800b554 <HAL_RCC_OscConfig+0x24c>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	2b02      	cmp	r3, #2
 800b530:	d110      	bne.n	800b554 <HAL_RCC_OscConfig+0x24c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b532:	f7ff fbc7 	bl	800acc4 <LL_RCC_HSI_IsReady>
 800b536:	4603      	mov	r3, r0
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d005      	beq.n	800b548 <HAL_RCC_OscConfig+0x240>
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	68db      	ldr	r3, [r3, #12]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d101      	bne.n	800b548 <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 800b544:	2301      	movs	r3, #1
 800b546:	e234      	b.n	800b9b2 <HAL_RCC_OscConfig+0x6aa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	691b      	ldr	r3, [r3, #16]
 800b54c:	4618      	mov	r0, r3
 800b54e:	f7ff fbcb 	bl	800ace8 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b552:	e031      	b.n	800b5b8 <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	68db      	ldr	r3, [r3, #12]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d019      	beq.n	800b590 <HAL_RCC_OscConfig+0x288>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b55c:	f7ff fb94 	bl	800ac88 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b560:	f7fb f922 	bl	80067a8 <HAL_GetTick>
 800b564:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800b566:	e008      	b.n	800b57a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b568:	f7fb f91e 	bl	80067a8 <HAL_GetTick>
 800b56c:	4602      	mov	r2, r0
 800b56e:	69fb      	ldr	r3, [r7, #28]
 800b570:	1ad3      	subs	r3, r2, r3
 800b572:	2b02      	cmp	r3, #2
 800b574:	d901      	bls.n	800b57a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800b576:	2303      	movs	r3, #3
 800b578:	e21b      	b.n	800b9b2 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() == 0U)
 800b57a:	f7ff fba3 	bl	800acc4 <LL_RCC_HSI_IsReady>
 800b57e:	4603      	mov	r3, r0
 800b580:	2b00      	cmp	r3, #0
 800b582:	d0f1      	beq.n	800b568 <HAL_RCC_OscConfig+0x260>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	691b      	ldr	r3, [r3, #16]
 800b588:	4618      	mov	r0, r3
 800b58a:	f7ff fbad 	bl	800ace8 <LL_RCC_HSI_SetCalibTrimming>
 800b58e:	e013      	b.n	800b5b8 <HAL_RCC_OscConfig+0x2b0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b590:	f7ff fb89 	bl	800aca6 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b594:	f7fb f908 	bl	80067a8 <HAL_GetTick>
 800b598:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800b59a:	e008      	b.n	800b5ae <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b59c:	f7fb f904 	bl	80067a8 <HAL_GetTick>
 800b5a0:	4602      	mov	r2, r0
 800b5a2:	69fb      	ldr	r3, [r7, #28]
 800b5a4:	1ad3      	subs	r3, r2, r3
 800b5a6:	2b02      	cmp	r3, #2
 800b5a8:	d901      	bls.n	800b5ae <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800b5aa:	2303      	movs	r3, #3
 800b5ac:	e201      	b.n	800b9b2 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() != 0U)
 800b5ae:	f7ff fb89 	bl	800acc4 <LL_RCC_HSI_IsReady>
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d1f1      	bne.n	800b59c <HAL_RCC_OscConfig+0x294>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	f003 0308 	and.w	r3, r3, #8
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d106      	bne.n	800b5d2 <HAL_RCC_OscConfig+0x2ca>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	f000 80a2 	beq.w	800b716 <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	695b      	ldr	r3, [r3, #20]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d075      	beq.n	800b6c6 <HAL_RCC_OscConfig+0x3be>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	f003 0310 	and.w	r3, r3, #16
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d046      	beq.n	800b674 <HAL_RCC_OscConfig+0x36c>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800b5e6:	f7ff fc40 	bl	800ae6a <LL_RCC_LSI1_IsReady>
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d113      	bne.n	800b618 <HAL_RCC_OscConfig+0x310>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800b5f0:	f7ff fc19 	bl	800ae26 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b5f4:	f7fb f8d8 	bl	80067a8 <HAL_GetTick>
 800b5f8:	61f8      	str	r0, [r7, #28]

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800b5fa:	e008      	b.n	800b60e <HAL_RCC_OscConfig+0x306>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800b5fc:	f7fb f8d4 	bl	80067a8 <HAL_GetTick>
 800b600:	4602      	mov	r2, r0
 800b602:	69fb      	ldr	r3, [r7, #28]
 800b604:	1ad3      	subs	r3, r2, r3
 800b606:	2b02      	cmp	r3, #2
 800b608:	d901      	bls.n	800b60e <HAL_RCC_OscConfig+0x306>
            {
              return HAL_TIMEOUT;
 800b60a:	2303      	movs	r3, #3
 800b60c:	e1d1      	b.n	800b9b2 <HAL_RCC_OscConfig+0x6aa>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800b60e:	f7ff fc2c 	bl	800ae6a <LL_RCC_LSI1_IsReady>
 800b612:	4603      	mov	r3, r0
 800b614:	2b00      	cmp	r3, #0
 800b616:	d0f1      	beq.n	800b5fc <HAL_RCC_OscConfig+0x2f4>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800b618:	f7ff fc39 	bl	800ae8e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b61c:	f7fb f8c4 	bl	80067a8 <HAL_GetTick>
 800b620:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800b622:	e008      	b.n	800b636 <HAL_RCC_OscConfig+0x32e>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800b624:	f7fb f8c0 	bl	80067a8 <HAL_GetTick>
 800b628:	4602      	mov	r2, r0
 800b62a:	69fb      	ldr	r3, [r7, #28]
 800b62c:	1ad3      	subs	r3, r2, r3
 800b62e:	2b03      	cmp	r3, #3
 800b630:	d901      	bls.n	800b636 <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 800b632:	2303      	movs	r3, #3
 800b634:	e1bd      	b.n	800b9b2 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800b636:	f7ff fc4c 	bl	800aed2 <LL_RCC_LSI2_IsReady>
 800b63a:	4603      	mov	r3, r0
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d0f1      	beq.n	800b624 <HAL_RCC_OscConfig+0x31c>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	699b      	ldr	r3, [r3, #24]
 800b644:	4618      	mov	r0, r3
 800b646:	f7ff fc56 	bl	800aef6 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800b64a:	f7ff fbfd 	bl	800ae48 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b64e:	f7fb f8ab 	bl	80067a8 <HAL_GetTick>
 800b652:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800b654:	e008      	b.n	800b668 <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800b656:	f7fb f8a7 	bl	80067a8 <HAL_GetTick>
 800b65a:	4602      	mov	r2, r0
 800b65c:	69fb      	ldr	r3, [r7, #28]
 800b65e:	1ad3      	subs	r3, r2, r3
 800b660:	2b02      	cmp	r3, #2
 800b662:	d901      	bls.n	800b668 <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 800b664:	2303      	movs	r3, #3
 800b666:	e1a4      	b.n	800b9b2 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800b668:	f7ff fbff 	bl	800ae6a <LL_RCC_LSI1_IsReady>
 800b66c:	4603      	mov	r3, r0
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d1f1      	bne.n	800b656 <HAL_RCC_OscConfig+0x34e>
 800b672:	e050      	b.n	800b716 <HAL_RCC_OscConfig+0x40e>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800b674:	f7ff fbd7 	bl	800ae26 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b678:	f7fb f896 	bl	80067a8 <HAL_GetTick>
 800b67c:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800b67e:	e00b      	b.n	800b698 <HAL_RCC_OscConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800b680:	f7fb f892 	bl	80067a8 <HAL_GetTick>
 800b684:	4602      	mov	r2, r0
 800b686:	69fb      	ldr	r3, [r7, #28]
 800b688:	1ad3      	subs	r3, r2, r3
 800b68a:	2b02      	cmp	r3, #2
 800b68c:	d904      	bls.n	800b698 <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 800b68e:	2303      	movs	r3, #3
 800b690:	e18f      	b.n	800b9b2 <HAL_RCC_OscConfig+0x6aa>
 800b692:	bf00      	nop
 800b694:	2000007c 	.word	0x2000007c
        while (LL_RCC_LSI1_IsReady() == 0U)
 800b698:	f7ff fbe7 	bl	800ae6a <LL_RCC_LSI1_IsReady>
 800b69c:	4603      	mov	r3, r0
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d0ee      	beq.n	800b680 <HAL_RCC_OscConfig+0x378>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800b6a2:	f7ff fc05 	bl	800aeb0 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800b6a6:	e008      	b.n	800b6ba <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800b6a8:	f7fb f87e 	bl	80067a8 <HAL_GetTick>
 800b6ac:	4602      	mov	r2, r0
 800b6ae:	69fb      	ldr	r3, [r7, #28]
 800b6b0:	1ad3      	subs	r3, r2, r3
 800b6b2:	2b03      	cmp	r3, #3
 800b6b4:	d901      	bls.n	800b6ba <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 800b6b6:	2303      	movs	r3, #3
 800b6b8:	e17b      	b.n	800b9b2 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800b6ba:	f7ff fc0a 	bl	800aed2 <LL_RCC_LSI2_IsReady>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d1f1      	bne.n	800b6a8 <HAL_RCC_OscConfig+0x3a0>
 800b6c4:	e027      	b.n	800b716 <HAL_RCC_OscConfig+0x40e>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800b6c6:	f7ff fbf3 	bl	800aeb0 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b6ca:	f7fb f86d 	bl	80067a8 <HAL_GetTick>
 800b6ce:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800b6d0:	e008      	b.n	800b6e4 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800b6d2:	f7fb f869 	bl	80067a8 <HAL_GetTick>
 800b6d6:	4602      	mov	r2, r0
 800b6d8:	69fb      	ldr	r3, [r7, #28]
 800b6da:	1ad3      	subs	r3, r2, r3
 800b6dc:	2b03      	cmp	r3, #3
 800b6de:	d901      	bls.n	800b6e4 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 800b6e0:	2303      	movs	r3, #3
 800b6e2:	e166      	b.n	800b9b2 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800b6e4:	f7ff fbf5 	bl	800aed2 <LL_RCC_LSI2_IsReady>
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d1f1      	bne.n	800b6d2 <HAL_RCC_OscConfig+0x3ca>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800b6ee:	f7ff fbab 	bl	800ae48 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b6f2:	f7fb f859 	bl	80067a8 <HAL_GetTick>
 800b6f6:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800b6f8:	e008      	b.n	800b70c <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800b6fa:	f7fb f855 	bl	80067a8 <HAL_GetTick>
 800b6fe:	4602      	mov	r2, r0
 800b700:	69fb      	ldr	r3, [r7, #28]
 800b702:	1ad3      	subs	r3, r2, r3
 800b704:	2b02      	cmp	r3, #2
 800b706:	d901      	bls.n	800b70c <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 800b708:	2303      	movs	r3, #3
 800b70a:	e152      	b.n	800b9b2 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800b70c:	f7ff fbad 	bl	800ae6a <LL_RCC_LSI1_IsReady>
 800b710:	4603      	mov	r3, r0
 800b712:	2b00      	cmp	r3, #0
 800b714:	d1f1      	bne.n	800b6fa <HAL_RCC_OscConfig+0x3f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	f003 0304 	and.w	r3, r3, #4
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d05b      	beq.n	800b7da <HAL_RCC_OscConfig+0x4d2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b722:	4ba6      	ldr	r3, [pc, #664]	; (800b9bc <HAL_RCC_OscConfig+0x6b4>)
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d114      	bne.n	800b758 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800b72e:	f7ff fa2d 	bl	800ab8c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b732:	f7fb f839 	bl	80067a8 <HAL_GetTick>
 800b736:	61f8      	str	r0, [r7, #28]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b738:	e008      	b.n	800b74c <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b73a:	f7fb f835 	bl	80067a8 <HAL_GetTick>
 800b73e:	4602      	mov	r2, r0
 800b740:	69fb      	ldr	r3, [r7, #28]
 800b742:	1ad3      	subs	r3, r2, r3
 800b744:	2b02      	cmp	r3, #2
 800b746:	d901      	bls.n	800b74c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800b748:	2303      	movs	r3, #3
 800b74a:	e132      	b.n	800b9b2 <HAL_RCC_OscConfig+0x6aa>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b74c:	4b9b      	ldr	r3, [pc, #620]	; (800b9bc <HAL_RCC_OscConfig+0x6b4>)
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b754:	2b00      	cmp	r3, #0
 800b756:	d0f0      	beq.n	800b73a <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	689b      	ldr	r3, [r3, #8]
 800b75c:	2b01      	cmp	r3, #1
 800b75e:	d102      	bne.n	800b766 <HAL_RCC_OscConfig+0x45e>
 800b760:	f7ff fb0b 	bl	800ad7a <LL_RCC_LSE_Enable>
 800b764:	e00c      	b.n	800b780 <HAL_RCC_OscConfig+0x478>
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	689b      	ldr	r3, [r3, #8]
 800b76a:	2b05      	cmp	r3, #5
 800b76c:	d104      	bne.n	800b778 <HAL_RCC_OscConfig+0x470>
 800b76e:	f7ff fb26 	bl	800adbe <LL_RCC_LSE_EnableBypass>
 800b772:	f7ff fb02 	bl	800ad7a <LL_RCC_LSE_Enable>
 800b776:	e003      	b.n	800b780 <HAL_RCC_OscConfig+0x478>
 800b778:	f7ff fb10 	bl	800ad9c <LL_RCC_LSE_Disable>
 800b77c:	f7ff fb30 	bl	800ade0 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	689b      	ldr	r3, [r3, #8]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d014      	beq.n	800b7b2 <HAL_RCC_OscConfig+0x4aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b788:	f7fb f80e 	bl	80067a8 <HAL_GetTick>
 800b78c:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800b78e:	e00a      	b.n	800b7a6 <HAL_RCC_OscConfig+0x49e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b790:	f7fb f80a 	bl	80067a8 <HAL_GetTick>
 800b794:	4602      	mov	r2, r0
 800b796:	69fb      	ldr	r3, [r7, #28]
 800b798:	1ad3      	subs	r3, r2, r3
 800b79a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b79e:	4293      	cmp	r3, r2
 800b7a0:	d901      	bls.n	800b7a6 <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 800b7a2:	2303      	movs	r3, #3
 800b7a4:	e105      	b.n	800b9b2 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() == 0U)
 800b7a6:	f7ff fb2c 	bl	800ae02 <LL_RCC_LSE_IsReady>
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d0ef      	beq.n	800b790 <HAL_RCC_OscConfig+0x488>
 800b7b0:	e013      	b.n	800b7da <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b7b2:	f7fa fff9 	bl	80067a8 <HAL_GetTick>
 800b7b6:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800b7b8:	e00a      	b.n	800b7d0 <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b7ba:	f7fa fff5 	bl	80067a8 <HAL_GetTick>
 800b7be:	4602      	mov	r2, r0
 800b7c0:	69fb      	ldr	r3, [r7, #28]
 800b7c2:	1ad3      	subs	r3, r2, r3
 800b7c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7c8:	4293      	cmp	r3, r2
 800b7ca:	d901      	bls.n	800b7d0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 800b7cc:	2303      	movs	r3, #3
 800b7ce:	e0f0      	b.n	800b9b2 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() != 0U)
 800b7d0:	f7ff fb17 	bl	800ae02 <LL_RCC_LSE_IsReady>
 800b7d4:	4603      	mov	r3, r0
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d1ef      	bne.n	800b7ba <HAL_RCC_OscConfig+0x4b2>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d02c      	beq.n	800b840 <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d014      	beq.n	800b818 <HAL_RCC_OscConfig+0x510>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b7ee:	f7ff fa90 	bl	800ad12 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b7f2:	f7fa ffd9 	bl	80067a8 <HAL_GetTick>
 800b7f6:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800b7f8:	e008      	b.n	800b80c <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b7fa:	f7fa ffd5 	bl	80067a8 <HAL_GetTick>
 800b7fe:	4602      	mov	r2, r0
 800b800:	69fb      	ldr	r3, [r7, #28]
 800b802:	1ad3      	subs	r3, r2, r3
 800b804:	2b02      	cmp	r3, #2
 800b806:	d901      	bls.n	800b80c <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 800b808:	2303      	movs	r3, #3
 800b80a:	e0d2      	b.n	800b9b2 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800b80c:	f7ff faa3 	bl	800ad56 <LL_RCC_HSI48_IsReady>
 800b810:	4603      	mov	r3, r0
 800b812:	2b00      	cmp	r3, #0
 800b814:	d0f1      	beq.n	800b7fa <HAL_RCC_OscConfig+0x4f2>
 800b816:	e013      	b.n	800b840 <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b818:	f7ff fa8c 	bl	800ad34 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b81c:	f7fa ffc4 	bl	80067a8 <HAL_GetTick>
 800b820:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800b822:	e008      	b.n	800b836 <HAL_RCC_OscConfig+0x52e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b824:	f7fa ffc0 	bl	80067a8 <HAL_GetTick>
 800b828:	4602      	mov	r2, r0
 800b82a:	69fb      	ldr	r3, [r7, #28]
 800b82c:	1ad3      	subs	r3, r2, r3
 800b82e:	2b02      	cmp	r3, #2
 800b830:	d901      	bls.n	800b836 <HAL_RCC_OscConfig+0x52e>
        {
          return HAL_TIMEOUT;
 800b832:	2303      	movs	r3, #3
 800b834:	e0bd      	b.n	800b9b2 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800b836:	f7ff fa8e 	bl	800ad56 <LL_RCC_HSI48_IsReady>
 800b83a:	4603      	mov	r3, r0
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d1f1      	bne.n	800b824 <HAL_RCC_OscConfig+0x51c>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b844:	2b00      	cmp	r3, #0
 800b846:	f000 80b3 	beq.w	800b9b0 <HAL_RCC_OscConfig+0x6a8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b84a:	f7ff fbec 	bl	800b026 <LL_RCC_GetSysClkSource>
 800b84e:	4603      	mov	r3, r0
 800b850:	2b0c      	cmp	r3, #12
 800b852:	d076      	beq.n	800b942 <HAL_RCC_OscConfig+0x63a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b858:	2b02      	cmp	r3, #2
 800b85a:	d14b      	bne.n	800b8f4 <HAL_RCC_OscConfig+0x5ec>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b85c:	f7ff fca6 	bl	800b1ac <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b860:	f7fa ffa2 	bl	80067a8 <HAL_GetTick>
 800b864:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800b866:	e008      	b.n	800b87a <HAL_RCC_OscConfig+0x572>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b868:	f7fa ff9e 	bl	80067a8 <HAL_GetTick>
 800b86c:	4602      	mov	r2, r0
 800b86e:	69fb      	ldr	r3, [r7, #28]
 800b870:	1ad3      	subs	r3, r2, r3
 800b872:	2b02      	cmp	r3, #2
 800b874:	d901      	bls.n	800b87a <HAL_RCC_OscConfig+0x572>
          {
            return HAL_TIMEOUT;
 800b876:	2303      	movs	r3, #3
 800b878:	e09b      	b.n	800b9b2 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 800b87a:	f7ff fca6 	bl	800b1ca <LL_RCC_PLL_IsReady>
 800b87e:	4603      	mov	r3, r0
 800b880:	2b00      	cmp	r3, #0
 800b882:	d1f1      	bne.n	800b868 <HAL_RCC_OscConfig+0x560>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b884:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b888:	68da      	ldr	r2, [r3, #12]
 800b88a:	4b4d      	ldr	r3, [pc, #308]	; (800b9c0 <HAL_RCC_OscConfig+0x6b8>)
 800b88c:	4013      	ands	r3, r2
 800b88e:	687a      	ldr	r2, [r7, #4]
 800b890:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800b892:	687a      	ldr	r2, [r7, #4]
 800b894:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b896:	4311      	orrs	r1, r2
 800b898:	687a      	ldr	r2, [r7, #4]
 800b89a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b89c:	0212      	lsls	r2, r2, #8
 800b89e:	4311      	orrs	r1, r2
 800b8a0:	687a      	ldr	r2, [r7, #4]
 800b8a2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b8a4:	4311      	orrs	r1, r2
 800b8a6:	687a      	ldr	r2, [r7, #4]
 800b8a8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800b8aa:	4311      	orrs	r1, r2
 800b8ac:	687a      	ldr	r2, [r7, #4]
 800b8ae:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800b8b0:	430a      	orrs	r2, r1
 800b8b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b8b6:	4313      	orrs	r3, r2
 800b8b8:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b8ba:	f7ff fc68 	bl	800b18e <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b8be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b8c2:	68db      	ldr	r3, [r3, #12]
 800b8c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b8c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b8cc:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b8ce:	f7fa ff6b 	bl	80067a8 <HAL_GetTick>
 800b8d2:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 800b8d4:	e008      	b.n	800b8e8 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b8d6:	f7fa ff67 	bl	80067a8 <HAL_GetTick>
 800b8da:	4602      	mov	r2, r0
 800b8dc:	69fb      	ldr	r3, [r7, #28]
 800b8de:	1ad3      	subs	r3, r2, r3
 800b8e0:	2b02      	cmp	r3, #2
 800b8e2:	d901      	bls.n	800b8e8 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 800b8e4:	2303      	movs	r3, #3
 800b8e6:	e064      	b.n	800b9b2 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() == 0U)
 800b8e8:	f7ff fc6f 	bl	800b1ca <LL_RCC_PLL_IsReady>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d0f1      	beq.n	800b8d6 <HAL_RCC_OscConfig+0x5ce>
 800b8f2:	e05d      	b.n	800b9b0 <HAL_RCC_OscConfig+0x6a8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b8f4:	f7ff fc5a 	bl	800b1ac <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800b8f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b8fc:	68db      	ldr	r3, [r3, #12]
 800b8fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b902:	f023 0303 	bic.w	r3, r3, #3
 800b906:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 800b908:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b90c:	68db      	ldr	r3, [r3, #12]
 800b90e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b912:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800b916:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b91a:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b91c:	f7fa ff44 	bl	80067a8 <HAL_GetTick>
 800b920:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800b922:	e008      	b.n	800b936 <HAL_RCC_OscConfig+0x62e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b924:	f7fa ff40 	bl	80067a8 <HAL_GetTick>
 800b928:	4602      	mov	r2, r0
 800b92a:	69fb      	ldr	r3, [r7, #28]
 800b92c:	1ad3      	subs	r3, r2, r3
 800b92e:	2b02      	cmp	r3, #2
 800b930:	d901      	bls.n	800b936 <HAL_RCC_OscConfig+0x62e>
          {
            return HAL_TIMEOUT;
 800b932:	2303      	movs	r3, #3
 800b934:	e03d      	b.n	800b9b2 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 800b936:	f7ff fc48 	bl	800b1ca <LL_RCC_PLL_IsReady>
 800b93a:	4603      	mov	r3, r0
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d1f1      	bne.n	800b924 <HAL_RCC_OscConfig+0x61c>
 800b940:	e036      	b.n	800b9b0 <HAL_RCC_OscConfig+0x6a8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b946:	2b01      	cmp	r3, #1
 800b948:	d101      	bne.n	800b94e <HAL_RCC_OscConfig+0x646>
      {
        return HAL_ERROR;
 800b94a:	2301      	movs	r3, #1
 800b94c:	e031      	b.n	800b9b2 <HAL_RCC_OscConfig+0x6aa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 800b94e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b952:	68db      	ldr	r3, [r3, #12]
 800b954:	60bb      	str	r3, [r7, #8]

        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b956:	68bb      	ldr	r3, [r7, #8]
 800b958:	f003 0203 	and.w	r2, r3, #3
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b960:	429a      	cmp	r2, r3
 800b962:	d123      	bne.n	800b9ac <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b964:	68bb      	ldr	r3, [r7, #8]
 800b966:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b96e:	429a      	cmp	r2, r3
 800b970:	d11c      	bne.n	800b9ac <HAL_RCC_OscConfig+0x6a4>
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800b972:	68bb      	ldr	r3, [r7, #8]
 800b974:	0a1b      	lsrs	r3, r3, #8
 800b976:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b97e:	429a      	cmp	r2, r3
 800b980:	d114      	bne.n	800b9ac <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800b982:	68bb      	ldr	r3, [r7, #8]
 800b984:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800b98c:	429a      	cmp	r2, r3
 800b98e:	d10d      	bne.n	800b9ac <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800b990:	68bb      	ldr	r3, [r7, #8]
 800b992:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800b99a:	429a      	cmp	r2, r3
 800b99c:	d106      	bne.n	800b9ac <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800b99e:	68bb      	ldr	r3, [r7, #8]
 800b9a0:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800b9a8:	429a      	cmp	r2, r3
 800b9aa:	d001      	beq.n	800b9b0 <HAL_RCC_OscConfig+0x6a8>
        {
          return HAL_ERROR;
 800b9ac:	2301      	movs	r3, #1
 800b9ae:	e000      	b.n	800b9b2 <HAL_RCC_OscConfig+0x6aa>
        }
      }
    }
  }
  return HAL_OK;
 800b9b0:	2300      	movs	r3, #0
}
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	372c      	adds	r7, #44	; 0x2c
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	bd90      	pop	{r4, r7, pc}
 800b9ba:	bf00      	nop
 800b9bc:	58000400 	.word	0x58000400
 800b9c0:	11c1808c 	.word	0x11c1808c

0800b9c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b084      	sub	sp, #16
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
 800b9cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d101      	bne.n	800b9d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b9d4:	2301      	movs	r3, #1
 800b9d6:	e12a      	b.n	800bc2e <HAL_RCC_ClockConfig+0x26a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b9d8:	4b97      	ldr	r3, [pc, #604]	; (800bc38 <HAL_RCC_ClockConfig+0x274>)
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	f003 0307 	and.w	r3, r3, #7
 800b9e0:	683a      	ldr	r2, [r7, #0]
 800b9e2:	429a      	cmp	r2, r3
 800b9e4:	d91b      	bls.n	800ba1e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b9e6:	4b94      	ldr	r3, [pc, #592]	; (800bc38 <HAL_RCC_ClockConfig+0x274>)
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	f023 0207 	bic.w	r2, r3, #7
 800b9ee:	4992      	ldr	r1, [pc, #584]	; (800bc38 <HAL_RCC_ClockConfig+0x274>)
 800b9f0:	683b      	ldr	r3, [r7, #0]
 800b9f2:	4313      	orrs	r3, r2
 800b9f4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b9f6:	f7fa fed7 	bl	80067a8 <HAL_GetTick>
 800b9fa:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b9fc:	e008      	b.n	800ba10 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800b9fe:	f7fa fed3 	bl	80067a8 <HAL_GetTick>
 800ba02:	4602      	mov	r2, r0
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	1ad3      	subs	r3, r2, r3
 800ba08:	2b02      	cmp	r3, #2
 800ba0a:	d901      	bls.n	800ba10 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800ba0c:	2303      	movs	r3, #3
 800ba0e:	e10e      	b.n	800bc2e <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ba10:	4b89      	ldr	r3, [pc, #548]	; (800bc38 <HAL_RCC_ClockConfig+0x274>)
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	f003 0307 	and.w	r3, r3, #7
 800ba18:	683a      	ldr	r2, [r7, #0]
 800ba1a:	429a      	cmp	r2, r3
 800ba1c:	d1ef      	bne.n	800b9fe <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	f003 0302 	and.w	r3, r3, #2
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d016      	beq.n	800ba58 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	689b      	ldr	r3, [r3, #8]
 800ba2e:	4618      	mov	r0, r3
 800ba30:	f7ff fb05 	bl	800b03e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800ba34:	f7fa feb8 	bl	80067a8 <HAL_GetTick>
 800ba38:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800ba3a:	e008      	b.n	800ba4e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800ba3c:	f7fa feb4 	bl	80067a8 <HAL_GetTick>
 800ba40:	4602      	mov	r2, r0
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	1ad3      	subs	r3, r2, r3
 800ba46:	2b02      	cmp	r3, #2
 800ba48:	d901      	bls.n	800ba4e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800ba4a:	2303      	movs	r3, #3
 800ba4c:	e0ef      	b.n	800bc2e <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800ba4e:	f7ff fbff 	bl	800b250 <LL_RCC_IsActiveFlag_HPRE>
 800ba52:	4603      	mov	r3, r0
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d0f1      	beq.n	800ba3c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	f003 0320 	and.w	r3, r3, #32
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d016      	beq.n	800ba92 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	695b      	ldr	r3, [r3, #20]
 800ba68:	4618      	mov	r0, r3
 800ba6a:	f7ff fafc 	bl	800b066 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800ba6e:	f7fa fe9b 	bl	80067a8 <HAL_GetTick>
 800ba72:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800ba74:	e008      	b.n	800ba88 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800ba76:	f7fa fe97 	bl	80067a8 <HAL_GetTick>
 800ba7a:	4602      	mov	r2, r0
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	1ad3      	subs	r3, r2, r3
 800ba80:	2b02      	cmp	r3, #2
 800ba82:	d901      	bls.n	800ba88 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800ba84:	2303      	movs	r3, #3
 800ba86:	e0d2      	b.n	800bc2e <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800ba88:	f7ff fbf4 	bl	800b274 <LL_RCC_IsActiveFlag_C2HPRE>
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d0f1      	beq.n	800ba76 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d016      	beq.n	800bacc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	699b      	ldr	r3, [r3, #24]
 800baa2:	4618      	mov	r0, r3
 800baa4:	f7ff faf5 	bl	800b092 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800baa8:	f7fa fe7e 	bl	80067a8 <HAL_GetTick>
 800baac:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800baae:	e008      	b.n	800bac2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800bab0:	f7fa fe7a 	bl	80067a8 <HAL_GetTick>
 800bab4:	4602      	mov	r2, r0
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	1ad3      	subs	r3, r2, r3
 800baba:	2b02      	cmp	r3, #2
 800babc:	d901      	bls.n	800bac2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800babe:	2303      	movs	r3, #3
 800bac0:	e0b5      	b.n	800bc2e <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800bac2:	f7ff fbea 	bl	800b29a <LL_RCC_IsActiveFlag_SHDHPRE>
 800bac6:	4603      	mov	r3, r0
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d0f1      	beq.n	800bab0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	f003 0304 	and.w	r3, r3, #4
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d016      	beq.n	800bb06 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	68db      	ldr	r3, [r3, #12]
 800badc:	4618      	mov	r0, r3
 800bade:	f7ff faef 	bl	800b0c0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800bae2:	f7fa fe61 	bl	80067a8 <HAL_GetTick>
 800bae6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800bae8:	e008      	b.n	800bafc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800baea:	f7fa fe5d 	bl	80067a8 <HAL_GetTick>
 800baee:	4602      	mov	r2, r0
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	1ad3      	subs	r3, r2, r3
 800baf4:	2b02      	cmp	r3, #2
 800baf6:	d901      	bls.n	800bafc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800baf8:	2303      	movs	r3, #3
 800bafa:	e098      	b.n	800bc2e <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800bafc:	f7ff fbe0 	bl	800b2c0 <LL_RCC_IsActiveFlag_PPRE1>
 800bb00:	4603      	mov	r3, r0
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d0f1      	beq.n	800baea <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	f003 0308 	and.w	r3, r3, #8
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d017      	beq.n	800bb42 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	691b      	ldr	r3, [r3, #16]
 800bb16:	00db      	lsls	r3, r3, #3
 800bb18:	4618      	mov	r0, r3
 800bb1a:	f7ff fae5 	bl	800b0e8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800bb1e:	f7fa fe43 	bl	80067a8 <HAL_GetTick>
 800bb22:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800bb24:	e008      	b.n	800bb38 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800bb26:	f7fa fe3f 	bl	80067a8 <HAL_GetTick>
 800bb2a:	4602      	mov	r2, r0
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	1ad3      	subs	r3, r2, r3
 800bb30:	2b02      	cmp	r3, #2
 800bb32:	d901      	bls.n	800bb38 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800bb34:	2303      	movs	r3, #3
 800bb36:	e07a      	b.n	800bc2e <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800bb38:	f7ff fbd4 	bl	800b2e4 <LL_RCC_IsActiveFlag_PPRE2>
 800bb3c:	4603      	mov	r3, r0
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d0f1      	beq.n	800bb26 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	f003 0301 	and.w	r3, r3, #1
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d043      	beq.n	800bbd6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	685b      	ldr	r3, [r3, #4]
 800bb52:	2b02      	cmp	r3, #2
 800bb54:	d106      	bne.n	800bb64 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800bb56:	f7ff f885 	bl	800ac64 <LL_RCC_HSE_IsReady>
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d11e      	bne.n	800bb9e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800bb60:	2301      	movs	r3, #1
 800bb62:	e064      	b.n	800bc2e <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	685b      	ldr	r3, [r3, #4]
 800bb68:	2b03      	cmp	r3, #3
 800bb6a:	d106      	bne.n	800bb7a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800bb6c:	f7ff fb2d 	bl	800b1ca <LL_RCC_PLL_IsReady>
 800bb70:	4603      	mov	r3, r0
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d113      	bne.n	800bb9e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800bb76:	2301      	movs	r3, #1
 800bb78:	e059      	b.n	800bc2e <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	685b      	ldr	r3, [r3, #4]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d106      	bne.n	800bb90 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800bb82:	f7ff f9ed 	bl	800af60 <LL_RCC_MSI_IsReady>
 800bb86:	4603      	mov	r3, r0
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d108      	bne.n	800bb9e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800bb8c:	2301      	movs	r3, #1
 800bb8e:	e04e      	b.n	800bc2e <HAL_RCC_ClockConfig+0x26a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800bb90:	f7ff f898 	bl	800acc4 <LL_RCC_HSI_IsReady>
 800bb94:	4603      	mov	r3, r0
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d101      	bne.n	800bb9e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800bb9a:	2301      	movs	r3, #1
 800bb9c:	e047      	b.n	800bc2e <HAL_RCC_ClockConfig+0x26a>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	685b      	ldr	r3, [r3, #4]
 800bba2:	4618      	mov	r0, r3
 800bba4:	f7ff fa2b 	bl	800affe <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bba8:	f7fa fdfe 	bl	80067a8 <HAL_GetTick>
 800bbac:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bbae:	e00a      	b.n	800bbc6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bbb0:	f7fa fdfa 	bl	80067a8 <HAL_GetTick>
 800bbb4:	4602      	mov	r2, r0
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	1ad3      	subs	r3, r2, r3
 800bbba:	f241 3288 	movw	r2, #5000	; 0x1388
 800bbbe:	4293      	cmp	r3, r2
 800bbc0:	d901      	bls.n	800bbc6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800bbc2:	2303      	movs	r3, #3
 800bbc4:	e033      	b.n	800bc2e <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bbc6:	f7ff fa2e 	bl	800b026 <LL_RCC_GetSysClkSource>
 800bbca:	4602      	mov	r2, r0
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	685b      	ldr	r3, [r3, #4]
 800bbd0:	009b      	lsls	r3, r3, #2
 800bbd2:	429a      	cmp	r2, r3
 800bbd4:	d1ec      	bne.n	800bbb0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800bbd6:	4b18      	ldr	r3, [pc, #96]	; (800bc38 <HAL_RCC_ClockConfig+0x274>)
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	f003 0307 	and.w	r3, r3, #7
 800bbde:	683a      	ldr	r2, [r7, #0]
 800bbe0:	429a      	cmp	r2, r3
 800bbe2:	d21b      	bcs.n	800bc1c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bbe4:	4b14      	ldr	r3, [pc, #80]	; (800bc38 <HAL_RCC_ClockConfig+0x274>)
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	f023 0207 	bic.w	r2, r3, #7
 800bbec:	4912      	ldr	r1, [pc, #72]	; (800bc38 <HAL_RCC_ClockConfig+0x274>)
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	4313      	orrs	r3, r2
 800bbf2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bbf4:	f7fa fdd8 	bl	80067a8 <HAL_GetTick>
 800bbf8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bbfa:	e008      	b.n	800bc0e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800bbfc:	f7fa fdd4 	bl	80067a8 <HAL_GetTick>
 800bc00:	4602      	mov	r2, r0
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	1ad3      	subs	r3, r2, r3
 800bc06:	2b02      	cmp	r3, #2
 800bc08:	d901      	bls.n	800bc0e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800bc0a:	2303      	movs	r3, #3
 800bc0c:	e00f      	b.n	800bc2e <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bc0e:	4b0a      	ldr	r3, [pc, #40]	; (800bc38 <HAL_RCC_ClockConfig+0x274>)
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	f003 0307 	and.w	r3, r3, #7
 800bc16:	683a      	ldr	r2, [r7, #0]
 800bc18:	429a      	cmp	r2, r3
 800bc1a:	d1ef      	bne.n	800bbfc <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 800bc1c:	f7f9 ff16 	bl	8005a4c <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800bc20:	f7fa fdce 	bl	80067c0 <HAL_GetTickPrio>
 800bc24:	4603      	mov	r3, r0
 800bc26:	4618      	mov	r0, r3
 800bc28:	f7f9 fc0a 	bl	8005440 <HAL_InitTick>
 800bc2c:	4603      	mov	r3, r0
}
 800bc2e:	4618      	mov	r0, r3
 800bc30:	3710      	adds	r7, #16
 800bc32:	46bd      	mov	sp, r7
 800bc34:	bd80      	pop	{r7, pc}
 800bc36:	bf00      	nop
 800bc38:	58004000 	.word	0x58004000

0800bc3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bc3c:	b590      	push	{r4, r7, lr}
 800bc3e:	b085      	sub	sp, #20
 800bc40:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bc42:	f7ff f9f0 	bl	800b026 <LL_RCC_GetSysClkSource>
 800bc46:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d10a      	bne.n	800bc64 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800bc4e:	f7ff f9ac 	bl	800afaa <LL_RCC_MSI_GetRange>
 800bc52:	4603      	mov	r3, r0
 800bc54:	091b      	lsrs	r3, r3, #4
 800bc56:	f003 030f 	and.w	r3, r3, #15
 800bc5a:	4a2a      	ldr	r2, [pc, #168]	; (800bd04 <HAL_RCC_GetSysClockFreq+0xc8>)
 800bc5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc60:	60fb      	str	r3, [r7, #12]
 800bc62:	e04a      	b.n	800bcfa <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2b04      	cmp	r3, #4
 800bc68:	d102      	bne.n	800bc70 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800bc6a:	4b27      	ldr	r3, [pc, #156]	; (800bd08 <HAL_RCC_GetSysClockFreq+0xcc>)
 800bc6c:	60fb      	str	r3, [r7, #12]
 800bc6e:	e044      	b.n	800bcfa <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	2b08      	cmp	r3, #8
 800bc74:	d10a      	bne.n	800bc8c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800bc76:	f7fe ffa7 	bl	800abc8 <LL_RCC_HSE_IsEnabledDiv2>
 800bc7a:	4603      	mov	r3, r0
 800bc7c:	2b01      	cmp	r3, #1
 800bc7e:	d102      	bne.n	800bc86 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800bc80:	4b21      	ldr	r3, [pc, #132]	; (800bd08 <HAL_RCC_GetSysClockFreq+0xcc>)
 800bc82:	60fb      	str	r3, [r7, #12]
 800bc84:	e039      	b.n	800bcfa <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800bc86:	4b21      	ldr	r3, [pc, #132]	; (800bd0c <HAL_RCC_GetSysClockFreq+0xd0>)
 800bc88:	60fb      	str	r3, [r7, #12]
 800bc8a:	e036      	b.n	800bcfa <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800bc8c:	f7ff fad4 	bl	800b238 <LL_RCC_PLL_GetMainSource>
 800bc90:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	2b02      	cmp	r3, #2
 800bc96:	d002      	beq.n	800bc9e <HAL_RCC_GetSysClockFreq+0x62>
 800bc98:	2b03      	cmp	r3, #3
 800bc9a:	d003      	beq.n	800bca4 <HAL_RCC_GetSysClockFreq+0x68>
 800bc9c:	e00d      	b.n	800bcba <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800bc9e:	4b1a      	ldr	r3, [pc, #104]	; (800bd08 <HAL_RCC_GetSysClockFreq+0xcc>)
 800bca0:	60bb      	str	r3, [r7, #8]
        break;
 800bca2:	e015      	b.n	800bcd0 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800bca4:	f7fe ff90 	bl	800abc8 <LL_RCC_HSE_IsEnabledDiv2>
 800bca8:	4603      	mov	r3, r0
 800bcaa:	2b01      	cmp	r3, #1
 800bcac:	d102      	bne.n	800bcb4 <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800bcae:	4b16      	ldr	r3, [pc, #88]	; (800bd08 <HAL_RCC_GetSysClockFreq+0xcc>)
 800bcb0:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800bcb2:	e00d      	b.n	800bcd0 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 800bcb4:	4b15      	ldr	r3, [pc, #84]	; (800bd0c <HAL_RCC_GetSysClockFreq+0xd0>)
 800bcb6:	60bb      	str	r3, [r7, #8]
        break;
 800bcb8:	e00a      	b.n	800bcd0 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800bcba:	f7ff f976 	bl	800afaa <LL_RCC_MSI_GetRange>
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	091b      	lsrs	r3, r3, #4
 800bcc2:	f003 030f 	and.w	r3, r3, #15
 800bcc6:	4a0f      	ldr	r2, [pc, #60]	; (800bd04 <HAL_RCC_GetSysClockFreq+0xc8>)
 800bcc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bccc:	60bb      	str	r3, [r7, #8]
        break;
 800bcce:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 800bcd0:	f7ff fa8d 	bl	800b1ee <LL_RCC_PLL_GetN>
 800bcd4:	4602      	mov	r2, r0
 800bcd6:	68bb      	ldr	r3, [r7, #8]
 800bcd8:	fb03 f402 	mul.w	r4, r3, r2
 800bcdc:	f7ff faa0 	bl	800b220 <LL_RCC_PLL_GetDivider>
 800bce0:	4603      	mov	r3, r0
 800bce2:	091b      	lsrs	r3, r3, #4
 800bce4:	3301      	adds	r3, #1
 800bce6:	fbb4 f4f3 	udiv	r4, r4, r3
 800bcea:	f7ff fa8d 	bl	800b208 <LL_RCC_PLL_GetR>
 800bcee:	4603      	mov	r3, r0
 800bcf0:	0f5b      	lsrs	r3, r3, #29
 800bcf2:	3301      	adds	r3, #1
 800bcf4:	fbb4 f3f3 	udiv	r3, r4, r3
 800bcf8:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 800bcfa:	68fb      	ldr	r3, [r7, #12]
}
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	3714      	adds	r7, #20
 800bd00:	46bd      	mov	sp, r7
 800bd02:	bd90      	pop	{r4, r7, pc}
 800bd04:	08017944 	.word	0x08017944
 800bd08:	00f42400 	.word	0x00f42400
 800bd0c:	01e84800 	.word	0x01e84800

0800bd10 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bd10:	b598      	push	{r3, r4, r7, lr}
 800bd12:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800bd14:	f7ff ff92 	bl	800bc3c <HAL_RCC_GetSysClockFreq>
 800bd18:	4604      	mov	r4, r0
 800bd1a:	f7ff f9f9 	bl	800b110 <LL_RCC_GetAHBPrescaler>
 800bd1e:	4603      	mov	r3, r0
 800bd20:	091b      	lsrs	r3, r3, #4
 800bd22:	f003 030f 	and.w	r3, r3, #15
 800bd26:	4a03      	ldr	r2, [pc, #12]	; (800bd34 <HAL_RCC_GetHCLKFreq+0x24>)
 800bd28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd2c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800bd30:	4618      	mov	r0, r3
 800bd32:	bd98      	pop	{r3, r4, r7, pc}
 800bd34:	080178e4 	.word	0x080178e4

0800bd38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bd38:	b598      	push	{r3, r4, r7, lr}
 800bd3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800bd3c:	f7ff ffe8 	bl	800bd10 <HAL_RCC_GetHCLKFreq>
 800bd40:	4604      	mov	r4, r0
 800bd42:	f7ff fa18 	bl	800b176 <LL_RCC_GetAPB2Prescaler>
 800bd46:	4603      	mov	r3, r0
 800bd48:	0adb      	lsrs	r3, r3, #11
 800bd4a:	f003 0307 	and.w	r3, r3, #7
 800bd4e:	4a04      	ldr	r2, [pc, #16]	; (800bd60 <HAL_RCC_GetPCLK2Freq+0x28>)
 800bd50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd54:	f003 031f 	and.w	r3, r3, #31
 800bd58:	fa24 f303 	lsr.w	r3, r4, r3
}
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	bd98      	pop	{r3, r4, r7, pc}
 800bd60:	08017924 	.word	0x08017924

0800bd64 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b082      	sub	sp, #8
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
 800bd6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |  \
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	226f      	movs	r2, #111	; 0x6f
 800bd72:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 800bd74:	f7ff f957 	bl	800b026 <LL_RCC_GetSysClkSource>
 800bd78:	4602      	mov	r2, r0
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 800bd7e:	f7ff f9c7 	bl	800b110 <LL_RCC_GetAHBPrescaler>
 800bd82:	4602      	mov	r2, r0
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 800bd88:	f7ff f9e9 	bl	800b15e <LL_RCC_GetAPB1Prescaler>
 800bd8c:	4602      	mov	r2, r0
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 800bd92:	f7ff f9f0 	bl	800b176 <LL_RCC_GetAPB2Prescaler>
 800bd96:	4602      	mov	r2, r0
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 800bd9c:	f7ff f9c4 	bl	800b128 <LL_C2_RCC_GetAHBPrescaler>
 800bda0:	4602      	mov	r2, r0
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 800bda6:	f7ff f9cc 	bl	800b142 <LL_RCC_GetAHB4Prescaler>
 800bdaa:	4602      	mov	r2, r0
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800bdb0:	4b04      	ldr	r3, [pc, #16]	; (800bdc4 <HAL_RCC_GetClockConfig+0x60>)
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	f003 0207 	and.w	r2, r3, #7
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	601a      	str	r2, [r3, #0]
}
 800bdbc:	bf00      	nop
 800bdbe:	3708      	adds	r7, #8
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	bd80      	pop	{r7, pc}
 800bdc4:	58004000 	.word	0x58004000

0800bdc8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800bdc8:	b590      	push	{r4, r7, lr}
 800bdca:	b085      	sub	sp, #20
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	2bb0      	cmp	r3, #176	; 0xb0
 800bdd4:	d903      	bls.n	800bdde <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800bdd6:	4b15      	ldr	r3, [pc, #84]	; (800be2c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800bdd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdda:	60fb      	str	r3, [r7, #12]
 800bddc:	e007      	b.n	800bdee <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	091b      	lsrs	r3, r3, #4
 800bde2:	f003 030f 	and.w	r3, r3, #15
 800bde6:	4a11      	ldr	r2, [pc, #68]	; (800be2c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800bde8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bdec:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800bdee:	f7ff f9a8 	bl	800b142 <LL_RCC_GetAHB4Prescaler>
 800bdf2:	4603      	mov	r3, r0
 800bdf4:	091b      	lsrs	r3, r3, #4
 800bdf6:	f003 030f 	and.w	r3, r3, #15
 800bdfa:	4a0d      	ldr	r2, [pc, #52]	; (800be30 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800bdfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be00:	68fa      	ldr	r2, [r7, #12]
 800be02:	fbb2 f3f3 	udiv	r3, r2, r3
 800be06:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800be08:	68bb      	ldr	r3, [r7, #8]
 800be0a:	4a0a      	ldr	r2, [pc, #40]	; (800be34 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800be0c:	fba2 2303 	umull	r2, r3, r2, r3
 800be10:	0c9c      	lsrs	r4, r3, #18
 800be12:	f7fe fecb 	bl	800abac <HAL_PWREx_GetVoltageRange>
 800be16:	4603      	mov	r3, r0
 800be18:	4619      	mov	r1, r3
 800be1a:	4620      	mov	r0, r4
 800be1c:	f000 f80c 	bl	800be38 <RCC_SetFlashLatency>
 800be20:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 800be22:	4618      	mov	r0, r3
 800be24:	3714      	adds	r7, #20
 800be26:	46bd      	mov	sp, r7
 800be28:	bd90      	pop	{r4, r7, pc}
 800be2a:	bf00      	nop
 800be2c:	08017944 	.word	0x08017944
 800be30:	080178e4 	.word	0x080178e4
 800be34:	431bde83 	.word	0x431bde83

0800be38 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800be38:	b590      	push	{r4, r7, lr}
 800be3a:	b093      	sub	sp, #76	; 0x4c
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
 800be40:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800be42:	4b39      	ldr	r3, [pc, #228]	; (800bf28 <RCC_SetFlashLatency+0xf0>)
 800be44:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800be48:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800be4a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800be4e:	4a37      	ldr	r2, [pc, #220]	; (800bf2c <RCC_SetFlashLatency+0xf4>)
 800be50:	f107 031c 	add.w	r3, r7, #28
 800be54:	ca07      	ldmia	r2, {r0, r1, r2}
 800be56:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800be5a:	4b35      	ldr	r3, [pc, #212]	; (800bf30 <RCC_SetFlashLatency+0xf8>)
 800be5c:	f107 040c 	add.w	r4, r7, #12
 800be60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800be62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800be66:	2300      	movs	r3, #0
 800be68:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800be6a:	683b      	ldr	r3, [r7, #0]
 800be6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be70:	d11c      	bne.n	800beac <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800be72:	2300      	movs	r3, #0
 800be74:	643b      	str	r3, [r7, #64]	; 0x40
 800be76:	e015      	b.n	800bea4 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800be78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be7a:	009b      	lsls	r3, r3, #2
 800be7c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800be80:	4413      	add	r3, r2
 800be82:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800be86:	687a      	ldr	r2, [r7, #4]
 800be88:	429a      	cmp	r2, r3
 800be8a:	d808      	bhi.n	800be9e <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800be8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be8e:	009b      	lsls	r3, r3, #2
 800be90:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800be94:	4413      	add	r3, r2
 800be96:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800be9a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800be9c:	e022      	b.n	800bee4 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800be9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bea0:	3301      	adds	r3, #1
 800bea2:	643b      	str	r3, [r7, #64]	; 0x40
 800bea4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bea6:	2b03      	cmp	r3, #3
 800bea8:	d9e6      	bls.n	800be78 <RCC_SetFlashLatency+0x40>
 800beaa:	e01b      	b.n	800bee4 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800beac:	2300      	movs	r3, #0
 800beae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800beb0:	e015      	b.n	800bede <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800beb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800beb4:	009b      	lsls	r3, r3, #2
 800beb6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800beba:	4413      	add	r3, r2
 800bebc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800bec0:	687a      	ldr	r2, [r7, #4]
 800bec2:	429a      	cmp	r2, r3
 800bec4:	d808      	bhi.n	800bed8 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800bec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bec8:	009b      	lsls	r3, r3, #2
 800beca:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800bece:	4413      	add	r3, r2
 800bed0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800bed4:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800bed6:	e005      	b.n	800bee4 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800bed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800beda:	3301      	adds	r3, #1
 800bedc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bee0:	2b02      	cmp	r3, #2
 800bee2:	d9e6      	bls.n	800beb2 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 800bee4:	4b13      	ldr	r3, [pc, #76]	; (800bf34 <RCC_SetFlashLatency+0xfc>)
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	f023 0207 	bic.w	r2, r3, #7
 800beec:	4911      	ldr	r1, [pc, #68]	; (800bf34 <RCC_SetFlashLatency+0xfc>)
 800beee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bef0:	4313      	orrs	r3, r2
 800bef2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800bef4:	f7fa fc58 	bl	80067a8 <HAL_GetTick>
 800bef8:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800befa:	e008      	b.n	800bf0e <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800befc:	f7fa fc54 	bl	80067a8 <HAL_GetTick>
 800bf00:	4602      	mov	r2, r0
 800bf02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf04:	1ad3      	subs	r3, r2, r3
 800bf06:	2b02      	cmp	r3, #2
 800bf08:	d901      	bls.n	800bf0e <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 800bf0a:	2303      	movs	r3, #3
 800bf0c:	e007      	b.n	800bf1e <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800bf0e:	4b09      	ldr	r3, [pc, #36]	; (800bf34 <RCC_SetFlashLatency+0xfc>)
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	f003 0307 	and.w	r3, r3, #7
 800bf16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bf18:	429a      	cmp	r2, r3
 800bf1a:	d1ef      	bne.n	800befc <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 800bf1c:	2300      	movs	r3, #0
}
 800bf1e:	4618      	mov	r0, r3
 800bf20:	374c      	adds	r7, #76	; 0x4c
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bd90      	pop	{r4, r7, pc}
 800bf26:	bf00      	nop
 800bf28:	080172cc 	.word	0x080172cc
 800bf2c:	080172dc 	.word	0x080172dc
 800bf30:	080172e8 	.word	0x080172e8
 800bf34:	58004000 	.word	0x58004000

0800bf38 <LL_RCC_LSE_IsEnabled>:
{
 800bf38:	b480      	push	{r7}
 800bf3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800bf3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bf40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf44:	f003 0301 	and.w	r3, r3, #1
 800bf48:	2b01      	cmp	r3, #1
 800bf4a:	d101      	bne.n	800bf50 <LL_RCC_LSE_IsEnabled+0x18>
 800bf4c:	2301      	movs	r3, #1
 800bf4e:	e000      	b.n	800bf52 <LL_RCC_LSE_IsEnabled+0x1a>
 800bf50:	2300      	movs	r3, #0
}
 800bf52:	4618      	mov	r0, r3
 800bf54:	46bd      	mov	sp, r7
 800bf56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5a:	4770      	bx	lr

0800bf5c <LL_RCC_LSE_IsReady>:
{
 800bf5c:	b480      	push	{r7}
 800bf5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800bf60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bf64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf68:	f003 0302 	and.w	r3, r3, #2
 800bf6c:	2b02      	cmp	r3, #2
 800bf6e:	d101      	bne.n	800bf74 <LL_RCC_LSE_IsReady+0x18>
 800bf70:	2301      	movs	r3, #1
 800bf72:	e000      	b.n	800bf76 <LL_RCC_LSE_IsReady+0x1a>
 800bf74:	2300      	movs	r3, #0
}
 800bf76:	4618      	mov	r0, r3
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7e:	4770      	bx	lr

0800bf80 <LL_RCC_SetRFWKPClockSource>:
{
 800bf80:	b480      	push	{r7}
 800bf82:	b083      	sub	sp, #12
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800bf88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bf8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bf90:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800bf94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	4313      	orrs	r3, r2
 800bf9c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800bfa0:	bf00      	nop
 800bfa2:	370c      	adds	r7, #12
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfaa:	4770      	bx	lr

0800bfac <LL_RCC_SetSMPSClockSource>:
{
 800bfac:	b480      	push	{r7}
 800bfae:	b083      	sub	sp, #12
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800bfb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bfb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfba:	f023 0203 	bic.w	r2, r3, #3
 800bfbe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	4313      	orrs	r3, r2
 800bfc6:	624b      	str	r3, [r1, #36]	; 0x24
}
 800bfc8:	bf00      	nop
 800bfca:	370c      	adds	r7, #12
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd2:	4770      	bx	lr

0800bfd4 <LL_RCC_SetSMPSPrescaler>:
{
 800bfd4:	b480      	push	{r7}
 800bfd6:	b083      	sub	sp, #12
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800bfdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bfe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfe2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800bfe6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	4313      	orrs	r3, r2
 800bfee:	624b      	str	r3, [r1, #36]	; 0x24
}
 800bff0:	bf00      	nop
 800bff2:	370c      	adds	r7, #12
 800bff4:	46bd      	mov	sp, r7
 800bff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffa:	4770      	bx	lr

0800bffc <LL_RCC_SetUSARTClockSource>:
{
 800bffc:	b480      	push	{r7}
 800bffe:	b083      	sub	sp, #12
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800c004:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c00c:	f023 0203 	bic.w	r2, r3, #3
 800c010:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	4313      	orrs	r3, r2
 800c018:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800c01c:	bf00      	nop
 800c01e:	370c      	adds	r7, #12
 800c020:	46bd      	mov	sp, r7
 800c022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c026:	4770      	bx	lr

0800c028 <LL_RCC_SetLPUARTClockSource>:
{
 800c028:	b480      	push	{r7}
 800c02a:	b083      	sub	sp, #12
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800c030:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c038:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c03c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	4313      	orrs	r3, r2
 800c044:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800c048:	bf00      	nop
 800c04a:	370c      	adds	r7, #12
 800c04c:	46bd      	mov	sp, r7
 800c04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c052:	4770      	bx	lr

0800c054 <LL_RCC_SetI2CClockSource>:
{
 800c054:	b480      	push	{r7}
 800c056:	b083      	sub	sp, #12
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800c05c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c060:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	091b      	lsrs	r3, r3, #4
 800c068:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800c06c:	43db      	mvns	r3, r3
 800c06e:	401a      	ands	r2, r3
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	011b      	lsls	r3, r3, #4
 800c074:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800c078:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c07c:	4313      	orrs	r3, r2
 800c07e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800c082:	bf00      	nop
 800c084:	370c      	adds	r7, #12
 800c086:	46bd      	mov	sp, r7
 800c088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08c:	4770      	bx	lr

0800c08e <LL_RCC_SetLPTIMClockSource>:
{
 800c08e:	b480      	push	{r7}
 800c090:	b083      	sub	sp, #12
 800c092:	af00      	add	r7, sp, #0
 800c094:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800c096:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c09a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	0c1b      	lsrs	r3, r3, #16
 800c0a2:	041b      	lsls	r3, r3, #16
 800c0a4:	43db      	mvns	r3, r3
 800c0a6:	401a      	ands	r2, r3
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	041b      	lsls	r3, r3, #16
 800c0ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c0b0:	4313      	orrs	r3, r2
 800c0b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800c0b6:	bf00      	nop
 800c0b8:	370c      	adds	r7, #12
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c0:	4770      	bx	lr

0800c0c2 <LL_RCC_SetSAIClockSource>:
{
 800c0c2:	b480      	push	{r7}
 800c0c4:	b083      	sub	sp, #12
 800c0c6:	af00      	add	r7, sp, #0
 800c0c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800c0ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c0ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c0d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c0d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	4313      	orrs	r3, r2
 800c0de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800c0e2:	bf00      	nop
 800c0e4:	370c      	adds	r7, #12
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ec:	4770      	bx	lr

0800c0ee <LL_RCC_SetRNGClockSource>:
{
 800c0ee:	b480      	push	{r7}
 800c0f0:	b083      	sub	sp, #12
 800c0f2:	af00      	add	r7, sp, #0
 800c0f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800c0f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c0fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c0fe:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800c102:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	4313      	orrs	r3, r2
 800c10a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800c10e:	bf00      	nop
 800c110:	370c      	adds	r7, #12
 800c112:	46bd      	mov	sp, r7
 800c114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c118:	4770      	bx	lr

0800c11a <LL_RCC_SetCLK48ClockSource>:
{
 800c11a:	b480      	push	{r7}
 800c11c:	b083      	sub	sp, #12
 800c11e:	af00      	add	r7, sp, #0
 800c120:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800c122:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c12a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c12e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	4313      	orrs	r3, r2
 800c136:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800c13a:	bf00      	nop
 800c13c:	370c      	adds	r7, #12
 800c13e:	46bd      	mov	sp, r7
 800c140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c144:	4770      	bx	lr

0800c146 <LL_RCC_SetUSBClockSource>:
{
 800c146:	b580      	push	{r7, lr}
 800c148:	b082      	sub	sp, #8
 800c14a:	af00      	add	r7, sp, #0
 800c14c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	f7ff ffe3 	bl	800c11a <LL_RCC_SetCLK48ClockSource>
}
 800c154:	bf00      	nop
 800c156:	3708      	adds	r7, #8
 800c158:	46bd      	mov	sp, r7
 800c15a:	bd80      	pop	{r7, pc}

0800c15c <LL_RCC_SetADCClockSource>:
{
 800c15c:	b480      	push	{r7}
 800c15e:	b083      	sub	sp, #12
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800c164:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c16c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c170:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	4313      	orrs	r3, r2
 800c178:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800c17c:	bf00      	nop
 800c17e:	370c      	adds	r7, #12
 800c180:	46bd      	mov	sp, r7
 800c182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c186:	4770      	bx	lr

0800c188 <LL_RCC_SetRTCClockSource>:
{
 800c188:	b480      	push	{r7}
 800c18a:	b083      	sub	sp, #12
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800c190:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c198:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c19c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	4313      	orrs	r3, r2
 800c1a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800c1a8:	bf00      	nop
 800c1aa:	370c      	adds	r7, #12
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b2:	4770      	bx	lr

0800c1b4 <LL_RCC_GetRTCClockSource>:
{
 800c1b4:	b480      	push	{r7}
 800c1b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800c1b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c1bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c1c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1cc:	4770      	bx	lr

0800c1ce <LL_RCC_ForceBackupDomainReset>:
{
 800c1ce:	b480      	push	{r7}
 800c1d0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800c1d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c1d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c1da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c1de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c1e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800c1e6:	bf00      	nop
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ee:	4770      	bx	lr

0800c1f0 <LL_RCC_ReleaseBackupDomainReset>:
{
 800c1f0:	b480      	push	{r7}
 800c1f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800c1f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c1f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c1fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c200:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c204:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800c208:	bf00      	nop
 800c20a:	46bd      	mov	sp, r7
 800c20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c210:	4770      	bx	lr

0800c212 <LL_RCC_PLLSAI1_Enable>:
{
 800c212:	b480      	push	{r7}
 800c214:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800c216:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c220:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c224:	6013      	str	r3, [r2, #0]
}
 800c226:	bf00      	nop
 800c228:	46bd      	mov	sp, r7
 800c22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22e:	4770      	bx	lr

0800c230 <LL_RCC_PLLSAI1_Disable>:
{
 800c230:	b480      	push	{r7}
 800c232:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800c234:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c23e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c242:	6013      	str	r3, [r2, #0]
}
 800c244:	bf00      	nop
 800c246:	46bd      	mov	sp, r7
 800c248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24c:	4770      	bx	lr

0800c24e <LL_RCC_PLLSAI1_IsReady>:
{
 800c24e:	b480      	push	{r7}
 800c250:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800c252:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c25c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c260:	d101      	bne.n	800c266 <LL_RCC_PLLSAI1_IsReady+0x18>
 800c262:	2301      	movs	r3, #1
 800c264:	e000      	b.n	800c268 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800c266:	2300      	movs	r3, #0
}
 800c268:	4618      	mov	r0, r3
 800c26a:	46bd      	mov	sp, r7
 800c26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c270:	4770      	bx	lr

0800c272 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c272:	b580      	push	{r7, lr}
 800c274:	b088      	sub	sp, #32
 800c276:	af00      	add	r7, sp, #0
 800c278:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800c27a:	2300      	movs	r3, #0
 800c27c:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800c27e:	2300      	movs	r3, #0
 800c280:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d033      	beq.n	800c2f6 <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c292:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c296:	d00c      	beq.n	800c2b2 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800c298:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c29c:	d802      	bhi.n	800c2a4 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d010      	beq.n	800c2c4 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800c2a2:	e017      	b.n	800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x62>
 800c2a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c2a8:	d017      	beq.n	800c2da <HAL_RCCEx_PeriphCLKConfig+0x68>
 800c2aa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800c2ae:	d016      	beq.n	800c2de <HAL_RCCEx_PeriphCLKConfig+0x6c>
 800c2b0:	e010      	b.n	800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800c2b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c2b6:	68db      	ldr	r3, [r3, #12]
 800c2b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c2bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c2c0:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800c2c2:	e00d      	b.n	800c2e0 <HAL_RCCEx_PeriphCLKConfig+0x6e>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	3304      	adds	r3, #4
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	f000 f947 	bl	800c55c <RCCEx_PLLSAI1_ConfigNP>
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800c2d2:	e005      	b.n	800c2e0 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800c2d4:	2301      	movs	r3, #1
 800c2d6:	77fb      	strb	r3, [r7, #31]
        break;
 800c2d8:	e002      	b.n	800c2e0 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 800c2da:	bf00      	nop
 800c2dc:	e000      	b.n	800c2e0 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 800c2de:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c2e0:	7ffb      	ldrb	r3, [r7, #31]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d105      	bne.n	800c2f2 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	f7ff fee9 	bl	800c0c2 <LL_RCC_SetSAIClockSource>
 800c2f0:	e001      	b.n	800c2f6 <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2f2:	7ffb      	ldrb	r3, [r7, #31]
 800c2f4:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d046      	beq.n	800c390 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800c302:	f7ff ff57 	bl	800c1b4 <LL_RCC_GetRTCClockSource>
 800c306:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c30c:	69ba      	ldr	r2, [r7, #24]
 800c30e:	429a      	cmp	r2, r3
 800c310:	d03c      	beq.n	800c38c <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800c312:	f7fe fc3b 	bl	800ab8c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800c316:	69bb      	ldr	r3, [r7, #24]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d105      	bne.n	800c328 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c320:	4618      	mov	r0, r3
 800c322:	f7ff ff31 	bl	800c188 <LL_RCC_SetRTCClockSource>
 800c326:	e02e      	b.n	800c386 <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800c328:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c32c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c330:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800c332:	f7ff ff4c 	bl	800c1ce <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800c336:	f7ff ff5b 	bl	800c1f0 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800c33a:	697b      	ldr	r3, [r7, #20]
 800c33c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c344:	4313      	orrs	r3, r2
 800c346:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800c348:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c34c:	697b      	ldr	r3, [r7, #20]
 800c34e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800c352:	f7ff fdf1 	bl	800bf38 <LL_RCC_LSE_IsEnabled>
 800c356:	4603      	mov	r3, r0
 800c358:	2b01      	cmp	r3, #1
 800c35a:	d114      	bne.n	800c386 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c35c:	f7fa fa24 	bl	80067a8 <HAL_GetTick>
 800c360:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800c362:	e00b      	b.n	800c37c <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c364:	f7fa fa20 	bl	80067a8 <HAL_GetTick>
 800c368:	4602      	mov	r2, r0
 800c36a:	693b      	ldr	r3, [r7, #16]
 800c36c:	1ad3      	subs	r3, r2, r3
 800c36e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c372:	4293      	cmp	r3, r2
 800c374:	d902      	bls.n	800c37c <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 800c376:	2303      	movs	r3, #3
 800c378:	77fb      	strb	r3, [r7, #31]
              break;
 800c37a:	e004      	b.n	800c386 <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 800c37c:	f7ff fdee 	bl	800bf5c <LL_RCC_LSE_IsReady>
 800c380:	4603      	mov	r3, r0
 800c382:	2b01      	cmp	r3, #1
 800c384:	d1ee      	bne.n	800c364 <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800c386:	7ffb      	ldrb	r3, [r7, #31]
 800c388:	77bb      	strb	r3, [r7, #30]
 800c38a:	e001      	b.n	800c390 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c38c:	7ffb      	ldrb	r3, [r7, #31]
 800c38e:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	f003 0301 	and.w	r3, r3, #1
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d004      	beq.n	800c3a6 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	699b      	ldr	r3, [r3, #24]
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	f7ff fe2b 	bl	800bffc <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	f003 0302 	and.w	r3, r3, #2
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d004      	beq.n	800c3bc <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	69db      	ldr	r3, [r3, #28]
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	f7ff fe36 	bl	800c028 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	f003 0310 	and.w	r3, r3, #16
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d004      	beq.n	800c3d2 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	f7ff fe5e 	bl	800c08e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	f003 0320 	and.w	r3, r3, #32
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d004      	beq.n	800c3e8 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	f7ff fe53 	bl	800c08e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	f003 0304 	and.w	r3, r3, #4
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d004      	beq.n	800c3fe <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	6a1b      	ldr	r3, [r3, #32]
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	f7ff fe2b 	bl	800c054 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	f003 0308 	and.w	r3, r3, #8
 800c406:	2b00      	cmp	r3, #0
 800c408:	d004      	beq.n	800c414 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c40e:	4618      	mov	r0, r3
 800c410:	f7ff fe20 	bl	800c054 <LL_RCC_SetI2CClockSource>
  }
#endif

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d022      	beq.n	800c466 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c424:	4618      	mov	r0, r3
 800c426:	f7ff fe8e 	bl	800c146 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c42e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c432:	d107      	bne.n	800c444 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800c434:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c438:	68db      	ldr	r3, [r3, #12]
 800c43a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c43e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c442:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c448:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c44c:	d10b      	bne.n	800c466 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	3304      	adds	r3, #4
 800c452:	4618      	mov	r0, r3
 800c454:	f000 f8dd 	bl	800c612 <RCCEx_PLLSAI1_ConfigNQ>
 800c458:	4603      	mov	r3, r0
 800c45a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800c45c:	7ffb      	ldrb	r3, [r7, #31]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d001      	beq.n	800c466 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      {
        /* set overall return value */
        status = ret;
 800c462:	7ffb      	ldrb	r3, [r7, #31]
 800c464:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d02b      	beq.n	800c4ca <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c476:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c47a:	d008      	beq.n	800c48e <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c480:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c484:	d003      	beq.n	800c48e <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d105      	bne.n	800c49a <HAL_RCCEx_PeriphCLKConfig+0x228>
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c492:	4618      	mov	r0, r3
 800c494:	f7ff fe2b 	bl	800c0ee <LL_RCC_SetRNGClockSource>
 800c498:	e00a      	b.n	800c4b0 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c49e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c4a2:	60fb      	str	r3, [r7, #12]
 800c4a4:	2000      	movs	r0, #0
 800c4a6:	f7ff fe22 	bl	800c0ee <LL_RCC_SetRNGClockSource>
 800c4aa:	68f8      	ldr	r0, [r7, #12]
 800c4ac:	f7ff fe35 	bl	800c11a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4b4:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800c4b8:	d107      	bne.n	800c4ca <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800c4ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c4be:	68db      	ldr	r3, [r3, #12]
 800c4c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c4c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c4c8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d022      	beq.n	800c51c <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4da:	4618      	mov	r0, r3
 800c4dc:	f7ff fe3e 	bl	800c15c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c4e8:	d107      	bne.n	800c4fa <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800c4ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c4ee:	68db      	ldr	r3, [r3, #12]
 800c4f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c4f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c4f8:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c502:	d10b      	bne.n	800c51c <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	3304      	adds	r3, #4
 800c508:	4618      	mov	r0, r3
 800c50a:	f000 f8dd 	bl	800c6c8 <RCCEx_PLLSAI1_ConfigNR>
 800c50e:	4603      	mov	r3, r0
 800c510:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800c512:	7ffb      	ldrb	r3, [r7, #31]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d001      	beq.n	800c51c <HAL_RCCEx_PeriphCLKConfig+0x2aa>
      {
        /* set overall return value */
        status = ret;
 800c518:	7ffb      	ldrb	r3, [r7, #31]
 800c51a:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c524:	2b00      	cmp	r3, #0
 800c526:	d004      	beq.n	800c532 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c52c:	4618      	mov	r0, r3
 800c52e:	f7ff fd27 	bl	800bf80 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d009      	beq.n	800c552 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c542:	4618      	mov	r0, r3
 800c544:	f7ff fd46 	bl	800bfd4 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c54c:	4618      	mov	r0, r3
 800c54e:	f7ff fd2d 	bl	800bfac <LL_RCC_SetSMPSClockSource>
  }
#endif

  return status;
 800c552:	7fbb      	ldrb	r3, [r7, #30]
}
 800c554:	4618      	mov	r0, r3
 800c556:	3720      	adds	r7, #32
 800c558:	46bd      	mov	sp, r7
 800c55a:	bd80      	pop	{r7, pc}

0800c55c <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800c55c:	b580      	push	{r7, lr}
 800c55e:	b084      	sub	sp, #16
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c564:	2300      	movs	r3, #0
 800c566:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800c568:	f7ff fe62 	bl	800c230 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c56c:	f7fa f91c 	bl	80067a8 <HAL_GetTick>
 800c570:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c572:	e009      	b.n	800c588 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c574:	f7fa f918 	bl	80067a8 <HAL_GetTick>
 800c578:	4602      	mov	r2, r0
 800c57a:	68bb      	ldr	r3, [r7, #8]
 800c57c:	1ad3      	subs	r3, r2, r3
 800c57e:	2b02      	cmp	r3, #2
 800c580:	d902      	bls.n	800c588 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800c582:	2303      	movs	r3, #3
 800c584:	73fb      	strb	r3, [r7, #15]
      break;
 800c586:	e004      	b.n	800c592 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c588:	f7ff fe61 	bl	800c24e <LL_RCC_PLLSAI1_IsReady>
 800c58c:	4603      	mov	r3, r0
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d1f0      	bne.n	800c574 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800c592:	7bfb      	ldrb	r3, [r7, #15]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d137      	bne.n	800c608 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800c598:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c59c:	691b      	ldr	r3, [r3, #16]
 800c59e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	021b      	lsls	r3, r3, #8
 800c5a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c5ac:	4313      	orrs	r3, r2
 800c5ae:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800c5b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c5b4:	691b      	ldr	r3, [r3, #16]
 800c5b6:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	685b      	ldr	r3, [r3, #4]
 800c5be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c5c2:	4313      	orrs	r3, r2
 800c5c4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800c5c6:	f7ff fe24 	bl	800c212 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c5ca:	f7fa f8ed 	bl	80067a8 <HAL_GetTick>
 800c5ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c5d0:	e009      	b.n	800c5e6 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c5d2:	f7fa f8e9 	bl	80067a8 <HAL_GetTick>
 800c5d6:	4602      	mov	r2, r0
 800c5d8:	68bb      	ldr	r3, [r7, #8]
 800c5da:	1ad3      	subs	r3, r2, r3
 800c5dc:	2b02      	cmp	r3, #2
 800c5de:	d902      	bls.n	800c5e6 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800c5e0:	2303      	movs	r3, #3
 800c5e2:	73fb      	strb	r3, [r7, #15]
        break;
 800c5e4:	e004      	b.n	800c5f0 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c5e6:	f7ff fe32 	bl	800c24e <LL_RCC_PLLSAI1_IsReady>
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	2b01      	cmp	r3, #1
 800c5ee:	d1f0      	bne.n	800c5d2 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800c5f0:	7bfb      	ldrb	r3, [r7, #15]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d108      	bne.n	800c608 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800c5f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c5fa:	691a      	ldr	r2, [r3, #16]
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	691b      	ldr	r3, [r3, #16]
 800c600:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c604:	4313      	orrs	r3, r2
 800c606:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800c608:	7bfb      	ldrb	r3, [r7, #15]
}
 800c60a:	4618      	mov	r0, r3
 800c60c:	3710      	adds	r7, #16
 800c60e:	46bd      	mov	sp, r7
 800c610:	bd80      	pop	{r7, pc}

0800c612 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800c612:	b580      	push	{r7, lr}
 800c614:	b084      	sub	sp, #16
 800c616:	af00      	add	r7, sp, #0
 800c618:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c61a:	2300      	movs	r3, #0
 800c61c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800c61e:	f7ff fe07 	bl	800c230 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c622:	f7fa f8c1 	bl	80067a8 <HAL_GetTick>
 800c626:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c628:	e009      	b.n	800c63e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c62a:	f7fa f8bd 	bl	80067a8 <HAL_GetTick>
 800c62e:	4602      	mov	r2, r0
 800c630:	68bb      	ldr	r3, [r7, #8]
 800c632:	1ad3      	subs	r3, r2, r3
 800c634:	2b02      	cmp	r3, #2
 800c636:	d902      	bls.n	800c63e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800c638:	2303      	movs	r3, #3
 800c63a:	73fb      	strb	r3, [r7, #15]
      break;
 800c63c:	e004      	b.n	800c648 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c63e:	f7ff fe06 	bl	800c24e <LL_RCC_PLLSAI1_IsReady>
 800c642:	4603      	mov	r3, r0
 800c644:	2b00      	cmp	r3, #0
 800c646:	d1f0      	bne.n	800c62a <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800c648:	7bfb      	ldrb	r3, [r7, #15]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d137      	bne.n	800c6be <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800c64e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c652:	691b      	ldr	r3, [r3, #16]
 800c654:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	021b      	lsls	r3, r3, #8
 800c65e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c662:	4313      	orrs	r3, r2
 800c664:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800c666:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c66a:	691b      	ldr	r3, [r3, #16]
 800c66c:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	689b      	ldr	r3, [r3, #8]
 800c674:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c678:	4313      	orrs	r3, r2
 800c67a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800c67c:	f7ff fdc9 	bl	800c212 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c680:	f7fa f892 	bl	80067a8 <HAL_GetTick>
 800c684:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c686:	e009      	b.n	800c69c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c688:	f7fa f88e 	bl	80067a8 <HAL_GetTick>
 800c68c:	4602      	mov	r2, r0
 800c68e:	68bb      	ldr	r3, [r7, #8]
 800c690:	1ad3      	subs	r3, r2, r3
 800c692:	2b02      	cmp	r3, #2
 800c694:	d902      	bls.n	800c69c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800c696:	2303      	movs	r3, #3
 800c698:	73fb      	strb	r3, [r7, #15]
        break;
 800c69a:	e004      	b.n	800c6a6 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c69c:	f7ff fdd7 	bl	800c24e <LL_RCC_PLLSAI1_IsReady>
 800c6a0:	4603      	mov	r3, r0
 800c6a2:	2b01      	cmp	r3, #1
 800c6a4:	d1f0      	bne.n	800c688 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800c6a6:	7bfb      	ldrb	r3, [r7, #15]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d108      	bne.n	800c6be <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800c6ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c6b0:	691a      	ldr	r2, [r3, #16]
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	691b      	ldr	r3, [r3, #16]
 800c6b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c6ba:	4313      	orrs	r3, r2
 800c6bc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800c6be:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	3710      	adds	r7, #16
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bd80      	pop	{r7, pc}

0800c6c8 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b084      	sub	sp, #16
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800c6d4:	f7ff fdac 	bl	800c230 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c6d8:	f7fa f866 	bl	80067a8 <HAL_GetTick>
 800c6dc:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c6de:	e009      	b.n	800c6f4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c6e0:	f7fa f862 	bl	80067a8 <HAL_GetTick>
 800c6e4:	4602      	mov	r2, r0
 800c6e6:	68bb      	ldr	r3, [r7, #8]
 800c6e8:	1ad3      	subs	r3, r2, r3
 800c6ea:	2b02      	cmp	r3, #2
 800c6ec:	d902      	bls.n	800c6f4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800c6ee:	2303      	movs	r3, #3
 800c6f0:	73fb      	strb	r3, [r7, #15]
      break;
 800c6f2:	e004      	b.n	800c6fe <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c6f4:	f7ff fdab 	bl	800c24e <LL_RCC_PLLSAI1_IsReady>
 800c6f8:	4603      	mov	r3, r0
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d1f0      	bne.n	800c6e0 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800c6fe:	7bfb      	ldrb	r3, [r7, #15]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d137      	bne.n	800c774 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800c704:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c708:	691b      	ldr	r3, [r3, #16]
 800c70a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	021b      	lsls	r3, r3, #8
 800c714:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c718:	4313      	orrs	r3, r2
 800c71a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800c71c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c720:	691b      	ldr	r3, [r3, #16]
 800c722:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	68db      	ldr	r3, [r3, #12]
 800c72a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c72e:	4313      	orrs	r3, r2
 800c730:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800c732:	f7ff fd6e 	bl	800c212 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c736:	f7fa f837 	bl	80067a8 <HAL_GetTick>
 800c73a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c73c:	e009      	b.n	800c752 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c73e:	f7fa f833 	bl	80067a8 <HAL_GetTick>
 800c742:	4602      	mov	r2, r0
 800c744:	68bb      	ldr	r3, [r7, #8]
 800c746:	1ad3      	subs	r3, r2, r3
 800c748:	2b02      	cmp	r3, #2
 800c74a:	d902      	bls.n	800c752 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800c74c:	2303      	movs	r3, #3
 800c74e:	73fb      	strb	r3, [r7, #15]
        break;
 800c750:	e004      	b.n	800c75c <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c752:	f7ff fd7c 	bl	800c24e <LL_RCC_PLLSAI1_IsReady>
 800c756:	4603      	mov	r3, r0
 800c758:	2b01      	cmp	r3, #1
 800c75a:	d1f0      	bne.n	800c73e <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800c75c:	7bfb      	ldrb	r3, [r7, #15]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d108      	bne.n	800c774 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800c762:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c766:	691a      	ldr	r2, [r3, #16]
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	691b      	ldr	r3, [r3, #16]
 800c76c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c770:	4313      	orrs	r3, r2
 800c772:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800c774:	7bfb      	ldrb	r3, [r7, #15]
}
 800c776:	4618      	mov	r0, r3
 800c778:	3710      	adds	r7, #16
 800c77a:	46bd      	mov	sp, r7
 800c77c:	bd80      	pop	{r7, pc}

0800c77e <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c77e:	b580      	push	{r7, lr}
 800c780:	b082      	sub	sp, #8
 800c782:	af00      	add	r7, sp, #0
 800c784:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d101      	bne.n	800c790 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800c78c:	2301      	movs	r3, #1
 800c78e:	e090      	b.n	800c8b2 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800c796:	b2db      	uxtb	r3, r3
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d106      	bne.n	800c7aa <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	2200      	movs	r2, #0
 800c7a0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800c7a4:	6878      	ldr	r0, [r7, #4]
 800c7a6:	f7f8 fc1d 	bl	8004fe4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	2202      	movs	r2, #2
 800c7ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	22ca      	movs	r2, #202	; 0xca
 800c7b8:	625a      	str	r2, [r3, #36]	; 0x24
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	2253      	movs	r2, #83	; 0x53
 800c7c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800c7c2:	6878      	ldr	r0, [r7, #4]
 800c7c4:	f000 faba 	bl	800cd3c <RTC_EnterInitMode>
 800c7c8:	4603      	mov	r3, r0
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d009      	beq.n	800c7e2 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	22ff      	movs	r2, #255	; 0xff
 800c7d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	2204      	movs	r2, #4
 800c7da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 800c7de:	2301      	movs	r3, #1
 800c7e0:	e067      	b.n	800c8b2 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	689b      	ldr	r3, [r3, #8]
 800c7e8:	687a      	ldr	r2, [r7, #4]
 800c7ea:	6812      	ldr	r2, [r2, #0]
 800c7ec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c7f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c7f4:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	6899      	ldr	r1, [r3, #8]
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	685a      	ldr	r2, [r3, #4]
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	691b      	ldr	r3, [r3, #16]
 800c804:	431a      	orrs	r2, r3
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	699b      	ldr	r3, [r3, #24]
 800c80a:	431a      	orrs	r2, r3
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	430a      	orrs	r2, r1
 800c812:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	687a      	ldr	r2, [r7, #4]
 800c81a:	68d2      	ldr	r2, [r2, #12]
 800c81c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	6919      	ldr	r1, [r3, #16]
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	689b      	ldr	r3, [r3, #8]
 800c828:	041a      	lsls	r2, r3, #16
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	430a      	orrs	r2, r1
 800c830:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	68da      	ldr	r2, [r3, #12]
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c840:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	f022 0203 	bic.w	r2, r2, #3
 800c850:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	69da      	ldr	r2, [r3, #28]
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	695b      	ldr	r3, [r3, #20]
 800c860:	431a      	orrs	r2, r3
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	430a      	orrs	r2, r1
 800c868:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	689b      	ldr	r3, [r3, #8]
 800c870:	f003 0320 	and.w	r3, r3, #32
 800c874:	2b00      	cmp	r3, #0
 800c876:	d113      	bne.n	800c8a0 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c878:	6878      	ldr	r0, [r7, #4]
 800c87a:	f000 fa39 	bl	800ccf0 <HAL_RTC_WaitForSynchro>
 800c87e:	4603      	mov	r3, r0
 800c880:	2b00      	cmp	r3, #0
 800c882:	d00d      	beq.n	800c8a0 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	22ff      	movs	r2, #255	; 0xff
 800c88a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	2204      	movs	r2, #4
 800c890:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	2200      	movs	r2, #0
 800c898:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800c89c:	2301      	movs	r3, #1
 800c89e:	e008      	b.n	800c8b2 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	22ff      	movs	r2, #255	; 0xff
 800c8a6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2201      	movs	r2, #1
 800c8ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 800c8b0:	2300      	movs	r3, #0
  }
}
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	3708      	adds	r7, #8
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	bd80      	pop	{r7, pc}

0800c8ba <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c8ba:	b590      	push	{r4, r7, lr}
 800c8bc:	b087      	sub	sp, #28
 800c8be:	af00      	add	r7, sp, #0
 800c8c0:	60f8      	str	r0, [r7, #12]
 800c8c2:	60b9      	str	r1, [r7, #8]
 800c8c4:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c8cc:	2b01      	cmp	r3, #1
 800c8ce:	d101      	bne.n	800c8d4 <HAL_RTC_SetTime+0x1a>
 800c8d0:	2302      	movs	r3, #2
 800c8d2:	e0b2      	b.n	800ca3a <HAL_RTC_SetTime+0x180>
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	2201      	movs	r2, #1
 800c8d8:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	2202      	movs	r2, #2
 800c8e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if(Format == RTC_FORMAT_BIN)
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d126      	bne.n	800c938 <HAL_RTC_SetTime+0x7e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	689b      	ldr	r3, [r3, #8]
 800c8f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d102      	bne.n	800c8fe <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800c8f8:	68bb      	ldr	r3, [r7, #8]
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800c8fe:	68bb      	ldr	r3, [r7, #8]
 800c900:	781b      	ldrb	r3, [r3, #0]
 800c902:	4618      	mov	r0, r3
 800c904:	f000 fa44 	bl	800cd90 <RTC_ByteToBcd2>
 800c908:	4603      	mov	r3, r0
 800c90a:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800c90c:	68bb      	ldr	r3, [r7, #8]
 800c90e:	785b      	ldrb	r3, [r3, #1]
 800c910:	4618      	mov	r0, r3
 800c912:	f000 fa3d 	bl	800cd90 <RTC_ByteToBcd2>
 800c916:	4603      	mov	r3, r0
 800c918:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800c91a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800c91c:	68bb      	ldr	r3, [r7, #8]
 800c91e:	789b      	ldrb	r3, [r3, #2]
 800c920:	4618      	mov	r0, r3
 800c922:	f000 fa35 	bl	800cd90 <RTC_ByteToBcd2>
 800c926:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800c928:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800c92c:	68bb      	ldr	r3, [r7, #8]
 800c92e:	78db      	ldrb	r3, [r3, #3]
 800c930:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800c932:	4313      	orrs	r3, r2
 800c934:	617b      	str	r3, [r7, #20]
 800c936:	e018      	b.n	800c96a <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	689b      	ldr	r3, [r3, #8]
 800c93e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c942:	2b00      	cmp	r3, #0
 800c944:	d102      	bne.n	800c94c <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800c946:	68bb      	ldr	r3, [r7, #8]
 800c948:	2200      	movs	r2, #0
 800c94a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800c94c:	68bb      	ldr	r3, [r7, #8]
 800c94e:	781b      	ldrb	r3, [r3, #0]
 800c950:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800c952:	68bb      	ldr	r3, [r7, #8]
 800c954:	785b      	ldrb	r3, [r3, #1]
 800c956:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800c958:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800c95a:	68ba      	ldr	r2, [r7, #8]
 800c95c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800c95e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800c960:	68bb      	ldr	r3, [r7, #8]
 800c962:	78db      	ldrb	r3, [r3, #3]
 800c964:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800c966:	4313      	orrs	r3, r2
 800c968:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	22ca      	movs	r2, #202	; 0xca
 800c970:	625a      	str	r2, [r3, #36]	; 0x24
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	2253      	movs	r2, #83	; 0x53
 800c978:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800c97a:	68f8      	ldr	r0, [r7, #12]
 800c97c:	f000 f9de 	bl	800cd3c <RTC_EnterInitMode>
 800c980:	4603      	mov	r3, r0
 800c982:	2b00      	cmp	r3, #0
 800c984:	d00d      	beq.n	800c9a2 <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	22ff      	movs	r2, #255	; 0xff
 800c98c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	2204      	movs	r2, #4
 800c992:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	2200      	movs	r2, #0
 800c99a:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800c99e:	2301      	movs	r3, #1
 800c9a0:	e04b      	b.n	800ca3a <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	681a      	ldr	r2, [r3, #0]
 800c9a6:	697b      	ldr	r3, [r7, #20]
 800c9a8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800c9ac:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800c9b0:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	689a      	ldr	r2, [r3, #8]
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c9c0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	6899      	ldr	r1, [r3, #8]
 800c9c8:	68bb      	ldr	r3, [r7, #8]
 800c9ca:	68da      	ldr	r2, [r3, #12]
 800c9cc:	68bb      	ldr	r3, [r7, #8]
 800c9ce:	691b      	ldr	r3, [r3, #16]
 800c9d0:	431a      	orrs	r2, r3
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	430a      	orrs	r2, r1
 800c9d8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	68da      	ldr	r2, [r3, #12]
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c9e8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	689b      	ldr	r3, [r3, #8]
 800c9f0:	f003 0320 	and.w	r3, r3, #32
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d113      	bne.n	800ca20 <HAL_RTC_SetTime+0x166>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c9f8:	68f8      	ldr	r0, [r7, #12]
 800c9fa:	f000 f979 	bl	800ccf0 <HAL_RTC_WaitForSynchro>
 800c9fe:	4603      	mov	r3, r0
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d00d      	beq.n	800ca20 <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	22ff      	movs	r2, #255	; 0xff
 800ca0a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	2204      	movs	r2, #4
 800ca10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	2200      	movs	r2, #0
 800ca18:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800ca1c:	2301      	movs	r3, #1
 800ca1e:	e00c      	b.n	800ca3a <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	22ff      	movs	r2, #255	; 0xff
 800ca26:	625a      	str	r2, [r3, #36]	; 0x24
    
   hrtc->State = HAL_RTC_STATE_READY;
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	2201      	movs	r2, #1
 800ca2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

   __HAL_UNLOCK(hrtc); 
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	2200      	movs	r2, #0
 800ca34:	f883 2020 	strb.w	r2, [r3, #32]

   return HAL_OK;
 800ca38:	2300      	movs	r3, #0
  }
}
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	371c      	adds	r7, #28
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	bd90      	pop	{r4, r7, pc}

0800ca42 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800ca42:	b580      	push	{r7, lr}
 800ca44:	b086      	sub	sp, #24
 800ca46:	af00      	add	r7, sp, #0
 800ca48:	60f8      	str	r0, [r7, #12]
 800ca4a:	60b9      	str	r1, [r7, #8]
 800ca4c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ca54:	68bb      	ldr	r3, [r7, #8]
 800ca56:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	691b      	ldr	r3, [r3, #16]
 800ca5e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800ca62:	68bb      	ldr	r3, [r7, #8]
 800ca64:	609a      	str	r2, [r3, #8]
  
  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800ca70:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800ca74:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800ca76:	697b      	ldr	r3, [r7, #20]
 800ca78:	0c1b      	lsrs	r3, r3, #16
 800ca7a:	b2db      	uxtb	r3, r3
 800ca7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ca80:	b2da      	uxtb	r2, r3
 800ca82:	68bb      	ldr	r3, [r7, #8]
 800ca84:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 800ca86:	697b      	ldr	r3, [r7, #20]
 800ca88:	0a1b      	lsrs	r3, r3, #8
 800ca8a:	b2db      	uxtb	r3, r3
 800ca8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca90:	b2da      	uxtb	r2, r3
 800ca92:	68bb      	ldr	r3, [r7, #8]
 800ca94:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800ca96:	697b      	ldr	r3, [r7, #20]
 800ca98:	b2db      	uxtb	r3, r3
 800ca9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca9e:	b2da      	uxtb	r2, r3
 800caa0:	68bb      	ldr	r3, [r7, #8]
 800caa2:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800caa4:	697b      	ldr	r3, [r7, #20]
 800caa6:	0c1b      	lsrs	r3, r3, #16
 800caa8:	b2db      	uxtb	r3, r3
 800caaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800caae:	b2da      	uxtb	r2, r3
 800cab0:	68bb      	ldr	r3, [r7, #8]
 800cab2:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d11a      	bne.n	800caf0 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800caba:	68bb      	ldr	r3, [r7, #8]
 800cabc:	781b      	ldrb	r3, [r3, #0]
 800cabe:	4618      	mov	r0, r3
 800cac0:	f000 f986 	bl	800cdd0 <RTC_Bcd2ToByte>
 800cac4:	4603      	mov	r3, r0
 800cac6:	461a      	mov	r2, r3
 800cac8:	68bb      	ldr	r3, [r7, #8]
 800caca:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800cacc:	68bb      	ldr	r3, [r7, #8]
 800cace:	785b      	ldrb	r3, [r3, #1]
 800cad0:	4618      	mov	r0, r3
 800cad2:	f000 f97d 	bl	800cdd0 <RTC_Bcd2ToByte>
 800cad6:	4603      	mov	r3, r0
 800cad8:	461a      	mov	r2, r3
 800cada:	68bb      	ldr	r3, [r7, #8]
 800cadc:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800cade:	68bb      	ldr	r3, [r7, #8]
 800cae0:	789b      	ldrb	r3, [r3, #2]
 800cae2:	4618      	mov	r0, r3
 800cae4:	f000 f974 	bl	800cdd0 <RTC_Bcd2ToByte>
 800cae8:	4603      	mov	r3, r0
 800caea:	461a      	mov	r2, r3
 800caec:	68bb      	ldr	r3, [r7, #8]
 800caee:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800caf0:	2300      	movs	r3, #0
}
 800caf2:	4618      	mov	r0, r3
 800caf4:	3718      	adds	r7, #24
 800caf6:	46bd      	mov	sp, r7
 800caf8:	bd80      	pop	{r7, pc}

0800cafa <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800cafa:	b590      	push	{r4, r7, lr}
 800cafc:	b087      	sub	sp, #28
 800cafe:	af00      	add	r7, sp, #0
 800cb00:	60f8      	str	r0, [r7, #12]
 800cb02:	60b9      	str	r1, [r7, #8]
 800cb04:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	f893 3020 	ldrb.w	r3, [r3, #32]
 800cb0c:	2b01      	cmp	r3, #1
 800cb0e:	d101      	bne.n	800cb14 <HAL_RTC_SetDate+0x1a>
 800cb10:	2302      	movs	r3, #2
 800cb12:	e09c      	b.n	800cc4e <HAL_RTC_SetDate+0x154>
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	2201      	movs	r2, #1
 800cb18:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	2202      	movs	r2, #2
 800cb20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d10e      	bne.n	800cb48 <HAL_RTC_SetDate+0x4e>
 800cb2a:	68bb      	ldr	r3, [r7, #8]
 800cb2c:	785b      	ldrb	r3, [r3, #1]
 800cb2e:	f003 0310 	and.w	r3, r3, #16
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d008      	beq.n	800cb48 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800cb36:	68bb      	ldr	r3, [r7, #8]
 800cb38:	785b      	ldrb	r3, [r3, #1]
 800cb3a:	f023 0310 	bic.w	r3, r3, #16
 800cb3e:	b2db      	uxtb	r3, r3
 800cb40:	330a      	adds	r3, #10
 800cb42:	b2da      	uxtb	r2, r3
 800cb44:	68bb      	ldr	r3, [r7, #8]
 800cb46:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d11c      	bne.n	800cb88 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800cb4e:	68bb      	ldr	r3, [r7, #8]
 800cb50:	78db      	ldrb	r3, [r3, #3]
 800cb52:	4618      	mov	r0, r3
 800cb54:	f000 f91c 	bl	800cd90 <RTC_ByteToBcd2>
 800cb58:	4603      	mov	r3, r0
 800cb5a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800cb5c:	68bb      	ldr	r3, [r7, #8]
 800cb5e:	785b      	ldrb	r3, [r3, #1]
 800cb60:	4618      	mov	r0, r3
 800cb62:	f000 f915 	bl	800cd90 <RTC_ByteToBcd2>
 800cb66:	4603      	mov	r3, r0
 800cb68:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800cb6a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800cb6c:	68bb      	ldr	r3, [r7, #8]
 800cb6e:	789b      	ldrb	r3, [r3, #2]
 800cb70:	4618      	mov	r0, r3
 800cb72:	f000 f90d 	bl	800cd90 <RTC_ByteToBcd2>
 800cb76:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800cb78:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800cb7c:	68bb      	ldr	r3, [r7, #8]
 800cb7e:	781b      	ldrb	r3, [r3, #0]
 800cb80:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800cb82:	4313      	orrs	r3, r2
 800cb84:	617b      	str	r3, [r7, #20]
 800cb86:	e00e      	b.n	800cba6 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800cb88:	68bb      	ldr	r3, [r7, #8]
 800cb8a:	78db      	ldrb	r3, [r3, #3]
 800cb8c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800cb8e:	68bb      	ldr	r3, [r7, #8]
 800cb90:	785b      	ldrb	r3, [r3, #1]
 800cb92:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800cb94:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800cb96:	68ba      	ldr	r2, [r7, #8]
 800cb98:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800cb9a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800cb9c:	68bb      	ldr	r3, [r7, #8]
 800cb9e:	781b      	ldrb	r3, [r3, #0]
 800cba0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800cba2:	4313      	orrs	r3, r2
 800cba4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	22ca      	movs	r2, #202	; 0xca
 800cbac:	625a      	str	r2, [r3, #36]	; 0x24
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	2253      	movs	r2, #83	; 0x53
 800cbb4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800cbb6:	68f8      	ldr	r0, [r7, #12]
 800cbb8:	f000 f8c0 	bl	800cd3c <RTC_EnterInitMode>
 800cbbc:	4603      	mov	r3, r0
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d00d      	beq.n	800cbde <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	22ff      	movs	r2, #255	; 0xff
 800cbc8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	2204      	movs	r2, #4
 800cbce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800cbda:	2301      	movs	r3, #1
 800cbdc:	e037      	b.n	800cc4e <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	681a      	ldr	r2, [r3, #0]
 800cbe2:	697b      	ldr	r3, [r7, #20]
 800cbe4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800cbe8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800cbec:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	68da      	ldr	r2, [r3, #12]
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cbfc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	689b      	ldr	r3, [r3, #8]
 800cc04:	f003 0320 	and.w	r3, r3, #32
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d113      	bne.n	800cc34 <HAL_RTC_SetDate+0x13a>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cc0c:	68f8      	ldr	r0, [r7, #12]
 800cc0e:	f000 f86f 	bl	800ccf0 <HAL_RTC_WaitForSynchro>
 800cc12:	4603      	mov	r3, r0
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d00d      	beq.n	800cc34 <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	22ff      	movs	r2, #255	; 0xff
 800cc1e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	2204      	movs	r2, #4
 800cc24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800cc30:	2301      	movs	r3, #1
 800cc32:	e00c      	b.n	800cc4e <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	22ff      	movs	r2, #255	; 0xff
 800cc3a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	2201      	movs	r2, #1
 800cc40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	2200      	movs	r2, #0
 800cc48:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 800cc4c:	2300      	movs	r3, #0
  }
}
 800cc4e:	4618      	mov	r0, r3
 800cc50:	371c      	adds	r7, #28
 800cc52:	46bd      	mov	sp, r7
 800cc54:	bd90      	pop	{r4, r7, pc}

0800cc56 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800cc56:	b580      	push	{r7, lr}
 800cc58:	b086      	sub	sp, #24
 800cc5a:	af00      	add	r7, sp, #0
 800cc5c:	60f8      	str	r0, [r7, #12]
 800cc5e:	60b9      	str	r1, [r7, #8]
 800cc60:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	685b      	ldr	r3, [r3, #4]
 800cc68:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800cc6c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800cc70:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800cc72:	697b      	ldr	r3, [r7, #20]
 800cc74:	0c1b      	lsrs	r3, r3, #16
 800cc76:	b2da      	uxtb	r2, r3
 800cc78:	68bb      	ldr	r3, [r7, #8]
 800cc7a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800cc7c:	697b      	ldr	r3, [r7, #20]
 800cc7e:	0a1b      	lsrs	r3, r3, #8
 800cc80:	b2db      	uxtb	r3, r3
 800cc82:	f003 031f 	and.w	r3, r3, #31
 800cc86:	b2da      	uxtb	r2, r3
 800cc88:	68bb      	ldr	r3, [r7, #8]
 800cc8a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800cc8c:	697b      	ldr	r3, [r7, #20]
 800cc8e:	b2db      	uxtb	r3, r3
 800cc90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cc94:	b2da      	uxtb	r2, r3
 800cc96:	68bb      	ldr	r3, [r7, #8]
 800cc98:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 800cc9a:	697b      	ldr	r3, [r7, #20]
 800cc9c:	0b5b      	lsrs	r3, r3, #13
 800cc9e:	b2db      	uxtb	r3, r3
 800cca0:	f003 0307 	and.w	r3, r3, #7
 800cca4:	b2da      	uxtb	r2, r3
 800cca6:	68bb      	ldr	r3, [r7, #8]
 800cca8:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d11a      	bne.n	800cce6 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800ccb0:	68bb      	ldr	r3, [r7, #8]
 800ccb2:	78db      	ldrb	r3, [r3, #3]
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	f000 f88b 	bl	800cdd0 <RTC_Bcd2ToByte>
 800ccba:	4603      	mov	r3, r0
 800ccbc:	461a      	mov	r2, r3
 800ccbe:	68bb      	ldr	r3, [r7, #8]
 800ccc0:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800ccc2:	68bb      	ldr	r3, [r7, #8]
 800ccc4:	785b      	ldrb	r3, [r3, #1]
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	f000 f882 	bl	800cdd0 <RTC_Bcd2ToByte>
 800cccc:	4603      	mov	r3, r0
 800ccce:	461a      	mov	r2, r3
 800ccd0:	68bb      	ldr	r3, [r7, #8]
 800ccd2:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800ccd4:	68bb      	ldr	r3, [r7, #8]
 800ccd6:	789b      	ldrb	r3, [r3, #2]
 800ccd8:	4618      	mov	r0, r3
 800ccda:	f000 f879 	bl	800cdd0 <RTC_Bcd2ToByte>
 800ccde:	4603      	mov	r3, r0
 800cce0:	461a      	mov	r2, r3
 800cce2:	68bb      	ldr	r3, [r7, #8]
 800cce4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800cce6:	2300      	movs	r3, #0
}
 800cce8:	4618      	mov	r0, r3
 800ccea:	3718      	adds	r7, #24
 800ccec:	46bd      	mov	sp, r7
 800ccee:	bd80      	pop	{r7, pc}

0800ccf0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b084      	sub	sp, #16
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	68da      	ldr	r2, [r3, #12]
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800cd06:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800cd08:	f7f9 fd4e 	bl	80067a8 <HAL_GetTick>
 800cd0c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800cd0e:	e009      	b.n	800cd24 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800cd10:	f7f9 fd4a 	bl	80067a8 <HAL_GetTick>
 800cd14:	4602      	mov	r2, r0
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	1ad3      	subs	r3, r2, r3
 800cd1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cd1e:	d901      	bls.n	800cd24 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800cd20:	2303      	movs	r3, #3
 800cd22:	e007      	b.n	800cd34 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	68db      	ldr	r3, [r3, #12]
 800cd2a:	f003 0320 	and.w	r3, r3, #32
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d0ee      	beq.n	800cd10 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800cd32:	2300      	movs	r3, #0
}
 800cd34:	4618      	mov	r0, r3
 800cd36:	3710      	adds	r7, #16
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	bd80      	pop	{r7, pc}

0800cd3c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b084      	sub	sp, #16
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	68db      	ldr	r3, [r3, #12]
 800cd4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d119      	bne.n	800cd86 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	f04f 32ff 	mov.w	r2, #4294967295
 800cd5a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800cd5c:	f7f9 fd24 	bl	80067a8 <HAL_GetTick>
 800cd60:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800cd62:	e009      	b.n	800cd78 <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800cd64:	f7f9 fd20 	bl	80067a8 <HAL_GetTick>
 800cd68:	4602      	mov	r2, r0
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	1ad3      	subs	r3, r2, r3
 800cd6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cd72:	d901      	bls.n	800cd78 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800cd74:	2303      	movs	r3, #3
 800cd76:	e007      	b.n	800cd88 <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	68db      	ldr	r3, [r3, #12]
 800cd7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d0ee      	beq.n	800cd64 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800cd86:	2300      	movs	r3, #0
}
 800cd88:	4618      	mov	r0, r3
 800cd8a:	3710      	adds	r7, #16
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	bd80      	pop	{r7, pc}

0800cd90 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800cd90:	b480      	push	{r7}
 800cd92:	b085      	sub	sp, #20
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	4603      	mov	r3, r0
 800cd98:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800cd9e:	79fb      	ldrb	r3, [r7, #7]
 800cda0:	72fb      	strb	r3, [r7, #11]

  while(Param >= 10U)
 800cda2:	e005      	b.n	800cdb0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	3301      	adds	r3, #1
 800cda8:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800cdaa:	7afb      	ldrb	r3, [r7, #11]
 800cdac:	3b0a      	subs	r3, #10
 800cdae:	72fb      	strb	r3, [r7, #11]
  while(Param >= 10U)
 800cdb0:	7afb      	ldrb	r3, [r7, #11]
 800cdb2:	2b09      	cmp	r3, #9
 800cdb4:	d8f6      	bhi.n	800cda4 <RTC_ByteToBcd2+0x14>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	b2db      	uxtb	r3, r3
 800cdba:	011b      	lsls	r3, r3, #4
 800cdbc:	b2da      	uxtb	r2, r3
 800cdbe:	7afb      	ldrb	r3, [r7, #11]
 800cdc0:	4313      	orrs	r3, r2
 800cdc2:	b2db      	uxtb	r3, r3
}
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	3714      	adds	r7, #20
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdce:	4770      	bx	lr

0800cdd0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800cdd0:	b480      	push	{r7}
 800cdd2:	b085      	sub	sp, #20
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	4603      	mov	r3, r0
 800cdd8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800cdda:	79fb      	ldrb	r3, [r7, #7]
 800cddc:	091b      	lsrs	r3, r3, #4
 800cdde:	b2db      	uxtb	r3, r3
 800cde0:	461a      	mov	r2, r3
 800cde2:	4613      	mov	r3, r2
 800cde4:	009b      	lsls	r3, r3, #2
 800cde6:	4413      	add	r3, r2
 800cde8:	005b      	lsls	r3, r3, #1
 800cdea:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	b2da      	uxtb	r2, r3
 800cdf0:	79fb      	ldrb	r3, [r7, #7]
 800cdf2:	f003 030f 	and.w	r3, r3, #15
 800cdf6:	b2db      	uxtb	r3, r3
 800cdf8:	4413      	add	r3, r2
 800cdfa:	b2db      	uxtb	r3, r3
}
 800cdfc:	4618      	mov	r0, r3
 800cdfe:	3714      	adds	r7, #20
 800ce00:	46bd      	mov	sp, r7
 800ce02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce06:	4770      	bx	lr

0800ce08 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800ce08:	b480      	push	{r7}
 800ce0a:	b087      	sub	sp, #28
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	60f8      	str	r0, [r7, #12]
 800ce10:	60b9      	str	r1, [r7, #8]
 800ce12:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	3350      	adds	r3, #80	; 0x50
 800ce1a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800ce1c:	68bb      	ldr	r3, [r7, #8]
 800ce1e:	009b      	lsls	r3, r3, #2
 800ce20:	697a      	ldr	r2, [r7, #20]
 800ce22:	4413      	add	r3, r2
 800ce24:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800ce26:	697b      	ldr	r3, [r7, #20]
 800ce28:	687a      	ldr	r2, [r7, #4]
 800ce2a:	601a      	str	r2, [r3, #0]
}
 800ce2c:	bf00      	nop
 800ce2e:	371c      	adds	r7, #28
 800ce30:	46bd      	mov	sp, r7
 800ce32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce36:	4770      	bx	lr

0800ce38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b082      	sub	sp, #8
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d101      	bne.n	800ce4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ce46:	2301      	movs	r3, #1
 800ce48:	e01d      	b.n	800ce86 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ce50:	b2db      	uxtb	r3, r3
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d106      	bne.n	800ce64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	2200      	movs	r2, #0
 800ce5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ce5e:	6878      	ldr	r0, [r7, #4]
 800ce60:	f7f8 ff7e 	bl	8005d60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	2202      	movs	r2, #2
 800ce68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681a      	ldr	r2, [r3, #0]
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	3304      	adds	r3, #4
 800ce74:	4619      	mov	r1, r3
 800ce76:	4610      	mov	r0, r2
 800ce78:	f000 fc84 	bl	800d784 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	2201      	movs	r2, #1
 800ce80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ce84:	2300      	movs	r3, #0
}
 800ce86:	4618      	mov	r0, r3
 800ce88:	3708      	adds	r7, #8
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	bd80      	pop	{r7, pc}
	...

0800ce90 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800ce90:	b480      	push	{r7}
 800ce92:	b085      	sub	sp, #20
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	2202      	movs	r2, #2
 800ce9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	689a      	ldr	r2, [r3, #8]
 800cea6:	4b0e      	ldr	r3, [pc, #56]	; (800cee0 <HAL_TIM_Base_Start+0x50>)
 800cea8:	4013      	ands	r3, r2
 800ceaa:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	2b06      	cmp	r3, #6
 800ceb0:	d00b      	beq.n	800ceca <HAL_TIM_Base_Start+0x3a>
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ceb8:	d007      	beq.n	800ceca <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	681a      	ldr	r2, [r3, #0]
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	f042 0201 	orr.w	r2, r2, #1
 800cec8:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	2201      	movs	r2, #1
 800cece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800ced2:	2300      	movs	r3, #0
}
 800ced4:	4618      	mov	r0, r3
 800ced6:	3714      	adds	r7, #20
 800ced8:	46bd      	mov	sp, r7
 800ceda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cede:	4770      	bx	lr
 800cee0:	00010007 	.word	0x00010007

0800cee4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800cee4:	b480      	push	{r7}
 800cee6:	b083      	sub	sp, #12
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	2202      	movs	r2, #2
 800cef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	6a1a      	ldr	r2, [r3, #32]
 800cefa:	f241 1311 	movw	r3, #4369	; 0x1111
 800cefe:	4013      	ands	r3, r2
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d10f      	bne.n	800cf24 <HAL_TIM_Base_Stop+0x40>
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	6a1a      	ldr	r2, [r3, #32]
 800cf0a:	f240 4344 	movw	r3, #1092	; 0x444
 800cf0e:	4013      	ands	r3, r2
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d107      	bne.n	800cf24 <HAL_TIM_Base_Stop+0x40>
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	681a      	ldr	r2, [r3, #0]
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	f022 0201 	bic.w	r2, r2, #1
 800cf22:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	2201      	movs	r2, #1
 800cf28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800cf2c:	2300      	movs	r3, #0
}
 800cf2e:	4618      	mov	r0, r3
 800cf30:	370c      	adds	r7, #12
 800cf32:	46bd      	mov	sp, r7
 800cf34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf38:	4770      	bx	lr
	...

0800cf3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cf3c:	b480      	push	{r7}
 800cf3e:	b085      	sub	sp, #20
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	68da      	ldr	r2, [r3, #12]
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	f042 0201 	orr.w	r2, r2, #1
 800cf52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	689a      	ldr	r2, [r3, #8]
 800cf5a:	4b0c      	ldr	r3, [pc, #48]	; (800cf8c <HAL_TIM_Base_Start_IT+0x50>)
 800cf5c:	4013      	ands	r3, r2
 800cf5e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	2b06      	cmp	r3, #6
 800cf64:	d00b      	beq.n	800cf7e <HAL_TIM_Base_Start_IT+0x42>
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf6c:	d007      	beq.n	800cf7e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	681a      	ldr	r2, [r3, #0]
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	f042 0201 	orr.w	r2, r2, #1
 800cf7c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800cf7e:	2300      	movs	r3, #0
}
 800cf80:	4618      	mov	r0, r3
 800cf82:	3714      	adds	r7, #20
 800cf84:	46bd      	mov	sp, r7
 800cf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8a:	4770      	bx	lr
 800cf8c:	00010007 	.word	0x00010007

0800cf90 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b082      	sub	sp, #8
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d101      	bne.n	800cfa2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800cf9e:	2301      	movs	r3, #1
 800cfa0:	e01d      	b.n	800cfde <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cfa8:	b2db      	uxtb	r3, r3
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d106      	bne.n	800cfbc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	2200      	movs	r2, #0
 800cfb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800cfb6:	6878      	ldr	r0, [r7, #4]
 800cfb8:	f000 f815 	bl	800cfe6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	2202      	movs	r2, #2
 800cfc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681a      	ldr	r2, [r3, #0]
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	3304      	adds	r3, #4
 800cfcc:	4619      	mov	r1, r3
 800cfce:	4610      	mov	r0, r2
 800cfd0:	f000 fbd8 	bl	800d784 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	2201      	movs	r2, #1
 800cfd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cfdc:	2300      	movs	r3, #0
}
 800cfde:	4618      	mov	r0, r3
 800cfe0:	3708      	adds	r7, #8
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	bd80      	pop	{r7, pc}

0800cfe6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800cfe6:	b480      	push	{r7}
 800cfe8:	b083      	sub	sp, #12
 800cfea:	af00      	add	r7, sp, #0
 800cfec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800cfee:	bf00      	nop
 800cff0:	370c      	adds	r7, #12
 800cff2:	46bd      	mov	sp, r7
 800cff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff8:	4770      	bx	lr
	...

0800cffc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b084      	sub	sp, #16
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
 800d004:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	2201      	movs	r2, #1
 800d00c:	6839      	ldr	r1, [r7, #0]
 800d00e:	4618      	mov	r0, r3
 800d010:	f000 ff36 	bl	800de80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	4a19      	ldr	r2, [pc, #100]	; (800d080 <HAL_TIM_PWM_Start+0x84>)
 800d01a:	4293      	cmp	r3, r2
 800d01c:	d009      	beq.n	800d032 <HAL_TIM_PWM_Start+0x36>
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	4a18      	ldr	r2, [pc, #96]	; (800d084 <HAL_TIM_PWM_Start+0x88>)
 800d024:	4293      	cmp	r3, r2
 800d026:	d004      	beq.n	800d032 <HAL_TIM_PWM_Start+0x36>
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	4a16      	ldr	r2, [pc, #88]	; (800d088 <HAL_TIM_PWM_Start+0x8c>)
 800d02e:	4293      	cmp	r3, r2
 800d030:	d101      	bne.n	800d036 <HAL_TIM_PWM_Start+0x3a>
 800d032:	2301      	movs	r3, #1
 800d034:	e000      	b.n	800d038 <HAL_TIM_PWM_Start+0x3c>
 800d036:	2300      	movs	r3, #0
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d007      	beq.n	800d04c <HAL_TIM_PWM_Start+0x50>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d04a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	689a      	ldr	r2, [r3, #8]
 800d052:	4b0e      	ldr	r3, [pc, #56]	; (800d08c <HAL_TIM_PWM_Start+0x90>)
 800d054:	4013      	ands	r3, r2
 800d056:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	2b06      	cmp	r3, #6
 800d05c:	d00b      	beq.n	800d076 <HAL_TIM_PWM_Start+0x7a>
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d064:	d007      	beq.n	800d076 <HAL_TIM_PWM_Start+0x7a>
  {
    __HAL_TIM_ENABLE(htim);
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	681a      	ldr	r2, [r3, #0]
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	f042 0201 	orr.w	r2, r2, #1
 800d074:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d076:	2300      	movs	r3, #0
}
 800d078:	4618      	mov	r0, r3
 800d07a:	3710      	adds	r7, #16
 800d07c:	46bd      	mov	sp, r7
 800d07e:	bd80      	pop	{r7, pc}
 800d080:	40012c00 	.word	0x40012c00
 800d084:	40014400 	.word	0x40014400
 800d088:	40014800 	.word	0x40014800
 800d08c:	00010007 	.word	0x00010007

0800d090 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b082      	sub	sp, #8
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
 800d098:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	2200      	movs	r2, #0
 800d0a0:	6839      	ldr	r1, [r7, #0]
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	f000 feec 	bl	800de80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	4a25      	ldr	r2, [pc, #148]	; (800d144 <HAL_TIM_PWM_Stop+0xb4>)
 800d0ae:	4293      	cmp	r3, r2
 800d0b0:	d009      	beq.n	800d0c6 <HAL_TIM_PWM_Stop+0x36>
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	4a24      	ldr	r2, [pc, #144]	; (800d148 <HAL_TIM_PWM_Stop+0xb8>)
 800d0b8:	4293      	cmp	r3, r2
 800d0ba:	d004      	beq.n	800d0c6 <HAL_TIM_PWM_Stop+0x36>
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	4a22      	ldr	r2, [pc, #136]	; (800d14c <HAL_TIM_PWM_Stop+0xbc>)
 800d0c2:	4293      	cmp	r3, r2
 800d0c4:	d101      	bne.n	800d0ca <HAL_TIM_PWM_Stop+0x3a>
 800d0c6:	2301      	movs	r3, #1
 800d0c8:	e000      	b.n	800d0cc <HAL_TIM_PWM_Stop+0x3c>
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d017      	beq.n	800d100 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	6a1a      	ldr	r2, [r3, #32]
 800d0d6:	f241 1311 	movw	r3, #4369	; 0x1111
 800d0da:	4013      	ands	r3, r2
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d10f      	bne.n	800d100 <HAL_TIM_PWM_Stop+0x70>
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	6a1a      	ldr	r2, [r3, #32]
 800d0e6:	f240 4344 	movw	r3, #1092	; 0x444
 800d0ea:	4013      	ands	r3, r2
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d107      	bne.n	800d100 <HAL_TIM_PWM_Stop+0x70>
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d0fe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	6a1a      	ldr	r2, [r3, #32]
 800d106:	f241 1311 	movw	r3, #4369	; 0x1111
 800d10a:	4013      	ands	r3, r2
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d10f      	bne.n	800d130 <HAL_TIM_PWM_Stop+0xa0>
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	6a1a      	ldr	r2, [r3, #32]
 800d116:	f240 4344 	movw	r3, #1092	; 0x444
 800d11a:	4013      	ands	r3, r2
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d107      	bne.n	800d130 <HAL_TIM_PWM_Stop+0xa0>
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	681a      	ldr	r2, [r3, #0]
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	f022 0201 	bic.w	r2, r2, #1
 800d12e:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	2201      	movs	r2, #1
 800d134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800d138:	2300      	movs	r3, #0
}
 800d13a:	4618      	mov	r0, r3
 800d13c:	3708      	adds	r7, #8
 800d13e:	46bd      	mov	sp, r7
 800d140:	bd80      	pop	{r7, pc}
 800d142:	bf00      	nop
 800d144:	40012c00 	.word	0x40012c00
 800d148:	40014400 	.word	0x40014400
 800d14c:	40014800 	.word	0x40014800

0800d150 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d150:	b580      	push	{r7, lr}
 800d152:	b082      	sub	sp, #8
 800d154:	af00      	add	r7, sp, #0
 800d156:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	691b      	ldr	r3, [r3, #16]
 800d15e:	f003 0302 	and.w	r3, r3, #2
 800d162:	2b02      	cmp	r3, #2
 800d164:	d122      	bne.n	800d1ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	68db      	ldr	r3, [r3, #12]
 800d16c:	f003 0302 	and.w	r3, r3, #2
 800d170:	2b02      	cmp	r3, #2
 800d172:	d11b      	bne.n	800d1ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	f06f 0202 	mvn.w	r2, #2
 800d17c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	2201      	movs	r2, #1
 800d182:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	699b      	ldr	r3, [r3, #24]
 800d18a:	f003 0303 	and.w	r3, r3, #3
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d003      	beq.n	800d19a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d192:	6878      	ldr	r0, [r7, #4]
 800d194:	f000 fad7 	bl	800d746 <HAL_TIM_IC_CaptureCallback>
 800d198:	e005      	b.n	800d1a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d19a:	6878      	ldr	r0, [r7, #4]
 800d19c:	f000 fac9 	bl	800d732 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d1a0:	6878      	ldr	r0, [r7, #4]
 800d1a2:	f000 fada 	bl	800d75a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	691b      	ldr	r3, [r3, #16]
 800d1b2:	f003 0304 	and.w	r3, r3, #4
 800d1b6:	2b04      	cmp	r3, #4
 800d1b8:	d122      	bne.n	800d200 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	68db      	ldr	r3, [r3, #12]
 800d1c0:	f003 0304 	and.w	r3, r3, #4
 800d1c4:	2b04      	cmp	r3, #4
 800d1c6:	d11b      	bne.n	800d200 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	f06f 0204 	mvn.w	r2, #4
 800d1d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	2202      	movs	r2, #2
 800d1d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	699b      	ldr	r3, [r3, #24]
 800d1de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d003      	beq.n	800d1ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d1e6:	6878      	ldr	r0, [r7, #4]
 800d1e8:	f000 faad 	bl	800d746 <HAL_TIM_IC_CaptureCallback>
 800d1ec:	e005      	b.n	800d1fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d1ee:	6878      	ldr	r0, [r7, #4]
 800d1f0:	f000 fa9f 	bl	800d732 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d1f4:	6878      	ldr	r0, [r7, #4]
 800d1f6:	f000 fab0 	bl	800d75a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	2200      	movs	r2, #0
 800d1fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	691b      	ldr	r3, [r3, #16]
 800d206:	f003 0308 	and.w	r3, r3, #8
 800d20a:	2b08      	cmp	r3, #8
 800d20c:	d122      	bne.n	800d254 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	68db      	ldr	r3, [r3, #12]
 800d214:	f003 0308 	and.w	r3, r3, #8
 800d218:	2b08      	cmp	r3, #8
 800d21a:	d11b      	bne.n	800d254 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	f06f 0208 	mvn.w	r2, #8
 800d224:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	2204      	movs	r2, #4
 800d22a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	69db      	ldr	r3, [r3, #28]
 800d232:	f003 0303 	and.w	r3, r3, #3
 800d236:	2b00      	cmp	r3, #0
 800d238:	d003      	beq.n	800d242 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d23a:	6878      	ldr	r0, [r7, #4]
 800d23c:	f000 fa83 	bl	800d746 <HAL_TIM_IC_CaptureCallback>
 800d240:	e005      	b.n	800d24e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d242:	6878      	ldr	r0, [r7, #4]
 800d244:	f000 fa75 	bl	800d732 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d248:	6878      	ldr	r0, [r7, #4]
 800d24a:	f000 fa86 	bl	800d75a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	2200      	movs	r2, #0
 800d252:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	691b      	ldr	r3, [r3, #16]
 800d25a:	f003 0310 	and.w	r3, r3, #16
 800d25e:	2b10      	cmp	r3, #16
 800d260:	d122      	bne.n	800d2a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	68db      	ldr	r3, [r3, #12]
 800d268:	f003 0310 	and.w	r3, r3, #16
 800d26c:	2b10      	cmp	r3, #16
 800d26e:	d11b      	bne.n	800d2a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	f06f 0210 	mvn.w	r2, #16
 800d278:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	2208      	movs	r2, #8
 800d27e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	69db      	ldr	r3, [r3, #28]
 800d286:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d003      	beq.n	800d296 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d28e:	6878      	ldr	r0, [r7, #4]
 800d290:	f000 fa59 	bl	800d746 <HAL_TIM_IC_CaptureCallback>
 800d294:	e005      	b.n	800d2a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d296:	6878      	ldr	r0, [r7, #4]
 800d298:	f000 fa4b 	bl	800d732 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d29c:	6878      	ldr	r0, [r7, #4]
 800d29e:	f000 fa5c 	bl	800d75a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	2200      	movs	r2, #0
 800d2a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	691b      	ldr	r3, [r3, #16]
 800d2ae:	f003 0301 	and.w	r3, r3, #1
 800d2b2:	2b01      	cmp	r3, #1
 800d2b4:	d10e      	bne.n	800d2d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	68db      	ldr	r3, [r3, #12]
 800d2bc:	f003 0301 	and.w	r3, r3, #1
 800d2c0:	2b01      	cmp	r3, #1
 800d2c2:	d107      	bne.n	800d2d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	f06f 0201 	mvn.w	r2, #1
 800d2cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d2ce:	6878      	ldr	r0, [r7, #4]
 800d2d0:	f7f7 f830 	bl	8004334 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	691b      	ldr	r3, [r3, #16]
 800d2da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d2de:	2b80      	cmp	r3, #128	; 0x80
 800d2e0:	d10e      	bne.n	800d300 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	68db      	ldr	r3, [r3, #12]
 800d2e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d2ec:	2b80      	cmp	r3, #128	; 0x80
 800d2ee:	d107      	bne.n	800d300 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d2f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d2fa:	6878      	ldr	r0, [r7, #4]
 800d2fc:	f000 fe50 	bl	800dfa0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	691b      	ldr	r3, [r3, #16]
 800d306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d30a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d30e:	d10e      	bne.n	800d32e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	68db      	ldr	r3, [r3, #12]
 800d316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d31a:	2b80      	cmp	r3, #128	; 0x80
 800d31c:	d107      	bne.n	800d32e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d326:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d328:	6878      	ldr	r0, [r7, #4]
 800d32a:	f000 fe43 	bl	800dfb4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	691b      	ldr	r3, [r3, #16]
 800d334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d338:	2b40      	cmp	r3, #64	; 0x40
 800d33a:	d10e      	bne.n	800d35a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	68db      	ldr	r3, [r3, #12]
 800d342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d346:	2b40      	cmp	r3, #64	; 0x40
 800d348:	d107      	bne.n	800d35a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d352:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d354:	6878      	ldr	r0, [r7, #4]
 800d356:	f000 fa0a 	bl	800d76e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	691b      	ldr	r3, [r3, #16]
 800d360:	f003 0320 	and.w	r3, r3, #32
 800d364:	2b20      	cmp	r3, #32
 800d366:	d10e      	bne.n	800d386 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	68db      	ldr	r3, [r3, #12]
 800d36e:	f003 0320 	and.w	r3, r3, #32
 800d372:	2b20      	cmp	r3, #32
 800d374:	d107      	bne.n	800d386 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	f06f 0220 	mvn.w	r2, #32
 800d37e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d380:	6878      	ldr	r0, [r7, #4]
 800d382:	f000 fe03 	bl	800df8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d386:	bf00      	nop
 800d388:	3708      	adds	r7, #8
 800d38a:	46bd      	mov	sp, r7
 800d38c:	bd80      	pop	{r7, pc}
	...

0800d390 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d390:	b580      	push	{r7, lr}
 800d392:	b084      	sub	sp, #16
 800d394:	af00      	add	r7, sp, #0
 800d396:	60f8      	str	r0, [r7, #12]
 800d398:	60b9      	str	r1, [r7, #8]
 800d39a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d3a2:	2b01      	cmp	r3, #1
 800d3a4:	d101      	bne.n	800d3aa <HAL_TIM_PWM_ConfigChannel+0x1a>
 800d3a6:	2302      	movs	r3, #2
 800d3a8:	e105      	b.n	800d5b6 <HAL_TIM_PWM_ConfigChannel+0x226>
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	2201      	movs	r2, #1
 800d3ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	2202      	movs	r2, #2
 800d3b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	2b14      	cmp	r3, #20
 800d3be:	f200 80f0 	bhi.w	800d5a2 <HAL_TIM_PWM_ConfigChannel+0x212>
 800d3c2:	a201      	add	r2, pc, #4	; (adr r2, 800d3c8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800d3c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3c8:	0800d41d 	.word	0x0800d41d
 800d3cc:	0800d5a3 	.word	0x0800d5a3
 800d3d0:	0800d5a3 	.word	0x0800d5a3
 800d3d4:	0800d5a3 	.word	0x0800d5a3
 800d3d8:	0800d45d 	.word	0x0800d45d
 800d3dc:	0800d5a3 	.word	0x0800d5a3
 800d3e0:	0800d5a3 	.word	0x0800d5a3
 800d3e4:	0800d5a3 	.word	0x0800d5a3
 800d3e8:	0800d49f 	.word	0x0800d49f
 800d3ec:	0800d5a3 	.word	0x0800d5a3
 800d3f0:	0800d5a3 	.word	0x0800d5a3
 800d3f4:	0800d5a3 	.word	0x0800d5a3
 800d3f8:	0800d4df 	.word	0x0800d4df
 800d3fc:	0800d5a3 	.word	0x0800d5a3
 800d400:	0800d5a3 	.word	0x0800d5a3
 800d404:	0800d5a3 	.word	0x0800d5a3
 800d408:	0800d521 	.word	0x0800d521
 800d40c:	0800d5a3 	.word	0x0800d5a3
 800d410:	0800d5a3 	.word	0x0800d5a3
 800d414:	0800d5a3 	.word	0x0800d5a3
 800d418:	0800d561 	.word	0x0800d561
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	68b9      	ldr	r1, [r7, #8]
 800d422:	4618      	mov	r0, r3
 800d424:	f000 fa12 	bl	800d84c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	699a      	ldr	r2, [r3, #24]
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	f042 0208 	orr.w	r2, r2, #8
 800d436:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	699a      	ldr	r2, [r3, #24]
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	f022 0204 	bic.w	r2, r2, #4
 800d446:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	6999      	ldr	r1, [r3, #24]
 800d44e:	68bb      	ldr	r3, [r7, #8]
 800d450:	691a      	ldr	r2, [r3, #16]
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	430a      	orrs	r2, r1
 800d458:	619a      	str	r2, [r3, #24]
      break;
 800d45a:	e0a3      	b.n	800d5a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	68b9      	ldr	r1, [r7, #8]
 800d462:	4618      	mov	r0, r3
 800d464:	f000 fa6e 	bl	800d944 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	699a      	ldr	r2, [r3, #24]
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d476:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	699a      	ldr	r2, [r3, #24]
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d486:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	6999      	ldr	r1, [r3, #24]
 800d48e:	68bb      	ldr	r3, [r7, #8]
 800d490:	691b      	ldr	r3, [r3, #16]
 800d492:	021a      	lsls	r2, r3, #8
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	430a      	orrs	r2, r1
 800d49a:	619a      	str	r2, [r3, #24]
      break;
 800d49c:	e082      	b.n	800d5a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	68b9      	ldr	r1, [r7, #8]
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	f000 fac7 	bl	800da38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	69da      	ldr	r2, [r3, #28]
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	f042 0208 	orr.w	r2, r2, #8
 800d4b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	69da      	ldr	r2, [r3, #28]
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	f022 0204 	bic.w	r2, r2, #4
 800d4c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	69d9      	ldr	r1, [r3, #28]
 800d4d0:	68bb      	ldr	r3, [r7, #8]
 800d4d2:	691a      	ldr	r2, [r3, #16]
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	430a      	orrs	r2, r1
 800d4da:	61da      	str	r2, [r3, #28]
      break;
 800d4dc:	e062      	b.n	800d5a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	68b9      	ldr	r1, [r7, #8]
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	f000 fb1f 	bl	800db28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	69da      	ldr	r2, [r3, #28]
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d4f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	69da      	ldr	r2, [r3, #28]
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d508:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	69d9      	ldr	r1, [r3, #28]
 800d510:	68bb      	ldr	r3, [r7, #8]
 800d512:	691b      	ldr	r3, [r3, #16]
 800d514:	021a      	lsls	r2, r3, #8
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	430a      	orrs	r2, r1
 800d51c:	61da      	str	r2, [r3, #28]
      break;
 800d51e:	e041      	b.n	800d5a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	68b9      	ldr	r1, [r7, #8]
 800d526:	4618      	mov	r0, r3
 800d528:	f000 fb5c 	bl	800dbe4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	f042 0208 	orr.w	r2, r2, #8
 800d53a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	f022 0204 	bic.w	r2, r2, #4
 800d54a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d552:	68bb      	ldr	r3, [r7, #8]
 800d554:	691a      	ldr	r2, [r3, #16]
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	430a      	orrs	r2, r1
 800d55c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d55e:	e021      	b.n	800d5a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	68b9      	ldr	r1, [r7, #8]
 800d566:	4618      	mov	r0, r3
 800d568:	f000 fb94 	bl	800dc94 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d57a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d58a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d592:	68bb      	ldr	r3, [r7, #8]
 800d594:	691b      	ldr	r3, [r3, #16]
 800d596:	021a      	lsls	r2, r3, #8
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	430a      	orrs	r2, r1
 800d59e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d5a0:	e000      	b.n	800d5a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800d5a2:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	2201      	movs	r2, #1
 800d5a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d5b4:	2300      	movs	r3, #0
}
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	3710      	adds	r7, #16
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	bd80      	pop	{r7, pc}
 800d5be:	bf00      	nop

0800d5c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	b084      	sub	sp, #16
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	6078      	str	r0, [r7, #4]
 800d5c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d5d0:	2b01      	cmp	r3, #1
 800d5d2:	d101      	bne.n	800d5d8 <HAL_TIM_ConfigClockSource+0x18>
 800d5d4:	2302      	movs	r3, #2
 800d5d6:	e0a8      	b.n	800d72a <HAL_TIM_ConfigClockSource+0x16a>
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	2201      	movs	r2, #1
 800d5dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	2202      	movs	r2, #2
 800d5e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	689b      	ldr	r3, [r3, #8]
 800d5ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800d5f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800d5fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d602:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	68fa      	ldr	r2, [r7, #12]
 800d60a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d60c:	683b      	ldr	r3, [r7, #0]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	2b40      	cmp	r3, #64	; 0x40
 800d612:	d067      	beq.n	800d6e4 <HAL_TIM_ConfigClockSource+0x124>
 800d614:	2b40      	cmp	r3, #64	; 0x40
 800d616:	d80b      	bhi.n	800d630 <HAL_TIM_ConfigClockSource+0x70>
 800d618:	2b10      	cmp	r3, #16
 800d61a:	d073      	beq.n	800d704 <HAL_TIM_ConfigClockSource+0x144>
 800d61c:	2b10      	cmp	r3, #16
 800d61e:	d802      	bhi.n	800d626 <HAL_TIM_ConfigClockSource+0x66>
 800d620:	2b00      	cmp	r3, #0
 800d622:	d06f      	beq.n	800d704 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800d624:	e078      	b.n	800d718 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800d626:	2b20      	cmp	r3, #32
 800d628:	d06c      	beq.n	800d704 <HAL_TIM_ConfigClockSource+0x144>
 800d62a:	2b30      	cmp	r3, #48	; 0x30
 800d62c:	d06a      	beq.n	800d704 <HAL_TIM_ConfigClockSource+0x144>
      break;
 800d62e:	e073      	b.n	800d718 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800d630:	2b70      	cmp	r3, #112	; 0x70
 800d632:	d00d      	beq.n	800d650 <HAL_TIM_ConfigClockSource+0x90>
 800d634:	2b70      	cmp	r3, #112	; 0x70
 800d636:	d804      	bhi.n	800d642 <HAL_TIM_ConfigClockSource+0x82>
 800d638:	2b50      	cmp	r3, #80	; 0x50
 800d63a:	d033      	beq.n	800d6a4 <HAL_TIM_ConfigClockSource+0xe4>
 800d63c:	2b60      	cmp	r3, #96	; 0x60
 800d63e:	d041      	beq.n	800d6c4 <HAL_TIM_ConfigClockSource+0x104>
      break;
 800d640:	e06a      	b.n	800d718 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800d642:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d646:	d066      	beq.n	800d716 <HAL_TIM_ConfigClockSource+0x156>
 800d648:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d64c:	d017      	beq.n	800d67e <HAL_TIM_ConfigClockSource+0xbe>
      break;
 800d64e:	e063      	b.n	800d718 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	6818      	ldr	r0, [r3, #0]
 800d654:	683b      	ldr	r3, [r7, #0]
 800d656:	6899      	ldr	r1, [r3, #8]
 800d658:	683b      	ldr	r3, [r7, #0]
 800d65a:	685a      	ldr	r2, [r3, #4]
 800d65c:	683b      	ldr	r3, [r7, #0]
 800d65e:	68db      	ldr	r3, [r3, #12]
 800d660:	f000 fbee 	bl	800de40 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	689b      	ldr	r3, [r3, #8]
 800d66a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d672:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	68fa      	ldr	r2, [r7, #12]
 800d67a:	609a      	str	r2, [r3, #8]
      break;
 800d67c:	e04c      	b.n	800d718 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	6818      	ldr	r0, [r3, #0]
 800d682:	683b      	ldr	r3, [r7, #0]
 800d684:	6899      	ldr	r1, [r3, #8]
 800d686:	683b      	ldr	r3, [r7, #0]
 800d688:	685a      	ldr	r2, [r3, #4]
 800d68a:	683b      	ldr	r3, [r7, #0]
 800d68c:	68db      	ldr	r3, [r3, #12]
 800d68e:	f000 fbd7 	bl	800de40 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	689a      	ldr	r2, [r3, #8]
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d6a0:	609a      	str	r2, [r3, #8]
      break;
 800d6a2:	e039      	b.n	800d718 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	6818      	ldr	r0, [r3, #0]
 800d6a8:	683b      	ldr	r3, [r7, #0]
 800d6aa:	6859      	ldr	r1, [r3, #4]
 800d6ac:	683b      	ldr	r3, [r7, #0]
 800d6ae:	68db      	ldr	r3, [r3, #12]
 800d6b0:	461a      	mov	r2, r3
 800d6b2:	f000 fb49 	bl	800dd48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	2150      	movs	r1, #80	; 0x50
 800d6bc:	4618      	mov	r0, r3
 800d6be:	f000 fba2 	bl	800de06 <TIM_ITRx_SetConfig>
      break;
 800d6c2:	e029      	b.n	800d718 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	6818      	ldr	r0, [r3, #0]
 800d6c8:	683b      	ldr	r3, [r7, #0]
 800d6ca:	6859      	ldr	r1, [r3, #4]
 800d6cc:	683b      	ldr	r3, [r7, #0]
 800d6ce:	68db      	ldr	r3, [r3, #12]
 800d6d0:	461a      	mov	r2, r3
 800d6d2:	f000 fb68 	bl	800dda6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	2160      	movs	r1, #96	; 0x60
 800d6dc:	4618      	mov	r0, r3
 800d6de:	f000 fb92 	bl	800de06 <TIM_ITRx_SetConfig>
      break;
 800d6e2:	e019      	b.n	800d718 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	6818      	ldr	r0, [r3, #0]
 800d6e8:	683b      	ldr	r3, [r7, #0]
 800d6ea:	6859      	ldr	r1, [r3, #4]
 800d6ec:	683b      	ldr	r3, [r7, #0]
 800d6ee:	68db      	ldr	r3, [r3, #12]
 800d6f0:	461a      	mov	r2, r3
 800d6f2:	f000 fb29 	bl	800dd48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	2140      	movs	r1, #64	; 0x40
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	f000 fb82 	bl	800de06 <TIM_ITRx_SetConfig>
      break;
 800d702:	e009      	b.n	800d718 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	681a      	ldr	r2, [r3, #0]
 800d708:	683b      	ldr	r3, [r7, #0]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	4619      	mov	r1, r3
 800d70e:	4610      	mov	r0, r2
 800d710:	f000 fb79 	bl	800de06 <TIM_ITRx_SetConfig>
      break;
 800d714:	e000      	b.n	800d718 <HAL_TIM_ConfigClockSource+0x158>
      break;
 800d716:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	2201      	movs	r2, #1
 800d71c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	2200      	movs	r2, #0
 800d724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d728:	2300      	movs	r3, #0
}
 800d72a:	4618      	mov	r0, r3
 800d72c:	3710      	adds	r7, #16
 800d72e:	46bd      	mov	sp, r7
 800d730:	bd80      	pop	{r7, pc}

0800d732 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d732:	b480      	push	{r7}
 800d734:	b083      	sub	sp, #12
 800d736:	af00      	add	r7, sp, #0
 800d738:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d73a:	bf00      	nop
 800d73c:	370c      	adds	r7, #12
 800d73e:	46bd      	mov	sp, r7
 800d740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d744:	4770      	bx	lr

0800d746 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d746:	b480      	push	{r7}
 800d748:	b083      	sub	sp, #12
 800d74a:	af00      	add	r7, sp, #0
 800d74c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d74e:	bf00      	nop
 800d750:	370c      	adds	r7, #12
 800d752:	46bd      	mov	sp, r7
 800d754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d758:	4770      	bx	lr

0800d75a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d75a:	b480      	push	{r7}
 800d75c:	b083      	sub	sp, #12
 800d75e:	af00      	add	r7, sp, #0
 800d760:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d762:	bf00      	nop
 800d764:	370c      	adds	r7, #12
 800d766:	46bd      	mov	sp, r7
 800d768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d76c:	4770      	bx	lr

0800d76e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d76e:	b480      	push	{r7}
 800d770:	b083      	sub	sp, #12
 800d772:	af00      	add	r7, sp, #0
 800d774:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d776:	bf00      	nop
 800d778:	370c      	adds	r7, #12
 800d77a:	46bd      	mov	sp, r7
 800d77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d780:	4770      	bx	lr
	...

0800d784 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d784:	b480      	push	{r7}
 800d786:	b085      	sub	sp, #20
 800d788:	af00      	add	r7, sp, #0
 800d78a:	6078      	str	r0, [r7, #4]
 800d78c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	4a2a      	ldr	r2, [pc, #168]	; (800d840 <TIM_Base_SetConfig+0xbc>)
 800d798:	4293      	cmp	r3, r2
 800d79a:	d003      	beq.n	800d7a4 <TIM_Base_SetConfig+0x20>
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d7a2:	d108      	bne.n	800d7b6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d7aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d7ac:	683b      	ldr	r3, [r7, #0]
 800d7ae:	685b      	ldr	r3, [r3, #4]
 800d7b0:	68fa      	ldr	r2, [r7, #12]
 800d7b2:	4313      	orrs	r3, r2
 800d7b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	4a21      	ldr	r2, [pc, #132]	; (800d840 <TIM_Base_SetConfig+0xbc>)
 800d7ba:	4293      	cmp	r3, r2
 800d7bc:	d00b      	beq.n	800d7d6 <TIM_Base_SetConfig+0x52>
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d7c4:	d007      	beq.n	800d7d6 <TIM_Base_SetConfig+0x52>
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	4a1e      	ldr	r2, [pc, #120]	; (800d844 <TIM_Base_SetConfig+0xc0>)
 800d7ca:	4293      	cmp	r3, r2
 800d7cc:	d003      	beq.n	800d7d6 <TIM_Base_SetConfig+0x52>
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	4a1d      	ldr	r2, [pc, #116]	; (800d848 <TIM_Base_SetConfig+0xc4>)
 800d7d2:	4293      	cmp	r3, r2
 800d7d4:	d108      	bne.n	800d7e8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d7dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d7de:	683b      	ldr	r3, [r7, #0]
 800d7e0:	68db      	ldr	r3, [r3, #12]
 800d7e2:	68fa      	ldr	r2, [r7, #12]
 800d7e4:	4313      	orrs	r3, r2
 800d7e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d7ee:	683b      	ldr	r3, [r7, #0]
 800d7f0:	695b      	ldr	r3, [r3, #20]
 800d7f2:	4313      	orrs	r3, r2
 800d7f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	68fa      	ldr	r2, [r7, #12]
 800d7fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d7fc:	683b      	ldr	r3, [r7, #0]
 800d7fe:	689a      	ldr	r2, [r3, #8]
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d804:	683b      	ldr	r3, [r7, #0]
 800d806:	681a      	ldr	r2, [r3, #0]
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	4a0c      	ldr	r2, [pc, #48]	; (800d840 <TIM_Base_SetConfig+0xbc>)
 800d810:	4293      	cmp	r3, r2
 800d812:	d007      	beq.n	800d824 <TIM_Base_SetConfig+0xa0>
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	4a0b      	ldr	r2, [pc, #44]	; (800d844 <TIM_Base_SetConfig+0xc0>)
 800d818:	4293      	cmp	r3, r2
 800d81a:	d003      	beq.n	800d824 <TIM_Base_SetConfig+0xa0>
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	4a0a      	ldr	r2, [pc, #40]	; (800d848 <TIM_Base_SetConfig+0xc4>)
 800d820:	4293      	cmp	r3, r2
 800d822:	d103      	bne.n	800d82c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d824:	683b      	ldr	r3, [r7, #0]
 800d826:	691a      	ldr	r2, [r3, #16]
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	2201      	movs	r2, #1
 800d830:	615a      	str	r2, [r3, #20]
}
 800d832:	bf00      	nop
 800d834:	3714      	adds	r7, #20
 800d836:	46bd      	mov	sp, r7
 800d838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d83c:	4770      	bx	lr
 800d83e:	bf00      	nop
 800d840:	40012c00 	.word	0x40012c00
 800d844:	40014400 	.word	0x40014400
 800d848:	40014800 	.word	0x40014800

0800d84c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d84c:	b480      	push	{r7}
 800d84e:	b087      	sub	sp, #28
 800d850:	af00      	add	r7, sp, #0
 800d852:	6078      	str	r0, [r7, #4]
 800d854:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	6a1b      	ldr	r3, [r3, #32]
 800d85a:	f023 0201 	bic.w	r2, r3, #1
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	6a1b      	ldr	r3, [r3, #32]
 800d866:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	685b      	ldr	r3, [r3, #4]
 800d86c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	699b      	ldr	r3, [r3, #24]
 800d872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d87a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d87e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	f023 0303 	bic.w	r3, r3, #3
 800d886:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d888:	683b      	ldr	r3, [r7, #0]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	68fa      	ldr	r2, [r7, #12]
 800d88e:	4313      	orrs	r3, r2
 800d890:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d892:	697b      	ldr	r3, [r7, #20]
 800d894:	f023 0302 	bic.w	r3, r3, #2
 800d898:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d89a:	683b      	ldr	r3, [r7, #0]
 800d89c:	689b      	ldr	r3, [r3, #8]
 800d89e:	697a      	ldr	r2, [r7, #20]
 800d8a0:	4313      	orrs	r3, r2
 800d8a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	4a24      	ldr	r2, [pc, #144]	; (800d938 <TIM_OC1_SetConfig+0xec>)
 800d8a8:	4293      	cmp	r3, r2
 800d8aa:	d007      	beq.n	800d8bc <TIM_OC1_SetConfig+0x70>
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	4a23      	ldr	r2, [pc, #140]	; (800d93c <TIM_OC1_SetConfig+0xf0>)
 800d8b0:	4293      	cmp	r3, r2
 800d8b2:	d003      	beq.n	800d8bc <TIM_OC1_SetConfig+0x70>
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	4a22      	ldr	r2, [pc, #136]	; (800d940 <TIM_OC1_SetConfig+0xf4>)
 800d8b8:	4293      	cmp	r3, r2
 800d8ba:	d10c      	bne.n	800d8d6 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d8bc:	697b      	ldr	r3, [r7, #20]
 800d8be:	f023 0308 	bic.w	r3, r3, #8
 800d8c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d8c4:	683b      	ldr	r3, [r7, #0]
 800d8c6:	68db      	ldr	r3, [r3, #12]
 800d8c8:	697a      	ldr	r2, [r7, #20]
 800d8ca:	4313      	orrs	r3, r2
 800d8cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d8ce:	697b      	ldr	r3, [r7, #20]
 800d8d0:	f023 0304 	bic.w	r3, r3, #4
 800d8d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	4a17      	ldr	r2, [pc, #92]	; (800d938 <TIM_OC1_SetConfig+0xec>)
 800d8da:	4293      	cmp	r3, r2
 800d8dc:	d007      	beq.n	800d8ee <TIM_OC1_SetConfig+0xa2>
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	4a17      	ldr	r2, [pc, #92]	; (800d940 <TIM_OC1_SetConfig+0xf4>)
 800d8e2:	4293      	cmp	r3, r2
 800d8e4:	d003      	beq.n	800d8ee <TIM_OC1_SetConfig+0xa2>
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	4a14      	ldr	r2, [pc, #80]	; (800d93c <TIM_OC1_SetConfig+0xf0>)
 800d8ea:	4293      	cmp	r3, r2
 800d8ec:	d111      	bne.n	800d912 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d8ee:	693b      	ldr	r3, [r7, #16]
 800d8f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d8f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d8f6:	693b      	ldr	r3, [r7, #16]
 800d8f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d8fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d8fe:	683b      	ldr	r3, [r7, #0]
 800d900:	695b      	ldr	r3, [r3, #20]
 800d902:	693a      	ldr	r2, [r7, #16]
 800d904:	4313      	orrs	r3, r2
 800d906:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d908:	683b      	ldr	r3, [r7, #0]
 800d90a:	699b      	ldr	r3, [r3, #24]
 800d90c:	693a      	ldr	r2, [r7, #16]
 800d90e:	4313      	orrs	r3, r2
 800d910:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	693a      	ldr	r2, [r7, #16]
 800d916:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	68fa      	ldr	r2, [r7, #12]
 800d91c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d91e:	683b      	ldr	r3, [r7, #0]
 800d920:	685a      	ldr	r2, [r3, #4]
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	697a      	ldr	r2, [r7, #20]
 800d92a:	621a      	str	r2, [r3, #32]
}
 800d92c:	bf00      	nop
 800d92e:	371c      	adds	r7, #28
 800d930:	46bd      	mov	sp, r7
 800d932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d936:	4770      	bx	lr
 800d938:	40012c00 	.word	0x40012c00
 800d93c:	40014800 	.word	0x40014800
 800d940:	40014400 	.word	0x40014400

0800d944 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d944:	b480      	push	{r7}
 800d946:	b087      	sub	sp, #28
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
 800d94c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	6a1b      	ldr	r3, [r3, #32]
 800d952:	f023 0210 	bic.w	r2, r3, #16
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	6a1b      	ldr	r3, [r3, #32]
 800d95e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	685b      	ldr	r3, [r3, #4]
 800d964:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	699b      	ldr	r3, [r3, #24]
 800d96a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d972:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d976:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d97e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d980:	683b      	ldr	r3, [r7, #0]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	021b      	lsls	r3, r3, #8
 800d986:	68fa      	ldr	r2, [r7, #12]
 800d988:	4313      	orrs	r3, r2
 800d98a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d98c:	697b      	ldr	r3, [r7, #20]
 800d98e:	f023 0320 	bic.w	r3, r3, #32
 800d992:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d994:	683b      	ldr	r3, [r7, #0]
 800d996:	689b      	ldr	r3, [r3, #8]
 800d998:	011b      	lsls	r3, r3, #4
 800d99a:	697a      	ldr	r2, [r7, #20]
 800d99c:	4313      	orrs	r3, r2
 800d99e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	4a22      	ldr	r2, [pc, #136]	; (800da2c <TIM_OC2_SetConfig+0xe8>)
 800d9a4:	4293      	cmp	r3, r2
 800d9a6:	d10d      	bne.n	800d9c4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d9a8:	697b      	ldr	r3, [r7, #20]
 800d9aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d9ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d9b0:	683b      	ldr	r3, [r7, #0]
 800d9b2:	68db      	ldr	r3, [r3, #12]
 800d9b4:	011b      	lsls	r3, r3, #4
 800d9b6:	697a      	ldr	r2, [r7, #20]
 800d9b8:	4313      	orrs	r3, r2
 800d9ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d9bc:	697b      	ldr	r3, [r7, #20]
 800d9be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d9c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	4a19      	ldr	r2, [pc, #100]	; (800da2c <TIM_OC2_SetConfig+0xe8>)
 800d9c8:	4293      	cmp	r3, r2
 800d9ca:	d007      	beq.n	800d9dc <TIM_OC2_SetConfig+0x98>
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	4a18      	ldr	r2, [pc, #96]	; (800da30 <TIM_OC2_SetConfig+0xec>)
 800d9d0:	4293      	cmp	r3, r2
 800d9d2:	d003      	beq.n	800d9dc <TIM_OC2_SetConfig+0x98>
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	4a17      	ldr	r2, [pc, #92]	; (800da34 <TIM_OC2_SetConfig+0xf0>)
 800d9d8:	4293      	cmp	r3, r2
 800d9da:	d113      	bne.n	800da04 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d9dc:	693b      	ldr	r3, [r7, #16]
 800d9de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d9e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d9e4:	693b      	ldr	r3, [r7, #16]
 800d9e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d9ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d9ec:	683b      	ldr	r3, [r7, #0]
 800d9ee:	695b      	ldr	r3, [r3, #20]
 800d9f0:	009b      	lsls	r3, r3, #2
 800d9f2:	693a      	ldr	r2, [r7, #16]
 800d9f4:	4313      	orrs	r3, r2
 800d9f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d9f8:	683b      	ldr	r3, [r7, #0]
 800d9fa:	699b      	ldr	r3, [r3, #24]
 800d9fc:	009b      	lsls	r3, r3, #2
 800d9fe:	693a      	ldr	r2, [r7, #16]
 800da00:	4313      	orrs	r3, r2
 800da02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	693a      	ldr	r2, [r7, #16]
 800da08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	68fa      	ldr	r2, [r7, #12]
 800da0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800da10:	683b      	ldr	r3, [r7, #0]
 800da12:	685a      	ldr	r2, [r3, #4]
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	697a      	ldr	r2, [r7, #20]
 800da1c:	621a      	str	r2, [r3, #32]
}
 800da1e:	bf00      	nop
 800da20:	371c      	adds	r7, #28
 800da22:	46bd      	mov	sp, r7
 800da24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da28:	4770      	bx	lr
 800da2a:	bf00      	nop
 800da2c:	40012c00 	.word	0x40012c00
 800da30:	40014400 	.word	0x40014400
 800da34:	40014800 	.word	0x40014800

0800da38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800da38:	b480      	push	{r7}
 800da3a:	b087      	sub	sp, #28
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	6078      	str	r0, [r7, #4]
 800da40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	6a1b      	ldr	r3, [r3, #32]
 800da46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	6a1b      	ldr	r3, [r3, #32]
 800da52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	685b      	ldr	r3, [r3, #4]
 800da58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	69db      	ldr	r3, [r3, #28]
 800da5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800da66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800da6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	f023 0303 	bic.w	r3, r3, #3
 800da72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800da74:	683b      	ldr	r3, [r7, #0]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	68fa      	ldr	r2, [r7, #12]
 800da7a:	4313      	orrs	r3, r2
 800da7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800da7e:	697b      	ldr	r3, [r7, #20]
 800da80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800da84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800da86:	683b      	ldr	r3, [r7, #0]
 800da88:	689b      	ldr	r3, [r3, #8]
 800da8a:	021b      	lsls	r3, r3, #8
 800da8c:	697a      	ldr	r2, [r7, #20]
 800da8e:	4313      	orrs	r3, r2
 800da90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	4a21      	ldr	r2, [pc, #132]	; (800db1c <TIM_OC3_SetConfig+0xe4>)
 800da96:	4293      	cmp	r3, r2
 800da98:	d10d      	bne.n	800dab6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800da9a:	697b      	ldr	r3, [r7, #20]
 800da9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800daa0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800daa2:	683b      	ldr	r3, [r7, #0]
 800daa4:	68db      	ldr	r3, [r3, #12]
 800daa6:	021b      	lsls	r3, r3, #8
 800daa8:	697a      	ldr	r2, [r7, #20]
 800daaa:	4313      	orrs	r3, r2
 800daac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800daae:	697b      	ldr	r3, [r7, #20]
 800dab0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800dab4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	4a18      	ldr	r2, [pc, #96]	; (800db1c <TIM_OC3_SetConfig+0xe4>)
 800daba:	4293      	cmp	r3, r2
 800dabc:	d007      	beq.n	800dace <TIM_OC3_SetConfig+0x96>
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	4a17      	ldr	r2, [pc, #92]	; (800db20 <TIM_OC3_SetConfig+0xe8>)
 800dac2:	4293      	cmp	r3, r2
 800dac4:	d003      	beq.n	800dace <TIM_OC3_SetConfig+0x96>
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	4a16      	ldr	r2, [pc, #88]	; (800db24 <TIM_OC3_SetConfig+0xec>)
 800daca:	4293      	cmp	r3, r2
 800dacc:	d113      	bne.n	800daf6 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800dace:	693b      	ldr	r3, [r7, #16]
 800dad0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dad4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800dad6:	693b      	ldr	r3, [r7, #16]
 800dad8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800dadc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800dade:	683b      	ldr	r3, [r7, #0]
 800dae0:	695b      	ldr	r3, [r3, #20]
 800dae2:	011b      	lsls	r3, r3, #4
 800dae4:	693a      	ldr	r2, [r7, #16]
 800dae6:	4313      	orrs	r3, r2
 800dae8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800daea:	683b      	ldr	r3, [r7, #0]
 800daec:	699b      	ldr	r3, [r3, #24]
 800daee:	011b      	lsls	r3, r3, #4
 800daf0:	693a      	ldr	r2, [r7, #16]
 800daf2:	4313      	orrs	r3, r2
 800daf4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	693a      	ldr	r2, [r7, #16]
 800dafa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	68fa      	ldr	r2, [r7, #12]
 800db00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800db02:	683b      	ldr	r3, [r7, #0]
 800db04:	685a      	ldr	r2, [r3, #4]
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	697a      	ldr	r2, [r7, #20]
 800db0e:	621a      	str	r2, [r3, #32]
}
 800db10:	bf00      	nop
 800db12:	371c      	adds	r7, #28
 800db14:	46bd      	mov	sp, r7
 800db16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1a:	4770      	bx	lr
 800db1c:	40012c00 	.word	0x40012c00
 800db20:	40014400 	.word	0x40014400
 800db24:	40014800 	.word	0x40014800

0800db28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800db28:	b480      	push	{r7}
 800db2a:	b087      	sub	sp, #28
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]
 800db30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	6a1b      	ldr	r3, [r3, #32]
 800db36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	6a1b      	ldr	r3, [r3, #32]
 800db42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	685b      	ldr	r3, [r3, #4]
 800db48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	69db      	ldr	r3, [r3, #28]
 800db4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800db56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800db5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800db62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800db64:	683b      	ldr	r3, [r7, #0]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	021b      	lsls	r3, r3, #8
 800db6a:	68fa      	ldr	r2, [r7, #12]
 800db6c:	4313      	orrs	r3, r2
 800db6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800db70:	693b      	ldr	r3, [r7, #16]
 800db72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800db76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800db78:	683b      	ldr	r3, [r7, #0]
 800db7a:	689b      	ldr	r3, [r3, #8]
 800db7c:	031b      	lsls	r3, r3, #12
 800db7e:	693a      	ldr	r2, [r7, #16]
 800db80:	4313      	orrs	r3, r2
 800db82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	4a14      	ldr	r2, [pc, #80]	; (800dbd8 <TIM_OC4_SetConfig+0xb0>)
 800db88:	4293      	cmp	r3, r2
 800db8a:	d007      	beq.n	800db9c <TIM_OC4_SetConfig+0x74>
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	4a13      	ldr	r2, [pc, #76]	; (800dbdc <TIM_OC4_SetConfig+0xb4>)
 800db90:	4293      	cmp	r3, r2
 800db92:	d003      	beq.n	800db9c <TIM_OC4_SetConfig+0x74>
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	4a12      	ldr	r2, [pc, #72]	; (800dbe0 <TIM_OC4_SetConfig+0xb8>)
 800db98:	4293      	cmp	r3, r2
 800db9a:	d109      	bne.n	800dbb0 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800db9c:	697b      	ldr	r3, [r7, #20]
 800db9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800dba2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800dba4:	683b      	ldr	r3, [r7, #0]
 800dba6:	695b      	ldr	r3, [r3, #20]
 800dba8:	019b      	lsls	r3, r3, #6
 800dbaa:	697a      	ldr	r2, [r7, #20]
 800dbac:	4313      	orrs	r3, r2
 800dbae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	697a      	ldr	r2, [r7, #20]
 800dbb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	68fa      	ldr	r2, [r7, #12]
 800dbba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800dbbc:	683b      	ldr	r3, [r7, #0]
 800dbbe:	685a      	ldr	r2, [r3, #4]
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	693a      	ldr	r2, [r7, #16]
 800dbc8:	621a      	str	r2, [r3, #32]
}
 800dbca:	bf00      	nop
 800dbcc:	371c      	adds	r7, #28
 800dbce:	46bd      	mov	sp, r7
 800dbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd4:	4770      	bx	lr
 800dbd6:	bf00      	nop
 800dbd8:	40012c00 	.word	0x40012c00
 800dbdc:	40014400 	.word	0x40014400
 800dbe0:	40014800 	.word	0x40014800

0800dbe4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800dbe4:	b480      	push	{r7}
 800dbe6:	b087      	sub	sp, #28
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	6078      	str	r0, [r7, #4]
 800dbec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	6a1b      	ldr	r3, [r3, #32]
 800dbf2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	6a1b      	ldr	r3, [r3, #32]
 800dbfe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	685b      	ldr	r3, [r3, #4]
 800dc04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dc12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dc16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dc18:	683b      	ldr	r3, [r7, #0]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	68fa      	ldr	r2, [r7, #12]
 800dc1e:	4313      	orrs	r3, r2
 800dc20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800dc22:	693b      	ldr	r3, [r7, #16]
 800dc24:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800dc28:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800dc2a:	683b      	ldr	r3, [r7, #0]
 800dc2c:	689b      	ldr	r3, [r3, #8]
 800dc2e:	041b      	lsls	r3, r3, #16
 800dc30:	693a      	ldr	r2, [r7, #16]
 800dc32:	4313      	orrs	r3, r2
 800dc34:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	4a13      	ldr	r2, [pc, #76]	; (800dc88 <TIM_OC5_SetConfig+0xa4>)
 800dc3a:	4293      	cmp	r3, r2
 800dc3c:	d007      	beq.n	800dc4e <TIM_OC5_SetConfig+0x6a>
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	4a12      	ldr	r2, [pc, #72]	; (800dc8c <TIM_OC5_SetConfig+0xa8>)
 800dc42:	4293      	cmp	r3, r2
 800dc44:	d003      	beq.n	800dc4e <TIM_OC5_SetConfig+0x6a>
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	4a11      	ldr	r2, [pc, #68]	; (800dc90 <TIM_OC5_SetConfig+0xac>)
 800dc4a:	4293      	cmp	r3, r2
 800dc4c:	d109      	bne.n	800dc62 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800dc4e:	697b      	ldr	r3, [r7, #20]
 800dc50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dc54:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800dc56:	683b      	ldr	r3, [r7, #0]
 800dc58:	695b      	ldr	r3, [r3, #20]
 800dc5a:	021b      	lsls	r3, r3, #8
 800dc5c:	697a      	ldr	r2, [r7, #20]
 800dc5e:	4313      	orrs	r3, r2
 800dc60:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	697a      	ldr	r2, [r7, #20]
 800dc66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	68fa      	ldr	r2, [r7, #12]
 800dc6c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800dc6e:	683b      	ldr	r3, [r7, #0]
 800dc70:	685a      	ldr	r2, [r3, #4]
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	693a      	ldr	r2, [r7, #16]
 800dc7a:	621a      	str	r2, [r3, #32]
}
 800dc7c:	bf00      	nop
 800dc7e:	371c      	adds	r7, #28
 800dc80:	46bd      	mov	sp, r7
 800dc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc86:	4770      	bx	lr
 800dc88:	40012c00 	.word	0x40012c00
 800dc8c:	40014400 	.word	0x40014400
 800dc90:	40014800 	.word	0x40014800

0800dc94 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800dc94:	b480      	push	{r7}
 800dc96:	b087      	sub	sp, #28
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
 800dc9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	6a1b      	ldr	r3, [r3, #32]
 800dca2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	6a1b      	ldr	r3, [r3, #32]
 800dcae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	685b      	ldr	r3, [r3, #4]
 800dcb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dcba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800dcc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dcc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dcc8:	683b      	ldr	r3, [r7, #0]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	021b      	lsls	r3, r3, #8
 800dcce:	68fa      	ldr	r2, [r7, #12]
 800dcd0:	4313      	orrs	r3, r2
 800dcd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800dcd4:	693b      	ldr	r3, [r7, #16]
 800dcd6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800dcda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800dcdc:	683b      	ldr	r3, [r7, #0]
 800dcde:	689b      	ldr	r3, [r3, #8]
 800dce0:	051b      	lsls	r3, r3, #20
 800dce2:	693a      	ldr	r2, [r7, #16]
 800dce4:	4313      	orrs	r3, r2
 800dce6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	4a14      	ldr	r2, [pc, #80]	; (800dd3c <TIM_OC6_SetConfig+0xa8>)
 800dcec:	4293      	cmp	r3, r2
 800dcee:	d007      	beq.n	800dd00 <TIM_OC6_SetConfig+0x6c>
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	4a13      	ldr	r2, [pc, #76]	; (800dd40 <TIM_OC6_SetConfig+0xac>)
 800dcf4:	4293      	cmp	r3, r2
 800dcf6:	d003      	beq.n	800dd00 <TIM_OC6_SetConfig+0x6c>
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	4a12      	ldr	r2, [pc, #72]	; (800dd44 <TIM_OC6_SetConfig+0xb0>)
 800dcfc:	4293      	cmp	r3, r2
 800dcfe:	d109      	bne.n	800dd14 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800dd00:	697b      	ldr	r3, [r7, #20]
 800dd02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800dd06:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800dd08:	683b      	ldr	r3, [r7, #0]
 800dd0a:	695b      	ldr	r3, [r3, #20]
 800dd0c:	029b      	lsls	r3, r3, #10
 800dd0e:	697a      	ldr	r2, [r7, #20]
 800dd10:	4313      	orrs	r3, r2
 800dd12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	697a      	ldr	r2, [r7, #20]
 800dd18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	68fa      	ldr	r2, [r7, #12]
 800dd1e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800dd20:	683b      	ldr	r3, [r7, #0]
 800dd22:	685a      	ldr	r2, [r3, #4]
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	693a      	ldr	r2, [r7, #16]
 800dd2c:	621a      	str	r2, [r3, #32]
}
 800dd2e:	bf00      	nop
 800dd30:	371c      	adds	r7, #28
 800dd32:	46bd      	mov	sp, r7
 800dd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd38:	4770      	bx	lr
 800dd3a:	bf00      	nop
 800dd3c:	40012c00 	.word	0x40012c00
 800dd40:	40014400 	.word	0x40014400
 800dd44:	40014800 	.word	0x40014800

0800dd48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dd48:	b480      	push	{r7}
 800dd4a:	b087      	sub	sp, #28
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	60f8      	str	r0, [r7, #12]
 800dd50:	60b9      	str	r1, [r7, #8]
 800dd52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	6a1b      	ldr	r3, [r3, #32]
 800dd58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	6a1b      	ldr	r3, [r3, #32]
 800dd5e:	f023 0201 	bic.w	r2, r3, #1
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	699b      	ldr	r3, [r3, #24]
 800dd6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800dd6c:	693b      	ldr	r3, [r7, #16]
 800dd6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800dd72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	011b      	lsls	r3, r3, #4
 800dd78:	693a      	ldr	r2, [r7, #16]
 800dd7a:	4313      	orrs	r3, r2
 800dd7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800dd7e:	697b      	ldr	r3, [r7, #20]
 800dd80:	f023 030a 	bic.w	r3, r3, #10
 800dd84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800dd86:	697a      	ldr	r2, [r7, #20]
 800dd88:	68bb      	ldr	r3, [r7, #8]
 800dd8a:	4313      	orrs	r3, r2
 800dd8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	693a      	ldr	r2, [r7, #16]
 800dd92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	697a      	ldr	r2, [r7, #20]
 800dd98:	621a      	str	r2, [r3, #32]
}
 800dd9a:	bf00      	nop
 800dd9c:	371c      	adds	r7, #28
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda4:	4770      	bx	lr

0800dda6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dda6:	b480      	push	{r7}
 800dda8:	b087      	sub	sp, #28
 800ddaa:	af00      	add	r7, sp, #0
 800ddac:	60f8      	str	r0, [r7, #12]
 800ddae:	60b9      	str	r1, [r7, #8]
 800ddb0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	6a1b      	ldr	r3, [r3, #32]
 800ddb6:	f023 0210 	bic.w	r2, r3, #16
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	699b      	ldr	r3, [r3, #24]
 800ddc2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	6a1b      	ldr	r3, [r3, #32]
 800ddc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ddca:	697b      	ldr	r3, [r7, #20]
 800ddcc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ddd0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	031b      	lsls	r3, r3, #12
 800ddd6:	697a      	ldr	r2, [r7, #20]
 800ddd8:	4313      	orrs	r3, r2
 800ddda:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800dddc:	693b      	ldr	r3, [r7, #16]
 800ddde:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800dde2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800dde4:	68bb      	ldr	r3, [r7, #8]
 800dde6:	011b      	lsls	r3, r3, #4
 800dde8:	693a      	ldr	r2, [r7, #16]
 800ddea:	4313      	orrs	r3, r2
 800ddec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	697a      	ldr	r2, [r7, #20]
 800ddf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	693a      	ldr	r2, [r7, #16]
 800ddf8:	621a      	str	r2, [r3, #32]
}
 800ddfa:	bf00      	nop
 800ddfc:	371c      	adds	r7, #28
 800ddfe:	46bd      	mov	sp, r7
 800de00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de04:	4770      	bx	lr

0800de06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800de06:	b480      	push	{r7}
 800de08:	b085      	sub	sp, #20
 800de0a:	af00      	add	r7, sp, #0
 800de0c:	6078      	str	r0, [r7, #4]
 800de0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	689b      	ldr	r3, [r3, #8]
 800de14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800de1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800de20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800de22:	683a      	ldr	r2, [r7, #0]
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	4313      	orrs	r3, r2
 800de28:	f043 0307 	orr.w	r3, r3, #7
 800de2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	68fa      	ldr	r2, [r7, #12]
 800de32:	609a      	str	r2, [r3, #8]
}
 800de34:	bf00      	nop
 800de36:	3714      	adds	r7, #20
 800de38:	46bd      	mov	sp, r7
 800de3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3e:	4770      	bx	lr

0800de40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800de40:	b480      	push	{r7}
 800de42:	b087      	sub	sp, #28
 800de44:	af00      	add	r7, sp, #0
 800de46:	60f8      	str	r0, [r7, #12]
 800de48:	60b9      	str	r1, [r7, #8]
 800de4a:	607a      	str	r2, [r7, #4]
 800de4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	689b      	ldr	r3, [r3, #8]
 800de52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800de54:	697b      	ldr	r3, [r7, #20]
 800de56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800de5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800de5c:	683b      	ldr	r3, [r7, #0]
 800de5e:	021a      	lsls	r2, r3, #8
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	431a      	orrs	r2, r3
 800de64:	68bb      	ldr	r3, [r7, #8]
 800de66:	4313      	orrs	r3, r2
 800de68:	697a      	ldr	r2, [r7, #20]
 800de6a:	4313      	orrs	r3, r2
 800de6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	697a      	ldr	r2, [r7, #20]
 800de72:	609a      	str	r2, [r3, #8]
}
 800de74:	bf00      	nop
 800de76:	371c      	adds	r7, #28
 800de78:	46bd      	mov	sp, r7
 800de7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7e:	4770      	bx	lr

0800de80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800de80:	b480      	push	{r7}
 800de82:	b087      	sub	sp, #28
 800de84:	af00      	add	r7, sp, #0
 800de86:	60f8      	str	r0, [r7, #12]
 800de88:	60b9      	str	r1, [r7, #8]
 800de8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800de8c:	68bb      	ldr	r3, [r7, #8]
 800de8e:	f003 031f 	and.w	r3, r3, #31
 800de92:	2201      	movs	r2, #1
 800de94:	fa02 f303 	lsl.w	r3, r2, r3
 800de98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	6a1a      	ldr	r2, [r3, #32]
 800de9e:	697b      	ldr	r3, [r7, #20]
 800dea0:	43db      	mvns	r3, r3
 800dea2:	401a      	ands	r2, r3
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	6a1a      	ldr	r2, [r3, #32]
 800deac:	68bb      	ldr	r3, [r7, #8]
 800deae:	f003 031f 	and.w	r3, r3, #31
 800deb2:	6879      	ldr	r1, [r7, #4]
 800deb4:	fa01 f303 	lsl.w	r3, r1, r3
 800deb8:	431a      	orrs	r2, r3
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	621a      	str	r2, [r3, #32]
}
 800debe:	bf00      	nop
 800dec0:	371c      	adds	r7, #28
 800dec2:	46bd      	mov	sp, r7
 800dec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec8:	4770      	bx	lr
	...

0800decc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800decc:	b480      	push	{r7}
 800dece:	b085      	sub	sp, #20
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
 800ded4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dedc:	2b01      	cmp	r3, #1
 800dede:	d101      	bne.n	800dee4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dee0:	2302      	movs	r3, #2
 800dee2:	e04a      	b.n	800df7a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	2201      	movs	r2, #1
 800dee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	2202      	movs	r2, #2
 800def0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	685b      	ldr	r3, [r3, #4]
 800defa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	689b      	ldr	r3, [r3, #8]
 800df02:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	4a1f      	ldr	r2, [pc, #124]	; (800df88 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800df0a:	4293      	cmp	r3, r2
 800df0c:	d108      	bne.n	800df20 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800df14:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800df16:	683b      	ldr	r3, [r7, #0]
 800df18:	685b      	ldr	r3, [r3, #4]
 800df1a:	68fa      	ldr	r2, [r7, #12]
 800df1c:	4313      	orrs	r3, r2
 800df1e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800df26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800df28:	683b      	ldr	r3, [r7, #0]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	68fa      	ldr	r2, [r7, #12]
 800df2e:	4313      	orrs	r3, r2
 800df30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	68fa      	ldr	r2, [r7, #12]
 800df38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	4a12      	ldr	r2, [pc, #72]	; (800df88 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800df40:	4293      	cmp	r3, r2
 800df42:	d004      	beq.n	800df4e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800df4c:	d10c      	bne.n	800df68 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800df4e:	68bb      	ldr	r3, [r7, #8]
 800df50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800df54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800df56:	683b      	ldr	r3, [r7, #0]
 800df58:	689b      	ldr	r3, [r3, #8]
 800df5a:	68ba      	ldr	r2, [r7, #8]
 800df5c:	4313      	orrs	r3, r2
 800df5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	68ba      	ldr	r2, [r7, #8]
 800df66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	2201      	movs	r2, #1
 800df6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	2200      	movs	r2, #0
 800df74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800df78:	2300      	movs	r3, #0
}
 800df7a:	4618      	mov	r0, r3
 800df7c:	3714      	adds	r7, #20
 800df7e:	46bd      	mov	sp, r7
 800df80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df84:	4770      	bx	lr
 800df86:	bf00      	nop
 800df88:	40012c00 	.word	0x40012c00

0800df8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800df8c:	b480      	push	{r7}
 800df8e:	b083      	sub	sp, #12
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800df94:	bf00      	nop
 800df96:	370c      	adds	r7, #12
 800df98:	46bd      	mov	sp, r7
 800df9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9e:	4770      	bx	lr

0800dfa0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800dfa0:	b480      	push	{r7}
 800dfa2:	b083      	sub	sp, #12
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800dfa8:	bf00      	nop
 800dfaa:	370c      	adds	r7, #12
 800dfac:	46bd      	mov	sp, r7
 800dfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb2:	4770      	bx	lr

0800dfb4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800dfb4:	b480      	push	{r7}
 800dfb6:	b083      	sub	sp, #12
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800dfbc:	bf00      	nop
 800dfbe:	370c      	adds	r7, #12
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc6:	4770      	bx	lr

0800dfc8 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800dfc8:	b480      	push	{r7}
 800dfca:	b085      	sub	sp, #20
 800dfcc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dfce:	f3ef 8305 	mrs	r3, IPSR
 800dfd2:	60bb      	str	r3, [r7, #8]
  return(result);
 800dfd4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d10f      	bne.n	800dffa <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dfda:	f3ef 8310 	mrs	r3, PRIMASK
 800dfde:	607b      	str	r3, [r7, #4]
  return(result);
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d109      	bne.n	800dffa <osKernelInitialize+0x32>
 800dfe6:	4b11      	ldr	r3, [pc, #68]	; (800e02c <osKernelInitialize+0x64>)
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	2b02      	cmp	r3, #2
 800dfec:	d109      	bne.n	800e002 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dfee:	f3ef 8311 	mrs	r3, BASEPRI
 800dff2:	603b      	str	r3, [r7, #0]
  return(result);
 800dff4:	683b      	ldr	r3, [r7, #0]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d003      	beq.n	800e002 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800dffa:	f06f 0305 	mvn.w	r3, #5
 800dffe:	60fb      	str	r3, [r7, #12]
 800e000:	e00c      	b.n	800e01c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800e002:	4b0a      	ldr	r3, [pc, #40]	; (800e02c <osKernelInitialize+0x64>)
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d105      	bne.n	800e016 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800e00a:	4b08      	ldr	r3, [pc, #32]	; (800e02c <osKernelInitialize+0x64>)
 800e00c:	2201      	movs	r2, #1
 800e00e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800e010:	2300      	movs	r3, #0
 800e012:	60fb      	str	r3, [r7, #12]
 800e014:	e002      	b.n	800e01c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800e016:	f04f 33ff 	mov.w	r3, #4294967295
 800e01a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800e01c:	68fb      	ldr	r3, [r7, #12]
}
 800e01e:	4618      	mov	r0, r3
 800e020:	3714      	adds	r7, #20
 800e022:	46bd      	mov	sp, r7
 800e024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e028:	4770      	bx	lr
 800e02a:	bf00      	nop
 800e02c:	20000b24 	.word	0x20000b24

0800e030 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800e030:	b580      	push	{r7, lr}
 800e032:	b084      	sub	sp, #16
 800e034:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e036:	f3ef 8305 	mrs	r3, IPSR
 800e03a:	60bb      	str	r3, [r7, #8]
  return(result);
 800e03c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d10f      	bne.n	800e062 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e042:	f3ef 8310 	mrs	r3, PRIMASK
 800e046:	607b      	str	r3, [r7, #4]
  return(result);
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d109      	bne.n	800e062 <osKernelStart+0x32>
 800e04e:	4b11      	ldr	r3, [pc, #68]	; (800e094 <osKernelStart+0x64>)
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	2b02      	cmp	r3, #2
 800e054:	d109      	bne.n	800e06a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e056:	f3ef 8311 	mrs	r3, BASEPRI
 800e05a:	603b      	str	r3, [r7, #0]
  return(result);
 800e05c:	683b      	ldr	r3, [r7, #0]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d003      	beq.n	800e06a <osKernelStart+0x3a>
    stat = osErrorISR;
 800e062:	f06f 0305 	mvn.w	r3, #5
 800e066:	60fb      	str	r3, [r7, #12]
 800e068:	e00e      	b.n	800e088 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800e06a:	4b0a      	ldr	r3, [pc, #40]	; (800e094 <osKernelStart+0x64>)
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	2b01      	cmp	r3, #1
 800e070:	d107      	bne.n	800e082 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800e072:	4b08      	ldr	r3, [pc, #32]	; (800e094 <osKernelStart+0x64>)
 800e074:	2202      	movs	r2, #2
 800e076:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800e078:	f002 fee4 	bl	8010e44 <vTaskStartScheduler>
      stat = osOK;
 800e07c:	2300      	movs	r3, #0
 800e07e:	60fb      	str	r3, [r7, #12]
 800e080:	e002      	b.n	800e088 <osKernelStart+0x58>
    } else {
      stat = osError;
 800e082:	f04f 33ff 	mov.w	r3, #4294967295
 800e086:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800e088:	68fb      	ldr	r3, [r7, #12]
}
 800e08a:	4618      	mov	r0, r3
 800e08c:	3710      	adds	r7, #16
 800e08e:	46bd      	mov	sp, r7
 800e090:	bd80      	pop	{r7, pc}
 800e092:	bf00      	nop
 800e094:	20000b24 	.word	0x20000b24

0800e098 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e098:	b580      	push	{r7, lr}
 800e09a:	b092      	sub	sp, #72	; 0x48
 800e09c:	af04      	add	r7, sp, #16
 800e09e:	60f8      	str	r0, [r7, #12]
 800e0a0:	60b9      	str	r1, [r7, #8]
 800e0a2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e0a8:	f3ef 8305 	mrs	r3, IPSR
 800e0ac:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800e0ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	f040 8095 	bne.w	800e1e0 <osThreadNew+0x148>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e0b6:	f3ef 8310 	mrs	r3, PRIMASK
 800e0ba:	623b      	str	r3, [r7, #32]
  return(result);
 800e0bc:	6a3b      	ldr	r3, [r7, #32]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	f040 808e 	bne.w	800e1e0 <osThreadNew+0x148>
 800e0c4:	4b49      	ldr	r3, [pc, #292]	; (800e1ec <osThreadNew+0x154>)
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	2b02      	cmp	r3, #2
 800e0ca:	d106      	bne.n	800e0da <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e0cc:	f3ef 8311 	mrs	r3, BASEPRI
 800e0d0:	61fb      	str	r3, [r7, #28]
  return(result);
 800e0d2:	69fb      	ldr	r3, [r7, #28]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	f040 8083 	bne.w	800e1e0 <osThreadNew+0x148>
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d07f      	beq.n	800e1e0 <osThreadNew+0x148>
    stack = configMINIMAL_STACK_SIZE;
 800e0e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e0e4:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800e0e6:	2318      	movs	r3, #24
 800e0e8:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800e0ee:	f107 031b 	add.w	r3, r7, #27
 800e0f2:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800e0f4:	f04f 33ff 	mov.w	r3, #4294967295
 800e0f8:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d045      	beq.n	800e18c <osThreadNew+0xf4>
      if (attr->name != NULL) {
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	2b00      	cmp	r3, #0
 800e106:	d002      	beq.n	800e10e <osThreadNew+0x76>
        name = attr->name;
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	699b      	ldr	r3, [r3, #24]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d002      	beq.n	800e11c <osThreadNew+0x84>
        prio = (UBaseType_t)attr->priority;
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	699b      	ldr	r3, [r3, #24]
 800e11a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e11c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d008      	beq.n	800e134 <osThreadNew+0x9c>
 800e122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e124:	2b38      	cmp	r3, #56	; 0x38
 800e126:	d805      	bhi.n	800e134 <osThreadNew+0x9c>
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	685b      	ldr	r3, [r3, #4]
 800e12c:	f003 0301 	and.w	r3, r3, #1
 800e130:	2b00      	cmp	r3, #0
 800e132:	d001      	beq.n	800e138 <osThreadNew+0xa0>
        return (NULL);
 800e134:	2300      	movs	r3, #0
 800e136:	e054      	b.n	800e1e2 <osThreadNew+0x14a>
      }

      if (attr->stack_size > 0U) {
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	695b      	ldr	r3, [r3, #20]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d003      	beq.n	800e148 <osThreadNew+0xb0>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	695b      	ldr	r3, [r3, #20]
 800e144:	089b      	lsrs	r3, r3, #2
 800e146:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	689b      	ldr	r3, [r3, #8]
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d00e      	beq.n	800e16e <osThreadNew+0xd6>
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	68db      	ldr	r3, [r3, #12]
 800e154:	2b63      	cmp	r3, #99	; 0x63
 800e156:	d90a      	bls.n	800e16e <osThreadNew+0xd6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d006      	beq.n	800e16e <osThreadNew+0xd6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	695b      	ldr	r3, [r3, #20]
 800e164:	2b00      	cmp	r3, #0
 800e166:	d002      	beq.n	800e16e <osThreadNew+0xd6>
        mem = 1;
 800e168:	2301      	movs	r3, #1
 800e16a:	62bb      	str	r3, [r7, #40]	; 0x28
 800e16c:	e010      	b.n	800e190 <osThreadNew+0xf8>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	689b      	ldr	r3, [r3, #8]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d10c      	bne.n	800e190 <osThreadNew+0xf8>
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	68db      	ldr	r3, [r3, #12]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d108      	bne.n	800e190 <osThreadNew+0xf8>
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	691b      	ldr	r3, [r3, #16]
 800e182:	2b00      	cmp	r3, #0
 800e184:	d104      	bne.n	800e190 <osThreadNew+0xf8>
          mem = 0;
 800e186:	2300      	movs	r3, #0
 800e188:	62bb      	str	r3, [r7, #40]	; 0x28
 800e18a:	e001      	b.n	800e190 <osThreadNew+0xf8>
        }
      }
    }
    else {
      mem = 0;
 800e18c:	2300      	movs	r3, #0
 800e18e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800e190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e192:	2b01      	cmp	r3, #1
 800e194:	d110      	bne.n	800e1b8 <osThreadNew+0x120>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800e19a:	687a      	ldr	r2, [r7, #4]
 800e19c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e19e:	9202      	str	r2, [sp, #8]
 800e1a0:	9301      	str	r3, [sp, #4]
 800e1a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1a4:	9300      	str	r3, [sp, #0]
 800e1a6:	68bb      	ldr	r3, [r7, #8]
 800e1a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e1aa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e1ac:	68f8      	ldr	r0, [r7, #12]
 800e1ae:	f002 fc7b 	bl	8010aa8 <xTaskCreateStatic>
 800e1b2:	4603      	mov	r3, r0
 800e1b4:	617b      	str	r3, [r7, #20]
 800e1b6:	e013      	b.n	800e1e0 <osThreadNew+0x148>
    }
    else {
      if (mem == 0) {
 800e1b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d110      	bne.n	800e1e0 <osThreadNew+0x148>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800e1be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1c0:	b29a      	uxth	r2, r3
 800e1c2:	f107 0314 	add.w	r3, r7, #20
 800e1c6:	9301      	str	r3, [sp, #4]
 800e1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ca:	9300      	str	r3, [sp, #0]
 800e1cc:	68bb      	ldr	r3, [r7, #8]
 800e1ce:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e1d0:	68f8      	ldr	r0, [r7, #12]
 800e1d2:	f002 fcc2 	bl	8010b5a <xTaskCreate>
 800e1d6:	4603      	mov	r3, r0
 800e1d8:	2b01      	cmp	r3, #1
 800e1da:	d001      	beq.n	800e1e0 <osThreadNew+0x148>
          hTask = NULL;
 800e1dc:	2300      	movs	r3, #0
 800e1de:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800e1e0:	697b      	ldr	r3, [r7, #20]
}
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	3738      	adds	r7, #56	; 0x38
 800e1e6:	46bd      	mov	sp, r7
 800e1e8:	bd80      	pop	{r7, pc}
 800e1ea:	bf00      	nop
 800e1ec:	20000b24 	.word	0x20000b24

0800e1f0 <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800e1f0:	b580      	push	{r7, lr}
 800e1f2:	b08a      	sub	sp, #40	; 0x28
 800e1f4:	af02      	add	r7, sp, #8
 800e1f6:	6078      	str	r0, [r7, #4]
 800e1f8:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800e1fe:	69fb      	ldr	r3, [r7, #28]
 800e200:	2b00      	cmp	r3, #0
 800e202:	d002      	beq.n	800e20a <osThreadFlagsSet+0x1a>
 800e204:	683b      	ldr	r3, [r7, #0]
 800e206:	2b00      	cmp	r3, #0
 800e208:	da03      	bge.n	800e212 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800e20a:	f06f 0303 	mvn.w	r3, #3
 800e20e:	60fb      	str	r3, [r7, #12]
 800e210:	e046      	b.n	800e2a0 <osThreadFlagsSet+0xb0>
  }
  else {
    rflags = (uint32_t)osError;
 800e212:	f04f 33ff 	mov.w	r3, #4294967295
 800e216:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e218:	f3ef 8305 	mrs	r3, IPSR
 800e21c:	61bb      	str	r3, [r7, #24]
  return(result);
 800e21e:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 800e220:	2b00      	cmp	r3, #0
 800e222:	d10f      	bne.n	800e244 <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e224:	f3ef 8310 	mrs	r3, PRIMASK
 800e228:	617b      	str	r3, [r7, #20]
  return(result);
 800e22a:	697b      	ldr	r3, [r7, #20]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d109      	bne.n	800e244 <osThreadFlagsSet+0x54>
 800e230:	4b1e      	ldr	r3, [pc, #120]	; (800e2ac <osThreadFlagsSet+0xbc>)
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	2b02      	cmp	r3, #2
 800e236:	d126      	bne.n	800e286 <osThreadFlagsSet+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e238:	f3ef 8311 	mrs	r3, BASEPRI
 800e23c:	613b      	str	r3, [r7, #16]
  return(result);
 800e23e:	693b      	ldr	r3, [r7, #16]
 800e240:	2b00      	cmp	r3, #0
 800e242:	d020      	beq.n	800e286 <osThreadFlagsSet+0x96>
      yield = pdFALSE;
 800e244:	2300      	movs	r3, #0
 800e246:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800e248:	f107 0308 	add.w	r3, r7, #8
 800e24c:	9300      	str	r3, [sp, #0]
 800e24e:	2300      	movs	r3, #0
 800e250:	2201      	movs	r2, #1
 800e252:	6839      	ldr	r1, [r7, #0]
 800e254:	69f8      	ldr	r0, [r7, #28]
 800e256:	f003 fdbf 	bl	8011dd8 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800e25a:	f107 020c 	add.w	r2, r7, #12
 800e25e:	2300      	movs	r3, #0
 800e260:	9300      	str	r3, [sp, #0]
 800e262:	4613      	mov	r3, r2
 800e264:	2200      	movs	r2, #0
 800e266:	2100      	movs	r1, #0
 800e268:	69f8      	ldr	r0, [r7, #28]
 800e26a:	f003 fdb5 	bl	8011dd8 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800e26e:	68bb      	ldr	r3, [r7, #8]
 800e270:	2b00      	cmp	r3, #0
 800e272:	d015      	beq.n	800e2a0 <osThreadFlagsSet+0xb0>
 800e274:	4b0e      	ldr	r3, [pc, #56]	; (800e2b0 <osThreadFlagsSet+0xc0>)
 800e276:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e27a:	601a      	str	r2, [r3, #0]
 800e27c:	f3bf 8f4f 	dsb	sy
 800e280:	f3bf 8f6f 	isb	sy
 800e284:	e00c      	b.n	800e2a0 <osThreadFlagsSet+0xb0>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800e286:	2300      	movs	r3, #0
 800e288:	2201      	movs	r2, #1
 800e28a:	6839      	ldr	r1, [r7, #0]
 800e28c:	69f8      	ldr	r0, [r7, #28]
 800e28e:	f003 fcff 	bl	8011c90 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800e292:	f107 030c 	add.w	r3, r7, #12
 800e296:	2200      	movs	r2, #0
 800e298:	2100      	movs	r1, #0
 800e29a:	69f8      	ldr	r0, [r7, #28]
 800e29c:	f003 fcf8 	bl	8011c90 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800e2a0:	68fb      	ldr	r3, [r7, #12]
}
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	3720      	adds	r7, #32
 800e2a6:	46bd      	mov	sp, r7
 800e2a8:	bd80      	pop	{r7, pc}
 800e2aa:	bf00      	nop
 800e2ac:	20000b24 	.word	0x20000b24
 800e2b0:	e000ed04 	.word	0xe000ed04

0800e2b4 <osThreadFlagsClear>:

uint32_t osThreadFlagsClear (uint32_t flags) {
 800e2b4:	b580      	push	{r7, lr}
 800e2b6:	b088      	sub	sp, #32
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e2bc:	f3ef 8305 	mrs	r3, IPSR
 800e2c0:	617b      	str	r3, [r7, #20]
  return(result);
 800e2c2:	697b      	ldr	r3, [r7, #20]
  TaskHandle_t hTask;
  uint32_t rflags, cflags;

  if (IS_IRQ()) {
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d10f      	bne.n	800e2e8 <osThreadFlagsClear+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e2c8:	f3ef 8310 	mrs	r3, PRIMASK
 800e2cc:	613b      	str	r3, [r7, #16]
  return(result);
 800e2ce:	693b      	ldr	r3, [r7, #16]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d109      	bne.n	800e2e8 <osThreadFlagsClear+0x34>
 800e2d4:	4b1e      	ldr	r3, [pc, #120]	; (800e350 <osThreadFlagsClear+0x9c>)
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	2b02      	cmp	r3, #2
 800e2da:	d109      	bne.n	800e2f0 <osThreadFlagsClear+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e2dc:	f3ef 8311 	mrs	r3, BASEPRI
 800e2e0:	60fb      	str	r3, [r7, #12]
  return(result);
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d003      	beq.n	800e2f0 <osThreadFlagsClear+0x3c>
    rflags = (uint32_t)osErrorISR;
 800e2e8:	f06f 0305 	mvn.w	r3, #5
 800e2ec:	61fb      	str	r3, [r7, #28]
 800e2ee:	e02a      	b.n	800e346 <osThreadFlagsClear+0x92>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	da03      	bge.n	800e2fe <osThreadFlagsClear+0x4a>
    rflags = (uint32_t)osErrorParameter;
 800e2f6:	f06f 0303 	mvn.w	r3, #3
 800e2fa:	61fb      	str	r3, [r7, #28]
 800e2fc:	e023      	b.n	800e346 <osThreadFlagsClear+0x92>
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 800e2fe:	f003 facd 	bl	801189c <xTaskGetCurrentTaskHandle>
 800e302:	61b8      	str	r0, [r7, #24]

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &cflags) == pdPASS) {
 800e304:	f107 0308 	add.w	r3, r7, #8
 800e308:	2200      	movs	r2, #0
 800e30a:	2100      	movs	r1, #0
 800e30c:	69b8      	ldr	r0, [r7, #24]
 800e30e:	f003 fcbf 	bl	8011c90 <xTaskGenericNotify>
 800e312:	4603      	mov	r3, r0
 800e314:	2b01      	cmp	r3, #1
 800e316:	d113      	bne.n	800e340 <osThreadFlagsClear+0x8c>
      rflags = cflags;
 800e318:	68bb      	ldr	r3, [r7, #8]
 800e31a:	61fb      	str	r3, [r7, #28]
      cflags &= ~flags;
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	43da      	mvns	r2, r3
 800e320:	68bb      	ldr	r3, [r7, #8]
 800e322:	4013      	ands	r3, r2
 800e324:	60bb      	str	r3, [r7, #8]

      if (xTaskNotify (hTask, cflags, eSetValueWithOverwrite) != pdPASS) {
 800e326:	68b9      	ldr	r1, [r7, #8]
 800e328:	2300      	movs	r3, #0
 800e32a:	2203      	movs	r2, #3
 800e32c:	69b8      	ldr	r0, [r7, #24]
 800e32e:	f003 fcaf 	bl	8011c90 <xTaskGenericNotify>
 800e332:	4603      	mov	r3, r0
 800e334:	2b01      	cmp	r3, #1
 800e336:	d006      	beq.n	800e346 <osThreadFlagsClear+0x92>
        rflags = (uint32_t)osError;
 800e338:	f04f 33ff 	mov.w	r3, #4294967295
 800e33c:	61fb      	str	r3, [r7, #28]
 800e33e:	e002      	b.n	800e346 <osThreadFlagsClear+0x92>
      }
    }
    else {
      rflags = (uint32_t)osError;
 800e340:	f04f 33ff 	mov.w	r3, #4294967295
 800e344:	61fb      	str	r3, [r7, #28]
    }
  }

  /* Return flags before clearing */
  return (rflags);
 800e346:	69fb      	ldr	r3, [r7, #28]
}
 800e348:	4618      	mov	r0, r3
 800e34a:	3720      	adds	r7, #32
 800e34c:	46bd      	mov	sp, r7
 800e34e:	bd80      	pop	{r7, pc}
 800e350:	20000b24 	.word	0x20000b24

0800e354 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800e354:	b580      	push	{r7, lr}
 800e356:	b08e      	sub	sp, #56	; 0x38
 800e358:	af00      	add	r7, sp, #0
 800e35a:	60f8      	str	r0, [r7, #12]
 800e35c:	60b9      	str	r1, [r7, #8]
 800e35e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e360:	f3ef 8305 	mrs	r3, IPSR
 800e364:	61fb      	str	r3, [r7, #28]
  return(result);
 800e366:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d10f      	bne.n	800e38c <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e36c:	f3ef 8310 	mrs	r3, PRIMASK
 800e370:	61bb      	str	r3, [r7, #24]
  return(result);
 800e372:	69bb      	ldr	r3, [r7, #24]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d109      	bne.n	800e38c <osThreadFlagsWait+0x38>
 800e378:	4b3f      	ldr	r3, [pc, #252]	; (800e478 <osThreadFlagsWait+0x124>)
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	2b02      	cmp	r3, #2
 800e37e:	d109      	bne.n	800e394 <osThreadFlagsWait+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e380:	f3ef 8311 	mrs	r3, BASEPRI
 800e384:	617b      	str	r3, [r7, #20]
  return(result);
 800e386:	697b      	ldr	r3, [r7, #20]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d003      	beq.n	800e394 <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 800e38c:	f06f 0305 	mvn.w	r3, #5
 800e390:	637b      	str	r3, [r7, #52]	; 0x34
 800e392:	e06b      	b.n	800e46c <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	2b00      	cmp	r3, #0
 800e398:	da03      	bge.n	800e3a2 <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 800e39a:	f06f 0303 	mvn.w	r3, #3
 800e39e:	637b      	str	r3, [r7, #52]	; 0x34
 800e3a0:	e064      	b.n	800e46c <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800e3a2:	68bb      	ldr	r3, [r7, #8]
 800e3a4:	f003 0302 	and.w	r3, r3, #2
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d002      	beq.n	800e3b2 <osThreadFlagsWait+0x5e>
      clear = 0U;
 800e3ac:	2300      	movs	r3, #0
 800e3ae:	633b      	str	r3, [r7, #48]	; 0x30
 800e3b0:	e001      	b.n	800e3b6 <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 800e3be:	f002 fe89 	bl	80110d4 <xTaskGetTickCount>
 800e3c2:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800e3c4:	f107 0210 	add.w	r2, r7, #16
 800e3c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e3cc:	2000      	movs	r0, #0
 800e3ce:	f003 fc05 	bl	8011bdc <xTaskNotifyWait>
 800e3d2:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 800e3d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3d6:	2b01      	cmp	r3, #1
 800e3d8:	d137      	bne.n	800e44a <osThreadFlagsWait+0xf6>
        rflags &= flags;
 800e3da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	4013      	ands	r3, r2
 800e3e0:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 800e3e2:	693b      	ldr	r3, [r7, #16]
 800e3e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e3e6:	4313      	orrs	r3, r2
 800e3e8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800e3ea:	68bb      	ldr	r3, [r7, #8]
 800e3ec:	f003 0301 	and.w	r3, r3, #1
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d00c      	beq.n	800e40e <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 800e3f4:	68fa      	ldr	r2, [r7, #12]
 800e3f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3f8:	4013      	ands	r3, r2
 800e3fa:	68fa      	ldr	r2, [r7, #12]
 800e3fc:	429a      	cmp	r2, r3
 800e3fe:	d032      	beq.n	800e466 <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	2b00      	cmp	r3, #0
 800e404:	d10f      	bne.n	800e426 <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800e406:	f06f 0302 	mvn.w	r3, #2
 800e40a:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800e40c:	e02e      	b.n	800e46c <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800e40e:	68fa      	ldr	r2, [r7, #12]
 800e410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e412:	4013      	ands	r3, r2
 800e414:	2b00      	cmp	r3, #0
 800e416:	d128      	bne.n	800e46a <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d103      	bne.n	800e426 <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800e41e:	f06f 0302 	mvn.w	r3, #2
 800e422:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800e424:	e022      	b.n	800e46c <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800e426:	f002 fe55 	bl	80110d4 <xTaskGetTickCount>
 800e42a:	4602      	mov	r2, r0
 800e42c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e42e:	1ad3      	subs	r3, r2, r3
 800e430:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 800e432:	6a3a      	ldr	r2, [r7, #32]
 800e434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e436:	429a      	cmp	r2, r3
 800e438:	d902      	bls.n	800e440 <osThreadFlagsWait+0xec>
          tout  = 0;
 800e43a:	2300      	movs	r3, #0
 800e43c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e43e:	e00e      	b.n	800e45e <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 800e440:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e442:	6a3b      	ldr	r3, [r7, #32]
 800e444:	1ad3      	subs	r3, r2, r3
 800e446:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e448:	e009      	b.n	800e45e <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d103      	bne.n	800e458 <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 800e450:	f06f 0302 	mvn.w	r3, #2
 800e454:	637b      	str	r3, [r7, #52]	; 0x34
 800e456:	e002      	b.n	800e45e <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800e458:	f06f 0301 	mvn.w	r3, #1
 800e45c:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 800e45e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e460:	2b00      	cmp	r3, #0
 800e462:	d1af      	bne.n	800e3c4 <osThreadFlagsWait+0x70>
 800e464:	e002      	b.n	800e46c <osThreadFlagsWait+0x118>
            break;
 800e466:	bf00      	nop
 800e468:	e000      	b.n	800e46c <osThreadFlagsWait+0x118>
            break;
 800e46a:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800e46c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e46e:	4618      	mov	r0, r3
 800e470:	3738      	adds	r7, #56	; 0x38
 800e472:	46bd      	mov	sp, r7
 800e474:	bd80      	pop	{r7, pc}
 800e476:	bf00      	nop
 800e478:	20000b24 	.word	0x20000b24

0800e47c <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 800e47c:	b580      	push	{r7, lr}
 800e47e:	b086      	sub	sp, #24
 800e480:	af00      	add	r7, sp, #0
 800e482:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e484:	f3ef 8305 	mrs	r3, IPSR
 800e488:	613b      	str	r3, [r7, #16]
  return(result);
 800e48a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d10f      	bne.n	800e4b0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e490:	f3ef 8310 	mrs	r3, PRIMASK
 800e494:	60fb      	str	r3, [r7, #12]
  return(result);
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d109      	bne.n	800e4b0 <osDelay+0x34>
 800e49c:	4b0d      	ldr	r3, [pc, #52]	; (800e4d4 <osDelay+0x58>)
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	2b02      	cmp	r3, #2
 800e4a2:	d109      	bne.n	800e4b8 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e4a4:	f3ef 8311 	mrs	r3, BASEPRI
 800e4a8:	60bb      	str	r3, [r7, #8]
  return(result);
 800e4aa:	68bb      	ldr	r3, [r7, #8]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d003      	beq.n	800e4b8 <osDelay+0x3c>
    stat = osErrorISR;
 800e4b0:	f06f 0305 	mvn.w	r3, #5
 800e4b4:	617b      	str	r3, [r7, #20]
 800e4b6:	e007      	b.n	800e4c8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800e4b8:	2300      	movs	r3, #0
 800e4ba:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d002      	beq.n	800e4c8 <osDelay+0x4c>
      vTaskDelay(ticks);
 800e4c2:	6878      	ldr	r0, [r7, #4]
 800e4c4:	f002 fc8a 	bl	8010ddc <vTaskDelay>
    }
  }

  return (stat);
 800e4c8:	697b      	ldr	r3, [r7, #20]
}
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	3718      	adds	r7, #24
 800e4ce:	46bd      	mov	sp, r7
 800e4d0:	bd80      	pop	{r7, pc}
 800e4d2:	bf00      	nop
 800e4d4:	20000b24 	.word	0x20000b24

0800e4d8 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 800e4d8:	b580      	push	{r7, lr}
 800e4da:	b084      	sub	sp, #16
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800e4e0:	6878      	ldr	r0, [r7, #4]
 800e4e2:	f004 f951 	bl	8012788 <pvTimerGetTimerID>
 800e4e6:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d005      	beq.n	800e4fa <TimerCallback+0x22>
    callb->func (callb->arg);
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	68fa      	ldr	r2, [r7, #12]
 800e4f4:	6852      	ldr	r2, [r2, #4]
 800e4f6:	4610      	mov	r0, r2
 800e4f8:	4798      	blx	r3
  }
}
 800e4fa:	bf00      	nop
 800e4fc:	3710      	adds	r7, #16
 800e4fe:	46bd      	mov	sp, r7
 800e500:	bd80      	pop	{r7, pc}
	...

0800e504 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800e504:	b580      	push	{r7, lr}
 800e506:	b08e      	sub	sp, #56	; 0x38
 800e508:	af02      	add	r7, sp, #8
 800e50a:	60f8      	str	r0, [r7, #12]
 800e50c:	607a      	str	r2, [r7, #4]
 800e50e:	603b      	str	r3, [r7, #0]
 800e510:	460b      	mov	r3, r1
 800e512:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800e514:	2300      	movs	r3, #0
 800e516:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e518:	f3ef 8305 	mrs	r3, IPSR
 800e51c:	61bb      	str	r3, [r7, #24]
  return(result);
 800e51e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 800e520:	2b00      	cmp	r3, #0
 800e522:	d16a      	bne.n	800e5fa <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e524:	f3ef 8310 	mrs	r3, PRIMASK
 800e528:	617b      	str	r3, [r7, #20]
  return(result);
 800e52a:	697b      	ldr	r3, [r7, #20]
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d164      	bne.n	800e5fa <osTimerNew+0xf6>
 800e530:	4b34      	ldr	r3, [pc, #208]	; (800e604 <osTimerNew+0x100>)
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	2b02      	cmp	r3, #2
 800e536:	d105      	bne.n	800e544 <osTimerNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e538:	f3ef 8311 	mrs	r3, BASEPRI
 800e53c:	613b      	str	r3, [r7, #16]
  return(result);
 800e53e:	693b      	ldr	r3, [r7, #16]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d15a      	bne.n	800e5fa <osTimerNew+0xf6>
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d057      	beq.n	800e5fa <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800e54a:	2008      	movs	r0, #8
 800e54c:	f000 fd60 	bl	800f010 <pvPortMalloc>
 800e550:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 800e552:	69fb      	ldr	r3, [r7, #28]
 800e554:	2b00      	cmp	r3, #0
 800e556:	d050      	beq.n	800e5fa <osTimerNew+0xf6>
      callb->func = func;
 800e558:	69fb      	ldr	r3, [r7, #28]
 800e55a:	68fa      	ldr	r2, [r7, #12]
 800e55c:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800e55e:	69fb      	ldr	r3, [r7, #28]
 800e560:	687a      	ldr	r2, [r7, #4]
 800e562:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800e564:	7afb      	ldrb	r3, [r7, #11]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d102      	bne.n	800e570 <osTimerNew+0x6c>
        reload = pdFALSE;
 800e56a:	2300      	movs	r3, #0
 800e56c:	627b      	str	r3, [r7, #36]	; 0x24
 800e56e:	e001      	b.n	800e574 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 800e570:	2301      	movs	r3, #1
 800e572:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 800e574:	f04f 33ff 	mov.w	r3, #4294967295
 800e578:	623b      	str	r3, [r7, #32]
      name = NULL;
 800e57a:	2300      	movs	r3, #0
 800e57c:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 800e57e:	683b      	ldr	r3, [r7, #0]
 800e580:	2b00      	cmp	r3, #0
 800e582:	d01c      	beq.n	800e5be <osTimerNew+0xba>
        if (attr->name != NULL) {
 800e584:	683b      	ldr	r3, [r7, #0]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d002      	beq.n	800e592 <osTimerNew+0x8e>
          name = attr->name;
 800e58c:	683b      	ldr	r3, [r7, #0]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800e592:	683b      	ldr	r3, [r7, #0]
 800e594:	689b      	ldr	r3, [r3, #8]
 800e596:	2b00      	cmp	r3, #0
 800e598:	d006      	beq.n	800e5a8 <osTimerNew+0xa4>
 800e59a:	683b      	ldr	r3, [r7, #0]
 800e59c:	68db      	ldr	r3, [r3, #12]
 800e59e:	2b2f      	cmp	r3, #47	; 0x2f
 800e5a0:	d902      	bls.n	800e5a8 <osTimerNew+0xa4>
          mem = 1;
 800e5a2:	2301      	movs	r3, #1
 800e5a4:	623b      	str	r3, [r7, #32]
 800e5a6:	e00c      	b.n	800e5c2 <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e5a8:	683b      	ldr	r3, [r7, #0]
 800e5aa:	689b      	ldr	r3, [r3, #8]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d108      	bne.n	800e5c2 <osTimerNew+0xbe>
 800e5b0:	683b      	ldr	r3, [r7, #0]
 800e5b2:	68db      	ldr	r3, [r3, #12]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d104      	bne.n	800e5c2 <osTimerNew+0xbe>
            mem = 0;
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	623b      	str	r3, [r7, #32]
 800e5bc:	e001      	b.n	800e5c2 <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 800e5be:	2300      	movs	r3, #0
 800e5c0:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 800e5c2:	6a3b      	ldr	r3, [r7, #32]
 800e5c4:	2b01      	cmp	r3, #1
 800e5c6:	d10c      	bne.n	800e5e2 <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800e5c8:	683b      	ldr	r3, [r7, #0]
 800e5ca:	689b      	ldr	r3, [r3, #8]
 800e5cc:	9301      	str	r3, [sp, #4]
 800e5ce:	4b0e      	ldr	r3, [pc, #56]	; (800e608 <osTimerNew+0x104>)
 800e5d0:	9300      	str	r3, [sp, #0]
 800e5d2:	69fb      	ldr	r3, [r7, #28]
 800e5d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e5d6:	2101      	movs	r1, #1
 800e5d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e5da:	f003 fd82 	bl	80120e2 <xTimerCreateStatic>
 800e5de:	62b8      	str	r0, [r7, #40]	; 0x28
 800e5e0:	e00b      	b.n	800e5fa <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 800e5e2:	6a3b      	ldr	r3, [r7, #32]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d108      	bne.n	800e5fa <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800e5e8:	4b07      	ldr	r3, [pc, #28]	; (800e608 <osTimerNew+0x104>)
 800e5ea:	9300      	str	r3, [sp, #0]
 800e5ec:	69fb      	ldr	r3, [r7, #28]
 800e5ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e5f0:	2101      	movs	r1, #1
 800e5f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e5f4:	f003 fd54 	bl	80120a0 <xTimerCreate>
 800e5f8:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800e5fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800e5fc:	4618      	mov	r0, r3
 800e5fe:	3730      	adds	r7, #48	; 0x30
 800e600:	46bd      	mov	sp, r7
 800e602:	bd80      	pop	{r7, pc}
 800e604:	20000b24 	.word	0x20000b24
 800e608:	0800e4d9 	.word	0x0800e4d9

0800e60c <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800e60c:	b580      	push	{r7, lr}
 800e60e:	b08a      	sub	sp, #40	; 0x28
 800e610:	af02      	add	r7, sp, #8
 800e612:	6078      	str	r0, [r7, #4]
 800e614:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e61a:	f3ef 8305 	mrs	r3, IPSR
 800e61e:	617b      	str	r3, [r7, #20]
  return(result);
 800e620:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e622:	2b00      	cmp	r3, #0
 800e624:	d10f      	bne.n	800e646 <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e626:	f3ef 8310 	mrs	r3, PRIMASK
 800e62a:	613b      	str	r3, [r7, #16]
  return(result);
 800e62c:	693b      	ldr	r3, [r7, #16]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d109      	bne.n	800e646 <osTimerStart+0x3a>
 800e632:	4b15      	ldr	r3, [pc, #84]	; (800e688 <osTimerStart+0x7c>)
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	2b02      	cmp	r3, #2
 800e638:	d109      	bne.n	800e64e <osTimerStart+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e63a:	f3ef 8311 	mrs	r3, BASEPRI
 800e63e:	60fb      	str	r3, [r7, #12]
  return(result);
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d003      	beq.n	800e64e <osTimerStart+0x42>
    stat = osErrorISR;
 800e646:	f06f 0305 	mvn.w	r3, #5
 800e64a:	61fb      	str	r3, [r7, #28]
 800e64c:	e017      	b.n	800e67e <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 800e64e:	69bb      	ldr	r3, [r7, #24]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d103      	bne.n	800e65c <osTimerStart+0x50>
    stat = osErrorParameter;
 800e654:	f06f 0303 	mvn.w	r3, #3
 800e658:	61fb      	str	r3, [r7, #28]
 800e65a:	e010      	b.n	800e67e <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800e65c:	2300      	movs	r3, #0
 800e65e:	9300      	str	r3, [sp, #0]
 800e660:	2300      	movs	r3, #0
 800e662:	683a      	ldr	r2, [r7, #0]
 800e664:	2104      	movs	r1, #4
 800e666:	69b8      	ldr	r0, [r7, #24]
 800e668:	f003 fda8 	bl	80121bc <xTimerGenericCommand>
 800e66c:	4603      	mov	r3, r0
 800e66e:	2b01      	cmp	r3, #1
 800e670:	d102      	bne.n	800e678 <osTimerStart+0x6c>
      stat = osOK;
 800e672:	2300      	movs	r3, #0
 800e674:	61fb      	str	r3, [r7, #28]
 800e676:	e002      	b.n	800e67e <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 800e678:	f06f 0302 	mvn.w	r3, #2
 800e67c:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 800e67e:	69fb      	ldr	r3, [r7, #28]
}
 800e680:	4618      	mov	r0, r3
 800e682:	3720      	adds	r7, #32
 800e684:	46bd      	mov	sp, r7
 800e686:	bd80      	pop	{r7, pc}
 800e688:	20000b24 	.word	0x20000b24

0800e68c <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 800e68c:	b580      	push	{r7, lr}
 800e68e:	b08a      	sub	sp, #40	; 0x28
 800e690:	af02      	add	r7, sp, #8
 800e692:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e698:	f3ef 8305 	mrs	r3, IPSR
 800e69c:	617b      	str	r3, [r7, #20]
  return(result);
 800e69e:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d10f      	bne.n	800e6c4 <osTimerStop+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e6a4:	f3ef 8310 	mrs	r3, PRIMASK
 800e6a8:	613b      	str	r3, [r7, #16]
  return(result);
 800e6aa:	693b      	ldr	r3, [r7, #16]
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d109      	bne.n	800e6c4 <osTimerStop+0x38>
 800e6b0:	4b1a      	ldr	r3, [pc, #104]	; (800e71c <osTimerStop+0x90>)
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	2b02      	cmp	r3, #2
 800e6b6:	d109      	bne.n	800e6cc <osTimerStop+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e6b8:	f3ef 8311 	mrs	r3, BASEPRI
 800e6bc:	60fb      	str	r3, [r7, #12]
  return(result);
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d003      	beq.n	800e6cc <osTimerStop+0x40>
    stat = osErrorISR;
 800e6c4:	f06f 0305 	mvn.w	r3, #5
 800e6c8:	61fb      	str	r3, [r7, #28]
 800e6ca:	e021      	b.n	800e710 <osTimerStop+0x84>
  }
  else if (hTimer == NULL) {
 800e6cc:	69bb      	ldr	r3, [r7, #24]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d103      	bne.n	800e6da <osTimerStop+0x4e>
    stat = osErrorParameter;
 800e6d2:	f06f 0303 	mvn.w	r3, #3
 800e6d6:	61fb      	str	r3, [r7, #28]
 800e6d8:	e01a      	b.n	800e710 <osTimerStop+0x84>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 800e6da:	69b8      	ldr	r0, [r7, #24]
 800e6dc:	f004 f830 	bl	8012740 <xTimerIsTimerActive>
 800e6e0:	4603      	mov	r3, r0
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d103      	bne.n	800e6ee <osTimerStop+0x62>
      stat = osErrorResource;
 800e6e6:	f06f 0302 	mvn.w	r3, #2
 800e6ea:	61fb      	str	r3, [r7, #28]
 800e6ec:	e010      	b.n	800e710 <osTimerStop+0x84>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	9300      	str	r3, [sp, #0]
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	2200      	movs	r2, #0
 800e6f6:	2103      	movs	r1, #3
 800e6f8:	69b8      	ldr	r0, [r7, #24]
 800e6fa:	f003 fd5f 	bl	80121bc <xTimerGenericCommand>
 800e6fe:	4603      	mov	r3, r0
 800e700:	2b01      	cmp	r3, #1
 800e702:	d102      	bne.n	800e70a <osTimerStop+0x7e>
        stat = osOK;
 800e704:	2300      	movs	r3, #0
 800e706:	61fb      	str	r3, [r7, #28]
 800e708:	e002      	b.n	800e710 <osTimerStop+0x84>
      } else {
        stat = osError;
 800e70a:	f04f 33ff 	mov.w	r3, #4294967295
 800e70e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800e710:	69fb      	ldr	r3, [r7, #28]
}
 800e712:	4618      	mov	r0, r3
 800e714:	3720      	adds	r7, #32
 800e716:	46bd      	mov	sp, r7
 800e718:	bd80      	pop	{r7, pc}
 800e71a:	bf00      	nop
 800e71c:	20000b24 	.word	0x20000b24

0800e720 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800e720:	b580      	push	{r7, lr}
 800e722:	b08a      	sub	sp, #40	; 0x28
 800e724:	af00      	add	r7, sp, #0
 800e726:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800e728:	2300      	movs	r3, #0
 800e72a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e72c:	f3ef 8305 	mrs	r3, IPSR
 800e730:	613b      	str	r3, [r7, #16]
  return(result);
 800e732:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800e734:	2b00      	cmp	r3, #0
 800e736:	f040 8085 	bne.w	800e844 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e73a:	f3ef 8310 	mrs	r3, PRIMASK
 800e73e:	60fb      	str	r3, [r7, #12]
  return(result);
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d17e      	bne.n	800e844 <osMutexNew+0x124>
 800e746:	4b42      	ldr	r3, [pc, #264]	; (800e850 <osMutexNew+0x130>)
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	2b02      	cmp	r3, #2
 800e74c:	d105      	bne.n	800e75a <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e74e:	f3ef 8311 	mrs	r3, BASEPRI
 800e752:	60bb      	str	r3, [r7, #8]
  return(result);
 800e754:	68bb      	ldr	r3, [r7, #8]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d174      	bne.n	800e844 <osMutexNew+0x124>
    if (attr != NULL) {
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d003      	beq.n	800e768 <osMutexNew+0x48>
      type = attr->attr_bits;
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	685b      	ldr	r3, [r3, #4]
 800e764:	623b      	str	r3, [r7, #32]
 800e766:	e001      	b.n	800e76c <osMutexNew+0x4c>
    } else {
      type = 0U;
 800e768:	2300      	movs	r3, #0
 800e76a:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800e76c:	6a3b      	ldr	r3, [r7, #32]
 800e76e:	f003 0301 	and.w	r3, r3, #1
 800e772:	2b00      	cmp	r3, #0
 800e774:	d002      	beq.n	800e77c <osMutexNew+0x5c>
      rmtx = 1U;
 800e776:	2301      	movs	r3, #1
 800e778:	61fb      	str	r3, [r7, #28]
 800e77a:	e001      	b.n	800e780 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800e77c:	2300      	movs	r3, #0
 800e77e:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800e780:	6a3b      	ldr	r3, [r7, #32]
 800e782:	f003 0308 	and.w	r3, r3, #8
 800e786:	2b00      	cmp	r3, #0
 800e788:	d15c      	bne.n	800e844 <osMutexNew+0x124>
      mem = -1;
 800e78a:	f04f 33ff 	mov.w	r3, #4294967295
 800e78e:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	2b00      	cmp	r3, #0
 800e794:	d015      	beq.n	800e7c2 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	689b      	ldr	r3, [r3, #8]
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d006      	beq.n	800e7ac <osMutexNew+0x8c>
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	68db      	ldr	r3, [r3, #12]
 800e7a2:	2b4f      	cmp	r3, #79	; 0x4f
 800e7a4:	d902      	bls.n	800e7ac <osMutexNew+0x8c>
          mem = 1;
 800e7a6:	2301      	movs	r3, #1
 800e7a8:	61bb      	str	r3, [r7, #24]
 800e7aa:	e00c      	b.n	800e7c6 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	689b      	ldr	r3, [r3, #8]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d108      	bne.n	800e7c6 <osMutexNew+0xa6>
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	68db      	ldr	r3, [r3, #12]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d104      	bne.n	800e7c6 <osMutexNew+0xa6>
            mem = 0;
 800e7bc:	2300      	movs	r3, #0
 800e7be:	61bb      	str	r3, [r7, #24]
 800e7c0:	e001      	b.n	800e7c6 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800e7c6:	69bb      	ldr	r3, [r7, #24]
 800e7c8:	2b01      	cmp	r3, #1
 800e7ca:	d112      	bne.n	800e7f2 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800e7cc:	69fb      	ldr	r3, [r7, #28]
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d007      	beq.n	800e7e2 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	689b      	ldr	r3, [r3, #8]
 800e7d6:	4619      	mov	r1, r3
 800e7d8:	2004      	movs	r0, #4
 800e7da:	f001 fa31 	bl	800fc40 <xQueueCreateMutexStatic>
 800e7de:	6278      	str	r0, [r7, #36]	; 0x24
 800e7e0:	e016      	b.n	800e810 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	689b      	ldr	r3, [r3, #8]
 800e7e6:	4619      	mov	r1, r3
 800e7e8:	2001      	movs	r0, #1
 800e7ea:	f001 fa29 	bl	800fc40 <xQueueCreateMutexStatic>
 800e7ee:	6278      	str	r0, [r7, #36]	; 0x24
 800e7f0:	e00e      	b.n	800e810 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800e7f2:	69bb      	ldr	r3, [r7, #24]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d10b      	bne.n	800e810 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800e7f8:	69fb      	ldr	r3, [r7, #28]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d004      	beq.n	800e808 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800e7fe:	2004      	movs	r0, #4
 800e800:	f001 fa06 	bl	800fc10 <xQueueCreateMutex>
 800e804:	6278      	str	r0, [r7, #36]	; 0x24
 800e806:	e003      	b.n	800e810 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800e808:	2001      	movs	r0, #1
 800e80a:	f001 fa01 	bl	800fc10 <xQueueCreateMutex>
 800e80e:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800e810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e812:	2b00      	cmp	r3, #0
 800e814:	d00c      	beq.n	800e830 <osMutexNew+0x110>
        if (attr != NULL) {
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d003      	beq.n	800e824 <osMutexNew+0x104>
          name = attr->name;
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	617b      	str	r3, [r7, #20]
 800e822:	e001      	b.n	800e828 <osMutexNew+0x108>
        } else {
          name = NULL;
 800e824:	2300      	movs	r3, #0
 800e826:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800e828:	6979      	ldr	r1, [r7, #20]
 800e82a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e82c:	f002 f8b6 	bl	801099c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800e830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e832:	2b00      	cmp	r3, #0
 800e834:	d006      	beq.n	800e844 <osMutexNew+0x124>
 800e836:	69fb      	ldr	r3, [r7, #28]
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d003      	beq.n	800e844 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800e83c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e83e:	f043 0301 	orr.w	r3, r3, #1
 800e842:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800e844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e846:	4618      	mov	r0, r3
 800e848:	3728      	adds	r7, #40	; 0x28
 800e84a:	46bd      	mov	sp, r7
 800e84c:	bd80      	pop	{r7, pc}
 800e84e:	bf00      	nop
 800e850:	20000b24 	.word	0x20000b24

0800e854 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800e854:	b580      	push	{r7, lr}
 800e856:	b088      	sub	sp, #32
 800e858:	af00      	add	r7, sp, #0
 800e85a:	6078      	str	r0, [r7, #4]
 800e85c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	f023 0301 	bic.w	r3, r3, #1
 800e864:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	f003 0301 	and.w	r3, r3, #1
 800e86c:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800e86e:	2300      	movs	r3, #0
 800e870:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e872:	f3ef 8305 	mrs	r3, IPSR
 800e876:	613b      	str	r3, [r7, #16]
  return(result);
 800e878:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d10f      	bne.n	800e89e <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e87e:	f3ef 8310 	mrs	r3, PRIMASK
 800e882:	60fb      	str	r3, [r7, #12]
  return(result);
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d109      	bne.n	800e89e <osMutexAcquire+0x4a>
 800e88a:	4b20      	ldr	r3, [pc, #128]	; (800e90c <osMutexAcquire+0xb8>)
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	2b02      	cmp	r3, #2
 800e890:	d109      	bne.n	800e8a6 <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e892:	f3ef 8311 	mrs	r3, BASEPRI
 800e896:	60bb      	str	r3, [r7, #8]
  return(result);
 800e898:	68bb      	ldr	r3, [r7, #8]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d003      	beq.n	800e8a6 <osMutexAcquire+0x52>
    stat = osErrorISR;
 800e89e:	f06f 0305 	mvn.w	r3, #5
 800e8a2:	61fb      	str	r3, [r7, #28]
 800e8a4:	e02c      	b.n	800e900 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800e8a6:	69bb      	ldr	r3, [r7, #24]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d103      	bne.n	800e8b4 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800e8ac:	f06f 0303 	mvn.w	r3, #3
 800e8b0:	61fb      	str	r3, [r7, #28]
 800e8b2:	e025      	b.n	800e900 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800e8b4:	697b      	ldr	r3, [r7, #20]
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d011      	beq.n	800e8de <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800e8ba:	6839      	ldr	r1, [r7, #0]
 800e8bc:	69b8      	ldr	r0, [r7, #24]
 800e8be:	f001 fa0d 	bl	800fcdc <xQueueTakeMutexRecursive>
 800e8c2:	4603      	mov	r3, r0
 800e8c4:	2b01      	cmp	r3, #1
 800e8c6:	d01b      	beq.n	800e900 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800e8c8:	683b      	ldr	r3, [r7, #0]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d003      	beq.n	800e8d6 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800e8ce:	f06f 0301 	mvn.w	r3, #1
 800e8d2:	61fb      	str	r3, [r7, #28]
 800e8d4:	e014      	b.n	800e900 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800e8d6:	f06f 0302 	mvn.w	r3, #2
 800e8da:	61fb      	str	r3, [r7, #28]
 800e8dc:	e010      	b.n	800e900 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800e8de:	6839      	ldr	r1, [r7, #0]
 800e8e0:	69b8      	ldr	r0, [r7, #24]
 800e8e2:	f001 fd8b 	bl	80103fc <xQueueSemaphoreTake>
 800e8e6:	4603      	mov	r3, r0
 800e8e8:	2b01      	cmp	r3, #1
 800e8ea:	d009      	beq.n	800e900 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800e8ec:	683b      	ldr	r3, [r7, #0]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d003      	beq.n	800e8fa <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800e8f2:	f06f 0301 	mvn.w	r3, #1
 800e8f6:	61fb      	str	r3, [r7, #28]
 800e8f8:	e002      	b.n	800e900 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800e8fa:	f06f 0302 	mvn.w	r3, #2
 800e8fe:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800e900:	69fb      	ldr	r3, [r7, #28]
}
 800e902:	4618      	mov	r0, r3
 800e904:	3720      	adds	r7, #32
 800e906:	46bd      	mov	sp, r7
 800e908:	bd80      	pop	{r7, pc}
 800e90a:	bf00      	nop
 800e90c:	20000b24 	.word	0x20000b24

0800e910 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800e910:	b580      	push	{r7, lr}
 800e912:	b088      	sub	sp, #32
 800e914:	af00      	add	r7, sp, #0
 800e916:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	f023 0301 	bic.w	r3, r3, #1
 800e91e:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	f003 0301 	and.w	r3, r3, #1
 800e926:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800e928:	2300      	movs	r3, #0
 800e92a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e92c:	f3ef 8305 	mrs	r3, IPSR
 800e930:	613b      	str	r3, [r7, #16]
  return(result);
 800e932:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800e934:	2b00      	cmp	r3, #0
 800e936:	d10f      	bne.n	800e958 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e938:	f3ef 8310 	mrs	r3, PRIMASK
 800e93c:	60fb      	str	r3, [r7, #12]
  return(result);
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d109      	bne.n	800e958 <osMutexRelease+0x48>
 800e944:	4b19      	ldr	r3, [pc, #100]	; (800e9ac <osMutexRelease+0x9c>)
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	2b02      	cmp	r3, #2
 800e94a:	d109      	bne.n	800e960 <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e94c:	f3ef 8311 	mrs	r3, BASEPRI
 800e950:	60bb      	str	r3, [r7, #8]
  return(result);
 800e952:	68bb      	ldr	r3, [r7, #8]
 800e954:	2b00      	cmp	r3, #0
 800e956:	d003      	beq.n	800e960 <osMutexRelease+0x50>
    stat = osErrorISR;
 800e958:	f06f 0305 	mvn.w	r3, #5
 800e95c:	61fb      	str	r3, [r7, #28]
 800e95e:	e01f      	b.n	800e9a0 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800e960:	69bb      	ldr	r3, [r7, #24]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d103      	bne.n	800e96e <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800e966:	f06f 0303 	mvn.w	r3, #3
 800e96a:	61fb      	str	r3, [r7, #28]
 800e96c:	e018      	b.n	800e9a0 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800e96e:	697b      	ldr	r3, [r7, #20]
 800e970:	2b00      	cmp	r3, #0
 800e972:	d009      	beq.n	800e988 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800e974:	69b8      	ldr	r0, [r7, #24]
 800e976:	f001 f97e 	bl	800fc76 <xQueueGiveMutexRecursive>
 800e97a:	4603      	mov	r3, r0
 800e97c:	2b01      	cmp	r3, #1
 800e97e:	d00f      	beq.n	800e9a0 <osMutexRelease+0x90>
        stat = osErrorResource;
 800e980:	f06f 0302 	mvn.w	r3, #2
 800e984:	61fb      	str	r3, [r7, #28]
 800e986:	e00b      	b.n	800e9a0 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800e988:	2300      	movs	r3, #0
 800e98a:	2200      	movs	r2, #0
 800e98c:	2100      	movs	r1, #0
 800e98e:	69b8      	ldr	r0, [r7, #24]
 800e990:	f001 fa40 	bl	800fe14 <xQueueGenericSend>
 800e994:	4603      	mov	r3, r0
 800e996:	2b01      	cmp	r3, #1
 800e998:	d002      	beq.n	800e9a0 <osMutexRelease+0x90>
        stat = osErrorResource;
 800e99a:	f06f 0302 	mvn.w	r3, #2
 800e99e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800e9a0:	69fb      	ldr	r3, [r7, #28]
}
 800e9a2:	4618      	mov	r0, r3
 800e9a4:	3720      	adds	r7, #32
 800e9a6:	46bd      	mov	sp, r7
 800e9a8:	bd80      	pop	{r7, pc}
 800e9aa:	bf00      	nop
 800e9ac:	20000b24 	.word	0x20000b24

0800e9b0 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	b08c      	sub	sp, #48	; 0x30
 800e9b4:	af02      	add	r7, sp, #8
 800e9b6:	60f8      	str	r0, [r7, #12]
 800e9b8:	60b9      	str	r1, [r7, #8]
 800e9ba:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800e9bc:	2300      	movs	r3, #0
 800e9be:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e9c0:	f3ef 8305 	mrs	r3, IPSR
 800e9c4:	61bb      	str	r3, [r7, #24]
  return(result);
 800e9c6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	f040 8088 	bne.w	800eade <osSemaphoreNew+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e9ce:	f3ef 8310 	mrs	r3, PRIMASK
 800e9d2:	617b      	str	r3, [r7, #20]
  return(result);
 800e9d4:	697b      	ldr	r3, [r7, #20]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	f040 8081 	bne.w	800eade <osSemaphoreNew+0x12e>
 800e9dc:	4b42      	ldr	r3, [pc, #264]	; (800eae8 <osSemaphoreNew+0x138>)
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	2b02      	cmp	r3, #2
 800e9e2:	d105      	bne.n	800e9f0 <osSemaphoreNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e9e4:	f3ef 8311 	mrs	r3, BASEPRI
 800e9e8:	613b      	str	r3, [r7, #16]
  return(result);
 800e9ea:	693b      	ldr	r3, [r7, #16]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d176      	bne.n	800eade <osSemaphoreNew+0x12e>
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d073      	beq.n	800eade <osSemaphoreNew+0x12e>
 800e9f6:	68ba      	ldr	r2, [r7, #8]
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	429a      	cmp	r2, r3
 800e9fc:	d86f      	bhi.n	800eade <osSemaphoreNew+0x12e>
    mem = -1;
 800e9fe:	f04f 33ff 	mov.w	r3, #4294967295
 800ea02:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d015      	beq.n	800ea36 <osSemaphoreNew+0x86>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	689b      	ldr	r3, [r3, #8]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d006      	beq.n	800ea20 <osSemaphoreNew+0x70>
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	68db      	ldr	r3, [r3, #12]
 800ea16:	2b4f      	cmp	r3, #79	; 0x4f
 800ea18:	d902      	bls.n	800ea20 <osSemaphoreNew+0x70>
        mem = 1;
 800ea1a:	2301      	movs	r3, #1
 800ea1c:	623b      	str	r3, [r7, #32]
 800ea1e:	e00c      	b.n	800ea3a <osSemaphoreNew+0x8a>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	689b      	ldr	r3, [r3, #8]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d108      	bne.n	800ea3a <osSemaphoreNew+0x8a>
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	68db      	ldr	r3, [r3, #12]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d104      	bne.n	800ea3a <osSemaphoreNew+0x8a>
          mem = 0;
 800ea30:	2300      	movs	r3, #0
 800ea32:	623b      	str	r3, [r7, #32]
 800ea34:	e001      	b.n	800ea3a <osSemaphoreNew+0x8a>
        }
      }
    }
    else {
      mem = 0;
 800ea36:	2300      	movs	r3, #0
 800ea38:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800ea3a:	6a3b      	ldr	r3, [r7, #32]
 800ea3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea40:	d04d      	beq.n	800eade <osSemaphoreNew+0x12e>
      if (max_count == 1U) {
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	2b01      	cmp	r3, #1
 800ea46:	d129      	bne.n	800ea9c <osSemaphoreNew+0xec>
        if (mem == 1) {
 800ea48:	6a3b      	ldr	r3, [r7, #32]
 800ea4a:	2b01      	cmp	r3, #1
 800ea4c:	d10b      	bne.n	800ea66 <osSemaphoreNew+0xb6>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	689a      	ldr	r2, [r3, #8]
 800ea52:	2303      	movs	r3, #3
 800ea54:	9300      	str	r3, [sp, #0]
 800ea56:	4613      	mov	r3, r2
 800ea58:	2200      	movs	r2, #0
 800ea5a:	2100      	movs	r1, #0
 800ea5c:	2001      	movs	r0, #1
 800ea5e:	f000 ffeb 	bl	800fa38 <xQueueGenericCreateStatic>
 800ea62:	6278      	str	r0, [r7, #36]	; 0x24
 800ea64:	e005      	b.n	800ea72 <osSemaphoreNew+0xc2>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800ea66:	2203      	movs	r2, #3
 800ea68:	2100      	movs	r1, #0
 800ea6a:	2001      	movs	r0, #1
 800ea6c:	f001 f856 	bl	800fb1c <xQueueGenericCreate>
 800ea70:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800ea72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d022      	beq.n	800eabe <osSemaphoreNew+0x10e>
 800ea78:	68bb      	ldr	r3, [r7, #8]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d01f      	beq.n	800eabe <osSemaphoreNew+0x10e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ea7e:	2300      	movs	r3, #0
 800ea80:	2200      	movs	r2, #0
 800ea82:	2100      	movs	r1, #0
 800ea84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ea86:	f001 f9c5 	bl	800fe14 <xQueueGenericSend>
 800ea8a:	4603      	mov	r3, r0
 800ea8c:	2b01      	cmp	r3, #1
 800ea8e:	d016      	beq.n	800eabe <osSemaphoreNew+0x10e>
            vSemaphoreDelete (hSemaphore);
 800ea90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ea92:	f001 fe38 	bl	8010706 <vQueueDelete>
            hSemaphore = NULL;
 800ea96:	2300      	movs	r3, #0
 800ea98:	627b      	str	r3, [r7, #36]	; 0x24
 800ea9a:	e010      	b.n	800eabe <osSemaphoreNew+0x10e>
          }
        }
      }
      else {
        if (mem == 1) {
 800ea9c:	6a3b      	ldr	r3, [r7, #32]
 800ea9e:	2b01      	cmp	r3, #1
 800eaa0:	d108      	bne.n	800eab4 <osSemaphoreNew+0x104>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	689b      	ldr	r3, [r3, #8]
 800eaa6:	461a      	mov	r2, r3
 800eaa8:	68b9      	ldr	r1, [r7, #8]
 800eaaa:	68f8      	ldr	r0, [r7, #12]
 800eaac:	f001 f94b 	bl	800fd46 <xQueueCreateCountingSemaphoreStatic>
 800eab0:	6278      	str	r0, [r7, #36]	; 0x24
 800eab2:	e004      	b.n	800eabe <osSemaphoreNew+0x10e>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800eab4:	68b9      	ldr	r1, [r7, #8]
 800eab6:	68f8      	ldr	r0, [r7, #12]
 800eab8:	f001 f97a 	bl	800fdb0 <xQueueCreateCountingSemaphore>
 800eabc:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800eabe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d00c      	beq.n	800eade <osSemaphoreNew+0x12e>
        if (attr != NULL) {
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d003      	beq.n	800ead2 <osSemaphoreNew+0x122>
          name = attr->name;
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	61fb      	str	r3, [r7, #28]
 800ead0:	e001      	b.n	800ead6 <osSemaphoreNew+0x126>
        } else {
          name = NULL;
 800ead2:	2300      	movs	r3, #0
 800ead4:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800ead6:	69f9      	ldr	r1, [r7, #28]
 800ead8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eada:	f001 ff5f 	bl	801099c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800eade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800eae0:	4618      	mov	r0, r3
 800eae2:	3728      	adds	r7, #40	; 0x28
 800eae4:	46bd      	mov	sp, r7
 800eae6:	bd80      	pop	{r7, pc}
 800eae8:	20000b24 	.word	0x20000b24

0800eaec <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800eaec:	b580      	push	{r7, lr}
 800eaee:	b088      	sub	sp, #32
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	6078      	str	r0, [r7, #4]
 800eaf4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800eafa:	2300      	movs	r3, #0
 800eafc:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800eafe:	69bb      	ldr	r3, [r7, #24]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d103      	bne.n	800eb0c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800eb04:	f06f 0303 	mvn.w	r3, #3
 800eb08:	61fb      	str	r3, [r7, #28]
 800eb0a:	e04b      	b.n	800eba4 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eb0c:	f3ef 8305 	mrs	r3, IPSR
 800eb10:	617b      	str	r3, [r7, #20]
  return(result);
 800eb12:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d10f      	bne.n	800eb38 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eb18:	f3ef 8310 	mrs	r3, PRIMASK
 800eb1c:	613b      	str	r3, [r7, #16]
  return(result);
 800eb1e:	693b      	ldr	r3, [r7, #16]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d109      	bne.n	800eb38 <osSemaphoreAcquire+0x4c>
 800eb24:	4b22      	ldr	r3, [pc, #136]	; (800ebb0 <osSemaphoreAcquire+0xc4>)
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	2b02      	cmp	r3, #2
 800eb2a:	d128      	bne.n	800eb7e <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800eb2c:	f3ef 8311 	mrs	r3, BASEPRI
 800eb30:	60fb      	str	r3, [r7, #12]
  return(result);
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d022      	beq.n	800eb7e <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800eb38:	683b      	ldr	r3, [r7, #0]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d003      	beq.n	800eb46 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800eb3e:	f06f 0303 	mvn.w	r3, #3
 800eb42:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800eb44:	e02d      	b.n	800eba2 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800eb46:	2300      	movs	r3, #0
 800eb48:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800eb4a:	f107 0308 	add.w	r3, r7, #8
 800eb4e:	461a      	mov	r2, r3
 800eb50:	2100      	movs	r1, #0
 800eb52:	69b8      	ldr	r0, [r7, #24]
 800eb54:	f001 fd5a 	bl	801060c <xQueueReceiveFromISR>
 800eb58:	4603      	mov	r3, r0
 800eb5a:	2b01      	cmp	r3, #1
 800eb5c:	d003      	beq.n	800eb66 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800eb5e:	f06f 0302 	mvn.w	r3, #2
 800eb62:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800eb64:	e01d      	b.n	800eba2 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800eb66:	68bb      	ldr	r3, [r7, #8]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d01a      	beq.n	800eba2 <osSemaphoreAcquire+0xb6>
 800eb6c:	4b11      	ldr	r3, [pc, #68]	; (800ebb4 <osSemaphoreAcquire+0xc8>)
 800eb6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb72:	601a      	str	r2, [r3, #0]
 800eb74:	f3bf 8f4f 	dsb	sy
 800eb78:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800eb7c:	e011      	b.n	800eba2 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800eb7e:	6839      	ldr	r1, [r7, #0]
 800eb80:	69b8      	ldr	r0, [r7, #24]
 800eb82:	f001 fc3b 	bl	80103fc <xQueueSemaphoreTake>
 800eb86:	4603      	mov	r3, r0
 800eb88:	2b01      	cmp	r3, #1
 800eb8a:	d00b      	beq.n	800eba4 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800eb8c:	683b      	ldr	r3, [r7, #0]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d003      	beq.n	800eb9a <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800eb92:	f06f 0301 	mvn.w	r3, #1
 800eb96:	61fb      	str	r3, [r7, #28]
 800eb98:	e004      	b.n	800eba4 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800eb9a:	f06f 0302 	mvn.w	r3, #2
 800eb9e:	61fb      	str	r3, [r7, #28]
 800eba0:	e000      	b.n	800eba4 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800eba2:	bf00      	nop
      }
    }
  }

  return (stat);
 800eba4:	69fb      	ldr	r3, [r7, #28]
}
 800eba6:	4618      	mov	r0, r3
 800eba8:	3720      	adds	r7, #32
 800ebaa:	46bd      	mov	sp, r7
 800ebac:	bd80      	pop	{r7, pc}
 800ebae:	bf00      	nop
 800ebb0:	20000b24 	.word	0x20000b24
 800ebb4:	e000ed04 	.word	0xe000ed04

0800ebb8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800ebb8:	b580      	push	{r7, lr}
 800ebba:	b088      	sub	sp, #32
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800ebc8:	69bb      	ldr	r3, [r7, #24]
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d103      	bne.n	800ebd6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800ebce:	f06f 0303 	mvn.w	r3, #3
 800ebd2:	61fb      	str	r3, [r7, #28]
 800ebd4:	e03e      	b.n	800ec54 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ebd6:	f3ef 8305 	mrs	r3, IPSR
 800ebda:	617b      	str	r3, [r7, #20]
  return(result);
 800ebdc:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d10f      	bne.n	800ec02 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ebe2:	f3ef 8310 	mrs	r3, PRIMASK
 800ebe6:	613b      	str	r3, [r7, #16]
  return(result);
 800ebe8:	693b      	ldr	r3, [r7, #16]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d109      	bne.n	800ec02 <osSemaphoreRelease+0x4a>
 800ebee:	4b1c      	ldr	r3, [pc, #112]	; (800ec60 <osSemaphoreRelease+0xa8>)
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	2b02      	cmp	r3, #2
 800ebf4:	d120      	bne.n	800ec38 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ebf6:	f3ef 8311 	mrs	r3, BASEPRI
 800ebfa:	60fb      	str	r3, [r7, #12]
  return(result);
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d01a      	beq.n	800ec38 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800ec02:	2300      	movs	r3, #0
 800ec04:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800ec06:	f107 0308 	add.w	r3, r7, #8
 800ec0a:	4619      	mov	r1, r3
 800ec0c:	69b8      	ldr	r0, [r7, #24]
 800ec0e:	f001 fa8f 	bl	8010130 <xQueueGiveFromISR>
 800ec12:	4603      	mov	r3, r0
 800ec14:	2b01      	cmp	r3, #1
 800ec16:	d003      	beq.n	800ec20 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800ec18:	f06f 0302 	mvn.w	r3, #2
 800ec1c:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800ec1e:	e018      	b.n	800ec52 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800ec20:	68bb      	ldr	r3, [r7, #8]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d015      	beq.n	800ec52 <osSemaphoreRelease+0x9a>
 800ec26:	4b0f      	ldr	r3, [pc, #60]	; (800ec64 <osSemaphoreRelease+0xac>)
 800ec28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec2c:	601a      	str	r2, [r3, #0]
 800ec2e:	f3bf 8f4f 	dsb	sy
 800ec32:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800ec36:	e00c      	b.n	800ec52 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ec38:	2300      	movs	r3, #0
 800ec3a:	2200      	movs	r2, #0
 800ec3c:	2100      	movs	r1, #0
 800ec3e:	69b8      	ldr	r0, [r7, #24]
 800ec40:	f001 f8e8 	bl	800fe14 <xQueueGenericSend>
 800ec44:	4603      	mov	r3, r0
 800ec46:	2b01      	cmp	r3, #1
 800ec48:	d004      	beq.n	800ec54 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800ec4a:	f06f 0302 	mvn.w	r3, #2
 800ec4e:	61fb      	str	r3, [r7, #28]
 800ec50:	e000      	b.n	800ec54 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800ec52:	bf00      	nop
    }
  }

  return (stat);
 800ec54:	69fb      	ldr	r3, [r7, #28]
}
 800ec56:	4618      	mov	r0, r3
 800ec58:	3720      	adds	r7, #32
 800ec5a:	46bd      	mov	sp, r7
 800ec5c:	bd80      	pop	{r7, pc}
 800ec5e:	bf00      	nop
 800ec60:	20000b24 	.word	0x20000b24
 800ec64:	e000ed04 	.word	0xe000ed04

0800ec68 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	b08c      	sub	sp, #48	; 0x30
 800ec6c:	af02      	add	r7, sp, #8
 800ec6e:	60f8      	str	r0, [r7, #12]
 800ec70:	60b9      	str	r1, [r7, #8]
 800ec72:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800ec74:	2300      	movs	r3, #0
 800ec76:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ec78:	f3ef 8305 	mrs	r3, IPSR
 800ec7c:	61bb      	str	r3, [r7, #24]
  return(result);
 800ec7e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d170      	bne.n	800ed66 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ec84:	f3ef 8310 	mrs	r3, PRIMASK
 800ec88:	617b      	str	r3, [r7, #20]
  return(result);
 800ec8a:	697b      	ldr	r3, [r7, #20]
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d16a      	bne.n	800ed66 <osMessageQueueNew+0xfe>
 800ec90:	4b37      	ldr	r3, [pc, #220]	; (800ed70 <osMessageQueueNew+0x108>)
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	2b02      	cmp	r3, #2
 800ec96:	d105      	bne.n	800eca4 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ec98:	f3ef 8311 	mrs	r3, BASEPRI
 800ec9c:	613b      	str	r3, [r7, #16]
  return(result);
 800ec9e:	693b      	ldr	r3, [r7, #16]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d160      	bne.n	800ed66 <osMessageQueueNew+0xfe>
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d05d      	beq.n	800ed66 <osMessageQueueNew+0xfe>
 800ecaa:	68bb      	ldr	r3, [r7, #8]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d05a      	beq.n	800ed66 <osMessageQueueNew+0xfe>
    mem = -1;
 800ecb0:	f04f 33ff 	mov.w	r3, #4294967295
 800ecb4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d029      	beq.n	800ed10 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	689b      	ldr	r3, [r3, #8]
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d012      	beq.n	800ecea <osMessageQueueNew+0x82>
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	68db      	ldr	r3, [r3, #12]
 800ecc8:	2b4f      	cmp	r3, #79	; 0x4f
 800ecca:	d90e      	bls.n	800ecea <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d00a      	beq.n	800ecea <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	695a      	ldr	r2, [r3, #20]
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	68b9      	ldr	r1, [r7, #8]
 800ecdc:	fb01 f303 	mul.w	r3, r1, r3
 800ece0:	429a      	cmp	r2, r3
 800ece2:	d302      	bcc.n	800ecea <osMessageQueueNew+0x82>
        mem = 1;
 800ece4:	2301      	movs	r3, #1
 800ece6:	623b      	str	r3, [r7, #32]
 800ece8:	e014      	b.n	800ed14 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	689b      	ldr	r3, [r3, #8]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d110      	bne.n	800ed14 <osMessageQueueNew+0xac>
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	68db      	ldr	r3, [r3, #12]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d10c      	bne.n	800ed14 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d108      	bne.n	800ed14 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	695b      	ldr	r3, [r3, #20]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d104      	bne.n	800ed14 <osMessageQueueNew+0xac>
          mem = 0;
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	623b      	str	r3, [r7, #32]
 800ed0e:	e001      	b.n	800ed14 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800ed10:	2300      	movs	r3, #0
 800ed12:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800ed14:	6a3b      	ldr	r3, [r7, #32]
 800ed16:	2b01      	cmp	r3, #1
 800ed18:	d10c      	bne.n	800ed34 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	691a      	ldr	r2, [r3, #16]
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	6899      	ldr	r1, [r3, #8]
 800ed22:	2300      	movs	r3, #0
 800ed24:	9300      	str	r3, [sp, #0]
 800ed26:	460b      	mov	r3, r1
 800ed28:	68b9      	ldr	r1, [r7, #8]
 800ed2a:	68f8      	ldr	r0, [r7, #12]
 800ed2c:	f000 fe84 	bl	800fa38 <xQueueGenericCreateStatic>
 800ed30:	6278      	str	r0, [r7, #36]	; 0x24
 800ed32:	e008      	b.n	800ed46 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 800ed34:	6a3b      	ldr	r3, [r7, #32]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d105      	bne.n	800ed46 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	68b9      	ldr	r1, [r7, #8]
 800ed3e:	68f8      	ldr	r0, [r7, #12]
 800ed40:	f000 feec 	bl	800fb1c <xQueueGenericCreate>
 800ed44:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800ed46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d00c      	beq.n	800ed66 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d003      	beq.n	800ed5a <osMessageQueueNew+0xf2>
        name = attr->name;
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	61fb      	str	r3, [r7, #28]
 800ed58:	e001      	b.n	800ed5e <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800ed5a:	2300      	movs	r3, #0
 800ed5c:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800ed5e:	69f9      	ldr	r1, [r7, #28]
 800ed60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ed62:	f001 fe1b 	bl	801099c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800ed66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ed68:	4618      	mov	r0, r3
 800ed6a:	3728      	adds	r7, #40	; 0x28
 800ed6c:	46bd      	mov	sp, r7
 800ed6e:	bd80      	pop	{r7, pc}
 800ed70:	20000b24 	.word	0x20000b24

0800ed74 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800ed74:	b580      	push	{r7, lr}
 800ed76:	b08a      	sub	sp, #40	; 0x28
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	60f8      	str	r0, [r7, #12]
 800ed7c:	60b9      	str	r1, [r7, #8]
 800ed7e:	603b      	str	r3, [r7, #0]
 800ed80:	4613      	mov	r3, r2
 800ed82:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ed88:	2300      	movs	r3, #0
 800ed8a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ed8c:	f3ef 8305 	mrs	r3, IPSR
 800ed90:	61fb      	str	r3, [r7, #28]
  return(result);
 800ed92:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d10f      	bne.n	800edb8 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ed98:	f3ef 8310 	mrs	r3, PRIMASK
 800ed9c:	61bb      	str	r3, [r7, #24]
  return(result);
 800ed9e:	69bb      	ldr	r3, [r7, #24]
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d109      	bne.n	800edb8 <osMessageQueuePut+0x44>
 800eda4:	4b2b      	ldr	r3, [pc, #172]	; (800ee54 <osMessageQueuePut+0xe0>)
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	2b02      	cmp	r3, #2
 800edaa:	d12e      	bne.n	800ee0a <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800edac:	f3ef 8311 	mrs	r3, BASEPRI
 800edb0:	617b      	str	r3, [r7, #20]
  return(result);
 800edb2:	697b      	ldr	r3, [r7, #20]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d028      	beq.n	800ee0a <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800edb8:	6a3b      	ldr	r3, [r7, #32]
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d005      	beq.n	800edca <osMessageQueuePut+0x56>
 800edbe:	68bb      	ldr	r3, [r7, #8]
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d002      	beq.n	800edca <osMessageQueuePut+0x56>
 800edc4:	683b      	ldr	r3, [r7, #0]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d003      	beq.n	800edd2 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800edca:	f06f 0303 	mvn.w	r3, #3
 800edce:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800edd0:	e039      	b.n	800ee46 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800edd2:	2300      	movs	r3, #0
 800edd4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800edd6:	f107 0210 	add.w	r2, r7, #16
 800edda:	2300      	movs	r3, #0
 800eddc:	68b9      	ldr	r1, [r7, #8]
 800edde:	6a38      	ldr	r0, [r7, #32]
 800ede0:	f001 f912 	bl	8010008 <xQueueGenericSendFromISR>
 800ede4:	4603      	mov	r3, r0
 800ede6:	2b01      	cmp	r3, #1
 800ede8:	d003      	beq.n	800edf2 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800edea:	f06f 0302 	mvn.w	r3, #2
 800edee:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800edf0:	e029      	b.n	800ee46 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800edf2:	693b      	ldr	r3, [r7, #16]
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d026      	beq.n	800ee46 <osMessageQueuePut+0xd2>
 800edf8:	4b17      	ldr	r3, [pc, #92]	; (800ee58 <osMessageQueuePut+0xe4>)
 800edfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800edfe:	601a      	str	r2, [r3, #0]
 800ee00:	f3bf 8f4f 	dsb	sy
 800ee04:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ee08:	e01d      	b.n	800ee46 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ee0a:	6a3b      	ldr	r3, [r7, #32]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d002      	beq.n	800ee16 <osMessageQueuePut+0xa2>
 800ee10:	68bb      	ldr	r3, [r7, #8]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d103      	bne.n	800ee1e <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800ee16:	f06f 0303 	mvn.w	r3, #3
 800ee1a:	627b      	str	r3, [r7, #36]	; 0x24
 800ee1c:	e014      	b.n	800ee48 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ee1e:	2300      	movs	r3, #0
 800ee20:	683a      	ldr	r2, [r7, #0]
 800ee22:	68b9      	ldr	r1, [r7, #8]
 800ee24:	6a38      	ldr	r0, [r7, #32]
 800ee26:	f000 fff5 	bl	800fe14 <xQueueGenericSend>
 800ee2a:	4603      	mov	r3, r0
 800ee2c:	2b01      	cmp	r3, #1
 800ee2e:	d00b      	beq.n	800ee48 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800ee30:	683b      	ldr	r3, [r7, #0]
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d003      	beq.n	800ee3e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800ee36:	f06f 0301 	mvn.w	r3, #1
 800ee3a:	627b      	str	r3, [r7, #36]	; 0x24
 800ee3c:	e004      	b.n	800ee48 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800ee3e:	f06f 0302 	mvn.w	r3, #2
 800ee42:	627b      	str	r3, [r7, #36]	; 0x24
 800ee44:	e000      	b.n	800ee48 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ee46:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800ee48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ee4a:	4618      	mov	r0, r3
 800ee4c:	3728      	adds	r7, #40	; 0x28
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	bd80      	pop	{r7, pc}
 800ee52:	bf00      	nop
 800ee54:	20000b24 	.word	0x20000b24
 800ee58:	e000ed04 	.word	0xe000ed04

0800ee5c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800ee5c:	b580      	push	{r7, lr}
 800ee5e:	b08a      	sub	sp, #40	; 0x28
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	60f8      	str	r0, [r7, #12]
 800ee64:	60b9      	str	r1, [r7, #8]
 800ee66:	607a      	str	r2, [r7, #4]
 800ee68:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ee6e:	2300      	movs	r3, #0
 800ee70:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ee72:	f3ef 8305 	mrs	r3, IPSR
 800ee76:	61fb      	str	r3, [r7, #28]
  return(result);
 800ee78:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d10f      	bne.n	800ee9e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ee7e:	f3ef 8310 	mrs	r3, PRIMASK
 800ee82:	61bb      	str	r3, [r7, #24]
  return(result);
 800ee84:	69bb      	ldr	r3, [r7, #24]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d109      	bne.n	800ee9e <osMessageQueueGet+0x42>
 800ee8a:	4b2b      	ldr	r3, [pc, #172]	; (800ef38 <osMessageQueueGet+0xdc>)
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	2b02      	cmp	r3, #2
 800ee90:	d12e      	bne.n	800eef0 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ee92:	f3ef 8311 	mrs	r3, BASEPRI
 800ee96:	617b      	str	r3, [r7, #20]
  return(result);
 800ee98:	697b      	ldr	r3, [r7, #20]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d028      	beq.n	800eef0 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ee9e:	6a3b      	ldr	r3, [r7, #32]
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d005      	beq.n	800eeb0 <osMessageQueueGet+0x54>
 800eea4:	68bb      	ldr	r3, [r7, #8]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d002      	beq.n	800eeb0 <osMessageQueueGet+0x54>
 800eeaa:	683b      	ldr	r3, [r7, #0]
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d003      	beq.n	800eeb8 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800eeb0:	f06f 0303 	mvn.w	r3, #3
 800eeb4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800eeb6:	e038      	b.n	800ef2a <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800eeb8:	2300      	movs	r3, #0
 800eeba:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800eebc:	f107 0310 	add.w	r3, r7, #16
 800eec0:	461a      	mov	r2, r3
 800eec2:	68b9      	ldr	r1, [r7, #8]
 800eec4:	6a38      	ldr	r0, [r7, #32]
 800eec6:	f001 fba1 	bl	801060c <xQueueReceiveFromISR>
 800eeca:	4603      	mov	r3, r0
 800eecc:	2b01      	cmp	r3, #1
 800eece:	d003      	beq.n	800eed8 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800eed0:	f06f 0302 	mvn.w	r3, #2
 800eed4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800eed6:	e028      	b.n	800ef2a <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800eed8:	693b      	ldr	r3, [r7, #16]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d025      	beq.n	800ef2a <osMessageQueueGet+0xce>
 800eede:	4b17      	ldr	r3, [pc, #92]	; (800ef3c <osMessageQueueGet+0xe0>)
 800eee0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eee4:	601a      	str	r2, [r3, #0]
 800eee6:	f3bf 8f4f 	dsb	sy
 800eeea:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800eeee:	e01c      	b.n	800ef2a <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800eef0:	6a3b      	ldr	r3, [r7, #32]
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d002      	beq.n	800eefc <osMessageQueueGet+0xa0>
 800eef6:	68bb      	ldr	r3, [r7, #8]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d103      	bne.n	800ef04 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800eefc:	f06f 0303 	mvn.w	r3, #3
 800ef00:	627b      	str	r3, [r7, #36]	; 0x24
 800ef02:	e013      	b.n	800ef2c <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ef04:	683a      	ldr	r2, [r7, #0]
 800ef06:	68b9      	ldr	r1, [r7, #8]
 800ef08:	6a38      	ldr	r0, [r7, #32]
 800ef0a:	f001 f99b 	bl	8010244 <xQueueReceive>
 800ef0e:	4603      	mov	r3, r0
 800ef10:	2b01      	cmp	r3, #1
 800ef12:	d00b      	beq.n	800ef2c <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800ef14:	683b      	ldr	r3, [r7, #0]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d003      	beq.n	800ef22 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800ef1a:	f06f 0301 	mvn.w	r3, #1
 800ef1e:	627b      	str	r3, [r7, #36]	; 0x24
 800ef20:	e004      	b.n	800ef2c <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800ef22:	f06f 0302 	mvn.w	r3, #2
 800ef26:	627b      	str	r3, [r7, #36]	; 0x24
 800ef28:	e000      	b.n	800ef2c <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ef2a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800ef2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ef2e:	4618      	mov	r0, r3
 800ef30:	3728      	adds	r7, #40	; 0x28
 800ef32:	46bd      	mov	sp, r7
 800ef34:	bd80      	pop	{r7, pc}
 800ef36:	bf00      	nop
 800ef38:	20000b24 	.word	0x20000b24
 800ef3c:	e000ed04 	.word	0xe000ed04

0800ef40 <osMessageQueueReset>:
  }

  return (space);
}

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 800ef40:	b580      	push	{r7, lr}
 800ef42:	b088      	sub	sp, #32
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ef4c:	f3ef 8305 	mrs	r3, IPSR
 800ef50:	617b      	str	r3, [r7, #20]
  return(result);
 800ef52:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d10f      	bne.n	800ef78 <osMessageQueueReset+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ef58:	f3ef 8310 	mrs	r3, PRIMASK
 800ef5c:	613b      	str	r3, [r7, #16]
  return(result);
 800ef5e:	693b      	ldr	r3, [r7, #16]
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d109      	bne.n	800ef78 <osMessageQueueReset+0x38>
 800ef64:	4b0f      	ldr	r3, [pc, #60]	; (800efa4 <osMessageQueueReset+0x64>)
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	2b02      	cmp	r3, #2
 800ef6a:	d109      	bne.n	800ef80 <osMessageQueueReset+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ef6c:	f3ef 8311 	mrs	r3, BASEPRI
 800ef70:	60fb      	str	r3, [r7, #12]
  return(result);
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d003      	beq.n	800ef80 <osMessageQueueReset+0x40>
    stat = osErrorISR;
 800ef78:	f06f 0305 	mvn.w	r3, #5
 800ef7c:	61fb      	str	r3, [r7, #28]
 800ef7e:	e00c      	b.n	800ef9a <osMessageQueueReset+0x5a>
  }
  else if (hQueue == NULL) {
 800ef80:	69bb      	ldr	r3, [r7, #24]
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d103      	bne.n	800ef8e <osMessageQueueReset+0x4e>
    stat = osErrorParameter;
 800ef86:	f06f 0303 	mvn.w	r3, #3
 800ef8a:	61fb      	str	r3, [r7, #28]
 800ef8c:	e005      	b.n	800ef9a <osMessageQueueReset+0x5a>
  }
  else {
    stat = osOK;
 800ef8e:	2300      	movs	r3, #0
 800ef90:	61fb      	str	r3, [r7, #28]
    (void)xQueueReset (hQueue);
 800ef92:	2100      	movs	r1, #0
 800ef94:	69b8      	ldr	r0, [r7, #24]
 800ef96:	f000 fce7 	bl	800f968 <xQueueGenericReset>
  }

  return (stat);
 800ef9a:	69fb      	ldr	r3, [r7, #28]
}
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	3720      	adds	r7, #32
 800efa0:	46bd      	mov	sp, r7
 800efa2:	bd80      	pop	{r7, pc}
 800efa4:	20000b24 	.word	0x20000b24

0800efa8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800efa8:	b480      	push	{r7}
 800efaa:	b085      	sub	sp, #20
 800efac:	af00      	add	r7, sp, #0
 800efae:	60f8      	str	r0, [r7, #12]
 800efb0:	60b9      	str	r1, [r7, #8]
 800efb2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	4a07      	ldr	r2, [pc, #28]	; (800efd4 <vApplicationGetIdleTaskMemory+0x2c>)
 800efb8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800efba:	68bb      	ldr	r3, [r7, #8]
 800efbc:	4a06      	ldr	r2, [pc, #24]	; (800efd8 <vApplicationGetIdleTaskMemory+0x30>)
 800efbe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800efc6:	601a      	str	r2, [r3, #0]
}
 800efc8:	bf00      	nop
 800efca:	3714      	adds	r7, #20
 800efcc:	46bd      	mov	sp, r7
 800efce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd2:	4770      	bx	lr
 800efd4:	20000b28 	.word	0x20000b28
 800efd8:	20000b8c 	.word	0x20000b8c

0800efdc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800efdc:	b480      	push	{r7}
 800efde:	b085      	sub	sp, #20
 800efe0:	af00      	add	r7, sp, #0
 800efe2:	60f8      	str	r0, [r7, #12]
 800efe4:	60b9      	str	r1, [r7, #8]
 800efe6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	4a07      	ldr	r2, [pc, #28]	; (800f008 <vApplicationGetTimerTaskMemory+0x2c>)
 800efec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800efee:	68bb      	ldr	r3, [r7, #8]
 800eff0:	4a06      	ldr	r2, [pc, #24]	; (800f00c <vApplicationGetTimerTaskMemory+0x30>)
 800eff2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800effa:	601a      	str	r2, [r3, #0]
}
 800effc:	bf00      	nop
 800effe:	3714      	adds	r7, #20
 800f000:	46bd      	mov	sp, r7
 800f002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f006:	4770      	bx	lr
 800f008:	2000138c 	.word	0x2000138c
 800f00c:	200013f0 	.word	0x200013f0

0800f010 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f010:	b580      	push	{r7, lr}
 800f012:	b08a      	sub	sp, #40	; 0x28
 800f014:	af00      	add	r7, sp, #0
 800f016:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f018:	2300      	movs	r3, #0
 800f01a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f01c:	f001 ff78 	bl	8010f10 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f020:	4b59      	ldr	r3, [pc, #356]	; (800f188 <pvPortMalloc+0x178>)
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	2b00      	cmp	r3, #0
 800f026:	d101      	bne.n	800f02c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f028:	f000 f910 	bl	800f24c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f02c:	4b57      	ldr	r3, [pc, #348]	; (800f18c <pvPortMalloc+0x17c>)
 800f02e:	681a      	ldr	r2, [r3, #0]
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	4013      	ands	r3, r2
 800f034:	2b00      	cmp	r3, #0
 800f036:	f040 808c 	bne.w	800f152 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d01c      	beq.n	800f07a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800f040:	2208      	movs	r2, #8
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	4413      	add	r3, r2
 800f046:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	f003 0307 	and.w	r3, r3, #7
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d013      	beq.n	800f07a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	f023 0307 	bic.w	r3, r3, #7
 800f058:	3308      	adds	r3, #8
 800f05a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	f003 0307 	and.w	r3, r3, #7
 800f062:	2b00      	cmp	r3, #0
 800f064:	d009      	beq.n	800f07a <pvPortMalloc+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f06a:	f383 8811 	msr	BASEPRI, r3
 800f06e:	f3bf 8f6f 	isb	sy
 800f072:	f3bf 8f4f 	dsb	sy
 800f076:	617b      	str	r3, [r7, #20]
 800f078:	e7fe      	b.n	800f078 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d068      	beq.n	800f152 <pvPortMalloc+0x142>
 800f080:	4b43      	ldr	r3, [pc, #268]	; (800f190 <pvPortMalloc+0x180>)
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	687a      	ldr	r2, [r7, #4]
 800f086:	429a      	cmp	r2, r3
 800f088:	d863      	bhi.n	800f152 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f08a:	4b42      	ldr	r3, [pc, #264]	; (800f194 <pvPortMalloc+0x184>)
 800f08c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f08e:	4b41      	ldr	r3, [pc, #260]	; (800f194 <pvPortMalloc+0x184>)
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f094:	e004      	b.n	800f0a0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800f096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f098:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0a2:	685b      	ldr	r3, [r3, #4]
 800f0a4:	687a      	ldr	r2, [r7, #4]
 800f0a6:	429a      	cmp	r2, r3
 800f0a8:	d903      	bls.n	800f0b2 <pvPortMalloc+0xa2>
 800f0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d1f1      	bne.n	800f096 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f0b2:	4b35      	ldr	r3, [pc, #212]	; (800f188 <pvPortMalloc+0x178>)
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f0b8:	429a      	cmp	r2, r3
 800f0ba:	d04a      	beq.n	800f152 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f0bc:	6a3b      	ldr	r3, [r7, #32]
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	2208      	movs	r2, #8
 800f0c2:	4413      	add	r3, r2
 800f0c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f0c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0c8:	681a      	ldr	r2, [r3, #0]
 800f0ca:	6a3b      	ldr	r3, [r7, #32]
 800f0cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f0ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0d0:	685a      	ldr	r2, [r3, #4]
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	1ad2      	subs	r2, r2, r3
 800f0d6:	2308      	movs	r3, #8
 800f0d8:	005b      	lsls	r3, r3, #1
 800f0da:	429a      	cmp	r2, r3
 800f0dc:	d91e      	bls.n	800f11c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f0de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	4413      	add	r3, r2
 800f0e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f0e6:	69bb      	ldr	r3, [r7, #24]
 800f0e8:	f003 0307 	and.w	r3, r3, #7
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d009      	beq.n	800f104 <pvPortMalloc+0xf4>
 800f0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0f4:	f383 8811 	msr	BASEPRI, r3
 800f0f8:	f3bf 8f6f 	isb	sy
 800f0fc:	f3bf 8f4f 	dsb	sy
 800f100:	613b      	str	r3, [r7, #16]
 800f102:	e7fe      	b.n	800f102 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f106:	685a      	ldr	r2, [r3, #4]
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	1ad2      	subs	r2, r2, r3
 800f10c:	69bb      	ldr	r3, [r7, #24]
 800f10e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f112:	687a      	ldr	r2, [r7, #4]
 800f114:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f116:	69b8      	ldr	r0, [r7, #24]
 800f118:	f000 f8fc 	bl	800f314 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f11c:	4b1c      	ldr	r3, [pc, #112]	; (800f190 <pvPortMalloc+0x180>)
 800f11e:	681a      	ldr	r2, [r3, #0]
 800f120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f122:	685b      	ldr	r3, [r3, #4]
 800f124:	1ad3      	subs	r3, r2, r3
 800f126:	4a1a      	ldr	r2, [pc, #104]	; (800f190 <pvPortMalloc+0x180>)
 800f128:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f12a:	4b19      	ldr	r3, [pc, #100]	; (800f190 <pvPortMalloc+0x180>)
 800f12c:	681a      	ldr	r2, [r3, #0]
 800f12e:	4b1a      	ldr	r3, [pc, #104]	; (800f198 <pvPortMalloc+0x188>)
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	429a      	cmp	r2, r3
 800f134:	d203      	bcs.n	800f13e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f136:	4b16      	ldr	r3, [pc, #88]	; (800f190 <pvPortMalloc+0x180>)
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	4a17      	ldr	r2, [pc, #92]	; (800f198 <pvPortMalloc+0x188>)
 800f13c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f140:	685a      	ldr	r2, [r3, #4]
 800f142:	4b12      	ldr	r3, [pc, #72]	; (800f18c <pvPortMalloc+0x17c>)
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	431a      	orrs	r2, r3
 800f148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f14a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f14e:	2200      	movs	r2, #0
 800f150:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f152:	f001 ff23 	bl	8010f9c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800f156:	69fb      	ldr	r3, [r7, #28]
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d101      	bne.n	800f160 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800f15c:	f7f2 f890 	bl	8001280 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f160:	69fb      	ldr	r3, [r7, #28]
 800f162:	f003 0307 	and.w	r3, r3, #7
 800f166:	2b00      	cmp	r3, #0
 800f168:	d009      	beq.n	800f17e <pvPortMalloc+0x16e>
 800f16a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f16e:	f383 8811 	msr	BASEPRI, r3
 800f172:	f3bf 8f6f 	isb	sy
 800f176:	f3bf 8f4f 	dsb	sy
 800f17a:	60fb      	str	r3, [r7, #12]
 800f17c:	e7fe      	b.n	800f17c <pvPortMalloc+0x16c>
	return pvReturn;
 800f17e:	69fb      	ldr	r3, [r7, #28]
}
 800f180:	4618      	mov	r0, r3
 800f182:	3728      	adds	r7, #40	; 0x28
 800f184:	46bd      	mov	sp, r7
 800f186:	bd80      	pop	{r7, pc}
 800f188:	20026de8 	.word	0x20026de8
 800f18c:	20026df4 	.word	0x20026df4
 800f190:	20026dec 	.word	0x20026dec
 800f194:	20026de0 	.word	0x20026de0
 800f198:	20026df0 	.word	0x20026df0

0800f19c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f19c:	b580      	push	{r7, lr}
 800f19e:	b086      	sub	sp, #24
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d046      	beq.n	800f23c <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f1ae:	2308      	movs	r3, #8
 800f1b0:	425b      	negs	r3, r3
 800f1b2:	697a      	ldr	r2, [r7, #20]
 800f1b4:	4413      	add	r3, r2
 800f1b6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f1b8:	697b      	ldr	r3, [r7, #20]
 800f1ba:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f1bc:	693b      	ldr	r3, [r7, #16]
 800f1be:	685a      	ldr	r2, [r3, #4]
 800f1c0:	4b20      	ldr	r3, [pc, #128]	; (800f244 <vPortFree+0xa8>)
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	4013      	ands	r3, r2
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d109      	bne.n	800f1de <vPortFree+0x42>
 800f1ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1ce:	f383 8811 	msr	BASEPRI, r3
 800f1d2:	f3bf 8f6f 	isb	sy
 800f1d6:	f3bf 8f4f 	dsb	sy
 800f1da:	60fb      	str	r3, [r7, #12]
 800f1dc:	e7fe      	b.n	800f1dc <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f1de:	693b      	ldr	r3, [r7, #16]
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d009      	beq.n	800f1fa <vPortFree+0x5e>
 800f1e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1ea:	f383 8811 	msr	BASEPRI, r3
 800f1ee:	f3bf 8f6f 	isb	sy
 800f1f2:	f3bf 8f4f 	dsb	sy
 800f1f6:	60bb      	str	r3, [r7, #8]
 800f1f8:	e7fe      	b.n	800f1f8 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f1fa:	693b      	ldr	r3, [r7, #16]
 800f1fc:	685a      	ldr	r2, [r3, #4]
 800f1fe:	4b11      	ldr	r3, [pc, #68]	; (800f244 <vPortFree+0xa8>)
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	4013      	ands	r3, r2
 800f204:	2b00      	cmp	r3, #0
 800f206:	d019      	beq.n	800f23c <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f208:	693b      	ldr	r3, [r7, #16]
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d115      	bne.n	800f23c <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f210:	693b      	ldr	r3, [r7, #16]
 800f212:	685a      	ldr	r2, [r3, #4]
 800f214:	4b0b      	ldr	r3, [pc, #44]	; (800f244 <vPortFree+0xa8>)
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	43db      	mvns	r3, r3
 800f21a:	401a      	ands	r2, r3
 800f21c:	693b      	ldr	r3, [r7, #16]
 800f21e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f220:	f001 fe76 	bl	8010f10 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f224:	693b      	ldr	r3, [r7, #16]
 800f226:	685a      	ldr	r2, [r3, #4]
 800f228:	4b07      	ldr	r3, [pc, #28]	; (800f248 <vPortFree+0xac>)
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	4413      	add	r3, r2
 800f22e:	4a06      	ldr	r2, [pc, #24]	; (800f248 <vPortFree+0xac>)
 800f230:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f232:	6938      	ldr	r0, [r7, #16]
 800f234:	f000 f86e 	bl	800f314 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800f238:	f001 feb0 	bl	8010f9c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f23c:	bf00      	nop
 800f23e:	3718      	adds	r7, #24
 800f240:	46bd      	mov	sp, r7
 800f242:	bd80      	pop	{r7, pc}
 800f244:	20026df4 	.word	0x20026df4
 800f248:	20026dec 	.word	0x20026dec

0800f24c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f24c:	b480      	push	{r7}
 800f24e:	b085      	sub	sp, #20
 800f250:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f252:	4b29      	ldr	r3, [pc, #164]	; (800f2f8 <prvHeapInit+0xac>)
 800f254:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f256:	4b29      	ldr	r3, [pc, #164]	; (800f2fc <prvHeapInit+0xb0>)
 800f258:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	f003 0307 	and.w	r3, r3, #7
 800f260:	2b00      	cmp	r3, #0
 800f262:	d00c      	beq.n	800f27e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	3307      	adds	r3, #7
 800f268:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	f023 0307 	bic.w	r3, r3, #7
 800f270:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f272:	68ba      	ldr	r2, [r7, #8]
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	1ad3      	subs	r3, r2, r3
 800f278:	4a20      	ldr	r2, [pc, #128]	; (800f2fc <prvHeapInit+0xb0>)
 800f27a:	4413      	add	r3, r2
 800f27c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f282:	4a1f      	ldr	r2, [pc, #124]	; (800f300 <prvHeapInit+0xb4>)
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f288:	4b1d      	ldr	r3, [pc, #116]	; (800f300 <prvHeapInit+0xb4>)
 800f28a:	2200      	movs	r2, #0
 800f28c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	68ba      	ldr	r2, [r7, #8]
 800f292:	4413      	add	r3, r2
 800f294:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f296:	2208      	movs	r2, #8
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	1a9b      	subs	r3, r3, r2
 800f29c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	f023 0307 	bic.w	r3, r3, #7
 800f2a4:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	4a16      	ldr	r2, [pc, #88]	; (800f304 <prvHeapInit+0xb8>)
 800f2aa:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f2ac:	4b15      	ldr	r3, [pc, #84]	; (800f304 <prvHeapInit+0xb8>)
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	2200      	movs	r2, #0
 800f2b2:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f2b4:	4b13      	ldr	r3, [pc, #76]	; (800f304 <prvHeapInit+0xb8>)
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	2200      	movs	r2, #0
 800f2ba:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f2c0:	683b      	ldr	r3, [r7, #0]
 800f2c2:	68fa      	ldr	r2, [r7, #12]
 800f2c4:	1ad2      	subs	r2, r2, r3
 800f2c6:	683b      	ldr	r3, [r7, #0]
 800f2c8:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f2ca:	4b0e      	ldr	r3, [pc, #56]	; (800f304 <prvHeapInit+0xb8>)
 800f2cc:	681a      	ldr	r2, [r3, #0]
 800f2ce:	683b      	ldr	r3, [r7, #0]
 800f2d0:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f2d2:	683b      	ldr	r3, [r7, #0]
 800f2d4:	685b      	ldr	r3, [r3, #4]
 800f2d6:	4a0c      	ldr	r2, [pc, #48]	; (800f308 <prvHeapInit+0xbc>)
 800f2d8:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f2da:	683b      	ldr	r3, [r7, #0]
 800f2dc:	685b      	ldr	r3, [r3, #4]
 800f2de:	4a0b      	ldr	r2, [pc, #44]	; (800f30c <prvHeapInit+0xc0>)
 800f2e0:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f2e2:	4b0b      	ldr	r3, [pc, #44]	; (800f310 <prvHeapInit+0xc4>)
 800f2e4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f2e8:	601a      	str	r2, [r3, #0]
}
 800f2ea:	bf00      	nop
 800f2ec:	3714      	adds	r7, #20
 800f2ee:	46bd      	mov	sp, r7
 800f2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f4:	4770      	bx	lr
 800f2f6:	bf00      	nop
 800f2f8:	000249f0 	.word	0x000249f0
 800f2fc:	200023f0 	.word	0x200023f0
 800f300:	20026de0 	.word	0x20026de0
 800f304:	20026de8 	.word	0x20026de8
 800f308:	20026df0 	.word	0x20026df0
 800f30c:	20026dec 	.word	0x20026dec
 800f310:	20026df4 	.word	0x20026df4

0800f314 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f314:	b480      	push	{r7}
 800f316:	b085      	sub	sp, #20
 800f318:	af00      	add	r7, sp, #0
 800f31a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f31c:	4b28      	ldr	r3, [pc, #160]	; (800f3c0 <prvInsertBlockIntoFreeList+0xac>)
 800f31e:	60fb      	str	r3, [r7, #12]
 800f320:	e002      	b.n	800f328 <prvInsertBlockIntoFreeList+0x14>
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	60fb      	str	r3, [r7, #12]
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	687a      	ldr	r2, [r7, #4]
 800f32e:	429a      	cmp	r2, r3
 800f330:	d8f7      	bhi.n	800f322 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	685b      	ldr	r3, [r3, #4]
 800f33a:	68ba      	ldr	r2, [r7, #8]
 800f33c:	4413      	add	r3, r2
 800f33e:	687a      	ldr	r2, [r7, #4]
 800f340:	429a      	cmp	r2, r3
 800f342:	d108      	bne.n	800f356 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	685a      	ldr	r2, [r3, #4]
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	685b      	ldr	r3, [r3, #4]
 800f34c:	441a      	add	r2, r3
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	685b      	ldr	r3, [r3, #4]
 800f35e:	68ba      	ldr	r2, [r7, #8]
 800f360:	441a      	add	r2, r3
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	429a      	cmp	r2, r3
 800f368:	d118      	bne.n	800f39c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	681a      	ldr	r2, [r3, #0]
 800f36e:	4b15      	ldr	r3, [pc, #84]	; (800f3c4 <prvInsertBlockIntoFreeList+0xb0>)
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	429a      	cmp	r2, r3
 800f374:	d00d      	beq.n	800f392 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	685a      	ldr	r2, [r3, #4]
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	685b      	ldr	r3, [r3, #4]
 800f380:	441a      	add	r2, r3
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	681a      	ldr	r2, [r3, #0]
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	601a      	str	r2, [r3, #0]
 800f390:	e008      	b.n	800f3a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f392:	4b0c      	ldr	r3, [pc, #48]	; (800f3c4 <prvInsertBlockIntoFreeList+0xb0>)
 800f394:	681a      	ldr	r2, [r3, #0]
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	601a      	str	r2, [r3, #0]
 800f39a:	e003      	b.n	800f3a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	681a      	ldr	r2, [r3, #0]
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f3a4:	68fa      	ldr	r2, [r7, #12]
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	429a      	cmp	r2, r3
 800f3aa:	d002      	beq.n	800f3b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	687a      	ldr	r2, [r7, #4]
 800f3b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f3b2:	bf00      	nop
 800f3b4:	3714      	adds	r7, #20
 800f3b6:	46bd      	mov	sp, r7
 800f3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3bc:	4770      	bx	lr
 800f3be:	bf00      	nop
 800f3c0:	20026de0 	.word	0x20026de0
 800f3c4:	20026de8 	.word	0x20026de8

0800f3c8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f3c8:	b480      	push	{r7}
 800f3ca:	b083      	sub	sp, #12
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	f103 0208 	add.w	r2, r3, #8
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	f04f 32ff 	mov.w	r2, #4294967295
 800f3e0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	f103 0208 	add.w	r2, r3, #8
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	f103 0208 	add.w	r2, r3, #8
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	2200      	movs	r2, #0
 800f3fa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f3fc:	bf00      	nop
 800f3fe:	370c      	adds	r7, #12
 800f400:	46bd      	mov	sp, r7
 800f402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f406:	4770      	bx	lr

0800f408 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f408:	b480      	push	{r7}
 800f40a:	b083      	sub	sp, #12
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	2200      	movs	r2, #0
 800f414:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f416:	bf00      	nop
 800f418:	370c      	adds	r7, #12
 800f41a:	46bd      	mov	sp, r7
 800f41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f420:	4770      	bx	lr

0800f422 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f422:	b480      	push	{r7}
 800f424:	b085      	sub	sp, #20
 800f426:	af00      	add	r7, sp, #0
 800f428:	6078      	str	r0, [r7, #4]
 800f42a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	685b      	ldr	r3, [r3, #4]
 800f430:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f432:	683b      	ldr	r3, [r7, #0]
 800f434:	68fa      	ldr	r2, [r7, #12]
 800f436:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	689a      	ldr	r2, [r3, #8]
 800f43c:	683b      	ldr	r3, [r7, #0]
 800f43e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	689b      	ldr	r3, [r3, #8]
 800f444:	683a      	ldr	r2, [r7, #0]
 800f446:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	683a      	ldr	r2, [r7, #0]
 800f44c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800f44e:	683b      	ldr	r3, [r7, #0]
 800f450:	687a      	ldr	r2, [r7, #4]
 800f452:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	1c5a      	adds	r2, r3, #1
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	601a      	str	r2, [r3, #0]
}
 800f45e:	bf00      	nop
 800f460:	3714      	adds	r7, #20
 800f462:	46bd      	mov	sp, r7
 800f464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f468:	4770      	bx	lr

0800f46a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f46a:	b480      	push	{r7}
 800f46c:	b085      	sub	sp, #20
 800f46e:	af00      	add	r7, sp, #0
 800f470:	6078      	str	r0, [r7, #4]
 800f472:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f474:	683b      	ldr	r3, [r7, #0]
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f47a:	68bb      	ldr	r3, [r7, #8]
 800f47c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f480:	d103      	bne.n	800f48a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	691b      	ldr	r3, [r3, #16]
 800f486:	60fb      	str	r3, [r7, #12]
 800f488:	e00c      	b.n	800f4a4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	3308      	adds	r3, #8
 800f48e:	60fb      	str	r3, [r7, #12]
 800f490:	e002      	b.n	800f498 <vListInsert+0x2e>
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	685b      	ldr	r3, [r3, #4]
 800f496:	60fb      	str	r3, [r7, #12]
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	685b      	ldr	r3, [r3, #4]
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	68ba      	ldr	r2, [r7, #8]
 800f4a0:	429a      	cmp	r2, r3
 800f4a2:	d2f6      	bcs.n	800f492 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	685a      	ldr	r2, [r3, #4]
 800f4a8:	683b      	ldr	r3, [r7, #0]
 800f4aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f4ac:	683b      	ldr	r3, [r7, #0]
 800f4ae:	685b      	ldr	r3, [r3, #4]
 800f4b0:	683a      	ldr	r2, [r7, #0]
 800f4b2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f4b4:	683b      	ldr	r3, [r7, #0]
 800f4b6:	68fa      	ldr	r2, [r7, #12]
 800f4b8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	683a      	ldr	r2, [r7, #0]
 800f4be:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800f4c0:	683b      	ldr	r3, [r7, #0]
 800f4c2:	687a      	ldr	r2, [r7, #4]
 800f4c4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	1c5a      	adds	r2, r3, #1
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	601a      	str	r2, [r3, #0]
}
 800f4d0:	bf00      	nop
 800f4d2:	3714      	adds	r7, #20
 800f4d4:	46bd      	mov	sp, r7
 800f4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4da:	4770      	bx	lr

0800f4dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f4dc:	b480      	push	{r7}
 800f4de:	b085      	sub	sp, #20
 800f4e0:	af00      	add	r7, sp, #0
 800f4e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	691b      	ldr	r3, [r3, #16]
 800f4e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	685b      	ldr	r3, [r3, #4]
 800f4ee:	687a      	ldr	r2, [r7, #4]
 800f4f0:	6892      	ldr	r2, [r2, #8]
 800f4f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	689b      	ldr	r3, [r3, #8]
 800f4f8:	687a      	ldr	r2, [r7, #4]
 800f4fa:	6852      	ldr	r2, [r2, #4]
 800f4fc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	685b      	ldr	r3, [r3, #4]
 800f502:	687a      	ldr	r2, [r7, #4]
 800f504:	429a      	cmp	r2, r3
 800f506:	d103      	bne.n	800f510 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	689a      	ldr	r2, [r3, #8]
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	2200      	movs	r2, #0
 800f514:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	1e5a      	subs	r2, r3, #1
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	681b      	ldr	r3, [r3, #0]
}
 800f524:	4618      	mov	r0, r3
 800f526:	3714      	adds	r7, #20
 800f528:	46bd      	mov	sp, r7
 800f52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f52e:	4770      	bx	lr

0800f530 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f530:	b480      	push	{r7}
 800f532:	b085      	sub	sp, #20
 800f534:	af00      	add	r7, sp, #0
 800f536:	60f8      	str	r0, [r7, #12]
 800f538:	60b9      	str	r1, [r7, #8]
 800f53a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	3b04      	subs	r3, #4
 800f540:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f548:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	3b04      	subs	r3, #4
 800f54e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f550:	68bb      	ldr	r3, [r7, #8]
 800f552:	f023 0201 	bic.w	r2, r3, #1
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	3b04      	subs	r3, #4
 800f55e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f560:	4a0c      	ldr	r2, [pc, #48]	; (800f594 <pxPortInitialiseStack+0x64>)
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	3b14      	subs	r3, #20
 800f56a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f56c:	687a      	ldr	r2, [r7, #4]
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	3b04      	subs	r3, #4
 800f576:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	f06f 0202 	mvn.w	r2, #2
 800f57e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	3b20      	subs	r3, #32
 800f584:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f586:	68fb      	ldr	r3, [r7, #12]
}
 800f588:	4618      	mov	r0, r3
 800f58a:	3714      	adds	r7, #20
 800f58c:	46bd      	mov	sp, r7
 800f58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f592:	4770      	bx	lr
 800f594:	0800f599 	.word	0x0800f599

0800f598 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f598:	b480      	push	{r7}
 800f59a:	b085      	sub	sp, #20
 800f59c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f59e:	2300      	movs	r3, #0
 800f5a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f5a2:	4b11      	ldr	r3, [pc, #68]	; (800f5e8 <prvTaskExitError+0x50>)
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5aa:	d009      	beq.n	800f5c0 <prvTaskExitError+0x28>
 800f5ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5b0:	f383 8811 	msr	BASEPRI, r3
 800f5b4:	f3bf 8f6f 	isb	sy
 800f5b8:	f3bf 8f4f 	dsb	sy
 800f5bc:	60fb      	str	r3, [r7, #12]
 800f5be:	e7fe      	b.n	800f5be <prvTaskExitError+0x26>
 800f5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5c4:	f383 8811 	msr	BASEPRI, r3
 800f5c8:	f3bf 8f6f 	isb	sy
 800f5cc:	f3bf 8f4f 	dsb	sy
 800f5d0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f5d2:	bf00      	nop
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d0fc      	beq.n	800f5d4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f5da:	bf00      	nop
 800f5dc:	3714      	adds	r7, #20
 800f5de:	46bd      	mov	sp, r7
 800f5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5e4:	4770      	bx	lr
 800f5e6:	bf00      	nop
 800f5e8:	20000084 	.word	0x20000084
 800f5ec:	00000000 	.word	0x00000000

0800f5f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f5f0:	4b07      	ldr	r3, [pc, #28]	; (800f610 <pxCurrentTCBConst2>)
 800f5f2:	6819      	ldr	r1, [r3, #0]
 800f5f4:	6808      	ldr	r0, [r1, #0]
 800f5f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5fa:	f380 8809 	msr	PSP, r0
 800f5fe:	f3bf 8f6f 	isb	sy
 800f602:	f04f 0000 	mov.w	r0, #0
 800f606:	f380 8811 	msr	BASEPRI, r0
 800f60a:	4770      	bx	lr
 800f60c:	f3af 8000 	nop.w

0800f610 <pxCurrentTCBConst2>:
 800f610:	20026e00 	.word	0x20026e00
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f614:	bf00      	nop
 800f616:	bf00      	nop

0800f618 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f618:	4808      	ldr	r0, [pc, #32]	; (800f63c <prvPortStartFirstTask+0x24>)
 800f61a:	6800      	ldr	r0, [r0, #0]
 800f61c:	6800      	ldr	r0, [r0, #0]
 800f61e:	f380 8808 	msr	MSP, r0
 800f622:	f04f 0000 	mov.w	r0, #0
 800f626:	f380 8814 	msr	CONTROL, r0
 800f62a:	b662      	cpsie	i
 800f62c:	b661      	cpsie	f
 800f62e:	f3bf 8f4f 	dsb	sy
 800f632:	f3bf 8f6f 	isb	sy
 800f636:	df00      	svc	0
 800f638:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f63a:	bf00      	nop
 800f63c:	e000ed08 	.word	0xe000ed08

0800f640 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f640:	b580      	push	{r7, lr}
 800f642:	b086      	sub	sp, #24
 800f644:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f646:	4b44      	ldr	r3, [pc, #272]	; (800f758 <xPortStartScheduler+0x118>)
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	4a44      	ldr	r2, [pc, #272]	; (800f75c <xPortStartScheduler+0x11c>)
 800f64c:	4293      	cmp	r3, r2
 800f64e:	d109      	bne.n	800f664 <xPortStartScheduler+0x24>
 800f650:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f654:	f383 8811 	msr	BASEPRI, r3
 800f658:	f3bf 8f6f 	isb	sy
 800f65c:	f3bf 8f4f 	dsb	sy
 800f660:	613b      	str	r3, [r7, #16]
 800f662:	e7fe      	b.n	800f662 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f664:	4b3c      	ldr	r3, [pc, #240]	; (800f758 <xPortStartScheduler+0x118>)
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	4a3d      	ldr	r2, [pc, #244]	; (800f760 <xPortStartScheduler+0x120>)
 800f66a:	4293      	cmp	r3, r2
 800f66c:	d109      	bne.n	800f682 <xPortStartScheduler+0x42>
 800f66e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f672:	f383 8811 	msr	BASEPRI, r3
 800f676:	f3bf 8f6f 	isb	sy
 800f67a:	f3bf 8f4f 	dsb	sy
 800f67e:	60fb      	str	r3, [r7, #12]
 800f680:	e7fe      	b.n	800f680 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f682:	4b38      	ldr	r3, [pc, #224]	; (800f764 <xPortStartScheduler+0x124>)
 800f684:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f686:	697b      	ldr	r3, [r7, #20]
 800f688:	781b      	ldrb	r3, [r3, #0]
 800f68a:	b2db      	uxtb	r3, r3
 800f68c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f68e:	697b      	ldr	r3, [r7, #20]
 800f690:	22ff      	movs	r2, #255	; 0xff
 800f692:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f694:	697b      	ldr	r3, [r7, #20]
 800f696:	781b      	ldrb	r3, [r3, #0]
 800f698:	b2db      	uxtb	r3, r3
 800f69a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f69c:	78fb      	ldrb	r3, [r7, #3]
 800f69e:	b2db      	uxtb	r3, r3
 800f6a0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f6a4:	b2da      	uxtb	r2, r3
 800f6a6:	4b30      	ldr	r3, [pc, #192]	; (800f768 <xPortStartScheduler+0x128>)
 800f6a8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f6aa:	4b30      	ldr	r3, [pc, #192]	; (800f76c <xPortStartScheduler+0x12c>)
 800f6ac:	2207      	movs	r2, #7
 800f6ae:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f6b0:	e009      	b.n	800f6c6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800f6b2:	4b2e      	ldr	r3, [pc, #184]	; (800f76c <xPortStartScheduler+0x12c>)
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	3b01      	subs	r3, #1
 800f6b8:	4a2c      	ldr	r2, [pc, #176]	; (800f76c <xPortStartScheduler+0x12c>)
 800f6ba:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f6bc:	78fb      	ldrb	r3, [r7, #3]
 800f6be:	b2db      	uxtb	r3, r3
 800f6c0:	005b      	lsls	r3, r3, #1
 800f6c2:	b2db      	uxtb	r3, r3
 800f6c4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f6c6:	78fb      	ldrb	r3, [r7, #3]
 800f6c8:	b2db      	uxtb	r3, r3
 800f6ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f6ce:	2b80      	cmp	r3, #128	; 0x80
 800f6d0:	d0ef      	beq.n	800f6b2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f6d2:	4b26      	ldr	r3, [pc, #152]	; (800f76c <xPortStartScheduler+0x12c>)
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	f1c3 0307 	rsb	r3, r3, #7
 800f6da:	2b04      	cmp	r3, #4
 800f6dc:	d009      	beq.n	800f6f2 <xPortStartScheduler+0xb2>
 800f6de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6e2:	f383 8811 	msr	BASEPRI, r3
 800f6e6:	f3bf 8f6f 	isb	sy
 800f6ea:	f3bf 8f4f 	dsb	sy
 800f6ee:	60bb      	str	r3, [r7, #8]
 800f6f0:	e7fe      	b.n	800f6f0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f6f2:	4b1e      	ldr	r3, [pc, #120]	; (800f76c <xPortStartScheduler+0x12c>)
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	021b      	lsls	r3, r3, #8
 800f6f8:	4a1c      	ldr	r2, [pc, #112]	; (800f76c <xPortStartScheduler+0x12c>)
 800f6fa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f6fc:	4b1b      	ldr	r3, [pc, #108]	; (800f76c <xPortStartScheduler+0x12c>)
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f704:	4a19      	ldr	r2, [pc, #100]	; (800f76c <xPortStartScheduler+0x12c>)
 800f706:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	b2da      	uxtb	r2, r3
 800f70c:	697b      	ldr	r3, [r7, #20]
 800f70e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f710:	4b17      	ldr	r3, [pc, #92]	; (800f770 <xPortStartScheduler+0x130>)
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	4a16      	ldr	r2, [pc, #88]	; (800f770 <xPortStartScheduler+0x130>)
 800f716:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f71a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f71c:	4b14      	ldr	r3, [pc, #80]	; (800f770 <xPortStartScheduler+0x130>)
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	4a13      	ldr	r2, [pc, #76]	; (800f770 <xPortStartScheduler+0x130>)
 800f722:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f726:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f728:	f7f2 fe3c 	bl	80023a4 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f72c:	4b11      	ldr	r3, [pc, #68]	; (800f774 <xPortStartScheduler+0x134>)
 800f72e:	2200      	movs	r2, #0
 800f730:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f732:	f000 f8d1 	bl	800f8d8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f736:	4b10      	ldr	r3, [pc, #64]	; (800f778 <xPortStartScheduler+0x138>)
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	4a0f      	ldr	r2, [pc, #60]	; (800f778 <xPortStartScheduler+0x138>)
 800f73c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f740:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f742:	f7ff ff69 	bl	800f618 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f746:	f001 fdc1 	bl	80112cc <vTaskSwitchContext>
	prvTaskExitError();
 800f74a:	f7ff ff25 	bl	800f598 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f74e:	2300      	movs	r3, #0
}
 800f750:	4618      	mov	r0, r3
 800f752:	3718      	adds	r7, #24
 800f754:	46bd      	mov	sp, r7
 800f756:	bd80      	pop	{r7, pc}
 800f758:	e000ed00 	.word	0xe000ed00
 800f75c:	410fc271 	.word	0x410fc271
 800f760:	410fc270 	.word	0x410fc270
 800f764:	e000e400 	.word	0xe000e400
 800f768:	20026df8 	.word	0x20026df8
 800f76c:	20026dfc 	.word	0x20026dfc
 800f770:	e000ed20 	.word	0xe000ed20
 800f774:	20000084 	.word	0x20000084
 800f778:	e000ef34 	.word	0xe000ef34

0800f77c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f77c:	b480      	push	{r7}
 800f77e:	b083      	sub	sp, #12
 800f780:	af00      	add	r7, sp, #0
 800f782:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f786:	f383 8811 	msr	BASEPRI, r3
 800f78a:	f3bf 8f6f 	isb	sy
 800f78e:	f3bf 8f4f 	dsb	sy
 800f792:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f794:	4b0e      	ldr	r3, [pc, #56]	; (800f7d0 <vPortEnterCritical+0x54>)
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	3301      	adds	r3, #1
 800f79a:	4a0d      	ldr	r2, [pc, #52]	; (800f7d0 <vPortEnterCritical+0x54>)
 800f79c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f79e:	4b0c      	ldr	r3, [pc, #48]	; (800f7d0 <vPortEnterCritical+0x54>)
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	2b01      	cmp	r3, #1
 800f7a4:	d10e      	bne.n	800f7c4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f7a6:	4b0b      	ldr	r3, [pc, #44]	; (800f7d4 <vPortEnterCritical+0x58>)
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	b2db      	uxtb	r3, r3
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d009      	beq.n	800f7c4 <vPortEnterCritical+0x48>
 800f7b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7b4:	f383 8811 	msr	BASEPRI, r3
 800f7b8:	f3bf 8f6f 	isb	sy
 800f7bc:	f3bf 8f4f 	dsb	sy
 800f7c0:	603b      	str	r3, [r7, #0]
 800f7c2:	e7fe      	b.n	800f7c2 <vPortEnterCritical+0x46>
	}
}
 800f7c4:	bf00      	nop
 800f7c6:	370c      	adds	r7, #12
 800f7c8:	46bd      	mov	sp, r7
 800f7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ce:	4770      	bx	lr
 800f7d0:	20000084 	.word	0x20000084
 800f7d4:	e000ed04 	.word	0xe000ed04

0800f7d8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f7d8:	b480      	push	{r7}
 800f7da:	b083      	sub	sp, #12
 800f7dc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f7de:	4b11      	ldr	r3, [pc, #68]	; (800f824 <vPortExitCritical+0x4c>)
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d109      	bne.n	800f7fa <vPortExitCritical+0x22>
 800f7e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7ea:	f383 8811 	msr	BASEPRI, r3
 800f7ee:	f3bf 8f6f 	isb	sy
 800f7f2:	f3bf 8f4f 	dsb	sy
 800f7f6:	607b      	str	r3, [r7, #4]
 800f7f8:	e7fe      	b.n	800f7f8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800f7fa:	4b0a      	ldr	r3, [pc, #40]	; (800f824 <vPortExitCritical+0x4c>)
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	3b01      	subs	r3, #1
 800f800:	4a08      	ldr	r2, [pc, #32]	; (800f824 <vPortExitCritical+0x4c>)
 800f802:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f804:	4b07      	ldr	r3, [pc, #28]	; (800f824 <vPortExitCritical+0x4c>)
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d104      	bne.n	800f816 <vPortExitCritical+0x3e>
 800f80c:	2300      	movs	r3, #0
 800f80e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f810:	683b      	ldr	r3, [r7, #0]
 800f812:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800f816:	bf00      	nop
 800f818:	370c      	adds	r7, #12
 800f81a:	46bd      	mov	sp, r7
 800f81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f820:	4770      	bx	lr
 800f822:	bf00      	nop
 800f824:	20000084 	.word	0x20000084
	...

0800f830 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f830:	f3ef 8009 	mrs	r0, PSP
 800f834:	f3bf 8f6f 	isb	sy
 800f838:	4b15      	ldr	r3, [pc, #84]	; (800f890 <pxCurrentTCBConst>)
 800f83a:	681a      	ldr	r2, [r3, #0]
 800f83c:	f01e 0f10 	tst.w	lr, #16
 800f840:	bf08      	it	eq
 800f842:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f846:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f84a:	6010      	str	r0, [r2, #0]
 800f84c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f850:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f854:	f380 8811 	msr	BASEPRI, r0
 800f858:	f3bf 8f4f 	dsb	sy
 800f85c:	f3bf 8f6f 	isb	sy
 800f860:	f001 fd34 	bl	80112cc <vTaskSwitchContext>
 800f864:	f04f 0000 	mov.w	r0, #0
 800f868:	f380 8811 	msr	BASEPRI, r0
 800f86c:	bc09      	pop	{r0, r3}
 800f86e:	6819      	ldr	r1, [r3, #0]
 800f870:	6808      	ldr	r0, [r1, #0]
 800f872:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f876:	f01e 0f10 	tst.w	lr, #16
 800f87a:	bf08      	it	eq
 800f87c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f880:	f380 8809 	msr	PSP, r0
 800f884:	f3bf 8f6f 	isb	sy
 800f888:	4770      	bx	lr
 800f88a:	bf00      	nop
 800f88c:	f3af 8000 	nop.w

0800f890 <pxCurrentTCBConst>:
 800f890:	20026e00 	.word	0x20026e00
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f894:	bf00      	nop
 800f896:	bf00      	nop

0800f898 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f898:	b580      	push	{r7, lr}
 800f89a:	b082      	sub	sp, #8
 800f89c:	af00      	add	r7, sp, #0
	__asm volatile
 800f89e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8a2:	f383 8811 	msr	BASEPRI, r3
 800f8a6:	f3bf 8f6f 	isb	sy
 800f8aa:	f3bf 8f4f 	dsb	sy
 800f8ae:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f8b0:	f001 fc46 	bl	8011140 <xTaskIncrementTick>
 800f8b4:	4603      	mov	r3, r0
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d003      	beq.n	800f8c2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f8ba:	4b06      	ldr	r3, [pc, #24]	; (800f8d4 <SysTick_Handler+0x3c>)
 800f8bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f8c0:	601a      	str	r2, [r3, #0]
 800f8c2:	2300      	movs	r3, #0
 800f8c4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f8c6:	683b      	ldr	r3, [r7, #0]
 800f8c8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800f8cc:	bf00      	nop
 800f8ce:	3708      	adds	r7, #8
 800f8d0:	46bd      	mov	sp, r7
 800f8d2:	bd80      	pop	{r7, pc}
 800f8d4:	e000ed04 	.word	0xe000ed04

0800f8d8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f8d8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f8e8 <vPortEnableVFP+0x10>
 800f8dc:	6801      	ldr	r1, [r0, #0]
 800f8de:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f8e2:	6001      	str	r1, [r0, #0]
 800f8e4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f8e6:	bf00      	nop
 800f8e8:	e000ed88 	.word	0xe000ed88

0800f8ec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f8ec:	b480      	push	{r7}
 800f8ee:	b085      	sub	sp, #20
 800f8f0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f8f2:	f3ef 8305 	mrs	r3, IPSR
 800f8f6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	2b0f      	cmp	r3, #15
 800f8fc:	d913      	bls.n	800f926 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f8fe:	4a16      	ldr	r2, [pc, #88]	; (800f958 <vPortValidateInterruptPriority+0x6c>)
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	4413      	add	r3, r2
 800f904:	781b      	ldrb	r3, [r3, #0]
 800f906:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f908:	4b14      	ldr	r3, [pc, #80]	; (800f95c <vPortValidateInterruptPriority+0x70>)
 800f90a:	781b      	ldrb	r3, [r3, #0]
 800f90c:	7afa      	ldrb	r2, [r7, #11]
 800f90e:	429a      	cmp	r2, r3
 800f910:	d209      	bcs.n	800f926 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800f912:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f916:	f383 8811 	msr	BASEPRI, r3
 800f91a:	f3bf 8f6f 	isb	sy
 800f91e:	f3bf 8f4f 	dsb	sy
 800f922:	607b      	str	r3, [r7, #4]
 800f924:	e7fe      	b.n	800f924 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f926:	4b0e      	ldr	r3, [pc, #56]	; (800f960 <vPortValidateInterruptPriority+0x74>)
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f92e:	4b0d      	ldr	r3, [pc, #52]	; (800f964 <vPortValidateInterruptPriority+0x78>)
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	429a      	cmp	r2, r3
 800f934:	d909      	bls.n	800f94a <vPortValidateInterruptPriority+0x5e>
 800f936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f93a:	f383 8811 	msr	BASEPRI, r3
 800f93e:	f3bf 8f6f 	isb	sy
 800f942:	f3bf 8f4f 	dsb	sy
 800f946:	603b      	str	r3, [r7, #0]
 800f948:	e7fe      	b.n	800f948 <vPortValidateInterruptPriority+0x5c>
	}
 800f94a:	bf00      	nop
 800f94c:	3714      	adds	r7, #20
 800f94e:	46bd      	mov	sp, r7
 800f950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f954:	4770      	bx	lr
 800f956:	bf00      	nop
 800f958:	e000e3f0 	.word	0xe000e3f0
 800f95c:	20026df8 	.word	0x20026df8
 800f960:	e000ed0c 	.word	0xe000ed0c
 800f964:	20026dfc 	.word	0x20026dfc

0800f968 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f968:	b580      	push	{r7, lr}
 800f96a:	b084      	sub	sp, #16
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	6078      	str	r0, [r7, #4]
 800f970:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d109      	bne.n	800f990 <xQueueGenericReset+0x28>
 800f97c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f980:	f383 8811 	msr	BASEPRI, r3
 800f984:	f3bf 8f6f 	isb	sy
 800f988:	f3bf 8f4f 	dsb	sy
 800f98c:	60bb      	str	r3, [r7, #8]
 800f98e:	e7fe      	b.n	800f98e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800f990:	f7ff fef4 	bl	800f77c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	681a      	ldr	r2, [r3, #0]
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f99c:	68f9      	ldr	r1, [r7, #12]
 800f99e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f9a0:	fb01 f303 	mul.w	r3, r1, r3
 800f9a4:	441a      	add	r2, r3
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	2200      	movs	r2, #0
 800f9ae:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	681a      	ldr	r2, [r3, #0]
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	681a      	ldr	r2, [r3, #0]
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f9c0:	3b01      	subs	r3, #1
 800f9c2:	68f9      	ldr	r1, [r7, #12]
 800f9c4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f9c6:	fb01 f303 	mul.w	r3, r1, r3
 800f9ca:	441a      	add	r2, r3
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	22ff      	movs	r2, #255	; 0xff
 800f9d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	22ff      	movs	r2, #255	; 0xff
 800f9dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800f9e0:	683b      	ldr	r3, [r7, #0]
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d114      	bne.n	800fa10 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	691b      	ldr	r3, [r3, #16]
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d01a      	beq.n	800fa24 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	3310      	adds	r3, #16
 800f9f2:	4618      	mov	r0, r3
 800f9f4:	f001 fd40 	bl	8011478 <xTaskRemoveFromEventList>
 800f9f8:	4603      	mov	r3, r0
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d012      	beq.n	800fa24 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f9fe:	4b0d      	ldr	r3, [pc, #52]	; (800fa34 <xQueueGenericReset+0xcc>)
 800fa00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa04:	601a      	str	r2, [r3, #0]
 800fa06:	f3bf 8f4f 	dsb	sy
 800fa0a:	f3bf 8f6f 	isb	sy
 800fa0e:	e009      	b.n	800fa24 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	3310      	adds	r3, #16
 800fa14:	4618      	mov	r0, r3
 800fa16:	f7ff fcd7 	bl	800f3c8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	3324      	adds	r3, #36	; 0x24
 800fa1e:	4618      	mov	r0, r3
 800fa20:	f7ff fcd2 	bl	800f3c8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800fa24:	f7ff fed8 	bl	800f7d8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800fa28:	2301      	movs	r3, #1
}
 800fa2a:	4618      	mov	r0, r3
 800fa2c:	3710      	adds	r7, #16
 800fa2e:	46bd      	mov	sp, r7
 800fa30:	bd80      	pop	{r7, pc}
 800fa32:	bf00      	nop
 800fa34:	e000ed04 	.word	0xe000ed04

0800fa38 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800fa38:	b580      	push	{r7, lr}
 800fa3a:	b08e      	sub	sp, #56	; 0x38
 800fa3c:	af02      	add	r7, sp, #8
 800fa3e:	60f8      	str	r0, [r7, #12]
 800fa40:	60b9      	str	r1, [r7, #8]
 800fa42:	607a      	str	r2, [r7, #4]
 800fa44:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d109      	bne.n	800fa60 <xQueueGenericCreateStatic+0x28>
 800fa4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa50:	f383 8811 	msr	BASEPRI, r3
 800fa54:	f3bf 8f6f 	isb	sy
 800fa58:	f3bf 8f4f 	dsb	sy
 800fa5c:	62bb      	str	r3, [r7, #40]	; 0x28
 800fa5e:	e7fe      	b.n	800fa5e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800fa60:	683b      	ldr	r3, [r7, #0]
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d109      	bne.n	800fa7a <xQueueGenericCreateStatic+0x42>
 800fa66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa6a:	f383 8811 	msr	BASEPRI, r3
 800fa6e:	f3bf 8f6f 	isb	sy
 800fa72:	f3bf 8f4f 	dsb	sy
 800fa76:	627b      	str	r3, [r7, #36]	; 0x24
 800fa78:	e7fe      	b.n	800fa78 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d002      	beq.n	800fa86 <xQueueGenericCreateStatic+0x4e>
 800fa80:	68bb      	ldr	r3, [r7, #8]
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d001      	beq.n	800fa8a <xQueueGenericCreateStatic+0x52>
 800fa86:	2301      	movs	r3, #1
 800fa88:	e000      	b.n	800fa8c <xQueueGenericCreateStatic+0x54>
 800fa8a:	2300      	movs	r3, #0
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d109      	bne.n	800faa4 <xQueueGenericCreateStatic+0x6c>
 800fa90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa94:	f383 8811 	msr	BASEPRI, r3
 800fa98:	f3bf 8f6f 	isb	sy
 800fa9c:	f3bf 8f4f 	dsb	sy
 800faa0:	623b      	str	r3, [r7, #32]
 800faa2:	e7fe      	b.n	800faa2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d102      	bne.n	800fab0 <xQueueGenericCreateStatic+0x78>
 800faaa:	68bb      	ldr	r3, [r7, #8]
 800faac:	2b00      	cmp	r3, #0
 800faae:	d101      	bne.n	800fab4 <xQueueGenericCreateStatic+0x7c>
 800fab0:	2301      	movs	r3, #1
 800fab2:	e000      	b.n	800fab6 <xQueueGenericCreateStatic+0x7e>
 800fab4:	2300      	movs	r3, #0
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d109      	bne.n	800face <xQueueGenericCreateStatic+0x96>
 800faba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fabe:	f383 8811 	msr	BASEPRI, r3
 800fac2:	f3bf 8f6f 	isb	sy
 800fac6:	f3bf 8f4f 	dsb	sy
 800faca:	61fb      	str	r3, [r7, #28]
 800facc:	e7fe      	b.n	800facc <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800face:	2350      	movs	r3, #80	; 0x50
 800fad0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800fad2:	697b      	ldr	r3, [r7, #20]
 800fad4:	2b50      	cmp	r3, #80	; 0x50
 800fad6:	d009      	beq.n	800faec <xQueueGenericCreateStatic+0xb4>
 800fad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fadc:	f383 8811 	msr	BASEPRI, r3
 800fae0:	f3bf 8f6f 	isb	sy
 800fae4:	f3bf 8f4f 	dsb	sy
 800fae8:	61bb      	str	r3, [r7, #24]
 800faea:	e7fe      	b.n	800faea <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800faec:	683b      	ldr	r3, [r7, #0]
 800faee:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800faf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d00d      	beq.n	800fb12 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800faf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faf8:	2201      	movs	r2, #1
 800fafa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fafe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800fb02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb04:	9300      	str	r3, [sp, #0]
 800fb06:	4613      	mov	r3, r2
 800fb08:	687a      	ldr	r2, [r7, #4]
 800fb0a:	68b9      	ldr	r1, [r7, #8]
 800fb0c:	68f8      	ldr	r0, [r7, #12]
 800fb0e:	f000 f842 	bl	800fb96 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800fb12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800fb14:	4618      	mov	r0, r3
 800fb16:	3730      	adds	r7, #48	; 0x30
 800fb18:	46bd      	mov	sp, r7
 800fb1a:	bd80      	pop	{r7, pc}

0800fb1c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800fb1c:	b580      	push	{r7, lr}
 800fb1e:	b08a      	sub	sp, #40	; 0x28
 800fb20:	af02      	add	r7, sp, #8
 800fb22:	60f8      	str	r0, [r7, #12]
 800fb24:	60b9      	str	r1, [r7, #8]
 800fb26:	4613      	mov	r3, r2
 800fb28:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d109      	bne.n	800fb44 <xQueueGenericCreate+0x28>
 800fb30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb34:	f383 8811 	msr	BASEPRI, r3
 800fb38:	f3bf 8f6f 	isb	sy
 800fb3c:	f3bf 8f4f 	dsb	sy
 800fb40:	613b      	str	r3, [r7, #16]
 800fb42:	e7fe      	b.n	800fb42 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800fb44:	68bb      	ldr	r3, [r7, #8]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d102      	bne.n	800fb50 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800fb4a:	2300      	movs	r3, #0
 800fb4c:	61fb      	str	r3, [r7, #28]
 800fb4e:	e004      	b.n	800fb5a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	68ba      	ldr	r2, [r7, #8]
 800fb54:	fb02 f303 	mul.w	r3, r2, r3
 800fb58:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800fb5a:	69fb      	ldr	r3, [r7, #28]
 800fb5c:	3350      	adds	r3, #80	; 0x50
 800fb5e:	4618      	mov	r0, r3
 800fb60:	f7ff fa56 	bl	800f010 <pvPortMalloc>
 800fb64:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800fb66:	69bb      	ldr	r3, [r7, #24]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d00f      	beq.n	800fb8c <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800fb6c:	69bb      	ldr	r3, [r7, #24]
 800fb6e:	3350      	adds	r3, #80	; 0x50
 800fb70:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800fb72:	69bb      	ldr	r3, [r7, #24]
 800fb74:	2200      	movs	r2, #0
 800fb76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fb7a:	79fa      	ldrb	r2, [r7, #7]
 800fb7c:	69bb      	ldr	r3, [r7, #24]
 800fb7e:	9300      	str	r3, [sp, #0]
 800fb80:	4613      	mov	r3, r2
 800fb82:	697a      	ldr	r2, [r7, #20]
 800fb84:	68b9      	ldr	r1, [r7, #8]
 800fb86:	68f8      	ldr	r0, [r7, #12]
 800fb88:	f000 f805 	bl	800fb96 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800fb8c:	69bb      	ldr	r3, [r7, #24]
	}
 800fb8e:	4618      	mov	r0, r3
 800fb90:	3720      	adds	r7, #32
 800fb92:	46bd      	mov	sp, r7
 800fb94:	bd80      	pop	{r7, pc}

0800fb96 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800fb96:	b580      	push	{r7, lr}
 800fb98:	b084      	sub	sp, #16
 800fb9a:	af00      	add	r7, sp, #0
 800fb9c:	60f8      	str	r0, [r7, #12]
 800fb9e:	60b9      	str	r1, [r7, #8]
 800fba0:	607a      	str	r2, [r7, #4]
 800fba2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800fba4:	68bb      	ldr	r3, [r7, #8]
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d103      	bne.n	800fbb2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800fbaa:	69bb      	ldr	r3, [r7, #24]
 800fbac:	69ba      	ldr	r2, [r7, #24]
 800fbae:	601a      	str	r2, [r3, #0]
 800fbb0:	e002      	b.n	800fbb8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800fbb2:	69bb      	ldr	r3, [r7, #24]
 800fbb4:	687a      	ldr	r2, [r7, #4]
 800fbb6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800fbb8:	69bb      	ldr	r3, [r7, #24]
 800fbba:	68fa      	ldr	r2, [r7, #12]
 800fbbc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800fbbe:	69bb      	ldr	r3, [r7, #24]
 800fbc0:	68ba      	ldr	r2, [r7, #8]
 800fbc2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800fbc4:	2101      	movs	r1, #1
 800fbc6:	69b8      	ldr	r0, [r7, #24]
 800fbc8:	f7ff fece 	bl	800f968 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800fbcc:	69bb      	ldr	r3, [r7, #24]
 800fbce:	78fa      	ldrb	r2, [r7, #3]
 800fbd0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800fbd4:	bf00      	nop
 800fbd6:	3710      	adds	r7, #16
 800fbd8:	46bd      	mov	sp, r7
 800fbda:	bd80      	pop	{r7, pc}

0800fbdc <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800fbdc:	b580      	push	{r7, lr}
 800fbde:	b082      	sub	sp, #8
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d00e      	beq.n	800fc08 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	2200      	movs	r2, #0
 800fbee:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	2200      	movs	r2, #0
 800fbf4:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	2200      	movs	r2, #0
 800fbfa:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800fbfc:	2300      	movs	r3, #0
 800fbfe:	2200      	movs	r2, #0
 800fc00:	2100      	movs	r1, #0
 800fc02:	6878      	ldr	r0, [r7, #4]
 800fc04:	f000 f906 	bl	800fe14 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800fc08:	bf00      	nop
 800fc0a:	3708      	adds	r7, #8
 800fc0c:	46bd      	mov	sp, r7
 800fc0e:	bd80      	pop	{r7, pc}

0800fc10 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800fc10:	b580      	push	{r7, lr}
 800fc12:	b086      	sub	sp, #24
 800fc14:	af00      	add	r7, sp, #0
 800fc16:	4603      	mov	r3, r0
 800fc18:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800fc1a:	2301      	movs	r3, #1
 800fc1c:	617b      	str	r3, [r7, #20]
 800fc1e:	2300      	movs	r3, #0
 800fc20:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800fc22:	79fb      	ldrb	r3, [r7, #7]
 800fc24:	461a      	mov	r2, r3
 800fc26:	6939      	ldr	r1, [r7, #16]
 800fc28:	6978      	ldr	r0, [r7, #20]
 800fc2a:	f7ff ff77 	bl	800fb1c <xQueueGenericCreate>
 800fc2e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800fc30:	68f8      	ldr	r0, [r7, #12]
 800fc32:	f7ff ffd3 	bl	800fbdc <prvInitialiseMutex>

		return pxNewQueue;
 800fc36:	68fb      	ldr	r3, [r7, #12]
	}
 800fc38:	4618      	mov	r0, r3
 800fc3a:	3718      	adds	r7, #24
 800fc3c:	46bd      	mov	sp, r7
 800fc3e:	bd80      	pop	{r7, pc}

0800fc40 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800fc40:	b580      	push	{r7, lr}
 800fc42:	b088      	sub	sp, #32
 800fc44:	af02      	add	r7, sp, #8
 800fc46:	4603      	mov	r3, r0
 800fc48:	6039      	str	r1, [r7, #0]
 800fc4a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800fc4c:	2301      	movs	r3, #1
 800fc4e:	617b      	str	r3, [r7, #20]
 800fc50:	2300      	movs	r3, #0
 800fc52:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800fc54:	79fb      	ldrb	r3, [r7, #7]
 800fc56:	9300      	str	r3, [sp, #0]
 800fc58:	683b      	ldr	r3, [r7, #0]
 800fc5a:	2200      	movs	r2, #0
 800fc5c:	6939      	ldr	r1, [r7, #16]
 800fc5e:	6978      	ldr	r0, [r7, #20]
 800fc60:	f7ff feea 	bl	800fa38 <xQueueGenericCreateStatic>
 800fc64:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800fc66:	68f8      	ldr	r0, [r7, #12]
 800fc68:	f7ff ffb8 	bl	800fbdc <prvInitialiseMutex>

		return pxNewQueue;
 800fc6c:	68fb      	ldr	r3, [r7, #12]
	}
 800fc6e:	4618      	mov	r0, r3
 800fc70:	3718      	adds	r7, #24
 800fc72:	46bd      	mov	sp, r7
 800fc74:	bd80      	pop	{r7, pc}

0800fc76 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800fc76:	b590      	push	{r4, r7, lr}
 800fc78:	b087      	sub	sp, #28
 800fc7a:	af00      	add	r7, sp, #0
 800fc7c:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800fc82:	693b      	ldr	r3, [r7, #16]
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d109      	bne.n	800fc9c <xQueueGiveMutexRecursive+0x26>
 800fc88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc8c:	f383 8811 	msr	BASEPRI, r3
 800fc90:	f3bf 8f6f 	isb	sy
 800fc94:	f3bf 8f4f 	dsb	sy
 800fc98:	60fb      	str	r3, [r7, #12]
 800fc9a:	e7fe      	b.n	800fc9a <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 800fc9c:	693b      	ldr	r3, [r7, #16]
 800fc9e:	685c      	ldr	r4, [r3, #4]
 800fca0:	f001 fdfc 	bl	801189c <xTaskGetCurrentTaskHandle>
 800fca4:	4603      	mov	r3, r0
 800fca6:	429c      	cmp	r4, r3
 800fca8:	d111      	bne.n	800fcce <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 800fcaa:	693b      	ldr	r3, [r7, #16]
 800fcac:	68db      	ldr	r3, [r3, #12]
 800fcae:	1e5a      	subs	r2, r3, #1
 800fcb0:	693b      	ldr	r3, [r7, #16]
 800fcb2:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800fcb4:	693b      	ldr	r3, [r7, #16]
 800fcb6:	68db      	ldr	r3, [r3, #12]
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d105      	bne.n	800fcc8 <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800fcbc:	2300      	movs	r3, #0
 800fcbe:	2200      	movs	r2, #0
 800fcc0:	2100      	movs	r1, #0
 800fcc2:	6938      	ldr	r0, [r7, #16]
 800fcc4:	f000 f8a6 	bl	800fe14 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800fcc8:	2301      	movs	r3, #1
 800fcca:	617b      	str	r3, [r7, #20]
 800fccc:	e001      	b.n	800fcd2 <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800fcce:	2300      	movs	r3, #0
 800fcd0:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800fcd2:	697b      	ldr	r3, [r7, #20]
	}
 800fcd4:	4618      	mov	r0, r3
 800fcd6:	371c      	adds	r7, #28
 800fcd8:	46bd      	mov	sp, r7
 800fcda:	bd90      	pop	{r4, r7, pc}

0800fcdc <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800fcdc:	b590      	push	{r4, r7, lr}
 800fcde:	b087      	sub	sp, #28
 800fce0:	af00      	add	r7, sp, #0
 800fce2:	6078      	str	r0, [r7, #4]
 800fce4:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800fcea:	693b      	ldr	r3, [r7, #16]
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d109      	bne.n	800fd04 <xQueueTakeMutexRecursive+0x28>
 800fcf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcf4:	f383 8811 	msr	BASEPRI, r3
 800fcf8:	f3bf 8f6f 	isb	sy
 800fcfc:	f3bf 8f4f 	dsb	sy
 800fd00:	60fb      	str	r3, [r7, #12]
 800fd02:	e7fe      	b.n	800fd02 <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800fd04:	693b      	ldr	r3, [r7, #16]
 800fd06:	685c      	ldr	r4, [r3, #4]
 800fd08:	f001 fdc8 	bl	801189c <xTaskGetCurrentTaskHandle>
 800fd0c:	4603      	mov	r3, r0
 800fd0e:	429c      	cmp	r4, r3
 800fd10:	d107      	bne.n	800fd22 <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 800fd12:	693b      	ldr	r3, [r7, #16]
 800fd14:	68db      	ldr	r3, [r3, #12]
 800fd16:	1c5a      	adds	r2, r3, #1
 800fd18:	693b      	ldr	r3, [r7, #16]
 800fd1a:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800fd1c:	2301      	movs	r3, #1
 800fd1e:	617b      	str	r3, [r7, #20]
 800fd20:	e00c      	b.n	800fd3c <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800fd22:	6839      	ldr	r1, [r7, #0]
 800fd24:	6938      	ldr	r0, [r7, #16]
 800fd26:	f000 fb69 	bl	80103fc <xQueueSemaphoreTake>
 800fd2a:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800fd2c:	697b      	ldr	r3, [r7, #20]
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d004      	beq.n	800fd3c <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 800fd32:	693b      	ldr	r3, [r7, #16]
 800fd34:	68db      	ldr	r3, [r3, #12]
 800fd36:	1c5a      	adds	r2, r3, #1
 800fd38:	693b      	ldr	r3, [r7, #16]
 800fd3a:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800fd3c:	697b      	ldr	r3, [r7, #20]
	}
 800fd3e:	4618      	mov	r0, r3
 800fd40:	371c      	adds	r7, #28
 800fd42:	46bd      	mov	sp, r7
 800fd44:	bd90      	pop	{r4, r7, pc}

0800fd46 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800fd46:	b580      	push	{r7, lr}
 800fd48:	b08a      	sub	sp, #40	; 0x28
 800fd4a:	af02      	add	r7, sp, #8
 800fd4c:	60f8      	str	r0, [r7, #12]
 800fd4e:	60b9      	str	r1, [r7, #8]
 800fd50:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d109      	bne.n	800fd6c <xQueueCreateCountingSemaphoreStatic+0x26>
 800fd58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd5c:	f383 8811 	msr	BASEPRI, r3
 800fd60:	f3bf 8f6f 	isb	sy
 800fd64:	f3bf 8f4f 	dsb	sy
 800fd68:	61bb      	str	r3, [r7, #24]
 800fd6a:	e7fe      	b.n	800fd6a <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800fd6c:	68ba      	ldr	r2, [r7, #8]
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	429a      	cmp	r2, r3
 800fd72:	d909      	bls.n	800fd88 <xQueueCreateCountingSemaphoreStatic+0x42>
 800fd74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd78:	f383 8811 	msr	BASEPRI, r3
 800fd7c:	f3bf 8f6f 	isb	sy
 800fd80:	f3bf 8f4f 	dsb	sy
 800fd84:	617b      	str	r3, [r7, #20]
 800fd86:	e7fe      	b.n	800fd86 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800fd88:	2302      	movs	r3, #2
 800fd8a:	9300      	str	r3, [sp, #0]
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	2200      	movs	r2, #0
 800fd90:	2100      	movs	r1, #0
 800fd92:	68f8      	ldr	r0, [r7, #12]
 800fd94:	f7ff fe50 	bl	800fa38 <xQueueGenericCreateStatic>
 800fd98:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800fd9a:	69fb      	ldr	r3, [r7, #28]
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d002      	beq.n	800fda6 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800fda0:	69fb      	ldr	r3, [r7, #28]
 800fda2:	68ba      	ldr	r2, [r7, #8]
 800fda4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800fda6:	69fb      	ldr	r3, [r7, #28]
	}
 800fda8:	4618      	mov	r0, r3
 800fdaa:	3720      	adds	r7, #32
 800fdac:	46bd      	mov	sp, r7
 800fdae:	bd80      	pop	{r7, pc}

0800fdb0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800fdb0:	b580      	push	{r7, lr}
 800fdb2:	b086      	sub	sp, #24
 800fdb4:	af00      	add	r7, sp, #0
 800fdb6:	6078      	str	r0, [r7, #4]
 800fdb8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d109      	bne.n	800fdd4 <xQueueCreateCountingSemaphore+0x24>
 800fdc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdc4:	f383 8811 	msr	BASEPRI, r3
 800fdc8:	f3bf 8f6f 	isb	sy
 800fdcc:	f3bf 8f4f 	dsb	sy
 800fdd0:	613b      	str	r3, [r7, #16]
 800fdd2:	e7fe      	b.n	800fdd2 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 800fdd4:	683a      	ldr	r2, [r7, #0]
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	429a      	cmp	r2, r3
 800fdda:	d909      	bls.n	800fdf0 <xQueueCreateCountingSemaphore+0x40>
 800fddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fde0:	f383 8811 	msr	BASEPRI, r3
 800fde4:	f3bf 8f6f 	isb	sy
 800fde8:	f3bf 8f4f 	dsb	sy
 800fdec:	60fb      	str	r3, [r7, #12]
 800fdee:	e7fe      	b.n	800fdee <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800fdf0:	2202      	movs	r2, #2
 800fdf2:	2100      	movs	r1, #0
 800fdf4:	6878      	ldr	r0, [r7, #4]
 800fdf6:	f7ff fe91 	bl	800fb1c <xQueueGenericCreate>
 800fdfa:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800fdfc:	697b      	ldr	r3, [r7, #20]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d002      	beq.n	800fe08 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800fe02:	697b      	ldr	r3, [r7, #20]
 800fe04:	683a      	ldr	r2, [r7, #0]
 800fe06:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800fe08:	697b      	ldr	r3, [r7, #20]
	}
 800fe0a:	4618      	mov	r0, r3
 800fe0c:	3718      	adds	r7, #24
 800fe0e:	46bd      	mov	sp, r7
 800fe10:	bd80      	pop	{r7, pc}
	...

0800fe14 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800fe14:	b580      	push	{r7, lr}
 800fe16:	b08e      	sub	sp, #56	; 0x38
 800fe18:	af00      	add	r7, sp, #0
 800fe1a:	60f8      	str	r0, [r7, #12]
 800fe1c:	60b9      	str	r1, [r7, #8]
 800fe1e:	607a      	str	r2, [r7, #4]
 800fe20:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800fe22:	2300      	movs	r3, #0
 800fe24:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800fe2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d109      	bne.n	800fe44 <xQueueGenericSend+0x30>
 800fe30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe34:	f383 8811 	msr	BASEPRI, r3
 800fe38:	f3bf 8f6f 	isb	sy
 800fe3c:	f3bf 8f4f 	dsb	sy
 800fe40:	62bb      	str	r3, [r7, #40]	; 0x28
 800fe42:	e7fe      	b.n	800fe42 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fe44:	68bb      	ldr	r3, [r7, #8]
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d103      	bne.n	800fe52 <xQueueGenericSend+0x3e>
 800fe4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d101      	bne.n	800fe56 <xQueueGenericSend+0x42>
 800fe52:	2301      	movs	r3, #1
 800fe54:	e000      	b.n	800fe58 <xQueueGenericSend+0x44>
 800fe56:	2300      	movs	r3, #0
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d109      	bne.n	800fe70 <xQueueGenericSend+0x5c>
 800fe5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe60:	f383 8811 	msr	BASEPRI, r3
 800fe64:	f3bf 8f6f 	isb	sy
 800fe68:	f3bf 8f4f 	dsb	sy
 800fe6c:	627b      	str	r3, [r7, #36]	; 0x24
 800fe6e:	e7fe      	b.n	800fe6e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fe70:	683b      	ldr	r3, [r7, #0]
 800fe72:	2b02      	cmp	r3, #2
 800fe74:	d103      	bne.n	800fe7e <xQueueGenericSend+0x6a>
 800fe76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fe7a:	2b01      	cmp	r3, #1
 800fe7c:	d101      	bne.n	800fe82 <xQueueGenericSend+0x6e>
 800fe7e:	2301      	movs	r3, #1
 800fe80:	e000      	b.n	800fe84 <xQueueGenericSend+0x70>
 800fe82:	2300      	movs	r3, #0
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d109      	bne.n	800fe9c <xQueueGenericSend+0x88>
 800fe88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe8c:	f383 8811 	msr	BASEPRI, r3
 800fe90:	f3bf 8f6f 	isb	sy
 800fe94:	f3bf 8f4f 	dsb	sy
 800fe98:	623b      	str	r3, [r7, #32]
 800fe9a:	e7fe      	b.n	800fe9a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fe9c:	f001 fd0e 	bl	80118bc <xTaskGetSchedulerState>
 800fea0:	4603      	mov	r3, r0
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d102      	bne.n	800feac <xQueueGenericSend+0x98>
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d101      	bne.n	800feb0 <xQueueGenericSend+0x9c>
 800feac:	2301      	movs	r3, #1
 800feae:	e000      	b.n	800feb2 <xQueueGenericSend+0x9e>
 800feb0:	2300      	movs	r3, #0
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d109      	bne.n	800feca <xQueueGenericSend+0xb6>
 800feb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800feba:	f383 8811 	msr	BASEPRI, r3
 800febe:	f3bf 8f6f 	isb	sy
 800fec2:	f3bf 8f4f 	dsb	sy
 800fec6:	61fb      	str	r3, [r7, #28]
 800fec8:	e7fe      	b.n	800fec8 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800feca:	f7ff fc57 	bl	800f77c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fed0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fed6:	429a      	cmp	r2, r3
 800fed8:	d302      	bcc.n	800fee0 <xQueueGenericSend+0xcc>
 800feda:	683b      	ldr	r3, [r7, #0]
 800fedc:	2b02      	cmp	r3, #2
 800fede:	d129      	bne.n	800ff34 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fee0:	683a      	ldr	r2, [r7, #0]
 800fee2:	68b9      	ldr	r1, [r7, #8]
 800fee4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fee6:	f000 fc48 	bl	801077a <prvCopyDataToQueue>
 800feea:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800feec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800feee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d010      	beq.n	800ff16 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fef6:	3324      	adds	r3, #36	; 0x24
 800fef8:	4618      	mov	r0, r3
 800fefa:	f001 fabd 	bl	8011478 <xTaskRemoveFromEventList>
 800fefe:	4603      	mov	r3, r0
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d013      	beq.n	800ff2c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ff04:	4b3f      	ldr	r3, [pc, #252]	; (8010004 <xQueueGenericSend+0x1f0>)
 800ff06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ff0a:	601a      	str	r2, [r3, #0]
 800ff0c:	f3bf 8f4f 	dsb	sy
 800ff10:	f3bf 8f6f 	isb	sy
 800ff14:	e00a      	b.n	800ff2c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ff16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d007      	beq.n	800ff2c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ff1c:	4b39      	ldr	r3, [pc, #228]	; (8010004 <xQueueGenericSend+0x1f0>)
 800ff1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ff22:	601a      	str	r2, [r3, #0]
 800ff24:	f3bf 8f4f 	dsb	sy
 800ff28:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ff2c:	f7ff fc54 	bl	800f7d8 <vPortExitCritical>
				return pdPASS;
 800ff30:	2301      	movs	r3, #1
 800ff32:	e063      	b.n	800fffc <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d103      	bne.n	800ff42 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ff3a:	f7ff fc4d 	bl	800f7d8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ff3e:	2300      	movs	r3, #0
 800ff40:	e05c      	b.n	800fffc <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ff42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d106      	bne.n	800ff56 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ff48:	f107 0314 	add.w	r3, r7, #20
 800ff4c:	4618      	mov	r0, r3
 800ff4e:	f001 faf7 	bl	8011540 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ff52:	2301      	movs	r3, #1
 800ff54:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ff56:	f7ff fc3f 	bl	800f7d8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ff5a:	f000 ffd9 	bl	8010f10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ff5e:	f7ff fc0d 	bl	800f77c <vPortEnterCritical>
 800ff62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ff68:	b25b      	sxtb	r3, r3
 800ff6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff6e:	d103      	bne.n	800ff78 <xQueueGenericSend+0x164>
 800ff70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff72:	2200      	movs	r2, #0
 800ff74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ff78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ff7e:	b25b      	sxtb	r3, r3
 800ff80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff84:	d103      	bne.n	800ff8e <xQueueGenericSend+0x17a>
 800ff86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff88:	2200      	movs	r2, #0
 800ff8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ff8e:	f7ff fc23 	bl	800f7d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ff92:	1d3a      	adds	r2, r7, #4
 800ff94:	f107 0314 	add.w	r3, r7, #20
 800ff98:	4611      	mov	r1, r2
 800ff9a:	4618      	mov	r0, r3
 800ff9c:	f001 fae6 	bl	801156c <xTaskCheckForTimeOut>
 800ffa0:	4603      	mov	r3, r0
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d124      	bne.n	800fff0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ffa6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ffa8:	f000 fcdf 	bl	801096a <prvIsQueueFull>
 800ffac:	4603      	mov	r3, r0
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d018      	beq.n	800ffe4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ffb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffb4:	3310      	adds	r3, #16
 800ffb6:	687a      	ldr	r2, [r7, #4]
 800ffb8:	4611      	mov	r1, r2
 800ffba:	4618      	mov	r0, r3
 800ffbc:	f001 fa0e 	bl	80113dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ffc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ffc2:	f000 fc6a 	bl	801089a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ffc6:	f000 ffe9 	bl	8010f9c <xTaskResumeAll>
 800ffca:	4603      	mov	r3, r0
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	f47f af7c 	bne.w	800feca <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800ffd2:	4b0c      	ldr	r3, [pc, #48]	; (8010004 <xQueueGenericSend+0x1f0>)
 800ffd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ffd8:	601a      	str	r2, [r3, #0]
 800ffda:	f3bf 8f4f 	dsb	sy
 800ffde:	f3bf 8f6f 	isb	sy
 800ffe2:	e772      	b.n	800feca <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ffe4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ffe6:	f000 fc58 	bl	801089a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ffea:	f000 ffd7 	bl	8010f9c <xTaskResumeAll>
 800ffee:	e76c      	b.n	800feca <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800fff0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fff2:	f000 fc52 	bl	801089a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fff6:	f000 ffd1 	bl	8010f9c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800fffa:	2300      	movs	r3, #0
		}
	}
}
 800fffc:	4618      	mov	r0, r3
 800fffe:	3738      	adds	r7, #56	; 0x38
 8010000:	46bd      	mov	sp, r7
 8010002:	bd80      	pop	{r7, pc}
 8010004:	e000ed04 	.word	0xe000ed04

08010008 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010008:	b580      	push	{r7, lr}
 801000a:	b08e      	sub	sp, #56	; 0x38
 801000c:	af00      	add	r7, sp, #0
 801000e:	60f8      	str	r0, [r7, #12]
 8010010:	60b9      	str	r1, [r7, #8]
 8010012:	607a      	str	r2, [r7, #4]
 8010014:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801001a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801001c:	2b00      	cmp	r3, #0
 801001e:	d109      	bne.n	8010034 <xQueueGenericSendFromISR+0x2c>
 8010020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010024:	f383 8811 	msr	BASEPRI, r3
 8010028:	f3bf 8f6f 	isb	sy
 801002c:	f3bf 8f4f 	dsb	sy
 8010030:	627b      	str	r3, [r7, #36]	; 0x24
 8010032:	e7fe      	b.n	8010032 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010034:	68bb      	ldr	r3, [r7, #8]
 8010036:	2b00      	cmp	r3, #0
 8010038:	d103      	bne.n	8010042 <xQueueGenericSendFromISR+0x3a>
 801003a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801003c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801003e:	2b00      	cmp	r3, #0
 8010040:	d101      	bne.n	8010046 <xQueueGenericSendFromISR+0x3e>
 8010042:	2301      	movs	r3, #1
 8010044:	e000      	b.n	8010048 <xQueueGenericSendFromISR+0x40>
 8010046:	2300      	movs	r3, #0
 8010048:	2b00      	cmp	r3, #0
 801004a:	d109      	bne.n	8010060 <xQueueGenericSendFromISR+0x58>
 801004c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010050:	f383 8811 	msr	BASEPRI, r3
 8010054:	f3bf 8f6f 	isb	sy
 8010058:	f3bf 8f4f 	dsb	sy
 801005c:	623b      	str	r3, [r7, #32]
 801005e:	e7fe      	b.n	801005e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010060:	683b      	ldr	r3, [r7, #0]
 8010062:	2b02      	cmp	r3, #2
 8010064:	d103      	bne.n	801006e <xQueueGenericSendFromISR+0x66>
 8010066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801006a:	2b01      	cmp	r3, #1
 801006c:	d101      	bne.n	8010072 <xQueueGenericSendFromISR+0x6a>
 801006e:	2301      	movs	r3, #1
 8010070:	e000      	b.n	8010074 <xQueueGenericSendFromISR+0x6c>
 8010072:	2300      	movs	r3, #0
 8010074:	2b00      	cmp	r3, #0
 8010076:	d109      	bne.n	801008c <xQueueGenericSendFromISR+0x84>
 8010078:	f04f 0350 	mov.w	r3, #80	; 0x50
 801007c:	f383 8811 	msr	BASEPRI, r3
 8010080:	f3bf 8f6f 	isb	sy
 8010084:	f3bf 8f4f 	dsb	sy
 8010088:	61fb      	str	r3, [r7, #28]
 801008a:	e7fe      	b.n	801008a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801008c:	f7ff fc2e 	bl	800f8ec <vPortValidateInterruptPriority>
	__asm volatile
 8010090:	f3ef 8211 	mrs	r2, BASEPRI
 8010094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010098:	f383 8811 	msr	BASEPRI, r3
 801009c:	f3bf 8f6f 	isb	sy
 80100a0:	f3bf 8f4f 	dsb	sy
 80100a4:	61ba      	str	r2, [r7, #24]
 80100a6:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80100a8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80100aa:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80100ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80100b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80100b4:	429a      	cmp	r2, r3
 80100b6:	d302      	bcc.n	80100be <xQueueGenericSendFromISR+0xb6>
 80100b8:	683b      	ldr	r3, [r7, #0]
 80100ba:	2b02      	cmp	r3, #2
 80100bc:	d12c      	bne.n	8010118 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80100be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80100c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80100c8:	683a      	ldr	r2, [r7, #0]
 80100ca:	68b9      	ldr	r1, [r7, #8]
 80100cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80100ce:	f000 fb54 	bl	801077a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80100d2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80100d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100da:	d112      	bne.n	8010102 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80100dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d016      	beq.n	8010112 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80100e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100e6:	3324      	adds	r3, #36	; 0x24
 80100e8:	4618      	mov	r0, r3
 80100ea:	f001 f9c5 	bl	8011478 <xTaskRemoveFromEventList>
 80100ee:	4603      	mov	r3, r0
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d00e      	beq.n	8010112 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d00b      	beq.n	8010112 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	2201      	movs	r2, #1
 80100fe:	601a      	str	r2, [r3, #0]
 8010100:	e007      	b.n	8010112 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010102:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010106:	3301      	adds	r3, #1
 8010108:	b2db      	uxtb	r3, r3
 801010a:	b25a      	sxtb	r2, r3
 801010c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801010e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010112:	2301      	movs	r3, #1
 8010114:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8010116:	e001      	b.n	801011c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010118:	2300      	movs	r3, #0
 801011a:	637b      	str	r3, [r7, #52]	; 0x34
 801011c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801011e:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010120:	693b      	ldr	r3, [r7, #16]
 8010122:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010128:	4618      	mov	r0, r3
 801012a:	3738      	adds	r7, #56	; 0x38
 801012c:	46bd      	mov	sp, r7
 801012e:	bd80      	pop	{r7, pc}

08010130 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010130:	b580      	push	{r7, lr}
 8010132:	b08e      	sub	sp, #56	; 0x38
 8010134:	af00      	add	r7, sp, #0
 8010136:	6078      	str	r0, [r7, #4]
 8010138:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801013e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010140:	2b00      	cmp	r3, #0
 8010142:	d109      	bne.n	8010158 <xQueueGiveFromISR+0x28>
	__asm volatile
 8010144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010148:	f383 8811 	msr	BASEPRI, r3
 801014c:	f3bf 8f6f 	isb	sy
 8010150:	f3bf 8f4f 	dsb	sy
 8010154:	623b      	str	r3, [r7, #32]
 8010156:	e7fe      	b.n	8010156 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801015a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801015c:	2b00      	cmp	r3, #0
 801015e:	d009      	beq.n	8010174 <xQueueGiveFromISR+0x44>
 8010160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010164:	f383 8811 	msr	BASEPRI, r3
 8010168:	f3bf 8f6f 	isb	sy
 801016c:	f3bf 8f4f 	dsb	sy
 8010170:	61fb      	str	r3, [r7, #28]
 8010172:	e7fe      	b.n	8010172 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8010174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	2b00      	cmp	r3, #0
 801017a:	d103      	bne.n	8010184 <xQueueGiveFromISR+0x54>
 801017c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801017e:	685b      	ldr	r3, [r3, #4]
 8010180:	2b00      	cmp	r3, #0
 8010182:	d101      	bne.n	8010188 <xQueueGiveFromISR+0x58>
 8010184:	2301      	movs	r3, #1
 8010186:	e000      	b.n	801018a <xQueueGiveFromISR+0x5a>
 8010188:	2300      	movs	r3, #0
 801018a:	2b00      	cmp	r3, #0
 801018c:	d109      	bne.n	80101a2 <xQueueGiveFromISR+0x72>
 801018e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010192:	f383 8811 	msr	BASEPRI, r3
 8010196:	f3bf 8f6f 	isb	sy
 801019a:	f3bf 8f4f 	dsb	sy
 801019e:	61bb      	str	r3, [r7, #24]
 80101a0:	e7fe      	b.n	80101a0 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80101a2:	f7ff fba3 	bl	800f8ec <vPortValidateInterruptPriority>
	__asm volatile
 80101a6:	f3ef 8211 	mrs	r2, BASEPRI
 80101aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101ae:	f383 8811 	msr	BASEPRI, r3
 80101b2:	f3bf 8f6f 	isb	sy
 80101b6:	f3bf 8f4f 	dsb	sy
 80101ba:	617a      	str	r2, [r7, #20]
 80101bc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80101be:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80101c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80101c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101c6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80101c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80101cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80101ce:	429a      	cmp	r2, r3
 80101d0:	d22b      	bcs.n	801022a <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80101d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80101d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80101dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101de:	1c5a      	adds	r2, r3, #1
 80101e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101e2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80101e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80101e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101ec:	d112      	bne.n	8010214 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80101ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d016      	beq.n	8010224 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80101f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101f8:	3324      	adds	r3, #36	; 0x24
 80101fa:	4618      	mov	r0, r3
 80101fc:	f001 f93c 	bl	8011478 <xTaskRemoveFromEventList>
 8010200:	4603      	mov	r3, r0
 8010202:	2b00      	cmp	r3, #0
 8010204:	d00e      	beq.n	8010224 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010206:	683b      	ldr	r3, [r7, #0]
 8010208:	2b00      	cmp	r3, #0
 801020a:	d00b      	beq.n	8010224 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801020c:	683b      	ldr	r3, [r7, #0]
 801020e:	2201      	movs	r2, #1
 8010210:	601a      	str	r2, [r3, #0]
 8010212:	e007      	b.n	8010224 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010214:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010218:	3301      	adds	r3, #1
 801021a:	b2db      	uxtb	r3, r3
 801021c:	b25a      	sxtb	r2, r3
 801021e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010220:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010224:	2301      	movs	r3, #1
 8010226:	637b      	str	r3, [r7, #52]	; 0x34
 8010228:	e001      	b.n	801022e <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801022a:	2300      	movs	r3, #0
 801022c:	637b      	str	r3, [r7, #52]	; 0x34
 801022e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010230:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801023a:	4618      	mov	r0, r3
 801023c:	3738      	adds	r7, #56	; 0x38
 801023e:	46bd      	mov	sp, r7
 8010240:	bd80      	pop	{r7, pc}
	...

08010244 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010244:	b580      	push	{r7, lr}
 8010246:	b08c      	sub	sp, #48	; 0x30
 8010248:	af00      	add	r7, sp, #0
 801024a:	60f8      	str	r0, [r7, #12]
 801024c:	60b9      	str	r1, [r7, #8]
 801024e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010250:	2300      	movs	r3, #0
 8010252:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801025a:	2b00      	cmp	r3, #0
 801025c:	d109      	bne.n	8010272 <xQueueReceive+0x2e>
	__asm volatile
 801025e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010262:	f383 8811 	msr	BASEPRI, r3
 8010266:	f3bf 8f6f 	isb	sy
 801026a:	f3bf 8f4f 	dsb	sy
 801026e:	623b      	str	r3, [r7, #32]
 8010270:	e7fe      	b.n	8010270 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010272:	68bb      	ldr	r3, [r7, #8]
 8010274:	2b00      	cmp	r3, #0
 8010276:	d103      	bne.n	8010280 <xQueueReceive+0x3c>
 8010278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801027a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801027c:	2b00      	cmp	r3, #0
 801027e:	d101      	bne.n	8010284 <xQueueReceive+0x40>
 8010280:	2301      	movs	r3, #1
 8010282:	e000      	b.n	8010286 <xQueueReceive+0x42>
 8010284:	2300      	movs	r3, #0
 8010286:	2b00      	cmp	r3, #0
 8010288:	d109      	bne.n	801029e <xQueueReceive+0x5a>
 801028a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801028e:	f383 8811 	msr	BASEPRI, r3
 8010292:	f3bf 8f6f 	isb	sy
 8010296:	f3bf 8f4f 	dsb	sy
 801029a:	61fb      	str	r3, [r7, #28]
 801029c:	e7fe      	b.n	801029c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801029e:	f001 fb0d 	bl	80118bc <xTaskGetSchedulerState>
 80102a2:	4603      	mov	r3, r0
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d102      	bne.n	80102ae <xQueueReceive+0x6a>
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d101      	bne.n	80102b2 <xQueueReceive+0x6e>
 80102ae:	2301      	movs	r3, #1
 80102b0:	e000      	b.n	80102b4 <xQueueReceive+0x70>
 80102b2:	2300      	movs	r3, #0
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d109      	bne.n	80102cc <xQueueReceive+0x88>
 80102b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102bc:	f383 8811 	msr	BASEPRI, r3
 80102c0:	f3bf 8f6f 	isb	sy
 80102c4:	f3bf 8f4f 	dsb	sy
 80102c8:	61bb      	str	r3, [r7, #24]
 80102ca:	e7fe      	b.n	80102ca <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80102cc:	f7ff fa56 	bl	800f77c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80102d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80102d4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80102d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d01f      	beq.n	801031c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80102dc:	68b9      	ldr	r1, [r7, #8]
 80102de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80102e0:	f000 fab5 	bl	801084e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80102e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102e6:	1e5a      	subs	r2, r3, #1
 80102e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102ea:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80102ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102ee:	691b      	ldr	r3, [r3, #16]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d00f      	beq.n	8010314 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80102f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102f6:	3310      	adds	r3, #16
 80102f8:	4618      	mov	r0, r3
 80102fa:	f001 f8bd 	bl	8011478 <xTaskRemoveFromEventList>
 80102fe:	4603      	mov	r3, r0
 8010300:	2b00      	cmp	r3, #0
 8010302:	d007      	beq.n	8010314 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010304:	4b3c      	ldr	r3, [pc, #240]	; (80103f8 <xQueueReceive+0x1b4>)
 8010306:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801030a:	601a      	str	r2, [r3, #0]
 801030c:	f3bf 8f4f 	dsb	sy
 8010310:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010314:	f7ff fa60 	bl	800f7d8 <vPortExitCritical>
				return pdPASS;
 8010318:	2301      	movs	r3, #1
 801031a:	e069      	b.n	80103f0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	2b00      	cmp	r3, #0
 8010320:	d103      	bne.n	801032a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010322:	f7ff fa59 	bl	800f7d8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010326:	2300      	movs	r3, #0
 8010328:	e062      	b.n	80103f0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 801032a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801032c:	2b00      	cmp	r3, #0
 801032e:	d106      	bne.n	801033e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010330:	f107 0310 	add.w	r3, r7, #16
 8010334:	4618      	mov	r0, r3
 8010336:	f001 f903 	bl	8011540 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801033a:	2301      	movs	r3, #1
 801033c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801033e:	f7ff fa4b 	bl	800f7d8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010342:	f000 fde5 	bl	8010f10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010346:	f7ff fa19 	bl	800f77c <vPortEnterCritical>
 801034a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801034c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010350:	b25b      	sxtb	r3, r3
 8010352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010356:	d103      	bne.n	8010360 <xQueueReceive+0x11c>
 8010358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801035a:	2200      	movs	r2, #0
 801035c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010362:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010366:	b25b      	sxtb	r3, r3
 8010368:	f1b3 3fff 	cmp.w	r3, #4294967295
 801036c:	d103      	bne.n	8010376 <xQueueReceive+0x132>
 801036e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010370:	2200      	movs	r2, #0
 8010372:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010376:	f7ff fa2f 	bl	800f7d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801037a:	1d3a      	adds	r2, r7, #4
 801037c:	f107 0310 	add.w	r3, r7, #16
 8010380:	4611      	mov	r1, r2
 8010382:	4618      	mov	r0, r3
 8010384:	f001 f8f2 	bl	801156c <xTaskCheckForTimeOut>
 8010388:	4603      	mov	r3, r0
 801038a:	2b00      	cmp	r3, #0
 801038c:	d123      	bne.n	80103d6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801038e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010390:	f000 fad5 	bl	801093e <prvIsQueueEmpty>
 8010394:	4603      	mov	r3, r0
 8010396:	2b00      	cmp	r3, #0
 8010398:	d017      	beq.n	80103ca <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801039a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801039c:	3324      	adds	r3, #36	; 0x24
 801039e:	687a      	ldr	r2, [r7, #4]
 80103a0:	4611      	mov	r1, r2
 80103a2:	4618      	mov	r0, r3
 80103a4:	f001 f81a 	bl	80113dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80103a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80103aa:	f000 fa76 	bl	801089a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80103ae:	f000 fdf5 	bl	8010f9c <xTaskResumeAll>
 80103b2:	4603      	mov	r3, r0
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d189      	bne.n	80102cc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80103b8:	4b0f      	ldr	r3, [pc, #60]	; (80103f8 <xQueueReceive+0x1b4>)
 80103ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80103be:	601a      	str	r2, [r3, #0]
 80103c0:	f3bf 8f4f 	dsb	sy
 80103c4:	f3bf 8f6f 	isb	sy
 80103c8:	e780      	b.n	80102cc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80103ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80103cc:	f000 fa65 	bl	801089a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80103d0:	f000 fde4 	bl	8010f9c <xTaskResumeAll>
 80103d4:	e77a      	b.n	80102cc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80103d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80103d8:	f000 fa5f 	bl	801089a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80103dc:	f000 fdde 	bl	8010f9c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80103e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80103e2:	f000 faac 	bl	801093e <prvIsQueueEmpty>
 80103e6:	4603      	mov	r3, r0
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	f43f af6f 	beq.w	80102cc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80103ee:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80103f0:	4618      	mov	r0, r3
 80103f2:	3730      	adds	r7, #48	; 0x30
 80103f4:	46bd      	mov	sp, r7
 80103f6:	bd80      	pop	{r7, pc}
 80103f8:	e000ed04 	.word	0xe000ed04

080103fc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80103fc:	b580      	push	{r7, lr}
 80103fe:	b08e      	sub	sp, #56	; 0x38
 8010400:	af00      	add	r7, sp, #0
 8010402:	6078      	str	r0, [r7, #4]
 8010404:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8010406:	2300      	movs	r3, #0
 8010408:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801040e:	2300      	movs	r3, #0
 8010410:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010414:	2b00      	cmp	r3, #0
 8010416:	d109      	bne.n	801042c <xQueueSemaphoreTake+0x30>
 8010418:	f04f 0350 	mov.w	r3, #80	; 0x50
 801041c:	f383 8811 	msr	BASEPRI, r3
 8010420:	f3bf 8f6f 	isb	sy
 8010424:	f3bf 8f4f 	dsb	sy
 8010428:	623b      	str	r3, [r7, #32]
 801042a:	e7fe      	b.n	801042a <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801042c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801042e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010430:	2b00      	cmp	r3, #0
 8010432:	d009      	beq.n	8010448 <xQueueSemaphoreTake+0x4c>
 8010434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010438:	f383 8811 	msr	BASEPRI, r3
 801043c:	f3bf 8f6f 	isb	sy
 8010440:	f3bf 8f4f 	dsb	sy
 8010444:	61fb      	str	r3, [r7, #28]
 8010446:	e7fe      	b.n	8010446 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010448:	f001 fa38 	bl	80118bc <xTaskGetSchedulerState>
 801044c:	4603      	mov	r3, r0
 801044e:	2b00      	cmp	r3, #0
 8010450:	d102      	bne.n	8010458 <xQueueSemaphoreTake+0x5c>
 8010452:	683b      	ldr	r3, [r7, #0]
 8010454:	2b00      	cmp	r3, #0
 8010456:	d101      	bne.n	801045c <xQueueSemaphoreTake+0x60>
 8010458:	2301      	movs	r3, #1
 801045a:	e000      	b.n	801045e <xQueueSemaphoreTake+0x62>
 801045c:	2300      	movs	r3, #0
 801045e:	2b00      	cmp	r3, #0
 8010460:	d109      	bne.n	8010476 <xQueueSemaphoreTake+0x7a>
 8010462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010466:	f383 8811 	msr	BASEPRI, r3
 801046a:	f3bf 8f6f 	isb	sy
 801046e:	f3bf 8f4f 	dsb	sy
 8010472:	61bb      	str	r3, [r7, #24]
 8010474:	e7fe      	b.n	8010474 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8010476:	f7ff f981 	bl	800f77c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801047a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801047c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801047e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8010480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010482:	2b00      	cmp	r3, #0
 8010484:	d024      	beq.n	80104d0 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010488:	1e5a      	subs	r2, r3, #1
 801048a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801048c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801048e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	2b00      	cmp	r3, #0
 8010494:	d104      	bne.n	80104a0 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8010496:	f001 fb8d 	bl	8011bb4 <pvTaskIncrementMutexHeldCount>
 801049a:	4602      	mov	r2, r0
 801049c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801049e:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80104a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104a2:	691b      	ldr	r3, [r3, #16]
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d00f      	beq.n	80104c8 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80104a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104aa:	3310      	adds	r3, #16
 80104ac:	4618      	mov	r0, r3
 80104ae:	f000 ffe3 	bl	8011478 <xTaskRemoveFromEventList>
 80104b2:	4603      	mov	r3, r0
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d007      	beq.n	80104c8 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80104b8:	4b53      	ldr	r3, [pc, #332]	; (8010608 <xQueueSemaphoreTake+0x20c>)
 80104ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80104be:	601a      	str	r2, [r3, #0]
 80104c0:	f3bf 8f4f 	dsb	sy
 80104c4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80104c8:	f7ff f986 	bl	800f7d8 <vPortExitCritical>
				return pdPASS;
 80104cc:	2301      	movs	r3, #1
 80104ce:	e096      	b.n	80105fe <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80104d0:	683b      	ldr	r3, [r7, #0]
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d110      	bne.n	80104f8 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80104d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d009      	beq.n	80104f0 <xQueueSemaphoreTake+0xf4>
 80104dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104e0:	f383 8811 	msr	BASEPRI, r3
 80104e4:	f3bf 8f6f 	isb	sy
 80104e8:	f3bf 8f4f 	dsb	sy
 80104ec:	617b      	str	r3, [r7, #20]
 80104ee:	e7fe      	b.n	80104ee <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80104f0:	f7ff f972 	bl	800f7d8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80104f4:	2300      	movs	r3, #0
 80104f6:	e082      	b.n	80105fe <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 80104f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d106      	bne.n	801050c <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80104fe:	f107 030c 	add.w	r3, r7, #12
 8010502:	4618      	mov	r0, r3
 8010504:	f001 f81c 	bl	8011540 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010508:	2301      	movs	r3, #1
 801050a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801050c:	f7ff f964 	bl	800f7d8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010510:	f000 fcfe 	bl	8010f10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010514:	f7ff f932 	bl	800f77c <vPortEnterCritical>
 8010518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801051a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801051e:	b25b      	sxtb	r3, r3
 8010520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010524:	d103      	bne.n	801052e <xQueueSemaphoreTake+0x132>
 8010526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010528:	2200      	movs	r2, #0
 801052a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801052e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010530:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010534:	b25b      	sxtb	r3, r3
 8010536:	f1b3 3fff 	cmp.w	r3, #4294967295
 801053a:	d103      	bne.n	8010544 <xQueueSemaphoreTake+0x148>
 801053c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801053e:	2200      	movs	r2, #0
 8010540:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010544:	f7ff f948 	bl	800f7d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010548:	463a      	mov	r2, r7
 801054a:	f107 030c 	add.w	r3, r7, #12
 801054e:	4611      	mov	r1, r2
 8010550:	4618      	mov	r0, r3
 8010552:	f001 f80b 	bl	801156c <xTaskCheckForTimeOut>
 8010556:	4603      	mov	r3, r0
 8010558:	2b00      	cmp	r3, #0
 801055a:	d132      	bne.n	80105c2 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801055c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801055e:	f000 f9ee 	bl	801093e <prvIsQueueEmpty>
 8010562:	4603      	mov	r3, r0
 8010564:	2b00      	cmp	r3, #0
 8010566:	d026      	beq.n	80105b6 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	2b00      	cmp	r3, #0
 801056e:	d109      	bne.n	8010584 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8010570:	f7ff f904 	bl	800f77c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8010574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010576:	685b      	ldr	r3, [r3, #4]
 8010578:	4618      	mov	r0, r3
 801057a:	f001 f9bd 	bl	80118f8 <xTaskPriorityInherit>
 801057e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8010580:	f7ff f92a 	bl	800f7d8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010586:	3324      	adds	r3, #36	; 0x24
 8010588:	683a      	ldr	r2, [r7, #0]
 801058a:	4611      	mov	r1, r2
 801058c:	4618      	mov	r0, r3
 801058e:	f000 ff25 	bl	80113dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010592:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010594:	f000 f981 	bl	801089a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010598:	f000 fd00 	bl	8010f9c <xTaskResumeAll>
 801059c:	4603      	mov	r3, r0
 801059e:	2b00      	cmp	r3, #0
 80105a0:	f47f af69 	bne.w	8010476 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 80105a4:	4b18      	ldr	r3, [pc, #96]	; (8010608 <xQueueSemaphoreTake+0x20c>)
 80105a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80105aa:	601a      	str	r2, [r3, #0]
 80105ac:	f3bf 8f4f 	dsb	sy
 80105b0:	f3bf 8f6f 	isb	sy
 80105b4:	e75f      	b.n	8010476 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80105b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80105b8:	f000 f96f 	bl	801089a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80105bc:	f000 fcee 	bl	8010f9c <xTaskResumeAll>
 80105c0:	e759      	b.n	8010476 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80105c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80105c4:	f000 f969 	bl	801089a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80105c8:	f000 fce8 	bl	8010f9c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80105cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80105ce:	f000 f9b6 	bl	801093e <prvIsQueueEmpty>
 80105d2:	4603      	mov	r3, r0
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	f43f af4e 	beq.w	8010476 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80105da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d00d      	beq.n	80105fc <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 80105e0:	f7ff f8cc 	bl	800f77c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80105e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80105e6:	f000 f8b0 	bl	801074a <prvGetDisinheritPriorityAfterTimeout>
 80105ea:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80105ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105ee:	685b      	ldr	r3, [r3, #4]
 80105f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80105f2:	4618      	mov	r0, r3
 80105f4:	f001 fa5a 	bl	8011aac <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80105f8:	f7ff f8ee 	bl	800f7d8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80105fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80105fe:	4618      	mov	r0, r3
 8010600:	3738      	adds	r7, #56	; 0x38
 8010602:	46bd      	mov	sp, r7
 8010604:	bd80      	pop	{r7, pc}
 8010606:	bf00      	nop
 8010608:	e000ed04 	.word	0xe000ed04

0801060c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801060c:	b580      	push	{r7, lr}
 801060e:	b08e      	sub	sp, #56	; 0x38
 8010610:	af00      	add	r7, sp, #0
 8010612:	60f8      	str	r0, [r7, #12]
 8010614:	60b9      	str	r1, [r7, #8]
 8010616:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801061c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801061e:	2b00      	cmp	r3, #0
 8010620:	d109      	bne.n	8010636 <xQueueReceiveFromISR+0x2a>
 8010622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010626:	f383 8811 	msr	BASEPRI, r3
 801062a:	f3bf 8f6f 	isb	sy
 801062e:	f3bf 8f4f 	dsb	sy
 8010632:	623b      	str	r3, [r7, #32]
 8010634:	e7fe      	b.n	8010634 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010636:	68bb      	ldr	r3, [r7, #8]
 8010638:	2b00      	cmp	r3, #0
 801063a:	d103      	bne.n	8010644 <xQueueReceiveFromISR+0x38>
 801063c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801063e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010640:	2b00      	cmp	r3, #0
 8010642:	d101      	bne.n	8010648 <xQueueReceiveFromISR+0x3c>
 8010644:	2301      	movs	r3, #1
 8010646:	e000      	b.n	801064a <xQueueReceiveFromISR+0x3e>
 8010648:	2300      	movs	r3, #0
 801064a:	2b00      	cmp	r3, #0
 801064c:	d109      	bne.n	8010662 <xQueueReceiveFromISR+0x56>
 801064e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010652:	f383 8811 	msr	BASEPRI, r3
 8010656:	f3bf 8f6f 	isb	sy
 801065a:	f3bf 8f4f 	dsb	sy
 801065e:	61fb      	str	r3, [r7, #28]
 8010660:	e7fe      	b.n	8010660 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010662:	f7ff f943 	bl	800f8ec <vPortValidateInterruptPriority>
	__asm volatile
 8010666:	f3ef 8211 	mrs	r2, BASEPRI
 801066a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801066e:	f383 8811 	msr	BASEPRI, r3
 8010672:	f3bf 8f6f 	isb	sy
 8010676:	f3bf 8f4f 	dsb	sy
 801067a:	61ba      	str	r2, [r7, #24]
 801067c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801067e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010680:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010686:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801068a:	2b00      	cmp	r3, #0
 801068c:	d02f      	beq.n	80106ee <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801068e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010690:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010694:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010698:	68b9      	ldr	r1, [r7, #8]
 801069a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801069c:	f000 f8d7 	bl	801084e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80106a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106a2:	1e5a      	subs	r2, r3, #1
 80106a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106a6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80106a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80106ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106b0:	d112      	bne.n	80106d8 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80106b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106b4:	691b      	ldr	r3, [r3, #16]
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d016      	beq.n	80106e8 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80106ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106bc:	3310      	adds	r3, #16
 80106be:	4618      	mov	r0, r3
 80106c0:	f000 feda 	bl	8011478 <xTaskRemoveFromEventList>
 80106c4:	4603      	mov	r3, r0
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d00e      	beq.n	80106e8 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d00b      	beq.n	80106e8 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	2201      	movs	r2, #1
 80106d4:	601a      	str	r2, [r3, #0]
 80106d6:	e007      	b.n	80106e8 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80106d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80106dc:	3301      	adds	r3, #1
 80106de:	b2db      	uxtb	r3, r3
 80106e0:	b25a      	sxtb	r2, r3
 80106e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80106e8:	2301      	movs	r3, #1
 80106ea:	637b      	str	r3, [r7, #52]	; 0x34
 80106ec:	e001      	b.n	80106f2 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80106ee:	2300      	movs	r3, #0
 80106f0:	637b      	str	r3, [r7, #52]	; 0x34
 80106f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106f4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80106f6:	693b      	ldr	r3, [r7, #16]
 80106f8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80106fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80106fe:	4618      	mov	r0, r3
 8010700:	3738      	adds	r7, #56	; 0x38
 8010702:	46bd      	mov	sp, r7
 8010704:	bd80      	pop	{r7, pc}

08010706 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8010706:	b580      	push	{r7, lr}
 8010708:	b084      	sub	sp, #16
 801070a:	af00      	add	r7, sp, #0
 801070c:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	2b00      	cmp	r3, #0
 8010716:	d109      	bne.n	801072c <vQueueDelete+0x26>
	__asm volatile
 8010718:	f04f 0350 	mov.w	r3, #80	; 0x50
 801071c:	f383 8811 	msr	BASEPRI, r3
 8010720:	f3bf 8f6f 	isb	sy
 8010724:	f3bf 8f4f 	dsb	sy
 8010728:	60bb      	str	r3, [r7, #8]
 801072a:	e7fe      	b.n	801072a <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 801072c:	68f8      	ldr	r0, [r7, #12]
 801072e:	f000 f95d 	bl	80109ec <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8010738:	2b00      	cmp	r3, #0
 801073a:	d102      	bne.n	8010742 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 801073c:	68f8      	ldr	r0, [r7, #12]
 801073e:	f7fe fd2d 	bl	800f19c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8010742:	bf00      	nop
 8010744:	3710      	adds	r7, #16
 8010746:	46bd      	mov	sp, r7
 8010748:	bd80      	pop	{r7, pc}

0801074a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801074a:	b480      	push	{r7}
 801074c:	b085      	sub	sp, #20
 801074e:	af00      	add	r7, sp, #0
 8010750:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010756:	2b00      	cmp	r3, #0
 8010758:	d006      	beq.n	8010768 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8010764:	60fb      	str	r3, [r7, #12]
 8010766:	e001      	b.n	801076c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8010768:	2300      	movs	r3, #0
 801076a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801076c:	68fb      	ldr	r3, [r7, #12]
	}
 801076e:	4618      	mov	r0, r3
 8010770:	3714      	adds	r7, #20
 8010772:	46bd      	mov	sp, r7
 8010774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010778:	4770      	bx	lr

0801077a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801077a:	b580      	push	{r7, lr}
 801077c:	b086      	sub	sp, #24
 801077e:	af00      	add	r7, sp, #0
 8010780:	60f8      	str	r0, [r7, #12]
 8010782:	60b9      	str	r1, [r7, #8]
 8010784:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010786:	2300      	movs	r3, #0
 8010788:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801078e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010794:	2b00      	cmp	r3, #0
 8010796:	d10d      	bne.n	80107b4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010798:	68fb      	ldr	r3, [r7, #12]
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	2b00      	cmp	r3, #0
 801079e:	d14d      	bne.n	801083c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	685b      	ldr	r3, [r3, #4]
 80107a4:	4618      	mov	r0, r3
 80107a6:	f001 f915 	bl	80119d4 <xTaskPriorityDisinherit>
 80107aa:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	2200      	movs	r2, #0
 80107b0:	605a      	str	r2, [r3, #4]
 80107b2:	e043      	b.n	801083c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d119      	bne.n	80107ee <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	6898      	ldr	r0, [r3, #8]
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107c2:	461a      	mov	r2, r3
 80107c4:	68b9      	ldr	r1, [r7, #8]
 80107c6:	f005 fbc1 	bl	8015f4c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	689a      	ldr	r2, [r3, #8]
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107d2:	441a      	add	r2, r3
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	689a      	ldr	r2, [r3, #8]
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	685b      	ldr	r3, [r3, #4]
 80107e0:	429a      	cmp	r2, r3
 80107e2:	d32b      	bcc.n	801083c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	681a      	ldr	r2, [r3, #0]
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	609a      	str	r2, [r3, #8]
 80107ec:	e026      	b.n	801083c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	68d8      	ldr	r0, [r3, #12]
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107f6:	461a      	mov	r2, r3
 80107f8:	68b9      	ldr	r1, [r7, #8]
 80107fa:	f005 fba7 	bl	8015f4c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	68da      	ldr	r2, [r3, #12]
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010806:	425b      	negs	r3, r3
 8010808:	441a      	add	r2, r3
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	68da      	ldr	r2, [r3, #12]
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	429a      	cmp	r2, r3
 8010818:	d207      	bcs.n	801082a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	685a      	ldr	r2, [r3, #4]
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010822:	425b      	negs	r3, r3
 8010824:	441a      	add	r2, r3
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	2b02      	cmp	r3, #2
 801082e:	d105      	bne.n	801083c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010830:	693b      	ldr	r3, [r7, #16]
 8010832:	2b00      	cmp	r3, #0
 8010834:	d002      	beq.n	801083c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010836:	693b      	ldr	r3, [r7, #16]
 8010838:	3b01      	subs	r3, #1
 801083a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801083c:	693b      	ldr	r3, [r7, #16]
 801083e:	1c5a      	adds	r2, r3, #1
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8010844:	697b      	ldr	r3, [r7, #20]
}
 8010846:	4618      	mov	r0, r3
 8010848:	3718      	adds	r7, #24
 801084a:	46bd      	mov	sp, r7
 801084c:	bd80      	pop	{r7, pc}

0801084e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801084e:	b580      	push	{r7, lr}
 8010850:	b082      	sub	sp, #8
 8010852:	af00      	add	r7, sp, #0
 8010854:	6078      	str	r0, [r7, #4]
 8010856:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801085c:	2b00      	cmp	r3, #0
 801085e:	d018      	beq.n	8010892 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	68da      	ldr	r2, [r3, #12]
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010868:	441a      	add	r2, r3
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	68da      	ldr	r2, [r3, #12]
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	685b      	ldr	r3, [r3, #4]
 8010876:	429a      	cmp	r2, r3
 8010878:	d303      	bcc.n	8010882 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	681a      	ldr	r2, [r3, #0]
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	68d9      	ldr	r1, [r3, #12]
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801088a:	461a      	mov	r2, r3
 801088c:	6838      	ldr	r0, [r7, #0]
 801088e:	f005 fb5d 	bl	8015f4c <memcpy>
	}
}
 8010892:	bf00      	nop
 8010894:	3708      	adds	r7, #8
 8010896:	46bd      	mov	sp, r7
 8010898:	bd80      	pop	{r7, pc}

0801089a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801089a:	b580      	push	{r7, lr}
 801089c:	b084      	sub	sp, #16
 801089e:	af00      	add	r7, sp, #0
 80108a0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80108a2:	f7fe ff6b 	bl	800f77c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80108ac:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80108ae:	e011      	b.n	80108d4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d012      	beq.n	80108de <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	3324      	adds	r3, #36	; 0x24
 80108bc:	4618      	mov	r0, r3
 80108be:	f000 fddb 	bl	8011478 <xTaskRemoveFromEventList>
 80108c2:	4603      	mov	r3, r0
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d001      	beq.n	80108cc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80108c8:	f000 feb0 	bl	801162c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80108cc:	7bfb      	ldrb	r3, [r7, #15]
 80108ce:	3b01      	subs	r3, #1
 80108d0:	b2db      	uxtb	r3, r3
 80108d2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80108d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80108d8:	2b00      	cmp	r3, #0
 80108da:	dce9      	bgt.n	80108b0 <prvUnlockQueue+0x16>
 80108dc:	e000      	b.n	80108e0 <prvUnlockQueue+0x46>
					break;
 80108de:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	22ff      	movs	r2, #255	; 0xff
 80108e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80108e8:	f7fe ff76 	bl	800f7d8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80108ec:	f7fe ff46 	bl	800f77c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80108f6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80108f8:	e011      	b.n	801091e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	691b      	ldr	r3, [r3, #16]
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d012      	beq.n	8010928 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	3310      	adds	r3, #16
 8010906:	4618      	mov	r0, r3
 8010908:	f000 fdb6 	bl	8011478 <xTaskRemoveFromEventList>
 801090c:	4603      	mov	r3, r0
 801090e:	2b00      	cmp	r3, #0
 8010910:	d001      	beq.n	8010916 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010912:	f000 fe8b 	bl	801162c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010916:	7bbb      	ldrb	r3, [r7, #14]
 8010918:	3b01      	subs	r3, #1
 801091a:	b2db      	uxtb	r3, r3
 801091c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801091e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010922:	2b00      	cmp	r3, #0
 8010924:	dce9      	bgt.n	80108fa <prvUnlockQueue+0x60>
 8010926:	e000      	b.n	801092a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010928:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	22ff      	movs	r2, #255	; 0xff
 801092e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8010932:	f7fe ff51 	bl	800f7d8 <vPortExitCritical>
}
 8010936:	bf00      	nop
 8010938:	3710      	adds	r7, #16
 801093a:	46bd      	mov	sp, r7
 801093c:	bd80      	pop	{r7, pc}

0801093e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801093e:	b580      	push	{r7, lr}
 8010940:	b084      	sub	sp, #16
 8010942:	af00      	add	r7, sp, #0
 8010944:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010946:	f7fe ff19 	bl	800f77c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801094e:	2b00      	cmp	r3, #0
 8010950:	d102      	bne.n	8010958 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010952:	2301      	movs	r3, #1
 8010954:	60fb      	str	r3, [r7, #12]
 8010956:	e001      	b.n	801095c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010958:	2300      	movs	r3, #0
 801095a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801095c:	f7fe ff3c 	bl	800f7d8 <vPortExitCritical>

	return xReturn;
 8010960:	68fb      	ldr	r3, [r7, #12]
}
 8010962:	4618      	mov	r0, r3
 8010964:	3710      	adds	r7, #16
 8010966:	46bd      	mov	sp, r7
 8010968:	bd80      	pop	{r7, pc}

0801096a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801096a:	b580      	push	{r7, lr}
 801096c:	b084      	sub	sp, #16
 801096e:	af00      	add	r7, sp, #0
 8010970:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010972:	f7fe ff03 	bl	800f77c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801097e:	429a      	cmp	r2, r3
 8010980:	d102      	bne.n	8010988 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010982:	2301      	movs	r3, #1
 8010984:	60fb      	str	r3, [r7, #12]
 8010986:	e001      	b.n	801098c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010988:	2300      	movs	r3, #0
 801098a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801098c:	f7fe ff24 	bl	800f7d8 <vPortExitCritical>

	return xReturn;
 8010990:	68fb      	ldr	r3, [r7, #12]
}
 8010992:	4618      	mov	r0, r3
 8010994:	3710      	adds	r7, #16
 8010996:	46bd      	mov	sp, r7
 8010998:	bd80      	pop	{r7, pc}
	...

0801099c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801099c:	b480      	push	{r7}
 801099e:	b085      	sub	sp, #20
 80109a0:	af00      	add	r7, sp, #0
 80109a2:	6078      	str	r0, [r7, #4]
 80109a4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80109a6:	2300      	movs	r3, #0
 80109a8:	60fb      	str	r3, [r7, #12]
 80109aa:	e014      	b.n	80109d6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80109ac:	4a0e      	ldr	r2, [pc, #56]	; (80109e8 <vQueueAddToRegistry+0x4c>)
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d10b      	bne.n	80109d0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80109b8:	490b      	ldr	r1, [pc, #44]	; (80109e8 <vQueueAddToRegistry+0x4c>)
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	683a      	ldr	r2, [r7, #0]
 80109be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80109c2:	4a09      	ldr	r2, [pc, #36]	; (80109e8 <vQueueAddToRegistry+0x4c>)
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	00db      	lsls	r3, r3, #3
 80109c8:	4413      	add	r3, r2
 80109ca:	687a      	ldr	r2, [r7, #4]
 80109cc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80109ce:	e005      	b.n	80109dc <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	3301      	adds	r3, #1
 80109d4:	60fb      	str	r3, [r7, #12]
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	2b0b      	cmp	r3, #11
 80109da:	d9e7      	bls.n	80109ac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80109dc:	bf00      	nop
 80109de:	3714      	adds	r7, #20
 80109e0:	46bd      	mov	sp, r7
 80109e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109e6:	4770      	bx	lr
 80109e8:	200285a8 	.word	0x200285a8

080109ec <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80109ec:	b480      	push	{r7}
 80109ee:	b085      	sub	sp, #20
 80109f0:	af00      	add	r7, sp, #0
 80109f2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80109f4:	2300      	movs	r3, #0
 80109f6:	60fb      	str	r3, [r7, #12]
 80109f8:	e016      	b.n	8010a28 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80109fa:	4a10      	ldr	r2, [pc, #64]	; (8010a3c <vQueueUnregisterQueue+0x50>)
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	00db      	lsls	r3, r3, #3
 8010a00:	4413      	add	r3, r2
 8010a02:	685b      	ldr	r3, [r3, #4]
 8010a04:	687a      	ldr	r2, [r7, #4]
 8010a06:	429a      	cmp	r2, r3
 8010a08:	d10b      	bne.n	8010a22 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8010a0a:	4a0c      	ldr	r2, [pc, #48]	; (8010a3c <vQueueUnregisterQueue+0x50>)
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	2100      	movs	r1, #0
 8010a10:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8010a14:	4a09      	ldr	r2, [pc, #36]	; (8010a3c <vQueueUnregisterQueue+0x50>)
 8010a16:	68fb      	ldr	r3, [r7, #12]
 8010a18:	00db      	lsls	r3, r3, #3
 8010a1a:	4413      	add	r3, r2
 8010a1c:	2200      	movs	r2, #0
 8010a1e:	605a      	str	r2, [r3, #4]
				break;
 8010a20:	e005      	b.n	8010a2e <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010a22:	68fb      	ldr	r3, [r7, #12]
 8010a24:	3301      	adds	r3, #1
 8010a26:	60fb      	str	r3, [r7, #12]
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	2b0b      	cmp	r3, #11
 8010a2c:	d9e5      	bls.n	80109fa <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8010a2e:	bf00      	nop
 8010a30:	3714      	adds	r7, #20
 8010a32:	46bd      	mov	sp, r7
 8010a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a38:	4770      	bx	lr
 8010a3a:	bf00      	nop
 8010a3c:	200285a8 	.word	0x200285a8

08010a40 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010a40:	b580      	push	{r7, lr}
 8010a42:	b086      	sub	sp, #24
 8010a44:	af00      	add	r7, sp, #0
 8010a46:	60f8      	str	r0, [r7, #12]
 8010a48:	60b9      	str	r1, [r7, #8]
 8010a4a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8010a50:	f7fe fe94 	bl	800f77c <vPortEnterCritical>
 8010a54:	697b      	ldr	r3, [r7, #20]
 8010a56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010a5a:	b25b      	sxtb	r3, r3
 8010a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a60:	d103      	bne.n	8010a6a <vQueueWaitForMessageRestricted+0x2a>
 8010a62:	697b      	ldr	r3, [r7, #20]
 8010a64:	2200      	movs	r2, #0
 8010a66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010a6a:	697b      	ldr	r3, [r7, #20]
 8010a6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010a70:	b25b      	sxtb	r3, r3
 8010a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a76:	d103      	bne.n	8010a80 <vQueueWaitForMessageRestricted+0x40>
 8010a78:	697b      	ldr	r3, [r7, #20]
 8010a7a:	2200      	movs	r2, #0
 8010a7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010a80:	f7fe feaa 	bl	800f7d8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8010a84:	697b      	ldr	r3, [r7, #20]
 8010a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d106      	bne.n	8010a9a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8010a8c:	697b      	ldr	r3, [r7, #20]
 8010a8e:	3324      	adds	r3, #36	; 0x24
 8010a90:	687a      	ldr	r2, [r7, #4]
 8010a92:	68b9      	ldr	r1, [r7, #8]
 8010a94:	4618      	mov	r0, r3
 8010a96:	f000 fcc5 	bl	8011424 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8010a9a:	6978      	ldr	r0, [r7, #20]
 8010a9c:	f7ff fefd 	bl	801089a <prvUnlockQueue>
	}
 8010aa0:	bf00      	nop
 8010aa2:	3718      	adds	r7, #24
 8010aa4:	46bd      	mov	sp, r7
 8010aa6:	bd80      	pop	{r7, pc}

08010aa8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010aa8:	b580      	push	{r7, lr}
 8010aaa:	b08e      	sub	sp, #56	; 0x38
 8010aac:	af04      	add	r7, sp, #16
 8010aae:	60f8      	str	r0, [r7, #12]
 8010ab0:	60b9      	str	r1, [r7, #8]
 8010ab2:	607a      	str	r2, [r7, #4]
 8010ab4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d109      	bne.n	8010ad0 <xTaskCreateStatic+0x28>
 8010abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ac0:	f383 8811 	msr	BASEPRI, r3
 8010ac4:	f3bf 8f6f 	isb	sy
 8010ac8:	f3bf 8f4f 	dsb	sy
 8010acc:	623b      	str	r3, [r7, #32]
 8010ace:	e7fe      	b.n	8010ace <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8010ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d109      	bne.n	8010aea <xTaskCreateStatic+0x42>
 8010ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ada:	f383 8811 	msr	BASEPRI, r3
 8010ade:	f3bf 8f6f 	isb	sy
 8010ae2:	f3bf 8f4f 	dsb	sy
 8010ae6:	61fb      	str	r3, [r7, #28]
 8010ae8:	e7fe      	b.n	8010ae8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010aea:	2364      	movs	r3, #100	; 0x64
 8010aec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010aee:	693b      	ldr	r3, [r7, #16]
 8010af0:	2b64      	cmp	r3, #100	; 0x64
 8010af2:	d009      	beq.n	8010b08 <xTaskCreateStatic+0x60>
 8010af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010af8:	f383 8811 	msr	BASEPRI, r3
 8010afc:	f3bf 8f6f 	isb	sy
 8010b00:	f3bf 8f4f 	dsb	sy
 8010b04:	61bb      	str	r3, [r7, #24]
 8010b06:	e7fe      	b.n	8010b06 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d01e      	beq.n	8010b4c <xTaskCreateStatic+0xa4>
 8010b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d01b      	beq.n	8010b4c <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b16:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010b1c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b20:	2202      	movs	r2, #2
 8010b22:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010b26:	2300      	movs	r3, #0
 8010b28:	9303      	str	r3, [sp, #12]
 8010b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b2c:	9302      	str	r3, [sp, #8]
 8010b2e:	f107 0314 	add.w	r3, r7, #20
 8010b32:	9301      	str	r3, [sp, #4]
 8010b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b36:	9300      	str	r3, [sp, #0]
 8010b38:	683b      	ldr	r3, [r7, #0]
 8010b3a:	687a      	ldr	r2, [r7, #4]
 8010b3c:	68b9      	ldr	r1, [r7, #8]
 8010b3e:	68f8      	ldr	r0, [r7, #12]
 8010b40:	f000 f850 	bl	8010be4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010b44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010b46:	f000 f8d9 	bl	8010cfc <prvAddNewTaskToReadyList>
 8010b4a:	e001      	b.n	8010b50 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8010b4c:	2300      	movs	r3, #0
 8010b4e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010b50:	697b      	ldr	r3, [r7, #20]
	}
 8010b52:	4618      	mov	r0, r3
 8010b54:	3728      	adds	r7, #40	; 0x28
 8010b56:	46bd      	mov	sp, r7
 8010b58:	bd80      	pop	{r7, pc}

08010b5a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010b5a:	b580      	push	{r7, lr}
 8010b5c:	b08c      	sub	sp, #48	; 0x30
 8010b5e:	af04      	add	r7, sp, #16
 8010b60:	60f8      	str	r0, [r7, #12]
 8010b62:	60b9      	str	r1, [r7, #8]
 8010b64:	603b      	str	r3, [r7, #0]
 8010b66:	4613      	mov	r3, r2
 8010b68:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010b6a:	88fb      	ldrh	r3, [r7, #6]
 8010b6c:	009b      	lsls	r3, r3, #2
 8010b6e:	4618      	mov	r0, r3
 8010b70:	f7fe fa4e 	bl	800f010 <pvPortMalloc>
 8010b74:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010b76:	697b      	ldr	r3, [r7, #20]
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d00e      	beq.n	8010b9a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8010b7c:	2064      	movs	r0, #100	; 0x64
 8010b7e:	f7fe fa47 	bl	800f010 <pvPortMalloc>
 8010b82:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010b84:	69fb      	ldr	r3, [r7, #28]
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d003      	beq.n	8010b92 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010b8a:	69fb      	ldr	r3, [r7, #28]
 8010b8c:	697a      	ldr	r2, [r7, #20]
 8010b8e:	631a      	str	r2, [r3, #48]	; 0x30
 8010b90:	e005      	b.n	8010b9e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010b92:	6978      	ldr	r0, [r7, #20]
 8010b94:	f7fe fb02 	bl	800f19c <vPortFree>
 8010b98:	e001      	b.n	8010b9e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010b9a:	2300      	movs	r3, #0
 8010b9c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010b9e:	69fb      	ldr	r3, [r7, #28]
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d017      	beq.n	8010bd4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010ba4:	69fb      	ldr	r3, [r7, #28]
 8010ba6:	2200      	movs	r2, #0
 8010ba8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010bac:	88fa      	ldrh	r2, [r7, #6]
 8010bae:	2300      	movs	r3, #0
 8010bb0:	9303      	str	r3, [sp, #12]
 8010bb2:	69fb      	ldr	r3, [r7, #28]
 8010bb4:	9302      	str	r3, [sp, #8]
 8010bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bb8:	9301      	str	r3, [sp, #4]
 8010bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bbc:	9300      	str	r3, [sp, #0]
 8010bbe:	683b      	ldr	r3, [r7, #0]
 8010bc0:	68b9      	ldr	r1, [r7, #8]
 8010bc2:	68f8      	ldr	r0, [r7, #12]
 8010bc4:	f000 f80e 	bl	8010be4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010bc8:	69f8      	ldr	r0, [r7, #28]
 8010bca:	f000 f897 	bl	8010cfc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010bce:	2301      	movs	r3, #1
 8010bd0:	61bb      	str	r3, [r7, #24]
 8010bd2:	e002      	b.n	8010bda <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8010bd8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010bda:	69bb      	ldr	r3, [r7, #24]
	}
 8010bdc:	4618      	mov	r0, r3
 8010bde:	3720      	adds	r7, #32
 8010be0:	46bd      	mov	sp, r7
 8010be2:	bd80      	pop	{r7, pc}

08010be4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010be4:	b580      	push	{r7, lr}
 8010be6:	b088      	sub	sp, #32
 8010be8:	af00      	add	r7, sp, #0
 8010bea:	60f8      	str	r0, [r7, #12]
 8010bec:	60b9      	str	r1, [r7, #8]
 8010bee:	607a      	str	r2, [r7, #4]
 8010bf0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bf4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	009b      	lsls	r3, r3, #2
 8010bfa:	461a      	mov	r2, r3
 8010bfc:	21a5      	movs	r1, #165	; 0xa5
 8010bfe:	f005 f9b0 	bl	8015f62 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8010c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010c0c:	3b01      	subs	r3, #1
 8010c0e:	009b      	lsls	r3, r3, #2
 8010c10:	4413      	add	r3, r2
 8010c12:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8010c14:	69bb      	ldr	r3, [r7, #24]
 8010c16:	f023 0307 	bic.w	r3, r3, #7
 8010c1a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010c1c:	69bb      	ldr	r3, [r7, #24]
 8010c1e:	f003 0307 	and.w	r3, r3, #7
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d009      	beq.n	8010c3a <prvInitialiseNewTask+0x56>
 8010c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c2a:	f383 8811 	msr	BASEPRI, r3
 8010c2e:	f3bf 8f6f 	isb	sy
 8010c32:	f3bf 8f4f 	dsb	sy
 8010c36:	617b      	str	r3, [r7, #20]
 8010c38:	e7fe      	b.n	8010c38 <prvInitialiseNewTask+0x54>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8010c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c3c:	69ba      	ldr	r2, [r7, #24]
 8010c3e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010c40:	2300      	movs	r3, #0
 8010c42:	61fb      	str	r3, [r7, #28]
 8010c44:	e012      	b.n	8010c6c <prvInitialiseNewTask+0x88>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010c46:	68ba      	ldr	r2, [r7, #8]
 8010c48:	69fb      	ldr	r3, [r7, #28]
 8010c4a:	4413      	add	r3, r2
 8010c4c:	7819      	ldrb	r1, [r3, #0]
 8010c4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c50:	69fb      	ldr	r3, [r7, #28]
 8010c52:	4413      	add	r3, r2
 8010c54:	3334      	adds	r3, #52	; 0x34
 8010c56:	460a      	mov	r2, r1
 8010c58:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8010c5a:	68ba      	ldr	r2, [r7, #8]
 8010c5c:	69fb      	ldr	r3, [r7, #28]
 8010c5e:	4413      	add	r3, r2
 8010c60:	781b      	ldrb	r3, [r3, #0]
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d006      	beq.n	8010c74 <prvInitialiseNewTask+0x90>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010c66:	69fb      	ldr	r3, [r7, #28]
 8010c68:	3301      	adds	r3, #1
 8010c6a:	61fb      	str	r3, [r7, #28]
 8010c6c:	69fb      	ldr	r3, [r7, #28]
 8010c6e:	2b0f      	cmp	r3, #15
 8010c70:	d9e9      	bls.n	8010c46 <prvInitialiseNewTask+0x62>
 8010c72:	e000      	b.n	8010c76 <prvInitialiseNewTask+0x92>
		{
			break;
 8010c74:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c78:	2200      	movs	r2, #0
 8010c7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c80:	2b37      	cmp	r3, #55	; 0x37
 8010c82:	d901      	bls.n	8010c88 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010c84:	2337      	movs	r3, #55	; 0x37
 8010c86:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010c8c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010c92:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 8010c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c96:	2200      	movs	r2, #0
 8010c98:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c9c:	3304      	adds	r3, #4
 8010c9e:	4618      	mov	r0, r3
 8010ca0:	f7fe fbb2 	bl	800f408 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ca6:	3318      	adds	r3, #24
 8010ca8:	4618      	mov	r0, r3
 8010caa:	f7fe fbad 	bl	800f408 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010cb2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cb6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cbc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010cc2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8010cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cc6:	2200      	movs	r2, #0
 8010cc8:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ccc:	2200      	movs	r2, #0
 8010cce:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cd2:	2200      	movs	r2, #0
 8010cd4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010cd8:	683a      	ldr	r2, [r7, #0]
 8010cda:	68f9      	ldr	r1, [r7, #12]
 8010cdc:	69b8      	ldr	r0, [r7, #24]
 8010cde:	f7fe fc27 	bl	800f530 <pxPortInitialiseStack>
 8010ce2:	4602      	mov	r2, r0
 8010ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ce6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8010ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d002      	beq.n	8010cf4 <prvInitialiseNewTask+0x110>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010cf2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010cf4:	bf00      	nop
 8010cf6:	3720      	adds	r7, #32
 8010cf8:	46bd      	mov	sp, r7
 8010cfa:	bd80      	pop	{r7, pc}

08010cfc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010cfc:	b580      	push	{r7, lr}
 8010cfe:	b082      	sub	sp, #8
 8010d00:	af00      	add	r7, sp, #0
 8010d02:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010d04:	f7fe fd3a 	bl	800f77c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010d08:	4b2d      	ldr	r3, [pc, #180]	; (8010dc0 <prvAddNewTaskToReadyList+0xc4>)
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	3301      	adds	r3, #1
 8010d0e:	4a2c      	ldr	r2, [pc, #176]	; (8010dc0 <prvAddNewTaskToReadyList+0xc4>)
 8010d10:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010d12:	4b2c      	ldr	r3, [pc, #176]	; (8010dc4 <prvAddNewTaskToReadyList+0xc8>)
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d109      	bne.n	8010d2e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010d1a:	4a2a      	ldr	r2, [pc, #168]	; (8010dc4 <prvAddNewTaskToReadyList+0xc8>)
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010d20:	4b27      	ldr	r3, [pc, #156]	; (8010dc0 <prvAddNewTaskToReadyList+0xc4>)
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	2b01      	cmp	r3, #1
 8010d26:	d110      	bne.n	8010d4a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010d28:	f000 fcf8 	bl	801171c <prvInitialiseTaskLists>
 8010d2c:	e00d      	b.n	8010d4a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010d2e:	4b26      	ldr	r3, [pc, #152]	; (8010dc8 <prvAddNewTaskToReadyList+0xcc>)
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d109      	bne.n	8010d4a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010d36:	4b23      	ldr	r3, [pc, #140]	; (8010dc4 <prvAddNewTaskToReadyList+0xc8>)
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d40:	429a      	cmp	r2, r3
 8010d42:	d802      	bhi.n	8010d4a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010d44:	4a1f      	ldr	r2, [pc, #124]	; (8010dc4 <prvAddNewTaskToReadyList+0xc8>)
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010d4a:	4b20      	ldr	r3, [pc, #128]	; (8010dcc <prvAddNewTaskToReadyList+0xd0>)
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	3301      	adds	r3, #1
 8010d50:	4a1e      	ldr	r2, [pc, #120]	; (8010dcc <prvAddNewTaskToReadyList+0xd0>)
 8010d52:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8010d54:	4b1d      	ldr	r3, [pc, #116]	; (8010dcc <prvAddNewTaskToReadyList+0xd0>)
 8010d56:	681a      	ldr	r2, [r3, #0]
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d60:	4b1b      	ldr	r3, [pc, #108]	; (8010dd0 <prvAddNewTaskToReadyList+0xd4>)
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	429a      	cmp	r2, r3
 8010d66:	d903      	bls.n	8010d70 <prvAddNewTaskToReadyList+0x74>
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d6c:	4a18      	ldr	r2, [pc, #96]	; (8010dd0 <prvAddNewTaskToReadyList+0xd4>)
 8010d6e:	6013      	str	r3, [r2, #0]
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d74:	4613      	mov	r3, r2
 8010d76:	009b      	lsls	r3, r3, #2
 8010d78:	4413      	add	r3, r2
 8010d7a:	009b      	lsls	r3, r3, #2
 8010d7c:	4a15      	ldr	r2, [pc, #84]	; (8010dd4 <prvAddNewTaskToReadyList+0xd8>)
 8010d7e:	441a      	add	r2, r3
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	3304      	adds	r3, #4
 8010d84:	4619      	mov	r1, r3
 8010d86:	4610      	mov	r0, r2
 8010d88:	f7fe fb4b 	bl	800f422 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010d8c:	f7fe fd24 	bl	800f7d8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010d90:	4b0d      	ldr	r3, [pc, #52]	; (8010dc8 <prvAddNewTaskToReadyList+0xcc>)
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d00e      	beq.n	8010db6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010d98:	4b0a      	ldr	r3, [pc, #40]	; (8010dc4 <prvAddNewTaskToReadyList+0xc8>)
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010da2:	429a      	cmp	r2, r3
 8010da4:	d207      	bcs.n	8010db6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010da6:	4b0c      	ldr	r3, [pc, #48]	; (8010dd8 <prvAddNewTaskToReadyList+0xdc>)
 8010da8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010dac:	601a      	str	r2, [r3, #0]
 8010dae:	f3bf 8f4f 	dsb	sy
 8010db2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010db6:	bf00      	nop
 8010db8:	3708      	adds	r7, #8
 8010dba:	46bd      	mov	sp, r7
 8010dbc:	bd80      	pop	{r7, pc}
 8010dbe:	bf00      	nop
 8010dc0:	200272d4 	.word	0x200272d4
 8010dc4:	20026e00 	.word	0x20026e00
 8010dc8:	200272e0 	.word	0x200272e0
 8010dcc:	200272f0 	.word	0x200272f0
 8010dd0:	200272dc 	.word	0x200272dc
 8010dd4:	20026e04 	.word	0x20026e04
 8010dd8:	e000ed04 	.word	0xe000ed04

08010ddc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010ddc:	b580      	push	{r7, lr}
 8010dde:	b084      	sub	sp, #16
 8010de0:	af00      	add	r7, sp, #0
 8010de2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010de4:	2300      	movs	r3, #0
 8010de6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d016      	beq.n	8010e1c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010dee:	4b13      	ldr	r3, [pc, #76]	; (8010e3c <vTaskDelay+0x60>)
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d009      	beq.n	8010e0a <vTaskDelay+0x2e>
 8010df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dfa:	f383 8811 	msr	BASEPRI, r3
 8010dfe:	f3bf 8f6f 	isb	sy
 8010e02:	f3bf 8f4f 	dsb	sy
 8010e06:	60bb      	str	r3, [r7, #8]
 8010e08:	e7fe      	b.n	8010e08 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8010e0a:	f000 f881 	bl	8010f10 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010e0e:	2100      	movs	r1, #0
 8010e10:	6878      	ldr	r0, [r7, #4]
 8010e12:	f001 f8a9 	bl	8011f68 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010e16:	f000 f8c1 	bl	8010f9c <xTaskResumeAll>
 8010e1a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d107      	bne.n	8010e32 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8010e22:	4b07      	ldr	r3, [pc, #28]	; (8010e40 <vTaskDelay+0x64>)
 8010e24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010e28:	601a      	str	r2, [r3, #0]
 8010e2a:	f3bf 8f4f 	dsb	sy
 8010e2e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010e32:	bf00      	nop
 8010e34:	3710      	adds	r7, #16
 8010e36:	46bd      	mov	sp, r7
 8010e38:	bd80      	pop	{r7, pc}
 8010e3a:	bf00      	nop
 8010e3c:	200272fc 	.word	0x200272fc
 8010e40:	e000ed04 	.word	0xe000ed04

08010e44 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010e44:	b580      	push	{r7, lr}
 8010e46:	b08a      	sub	sp, #40	; 0x28
 8010e48:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010e4a:	2300      	movs	r3, #0
 8010e4c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010e4e:	2300      	movs	r3, #0
 8010e50:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010e52:	463a      	mov	r2, r7
 8010e54:	1d39      	adds	r1, r7, #4
 8010e56:	f107 0308 	add.w	r3, r7, #8
 8010e5a:	4618      	mov	r0, r3
 8010e5c:	f7fe f8a4 	bl	800efa8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010e60:	6839      	ldr	r1, [r7, #0]
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	68ba      	ldr	r2, [r7, #8]
 8010e66:	9202      	str	r2, [sp, #8]
 8010e68:	9301      	str	r3, [sp, #4]
 8010e6a:	2300      	movs	r3, #0
 8010e6c:	9300      	str	r3, [sp, #0]
 8010e6e:	2300      	movs	r3, #0
 8010e70:	460a      	mov	r2, r1
 8010e72:	4921      	ldr	r1, [pc, #132]	; (8010ef8 <vTaskStartScheduler+0xb4>)
 8010e74:	4821      	ldr	r0, [pc, #132]	; (8010efc <vTaskStartScheduler+0xb8>)
 8010e76:	f7ff fe17 	bl	8010aa8 <xTaskCreateStatic>
 8010e7a:	4602      	mov	r2, r0
 8010e7c:	4b20      	ldr	r3, [pc, #128]	; (8010f00 <vTaskStartScheduler+0xbc>)
 8010e7e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010e80:	4b1f      	ldr	r3, [pc, #124]	; (8010f00 <vTaskStartScheduler+0xbc>)
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d002      	beq.n	8010e8e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010e88:	2301      	movs	r3, #1
 8010e8a:	617b      	str	r3, [r7, #20]
 8010e8c:	e001      	b.n	8010e92 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010e8e:	2300      	movs	r3, #0
 8010e90:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8010e92:	697b      	ldr	r3, [r7, #20]
 8010e94:	2b01      	cmp	r3, #1
 8010e96:	d102      	bne.n	8010e9e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8010e98:	f001 f8ba 	bl	8012010 <xTimerCreateTimerTask>
 8010e9c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010e9e:	697b      	ldr	r3, [r7, #20]
 8010ea0:	2b01      	cmp	r3, #1
 8010ea2:	d117      	bne.n	8010ed4 <vTaskStartScheduler+0x90>
 8010ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ea8:	f383 8811 	msr	BASEPRI, r3
 8010eac:	f3bf 8f6f 	isb	sy
 8010eb0:	f3bf 8f4f 	dsb	sy
 8010eb4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010eb6:	4b13      	ldr	r3, [pc, #76]	; (8010f04 <vTaskStartScheduler+0xc0>)
 8010eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8010ebc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010ebe:	4b12      	ldr	r3, [pc, #72]	; (8010f08 <vTaskStartScheduler+0xc4>)
 8010ec0:	2201      	movs	r2, #1
 8010ec2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8010ec4:	4b11      	ldr	r3, [pc, #68]	; (8010f0c <vTaskStartScheduler+0xc8>)
 8010ec6:	2200      	movs	r2, #0
 8010ec8:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8010eca:	f7f0 f9b0 	bl	800122e <configureTimerForRunTimeStats>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010ece:	f7fe fbb7 	bl	800f640 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010ed2:	e00d      	b.n	8010ef0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010ed4:	697b      	ldr	r3, [r7, #20]
 8010ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010eda:	d109      	bne.n	8010ef0 <vTaskStartScheduler+0xac>
 8010edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ee0:	f383 8811 	msr	BASEPRI, r3
 8010ee4:	f3bf 8f6f 	isb	sy
 8010ee8:	f3bf 8f4f 	dsb	sy
 8010eec:	60fb      	str	r3, [r7, #12]
 8010eee:	e7fe      	b.n	8010eee <vTaskStartScheduler+0xaa>
}
 8010ef0:	bf00      	nop
 8010ef2:	3718      	adds	r7, #24
 8010ef4:	46bd      	mov	sp, r7
 8010ef6:	bd80      	pop	{r7, pc}
 8010ef8:	080172f8 	.word	0x080172f8
 8010efc:	08011645 	.word	0x08011645
 8010f00:	200272f8 	.word	0x200272f8
 8010f04:	200272f4 	.word	0x200272f4
 8010f08:	200272e0 	.word	0x200272e0
 8010f0c:	200272d8 	.word	0x200272d8

08010f10 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010f10:	b480      	push	{r7}
 8010f12:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8010f14:	4b04      	ldr	r3, [pc, #16]	; (8010f28 <vTaskSuspendAll+0x18>)
 8010f16:	681b      	ldr	r3, [r3, #0]
 8010f18:	3301      	adds	r3, #1
 8010f1a:	4a03      	ldr	r2, [pc, #12]	; (8010f28 <vTaskSuspendAll+0x18>)
 8010f1c:	6013      	str	r3, [r2, #0]
}
 8010f1e:	bf00      	nop
 8010f20:	46bd      	mov	sp, r7
 8010f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f26:	4770      	bx	lr
 8010f28:	200272fc 	.word	0x200272fc

08010f2c <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 8010f2c:	b480      	push	{r7}
 8010f2e:	b083      	sub	sp, #12
 8010f30:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 8010f32:	2300      	movs	r3, #0
 8010f34:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 8010f36:	4b14      	ldr	r3, [pc, #80]	; (8010f88 <prvGetExpectedIdleTime+0x5c>)
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d001      	beq.n	8010f42 <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 8010f3e:	2301      	movs	r3, #1
 8010f40:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 8010f42:	4b12      	ldr	r3, [pc, #72]	; (8010f8c <prvGetExpectedIdleTime+0x60>)
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d002      	beq.n	8010f52 <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 8010f4c:	2300      	movs	r3, #0
 8010f4e:	607b      	str	r3, [r7, #4]
 8010f50:	e012      	b.n	8010f78 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 8010f52:	4b0f      	ldr	r3, [pc, #60]	; (8010f90 <prvGetExpectedIdleTime+0x64>)
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	2b01      	cmp	r3, #1
 8010f58:	d902      	bls.n	8010f60 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 8010f5a:	2300      	movs	r3, #0
 8010f5c:	607b      	str	r3, [r7, #4]
 8010f5e:	e00b      	b.n	8010f78 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 8010f60:	683b      	ldr	r3, [r7, #0]
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d002      	beq.n	8010f6c <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 8010f66:	2300      	movs	r3, #0
 8010f68:	607b      	str	r3, [r7, #4]
 8010f6a:	e005      	b.n	8010f78 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{

			xReturn = xNextTaskUnblockTime - xTickCount;
 8010f6c:	4b09      	ldr	r3, [pc, #36]	; (8010f94 <prvGetExpectedIdleTime+0x68>)
 8010f6e:	681a      	ldr	r2, [r3, #0]
 8010f70:	4b09      	ldr	r3, [pc, #36]	; (8010f98 <prvGetExpectedIdleTime+0x6c>)
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	1ad3      	subs	r3, r2, r3
 8010f76:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 8010f78:	687b      	ldr	r3, [r7, #4]
	}
 8010f7a:	4618      	mov	r0, r3
 8010f7c:	370c      	adds	r7, #12
 8010f7e:	46bd      	mov	sp, r7
 8010f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f84:	4770      	bx	lr
 8010f86:	bf00      	nop
 8010f88:	200272dc 	.word	0x200272dc
 8010f8c:	20026e00 	.word	0x20026e00
 8010f90:	20026e04 	.word	0x20026e04
 8010f94:	200272f4 	.word	0x200272f4
 8010f98:	200272d8 	.word	0x200272d8

08010f9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010f9c:	b580      	push	{r7, lr}
 8010f9e:	b084      	sub	sp, #16
 8010fa0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010fa2:	2300      	movs	r3, #0
 8010fa4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010fa6:	2300      	movs	r3, #0
 8010fa8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010faa:	4b41      	ldr	r3, [pc, #260]	; (80110b0 <xTaskResumeAll+0x114>)
 8010fac:	681b      	ldr	r3, [r3, #0]
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d109      	bne.n	8010fc6 <xTaskResumeAll+0x2a>
 8010fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fb6:	f383 8811 	msr	BASEPRI, r3
 8010fba:	f3bf 8f6f 	isb	sy
 8010fbe:	f3bf 8f4f 	dsb	sy
 8010fc2:	603b      	str	r3, [r7, #0]
 8010fc4:	e7fe      	b.n	8010fc4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010fc6:	f7fe fbd9 	bl	800f77c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010fca:	4b39      	ldr	r3, [pc, #228]	; (80110b0 <xTaskResumeAll+0x114>)
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	3b01      	subs	r3, #1
 8010fd0:	4a37      	ldr	r2, [pc, #220]	; (80110b0 <xTaskResumeAll+0x114>)
 8010fd2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010fd4:	4b36      	ldr	r3, [pc, #216]	; (80110b0 <xTaskResumeAll+0x114>)
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d162      	bne.n	80110a2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010fdc:	4b35      	ldr	r3, [pc, #212]	; (80110b4 <xTaskResumeAll+0x118>)
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d05e      	beq.n	80110a2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010fe4:	e02f      	b.n	8011046 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8010fe6:	4b34      	ldr	r3, [pc, #208]	; (80110b8 <xTaskResumeAll+0x11c>)
 8010fe8:	68db      	ldr	r3, [r3, #12]
 8010fea:	68db      	ldr	r3, [r3, #12]
 8010fec:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	3318      	adds	r3, #24
 8010ff2:	4618      	mov	r0, r3
 8010ff4:	f7fe fa72 	bl	800f4dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	3304      	adds	r3, #4
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	f7fe fa6d 	bl	800f4dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011006:	4b2d      	ldr	r3, [pc, #180]	; (80110bc <xTaskResumeAll+0x120>)
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	429a      	cmp	r2, r3
 801100c:	d903      	bls.n	8011016 <xTaskResumeAll+0x7a>
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011012:	4a2a      	ldr	r2, [pc, #168]	; (80110bc <xTaskResumeAll+0x120>)
 8011014:	6013      	str	r3, [r2, #0]
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801101a:	4613      	mov	r3, r2
 801101c:	009b      	lsls	r3, r3, #2
 801101e:	4413      	add	r3, r2
 8011020:	009b      	lsls	r3, r3, #2
 8011022:	4a27      	ldr	r2, [pc, #156]	; (80110c0 <xTaskResumeAll+0x124>)
 8011024:	441a      	add	r2, r3
 8011026:	68fb      	ldr	r3, [r7, #12]
 8011028:	3304      	adds	r3, #4
 801102a:	4619      	mov	r1, r3
 801102c:	4610      	mov	r0, r2
 801102e:	f7fe f9f8 	bl	800f422 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011036:	4b23      	ldr	r3, [pc, #140]	; (80110c4 <xTaskResumeAll+0x128>)
 8011038:	681b      	ldr	r3, [r3, #0]
 801103a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801103c:	429a      	cmp	r2, r3
 801103e:	d302      	bcc.n	8011046 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8011040:	4b21      	ldr	r3, [pc, #132]	; (80110c8 <xTaskResumeAll+0x12c>)
 8011042:	2201      	movs	r2, #1
 8011044:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011046:	4b1c      	ldr	r3, [pc, #112]	; (80110b8 <xTaskResumeAll+0x11c>)
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	2b00      	cmp	r3, #0
 801104c:	d1cb      	bne.n	8010fe6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	2b00      	cmp	r3, #0
 8011052:	d001      	beq.n	8011058 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011054:	f000 fbfc 	bl	8011850 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8011058:	4b1c      	ldr	r3, [pc, #112]	; (80110cc <xTaskResumeAll+0x130>)
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	2b00      	cmp	r3, #0
 8011062:	d010      	beq.n	8011086 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011064:	f000 f86c 	bl	8011140 <xTaskIncrementTick>
 8011068:	4603      	mov	r3, r0
 801106a:	2b00      	cmp	r3, #0
 801106c:	d002      	beq.n	8011074 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 801106e:	4b16      	ldr	r3, [pc, #88]	; (80110c8 <xTaskResumeAll+0x12c>)
 8011070:	2201      	movs	r2, #1
 8011072:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	3b01      	subs	r3, #1
 8011078:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	2b00      	cmp	r3, #0
 801107e:	d1f1      	bne.n	8011064 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8011080:	4b12      	ldr	r3, [pc, #72]	; (80110cc <xTaskResumeAll+0x130>)
 8011082:	2200      	movs	r2, #0
 8011084:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011086:	4b10      	ldr	r3, [pc, #64]	; (80110c8 <xTaskResumeAll+0x12c>)
 8011088:	681b      	ldr	r3, [r3, #0]
 801108a:	2b00      	cmp	r3, #0
 801108c:	d009      	beq.n	80110a2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801108e:	2301      	movs	r3, #1
 8011090:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011092:	4b0f      	ldr	r3, [pc, #60]	; (80110d0 <xTaskResumeAll+0x134>)
 8011094:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011098:	601a      	str	r2, [r3, #0]
 801109a:	f3bf 8f4f 	dsb	sy
 801109e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80110a2:	f7fe fb99 	bl	800f7d8 <vPortExitCritical>

	return xAlreadyYielded;
 80110a6:	68bb      	ldr	r3, [r7, #8]
}
 80110a8:	4618      	mov	r0, r3
 80110aa:	3710      	adds	r7, #16
 80110ac:	46bd      	mov	sp, r7
 80110ae:	bd80      	pop	{r7, pc}
 80110b0:	200272fc 	.word	0x200272fc
 80110b4:	200272d4 	.word	0x200272d4
 80110b8:	20027294 	.word	0x20027294
 80110bc:	200272dc 	.word	0x200272dc
 80110c0:	20026e04 	.word	0x20026e04
 80110c4:	20026e00 	.word	0x20026e00
 80110c8:	200272e8 	.word	0x200272e8
 80110cc:	200272e4 	.word	0x200272e4
 80110d0:	e000ed04 	.word	0xe000ed04

080110d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80110d4:	b480      	push	{r7}
 80110d6:	b083      	sub	sp, #12
 80110d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80110da:	4b05      	ldr	r3, [pc, #20]	; (80110f0 <xTaskGetTickCount+0x1c>)
 80110dc:	681b      	ldr	r3, [r3, #0]
 80110de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80110e0:	687b      	ldr	r3, [r7, #4]
}
 80110e2:	4618      	mov	r0, r3
 80110e4:	370c      	adds	r7, #12
 80110e6:	46bd      	mov	sp, r7
 80110e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ec:	4770      	bx	lr
 80110ee:	bf00      	nop
 80110f0:	200272d8 	.word	0x200272d8

080110f4 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 80110f4:	b480      	push	{r7}
 80110f6:	b085      	sub	sp, #20
 80110f8:	af00      	add	r7, sp, #0
 80110fa:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 80110fc:	4b0e      	ldr	r3, [pc, #56]	; (8011138 <vTaskStepTick+0x44>)
 80110fe:	681a      	ldr	r2, [r3, #0]
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	441a      	add	r2, r3
 8011104:	4b0d      	ldr	r3, [pc, #52]	; (801113c <vTaskStepTick+0x48>)
 8011106:	681b      	ldr	r3, [r3, #0]
 8011108:	429a      	cmp	r2, r3
 801110a:	d909      	bls.n	8011120 <vTaskStepTick+0x2c>
 801110c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011110:	f383 8811 	msr	BASEPRI, r3
 8011114:	f3bf 8f6f 	isb	sy
 8011118:	f3bf 8f4f 	dsb	sy
 801111c:	60fb      	str	r3, [r7, #12]
 801111e:	e7fe      	b.n	801111e <vTaskStepTick+0x2a>
		xTickCount += xTicksToJump;
 8011120:	4b05      	ldr	r3, [pc, #20]	; (8011138 <vTaskStepTick+0x44>)
 8011122:	681a      	ldr	r2, [r3, #0]
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	4413      	add	r3, r2
 8011128:	4a03      	ldr	r2, [pc, #12]	; (8011138 <vTaskStepTick+0x44>)
 801112a:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 801112c:	bf00      	nop
 801112e:	3714      	adds	r7, #20
 8011130:	46bd      	mov	sp, r7
 8011132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011136:	4770      	bx	lr
 8011138:	200272d8 	.word	0x200272d8
 801113c:	200272f4 	.word	0x200272f4

08011140 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011140:	b580      	push	{r7, lr}
 8011142:	b086      	sub	sp, #24
 8011144:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011146:	2300      	movs	r3, #0
 8011148:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801114a:	4b55      	ldr	r3, [pc, #340]	; (80112a0 <xTaskIncrementTick+0x160>)
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	2b00      	cmp	r3, #0
 8011150:	f040 8093 	bne.w	801127a <xTaskIncrementTick+0x13a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011154:	4b53      	ldr	r3, [pc, #332]	; (80112a4 <xTaskIncrementTick+0x164>)
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	3301      	adds	r3, #1
 801115a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801115c:	4a51      	ldr	r2, [pc, #324]	; (80112a4 <xTaskIncrementTick+0x164>)
 801115e:	693b      	ldr	r3, [r7, #16]
 8011160:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011162:	693b      	ldr	r3, [r7, #16]
 8011164:	2b00      	cmp	r3, #0
 8011166:	d11f      	bne.n	80111a8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8011168:	4b4f      	ldr	r3, [pc, #316]	; (80112a8 <xTaskIncrementTick+0x168>)
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	2b00      	cmp	r3, #0
 8011170:	d009      	beq.n	8011186 <xTaskIncrementTick+0x46>
 8011172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011176:	f383 8811 	msr	BASEPRI, r3
 801117a:	f3bf 8f6f 	isb	sy
 801117e:	f3bf 8f4f 	dsb	sy
 8011182:	603b      	str	r3, [r7, #0]
 8011184:	e7fe      	b.n	8011184 <xTaskIncrementTick+0x44>
 8011186:	4b48      	ldr	r3, [pc, #288]	; (80112a8 <xTaskIncrementTick+0x168>)
 8011188:	681b      	ldr	r3, [r3, #0]
 801118a:	60fb      	str	r3, [r7, #12]
 801118c:	4b47      	ldr	r3, [pc, #284]	; (80112ac <xTaskIncrementTick+0x16c>)
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	4a45      	ldr	r2, [pc, #276]	; (80112a8 <xTaskIncrementTick+0x168>)
 8011192:	6013      	str	r3, [r2, #0]
 8011194:	4a45      	ldr	r2, [pc, #276]	; (80112ac <xTaskIncrementTick+0x16c>)
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	6013      	str	r3, [r2, #0]
 801119a:	4b45      	ldr	r3, [pc, #276]	; (80112b0 <xTaskIncrementTick+0x170>)
 801119c:	681b      	ldr	r3, [r3, #0]
 801119e:	3301      	adds	r3, #1
 80111a0:	4a43      	ldr	r2, [pc, #268]	; (80112b0 <xTaskIncrementTick+0x170>)
 80111a2:	6013      	str	r3, [r2, #0]
 80111a4:	f000 fb54 	bl	8011850 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80111a8:	4b42      	ldr	r3, [pc, #264]	; (80112b4 <xTaskIncrementTick+0x174>)
 80111aa:	681b      	ldr	r3, [r3, #0]
 80111ac:	693a      	ldr	r2, [r7, #16]
 80111ae:	429a      	cmp	r2, r3
 80111b0:	d34e      	bcc.n	8011250 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80111b2:	4b3d      	ldr	r3, [pc, #244]	; (80112a8 <xTaskIncrementTick+0x168>)
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d101      	bne.n	80111c0 <xTaskIncrementTick+0x80>
 80111bc:	2301      	movs	r3, #1
 80111be:	e000      	b.n	80111c2 <xTaskIncrementTick+0x82>
 80111c0:	2300      	movs	r3, #0
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d004      	beq.n	80111d0 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80111c6:	4b3b      	ldr	r3, [pc, #236]	; (80112b4 <xTaskIncrementTick+0x174>)
 80111c8:	f04f 32ff 	mov.w	r2, #4294967295
 80111cc:	601a      	str	r2, [r3, #0]
					break;
 80111ce:	e03f      	b.n	8011250 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80111d0:	4b35      	ldr	r3, [pc, #212]	; (80112a8 <xTaskIncrementTick+0x168>)
 80111d2:	681b      	ldr	r3, [r3, #0]
 80111d4:	68db      	ldr	r3, [r3, #12]
 80111d6:	68db      	ldr	r3, [r3, #12]
 80111d8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80111da:	68bb      	ldr	r3, [r7, #8]
 80111dc:	685b      	ldr	r3, [r3, #4]
 80111de:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80111e0:	693a      	ldr	r2, [r7, #16]
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	429a      	cmp	r2, r3
 80111e6:	d203      	bcs.n	80111f0 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80111e8:	4a32      	ldr	r2, [pc, #200]	; (80112b4 <xTaskIncrementTick+0x174>)
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	6013      	str	r3, [r2, #0]
						break;
 80111ee:	e02f      	b.n	8011250 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80111f0:	68bb      	ldr	r3, [r7, #8]
 80111f2:	3304      	adds	r3, #4
 80111f4:	4618      	mov	r0, r3
 80111f6:	f7fe f971 	bl	800f4dc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80111fa:	68bb      	ldr	r3, [r7, #8]
 80111fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d004      	beq.n	801120c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011202:	68bb      	ldr	r3, [r7, #8]
 8011204:	3318      	adds	r3, #24
 8011206:	4618      	mov	r0, r3
 8011208:	f7fe f968 	bl	800f4dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801120c:	68bb      	ldr	r3, [r7, #8]
 801120e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011210:	4b29      	ldr	r3, [pc, #164]	; (80112b8 <xTaskIncrementTick+0x178>)
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	429a      	cmp	r2, r3
 8011216:	d903      	bls.n	8011220 <xTaskIncrementTick+0xe0>
 8011218:	68bb      	ldr	r3, [r7, #8]
 801121a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801121c:	4a26      	ldr	r2, [pc, #152]	; (80112b8 <xTaskIncrementTick+0x178>)
 801121e:	6013      	str	r3, [r2, #0]
 8011220:	68bb      	ldr	r3, [r7, #8]
 8011222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011224:	4613      	mov	r3, r2
 8011226:	009b      	lsls	r3, r3, #2
 8011228:	4413      	add	r3, r2
 801122a:	009b      	lsls	r3, r3, #2
 801122c:	4a23      	ldr	r2, [pc, #140]	; (80112bc <xTaskIncrementTick+0x17c>)
 801122e:	441a      	add	r2, r3
 8011230:	68bb      	ldr	r3, [r7, #8]
 8011232:	3304      	adds	r3, #4
 8011234:	4619      	mov	r1, r3
 8011236:	4610      	mov	r0, r2
 8011238:	f7fe f8f3 	bl	800f422 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801123c:	68bb      	ldr	r3, [r7, #8]
 801123e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011240:	4b1f      	ldr	r3, [pc, #124]	; (80112c0 <xTaskIncrementTick+0x180>)
 8011242:	681b      	ldr	r3, [r3, #0]
 8011244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011246:	429a      	cmp	r2, r3
 8011248:	d3b3      	bcc.n	80111b2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 801124a:	2301      	movs	r3, #1
 801124c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801124e:	e7b0      	b.n	80111b2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011250:	4b1b      	ldr	r3, [pc, #108]	; (80112c0 <xTaskIncrementTick+0x180>)
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011256:	4919      	ldr	r1, [pc, #100]	; (80112bc <xTaskIncrementTick+0x17c>)
 8011258:	4613      	mov	r3, r2
 801125a:	009b      	lsls	r3, r3, #2
 801125c:	4413      	add	r3, r2
 801125e:	009b      	lsls	r3, r3, #2
 8011260:	440b      	add	r3, r1
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	2b01      	cmp	r3, #1
 8011266:	d901      	bls.n	801126c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8011268:	2301      	movs	r3, #1
 801126a:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 801126c:	4b15      	ldr	r3, [pc, #84]	; (80112c4 <xTaskIncrementTick+0x184>)
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	2b00      	cmp	r3, #0
 8011272:	d109      	bne.n	8011288 <xTaskIncrementTick+0x148>
			{
				vApplicationTickHook();
 8011274:	f7ef ffe9 	bl	800124a <vApplicationTickHook>
 8011278:	e006      	b.n	8011288 <xTaskIncrementTick+0x148>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801127a:	4b12      	ldr	r3, [pc, #72]	; (80112c4 <xTaskIncrementTick+0x184>)
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	3301      	adds	r3, #1
 8011280:	4a10      	ldr	r2, [pc, #64]	; (80112c4 <xTaskIncrementTick+0x184>)
 8011282:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8011284:	f7ef ffe1 	bl	800124a <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8011288:	4b0f      	ldr	r3, [pc, #60]	; (80112c8 <xTaskIncrementTick+0x188>)
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	2b00      	cmp	r3, #0
 801128e:	d001      	beq.n	8011294 <xTaskIncrementTick+0x154>
		{
			xSwitchRequired = pdTRUE;
 8011290:	2301      	movs	r3, #1
 8011292:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8011294:	697b      	ldr	r3, [r7, #20]
}
 8011296:	4618      	mov	r0, r3
 8011298:	3718      	adds	r7, #24
 801129a:	46bd      	mov	sp, r7
 801129c:	bd80      	pop	{r7, pc}
 801129e:	bf00      	nop
 80112a0:	200272fc 	.word	0x200272fc
 80112a4:	200272d8 	.word	0x200272d8
 80112a8:	2002728c 	.word	0x2002728c
 80112ac:	20027290 	.word	0x20027290
 80112b0:	200272ec 	.word	0x200272ec
 80112b4:	200272f4 	.word	0x200272f4
 80112b8:	200272dc 	.word	0x200272dc
 80112bc:	20026e04 	.word	0x20026e04
 80112c0:	20026e00 	.word	0x20026e00
 80112c4:	200272e4 	.word	0x200272e4
 80112c8:	200272e8 	.word	0x200272e8

080112cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80112cc:	b580      	push	{r7, lr}
 80112ce:	b084      	sub	sp, #16
 80112d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80112d2:	4b3b      	ldr	r3, [pc, #236]	; (80113c0 <vTaskSwitchContext+0xf4>)
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d003      	beq.n	80112e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80112da:	4b3a      	ldr	r3, [pc, #232]	; (80113c4 <vTaskSwitchContext+0xf8>)
 80112dc:	2201      	movs	r2, #1
 80112de:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80112e0:	e06a      	b.n	80113b8 <vTaskSwitchContext+0xec>
		xYieldPending = pdFALSE;
 80112e2:	4b38      	ldr	r3, [pc, #224]	; (80113c4 <vTaskSwitchContext+0xf8>)
 80112e4:	2200      	movs	r2, #0
 80112e6:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80112e8:	f7ef ffa8 	bl	800123c <getRunTimeCounterValue>
 80112ec:	4602      	mov	r2, r0
 80112ee:	4b36      	ldr	r3, [pc, #216]	; (80113c8 <vTaskSwitchContext+0xfc>)
 80112f0:	601a      	str	r2, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 80112f2:	4b35      	ldr	r3, [pc, #212]	; (80113c8 <vTaskSwitchContext+0xfc>)
 80112f4:	681a      	ldr	r2, [r3, #0]
 80112f6:	4b35      	ldr	r3, [pc, #212]	; (80113cc <vTaskSwitchContext+0x100>)
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	429a      	cmp	r2, r3
 80112fc:	d909      	bls.n	8011312 <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80112fe:	4b34      	ldr	r3, [pc, #208]	; (80113d0 <vTaskSwitchContext+0x104>)
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8011304:	4a30      	ldr	r2, [pc, #192]	; (80113c8 <vTaskSwitchContext+0xfc>)
 8011306:	6810      	ldr	r0, [r2, #0]
 8011308:	4a30      	ldr	r2, [pc, #192]	; (80113cc <vTaskSwitchContext+0x100>)
 801130a:	6812      	ldr	r2, [r2, #0]
 801130c:	1a82      	subs	r2, r0, r2
 801130e:	440a      	add	r2, r1
 8011310:	659a      	str	r2, [r3, #88]	; 0x58
				ulTaskSwitchedInTime = ulTotalRunTime;
 8011312:	4b2d      	ldr	r3, [pc, #180]	; (80113c8 <vTaskSwitchContext+0xfc>)
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	4a2d      	ldr	r2, [pc, #180]	; (80113cc <vTaskSwitchContext+0x100>)
 8011318:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 801131a:	4b2d      	ldr	r3, [pc, #180]	; (80113d0 <vTaskSwitchContext+0x104>)
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	681a      	ldr	r2, [r3, #0]
 8011320:	4b2b      	ldr	r3, [pc, #172]	; (80113d0 <vTaskSwitchContext+0x104>)
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011326:	429a      	cmp	r2, r3
 8011328:	d808      	bhi.n	801133c <vTaskSwitchContext+0x70>
 801132a:	4b29      	ldr	r3, [pc, #164]	; (80113d0 <vTaskSwitchContext+0x104>)
 801132c:	681a      	ldr	r2, [r3, #0]
 801132e:	4b28      	ldr	r3, [pc, #160]	; (80113d0 <vTaskSwitchContext+0x104>)
 8011330:	681b      	ldr	r3, [r3, #0]
 8011332:	3334      	adds	r3, #52	; 0x34
 8011334:	4619      	mov	r1, r3
 8011336:	4610      	mov	r0, r2
 8011338:	f7ef ff8e 	bl	8001258 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 801133c:	4b25      	ldr	r3, [pc, #148]	; (80113d4 <vTaskSwitchContext+0x108>)
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	60fb      	str	r3, [r7, #12]
 8011342:	e00f      	b.n	8011364 <vTaskSwitchContext+0x98>
 8011344:	68fb      	ldr	r3, [r7, #12]
 8011346:	2b00      	cmp	r3, #0
 8011348:	d109      	bne.n	801135e <vTaskSwitchContext+0x92>
 801134a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801134e:	f383 8811 	msr	BASEPRI, r3
 8011352:	f3bf 8f6f 	isb	sy
 8011356:	f3bf 8f4f 	dsb	sy
 801135a:	607b      	str	r3, [r7, #4]
 801135c:	e7fe      	b.n	801135c <vTaskSwitchContext+0x90>
 801135e:	68fb      	ldr	r3, [r7, #12]
 8011360:	3b01      	subs	r3, #1
 8011362:	60fb      	str	r3, [r7, #12]
 8011364:	491c      	ldr	r1, [pc, #112]	; (80113d8 <vTaskSwitchContext+0x10c>)
 8011366:	68fa      	ldr	r2, [r7, #12]
 8011368:	4613      	mov	r3, r2
 801136a:	009b      	lsls	r3, r3, #2
 801136c:	4413      	add	r3, r2
 801136e:	009b      	lsls	r3, r3, #2
 8011370:	440b      	add	r3, r1
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	2b00      	cmp	r3, #0
 8011376:	d0e5      	beq.n	8011344 <vTaskSwitchContext+0x78>
 8011378:	68fa      	ldr	r2, [r7, #12]
 801137a:	4613      	mov	r3, r2
 801137c:	009b      	lsls	r3, r3, #2
 801137e:	4413      	add	r3, r2
 8011380:	009b      	lsls	r3, r3, #2
 8011382:	4a15      	ldr	r2, [pc, #84]	; (80113d8 <vTaskSwitchContext+0x10c>)
 8011384:	4413      	add	r3, r2
 8011386:	60bb      	str	r3, [r7, #8]
 8011388:	68bb      	ldr	r3, [r7, #8]
 801138a:	685b      	ldr	r3, [r3, #4]
 801138c:	685a      	ldr	r2, [r3, #4]
 801138e:	68bb      	ldr	r3, [r7, #8]
 8011390:	605a      	str	r2, [r3, #4]
 8011392:	68bb      	ldr	r3, [r7, #8]
 8011394:	685a      	ldr	r2, [r3, #4]
 8011396:	68bb      	ldr	r3, [r7, #8]
 8011398:	3308      	adds	r3, #8
 801139a:	429a      	cmp	r2, r3
 801139c:	d104      	bne.n	80113a8 <vTaskSwitchContext+0xdc>
 801139e:	68bb      	ldr	r3, [r7, #8]
 80113a0:	685b      	ldr	r3, [r3, #4]
 80113a2:	685a      	ldr	r2, [r3, #4]
 80113a4:	68bb      	ldr	r3, [r7, #8]
 80113a6:	605a      	str	r2, [r3, #4]
 80113a8:	68bb      	ldr	r3, [r7, #8]
 80113aa:	685b      	ldr	r3, [r3, #4]
 80113ac:	68db      	ldr	r3, [r3, #12]
 80113ae:	4a08      	ldr	r2, [pc, #32]	; (80113d0 <vTaskSwitchContext+0x104>)
 80113b0:	6013      	str	r3, [r2, #0]
 80113b2:	4a08      	ldr	r2, [pc, #32]	; (80113d4 <vTaskSwitchContext+0x108>)
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	6013      	str	r3, [r2, #0]
}
 80113b8:	bf00      	nop
 80113ba:	3710      	adds	r7, #16
 80113bc:	46bd      	mov	sp, r7
 80113be:	bd80      	pop	{r7, pc}
 80113c0:	200272fc 	.word	0x200272fc
 80113c4:	200272e8 	.word	0x200272e8
 80113c8:	20027304 	.word	0x20027304
 80113cc:	20027300 	.word	0x20027300
 80113d0:	20026e00 	.word	0x20026e00
 80113d4:	200272dc 	.word	0x200272dc
 80113d8:	20026e04 	.word	0x20026e04

080113dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80113dc:	b580      	push	{r7, lr}
 80113de:	b084      	sub	sp, #16
 80113e0:	af00      	add	r7, sp, #0
 80113e2:	6078      	str	r0, [r7, #4]
 80113e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d109      	bne.n	8011400 <vTaskPlaceOnEventList+0x24>
 80113ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113f0:	f383 8811 	msr	BASEPRI, r3
 80113f4:	f3bf 8f6f 	isb	sy
 80113f8:	f3bf 8f4f 	dsb	sy
 80113fc:	60fb      	str	r3, [r7, #12]
 80113fe:	e7fe      	b.n	80113fe <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011400:	4b07      	ldr	r3, [pc, #28]	; (8011420 <vTaskPlaceOnEventList+0x44>)
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	3318      	adds	r3, #24
 8011406:	4619      	mov	r1, r3
 8011408:	6878      	ldr	r0, [r7, #4]
 801140a:	f7fe f82e 	bl	800f46a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801140e:	2101      	movs	r1, #1
 8011410:	6838      	ldr	r0, [r7, #0]
 8011412:	f000 fda9 	bl	8011f68 <prvAddCurrentTaskToDelayedList>
}
 8011416:	bf00      	nop
 8011418:	3710      	adds	r7, #16
 801141a:	46bd      	mov	sp, r7
 801141c:	bd80      	pop	{r7, pc}
 801141e:	bf00      	nop
 8011420:	20026e00 	.word	0x20026e00

08011424 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011424:	b580      	push	{r7, lr}
 8011426:	b086      	sub	sp, #24
 8011428:	af00      	add	r7, sp, #0
 801142a:	60f8      	str	r0, [r7, #12]
 801142c:	60b9      	str	r1, [r7, #8]
 801142e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8011430:	68fb      	ldr	r3, [r7, #12]
 8011432:	2b00      	cmp	r3, #0
 8011434:	d109      	bne.n	801144a <vTaskPlaceOnEventListRestricted+0x26>
 8011436:	f04f 0350 	mov.w	r3, #80	; 0x50
 801143a:	f383 8811 	msr	BASEPRI, r3
 801143e:	f3bf 8f6f 	isb	sy
 8011442:	f3bf 8f4f 	dsb	sy
 8011446:	617b      	str	r3, [r7, #20]
 8011448:	e7fe      	b.n	8011448 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801144a:	4b0a      	ldr	r3, [pc, #40]	; (8011474 <vTaskPlaceOnEventListRestricted+0x50>)
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	3318      	adds	r3, #24
 8011450:	4619      	mov	r1, r3
 8011452:	68f8      	ldr	r0, [r7, #12]
 8011454:	f7fd ffe5 	bl	800f422 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	2b00      	cmp	r3, #0
 801145c:	d002      	beq.n	8011464 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 801145e:	f04f 33ff 	mov.w	r3, #4294967295
 8011462:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011464:	6879      	ldr	r1, [r7, #4]
 8011466:	68b8      	ldr	r0, [r7, #8]
 8011468:	f000 fd7e 	bl	8011f68 <prvAddCurrentTaskToDelayedList>
	}
 801146c:	bf00      	nop
 801146e:	3718      	adds	r7, #24
 8011470:	46bd      	mov	sp, r7
 8011472:	bd80      	pop	{r7, pc}
 8011474:	20026e00 	.word	0x20026e00

08011478 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011478:	b580      	push	{r7, lr}
 801147a:	b086      	sub	sp, #24
 801147c:	af00      	add	r7, sp, #0
 801147e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	68db      	ldr	r3, [r3, #12]
 8011484:	68db      	ldr	r3, [r3, #12]
 8011486:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011488:	693b      	ldr	r3, [r7, #16]
 801148a:	2b00      	cmp	r3, #0
 801148c:	d109      	bne.n	80114a2 <xTaskRemoveFromEventList+0x2a>
 801148e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011492:	f383 8811 	msr	BASEPRI, r3
 8011496:	f3bf 8f6f 	isb	sy
 801149a:	f3bf 8f4f 	dsb	sy
 801149e:	60fb      	str	r3, [r7, #12]
 80114a0:	e7fe      	b.n	80114a0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80114a2:	693b      	ldr	r3, [r7, #16]
 80114a4:	3318      	adds	r3, #24
 80114a6:	4618      	mov	r0, r3
 80114a8:	f7fe f818 	bl	800f4dc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80114ac:	4b1e      	ldr	r3, [pc, #120]	; (8011528 <xTaskRemoveFromEventList+0xb0>)
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d11d      	bne.n	80114f0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80114b4:	693b      	ldr	r3, [r7, #16]
 80114b6:	3304      	adds	r3, #4
 80114b8:	4618      	mov	r0, r3
 80114ba:	f7fe f80f 	bl	800f4dc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80114be:	693b      	ldr	r3, [r7, #16]
 80114c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114c2:	4b1a      	ldr	r3, [pc, #104]	; (801152c <xTaskRemoveFromEventList+0xb4>)
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	429a      	cmp	r2, r3
 80114c8:	d903      	bls.n	80114d2 <xTaskRemoveFromEventList+0x5a>
 80114ca:	693b      	ldr	r3, [r7, #16]
 80114cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114ce:	4a17      	ldr	r2, [pc, #92]	; (801152c <xTaskRemoveFromEventList+0xb4>)
 80114d0:	6013      	str	r3, [r2, #0]
 80114d2:	693b      	ldr	r3, [r7, #16]
 80114d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114d6:	4613      	mov	r3, r2
 80114d8:	009b      	lsls	r3, r3, #2
 80114da:	4413      	add	r3, r2
 80114dc:	009b      	lsls	r3, r3, #2
 80114de:	4a14      	ldr	r2, [pc, #80]	; (8011530 <xTaskRemoveFromEventList+0xb8>)
 80114e0:	441a      	add	r2, r3
 80114e2:	693b      	ldr	r3, [r7, #16]
 80114e4:	3304      	adds	r3, #4
 80114e6:	4619      	mov	r1, r3
 80114e8:	4610      	mov	r0, r2
 80114ea:	f7fd ff9a 	bl	800f422 <vListInsertEnd>
 80114ee:	e005      	b.n	80114fc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80114f0:	693b      	ldr	r3, [r7, #16]
 80114f2:	3318      	adds	r3, #24
 80114f4:	4619      	mov	r1, r3
 80114f6:	480f      	ldr	r0, [pc, #60]	; (8011534 <xTaskRemoveFromEventList+0xbc>)
 80114f8:	f7fd ff93 	bl	800f422 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80114fc:	693b      	ldr	r3, [r7, #16]
 80114fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011500:	4b0d      	ldr	r3, [pc, #52]	; (8011538 <xTaskRemoveFromEventList+0xc0>)
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011506:	429a      	cmp	r2, r3
 8011508:	d905      	bls.n	8011516 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801150a:	2301      	movs	r3, #1
 801150c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801150e:	4b0b      	ldr	r3, [pc, #44]	; (801153c <xTaskRemoveFromEventList+0xc4>)
 8011510:	2201      	movs	r2, #1
 8011512:	601a      	str	r2, [r3, #0]
 8011514:	e001      	b.n	801151a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8011516:	2300      	movs	r3, #0
 8011518:	617b      	str	r3, [r7, #20]
		normally left unchanged, because it is automatically reset to a new
		value when the tick count equals xNextTaskUnblockTime.  However if
		tickless idling is used it might be more important to enter sleep mode
		at the earliest possible time - so reset xNextTaskUnblockTime here to
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
 801151a:	f000 f999 	bl	8011850 <prvResetNextTaskUnblockTime>
	}
	#endif

	return xReturn;
 801151e:	697b      	ldr	r3, [r7, #20]
}
 8011520:	4618      	mov	r0, r3
 8011522:	3718      	adds	r7, #24
 8011524:	46bd      	mov	sp, r7
 8011526:	bd80      	pop	{r7, pc}
 8011528:	200272fc 	.word	0x200272fc
 801152c:	200272dc 	.word	0x200272dc
 8011530:	20026e04 	.word	0x20026e04
 8011534:	20027294 	.word	0x20027294
 8011538:	20026e00 	.word	0x20026e00
 801153c:	200272e8 	.word	0x200272e8

08011540 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011540:	b480      	push	{r7}
 8011542:	b083      	sub	sp, #12
 8011544:	af00      	add	r7, sp, #0
 8011546:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011548:	4b06      	ldr	r3, [pc, #24]	; (8011564 <vTaskInternalSetTimeOutState+0x24>)
 801154a:	681a      	ldr	r2, [r3, #0]
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011550:	4b05      	ldr	r3, [pc, #20]	; (8011568 <vTaskInternalSetTimeOutState+0x28>)
 8011552:	681a      	ldr	r2, [r3, #0]
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	605a      	str	r2, [r3, #4]
}
 8011558:	bf00      	nop
 801155a:	370c      	adds	r7, #12
 801155c:	46bd      	mov	sp, r7
 801155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011562:	4770      	bx	lr
 8011564:	200272ec 	.word	0x200272ec
 8011568:	200272d8 	.word	0x200272d8

0801156c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801156c:	b580      	push	{r7, lr}
 801156e:	b088      	sub	sp, #32
 8011570:	af00      	add	r7, sp, #0
 8011572:	6078      	str	r0, [r7, #4]
 8011574:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	2b00      	cmp	r3, #0
 801157a:	d109      	bne.n	8011590 <xTaskCheckForTimeOut+0x24>
 801157c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011580:	f383 8811 	msr	BASEPRI, r3
 8011584:	f3bf 8f6f 	isb	sy
 8011588:	f3bf 8f4f 	dsb	sy
 801158c:	613b      	str	r3, [r7, #16]
 801158e:	e7fe      	b.n	801158e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8011590:	683b      	ldr	r3, [r7, #0]
 8011592:	2b00      	cmp	r3, #0
 8011594:	d109      	bne.n	80115aa <xTaskCheckForTimeOut+0x3e>
 8011596:	f04f 0350 	mov.w	r3, #80	; 0x50
 801159a:	f383 8811 	msr	BASEPRI, r3
 801159e:	f3bf 8f6f 	isb	sy
 80115a2:	f3bf 8f4f 	dsb	sy
 80115a6:	60fb      	str	r3, [r7, #12]
 80115a8:	e7fe      	b.n	80115a8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80115aa:	f7fe f8e7 	bl	800f77c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80115ae:	4b1d      	ldr	r3, [pc, #116]	; (8011624 <xTaskCheckForTimeOut+0xb8>)
 80115b0:	681b      	ldr	r3, [r3, #0]
 80115b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	685b      	ldr	r3, [r3, #4]
 80115b8:	69ba      	ldr	r2, [r7, #24]
 80115ba:	1ad3      	subs	r3, r2, r3
 80115bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80115be:	683b      	ldr	r3, [r7, #0]
 80115c0:	681b      	ldr	r3, [r3, #0]
 80115c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115c6:	d102      	bne.n	80115ce <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80115c8:	2300      	movs	r3, #0
 80115ca:	61fb      	str	r3, [r7, #28]
 80115cc:	e023      	b.n	8011616 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	681a      	ldr	r2, [r3, #0]
 80115d2:	4b15      	ldr	r3, [pc, #84]	; (8011628 <xTaskCheckForTimeOut+0xbc>)
 80115d4:	681b      	ldr	r3, [r3, #0]
 80115d6:	429a      	cmp	r2, r3
 80115d8:	d007      	beq.n	80115ea <xTaskCheckForTimeOut+0x7e>
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	685b      	ldr	r3, [r3, #4]
 80115de:	69ba      	ldr	r2, [r7, #24]
 80115e0:	429a      	cmp	r2, r3
 80115e2:	d302      	bcc.n	80115ea <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80115e4:	2301      	movs	r3, #1
 80115e6:	61fb      	str	r3, [r7, #28]
 80115e8:	e015      	b.n	8011616 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80115ea:	683b      	ldr	r3, [r7, #0]
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	697a      	ldr	r2, [r7, #20]
 80115f0:	429a      	cmp	r2, r3
 80115f2:	d20b      	bcs.n	801160c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80115f4:	683b      	ldr	r3, [r7, #0]
 80115f6:	681a      	ldr	r2, [r3, #0]
 80115f8:	697b      	ldr	r3, [r7, #20]
 80115fa:	1ad2      	subs	r2, r2, r3
 80115fc:	683b      	ldr	r3, [r7, #0]
 80115fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011600:	6878      	ldr	r0, [r7, #4]
 8011602:	f7ff ff9d 	bl	8011540 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011606:	2300      	movs	r3, #0
 8011608:	61fb      	str	r3, [r7, #28]
 801160a:	e004      	b.n	8011616 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 801160c:	683b      	ldr	r3, [r7, #0]
 801160e:	2200      	movs	r2, #0
 8011610:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011612:	2301      	movs	r3, #1
 8011614:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011616:	f7fe f8df 	bl	800f7d8 <vPortExitCritical>

	return xReturn;
 801161a:	69fb      	ldr	r3, [r7, #28]
}
 801161c:	4618      	mov	r0, r3
 801161e:	3720      	adds	r7, #32
 8011620:	46bd      	mov	sp, r7
 8011622:	bd80      	pop	{r7, pc}
 8011624:	200272d8 	.word	0x200272d8
 8011628:	200272ec 	.word	0x200272ec

0801162c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801162c:	b480      	push	{r7}
 801162e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011630:	4b03      	ldr	r3, [pc, #12]	; (8011640 <vTaskMissedYield+0x14>)
 8011632:	2201      	movs	r2, #1
 8011634:	601a      	str	r2, [r3, #0]
}
 8011636:	bf00      	nop
 8011638:	46bd      	mov	sp, r7
 801163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801163e:	4770      	bx	lr
 8011640:	200272e8 	.word	0x200272e8

08011644 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011644:	b580      	push	{r7, lr}
 8011646:	b084      	sub	sp, #16
 8011648:	af00      	add	r7, sp, #0
 801164a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801164c:	f000 f8a6 	bl	801179c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011650:	4b17      	ldr	r3, [pc, #92]	; (80116b0 <prvIdleTask+0x6c>)
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	2b01      	cmp	r3, #1
 8011656:	d907      	bls.n	8011668 <prvIdleTask+0x24>
			{
				taskYIELD();
 8011658:	4b16      	ldr	r3, [pc, #88]	; (80116b4 <prvIdleTask+0x70>)
 801165a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801165e:	601a      	str	r2, [r3, #0]
 8011660:	f3bf 8f4f 	dsb	sy
 8011664:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 8011668:	f7ff fc60 	bl	8010f2c <prvGetExpectedIdleTime>
 801166c:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 801166e:	68fb      	ldr	r3, [r7, #12]
 8011670:	2b01      	cmp	r3, #1
 8011672:	d9eb      	bls.n	801164c <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 8011674:	f7ff fc4c 	bl	8010f10 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 8011678:	4b0f      	ldr	r3, [pc, #60]	; (80116b8 <prvIdleTask+0x74>)
 801167a:	681a      	ldr	r2, [r3, #0]
 801167c:	4b0f      	ldr	r3, [pc, #60]	; (80116bc <prvIdleTask+0x78>)
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	429a      	cmp	r2, r3
 8011682:	d209      	bcs.n	8011698 <prvIdleTask+0x54>
 8011684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011688:	f383 8811 	msr	BASEPRI, r3
 801168c:	f3bf 8f6f 	isb	sy
 8011690:	f3bf 8f4f 	dsb	sy
 8011694:	60bb      	str	r3, [r7, #8]
 8011696:	e7fe      	b.n	8011696 <prvIdleTask+0x52>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 8011698:	f7ff fc48 	bl	8010f2c <prvGetExpectedIdleTime>
 801169c:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	2b01      	cmp	r3, #1
 80116a2:	d902      	bls.n	80116aa <prvIdleTask+0x66>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 80116a4:	68f8      	ldr	r0, [r7, #12]
 80116a6:	f7f0 fe33 	bl	8002310 <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 80116aa:	f7ff fc77 	bl	8010f9c <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 80116ae:	e7cd      	b.n	801164c <prvIdleTask+0x8>
 80116b0:	20026e04 	.word	0x20026e04
 80116b4:	e000ed04 	.word	0xe000ed04
 80116b8:	200272f4 	.word	0x200272f4
 80116bc:	200272d8 	.word	0x200272d8

080116c0 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 80116c0:	b480      	push	{r7}
 80116c2:	b083      	sub	sp, #12
 80116c4:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 80116c6:	2301      	movs	r3, #1
 80116c8:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 80116ca:	2301      	movs	r3, #1
 80116cc:	71fb      	strb	r3, [r7, #7]

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 80116ce:	4b0f      	ldr	r3, [pc, #60]	; (801170c <eTaskConfirmSleepModeStatus+0x4c>)
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d002      	beq.n	80116dc <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 80116d6:	2300      	movs	r3, #0
 80116d8:	71fb      	strb	r3, [r7, #7]
 80116da:	e010      	b.n	80116fe <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 80116dc:	4b0c      	ldr	r3, [pc, #48]	; (8011710 <eTaskConfirmSleepModeStatus+0x50>)
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d002      	beq.n	80116ea <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 80116e4:	2300      	movs	r3, #0
 80116e6:	71fb      	strb	r3, [r7, #7]
 80116e8:	e009      	b.n	80116fe <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 80116ea:	4b0a      	ldr	r3, [pc, #40]	; (8011714 <eTaskConfirmSleepModeStatus+0x54>)
 80116ec:	681a      	ldr	r2, [r3, #0]
 80116ee:	4b0a      	ldr	r3, [pc, #40]	; (8011718 <eTaskConfirmSleepModeStatus+0x58>)
 80116f0:	6819      	ldr	r1, [r3, #0]
 80116f2:	683b      	ldr	r3, [r7, #0]
 80116f4:	1acb      	subs	r3, r1, r3
 80116f6:	429a      	cmp	r2, r3
 80116f8:	d101      	bne.n	80116fe <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 80116fa:	2302      	movs	r3, #2
 80116fc:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 80116fe:	79fb      	ldrb	r3, [r7, #7]
	}
 8011700:	4618      	mov	r0, r3
 8011702:	370c      	adds	r7, #12
 8011704:	46bd      	mov	sp, r7
 8011706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801170a:	4770      	bx	lr
 801170c:	20027294 	.word	0x20027294
 8011710:	200272e8 	.word	0x200272e8
 8011714:	200272c0 	.word	0x200272c0
 8011718:	200272d4 	.word	0x200272d4

0801171c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801171c:	b580      	push	{r7, lr}
 801171e:	b082      	sub	sp, #8
 8011720:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011722:	2300      	movs	r3, #0
 8011724:	607b      	str	r3, [r7, #4]
 8011726:	e00c      	b.n	8011742 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011728:	687a      	ldr	r2, [r7, #4]
 801172a:	4613      	mov	r3, r2
 801172c:	009b      	lsls	r3, r3, #2
 801172e:	4413      	add	r3, r2
 8011730:	009b      	lsls	r3, r3, #2
 8011732:	4a12      	ldr	r2, [pc, #72]	; (801177c <prvInitialiseTaskLists+0x60>)
 8011734:	4413      	add	r3, r2
 8011736:	4618      	mov	r0, r3
 8011738:	f7fd fe46 	bl	800f3c8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	3301      	adds	r3, #1
 8011740:	607b      	str	r3, [r7, #4]
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	2b37      	cmp	r3, #55	; 0x37
 8011746:	d9ef      	bls.n	8011728 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011748:	480d      	ldr	r0, [pc, #52]	; (8011780 <prvInitialiseTaskLists+0x64>)
 801174a:	f7fd fe3d 	bl	800f3c8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801174e:	480d      	ldr	r0, [pc, #52]	; (8011784 <prvInitialiseTaskLists+0x68>)
 8011750:	f7fd fe3a 	bl	800f3c8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011754:	480c      	ldr	r0, [pc, #48]	; (8011788 <prvInitialiseTaskLists+0x6c>)
 8011756:	f7fd fe37 	bl	800f3c8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801175a:	480c      	ldr	r0, [pc, #48]	; (801178c <prvInitialiseTaskLists+0x70>)
 801175c:	f7fd fe34 	bl	800f3c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011760:	480b      	ldr	r0, [pc, #44]	; (8011790 <prvInitialiseTaskLists+0x74>)
 8011762:	f7fd fe31 	bl	800f3c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011766:	4b0b      	ldr	r3, [pc, #44]	; (8011794 <prvInitialiseTaskLists+0x78>)
 8011768:	4a05      	ldr	r2, [pc, #20]	; (8011780 <prvInitialiseTaskLists+0x64>)
 801176a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801176c:	4b0a      	ldr	r3, [pc, #40]	; (8011798 <prvInitialiseTaskLists+0x7c>)
 801176e:	4a05      	ldr	r2, [pc, #20]	; (8011784 <prvInitialiseTaskLists+0x68>)
 8011770:	601a      	str	r2, [r3, #0]
}
 8011772:	bf00      	nop
 8011774:	3708      	adds	r7, #8
 8011776:	46bd      	mov	sp, r7
 8011778:	bd80      	pop	{r7, pc}
 801177a:	bf00      	nop
 801177c:	20026e04 	.word	0x20026e04
 8011780:	20027264 	.word	0x20027264
 8011784:	20027278 	.word	0x20027278
 8011788:	20027294 	.word	0x20027294
 801178c:	200272a8 	.word	0x200272a8
 8011790:	200272c0 	.word	0x200272c0
 8011794:	2002728c 	.word	0x2002728c
 8011798:	20027290 	.word	0x20027290

0801179c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801179c:	b580      	push	{r7, lr}
 801179e:	b082      	sub	sp, #8
 80117a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80117a2:	e019      	b.n	80117d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80117a4:	f7fd ffea 	bl	800f77c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80117a8:	4b0f      	ldr	r3, [pc, #60]	; (80117e8 <prvCheckTasksWaitingTermination+0x4c>)
 80117aa:	68db      	ldr	r3, [r3, #12]
 80117ac:	68db      	ldr	r3, [r3, #12]
 80117ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	3304      	adds	r3, #4
 80117b4:	4618      	mov	r0, r3
 80117b6:	f7fd fe91 	bl	800f4dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80117ba:	4b0c      	ldr	r3, [pc, #48]	; (80117ec <prvCheckTasksWaitingTermination+0x50>)
 80117bc:	681b      	ldr	r3, [r3, #0]
 80117be:	3b01      	subs	r3, #1
 80117c0:	4a0a      	ldr	r2, [pc, #40]	; (80117ec <prvCheckTasksWaitingTermination+0x50>)
 80117c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80117c4:	4b0a      	ldr	r3, [pc, #40]	; (80117f0 <prvCheckTasksWaitingTermination+0x54>)
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	3b01      	subs	r3, #1
 80117ca:	4a09      	ldr	r2, [pc, #36]	; (80117f0 <prvCheckTasksWaitingTermination+0x54>)
 80117cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80117ce:	f7fe f803 	bl	800f7d8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80117d2:	6878      	ldr	r0, [r7, #4]
 80117d4:	f000 f80e 	bl	80117f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80117d8:	4b05      	ldr	r3, [pc, #20]	; (80117f0 <prvCheckTasksWaitingTermination+0x54>)
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d1e1      	bne.n	80117a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80117e0:	bf00      	nop
 80117e2:	3708      	adds	r7, #8
 80117e4:	46bd      	mov	sp, r7
 80117e6:	bd80      	pop	{r7, pc}
 80117e8:	200272a8 	.word	0x200272a8
 80117ec:	200272d4 	.word	0x200272d4
 80117f0:	200272bc 	.word	0x200272bc

080117f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80117f4:	b580      	push	{r7, lr}
 80117f6:	b084      	sub	sp, #16
 80117f8:	af00      	add	r7, sp, #0
 80117fa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8011802:	2b00      	cmp	r3, #0
 8011804:	d108      	bne.n	8011818 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801180a:	4618      	mov	r0, r3
 801180c:	f7fd fcc6 	bl	800f19c <vPortFree>
				vPortFree( pxTCB );
 8011810:	6878      	ldr	r0, [r7, #4]
 8011812:	f7fd fcc3 	bl	800f19c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011816:	e017      	b.n	8011848 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 801181e:	2b01      	cmp	r3, #1
 8011820:	d103      	bne.n	801182a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8011822:	6878      	ldr	r0, [r7, #4]
 8011824:	f7fd fcba 	bl	800f19c <vPortFree>
	}
 8011828:	e00e      	b.n	8011848 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8011830:	2b02      	cmp	r3, #2
 8011832:	d009      	beq.n	8011848 <prvDeleteTCB+0x54>
 8011834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011838:	f383 8811 	msr	BASEPRI, r3
 801183c:	f3bf 8f6f 	isb	sy
 8011840:	f3bf 8f4f 	dsb	sy
 8011844:	60fb      	str	r3, [r7, #12]
 8011846:	e7fe      	b.n	8011846 <prvDeleteTCB+0x52>
	}
 8011848:	bf00      	nop
 801184a:	3710      	adds	r7, #16
 801184c:	46bd      	mov	sp, r7
 801184e:	bd80      	pop	{r7, pc}

08011850 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011850:	b480      	push	{r7}
 8011852:	b083      	sub	sp, #12
 8011854:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011856:	4b0f      	ldr	r3, [pc, #60]	; (8011894 <prvResetNextTaskUnblockTime+0x44>)
 8011858:	681b      	ldr	r3, [r3, #0]
 801185a:	681b      	ldr	r3, [r3, #0]
 801185c:	2b00      	cmp	r3, #0
 801185e:	d101      	bne.n	8011864 <prvResetNextTaskUnblockTime+0x14>
 8011860:	2301      	movs	r3, #1
 8011862:	e000      	b.n	8011866 <prvResetNextTaskUnblockTime+0x16>
 8011864:	2300      	movs	r3, #0
 8011866:	2b00      	cmp	r3, #0
 8011868:	d004      	beq.n	8011874 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801186a:	4b0b      	ldr	r3, [pc, #44]	; (8011898 <prvResetNextTaskUnblockTime+0x48>)
 801186c:	f04f 32ff 	mov.w	r2, #4294967295
 8011870:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011872:	e008      	b.n	8011886 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8011874:	4b07      	ldr	r3, [pc, #28]	; (8011894 <prvResetNextTaskUnblockTime+0x44>)
 8011876:	681b      	ldr	r3, [r3, #0]
 8011878:	68db      	ldr	r3, [r3, #12]
 801187a:	68db      	ldr	r3, [r3, #12]
 801187c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	685b      	ldr	r3, [r3, #4]
 8011882:	4a05      	ldr	r2, [pc, #20]	; (8011898 <prvResetNextTaskUnblockTime+0x48>)
 8011884:	6013      	str	r3, [r2, #0]
}
 8011886:	bf00      	nop
 8011888:	370c      	adds	r7, #12
 801188a:	46bd      	mov	sp, r7
 801188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011890:	4770      	bx	lr
 8011892:	bf00      	nop
 8011894:	2002728c 	.word	0x2002728c
 8011898:	200272f4 	.word	0x200272f4

0801189c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 801189c:	b480      	push	{r7}
 801189e:	b083      	sub	sp, #12
 80118a0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80118a2:	4b05      	ldr	r3, [pc, #20]	; (80118b8 <xTaskGetCurrentTaskHandle+0x1c>)
 80118a4:	681b      	ldr	r3, [r3, #0]
 80118a6:	607b      	str	r3, [r7, #4]

		return xReturn;
 80118a8:	687b      	ldr	r3, [r7, #4]
	}
 80118aa:	4618      	mov	r0, r3
 80118ac:	370c      	adds	r7, #12
 80118ae:	46bd      	mov	sp, r7
 80118b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118b4:	4770      	bx	lr
 80118b6:	bf00      	nop
 80118b8:	20026e00 	.word	0x20026e00

080118bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80118bc:	b480      	push	{r7}
 80118be:	b083      	sub	sp, #12
 80118c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80118c2:	4b0b      	ldr	r3, [pc, #44]	; (80118f0 <xTaskGetSchedulerState+0x34>)
 80118c4:	681b      	ldr	r3, [r3, #0]
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d102      	bne.n	80118d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80118ca:	2301      	movs	r3, #1
 80118cc:	607b      	str	r3, [r7, #4]
 80118ce:	e008      	b.n	80118e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80118d0:	4b08      	ldr	r3, [pc, #32]	; (80118f4 <xTaskGetSchedulerState+0x38>)
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d102      	bne.n	80118de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80118d8:	2302      	movs	r3, #2
 80118da:	607b      	str	r3, [r7, #4]
 80118dc:	e001      	b.n	80118e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80118de:	2300      	movs	r3, #0
 80118e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80118e2:	687b      	ldr	r3, [r7, #4]
	}
 80118e4:	4618      	mov	r0, r3
 80118e6:	370c      	adds	r7, #12
 80118e8:	46bd      	mov	sp, r7
 80118ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ee:	4770      	bx	lr
 80118f0:	200272e0 	.word	0x200272e0
 80118f4:	200272fc 	.word	0x200272fc

080118f8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80118f8:	b580      	push	{r7, lr}
 80118fa:	b084      	sub	sp, #16
 80118fc:	af00      	add	r7, sp, #0
 80118fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8011904:	2300      	movs	r3, #0
 8011906:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	2b00      	cmp	r3, #0
 801190c:	d056      	beq.n	80119bc <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801190e:	68bb      	ldr	r3, [r7, #8]
 8011910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011912:	4b2d      	ldr	r3, [pc, #180]	; (80119c8 <xTaskPriorityInherit+0xd0>)
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011918:	429a      	cmp	r2, r3
 801191a:	d246      	bcs.n	80119aa <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801191c:	68bb      	ldr	r3, [r7, #8]
 801191e:	699b      	ldr	r3, [r3, #24]
 8011920:	2b00      	cmp	r3, #0
 8011922:	db06      	blt.n	8011932 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011924:	4b28      	ldr	r3, [pc, #160]	; (80119c8 <xTaskPriorityInherit+0xd0>)
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801192a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801192e:	68bb      	ldr	r3, [r7, #8]
 8011930:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8011932:	68bb      	ldr	r3, [r7, #8]
 8011934:	6959      	ldr	r1, [r3, #20]
 8011936:	68bb      	ldr	r3, [r7, #8]
 8011938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801193a:	4613      	mov	r3, r2
 801193c:	009b      	lsls	r3, r3, #2
 801193e:	4413      	add	r3, r2
 8011940:	009b      	lsls	r3, r3, #2
 8011942:	4a22      	ldr	r2, [pc, #136]	; (80119cc <xTaskPriorityInherit+0xd4>)
 8011944:	4413      	add	r3, r2
 8011946:	4299      	cmp	r1, r3
 8011948:	d101      	bne.n	801194e <xTaskPriorityInherit+0x56>
 801194a:	2301      	movs	r3, #1
 801194c:	e000      	b.n	8011950 <xTaskPriorityInherit+0x58>
 801194e:	2300      	movs	r3, #0
 8011950:	2b00      	cmp	r3, #0
 8011952:	d022      	beq.n	801199a <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011954:	68bb      	ldr	r3, [r7, #8]
 8011956:	3304      	adds	r3, #4
 8011958:	4618      	mov	r0, r3
 801195a:	f7fd fdbf 	bl	800f4dc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801195e:	4b1a      	ldr	r3, [pc, #104]	; (80119c8 <xTaskPriorityInherit+0xd0>)
 8011960:	681b      	ldr	r3, [r3, #0]
 8011962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011964:	68bb      	ldr	r3, [r7, #8]
 8011966:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011968:	68bb      	ldr	r3, [r7, #8]
 801196a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801196c:	4b18      	ldr	r3, [pc, #96]	; (80119d0 <xTaskPriorityInherit+0xd8>)
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	429a      	cmp	r2, r3
 8011972:	d903      	bls.n	801197c <xTaskPriorityInherit+0x84>
 8011974:	68bb      	ldr	r3, [r7, #8]
 8011976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011978:	4a15      	ldr	r2, [pc, #84]	; (80119d0 <xTaskPriorityInherit+0xd8>)
 801197a:	6013      	str	r3, [r2, #0]
 801197c:	68bb      	ldr	r3, [r7, #8]
 801197e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011980:	4613      	mov	r3, r2
 8011982:	009b      	lsls	r3, r3, #2
 8011984:	4413      	add	r3, r2
 8011986:	009b      	lsls	r3, r3, #2
 8011988:	4a10      	ldr	r2, [pc, #64]	; (80119cc <xTaskPriorityInherit+0xd4>)
 801198a:	441a      	add	r2, r3
 801198c:	68bb      	ldr	r3, [r7, #8]
 801198e:	3304      	adds	r3, #4
 8011990:	4619      	mov	r1, r3
 8011992:	4610      	mov	r0, r2
 8011994:	f7fd fd45 	bl	800f422 <vListInsertEnd>
 8011998:	e004      	b.n	80119a4 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801199a:	4b0b      	ldr	r3, [pc, #44]	; (80119c8 <xTaskPriorityInherit+0xd0>)
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119a0:	68bb      	ldr	r3, [r7, #8]
 80119a2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80119a4:	2301      	movs	r3, #1
 80119a6:	60fb      	str	r3, [r7, #12]
 80119a8:	e008      	b.n	80119bc <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80119aa:	68bb      	ldr	r3, [r7, #8]
 80119ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80119ae:	4b06      	ldr	r3, [pc, #24]	; (80119c8 <xTaskPriorityInherit+0xd0>)
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119b4:	429a      	cmp	r2, r3
 80119b6:	d201      	bcs.n	80119bc <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80119b8:	2301      	movs	r3, #1
 80119ba:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80119bc:	68fb      	ldr	r3, [r7, #12]
	}
 80119be:	4618      	mov	r0, r3
 80119c0:	3710      	adds	r7, #16
 80119c2:	46bd      	mov	sp, r7
 80119c4:	bd80      	pop	{r7, pc}
 80119c6:	bf00      	nop
 80119c8:	20026e00 	.word	0x20026e00
 80119cc:	20026e04 	.word	0x20026e04
 80119d0:	200272dc 	.word	0x200272dc

080119d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80119d4:	b580      	push	{r7, lr}
 80119d6:	b086      	sub	sp, #24
 80119d8:	af00      	add	r7, sp, #0
 80119da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80119e0:	2300      	movs	r3, #0
 80119e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d054      	beq.n	8011a94 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80119ea:	4b2d      	ldr	r3, [pc, #180]	; (8011aa0 <xTaskPriorityDisinherit+0xcc>)
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	693a      	ldr	r2, [r7, #16]
 80119f0:	429a      	cmp	r2, r3
 80119f2:	d009      	beq.n	8011a08 <xTaskPriorityDisinherit+0x34>
 80119f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119f8:	f383 8811 	msr	BASEPRI, r3
 80119fc:	f3bf 8f6f 	isb	sy
 8011a00:	f3bf 8f4f 	dsb	sy
 8011a04:	60fb      	str	r3, [r7, #12]
 8011a06:	e7fe      	b.n	8011a06 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8011a08:	693b      	ldr	r3, [r7, #16]
 8011a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d109      	bne.n	8011a24 <xTaskPriorityDisinherit+0x50>
 8011a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a14:	f383 8811 	msr	BASEPRI, r3
 8011a18:	f3bf 8f6f 	isb	sy
 8011a1c:	f3bf 8f4f 	dsb	sy
 8011a20:	60bb      	str	r3, [r7, #8]
 8011a22:	e7fe      	b.n	8011a22 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8011a24:	693b      	ldr	r3, [r7, #16]
 8011a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011a28:	1e5a      	subs	r2, r3, #1
 8011a2a:	693b      	ldr	r3, [r7, #16]
 8011a2c:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011a2e:	693b      	ldr	r3, [r7, #16]
 8011a30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a32:	693b      	ldr	r3, [r7, #16]
 8011a34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011a36:	429a      	cmp	r2, r3
 8011a38:	d02c      	beq.n	8011a94 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011a3a:	693b      	ldr	r3, [r7, #16]
 8011a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d128      	bne.n	8011a94 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011a42:	693b      	ldr	r3, [r7, #16]
 8011a44:	3304      	adds	r3, #4
 8011a46:	4618      	mov	r0, r3
 8011a48:	f7fd fd48 	bl	800f4dc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011a4c:	693b      	ldr	r3, [r7, #16]
 8011a4e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011a50:	693b      	ldr	r3, [r7, #16]
 8011a52:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011a54:	693b      	ldr	r3, [r7, #16]
 8011a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a58:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011a5c:	693b      	ldr	r3, [r7, #16]
 8011a5e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011a60:	693b      	ldr	r3, [r7, #16]
 8011a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a64:	4b0f      	ldr	r3, [pc, #60]	; (8011aa4 <xTaskPriorityDisinherit+0xd0>)
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	429a      	cmp	r2, r3
 8011a6a:	d903      	bls.n	8011a74 <xTaskPriorityDisinherit+0xa0>
 8011a6c:	693b      	ldr	r3, [r7, #16]
 8011a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a70:	4a0c      	ldr	r2, [pc, #48]	; (8011aa4 <xTaskPriorityDisinherit+0xd0>)
 8011a72:	6013      	str	r3, [r2, #0]
 8011a74:	693b      	ldr	r3, [r7, #16]
 8011a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a78:	4613      	mov	r3, r2
 8011a7a:	009b      	lsls	r3, r3, #2
 8011a7c:	4413      	add	r3, r2
 8011a7e:	009b      	lsls	r3, r3, #2
 8011a80:	4a09      	ldr	r2, [pc, #36]	; (8011aa8 <xTaskPriorityDisinherit+0xd4>)
 8011a82:	441a      	add	r2, r3
 8011a84:	693b      	ldr	r3, [r7, #16]
 8011a86:	3304      	adds	r3, #4
 8011a88:	4619      	mov	r1, r3
 8011a8a:	4610      	mov	r0, r2
 8011a8c:	f7fd fcc9 	bl	800f422 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011a90:	2301      	movs	r3, #1
 8011a92:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011a94:	697b      	ldr	r3, [r7, #20]
	}
 8011a96:	4618      	mov	r0, r3
 8011a98:	3718      	adds	r7, #24
 8011a9a:	46bd      	mov	sp, r7
 8011a9c:	bd80      	pop	{r7, pc}
 8011a9e:	bf00      	nop
 8011aa0:	20026e00 	.word	0x20026e00
 8011aa4:	200272dc 	.word	0x200272dc
 8011aa8:	20026e04 	.word	0x20026e04

08011aac <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8011aac:	b580      	push	{r7, lr}
 8011aae:	b088      	sub	sp, #32
 8011ab0:	af00      	add	r7, sp, #0
 8011ab2:	6078      	str	r0, [r7, #4]
 8011ab4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8011aba:	2301      	movs	r3, #1
 8011abc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d06d      	beq.n	8011ba0 <vTaskPriorityDisinheritAfterTimeout+0xf4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8011ac4:	69bb      	ldr	r3, [r7, #24]
 8011ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d109      	bne.n	8011ae0 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8011acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ad0:	f383 8811 	msr	BASEPRI, r3
 8011ad4:	f3bf 8f6f 	isb	sy
 8011ad8:	f3bf 8f4f 	dsb	sy
 8011adc:	60fb      	str	r3, [r7, #12]
 8011ade:	e7fe      	b.n	8011ade <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011ae0:	69bb      	ldr	r3, [r7, #24]
 8011ae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011ae4:	683a      	ldr	r2, [r7, #0]
 8011ae6:	429a      	cmp	r2, r3
 8011ae8:	d902      	bls.n	8011af0 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8011aea:	683b      	ldr	r3, [r7, #0]
 8011aec:	61fb      	str	r3, [r7, #28]
 8011aee:	e002      	b.n	8011af6 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8011af0:	69bb      	ldr	r3, [r7, #24]
 8011af2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011af4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8011af6:	69bb      	ldr	r3, [r7, #24]
 8011af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011afa:	69fa      	ldr	r2, [r7, #28]
 8011afc:	429a      	cmp	r2, r3
 8011afe:	d04f      	beq.n	8011ba0 <vTaskPriorityDisinheritAfterTimeout+0xf4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011b00:	69bb      	ldr	r3, [r7, #24]
 8011b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011b04:	697a      	ldr	r2, [r7, #20]
 8011b06:	429a      	cmp	r2, r3
 8011b08:	d14a      	bne.n	8011ba0 <vTaskPriorityDisinheritAfterTimeout+0xf4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8011b0a:	4b27      	ldr	r3, [pc, #156]	; (8011ba8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	69ba      	ldr	r2, [r7, #24]
 8011b10:	429a      	cmp	r2, r3
 8011b12:	d109      	bne.n	8011b28 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8011b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b18:	f383 8811 	msr	BASEPRI, r3
 8011b1c:	f3bf 8f6f 	isb	sy
 8011b20:	f3bf 8f4f 	dsb	sy
 8011b24:	60bb      	str	r3, [r7, #8]
 8011b26:	e7fe      	b.n	8011b26 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8011b28:	69bb      	ldr	r3, [r7, #24]
 8011b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b2c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8011b2e:	69bb      	ldr	r3, [r7, #24]
 8011b30:	69fa      	ldr	r2, [r7, #28]
 8011b32:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011b34:	69bb      	ldr	r3, [r7, #24]
 8011b36:	699b      	ldr	r3, [r3, #24]
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	db04      	blt.n	8011b46 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011b3c:	69fb      	ldr	r3, [r7, #28]
 8011b3e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011b42:	69bb      	ldr	r3, [r7, #24]
 8011b44:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011b46:	69bb      	ldr	r3, [r7, #24]
 8011b48:	6959      	ldr	r1, [r3, #20]
 8011b4a:	693a      	ldr	r2, [r7, #16]
 8011b4c:	4613      	mov	r3, r2
 8011b4e:	009b      	lsls	r3, r3, #2
 8011b50:	4413      	add	r3, r2
 8011b52:	009b      	lsls	r3, r3, #2
 8011b54:	4a15      	ldr	r2, [pc, #84]	; (8011bac <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8011b56:	4413      	add	r3, r2
 8011b58:	4299      	cmp	r1, r3
 8011b5a:	d101      	bne.n	8011b60 <vTaskPriorityDisinheritAfterTimeout+0xb4>
 8011b5c:	2301      	movs	r3, #1
 8011b5e:	e000      	b.n	8011b62 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8011b60:	2300      	movs	r3, #0
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d01c      	beq.n	8011ba0 <vTaskPriorityDisinheritAfterTimeout+0xf4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011b66:	69bb      	ldr	r3, [r7, #24]
 8011b68:	3304      	adds	r3, #4
 8011b6a:	4618      	mov	r0, r3
 8011b6c:	f7fd fcb6 	bl	800f4dc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8011b70:	69bb      	ldr	r3, [r7, #24]
 8011b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b74:	4b0e      	ldr	r3, [pc, #56]	; (8011bb0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8011b76:	681b      	ldr	r3, [r3, #0]
 8011b78:	429a      	cmp	r2, r3
 8011b7a:	d903      	bls.n	8011b84 <vTaskPriorityDisinheritAfterTimeout+0xd8>
 8011b7c:	69bb      	ldr	r3, [r7, #24]
 8011b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b80:	4a0b      	ldr	r2, [pc, #44]	; (8011bb0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8011b82:	6013      	str	r3, [r2, #0]
 8011b84:	69bb      	ldr	r3, [r7, #24]
 8011b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b88:	4613      	mov	r3, r2
 8011b8a:	009b      	lsls	r3, r3, #2
 8011b8c:	4413      	add	r3, r2
 8011b8e:	009b      	lsls	r3, r3, #2
 8011b90:	4a06      	ldr	r2, [pc, #24]	; (8011bac <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8011b92:	441a      	add	r2, r3
 8011b94:	69bb      	ldr	r3, [r7, #24]
 8011b96:	3304      	adds	r3, #4
 8011b98:	4619      	mov	r1, r3
 8011b9a:	4610      	mov	r0, r2
 8011b9c:	f7fd fc41 	bl	800f422 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011ba0:	bf00      	nop
 8011ba2:	3720      	adds	r7, #32
 8011ba4:	46bd      	mov	sp, r7
 8011ba6:	bd80      	pop	{r7, pc}
 8011ba8:	20026e00 	.word	0x20026e00
 8011bac:	20026e04 	.word	0x20026e04
 8011bb0:	200272dc 	.word	0x200272dc

08011bb4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8011bb4:	b480      	push	{r7}
 8011bb6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8011bb8:	4b07      	ldr	r3, [pc, #28]	; (8011bd8 <pvTaskIncrementMutexHeldCount+0x24>)
 8011bba:	681b      	ldr	r3, [r3, #0]
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d004      	beq.n	8011bca <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8011bc0:	4b05      	ldr	r3, [pc, #20]	; (8011bd8 <pvTaskIncrementMutexHeldCount+0x24>)
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011bc6:	3201      	adds	r2, #1
 8011bc8:	655a      	str	r2, [r3, #84]	; 0x54
		}

		return pxCurrentTCB;
 8011bca:	4b03      	ldr	r3, [pc, #12]	; (8011bd8 <pvTaskIncrementMutexHeldCount+0x24>)
 8011bcc:	681b      	ldr	r3, [r3, #0]
	}
 8011bce:	4618      	mov	r0, r3
 8011bd0:	46bd      	mov	sp, r7
 8011bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bd6:	4770      	bx	lr
 8011bd8:	20026e00 	.word	0x20026e00

08011bdc <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8011bdc:	b580      	push	{r7, lr}
 8011bde:	b086      	sub	sp, #24
 8011be0:	af00      	add	r7, sp, #0
 8011be2:	60f8      	str	r0, [r7, #12]
 8011be4:	60b9      	str	r1, [r7, #8]
 8011be6:	607a      	str	r2, [r7, #4]
 8011be8:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8011bea:	f7fd fdc7 	bl	800f77c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8011bee:	4b26      	ldr	r3, [pc, #152]	; (8011c88 <xTaskNotifyWait+0xac>)
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8011bf6:	b2db      	uxtb	r3, r3
 8011bf8:	2b02      	cmp	r3, #2
 8011bfa:	d01a      	beq.n	8011c32 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8011bfc:	4b22      	ldr	r3, [pc, #136]	; (8011c88 <xTaskNotifyWait+0xac>)
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8011c02:	68fa      	ldr	r2, [r7, #12]
 8011c04:	43d2      	mvns	r2, r2
 8011c06:	400a      	ands	r2, r1
 8011c08:	65da      	str	r2, [r3, #92]	; 0x5c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8011c0a:	4b1f      	ldr	r3, [pc, #124]	; (8011c88 <xTaskNotifyWait+0xac>)
 8011c0c:	681b      	ldr	r3, [r3, #0]
 8011c0e:	2201      	movs	r2, #1
 8011c10:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

				if( xTicksToWait > ( TickType_t ) 0 )
 8011c14:	683b      	ldr	r3, [r7, #0]
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d00b      	beq.n	8011c32 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011c1a:	2101      	movs	r1, #1
 8011c1c:	6838      	ldr	r0, [r7, #0]
 8011c1e:	f000 f9a3 	bl	8011f68 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8011c22:	4b1a      	ldr	r3, [pc, #104]	; (8011c8c <xTaskNotifyWait+0xb0>)
 8011c24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011c28:	601a      	str	r2, [r3, #0]
 8011c2a:	f3bf 8f4f 	dsb	sy
 8011c2e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8011c32:	f7fd fdd1 	bl	800f7d8 <vPortExitCritical>

		taskENTER_CRITICAL();
 8011c36:	f7fd fda1 	bl	800f77c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d004      	beq.n	8011c4a <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8011c40:	4b11      	ldr	r3, [pc, #68]	; (8011c88 <xTaskNotifyWait+0xac>)
 8011c42:	681b      	ldr	r3, [r3, #0]
 8011c44:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8011c4a:	4b0f      	ldr	r3, [pc, #60]	; (8011c88 <xTaskNotifyWait+0xac>)
 8011c4c:	681b      	ldr	r3, [r3, #0]
 8011c4e:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8011c52:	b2db      	uxtb	r3, r3
 8011c54:	2b02      	cmp	r3, #2
 8011c56:	d002      	beq.n	8011c5e <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8011c58:	2300      	movs	r3, #0
 8011c5a:	617b      	str	r3, [r7, #20]
 8011c5c:	e008      	b.n	8011c70 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8011c5e:	4b0a      	ldr	r3, [pc, #40]	; (8011c88 <xTaskNotifyWait+0xac>)
 8011c60:	681b      	ldr	r3, [r3, #0]
 8011c62:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8011c64:	68ba      	ldr	r2, [r7, #8]
 8011c66:	43d2      	mvns	r2, r2
 8011c68:	400a      	ands	r2, r1
 8011c6a:	65da      	str	r2, [r3, #92]	; 0x5c
				xReturn = pdTRUE;
 8011c6c:	2301      	movs	r3, #1
 8011c6e:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011c70:	4b05      	ldr	r3, [pc, #20]	; (8011c88 <xTaskNotifyWait+0xac>)
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	2200      	movs	r2, #0
 8011c76:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		}
		taskEXIT_CRITICAL();
 8011c7a:	f7fd fdad 	bl	800f7d8 <vPortExitCritical>

		return xReturn;
 8011c7e:	697b      	ldr	r3, [r7, #20]
	}
 8011c80:	4618      	mov	r0, r3
 8011c82:	3718      	adds	r7, #24
 8011c84:	46bd      	mov	sp, r7
 8011c86:	bd80      	pop	{r7, pc}
 8011c88:	20026e00 	.word	0x20026e00
 8011c8c:	e000ed04 	.word	0xe000ed04

08011c90 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8011c90:	b580      	push	{r7, lr}
 8011c92:	b08a      	sub	sp, #40	; 0x28
 8011c94:	af00      	add	r7, sp, #0
 8011c96:	60f8      	str	r0, [r7, #12]
 8011c98:	60b9      	str	r1, [r7, #8]
 8011c9a:	603b      	str	r3, [r7, #0]
 8011c9c:	4613      	mov	r3, r2
 8011c9e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8011ca0:	2301      	movs	r3, #1
 8011ca2:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d109      	bne.n	8011cbe <xTaskGenericNotify+0x2e>
 8011caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cae:	f383 8811 	msr	BASEPRI, r3
 8011cb2:	f3bf 8f6f 	isb	sy
 8011cb6:	f3bf 8f4f 	dsb	sy
 8011cba:	61bb      	str	r3, [r7, #24]
 8011cbc:	e7fe      	b.n	8011cbc <xTaskGenericNotify+0x2c>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 8011cbe:	68fb      	ldr	r3, [r7, #12]
 8011cc0:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8011cc2:	f7fd fd5b 	bl	800f77c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8011cc6:	683b      	ldr	r3, [r7, #0]
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d003      	beq.n	8011cd4 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8011ccc:	6a3b      	ldr	r3, [r7, #32]
 8011cce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011cd0:	683b      	ldr	r3, [r7, #0]
 8011cd2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8011cd4:	6a3b      	ldr	r3, [r7, #32]
 8011cd6:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8011cda:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8011cdc:	6a3b      	ldr	r3, [r7, #32]
 8011cde:	2202      	movs	r2, #2
 8011ce0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

			switch( eAction )
 8011ce4:	79fb      	ldrb	r3, [r7, #7]
 8011ce6:	2b04      	cmp	r3, #4
 8011ce8:	d827      	bhi.n	8011d3a <xTaskGenericNotify+0xaa>
 8011cea:	a201      	add	r2, pc, #4	; (adr r2, 8011cf0 <xTaskGenericNotify+0x60>)
 8011cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011cf0:	08011d3b 	.word	0x08011d3b
 8011cf4:	08011d05 	.word	0x08011d05
 8011cf8:	08011d13 	.word	0x08011d13
 8011cfc:	08011d1f 	.word	0x08011d1f
 8011d00:	08011d27 	.word	0x08011d27
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8011d04:	6a3b      	ldr	r3, [r7, #32]
 8011d06:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011d08:	68bb      	ldr	r3, [r7, #8]
 8011d0a:	431a      	orrs	r2, r3
 8011d0c:	6a3b      	ldr	r3, [r7, #32]
 8011d0e:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8011d10:	e013      	b.n	8011d3a <xTaskGenericNotify+0xaa>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8011d12:	6a3b      	ldr	r3, [r7, #32]
 8011d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011d16:	1c5a      	adds	r2, r3, #1
 8011d18:	6a3b      	ldr	r3, [r7, #32]
 8011d1a:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8011d1c:	e00d      	b.n	8011d3a <xTaskGenericNotify+0xaa>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8011d1e:	6a3b      	ldr	r3, [r7, #32]
 8011d20:	68ba      	ldr	r2, [r7, #8]
 8011d22:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8011d24:	e009      	b.n	8011d3a <xTaskGenericNotify+0xaa>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8011d26:	7ffb      	ldrb	r3, [r7, #31]
 8011d28:	2b02      	cmp	r3, #2
 8011d2a:	d003      	beq.n	8011d34 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8011d2c:	6a3b      	ldr	r3, [r7, #32]
 8011d2e:	68ba      	ldr	r2, [r7, #8]
 8011d30:	65da      	str	r2, [r3, #92]	; 0x5c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8011d32:	e001      	b.n	8011d38 <xTaskGenericNotify+0xa8>
						xReturn = pdFAIL;
 8011d34:	2300      	movs	r3, #0
 8011d36:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8011d38:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8011d3a:	7ffb      	ldrb	r3, [r7, #31]
 8011d3c:	2b01      	cmp	r3, #1
 8011d3e:	d13b      	bne.n	8011db8 <xTaskGenericNotify+0x128>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011d40:	6a3b      	ldr	r3, [r7, #32]
 8011d42:	3304      	adds	r3, #4
 8011d44:	4618      	mov	r0, r3
 8011d46:	f7fd fbc9 	bl	800f4dc <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8011d4a:	6a3b      	ldr	r3, [r7, #32]
 8011d4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d4e:	4b1e      	ldr	r3, [pc, #120]	; (8011dc8 <xTaskGenericNotify+0x138>)
 8011d50:	681b      	ldr	r3, [r3, #0]
 8011d52:	429a      	cmp	r2, r3
 8011d54:	d903      	bls.n	8011d5e <xTaskGenericNotify+0xce>
 8011d56:	6a3b      	ldr	r3, [r7, #32]
 8011d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d5a:	4a1b      	ldr	r2, [pc, #108]	; (8011dc8 <xTaskGenericNotify+0x138>)
 8011d5c:	6013      	str	r3, [r2, #0]
 8011d5e:	6a3b      	ldr	r3, [r7, #32]
 8011d60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d62:	4613      	mov	r3, r2
 8011d64:	009b      	lsls	r3, r3, #2
 8011d66:	4413      	add	r3, r2
 8011d68:	009b      	lsls	r3, r3, #2
 8011d6a:	4a18      	ldr	r2, [pc, #96]	; (8011dcc <xTaskGenericNotify+0x13c>)
 8011d6c:	441a      	add	r2, r3
 8011d6e:	6a3b      	ldr	r3, [r7, #32]
 8011d70:	3304      	adds	r3, #4
 8011d72:	4619      	mov	r1, r3
 8011d74:	4610      	mov	r0, r2
 8011d76:	f7fd fb54 	bl	800f422 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8011d7a:	6a3b      	ldr	r3, [r7, #32]
 8011d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d009      	beq.n	8011d96 <xTaskGenericNotify+0x106>
 8011d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d86:	f383 8811 	msr	BASEPRI, r3
 8011d8a:	f3bf 8f6f 	isb	sy
 8011d8e:	f3bf 8f4f 	dsb	sy
 8011d92:	617b      	str	r3, [r7, #20]
 8011d94:	e7fe      	b.n	8011d94 <xTaskGenericNotify+0x104>
					the tick count equals xNextTaskUnblockTime.  However if
					tickless idling is used it might be more important to enter
					sleep mode at the earliest possible time - so reset
					xNextTaskUnblockTime here to ensure it is updated at the
					earliest possible time. */
					prvResetNextTaskUnblockTime();
 8011d96:	f7ff fd5b 	bl	8011850 <prvResetNextTaskUnblockTime>
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011d9a:	6a3b      	ldr	r3, [r7, #32]
 8011d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d9e:	4b0c      	ldr	r3, [pc, #48]	; (8011dd0 <xTaskGenericNotify+0x140>)
 8011da0:	681b      	ldr	r3, [r3, #0]
 8011da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011da4:	429a      	cmp	r2, r3
 8011da6:	d907      	bls.n	8011db8 <xTaskGenericNotify+0x128>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8011da8:	4b0a      	ldr	r3, [pc, #40]	; (8011dd4 <xTaskGenericNotify+0x144>)
 8011daa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011dae:	601a      	str	r2, [r3, #0]
 8011db0:	f3bf 8f4f 	dsb	sy
 8011db4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8011db8:	f7fd fd0e 	bl	800f7d8 <vPortExitCritical>

		return xReturn;
 8011dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8011dbe:	4618      	mov	r0, r3
 8011dc0:	3728      	adds	r7, #40	; 0x28
 8011dc2:	46bd      	mov	sp, r7
 8011dc4:	bd80      	pop	{r7, pc}
 8011dc6:	bf00      	nop
 8011dc8:	200272dc 	.word	0x200272dc
 8011dcc:	20026e04 	.word	0x20026e04
 8011dd0:	20026e00 	.word	0x20026e00
 8011dd4:	e000ed04 	.word	0xe000ed04

08011dd8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8011dd8:	b580      	push	{r7, lr}
 8011dda:	b08e      	sub	sp, #56	; 0x38
 8011ddc:	af00      	add	r7, sp, #0
 8011dde:	60f8      	str	r0, [r7, #12]
 8011de0:	60b9      	str	r1, [r7, #8]
 8011de2:	603b      	str	r3, [r7, #0]
 8011de4:	4613      	mov	r3, r2
 8011de6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8011de8:	2301      	movs	r3, #1
 8011dea:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8011dec:	68fb      	ldr	r3, [r7, #12]
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d109      	bne.n	8011e06 <xTaskGenericNotifyFromISR+0x2e>
 8011df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011df6:	f383 8811 	msr	BASEPRI, r3
 8011dfa:	f3bf 8f6f 	isb	sy
 8011dfe:	f3bf 8f4f 	dsb	sy
 8011e02:	627b      	str	r3, [r7, #36]	; 0x24
 8011e04:	e7fe      	b.n	8011e04 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011e06:	f7fd fd71 	bl	800f8ec <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 8011e0a:	68fb      	ldr	r3, [r7, #12]
 8011e0c:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8011e0e:	f3ef 8211 	mrs	r2, BASEPRI
 8011e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e16:	f383 8811 	msr	BASEPRI, r3
 8011e1a:	f3bf 8f6f 	isb	sy
 8011e1e:	f3bf 8f4f 	dsb	sy
 8011e22:	623a      	str	r2, [r7, #32]
 8011e24:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8011e26:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011e28:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8011e2a:	683b      	ldr	r3, [r7, #0]
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d003      	beq.n	8011e38 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8011e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e32:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011e34:	683b      	ldr	r3, [r7, #0]
 8011e36:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8011e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e3a:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8011e3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8011e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e44:	2202      	movs	r2, #2
 8011e46:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

			switch( eAction )
 8011e4a:	79fb      	ldrb	r3, [r7, #7]
 8011e4c:	2b04      	cmp	r3, #4
 8011e4e:	d829      	bhi.n	8011ea4 <xTaskGenericNotifyFromISR+0xcc>
 8011e50:	a201      	add	r2, pc, #4	; (adr r2, 8011e58 <xTaskGenericNotifyFromISR+0x80>)
 8011e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e56:	bf00      	nop
 8011e58:	08011ea5 	.word	0x08011ea5
 8011e5c:	08011e6d 	.word	0x08011e6d
 8011e60:	08011e7b 	.word	0x08011e7b
 8011e64:	08011e87 	.word	0x08011e87
 8011e68:	08011e8f 	.word	0x08011e8f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8011e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e6e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011e70:	68bb      	ldr	r3, [r7, #8]
 8011e72:	431a      	orrs	r2, r3
 8011e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e76:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8011e78:	e014      	b.n	8011ea4 <xTaskGenericNotifyFromISR+0xcc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8011e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011e7e:	1c5a      	adds	r2, r3, #1
 8011e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e82:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8011e84:	e00e      	b.n	8011ea4 <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8011e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e88:	68ba      	ldr	r2, [r7, #8]
 8011e8a:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8011e8c:	e00a      	b.n	8011ea4 <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8011e8e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011e92:	2b02      	cmp	r3, #2
 8011e94:	d003      	beq.n	8011e9e <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8011e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e98:	68ba      	ldr	r2, [r7, #8]
 8011e9a:	65da      	str	r2, [r3, #92]	; 0x5c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8011e9c:	e001      	b.n	8011ea2 <xTaskGenericNotifyFromISR+0xca>
						xReturn = pdFAIL;
 8011e9e:	2300      	movs	r3, #0
 8011ea0:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8011ea2:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8011ea4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011ea8:	2b01      	cmp	r3, #1
 8011eaa:	d146      	bne.n	8011f3a <xTaskGenericNotifyFromISR+0x162>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8011eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d009      	beq.n	8011ec8 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 8011eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011eb8:	f383 8811 	msr	BASEPRI, r3
 8011ebc:	f3bf 8f6f 	isb	sy
 8011ec0:	f3bf 8f4f 	dsb	sy
 8011ec4:	61bb      	str	r3, [r7, #24]
 8011ec6:	e7fe      	b.n	8011ec6 <xTaskGenericNotifyFromISR+0xee>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011ec8:	4b21      	ldr	r3, [pc, #132]	; (8011f50 <xTaskGenericNotifyFromISR+0x178>)
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d11d      	bne.n	8011f0c <xTaskGenericNotifyFromISR+0x134>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ed2:	3304      	adds	r3, #4
 8011ed4:	4618      	mov	r0, r3
 8011ed6:	f7fd fb01 	bl	800f4dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011edc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ede:	4b1d      	ldr	r3, [pc, #116]	; (8011f54 <xTaskGenericNotifyFromISR+0x17c>)
 8011ee0:	681b      	ldr	r3, [r3, #0]
 8011ee2:	429a      	cmp	r2, r3
 8011ee4:	d903      	bls.n	8011eee <xTaskGenericNotifyFromISR+0x116>
 8011ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011eea:	4a1a      	ldr	r2, [pc, #104]	; (8011f54 <xTaskGenericNotifyFromISR+0x17c>)
 8011eec:	6013      	str	r3, [r2, #0]
 8011eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ef2:	4613      	mov	r3, r2
 8011ef4:	009b      	lsls	r3, r3, #2
 8011ef6:	4413      	add	r3, r2
 8011ef8:	009b      	lsls	r3, r3, #2
 8011efa:	4a17      	ldr	r2, [pc, #92]	; (8011f58 <xTaskGenericNotifyFromISR+0x180>)
 8011efc:	441a      	add	r2, r3
 8011efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f00:	3304      	adds	r3, #4
 8011f02:	4619      	mov	r1, r3
 8011f04:	4610      	mov	r0, r2
 8011f06:	f7fd fa8c 	bl	800f422 <vListInsertEnd>
 8011f0a:	e005      	b.n	8011f18 <xTaskGenericNotifyFromISR+0x140>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8011f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f0e:	3318      	adds	r3, #24
 8011f10:	4619      	mov	r1, r3
 8011f12:	4812      	ldr	r0, [pc, #72]	; (8011f5c <xTaskGenericNotifyFromISR+0x184>)
 8011f14:	f7fd fa85 	bl	800f422 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f1c:	4b10      	ldr	r3, [pc, #64]	; (8011f60 <xTaskGenericNotifyFromISR+0x188>)
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f22:	429a      	cmp	r2, r3
 8011f24:	d909      	bls.n	8011f3a <xTaskGenericNotifyFromISR+0x162>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8011f26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d003      	beq.n	8011f34 <xTaskGenericNotifyFromISR+0x15c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8011f2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011f2e:	2201      	movs	r2, #1
 8011f30:	601a      	str	r2, [r3, #0]
 8011f32:	e002      	b.n	8011f3a <xTaskGenericNotifyFromISR+0x162>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 8011f34:	4b0b      	ldr	r3, [pc, #44]	; (8011f64 <xTaskGenericNotifyFromISR+0x18c>)
 8011f36:	2201      	movs	r2, #1
 8011f38:	601a      	str	r2, [r3, #0]
 8011f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f3c:	617b      	str	r3, [r7, #20]
	__asm volatile
 8011f3e:	697b      	ldr	r3, [r7, #20]
 8011f40:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8011f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8011f46:	4618      	mov	r0, r3
 8011f48:	3738      	adds	r7, #56	; 0x38
 8011f4a:	46bd      	mov	sp, r7
 8011f4c:	bd80      	pop	{r7, pc}
 8011f4e:	bf00      	nop
 8011f50:	200272fc 	.word	0x200272fc
 8011f54:	200272dc 	.word	0x200272dc
 8011f58:	20026e04 	.word	0x20026e04
 8011f5c:	20027294 	.word	0x20027294
 8011f60:	20026e00 	.word	0x20026e00
 8011f64:	200272e8 	.word	0x200272e8

08011f68 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011f68:	b580      	push	{r7, lr}
 8011f6a:	b084      	sub	sp, #16
 8011f6c:	af00      	add	r7, sp, #0
 8011f6e:	6078      	str	r0, [r7, #4]
 8011f70:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011f72:	4b21      	ldr	r3, [pc, #132]	; (8011ff8 <prvAddCurrentTaskToDelayedList+0x90>)
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011f78:	4b20      	ldr	r3, [pc, #128]	; (8011ffc <prvAddCurrentTaskToDelayedList+0x94>)
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	3304      	adds	r3, #4
 8011f7e:	4618      	mov	r0, r3
 8011f80:	f7fd faac 	bl	800f4dc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f8a:	d10a      	bne.n	8011fa2 <prvAddCurrentTaskToDelayedList+0x3a>
 8011f8c:	683b      	ldr	r3, [r7, #0]
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d007      	beq.n	8011fa2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011f92:	4b1a      	ldr	r3, [pc, #104]	; (8011ffc <prvAddCurrentTaskToDelayedList+0x94>)
 8011f94:	681b      	ldr	r3, [r3, #0]
 8011f96:	3304      	adds	r3, #4
 8011f98:	4619      	mov	r1, r3
 8011f9a:	4819      	ldr	r0, [pc, #100]	; (8012000 <prvAddCurrentTaskToDelayedList+0x98>)
 8011f9c:	f7fd fa41 	bl	800f422 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011fa0:	e026      	b.n	8011ff0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011fa2:	68fa      	ldr	r2, [r7, #12]
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	4413      	add	r3, r2
 8011fa8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011faa:	4b14      	ldr	r3, [pc, #80]	; (8011ffc <prvAddCurrentTaskToDelayedList+0x94>)
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	68ba      	ldr	r2, [r7, #8]
 8011fb0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011fb2:	68ba      	ldr	r2, [r7, #8]
 8011fb4:	68fb      	ldr	r3, [r7, #12]
 8011fb6:	429a      	cmp	r2, r3
 8011fb8:	d209      	bcs.n	8011fce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011fba:	4b12      	ldr	r3, [pc, #72]	; (8012004 <prvAddCurrentTaskToDelayedList+0x9c>)
 8011fbc:	681a      	ldr	r2, [r3, #0]
 8011fbe:	4b0f      	ldr	r3, [pc, #60]	; (8011ffc <prvAddCurrentTaskToDelayedList+0x94>)
 8011fc0:	681b      	ldr	r3, [r3, #0]
 8011fc2:	3304      	adds	r3, #4
 8011fc4:	4619      	mov	r1, r3
 8011fc6:	4610      	mov	r0, r2
 8011fc8:	f7fd fa4f 	bl	800f46a <vListInsert>
}
 8011fcc:	e010      	b.n	8011ff0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011fce:	4b0e      	ldr	r3, [pc, #56]	; (8012008 <prvAddCurrentTaskToDelayedList+0xa0>)
 8011fd0:	681a      	ldr	r2, [r3, #0]
 8011fd2:	4b0a      	ldr	r3, [pc, #40]	; (8011ffc <prvAddCurrentTaskToDelayedList+0x94>)
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	3304      	adds	r3, #4
 8011fd8:	4619      	mov	r1, r3
 8011fda:	4610      	mov	r0, r2
 8011fdc:	f7fd fa45 	bl	800f46a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011fe0:	4b0a      	ldr	r3, [pc, #40]	; (801200c <prvAddCurrentTaskToDelayedList+0xa4>)
 8011fe2:	681b      	ldr	r3, [r3, #0]
 8011fe4:	68ba      	ldr	r2, [r7, #8]
 8011fe6:	429a      	cmp	r2, r3
 8011fe8:	d202      	bcs.n	8011ff0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8011fea:	4a08      	ldr	r2, [pc, #32]	; (801200c <prvAddCurrentTaskToDelayedList+0xa4>)
 8011fec:	68bb      	ldr	r3, [r7, #8]
 8011fee:	6013      	str	r3, [r2, #0]
}
 8011ff0:	bf00      	nop
 8011ff2:	3710      	adds	r7, #16
 8011ff4:	46bd      	mov	sp, r7
 8011ff6:	bd80      	pop	{r7, pc}
 8011ff8:	200272d8 	.word	0x200272d8
 8011ffc:	20026e00 	.word	0x20026e00
 8012000:	200272c0 	.word	0x200272c0
 8012004:	20027290 	.word	0x20027290
 8012008:	2002728c 	.word	0x2002728c
 801200c:	200272f4 	.word	0x200272f4

08012010 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8012010:	b580      	push	{r7, lr}
 8012012:	b08a      	sub	sp, #40	; 0x28
 8012014:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8012016:	2300      	movs	r3, #0
 8012018:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801201a:	f000 fb51 	bl	80126c0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801201e:	4b1c      	ldr	r3, [pc, #112]	; (8012090 <xTimerCreateTimerTask+0x80>)
 8012020:	681b      	ldr	r3, [r3, #0]
 8012022:	2b00      	cmp	r3, #0
 8012024:	d021      	beq.n	801206a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8012026:	2300      	movs	r3, #0
 8012028:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801202a:	2300      	movs	r3, #0
 801202c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801202e:	1d3a      	adds	r2, r7, #4
 8012030:	f107 0108 	add.w	r1, r7, #8
 8012034:	f107 030c 	add.w	r3, r7, #12
 8012038:	4618      	mov	r0, r3
 801203a:	f7fc ffcf 	bl	800efdc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801203e:	6879      	ldr	r1, [r7, #4]
 8012040:	68bb      	ldr	r3, [r7, #8]
 8012042:	68fa      	ldr	r2, [r7, #12]
 8012044:	9202      	str	r2, [sp, #8]
 8012046:	9301      	str	r3, [sp, #4]
 8012048:	2302      	movs	r3, #2
 801204a:	9300      	str	r3, [sp, #0]
 801204c:	2300      	movs	r3, #0
 801204e:	460a      	mov	r2, r1
 8012050:	4910      	ldr	r1, [pc, #64]	; (8012094 <xTimerCreateTimerTask+0x84>)
 8012052:	4811      	ldr	r0, [pc, #68]	; (8012098 <xTimerCreateTimerTask+0x88>)
 8012054:	f7fe fd28 	bl	8010aa8 <xTaskCreateStatic>
 8012058:	4602      	mov	r2, r0
 801205a:	4b10      	ldr	r3, [pc, #64]	; (801209c <xTimerCreateTimerTask+0x8c>)
 801205c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801205e:	4b0f      	ldr	r3, [pc, #60]	; (801209c <xTimerCreateTimerTask+0x8c>)
 8012060:	681b      	ldr	r3, [r3, #0]
 8012062:	2b00      	cmp	r3, #0
 8012064:	d001      	beq.n	801206a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8012066:	2301      	movs	r3, #1
 8012068:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801206a:	697b      	ldr	r3, [r7, #20]
 801206c:	2b00      	cmp	r3, #0
 801206e:	d109      	bne.n	8012084 <xTimerCreateTimerTask+0x74>
	__asm volatile
 8012070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012074:	f383 8811 	msr	BASEPRI, r3
 8012078:	f3bf 8f6f 	isb	sy
 801207c:	f3bf 8f4f 	dsb	sy
 8012080:	613b      	str	r3, [r7, #16]
 8012082:	e7fe      	b.n	8012082 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8012084:	697b      	ldr	r3, [r7, #20]
}
 8012086:	4618      	mov	r0, r3
 8012088:	3718      	adds	r7, #24
 801208a:	46bd      	mov	sp, r7
 801208c:	bd80      	pop	{r7, pc}
 801208e:	bf00      	nop
 8012090:	20027338 	.word	0x20027338
 8012094:	08017300 	.word	0x08017300
 8012098:	080122d5 	.word	0x080122d5
 801209c:	2002733c 	.word	0x2002733c

080120a0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80120a0:	b580      	push	{r7, lr}
 80120a2:	b088      	sub	sp, #32
 80120a4:	af02      	add	r7, sp, #8
 80120a6:	60f8      	str	r0, [r7, #12]
 80120a8:	60b9      	str	r1, [r7, #8]
 80120aa:	607a      	str	r2, [r7, #4]
 80120ac:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 80120ae:	2030      	movs	r0, #48	; 0x30
 80120b0:	f7fc ffae 	bl	800f010 <pvPortMalloc>
 80120b4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80120b6:	697b      	ldr	r3, [r7, #20]
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d00d      	beq.n	80120d8 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80120bc:	697b      	ldr	r3, [r7, #20]
 80120be:	9301      	str	r3, [sp, #4]
 80120c0:	6a3b      	ldr	r3, [r7, #32]
 80120c2:	9300      	str	r3, [sp, #0]
 80120c4:	683b      	ldr	r3, [r7, #0]
 80120c6:	687a      	ldr	r2, [r7, #4]
 80120c8:	68b9      	ldr	r1, [r7, #8]
 80120ca:	68f8      	ldr	r0, [r7, #12]
 80120cc:	f000 f844 	bl	8012158 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 80120d0:	697b      	ldr	r3, [r7, #20]
 80120d2:	2200      	movs	r2, #0
 80120d4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 80120d8:	697b      	ldr	r3, [r7, #20]
	}
 80120da:	4618      	mov	r0, r3
 80120dc:	3718      	adds	r7, #24
 80120de:	46bd      	mov	sp, r7
 80120e0:	bd80      	pop	{r7, pc}

080120e2 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 80120e2:	b580      	push	{r7, lr}
 80120e4:	b08a      	sub	sp, #40	; 0x28
 80120e6:	af02      	add	r7, sp, #8
 80120e8:	60f8      	str	r0, [r7, #12]
 80120ea:	60b9      	str	r1, [r7, #8]
 80120ec:	607a      	str	r2, [r7, #4]
 80120ee:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80120f0:	2330      	movs	r3, #48	; 0x30
 80120f2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80120f4:	693b      	ldr	r3, [r7, #16]
 80120f6:	2b30      	cmp	r3, #48	; 0x30
 80120f8:	d009      	beq.n	801210e <xTimerCreateStatic+0x2c>
 80120fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120fe:	f383 8811 	msr	BASEPRI, r3
 8012102:	f3bf 8f6f 	isb	sy
 8012106:	f3bf 8f4f 	dsb	sy
 801210a:	61bb      	str	r3, [r7, #24]
 801210c:	e7fe      	b.n	801210c <xTimerCreateStatic+0x2a>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 801210e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012110:	2b00      	cmp	r3, #0
 8012112:	d109      	bne.n	8012128 <xTimerCreateStatic+0x46>
 8012114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012118:	f383 8811 	msr	BASEPRI, r3
 801211c:	f3bf 8f6f 	isb	sy
 8012120:	f3bf 8f4f 	dsb	sy
 8012124:	617b      	str	r3, [r7, #20]
 8012126:	e7fe      	b.n	8012126 <xTimerCreateStatic+0x44>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801212a:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 801212c:	69fb      	ldr	r3, [r7, #28]
 801212e:	2b00      	cmp	r3, #0
 8012130:	d00d      	beq.n	801214e <xTimerCreateStatic+0x6c>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8012132:	69fb      	ldr	r3, [r7, #28]
 8012134:	9301      	str	r3, [sp, #4]
 8012136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012138:	9300      	str	r3, [sp, #0]
 801213a:	683b      	ldr	r3, [r7, #0]
 801213c:	687a      	ldr	r2, [r7, #4]
 801213e:	68b9      	ldr	r1, [r7, #8]
 8012140:	68f8      	ldr	r0, [r7, #12]
 8012142:	f000 f809 	bl	8012158 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8012146:	69fb      	ldr	r3, [r7, #28]
 8012148:	2201      	movs	r2, #1
 801214a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 801214e:	69fb      	ldr	r3, [r7, #28]
	}
 8012150:	4618      	mov	r0, r3
 8012152:	3720      	adds	r7, #32
 8012154:	46bd      	mov	sp, r7
 8012156:	bd80      	pop	{r7, pc}

08012158 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8012158:	b580      	push	{r7, lr}
 801215a:	b086      	sub	sp, #24
 801215c:	af00      	add	r7, sp, #0
 801215e:	60f8      	str	r0, [r7, #12]
 8012160:	60b9      	str	r1, [r7, #8]
 8012162:	607a      	str	r2, [r7, #4]
 8012164:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8012166:	68bb      	ldr	r3, [r7, #8]
 8012168:	2b00      	cmp	r3, #0
 801216a:	d109      	bne.n	8012180 <prvInitialiseNewTimer+0x28>
 801216c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012170:	f383 8811 	msr	BASEPRI, r3
 8012174:	f3bf 8f6f 	isb	sy
 8012178:	f3bf 8f4f 	dsb	sy
 801217c:	617b      	str	r3, [r7, #20]
 801217e:	e7fe      	b.n	801217e <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 8012180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012182:	2b00      	cmp	r3, #0
 8012184:	d015      	beq.n	80121b2 <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8012186:	f000 fa9b 	bl	80126c0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 801218a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801218c:	68fa      	ldr	r2, [r7, #12]
 801218e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8012190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012192:	68ba      	ldr	r2, [r7, #8]
 8012194:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8012196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012198:	687a      	ldr	r2, [r7, #4]
 801219a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 801219c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801219e:	683a      	ldr	r2, [r7, #0]
 80121a0:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80121a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121a4:	6a3a      	ldr	r2, [r7, #32]
 80121a6:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80121a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121aa:	3304      	adds	r3, #4
 80121ac:	4618      	mov	r0, r3
 80121ae:	f7fd f92b 	bl	800f408 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80121b2:	bf00      	nop
 80121b4:	3718      	adds	r7, #24
 80121b6:	46bd      	mov	sp, r7
 80121b8:	bd80      	pop	{r7, pc}
	...

080121bc <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80121bc:	b580      	push	{r7, lr}
 80121be:	b08a      	sub	sp, #40	; 0x28
 80121c0:	af00      	add	r7, sp, #0
 80121c2:	60f8      	str	r0, [r7, #12]
 80121c4:	60b9      	str	r1, [r7, #8]
 80121c6:	607a      	str	r2, [r7, #4]
 80121c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80121ca:	2300      	movs	r3, #0
 80121cc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80121ce:	68fb      	ldr	r3, [r7, #12]
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d109      	bne.n	80121e8 <xTimerGenericCommand+0x2c>
 80121d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121d8:	f383 8811 	msr	BASEPRI, r3
 80121dc:	f3bf 8f6f 	isb	sy
 80121e0:	f3bf 8f4f 	dsb	sy
 80121e4:	623b      	str	r3, [r7, #32]
 80121e6:	e7fe      	b.n	80121e6 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80121e8:	4b19      	ldr	r3, [pc, #100]	; (8012250 <xTimerGenericCommand+0x94>)
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d02a      	beq.n	8012246 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80121f0:	68bb      	ldr	r3, [r7, #8]
 80121f2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80121f8:	68fb      	ldr	r3, [r7, #12]
 80121fa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80121fc:	68bb      	ldr	r3, [r7, #8]
 80121fe:	2b05      	cmp	r3, #5
 8012200:	dc18      	bgt.n	8012234 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8012202:	f7ff fb5b 	bl	80118bc <xTaskGetSchedulerState>
 8012206:	4603      	mov	r3, r0
 8012208:	2b02      	cmp	r3, #2
 801220a:	d109      	bne.n	8012220 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801220c:	4b10      	ldr	r3, [pc, #64]	; (8012250 <xTimerGenericCommand+0x94>)
 801220e:	6818      	ldr	r0, [r3, #0]
 8012210:	f107 0110 	add.w	r1, r7, #16
 8012214:	2300      	movs	r3, #0
 8012216:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012218:	f7fd fdfc 	bl	800fe14 <xQueueGenericSend>
 801221c:	6278      	str	r0, [r7, #36]	; 0x24
 801221e:	e012      	b.n	8012246 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8012220:	4b0b      	ldr	r3, [pc, #44]	; (8012250 <xTimerGenericCommand+0x94>)
 8012222:	6818      	ldr	r0, [r3, #0]
 8012224:	f107 0110 	add.w	r1, r7, #16
 8012228:	2300      	movs	r3, #0
 801222a:	2200      	movs	r2, #0
 801222c:	f7fd fdf2 	bl	800fe14 <xQueueGenericSend>
 8012230:	6278      	str	r0, [r7, #36]	; 0x24
 8012232:	e008      	b.n	8012246 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8012234:	4b06      	ldr	r3, [pc, #24]	; (8012250 <xTimerGenericCommand+0x94>)
 8012236:	6818      	ldr	r0, [r3, #0]
 8012238:	f107 0110 	add.w	r1, r7, #16
 801223c:	2300      	movs	r3, #0
 801223e:	683a      	ldr	r2, [r7, #0]
 8012240:	f7fd fee2 	bl	8010008 <xQueueGenericSendFromISR>
 8012244:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8012246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012248:	4618      	mov	r0, r3
 801224a:	3728      	adds	r7, #40	; 0x28
 801224c:	46bd      	mov	sp, r7
 801224e:	bd80      	pop	{r7, pc}
 8012250:	20027338 	.word	0x20027338

08012254 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8012254:	b580      	push	{r7, lr}
 8012256:	b088      	sub	sp, #32
 8012258:	af02      	add	r7, sp, #8
 801225a:	6078      	str	r0, [r7, #4]
 801225c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 801225e:	4b1c      	ldr	r3, [pc, #112]	; (80122d0 <prvProcessExpiredTimer+0x7c>)
 8012260:	681b      	ldr	r3, [r3, #0]
 8012262:	68db      	ldr	r3, [r3, #12]
 8012264:	68db      	ldr	r3, [r3, #12]
 8012266:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012268:	697b      	ldr	r3, [r7, #20]
 801226a:	3304      	adds	r3, #4
 801226c:	4618      	mov	r0, r3
 801226e:	f7fd f935 	bl	800f4dc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8012272:	697b      	ldr	r3, [r7, #20]
 8012274:	69db      	ldr	r3, [r3, #28]
 8012276:	2b01      	cmp	r3, #1
 8012278:	d121      	bne.n	80122be <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801227a:	697b      	ldr	r3, [r7, #20]
 801227c:	699a      	ldr	r2, [r3, #24]
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	18d1      	adds	r1, r2, r3
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	683a      	ldr	r2, [r7, #0]
 8012286:	6978      	ldr	r0, [r7, #20]
 8012288:	f000 f8c8 	bl	801241c <prvInsertTimerInActiveList>
 801228c:	4603      	mov	r3, r0
 801228e:	2b00      	cmp	r3, #0
 8012290:	d015      	beq.n	80122be <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012292:	2300      	movs	r3, #0
 8012294:	9300      	str	r3, [sp, #0]
 8012296:	2300      	movs	r3, #0
 8012298:	687a      	ldr	r2, [r7, #4]
 801229a:	2100      	movs	r1, #0
 801229c:	6978      	ldr	r0, [r7, #20]
 801229e:	f7ff ff8d 	bl	80121bc <xTimerGenericCommand>
 80122a2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80122a4:	693b      	ldr	r3, [r7, #16]
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d109      	bne.n	80122be <prvProcessExpiredTimer+0x6a>
 80122aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122ae:	f383 8811 	msr	BASEPRI, r3
 80122b2:	f3bf 8f6f 	isb	sy
 80122b6:	f3bf 8f4f 	dsb	sy
 80122ba:	60fb      	str	r3, [r7, #12]
 80122bc:	e7fe      	b.n	80122bc <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80122be:	697b      	ldr	r3, [r7, #20]
 80122c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122c2:	6978      	ldr	r0, [r7, #20]
 80122c4:	4798      	blx	r3
}
 80122c6:	bf00      	nop
 80122c8:	3718      	adds	r7, #24
 80122ca:	46bd      	mov	sp, r7
 80122cc:	bd80      	pop	{r7, pc}
 80122ce:	bf00      	nop
 80122d0:	20027330 	.word	0x20027330

080122d4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80122d4:	b580      	push	{r7, lr}
 80122d6:	b084      	sub	sp, #16
 80122d8:	af00      	add	r7, sp, #0
 80122da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80122dc:	f107 0308 	add.w	r3, r7, #8
 80122e0:	4618      	mov	r0, r3
 80122e2:	f000 f857 	bl	8012394 <prvGetNextExpireTime>
 80122e6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80122e8:	68bb      	ldr	r3, [r7, #8]
 80122ea:	4619      	mov	r1, r3
 80122ec:	68f8      	ldr	r0, [r7, #12]
 80122ee:	f000 f803 	bl	80122f8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80122f2:	f000 f8d5 	bl	80124a0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80122f6:	e7f1      	b.n	80122dc <prvTimerTask+0x8>

080122f8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80122f8:	b580      	push	{r7, lr}
 80122fa:	b084      	sub	sp, #16
 80122fc:	af00      	add	r7, sp, #0
 80122fe:	6078      	str	r0, [r7, #4]
 8012300:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8012302:	f7fe fe05 	bl	8010f10 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012306:	f107 0308 	add.w	r3, r7, #8
 801230a:	4618      	mov	r0, r3
 801230c:	f000 f866 	bl	80123dc <prvSampleTimeNow>
 8012310:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8012312:	68bb      	ldr	r3, [r7, #8]
 8012314:	2b00      	cmp	r3, #0
 8012316:	d130      	bne.n	801237a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8012318:	683b      	ldr	r3, [r7, #0]
 801231a:	2b00      	cmp	r3, #0
 801231c:	d10a      	bne.n	8012334 <prvProcessTimerOrBlockTask+0x3c>
 801231e:	687a      	ldr	r2, [r7, #4]
 8012320:	68fb      	ldr	r3, [r7, #12]
 8012322:	429a      	cmp	r2, r3
 8012324:	d806      	bhi.n	8012334 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8012326:	f7fe fe39 	bl	8010f9c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801232a:	68f9      	ldr	r1, [r7, #12]
 801232c:	6878      	ldr	r0, [r7, #4]
 801232e:	f7ff ff91 	bl	8012254 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8012332:	e024      	b.n	801237e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8012334:	683b      	ldr	r3, [r7, #0]
 8012336:	2b00      	cmp	r3, #0
 8012338:	d008      	beq.n	801234c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801233a:	4b13      	ldr	r3, [pc, #76]	; (8012388 <prvProcessTimerOrBlockTask+0x90>)
 801233c:	681b      	ldr	r3, [r3, #0]
 801233e:	681b      	ldr	r3, [r3, #0]
 8012340:	2b00      	cmp	r3, #0
 8012342:	bf0c      	ite	eq
 8012344:	2301      	moveq	r3, #1
 8012346:	2300      	movne	r3, #0
 8012348:	b2db      	uxtb	r3, r3
 801234a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801234c:	4b0f      	ldr	r3, [pc, #60]	; (801238c <prvProcessTimerOrBlockTask+0x94>)
 801234e:	6818      	ldr	r0, [r3, #0]
 8012350:	687a      	ldr	r2, [r7, #4]
 8012352:	68fb      	ldr	r3, [r7, #12]
 8012354:	1ad3      	subs	r3, r2, r3
 8012356:	683a      	ldr	r2, [r7, #0]
 8012358:	4619      	mov	r1, r3
 801235a:	f7fe fb71 	bl	8010a40 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801235e:	f7fe fe1d 	bl	8010f9c <xTaskResumeAll>
 8012362:	4603      	mov	r3, r0
 8012364:	2b00      	cmp	r3, #0
 8012366:	d10a      	bne.n	801237e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8012368:	4b09      	ldr	r3, [pc, #36]	; (8012390 <prvProcessTimerOrBlockTask+0x98>)
 801236a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801236e:	601a      	str	r2, [r3, #0]
 8012370:	f3bf 8f4f 	dsb	sy
 8012374:	f3bf 8f6f 	isb	sy
}
 8012378:	e001      	b.n	801237e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801237a:	f7fe fe0f 	bl	8010f9c <xTaskResumeAll>
}
 801237e:	bf00      	nop
 8012380:	3710      	adds	r7, #16
 8012382:	46bd      	mov	sp, r7
 8012384:	bd80      	pop	{r7, pc}
 8012386:	bf00      	nop
 8012388:	20027334 	.word	0x20027334
 801238c:	20027338 	.word	0x20027338
 8012390:	e000ed04 	.word	0xe000ed04

08012394 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8012394:	b480      	push	{r7}
 8012396:	b085      	sub	sp, #20
 8012398:	af00      	add	r7, sp, #0
 801239a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801239c:	4b0e      	ldr	r3, [pc, #56]	; (80123d8 <prvGetNextExpireTime+0x44>)
 801239e:	681b      	ldr	r3, [r3, #0]
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	bf0c      	ite	eq
 80123a6:	2301      	moveq	r3, #1
 80123a8:	2300      	movne	r3, #0
 80123aa:	b2db      	uxtb	r3, r3
 80123ac:	461a      	mov	r2, r3
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	681b      	ldr	r3, [r3, #0]
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d105      	bne.n	80123c6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80123ba:	4b07      	ldr	r3, [pc, #28]	; (80123d8 <prvGetNextExpireTime+0x44>)
 80123bc:	681b      	ldr	r3, [r3, #0]
 80123be:	68db      	ldr	r3, [r3, #12]
 80123c0:	681b      	ldr	r3, [r3, #0]
 80123c2:	60fb      	str	r3, [r7, #12]
 80123c4:	e001      	b.n	80123ca <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80123c6:	2300      	movs	r3, #0
 80123c8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80123ca:	68fb      	ldr	r3, [r7, #12]
}
 80123cc:	4618      	mov	r0, r3
 80123ce:	3714      	adds	r7, #20
 80123d0:	46bd      	mov	sp, r7
 80123d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123d6:	4770      	bx	lr
 80123d8:	20027330 	.word	0x20027330

080123dc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80123dc:	b580      	push	{r7, lr}
 80123de:	b084      	sub	sp, #16
 80123e0:	af00      	add	r7, sp, #0
 80123e2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80123e4:	f7fe fe76 	bl	80110d4 <xTaskGetTickCount>
 80123e8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80123ea:	4b0b      	ldr	r3, [pc, #44]	; (8012418 <prvSampleTimeNow+0x3c>)
 80123ec:	681b      	ldr	r3, [r3, #0]
 80123ee:	68fa      	ldr	r2, [r7, #12]
 80123f0:	429a      	cmp	r2, r3
 80123f2:	d205      	bcs.n	8012400 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80123f4:	f000 f904 	bl	8012600 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	2201      	movs	r2, #1
 80123fc:	601a      	str	r2, [r3, #0]
 80123fe:	e002      	b.n	8012406 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	2200      	movs	r2, #0
 8012404:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8012406:	4a04      	ldr	r2, [pc, #16]	; (8012418 <prvSampleTimeNow+0x3c>)
 8012408:	68fb      	ldr	r3, [r7, #12]
 801240a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801240c:	68fb      	ldr	r3, [r7, #12]
}
 801240e:	4618      	mov	r0, r3
 8012410:	3710      	adds	r7, #16
 8012412:	46bd      	mov	sp, r7
 8012414:	bd80      	pop	{r7, pc}
 8012416:	bf00      	nop
 8012418:	20027340 	.word	0x20027340

0801241c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801241c:	b580      	push	{r7, lr}
 801241e:	b086      	sub	sp, #24
 8012420:	af00      	add	r7, sp, #0
 8012422:	60f8      	str	r0, [r7, #12]
 8012424:	60b9      	str	r1, [r7, #8]
 8012426:	607a      	str	r2, [r7, #4]
 8012428:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801242a:	2300      	movs	r3, #0
 801242c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801242e:	68fb      	ldr	r3, [r7, #12]
 8012430:	68ba      	ldr	r2, [r7, #8]
 8012432:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012434:	68fb      	ldr	r3, [r7, #12]
 8012436:	68fa      	ldr	r2, [r7, #12]
 8012438:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801243a:	68ba      	ldr	r2, [r7, #8]
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	429a      	cmp	r2, r3
 8012440:	d812      	bhi.n	8012468 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012442:	687a      	ldr	r2, [r7, #4]
 8012444:	683b      	ldr	r3, [r7, #0]
 8012446:	1ad2      	subs	r2, r2, r3
 8012448:	68fb      	ldr	r3, [r7, #12]
 801244a:	699b      	ldr	r3, [r3, #24]
 801244c:	429a      	cmp	r2, r3
 801244e:	d302      	bcc.n	8012456 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8012450:	2301      	movs	r3, #1
 8012452:	617b      	str	r3, [r7, #20]
 8012454:	e01b      	b.n	801248e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8012456:	4b10      	ldr	r3, [pc, #64]	; (8012498 <prvInsertTimerInActiveList+0x7c>)
 8012458:	681a      	ldr	r2, [r3, #0]
 801245a:	68fb      	ldr	r3, [r7, #12]
 801245c:	3304      	adds	r3, #4
 801245e:	4619      	mov	r1, r3
 8012460:	4610      	mov	r0, r2
 8012462:	f7fd f802 	bl	800f46a <vListInsert>
 8012466:	e012      	b.n	801248e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8012468:	687a      	ldr	r2, [r7, #4]
 801246a:	683b      	ldr	r3, [r7, #0]
 801246c:	429a      	cmp	r2, r3
 801246e:	d206      	bcs.n	801247e <prvInsertTimerInActiveList+0x62>
 8012470:	68ba      	ldr	r2, [r7, #8]
 8012472:	683b      	ldr	r3, [r7, #0]
 8012474:	429a      	cmp	r2, r3
 8012476:	d302      	bcc.n	801247e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8012478:	2301      	movs	r3, #1
 801247a:	617b      	str	r3, [r7, #20]
 801247c:	e007      	b.n	801248e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801247e:	4b07      	ldr	r3, [pc, #28]	; (801249c <prvInsertTimerInActiveList+0x80>)
 8012480:	681a      	ldr	r2, [r3, #0]
 8012482:	68fb      	ldr	r3, [r7, #12]
 8012484:	3304      	adds	r3, #4
 8012486:	4619      	mov	r1, r3
 8012488:	4610      	mov	r0, r2
 801248a:	f7fc ffee 	bl	800f46a <vListInsert>
		}
	}

	return xProcessTimerNow;
 801248e:	697b      	ldr	r3, [r7, #20]
}
 8012490:	4618      	mov	r0, r3
 8012492:	3718      	adds	r7, #24
 8012494:	46bd      	mov	sp, r7
 8012496:	bd80      	pop	{r7, pc}
 8012498:	20027334 	.word	0x20027334
 801249c:	20027330 	.word	0x20027330

080124a0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80124a0:	b580      	push	{r7, lr}
 80124a2:	b08e      	sub	sp, #56	; 0x38
 80124a4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80124a6:	e099      	b.n	80125dc <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	da17      	bge.n	80124de <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80124ae:	1d3b      	adds	r3, r7, #4
 80124b0:	3304      	adds	r3, #4
 80124b2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80124b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d109      	bne.n	80124ce <prvProcessReceivedCommands+0x2e>
 80124ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124be:	f383 8811 	msr	BASEPRI, r3
 80124c2:	f3bf 8f6f 	isb	sy
 80124c6:	f3bf 8f4f 	dsb	sy
 80124ca:	61fb      	str	r3, [r7, #28]
 80124cc:	e7fe      	b.n	80124cc <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80124ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124d0:	681b      	ldr	r3, [r3, #0]
 80124d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80124d4:	6850      	ldr	r0, [r2, #4]
 80124d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80124d8:	6892      	ldr	r2, [r2, #8]
 80124da:	4611      	mov	r1, r2
 80124dc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	db7a      	blt.n	80125da <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80124e4:	68fb      	ldr	r3, [r7, #12]
 80124e6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80124e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124ea:	695b      	ldr	r3, [r3, #20]
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d004      	beq.n	80124fa <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80124f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124f2:	3304      	adds	r3, #4
 80124f4:	4618      	mov	r0, r3
 80124f6:	f7fc fff1 	bl	800f4dc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80124fa:	463b      	mov	r3, r7
 80124fc:	4618      	mov	r0, r3
 80124fe:	f7ff ff6d 	bl	80123dc <prvSampleTimeNow>
 8012502:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	2b09      	cmp	r3, #9
 8012508:	d868      	bhi.n	80125dc <prvProcessReceivedCommands+0x13c>
 801250a:	a201      	add	r2, pc, #4	; (adr r2, 8012510 <prvProcessReceivedCommands+0x70>)
 801250c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012510:	08012539 	.word	0x08012539
 8012514:	08012539 	.word	0x08012539
 8012518:	08012539 	.word	0x08012539
 801251c:	080125dd 	.word	0x080125dd
 8012520:	08012593 	.word	0x08012593
 8012524:	080125c9 	.word	0x080125c9
 8012528:	08012539 	.word	0x08012539
 801252c:	08012539 	.word	0x08012539
 8012530:	080125dd 	.word	0x080125dd
 8012534:	08012593 	.word	0x08012593
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8012538:	68ba      	ldr	r2, [r7, #8]
 801253a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801253c:	699b      	ldr	r3, [r3, #24]
 801253e:	18d1      	adds	r1, r2, r3
 8012540:	68bb      	ldr	r3, [r7, #8]
 8012542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012544:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012546:	f7ff ff69 	bl	801241c <prvInsertTimerInActiveList>
 801254a:	4603      	mov	r3, r0
 801254c:	2b00      	cmp	r3, #0
 801254e:	d045      	beq.n	80125dc <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012554:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012556:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8012558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801255a:	69db      	ldr	r3, [r3, #28]
 801255c:	2b01      	cmp	r3, #1
 801255e:	d13d      	bne.n	80125dc <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8012560:	68ba      	ldr	r2, [r7, #8]
 8012562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012564:	699b      	ldr	r3, [r3, #24]
 8012566:	441a      	add	r2, r3
 8012568:	2300      	movs	r3, #0
 801256a:	9300      	str	r3, [sp, #0]
 801256c:	2300      	movs	r3, #0
 801256e:	2100      	movs	r1, #0
 8012570:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012572:	f7ff fe23 	bl	80121bc <xTimerGenericCommand>
 8012576:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8012578:	6a3b      	ldr	r3, [r7, #32]
 801257a:	2b00      	cmp	r3, #0
 801257c:	d12e      	bne.n	80125dc <prvProcessReceivedCommands+0x13c>
 801257e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012582:	f383 8811 	msr	BASEPRI, r3
 8012586:	f3bf 8f6f 	isb	sy
 801258a:	f3bf 8f4f 	dsb	sy
 801258e:	61bb      	str	r3, [r7, #24]
 8012590:	e7fe      	b.n	8012590 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8012592:	68ba      	ldr	r2, [r7, #8]
 8012594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012596:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8012598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801259a:	699b      	ldr	r3, [r3, #24]
 801259c:	2b00      	cmp	r3, #0
 801259e:	d109      	bne.n	80125b4 <prvProcessReceivedCommands+0x114>
 80125a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125a4:	f383 8811 	msr	BASEPRI, r3
 80125a8:	f3bf 8f6f 	isb	sy
 80125ac:	f3bf 8f4f 	dsb	sy
 80125b0:	617b      	str	r3, [r7, #20]
 80125b2:	e7fe      	b.n	80125b2 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80125b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125b6:	699a      	ldr	r2, [r3, #24]
 80125b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125ba:	18d1      	adds	r1, r2, r3
 80125bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80125c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80125c2:	f7ff ff2b 	bl	801241c <prvInsertTimerInActiveList>
					break;
 80125c6:	e009      	b.n	80125dc <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80125c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125ca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d104      	bne.n	80125dc <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 80125d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80125d4:	f7fc fde2 	bl	800f19c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80125d8:	e000      	b.n	80125dc <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80125da:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80125dc:	4b07      	ldr	r3, [pc, #28]	; (80125fc <prvProcessReceivedCommands+0x15c>)
 80125de:	681b      	ldr	r3, [r3, #0]
 80125e0:	1d39      	adds	r1, r7, #4
 80125e2:	2200      	movs	r2, #0
 80125e4:	4618      	mov	r0, r3
 80125e6:	f7fd fe2d 	bl	8010244 <xQueueReceive>
 80125ea:	4603      	mov	r3, r0
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	f47f af5b 	bne.w	80124a8 <prvProcessReceivedCommands+0x8>
	}
}
 80125f2:	bf00      	nop
 80125f4:	3730      	adds	r7, #48	; 0x30
 80125f6:	46bd      	mov	sp, r7
 80125f8:	bd80      	pop	{r7, pc}
 80125fa:	bf00      	nop
 80125fc:	20027338 	.word	0x20027338

08012600 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8012600:	b580      	push	{r7, lr}
 8012602:	b088      	sub	sp, #32
 8012604:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012606:	e044      	b.n	8012692 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012608:	4b2b      	ldr	r3, [pc, #172]	; (80126b8 <prvSwitchTimerLists+0xb8>)
 801260a:	681b      	ldr	r3, [r3, #0]
 801260c:	68db      	ldr	r3, [r3, #12]
 801260e:	681b      	ldr	r3, [r3, #0]
 8012610:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012612:	4b29      	ldr	r3, [pc, #164]	; (80126b8 <prvSwitchTimerLists+0xb8>)
 8012614:	681b      	ldr	r3, [r3, #0]
 8012616:	68db      	ldr	r3, [r3, #12]
 8012618:	68db      	ldr	r3, [r3, #12]
 801261a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801261c:	68fb      	ldr	r3, [r7, #12]
 801261e:	3304      	adds	r3, #4
 8012620:	4618      	mov	r0, r3
 8012622:	f7fc ff5b 	bl	800f4dc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012626:	68fb      	ldr	r3, [r7, #12]
 8012628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801262a:	68f8      	ldr	r0, [r7, #12]
 801262c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 801262e:	68fb      	ldr	r3, [r7, #12]
 8012630:	69db      	ldr	r3, [r3, #28]
 8012632:	2b01      	cmp	r3, #1
 8012634:	d12d      	bne.n	8012692 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8012636:	68fb      	ldr	r3, [r7, #12]
 8012638:	699b      	ldr	r3, [r3, #24]
 801263a:	693a      	ldr	r2, [r7, #16]
 801263c:	4413      	add	r3, r2
 801263e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8012640:	68ba      	ldr	r2, [r7, #8]
 8012642:	693b      	ldr	r3, [r7, #16]
 8012644:	429a      	cmp	r2, r3
 8012646:	d90e      	bls.n	8012666 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8012648:	68fb      	ldr	r3, [r7, #12]
 801264a:	68ba      	ldr	r2, [r7, #8]
 801264c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801264e:	68fb      	ldr	r3, [r7, #12]
 8012650:	68fa      	ldr	r2, [r7, #12]
 8012652:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012654:	4b18      	ldr	r3, [pc, #96]	; (80126b8 <prvSwitchTimerLists+0xb8>)
 8012656:	681a      	ldr	r2, [r3, #0]
 8012658:	68fb      	ldr	r3, [r7, #12]
 801265a:	3304      	adds	r3, #4
 801265c:	4619      	mov	r1, r3
 801265e:	4610      	mov	r0, r2
 8012660:	f7fc ff03 	bl	800f46a <vListInsert>
 8012664:	e015      	b.n	8012692 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012666:	2300      	movs	r3, #0
 8012668:	9300      	str	r3, [sp, #0]
 801266a:	2300      	movs	r3, #0
 801266c:	693a      	ldr	r2, [r7, #16]
 801266e:	2100      	movs	r1, #0
 8012670:	68f8      	ldr	r0, [r7, #12]
 8012672:	f7ff fda3 	bl	80121bc <xTimerGenericCommand>
 8012676:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	2b00      	cmp	r3, #0
 801267c:	d109      	bne.n	8012692 <prvSwitchTimerLists+0x92>
 801267e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012682:	f383 8811 	msr	BASEPRI, r3
 8012686:	f3bf 8f6f 	isb	sy
 801268a:	f3bf 8f4f 	dsb	sy
 801268e:	603b      	str	r3, [r7, #0]
 8012690:	e7fe      	b.n	8012690 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012692:	4b09      	ldr	r3, [pc, #36]	; (80126b8 <prvSwitchTimerLists+0xb8>)
 8012694:	681b      	ldr	r3, [r3, #0]
 8012696:	681b      	ldr	r3, [r3, #0]
 8012698:	2b00      	cmp	r3, #0
 801269a:	d1b5      	bne.n	8012608 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801269c:	4b06      	ldr	r3, [pc, #24]	; (80126b8 <prvSwitchTimerLists+0xb8>)
 801269e:	681b      	ldr	r3, [r3, #0]
 80126a0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80126a2:	4b06      	ldr	r3, [pc, #24]	; (80126bc <prvSwitchTimerLists+0xbc>)
 80126a4:	681b      	ldr	r3, [r3, #0]
 80126a6:	4a04      	ldr	r2, [pc, #16]	; (80126b8 <prvSwitchTimerLists+0xb8>)
 80126a8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80126aa:	4a04      	ldr	r2, [pc, #16]	; (80126bc <prvSwitchTimerLists+0xbc>)
 80126ac:	697b      	ldr	r3, [r7, #20]
 80126ae:	6013      	str	r3, [r2, #0]
}
 80126b0:	bf00      	nop
 80126b2:	3718      	adds	r7, #24
 80126b4:	46bd      	mov	sp, r7
 80126b6:	bd80      	pop	{r7, pc}
 80126b8:	20027330 	.word	0x20027330
 80126bc:	20027334 	.word	0x20027334

080126c0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80126c0:	b580      	push	{r7, lr}
 80126c2:	b082      	sub	sp, #8
 80126c4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80126c6:	f7fd f859 	bl	800f77c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80126ca:	4b15      	ldr	r3, [pc, #84]	; (8012720 <prvCheckForValidListAndQueue+0x60>)
 80126cc:	681b      	ldr	r3, [r3, #0]
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d120      	bne.n	8012714 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80126d2:	4814      	ldr	r0, [pc, #80]	; (8012724 <prvCheckForValidListAndQueue+0x64>)
 80126d4:	f7fc fe78 	bl	800f3c8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80126d8:	4813      	ldr	r0, [pc, #76]	; (8012728 <prvCheckForValidListAndQueue+0x68>)
 80126da:	f7fc fe75 	bl	800f3c8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80126de:	4b13      	ldr	r3, [pc, #76]	; (801272c <prvCheckForValidListAndQueue+0x6c>)
 80126e0:	4a10      	ldr	r2, [pc, #64]	; (8012724 <prvCheckForValidListAndQueue+0x64>)
 80126e2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80126e4:	4b12      	ldr	r3, [pc, #72]	; (8012730 <prvCheckForValidListAndQueue+0x70>)
 80126e6:	4a10      	ldr	r2, [pc, #64]	; (8012728 <prvCheckForValidListAndQueue+0x68>)
 80126e8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80126ea:	2300      	movs	r3, #0
 80126ec:	9300      	str	r3, [sp, #0]
 80126ee:	4b11      	ldr	r3, [pc, #68]	; (8012734 <prvCheckForValidListAndQueue+0x74>)
 80126f0:	4a11      	ldr	r2, [pc, #68]	; (8012738 <prvCheckForValidListAndQueue+0x78>)
 80126f2:	2110      	movs	r1, #16
 80126f4:	200a      	movs	r0, #10
 80126f6:	f7fd f99f 	bl	800fa38 <xQueueGenericCreateStatic>
 80126fa:	4602      	mov	r2, r0
 80126fc:	4b08      	ldr	r3, [pc, #32]	; (8012720 <prvCheckForValidListAndQueue+0x60>)
 80126fe:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8012700:	4b07      	ldr	r3, [pc, #28]	; (8012720 <prvCheckForValidListAndQueue+0x60>)
 8012702:	681b      	ldr	r3, [r3, #0]
 8012704:	2b00      	cmp	r3, #0
 8012706:	d005      	beq.n	8012714 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8012708:	4b05      	ldr	r3, [pc, #20]	; (8012720 <prvCheckForValidListAndQueue+0x60>)
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	490b      	ldr	r1, [pc, #44]	; (801273c <prvCheckForValidListAndQueue+0x7c>)
 801270e:	4618      	mov	r0, r3
 8012710:	f7fe f944 	bl	801099c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012714:	f7fd f860 	bl	800f7d8 <vPortExitCritical>
}
 8012718:	bf00      	nop
 801271a:	46bd      	mov	sp, r7
 801271c:	bd80      	pop	{r7, pc}
 801271e:	bf00      	nop
 8012720:	20027338 	.word	0x20027338
 8012724:	20027308 	.word	0x20027308
 8012728:	2002731c 	.word	0x2002731c
 801272c:	20027330 	.word	0x20027330
 8012730:	20027334 	.word	0x20027334
 8012734:	200273e4 	.word	0x200273e4
 8012738:	20027344 	.word	0x20027344
 801273c:	08017308 	.word	0x08017308

08012740 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 8012740:	b580      	push	{r7, lr}
 8012742:	b086      	sub	sp, #24
 8012744:	af00      	add	r7, sp, #0
 8012746:	6078      	str	r0, [r7, #4]
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	617b      	str	r3, [r7, #20]

	configASSERT( xTimer );
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	2b00      	cmp	r3, #0
 8012750:	d109      	bne.n	8012766 <xTimerIsTimerActive+0x26>
 8012752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012756:	f383 8811 	msr	BASEPRI, r3
 801275a:	f3bf 8f6f 	isb	sy
 801275e:	f3bf 8f4f 	dsb	sy
 8012762:	60fb      	str	r3, [r7, #12]
 8012764:	e7fe      	b.n	8012764 <xTimerIsTimerActive+0x24>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 8012766:	f7fd f809 	bl	800f77c <vPortEnterCritical>
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) ); /*lint !e961. Cast is only redundant when NULL is passed into the macro. */
 801276a:	697b      	ldr	r3, [r7, #20]
 801276c:	695b      	ldr	r3, [r3, #20]
 801276e:	2b00      	cmp	r3, #0
 8012770:	bf14      	ite	ne
 8012772:	2301      	movne	r3, #1
 8012774:	2300      	moveq	r3, #0
 8012776:	b2db      	uxtb	r3, r3
 8012778:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 801277a:	f7fd f82d 	bl	800f7d8 <vPortExitCritical>

	return xTimerIsInActiveList;
 801277e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 8012780:	4618      	mov	r0, r3
 8012782:	3718      	adds	r7, #24
 8012784:	46bd      	mov	sp, r7
 8012786:	bd80      	pop	{r7, pc}

08012788 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8012788:	b580      	push	{r7, lr}
 801278a:	b086      	sub	sp, #24
 801278c:	af00      	add	r7, sp, #0
 801278e:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	2b00      	cmp	r3, #0
 8012798:	d109      	bne.n	80127ae <pvTimerGetTimerID+0x26>
 801279a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801279e:	f383 8811 	msr	BASEPRI, r3
 80127a2:	f3bf 8f6f 	isb	sy
 80127a6:	f3bf 8f4f 	dsb	sy
 80127aa:	60fb      	str	r3, [r7, #12]
 80127ac:	e7fe      	b.n	80127ac <pvTimerGetTimerID+0x24>

	taskENTER_CRITICAL();
 80127ae:	f7fc ffe5 	bl	800f77c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 80127b2:	697b      	ldr	r3, [r7, #20]
 80127b4:	6a1b      	ldr	r3, [r3, #32]
 80127b6:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80127b8:	f7fd f80e 	bl	800f7d8 <vPortExitCritical>

	return pvReturn;
 80127bc:	693b      	ldr	r3, [r7, #16]
}
 80127be:	4618      	mov	r0, r3
 80127c0:	3718      	adds	r7, #24
 80127c2:	46bd      	mov	sp, r7
 80127c4:	bd80      	pop	{r7, pc}

080127c6 <otChildSupervisionSetInterval>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (uint16_t)p_ot_req->Data[0];
}

void otChildSupervisionSetInterval(otInstance *aInstance, uint16_t aInterval)
{
 80127c6:	b580      	push	{r7, lr}
 80127c8:	b084      	sub	sp, #16
 80127ca:	af00      	add	r7, sp, #0
 80127cc:	6078      	str	r0, [r7, #4]
 80127ce:	460b      	mov	r3, r1
 80127d0:	807b      	strh	r3, [r7, #2]
    Pre_OtCmdProcessing();
 80127d2:	f002 fce7 	bl	80151a4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80127d6:	f002 fc83 	bl	80150e0 <THREAD_Get_OTCmdPayloadBuffer>
 80127da:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_CHILD_SUPERVISION_SET_INTERVAL;
 80127dc:	68fb      	ldr	r3, [r7, #12]
 80127de:	2200      	movs	r2, #0
 80127e0:	f042 0232 	orr.w	r2, r2, #50	; 0x32
 80127e4:	701a      	strb	r2, [r3, #0]
 80127e6:	2200      	movs	r2, #0
 80127e8:	f042 0201 	orr.w	r2, r2, #1
 80127ec:	705a      	strb	r2, [r3, #1]
 80127ee:	2200      	movs	r2, #0
 80127f0:	709a      	strb	r2, [r3, #2]
 80127f2:	2200      	movs	r2, #0
 80127f4:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 80127f6:	68fb      	ldr	r3, [r7, #12]
 80127f8:	2200      	movs	r2, #0
 80127fa:	f042 0201 	orr.w	r2, r2, #1
 80127fe:	711a      	strb	r2, [r3, #4]
 8012800:	2200      	movs	r2, #0
 8012802:	715a      	strb	r2, [r3, #5]
 8012804:	2200      	movs	r2, #0
 8012806:	719a      	strb	r2, [r3, #6]
 8012808:	2200      	movs	r2, #0
 801280a:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aInterval;
 801280c:	887a      	ldrh	r2, [r7, #2]
 801280e:	68fb      	ldr	r3, [r7, #12]
 8012810:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8012812:	f002 fc89 	bl	8015128 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012816:	f002 fc6f 	bl	80150f8 <THREAD_Get_OTCmdRspPayloadBuffer>
 801281a:	60f8      	str	r0, [r7, #12]
}
 801281c:	bf00      	nop
 801281e:	3710      	adds	r7, #16
 8012820:	46bd      	mov	sp, r7
 8012822:	bd80      	pop	{r7, pc}

08012824 <otChildSupervisionSetCheckTimeout>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (uint16_t)p_ot_req->Data[0];
}

void otChildSupervisionSetCheckTimeout(otInstance *aInstance, uint16_t aTimeout)
{
 8012824:	b580      	push	{r7, lr}
 8012826:	b084      	sub	sp, #16
 8012828:	af00      	add	r7, sp, #0
 801282a:	6078      	str	r0, [r7, #4]
 801282c:	460b      	mov	r3, r1
 801282e:	807b      	strh	r3, [r7, #2]
    Pre_OtCmdProcessing();
 8012830:	f002 fcb8 	bl	80151a4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012834:	f002 fc54 	bl	80150e0 <THREAD_Get_OTCmdPayloadBuffer>
 8012838:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_CHILD_SUPERVISION_SET_CHECK_TIMEOUT;
 801283a:	68fb      	ldr	r3, [r7, #12]
 801283c:	2200      	movs	r2, #0
 801283e:	f042 0234 	orr.w	r2, r2, #52	; 0x34
 8012842:	701a      	strb	r2, [r3, #0]
 8012844:	2200      	movs	r2, #0
 8012846:	f042 0201 	orr.w	r2, r2, #1
 801284a:	705a      	strb	r2, [r3, #1]
 801284c:	2200      	movs	r2, #0
 801284e:	709a      	strb	r2, [r3, #2]
 8012850:	2200      	movs	r2, #0
 8012852:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8012854:	68fb      	ldr	r3, [r7, #12]
 8012856:	2200      	movs	r2, #0
 8012858:	f042 0201 	orr.w	r2, r2, #1
 801285c:	711a      	strb	r2, [r3, #4]
 801285e:	2200      	movs	r2, #0
 8012860:	715a      	strb	r2, [r3, #5]
 8012862:	2200      	movs	r2, #0
 8012864:	719a      	strb	r2, [r3, #6]
 8012866:	2200      	movs	r2, #0
 8012868:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aTimeout;
 801286a:	887a      	ldrh	r2, [r7, #2]
 801286c:	68fb      	ldr	r3, [r7, #12]
 801286e:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8012870:	f002 fc5a 	bl	8015128 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012874:	f002 fc40 	bl	80150f8 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012878:	60f8      	str	r0, [r7, #12]
}
 801287a:	bf00      	nop
 801287c:	3710      	adds	r7, #16
 801287e:	46bd      	mov	sp, r7
 8012880:	bd80      	pop	{r7, pc}

08012882 <otCoapHeaderInit>:


#if OPENTHREAD_ENABLE_APPLICATION_COAP

void otCoapHeaderInit(otCoapHeader *aHeader, otCoapType aType, otCoapCode aCode)
{
 8012882:	b580      	push	{r7, lr}
 8012884:	b084      	sub	sp, #16
 8012886:	af00      	add	r7, sp, #0
 8012888:	6078      	str	r0, [r7, #4]
 801288a:	460b      	mov	r3, r1
 801288c:	70fb      	strb	r3, [r7, #3]
 801288e:	4613      	mov	r3, r2
 8012890:	70bb      	strb	r3, [r7, #2]
    Pre_OtCmdProcessing();
 8012892:	f002 fc87 	bl	80151a4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012896:	f002 fc23 	bl	80150e0 <THREAD_Get_OTCmdPayloadBuffer>
 801289a:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_INIT;
 801289c:	68fb      	ldr	r3, [r7, #12]
 801289e:	2200      	movs	r2, #0
 80128a0:	f062 0260 	orn	r2, r2, #96	; 0x60
 80128a4:	701a      	strb	r2, [r3, #0]
 80128a6:	2200      	movs	r2, #0
 80128a8:	705a      	strb	r2, [r3, #1]
 80128aa:	2200      	movs	r2, #0
 80128ac:	709a      	strb	r2, [r3, #2]
 80128ae:	2200      	movs	r2, #0
 80128b0:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 80128b2:	68fb      	ldr	r3, [r7, #12]
 80128b4:	2200      	movs	r2, #0
 80128b6:	f042 0203 	orr.w	r2, r2, #3
 80128ba:	711a      	strb	r2, [r3, #4]
 80128bc:	2200      	movs	r2, #0
 80128be:	715a      	strb	r2, [r3, #5]
 80128c0:	2200      	movs	r2, #0
 80128c2:	719a      	strb	r2, [r3, #6]
 80128c4:	2200      	movs	r2, #0
 80128c6:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 80128c8:	687a      	ldr	r2, [r7, #4]
 80128ca:	68fb      	ldr	r3, [r7, #12]
 80128cc:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = aType;
 80128ce:	78fa      	ldrb	r2, [r7, #3]
 80128d0:	68fb      	ldr	r3, [r7, #12]
 80128d2:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (otCoapCode) aCode;
 80128d4:	78ba      	ldrb	r2, [r7, #2]
 80128d6:	68fb      	ldr	r3, [r7, #12]
 80128d8:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 80128da:	f002 fc25 	bl	8015128 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80128de:	f002 fc0b 	bl	80150f8 <THREAD_Get_OTCmdRspPayloadBuffer>
 80128e2:	60f8      	str	r0, [r7, #12]
}
 80128e4:	bf00      	nop
 80128e6:	3710      	adds	r7, #16
 80128e8:	46bd      	mov	sp, r7
 80128ea:	bd80      	pop	{r7, pc}

080128ec <otCoapHeaderSetToken>:

void otCoapHeaderSetToken(otCoapHeader *aHeader, const uint8_t *aToken, uint8_t aTokenLength)
{
 80128ec:	b580      	push	{r7, lr}
 80128ee:	b086      	sub	sp, #24
 80128f0:	af00      	add	r7, sp, #0
 80128f2:	60f8      	str	r0, [r7, #12]
 80128f4:	60b9      	str	r1, [r7, #8]
 80128f6:	4613      	mov	r3, r2
 80128f8:	71fb      	strb	r3, [r7, #7]
    Pre_OtCmdProcessing();
 80128fa:	f002 fc53 	bl	80151a4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80128fe:	f002 fbef 	bl	80150e0 <THREAD_Get_OTCmdPayloadBuffer>
 8012902:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_TOKEN;
 8012904:	697b      	ldr	r3, [r7, #20]
 8012906:	2200      	movs	r2, #0
 8012908:	f062 025f 	orn	r2, r2, #95	; 0x5f
 801290c:	701a      	strb	r2, [r3, #0]
 801290e:	2200      	movs	r2, #0
 8012910:	705a      	strb	r2, [r3, #1]
 8012912:	2200      	movs	r2, #0
 8012914:	709a      	strb	r2, [r3, #2]
 8012916:	2200      	movs	r2, #0
 8012918:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 801291a:	697b      	ldr	r3, [r7, #20]
 801291c:	2200      	movs	r2, #0
 801291e:	f042 0203 	orr.w	r2, r2, #3
 8012922:	711a      	strb	r2, [r3, #4]
 8012924:	2200      	movs	r2, #0
 8012926:	715a      	strb	r2, [r3, #5]
 8012928:	2200      	movs	r2, #0
 801292a:	719a      	strb	r2, [r3, #6]
 801292c:	2200      	movs	r2, #0
 801292e:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8012930:	68fa      	ldr	r2, [r7, #12]
 8012932:	697b      	ldr	r3, [r7, #20]
 8012934:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aToken;
 8012936:	68ba      	ldr	r2, [r7, #8]
 8012938:	697b      	ldr	r3, [r7, #20]
 801293a:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (otCoapCode) aTokenLength;
 801293c:	79fa      	ldrb	r2, [r7, #7]
 801293e:	697b      	ldr	r3, [r7, #20]
 8012940:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 8012942:	f002 fbf1 	bl	8015128 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012946:	f002 fbd7 	bl	80150f8 <THREAD_Get_OTCmdRspPayloadBuffer>
 801294a:	6178      	str	r0, [r7, #20]
}
 801294c:	bf00      	nop
 801294e:	3718      	adds	r7, #24
 8012950:	46bd      	mov	sp, r7
 8012952:	bd80      	pop	{r7, pc}

08012954 <otCoapHeaderGenerateToken>:

void otCoapHeaderGenerateToken(otCoapHeader *aHeader, uint8_t aTokenLength)
{
 8012954:	b580      	push	{r7, lr}
 8012956:	b084      	sub	sp, #16
 8012958:	af00      	add	r7, sp, #0
 801295a:	6078      	str	r0, [r7, #4]
 801295c:	460b      	mov	r3, r1
 801295e:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 8012960:	f002 fc20 	bl	80151a4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012964:	f002 fbbc 	bl	80150e0 <THREAD_Get_OTCmdPayloadBuffer>
 8012968:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GENERATE_TOKEN;
 801296a:	68fb      	ldr	r3, [r7, #12]
 801296c:	2200      	movs	r2, #0
 801296e:	f062 025e 	orn	r2, r2, #94	; 0x5e
 8012972:	701a      	strb	r2, [r3, #0]
 8012974:	2200      	movs	r2, #0
 8012976:	705a      	strb	r2, [r3, #1]
 8012978:	2200      	movs	r2, #0
 801297a:	709a      	strb	r2, [r3, #2]
 801297c:	2200      	movs	r2, #0
 801297e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 8012980:	68fb      	ldr	r3, [r7, #12]
 8012982:	2200      	movs	r2, #0
 8012984:	f042 0202 	orr.w	r2, r2, #2
 8012988:	711a      	strb	r2, [r3, #4]
 801298a:	2200      	movs	r2, #0
 801298c:	715a      	strb	r2, [r3, #5]
 801298e:	2200      	movs	r2, #0
 8012990:	719a      	strb	r2, [r3, #6]
 8012992:	2200      	movs	r2, #0
 8012994:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8012996:	687a      	ldr	r2, [r7, #4]
 8012998:	68fb      	ldr	r3, [r7, #12]
 801299a:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aTokenLength;
 801299c:	78fa      	ldrb	r2, [r7, #3]
 801299e:	68fb      	ldr	r3, [r7, #12]
 80129a0:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 80129a2:	f002 fbc1 	bl	8015128 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80129a6:	f002 fba7 	bl	80150f8 <THREAD_Get_OTCmdRspPayloadBuffer>
 80129aa:	60f8      	str	r0, [r7, #12]
}
 80129ac:	bf00      	nop
 80129ae:	3710      	adds	r7, #16
 80129b0:	46bd      	mov	sp, r7
 80129b2:	bd80      	pop	{r7, pc}

080129b4 <otCoapHeaderAppendContentFormatOption>:

otError otCoapHeaderAppendContentFormatOption(otCoapHeader *aHeader, otCoapOptionContentFormat aContentFormat)
{
 80129b4:	b580      	push	{r7, lr}
 80129b6:	b084      	sub	sp, #16
 80129b8:	af00      	add	r7, sp, #0
 80129ba:	6078      	str	r0, [r7, #4]
 80129bc:	460b      	mov	r3, r1
 80129be:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 80129c0:	f002 fbf0 	bl	80151a4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80129c4:	f002 fb8c 	bl	80150e0 <THREAD_Get_OTCmdPayloadBuffer>
 80129c8:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_APPEND_CONTENT_FORMAT_OPTION;
 80129ca:	68fb      	ldr	r3, [r7, #12]
 80129cc:	2200      	movs	r2, #0
 80129ce:	f062 025d 	orn	r2, r2, #93	; 0x5d
 80129d2:	701a      	strb	r2, [r3, #0]
 80129d4:	2200      	movs	r2, #0
 80129d6:	705a      	strb	r2, [r3, #1]
 80129d8:	2200      	movs	r2, #0
 80129da:	709a      	strb	r2, [r3, #2]
 80129dc:	2200      	movs	r2, #0
 80129de:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 80129e0:	68fb      	ldr	r3, [r7, #12]
 80129e2:	2200      	movs	r2, #0
 80129e4:	f042 0202 	orr.w	r2, r2, #2
 80129e8:	711a      	strb	r2, [r3, #4]
 80129ea:	2200      	movs	r2, #0
 80129ec:	715a      	strb	r2, [r3, #5]
 80129ee:	2200      	movs	r2, #0
 80129f0:	719a      	strb	r2, [r3, #6]
 80129f2:	2200      	movs	r2, #0
 80129f4:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 80129f6:	687a      	ldr	r2, [r7, #4]
 80129f8:	68fb      	ldr	r3, [r7, #12]
 80129fa:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aContentFormat;
 80129fc:	78fa      	ldrb	r2, [r7, #3]
 80129fe:	68fb      	ldr	r3, [r7, #12]
 8012a00:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 8012a02:	f002 fb91 	bl	8015128 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012a06:	f002 fb77 	bl	80150f8 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012a0a:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 8012a0c:	68fb      	ldr	r3, [r7, #12]
 8012a0e:	689b      	ldr	r3, [r3, #8]
 8012a10:	b2db      	uxtb	r3, r3
}
 8012a12:	4618      	mov	r0, r3
 8012a14:	3710      	adds	r7, #16
 8012a16:	46bd      	mov	sp, r7
 8012a18:	bd80      	pop	{r7, pc}

08012a1a <otCoapHeaderAppendUriPathOptions>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError) p_ot_req->Data[0];
}

otError otCoapHeaderAppendUriPathOptions(otCoapHeader *aHeader, const char *aUriPath)
{
 8012a1a:	b580      	push	{r7, lr}
 8012a1c:	b084      	sub	sp, #16
 8012a1e:	af00      	add	r7, sp, #0
 8012a20:	6078      	str	r0, [r7, #4]
 8012a22:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 8012a24:	f002 fbbe 	bl	80151a4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012a28:	f002 fb5a 	bl	80150e0 <THREAD_Get_OTCmdPayloadBuffer>
 8012a2c:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_APPEND_URI_PATH_OPTIONS;
 8012a2e:	68fb      	ldr	r3, [r7, #12]
 8012a30:	2200      	movs	r2, #0
 8012a32:	f062 0250 	orn	r2, r2, #80	; 0x50
 8012a36:	701a      	strb	r2, [r3, #0]
 8012a38:	2200      	movs	r2, #0
 8012a3a:	705a      	strb	r2, [r3, #1]
 8012a3c:	2200      	movs	r2, #0
 8012a3e:	709a      	strb	r2, [r3, #2]
 8012a40:	2200      	movs	r2, #0
 8012a42:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 8012a44:	68fb      	ldr	r3, [r7, #12]
 8012a46:	2200      	movs	r2, #0
 8012a48:	f042 0202 	orr.w	r2, r2, #2
 8012a4c:	711a      	strb	r2, [r3, #4]
 8012a4e:	2200      	movs	r2, #0
 8012a50:	715a      	strb	r2, [r3, #5]
 8012a52:	2200      	movs	r2, #0
 8012a54:	719a      	strb	r2, [r3, #6]
 8012a56:	2200      	movs	r2, #0
 8012a58:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8012a5a:	687a      	ldr	r2, [r7, #4]
 8012a5c:	68fb      	ldr	r3, [r7, #12]
 8012a5e:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aUriPath;
 8012a60:	683a      	ldr	r2, [r7, #0]
 8012a62:	68fb      	ldr	r3, [r7, #12]
 8012a64:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 8012a66:	f002 fb5f 	bl	8015128 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012a6a:	f002 fb45 	bl	80150f8 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012a6e:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 8012a70:	68fb      	ldr	r3, [r7, #12]
 8012a72:	689b      	ldr	r3, [r3, #8]
 8012a74:	b2db      	uxtb	r3, r3
}
 8012a76:	4618      	mov	r0, r3
 8012a78:	3710      	adds	r7, #16
 8012a7a:	46bd      	mov	sp, r7
 8012a7c:	bd80      	pop	{r7, pc}

08012a7e <otCoapHeaderSetPayloadMarker>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError) p_ot_req->Data[0];
}

otError otCoapHeaderSetPayloadMarker(otCoapHeader *aHeader)
{
 8012a7e:	b580      	push	{r7, lr}
 8012a80:	b084      	sub	sp, #16
 8012a82:	af00      	add	r7, sp, #0
 8012a84:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8012a86:	f002 fb8d 	bl	80151a4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012a8a:	f002 fb29 	bl	80150e0 <THREAD_Get_OTCmdPayloadBuffer>
 8012a8e:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_PAYLOAD_MARKER;
 8012a90:	68fb      	ldr	r3, [r7, #12]
 8012a92:	2200      	movs	r2, #0
 8012a94:	f062 024d 	orn	r2, r2, #77	; 0x4d
 8012a98:	701a      	strb	r2, [r3, #0]
 8012a9a:	2200      	movs	r2, #0
 8012a9c:	705a      	strb	r2, [r3, #1]
 8012a9e:	2200      	movs	r2, #0
 8012aa0:	709a      	strb	r2, [r3, #2]
 8012aa2:	2200      	movs	r2, #0
 8012aa4:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8012aa6:	68fb      	ldr	r3, [r7, #12]
 8012aa8:	2200      	movs	r2, #0
 8012aaa:	f042 0201 	orr.w	r2, r2, #1
 8012aae:	711a      	strb	r2, [r3, #4]
 8012ab0:	2200      	movs	r2, #0
 8012ab2:	715a      	strb	r2, [r3, #5]
 8012ab4:	2200      	movs	r2, #0
 8012ab6:	719a      	strb	r2, [r3, #6]
 8012ab8:	2200      	movs	r2, #0
 8012aba:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8012abc:	687a      	ldr	r2, [r7, #4]
 8012abe:	68fb      	ldr	r3, [r7, #12]
 8012ac0:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8012ac2:	f002 fb31 	bl	8015128 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012ac6:	f002 fb17 	bl	80150f8 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012aca:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 8012acc:	68fb      	ldr	r3, [r7, #12]
 8012ace:	689b      	ldr	r3, [r3, #8]
 8012ad0:	b2db      	uxtb	r3, r3
}
 8012ad2:	4618      	mov	r0, r3
 8012ad4:	3710      	adds	r7, #16
 8012ad6:	46bd      	mov	sp, r7
 8012ad8:	bd80      	pop	{r7, pc}

08012ada <otCoapHeaderSetMessageId>:

void otCoapHeaderSetMessageId(otCoapHeader *aHeader, uint16_t aMessageId)
{
 8012ada:	b580      	push	{r7, lr}
 8012adc:	b084      	sub	sp, #16
 8012ade:	af00      	add	r7, sp, #0
 8012ae0:	6078      	str	r0, [r7, #4]
 8012ae2:	460b      	mov	r3, r1
 8012ae4:	807b      	strh	r3, [r7, #2]
    Pre_OtCmdProcessing();
 8012ae6:	f002 fb5d 	bl	80151a4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012aea:	f002 faf9 	bl	80150e0 <THREAD_Get_OTCmdPayloadBuffer>
 8012aee:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_MESSAGE_ID;
 8012af0:	68fb      	ldr	r3, [r7, #12]
 8012af2:	2200      	movs	r2, #0
 8012af4:	f062 0256 	orn	r2, r2, #86	; 0x56
 8012af8:	701a      	strb	r2, [r3, #0]
 8012afa:	2200      	movs	r2, #0
 8012afc:	705a      	strb	r2, [r3, #1]
 8012afe:	2200      	movs	r2, #0
 8012b00:	709a      	strb	r2, [r3, #2]
 8012b02:	2200      	movs	r2, #0
 8012b04:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 8012b06:	68fb      	ldr	r3, [r7, #12]
 8012b08:	2200      	movs	r2, #0
 8012b0a:	f042 0202 	orr.w	r2, r2, #2
 8012b0e:	711a      	strb	r2, [r3, #4]
 8012b10:	2200      	movs	r2, #0
 8012b12:	715a      	strb	r2, [r3, #5]
 8012b14:	2200      	movs	r2, #0
 8012b16:	719a      	strb	r2, [r3, #6]
 8012b18:	2200      	movs	r2, #0
 8012b1a:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8012b1c:	687a      	ldr	r2, [r7, #4]
 8012b1e:	68fb      	ldr	r3, [r7, #12]
 8012b20:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint16_t ) aMessageId;
 8012b22:	887a      	ldrh	r2, [r7, #2]
 8012b24:	68fb      	ldr	r3, [r7, #12]
 8012b26:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 8012b28:	f002 fafe 	bl	8015128 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012b2c:	f002 fae4 	bl	80150f8 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012b30:	60f8      	str	r0, [r7, #12]
}
 8012b32:	bf00      	nop
 8012b34:	3710      	adds	r7, #16
 8012b36:	46bd      	mov	sp, r7
 8012b38:	bd80      	pop	{r7, pc}

08012b3a <otCoapHeaderGetType>:

otCoapType otCoapHeaderGetType(const otCoapHeader *aHeader)
{
 8012b3a:	b580      	push	{r7, lr}
 8012b3c:	b084      	sub	sp, #16
 8012b3e:	af00      	add	r7, sp, #0
 8012b40:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8012b42:	f002 fb2f 	bl	80151a4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012b46:	f002 facb 	bl	80150e0 <THREAD_Get_OTCmdPayloadBuffer>
 8012b4a:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TYPE;
 8012b4c:	68fb      	ldr	r3, [r7, #12]
 8012b4e:	2200      	movs	r2, #0
 8012b50:	f062 0261 	orn	r2, r2, #97	; 0x61
 8012b54:	701a      	strb	r2, [r3, #0]
 8012b56:	2200      	movs	r2, #0
 8012b58:	705a      	strb	r2, [r3, #1]
 8012b5a:	2200      	movs	r2, #0
 8012b5c:	709a      	strb	r2, [r3, #2]
 8012b5e:	2200      	movs	r2, #0
 8012b60:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8012b62:	68fb      	ldr	r3, [r7, #12]
 8012b64:	2200      	movs	r2, #0
 8012b66:	f042 0201 	orr.w	r2, r2, #1
 8012b6a:	711a      	strb	r2, [r3, #4]
 8012b6c:	2200      	movs	r2, #0
 8012b6e:	715a      	strb	r2, [r3, #5]
 8012b70:	2200      	movs	r2, #0
 8012b72:	719a      	strb	r2, [r3, #6]
 8012b74:	2200      	movs	r2, #0
 8012b76:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8012b78:	687a      	ldr	r2, [r7, #4]
 8012b7a:	68fb      	ldr	r3, [r7, #12]
 8012b7c:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8012b7e:	f002 fad3 	bl	8015128 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012b82:	f002 fab9 	bl	80150f8 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012b86:	60f8      	str	r0, [r7, #12]
    return (otCoapType)p_ot_req->Data[0];
 8012b88:	68fb      	ldr	r3, [r7, #12]
 8012b8a:	689b      	ldr	r3, [r3, #8]
 8012b8c:	b2db      	uxtb	r3, r3
}
 8012b8e:	4618      	mov	r0, r3
 8012b90:	3710      	adds	r7, #16
 8012b92:	46bd      	mov	sp, r7
 8012b94:	bd80      	pop	{r7, pc}

08012b96 <otCoapHeaderGetCode>:

otCoapCode otCoapHeaderGetCode(const otCoapHeader *aHeader)
{
 8012b96:	b580      	push	{r7, lr}
 8012b98:	b084      	sub	sp, #16
 8012b9a:	af00      	add	r7, sp, #0
 8012b9c:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8012b9e:	f002 fb01 	bl	80151a4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012ba2:	f002 fa9d 	bl	80150e0 <THREAD_Get_OTCmdPayloadBuffer>
 8012ba6:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_CODE;
 8012ba8:	68fb      	ldr	r3, [r7, #12]
 8012baa:	2200      	movs	r2, #0
 8012bac:	f062 024c 	orn	r2, r2, #76	; 0x4c
 8012bb0:	701a      	strb	r2, [r3, #0]
 8012bb2:	2200      	movs	r2, #0
 8012bb4:	705a      	strb	r2, [r3, #1]
 8012bb6:	2200      	movs	r2, #0
 8012bb8:	709a      	strb	r2, [r3, #2]
 8012bba:	2200      	movs	r2, #0
 8012bbc:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8012bbe:	68fb      	ldr	r3, [r7, #12]
 8012bc0:	2200      	movs	r2, #0
 8012bc2:	f042 0201 	orr.w	r2, r2, #1
 8012bc6:	711a      	strb	r2, [r3, #4]
 8012bc8:	2200      	movs	r2, #0
 8012bca:	715a      	strb	r2, [r3, #5]
 8012bcc:	2200      	movs	r2, #0
 8012bce:	719a      	strb	r2, [r3, #6]
 8012bd0:	2200      	movs	r2, #0
 8012bd2:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8012bd4:	687a      	ldr	r2, [r7, #4]
 8012bd6:	68fb      	ldr	r3, [r7, #12]
 8012bd8:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8012bda:	f002 faa5 	bl	8015128 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012bde:	f002 fa8b 	bl	80150f8 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012be2:	60f8      	str	r0, [r7, #12]
    return (otCoapCode)p_ot_req->Data[0];
 8012be4:	68fb      	ldr	r3, [r7, #12]
 8012be6:	689b      	ldr	r3, [r3, #8]
 8012be8:	b2db      	uxtb	r3, r3
}
 8012bea:	4618      	mov	r0, r3
 8012bec:	3710      	adds	r7, #16
 8012bee:	46bd      	mov	sp, r7
 8012bf0:	bd80      	pop	{r7, pc}

08012bf2 <otCoapHeaderGetMessageId>:

uint16_t otCoapHeaderGetMessageId(const otCoapHeader *aHeader)
{
 8012bf2:	b580      	push	{r7, lr}
 8012bf4:	b084      	sub	sp, #16
 8012bf6:	af00      	add	r7, sp, #0
 8012bf8:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8012bfa:	f002 fad3 	bl	80151a4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012bfe:	f002 fa6f 	bl	80150e0 <THREAD_Get_OTCmdPayloadBuffer>
 8012c02:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_MESSAGE_ID;
 8012c04:	68fb      	ldr	r3, [r7, #12]
 8012c06:	2200      	movs	r2, #0
 8012c08:	f062 0255 	orn	r2, r2, #85	; 0x55
 8012c0c:	701a      	strb	r2, [r3, #0]
 8012c0e:	2200      	movs	r2, #0
 8012c10:	705a      	strb	r2, [r3, #1]
 8012c12:	2200      	movs	r2, #0
 8012c14:	709a      	strb	r2, [r3, #2]
 8012c16:	2200      	movs	r2, #0
 8012c18:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8012c1a:	68fb      	ldr	r3, [r7, #12]
 8012c1c:	2200      	movs	r2, #0
 8012c1e:	f042 0201 	orr.w	r2, r2, #1
 8012c22:	711a      	strb	r2, [r3, #4]
 8012c24:	2200      	movs	r2, #0
 8012c26:	715a      	strb	r2, [r3, #5]
 8012c28:	2200      	movs	r2, #0
 8012c2a:	719a      	strb	r2, [r3, #6]
 8012c2c:	2200      	movs	r2, #0
 8012c2e:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8012c30:	687a      	ldr	r2, [r7, #4]
 8012c32:	68fb      	ldr	r3, [r7, #12]
 8012c34:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8012c36:	f002 fa77 	bl	8015128 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012c3a:	f002 fa5d 	bl	80150f8 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012c3e:	60f8      	str	r0, [r7, #12]
    return (uint16_t)p_ot_req->Data[0];
 8012c40:	68fb      	ldr	r3, [r7, #12]
 8012c42:	689b      	ldr	r3, [r3, #8]
 8012c44:	b29b      	uxth	r3, r3
}
 8012c46:	4618      	mov	r0, r3
 8012c48:	3710      	adds	r7, #16
 8012c4a:	46bd      	mov	sp, r7
 8012c4c:	bd80      	pop	{r7, pc}

08012c4e <otCoapHeaderGetTokenLength>:

uint8_t otCoapHeaderGetTokenLength(const otCoapHeader *aHeader)
{
 8012c4e:	b580      	push	{r7, lr}
 8012c50:	b084      	sub	sp, #16
 8012c52:	af00      	add	r7, sp, #0
 8012c54:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8012c56:	f002 faa5 	bl	80151a4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012c5a:	f002 fa41 	bl	80150e0 <THREAD_Get_OTCmdPayloadBuffer>
 8012c5e:	60f8      	str	r0, [r7, #12]

   p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TOKEN_LENGTH;
 8012c60:	68fb      	ldr	r3, [r7, #12]
 8012c62:	2200      	movs	r2, #0
 8012c64:	f062 0254 	orn	r2, r2, #84	; 0x54
 8012c68:	701a      	strb	r2, [r3, #0]
 8012c6a:	2200      	movs	r2, #0
 8012c6c:	705a      	strb	r2, [r3, #1]
 8012c6e:	2200      	movs	r2, #0
 8012c70:	709a      	strb	r2, [r3, #2]
 8012c72:	2200      	movs	r2, #0
 8012c74:	70da      	strb	r2, [r3, #3]

   p_ot_req->Size=1;
 8012c76:	68fb      	ldr	r3, [r7, #12]
 8012c78:	2200      	movs	r2, #0
 8012c7a:	f042 0201 	orr.w	r2, r2, #1
 8012c7e:	711a      	strb	r2, [r3, #4]
 8012c80:	2200      	movs	r2, #0
 8012c82:	715a      	strb	r2, [r3, #5]
 8012c84:	2200      	movs	r2, #0
 8012c86:	719a      	strb	r2, [r3, #6]
 8012c88:	2200      	movs	r2, #0
 8012c8a:	71da      	strb	r2, [r3, #7]
   p_ot_req->Data[0] = (uint32_t) aHeader;
 8012c8c:	687a      	ldr	r2, [r7, #4]
 8012c8e:	68fb      	ldr	r3, [r7, #12]
 8012c90:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8012c92:	f002 fa49 	bl	8015128 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012c96:	f002 fa2f 	bl	80150f8 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012c9a:	60f8      	str	r0, [r7, #12]
   return (uint8_t)p_ot_req->Data[0];
 8012c9c:	68fb      	ldr	r3, [r7, #12]
 8012c9e:	689b      	ldr	r3, [r3, #8]
 8012ca0:	b2db      	uxtb	r3, r3
}
 8012ca2:	4618      	mov	r0, r3
 8012ca4:	3710      	adds	r7, #16
 8012ca6:	46bd      	mov	sp, r7
 8012ca8:	bd80      	pop	{r7, pc}

08012caa <otCoapHeaderGetToken>:

const uint8_t *otCoapHeaderGetToken(const otCoapHeader *aHeader)
{
 8012caa:	b580      	push	{r7, lr}
 8012cac:	b084      	sub	sp, #16
 8012cae:	af00      	add	r7, sp, #0
 8012cb0:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8012cb2:	f002 fa77 	bl	80151a4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012cb6:	f002 fa13 	bl	80150e0 <THREAD_Get_OTCmdPayloadBuffer>
 8012cba:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TOKEN;
 8012cbc:	68fb      	ldr	r3, [r7, #12]
 8012cbe:	2200      	movs	r2, #0
 8012cc0:	f062 0253 	orn	r2, r2, #83	; 0x53
 8012cc4:	701a      	strb	r2, [r3, #0]
 8012cc6:	2200      	movs	r2, #0
 8012cc8:	705a      	strb	r2, [r3, #1]
 8012cca:	2200      	movs	r2, #0
 8012ccc:	709a      	strb	r2, [r3, #2]
 8012cce:	2200      	movs	r2, #0
 8012cd0:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8012cd2:	68fb      	ldr	r3, [r7, #12]
 8012cd4:	2200      	movs	r2, #0
 8012cd6:	f042 0201 	orr.w	r2, r2, #1
 8012cda:	711a      	strb	r2, [r3, #4]
 8012cdc:	2200      	movs	r2, #0
 8012cde:	715a      	strb	r2, [r3, #5]
 8012ce0:	2200      	movs	r2, #0
 8012ce2:	719a      	strb	r2, [r3, #6]
 8012ce4:	2200      	movs	r2, #0
 8012ce6:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8012ce8:	687a      	ldr	r2, [r7, #4]
 8012cea:	68fb      	ldr	r3, [r7, #12]
 8012cec:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8012cee:	f002 fa1b 	bl	8015128 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012cf2:	f002 fa01 	bl	80150f8 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012cf6:	60f8      	str	r0, [r7, #12]
    return (uint8_t *)p_ot_req->Data[0];
 8012cf8:	68fb      	ldr	r3, [r7, #12]
 8012cfa:	689b      	ldr	r3, [r3, #8]
}
 8012cfc:	4618      	mov	r0, r3
 8012cfe:	3710      	adds	r7, #16
 8012d00:	46bd      	mov	sp, r7
 8012d02:	bd80      	pop	{r7, pc}

08012d04 <otCoapNewMessage>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otCoapOption *)p_ot_req->Data[0];
}

otMessage *otCoapNewMessage(otInstance *aInstance, const otCoapHeader *aHeader)
{
 8012d04:	b580      	push	{r7, lr}
 8012d06:	b084      	sub	sp, #16
 8012d08:	af00      	add	r7, sp, #0
 8012d0a:	6078      	str	r0, [r7, #4]
 8012d0c:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 8012d0e:	f002 fa49 	bl	80151a4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012d12:	f002 f9e5 	bl	80150e0 <THREAD_Get_OTCmdPayloadBuffer>
 8012d16:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_NEW_MESSAGE;
 8012d18:	68fb      	ldr	r3, [r7, #12]
 8012d1a:	2200      	movs	r2, #0
 8012d1c:	f062 0259 	orn	r2, r2, #89	; 0x59
 8012d20:	701a      	strb	r2, [r3, #0]
 8012d22:	2200      	movs	r2, #0
 8012d24:	705a      	strb	r2, [r3, #1]
 8012d26:	2200      	movs	r2, #0
 8012d28:	709a      	strb	r2, [r3, #2]
 8012d2a:	2200      	movs	r2, #0
 8012d2c:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8012d2e:	68fb      	ldr	r3, [r7, #12]
 8012d30:	2200      	movs	r2, #0
 8012d32:	f042 0201 	orr.w	r2, r2, #1
 8012d36:	711a      	strb	r2, [r3, #4]
 8012d38:	2200      	movs	r2, #0
 8012d3a:	715a      	strb	r2, [r3, #5]
 8012d3c:	2200      	movs	r2, #0
 8012d3e:	719a      	strb	r2, [r3, #6]
 8012d40:	2200      	movs	r2, #0
 8012d42:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8012d44:	683a      	ldr	r2, [r7, #0]
 8012d46:	68fb      	ldr	r3, [r7, #12]
 8012d48:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8012d4a:	f002 f9ed 	bl	8015128 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012d4e:	f002 f9d3 	bl	80150f8 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012d52:	60f8      	str	r0, [r7, #12]
    return (otMessage *)p_ot_req->Data[0];
 8012d54:	68fb      	ldr	r3, [r7, #12]
 8012d56:	689b      	ldr	r3, [r3, #8]

}
 8012d58:	4618      	mov	r0, r3
 8012d5a:	3710      	adds	r7, #16
 8012d5c:	46bd      	mov	sp, r7
 8012d5e:	bd80      	pop	{r7, pc}

08012d60 <otCoapSendRequest>:

otError otCoapSendRequest(otInstance *aInstance,otMessage *aMessage, const otMessageInfo *aMessageInfo,
                              otCoapResponseHandler aHandler, void *aContext)
{
 8012d60:	b580      	push	{r7, lr}
 8012d62:	b086      	sub	sp, #24
 8012d64:	af00      	add	r7, sp, #0
 8012d66:	60f8      	str	r0, [r7, #12]
 8012d68:	60b9      	str	r1, [r7, #8]
 8012d6a:	607a      	str	r2, [r7, #4]
 8012d6c:	603b      	str	r3, [r7, #0]
    Pre_OtCmdProcessing();
 8012d6e:	f002 fa19 	bl	80151a4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012d72:	f002 f9b5 	bl	80150e0 <THREAD_Get_OTCmdPayloadBuffer>
 8012d76:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_REQUEST;
 8012d78:	697b      	ldr	r3, [r7, #20]
 8012d7a:	2200      	movs	r2, #0
 8012d7c:	f062 0258 	orn	r2, r2, #88	; 0x58
 8012d80:	701a      	strb	r2, [r3, #0]
 8012d82:	2200      	movs	r2, #0
 8012d84:	705a      	strb	r2, [r3, #1]
 8012d86:	2200      	movs	r2, #0
 8012d88:	709a      	strb	r2, [r3, #2]
 8012d8a:	2200      	movs	r2, #0
 8012d8c:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 8012d8e:	697b      	ldr	r3, [r7, #20]
 8012d90:	2200      	movs	r2, #0
 8012d92:	f042 0203 	orr.w	r2, r2, #3
 8012d96:	711a      	strb	r2, [r3, #4]
 8012d98:	2200      	movs	r2, #0
 8012d9a:	715a      	strb	r2, [r3, #5]
 8012d9c:	2200      	movs	r2, #0
 8012d9e:	719a      	strb	r2, [r3, #6]
 8012da0:	2200      	movs	r2, #0
 8012da2:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 8012da4:	68ba      	ldr	r2, [r7, #8]
 8012da6:	697b      	ldr	r3, [r7, #20]
 8012da8:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 8012daa:	687a      	ldr	r2, [r7, #4]
 8012dac:	697b      	ldr	r3, [r7, #20]
 8012dae:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aHandler;
 8012db0:	683a      	ldr	r2, [r7, #0]
 8012db2:	697b      	ldr	r3, [r7, #20]
 8012db4:	611a      	str	r2, [r3, #16]
    p_ot_req->Data[3] = (uint32_t) aContext;
 8012db6:	6a3a      	ldr	r2, [r7, #32]
 8012db8:	697b      	ldr	r3, [r7, #20]
 8012dba:	615a      	str	r2, [r3, #20]

    Ot_Cmd_Transfer();
 8012dbc:	f002 f9b4 	bl	8015128 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012dc0:	f002 f99a 	bl	80150f8 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012dc4:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 8012dc6:	697b      	ldr	r3, [r7, #20]
 8012dc8:	689b      	ldr	r3, [r3, #8]
 8012dca:	b2db      	uxtb	r3, r3
}
 8012dcc:	4618      	mov	r0, r3
 8012dce:	3718      	adds	r7, #24
 8012dd0:	46bd      	mov	sp, r7
 8012dd2:	bd80      	pop	{r7, pc}

08012dd4 <otCoapStart>:

otError otCoapStart(otInstance *aInstance, uint16_t aPort)
{
 8012dd4:	b580      	push	{r7, lr}
 8012dd6:	b084      	sub	sp, #16
 8012dd8:	af00      	add	r7, sp, #0
 8012dda:	6078      	str	r0, [r7, #4]
 8012ddc:	460b      	mov	r3, r1
 8012dde:	807b      	strh	r3, [r7, #2]
    Pre_OtCmdProcessing();
 8012de0:	f002 f9e0 	bl	80151a4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012de4:	f002 f97c 	bl	80150e0 <THREAD_Get_OTCmdPayloadBuffer>
 8012de8:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_START;
 8012dea:	68fb      	ldr	r3, [r7, #12]
 8012dec:	2200      	movs	r2, #0
 8012dee:	f062 024b 	orn	r2, r2, #75	; 0x4b
 8012df2:	701a      	strb	r2, [r3, #0]
 8012df4:	2200      	movs	r2, #0
 8012df6:	705a      	strb	r2, [r3, #1]
 8012df8:	2200      	movs	r2, #0
 8012dfa:	709a      	strb	r2, [r3, #2]
 8012dfc:	2200      	movs	r2, #0
 8012dfe:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8012e00:	68fb      	ldr	r3, [r7, #12]
 8012e02:	2200      	movs	r2, #0
 8012e04:	f042 0201 	orr.w	r2, r2, #1
 8012e08:	711a      	strb	r2, [r3, #4]
 8012e0a:	2200      	movs	r2, #0
 8012e0c:	715a      	strb	r2, [r3, #5]
 8012e0e:	2200      	movs	r2, #0
 8012e10:	719a      	strb	r2, [r3, #6]
 8012e12:	2200      	movs	r2, #0
 8012e14:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint16_t) aPort;
 8012e16:	887a      	ldrh	r2, [r7, #2]
 8012e18:	68fb      	ldr	r3, [r7, #12]
 8012e1a:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8012e1c:	f002 f984 	bl	8015128 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012e20:	f002 f96a 	bl	80150f8 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012e24:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 8012e26:	68fb      	ldr	r3, [r7, #12]
 8012e28:	689b      	ldr	r3, [r3, #8]
 8012e2a:	b2db      	uxtb	r3, r3
}
 8012e2c:	4618      	mov	r0, r3
 8012e2e:	3710      	adds	r7, #16
 8012e30:	46bd      	mov	sp, r7
 8012e32:	bd80      	pop	{r7, pc}

08012e34 <otCoapAddResource>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError)p_ot_req->Data[0];
}

otError otCoapAddResource(otInstance *aInstance, otCoapResource *aResource)
{
 8012e34:	b580      	push	{r7, lr}
 8012e36:	b084      	sub	sp, #16
 8012e38:	af00      	add	r7, sp, #0
 8012e3a:	6078      	str	r0, [r7, #4]
 8012e3c:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 8012e3e:	f002 f9b1 	bl	80151a4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012e42:	f002 f94d 	bl	80150e0 <THREAD_Get_OTCmdPayloadBuffer>
 8012e46:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_ADD_RESSOURCE;
 8012e48:	68fb      	ldr	r3, [r7, #12]
 8012e4a:	2200      	movs	r2, #0
 8012e4c:	f062 0249 	orn	r2, r2, #73	; 0x49
 8012e50:	701a      	strb	r2, [r3, #0]
 8012e52:	2200      	movs	r2, #0
 8012e54:	705a      	strb	r2, [r3, #1]
 8012e56:	2200      	movs	r2, #0
 8012e58:	709a      	strb	r2, [r3, #2]
 8012e5a:	2200      	movs	r2, #0
 8012e5c:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8012e5e:	68fb      	ldr	r3, [r7, #12]
 8012e60:	2200      	movs	r2, #0
 8012e62:	f042 0201 	orr.w	r2, r2, #1
 8012e66:	711a      	strb	r2, [r3, #4]
 8012e68:	2200      	movs	r2, #0
 8012e6a:	715a      	strb	r2, [r3, #5]
 8012e6c:	2200      	movs	r2, #0
 8012e6e:	719a      	strb	r2, [r3, #6]
 8012e70:	2200      	movs	r2, #0
 8012e72:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aResource;
 8012e74:	683a      	ldr	r2, [r7, #0]
 8012e76:	68fb      	ldr	r3, [r7, #12]
 8012e78:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8012e7a:	f002 f955 	bl	8015128 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012e7e:	f002 f93b 	bl	80150f8 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012e82:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 8012e84:	68fb      	ldr	r3, [r7, #12]
 8012e86:	689b      	ldr	r3, [r3, #8]
 8012e88:	b2db      	uxtb	r3, r3
}
 8012e8a:	4618      	mov	r0, r3
 8012e8c:	3710      	adds	r7, #16
 8012e8e:	46bd      	mov	sp, r7
 8012e90:	bd80      	pop	{r7, pc}

08012e92 <otCoapSendResponse>:

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otCoapSendResponse(otInstance *aInstance, otMessage *aMessage, const otMessageInfo *aMessageInfo)
{
 8012e92:	b580      	push	{r7, lr}
 8012e94:	b086      	sub	sp, #24
 8012e96:	af00      	add	r7, sp, #0
 8012e98:	60f8      	str	r0, [r7, #12]
 8012e9a:	60b9      	str	r1, [r7, #8]
 8012e9c:	607a      	str	r2, [r7, #4]
    Pre_OtCmdProcessing();
 8012e9e:	f002 f981 	bl	80151a4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012ea2:	f002 f91d 	bl	80150e0 <THREAD_Get_OTCmdPayloadBuffer>
 8012ea6:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_RESPONSE;
 8012ea8:	697b      	ldr	r3, [r7, #20]
 8012eaa:	2200      	movs	r2, #0
 8012eac:	f062 0257 	orn	r2, r2, #87	; 0x57
 8012eb0:	701a      	strb	r2, [r3, #0]
 8012eb2:	2200      	movs	r2, #0
 8012eb4:	705a      	strb	r2, [r3, #1]
 8012eb6:	2200      	movs	r2, #0
 8012eb8:	709a      	strb	r2, [r3, #2]
 8012eba:	2200      	movs	r2, #0
 8012ebc:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 8012ebe:	697b      	ldr	r3, [r7, #20]
 8012ec0:	2200      	movs	r2, #0
 8012ec2:	f042 0202 	orr.w	r2, r2, #2
 8012ec6:	711a      	strb	r2, [r3, #4]
 8012ec8:	2200      	movs	r2, #0
 8012eca:	715a      	strb	r2, [r3, #5]
 8012ecc:	2200      	movs	r2, #0
 8012ece:	719a      	strb	r2, [r3, #6]
 8012ed0:	2200      	movs	r2, #0
 8012ed2:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 8012ed4:	68ba      	ldr	r2, [r7, #8]
 8012ed6:	697b      	ldr	r3, [r7, #20]
 8012ed8:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 8012eda:	687a      	ldr	r2, [r7, #4]
 8012edc:	697b      	ldr	r3, [r7, #20]
 8012ede:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 8012ee0:	f002 f922 	bl	8015128 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012ee4:	f002 f908 	bl	80150f8 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012ee8:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 8012eea:	697b      	ldr	r3, [r7, #20]
 8012eec:	689b      	ldr	r3, [r3, #8]
 8012eee:	b2db      	uxtb	r3, r3
}
 8012ef0:	4618      	mov	r0, r3
 8012ef2:	3718      	adds	r7, #24
 8012ef4:	46bd      	mov	sp, r7
 8012ef6:	bd80      	pop	{r7, pc}

08012ef8 <otInstanceInitSingle>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otInstance *)p_ot_req->Data[0];
}
#else
otInstance *otInstanceInitSingle(void)
{
 8012ef8:	b580      	push	{r7, lr}
 8012efa:	b082      	sub	sp, #8
 8012efc:	af00      	add	r7, sp, #0
    Pre_OtCmdProcessing();
 8012efe:	f002 f951 	bl	80151a4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012f02:	f002 f8ed 	bl	80150e0 <THREAD_Get_OTCmdPayloadBuffer>
 8012f06:	6078      	str	r0, [r7, #4]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_INIT_SINGLE;
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	2200      	movs	r2, #0
 8012f0c:	f062 026b 	orn	r2, r2, #107	; 0x6b
 8012f10:	701a      	strb	r2, [r3, #0]
 8012f12:	2200      	movs	r2, #0
 8012f14:	705a      	strb	r2, [r3, #1]
 8012f16:	2200      	movs	r2, #0
 8012f18:	709a      	strb	r2, [r3, #2]
 8012f1a:	2200      	movs	r2, #0
 8012f1c:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	2200      	movs	r2, #0
 8012f22:	711a      	strb	r2, [r3, #4]
 8012f24:	2200      	movs	r2, #0
 8012f26:	715a      	strb	r2, [r3, #5]
 8012f28:	2200      	movs	r2, #0
 8012f2a:	719a      	strb	r2, [r3, #6]
 8012f2c:	2200      	movs	r2, #0
 8012f2e:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 8012f30:	f002 f8fa 	bl	8015128 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012f34:	f002 f8e0 	bl	80150f8 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012f38:	6078      	str	r0, [r7, #4]
    return (otInstance *)p_ot_req->Data[0];
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	689b      	ldr	r3, [r3, #8]
}
 8012f3e:	4618      	mov	r0, r3
 8012f40:	3708      	adds	r7, #8
 8012f42:	46bd      	mov	sp, r7
 8012f44:	bd80      	pop	{r7, pc}

08012f46 <otInstanceFinalize>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (bool)p_ot_req->Data[0];
}

void otInstanceFinalize(otInstance *aInstance)
{
 8012f46:	b580      	push	{r7, lr}
 8012f48:	b084      	sub	sp, #16
 8012f4a:	af00      	add	r7, sp, #0
 8012f4c:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8012f4e:	f002 f929 	bl	80151a4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012f52:	f002 f8c5 	bl	80150e0 <THREAD_Get_OTCmdPayloadBuffer>
 8012f56:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_FINALIZE;
 8012f58:	68fb      	ldr	r3, [r7, #12]
 8012f5a:	2200      	movs	r2, #0
 8012f5c:	f062 0269 	orn	r2, r2, #105	; 0x69
 8012f60:	701a      	strb	r2, [r3, #0]
 8012f62:	2200      	movs	r2, #0
 8012f64:	705a      	strb	r2, [r3, #1]
 8012f66:	2200      	movs	r2, #0
 8012f68:	709a      	strb	r2, [r3, #2]
 8012f6a:	2200      	movs	r2, #0
 8012f6c:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 8012f6e:	68fb      	ldr	r3, [r7, #12]
 8012f70:	2200      	movs	r2, #0
 8012f72:	711a      	strb	r2, [r3, #4]
 8012f74:	2200      	movs	r2, #0
 8012f76:	715a      	strb	r2, [r3, #5]
 8012f78:	2200      	movs	r2, #0
 8012f7a:	719a      	strb	r2, [r3, #6]
 8012f7c:	2200      	movs	r2, #0
 8012f7e:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 8012f80:	f002 f8d2 	bl	8015128 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012f84:	f002 f8b8 	bl	80150f8 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012f88:	60f8      	str	r0, [r7, #12]
}
 8012f8a:	bf00      	nop
 8012f8c:	3710      	adds	r7, #16
 8012f8e:	46bd      	mov	sp, r7
 8012f90:	bd80      	pop	{r7, pc}
	...

08012f94 <otSetStateChangedCallback>:

OTAPI otError OTCALL otSetStateChangedCallback(otInstance *aInstance, otStateChangedCallback aCallback,
                                               void *aContext)
{
 8012f94:	b580      	push	{r7, lr}
 8012f96:	b086      	sub	sp, #24
 8012f98:	af00      	add	r7, sp, #0
 8012f9a:	60f8      	str	r0, [r7, #12]
 8012f9c:	60b9      	str	r1, [r7, #8]
 8012f9e:	607a      	str	r2, [r7, #4]
    Pre_OtCmdProcessing();
 8012fa0:	f002 f900 	bl	80151a4 <Pre_OtCmdProcessing>
    /* Store the callback function */
    otStateChangedCb = aCallback;
 8012fa4:	4a15      	ldr	r2, [pc, #84]	; (8012ffc <otSetStateChangedCallback+0x68>)
 8012fa6:	68bb      	ldr	r3, [r7, #8]
 8012fa8:	6013      	str	r3, [r2, #0]
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012faa:	f002 f899 	bl	80150e0 <THREAD_Get_OTCmdPayloadBuffer>
 8012fae:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_SET_STATE_CHANGED_CALLBACK;
 8012fb0:	697b      	ldr	r3, [r7, #20]
 8012fb2:	2200      	movs	r2, #0
 8012fb4:	f062 0268 	orn	r2, r2, #104	; 0x68
 8012fb8:	701a      	strb	r2, [r3, #0]
 8012fba:	2200      	movs	r2, #0
 8012fbc:	705a      	strb	r2, [r3, #1]
 8012fbe:	2200      	movs	r2, #0
 8012fc0:	709a      	strb	r2, [r3, #2]
 8012fc2:	2200      	movs	r2, #0
 8012fc4:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8012fc6:	697b      	ldr	r3, [r7, #20]
 8012fc8:	2200      	movs	r2, #0
 8012fca:	f042 0201 	orr.w	r2, r2, #1
 8012fce:	711a      	strb	r2, [r3, #4]
 8012fd0:	2200      	movs	r2, #0
 8012fd2:	715a      	strb	r2, [r3, #5]
 8012fd4:	2200      	movs	r2, #0
 8012fd6:	719a      	strb	r2, [r3, #6]
 8012fd8:	2200      	movs	r2, #0
 8012fda:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t)aContext;
 8012fdc:	687a      	ldr	r2, [r7, #4]
 8012fde:	697b      	ldr	r3, [r7, #20]
 8012fe0:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8012fe2:	f002 f8a1 	bl	8015128 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012fe6:	f002 f887 	bl	80150f8 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012fea:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 8012fec:	697b      	ldr	r3, [r7, #20]
 8012fee:	689b      	ldr	r3, [r3, #8]
 8012ff0:	b2db      	uxtb	r3, r3
}
 8012ff2:	4618      	mov	r0, r3
 8012ff4:	3718      	adds	r7, #24
 8012ff6:	46bd      	mov	sp, r7
 8012ff8:	bd80      	pop	{r7, pc}
 8012ffa:	bf00      	nop
 8012ffc:	20027434 	.word	0x20027434

08013000 <otInstanceErasePersistentInfo>:

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otInstanceErasePersistentInfo(otInstance *aInstance)
{
 8013000:	b580      	push	{r7, lr}
 8013002:	b084      	sub	sp, #16
 8013004:	af00      	add	r7, sp, #0
 8013006:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8013008:	f002 f8cc 	bl	80151a4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 801300c:	f002 f868 	bl	80150e0 <THREAD_Get_OTCmdPayloadBuffer>
 8013010:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_ERASE_PERSISTENT_INFO;
 8013012:	68fb      	ldr	r3, [r7, #12]
 8013014:	2200      	movs	r2, #0
 8013016:	f062 0264 	orn	r2, r2, #100	; 0x64
 801301a:	701a      	strb	r2, [r3, #0]
 801301c:	2200      	movs	r2, #0
 801301e:	705a      	strb	r2, [r3, #1]
 8013020:	2200      	movs	r2, #0
 8013022:	709a      	strb	r2, [r3, #2]
 8013024:	2200      	movs	r2, #0
 8013026:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 8013028:	68fb      	ldr	r3, [r7, #12]
 801302a:	2200      	movs	r2, #0
 801302c:	711a      	strb	r2, [r3, #4]
 801302e:	2200      	movs	r2, #0
 8013030:	715a      	strb	r2, [r3, #5]
 8013032:	2200      	movs	r2, #0
 8013034:	719a      	strb	r2, [r3, #6]
 8013036:	2200      	movs	r2, #0
 8013038:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 801303a:	f002 f875 	bl	8015128 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801303e:	f002 f85b 	bl	80150f8 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013042:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 8013044:	68fb      	ldr	r3, [r7, #12]
 8013046:	689b      	ldr	r3, [r3, #8]
 8013048:	b2db      	uxtb	r3, r3
}
 801304a:	4618      	mov	r0, r3
 801304c:	3710      	adds	r7, #16
 801304e:	46bd      	mov	sp, r7
 8013050:	bd80      	pop	{r7, pc}

08013052 <otIp6SetEnabled>:
extern otIp6SlaacIidCreate aIidCreateCb;
extern otIp6ReceiveCallback otIp6ReceiveCb;


OTAPI otError OTCALL otIp6SetEnabled(otInstance *aInstance, bool aEnabled)
{
 8013052:	b580      	push	{r7, lr}
 8013054:	b084      	sub	sp, #16
 8013056:	af00      	add	r7, sp, #0
 8013058:	6078      	str	r0, [r7, #4]
 801305a:	460b      	mov	r3, r1
 801305c:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 801305e:	f002 f8a1 	bl	80151a4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013062:	f002 f83d 	bl	80150e0 <THREAD_Get_OTCmdPayloadBuffer>
 8013066:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_SET_ENABLED;
 8013068:	68fb      	ldr	r3, [r7, #12]
 801306a:	2200      	movs	r2, #0
 801306c:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8013070:	701a      	strb	r2, [r3, #0]
 8013072:	2200      	movs	r2, #0
 8013074:	705a      	strb	r2, [r3, #1]
 8013076:	2200      	movs	r2, #0
 8013078:	709a      	strb	r2, [r3, #2]
 801307a:	2200      	movs	r2, #0
 801307c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 801307e:	68fb      	ldr	r3, [r7, #12]
 8013080:	2200      	movs	r2, #0
 8013082:	f042 0201 	orr.w	r2, r2, #1
 8013086:	711a      	strb	r2, [r3, #4]
 8013088:	2200      	movs	r2, #0
 801308a:	715a      	strb	r2, [r3, #5]
 801308c:	2200      	movs	r2, #0
 801308e:	719a      	strb	r2, [r3, #6]
 8013090:	2200      	movs	r2, #0
 8013092:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 8013094:	78fa      	ldrb	r2, [r7, #3]
 8013096:	68fb      	ldr	r3, [r7, #12]
 8013098:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 801309a:	f002 f845 	bl	8015128 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801309e:	f002 f82b 	bl	80150f8 <THREAD_Get_OTCmdRspPayloadBuffer>
 80130a2:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 80130a4:	68fb      	ldr	r3, [r7, #12]
 80130a6:	689b      	ldr	r3, [r3, #8]
 80130a8:	b2db      	uxtb	r3, r3
}
 80130aa:	4618      	mov	r0, r3
 80130ac:	3710      	adds	r7, #16
 80130ae:	46bd      	mov	sp, r7
 80130b0:	bd80      	pop	{r7, pc}

080130b2 <otIp6IsAddressEqual>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint16_t *)p_ot_req->Data[0];
}

OTAPI bool OTCALL otIp6IsAddressEqual(const otIp6Address *a, const otIp6Address *b)
{
 80130b2:	b580      	push	{r7, lr}
 80130b4:	b084      	sub	sp, #16
 80130b6:	af00      	add	r7, sp, #0
 80130b8:	6078      	str	r0, [r7, #4]
 80130ba:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 80130bc:	f002 f872 	bl	80151a4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80130c0:	f002 f80e 	bl	80150e0 <THREAD_Get_OTCmdPayloadBuffer>
 80130c4:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_IS_ADDRESS_EQUAL;
 80130c6:	68fb      	ldr	r3, [r7, #12]
 80130c8:	2200      	movs	r2, #0
 80130ca:	f042 023e 	orr.w	r2, r2, #62	; 0x3e
 80130ce:	701a      	strb	r2, [r3, #0]
 80130d0:	2200      	movs	r2, #0
 80130d2:	705a      	strb	r2, [r3, #1]
 80130d4:	2200      	movs	r2, #0
 80130d6:	709a      	strb	r2, [r3, #2]
 80130d8:	2200      	movs	r2, #0
 80130da:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 80130dc:	68fb      	ldr	r3, [r7, #12]
 80130de:	2200      	movs	r2, #0
 80130e0:	f042 0202 	orr.w	r2, r2, #2
 80130e4:	711a      	strb	r2, [r3, #4]
 80130e6:	2200      	movs	r2, #0
 80130e8:	715a      	strb	r2, [r3, #5]
 80130ea:	2200      	movs	r2, #0
 80130ec:	719a      	strb	r2, [r3, #6]
 80130ee:	2200      	movs	r2, #0
 80130f0:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)a;
 80130f2:	687a      	ldr	r2, [r7, #4]
 80130f4:	68fb      	ldr	r3, [r7, #12]
 80130f6:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t)b;
 80130f8:	683a      	ldr	r2, [r7, #0]
 80130fa:	68fb      	ldr	r3, [r7, #12]
 80130fc:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 80130fe:	f002 f813 	bl	8015128 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013102:	f001 fff9 	bl	80150f8 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013106:	60f8      	str	r0, [r7, #12]
  return (bool)p_ot_req->Data[0];
 8013108:	68fb      	ldr	r3, [r7, #12]
 801310a:	689b      	ldr	r3, [r3, #8]
 801310c:	2b00      	cmp	r3, #0
 801310e:	bf14      	ite	ne
 8013110:	2301      	movne	r3, #1
 8013112:	2300      	moveq	r3, #0
 8013114:	b2db      	uxtb	r3, r3
}
 8013116:	4618      	mov	r0, r3
 8013118:	3710      	adds	r7, #16
 801311a:	46bd      	mov	sp, r7
 801311c:	bd80      	pop	{r7, pc}

0801311e <otIp6AddressFromString>:

OTAPI otError OTCALL otIp6AddressFromString(const char *aString, otIp6Address *aAddress)
{
 801311e:	b580      	push	{r7, lr}
 8013120:	b084      	sub	sp, #16
 8013122:	af00      	add	r7, sp, #0
 8013124:	6078      	str	r0, [r7, #4]
 8013126:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8013128:	f002 f83c 	bl	80151a4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 801312c:	f001 ffd8 	bl	80150e0 <THREAD_Get_OTCmdPayloadBuffer>
 8013130:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_ADDRESS_FROM_STRING;
 8013132:	68fb      	ldr	r3, [r7, #12]
 8013134:	2200      	movs	r2, #0
 8013136:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 801313a:	701a      	strb	r2, [r3, #0]
 801313c:	2200      	movs	r2, #0
 801313e:	705a      	strb	r2, [r3, #1]
 8013140:	2200      	movs	r2, #0
 8013142:	709a      	strb	r2, [r3, #2]
 8013144:	2200      	movs	r2, #0
 8013146:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 8013148:	68fb      	ldr	r3, [r7, #12]
 801314a:	2200      	movs	r2, #0
 801314c:	f042 0202 	orr.w	r2, r2, #2
 8013150:	711a      	strb	r2, [r3, #4]
 8013152:	2200      	movs	r2, #0
 8013154:	715a      	strb	r2, [r3, #5]
 8013156:	2200      	movs	r2, #0
 8013158:	719a      	strb	r2, [r3, #6]
 801315a:	2200      	movs	r2, #0
 801315c:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aString;
 801315e:	687a      	ldr	r2, [r7, #4]
 8013160:	68fb      	ldr	r3, [r7, #12]
 8013162:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aAddress;
 8013164:	683a      	ldr	r2, [r7, #0]
 8013166:	68fb      	ldr	r3, [r7, #12]
 8013168:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 801316a:	f001 ffdd 	bl	8015128 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801316e:	f001 ffc3 	bl	80150f8 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013172:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8013174:	68fb      	ldr	r3, [r7, #12]
 8013176:	689b      	ldr	r3, [r3, #8]
 8013178:	b2db      	uxtb	r3, r3
}
 801317a:	4618      	mov	r0, r3
 801317c:	3710      	adds	r7, #16
 801317e:	46bd      	mov	sp, r7
 8013180:	bd80      	pop	{r7, pc}

08013182 <otLinkSetChannel>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint8_t)p_ot_req->Data[0];
}

OTAPI otError OTCALL otLinkSetChannel(otInstance *aInstance, uint8_t aChannel)
{
 8013182:	b580      	push	{r7, lr}
 8013184:	b084      	sub	sp, #16
 8013186:	af00      	add	r7, sp, #0
 8013188:	6078      	str	r0, [r7, #4]
 801318a:	460b      	mov	r3, r1
 801318c:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 801318e:	f002 f809 	bl	80151a4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013192:	f001 ffa5 	bl	80150e0 <THREAD_Get_OTCmdPayloadBuffer>
 8013196:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_CHANNEL;
 8013198:	68fb      	ldr	r3, [r7, #12]
 801319a:	2200      	movs	r2, #0
 801319c:	f042 0208 	orr.w	r2, r2, #8
 80131a0:	701a      	strb	r2, [r3, #0]
 80131a2:	2200      	movs	r2, #0
 80131a4:	705a      	strb	r2, [r3, #1]
 80131a6:	2200      	movs	r2, #0
 80131a8:	709a      	strb	r2, [r3, #2]
 80131aa:	2200      	movs	r2, #0
 80131ac:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 80131ae:	68fb      	ldr	r3, [r7, #12]
 80131b0:	2200      	movs	r2, #0
 80131b2:	f042 0201 	orr.w	r2, r2, #1
 80131b6:	711a      	strb	r2, [r3, #4]
 80131b8:	2200      	movs	r2, #0
 80131ba:	715a      	strb	r2, [r3, #5]
 80131bc:	2200      	movs	r2, #0
 80131be:	719a      	strb	r2, [r3, #6]
 80131c0:	2200      	movs	r2, #0
 80131c2:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aChannel;
 80131c4:	78fa      	ldrb	r2, [r7, #3]
 80131c6:	68fb      	ldr	r3, [r7, #12]
 80131c8:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 80131ca:	f001 ffad 	bl	8015128 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80131ce:	f001 ff93 	bl	80150f8 <THREAD_Get_OTCmdRspPayloadBuffer>
 80131d2:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 80131d4:	68fb      	ldr	r3, [r7, #12]
 80131d6:	689b      	ldr	r3, [r3, #8]
 80131d8:	b2db      	uxtb	r3, r3
}
 80131da:	4618      	mov	r0, r3
 80131dc:	3710      	adds	r7, #16
 80131de:	46bd      	mov	sp, r7
 80131e0:	bd80      	pop	{r7, pc}

080131e2 <otLinkSetPanId>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otPanId)p_ot_req->Data[0];
}

OTAPI otError OTCALL otLinkSetPanId(otInstance *aInstance, otPanId aPanId)
{
 80131e2:	b580      	push	{r7, lr}
 80131e4:	b084      	sub	sp, #16
 80131e6:	af00      	add	r7, sp, #0
 80131e8:	6078      	str	r0, [r7, #4]
 80131ea:	460b      	mov	r3, r1
 80131ec:	807b      	strh	r3, [r7, #2]
  Pre_OtCmdProcessing();
 80131ee:	f001 ffd9 	bl	80151a4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80131f2:	f001 ff75 	bl	80150e0 <THREAD_Get_OTCmdPayloadBuffer>
 80131f6:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_PANID;
 80131f8:	68fb      	ldr	r3, [r7, #12]
 80131fa:	2200      	movs	r2, #0
 80131fc:	f042 020f 	orr.w	r2, r2, #15
 8013200:	701a      	strb	r2, [r3, #0]
 8013202:	2200      	movs	r2, #0
 8013204:	705a      	strb	r2, [r3, #1]
 8013206:	2200      	movs	r2, #0
 8013208:	709a      	strb	r2, [r3, #2]
 801320a:	2200      	movs	r2, #0
 801320c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 801320e:	68fb      	ldr	r3, [r7, #12]
 8013210:	2200      	movs	r2, #0
 8013212:	f042 0201 	orr.w	r2, r2, #1
 8013216:	711a      	strb	r2, [r3, #4]
 8013218:	2200      	movs	r2, #0
 801321a:	715a      	strb	r2, [r3, #5]
 801321c:	2200      	movs	r2, #0
 801321e:	719a      	strb	r2, [r3, #6]
 8013220:	2200      	movs	r2, #0
 8013222:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aPanId;
 8013224:	887a      	ldrh	r2, [r7, #2]
 8013226:	68fb      	ldr	r3, [r7, #12]
 8013228:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 801322a:	f001 ff7d 	bl	8015128 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801322e:	f001 ff63 	bl	80150f8 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013232:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8013234:	68fb      	ldr	r3, [r7, #12]
 8013236:	689b      	ldr	r3, [r3, #8]
 8013238:	b2db      	uxtb	r3, r3
}
 801323a:	4618      	mov	r0, r3
 801323c:	3710      	adds	r7, #16
 801323e:	46bd      	mov	sp, r7
 8013240:	bd80      	pop	{r7, pc}

08013242 <otMessageFree>:
#include "thread.h"
#include "message.h"


void otMessageFree(otMessage *aMessage)
{
 8013242:	b580      	push	{r7, lr}
 8013244:	b084      	sub	sp, #16
 8013246:	af00      	add	r7, sp, #0
 8013248:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 801324a:	f001 ffab 	bl	80151a4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 801324e:	f001 ff47 	bl	80150e0 <THREAD_Get_OTCmdPayloadBuffer>
 8013252:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_FREE;
 8013254:	68fb      	ldr	r3, [r7, #12]
 8013256:	2200      	movs	r2, #0
 8013258:	f062 0246 	orn	r2, r2, #70	; 0x46
 801325c:	701a      	strb	r2, [r3, #0]
 801325e:	2200      	movs	r2, #0
 8013260:	705a      	strb	r2, [r3, #1]
 8013262:	2200      	movs	r2, #0
 8013264:	709a      	strb	r2, [r3, #2]
 8013266:	2200      	movs	r2, #0
 8013268:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 801326a:	68fb      	ldr	r3, [r7, #12]
 801326c:	2200      	movs	r2, #0
 801326e:	f042 0201 	orr.w	r2, r2, #1
 8013272:	711a      	strb	r2, [r3, #4]
 8013274:	2200      	movs	r2, #0
 8013276:	715a      	strb	r2, [r3, #5]
 8013278:	2200      	movs	r2, #0
 801327a:	719a      	strb	r2, [r3, #6]
 801327c:	2200      	movs	r2, #0
 801327e:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 8013280:	687a      	ldr	r2, [r7, #4]
 8013282:	68fb      	ldr	r3, [r7, #12]
 8013284:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8013286:	f001 ff4f 	bl	8015128 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801328a:	f001 ff35 	bl	80150f8 <THREAD_Get_OTCmdRspPayloadBuffer>
 801328e:	60f8      	str	r0, [r7, #12]
}
 8013290:	bf00      	nop
 8013292:	3710      	adds	r7, #16
 8013294:	46bd      	mov	sp, r7
 8013296:	bd80      	pop	{r7, pc}

08013298 <otMessageGetOffset>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError)p_ot_req->Data[0];
}

uint16_t otMessageGetOffset(otMessage *aMessage)
{
 8013298:	b580      	push	{r7, lr}
 801329a:	b084      	sub	sp, #16
 801329c:	af00      	add	r7, sp, #0
 801329e:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 80132a0:	f001 ff80 	bl	80151a4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80132a4:	f001 ff1c 	bl	80150e0 <THREAD_Get_OTCmdPayloadBuffer>
 80132a8:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_GET_OFFSET;
 80132aa:	68fb      	ldr	r3, [r7, #12]
 80132ac:	2200      	movs	r2, #0
 80132ae:	f062 0243 	orn	r2, r2, #67	; 0x43
 80132b2:	701a      	strb	r2, [r3, #0]
 80132b4:	2200      	movs	r2, #0
 80132b6:	705a      	strb	r2, [r3, #1]
 80132b8:	2200      	movs	r2, #0
 80132ba:	709a      	strb	r2, [r3, #2]
 80132bc:	2200      	movs	r2, #0
 80132be:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 80132c0:	68fb      	ldr	r3, [r7, #12]
 80132c2:	2200      	movs	r2, #0
 80132c4:	f042 0201 	orr.w	r2, r2, #1
 80132c8:	711a      	strb	r2, [r3, #4]
 80132ca:	2200      	movs	r2, #0
 80132cc:	715a      	strb	r2, [r3, #5]
 80132ce:	2200      	movs	r2, #0
 80132d0:	719a      	strb	r2, [r3, #6]
 80132d2:	2200      	movs	r2, #0
 80132d4:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 80132d6:	687a      	ldr	r2, [r7, #4]
 80132d8:	68fb      	ldr	r3, [r7, #12]
 80132da:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 80132dc:	f001 ff24 	bl	8015128 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80132e0:	f001 ff0a 	bl	80150f8 <THREAD_Get_OTCmdRspPayloadBuffer>
 80132e4:	60f8      	str	r0, [r7, #12]
    return (uint16_t)p_ot_req->Data[0];
 80132e6:	68fb      	ldr	r3, [r7, #12]
 80132e8:	689b      	ldr	r3, [r3, #8]
 80132ea:	b29b      	uxth	r3, r3
}
 80132ec:	4618      	mov	r0, r3
 80132ee:	3710      	adds	r7, #16
 80132f0:	46bd      	mov	sp, r7
 80132f2:	bd80      	pop	{r7, pc}

080132f4 <otMessageAppend>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (int8_t)p_ot_req->Data[0];
}

otError otMessageAppend(otMessage *aMessage, const void *aBuf, uint16_t aLength)
{
 80132f4:	b580      	push	{r7, lr}
 80132f6:	b086      	sub	sp, #24
 80132f8:	af00      	add	r7, sp, #0
 80132fa:	60f8      	str	r0, [r7, #12]
 80132fc:	60b9      	str	r1, [r7, #8]
 80132fe:	4613      	mov	r3, r2
 8013300:	80fb      	strh	r3, [r7, #6]
    Pre_OtCmdProcessing();
 8013302:	f001 ff4f 	bl	80151a4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013306:	f001 feeb 	bl	80150e0 <THREAD_Get_OTCmdPayloadBuffer>
 801330a:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_APPEND;
 801330c:	697b      	ldr	r3, [r7, #20]
 801330e:	2200      	movs	r2, #0
 8013310:	f062 023e 	orn	r2, r2, #62	; 0x3e
 8013314:	701a      	strb	r2, [r3, #0]
 8013316:	2200      	movs	r2, #0
 8013318:	705a      	strb	r2, [r3, #1]
 801331a:	2200      	movs	r2, #0
 801331c:	709a      	strb	r2, [r3, #2]
 801331e:	2200      	movs	r2, #0
 8013320:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 8013322:	697b      	ldr	r3, [r7, #20]
 8013324:	2200      	movs	r2, #0
 8013326:	f042 0203 	orr.w	r2, r2, #3
 801332a:	711a      	strb	r2, [r3, #4]
 801332c:	2200      	movs	r2, #0
 801332e:	715a      	strb	r2, [r3, #5]
 8013330:	2200      	movs	r2, #0
 8013332:	719a      	strb	r2, [r3, #6]
 8013334:	2200      	movs	r2, #0
 8013336:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 8013338:	68fa      	ldr	r2, [r7, #12]
 801333a:	697b      	ldr	r3, [r7, #20]
 801333c:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aBuf;
 801333e:	68ba      	ldr	r2, [r7, #8]
 8013340:	697b      	ldr	r3, [r7, #20]
 8013342:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aLength;
 8013344:	88fa      	ldrh	r2, [r7, #6]
 8013346:	697b      	ldr	r3, [r7, #20]
 8013348:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 801334a:	f001 feed 	bl	8015128 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801334e:	f001 fed3 	bl	80150f8 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013352:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 8013354:	697b      	ldr	r3, [r7, #20]
 8013356:	689b      	ldr	r3, [r3, #8]
 8013358:	b2db      	uxtb	r3, r3
}
 801335a:	4618      	mov	r0, r3
 801335c:	3718      	adds	r7, #24
 801335e:	46bd      	mov	sp, r7
 8013360:	bd80      	pop	{r7, pc}

08013362 <otMessageRead>:

int otMessageRead(otMessage *aMessage, uint16_t aOffset, void *aBuf, uint16_t aLength)
{
 8013362:	b580      	push	{r7, lr}
 8013364:	b086      	sub	sp, #24
 8013366:	af00      	add	r7, sp, #0
 8013368:	60f8      	str	r0, [r7, #12]
 801336a:	607a      	str	r2, [r7, #4]
 801336c:	461a      	mov	r2, r3
 801336e:	460b      	mov	r3, r1
 8013370:	817b      	strh	r3, [r7, #10]
 8013372:	4613      	mov	r3, r2
 8013374:	813b      	strh	r3, [r7, #8]
    Pre_OtCmdProcessing();
 8013376:	f001 ff15 	bl	80151a4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 801337a:	f001 feb1 	bl	80150e0 <THREAD_Get_OTCmdPayloadBuffer>
 801337e:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_READ;
 8013380:	697b      	ldr	r3, [r7, #20]
 8013382:	2200      	movs	r2, #0
 8013384:	f062 023d 	orn	r2, r2, #61	; 0x3d
 8013388:	701a      	strb	r2, [r3, #0]
 801338a:	2200      	movs	r2, #0
 801338c:	705a      	strb	r2, [r3, #1]
 801338e:	2200      	movs	r2, #0
 8013390:	709a      	strb	r2, [r3, #2]
 8013392:	2200      	movs	r2, #0
 8013394:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=4;
 8013396:	697b      	ldr	r3, [r7, #20]
 8013398:	2200      	movs	r2, #0
 801339a:	f042 0204 	orr.w	r2, r2, #4
 801339e:	711a      	strb	r2, [r3, #4]
 80133a0:	2200      	movs	r2, #0
 80133a2:	715a      	strb	r2, [r3, #5]
 80133a4:	2200      	movs	r2, #0
 80133a6:	719a      	strb	r2, [r3, #6]
 80133a8:	2200      	movs	r2, #0
 80133aa:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 80133ac:	68fa      	ldr	r2, [r7, #12]
 80133ae:	697b      	ldr	r3, [r7, #20]
 80133b0:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aOffset;
 80133b2:	897a      	ldrh	r2, [r7, #10]
 80133b4:	697b      	ldr	r3, [r7, #20]
 80133b6:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aBuf;
 80133b8:	687a      	ldr	r2, [r7, #4]
 80133ba:	697b      	ldr	r3, [r7, #20]
 80133bc:	611a      	str	r2, [r3, #16]
    p_ot_req->Data[3] = (uint32_t) aLength;
 80133be:	893a      	ldrh	r2, [r7, #8]
 80133c0:	697b      	ldr	r3, [r7, #20]
 80133c2:	615a      	str	r2, [r3, #20]

    Ot_Cmd_Transfer();
 80133c4:	f001 feb0 	bl	8015128 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80133c8:	f001 fe96 	bl	80150f8 <THREAD_Get_OTCmdRspPayloadBuffer>
 80133cc:	6178      	str	r0, [r7, #20]
    return (int)p_ot_req->Data[0];
 80133ce:	697b      	ldr	r3, [r7, #20]
 80133d0:	689b      	ldr	r3, [r3, #8]
}
 80133d2:	4618      	mov	r0, r3
 80133d4:	3718      	adds	r7, #24
 80133d6:	46bd      	mov	sp, r7
 80133d8:	bd80      	pop	{r7, pc}
	...

080133dc <OpenThread_CallBack_Processing>:
  * @param  None
  * @retval None
  */

HAL_StatusTypeDef OpenThread_CallBack_Processing(void)
{
 80133dc:	b5b0      	push	{r4, r5, r7, lr}
 80133de:	b084      	sub	sp, #16
 80133e0:	af02      	add	r7, sp, #8
    HAL_StatusTypeDef status = HAL_OK;
 80133e2:	2300      	movs	r3, #0
 80133e4:	71fb      	strb	r3, [r7, #7]

    /* Get pointer on received event buffer from M0 */
    Thread_OT_Cmd_Request_t* p_notification = THREAD_Get_NotificationPayloadBuffer();
 80133e6:	f001 fe93 	bl	8015110 <THREAD_Get_NotificationPayloadBuffer>
 80133ea:	6038      	str	r0, [r7, #0]

    switch(p_notification->ID)
 80133ec:	683b      	ldr	r3, [r7, #0]
 80133ee:	681b      	ldr	r3, [r3, #0]
 80133f0:	3b01      	subs	r3, #1
 80133f2:	2b14      	cmp	r3, #20
 80133f4:	f200 8172 	bhi.w	80136dc <OpenThread_CallBack_Processing+0x300>
 80133f8:	a201      	add	r2, pc, #4	; (adr r2, 8013400 <OpenThread_CallBack_Processing+0x24>)
 80133fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80133fe:	bf00      	nop
 8013400:	08013455 	.word	0x08013455
 8013404:	08013471 	.word	0x08013471
 8013408:	0801349d 	.word	0x0801349d
 801340c:	080134d1 	.word	0x080134d1
 8013410:	080134dd 	.word	0x080134dd
 8013414:	080134fb 	.word	0x080134fb
 8013418:	08013519 	.word	0x08013519
 801341c:	08013537 	.word	0x08013537
 8013420:	08013555 	.word	0x08013555
 8013424:	08013573 	.word	0x08013573
 8013428:	08013595 	.word	0x08013595
 801342c:	080135b3 	.word	0x080135b3
 8013430:	080136dd 	.word	0x080136dd
 8013434:	080135d9 	.word	0x080135d9
 8013438:	0801360d 	.word	0x0801360d
 801343c:	08013635 	.word	0x08013635
 8013440:	08013653 	.word	0x08013653
 8013444:	08013677 	.word	0x08013677
 8013448:	0801369f 	.word	0x0801369f
 801344c:	080136dd 	.word	0x080136dd
 8013450:	080136bd 	.word	0x080136bd
    {
    case MSG_M0TOM4_NOTIFY_STATE_CHANGE:
        if (otStateChangedCb != NULL)
 8013454:	4ba3      	ldr	r3, [pc, #652]	; (80136e4 <OpenThread_CallBack_Processing+0x308>)
 8013456:	681b      	ldr	r3, [r3, #0]
 8013458:	2b00      	cmp	r3, #0
 801345a:	f000 8167 	beq.w	801372c <OpenThread_CallBack_Processing+0x350>
        {
            otStateChangedCb((uint32_t) p_notification->Data[0],
 801345e:	4ba1      	ldr	r3, [pc, #644]	; (80136e4 <OpenThread_CallBack_Processing+0x308>)
 8013460:	681b      	ldr	r3, [r3, #0]
 8013462:	683a      	ldr	r2, [r7, #0]
 8013464:	6890      	ldr	r0, [r2, #8]
                    (void*) p_notification->Data[1]);
 8013466:	683a      	ldr	r2, [r7, #0]
 8013468:	68d2      	ldr	r2, [r2, #12]
            otStateChangedCb((uint32_t) p_notification->Data[0],
 801346a:	4611      	mov	r1, r2
 801346c:	4798      	blx	r3
        }
        break;
 801346e:	e15d      	b.n	801372c <OpenThread_CallBack_Processing+0x350>
    case MSG_M0TOM4_COAP_REQUEST_HANDLER:
        coapRequestHandlerCb = (CoapRequestHandlerCallback) p_notification->Data[0];
 8013470:	683b      	ldr	r3, [r7, #0]
 8013472:	689b      	ldr	r3, [r3, #8]
 8013474:	461a      	mov	r2, r3
 8013476:	4b9c      	ldr	r3, [pc, #624]	; (80136e8 <OpenThread_CallBack_Processing+0x30c>)
 8013478:	601a      	str	r2, [r3, #0]

        if (coapRequestHandlerCb != NULL)
 801347a:	4b9b      	ldr	r3, [pc, #620]	; (80136e8 <OpenThread_CallBack_Processing+0x30c>)
 801347c:	681b      	ldr	r3, [r3, #0]
 801347e:	2b00      	cmp	r3, #0
 8013480:	f000 8156 	beq.w	8013730 <OpenThread_CallBack_Processing+0x354>
        {
            coapRequestHandlerCb( (otCoapHeader *) p_notification->Data[1],
 8013484:	4b98      	ldr	r3, [pc, #608]	; (80136e8 <OpenThread_CallBack_Processing+0x30c>)
 8013486:	681b      	ldr	r3, [r3, #0]
 8013488:	683a      	ldr	r2, [r7, #0]
 801348a:	68d2      	ldr	r2, [r2, #12]
 801348c:	4610      	mov	r0, r2
                    (otMessage *) p_notification->Data[2],
 801348e:	683a      	ldr	r2, [r7, #0]
 8013490:	6912      	ldr	r2, [r2, #16]
            coapRequestHandlerCb( (otCoapHeader *) p_notification->Data[1],
 8013492:	4611      	mov	r1, r2
                    (otMessageInfo *) p_notification->Data[3]);
 8013494:	683a      	ldr	r2, [r7, #0]
 8013496:	6952      	ldr	r2, [r2, #20]
            coapRequestHandlerCb( (otCoapHeader *) p_notification->Data[1],
 8013498:	4798      	blx	r3
        }
        break;
 801349a:	e149      	b.n	8013730 <OpenThread_CallBack_Processing+0x354>
    case MSG_M0TOM4_COAP_RESPONSE_HANDLER:
        coapResponseHandlerCb = (CoapResponseHandlerCallback) p_notification->Data[0];
 801349c:	683b      	ldr	r3, [r7, #0]
 801349e:	689b      	ldr	r3, [r3, #8]
 80134a0:	461a      	mov	r2, r3
 80134a2:	4b92      	ldr	r3, [pc, #584]	; (80136ec <OpenThread_CallBack_Processing+0x310>)
 80134a4:	601a      	str	r2, [r3, #0]
        if (coapResponseHandlerCb != NULL)
 80134a6:	4b91      	ldr	r3, [pc, #580]	; (80136ec <OpenThread_CallBack_Processing+0x310>)
 80134a8:	681b      	ldr	r3, [r3, #0]
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	f000 8142 	beq.w	8013734 <OpenThread_CallBack_Processing+0x358>
        {
            coapResponseHandlerCb( (otCoapHeader *) p_notification->Data[1],
 80134b0:	4b8e      	ldr	r3, [pc, #568]	; (80136ec <OpenThread_CallBack_Processing+0x310>)
 80134b2:	681c      	ldr	r4, [r3, #0]
 80134b4:	683b      	ldr	r3, [r7, #0]
 80134b6:	68db      	ldr	r3, [r3, #12]
 80134b8:	4618      	mov	r0, r3
                    (otMessage *) p_notification->Data[2],
 80134ba:	683b      	ldr	r3, [r7, #0]
 80134bc:	691b      	ldr	r3, [r3, #16]
            coapResponseHandlerCb( (otCoapHeader *) p_notification->Data[1],
 80134be:	4619      	mov	r1, r3
                    (otMessageInfo *) p_notification->Data[3],
 80134c0:	683b      	ldr	r3, [r7, #0]
 80134c2:	695b      	ldr	r3, [r3, #20]
            coapResponseHandlerCb( (otCoapHeader *) p_notification->Data[1],
 80134c4:	461a      	mov	r2, r3
                    (otError) p_notification->Data[4]);
 80134c6:	683b      	ldr	r3, [r7, #0]
 80134c8:	699b      	ldr	r3, [r3, #24]
            coapResponseHandlerCb( (otCoapHeader *) p_notification->Data[1],
 80134ca:	b2db      	uxtb	r3, r3
 80134cc:	47a0      	blx	r4
        }
        break;
 80134ce:	e131      	b.n	8013734 <OpenThread_CallBack_Processing+0x358>
    case MSG_M0TOM4_NOTIFY_STACK_RESET:
        /* Store Thread NVM data in Flash*/
        SHCI_C2_FLASH_StoreData(THREAD_IP);
 80134d0:	2001      	movs	r0, #1
 80134d2:	f000 f99b 	bl	801380c <SHCI_C2_FLASH_StoreData>
        /* Perform an NVIC Reset in order to reinitalize the device */
        HAL_NVIC_SystemReset();
 80134d6:	f7f4 fed0 	bl	800827a <HAL_NVIC_SystemReset>
        break;
 80134da:	e14a      	b.n	8013772 <OpenThread_CallBack_Processing+0x396>
    case MSG_M0TOM4_IP6_RECEIVE:
        if (otIp6ReceiveCb != NULL)
 80134dc:	4b84      	ldr	r3, [pc, #528]	; (80136f0 <OpenThread_CallBack_Processing+0x314>)
 80134de:	681b      	ldr	r3, [r3, #0]
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	f000 8129 	beq.w	8013738 <OpenThread_CallBack_Processing+0x35c>
        {
            otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 80134e6:	4b82      	ldr	r3, [pc, #520]	; (80136f0 <OpenThread_CallBack_Processing+0x314>)
 80134e8:	681b      	ldr	r3, [r3, #0]
 80134ea:	683a      	ldr	r2, [r7, #0]
 80134ec:	6892      	ldr	r2, [r2, #8]
 80134ee:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 80134f0:	683a      	ldr	r2, [r7, #0]
 80134f2:	68d2      	ldr	r2, [r2, #12]
            otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 80134f4:	4611      	mov	r1, r2
 80134f6:	4798      	blx	r3
        }
        break;
 80134f8:	e11e      	b.n	8013738 <OpenThread_CallBack_Processing+0x35c>
    case MSG_M0TOM4_IP6_SLAAC_IID_CREATE:
        if (aIidCreateCb != NULL)
 80134fa:	4b7e      	ldr	r3, [pc, #504]	; (80136f4 <OpenThread_CallBack_Processing+0x318>)
 80134fc:	681b      	ldr	r3, [r3, #0]
 80134fe:	2b00      	cmp	r3, #0
 8013500:	f000 811c 	beq.w	801373c <OpenThread_CallBack_Processing+0x360>
        {
            /* Not passing otInstance as first parameter, because created on M0, passing NULL instead */
            aIidCreateCb(NULL, (otNetifAddress*) p_notification->Data[0],
 8013504:	4b7b      	ldr	r3, [pc, #492]	; (80136f4 <OpenThread_CallBack_Processing+0x318>)
 8013506:	681b      	ldr	r3, [r3, #0]
 8013508:	683a      	ldr	r2, [r7, #0]
 801350a:	6892      	ldr	r2, [r2, #8]
 801350c:	4611      	mov	r1, r2
                    (void*) p_notification->Data[1]);
 801350e:	683a      	ldr	r2, [r7, #0]
 8013510:	68d2      	ldr	r2, [r2, #12]
            aIidCreateCb(NULL, (otNetifAddress*) p_notification->Data[0],
 8013512:	2000      	movs	r0, #0
 8013514:	4798      	blx	r3
        }
        break;
 8013516:	e111      	b.n	801373c <OpenThread_CallBack_Processing+0x360>
    case MSG_M0TOM4_HANDLE_ACTIVE_SCAN_RESULT:
        if (otHandleActiveScanResultCb != NULL)
 8013518:	4b77      	ldr	r3, [pc, #476]	; (80136f8 <OpenThread_CallBack_Processing+0x31c>)
 801351a:	681b      	ldr	r3, [r3, #0]
 801351c:	2b00      	cmp	r3, #0
 801351e:	f000 810f 	beq.w	8013740 <OpenThread_CallBack_Processing+0x364>
        {
            otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 8013522:	4b75      	ldr	r3, [pc, #468]	; (80136f8 <OpenThread_CallBack_Processing+0x31c>)
 8013524:	681b      	ldr	r3, [r3, #0]
 8013526:	683a      	ldr	r2, [r7, #0]
 8013528:	6892      	ldr	r2, [r2, #8]
 801352a:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 801352c:	683a      	ldr	r2, [r7, #0]
 801352e:	68d2      	ldr	r2, [r2, #12]
            otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 8013530:	4611      	mov	r1, r2
 8013532:	4798      	blx	r3
        }
        break;
 8013534:	e104      	b.n	8013740 <OpenThread_CallBack_Processing+0x364>
    case MSG_M0TOM4_HANDLE_ENERGY_SCAN_RESULT:
        if (otHandleEnergyScanResultCb != NULL)
 8013536:	4b71      	ldr	r3, [pc, #452]	; (80136fc <OpenThread_CallBack_Processing+0x320>)
 8013538:	681b      	ldr	r3, [r3, #0]
 801353a:	2b00      	cmp	r3, #0
 801353c:	f000 8102 	beq.w	8013744 <OpenThread_CallBack_Processing+0x368>
        {
            otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 8013540:	4b6e      	ldr	r3, [pc, #440]	; (80136fc <OpenThread_CallBack_Processing+0x320>)
 8013542:	681b      	ldr	r3, [r3, #0]
 8013544:	683a      	ldr	r2, [r7, #0]
 8013546:	6892      	ldr	r2, [r2, #8]
 8013548:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 801354a:	683a      	ldr	r2, [r7, #0]
 801354c:	68d2      	ldr	r2, [r2, #12]
            otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 801354e:	4611      	mov	r1, r2
 8013550:	4798      	blx	r3
        }
        break;
 8013552:	e0f7      	b.n	8013744 <OpenThread_CallBack_Processing+0x368>
    case MSG_M0TOM4_HANDLE_LINK_PCAP:
        if (otLinkPcapCb != NULL)
 8013554:	4b6a      	ldr	r3, [pc, #424]	; (8013700 <OpenThread_CallBack_Processing+0x324>)
 8013556:	681b      	ldr	r3, [r3, #0]
 8013558:	2b00      	cmp	r3, #0
 801355a:	f000 80f5 	beq.w	8013748 <OpenThread_CallBack_Processing+0x36c>
        {
            otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 801355e:	4b68      	ldr	r3, [pc, #416]	; (8013700 <OpenThread_CallBack_Processing+0x324>)
 8013560:	681b      	ldr	r3, [r3, #0]
 8013562:	683a      	ldr	r2, [r7, #0]
 8013564:	6892      	ldr	r2, [r2, #8]
 8013566:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 8013568:	683a      	ldr	r2, [r7, #0]
 801356a:	68d2      	ldr	r2, [r2, #12]
            otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 801356c:	4611      	mov	r1, r2
 801356e:	4798      	blx	r3
        }
        break;
 8013570:	e0ea      	b.n	8013748 <OpenThread_CallBack_Processing+0x36c>
    case MSG_M0TOM4_RECEIVE_DIAGNOSTIC_GET_CALLBACK:
        if (otReceiveDiagnosticGetCb != NULL)
 8013572:	4b64      	ldr	r3, [pc, #400]	; (8013704 <OpenThread_CallBack_Processing+0x328>)
 8013574:	681b      	ldr	r3, [r3, #0]
 8013576:	2b00      	cmp	r3, #0
 8013578:	f000 80e8 	beq.w	801374c <OpenThread_CallBack_Processing+0x370>
        {
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 801357c:	4b61      	ldr	r3, [pc, #388]	; (8013704 <OpenThread_CallBack_Processing+0x328>)
 801357e:	681b      	ldr	r3, [r3, #0]
 8013580:	683a      	ldr	r2, [r7, #0]
 8013582:	6892      	ldr	r2, [r2, #8]
 8013584:	4610      	mov	r0, r2
                    (otMessageInfo*) p_notification->Data[1],
 8013586:	683a      	ldr	r2, [r7, #0]
 8013588:	68d2      	ldr	r2, [r2, #12]
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 801358a:	4611      	mov	r1, r2
                    (void*) p_notification->Data[2]);
 801358c:	683a      	ldr	r2, [r7, #0]
 801358e:	6912      	ldr	r2, [r2, #16]
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 8013590:	4798      	blx	r3
        }
        break;
 8013592:	e0db      	b.n	801374c <OpenThread_CallBack_Processing+0x370>
#if OPENTHREAD_FTD
    case MSG_M0TOM4_THREAD_FTD_CHILD_TABLE_CALLBACK:
        if (otThreadChildTableCallbackCb != NULL)
 8013594:	4b5c      	ldr	r3, [pc, #368]	; (8013708 <OpenThread_CallBack_Processing+0x32c>)
 8013596:	681b      	ldr	r3, [r3, #0]
 8013598:	2b00      	cmp	r3, #0
 801359a:	f000 80d9 	beq.w	8013750 <OpenThread_CallBack_Processing+0x374>
        {
            otThreadChildTableCallbackCb((otThreadChildTableEvent) p_notification->Data[0],
 801359e:	4b5a      	ldr	r3, [pc, #360]	; (8013708 <OpenThread_CallBack_Processing+0x32c>)
 80135a0:	681b      	ldr	r3, [r3, #0]
 80135a2:	683a      	ldr	r2, [r7, #0]
 80135a4:	6892      	ldr	r2, [r2, #8]
 80135a6:	b2d0      	uxtb	r0, r2
                    (const otChildInfo *) p_notification->Data[1]);
 80135a8:	683a      	ldr	r2, [r7, #0]
 80135aa:	68d2      	ldr	r2, [r2, #12]
            otThreadChildTableCallbackCb((otThreadChildTableEvent) p_notification->Data[0],
 80135ac:	4611      	mov	r1, r2
 80135ae:	4798      	blx	r3
        }
        break;
 80135b0:	e0ce      	b.n	8013750 <OpenThread_CallBack_Processing+0x374>
#endif
    case MSG_M0TOM4_COMMISSIONER_ENERGY_REPORT_CALLBACK:
        if (otCommissionerEnergyReportCb != NULL)
 80135b2:	4b56      	ldr	r3, [pc, #344]	; (801370c <OpenThread_CallBack_Processing+0x330>)
 80135b4:	681b      	ldr	r3, [r3, #0]
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	f000 80cc 	beq.w	8013754 <OpenThread_CallBack_Processing+0x378>
        {
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 80135bc:	4b53      	ldr	r3, [pc, #332]	; (801370c <OpenThread_CallBack_Processing+0x330>)
 80135be:	681c      	ldr	r4, [r3, #0]
 80135c0:	683b      	ldr	r3, [r7, #0]
 80135c2:	6898      	ldr	r0, [r3, #8]
                    (uint8_t*) p_notification->Data[1],
 80135c4:	683b      	ldr	r3, [r7, #0]
 80135c6:	68db      	ldr	r3, [r3, #12]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 80135c8:	4619      	mov	r1, r3
                    (uint8_t) p_notification->Data[2],
 80135ca:	683b      	ldr	r3, [r7, #0]
 80135cc:	691b      	ldr	r3, [r3, #16]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 80135ce:	b2da      	uxtb	r2, r3
                    (void*) p_notification->Data[3]);
 80135d0:	683b      	ldr	r3, [r7, #0]
 80135d2:	695b      	ldr	r3, [r3, #20]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 80135d4:	47a0      	blx	r4
        }
        break;
 80135d6:	e0bd      	b.n	8013754 <OpenThread_CallBack_Processing+0x378>
    case MSG_M0TOM4_DNS_RESPONSE_HANDLER:
        if (otDnsResponseHandlerCb != NULL)
 80135d8:	4b4d      	ldr	r3, [pc, #308]	; (8013710 <OpenThread_CallBack_Processing+0x334>)
 80135da:	681b      	ldr	r3, [r3, #0]
 80135dc:	2b00      	cmp	r3, #0
 80135de:	f000 80bb 	beq.w	8013758 <OpenThread_CallBack_Processing+0x37c>
        {
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 80135e2:	4b4b      	ldr	r3, [pc, #300]	; (8013710 <OpenThread_CallBack_Processing+0x334>)
 80135e4:	681c      	ldr	r4, [r3, #0]
 80135e6:	683b      	ldr	r3, [r7, #0]
 80135e8:	689b      	ldr	r3, [r3, #8]
 80135ea:	4618      	mov	r0, r3
                    (char*) p_notification->Data[1],
 80135ec:	683b      	ldr	r3, [r7, #0]
 80135ee:	68db      	ldr	r3, [r3, #12]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 80135f0:	4619      	mov	r1, r3
                    (otIp6Address*) p_notification->Data[2],
 80135f2:	683b      	ldr	r3, [r7, #0]
 80135f4:	691b      	ldr	r3, [r3, #16]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 80135f6:	461d      	mov	r5, r3
                    (uint32_t) p_notification->Data[3],
 80135f8:	683b      	ldr	r3, [r7, #0]
 80135fa:	695a      	ldr	r2, [r3, #20]
                    (otError) p_notification->Data[4]);
 80135fc:	683b      	ldr	r3, [r7, #0]
 80135fe:	699b      	ldr	r3, [r3, #24]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 8013600:	b2db      	uxtb	r3, r3
 8013602:	9300      	str	r3, [sp, #0]
 8013604:	4613      	mov	r3, r2
 8013606:	462a      	mov	r2, r5
 8013608:	47a0      	blx	r4
        }
        break;
 801360a:	e0a5      	b.n	8013758 <OpenThread_CallBack_Processing+0x37c>
    case MSG_M0TOM4_ICMP6_RECEIVE_CALLBACK:
        if (otIcmp6ReceiveCb != NULL)
 801360c:	4b41      	ldr	r3, [pc, #260]	; (8013714 <OpenThread_CallBack_Processing+0x338>)
 801360e:	681b      	ldr	r3, [r3, #0]
 8013610:	2b00      	cmp	r3, #0
 8013612:	f000 80a3 	beq.w	801375c <OpenThread_CallBack_Processing+0x380>
        {
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 8013616:	4b3f      	ldr	r3, [pc, #252]	; (8013714 <OpenThread_CallBack_Processing+0x338>)
 8013618:	681c      	ldr	r4, [r3, #0]
 801361a:	683b      	ldr	r3, [r7, #0]
 801361c:	689b      	ldr	r3, [r3, #8]
 801361e:	4618      	mov	r0, r3
                    (otMessage*) p_notification->Data[1],
 8013620:	683b      	ldr	r3, [r7, #0]
 8013622:	68db      	ldr	r3, [r3, #12]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 8013624:	4619      	mov	r1, r3
                    (otMessageInfo*) p_notification->Data[2],
 8013626:	683b      	ldr	r3, [r7, #0]
 8013628:	691b      	ldr	r3, [r3, #16]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 801362a:	461a      	mov	r2, r3
                    (otIcmp6Header*) p_notification->Data[3]);
 801362c:	683b      	ldr	r3, [r7, #0]
 801362e:	695b      	ldr	r3, [r3, #20]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 8013630:	47a0      	blx	r4
        }
        break;
 8013632:	e093      	b.n	801375c <OpenThread_CallBack_Processing+0x380>
    case MSG_M0TOM4_JOINER_CALLBACK:
        if (otJoinerCb != NULL)
 8013634:	4b38      	ldr	r3, [pc, #224]	; (8013718 <OpenThread_CallBack_Processing+0x33c>)
 8013636:	681b      	ldr	r3, [r3, #0]
 8013638:	2b00      	cmp	r3, #0
 801363a:	f000 8091 	beq.w	8013760 <OpenThread_CallBack_Processing+0x384>
        {
            otJoinerCb((otError) p_notification->Data[0],
 801363e:	4b36      	ldr	r3, [pc, #216]	; (8013718 <OpenThread_CallBack_Processing+0x33c>)
 8013640:	681b      	ldr	r3, [r3, #0]
 8013642:	683a      	ldr	r2, [r7, #0]
 8013644:	6892      	ldr	r2, [r2, #8]
 8013646:	b2d0      	uxtb	r0, r2
                    (void*) p_notification->Data[1]);
 8013648:	683a      	ldr	r2, [r7, #0]
 801364a:	68d2      	ldr	r2, [r2, #12]
            otJoinerCb((otError) p_notification->Data[0],
 801364c:	4611      	mov	r1, r2
 801364e:	4798      	blx	r3
        }
        break;
 8013650:	e086      	b.n	8013760 <OpenThread_CallBack_Processing+0x384>
    case MSG_M0TOM4_LINK_RAW_RECEIVE_DONE:
        if (otLinkRawReceiveDoneCb != NULL)
 8013652:	4b32      	ldr	r3, [pc, #200]	; (801371c <OpenThread_CallBack_Processing+0x340>)
 8013654:	681b      	ldr	r3, [r3, #0]
 8013656:	2b00      	cmp	r3, #0
 8013658:	f000 8084 	beq.w	8013764 <OpenThread_CallBack_Processing+0x388>
        {
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 801365c:	4b2f      	ldr	r3, [pc, #188]	; (801371c <OpenThread_CallBack_Processing+0x340>)
 801365e:	681b      	ldr	r3, [r3, #0]
 8013660:	683a      	ldr	r2, [r7, #0]
 8013662:	6892      	ldr	r2, [r2, #8]
 8013664:	4610      	mov	r0, r2
                    (otRadioFrame*) p_notification->Data[1],
 8013666:	683a      	ldr	r2, [r7, #0]
 8013668:	68d2      	ldr	r2, [r2, #12]
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 801366a:	4611      	mov	r1, r2
                    (otError) p_notification->Data[2]);
 801366c:	683a      	ldr	r2, [r7, #0]
 801366e:	6912      	ldr	r2, [r2, #16]
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 8013670:	b2d2      	uxtb	r2, r2
 8013672:	4798      	blx	r3
        }
        break;
 8013674:	e076      	b.n	8013764 <OpenThread_CallBack_Processing+0x388>
    case MSG_M0TOM4_LINK_RAW_TRANSMIT_DONE:
        if (otLinkRawTransmitDoneCb != NULL)
 8013676:	4b2a      	ldr	r3, [pc, #168]	; (8013720 <OpenThread_CallBack_Processing+0x344>)
 8013678:	681b      	ldr	r3, [r3, #0]
 801367a:	2b00      	cmp	r3, #0
 801367c:	d074      	beq.n	8013768 <OpenThread_CallBack_Processing+0x38c>
        {
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 801367e:	4b28      	ldr	r3, [pc, #160]	; (8013720 <OpenThread_CallBack_Processing+0x344>)
 8013680:	681c      	ldr	r4, [r3, #0]
 8013682:	683b      	ldr	r3, [r7, #0]
 8013684:	689b      	ldr	r3, [r3, #8]
 8013686:	4618      	mov	r0, r3
                    (otRadioFrame*) p_notification->Data[1],
 8013688:	683b      	ldr	r3, [r7, #0]
 801368a:	68db      	ldr	r3, [r3, #12]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 801368c:	4619      	mov	r1, r3
                    (otRadioFrame*) p_notification->Data[2],
 801368e:	683b      	ldr	r3, [r7, #0]
 8013690:	691b      	ldr	r3, [r3, #16]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 8013692:	461a      	mov	r2, r3
                    (otError) p_notification->Data[3]);
 8013694:	683b      	ldr	r3, [r7, #0]
 8013696:	695b      	ldr	r3, [r3, #20]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 8013698:	b2db      	uxtb	r3, r3
 801369a:	47a0      	blx	r4
        }
        break;
 801369c:	e064      	b.n	8013768 <OpenThread_CallBack_Processing+0x38c>
    case MSG_M0TOM4_LINK_RAW_ENERGY_SCAN_DONE:
        if (otLinkRawEnergyScanDoneCb != NULL)
 801369e:	4b21      	ldr	r3, [pc, #132]	; (8013724 <OpenThread_CallBack_Processing+0x348>)
 80136a0:	681b      	ldr	r3, [r3, #0]
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d062      	beq.n	801376c <OpenThread_CallBack_Processing+0x390>
        {
            otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 80136a6:	4b1f      	ldr	r3, [pc, #124]	; (8013724 <OpenThread_CallBack_Processing+0x348>)
 80136a8:	681b      	ldr	r3, [r3, #0]
 80136aa:	683a      	ldr	r2, [r7, #0]
 80136ac:	6892      	ldr	r2, [r2, #8]
 80136ae:	4610      	mov	r0, r2
                    (int8_t) p_notification->Data[1]);
 80136b0:	683a      	ldr	r2, [r7, #0]
 80136b2:	68d2      	ldr	r2, [r2, #12]
            otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 80136b4:	b252      	sxtb	r2, r2
 80136b6:	4611      	mov	r1, r2
 80136b8:	4798      	blx	r3
        }
        break;
 80136ba:	e057      	b.n	801376c <OpenThread_CallBack_Processing+0x390>
    case MSG_M0TOM4_UDP_RECEIVE:
        if (otUdpReceiveCb != NULL)
 80136bc:	4b1a      	ldr	r3, [pc, #104]	; (8013728 <OpenThread_CallBack_Processing+0x34c>)
 80136be:	681b      	ldr	r3, [r3, #0]
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d055      	beq.n	8013770 <OpenThread_CallBack_Processing+0x394>
        {
            otUdpReceiveCb((void*) p_notification->Data[0],
 80136c4:	4b18      	ldr	r3, [pc, #96]	; (8013728 <OpenThread_CallBack_Processing+0x34c>)
 80136c6:	681b      	ldr	r3, [r3, #0]
 80136c8:	683a      	ldr	r2, [r7, #0]
 80136ca:	6892      	ldr	r2, [r2, #8]
 80136cc:	4610      	mov	r0, r2
                    (otMessage*) p_notification->Data[1],
 80136ce:	683a      	ldr	r2, [r7, #0]
 80136d0:	68d2      	ldr	r2, [r2, #12]
            otUdpReceiveCb((void*) p_notification->Data[0],
 80136d2:	4611      	mov	r1, r2
                    (otMessageInfo*) p_notification->Data[2]);
 80136d4:	683a      	ldr	r2, [r7, #0]
 80136d6:	6912      	ldr	r2, [r2, #16]
            otUdpReceiveCb((void*) p_notification->Data[0],
 80136d8:	4798      	blx	r3
        }
        break;
 80136da:	e049      	b.n	8013770 <OpenThread_CallBack_Processing+0x394>
                    (void *) p_notification->Data[1]);
        }
        break;
#endif
    default:
        status = HAL_ERROR;
 80136dc:	2301      	movs	r3, #1
 80136de:	71fb      	strb	r3, [r7, #7]
        break;
 80136e0:	e047      	b.n	8013772 <OpenThread_CallBack_Processing+0x396>
 80136e2:	bf00      	nop
 80136e4:	20027434 	.word	0x20027434
 80136e8:	20027474 	.word	0x20027474
 80136ec:	20027478 	.word	0x20027478
 80136f0:	2002743c 	.word	0x2002743c
 80136f4:	20027438 	.word	0x20027438
 80136f8:	20027440 	.word	0x20027440
 80136fc:	20027444 	.word	0x20027444
 8013700:	20027448 	.word	0x20027448
 8013704:	2002744c 	.word	0x2002744c
 8013708:	20027450 	.word	0x20027450
 801370c:	20027454 	.word	0x20027454
 8013710:	20027458 	.word	0x20027458
 8013714:	2002745c 	.word	0x2002745c
 8013718:	20027460 	.word	0x20027460
 801371c:	20027464 	.word	0x20027464
 8013720:	20027468 	.word	0x20027468
 8013724:	2002746c 	.word	0x2002746c
 8013728:	20027470 	.word	0x20027470
        break;
 801372c:	bf00      	nop
 801372e:	e020      	b.n	8013772 <OpenThread_CallBack_Processing+0x396>
        break;
 8013730:	bf00      	nop
 8013732:	e01e      	b.n	8013772 <OpenThread_CallBack_Processing+0x396>
        break;
 8013734:	bf00      	nop
 8013736:	e01c      	b.n	8013772 <OpenThread_CallBack_Processing+0x396>
        break;
 8013738:	bf00      	nop
 801373a:	e01a      	b.n	8013772 <OpenThread_CallBack_Processing+0x396>
        break;
 801373c:	bf00      	nop
 801373e:	e018      	b.n	8013772 <OpenThread_CallBack_Processing+0x396>
        break;
 8013740:	bf00      	nop
 8013742:	e016      	b.n	8013772 <OpenThread_CallBack_Processing+0x396>
        break;
 8013744:	bf00      	nop
 8013746:	e014      	b.n	8013772 <OpenThread_CallBack_Processing+0x396>
        break;
 8013748:	bf00      	nop
 801374a:	e012      	b.n	8013772 <OpenThread_CallBack_Processing+0x396>
        break;
 801374c:	bf00      	nop
 801374e:	e010      	b.n	8013772 <OpenThread_CallBack_Processing+0x396>
        break;
 8013750:	bf00      	nop
 8013752:	e00e      	b.n	8013772 <OpenThread_CallBack_Processing+0x396>
        break;
 8013754:	bf00      	nop
 8013756:	e00c      	b.n	8013772 <OpenThread_CallBack_Processing+0x396>
        break;
 8013758:	bf00      	nop
 801375a:	e00a      	b.n	8013772 <OpenThread_CallBack_Processing+0x396>
        break;
 801375c:	bf00      	nop
 801375e:	e008      	b.n	8013772 <OpenThread_CallBack_Processing+0x396>
        break;
 8013760:	bf00      	nop
 8013762:	e006      	b.n	8013772 <OpenThread_CallBack_Processing+0x396>
        break;
 8013764:	bf00      	nop
 8013766:	e004      	b.n	8013772 <OpenThread_CallBack_Processing+0x396>
        break;
 8013768:	bf00      	nop
 801376a:	e002      	b.n	8013772 <OpenThread_CallBack_Processing+0x396>
        break;
 801376c:	bf00      	nop
 801376e:	e000      	b.n	8013772 <OpenThread_CallBack_Processing+0x396>
        break;
 8013770:	bf00      	nop
    }

    TL_THREAD_SendAck();
 8013772:	f000 fcc1 	bl	80140f8 <TL_THREAD_SendAck>
    return status;
 8013776:	79fb      	ldrb	r3, [r7, #7]

}
 8013778:	4618      	mov	r0, r3
 801377a:	3708      	adds	r7, #8
 801377c:	46bd      	mov	sp, r7
 801377e:	bdb0      	pop	{r4, r5, r7, pc}

08013780 <otPlatRadioSetTransmitPower>:
 * @retval OT_ERROR_NONE             Successfully set the transmit power.
 * @retval OT_ERROR_NOT_IMPLEMENTED  Transmit power configuration via dBm is not implemented.
 *
 */
otError otPlatRadioSetTransmitPower(otInstance *aInstance, int8_t aPower)
{
 8013780:	b580      	push	{r7, lr}
 8013782:	b084      	sub	sp, #16
 8013784:	af00      	add	r7, sp, #0
 8013786:	6078      	str	r0, [r7, #4]
 8013788:	460b      	mov	r3, r1
 801378a:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 801378c:	f001 fd0a 	bl	80151a4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013790:	f001 fca6 	bl	80150e0 <THREAD_Get_OTCmdPayloadBuffer>
 8013794:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_RADIO_SET_TRANSMIT_POWER;
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	2200      	movs	r2, #0
 801379a:	f042 024d 	orr.w	r2, r2, #77	; 0x4d
 801379e:	701a      	strb	r2, [r3, #0]
 80137a0:	2200      	movs	r2, #0
 80137a2:	f042 0201 	orr.w	r2, r2, #1
 80137a6:	705a      	strb	r2, [r3, #1]
 80137a8:	2200      	movs	r2, #0
 80137aa:	709a      	strb	r2, [r3, #2]
 80137ac:	2200      	movs	r2, #0
 80137ae:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 80137b0:	68fb      	ldr	r3, [r7, #12]
 80137b2:	2200      	movs	r2, #0
 80137b4:	f042 0201 	orr.w	r2, r2, #1
 80137b8:	711a      	strb	r2, [r3, #4]
 80137ba:	2200      	movs	r2, #0
 80137bc:	715a      	strb	r2, [r3, #5]
 80137be:	2200      	movs	r2, #0
 80137c0:	719a      	strb	r2, [r3, #6]
 80137c2:	2200      	movs	r2, #0
 80137c4:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aPower;
 80137c6:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80137ca:	68fb      	ldr	r3, [r7, #12]
 80137cc:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 80137ce:	f001 fcab 	bl	8015128 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80137d2:	f001 fc91 	bl	80150f8 <THREAD_Get_OTCmdRspPayloadBuffer>
 80137d6:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 80137d8:	68fb      	ldr	r3, [r7, #12]
 80137da:	689b      	ldr	r3, [r3, #8]
 80137dc:	b2db      	uxtb	r3, r3
}
 80137de:	4618      	mov	r0, r3
 80137e0:	3710      	adds	r7, #16
 80137e2:	46bd      	mov	sp, r7
 80137e4:	bd80      	pop	{r7, pc}

080137e6 <SHCI_C2_THREAD_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_THREAD_Init( void )
{
 80137e6:	b580      	push	{r7, lr}
 80137e8:	b086      	sub	sp, #24
 80137ea:	af00      	add	r7, sp, #0
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80137ec:	1d3b      	adds	r3, r7, #4
 80137ee:	617b      	str	r3, [r7, #20]

  shci_send( SHCI_OPCODE_C2_THREAD_INIT,
 80137f0:	697b      	ldr	r3, [r7, #20]
 80137f2:	2200      	movs	r2, #0
 80137f4:	2100      	movs	r1, #0
 80137f6:	f64f 4067 	movw	r0, #64615	; 0xfc67
 80137fa:	f000 f915 	bl	8013a28 <shci_send>
             0,
             0,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80137fe:	697b      	ldr	r3, [r7, #20]
 8013800:	330b      	adds	r3, #11
 8013802:	78db      	ldrb	r3, [r3, #3]
}
 8013804:	4618      	mov	r0, r3
 8013806:	3718      	adds	r7, #24
 8013808:	46bd      	mov	sp, r7
 801380a:	bd80      	pop	{r7, pc}

0801380c <SHCI_C2_FLASH_StoreData>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_FLASH_StoreData( SHCI_C2_FLASH_Ip_t Ip )
{
 801380c:	b580      	push	{r7, lr}
 801380e:	b088      	sub	sp, #32
 8013810:	af00      	add	r7, sp, #0
 8013812:	4603      	mov	r3, r0
 8013814:	71fb      	strb	r3, [r7, #7]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8013816:	f107 030c 	add.w	r3, r7, #12
 801381a:	61fb      	str	r3, [r7, #28]

  local_buffer[0] = Ip;
 801381c:	79fb      	ldrb	r3, [r7, #7]
 801381e:	733b      	strb	r3, [r7, #12]

  shci_send( SHCI_OPCODE_C2_FLASH_STORE_DATA,
 8013820:	f107 020c 	add.w	r2, r7, #12
 8013824:	69fb      	ldr	r3, [r7, #28]
 8013826:	2101      	movs	r1, #1
 8013828:	f64f 406b 	movw	r0, #64619	; 0xfc6b
 801382c:	f000 f8fc 	bl	8013a28 <shci_send>
             1,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8013830:	69fb      	ldr	r3, [r7, #28]
 8013832:	330b      	adds	r3, #11
 8013834:	78db      	ldrb	r3, [r3, #3]
}
 8013836:	4618      	mov	r0, r3
 8013838:	3720      	adds	r7, #32
 801383a:	46bd      	mov	sp, r7
 801383c:	bd80      	pop	{r7, pc}
	...

08013840 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8013840:	b480      	push	{r7}
 8013842:	b089      	sub	sp, #36	; 0x24
 8013844:	af00      	add	r7, sp, #0
 8013846:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8013848:	2300      	movs	r3, #0
 801384a:	61fb      	str	r3, [r7, #28]
  MB_RefTable_t * p_RefTable = NULL;
 801384c:	2300      	movs	r3, #0
 801384e:	61bb      	str	r3, [r7, #24]
  uint32_t version = 0;
 8013850:	2300      	movs	r3, #0
 8013852:	617b      	str	r3, [r7, #20]
  uint32_t memorySize = 0;
 8013854:	2300      	movs	r3, #0
 8013856:	613b      	str	r3, [r7, #16]
  uint32_t infoStack = 0;
 8013858:	2300      	movs	r3, #0
 801385a:	60fb      	str	r3, [r7, #12]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 801385c:	4b3c      	ldr	r3, [pc, #240]	; (8013950 <SHCI_GetWirelessFwInfo+0x110>)
 801385e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013860:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8013864:	61fb      	str	r3, [r7, #28]
  p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8013866:	69fb      	ldr	r3, [r7, #28]
 8013868:	009b      	lsls	r3, r3, #2
 801386a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 801386e:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8013872:	61bb      	str	r3, [r7, #24]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8013874:	69bb      	ldr	r3, [r7, #24]
 8013876:	681b      	ldr	r3, [r3, #0]
 8013878:	691b      	ldr	r3, [r3, #16]
 801387a:	617b      	str	r3, [r7, #20]
  pWirelessInfo->VersionMajor       = ((version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 801387c:	697b      	ldr	r3, [r7, #20]
 801387e:	0e1b      	lsrs	r3, r3, #24
 8013880:	b2da      	uxtb	r2, r3
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8013886:	697b      	ldr	r3, [r7, #20]
 8013888:	0c1b      	lsrs	r3, r3, #16
 801388a:	b2da      	uxtb	r2, r3
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8013890:	697b      	ldr	r3, [r7, #20]
 8013892:	0a1b      	lsrs	r3, r3, #8
 8013894:	b2da      	uxtb	r2, r3
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 801389a:	697b      	ldr	r3, [r7, #20]
 801389c:	091b      	lsrs	r3, r3, #4
 801389e:	b2db      	uxtb	r3, r3
 80138a0:	f003 030f 	and.w	r3, r3, #15
 80138a4:	b2da      	uxtb	r2, r3
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 80138aa:	697b      	ldr	r3, [r7, #20]
 80138ac:	b2db      	uxtb	r3, r3
 80138ae:	f003 030f 	and.w	r3, r3, #15
 80138b2:	b2da      	uxtb	r2, r3
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	711a      	strb	r2, [r3, #4]

  memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 80138b8:	69bb      	ldr	r3, [r7, #24]
 80138ba:	681b      	ldr	r3, [r3, #0]
 80138bc:	695b      	ldr	r3, [r3, #20]
 80138be:	613b      	str	r3, [r7, #16]
  pWirelessInfo->MemorySizeSram2B   = ((memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80138c0:	693b      	ldr	r3, [r7, #16]
 80138c2:	0e1b      	lsrs	r3, r3, #24
 80138c4:	b2da      	uxtb	r2, r3
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80138ca:	693b      	ldr	r3, [r7, #16]
 80138cc:	0c1b      	lsrs	r3, r3, #16
 80138ce:	b2da      	uxtb	r2, r3
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 80138d4:	693b      	ldr	r3, [r7, #16]
 80138d6:	0a1b      	lsrs	r3, r3, #8
 80138d8:	b2da      	uxtb	r2, r3
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80138de:	693b      	ldr	r3, [r7, #16]
 80138e0:	b2da      	uxtb	r2, r3
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	721a      	strb	r2, [r3, #8]

  infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 80138e6:	69bb      	ldr	r3, [r7, #24]
 80138e8:	681b      	ldr	r3, [r3, #0]
 80138ea:	699b      	ldr	r3, [r3, #24]
 80138ec:	60fb      	str	r3, [r7, #12]
  pWirelessInfo->StackType          = ((infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 80138ee:	68fb      	ldr	r3, [r7, #12]
 80138f0:	b2da      	uxtb	r2, r3
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 80138f6:	69bb      	ldr	r3, [r7, #24]
 80138f8:	681b      	ldr	r3, [r3, #0]
 80138fa:	685b      	ldr	r3, [r3, #4]
 80138fc:	617b      	str	r3, [r7, #20]
  pWirelessInfo->FusVersionMajor       = ((version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80138fe:	697b      	ldr	r3, [r7, #20]
 8013900:	0e1b      	lsrs	r3, r3, #24
 8013902:	b2da      	uxtb	r2, r3
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8013908:	697b      	ldr	r3, [r7, #20]
 801390a:	0c1b      	lsrs	r3, r3, #16
 801390c:	b2da      	uxtb	r2, r3
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8013912:	697b      	ldr	r3, [r7, #20]
 8013914:	0a1b      	lsrs	r3, r3, #8
 8013916:	b2da      	uxtb	r2, r3
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	731a      	strb	r2, [r3, #12]

  memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 801391c:	69bb      	ldr	r3, [r7, #24]
 801391e:	681b      	ldr	r3, [r3, #0]
 8013920:	689b      	ldr	r3, [r3, #8]
 8013922:	613b      	str	r3, [r7, #16]
  pWirelessInfo->FusMemorySizeSram2B   = ((memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8013924:	693b      	ldr	r3, [r7, #16]
 8013926:	0e1b      	lsrs	r3, r3, #24
 8013928:	b2da      	uxtb	r2, r3
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 801392e:	693b      	ldr	r3, [r7, #16]
 8013930:	0c1b      	lsrs	r3, r3, #16
 8013932:	b2da      	uxtb	r2, r3
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8013938:	693b      	ldr	r3, [r7, #16]
 801393a:	b2da      	uxtb	r2, r3
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8013940:	2300      	movs	r3, #0
}
 8013942:	4618      	mov	r0, r3
 8013944:	3724      	adds	r7, #36	; 0x24
 8013946:	46bd      	mov	sp, r7
 8013948:	f85d 7b04 	ldr.w	r7, [sp], #4
 801394c:	4770      	bx	lr
 801394e:	bf00      	nop
 8013950:	58004000 	.word	0x58004000

08013954 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8013954:	b580      	push	{r7, lr}
 8013956:	b082      	sub	sp, #8
 8013958:	af00      	add	r7, sp, #0
 801395a:	6078      	str	r0, [r7, #4]
 801395c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 801395e:	683b      	ldr	r3, [r7, #0]
 8013960:	685b      	ldr	r3, [r3, #4]
 8013962:	4a08      	ldr	r2, [pc, #32]	; (8013984 <shci_init+0x30>)
 8013964:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8013966:	4a08      	ldr	r2, [pc, #32]	; (8013988 <shci_init+0x34>)
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 801396c:	4806      	ldr	r0, [pc, #24]	; (8013988 <shci_init+0x34>)
 801396e:	f000 f911 	bl	8013b94 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8013972:	683b      	ldr	r3, [r7, #0]
 8013974:	681b      	ldr	r3, [r3, #0]
 8013976:	4618      	mov	r0, r3
 8013978:	f000 f894 	bl	8013aa4 <TlInit>

  return;
 801397c:	bf00      	nop
}
 801397e:	3708      	adds	r7, #8
 8013980:	46bd      	mov	sp, r7
 8013982:	bd80      	pop	{r7, pc}
 8013984:	2002749c 	.word	0x2002749c
 8013988:	2002747c 	.word	0x2002747c

0801398c <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 801398c:	b580      	push	{r7, lr}
 801398e:	b084      	sub	sp, #16
 8013990:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8013992:	4822      	ldr	r0, [pc, #136]	; (8013a1c <shci_user_evt_proc+0x90>)
 8013994:	f000 f922 	bl	8013bdc <LST_is_empty>
 8013998:	4603      	mov	r3, r0
 801399a:	2b00      	cmp	r3, #0
 801399c:	d12b      	bne.n	80139f6 <shci_user_evt_proc+0x6a>
 801399e:	4b20      	ldr	r3, [pc, #128]	; (8013a20 <shci_user_evt_proc+0x94>)
 80139a0:	781b      	ldrb	r3, [r3, #0]
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	d027      	beq.n	80139f6 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80139a6:	f107 030c 	add.w	r3, r7, #12
 80139aa:	4619      	mov	r1, r3
 80139ac:	481b      	ldr	r0, [pc, #108]	; (8013a1c <shci_user_evt_proc+0x90>)
 80139ae:	f000 f99c 	bl	8013cea <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 80139b2:	4b1c      	ldr	r3, [pc, #112]	; (8013a24 <shci_user_evt_proc+0x98>)
 80139b4:	69db      	ldr	r3, [r3, #28]
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	d00c      	beq.n	80139d4 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80139ba:	68fb      	ldr	r3, [r7, #12]
 80139bc:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 80139be:	2301      	movs	r3, #1
 80139c0:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 80139c2:	4b18      	ldr	r3, [pc, #96]	; (8013a24 <shci_user_evt_proc+0x98>)
 80139c4:	69db      	ldr	r3, [r3, #28]
 80139c6:	1d3a      	adds	r2, r7, #4
 80139c8:	4610      	mov	r0, r2
 80139ca:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 80139cc:	793a      	ldrb	r2, [r7, #4]
 80139ce:	4b14      	ldr	r3, [pc, #80]	; (8013a20 <shci_user_evt_proc+0x94>)
 80139d0:	701a      	strb	r2, [r3, #0]
 80139d2:	e002      	b.n	80139da <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80139d4:	4b12      	ldr	r3, [pc, #72]	; (8013a20 <shci_user_evt_proc+0x94>)
 80139d6:	2201      	movs	r2, #1
 80139d8:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 80139da:	4b11      	ldr	r3, [pc, #68]	; (8013a20 <shci_user_evt_proc+0x94>)
 80139dc:	781b      	ldrb	r3, [r3, #0]
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d004      	beq.n	80139ec <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80139e2:	68fb      	ldr	r3, [r7, #12]
 80139e4:	4618      	mov	r0, r3
 80139e6:	f000 fc03 	bl	80141f0 <TL_MM_EvtDone>
 80139ea:	e004      	b.n	80139f6 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80139ec:	68fb      	ldr	r3, [r7, #12]
 80139ee:	4619      	mov	r1, r3
 80139f0:	480a      	ldr	r0, [pc, #40]	; (8013a1c <shci_user_evt_proc+0x90>)
 80139f2:	f000 f913 	bl	8013c1c <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80139f6:	4809      	ldr	r0, [pc, #36]	; (8013a1c <shci_user_evt_proc+0x90>)
 80139f8:	f000 f8f0 	bl	8013bdc <LST_is_empty>
 80139fc:	4603      	mov	r3, r0
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	d107      	bne.n	8013a12 <shci_user_evt_proc+0x86>
 8013a02:	4b07      	ldr	r3, [pc, #28]	; (8013a20 <shci_user_evt_proc+0x94>)
 8013a04:	781b      	ldrb	r3, [r3, #0]
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	d003      	beq.n	8013a12 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8013a0a:	4804      	ldr	r0, [pc, #16]	; (8013a1c <shci_user_evt_proc+0x90>)
 8013a0c:	f7ed fbd2 	bl	80011b4 <shci_notify_asynch_evt>
  }


  return;
 8013a10:	bf00      	nop
 8013a12:	bf00      	nop
}
 8013a14:	3710      	adds	r7, #16
 8013a16:	46bd      	mov	sp, r7
 8013a18:	bd80      	pop	{r7, pc}
 8013a1a:	bf00      	nop
 8013a1c:	200001fc 	.word	0x200001fc
 8013a20:	2000020c 	.word	0x2000020c
 8013a24:	2002747c 	.word	0x2002747c

08013a28 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8013a28:	b580      	push	{r7, lr}
 8013a2a:	b084      	sub	sp, #16
 8013a2c:	af00      	add	r7, sp, #0
 8013a2e:	60ba      	str	r2, [r7, #8]
 8013a30:	607b      	str	r3, [r7, #4]
 8013a32:	4603      	mov	r3, r0
 8013a34:	81fb      	strh	r3, [r7, #14]
 8013a36:	460b      	mov	r3, r1
 8013a38:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8013a3a:	2000      	movs	r0, #0
 8013a3c:	f000 f864 	bl	8013b08 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8013a40:	4b16      	ldr	r3, [pc, #88]	; (8013a9c <shci_send+0x74>)
 8013a42:	681b      	ldr	r3, [r3, #0]
 8013a44:	89fa      	ldrh	r2, [r7, #14]
 8013a46:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8013a4a:	4b14      	ldr	r3, [pc, #80]	; (8013a9c <shci_send+0x74>)
 8013a4c:	681b      	ldr	r3, [r3, #0]
 8013a4e:	7b7a      	ldrb	r2, [r7, #13]
 8013a50:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8013a52:	4b12      	ldr	r3, [pc, #72]	; (8013a9c <shci_send+0x74>)
 8013a54:	681b      	ldr	r3, [r3, #0]
 8013a56:	330c      	adds	r3, #12
 8013a58:	7b7a      	ldrb	r2, [r7, #13]
 8013a5a:	68b9      	ldr	r1, [r7, #8]
 8013a5c:	4618      	mov	r0, r3
 8013a5e:	f002 fa75 	bl	8015f4c <memcpy>

  shciContext.io.Send(0,0);
 8013a62:	4b0f      	ldr	r3, [pc, #60]	; (8013aa0 <shci_send+0x78>)
 8013a64:	691b      	ldr	r3, [r3, #16]
 8013a66:	2100      	movs	r1, #0
 8013a68:	2000      	movs	r0, #0
 8013a6a:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8013a6c:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8013a70:	f7ed fbc0 	bl	80011f4 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	f103 0008 	add.w	r0, r3, #8
 8013a7a:	4b08      	ldr	r3, [pc, #32]	; (8013a9c <shci_send+0x74>)
 8013a7c:	6819      	ldr	r1, [r3, #0]
 8013a7e:	4b07      	ldr	r3, [pc, #28]	; (8013a9c <shci_send+0x74>)
 8013a80:	681b      	ldr	r3, [r3, #0]
 8013a82:	789b      	ldrb	r3, [r3, #2]
 8013a84:	3303      	adds	r3, #3
 8013a86:	461a      	mov	r2, r3
 8013a88:	f002 fa60 	bl	8015f4c <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8013a8c:	2001      	movs	r0, #1
 8013a8e:	f000 f83b 	bl	8013b08 <Cmd_SetStatus>

  return;
 8013a92:	bf00      	nop
}
 8013a94:	3710      	adds	r7, #16
 8013a96:	46bd      	mov	sp, r7
 8013a98:	bd80      	pop	{r7, pc}
 8013a9a:	bf00      	nop
 8013a9c:	20000208 	.word	0x20000208
 8013aa0:	2002747c 	.word	0x2002747c

08013aa4 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8013aa4:	b580      	push	{r7, lr}
 8013aa6:	b086      	sub	sp, #24
 8013aa8:	af00      	add	r7, sp, #0
 8013aaa:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8013aac:	4a10      	ldr	r2, [pc, #64]	; (8013af0 <TlInit+0x4c>)
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8013ab2:	4810      	ldr	r0, [pc, #64]	; (8013af4 <TlInit+0x50>)
 8013ab4:	f000 f882 	bl	8013bbc <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8013ab8:	2001      	movs	r0, #1
 8013aba:	f000 f825 	bl	8013b08 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8013abe:	4b0e      	ldr	r3, [pc, #56]	; (8013af8 <TlInit+0x54>)
 8013ac0:	2201      	movs	r2, #1
 8013ac2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8013ac4:	4b0d      	ldr	r3, [pc, #52]	; (8013afc <TlInit+0x58>)
 8013ac6:	681b      	ldr	r3, [r3, #0]
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d00c      	beq.n	8013ae6 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8013ad0:	4b0b      	ldr	r3, [pc, #44]	; (8013b00 <TlInit+0x5c>)
 8013ad2:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8013ad4:	4b0b      	ldr	r3, [pc, #44]	; (8013b04 <TlInit+0x60>)
 8013ad6:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8013ad8:	4b08      	ldr	r3, [pc, #32]	; (8013afc <TlInit+0x58>)
 8013ada:	681b      	ldr	r3, [r3, #0]
 8013adc:	f107 020c 	add.w	r2, r7, #12
 8013ae0:	4610      	mov	r0, r2
 8013ae2:	4798      	blx	r3
  }

  return;
 8013ae4:	bf00      	nop
 8013ae6:	bf00      	nop
}
 8013ae8:	3718      	adds	r7, #24
 8013aea:	46bd      	mov	sp, r7
 8013aec:	bd80      	pop	{r7, pc}
 8013aee:	bf00      	nop
 8013af0:	20000208 	.word	0x20000208
 8013af4:	200001fc 	.word	0x200001fc
 8013af8:	2000020c 	.word	0x2000020c
 8013afc:	2002747c 	.word	0x2002747c
 8013b00:	08013b59 	.word	0x08013b59
 8013b04:	08013b71 	.word	0x08013b71

08013b08 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8013b08:	b580      	push	{r7, lr}
 8013b0a:	b082      	sub	sp, #8
 8013b0c:	af00      	add	r7, sp, #0
 8013b0e:	4603      	mov	r3, r0
 8013b10:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8013b12:	79fb      	ldrb	r3, [r7, #7]
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	d10b      	bne.n	8013b30 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8013b18:	4b0d      	ldr	r3, [pc, #52]	; (8013b50 <Cmd_SetStatus+0x48>)
 8013b1a:	681b      	ldr	r3, [r3, #0]
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	d003      	beq.n	8013b28 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8013b20:	4b0b      	ldr	r3, [pc, #44]	; (8013b50 <Cmd_SetStatus+0x48>)
 8013b22:	681b      	ldr	r3, [r3, #0]
 8013b24:	2000      	movs	r0, #0
 8013b26:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8013b28:	4b0a      	ldr	r3, [pc, #40]	; (8013b54 <Cmd_SetStatus+0x4c>)
 8013b2a:	2200      	movs	r2, #0
 8013b2c:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8013b2e:	e00b      	b.n	8013b48 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8013b30:	4b08      	ldr	r3, [pc, #32]	; (8013b54 <Cmd_SetStatus+0x4c>)
 8013b32:	2201      	movs	r2, #1
 8013b34:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8013b36:	4b06      	ldr	r3, [pc, #24]	; (8013b50 <Cmd_SetStatus+0x48>)
 8013b38:	681b      	ldr	r3, [r3, #0]
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	d004      	beq.n	8013b48 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8013b3e:	4b04      	ldr	r3, [pc, #16]	; (8013b50 <Cmd_SetStatus+0x48>)
 8013b40:	681b      	ldr	r3, [r3, #0]
 8013b42:	2001      	movs	r0, #1
 8013b44:	4798      	blx	r3
  return;
 8013b46:	bf00      	nop
 8013b48:	bf00      	nop
}
 8013b4a:	3708      	adds	r7, #8
 8013b4c:	46bd      	mov	sp, r7
 8013b4e:	bd80      	pop	{r7, pc}
 8013b50:	2002749c 	.word	0x2002749c
 8013b54:	20000204 	.word	0x20000204

08013b58 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8013b58:	b580      	push	{r7, lr}
 8013b5a:	b082      	sub	sp, #8
 8013b5c:	af00      	add	r7, sp, #0
 8013b5e:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8013b60:	2000      	movs	r0, #0
 8013b62:	f7ed fb37 	bl	80011d4 <shci_cmd_resp_release>

  return;
 8013b66:	bf00      	nop
}
 8013b68:	3708      	adds	r7, #8
 8013b6a:	46bd      	mov	sp, r7
 8013b6c:	bd80      	pop	{r7, pc}
	...

08013b70 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8013b70:	b580      	push	{r7, lr}
 8013b72:	b082      	sub	sp, #8
 8013b74:	af00      	add	r7, sp, #0
 8013b76:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8013b78:	6879      	ldr	r1, [r7, #4]
 8013b7a:	4805      	ldr	r0, [pc, #20]	; (8013b90 <TlUserEvtReceived+0x20>)
 8013b7c:	f000 f872 	bl	8013c64 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8013b80:	4803      	ldr	r0, [pc, #12]	; (8013b90 <TlUserEvtReceived+0x20>)
 8013b82:	f7ed fb17 	bl	80011b4 <shci_notify_asynch_evt>

  return;
 8013b86:	bf00      	nop
}
 8013b88:	3708      	adds	r7, #8
 8013b8a:	46bd      	mov	sp, r7
 8013b8c:	bd80      	pop	{r7, pc}
 8013b8e:	bf00      	nop
 8013b90:	200001fc 	.word	0x200001fc

08013b94 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8013b94:	b480      	push	{r7}
 8013b96:	b083      	sub	sp, #12
 8013b98:	af00      	add	r7, sp, #0
 8013b9a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	4a05      	ldr	r2, [pc, #20]	; (8013bb4 <shci_register_io_bus+0x20>)
 8013ba0:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	4a04      	ldr	r2, [pc, #16]	; (8013bb8 <shci_register_io_bus+0x24>)
 8013ba6:	611a      	str	r2, [r3, #16]

  return;
 8013ba8:	bf00      	nop
}
 8013baa:	370c      	adds	r7, #12
 8013bac:	46bd      	mov	sp, r7
 8013bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bb2:	4770      	bx	lr
 8013bb4:	08013fb5 	.word	0x08013fb5
 8013bb8:	08014009 	.word	0x08014009

08013bbc <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8013bbc:	b480      	push	{r7}
 8013bbe:	b083      	sub	sp, #12
 8013bc0:	af00      	add	r7, sp, #0
 8013bc2:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	687a      	ldr	r2, [r7, #4]
 8013bc8:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	687a      	ldr	r2, [r7, #4]
 8013bce:	605a      	str	r2, [r3, #4]
}
 8013bd0:	bf00      	nop
 8013bd2:	370c      	adds	r7, #12
 8013bd4:	46bd      	mov	sp, r7
 8013bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bda:	4770      	bx	lr

08013bdc <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8013bdc:	b480      	push	{r7}
 8013bde:	b087      	sub	sp, #28
 8013be0:	af00      	add	r7, sp, #0
 8013be2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013be4:	f3ef 8310 	mrs	r3, PRIMASK
 8013be8:	60fb      	str	r3, [r7, #12]
  return(result);
 8013bea:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8013bec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8013bee:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	681b      	ldr	r3, [r3, #0]
 8013bf4:	687a      	ldr	r2, [r7, #4]
 8013bf6:	429a      	cmp	r2, r3
 8013bf8:	d102      	bne.n	8013c00 <LST_is_empty+0x24>
  {
    return_value = TRUE;
 8013bfa:	2301      	movs	r3, #1
 8013bfc:	75fb      	strb	r3, [r7, #23]
 8013bfe:	e001      	b.n	8013c04 <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 8013c00:	2300      	movs	r3, #0
 8013c02:	75fb      	strb	r3, [r7, #23]
 8013c04:	693b      	ldr	r3, [r7, #16]
 8013c06:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013c08:	68bb      	ldr	r3, [r7, #8]
 8013c0a:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8013c0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013c10:	4618      	mov	r0, r3
 8013c12:	371c      	adds	r7, #28
 8013c14:	46bd      	mov	sp, r7
 8013c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c1a:	4770      	bx	lr

08013c1c <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8013c1c:	b480      	push	{r7}
 8013c1e:	b087      	sub	sp, #28
 8013c20:	af00      	add	r7, sp, #0
 8013c22:	6078      	str	r0, [r7, #4]
 8013c24:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013c26:	f3ef 8310 	mrs	r3, PRIMASK
 8013c2a:	60fb      	str	r3, [r7, #12]
  return(result);
 8013c2c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8013c2e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8013c30:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	681a      	ldr	r2, [r3, #0]
 8013c36:	683b      	ldr	r3, [r7, #0]
 8013c38:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8013c3a:	683b      	ldr	r3, [r7, #0]
 8013c3c:	687a      	ldr	r2, [r7, #4]
 8013c3e:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	683a      	ldr	r2, [r7, #0]
 8013c44:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8013c46:	683b      	ldr	r3, [r7, #0]
 8013c48:	681b      	ldr	r3, [r3, #0]
 8013c4a:	683a      	ldr	r2, [r7, #0]
 8013c4c:	605a      	str	r2, [r3, #4]
 8013c4e:	697b      	ldr	r3, [r7, #20]
 8013c50:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013c52:	693b      	ldr	r3, [r7, #16]
 8013c54:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8013c58:	bf00      	nop
 8013c5a:	371c      	adds	r7, #28
 8013c5c:	46bd      	mov	sp, r7
 8013c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c62:	4770      	bx	lr

08013c64 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8013c64:	b480      	push	{r7}
 8013c66:	b087      	sub	sp, #28
 8013c68:	af00      	add	r7, sp, #0
 8013c6a:	6078      	str	r0, [r7, #4]
 8013c6c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013c6e:	f3ef 8310 	mrs	r3, PRIMASK
 8013c72:	60fb      	str	r3, [r7, #12]
  return(result);
 8013c74:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8013c76:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8013c78:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8013c7a:	683b      	ldr	r3, [r7, #0]
 8013c7c:	687a      	ldr	r2, [r7, #4]
 8013c7e:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	685a      	ldr	r2, [r3, #4]
 8013c84:	683b      	ldr	r3, [r7, #0]
 8013c86:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	683a      	ldr	r2, [r7, #0]
 8013c8c:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8013c8e:	683b      	ldr	r3, [r7, #0]
 8013c90:	685b      	ldr	r3, [r3, #4]
 8013c92:	683a      	ldr	r2, [r7, #0]
 8013c94:	601a      	str	r2, [r3, #0]
 8013c96:	697b      	ldr	r3, [r7, #20]
 8013c98:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013c9a:	693b      	ldr	r3, [r7, #16]
 8013c9c:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8013ca0:	bf00      	nop
 8013ca2:	371c      	adds	r7, #28
 8013ca4:	46bd      	mov	sp, r7
 8013ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013caa:	4770      	bx	lr

08013cac <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8013cac:	b480      	push	{r7}
 8013cae:	b087      	sub	sp, #28
 8013cb0:	af00      	add	r7, sp, #0
 8013cb2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013cb4:	f3ef 8310 	mrs	r3, PRIMASK
 8013cb8:	60fb      	str	r3, [r7, #12]
  return(result);
 8013cba:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8013cbc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8013cbe:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	685b      	ldr	r3, [r3, #4]
 8013cc4:	687a      	ldr	r2, [r7, #4]
 8013cc6:	6812      	ldr	r2, [r2, #0]
 8013cc8:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	681b      	ldr	r3, [r3, #0]
 8013cce:	687a      	ldr	r2, [r7, #4]
 8013cd0:	6852      	ldr	r2, [r2, #4]
 8013cd2:	605a      	str	r2, [r3, #4]
 8013cd4:	697b      	ldr	r3, [r7, #20]
 8013cd6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013cd8:	693b      	ldr	r3, [r7, #16]
 8013cda:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8013cde:	bf00      	nop
 8013ce0:	371c      	adds	r7, #28
 8013ce2:	46bd      	mov	sp, r7
 8013ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ce8:	4770      	bx	lr

08013cea <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8013cea:	b580      	push	{r7, lr}
 8013cec:	b086      	sub	sp, #24
 8013cee:	af00      	add	r7, sp, #0
 8013cf0:	6078      	str	r0, [r7, #4]
 8013cf2:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013cf4:	f3ef 8310 	mrs	r3, PRIMASK
 8013cf8:	60fb      	str	r3, [r7, #12]
  return(result);
 8013cfa:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8013cfc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8013cfe:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	681a      	ldr	r2, [r3, #0]
 8013d04:	683b      	ldr	r3, [r7, #0]
 8013d06:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	681b      	ldr	r3, [r3, #0]
 8013d0c:	4618      	mov	r0, r3
 8013d0e:	f7ff ffcd 	bl	8013cac <LST_remove_node>
 8013d12:	697b      	ldr	r3, [r7, #20]
 8013d14:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013d16:	693b      	ldr	r3, [r7, #16]
 8013d18:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8013d1c:	bf00      	nop
 8013d1e:	3718      	adds	r7, #24
 8013d20:	46bd      	mov	sp, r7
 8013d22:	bd80      	pop	{r7, pc}

08013d24 <otThreadSetEnabled>:
extern otHandleActiveScanResult otHandleActiveScanResultCb;
extern otReceiveDiagnosticGetCallback otReceiveDiagnosticGetCb;


OTAPI otError OTCALL otThreadSetEnabled(otInstance *aInstance, bool aEnabled)
{
 8013d24:	b580      	push	{r7, lr}
 8013d26:	b084      	sub	sp, #16
 8013d28:	af00      	add	r7, sp, #0
 8013d2a:	6078      	str	r0, [r7, #4]
 8013d2c:	460b      	mov	r3, r1
 8013d2e:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 8013d30:	f001 fa38 	bl	80151a4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013d34:	f001 f9d4 	bl	80150e0 <THREAD_Get_OTCmdPayloadBuffer>
 8013d38:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_ENABLED;
 8013d3a:	68fb      	ldr	r3, [r7, #12]
 8013d3c:	2200      	movs	r2, #0
 8013d3e:	f042 0242 	orr.w	r2, r2, #66	; 0x42
 8013d42:	701a      	strb	r2, [r3, #0]
 8013d44:	2200      	movs	r2, #0
 8013d46:	705a      	strb	r2, [r3, #1]
 8013d48:	2200      	movs	r2, #0
 8013d4a:	709a      	strb	r2, [r3, #2]
 8013d4c:	2200      	movs	r2, #0
 8013d4e:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8013d50:	68fb      	ldr	r3, [r7, #12]
 8013d52:	2200      	movs	r2, #0
 8013d54:	f042 0201 	orr.w	r2, r2, #1
 8013d58:	711a      	strb	r2, [r3, #4]
 8013d5a:	2200      	movs	r2, #0
 8013d5c:	715a      	strb	r2, [r3, #5]
 8013d5e:	2200      	movs	r2, #0
 8013d60:	719a      	strb	r2, [r3, #6]
 8013d62:	2200      	movs	r2, #0
 8013d64:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 8013d66:	78fa      	ldrb	r2, [r7, #3]
 8013d68:	68fb      	ldr	r3, [r7, #12]
 8013d6a:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8013d6c:	f001 f9dc 	bl	8015128 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013d70:	f001 f9c2 	bl	80150f8 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013d74:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8013d76:	68fb      	ldr	r3, [r7, #12]
 8013d78:	689b      	ldr	r3, [r3, #8]
 8013d7a:	b2db      	uxtb	r3, r3
}
 8013d7c:	4618      	mov	r0, r3
 8013d7e:	3710      	adds	r7, #16
 8013d80:	46bd      	mov	sp, r7
 8013d82:	bd80      	pop	{r7, pc}

08013d84 <otThreadSetExtendedPanId>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otExtendedPanId *)p_ot_req->Data[0];
}

OTAPI otError OTCALL otThreadSetExtendedPanId(otInstance *aInstance, const otExtendedPanId *aExtendedPanId)
{
 8013d84:	b580      	push	{r7, lr}
 8013d86:	b084      	sub	sp, #16
 8013d88:	af00      	add	r7, sp, #0
 8013d8a:	6078      	str	r0, [r7, #4]
 8013d8c:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8013d8e:	f001 fa09 	bl	80151a4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013d92:	f001 f9a5 	bl	80150e0 <THREAD_Get_OTCmdPayloadBuffer>
 8013d96:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_EXTPANID;
 8013d98:	68fb      	ldr	r3, [r7, #12]
 8013d9a:	2200      	movs	r2, #0
 8013d9c:	f042 024b 	orr.w	r2, r2, #75	; 0x4b
 8013da0:	701a      	strb	r2, [r3, #0]
 8013da2:	2200      	movs	r2, #0
 8013da4:	705a      	strb	r2, [r3, #1]
 8013da6:	2200      	movs	r2, #0
 8013da8:	709a      	strb	r2, [r3, #2]
 8013daa:	2200      	movs	r2, #0
 8013dac:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8013dae:	68fb      	ldr	r3, [r7, #12]
 8013db0:	2200      	movs	r2, #0
 8013db2:	f042 0201 	orr.w	r2, r2, #1
 8013db6:	711a      	strb	r2, [r3, #4]
 8013db8:	2200      	movs	r2, #0
 8013dba:	715a      	strb	r2, [r3, #5]
 8013dbc:	2200      	movs	r2, #0
 8013dbe:	719a      	strb	r2, [r3, #6]
 8013dc0:	2200      	movs	r2, #0
 8013dc2:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aExtendedPanId;
 8013dc4:	683a      	ldr	r2, [r7, #0]
 8013dc6:	68fb      	ldr	r3, [r7, #12]
 8013dc8:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8013dca:	f001 f9ad 	bl	8015128 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013dce:	f001 f993 	bl	80150f8 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013dd2:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8013dd4:	68fb      	ldr	r3, [r7, #12]
 8013dd6:	689b      	ldr	r3, [r3, #8]
 8013dd8:	b2db      	uxtb	r3, r3
}
 8013dda:	4618      	mov	r0, r3
 8013ddc:	3710      	adds	r7, #16
 8013dde:	46bd      	mov	sp, r7
 8013de0:	bd80      	pop	{r7, pc}

08013de2 <otThreadSetMasterKey>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otMasterKey *)p_ot_req->Data[0];
}

OTAPI otError OTCALL otThreadSetMasterKey(otInstance *aInstance, const otMasterKey *aKey)
{
 8013de2:	b580      	push	{r7, lr}
 8013de4:	b084      	sub	sp, #16
 8013de6:	af00      	add	r7, sp, #0
 8013de8:	6078      	str	r0, [r7, #4]
 8013dea:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8013dec:	f001 f9da 	bl	80151a4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013df0:	f001 f976 	bl	80150e0 <THREAD_Get_OTCmdPayloadBuffer>
 8013df4:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_MASTER_KEY;
 8013df6:	68fb      	ldr	r3, [r7, #12]
 8013df8:	2200      	movs	r2, #0
 8013dfa:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8013dfe:	701a      	strb	r2, [r3, #0]
 8013e00:	2200      	movs	r2, #0
 8013e02:	705a      	strb	r2, [r3, #1]
 8013e04:	2200      	movs	r2, #0
 8013e06:	709a      	strb	r2, [r3, #2]
 8013e08:	2200      	movs	r2, #0
 8013e0a:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8013e0c:	68fb      	ldr	r3, [r7, #12]
 8013e0e:	2200      	movs	r2, #0
 8013e10:	f042 0201 	orr.w	r2, r2, #1
 8013e14:	711a      	strb	r2, [r3, #4]
 8013e16:	2200      	movs	r2, #0
 8013e18:	715a      	strb	r2, [r3, #5]
 8013e1a:	2200      	movs	r2, #0
 8013e1c:	719a      	strb	r2, [r3, #6]
 8013e1e:	2200      	movs	r2, #0
 8013e20:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aKey;
 8013e22:	683a      	ldr	r2, [r7, #0]
 8013e24:	68fb      	ldr	r3, [r7, #12]
 8013e26:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8013e28:	f001 f97e 	bl	8015128 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013e2c:	f001 f964 	bl	80150f8 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013e30:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8013e32:	68fb      	ldr	r3, [r7, #12]
 8013e34:	689b      	ldr	r3, [r3, #8]
 8013e36:	b2db      	uxtb	r3, r3
}
 8013e38:	4618      	mov	r0, r3
 8013e3a:	3710      	adds	r7, #16
 8013e3c:	46bd      	mov	sp, r7
 8013e3e:	bd80      	pop	{r7, pc}

08013e40 <otThreadSetNetworkName>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (char *)p_ot_req->Data[0];
}

OTAPI otError OTCALL otThreadSetNetworkName(otInstance *aInstance, const char *aNetworkName)
{
 8013e40:	b580      	push	{r7, lr}
 8013e42:	b084      	sub	sp, #16
 8013e44:	af00      	add	r7, sp, #0
 8013e46:	6078      	str	r0, [r7, #4]
 8013e48:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8013e4a:	f001 f9ab 	bl	80151a4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013e4e:	f001 f947 	bl	80150e0 <THREAD_Get_OTCmdPayloadBuffer>
 8013e52:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_NETWORK_NAME;
 8013e54:	68fb      	ldr	r3, [r7, #12]
 8013e56:	2200      	movs	r2, #0
 8013e58:	f042 0256 	orr.w	r2, r2, #86	; 0x56
 8013e5c:	701a      	strb	r2, [r3, #0]
 8013e5e:	2200      	movs	r2, #0
 8013e60:	705a      	strb	r2, [r3, #1]
 8013e62:	2200      	movs	r2, #0
 8013e64:	709a      	strb	r2, [r3, #2]
 8013e66:	2200      	movs	r2, #0
 8013e68:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8013e6a:	68fb      	ldr	r3, [r7, #12]
 8013e6c:	2200      	movs	r2, #0
 8013e6e:	f042 0201 	orr.w	r2, r2, #1
 8013e72:	711a      	strb	r2, [r3, #4]
 8013e74:	2200      	movs	r2, #0
 8013e76:	715a      	strb	r2, [r3, #5]
 8013e78:	2200      	movs	r2, #0
 8013e7a:	719a      	strb	r2, [r3, #6]
 8013e7c:	2200      	movs	r2, #0
 8013e7e:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aNetworkName;
 8013e80:	683a      	ldr	r2, [r7, #0]
 8013e82:	68fb      	ldr	r3, [r7, #12]
 8013e84:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8013e86:	f001 f94f 	bl	8015128 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013e8a:	f001 f935 	bl	80150f8 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013e8e:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8013e90:	68fb      	ldr	r3, [r7, #12]
 8013e92:	689b      	ldr	r3, [r3, #8]
 8013e94:	b2db      	uxtb	r3, r3
}
 8013e96:	4618      	mov	r0, r3
 8013e98:	3710      	adds	r7, #16
 8013e9a:	46bd      	mov	sp, r7
 8013e9c:	bd80      	pop	{r7, pc}

08013e9e <otThreadGetDeviceRole>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

OTAPI otDeviceRole OTCALL otThreadGetDeviceRole(otInstance *aInstance)
{
 8013e9e:	b580      	push	{r7, lr}
 8013ea0:	b084      	sub	sp, #16
 8013ea2:	af00      	add	r7, sp, #0
 8013ea4:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8013ea6:	f001 f97d 	bl	80151a4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013eaa:	f001 f919 	bl	80150e0 <THREAD_Get_OTCmdPayloadBuffer>
 8013eae:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_DEVICE_ROLE;
 8013eb0:	68fb      	ldr	r3, [r7, #12]
 8013eb2:	2200      	movs	r2, #0
 8013eb4:	f042 025e 	orr.w	r2, r2, #94	; 0x5e
 8013eb8:	701a      	strb	r2, [r3, #0]
 8013eba:	2200      	movs	r2, #0
 8013ebc:	705a      	strb	r2, [r3, #1]
 8013ebe:	2200      	movs	r2, #0
 8013ec0:	709a      	strb	r2, [r3, #2]
 8013ec2:	2200      	movs	r2, #0
 8013ec4:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 8013ec6:	68fb      	ldr	r3, [r7, #12]
 8013ec8:	2200      	movs	r2, #0
 8013eca:	711a      	strb	r2, [r3, #4]
 8013ecc:	2200      	movs	r2, #0
 8013ece:	715a      	strb	r2, [r3, #5]
 8013ed0:	2200      	movs	r2, #0
 8013ed2:	719a      	strb	r2, [r3, #6]
 8013ed4:	2200      	movs	r2, #0
 8013ed6:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 8013ed8:	f001 f926 	bl	8015128 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013edc:	f001 f90c 	bl	80150f8 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013ee0:	60f8      	str	r0, [r7, #12]
  return (otDeviceRole)p_ot_req->Data[0];
 8013ee2:	68fb      	ldr	r3, [r7, #12]
 8013ee4:	689b      	ldr	r3, [r3, #8]
 8013ee6:	b2db      	uxtb	r3, r3
}
 8013ee8:	4618      	mov	r0, r3
 8013eea:	3710      	adds	r7, #16
 8013eec:	46bd      	mov	sp, r7
 8013eee:	bd80      	pop	{r7, pc}

08013ef0 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 8013ef0:	b580      	push	{r7, lr}
 8013ef2:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8013ef4:	f001 fbda 	bl	80156ac <HW_IPCC_Enable>

  return;
 8013ef8:	bf00      	nop
}
 8013efa:	bd80      	pop	{r7, pc}

08013efc <TL_Init>:


void TL_Init( void )
{
 8013efc:	b580      	push	{r7, lr}
 8013efe:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8013f00:	4b0f      	ldr	r3, [pc, #60]	; (8013f40 <TL_Init+0x44>)
 8013f02:	4a10      	ldr	r2, [pc, #64]	; (8013f44 <TL_Init+0x48>)
 8013f04:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8013f06:	4b0e      	ldr	r3, [pc, #56]	; (8013f40 <TL_Init+0x44>)
 8013f08:	4a0f      	ldr	r2, [pc, #60]	; (8013f48 <TL_Init+0x4c>)
 8013f0a:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8013f0c:	4b0c      	ldr	r3, [pc, #48]	; (8013f40 <TL_Init+0x44>)
 8013f0e:	4a0f      	ldr	r2, [pc, #60]	; (8013f4c <TL_Init+0x50>)
 8013f10:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8013f12:	4b0b      	ldr	r3, [pc, #44]	; (8013f40 <TL_Init+0x44>)
 8013f14:	4a0e      	ldr	r2, [pc, #56]	; (8013f50 <TL_Init+0x54>)
 8013f16:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_sys_table = &TL_SysTable;
 8013f18:	4b09      	ldr	r3, [pc, #36]	; (8013f40 <TL_Init+0x44>)
 8013f1a:	4a0e      	ldr	r2, [pc, #56]	; (8013f54 <TL_Init+0x58>)
 8013f1c:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8013f1e:	4b08      	ldr	r3, [pc, #32]	; (8013f40 <TL_Init+0x44>)
 8013f20:	4a0d      	ldr	r2, [pc, #52]	; (8013f58 <TL_Init+0x5c>)
 8013f22:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8013f24:	4b06      	ldr	r3, [pc, #24]	; (8013f40 <TL_Init+0x44>)
 8013f26:	4a0d      	ldr	r2, [pc, #52]	; (8013f5c <TL_Init+0x60>)
 8013f28:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8013f2a:	4b05      	ldr	r3, [pc, #20]	; (8013f40 <TL_Init+0x44>)
 8013f2c:	4a0c      	ldr	r2, [pc, #48]	; (8013f60 <TL_Init+0x64>)
 8013f2e:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8013f30:	4b03      	ldr	r3, [pc, #12]	; (8013f40 <TL_Init+0x44>)
 8013f32:	4a0c      	ldr	r2, [pc, #48]	; (8013f64 <TL_Init+0x68>)
 8013f34:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8013f36:	f001 fbc9 	bl	80156cc <HW_IPCC_Init>

  return;
 8013f3a:	bf00      	nop
}
 8013f3c:	bd80      	pop	{r7, pc}
 8013f3e:	bf00      	nop
 8013f40:	20030000 	.word	0x20030000
 8013f44:	20030024 	.word	0x20030024
 8013f48:	20030044 	.word	0x20030044
 8013f4c:	20030054 	.word	0x20030054
 8013f50:	20030060 	.word	0x20030060
 8013f54:	20030068 	.word	0x20030068
 8013f58:	20030070 	.word	0x20030070
 8013f5c:	2003008c 	.word	0x2003008c
 8013f60:	20030090 	.word	0x20030090
 8013f64:	2003009c 	.word	0x2003009c

08013f68 <HW_IPCC_BLE_RxEvtNot>:

  return 0;
}

void HW_IPCC_BLE_RxEvtNot(void)
{
 8013f68:	b580      	push	{r7, lr}
 8013f6a:	b082      	sub	sp, #8
 8013f6c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8013f6e:	e009      	b.n	8013f84 <HW_IPCC_BLE_RxEvtNot+0x1c>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8013f70:	1d3b      	adds	r3, r7, #4
 8013f72:	4619      	mov	r1, r3
 8013f74:	4808      	ldr	r0, [pc, #32]	; (8013f98 <HW_IPCC_BLE_RxEvtNot+0x30>)
 8013f76:	f7ff feb8 	bl	8013cea <LST_remove_head>

    BLE_IoBusEvtCallBackFunction(phcievt);
 8013f7a:	4b08      	ldr	r3, [pc, #32]	; (8013f9c <HW_IPCC_BLE_RxEvtNot+0x34>)
 8013f7c:	681b      	ldr	r3, [r3, #0]
 8013f7e:	687a      	ldr	r2, [r7, #4]
 8013f80:	4610      	mov	r0, r2
 8013f82:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8013f84:	4804      	ldr	r0, [pc, #16]	; (8013f98 <HW_IPCC_BLE_RxEvtNot+0x30>)
 8013f86:	f7ff fe29 	bl	8013bdc <LST_is_empty>
 8013f8a:	4603      	mov	r3, r0
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	d0ef      	beq.n	8013f70 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8013f90:	bf00      	nop
}
 8013f92:	3708      	adds	r7, #8
 8013f94:	46bd      	mov	sp, r7
 8013f96:	bd80      	pop	{r7, pc}
 8013f98:	20030828 	.word	0x20030828
 8013f9c:	200274a8 	.word	0x200274a8

08013fa0 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8013fa0:	b580      	push	{r7, lr}
 8013fa2:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8013fa4:	4b02      	ldr	r3, [pc, #8]	; (8013fb0 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8013fa6:	681b      	ldr	r3, [r3, #0]
 8013fa8:	4798      	blx	r3

  return;
 8013faa:	bf00      	nop
}
 8013fac:	bd80      	pop	{r7, pc}
 8013fae:	bf00      	nop
 8013fb0:	200274ac 	.word	0x200274ac

08013fb4 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8013fb4:	b580      	push	{r7, lr}
 8013fb6:	b084      	sub	sp, #16
 8013fb8:	af00      	add	r7, sp, #0
 8013fba:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8013fc0:	480d      	ldr	r0, [pc, #52]	; (8013ff8 <TL_SYS_Init+0x44>)
 8013fc2:	f7ff fdfb 	bl	8013bbc <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8013fc6:	4b0d      	ldr	r3, [pc, #52]	; (8013ffc <TL_SYS_Init+0x48>)
 8013fc8:	68db      	ldr	r3, [r3, #12]
 8013fca:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8013fcc:	68fb      	ldr	r3, [r7, #12]
 8013fce:	689a      	ldr	r2, [r3, #8]
 8013fd0:	68bb      	ldr	r3, [r7, #8]
 8013fd2:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8013fd4:	68bb      	ldr	r3, [r7, #8]
 8013fd6:	4a08      	ldr	r2, [pc, #32]	; (8013ff8 <TL_SYS_Init+0x44>)
 8013fd8:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8013fda:	f001 fba5 	bl	8015728 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8013fde:	68fb      	ldr	r3, [r7, #12]
 8013fe0:	681b      	ldr	r3, [r3, #0]
 8013fe2:	4a07      	ldr	r2, [pc, #28]	; (8014000 <TL_SYS_Init+0x4c>)
 8013fe4:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8013fe6:	68fb      	ldr	r3, [r7, #12]
 8013fe8:	685b      	ldr	r3, [r3, #4]
 8013fea:	4a06      	ldr	r2, [pc, #24]	; (8014004 <TL_SYS_Init+0x50>)
 8013fec:	6013      	str	r3, [r2, #0]

  return 0;
 8013fee:	2300      	movs	r3, #0
}
 8013ff0:	4618      	mov	r0, r3
 8013ff2:	3710      	adds	r7, #16
 8013ff4:	46bd      	mov	sp, r7
 8013ff6:	bd80      	pop	{r7, pc}
 8013ff8:	20030830 	.word	0x20030830
 8013ffc:	20030000 	.word	0x20030000
 8014000:	200274b0 	.word	0x200274b0
 8014004:	200274b4 	.word	0x200274b4

08014008 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8014008:	b580      	push	{r7, lr}
 801400a:	b082      	sub	sp, #8
 801400c:	af00      	add	r7, sp, #0
 801400e:	6078      	str	r0, [r7, #4]
 8014010:	460b      	mov	r3, r1
 8014012:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8014014:	4b05      	ldr	r3, [pc, #20]	; (801402c <TL_SYS_SendCmd+0x24>)
 8014016:	68db      	ldr	r3, [r3, #12]
 8014018:	681b      	ldr	r3, [r3, #0]
 801401a:	2210      	movs	r2, #16
 801401c:	721a      	strb	r2, [r3, #8]

  HW_IPCC_SYS_SendCmd();
 801401e:	f001 fb8d 	bl	801573c <HW_IPCC_SYS_SendCmd>

  return 0;
 8014022:	2300      	movs	r3, #0
}
 8014024:	4618      	mov	r0, r3
 8014026:	3708      	adds	r7, #8
 8014028:	46bd      	mov	sp, r7
 801402a:	bd80      	pop	{r7, pc}
 801402c:	20030000 	.word	0x20030000

08014030 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8014030:	b580      	push	{r7, lr}
 8014032:	af00      	add	r7, sp, #0
  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8014034:	4b04      	ldr	r3, [pc, #16]	; (8014048 <HW_IPCC_SYS_CmdEvtNot+0x18>)
 8014036:	681b      	ldr	r3, [r3, #0]
 8014038:	4a04      	ldr	r2, [pc, #16]	; (801404c <HW_IPCC_SYS_CmdEvtNot+0x1c>)
 801403a:	68d2      	ldr	r2, [r2, #12]
 801403c:	6812      	ldr	r2, [r2, #0]
 801403e:	4610      	mov	r0, r2
 8014040:	4798      	blx	r3

  return;
 8014042:	bf00      	nop
}
 8014044:	bd80      	pop	{r7, pc}
 8014046:	bf00      	nop
 8014048:	200274b0 	.word	0x200274b0
 801404c:	20030000 	.word	0x20030000

08014050 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8014050:	b580      	push	{r7, lr}
 8014052:	b082      	sub	sp, #8
 8014054:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8014056:	e009      	b.n	801406c <HW_IPCC_SYS_EvtNot+0x1c>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8014058:	1d3b      	adds	r3, r7, #4
 801405a:	4619      	mov	r1, r3
 801405c:	4808      	ldr	r0, [pc, #32]	; (8014080 <HW_IPCC_SYS_EvtNot+0x30>)
 801405e:	f7ff fe44 	bl	8013cea <LST_remove_head>
    SYS_EVT_IoBusCallBackFunction( p_evt );
 8014062:	4b08      	ldr	r3, [pc, #32]	; (8014084 <HW_IPCC_SYS_EvtNot+0x34>)
 8014064:	681b      	ldr	r3, [r3, #0]
 8014066:	687a      	ldr	r2, [r7, #4]
 8014068:	4610      	mov	r0, r2
 801406a:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 801406c:	4804      	ldr	r0, [pc, #16]	; (8014080 <HW_IPCC_SYS_EvtNot+0x30>)
 801406e:	f7ff fdb5 	bl	8013bdc <LST_is_empty>
 8014072:	4603      	mov	r3, r0
 8014074:	2b00      	cmp	r3, #0
 8014076:	d0ef      	beq.n	8014058 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8014078:	bf00      	nop
}
 801407a:	3708      	adds	r7, #8
 801407c:	46bd      	mov	sp, r7
 801407e:	bd80      	pop	{r7, pc}
 8014080:	20030830 	.word	0x20030830
 8014084:	200274b4 	.word	0x200274b4

08014088 <TL_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void TL_THREAD_Init( TL_TH_Config_t *p_Config )
{
 8014088:	b580      	push	{r7, lr}
 801408a:	b084      	sub	sp, #16
 801408c:	af00      	add	r7, sp, #0
 801408e:	6078      	str	r0, [r7, #4]
  MB_ThreadTable_t  * p_thread_table;

  p_thread_table = TL_RefTable.p_thread_table;
 8014090:	4b0a      	ldr	r3, [pc, #40]	; (80140bc <TL_THREAD_Init+0x34>)
 8014092:	689b      	ldr	r3, [r3, #8]
 8014094:	60fb      	str	r3, [r7, #12]

  p_thread_table->clicmdrsp_buffer = p_Config->p_ThreadCliRspBuffer;
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	685a      	ldr	r2, [r3, #4]
 801409a:	68fb      	ldr	r3, [r7, #12]
 801409c:	605a      	str	r2, [r3, #4]
  p_thread_table->otcmdrsp_buffer = p_Config->p_ThreadOtCmdRspBuffer;
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	681a      	ldr	r2, [r3, #0]
 80140a2:	68fb      	ldr	r3, [r7, #12]
 80140a4:	609a      	str	r2, [r3, #8]
  p_thread_table->notack_buffer = p_Config->p_ThreadNotAckBuffer;
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	689a      	ldr	r2, [r3, #8]
 80140aa:	68fb      	ldr	r3, [r7, #12]
 80140ac:	601a      	str	r2, [r3, #0]

  HW_IPCC_THREAD_Init();
 80140ae:	f001 fb6b 	bl	8015788 <HW_IPCC_THREAD_Init>

  return;
 80140b2:	bf00      	nop
}
 80140b4:	3710      	adds	r7, #16
 80140b6:	46bd      	mov	sp, r7
 80140b8:	bd80      	pop	{r7, pc}
 80140ba:	bf00      	nop
 80140bc:	20030000 	.word	0x20030000

080140c0 <TL_OT_SendCmd>:

void TL_OT_SendCmd( void )
{
 80140c0:	b580      	push	{r7, lr}
 80140c2:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->otcmdrsp_buffer))->cmdserial.type = TL_OTCMD_PKT_TYPE;
 80140c4:	4b04      	ldr	r3, [pc, #16]	; (80140d8 <TL_OT_SendCmd+0x18>)
 80140c6:	689b      	ldr	r3, [r3, #8]
 80140c8:	689b      	ldr	r3, [r3, #8]
 80140ca:	2208      	movs	r2, #8
 80140cc:	721a      	strb	r2, [r3, #8]

  HW_IPCC_OT_SendCmd();
 80140ce:	f001 fb69 	bl	80157a4 <HW_IPCC_OT_SendCmd>

  return;
 80140d2:	bf00      	nop
}
 80140d4:	bd80      	pop	{r7, pc}
 80140d6:	bf00      	nop
 80140d8:	20030000 	.word	0x20030000

080140dc <TL_CLI_SendCmd>:

void TL_CLI_SendCmd( void )
{
 80140dc:	b580      	push	{r7, lr}
 80140de:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->clicmdrsp_buffer))->cmdserial.type = TL_CLICMD_PKT_TYPE;
 80140e0:	4b04      	ldr	r3, [pc, #16]	; (80140f4 <TL_CLI_SendCmd+0x18>)
 80140e2:	689b      	ldr	r3, [r3, #8]
 80140e4:	685b      	ldr	r3, [r3, #4]
 80140e6:	220a      	movs	r2, #10
 80140e8:	721a      	strb	r2, [r3, #8]

  HW_IPCC_CLI_SendCmd();
 80140ea:	f001 fb69 	bl	80157c0 <HW_IPCC_CLI_SendCmd>

  return;
 80140ee:	bf00      	nop
}
 80140f0:	bd80      	pop	{r7, pc}
 80140f2:	bf00      	nop
 80140f4:	20030000 	.word	0x20030000

080140f8 <TL_THREAD_SendAck>:

void TL_THREAD_SendAck ( void )
{
 80140f8:	b580      	push	{r7, lr}
 80140fa:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 80140fc:	4b04      	ldr	r3, [pc, #16]	; (8014110 <TL_THREAD_SendAck+0x18>)
 80140fe:	689b      	ldr	r3, [r3, #8]
 8014100:	681b      	ldr	r3, [r3, #0]
 8014102:	220d      	movs	r2, #13
 8014104:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_SendAck();
 8014106:	f001 fb65 	bl	80157d4 <HW_IPCC_THREAD_SendAck>

  return;
 801410a:	bf00      	nop
}
 801410c:	bd80      	pop	{r7, pc}
 801410e:	bf00      	nop
 8014110:	20030000 	.word	0x20030000

08014114 <TL_THREAD_CliSendAck>:

void TL_THREAD_CliSendAck ( void )
{
 8014114:	b580      	push	{r7, lr}
 8014116:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 8014118:	4b04      	ldr	r3, [pc, #16]	; (801412c <TL_THREAD_CliSendAck+0x18>)
 801411a:	689b      	ldr	r3, [r3, #8]
 801411c:	681b      	ldr	r3, [r3, #0]
 801411e:	220d      	movs	r2, #13
 8014120:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_CliSendAck();
 8014122:	f001 fb65 	bl	80157f0 <HW_IPCC_THREAD_CliSendAck>

  return;
 8014126:	bf00      	nop
}
 8014128:	bd80      	pop	{r7, pc}
 801412a:	bf00      	nop
 801412c:	20030000 	.word	0x20030000

08014130 <HW_IPCC_OT_CmdEvtNot>:

void HW_IPCC_OT_CmdEvtNot(void)
{
 8014130:	b580      	push	{r7, lr}
 8014132:	af00      	add	r7, sp, #0
  TL_OT_CmdEvtReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->otcmdrsp_buffer) );
 8014134:	4b03      	ldr	r3, [pc, #12]	; (8014144 <HW_IPCC_OT_CmdEvtNot+0x14>)
 8014136:	689b      	ldr	r3, [r3, #8]
 8014138:	689b      	ldr	r3, [r3, #8]
 801413a:	4618      	mov	r0, r3
 801413c:	f001 f818 	bl	8015170 <TL_OT_CmdEvtReceived>

  return;
 8014140:	bf00      	nop
}
 8014142:	bd80      	pop	{r7, pc}
 8014144:	20030000 	.word	0x20030000

08014148 <HW_IPCC_THREAD_EvtNot>:

void HW_IPCC_THREAD_EvtNot( void )
{
 8014148:	b580      	push	{r7, lr}
 801414a:	af00      	add	r7, sp, #0
  TL_THREAD_NotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->notack_buffer) );
 801414c:	4b03      	ldr	r3, [pc, #12]	; (801415c <HW_IPCC_THREAD_EvtNot+0x14>)
 801414e:	689b      	ldr	r3, [r3, #8]
 8014150:	681b      	ldr	r3, [r3, #0]
 8014152:	4618      	mov	r0, r3
 8014154:	f001 f816 	bl	8015184 <TL_THREAD_NotReceived>

  return;
 8014158:	bf00      	nop
}
 801415a:	bd80      	pop	{r7, pc}
 801415c:	20030000 	.word	0x20030000

08014160 <HW_IPCC_THREAD_CliEvtNot>:

void HW_IPCC_THREAD_CliEvtNot( void )
{
 8014160:	b580      	push	{r7, lr}
 8014162:	af00      	add	r7, sp, #0
  TL_THREAD_CliNotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->clicmdrsp_buffer) );
 8014164:	4b03      	ldr	r3, [pc, #12]	; (8014174 <HW_IPCC_THREAD_CliEvtNot+0x14>)
 8014166:	689b      	ldr	r3, [r3, #8]
 8014168:	685b      	ldr	r3, [r3, #4]
 801416a:	4618      	mov	r0, r3
 801416c:	f001 f8b8 	bl	80152e0 <TL_THREAD_CliNotReceived>

  return;
 8014170:	bf00      	nop
}
 8014172:	bd80      	pop	{r7, pc}
 8014174:	20030000 	.word	0x20030000

08014178 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8014178:	b580      	push	{r7, lr}
 801417a:	b082      	sub	sp, #8
 801417c:	af00      	add	r7, sp, #0
 801417e:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8014180:	4817      	ldr	r0, [pc, #92]	; (80141e0 <TL_MM_Init+0x68>)
 8014182:	f7ff fd1b 	bl	8013bbc <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8014186:	4817      	ldr	r0, [pc, #92]	; (80141e4 <TL_MM_Init+0x6c>)
 8014188:	f7ff fd18 	bl	8013bbc <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 801418c:	4b16      	ldr	r3, [pc, #88]	; (80141e8 <TL_MM_Init+0x70>)
 801418e:	691b      	ldr	r3, [r3, #16]
 8014190:	4a16      	ldr	r2, [pc, #88]	; (80141ec <TL_MM_Init+0x74>)
 8014192:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8014194:	4b15      	ldr	r3, [pc, #84]	; (80141ec <TL_MM_Init+0x74>)
 8014196:	681b      	ldr	r3, [r3, #0]
 8014198:	687a      	ldr	r2, [r7, #4]
 801419a:	6892      	ldr	r2, [r2, #8]
 801419c:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 801419e:	4b13      	ldr	r3, [pc, #76]	; (80141ec <TL_MM_Init+0x74>)
 80141a0:	681b      	ldr	r3, [r3, #0]
 80141a2:	687a      	ldr	r2, [r7, #4]
 80141a4:	68d2      	ldr	r2, [r2, #12]
 80141a6:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 80141a8:	4b10      	ldr	r3, [pc, #64]	; (80141ec <TL_MM_Init+0x74>)
 80141aa:	681b      	ldr	r3, [r3, #0]
 80141ac:	4a0c      	ldr	r2, [pc, #48]	; (80141e0 <TL_MM_Init+0x68>)
 80141ae:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 80141b0:	4b0e      	ldr	r3, [pc, #56]	; (80141ec <TL_MM_Init+0x74>)
 80141b2:	681b      	ldr	r3, [r3, #0]
 80141b4:	687a      	ldr	r2, [r7, #4]
 80141b6:	6812      	ldr	r2, [r2, #0]
 80141b8:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 80141ba:	4b0c      	ldr	r3, [pc, #48]	; (80141ec <TL_MM_Init+0x74>)
 80141bc:	681b      	ldr	r3, [r3, #0]
 80141be:	687a      	ldr	r2, [r7, #4]
 80141c0:	6852      	ldr	r2, [r2, #4]
 80141c2:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 80141c4:	4b09      	ldr	r3, [pc, #36]	; (80141ec <TL_MM_Init+0x74>)
 80141c6:	681b      	ldr	r3, [r3, #0]
 80141c8:	687a      	ldr	r2, [r7, #4]
 80141ca:	6912      	ldr	r2, [r2, #16]
 80141cc:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 80141ce:	4b07      	ldr	r3, [pc, #28]	; (80141ec <TL_MM_Init+0x74>)
 80141d0:	681b      	ldr	r3, [r3, #0]
 80141d2:	687a      	ldr	r2, [r7, #4]
 80141d4:	6952      	ldr	r2, [r2, #20]
 80141d6:	619a      	str	r2, [r3, #24]

  return;
 80141d8:	bf00      	nop
}
 80141da:	3708      	adds	r7, #8
 80141dc:	46bd      	mov	sp, r7
 80141de:	bd80      	pop	{r7, pc}
 80141e0:	200300a8 	.word	0x200300a8
 80141e4:	200274a0 	.word	0x200274a0
 80141e8:	20030000 	.word	0x20030000
 80141ec:	200274b8 	.word	0x200274b8

080141f0 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 80141f0:	b580      	push	{r7, lr}
 80141f2:	b082      	sub	sp, #8
 80141f4:	af00      	add	r7, sp, #0
 80141f6:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 80141f8:	6879      	ldr	r1, [r7, #4]
 80141fa:	4805      	ldr	r0, [pc, #20]	; (8014210 <TL_MM_EvtDone+0x20>)
 80141fc:	f7ff fd32 	bl	8013c64 <LST_insert_tail>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8014200:	4804      	ldr	r0, [pc, #16]	; (8014214 <TL_MM_EvtDone+0x24>)
 8014202:	f001 fb27 	bl	8015854 <HW_IPCC_MM_SendFreeBuf>

  return;
 8014206:	bf00      	nop
}
 8014208:	3708      	adds	r7, #8
 801420a:	46bd      	mov	sp, r7
 801420c:	bd80      	pop	{r7, pc}
 801420e:	bf00      	nop
 8014210:	200274a0 	.word	0x200274a0
 8014214:	08014219 	.word	0x08014219

08014218 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8014218:	b580      	push	{r7, lr}
 801421a:	b082      	sub	sp, #8
 801421c:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 801421e:	e00c      	b.n	801423a <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8014220:	1d3b      	adds	r3, r7, #4
 8014222:	4619      	mov	r1, r3
 8014224:	480a      	ldr	r0, [pc, #40]	; (8014250 <SendFreeBuf+0x38>)
 8014226:	f7ff fd60 	bl	8013cea <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 801422a:	4b0a      	ldr	r3, [pc, #40]	; (8014254 <SendFreeBuf+0x3c>)
 801422c:	691b      	ldr	r3, [r3, #16]
 801422e:	691b      	ldr	r3, [r3, #16]
 8014230:	687a      	ldr	r2, [r7, #4]
 8014232:	4611      	mov	r1, r2
 8014234:	4618      	mov	r0, r3
 8014236:	f7ff fd15 	bl	8013c64 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 801423a:	4805      	ldr	r0, [pc, #20]	; (8014250 <SendFreeBuf+0x38>)
 801423c:	f7ff fcce 	bl	8013bdc <LST_is_empty>
 8014240:	4603      	mov	r3, r0
 8014242:	2b00      	cmp	r3, #0
 8014244:	d0ec      	beq.n	8014220 <SendFreeBuf+0x8>
  }

  return;
 8014246:	bf00      	nop
}
 8014248:	3708      	adds	r7, #8
 801424a:	46bd      	mov	sp, r7
 801424c:	bd80      	pop	{r7, pc}
 801424e:	bf00      	nop
 8014250:	200274a0 	.word	0x200274a0
 8014254:	20030000 	.word	0x20030000

08014258 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8014258:	b580      	push	{r7, lr}
 801425a:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 801425c:	4805      	ldr	r0, [pc, #20]	; (8014274 <TL_TRACES_Init+0x1c>)
 801425e:	f7ff fcad 	bl	8013bbc <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8014262:	4b05      	ldr	r3, [pc, #20]	; (8014278 <TL_TRACES_Init+0x20>)
 8014264:	695b      	ldr	r3, [r3, #20]
 8014266:	4a03      	ldr	r2, [pc, #12]	; (8014274 <TL_TRACES_Init+0x1c>)
 8014268:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 801426a:	f001 fb29 	bl	80158c0 <HW_IPCC_TRACES_Init>

  return;
 801426e:	bf00      	nop
}
 8014270:	bd80      	pop	{r7, pc}
 8014272:	bf00      	nop
 8014274:	200300b0 	.word	0x200300b0
 8014278:	20030000 	.word	0x20030000

0801427c <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 801427c:	b580      	push	{r7, lr}
 801427e:	b082      	sub	sp, #8
 8014280:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8014282:	e008      	b.n	8014296 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8014284:	1d3b      	adds	r3, r7, #4
 8014286:	4619      	mov	r1, r3
 8014288:	4808      	ldr	r0, [pc, #32]	; (80142ac <HW_IPCC_TRACES_EvtNot+0x30>)
 801428a:	f7ff fd2e 	bl	8013cea <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	4618      	mov	r0, r3
 8014292:	f7ec ffc1 	bl	8001218 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8014296:	4805      	ldr	r0, [pc, #20]	; (80142ac <HW_IPCC_TRACES_EvtNot+0x30>)
 8014298:	f7ff fca0 	bl	8013bdc <LST_is_empty>
 801429c:	4603      	mov	r3, r0
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d0f0      	beq.n	8014284 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 80142a2:	bf00      	nop
}
 80142a4:	3708      	adds	r7, #8
 80142a6:	46bd      	mov	sp, r7
 80142a8:	bd80      	pop	{r7, pc}
 80142aa:	bf00      	nop
 80142ac:	200300b0 	.word	0x200300b0

080142b0 <APP_THREAD_Init>:
/* USER CODE END PV */

/* Functions Definition ------------------------------------------------------*/

void APP_THREAD_Init( void )
{
 80142b0:	b580      	push	{r7, lr}
 80142b2:	b082      	sub	sp, #8
 80142b4:	af00      	add	r7, sp, #0
  /* USER CODE END APP_THREAD_INIT_1 */

  SHCI_CmdStatus_t ThreadInitStatus;
  
  /* Check the compatibility with the Coprocessor Wireless Firmware loaded */
  APP_THREAD_CheckWirelessFirmwareInfo();
 80142b6:	f000 fa21 	bl	80146fc <APP_THREAD_CheckWirelessFirmwareInfo>
#if (CFG_USB_INTERFACE_ENABLE != 0)
  VCP_Init(&VcpTxBuffer[0], &VcpRxBuffer[0]);
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */

  /* Register cmdbuffer */
  APP_THREAD_RegisterCmdBuffer(&ThreadOtCmdBuffer);
 80142ba:	480e      	ldr	r0, [pc, #56]	; (80142f4 <APP_THREAD_Init+0x44>)
 80142bc:	f000 ff00 	bl	80150c0 <APP_THREAD_RegisterCmdBuffer>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_DISABLE);
 80142c0:	2101      	movs	r1, #1
 80142c2:	2002      	movs	r0, #2
 80142c4:	f001 fb24 	bl	8015910 <UTIL_LPM_SetOffMode>

  /* Init config buffer and call TL_THREAD_Init */
  APP_THREAD_TL_THREAD_INIT();
 80142c8:	f000 fff2 	bl	80152b0 <APP_THREAD_TL_THREAD_INIT>

  /* Configure UART for sending CLI command from M4 */
  APP_THREAD_Init_UART_CLI();
 80142cc:	f000 ffde 	bl	801528c <APP_THREAD_Init_UART_CLI>

  /* Send Thread start system cmd to M0 */
  ThreadInitStatus = SHCI_C2_THREAD_Init();
 80142d0:	f7ff fa89 	bl	80137e6 <SHCI_C2_THREAD_Init>
 80142d4:	4603      	mov	r3, r0
 80142d6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN APP_THREAD_INIT_TIMER */

  /* USER CODE END APP_THREAD_INIT_TIMER */

  /* Create the different FreeRTOS tasks requested to run this Thread application*/
  OsTaskMsgM0ToM4Id = osThreadNew(APP_THREAD_FreeRTOSProcessMsgM0ToM4Task, NULL,&ThreadMsgM0ToM4Process_attr);
 80142d8:	4a07      	ldr	r2, [pc, #28]	; (80142f8 <APP_THREAD_Init+0x48>)
 80142da:	2100      	movs	r1, #0
 80142dc:	4807      	ldr	r0, [pc, #28]	; (80142fc <APP_THREAD_Init+0x4c>)
 80142de:	f7f9 fedb 	bl	800e098 <osThreadNew>
 80142e2:	4602      	mov	r2, r0
 80142e4:	4b06      	ldr	r3, [pc, #24]	; (8014300 <APP_THREAD_Init+0x50>)
 80142e6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN APP_THREAD_INIT_FREERTOS */

  /* USER CODE END APP_THREAD_INIT_FREERTOS */

  /* Configure the Thread device at start */
  APP_THREAD_DeviceConfig();
 80142e8:	f000 f892 	bl	8014410 <APP_THREAD_DeviceConfig>

  /* USER CODE BEGIN APP_THREAD_INIT_2 */

  /* USER CODE END APP_THREAD_INIT_2 */
}
 80142ec:	bf00      	nop
 80142ee:	3708      	adds	r7, #8
 80142f0:	46bd      	mov	sp, r7
 80142f2:	bd80      	pop	{r7, pc}
 80142f4:	20030838 	.word	0x20030838
 80142f8:	08017984 	.word	0x08017984
 80142fc:	080147b9 	.word	0x080147b9
 8014300:	200275d0 	.word	0x200275d0

08014304 <APP_THREAD_Error>:
  * @param  ErrId :
  * @param  ErrCode
  * @retval None
  */
void APP_THREAD_Error(uint32_t ErrId, uint32_t ErrCode)
{
 8014304:	b580      	push	{r7, lr}
 8014306:	b082      	sub	sp, #8
 8014308:	af00      	add	r7, sp, #0
 801430a:	6078      	str	r0, [r7, #4]
 801430c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN APP_THREAD_Error_1 */

  /* USER CODE END APP_THREAD_Error_1 */
  switch(ErrId)
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	2b1a      	cmp	r3, #26
 8014312:	d861      	bhi.n	80143d8 <APP_THREAD_Error+0xd4>
 8014314:	a201      	add	r2, pc, #4	; (adr r2, 801431c <APP_THREAD_Error+0x18>)
 8014316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801431a:	bf00      	nop
 801431c:	08014389 	.word	0x08014389
 8014320:	08014393 	.word	0x08014393
 8014324:	0801439d 	.word	0x0801439d
 8014328:	080143a7 	.word	0x080143a7
 801432c:	080143b1 	.word	0x080143b1
 8014330:	080143bb 	.word	0x080143bb
 8014334:	080143c5 	.word	0x080143c5
 8014338:	080143d9 	.word	0x080143d9
 801433c:	080143d9 	.word	0x080143d9
 8014340:	080143d9 	.word	0x080143d9
 8014344:	080143d9 	.word	0x080143d9
 8014348:	080143d9 	.word	0x080143d9
 801434c:	080143d9 	.word	0x080143d9
 8014350:	080143d9 	.word	0x080143d9
 8014354:	080143d9 	.word	0x080143d9
 8014358:	080143d9 	.word	0x080143d9
 801435c:	080143d9 	.word	0x080143d9
 8014360:	080143d9 	.word	0x080143d9
 8014364:	080143d9 	.word	0x080143d9
 8014368:	080143d9 	.word	0x080143d9
 801436c:	080143d9 	.word	0x080143d9
 8014370:	080143d9 	.word	0x080143d9
 8014374:	080143d9 	.word	0x080143d9
 8014378:	080143d9 	.word	0x080143d9
 801437c:	080143d9 	.word	0x080143d9
 8014380:	080143d9 	.word	0x080143d9
 8014384:	080143cf 	.word	0x080143cf
  {
  case ERR_REC_MULTI_MSG_FROM_M0 :
    APP_THREAD_TraceError("ERROR : ERR_REC_MULTI_MSG_FROM_M0 ", ErrCode);
 8014388:	6839      	ldr	r1, [r7, #0]
 801438a:	4818      	ldr	r0, [pc, #96]	; (80143ec <APP_THREAD_Error+0xe8>)
 801438c:	f000 f9aa 	bl	80146e4 <APP_THREAD_TraceError>
    break;
 8014390:	e027      	b.n	80143e2 <APP_THREAD_Error+0xde>
  case ERR_THREAD_SET_STATE_CB :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_STATE_CB ",ErrCode);
 8014392:	6839      	ldr	r1, [r7, #0]
 8014394:	4816      	ldr	r0, [pc, #88]	; (80143f0 <APP_THREAD_Error+0xec>)
 8014396:	f000 f9a5 	bl	80146e4 <APP_THREAD_TraceError>
    break;
 801439a:	e022      	b.n	80143e2 <APP_THREAD_Error+0xde>
  case ERR_THREAD_SET_CHANNEL :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_CHANNEL ",ErrCode);
 801439c:	6839      	ldr	r1, [r7, #0]
 801439e:	4815      	ldr	r0, [pc, #84]	; (80143f4 <APP_THREAD_Error+0xf0>)
 80143a0:	f000 f9a0 	bl	80146e4 <APP_THREAD_TraceError>
    break;
 80143a4:	e01d      	b.n	80143e2 <APP_THREAD_Error+0xde>
  case ERR_THREAD_SET_PANID :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_PANID ",ErrCode);
 80143a6:	6839      	ldr	r1, [r7, #0]
 80143a8:	4813      	ldr	r0, [pc, #76]	; (80143f8 <APP_THREAD_Error+0xf4>)
 80143aa:	f000 f99b 	bl	80146e4 <APP_THREAD_TraceError>
    break;
 80143ae:	e018      	b.n	80143e2 <APP_THREAD_Error+0xde>
  case ERR_THREAD_IPV6_ENABLE :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_IPV6_ENABLE ",ErrCode);
 80143b0:	6839      	ldr	r1, [r7, #0]
 80143b2:	4812      	ldr	r0, [pc, #72]	; (80143fc <APP_THREAD_Error+0xf8>)
 80143b4:	f000 f996 	bl	80146e4 <APP_THREAD_TraceError>
    break;
 80143b8:	e013      	b.n	80143e2 <APP_THREAD_Error+0xde>
  case ERR_THREAD_START :
    APP_THREAD_TraceError("ERROR: ERR_THREAD_START ", ErrCode);
 80143ba:	6839      	ldr	r1, [r7, #0]
 80143bc:	4810      	ldr	r0, [pc, #64]	; (8014400 <APP_THREAD_Error+0xfc>)
 80143be:	f000 f991 	bl	80146e4 <APP_THREAD_TraceError>
    break;
 80143c2:	e00e      	b.n	80143e2 <APP_THREAD_Error+0xde>
  case ERR_THREAD_ERASE_PERSISTENT_INFO :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_ERASE_PERSISTENT_INFO ",ErrCode);
 80143c4:	6839      	ldr	r1, [r7, #0]
 80143c6:	480f      	ldr	r0, [pc, #60]	; (8014404 <APP_THREAD_Error+0x100>)
 80143c8:	f000 f98c 	bl	80146e4 <APP_THREAD_TraceError>
    break;
 80143cc:	e009      	b.n	80143e2 <APP_THREAD_Error+0xde>
  case ERR_THREAD_CHECK_WIRELESS :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_CHECK_WIRELESS ",ErrCode);
 80143ce:	6839      	ldr	r1, [r7, #0]
 80143d0:	480d      	ldr	r0, [pc, #52]	; (8014408 <APP_THREAD_Error+0x104>)
 80143d2:	f000 f987 	bl	80146e4 <APP_THREAD_TraceError>
    break;
 80143d6:	e004      	b.n	80143e2 <APP_THREAD_Error+0xde>
  /* USER CODE BEGIN APP_THREAD_Error_2 */

  /* USER CODE END APP_THREAD_Error_2 */
  default :
    APP_THREAD_TraceError("ERROR Unknown ", 0);
 80143d8:	2100      	movs	r1, #0
 80143da:	480c      	ldr	r0, [pc, #48]	; (801440c <APP_THREAD_Error+0x108>)
 80143dc:	f000 f982 	bl	80146e4 <APP_THREAD_TraceError>
    break;
 80143e0:	bf00      	nop
  }
}
 80143e2:	bf00      	nop
 80143e4:	3708      	adds	r7, #8
 80143e6:	46bd      	mov	sp, r7
 80143e8:	bd80      	pop	{r7, pc}
 80143ea:	bf00      	nop
 80143ec:	08017370 	.word	0x08017370
 80143f0:	08017394 	.word	0x08017394
 80143f4:	080173b8 	.word	0x080173b8
 80143f8:	080173d8 	.word	0x080173d8
 80143fc:	080173f8 	.word	0x080173f8
 8014400:	08017418 	.word	0x08017418
 8014404:	08017434 	.word	0x08017434
 8014408:	08017460 	.word	0x08017460
 801440c:	08017484 	.word	0x08017484

08014410 <APP_THREAD_DeviceConfig>:
 * @brief Thread initialization.
 * @param  None
 * @retval None
 */
static void APP_THREAD_DeviceConfig(void)
{
 8014410:	b590      	push	{r4, r7, lr}
 8014412:	b083      	sub	sp, #12
 8014414:	af00      	add	r7, sp, #0
  otError error;
  error = otInstanceErasePersistentInfo(NULL);
 8014416:	2000      	movs	r0, #0
 8014418:	f7fe fdf2 	bl	8013000 <otInstanceErasePersistentInfo>
 801441c:	4603      	mov	r3, r0
 801441e:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8014420:	79fb      	ldrb	r3, [r7, #7]
 8014422:	2b00      	cmp	r3, #0
 8014424:	d004      	beq.n	8014430 <APP_THREAD_DeviceConfig+0x20>
  {
    APP_THREAD_Error(ERR_THREAD_ERASE_PERSISTENT_INFO,error);
 8014426:	79fb      	ldrb	r3, [r7, #7]
 8014428:	4619      	mov	r1, r3
 801442a:	2006      	movs	r0, #6
 801442c:	f7ff ff6a 	bl	8014304 <APP_THREAD_Error>
  }
  otInstanceFinalize(NULL);
 8014430:	2000      	movs	r0, #0
 8014432:	f7fe fd88 	bl	8012f46 <otInstanceFinalize>
  otInstanceInitSingle();
 8014436:	f7fe fd5f 	bl	8012ef8 <otInstanceInitSingle>
  error = otSetStateChangedCallback(NULL, APP_THREAD_StateNotif, NULL);
 801443a:	2200      	movs	r2, #0
 801443c:	497b      	ldr	r1, [pc, #492]	; (801462c <APP_THREAD_DeviceConfig+0x21c>)
 801443e:	2000      	movs	r0, #0
 8014440:	f7fe fda8 	bl	8012f94 <otSetStateChangedCallback>
 8014444:	4603      	mov	r3, r0
 8014446:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8014448:	79fb      	ldrb	r3, [r7, #7]
 801444a:	2b00      	cmp	r3, #0
 801444c:	d004      	beq.n	8014458 <APP_THREAD_DeviceConfig+0x48>
  {
    APP_THREAD_Error(ERR_THREAD_SET_STATE_CB,error);
 801444e:	79fb      	ldrb	r3, [r7, #7]
 8014450:	4619      	mov	r1, r3
 8014452:	2001      	movs	r0, #1
 8014454:	f7ff ff56 	bl	8014304 <APP_THREAD_Error>
  }
  error = otLinkSetChannel(NULL, C_CHANNEL_NB);
 8014458:	2117      	movs	r1, #23
 801445a:	2000      	movs	r0, #0
 801445c:	f7fe fe91 	bl	8013182 <otLinkSetChannel>
 8014460:	4603      	mov	r3, r0
 8014462:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8014464:	79fb      	ldrb	r3, [r7, #7]
 8014466:	2b00      	cmp	r3, #0
 8014468:	d004      	beq.n	8014474 <APP_THREAD_DeviceConfig+0x64>
  {
    APP_THREAD_Error(ERR_THREAD_SET_CHANNEL,error);
 801446a:	79fb      	ldrb	r3, [r7, #7]
 801446c:	4619      	mov	r1, r3
 801446e:	2002      	movs	r0, #2
 8014470:	f7ff ff48 	bl	8014304 <APP_THREAD_Error>
  }
  error = otLinkSetPanId(NULL, C_PANID);
 8014474:	f241 2134 	movw	r1, #4660	; 0x1234
 8014478:	2000      	movs	r0, #0
 801447a:	f7fe feb2 	bl	80131e2 <otLinkSetPanId>
 801447e:	4603      	mov	r3, r0
 8014480:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8014482:	79fb      	ldrb	r3, [r7, #7]
 8014484:	2b00      	cmp	r3, #0
 8014486:	d004      	beq.n	8014492 <APP_THREAD_DeviceConfig+0x82>
  {
    APP_THREAD_Error(ERR_THREAD_SET_PANID,error);
 8014488:	79fb      	ldrb	r3, [r7, #7]
 801448a:	4619      	mov	r1, r3
 801448c:	2003      	movs	r0, #3
 801448e:	f7ff ff39 	bl	8014304 <APP_THREAD_Error>
  }
  error = otIp6SetEnabled(NULL, true);
 8014492:	2101      	movs	r1, #1
 8014494:	2000      	movs	r0, #0
 8014496:	f7fe fddc 	bl	8013052 <otIp6SetEnabled>
 801449a:	4603      	mov	r3, r0
 801449c:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 801449e:	79fb      	ldrb	r3, [r7, #7]
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d004      	beq.n	80144ae <APP_THREAD_DeviceConfig+0x9e>
  {
    APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE,error);
 80144a4:	79fb      	ldrb	r3, [r7, #7]
 80144a6:	4619      	mov	r1, r3
 80144a8:	2004      	movs	r0, #4
 80144aa:	f7ff ff2b 	bl	8014304 <APP_THREAD_Error>
  }
  error = otThreadSetEnabled(NULL, true);
 80144ae:	2101      	movs	r1, #1
 80144b0:	2000      	movs	r0, #0
 80144b2:	f7ff fc37 	bl	8013d24 <otThreadSetEnabled>
 80144b6:	4603      	mov	r3, r0
 80144b8:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 80144ba:	79fb      	ldrb	r3, [r7, #7]
 80144bc:	2b00      	cmp	r3, #0
 80144be:	d004      	beq.n	80144ca <APP_THREAD_DeviceConfig+0xba>
  {
    APP_THREAD_Error(ERR_THREAD_START,error);
 80144c0:	79fb      	ldrb	r3, [r7, #7]
 80144c2:	4619      	mov	r1, r3
 80144c4:	2005      	movs	r0, #5
 80144c6:	f7ff ff1d 	bl	8014304 <APP_THREAD_Error>
  }

  /* USER CODE BEGIN DEVICECONFIG */
	error = otThreadSetEnabled(NULL, false);
 80144ca:	2100      	movs	r1, #0
 80144cc:	2000      	movs	r0, #0
 80144ce:	f7ff fc29 	bl	8013d24 <otThreadSetEnabled>
 80144d2:	4603      	mov	r3, r0
 80144d4:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 80144d6:	79fb      	ldrb	r3, [r7, #7]
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d004      	beq.n	80144e6 <APP_THREAD_DeviceConfig+0xd6>
		APP_THREAD_Error(ERR_THREAD_START, error);
 80144dc:	79fb      	ldrb	r3, [r7, #7]
 80144de:	4619      	mov	r1, r3
 80144e0:	2005      	movs	r0, #5
 80144e2:	f7ff ff0f 	bl	8014304 <APP_THREAD_Error>
	}

	error = otIp6SetEnabled(NULL, false);
 80144e6:	2100      	movs	r1, #0
 80144e8:	2000      	movs	r0, #0
 80144ea:	f7fe fdb2 	bl	8013052 <otIp6SetEnabled>
 80144ee:	4603      	mov	r3, r0
 80144f0:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 80144f2:	79fb      	ldrb	r3, [r7, #7]
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	d004      	beq.n	8014502 <APP_THREAD_DeviceConfig+0xf2>
		APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE, error);
 80144f8:	79fb      	ldrb	r3, [r7, #7]
 80144fa:	4619      	mov	r1, r3
 80144fc:	2004      	movs	r0, #4
 80144fe:	f7ff ff01 	bl	8014304 <APP_THREAD_Error>
	}

	error = otPlatRadioSetTransmitPower(NULL, TRANSMIT_POWER);
 8014502:	2106      	movs	r1, #6
 8014504:	2000      	movs	r0, #0
 8014506:	f7ff f93b 	bl	8013780 <otPlatRadioSetTransmitPower>
 801450a:	4603      	mov	r3, r0
 801450c:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 801450e:	79fb      	ldrb	r3, [r7, #7]
 8014510:	2b00      	cmp	r3, #0
 8014512:	d004      	beq.n	801451e <APP_THREAD_DeviceConfig+0x10e>
		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
 8014514:	79fb      	ldrb	r3, [r7, #7]
 8014516:	4619      	mov	r1, r3
 8014518:	2002      	movs	r0, #2
 801451a:	f7ff fef3 	bl	8014304 <APP_THREAD_Error>
	}

	otChildSupervisionSetCheckTimeout(NULL, CHILD_SUPERVISION_TIMEOUT);
 801451e:	2103      	movs	r1, #3
 8014520:	2000      	movs	r0, #0
 8014522:	f7fe f97f 	bl	8012824 <otChildSupervisionSetCheckTimeout>
	otChildSupervisionSetInterval(NULL, CHILD_SUPERVISION_INTERVAL);
 8014526:	2102      	movs	r1, #2
 8014528:	2000      	movs	r0, #0
 801452a:	f7fe f94c 	bl	80127c6 <otChildSupervisionSetInterval>

//   error = otIp6AddressFromString("ff12::1", &multicastAddr);
//   error = otIp6SubscribeMulticastAddress(NULL, &multicastAddr);

	error = otThreadSetMasterKey(NULL, &masterKey);
 801452e:	4940      	ldr	r1, [pc, #256]	; (8014630 <APP_THREAD_DeviceConfig+0x220>)
 8014530:	2000      	movs	r0, #0
 8014532:	f7ff fc56 	bl	8013de2 <otThreadSetMasterKey>
 8014536:	4603      	mov	r3, r0
 8014538:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 801453a:	79fb      	ldrb	r3, [r7, #7]
 801453c:	2b00      	cmp	r3, #0
 801453e:	d004      	beq.n	801454a <APP_THREAD_DeviceConfig+0x13a>
		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
 8014540:	79fb      	ldrb	r3, [r7, #7]
 8014542:	4619      	mov	r1, r3
 8014544:	2002      	movs	r0, #2
 8014546:	f7ff fedd 	bl	8014304 <APP_THREAD_Error>
	}

	error = otThreadSetNetworkName(NULL, networkName);
 801454a:	493a      	ldr	r1, [pc, #232]	; (8014634 <APP_THREAD_DeviceConfig+0x224>)
 801454c:	2000      	movs	r0, #0
 801454e:	f7ff fc77 	bl	8013e40 <otThreadSetNetworkName>
 8014552:	4603      	mov	r3, r0
 8014554:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 8014556:	79fb      	ldrb	r3, [r7, #7]
 8014558:	2b00      	cmp	r3, #0
 801455a:	d004      	beq.n	8014566 <APP_THREAD_DeviceConfig+0x156>
		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
 801455c:	79fb      	ldrb	r3, [r7, #7]
 801455e:	4619      	mov	r1, r3
 8014560:	2002      	movs	r0, #2
 8014562:	f7ff fecf 	bl	8014304 <APP_THREAD_Error>
	}
	error = otThreadSetExtendedPanId(NULL, &extendedPanId);
 8014566:	4934      	ldr	r1, [pc, #208]	; (8014638 <APP_THREAD_DeviceConfig+0x228>)
 8014568:	2000      	movs	r0, #0
 801456a:	f7ff fc0b 	bl	8013d84 <otThreadSetExtendedPanId>
 801456e:	4603      	mov	r3, r0
 8014570:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 8014572:	79fb      	ldrb	r3, [r7, #7]
 8014574:	2b00      	cmp	r3, #0
 8014576:	d004      	beq.n	8014582 <APP_THREAD_DeviceConfig+0x172>
		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
 8014578:	79fb      	ldrb	r3, [r7, #7]
 801457a:	4619      	mov	r1, r3
 801457c:	2002      	movs	r0, #2
 801457e:	f7ff fec1 	bl	8014304 <APP_THREAD_Error>
	}

	error = otIp6SetEnabled(NULL, true);
 8014582:	2101      	movs	r1, #1
 8014584:	2000      	movs	r0, #0
 8014586:	f7fe fd64 	bl	8013052 <otIp6SetEnabled>
 801458a:	4603      	mov	r3, r0
 801458c:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 801458e:	79fb      	ldrb	r3, [r7, #7]
 8014590:	2b00      	cmp	r3, #0
 8014592:	d004      	beq.n	801459e <APP_THREAD_DeviceConfig+0x18e>
		APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE, error);
 8014594:	79fb      	ldrb	r3, [r7, #7]
 8014596:	4619      	mov	r1, r3
 8014598:	2004      	movs	r0, #4
 801459a:	f7ff feb3 	bl	8014304 <APP_THREAD_Error>
	}

	error = otThreadSetEnabled(NULL, true);
 801459e:	2101      	movs	r1, #1
 80145a0:	2000      	movs	r0, #0
 80145a2:	f7ff fbbf 	bl	8013d24 <otThreadSetEnabled>
 80145a6:	4603      	mov	r3, r0
 80145a8:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 80145aa:	79fb      	ldrb	r3, [r7, #7]
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	d004      	beq.n	80145ba <APP_THREAD_DeviceConfig+0x1aa>
		APP_THREAD_Error(ERR_THREAD_START, error);
 80145b0:	79fb      	ldrb	r3, [r7, #7]
 80145b2:	4619      	mov	r1, r3
 80145b4:	2005      	movs	r0, #5
 80145b6:	f7ff fea5 	bl	8014304 <APP_THREAD_Error>
	}

	error = otCoapStart(NULL, OT_DEFAULT_COAP_PORT);
 80145ba:	f241 6133 	movw	r1, #5683	; 0x1633
 80145be:	2000      	movs	r0, #0
 80145c0:	f7fe fc08 	bl	8012dd4 <otCoapStart>
 80145c4:	4603      	mov	r3, r0
 80145c6:	71fb      	strb	r3, [r7, #7]
	//  error = otCoapAddResource(NULL, &OT_Light_Ressource);
	error = otCoapAddResource(NULL, &OT_Lights_Complex_Ressource);
 80145c8:	491c      	ldr	r1, [pc, #112]	; (801463c <APP_THREAD_DeviceConfig+0x22c>)
 80145ca:	2000      	movs	r0, #0
 80145cc:	f7fe fc32 	bl	8012e34 <otCoapAddResource>
 80145d0:	4603      	mov	r3, r0
 80145d2:	71fb      	strb	r3, [r7, #7]
	error = otCoapAddResource(NULL, &OT_Lights_Simple_Ressource);
 80145d4:	491a      	ldr	r1, [pc, #104]	; (8014640 <APP_THREAD_DeviceConfig+0x230>)
 80145d6:	2000      	movs	r0, #0
 80145d8:	f7fe fc2c 	bl	8012e34 <otCoapAddResource>
 80145dc:	4603      	mov	r3, r0
 80145de:	71fb      	strb	r3, [r7, #7]
	error = otCoapAddResource(NULL, &OT_Border_Time_Ressource);
 80145e0:	4918      	ldr	r1, [pc, #96]	; (8014644 <APP_THREAD_DeviceConfig+0x234>)
 80145e2:	2000      	movs	r0, #0
 80145e4:	f7fe fc26 	bl	8012e34 <otCoapAddResource>
 80145e8:	4603      	mov	r3, r0
 80145ea:	71fb      	strb	r3, [r7, #7]
	error = otCoapAddResource(NULL, &OT_Node_Info_Ressource);
 80145ec:	4916      	ldr	r1, [pc, #88]	; (8014648 <APP_THREAD_DeviceConfig+0x238>)
 80145ee:	2000      	movs	r0, #0
 80145f0:	f7fe fc20 	bl	8012e34 <otCoapAddResource>
 80145f4:	4603      	mov	r3, r0
 80145f6:	71fb      	strb	r3, [r7, #7]
	  error = otCoapAddResource(NULL, &OT_RessourceFuotaProvisioning);
	  error = otCoapAddResource(NULL, &OT_RessourceFuotaParameters);
	  error = otCoapAddResource(NULL, &OT_RessourceFuotaSend);
#endif
#ifndef DONGLE_CODE
    error = otCoapAddResource(NULL, &OT_Toggle_Logging_Ressource);
 80145f8:	4914      	ldr	r1, [pc, #80]	; (801464c <APP_THREAD_DeviceConfig+0x23c>)
 80145fa:	2000      	movs	r0, #0
 80145fc:	f7fe fc1a 	bl	8012e34 <otCoapAddResource>
 8014600:	4603      	mov	r3, r0
 8014602:	71fb      	strb	r3, [r7, #7]
#endif
	// set default multicast address for border router
//    otIp6AddressFromString("ff03::1", &borderRouter.ipv6);
	otIp6AddressFromString("ff03::1", &multicastAddr);
 8014604:	4912      	ldr	r1, [pc, #72]	; (8014650 <APP_THREAD_DeviceConfig+0x240>)
 8014606:	4813      	ldr	r0, [pc, #76]	; (8014654 <APP_THREAD_DeviceConfig+0x244>)
 8014608:	f7fe fd89 	bl	801311e <otIp6AddressFromString>
	memcpy(&borderRouter.ipv6, &multicastAddr, sizeof(multicastAddr));
 801460c:	4a12      	ldr	r2, [pc, #72]	; (8014658 <APP_THREAD_DeviceConfig+0x248>)
 801460e:	4b10      	ldr	r3, [pc, #64]	; (8014650 <APP_THREAD_DeviceConfig+0x240>)
 8014610:	4614      	mov	r4, r2
 8014612:	6818      	ldr	r0, [r3, #0]
 8014614:	6859      	ldr	r1, [r3, #4]
 8014616:	689a      	ldr	r2, [r3, #8]
 8014618:	68db      	ldr	r3, [r3, #12]
 801461a:	c40f      	stmia	r4!, {r0, r1, r2, r3}

	// set UID in local state variable
//	msgSendMyIP.uid = (uint32_t)  DBGMCU->IDCODE;
//	 = UID64_BASE;
	stm32UID(msgSendMyIP.uid);
 801461c:	480f      	ldr	r0, [pc, #60]	; (801465c <APP_THREAD_DeviceConfig+0x24c>)
 801461e:	f000 f8e5 	bl	80147ec <stm32UID>

  /* USER CODE END DEVICECONFIG */
}
 8014622:	bf00      	nop
 8014624:	370c      	adds	r7, #12
 8014626:	46bd      	mov	sp, r7
 8014628:	bd90      	pop	{r4, r7, pc}
 801462a:	bf00      	nop
 801462c:	08014661 	.word	0x08014661
 8014630:	080179fc 	.word	0x080179fc
 8014634:	08017a14 	.word	0x08017a14
 8014638:	08017a0c 	.word	0x08017a0c
 801463c:	20000088 	.word	0x20000088
 8014640:	20000098 	.word	0x20000098
 8014644:	200000a8 	.word	0x200000a8
 8014648:	200000b8 	.word	0x200000b8
 801464c:	200000c8 	.word	0x200000c8
 8014650:	2002864c 	.word	0x2002864c
 8014654:	08017494 	.word	0x08017494
 8014658:	200276a0 	.word	0x200276a0
 801465c:	200000f0 	.word	0x200000f0

08014660 <APP_THREAD_StateNotif>:
 *         aContext: Context
 *
 * @retval None
 */
static void APP_THREAD_StateNotif(uint32_t NotifFlags, void *pContext)
{
 8014660:	b590      	push	{r4, r7, lr}
 8014662:	b083      	sub	sp, #12
 8014664:	af00      	add	r7, sp, #0
 8014666:	6078      	str	r0, [r7, #4]
 8014668:	6039      	str	r1, [r7, #0]

  /* USER CODE BEGIN APP_THREAD_STATENOTIF */

  /* USER CODE END APP_THREAD_STATENOTIF */

  if ((NotifFlags & (uint32_t)OT_CHANGED_THREAD_ROLE) == (uint32_t)OT_CHANGED_THREAD_ROLE)
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	f003 0304 	and.w	r3, r3, #4
 8014670:	2b00      	cmp	r3, #0
 8014672:	d02f      	beq.n	80146d4 <APP_THREAD_StateNotif+0x74>
  {
    switch (otThreadGetDeviceRole(NULL))
 8014674:	2000      	movs	r0, #0
 8014676:	f7ff fc12 	bl	8013e9e <otThreadGetDeviceRole>
 801467a:	4603      	mov	r3, r0
 801467c:	2b04      	cmp	r3, #4
 801467e:	d826      	bhi.n	80146ce <APP_THREAD_StateNotif+0x6e>
 8014680:	a201      	add	r2, pc, #4	; (adr r2, 8014688 <APP_THREAD_StateNotif+0x28>)
 8014682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014686:	bf00      	nop
 8014688:	0801469d 	.word	0x0801469d
 801468c:	080146ad 	.word	0x080146ad
 8014690:	080146bd 	.word	0x080146bd
 8014694:	080146c3 	.word	0x080146c3
 8014698:	080146c9 	.word	0x080146c9
    {
    case OT_DEVICE_ROLE_DISABLED:
      /* USER CODE BEGIN OT_DEVICE_ROLE_DISABLED */
			borderRouter.epoch = 0;
 801469c:	4a10      	ldr	r2, [pc, #64]	; (80146e0 <APP_THREAD_StateNotif+0x80>)
 801469e:	f04f 0300 	mov.w	r3, #0
 80146a2:	f04f 0400 	mov.w	r4, #0
 80146a6:	e9c2 3404 	strd	r3, r4, [r2, #16]
      /* USER CODE END OT_DEVICE_ROLE_DISABLED */
      break;
 80146aa:	e014      	b.n	80146d6 <APP_THREAD_StateNotif+0x76>
    case OT_DEVICE_ROLE_DETACHED:
      /* USER CODE BEGIN OT_DEVICE_ROLE_DETACHED */
			borderRouter.epoch = 0;
 80146ac:	4a0c      	ldr	r2, [pc, #48]	; (80146e0 <APP_THREAD_StateNotif+0x80>)
 80146ae:	f04f 0300 	mov.w	r3, #0
 80146b2:	f04f 0400 	mov.w	r4, #0
 80146b6:	e9c2 3404 	strd	r3, r4, [r2, #16]
      /* USER CODE END OT_DEVICE_ROLE_DETACHED */
      break;
 80146ba:	e00c      	b.n	80146d6 <APP_THREAD_StateNotif+0x76>
#ifdef DONGLE_CODE
			BSP_LED_On(LED_GREEN);
			BSP_LED_Off(LED_RED);
			BSP_LED_Off(LED_BLUE);
#endif
			APP_THREAD_UpdateBorderRouter();
 80146bc:	f000 f90a 	bl	80148d4 <APP_THREAD_UpdateBorderRouter>
      /* USER CODE END OT_DEVICE_ROLE_CHILD */
      break;
 80146c0:	e009      	b.n	80146d6 <APP_THREAD_StateNotif+0x76>
#ifdef DONGLE_CODE
			BSP_LED_Off(LED_GREEN);
			BSP_LED_Off(LED_RED);
			BSP_LED_On(LED_BLUE);
#endif
			APP_THREAD_UpdateBorderRouter();
 80146c2:	f000 f907 	bl	80148d4 <APP_THREAD_UpdateBorderRouter>
      /* USER CODE END OT_DEVICE_ROLE_ROUTER */
      break;
 80146c6:	e006      	b.n	80146d6 <APP_THREAD_StateNotif+0x76>
#ifdef DONGLE_CODE
			BSP_LED_On(LED_GREEN);
			BSP_LED_Off(LED_RED);
			BSP_LED_On(LED_BLUE);
#endif
			APP_THREAD_UpdateBorderRouter();
 80146c8:	f000 f904 	bl	80148d4 <APP_THREAD_UpdateBorderRouter>
      /* USER CODE END OT_DEVICE_ROLE_LEADER */
      break;
 80146cc:	e003      	b.n	80146d6 <APP_THREAD_StateNotif+0x76>
    default:
      /* USER CODE BEGIN DEFAULT */
			APP_THREAD_UpdateBorderRouter();
 80146ce:	f000 f901 	bl	80148d4 <APP_THREAD_UpdateBorderRouter>
      /* USER CODE END DEFAULT */
      break;
 80146d2:	e000      	b.n	80146d6 <APP_THREAD_StateNotif+0x76>
    }
  }
 80146d4:	bf00      	nop
}
 80146d6:	bf00      	nop
 80146d8:	370c      	adds	r7, #12
 80146da:	46bd      	mov	sp, r7
 80146dc:	bd90      	pop	{r4, r7, pc}
 80146de:	bf00      	nop
 80146e0:	200276a0 	.word	0x200276a0

080146e4 <APP_THREAD_TraceError>:
  * @param  pMess  : Message associated to the error.
  * @param  ErrCode: Error code associated to the module (OpenThread or other module if any)
  * @retval None
  */
static void APP_THREAD_TraceError(const char * pMess, uint32_t ErrCode)
{
 80146e4:	b480      	push	{r7}
 80146e6:	b083      	sub	sp, #12
 80146e8:	af00      	add	r7, sp, #0
 80146ea:	6078      	str	r0, [r7, #4]
 80146ec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TRACE_ERROR */

  /* USER CODE END TRACE_ERROR */
}
 80146ee:	bf00      	nop
 80146f0:	370c      	adds	r7, #12
 80146f2:	46bd      	mov	sp, r7
 80146f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146f8:	4770      	bx	lr
	...

080146fc <APP_THREAD_CheckWirelessFirmwareInfo>:
 *        and display associated informations
 * @param  None
 * @retval None
 */
static void APP_THREAD_CheckWirelessFirmwareInfo(void)
{
 80146fc:	b580      	push	{r7, lr}
 80146fe:	b088      	sub	sp, #32
 8014700:	af02      	add	r7, sp, #8
  WirelessFwInfo_t wireless_info_instance;
  WirelessFwInfo_t* p_wireless_info = &wireless_info_instance;
 8014702:	1d3b      	adds	r3, r7, #4
 8014704:	617b      	str	r3, [r7, #20]

  if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success)
 8014706:	6978      	ldr	r0, [r7, #20]
 8014708:	f7ff f89a 	bl	8013840 <SHCI_GetWirelessFwInfo>
 801470c:	4603      	mov	r3, r0
 801470e:	2b00      	cmp	r3, #0
 8014710:	d004      	beq.n	801471c <APP_THREAD_CheckWirelessFirmwareInfo+0x20>
  {
    APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 8014712:	2101      	movs	r1, #1
 8014714:	201a      	movs	r0, #26
 8014716:	f7ff fdf5 	bl	8014304 <APP_THREAD_Error>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
      break;
    }
    APP_DBG("**********************************************************");
  }
}
 801471a:	e03d      	b.n	8014798 <APP_THREAD_CheckWirelessFirmwareInfo+0x9c>
    APP_DBG("**********************************************************");
 801471c:	4a20      	ldr	r2, [pc, #128]	; (80147a0 <APP_THREAD_CheckWirelessFirmwareInfo+0xa4>)
 801471e:	2101      	movs	r1, #1
 8014720:	2000      	movs	r0, #0
 8014722:	f7f1 f92d 	bl	8005980 <logApplication>
    APP_DBG("WIRELESS COPROCESSOR FW:");
 8014726:	4a1f      	ldr	r2, [pc, #124]	; (80147a4 <APP_THREAD_CheckWirelessFirmwareInfo+0xa8>)
 8014728:	2101      	movs	r1, #1
 801472a:	2000      	movs	r0, #0
 801472c:	f7f1 f928 	bl	8005980 <logApplication>
    APP_DBG("VERSION ID = %d.%d.%d", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor, p_wireless_info->VersionSub);
 8014730:	697b      	ldr	r3, [r7, #20]
 8014732:	781b      	ldrb	r3, [r3, #0]
 8014734:	4619      	mov	r1, r3
 8014736:	697b      	ldr	r3, [r7, #20]
 8014738:	785b      	ldrb	r3, [r3, #1]
 801473a:	461a      	mov	r2, r3
 801473c:	697b      	ldr	r3, [r7, #20]
 801473e:	789b      	ldrb	r3, [r3, #2]
 8014740:	9301      	str	r3, [sp, #4]
 8014742:	9200      	str	r2, [sp, #0]
 8014744:	460b      	mov	r3, r1
 8014746:	4a18      	ldr	r2, [pc, #96]	; (80147a8 <APP_THREAD_CheckWirelessFirmwareInfo+0xac>)
 8014748:	2101      	movs	r1, #1
 801474a:	2000      	movs	r0, #0
 801474c:	f7f1 f918 	bl	8005980 <logApplication>
    switch(p_wireless_info->StackType)
 8014750:	697b      	ldr	r3, [r7, #20]
 8014752:	7a5b      	ldrb	r3, [r3, #9]
 8014754:	2b11      	cmp	r3, #17
 8014756:	d009      	beq.n	801476c <APP_THREAD_CheckWirelessFirmwareInfo+0x70>
 8014758:	2b50      	cmp	r3, #80	; 0x50
 801475a:	d00d      	beq.n	8014778 <APP_THREAD_CheckWirelessFirmwareInfo+0x7c>
 801475c:	2b10      	cmp	r3, #16
 801475e:	d111      	bne.n	8014784 <APP_THREAD_CheckWirelessFirmwareInfo+0x88>
      APP_DBG("FW Type : Thread FTD");
 8014760:	4a12      	ldr	r2, [pc, #72]	; (80147ac <APP_THREAD_CheckWirelessFirmwareInfo+0xb0>)
 8014762:	2101      	movs	r1, #1
 8014764:	2000      	movs	r0, #0
 8014766:	f7f1 f90b 	bl	8005980 <logApplication>
      break;
 801476a:	e010      	b.n	801478e <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_DBG("FW Type : Thread MTD");
 801476c:	4a10      	ldr	r2, [pc, #64]	; (80147b0 <APP_THREAD_CheckWirelessFirmwareInfo+0xb4>)
 801476e:	2101      	movs	r1, #1
 8014770:	2000      	movs	r0, #0
 8014772:	f7f1 f905 	bl	8005980 <logApplication>
      break;
 8014776:	e00a      	b.n	801478e <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_DBG("FW Type : Static Concurrent Mode BLE/Thread");
 8014778:	4a0e      	ldr	r2, [pc, #56]	; (80147b4 <APP_THREAD_CheckWirelessFirmwareInfo+0xb8>)
 801477a:	2101      	movs	r1, #1
 801477c:	2000      	movs	r0, #0
 801477e:	f7f1 f8ff 	bl	8005980 <logApplication>
      break;
 8014782:	e004      	b.n	801478e <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 8014784:	2101      	movs	r1, #1
 8014786:	201a      	movs	r0, #26
 8014788:	f7ff fdbc 	bl	8014304 <APP_THREAD_Error>
      break;
 801478c:	bf00      	nop
    APP_DBG("**********************************************************");
 801478e:	4a04      	ldr	r2, [pc, #16]	; (80147a0 <APP_THREAD_CheckWirelessFirmwareInfo+0xa4>)
 8014790:	2101      	movs	r1, #1
 8014792:	2000      	movs	r0, #0
 8014794:	f7f1 f8f4 	bl	8005980 <logApplication>
}
 8014798:	bf00      	nop
 801479a:	3718      	adds	r7, #24
 801479c:	46bd      	mov	sp, r7
 801479e:	bd80      	pop	{r7, pc}
 80147a0:	0801749c 	.word	0x0801749c
 80147a4:	080174d8 	.word	0x080174d8
 80147a8:	080174f4 	.word	0x080174f4
 80147ac:	0801750c 	.word	0x0801750c
 80147b0:	08017524 	.word	0x08017524
 80147b4:	0801753c 	.word	0x0801753c

080147b8 <APP_THREAD_FreeRTOSProcessMsgM0ToM4Task>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void APP_THREAD_FreeRTOSProcessMsgM0ToM4Task(void *argument)
{
 80147b8:	b580      	push	{r7, lr}
 80147ba:	b082      	sub	sp, #8
 80147bc:	af00      	add	r7, sp, #0
 80147be:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN APP_THREAD_FREERTOS_PROCESS_MSG_M0_TO_M4_1 */

    /* USER END END APP_THREAD_FREERTOS_PROCESS_MSG_M0_TO_M4_1 */
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 80147c0:	f04f 32ff 	mov.w	r2, #4294967295
 80147c4:	2101      	movs	r1, #1
 80147c6:	2001      	movs	r0, #1
 80147c8:	f7f9 fdc4 	bl	800e354 <osThreadFlagsWait>
    APP_THREAD_ProcessMsgM0ToM4();
 80147cc:	f000 fda2 	bl	8015314 <APP_THREAD_ProcessMsgM0ToM4>
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 80147d0:	e7f6      	b.n	80147c0 <APP_THREAD_FreeRTOSProcessMsgM0ToM4Task+0x8>

080147d2 <APP_THREAD_FreeRTOSSendCLIToM0Task>:
  }
}

#if (CFG_FULL_LOW_POWER == 0)
static void APP_THREAD_FreeRTOSSendCLIToM0Task(void *argument)
{
 80147d2:	b580      	push	{r7, lr}
 80147d4:	b082      	sub	sp, #8
 80147d6:	af00      	add	r7, sp, #0
 80147d8:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN APP_THREAD_FREERTOS_SEND_CLI_TO_M0_1 */

    /* USER END END APP_THREAD_FREERTOS_SEND_CLI_TO_M0_1 */
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 80147da:	f04f 32ff 	mov.w	r2, #4294967295
 80147de:	2101      	movs	r1, #1
 80147e0:	2001      	movs	r0, #1
 80147e2:	f7f9 fdb7 	bl	800e354 <osThreadFlagsWait>
    Send_CLI_To_M0();
 80147e6:	f000 fd17 	bl	8015218 <Send_CLI_To_M0>
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 80147ea:	e7f6      	b.n	80147da <APP_THREAD_FreeRTOSSendCLIToM0Task+0x8>

080147ec <stm32UID>:
  }
}
#endif /* (CFG_FULL_LOW_POWER == 0) */

/* USER CODE BEGIN FREERTOS_WRAPPER_FUNCTIONS */
void stm32UID(uint8_t* uid) {
 80147ec:	b480      	push	{r7}
 80147ee:	b085      	sub	sp, #20
 80147f0:	af00      	add	r7, sp, #0
 80147f2:	6078      	str	r0, [r7, #4]
  for(uint8_t i = 0; i < 12; i++) {
 80147f4:	2300      	movs	r3, #0
 80147f6:	73fb      	strb	r3, [r7, #15]
 80147f8:	e00c      	b.n	8014814 <stm32UID+0x28>
    uid[i] = *(volatile uint8_t *)(UID_BASE + i);
 80147fa:	7bfa      	ldrb	r2, [r7, #15]
 80147fc:	4b0a      	ldr	r3, [pc, #40]	; (8014828 <stm32UID+0x3c>)
 80147fe:	4413      	add	r3, r2
 8014800:	4619      	mov	r1, r3
 8014802:	7bfb      	ldrb	r3, [r7, #15]
 8014804:	687a      	ldr	r2, [r7, #4]
 8014806:	4413      	add	r3, r2
 8014808:	780a      	ldrb	r2, [r1, #0]
 801480a:	b2d2      	uxtb	r2, r2
 801480c:	701a      	strb	r2, [r3, #0]
  for(uint8_t i = 0; i < 12; i++) {
 801480e:	7bfb      	ldrb	r3, [r7, #15]
 8014810:	3301      	adds	r3, #1
 8014812:	73fb      	strb	r3, [r7, #15]
 8014814:	7bfb      	ldrb	r3, [r7, #15]
 8014816:	2b0b      	cmp	r3, #11
 8014818:	d9ef      	bls.n	80147fa <stm32UID+0xe>
    }
  }
 801481a:	bf00      	nop
 801481c:	3714      	adds	r7, #20
 801481e:	46bd      	mov	sp, r7
 8014820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014824:	4770      	bx	lr
 8014826:	bf00      	nop
 8014828:	1fff7590 	.word	0x1fff7590

0801482c <APP_THREAD_DummyRespHandler>:
  return;
}
#endif

static void APP_THREAD_DummyRespHandler(void *p_context, otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo, otError Result) {
 801482c:	b480      	push	{r7}
 801482e:	b085      	sub	sp, #20
 8014830:	af00      	add	r7, sp, #0
 8014832:	60f8      	str	r0, [r7, #12]
 8014834:	60b9      	str	r1, [r7, #8]
 8014836:	607a      	str	r2, [r7, #4]
 8014838:	603b      	str	r3, [r7, #0]
	UNUSED(p_context);
	UNUSED(pHeader);
	UNUSED(pMessage);
	UNUSED(pMessageInfo);
	UNUSED(Result);
}
 801483a:	bf00      	nop
 801483c:	3714      	adds	r7, #20
 801483e:	46bd      	mov	sp, r7
 8014840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014844:	4770      	bx	lr
	...

08014848 <APP_THREAD_CoapRespHandler_UpdateBorderRouter>:

volatile uint16_t test_num;
static void APP_THREAD_CoapRespHandler_UpdateBorderRouter(otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo, otError Result) {
 8014848:	b5b0      	push	{r4, r5, r7, lr}
 801484a:	b084      	sub	sp, #16
 801484c:	af00      	add	r7, sp, #0
 801484e:	60f8      	str	r0, [r7, #12]
 8014850:	60b9      	str	r1, [r7, #8]
 8014852:	607a      	str	r2, [r7, #4]
 8014854:	70fb      	strb	r3, [r7, #3]

//	taskENTER_CRITICAL();
//	test_num = otMessageGetLength(pMessage);
//	test_num = otMessageRead(pMessage, otMessageGetOffset(pMessage), &receivedSystemCal, sizeof(receivedSystemCal));

	if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &receivedSystemCal, sizeof(receivedSystemCal))
 8014856:	68b8      	ldr	r0, [r7, #8]
 8014858:	f7fe fd1e 	bl	8013298 <otMessageGetOffset>
 801485c:	4603      	mov	r3, r0
 801485e:	4619      	mov	r1, r3
 8014860:	2318      	movs	r3, #24
 8014862:	4a0e      	ldr	r2, [pc, #56]	; (801489c <APP_THREAD_CoapRespHandler_UpdateBorderRouter+0x54>)
 8014864:	68b8      	ldr	r0, [r7, #8]
 8014866:	f7fe fd7c 	bl	8013362 <otMessageRead>
 801486a:	4603      	mov	r3, r0
 801486c:	2b18      	cmp	r3, #24
 801486e:	d110      	bne.n	8014892 <APP_THREAD_CoapRespHandler_UpdateBorderRouter+0x4a>
			== sizeof(receivedSystemCal)) {

			// if successful, update border router state variable
			memcpy(&borderRouter, &receivedSystemCal, sizeof(receivedSystemCal));
 8014870:	4a0b      	ldr	r2, [pc, #44]	; (80148a0 <APP_THREAD_CoapRespHandler_UpdateBorderRouter+0x58>)
 8014872:	4b0a      	ldr	r3, [pc, #40]	; (801489c <APP_THREAD_CoapRespHandler_UpdateBorderRouter+0x54>)
 8014874:	4614      	mov	r4, r2
 8014876:	461d      	mov	r5, r3
 8014878:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801487a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801487c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014880:	e884 0003 	stmia.w	r4, {r0, r1}

			// update the onboard RTC unix time
			updateRTC(borderRouter.epoch);
 8014884:	4b06      	ldr	r3, [pc, #24]	; (80148a0 <APP_THREAD_CoapRespHandler_UpdateBorderRouter+0x58>)
 8014886:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 801488a:	4618      	mov	r0, r3
 801488c:	4621      	mov	r1, r4
 801488e:	f000 f9af 	bl	8014bf0 <updateRTC>
	}
//	taskEXIT_CRITICAL();
}
 8014892:	bf00      	nop
 8014894:	3710      	adds	r7, #16
 8014896:	46bd      	mov	sp, r7
 8014898:	bdb0      	pop	{r4, r5, r7, pc}
 801489a:	bf00      	nop
 801489c:	200276b8 	.word	0x200276b8
 80148a0:	200276a0 	.word	0x200276a0

080148a4 <APP_THREAD_DummyReqHandler>:
 * @brief Dummy request handler
 * @param
 * @retval None
 */
static void APP_THREAD_DummyReqHandler(void *p_context, otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo) {
 80148a4:	b480      	push	{r7}
 80148a6:	b085      	sub	sp, #20
 80148a8:	af00      	add	r7, sp, #0
 80148aa:	60f8      	str	r0, [r7, #12]
 80148ac:	60b9      	str	r1, [r7, #8]
 80148ae:	607a      	str	r2, [r7, #4]
 80148b0:	603b      	str	r3, [r7, #0]
	tempMessageInfo = pMessageInfo;
 80148b2:	4a06      	ldr	r2, [pc, #24]	; (80148cc <APP_THREAD_DummyReqHandler+0x28>)
 80148b4:	683b      	ldr	r3, [r7, #0]
 80148b6:	6013      	str	r3, [r2, #0]
	receivedMessage = (otMessageInfo*) pMessage;
 80148b8:	4a05      	ldr	r2, [pc, #20]	; (80148d0 <APP_THREAD_DummyReqHandler+0x2c>)
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	6013      	str	r3, [r2, #0]
}
 80148be:	bf00      	nop
 80148c0:	3714      	adds	r7, #20
 80148c2:	46bd      	mov	sp, r7
 80148c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148c8:	4770      	bx	lr
 80148ca:	bf00      	nop
 80148cc:	20028608 	.word	0x20028608
 80148d0:	20028660 	.word	0x20028660

080148d4 <APP_THREAD_UpdateBorderRouter>:
//volatile otNetifMulticastAddress *test_addr;
//volatile otExtAddress *test_ext_addr;
//volatile otExtAddress test_1;
//volatile otExtAddress test_2;

void APP_THREAD_UpdateBorderRouter() {
 80148d4:	b580      	push	{r7, lr}
 80148d6:	af00      	add	r7, sp, #0

	// if border router IP is still multicast (ff03::1), attempt to sync
	if (otIp6IsAddressEqual(&multicastAddr, &borderRouter.ipv6)) {
 80148d8:	4906      	ldr	r1, [pc, #24]	; (80148f4 <APP_THREAD_UpdateBorderRouter+0x20>)
 80148da:	4807      	ldr	r0, [pc, #28]	; (80148f8 <APP_THREAD_UpdateBorderRouter+0x24>)
 80148dc:	f7fe fbe9 	bl	80130b2 <otIp6IsAddressEqual>
 80148e0:	4603      	mov	r3, r0
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	d003      	beq.n	80148ee <APP_THREAD_UpdateBorderRouter+0x1a>
		APP_THREAD_SyncWithBorderRouter();
 80148e6:	f000 f809 	bl	80148fc <APP_THREAD_SyncWithBorderRouter>
		APP_THREAD_SendMyInfo();
 80148ea:	f000 f81d 	bl	8014928 <APP_THREAD_SendMyInfo>
	}

	// send IP to border router
	//APP_THREAD_SendMyInfo();
}
 80148ee:	bf00      	nop
 80148f0:	bd80      	pop	{r7, pc}
 80148f2:	bf00      	nop
 80148f4:	200276a0 	.word	0x200276a0
 80148f8:	2002864c 	.word	0x2002864c

080148fc <APP_THREAD_SyncWithBorderRouter>:

// send a GET request to border router via multicast
void APP_THREAD_SyncWithBorderRouter() {
 80148fc:	b580      	push	{r7, lr}
 80148fe:	b084      	sub	sp, #16
 8014900:	af04      	add	r7, sp, #16
	APP_THREAD_SendCoapMsgForBorderSync(NULL, 0, &multicastAddr, borderSyncResource, NO_ACK, OT_COAP_CODE_GET, 1U);
 8014902:	2301      	movs	r3, #1
 8014904:	9302      	str	r3, [sp, #8]
 8014906:	2301      	movs	r3, #1
 8014908:	9301      	str	r3, [sp, #4]
 801490a:	2300      	movs	r3, #0
 801490c:	9300      	str	r3, [sp, #0]
 801490e:	4b04      	ldr	r3, [pc, #16]	; (8014920 <APP_THREAD_SyncWithBorderRouter+0x24>)
 8014910:	4a04      	ldr	r2, [pc, #16]	; (8014924 <APP_THREAD_SyncWithBorderRouter+0x28>)
 8014912:	2100      	movs	r1, #0
 8014914:	2000      	movs	r0, #0
 8014916:	f000 fabf 	bl	8014e98 <APP_THREAD_SendCoapMsgForBorderSync>
}
 801491a:	bf00      	nop
 801491c:	46bd      	mov	sp, r7
 801491e:	bd80      	pop	{r7, pc}
 8014920:	080179cc 	.word	0x080179cc
 8014924:	2002864c 	.word	0x2002864c

08014928 <APP_THREAD_SendMyInfo>:

void APP_THREAD_SendMyInfo() {
 8014928:	b580      	push	{r7, lr}
 801492a:	b084      	sub	sp, #16
 801492c:	af04      	add	r7, sp, #16
////	test_1 = test_ext_addr[0];
////	test_2 = &test_ext_addr;
//
//	error = otThreadGetNextNeighborInfo(NULL, &test_neighbor_iterator, &test_info_neighbor);
	// TODO: does this need an ACK
	APP_THREAD_SendCoapMsg(&msgSendMyIP, sizeof(msgSendMyIP), &borderRouter.ipv6, nodeInfoResource, NO_ACK,
 801492e:	2301      	movs	r3, #1
 8014930:	9302      	str	r3, [sp, #8]
 8014932:	2303      	movs	r3, #3
 8014934:	9301      	str	r3, [sp, #4]
 8014936:	2300      	movs	r3, #0
 8014938:	9300      	str	r3, [sp, #0]
 801493a:	4b04      	ldr	r3, [pc, #16]	; (801494c <APP_THREAD_SendMyInfo+0x24>)
 801493c:	4a04      	ldr	r2, [pc, #16]	; (8014950 <APP_THREAD_SendMyInfo+0x28>)
 801493e:	2120      	movs	r1, #32
 8014940:	4804      	ldr	r0, [pc, #16]	; (8014954 <APP_THREAD_SendMyInfo+0x2c>)
 8014942:	f000 f9bf 	bl	8014cc4 <APP_THREAD_SendCoapMsg>
			OT_COAP_CODE_PUT, 1U);
//	APP_THREAD_SendCoapUnicastMsg(NULL, NULL, borderRouter.ipv6  , borderSyncResource, 1U);
}
 8014946:	bf00      	nop
 8014948:	46bd      	mov	sp, r7
 801494a:	bd80      	pop	{r7, pc}
 801494c:	080179ec 	.word	0x080179ec
 8014950:	200276a0 	.word	0x200276a0
 8014954:	200000d8 	.word	0x200000d8

08014958 <APP_THREAD_SendBorderMessage>:

void APP_THREAD_SendBorderMessage(void *packet, uint8_t len, char *resource) {
 8014958:	b580      	push	{r7, lr}
 801495a:	b088      	sub	sp, #32
 801495c:	af04      	add	r7, sp, #16
 801495e:	60f8      	str	r0, [r7, #12]
 8014960:	460b      	mov	r3, r1
 8014962:	607a      	str	r2, [r7, #4]
 8014964:	72fb      	strb	r3, [r7, #11]
//	APP_THREAD_SendCoapMsg(sensorPacket, borderRouter.ipv6, borderPacket, otCoapType type);
	APP_THREAD_SendCoapMsg(packet, len, &borderRouter.ipv6, resource, NO_ACK, OT_COAP_CODE_PUT, 1U);
 8014966:	7afb      	ldrb	r3, [r7, #11]
 8014968:	b299      	uxth	r1, r3
 801496a:	2301      	movs	r3, #1
 801496c:	9302      	str	r3, [sp, #8]
 801496e:	2303      	movs	r3, #3
 8014970:	9301      	str	r3, [sp, #4]
 8014972:	2300      	movs	r3, #0
 8014974:	9300      	str	r3, [sp, #0]
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	4a03      	ldr	r2, [pc, #12]	; (8014988 <APP_THREAD_SendBorderMessage+0x30>)
 801497a:	68f8      	ldr	r0, [r7, #12]
 801497c:	f000 f9a2 	bl	8014cc4 <APP_THREAD_SendCoapMsg>
}
 8014980:	bf00      	nop
 8014982:	3710      	adds	r7, #16
 8014984:	46bd      	mov	sp, r7
 8014986:	bd80      	pop	{r7, pc}
 8014988:	200276a0 	.word	0x200276a0

0801498c <APP_THREAD_SendBorderPacket>:

void APP_THREAD_SendBorderPacket(struct LogPacket *sensorPacket) {
 801498c:	b580      	push	{r7, lr}
 801498e:	b086      	sub	sp, #24
 8014990:	af04      	add	r7, sp, #16
 8014992:	6078      	str	r0, [r7, #4]
//	APP_THREAD_SendCoapMsg(sensorPacket, borderRouter.ipv6, borderPacket, otCoapType type);
	APP_THREAD_SendCoapMsg(sensorPacket, sizeof(struct LogPacket), &borderRouter.ipv6, borderPacket, NO_ACK,
 8014994:	2301      	movs	r3, #1
 8014996:	9302      	str	r3, [sp, #8]
 8014998:	2303      	movs	r3, #3
 801499a:	9301      	str	r3, [sp, #4]
 801499c:	2300      	movs	r3, #0
 801499e:	9300      	str	r3, [sp, #0]
 80149a0:	4b04      	ldr	r3, [pc, #16]	; (80149b4 <APP_THREAD_SendBorderPacket+0x28>)
 80149a2:	4a05      	ldr	r2, [pc, #20]	; (80149b8 <APP_THREAD_SendBorderPacket+0x2c>)
 80149a4:	21cc      	movs	r1, #204	; 0xcc
 80149a6:	6878      	ldr	r0, [r7, #4]
 80149a8:	f000 f98c 	bl	8014cc4 <APP_THREAD_SendCoapMsg>
			OT_COAP_CODE_PUT, 1U);

}
 80149ac:	bf00      	nop
 80149ae:	3708      	adds	r7, #8
 80149b0:	46bd      	mov	sp, r7
 80149b2:	bd80      	pop	{r7, pc}
 80149b4:	080179dc 	.word	0x080179dc
 80149b8:	200276a0 	.word	0x200276a0

080149bc <APP_THREAD_CoapLightsSimpleRequestHandler>:

static void APP_THREAD_CoapLightsSimpleRequestHandler(otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo) {
 80149bc:	b580      	push	{r7, lr}
 80149be:	b084      	sub	sp, #16
 80149c0:	af00      	add	r7, sp, #0
 80149c2:	60f8      	str	r0, [r7, #12]
 80149c4:	60b9      	str	r1, [r7, #8]
 80149c6:	607a      	str	r2, [r7, #4]
	do {

		// if get, send response with current log message
		if (otCoapHeaderGetType(pHeader) == OT_COAP_CODE_GET) {
 80149c8:	68f8      	ldr	r0, [r7, #12]
 80149ca:	f7fe f8b6 	bl	8012b3a <otCoapHeaderGetType>
 80149ce:	4603      	mov	r3, r0
 80149d0:	2b01      	cmp	r3, #1
 80149d2:	d107      	bne.n	80149e4 <APP_THREAD_CoapLightsSimpleRequestHandler+0x28>
			APP_THREAD_SendDataResponse(pHeader, pMessageInfo, &lightsSimpleMessage, sizeof(lightsSimpleMessage));
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	b299      	uxth	r1, r3
 80149d8:	2304      	movs	r3, #4
 80149da:	4a23      	ldr	r2, [pc, #140]	; (8014a68 <APP_THREAD_CoapLightsSimpleRequestHandler+0xac>)
 80149dc:	68f8      	ldr	r0, [r7, #12]
 80149de:	f000 fb11 	bl	8015004 <APP_THREAD_SendDataResponse>
			break;
 80149e2:	e03d      	b.n	8014a60 <APP_THREAD_CoapLightsSimpleRequestHandler+0xa4>
		}

		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &lightsSimpleMessage, sizeof(lightsSimpleMessage))
 80149e4:	68b8      	ldr	r0, [r7, #8]
 80149e6:	f7fe fc57 	bl	8013298 <otMessageGetOffset>
 80149ea:	4603      	mov	r3, r0
 80149ec:	4619      	mov	r1, r3
 80149ee:	2304      	movs	r3, #4
 80149f0:	4a1d      	ldr	r2, [pc, #116]	; (8014a68 <APP_THREAD_CoapLightsSimpleRequestHandler+0xac>)
 80149f2:	68b8      	ldr	r0, [r7, #8]
 80149f4:	f7fe fcb5 	bl	8013362 <otMessageRead>
 80149f8:	4603      	mov	r3, r0
 80149fa:	2b04      	cmp	r3, #4
 80149fc:	d112      	bne.n	8014a24 <APP_THREAD_CoapLightsSimpleRequestHandler+0x68>
				== 4U) {
			if ((otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_PUT)
 80149fe:	68f8      	ldr	r0, [r7, #12]
 8014a00:	f7fe f8c9 	bl	8012b96 <otCoapHeaderGetCode>
 8014a04:	4603      	mov	r3, r0
 8014a06:	2b03      	cmp	r3, #3
 8014a08:	d005      	beq.n	8014a16 <APP_THREAD_CoapLightsSimpleRequestHandler+0x5a>
					|| (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_POST)) {
 8014a0a:	68f8      	ldr	r0, [r7, #12]
 8014a0c:	f7fe f8c3 	bl	8012b96 <otCoapHeaderGetCode>
 8014a10:	4603      	mov	r3, r0
 8014a12:	2b02      	cmp	r3, #2
 8014a14:	d106      	bne.n	8014a24 <APP_THREAD_CoapLightsSimpleRequestHandler+0x68>
				osMessageQueuePut(lightsSimpleQueueHandle, &lightsSimpleMessage, 0U, 0U);
 8014a16:	4b15      	ldr	r3, [pc, #84]	; (8014a6c <APP_THREAD_CoapLightsSimpleRequestHandler+0xb0>)
 8014a18:	6818      	ldr	r0, [r3, #0]
 8014a1a:	2300      	movs	r3, #0
 8014a1c:	2200      	movs	r2, #0
 8014a1e:	4912      	ldr	r1, [pc, #72]	; (8014a68 <APP_THREAD_CoapLightsSimpleRequestHandler+0xac>)
 8014a20:	f7fa f9a8 	bl	800ed74 <osMessageQueuePut>
			}

		}

		tempMessageInfo = pMessageInfo;
 8014a24:	4a12      	ldr	r2, [pc, #72]	; (8014a70 <APP_THREAD_CoapLightsSimpleRequestHandler+0xb4>)
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	6013      	str	r3, [r2, #0]
		receivedMessage = (otMessageInfo*) pMessage;
 8014a2a:	4a12      	ldr	r2, [pc, #72]	; (8014a74 <APP_THREAD_CoapLightsSimpleRequestHandler+0xb8>)
 8014a2c:	68bb      	ldr	r3, [r7, #8]
 8014a2e:	6013      	str	r3, [r2, #0]

		if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE) {
 8014a30:	68f8      	ldr	r0, [r7, #12]
 8014a32:	f7fe f882 	bl	8012b3a <otCoapHeaderGetType>
 8014a36:	4603      	mov	r3, r0
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	d107      	bne.n	8014a4c <APP_THREAD_CoapLightsSimpleRequestHandler+0x90>
			APP_THREAD_SendDataResponse(pHeader, pMessageInfo, NULL, 0);
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	b299      	uxth	r1, r3
 8014a40:	2300      	movs	r3, #0
 8014a42:	2200      	movs	r2, #0
 8014a44:	68f8      	ldr	r0, [r7, #12]
 8014a46:	f000 fadd 	bl	8015004 <APP_THREAD_SendDataResponse>
			break;
 8014a4a:	e009      	b.n	8014a60 <APP_THREAD_CoapLightsSimpleRequestHandler+0xa4>
		}

		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &OT_ReceivedCommand, 1U) != 1U) {
 8014a4c:	68b8      	ldr	r0, [r7, #8]
 8014a4e:	f7fe fc23 	bl	8013298 <otMessageGetOffset>
 8014a52:	4603      	mov	r3, r0
 8014a54:	4619      	mov	r1, r3
 8014a56:	2301      	movs	r3, #1
 8014a58:	4a07      	ldr	r2, [pc, #28]	; (8014a78 <APP_THREAD_CoapLightsSimpleRequestHandler+0xbc>)
 8014a5a:	68b8      	ldr	r0, [r7, #8]
 8014a5c:	f7fe fc81 	bl	8013362 <otMessageRead>

		if (OT_ReceivedCommand == 1U) {
			//BSP_LED_Toggle(LED1);
		}
	} while (false);
}
 8014a60:	bf00      	nop
 8014a62:	3710      	adds	r7, #16
 8014a64:	46bd      	mov	sp, r7
 8014a66:	bd80      	pop	{r7, pc}
 8014a68:	20027d04 	.word	0x20027d04
 8014a6c:	200278bc 	.word	0x200278bc
 8014a70:	20028608 	.word	0x20028608
 8014a74:	20028660 	.word	0x20028660
 8014a78:	20027699 	.word	0x20027699

08014a7c <APP_THREAD_CoapToggleLoggingRequestHandler>:

#ifndef DONGLE_CODE
// request handler for when receiving a message directed at the data logging resource
static void APP_THREAD_CoapToggleLoggingRequestHandler(otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo) {
 8014a7c:	b580      	push	{r7, lr}
 8014a7e:	b084      	sub	sp, #16
 8014a80:	af00      	add	r7, sp, #0
 8014a82:	60f8      	str	r0, [r7, #12]
 8014a84:	60b9      	str	r1, [r7, #8]
 8014a86:	607a      	str	r2, [r7, #4]
	do {
		// if get, send response with current log message
		if (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_GET) {
 8014a88:	68f8      	ldr	r0, [r7, #12]
 8014a8a:	f7fe f884 	bl	8012b96 <otCoapHeaderGetCode>
 8014a8e:	4603      	mov	r3, r0
 8014a90:	2b01      	cmp	r3, #1
 8014a92:	d106      	bne.n	8014aa2 <APP_THREAD_CoapToggleLoggingRequestHandler+0x26>
			APP_THREAD_SendDataResponse(&logMessage, sizeof(logMessage), pHeader, pMessageInfo);
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	68fa      	ldr	r2, [r7, #12]
 8014a98:	2106      	movs	r1, #6
 8014a9a:	481a      	ldr	r0, [pc, #104]	; (8014b04 <APP_THREAD_CoapToggleLoggingRequestHandler+0x88>)
 8014a9c:	f000 fab2 	bl	8015004 <APP_THREAD_SendDataResponse>
			break;
 8014aa0:	e02c      	b.n	8014afc <APP_THREAD_CoapToggleLoggingRequestHandler+0x80>
		}

		// TODO : this will overwrite log message so maybe add a safer method
		if ( otMessageRead(pMessage, otMessageGetOffset(pMessage), &logMessage, sizeof(logMessage)) == sizeof(logMessage)){
 8014aa2:	68b8      	ldr	r0, [r7, #8]
 8014aa4:	f7fe fbf8 	bl	8013298 <otMessageGetOffset>
 8014aa8:	4603      	mov	r3, r0
 8014aaa:	4619      	mov	r1, r3
 8014aac:	2306      	movs	r3, #6
 8014aae:	4a15      	ldr	r2, [pc, #84]	; (8014b04 <APP_THREAD_CoapToggleLoggingRequestHandler+0x88>)
 8014ab0:	68b8      	ldr	r0, [r7, #8]
 8014ab2:	f7fe fc56 	bl	8013362 <otMessageRead>
 8014ab6:	4603      	mov	r3, r0
 8014ab8:	2b06      	cmp	r3, #6
 8014aba:	d112      	bne.n	8014ae2 <APP_THREAD_CoapToggleLoggingRequestHandler+0x66>
//			otMessageRead(pMessage, otMessageGetOffset(pMessage), &logMessage, sizeof(logMessage));
			// if post or put, add to queue for masterthread processing
			if ((otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_PUT)
 8014abc:	68f8      	ldr	r0, [r7, #12]
 8014abe:	f7fe f86a 	bl	8012b96 <otCoapHeaderGetCode>
 8014ac2:	4603      	mov	r3, r0
 8014ac4:	2b03      	cmp	r3, #3
 8014ac6:	d005      	beq.n	8014ad4 <APP_THREAD_CoapToggleLoggingRequestHandler+0x58>
					|| (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_POST)) {
 8014ac8:	68f8      	ldr	r0, [r7, #12]
 8014aca:	f7fe f864 	bl	8012b96 <otCoapHeaderGetCode>
 8014ace:	4603      	mov	r3, r0
 8014ad0:	2b02      	cmp	r3, #2
 8014ad2:	d106      	bne.n	8014ae2 <APP_THREAD_CoapToggleLoggingRequestHandler+0x66>
				osMessageQueuePut(togLoggingQueueHandle, &logMessage, 0U, 0U);
 8014ad4:	4b0c      	ldr	r3, [pc, #48]	; (8014b08 <APP_THREAD_CoapToggleLoggingRequestHandler+0x8c>)
 8014ad6:	6818      	ldr	r0, [r3, #0]
 8014ad8:	2300      	movs	r3, #0
 8014ada:	2200      	movs	r2, #0
 8014adc:	4909      	ldr	r1, [pc, #36]	; (8014b04 <APP_THREAD_CoapToggleLoggingRequestHandler+0x88>)
 8014ade:	f7fa f949 	bl	800ed74 <osMessageQueuePut>
			}
		}


		if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE) {
 8014ae2:	68f8      	ldr	r0, [r7, #12]
 8014ae4:	f7fe f829 	bl	8012b3a <otCoapHeaderGetType>
 8014ae8:	4603      	mov	r3, r0
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	d106      	bne.n	8014afc <APP_THREAD_CoapToggleLoggingRequestHandler+0x80>
			APP_THREAD_SendDataResponse(NULL, 0, pHeader, pMessageInfo);
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	68fa      	ldr	r2, [r7, #12]
 8014af2:	2100      	movs	r1, #0
 8014af4:	2000      	movs	r0, #0
 8014af6:	f000 fa85 	bl	8015004 <APP_THREAD_SendDataResponse>
			break;
 8014afa:	bf00      	nop
		}

	} while (false);
}
 8014afc:	bf00      	nop
 8014afe:	3710      	adds	r7, #16
 8014b00:	46bd      	mov	sp, r7
 8014b02:	bd80      	pop	{r7, pc}
 8014b04:	20028620 	.word	0x20028620
 8014b08:	20027cec 	.word	0x20027cec

08014b0c <APP_THREAD_CoapBorderTimeRequestHandler>:
#endif


// request handler for when receiving a message directed at the border router synchronizing resource
static void APP_THREAD_CoapBorderTimeRequestHandler(otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo) {
 8014b0c:	b5b0      	push	{r4, r5, r7, lr}
 8014b0e:	b084      	sub	sp, #16
 8014b10:	af00      	add	r7, sp, #0
 8014b12:	60f8      	str	r0, [r7, #12]
 8014b14:	60b9      	str	r1, [r7, #8]
 8014b16:	607a      	str	r2, [r7, #4]
	do {
#ifdef DONGLE_CODE
		BSP_LED_Toggle(LED_RED);
#endif
		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &receivedSystemCal, sizeof(receivedSystemCal))
 8014b18:	68b8      	ldr	r0, [r7, #8]
 8014b1a:	f7fe fbbd 	bl	8013298 <otMessageGetOffset>
 8014b1e:	4603      	mov	r3, r0
 8014b20:	4619      	mov	r1, r3
 8014b22:	2318      	movs	r3, #24
 8014b24:	4a1f      	ldr	r2, [pc, #124]	; (8014ba4 <APP_THREAD_CoapBorderTimeRequestHandler+0x98>)
 8014b26:	68b8      	ldr	r0, [r7, #8]
 8014b28:	f7fe fc1b 	bl	8013362 <otMessageRead>
 8014b2c:	4603      	mov	r3, r0
 8014b2e:	2b18      	cmp	r3, #24
 8014b30:	d11c      	bne.n	8014b6c <APP_THREAD_CoapBorderTimeRequestHandler+0x60>
				== sizeof(receivedSystemCal)) {
			// if the message was a put request, copy message over to border router info struct
			if ((otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_PUT)
 8014b32:	68f8      	ldr	r0, [r7, #12]
 8014b34:	f7fe f82f 	bl	8012b96 <otCoapHeaderGetCode>
 8014b38:	4603      	mov	r3, r0
 8014b3a:	2b03      	cmp	r3, #3
 8014b3c:	d005      	beq.n	8014b4a <APP_THREAD_CoapBorderTimeRequestHandler+0x3e>
					|| (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_POST)) {
 8014b3e:	68f8      	ldr	r0, [r7, #12]
 8014b40:	f7fe f829 	bl	8012b96 <otCoapHeaderGetCode>
 8014b44:	4603      	mov	r3, r0
 8014b46:	2b02      	cmp	r3, #2
 8014b48:	d110      	bne.n	8014b6c <APP_THREAD_CoapBorderTimeRequestHandler+0x60>

				memcpy(&borderRouter, &receivedSystemCal, sizeof(receivedSystemCal));
 8014b4a:	4a17      	ldr	r2, [pc, #92]	; (8014ba8 <APP_THREAD_CoapBorderTimeRequestHandler+0x9c>)
 8014b4c:	4b15      	ldr	r3, [pc, #84]	; (8014ba4 <APP_THREAD_CoapBorderTimeRequestHandler+0x98>)
 8014b4e:	4614      	mov	r4, r2
 8014b50:	461d      	mov	r5, r3
 8014b52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014b54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014b56:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014b5a:	e884 0003 	stmia.w	r4, {r0, r1}

				// update the onboard RTC unix time
				updateRTC(borderRouter.epoch);
 8014b5e:	4b12      	ldr	r3, [pc, #72]	; (8014ba8 <APP_THREAD_CoapBorderTimeRequestHandler+0x9c>)
 8014b60:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8014b64:	4618      	mov	r0, r3
 8014b66:	4621      	mov	r1, r4
 8014b68:	f000 f842 	bl	8014bf0 <updateRTC>
			}
		}

		receivedMessage = (otMessageInfo*) pMessage;
 8014b6c:	4a0f      	ldr	r2, [pc, #60]	; (8014bac <APP_THREAD_CoapBorderTimeRequestHandler+0xa0>)
 8014b6e:	68bb      	ldr	r3, [r7, #8]
 8014b70:	6013      	str	r3, [r2, #0]

		if (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_GET) {
 8014b72:	68f8      	ldr	r0, [r7, #12]
 8014b74:	f7fe f80f 	bl	8012b96 <otCoapHeaderGetCode>
 8014b78:	4603      	mov	r3, r0
 8014b7a:	2b01      	cmp	r3, #1
 8014b7c:	d00c      	beq.n	8014b98 <APP_THREAD_CoapBorderTimeRequestHandler+0x8c>
			//TODO: this is where you would put the return if you wanted a node to transmit BR info to other nodes
//			APP_THREAD_SendDataResponse(&borderRouter, sizeof(borderRouter), pHeader, pMessageInfo);
			break;
		}

		if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE) {
 8014b7e:	68f8      	ldr	r0, [r7, #12]
 8014b80:	f7fd ffdb 	bl	8012b3a <otCoapHeaderGetType>
 8014b84:	4603      	mov	r3, r0
 8014b86:	2b00      	cmp	r3, #0
 8014b88:	d107      	bne.n	8014b9a <APP_THREAD_CoapBorderTimeRequestHandler+0x8e>
			APP_THREAD_SendDataResponse(NULL, 0 , pHeader, pMessageInfo);
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	68fa      	ldr	r2, [r7, #12]
 8014b8e:	2100      	movs	r1, #0
 8014b90:	2000      	movs	r0, #0
 8014b92:	f000 fa37 	bl	8015004 <APP_THREAD_SendDataResponse>
			break;
 8014b96:	e000      	b.n	8014b9a <APP_THREAD_CoapBorderTimeRequestHandler+0x8e>
			break;
 8014b98:	bf00      	nop
		}

	} while (false);
}
 8014b9a:	bf00      	nop
 8014b9c:	3710      	adds	r7, #16
 8014b9e:	46bd      	mov	sp, r7
 8014ba0:	bdb0      	pop	{r4, r5, r7, pc}
 8014ba2:	bf00      	nop
 8014ba4:	200276b8 	.word	0x200276b8
 8014ba8:	200276a0 	.word	0x200276a0
 8014bac:	20028660 	.word	0x20028660

08014bb0 <APP_THREAD_CoapNodeInfoRequestHandler>:

// Only get requests allowed for this resource
struct sendIP_struct tempVar = {"test","test",0};
//char test_string[200] = "test";
static void APP_THREAD_CoapNodeInfoRequestHandler(otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo) {
 8014bb0:	b580      	push	{r7, lr}
 8014bb2:	b084      	sub	sp, #16
 8014bb4:	af00      	add	r7, sp, #0
 8014bb6:	60f8      	str	r0, [r7, #12]
 8014bb8:	60b9      	str	r1, [r7, #8]
 8014bba:	607a      	str	r2, [r7, #4]
//		}

//		receivedMessage = (otMessageInfo*) pMessage;

		// send info if requested
		if (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_GET) {
 8014bbc:	68f8      	ldr	r0, [r7, #12]
 8014bbe:	f7fd ffea 	bl	8012b96 <otCoapHeaderGetCode>
 8014bc2:	4603      	mov	r3, r0
 8014bc4:	2b01      	cmp	r3, #1
 8014bc6:	d103      	bne.n	8014bd0 <APP_THREAD_CoapNodeInfoRequestHandler+0x20>
//			APP_THREAD_SendDataResponse(&borderRouter, sizeof(borderRouter), pHeader, pMessageInfo);
//			APP_THREAD_SendDataResponse(&msgSendMyIP, sizeof(msgSendMyIP), pHeader, pMessageInfo);
			APP_THREAD_SendMyInfo();
 8014bc8:	f7ff feae 	bl	8014928 <APP_THREAD_SendMyInfo>

			break;
 8014bcc:	bf00      	nop
		if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE) {
			APP_THREAD_SendDataResponse(NULL, 0, pHeader, pMessageInfo);
		}

	} while (false);
}
 8014bce:	e00b      	b.n	8014be8 <APP_THREAD_CoapNodeInfoRequestHandler+0x38>
		if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE) {
 8014bd0:	68f8      	ldr	r0, [r7, #12]
 8014bd2:	f7fd ffb2 	bl	8012b3a <otCoapHeaderGetType>
 8014bd6:	4603      	mov	r3, r0
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	d105      	bne.n	8014be8 <APP_THREAD_CoapNodeInfoRequestHandler+0x38>
			APP_THREAD_SendDataResponse(NULL, 0, pHeader, pMessageInfo);
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	68fa      	ldr	r2, [r7, #12]
 8014be0:	2100      	movs	r1, #0
 8014be2:	2000      	movs	r0, #0
 8014be4:	f000 fa0e 	bl	8015004 <APP_THREAD_SendDataResponse>
}
 8014be8:	bf00      	nop
 8014bea:	3710      	adds	r7, #16
 8014bec:	46bd      	mov	sp, r7
 8014bee:	bd80      	pop	{r7, pc}

08014bf0 <updateRTC>:

void updateRTC(time_t now) {
 8014bf0:	b580      	push	{r7, lr}
 8014bf2:	b088      	sub	sp, #32
 8014bf4:	af00      	add	r7, sp, #0
 8014bf6:	e9c7 0100 	strd	r0, r1, [r7]
	RTC_DateTypeDef sDate;

	// https://www.st.com/content/ccc/resource/technical/document/application_note/2a/c2/6f/74/fa/0d/46/3a/CD00015424.pdf/files/CD00015424.pdf/jcr:content/translations/en.CD00015424.pdf
//	struct tm *time_tm;

	RTC_FromEpoch(now, &sTime, &sDate);
 8014bfa:	683b      	ldr	r3, [r7, #0]
 8014bfc:	f107 0208 	add.w	r2, r7, #8
 8014c00:	f107 010c 	add.w	r1, r7, #12
 8014c04:	4618      	mov	r0, r3
 8014c06:	f7f0 fa9b 	bl	8005140 <RTC_FromEpoch>

	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) {
 8014c0a:	f107 030c 	add.w	r3, r7, #12
 8014c0e:	2200      	movs	r2, #0
 8014c10:	4619      	mov	r1, r3
 8014c12:	480a      	ldr	r0, [pc, #40]	; (8014c3c <updateRTC+0x4c>)
 8014c14:	f7f7 fe51 	bl	800c8ba <HAL_RTC_SetTime>
	}

	/*
	 * update the RTC
	 */
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) {
 8014c18:	f107 0308 	add.w	r3, r7, #8
 8014c1c:	2200      	movs	r2, #0
 8014c1e:	4619      	mov	r1, r3
 8014c20:	4806      	ldr	r0, [pc, #24]	; (8014c3c <updateRTC+0x4c>)
 8014c22:	f7f7 ff6a 	bl	800cafa <HAL_RTC_SetDate>
	}

	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0x32F2); // lock it in with the backup registers
 8014c26:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8014c2a:	2100      	movs	r1, #0
 8014c2c:	4803      	ldr	r0, [pc, #12]	; (8014c3c <updateRTC+0x4c>)
 8014c2e:	f7f8 f8eb 	bl	800ce08 <HAL_RTCEx_BKUPWrite>
}
 8014c32:	bf00      	nop
 8014c34:	3720      	adds	r7, #32
 8014c36:	46bd      	mov	sp, r7
 8014c38:	bd80      	pop	{r7, pc}
 8014c3a:	bf00      	nop
 8014c3c:	20028448 	.word	0x20028448

08014c40 <APP_THREAD_CoapLightsComplexRequestHandler>:
//    BSP_LED_On(LED1);
//    APP_DBG(" ********* BUFFER HAS BEEN TRANFERED \r\n");
//  }
//}
static void APP_THREAD_CoapLightsComplexRequestHandler(otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo) {
 8014c40:	b580      	push	{r7, lr}
 8014c42:	b084      	sub	sp, #16
 8014c44:	af00      	add	r7, sp, #0
 8014c46:	60f8      	str	r0, [r7, #12]
 8014c48:	60b9      	str	r1, [r7, #8]
 8014c4a:	607a      	str	r2, [r7, #4]
	do {
		//APP_THREAD_SendCoapUnicastRequest();

		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &lightMessageComplex, sizeof(lightMessageComplex))
 8014c4c:	68b8      	ldr	r0, [r7, #8]
 8014c4e:	f7fe fb23 	bl	8013298 <otMessageGetOffset>
 8014c52:	4603      	mov	r3, r0
 8014c54:	4619      	mov	r1, r3
 8014c56:	2312      	movs	r3, #18
 8014c58:	4a16      	ldr	r2, [pc, #88]	; (8014cb4 <APP_THREAD_CoapLightsComplexRequestHandler+0x74>)
 8014c5a:	68b8      	ldr	r0, [r7, #8]
 8014c5c:	f7fe fb81 	bl	8013362 <otMessageRead>
 8014c60:	4603      	mov	r3, r0
 8014c62:	2b12      	cmp	r3, #18
 8014c64:	d102      	bne.n	8014c6c <APP_THREAD_CoapLightsComplexRequestHandler+0x2c>
				== sizeof(lightMessageComplex)) {
			FrontLightsSet(&lightMessageComplex);
 8014c66:	4813      	ldr	r0, [pc, #76]	; (8014cb4 <APP_THREAD_CoapLightsComplexRequestHandler+0x74>)
 8014c68:	f7ef f9cc 	bl	8004004 <FrontLightsSet>
		}

		tempMessageInfo = pMessageInfo;
 8014c6c:	4a12      	ldr	r2, [pc, #72]	; (8014cb8 <APP_THREAD_CoapLightsComplexRequestHandler+0x78>)
 8014c6e:	687b      	ldr	r3, [r7, #4]
 8014c70:	6013      	str	r3, [r2, #0]
		receivedMessage = (otMessageInfo*) pMessage;
 8014c72:	4a12      	ldr	r2, [pc, #72]	; (8014cbc <APP_THREAD_CoapLightsComplexRequestHandler+0x7c>)
 8014c74:	68bb      	ldr	r3, [r7, #8]
 8014c76:	6013      	str	r3, [r2, #0]

		if (otCoapHeaderGetType(pHeader) != OT_COAP_TYPE_NON_CONFIRMABLE) {
 8014c78:	68f8      	ldr	r0, [r7, #12]
 8014c7a:	f7fd ff5e 	bl	8012b3a <otCoapHeaderGetType>
 8014c7e:	4603      	mov	r3, r0
 8014c80:	2b10      	cmp	r3, #16
 8014c82:	d110      	bne.n	8014ca6 <APP_THREAD_CoapLightsComplexRequestHandler+0x66>
			break;
		}

		if (otCoapHeaderGetCode(pHeader) != OT_COAP_CODE_PUT) {
 8014c84:	68f8      	ldr	r0, [r7, #12]
 8014c86:	f7fd ff86 	bl	8012b96 <otCoapHeaderGetCode>
 8014c8a:	4603      	mov	r3, r0
 8014c8c:	2b03      	cmp	r3, #3
 8014c8e:	d10c      	bne.n	8014caa <APP_THREAD_CoapLightsComplexRequestHandler+0x6a>
			break;
		}

		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &OT_ReceivedCommand, 1U) != 1U) {
 8014c90:	68b8      	ldr	r0, [r7, #8]
 8014c92:	f7fe fb01 	bl	8013298 <otMessageGetOffset>
 8014c96:	4603      	mov	r3, r0
 8014c98:	4619      	mov	r1, r3
 8014c9a:	2301      	movs	r3, #1
 8014c9c:	4a08      	ldr	r2, [pc, #32]	; (8014cc0 <APP_THREAD_CoapLightsComplexRequestHandler+0x80>)
 8014c9e:	68b8      	ldr	r0, [r7, #8]
 8014ca0:	f7fe fb5f 	bl	8013362 <otMessageRead>
		if (OT_ReceivedCommand == 1U) {
			//BSP_LED_Toggle(LED1);
		}

	} while (false);
}
 8014ca4:	e002      	b.n	8014cac <APP_THREAD_CoapLightsComplexRequestHandler+0x6c>
			break;
 8014ca6:	bf00      	nop
 8014ca8:	e000      	b.n	8014cac <APP_THREAD_CoapLightsComplexRequestHandler+0x6c>
			break;
 8014caa:	bf00      	nop
}
 8014cac:	bf00      	nop
 8014cae:	3710      	adds	r7, #16
 8014cb0:	46bd      	mov	sp, r7
 8014cb2:	bd80      	pop	{r7, pc}
 8014cb4:	20028638 	.word	0x20028638
 8014cb8:	20028608 	.word	0x20028608
 8014cbc:	20028660 	.word	0x20028660
 8014cc0:	20027699 	.word	0x20027699

08014cc4 <APP_THREAD_SendCoapMsg>:
//  }
//}

static char empty_message[10] = "";
static void APP_THREAD_SendCoapMsg(void *message, uint16_t msgSize, otIp6Address *ipv6_addr, char *resource,
		uint8_t request_ack, otCoapCode coapCode, uint8_t msgID) {
 8014cc4:	b590      	push	{r4, r7, lr}
 8014cc6:	b087      	sub	sp, #28
 8014cc8:	af02      	add	r7, sp, #8
 8014cca:	60f8      	str	r0, [r7, #12]
 8014ccc:	607a      	str	r2, [r7, #4]
 8014cce:	603b      	str	r3, [r7, #0]
 8014cd0:	460b      	mov	r3, r1
 8014cd2:	817b      	strh	r3, [r7, #10]
//			  multicastAddresses = otIp6GetMulticastAddresses(NULL);
//			  meshLocalEID =  otThreadGetMeshLocalEid(NULL);
//			  linkLocalIPV6 = otThreadGetLinkLocalIp6Address(NULL);

		// clear info
		memset(&OT_MessageInfo, 0, sizeof(OT_MessageInfo));
 8014cd4:	222c      	movs	r2, #44	; 0x2c
 8014cd6:	2100      	movs	r1, #0
 8014cd8:	4867      	ldr	r0, [pc, #412]	; (8014e78 <APP_THREAD_SendCoapMsg+0x1b4>)
 8014cda:	f001 f942 	bl	8015f62 <memset>

		// add destination IPv6 address to header
		// TODO : swap the below statements once ST has their shit fixed

		if(msgSize > 100){ // TODO : semd to borderRouter if the message is a log message (this is a temporary fix)
 8014cde:	897b      	ldrh	r3, [r7, #10]
 8014ce0:	2b64      	cmp	r3, #100	; 0x64
 8014ce2:	d90c      	bls.n	8014cfe <APP_THREAD_SendCoapMsg+0x3a>
			memcpy(&OT_MessageInfo.mPeerAddr, &borderRouter.ipv6, sizeof(otIp6Address));
 8014ce4:	4b64      	ldr	r3, [pc, #400]	; (8014e78 <APP_THREAD_SendCoapMsg+0x1b4>)
 8014ce6:	4a65      	ldr	r2, [pc, #404]	; (8014e7c <APP_THREAD_SendCoapMsg+0x1b8>)
 8014ce8:	f103 0410 	add.w	r4, r3, #16
 8014cec:	4613      	mov	r3, r2
 8014cee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014cf0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			otIp6AddressFromString("fd11:22::c34c:7994:cccc:4b82", &OT_MessageInfo.mSockAddr);
 8014cf4:	4960      	ldr	r1, [pc, #384]	; (8014e78 <APP_THREAD_SendCoapMsg+0x1b4>)
 8014cf6:	4862      	ldr	r0, [pc, #392]	; (8014e80 <APP_THREAD_SendCoapMsg+0x1bc>)
 8014cf8:	f7fe fa11 	bl	801311e <otIp6AddressFromString>
 8014cfc:	e009      	b.n	8014d12 <APP_THREAD_SendCoapMsg+0x4e>
		}else{
			memcpy(&OT_MessageInfo.mPeerAddr, &multicastAddr, sizeof(otIp6Address));
 8014cfe:	4b5e      	ldr	r3, [pc, #376]	; (8014e78 <APP_THREAD_SendCoapMsg+0x1b4>)
 8014d00:	4a60      	ldr	r2, [pc, #384]	; (8014e84 <APP_THREAD_SendCoapMsg+0x1c0>)
 8014d02:	f103 0410 	add.w	r4, r3, #16
 8014d06:	4613      	mov	r3, r2
 8014d08:	6818      	ldr	r0, [r3, #0]
 8014d0a:	6859      	ldr	r1, [r3, #4]
 8014d0c:	689a      	ldr	r2, [r3, #8]
 8014d0e:	68db      	ldr	r3, [r3, #12]
 8014d10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
//			  otIp6AddressFromString("fd11:22::c34c:7994:19f2:4b82", &OT_MessageInfo.mSockAddr);

//			  otIp6AddressFromString("fd11:22::c34c:7994:cccc:4b82", &OT_MessageInfo.mSockAddr);

		// populate message information
		OT_MessageInfo.mInterfaceId = OT_NETIF_INTERFACE_ID_THREAD;
 8014d12:	4b59      	ldr	r3, [pc, #356]	; (8014e78 <APP_THREAD_SendCoapMsg+0x1b4>)
 8014d14:	2201      	movs	r2, #1
 8014d16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		OT_MessageInfo.mPeerPort = OT_DEFAULT_COAP_PORT;
 8014d1a:	4b57      	ldr	r3, [pc, #348]	; (8014e78 <APP_THREAD_SendCoapMsg+0x1b4>)
 8014d1c:	f241 6233 	movw	r2, #5683	; 0x1633
 8014d20:	845a      	strh	r2, [r3, #34]	; 0x22
		OT_MessageInfo.mHopLimit = 64;
 8014d22:	4b55      	ldr	r3, [pc, #340]	; (8014e78 <APP_THREAD_SendCoapMsg+0x1b4>)
 8014d24:	2240      	movs	r2, #64	; 0x40
 8014d26:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

		/************** CREATE NEW MESSAGE ********************ifco*/

		// create header
		if (request_ack && (coapCode == OT_COAP_CODE_PUT))
 8014d2a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	d009      	beq.n	8014d46 <APP_THREAD_SendCoapMsg+0x82>
 8014d32:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014d36:	2b03      	cmp	r3, #3
 8014d38:	d105      	bne.n	8014d46 <APP_THREAD_SendCoapMsg+0x82>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_PUT);
 8014d3a:	2203      	movs	r2, #3
 8014d3c:	2100      	movs	r1, #0
 8014d3e:	4852      	ldr	r0, [pc, #328]	; (8014e88 <APP_THREAD_SendCoapMsg+0x1c4>)
 8014d40:	f7fd fd9f 	bl	8012882 <otCoapHeaderInit>
 8014d44:	e04a      	b.n	8014ddc <APP_THREAD_SendCoapMsg+0x118>
		else if (request_ack && (coapCode == OT_COAP_CODE_GET))
 8014d46:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014d4a:	2b00      	cmp	r3, #0
 8014d4c:	d009      	beq.n	8014d62 <APP_THREAD_SendCoapMsg+0x9e>
 8014d4e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014d52:	2b01      	cmp	r3, #1
 8014d54:	d105      	bne.n	8014d62 <APP_THREAD_SendCoapMsg+0x9e>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_GET);
 8014d56:	2201      	movs	r2, #1
 8014d58:	2100      	movs	r1, #0
 8014d5a:	484b      	ldr	r0, [pc, #300]	; (8014e88 <APP_THREAD_SendCoapMsg+0x1c4>)
 8014d5c:	f7fd fd91 	bl	8012882 <otCoapHeaderInit>
 8014d60:	e03c      	b.n	8014ddc <APP_THREAD_SendCoapMsg+0x118>
		else if (request_ack && (coapCode == OT_COAP_CODE_POST))
 8014d62:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014d66:	2b00      	cmp	r3, #0
 8014d68:	d009      	beq.n	8014d7e <APP_THREAD_SendCoapMsg+0xba>
 8014d6a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014d6e:	2b02      	cmp	r3, #2
 8014d70:	d105      	bne.n	8014d7e <APP_THREAD_SendCoapMsg+0xba>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_POST);
 8014d72:	2202      	movs	r2, #2
 8014d74:	2100      	movs	r1, #0
 8014d76:	4844      	ldr	r0, [pc, #272]	; (8014e88 <APP_THREAD_SendCoapMsg+0x1c4>)
 8014d78:	f7fd fd83 	bl	8012882 <otCoapHeaderInit>
 8014d7c:	e02e      	b.n	8014ddc <APP_THREAD_SendCoapMsg+0x118>
		else if (!request_ack && (coapCode == OT_COAP_CODE_PUT))
 8014d7e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	d109      	bne.n	8014d9a <APP_THREAD_SendCoapMsg+0xd6>
 8014d86:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014d8a:	2b03      	cmp	r3, #3
 8014d8c:	d105      	bne.n	8014d9a <APP_THREAD_SendCoapMsg+0xd6>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_PUT);
 8014d8e:	2203      	movs	r2, #3
 8014d90:	2110      	movs	r1, #16
 8014d92:	483d      	ldr	r0, [pc, #244]	; (8014e88 <APP_THREAD_SendCoapMsg+0x1c4>)
 8014d94:	f7fd fd75 	bl	8012882 <otCoapHeaderInit>
 8014d98:	e020      	b.n	8014ddc <APP_THREAD_SendCoapMsg+0x118>
		else if (!request_ack && (coapCode == OT_COAP_CODE_GET))
 8014d9a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	d109      	bne.n	8014db6 <APP_THREAD_SendCoapMsg+0xf2>
 8014da2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014da6:	2b01      	cmp	r3, #1
 8014da8:	d105      	bne.n	8014db6 <APP_THREAD_SendCoapMsg+0xf2>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_GET);
 8014daa:	2201      	movs	r2, #1
 8014dac:	2110      	movs	r1, #16
 8014dae:	4836      	ldr	r0, [pc, #216]	; (8014e88 <APP_THREAD_SendCoapMsg+0x1c4>)
 8014db0:	f7fd fd67 	bl	8012882 <otCoapHeaderInit>
 8014db4:	e012      	b.n	8014ddc <APP_THREAD_SendCoapMsg+0x118>
		else if (!request_ack && (coapCode == OT_COAP_CODE_POST))
 8014db6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014dba:	2b00      	cmp	r3, #0
 8014dbc:	d109      	bne.n	8014dd2 <APP_THREAD_SendCoapMsg+0x10e>
 8014dbe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014dc2:	2b02      	cmp	r3, #2
 8014dc4:	d105      	bne.n	8014dd2 <APP_THREAD_SendCoapMsg+0x10e>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_POST);
 8014dc6:	2202      	movs	r2, #2
 8014dc8:	2110      	movs	r1, #16
 8014dca:	482f      	ldr	r0, [pc, #188]	; (8014e88 <APP_THREAD_SendCoapMsg+0x1c4>)
 8014dcc:	f7fd fd59 	bl	8012882 <otCoapHeaderInit>
 8014dd0:	e004      	b.n	8014ddc <APP_THREAD_SendCoapMsg+0x118>
		else
			return // this return should never happen

//			  otCoapHeaderSetMessageId(&OT_Header, msgID); `//may not need since sendRequest should set to 0
			otCoapHeaderGenerateToken(&OT_Header, 2U); //This function sets the Token length and randomizes its value.
 8014dd2:	2102      	movs	r1, #2
 8014dd4:	482c      	ldr	r0, [pc, #176]	; (8014e88 <APP_THREAD_SendCoapMsg+0x1c4>)
 8014dd6:	f7fd fdbd 	bl	8012954 <otCoapHeaderGenerateToken>
 8014dda:	e049      	b.n	8014e70 <APP_THREAD_SendCoapMsg+0x1ac>

		// add the name of the resource
		error = otCoapHeaderAppendUriPathOptions(&OT_Header, resource);
 8014ddc:	6839      	ldr	r1, [r7, #0]
 8014dde:	482a      	ldr	r0, [pc, #168]	; (8014e88 <APP_THREAD_SendCoapMsg+0x1c4>)
 8014de0:	f7fd fe1b 	bl	8012a1a <otCoapHeaderAppendUriPathOptions>
 8014de4:	4603      	mov	r3, r0
 8014de6:	461a      	mov	r2, r3
 8014de8:	4b28      	ldr	r3, [pc, #160]	; (8014e8c <APP_THREAD_SendCoapMsg+0x1c8>)
 8014dea:	701a      	strb	r2, [r3, #0]
//			  if (error != OT_ERROR_NONE) while(1);

		// need this so the coap server doesnt try to parse as 'utf-8' and error out
		otCoapHeaderAppendContentFormatOption(&OT_Header, OT_COAP_OPTION_CONTENT_FORMAT_OCTET_STREAM);
 8014dec:	212a      	movs	r1, #42	; 0x2a
 8014dee:	4826      	ldr	r0, [pc, #152]	; (8014e88 <APP_THREAD_SendCoapMsg+0x1c4>)
 8014df0:	f7fd fde0 	bl	80129b4 <otCoapHeaderAppendContentFormatOption>
//			  if (error != OT_ERROR_NONE) while(1);

		// This function adds Payload Marker indicating beginning of the payload to the CoAP header
		otCoapHeaderSetPayloadMarker(&OT_Header); //TODO: if no msg, dont set marker and remove empty message below
 8014df4:	4824      	ldr	r0, [pc, #144]	; (8014e88 <APP_THREAD_SendCoapMsg+0x1c4>)
 8014df6:	f7fd fe42 	bl	8012a7e <otCoapHeaderSetPayloadMarker>

		// creates new message with headers but with empty payload
		pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 8014dfa:	4923      	ldr	r1, [pc, #140]	; (8014e88 <APP_THREAD_SendCoapMsg+0x1c4>)
 8014dfc:	2000      	movs	r0, #0
 8014dfe:	f7fd ff81 	bl	8012d04 <otCoapNewMessage>
 8014e02:	4602      	mov	r2, r0
 8014e04:	4b22      	ldr	r3, [pc, #136]	; (8014e90 <APP_THREAD_SendCoapMsg+0x1cc>)
 8014e06:	601a      	str	r2, [r3, #0]
//			while (1);

		// Append bytes to a message (this is where the payload gets added)

		// append message if there was one given
		if (msgSize > 0) {
 8014e08:	897b      	ldrh	r3, [r7, #10]
 8014e0a:	2b00      	cmp	r3, #0
 8014e0c:	d00b      	beq.n	8014e26 <APP_THREAD_SendCoapMsg+0x162>
			error = otMessageAppend(pOT_Message, message, msgSize);
 8014e0e:	4b20      	ldr	r3, [pc, #128]	; (8014e90 <APP_THREAD_SendCoapMsg+0x1cc>)
 8014e10:	681b      	ldr	r3, [r3, #0]
 8014e12:	897a      	ldrh	r2, [r7, #10]
 8014e14:	68f9      	ldr	r1, [r7, #12]
 8014e16:	4618      	mov	r0, r3
 8014e18:	f7fe fa6c 	bl	80132f4 <otMessageAppend>
 8014e1c:	4603      	mov	r3, r0
 8014e1e:	461a      	mov	r2, r3
 8014e20:	4b1a      	ldr	r3, [pc, #104]	; (8014e8c <APP_THREAD_SendCoapMsg+0x1c8>)
 8014e22:	701a      	strb	r2, [r3, #0]
 8014e24:	e00a      	b.n	8014e3c <APP_THREAD_SendCoapMsg+0x178>
		}else{
			error = otMessageAppend(pOT_Message, empty_message, 10);
 8014e26:	4b1a      	ldr	r3, [pc, #104]	; (8014e90 <APP_THREAD_SendCoapMsg+0x1cc>)
 8014e28:	681b      	ldr	r3, [r3, #0]
 8014e2a:	220a      	movs	r2, #10
 8014e2c:	4919      	ldr	r1, [pc, #100]	; (8014e94 <APP_THREAD_SendCoapMsg+0x1d0>)
 8014e2e:	4618      	mov	r0, r3
 8014e30:	f7fe fa60 	bl	80132f4 <otMessageAppend>
 8014e34:	4603      	mov	r3, r0
 8014e36:	461a      	mov	r2, r3
 8014e38:	4b14      	ldr	r3, [pc, #80]	; (8014e8c <APP_THREAD_SendCoapMsg+0x1c8>)
 8014e3a:	701a      	strb	r2, [r3, #0]
//			  if (error != OT_ERROR_NONE) while(1);

		// TODO: the response function should only be used for the border update event (I think only if message is embedded in ACK)?


		error = otCoapSendRequest(NULL,
 8014e3c:	4b14      	ldr	r3, [pc, #80]	; (8014e90 <APP_THREAD_SendCoapMsg+0x1cc>)
 8014e3e:	6819      	ldr	r1, [r3, #0]
 8014e40:	2300      	movs	r3, #0
 8014e42:	9300      	str	r3, [sp, #0]
 8014e44:	2300      	movs	r3, #0
 8014e46:	4a0c      	ldr	r2, [pc, #48]	; (8014e78 <APP_THREAD_SendCoapMsg+0x1b4>)
 8014e48:	2000      	movs	r0, #0
 8014e4a:	f7fd ff89 	bl	8012d60 <otCoapSendRequest>
 8014e4e:	4603      	mov	r3, r0
 8014e50:	461a      	mov	r2, r3
 8014e52:	4b0e      	ldr	r3, [pc, #56]	; (8014e8c <APP_THREAD_SendCoapMsg+0x1c8>)
 8014e54:	701a      	strb	r2, [r3, #0]
								NULL,
								(void*) NULL);


		// if error: free allocated message buffer if one was allocated
		if (error != OT_ERROR_NONE && pOT_Message != NULL) {
 8014e56:	4b0d      	ldr	r3, [pc, #52]	; (8014e8c <APP_THREAD_SendCoapMsg+0x1c8>)
 8014e58:	781b      	ldrb	r3, [r3, #0]
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	d008      	beq.n	8014e70 <APP_THREAD_SendCoapMsg+0x1ac>
 8014e5e:	4b0c      	ldr	r3, [pc, #48]	; (8014e90 <APP_THREAD_SendCoapMsg+0x1cc>)
 8014e60:	681b      	ldr	r3, [r3, #0]
 8014e62:	2b00      	cmp	r3, #0
 8014e64:	d004      	beq.n	8014e70 <APP_THREAD_SendCoapMsg+0x1ac>
			otMessageFree(pOT_Message);
 8014e66:	4b0a      	ldr	r3, [pc, #40]	; (8014e90 <APP_THREAD_SendCoapMsg+0x1cc>)
 8014e68:	681b      	ldr	r3, [r3, #0]
 8014e6a:	4618      	mov	r0, r3
 8014e6c:	f7fe f9e9 	bl	8013242 <otMessageFree>
		}

	} while (false);
}
 8014e70:	3714      	adds	r7, #20
 8014e72:	46bd      	mov	sp, r7
 8014e74:	bd90      	pop	{r4, r7, pc}
 8014e76:	bf00      	nop
 8014e78:	200275d8 	.word	0x200275d8
 8014e7c:	200276a0 	.word	0x200276a0
 8014e80:	08017568 	.word	0x08017568
 8014e84:	2002864c 	.word	0x2002864c
 8014e88:	20027604 	.word	0x20027604
 8014e8c:	20027698 	.word	0x20027698
 8014e90:	20027694 	.word	0x20027694
 8014e94:	200276d0 	.word	0x200276d0

08014e98 <APP_THREAD_SendCoapMsgForBorderSync>:

static void APP_THREAD_SendCoapMsgForBorderSync(void *message, uint16_t msgSize, otIp6Address *ipv6_addr, char *resource,
		uint8_t request_ack, otCoapCode coapCode, uint8_t msgID) {
 8014e98:	b590      	push	{r4, r7, lr}
 8014e9a:	b087      	sub	sp, #28
 8014e9c:	af02      	add	r7, sp, #8
 8014e9e:	60f8      	str	r0, [r7, #12]
 8014ea0:	607a      	str	r2, [r7, #4]
 8014ea2:	603b      	str	r3, [r7, #0]
 8014ea4:	460b      	mov	r3, r1
 8014ea6:	817b      	strh	r3, [r7, #10]
//			  multicastAddresses = otIp6GetMulticastAddresses(NULL);
//			  meshLocalEID =  otThreadGetMeshLocalEid(NULL);
//			  linkLocalIPV6 = otThreadGetLinkLocalIp6Address(NULL);

		// clear info
		memset(&OT_MessageInfo, 0, sizeof(OT_MessageInfo));
 8014ea8:	222c      	movs	r2, #44	; 0x2c
 8014eaa:	2100      	movs	r1, #0
 8014eac:	484e      	ldr	r0, [pc, #312]	; (8014fe8 <APP_THREAD_SendCoapMsgForBorderSync+0x150>)
 8014eae:	f001 f858 	bl	8015f62 <memset>

		// add destination IPv6 address to header
		// TODO : swap the below statements once ST has their shit fixed


		memcpy(&OT_MessageInfo.mPeerAddr, &multicastAddr, sizeof(otIp6Address));
 8014eb2:	4b4d      	ldr	r3, [pc, #308]	; (8014fe8 <APP_THREAD_SendCoapMsgForBorderSync+0x150>)
 8014eb4:	4a4d      	ldr	r2, [pc, #308]	; (8014fec <APP_THREAD_SendCoapMsgForBorderSync+0x154>)
 8014eb6:	f103 0410 	add.w	r4, r3, #16
 8014eba:	4613      	mov	r3, r2
 8014ebc:	6818      	ldr	r0, [r3, #0]
 8014ebe:	6859      	ldr	r1, [r3, #4]
 8014ec0:	689a      	ldr	r2, [r3, #8]
 8014ec2:	68db      	ldr	r3, [r3, #12]
 8014ec4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
//			  otIp6AddressFromString("fd11:22::c34c:7994:19f2:4b82", &OT_MessageInfo.mSockAddr);

//			  otIp6AddressFromString("fd11:22::c34c:7994:cccc:4b82", &OT_MessageInfo.mSockAddr);

		// populate message information
		OT_MessageInfo.mInterfaceId = OT_NETIF_INTERFACE_ID_THREAD;
 8014ec6:	4b48      	ldr	r3, [pc, #288]	; (8014fe8 <APP_THREAD_SendCoapMsgForBorderSync+0x150>)
 8014ec8:	2201      	movs	r2, #1
 8014eca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		OT_MessageInfo.mPeerPort = OT_DEFAULT_COAP_PORT;
 8014ece:	4b46      	ldr	r3, [pc, #280]	; (8014fe8 <APP_THREAD_SendCoapMsgForBorderSync+0x150>)
 8014ed0:	f241 6233 	movw	r2, #5683	; 0x1633
 8014ed4:	845a      	strh	r2, [r3, #34]	; 0x22
		OT_MessageInfo.mHopLimit = 64;
 8014ed6:	4b44      	ldr	r3, [pc, #272]	; (8014fe8 <APP_THREAD_SendCoapMsgForBorderSync+0x150>)
 8014ed8:	2240      	movs	r2, #64	; 0x40
 8014eda:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

		/************** CREATE NEW MESSAGE ********************ifco*/

		// create header
		if (request_ack && (coapCode == OT_COAP_CODE_PUT))
 8014ede:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	d009      	beq.n	8014efa <APP_THREAD_SendCoapMsgForBorderSync+0x62>
 8014ee6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014eea:	2b03      	cmp	r3, #3
 8014eec:	d105      	bne.n	8014efa <APP_THREAD_SendCoapMsgForBorderSync+0x62>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_PUT);
 8014eee:	2203      	movs	r2, #3
 8014ef0:	2100      	movs	r1, #0
 8014ef2:	483f      	ldr	r0, [pc, #252]	; (8014ff0 <APP_THREAD_SendCoapMsgForBorderSync+0x158>)
 8014ef4:	f7fd fcc5 	bl	8012882 <otCoapHeaderInit>
 8014ef8:	e04a      	b.n	8014f90 <APP_THREAD_SendCoapMsgForBorderSync+0xf8>
		else if (request_ack && (coapCode == OT_COAP_CODE_GET))
 8014efa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014efe:	2b00      	cmp	r3, #0
 8014f00:	d009      	beq.n	8014f16 <APP_THREAD_SendCoapMsgForBorderSync+0x7e>
 8014f02:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014f06:	2b01      	cmp	r3, #1
 8014f08:	d105      	bne.n	8014f16 <APP_THREAD_SendCoapMsgForBorderSync+0x7e>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_GET);
 8014f0a:	2201      	movs	r2, #1
 8014f0c:	2100      	movs	r1, #0
 8014f0e:	4838      	ldr	r0, [pc, #224]	; (8014ff0 <APP_THREAD_SendCoapMsgForBorderSync+0x158>)
 8014f10:	f7fd fcb7 	bl	8012882 <otCoapHeaderInit>
 8014f14:	e03c      	b.n	8014f90 <APP_THREAD_SendCoapMsgForBorderSync+0xf8>
		else if (request_ack && (coapCode == OT_COAP_CODE_POST))
 8014f16:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014f1a:	2b00      	cmp	r3, #0
 8014f1c:	d009      	beq.n	8014f32 <APP_THREAD_SendCoapMsgForBorderSync+0x9a>
 8014f1e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014f22:	2b02      	cmp	r3, #2
 8014f24:	d105      	bne.n	8014f32 <APP_THREAD_SendCoapMsgForBorderSync+0x9a>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_POST);
 8014f26:	2202      	movs	r2, #2
 8014f28:	2100      	movs	r1, #0
 8014f2a:	4831      	ldr	r0, [pc, #196]	; (8014ff0 <APP_THREAD_SendCoapMsgForBorderSync+0x158>)
 8014f2c:	f7fd fca9 	bl	8012882 <otCoapHeaderInit>
 8014f30:	e02e      	b.n	8014f90 <APP_THREAD_SendCoapMsgForBorderSync+0xf8>
		else if (!request_ack && (coapCode == OT_COAP_CODE_PUT))
 8014f32:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014f36:	2b00      	cmp	r3, #0
 8014f38:	d109      	bne.n	8014f4e <APP_THREAD_SendCoapMsgForBorderSync+0xb6>
 8014f3a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014f3e:	2b03      	cmp	r3, #3
 8014f40:	d105      	bne.n	8014f4e <APP_THREAD_SendCoapMsgForBorderSync+0xb6>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_PUT);
 8014f42:	2203      	movs	r2, #3
 8014f44:	2110      	movs	r1, #16
 8014f46:	482a      	ldr	r0, [pc, #168]	; (8014ff0 <APP_THREAD_SendCoapMsgForBorderSync+0x158>)
 8014f48:	f7fd fc9b 	bl	8012882 <otCoapHeaderInit>
 8014f4c:	e020      	b.n	8014f90 <APP_THREAD_SendCoapMsgForBorderSync+0xf8>
		else if (!request_ack && (coapCode == OT_COAP_CODE_GET))
 8014f4e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014f52:	2b00      	cmp	r3, #0
 8014f54:	d109      	bne.n	8014f6a <APP_THREAD_SendCoapMsgForBorderSync+0xd2>
 8014f56:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014f5a:	2b01      	cmp	r3, #1
 8014f5c:	d105      	bne.n	8014f6a <APP_THREAD_SendCoapMsgForBorderSync+0xd2>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_GET);
 8014f5e:	2201      	movs	r2, #1
 8014f60:	2110      	movs	r1, #16
 8014f62:	4823      	ldr	r0, [pc, #140]	; (8014ff0 <APP_THREAD_SendCoapMsgForBorderSync+0x158>)
 8014f64:	f7fd fc8d 	bl	8012882 <otCoapHeaderInit>
 8014f68:	e012      	b.n	8014f90 <APP_THREAD_SendCoapMsgForBorderSync+0xf8>
		else if (!request_ack && (coapCode == OT_COAP_CODE_POST))
 8014f6a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014f6e:	2b00      	cmp	r3, #0
 8014f70:	d109      	bne.n	8014f86 <APP_THREAD_SendCoapMsgForBorderSync+0xee>
 8014f72:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014f76:	2b02      	cmp	r3, #2
 8014f78:	d105      	bne.n	8014f86 <APP_THREAD_SendCoapMsgForBorderSync+0xee>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_POST);
 8014f7a:	2202      	movs	r2, #2
 8014f7c:	2110      	movs	r1, #16
 8014f7e:	481c      	ldr	r0, [pc, #112]	; (8014ff0 <APP_THREAD_SendCoapMsgForBorderSync+0x158>)
 8014f80:	f7fd fc7f 	bl	8012882 <otCoapHeaderInit>
 8014f84:	e004      	b.n	8014f90 <APP_THREAD_SendCoapMsgForBorderSync+0xf8>
		else
			return // this return should never happen

//			  otCoapHeaderSetMessageId(&OT_Header, msgID); `//may not need since sendRequest should set to 0
			otCoapHeaderGenerateToken(&OT_Header, 2U); //This function sets the Token length and randomizes its value.
 8014f86:	2102      	movs	r1, #2
 8014f88:	4819      	ldr	r0, [pc, #100]	; (8014ff0 <APP_THREAD_SendCoapMsgForBorderSync+0x158>)
 8014f8a:	f7fd fce3 	bl	8012954 <otCoapHeaderGenerateToken>
 8014f8e:	e028      	b.n	8014fe2 <APP_THREAD_SendCoapMsgForBorderSync+0x14a>

		// add the name of the resource
		error = otCoapHeaderAppendUriPathOptions(&OT_Header, resource);
 8014f90:	6839      	ldr	r1, [r7, #0]
 8014f92:	4817      	ldr	r0, [pc, #92]	; (8014ff0 <APP_THREAD_SendCoapMsgForBorderSync+0x158>)
 8014f94:	f7fd fd41 	bl	8012a1a <otCoapHeaderAppendUriPathOptions>
 8014f98:	4603      	mov	r3, r0
 8014f9a:	461a      	mov	r2, r3
 8014f9c:	4b15      	ldr	r3, [pc, #84]	; (8014ff4 <APP_THREAD_SendCoapMsgForBorderSync+0x15c>)
 8014f9e:	701a      	strb	r2, [r3, #0]

		// This function adds Payload Marker indicating beginning of the payload to the CoAP header
//		otCoapHeaderSetPayloadMarker(&OT_Header);

		// creates new message with headers but with empty payload
		pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 8014fa0:	4913      	ldr	r1, [pc, #76]	; (8014ff0 <APP_THREAD_SendCoapMsgForBorderSync+0x158>)
 8014fa2:	2000      	movs	r0, #0
 8014fa4:	f7fd feae 	bl	8012d04 <otCoapNewMessage>
 8014fa8:	4602      	mov	r2, r0
 8014faa:	4b13      	ldr	r3, [pc, #76]	; (8014ff8 <APP_THREAD_SendCoapMsgForBorderSync+0x160>)
 8014fac:	601a      	str	r2, [r3, #0]
			 // if (error != OT_ERROR_NONE) while(1);

		// TODO: the response function should only be used for the border update event (I think only if message is embedded in ACK)?


		error = otCoapSendRequest(NULL, pOT_Message, &OT_MessageInfo, &APP_THREAD_DummyRespHandler,
 8014fae:	4b12      	ldr	r3, [pc, #72]	; (8014ff8 <APP_THREAD_SendCoapMsgForBorderSync+0x160>)
 8014fb0:	6819      	ldr	r1, [r3, #0]
 8014fb2:	4b12      	ldr	r3, [pc, #72]	; (8014ffc <APP_THREAD_SendCoapMsgForBorderSync+0x164>)
 8014fb4:	9300      	str	r3, [sp, #0]
 8014fb6:	4b12      	ldr	r3, [pc, #72]	; (8015000 <APP_THREAD_SendCoapMsgForBorderSync+0x168>)
 8014fb8:	4a0b      	ldr	r2, [pc, #44]	; (8014fe8 <APP_THREAD_SendCoapMsgForBorderSync+0x150>)
 8014fba:	2000      	movs	r0, #0
 8014fbc:	f7fd fed0 	bl	8012d60 <otCoapSendRequest>
 8014fc0:	4603      	mov	r3, r0
 8014fc2:	461a      	mov	r2, r3
 8014fc4:	4b0b      	ldr	r3, [pc, #44]	; (8014ff4 <APP_THREAD_SendCoapMsgForBorderSync+0x15c>)
 8014fc6:	701a      	strb	r2, [r3, #0]
				(void*) &APP_THREAD_CoapRespHandler_UpdateBorderRouter);



		// if error: free allocated message buffer if one was allocated
		if (error != OT_ERROR_NONE && pOT_Message != NULL) {
 8014fc8:	4b0a      	ldr	r3, [pc, #40]	; (8014ff4 <APP_THREAD_SendCoapMsgForBorderSync+0x15c>)
 8014fca:	781b      	ldrb	r3, [r3, #0]
 8014fcc:	2b00      	cmp	r3, #0
 8014fce:	d008      	beq.n	8014fe2 <APP_THREAD_SendCoapMsgForBorderSync+0x14a>
 8014fd0:	4b09      	ldr	r3, [pc, #36]	; (8014ff8 <APP_THREAD_SendCoapMsgForBorderSync+0x160>)
 8014fd2:	681b      	ldr	r3, [r3, #0]
 8014fd4:	2b00      	cmp	r3, #0
 8014fd6:	d004      	beq.n	8014fe2 <APP_THREAD_SendCoapMsgForBorderSync+0x14a>
			otMessageFree(pOT_Message);
 8014fd8:	4b07      	ldr	r3, [pc, #28]	; (8014ff8 <APP_THREAD_SendCoapMsgForBorderSync+0x160>)
 8014fda:	681b      	ldr	r3, [r3, #0]
 8014fdc:	4618      	mov	r0, r3
 8014fde:	f7fe f930 	bl	8013242 <otMessageFree>
		}

	} while (false);

}
 8014fe2:	3714      	adds	r7, #20
 8014fe4:	46bd      	mov	sp, r7
 8014fe6:	bd90      	pop	{r4, r7, pc}
 8014fe8:	200275d8 	.word	0x200275d8
 8014fec:	2002864c 	.word	0x2002864c
 8014ff0:	20027604 	.word	0x20027604
 8014ff4:	20027698 	.word	0x20027698
 8014ff8:	20027694 	.word	0x20027694
 8014ffc:	08014849 	.word	0x08014849
 8015000:	0801482d 	.word	0x0801482d

08015004 <APP_THREAD_SendDataResponse>:
request and the Acknowledgement MUST match, and the tokens of the
response and original request MUST match.  In a separate
response, just the tokens of the response and original request
MUST match.*/

static void APP_THREAD_SendDataResponse(void *message, uint16_t msgSize, otCoapHeader *pRequestHeader, const otMessageInfo *pMessageInfo) {
 8015004:	b590      	push	{r4, r7, lr}
 8015006:	b087      	sub	sp, #28
 8015008:	af00      	add	r7, sp, #0
 801500a:	60f8      	str	r0, [r7, #12]
 801500c:	607a      	str	r2, [r7, #4]
 801500e:	603b      	str	r3, [r7, #0]
 8015010:	460b      	mov	r3, r1
 8015012:	817b      	strh	r3, [r7, #10]
	otError error = OT_ERROR_NONE;
 8015014:	2300      	movs	r3, #0
 8015016:	75fb      	strb	r3, [r7, #23]

	//APP_DBG(" ********* APP_THREAD_SendDataResponse \r\n");
	otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_ACKNOWLEDGMENT, OT_COAP_CODE_CHANGED);
 8015018:	2244      	movs	r2, #68	; 0x44
 801501a:	2120      	movs	r1, #32
 801501c:	4826      	ldr	r0, [pc, #152]	; (80150b8 <APP_THREAD_SendDataResponse+0xb4>)
 801501e:	f7fd fc30 	bl	8012882 <otCoapHeaderInit>
	otCoapHeaderSetMessageId(&OT_Header, otCoapHeaderGetMessageId(pRequestHeader));
 8015022:	6878      	ldr	r0, [r7, #4]
 8015024:	f7fd fde5 	bl	8012bf2 <otCoapHeaderGetMessageId>
 8015028:	4603      	mov	r3, r0
 801502a:	4619      	mov	r1, r3
 801502c:	4822      	ldr	r0, [pc, #136]	; (80150b8 <APP_THREAD_SendDataResponse+0xb4>)
 801502e:	f7fd fd54 	bl	8012ada <otCoapHeaderSetMessageId>
	otCoapHeaderSetToken(&OT_Header, otCoapHeaderGetToken(pRequestHeader), otCoapHeaderGetTokenLength(pRequestHeader));
 8015032:	6878      	ldr	r0, [r7, #4]
 8015034:	f7fd fe39 	bl	8012caa <otCoapHeaderGetToken>
 8015038:	4604      	mov	r4, r0
 801503a:	6878      	ldr	r0, [r7, #4]
 801503c:	f7fd fe07 	bl	8012c4e <otCoapHeaderGetTokenLength>
 8015040:	4603      	mov	r3, r0
 8015042:	461a      	mov	r2, r3
 8015044:	4621      	mov	r1, r4
 8015046:	481c      	ldr	r0, [pc, #112]	; (80150b8 <APP_THREAD_SendDataResponse+0xb4>)
 8015048:	f7fd fc50 	bl	80128ec <otCoapHeaderSetToken>

	if (msgSize > 0){
 801504c:	897b      	ldrh	r3, [r7, #10]
 801504e:	2b00      	cmp	r3, #0
 8015050:	d006      	beq.n	8015060 <APP_THREAD_SendDataResponse+0x5c>
		// need this so the coap server doesnt try to parse as 'utf-8' and error out
		otCoapHeaderAppendContentFormatOption(&OT_Header, OT_COAP_OPTION_CONTENT_FORMAT_OCTET_STREAM);
 8015052:	212a      	movs	r1, #42	; 0x2a
 8015054:	4818      	ldr	r0, [pc, #96]	; (80150b8 <APP_THREAD_SendDataResponse+0xb4>)
 8015056:	f7fd fcad 	bl	80129b4 <otCoapHeaderAppendContentFormatOption>
//			  if (error != OT_ERROR_NONE) while(1);

		// This function adds Payload Marker indicating beginning of the payload to the CoAP header
		otCoapHeaderSetPayloadMarker(&OT_Header); //TODO: if no msg, dont set marker and remove empty message below
 801505a:	4817      	ldr	r0, [pc, #92]	; (80150b8 <APP_THREAD_SendDataResponse+0xb4>)
 801505c:	f7fd fd0f 	bl	8012a7e <otCoapHeaderSetPayloadMarker>
	}

	pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 8015060:	4915      	ldr	r1, [pc, #84]	; (80150b8 <APP_THREAD_SendDataResponse+0xb4>)
 8015062:	2000      	movs	r0, #0
 8015064:	f7fd fe4e 	bl	8012d04 <otCoapNewMessage>
 8015068:	4602      	mov	r2, r0
 801506a:	4b14      	ldr	r3, [pc, #80]	; (80150bc <APP_THREAD_SendDataResponse+0xb8>)
 801506c:	601a      	str	r2, [r3, #0]
	if (pOT_Message == NULL) {
		//APP_THREAD_Error(ERR_NEW_MSG_ALLOC,error);
	}

	// append message if there was one given
	if (msgSize > 0) {
 801506e:	897b      	ldrh	r3, [r7, #10]
 8015070:	2b00      	cmp	r3, #0
 8015072:	d008      	beq.n	8015086 <APP_THREAD_SendDataResponse+0x82>
		error = otMessageAppend(pOT_Message, message, msgSize);
 8015074:	4b11      	ldr	r3, [pc, #68]	; (80150bc <APP_THREAD_SendDataResponse+0xb8>)
 8015076:	681b      	ldr	r3, [r3, #0]
 8015078:	897a      	ldrh	r2, [r7, #10]
 801507a:	68f9      	ldr	r1, [r7, #12]
 801507c:	4618      	mov	r0, r3
 801507e:	f7fe f939 	bl	80132f4 <otMessageAppend>
 8015082:	4603      	mov	r3, r0
 8015084:	75fb      	strb	r3, [r7, #23]
	}

	error = otCoapSendResponse(NULL, pOT_Message, pMessageInfo);
 8015086:	4b0d      	ldr	r3, [pc, #52]	; (80150bc <APP_THREAD_SendDataResponse+0xb8>)
 8015088:	681b      	ldr	r3, [r3, #0]
 801508a:	683a      	ldr	r2, [r7, #0]
 801508c:	4619      	mov	r1, r3
 801508e:	2000      	movs	r0, #0
 8015090:	f7fd feff 	bl	8012e92 <otCoapSendResponse>
 8015094:	4603      	mov	r3, r0
 8015096:	75fb      	strb	r3, [r7, #23]
	if (error != OT_ERROR_NONE && pOT_Message != NULL) {
 8015098:	7dfb      	ldrb	r3, [r7, #23]
 801509a:	2b00      	cmp	r3, #0
 801509c:	d008      	beq.n	80150b0 <APP_THREAD_SendDataResponse+0xac>
 801509e:	4b07      	ldr	r3, [pc, #28]	; (80150bc <APP_THREAD_SendDataResponse+0xb8>)
 80150a0:	681b      	ldr	r3, [r3, #0]
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	d004      	beq.n	80150b0 <APP_THREAD_SendDataResponse+0xac>
		otMessageFree(pOT_Message);
 80150a6:	4b05      	ldr	r3, [pc, #20]	; (80150bc <APP_THREAD_SendDataResponse+0xb8>)
 80150a8:	681b      	ldr	r3, [r3, #0]
 80150aa:	4618      	mov	r0, r3
 80150ac:	f7fe f8c9 	bl	8013242 <otMessageFree>
		//APP_THREAD_Error(ERR_THREAD_DATA_RESPONSE,error);
	}
}
 80150b0:	bf00      	nop
 80150b2:	371c      	adds	r7, #28
 80150b4:	46bd      	mov	sp, r7
 80150b6:	bd90      	pop	{r4, r7, pc}
 80150b8:	20027604 	.word	0x20027604
 80150bc:	20027694 	.word	0x20027694

080150c0 <APP_THREAD_RegisterCmdBuffer>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void APP_THREAD_RegisterCmdBuffer(TL_CmdPacket_t* p_buffer)
{
 80150c0:	b480      	push	{r7}
 80150c2:	b083      	sub	sp, #12
 80150c4:	af00      	add	r7, sp, #0
 80150c6:	6078      	str	r0, [r7, #4]
  p_thread_otcmdbuffer = p_buffer;
 80150c8:	4a04      	ldr	r2, [pc, #16]	; (80150dc <APP_THREAD_RegisterCmdBuffer+0x1c>)
 80150ca:	687b      	ldr	r3, [r7, #4]
 80150cc:	6013      	str	r3, [r2, #0]
}
 80150ce:	bf00      	nop
 80150d0:	370c      	adds	r7, #12
 80150d2:	46bd      	mov	sp, r7
 80150d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150d8:	4770      	bx	lr
 80150da:	bf00      	nop
 80150dc:	200275c0 	.word	0x200275c0

080150e0 <THREAD_Get_OTCmdPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdPayloadBuffer(void)
{
 80150e0:	b480      	push	{r7}
 80150e2:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)p_thread_otcmdbuffer->cmdserial.cmd.payload;
 80150e4:	4b03      	ldr	r3, [pc, #12]	; (80150f4 <THREAD_Get_OTCmdPayloadBuffer+0x14>)
 80150e6:	681b      	ldr	r3, [r3, #0]
 80150e8:	330c      	adds	r3, #12
}
 80150ea:	4618      	mov	r0, r3
 80150ec:	46bd      	mov	sp, r7
 80150ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150f2:	4770      	bx	lr
 80150f4:	200275c0 	.word	0x200275c0

080150f8 <THREAD_Get_OTCmdRspPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdRspPayloadBuffer(void)
{
 80150f8:	b480      	push	{r7}
 80150fa:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)((TL_EvtPacket_t *)p_thread_otcmdbuffer)->evtserial.evt.payload;
 80150fc:	4b03      	ldr	r3, [pc, #12]	; (801510c <THREAD_Get_OTCmdRspPayloadBuffer+0x14>)
 80150fe:	681b      	ldr	r3, [r3, #0]
 8015100:	330b      	adds	r3, #11
}
 8015102:	4618      	mov	r0, r3
 8015104:	46bd      	mov	sp, r7
 8015106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801510a:	4770      	bx	lr
 801510c:	200275c0 	.word	0x200275c0

08015110 <THREAD_Get_NotificationPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_NotificationPayloadBuffer(void)
{
 8015110:	b480      	push	{r7}
 8015112:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)(p_thread_notif_M0_to_M4)->evtserial.evt.payload;
 8015114:	4b03      	ldr	r3, [pc, #12]	; (8015124 <THREAD_Get_NotificationPayloadBuffer+0x14>)
 8015116:	681b      	ldr	r3, [r3, #0]
 8015118:	330b      	adds	r3, #11
}
 801511a:	4618      	mov	r0, r3
 801511c:	46bd      	mov	sp, r7
 801511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015122:	4770      	bx	lr
 8015124:	200275c4 	.word	0x200275c4

08015128 <Ot_Cmd_Transfer>:
 *
 * @param   None
 * @return  None
 */
void Ot_Cmd_Transfer(void)
{
 8015128:	b580      	push	{r7, lr}
 801512a:	b082      	sub	sp, #8
 801512c:	af00      	add	r7, sp, #0
  /* OpenThread OT command cmdcode range 0x280 .. 0x3DF = 352 */
  p_thread_otcmdbuffer->cmdserial.cmd.cmdcode = 0x280U;
 801512e:	4b0f      	ldr	r3, [pc, #60]	; (801516c <Ot_Cmd_Transfer+0x44>)
 8015130:	681b      	ldr	r3, [r3, #0]
 8015132:	2200      	movs	r2, #0
 8015134:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8015138:	725a      	strb	r2, [r3, #9]
 801513a:	2200      	movs	r2, #0
 801513c:	f042 0202 	orr.w	r2, r2, #2
 8015140:	729a      	strb	r2, [r3, #10]
  /* Size = otCmdBuffer->Size (Number of OT cmd arguments : 1 arg = 32bits so multiply by 4 to get size in bytes)
   * + ID (4 bytes) + Size (4 bytes) */
  uint32_t l_size = ((Thread_OT_Cmd_Request_t*)(p_thread_otcmdbuffer->cmdserial.cmd.payload))->Size * 4U + 8U;
 8015142:	4b0a      	ldr	r3, [pc, #40]	; (801516c <Ot_Cmd_Transfer+0x44>)
 8015144:	681b      	ldr	r3, [r3, #0]
 8015146:	330c      	adds	r3, #12
 8015148:	685b      	ldr	r3, [r3, #4]
 801514a:	3302      	adds	r3, #2
 801514c:	009b      	lsls	r3, r3, #2
 801514e:	607b      	str	r3, [r7, #4]
  p_thread_otcmdbuffer->cmdserial.cmd.plen = l_size;
 8015150:	4b06      	ldr	r3, [pc, #24]	; (801516c <Ot_Cmd_Transfer+0x44>)
 8015152:	681b      	ldr	r3, [r3, #0]
 8015154:	687a      	ldr	r2, [r7, #4]
 8015156:	b2d2      	uxtb	r2, r2
 8015158:	72da      	strb	r2, [r3, #11]

  TL_OT_SendCmd();
 801515a:	f7fe ffb1 	bl	80140c0 <TL_OT_SendCmd>

  /* Wait completion of cmd */
  Wait_Getting_Ack_From_M0();
 801515e:	f000 f829 	bl	80151b4 <Wait_Getting_Ack_From_M0>
}
 8015162:	bf00      	nop
 8015164:	3708      	adds	r7, #8
 8015166:	46bd      	mov	sp, r7
 8015168:	bd80      	pop	{r7, pc}
 801516a:	bf00      	nop
 801516c:	200275c0 	.word	0x200275c0

08015170 <TL_OT_CmdEvtReceived>:
 *
 * @param   Otbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_OT_CmdEvtReceived( TL_EvtPacket_t * Otbuffer )
{
 8015170:	b580      	push	{r7, lr}
 8015172:	b082      	sub	sp, #8
 8015174:	af00      	add	r7, sp, #0
 8015176:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Otbuffer);

  Receive_Ack_From_M0();
 8015178:	f000 f82e 	bl	80151d8 <Receive_Ack_From_M0>
}
 801517c:	bf00      	nop
 801517e:	3708      	adds	r7, #8
 8015180:	46bd      	mov	sp, r7
 8015182:	bd80      	pop	{r7, pc}

08015184 <TL_THREAD_NotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_NotReceived( TL_EvtPacket_t * Notbuffer )
{
 8015184:	b580      	push	{r7, lr}
 8015186:	b082      	sub	sp, #8
 8015188:	af00      	add	r7, sp, #0
 801518a:	6078      	str	r0, [r7, #4]
  p_thread_notif_M0_to_M4 = Notbuffer;
 801518c:	4a04      	ldr	r2, [pc, #16]	; (80151a0 <TL_THREAD_NotReceived+0x1c>)
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	6013      	str	r3, [r2, #0]

  Receive_Notification_From_M0();
 8015192:	f000 f82d 	bl	80151f0 <Receive_Notification_From_M0>
}
 8015196:	bf00      	nop
 8015198:	3708      	adds	r7, #8
 801519a:	46bd      	mov	sp, r7
 801519c:	bd80      	pop	{r7, pc}
 801519e:	bf00      	nop
 80151a0:	200275c4 	.word	0x200275c4

080151a4 <Pre_OtCmdProcessing>:
  *         pending before sending a new ot command.
  * @param  None
  * @retval None
  */
void Pre_OtCmdProcessing(void)
{
 80151a4:	b480      	push	{r7}
 80151a6:	af00      	add	r7, sp, #0

}
 80151a8:	bf00      	nop
 80151aa:	46bd      	mov	sp, r7
 80151ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151b0:	4770      	bx	lr
	...

080151b4 <Wait_Getting_Ack_From_M0>:
  *
  * @param  None
  * @retval None
  */
static void Wait_Getting_Ack_From_M0(void)
{
 80151b4:	b480      	push	{r7}
 80151b6:	af00      	add	r7, sp, #0
  while (FlagReceiveAckFromM0 == 0)
 80151b8:	bf00      	nop
 80151ba:	4b06      	ldr	r3, [pc, #24]	; (80151d4 <Wait_Getting_Ack_From_M0+0x20>)
 80151bc:	681b      	ldr	r3, [r3, #0]
 80151be:	2b00      	cmp	r3, #0
 80151c0:	d0fb      	beq.n	80151ba <Wait_Getting_Ack_From_M0+0x6>
  {
  }
  FlagReceiveAckFromM0 = 0;
 80151c2:	4b04      	ldr	r3, [pc, #16]	; (80151d4 <Wait_Getting_Ack_From_M0+0x20>)
 80151c4:	2200      	movs	r2, #0
 80151c6:	601a      	str	r2, [r3, #0]
}
 80151c8:	bf00      	nop
 80151ca:	46bd      	mov	sp, r7
 80151cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151d0:	4770      	bx	lr
 80151d2:	bf00      	nop
 80151d4:	200275cc 	.word	0x200275cc

080151d8 <Receive_Ack_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Ack_From_M0(void)
{
 80151d8:	b480      	push	{r7}
 80151da:	af00      	add	r7, sp, #0
  FlagReceiveAckFromM0 = 1;
 80151dc:	4b03      	ldr	r3, [pc, #12]	; (80151ec <Receive_Ack_From_M0+0x14>)
 80151de:	2201      	movs	r2, #1
 80151e0:	601a      	str	r2, [r3, #0]
}
 80151e2:	bf00      	nop
 80151e4:	46bd      	mov	sp, r7
 80151e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151ea:	4770      	bx	lr
 80151ec:	200275cc 	.word	0x200275cc

080151f0 <Receive_Notification_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Notification_From_M0(void)
{
 80151f0:	b580      	push	{r7, lr}
 80151f2:	af00      	add	r7, sp, #0
  CptReceiveMsgFromM0++;
 80151f4:	4b06      	ldr	r3, [pc, #24]	; (8015210 <Receive_Notification_From_M0+0x20>)
 80151f6:	681b      	ldr	r3, [r3, #0]
 80151f8:	3301      	adds	r3, #1
 80151fa:	4a05      	ldr	r2, [pc, #20]	; (8015210 <Receive_Notification_From_M0+0x20>)
 80151fc:	6013      	str	r3, [r2, #0]
  osThreadFlagsSet(OsTaskMsgM0ToM4Id,1);
 80151fe:	4b05      	ldr	r3, [pc, #20]	; (8015214 <Receive_Notification_From_M0+0x24>)
 8015200:	681b      	ldr	r3, [r3, #0]
 8015202:	2101      	movs	r1, #1
 8015204:	4618      	mov	r0, r3
 8015206:	f7f8 fff3 	bl	800e1f0 <osThreadFlagsSet>
}
 801520a:	bf00      	nop
 801520c:	bd80      	pop	{r7, pc}
 801520e:	bf00      	nop
 8015210:	200275c8 	.word	0x200275c8
 8015214:	200275d0 	.word	0x200275d0

08015218 <Send_CLI_To_M0>:
 * @brief Process sends receive CLI command to M0.
 * @param  None
 * @retval None
 */
static void Send_CLI_To_M0(void)
{
 8015218:	b580      	push	{r7, lr}
 801521a:	af00      	add	r7, sp, #0
  memset(ThreadCliCmdBuffer.cmdserial.cmd.payload, 0x0U, 255U);
 801521c:	22ff      	movs	r2, #255	; 0xff
 801521e:	2100      	movs	r1, #0
 8015220:	4812      	ldr	r0, [pc, #72]	; (801526c <Send_CLI_To_M0+0x54>)
 8015222:	f000 fe9e 	bl	8015f62 <memset>
  memcpy(ThreadCliCmdBuffer.cmdserial.cmd.payload, CommandString, indexReceiveChar);
 8015226:	4b12      	ldr	r3, [pc, #72]	; (8015270 <Send_CLI_To_M0+0x58>)
 8015228:	881b      	ldrh	r3, [r3, #0]
 801522a:	b29b      	uxth	r3, r3
 801522c:	461a      	mov	r2, r3
 801522e:	4911      	ldr	r1, [pc, #68]	; (8015274 <Send_CLI_To_M0+0x5c>)
 8015230:	480e      	ldr	r0, [pc, #56]	; (801526c <Send_CLI_To_M0+0x54>)
 8015232:	f000 fe8b 	bl	8015f4c <memcpy>
  ThreadCliCmdBuffer.cmdserial.cmd.plen = indexReceiveChar;
 8015236:	4b0e      	ldr	r3, [pc, #56]	; (8015270 <Send_CLI_To_M0+0x58>)
 8015238:	881b      	ldrh	r3, [r3, #0]
 801523a:	b29b      	uxth	r3, r3
 801523c:	b2da      	uxtb	r2, r3
 801523e:	4b0e      	ldr	r3, [pc, #56]	; (8015278 <Send_CLI_To_M0+0x60>)
 8015240:	72da      	strb	r2, [r3, #11]
  ThreadCliCmdBuffer.cmdserial.cmd.cmdcode = 0x0;
 8015242:	4b0d      	ldr	r3, [pc, #52]	; (8015278 <Send_CLI_To_M0+0x60>)
 8015244:	2200      	movs	r2, #0
 8015246:	725a      	strb	r2, [r3, #9]
 8015248:	2200      	movs	r2, #0
 801524a:	729a      	strb	r2, [r3, #10]

  /* Clear receive buffer, character counter and command complete */
  CptReceiveCmdFromUser = 0;
 801524c:	4b0b      	ldr	r3, [pc, #44]	; (801527c <Send_CLI_To_M0+0x64>)
 801524e:	2200      	movs	r2, #0
 8015250:	801a      	strh	r2, [r3, #0]
  indexReceiveChar = 0;
 8015252:	4b07      	ldr	r3, [pc, #28]	; (8015270 <Send_CLI_To_M0+0x58>)
 8015254:	2200      	movs	r2, #0
 8015256:	801a      	strh	r2, [r3, #0]
  memset(CommandString, 0, C_SIZE_CMD_STRING);
 8015258:	f44f 7280 	mov.w	r2, #256	; 0x100
 801525c:	2100      	movs	r1, #0
 801525e:	4805      	ldr	r0, [pc, #20]	; (8015274 <Send_CLI_To_M0+0x5c>)
 8015260:	f000 fe7f 	bl	8015f62 <memset>

  TL_CLI_SendCmd();
 8015264:	f7fe ff3a 	bl	80140dc <TL_CLI_SendCmd>
}
 8015268:	bf00      	nop
 801526a:	bd80      	pop	{r7, pc}
 801526c:	20030a5c 	.word	0x20030a5c
 8015270:	200275bc 	.word	0x200275bc
 8015274:	200274bc 	.word	0x200274bc
 8015278:	20030a50 	.word	0x20030a50
 801527c:	200275be 	.word	0x200275be

08015280 <Send_CLI_Ack_For_OT>:
 * @brief Send notification for CLI TL Channel.
 * @param  None
 * @retval None
 */
static void Send_CLI_Ack_For_OT(void)
{
 8015280:	b580      	push	{r7, lr}
 8015282:	af00      	add	r7, sp, #0

  /* Notify M0 that characters have been sent to UART */
  TL_THREAD_CliSendAck();
 8015284:	f7fe ff46 	bl	8014114 <TL_THREAD_CliSendAck>
}
 8015288:	bf00      	nop
 801528a:	bd80      	pop	{r7, pc}

0801528c <APP_THREAD_Init_UART_CLI>:
 * @brief Perform initialization of CLI UART interface.
 * @param  None
 * @retval None
 */
void APP_THREAD_Init_UART_CLI(void)
{
 801528c:	b580      	push	{r7, lr}
 801528e:	af00      	add	r7, sp, #0
#if (CFG_FULL_LOW_POWER == 0)
  OsTaskCliId = osThreadNew(APP_THREAD_FreeRTOSSendCLIToM0Task, NULL,&ThreadCliProcess_attr);
 8015290:	4a04      	ldr	r2, [pc, #16]	; (80152a4 <APP_THREAD_Init_UART_CLI+0x18>)
 8015292:	2100      	movs	r1, #0
 8015294:	4804      	ldr	r0, [pc, #16]	; (80152a8 <APP_THREAD_Init_UART_CLI+0x1c>)
 8015296:	f7f8 feff 	bl	800e098 <osThreadNew>
 801529a:	4602      	mov	r2, r0
 801529c:	4b03      	ldr	r3, [pc, #12]	; (80152ac <APP_THREAD_Init_UART_CLI+0x20>)
 801529e:	601a      	str	r2, [r3, #0]
#else
#if (CFG_FULL_LOW_POWER == 0)
//  HW_UART_Receive_IT(CFG_CLI_UART, aRxBuffer, 1, RxCpltCallback);
#endif /* (CFG_FULL_LOW_POWER == 0) */
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */
}
 80152a0:	bf00      	nop
 80152a2:	bd80      	pop	{r7, pc}
 80152a4:	080179a8 	.word	0x080179a8
 80152a8:	080147d3 	.word	0x080147d3
 80152ac:	200275d4 	.word	0x200275d4

080152b0 <APP_THREAD_TL_THREAD_INIT>:
 * @brief Perform initialization of TL for THREAD.
 * @param  None
 * @retval None
 */
void APP_THREAD_TL_THREAD_INIT(void)
{
 80152b0:	b580      	push	{r7, lr}
 80152b2:	af00      	add	r7, sp, #0
  ThreadConfigBuffer.p_ThreadOtCmdRspBuffer = (uint8_t*)&ThreadOtCmdBuffer;
 80152b4:	4b06      	ldr	r3, [pc, #24]	; (80152d0 <APP_THREAD_TL_THREAD_INIT+0x20>)
 80152b6:	4a07      	ldr	r2, [pc, #28]	; (80152d4 <APP_THREAD_TL_THREAD_INIT+0x24>)
 80152b8:	601a      	str	r2, [r3, #0]
  ThreadConfigBuffer.p_ThreadNotAckBuffer = (uint8_t*)ThreadNotifRspEvtBuffer;
 80152ba:	4b05      	ldr	r3, [pc, #20]	; (80152d0 <APP_THREAD_TL_THREAD_INIT+0x20>)
 80152bc:	4a06      	ldr	r2, [pc, #24]	; (80152d8 <APP_THREAD_TL_THREAD_INIT+0x28>)
 80152be:	609a      	str	r2, [r3, #8]
  ThreadConfigBuffer.p_ThreadCliRspBuffer = (uint8_t*)&ThreadCliCmdBuffer;
 80152c0:	4b03      	ldr	r3, [pc, #12]	; (80152d0 <APP_THREAD_TL_THREAD_INIT+0x20>)
 80152c2:	4a06      	ldr	r2, [pc, #24]	; (80152dc <APP_THREAD_TL_THREAD_INIT+0x2c>)
 80152c4:	605a      	str	r2, [r3, #4]

  TL_THREAD_Init( &ThreadConfigBuffer );
 80152c6:	4802      	ldr	r0, [pc, #8]	; (80152d0 <APP_THREAD_TL_THREAD_INIT+0x20>)
 80152c8:	f7fe fede 	bl	8014088 <TL_THREAD_Init>
}
 80152cc:	bf00      	nop
 80152ce:	bd80      	pop	{r7, pc}
 80152d0:	200300b8 	.word	0x200300b8
 80152d4:	20030838 	.word	0x20030838
 80152d8:	20030944 	.word	0x20030944
 80152dc:	20030a50 	.word	0x20030a50

080152e0 <TL_THREAD_CliNotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_CliNotReceived( TL_EvtPacket_t * Notbuffer )
{
 80152e0:	b580      	push	{r7, lr}
 80152e2:	b084      	sub	sp, #16
 80152e4:	af00      	add	r7, sp, #0
 80152e6:	6078      	str	r0, [r7, #4]
  TL_CmdPacket_t* l_CliBuffer = (TL_CmdPacket_t*)Notbuffer;
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	60fb      	str	r3, [r7, #12]
  uint8_t l_size = l_CliBuffer->cmdserial.cmd.plen;
 80152ec:	68fb      	ldr	r3, [r7, #12]
 80152ee:	7adb      	ldrb	r3, [r3, #11]
 80152f0:	72fb      	strb	r3, [r7, #11]

  /* WORKAROUND: if string to output is "> " then respond directly to M0 and do not output it */
  if (strcmp((const char *)l_CliBuffer->cmdserial.cmd.payload, "> ") != 0)
 80152f2:	68fb      	ldr	r3, [r7, #12]
 80152f4:	330c      	adds	r3, #12
 80152f6:	4906      	ldr	r1, [pc, #24]	; (8015310 <TL_THREAD_CliNotReceived+0x30>)
 80152f8:	4618      	mov	r0, r3
 80152fa:	f7ea ff41 	bl	8000180 <strcmp>
 80152fe:	4603      	mov	r3, r0
 8015300:	2b00      	cmp	r3, #0
 8015302:	d101      	bne.n	8015308 <TL_THREAD_CliNotReceived+0x28>
//    HW_UART_Transmit_IT(CFG_CLI_UART, l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
#endif /*USAGE_OF_VCP */
  }
  else
  {
    Send_CLI_Ack_For_OT();
 8015304:	f7ff ffbc 	bl	8015280 <Send_CLI_Ack_For_OT>
  }
}
 8015308:	bf00      	nop
 801530a:	3710      	adds	r7, #16
 801530c:	46bd      	mov	sp, r7
 801530e:	bd80      	pop	{r7, pc}
 8015310:	08017588 	.word	0x08017588

08015314 <APP_THREAD_ProcessMsgM0ToM4>:
 * @brief Process the messages coming from the M0.
 * @param  None
 * @retval None
 */
void APP_THREAD_ProcessMsgM0ToM4(void)
{
 8015314:	b580      	push	{r7, lr}
 8015316:	af00      	add	r7, sp, #0
  if (CptReceiveMsgFromM0 != 0)
 8015318:	4b09      	ldr	r3, [pc, #36]	; (8015340 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 801531a:	681b      	ldr	r3, [r3, #0]
 801531c:	2b00      	cmp	r3, #0
 801531e:	d00d      	beq.n	801533c <APP_THREAD_ProcessMsgM0ToM4+0x28>
  {
    /* If CptReceiveMsgFromM0 is > 1. it means that we did not serve all the events from the radio */
    if (CptReceiveMsgFromM0 > 1U)
 8015320:	4b07      	ldr	r3, [pc, #28]	; (8015340 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8015322:	681b      	ldr	r3, [r3, #0]
 8015324:	2b01      	cmp	r3, #1
 8015326:	d904      	bls.n	8015332 <APP_THREAD_ProcessMsgM0ToM4+0x1e>
    {
      APP_THREAD_Error(ERR_REC_MULTI_MSG_FROM_M0, 0);
 8015328:	2100      	movs	r1, #0
 801532a:	2000      	movs	r0, #0
 801532c:	f7fe ffea 	bl	8014304 <APP_THREAD_Error>
 8015330:	e001      	b.n	8015336 <APP_THREAD_ProcessMsgM0ToM4+0x22>
    }
    else
    {
      OpenThread_CallBack_Processing();
 8015332:	f7fe f853 	bl	80133dc <OpenThread_CallBack_Processing>
    }
    /* Reset counter */
    CptReceiveMsgFromM0 = 0;
 8015336:	4b02      	ldr	r3, [pc, #8]	; (8015340 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8015338:	2200      	movs	r2, #0
 801533a:	601a      	str	r2, [r3, #0]
  }
}
 801533c:	bf00      	nop
 801533e:	bd80      	pop	{r7, pc}
 8015340:	200275c8 	.word	0x200275c8

08015344 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8015344:	b480      	push	{r7}
 8015346:	b083      	sub	sp, #12
 8015348:	af00      	add	r7, sp, #0
 801534a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 801534c:	4b06      	ldr	r3, [pc, #24]	; (8015368 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 801534e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8015352:	4905      	ldr	r1, [pc, #20]	; (8015368 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	4313      	orrs	r3, r2
 8015358:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 801535c:	bf00      	nop
 801535e:	370c      	adds	r7, #12
 8015360:	46bd      	mov	sp, r7
 8015362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015366:	4770      	bx	lr
 8015368:	58000800 	.word	0x58000800

0801536c <LL_EXTI_EnableRisingTrig_32_63>:
{
 801536c:	b480      	push	{r7}
 801536e:	b083      	sub	sp, #12
 8015370:	af00      	add	r7, sp, #0
 8015372:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8015374:	4b05      	ldr	r3, [pc, #20]	; (801538c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8015376:	6a1a      	ldr	r2, [r3, #32]
 8015378:	4904      	ldr	r1, [pc, #16]	; (801538c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 801537a:	687b      	ldr	r3, [r7, #4]
 801537c:	4313      	orrs	r3, r2
 801537e:	620b      	str	r3, [r1, #32]
}
 8015380:	bf00      	nop
 8015382:	370c      	adds	r7, #12
 8015384:	46bd      	mov	sp, r7
 8015386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801538a:	4770      	bx	lr
 801538c:	58000800 	.word	0x58000800

08015390 <LL_PWR_EnableBootC2>:
  * @brief  Boot CPU2 after reset or wakeup from stop or standby modes
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8015390:	b480      	push	{r7}
 8015392:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8015394:	4b05      	ldr	r3, [pc, #20]	; (80153ac <LL_PWR_EnableBootC2+0x1c>)
 8015396:	68db      	ldr	r3, [r3, #12]
 8015398:	4a04      	ldr	r2, [pc, #16]	; (80153ac <LL_PWR_EnableBootC2+0x1c>)
 801539a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801539e:	60d3      	str	r3, [r2, #12]
}
 80153a0:	bf00      	nop
 80153a2:	46bd      	mov	sp, r7
 80153a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153a8:	4770      	bx	lr
 80153aa:	bf00      	nop
 80153ac:	58000400 	.word	0x58000400

080153b0 <LL_AHB3_GRP1_EnableClock>:
{
 80153b0:	b480      	push	{r7}
 80153b2:	b085      	sub	sp, #20
 80153b4:	af00      	add	r7, sp, #0
 80153b6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80153b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80153bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80153be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80153c2:	687b      	ldr	r3, [r7, #4]
 80153c4:	4313      	orrs	r3, r2
 80153c6:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80153c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80153cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80153ce:	687b      	ldr	r3, [r7, #4]
 80153d0:	4013      	ands	r3, r2
 80153d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80153d4:	68fb      	ldr	r3, [r7, #12]
}
 80153d6:	bf00      	nop
 80153d8:	3714      	adds	r7, #20
 80153da:	46bd      	mov	sp, r7
 80153dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153e0:	4770      	bx	lr

080153e2 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 80153e2:	b480      	push	{r7}
 80153e4:	b083      	sub	sp, #12
 80153e6:	af00      	add	r7, sp, #0
 80153e8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	681b      	ldr	r3, [r3, #0]
 80153ee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	601a      	str	r2, [r3, #0]
}
 80153f6:	bf00      	nop
 80153f8:	370c      	adds	r7, #12
 80153fa:	46bd      	mov	sp, r7
 80153fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015400:	4770      	bx	lr

08015402 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8015402:	b480      	push	{r7}
 8015404:	b083      	sub	sp, #12
 8015406:	af00      	add	r7, sp, #0
 8015408:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	681b      	ldr	r3, [r3, #0]
 801540e:	f043 0201 	orr.w	r2, r3, #1
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	601a      	str	r2, [r3, #0]
}
 8015416:	bf00      	nop
 8015418:	370c      	adds	r7, #12
 801541a:	46bd      	mov	sp, r7
 801541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015420:	4770      	bx	lr

08015422 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8015422:	b480      	push	{r7}
 8015424:	b083      	sub	sp, #12
 8015426:	af00      	add	r7, sp, #0
 8015428:	6078      	str	r0, [r7, #4]
 801542a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	685a      	ldr	r2, [r3, #4]
 8015430:	683b      	ldr	r3, [r7, #0]
 8015432:	041b      	lsls	r3, r3, #16
 8015434:	43db      	mvns	r3, r3
 8015436:	401a      	ands	r2, r3
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	605a      	str	r2, [r3, #4]
}
 801543c:	bf00      	nop
 801543e:	370c      	adds	r7, #12
 8015440:	46bd      	mov	sp, r7
 8015442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015446:	4770      	bx	lr

08015448 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8015448:	b480      	push	{r7}
 801544a:	b083      	sub	sp, #12
 801544c:	af00      	add	r7, sp, #0
 801544e:	6078      	str	r0, [r7, #4]
 8015450:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8015452:	687b      	ldr	r3, [r7, #4]
 8015454:	685a      	ldr	r2, [r3, #4]
 8015456:	683b      	ldr	r3, [r7, #0]
 8015458:	041b      	lsls	r3, r3, #16
 801545a:	431a      	orrs	r2, r3
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	605a      	str	r2, [r3, #4]
}
 8015460:	bf00      	nop
 8015462:	370c      	adds	r7, #12
 8015464:	46bd      	mov	sp, r7
 8015466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801546a:	4770      	bx	lr

0801546c <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 801546c:	b480      	push	{r7}
 801546e:	b083      	sub	sp, #12
 8015470:	af00      	add	r7, sp, #0
 8015472:	6078      	str	r0, [r7, #4]
 8015474:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8015476:	687b      	ldr	r3, [r7, #4]
 8015478:	685a      	ldr	r2, [r3, #4]
 801547a:	683b      	ldr	r3, [r7, #0]
 801547c:	43db      	mvns	r3, r3
 801547e:	401a      	ands	r2, r3
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	605a      	str	r2, [r3, #4]
}
 8015484:	bf00      	nop
 8015486:	370c      	adds	r7, #12
 8015488:	46bd      	mov	sp, r7
 801548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801548e:	4770      	bx	lr

08015490 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8015490:	b480      	push	{r7}
 8015492:	b083      	sub	sp, #12
 8015494:	af00      	add	r7, sp, #0
 8015496:	6078      	str	r0, [r7, #4]
 8015498:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	685a      	ldr	r2, [r3, #4]
 801549e:	683b      	ldr	r3, [r7, #0]
 80154a0:	431a      	orrs	r2, r3
 80154a2:	687b      	ldr	r3, [r7, #4]
 80154a4:	605a      	str	r2, [r3, #4]
}
 80154a6:	bf00      	nop
 80154a8:	370c      	adds	r7, #12
 80154aa:	46bd      	mov	sp, r7
 80154ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154b0:	4770      	bx	lr

080154b2 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80154b2:	b480      	push	{r7}
 80154b4:	b083      	sub	sp, #12
 80154b6:	af00      	add	r7, sp, #0
 80154b8:	6078      	str	r0, [r7, #4]
 80154ba:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80154bc:	687b      	ldr	r3, [r7, #4]
 80154be:	683a      	ldr	r2, [r7, #0]
 80154c0:	609a      	str	r2, [r3, #8]
}
 80154c2:	bf00      	nop
 80154c4:	370c      	adds	r7, #12
 80154c6:	46bd      	mov	sp, r7
 80154c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154cc:	4770      	bx	lr

080154ce <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80154ce:	b480      	push	{r7}
 80154d0:	b083      	sub	sp, #12
 80154d2:	af00      	add	r7, sp, #0
 80154d4:	6078      	str	r0, [r7, #4]
 80154d6:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80154d8:	683b      	ldr	r3, [r7, #0]
 80154da:	041a      	lsls	r2, r3, #16
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	609a      	str	r2, [r3, #8]
}
 80154e0:	bf00      	nop
 80154e2:	370c      	adds	r7, #12
 80154e4:	46bd      	mov	sp, r7
 80154e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154ea:	4770      	bx	lr

080154ec <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80154ec:	b480      	push	{r7}
 80154ee:	b083      	sub	sp, #12
 80154f0:	af00      	add	r7, sp, #0
 80154f2:	6078      	str	r0, [r7, #4]
 80154f4:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 80154f6:	687b      	ldr	r3, [r7, #4]
 80154f8:	68da      	ldr	r2, [r3, #12]
 80154fa:	683b      	ldr	r3, [r7, #0]
 80154fc:	4013      	ands	r3, r2
 80154fe:	683a      	ldr	r2, [r7, #0]
 8015500:	429a      	cmp	r2, r3
 8015502:	d101      	bne.n	8015508 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8015504:	2301      	movs	r3, #1
 8015506:	e000      	b.n	801550a <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8015508:	2300      	movs	r3, #0
}
 801550a:	4618      	mov	r0, r3
 801550c:	370c      	adds	r7, #12
 801550e:	46bd      	mov	sp, r7
 8015510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015514:	4770      	bx	lr

08015516 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8015516:	b480      	push	{r7}
 8015518:	b083      	sub	sp, #12
 801551a:	af00      	add	r7, sp, #0
 801551c:	6078      	str	r0, [r7, #4]
 801551e:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	69da      	ldr	r2, [r3, #28]
 8015524:	683b      	ldr	r3, [r7, #0]
 8015526:	4013      	ands	r3, r2
 8015528:	683a      	ldr	r2, [r7, #0]
 801552a:	429a      	cmp	r2, r3
 801552c:	d101      	bne.n	8015532 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 801552e:	2301      	movs	r3, #1
 8015530:	e000      	b.n	8015534 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8015532:	2300      	movs	r3, #0
}
 8015534:	4618      	mov	r0, r3
 8015536:	370c      	adds	r7, #12
 8015538:	46bd      	mov	sp, r7
 801553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801553e:	4770      	bx	lr

08015540 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8015540:	b580      	push	{r7, lr}
 8015542:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8015544:	2102      	movs	r1, #2
 8015546:	482a      	ldr	r0, [pc, #168]	; (80155f0 <HW_IPCC_Rx_Handler+0xb0>)
 8015548:	f7ff ffe5 	bl	8015516 <LL_C2_IPCC_IsActiveFlag_CHx>
 801554c:	4603      	mov	r3, r0
 801554e:	2b00      	cmp	r3, #0
 8015550:	d009      	beq.n	8015566 <HW_IPCC_Rx_Handler+0x26>
 8015552:	4b27      	ldr	r3, [pc, #156]	; (80155f0 <HW_IPCC_Rx_Handler+0xb0>)
 8015554:	685b      	ldr	r3, [r3, #4]
 8015556:	43db      	mvns	r3, r3
 8015558:	f003 0302 	and.w	r3, r3, #2
 801555c:	2b00      	cmp	r3, #0
 801555e:	d002      	beq.n	8015566 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8015560:	f000 f906 	bl	8015770 <HW_IPCC_SYS_EvtHandler>
 8015564:	e041      	b.n	80155ea <HW_IPCC_Rx_Handler+0xaa>
  {
    HW_IPCC_MAC_802_15_4_NotEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL ))
 8015566:	2104      	movs	r1, #4
 8015568:	4821      	ldr	r0, [pc, #132]	; (80155f0 <HW_IPCC_Rx_Handler+0xb0>)
 801556a:	f7ff ffd4 	bl	8015516 <LL_C2_IPCC_IsActiveFlag_CHx>
 801556e:	4603      	mov	r3, r0
 8015570:	2b00      	cmp	r3, #0
 8015572:	d009      	beq.n	8015588 <HW_IPCC_Rx_Handler+0x48>
 8015574:	4b1e      	ldr	r3, [pc, #120]	; (80155f0 <HW_IPCC_Rx_Handler+0xb0>)
 8015576:	685b      	ldr	r3, [r3, #4]
 8015578:	43db      	mvns	r3, r3
 801557a:	f003 0304 	and.w	r3, r3, #4
 801557e:	2b00      	cmp	r3, #0
 8015580:	d002      	beq.n	8015588 <HW_IPCC_Rx_Handler+0x48>
  {
    HW_IPCC_THREAD_NotEvtHandler();
 8015582:	f000 f94f 	bl	8015824 <HW_IPCC_THREAD_NotEvtHandler>
 8015586:	e030      	b.n	80155ea <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
 8015588:	2110      	movs	r1, #16
 801558a:	4819      	ldr	r0, [pc, #100]	; (80155f0 <HW_IPCC_Rx_Handler+0xb0>)
 801558c:	f7ff ffc3 	bl	8015516 <LL_C2_IPCC_IsActiveFlag_CHx>
 8015590:	4603      	mov	r3, r0
 8015592:	2b00      	cmp	r3, #0
 8015594:	d009      	beq.n	80155aa <HW_IPCC_Rx_Handler+0x6a>
 8015596:	4b16      	ldr	r3, [pc, #88]	; (80155f0 <HW_IPCC_Rx_Handler+0xb0>)
 8015598:	685b      	ldr	r3, [r3, #4]
 801559a:	43db      	mvns	r3, r3
 801559c:	f003 0310 	and.w	r3, r3, #16
 80155a0:	2b00      	cmp	r3, #0
 80155a2:	d002      	beq.n	80155aa <HW_IPCC_Rx_Handler+0x6a>
  {
    HW_IPCC_THREAD_CliNotEvtHandler();
 80155a4:	f000 f94a 	bl	801583c <HW_IPCC_THREAD_CliNotEvtHandler>
 80155a8:	e01f      	b.n	80155ea <HW_IPCC_Rx_Handler+0xaa>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CliNotifEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 80155aa:	2101      	movs	r1, #1
 80155ac:	4810      	ldr	r0, [pc, #64]	; (80155f0 <HW_IPCC_Rx_Handler+0xb0>)
 80155ae:	f7ff ffb2 	bl	8015516 <LL_C2_IPCC_IsActiveFlag_CHx>
 80155b2:	4603      	mov	r3, r0
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	d008      	beq.n	80155ca <HW_IPCC_Rx_Handler+0x8a>
 80155b8:	4b0d      	ldr	r3, [pc, #52]	; (80155f0 <HW_IPCC_Rx_Handler+0xb0>)
 80155ba:	685b      	ldr	r3, [r3, #4]
 80155bc:	f003 0301 	and.w	r3, r3, #1
 80155c0:	2b00      	cmp	r3, #0
 80155c2:	d102      	bne.n	80155ca <HW_IPCC_Rx_Handler+0x8a>
  {
    HW_IPCC_BLE_EvtHandler();
 80155c4:	f000 f898 	bl	80156f8 <HW_IPCC_BLE_EvtHandler>
 80155c8:	e00f      	b.n	80155ea <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 80155ca:	2108      	movs	r1, #8
 80155cc:	4808      	ldr	r0, [pc, #32]	; (80155f0 <HW_IPCC_Rx_Handler+0xb0>)
 80155ce:	f7ff ffa2 	bl	8015516 <LL_C2_IPCC_IsActiveFlag_CHx>
 80155d2:	4603      	mov	r3, r0
 80155d4:	2b00      	cmp	r3, #0
 80155d6:	d009      	beq.n	80155ec <HW_IPCC_Rx_Handler+0xac>
 80155d8:	4b05      	ldr	r3, [pc, #20]	; (80155f0 <HW_IPCC_Rx_Handler+0xb0>)
 80155da:	685b      	ldr	r3, [r3, #4]
 80155dc:	43db      	mvns	r3, r3
 80155de:	f003 0308 	and.w	r3, r3, #8
 80155e2:	2b00      	cmp	r3, #0
 80155e4:	d002      	beq.n	80155ec <HW_IPCC_Rx_Handler+0xac>
  {
    HW_IPCC_TRACES_EvtHandler();
 80155e6:	f000 f975 	bl	80158d4 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80155ea:	bf00      	nop
 80155ec:	bf00      	nop
}
 80155ee:	bd80      	pop	{r7, pc}
 80155f0:	58000c00 	.word	0x58000c00

080155f4 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 80155f4:	b580      	push	{r7, lr}
 80155f6:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80155f8:	2102      	movs	r1, #2
 80155fa:	482b      	ldr	r0, [pc, #172]	; (80156a8 <HW_IPCC_Tx_Handler+0xb4>)
 80155fc:	f7ff ff76 	bl	80154ec <LL_C1_IPCC_IsActiveFlag_CHx>
 8015600:	4603      	mov	r3, r0
 8015602:	2b00      	cmp	r3, #0
 8015604:	d109      	bne.n	801561a <HW_IPCC_Tx_Handler+0x26>
 8015606:	4b28      	ldr	r3, [pc, #160]	; (80156a8 <HW_IPCC_Tx_Handler+0xb4>)
 8015608:	685b      	ldr	r3, [r3, #4]
 801560a:	43db      	mvns	r3, r3
 801560c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015610:	2b00      	cmp	r3, #0
 8015612:	d002      	beq.n	801561a <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8015614:	f000 f8a0 	bl	8015758 <HW_IPCC_SYS_CmdEvtHandler>
 8015618:	e042      	b.n	80156a0 <HW_IPCC_Tx_Handler+0xac>
  {
    HW_IPCC_MAC_802_15_4_CmdEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
 801561a:	2104      	movs	r1, #4
 801561c:	4822      	ldr	r0, [pc, #136]	; (80156a8 <HW_IPCC_Tx_Handler+0xb4>)
 801561e:	f7ff ff65 	bl	80154ec <LL_C1_IPCC_IsActiveFlag_CHx>
 8015622:	4603      	mov	r3, r0
 8015624:	2b00      	cmp	r3, #0
 8015626:	d109      	bne.n	801563c <HW_IPCC_Tx_Handler+0x48>
 8015628:	4b1f      	ldr	r3, [pc, #124]	; (80156a8 <HW_IPCC_Tx_Handler+0xb4>)
 801562a:	685b      	ldr	r3, [r3, #4]
 801562c:	43db      	mvns	r3, r3
 801562e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8015632:	2b00      	cmp	r3, #0
 8015634:	d002      	beq.n	801563c <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_OT_CmdEvtHandler();
 8015636:	f000 f8e9 	bl	801580c <HW_IPCC_OT_CmdEvtHandler>
 801563a:	e031      	b.n	80156a0 <HW_IPCC_Tx_Handler+0xac>
  if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 801563c:	2102      	movs	r1, #2
 801563e:	481a      	ldr	r0, [pc, #104]	; (80156a8 <HW_IPCC_Tx_Handler+0xb4>)
 8015640:	f7ff ff54 	bl	80154ec <LL_C1_IPCC_IsActiveFlag_CHx>
 8015644:	4603      	mov	r3, r0
 8015646:	2b00      	cmp	r3, #0
 8015648:	d109      	bne.n	801565e <HW_IPCC_Tx_Handler+0x6a>
 801564a:	4b17      	ldr	r3, [pc, #92]	; (80156a8 <HW_IPCC_Tx_Handler+0xb4>)
 801564c:	685b      	ldr	r3, [r3, #4]
 801564e:	43db      	mvns	r3, r3
 8015650:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015654:	2b00      	cmp	r3, #0
 8015656:	d002      	beq.n	801565e <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8015658:	f000 f87e 	bl	8015758 <HW_IPCC_SYS_CmdEvtHandler>
 801565c:	e020      	b.n	80156a0 <HW_IPCC_Tx_Handler+0xac>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 801565e:	2108      	movs	r1, #8
 8015660:	4811      	ldr	r0, [pc, #68]	; (80156a8 <HW_IPCC_Tx_Handler+0xb4>)
 8015662:	f7ff ff43 	bl	80154ec <LL_C1_IPCC_IsActiveFlag_CHx>
 8015666:	4603      	mov	r3, r0
 8015668:	2b00      	cmp	r3, #0
 801566a:	d109      	bne.n	8015680 <HW_IPCC_Tx_Handler+0x8c>
 801566c:	4b0e      	ldr	r3, [pc, #56]	; (80156a8 <HW_IPCC_Tx_Handler+0xb4>)
 801566e:	685b      	ldr	r3, [r3, #4]
 8015670:	43db      	mvns	r3, r3
 8015672:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8015676:	2b00      	cmp	r3, #0
 8015678:	d002      	beq.n	8015680 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_MM_FreeBufHandler();
 801567a:	f000 f90d 	bl	8015898 <HW_IPCC_MM_FreeBufHandler>
 801567e:	e00f      	b.n	80156a0 <HW_IPCC_Tx_Handler+0xac>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8015680:	2120      	movs	r1, #32
 8015682:	4809      	ldr	r0, [pc, #36]	; (80156a8 <HW_IPCC_Tx_Handler+0xb4>)
 8015684:	f7ff ff32 	bl	80154ec <LL_C1_IPCC_IsActiveFlag_CHx>
 8015688:	4603      	mov	r3, r0
 801568a:	2b00      	cmp	r3, #0
 801568c:	d109      	bne.n	80156a2 <HW_IPCC_Tx_Handler+0xae>
 801568e:	4b06      	ldr	r3, [pc, #24]	; (80156a8 <HW_IPCC_Tx_Handler+0xb4>)
 8015690:	685b      	ldr	r3, [r3, #4]
 8015692:	43db      	mvns	r3, r3
 8015694:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8015698:	2b00      	cmp	r3, #0
 801569a:	d002      	beq.n	80156a2 <HW_IPCC_Tx_Handler+0xae>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 801569c:	f000 f838 	bl	8015710 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 80156a0:	bf00      	nop
 80156a2:	bf00      	nop
}
 80156a4:	bd80      	pop	{r7, pc}
 80156a6:	bf00      	nop
 80156a8:	58000c00 	.word	0x58000c00

080156ac <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 80156ac:	b580      	push	{r7, lr}
 80156ae:	af00      	add	r7, sp, #0
  /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 80156b0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80156b4:	f7ff fe46 	bl	8015344 <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 80156b8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80156bc:	f7ff fe56 	bl	801536c <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 80156c0:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 80156c2:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 80156c4:	f7ff fe64 	bl	8015390 <LL_PWR_EnableBootC2>

  return;
 80156c8:	bf00      	nop
}
 80156ca:	bd80      	pop	{r7, pc}

080156cc <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 80156cc:	b580      	push	{r7, lr}
 80156ce:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 80156d0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80156d4:	f7ff fe6c 	bl	80153b0 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 80156d8:	4806      	ldr	r0, [pc, #24]	; (80156f4 <HW_IPCC_Init+0x28>)
 80156da:	f7ff fe92 	bl	8015402 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 80156de:	4805      	ldr	r0, [pc, #20]	; (80156f4 <HW_IPCC_Init+0x28>)
 80156e0:	f7ff fe7f 	bl	80153e2 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80156e4:	202c      	movs	r0, #44	; 0x2c
 80156e6:	f7f2 fdac 	bl	8008242 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80156ea:	202d      	movs	r0, #45	; 0x2d
 80156ec:	f7f2 fda9 	bl	8008242 <HAL_NVIC_EnableIRQ>

  return;
 80156f0:	bf00      	nop
}
 80156f2:	bd80      	pop	{r7, pc}
 80156f4:	58000c00 	.word	0x58000c00

080156f8 <HW_IPCC_BLE_EvtHandler>:

  return;
}

static void HW_IPCC_BLE_EvtHandler( void )
{
 80156f8:	b580      	push	{r7, lr}
 80156fa:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 80156fc:	f7fe fc34 	bl	8013f68 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8015700:	2101      	movs	r1, #1
 8015702:	4802      	ldr	r0, [pc, #8]	; (801570c <HW_IPCC_BLE_EvtHandler+0x14>)
 8015704:	f7ff fed5 	bl	80154b2 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8015708:	bf00      	nop
}
 801570a:	bd80      	pop	{r7, pc}
 801570c:	58000c00 	.word	0x58000c00

08015710 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8015710:	b580      	push	{r7, lr}
 8015712:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8015714:	2120      	movs	r1, #32
 8015716:	4803      	ldr	r0, [pc, #12]	; (8015724 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8015718:	f7ff fe96 	bl	8015448 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 801571c:	f7fe fc40 	bl	8013fa0 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8015720:	bf00      	nop
}
 8015722:	bd80      	pop	{r7, pc}
 8015724:	58000c00 	.word	0x58000c00

08015728 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8015728:	b580      	push	{r7, lr}
 801572a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 801572c:	2102      	movs	r1, #2
 801572e:	4802      	ldr	r0, [pc, #8]	; (8015738 <HW_IPCC_SYS_Init+0x10>)
 8015730:	f7ff fe9c 	bl	801546c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8015734:	bf00      	nop
}
 8015736:	bd80      	pop	{r7, pc}
 8015738:	58000c00 	.word	0x58000c00

0801573c <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 801573c:	b580      	push	{r7, lr}
 801573e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8015740:	2102      	movs	r1, #2
 8015742:	4804      	ldr	r0, [pc, #16]	; (8015754 <HW_IPCC_SYS_SendCmd+0x18>)
 8015744:	f7ff fec3 	bl	80154ce <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8015748:	2102      	movs	r1, #2
 801574a:	4802      	ldr	r0, [pc, #8]	; (8015754 <HW_IPCC_SYS_SendCmd+0x18>)
 801574c:	f7ff fe69 	bl	8015422 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8015750:	bf00      	nop
}
 8015752:	bd80      	pop	{r7, pc}
 8015754:	58000c00 	.word	0x58000c00

08015758 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8015758:	b580      	push	{r7, lr}
 801575a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 801575c:	2102      	movs	r1, #2
 801575e:	4803      	ldr	r0, [pc, #12]	; (801576c <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8015760:	f7ff fe72 	bl	8015448 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8015764:	f7fe fc64 	bl	8014030 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8015768:	bf00      	nop
}
 801576a:	bd80      	pop	{r7, pc}
 801576c:	58000c00 	.word	0x58000c00

08015770 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8015770:	b580      	push	{r7, lr}
 8015772:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8015774:	f7fe fc6c 	bl	8014050 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8015778:	2102      	movs	r1, #2
 801577a:	4802      	ldr	r0, [pc, #8]	; (8015784 <HW_IPCC_SYS_EvtHandler+0x14>)
 801577c:	f7ff fe99 	bl	80154b2 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8015780:	bf00      	nop
}
 8015782:	bd80      	pop	{r7, pc}
 8015784:	58000c00 	.word	0x58000c00

08015788 <HW_IPCC_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void HW_IPCC_THREAD_Init( void )
{
 8015788:	b580      	push	{r7, lr}
 801578a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 801578c:	2104      	movs	r1, #4
 801578e:	4804      	ldr	r0, [pc, #16]	; (80157a0 <HW_IPCC_THREAD_Init+0x18>)
 8015790:	f7ff fe6c 	bl	801546c <LL_C1_IPCC_EnableReceiveChannel>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8015794:	2110      	movs	r1, #16
 8015796:	4802      	ldr	r0, [pc, #8]	; (80157a0 <HW_IPCC_THREAD_Init+0x18>)
 8015798:	f7ff fe68 	bl	801546c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 801579c:	bf00      	nop
}
 801579e:	bd80      	pop	{r7, pc}
 80157a0:	58000c00 	.word	0x58000c00

080157a4 <HW_IPCC_OT_SendCmd>:

void HW_IPCC_OT_SendCmd( void )
{
 80157a4:	b580      	push	{r7, lr}
 80157a6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 80157a8:	2104      	movs	r1, #4
 80157aa:	4804      	ldr	r0, [pc, #16]	; (80157bc <HW_IPCC_OT_SendCmd+0x18>)
 80157ac:	f7ff fe8f 	bl	80154ce <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 80157b0:	2104      	movs	r1, #4
 80157b2:	4802      	ldr	r0, [pc, #8]	; (80157bc <HW_IPCC_OT_SendCmd+0x18>)
 80157b4:	f7ff fe35 	bl	8015422 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 80157b8:	bf00      	nop
}
 80157ba:	bd80      	pop	{r7, pc}
 80157bc:	58000c00 	.word	0x58000c00

080157c0 <HW_IPCC_CLI_SendCmd>:

void HW_IPCC_CLI_SendCmd( void )
{
 80157c0:	b580      	push	{r7, lr}
 80157c2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_CMD_CHANNEL );
 80157c4:	2110      	movs	r1, #16
 80157c6:	4802      	ldr	r0, [pc, #8]	; (80157d0 <HW_IPCC_CLI_SendCmd+0x10>)
 80157c8:	f7ff fe81 	bl	80154ce <LL_C1_IPCC_SetFlag_CHx>

  return;
 80157cc:	bf00      	nop
}
 80157ce:	bd80      	pop	{r7, pc}
 80157d0:	58000c00 	.word	0x58000c00

080157d4 <HW_IPCC_THREAD_SendAck>:

void HW_IPCC_THREAD_SendAck( void )
{
 80157d4:	b580      	push	{r7, lr}
 80157d6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 80157d8:	2104      	movs	r1, #4
 80157da:	4804      	ldr	r0, [pc, #16]	; (80157ec <HW_IPCC_THREAD_SendAck+0x18>)
 80157dc:	f7ff fe69 	bl	80154b2 <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 80157e0:	2104      	movs	r1, #4
 80157e2:	4802      	ldr	r0, [pc, #8]	; (80157ec <HW_IPCC_THREAD_SendAck+0x18>)
 80157e4:	f7ff fe42 	bl	801546c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80157e8:	bf00      	nop
}
 80157ea:	bd80      	pop	{r7, pc}
 80157ec:	58000c00 	.word	0x58000c00

080157f0 <HW_IPCC_THREAD_CliSendAck>:

void HW_IPCC_THREAD_CliSendAck( void )
{
 80157f0:	b580      	push	{r7, lr}
 80157f2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 80157f4:	2110      	movs	r1, #16
 80157f6:	4804      	ldr	r0, [pc, #16]	; (8015808 <HW_IPCC_THREAD_CliSendAck+0x18>)
 80157f8:	f7ff fe5b 	bl	80154b2 <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 80157fc:	2110      	movs	r1, #16
 80157fe:	4802      	ldr	r0, [pc, #8]	; (8015808 <HW_IPCC_THREAD_CliSendAck+0x18>)
 8015800:	f7ff fe34 	bl	801546c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8015804:	bf00      	nop
}
 8015806:	bd80      	pop	{r7, pc}
 8015808:	58000c00 	.word	0x58000c00

0801580c <HW_IPCC_OT_CmdEvtHandler>:

static void HW_IPCC_OT_CmdEvtHandler( void )
{
 801580c:	b580      	push	{r7, lr}
 801580e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8015810:	2104      	movs	r1, #4
 8015812:	4803      	ldr	r0, [pc, #12]	; (8015820 <HW_IPCC_OT_CmdEvtHandler+0x14>)
 8015814:	f7ff fe18 	bl	8015448 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_OT_CmdEvtNot();
 8015818:	f7fe fc8a 	bl	8014130 <HW_IPCC_OT_CmdEvtNot>

  return;
 801581c:	bf00      	nop
}
 801581e:	bd80      	pop	{r7, pc}
 8015820:	58000c00 	.word	0x58000c00

08015824 <HW_IPCC_THREAD_NotEvtHandler>:

static void HW_IPCC_THREAD_NotEvtHandler( void )
{
 8015824:	b580      	push	{r7, lr}
 8015826:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8015828:	2104      	movs	r1, #4
 801582a:	4803      	ldr	r0, [pc, #12]	; (8015838 <HW_IPCC_THREAD_NotEvtHandler+0x14>)
 801582c:	f7ff fe30 	bl	8015490 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_EvtNot();
 8015830:	f7fe fc8a 	bl	8014148 <HW_IPCC_THREAD_EvtNot>

  return;
 8015834:	bf00      	nop
}
 8015836:	bd80      	pop	{r7, pc}
 8015838:	58000c00 	.word	0x58000c00

0801583c <HW_IPCC_THREAD_CliNotEvtHandler>:

static void HW_IPCC_THREAD_CliNotEvtHandler( void )
{
 801583c:	b580      	push	{r7, lr}
 801583e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8015840:	2110      	movs	r1, #16
 8015842:	4803      	ldr	r0, [pc, #12]	; (8015850 <HW_IPCC_THREAD_CliNotEvtHandler+0x14>)
 8015844:	f7ff fe24 	bl	8015490 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_CliEvtNot();
 8015848:	f7fe fc8a 	bl	8014160 <HW_IPCC_THREAD_CliEvtNot>

  return;
 801584c:	bf00      	nop
}
 801584e:	bd80      	pop	{r7, pc}
 8015850:	58000c00 	.word	0x58000c00

08015854 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8015854:	b580      	push	{r7, lr}
 8015856:	b082      	sub	sp, #8
 8015858:	af00      	add	r7, sp, #0
 801585a:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 801585c:	2108      	movs	r1, #8
 801585e:	480c      	ldr	r0, [pc, #48]	; (8015890 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8015860:	f7ff fe44 	bl	80154ec <LL_C1_IPCC_IsActiveFlag_CHx>
 8015864:	4603      	mov	r3, r0
 8015866:	2b00      	cmp	r3, #0
 8015868:	d007      	beq.n	801587a <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 801586a:	4a0a      	ldr	r2, [pc, #40]	; (8015894 <HW_IPCC_MM_SendFreeBuf+0x40>)
 801586c:	687b      	ldr	r3, [r7, #4]
 801586e:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8015870:	2108      	movs	r1, #8
 8015872:	4807      	ldr	r0, [pc, #28]	; (8015890 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8015874:	f7ff fdd5 	bl	8015422 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8015878:	e006      	b.n	8015888 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 801587a:	687b      	ldr	r3, [r7, #4]
 801587c:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 801587e:	2108      	movs	r1, #8
 8015880:	4803      	ldr	r0, [pc, #12]	; (8015890 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8015882:	f7ff fe24 	bl	80154ce <LL_C1_IPCC_SetFlag_CHx>
  return;
 8015886:	bf00      	nop
}
 8015888:	3708      	adds	r7, #8
 801588a:	46bd      	mov	sp, r7
 801588c:	bd80      	pop	{r7, pc}
 801588e:	bf00      	nop
 8015890:	58000c00 	.word	0x58000c00
 8015894:	200276dc 	.word	0x200276dc

08015898 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8015898:	b580      	push	{r7, lr}
 801589a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 801589c:	2108      	movs	r1, #8
 801589e:	4806      	ldr	r0, [pc, #24]	; (80158b8 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80158a0:	f7ff fdd2 	bl	8015448 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 80158a4:	4b05      	ldr	r3, [pc, #20]	; (80158bc <HW_IPCC_MM_FreeBufHandler+0x24>)
 80158a6:	681b      	ldr	r3, [r3, #0]
 80158a8:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80158aa:	2108      	movs	r1, #8
 80158ac:	4802      	ldr	r0, [pc, #8]	; (80158b8 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80158ae:	f7ff fe0e 	bl	80154ce <LL_C1_IPCC_SetFlag_CHx>

  return;
 80158b2:	bf00      	nop
}
 80158b4:	bd80      	pop	{r7, pc}
 80158b6:	bf00      	nop
 80158b8:	58000c00 	.word	0x58000c00
 80158bc:	200276dc 	.word	0x200276dc

080158c0 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 80158c0:	b580      	push	{r7, lr}
 80158c2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 80158c4:	2108      	movs	r1, #8
 80158c6:	4802      	ldr	r0, [pc, #8]	; (80158d0 <HW_IPCC_TRACES_Init+0x10>)
 80158c8:	f7ff fdd0 	bl	801546c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80158cc:	bf00      	nop
}
 80158ce:	bd80      	pop	{r7, pc}
 80158d0:	58000c00 	.word	0x58000c00

080158d4 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 80158d4:	b580      	push	{r7, lr}
 80158d6:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 80158d8:	f7fe fcd0 	bl	801427c <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 80158dc:	2108      	movs	r1, #8
 80158de:	4802      	ldr	r0, [pc, #8]	; (80158e8 <HW_IPCC_TRACES_EvtHandler+0x14>)
 80158e0:	f7ff fde7 	bl	80154b2 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80158e4:	bf00      	nop
}
 80158e6:	bd80      	pop	{r7, pc}
 80158e8:	58000c00 	.word	0x58000c00

080158ec <UTIL_LPM_Init>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_LPM_Init( void )
{
 80158ec:	b480      	push	{r7}
 80158ee:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 80158f0:	4b05      	ldr	r3, [pc, #20]	; (8015908 <UTIL_LPM_Init+0x1c>)
 80158f2:	2200      	movs	r2, #0
 80158f4:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 80158f6:	4b05      	ldr	r3, [pc, #20]	; (801590c <UTIL_LPM_Init+0x20>)
 80158f8:	2200      	movs	r2, #0
 80158fa:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 80158fc:	bf00      	nop
 80158fe:	46bd      	mov	sp, r7
 8015900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015904:	4770      	bx	lr
 8015906:	bf00      	nop
 8015908:	200276e0 	.word	0x200276e0
 801590c:	200276e4 	.word	0x200276e4

08015910 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8015910:	b480      	push	{r7}
 8015912:	b087      	sub	sp, #28
 8015914:	af00      	add	r7, sp, #0
 8015916:	6078      	str	r0, [r7, #4]
 8015918:	460b      	mov	r3, r1
 801591a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801591c:	f3ef 8310 	mrs	r3, PRIMASK
 8015920:	613b      	str	r3, [r7, #16]
  return(result);
 8015922:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8015924:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8015926:	b672      	cpsid	i
  
  switch(state)
 8015928:	78fb      	ldrb	r3, [r7, #3]
 801592a:	2b00      	cmp	r3, #0
 801592c:	d009      	beq.n	8015942 <UTIL_LPM_SetOffMode+0x32>
 801592e:	2b01      	cmp	r3, #1
 8015930:	d000      	beq.n	8015934 <UTIL_LPM_SetOffMode+0x24>
    {
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
    default:
      break;
 8015932:	e00e      	b.n	8015952 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 8015934:	4b0c      	ldr	r3, [pc, #48]	; (8015968 <UTIL_LPM_SetOffMode+0x58>)
 8015936:	681a      	ldr	r2, [r3, #0]
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	4313      	orrs	r3, r2
 801593c:	4a0a      	ldr	r2, [pc, #40]	; (8015968 <UTIL_LPM_SetOffMode+0x58>)
 801593e:	6013      	str	r3, [r2, #0]
      break;
 8015940:	e007      	b.n	8015952 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 8015942:	687b      	ldr	r3, [r7, #4]
 8015944:	43da      	mvns	r2, r3
 8015946:	4b08      	ldr	r3, [pc, #32]	; (8015968 <UTIL_LPM_SetOffMode+0x58>)
 8015948:	681b      	ldr	r3, [r3, #0]
 801594a:	4013      	ands	r3, r2
 801594c:	4a06      	ldr	r2, [pc, #24]	; (8015968 <UTIL_LPM_SetOffMode+0x58>)
 801594e:	6013      	str	r3, [r2, #0]
      break;
 8015950:	bf00      	nop
 8015952:	697b      	ldr	r3, [r7, #20]
 8015954:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015956:	68fb      	ldr	r3, [r7, #12]
 8015958:	f383 8810 	msr	PRIMASK, r3
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801595c:	bf00      	nop
 801595e:	371c      	adds	r7, #28
 8015960:	46bd      	mov	sp, r7
 8015962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015966:	4770      	bx	lr
 8015968:	200276e4 	.word	0x200276e4

0801596c <arm_power_f32>:
 801596c:	b430      	push	{r4, r5}
 801596e:	088d      	lsrs	r5, r1, #2
 8015970:	eddf 5a20 	vldr	s11, [pc, #128]	; 80159f4 <arm_power_f32+0x88>
 8015974:	d020      	beq.n	80159b8 <arm_power_f32+0x4c>
 8015976:	f100 0310 	add.w	r3, r0, #16
 801597a:	462c      	mov	r4, r5
 801597c:	ed53 6a04 	vldr	s13, [r3, #-16]
 8015980:	ed13 7a03 	vldr	s14, [r3, #-12]
 8015984:	ed53 7a02 	vldr	s15, [r3, #-8]
 8015988:	ed13 6a01 	vldr	s12, [r3, #-4]
 801598c:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8015990:	ee27 7a07 	vmul.f32	s14, s14, s14
 8015994:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8015998:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801599c:	ee37 7a26 	vadd.f32	s14, s14, s13
 80159a0:	ee26 6a06 	vmul.f32	s12, s12, s12
 80159a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80159a8:	3c01      	subs	r4, #1
 80159aa:	f103 0310 	add.w	r3, r3, #16
 80159ae:	ee76 5a27 	vadd.f32	s11, s12, s15
 80159b2:	d1e3      	bne.n	801597c <arm_power_f32+0x10>
 80159b4:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 80159b8:	f011 0103 	ands.w	r1, r1, #3
 80159bc:	d015      	beq.n	80159ea <arm_power_f32+0x7e>
 80159be:	edd0 7a00 	vldr	s15, [r0]
 80159c2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80159c6:	3901      	subs	r1, #1
 80159c8:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80159cc:	d00d      	beq.n	80159ea <arm_power_f32+0x7e>
 80159ce:	edd0 7a01 	vldr	s15, [r0, #4]
 80159d2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80159d6:	2901      	cmp	r1, #1
 80159d8:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80159dc:	d005      	beq.n	80159ea <arm_power_f32+0x7e>
 80159de:	edd0 7a02 	vldr	s15, [r0, #8]
 80159e2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80159e6:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80159ea:	edc2 5a00 	vstr	s11, [r2]
 80159ee:	bc30      	pop	{r4, r5}
 80159f0:	4770      	bx	lr
 80159f2:	bf00      	nop
 80159f4:	00000000 	.word	0x00000000

080159f8 <arm_mat_mult_f32>:
 80159f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159fc:	8845      	ldrh	r5, [r0, #2]
 80159fe:	880b      	ldrh	r3, [r1, #0]
 8015a00:	8806      	ldrh	r6, [r0, #0]
 8015a02:	6847      	ldr	r7, [r0, #4]
 8015a04:	6854      	ldr	r4, [r2, #4]
 8015a06:	6848      	ldr	r0, [r1, #4]
 8015a08:	b08b      	sub	sp, #44	; 0x2c
 8015a0a:	42ab      	cmp	r3, r5
 8015a0c:	9109      	str	r1, [sp, #36]	; 0x24
 8015a0e:	9604      	str	r6, [sp, #16]
 8015a10:	8849      	ldrh	r1, [r1, #2]
 8015a12:	f040 808a 	bne.w	8015b2a <arm_mat_mult_f32+0x132>
 8015a16:	8815      	ldrh	r5, [r2, #0]
 8015a18:	42b5      	cmp	r5, r6
 8015a1a:	f040 8086 	bne.w	8015b2a <arm_mat_mult_f32+0x132>
 8015a1e:	8852      	ldrh	r2, [r2, #2]
 8015a20:	428a      	cmp	r2, r1
 8015a22:	f040 8082 	bne.w	8015b2a <arm_mat_mult_f32+0x132>
 8015a26:	ea4f 0893 	mov.w	r8, r3, lsr #2
 8015a2a:	1d01      	adds	r1, r0, #4
 8015a2c:	0116      	lsls	r6, r2, #4
 8015a2e:	9108      	str	r1, [sp, #32]
 8015a30:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 8015a34:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 8015a38:	9101      	str	r1, [sp, #4]
 8015a3a:	fb06 f108 	mul.w	r1, r6, r8
 8015a3e:	0095      	lsls	r5, r2, #2
 8015a40:	9103      	str	r1, [sp, #12]
 8015a42:	00d2      	lsls	r2, r2, #3
 8015a44:	ea4f 018c 	mov.w	r1, ip, lsl #2
 8015a48:	f003 0903 	and.w	r9, r3, #3
 8015a4c:	009b      	lsls	r3, r3, #2
 8015a4e:	f107 0b10 	add.w	fp, r7, #16
 8015a52:	eb04 0a05 	add.w	sl, r4, r5
 8015a56:	9107      	str	r1, [sp, #28]
 8015a58:	9202      	str	r2, [sp, #8]
 8015a5a:	9306      	str	r3, [sp, #24]
 8015a5c:	f1ab 0310 	sub.w	r3, fp, #16
 8015a60:	9305      	str	r3, [sp, #20]
 8015a62:	9b07      	ldr	r3, [sp, #28]
 8015a64:	f8dd e020 	ldr.w	lr, [sp, #32]
 8015a68:	eb03 0c0a 	add.w	ip, r3, sl
 8015a6c:	eddf 7a31 	vldr	s15, [pc, #196]	; 8015b34 <arm_mat_mult_f32+0x13c>
 8015a70:	f1b8 0f00 	cmp.w	r8, #0
 8015a74:	d053      	beq.n	8015b1e <arm_mat_mult_f32+0x126>
 8015a76:	9b02      	ldr	r3, [sp, #8]
 8015a78:	4644      	mov	r4, r8
 8015a7a:	18c1      	adds	r1, r0, r3
 8015a7c:	4602      	mov	r2, r0
 8015a7e:	465b      	mov	r3, fp
 8015a80:	ed92 6a00 	vldr	s12, [r2]
 8015a84:	ed13 7a04 	vldr	s14, [r3, #-16]
 8015a88:	ed53 4a03 	vldr	s9, [r3, #-12]
 8015a8c:	ed53 6a02 	vldr	s13, [r3, #-8]
 8015a90:	ed91 5a00 	vldr	s10, [r1]
 8015a94:	ed53 5a01 	vldr	s11, [r3, #-4]
 8015a98:	1957      	adds	r7, r2, r5
 8015a9a:	ee27 7a06 	vmul.f32	s14, s14, s12
 8015a9e:	ed97 6a00 	vldr	s12, [r7]
 8015aa2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015aa6:	ee26 6a24 	vmul.f32	s12, s12, s9
 8015aaa:	194f      	adds	r7, r1, r5
 8015aac:	ee36 6a27 	vadd.f32	s12, s12, s15
 8015ab0:	ee26 7a85 	vmul.f32	s14, s13, s10
 8015ab4:	edd7 7a00 	vldr	s15, [r7]
 8015ab8:	ee37 7a06 	vadd.f32	s14, s14, s12
 8015abc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8015ac0:	3c01      	subs	r4, #1
 8015ac2:	4432      	add	r2, r6
 8015ac4:	4431      	add	r1, r6
 8015ac6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015aca:	f103 0310 	add.w	r3, r3, #16
 8015ace:	d1d7      	bne.n	8015a80 <arm_mat_mult_f32+0x88>
 8015ad0:	9b03      	ldr	r3, [sp, #12]
 8015ad2:	9a01      	ldr	r2, [sp, #4]
 8015ad4:	4418      	add	r0, r3
 8015ad6:	f1b9 0f00 	cmp.w	r9, #0
 8015ada:	d00b      	beq.n	8015af4 <arm_mat_mult_f32+0xfc>
 8015adc:	464b      	mov	r3, r9
 8015ade:	edd0 6a00 	vldr	s13, [r0]
 8015ae2:	ecb2 7a01 	vldmia	r2!, {s14}
 8015ae6:	ee27 7a26 	vmul.f32	s14, s14, s13
 8015aea:	3b01      	subs	r3, #1
 8015aec:	4428      	add	r0, r5
 8015aee:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015af2:	d1f4      	bne.n	8015ade <arm_mat_mult_f32+0xe6>
 8015af4:	ecec 7a01 	vstmia	ip!, {s15}
 8015af8:	45d4      	cmp	ip, sl
 8015afa:	4670      	mov	r0, lr
 8015afc:	f10e 0e04 	add.w	lr, lr, #4
 8015b00:	d1b4      	bne.n	8015a6c <arm_mat_mult_f32+0x74>
 8015b02:	9a01      	ldr	r2, [sp, #4]
 8015b04:	9b06      	ldr	r3, [sp, #24]
 8015b06:	4611      	mov	r1, r2
 8015b08:	4419      	add	r1, r3
 8015b0a:	449b      	add	fp, r3
 8015b0c:	9b04      	ldr	r3, [sp, #16]
 8015b0e:	9101      	str	r1, [sp, #4]
 8015b10:	3b01      	subs	r3, #1
 8015b12:	44aa      	add	sl, r5
 8015b14:	9304      	str	r3, [sp, #16]
 8015b16:	d004      	beq.n	8015b22 <arm_mat_mult_f32+0x12a>
 8015b18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b1a:	6858      	ldr	r0, [r3, #4]
 8015b1c:	e79e      	b.n	8015a5c <arm_mat_mult_f32+0x64>
 8015b1e:	9a05      	ldr	r2, [sp, #20]
 8015b20:	e7d9      	b.n	8015ad6 <arm_mat_mult_f32+0xde>
 8015b22:	4618      	mov	r0, r3
 8015b24:	b00b      	add	sp, #44	; 0x2c
 8015b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b2a:	f06f 0002 	mvn.w	r0, #2
 8015b2e:	b00b      	add	sp, #44	; 0x2c
 8015b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b34:	00000000 	.word	0x00000000

08015b38 <arm_sin_f32>:
 8015b38:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8015bb8 <arm_sin_f32+0x80>
 8015b3c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015b40:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8015b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b48:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8015b4c:	d504      	bpl.n	8015b58 <arm_sin_f32+0x20>
 8015b4e:	ee17 3a90 	vmov	r3, s15
 8015b52:	3b01      	subs	r3, #1
 8015b54:	ee07 3a90 	vmov	s15, r3
 8015b58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015b5c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8015bbc <arm_sin_f32+0x84>
 8015b60:	ee30 0a67 	vsub.f32	s0, s0, s15
 8015b64:	ee20 0a07 	vmul.f32	s0, s0, s14
 8015b68:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8015b6c:	ee17 3a90 	vmov	r3, s15
 8015b70:	b29b      	uxth	r3, r3
 8015b72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015b76:	d21a      	bcs.n	8015bae <arm_sin_f32+0x76>
 8015b78:	ee07 3a90 	vmov	s15, r3
 8015b7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015b80:	1c59      	adds	r1, r3, #1
 8015b82:	ee30 0a67 	vsub.f32	s0, s0, s15
 8015b86:	4a0e      	ldr	r2, [pc, #56]	; (8015bc0 <arm_sin_f32+0x88>)
 8015b88:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015b8c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015b90:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8015b94:	ed93 7a00 	vldr	s14, [r3]
 8015b98:	edd2 6a00 	vldr	s13, [r2]
 8015b9c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8015ba0:	ee20 0a26 	vmul.f32	s0, s0, s13
 8015ba4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015ba8:	ee37 0a80 	vadd.f32	s0, s15, s0
 8015bac:	4770      	bx	lr
 8015bae:	ee30 0a47 	vsub.f32	s0, s0, s14
 8015bb2:	2101      	movs	r1, #1
 8015bb4:	2300      	movs	r3, #0
 8015bb6:	e7e6      	b.n	8015b86 <arm_sin_f32+0x4e>
 8015bb8:	3e22f983 	.word	0x3e22f983
 8015bbc:	44000000 	.word	0x44000000
 8015bc0:	08017a28 	.word	0x08017a28

08015bc4 <arm_cos_f32>:
 8015bc4:	eddf 7a21 	vldr	s15, [pc, #132]	; 8015c4c <arm_cos_f32+0x88>
 8015bc8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015bcc:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8015bd0:	ee30 0a27 	vadd.f32	s0, s0, s15
 8015bd4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8015bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015bdc:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8015be0:	d504      	bpl.n	8015bec <arm_cos_f32+0x28>
 8015be2:	ee17 3a90 	vmov	r3, s15
 8015be6:	3b01      	subs	r3, #1
 8015be8:	ee07 3a90 	vmov	s15, r3
 8015bec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015bf0:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8015c50 <arm_cos_f32+0x8c>
 8015bf4:	ee30 0a67 	vsub.f32	s0, s0, s15
 8015bf8:	ee20 0a07 	vmul.f32	s0, s0, s14
 8015bfc:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8015c00:	ee17 3a90 	vmov	r3, s15
 8015c04:	b29b      	uxth	r3, r3
 8015c06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015c0a:	d21a      	bcs.n	8015c42 <arm_cos_f32+0x7e>
 8015c0c:	ee07 3a90 	vmov	s15, r3
 8015c10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015c14:	1c59      	adds	r1, r3, #1
 8015c16:	ee30 0a67 	vsub.f32	s0, s0, s15
 8015c1a:	4a0e      	ldr	r2, [pc, #56]	; (8015c54 <arm_cos_f32+0x90>)
 8015c1c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015c20:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015c24:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8015c28:	ed93 7a00 	vldr	s14, [r3]
 8015c2c:	edd2 6a00 	vldr	s13, [r2]
 8015c30:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8015c34:	ee20 0a26 	vmul.f32	s0, s0, s13
 8015c38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015c3c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8015c40:	4770      	bx	lr
 8015c42:	ee30 0a47 	vsub.f32	s0, s0, s14
 8015c46:	2101      	movs	r1, #1
 8015c48:	2300      	movs	r3, #0
 8015c4a:	e7e6      	b.n	8015c1a <arm_cos_f32+0x56>
 8015c4c:	3e22f983 	.word	0x3e22f983
 8015c50:	44000000 	.word	0x44000000
 8015c54:	08017a28 	.word	0x08017a28

08015c58 <arm_sub_f32>:
 8015c58:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8015c5c:	b4f0      	push	{r4, r5, r6, r7}
 8015c5e:	d033      	beq.n	8015cc8 <arm_sub_f32+0x70>
 8015c60:	f100 0610 	add.w	r6, r0, #16
 8015c64:	f101 0510 	add.w	r5, r1, #16
 8015c68:	f102 0410 	add.w	r4, r2, #16
 8015c6c:	4667      	mov	r7, ip
 8015c6e:	ed15 7a04 	vldr	s14, [r5, #-16]
 8015c72:	ed56 7a04 	vldr	s15, [r6, #-16]
 8015c76:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015c7a:	3f01      	subs	r7, #1
 8015c7c:	ed44 7a04 	vstr	s15, [r4, #-16]
 8015c80:	ed15 7a03 	vldr	s14, [r5, #-12]
 8015c84:	ed56 7a03 	vldr	s15, [r6, #-12]
 8015c88:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015c8c:	f106 0610 	add.w	r6, r6, #16
 8015c90:	ed44 7a03 	vstr	s15, [r4, #-12]
 8015c94:	ed15 7a02 	vldr	s14, [r5, #-8]
 8015c98:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 8015c9c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015ca0:	f105 0510 	add.w	r5, r5, #16
 8015ca4:	ed44 7a02 	vstr	s15, [r4, #-8]
 8015ca8:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8015cac:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 8015cb0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015cb4:	f104 0410 	add.w	r4, r4, #16
 8015cb8:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8015cbc:	d1d7      	bne.n	8015c6e <arm_sub_f32+0x16>
 8015cbe:	ea4f 140c 	mov.w	r4, ip, lsl #4
 8015cc2:	4420      	add	r0, r4
 8015cc4:	4421      	add	r1, r4
 8015cc6:	4422      	add	r2, r4
 8015cc8:	f013 0303 	ands.w	r3, r3, #3
 8015ccc:	d01b      	beq.n	8015d06 <arm_sub_f32+0xae>
 8015cce:	edd0 7a00 	vldr	s15, [r0]
 8015cd2:	ed91 7a00 	vldr	s14, [r1]
 8015cd6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015cda:	3b01      	subs	r3, #1
 8015cdc:	edc2 7a00 	vstr	s15, [r2]
 8015ce0:	d011      	beq.n	8015d06 <arm_sub_f32+0xae>
 8015ce2:	edd0 7a01 	vldr	s15, [r0, #4]
 8015ce6:	ed91 7a01 	vldr	s14, [r1, #4]
 8015cea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015cee:	2b01      	cmp	r3, #1
 8015cf0:	edc2 7a01 	vstr	s15, [r2, #4]
 8015cf4:	d007      	beq.n	8015d06 <arm_sub_f32+0xae>
 8015cf6:	edd0 7a02 	vldr	s15, [r0, #8]
 8015cfa:	ed91 7a02 	vldr	s14, [r1, #8]
 8015cfe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015d02:	edc2 7a02 	vstr	s15, [r2, #8]
 8015d06:	bcf0      	pop	{r4, r5, r6, r7}
 8015d08:	4770      	bx	lr
 8015d0a:	bf00      	nop

08015d0c <arm_scale_f32>:
 8015d0c:	b470      	push	{r4, r5, r6}
 8015d0e:	0896      	lsrs	r6, r2, #2
 8015d10:	d025      	beq.n	8015d5e <arm_scale_f32+0x52>
 8015d12:	f100 0410 	add.w	r4, r0, #16
 8015d16:	f101 0310 	add.w	r3, r1, #16
 8015d1a:	4635      	mov	r5, r6
 8015d1c:	ed54 7a04 	vldr	s15, [r4, #-16]
 8015d20:	ee67 7a80 	vmul.f32	s15, s15, s0
 8015d24:	3d01      	subs	r5, #1
 8015d26:	ed43 7a04 	vstr	s15, [r3, #-16]
 8015d2a:	ed54 7a03 	vldr	s15, [r4, #-12]
 8015d2e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8015d32:	f104 0410 	add.w	r4, r4, #16
 8015d36:	ed43 7a03 	vstr	s15, [r3, #-12]
 8015d3a:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 8015d3e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8015d42:	f103 0310 	add.w	r3, r3, #16
 8015d46:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 8015d4a:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 8015d4e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8015d52:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 8015d56:	d1e1      	bne.n	8015d1c <arm_scale_f32+0x10>
 8015d58:	0136      	lsls	r6, r6, #4
 8015d5a:	4430      	add	r0, r6
 8015d5c:	4431      	add	r1, r6
 8015d5e:	f012 0203 	ands.w	r2, r2, #3
 8015d62:	d015      	beq.n	8015d90 <arm_scale_f32+0x84>
 8015d64:	edd0 7a00 	vldr	s15, [r0]
 8015d68:	ee67 7a80 	vmul.f32	s15, s15, s0
 8015d6c:	3a01      	subs	r2, #1
 8015d6e:	edc1 7a00 	vstr	s15, [r1]
 8015d72:	d00d      	beq.n	8015d90 <arm_scale_f32+0x84>
 8015d74:	edd0 7a01 	vldr	s15, [r0, #4]
 8015d78:	ee67 7a80 	vmul.f32	s15, s15, s0
 8015d7c:	2a01      	cmp	r2, #1
 8015d7e:	edc1 7a01 	vstr	s15, [r1, #4]
 8015d82:	d005      	beq.n	8015d90 <arm_scale_f32+0x84>
 8015d84:	edd0 7a02 	vldr	s15, [r0, #8]
 8015d88:	ee27 0a80 	vmul.f32	s0, s15, s0
 8015d8c:	ed81 0a02 	vstr	s0, [r1, #8]
 8015d90:	bc70      	pop	{r4, r5, r6}
 8015d92:	4770      	bx	lr

08015d94 <arm_dot_prod_f32>:
 8015d94:	b4f0      	push	{r4, r5, r6, r7}
 8015d96:	0897      	lsrs	r7, r2, #2
 8015d98:	eddf 5a29 	vldr	s11, [pc, #164]	; 8015e40 <arm_dot_prod_f32+0xac>
 8015d9c:	d02d      	beq.n	8015dfa <arm_dot_prod_f32+0x66>
 8015d9e:	f100 0510 	add.w	r5, r0, #16
 8015da2:	f101 0410 	add.w	r4, r1, #16
 8015da6:	463e      	mov	r6, r7
 8015da8:	ed55 6a04 	vldr	s13, [r5, #-16]
 8015dac:	ed54 3a04 	vldr	s7, [r4, #-16]
 8015db0:	ed15 7a03 	vldr	s14, [r5, #-12]
 8015db4:	ed14 4a03 	vldr	s8, [r4, #-12]
 8015db8:	ed55 7a02 	vldr	s15, [r5, #-8]
 8015dbc:	ed54 4a02 	vldr	s9, [r4, #-8]
 8015dc0:	ed15 6a01 	vldr	s12, [r5, #-4]
 8015dc4:	ed14 5a01 	vldr	s10, [r4, #-4]
 8015dc8:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8015dcc:	ee27 7a04 	vmul.f32	s14, s14, s8
 8015dd0:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8015dd4:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8015dd8:	ee37 7a26 	vadd.f32	s14, s14, s13
 8015ddc:	ee66 6a05 	vmul.f32	s13, s12, s10
 8015de0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015de4:	3e01      	subs	r6, #1
 8015de6:	f105 0510 	add.w	r5, r5, #16
 8015dea:	ee76 5aa7 	vadd.f32	s11, s13, s15
 8015dee:	f104 0410 	add.w	r4, r4, #16
 8015df2:	d1d9      	bne.n	8015da8 <arm_dot_prod_f32+0x14>
 8015df4:	013f      	lsls	r7, r7, #4
 8015df6:	4438      	add	r0, r7
 8015df8:	4439      	add	r1, r7
 8015dfa:	f012 0203 	ands.w	r2, r2, #3
 8015dfe:	d01b      	beq.n	8015e38 <arm_dot_prod_f32+0xa4>
 8015e00:	edd1 7a00 	vldr	s15, [r1]
 8015e04:	ed90 7a00 	vldr	s14, [r0]
 8015e08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015e0c:	3a01      	subs	r2, #1
 8015e0e:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8015e12:	d011      	beq.n	8015e38 <arm_dot_prod_f32+0xa4>
 8015e14:	edd1 7a01 	vldr	s15, [r1, #4]
 8015e18:	ed90 7a01 	vldr	s14, [r0, #4]
 8015e1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015e20:	2a01      	cmp	r2, #1
 8015e22:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8015e26:	d007      	beq.n	8015e38 <arm_dot_prod_f32+0xa4>
 8015e28:	edd0 7a02 	vldr	s15, [r0, #8]
 8015e2c:	ed91 7a02 	vldr	s14, [r1, #8]
 8015e30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015e34:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8015e38:	edc3 5a00 	vstr	s11, [r3]
 8015e3c:	bcf0      	pop	{r4, r5, r6, r7}
 8015e3e:	4770      	bx	lr
 8015e40:	00000000 	.word	0x00000000

08015e44 <arm_add_f32>:
 8015e44:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8015e48:	b4f0      	push	{r4, r5, r6, r7}
 8015e4a:	d033      	beq.n	8015eb4 <arm_add_f32+0x70>
 8015e4c:	f100 0610 	add.w	r6, r0, #16
 8015e50:	f101 0510 	add.w	r5, r1, #16
 8015e54:	f102 0410 	add.w	r4, r2, #16
 8015e58:	4667      	mov	r7, ip
 8015e5a:	ed15 7a04 	vldr	s14, [r5, #-16]
 8015e5e:	ed56 7a04 	vldr	s15, [r6, #-16]
 8015e62:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015e66:	3f01      	subs	r7, #1
 8015e68:	ed44 7a04 	vstr	s15, [r4, #-16]
 8015e6c:	ed15 7a03 	vldr	s14, [r5, #-12]
 8015e70:	ed56 7a03 	vldr	s15, [r6, #-12]
 8015e74:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015e78:	f106 0610 	add.w	r6, r6, #16
 8015e7c:	ed44 7a03 	vstr	s15, [r4, #-12]
 8015e80:	ed15 7a02 	vldr	s14, [r5, #-8]
 8015e84:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 8015e88:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015e8c:	f105 0510 	add.w	r5, r5, #16
 8015e90:	ed44 7a02 	vstr	s15, [r4, #-8]
 8015e94:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8015e98:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 8015e9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015ea0:	f104 0410 	add.w	r4, r4, #16
 8015ea4:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8015ea8:	d1d7      	bne.n	8015e5a <arm_add_f32+0x16>
 8015eaa:	ea4f 140c 	mov.w	r4, ip, lsl #4
 8015eae:	4420      	add	r0, r4
 8015eb0:	4421      	add	r1, r4
 8015eb2:	4422      	add	r2, r4
 8015eb4:	f013 0303 	ands.w	r3, r3, #3
 8015eb8:	d01b      	beq.n	8015ef2 <arm_add_f32+0xae>
 8015eba:	edd1 7a00 	vldr	s15, [r1]
 8015ebe:	ed90 7a00 	vldr	s14, [r0]
 8015ec2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015ec6:	3b01      	subs	r3, #1
 8015ec8:	edc2 7a00 	vstr	s15, [r2]
 8015ecc:	d011      	beq.n	8015ef2 <arm_add_f32+0xae>
 8015ece:	edd0 7a01 	vldr	s15, [r0, #4]
 8015ed2:	ed91 7a01 	vldr	s14, [r1, #4]
 8015ed6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015eda:	2b01      	cmp	r3, #1
 8015edc:	edc2 7a01 	vstr	s15, [r2, #4]
 8015ee0:	d007      	beq.n	8015ef2 <arm_add_f32+0xae>
 8015ee2:	edd0 7a02 	vldr	s15, [r0, #8]
 8015ee6:	ed91 7a02 	vldr	s14, [r1, #8]
 8015eea:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015eee:	edc2 7a02 	vstr	s15, [r2, #8]
 8015ef2:	bcf0      	pop	{r4, r5, r6, r7}
 8015ef4:	4770      	bx	lr
 8015ef6:	bf00      	nop

08015ef8 <__errno>:
 8015ef8:	4b01      	ldr	r3, [pc, #4]	; (8015f00 <__errno+0x8>)
 8015efa:	6818      	ldr	r0, [r3, #0]
 8015efc:	4770      	bx	lr
 8015efe:	bf00      	nop
 8015f00:	200000f8 	.word	0x200000f8

08015f04 <__libc_init_array>:
 8015f04:	b570      	push	{r4, r5, r6, lr}
 8015f06:	4e0d      	ldr	r6, [pc, #52]	; (8015f3c <__libc_init_array+0x38>)
 8015f08:	4c0d      	ldr	r4, [pc, #52]	; (8015f40 <__libc_init_array+0x3c>)
 8015f0a:	1ba4      	subs	r4, r4, r6
 8015f0c:	10a4      	asrs	r4, r4, #2
 8015f0e:	2500      	movs	r5, #0
 8015f10:	42a5      	cmp	r5, r4
 8015f12:	d109      	bne.n	8015f28 <__libc_init_array+0x24>
 8015f14:	4e0b      	ldr	r6, [pc, #44]	; (8015f44 <__libc_init_array+0x40>)
 8015f16:	4c0c      	ldr	r4, [pc, #48]	; (8015f48 <__libc_init_array+0x44>)
 8015f18:	f001 f8d4 	bl	80170c4 <_init>
 8015f1c:	1ba4      	subs	r4, r4, r6
 8015f1e:	10a4      	asrs	r4, r4, #2
 8015f20:	2500      	movs	r5, #0
 8015f22:	42a5      	cmp	r5, r4
 8015f24:	d105      	bne.n	8015f32 <__libc_init_array+0x2e>
 8015f26:	bd70      	pop	{r4, r5, r6, pc}
 8015f28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015f2c:	4798      	blx	r3
 8015f2e:	3501      	adds	r5, #1
 8015f30:	e7ee      	b.n	8015f10 <__libc_init_array+0xc>
 8015f32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015f36:	4798      	blx	r3
 8015f38:	3501      	adds	r5, #1
 8015f3a:	e7f2      	b.n	8015f22 <__libc_init_array+0x1e>
 8015f3c:	080182e0 	.word	0x080182e0
 8015f40:	080182e0 	.word	0x080182e0
 8015f44:	080182e0 	.word	0x080182e0
 8015f48:	080182e4 	.word	0x080182e4

08015f4c <memcpy>:
 8015f4c:	b510      	push	{r4, lr}
 8015f4e:	1e43      	subs	r3, r0, #1
 8015f50:	440a      	add	r2, r1
 8015f52:	4291      	cmp	r1, r2
 8015f54:	d100      	bne.n	8015f58 <memcpy+0xc>
 8015f56:	bd10      	pop	{r4, pc}
 8015f58:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015f5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015f60:	e7f7      	b.n	8015f52 <memcpy+0x6>

08015f62 <memset>:
 8015f62:	4402      	add	r2, r0
 8015f64:	4603      	mov	r3, r0
 8015f66:	4293      	cmp	r3, r2
 8015f68:	d100      	bne.n	8015f6c <memset+0xa>
 8015f6a:	4770      	bx	lr
 8015f6c:	f803 1b01 	strb.w	r1, [r3], #1
 8015f70:	e7f9      	b.n	8015f66 <memset+0x4>
	...

08015f74 <pow>:
 8015f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f78:	ed2d 8b04 	vpush	{d8-d9}
 8015f7c:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8016250 <pow+0x2dc>
 8015f80:	b08d      	sub	sp, #52	; 0x34
 8015f82:	ec57 6b10 	vmov	r6, r7, d0
 8015f86:	ec55 4b11 	vmov	r4, r5, d1
 8015f8a:	f000 f9b5 	bl	80162f8 <__ieee754_pow>
 8015f8e:	f999 3000 	ldrsb.w	r3, [r9]
 8015f92:	9300      	str	r3, [sp, #0]
 8015f94:	3301      	adds	r3, #1
 8015f96:	eeb0 8a40 	vmov.f32	s16, s0
 8015f9a:	eef0 8a60 	vmov.f32	s17, s1
 8015f9e:	46c8      	mov	r8, r9
 8015fa0:	d05f      	beq.n	8016062 <pow+0xee>
 8015fa2:	4622      	mov	r2, r4
 8015fa4:	462b      	mov	r3, r5
 8015fa6:	4620      	mov	r0, r4
 8015fa8:	4629      	mov	r1, r5
 8015faa:	f7ea fd49 	bl	8000a40 <__aeabi_dcmpun>
 8015fae:	4683      	mov	fp, r0
 8015fb0:	2800      	cmp	r0, #0
 8015fb2:	d156      	bne.n	8016062 <pow+0xee>
 8015fb4:	4632      	mov	r2, r6
 8015fb6:	463b      	mov	r3, r7
 8015fb8:	4630      	mov	r0, r6
 8015fba:	4639      	mov	r1, r7
 8015fbc:	f7ea fd40 	bl	8000a40 <__aeabi_dcmpun>
 8015fc0:	9001      	str	r0, [sp, #4]
 8015fc2:	b1e8      	cbz	r0, 8016000 <pow+0x8c>
 8015fc4:	2200      	movs	r2, #0
 8015fc6:	2300      	movs	r3, #0
 8015fc8:	4620      	mov	r0, r4
 8015fca:	4629      	mov	r1, r5
 8015fcc:	f7ea fd06 	bl	80009dc <__aeabi_dcmpeq>
 8015fd0:	2800      	cmp	r0, #0
 8015fd2:	d046      	beq.n	8016062 <pow+0xee>
 8015fd4:	2301      	movs	r3, #1
 8015fd6:	9302      	str	r3, [sp, #8]
 8015fd8:	4b96      	ldr	r3, [pc, #600]	; (8016234 <pow+0x2c0>)
 8015fda:	9303      	str	r3, [sp, #12]
 8015fdc:	4b96      	ldr	r3, [pc, #600]	; (8016238 <pow+0x2c4>)
 8015fde:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8015fe2:	2200      	movs	r2, #0
 8015fe4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015fe8:	9b00      	ldr	r3, [sp, #0]
 8015fea:	2b02      	cmp	r3, #2
 8015fec:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8015ff0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8015ff4:	d033      	beq.n	801605e <pow+0xea>
 8015ff6:	a802      	add	r0, sp, #8
 8015ff8:	f000 ff50 	bl	8016e9c <matherr>
 8015ffc:	bb48      	cbnz	r0, 8016052 <pow+0xde>
 8015ffe:	e05d      	b.n	80160bc <pow+0x148>
 8016000:	f04f 0a00 	mov.w	sl, #0
 8016004:	f04f 0b00 	mov.w	fp, #0
 8016008:	4652      	mov	r2, sl
 801600a:	465b      	mov	r3, fp
 801600c:	4630      	mov	r0, r6
 801600e:	4639      	mov	r1, r7
 8016010:	f7ea fce4 	bl	80009dc <__aeabi_dcmpeq>
 8016014:	ec4b ab19 	vmov	d9, sl, fp
 8016018:	2800      	cmp	r0, #0
 801601a:	d054      	beq.n	80160c6 <pow+0x152>
 801601c:	4652      	mov	r2, sl
 801601e:	465b      	mov	r3, fp
 8016020:	4620      	mov	r0, r4
 8016022:	4629      	mov	r1, r5
 8016024:	f7ea fcda 	bl	80009dc <__aeabi_dcmpeq>
 8016028:	4680      	mov	r8, r0
 801602a:	b318      	cbz	r0, 8016074 <pow+0x100>
 801602c:	2301      	movs	r3, #1
 801602e:	9302      	str	r3, [sp, #8]
 8016030:	4b80      	ldr	r3, [pc, #512]	; (8016234 <pow+0x2c0>)
 8016032:	9303      	str	r3, [sp, #12]
 8016034:	9b01      	ldr	r3, [sp, #4]
 8016036:	930a      	str	r3, [sp, #40]	; 0x28
 8016038:	9b00      	ldr	r3, [sp, #0]
 801603a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801603e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8016042:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8016046:	2b00      	cmp	r3, #0
 8016048:	d0d5      	beq.n	8015ff6 <pow+0x82>
 801604a:	4b7b      	ldr	r3, [pc, #492]	; (8016238 <pow+0x2c4>)
 801604c:	2200      	movs	r2, #0
 801604e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016052:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016054:	b11b      	cbz	r3, 801605e <pow+0xea>
 8016056:	f7ff ff4f 	bl	8015ef8 <__errno>
 801605a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801605c:	6003      	str	r3, [r0, #0]
 801605e:	ed9d 8b08 	vldr	d8, [sp, #32]
 8016062:	eeb0 0a48 	vmov.f32	s0, s16
 8016066:	eef0 0a68 	vmov.f32	s1, s17
 801606a:	b00d      	add	sp, #52	; 0x34
 801606c:	ecbd 8b04 	vpop	{d8-d9}
 8016070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016074:	ec45 4b10 	vmov	d0, r4, r5
 8016078:	f000 ff08 	bl	8016e8c <finite>
 801607c:	2800      	cmp	r0, #0
 801607e:	d0f0      	beq.n	8016062 <pow+0xee>
 8016080:	4652      	mov	r2, sl
 8016082:	465b      	mov	r3, fp
 8016084:	4620      	mov	r0, r4
 8016086:	4629      	mov	r1, r5
 8016088:	f7ea fcb2 	bl	80009f0 <__aeabi_dcmplt>
 801608c:	2800      	cmp	r0, #0
 801608e:	d0e8      	beq.n	8016062 <pow+0xee>
 8016090:	2301      	movs	r3, #1
 8016092:	9302      	str	r3, [sp, #8]
 8016094:	4b67      	ldr	r3, [pc, #412]	; (8016234 <pow+0x2c0>)
 8016096:	9303      	str	r3, [sp, #12]
 8016098:	f999 3000 	ldrsb.w	r3, [r9]
 801609c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80160a0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80160a4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80160a8:	b913      	cbnz	r3, 80160b0 <pow+0x13c>
 80160aa:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80160ae:	e7a2      	b.n	8015ff6 <pow+0x82>
 80160b0:	4962      	ldr	r1, [pc, #392]	; (801623c <pow+0x2c8>)
 80160b2:	2000      	movs	r0, #0
 80160b4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80160b8:	2b02      	cmp	r3, #2
 80160ba:	d19c      	bne.n	8015ff6 <pow+0x82>
 80160bc:	f7ff ff1c 	bl	8015ef8 <__errno>
 80160c0:	2321      	movs	r3, #33	; 0x21
 80160c2:	6003      	str	r3, [r0, #0]
 80160c4:	e7c5      	b.n	8016052 <pow+0xde>
 80160c6:	eeb0 0a48 	vmov.f32	s0, s16
 80160ca:	eef0 0a68 	vmov.f32	s1, s17
 80160ce:	f000 fedd 	bl	8016e8c <finite>
 80160d2:	9000      	str	r0, [sp, #0]
 80160d4:	2800      	cmp	r0, #0
 80160d6:	f040 8081 	bne.w	80161dc <pow+0x268>
 80160da:	ec47 6b10 	vmov	d0, r6, r7
 80160de:	f000 fed5 	bl	8016e8c <finite>
 80160e2:	2800      	cmp	r0, #0
 80160e4:	d07a      	beq.n	80161dc <pow+0x268>
 80160e6:	ec45 4b10 	vmov	d0, r4, r5
 80160ea:	f000 fecf 	bl	8016e8c <finite>
 80160ee:	2800      	cmp	r0, #0
 80160f0:	d074      	beq.n	80161dc <pow+0x268>
 80160f2:	ec53 2b18 	vmov	r2, r3, d8
 80160f6:	ee18 0a10 	vmov	r0, s16
 80160fa:	4619      	mov	r1, r3
 80160fc:	f7ea fca0 	bl	8000a40 <__aeabi_dcmpun>
 8016100:	f999 9000 	ldrsb.w	r9, [r9]
 8016104:	4b4b      	ldr	r3, [pc, #300]	; (8016234 <pow+0x2c0>)
 8016106:	b1b0      	cbz	r0, 8016136 <pow+0x1c2>
 8016108:	2201      	movs	r2, #1
 801610a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801610e:	9b00      	ldr	r3, [sp, #0]
 8016110:	930a      	str	r3, [sp, #40]	; 0x28
 8016112:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8016116:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801611a:	f1b9 0f00 	cmp.w	r9, #0
 801611e:	d0c4      	beq.n	80160aa <pow+0x136>
 8016120:	4652      	mov	r2, sl
 8016122:	465b      	mov	r3, fp
 8016124:	4650      	mov	r0, sl
 8016126:	4659      	mov	r1, fp
 8016128:	f7ea fb1a 	bl	8000760 <__aeabi_ddiv>
 801612c:	f1b9 0f02 	cmp.w	r9, #2
 8016130:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016134:	e7c1      	b.n	80160ba <pow+0x146>
 8016136:	2203      	movs	r2, #3
 8016138:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801613c:	900a      	str	r0, [sp, #40]	; 0x28
 801613e:	4629      	mov	r1, r5
 8016140:	4620      	mov	r0, r4
 8016142:	2200      	movs	r2, #0
 8016144:	4b3e      	ldr	r3, [pc, #248]	; (8016240 <pow+0x2cc>)
 8016146:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801614a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801614e:	f7ea f9dd 	bl	800050c <__aeabi_dmul>
 8016152:	4604      	mov	r4, r0
 8016154:	460d      	mov	r5, r1
 8016156:	f1b9 0f00 	cmp.w	r9, #0
 801615a:	d124      	bne.n	80161a6 <pow+0x232>
 801615c:	4b39      	ldr	r3, [pc, #228]	; (8016244 <pow+0x2d0>)
 801615e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8016162:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016166:	4630      	mov	r0, r6
 8016168:	4652      	mov	r2, sl
 801616a:	465b      	mov	r3, fp
 801616c:	4639      	mov	r1, r7
 801616e:	f7ea fc3f 	bl	80009f0 <__aeabi_dcmplt>
 8016172:	2800      	cmp	r0, #0
 8016174:	d056      	beq.n	8016224 <pow+0x2b0>
 8016176:	ec45 4b10 	vmov	d0, r4, r5
 801617a:	f000 fe99 	bl	8016eb0 <rint>
 801617e:	4622      	mov	r2, r4
 8016180:	462b      	mov	r3, r5
 8016182:	ec51 0b10 	vmov	r0, r1, d0
 8016186:	f7ea fc29 	bl	80009dc <__aeabi_dcmpeq>
 801618a:	b920      	cbnz	r0, 8016196 <pow+0x222>
 801618c:	4b2e      	ldr	r3, [pc, #184]	; (8016248 <pow+0x2d4>)
 801618e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8016192:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016196:	f998 3000 	ldrsb.w	r3, [r8]
 801619a:	2b02      	cmp	r3, #2
 801619c:	d142      	bne.n	8016224 <pow+0x2b0>
 801619e:	f7ff feab 	bl	8015ef8 <__errno>
 80161a2:	2322      	movs	r3, #34	; 0x22
 80161a4:	e78d      	b.n	80160c2 <pow+0x14e>
 80161a6:	4b29      	ldr	r3, [pc, #164]	; (801624c <pow+0x2d8>)
 80161a8:	2200      	movs	r2, #0
 80161aa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80161ae:	4630      	mov	r0, r6
 80161b0:	4652      	mov	r2, sl
 80161b2:	465b      	mov	r3, fp
 80161b4:	4639      	mov	r1, r7
 80161b6:	f7ea fc1b 	bl	80009f0 <__aeabi_dcmplt>
 80161ba:	2800      	cmp	r0, #0
 80161bc:	d0eb      	beq.n	8016196 <pow+0x222>
 80161be:	ec45 4b10 	vmov	d0, r4, r5
 80161c2:	f000 fe75 	bl	8016eb0 <rint>
 80161c6:	4622      	mov	r2, r4
 80161c8:	462b      	mov	r3, r5
 80161ca:	ec51 0b10 	vmov	r0, r1, d0
 80161ce:	f7ea fc05 	bl	80009dc <__aeabi_dcmpeq>
 80161d2:	2800      	cmp	r0, #0
 80161d4:	d1df      	bne.n	8016196 <pow+0x222>
 80161d6:	2200      	movs	r2, #0
 80161d8:	4b18      	ldr	r3, [pc, #96]	; (801623c <pow+0x2c8>)
 80161da:	e7da      	b.n	8016192 <pow+0x21e>
 80161dc:	2200      	movs	r2, #0
 80161de:	2300      	movs	r3, #0
 80161e0:	ec51 0b18 	vmov	r0, r1, d8
 80161e4:	f7ea fbfa 	bl	80009dc <__aeabi_dcmpeq>
 80161e8:	2800      	cmp	r0, #0
 80161ea:	f43f af3a 	beq.w	8016062 <pow+0xee>
 80161ee:	ec47 6b10 	vmov	d0, r6, r7
 80161f2:	f000 fe4b 	bl	8016e8c <finite>
 80161f6:	2800      	cmp	r0, #0
 80161f8:	f43f af33 	beq.w	8016062 <pow+0xee>
 80161fc:	ec45 4b10 	vmov	d0, r4, r5
 8016200:	f000 fe44 	bl	8016e8c <finite>
 8016204:	2800      	cmp	r0, #0
 8016206:	f43f af2c 	beq.w	8016062 <pow+0xee>
 801620a:	2304      	movs	r3, #4
 801620c:	9302      	str	r3, [sp, #8]
 801620e:	4b09      	ldr	r3, [pc, #36]	; (8016234 <pow+0x2c0>)
 8016210:	9303      	str	r3, [sp, #12]
 8016212:	2300      	movs	r3, #0
 8016214:	930a      	str	r3, [sp, #40]	; 0x28
 8016216:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801621a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801621e:	ed8d 9b08 	vstr	d9, [sp, #32]
 8016222:	e7b8      	b.n	8016196 <pow+0x222>
 8016224:	a802      	add	r0, sp, #8
 8016226:	f000 fe39 	bl	8016e9c <matherr>
 801622a:	2800      	cmp	r0, #0
 801622c:	f47f af11 	bne.w	8016052 <pow+0xde>
 8016230:	e7b5      	b.n	801619e <pow+0x22a>
 8016232:	bf00      	nop
 8016234:	0801828c 	.word	0x0801828c
 8016238:	3ff00000 	.word	0x3ff00000
 801623c:	fff00000 	.word	0xfff00000
 8016240:	3fe00000 	.word	0x3fe00000
 8016244:	47efffff 	.word	0x47efffff
 8016248:	c7efffff 	.word	0xc7efffff
 801624c:	7ff00000 	.word	0x7ff00000
 8016250:	2000015c 	.word	0x2000015c

08016254 <sqrtf>:
 8016254:	b510      	push	{r4, lr}
 8016256:	ed2d 8b02 	vpush	{d8}
 801625a:	b08a      	sub	sp, #40	; 0x28
 801625c:	eeb0 8a40 	vmov.f32	s16, s0
 8016260:	f000 fe08 	bl	8016e74 <__ieee754_sqrtf>
 8016264:	4b21      	ldr	r3, [pc, #132]	; (80162ec <sqrtf+0x98>)
 8016266:	f993 4000 	ldrsb.w	r4, [r3]
 801626a:	1c63      	adds	r3, r4, #1
 801626c:	d02c      	beq.n	80162c8 <sqrtf+0x74>
 801626e:	eeb4 8a48 	vcmp.f32	s16, s16
 8016272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016276:	d627      	bvs.n	80162c8 <sqrtf+0x74>
 8016278:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801627c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016280:	d522      	bpl.n	80162c8 <sqrtf+0x74>
 8016282:	2301      	movs	r3, #1
 8016284:	9300      	str	r3, [sp, #0]
 8016286:	4b1a      	ldr	r3, [pc, #104]	; (80162f0 <sqrtf+0x9c>)
 8016288:	9301      	str	r3, [sp, #4]
 801628a:	ee18 0a10 	vmov	r0, s16
 801628e:	2300      	movs	r3, #0
 8016290:	9308      	str	r3, [sp, #32]
 8016292:	f7ea f8e3 	bl	800045c <__aeabi_f2d>
 8016296:	2200      	movs	r2, #0
 8016298:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801629c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80162a0:	2300      	movs	r3, #0
 80162a2:	b9ac      	cbnz	r4, 80162d0 <sqrtf+0x7c>
 80162a4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80162a8:	4668      	mov	r0, sp
 80162aa:	f000 fdf7 	bl	8016e9c <matherr>
 80162ae:	b1b8      	cbz	r0, 80162e0 <sqrtf+0x8c>
 80162b0:	9b08      	ldr	r3, [sp, #32]
 80162b2:	b11b      	cbz	r3, 80162bc <sqrtf+0x68>
 80162b4:	f7ff fe20 	bl	8015ef8 <__errno>
 80162b8:	9b08      	ldr	r3, [sp, #32]
 80162ba:	6003      	str	r3, [r0, #0]
 80162bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80162c0:	f7ea fbd4 	bl	8000a6c <__aeabi_d2f>
 80162c4:	ee00 0a10 	vmov	s0, r0
 80162c8:	b00a      	add	sp, #40	; 0x28
 80162ca:	ecbd 8b02 	vpop	{d8}
 80162ce:	bd10      	pop	{r4, pc}
 80162d0:	4610      	mov	r0, r2
 80162d2:	4619      	mov	r1, r3
 80162d4:	f7ea fa44 	bl	8000760 <__aeabi_ddiv>
 80162d8:	2c02      	cmp	r4, #2
 80162da:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80162de:	d1e3      	bne.n	80162a8 <sqrtf+0x54>
 80162e0:	f7ff fe0a 	bl	8015ef8 <__errno>
 80162e4:	2321      	movs	r3, #33	; 0x21
 80162e6:	6003      	str	r3, [r0, #0]
 80162e8:	e7e2      	b.n	80162b0 <sqrtf+0x5c>
 80162ea:	bf00      	nop
 80162ec:	2000015c 	.word	0x2000015c
 80162f0:	08018290 	.word	0x08018290
 80162f4:	00000000 	.word	0x00000000

080162f8 <__ieee754_pow>:
 80162f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162fc:	b091      	sub	sp, #68	; 0x44
 80162fe:	ed8d 1b00 	vstr	d1, [sp]
 8016302:	e9dd 2900 	ldrd	r2, r9, [sp]
 8016306:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801630a:	ea58 0302 	orrs.w	r3, r8, r2
 801630e:	ec57 6b10 	vmov	r6, r7, d0
 8016312:	f000 84be 	beq.w	8016c92 <__ieee754_pow+0x99a>
 8016316:	4b7a      	ldr	r3, [pc, #488]	; (8016500 <__ieee754_pow+0x208>)
 8016318:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801631c:	429c      	cmp	r4, r3
 801631e:	463d      	mov	r5, r7
 8016320:	ee10 aa10 	vmov	sl, s0
 8016324:	dc09      	bgt.n	801633a <__ieee754_pow+0x42>
 8016326:	d103      	bne.n	8016330 <__ieee754_pow+0x38>
 8016328:	b93e      	cbnz	r6, 801633a <__ieee754_pow+0x42>
 801632a:	45a0      	cmp	r8, r4
 801632c:	dc0d      	bgt.n	801634a <__ieee754_pow+0x52>
 801632e:	e001      	b.n	8016334 <__ieee754_pow+0x3c>
 8016330:	4598      	cmp	r8, r3
 8016332:	dc02      	bgt.n	801633a <__ieee754_pow+0x42>
 8016334:	4598      	cmp	r8, r3
 8016336:	d10e      	bne.n	8016356 <__ieee754_pow+0x5e>
 8016338:	b16a      	cbz	r2, 8016356 <__ieee754_pow+0x5e>
 801633a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801633e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8016342:	ea54 030a 	orrs.w	r3, r4, sl
 8016346:	f000 84a4 	beq.w	8016c92 <__ieee754_pow+0x99a>
 801634a:	486e      	ldr	r0, [pc, #440]	; (8016504 <__ieee754_pow+0x20c>)
 801634c:	b011      	add	sp, #68	; 0x44
 801634e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016352:	f000 bda5 	b.w	8016ea0 <nan>
 8016356:	2d00      	cmp	r5, #0
 8016358:	da53      	bge.n	8016402 <__ieee754_pow+0x10a>
 801635a:	4b6b      	ldr	r3, [pc, #428]	; (8016508 <__ieee754_pow+0x210>)
 801635c:	4598      	cmp	r8, r3
 801635e:	dc4d      	bgt.n	80163fc <__ieee754_pow+0x104>
 8016360:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8016364:	4598      	cmp	r8, r3
 8016366:	dd4c      	ble.n	8016402 <__ieee754_pow+0x10a>
 8016368:	ea4f 5328 	mov.w	r3, r8, asr #20
 801636c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8016370:	2b14      	cmp	r3, #20
 8016372:	dd26      	ble.n	80163c2 <__ieee754_pow+0xca>
 8016374:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8016378:	fa22 f103 	lsr.w	r1, r2, r3
 801637c:	fa01 f303 	lsl.w	r3, r1, r3
 8016380:	4293      	cmp	r3, r2
 8016382:	d13e      	bne.n	8016402 <__ieee754_pow+0x10a>
 8016384:	f001 0101 	and.w	r1, r1, #1
 8016388:	f1c1 0b02 	rsb	fp, r1, #2
 801638c:	2a00      	cmp	r2, #0
 801638e:	d15b      	bne.n	8016448 <__ieee754_pow+0x150>
 8016390:	4b5b      	ldr	r3, [pc, #364]	; (8016500 <__ieee754_pow+0x208>)
 8016392:	4598      	cmp	r8, r3
 8016394:	d124      	bne.n	80163e0 <__ieee754_pow+0xe8>
 8016396:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801639a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801639e:	ea53 030a 	orrs.w	r3, r3, sl
 80163a2:	f000 8476 	beq.w	8016c92 <__ieee754_pow+0x99a>
 80163a6:	4b59      	ldr	r3, [pc, #356]	; (801650c <__ieee754_pow+0x214>)
 80163a8:	429c      	cmp	r4, r3
 80163aa:	dd2d      	ble.n	8016408 <__ieee754_pow+0x110>
 80163ac:	f1b9 0f00 	cmp.w	r9, #0
 80163b0:	f280 8473 	bge.w	8016c9a <__ieee754_pow+0x9a2>
 80163b4:	2000      	movs	r0, #0
 80163b6:	2100      	movs	r1, #0
 80163b8:	ec41 0b10 	vmov	d0, r0, r1
 80163bc:	b011      	add	sp, #68	; 0x44
 80163be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80163c2:	2a00      	cmp	r2, #0
 80163c4:	d13e      	bne.n	8016444 <__ieee754_pow+0x14c>
 80163c6:	f1c3 0314 	rsb	r3, r3, #20
 80163ca:	fa48 f103 	asr.w	r1, r8, r3
 80163ce:	fa01 f303 	lsl.w	r3, r1, r3
 80163d2:	4543      	cmp	r3, r8
 80163d4:	f040 8469 	bne.w	8016caa <__ieee754_pow+0x9b2>
 80163d8:	f001 0101 	and.w	r1, r1, #1
 80163dc:	f1c1 0b02 	rsb	fp, r1, #2
 80163e0:	4b4b      	ldr	r3, [pc, #300]	; (8016510 <__ieee754_pow+0x218>)
 80163e2:	4598      	cmp	r8, r3
 80163e4:	d118      	bne.n	8016418 <__ieee754_pow+0x120>
 80163e6:	f1b9 0f00 	cmp.w	r9, #0
 80163ea:	f280 845a 	bge.w	8016ca2 <__ieee754_pow+0x9aa>
 80163ee:	4948      	ldr	r1, [pc, #288]	; (8016510 <__ieee754_pow+0x218>)
 80163f0:	4632      	mov	r2, r6
 80163f2:	463b      	mov	r3, r7
 80163f4:	2000      	movs	r0, #0
 80163f6:	f7ea f9b3 	bl	8000760 <__aeabi_ddiv>
 80163fa:	e7dd      	b.n	80163b8 <__ieee754_pow+0xc0>
 80163fc:	f04f 0b02 	mov.w	fp, #2
 8016400:	e7c4      	b.n	801638c <__ieee754_pow+0x94>
 8016402:	f04f 0b00 	mov.w	fp, #0
 8016406:	e7c1      	b.n	801638c <__ieee754_pow+0x94>
 8016408:	f1b9 0f00 	cmp.w	r9, #0
 801640c:	dad2      	bge.n	80163b4 <__ieee754_pow+0xbc>
 801640e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8016412:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8016416:	e7cf      	b.n	80163b8 <__ieee754_pow+0xc0>
 8016418:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801641c:	d106      	bne.n	801642c <__ieee754_pow+0x134>
 801641e:	4632      	mov	r2, r6
 8016420:	463b      	mov	r3, r7
 8016422:	4610      	mov	r0, r2
 8016424:	4619      	mov	r1, r3
 8016426:	f7ea f871 	bl	800050c <__aeabi_dmul>
 801642a:	e7c5      	b.n	80163b8 <__ieee754_pow+0xc0>
 801642c:	4b39      	ldr	r3, [pc, #228]	; (8016514 <__ieee754_pow+0x21c>)
 801642e:	4599      	cmp	r9, r3
 8016430:	d10a      	bne.n	8016448 <__ieee754_pow+0x150>
 8016432:	2d00      	cmp	r5, #0
 8016434:	db08      	blt.n	8016448 <__ieee754_pow+0x150>
 8016436:	ec47 6b10 	vmov	d0, r6, r7
 801643a:	b011      	add	sp, #68	; 0x44
 801643c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016440:	f000 bc68 	b.w	8016d14 <__ieee754_sqrt>
 8016444:	f04f 0b00 	mov.w	fp, #0
 8016448:	ec47 6b10 	vmov	d0, r6, r7
 801644c:	f000 fd15 	bl	8016e7a <fabs>
 8016450:	ec51 0b10 	vmov	r0, r1, d0
 8016454:	f1ba 0f00 	cmp.w	sl, #0
 8016458:	d127      	bne.n	80164aa <__ieee754_pow+0x1b2>
 801645a:	b124      	cbz	r4, 8016466 <__ieee754_pow+0x16e>
 801645c:	4b2c      	ldr	r3, [pc, #176]	; (8016510 <__ieee754_pow+0x218>)
 801645e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8016462:	429a      	cmp	r2, r3
 8016464:	d121      	bne.n	80164aa <__ieee754_pow+0x1b2>
 8016466:	f1b9 0f00 	cmp.w	r9, #0
 801646a:	da05      	bge.n	8016478 <__ieee754_pow+0x180>
 801646c:	4602      	mov	r2, r0
 801646e:	460b      	mov	r3, r1
 8016470:	2000      	movs	r0, #0
 8016472:	4927      	ldr	r1, [pc, #156]	; (8016510 <__ieee754_pow+0x218>)
 8016474:	f7ea f974 	bl	8000760 <__aeabi_ddiv>
 8016478:	2d00      	cmp	r5, #0
 801647a:	da9d      	bge.n	80163b8 <__ieee754_pow+0xc0>
 801647c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8016480:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8016484:	ea54 030b 	orrs.w	r3, r4, fp
 8016488:	d108      	bne.n	801649c <__ieee754_pow+0x1a4>
 801648a:	4602      	mov	r2, r0
 801648c:	460b      	mov	r3, r1
 801648e:	4610      	mov	r0, r2
 8016490:	4619      	mov	r1, r3
 8016492:	f7e9 fe83 	bl	800019c <__aeabi_dsub>
 8016496:	4602      	mov	r2, r0
 8016498:	460b      	mov	r3, r1
 801649a:	e7ac      	b.n	80163f6 <__ieee754_pow+0xfe>
 801649c:	f1bb 0f01 	cmp.w	fp, #1
 80164a0:	d18a      	bne.n	80163b8 <__ieee754_pow+0xc0>
 80164a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80164a6:	4619      	mov	r1, r3
 80164a8:	e786      	b.n	80163b8 <__ieee754_pow+0xc0>
 80164aa:	0fed      	lsrs	r5, r5, #31
 80164ac:	1e6b      	subs	r3, r5, #1
 80164ae:	930d      	str	r3, [sp, #52]	; 0x34
 80164b0:	ea5b 0303 	orrs.w	r3, fp, r3
 80164b4:	d102      	bne.n	80164bc <__ieee754_pow+0x1c4>
 80164b6:	4632      	mov	r2, r6
 80164b8:	463b      	mov	r3, r7
 80164ba:	e7e8      	b.n	801648e <__ieee754_pow+0x196>
 80164bc:	4b16      	ldr	r3, [pc, #88]	; (8016518 <__ieee754_pow+0x220>)
 80164be:	4598      	cmp	r8, r3
 80164c0:	f340 80fe 	ble.w	80166c0 <__ieee754_pow+0x3c8>
 80164c4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80164c8:	4598      	cmp	r8, r3
 80164ca:	dd0a      	ble.n	80164e2 <__ieee754_pow+0x1ea>
 80164cc:	4b0f      	ldr	r3, [pc, #60]	; (801650c <__ieee754_pow+0x214>)
 80164ce:	429c      	cmp	r4, r3
 80164d0:	dc0d      	bgt.n	80164ee <__ieee754_pow+0x1f6>
 80164d2:	f1b9 0f00 	cmp.w	r9, #0
 80164d6:	f6bf af6d 	bge.w	80163b4 <__ieee754_pow+0xbc>
 80164da:	a307      	add	r3, pc, #28	; (adr r3, 80164f8 <__ieee754_pow+0x200>)
 80164dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164e0:	e79f      	b.n	8016422 <__ieee754_pow+0x12a>
 80164e2:	4b0e      	ldr	r3, [pc, #56]	; (801651c <__ieee754_pow+0x224>)
 80164e4:	429c      	cmp	r4, r3
 80164e6:	ddf4      	ble.n	80164d2 <__ieee754_pow+0x1da>
 80164e8:	4b09      	ldr	r3, [pc, #36]	; (8016510 <__ieee754_pow+0x218>)
 80164ea:	429c      	cmp	r4, r3
 80164ec:	dd18      	ble.n	8016520 <__ieee754_pow+0x228>
 80164ee:	f1b9 0f00 	cmp.w	r9, #0
 80164f2:	dcf2      	bgt.n	80164da <__ieee754_pow+0x1e2>
 80164f4:	e75e      	b.n	80163b4 <__ieee754_pow+0xbc>
 80164f6:	bf00      	nop
 80164f8:	8800759c 	.word	0x8800759c
 80164fc:	7e37e43c 	.word	0x7e37e43c
 8016500:	7ff00000 	.word	0x7ff00000
 8016504:	08018295 	.word	0x08018295
 8016508:	433fffff 	.word	0x433fffff
 801650c:	3fefffff 	.word	0x3fefffff
 8016510:	3ff00000 	.word	0x3ff00000
 8016514:	3fe00000 	.word	0x3fe00000
 8016518:	41e00000 	.word	0x41e00000
 801651c:	3feffffe 	.word	0x3feffffe
 8016520:	2200      	movs	r2, #0
 8016522:	4b63      	ldr	r3, [pc, #396]	; (80166b0 <__ieee754_pow+0x3b8>)
 8016524:	f7e9 fe3a 	bl	800019c <__aeabi_dsub>
 8016528:	a355      	add	r3, pc, #340	; (adr r3, 8016680 <__ieee754_pow+0x388>)
 801652a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801652e:	4604      	mov	r4, r0
 8016530:	460d      	mov	r5, r1
 8016532:	f7e9 ffeb 	bl	800050c <__aeabi_dmul>
 8016536:	a354      	add	r3, pc, #336	; (adr r3, 8016688 <__ieee754_pow+0x390>)
 8016538:	e9d3 2300 	ldrd	r2, r3, [r3]
 801653c:	4606      	mov	r6, r0
 801653e:	460f      	mov	r7, r1
 8016540:	4620      	mov	r0, r4
 8016542:	4629      	mov	r1, r5
 8016544:	f7e9 ffe2 	bl	800050c <__aeabi_dmul>
 8016548:	2200      	movs	r2, #0
 801654a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801654e:	4b59      	ldr	r3, [pc, #356]	; (80166b4 <__ieee754_pow+0x3bc>)
 8016550:	4620      	mov	r0, r4
 8016552:	4629      	mov	r1, r5
 8016554:	f7e9 ffda 	bl	800050c <__aeabi_dmul>
 8016558:	4602      	mov	r2, r0
 801655a:	460b      	mov	r3, r1
 801655c:	a14c      	add	r1, pc, #304	; (adr r1, 8016690 <__ieee754_pow+0x398>)
 801655e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016562:	f7e9 fe1b 	bl	800019c <__aeabi_dsub>
 8016566:	4622      	mov	r2, r4
 8016568:	462b      	mov	r3, r5
 801656a:	f7e9 ffcf 	bl	800050c <__aeabi_dmul>
 801656e:	4602      	mov	r2, r0
 8016570:	460b      	mov	r3, r1
 8016572:	2000      	movs	r0, #0
 8016574:	4950      	ldr	r1, [pc, #320]	; (80166b8 <__ieee754_pow+0x3c0>)
 8016576:	f7e9 fe11 	bl	800019c <__aeabi_dsub>
 801657a:	4622      	mov	r2, r4
 801657c:	462b      	mov	r3, r5
 801657e:	4680      	mov	r8, r0
 8016580:	4689      	mov	r9, r1
 8016582:	4620      	mov	r0, r4
 8016584:	4629      	mov	r1, r5
 8016586:	f7e9 ffc1 	bl	800050c <__aeabi_dmul>
 801658a:	4602      	mov	r2, r0
 801658c:	460b      	mov	r3, r1
 801658e:	4640      	mov	r0, r8
 8016590:	4649      	mov	r1, r9
 8016592:	f7e9 ffbb 	bl	800050c <__aeabi_dmul>
 8016596:	a340      	add	r3, pc, #256	; (adr r3, 8016698 <__ieee754_pow+0x3a0>)
 8016598:	e9d3 2300 	ldrd	r2, r3, [r3]
 801659c:	f7e9 ffb6 	bl	800050c <__aeabi_dmul>
 80165a0:	4602      	mov	r2, r0
 80165a2:	460b      	mov	r3, r1
 80165a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80165a8:	f7e9 fdf8 	bl	800019c <__aeabi_dsub>
 80165ac:	4602      	mov	r2, r0
 80165ae:	460b      	mov	r3, r1
 80165b0:	4604      	mov	r4, r0
 80165b2:	460d      	mov	r5, r1
 80165b4:	4630      	mov	r0, r6
 80165b6:	4639      	mov	r1, r7
 80165b8:	f7e9 fdf2 	bl	80001a0 <__adddf3>
 80165bc:	2000      	movs	r0, #0
 80165be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80165c2:	4632      	mov	r2, r6
 80165c4:	463b      	mov	r3, r7
 80165c6:	f7e9 fde9 	bl	800019c <__aeabi_dsub>
 80165ca:	4602      	mov	r2, r0
 80165cc:	460b      	mov	r3, r1
 80165ce:	4620      	mov	r0, r4
 80165d0:	4629      	mov	r1, r5
 80165d2:	f7e9 fde3 	bl	800019c <__aeabi_dsub>
 80165d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80165d8:	f10b 33ff 	add.w	r3, fp, #4294967295
 80165dc:	4313      	orrs	r3, r2
 80165de:	4606      	mov	r6, r0
 80165e0:	460f      	mov	r7, r1
 80165e2:	f040 81eb 	bne.w	80169bc <__ieee754_pow+0x6c4>
 80165e6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80166a0 <__ieee754_pow+0x3a8>
 80165ea:	e9dd 4500 	ldrd	r4, r5, [sp]
 80165ee:	2400      	movs	r4, #0
 80165f0:	4622      	mov	r2, r4
 80165f2:	462b      	mov	r3, r5
 80165f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80165f8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80165fc:	f7e9 fdce 	bl	800019c <__aeabi_dsub>
 8016600:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016604:	f7e9 ff82 	bl	800050c <__aeabi_dmul>
 8016608:	e9dd 2300 	ldrd	r2, r3, [sp]
 801660c:	4680      	mov	r8, r0
 801660e:	4689      	mov	r9, r1
 8016610:	4630      	mov	r0, r6
 8016612:	4639      	mov	r1, r7
 8016614:	f7e9 ff7a 	bl	800050c <__aeabi_dmul>
 8016618:	4602      	mov	r2, r0
 801661a:	460b      	mov	r3, r1
 801661c:	4640      	mov	r0, r8
 801661e:	4649      	mov	r1, r9
 8016620:	f7e9 fdbe 	bl	80001a0 <__adddf3>
 8016624:	4622      	mov	r2, r4
 8016626:	462b      	mov	r3, r5
 8016628:	4680      	mov	r8, r0
 801662a:	4689      	mov	r9, r1
 801662c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016630:	f7e9 ff6c 	bl	800050c <__aeabi_dmul>
 8016634:	460b      	mov	r3, r1
 8016636:	4604      	mov	r4, r0
 8016638:	460d      	mov	r5, r1
 801663a:	4602      	mov	r2, r0
 801663c:	4649      	mov	r1, r9
 801663e:	4640      	mov	r0, r8
 8016640:	e9cd 4500 	strd	r4, r5, [sp]
 8016644:	f7e9 fdac 	bl	80001a0 <__adddf3>
 8016648:	4b1c      	ldr	r3, [pc, #112]	; (80166bc <__ieee754_pow+0x3c4>)
 801664a:	4299      	cmp	r1, r3
 801664c:	4606      	mov	r6, r0
 801664e:	460f      	mov	r7, r1
 8016650:	468b      	mov	fp, r1
 8016652:	f340 82f7 	ble.w	8016c44 <__ieee754_pow+0x94c>
 8016656:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801665a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801665e:	4303      	orrs	r3, r0
 8016660:	f000 81ea 	beq.w	8016a38 <__ieee754_pow+0x740>
 8016664:	a310      	add	r3, pc, #64	; (adr r3, 80166a8 <__ieee754_pow+0x3b0>)
 8016666:	e9d3 2300 	ldrd	r2, r3, [r3]
 801666a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801666e:	f7e9 ff4d 	bl	800050c <__aeabi_dmul>
 8016672:	a30d      	add	r3, pc, #52	; (adr r3, 80166a8 <__ieee754_pow+0x3b0>)
 8016674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016678:	e6d5      	b.n	8016426 <__ieee754_pow+0x12e>
 801667a:	bf00      	nop
 801667c:	f3af 8000 	nop.w
 8016680:	60000000 	.word	0x60000000
 8016684:	3ff71547 	.word	0x3ff71547
 8016688:	f85ddf44 	.word	0xf85ddf44
 801668c:	3e54ae0b 	.word	0x3e54ae0b
 8016690:	55555555 	.word	0x55555555
 8016694:	3fd55555 	.word	0x3fd55555
 8016698:	652b82fe 	.word	0x652b82fe
 801669c:	3ff71547 	.word	0x3ff71547
 80166a0:	00000000 	.word	0x00000000
 80166a4:	bff00000 	.word	0xbff00000
 80166a8:	8800759c 	.word	0x8800759c
 80166ac:	7e37e43c 	.word	0x7e37e43c
 80166b0:	3ff00000 	.word	0x3ff00000
 80166b4:	3fd00000 	.word	0x3fd00000
 80166b8:	3fe00000 	.word	0x3fe00000
 80166bc:	408fffff 	.word	0x408fffff
 80166c0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80166c4:	f04f 0200 	mov.w	r2, #0
 80166c8:	da05      	bge.n	80166d6 <__ieee754_pow+0x3de>
 80166ca:	4bd3      	ldr	r3, [pc, #844]	; (8016a18 <__ieee754_pow+0x720>)
 80166cc:	f7e9 ff1e 	bl	800050c <__aeabi_dmul>
 80166d0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80166d4:	460c      	mov	r4, r1
 80166d6:	1523      	asrs	r3, r4, #20
 80166d8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80166dc:	4413      	add	r3, r2
 80166de:	9309      	str	r3, [sp, #36]	; 0x24
 80166e0:	4bce      	ldr	r3, [pc, #824]	; (8016a1c <__ieee754_pow+0x724>)
 80166e2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80166e6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80166ea:	429c      	cmp	r4, r3
 80166ec:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80166f0:	dd08      	ble.n	8016704 <__ieee754_pow+0x40c>
 80166f2:	4bcb      	ldr	r3, [pc, #812]	; (8016a20 <__ieee754_pow+0x728>)
 80166f4:	429c      	cmp	r4, r3
 80166f6:	f340 815e 	ble.w	80169b6 <__ieee754_pow+0x6be>
 80166fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80166fc:	3301      	adds	r3, #1
 80166fe:	9309      	str	r3, [sp, #36]	; 0x24
 8016700:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8016704:	f04f 0a00 	mov.w	sl, #0
 8016708:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801670c:	930c      	str	r3, [sp, #48]	; 0x30
 801670e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016710:	4bc4      	ldr	r3, [pc, #784]	; (8016a24 <__ieee754_pow+0x72c>)
 8016712:	4413      	add	r3, r2
 8016714:	ed93 7b00 	vldr	d7, [r3]
 8016718:	4629      	mov	r1, r5
 801671a:	ec53 2b17 	vmov	r2, r3, d7
 801671e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8016722:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8016726:	f7e9 fd39 	bl	800019c <__aeabi_dsub>
 801672a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801672e:	4606      	mov	r6, r0
 8016730:	460f      	mov	r7, r1
 8016732:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016736:	f7e9 fd33 	bl	80001a0 <__adddf3>
 801673a:	4602      	mov	r2, r0
 801673c:	460b      	mov	r3, r1
 801673e:	2000      	movs	r0, #0
 8016740:	49b9      	ldr	r1, [pc, #740]	; (8016a28 <__ieee754_pow+0x730>)
 8016742:	f7ea f80d 	bl	8000760 <__aeabi_ddiv>
 8016746:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801674a:	4602      	mov	r2, r0
 801674c:	460b      	mov	r3, r1
 801674e:	4630      	mov	r0, r6
 8016750:	4639      	mov	r1, r7
 8016752:	f7e9 fedb 	bl	800050c <__aeabi_dmul>
 8016756:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801675a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801675e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8016762:	2300      	movs	r3, #0
 8016764:	9302      	str	r3, [sp, #8]
 8016766:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801676a:	106d      	asrs	r5, r5, #1
 801676c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8016770:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8016774:	2200      	movs	r2, #0
 8016776:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801677a:	4640      	mov	r0, r8
 801677c:	4649      	mov	r1, r9
 801677e:	4614      	mov	r4, r2
 8016780:	461d      	mov	r5, r3
 8016782:	f7e9 fec3 	bl	800050c <__aeabi_dmul>
 8016786:	4602      	mov	r2, r0
 8016788:	460b      	mov	r3, r1
 801678a:	4630      	mov	r0, r6
 801678c:	4639      	mov	r1, r7
 801678e:	f7e9 fd05 	bl	800019c <__aeabi_dsub>
 8016792:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016796:	4606      	mov	r6, r0
 8016798:	460f      	mov	r7, r1
 801679a:	4620      	mov	r0, r4
 801679c:	4629      	mov	r1, r5
 801679e:	f7e9 fcfd 	bl	800019c <__aeabi_dsub>
 80167a2:	4602      	mov	r2, r0
 80167a4:	460b      	mov	r3, r1
 80167a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80167aa:	f7e9 fcf7 	bl	800019c <__aeabi_dsub>
 80167ae:	4642      	mov	r2, r8
 80167b0:	464b      	mov	r3, r9
 80167b2:	f7e9 feab 	bl	800050c <__aeabi_dmul>
 80167b6:	4602      	mov	r2, r0
 80167b8:	460b      	mov	r3, r1
 80167ba:	4630      	mov	r0, r6
 80167bc:	4639      	mov	r1, r7
 80167be:	f7e9 fced 	bl	800019c <__aeabi_dsub>
 80167c2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80167c6:	f7e9 fea1 	bl	800050c <__aeabi_dmul>
 80167ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80167ce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80167d2:	4610      	mov	r0, r2
 80167d4:	4619      	mov	r1, r3
 80167d6:	f7e9 fe99 	bl	800050c <__aeabi_dmul>
 80167da:	a37b      	add	r3, pc, #492	; (adr r3, 80169c8 <__ieee754_pow+0x6d0>)
 80167dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167e0:	4604      	mov	r4, r0
 80167e2:	460d      	mov	r5, r1
 80167e4:	f7e9 fe92 	bl	800050c <__aeabi_dmul>
 80167e8:	a379      	add	r3, pc, #484	; (adr r3, 80169d0 <__ieee754_pow+0x6d8>)
 80167ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167ee:	f7e9 fcd7 	bl	80001a0 <__adddf3>
 80167f2:	4622      	mov	r2, r4
 80167f4:	462b      	mov	r3, r5
 80167f6:	f7e9 fe89 	bl	800050c <__aeabi_dmul>
 80167fa:	a377      	add	r3, pc, #476	; (adr r3, 80169d8 <__ieee754_pow+0x6e0>)
 80167fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016800:	f7e9 fcce 	bl	80001a0 <__adddf3>
 8016804:	4622      	mov	r2, r4
 8016806:	462b      	mov	r3, r5
 8016808:	f7e9 fe80 	bl	800050c <__aeabi_dmul>
 801680c:	a374      	add	r3, pc, #464	; (adr r3, 80169e0 <__ieee754_pow+0x6e8>)
 801680e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016812:	f7e9 fcc5 	bl	80001a0 <__adddf3>
 8016816:	4622      	mov	r2, r4
 8016818:	462b      	mov	r3, r5
 801681a:	f7e9 fe77 	bl	800050c <__aeabi_dmul>
 801681e:	a372      	add	r3, pc, #456	; (adr r3, 80169e8 <__ieee754_pow+0x6f0>)
 8016820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016824:	f7e9 fcbc 	bl	80001a0 <__adddf3>
 8016828:	4622      	mov	r2, r4
 801682a:	462b      	mov	r3, r5
 801682c:	f7e9 fe6e 	bl	800050c <__aeabi_dmul>
 8016830:	a36f      	add	r3, pc, #444	; (adr r3, 80169f0 <__ieee754_pow+0x6f8>)
 8016832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016836:	f7e9 fcb3 	bl	80001a0 <__adddf3>
 801683a:	4622      	mov	r2, r4
 801683c:	4606      	mov	r6, r0
 801683e:	460f      	mov	r7, r1
 8016840:	462b      	mov	r3, r5
 8016842:	4620      	mov	r0, r4
 8016844:	4629      	mov	r1, r5
 8016846:	f7e9 fe61 	bl	800050c <__aeabi_dmul>
 801684a:	4602      	mov	r2, r0
 801684c:	460b      	mov	r3, r1
 801684e:	4630      	mov	r0, r6
 8016850:	4639      	mov	r1, r7
 8016852:	f7e9 fe5b 	bl	800050c <__aeabi_dmul>
 8016856:	4642      	mov	r2, r8
 8016858:	4604      	mov	r4, r0
 801685a:	460d      	mov	r5, r1
 801685c:	464b      	mov	r3, r9
 801685e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016862:	f7e9 fc9d 	bl	80001a0 <__adddf3>
 8016866:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801686a:	f7e9 fe4f 	bl	800050c <__aeabi_dmul>
 801686e:	4622      	mov	r2, r4
 8016870:	462b      	mov	r3, r5
 8016872:	f7e9 fc95 	bl	80001a0 <__adddf3>
 8016876:	4642      	mov	r2, r8
 8016878:	4606      	mov	r6, r0
 801687a:	460f      	mov	r7, r1
 801687c:	464b      	mov	r3, r9
 801687e:	4640      	mov	r0, r8
 8016880:	4649      	mov	r1, r9
 8016882:	f7e9 fe43 	bl	800050c <__aeabi_dmul>
 8016886:	2200      	movs	r2, #0
 8016888:	4b68      	ldr	r3, [pc, #416]	; (8016a2c <__ieee754_pow+0x734>)
 801688a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801688e:	f7e9 fc87 	bl	80001a0 <__adddf3>
 8016892:	4632      	mov	r2, r6
 8016894:	463b      	mov	r3, r7
 8016896:	f7e9 fc83 	bl	80001a0 <__adddf3>
 801689a:	9802      	ldr	r0, [sp, #8]
 801689c:	460d      	mov	r5, r1
 801689e:	4604      	mov	r4, r0
 80168a0:	4602      	mov	r2, r0
 80168a2:	460b      	mov	r3, r1
 80168a4:	4640      	mov	r0, r8
 80168a6:	4649      	mov	r1, r9
 80168a8:	f7e9 fe30 	bl	800050c <__aeabi_dmul>
 80168ac:	2200      	movs	r2, #0
 80168ae:	4680      	mov	r8, r0
 80168b0:	4689      	mov	r9, r1
 80168b2:	4b5e      	ldr	r3, [pc, #376]	; (8016a2c <__ieee754_pow+0x734>)
 80168b4:	4620      	mov	r0, r4
 80168b6:	4629      	mov	r1, r5
 80168b8:	f7e9 fc70 	bl	800019c <__aeabi_dsub>
 80168bc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80168c0:	f7e9 fc6c 	bl	800019c <__aeabi_dsub>
 80168c4:	4602      	mov	r2, r0
 80168c6:	460b      	mov	r3, r1
 80168c8:	4630      	mov	r0, r6
 80168ca:	4639      	mov	r1, r7
 80168cc:	f7e9 fc66 	bl	800019c <__aeabi_dsub>
 80168d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80168d4:	f7e9 fe1a 	bl	800050c <__aeabi_dmul>
 80168d8:	4622      	mov	r2, r4
 80168da:	4606      	mov	r6, r0
 80168dc:	460f      	mov	r7, r1
 80168de:	462b      	mov	r3, r5
 80168e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80168e4:	f7e9 fe12 	bl	800050c <__aeabi_dmul>
 80168e8:	4602      	mov	r2, r0
 80168ea:	460b      	mov	r3, r1
 80168ec:	4630      	mov	r0, r6
 80168ee:	4639      	mov	r1, r7
 80168f0:	f7e9 fc56 	bl	80001a0 <__adddf3>
 80168f4:	4606      	mov	r6, r0
 80168f6:	460f      	mov	r7, r1
 80168f8:	4602      	mov	r2, r0
 80168fa:	460b      	mov	r3, r1
 80168fc:	4640      	mov	r0, r8
 80168fe:	4649      	mov	r1, r9
 8016900:	f7e9 fc4e 	bl	80001a0 <__adddf3>
 8016904:	9802      	ldr	r0, [sp, #8]
 8016906:	a33c      	add	r3, pc, #240	; (adr r3, 80169f8 <__ieee754_pow+0x700>)
 8016908:	e9d3 2300 	ldrd	r2, r3, [r3]
 801690c:	4604      	mov	r4, r0
 801690e:	460d      	mov	r5, r1
 8016910:	f7e9 fdfc 	bl	800050c <__aeabi_dmul>
 8016914:	4642      	mov	r2, r8
 8016916:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801691a:	464b      	mov	r3, r9
 801691c:	4620      	mov	r0, r4
 801691e:	4629      	mov	r1, r5
 8016920:	f7e9 fc3c 	bl	800019c <__aeabi_dsub>
 8016924:	4602      	mov	r2, r0
 8016926:	460b      	mov	r3, r1
 8016928:	4630      	mov	r0, r6
 801692a:	4639      	mov	r1, r7
 801692c:	f7e9 fc36 	bl	800019c <__aeabi_dsub>
 8016930:	a333      	add	r3, pc, #204	; (adr r3, 8016a00 <__ieee754_pow+0x708>)
 8016932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016936:	f7e9 fde9 	bl	800050c <__aeabi_dmul>
 801693a:	a333      	add	r3, pc, #204	; (adr r3, 8016a08 <__ieee754_pow+0x710>)
 801693c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016940:	4606      	mov	r6, r0
 8016942:	460f      	mov	r7, r1
 8016944:	4620      	mov	r0, r4
 8016946:	4629      	mov	r1, r5
 8016948:	f7e9 fde0 	bl	800050c <__aeabi_dmul>
 801694c:	4602      	mov	r2, r0
 801694e:	460b      	mov	r3, r1
 8016950:	4630      	mov	r0, r6
 8016952:	4639      	mov	r1, r7
 8016954:	f7e9 fc24 	bl	80001a0 <__adddf3>
 8016958:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801695a:	4b35      	ldr	r3, [pc, #212]	; (8016a30 <__ieee754_pow+0x738>)
 801695c:	4413      	add	r3, r2
 801695e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016962:	f7e9 fc1d 	bl	80001a0 <__adddf3>
 8016966:	4604      	mov	r4, r0
 8016968:	9809      	ldr	r0, [sp, #36]	; 0x24
 801696a:	460d      	mov	r5, r1
 801696c:	f7e9 fd64 	bl	8000438 <__aeabi_i2d>
 8016970:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016972:	4b30      	ldr	r3, [pc, #192]	; (8016a34 <__ieee754_pow+0x73c>)
 8016974:	4413      	add	r3, r2
 8016976:	e9d3 8900 	ldrd	r8, r9, [r3]
 801697a:	4606      	mov	r6, r0
 801697c:	460f      	mov	r7, r1
 801697e:	4622      	mov	r2, r4
 8016980:	462b      	mov	r3, r5
 8016982:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016986:	f7e9 fc0b 	bl	80001a0 <__adddf3>
 801698a:	4642      	mov	r2, r8
 801698c:	464b      	mov	r3, r9
 801698e:	f7e9 fc07 	bl	80001a0 <__adddf3>
 8016992:	4632      	mov	r2, r6
 8016994:	463b      	mov	r3, r7
 8016996:	f7e9 fc03 	bl	80001a0 <__adddf3>
 801699a:	9802      	ldr	r0, [sp, #8]
 801699c:	4632      	mov	r2, r6
 801699e:	463b      	mov	r3, r7
 80169a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80169a4:	f7e9 fbfa 	bl	800019c <__aeabi_dsub>
 80169a8:	4642      	mov	r2, r8
 80169aa:	464b      	mov	r3, r9
 80169ac:	f7e9 fbf6 	bl	800019c <__aeabi_dsub>
 80169b0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80169b4:	e607      	b.n	80165c6 <__ieee754_pow+0x2ce>
 80169b6:	f04f 0a01 	mov.w	sl, #1
 80169ba:	e6a5      	b.n	8016708 <__ieee754_pow+0x410>
 80169bc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8016a10 <__ieee754_pow+0x718>
 80169c0:	e613      	b.n	80165ea <__ieee754_pow+0x2f2>
 80169c2:	bf00      	nop
 80169c4:	f3af 8000 	nop.w
 80169c8:	4a454eef 	.word	0x4a454eef
 80169cc:	3fca7e28 	.word	0x3fca7e28
 80169d0:	93c9db65 	.word	0x93c9db65
 80169d4:	3fcd864a 	.word	0x3fcd864a
 80169d8:	a91d4101 	.word	0xa91d4101
 80169dc:	3fd17460 	.word	0x3fd17460
 80169e0:	518f264d 	.word	0x518f264d
 80169e4:	3fd55555 	.word	0x3fd55555
 80169e8:	db6fabff 	.word	0xdb6fabff
 80169ec:	3fdb6db6 	.word	0x3fdb6db6
 80169f0:	33333303 	.word	0x33333303
 80169f4:	3fe33333 	.word	0x3fe33333
 80169f8:	e0000000 	.word	0xe0000000
 80169fc:	3feec709 	.word	0x3feec709
 8016a00:	dc3a03fd 	.word	0xdc3a03fd
 8016a04:	3feec709 	.word	0x3feec709
 8016a08:	145b01f5 	.word	0x145b01f5
 8016a0c:	be3e2fe0 	.word	0xbe3e2fe0
 8016a10:	00000000 	.word	0x00000000
 8016a14:	3ff00000 	.word	0x3ff00000
 8016a18:	43400000 	.word	0x43400000
 8016a1c:	0003988e 	.word	0x0003988e
 8016a20:	000bb679 	.word	0x000bb679
 8016a24:	08018298 	.word	0x08018298
 8016a28:	3ff00000 	.word	0x3ff00000
 8016a2c:	40080000 	.word	0x40080000
 8016a30:	080182b8 	.word	0x080182b8
 8016a34:	080182a8 	.word	0x080182a8
 8016a38:	a3b4      	add	r3, pc, #720	; (adr r3, 8016d0c <__ieee754_pow+0xa14>)
 8016a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a3e:	4640      	mov	r0, r8
 8016a40:	4649      	mov	r1, r9
 8016a42:	f7e9 fbad 	bl	80001a0 <__adddf3>
 8016a46:	4622      	mov	r2, r4
 8016a48:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016a4c:	462b      	mov	r3, r5
 8016a4e:	4630      	mov	r0, r6
 8016a50:	4639      	mov	r1, r7
 8016a52:	f7e9 fba3 	bl	800019c <__aeabi_dsub>
 8016a56:	4602      	mov	r2, r0
 8016a58:	460b      	mov	r3, r1
 8016a5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016a5e:	f7e9 ffe5 	bl	8000a2c <__aeabi_dcmpgt>
 8016a62:	2800      	cmp	r0, #0
 8016a64:	f47f adfe 	bne.w	8016664 <__ieee754_pow+0x36c>
 8016a68:	4aa3      	ldr	r2, [pc, #652]	; (8016cf8 <__ieee754_pow+0xa00>)
 8016a6a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016a6e:	4293      	cmp	r3, r2
 8016a70:	f340 810a 	ble.w	8016c88 <__ieee754_pow+0x990>
 8016a74:	151b      	asrs	r3, r3, #20
 8016a76:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8016a7a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8016a7e:	fa4a f303 	asr.w	r3, sl, r3
 8016a82:	445b      	add	r3, fp
 8016a84:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8016a88:	4e9c      	ldr	r6, [pc, #624]	; (8016cfc <__ieee754_pow+0xa04>)
 8016a8a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8016a8e:	4116      	asrs	r6, r2
 8016a90:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8016a94:	2000      	movs	r0, #0
 8016a96:	ea23 0106 	bic.w	r1, r3, r6
 8016a9a:	f1c2 0214 	rsb	r2, r2, #20
 8016a9e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8016aa2:	fa4a fa02 	asr.w	sl, sl, r2
 8016aa6:	f1bb 0f00 	cmp.w	fp, #0
 8016aaa:	4602      	mov	r2, r0
 8016aac:	460b      	mov	r3, r1
 8016aae:	4620      	mov	r0, r4
 8016ab0:	4629      	mov	r1, r5
 8016ab2:	bfb8      	it	lt
 8016ab4:	f1ca 0a00 	rsblt	sl, sl, #0
 8016ab8:	f7e9 fb70 	bl	800019c <__aeabi_dsub>
 8016abc:	e9cd 0100 	strd	r0, r1, [sp]
 8016ac0:	4642      	mov	r2, r8
 8016ac2:	464b      	mov	r3, r9
 8016ac4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016ac8:	f7e9 fb6a 	bl	80001a0 <__adddf3>
 8016acc:	2000      	movs	r0, #0
 8016ace:	a378      	add	r3, pc, #480	; (adr r3, 8016cb0 <__ieee754_pow+0x9b8>)
 8016ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ad4:	4604      	mov	r4, r0
 8016ad6:	460d      	mov	r5, r1
 8016ad8:	f7e9 fd18 	bl	800050c <__aeabi_dmul>
 8016adc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016ae0:	4606      	mov	r6, r0
 8016ae2:	460f      	mov	r7, r1
 8016ae4:	4620      	mov	r0, r4
 8016ae6:	4629      	mov	r1, r5
 8016ae8:	f7e9 fb58 	bl	800019c <__aeabi_dsub>
 8016aec:	4602      	mov	r2, r0
 8016aee:	460b      	mov	r3, r1
 8016af0:	4640      	mov	r0, r8
 8016af2:	4649      	mov	r1, r9
 8016af4:	f7e9 fb52 	bl	800019c <__aeabi_dsub>
 8016af8:	a36f      	add	r3, pc, #444	; (adr r3, 8016cb8 <__ieee754_pow+0x9c0>)
 8016afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016afe:	f7e9 fd05 	bl	800050c <__aeabi_dmul>
 8016b02:	a36f      	add	r3, pc, #444	; (adr r3, 8016cc0 <__ieee754_pow+0x9c8>)
 8016b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b08:	4680      	mov	r8, r0
 8016b0a:	4689      	mov	r9, r1
 8016b0c:	4620      	mov	r0, r4
 8016b0e:	4629      	mov	r1, r5
 8016b10:	f7e9 fcfc 	bl	800050c <__aeabi_dmul>
 8016b14:	4602      	mov	r2, r0
 8016b16:	460b      	mov	r3, r1
 8016b18:	4640      	mov	r0, r8
 8016b1a:	4649      	mov	r1, r9
 8016b1c:	f7e9 fb40 	bl	80001a0 <__adddf3>
 8016b20:	4604      	mov	r4, r0
 8016b22:	460d      	mov	r5, r1
 8016b24:	4602      	mov	r2, r0
 8016b26:	460b      	mov	r3, r1
 8016b28:	4630      	mov	r0, r6
 8016b2a:	4639      	mov	r1, r7
 8016b2c:	f7e9 fb38 	bl	80001a0 <__adddf3>
 8016b30:	4632      	mov	r2, r6
 8016b32:	463b      	mov	r3, r7
 8016b34:	4680      	mov	r8, r0
 8016b36:	4689      	mov	r9, r1
 8016b38:	f7e9 fb30 	bl	800019c <__aeabi_dsub>
 8016b3c:	4602      	mov	r2, r0
 8016b3e:	460b      	mov	r3, r1
 8016b40:	4620      	mov	r0, r4
 8016b42:	4629      	mov	r1, r5
 8016b44:	f7e9 fb2a 	bl	800019c <__aeabi_dsub>
 8016b48:	4642      	mov	r2, r8
 8016b4a:	4606      	mov	r6, r0
 8016b4c:	460f      	mov	r7, r1
 8016b4e:	464b      	mov	r3, r9
 8016b50:	4640      	mov	r0, r8
 8016b52:	4649      	mov	r1, r9
 8016b54:	f7e9 fcda 	bl	800050c <__aeabi_dmul>
 8016b58:	a35b      	add	r3, pc, #364	; (adr r3, 8016cc8 <__ieee754_pow+0x9d0>)
 8016b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b5e:	4604      	mov	r4, r0
 8016b60:	460d      	mov	r5, r1
 8016b62:	f7e9 fcd3 	bl	800050c <__aeabi_dmul>
 8016b66:	a35a      	add	r3, pc, #360	; (adr r3, 8016cd0 <__ieee754_pow+0x9d8>)
 8016b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b6c:	f7e9 fb16 	bl	800019c <__aeabi_dsub>
 8016b70:	4622      	mov	r2, r4
 8016b72:	462b      	mov	r3, r5
 8016b74:	f7e9 fcca 	bl	800050c <__aeabi_dmul>
 8016b78:	a357      	add	r3, pc, #348	; (adr r3, 8016cd8 <__ieee754_pow+0x9e0>)
 8016b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b7e:	f7e9 fb0f 	bl	80001a0 <__adddf3>
 8016b82:	4622      	mov	r2, r4
 8016b84:	462b      	mov	r3, r5
 8016b86:	f7e9 fcc1 	bl	800050c <__aeabi_dmul>
 8016b8a:	a355      	add	r3, pc, #340	; (adr r3, 8016ce0 <__ieee754_pow+0x9e8>)
 8016b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b90:	f7e9 fb04 	bl	800019c <__aeabi_dsub>
 8016b94:	4622      	mov	r2, r4
 8016b96:	462b      	mov	r3, r5
 8016b98:	f7e9 fcb8 	bl	800050c <__aeabi_dmul>
 8016b9c:	a352      	add	r3, pc, #328	; (adr r3, 8016ce8 <__ieee754_pow+0x9f0>)
 8016b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ba2:	f7e9 fafd 	bl	80001a0 <__adddf3>
 8016ba6:	4622      	mov	r2, r4
 8016ba8:	462b      	mov	r3, r5
 8016baa:	f7e9 fcaf 	bl	800050c <__aeabi_dmul>
 8016bae:	4602      	mov	r2, r0
 8016bb0:	460b      	mov	r3, r1
 8016bb2:	4640      	mov	r0, r8
 8016bb4:	4649      	mov	r1, r9
 8016bb6:	f7e9 faf1 	bl	800019c <__aeabi_dsub>
 8016bba:	4604      	mov	r4, r0
 8016bbc:	460d      	mov	r5, r1
 8016bbe:	4602      	mov	r2, r0
 8016bc0:	460b      	mov	r3, r1
 8016bc2:	4640      	mov	r0, r8
 8016bc4:	4649      	mov	r1, r9
 8016bc6:	f7e9 fca1 	bl	800050c <__aeabi_dmul>
 8016bca:	2200      	movs	r2, #0
 8016bcc:	e9cd 0100 	strd	r0, r1, [sp]
 8016bd0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016bd4:	4620      	mov	r0, r4
 8016bd6:	4629      	mov	r1, r5
 8016bd8:	f7e9 fae0 	bl	800019c <__aeabi_dsub>
 8016bdc:	4602      	mov	r2, r0
 8016bde:	460b      	mov	r3, r1
 8016be0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016be4:	f7e9 fdbc 	bl	8000760 <__aeabi_ddiv>
 8016be8:	4632      	mov	r2, r6
 8016bea:	4604      	mov	r4, r0
 8016bec:	460d      	mov	r5, r1
 8016bee:	463b      	mov	r3, r7
 8016bf0:	4640      	mov	r0, r8
 8016bf2:	4649      	mov	r1, r9
 8016bf4:	f7e9 fc8a 	bl	800050c <__aeabi_dmul>
 8016bf8:	4632      	mov	r2, r6
 8016bfa:	463b      	mov	r3, r7
 8016bfc:	f7e9 fad0 	bl	80001a0 <__adddf3>
 8016c00:	4602      	mov	r2, r0
 8016c02:	460b      	mov	r3, r1
 8016c04:	4620      	mov	r0, r4
 8016c06:	4629      	mov	r1, r5
 8016c08:	f7e9 fac8 	bl	800019c <__aeabi_dsub>
 8016c0c:	4642      	mov	r2, r8
 8016c0e:	464b      	mov	r3, r9
 8016c10:	f7e9 fac4 	bl	800019c <__aeabi_dsub>
 8016c14:	4602      	mov	r2, r0
 8016c16:	460b      	mov	r3, r1
 8016c18:	2000      	movs	r0, #0
 8016c1a:	4939      	ldr	r1, [pc, #228]	; (8016d00 <__ieee754_pow+0xa08>)
 8016c1c:	f7e9 fabe 	bl	800019c <__aeabi_dsub>
 8016c20:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8016c24:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8016c28:	4602      	mov	r2, r0
 8016c2a:	460b      	mov	r3, r1
 8016c2c:	da2f      	bge.n	8016c8e <__ieee754_pow+0x996>
 8016c2e:	4650      	mov	r0, sl
 8016c30:	ec43 2b10 	vmov	d0, r2, r3
 8016c34:	f000 f9c0 	bl	8016fb8 <scalbn>
 8016c38:	ec51 0b10 	vmov	r0, r1, d0
 8016c3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016c40:	f7ff bbf1 	b.w	8016426 <__ieee754_pow+0x12e>
 8016c44:	4b2f      	ldr	r3, [pc, #188]	; (8016d04 <__ieee754_pow+0xa0c>)
 8016c46:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8016c4a:	429e      	cmp	r6, r3
 8016c4c:	f77f af0c 	ble.w	8016a68 <__ieee754_pow+0x770>
 8016c50:	4b2d      	ldr	r3, [pc, #180]	; (8016d08 <__ieee754_pow+0xa10>)
 8016c52:	440b      	add	r3, r1
 8016c54:	4303      	orrs	r3, r0
 8016c56:	d00b      	beq.n	8016c70 <__ieee754_pow+0x978>
 8016c58:	a325      	add	r3, pc, #148	; (adr r3, 8016cf0 <__ieee754_pow+0x9f8>)
 8016c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016c62:	f7e9 fc53 	bl	800050c <__aeabi_dmul>
 8016c66:	a322      	add	r3, pc, #136	; (adr r3, 8016cf0 <__ieee754_pow+0x9f8>)
 8016c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c6c:	f7ff bbdb 	b.w	8016426 <__ieee754_pow+0x12e>
 8016c70:	4622      	mov	r2, r4
 8016c72:	462b      	mov	r3, r5
 8016c74:	f7e9 fa92 	bl	800019c <__aeabi_dsub>
 8016c78:	4642      	mov	r2, r8
 8016c7a:	464b      	mov	r3, r9
 8016c7c:	f7e9 fecc 	bl	8000a18 <__aeabi_dcmpge>
 8016c80:	2800      	cmp	r0, #0
 8016c82:	f43f aef1 	beq.w	8016a68 <__ieee754_pow+0x770>
 8016c86:	e7e7      	b.n	8016c58 <__ieee754_pow+0x960>
 8016c88:	f04f 0a00 	mov.w	sl, #0
 8016c8c:	e718      	b.n	8016ac0 <__ieee754_pow+0x7c8>
 8016c8e:	4621      	mov	r1, r4
 8016c90:	e7d4      	b.n	8016c3c <__ieee754_pow+0x944>
 8016c92:	2000      	movs	r0, #0
 8016c94:	491a      	ldr	r1, [pc, #104]	; (8016d00 <__ieee754_pow+0xa08>)
 8016c96:	f7ff bb8f 	b.w	80163b8 <__ieee754_pow+0xc0>
 8016c9a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016c9e:	f7ff bb8b 	b.w	80163b8 <__ieee754_pow+0xc0>
 8016ca2:	4630      	mov	r0, r6
 8016ca4:	4639      	mov	r1, r7
 8016ca6:	f7ff bb87 	b.w	80163b8 <__ieee754_pow+0xc0>
 8016caa:	4693      	mov	fp, r2
 8016cac:	f7ff bb98 	b.w	80163e0 <__ieee754_pow+0xe8>
 8016cb0:	00000000 	.word	0x00000000
 8016cb4:	3fe62e43 	.word	0x3fe62e43
 8016cb8:	fefa39ef 	.word	0xfefa39ef
 8016cbc:	3fe62e42 	.word	0x3fe62e42
 8016cc0:	0ca86c39 	.word	0x0ca86c39
 8016cc4:	be205c61 	.word	0xbe205c61
 8016cc8:	72bea4d0 	.word	0x72bea4d0
 8016ccc:	3e663769 	.word	0x3e663769
 8016cd0:	c5d26bf1 	.word	0xc5d26bf1
 8016cd4:	3ebbbd41 	.word	0x3ebbbd41
 8016cd8:	af25de2c 	.word	0xaf25de2c
 8016cdc:	3f11566a 	.word	0x3f11566a
 8016ce0:	16bebd93 	.word	0x16bebd93
 8016ce4:	3f66c16c 	.word	0x3f66c16c
 8016ce8:	5555553e 	.word	0x5555553e
 8016cec:	3fc55555 	.word	0x3fc55555
 8016cf0:	c2f8f359 	.word	0xc2f8f359
 8016cf4:	01a56e1f 	.word	0x01a56e1f
 8016cf8:	3fe00000 	.word	0x3fe00000
 8016cfc:	000fffff 	.word	0x000fffff
 8016d00:	3ff00000 	.word	0x3ff00000
 8016d04:	4090cbff 	.word	0x4090cbff
 8016d08:	3f6f3400 	.word	0x3f6f3400
 8016d0c:	652b82fe 	.word	0x652b82fe
 8016d10:	3c971547 	.word	0x3c971547

08016d14 <__ieee754_sqrt>:
 8016d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d18:	4955      	ldr	r1, [pc, #340]	; (8016e70 <__ieee754_sqrt+0x15c>)
 8016d1a:	ec55 4b10 	vmov	r4, r5, d0
 8016d1e:	43a9      	bics	r1, r5
 8016d20:	462b      	mov	r3, r5
 8016d22:	462a      	mov	r2, r5
 8016d24:	d112      	bne.n	8016d4c <__ieee754_sqrt+0x38>
 8016d26:	ee10 2a10 	vmov	r2, s0
 8016d2a:	ee10 0a10 	vmov	r0, s0
 8016d2e:	4629      	mov	r1, r5
 8016d30:	f7e9 fbec 	bl	800050c <__aeabi_dmul>
 8016d34:	4602      	mov	r2, r0
 8016d36:	460b      	mov	r3, r1
 8016d38:	4620      	mov	r0, r4
 8016d3a:	4629      	mov	r1, r5
 8016d3c:	f7e9 fa30 	bl	80001a0 <__adddf3>
 8016d40:	4604      	mov	r4, r0
 8016d42:	460d      	mov	r5, r1
 8016d44:	ec45 4b10 	vmov	d0, r4, r5
 8016d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d4c:	2d00      	cmp	r5, #0
 8016d4e:	ee10 0a10 	vmov	r0, s0
 8016d52:	4621      	mov	r1, r4
 8016d54:	dc0f      	bgt.n	8016d76 <__ieee754_sqrt+0x62>
 8016d56:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8016d5a:	4330      	orrs	r0, r6
 8016d5c:	d0f2      	beq.n	8016d44 <__ieee754_sqrt+0x30>
 8016d5e:	b155      	cbz	r5, 8016d76 <__ieee754_sqrt+0x62>
 8016d60:	ee10 2a10 	vmov	r2, s0
 8016d64:	4620      	mov	r0, r4
 8016d66:	4629      	mov	r1, r5
 8016d68:	f7e9 fa18 	bl	800019c <__aeabi_dsub>
 8016d6c:	4602      	mov	r2, r0
 8016d6e:	460b      	mov	r3, r1
 8016d70:	f7e9 fcf6 	bl	8000760 <__aeabi_ddiv>
 8016d74:	e7e4      	b.n	8016d40 <__ieee754_sqrt+0x2c>
 8016d76:	151b      	asrs	r3, r3, #20
 8016d78:	d073      	beq.n	8016e62 <__ieee754_sqrt+0x14e>
 8016d7a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8016d7e:	07dd      	lsls	r5, r3, #31
 8016d80:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8016d84:	bf48      	it	mi
 8016d86:	0fc8      	lsrmi	r0, r1, #31
 8016d88:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8016d8c:	bf44      	itt	mi
 8016d8e:	0049      	lslmi	r1, r1, #1
 8016d90:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8016d94:	2500      	movs	r5, #0
 8016d96:	1058      	asrs	r0, r3, #1
 8016d98:	0fcb      	lsrs	r3, r1, #31
 8016d9a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8016d9e:	0049      	lsls	r1, r1, #1
 8016da0:	2316      	movs	r3, #22
 8016da2:	462c      	mov	r4, r5
 8016da4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8016da8:	19a7      	adds	r7, r4, r6
 8016daa:	4297      	cmp	r7, r2
 8016dac:	bfde      	ittt	le
 8016dae:	19bc      	addle	r4, r7, r6
 8016db0:	1bd2      	suble	r2, r2, r7
 8016db2:	19ad      	addle	r5, r5, r6
 8016db4:	0fcf      	lsrs	r7, r1, #31
 8016db6:	3b01      	subs	r3, #1
 8016db8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8016dbc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8016dc0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8016dc4:	d1f0      	bne.n	8016da8 <__ieee754_sqrt+0x94>
 8016dc6:	f04f 0c20 	mov.w	ip, #32
 8016dca:	469e      	mov	lr, r3
 8016dcc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8016dd0:	42a2      	cmp	r2, r4
 8016dd2:	eb06 070e 	add.w	r7, r6, lr
 8016dd6:	dc02      	bgt.n	8016dde <__ieee754_sqrt+0xca>
 8016dd8:	d112      	bne.n	8016e00 <__ieee754_sqrt+0xec>
 8016dda:	428f      	cmp	r7, r1
 8016ddc:	d810      	bhi.n	8016e00 <__ieee754_sqrt+0xec>
 8016dde:	2f00      	cmp	r7, #0
 8016de0:	eb07 0e06 	add.w	lr, r7, r6
 8016de4:	da42      	bge.n	8016e6c <__ieee754_sqrt+0x158>
 8016de6:	f1be 0f00 	cmp.w	lr, #0
 8016dea:	db3f      	blt.n	8016e6c <__ieee754_sqrt+0x158>
 8016dec:	f104 0801 	add.w	r8, r4, #1
 8016df0:	1b12      	subs	r2, r2, r4
 8016df2:	428f      	cmp	r7, r1
 8016df4:	bf88      	it	hi
 8016df6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8016dfa:	1bc9      	subs	r1, r1, r7
 8016dfc:	4433      	add	r3, r6
 8016dfe:	4644      	mov	r4, r8
 8016e00:	0052      	lsls	r2, r2, #1
 8016e02:	f1bc 0c01 	subs.w	ip, ip, #1
 8016e06:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8016e0a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8016e0e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8016e12:	d1dd      	bne.n	8016dd0 <__ieee754_sqrt+0xbc>
 8016e14:	430a      	orrs	r2, r1
 8016e16:	d006      	beq.n	8016e26 <__ieee754_sqrt+0x112>
 8016e18:	1c5c      	adds	r4, r3, #1
 8016e1a:	bf13      	iteet	ne
 8016e1c:	3301      	addne	r3, #1
 8016e1e:	3501      	addeq	r5, #1
 8016e20:	4663      	moveq	r3, ip
 8016e22:	f023 0301 	bicne.w	r3, r3, #1
 8016e26:	106a      	asrs	r2, r5, #1
 8016e28:	085b      	lsrs	r3, r3, #1
 8016e2a:	07e9      	lsls	r1, r5, #31
 8016e2c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8016e30:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8016e34:	bf48      	it	mi
 8016e36:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8016e3a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8016e3e:	461c      	mov	r4, r3
 8016e40:	e780      	b.n	8016d44 <__ieee754_sqrt+0x30>
 8016e42:	0aca      	lsrs	r2, r1, #11
 8016e44:	3815      	subs	r0, #21
 8016e46:	0549      	lsls	r1, r1, #21
 8016e48:	2a00      	cmp	r2, #0
 8016e4a:	d0fa      	beq.n	8016e42 <__ieee754_sqrt+0x12e>
 8016e4c:	02d6      	lsls	r6, r2, #11
 8016e4e:	d50a      	bpl.n	8016e66 <__ieee754_sqrt+0x152>
 8016e50:	f1c3 0420 	rsb	r4, r3, #32
 8016e54:	fa21 f404 	lsr.w	r4, r1, r4
 8016e58:	1e5d      	subs	r5, r3, #1
 8016e5a:	4099      	lsls	r1, r3
 8016e5c:	4322      	orrs	r2, r4
 8016e5e:	1b43      	subs	r3, r0, r5
 8016e60:	e78b      	b.n	8016d7a <__ieee754_sqrt+0x66>
 8016e62:	4618      	mov	r0, r3
 8016e64:	e7f0      	b.n	8016e48 <__ieee754_sqrt+0x134>
 8016e66:	0052      	lsls	r2, r2, #1
 8016e68:	3301      	adds	r3, #1
 8016e6a:	e7ef      	b.n	8016e4c <__ieee754_sqrt+0x138>
 8016e6c:	46a0      	mov	r8, r4
 8016e6e:	e7bf      	b.n	8016df0 <__ieee754_sqrt+0xdc>
 8016e70:	7ff00000 	.word	0x7ff00000

08016e74 <__ieee754_sqrtf>:
 8016e74:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8016e78:	4770      	bx	lr

08016e7a <fabs>:
 8016e7a:	ec51 0b10 	vmov	r0, r1, d0
 8016e7e:	ee10 2a10 	vmov	r2, s0
 8016e82:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016e86:	ec43 2b10 	vmov	d0, r2, r3
 8016e8a:	4770      	bx	lr

08016e8c <finite>:
 8016e8c:	ee10 3a90 	vmov	r3, s1
 8016e90:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8016e94:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8016e98:	0fc0      	lsrs	r0, r0, #31
 8016e9a:	4770      	bx	lr

08016e9c <matherr>:
 8016e9c:	2000      	movs	r0, #0
 8016e9e:	4770      	bx	lr

08016ea0 <nan>:
 8016ea0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8016ea8 <nan+0x8>
 8016ea4:	4770      	bx	lr
 8016ea6:	bf00      	nop
 8016ea8:	00000000 	.word	0x00000000
 8016eac:	7ff80000 	.word	0x7ff80000

08016eb0 <rint>:
 8016eb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016eb2:	ec51 0b10 	vmov	r0, r1, d0
 8016eb6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8016eba:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8016ebe:	2e13      	cmp	r6, #19
 8016ec0:	460b      	mov	r3, r1
 8016ec2:	ee10 4a10 	vmov	r4, s0
 8016ec6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8016eca:	dc56      	bgt.n	8016f7a <rint+0xca>
 8016ecc:	2e00      	cmp	r6, #0
 8016ece:	da2b      	bge.n	8016f28 <rint+0x78>
 8016ed0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8016ed4:	4302      	orrs	r2, r0
 8016ed6:	d023      	beq.n	8016f20 <rint+0x70>
 8016ed8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8016edc:	4302      	orrs	r2, r0
 8016ede:	4254      	negs	r4, r2
 8016ee0:	4314      	orrs	r4, r2
 8016ee2:	0c4b      	lsrs	r3, r1, #17
 8016ee4:	0b24      	lsrs	r4, r4, #12
 8016ee6:	045b      	lsls	r3, r3, #17
 8016ee8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8016eec:	ea44 0103 	orr.w	r1, r4, r3
 8016ef0:	460b      	mov	r3, r1
 8016ef2:	492f      	ldr	r1, [pc, #188]	; (8016fb0 <rint+0x100>)
 8016ef4:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8016ef8:	e9d1 6700 	ldrd	r6, r7, [r1]
 8016efc:	4602      	mov	r2, r0
 8016efe:	4639      	mov	r1, r7
 8016f00:	4630      	mov	r0, r6
 8016f02:	f7e9 f94d 	bl	80001a0 <__adddf3>
 8016f06:	e9cd 0100 	strd	r0, r1, [sp]
 8016f0a:	463b      	mov	r3, r7
 8016f0c:	4632      	mov	r2, r6
 8016f0e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016f12:	f7e9 f943 	bl	800019c <__aeabi_dsub>
 8016f16:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016f1a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8016f1e:	4639      	mov	r1, r7
 8016f20:	ec41 0b10 	vmov	d0, r0, r1
 8016f24:	b003      	add	sp, #12
 8016f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016f28:	4a22      	ldr	r2, [pc, #136]	; (8016fb4 <rint+0x104>)
 8016f2a:	4132      	asrs	r2, r6
 8016f2c:	ea01 0702 	and.w	r7, r1, r2
 8016f30:	4307      	orrs	r7, r0
 8016f32:	d0f5      	beq.n	8016f20 <rint+0x70>
 8016f34:	0852      	lsrs	r2, r2, #1
 8016f36:	4011      	ands	r1, r2
 8016f38:	430c      	orrs	r4, r1
 8016f3a:	d00b      	beq.n	8016f54 <rint+0xa4>
 8016f3c:	ea23 0202 	bic.w	r2, r3, r2
 8016f40:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8016f44:	2e13      	cmp	r6, #19
 8016f46:	fa43 f306 	asr.w	r3, r3, r6
 8016f4a:	bf0c      	ite	eq
 8016f4c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8016f50:	2400      	movne	r4, #0
 8016f52:	4313      	orrs	r3, r2
 8016f54:	4916      	ldr	r1, [pc, #88]	; (8016fb0 <rint+0x100>)
 8016f56:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8016f5a:	4622      	mov	r2, r4
 8016f5c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8016f60:	4620      	mov	r0, r4
 8016f62:	4629      	mov	r1, r5
 8016f64:	f7e9 f91c 	bl	80001a0 <__adddf3>
 8016f68:	e9cd 0100 	strd	r0, r1, [sp]
 8016f6c:	4622      	mov	r2, r4
 8016f6e:	462b      	mov	r3, r5
 8016f70:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016f74:	f7e9 f912 	bl	800019c <__aeabi_dsub>
 8016f78:	e7d2      	b.n	8016f20 <rint+0x70>
 8016f7a:	2e33      	cmp	r6, #51	; 0x33
 8016f7c:	dd07      	ble.n	8016f8e <rint+0xde>
 8016f7e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8016f82:	d1cd      	bne.n	8016f20 <rint+0x70>
 8016f84:	ee10 2a10 	vmov	r2, s0
 8016f88:	f7e9 f90a 	bl	80001a0 <__adddf3>
 8016f8c:	e7c8      	b.n	8016f20 <rint+0x70>
 8016f8e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8016f92:	f04f 32ff 	mov.w	r2, #4294967295
 8016f96:	40f2      	lsrs	r2, r6
 8016f98:	4210      	tst	r0, r2
 8016f9a:	d0c1      	beq.n	8016f20 <rint+0x70>
 8016f9c:	0852      	lsrs	r2, r2, #1
 8016f9e:	4210      	tst	r0, r2
 8016fa0:	bf1f      	itttt	ne
 8016fa2:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8016fa6:	ea20 0202 	bicne.w	r2, r0, r2
 8016faa:	4134      	asrne	r4, r6
 8016fac:	4314      	orrne	r4, r2
 8016fae:	e7d1      	b.n	8016f54 <rint+0xa4>
 8016fb0:	080182c8 	.word	0x080182c8
 8016fb4:	000fffff 	.word	0x000fffff

08016fb8 <scalbn>:
 8016fb8:	b570      	push	{r4, r5, r6, lr}
 8016fba:	ec55 4b10 	vmov	r4, r5, d0
 8016fbe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8016fc2:	4606      	mov	r6, r0
 8016fc4:	462b      	mov	r3, r5
 8016fc6:	b9aa      	cbnz	r2, 8016ff4 <scalbn+0x3c>
 8016fc8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8016fcc:	4323      	orrs	r3, r4
 8016fce:	d03b      	beq.n	8017048 <scalbn+0x90>
 8016fd0:	4b31      	ldr	r3, [pc, #196]	; (8017098 <scalbn+0xe0>)
 8016fd2:	4629      	mov	r1, r5
 8016fd4:	2200      	movs	r2, #0
 8016fd6:	ee10 0a10 	vmov	r0, s0
 8016fda:	f7e9 fa97 	bl	800050c <__aeabi_dmul>
 8016fde:	4b2f      	ldr	r3, [pc, #188]	; (801709c <scalbn+0xe4>)
 8016fe0:	429e      	cmp	r6, r3
 8016fe2:	4604      	mov	r4, r0
 8016fe4:	460d      	mov	r5, r1
 8016fe6:	da12      	bge.n	801700e <scalbn+0x56>
 8016fe8:	a327      	add	r3, pc, #156	; (adr r3, 8017088 <scalbn+0xd0>)
 8016fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fee:	f7e9 fa8d 	bl	800050c <__aeabi_dmul>
 8016ff2:	e009      	b.n	8017008 <scalbn+0x50>
 8016ff4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8016ff8:	428a      	cmp	r2, r1
 8016ffa:	d10c      	bne.n	8017016 <scalbn+0x5e>
 8016ffc:	ee10 2a10 	vmov	r2, s0
 8017000:	4620      	mov	r0, r4
 8017002:	4629      	mov	r1, r5
 8017004:	f7e9 f8cc 	bl	80001a0 <__adddf3>
 8017008:	4604      	mov	r4, r0
 801700a:	460d      	mov	r5, r1
 801700c:	e01c      	b.n	8017048 <scalbn+0x90>
 801700e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8017012:	460b      	mov	r3, r1
 8017014:	3a36      	subs	r2, #54	; 0x36
 8017016:	4432      	add	r2, r6
 8017018:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801701c:	428a      	cmp	r2, r1
 801701e:	dd0b      	ble.n	8017038 <scalbn+0x80>
 8017020:	ec45 4b11 	vmov	d1, r4, r5
 8017024:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8017090 <scalbn+0xd8>
 8017028:	f000 f83c 	bl	80170a4 <copysign>
 801702c:	a318      	add	r3, pc, #96	; (adr r3, 8017090 <scalbn+0xd8>)
 801702e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017032:	ec51 0b10 	vmov	r0, r1, d0
 8017036:	e7da      	b.n	8016fee <scalbn+0x36>
 8017038:	2a00      	cmp	r2, #0
 801703a:	dd08      	ble.n	801704e <scalbn+0x96>
 801703c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017040:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8017044:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8017048:	ec45 4b10 	vmov	d0, r4, r5
 801704c:	bd70      	pop	{r4, r5, r6, pc}
 801704e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8017052:	da0d      	bge.n	8017070 <scalbn+0xb8>
 8017054:	f24c 3350 	movw	r3, #50000	; 0xc350
 8017058:	429e      	cmp	r6, r3
 801705a:	ec45 4b11 	vmov	d1, r4, r5
 801705e:	dce1      	bgt.n	8017024 <scalbn+0x6c>
 8017060:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8017088 <scalbn+0xd0>
 8017064:	f000 f81e 	bl	80170a4 <copysign>
 8017068:	a307      	add	r3, pc, #28	; (adr r3, 8017088 <scalbn+0xd0>)
 801706a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801706e:	e7e0      	b.n	8017032 <scalbn+0x7a>
 8017070:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017074:	3236      	adds	r2, #54	; 0x36
 8017076:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801707a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801707e:	4620      	mov	r0, r4
 8017080:	4629      	mov	r1, r5
 8017082:	2200      	movs	r2, #0
 8017084:	4b06      	ldr	r3, [pc, #24]	; (80170a0 <scalbn+0xe8>)
 8017086:	e7b2      	b.n	8016fee <scalbn+0x36>
 8017088:	c2f8f359 	.word	0xc2f8f359
 801708c:	01a56e1f 	.word	0x01a56e1f
 8017090:	8800759c 	.word	0x8800759c
 8017094:	7e37e43c 	.word	0x7e37e43c
 8017098:	43500000 	.word	0x43500000
 801709c:	ffff3cb0 	.word	0xffff3cb0
 80170a0:	3c900000 	.word	0x3c900000

080170a4 <copysign>:
 80170a4:	ec51 0b10 	vmov	r0, r1, d0
 80170a8:	ee11 0a90 	vmov	r0, s3
 80170ac:	ee10 2a10 	vmov	r2, s0
 80170b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80170b4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80170b8:	ea41 0300 	orr.w	r3, r1, r0
 80170bc:	ec43 2b10 	vmov	d0, r2, r3
 80170c0:	4770      	bx	lr
	...

080170c4 <_init>:
 80170c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80170c6:	bf00      	nop
 80170c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80170ca:	bc08      	pop	{r3}
 80170cc:	469e      	mov	lr, r3
 80170ce:	4770      	bx	lr

080170d0 <_fini>:
 80170d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80170d2:	bf00      	nop
 80170d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80170d6:	bc08      	pop	{r3}
 80170d8:	469e      	mov	lr, r3
 80170da:	4770      	bx	lr
