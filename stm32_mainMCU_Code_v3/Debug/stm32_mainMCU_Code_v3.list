
stm32_mainMCU_Code_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016f14  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011d0  08017058  08017058  00027058  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08018228  08018228  00028228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08018230  08018230  00028230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08018234  08018234  00028234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000015c  20000004  08018238  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  20000160  08018394  00030160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200001fc  0801842d  000301fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00028458  20000210  0801843e  00030210  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20028668  0801843e  00038668  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003020d  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000024  20030000  20030000  00040000  2**2
                  ALLOC
 13 MB_MEM1       000000a0  20030024  20030024  00040000  2**2
                  ALLOC
 14 MB_MEM2       00000a97  200300c4  200300c4  00040000  2**2
                  ALLOC
 15 .debug_info   00064f32  00000000  00000000  0003023d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 0000b2a7  00000000  00000000  0009516f  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 00003b78  00000000  00000000  000a0418  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00003660  00000000  00000000  000a3f90  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   0002705c  00000000  00000000  000a75f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    000186dc  00000000  00000000  000ce64c  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      000000f0  00000000  00000000  000e6d28  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000f444  00000000  00000000  000e6e18  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_loc    0000131b  00000000  00000000  000f625c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000210 	.word	0x20000210
 800015c:	00000000 	.word	0x00000000
 8000160:	0801703c 	.word	0x0801703c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000214 	.word	0x20000214
 800017c:	0801703c 	.word	0x0801703c

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <__aeabi_drsub>:
 8000194:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000198:	e002      	b.n	80001a0 <__adddf3>
 800019a:	bf00      	nop

0800019c <__aeabi_dsub>:
 800019c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001a0 <__adddf3>:
 80001a0:	b530      	push	{r4, r5, lr}
 80001a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001aa:	ea94 0f05 	teq	r4, r5
 80001ae:	bf08      	it	eq
 80001b0:	ea90 0f02 	teqeq	r0, r2
 80001b4:	bf1f      	itttt	ne
 80001b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c6:	f000 80e2 	beq.w	800038e <__adddf3+0x1ee>
 80001ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001d2:	bfb8      	it	lt
 80001d4:	426d      	neglt	r5, r5
 80001d6:	dd0c      	ble.n	80001f2 <__adddf3+0x52>
 80001d8:	442c      	add	r4, r5
 80001da:	ea80 0202 	eor.w	r2, r0, r2
 80001de:	ea81 0303 	eor.w	r3, r1, r3
 80001e2:	ea82 0000 	eor.w	r0, r2, r0
 80001e6:	ea83 0101 	eor.w	r1, r3, r1
 80001ea:	ea80 0202 	eor.w	r2, r0, r2
 80001ee:	ea81 0303 	eor.w	r3, r1, r3
 80001f2:	2d36      	cmp	r5, #54	; 0x36
 80001f4:	bf88      	it	hi
 80001f6:	bd30      	pophi	{r4, r5, pc}
 80001f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000200:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000204:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x70>
 800020a:	4240      	negs	r0, r0
 800020c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000210:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000214:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000218:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800021c:	d002      	beq.n	8000224 <__adddf3+0x84>
 800021e:	4252      	negs	r2, r2
 8000220:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000224:	ea94 0f05 	teq	r4, r5
 8000228:	f000 80a7 	beq.w	800037a <__adddf3+0x1da>
 800022c:	f1a4 0401 	sub.w	r4, r4, #1
 8000230:	f1d5 0e20 	rsbs	lr, r5, #32
 8000234:	db0d      	blt.n	8000252 <__adddf3+0xb2>
 8000236:	fa02 fc0e 	lsl.w	ip, r2, lr
 800023a:	fa22 f205 	lsr.w	r2, r2, r5
 800023e:	1880      	adds	r0, r0, r2
 8000240:	f141 0100 	adc.w	r1, r1, #0
 8000244:	fa03 f20e 	lsl.w	r2, r3, lr
 8000248:	1880      	adds	r0, r0, r2
 800024a:	fa43 f305 	asr.w	r3, r3, r5
 800024e:	4159      	adcs	r1, r3
 8000250:	e00e      	b.n	8000270 <__adddf3+0xd0>
 8000252:	f1a5 0520 	sub.w	r5, r5, #32
 8000256:	f10e 0e20 	add.w	lr, lr, #32
 800025a:	2a01      	cmp	r2, #1
 800025c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000260:	bf28      	it	cs
 8000262:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000266:	fa43 f305 	asr.w	r3, r3, r5
 800026a:	18c0      	adds	r0, r0, r3
 800026c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000270:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000274:	d507      	bpl.n	8000286 <__adddf3+0xe6>
 8000276:	f04f 0e00 	mov.w	lr, #0
 800027a:	f1dc 0c00 	rsbs	ip, ip, #0
 800027e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000282:	eb6e 0101 	sbc.w	r1, lr, r1
 8000286:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800028a:	d31b      	bcc.n	80002c4 <__adddf3+0x124>
 800028c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000290:	d30c      	bcc.n	80002ac <__adddf3+0x10c>
 8000292:	0849      	lsrs	r1, r1, #1
 8000294:	ea5f 0030 	movs.w	r0, r0, rrx
 8000298:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800029c:	f104 0401 	add.w	r4, r4, #1
 80002a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a8:	f080 809a 	bcs.w	80003e0 <__adddf3+0x240>
 80002ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002b0:	bf08      	it	eq
 80002b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b6:	f150 0000 	adcs.w	r0, r0, #0
 80002ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002be:	ea41 0105 	orr.w	r1, r1, r5
 80002c2:	bd30      	pop	{r4, r5, pc}
 80002c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c8:	4140      	adcs	r0, r0
 80002ca:	eb41 0101 	adc.w	r1, r1, r1
 80002ce:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002d2:	f1a4 0401 	sub.w	r4, r4, #1
 80002d6:	d1e9      	bne.n	80002ac <__adddf3+0x10c>
 80002d8:	f091 0f00 	teq	r1, #0
 80002dc:	bf04      	itt	eq
 80002de:	4601      	moveq	r1, r0
 80002e0:	2000      	moveq	r0, #0
 80002e2:	fab1 f381 	clz	r3, r1
 80002e6:	bf08      	it	eq
 80002e8:	3320      	addeq	r3, #32
 80002ea:	f1a3 030b 	sub.w	r3, r3, #11
 80002ee:	f1b3 0220 	subs.w	r2, r3, #32
 80002f2:	da0c      	bge.n	800030e <__adddf3+0x16e>
 80002f4:	320c      	adds	r2, #12
 80002f6:	dd08      	ble.n	800030a <__adddf3+0x16a>
 80002f8:	f102 0c14 	add.w	ip, r2, #20
 80002fc:	f1c2 020c 	rsb	r2, r2, #12
 8000300:	fa01 f00c 	lsl.w	r0, r1, ip
 8000304:	fa21 f102 	lsr.w	r1, r1, r2
 8000308:	e00c      	b.n	8000324 <__adddf3+0x184>
 800030a:	f102 0214 	add.w	r2, r2, #20
 800030e:	bfd8      	it	le
 8000310:	f1c2 0c20 	rsble	ip, r2, #32
 8000314:	fa01 f102 	lsl.w	r1, r1, r2
 8000318:	fa20 fc0c 	lsr.w	ip, r0, ip
 800031c:	bfdc      	itt	le
 800031e:	ea41 010c 	orrle.w	r1, r1, ip
 8000322:	4090      	lslle	r0, r2
 8000324:	1ae4      	subs	r4, r4, r3
 8000326:	bfa2      	ittt	ge
 8000328:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800032c:	4329      	orrge	r1, r5
 800032e:	bd30      	popge	{r4, r5, pc}
 8000330:	ea6f 0404 	mvn.w	r4, r4
 8000334:	3c1f      	subs	r4, #31
 8000336:	da1c      	bge.n	8000372 <__adddf3+0x1d2>
 8000338:	340c      	adds	r4, #12
 800033a:	dc0e      	bgt.n	800035a <__adddf3+0x1ba>
 800033c:	f104 0414 	add.w	r4, r4, #20
 8000340:	f1c4 0220 	rsb	r2, r4, #32
 8000344:	fa20 f004 	lsr.w	r0, r0, r4
 8000348:	fa01 f302 	lsl.w	r3, r1, r2
 800034c:	ea40 0003 	orr.w	r0, r0, r3
 8000350:	fa21 f304 	lsr.w	r3, r1, r4
 8000354:	ea45 0103 	orr.w	r1, r5, r3
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f1c4 040c 	rsb	r4, r4, #12
 800035e:	f1c4 0220 	rsb	r2, r4, #32
 8000362:	fa20 f002 	lsr.w	r0, r0, r2
 8000366:	fa01 f304 	lsl.w	r3, r1, r4
 800036a:	ea40 0003 	orr.w	r0, r0, r3
 800036e:	4629      	mov	r1, r5
 8000370:	bd30      	pop	{r4, r5, pc}
 8000372:	fa21 f004 	lsr.w	r0, r1, r4
 8000376:	4629      	mov	r1, r5
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	f094 0f00 	teq	r4, #0
 800037e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000382:	bf06      	itte	eq
 8000384:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000388:	3401      	addeq	r4, #1
 800038a:	3d01      	subne	r5, #1
 800038c:	e74e      	b.n	800022c <__adddf3+0x8c>
 800038e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000392:	bf18      	it	ne
 8000394:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000398:	d029      	beq.n	80003ee <__adddf3+0x24e>
 800039a:	ea94 0f05 	teq	r4, r5
 800039e:	bf08      	it	eq
 80003a0:	ea90 0f02 	teqeq	r0, r2
 80003a4:	d005      	beq.n	80003b2 <__adddf3+0x212>
 80003a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003aa:	bf04      	itt	eq
 80003ac:	4619      	moveq	r1, r3
 80003ae:	4610      	moveq	r0, r2
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	ea91 0f03 	teq	r1, r3
 80003b6:	bf1e      	ittt	ne
 80003b8:	2100      	movne	r1, #0
 80003ba:	2000      	movne	r0, #0
 80003bc:	bd30      	popne	{r4, r5, pc}
 80003be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003c2:	d105      	bne.n	80003d0 <__adddf3+0x230>
 80003c4:	0040      	lsls	r0, r0, #1
 80003c6:	4149      	adcs	r1, r1
 80003c8:	bf28      	it	cs
 80003ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d4:	bf3c      	itt	cc
 80003d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003da:	bd30      	popcc	{r4, r5, pc}
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e8:	f04f 0000 	mov.w	r0, #0
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003f2:	bf1a      	itte	ne
 80003f4:	4619      	movne	r1, r3
 80003f6:	4610      	movne	r0, r2
 80003f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003fc:	bf1c      	itt	ne
 80003fe:	460b      	movne	r3, r1
 8000400:	4602      	movne	r2, r0
 8000402:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000406:	bf06      	itte	eq
 8000408:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800040c:	ea91 0f03 	teqeq	r1, r3
 8000410:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	bf00      	nop

08000418 <__aeabi_ui2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f04f 0500 	mov.w	r5, #0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e750      	b.n	80002d8 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_i2d>:
 8000438:	f090 0f00 	teq	r0, #0
 800043c:	bf04      	itt	eq
 800043e:	2100      	moveq	r1, #0
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000448:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800044c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000450:	bf48      	it	mi
 8000452:	4240      	negmi	r0, r0
 8000454:	f04f 0100 	mov.w	r1, #0
 8000458:	e73e      	b.n	80002d8 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_f2d>:
 800045c:	0042      	lsls	r2, r0, #1
 800045e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000462:	ea4f 0131 	mov.w	r1, r1, rrx
 8000466:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800046a:	bf1f      	itttt	ne
 800046c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000470:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000474:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000478:	4770      	bxne	lr
 800047a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047e:	bf08      	it	eq
 8000480:	4770      	bxeq	lr
 8000482:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000486:	bf04      	itt	eq
 8000488:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000494:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000498:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800049c:	e71c      	b.n	80002d8 <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_ul2d>:
 80004a0:	ea50 0201 	orrs.w	r2, r0, r1
 80004a4:	bf08      	it	eq
 80004a6:	4770      	bxeq	lr
 80004a8:	b530      	push	{r4, r5, lr}
 80004aa:	f04f 0500 	mov.w	r5, #0
 80004ae:	e00a      	b.n	80004c6 <__aeabi_l2d+0x16>

080004b0 <__aeabi_l2d>:
 80004b0:	ea50 0201 	orrs.w	r2, r0, r1
 80004b4:	bf08      	it	eq
 80004b6:	4770      	bxeq	lr
 80004b8:	b530      	push	{r4, r5, lr}
 80004ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004be:	d502      	bpl.n	80004c6 <__aeabi_l2d+0x16>
 80004c0:	4240      	negs	r0, r0
 80004c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004d2:	f43f aed8 	beq.w	8000286 <__adddf3+0xe6>
 80004d6:	f04f 0203 	mov.w	r2, #3
 80004da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004de:	bf18      	it	ne
 80004e0:	3203      	addne	r2, #3
 80004e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e6:	bf18      	it	ne
 80004e8:	3203      	addne	r2, #3
 80004ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ee:	f1c2 0320 	rsb	r3, r2, #32
 80004f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f6:	fa20 f002 	lsr.w	r0, r0, r2
 80004fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fe:	ea40 000e 	orr.w	r0, r0, lr
 8000502:	fa21 f102 	lsr.w	r1, r1, r2
 8000506:	4414      	add	r4, r2
 8000508:	e6bd      	b.n	8000286 <__adddf3+0xe6>
 800050a:	bf00      	nop

0800050c <__aeabi_dmul>:
 800050c:	b570      	push	{r4, r5, r6, lr}
 800050e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000512:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000516:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800051a:	bf1d      	ittte	ne
 800051c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000520:	ea94 0f0c 	teqne	r4, ip
 8000524:	ea95 0f0c 	teqne	r5, ip
 8000528:	f000 f8de 	bleq	80006e8 <__aeabi_dmul+0x1dc>
 800052c:	442c      	add	r4, r5
 800052e:	ea81 0603 	eor.w	r6, r1, r3
 8000532:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000536:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800053a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053e:	bf18      	it	ne
 8000540:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000544:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000548:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800054c:	d038      	beq.n	80005c0 <__aeabi_dmul+0xb4>
 800054e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000552:	f04f 0500 	mov.w	r5, #0
 8000556:	fbe1 e502 	umlal	lr, r5, r1, r2
 800055a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000562:	f04f 0600 	mov.w	r6, #0
 8000566:	fbe1 5603 	umlal	r5, r6, r1, r3
 800056a:	f09c 0f00 	teq	ip, #0
 800056e:	bf18      	it	ne
 8000570:	f04e 0e01 	orrne.w	lr, lr, #1
 8000574:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000578:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800057c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000580:	d204      	bcs.n	800058c <__aeabi_dmul+0x80>
 8000582:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000586:	416d      	adcs	r5, r5
 8000588:	eb46 0606 	adc.w	r6, r6, r6
 800058c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000590:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000594:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000598:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800059c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a4:	bf88      	it	hi
 80005a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005aa:	d81e      	bhi.n	80005ea <__aeabi_dmul+0xde>
 80005ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005b0:	bf08      	it	eq
 80005b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b6:	f150 0000 	adcs.w	r0, r0, #0
 80005ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005be:	bd70      	pop	{r4, r5, r6, pc}
 80005c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c4:	ea46 0101 	orr.w	r1, r6, r1
 80005c8:	ea40 0002 	orr.w	r0, r0, r2
 80005cc:	ea81 0103 	eor.w	r1, r1, r3
 80005d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d4:	bfc2      	ittt	gt
 80005d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005de:	bd70      	popgt	{r4, r5, r6, pc}
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f04f 0e00 	mov.w	lr, #0
 80005e8:	3c01      	subs	r4, #1
 80005ea:	f300 80ab 	bgt.w	8000744 <__aeabi_dmul+0x238>
 80005ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005f2:	bfde      	ittt	le
 80005f4:	2000      	movle	r0, #0
 80005f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005fa:	bd70      	pople	{r4, r5, r6, pc}
 80005fc:	f1c4 0400 	rsb	r4, r4, #0
 8000600:	3c20      	subs	r4, #32
 8000602:	da35      	bge.n	8000670 <__aeabi_dmul+0x164>
 8000604:	340c      	adds	r4, #12
 8000606:	dc1b      	bgt.n	8000640 <__aeabi_dmul+0x134>
 8000608:	f104 0414 	add.w	r4, r4, #20
 800060c:	f1c4 0520 	rsb	r5, r4, #32
 8000610:	fa00 f305 	lsl.w	r3, r0, r5
 8000614:	fa20 f004 	lsr.w	r0, r0, r4
 8000618:	fa01 f205 	lsl.w	r2, r1, r5
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000624:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	fa21 f604 	lsr.w	r6, r1, r4
 8000630:	eb42 0106 	adc.w	r1, r2, r6
 8000634:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000638:	bf08      	it	eq
 800063a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063e:	bd70      	pop	{r4, r5, r6, pc}
 8000640:	f1c4 040c 	rsb	r4, r4, #12
 8000644:	f1c4 0520 	rsb	r5, r4, #32
 8000648:	fa00 f304 	lsl.w	r3, r0, r4
 800064c:	fa20 f005 	lsr.w	r0, r0, r5
 8000650:	fa01 f204 	lsl.w	r2, r1, r4
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	f141 0100 	adc.w	r1, r1, #0
 8000664:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000668:	bf08      	it	eq
 800066a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f205 	lsl.w	r2, r0, r5
 8000678:	ea4e 0e02 	orr.w	lr, lr, r2
 800067c:	fa20 f304 	lsr.w	r3, r0, r4
 8000680:	fa01 f205 	lsl.w	r2, r1, r5
 8000684:	ea43 0302 	orr.w	r3, r3, r2
 8000688:	fa21 f004 	lsr.w	r0, r1, r4
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	fa21 f204 	lsr.w	r2, r1, r4
 8000694:	ea20 0002 	bic.w	r0, r0, r2
 8000698:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f094 0f00 	teq	r4, #0
 80006ac:	d10f      	bne.n	80006ce <__aeabi_dmul+0x1c2>
 80006ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006b2:	0040      	lsls	r0, r0, #1
 80006b4:	eb41 0101 	adc.w	r1, r1, r1
 80006b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3c01      	subeq	r4, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1a6>
 80006c2:	ea41 0106 	orr.w	r1, r1, r6
 80006c6:	f095 0f00 	teq	r5, #0
 80006ca:	bf18      	it	ne
 80006cc:	4770      	bxne	lr
 80006ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006d2:	0052      	lsls	r2, r2, #1
 80006d4:	eb43 0303 	adc.w	r3, r3, r3
 80006d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006dc:	bf08      	it	eq
 80006de:	3d01      	subeq	r5, #1
 80006e0:	d0f7      	beq.n	80006d2 <__aeabi_dmul+0x1c6>
 80006e2:	ea43 0306 	orr.w	r3, r3, r6
 80006e6:	4770      	bx	lr
 80006e8:	ea94 0f0c 	teq	r4, ip
 80006ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006f0:	bf18      	it	ne
 80006f2:	ea95 0f0c 	teqne	r5, ip
 80006f6:	d00c      	beq.n	8000712 <__aeabi_dmul+0x206>
 80006f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006fc:	bf18      	it	ne
 80006fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000702:	d1d1      	bne.n	80006a8 <__aeabi_dmul+0x19c>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000716:	bf06      	itte	eq
 8000718:	4610      	moveq	r0, r2
 800071a:	4619      	moveq	r1, r3
 800071c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000720:	d019      	beq.n	8000756 <__aeabi_dmul+0x24a>
 8000722:	ea94 0f0c 	teq	r4, ip
 8000726:	d102      	bne.n	800072e <__aeabi_dmul+0x222>
 8000728:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800072c:	d113      	bne.n	8000756 <__aeabi_dmul+0x24a>
 800072e:	ea95 0f0c 	teq	r5, ip
 8000732:	d105      	bne.n	8000740 <__aeabi_dmul+0x234>
 8000734:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000738:	bf1c      	itt	ne
 800073a:	4610      	movne	r0, r2
 800073c:	4619      	movne	r1, r3
 800073e:	d10a      	bne.n	8000756 <__aeabi_dmul+0x24a>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800075a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075e:	bd70      	pop	{r4, r5, r6, pc}

08000760 <__aeabi_ddiv>:
 8000760:	b570      	push	{r4, r5, r6, lr}
 8000762:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000766:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800076a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076e:	bf1d      	ittte	ne
 8000770:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000774:	ea94 0f0c 	teqne	r4, ip
 8000778:	ea95 0f0c 	teqne	r5, ip
 800077c:	f000 f8a7 	bleq	80008ce <__aeabi_ddiv+0x16e>
 8000780:	eba4 0405 	sub.w	r4, r4, r5
 8000784:	ea81 0e03 	eor.w	lr, r1, r3
 8000788:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800078c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000790:	f000 8088 	beq.w	80008a4 <__aeabi_ddiv+0x144>
 8000794:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000798:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800079c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b8:	429d      	cmp	r5, r3
 80007ba:	bf08      	it	eq
 80007bc:	4296      	cmpeq	r6, r2
 80007be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c6:	d202      	bcs.n	80007ce <__aeabi_ddiv+0x6e>
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	1ab6      	subs	r6, r6, r2
 80007d0:	eb65 0503 	sbc.w	r5, r5, r3
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000802:	bf22      	ittt	cs
 8000804:	1ab6      	subcs	r6, r6, r2
 8000806:	4675      	movcs	r5, lr
 8000808:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	ebb6 0e02 	subs.w	lr, r6, r2
 8000816:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081a:	bf22      	ittt	cs
 800081c:	1ab6      	subcs	r6, r6, r2
 800081e:	4675      	movcs	r5, lr
 8000820:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	ebb6 0e02 	subs.w	lr, r6, r2
 800082e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000832:	bf22      	ittt	cs
 8000834:	1ab6      	subcs	r6, r6, r2
 8000836:	4675      	movcs	r5, lr
 8000838:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800083c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000840:	d018      	beq.n	8000874 <__aeabi_ddiv+0x114>
 8000842:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000846:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800084a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000852:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000856:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800085a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085e:	d1c0      	bne.n	80007e2 <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	d10b      	bne.n	800087e <__aeabi_ddiv+0x11e>
 8000866:	ea41 0100 	orr.w	r1, r1, r0
 800086a:	f04f 0000 	mov.w	r0, #0
 800086e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000872:	e7b6      	b.n	80007e2 <__aeabi_ddiv+0x82>
 8000874:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000878:	bf04      	itt	eq
 800087a:	4301      	orreq	r1, r0
 800087c:	2000      	moveq	r0, #0
 800087e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000882:	bf88      	it	hi
 8000884:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000888:	f63f aeaf 	bhi.w	80005ea <__aeabi_dmul+0xde>
 800088c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000890:	bf04      	itt	eq
 8000892:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000896:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800089a:	f150 0000 	adcs.w	r0, r0, #0
 800089e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008a2:	bd70      	pop	{r4, r5, r6, pc}
 80008a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008b0:	bfc2      	ittt	gt
 80008b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ba:	bd70      	popgt	{r4, r5, r6, pc}
 80008bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008c0:	f04f 0e00 	mov.w	lr, #0
 80008c4:	3c01      	subs	r4, #1
 80008c6:	e690      	b.n	80005ea <__aeabi_dmul+0xde>
 80008c8:	ea45 0e06 	orr.w	lr, r5, r6
 80008cc:	e68d      	b.n	80005ea <__aeabi_dmul+0xde>
 80008ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008d2:	ea94 0f0c 	teq	r4, ip
 80008d6:	bf08      	it	eq
 80008d8:	ea95 0f0c 	teqeq	r5, ip
 80008dc:	f43f af3b 	beq.w	8000756 <__aeabi_dmul+0x24a>
 80008e0:	ea94 0f0c 	teq	r4, ip
 80008e4:	d10a      	bne.n	80008fc <__aeabi_ddiv+0x19c>
 80008e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ea:	f47f af34 	bne.w	8000756 <__aeabi_dmul+0x24a>
 80008ee:	ea95 0f0c 	teq	r5, ip
 80008f2:	f47f af25 	bne.w	8000740 <__aeabi_dmul+0x234>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e72c      	b.n	8000756 <__aeabi_dmul+0x24a>
 80008fc:	ea95 0f0c 	teq	r5, ip
 8000900:	d106      	bne.n	8000910 <__aeabi_ddiv+0x1b0>
 8000902:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000906:	f43f aefd 	beq.w	8000704 <__aeabi_dmul+0x1f8>
 800090a:	4610      	mov	r0, r2
 800090c:	4619      	mov	r1, r3
 800090e:	e722      	b.n	8000756 <__aeabi_dmul+0x24a>
 8000910:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000914:	bf18      	it	ne
 8000916:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800091a:	f47f aec5 	bne.w	80006a8 <__aeabi_dmul+0x19c>
 800091e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000922:	f47f af0d 	bne.w	8000740 <__aeabi_dmul+0x234>
 8000926:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800092a:	f47f aeeb 	bne.w	8000704 <__aeabi_dmul+0x1f8>
 800092e:	e712      	b.n	8000756 <__aeabi_dmul+0x24a>

08000930 <__gedf2>:
 8000930:	f04f 3cff 	mov.w	ip, #4294967295
 8000934:	e006      	b.n	8000944 <__cmpdf2+0x4>
 8000936:	bf00      	nop

08000938 <__ledf2>:
 8000938:	f04f 0c01 	mov.w	ip, #1
 800093c:	e002      	b.n	8000944 <__cmpdf2+0x4>
 800093e:	bf00      	nop

08000940 <__cmpdf2>:
 8000940:	f04f 0c01 	mov.w	ip, #1
 8000944:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000948:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800094c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000950:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000954:	bf18      	it	ne
 8000956:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800095a:	d01b      	beq.n	8000994 <__cmpdf2+0x54>
 800095c:	b001      	add	sp, #4
 800095e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000962:	bf0c      	ite	eq
 8000964:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000968:	ea91 0f03 	teqne	r1, r3
 800096c:	bf02      	ittt	eq
 800096e:	ea90 0f02 	teqeq	r0, r2
 8000972:	2000      	moveq	r0, #0
 8000974:	4770      	bxeq	lr
 8000976:	f110 0f00 	cmn.w	r0, #0
 800097a:	ea91 0f03 	teq	r1, r3
 800097e:	bf58      	it	pl
 8000980:	4299      	cmppl	r1, r3
 8000982:	bf08      	it	eq
 8000984:	4290      	cmpeq	r0, r2
 8000986:	bf2c      	ite	cs
 8000988:	17d8      	asrcs	r0, r3, #31
 800098a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098e:	f040 0001 	orr.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	d102      	bne.n	80009a4 <__cmpdf2+0x64>
 800099e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009a2:	d107      	bne.n	80009b4 <__cmpdf2+0x74>
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	d1d6      	bne.n	800095c <__cmpdf2+0x1c>
 80009ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009b2:	d0d3      	beq.n	800095c <__cmpdf2+0x1c>
 80009b4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <__aeabi_cdrcmple>:
 80009bc:	4684      	mov	ip, r0
 80009be:	4610      	mov	r0, r2
 80009c0:	4662      	mov	r2, ip
 80009c2:	468c      	mov	ip, r1
 80009c4:	4619      	mov	r1, r3
 80009c6:	4663      	mov	r3, ip
 80009c8:	e000      	b.n	80009cc <__aeabi_cdcmpeq>
 80009ca:	bf00      	nop

080009cc <__aeabi_cdcmpeq>:
 80009cc:	b501      	push	{r0, lr}
 80009ce:	f7ff ffb7 	bl	8000940 <__cmpdf2>
 80009d2:	2800      	cmp	r0, #0
 80009d4:	bf48      	it	mi
 80009d6:	f110 0f00 	cmnmi.w	r0, #0
 80009da:	bd01      	pop	{r0, pc}

080009dc <__aeabi_dcmpeq>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff fff4 	bl	80009cc <__aeabi_cdcmpeq>
 80009e4:	bf0c      	ite	eq
 80009e6:	2001      	moveq	r0, #1
 80009e8:	2000      	movne	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmplt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffea 	bl	80009cc <__aeabi_cdcmpeq>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmple>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffe0 	bl	80009cc <__aeabi_cdcmpeq>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpge>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffce 	bl	80009bc <__aeabi_cdrcmple>
 8000a20:	bf94      	ite	ls
 8000a22:	2001      	movls	r0, #1
 8000a24:	2000      	movhi	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpgt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffc4 	bl	80009bc <__aeabi_cdrcmple>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmpun>:
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__aeabi_dcmpun+0x10>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d10a      	bne.n	8000a66 <__aeabi_dcmpun+0x26>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__aeabi_dcmpun+0x20>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_dcmpun+0x26>
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0001 	mov.w	r0, #1
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_d2f>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a74:	bf24      	itt	cs
 8000a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7e:	d90d      	bls.n	8000a9c <__aeabi_d2f+0x30>
 8000a80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a94:	bf08      	it	eq
 8000a96:	f020 0001 	biceq.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa0:	d121      	bne.n	8000ae6 <__aeabi_d2f+0x7a>
 8000aa2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa6:	bfbc      	itt	lt
 8000aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	4770      	bxlt	lr
 8000aae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab6:	f1c2 0218 	rsb	r2, r2, #24
 8000aba:	f1c2 0c20 	rsb	ip, r2, #32
 8000abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	f040 0001 	orrne.w	r0, r0, #1
 8000acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad8:	ea40 000c 	orr.w	r0, r0, ip
 8000adc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae4:	e7cc      	b.n	8000a80 <__aeabi_d2f+0x14>
 8000ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aea:	d107      	bne.n	8000afc <__aeabi_d2f+0x90>
 8000aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af0:	bf1e      	ittt	ne
 8000af2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000afa:	4770      	bxne	lr
 8000afc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_uldivmod>:
 8000b0c:	b953      	cbnz	r3, 8000b24 <__aeabi_uldivmod+0x18>
 8000b0e:	b94a      	cbnz	r2, 8000b24 <__aeabi_uldivmod+0x18>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bf08      	it	eq
 8000b14:	2800      	cmpeq	r0, #0
 8000b16:	bf1c      	itt	ne
 8000b18:	f04f 31ff 	movne.w	r1, #4294967295
 8000b1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b20:	f000 b972 	b.w	8000e08 <__aeabi_idiv0>
 8000b24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b2c:	f000 f806 	bl	8000b3c <__udivmoddi4>
 8000b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b38:	b004      	add	sp, #16
 8000b3a:	4770      	bx	lr

08000b3c <__udivmoddi4>:
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b40:	9e08      	ldr	r6, [sp, #32]
 8000b42:	4604      	mov	r4, r0
 8000b44:	4688      	mov	r8, r1
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d14b      	bne.n	8000be2 <__udivmoddi4+0xa6>
 8000b4a:	428a      	cmp	r2, r1
 8000b4c:	4615      	mov	r5, r2
 8000b4e:	d967      	bls.n	8000c20 <__udivmoddi4+0xe4>
 8000b50:	fab2 f282 	clz	r2, r2
 8000b54:	b14a      	cbz	r2, 8000b6a <__udivmoddi4+0x2e>
 8000b56:	f1c2 0720 	rsb	r7, r2, #32
 8000b5a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b5e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b62:	4095      	lsls	r5, r2
 8000b64:	ea47 0803 	orr.w	r8, r7, r3
 8000b68:	4094      	lsls	r4, r2
 8000b6a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b6e:	0c23      	lsrs	r3, r4, #16
 8000b70:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b74:	fa1f fc85 	uxth.w	ip, r5
 8000b78:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b7c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b80:	fb07 f10c 	mul.w	r1, r7, ip
 8000b84:	4299      	cmp	r1, r3
 8000b86:	d909      	bls.n	8000b9c <__udivmoddi4+0x60>
 8000b88:	18eb      	adds	r3, r5, r3
 8000b8a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b8e:	f080 811b 	bcs.w	8000dc8 <__udivmoddi4+0x28c>
 8000b92:	4299      	cmp	r1, r3
 8000b94:	f240 8118 	bls.w	8000dc8 <__udivmoddi4+0x28c>
 8000b98:	3f02      	subs	r7, #2
 8000b9a:	442b      	add	r3, r5
 8000b9c:	1a5b      	subs	r3, r3, r1
 8000b9e:	b2a4      	uxth	r4, r4
 8000ba0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ba4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ba8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bac:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bb0:	45a4      	cmp	ip, r4
 8000bb2:	d909      	bls.n	8000bc8 <__udivmoddi4+0x8c>
 8000bb4:	192c      	adds	r4, r5, r4
 8000bb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bba:	f080 8107 	bcs.w	8000dcc <__udivmoddi4+0x290>
 8000bbe:	45a4      	cmp	ip, r4
 8000bc0:	f240 8104 	bls.w	8000dcc <__udivmoddi4+0x290>
 8000bc4:	3802      	subs	r0, #2
 8000bc6:	442c      	add	r4, r5
 8000bc8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bcc:	eba4 040c 	sub.w	r4, r4, ip
 8000bd0:	2700      	movs	r7, #0
 8000bd2:	b11e      	cbz	r6, 8000bdc <__udivmoddi4+0xa0>
 8000bd4:	40d4      	lsrs	r4, r2
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bdc:	4639      	mov	r1, r7
 8000bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d909      	bls.n	8000bfa <__udivmoddi4+0xbe>
 8000be6:	2e00      	cmp	r6, #0
 8000be8:	f000 80eb 	beq.w	8000dc2 <__udivmoddi4+0x286>
 8000bec:	2700      	movs	r7, #0
 8000bee:	e9c6 0100 	strd	r0, r1, [r6]
 8000bf2:	4638      	mov	r0, r7
 8000bf4:	4639      	mov	r1, r7
 8000bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfa:	fab3 f783 	clz	r7, r3
 8000bfe:	2f00      	cmp	r7, #0
 8000c00:	d147      	bne.n	8000c92 <__udivmoddi4+0x156>
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d302      	bcc.n	8000c0c <__udivmoddi4+0xd0>
 8000c06:	4282      	cmp	r2, r0
 8000c08:	f200 80fa 	bhi.w	8000e00 <__udivmoddi4+0x2c4>
 8000c0c:	1a84      	subs	r4, r0, r2
 8000c0e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c12:	2001      	movs	r0, #1
 8000c14:	4698      	mov	r8, r3
 8000c16:	2e00      	cmp	r6, #0
 8000c18:	d0e0      	beq.n	8000bdc <__udivmoddi4+0xa0>
 8000c1a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c1e:	e7dd      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000c20:	b902      	cbnz	r2, 8000c24 <__udivmoddi4+0xe8>
 8000c22:	deff      	udf	#255	; 0xff
 8000c24:	fab2 f282 	clz	r2, r2
 8000c28:	2a00      	cmp	r2, #0
 8000c2a:	f040 808f 	bne.w	8000d4c <__udivmoddi4+0x210>
 8000c2e:	1b49      	subs	r1, r1, r5
 8000c30:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c34:	fa1f f885 	uxth.w	r8, r5
 8000c38:	2701      	movs	r7, #1
 8000c3a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c3e:	0c23      	lsrs	r3, r4, #16
 8000c40:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c48:	fb08 f10c 	mul.w	r1, r8, ip
 8000c4c:	4299      	cmp	r1, r3
 8000c4e:	d907      	bls.n	8000c60 <__udivmoddi4+0x124>
 8000c50:	18eb      	adds	r3, r5, r3
 8000c52:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c56:	d202      	bcs.n	8000c5e <__udivmoddi4+0x122>
 8000c58:	4299      	cmp	r1, r3
 8000c5a:	f200 80cd 	bhi.w	8000df8 <__udivmoddi4+0x2bc>
 8000c5e:	4684      	mov	ip, r0
 8000c60:	1a59      	subs	r1, r3, r1
 8000c62:	b2a3      	uxth	r3, r4
 8000c64:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c68:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c6c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c70:	fb08 f800 	mul.w	r8, r8, r0
 8000c74:	45a0      	cmp	r8, r4
 8000c76:	d907      	bls.n	8000c88 <__udivmoddi4+0x14c>
 8000c78:	192c      	adds	r4, r5, r4
 8000c7a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7e:	d202      	bcs.n	8000c86 <__udivmoddi4+0x14a>
 8000c80:	45a0      	cmp	r8, r4
 8000c82:	f200 80b6 	bhi.w	8000df2 <__udivmoddi4+0x2b6>
 8000c86:	4618      	mov	r0, r3
 8000c88:	eba4 0408 	sub.w	r4, r4, r8
 8000c8c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c90:	e79f      	b.n	8000bd2 <__udivmoddi4+0x96>
 8000c92:	f1c7 0c20 	rsb	ip, r7, #32
 8000c96:	40bb      	lsls	r3, r7
 8000c98:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c9c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ca0:	fa01 f407 	lsl.w	r4, r1, r7
 8000ca4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ca8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cac:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cb0:	4325      	orrs	r5, r4
 8000cb2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cb6:	0c2c      	lsrs	r4, r5, #16
 8000cb8:	fb08 3319 	mls	r3, r8, r9, r3
 8000cbc:	fa1f fa8e 	uxth.w	sl, lr
 8000cc0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cc4:	fb09 f40a 	mul.w	r4, r9, sl
 8000cc8:	429c      	cmp	r4, r3
 8000cca:	fa02 f207 	lsl.w	r2, r2, r7
 8000cce:	fa00 f107 	lsl.w	r1, r0, r7
 8000cd2:	d90b      	bls.n	8000cec <__udivmoddi4+0x1b0>
 8000cd4:	eb1e 0303 	adds.w	r3, lr, r3
 8000cd8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cdc:	f080 8087 	bcs.w	8000dee <__udivmoddi4+0x2b2>
 8000ce0:	429c      	cmp	r4, r3
 8000ce2:	f240 8084 	bls.w	8000dee <__udivmoddi4+0x2b2>
 8000ce6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cea:	4473      	add	r3, lr
 8000cec:	1b1b      	subs	r3, r3, r4
 8000cee:	b2ad      	uxth	r5, r5
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cfc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d00:	45a2      	cmp	sl, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x1da>
 8000d04:	eb1e 0404 	adds.w	r4, lr, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	d26b      	bcs.n	8000de6 <__udivmoddi4+0x2aa>
 8000d0e:	45a2      	cmp	sl, r4
 8000d10:	d969      	bls.n	8000de6 <__udivmoddi4+0x2aa>
 8000d12:	3802      	subs	r0, #2
 8000d14:	4474      	add	r4, lr
 8000d16:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d1e:	eba4 040a 	sub.w	r4, r4, sl
 8000d22:	454c      	cmp	r4, r9
 8000d24:	46c2      	mov	sl, r8
 8000d26:	464b      	mov	r3, r9
 8000d28:	d354      	bcc.n	8000dd4 <__udivmoddi4+0x298>
 8000d2a:	d051      	beq.n	8000dd0 <__udivmoddi4+0x294>
 8000d2c:	2e00      	cmp	r6, #0
 8000d2e:	d069      	beq.n	8000e04 <__udivmoddi4+0x2c8>
 8000d30:	ebb1 050a 	subs.w	r5, r1, sl
 8000d34:	eb64 0403 	sbc.w	r4, r4, r3
 8000d38:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d3c:	40fd      	lsrs	r5, r7
 8000d3e:	40fc      	lsrs	r4, r7
 8000d40:	ea4c 0505 	orr.w	r5, ip, r5
 8000d44:	e9c6 5400 	strd	r5, r4, [r6]
 8000d48:	2700      	movs	r7, #0
 8000d4a:	e747      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000d4c:	f1c2 0320 	rsb	r3, r2, #32
 8000d50:	fa20 f703 	lsr.w	r7, r0, r3
 8000d54:	4095      	lsls	r5, r2
 8000d56:	fa01 f002 	lsl.w	r0, r1, r2
 8000d5a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d5e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d62:	4338      	orrs	r0, r7
 8000d64:	0c01      	lsrs	r1, r0, #16
 8000d66:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d6a:	fa1f f885 	uxth.w	r8, r5
 8000d6e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d76:	fb07 f308 	mul.w	r3, r7, r8
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d80:	d907      	bls.n	8000d92 <__udivmoddi4+0x256>
 8000d82:	1869      	adds	r1, r5, r1
 8000d84:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d88:	d22f      	bcs.n	8000dea <__udivmoddi4+0x2ae>
 8000d8a:	428b      	cmp	r3, r1
 8000d8c:	d92d      	bls.n	8000dea <__udivmoddi4+0x2ae>
 8000d8e:	3f02      	subs	r7, #2
 8000d90:	4429      	add	r1, r5
 8000d92:	1acb      	subs	r3, r1, r3
 8000d94:	b281      	uxth	r1, r0
 8000d96:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d9a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da2:	fb00 f308 	mul.w	r3, r0, r8
 8000da6:	428b      	cmp	r3, r1
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x27e>
 8000daa:	1869      	adds	r1, r5, r1
 8000dac:	f100 3cff 	add.w	ip, r0, #4294967295
 8000db0:	d217      	bcs.n	8000de2 <__udivmoddi4+0x2a6>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d915      	bls.n	8000de2 <__udivmoddi4+0x2a6>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4429      	add	r1, r5
 8000dba:	1ac9      	subs	r1, r1, r3
 8000dbc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000dc0:	e73b      	b.n	8000c3a <__udivmoddi4+0xfe>
 8000dc2:	4637      	mov	r7, r6
 8000dc4:	4630      	mov	r0, r6
 8000dc6:	e709      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000dc8:	4607      	mov	r7, r0
 8000dca:	e6e7      	b.n	8000b9c <__udivmoddi4+0x60>
 8000dcc:	4618      	mov	r0, r3
 8000dce:	e6fb      	b.n	8000bc8 <__udivmoddi4+0x8c>
 8000dd0:	4541      	cmp	r1, r8
 8000dd2:	d2ab      	bcs.n	8000d2c <__udivmoddi4+0x1f0>
 8000dd4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dd8:	eb69 020e 	sbc.w	r2, r9, lr
 8000ddc:	3801      	subs	r0, #1
 8000dde:	4613      	mov	r3, r2
 8000de0:	e7a4      	b.n	8000d2c <__udivmoddi4+0x1f0>
 8000de2:	4660      	mov	r0, ip
 8000de4:	e7e9      	b.n	8000dba <__udivmoddi4+0x27e>
 8000de6:	4618      	mov	r0, r3
 8000de8:	e795      	b.n	8000d16 <__udivmoddi4+0x1da>
 8000dea:	4667      	mov	r7, ip
 8000dec:	e7d1      	b.n	8000d92 <__udivmoddi4+0x256>
 8000dee:	4681      	mov	r9, r0
 8000df0:	e77c      	b.n	8000cec <__udivmoddi4+0x1b0>
 8000df2:	3802      	subs	r0, #2
 8000df4:	442c      	add	r4, r5
 8000df6:	e747      	b.n	8000c88 <__udivmoddi4+0x14c>
 8000df8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dfc:	442b      	add	r3, r5
 8000dfe:	e72f      	b.n	8000c60 <__udivmoddi4+0x124>
 8000e00:	4638      	mov	r0, r7
 8000e02:	e708      	b.n	8000c16 <__udivmoddi4+0xda>
 8000e04:	4637      	mov	r7, r6
 8000e06:	e6e9      	b.n	8000bdc <__udivmoddi4+0xa0>

08000e08 <__aeabi_idiv0>:
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop

08000e0c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000e24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e30:	68fb      	ldr	r3, [r7, #12]
}
 8000e32:	bf00      	nop
 8000e34:	3714      	adds	r7, #20
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
	...

08000e40 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e46:	463b      	mov	r3, r7
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
 8000e54:	615a      	str	r2, [r3, #20]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000e56:	4b2b      	ldr	r3, [pc, #172]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e58:	4a2b      	ldr	r2, [pc, #172]	; (8000f08 <MX_ADC1_Init+0xc8>)
 8000e5a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8000e5c:	4b29      	ldr	r3, [pc, #164]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e5e:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8000e62:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000e64:	4b27      	ldr	r3, [pc, #156]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e66:	2210      	movs	r2, #16
 8000e68:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e6a:	4b26      	ldr	r3, [pc, #152]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e70:	4b24      	ldr	r3, [pc, #144]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e76:	4b23      	ldr	r3, [pc, #140]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e78:	2204      	movs	r2, #4
 8000e7a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e7c:	4b21      	ldr	r3, [pc, #132]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e82:	4b20      	ldr	r3, [pc, #128]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e84:	2201      	movs	r2, #1
 8000e86:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000e88:	4b1e      	ldr	r3, [pc, #120]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e8e:	4b1d      	ldr	r3, [pc, #116]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000e96:	4b1b      	ldr	r3, [pc, #108]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e9c:	4b19      	ldr	r3, [pc, #100]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ea2:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000ea8:	4b16      	ldr	r3, [pc, #88]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000eaa:	2201      	movs	r2, #1
 8000eac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000eb0:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000eb6:	4b13      	ldr	r3, [pc, #76]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ebe:	4811      	ldr	r0, [pc, #68]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000ec0:	f005 fc40 	bl	8006744 <HAL_ADC_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000eca:	f003 fa35 	bl	8004338 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000ece:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <MX_ADC1_Init+0xcc>)
 8000ed0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ed2:	2306      	movs	r3, #6
 8000ed4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000ed6:	2306      	movs	r3, #6
 8000ed8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000eda:	237f      	movs	r3, #127	; 0x7f
 8000edc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ede:	2304      	movs	r3, #4
 8000ee0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ee6:	463b      	mov	r3, r7
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4806      	ldr	r0, [pc, #24]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000eec:	f005 fe60 	bl	8006bb0 <HAL_ADC_ConfigChannel>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 8000ef6:	f003 fa1f 	bl	8004338 <Error_Handler>
  }

}
 8000efa:	bf00      	nop
 8000efc:	3718      	adds	r7, #24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	200276d8 	.word	0x200276d8
 8000f08:	50040000 	.word	0x50040000
 8000f0c:	14f00020 	.word	0x14f00020

08000f10 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b088      	sub	sp, #32
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 030c 	add.w	r3, r7, #12
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a21      	ldr	r2, [pc, #132]	; (8000fb4 <HAL_ADC_MspInit+0xa4>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d13c      	bne.n	8000fac <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000f32:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f36:	f7ff ff69 	bl	8000e0c <LL_AHB2_GRP1_EnableClock>
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3a:	2001      	movs	r0, #1
 8000f3c:	f7ff ff66 	bl	8000e0c <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f40:	2301      	movs	r3, #1
 8000f42:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f44:	2303      	movs	r3, #3
 8000f46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4c:	f107 030c 	add.w	r3, r7, #12
 8000f50:	4619      	mov	r1, r3
 8000f52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f56:	f007 fa75 	bl	8008444 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000f5a:	4b17      	ldr	r3, [pc, #92]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f5c:	4a17      	ldr	r2, [pc, #92]	; (8000fbc <HAL_ADC_MspInit+0xac>)
 8000f5e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000f60:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f62:	2205      	movs	r2, #5
 8000f64:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f66:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f6c:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f74:	2280      	movs	r2, #128	; 0x80
 8000f76:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f78:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f86:	2220      	movs	r2, #32
 8000f88:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f8a:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f90:	4809      	ldr	r0, [pc, #36]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f92:	f006 ff27 	bl	8007de4 <HAL_DMA_Init>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <HAL_ADC_MspInit+0x90>
    {
      Error_Handler();
 8000f9c:	f003 f9cc 	bl	8004338 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4a05      	ldr	r2, [pc, #20]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000fa4:	64da      	str	r2, [r3, #76]	; 0x4c
 8000fa6:	4a04      	ldr	r2, [pc, #16]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fac:	bf00      	nop
 8000fae:	3720      	adds	r7, #32
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	50040000 	.word	0x50040000
 8000fb8:	2002773c 	.word	0x2002773c
 8000fbc:	40020008 	.word	0x40020008

08000fc0 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000fc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000fd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	608b      	str	r3, [r1, #8]
}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <APPE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 8000fec:	f000 f80a 	bl	8001004 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000ff0:	4903      	ldr	r1, [pc, #12]	; (8001000 <APPE_Init+0x18>)
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	f002 f958 	bl	80032a8 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  //UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000ff8:	f000 f80e 	bl	8001018 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000ffc:	bf00      	nop
}
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	2002842c 	.word	0x2002842c

08001004 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config( void )
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0

  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001008:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800100c:	f7ff ffd8 	bl	8000fc0 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init( );
 8001010:	f014 fc2a 	bl	8015868 <UTIL_LPM_Init>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 8001014:	bf00      	nop
}
 8001016:	bd80      	pop	{r7, pc}

08001018 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b088      	sub	sp, #32
 800101c:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800101e:	f012 ff35 	bl	8013e8c <TL_Init>

  MtxShciId = osMutexNew( NULL );
 8001022:	2000      	movs	r0, #0
 8001024:	f00d fb46 	bl	800e6b4 <osMutexNew>
 8001028:	4602      	mov	r2, r0
 800102a:	4b17      	ldr	r3, [pc, #92]	; (8001088 <appe_Tl_Init+0x70>)
 800102c:	601a      	str	r2, [r3, #0]
  SemShciId = osSemaphoreNew( 1, 0, NULL ); /*< Create the semaphore and make it busy at initialization */
 800102e:	2200      	movs	r2, #0
 8001030:	2100      	movs	r1, #0
 8001032:	2001      	movs	r0, #1
 8001034:	f00d fc86 	bl	800e944 <osSemaphoreNew>
 8001038:	4602      	mov	r2, r0
 800103a:	4b14      	ldr	r3, [pc, #80]	; (800108c <appe_Tl_Init+0x74>)
 800103c:	601a      	str	r2, [r3, #0]

  /** FreeRTOS system task creation */
  ShciUserEvtProcessId = osThreadNew(ShciUserEvtProcess, NULL, &ShciUserEvtProcess_attr);
 800103e:	4a14      	ldr	r2, [pc, #80]	; (8001090 <appe_Tl_Init+0x78>)
 8001040:	2100      	movs	r1, #0
 8001042:	4814      	ldr	r0, [pc, #80]	; (8001094 <appe_Tl_Init+0x7c>)
 8001044:	f00c fff2 	bl	800e02c <osThreadNew>
 8001048:	4602      	mov	r2, r0
 800104a:	4b13      	ldr	r3, [pc, #76]	; (8001098 <appe_Tl_Init+0x80>)
 800104c:	601a      	str	r2, [r3, #0]

  /**< System channel initialization */
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 800104e:	4b13      	ldr	r3, [pc, #76]	; (800109c <appe_Tl_Init+0x84>)
 8001050:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001052:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <appe_Tl_Init+0x88>)
 8001054:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8001056:	463b      	mov	r3, r7
 8001058:	4619      	mov	r1, r3
 800105a:	4812      	ldr	r0, [pc, #72]	; (80010a4 <appe_Tl_Init+0x8c>)
 800105c:	f012 fc42 	bl	80138e4 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = 0;
 8001060:	2300      	movs	r3, #0
 8001062:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8001064:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <appe_Tl_Init+0x90>)
 8001066:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8001068:	4b10      	ldr	r3, [pc, #64]	; (80010ac <appe_Tl_Init+0x94>)
 800106a:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800106c:	f240 533c 	movw	r3, #1340	; 0x53c
 8001070:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8001072:	f107 0308 	add.w	r3, r7, #8
 8001076:	4618      	mov	r0, r3
 8001078:	f013 f846 	bl	8014108 <TL_MM_Init>

  TL_Enable();
 800107c:	f012 ff00 	bl	8013e80 <TL_Enable>

  return;
 8001080:	bf00      	nop
}
 8001082:	3720      	adds	r7, #32
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	2002779c 	.word	0x2002779c
 800108c:	200277b4 	.word	0x200277b4
 8001090:	080174e8 	.word	0x080174e8
 8001094:	08001199 	.word	0x08001199
 8001098:	200277a0 	.word	0x200277a0
 800109c:	20030600 	.word	0x20030600
 80010a0:	080010b1 	.word	0x080010b1
 80010a4:	080010f1 	.word	0x080010f1
 80010a8:	2003070c 	.word	0x2003070c
 80010ac:	200300c4 	.word	0x200300c4

080010b0 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	71fb      	strb	r3, [r7, #7]
  switch (status)
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d002      	beq.n	80010c6 <APPE_SysStatusNot+0x16>
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d008      	beq.n	80010d6 <APPE_SysStatusNot+0x26>
    case SHCI_TL_CmdAvailable:
      osMutexRelease( MtxShciId );
      break;

    default:
      break;
 80010c4:	e00d      	b.n	80010e2 <APPE_SysStatusNot+0x32>
      osMutexAcquire( MtxShciId, osWaitForever );
 80010c6:	4b09      	ldr	r3, [pc, #36]	; (80010ec <APPE_SysStatusNot+0x3c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f04f 31ff 	mov.w	r1, #4294967295
 80010ce:	4618      	mov	r0, r3
 80010d0:	f00d fb8a 	bl	800e7e8 <osMutexAcquire>
      break;
 80010d4:	e005      	b.n	80010e2 <APPE_SysStatusNot+0x32>
      osMutexRelease( MtxShciId );
 80010d6:	4b05      	ldr	r3, [pc, #20]	; (80010ec <APPE_SysStatusNot+0x3c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4618      	mov	r0, r3
 80010dc:	f00d fbe2 	bl	800e8a4 <osMutexRelease>
      break;
 80010e0:	bf00      	nop
  }
  return;
 80010e2:	bf00      	nop
}
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	2002779c 	.word	0x2002779c

080010f0 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	330b      	adds	r3, #11
 80010fe:	60fb      	str	r3, [r7, #12]

  switch(p_sys_event->subevtcode)
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	881b      	ldrh	r3, [r3, #0]
 8001104:	b29b      	uxth	r3, r3
 8001106:	f5b3 4f12 	cmp.w	r3, #37376	; 0x9200
 800110a:	d004      	beq.n	8001116 <APPE_SysUserEvtRx+0x26>
 800110c:	f249 2201 	movw	r2, #37377	; 0x9201
 8001110:	4293      	cmp	r3, r2
 8001112:	d003      	beq.n	800111c <APPE_SysUserEvtRx+0x2c>
         break;
     case SHCI_SUB_EVT_ERROR_NOTIF:
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
         break;
     default:
         break;
 8001114:	e008      	b.n	8001128 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtReadyProcessing();
 8001116:	f000 f833 	bl	8001180 <APPE_SysEvtReadyProcessing>
         break;
 800111a:	e005      	b.n	8001128 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	789b      	ldrb	r3, [r3, #2]
 8001120:	4618      	mov	r0, r3
 8001122:	f000 f805 	bl	8001130 <APPE_SysEvtError>
         break;
 8001126:	bf00      	nop
  }
  return;
 8001128:	bf00      	nop
}
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError( SCHI_SystemErrCode_t ErrorCode)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	71fb      	strb	r3, [r7, #7]
  switch(ErrorCode)
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	2b7d      	cmp	r3, #125	; 0x7d
 800113e:	d002      	beq.n	8001146 <APPE_SysEvtError+0x16>
 8001140:	2b7e      	cmp	r3, #126	; 0x7e
 8001142:	d006      	beq.n	8001152 <APPE_SysEvtError+0x22>
 8001144:	e00b      	b.n	800115e <APPE_SysEvtError+0x2e>
  {
  case ERR_THREAD_LLD_FATAL_ERROR:
       APP_DBG("** ERR_THREAD : LLD_FATAL_ERROR \n");
 8001146:	4a0b      	ldr	r2, [pc, #44]	; (8001174 <APPE_SysEvtError+0x44>)
 8001148:	2101      	movs	r1, #1
 800114a:	2000      	movs	r0, #0
 800114c:	f004 f9ae 	bl	80054ac <logApplication>
       break;
 8001150:	e00c      	b.n	800116c <APPE_SysEvtError+0x3c>
  case ERR_THREAD_UNKNOWN_CMD:
       APP_DBG("** ERR_THREAD : UNKNOWN_CMD \n");
 8001152:	4a09      	ldr	r2, [pc, #36]	; (8001178 <APPE_SysEvtError+0x48>)
 8001154:	2101      	movs	r1, #1
 8001156:	2000      	movs	r0, #0
 8001158:	f004 f9a8 	bl	80054ac <logApplication>
       break;
 800115c:	e006      	b.n	800116c <APPE_SysEvtError+0x3c>
  default:
       APP_DBG("** ERR_THREAD : ErroCode=%d \n",ErrorCode);
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	4a06      	ldr	r2, [pc, #24]	; (800117c <APPE_SysEvtError+0x4c>)
 8001162:	2101      	movs	r1, #1
 8001164:	2000      	movs	r0, #0
 8001166:	f004 f9a1 	bl	80054ac <logApplication>
       break;
 800116a:	bf00      	nop
  }
  return;
 800116c:	bf00      	nop
}
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	08017070 	.word	0x08017070
 8001178:	08017094 	.word	0x08017094
 800117c:	080170b4 	.word	0x080170b4

08001180 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing( void )
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* Traces channel initialization */
  TL_TRACES_Init( );
 8001184:	f013 f830 	bl	80141e8 <TL_TRACES_Init>

  APP_THREAD_Init();
 8001188:	f013 f85a 	bl	8014240 <APP_THREAD_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 800118c:	2100      	movs	r1, #0
 800118e:	2001      	movs	r0, #1
 8001190:	f014 fb7c 	bl	801588c <UTIL_LPM_SetOffMode>
  return;
 8001194:	bf00      	nop
}
 8001196:	bd80      	pop	{r7, pc}

08001198 <ShciUserEvtProcess>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void ShciUserEvtProcess(void *argument)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN SHCI_USER_EVT_PROCESS_1 */

    /* USER CODE END SHCI_USER_EVT_PROCESS_1 */
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 80011a0:	f04f 32ff 	mov.w	r2, #4294967295
 80011a4:	2100      	movs	r1, #0
 80011a6:	2001      	movs	r0, #1
 80011a8:	f00d f89e 	bl	800e2e8 <osThreadFlagsWait>
     shci_user_evt_proc();
 80011ac:	f012 fbb6 	bl	801391c <shci_user_evt_proc>
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 80011b0:	e7f6      	b.n	80011a0 <ShciUserEvtProcess+0x8>
	...

080011b4 <shci_notify_asynch_evt>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void shci_notify_asynch_evt(void* pdata)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  osThreadFlagsSet(ShciUserEvtProcessId,1);
 80011bc:	4b04      	ldr	r3, [pc, #16]	; (80011d0 <shci_notify_asynch_evt+0x1c>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2101      	movs	r1, #1
 80011c2:	4618      	mov	r0, r3
 80011c4:	f00c ffde 	bl	800e184 <osThreadFlagsSet>
  return;
 80011c8:	bf00      	nop
}
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	200277a0 	.word	0x200277a0

080011d4 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  osSemaphoreRelease( SemShciId );
 80011dc:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <shci_cmd_resp_release+0x1c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f00d fcb3 	bl	800eb4c <osSemaphoreRelease>
  return;
 80011e6:	bf00      	nop
}
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	200277b4 	.word	0x200277b4

080011f4 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  osSemaphoreAcquire( SemShciId, osWaitForever );
 80011fc:	4b05      	ldr	r3, [pc, #20]	; (8001214 <shci_cmd_resp_wait+0x20>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f04f 31ff 	mov.w	r1, #4294967295
 8001204:	4618      	mov	r0, r3
 8001206:	f00d fc3b 	bl	800ea80 <osSemaphoreAcquire>
  return;
 800120a:	bf00      	nop
}
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	200277b4 	.word	0x200277b4

08001218 <TL_TRACES_EvtReceived>:

/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
#endif /* CFG_DEBUG_TRACE */
  /* Release buffer */
  TL_MM_EvtDone( hcievt );
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f012 ffad 	bl	8014180 <TL_MM_EvtDone>
}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <configureTimerForRunTimeStats>:

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
volatile unsigned long ulHighFrequencyTimerTicks;
__weak void configureTimerForRunTimeStats(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0

}
 8001232:	bf00      	nop
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
return HAL_GetTick();
 8001240:	f005 f846 	bl	80062d0 <HAL_GetTick>
 8001244:	4603      	mov	r3, r0
}
 8001246:	4618      	mov	r0, r3
 8001248:	bd80      	pop	{r7, pc}

0800124a <vApplicationTickHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 3 */
__weak void vApplicationTickHook( void )
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 800124e:	bf00      	nop
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
volatile uint8_t test=0;
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]

   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
	test += 1;
 8001262:	4b06      	ldr	r3, [pc, #24]	; (800127c <vApplicationStackOverflowHook+0x24>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	b2db      	uxtb	r3, r3
 8001268:	3301      	adds	r3, #1
 800126a:	b2da      	uxtb	r2, r3
 800126c:	4b03      	ldr	r3, [pc, #12]	; (800127c <vApplicationStackOverflowHook+0x24>)
 800126e:	701a      	strb	r2, [r3, #0]
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	2000022c 	.word	0x2000022c

08001280 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
	test += 1;
 8001284:	4b05      	ldr	r3, [pc, #20]	; (800129c <vApplicationMallocFailedHook+0x1c>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	b2db      	uxtb	r3, r3
 800128a:	3301      	adds	r3, #1
 800128c:	b2da      	uxtb	r2, r3
 800128e:	4b03      	ldr	r3, [pc, #12]	; (800129c <vApplicationMallocFailedHook+0x1c>)
 8001290:	701a      	strb	r2, [r3, #0]

}
 8001292:	bf00      	nop
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	2000022c 	.word	0x2000022c

080012a0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of messageI2C_Lock */
  messageI2C_LockHandle = osSemaphoreNew(1, 1, &messageI2C_Lock_attributes);
 80012a4:	4a64      	ldr	r2, [pc, #400]	; (8001438 <MX_FREERTOS_Init+0x198>)
 80012a6:	2101      	movs	r1, #1
 80012a8:	2001      	movs	r0, #1
 80012aa:	f00d fb4b 	bl	800e944 <osSemaphoreNew>
 80012ae:	4602      	mov	r2, r0
 80012b0:	4b62      	ldr	r3, [pc, #392]	; (800143c <MX_FREERTOS_Init+0x19c>)
 80012b2:	601a      	str	r2, [r3, #0]

  /* creation of locNotify */
  locNotifyHandle = osSemaphoreNew(1, 1, &locNotify_attributes);
 80012b4:	4a62      	ldr	r2, [pc, #392]	; (8001440 <MX_FREERTOS_Init+0x1a0>)
 80012b6:	2101      	movs	r1, #1
 80012b8:	2001      	movs	r0, #1
 80012ba:	f00d fb43 	bl	800e944 <osSemaphoreNew>
 80012be:	4602      	mov	r2, r0
 80012c0:	4b60      	ldr	r3, [pc, #384]	; (8001444 <MX_FREERTOS_Init+0x1a4>)
 80012c2:	601a      	str	r2, [r3, #0]

  /* creation of locComplete */
  locCompleteHandle = osSemaphoreNew(1, 1, &locComplete_attributes);
 80012c4:	4a60      	ldr	r2, [pc, #384]	; (8001448 <MX_FREERTOS_Init+0x1a8>)
 80012c6:	2101      	movs	r1, #1
 80012c8:	2001      	movs	r0, #1
 80012ca:	f00d fb3b 	bl	800e944 <osSemaphoreNew>
 80012ce:	4602      	mov	r2, r0
 80012d0:	4b5e      	ldr	r3, [pc, #376]	; (800144c <MX_FREERTOS_Init+0x1ac>)
 80012d2:	601a      	str	r2, [r3, #0]
//  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of viveTimer */
  viveTimerHandle = osTimerNew(get3D_location, osTimerPeriodic, NULL, &viveTimer_attributes);
 80012d4:	4b5e      	ldr	r3, [pc, #376]	; (8001450 <MX_FREERTOS_Init+0x1b0>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	2101      	movs	r1, #1
 80012da:	485e      	ldr	r0, [pc, #376]	; (8001454 <MX_FREERTOS_Init+0x1b4>)
 80012dc:	f00d f8dc 	bl	800e498 <osTimerNew>
 80012e0:	4602      	mov	r2, r0
 80012e2:	4b5d      	ldr	r3, [pc, #372]	; (8001458 <MX_FREERTOS_Init+0x1b8>)
 80012e4:	601a      	str	r2, [r3, #0]

  /* creation of watchDogTimer */
  watchDogTimerHandle = osTimerNew(watchDogReset, osTimerPeriodic, NULL, &watchDogTimer_attributes);
 80012e6:	4b5d      	ldr	r3, [pc, #372]	; (800145c <MX_FREERTOS_Init+0x1bc>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	2101      	movs	r1, #1
 80012ec:	485c      	ldr	r0, [pc, #368]	; (8001460 <MX_FREERTOS_Init+0x1c0>)
 80012ee:	f00d f8d3 	bl	800e498 <osTimerNew>
 80012f2:	4602      	mov	r2, r0
 80012f4:	4b5b      	ldr	r3, [pc, #364]	; (8001464 <MX_FREERTOS_Init+0x1c4>)
 80012f6:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
//  /* start timers, add new ones, ... */
  osTimerStart(watchDogTimerHandle, WATCHDOG_PERIOD);
 80012f8:	4b5a      	ldr	r3, [pc, #360]	; (8001464 <MX_FREERTOS_Init+0x1c4>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f241 3188 	movw	r1, #5000	; 0x1388
 8001300:	4618      	mov	r0, r3
 8001302:	f00d f94d 	bl	800e5a0 <osTimerStart>

  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of blinkMsgQueue */
  blinkMsgQueueHandle = osMessageQueueNew (10, 108, &blinkMsgQueue_attributes);
 8001306:	4a58      	ldr	r2, [pc, #352]	; (8001468 <MX_FREERTOS_Init+0x1c8>)
 8001308:	216c      	movs	r1, #108	; 0x6c
 800130a:	200a      	movs	r0, #10
 800130c:	f00d fc76 	bl	800ebfc <osMessageQueueNew>
 8001310:	4602      	mov	r2, r0
 8001312:	4b56      	ldr	r3, [pc, #344]	; (800146c <MX_FREERTOS_Init+0x1cc>)
 8001314:	601a      	str	r2, [r3, #0]

  /* creation of lightsSimpleQueue */
  lightsSimpleQueueHandle = osMessageQueueNew (3, 4, &lightsSimpleQueue_attributes);
 8001316:	4a56      	ldr	r2, [pc, #344]	; (8001470 <MX_FREERTOS_Init+0x1d0>)
 8001318:	2104      	movs	r1, #4
 800131a:	2003      	movs	r0, #3
 800131c:	f00d fc6e 	bl	800ebfc <osMessageQueueNew>
 8001320:	4602      	mov	r2, r0
 8001322:	4b54      	ldr	r3, [pc, #336]	; (8001474 <MX_FREERTOS_Init+0x1d4>)
 8001324:	601a      	str	r2, [r3, #0]

  /* creation of togLoggingQueue */
  togLoggingQueueHandle = osMessageQueueNew (4, 6, &togLoggingQueue_attributes);
 8001326:	4a54      	ldr	r2, [pc, #336]	; (8001478 <MX_FREERTOS_Init+0x1d8>)
 8001328:	2106      	movs	r1, #6
 800132a:	2004      	movs	r0, #4
 800132c:	f00d fc66 	bl	800ebfc <osMessageQueueNew>
 8001330:	4602      	mov	r2, r0
 8001332:	4b52      	ldr	r3, [pc, #328]	; (800147c <MX_FREERTOS_Init+0x1dc>)
 8001334:	601a      	str	r2, [r3, #0]

  /* creation of interProcessorMsgQueue */
  interProcessorMsgQueueHandle = osMessageQueueNew (10, 24, &interProcessorMsgQueue_attributes);
 8001336:	4a52      	ldr	r2, [pc, #328]	; (8001480 <MX_FREERTOS_Init+0x1e0>)
 8001338:	2118      	movs	r1, #24
 800133a:	200a      	movs	r0, #10
 800133c:	f00d fc5e 	bl	800ebfc <osMessageQueueNew>
 8001340:	4602      	mov	r2, r0
 8001342:	4b50      	ldr	r3, [pc, #320]	; (8001484 <MX_FREERTOS_Init+0x1e4>)
 8001344:	601a      	str	r2, [r3, #0]

  /* creation of inertialSensingQueue */
  inertialSensingQueueHandle = osMessageQueueNew (10, 40, &inertialSensingQueue_attributes);
 8001346:	4a50      	ldr	r2, [pc, #320]	; (8001488 <MX_FREERTOS_Init+0x1e8>)
 8001348:	2128      	movs	r1, #40	; 0x28
 800134a:	200a      	movs	r0, #10
 800134c:	f00d fc56 	bl	800ebfc <osMessageQueueNew>
 8001350:	4602      	mov	r2, r0
 8001352:	4b4e      	ldr	r3, [pc, #312]	; (800148c <MX_FREERTOS_Init+0x1ec>)
 8001354:	601a      	str	r2, [r3, #0]

  /* creation of activitySampleQueue */
  activitySampleQueueHandle = osMessageQueueNew (10, 16, &activitySampleQueue_attributes);
 8001356:	4a4e      	ldr	r2, [pc, #312]	; (8001490 <MX_FREERTOS_Init+0x1f0>)
 8001358:	2110      	movs	r1, #16
 800135a:	200a      	movs	r0, #10
 800135c:	f00d fc4e 	bl	800ebfc <osMessageQueueNew>
 8001360:	4602      	mov	r2, r0
 8001362:	4b4c      	ldr	r3, [pc, #304]	; (8001494 <MX_FREERTOS_Init+0x1f4>)
 8001364:	601a      	str	r2, [r3, #0]

  /* creation of rotationSampleQueue */
  rotationSampleQueueHandle = osMessageQueueNew (3, 24, &rotationSampleQueue_attributes);
 8001366:	4a4c      	ldr	r2, [pc, #304]	; (8001498 <MX_FREERTOS_Init+0x1f8>)
 8001368:	2118      	movs	r1, #24
 800136a:	2003      	movs	r0, #3
 800136c:	f00d fc46 	bl	800ebfc <osMessageQueueNew>
 8001370:	4602      	mov	r2, r0
 8001372:	4b4a      	ldr	r3, [pc, #296]	; (800149c <MX_FREERTOS_Init+0x1fc>)
 8001374:	601a      	str	r2, [r3, #0]

  /* creation of pulseQueue */
  pulseQueueHandle = osMessageQueueNew (10, 6, &pulseQueue_attributes);
 8001376:	4a4a      	ldr	r2, [pc, #296]	; (80014a0 <MX_FREERTOS_Init+0x200>)
 8001378:	2106      	movs	r1, #6
 800137a:	200a      	movs	r0, #10
 800137c:	f00d fc3e 	bl	800ebfc <osMessageQueueNew>
 8001380:	4602      	mov	r2, r0
 8001382:	4b48      	ldr	r3, [pc, #288]	; (80014a4 <MX_FREERTOS_Init+0x204>)
 8001384:	601a      	str	r2, [r3, #0]

  /* creation of viveQueue */
  viveQueueHandle = osMessageQueueNew (10, 24, &viveQueue_attributes);
 8001386:	4a48      	ldr	r2, [pc, #288]	; (80014a8 <MX_FREERTOS_Init+0x208>)
 8001388:	2118      	movs	r1, #24
 800138a:	200a      	movs	r0, #10
 800138c:	f00d fc36 	bl	800ebfc <osMessageQueueNew>
 8001390:	4602      	mov	r2, r0
 8001392:	4b46      	ldr	r3, [pc, #280]	; (80014ac <MX_FREERTOS_Init+0x20c>)
 8001394:	601a      	str	r2, [r3, #0]

  /* creation of statusQueue */
  statusQueueHandle = osMessageQueueNew (1, sizeof(uint32_t), &statusQueue_attributes);
 8001396:	4a46      	ldr	r2, [pc, #280]	; (80014b0 <MX_FREERTOS_Init+0x210>)
 8001398:	2104      	movs	r1, #4
 800139a:	2001      	movs	r0, #1
 800139c:	f00d fc2e 	bl	800ebfc <osMessageQueueNew>
 80013a0:	4602      	mov	r2, r0
 80013a2:	4b44      	ldr	r3, [pc, #272]	; (80014b4 <MX_FREERTOS_Init+0x214>)
 80013a4:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(DefaultTask, NULL, &defaultTask_attributes);
 80013a6:	4a44      	ldr	r2, [pc, #272]	; (80014b8 <MX_FREERTOS_Init+0x218>)
 80013a8:	2100      	movs	r1, #0
 80013aa:	4844      	ldr	r0, [pc, #272]	; (80014bc <MX_FREERTOS_Init+0x21c>)
 80013ac:	f00c fe3e 	bl	800e02c <osThreadNew>
 80013b0:	4602      	mov	r2, r0
 80013b2:	4b43      	ldr	r3, [pc, #268]	; (80014c0 <MX_FREERTOS_Init+0x220>)
 80013b4:	601a      	str	r2, [r3, #0]

  /* creation of frontLightsTask */
  frontLightsTaskHandle = osThreadNew(ThreadFrontLightsTask, NULL, &frontLightsTask_attributes);
 80013b6:	4a43      	ldr	r2, [pc, #268]	; (80014c4 <MX_FREERTOS_Init+0x224>)
 80013b8:	2100      	movs	r1, #0
 80013ba:	4843      	ldr	r0, [pc, #268]	; (80014c8 <MX_FREERTOS_Init+0x228>)
 80013bc:	f00c fe36 	bl	800e02c <osThreadNew>
 80013c0:	4602      	mov	r2, r0
 80013c2:	4b42      	ldr	r3, [pc, #264]	; (80014cc <MX_FREERTOS_Init+0x22c>)
 80013c4:	601a      	str	r2, [r3, #0]

  /* creation of masterTask */
  masterTaskHandle = osThreadNew(MasterThreadTask, NULL, &masterTask_attributes);
 80013c6:	4a42      	ldr	r2, [pc, #264]	; (80014d0 <MX_FREERTOS_Init+0x230>)
 80013c8:	2100      	movs	r1, #0
 80013ca:	4842      	ldr	r0, [pc, #264]	; (80014d4 <MX_FREERTOS_Init+0x234>)
 80013cc:	f00c fe2e 	bl	800e02c <osThreadNew>
 80013d0:	4602      	mov	r2, r0
 80013d2:	4b41      	ldr	r3, [pc, #260]	; (80014d8 <MX_FREERTOS_Init+0x238>)
 80013d4:	601a      	str	r2, [r3, #0]

  /* creation of inertialTask */
  inertialTaskHandle = osThreadNew(InertialSensingTask, NULL, &inertialTask_attributes);
 80013d6:	4a41      	ldr	r2, [pc, #260]	; (80014dc <MX_FREERTOS_Init+0x23c>)
 80013d8:	2100      	movs	r1, #0
 80013da:	4841      	ldr	r0, [pc, #260]	; (80014e0 <MX_FREERTOS_Init+0x240>)
 80013dc:	f00c fe26 	bl	800e02c <osThreadNew>
 80013e0:	4602      	mov	r2, r0
 80013e2:	4b40      	ldr	r3, [pc, #256]	; (80014e4 <MX_FREERTOS_Init+0x244>)
 80013e4:	601a      	str	r2, [r3, #0]

  /* creation of pulseTask */
  pulseTaskHandle = osThreadNew(PulseHandlerTask, NULL, &pulseTask_attributes);
 80013e6:	4a40      	ldr	r2, [pc, #256]	; (80014e8 <MX_FREERTOS_Init+0x248>)
 80013e8:	2100      	movs	r1, #0
 80013ea:	4840      	ldr	r0, [pc, #256]	; (80014ec <MX_FREERTOS_Init+0x24c>)
 80013ec:	f00c fe1e 	bl	800e02c <osThreadNew>
 80013f0:	4602      	mov	r2, r0
 80013f2:	4b3f      	ldr	r3, [pc, #252]	; (80014f0 <MX_FREERTOS_Init+0x250>)
 80013f4:	601a      	str	r2, [r3, #0]

  /* creation of interProcTask */
  interProcTaskHandle = osThreadNew(InterProcessorTask, NULL, &interProcTask_attributes);
 80013f6:	4a3f      	ldr	r2, [pc, #252]	; (80014f4 <MX_FREERTOS_Init+0x254>)
 80013f8:	2100      	movs	r1, #0
 80013fa:	483f      	ldr	r0, [pc, #252]	; (80014f8 <MX_FREERTOS_Init+0x258>)
 80013fc:	f00c fe16 	bl	800e02c <osThreadNew>
 8001400:	4602      	mov	r2, r0
 8001402:	4b3e      	ldr	r3, [pc, #248]	; (80014fc <MX_FREERTOS_Init+0x25c>)
 8001404:	601a      	str	r2, [r3, #0]

  /* creation of blinkTask */
  blinkTaskHandle = osThreadNew(BlinkTask, NULL, &blinkTask_attributes);
 8001406:	4a3e      	ldr	r2, [pc, #248]	; (8001500 <MX_FREERTOS_Init+0x260>)
 8001408:	2100      	movs	r1, #0
 800140a:	483e      	ldr	r0, [pc, #248]	; (8001504 <MX_FREERTOS_Init+0x264>)
 800140c:	f00c fe0e 	bl	800e02c <osThreadNew>
 8001410:	4602      	mov	r2, r0
 8001412:	4b3d      	ldr	r3, [pc, #244]	; (8001508 <MX_FREERTOS_Init+0x268>)
 8001414:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  // ensure binary notification semaphores are initially empty
  osSemaphoreAcquire(locNotifyHandle, 0);
 8001416:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <MX_FREERTOS_Init+0x1a4>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2100      	movs	r1, #0
 800141c:	4618      	mov	r0, r3
 800141e:	f00d fb2f 	bl	800ea80 <osSemaphoreAcquire>
  osSemaphoreAcquire(locCompleteHandle, 0);
 8001422:	4b0a      	ldr	r3, [pc, #40]	; (800144c <MX_FREERTOS_Init+0x1ac>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2100      	movs	r1, #0
 8001428:	4618      	mov	r0, r3
 800142a:	f00d fb29 	bl	800ea80 <osSemaphoreAcquire>

   /* add threads, ... */


	/* Init code for STM32_WPAN */
	APPE_Init();
 800142e:	f7ff fddb 	bl	8000fe8 <APPE_Init>


  /* USER CODE END RTOS_THREADS */

}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	08017718 	.word	0x08017718
 800143c:	200278a4 	.word	0x200278a4
 8001440:	08017728 	.word	0x08017728
 8001444:	20027ce8 	.word	0x20027ce8
 8001448:	08017738 	.word	0x08017738
 800144c:	20027ce0 	.word	0x20027ce0
 8001450:	080176f8 	.word	0x080176f8
 8001454:	08003b35 	.word	0x08003b35
 8001458:	20027894 	.word	0x20027894
 800145c:	08017708 	.word	0x08017708
 8001460:	0800151d 	.word	0x0800151d
 8001464:	20027cf8 	.word	0x20027cf8
 8001468:	08017608 	.word	0x08017608
 800146c:	20027cf4 	.word	0x20027cf4
 8001470:	08017620 	.word	0x08017620
 8001474:	200278ac 	.word	0x200278ac
 8001478:	08017638 	.word	0x08017638
 800147c:	20027cd8 	.word	0x20027cd8
 8001480:	08017650 	.word	0x08017650
 8001484:	200278b0 	.word	0x200278b0
 8001488:	08017668 	.word	0x08017668
 800148c:	200278a8 	.word	0x200278a8
 8001490:	08017680 	.word	0x08017680
 8001494:	2002789c 	.word	0x2002789c
 8001498:	08017698 	.word	0x08017698
 800149c:	200278b8 	.word	0x200278b8
 80014a0:	080176b0 	.word	0x080176b0
 80014a4:	200277a4 	.word	0x200277a4
 80014a8:	080176c8 	.word	0x080176c8
 80014ac:	200277a8 	.word	0x200277a8
 80014b0:	080176e0 	.word	0x080176e0
 80014b4:	200278b4 	.word	0x200278b4
 80014b8:	0801750c 	.word	0x0801750c
 80014bc:	0800150d 	.word	0x0800150d
 80014c0:	2002788c 	.word	0x2002788c
 80014c4:	08017530 	.word	0x08017530
 80014c8:	08004069 	.word	0x08004069
 80014cc:	20027898 	.word	0x20027898
 80014d0:	08017554 	.word	0x08017554
 80014d4:	08004349 	.word	0x08004349
 80014d8:	20027cdc 	.word	0x20027cdc
 80014dc:	08017578 	.word	0x08017578
 80014e0:	0800392d 	.word	0x0800392d
 80014e4:	20027cfc 	.word	0x20027cfc
 80014e8:	0801759c 	.word	0x0801759c
 80014ec:	08003aa5 	.word	0x08003aa5
 80014f0:	20027cec 	.word	0x20027cec
 80014f4:	080175c0 	.word	0x080175c0
 80014f8:	08003c5d 	.word	0x08003c5d
 80014fc:	20027ce4 	.word	0x20027ce4
 8001500:	080175e4 	.word	0x080175e4
 8001504:	08001539 	.word	0x08001539
 8001508:	20027890 	.word	0x20027890

0800150c <DefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_DefaultTask */
__weak void DefaultTask(void *argument)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001514:	2001      	movs	r0, #1
 8001516:	f00c ff7b 	bl	800e410 <osDelay>
 800151a:	e7fb      	b.n	8001514 <DefaultTask+0x8>

0800151c <watchDogReset>:
  /* USER CODE END DefaultTask */
}

/* watchDogReset function */
void watchDogReset(void *argument)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN watchDogReset */
	 HAL_IWDG_Refresh(&hiwdg);
 8001524:	4803      	ldr	r0, [pc, #12]	; (8001534 <watchDogReset+0x18>)
 8001526:	f009 f90b 	bl	800a740 <HAL_IWDG_Refresh>
  /* USER CODE END watchDogReset */
}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20028328 	.word	0x20028328

08001538 <BlinkTask>:
/**
 * @brief Thread initialization.
 * @param  None
 * @retval None
 */
void BlinkTask(void *argument) {
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]

	uint32_t evt;

	while (1) {
		evt = osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 8001540:	f04f 32ff 	mov.w	r2, #4294967295
 8001544:	2100      	movs	r1, #0
 8001546:	2001      	movs	r0, #1
 8001548:	f00c fece 	bl	800e2e8 <osThreadFlagsWait>
 800154c:	60f8      	str	r0, [r7, #12]

		// if signal was received successfully, start blink task
		if ((evt & 0x00000001U) == 0x00000001U) {
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f003 0301 	and.w	r3, r3, #1
 8001554:	2b00      	cmp	r3, #0
 8001556:	d0f3      	beq.n	8001540 <BlinkTask+0x8>

			// tell other threads that blink has been activated
			osMessageQueueGet(statusQueueHandle, &statusMessage, 0U, osWaitForever);
 8001558:	4b62      	ldr	r3, [pc, #392]	; (80016e4 <BlinkTask+0x1ac>)
 800155a:	6818      	ldr	r0, [r3, #0]
 800155c:	f04f 33ff 	mov.w	r3, #4294967295
 8001560:	2200      	movs	r2, #0
 8001562:	4961      	ldr	r1, [pc, #388]	; (80016e8 <BlinkTask+0x1b0>)
 8001564:	f00d fc44 	bl	800edf0 <osMessageQueueGet>
			statusMessage.blinkEnabled = 1;
 8001568:	4b5f      	ldr	r3, [pc, #380]	; (80016e8 <BlinkTask+0x1b0>)
 800156a:	2201      	movs	r2, #1
 800156c:	709a      	strb	r2, [r3, #2]
			osMessageQueuePut(statusQueueHandle, (void*) &statusMessage, 0U, 0);
 800156e:	4b5d      	ldr	r3, [pc, #372]	; (80016e4 <BlinkTask+0x1ac>)
 8001570:	6818      	ldr	r0, [r3, #0]
 8001572:	2300      	movs	r3, #0
 8001574:	2200      	movs	r2, #0
 8001576:	495c      	ldr	r1, [pc, #368]	; (80016e8 <BlinkTask+0x1b0>)
 8001578:	f00d fbc6 	bl	800ed08 <osMessageQueuePut>

			// start timer and PWM channel for blink LED
			HAL_TIM_Base_Start(&htim2);
 800157c:	485b      	ldr	r0, [pc, #364]	; (80016ec <BlinkTask+0x1b4>)
 800157e:	f00b fa71 	bl	800ca64 <HAL_TIM_Base_Start>
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001582:	2104      	movs	r1, #4
 8001584:	4859      	ldr	r0, [pc, #356]	; (80016ec <BlinkTask+0x1b4>)
 8001586:	f00b fb23 	bl	800cbd0 <HAL_TIM_PWM_Start>

			// start timer for ADC to sample at 1kHz
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*) blink_buffer, sizeof(blink_buffer));
 800158a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800158e:	4958      	ldr	r1, [pc, #352]	; (80016f0 <BlinkTask+0x1b8>)
 8001590:	4858      	ldr	r0, [pc, #352]	; (80016f4 <BlinkTask+0x1bc>)
 8001592:	f005 fa1d 	bl	80069d0 <HAL_ADC_Start_DMA>
			// message passing until told to stop
			//      note: DMA triggers callback where buffers are switched and the full one
			//      is passed by reference via queue to masterThread for packetization
			while (1) {
				// wait for data ready flag and/or stop task flasg
				evt = osThreadFlagsWait(0x00000006U, osFlagsWaitAny, osWaitForever);
 8001596:	f04f 32ff 	mov.w	r2, #4294967295
 800159a:	2100      	movs	r1, #0
 800159c:	2006      	movs	r0, #6
 800159e:	f00c fea3 	bl	800e2e8 <osThreadFlagsWait>
 80015a2:	60f8      	str	r0, [r7, #12]

				if ((evt & 0x00000004U) == 0x00000004U) {
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f003 0304 	and.w	r3, r3, #4
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d064      	beq.n	8001678 <BlinkTask+0x140>

					// interpolate timestamps for blink packets
					if (previousTick_ms == 0) {
 80015ae:	4b52      	ldr	r3, [pc, #328]	; (80016f8 <BlinkTask+0x1c0>)
 80015b0:	edd3 7a00 	vldr	s15, [r3]
 80015b4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80015b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015bc:	d108      	bne.n	80015d0 <BlinkTask+0x98>
						previousTick_ms = HAL_GetTick();
 80015be:	f004 fe87 	bl	80062d0 <HAL_GetTick>
 80015c2:	ee07 0a90 	vmov	s15, r0
 80015c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015ca:	4b4b      	ldr	r3, [pc, #300]	; (80016f8 <BlinkTask+0x1c0>)
 80015cc:	edc3 7a00 	vstr	s15, [r3]
					}
					tick_ms_diff = (HAL_GetTick() - previousTick_ms) / ((float) BLINK_ITERATOR_COUNT);
 80015d0:	f004 fe7e 	bl	80062d0 <HAL_GetTick>
 80015d4:	ee07 0a90 	vmov	s15, r0
 80015d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015dc:	4b46      	ldr	r3, [pc, #280]	; (80016f8 <BlinkTask+0x1c0>)
 80015de:	edd3 7a00 	vldr	s15, [r3]
 80015e2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015e6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80015ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015ee:	4b43      	ldr	r3, [pc, #268]	; (80016fc <BlinkTask+0x1c4>)
 80015f0:	edc3 7a00 	vstr	s15, [r3]

					// because of COAP packet size restrictions, separate blink packet into chunks of size BLINK_PACKET_SIZE
					for (iterator = 0; iterator < BLINK_ITERATOR_COUNT; iterator++) {
 80015f4:	4b42      	ldr	r3, [pc, #264]	; (8001700 <BlinkTask+0x1c8>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	e039      	b.n	8001670 <BlinkTask+0x138>

						// grab packet of size BLINK_PACKET_SIZE
						memcpy(blinkMsgBuffer_1.data, &(blink_buffer[iterator * BLINK_PACKET_SIZE]), BLINK_PACKET_SIZE);
 80015fc:	4b40      	ldr	r3, [pc, #256]	; (8001700 <BlinkTask+0x1c8>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2264      	movs	r2, #100	; 0x64
 8001602:	fb02 f303 	mul.w	r3, r2, r3
 8001606:	4a3a      	ldr	r2, [pc, #232]	; (80016f0 <BlinkTask+0x1b8>)
 8001608:	4413      	add	r3, r2
 800160a:	4a3e      	ldr	r2, [pc, #248]	; (8001704 <BlinkTask+0x1cc>)
 800160c:	4610      	mov	r0, r2
 800160e:	4619      	mov	r1, r3
 8001610:	2364      	movs	r3, #100	; 0x64
 8001612:	461a      	mov	r2, r3
 8001614:	f014 fc58 	bl	8015ec8 <memcpy>
						blinkMsgBuffer_1.tick_ms = previousTick_ms + tick_ms_diff;
 8001618:	4b37      	ldr	r3, [pc, #220]	; (80016f8 <BlinkTask+0x1c0>)
 800161a:	ed93 7a00 	vldr	s14, [r3]
 800161e:	4b37      	ldr	r3, [pc, #220]	; (80016fc <BlinkTask+0x1c4>)
 8001620:	edd3 7a00 	vldr	s15, [r3]
 8001624:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001628:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800162c:	ee17 2a90 	vmov	r2, s15
 8001630:	4b34      	ldr	r3, [pc, #208]	; (8001704 <BlinkTask+0x1cc>)
 8001632:	665a      	str	r2, [r3, #100]	; 0x64
						blinkMsgBuffer_1.payload_ID = payload_ID;
 8001634:	4b34      	ldr	r3, [pc, #208]	; (8001708 <BlinkTask+0x1d0>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a32      	ldr	r2, [pc, #200]	; (8001704 <BlinkTask+0x1cc>)
 800163a:	6693      	str	r3, [r2, #104]	; 0x68

						// add tick cnt
						previousTick_ms = blinkMsgBuffer_1.tick_ms;
 800163c:	4b31      	ldr	r3, [pc, #196]	; (8001704 <BlinkTask+0x1cc>)
 800163e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001640:	ee07 3a90 	vmov	s15, r3
 8001644:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001648:	4b2b      	ldr	r3, [pc, #172]	; (80016f8 <BlinkTask+0x1c0>)
 800164a:	edc3 7a00 	vstr	s15, [r3]
						payload_ID++;
 800164e:	4b2e      	ldr	r3, [pc, #184]	; (8001708 <BlinkTask+0x1d0>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	3301      	adds	r3, #1
 8001654:	4a2c      	ldr	r2, [pc, #176]	; (8001708 <BlinkTask+0x1d0>)
 8001656:	6013      	str	r3, [r2, #0]

						// put into queue
						osMessageQueuePut(blinkMsgQueueHandle, (void*) &blinkMsgBuffer_1, 0U, 0);
 8001658:	4b2c      	ldr	r3, [pc, #176]	; (800170c <BlinkTask+0x1d4>)
 800165a:	6818      	ldr	r0, [r3, #0]
 800165c:	2300      	movs	r3, #0
 800165e:	2200      	movs	r2, #0
 8001660:	4928      	ldr	r1, [pc, #160]	; (8001704 <BlinkTask+0x1cc>)
 8001662:	f00d fb51 	bl	800ed08 <osMessageQueuePut>
					for (iterator = 0; iterator < BLINK_ITERATOR_COUNT; iterator++) {
 8001666:	4b26      	ldr	r3, [pc, #152]	; (8001700 <BlinkTask+0x1c8>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	3301      	adds	r3, #1
 800166c:	4a24      	ldr	r2, [pc, #144]	; (8001700 <BlinkTask+0x1c8>)
 800166e:	6013      	str	r3, [r2, #0]
 8001670:	4b23      	ldr	r3, [pc, #140]	; (8001700 <BlinkTask+0x1c8>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2b09      	cmp	r3, #9
 8001676:	d9c1      	bls.n	80015fc <BlinkTask+0xc4>
					}
				}

				// stop timer and put thread in idle if signal was reset
				if ((evt & 0x00000002U) == 0x00000002U) {
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d089      	beq.n	8001596 <BlinkTask+0x5e>

					HAL_ADC_Stop_DMA(&hadc1);
 8001682:	481c      	ldr	r0, [pc, #112]	; (80016f4 <BlinkTask+0x1bc>)
 8001684:	f005 fa28 	bl	8006ad8 <HAL_ADC_Stop_DMA>
					HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8001688:	2104      	movs	r1, #4
 800168a:	4818      	ldr	r0, [pc, #96]	; (80016ec <BlinkTask+0x1b4>)
 800168c:	f00b faea 	bl	800cc64 <HAL_TIM_PWM_Stop>
					HAL_TIM_Base_Stop(&htim2);
 8001690:	4816      	ldr	r0, [pc, #88]	; (80016ec <BlinkTask+0x1b4>)
 8001692:	f00b fa11 	bl	800cab8 <HAL_TIM_Base_Stop>
					previousTick_ms = 0;
 8001696:	4b18      	ldr	r3, [pc, #96]	; (80016f8 <BlinkTask+0x1c0>)
 8001698:	f04f 0200 	mov.w	r2, #0
 800169c:	601a      	str	r2, [r3, #0]

					/* tell threads that blink is disabled */
					osMessageQueueGet(statusQueueHandle, &statusMessage, 0U, osWaitForever);
 800169e:	4b11      	ldr	r3, [pc, #68]	; (80016e4 <BlinkTask+0x1ac>)
 80016a0:	6818      	ldr	r0, [r3, #0]
 80016a2:	f04f 33ff 	mov.w	r3, #4294967295
 80016a6:	2200      	movs	r2, #0
 80016a8:	490f      	ldr	r1, [pc, #60]	; (80016e8 <BlinkTask+0x1b0>)
 80016aa:	f00d fba1 	bl	800edf0 <osMessageQueueGet>
					statusMessage.blinkEnabled = 0;
 80016ae:	4b0e      	ldr	r3, [pc, #56]	; (80016e8 <BlinkTask+0x1b0>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	709a      	strb	r2, [r3, #2]
					// notify 3D localization thread that blink is deactivating if active
					if (statusMessage.positionEnabled == 1) {
 80016b4:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <BlinkTask+0x1b0>)
 80016b6:	795b      	ldrb	r3, [r3, #5]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d104      	bne.n	80016c6 <BlinkTask+0x18e>
						osSemaphoreRelease(locNotifyHandle);
 80016bc:	4b14      	ldr	r3, [pc, #80]	; (8001710 <BlinkTask+0x1d8>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f00d fa43 	bl	800eb4c <osSemaphoreRelease>
					}
					osMessageQueuePut(statusQueueHandle, (void*) &statusMessage, 0U, 0);
 80016c6:	4b07      	ldr	r3, [pc, #28]	; (80016e4 <BlinkTask+0x1ac>)
 80016c8:	6818      	ldr	r0, [r3, #0]
 80016ca:	2300      	movs	r3, #0
 80016cc:	2200      	movs	r2, #0
 80016ce:	4906      	ldr	r1, [pc, #24]	; (80016e8 <BlinkTask+0x1b0>)
 80016d0:	f00d fb1a 	bl	800ed08 <osMessageQueuePut>

					// empty queue
					osMessageQueueReset(blinkMsgQueueHandle);
 80016d4:	4b0d      	ldr	r3, [pc, #52]	; (800170c <BlinkTask+0x1d4>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4618      	mov	r0, r3
 80016da:	f00d fbfb 	bl	800eed4 <osMessageQueueReset>

					break;
 80016de:	bf00      	nop
		evt = osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 80016e0:	e72e      	b.n	8001540 <BlinkTask+0x8>
 80016e2:	bf00      	nop
 80016e4:	200278b4 	.word	0x200278b4
 80016e8:	20027d04 	.word	0x20027d04
 80016ec:	20028490 	.word	0x20028490
 80016f0:	2000029c 	.word	0x2000029c
 80016f4:	200276d8 	.word	0x200276d8
 80016f8:	20000a74 	.word	0x20000a74
 80016fc:	20000a78 	.word	0x20000a78
 8001700:	20000a70 	.word	0x20000a70
 8001704:	20000230 	.word	0x20000230
 8001708:	20000a6c 	.word	0x20000a6c
 800170c:	20027cf4 	.word	0x20027cf4
 8001710:	20027ce8 	.word	0x20027ce8

08001714 <HAL_ADC_ConvCpltCallback>:
//volatile uint8_t i = 0;
//void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc) {
//	i++;
//}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
	blink_ptr = &blink_buffer[BLINK_HALF_BUFFER_SIZE];
 800171c:	4b06      	ldr	r3, [pc, #24]	; (8001738 <HAL_ADC_ConvCpltCallback+0x24>)
 800171e:	4a07      	ldr	r2, [pc, #28]	; (800173c <HAL_ADC_ConvCpltCallback+0x28>)
 8001720:	601a      	str	r2, [r3, #0]
	osThreadFlagsSet(blinkTaskHandle, 0x00000004U);
 8001722:	4b07      	ldr	r3, [pc, #28]	; (8001740 <HAL_ADC_ConvCpltCallback+0x2c>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2104      	movs	r1, #4
 8001728:	4618      	mov	r0, r3
 800172a:	f00c fd2b 	bl	800e184 <osThreadFlagsSet>

}
 800172e:	bf00      	nop
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20027d00 	.word	0x20027d00
 800173c:	20000684 	.word	0x20000684
 8001740:	20027890 	.word	0x20027890

08001744 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
	blink_ptr = blink_buffer;
 800174c:	4b06      	ldr	r3, [pc, #24]	; (8001768 <HAL_ADC_ConvHalfCpltCallback+0x24>)
 800174e:	4a07      	ldr	r2, [pc, #28]	; (800176c <HAL_ADC_ConvHalfCpltCallback+0x28>)
 8001750:	601a      	str	r2, [r3, #0]
	osThreadFlagsSet(blinkTaskHandle, 0x00000004U);
 8001752:	4b07      	ldr	r3, [pc, #28]	; (8001770 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2104      	movs	r1, #4
 8001758:	4618      	mov	r0, r3
 800175a:	f00c fd13 	bl	800e184 <osThreadFlagsSet>

}
 800175e:	bf00      	nop
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20027d00 	.word	0x20027d00
 800176c:	2000029c 	.word	0x2000029c
 8001770:	20027890 	.word	0x20027890

08001774 <LL_AHB2_GRP1_EnableClock>:
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800177c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001780:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001782:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4313      	orrs	r3, r2
 800178a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800178c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001790:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4013      	ands	r3, r2
 8001796:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001798:	68fb      	ldr	r3, [r7, #12]
}
 800179a:	bf00      	nop
 800179c:	3714      	adds	r7, #20
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
	...

080017a8 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 80017ac:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <MX_COMP1_Init+0x50>)
 80017ae:	4a13      	ldr	r2, [pc, #76]	; (80017fc <MX_COMP1_Init+0x54>)
 80017b0:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_1_2VREFINT;
 80017b2:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <MX_COMP1_Init+0x50>)
 80017b4:	4a12      	ldr	r2, [pc, #72]	; (8001800 <MX_COMP1_Init+0x58>)
 80017b6:	611a      	str	r2, [r3, #16]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO3;
 80017b8:	4b0f      	ldr	r3, [pc, #60]	; (80017f8 <MX_COMP1_Init+0x50>)
 80017ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017be:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80017c0:	4b0d      	ldr	r3, [pc, #52]	; (80017f8 <MX_COMP1_Init+0x50>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80017c6:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <MX_COMP1_Init+0x50>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80017cc:	4b0a      	ldr	r3, [pc, #40]	; (80017f8 <MX_COMP1_Init+0x50>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	61da      	str	r2, [r3, #28]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 80017d2:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <MX_COMP1_Init+0x50>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	609a      	str	r2, [r3, #8]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 80017d8:	4b07      	ldr	r3, [pc, #28]	; (80017f8 <MX_COMP1_Init+0x50>)
 80017da:	2200      	movs	r2, #0
 80017dc:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 80017de:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <MX_COMP1_Init+0x50>)
 80017e0:	2231      	movs	r2, #49	; 0x31
 80017e2:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80017e4:	4804      	ldr	r0, [pc, #16]	; (80017f8 <MX_COMP1_Init+0x50>)
 80017e6:	f005 ffdd 	bl	80077a4 <HAL_COMP_Init>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_COMP1_Init+0x4c>
  {
    Error_Handler();
 80017f0:	f002 fda2 	bl	8004338 <Error_Handler>
  }

}
 80017f4:	bf00      	nop
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	20027d0c 	.word	0x20027d0c
 80017fc:	40010200 	.word	0x40010200
 8001800:	00c00010 	.word	0x00c00010

08001804 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b088      	sub	sp, #32
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180c:	f107 030c 	add.w	r3, r7, #12
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
 8001818:	60da      	str	r2, [r3, #12]
 800181a:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a0f      	ldr	r2, [pc, #60]	; (8001860 <HAL_COMP_MspInit+0x5c>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d117      	bne.n	8001856 <HAL_COMP_MspInit+0x52>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001826:	2001      	movs	r0, #1
 8001828:	f7ff ffa4 	bl	8001774 <LL_AHB2_GRP1_EnableClock>
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = LH_SIG_Pin;
 800182c:	2302      	movs	r3, #2
 800182e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001830:	2303      	movs	r3, #3
 8001832:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(LH_SIG_GPIO_Port, &GPIO_InitStruct);
 8001838:	f107 030c 	add.w	r3, r7, #12
 800183c:	4619      	mov	r1, r3
 800183e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001842:	f006 fdff 	bl	8008444 <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(COMP_IRQn, 5, 0);
 8001846:	2200      	movs	r2, #0
 8001848:	2105      	movs	r1, #5
 800184a:	2016      	movs	r0, #22
 800184c:	f006 fa73 	bl	8007d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP_IRQn);
 8001850:	2016      	movs	r0, #22
 8001852:	f006 fa8a 	bl	8007d6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 8001856:	bf00      	nop
 8001858:	3720      	adds	r7, #32
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40010200 	.word	0x40010200

08001864 <process_pulse_lengths>:
    kPhaseFixAcquired = 4,
    kPhaseFixFinal = 16,
};

//length of pulse_lens is num_base_stations
void process_pulse_lengths(CyclePhaseClassifier * self, uint32_t cycle_idx, const uint16_t *pulse_lens){
 8001864:	b480      	push	{r7}
 8001866:	b089      	sub	sp, #36	; 0x24
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
	int cur_phase_id = -1;
 8001870:	f04f 33ff 	mov.w	r3, #4294967295
 8001874:	61fb      	str	r3, [r7, #28]
	if(pulse_lens[0] > 0 && pulse_lens[1] > 0){
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	881b      	ldrh	r3, [r3, #0]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d02a      	beq.n	80018d4 <process_pulse_lengths+0x70>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	3302      	adds	r3, #2
 8001882:	881b      	ldrh	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d025      	beq.n	80018d4 <process_pulse_lengths+0x70>
		uint8_t cur_more = pulse_lens[0] > pulse_lens[1];
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	881a      	ldrh	r2, [r3, #0]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	3302      	adds	r3, #2
 8001890:	881b      	ldrh	r3, [r3, #0]
 8001892:	429a      	cmp	r2, r3
 8001894:	bf8c      	ite	hi
 8001896:	2301      	movhi	r3, #1
 8001898:	2300      	movls	r3, #0
 800189a:	b2db      	uxtb	r3, r3
 800189c:	76fb      	strb	r3, [r7, #27]
        if (cycle_idx == self->prev_full_cycle_idx_ + 1) {
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	3301      	adds	r3, #1
 80018a4:	68ba      	ldr	r2, [r7, #8]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d10e      	bne.n	80018c8 <process_pulse_lengths+0x64>
            // To get current phase, we use simple fact that in phases 0 and 1, first pulse is shorter than the second,
            // and in phases 2, 3 it is longer. This allows us to estimate current phase using comparison between
            // the pair of pulses in current cycle (cur_more) and the previous one.
            self->phase_history_ = (self->phase_history_ << 1) | cur_more;  // phase_history_ keeps a bit for each pulse comparison.
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	005a      	lsls	r2, r3, #1
 80018b0:	7efb      	ldrb	r3, [r7, #27]
 80018b2:	431a      	orrs	r2, r3
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	605a      	str	r2, [r3, #4]
            static const char phases[4] = {1, 2, 0, 3};
            cur_phase_id = phases[self->phase_history_ & 0x3];  // 2 least significant bits give us enough info to get phase.
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f003 0303 	and.w	r3, r3, #3
 80018c0:	4a1c      	ldr	r2, [pc, #112]	; (8001934 <process_pulse_lengths+0xd0>)
 80018c2:	5cd3      	ldrb	r3, [r2, r3]
 80018c4:	61fb      	str	r3, [r7, #28]
 80018c6:	e002      	b.n	80018ce <process_pulse_lengths+0x6a>
            //UART_Print_int32_t(cur_phase_id);
        }
        else {
            self->phase_history_ = cur_more;
 80018c8:	7efa      	ldrb	r2, [r7, #27]
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	605a      	str	r2, [r3, #4]
        }
        self->prev_full_cycle_idx_ = cycle_idx;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	68ba      	ldr	r2, [r7, #8]
 80018d2:	601a      	str	r2, [r3, #0]
	}

    // If we haven't achieved final fix yet, check the cur_phase_id is as expected.
    if (cur_phase_id >= 0 && self->fix_level_ < kPhaseFixFinal) {
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	db26      	blt.n	8001928 <process_pulse_lengths+0xc4>
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	2b0f      	cmp	r3, #15
 80018e0:	dc22      	bgt.n	8001928 <process_pulse_lengths+0xc4>
        if (self->fix_level_ == kPhaseFixNone) {
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d10a      	bne.n	8001900 <process_pulse_lengths+0x9c>
            // Use current phase_id as the candidate.
            self->fix_level_ = kPhaseFixCandidate;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2201      	movs	r2, #1
 80018ee:	609a      	str	r2, [r3, #8]
            self->phase_shift_ = (cur_phase_id - cycle_idx) & 0x3;
 80018f0:	69fa      	ldr	r2, [r7, #28]
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	f003 0203 	and.w	r2, r3, #3
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	60da      	str	r2, [r3, #12]
            // Either add or remove confidence that the phase_shift_ is correct.
            int expected_phase_id = (cycle_idx + self->phase_shift_) & 0x3;
            self->fix_level_ += (cur_phase_id == expected_phase_id) ? +1 : -1;
        }
    }
}
 80018fe:	e013      	b.n	8001928 <process_pulse_lengths+0xc4>
            int expected_phase_id = (cycle_idx + self->phase_shift_) & 0x3;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	68da      	ldr	r2, [r3, #12]
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	4413      	add	r3, r2
 8001908:	f003 0303 	and.w	r3, r3, #3
 800190c:	617b      	str	r3, [r7, #20]
            self->fix_level_ += (cur_phase_id == expected_phase_id) ? +1 : -1;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	69f9      	ldr	r1, [r7, #28]
 8001914:	697a      	ldr	r2, [r7, #20]
 8001916:	4291      	cmp	r1, r2
 8001918:	d101      	bne.n	800191e <process_pulse_lengths+0xba>
 800191a:	2201      	movs	r2, #1
 800191c:	e001      	b.n	8001922 <process_pulse_lengths+0xbe>
 800191e:	f04f 32ff 	mov.w	r2, #4294967295
 8001922:	441a      	add	r2, r3
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	609a      	str	r2, [r3, #8]
}
 8001928:	bf00      	nop
 800192a:	3724      	adds	r7, #36	; 0x24
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	08017748 	.word	0x08017748

08001938 <get_phase>:
float expected_pulse_len(CyclePhaseClassifier * self, uint8_t skip, uint8_t data, uint8_t axis) {
    // See https://github.com/nairol/LighthouseRedox/blob/master/docs/Light%20Emissions.md
    return self->pulse_base_len_ + (skip << 2 | data << 1 | axis) * 10.416f;
}

int get_phase(CyclePhaseClassifier * self, uint32_t cycle_idx) {
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
    if (self->fix_level_ >= kPhaseFixAcquired) {
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	2b03      	cmp	r3, #3
 8001948:	dd06      	ble.n	8001958 <get_phase+0x20>
        return (cycle_idx + self->phase_shift_) & 0x3;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	68da      	ldr	r2, [r3, #12]
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	4413      	add	r3, r2
 8001952:	f003 0303 	and.w	r3, r3, #3
 8001956:	e001      	b.n	800195c <get_phase+0x24>
    } else {
        return -1;
 8001958:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800195c:	4618      	mov	r0, r3
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <reset>:

void reset(CyclePhaseClassifier * self) {
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
    self->fix_level_ = kPhaseFixNone;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	609a      	str	r2, [r3, #8]
    self->prev_full_cycle_idx_ = -1;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f04f 32ff 	mov.w	r2, #4294967295
 800197c:	601a      	str	r2, [r3, #0]
    self->pulse_base_len_ = 62.5f;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a05      	ldr	r2, [pc, #20]	; (8001998 <reset+0x30>)
 8001982:	611a      	str	r2, [r3, #16]
    self->phase_history_ = 0;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	605a      	str	r2, [r3, #4]
}
 800198a:	bf00      	nop
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	427a0000 	.word	0x427a0000

0800199c <LL_AHB1_GRP1_EnableClock>:
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80019a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80019aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80019b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4013      	ands	r3, r2
 80019be:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019c0:	68fb      	ldr	r3, [r7, #12]
}
 80019c2:	bf00      	nop
 80019c4:	3714      	adds	r7, #20
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr

080019ce <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80019d2:	2004      	movs	r0, #4
 80019d4:	f7ff ffe2 	bl	800199c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019d8:	2001      	movs	r0, #1
 80019da:	f7ff ffdf 	bl	800199c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80019de:	2200      	movs	r2, #0
 80019e0:	2105      	movs	r1, #5
 80019e2:	200b      	movs	r0, #11
 80019e4:	f006 f9a7 	bl	8007d36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80019e8:	200b      	movs	r0, #11
 80019ea:	f006 f9be 	bl	8007d6a <HAL_NVIC_EnableIRQ>

}
 80019ee:	bf00      	nop
 80019f0:	bd80      	pop	{r7, pc}
	...

080019f4 <IMU_begin>:

/* Functions Definition ------------------------------------------------------*/
//Attempt communication with the device
//Return true if we got a 'Polo' back from Marco
bool IMU_begin(uint8_t deviceAddress, uint8_t intPin, GPIO_TypeDef* intPort)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	603a      	str	r2, [r7, #0]
 80019fe:	71fb      	strb	r3, [r7, #7]
 8001a00:	460b      	mov	r3, r1
 8001a02:	71bb      	strb	r3, [r7, #6]
	_deviceAddress = deviceAddress << 1; //If provided, store the I2C address from user
 8001a04:	79fb      	ldrb	r3, [r7, #7]
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	b2da      	uxtb	r2, r3
 8001a0a:	4b12      	ldr	r3, [pc, #72]	; (8001a54 <IMU_begin+0x60>)
 8001a0c:	701a      	strb	r2, [r3, #0]
//	_i2cPort = &wirePort;			//Grab which port the user wants us to use
	_int = intPin;					//Get the pin that the user wants to use for interrupts. By default, it's NULL and we'll not use it in dataAvailable() function.
 8001a0e:	4a12      	ldr	r2, [pc, #72]	; (8001a58 <IMU_begin+0x64>)
 8001a10:	79bb      	ldrb	r3, [r7, #6]
 8001a12:	7013      	strb	r3, [r2, #0]
	_intPort = intPort;
 8001a14:	4a11      	ldr	r2, [pc, #68]	; (8001a5c <IMU_begin+0x68>)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	6013      	str	r3, [r2, #0]
	//But if they forget, we start the hardware here.
	//_i2cPort->begin();


	//Begin by resetting the IMU
	IMU_softReset();
 8001a1a:	f000 fa85 	bl	8001f28 <IMU_softReset>

	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 8001a1e:	4b10      	ldr	r3, [pc, #64]	; (8001a60 <IMU_begin+0x6c>)
 8001a20:	22f9      	movs	r2, #249	; 0xf9
 8001a22:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;							  //Reserved
 8001a24:	4b0e      	ldr	r3, [pc, #56]	; (8001a60 <IMU_begin+0x6c>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	705a      	strb	r2, [r3, #1]


	//Transmit packet on channel 2, 2 bytes
	IMU_sendPacket(CHANNEL_CONTROL, 2);
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	2102      	movs	r1, #2
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f000 fc12 	bl	8002258 <IMU_sendPacket>

	//Now we wait for response
	if (IMU_receivePacket() == true)
 8001a34:	f000 fb68 	bl	8002108 <IMU_receivePacket>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d005      	beq.n	8001a4a <IMU_begin+0x56>
	{
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 8001a3e:	4b08      	ldr	r3, [pc, #32]	; (8001a60 <IMU_begin+0x6c>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	2bf8      	cmp	r3, #248	; 0xf8
 8001a44:	d101      	bne.n	8001a4a <IMU_begin+0x56>
		{
			return (true);
 8001a46:	2301      	movs	r3, #1
 8001a48:	e000      	b.n	8001a4c <IMU_begin+0x58>
		}
	}

	return (false); //Something went wrong
 8001a4a:	2300      	movs	r3, #0
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	20000006 	.word	0x20000006
 8001a58:	20027d8e 	.word	0x20027d8e
 8001a5c:	20027e54 	.word	0x20027e54
 8001a60:	20027dcc 	.word	0x20027dcc

08001a64 <IMU_dataAvailable>:
//}

//Updates the latest variables if possible
//Returns false if new readings are not available
bool IMU_dataAvailable(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
	//If we have an interrupt pin connection available, check if data is available.
	//If int pin is not set, then we'll rely on receivePacket() to timeout
	//See issue 13: https://github.com/sparkfun/SparkFun_BNO080_Arduino_Library/issues/13
	if (_int != 255)
 8001a68:	4b17      	ldr	r3, [pc, #92]	; (8001ac8 <IMU_dataAvailable+0x64>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2bff      	cmp	r3, #255	; 0xff
 8001a6e:	d00d      	beq.n	8001a8c <IMU_dataAvailable+0x28>
	{
		if( HAL_GPIO_ReadPin(_intPort, _int) == GPIO_PIN_SET)
 8001a70:	4b16      	ldr	r3, [pc, #88]	; (8001acc <IMU_dataAvailable+0x68>)
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	4b14      	ldr	r3, [pc, #80]	; (8001ac8 <IMU_dataAvailable+0x64>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4610      	mov	r0, r2
 8001a7e:	f006 fe51 	bl	8008724 <HAL_GPIO_ReadPin>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d101      	bne.n	8001a8c <IMU_dataAvailable+0x28>
			return (false);
 8001a88:	2300      	movs	r3, #0
 8001a8a:	e01b      	b.n	8001ac4 <IMU_dataAvailable+0x60>
//			return (false);
	}

//	if(HAL_GPIO_ReadPin(_intPort, _int) == GPIO_PIN_SET)
//	{
	if (IMU_receivePacket() == true)
 8001a8c:	f000 fb3c 	bl	8002108 <IMU_receivePacket>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d015      	beq.n	8001ac2 <IMU_dataAvailable+0x5e>
	{
		//Check to see if this packet is a sensor reporting its data to us
		if (shtpHeader[2] == CHANNEL_REPORTS && shtpData[0] == SHTP_REPORT_BASE_TIMESTAMP)
 8001a96:	4b0e      	ldr	r3, [pc, #56]	; (8001ad0 <IMU_dataAvailable+0x6c>)
 8001a98:	789b      	ldrb	r3, [r3, #2]
 8001a9a:	2203      	movs	r2, #3
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d107      	bne.n	8001ab0 <IMU_dataAvailable+0x4c>
 8001aa0:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <IMU_dataAvailable+0x70>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	2bfb      	cmp	r3, #251	; 0xfb
 8001aa6:	d103      	bne.n	8001ab0 <IMU_dataAvailable+0x4c>
		{
			IMU_parseInputReport(); //This will update the rawAccelX, etc variables depending on which feature report is found
 8001aa8:	f000 f832 	bl	8001b10 <IMU_parseInputReport>
			return (true);
 8001aac:	2301      	movs	r3, #1
 8001aae:	e009      	b.n	8001ac4 <IMU_dataAvailable+0x60>
		}
		else if (shtpHeader[2] == CHANNEL_CONTROL)
 8001ab0:	4b07      	ldr	r3, [pc, #28]	; (8001ad0 <IMU_dataAvailable+0x6c>)
 8001ab2:	789b      	ldrb	r3, [r3, #2]
 8001ab4:	2202      	movs	r2, #2
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d103      	bne.n	8001ac2 <IMU_dataAvailable+0x5e>
		{
			IMU_parseCommandReport(); //This will update responses to commands, calibrationStatus, etc.
 8001aba:	f000 f80d 	bl	8001ad8 <IMU_parseCommandReport>
			return (true);
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e000      	b.n	8001ac4 <IMU_dataAvailable+0x60>
		}
	}
//	}
	return (false);
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	20027d8e 	.word	0x20027d8e
 8001acc:	20027e54 	.word	0x20027e54
 8001ad0:	20027d3c 	.word	0x20027d3c
 8001ad4:	20027dcc 	.word	0x20027dcc

08001ad8 <IMU_parseCommandReport>:
//shtpData[5 + 5]: R5
//shtpData[5 + 6]: R6
//shtpData[5 + 7]: R7
//shtpData[5 + 8]: R8
void IMU_parseCommandReport(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
	if (shtpData[0] == SHTP_REPORT_COMMAND_RESPONSE)
 8001ade:	4b0a      	ldr	r3, [pc, #40]	; (8001b08 <IMU_parseCommandReport+0x30>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	2bf1      	cmp	r3, #241	; 0xf1
 8001ae4:	d109      	bne.n	8001afa <IMU_parseCommandReport+0x22>
	{
		//The BNO080 responds with this report to command requests. It's up to use to remember which command we issued.
		uint8_t command = shtpData[2]; //This is the Command byte of the response
 8001ae6:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <IMU_parseCommandReport+0x30>)
 8001ae8:	789b      	ldrb	r3, [r3, #2]
 8001aea:	71fb      	strb	r3, [r7, #7]

		if (command == COMMAND_ME_CALIBRATE)
 8001aec:	79fb      	ldrb	r3, [r7, #7]
 8001aee:	2b07      	cmp	r3, #7
 8001af0:	d103      	bne.n	8001afa <IMU_parseCommandReport+0x22>
		{
			calibrationStatus = shtpData[5 + 0]; //R0 - Status (0 = success, non-zero = fail)
 8001af2:	4b05      	ldr	r3, [pc, #20]	; (8001b08 <IMU_parseCommandReport+0x30>)
 8001af4:	795a      	ldrb	r2, [r3, #5]
 8001af6:	4b05      	ldr	r3, [pc, #20]	; (8001b0c <IMU_parseCommandReport+0x34>)
 8001af8:	701a      	strb	r2, [r3, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 8001afa:	bf00      	nop
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	20027dcc 	.word	0x20027dcc
 8001b0c:	20027e7f 	.word	0x20027e7f

08001b10 <IMU_parseInputReport>:
//shtpData[6:7]: j/accel y/gyro y/etc
//shtpData[8:9]: k/accel z/gyro z/etc
//shtpData[10:11]: real/gyro temp/etc
//shtpData[12:13]: Accuracy estimate
void IMU_parseInputReport(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)shtpHeader[1] << 8 | shtpHeader[0]);
 8001b16:	4b96      	ldr	r3, [pc, #600]	; (8001d70 <IMU_parseInputReport+0x260>)
 8001b18:	785b      	ldrb	r3, [r3, #1]
 8001b1a:	021b      	lsls	r3, r3, #8
 8001b1c:	b21a      	sxth	r2, r3
 8001b1e:	4b94      	ldr	r3, [pc, #592]	; (8001d70 <IMU_parseInputReport+0x260>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	b21b      	sxth	r3, r3
 8001b24:	4313      	orrs	r3, r2
 8001b26:	823b      	strh	r3, [r7, #16]
	dataLength &= ~(1 << 15); //Clear the MSbit. This bit indicates if this package is a continuation of the last.
 8001b28:	8a3b      	ldrh	r3, [r7, #16]
 8001b2a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001b2e:	823b      	strh	r3, [r7, #16]
	//Ignore it for now. TODO catch this as an error and exit

	dataLength -= 4; //Remove the header bytes from the data count
 8001b30:	8a3b      	ldrh	r3, [r7, #16]
 8001b32:	3b04      	subs	r3, #4
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	823b      	strh	r3, [r7, #16]

	timeStamp = ((uint32_t)shtpData[4] << (8 * 3)) | ((uint32_t)shtpData[3] << (8 * 2)) | ((uint32_t)shtpData[2] << (8 * 1)) | ((uint32_t)shtpData[1] << (8 * 0));
 8001b38:	4b8e      	ldr	r3, [pc, #568]	; (8001d74 <IMU_parseInputReport+0x264>)
 8001b3a:	791b      	ldrb	r3, [r3, #4]
 8001b3c:	061a      	lsls	r2, r3, #24
 8001b3e:	4b8d      	ldr	r3, [pc, #564]	; (8001d74 <IMU_parseInputReport+0x264>)
 8001b40:	78db      	ldrb	r3, [r3, #3]
 8001b42:	041b      	lsls	r3, r3, #16
 8001b44:	431a      	orrs	r2, r3
 8001b46:	4b8b      	ldr	r3, [pc, #556]	; (8001d74 <IMU_parseInputReport+0x264>)
 8001b48:	789b      	ldrb	r3, [r3, #2]
 8001b4a:	021b      	lsls	r3, r3, #8
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	4a89      	ldr	r2, [pc, #548]	; (8001d74 <IMU_parseInputReport+0x264>)
 8001b50:	7852      	ldrb	r2, [r2, #1]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	4a88      	ldr	r2, [pc, #544]	; (8001d78 <IMU_parseInputReport+0x268>)
 8001b56:	6013      	str	r3, [r2, #0]

	uint8_t status = shtpData[5 + 2] & 0x03; //Get status bits
 8001b58:	4b86      	ldr	r3, [pc, #536]	; (8001d74 <IMU_parseInputReport+0x264>)
 8001b5a:	79db      	ldrb	r3, [r3, #7]
 8001b5c:	f003 0303 	and.w	r3, r3, #3
 8001b60:	73fb      	strb	r3, [r7, #15]
	uint16_t data1 = (uint16_t)shtpData[5 + 5] << 8 | shtpData[5 + 4];
 8001b62:	4b84      	ldr	r3, [pc, #528]	; (8001d74 <IMU_parseInputReport+0x264>)
 8001b64:	7a9b      	ldrb	r3, [r3, #10]
 8001b66:	021b      	lsls	r3, r3, #8
 8001b68:	b21a      	sxth	r2, r3
 8001b6a:	4b82      	ldr	r3, [pc, #520]	; (8001d74 <IMU_parseInputReport+0x264>)
 8001b6c:	7a5b      	ldrb	r3, [r3, #9]
 8001b6e:	b21b      	sxth	r3, r3
 8001b70:	4313      	orrs	r3, r2
 8001b72:	b21b      	sxth	r3, r3
 8001b74:	81bb      	strh	r3, [r7, #12]
	uint16_t data2 = (uint16_t)shtpData[5 + 7] << 8 | shtpData[5 + 6];
 8001b76:	4b7f      	ldr	r3, [pc, #508]	; (8001d74 <IMU_parseInputReport+0x264>)
 8001b78:	7b1b      	ldrb	r3, [r3, #12]
 8001b7a:	021b      	lsls	r3, r3, #8
 8001b7c:	b21a      	sxth	r2, r3
 8001b7e:	4b7d      	ldr	r3, [pc, #500]	; (8001d74 <IMU_parseInputReport+0x264>)
 8001b80:	7adb      	ldrb	r3, [r3, #11]
 8001b82:	b21b      	sxth	r3, r3
 8001b84:	4313      	orrs	r3, r2
 8001b86:	b21b      	sxth	r3, r3
 8001b88:	817b      	strh	r3, [r7, #10]
	uint16_t data3 = (uint16_t)shtpData[5 + 9] << 8 | shtpData[5 + 8];
 8001b8a:	4b7a      	ldr	r3, [pc, #488]	; (8001d74 <IMU_parseInputReport+0x264>)
 8001b8c:	7b9b      	ldrb	r3, [r3, #14]
 8001b8e:	021b      	lsls	r3, r3, #8
 8001b90:	b21a      	sxth	r2, r3
 8001b92:	4b78      	ldr	r3, [pc, #480]	; (8001d74 <IMU_parseInputReport+0x264>)
 8001b94:	7b5b      	ldrb	r3, [r3, #13]
 8001b96:	b21b      	sxth	r3, r3
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	b21b      	sxth	r3, r3
 8001b9c:	813b      	strh	r3, [r7, #8]
	uint16_t data4 = 0;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	82fb      	strh	r3, [r7, #22]
	uint16_t data5 = 0; //We would need to change this to uin32_t to capture time stamp value on Raw Accel/Gyro/Mag reports
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	82bb      	strh	r3, [r7, #20]

	if (dataLength - 5 > 9)
 8001ba6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001baa:	3b05      	subs	r3, #5
 8001bac:	2b09      	cmp	r3, #9
 8001bae:	dd09      	ble.n	8001bc4 <IMU_parseInputReport+0xb4>
	{
		data4 = (uint16_t)shtpData[5 + 11] << 8 | shtpData[5 + 10];
 8001bb0:	4b70      	ldr	r3, [pc, #448]	; (8001d74 <IMU_parseInputReport+0x264>)
 8001bb2:	7c1b      	ldrb	r3, [r3, #16]
 8001bb4:	021b      	lsls	r3, r3, #8
 8001bb6:	b21a      	sxth	r2, r3
 8001bb8:	4b6e      	ldr	r3, [pc, #440]	; (8001d74 <IMU_parseInputReport+0x264>)
 8001bba:	7bdb      	ldrb	r3, [r3, #15]
 8001bbc:	b21b      	sxth	r3, r3
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	b21b      	sxth	r3, r3
 8001bc2:	82fb      	strh	r3, [r7, #22]
	}
	if (dataLength - 5 > 11)
 8001bc4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001bc8:	3b05      	subs	r3, #5
 8001bca:	2b0b      	cmp	r3, #11
 8001bcc:	dd09      	ble.n	8001be2 <IMU_parseInputReport+0xd2>
	{
		data5 = (uint16_t)shtpData[5 + 13] << 8 | shtpData[5 + 12];
 8001bce:	4b69      	ldr	r3, [pc, #420]	; (8001d74 <IMU_parseInputReport+0x264>)
 8001bd0:	7c9b      	ldrb	r3, [r3, #18]
 8001bd2:	021b      	lsls	r3, r3, #8
 8001bd4:	b21a      	sxth	r2, r3
 8001bd6:	4b67      	ldr	r3, [pc, #412]	; (8001d74 <IMU_parseInputReport+0x264>)
 8001bd8:	7c5b      	ldrb	r3, [r3, #17]
 8001bda:	b21b      	sxth	r3, r3
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	b21b      	sxth	r3, r3
 8001be0:	82bb      	strh	r3, [r7, #20]
	}

	//Store these generic values to their proper global variable
	if (shtpData[5] == SENSOR_REPORTID_ACCELEROMETER)
 8001be2:	4b64      	ldr	r3, [pc, #400]	; (8001d74 <IMU_parseInputReport+0x264>)
 8001be4:	795b      	ldrb	r3, [r3, #5]
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d10d      	bne.n	8001c06 <IMU_parseInputReport+0xf6>
	{
		accelAccuracy = status;
 8001bea:	7bfb      	ldrb	r3, [r7, #15]
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	4b63      	ldr	r3, [pc, #396]	; (8001d7c <IMU_parseInputReport+0x26c>)
 8001bf0:	801a      	strh	r2, [r3, #0]
		rawAccelX = data1;
 8001bf2:	4a63      	ldr	r2, [pc, #396]	; (8001d80 <IMU_parseInputReport+0x270>)
 8001bf4:	89bb      	ldrh	r3, [r7, #12]
 8001bf6:	8013      	strh	r3, [r2, #0]
		rawAccelY = data2;
 8001bf8:	4a62      	ldr	r2, [pc, #392]	; (8001d84 <IMU_parseInputReport+0x274>)
 8001bfa:	897b      	ldrh	r3, [r7, #10]
 8001bfc:	8013      	strh	r3, [r2, #0]
		rawAccelZ = data3;
 8001bfe:	4a62      	ldr	r2, [pc, #392]	; (8001d88 <IMU_parseInputReport+0x278>)
 8001c00:	893b      	ldrh	r3, [r7, #8]
 8001c02:	8013      	strh	r3, [r2, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 8001c04:	e16a      	b.n	8001edc <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_LINEAR_ACCELERATION)
 8001c06:	4b5b      	ldr	r3, [pc, #364]	; (8001d74 <IMU_parseInputReport+0x264>)
 8001c08:	795b      	ldrb	r3, [r3, #5]
 8001c0a:	2b04      	cmp	r3, #4
 8001c0c:	d10d      	bne.n	8001c2a <IMU_parseInputReport+0x11a>
		accelLinAccuracy = status;
 8001c0e:	7bfb      	ldrb	r3, [r7, #15]
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	4b5e      	ldr	r3, [pc, #376]	; (8001d8c <IMU_parseInputReport+0x27c>)
 8001c14:	801a      	strh	r2, [r3, #0]
		rawLinAccelX = data1;
 8001c16:	4a5e      	ldr	r2, [pc, #376]	; (8001d90 <IMU_parseInputReport+0x280>)
 8001c18:	89bb      	ldrh	r3, [r7, #12]
 8001c1a:	8013      	strh	r3, [r2, #0]
		rawLinAccelY = data2;
 8001c1c:	4a5d      	ldr	r2, [pc, #372]	; (8001d94 <IMU_parseInputReport+0x284>)
 8001c1e:	897b      	ldrh	r3, [r7, #10]
 8001c20:	8013      	strh	r3, [r2, #0]
		rawLinAccelZ = data3;
 8001c22:	4a5d      	ldr	r2, [pc, #372]	; (8001d98 <IMU_parseInputReport+0x288>)
 8001c24:	893b      	ldrh	r3, [r7, #8]
 8001c26:	8013      	strh	r3, [r2, #0]
}
 8001c28:	e158      	b.n	8001edc <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_GYROSCOPE)
 8001c2a:	4b52      	ldr	r3, [pc, #328]	; (8001d74 <IMU_parseInputReport+0x264>)
 8001c2c:	795b      	ldrb	r3, [r3, #5]
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d10d      	bne.n	8001c4e <IMU_parseInputReport+0x13e>
		gyroAccuracy = status;
 8001c32:	7bfb      	ldrb	r3, [r7, #15]
 8001c34:	b29a      	uxth	r2, r3
 8001c36:	4b59      	ldr	r3, [pc, #356]	; (8001d9c <IMU_parseInputReport+0x28c>)
 8001c38:	801a      	strh	r2, [r3, #0]
		rawGyroX = data1;
 8001c3a:	4a59      	ldr	r2, [pc, #356]	; (8001da0 <IMU_parseInputReport+0x290>)
 8001c3c:	89bb      	ldrh	r3, [r7, #12]
 8001c3e:	8013      	strh	r3, [r2, #0]
		rawGyroY = data2;
 8001c40:	4a58      	ldr	r2, [pc, #352]	; (8001da4 <IMU_parseInputReport+0x294>)
 8001c42:	897b      	ldrh	r3, [r7, #10]
 8001c44:	8013      	strh	r3, [r2, #0]
		rawGyroZ = data3;
 8001c46:	4a58      	ldr	r2, [pc, #352]	; (8001da8 <IMU_parseInputReport+0x298>)
 8001c48:	893b      	ldrh	r3, [r7, #8]
 8001c4a:	8013      	strh	r3, [r2, #0]
}
 8001c4c:	e146      	b.n	8001edc <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_MAGNETIC_FIELD)
 8001c4e:	4b49      	ldr	r3, [pc, #292]	; (8001d74 <IMU_parseInputReport+0x264>)
 8001c50:	795b      	ldrb	r3, [r3, #5]
 8001c52:	2b03      	cmp	r3, #3
 8001c54:	d10d      	bne.n	8001c72 <IMU_parseInputReport+0x162>
		magAccuracy = status;
 8001c56:	7bfb      	ldrb	r3, [r7, #15]
 8001c58:	b29a      	uxth	r2, r3
 8001c5a:	4b54      	ldr	r3, [pc, #336]	; (8001dac <IMU_parseInputReport+0x29c>)
 8001c5c:	801a      	strh	r2, [r3, #0]
		rawMagX = data1;
 8001c5e:	4a54      	ldr	r2, [pc, #336]	; (8001db0 <IMU_parseInputReport+0x2a0>)
 8001c60:	89bb      	ldrh	r3, [r7, #12]
 8001c62:	8013      	strh	r3, [r2, #0]
		rawMagY = data2;
 8001c64:	4a53      	ldr	r2, [pc, #332]	; (8001db4 <IMU_parseInputReport+0x2a4>)
 8001c66:	897b      	ldrh	r3, [r7, #10]
 8001c68:	8013      	strh	r3, [r2, #0]
		rawMagZ = data3;
 8001c6a:	4a53      	ldr	r2, [pc, #332]	; (8001db8 <IMU_parseInputReport+0x2a8>)
 8001c6c:	893b      	ldrh	r3, [r7, #8]
 8001c6e:	8013      	strh	r3, [r2, #0]
}
 8001c70:	e134      	b.n	8001edc <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_ROTATION_VECTOR || shtpData[5] == SENSOR_REPORTID_GAME_ROTATION_VECTOR)
 8001c72:	4b40      	ldr	r3, [pc, #256]	; (8001d74 <IMU_parseInputReport+0x264>)
 8001c74:	795b      	ldrb	r3, [r3, #5]
 8001c76:	2b05      	cmp	r3, #5
 8001c78:	d003      	beq.n	8001c82 <IMU_parseInputReport+0x172>
 8001c7a:	4b3e      	ldr	r3, [pc, #248]	; (8001d74 <IMU_parseInputReport+0x264>)
 8001c7c:	795b      	ldrb	r3, [r3, #5]
 8001c7e:	2b08      	cmp	r3, #8
 8001c80:	d166      	bne.n	8001d50 <IMU_parseInputReport+0x240>
		rotSample.tick_ms = HAL_GetTick();
 8001c82:	f004 fb25 	bl	80062d0 <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	4b4c      	ldr	r3, [pc, #304]	; (8001dbc <IMU_parseInputReport+0x2ac>)
 8001c8a:	615a      	str	r2, [r3, #20]
		rotSample.quatI =  IMU_qToFloat(data1, rotationVector_Q1);;
 8001c8c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001c90:	4b4b      	ldr	r3, [pc, #300]	; (8001dc0 <IMU_parseInputReport+0x2b0>)
 8001c92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4610      	mov	r0, r2
 8001c9c:	f000 f964 	bl	8001f68 <IMU_qToFloat>
 8001ca0:	eef0 7a40 	vmov.f32	s15, s0
 8001ca4:	4b45      	ldr	r3, [pc, #276]	; (8001dbc <IMU_parseInputReport+0x2ac>)
 8001ca6:	edc3 7a00 	vstr	s15, [r3]
		rotSample.quatJ =  IMU_qToFloat(data2, rotationVector_Q1);;
 8001caa:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001cae:	4b44      	ldr	r3, [pc, #272]	; (8001dc0 <IMU_parseInputReport+0x2b0>)
 8001cb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4610      	mov	r0, r2
 8001cba:	f000 f955 	bl	8001f68 <IMU_qToFloat>
 8001cbe:	eef0 7a40 	vmov.f32	s15, s0
 8001cc2:	4b3e      	ldr	r3, [pc, #248]	; (8001dbc <IMU_parseInputReport+0x2ac>)
 8001cc4:	edc3 7a01 	vstr	s15, [r3, #4]
		rotSample.quatK =  IMU_qToFloat(data3, rotationVector_Q1);;
 8001cc8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001ccc:	4b3c      	ldr	r3, [pc, #240]	; (8001dc0 <IMU_parseInputReport+0x2b0>)
 8001cce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4610      	mov	r0, r2
 8001cd8:	f000 f946 	bl	8001f68 <IMU_qToFloat>
 8001cdc:	eef0 7a40 	vmov.f32	s15, s0
 8001ce0:	4b36      	ldr	r3, [pc, #216]	; (8001dbc <IMU_parseInputReport+0x2ac>)
 8001ce2:	edc3 7a02 	vstr	s15, [r3, #8]
		rotSample.quatReal = IMU_qToFloat(data4, rotationVector_Q1);
 8001ce6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001cea:	4b35      	ldr	r3, [pc, #212]	; (8001dc0 <IMU_parseInputReport+0x2b0>)
 8001cec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4610      	mov	r0, r2
 8001cf6:	f000 f937 	bl	8001f68 <IMU_qToFloat>
 8001cfa:	eef0 7a40 	vmov.f32	s15, s0
 8001cfe:	4b2f      	ldr	r3, [pc, #188]	; (8001dbc <IMU_parseInputReport+0x2ac>)
 8001d00:	edc3 7a03 	vstr	s15, [r3, #12]
		rotSample.quatRadianAccuracy = IMU_qToFloat(data5, 12);
 8001d04:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001d08:	210c      	movs	r1, #12
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f000 f92c 	bl	8001f68 <IMU_qToFloat>
 8001d10:	eef0 7a40 	vmov.f32	s15, s0
 8001d14:	4b29      	ldr	r3, [pc, #164]	; (8001dbc <IMU_parseInputReport+0x2ac>)
 8001d16:	edc3 7a04 	vstr	s15, [r3, #16]
		osMessageQueuePut(rotationSampleQueueHandle, &rotSample, 0U, 0);
 8001d1a:	4b2a      	ldr	r3, [pc, #168]	; (8001dc4 <IMU_parseInputReport+0x2b4>)
 8001d1c:	6818      	ldr	r0, [r3, #0]
 8001d1e:	2300      	movs	r3, #0
 8001d20:	2200      	movs	r2, #0
 8001d22:	4926      	ldr	r1, [pc, #152]	; (8001dbc <IMU_parseInputReport+0x2ac>)
 8001d24:	f00c fff0 	bl	800ed08 <osMessageQueuePut>
		quatAccuracy = status;
 8001d28:	7bfb      	ldrb	r3, [r7, #15]
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	4b26      	ldr	r3, [pc, #152]	; (8001dc8 <IMU_parseInputReport+0x2b8>)
 8001d2e:	801a      	strh	r2, [r3, #0]
		rawQuatI = data1;
 8001d30:	4a26      	ldr	r2, [pc, #152]	; (8001dcc <IMU_parseInputReport+0x2bc>)
 8001d32:	89bb      	ldrh	r3, [r7, #12]
 8001d34:	8013      	strh	r3, [r2, #0]
		rawQuatJ = data2;
 8001d36:	4a26      	ldr	r2, [pc, #152]	; (8001dd0 <IMU_parseInputReport+0x2c0>)
 8001d38:	897b      	ldrh	r3, [r7, #10]
 8001d3a:	8013      	strh	r3, [r2, #0]
		rawQuatK = data3;
 8001d3c:	4a25      	ldr	r2, [pc, #148]	; (8001dd4 <IMU_parseInputReport+0x2c4>)
 8001d3e:	893b      	ldrh	r3, [r7, #8]
 8001d40:	8013      	strh	r3, [r2, #0]
		rawQuatReal = data4;
 8001d42:	4a25      	ldr	r2, [pc, #148]	; (8001dd8 <IMU_parseInputReport+0x2c8>)
 8001d44:	8afb      	ldrh	r3, [r7, #22]
 8001d46:	8013      	strh	r3, [r2, #0]
		rawQuatRadianAccuracy = data5; //Only available on rotation vector, not game rot vector
 8001d48:	4a24      	ldr	r2, [pc, #144]	; (8001ddc <IMU_parseInputReport+0x2cc>)
 8001d4a:	8abb      	ldrh	r3, [r7, #20]
 8001d4c:	8013      	strh	r3, [r2, #0]
}
 8001d4e:	e0c5      	b.n	8001edc <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_STEP_COUNTER)
 8001d50:	4b08      	ldr	r3, [pc, #32]	; (8001d74 <IMU_parseInputReport+0x264>)
 8001d52:	795b      	ldrb	r3, [r3, #5]
 8001d54:	2b11      	cmp	r3, #17
 8001d56:	d147      	bne.n	8001de8 <IMU_parseInputReport+0x2d8>
		stepSample.tick_ms = HAL_GetTick();
 8001d58:	f004 faba 	bl	80062d0 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	4b20      	ldr	r3, [pc, #128]	; (8001de0 <IMU_parseInputReport+0x2d0>)
 8001d60:	605a      	str	r2, [r3, #4]
		stepSample.stepCount = data3;
 8001d62:	4a1f      	ldr	r2, [pc, #124]	; (8001de0 <IMU_parseInputReport+0x2d0>)
 8001d64:	893b      	ldrh	r3, [r7, #8]
 8001d66:	8013      	strh	r3, [r2, #0]
		stepCount = data3; //Bytes 8/9
 8001d68:	4a1e      	ldr	r2, [pc, #120]	; (8001de4 <IMU_parseInputReport+0x2d4>)
 8001d6a:	893b      	ldrh	r3, [r7, #8]
 8001d6c:	8013      	strh	r3, [r2, #0]
}
 8001d6e:	e0b5      	b.n	8001edc <IMU_parseInputReport+0x3cc>
 8001d70:	20027d3c 	.word	0x20027d3c
 8001d74:	20027dcc 	.word	0x20027dcc
 8001d78:	20027d58 	.word	0x20027d58
 8001d7c:	20027e94 	.word	0x20027e94
 8001d80:	20027e7c 	.word	0x20027e7c
 8001d84:	20027e98 	.word	0x20027e98
 8001d88:	20027d94 	.word	0x20027d94
 8001d8c:	20027d90 	.word	0x20027d90
 8001d90:	20027d62 	.word	0x20027d62
 8001d94:	20027e80 	.word	0x20027e80
 8001d98:	20027dbe 	.word	0x20027dbe
 8001d9c:	20027dc0 	.word	0x20027dc0
 8001da0:	20027dc2 	.word	0x20027dc2
 8001da4:	20027d8a 	.word	0x20027d8a
 8001da8:	20027d88 	.word	0x20027d88
 8001dac:	20027d40 	.word	0x20027d40
 8001db0:	20027d8c 	.word	0x20027d8c
 8001db4:	20027e82 	.word	0x20027e82
 8001db8:	20027d92 	.word	0x20027d92
 8001dbc:	20027da4 	.word	0x20027da4
 8001dc0:	20000004 	.word	0x20000004
 8001dc4:	200278b8 	.word	0x200278b8
 8001dc8:	20027d5e 	.word	0x20027d5e
 8001dcc:	20027e96 	.word	0x20027e96
 8001dd0:	20027dbc 	.word	0x20027dbc
 8001dd4:	20027d38 	.word	0x20027d38
 8001dd8:	20027d54 	.word	0x20027d54
 8001ddc:	20027d96 	.word	0x20027d96
 8001de0:	20027d44 	.word	0x20027d44
 8001de4:	20027e9a 	.word	0x20027e9a
	else if (shtpData[5] == SENSOR_REPORTID_STABILITY_CLASSIFIER)
 8001de8:	4b3e      	ldr	r3, [pc, #248]	; (8001ee4 <IMU_parseInputReport+0x3d4>)
 8001dea:	795b      	ldrb	r3, [r3, #5]
 8001dec:	2b13      	cmp	r3, #19
 8001dee:	d10d      	bne.n	8001e0c <IMU_parseInputReport+0x2fc>
		stabilitySample.tick_ms = HAL_GetTick();
 8001df0:	f004 fa6e 	bl	80062d0 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	4b3c      	ldr	r3, [pc, #240]	; (8001ee8 <IMU_parseInputReport+0x3d8>)
 8001df8:	605a      	str	r2, [r3, #4]
		stabilitySample.stabilityClass = shtpData[5 + 4];
 8001dfa:	4b3a      	ldr	r3, [pc, #232]	; (8001ee4 <IMU_parseInputReport+0x3d4>)
 8001dfc:	7a5a      	ldrb	r2, [r3, #9]
 8001dfe:	4b3a      	ldr	r3, [pc, #232]	; (8001ee8 <IMU_parseInputReport+0x3d8>)
 8001e00:	701a      	strb	r2, [r3, #0]
		stabilityClassifier = shtpData[5 + 4]; //Byte 4 only
 8001e02:	4b38      	ldr	r3, [pc, #224]	; (8001ee4 <IMU_parseInputReport+0x3d4>)
 8001e04:	7a5a      	ldrb	r2, [r3, #9]
 8001e06:	4b39      	ldr	r3, [pc, #228]	; (8001eec <IMU_parseInputReport+0x3dc>)
 8001e08:	701a      	strb	r2, [r3, #0]
}
 8001e0a:	e067      	b.n	8001edc <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_PERSONAL_ACTIVITY_CLASSIFIER)
 8001e0c:	4b35      	ldr	r3, [pc, #212]	; (8001ee4 <IMU_parseInputReport+0x3d4>)
 8001e0e:	795b      	ldrb	r3, [r3, #5]
 8001e10:	2b1e      	cmp	r3, #30
 8001e12:	d12b      	bne.n	8001e6c <IMU_parseInputReport+0x35c>
		activitySample.tick_ms = HAL_GetTick();
 8001e14:	f004 fa5c 	bl	80062d0 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	4b35      	ldr	r3, [pc, #212]	; (8001ef0 <IMU_parseInputReport+0x3e0>)
 8001e1c:	60da      	str	r2, [r3, #12]
		for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 8001e1e:	2300      	movs	r3, #0
 8001e20:	74fb      	strb	r3, [r7, #19]
 8001e22:	e00c      	b.n	8001e3e <IMU_parseInputReport+0x32e>
			_activityConfidences[x] = shtpData[5 + 6 + x]; //5 bytes of timestamp, byte 6 is first confidence byte
 8001e24:	7cfb      	ldrb	r3, [r7, #19]
 8001e26:	f103 020b 	add.w	r2, r3, #11
 8001e2a:	4b32      	ldr	r3, [pc, #200]	; (8001ef4 <IMU_parseInputReport+0x3e4>)
 8001e2c:	6819      	ldr	r1, [r3, #0]
 8001e2e:	7cfb      	ldrb	r3, [r7, #19]
 8001e30:	440b      	add	r3, r1
 8001e32:	492c      	ldr	r1, [pc, #176]	; (8001ee4 <IMU_parseInputReport+0x3d4>)
 8001e34:	5c8a      	ldrb	r2, [r1, r2]
 8001e36:	701a      	strb	r2, [r3, #0]
		for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 8001e38:	7cfb      	ldrb	r3, [r7, #19]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	74fb      	strb	r3, [r7, #19]
 8001e3e:	7cfb      	ldrb	r3, [r7, #19]
 8001e40:	2b08      	cmp	r3, #8
 8001e42:	d9ef      	bls.n	8001e24 <IMU_parseInputReport+0x314>
		activityClassifier = shtpData[5 + 5]; //Most likely state
 8001e44:	4b27      	ldr	r3, [pc, #156]	; (8001ee4 <IMU_parseInputReport+0x3d4>)
 8001e46:	7a9a      	ldrb	r2, [r3, #10]
 8001e48:	4b2b      	ldr	r3, [pc, #172]	; (8001ef8 <IMU_parseInputReport+0x3e8>)
 8001e4a:	701a      	strb	r2, [r3, #0]
		memcpy(activitySample.activityConfidence, _activityConfidences, 9);
 8001e4c:	4b29      	ldr	r3, [pc, #164]	; (8001ef4 <IMU_parseInputReport+0x3e4>)
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	4b27      	ldr	r3, [pc, #156]	; (8001ef0 <IMU_parseInputReport+0x3e0>)
 8001e52:	6810      	ldr	r0, [r2, #0]
 8001e54:	6851      	ldr	r1, [r2, #4]
 8001e56:	c303      	stmia	r3!, {r0, r1}
 8001e58:	7a12      	ldrb	r2, [r2, #8]
 8001e5a:	701a      	strb	r2, [r3, #0]
		osMessageQueuePut(activitySampleQueueHandle, &activitySample, 0U, 0);
 8001e5c:	4b27      	ldr	r3, [pc, #156]	; (8001efc <IMU_parseInputReport+0x3ec>)
 8001e5e:	6818      	ldr	r0, [r3, #0]
 8001e60:	2300      	movs	r3, #0
 8001e62:	2200      	movs	r2, #0
 8001e64:	4922      	ldr	r1, [pc, #136]	; (8001ef0 <IMU_parseInputReport+0x3e0>)
 8001e66:	f00c ff4f 	bl	800ed08 <osMessageQueuePut>
}
 8001e6a:	e037      	b.n	8001edc <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_RAW_ACCELEROMETER)
 8001e6c:	4b1d      	ldr	r3, [pc, #116]	; (8001ee4 <IMU_parseInputReport+0x3d4>)
 8001e6e:	795b      	ldrb	r3, [r3, #5]
 8001e70:	2b14      	cmp	r3, #20
 8001e72:	d109      	bne.n	8001e88 <IMU_parseInputReport+0x378>
		memsRawAccelX = data1;
 8001e74:	4a22      	ldr	r2, [pc, #136]	; (8001f00 <IMU_parseInputReport+0x3f0>)
 8001e76:	89bb      	ldrh	r3, [r7, #12]
 8001e78:	8013      	strh	r3, [r2, #0]
		memsRawAccelY = data2;
 8001e7a:	4a22      	ldr	r2, [pc, #136]	; (8001f04 <IMU_parseInputReport+0x3f4>)
 8001e7c:	897b      	ldrh	r3, [r7, #10]
 8001e7e:	8013      	strh	r3, [r2, #0]
		memsRawAccelZ = data3;
 8001e80:	4a21      	ldr	r2, [pc, #132]	; (8001f08 <IMU_parseInputReport+0x3f8>)
 8001e82:	893b      	ldrh	r3, [r7, #8]
 8001e84:	8013      	strh	r3, [r2, #0]
}
 8001e86:	e029      	b.n	8001edc <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_RAW_GYROSCOPE)
 8001e88:	4b16      	ldr	r3, [pc, #88]	; (8001ee4 <IMU_parseInputReport+0x3d4>)
 8001e8a:	795b      	ldrb	r3, [r3, #5]
 8001e8c:	2b15      	cmp	r3, #21
 8001e8e:	d109      	bne.n	8001ea4 <IMU_parseInputReport+0x394>
		memsRawGyroX = data1;
 8001e90:	4a1e      	ldr	r2, [pc, #120]	; (8001f0c <IMU_parseInputReport+0x3fc>)
 8001e92:	89bb      	ldrh	r3, [r7, #12]
 8001e94:	8013      	strh	r3, [r2, #0]
		memsRawGyroY = data2;
 8001e96:	4a1e      	ldr	r2, [pc, #120]	; (8001f10 <IMU_parseInputReport+0x400>)
 8001e98:	897b      	ldrh	r3, [r7, #10]
 8001e9a:	8013      	strh	r3, [r2, #0]
		memsRawGyroZ = data3;
 8001e9c:	4a1d      	ldr	r2, [pc, #116]	; (8001f14 <IMU_parseInputReport+0x404>)
 8001e9e:	893b      	ldrh	r3, [r7, #8]
 8001ea0:	8013      	strh	r3, [r2, #0]
}
 8001ea2:	e01b      	b.n	8001edc <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_RAW_MAGNETOMETER)
 8001ea4:	4b0f      	ldr	r3, [pc, #60]	; (8001ee4 <IMU_parseInputReport+0x3d4>)
 8001ea6:	795b      	ldrb	r3, [r3, #5]
 8001ea8:	2b16      	cmp	r3, #22
 8001eaa:	d109      	bne.n	8001ec0 <IMU_parseInputReport+0x3b0>
		memsRawMagX = data1;
 8001eac:	4a1a      	ldr	r2, [pc, #104]	; (8001f18 <IMU_parseInputReport+0x408>)
 8001eae:	89bb      	ldrh	r3, [r7, #12]
 8001eb0:	8013      	strh	r3, [r2, #0]
		memsRawMagY = data2;
 8001eb2:	4a1a      	ldr	r2, [pc, #104]	; (8001f1c <IMU_parseInputReport+0x40c>)
 8001eb4:	897b      	ldrh	r3, [r7, #10]
 8001eb6:	8013      	strh	r3, [r2, #0]
		memsRawMagZ = data3;
 8001eb8:	4a19      	ldr	r2, [pc, #100]	; (8001f20 <IMU_parseInputReport+0x410>)
 8001eba:	893b      	ldrh	r3, [r7, #8]
 8001ebc:	8013      	strh	r3, [r2, #0]
}
 8001ebe:	e00d      	b.n	8001edc <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SHTP_REPORT_COMMAND_RESPONSE)
 8001ec0:	4b08      	ldr	r3, [pc, #32]	; (8001ee4 <IMU_parseInputReport+0x3d4>)
 8001ec2:	795b      	ldrb	r3, [r3, #5]
 8001ec4:	2bf1      	cmp	r3, #241	; 0xf1
 8001ec6:	d109      	bne.n	8001edc <IMU_parseInputReport+0x3cc>
		uint8_t command = shtpData[5 + 2]; //This is the Command byte of the response
 8001ec8:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <IMU_parseInputReport+0x3d4>)
 8001eca:	79db      	ldrb	r3, [r3, #7]
 8001ecc:	71fb      	strb	r3, [r7, #7]
		if (command == COMMAND_ME_CALIBRATE)
 8001ece:	79fb      	ldrb	r3, [r7, #7]
 8001ed0:	2b07      	cmp	r3, #7
 8001ed2:	d103      	bne.n	8001edc <IMU_parseInputReport+0x3cc>
			calibrationStatus = shtpData[5 + 5]; //R0 - Status (0 = success, non-zero = fail)
 8001ed4:	4b03      	ldr	r3, [pc, #12]	; (8001ee4 <IMU_parseInputReport+0x3d4>)
 8001ed6:	7a9a      	ldrb	r2, [r3, #10]
 8001ed8:	4b12      	ldr	r3, [pc, #72]	; (8001f24 <IMU_parseInputReport+0x414>)
 8001eda:	701a      	strb	r2, [r3, #0]
}
 8001edc:	bf00      	nop
 8001ede:	3718      	adds	r7, #24
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	20027dcc 	.word	0x20027dcc
 8001ee8:	20027d4c 	.word	0x20027d4c
 8001eec:	20027dc6 	.word	0x20027dc6
 8001ef0:	20027e84 	.word	0x20027e84
 8001ef4:	20027da0 	.word	0x20027da0
 8001ef8:	20027e7e 	.word	0x20027e7e
 8001efc:	2002789c 	.word	0x2002789c
 8001f00:	20027dc4 	.word	0x20027dc4
 8001f04:	20027d9e 	.word	0x20027d9e
 8001f08:	20027e4e 	.word	0x20027e4e
 8001f0c:	20027d42 	.word	0x20027d42
 8001f10:	20027dc8 	.word	0x20027dc8
 8001f14:	20027d98 	.word	0x20027d98
 8001f18:	20027d9c 	.word	0x20027d9c
 8001f1c:	20027d9a 	.word	0x20027d9a
 8001f20:	20027d60 	.word	0x20027d60
 8001f24:	20027e7f 	.word	0x20027e7f

08001f28 <IMU_softReset>:
//Send command to reset IC
//Read all advertisement packets from sensor
//The sensor has been seen to reset twice if we attempt too much too quickly.
//This seems to work reliably.
void IMU_softReset(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
	shtpData[0] = 1; //Reset
 8001f2c:	4b0d      	ldr	r3, [pc, #52]	; (8001f64 <IMU_softReset+0x3c>)
 8001f2e:	2201      	movs	r2, #1
 8001f30:	701a      	strb	r2, [r3, #0]

	//Attempt to start communication with sensor
	IMU_sendPacket(CHANNEL_EXECUTABLE, 1); //Transmit packet on channel 1, 1 byte
 8001f32:	2301      	movs	r3, #1
 8001f34:	2101      	movs	r1, #1
 8001f36:	4618      	mov	r0, r3
 8001f38:	f000 f98e 	bl	8002258 <IMU_sendPacket>

	//Read all incoming data and flush it
	HAL_Delay(200);
 8001f3c:	20c8      	movs	r0, #200	; 0xc8
 8001f3e:	f004 f9df 	bl	8006300 <HAL_Delay>
	while (IMU_receivePacket() == true)
 8001f42:	bf00      	nop
 8001f44:	f000 f8e0 	bl	8002108 <IMU_receivePacket>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1fa      	bne.n	8001f44 <IMU_softReset+0x1c>
		;
	HAL_Delay(200);
 8001f4e:	20c8      	movs	r0, #200	; 0xc8
 8001f50:	f004 f9d6 	bl	8006300 <HAL_Delay>
	while (IMU_receivePacket() == true)
 8001f54:	bf00      	nop
 8001f56:	f000 f8d7 	bl	8002108 <IMU_receivePacket>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d1fa      	bne.n	8001f56 <IMU_softReset+0x2e>
		;
}
 8001f60:	bf00      	nop
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	20027dcc 	.word	0x20027dcc

08001f68 <IMU_qToFloat>:
}

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float IMU_qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
 8001f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	460a      	mov	r2, r1
 8001f72:	80fb      	strh	r3, [r7, #6]
 8001f74:	4613      	mov	r3, r2
 8001f76:	717b      	strb	r3, [r7, #5]
	float qFloat = fixedPointValue;
 8001f78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f7c:	ee07 3a90 	vmov	s15, r3
 8001f80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f84:	edc7 7a03 	vstr	s15, [r7, #12]
	qFloat *= pow(2, qPoint * -1);
 8001f88:	797b      	ldrb	r3, [r7, #5]
 8001f8a:	425b      	negs	r3, r3
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7fe fa53 	bl	8000438 <__aeabi_i2d>
 8001f92:	4603      	mov	r3, r0
 8001f94:	460c      	mov	r4, r1
 8001f96:	ec44 3b11 	vmov	d1, r3, r4
 8001f9a:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8001fe0 <IMU_qToFloat+0x78>
 8001f9e:	f013 ffa7 	bl	8015ef0 <pow>
 8001fa2:	ec56 5b10 	vmov	r5, r6, d0
 8001fa6:	68f8      	ldr	r0, [r7, #12]
 8001fa8:	f7fe fa58 	bl	800045c <__aeabi_f2d>
 8001fac:	4603      	mov	r3, r0
 8001fae:	460c      	mov	r4, r1
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	4623      	mov	r3, r4
 8001fb4:	4628      	mov	r0, r5
 8001fb6:	4631      	mov	r1, r6
 8001fb8:	f7fe faa8 	bl	800050c <__aeabi_dmul>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	460c      	mov	r4, r1
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	4621      	mov	r1, r4
 8001fc4:	f7fe fd52 	bl	8000a6c <__aeabi_d2f>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	60fb      	str	r3, [r7, #12]
	return (qFloat);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	ee07 3a90 	vmov	s15, r3
}
 8001fd2:	eeb0 0a67 	vmov.f32	s0, s15
 8001fd6:	3714      	adds	r7, #20
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fdc:	f3af 8000 	nop.w
 8001fe0:	00000000 	.word	0x00000000
 8001fe4:	40000000 	.word	0x40000000

08001fe8 <IMU_enableRotationVector>:

//Sends the packet to enable the rotation vector
void IMU_enableRotationVector(uint16_t timeBetweenReports)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	80fb      	strh	r3, [r7, #6]
	IMU_setFeatureCommand_2(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports);
 8001ff2:	88fb      	ldrh	r3, [r7, #6]
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	2005      	movs	r0, #5
 8001ff8:	f000 f81a 	bl	8002030 <IMU_setFeatureCommand_2>
}
 8001ffc:	bf00      	nop
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <IMU_enableActivityClassifier>:
	IMU_setFeatureCommand_2(SENSOR_REPORTID_RAW_MAGNETOMETER, timeBetweenReports);
}

//Sends the packet to enable the various activity classifiers
void IMU_enableActivityClassifier(uint16_t timeBetweenReports, uint32_t activitiesToEnable, uint8_t *activityConfidences)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	4603      	mov	r3, r0
 800200c:	60b9      	str	r1, [r7, #8]
 800200e:	607a      	str	r2, [r7, #4]
 8002010:	81fb      	strh	r3, [r7, #14]
	_activityConfidences = activityConfidences; //Store pointer to array
 8002012:	4a06      	ldr	r2, [pc, #24]	; (800202c <IMU_enableActivityClassifier+0x28>)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6013      	str	r3, [r2, #0]

	IMU_setFeatureCommand_3(SENSOR_REPORTID_PERSONAL_ACTIVITY_CLASSIFIER, timeBetweenReports, activitiesToEnable);
 8002018:	89fb      	ldrh	r3, [r7, #14]
 800201a:	68ba      	ldr	r2, [r7, #8]
 800201c:	4619      	mov	r1, r3
 800201e:	201e      	movs	r0, #30
 8002020:	f000 f818 	bl	8002054 <IMU_setFeatureCommand_3>
}
 8002024:	bf00      	nop
 8002026:	3710      	adds	r7, #16
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	20027da0 	.word	0x20027da0

08002030 <IMU_setFeatureCommand_2>:
	return (false);
}

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
void IMU_setFeatureCommand_2(uint8_t reportID, uint16_t timeBetweenReports)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	4603      	mov	r3, r0
 8002038:	460a      	mov	r2, r1
 800203a:	71fb      	strb	r3, [r7, #7]
 800203c:	4613      	mov	r3, r2
 800203e:	80bb      	strh	r3, [r7, #4]
	IMU_setFeatureCommand_3(reportID, timeBetweenReports, 0); //No specific config
 8002040:	88b9      	ldrh	r1, [r7, #4]
 8002042:	79fb      	ldrb	r3, [r7, #7]
 8002044:	2200      	movs	r2, #0
 8002046:	4618      	mov	r0, r3
 8002048:	f000 f804 	bl	8002054 <IMU_setFeatureCommand_3>
}
 800204c:	bf00      	nop
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <IMU_setFeatureCommand_3>:

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void IMU_setFeatureCommand_3(uint8_t reportID, uint16_t timeBetweenReports, uint32_t specificConfig)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	4603      	mov	r3, r0
 800205c:	603a      	str	r2, [r7, #0]
 800205e:	71fb      	strb	r3, [r7, #7]
 8002060:	460b      	mov	r3, r1
 8002062:	80bb      	strh	r3, [r7, #4]
	long microsBetweenReports = (long)timeBetweenReports * 1000L;
 8002064:	88bb      	ldrh	r3, [r7, #4]
 8002066:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800206a:	fb02 f303 	mul.w	r3, r2, r3
 800206e:	60fb      	str	r3, [r7, #12]

	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 8002070:	4b24      	ldr	r3, [pc, #144]	; (8002104 <IMU_setFeatureCommand_3+0xb0>)
 8002072:	22fd      	movs	r2, #253	; 0xfd
 8002074:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;							   //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 8002076:	4a23      	ldr	r2, [pc, #140]	; (8002104 <IMU_setFeatureCommand_3+0xb0>)
 8002078:	79fb      	ldrb	r3, [r7, #7]
 800207a:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;								   //Feature flags
 800207c:	4b21      	ldr	r3, [pc, #132]	; (8002104 <IMU_setFeatureCommand_3+0xb0>)
 800207e:	2200      	movs	r2, #0
 8002080:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;								   //Change sensitivity (LSB)
 8002082:	4b20      	ldr	r3, [pc, #128]	; (8002104 <IMU_setFeatureCommand_3+0xb0>)
 8002084:	2200      	movs	r2, #0
 8002086:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;								   //Change sensitivity (MSB)
 8002088:	4b1e      	ldr	r3, [pc, #120]	; (8002104 <IMU_setFeatureCommand_3+0xb0>)
 800208a:	2200      	movs	r2, #0
 800208c:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	b2da      	uxtb	r2, r3
 8002092:	4b1c      	ldr	r3, [pc, #112]	; (8002104 <IMU_setFeatureCommand_3+0xb0>)
 8002094:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	121b      	asrs	r3, r3, #8
 800209a:	b2da      	uxtb	r2, r3
 800209c:	4b19      	ldr	r3, [pc, #100]	; (8002104 <IMU_setFeatureCommand_3+0xb0>)
 800209e:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	141b      	asrs	r3, r3, #16
 80020a4:	b2da      	uxtb	r2, r3
 80020a6:	4b17      	ldr	r3, [pc, #92]	; (8002104 <IMU_setFeatureCommand_3+0xb0>)
 80020a8:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	0e1b      	lsrs	r3, r3, #24
 80020ae:	b2da      	uxtb	r2, r3
 80020b0:	4b14      	ldr	r3, [pc, #80]	; (8002104 <IMU_setFeatureCommand_3+0xb0>)
 80020b2:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;								   //Batch Interval (LSB)
 80020b4:	4b13      	ldr	r3, [pc, #76]	; (8002104 <IMU_setFeatureCommand_3+0xb0>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;								   //Batch Interval
 80020ba:	4b12      	ldr	r3, [pc, #72]	; (8002104 <IMU_setFeatureCommand_3+0xb0>)
 80020bc:	2200      	movs	r2, #0
 80020be:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;								   //Batch Interval
 80020c0:	4b10      	ldr	r3, [pc, #64]	; (8002104 <IMU_setFeatureCommand_3+0xb0>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;								   //Batch Interval (MSB)
 80020c6:	4b0f      	ldr	r3, [pc, #60]	; (8002104 <IMU_setFeatureCommand_3+0xb0>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   //Sensor-specific config (LSB)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	b2da      	uxtb	r2, r3
 80020d0:	4b0c      	ldr	r3, [pc, #48]	; (8002104 <IMU_setFeatureCommand_3+0xb0>)
 80020d2:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   //Sensor-specific config
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	0a1b      	lsrs	r3, r3, #8
 80020d8:	b2da      	uxtb	r2, r3
 80020da:	4b0a      	ldr	r3, [pc, #40]	; (8002104 <IMU_setFeatureCommand_3+0xb0>)
 80020dc:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	  //Sensor-specific config
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	0c1b      	lsrs	r3, r3, #16
 80020e2:	b2da      	uxtb	r2, r3
 80020e4:	4b07      	ldr	r3, [pc, #28]	; (8002104 <IMU_setFeatureCommand_3+0xb0>)
 80020e6:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	  //Sensor-specific config (MSB)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	0e1b      	lsrs	r3, r3, #24
 80020ec:	b2da      	uxtb	r2, r3
 80020ee:	4b05      	ldr	r3, [pc, #20]	; (8002104 <IMU_setFeatureCommand_3+0xb0>)
 80020f0:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	IMU_sendPacket(CHANNEL_CONTROL, 17);
 80020f2:	2302      	movs	r3, #2
 80020f4:	2111      	movs	r1, #17
 80020f6:	4618      	mov	r0, r3
 80020f8:	f000 f8ae 	bl	8002258 <IMU_sendPacket>
}
 80020fc:	bf00      	nop
 80020fe:	3710      	adds	r7, #16
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	20027dcc 	.word	0x20027dcc

08002108 <IMU_receivePacket>:
//}

//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
bool IMU_receivePacket(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af02      	add	r7, sp, #8
	if( HAL_GPIO_ReadPin(_intPort, _int) == GPIO_PIN_SET)
 800210e:	4b22      	ldr	r3, [pc, #136]	; (8002198 <IMU_receivePacket+0x90>)
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	4b22      	ldr	r3, [pc, #136]	; (800219c <IMU_receivePacket+0x94>)
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	b29b      	uxth	r3, r3
 8002118:	4619      	mov	r1, r3
 800211a:	4610      	mov	r0, r2
 800211c:	f006 fb02 	bl	8008724 <HAL_GPIO_ReadPin>
 8002120:	4603      	mov	r3, r0
 8002122:	2b01      	cmp	r3, #1
 8002124:	d101      	bne.n	800212a <IMU_receivePacket+0x22>
		return (false);
 8002126:	2300      	movs	r3, #0
 8002128:	e031      	b.n	800218e <IMU_receivePacket+0x86>

	//Ask for four bytes to find out how much data we need to read
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 800212a:	4b1d      	ldr	r3, [pc, #116]	; (80021a0 <IMU_receivePacket+0x98>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f04f 31ff 	mov.w	r1, #4294967295
 8002132:	4618      	mov	r0, r3
 8002134:	f00c fca4 	bl	800ea80 <osSemaphoreAcquire>
//	taskENTER_CRITICAL();
	HAL_I2C_Master_Receive(&hi2c1, _deviceAddress, shtpHeader, (uint8_t) 4, 100);
 8002138:	4b1a      	ldr	r3, [pc, #104]	; (80021a4 <IMU_receivePacket+0x9c>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	b299      	uxth	r1, r3
 800213e:	2364      	movs	r3, #100	; 0x64
 8002140:	9300      	str	r3, [sp, #0]
 8002142:	2304      	movs	r3, #4
 8002144:	4a18      	ldr	r2, [pc, #96]	; (80021a8 <IMU_receivePacket+0xa0>)
 8002146:	4819      	ldr	r0, [pc, #100]	; (80021ac <IMU_receivePacket+0xa4>)
 8002148:	f006 fca0 	bl	8008a8c <HAL_I2C_Master_Receive>
//		osSemaphoreRelease(messageI2C_LockSem);
//		osDelay(100);
//		osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
//	}
//	taskEXIT_CRITICAL();
	osSemaphoreRelease(messageI2C_LockHandle);
 800214c:	4b14      	ldr	r3, [pc, #80]	; (80021a0 <IMU_receivePacket+0x98>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4618      	mov	r0, r3
 8002152:	f00c fcfb 	bl	800eb4c <osSemaphoreRelease>

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ( ((uint16_t)shtpHeader[PACKET_MSB] << 8) | shtpHeader[PACKET_LSB]);
 8002156:	4b14      	ldr	r3, [pc, #80]	; (80021a8 <IMU_receivePacket+0xa0>)
 8002158:	785b      	ldrb	r3, [r3, #1]
 800215a:	021b      	lsls	r3, r3, #8
 800215c:	b21a      	sxth	r2, r3
 800215e:	4b12      	ldr	r3, [pc, #72]	; (80021a8 <IMU_receivePacket+0xa0>)
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	b21b      	sxth	r3, r3
 8002164:	4313      	orrs	r3, r2
 8002166:	80fb      	strh	r3, [r7, #6]
	dataLength &= ~(1 << 15); //Clear the MSbit.
 8002168:	88fb      	ldrh	r3, [r7, #6]
 800216a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800216e:	80fb      	strh	r3, [r7, #6]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 8002170:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d101      	bne.n	800217c <IMU_receivePacket+0x74>
	{
		//Packet is empty
		return (false); //All done
 8002178:	2300      	movs	r3, #0
 800217a:	e008      	b.n	800218e <IMU_receivePacket+0x86>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 800217c:	88fb      	ldrh	r3, [r7, #6]
 800217e:	3b04      	subs	r3, #4
 8002180:	b29b      	uxth	r3, r3
 8002182:	80fb      	strh	r3, [r7, #6]

	IMU_getData(dataLength);
 8002184:	88fb      	ldrh	r3, [r7, #6]
 8002186:	4618      	mov	r0, r3
 8002188:	f000 f812 	bl	80021b0 <IMU_getData>


	return (true); //We're done!
 800218c:	2301      	movs	r3, #1
}
 800218e:	4618      	mov	r0, r3
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	20027e54 	.word	0x20027e54
 800219c:	20027d8e 	.word	0x20027d8e
 80021a0:	200278a4 	.word	0x200278a4
 80021a4:	20000006 	.word	0x20000006
 80021a8:	20027d3c 	.word	0x20027d3c
 80021ac:	20027e9c 	.word	0x20027e9c

080021b0 <IMU_getData>:

//Sends multiple requests to sensor until all data bytes are received from sensor
//The shtpData buffer has max capacity of MAX_PACKET_SIZE. Any bytes over this amount will be lost.
//Arduino I2C read limit is 32 bytes. Header is 4 bytes, so max data we can read per interation is 28 bytes
bool IMU_getData(uint16_t bytesRemaining)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af02      	add	r7, sp, #8
 80021b6:	4603      	mov	r3, r0
 80021b8:	80fb      	strh	r3, [r7, #6]
	uint16_t dataSpot = 0; //Start at the beginning of shtpData array
 80021ba:	2300      	movs	r3, #0
 80021bc:	81fb      	strh	r3, [r7, #14]
//	uint8_t receiveBuffer[28] = {0};
//	uint8_t receivePacket[I2C_BUFFER_LENGTH - 4] = {0};


	//Setup a series of chunked 32 byte reads
	while (bytesRemaining > 0)
 80021be:	e036      	b.n	800222e <IMU_getData+0x7e>
	{
		uint16_t numberOfBytesToRead = bytesRemaining;
 80021c0:	88fb      	ldrh	r3, [r7, #6]
 80021c2:	81bb      	strh	r3, [r7, #12]
		if (numberOfBytesToRead > (I2C_BUFFER_LENGTH - 4))
 80021c4:	89bb      	ldrh	r3, [r7, #12]
 80021c6:	2b1c      	cmp	r3, #28
 80021c8:	d901      	bls.n	80021ce <IMU_getData+0x1e>
			numberOfBytesToRead = (I2C_BUFFER_LENGTH - 4);
 80021ca:	231c      	movs	r3, #28
 80021cc:	81bb      	strh	r3, [r7, #12]

		osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 80021ce:	4b1c      	ldr	r3, [pc, #112]	; (8002240 <IMU_getData+0x90>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f04f 31ff 	mov.w	r1, #4294967295
 80021d6:	4618      	mov	r0, r3
 80021d8:	f00c fc52 	bl	800ea80 <osSemaphoreAcquire>
//		taskENTER_CRITICAL();
		HAL_I2C_Master_Receive(&hi2c1, _deviceAddress, receiveBuffer, (uint8_t)(numberOfBytesToRead + 4), 100);
 80021dc:	4b19      	ldr	r3, [pc, #100]	; (8002244 <IMU_getData+0x94>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	b299      	uxth	r1, r3
 80021e2:	89bb      	ldrh	r3, [r7, #12]
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	3304      	adds	r3, #4
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	2364      	movs	r3, #100	; 0x64
 80021ee:	9300      	str	r3, [sp, #0]
 80021f0:	4613      	mov	r3, r2
 80021f2:	4a15      	ldr	r2, [pc, #84]	; (8002248 <IMU_getData+0x98>)
 80021f4:	4815      	ldr	r0, [pc, #84]	; (800224c <IMU_getData+0x9c>)
 80021f6:	f006 fc49 	bl	8008a8c <HAL_I2C_Master_Receive>
//			osSemaphoreRelease(messageI2C_LockSem);
//			osDelay(100);
//			osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
//		}
//		taskEXIT_CRITICAL();
		osSemaphoreRelease(messageI2C_LockHandle);
 80021fa:	4b11      	ldr	r3, [pc, #68]	; (8002240 <IMU_getData+0x90>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4618      	mov	r0, r3
 8002200:	f00c fca4 	bl	800eb4c <osSemaphoreRelease>
//		_i2cPort->requestFrom((uint8_t)_deviceAddress, (uint8_t)(numberOfBytesToRead + 4));
//		if (waitForI2C() == false)
//			return (0); //Error

		// first four bytes are header bytes and can be thrown away
		if ( (dataSpot + numberOfBytesToRead) < MAX_PACKET_SIZE){
 8002204:	89fa      	ldrh	r2, [r7, #14]
 8002206:	89bb      	ldrh	r3, [r7, #12]
 8002208:	4413      	add	r3, r2
 800220a:	2b7f      	cmp	r3, #127	; 0x7f
 800220c:	dc07      	bgt.n	800221e <IMU_getData+0x6e>
			memcpy(&(shtpData[dataSpot]), &(receiveBuffer[4]), numberOfBytesToRead);
 800220e:	89fb      	ldrh	r3, [r7, #14]
 8002210:	4a0f      	ldr	r2, [pc, #60]	; (8002250 <IMU_getData+0xa0>)
 8002212:	4413      	add	r3, r2
 8002214:	89ba      	ldrh	r2, [r7, #12]
 8002216:	490f      	ldr	r1, [pc, #60]	; (8002254 <IMU_getData+0xa4>)
 8002218:	4618      	mov	r0, r3
 800221a:	f013 fe55 	bl	8015ec8 <memcpy>
			// Do nothing with the data
		}

		// increment data index
		// TODO: this can be changed to receive a larger buffer since this constraint is for the Arduino
		dataSpot += numberOfBytesToRead;
 800221e:	89fa      	ldrh	r2, [r7, #14]
 8002220:	89bb      	ldrh	r3, [r7, #12]
 8002222:	4413      	add	r3, r2
 8002224:	81fb      	strh	r3, [r7, #14]

		bytesRemaining -= numberOfBytesToRead;
 8002226:	88fa      	ldrh	r2, [r7, #6]
 8002228:	89bb      	ldrh	r3, [r7, #12]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	80fb      	strh	r3, [r7, #6]
	while (bytesRemaining > 0)
 800222e:	88fb      	ldrh	r3, [r7, #6]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d1c5      	bne.n	80021c0 <IMU_getData+0x10>
	}
	return (true); //Done!
 8002234:	2301      	movs	r3, #1
}
 8002236:	4618      	mov	r0, r3
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	200278a4 	.word	0x200278a4
 8002244:	20000006 	.word	0x20000006
 8002248:	20000a84 	.word	0x20000a84
 800224c:	20027e9c 	.word	0x20027e9c
 8002250:	20027dcc 	.word	0x20027dcc
 8002254:	20000a88 	.word	0x20000a88

08002258 <IMU_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
bool IMU_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b086      	sub	sp, #24
 800225c:	af02      	add	r7, sp, #8
 800225e:	4603      	mov	r3, r0
 8002260:	460a      	mov	r2, r1
 8002262:	71fb      	strb	r3, [r7, #7]
 8002264:	4613      	mov	r3, r2
 8002266:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 8002268:	79bb      	ldrb	r3, [r7, #6]
 800226a:	3304      	adds	r3, #4
 800226c:	73fb      	strb	r3, [r7, #15]

	/*  *********** POPULATE HEADER ****************************** */
	outPacket[0] = packetLength & 0xFF; 				//Packet length LSB
 800226e:	4a1b      	ldr	r2, [pc, #108]	; (80022dc <IMU_sendPacket+0x84>)
 8002270:	7bfb      	ldrb	r3, [r7, #15]
 8002272:	7013      	strb	r3, [r2, #0]
	outPacket[1] = packetLength >> 8; 					//Packet length MSB
 8002274:	7bfb      	ldrb	r3, [r7, #15]
 8002276:	121b      	asrs	r3, r3, #8
 8002278:	b2da      	uxtb	r2, r3
 800227a:	4b18      	ldr	r3, [pc, #96]	; (80022dc <IMU_sendPacket+0x84>)
 800227c:	705a      	strb	r2, [r3, #1]
	outPacket[2] = channelNumber; 						//Channel number
 800227e:	4a17      	ldr	r2, [pc, #92]	; (80022dc <IMU_sendPacket+0x84>)
 8002280:	79fb      	ldrb	r3, [r7, #7]
 8002282:	7093      	strb	r3, [r2, #2]
	outPacket[3] = sequenceNumber[channelNumber]++;	//Send the sequence number, increments with each packet sent, different counter for each channel
 8002284:	79fb      	ldrb	r3, [r7, #7]
 8002286:	4a16      	ldr	r2, [pc, #88]	; (80022e0 <IMU_sendPacket+0x88>)
 8002288:	5cd2      	ldrb	r2, [r2, r3]
 800228a:	1c51      	adds	r1, r2, #1
 800228c:	b2c8      	uxtb	r0, r1
 800228e:	4914      	ldr	r1, [pc, #80]	; (80022e0 <IMU_sendPacket+0x88>)
 8002290:	54c8      	strb	r0, [r1, r3]
 8002292:	4b12      	ldr	r3, [pc, #72]	; (80022dc <IMU_sendPacket+0x84>)
 8002294:	70da      	strb	r2, [r3, #3]

	/*  *********** FILL PAYLOAD ********************************* */
	memcpy(&(outPacket[4]), shtpData, dataLength);
 8002296:	79bb      	ldrb	r3, [r7, #6]
 8002298:	461a      	mov	r2, r3
 800229a:	4912      	ldr	r1, [pc, #72]	; (80022e4 <IMU_sendPacket+0x8c>)
 800229c:	4812      	ldr	r0, [pc, #72]	; (80022e8 <IMU_sendPacket+0x90>)
 800229e:	f013 fe13 	bl	8015ec8 <memcpy>

	/*  *********** SEND TO IMU ********************************** */
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 80022a2:	4b12      	ldr	r3, [pc, #72]	; (80022ec <IMU_sendPacket+0x94>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f04f 31ff 	mov.w	r1, #4294967295
 80022aa:	4618      	mov	r0, r3
 80022ac:	f00c fbe8 	bl	800ea80 <osSemaphoreAcquire>
//	taskENTER_CRITICAL();
	HAL_I2C_Master_Transmit(&hi2c1, _deviceAddress, outPacket, packetLength, 100);
 80022b0:	4b0f      	ldr	r3, [pc, #60]	; (80022f0 <IMU_sendPacket+0x98>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	b299      	uxth	r1, r3
 80022b6:	7bfb      	ldrb	r3, [r7, #15]
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	2364      	movs	r3, #100	; 0x64
 80022bc:	9300      	str	r3, [sp, #0]
 80022be:	4613      	mov	r3, r2
 80022c0:	4a06      	ldr	r2, [pc, #24]	; (80022dc <IMU_sendPacket+0x84>)
 80022c2:	480c      	ldr	r0, [pc, #48]	; (80022f4 <IMU_sendPacket+0x9c>)
 80022c4:	f006 faee 	bl	80088a4 <HAL_I2C_Master_Transmit>
//		osSemaphoreRelease(messageI2C_LockSem);
//		osDelay(100);
//		osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
//	}
//	taskEXIT_CRITICAL();
	osSemaphoreRelease(messageI2C_LockHandle);
 80022c8:	4b08      	ldr	r3, [pc, #32]	; (80022ec <IMU_sendPacket+0x94>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f00c fc3d 	bl	800eb4c <osSemaphoreRelease>

	return (true);
 80022d2:	2301      	movs	r3, #1
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3710      	adds	r7, #16
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	20027e58 	.word	0x20027e58
 80022e0:	20000a7c 	.word	0x20000a7c
 80022e4:	20027dcc 	.word	0x20027dcc
 80022e8:	20027e5c 	.word	0x20027e5c
 80022ec:	200278a4 	.word	0x200278a4
 80022f0:	20000006 	.word	0x20000006
 80022f4:	20027e9c 	.word	0x20027e9c

080022f8 <vPortSuppressTicksAndSleep>:
 *
 * @param: xExpectedIdleTime is given in number of FreeRTOS Ticks
 * @retval: None
 */
void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  /* Stop the SysTick  to avoid the interrupt to occur while in the critical section.
   * Otherwise, this will prevent the device to enter low power mode
   * At this time, an update of the systick will not be considered
   *
   */
  portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 8002300:	4b1e      	ldr	r3, [pc, #120]	; (800237c <vPortSuppressTicksAndSleep+0x84>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a1d      	ldr	r2, [pc, #116]	; (800237c <vPortSuppressTicksAndSleep+0x84>)
 8002306:	f023 0301 	bic.w	r3, r3, #1
 800230a:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800230c:	b672      	cpsid	i
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800230e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002312:	f3bf 8f6f 	isb	sy
  __DSB();
  __ISB();

  /* If a context switch is pending or a task is waiting for the scheduler
        to be unsuspended then abandon the low power entry. */
  if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 8002316:	f00f f99b 	bl	8011650 <eTaskConfirmSleepModeStatus>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d107      	bne.n	8002330 <vPortSuppressTicksAndSleep+0x38>
  {
    /* Restart SysTick. */
    portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8002320:	4b16      	ldr	r3, [pc, #88]	; (800237c <vPortSuppressTicksAndSleep+0x84>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a15      	ldr	r2, [pc, #84]	; (800237c <vPortSuppressTicksAndSleep+0x84>)
 8002326:	f043 0301 	orr.w	r3, r3, #1
 800232a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800232c:	b662      	cpsie	i
    portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

    /* Exit with interrUpts enabled. */
    __enable_irq();
  }
}
 800232e:	e021      	b.n	8002374 <vPortSuppressTicksAndSleep+0x7c>
    if (xExpectedIdleTime != (~0))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002336:	d002      	beq.n	800233e <vPortSuppressTicksAndSleep+0x46>
      LpTimerStart( xExpectedIdleTime );
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f000 f869 	bl	8002410 <LpTimerStart>
    LpEnter( );
 800233e:	f000 f8cb 	bl	80024d8 <LpEnter>
    if (xExpectedIdleTime != (~0))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002348:	d005      	beq.n	8002356 <vPortSuppressTicksAndSleep+0x5e>
      ulCompleteTickPeriods = LpGetElapsedTime( );
 800234a:	f000 f8cd 	bl	80024e8 <LpGetElapsedTime>
 800234e:	60f8      	str	r0, [r7, #12]
      vTaskStepTick( ulCompleteTickPeriods );
 8002350:	68f8      	ldr	r0, [r7, #12]
 8002352:	f00e fe97 	bl	8011084 <vTaskStepTick>
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002356:	4b0a      	ldr	r3, [pc, #40]	; (8002380 <vPortSuppressTicksAndSleep+0x88>)
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800235c:	4b07      	ldr	r3, [pc, #28]	; (800237c <vPortSuppressTicksAndSleep+0x84>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a06      	ldr	r2, [pc, #24]	; (800237c <vPortSuppressTicksAndSleep+0x84>)
 8002362:	f043 0301 	orr.w	r3, r3, #1
 8002366:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8002368:	4b06      	ldr	r3, [pc, #24]	; (8002384 <vPortSuppressTicksAndSleep+0x8c>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a06      	ldr	r2, [pc, #24]	; (8002388 <vPortSuppressTicksAndSleep+0x90>)
 800236e:	3b01      	subs	r3, #1
 8002370:	6013      	str	r3, [r2, #0]
 8002372:	b662      	cpsie	i
}
 8002374:	bf00      	nop
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	e000e010 	.word	0xe000e010
 8002380:	e000e018 	.word	0xe000e018
 8002384:	20000aa4 	.word	0x20000aa4
 8002388:	e000e014 	.word	0xe000e014

0800238c <vPortSetupTimerInterrupt>:
 * However, as at that time, it is not yet known whereas the low power mode that will be used is stop mode or
 * sleep mode, it is easier and simpler to go with a low power timer as soon as the tick need to be
 * suppressed.
 */
void vPortSetupTimerInterrupt( void )
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  LpTimerInit( );
 8002390:	f000 f828 	bl	80023e4 <LpTimerInit>

  /* Calculate the constants required to configure the tick interrupt. */
  ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 8002394:	4b0d      	ldr	r3, [pc, #52]	; (80023cc <vPortSetupTimerInterrupt+0x40>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a0d      	ldr	r2, [pc, #52]	; (80023d0 <vPortSetupTimerInterrupt+0x44>)
 800239a:	fba2 2303 	umull	r2, r3, r2, r3
 800239e:	099b      	lsrs	r3, r3, #6
 80023a0:	4a0c      	ldr	r2, [pc, #48]	; (80023d4 <vPortSetupTimerInterrupt+0x48>)
 80023a2:	6013      	str	r3, [r2, #0]

  /* Stop and clear the SysTick. */
  portNVIC_SYSTICK_CTRL_REG = 0UL;
 80023a4:	4b0c      	ldr	r3, [pc, #48]	; (80023d8 <vPortSetupTimerInterrupt+0x4c>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	601a      	str	r2, [r3, #0]
  portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80023aa:	4b0c      	ldr	r3, [pc, #48]	; (80023dc <vPortSetupTimerInterrupt+0x50>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]

  /* Configure SysTick to interrupt at the requested rate. */
  portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80023b0:	4b06      	ldr	r3, [pc, #24]	; (80023cc <vPortSetupTimerInterrupt+0x40>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a06      	ldr	r2, [pc, #24]	; (80023d0 <vPortSetupTimerInterrupt+0x44>)
 80023b6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ba:	099b      	lsrs	r3, r3, #6
 80023bc:	4a08      	ldr	r2, [pc, #32]	; (80023e0 <vPortSetupTimerInterrupt+0x54>)
 80023be:	3b01      	subs	r3, #1
 80023c0:	6013      	str	r3, [r2, #0]
  portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80023c2:	4b05      	ldr	r3, [pc, #20]	; (80023d8 <vPortSetupTimerInterrupt+0x4c>)
 80023c4:	2207      	movs	r2, #7
 80023c6:	601a      	str	r2, [r3, #0]
}
 80023c8:	bf00      	nop
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	20000078 	.word	0x20000078
 80023d0:	10624dd3 	.word	0x10624dd3
 80023d4:	20000aa4 	.word	0x20000aa4
 80023d8:	e000e010 	.word	0xe000e010
 80023dc:	e000e018 	.word	0xe000e018
 80023e0:	e000e014 	.word	0xe000e014

080023e4 <LpTimerInit>:
 *
 * @param  None
 * @retval None
 */
static void LpTimerInit( void )
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  ( void ) HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(LpTimerContext.LpTimerFreeRTOS_Id), hw_ts_SingleShot, LpTimerCb);
 80023e8:	4b03      	ldr	r3, [pc, #12]	; (80023f8 <LpTimerInit+0x14>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	4903      	ldr	r1, [pc, #12]	; (80023fc <LpTimerInit+0x18>)
 80023ee:	2000      	movs	r0, #0
 80023f0:	f001 f83a 	bl	8003468 <HW_TS_Create>

  return;
 80023f4:	bf00      	nop
}
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	08002401 	.word	0x08002401
 80023fc:	20000aac 	.word	0x20000aac

08002400 <LpTimerCb>:
 *
 * @param  None
 * @retval None
 */
static void LpTimerCb( void )
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  /**
   * Nothing to be done
   */

  return;
 8002404:	bf00      	nop
}
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
	...

08002410 <LpTimerStart>:
 *
 * @param  time_to_sleep : Number of FreeRTOS ticks
 * @retval None
 */
static void LpTimerStart( uint32_t time_to_sleep )
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  /* Converts the number of FreeRTOS ticks into hw timer tick */
  if(time_to_sleep <=  0x10C6)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f241 02c6 	movw	r2, #4294	; 0x10c6
 800241e:	4293      	cmp	r3, r2
 8002420:	d80c      	bhi.n	800243c <LpTimerStart+0x2c>
  {
    /**
     * ( time_to_sleep * 1000 * 1000 ) fit a 32bits word
     */
    time_to_sleep = (time_to_sleep * 1000 * 1000 );
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a28      	ldr	r2, [pc, #160]	; (80024c8 <LpTimerStart+0xb8>)
 8002426:	fb02 f303 	mul.w	r3, r2, r3
 800242a:	607b      	str	r3, [r7, #4]
    time_to_sleep = time_to_sleep / ( CFG_TS_TICK_VAL * configTICK_RATE_HZ );
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	099b      	lsrs	r3, r3, #6
 8002430:	4a26      	ldr	r2, [pc, #152]	; (80024cc <LpTimerStart+0xbc>)
 8002432:	fba2 2303 	umull	r2, r3, r2, r3
 8002436:	095b      	lsrs	r3, r3, #5
 8002438:	607b      	str	r3, [r7, #4]
 800243a:	e034      	b.n	80024a6 <LpTimerStart+0x96>
  }
  else if(time_to_sleep <= 0x418937)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4a24      	ldr	r2, [pc, #144]	; (80024d0 <LpTimerStart+0xc0>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d81b      	bhi.n	800247c <LpTimerStart+0x6c>
  {
    /**
     * ( time_to_sleep * 1000 ) fit a 32bits word
     */
    time_to_sleep = (time_to_sleep * 1000);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800244a:	fb02 f303 	mul.w	r3, r2, r3
 800244e:	607b      	str	r3, [r7, #4]
    time_to_sleep = time_to_sleep / ( CFG_TS_TICK_VAL * configTICK_RATE_HZ );
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	099b      	lsrs	r3, r3, #6
 8002454:	4a1d      	ldr	r2, [pc, #116]	; (80024cc <LpTimerStart+0xbc>)
 8002456:	fba2 2303 	umull	r2, r3, r2, r3
 800245a:	095b      	lsrs	r3, r3, #5
 800245c:	607b      	str	r3, [r7, #4]
    if(time_to_sleep <= 0x418937)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a1b      	ldr	r2, [pc, #108]	; (80024d0 <LpTimerStart+0xc0>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d806      	bhi.n	8002474 <LpTimerStart+0x64>
    {
      /**
       * ( time_to_sleep * 1000 ) fit a 32bits word
       */
      time_to_sleep = (time_to_sleep * 1000);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800246c:	fb02 f303 	mul.w	r3, r2, r3
 8002470:	607b      	str	r3, [r7, #4]
 8002472:	e018      	b.n	80024a6 <LpTimerStart+0x96>
    }
    else
    {
      time_to_sleep = (~0); /* Max value */
 8002474:	f04f 33ff 	mov.w	r3, #4294967295
 8002478:	607b      	str	r3, [r7, #4]
 800247a:	e014      	b.n	80024a6 <LpTimerStart+0x96>
    }
  }
  else
  {
    time_to_sleep = time_to_sleep / ( CFG_TS_TICK_VAL * configTICK_RATE_HZ );
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	099b      	lsrs	r3, r3, #6
 8002480:	4a12      	ldr	r2, [pc, #72]	; (80024cc <LpTimerStart+0xbc>)
 8002482:	fba2 2303 	umull	r2, r3, r2, r3
 8002486:	095b      	lsrs	r3, r3, #5
 8002488:	607b      	str	r3, [r7, #4]
    if(time_to_sleep <= 0x10C6)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f241 02c6 	movw	r2, #4294	; 0x10c6
 8002490:	4293      	cmp	r3, r2
 8002492:	d805      	bhi.n	80024a0 <LpTimerStart+0x90>
    {
      /**
       * ( time_to_sleep * 1000 * 1000 ) fit a 32bits word
       */
      time_to_sleep = (time_to_sleep * 1000 * 1000 );
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4a0c      	ldr	r2, [pc, #48]	; (80024c8 <LpTimerStart+0xb8>)
 8002498:	fb02 f303 	mul.w	r3, r2, r3
 800249c:	607b      	str	r3, [r7, #4]
 800249e:	e002      	b.n	80024a6 <LpTimerStart+0x96>
    }
    else
    {
      time_to_sleep = (~0); /* Max value */
 80024a0:	f04f 33ff 	mov.w	r3, #4294967295
 80024a4:	607b      	str	r3, [r7, #4]
    }
  }

  HW_TS_Start(LpTimerContext.LpTimerFreeRTOS_Id, time_to_sleep);
 80024a6:	4b0b      	ldr	r3, [pc, #44]	; (80024d4 <LpTimerStart+0xc4>)
 80024a8:	791b      	ldrb	r3, [r3, #4]
 80024aa:	6879      	ldr	r1, [r7, #4]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f001 f8db 	bl	8003668 <HW_TS_Start>
   * There might be other timers already running in the timer server that may elapse
   * before this one.
   * Store how long before the next event so that on wakeup, it will be possible to calculate
   * how long the tick has been suppressed
   */
  LpTimerContext.LpTimeLeftOnEntry = HW_TS_RTC_ReadLeftTicksToCount( );
 80024b2:	f001 f95f 	bl	8003774 <HW_TS_RTC_ReadLeftTicksToCount>
 80024b6:	4603      	mov	r3, r0
 80024b8:	461a      	mov	r2, r3
 80024ba:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <LpTimerStart+0xc4>)
 80024bc:	601a      	str	r2, [r3, #0]

  return;
 80024be:	bf00      	nop
}
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	000f4240 	.word	0x000f4240
 80024cc:	0113094d 	.word	0x0113094d
 80024d0:	00418937 	.word	0x00418937
 80024d4:	20000aa8 	.word	0x20000aa8

080024d8 <LpEnter>:
 *
 * @param  None
 * @retval None
 */
static void LpEnter( void )
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif
  return;
 80024dc:	bf00      	nop
}
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
	...

080024e8 <LpGetElapsedTime>:
 *
 * @param  None
 * @retval The number of tick rate (FreeRTOS tick)
 */
static uint32_t LpGetElapsedTime( void )
{
 80024e8:	b590      	push	{r4, r7, lr}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
  uint64_t return_value;

  return_value = (configTICK_RATE_HZ) * (CFG_TS_TICK_VAL) * (uint64_t)(LpTimerContext.LpTimeLeftOnEntry - HW_TS_RTC_ReadLeftTicksToCount( ));
 80024ee:	4b16      	ldr	r3, [pc, #88]	; (8002548 <LpGetElapsedTime+0x60>)
 80024f0:	681c      	ldr	r4, [r3, #0]
 80024f2:	f001 f93f 	bl	8003774 <HW_TS_RTC_ReadLeftTicksToCount>
 80024f6:	4603      	mov	r3, r0
 80024f8:	1ae3      	subs	r3, r4, r3
 80024fa:	f04f 0400 	mov.w	r4, #0
 80024fe:	4a13      	ldr	r2, [pc, #76]	; (800254c <LpGetElapsedTime+0x64>)
 8002500:	fb02 f104 	mul.w	r1, r2, r4
 8002504:	2200      	movs	r2, #0
 8002506:	fb02 f203 	mul.w	r2, r2, r3
 800250a:	440a      	add	r2, r1
 800250c:	490f      	ldr	r1, [pc, #60]	; (800254c <LpGetElapsedTime+0x64>)
 800250e:	fba3 3401 	umull	r3, r4, r3, r1
 8002512:	4422      	add	r2, r4
 8002514:	4614      	mov	r4, r2
 8002516:	e9c7 3400 	strd	r3, r4, [r7]
 800251a:	e9c7 3400 	strd	r3, r4, [r7]
  return_value = return_value / (1000 * 1000);
 800251e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002522:	4a0b      	ldr	r2, [pc, #44]	; (8002550 <LpGetElapsedTime+0x68>)
 8002524:	f04f 0300 	mov.w	r3, #0
 8002528:	f7fe faf0 	bl	8000b0c <__aeabi_uldivmod>
 800252c:	4603      	mov	r3, r0
 800252e:	460c      	mov	r4, r1
 8002530:	e9c7 3400 	strd	r3, r4, [r7]
   * The system may have been out from another reason than the timer
   * Stop the timer after the elapsed time is calculated other wise, HW_TS_RTC_ReadLeftTicksToCount()
   * may return 0xFFFF ( TIMER LIST EMPTY )
   * It does not hurt stopping a timer that exists but is not running.
   */
  HW_TS_Stop(LpTimerContext.LpTimerFreeRTOS_Id);
 8002534:	4b04      	ldr	r3, [pc, #16]	; (8002548 <LpGetElapsedTime+0x60>)
 8002536:	791b      	ldrb	r3, [r3, #4]
 8002538:	4618      	mov	r0, r3
 800253a:	f001 f80b 	bl	8003554 <HW_TS_Stop>

  return (uint32_t)return_value;
 800253e:	683b      	ldr	r3, [r7, #0]
}
 8002540:	4618      	mov	r0, r3
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	bd90      	pop	{r4, r7, pc}
 8002548:	20000aa8 	.word	0x20000aa8
 800254c:	00077240 	.word	0x00077240
 8002550:	000f4240 	.word	0x000f4240

08002554 <_GeometryBuilder>:

BaseStationGeometryDef bs_1 = {{1.738303, 2.430314,  0.781285},
							  {0.285992, -0.253563, 0.924075, 0.040683, 0.966697, 0.252668, -0.957368, -0.034667, 0.286784}};
SensorLocalGeometry s_loc_geo = {0, {0.0, 0.0, 0.0}};

void _GeometryBuilder(GeometryBuilder *self){
 8002554:	b4b0      	push	{r4, r5, r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]

	self->base_stations_[0] = bs_0;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4a12      	ldr	r2, [pc, #72]	; (80025a8 <_GeometryBuilder+0x54>)
 8002560:	461c      	mov	r4, r3
 8002562:	4615      	mov	r5, r2
 8002564:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002566:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002568:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800256a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800256c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002570:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	self->base_stations_[1] = bs_1;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4a0d      	ldr	r2, [pc, #52]	; (80025ac <_GeometryBuilder+0x58>)
 8002578:	f103 0430 	add.w	r4, r3, #48	; 0x30
 800257c:	4615      	mov	r5, r2
 800257e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002580:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002582:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002584:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002586:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800258a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	self->sensors[0] = s_loc_geo;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a07      	ldr	r2, [pc, #28]	; (80025b0 <_GeometryBuilder+0x5c>)
 8002592:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8002596:	4613      	mov	r3, r2
 8002598:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800259a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800259e:	bf00      	nop
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bcb0      	pop	{r4, r5, r7}
 80025a6:	4770      	bx	lr
 80025a8:	20000008 	.word	0x20000008
 80025ac:	20000038 	.word	0x20000038
 80025b0:	20000ab0 	.word	0x20000ab0

080025b4 <consume_angles>:

void consume_angles(GeometryBuilder * self, const SensorAnglesFrame * f) {
 80025b4:	b5b0      	push	{r4, r5, r7, lr}
 80025b6:	b096      	sub	sp, #88	; 0x58
 80025b8:	af02      	add	r7, sp, #8
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
    // First 2 angles - x, y of station B; second 2 angles - x, y of station C.
    // Coordinate system: Y - Up;  X ->  Z v  (to the viewer)
    // Station 'looks' to inverse Z axis (vector 0;0;-1).
    if (f->fix_level >= kCycleSynced) {
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	2bc7      	cmp	r3, #199	; 0xc7
 80025c4:	f340 8093 	ble.w	80026ee <consume_angles+0x13a>
        SensorLocalGeometry *sens_def = &self->sensors[0];
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	3360      	adds	r3, #96	; 0x60
 80025cc:	643b      	str	r3, [r7, #64]	; 0x40
        SensorAngles *sens = &f->sensors[sens_def->input_idx];
 80025ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	015b      	lsls	r3, r3, #5
 80025d4:	3310      	adds	r3, #16
 80025d6:	683a      	ldr	r2, [r7, #0]
 80025d8:	4413      	add	r3, r2
 80025da:	63fb      	str	r3, [r7, #60]	; 0x3c

        // Check angles are fresh enough.
        uint32_t max_stale = 0;
 80025dc:	2300      	movs	r3, #0
 80025de:	64fb      	str	r3, [r7, #76]	; 0x4c
        for (int i = 0; i < NUM_CYCLE_PHASES; i++){
 80025e0:	2300      	movs	r3, #0
 80025e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80025e4:	e011      	b.n	800260a <consume_angles+0x56>
        	//Get time since we last updated the angles for phase i
        	int stale = f->cycle_idx - sens->updated_cycles[i];
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	689a      	ldr	r2, [r3, #8]
 80025ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025ec:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80025ee:	3104      	adds	r1, #4
 80025f0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	63bb      	str	r3, [r7, #56]	; 0x38
        	max_stale = (stale > max_stale) ? stale : max_stale;
 80025f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80025fc:	4293      	cmp	r3, r2
 80025fe:	bf38      	it	cc
 8002600:	4613      	movcc	r3, r2
 8002602:	64fb      	str	r3, [r7, #76]	; 0x4c
        for (int i = 0; i < NUM_CYCLE_PHASES; i++){
 8002604:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002606:	3301      	adds	r3, #1
 8002608:	64bb      	str	r3, [r7, #72]	; 0x48
 800260a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800260c:	2b03      	cmp	r3, #3
 800260e:	ddea      	ble.n	80025e6 <consume_angles+0x32>
        }

        if (max_stale < NUM_CYCLE_PHASES * 3) {  // We tolerate stale angles up to 2 cycles old.
 8002610:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002612:	2b0b      	cmp	r3, #11
 8002614:	d86b      	bhi.n	80026ee <consume_angles+0x13a>
            float ray1[VEC3D_SIZE], ray2[VEC3D_SIZE], origin1[VEC3D_SIZE], origin2[VEC3D_SIZE];
            calc_ray_vec(&self->base_stations_[0], sens->angles[0], sens->angles[1], ray1, origin1);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800261a:	edd3 7a00 	vldr	s15, [r3]
 800261e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002620:	ed93 7a01 	vldr	s14, [r3, #4]
 8002624:	f107 0214 	add.w	r2, r7, #20
 8002628:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800262c:	4619      	mov	r1, r3
 800262e:	eef0 0a47 	vmov.f32	s1, s14
 8002632:	eeb0 0a67 	vmov.f32	s0, s15
 8002636:	f000 f8e5 	bl	8002804 <calc_ray_vec>
            calc_ray_vec(&self->base_stations_[1], sens->angles[2], sens->angles[3], ray2, origin2);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8002640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002642:	edd3 7a02 	vldr	s15, [r3, #8]
 8002646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002648:	ed93 7a03 	vldr	s14, [r3, #12]
 800264c:	f107 0208 	add.w	r2, r7, #8
 8002650:	f107 0320 	add.w	r3, r7, #32
 8002654:	4619      	mov	r1, r3
 8002656:	eef0 0a47 	vmov.f32	s1, s14
 800265a:	eeb0 0a67 	vmov.f32	s0, s15
 800265e:	f000 f8d1 	bl	8002804 <calc_ray_vec>

            intersect_lines(origin1, ray1, origin2, ray2, self->vive_vars_.pos, &self->vive_vars_.pos_delta);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	3370      	adds	r3, #112	; 0x70
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	327c      	adds	r2, #124	; 0x7c
 800266a:	f107 0520 	add.w	r5, r7, #32
 800266e:	f107 0408 	add.w	r4, r7, #8
 8002672:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002676:	f107 0014 	add.w	r0, r7, #20
 800267a:	9201      	str	r2, [sp, #4]
 800267c:	9300      	str	r3, [sp, #0]
 800267e:	462b      	mov	r3, r5
 8002680:	4622      	mov	r2, r4
 8002682:	f000 f945 	bl	8002910 <intersect_lines>

            // Translate object position depending on the position of sensor relative to object.
            for (int i = 0; i < VEC3D_SIZE; i++){
 8002686:	2300      	movs	r3, #0
 8002688:	647b      	str	r3, [r7, #68]	; 0x44
 800268a:	e019      	b.n	80026c0 <consume_angles+0x10c>
            	self->vive_vars_.pos[i] -= sens_def->pos[i];
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002690:	331c      	adds	r3, #28
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	4413      	add	r3, r2
 8002696:	ed93 7a00 	vldr	s14, [r3]
 800269a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800269c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	4413      	add	r3, r2
 80026a2:	3304      	adds	r3, #4
 80026a4:	edd3 7a00 	vldr	s15, [r3]
 80026a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026b0:	331c      	adds	r3, #28
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	4413      	add	r3, r2
 80026b6:	edc3 7a00 	vstr	s15, [r3]
            for (int i = 0; i < VEC3D_SIZE; i++){
 80026ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026bc:	3301      	adds	r3, #1
 80026be:	647b      	str	r3, [r7, #68]	; 0x44
 80026c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	dde2      	ble.n	800268c <consume_angles+0xd8>
            }

            self->vive_vars_.time_ms = HAL_GetTick();
 80026c6:	f003 fe03 	bl	80062d0 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

            //Put VIVE measurements in the message queue
            osMessageQueuePut(viveQueueHandle, (void *) &self->vive_vars_, NULL, 0);
 80026d2:	4b09      	ldr	r3, [pc, #36]	; (80026f8 <consume_angles+0x144>)
 80026d4:	6818      	ldr	r0, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f103 0170 	add.w	r1, r3, #112	; 0x70
 80026dc:	2300      	movs	r3, #0
 80026de:	2200      	movs	r2, #0
 80026e0:	f00c fb12 	bl	800ed08 <osMessageQueuePut>
            // tell timer function that localization is complete
			osSemaphoreRelease(locCompleteHandle);
 80026e4:	4b05      	ldr	r3, [pc, #20]	; (80026fc <consume_angles+0x148>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f00c fa2f 	bl	800eb4c <osSemaphoreRelease>
        else {
            // Angles too stale - cannot calculate position anymore.

        }
    }
}
 80026ee:	bf00      	nop
 80026f0:	3750      	adds	r7, #80	; 0x50
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bdb0      	pop	{r4, r5, r7, pc}
 80026f6:	bf00      	nop
 80026f8:	200277a8 	.word	0x200277a8
 80026fc:	20027ce0 	.word	0x20027ce0

08002700 <vec_cross_product>:
    // TODO: Make compatible with multiple geometry objects.
    //set_led_state(self->pos_.fix_level >= kStaleFix ? kFixFound : kNoFix);
}
*/

void vec_cross_product(float *a, float *b, float *res) {
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	607a      	str	r2, [r7, #4]
    res[0] = a[1] * b[2] - a[2] * b[1];
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	3304      	adds	r3, #4
 8002710:	ed93 7a00 	vldr	s14, [r3]
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	3308      	adds	r3, #8
 8002718:	edd3 7a00 	vldr	s15, [r3]
 800271c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	3308      	adds	r3, #8
 8002724:	edd3 6a00 	vldr	s13, [r3]
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	3304      	adds	r3, #4
 800272c:	edd3 7a00 	vldr	s15, [r3]
 8002730:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002734:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	edc3 7a00 	vstr	s15, [r3]
    res[1] = a[2] * b[0] - a[0] * b[2];
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	3308      	adds	r3, #8
 8002742:	ed93 7a00 	vldr	s14, [r3]
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	edd3 7a00 	vldr	s15, [r3]
 800274c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	edd3 6a00 	vldr	s13, [r3]
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	3308      	adds	r3, #8
 800275a:	edd3 7a00 	vldr	s15, [r3]
 800275e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	3304      	adds	r3, #4
 8002766:	ee77 7a67 	vsub.f32	s15, s14, s15
 800276a:	edc3 7a00 	vstr	s15, [r3]
    res[2] = a[0] * b[1] - a[1] * b[0];
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	ed93 7a00 	vldr	s14, [r3]
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	3304      	adds	r3, #4
 8002778:	edd3 7a00 	vldr	s15, [r3]
 800277c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	3304      	adds	r3, #4
 8002784:	edd3 6a00 	vldr	s13, [r3]
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	edd3 7a00 	vldr	s15, [r3]
 800278e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	3308      	adds	r3, #8
 8002796:	ee77 7a67 	vsub.f32	s15, s14, s15
 800279a:	edc3 7a00 	vstr	s15, [r3]
}
 800279e:	bf00      	nop
 80027a0:	3714      	adds	r7, #20
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr

080027aa <vec_length>:

float vec_length(float *vec) {
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b086      	sub	sp, #24
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
    float pow, res;

    arm_power_f32(vec, VEC3D_SIZE, &pow); // returns sum of squares
 80027b2:	f107 030c 	add.w	r3, r7, #12
 80027b6:	461a      	mov	r2, r3
 80027b8:	2103      	movs	r1, #3
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f013 f894 	bl	80158e8 <arm_power_f32>
    arm_sqrt_f32(pow, &res);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	617b      	str	r3, [r7, #20]
 80027c4:	f107 0308 	add.w	r3, r7, #8
 80027c8:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 80027ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80027ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027d6:	db09      	blt.n	80027ec <vec_length+0x42>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 80027d8:	ed97 0a05 	vldr	s0, [r7, #20]
 80027dc:	f013 fcf8 	bl	80161d0 <sqrtf>
 80027e0:	eef0 7a40 	vmov.f32	s15, s0
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	edc3 7a00 	vstr	s15, [r3]
 80027ea:	e003      	b.n	80027f4 <vec_length+0x4a>

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	f04f 0200 	mov.w	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]

    return res;
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	ee07 3a90 	vmov	s15, r3
}
 80027fa:	eeb0 0a67 	vmov.f32	s0, s15
 80027fe:	3718      	adds	r7, #24
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <calc_ray_vec>:

void calc_ray_vec(const BaseStationGeometryDef * bs, float angle1, float angle2, float *res, float *origin) {
 8002804:	b580      	push	{r7, lr}
 8002806:	b09a      	sub	sp, #104	; 0x68
 8002808:	af00      	add	r7, sp, #0
 800280a:	6178      	str	r0, [r7, #20]
 800280c:	ed87 0a04 	vstr	s0, [r7, #16]
 8002810:	edc7 0a03 	vstr	s1, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
    float a[VEC3D_SIZE] = {arm_cos_f32(angle1), 0, -arm_sin_f32(angle1)};  // Normal vector to X plane
 8002818:	ed97 0a04 	vldr	s0, [r7, #16]
 800281c:	f013 f990 	bl	8015b40 <arm_cos_f32>
 8002820:	eef0 7a40 	vmov.f32	s15, s0
 8002824:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 8002828:	f04f 0300 	mov.w	r3, #0
 800282c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800282e:	ed97 0a04 	vldr	s0, [r7, #16]
 8002832:	f013 f93f 	bl	8015ab4 <arm_sin_f32>
 8002836:	eef0 7a40 	vmov.f32	s15, s0
 800283a:	eef1 7a67 	vneg.f32	s15, s15
 800283e:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    float b[VEC3D_SIZE] = {0, arm_cos_f32(angle2), arm_sin_f32(angle2)};   // Normal vector to Y plane
 8002842:	f04f 0300 	mov.w	r3, #0
 8002846:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002848:	ed97 0a03 	vldr	s0, [r7, #12]
 800284c:	f013 f978 	bl	8015b40 <arm_cos_f32>
 8002850:	eef0 7a40 	vmov.f32	s15, s0
 8002854:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
 8002858:	ed97 0a03 	vldr	s0, [r7, #12]
 800285c:	f013 f92a 	bl	8015ab4 <arm_sin_f32>
 8002860:	eef0 7a40 	vmov.f32	s15, s0
 8002864:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    float ray[VEC3D_SIZE] = {};
 8002868:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	605a      	str	r2, [r3, #4]
 8002872:	609a      	str	r2, [r3, #8]
    vec_cross_product(b, a, ray); // Intersection of two planes -> ray vector.
 8002874:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002878:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800287c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002880:	4618      	mov	r0, r3
 8002882:	f7ff ff3d 	bl	8002700 <vec_cross_product>
    float len = vec_length(ray);
 8002886:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800288a:	4618      	mov	r0, r3
 800288c:	f7ff ff8d 	bl	80027aa <vec_length>
 8002890:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
    arm_scale_f32(ray, 1/len, ray, VEC3D_SIZE); // Normalize ray length.
 8002894:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002898:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800289c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80028a0:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80028a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80028a8:	2203      	movs	r2, #3
 80028aa:	eeb0 0a66 	vmov.f32	s0, s13
 80028ae:	4618      	mov	r0, r3
 80028b0:	f013 f9ea 	bl	8015c88 <arm_scale_f32>

    arm_matrix_instance_f32 source_rotation_matrix = {3, 3, (const float*) bs->mat};
 80028b4:	2303      	movs	r3, #3
 80028b6:	873b      	strh	r3, [r7, #56]	; 0x38
 80028b8:	2303      	movs	r3, #3
 80028ba:	877b      	strh	r3, [r7, #58]	; 0x3a
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	330c      	adds	r3, #12
 80028c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    arm_matrix_instance_f32 ray_vec = {3, 1, ray};
 80028c2:	2303      	movs	r3, #3
 80028c4:	863b      	strh	r3, [r7, #48]	; 0x30
 80028c6:	2301      	movs	r3, #1
 80028c8:	867b      	strh	r3, [r7, #50]	; 0x32
 80028ca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80028ce:	637b      	str	r3, [r7, #52]	; 0x34
    arm_matrix_instance_f32 ray_rotated_vec = {3, 1, res};
 80028d0:	2303      	movs	r3, #3
 80028d2:	853b      	strh	r3, [r7, #40]	; 0x28
 80028d4:	2301      	movs	r3, #1
 80028d6:	857b      	strh	r3, [r7, #42]	; 0x2a
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	62fb      	str	r3, [r7, #44]	; 0x2c
    arm_mat_mult_f32(&source_rotation_matrix, &ray_vec, &ray_rotated_vec);
 80028dc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80028e0:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80028e4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80028e8:	4618      	mov	r0, r3
 80028ea:	f013 f843 	bl	8015974 <arm_mat_mult_f32>

    // TODO: Make geometry adjustments within base station.
    float rotated_origin_delta[VEC3D_SIZE] = {};
 80028ee:	f107 031c 	add.w	r3, r7, #28
 80028f2:	2200      	movs	r2, #0
 80028f4:	601a      	str	r2, [r3, #0]
 80028f6:	605a      	str	r2, [r3, #4]
 80028f8:	609a      	str	r2, [r3, #8]
    //vec3d base_origin_delta = {-0.025f, -0.025f, 0.f};  // Rotors are slightly off center in base station.
    // arm_matrix_instance_f32 origin_vec = {3, 1, base_origin_delta};
    // arm_matrix_instance_f32 origin_rotated_vec = {3, 1, rotated_origin_delta};
    // arm_mat_mult_f32(&source_rotation_matrix, &origin_vec, &origin_rotated_vec);
    arm_add_f32((const float *) bs->origin, rotated_origin_delta, origin, VEC3D_SIZE);
 80028fa:	6978      	ldr	r0, [r7, #20]
 80028fc:	f107 011c 	add.w	r1, r7, #28
 8002900:	2303      	movs	r3, #3
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	f013 fa5c 	bl	8015dc0 <arm_add_f32>
}
 8002908:	bf00      	nop
 800290a:	3768      	adds	r7, #104	; 0x68
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <intersect_lines>:


uint8_t intersect_lines(float *orig1, float *vec1, float *orig2, float *vec2, float *res, float *dist) {
 8002910:	b580      	push	{r7, lr}
 8002912:	b098      	sub	sp, #96	; 0x60
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
 800291c:	603b      	str	r3, [r7, #0]
    // Algorithm: http://geomalgorithms.com/a07-_distance.html#Distance-between-Lines

    float w0[VEC3D_SIZE] = {};
 800291e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002922:	2200      	movs	r2, #0
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	605a      	str	r2, [r3, #4]
 8002928:	609a      	str	r2, [r3, #8]
    arm_sub_f32((const float *)orig1, (const float *)orig2, w0, VEC3D_SIZE);
 800292a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800292e:	2303      	movs	r3, #3
 8002930:	6879      	ldr	r1, [r7, #4]
 8002932:	68f8      	ldr	r0, [r7, #12]
 8002934:	f013 f94e 	bl	8015bd4 <arm_sub_f32>

    float a, b, c, d, e;
    arm_dot_prod_f32((const float *)vec1, (const float *)vec1, VEC3D_SIZE, &a);
 8002938:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800293c:	2203      	movs	r2, #3
 800293e:	68b9      	ldr	r1, [r7, #8]
 8002940:	68b8      	ldr	r0, [r7, #8]
 8002942:	f013 f9e5 	bl	8015d10 <arm_dot_prod_f32>
    arm_dot_prod_f32((const float *)vec1, (const float *)vec2, VEC3D_SIZE, &b);
 8002946:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800294a:	2203      	movs	r2, #3
 800294c:	6839      	ldr	r1, [r7, #0]
 800294e:	68b8      	ldr	r0, [r7, #8]
 8002950:	f013 f9de 	bl	8015d10 <arm_dot_prod_f32>
    arm_dot_prod_f32((const float *)vec2, (const float *)vec2, VEC3D_SIZE, &c);
 8002954:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002958:	2203      	movs	r2, #3
 800295a:	6839      	ldr	r1, [r7, #0]
 800295c:	6838      	ldr	r0, [r7, #0]
 800295e:	f013 f9d7 	bl	8015d10 <arm_dot_prod_f32>
    arm_dot_prod_f32((const float *)vec1, w0, VEC3D_SIZE, &d);
 8002962:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002966:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800296a:	2203      	movs	r2, #3
 800296c:	68b8      	ldr	r0, [r7, #8]
 800296e:	f013 f9cf 	bl	8015d10 <arm_dot_prod_f32>
    arm_dot_prod_f32((const float *)vec2, w0, VEC3D_SIZE, &e);
 8002972:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002976:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800297a:	2203      	movs	r2, #3
 800297c:	6838      	ldr	r0, [r7, #0]
 800297e:	f013 f9c7 	bl	8015d10 <arm_dot_prod_f32>

    float denom = a * c - b * b;
 8002982:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002986:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800298a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800298e:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8002992:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002996:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800299a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800299e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    if (fabs(denom) < 1e-5f)
 80029a2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80029a6:	eef0 7ae7 	vabs.f32	s15, s15
 80029aa:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8002ac8 <intersect_lines+0x1b8>
 80029ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029b6:	d501      	bpl.n	80029bc <intersect_lines+0xac>
        return 0;
 80029b8:	2300      	movs	r3, #0
 80029ba:	e081      	b.n	8002ac0 <intersect_lines+0x1b0>

    // Closest point to 2nd line on 1st line
    float t1 = (b * e - c * d) / denom;
 80029bc:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80029c0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80029c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029c8:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 80029cc:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80029d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029d4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80029d8:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80029dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029e0:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    float pt1[VEC3D_SIZE] = {};
 80029e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029e8:	2200      	movs	r2, #0
 80029ea:	601a      	str	r2, [r3, #0]
 80029ec:	605a      	str	r2, [r3, #4]
 80029ee:	609a      	str	r2, [r3, #8]
    arm_scale_f32((const float *)vec1, t1, pt1, VEC3D_SIZE);
 80029f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029f4:	2203      	movs	r2, #3
 80029f6:	4619      	mov	r1, r3
 80029f8:	ed97 0a16 	vldr	s0, [r7, #88]	; 0x58
 80029fc:	68b8      	ldr	r0, [r7, #8]
 80029fe:	f013 f943 	bl	8015c88 <arm_scale_f32>
    arm_add_f32(pt1, (const float *)orig1, pt1, VEC3D_SIZE);
 8002a02:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a06:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	68f9      	ldr	r1, [r7, #12]
 8002a0e:	f013 f9d7 	bl	8015dc0 <arm_add_f32>

    // Closest point to 1st line on 2nd line
    float t2 = (a * e - b * d) / denom;
 8002a12:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002a16:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002a1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a1e:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8002a22:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002a26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a2a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002a2e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002a32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a36:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    float pt2[VEC3D_SIZE] = {};
 8002a3a:	f107 031c 	add.w	r3, r7, #28
 8002a3e:	2200      	movs	r2, #0
 8002a40:	601a      	str	r2, [r3, #0]
 8002a42:	605a      	str	r2, [r3, #4]
 8002a44:	609a      	str	r2, [r3, #8]
    arm_scale_f32((const float *)vec2, t2, pt2, VEC3D_SIZE);
 8002a46:	f107 031c 	add.w	r3, r7, #28
 8002a4a:	2203      	movs	r2, #3
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	ed97 0a15 	vldr	s0, [r7, #84]	; 0x54
 8002a52:	6838      	ldr	r0, [r7, #0]
 8002a54:	f013 f918 	bl	8015c88 <arm_scale_f32>
    arm_add_f32(pt2, (const float *)orig2, pt2, VEC3D_SIZE);
 8002a58:	f107 021c 	add.w	r2, r7, #28
 8002a5c:	f107 001c 	add.w	r0, r7, #28
 8002a60:	2303      	movs	r3, #3
 8002a62:	6879      	ldr	r1, [r7, #4]
 8002a64:	f013 f9ac 	bl	8015dc0 <arm_add_f32>

    // Result is in the middle
    float tmp[VEC3D_SIZE] = {};
 8002a68:	f107 0310 	add.w	r3, r7, #16
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	605a      	str	r2, [r3, #4]
 8002a72:	609a      	str	r2, [r3, #8]
    arm_add_f32(pt1, pt2, tmp, VEC3D_SIZE);
 8002a74:	f107 0210 	add.w	r2, r7, #16
 8002a78:	f107 011c 	add.w	r1, r7, #28
 8002a7c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002a80:	2303      	movs	r3, #3
 8002a82:	f013 f99d 	bl	8015dc0 <arm_add_f32>
    arm_scale_f32(tmp, 0.5f, res, VEC3D_SIZE);
 8002a86:	f107 0310 	add.w	r3, r7, #16
 8002a8a:	2203      	movs	r2, #3
 8002a8c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002a8e:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002a92:	4618      	mov	r0, r3
 8002a94:	f013 f8f8 	bl	8015c88 <arm_scale_f32>

    // Dist is distance between pt1 and pt2
    arm_sub_f32(pt1, pt2, tmp, VEC3D_SIZE);
 8002a98:	f107 0210 	add.w	r2, r7, #16
 8002a9c:	f107 011c 	add.w	r1, r7, #28
 8002aa0:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	f013 f895 	bl	8015bd4 <arm_sub_f32>
    *dist = vec_length(tmp);
 8002aaa:	f107 0310 	add.w	r3, r7, #16
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7ff fe7b 	bl	80027aa <vec_length>
 8002ab4:	eef0 7a40 	vmov.f32	s15, s0
 8002ab8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aba:	edc3 7a00 	vstr	s15, [r3]

    return 1;
 8002abe:	2301      	movs	r3, #1
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3760      	adds	r7, #96	; 0x60
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	3727c5ac 	.word	0x3727c5ac

08002acc <LL_AHB2_GRP1_EnableClock>:
{
 8002acc:	b480      	push	{r7}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002ad4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ad8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ada:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002ae4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ae8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4013      	ands	r3, r2
 8002aee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002af0:	68fb      	ldr	r3, [r7, #12]
}
 8002af2:	bf00      	nop
 8002af4:	3714      	adds	r7, #20
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
	...

08002b00 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b086      	sub	sp, #24
 8002b04:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b06:	1d3b      	adds	r3, r7, #4
 8002b08:	2200      	movs	r2, #0
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	605a      	str	r2, [r3, #4]
 8002b0e:	609a      	str	r2, [r3, #8]
 8002b10:	60da      	str	r2, [r3, #12]
 8002b12:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b14:	2004      	movs	r0, #4
 8002b16:	f7ff ffd9 	bl	8002acc <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b1a:	2080      	movs	r0, #128	; 0x80
 8002b1c:	f7ff ffd6 	bl	8002acc <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b20:	2002      	movs	r0, #2
 8002b22:	f7ff ffd3 	bl	8002acc <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b26:	2001      	movs	r0, #1
 8002b28:	f7ff ffd0 	bl	8002acc <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b2c:	2010      	movs	r0, #16
 8002b2e:	f7ff ffcd 	bl	8002acc <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002b32:	2308      	movs	r3, #8
 8002b34:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b36:	2303      	movs	r3, #3
 8002b38:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002b3e:	1d3b      	adds	r3, r7, #4
 8002b40:	4619      	mov	r1, r3
 8002b42:	4829      	ldr	r0, [pc, #164]	; (8002be8 <MX_GPIO_Init+0xe8>)
 8002b44:	f005 fc7e 	bl	8008444 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 PB0 PB1 
                           PB4 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0|GPIO_PIN_1 
 8002b48:	f240 33f3 	movw	r3, #1011	; 0x3f3
 8002b4c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b52:	2300      	movs	r3, #0
 8002b54:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b56:	1d3b      	adds	r3, r7, #4
 8002b58:	4619      	mov	r1, r3
 8002b5a:	4824      	ldr	r0, [pc, #144]	; (8002bec <MX_GPIO_Init+0xec>)
 8002b5c:	f005 fc72 	bl	8008444 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 PA6 
                           PA7 PA8 PA11 PA12 
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6 
 8002b60:	f649 13dc 	movw	r3, #39388	; 0x99dc
 8002b64:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12 
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b66:	2303      	movs	r3, #3
 8002b68:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b6e:	1d3b      	adds	r3, r7, #4
 8002b70:	4619      	mov	r1, r3
 8002b72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b76:	f005 fc65 	bl	8008444 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8002b7a:	2320      	movs	r3, #32
 8002b7c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002b7e:	4b1c      	ldr	r3, [pc, #112]	; (8002bf0 <MX_GPIO_Init+0xf0>)
 8002b80:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b82:	2301      	movs	r3, #1
 8002b84:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8002b86:	1d3b      	adds	r3, r7, #4
 8002b88:	4619      	mov	r1, r3
 8002b8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b8e:	f005 fc59 	bl	8008444 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXPANSION_INT_Pin;
 8002b92:	2304      	movs	r3, #4
 8002b94:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b96:	4b17      	ldr	r3, [pc, #92]	; (8002bf4 <MX_GPIO_Init+0xf4>)
 8002b98:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(EXPANSION_INT_GPIO_Port, &GPIO_InitStruct);
 8002b9e:	1d3b      	adds	r3, r7, #4
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	4812      	ldr	r0, [pc, #72]	; (8002bec <MX_GPIO_Init+0xec>)
 8002ba4:	f005 fc4e 	bl	8008444 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002ba8:	2310      	movs	r3, #16
 8002baa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002bac:	2303      	movs	r3, #3
 8002bae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002bb4:	1d3b      	adds	r3, r7, #4
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	480f      	ldr	r0, [pc, #60]	; (8002bf8 <MX_GPIO_Init+0xf8>)
 8002bba:	f005 fc43 	bl	8008444 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	2105      	movs	r1, #5
 8002bc2:	2008      	movs	r0, #8
 8002bc4:	f005 f8b7 	bl	8007d36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002bc8:	2008      	movs	r0, #8
 8002bca:	f005 f8ce 	bl	8007d6a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8002bce:	2200      	movs	r2, #0
 8002bd0:	2105      	movs	r1, #5
 8002bd2:	2017      	movs	r0, #23
 8002bd4:	f005 f8af 	bl	8007d36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002bd8:	2017      	movs	r0, #23
 8002bda:	f005 f8c6 	bl	8007d6a <HAL_NVIC_EnableIRQ>

}
 8002bde:	bf00      	nop
 8002be0:	3718      	adds	r7, #24
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	48001c00 	.word	0x48001c00
 8002bec:	48000400 	.word	0x48000400
 8002bf0:	10210000 	.word	0x10210000
 8002bf4:	10110000 	.word	0x10110000
 8002bf8:	48001000 	.word	0x48001000

08002bfc <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002c04:	4b06      	ldr	r3, [pc, #24]	; (8002c20 <LL_EXTI_EnableIT_0_31+0x24>)
 8002c06:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002c0a:	4905      	ldr	r1, [pc, #20]	; (8002c20 <LL_EXTI_EnableIT_0_31+0x24>)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr
 8002c20:	58000800 	.word	0x58000800

08002c24 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002c2c:	4b05      	ldr	r3, [pc, #20]	; (8002c44 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	4904      	ldr	r1, [pc, #16]	; (8002c44 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	600b      	str	r3, [r1, #0]

}
 8002c38:	bf00      	nop
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr
 8002c44:	58000800 	.word	0x58000800

08002c48 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002c4e:	4b0d      	ldr	r3, [pc, #52]	; (8002c84 <ReadRtcSsrValue+0x3c>)
 8002c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002c56:	4b0b      	ldr	r3, [pc, #44]	; (8002c84 <ReadRtcSsrValue+0x3c>)
 8002c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8002c5e:	e005      	b.n	8002c6c <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002c64:	4b07      	ldr	r3, [pc, #28]	; (8002c84 <ReadRtcSsrValue+0x3c>)
 8002c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d1f5      	bne.n	8002c60 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8002c74:	683b      	ldr	r3, [r7, #0]
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	40002800 	.word	0x40002800

08002c88 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	4603      	mov	r3, r0
 8002c90:	460a      	mov	r2, r1
 8002c92:	71fb      	strb	r3, [r7, #7]
 8002c94:	4613      	mov	r3, r2
 8002c96:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8002c98:	79ba      	ldrb	r2, [r7, #6]
 8002c9a:	491d      	ldr	r1, [pc, #116]	; (8002d10 <LinkTimerAfter+0x88>)
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	4413      	add	r3, r2
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	440b      	add	r3, r1
 8002ca6:	3315      	adds	r3, #21
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002cac:	7bfb      	ldrb	r3, [r7, #15]
 8002cae:	2b06      	cmp	r3, #6
 8002cb0:	d009      	beq.n	8002cc6 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8002cb2:	7bfa      	ldrb	r2, [r7, #15]
 8002cb4:	4916      	ldr	r1, [pc, #88]	; (8002d10 <LinkTimerAfter+0x88>)
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	4413      	add	r3, r2
 8002cbc:	00db      	lsls	r3, r3, #3
 8002cbe:	440b      	add	r3, r1
 8002cc0:	3314      	adds	r3, #20
 8002cc2:	79fa      	ldrb	r2, [r7, #7]
 8002cc4:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8002cc6:	79fa      	ldrb	r2, [r7, #7]
 8002cc8:	4911      	ldr	r1, [pc, #68]	; (8002d10 <LinkTimerAfter+0x88>)
 8002cca:	4613      	mov	r3, r2
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	4413      	add	r3, r2
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	440b      	add	r3, r1
 8002cd4:	3315      	adds	r3, #21
 8002cd6:	7bfa      	ldrb	r2, [r7, #15]
 8002cd8:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8002cda:	79fa      	ldrb	r2, [r7, #7]
 8002cdc:	490c      	ldr	r1, [pc, #48]	; (8002d10 <LinkTimerAfter+0x88>)
 8002cde:	4613      	mov	r3, r2
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	4413      	add	r3, r2
 8002ce4:	00db      	lsls	r3, r3, #3
 8002ce6:	440b      	add	r3, r1
 8002ce8:	3314      	adds	r3, #20
 8002cea:	79ba      	ldrb	r2, [r7, #6]
 8002cec:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8002cee:	79ba      	ldrb	r2, [r7, #6]
 8002cf0:	4907      	ldr	r1, [pc, #28]	; (8002d10 <LinkTimerAfter+0x88>)
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	4413      	add	r3, r2
 8002cf8:	00db      	lsls	r3, r3, #3
 8002cfa:	440b      	add	r3, r1
 8002cfc:	3315      	adds	r3, #21
 8002cfe:	79fa      	ldrb	r2, [r7, #7]
 8002d00:	701a      	strb	r2, [r3, #0]

  return;
 8002d02:	bf00      	nop
}
 8002d04:	3714      	adds	r7, #20
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	20000160 	.word	0x20000160

08002d14 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	460a      	mov	r2, r1
 8002d1e:	71fb      	strb	r3, [r7, #7]
 8002d20:	4613      	mov	r3, r2
 8002d22:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8002d24:	4b29      	ldr	r3, [pc, #164]	; (8002dcc <LinkTimerBefore+0xb8>)
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	79ba      	ldrb	r2, [r7, #6]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d032      	beq.n	8002d96 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8002d30:	79ba      	ldrb	r2, [r7, #6]
 8002d32:	4927      	ldr	r1, [pc, #156]	; (8002dd0 <LinkTimerBefore+0xbc>)
 8002d34:	4613      	mov	r3, r2
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	4413      	add	r3, r2
 8002d3a:	00db      	lsls	r3, r3, #3
 8002d3c:	440b      	add	r3, r1
 8002d3e:	3314      	adds	r3, #20
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8002d44:	7bfa      	ldrb	r2, [r7, #15]
 8002d46:	4922      	ldr	r1, [pc, #136]	; (8002dd0 <LinkTimerBefore+0xbc>)
 8002d48:	4613      	mov	r3, r2
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	4413      	add	r3, r2
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	440b      	add	r3, r1
 8002d52:	3315      	adds	r3, #21
 8002d54:	79fa      	ldrb	r2, [r7, #7]
 8002d56:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8002d58:	79fa      	ldrb	r2, [r7, #7]
 8002d5a:	491d      	ldr	r1, [pc, #116]	; (8002dd0 <LinkTimerBefore+0xbc>)
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	005b      	lsls	r3, r3, #1
 8002d60:	4413      	add	r3, r2
 8002d62:	00db      	lsls	r3, r3, #3
 8002d64:	440b      	add	r3, r1
 8002d66:	3315      	adds	r3, #21
 8002d68:	79ba      	ldrb	r2, [r7, #6]
 8002d6a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8002d6c:	79fa      	ldrb	r2, [r7, #7]
 8002d6e:	4918      	ldr	r1, [pc, #96]	; (8002dd0 <LinkTimerBefore+0xbc>)
 8002d70:	4613      	mov	r3, r2
 8002d72:	005b      	lsls	r3, r3, #1
 8002d74:	4413      	add	r3, r2
 8002d76:	00db      	lsls	r3, r3, #3
 8002d78:	440b      	add	r3, r1
 8002d7a:	3314      	adds	r3, #20
 8002d7c:	7bfa      	ldrb	r2, [r7, #15]
 8002d7e:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002d80:	79ba      	ldrb	r2, [r7, #6]
 8002d82:	4913      	ldr	r1, [pc, #76]	; (8002dd0 <LinkTimerBefore+0xbc>)
 8002d84:	4613      	mov	r3, r2
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	4413      	add	r3, r2
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	440b      	add	r3, r1
 8002d8e:	3314      	adds	r3, #20
 8002d90:	79fa      	ldrb	r2, [r7, #7]
 8002d92:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8002d94:	e014      	b.n	8002dc0 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8002d96:	79fa      	ldrb	r2, [r7, #7]
 8002d98:	490d      	ldr	r1, [pc, #52]	; (8002dd0 <LinkTimerBefore+0xbc>)
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	4413      	add	r3, r2
 8002da0:	00db      	lsls	r3, r3, #3
 8002da2:	440b      	add	r3, r1
 8002da4:	3315      	adds	r3, #21
 8002da6:	79ba      	ldrb	r2, [r7, #6]
 8002da8:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002daa:	79ba      	ldrb	r2, [r7, #6]
 8002dac:	4908      	ldr	r1, [pc, #32]	; (8002dd0 <LinkTimerBefore+0xbc>)
 8002dae:	4613      	mov	r3, r2
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	4413      	add	r3, r2
 8002db4:	00db      	lsls	r3, r3, #3
 8002db6:	440b      	add	r3, r1
 8002db8:	3314      	adds	r3, #20
 8002dba:	79fa      	ldrb	r2, [r7, #7]
 8002dbc:	701a      	strb	r2, [r3, #0]
  return;
 8002dbe:	bf00      	nop
}
 8002dc0:	3714      	adds	r7, #20
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	200001f0 	.word	0x200001f0
 8002dd0:	20000160 	.word	0x20000160

08002dd4 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	4603      	mov	r3, r0
 8002ddc:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002dde:	4b4e      	ldr	r3, [pc, #312]	; (8002f18 <linkTimer+0x144>)
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	2b06      	cmp	r3, #6
 8002de6:	d118      	bne.n	8002e1a <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002de8:	4b4b      	ldr	r3, [pc, #300]	; (8002f18 <linkTimer+0x144>)
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	b2da      	uxtb	r2, r3
 8002dee:	4b4b      	ldr	r3, [pc, #300]	; (8002f1c <linkTimer+0x148>)
 8002df0:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8002df2:	4a49      	ldr	r2, [pc, #292]	; (8002f18 <linkTimer+0x144>)
 8002df4:	79fb      	ldrb	r3, [r7, #7]
 8002df6:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8002df8:	79fa      	ldrb	r2, [r7, #7]
 8002dfa:	4949      	ldr	r1, [pc, #292]	; (8002f20 <linkTimer+0x14c>)
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	4413      	add	r3, r2
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	440b      	add	r3, r1
 8002e06:	3315      	adds	r3, #21
 8002e08:	2206      	movs	r2, #6
 8002e0a:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002e0c:	4b45      	ldr	r3, [pc, #276]	; (8002f24 <linkTimer+0x150>)
 8002e0e:	f04f 32ff 	mov.w	r2, #4294967295
 8002e12:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8002e14:	2300      	movs	r3, #0
 8002e16:	81fb      	strh	r3, [r7, #14]
 8002e18:	e078      	b.n	8002f0c <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8002e1a:	f000 f909 	bl	8003030 <ReturnTimeElapsed>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8002e22:	79fa      	ldrb	r2, [r7, #7]
 8002e24:	493e      	ldr	r1, [pc, #248]	; (8002f20 <linkTimer+0x14c>)
 8002e26:	4613      	mov	r3, r2
 8002e28:	005b      	lsls	r3, r3, #1
 8002e2a:	4413      	add	r3, r2
 8002e2c:	00db      	lsls	r3, r3, #3
 8002e2e:	440b      	add	r3, r1
 8002e30:	3308      	adds	r3, #8
 8002e32:	6819      	ldr	r1, [r3, #0]
 8002e34:	89fb      	ldrh	r3, [r7, #14]
 8002e36:	79fa      	ldrb	r2, [r7, #7]
 8002e38:	4419      	add	r1, r3
 8002e3a:	4839      	ldr	r0, [pc, #228]	; (8002f20 <linkTimer+0x14c>)
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	005b      	lsls	r3, r3, #1
 8002e40:	4413      	add	r3, r2
 8002e42:	00db      	lsls	r3, r3, #3
 8002e44:	4403      	add	r3, r0
 8002e46:	3308      	adds	r3, #8
 8002e48:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8002e4a:	79fa      	ldrb	r2, [r7, #7]
 8002e4c:	4934      	ldr	r1, [pc, #208]	; (8002f20 <linkTimer+0x14c>)
 8002e4e:	4613      	mov	r3, r2
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	4413      	add	r3, r2
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	440b      	add	r3, r1
 8002e58:	3308      	adds	r3, #8
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8002e5e:	4b2e      	ldr	r3, [pc, #184]	; (8002f18 <linkTimer+0x144>)
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	4619      	mov	r1, r3
 8002e66:	4a2e      	ldr	r2, [pc, #184]	; (8002f20 <linkTimer+0x14c>)
 8002e68:	460b      	mov	r3, r1
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	440b      	add	r3, r1
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	4413      	add	r3, r2
 8002e72:	3308      	adds	r3, #8
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68ba      	ldr	r2, [r7, #8]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d337      	bcc.n	8002eec <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8002e7c:	4b26      	ldr	r3, [pc, #152]	; (8002f18 <linkTimer+0x144>)
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8002e82:	7b7a      	ldrb	r2, [r7, #13]
 8002e84:	4926      	ldr	r1, [pc, #152]	; (8002f20 <linkTimer+0x14c>)
 8002e86:	4613      	mov	r3, r2
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	4413      	add	r3, r2
 8002e8c:	00db      	lsls	r3, r3, #3
 8002e8e:	440b      	add	r3, r1
 8002e90:	3315      	adds	r3, #21
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8002e96:	e013      	b.n	8002ec0 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8002e98:	7b7a      	ldrb	r2, [r7, #13]
 8002e9a:	4921      	ldr	r1, [pc, #132]	; (8002f20 <linkTimer+0x14c>)
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	4413      	add	r3, r2
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	440b      	add	r3, r1
 8002ea6:	3315      	adds	r3, #21
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8002eac:	7b7a      	ldrb	r2, [r7, #13]
 8002eae:	491c      	ldr	r1, [pc, #112]	; (8002f20 <linkTimer+0x14c>)
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	4413      	add	r3, r2
 8002eb6:	00db      	lsls	r3, r3, #3
 8002eb8:	440b      	add	r3, r1
 8002eba:	3315      	adds	r3, #21
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8002ec0:	7b3b      	ldrb	r3, [r7, #12]
 8002ec2:	2b06      	cmp	r3, #6
 8002ec4:	d00b      	beq.n	8002ede <linkTimer+0x10a>
 8002ec6:	7b3a      	ldrb	r2, [r7, #12]
 8002ec8:	4915      	ldr	r1, [pc, #84]	; (8002f20 <linkTimer+0x14c>)
 8002eca:	4613      	mov	r3, r2
 8002ecc:	005b      	lsls	r3, r3, #1
 8002ece:	4413      	add	r3, r2
 8002ed0:	00db      	lsls	r3, r3, #3
 8002ed2:	440b      	add	r3, r1
 8002ed4:	3308      	adds	r3, #8
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68ba      	ldr	r2, [r7, #8]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d2dc      	bcs.n	8002e98 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8002ede:	7b7a      	ldrb	r2, [r7, #13]
 8002ee0:	79fb      	ldrb	r3, [r7, #7]
 8002ee2:	4611      	mov	r1, r2
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7ff fecf 	bl	8002c88 <LinkTimerAfter>
 8002eea:	e00f      	b.n	8002f0c <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8002eec:	4b0a      	ldr	r3, [pc, #40]	; (8002f18 <linkTimer+0x144>)
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	b2da      	uxtb	r2, r3
 8002ef2:	79fb      	ldrb	r3, [r7, #7]
 8002ef4:	4611      	mov	r1, r2
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7ff ff0c 	bl	8002d14 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8002efc:	4b06      	ldr	r3, [pc, #24]	; (8002f18 <linkTimer+0x144>)
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	b2da      	uxtb	r2, r3
 8002f02:	4b06      	ldr	r3, [pc, #24]	; (8002f1c <linkTimer+0x148>)
 8002f04:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8002f06:	4a04      	ldr	r2, [pc, #16]	; (8002f18 <linkTimer+0x144>)
 8002f08:	79fb      	ldrb	r3, [r7, #7]
 8002f0a:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8002f0c:	89fb      	ldrh	r3, [r7, #14]
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3710      	adds	r7, #16
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	200001f0 	.word	0x200001f0
 8002f1c:	200001f1 	.word	0x200001f1
 8002f20:	20000160 	.word	0x20000160
 8002f24:	200001f4 	.word	0x200001f4

08002f28 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	4603      	mov	r3, r0
 8002f30:	460a      	mov	r2, r1
 8002f32:	71fb      	strb	r3, [r7, #7]
 8002f34:	4613      	mov	r3, r2
 8002f36:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8002f38:	4b39      	ldr	r3, [pc, #228]	; (8003020 <UnlinkTimer+0xf8>)
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	79fa      	ldrb	r2, [r7, #7]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d111      	bne.n	8002f68 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002f44:	4b36      	ldr	r3, [pc, #216]	; (8003020 <UnlinkTimer+0xf8>)
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	b2da      	uxtb	r2, r3
 8002f4a:	4b36      	ldr	r3, [pc, #216]	; (8003024 <UnlinkTimer+0xfc>)
 8002f4c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8002f4e:	79fa      	ldrb	r2, [r7, #7]
 8002f50:	4935      	ldr	r1, [pc, #212]	; (8003028 <UnlinkTimer+0x100>)
 8002f52:	4613      	mov	r3, r2
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	4413      	add	r3, r2
 8002f58:	00db      	lsls	r3, r3, #3
 8002f5a:	440b      	add	r3, r1
 8002f5c:	3315      	adds	r3, #21
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	b2da      	uxtb	r2, r3
 8002f62:	4b2f      	ldr	r3, [pc, #188]	; (8003020 <UnlinkTimer+0xf8>)
 8002f64:	701a      	strb	r2, [r3, #0]
 8002f66:	e03e      	b.n	8002fe6 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8002f68:	79fa      	ldrb	r2, [r7, #7]
 8002f6a:	492f      	ldr	r1, [pc, #188]	; (8003028 <UnlinkTimer+0x100>)
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	4413      	add	r3, r2
 8002f72:	00db      	lsls	r3, r3, #3
 8002f74:	440b      	add	r3, r1
 8002f76:	3314      	adds	r3, #20
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8002f7c:	79fa      	ldrb	r2, [r7, #7]
 8002f7e:	492a      	ldr	r1, [pc, #168]	; (8003028 <UnlinkTimer+0x100>)
 8002f80:	4613      	mov	r3, r2
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	4413      	add	r3, r2
 8002f86:	00db      	lsls	r3, r3, #3
 8002f88:	440b      	add	r3, r1
 8002f8a:	3315      	adds	r3, #21
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8002f90:	79f9      	ldrb	r1, [r7, #7]
 8002f92:	7bfa      	ldrb	r2, [r7, #15]
 8002f94:	4824      	ldr	r0, [pc, #144]	; (8003028 <UnlinkTimer+0x100>)
 8002f96:	460b      	mov	r3, r1
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	440b      	add	r3, r1
 8002f9c:	00db      	lsls	r3, r3, #3
 8002f9e:	4403      	add	r3, r0
 8002fa0:	3315      	adds	r3, #21
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	b2d8      	uxtb	r0, r3
 8002fa6:	4920      	ldr	r1, [pc, #128]	; (8003028 <UnlinkTimer+0x100>)
 8002fa8:	4613      	mov	r3, r2
 8002faa:	005b      	lsls	r3, r3, #1
 8002fac:	4413      	add	r3, r2
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	440b      	add	r3, r1
 8002fb2:	3315      	adds	r3, #21
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002fb8:	7bbb      	ldrb	r3, [r7, #14]
 8002fba:	2b06      	cmp	r3, #6
 8002fbc:	d013      	beq.n	8002fe6 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8002fbe:	79f9      	ldrb	r1, [r7, #7]
 8002fc0:	7bba      	ldrb	r2, [r7, #14]
 8002fc2:	4819      	ldr	r0, [pc, #100]	; (8003028 <UnlinkTimer+0x100>)
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	005b      	lsls	r3, r3, #1
 8002fc8:	440b      	add	r3, r1
 8002fca:	00db      	lsls	r3, r3, #3
 8002fcc:	4403      	add	r3, r0
 8002fce:	3314      	adds	r3, #20
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	b2d8      	uxtb	r0, r3
 8002fd4:	4914      	ldr	r1, [pc, #80]	; (8003028 <UnlinkTimer+0x100>)
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	4413      	add	r3, r2
 8002fdc:	00db      	lsls	r3, r3, #3
 8002fde:	440b      	add	r3, r1
 8002fe0:	3314      	adds	r3, #20
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8002fe6:	79fa      	ldrb	r2, [r7, #7]
 8002fe8:	490f      	ldr	r1, [pc, #60]	; (8003028 <UnlinkTimer+0x100>)
 8002fea:	4613      	mov	r3, r2
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	4413      	add	r3, r2
 8002ff0:	00db      	lsls	r3, r3, #3
 8002ff2:	440b      	add	r3, r1
 8002ff4:	330c      	adds	r3, #12
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8002ffa:	4b09      	ldr	r3, [pc, #36]	; (8003020 <UnlinkTimer+0xf8>)
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2b06      	cmp	r3, #6
 8003002:	d107      	bne.n	8003014 <UnlinkTimer+0xec>
 8003004:	79bb      	ldrb	r3, [r7, #6]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d104      	bne.n	8003014 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800300a:	4b08      	ldr	r3, [pc, #32]	; (800302c <UnlinkTimer+0x104>)
 800300c:	f04f 32ff 	mov.w	r2, #4294967295
 8003010:	601a      	str	r2, [r3, #0]
  }

  return;
 8003012:	bf00      	nop
 8003014:	bf00      	nop
}
 8003016:	3714      	adds	r7, #20
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr
 8003020:	200001f0 	.word	0x200001f0
 8003024:	200001f1 	.word	0x200001f1
 8003028:	20000160 	.word	0x20000160
 800302c:	200001f4 	.word	0x200001f4

08003030 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8003036:	4b1a      	ldr	r3, [pc, #104]	; (80030a0 <ReturnTimeElapsed+0x70>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800303e:	d026      	beq.n	800308e <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8003040:	f7ff fe02 	bl	8002c48 <ReadRtcSsrValue>
 8003044:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8003046:	4b16      	ldr	r3, [pc, #88]	; (80030a0 <ReturnTimeElapsed+0x70>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	429a      	cmp	r2, r3
 800304e:	d805      	bhi.n	800305c <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8003050:	4b13      	ldr	r3, [pc, #76]	; (80030a0 <ReturnTimeElapsed+0x70>)
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	607b      	str	r3, [r7, #4]
 800305a:	e00a      	b.n	8003072 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 800305c:	4b11      	ldr	r3, [pc, #68]	; (80030a4 <ReturnTimeElapsed+0x74>)
 800305e:	881b      	ldrh	r3, [r3, #0]
 8003060:	461a      	mov	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8003068:	4b0d      	ldr	r3, [pc, #52]	; (80030a0 <ReturnTimeElapsed+0x70>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	683a      	ldr	r2, [r7, #0]
 800306e:	4413      	add	r3, r2
 8003070:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8003072:	4b0d      	ldr	r3, [pc, #52]	; (80030a8 <ReturnTimeElapsed+0x78>)
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	461a      	mov	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	fb02 f303 	mul.w	r3, r2, r3
 800307e:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8003080:	4b0a      	ldr	r3, [pc, #40]	; (80030ac <ReturnTimeElapsed+0x7c>)
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	461a      	mov	r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	40d3      	lsrs	r3, r2
 800308a:	607b      	str	r3, [r7, #4]
 800308c:	e001      	b.n	8003092 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 800308e:	2300      	movs	r3, #0
 8003090:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	b29b      	uxth	r3, r3
}
 8003096:	4618      	mov	r0, r3
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	200001f4 	.word	0x200001f4
 80030a4:	20000ac6 	.word	0x20000ac6
 80030a8:	20000ac5 	.word	0x20000ac5
 80030ac:	20000ac4 	.word	0x20000ac4

080030b0 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	4603      	mov	r3, r0
 80030b8:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 80030ba:	88fb      	ldrh	r3, [r7, #6]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d108      	bne.n	80030d2 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80030c0:	f7ff fdc2 	bl	8002c48 <ReadRtcSsrValue>
 80030c4:	4602      	mov	r2, r0
 80030c6:	4b24      	ldr	r3, [pc, #144]	; (8003158 <RestartWakeupCounter+0xa8>)
 80030c8:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80030ca:	2003      	movs	r0, #3
 80030cc:	f004 fe6d 	bl	8007daa <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 80030d0:	e03e      	b.n	8003150 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 80030d2:	88fb      	ldrh	r3, [r7, #6]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d803      	bhi.n	80030e0 <RestartWakeupCounter+0x30>
 80030d8:	4b20      	ldr	r3, [pc, #128]	; (800315c <RestartWakeupCounter+0xac>)
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d002      	beq.n	80030e6 <RestartWakeupCounter+0x36>
      Value -= 1;
 80030e0:	88fb      	ldrh	r3, [r7, #6]
 80030e2:	3b01      	subs	r3, #1
 80030e4:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80030e6:	bf00      	nop
 80030e8:	4b1d      	ldr	r3, [pc, #116]	; (8003160 <RestartWakeupCounter+0xb0>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	f003 0304 	and.w	r3, r3, #4
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d0f7      	beq.n	80030e8 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80030f8:	4b19      	ldr	r3, [pc, #100]	; (8003160 <RestartWakeupCounter+0xb0>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	b2da      	uxtb	r2, r3
 8003102:	4b17      	ldr	r3, [pc, #92]	; (8003160 <RestartWakeupCounter+0xb0>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800310c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800310e:	4b15      	ldr	r3, [pc, #84]	; (8003164 <RestartWakeupCounter+0xb4>)
 8003110:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003114:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8003116:	2003      	movs	r0, #3
 8003118:	f004 fe55 	bl	8007dc6 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 800311c:	4b12      	ldr	r3, [pc, #72]	; (8003168 <RestartWakeupCounter+0xb8>)
 800311e:	695b      	ldr	r3, [r3, #20]
 8003120:	0c1b      	lsrs	r3, r3, #16
 8003122:	041b      	lsls	r3, r3, #16
 8003124:	88fa      	ldrh	r2, [r7, #6]
 8003126:	4910      	ldr	r1, [pc, #64]	; (8003168 <RestartWakeupCounter+0xb8>)
 8003128:	4313      	orrs	r3, r2
 800312a:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 800312c:	f7ff fd8c 	bl	8002c48 <ReadRtcSsrValue>
 8003130:	4602      	mov	r2, r0
 8003132:	4b09      	ldr	r3, [pc, #36]	; (8003158 <RestartWakeupCounter+0xa8>)
 8003134:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8003136:	4b0a      	ldr	r3, [pc, #40]	; (8003160 <RestartWakeupCounter+0xb0>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	689a      	ldr	r2, [r3, #8]
 800313e:	4b08      	ldr	r3, [pc, #32]	; (8003160 <RestartWakeupCounter+0xb0>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003148:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 800314a:	f3af 8000 	nop.w
  return ;
 800314e:	bf00      	nop
}
 8003150:	3708      	adds	r7, #8
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	200001f4 	.word	0x200001f4
 800315c:	20000ac4 	.word	0x20000ac4
 8003160:	20000ac0 	.word	0x20000ac0
 8003164:	58000800 	.word	0x58000800
 8003168:	40002800 	.word	0x40002800

0800316c <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8003172:	4b47      	ldr	r3, [pc, #284]	; (8003290 <RescheduleTimerList+0x124>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800317a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800317e:	d108      	bne.n	8003192 <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8003180:	bf00      	nop
 8003182:	4b44      	ldr	r3, [pc, #272]	; (8003294 <RescheduleTimerList+0x128>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	f003 0304 	and.w	r3, r3, #4
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1f7      	bne.n	8003182 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8003192:	4b40      	ldr	r3, [pc, #256]	; (8003294 <RescheduleTimerList+0x128>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	689a      	ldr	r2, [r3, #8]
 800319a:	4b3e      	ldr	r3, [pc, #248]	; (8003294 <RescheduleTimerList+0x128>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031a4:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 80031a6:	4b3c      	ldr	r3, [pc, #240]	; (8003298 <RescheduleTimerList+0x12c>)
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 80031ac:	7bfa      	ldrb	r2, [r7, #15]
 80031ae:	493b      	ldr	r1, [pc, #236]	; (800329c <RescheduleTimerList+0x130>)
 80031b0:	4613      	mov	r3, r2
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	4413      	add	r3, r2
 80031b6:	00db      	lsls	r3, r3, #3
 80031b8:	440b      	add	r3, r1
 80031ba:	3308      	adds	r3, #8
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 80031c0:	f7ff ff36 	bl	8003030 <ReturnTimeElapsed>
 80031c4:	4603      	mov	r3, r0
 80031c6:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 80031c8:	88fb      	ldrh	r3, [r7, #6]
 80031ca:	68ba      	ldr	r2, [r7, #8]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d205      	bcs.n	80031dc <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 80031d0:	2300      	movs	r3, #0
 80031d2:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80031d4:	4b32      	ldr	r3, [pc, #200]	; (80032a0 <RescheduleTimerList+0x134>)
 80031d6:	2201      	movs	r2, #1
 80031d8:	701a      	strb	r2, [r3, #0]
 80031da:	e04d      	b.n	8003278 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 80031dc:	88fb      	ldrh	r3, [r7, #6]
 80031de:	4a31      	ldr	r2, [pc, #196]	; (80032a4 <RescheduleTimerList+0x138>)
 80031e0:	8812      	ldrh	r2, [r2, #0]
 80031e2:	b292      	uxth	r2, r2
 80031e4:	4413      	add	r3, r2
 80031e6:	461a      	mov	r2, r3
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d906      	bls.n	80031fc <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 80031ee:	4b2d      	ldr	r3, [pc, #180]	; (80032a4 <RescheduleTimerList+0x138>)
 80031f0:	881b      	ldrh	r3, [r3, #0]
 80031f2:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 80031f4:	4b2a      	ldr	r3, [pc, #168]	; (80032a0 <RescheduleTimerList+0x134>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	701a      	strb	r2, [r3, #0]
 80031fa:	e03d      	b.n	8003278 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	b29a      	uxth	r2, r3
 8003200:	88fb      	ldrh	r3, [r7, #6]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8003206:	4b26      	ldr	r3, [pc, #152]	; (80032a0 <RescheduleTimerList+0x134>)
 8003208:	2201      	movs	r2, #1
 800320a:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800320c:	e034      	b.n	8003278 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 800320e:	7bfa      	ldrb	r2, [r7, #15]
 8003210:	4922      	ldr	r1, [pc, #136]	; (800329c <RescheduleTimerList+0x130>)
 8003212:	4613      	mov	r3, r2
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	4413      	add	r3, r2
 8003218:	00db      	lsls	r3, r3, #3
 800321a:	440b      	add	r3, r1
 800321c:	3308      	adds	r3, #8
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	88fb      	ldrh	r3, [r7, #6]
 8003222:	429a      	cmp	r2, r3
 8003224:	d20a      	bcs.n	800323c <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8003226:	7bfa      	ldrb	r2, [r7, #15]
 8003228:	491c      	ldr	r1, [pc, #112]	; (800329c <RescheduleTimerList+0x130>)
 800322a:	4613      	mov	r3, r2
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	4413      	add	r3, r2
 8003230:	00db      	lsls	r3, r3, #3
 8003232:	440b      	add	r3, r1
 8003234:	3308      	adds	r3, #8
 8003236:	2200      	movs	r2, #0
 8003238:	601a      	str	r2, [r3, #0]
 800323a:	e013      	b.n	8003264 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 800323c:	7bfa      	ldrb	r2, [r7, #15]
 800323e:	4917      	ldr	r1, [pc, #92]	; (800329c <RescheduleTimerList+0x130>)
 8003240:	4613      	mov	r3, r2
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	4413      	add	r3, r2
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	440b      	add	r3, r1
 800324a:	3308      	adds	r3, #8
 800324c:	6819      	ldr	r1, [r3, #0]
 800324e:	88fb      	ldrh	r3, [r7, #6]
 8003250:	7bfa      	ldrb	r2, [r7, #15]
 8003252:	1ac9      	subs	r1, r1, r3
 8003254:	4811      	ldr	r0, [pc, #68]	; (800329c <RescheduleTimerList+0x130>)
 8003256:	4613      	mov	r3, r2
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	4413      	add	r3, r2
 800325c:	00db      	lsls	r3, r3, #3
 800325e:	4403      	add	r3, r0
 8003260:	3308      	adds	r3, #8
 8003262:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8003264:	7bfa      	ldrb	r2, [r7, #15]
 8003266:	490d      	ldr	r1, [pc, #52]	; (800329c <RescheduleTimerList+0x130>)
 8003268:	4613      	mov	r3, r2
 800326a:	005b      	lsls	r3, r3, #1
 800326c:	4413      	add	r3, r2
 800326e:	00db      	lsls	r3, r3, #3
 8003270:	440b      	add	r3, r1
 8003272:	3315      	adds	r3, #21
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003278:	7bfb      	ldrb	r3, [r7, #15]
 800327a:	2b06      	cmp	r3, #6
 800327c:	d1c7      	bne.n	800320e <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 800327e:	89bb      	ldrh	r3, [r7, #12]
 8003280:	4618      	mov	r0, r3
 8003282:	f7ff ff15 	bl	80030b0 <RestartWakeupCounter>

  return ;
 8003286:	bf00      	nop
}
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	40002800 	.word	0x40002800
 8003294:	20000ac0 	.word	0x20000ac0
 8003298:	200001f0 	.word	0x200001f0
 800329c:	20000160 	.word	0x20000160
 80032a0:	200001f8 	.word	0x200001f8
 80032a4:	20000ac8 	.word	0x20000ac8

080032a8 <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b086      	sub	sp, #24
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	4603      	mov	r3, r0
 80032b0:	6039      	str	r1, [r7, #0]
 80032b2:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 80032b4:	4a61      	ldr	r2, [pc, #388]	; (800343c <HW_TS_Init+0x194>)
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80032ba:	4b60      	ldr	r3, [pc, #384]	; (800343c <HW_TS_Init+0x194>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	22ca      	movs	r2, #202	; 0xca
 80032c2:	625a      	str	r2, [r3, #36]	; 0x24
 80032c4:	4b5d      	ldr	r3, [pc, #372]	; (800343c <HW_TS_Init+0x194>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2253      	movs	r2, #83	; 0x53
 80032cc:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80032ce:	4b5c      	ldr	r3, [pc, #368]	; (8003440 <HW_TS_Init+0x198>)
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	4a5b      	ldr	r2, [pc, #364]	; (8003440 <HW_TS_Init+0x198>)
 80032d4:	f043 0320 	orr.w	r3, r3, #32
 80032d8:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80032da:	4b59      	ldr	r3, [pc, #356]	; (8003440 <HW_TS_Init+0x198>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	f003 0307 	and.w	r3, r3, #7
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	f1c3 0304 	rsb	r3, r3, #4
 80032ea:	b2da      	uxtb	r2, r3
 80032ec:	4b55      	ldr	r3, [pc, #340]	; (8003444 <HW_TS_Init+0x19c>)
 80032ee:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80032f0:	4b53      	ldr	r3, [pc, #332]	; (8003440 <HW_TS_Init+0x198>)
 80032f2:	691b      	ldr	r3, [r3, #16]
 80032f4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80032f8:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 80032fc:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	fa92 f2a2 	rbit	r2, r2
 8003304:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003306:	68ba      	ldr	r2, [r7, #8]
 8003308:	fab2 f282 	clz	r2, r2
 800330c:	b2d2      	uxtb	r2, r2
 800330e:	40d3      	lsrs	r3, r2
 8003310:	b2db      	uxtb	r3, r3
 8003312:	3301      	adds	r3, #1
 8003314:	b2da      	uxtb	r2, r3
 8003316:	4b4c      	ldr	r3, [pc, #304]	; (8003448 <HW_TS_Init+0x1a0>)
 8003318:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 800331a:	4b49      	ldr	r3, [pc, #292]	; (8003440 <HW_TS_Init+0x198>)
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	b29b      	uxth	r3, r3
 8003320:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003324:	b29b      	uxth	r3, r3
 8003326:	3301      	adds	r3, #1
 8003328:	b29a      	uxth	r2, r3
 800332a:	4b48      	ldr	r3, [pc, #288]	; (800344c <HW_TS_Init+0x1a4>)
 800332c:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 800332e:	4b47      	ldr	r3, [pc, #284]	; (800344c <HW_TS_Init+0x1a4>)
 8003330:	881b      	ldrh	r3, [r3, #0]
 8003332:	3b01      	subs	r3, #1
 8003334:	4a44      	ldr	r2, [pc, #272]	; (8003448 <HW_TS_Init+0x1a0>)
 8003336:	7812      	ldrb	r2, [r2, #0]
 8003338:	fb02 f303 	mul.w	r3, r2, r3
 800333c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003340:	4a40      	ldr	r2, [pc, #256]	; (8003444 <HW_TS_Init+0x19c>)
 8003342:	7812      	ldrb	r2, [r2, #0]
 8003344:	40d3      	lsrs	r3, r2
 8003346:	613b      	str	r3, [r7, #16]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800334e:	4293      	cmp	r3, r2
 8003350:	d904      	bls.n	800335c <HW_TS_Init+0xb4>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8003352:	4b3f      	ldr	r3, [pc, #252]	; (8003450 <HW_TS_Init+0x1a8>)
 8003354:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003358:	801a      	strh	r2, [r3, #0]
 800335a:	e003      	b.n	8003364 <HW_TS_Init+0xbc>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	b29a      	uxth	r2, r3
 8003360:	4b3b      	ldr	r3, [pc, #236]	; (8003450 <HW_TS_Init+0x1a8>)
 8003362:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8003364:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003368:	f7ff fc5c 	bl	8002c24 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800336c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003370:	f7ff fc44 	bl	8002bfc <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8003374:	79fb      	ldrb	r3, [r7, #7]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d143      	bne.n	8003402 <HW_TS_Init+0x15a>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800337a:	4b36      	ldr	r3, [pc, #216]	; (8003454 <HW_TS_Init+0x1ac>)
 800337c:	2201      	movs	r2, #1
 800337e:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8003380:	4b35      	ldr	r3, [pc, #212]	; (8003458 <HW_TS_Init+0x1b0>)
 8003382:	f04f 32ff 	mov.w	r2, #4294967295
 8003386:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8003388:	2300      	movs	r3, #0
 800338a:	75fb      	strb	r3, [r7, #23]
 800338c:	e00c      	b.n	80033a8 <HW_TS_Init+0x100>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800338e:	7dfa      	ldrb	r2, [r7, #23]
 8003390:	4932      	ldr	r1, [pc, #200]	; (800345c <HW_TS_Init+0x1b4>)
 8003392:	4613      	mov	r3, r2
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	4413      	add	r3, r2
 8003398:	00db      	lsls	r3, r3, #3
 800339a:	440b      	add	r3, r1
 800339c:	330c      	adds	r3, #12
 800339e:	2200      	movs	r2, #0
 80033a0:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80033a2:	7dfb      	ldrb	r3, [r7, #23]
 80033a4:	3301      	adds	r3, #1
 80033a6:	75fb      	strb	r3, [r7, #23]
 80033a8:	7dfb      	ldrb	r3, [r7, #23]
 80033aa:	2b05      	cmp	r3, #5
 80033ac:	d9ef      	bls.n	800338e <HW_TS_Init+0xe6>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 80033ae:	4b2c      	ldr	r3, [pc, #176]	; (8003460 <HW_TS_Init+0x1b8>)
 80033b0:	2206      	movs	r2, #6
 80033b2:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 80033b4:	4b21      	ldr	r3, [pc, #132]	; (800343c <HW_TS_Init+0x194>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	689a      	ldr	r2, [r3, #8]
 80033bc:	4b1f      	ldr	r3, [pc, #124]	; (800343c <HW_TS_Init+0x194>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033c6:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80033c8:	4b1c      	ldr	r3, [pc, #112]	; (800343c <HW_TS_Init+0x194>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	b2da      	uxtb	r2, r3
 80033d2:	4b1a      	ldr	r3, [pc, #104]	; (800343c <HW_TS_Init+0x194>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80033dc:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80033de:	4b21      	ldr	r3, [pc, #132]	; (8003464 <HW_TS_Init+0x1bc>)
 80033e0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80033e4:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80033e6:	2003      	movs	r0, #3
 80033e8:	f004 fced 	bl	8007dc6 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80033ec:	4b13      	ldr	r3, [pc, #76]	; (800343c <HW_TS_Init+0x194>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	689a      	ldr	r2, [r3, #8]
 80033f4:	4b11      	ldr	r3, [pc, #68]	; (800343c <HW_TS_Init+0x194>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033fe:	609a      	str	r2, [r3, #8]
 8003400:	e00a      	b.n	8003418 <HW_TS_Init+0x170>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8003402:	4b0e      	ldr	r3, [pc, #56]	; (800343c <HW_TS_Init+0x194>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800340e:	2b00      	cmp	r3, #0
 8003410:	d002      	beq.n	8003418 <HW_TS_Init+0x170>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8003412:	2003      	movs	r0, #3
 8003414:	f004 fcc9 	bl	8007daa <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8003418:	4b08      	ldr	r3, [pc, #32]	; (800343c <HW_TS_Init+0x194>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	22ff      	movs	r2, #255	; 0xff
 8003420:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8003422:	2200      	movs	r2, #0
 8003424:	2106      	movs	r1, #6
 8003426:	2003      	movs	r0, #3
 8003428:	f004 fc85 	bl	8007d36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800342c:	2003      	movs	r0, #3
 800342e:	f004 fc9c 	bl	8007d6a <HAL_NVIC_EnableIRQ>

  return;
 8003432:	bf00      	nop
}
 8003434:	3718      	adds	r7, #24
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	20000ac0 	.word	0x20000ac0
 8003440:	40002800 	.word	0x40002800
 8003444:	20000ac4 	.word	0x20000ac4
 8003448:	20000ac5 	.word	0x20000ac5
 800344c:	20000ac6 	.word	0x20000ac6
 8003450:	20000ac8 	.word	0x20000ac8
 8003454:	200001f8 	.word	0x200001f8
 8003458:	200001f4 	.word	0x200001f4
 800345c:	20000160 	.word	0x20000160
 8003460:	200001f0 	.word	0x200001f0
 8003464:	58000800 	.word	0x58000800

08003468 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8003468:	b480      	push	{r7}
 800346a:	b08b      	sub	sp, #44	; 0x2c
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	603b      	str	r3, [r7, #0]
 8003474:	4613      	mov	r3, r2
 8003476:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8003478:	2300      	movs	r3, #0
 800347a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800347e:	f3ef 8310 	mrs	r3, PRIMASK
 8003482:	61fb      	str	r3, [r7, #28]
  return(result);
 8003484:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003486:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8003488:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 800348a:	e004      	b.n	8003496 <HW_TS_Create+0x2e>
  {
    loop++;
 800348c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003490:	3301      	adds	r3, #1
 8003492:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8003496:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800349a:	2b05      	cmp	r3, #5
 800349c:	d80c      	bhi.n	80034b8 <HW_TS_Create+0x50>
 800349e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80034a2:	492b      	ldr	r1, [pc, #172]	; (8003550 <HW_TS_Create+0xe8>)
 80034a4:	4613      	mov	r3, r2
 80034a6:	005b      	lsls	r3, r3, #1
 80034a8:	4413      	add	r3, r2
 80034aa:	00db      	lsls	r3, r3, #3
 80034ac:	440b      	add	r3, r1
 80034ae:	330c      	adds	r3, #12
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d1e9      	bne.n	800348c <HW_TS_Create+0x24>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80034b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80034bc:	2b06      	cmp	r3, #6
 80034be:	d037      	beq.n	8003530 <HW_TS_Create+0xc8>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 80034c0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80034c4:	4922      	ldr	r1, [pc, #136]	; (8003550 <HW_TS_Create+0xe8>)
 80034c6:	4613      	mov	r3, r2
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	4413      	add	r3, r2
 80034cc:	00db      	lsls	r3, r3, #3
 80034ce:	440b      	add	r3, r1
 80034d0:	330c      	adds	r3, #12
 80034d2:	2201      	movs	r2, #1
 80034d4:	701a      	strb	r2, [r3, #0]
 80034d6:	6a3b      	ldr	r3, [r7, #32]
 80034d8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 80034e0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80034e4:	491a      	ldr	r1, [pc, #104]	; (8003550 <HW_TS_Create+0xe8>)
 80034e6:	4613      	mov	r3, r2
 80034e8:	005b      	lsls	r3, r3, #1
 80034ea:	4413      	add	r3, r2
 80034ec:	00db      	lsls	r3, r3, #3
 80034ee:	440b      	add	r3, r1
 80034f0:	3310      	adds	r3, #16
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 80034f6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80034fa:	4915      	ldr	r1, [pc, #84]	; (8003550 <HW_TS_Create+0xe8>)
 80034fc:	4613      	mov	r3, r2
 80034fe:	005b      	lsls	r3, r3, #1
 8003500:	4413      	add	r3, r2
 8003502:	00db      	lsls	r3, r3, #3
 8003504:	440b      	add	r3, r1
 8003506:	330d      	adds	r3, #13
 8003508:	79fa      	ldrb	r2, [r7, #7]
 800350a:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 800350c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003510:	490f      	ldr	r1, [pc, #60]	; (8003550 <HW_TS_Create+0xe8>)
 8003512:	4613      	mov	r3, r2
 8003514:	005b      	lsls	r3, r3, #1
 8003516:	4413      	add	r3, r2
 8003518:	00db      	lsls	r3, r3, #3
 800351a:	440b      	add	r3, r1
 800351c:	683a      	ldr	r2, [r7, #0]
 800351e:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003526:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8003528:	2300      	movs	r3, #0
 800352a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800352e:	e007      	b.n	8003540 <HW_TS_Create+0xd8>
 8003530:	6a3b      	ldr	r3, [r7, #32]
 8003532:	617b      	str	r3, [r7, #20]
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	f383 8810 	msr	PRIMASK, r3
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 800353a:	2301      	movs	r3, #1
 800353c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8003540:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003544:	4618      	mov	r0, r3
 8003546:	372c      	adds	r7, #44	; 0x2c
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr
 8003550:	20000160 	.word	0x20000160

08003554 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af00      	add	r7, sp, #0
 800355a:	4603      	mov	r3, r0
 800355c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800355e:	f3ef 8310 	mrs	r3, PRIMASK
 8003562:	60fb      	str	r3, [r7, #12]
  return(result);
 8003564:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003566:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003568:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800356a:	2003      	movs	r0, #3
 800356c:	f004 fc0b 	bl	8007d86 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8003570:	4b37      	ldr	r3, [pc, #220]	; (8003650 <HW_TS_Stop+0xfc>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	22ca      	movs	r2, #202	; 0xca
 8003578:	625a      	str	r2, [r3, #36]	; 0x24
 800357a:	4b35      	ldr	r3, [pc, #212]	; (8003650 <HW_TS_Stop+0xfc>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2253      	movs	r2, #83	; 0x53
 8003582:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8003584:	79fa      	ldrb	r2, [r7, #7]
 8003586:	4933      	ldr	r1, [pc, #204]	; (8003654 <HW_TS_Stop+0x100>)
 8003588:	4613      	mov	r3, r2
 800358a:	005b      	lsls	r3, r3, #1
 800358c:	4413      	add	r3, r2
 800358e:	00db      	lsls	r3, r3, #3
 8003590:	440b      	add	r3, r1
 8003592:	330c      	adds	r3, #12
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	b2db      	uxtb	r3, r3
 8003598:	2b02      	cmp	r3, #2
 800359a:	d148      	bne.n	800362e <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800359c:	79fb      	ldrb	r3, [r7, #7]
 800359e:	2100      	movs	r1, #0
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7ff fcc1 	bl	8002f28 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80035a6:	4b2c      	ldr	r3, [pc, #176]	; (8003658 <HW_TS_Stop+0x104>)
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80035ac:	7cfb      	ldrb	r3, [r7, #19]
 80035ae:	2b06      	cmp	r3, #6
 80035b0:	d135      	bne.n	800361e <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80035b2:	4b2a      	ldr	r3, [pc, #168]	; (800365c <HW_TS_Stop+0x108>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035be:	d108      	bne.n	80035d2 <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 80035c0:	bf00      	nop
 80035c2:	4b23      	ldr	r3, [pc, #140]	; (8003650 <HW_TS_Stop+0xfc>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	f003 0304 	and.w	r3, r3, #4
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1f7      	bne.n	80035c2 <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 80035d2:	4b1f      	ldr	r3, [pc, #124]	; (8003650 <HW_TS_Stop+0xfc>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	689a      	ldr	r2, [r3, #8]
 80035da:	4b1d      	ldr	r3, [pc, #116]	; (8003650 <HW_TS_Stop+0xfc>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035e4:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80035e6:	bf00      	nop
 80035e8:	4b19      	ldr	r3, [pc, #100]	; (8003650 <HW_TS_Stop+0xfc>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	f003 0304 	and.w	r3, r3, #4
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d0f7      	beq.n	80035e8 <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80035f8:	4b15      	ldr	r3, [pc, #84]	; (8003650 <HW_TS_Stop+0xfc>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	b2da      	uxtb	r2, r3
 8003602:	4b13      	ldr	r3, [pc, #76]	; (8003650 <HW_TS_Stop+0xfc>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800360c:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800360e:	4b14      	ldr	r3, [pc, #80]	; (8003660 <HW_TS_Stop+0x10c>)
 8003610:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003614:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8003616:	2003      	movs	r0, #3
 8003618:	f004 fbd5 	bl	8007dc6 <HAL_NVIC_ClearPendingIRQ>
 800361c:	e007      	b.n	800362e <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800361e:	4b11      	ldr	r3, [pc, #68]	; (8003664 <HW_TS_Stop+0x110>)
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	b2db      	uxtb	r3, r3
 8003624:	7cfa      	ldrb	r2, [r7, #19]
 8003626:	429a      	cmp	r2, r3
 8003628:	d001      	beq.n	800362e <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 800362a:	f7ff fd9f 	bl	800316c <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800362e:	4b08      	ldr	r3, [pc, #32]	; (8003650 <HW_TS_Stop+0xfc>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	22ff      	movs	r2, #255	; 0xff
 8003636:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8003638:	2003      	movs	r0, #3
 800363a:	f004 fb96 	bl	8007d6a <HAL_NVIC_EnableIRQ>
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8003648:	bf00      	nop
}
 800364a:	3718      	adds	r7, #24
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	20000ac0 	.word	0x20000ac0
 8003654:	20000160 	.word	0x20000160
 8003658:	200001f0 	.word	0x200001f0
 800365c:	40002800 	.word	0x40002800
 8003660:	58000800 	.word	0x58000800
 8003664:	200001f1 	.word	0x200001f1

08003668 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b086      	sub	sp, #24
 800366c:	af00      	add	r7, sp, #0
 800366e:	4603      	mov	r3, r0
 8003670:	6039      	str	r1, [r7, #0]
 8003672:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8003674:	79fa      	ldrb	r2, [r7, #7]
 8003676:	493b      	ldr	r1, [pc, #236]	; (8003764 <HW_TS_Start+0xfc>)
 8003678:	4613      	mov	r3, r2
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	4413      	add	r3, r2
 800367e:	00db      	lsls	r3, r3, #3
 8003680:	440b      	add	r3, r1
 8003682:	330c      	adds	r3, #12
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	b2db      	uxtb	r3, r3
 8003688:	2b02      	cmp	r3, #2
 800368a:	d103      	bne.n	8003694 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 800368c:	79fb      	ldrb	r3, [r7, #7]
 800368e:	4618      	mov	r0, r3
 8003690:	f7ff ff60 	bl	8003554 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003694:	f3ef 8310 	mrs	r3, PRIMASK
 8003698:	60fb      	str	r3, [r7, #12]
  return(result);
 800369a:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800369c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800369e:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80036a0:	2003      	movs	r0, #3
 80036a2:	f004 fb70 	bl	8007d86 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80036a6:	4b30      	ldr	r3, [pc, #192]	; (8003768 <HW_TS_Start+0x100>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	22ca      	movs	r2, #202	; 0xca
 80036ae:	625a      	str	r2, [r3, #36]	; 0x24
 80036b0:	4b2d      	ldr	r3, [pc, #180]	; (8003768 <HW_TS_Start+0x100>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2253      	movs	r2, #83	; 0x53
 80036b8:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80036ba:	79fa      	ldrb	r2, [r7, #7]
 80036bc:	4929      	ldr	r1, [pc, #164]	; (8003764 <HW_TS_Start+0xfc>)
 80036be:	4613      	mov	r3, r2
 80036c0:	005b      	lsls	r3, r3, #1
 80036c2:	4413      	add	r3, r2
 80036c4:	00db      	lsls	r3, r3, #3
 80036c6:	440b      	add	r3, r1
 80036c8:	330c      	adds	r3, #12
 80036ca:	2202      	movs	r2, #2
 80036cc:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80036ce:	79fa      	ldrb	r2, [r7, #7]
 80036d0:	4924      	ldr	r1, [pc, #144]	; (8003764 <HW_TS_Start+0xfc>)
 80036d2:	4613      	mov	r3, r2
 80036d4:	005b      	lsls	r3, r3, #1
 80036d6:	4413      	add	r3, r2
 80036d8:	00db      	lsls	r3, r3, #3
 80036da:	440b      	add	r3, r1
 80036dc:	3308      	adds	r3, #8
 80036de:	683a      	ldr	r2, [r7, #0]
 80036e0:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80036e2:	79fa      	ldrb	r2, [r7, #7]
 80036e4:	491f      	ldr	r1, [pc, #124]	; (8003764 <HW_TS_Start+0xfc>)
 80036e6:	4613      	mov	r3, r2
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	4413      	add	r3, r2
 80036ec:	00db      	lsls	r3, r3, #3
 80036ee:	440b      	add	r3, r1
 80036f0:	3304      	adds	r3, #4
 80036f2:	683a      	ldr	r2, [r7, #0]
 80036f4:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80036f6:	79fb      	ldrb	r3, [r7, #7]
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7ff fb6b 	bl	8002dd4 <linkTimer>
 80036fe:	4603      	mov	r3, r0
 8003700:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8003702:	4b1a      	ldr	r3, [pc, #104]	; (800376c <HW_TS_Start+0x104>)
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8003708:	4b19      	ldr	r3, [pc, #100]	; (8003770 <HW_TS_Start+0x108>)
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	b2db      	uxtb	r3, r3
 800370e:	7c7a      	ldrb	r2, [r7, #17]
 8003710:	429a      	cmp	r2, r3
 8003712:	d002      	beq.n	800371a <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 8003714:	f7ff fd2a 	bl	800316c <RescheduleTimerList>
 8003718:	e013      	b.n	8003742 <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 800371a:	79fa      	ldrb	r2, [r7, #7]
 800371c:	4911      	ldr	r1, [pc, #68]	; (8003764 <HW_TS_Start+0xfc>)
 800371e:	4613      	mov	r3, r2
 8003720:	005b      	lsls	r3, r3, #1
 8003722:	4413      	add	r3, r2
 8003724:	00db      	lsls	r3, r3, #3
 8003726:	440b      	add	r3, r1
 8003728:	3308      	adds	r3, #8
 800372a:	6819      	ldr	r1, [r3, #0]
 800372c:	8a7b      	ldrh	r3, [r7, #18]
 800372e:	79fa      	ldrb	r2, [r7, #7]
 8003730:	1ac9      	subs	r1, r1, r3
 8003732:	480c      	ldr	r0, [pc, #48]	; (8003764 <HW_TS_Start+0xfc>)
 8003734:	4613      	mov	r3, r2
 8003736:	005b      	lsls	r3, r3, #1
 8003738:	4413      	add	r3, r2
 800373a:	00db      	lsls	r3, r3, #3
 800373c:	4403      	add	r3, r0
 800373e:	3308      	adds	r3, #8
 8003740:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8003742:	4b09      	ldr	r3, [pc, #36]	; (8003768 <HW_TS_Start+0x100>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	22ff      	movs	r2, #255	; 0xff
 800374a:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800374c:	2003      	movs	r0, #3
 800374e:	f004 fb0c 	bl	8007d6a <HAL_NVIC_EnableIRQ>
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800375c:	bf00      	nop
}
 800375e:	3718      	adds	r7, #24
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	20000160 	.word	0x20000160
 8003768:	20000ac0 	.word	0x20000ac0
 800376c:	200001f0 	.word	0x200001f0
 8003770:	200001f1 	.word	0x200001f1

08003774 <HW_TS_RTC_ReadLeftTicksToCount>:

uint16_t HW_TS_RTC_ReadLeftTicksToCount(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b086      	sub	sp, #24
 8003778:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800377a:	f3ef 8310 	mrs	r3, PRIMASK
 800377e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003780:	68bb      	ldr	r3, [r7, #8]
  uint32_t primask_bit;
  uint16_t return_value, auro_reload_value, elapsed_time_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003782:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003784:	b672      	cpsid	i
  __disable_irq();                /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8003786:	4b13      	ldr	r3, [pc, #76]	; (80037d4 <HW_TS_RTC_ReadLeftTicksToCount+0x60>)
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800378e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003792:	d112      	bne.n	80037ba <HW_TS_RTC_ReadLeftTicksToCount+0x46>
  {
    auro_reload_value = (uint32_t)(READ_BIT(RTC->WUTR, RTC_WUTR_WUT));
 8003794:	4b0f      	ldr	r3, [pc, #60]	; (80037d4 <HW_TS_RTC_ReadLeftTicksToCount+0x60>)
 8003796:	695b      	ldr	r3, [r3, #20]
 8003798:	81fb      	strh	r3, [r7, #14]

    elapsed_time_value = ReturnTimeElapsed();
 800379a:	f7ff fc49 	bl	8003030 <ReturnTimeElapsed>
 800379e:	4603      	mov	r3, r0
 80037a0:	81bb      	strh	r3, [r7, #12]

    if(auro_reload_value > elapsed_time_value)
 80037a2:	89fa      	ldrh	r2, [r7, #14]
 80037a4:	89bb      	ldrh	r3, [r7, #12]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d904      	bls.n	80037b4 <HW_TS_RTC_ReadLeftTicksToCount+0x40>
    {
      return_value = auro_reload_value - elapsed_time_value;
 80037aa:	89fa      	ldrh	r2, [r7, #14]
 80037ac:	89bb      	ldrh	r3, [r7, #12]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	82fb      	strh	r3, [r7, #22]
 80037b2:	e005      	b.n	80037c0 <HW_TS_RTC_ReadLeftTicksToCount+0x4c>
    }
    else
    {
      return_value = 0;
 80037b4:	2300      	movs	r3, #0
 80037b6:	82fb      	strh	r3, [r7, #22]
 80037b8:	e002      	b.n	80037c0 <HW_TS_RTC_ReadLeftTicksToCount+0x4c>
    }
  }
  else
  {
    return_value = TIMER_LIST_EMPTY;
 80037ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80037be:	82fb      	strh	r3, [r7, #22]
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f383 8810 	msr	PRIMASK, r3
  }

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return (return_value);
 80037ca:	8afb      	ldrh	r3, [r7, #22]
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3718      	adds	r7, #24
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	40002800 	.word	0x40002800

080037d8 <LL_AHB2_GRP1_EnableClock>:
{
 80037d8:	b480      	push	{r7}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80037e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80037f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4013      	ands	r3, r2
 80037fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80037fc:	68fb      	ldr	r3, [r7, #12]
}
 80037fe:	bf00      	nop
 8003800:	3714      	adds	r7, #20
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr

0800380a <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_USB
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800380a:	b480      	push	{r7}
 800380c:	b085      	sub	sp, #20
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003812:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003816:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003818:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4313      	orrs	r3, r2
 8003820:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003822:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003826:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4013      	ands	r3, r2
 800382c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800382e:	68fb      	ldr	r3, [r7, #12]
}
 8003830:	bf00      	nop
 8003832:	3714      	adds	r7, #20
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8003840:	4b1b      	ldr	r3, [pc, #108]	; (80038b0 <MX_I2C1_Init+0x74>)
 8003842:	4a1c      	ldr	r2, [pc, #112]	; (80038b4 <MX_I2C1_Init+0x78>)
 8003844:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00E27CAE;
 8003846:	4b1a      	ldr	r3, [pc, #104]	; (80038b0 <MX_I2C1_Init+0x74>)
 8003848:	4a1b      	ldr	r2, [pc, #108]	; (80038b8 <MX_I2C1_Init+0x7c>)
 800384a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800384c:	4b18      	ldr	r3, [pc, #96]	; (80038b0 <MX_I2C1_Init+0x74>)
 800384e:	2200      	movs	r2, #0
 8003850:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003852:	4b17      	ldr	r3, [pc, #92]	; (80038b0 <MX_I2C1_Init+0x74>)
 8003854:	2201      	movs	r2, #1
 8003856:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003858:	4b15      	ldr	r3, [pc, #84]	; (80038b0 <MX_I2C1_Init+0x74>)
 800385a:	2200      	movs	r2, #0
 800385c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800385e:	4b14      	ldr	r3, [pc, #80]	; (80038b0 <MX_I2C1_Init+0x74>)
 8003860:	2200      	movs	r2, #0
 8003862:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003864:	4b12      	ldr	r3, [pc, #72]	; (80038b0 <MX_I2C1_Init+0x74>)
 8003866:	2200      	movs	r2, #0
 8003868:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800386a:	4b11      	ldr	r3, [pc, #68]	; (80038b0 <MX_I2C1_Init+0x74>)
 800386c:	2200      	movs	r2, #0
 800386e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003870:	4b0f      	ldr	r3, [pc, #60]	; (80038b0 <MX_I2C1_Init+0x74>)
 8003872:	2200      	movs	r2, #0
 8003874:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003876:	480e      	ldr	r0, [pc, #56]	; (80038b0 <MX_I2C1_Init+0x74>)
 8003878:	f004 ff84 	bl	8008784 <HAL_I2C_Init>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003882:	f000 fd59 	bl	8004338 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003886:	2100      	movs	r1, #0
 8003888:	4809      	ldr	r0, [pc, #36]	; (80038b0 <MX_I2C1_Init+0x74>)
 800388a:	f006 fe7c 	bl	800a586 <HAL_I2CEx_ConfigAnalogFilter>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d001      	beq.n	8003898 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003894:	f000 fd50 	bl	8004338 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003898:	2100      	movs	r1, #0
 800389a:	4805      	ldr	r0, [pc, #20]	; (80038b0 <MX_I2C1_Init+0x74>)
 800389c:	f006 febe 	bl	800a61c <HAL_I2CEx_ConfigDigitalFilter>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80038a6:	f000 fd47 	bl	8004338 <Error_Handler>
  }

}
 80038aa:	bf00      	nop
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	20027e9c 	.word	0x20027e9c
 80038b4:	40005400 	.word	0x40005400
 80038b8:	00e27cae 	.word	0x00e27cae

080038bc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b088      	sub	sp, #32
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038c4:	f107 030c 	add.w	r3, r7, #12
 80038c8:	2200      	movs	r2, #0
 80038ca:	601a      	str	r2, [r3, #0]
 80038cc:	605a      	str	r2, [r3, #4]
 80038ce:	609a      	str	r2, [r3, #8]
 80038d0:	60da      	str	r2, [r3, #12]
 80038d2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a13      	ldr	r2, [pc, #76]	; (8003928 <HAL_I2C_MspInit+0x6c>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d120      	bne.n	8003920 <HAL_I2C_MspInit+0x64>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038de:	2001      	movs	r0, #1
 80038e0:	f7ff ff7a 	bl	80037d8 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80038e4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80038e8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80038ea:	2312      	movs	r3, #18
 80038ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ee:	2300      	movs	r3, #0
 80038f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038f2:	2300      	movs	r3, #0
 80038f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80038f6:	2304      	movs	r3, #4
 80038f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038fa:	f107 030c 	add.w	r3, r7, #12
 80038fe:	4619      	mov	r1, r3
 8003900:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003904:	f004 fd9e 	bl	8008444 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003908:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800390c:	f7ff ff7d 	bl	800380a <LL_APB1_GRP1_EnableClock>

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8003910:	2200      	movs	r2, #0
 8003912:	2105      	movs	r1, #5
 8003914:	201e      	movs	r0, #30
 8003916:	f004 fa0e 	bl	8007d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800391a:	201e      	movs	r0, #30
 800391c:	f004 fa25 	bl	8007d6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003920:	bf00      	nop
 8003922:	3720      	adds	r7, #32
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	40005400 	.word	0x40005400

0800392c <InertialSensingTask>:
uint32_t enableActivities = 0x1F; //Enable all 9 possible activities including Unknown
uint8_t inertialEnabled = 0;

struct inertialData inertialPacket;

void InertialSensingTask(void *argument){
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
	inertialEnabled = 1;
 8003934:	4b38      	ldr	r3, [pc, #224]	; (8003a18 <InertialSensingTask+0xec>)
 8003936:	2201      	movs	r2, #1
 8003938:	701a      	strb	r2, [r3, #0]
#ifndef DONGLE_CODE
	IMU_begin(BNO080_ADDRESS, IMU_INT_Pin, IMU_INT_GPIO_Port);
 800393a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800393e:	2120      	movs	r1, #32
 8003940:	204a      	movs	r0, #74	; 0x4a
 8003942:	f7fe f857 	bl	80019f4 <IMU_begin>
#endif

	uint32_t evt = 0;
 8003946:	2300      	movs	r3, #0
 8003948:	60fb      	str	r3, [r7, #12]

	while(1){

		/********* WAIT FOR START CONDITION FROM MASTER THREAD ************************/
		osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 800394a:	f04f 32ff 	mov.w	r2, #4294967295
 800394e:	2100      	movs	r1, #0
 8003950:	2001      	movs	r0, #1
 8003952:	f00a fcc9 	bl	800e2e8 <osThreadFlagsWait>

		// configure IMU
		osDelay(500);
 8003956:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800395a:	f00a fd59 	bl	800e410 <osDelay>
		IMU_enableRotationVector(ROT_VEC_PERIOD);
 800395e:	2064      	movs	r0, #100	; 0x64
 8003960:	f7fe fb42 	bl	8001fe8 <IMU_enableRotationVector>
		osDelay(100);
 8003964:	2064      	movs	r0, #100	; 0x64
 8003966:	f00a fd53 	bl	800e410 <osDelay>
		IMU_enableActivityClassifier(ACT_CLASS_PERIOD , enableActivities, activityClasses);
 800396a:	4b2c      	ldr	r3, [pc, #176]	; (8003a1c <InertialSensingTask+0xf0>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a2c      	ldr	r2, [pc, #176]	; (8003a20 <InertialSensingTask+0xf4>)
 8003970:	4619      	mov	r1, r3
 8003972:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003976:	f7fe fb45 	bl	8002004 <IMU_enableActivityClassifier>

		// give some time for things to buffer
		// TODO: remove this to see if it still works fine
		osDelay(400);
 800397a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800397e:	f00a fd47 	bl	800e410 <osDelay>

		while(1){

			// grab packets
			osDelay(100);
 8003982:	2064      	movs	r0, #100	; 0x64
 8003984:	f00a fd44 	bl	800e410 <osDelay>
			osMessageQueueGet(rotationSampleQueueHandle, &inertialPacket.rotationMatrix, 0U, 100);
 8003988:	4b26      	ldr	r3, [pc, #152]	; (8003a24 <InertialSensingTask+0xf8>)
 800398a:	6818      	ldr	r0, [r3, #0]
 800398c:	2364      	movs	r3, #100	; 0x64
 800398e:	2200      	movs	r2, #0
 8003990:	4925      	ldr	r1, [pc, #148]	; (8003a28 <InertialSensingTask+0xfc>)
 8003992:	f00b fa2d 	bl	800edf0 <osMessageQueueGet>
			osMessageQueueGet(activitySampleQueueHandle, &inertialPacket.activity, 0U, 0);
 8003996:	4b25      	ldr	r3, [pc, #148]	; (8003a2c <InertialSensingTask+0x100>)
 8003998:	6818      	ldr	r0, [r3, #0]
 800399a:	2300      	movs	r3, #0
 800399c:	2200      	movs	r2, #0
 800399e:	4924      	ldr	r1, [pc, #144]	; (8003a30 <InertialSensingTask+0x104>)
 80039a0:	f00b fa26 	bl	800edf0 <osMessageQueueGet>
			osMessageQueuePut(inertialSensingQueueHandle, &inertialPacket, 0U, 0);
 80039a4:	4b23      	ldr	r3, [pc, #140]	; (8003a34 <InertialSensingTask+0x108>)
 80039a6:	6818      	ldr	r0, [r3, #0]
 80039a8:	2300      	movs	r3, #0
 80039aa:	2200      	movs	r2, #0
 80039ac:	491e      	ldr	r1, [pc, #120]	; (8003a28 <InertialSensingTask+0xfc>)
 80039ae:	f00b f9ab 	bl	800ed08 <osMessageQueuePut>

			if( HAL_GPIO_ReadPin(IMU_INT_GPIO_Port, IMU_INT_Pin) == GPIO_PIN_RESET) IMU_dataAvailable();
 80039b2:	2120      	movs	r1, #32
 80039b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039b8:	f004 feb4 	bl	8008724 <HAL_GPIO_ReadPin>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d101      	bne.n	80039c6 <InertialSensingTask+0x9a>
 80039c2:	f7fe f84f 	bl	8001a64 <IMU_dataAvailable>

			// check for break condition
			evt = osThreadFlagsWait (0x00000002U, osFlagsWaitAny, 0);
 80039c6:	2200      	movs	r2, #0
 80039c8:	2100      	movs	r1, #0
 80039ca:	2002      	movs	r0, #2
 80039cc:	f00a fc8c 	bl	800e2e8 <osThreadFlagsWait>
 80039d0:	60f8      	str	r0, [r7, #12]

			// stop timer and put thread in idle if signal was reset
			if( (evt & 0x00000002U) == 0x00000002U){
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f003 0302 	and.w	r3, r3, #2
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d0d2      	beq.n	8003982 <InertialSensingTask+0x56>

				// reset IMU
				IMU_softReset();
 80039dc:	f7fe faa4 	bl	8001f28 <IMU_softReset>

				// give some time to ensure no interrupts are handled
				osDelay(500);
 80039e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80039e4:	f00a fd14 	bl	800e410 <osDelay>

				inertialEnabled = 0;
 80039e8:	4b0b      	ldr	r3, [pc, #44]	; (8003a18 <InertialSensingTask+0xec>)
 80039ea:	2200      	movs	r2, #0
 80039ec:	701a      	strb	r2, [r3, #0]

				// empty queues
				osMessageQueueReset(inertialSensingQueueHandle);
 80039ee:	4b11      	ldr	r3, [pc, #68]	; (8003a34 <InertialSensingTask+0x108>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f00b fa6e 	bl	800eed4 <osMessageQueueReset>
				osMessageQueueReset(activitySampleQueueHandle);
 80039f8:	4b0c      	ldr	r3, [pc, #48]	; (8003a2c <InertialSensingTask+0x100>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f00b fa69 	bl	800eed4 <osMessageQueueReset>
				osMessageQueueReset(rotationSampleQueueHandle);
 8003a02:	4b08      	ldr	r3, [pc, #32]	; (8003a24 <InertialSensingTask+0xf8>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f00b fa64 	bl	800eed4 <osMessageQueueReset>

				// clear any flags
				osThreadFlagsClear(0x0000000EU);
 8003a0c:	200e      	movs	r0, #14
 8003a0e:	f00a fc1b 	bl	800e248 <osThreadFlagsClear>

				// exit and wait for next start condition
				break;
 8003a12:	bf00      	nop
		osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 8003a14:	e799      	b.n	800394a <InertialSensingTask+0x1e>
 8003a16:	bf00      	nop
 8003a18:	20000aca 	.word	0x20000aca
 8003a1c:	20000068 	.word	0x20000068
 8003a20:	20027f2c 	.word	0x20027f2c
 8003a24:	200278b8 	.word	0x200278b8
 8003a28:	20027ef0 	.word	0x20027ef0
 8003a2c:	2002789c 	.word	0x2002789c
 8003a30:	20027f08 	.word	0x20027f08
 8003a34:	200278a8 	.word	0x200278a8

08003a38 <HAL_GPIO_EXTI_Callback>:
		}
	}
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	4603      	mov	r3, r0
 8003a40:	80fb      	strh	r3, [r7, #6]
    // if interrupt is triggered, sample!
	// todo: only do when inertial measurements are enabled?
	if((GPIO_Pin == IMU_INT_Pin) && (inertialEnabled == 1)){
 8003a42:	88fb      	ldrh	r3, [r7, #6]
 8003a44:	2b20      	cmp	r3, #32
 8003a46:	d105      	bne.n	8003a54 <HAL_GPIO_EXTI_Callback+0x1c>
 8003a48:	4b04      	ldr	r3, [pc, #16]	; (8003a5c <HAL_GPIO_EXTI_Callback+0x24>)
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d101      	bne.n	8003a54 <HAL_GPIO_EXTI_Callback+0x1c>
		IMU_dataAvailable();
 8003a50:	f7fe f808 	bl	8001a64 <IMU_dataAvailable>
	}
}
 8003a54:	bf00      	nop
 8003a56:	3708      	adds	r7, #8
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	20000aca 	.word	0x20000aca

08003a60 <_Input>:
#include "captivate_config.h"

PulseProcessor pulse_processor;
GeometryBuilder geometry_builder;

void _Input(Input *self, uint8_t input_idx){
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	460b      	mov	r3, r1
 8003a6a:	70fb      	strb	r3, [r7, #3]
	_GeometryBuilder(&geometry_builder);
 8003a6c:	480b      	ldr	r0, [pc, #44]	; (8003a9c <_Input+0x3c>)
 8003a6e:	f7fe fd71 	bl	8002554 <_GeometryBuilder>
	_PulseProcessor(&pulse_processor, 1);
 8003a72:	2101      	movs	r1, #1
 8003a74:	480a      	ldr	r0, [pc, #40]	; (8003aa0 <_Input+0x40>)
 8003a76:	f000 feb7 	bl	80047e8 <_PulseProcessor>
	pulse_processor.next = &geometry_builder;
 8003a7a:	4b09      	ldr	r3, [pc, #36]	; (8003aa0 <_Input+0x40>)
 8003a7c:	4a07      	ldr	r2, [pc, #28]	; (8003a9c <_Input+0x3c>)
 8003a7e:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
	self->next = &pulse_processor;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a06      	ldr	r2, [pc, #24]	; (8003aa0 <_Input+0x40>)
 8003a86:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
	self->input_idx_ = input_idx;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	78fa      	ldrb	r2, [r7, #3]
 8003a8e:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408

}
 8003a92:	bf00      	nop
 8003a94:	3708      	adds	r7, #8
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	20027f58 	.word	0x20027f58
 8003aa0:	20027fe0 	.word	0x20027fe0

08003aa4 <PulseHandlerTask>:
volatile uint32_t count = 0;
Pulse p;
void PulseHandlerTask(void *argument){
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
	uint32_t evt = 0;
 8003aac:	2300      	movs	r3, #0
 8003aae:	60fb      	str	r3, [r7, #12]
	while(1){
		osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 8003ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	2001      	movs	r0, #1
 8003ab8:	f00a fc16 	bl	800e2e8 <osThreadFlagsWait>
		//Start interrupt
//		HAL_NVIC_EnableIRQ(COMP_IRQn);
		HAL_TIM_Base_Start(&htim16);
 8003abc:	4818      	ldr	r0, [pc, #96]	; (8003b20 <PulseHandlerTask+0x7c>)
 8003abe:	f008 ffd1 	bl	800ca64 <HAL_TIM_Base_Start>
		HAL_COMP_Start(&hcomp1);
 8003ac2:	4818      	ldr	r0, [pc, #96]	; (8003b24 <PulseHandlerTask+0x80>)
 8003ac4:	f003 ff50 	bl	8007968 <HAL_COMP_Start>
		_Input(&input0, 0);
 8003ac8:	2100      	movs	r1, #0
 8003aca:	4817      	ldr	r0, [pc, #92]	; (8003b28 <PulseHandlerTask+0x84>)
 8003acc:	f7ff ffc8 	bl	8003a60 <_Input>
		while(1){
			osMessageQueueGet (pulseQueueHandle, (void *) &p, NULL, osWaitForever);
 8003ad0:	4b16      	ldr	r3, [pc, #88]	; (8003b2c <PulseHandlerTask+0x88>)
 8003ad2:	6818      	ldr	r0, [r3, #0]
 8003ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ad8:	2200      	movs	r2, #0
 8003ada:	4915      	ldr	r1, [pc, #84]	; (8003b30 <PulseHandlerTask+0x8c>)
 8003adc:	f00b f988 	bl	800edf0 <osMessageQueueGet>
			consume_pulse(input0.next, &p);
 8003ae0:	4b11      	ldr	r3, [pc, #68]	; (8003b28 <PulseHandlerTask+0x84>)
 8003ae2:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8003ae6:	4912      	ldr	r1, [pc, #72]	; (8003b30 <PulseHandlerTask+0x8c>)
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f000 feb1 	bl	8004850 <consume_pulse>

			evt = osThreadFlagsWait(0x00000002U, osFlagsWaitAny, 0);
 8003aee:	2200      	movs	r2, #0
 8003af0:	2100      	movs	r1, #0
 8003af2:	2002      	movs	r0, #2
 8003af4:	f00a fbf8 	bl	800e2e8 <osThreadFlagsWait>
 8003af8:	60f8      	str	r0, [r7, #12]
			if((evt & 0x00000002U) == 0x00000002U){
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d0e5      	beq.n	8003ad0 <PulseHandlerTask+0x2c>
				//Stop interrupt
//				HAL_NVIC_DisableIRQ(COMP_IRQn);
				HAL_COMP_Stop(&hcomp1);
 8003b04:	4807      	ldr	r0, [pc, #28]	; (8003b24 <PulseHandlerTask+0x80>)
 8003b06:	f003 ff79 	bl	80079fc <HAL_COMP_Stop>
				HAL_TIM_Base_Stop(&htim16);
 8003b0a:	4805      	ldr	r0, [pc, #20]	; (8003b20 <PulseHandlerTask+0x7c>)
 8003b0c:	f008 ffd4 	bl	800cab8 <HAL_TIM_Base_Stop>
				osMessageQueueReset(pulseQueueHandle);
 8003b10:	4b06      	ldr	r3, [pc, #24]	; (8003b2c <PulseHandlerTask+0x88>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4618      	mov	r0, r3
 8003b16:	f00b f9dd 	bl	800eed4 <osMessageQueueReset>
				break;
 8003b1a:	bf00      	nop
		osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 8003b1c:	e7c8      	b.n	8003ab0 <PulseHandlerTask+0xc>
 8003b1e:	bf00      	nop
 8003b20:	200284d0 	.word	0x200284d0
 8003b24:	20027d0c 	.word	0x20027d0c
 8003b28:	200278bc 	.word	0x200278bc
 8003b2c:	200277a4 	.word	0x200277a4
 8003b30:	20027f38 	.word	0x20027f38

08003b34 <get3D_location>:
}

VIVEVars vive_vars;
struct LogMessage statusMessage;

void get3D_location(void *arguments){
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]

	uint8_t blinkActive	= 0;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	73fb      	strb	r3, [r7, #15]

	// ensures semaphores are clear
	osSemaphoreAcquire(locCompleteHandle, 0);
 8003b40:	4b30      	ldr	r3, [pc, #192]	; (8003c04 <get3D_location+0xd0>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2100      	movs	r1, #0
 8003b46:	4618      	mov	r0, r3
 8003b48:	f00a ff9a 	bl	800ea80 <osSemaphoreAcquire>
	osSemaphoreAcquire(locNotifyHandle, 0);
 8003b4c:	4b2e      	ldr	r3, [pc, #184]	; (8003c08 <get3D_location+0xd4>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2100      	movs	r1, #0
 8003b52:	4618      	mov	r0, r3
 8003b54:	f00a ff94 	bl	800ea80 <osSemaphoreAcquire>

	osMessageQueueGet(statusQueueHandle, &statusMessage, 0U, osWaitForever);
 8003b58:	4b2c      	ldr	r3, [pc, #176]	; (8003c0c <get3D_location+0xd8>)
 8003b5a:	6818      	ldr	r0, [r3, #0]
 8003b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b60:	2200      	movs	r2, #0
 8003b62:	492b      	ldr	r1, [pc, #172]	; (8003c10 <get3D_location+0xdc>)
 8003b64:	f00b f944 	bl	800edf0 <osMessageQueueGet>
	if(statusMessage.blinkEnabled == 1){
 8003b68:	4b29      	ldr	r3, [pc, #164]	; (8003c10 <get3D_location+0xdc>)
 8003b6a:	789b      	ldrb	r3, [r3, #2]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d116      	bne.n	8003b9e <get3D_location+0x6a>
		osMessageQueuePut(statusQueueHandle, (void *) &statusMessage, 0U, 0);
 8003b70:	4b26      	ldr	r3, [pc, #152]	; (8003c0c <get3D_location+0xd8>)
 8003b72:	6818      	ldr	r0, [r3, #0]
 8003b74:	2300      	movs	r3, #0
 8003b76:	2200      	movs	r2, #0
 8003b78:	4925      	ldr	r1, [pc, #148]	; (8003c10 <get3D_location+0xdc>)
 8003b7a:	f00b f8c5 	bl	800ed08 <osMessageQueuePut>

		blinkActive = 1;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	73fb      	strb	r3, [r7, #15]

		// disable blink if active
		osThreadFlagsSet(blinkTaskHandle, 0x00000002U);
 8003b82:	4b24      	ldr	r3, [pc, #144]	; (8003c14 <get3D_location+0xe0>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2102      	movs	r1, #2
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f00a fafb 	bl	800e184 <osThreadFlagsSet>

		// wait for blink thread to turn off
		//TODO: make safer by making a break condition
		osSemaphoreAcquire(locNotifyHandle, osWaitForever);
 8003b8e:	4b1e      	ldr	r3, [pc, #120]	; (8003c08 <get3D_location+0xd4>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f04f 31ff 	mov.w	r1, #4294967295
 8003b96:	4618      	mov	r0, r3
 8003b98:	f00a ff72 	bl	800ea80 <osSemaphoreAcquire>
 8003b9c:	e006      	b.n	8003bac <get3D_location+0x78>
	}
	else{
		osMessageQueuePut(statusQueueHandle, (void *) &statusMessage, 0U, 0);
 8003b9e:	4b1b      	ldr	r3, [pc, #108]	; (8003c0c <get3D_location+0xd8>)
 8003ba0:	6818      	ldr	r0, [r3, #0]
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	491a      	ldr	r1, [pc, #104]	; (8003c10 <get3D_location+0xdc>)
 8003ba8:	f00b f8ae 	bl	800ed08 <osMessageQueuePut>
	}

	// stop blink code if running and hold I2C bus from being used
	// 		the timeout is to ensure to turn off the thread if no signal is seen
	//TODO: optimize the timeout
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003bac:	4b1a      	ldr	r3, [pc, #104]	; (8003c18 <get3D_location+0xe4>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f00a ff63 	bl	800ea80 <osSemaphoreAcquire>

	// turn on 3D localization
	osThreadFlagsSet(pulseTaskHandle, 0x00000001U);
 8003bba:	4b18      	ldr	r3, [pc, #96]	; (8003c1c <get3D_location+0xe8>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2101      	movs	r1, #1
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f00a fadf 	bl	800e184 <osThreadFlagsSet>

	// wait for completion
	osSemaphoreAcquire (locCompleteHandle, GET_3D_LOC_TIMEOUT);
 8003bc6:	4b0f      	ldr	r3, [pc, #60]	; (8003c04 <get3D_location+0xd0>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f00a ff56 	bl	800ea80 <osSemaphoreAcquire>
#ifdef VIVE_THREAD_INFINITE_TIMEOUT
	osDelay(osWaitForever);
#endif

	// release I2C handle
	osSemaphoreRelease(messageI2C_LockHandle);
 8003bd4:	4b10      	ldr	r3, [pc, #64]	; (8003c18 <get3D_location+0xe4>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f00a ffb7 	bl	800eb4c <osSemaphoreRelease>

	// turn off 3D localization
	osThreadFlagsSet(pulseTaskHandle, 0x00000002U);
 8003bde:	4b0f      	ldr	r3, [pc, #60]	; (8003c1c <get3D_location+0xe8>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2102      	movs	r1, #2
 8003be4:	4618      	mov	r0, r3
 8003be6:	f00a facd 	bl	800e184 <osThreadFlagsSet>

	if(blinkActive){
 8003bea:	7bfb      	ldrb	r3, [r7, #15]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d005      	beq.n	8003bfc <get3D_location+0xc8>
//		// wait for blink thread to turn off
//		//TODO: make safer by making a break condition
//		osSemaphoreAcquire(locNotifyHandle, osWaitForever);

		// enable blink thread
		osThreadFlagsSet(blinkTaskHandle, 0x00000001U);
 8003bf0:	4b08      	ldr	r3, [pc, #32]	; (8003c14 <get3D_location+0xe0>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2101      	movs	r1, #1
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f00a fac4 	bl	800e184 <osThreadFlagsSet>
	}

}
 8003bfc:	bf00      	nop
 8003bfe:	3710      	adds	r7, #16
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	20027ce0 	.word	0x20027ce0
 8003c08:	20027ce8 	.word	0x20027ce8
 8003c0c:	200278b4 	.word	0x200278b4
 8003c10:	20027d04 	.word	0x20027d04
 8003c14:	20027890 	.word	0x20027890
 8003c18:	200278a4 	.word	0x200278a4
 8003c1c:	20027cec 	.word	0x20027cec

08003c20 <enqueue_pulse>:


void enqueue_pulse(Input *self, uint16_t start_time, uint16_t len){
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	460b      	mov	r3, r1
 8003c2a:	807b      	strh	r3, [r7, #2]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	803b      	strh	r3, [r7, #0]
	Pulse p_in = {self->input_idx_, start_time, len};
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 8003c36:	723b      	strb	r3, [r7, #8]
 8003c38:	887b      	ldrh	r3, [r7, #2]
 8003c3a:	817b      	strh	r3, [r7, #10]
 8003c3c:	883b      	ldrh	r3, [r7, #0]
 8003c3e:	81bb      	strh	r3, [r7, #12]
	osMessageQueuePut(pulseQueueHandle, (const void *) &p_in, NULL, 0);
 8003c40:	4b05      	ldr	r3, [pc, #20]	; (8003c58 <enqueue_pulse+0x38>)
 8003c42:	6818      	ldr	r0, [r3, #0]
 8003c44:	f107 0108 	add.w	r1, r7, #8
 8003c48:	2300      	movs	r3, #0
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f00b f85c 	bl	800ed08 <osMessageQueuePut>
//	count = osMessageQueueGetCount(pulseQueueHandle);
}
 8003c50:	bf00      	nop
 8003c52:	3710      	adds	r7, #16
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	200277a4 	.word	0x200277a4

08003c5c <InterProcessorTask>:
extern struct LogPacket sensorPacket;
extern struct LogMessage togLogMessageReceived;
static const struct LogMessage nullMessage = {0};
struct LogMessage commandToSend;

void InterProcessorTask(void *argument){
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b086      	sub	sp, #24
 8003c60:	af02      	add	r7, sp, #8
 8003c62:	6078      	str	r0, [r7, #4]
	uint32_t evt = 0;
 8003c64:	2300      	movs	r3, #0
 8003c66:	60fb      	str	r3, [r7, #12]
#ifndef DONGLE_CODE
	// ensure secondary processor is not active, trying to send data
	// 		note: this should only happen when debugging and resetting the main processor while secondary is logging
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003c68:	4b78      	ldr	r3, [pc, #480]	; (8003e4c <InterProcessorTask+0x1f0>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f04f 31ff 	mov.w	r1, #4294967295
 8003c70:	4618      	mov	r0, r3
 8003c72:	f00a ff05 	bl	800ea80 <osSemaphoreAcquire>
	while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &nullMessage, sizeof(togLogMessageReceived), 100) != HAL_OK);
 8003c76:	bf00      	nop
 8003c78:	2364      	movs	r3, #100	; 0x64
 8003c7a:	9300      	str	r3, [sp, #0]
 8003c7c:	2306      	movs	r3, #6
 8003c7e:	4a74      	ldr	r2, [pc, #464]	; (8003e50 <InterProcessorTask+0x1f4>)
 8003c80:	21e6      	movs	r1, #230	; 0xe6
 8003c82:	4874      	ldr	r0, [pc, #464]	; (8003e54 <InterProcessorTask+0x1f8>)
 8003c84:	f004 fe0e 	bl	80088a4 <HAL_I2C_Master_Transmit>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1f4      	bne.n	8003c78 <InterProcessorTask+0x1c>
	osSemaphoreRelease(messageI2C_LockHandle);
 8003c8e:	4b6f      	ldr	r3, [pc, #444]	; (8003e4c <InterProcessorTask+0x1f0>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f00a ff5a 	bl	800eb4c <osSemaphoreRelease>
#endif
	while(1){

		evt = osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 8003c98:	f04f 32ff 	mov.w	r2, #4294967295
 8003c9c:	2100      	movs	r1, #0
 8003c9e:	2001      	movs	r0, #1
 8003ca0:	f00a fb22 	bl	800e2e8 <osThreadFlagsWait>
 8003ca4:	60f8      	str	r0, [r7, #12]

		// if signal was received successfully, start blink task
		if ( (evt & 0x00000001U) == 0x00000001U)  {
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f003 0301 	and.w	r3, r3, #1
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d0f3      	beq.n	8003c98 <InterProcessorTask+0x3c>

			// tell secondary processor to start logging (in blocking mode)
			memcpy(&commandToSend, &togLogMessageReceived, sizeof(struct LogMessage));
 8003cb0:	4b69      	ldr	r3, [pc, #420]	; (8003e58 <InterProcessorTask+0x1fc>)
 8003cb2:	4a6a      	ldr	r2, [pc, #424]	; (8003e5c <InterProcessorTask+0x200>)
 8003cb4:	6811      	ldr	r1, [r2, #0]
 8003cb6:	6019      	str	r1, [r3, #0]
 8003cb8:	8892      	ldrh	r2, [r2, #4]
 8003cba:	809a      	strh	r2, [r3, #4]
//			osThreadFlagsClear(0x0000000FU);
			osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003cbc:	4b63      	ldr	r3, [pc, #396]	; (8003e4c <InterProcessorTask+0x1f0>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f04f 31ff 	mov.w	r1, #4294967295
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f00a fedb 	bl	800ea80 <osSemaphoreAcquire>
			while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &commandToSend, sizeof(togLogMessageReceived), 100) != HAL_OK);
 8003cca:	bf00      	nop
 8003ccc:	2364      	movs	r3, #100	; 0x64
 8003cce:	9300      	str	r3, [sp, #0]
 8003cd0:	2306      	movs	r3, #6
 8003cd2:	4a61      	ldr	r2, [pc, #388]	; (8003e58 <InterProcessorTask+0x1fc>)
 8003cd4:	21e6      	movs	r1, #230	; 0xe6
 8003cd6:	485f      	ldr	r0, [pc, #380]	; (8003e54 <InterProcessorTask+0x1f8>)
 8003cd8:	f004 fde4 	bl	80088a4 <HAL_I2C_Master_Transmit>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1f4      	bne.n	8003ccc <InterProcessorTask+0x70>
			osDelay(100);
 8003ce2:	2064      	movs	r0, #100	; 0x64
 8003ce4:	f00a fb94 	bl	800e410 <osDelay>
			osSemaphoreRelease(messageI2C_LockHandle);
 8003ce8:	4b58      	ldr	r3, [pc, #352]	; (8003e4c <InterProcessorTask+0x1f0>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4618      	mov	r0, r3
 8003cee:	f00a ff2d 	bl	800eb4c <osSemaphoreRelease>

			// message passing until told to stop
			while(1){

				// grab an event flag if available
				evt = osThreadFlagsWait (0x00000006U, osFlagsWaitAny, osWaitForever);
 8003cf2:	f04f 32ff 	mov.w	r2, #4294967295
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	2006      	movs	r0, #6
 8003cfa:	f00a faf5 	bl	800e2e8 <osThreadFlagsWait>
 8003cfe:	60f8      	str	r0, [r7, #12]

				// if an interrupt is received indicating a message is waiting to be received
 				if( (evt & 0x00000004U) == 0x00000004U){
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f003 0304 	and.w	r3, r3, #4
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d079      	beq.n	8003dfe <InterProcessorTask+0x1a2>

 					osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003d0a:	4b50      	ldr	r3, [pc, #320]	; (8003e4c <InterProcessorTask+0x1f0>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f04f 31ff 	mov.w	r1, #4294967295
 8003d12:	4618      	mov	r0, r3
 8003d14:	f00a feb4 	bl	800ea80 <osSemaphoreAcquire>

 					// send command packet to MCU
 					while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &commandToSend, sizeof(struct LogMessage), 100) != HAL_OK){
 8003d18:	e00e      	b.n	8003d38 <InterProcessorTask+0xdc>
 						osSemaphoreRelease(messageI2C_LockHandle);
 8003d1a:	4b4c      	ldr	r3, [pc, #304]	; (8003e4c <InterProcessorTask+0x1f0>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f00a ff14 	bl	800eb4c <osSemaphoreRelease>
 						osDelay(100);
 8003d24:	2064      	movs	r0, #100	; 0x64
 8003d26:	f00a fb73 	bl	800e410 <osDelay>
 						osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003d2a:	4b48      	ldr	r3, [pc, #288]	; (8003e4c <InterProcessorTask+0x1f0>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f04f 31ff 	mov.w	r1, #4294967295
 8003d32:	4618      	mov	r0, r3
 8003d34:	f00a fea4 	bl	800ea80 <osSemaphoreAcquire>
 					while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &commandToSend, sizeof(struct LogMessage), 100) != HAL_OK){
 8003d38:	2364      	movs	r3, #100	; 0x64
 8003d3a:	9300      	str	r3, [sp, #0]
 8003d3c:	2306      	movs	r3, #6
 8003d3e:	4a46      	ldr	r2, [pc, #280]	; (8003e58 <InterProcessorTask+0x1fc>)
 8003d40:	21e6      	movs	r1, #230	; 0xe6
 8003d42:	4844      	ldr	r0, [pc, #272]	; (8003e54 <InterProcessorTask+0x1f8>)
 8003d44:	f004 fdae 	bl	80088a4 <HAL_I2C_Master_Transmit>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1e5      	bne.n	8003d1a <InterProcessorTask+0xbe>
// 					evt = osThreadFlagsWait(0x00000010U, osFlagsWaitAny, osWaitForever);
 					// ensure I2C is disabled
// 					HAL_I2C_Master_Abort_IT(&hi2c1, SECONDARY_MCU_ADDRESS << 1);

 					// clear receiving flag
 					osThreadFlagsClear(0x00000008U);
 8003d4e:	2008      	movs	r0, #8
 8003d50:	f00a fa7a 	bl	800e248 <osThreadFlagsClear>
 					// grab packet from secondary MCU
 					while(HAL_I2C_Master_Receive_IT(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &receivedPacket, sizeof(struct secondaryProcessorData)) != HAL_OK){
 8003d54:	e00e      	b.n	8003d74 <InterProcessorTask+0x118>
 						osSemaphoreRelease(messageI2C_LockHandle);
 8003d56:	4b3d      	ldr	r3, [pc, #244]	; (8003e4c <InterProcessorTask+0x1f0>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f00a fef6 	bl	800eb4c <osSemaphoreRelease>
 						osDelay(100);
 8003d60:	2064      	movs	r0, #100	; 0x64
 8003d62:	f00a fb55 	bl	800e410 <osDelay>
 						osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003d66:	4b39      	ldr	r3, [pc, #228]	; (8003e4c <InterProcessorTask+0x1f0>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f04f 31ff 	mov.w	r1, #4294967295
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f00a fe86 	bl	800ea80 <osSemaphoreAcquire>
 					while(HAL_I2C_Master_Receive_IT(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &receivedPacket, sizeof(struct secondaryProcessorData)) != HAL_OK){
 8003d74:	2358      	movs	r3, #88	; 0x58
 8003d76:	4a3a      	ldr	r2, [pc, #232]	; (8003e60 <InterProcessorTask+0x204>)
 8003d78:	21e6      	movs	r1, #230	; 0xe6
 8003d7a:	4836      	ldr	r0, [pc, #216]	; (8003e54 <InterProcessorTask+0x1f8>)
 8003d7c:	f004 ff7c 	bl	8008c78 <HAL_I2C_Master_Receive_IT>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1e7      	bne.n	8003d56 <InterProcessorTask+0xfa>
 					}
// 					taskEXIT_CRITICAL();
					// wait until packet is received
					evt = osThreadFlagsWait(0x0000000AU, osFlagsWaitAny, osWaitForever);
 8003d86:	f04f 32ff 	mov.w	r2, #4294967295
 8003d8a:	2100      	movs	r1, #0
 8003d8c:	200a      	movs	r0, #10
 8003d8e:	f00a faab 	bl	800e2e8 <osThreadFlagsWait>
 8003d92:	60f8      	str	r0, [r7, #12]
					// ensure I2C is disabled
//					HAL_I2C_Master_Abort_IT(&hi2c1, SECONDARY_MCU_ADDRESS << 1);

					osSemaphoreRelease(messageI2C_LockHandle);
 8003d94:	4b2d      	ldr	r3, [pc, #180]	; (8003e4c <InterProcessorTask+0x1f0>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f00a fed7 	bl	800eb4c <osSemaphoreRelease>


//					evt = osThreadFlagsWait(0x00000002U, osFlagsWaitAny, 0);
					// if thread was told to stop, break from while loop!
					if( (evt & 0x00000002U) == 0x00000002U ) break;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f003 0302 	and.w	r3, r3, #2
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d14e      	bne.n	8003e46 <InterProcessorTask+0x1ea>

					// package received data into 100ms chunks and put in queue
					parsedPacket.tick_ms = receivedPacket.tick_ms;
 8003da8:	4b2d      	ldr	r3, [pc, #180]	; (8003e60 <InterProcessorTask+0x204>)
 8003daa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dac:	4a2d      	ldr	r2, [pc, #180]	; (8003e64 <InterProcessorTask+0x208>)
 8003dae:	6113      	str	r3, [r2, #16]
					parsedPacket.epoch = receivedPacket.epoch;
 8003db0:	4b2b      	ldr	r3, [pc, #172]	; (8003e60 <InterProcessorTask+0x204>)
 8003db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003db4:	4a2b      	ldr	r2, [pc, #172]	; (8003e64 <InterProcessorTask+0x208>)
 8003db6:	6153      	str	r3, [r2, #20]

					for(int i = 0; i < 5; i++)
 8003db8:	2300      	movs	r3, #0
 8003dba:	60bb      	str	r3, [r7, #8]
 8003dbc:	e01c      	b.n	8003df8 <InterProcessorTask+0x19c>
					{
						memcpy(&parsedPacket.temple, &receivedPacket.temp.temple[i], sizeof(struct thermopileData));
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	00db      	lsls	r3, r3, #3
 8003dc2:	4a27      	ldr	r2, [pc, #156]	; (8003e60 <InterProcessorTask+0x204>)
 8003dc4:	4413      	add	r3, r2
 8003dc6:	2208      	movs	r2, #8
 8003dc8:	4619      	mov	r1, r3
 8003dca:	4826      	ldr	r0, [pc, #152]	; (8003e64 <InterProcessorTask+0x208>)
 8003dcc:	f012 f87c 	bl	8015ec8 <memcpy>
						memcpy(&parsedPacket.nose, &receivedPacket.temp.nose[i], sizeof(struct thermopileData));
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	3305      	adds	r3, #5
 8003dd4:	00db      	lsls	r3, r3, #3
 8003dd6:	4a22      	ldr	r2, [pc, #136]	; (8003e60 <InterProcessorTask+0x204>)
 8003dd8:	4413      	add	r3, r2
 8003dda:	2208      	movs	r2, #8
 8003ddc:	4619      	mov	r1, r3
 8003dde:	4822      	ldr	r0, [pc, #136]	; (8003e68 <InterProcessorTask+0x20c>)
 8003de0:	f012 f872 	bl	8015ec8 <memcpy>

						// pass to master thread to handle
						osMessageQueuePut(interProcessorMsgQueueHandle, (void *) &parsedPacket, 0U, 0);
 8003de4:	4b21      	ldr	r3, [pc, #132]	; (8003e6c <InterProcessorTask+0x210>)
 8003de6:	6818      	ldr	r0, [r3, #0]
 8003de8:	2300      	movs	r3, #0
 8003dea:	2200      	movs	r2, #0
 8003dec:	491d      	ldr	r1, [pc, #116]	; (8003e64 <InterProcessorTask+0x208>)
 8003dee:	f00a ff8b 	bl	800ed08 <osMessageQueuePut>
					for(int i = 0; i < 5; i++)
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	3301      	adds	r3, #1
 8003df6:	60bb      	str	r3, [r7, #8]
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	2b04      	cmp	r3, #4
 8003dfc:	dddf      	ble.n	8003dbe <InterProcessorTask+0x162>

					}
				}

				// stop thread and clear queues
				if( (evt & 0x00000002U) == 0x00000002U){
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f003 0302 	and.w	r3, r3, #2
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	f43f af74 	beq.w	8003cf2 <InterProcessorTask+0x96>

					/// clear transmission flag
// 					osThreadFlagsClear(0x00000010U);
					// tell secondary processor to stop logging (in blocking mode)
					osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003e0a:	4b10      	ldr	r3, [pc, #64]	; (8003e4c <InterProcessorTask+0x1f0>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f04f 31ff 	mov.w	r1, #4294967295
 8003e12:	4618      	mov	r0, r3
 8003e14:	f00a fe34 	bl	800ea80 <osSemaphoreAcquire>
					while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &nullMessage, sizeof(togLogMessageReceived), 100) != HAL_OK);
 8003e18:	bf00      	nop
 8003e1a:	2364      	movs	r3, #100	; 0x64
 8003e1c:	9300      	str	r3, [sp, #0]
 8003e1e:	2306      	movs	r3, #6
 8003e20:	4a0b      	ldr	r2, [pc, #44]	; (8003e50 <InterProcessorTask+0x1f4>)
 8003e22:	21e6      	movs	r1, #230	; 0xe6
 8003e24:	480b      	ldr	r0, [pc, #44]	; (8003e54 <InterProcessorTask+0x1f8>)
 8003e26:	f004 fd3d 	bl	80088a4 <HAL_I2C_Master_Transmit>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1f4      	bne.n	8003e1a <InterProcessorTask+0x1be>
					osSemaphoreRelease(messageI2C_LockHandle);
 8003e30:	4b06      	ldr	r3, [pc, #24]	; (8003e4c <InterProcessorTask+0x1f0>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4618      	mov	r0, r3
 8003e36:	f00a fe89 	bl	800eb4c <osSemaphoreRelease>
					// wait until transmit is complete
//					evt = osThreadFlagsWait(0x00000010U, osFlagsWaitAny, osWaitForever);

					// empty queue
					osMessageQueueReset(interProcessorMsgQueueHandle);
 8003e3a:	4b0c      	ldr	r3, [pc, #48]	; (8003e6c <InterProcessorTask+0x210>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f00b f848 	bl	800eed4 <osMessageQueueReset>

					break;
 8003e44:	e000      	b.n	8003e48 <InterProcessorTask+0x1ec>
					if( (evt & 0x00000002U) == 0x00000002U ) break;
 8003e46:	bf00      	nop
		evt = osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 8003e48:	e726      	b.n	8003c98 <InterProcessorTask+0x3c>
 8003e4a:	bf00      	nop
 8003e4c:	200278a4 	.word	0x200278a4
 8003e50:	0801774c 	.word	0x0801774c
 8003e54:	20027e9c 	.word	0x20027e9c
 8003e58:	20028308 	.word	0x20028308
 8003e5c:	200277ac 	.word	0x200277ac
 8003e60:	200282b0 	.word	0x200282b0
 8003e64:	20028310 	.word	0x20028310
 8003e68:	20028318 	.word	0x20028318
 8003e6c:	200278b0 	.word	0x200278b0

08003e70 <HAL_I2C_MasterTxCpltCallback>:
//	osThreadFlagsSet(interProcessorTaskHandle, 0x00000008U);
//}

volatile uint8_t test_1 = 0;
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b082      	sub	sp, #8
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
	// notify sending thread that message has been sent
//	osThreadFlagsSet(sendMsgToMainTaskHandle, 0x00000001U);
	osThreadFlagsSet(interProcTaskHandle, 0x00000010U);
 8003e78:	4b06      	ldr	r3, [pc, #24]	; (8003e94 <HAL_I2C_MasterTxCpltCallback+0x24>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2110      	movs	r1, #16
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f00a f980 	bl	800e184 <osThreadFlagsSet>
	test_1 = 1;
 8003e84:	4b04      	ldr	r3, [pc, #16]	; (8003e98 <HAL_I2C_MasterTxCpltCallback+0x28>)
 8003e86:	2201      	movs	r2, #1
 8003e88:	701a      	strb	r2, [r3, #0]
}
 8003e8a:	bf00      	nop
 8003e8c:	3708      	adds	r7, #8
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	20027ce4 	.word	0x20027ce4
 8003e98:	20000acb 	.word	0x20000acb

08003e9c <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
	// notify receiving thread that a message has been received
	osThreadFlagsSet(interProcTaskHandle, 0x00000008U);
 8003ea4:	4b04      	ldr	r3, [pc, #16]	; (8003eb8 <HAL_I2C_MasterRxCpltCallback+0x1c>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2108      	movs	r1, #8
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f00a f96a 	bl	800e184 <osThreadFlagsSet>
}
 8003eb0:	bf00      	nop
 8003eb2:	3708      	adds	r7, #8
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	20027ce4 	.word	0x20027ce4

08003ebc <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	af00      	add	r7, sp, #0

  hiwdg.Instance = IWDG;
 8003ec0:	4b0b      	ldr	r3, [pc, #44]	; (8003ef0 <MX_IWDG_Init+0x34>)
 8003ec2:	4a0c      	ldr	r2, [pc, #48]	; (8003ef4 <MX_IWDG_Init+0x38>)
 8003ec4:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8003ec6:	4b0a      	ldr	r3, [pc, #40]	; (8003ef0 <MX_IWDG_Init+0x34>)
 8003ec8:	2204      	movs	r2, #4
 8003eca:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8003ecc:	4b08      	ldr	r3, [pc, #32]	; (8003ef0 <MX_IWDG_Init+0x34>)
 8003ece:	f640 72ff 	movw	r2, #4095	; 0xfff
 8003ed2:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8003ed4:	4b06      	ldr	r3, [pc, #24]	; (8003ef0 <MX_IWDG_Init+0x34>)
 8003ed6:	f640 72ff 	movw	r2, #4095	; 0xfff
 8003eda:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8003edc:	4804      	ldr	r0, [pc, #16]	; (8003ef0 <MX_IWDG_Init+0x34>)
 8003ede:	f006 fbe9 	bl	800a6b4 <HAL_IWDG_Init>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d001      	beq.n	8003eec <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8003ee8:	f000 fa26 	bl	8004338 <Error_Handler>
  }

}
 8003eec:	bf00      	nop
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	20028328 	.word	0x20028328
 8003ef4:	40003000 	.word	0x40003000

08003ef8 <setup_LP5523>:
const uint8_t packet_array[9] = {LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN};
uint8_t deviceAddress;
uint8_t led_PWM[9] = {0};
uint8_t packet;

void setup_LP5523(uint8_t ADDR){
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b086      	sub	sp, #24
 8003efc:	af04      	add	r7, sp, #16
 8003efe:	4603      	mov	r3, r0
 8003f00:	71fb      	strb	r3, [r7, #7]

#ifndef DONGLE_CODE
	deviceAddress = ADDR << 1;
 8003f02:	79fb      	ldrb	r3, [r7, #7]
 8003f04:	005b      	lsls	r3, r3, #1
 8003f06:	b2da      	uxtb	r2, r3
 8003f08:	4b2e      	ldr	r3, [pc, #184]	; (8003fc4 <setup_LP5523+0xcc>)
 8003f0a:	701a      	strb	r2, [r3, #0]

	// enable chip
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003f0c:	4b2e      	ldr	r3, [pc, #184]	; (8003fc8 <setup_LP5523+0xd0>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f04f 31ff 	mov.w	r1, #4294967295
 8003f14:	4618      	mov	r0, r3
 8003f16:	f00a fdb3 	bl	800ea80 <osSemaphoreAcquire>
	packet = LP5525_CHIP_EN;
 8003f1a:	4b2c      	ldr	r3, [pc, #176]	; (8003fcc <setup_LP5523+0xd4>)
 8003f1c:	2240      	movs	r2, #64	; 0x40
 8003f1e:	701a      	strb	r2, [r3, #0]
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_EN_CNTRL1_REG, 1, &packet, 1, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_EN_CNTRL1_REG, 1, &packet, 1, I2C_TIMEOUT);
 8003f20:	4b28      	ldr	r3, [pc, #160]	; (8003fc4 <setup_LP5523+0xcc>)
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	b299      	uxth	r1, r3
 8003f26:	2364      	movs	r3, #100	; 0x64
 8003f28:	9302      	str	r3, [sp, #8]
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	9301      	str	r3, [sp, #4]
 8003f2e:	4b27      	ldr	r3, [pc, #156]	; (8003fcc <setup_LP5523+0xd4>)
 8003f30:	9300      	str	r3, [sp, #0]
 8003f32:	2301      	movs	r3, #1
 8003f34:	2200      	movs	r2, #0
 8003f36:	4826      	ldr	r0, [pc, #152]	; (8003fd0 <setup_LP5523+0xd8>)
 8003f38:	f004 ff0e 	bl	8008d58 <HAL_I2C_Mem_Write>

	// put charge-pump in auto-mode, serial auto increment, internal clock
	packet = CP_MODE_AUTO | EN_AUTO_INC | INT_CLK_EN;
 8003f3c:	4b23      	ldr	r3, [pc, #140]	; (8003fcc <setup_LP5523+0xd4>)
 8003f3e:	224f      	movs	r2, #79	; 0x4f
 8003f40:	701a      	strb	r2, [r3, #0]
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_MISC_REG, 1, &packet, 1, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_MISC_REG, 1, &packet, 1, I2C_TIMEOUT);
 8003f42:	4b20      	ldr	r3, [pc, #128]	; (8003fc4 <setup_LP5523+0xcc>)
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	b299      	uxth	r1, r3
 8003f48:	2364      	movs	r3, #100	; 0x64
 8003f4a:	9302      	str	r3, [sp, #8]
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	9301      	str	r3, [sp, #4]
 8003f50:	4b1e      	ldr	r3, [pc, #120]	; (8003fcc <setup_LP5523+0xd4>)
 8003f52:	9300      	str	r3, [sp, #0]
 8003f54:	2301      	movs	r3, #1
 8003f56:	2236      	movs	r2, #54	; 0x36
 8003f58:	481d      	ldr	r0, [pc, #116]	; (8003fd0 <setup_LP5523+0xd8>)
 8003f5a:	f004 fefd 	bl	8008d58 <HAL_I2C_Mem_Write>

	// set PWM level (0 to 255)
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_PWM_REG, 1, led_PWM, 9, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_PWM_REG, 1, led_PWM, 9, I2C_TIMEOUT);
 8003f5e:	4b19      	ldr	r3, [pc, #100]	; (8003fc4 <setup_LP5523+0xcc>)
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	b299      	uxth	r1, r3
 8003f64:	2364      	movs	r3, #100	; 0x64
 8003f66:	9302      	str	r3, [sp, #8]
 8003f68:	2309      	movs	r3, #9
 8003f6a:	9301      	str	r3, [sp, #4]
 8003f6c:	4b19      	ldr	r3, [pc, #100]	; (8003fd4 <setup_LP5523+0xdc>)
 8003f6e:	9300      	str	r3, [sp, #0]
 8003f70:	2301      	movs	r3, #1
 8003f72:	2216      	movs	r2, #22
 8003f74:	4816      	ldr	r0, [pc, #88]	; (8003fd0 <setup_LP5523+0xd8>)
 8003f76:	f004 feef 	bl	8008d58 <HAL_I2C_Mem_Write>

	// set current control (0 to 25.5 mA) - step size is 100uA
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CURRENT_CTRL_REG, 1, led_current, 9, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CURRENT_CTRL_REG, 1, led_current, 9, I2C_TIMEOUT);
 8003f7a:	4b12      	ldr	r3, [pc, #72]	; (8003fc4 <setup_LP5523+0xcc>)
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	b299      	uxth	r1, r3
 8003f80:	2364      	movs	r3, #100	; 0x64
 8003f82:	9302      	str	r3, [sp, #8]
 8003f84:	2309      	movs	r3, #9
 8003f86:	9301      	str	r3, [sp, #4]
 8003f88:	4b13      	ldr	r3, [pc, #76]	; (8003fd8 <setup_LP5523+0xe0>)
 8003f8a:	9300      	str	r3, [sp, #0]
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	2226      	movs	r2, #38	; 0x26
 8003f90:	480f      	ldr	r0, [pc, #60]	; (8003fd0 <setup_LP5523+0xd8>)
 8003f92:	f004 fee1 	bl	8008d58 <HAL_I2C_Mem_Write>

	// enable logarithmic dimming
//	packet = LOG_EN;
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CNTRL_REG, 1, packet_array, 9, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CNTRL_REG, 1, packet_array, 9, I2C_TIMEOUT);
 8003f96:	4b0b      	ldr	r3, [pc, #44]	; (8003fc4 <setup_LP5523+0xcc>)
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	b299      	uxth	r1, r3
 8003f9c:	2364      	movs	r3, #100	; 0x64
 8003f9e:	9302      	str	r3, [sp, #8]
 8003fa0:	2309      	movs	r3, #9
 8003fa2:	9301      	str	r3, [sp, #4]
 8003fa4:	4b0d      	ldr	r3, [pc, #52]	; (8003fdc <setup_LP5523+0xe4>)
 8003fa6:	9300      	str	r3, [sp, #0]
 8003fa8:	2301      	movs	r3, #1
 8003faa:	2206      	movs	r2, #6
 8003fac:	4808      	ldr	r0, [pc, #32]	; (8003fd0 <setup_LP5523+0xd8>)
 8003fae:	f004 fed3 	bl	8008d58 <HAL_I2C_Mem_Write>

	osSemaphoreRelease(messageI2C_LockHandle);
 8003fb2:	4b05      	ldr	r3, [pc, #20]	; (8003fc8 <setup_LP5523+0xd0>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f00a fdc8 	bl	800eb4c <osSemaphoreRelease>
#else
	BSP_LED_Init(LED_BLUE);
	BSP_LED_Init(LED_GREEN);
	BSP_LED_Init(LED_RED);
#endif
}
 8003fbc:	bf00      	nop
 8003fbe:	3708      	adds	r7, #8
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	20028339 	.word	0x20028339
 8003fc8:	200278a4 	.word	0x200278a4
 8003fcc:	20028338 	.word	0x20028338
 8003fd0:	20027e9c 	.word	0x20027e9c
 8003fd4:	20000ae4 	.word	0x20000ae4
 8003fd8:	2000006c 	.word	0x2000006c
 8003fdc:	08017754 	.word	0x08017754

08003fe0 <FrontLightsSet>:
//
//  return true;
//}


void FrontLightsSet(union ColorComplex *setColors){
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b086      	sub	sp, #24
 8003fe4:	af04      	add	r7, sp, #16
 8003fe6:	6078      	str	r0, [r7, #4]

	memcpy(led_left_PWM, setColors, 9);
 8003fe8:	4b1b      	ldr	r3, [pc, #108]	; (8004058 <FrontLightsSet+0x78>)
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	6810      	ldr	r0, [r2, #0]
 8003fee:	6851      	ldr	r1, [r2, #4]
 8003ff0:	c303      	stmia	r3!, {r0, r1}
 8003ff2:	7a12      	ldrb	r2, [r2, #8]
 8003ff4:	701a      	strb	r2, [r3, #0]
	memcpy(led_right_PWM, &(setColors->color[9]), 9);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f103 0209 	add.w	r2, r3, #9
 8003ffc:	4b17      	ldr	r3, [pc, #92]	; (800405c <FrontLightsSet+0x7c>)
 8003ffe:	6810      	ldr	r0, [r2, #0]
 8004000:	6851      	ldr	r1, [r2, #4]
 8004002:	c303      	stmia	r3!, {r0, r1}
 8004004:	7a12      	ldrb	r2, [r2, #8]
 8004006:	701a      	strb	r2, [r3, #0]
#ifndef DONGLE_CODE
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8004008:	4b15      	ldr	r3, [pc, #84]	; (8004060 <FrontLightsSet+0x80>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f04f 31ff 	mov.w	r1, #4294967295
 8004010:	4618      	mov	r0, r3
 8004012:	f00a fd35 	bl	800ea80 <osSemaphoreAcquire>
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_LEFT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_left_PWM, 9, I2C_TIMEOUT);
 8004016:	2364      	movs	r3, #100	; 0x64
 8004018:	9302      	str	r3, [sp, #8]
 800401a:	2309      	movs	r3, #9
 800401c:	9301      	str	r3, [sp, #4]
 800401e:	4b0e      	ldr	r3, [pc, #56]	; (8004058 <FrontLightsSet+0x78>)
 8004020:	9300      	str	r3, [sp, #0]
 8004022:	2301      	movs	r3, #1
 8004024:	2216      	movs	r2, #22
 8004026:	2168      	movs	r1, #104	; 0x68
 8004028:	480e      	ldr	r0, [pc, #56]	; (8004064 <FrontLightsSet+0x84>)
 800402a:	f004 fe95 	bl	8008d58 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_RIGHT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_right_PWM, 9, I2C_TIMEOUT);
 800402e:	2364      	movs	r3, #100	; 0x64
 8004030:	9302      	str	r3, [sp, #8]
 8004032:	2309      	movs	r3, #9
 8004034:	9301      	str	r3, [sp, #4]
 8004036:	4b09      	ldr	r3, [pc, #36]	; (800405c <FrontLightsSet+0x7c>)
 8004038:	9300      	str	r3, [sp, #0]
 800403a:	2301      	movs	r3, #1
 800403c:	2216      	movs	r2, #22
 800403e:	216a      	movs	r1, #106	; 0x6a
 8004040:	4808      	ldr	r0, [pc, #32]	; (8004064 <FrontLightsSet+0x84>)
 8004042:	f004 fe89 	bl	8008d58 <HAL_I2C_Mem_Write>
	osSemaphoreRelease(messageI2C_LockHandle);
 8004046:	4b06      	ldr	r3, [pc, #24]	; (8004060 <FrontLightsSet+0x80>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4618      	mov	r0, r3
 800404c:	f00a fd7e 	bl	800eb4c <osSemaphoreRelease>
	    	else
	    	{
	    		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
	    	}
#endif
}
 8004050:	bf00      	nop
 8004052:	3708      	adds	r7, #8
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}
 8004058:	20000acc 	.word	0x20000acc
 800405c:	20000ad8 	.word	0x20000ad8
 8004060:	200278a4 	.word	0x200278a4
 8004064:	20027e9c 	.word	0x20027e9c

08004068 <ThreadFrontLightsTask>:
    };

struct test_color tempComplexLight;

void ThreadFrontLightsTask(void *argument)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b08a      	sub	sp, #40	; 0x28
 800406c:	af04      	add	r7, sp, #16
 800406e:	6078      	str	r0, [r7, #4]

//	osDelay(1); // added delay because it seems that semaphores arent fully initialized and code stalls when releasing semaphore
//#ifndef DONGLE_CODE
	setup_LP5523(LIS3DH_LEFT_ADDRESS);
 8004070:	2034      	movs	r0, #52	; 0x34
 8004072:	f7ff ff41 	bl	8003ef8 <setup_LP5523>
	setup_LP5523(LIS3DH_RIGHT_ADDRESS);
 8004076:	2035      	movs	r0, #53	; 0x35
 8004078:	f7ff ff3e 	bl	8003ef8 <setup_LP5523>

	uint32_t lightsSimpleMessageReceived;

	while(1){

		lightsSimpleMessageReceived = 0;
 800407c:	2300      	movs	r3, #0
 800407e:	60fb      	str	r3, [r7, #12]
//		tempComplexLight.right_side_r = 150;
//		tempComplexLight.right_top_r = 150;
//
//		FrontLightsSet(&tempComplexLight);

		osDelay(1);
 8004080:	2001      	movs	r0, #1
 8004082:	f00a f9c5 	bl	800e410 <osDelay>

		osMessageQueueGet(lightsSimpleQueueHandle, &lightsSimpleMessageReceived, 0U, osWaitForever);
 8004086:	4b2f      	ldr	r3, [pc, #188]	; (8004144 <ThreadFrontLightsTask+0xdc>)
 8004088:	6818      	ldr	r0, [r3, #0]
 800408a:	f107 010c 	add.w	r1, r7, #12
 800408e:	f04f 33ff 	mov.w	r3, #4294967295
 8004092:	2200      	movs	r2, #0
 8004094:	f00a feac 	bl	800edf0 <osMessageQueueGet>

		for(int i = 0; i<= 8; i++){
 8004098:	2300      	movs	r3, #0
 800409a:	617b      	str	r3, [r7, #20]
 800409c:	e011      	b.n	80040c2 <ThreadFrontLightsTask+0x5a>
			led_left_PWM[i] = (lightsSimpleMessageReceived & 0x01) * 255;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	425b      	negs	r3, r3
 80040aa:	b2d9      	uxtb	r1, r3
 80040ac:	4a26      	ldr	r2, [pc, #152]	; (8004148 <ThreadFrontLightsTask+0xe0>)
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	4413      	add	r3, r2
 80040b2:	460a      	mov	r2, r1
 80040b4:	701a      	strb	r2, [r3, #0]
			lightsSimpleMessageReceived = lightsSimpleMessageReceived >> 1;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	085b      	lsrs	r3, r3, #1
 80040ba:	60fb      	str	r3, [r7, #12]
		for(int i = 0; i<= 8; i++){
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	3301      	adds	r3, #1
 80040c0:	617b      	str	r3, [r7, #20]
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	2b08      	cmp	r3, #8
 80040c6:	ddea      	ble.n	800409e <ThreadFrontLightsTask+0x36>
		}

		for(int i = 0; i<= 8; i++){
 80040c8:	2300      	movs	r3, #0
 80040ca:	613b      	str	r3, [r7, #16]
 80040cc:	e011      	b.n	80040f2 <ThreadFrontLightsTask+0x8a>
			led_right_PWM[i] = (lightsSimpleMessageReceived & 0x01) * 255;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	425b      	negs	r3, r3
 80040da:	b2d9      	uxtb	r1, r3
 80040dc:	4a1b      	ldr	r2, [pc, #108]	; (800414c <ThreadFrontLightsTask+0xe4>)
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	4413      	add	r3, r2
 80040e2:	460a      	mov	r2, r1
 80040e4:	701a      	strb	r2, [r3, #0]
			lightsSimpleMessageReceived = lightsSimpleMessageReceived >> 1;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	085b      	lsrs	r3, r3, #1
 80040ea:	60fb      	str	r3, [r7, #12]
		for(int i = 0; i<= 8; i++){
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	3301      	adds	r3, #1
 80040f0:	613b      	str	r3, [r7, #16]
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	2b08      	cmp	r3, #8
 80040f6:	ddea      	ble.n	80040ce <ThreadFrontLightsTask+0x66>
		}

		osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 80040f8:	4b15      	ldr	r3, [pc, #84]	; (8004150 <ThreadFrontLightsTask+0xe8>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f04f 31ff 	mov.w	r1, #4294967295
 8004100:	4618      	mov	r0, r3
 8004102:	f00a fcbd 	bl	800ea80 <osSemaphoreAcquire>
		HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_LEFT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_left_PWM, 9, I2C_TIMEOUT);
 8004106:	2364      	movs	r3, #100	; 0x64
 8004108:	9302      	str	r3, [sp, #8]
 800410a:	2309      	movs	r3, #9
 800410c:	9301      	str	r3, [sp, #4]
 800410e:	4b0e      	ldr	r3, [pc, #56]	; (8004148 <ThreadFrontLightsTask+0xe0>)
 8004110:	9300      	str	r3, [sp, #0]
 8004112:	2301      	movs	r3, #1
 8004114:	2216      	movs	r2, #22
 8004116:	2168      	movs	r1, #104	; 0x68
 8004118:	480e      	ldr	r0, [pc, #56]	; (8004154 <ThreadFrontLightsTask+0xec>)
 800411a:	f004 fe1d 	bl	8008d58 <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_RIGHT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_right_PWM, 9, I2C_TIMEOUT);
 800411e:	2364      	movs	r3, #100	; 0x64
 8004120:	9302      	str	r3, [sp, #8]
 8004122:	2309      	movs	r3, #9
 8004124:	9301      	str	r3, [sp, #4]
 8004126:	4b09      	ldr	r3, [pc, #36]	; (800414c <ThreadFrontLightsTask+0xe4>)
 8004128:	9300      	str	r3, [sp, #0]
 800412a:	2301      	movs	r3, #1
 800412c:	2216      	movs	r2, #22
 800412e:	216a      	movs	r1, #106	; 0x6a
 8004130:	4808      	ldr	r0, [pc, #32]	; (8004154 <ThreadFrontLightsTask+0xec>)
 8004132:	f004 fe11 	bl	8008d58 <HAL_I2C_Mem_Write>
		osSemaphoreRelease(messageI2C_LockHandle);
 8004136:	4b06      	ldr	r3, [pc, #24]	; (8004150 <ThreadFrontLightsTask+0xe8>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4618      	mov	r0, r3
 800413c:	f00a fd06 	bl	800eb4c <osSemaphoreRelease>
		lightsSimpleMessageReceived = 0;
 8004140:	e79c      	b.n	800407c <ThreadFrontLightsTask+0x14>
 8004142:	bf00      	nop
 8004144:	200278ac 	.word	0x200278ac
 8004148:	20000acc 	.word	0x20000acc
 800414c:	20000ad8 	.word	0x20000ad8
 8004150:	200278a4 	.word	0x200278a4
 8004154:	20027e9c 	.word	0x20027e9c

08004158 <LL_RCC_LSE_SetDriveCapability>:
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8004160:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004168:	f023 0218 	bic.w	r2, r3, #24
 800416c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4313      	orrs	r3, r2
 8004174:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004178:	bf00      	nop
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004188:	f002 f870 	bl	800626c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800418c:	f000 f81e 	bl	80041cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004190:	f7fe fcb6 	bl	8002b00 <MX_GPIO_Init>
  MX_DMA_Init();
 8004194:	f7fd fc1b 	bl	80019ce <MX_DMA_Init>
  MX_ADC1_Init();
 8004198:	f7fc fe52 	bl	8000e40 <MX_ADC1_Init>
  MX_RTC_Init();
 800419c:	f000 fe7a 	bl	8004e94 <MX_RTC_Init>
  MX_TIM2_Init();
 80041a0:	f001 fad8 	bl	8005754 <MX_TIM2_Init>
  MX_RF_Init();
 80041a4:	f000 fe5e 	bl	8004e64 <MX_RF_Init>
  MX_I2C1_Init();
 80041a8:	f7ff fb48 	bl	800383c <MX_I2C1_Init>
  MX_COMP1_Init();
 80041ac:	f7fd fafc 	bl	80017a8 <MX_COMP1_Init>
  MX_TIM16_Init();
 80041b0:	f001 fb46 	bl	8005840 <MX_TIM16_Init>
  MX_IWDG_Init();
 80041b4:	f7ff fe82 	bl	8003ebc <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  MX_TSC_Init();
 80041b8:	f001 ff96 	bl	80060e8 <MX_TSC_Init>

//  HAL_IWDG_Refresh(&hiwdg);

  /* USER CODE END 2 */
  /* Init scheduler */
  osKernelInitialize();
 80041bc:	f009 fece 	bl	800df5c <osKernelInitialize>
 
  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 80041c0:	f7fd f86e 	bl	80012a0 <MX_FREERTOS_Init>
 
  /* Start scheduler */
  osKernelStart();
 80041c4:	f009 fefe 	bl	800dfc4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80041c8:	e7fe      	b.n	80041c8 <main+0x44>
	...

080041cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b0ae      	sub	sp, #184	; 0xb8
 80041d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80041d2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80041d6:	2248      	movs	r2, #72	; 0x48
 80041d8:	2100      	movs	r1, #0
 80041da:	4618      	mov	r0, r3
 80041dc:	f011 fe7f 	bl	8015ede <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80041e0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80041e4:	2200      	movs	r2, #0
 80041e6:	601a      	str	r2, [r3, #0]
 80041e8:	605a      	str	r2, [r3, #4]
 80041ea:	609a      	str	r2, [r3, #8]
 80041ec:	60da      	str	r2, [r3, #12]
 80041ee:	611a      	str	r2, [r3, #16]
 80041f0:	615a      	str	r2, [r3, #20]
 80041f2:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80041f4:	1d3b      	adds	r3, r7, #4
 80041f6:	2250      	movs	r2, #80	; 0x50
 80041f8:	2100      	movs	r1, #0
 80041fa:	4618      	mov	r0, r3
 80041fc:	f011 fe6f 	bl	8015ede <memset>

  /** Macro to configure the PLL multiplication factor 
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV2);
 8004200:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800420a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800420e:	f043 0310 	orr.w	r3, r3, #16
 8004212:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8004214:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800421e:	f043 0303 	orr.w	r3, r3, #3
 8004222:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability 
  */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8004224:	2000      	movs	r0, #0
 8004226:	f7ff ff97 	bl	8004158 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800422a:	4b39      	ldr	r3, [pc, #228]	; (8004310 <SystemClock_Config+0x144>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004232:	4a37      	ldr	r2, [pc, #220]	; (8004310 <SystemClock_Config+0x144>)
 8004234:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004238:	6013      	str	r3, [r2, #0]
 800423a:	4b35      	ldr	r3, [pc, #212]	; (8004310 <SystemClock_Config+0x144>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004242:	603b      	str	r3, [r7, #0]
 8004244:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 8004246:	230f      	movs	r3, #15
 8004248:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800424a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800424e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004250:	2301      	movs	r3, #1
 8004252:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004254:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004258:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800425a:	2340      	movs	r3, #64	; 0x40
 800425c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004260:	2305      	movs	r3, #5
 8004262:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004266:	2300      	movs	r3, #0
 8004268:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800426c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004270:	4618      	mov	r0, r3
 8004272:	f006 fe33 	bl	800aedc <HAL_RCC_OscConfig>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d001      	beq.n	8004280 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800427c:	f000 f85c 	bl	8004338 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8004280:	236f      	movs	r3, #111	; 0x6f
 8004282:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8004284:	2302      	movs	r3, #2
 8004286:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004288:	2300      	movs	r3, #0
 800428a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800428c:	2300      	movs	r3, #0
 800428e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004290:	2300      	movs	r3, #0
 8004292:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8004294:	2300      	movs	r3, #0
 8004296:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8004298:	2300      	movs	r3, #0
 800429a:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800429c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80042a0:	2101      	movs	r1, #1
 80042a2:	4618      	mov	r0, r3
 80042a4:	f007 f978 	bl	800b598 <HAL_RCC_ClockConfig>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d001      	beq.n	80042b2 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80042ae:	f000 f843 	bl	8004338 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 80042b2:	f643 4304 	movw	r3, #15364	; 0x3c04
 80042b6:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 80042b8:	2306      	movs	r3, #6
 80042ba:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80042bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042c0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80042c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042c6:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80042c8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80042cc:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADCCLK;
 80042ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80042d2:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80042d4:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80042d8:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80042da:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80042de:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80042e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80042e4:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSI;
 80042e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042ea:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 80042ec:	2302      	movs	r3, #2
 80042ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80042f0:	2300      	movs	r3, #0
 80042f2:	653b      	str	r3, [r7, #80]	; 0x50

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80042f4:	1d3b      	adds	r3, r7, #4
 80042f6:	4618      	mov	r0, r3
 80042f8:	f007 fda5 	bl	800be46 <HAL_RCCEx_PeriphCLKConfig>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d001      	beq.n	8004306 <SystemClock_Config+0x13a>
  {
    Error_Handler();
 8004302:	f000 f819 	bl	8004338 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8004306:	bf00      	nop
 8004308:	37b8      	adds	r7, #184	; 0xb8
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	58000400 	.word	0x58000400

08004314 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a04      	ldr	r2, [pc, #16]	; (8004334 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d101      	bne.n	800432a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004326:	f001 ffc1 	bl	80062ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800432a:	bf00      	nop
 800432c:	3708      	adds	r7, #8
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	40012c00 	.word	0x40012c00

08004338 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004338:	b480      	push	{r7}
 800433a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800433c:	bf00      	nop
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
	...

08004348 <MasterThreadTask>:

uint8_t logEnabled = 0;
//struct SystemStatus systemStatus = { 0 };
uint32_t startTime = 0;

void MasterThreadTask(void *argument) {
 8004348:	b590      	push	{r4, r7, lr}
 800434a:	b085      	sub	sp, #20
 800434c:	af02      	add	r7, sp, #8
 800434e:	6078      	str	r0, [r7, #4]

#ifndef DONGLE_CODE
	touchSensingStart();
 8004350:	f001 fc94 	bl	8005c7c <touchSensingStart>
#endif

	while (1) {
		// check if the queue has a new message (a command to start/stop logging)
		//   .... this function waits forever
		osMessageQueueGet(togLoggingQueueHandle, &togLogMessageReceived, 0U,
 8004354:	4b31      	ldr	r3, [pc, #196]	; (800441c <MasterThreadTask+0xd4>)
 8004356:	6818      	ldr	r0, [r3, #0]
 8004358:	f04f 33ff 	mov.w	r3, #4294967295
 800435c:	2200      	movs	r2, #0
 800435e:	4930      	ldr	r1, [pc, #192]	; (8004420 <MasterThreadTask+0xd8>)
 8004360:	f00a fd46 	bl	800edf0 <osMessageQueueGet>
#endif



		// pass variable to share system state
		osMessageQueueReset(statusQueueHandle);
 8004364:	4b2f      	ldr	r3, [pc, #188]	; (8004424 <MasterThreadTask+0xdc>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4618      	mov	r0, r3
 800436a:	f00a fdb3 	bl	800eed4 <osMessageQueueReset>
		osMessageQueuePut(statusQueueHandle, (void*) &nullStatusMessage, 0U, 0);
 800436e:	4b2d      	ldr	r3, [pc, #180]	; (8004424 <MasterThreadTask+0xdc>)
 8004370:	6818      	ldr	r0, [r3, #0]
 8004372:	2300      	movs	r3, #0
 8004374:	2200      	movs	r2, #0
 8004376:	492c      	ldr	r1, [pc, #176]	; (8004428 <MasterThreadTask+0xe0>)
 8004378:	f00a fcc6 	bl	800ed08 <osMessageQueuePut>

		// if the received command enables logging
		//    otherwise, skip if statement and wait for an enabling command
		if (togLogMessageReceived.logStatus == ENABLE_LOG) {
 800437c:	4b28      	ldr	r3, [pc, #160]	; (8004420 <MasterThreadTask+0xd8>)
 800437e:	785b      	ldrb	r3, [r3, #1]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d13c      	bne.n	80043fe <MasterThreadTask+0xb6>
			logEnabled = 1;
 8004384:	4b29      	ldr	r3, [pc, #164]	; (800442c <MasterThreadTask+0xe4>)
 8004386:	2201      	movs	r2, #1
 8004388:	701a      	strb	r2, [r3, #0]

			// keep record of this message so new message doesn't overwrite
			memcpy(&prevLogMessage, &togLogMessageReceived, sizeof(struct LogMessage));
 800438a:	4b29      	ldr	r3, [pc, #164]	; (8004430 <MasterThreadTask+0xe8>)
 800438c:	4a24      	ldr	r2, [pc, #144]	; (8004420 <MasterThreadTask+0xd8>)
 800438e:	6811      	ldr	r1, [r2, #0]
 8004390:	6019      	str	r1, [r3, #0]
 8004392:	8892      	ldrh	r2, [r2, #4]
 8004394:	809a      	strh	r2, [r3, #4]

			// start all sensor subsystems
			masterEnterRoutine();
 8004396:	f000 f8d7 	bl	8004548 <masterEnterRoutine>

			// add a delay to ensure all threads are given enough time to collect initial samples
			osDelay(500);
 800439a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800439e:	f00a f837 	bl	800e410 <osDelay>

			while (1) {
				startTime = HAL_GetTick();
 80043a2:	f001 ff95 	bl	80062d0 <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	4b22      	ldr	r3, [pc, #136]	; (8004434 <MasterThreadTask+0xec>)
 80043aa:	601a      	str	r2, [r3, #0]
				/**********************************************************************************/
				/*.... WAIT UNTIL DATA PACKET IS READY.....*/
				/**********************************************************************************/

				// grab data from sensor thread queues
				grabSensorData();
 80043ac:	f000 f84e 	bl	800444c <grabSensorData>

				// add all sensor data into a packet
				packetizeData(&sensorPacket, &blinkMsgReceived, &secondaryProcessorMsgReceived, &inertialMsgReceived,
 80043b0:	4b21      	ldr	r3, [pc, #132]	; (8004438 <MasterThreadTask+0xf0>)
 80043b2:	9300      	str	r3, [sp, #0]
 80043b4:	4b21      	ldr	r3, [pc, #132]	; (800443c <MasterThreadTask+0xf4>)
 80043b6:	4a22      	ldr	r2, [pc, #136]	; (8004440 <MasterThreadTask+0xf8>)
 80043b8:	4922      	ldr	r1, [pc, #136]	; (8004444 <MasterThreadTask+0xfc>)
 80043ba:	4823      	ldr	r0, [pc, #140]	; (8004448 <MasterThreadTask+0x100>)
 80043bc:	f000 f94a 	bl	8004654 <packetizeData>

				/**********************************************************************************/
				/*.... SEND PACKET TO BORDER ROUTER .....*/
				/**********************************************************************************/

				APP_THREAD_SendBorderPacket(&sensorPacket);
 80043c0:	4821      	ldr	r0, [pc, #132]	; (8004448 <MasterThreadTask+0x100>)
 80043c2:	f010 fa91 	bl	80148e8 <APP_THREAD_SendBorderPacket>
				/*.... CHECK IF NODE HAS BEEN REQUESTED TO STOP .....*/
				/**********************************************************************************/

				// check if the queue has a new message (potentially a command to stop logging)
				//   otherwise, timeout
				if (osMessageQueueGet(togLoggingQueueHandle, &togLogMessageReceived, 0U, 0) == osOK) {
 80043c6:	4b15      	ldr	r3, [pc, #84]	; (800441c <MasterThreadTask+0xd4>)
 80043c8:	6818      	ldr	r0, [r3, #0]
 80043ca:	2300      	movs	r3, #0
 80043cc:	2200      	movs	r2, #0
 80043ce:	4914      	ldr	r1, [pc, #80]	; (8004420 <MasterThreadTask+0xd8>)
 80043d0:	f00a fd0e 	bl	800edf0 <osMessageQueueGet>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d106      	bne.n	80043e8 <MasterThreadTask+0xa0>
					// disable threads
					if (togLogMessageReceived.status == DISABLE_SENSING) {
 80043da:	4b11      	ldr	r3, [pc, #68]	; (8004420 <MasterThreadTask+0xd8>)
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d102      	bne.n	80043e8 <MasterThreadTask+0xa0>

						masterExitRoutine();
 80043e2:	f000 f901 	bl	80045e8 <masterExitRoutine>

						// break out of first while loop and wait until told to start logging again
						break;
 80043e6:	e017      	b.n	8004418 <MasterThreadTask+0xd0>
					}
				}

				// add delay to wait for next transmission period
				osDelay(PACKET_SEND_PERIOD - (HAL_GetTick() - startTime));
 80043e8:	4b12      	ldr	r3, [pc, #72]	; (8004434 <MasterThreadTask+0xec>)
 80043ea:	681c      	ldr	r4, [r3, #0]
 80043ec:	f001 ff70 	bl	80062d0 <HAL_GetTick>
 80043f0:	4603      	mov	r3, r0
 80043f2:	1ae3      	subs	r3, r4, r3
 80043f4:	3364      	adds	r3, #100	; 0x64
 80043f6:	4618      	mov	r0, r3
 80043f8:	f00a f80a 	bl	800e410 <osDelay>
				startTime = HAL_GetTick();
 80043fc:	e7d1      	b.n	80043a2 <MasterThreadTask+0x5a>

			}
		} else if (logEnabled == 1 && togLogMessageReceived.logStatus == DISABLE_LOG) {
 80043fe:	4b0b      	ldr	r3, [pc, #44]	; (800442c <MasterThreadTask+0xe4>)
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	2b01      	cmp	r3, #1
 8004404:	d1a6      	bne.n	8004354 <MasterThreadTask+0xc>
 8004406:	4b06      	ldr	r3, [pc, #24]	; (8004420 <MasterThreadTask+0xd8>)
 8004408:	785b      	ldrb	r3, [r3, #1]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1a2      	bne.n	8004354 <MasterThreadTask+0xc>
			logEnabled = 0;
 800440e:	4b07      	ldr	r3, [pc, #28]	; (800442c <MasterThreadTask+0xe4>)
 8004410:	2200      	movs	r2, #0
 8004412:	701a      	strb	r2, [r3, #0]
			masterExitRoutine();
 8004414:	f000 f8e8 	bl	80045e8 <masterExitRoutine>
		osMessageQueueGet(togLoggingQueueHandle, &togLogMessageReceived, 0U,
 8004418:	e79c      	b.n	8004354 <MasterThreadTask+0xc>
 800441a:	bf00      	nop
 800441c:	20027cd8 	.word	0x20027cd8
 8004420:	200277ac 	.word	0x200277ac
 8004424:	200278b4 	.word	0x200278b4
 8004428:	08017760 	.word	0x08017760
 800442c:	20000aed 	.word	0x20000aed
 8004430:	20027884 	.word	0x20027884
 8004434:	20000af0 	.word	0x20000af0
 8004438:	200283bc 	.word	0x200283bc
 800443c:	200283d4 	.word	0x200283d4
 8004440:	20028410 	.word	0x20028410
 8004444:	20028350 	.word	0x20028350
 8004448:	200277b8 	.word	0x200277b8

0800444c <grabSensorData>:
		}

	}
}

void grabSensorData(void) {
 800444c:	b5b0      	push	{r4, r5, r7, lr}
 800444e:	af00      	add	r7, sp, #0
	if (prevLogMessage.blinkEnabled == SENSOR_ENABLE) {
 8004450:	4b30      	ldr	r3, [pc, #192]	; (8004514 <grabSensorData+0xc8>)
 8004452:	789b      	ldrb	r3, [r3, #2]
 8004454:	2b01      	cmp	r3, #1
 8004456:	d111      	bne.n	800447c <grabSensorData+0x30>
		if (osOK != osMessageQueueGet(blinkMsgQueueHandle, &blinkMsgReceived, 0U, 0)) {
 8004458:	4b2f      	ldr	r3, [pc, #188]	; (8004518 <grabSensorData+0xcc>)
 800445a:	6818      	ldr	r0, [r3, #0]
 800445c:	2300      	movs	r3, #0
 800445e:	2200      	movs	r2, #0
 8004460:	492e      	ldr	r1, [pc, #184]	; (800451c <grabSensorData+0xd0>)
 8004462:	f00a fcc5 	bl	800edf0 <osMessageQueueGet>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d007      	beq.n	800447c <grabSensorData+0x30>
			memcpy(&blinkMsgReceived, &nullBlinkMsg, sizeof(struct blinkData));
 800446c:	4a2b      	ldr	r2, [pc, #172]	; (800451c <grabSensorData+0xd0>)
 800446e:	4b2c      	ldr	r3, [pc, #176]	; (8004520 <grabSensorData+0xd4>)
 8004470:	4610      	mov	r0, r2
 8004472:	4619      	mov	r1, r3
 8004474:	236c      	movs	r3, #108	; 0x6c
 8004476:	461a      	mov	r2, r3
 8004478:	f011 fd26 	bl	8015ec8 <memcpy>
		}
	}

	if ((prevLogMessage.tempEnabled == SENSOR_ENABLE)) {
 800447c:	4b25      	ldr	r3, [pc, #148]	; (8004514 <grabSensorData+0xc8>)
 800447e:	78db      	ldrb	r3, [r3, #3]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d113      	bne.n	80044ac <grabSensorData+0x60>
		if (osOK != osMessageQueueGet(interProcessorMsgQueueHandle, &secondaryProcessorMsgReceived, 0U, 0)) {
 8004484:	4b27      	ldr	r3, [pc, #156]	; (8004524 <grabSensorData+0xd8>)
 8004486:	6818      	ldr	r0, [r3, #0]
 8004488:	2300      	movs	r3, #0
 800448a:	2200      	movs	r2, #0
 800448c:	4926      	ldr	r1, [pc, #152]	; (8004528 <grabSensorData+0xdc>)
 800448e:	f00a fcaf 	bl	800edf0 <osMessageQueueGet>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d009      	beq.n	80044ac <grabSensorData+0x60>
			memcpy(&secondaryProcessorMsgReceived, &nullSecondaryProcessorMsgReceived,
 8004498:	4a23      	ldr	r2, [pc, #140]	; (8004528 <grabSensorData+0xdc>)
 800449a:	4b24      	ldr	r3, [pc, #144]	; (800452c <grabSensorData+0xe0>)
 800449c:	4614      	mov	r4, r2
 800449e:	461d      	mov	r5, r3
 80044a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80044a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80044a4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80044a8:	e884 0003 	stmia.w	r4, {r0, r1}
					sizeof(struct parsedSecondaryProcessorPacket));
		}
	}

	if ((prevLogMessage.positionEnabled == SENSOR_ENABLE)) {
 80044ac:	4b19      	ldr	r3, [pc, #100]	; (8004514 <grabSensorData+0xc8>)
 80044ae:	795b      	ldrb	r3, [r3, #5]
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d113      	bne.n	80044dc <grabSensorData+0x90>
		if (osOK != osMessageQueueGet(viveQueueHandle, &vive_loc, 0U, 0)) {
 80044b4:	4b1e      	ldr	r3, [pc, #120]	; (8004530 <grabSensorData+0xe4>)
 80044b6:	6818      	ldr	r0, [r3, #0]
 80044b8:	2300      	movs	r3, #0
 80044ba:	2200      	movs	r2, #0
 80044bc:	491d      	ldr	r1, [pc, #116]	; (8004534 <grabSensorData+0xe8>)
 80044be:	f00a fc97 	bl	800edf0 <osMessageQueueGet>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d009      	beq.n	80044dc <grabSensorData+0x90>
			memcpy(&vive_loc, &nullViveMsgReceived, sizeof(VIVEVars));
 80044c8:	4a1a      	ldr	r2, [pc, #104]	; (8004534 <grabSensorData+0xe8>)
 80044ca:	4b1b      	ldr	r3, [pc, #108]	; (8004538 <grabSensorData+0xec>)
 80044cc:	4614      	mov	r4, r2
 80044ce:	461d      	mov	r5, r3
 80044d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80044d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80044d4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80044d8:	e884 0003 	stmia.w	r4, {r0, r1}
		}
	}

	if ((prevLogMessage.intertialEnabled == SENSOR_ENABLE)) {
 80044dc:	4b0d      	ldr	r3, [pc, #52]	; (8004514 <grabSensorData+0xc8>)
 80044de:	791b      	ldrb	r3, [r3, #4]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d115      	bne.n	8004510 <grabSensorData+0xc4>
		if (osOK != osMessageQueueGet(inertialSensingQueueHandle, &inertialMsgReceived, 0U, 0)) {
 80044e4:	4b15      	ldr	r3, [pc, #84]	; (800453c <grabSensorData+0xf0>)
 80044e6:	6818      	ldr	r0, [r3, #0]
 80044e8:	2300      	movs	r3, #0
 80044ea:	2200      	movs	r2, #0
 80044ec:	4914      	ldr	r1, [pc, #80]	; (8004540 <grabSensorData+0xf4>)
 80044ee:	f00a fc7f 	bl	800edf0 <osMessageQueueGet>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d00b      	beq.n	8004510 <grabSensorData+0xc4>
			memcpy(&inertialMsgReceived, &nullInertialMsgReceived, sizeof(struct inertialData));
 80044f8:	4a11      	ldr	r2, [pc, #68]	; (8004540 <grabSensorData+0xf4>)
 80044fa:	4b12      	ldr	r3, [pc, #72]	; (8004544 <grabSensorData+0xf8>)
 80044fc:	4614      	mov	r4, r2
 80044fe:	461d      	mov	r5, r3
 8004500:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004502:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004504:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004506:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004508:	e895 0003 	ldmia.w	r5, {r0, r1}
 800450c:	e884 0003 	stmia.w	r4, {r0, r1}
		}
	}
}
 8004510:	bf00      	nop
 8004512:	bdb0      	pop	{r4, r5, r7, pc}
 8004514:	20027884 	.word	0x20027884
 8004518:	20027cf4 	.word	0x20027cf4
 800451c:	20028350 	.word	0x20028350
 8004520:	08017768 	.word	0x08017768
 8004524:	200278b0 	.word	0x200278b0
 8004528:	20028410 	.word	0x20028410
 800452c:	080177d4 	.word	0x080177d4
 8004530:	200277a8 	.word	0x200277a8
 8004534:	200283bc 	.word	0x200283bc
 8004538:	08017814 	.word	0x08017814
 800453c:	200278a8 	.word	0x200278a8
 8004540:	200283d4 	.word	0x200283d4
 8004544:	080177ec 	.word	0x080177ec

08004548 <masterEnterRoutine>:

void masterEnterRoutine(void) {
 8004548:	b580      	push	{r7, lr}
 800454a:	af00      	add	r7, sp, #0
	if (prevLogMessage.blinkEnabled == SENSOR_ENABLE) {
 800454c:	4b1e      	ldr	r3, [pc, #120]	; (80045c8 <masterEnterRoutine+0x80>)
 800454e:	789b      	ldrb	r3, [r3, #2]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d105      	bne.n	8004560 <masterEnterRoutine+0x18>
		osThreadFlagsSet(blinkTaskHandle, 0x00000001U);
 8004554:	4b1d      	ldr	r3, [pc, #116]	; (80045cc <masterEnterRoutine+0x84>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2101      	movs	r1, #1
 800455a:	4618      	mov	r0, r3
 800455c:	f009 fe12 	bl	800e184 <osThreadFlagsSet>
	}

	if (togLogMessageReceived.positionEnabled == SENSOR_ENABLE) {
 8004560:	4b1b      	ldr	r3, [pc, #108]	; (80045d0 <masterEnterRoutine+0x88>)
 8004562:	795b      	ldrb	r3, [r3, #5]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d118      	bne.n	800459a <masterEnterRoutine+0x52>
		// update status queue to notify other threads position is active
		osMessageQueueGet(statusQueueHandle, &statusMessage, 0U, osWaitForever);
 8004568:	4b1a      	ldr	r3, [pc, #104]	; (80045d4 <masterEnterRoutine+0x8c>)
 800456a:	6818      	ldr	r0, [r3, #0]
 800456c:	f04f 33ff 	mov.w	r3, #4294967295
 8004570:	2200      	movs	r2, #0
 8004572:	4919      	ldr	r1, [pc, #100]	; (80045d8 <masterEnterRoutine+0x90>)
 8004574:	f00a fc3c 	bl	800edf0 <osMessageQueueGet>
		statusMessage.positionEnabled = 1;
 8004578:	4b17      	ldr	r3, [pc, #92]	; (80045d8 <masterEnterRoutine+0x90>)
 800457a:	2201      	movs	r2, #1
 800457c:	715a      	strb	r2, [r3, #5]
		osMessageQueuePut(statusQueueHandle, (void*) &statusMessage, 0U, 0);
 800457e:	4b15      	ldr	r3, [pc, #84]	; (80045d4 <masterEnterRoutine+0x8c>)
 8004580:	6818      	ldr	r0, [r3, #0]
 8004582:	2300      	movs	r3, #0
 8004584:	2200      	movs	r2, #0
 8004586:	4914      	ldr	r1, [pc, #80]	; (80045d8 <masterEnterRoutine+0x90>)
 8004588:	f00a fbbe 	bl	800ed08 <osMessageQueuePut>

		// start timer for 3D position sample to be taken
		osTimerStart(viveTimerHandle, VIVE_SAMPLE_PERIOD);
 800458c:	4b13      	ldr	r3, [pc, #76]	; (80045dc <masterEnterRoutine+0x94>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8004594:	4618      	mov	r0, r3
 8004596:	f00a f803 	bl	800e5a0 <osTimerStart>
	}

	if ((prevLogMessage.tempEnabled == SENSOR_ENABLE)) {
 800459a:	4b0b      	ldr	r3, [pc, #44]	; (80045c8 <masterEnterRoutine+0x80>)
 800459c:	78db      	ldrb	r3, [r3, #3]
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d105      	bne.n	80045ae <masterEnterRoutine+0x66>
		osThreadFlagsSet(interProcTaskHandle, 0x00000001U);
 80045a2:	4b0f      	ldr	r3, [pc, #60]	; (80045e0 <masterEnterRoutine+0x98>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2101      	movs	r1, #1
 80045a8:	4618      	mov	r0, r3
 80045aa:	f009 fdeb 	bl	800e184 <osThreadFlagsSet>
	}

	if ((prevLogMessage.intertialEnabled == SENSOR_ENABLE)) {
 80045ae:	4b06      	ldr	r3, [pc, #24]	; (80045c8 <masterEnterRoutine+0x80>)
 80045b0:	791b      	ldrb	r3, [r3, #4]
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d105      	bne.n	80045c2 <masterEnterRoutine+0x7a>
		osThreadFlagsSet(inertialTaskHandle, 0x00000001U);
 80045b6:	4b0b      	ldr	r3, [pc, #44]	; (80045e4 <masterEnterRoutine+0x9c>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	2101      	movs	r1, #1
 80045bc:	4618      	mov	r0, r3
 80045be:	f009 fde1 	bl	800e184 <osThreadFlagsSet>
	}
}
 80045c2:	bf00      	nop
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	20027884 	.word	0x20027884
 80045cc:	20027890 	.word	0x20027890
 80045d0:	200277ac 	.word	0x200277ac
 80045d4:	200278b4 	.word	0x200278b4
 80045d8:	20027d04 	.word	0x20027d04
 80045dc:	20027894 	.word	0x20027894
 80045e0:	20027ce4 	.word	0x20027ce4
 80045e4:	20027cfc 	.word	0x20027cfc

080045e8 <masterExitRoutine>:

void masterExitRoutine(void) {
 80045e8:	b580      	push	{r7, lr}
 80045ea:	af00      	add	r7, sp, #0
	if (prevLogMessage.blinkEnabled == SENSOR_ENABLE) {
 80045ec:	4b14      	ldr	r3, [pc, #80]	; (8004640 <masterExitRoutine+0x58>)
 80045ee:	789b      	ldrb	r3, [r3, #2]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d105      	bne.n	8004600 <masterExitRoutine+0x18>
		osThreadFlagsSet(blinkTaskHandle, 0x00000002U);
 80045f4:	4b13      	ldr	r3, [pc, #76]	; (8004644 <masterExitRoutine+0x5c>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2102      	movs	r1, #2
 80045fa:	4618      	mov	r0, r3
 80045fc:	f009 fdc2 	bl	800e184 <osThreadFlagsSet>
	}

	if (prevLogMessage.positionEnabled == SENSOR_ENABLE) {
 8004600:	4b0f      	ldr	r3, [pc, #60]	; (8004640 <masterExitRoutine+0x58>)
 8004602:	795b      	ldrb	r3, [r3, #5]
 8004604:	2b01      	cmp	r3, #1
 8004606:	d104      	bne.n	8004612 <masterExitRoutine+0x2a>
		// stop timer for 3D position sensing
		osTimerStop(viveTimerHandle);
 8004608:	4b0f      	ldr	r3, [pc, #60]	; (8004648 <masterExitRoutine+0x60>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4618      	mov	r0, r3
 800460e:	f00a f807 	bl	800e620 <osTimerStop>
	}

	if ((prevLogMessage.tempEnabled == SENSOR_ENABLE)) {
 8004612:	4b0b      	ldr	r3, [pc, #44]	; (8004640 <masterExitRoutine+0x58>)
 8004614:	78db      	ldrb	r3, [r3, #3]
 8004616:	2b01      	cmp	r3, #1
 8004618:	d105      	bne.n	8004626 <masterExitRoutine+0x3e>
		osThreadFlagsSet(interProcTaskHandle, 0x00000002U);
 800461a:	4b0c      	ldr	r3, [pc, #48]	; (800464c <masterExitRoutine+0x64>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2102      	movs	r1, #2
 8004620:	4618      	mov	r0, r3
 8004622:	f009 fdaf 	bl	800e184 <osThreadFlagsSet>
	}

	if ((prevLogMessage.intertialEnabled == SENSOR_ENABLE)) {
 8004626:	4b06      	ldr	r3, [pc, #24]	; (8004640 <masterExitRoutine+0x58>)
 8004628:	791b      	ldrb	r3, [r3, #4]
 800462a:	2b01      	cmp	r3, #1
 800462c:	d105      	bne.n	800463a <masterExitRoutine+0x52>
		osThreadFlagsSet(inertialTaskHandle, 0x00000002U);
 800462e:	4b08      	ldr	r3, [pc, #32]	; (8004650 <masterExitRoutine+0x68>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2102      	movs	r1, #2
 8004634:	4618      	mov	r0, r3
 8004636:	f009 fda5 	bl	800e184 <osThreadFlagsSet>
	}

}
 800463a:	bf00      	nop
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	20027884 	.word	0x20027884
 8004644:	20027890 	.word	0x20027890
 8004648:	20027894 	.word	0x20027894
 800464c:	20027ce4 	.word	0x20027ce4
 8004650:	20027cfc 	.word	0x20027cfc

08004654 <packetizeData>:



void packetizeData(struct LogPacket *packet, struct blinkData *blink,
		struct parsedSecondaryProcessorPacket *processorMsg, struct inertialData *inertialMsg, VIVEVars *posMsg) {
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]
 8004660:	603b      	str	r3, [r7, #0]
	// get processor tick counts (in terms of ms)
	packet->tick_ms = HAL_GetTick();
 8004662:	f001 fe35 	bl	80062d0 <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	// get epoch time from RTC
	HAL_RTC_GetTime(&hrtc, &RTC_time, RTC_FORMAT_BIN);
 800466e:	2200      	movs	r2, #0
 8004670:	4917      	ldr	r1, [pc, #92]	; (80046d0 <packetizeData+0x7c>)
 8004672:	4818      	ldr	r0, [pc, #96]	; (80046d4 <packetizeData+0x80>)
 8004674:	f007 ffcf 	bl	800c616 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &RTC_date, RTC_FORMAT_BIN);
 8004678:	2200      	movs	r2, #0
 800467a:	4917      	ldr	r1, [pc, #92]	; (80046d8 <packetizeData+0x84>)
 800467c:	4815      	ldr	r0, [pc, #84]	; (80046d4 <packetizeData+0x80>)
 800467e:	f008 f8d4 	bl	800c82a <HAL_RTC_GetDate>
	packet->epoch = RTC_ToEpoch(&RTC_time, &RTC_date);
 8004682:	4915      	ldr	r1, [pc, #84]	; (80046d8 <packetizeData+0x84>)
 8004684:	4812      	ldr	r0, [pc, #72]	; (80046d0 <packetizeData+0x7c>)
 8004686:	f000 fc35 	bl	8004ef4 <RTC_ToEpoch>
 800468a:	4602      	mov	r2, r0
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

	// add sensor data
	memcpy(&(packet->blink), blink, sizeof(struct blinkData));
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	226c      	movs	r2, #108	; 0x6c
 8004696:	68b9      	ldr	r1, [r7, #8]
 8004698:	4618      	mov	r0, r3
 800469a:	f011 fc15 	bl	8015ec8 <memcpy>
	memcpy(&(packet->procData), processorMsg, sizeof(struct parsedSecondaryProcessorPacket));
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	336c      	adds	r3, #108	; 0x6c
 80046a2:	2218      	movs	r2, #24
 80046a4:	6879      	ldr	r1, [r7, #4]
 80046a6:	4618      	mov	r0, r3
 80046a8:	f011 fc0e 	bl	8015ec8 <memcpy>
	memcpy(&(packet->inertial), inertialMsg, sizeof(struct inertialData));
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	3384      	adds	r3, #132	; 0x84
 80046b0:	2228      	movs	r2, #40	; 0x28
 80046b2:	6839      	ldr	r1, [r7, #0]
 80046b4:	4618      	mov	r0, r3
 80046b6:	f011 fc07 	bl	8015ec8 <memcpy>
	memcpy(&(packet->pos), posMsg, sizeof(struct VIVEVars));
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	33ac      	adds	r3, #172	; 0xac
 80046be:	2218      	movs	r2, #24
 80046c0:	69b9      	ldr	r1, [r7, #24]
 80046c2:	4618      	mov	r0, r3
 80046c4:	f011 fc00 	bl	8015ec8 <memcpy>
}
 80046c8:	bf00      	nop
 80046ca:	3710      	adds	r7, #16
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	200283fc 	.word	0x200283fc
 80046d4:	2002842c 	.word	0x2002842c
 80046d8:	20028428 	.word	0x20028428

080046dc <vector_push>:
	kCycleFixAcquired = 5,
	kCycleFixMax = 10
};

void vector_push(vector *self, Pulse *item)
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
    if (self->count < MAX_CAPACITY){
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046ea:	2b0f      	cmp	r3, #15
 80046ec:	d80f      	bhi.n	800470e <vector_push+0x32>
    	self->items[self->count++] = *item;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80046f2:	1c51      	adds	r1, r2, #1
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6619      	str	r1, [r3, #96]	; 0x60
 80046f8:	6879      	ldr	r1, [r7, #4]
 80046fa:	4613      	mov	r3, r2
 80046fc:	005b      	lsls	r3, r3, #1
 80046fe:	4413      	add	r3, r2
 8004700:	005b      	lsls	r3, r3, #1
 8004702:	440b      	add	r3, r1
 8004704:	683a      	ldr	r2, [r7, #0]
 8004706:	6811      	ldr	r1, [r2, #0]
 8004708:	6019      	str	r1, [r3, #0]
 800470a:	8892      	ldrh	r2, [r2, #4]
 800470c:	809a      	strh	r2, [r3, #4]
    }
}
 800470e:	bf00      	nop
 8004710:	370c      	adds	r7, #12
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr

0800471a <vector_pop>:

Pulse vector_pop(vector *self){
 800471a:	b480      	push	{r7}
 800471c:	b085      	sub	sp, #20
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
 8004722:	6039      	str	r1, [r7, #0]
	if(self->count > 0){
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004728:	2b00      	cmp	r3, #0
 800472a:	d01c      	beq.n	8004766 <vector_pop+0x4c>
		Pulse last = self->items[self->count - 1];
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004730:	1e5a      	subs	r2, r3, #1
 8004732:	6839      	ldr	r1, [r7, #0]
 8004734:	4613      	mov	r3, r2
 8004736:	005b      	lsls	r3, r3, #1
 8004738:	4413      	add	r3, r2
 800473a:	005b      	lsls	r3, r3, #1
 800473c:	18ca      	adds	r2, r1, r3
 800473e:	f107 0308 	add.w	r3, r7, #8
 8004742:	6810      	ldr	r0, [r2, #0]
 8004744:	6018      	str	r0, [r3, #0]
 8004746:	8892      	ldrh	r2, [r2, #4]
 8004748:	809a      	strh	r2, [r3, #4]
		self->count--;
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800474e:	1e5a      	subs	r2, r3, #1
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	661a      	str	r2, [r3, #96]	; 0x60
		return last;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	461a      	mov	r2, r3
 8004758:	f107 0308 	add.w	r3, r7, #8
 800475c:	6818      	ldr	r0, [r3, #0]
 800475e:	6010      	str	r0, [r2, #0]
 8004760:	889b      	ldrh	r3, [r3, #4]
 8004762:	8093      	strh	r3, [r2, #4]
 8004764:	e005      	b.n	8004772 <vector_pop+0x58>
	}
	return self->items[0];
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	683a      	ldr	r2, [r7, #0]
 800476a:	6810      	ldr	r0, [r2, #0]
 800476c:	6018      	str	r0, [r3, #0]
 800476e:	8892      	ldrh	r2, [r2, #4]
 8004770:	809a      	strh	r2, [r3, #4]
}
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	3714      	adds	r7, #20
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr

0800477e <vector_get>:

Pulse vector_get(vector *self, int index)
{
 800477e:	b480      	push	{r7}
 8004780:	b085      	sub	sp, #20
 8004782:	af00      	add	r7, sp, #0
 8004784:	60f8      	str	r0, [r7, #12]
 8004786:	60b9      	str	r1, [r7, #8]
 8004788:	607a      	str	r2, [r7, #4]
    if (index >= 0 && index < self->count){
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2b00      	cmp	r3, #0
 800478e:	db12      	blt.n	80047b6 <vector_get+0x38>
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	429a      	cmp	r2, r3
 8004798:	d90d      	bls.n	80047b6 <vector_get+0x38>
    	return self->items[index];
 800479a:	68f8      	ldr	r0, [r7, #12]
 800479c:	68b9      	ldr	r1, [r7, #8]
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	4613      	mov	r3, r2
 80047a2:	005b      	lsls	r3, r3, #1
 80047a4:	4413      	add	r3, r2
 80047a6:	005b      	lsls	r3, r3, #1
 80047a8:	18ca      	adds	r2, r1, r3
 80047aa:	4603      	mov	r3, r0
 80047ac:	6811      	ldr	r1, [r2, #0]
 80047ae:	6019      	str	r1, [r3, #0]
 80047b0:	8892      	ldrh	r2, [r2, #4]
 80047b2:	809a      	strh	r2, [r3, #4]
 80047b4:	e005      	b.n	80047c2 <vector_get+0x44>
    }
    return self->items[0];
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	68ba      	ldr	r2, [r7, #8]
 80047ba:	6810      	ldr	r0, [r2, #0]
 80047bc:	6018      	str	r0, [r3, #0]
 80047be:	8892      	ldrh	r2, [r2, #4]
 80047c0:	809a      	strh	r2, [r3, #4]
}
 80047c2:	68f8      	ldr	r0, [r7, #12]
 80047c4:	3714      	adds	r7, #20
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr

080047ce <vector_clear>:

void vector_clear(vector *self){
 80047ce:	b480      	push	{r7}
 80047d0:	b083      	sub	sp, #12
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
	self->count = 0;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	661a      	str	r2, [r3, #96]	; 0x60
}
 80047dc:	bf00      	nop
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <_PulseProcessor>:

void _PulseProcessor(PulseProcessor *self, uint32_t num_inputs){
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
	self->num_inputs_ = num_inputs;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	683a      	ldr	r2, [r7, #0]
 80047f6:	601a      	str	r2, [r3, #0]
	self->cycle_fix_level_ = 0;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	605a      	str	r2, [r3, #4]
	self->cycle_idx_ = 0;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	60da      	str	r2, [r3, #12]


	for(int i = 0; i < NUM_BASE_STATIONS; i++){
 8004804:	2300      	movs	r3, #0
 8004806:	60fb      	str	r3, [r7, #12]
 8004808:	e00c      	b.n	8004824 <_PulseProcessor+0x3c>
		vector_clear(&self->cycle_long_pulses_[i]);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2264      	movs	r2, #100	; 0x64
 800480e:	fb02 f303 	mul.w	r3, r2, r3
 8004812:	3310      	adds	r3, #16
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	4413      	add	r3, r2
 8004818:	4618      	mov	r0, r3
 800481a:	f7ff ffd8 	bl	80047ce <vector_clear>
	for(int i = 0; i < NUM_BASE_STATIONS; i++){
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	3301      	adds	r3, #1
 8004822:	60fb      	str	r3, [r7, #12]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2b01      	cmp	r3, #1
 8004828:	ddef      	ble.n	800480a <_PulseProcessor+0x22>
	}
	vector_clear(&self->cycle_short_pulses_);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	33d8      	adds	r3, #216	; 0xd8
 800482e:	4618      	mov	r0, r3
 8004830:	f7ff ffcd 	bl	80047ce <vector_clear>
	vector_clear(&self->unclassified_long_pulses_);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800483a:	4618      	mov	r0, r3
 800483c:	f7ff ffc7 	bl	80047ce <vector_clear>
	self->time_from_last_long_pulse_ = 0;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	f8a3 22c8 	strh.w	r2, [r3, #712]	; 0x2c8
}
 8004848:	bf00      	nop
 800484a:	3710      	adds	r7, #16
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}

08004850 <consume_pulse>:

uint8_t prev_pulse_short = 0;
void consume_pulse(PulseProcessor *self, Pulse* p){
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
	//vector_push(&debug_ar, p);
	if(p->pulse_len >= MAX_LONG_PULSE_LEN){
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	889b      	ldrh	r3, [r3, #4]
 800485e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8004862:	d303      	bcc.n	800486c <consume_pulse+0x1c>
		//Ignore very long pulses
		prev_pulse_short = 0;
 8004864:	4b0f      	ldr	r3, [pc, #60]	; (80048a4 <consume_pulse+0x54>)
 8004866:	2200      	movs	r2, #0
 8004868:	701a      	strb	r2, [r3, #0]
		if(prev_pulse_short != 1){ // check to make sure this isnt a duplicate pulse (if it is, ignore!)
			process_short_pulse(self, p);
			prev_pulse_short = 1;
		}
	}
}
 800486a:	e016      	b.n	800489a <consume_pulse+0x4a>
	else if(p->pulse_len >= MIN_LONG_PULSE_LEN){ // Long pulse - likely sync pulse
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	889b      	ldrh	r3, [r3, #4]
 8004870:	2b27      	cmp	r3, #39	; 0x27
 8004872:	d907      	bls.n	8004884 <consume_pulse+0x34>
		prev_pulse_short = 0;
 8004874:	4b0b      	ldr	r3, [pc, #44]	; (80048a4 <consume_pulse+0x54>)
 8004876:	2200      	movs	r2, #0
 8004878:	701a      	strb	r2, [r3, #0]
		process_long_pulse(self, p);
 800487a:	6839      	ldr	r1, [r7, #0]
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f000 f813 	bl	80048a8 <process_long_pulse>
}
 8004882:	e00a      	b.n	800489a <consume_pulse+0x4a>
		if(prev_pulse_short != 1){ // check to make sure this isnt a duplicate pulse (if it is, ignore!)
 8004884:	4b07      	ldr	r3, [pc, #28]	; (80048a4 <consume_pulse+0x54>)
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	2b01      	cmp	r3, #1
 800488a:	d006      	beq.n	800489a <consume_pulse+0x4a>
			process_short_pulse(self, p);
 800488c:	6839      	ldr	r1, [r7, #0]
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 f89c 	bl	80049cc <process_short_pulse>
			prev_pulse_short = 1;
 8004894:	4b03      	ldr	r3, [pc, #12]	; (80048a4 <consume_pulse+0x54>)
 8004896:	2201      	movs	r2, #1
 8004898:	701a      	strb	r2, [r3, #0]
}
 800489a:	bf00      	nop
 800489c:	3708      	adds	r7, #8
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	20000af4 	.word	0x20000af4

080048a8 <process_long_pulse>:

void process_long_pulse(PulseProcessor *self, Pulse* p){
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b088      	sub	sp, #32
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
	if(self->cycle_fix_level_ == kCycleFixNone){
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d144      	bne.n	8004944 <process_long_pulse+0x9c>
        // Bootstrap mode. We keep the previous long pulse in unclassified_long_pulses_ vector.
        // With this algorithm 2 base stations needed for a fix. We search for a situation where the last pulse was
        // second in last cycle, which means (8333-400) us difference in start time.
		if(self->unclassified_long_pulses_.count > 0){
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d03f      	beq.n	8004944 <process_long_pulse+0x9c>
			Pulse last_long_pulse = vector_pop(&self->unclassified_long_pulses_);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f503 729e 	add.w	r2, r3, #316	; 0x13c
 80048ca:	f107 0308 	add.w	r3, r7, #8
 80048ce:	4611      	mov	r1, r2
 80048d0:	4618      	mov	r0, r3
 80048d2:	f7ff ff22 	bl	800471a <vector_pop>

			self->time_from_last_long_pulse_ = p->start_time - last_long_pulse.start_time;
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	885a      	ldrh	r2, [r3, #2]
 80048da:	897b      	ldrh	r3, [r7, #10]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	b29a      	uxth	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f8a3 22c8 	strh.w	r2, [r3, #712]	; 0x2c8


			int delta = self->time_from_last_long_pulse_ - (CYCLE_PERIOD - long_pulse_starts[1]);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f8b3 32c8 	ldrh.w	r3, [r3, #712]	; 0x2c8
 80048ec:	461a      	mov	r2, r3
 80048ee:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 80048f2:	f5c3 5302 	rsb	r3, r3, #8320	; 0x2080
 80048f6:	330d      	adds	r3, #13
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	617b      	str	r3, [r7, #20]
			if(-LONG_PULSE_STARTS_ACCEPTED_RANGE <= delta && delta < LONG_PULSE_STARTS_ACCEPTED_RANGE){
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	f113 0f1e 	cmn.w	r3, #30
 8004902:	db1c      	blt.n	800493e <process_long_pulse+0x96>
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	2b1d      	cmp	r3, #29
 8004908:	dc19      	bgt.n	800493e <process_long_pulse+0x96>
                // Found candidate first pulse.
                self->cycle_fix_level_ = kCycleFixCandidate;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2201      	movs	r2, #1
 800490e:	605a      	str	r2, [r3, #4]
                self->cycle_start_time_ = p->start_time;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	885a      	ldrh	r2, [r3, #2]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	811a      	strh	r2, [r3, #8]
                self->cycle_idx_ = 0;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	60da      	str	r2, [r3, #12]

                reset(&self->phase_classifier_);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8004924:	4618      	mov	r0, r3
 8004926:	f7fd f81f 	bl	8001968 <reset>

                reset_cycle_long_pulses(self);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 fa64 	bl	8004df8 <reset_cycle_long_pulses>
                reset_unclassified_long_pulses(self);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 fa7c 	bl	8004e2e <reset_unclassified_long_pulses>
                reset_cycle_short_pulses(self);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 fa87 	bl	8004e4a <reset_cycle_short_pulses>
 800493c:	e002      	b.n	8004944 <process_long_pulse+0x9c>
            }
			else{
				reset_unclassified_long_pulses(self);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 fa75 	bl	8004e2e <reset_unclassified_long_pulses>
			}
		}
	}

    // Put the pulse into either one of two buckets, or keep it as unclassified.
    uint8_t pulse_classified = 0;
 8004944:	2300      	movs	r3, #0
 8004946:	77fb      	strb	r3, [r7, #31]
    if (self->cycle_fix_level_ >= kCycleFixCandidate) {
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d02d      	beq.n	80049ac <process_long_pulse+0x104>
        // Put pulse into one of two buckets by start time.
    	uint16_t time_from_cycle_start = p->start_time - self->cycle_start_time_;
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	885a      	ldrh	r2, [r3, #2]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	891b      	ldrh	r3, [r3, #8]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	827b      	strh	r3, [r7, #18]
        for (int i = 0; i < NUM_BASE_STATIONS; i++) {
 800495c:	2300      	movs	r3, #0
 800495e:	61bb      	str	r3, [r7, #24]
 8004960:	e021      	b.n	80049a6 <process_long_pulse+0xfe>
        	int16_t delta = time_from_cycle_start - long_pulse_starts[i];
 8004962:	4a19      	ldr	r2, [pc, #100]	; (80049c8 <process_long_pulse+0x120>)
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800496a:	8a7a      	ldrh	r2, [r7, #18]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	b29b      	uxth	r3, r3
 8004970:	823b      	strh	r3, [r7, #16]
        	if(-LONG_PULSE_STARTS_ACCEPTED_RANGE <= delta && delta < LONG_PULSE_STARTS_ACCEPTED_RANGE) {
 8004972:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004976:	f113 0f1e 	cmn.w	r3, #30
 800497a:	db11      	blt.n	80049a0 <process_long_pulse+0xf8>
 800497c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004980:	2b1d      	cmp	r3, #29
 8004982:	dc0d      	bgt.n	80049a0 <process_long_pulse+0xf8>
                vector_push(&self->cycle_long_pulses_[i], p);
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	2264      	movs	r2, #100	; 0x64
 8004988:	fb02 f303 	mul.w	r3, r2, r3
 800498c:	3310      	adds	r3, #16
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	4413      	add	r3, r2
 8004992:	6839      	ldr	r1, [r7, #0]
 8004994:	4618      	mov	r0, r3
 8004996:	f7ff fea1 	bl	80046dc <vector_push>
                pulse_classified = 1;
 800499a:	2301      	movs	r3, #1
 800499c:	77fb      	strb	r3, [r7, #31]
                break;
 800499e:	e005      	b.n	80049ac <process_long_pulse+0x104>
        for (int i = 0; i < NUM_BASE_STATIONS; i++) {
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	3301      	adds	r3, #1
 80049a4:	61bb      	str	r3, [r7, #24]
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	ddda      	ble.n	8004962 <process_long_pulse+0xba>
            }
        }
    }
    if (!pulse_classified){
 80049ac:	7ffb      	ldrb	r3, [r7, #31]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d106      	bne.n	80049c0 <process_long_pulse+0x118>
    	vector_push(&self->unclassified_long_pulses_, p);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80049b8:	6839      	ldr	r1, [r7, #0]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7ff fe8e 	bl	80046dc <vector_push>
    }
}
 80049c0:	bf00      	nop
 80049c2:	3720      	adds	r7, #32
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	0801782c 	.word	0x0801782c

080049cc <process_short_pulse>:

void process_short_pulse(PulseProcessor *self, Pulse *p){
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b082      	sub	sp, #8
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
	if (self->cycle_fix_level_ >= kCycleFixCandidate && p->input_idx < self->num_inputs_) {
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00f      	beq.n	80049fe <process_short_pulse+0x32>
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	461a      	mov	r2, r3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d208      	bcs.n	80049fe <process_short_pulse+0x32>
	    // TODO: Filter out pulses outside of current cycle.
		vector_push(&self->cycle_short_pulses_, p);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	33d8      	adds	r3, #216	; 0xd8
 80049f0:	6839      	ldr	r1, [r7, #0]
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7ff fe72 	bl	80046dc <vector_push>

		//We can process the cycle now
		process_cycle_fix(self);
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f000 f805 	bl	8004a08 <process_cycle_fix>
	}
}
 80049fe:	bf00      	nop
 8004a00:	3708      	adds	r7, #8
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
	...

08004a08 <process_cycle_fix>:

void process_cycle_fix(PulseProcessor *self) {
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b0a2      	sub	sp, #136	; 0x88
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
    int pulse_start_corrections[NUM_BASE_STATIONS] = {};
 8004a10:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004a14:	2200      	movs	r2, #0
 8004a16:	601a      	str	r2, [r3, #0]
 8004a18:	605a      	str	r2, [r3, #4]
    uint16_t pulse_lens[NUM_BASE_STATIONS] = {};
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	64fb      	str	r3, [r7, #76]	; 0x4c
    // Check if we have long pulses from at least one base station.
    if (self->cycle_long_pulses_[0].count > 0 || self->cycle_long_pulses_[1].count > 0) {
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d105      	bne.n	8004a32 <process_cycle_fix+0x2a>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	f000 80b7 	beq.w	8004ba0 <process_cycle_fix+0x198>
        // Increase fix level if we have pulses from both stations.
        if (self->cycle_fix_level_ < kCycleFixMax && self->cycle_long_pulses_[0].count > 0 && self->cycle_long_pulses_[1].count > 0){
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	2b09      	cmp	r3, #9
 8004a38:	d80d      	bhi.n	8004a56 <process_cycle_fix+0x4e>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d009      	beq.n	8004a56 <process_cycle_fix+0x4e>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d004      	beq.n	8004a56 <process_cycle_fix+0x4e>
        	self->cycle_fix_level_++;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	1c5a      	adds	r2, r3, #1
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	605a      	str	r2, [r3, #4]
        }

        // Average out long pulse lengths and start times for each base station across sensors.
        // pulse_start_corrections is the delta between actual start time and expected start time.
        // TODO: Take into account previous cycles as well, i.e. adjust slowly.
        for (int b = 0; b < NUM_BASE_STATIONS; b++){
 8004a56:	2300      	movs	r3, #0
 8004a58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a5c:	e090      	b.n	8004b80 <process_cycle_fix+0x178>
        	uint32_t num_pulses = self->cycle_long_pulses_[b].count;
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a64:	2164      	movs	r1, #100	; 0x64
 8004a66:	fb01 f303 	mul.w	r3, r1, r3
 8004a6a:	4413      	add	r3, r2
 8004a6c:	3370      	adds	r3, #112	; 0x70
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	677b      	str	r3, [r7, #116]	; 0x74
            if (num_pulses) {
 8004a72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d07e      	beq.n	8004b76 <process_cycle_fix+0x16e>
            	uint16_t expected_start_time = self->cycle_start_time_ + long_pulse_starts[b];
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	891a      	ldrh	r2, [r3, #8]
 8004a7c:	49c0      	ldr	r1, [pc, #768]	; (8004d80 <process_cycle_fix+0x378>)
 8004a7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a82:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004a86:	4413      	add	r3, r2
 8004a88:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
                for (uint32_t i = 0; i < num_pulses; i++) {
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a92:	e03e      	b.n	8004b12 <process_cycle_fix+0x10a>
                    const Pulse pulse = vector_get(&self->cycle_long_pulses_[b], i);
 8004a94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a98:	2264      	movs	r2, #100	; 0x64
 8004a9a:	fb02 f303 	mul.w	r3, r2, r3
 8004a9e:	3310      	adds	r3, #16
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	18d1      	adds	r1, r2, r3
 8004aa4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004aa8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004aac:	4618      	mov	r0, r3
 8004aae:	f7ff fe66 	bl	800477e <vector_get>
                    pulse_start_corrections[b] += pulse.start_time - expected_start_time;
 8004ab2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004abc:	4413      	add	r3, r2
 8004abe:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8004ac2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8004acc:	1acb      	subs	r3, r1, r3
 8004ace:	441a      	add	r2, r3
 8004ad0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004ada:	440b      	add	r3, r1
 8004adc:	f843 2c38 	str.w	r2, [r3, #-56]
                    pulse_lens[b] += pulse.pulse_len;
 8004ae0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ae4:	005b      	lsls	r3, r3, #1
 8004ae6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004aea:	4413      	add	r3, r2
 8004aec:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8004af0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004af4:	4413      	add	r3, r2
 8004af6:	b29a      	uxth	r2, r3
 8004af8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004afc:	005b      	lsls	r3, r3, #1
 8004afe:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004b02:	440b      	add	r3, r1
 8004b04:	f823 2c3c 	strh.w	r2, [r3, #-60]
                for (uint32_t i = 0; i < num_pulses; i++) {
 8004b08:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b12:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004b16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d3bb      	bcc.n	8004a94 <process_cycle_fix+0x8c>
                }
                if (num_pulses > 1) {
 8004b1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d929      	bls.n	8004b76 <process_cycle_fix+0x16e>
                    pulse_start_corrections[b] /= num_pulses;
 8004b22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004b2c:	4413      	add	r3, r2
 8004b2e:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8004b32:	461a      	mov	r2, r3
 8004b34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004b46:	440b      	add	r3, r1
 8004b48:	f843 2c38 	str.w	r2, [r3, #-56]
                    pulse_lens[b] /= num_pulses;
 8004b4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b50:	005b      	lsls	r3, r3, #1
 8004b52:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004b56:	4413      	add	r3, r2
 8004b58:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b64:	b29a      	uxth	r2, r3
 8004b66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b6a:	005b      	lsls	r3, r3, #1
 8004b6c:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004b70:	440b      	add	r3, r1
 8004b72:	f823 2c3c 	strh.w	r2, [r3, #-60]
        for (int b = 0; b < NUM_BASE_STATIONS; b++){
 8004b76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	f77f af6a 	ble.w	8004a5e <process_cycle_fix+0x56>
                }
            }
        }
        // Send pulse lengths to phase classifier.
        process_pulse_lengths(&self->phase_classifier_, self->cycle_idx_, pulse_lens);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f503 70d0 	add.w	r0, r3, #416	; 0x1a0
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8004b98:	4619      	mov	r1, r3
 8004b9a:	f7fc fe63 	bl	8001864 <process_pulse_lengths>
 8004b9e:	e008      	b.n	8004bb2 <process_cycle_fix+0x1aa>
    }
    else {
        // No long pulses this cycle. We can survive several of such cycles, but our confidence in timing sinks.
        //self->cycle_fix_level_--;
    	if(self->cycle_fix_level_ > 0){
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d004      	beq.n	8004bb2 <process_cycle_fix+0x1aa>
    		self->cycle_fix_level_--;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	1e5a      	subs	r2, r3, #1
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	605a      	str	r2, [r3, #4]
    	}
    }

    // Given the cycle phase, we can put the angle timings to a correct bucket.

    int cycle_phase = get_phase(&self->phase_classifier_, self->cycle_idx_);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f503 72d0 	add.w	r2, r3, #416	; 0x1a0
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	4610      	mov	r0, r2
 8004bc0:	f7fc feba 	bl	8001938 <get_phase>
 8004bc4:	66f8      	str	r0, [r7, #108]	; 0x6c
    if (cycle_phase >= 0) {
 8004bc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	f2c0 80b5 	blt.w	8004d38 <process_cycle_fix+0x330>
    	//UART_Print_int32_t(cycle_phase);
        // From (potentially several) short pulses for the same input, we choose the longest one.
        Pulse *short_pulses[MAX_NUM_INPUTS] = {};
 8004bce:	f107 030c 	add.w	r3, r7, #12
 8004bd2:	2220      	movs	r2, #32
 8004bd4:	2100      	movs	r1, #0
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f011 f981 	bl	8015ede <memset>
        uint16_t short_pulse_timings[MAX_NUM_INPUTS] = {};
 8004bdc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004be0:	2200      	movs	r2, #0
 8004be2:	601a      	str	r2, [r3, #0]
 8004be4:	605a      	str	r2, [r3, #4]
 8004be6:	609a      	str	r2, [r3, #8]
 8004be8:	60da      	str	r2, [r3, #12]

        //Base 0 is emitting during cycle phases 0 and 1. Base 1 is emitting during cycle phases 2 and 3.
        uint32_t emitting_base = cycle_phase >> 1;
 8004bea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bec:	105b      	asrs	r3, r3, #1
 8004bee:	66bb      	str	r3, [r7, #104]	; 0x68
        uint16_t base_pulse_start = self->cycle_start_time_ + long_pulse_starts[emitting_base] + pulse_start_corrections[emitting_base];
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	891a      	ldrh	r2, [r3, #8]
 8004bf4:	4962      	ldr	r1, [pc, #392]	; (8004d80 <process_cycle_fix+0x378>)
 8004bf6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004bf8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004c08:	440b      	add	r3, r1
 8004c0a:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	4413      	add	r3, r2
 8004c12:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
        for (uint32_t i = 0; i < self->cycle_short_pulses_.count; i++) {
 8004c16:	2300      	movs	r3, #0
 8004c18:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004c1a:	e04a      	b.n	8004cb2 <process_cycle_fix+0x2aa>
            Pulse p = vector_get(&self->cycle_short_pulses_, i);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f103 01d8 	add.w	r1, r3, #216	; 0xd8
 8004c22:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004c24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f7ff fda8 	bl	800477e <vector_get>
            uint32_t input_idx = p.input_idx;
 8004c2e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004c32:	65fb      	str	r3, [r7, #92]	; 0x5c

            // To get better precision, we calculate pulse timing based on the long pulse from the same base station.
            uint16_t pulse_timing = p.start_time + p.pulse_len / 2 - base_pulse_start;
 8004c34:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004c36:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004c38:	085b      	lsrs	r3, r3, #1
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	4413      	add	r3, r2
 8004c3e:	b29a      	uxth	r2, r3
 8004c40:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

            // Get longest laser pulse.
            if (SHORT_PULSE_MIN_TIME < pulse_timing && pulse_timing < SHORT_PULSE_MAX_TIME){
 8004c4a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004c4e:	f5b3 6f99 	cmp.w	r3, #1224	; 0x4c8
 8004c52:	d32b      	bcc.n	8004cac <process_cycle_fix+0x2a4>
 8004c54:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004c58:	f641 2278 	movw	r2, #6776	; 0x1a78
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d825      	bhi.n	8004cac <process_cycle_fix+0x2a4>
            	if (!short_pulses[input_idx] || short_pulses[input_idx]->pulse_len < p.pulse_len) {
 8004c60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004c68:	4413      	add	r3, r2
 8004c6a:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00a      	beq.n	8004c88 <process_cycle_fix+0x280>
 8004c72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004c7a:	4413      	add	r3, r2
 8004c7c:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8004c80:	889a      	ldrh	r2, [r3, #4]
 8004c82:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d211      	bcs.n	8004cac <process_cycle_fix+0x2a4>
					short_pulses[input_idx] = &p;
 8004c88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004c90:	4413      	add	r3, r2
 8004c92:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8004c96:	f843 2c7c 	str.w	r2, [r3, #-124]
					short_pulse_timings[input_idx] = pulse_timing;
 8004c9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c9c:	005b      	lsls	r3, r3, #1
 8004c9e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004ca2:	4413      	add	r3, r2
 8004ca4:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8004ca8:	f823 2c54 	strh.w	r2, [r3, #-84]
        for (uint32_t i = 0; i < self->cycle_short_pulses_.count; i++) {
 8004cac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004cae:	3301      	adds	r3, #1
 8004cb0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8004cb8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d3ae      	bcc.n	8004c1c <process_cycle_fix+0x214>
            	}
            }
        }

        // Calculate the angles for inputs where we saw short pulses.
        for (uint32_t i = 0; i < self->num_inputs_; i++){
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	67bb      	str	r3, [r7, #120]	; 0x78
 8004cc2:	e034      	b.n	8004d2e <process_cycle_fix+0x326>
            if (short_pulses[i]) {
 8004cc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004ccc:	4413      	add	r3, r2
 8004cce:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d028      	beq.n	8004d28 <process_cycle_fix+0x320>
                SensorAngles *angles = &self->angles_frame_.sensors[i];
 8004cd6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cd8:	015b      	lsls	r3, r3, #5
 8004cda:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	4413      	add	r3, r2
 8004ce2:	663b      	str	r3, [r7, #96]	; 0x60
                angles->angles[cycle_phase] = (float)M_PI * ((int)(short_pulse_timings[i] - ANGLE_CENTER_LEN)) / (float)CYCLE_PERIOD;
 8004ce4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ce6:	005b      	lsls	r3, r3, #1
 8004ce8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004cec:	4413      	add	r3, r2
 8004cee:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8004cf2:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8004cf6:	ee07 3a90 	vmov	s15, r3
 8004cfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cfe:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004d84 <process_cycle_fix+0x37c>
 8004d02:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004d06:	eddf 6a20 	vldr	s13, [pc, #128]	; 8004d88 <process_cycle_fix+0x380>
 8004d0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004d0e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004d10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	4413      	add	r3, r2
 8004d16:	edc3 7a00 	vstr	s15, [r3]
                angles->updated_cycles[cycle_phase] = self->cycle_idx_;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	68d9      	ldr	r1, [r3, #12]
 8004d1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d20:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004d22:	3204      	adds	r2, #4
 8004d24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (uint32_t i = 0; i < self->num_inputs_; i++){
 8004d28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d3c5      	bcc.n	8004cc4 <process_cycle_fix+0x2bc>
        }
    }

    // Send the data down the pipeline every 4th cycle (30Hz). Can be increased to 120Hz if needed.

    if ((cycle_phase >= 0) ? (cycle_phase == 3) : (self->cycle_idx_ % 4 == 0)) {
 8004d38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	db06      	blt.n	8004d4c <process_cycle_fix+0x344>
 8004d3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d40:	2b03      	cmp	r3, #3
 8004d42:	bf0c      	ite	eq
 8004d44:	2301      	moveq	r3, #1
 8004d46:	2300      	movne	r3, #0
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	e008      	b.n	8004d5e <process_cycle_fix+0x356>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	f003 0303 	and.w	r3, r3, #3
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	bf0c      	ite	eq
 8004d58:	2301      	moveq	r3, #1
 8004d5a:	2300      	movne	r3, #0
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d02b      	beq.n	8004dba <process_cycle_fix+0x3b2>
        self->angles_frame_.time = self->cycle_start_time_;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	891a      	ldrh	r2, [r3, #8]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
        self->angles_frame_.fix_level = (cycle_phase >= 0 && self->cycle_fix_level_ >= kCycleFixAcquired)
                                        ? kCycleSynced : kCycleSyncing;
 8004d6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	db0c      	blt.n	8004d8c <process_cycle_fix+0x384>
        self->angles_frame_.fix_level = (cycle_phase >= 0 && self->cycle_fix_level_ >= kCycleFixAcquired)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	2b04      	cmp	r3, #4
 8004d78:	d908      	bls.n	8004d8c <process_cycle_fix+0x384>
                                        ? kCycleSynced : kCycleSyncing;
 8004d7a:	22c8      	movs	r2, #200	; 0xc8
 8004d7c:	e007      	b.n	8004d8e <process_cycle_fix+0x386>
 8004d7e:	bf00      	nop
 8004d80:	0801782c 	.word	0x0801782c
 8004d84:	40490fdb 	.word	0x40490fdb
 8004d88:	46023400 	.word	0x46023400
 8004d8c:	2264      	movs	r2, #100	; 0x64
        self->angles_frame_.fix_level = (cycle_phase >= 0 && self->cycle_fix_level_ >= kCycleFixAcquired)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
        self->angles_frame_.cycle_idx = self->cycle_idx_;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	68da      	ldr	r2, [r3, #12]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
        self->angles_frame_.phase_id = cycle_phase;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004da2:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4

        //UART_Print_float(self->angles_frame_.sensors[0].angles[0]);
        consume_angles(self->next, &self->angles_frame_);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f8d3 22cc 	ldr.w	r2, [r3, #716]	; 0x2cc
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004db2:	4619      	mov	r1, r3
 8004db4:	4610      	mov	r0, r2
 8004db6:	f7fd fbfd 	bl	80025b4 <consume_angles>

    }

    // Prepare for the next cycle.
    reset_cycle_long_pulses(self);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f000 f81c 	bl	8004df8 <reset_cycle_long_pulses>
    reset_unclassified_long_pulses(self);
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f000 f834 	bl	8004e2e <reset_unclassified_long_pulses>
    reset_cycle_short_pulses(self);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 f83f 	bl	8004e4a <reset_cycle_short_pulses>

    self->cycle_start_time_ += CYCLE_PERIOD + pulse_start_corrections[0];
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	891a      	ldrh	r2, [r3, #8]
 8004dd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	4413      	add	r3, r2
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8004ddc:	330d      	adds	r3, #13
 8004dde:	b29a      	uxth	r2, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	811a      	strh	r2, [r3, #8]
    self->cycle_idx_++;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	1c5a      	adds	r2, r3, #1
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	60da      	str	r2, [r3, #12]
}
 8004dee:	bf00      	nop
 8004df0:	3788      	adds	r7, #136	; 0x88
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop

08004df8 <reset_cycle_long_pulses>:

void reset_cycle_long_pulses(PulseProcessor *self){
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < NUM_BASE_STATIONS; i++){
 8004e00:	2300      	movs	r3, #0
 8004e02:	60fb      	str	r3, [r7, #12]
 8004e04:	e00c      	b.n	8004e20 <reset_cycle_long_pulses+0x28>
	    vector_clear(&self->cycle_long_pulses_[i]);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2264      	movs	r2, #100	; 0x64
 8004e0a:	fb02 f303 	mul.w	r3, r2, r3
 8004e0e:	3310      	adds	r3, #16
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	4413      	add	r3, r2
 8004e14:	4618      	mov	r0, r3
 8004e16:	f7ff fcda 	bl	80047ce <vector_clear>
	for (int i = 0; i < NUM_BASE_STATIONS; i++){
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	60fb      	str	r3, [r7, #12]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	ddef      	ble.n	8004e06 <reset_cycle_long_pulses+0xe>
	}
}
 8004e26:	bf00      	nop
 8004e28:	3710      	adds	r7, #16
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <reset_unclassified_long_pulses>:

void reset_unclassified_long_pulses(PulseProcessor *self){
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b082      	sub	sp, #8
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
	vector_clear(&self->unclassified_long_pulses_);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f7ff fcc6 	bl	80047ce <vector_clear>
}
 8004e42:	bf00      	nop
 8004e44:	3708      	adds	r7, #8
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}

08004e4a <reset_cycle_short_pulses>:

void reset_cycle_short_pulses(PulseProcessor *self){
 8004e4a:	b580      	push	{r7, lr}
 8004e4c:	b082      	sub	sp, #8
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
	vector_clear(&self->cycle_short_pulses_);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	33d8      	adds	r3, #216	; 0xd8
 8004e56:	4618      	mov	r0, r3
 8004e58:	f7ff fcb9 	bl	80047ce <vector_clear>
}
 8004e5c:	bf00      	nop
 8004e5e:	3708      	adds	r7, #8
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 8004e64:	b480      	push	{r7}
 8004e66:	af00      	add	r7, sp, #0

}
 8004e68:	bf00      	nop
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr

08004e72 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8004e72:	b480      	push	{r7}
 8004e74:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8004e76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004e8a:	bf00      	nop
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	af00      	add	r7, sp, #0

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8004e98:	4b0b      	ldr	r3, [pc, #44]	; (8004ec8 <MX_RTC_Init+0x34>)
 8004e9a:	4a0c      	ldr	r2, [pc, #48]	; (8004ecc <MX_RTC_Init+0x38>)
 8004e9c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004e9e:	4b0a      	ldr	r3, [pc, #40]	; (8004ec8 <MX_RTC_Init+0x34>)
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8004ea4:	4b08      	ldr	r3, [pc, #32]	; (8004ec8 <MX_RTC_Init+0x34>)
 8004ea6:	220f      	movs	r2, #15
 8004ea8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8004eaa:	4b07      	ldr	r3, [pc, #28]	; (8004ec8 <MX_RTC_Init+0x34>)
 8004eac:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8004eb0:	60da      	str	r2, [r3, #12]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004eb2:	4805      	ldr	r0, [pc, #20]	; (8004ec8 <MX_RTC_Init+0x34>)
 8004eb4:	f007 fa4d 	bl	800c352 <HAL_RTC_Init>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d001      	beq.n	8004ec2 <MX_RTC_Init+0x2e>
  {
    Error_Handler();
 8004ebe:	f7ff fa3b 	bl	8004338 <Error_Handler>
  }

}
 8004ec2:	bf00      	nop
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	2002842c 	.word	0x2002842c
 8004ecc:	40002800 	.word	0x40002800

08004ed0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a04      	ldr	r2, [pc, #16]	; (8004ef0 <HAL_RTC_MspInit+0x20>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d101      	bne.n	8004ee6 <HAL_RTC_MspInit+0x16>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004ee2:	f7ff ffc6 	bl	8004e72 <LL_RCC_EnableRTC>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8004ee6:	bf00      	nop
 8004ee8:	3708      	adds	r7, #8
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	40002800 	.word	0x40002800

08004ef4 <RTC_ToEpoch>:
  }
} 

/* USER CODE BEGIN 1 */
// Convert Date/Time structures to epoch time
uint32_t RTC_ToEpoch(RTC_TimeTypeDef *time, RTC_DateTypeDef *date) {
 8004ef4:	b480      	push	{r7}
 8004ef6:	b087      	sub	sp, #28
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
	uint32_t JDN;

	// These hardcore math's are taken from http://en.wikipedia.org/wiki/Julian_day

	// Calculate some coefficients
	a = (14 - date->Month) / 12;
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	785b      	ldrb	r3, [r3, #1]
 8004f02:	f1c3 030e 	rsb	r3, r3, #14
 8004f06:	4a44      	ldr	r2, [pc, #272]	; (8005018 <RTC_ToEpoch+0x124>)
 8004f08:	fb82 1203 	smull	r1, r2, r2, r3
 8004f0c:	1052      	asrs	r2, r2, #1
 8004f0e:	17db      	asrs	r3, r3, #31
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	75fb      	strb	r3, [r7, #23]
	y = (date->Year + 2000) + 4800 - a; // years since 1 March, 4801 BC
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	78db      	ldrb	r3, [r3, #3]
 8004f18:	b29a      	uxth	r2, r3
 8004f1a:	7dfb      	ldrb	r3, [r7, #23]
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	f503 53d4 	add.w	r3, r3, #6784	; 0x1a80
 8004f26:	3310      	adds	r3, #16
 8004f28:	82bb      	strh	r3, [r7, #20]
	m = date->Month + (12 * a) - 3; // since 1 March, 4801 BC
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	785a      	ldrb	r2, [r3, #1]
 8004f2e:	7dfb      	ldrb	r3, [r7, #23]
 8004f30:	4619      	mov	r1, r3
 8004f32:	0049      	lsls	r1, r1, #1
 8004f34:	440b      	add	r3, r1
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	4413      	add	r3, r2
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	3b03      	subs	r3, #3
 8004f40:	74fb      	strb	r3, [r7, #19]

	// Gregorian calendar date compute
	JDN = date->Date;
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	789b      	ldrb	r3, [r3, #2]
 8004f46:	60fb      	str	r3, [r7, #12]
	JDN += (153 * m + 2) / 5;
 8004f48:	7cfa      	ldrb	r2, [r7, #19]
 8004f4a:	4613      	mov	r3, r2
 8004f4c:	00db      	lsls	r3, r3, #3
 8004f4e:	4413      	add	r3, r2
 8004f50:	011a      	lsls	r2, r3, #4
 8004f52:	4413      	add	r3, r2
 8004f54:	3302      	adds	r3, #2
 8004f56:	4a31      	ldr	r2, [pc, #196]	; (800501c <RTC_ToEpoch+0x128>)
 8004f58:	fb82 1203 	smull	r1, r2, r2, r3
 8004f5c:	1052      	asrs	r2, r2, #1
 8004f5e:	17db      	asrs	r3, r3, #31
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	461a      	mov	r2, r3
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	4413      	add	r3, r2
 8004f68:	60fb      	str	r3, [r7, #12]
	JDN += 365 * y;
 8004f6a:	8abb      	ldrh	r3, [r7, #20]
 8004f6c:	f240 126d 	movw	r2, #365	; 0x16d
 8004f70:	fb02 f303 	mul.w	r3, r2, r3
 8004f74:	461a      	mov	r2, r3
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	4413      	add	r3, r2
 8004f7a:	60fb      	str	r3, [r7, #12]
	JDN += y / 4;
 8004f7c:	8abb      	ldrh	r3, [r7, #20]
 8004f7e:	089b      	lsrs	r3, r3, #2
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	461a      	mov	r2, r3
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	4413      	add	r3, r2
 8004f88:	60fb      	str	r3, [r7, #12]
	JDN += -y / 100;
 8004f8a:	8abb      	ldrh	r3, [r7, #20]
 8004f8c:	425b      	negs	r3, r3
 8004f8e:	4a24      	ldr	r2, [pc, #144]	; (8005020 <RTC_ToEpoch+0x12c>)
 8004f90:	fb82 1203 	smull	r1, r2, r2, r3
 8004f94:	1152      	asrs	r2, r2, #5
 8004f96:	17db      	asrs	r3, r3, #31
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	60fb      	str	r3, [r7, #12]
	JDN += y / 400;
 8004fa2:	8abb      	ldrh	r3, [r7, #20]
 8004fa4:	4a1e      	ldr	r2, [pc, #120]	; (8005020 <RTC_ToEpoch+0x12c>)
 8004fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8004faa:	09db      	lsrs	r3, r3, #7
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	461a      	mov	r2, r3
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	60fb      	str	r3, [r7, #12]
	JDN = JDN - 32045;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f5a3 43fa 	sub.w	r3, r3, #32000	; 0x7d00
 8004fbc:	3b2d      	subs	r3, #45	; 0x2d
 8004fbe:	60fb      	str	r3, [r7, #12]
	JDN = JDN - JULIAN_DATE_BASE;    // Calculate from base date
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	4b18      	ldr	r3, [pc, #96]	; (8005024 <RTC_ToEpoch+0x130>)
 8004fc4:	4413      	add	r3, r2
 8004fc6:	60fb      	str	r3, [r7, #12]
	JDN *= 86400;                     // Days to seconds
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	4a17      	ldr	r2, [pc, #92]	; (8005028 <RTC_ToEpoch+0x134>)
 8004fcc:	fb02 f303 	mul.w	r3, r2, r3
 8004fd0:	60fb      	str	r3, [r7, #12]
	JDN += time->Hours * 3600;    // ... and today seconds
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004fdc:	fb03 f302 	mul.w	r3, r3, r2
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	4413      	add	r3, r2
 8004fe6:	60fb      	str	r3, [r7, #12]
	JDN += time->Minutes * 60;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	785b      	ldrb	r3, [r3, #1]
 8004fec:	461a      	mov	r2, r3
 8004fee:	4613      	mov	r3, r2
 8004ff0:	011b      	lsls	r3, r3, #4
 8004ff2:	1a9b      	subs	r3, r3, r2
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	60fb      	str	r3, [r7, #12]
	JDN += time->Seconds;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	789b      	ldrb	r3, [r3, #2]
 8005002:	461a      	mov	r2, r3
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	4413      	add	r3, r2
 8005008:	60fb      	str	r3, [r7, #12]

	return JDN;
 800500a:	68fb      	ldr	r3, [r7, #12]
}
 800500c:	4618      	mov	r0, r3
 800500e:	371c      	adds	r7, #28
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr
 8005018:	2aaaaaab 	.word	0x2aaaaaab
 800501c:	66666667 	.word	0x66666667
 8005020:	51eb851f 	.word	0x51eb851f
 8005024:	ffdac274 	.word	0xffdac274
 8005028:	00015180 	.word	0x00015180

0800502c <RTC_FromEpoch>:

//
//// Convert epoch time to Date/Time structures
void RTC_FromEpoch(uint32_t epoch, RTC_TimeTypeDef *time, RTC_DateTypeDef *date) {
 800502c:	b590      	push	{r4, r7, lr}
 800502e:	b095      	sub	sp, #84	; 0x54
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	607a      	str	r2, [r7, #4]
	uint32_t b;
	uint32_t c;
	uint32_t d;
	uint32_t e;
	uint32_t m;
	int16_t  year  = 0;
 8005038:	2300      	movs	r3, #0
 800503a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	int16_t  month = 0;
 800503e:	2300      	movs	r3, #0
 8005040:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	int16_t  dow   = 0;
 8005044:	2300      	movs	r3, #0
 8005046:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	int16_t  mday  = 0;
 800504a:	2300      	movs	r3, #0
 800504c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	int16_t  hour  = 0;
 8005050:	2300      	movs	r3, #0
 8005052:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	int16_t  min   = 0;
 8005056:	2300      	movs	r3, #0
 8005058:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	int16_t  sec   = 0;
 800505c:	2300      	movs	r3, #0
 800505e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	uint64_t JD    = 0;
 8005062:	f04f 0300 	mov.w	r3, #0
 8005066:	f04f 0400 	mov.w	r4, #0
 800506a:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	uint64_t JDN   = 0;
 800506e:	f04f 0300 	mov.w	r3, #0
 8005072:	f04f 0400 	mov.w	r4, #0
 8005076:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

	// These hardcore math's are taken from http://en.wikipedia.org/wiki/Julian_day

	JD  = ((epoch + 43200) / (86400 >>1 )) + (2440587 << 1) + 1;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f503 4328 	add.w	r3, r3, #43008	; 0xa800
 8005080:	33c0      	adds	r3, #192	; 0xc0
 8005082:	4a7c      	ldr	r2, [pc, #496]	; (8005274 <RTC_FromEpoch+0x248>)
 8005084:	fba2 2303 	umull	r2, r3, r2, r3
 8005088:	0bda      	lsrs	r2, r3, #15
 800508a:	4b7b      	ldr	r3, [pc, #492]	; (8005278 <RTC_FromEpoch+0x24c>)
 800508c:	4413      	add	r3, r2
 800508e:	f04f 0400 	mov.w	r4, #0
 8005092:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	JDN = JD >> 1;
 8005096:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800509a:	0864      	lsrs	r4, r4, #1
 800509c:	ea4f 0333 	mov.w	r3, r3, rrx
 80050a0:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    tm = epoch; t1 = tm / 60; sec  = tm - (t1 * 60);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050aa:	4a74      	ldr	r2, [pc, #464]	; (800527c <RTC_FromEpoch+0x250>)
 80050ac:	fba2 2303 	umull	r2, r3, r2, r3
 80050b0:	095b      	lsrs	r3, r3, #5
 80050b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80050b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b6:	b29a      	uxth	r2, r3
 80050b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	4619      	mov	r1, r3
 80050be:	0109      	lsls	r1, r1, #4
 80050c0:	1acb      	subs	r3, r1, r3
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    tm = t1;    t1 = tm / 60; min  = tm - (t1 * 60);
 80050ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d4:	4a69      	ldr	r2, [pc, #420]	; (800527c <RTC_FromEpoch+0x250>)
 80050d6:	fba2 2303 	umull	r2, r3, r2, r3
 80050da:	095b      	lsrs	r3, r3, #5
 80050dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80050de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e0:	b29a      	uxth	r2, r3
 80050e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	4619      	mov	r1, r3
 80050e8:	0109      	lsls	r1, r1, #4
 80050ea:	1acb      	subs	r3, r1, r3
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    tm = t1;    t1 = tm / 24; hour = tm - (t1 * 24);
 80050f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050fe:	4a60      	ldr	r2, [pc, #384]	; (8005280 <RTC_FromEpoch+0x254>)
 8005100:	fba2 2303 	umull	r2, r3, r2, r3
 8005104:	091b      	lsrs	r3, r3, #4
 8005106:	62bb      	str	r3, [r7, #40]	; 0x28
 8005108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800510a:	b29a      	uxth	r2, r3
 800510c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800510e:	b29b      	uxth	r3, r3
 8005110:	4619      	mov	r1, r3
 8005112:	0049      	lsls	r1, r1, #1
 8005114:	440b      	add	r3, r1
 8005116:	00db      	lsls	r3, r3, #3
 8005118:	b29b      	uxth	r3, r3
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	b29b      	uxth	r3, r3
 800511e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

    dow   = JDN % 7;
 8005122:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8005126:	f04f 0207 	mov.w	r2, #7
 800512a:	f04f 0300 	mov.w	r3, #0
 800512e:	f7fb fced 	bl	8000b0c <__aeabi_uldivmod>
 8005132:	461c      	mov	r4, r3
 8005134:	4613      	mov	r3, r2
 8005136:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    a     = JDN + 32044;
 800513a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800513c:	f503 43fa 	add.w	r3, r3, #32000	; 0x7d00
 8005140:	332c      	adds	r3, #44	; 0x2c
 8005142:	627b      	str	r3, [r7, #36]	; 0x24
    b     = ((4 * a) + 3) / 146097;
 8005144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	3303      	adds	r3, #3
 800514a:	4a4e      	ldr	r2, [pc, #312]	; (8005284 <RTC_FromEpoch+0x258>)
 800514c:	fba2 2303 	umull	r2, r3, r2, r3
 8005150:	0bdb      	lsrs	r3, r3, #15
 8005152:	623b      	str	r3, [r7, #32]
    c     = a - ((146097 * b) / 4);
 8005154:	6a3b      	ldr	r3, [r7, #32]
 8005156:	4a4c      	ldr	r2, [pc, #304]	; (8005288 <RTC_FromEpoch+0x25c>)
 8005158:	fb02 f303 	mul.w	r3, r2, r3
 800515c:	089b      	lsrs	r3, r3, #2
 800515e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	61fb      	str	r3, [r7, #28]
    d     = ((4 * c) + 3) / 1461;
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	3303      	adds	r3, #3
 800516a:	4a48      	ldr	r2, [pc, #288]	; (800528c <RTC_FromEpoch+0x260>)
 800516c:	fba2 2303 	umull	r2, r3, r2, r3
 8005170:	09db      	lsrs	r3, r3, #7
 8005172:	61bb      	str	r3, [r7, #24]
    e     = c - ((1461 * d) / 4);
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	f240 52b5 	movw	r2, #1461	; 0x5b5
 800517a:	fb02 f303 	mul.w	r3, r2, r3
 800517e:	089b      	lsrs	r3, r3, #2
 8005180:	69fa      	ldr	r2, [r7, #28]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	617b      	str	r3, [r7, #20]
    m     = ((5 * e) + 2) / 153;
 8005186:	697a      	ldr	r2, [r7, #20]
 8005188:	4613      	mov	r3, r2
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	4413      	add	r3, r2
 800518e:	3302      	adds	r3, #2
 8005190:	4a3f      	ldr	r2, [pc, #252]	; (8005290 <RTC_FromEpoch+0x264>)
 8005192:	fba2 2303 	umull	r2, r3, r2, r3
 8005196:	09db      	lsrs	r3, r3, #7
 8005198:	613b      	str	r3, [r7, #16]
    mday  = e - (((153 * m) + 2) / 5) + 1;
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	b299      	uxth	r1, r3
 800519e:	693a      	ldr	r2, [r7, #16]
 80051a0:	4613      	mov	r3, r2
 80051a2:	00db      	lsls	r3, r3, #3
 80051a4:	4413      	add	r3, r2
 80051a6:	011a      	lsls	r2, r3, #4
 80051a8:	4413      	add	r3, r2
 80051aa:	3302      	adds	r3, #2
 80051ac:	4a39      	ldr	r2, [pc, #228]	; (8005294 <RTC_FromEpoch+0x268>)
 80051ae:	fba2 2303 	umull	r2, r3, r2, r3
 80051b2:	089b      	lsrs	r3, r3, #2
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	1acb      	subs	r3, r1, r3
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	3301      	adds	r3, #1
 80051bc:	b29b      	uxth	r3, r3
 80051be:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    month = m + 3 - (12 * (m / 10));
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	b29a      	uxth	r2, r3
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	4932      	ldr	r1, [pc, #200]	; (8005294 <RTC_FromEpoch+0x268>)
 80051ca:	fba1 1303 	umull	r1, r3, r1, r3
 80051ce:	08db      	lsrs	r3, r3, #3
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	4619      	mov	r1, r3
 80051d4:	0049      	lsls	r1, r1, #1
 80051d6:	440b      	add	r3, r1
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	b29b      	uxth	r3, r3
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	b29b      	uxth	r3, r3
 80051e0:	3303      	adds	r3, #3
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    year  = (100 * b) + d - 4800 + (m / 10);
 80051e8:	6a3b      	ldr	r3, [r7, #32]
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	461a      	mov	r2, r3
 80051ee:	0092      	lsls	r2, r2, #2
 80051f0:	4413      	add	r3, r2
 80051f2:	461a      	mov	r2, r3
 80051f4:	0091      	lsls	r1, r2, #2
 80051f6:	461a      	mov	r2, r3
 80051f8:	460b      	mov	r3, r1
 80051fa:	4413      	add	r3, r2
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	b29a      	uxth	r2, r3
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	b29b      	uxth	r3, r3
 8005204:	4413      	add	r3, r2
 8005206:	b29a      	uxth	r2, r3
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	4922      	ldr	r1, [pc, #136]	; (8005294 <RTC_FromEpoch+0x268>)
 800520c:	fba1 1303 	umull	r1, r3, r1, r3
 8005210:	08db      	lsrs	r3, r3, #3
 8005212:	b29b      	uxth	r3, r3
 8005214:	4413      	add	r3, r2
 8005216:	b29b      	uxth	r3, r3
 8005218:	f5a3 5396 	sub.w	r3, r3, #4800	; 0x12c0
 800521c:	b29b      	uxth	r3, r3
 800521e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    date->Year    = year - 2000;
 8005222:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005226:	b2db      	uxtb	r3, r3
 8005228:	3330      	adds	r3, #48	; 0x30
 800522a:	b2da      	uxtb	r2, r3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	70da      	strb	r2, [r3, #3]
    date->Month   = month;
 8005230:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005234:	b2da      	uxtb	r2, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	705a      	strb	r2, [r3, #1]
    date->Date    = mday;
 800523a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800523e:	b2da      	uxtb	r2, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	709a      	strb	r2, [r3, #2]
    date->WeekDay = dow;
 8005244:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005248:	b2da      	uxtb	r2, r3
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	701a      	strb	r2, [r3, #0]
    time->Hours   = hour;
 800524e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005252:	b2da      	uxtb	r2, r3
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	701a      	strb	r2, [r3, #0]
    time->Minutes = min;
 8005258:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800525c:	b2da      	uxtb	r2, r3
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	705a      	strb	r2, [r3, #1]
    time->Seconds = sec;
 8005262:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005266:	b2da      	uxtb	r2, r3
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	709a      	strb	r2, [r3, #2]
}
 800526c:	bf00      	nop
 800526e:	3754      	adds	r7, #84	; 0x54
 8005270:	46bd      	mov	sp, r7
 8005272:	bd90      	pop	{r4, r7, pc}
 8005274:	c22e4507 	.word	0xc22e4507
 8005278:	004a7b17 	.word	0x004a7b17
 800527c:	88888889 	.word	0x88888889
 8005280:	aaaaaaab 	.word	0xaaaaaaab
 8005284:	396b06bd 	.word	0x396b06bd
 8005288:	00023ab1 	.word	0x00023ab1
 800528c:	166db073 	.word	0x166db073
 8005290:	d62b80d7 	.word	0xd62b80d7
 8005294:	cccccccd 	.word	0xcccccccd

08005298 <LL_AHB3_GRP1_EnableClock>:
{
 8005298:	b480      	push	{r7}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80052a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80052a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80052b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4013      	ands	r3, r2
 80052ba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80052bc:	68fb      	ldr	r3, [r7, #12]
}
 80052be:	bf00      	nop
 80052c0:	3714      	adds	r7, #20
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr

080052ca <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80052ca:	b580      	push	{r7, lr}
 80052cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80052ce:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80052d2:	f7ff ffe1 	bl	8005298 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80052d6:	2200      	movs	r2, #0
 80052d8:	210f      	movs	r1, #15
 80052da:	f06f 0001 	mvn.w	r0, #1
 80052de:	f002 fd2a 	bl	8007d36 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */
  HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn , 15, 0);
 80052e2:	2200      	movs	r2, #0
 80052e4:	210f      	movs	r1, #15
 80052e6:	202c      	movs	r0, #44	; 0x2c
 80052e8:	f002 fd25 	bl	8007d36 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn , 15, 0);
 80052ec:	2200      	movs	r2, #0
 80052ee:	210f      	movs	r1, #15
 80052f0:	202d      	movs	r0, #45	; 0x2d
 80052f2:	f002 fd20 	bl	8007d36 <HAL_NVIC_SetPriority>
  /* USER CODE END MspInit 1 */
}
 80052f6:	bf00      	nop
 80052f8:	bd80      	pop	{r7, pc}

080052fa <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80052fa:	b480      	push	{r7}
 80052fc:	b085      	sub	sp, #20
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8005302:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005306:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005308:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4313      	orrs	r3, r2
 8005310:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005312:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005316:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4013      	ands	r3, r2
 800531c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800531e:	68fb      	ldr	r3, [r7, #12]
}
 8005320:	bf00      	nop
 8005322:	3714      	adds	r7, #20
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b08c      	sub	sp, #48	; 0x30
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005334:	2300      	movs	r3, #0
 8005336:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005338:	2300      	movs	r3, #0
 800533a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 800533c:	2200      	movs	r2, #0
 800533e:	6879      	ldr	r1, [r7, #4]
 8005340:	2019      	movs	r0, #25
 8005342:	f002 fcf8 	bl	8007d36 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 8005346:	2019      	movs	r0, #25
 8005348:	f002 fd0f 	bl	8007d6a <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800534c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005350:	f7ff ffd3 	bl	80052fa <LL_APB2_GRP1_EnableClock>
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005354:	f107 0208 	add.w	r2, r7, #8
 8005358:	f107 030c 	add.w	r3, r7, #12
 800535c:	4611      	mov	r1, r2
 800535e:	4618      	mov	r0, r3
 8005360:	f006 faea 	bl	800b938 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8005364:	f006 fad2 	bl	800b90c <HAL_RCC_GetPCLK2Freq>
 8005368:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800536a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800536c:	4a12      	ldr	r2, [pc, #72]	; (80053b8 <HAL_InitTick+0x8c>)
 800536e:	fba2 2303 	umull	r2, r3, r2, r3
 8005372:	0c9b      	lsrs	r3, r3, #18
 8005374:	3b01      	subs	r3, #1
 8005376:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8005378:	4b10      	ldr	r3, [pc, #64]	; (80053bc <HAL_InitTick+0x90>)
 800537a:	4a11      	ldr	r2, [pc, #68]	; (80053c0 <HAL_InitTick+0x94>)
 800537c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800537e:	4b0f      	ldr	r3, [pc, #60]	; (80053bc <HAL_InitTick+0x90>)
 8005380:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005384:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8005386:	4a0d      	ldr	r2, [pc, #52]	; (80053bc <HAL_InitTick+0x90>)
 8005388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800538a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800538c:	4b0b      	ldr	r3, [pc, #44]	; (80053bc <HAL_InitTick+0x90>)
 800538e:	2200      	movs	r2, #0
 8005390:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005392:	4b0a      	ldr	r3, [pc, #40]	; (80053bc <HAL_InitTick+0x90>)
 8005394:	2200      	movs	r2, #0
 8005396:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8005398:	4808      	ldr	r0, [pc, #32]	; (80053bc <HAL_InitTick+0x90>)
 800539a:	f007 fb37 	bl	800ca0c <HAL_TIM_Base_Init>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d104      	bne.n	80053ae <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80053a4:	4805      	ldr	r0, [pc, #20]	; (80053bc <HAL_InitTick+0x90>)
 80053a6:	f007 fbb3 	bl	800cb10 <HAL_TIM_Base_Start_IT>
 80053aa:	4603      	mov	r3, r0
 80053ac:	e000      	b.n	80053b0 <HAL_InitTick+0x84>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3730      	adds	r7, #48	; 0x30
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	431bde83 	.word	0x431bde83
 80053bc:	20028450 	.word	0x20028450
 80053c0:	40012c00 	.word	0x40012c00

080053c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80053c4:	b480      	push	{r7}
 80053c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80053c8:	bf00      	nop
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr

080053d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80053d2:	b480      	push	{r7}
 80053d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80053d6:	e7fe      	b.n	80053d6 <HardFault_Handler+0x4>

080053d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80053d8:	b480      	push	{r7}
 80053da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80053dc:	e7fe      	b.n	80053dc <MemManage_Handler+0x4>

080053de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80053de:	b480      	push	{r7}
 80053e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80053e2:	e7fe      	b.n	80053e2 <BusFault_Handler+0x4>

080053e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80053e4:	b480      	push	{r7}
 80053e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80053e8:	e7fe      	b.n	80053e8 <UsageFault_Handler+0x4>

080053ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80053ea:	b480      	push	{r7}
 80053ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80053ee:	bf00      	nop
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80053fc:	2004      	movs	r0, #4
 80053fe:	f003 f9a9 	bl	8008754 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  // received message from secondary MCU that a message is ready
//  osSemaphoreRelease(interProcessorInterruptSemHandle);
  osThreadFlagsSet(interProcTaskHandle, 0x00000004U);
 8005402:	4b04      	ldr	r3, [pc, #16]	; (8005414 <EXTI2_IRQHandler+0x1c>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	2104      	movs	r1, #4
 8005408:	4618      	mov	r0, r3
 800540a:	f008 febb 	bl	800e184 <osThreadFlagsSet>
  /* USER CODE END EXTI2_IRQn 1 */
}
 800540e:	bf00      	nop
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	20027ce4 	.word	0x20027ce4

08005418 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800541c:	4802      	ldr	r0, [pc, #8]	; (8005428 <DMA1_Channel1_IRQHandler+0x10>)
 800541e:	f002 fec2 	bl	80081a6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005422:	bf00      	nop
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	2002773c 	.word	0x2002773c

0800542c <COMP_IRQHandler>:

/**
  * @brief This function handles COMP1 and COMP2 interrupts through EXTI lines 20 and 21.
  */
void COMP_IRQHandler(void)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP_IRQn 0 */

  /* USER CODE END COMP_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 8005430:	4802      	ldr	r0, [pc, #8]	; (800543c <COMP_IRQHandler+0x10>)
 8005432:	f002 fb17 	bl	8007a64 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP_IRQn 1 */

  /* USER CODE END COMP_IRQn 1 */
}
 8005436:	bf00      	nop
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	20027d0c 	.word	0x20027d0c

08005440 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8005444:	2020      	movs	r0, #32
 8005446:	f003 f985 	bl	8008754 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800544a:	bf00      	nop
 800544c:	bd80      	pop	{r7, pc}
	...

08005450 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005454:	4803      	ldr	r0, [pc, #12]	; (8005464 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8005456:	f007 fc65 	bl	800cd24 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800545a:	4803      	ldr	r0, [pc, #12]	; (8005468 <TIM1_UP_TIM16_IRQHandler+0x18>)
 800545c:	f007 fc62 	bl	800cd24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8005460:	bf00      	nop
 8005462:	bd80      	pop	{r7, pc}
 8005464:	20028450 	.word	0x20028450
 8005468:	200284d0 	.word	0x200284d0

0800546c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005470:	4802      	ldr	r0, [pc, #8]	; (800547c <I2C1_EV_IRQHandler+0x10>)
 8005472:	f003 fd85 	bl	8008f80 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8005476:	bf00      	nop
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	20027e9c 	.word	0x20027e9c

08005480 <IPCC_C1_TX_IRQHandler>:

/* USER CODE BEGIN 1 */
void IPCC_C1_TX_IRQHandler(void)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	af00      	add	r7, sp, #0
  HW_IPCC_Tx_Handler();
 8005484:	f010 f874 	bl	8015570 <HW_IPCC_Tx_Handler>

  return;
 8005488:	bf00      	nop
}
 800548a:	bd80      	pop	{r7, pc}

0800548c <IPCC_C1_RX_IRQHandler>:
void IPCC_C1_RX_IRQHandler(void)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	af00      	add	r7, sp, #0
  HW_IPCC_Rx_Handler();
 8005490:	f010 f814 	bl	80154bc <HW_IPCC_Rx_Handler>
  return;
 8005494:	bf00      	nop
}
 8005496:	bd80      	pop	{r7, pc}

08005498 <TSC_IRQHandler>:

/**
  * @brief This function handles TSC global interrupt.
  */
void TSC_IRQHandler(void)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TSC_IRQn 0 */

  /* USER CODE END TSC_IRQn 0 */
  HAL_TSC_IRQHandler(&htsc);
 800549c:	4802      	ldr	r0, [pc, #8]	; (80054a8 <TSC_IRQHandler+0x10>)
 800549e:	f008 fd01 	bl	800dea4 <HAL_TSC_IRQHandler>
  /* USER CODE BEGIN TSC_IRQn 1 */

  /* USER CODE END TSC_IRQn 1 */
}
 80054a2:	bf00      	nop
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	20028544 	.word	0x20028544

080054ac <logApplication>:
 * @param[in]     aFormat     User string format.
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
void logApplication(appliLogLevel_t aLogLevel, appliLogRegion_t aLogRegion, const char *aFormat, ...)
{
 80054ac:	b40c      	push	{r2, r3}
 80054ae:	b480      	push	{r7}
 80054b0:	b083      	sub	sp, #12
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	4603      	mov	r3, r0
 80054b6:	460a      	mov	r2, r1
 80054b8:	71fb      	strb	r3, [r7, #7]
 80054ba:	4613      	mov	r3, r2
 80054bc:	71bb      	strb	r3, [r7, #6]
  }else
  {
    /* Print nothing */
  }
#endif /* CFG_DEBUG_TRACE */
}
 80054be:	bf00      	nop
 80054c0:	370c      	adds	r7, #12
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	b002      	add	sp, #8
 80054ca:	4770      	bx	lr

080054cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80054cc:	b480      	push	{r7}
 80054ce:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 80054d0:	4b26      	ldr	r3, [pc, #152]	; (800556c <SystemInit+0xa0>)
 80054d2:	2200      	movs	r2, #0
 80054d4:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 80054d6:	4b25      	ldr	r3, [pc, #148]	; (800556c <SystemInit+0xa0>)
 80054d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054dc:	4a23      	ldr	r2, [pc, #140]	; (800556c <SystemInit+0xa0>)
 80054de:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80054e2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80054e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054f0:	f043 0301 	orr.w	r3, r3, #1
 80054f4:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80054f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054fa:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80054fe:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8005500:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800550a:	4b19      	ldr	r3, [pc, #100]	; (8005570 <SystemInit+0xa4>)
 800550c:	4013      	ands	r3, r2
 800550e:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8005510:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005514:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005518:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800551c:	f023 0305 	bic.w	r3, r3, #5
 8005520:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8005524:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005528:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800552c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005530:	f023 0301 	bic.w	r3, r3, #1
 8005534:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8005538:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800553c:	4a0d      	ldr	r2, [pc, #52]	; (8005574 <SystemInit+0xa8>)
 800553e:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8005540:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005544:	4a0b      	ldr	r2, [pc, #44]	; (8005574 <SystemInit+0xa8>)
 8005546:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005548:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005552:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005556:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800555c:	2200      	movs	r2, #0
 800555e:	619a      	str	r2, [r3, #24]
}
 8005560:	bf00      	nop
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	e000ed00 	.word	0xe000ed00
 8005570:	faf6fefb 	.word	0xfaf6fefb
 8005574:	22041000 	.word	0x22041000

08005578 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8005578:	b480      	push	{r7}
 800557a:	b087      	sub	sp, #28
 800557c:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 800557e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	091b      	lsrs	r3, r3, #4
 8005586:	f003 030f 	and.w	r3, r3, #15
 800558a:	4a47      	ldr	r2, [pc, #284]	; (80056a8 <SystemCoreClockUpdate+0x130>)
 800558c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005590:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005592:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	f003 030c 	and.w	r3, r3, #12
 800559c:	2b0c      	cmp	r3, #12
 800559e:	d867      	bhi.n	8005670 <SystemCoreClockUpdate+0xf8>
 80055a0:	a201      	add	r2, pc, #4	; (adr r2, 80055a8 <SystemCoreClockUpdate+0x30>)
 80055a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055a6:	bf00      	nop
 80055a8:	080055dd 	.word	0x080055dd
 80055ac:	08005671 	.word	0x08005671
 80055b0:	08005671 	.word	0x08005671
 80055b4:	08005671 	.word	0x08005671
 80055b8:	080055e5 	.word	0x080055e5
 80055bc:	08005671 	.word	0x08005671
 80055c0:	08005671 	.word	0x08005671
 80055c4:	08005671 	.word	0x08005671
 80055c8:	080055ed 	.word	0x080055ed
 80055cc:	08005671 	.word	0x08005671
 80055d0:	08005671 	.word	0x08005671
 80055d4:	08005671 	.word	0x08005671
 80055d8:	080055f5 	.word	0x080055f5
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80055dc:	4a33      	ldr	r2, [pc, #204]	; (80056ac <SystemCoreClockUpdate+0x134>)
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	6013      	str	r3, [r2, #0]
      break;
 80055e2:	e049      	b.n	8005678 <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 80055e4:	4b31      	ldr	r3, [pc, #196]	; (80056ac <SystemCoreClockUpdate+0x134>)
 80055e6:	4a32      	ldr	r2, [pc, #200]	; (80056b0 <SystemCoreClockUpdate+0x138>)
 80055e8:	601a      	str	r2, [r3, #0]
      break;
 80055ea:	e045      	b.n	8005678 <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80055ec:	4b2f      	ldr	r3, [pc, #188]	; (80056ac <SystemCoreClockUpdate+0x134>)
 80055ee:	4a31      	ldr	r2, [pc, #196]	; (80056b4 <SystemCoreClockUpdate+0x13c>)
 80055f0:	601a      	str	r2, [r3, #0]
      break;
 80055f2:	e041      	b.n	8005678 <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80055f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	f003 0303 	and.w	r3, r3, #3
 80055fe:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8005600:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	091b      	lsrs	r3, r3, #4
 8005608:	f003 0307 	and.w	r3, r3, #7
 800560c:	3301      	adds	r3, #1
 800560e:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2b02      	cmp	r3, #2
 8005614:	d105      	bne.n	8005622 <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 8005616:	4a26      	ldr	r2, [pc, #152]	; (80056b0 <SystemCoreClockUpdate+0x138>)
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	fbb2 f3f3 	udiv	r3, r2, r3
 800561e:	617b      	str	r3, [r7, #20]
 8005620:	e00d      	b.n	800563e <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2b03      	cmp	r3, #3
 8005626:	d105      	bne.n	8005634 <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 8005628:	4a22      	ldr	r2, [pc, #136]	; (80056b4 <SystemCoreClockUpdate+0x13c>)
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005630:	617b      	str	r3, [r7, #20]
 8005632:	e004      	b.n	800563e <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 8005634:	693a      	ldr	r2, [r7, #16]
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	fbb2 f3f3 	udiv	r3, r2, r3
 800563c:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800563e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	0a1b      	lsrs	r3, r3, #8
 8005646:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	fb02 f303 	mul.w	r3, r2, r3
 8005650:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8005652:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	0f5b      	lsrs	r3, r3, #29
 800565a:	f003 0307 	and.w	r3, r3, #7
 800565e:	3301      	adds	r3, #1
 8005660:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 8005662:	697a      	ldr	r2, [r7, #20]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	fbb2 f3f3 	udiv	r3, r2, r3
 800566a:	4a10      	ldr	r2, [pc, #64]	; (80056ac <SystemCoreClockUpdate+0x134>)
 800566c:	6013      	str	r3, [r2, #0]
      break;
 800566e:	e003      	b.n	8005678 <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 8005670:	4a0e      	ldr	r2, [pc, #56]	; (80056ac <SystemCoreClockUpdate+0x134>)
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	6013      	str	r3, [r2, #0]
      break;
 8005676:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005678:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	091b      	lsrs	r3, r3, #4
 8005680:	f003 030f 	and.w	r3, r3, #15
 8005684:	4a0c      	ldr	r2, [pc, #48]	; (80056b8 <SystemCoreClockUpdate+0x140>)
 8005686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800568a:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 800568c:	4b07      	ldr	r3, [pc, #28]	; (80056ac <SystemCoreClockUpdate+0x134>)
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	fbb2 f3f3 	udiv	r3, r2, r3
 8005696:	4a05      	ldr	r2, [pc, #20]	; (80056ac <SystemCoreClockUpdate+0x134>)
 8005698:	6013      	str	r3, [r2, #0]

}
 800569a:	bf00      	nop
 800569c:	371c      	adds	r7, #28
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr
 80056a6:	bf00      	nop
 80056a8:	08017890 	.word	0x08017890
 80056ac:	20000078 	.word	0x20000078
 80056b0:	00f42400 	.word	0x00f42400
 80056b4:	01e84800 	.word	0x01e84800
 80056b8:	08017830 	.word	0x08017830

080056bc <LL_AHB2_GRP1_EnableClock>:
{
 80056bc:	b480      	push	{r7}
 80056be:	b085      	sub	sp, #20
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80056c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80056ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80056d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4013      	ands	r3, r2
 80056de:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80056e0:	68fb      	ldr	r3, [r7, #12]
}
 80056e2:	bf00      	nop
 80056e4:	3714      	adds	r7, #20
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr

080056ee <LL_APB1_GRP1_EnableClock>:
{
 80056ee:	b480      	push	{r7}
 80056f0:	b085      	sub	sp, #20
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80056f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056fa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80056fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4313      	orrs	r3, r2
 8005704:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8005706:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800570a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4013      	ands	r3, r2
 8005710:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005712:	68fb      	ldr	r3, [r7, #12]
}
 8005714:	bf00      	nop
 8005716:	3714      	adds	r7, #20
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <LL_APB2_GRP1_EnableClock>:
{
 8005720:	b480      	push	{r7}
 8005722:	b085      	sub	sp, #20
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8005728:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800572c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800572e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4313      	orrs	r3, r2
 8005736:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005738:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800573c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4013      	ands	r3, r2
 8005742:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005744:	68fb      	ldr	r3, [r7, #12]
}
 8005746:	bf00      	nop
 8005748:	3714      	adds	r7, #20
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr
	...

08005754 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim16;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b08e      	sub	sp, #56	; 0x38
 8005758:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800575a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800575e:	2200      	movs	r2, #0
 8005760:	601a      	str	r2, [r3, #0]
 8005762:	605a      	str	r2, [r3, #4]
 8005764:	609a      	str	r2, [r3, #8]
 8005766:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005768:	f107 031c 	add.w	r3, r7, #28
 800576c:	2200      	movs	r2, #0
 800576e:	601a      	str	r2, [r3, #0]
 8005770:	605a      	str	r2, [r3, #4]
 8005772:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005774:	463b      	mov	r3, r7
 8005776:	2200      	movs	r2, #0
 8005778:	601a      	str	r2, [r3, #0]
 800577a:	605a      	str	r2, [r3, #4]
 800577c:	609a      	str	r2, [r3, #8]
 800577e:	60da      	str	r2, [r3, #12]
 8005780:	611a      	str	r2, [r3, #16]
 8005782:	615a      	str	r2, [r3, #20]
 8005784:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8005786:	4b2d      	ldr	r3, [pc, #180]	; (800583c <MX_TIM2_Init+0xe8>)
 8005788:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800578c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 639;
 800578e:	4b2b      	ldr	r3, [pc, #172]	; (800583c <MX_TIM2_Init+0xe8>)
 8005790:	f240 227f 	movw	r2, #639	; 0x27f
 8005794:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005796:	4b29      	ldr	r3, [pc, #164]	; (800583c <MX_TIM2_Init+0xe8>)
 8005798:	2200      	movs	r2, #0
 800579a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800579c:	4b27      	ldr	r3, [pc, #156]	; (800583c <MX_TIM2_Init+0xe8>)
 800579e:	2209      	movs	r2, #9
 80057a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80057a2:	4b26      	ldr	r3, [pc, #152]	; (800583c <MX_TIM2_Init+0xe8>)
 80057a4:	2200      	movs	r2, #0
 80057a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80057a8:	4b24      	ldr	r3, [pc, #144]	; (800583c <MX_TIM2_Init+0xe8>)
 80057aa:	2200      	movs	r2, #0
 80057ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80057ae:	4823      	ldr	r0, [pc, #140]	; (800583c <MX_TIM2_Init+0xe8>)
 80057b0:	f007 f92c 	bl	800ca0c <HAL_TIM_Base_Init>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d001      	beq.n	80057be <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80057ba:	f7fe fdbd 	bl	8004338 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80057be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80057c2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80057c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80057c8:	4619      	mov	r1, r3
 80057ca:	481c      	ldr	r0, [pc, #112]	; (800583c <MX_TIM2_Init+0xe8>)
 80057cc:	f007 fce2 	bl	800d194 <HAL_TIM_ConfigClockSource>
 80057d0:	4603      	mov	r3, r0
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d001      	beq.n	80057da <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80057d6:	f7fe fdaf 	bl	8004338 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80057da:	4818      	ldr	r0, [pc, #96]	; (800583c <MX_TIM2_Init+0xe8>)
 80057dc:	f007 f9c2 	bl	800cb64 <HAL_TIM_PWM_Init>
 80057e0:	4603      	mov	r3, r0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d001      	beq.n	80057ea <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80057e6:	f7fe fda7 	bl	8004338 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80057ea:	2320      	movs	r3, #32
 80057ec:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80057ee:	2300      	movs	r3, #0
 80057f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80057f2:	f107 031c 	add.w	r3, r7, #28
 80057f6:	4619      	mov	r1, r3
 80057f8:	4810      	ldr	r0, [pc, #64]	; (800583c <MX_TIM2_Init+0xe8>)
 80057fa:	f008 f951 	bl	800daa0 <HAL_TIMEx_MasterConfigSynchronization>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d001      	beq.n	8005808 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8005804:	f7fe fd98 	bl	8004338 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005808:	2360      	movs	r3, #96	; 0x60
 800580a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 9;
 800580c:	2309      	movs	r3, #9
 800580e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005810:	2300      	movs	r3, #0
 8005812:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005814:	2300      	movs	r3, #0
 8005816:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005818:	463b      	mov	r3, r7
 800581a:	2204      	movs	r2, #4
 800581c:	4619      	mov	r1, r3
 800581e:	4807      	ldr	r0, [pc, #28]	; (800583c <MX_TIM2_Init+0xe8>)
 8005820:	f007 fba0 	bl	800cf64 <HAL_TIM_PWM_ConfigChannel>
 8005824:	4603      	mov	r3, r0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d001      	beq.n	800582e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800582a:	f7fe fd85 	bl	8004338 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 800582e:	4803      	ldr	r0, [pc, #12]	; (800583c <MX_TIM2_Init+0xe8>)
 8005830:	f000 f850 	bl	80058d4 <HAL_TIM_MspPostInit>

}
 8005834:	bf00      	nop
 8005836:	3738      	adds	r7, #56	; 0x38
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}
 800583c:	20028490 	.word	0x20028490

08005840 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8005844:	4b0f      	ldr	r3, [pc, #60]	; (8005884 <MX_TIM16_Init+0x44>)
 8005846:	4a10      	ldr	r2, [pc, #64]	; (8005888 <MX_TIM16_Init+0x48>)
 8005848:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 31;
 800584a:	4b0e      	ldr	r3, [pc, #56]	; (8005884 <MX_TIM16_Init+0x44>)
 800584c:	221f      	movs	r2, #31
 800584e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005850:	4b0c      	ldr	r3, [pc, #48]	; (8005884 <MX_TIM16_Init+0x44>)
 8005852:	2200      	movs	r2, #0
 8005854:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8005856:	4b0b      	ldr	r3, [pc, #44]	; (8005884 <MX_TIM16_Init+0x44>)
 8005858:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800585c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800585e:	4b09      	ldr	r3, [pc, #36]	; (8005884 <MX_TIM16_Init+0x44>)
 8005860:	2200      	movs	r2, #0
 8005862:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8005864:	4b07      	ldr	r3, [pc, #28]	; (8005884 <MX_TIM16_Init+0x44>)
 8005866:	2200      	movs	r2, #0
 8005868:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800586a:	4b06      	ldr	r3, [pc, #24]	; (8005884 <MX_TIM16_Init+0x44>)
 800586c:	2200      	movs	r2, #0
 800586e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8005870:	4804      	ldr	r0, [pc, #16]	; (8005884 <MX_TIM16_Init+0x44>)
 8005872:	f007 f8cb 	bl	800ca0c <HAL_TIM_Base_Init>
 8005876:	4603      	mov	r3, r0
 8005878:	2b00      	cmp	r3, #0
 800587a:	d001      	beq.n	8005880 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 800587c:	f7fe fd5c 	bl	8004338 <Error_Handler>
  }

}
 8005880:	bf00      	nop
 8005882:	bd80      	pop	{r7, pc}
 8005884:	200284d0 	.word	0x200284d0
 8005888:	40014400 	.word	0x40014400

0800588c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b082      	sub	sp, #8
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800589c:	d103      	bne.n	80058a6 <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800589e:	2001      	movs	r0, #1
 80058a0:	f7ff ff25 	bl	80056ee <LL_APB1_GRP1_EnableClock>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 80058a4:	e010      	b.n	80058c8 <HAL_TIM_Base_MspInit+0x3c>
  else if(tim_baseHandle->Instance==TIM16)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a09      	ldr	r2, [pc, #36]	; (80058d0 <HAL_TIM_Base_MspInit+0x44>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d10b      	bne.n	80058c8 <HAL_TIM_Base_MspInit+0x3c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80058b0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80058b4:	f7ff ff34 	bl	8005720 <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80058b8:	2200      	movs	r2, #0
 80058ba:	2100      	movs	r1, #0
 80058bc:	2019      	movs	r0, #25
 80058be:	f002 fa3a 	bl	8007d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80058c2:	2019      	movs	r0, #25
 80058c4:	f002 fa51 	bl	8007d6a <HAL_NVIC_EnableIRQ>
}
 80058c8:	bf00      	nop
 80058ca:	3708      	adds	r7, #8
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	40014400 	.word	0x40014400

080058d4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b088      	sub	sp, #32
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058dc:	f107 030c 	add.w	r3, r7, #12
 80058e0:	2200      	movs	r2, #0
 80058e2:	601a      	str	r2, [r3, #0]
 80058e4:	605a      	str	r2, [r3, #4]
 80058e6:	609a      	str	r2, [r3, #8]
 80058e8:	60da      	str	r2, [r3, #12]
 80058ea:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058f4:	d112      	bne.n	800591c <HAL_TIM_MspPostInit+0x48>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80058f6:	2002      	movs	r0, #2
 80058f8:	f7ff fee0 	bl	80056bc <LL_AHB2_GRP1_EnableClock>
    /**TIM2 GPIO Configuration    
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80058fc:	2308      	movs	r3, #8
 80058fe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005900:	2302      	movs	r3, #2
 8005902:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005904:	2300      	movs	r3, #0
 8005906:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005908:	2300      	movs	r3, #0
 800590a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800590c:	2301      	movs	r3, #1
 800590e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005910:	f107 030c 	add.w	r3, r7, #12
 8005914:	4619      	mov	r1, r3
 8005916:	4803      	ldr	r0, [pc, #12]	; (8005924 <HAL_TIM_MspPostInit+0x50>)
 8005918:	f002 fd94 	bl	8008444 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800591c:	bf00      	nop
 800591e:	3720      	adds	r7, #32
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}
 8005924:	48000400 	.word	0x48000400

08005928 <HAL_COMP_TriggerCallback>:
uint16_t calibration_1 = 0;
union ColorComplex lightMessageComplexTouch = {0};
uint32_t lightsSimpleMessageReceivedTouch;
uint32_t prev_msg = 0;

void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp) {
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
	timestamp = __HAL_TIM_GET_COUNTER(&htim16);
 8005930:	4b1a      	ldr	r3, [pc, #104]	; (800599c <HAL_COMP_TriggerCallback+0x74>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005936:	b29a      	uxth	r2, r3
 8005938:	4b19      	ldr	r3, [pc, #100]	; (80059a0 <HAL_COMP_TriggerCallback+0x78>)
 800593a:	801a      	strh	r2, [r3, #0]

//	GPIO_PinState pin_state = HAL_GPIO_ReadPin(LH_SIG_GPIO_Port, LH_SIG_Pin);
	uint32_t pin_state = HAL_COMP_GetOutputLevel(hcomp);
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f002 f8bf 	bl	8007ac0 <HAL_COMP_GetOutputLevel>
 8005942:	60f8      	str	r0, [r7, #12]
	if (pin_state == COMP_OUTPUT_LEVEL_HIGH) {
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2b01      	cmp	r3, #1
 8005948:	d109      	bne.n	800595e <HAL_COMP_TriggerCallback+0x36>
		//Rising edge
		input0.rise_time_ = timestamp;
 800594a:	4b15      	ldr	r3, [pc, #84]	; (80059a0 <HAL_COMP_TriggerCallback+0x78>)
 800594c:	881a      	ldrh	r2, [r3, #0]
 800594e:	4b15      	ldr	r3, [pc, #84]	; (80059a4 <HAL_COMP_TriggerCallback+0x7c>)
 8005950:	f8a3 240a 	strh.w	r2, [r3, #1034]	; 0x40a
		input0.rise_valid_ = 1;
 8005954:	4b13      	ldr	r3, [pc, #76]	; (80059a4 <HAL_COMP_TriggerCallback+0x7c>)
 8005956:	2201      	movs	r2, #1
 8005958:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
		//Falling edge
		enqueue_pulse(&input0, input0.rise_time_, timestamp - input0.rise_time_);
		input0.rise_valid_ = 0;
//		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
	}
}
 800595c:	e019      	b.n	8005992 <HAL_COMP_TriggerCallback+0x6a>
	} else if (input0.rise_valid_ && pin_state == COMP_OUTPUT_LEVEL_LOW) {
 800595e:	4b11      	ldr	r3, [pc, #68]	; (80059a4 <HAL_COMP_TriggerCallback+0x7c>)
 8005960:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 8005964:	2b00      	cmp	r3, #0
 8005966:	d014      	beq.n	8005992 <HAL_COMP_TriggerCallback+0x6a>
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d111      	bne.n	8005992 <HAL_COMP_TriggerCallback+0x6a>
		enqueue_pulse(&input0, input0.rise_time_, timestamp - input0.rise_time_);
 800596e:	4b0d      	ldr	r3, [pc, #52]	; (80059a4 <HAL_COMP_TriggerCallback+0x7c>)
 8005970:	f8b3 140a 	ldrh.w	r1, [r3, #1034]	; 0x40a
 8005974:	4b0a      	ldr	r3, [pc, #40]	; (80059a0 <HAL_COMP_TriggerCallback+0x78>)
 8005976:	881a      	ldrh	r2, [r3, #0]
 8005978:	4b0a      	ldr	r3, [pc, #40]	; (80059a4 <HAL_COMP_TriggerCallback+0x7c>)
 800597a:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800597e:	1ad3      	subs	r3, r2, r3
 8005980:	b29b      	uxth	r3, r3
 8005982:	461a      	mov	r2, r3
 8005984:	4807      	ldr	r0, [pc, #28]	; (80059a4 <HAL_COMP_TriggerCallback+0x7c>)
 8005986:	f7fe f94b 	bl	8003c20 <enqueue_pulse>
		input0.rise_valid_ = 0;
 800598a:	4b06      	ldr	r3, [pc, #24]	; (80059a4 <HAL_COMP_TriggerCallback+0x7c>)
 800598c:	2200      	movs	r2, #0
 800598e:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
}
 8005992:	bf00      	nop
 8005994:	3710      	adds	r7, #16
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	200284d0 	.word	0x200284d0
 80059a0:	20000af6 	.word	0x20000af6
 80059a4:	200278bc 	.word	0x200278bc

080059a8 <HAL_TSC_ConvCpltCallback>:


uint32_t temp = 0x01;
// TODO: make threshold update if "touch" is active for too long
void HAL_TSC_ConvCpltCallback(TSC_HandleTypeDef *htsc) {
 80059a8:	b5b0      	push	{r4, r5, r7, lr}
 80059aa:	b086      	sub	sp, #24
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
	/*##-5- Discharge the touch-sensing IOs ####################################*/
	HAL_TSC_IODischarge(htsc, ENABLE);
 80059b0:	2101      	movs	r1, #1
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f008 fa46 	bl	800de44 <HAL_TSC_IODischarge>
	/* Note: a delay can be added here */

	uint32_t uhTSCAcquisitionValue;
	TSC_GroupStatusTypeDef status = HAL_TSC_GroupGetStatus(htsc, TSC_GROUP2_IDX);
 80059b8:	2101      	movs	r1, #1
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f008 f9cb 	bl	800dd56 <HAL_TSC_GroupGetStatus>
 80059c0:	4603      	mov	r3, r0
 80059c2:	75bb      	strb	r3, [r7, #22]
	uint32_t cur_time;
	/*##-6- Check if the acquisition is correct (no max count) #################*/
	if (status == TSC_GROUP_COMPLETED) {
 80059c4:	7dbb      	ldrb	r3, [r7, #22]
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	f040 8115 	bne.w	8005bf6 <HAL_TSC_ConvCpltCallback+0x24e>
		/*##-7- Read the acquisition value #######################################*/
		uhTSCAcquisitionValue = HAL_TSC_GroupGetValue(htsc, TSC_GROUP2_IDX);
 80059cc:	2101      	movs	r1, #1
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f008 f9e3 	bl	800dd9a <HAL_TSC_GroupGetValue>
 80059d4:	6138      	str	r0, [r7, #16]
		uint8_t touch;
		if (cap_sensor == 0) {
 80059d6:	4ba0      	ldr	r3, [pc, #640]	; (8005c58 <HAL_TSC_ConvCpltCallback+0x2b0>)
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d17d      	bne.n	8005ada <HAL_TSC_ConvCpltCallback+0x132>
			if(calibration_0 <= CALIBRATION_SAMPLES){
 80059de:	4b9f      	ldr	r3, [pc, #636]	; (8005c5c <HAL_TSC_ConvCpltCallback+0x2b4>)
 80059e0:	881b      	ldrh	r3, [r3, #0]
 80059e2:	2b64      	cmp	r3, #100	; 0x64
 80059e4:	d83a      	bhi.n	8005a5c <HAL_TSC_ConvCpltCallback+0xb4>
				touch = 0;
 80059e6:	2300      	movs	r3, #0
 80059e8:	75fb      	strb	r3, [r7, #23]
				if(calibration_0 == 0){
 80059ea:	4b9c      	ldr	r3, [pc, #624]	; (8005c5c <HAL_TSC_ConvCpltCallback+0x2b4>)
 80059ec:	881b      	ldrh	r3, [r3, #0]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d108      	bne.n	8005a04 <HAL_TSC_ConvCpltCallback+0x5c>
					ts1_threshold = uhTSCAcquisitionValue;
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	ee07 3a90 	vmov	s15, r3
 80059f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059fc:	4b98      	ldr	r3, [pc, #608]	; (8005c60 <HAL_TSC_ConvCpltCallback+0x2b8>)
 80059fe:	edc3 7a00 	vstr	s15, [r3]
 8005a02:	e024      	b.n	8005a4e <HAL_TSC_ConvCpltCallback+0xa6>
				}else{
					ts1_threshold = uhTSCAcquisitionValue * ALPHA_WEIGHT + ts1_threshold * (1-ALPHA_WEIGHT);
 8005a04:	6938      	ldr	r0, [r7, #16]
 8005a06:	f7fa fd07 	bl	8000418 <__aeabi_ui2d>
 8005a0a:	a38f      	add	r3, pc, #572	; (adr r3, 8005c48 <HAL_TSC_ConvCpltCallback+0x2a0>)
 8005a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a10:	f7fa fd7c 	bl	800050c <__aeabi_dmul>
 8005a14:	4603      	mov	r3, r0
 8005a16:	460c      	mov	r4, r1
 8005a18:	4625      	mov	r5, r4
 8005a1a:	461c      	mov	r4, r3
 8005a1c:	4b90      	ldr	r3, [pc, #576]	; (8005c60 <HAL_TSC_ConvCpltCallback+0x2b8>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4618      	mov	r0, r3
 8005a22:	f7fa fd1b 	bl	800045c <__aeabi_f2d>
 8005a26:	a38a      	add	r3, pc, #552	; (adr r3, 8005c50 <HAL_TSC_ConvCpltCallback+0x2a8>)
 8005a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a2c:	f7fa fd6e 	bl	800050c <__aeabi_dmul>
 8005a30:	4602      	mov	r2, r0
 8005a32:	460b      	mov	r3, r1
 8005a34:	4620      	mov	r0, r4
 8005a36:	4629      	mov	r1, r5
 8005a38:	f7fa fbb2 	bl	80001a0 <__adddf3>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	460c      	mov	r4, r1
 8005a40:	4618      	mov	r0, r3
 8005a42:	4621      	mov	r1, r4
 8005a44:	f7fb f812 	bl	8000a6c <__aeabi_d2f>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	4b85      	ldr	r3, [pc, #532]	; (8005c60 <HAL_TSC_ConvCpltCallback+0x2b8>)
 8005a4c:	601a      	str	r2, [r3, #0]
				}
				calibration_0 += 1;
 8005a4e:	4b83      	ldr	r3, [pc, #524]	; (8005c5c <HAL_TSC_ConvCpltCallback+0x2b4>)
 8005a50:	881b      	ldrh	r3, [r3, #0]
 8005a52:	3301      	adds	r3, #1
 8005a54:	b29a      	uxth	r2, r3
 8005a56:	4b81      	ldr	r3, [pc, #516]	; (8005c5c <HAL_TSC_ConvCpltCallback+0x2b4>)
 8005a58:	801a      	strh	r2, [r3, #0]
 8005a5a:	e0ba      	b.n	8005bd2 <HAL_TSC_ConvCpltCallback+0x22a>
			}
			else{
				touch = (uhTSCAcquisitionValue <= (ts1_threshold - THRESHOLD_TOLERANCE));
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	ee07 3a90 	vmov	s15, r3
 8005a62:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005a66:	4b7e      	ldr	r3, [pc, #504]	; (8005c60 <HAL_TSC_ConvCpltCallback+0x2b8>)
 8005a68:	edd3 7a00 	vldr	s15, [r3]
 8005a6c:	eddf 6a7d 	vldr	s13, [pc, #500]	; 8005c64 <HAL_TSC_ConvCpltCallback+0x2bc>
 8005a70:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005a74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a7c:	bf94      	ite	ls
 8005a7e:	2301      	movls	r3, #1
 8005a80:	2300      	movhi	r3, #0
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	75fb      	strb	r3, [r7, #23]

				// if not touched, update threshold
				if(touch == 0){
 8005a86:	7dfb      	ldrb	r3, [r7, #23]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	f040 80a2 	bne.w	8005bd2 <HAL_TSC_ConvCpltCallback+0x22a>
					ts1_threshold = uhTSCAcquisitionValue * ALPHA_WEIGHT + ts1_threshold * (1-ALPHA_WEIGHT);
 8005a8e:	6938      	ldr	r0, [r7, #16]
 8005a90:	f7fa fcc2 	bl	8000418 <__aeabi_ui2d>
 8005a94:	a36c      	add	r3, pc, #432	; (adr r3, 8005c48 <HAL_TSC_ConvCpltCallback+0x2a0>)
 8005a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a9a:	f7fa fd37 	bl	800050c <__aeabi_dmul>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	460c      	mov	r4, r1
 8005aa2:	4625      	mov	r5, r4
 8005aa4:	461c      	mov	r4, r3
 8005aa6:	4b6e      	ldr	r3, [pc, #440]	; (8005c60 <HAL_TSC_ConvCpltCallback+0x2b8>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f7fa fcd6 	bl	800045c <__aeabi_f2d>
 8005ab0:	a367      	add	r3, pc, #412	; (adr r3, 8005c50 <HAL_TSC_ConvCpltCallback+0x2a8>)
 8005ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab6:	f7fa fd29 	bl	800050c <__aeabi_dmul>
 8005aba:	4602      	mov	r2, r0
 8005abc:	460b      	mov	r3, r1
 8005abe:	4620      	mov	r0, r4
 8005ac0:	4629      	mov	r1, r5
 8005ac2:	f7fa fb6d 	bl	80001a0 <__adddf3>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	460c      	mov	r4, r1
 8005aca:	4618      	mov	r0, r3
 8005acc:	4621      	mov	r1, r4
 8005ace:	f7fa ffcd 	bl	8000a6c <__aeabi_d2f>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	4b62      	ldr	r3, [pc, #392]	; (8005c60 <HAL_TSC_ConvCpltCallback+0x2b8>)
 8005ad6:	601a      	str	r2, [r3, #0]
 8005ad8:	e07b      	b.n	8005bd2 <HAL_TSC_ConvCpltCallback+0x22a>
				}
			}
		} else {
			if(calibration_1 <= CALIBRATION_SAMPLES){
 8005ada:	4b63      	ldr	r3, [pc, #396]	; (8005c68 <HAL_TSC_ConvCpltCallback+0x2c0>)
 8005adc:	881b      	ldrh	r3, [r3, #0]
 8005ade:	2b64      	cmp	r3, #100	; 0x64
 8005ae0:	d83a      	bhi.n	8005b58 <HAL_TSC_ConvCpltCallback+0x1b0>
				touch = 0;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	75fb      	strb	r3, [r7, #23]
				if(calibration_1 == 0){
 8005ae6:	4b60      	ldr	r3, [pc, #384]	; (8005c68 <HAL_TSC_ConvCpltCallback+0x2c0>)
 8005ae8:	881b      	ldrh	r3, [r3, #0]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d108      	bne.n	8005b00 <HAL_TSC_ConvCpltCallback+0x158>
					ts2_threshold = uhTSCAcquisitionValue;
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	ee07 3a90 	vmov	s15, r3
 8005af4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005af8:	4b5c      	ldr	r3, [pc, #368]	; (8005c6c <HAL_TSC_ConvCpltCallback+0x2c4>)
 8005afa:	edc3 7a00 	vstr	s15, [r3]
 8005afe:	e024      	b.n	8005b4a <HAL_TSC_ConvCpltCallback+0x1a2>
				}else{
					ts2_threshold = uhTSCAcquisitionValue * ALPHA_WEIGHT + ts2_threshold * (1-ALPHA_WEIGHT);
 8005b00:	6938      	ldr	r0, [r7, #16]
 8005b02:	f7fa fc89 	bl	8000418 <__aeabi_ui2d>
 8005b06:	a350      	add	r3, pc, #320	; (adr r3, 8005c48 <HAL_TSC_ConvCpltCallback+0x2a0>)
 8005b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b0c:	f7fa fcfe 	bl	800050c <__aeabi_dmul>
 8005b10:	4603      	mov	r3, r0
 8005b12:	460c      	mov	r4, r1
 8005b14:	4625      	mov	r5, r4
 8005b16:	461c      	mov	r4, r3
 8005b18:	4b54      	ldr	r3, [pc, #336]	; (8005c6c <HAL_TSC_ConvCpltCallback+0x2c4>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f7fa fc9d 	bl	800045c <__aeabi_f2d>
 8005b22:	a34b      	add	r3, pc, #300	; (adr r3, 8005c50 <HAL_TSC_ConvCpltCallback+0x2a8>)
 8005b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b28:	f7fa fcf0 	bl	800050c <__aeabi_dmul>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	460b      	mov	r3, r1
 8005b30:	4620      	mov	r0, r4
 8005b32:	4629      	mov	r1, r5
 8005b34:	f7fa fb34 	bl	80001a0 <__adddf3>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	460c      	mov	r4, r1
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	4621      	mov	r1, r4
 8005b40:	f7fa ff94 	bl	8000a6c <__aeabi_d2f>
 8005b44:	4602      	mov	r2, r0
 8005b46:	4b49      	ldr	r3, [pc, #292]	; (8005c6c <HAL_TSC_ConvCpltCallback+0x2c4>)
 8005b48:	601a      	str	r2, [r3, #0]
				}
				calibration_1 += 1;
 8005b4a:	4b47      	ldr	r3, [pc, #284]	; (8005c68 <HAL_TSC_ConvCpltCallback+0x2c0>)
 8005b4c:	881b      	ldrh	r3, [r3, #0]
 8005b4e:	3301      	adds	r3, #1
 8005b50:	b29a      	uxth	r2, r3
 8005b52:	4b45      	ldr	r3, [pc, #276]	; (8005c68 <HAL_TSC_ConvCpltCallback+0x2c0>)
 8005b54:	801a      	strh	r2, [r3, #0]
 8005b56:	e03c      	b.n	8005bd2 <HAL_TSC_ConvCpltCallback+0x22a>

			}
			else{
				touch = (uhTSCAcquisitionValue <= (ts2_threshold - THRESHOLD_TOLERANCE));
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	ee07 3a90 	vmov	s15, r3
 8005b5e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005b62:	4b42      	ldr	r3, [pc, #264]	; (8005c6c <HAL_TSC_ConvCpltCallback+0x2c4>)
 8005b64:	edd3 7a00 	vldr	s15, [r3]
 8005b68:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8005c64 <HAL_TSC_ConvCpltCallback+0x2bc>
 8005b6c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005b70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b78:	bf94      	ite	ls
 8005b7a:	2301      	movls	r3, #1
 8005b7c:	2300      	movhi	r3, #0
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	75fb      	strb	r3, [r7, #23]

				// if not touched, update threshold
				if(touch == 0){
 8005b82:	7dfb      	ldrb	r3, [r7, #23]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d124      	bne.n	8005bd2 <HAL_TSC_ConvCpltCallback+0x22a>
					ts2_threshold = uhTSCAcquisitionValue * ALPHA_WEIGHT + ts2_threshold * (1-ALPHA_WEIGHT);
 8005b88:	6938      	ldr	r0, [r7, #16]
 8005b8a:	f7fa fc45 	bl	8000418 <__aeabi_ui2d>
 8005b8e:	a32e      	add	r3, pc, #184	; (adr r3, 8005c48 <HAL_TSC_ConvCpltCallback+0x2a0>)
 8005b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b94:	f7fa fcba 	bl	800050c <__aeabi_dmul>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	460c      	mov	r4, r1
 8005b9c:	4625      	mov	r5, r4
 8005b9e:	461c      	mov	r4, r3
 8005ba0:	4b32      	ldr	r3, [pc, #200]	; (8005c6c <HAL_TSC_ConvCpltCallback+0x2c4>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f7fa fc59 	bl	800045c <__aeabi_f2d>
 8005baa:	a329      	add	r3, pc, #164	; (adr r3, 8005c50 <HAL_TSC_ConvCpltCallback+0x2a8>)
 8005bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb0:	f7fa fcac 	bl	800050c <__aeabi_dmul>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	460b      	mov	r3, r1
 8005bb8:	4620      	mov	r0, r4
 8005bba:	4629      	mov	r1, r5
 8005bbc:	f7fa faf0 	bl	80001a0 <__adddf3>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	460c      	mov	r4, r1
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	4621      	mov	r1, r4
 8005bc8:	f7fa ff50 	bl	8000a6c <__aeabi_d2f>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	4b27      	ldr	r3, [pc, #156]	; (8005c6c <HAL_TSC_ConvCpltCallback+0x2c4>)
 8005bd0:	601a      	str	r2, [r3, #0]
				}
			}
		}

		cur_time = HAL_GetTick();
 8005bd2:	f000 fb7d 	bl	80062d0 <HAL_GetTick>
 8005bd6:	60f8      	str	r0, [r7, #12]
		debounce(&dbs[cap_sensor], touch, cur_time);
 8005bd8:	4b1f      	ldr	r3, [pc, #124]	; (8005c58 <HAL_TSC_ConvCpltCallback+0x2b0>)
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	00db      	lsls	r3, r3, #3
 8005bde:	4a24      	ldr	r2, [pc, #144]	; (8005c70 <HAL_TSC_ConvCpltCallback+0x2c8>)
 8005be0:	4413      	add	r3, r2
 8005be2:	7df9      	ldrb	r1, [r7, #23]
 8005be4:	68fa      	ldr	r2, [r7, #12]
 8005be6:	4618      	mov	r0, r3
 8005be8:	f000 fa28 	bl	800603c <debounce>
		process_touches(&touch_detector, dbs, cur_time);
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	4920      	ldr	r1, [pc, #128]	; (8005c70 <HAL_TSC_ConvCpltCallback+0x2c8>)
 8005bf0:	4820      	ldr	r0, [pc, #128]	; (8005c74 <HAL_TSC_ConvCpltCallback+0x2cc>)
 8005bf2:	f000 f879 	bl	8005ce8 <process_touches>
	}

	//Switches between the two channels to be acquired
	if (cap_sensor == 0) {
 8005bf6:	4b18      	ldr	r3, [pc, #96]	; (8005c58 <HAL_TSC_ConvCpltCallback+0x2b0>)
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d106      	bne.n	8005c0c <HAL_TSC_ConvCpltCallback+0x264>
		IoConfig.ChannelIOs = TSC_GROUP2_IO4; /* TS4 touchkey */
 8005bfe:	4b1e      	ldr	r3, [pc, #120]	; (8005c78 <HAL_TSC_ConvCpltCallback+0x2d0>)
 8005c00:	2280      	movs	r2, #128	; 0x80
 8005c02:	601a      	str	r2, [r3, #0]
		cap_sensor = 1;
 8005c04:	4b14      	ldr	r3, [pc, #80]	; (8005c58 <HAL_TSC_ConvCpltCallback+0x2b0>)
 8005c06:	2201      	movs	r2, #1
 8005c08:	701a      	strb	r2, [r3, #0]
 8005c0a:	e005      	b.n	8005c18 <HAL_TSC_ConvCpltCallback+0x270>
	} else {
		IoConfig.ChannelIOs = TSC_GROUP2_IO3; /* TS3 touchkey */
 8005c0c:	4b1a      	ldr	r3, [pc, #104]	; (8005c78 <HAL_TSC_ConvCpltCallback+0x2d0>)
 8005c0e:	2240      	movs	r2, #64	; 0x40
 8005c10:	601a      	str	r2, [r3, #0]
		cap_sensor = 0;
 8005c12:	4b11      	ldr	r3, [pc, #68]	; (8005c58 <HAL_TSC_ConvCpltCallback+0x2b0>)
 8005c14:	2200      	movs	r2, #0
 8005c16:	701a      	strb	r2, [r3, #0]
	}

	if (HAL_TSC_IOConfig(htsc, &IoConfig) != HAL_OK) {
 8005c18:	4917      	ldr	r1, [pc, #92]	; (8005c78 <HAL_TSC_ConvCpltCallback+0x2d0>)
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f008 f8cf 	bl	800ddbe <HAL_TSC_IOConfig>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d001      	beq.n	8005c2a <HAL_TSC_ConvCpltCallback+0x282>
		/* Initialization Error */
		Error_Handler();
 8005c26:	f7fe fb87 	bl	8004338 <Error_Handler>
	}

	/*##-9- Re-start the acquisition process ###################################*/
	if (HAL_TSC_Start_IT(htsc) != HAL_OK) {
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f008 f836 	bl	800dc9c <HAL_TSC_Start_IT>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d001      	beq.n	8005c3a <HAL_TSC_ConvCpltCallback+0x292>
		/* Acquisition Error */
		Error_Handler();
 8005c36:	f7fe fb7f 	bl	8004338 <Error_Handler>
	}

}
 8005c3a:	bf00      	nop
 8005c3c:	3718      	adds	r7, #24
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bdb0      	pop	{r4, r5, r7, pc}
 8005c42:	bf00      	nop
 8005c44:	f3af 8000 	nop.w
 8005c48:	47ae147b 	.word	0x47ae147b
 8005c4c:	3f847ae1 	.word	0x3f847ae1
 8005c50:	7ae147ae 	.word	0x7ae147ae
 8005c54:	3fefae14 	.word	0x3fefae14
 8005c58:	20000af8 	.word	0x20000af8
 8005c5c:	20000b0c 	.word	0x20000b0c
 8005c60:	2002851c 	.word	0x2002851c
 8005c64:	42700000 	.word	0x42700000
 8005c68:	20000b0e 	.word	0x20000b0e
 8005c6c:	20028540 	.word	0x20028540
 8005c70:	20000afc 	.word	0x20000afc
 8005c74:	20028524 	.word	0x20028524
 8005c78:	20028510 	.word	0x20028510

08005c7c <touchSensingStart>:


void touchSensingStart(void) {
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	af00      	add	r7, sp, #0
	ts1_threshold = 0;
 8005c80:	4b15      	ldr	r3, [pc, #84]	; (8005cd8 <touchSensingStart+0x5c>)
 8005c82:	f04f 0200 	mov.w	r2, #0
 8005c86:	601a      	str	r2, [r3, #0]
	ts2_threshold = 0;
 8005c88:	4b14      	ldr	r3, [pc, #80]	; (8005cdc <touchSensingStart+0x60>)
 8005c8a:	f04f 0200 	mov.w	r2, #0
 8005c8e:	601a      	str	r2, [r3, #0]

	IoConfig.ChannelIOs = TSC_GROUP2_IO3; /* Start with the first channel */
 8005c90:	4b13      	ldr	r3, [pc, #76]	; (8005ce0 <touchSensingStart+0x64>)
 8005c92:	2240      	movs	r2, #64	; 0x40
 8005c94:	601a      	str	r2, [r3, #0]
	IoConfig.SamplingIOs = TSC_GROUP2_IO1;
 8005c96:	4b12      	ldr	r3, [pc, #72]	; (8005ce0 <touchSensingStart+0x64>)
 8005c98:	2210      	movs	r2, #16
 8005c9a:	609a      	str	r2, [r3, #8]
	IoConfig.ShieldIOs = 0;
 8005c9c:	4b10      	ldr	r3, [pc, #64]	; (8005ce0 <touchSensingStart+0x64>)
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	605a      	str	r2, [r3, #4]

	if (HAL_TSC_IOConfig(&htsc, &IoConfig) != HAL_OK) {
 8005ca2:	490f      	ldr	r1, [pc, #60]	; (8005ce0 <touchSensingStart+0x64>)
 8005ca4:	480f      	ldr	r0, [pc, #60]	; (8005ce4 <touchSensingStart+0x68>)
 8005ca6:	f008 f88a 	bl	800ddbe <HAL_TSC_IOConfig>
 8005caa:	4603      	mov	r3, r0
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d001      	beq.n	8005cb4 <touchSensingStart+0x38>
		/* Initialization Error */
		Error_Handler();
 8005cb0:	f7fe fb42 	bl	8004338 <Error_Handler>
	}

	HAL_TSC_IODischarge(&htsc, ENABLE);
 8005cb4:	2101      	movs	r1, #1
 8005cb6:	480b      	ldr	r0, [pc, #44]	; (8005ce4 <touchSensingStart+0x68>)
 8005cb8:	f008 f8c4 	bl	800de44 <HAL_TSC_IODischarge>
	HAL_Delay(5); /* 1 ms is more than enough to discharge all capacitors */
 8005cbc:	2005      	movs	r0, #5
 8005cbe:	f000 fb1f 	bl	8006300 <HAL_Delay>
	if (HAL_TSC_Start_IT(&htsc) != HAL_OK) {
 8005cc2:	4808      	ldr	r0, [pc, #32]	; (8005ce4 <touchSensingStart+0x68>)
 8005cc4:	f007 ffea 	bl	800dc9c <HAL_TSC_Start_IT>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d001      	beq.n	8005cd2 <touchSensingStart+0x56>
		/* Acquisition Error */
		Error_Handler();
 8005cce:	f7fe fb33 	bl	8004338 <Error_Handler>
	}
}
 8005cd2:	bf00      	nop
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	2002851c 	.word	0x2002851c
 8005cdc:	20028540 	.word	0x20028540
 8005ce0:	20028510 	.word	0x20028510
 8005ce4:	20028544 	.word	0x20028544

08005ce8 <process_touches>:
}

uint8_t temp_flag = 1;
enum TouchType action = None;

void process_touches(TouchDetector *self, Debouncer *dbs, uint32_t cur_time) {
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b08c      	sub	sp, #48	; 0x30
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	60b9      	str	r1, [r7, #8]
 8005cf2:	607a      	str	r2, [r7, #4]

//	action = None;

	if (self->touch_state == Idle) {
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	7e1b      	ldrb	r3, [r3, #24]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d123      	bne.n	8005d44 <process_touches+0x5c>
		if (dbs[0].clean_out) {
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	795b      	ldrb	r3, [r3, #5]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d00c      	beq.n	8005d1e <process_touches+0x36>
			// front button is held

			self->touch_state = OnePressed;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2201      	movs	r2, #1
 8005d08:	761a      	strb	r2, [r3, #24]
			self->touches[0].cap_idx = 0;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	701a      	strb	r2, [r3, #0]
			self->touches[0].start_t = cur_time;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	605a      	str	r2, [r3, #4]
			action = FrontHold;
 8005d16:	4b99      	ldr	r3, [pc, #612]	; (8005f7c <process_touches+0x294>)
 8005d18:	2205      	movs	r2, #5
 8005d1a:	701a      	strb	r2, [r3, #0]
 8005d1c:	e126      	b.n	8005f6c <process_touches+0x284>

		} else if (dbs[1].clean_out) {
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	3308      	adds	r3, #8
 8005d22:	795b      	ldrb	r3, [r3, #5]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	f000 8121 	beq.w	8005f6c <process_touches+0x284>
			// back button is held

			self->touch_state = OnePressed;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	761a      	strb	r2, [r3, #24]
			self->touches[0].cap_idx = 1;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2201      	movs	r2, #1
 8005d34:	701a      	strb	r2, [r3, #0]
			self->touches[0].start_t = cur_time;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	605a      	str	r2, [r3, #4]
			action = BackHold;
 8005d3c:	4b8f      	ldr	r3, [pc, #572]	; (8005f7c <process_touches+0x294>)
 8005d3e:	2206      	movs	r2, #6
 8005d40:	701a      	strb	r2, [r3, #0]
 8005d42:	e113      	b.n	8005f6c <process_touches+0x284>
		}
	} else if (self->touch_state == OnePressed) {
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	7e1b      	ldrb	r3, [r3, #24]
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d12d      	bne.n	8005da8 <process_touches+0xc0>
		if (dbs[1 - self->touches[0].cap_idx].clean_out) {
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	f1c3 0301 	rsb	r3, r3, #1
 8005d54:	00db      	lsls	r3, r3, #3
 8005d56:	68ba      	ldr	r2, [r7, #8]
 8005d58:	4413      	add	r3, r2
 8005d5a:	795b      	ldrb	r3, [r3, #5]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d010      	beq.n	8005d82 <process_touches+0x9a>
			self->touch_state = TwoPressed;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2202      	movs	r2, #2
 8005d64:	761a      	strb	r2, [r3, #24]
			self->touches[1].cap_idx = 1 - self->touches[0].cap_idx;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	f1c3 0301 	rsb	r3, r3, #1
 8005d6e:	b2da      	uxtb	r2, r3
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	731a      	strb	r2, [r3, #12]
			self->touches[1].start_t = cur_time;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	611a      	str	r2, [r3, #16]
			action = BothHold;
 8005d7a:	4b80      	ldr	r3, [pc, #512]	; (8005f7c <process_touches+0x294>)
 8005d7c:	2207      	movs	r2, #7
 8005d7e:	701a      	strb	r2, [r3, #0]
 8005d80:	e0f4      	b.n	8005f6c <process_touches+0x284>

		} else if (!dbs[self->touches[0].cap_idx].clean_out) {
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	00db      	lsls	r3, r3, #3
 8005d88:	68ba      	ldr	r2, [r7, #8]
 8005d8a:	4413      	add	r3, r2
 8005d8c:	795b      	ldrb	r3, [r3, #5]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	f040 80ec 	bne.w	8005f6c <process_touches+0x284>
			self->touch_state = OneReleasedNoPressed;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2203      	movs	r2, #3
 8005d98:	761a      	strb	r2, [r3, #24]
			self->touches[0].end_t = cur_time;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	609a      	str	r2, [r3, #8]
			action = BothRelease;
 8005da0:	4b76      	ldr	r3, [pc, #472]	; (8005f7c <process_touches+0x294>)
 8005da2:	2208      	movs	r2, #8
 8005da4:	701a      	strb	r2, [r3, #0]
 8005da6:	e0e1      	b.n	8005f6c <process_touches+0x284>

		}
	} else if (self->touch_state == TwoPressed) {
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	7e1b      	ldrb	r3, [r3, #24]
 8005dac:	2b02      	cmp	r3, #2
 8005dae:	d11e      	bne.n	8005dee <process_touches+0x106>
		if (!dbs[self->touches[0].cap_idx].clean_out) {
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	00db      	lsls	r3, r3, #3
 8005db6:	68ba      	ldr	r2, [r7, #8]
 8005db8:	4413      	add	r3, r2
 8005dba:	795b      	ldrb	r3, [r3, #5]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d106      	bne.n	8005dce <process_touches+0xe6>
			self->touch_state = FirstReleasedSecondPressed;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2204      	movs	r2, #4
 8005dc4:	761a      	strb	r2, [r3, #24]
			self->touches[0].end_t = cur_time;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	609a      	str	r2, [r3, #8]
 8005dcc:	e0ce      	b.n	8005f6c <process_touches+0x284>
		} else if (!dbs[self->touches[1].cap_idx].clean_out) {
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	7b1b      	ldrb	r3, [r3, #12]
 8005dd2:	00db      	lsls	r3, r3, #3
 8005dd4:	68ba      	ldr	r2, [r7, #8]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	795b      	ldrb	r3, [r3, #5]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	f040 80c6 	bne.w	8005f6c <process_touches+0x284>
			self->touch_state = SecondReleasedFirstPressed;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2205      	movs	r2, #5
 8005de4:	761a      	strb	r2, [r3, #24]
			self->touches[1].end_t = cur_time;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	615a      	str	r2, [r3, #20]
 8005dec:	e0be      	b.n	8005f6c <process_touches+0x284>
		}
	} else if (self->touch_state == OneReleasedNoPressed) {
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	7e1b      	ldrb	r3, [r3, #24]
 8005df2:	2b03      	cmp	r3, #3
 8005df4:	d134      	bne.n	8005e60 <process_touches+0x178>
		if (dbs[1 - self->touches[0].cap_idx].clean_out) {
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	f1c3 0301 	rsb	r3, r3, #1
 8005dfe:	00db      	lsls	r3, r3, #3
 8005e00:	68ba      	ldr	r2, [r7, #8]
 8005e02:	4413      	add	r3, r2
 8005e04:	795b      	ldrb	r3, [r3, #5]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00d      	beq.n	8005e26 <process_touches+0x13e>
			self->touch_state = FirstReleasedSecondPressed;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2204      	movs	r2, #4
 8005e0e:	761a      	strb	r2, [r3, #24]
			self->touches[1].cap_idx = (1 - self->touches[0].cap_idx);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	f1c3 0301 	rsb	r3, r3, #1
 8005e18:	b2da      	uxtb	r2, r3
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	731a      	strb	r2, [r3, #12]
			self->touches[1].start_t = cur_time;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	611a      	str	r2, [r3, #16]
 8005e24:	e0a2      	b.n	8005f6c <process_touches+0x284>
		} else if (cur_time - self->touches[0].end_t > MIN_SWIPE_GAP) {
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	2b0a      	cmp	r3, #10
 8005e30:	f240 809c 	bls.w	8005f6c <process_touches+0x284>
			uint32_t touch_duration = self->touches[0].end_t - self->touches[0].start_t;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	689a      	ldr	r2, [r3, #8]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	617b      	str	r3, [r7, #20]
			if (TAP_MIN_THRESHOLD < touch_duration && touch_duration < TAP_MAX_THRESHOLD) {
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	2b28      	cmp	r3, #40	; 0x28
 8005e44:	d905      	bls.n	8005e52 <process_touches+0x16a>
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	2bc7      	cmp	r3, #199	; 0xc7
 8005e4a:	d802      	bhi.n	8005e52 <process_touches+0x16a>
				//Register a tap
				action = BothRelease;
 8005e4c:	4b4b      	ldr	r3, [pc, #300]	; (8005f7c <process_touches+0x294>)
 8005e4e:	2208      	movs	r2, #8
 8005e50:	701a      	strb	r2, [r3, #0]
			}
			lightsSimpleMessageReceivedTouch = 0;
 8005e52:	4b4b      	ldr	r3, [pc, #300]	; (8005f80 <process_touches+0x298>)
 8005e54:	2200      	movs	r2, #0
 8005e56:	601a      	str	r2, [r3, #0]
			self->touch_state = Idle;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	761a      	strb	r2, [r3, #24]
 8005e5e:	e085      	b.n	8005f6c <process_touches+0x284>
		}
	} else if (self->touch_state == FirstReleasedSecondPressed) {
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	7e1b      	ldrb	r3, [r3, #24]
 8005e64:	2b04      	cmp	r3, #4
 8005e66:	d148      	bne.n	8005efa <process_touches+0x212>
		if (!dbs[self->touches[1].cap_idx].clean_out) {
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	7b1b      	ldrb	r3, [r3, #12]
 8005e6c:	00db      	lsls	r3, r3, #3
 8005e6e:	68ba      	ldr	r2, [r7, #8]
 8005e70:	4413      	add	r3, r2
 8005e72:	795b      	ldrb	r3, [r3, #5]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d179      	bne.n	8005f6c <process_touches+0x284>
			self->touch_state = Idle;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	761a      	strb	r2, [r3, #24]
			self->touches[1].end_t = cur_time;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	615a      	str	r2, [r3, #20]
			action = None;
 8005e84:	4b3d      	ldr	r3, [pc, #244]	; (8005f7c <process_touches+0x294>)
 8005e86:	2200      	movs	r2, #0
 8005e88:	701a      	strb	r2, [r3, #0]
			uint32_t touches_start_diff = self->touches[1].start_t - self->touches[0].start_t;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	691a      	ldr	r2, [r3, #16]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	1ad3      	subs	r3, r2, r3
 8005e94:	623b      	str	r3, [r7, #32]
			uint32_t touches_end_diff = self->touches[1].end_t - self->touches[0].end_t;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	695a      	ldr	r2, [r3, #20]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	1ad3      	subs	r3, r2, r3
 8005ea0:	61fb      	str	r3, [r7, #28]
			uint32_t touch_duration = self->touches[1].end_t - self->touches[0].start_t;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	695a      	ldr	r2, [r3, #20]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	1ad3      	subs	r3, r2, r3
 8005eac:	61bb      	str	r3, [r7, #24]

			//If touch start and touch end differences were small, then it was likely just a tap
			if ((touches_start_diff <= TAP_MIN_THRESHOLD) && (touches_end_diff <= TAP_MIN_THRESHOLD)
 8005eae:	6a3b      	ldr	r3, [r7, #32]
 8005eb0:	2b28      	cmp	r3, #40	; 0x28
 8005eb2:	d80c      	bhi.n	8005ece <process_touches+0x1e6>
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	2b28      	cmp	r3, #40	; 0x28
 8005eb8:	d809      	bhi.n	8005ece <process_touches+0x1e6>
					&& (TAP_MIN_THRESHOLD < touch_duration) && (touch_duration < TAP_MAX_THRESHOLD)) {
 8005eba:	69bb      	ldr	r3, [r7, #24]
 8005ebc:	2b28      	cmp	r3, #40	; 0x28
 8005ebe:	d906      	bls.n	8005ece <process_touches+0x1e6>
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	2bc7      	cmp	r3, #199	; 0xc7
 8005ec4:	d803      	bhi.n	8005ece <process_touches+0x1e6>
				//Register a tap
				action = BothRelease;
 8005ec6:	4b2d      	ldr	r3, [pc, #180]	; (8005f7c <process_touches+0x294>)
 8005ec8:	2208      	movs	r2, #8
 8005eca:	701a      	strb	r2, [r3, #0]
 8005ecc:	e011      	b.n	8005ef2 <process_touches+0x20a>
			}
			//Otherwise, it was a swipe. Might have to adjust these thresholds to allow swipe detection
			else if (touches_start_diff > TAP_MIN_THRESHOLD && touches_end_diff > TAP_MIN_THRESHOLD) {
 8005ece:	6a3b      	ldr	r3, [r7, #32]
 8005ed0:	2b28      	cmp	r3, #40	; 0x28
 8005ed2:	d90e      	bls.n	8005ef2 <process_touches+0x20a>
 8005ed4:	69fb      	ldr	r3, [r7, #28]
 8005ed6:	2b28      	cmp	r3, #40	; 0x28
 8005ed8:	d90b      	bls.n	8005ef2 <process_touches+0x20a>
				//Register a swipe
				action = (self->touches[0].cap_idx << 1) | self->touches[1].cap_idx;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	005b      	lsls	r3, r3, #1
 8005ee0:	b25a      	sxtb	r2, r3
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	7b1b      	ldrb	r3, [r3, #12]
 8005ee6:	b25b      	sxtb	r3, r3
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	b25b      	sxtb	r3, r3
 8005eec:	b2da      	uxtb	r2, r3
 8005eee:	4b23      	ldr	r3, [pc, #140]	; (8005f7c <process_touches+0x294>)
 8005ef0:	701a      	strb	r2, [r3, #0]
			}

			self->touch_state = Idle;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	761a      	strb	r2, [r3, #24]
 8005ef8:	e038      	b.n	8005f6c <process_touches+0x284>
		}
	} else if (self->touch_state == SecondReleasedFirstPressed) {
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	7e1b      	ldrb	r3, [r3, #24]
 8005efe:	2b05      	cmp	r3, #5
 8005f00:	d134      	bne.n	8005f6c <process_touches+0x284>
		if (!dbs[self->touches[0].cap_idx].clean_out) {
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	00db      	lsls	r3, r3, #3
 8005f08:	68ba      	ldr	r2, [r7, #8]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	795b      	ldrb	r3, [r3, #5]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d12c      	bne.n	8005f6c <process_touches+0x284>
			self->touch_state = Idle;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2200      	movs	r2, #0
 8005f16:	761a      	strb	r2, [r3, #24]
			self->touches[0].end_t = cur_time;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	609a      	str	r2, [r3, #8]

			uint32_t touches_start_diff = self->touches[1].start_t - self->touches[0].start_t;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	691a      	ldr	r2, [r3, #16]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	1ad3      	subs	r3, r2, r3
 8005f28:	62fb      	str	r3, [r7, #44]	; 0x2c
			uint32_t touches_end_diff = self->touches[0].end_t - self->touches[1].end_t;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	689a      	ldr	r2, [r3, #8]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	695b      	ldr	r3, [r3, #20]
 8005f32:	1ad3      	subs	r3, r2, r3
 8005f34:	62bb      	str	r3, [r7, #40]	; 0x28
			uint32_t touch_duration = self->touches[0].end_t - self->touches[0].start_t;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	689a      	ldr	r2, [r3, #8]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	1ad3      	subs	r3, r2, r3
 8005f40:	627b      	str	r3, [r7, #36]	; 0x24

			//If touch start and touch end differences were small, then it was likely just a tap
			if ((touches_start_diff <= TAP_MIN_THRESHOLD) && (touches_end_diff <= TAP_MIN_THRESHOLD)
 8005f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f44:	2b28      	cmp	r3, #40	; 0x28
 8005f46:	d80b      	bhi.n	8005f60 <process_touches+0x278>
 8005f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f4a:	2b28      	cmp	r3, #40	; 0x28
 8005f4c:	d808      	bhi.n	8005f60 <process_touches+0x278>
					&& (TAP_MIN_THRESHOLD < touch_duration) && (touch_duration < TAP_MAX_THRESHOLD)) {
 8005f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f50:	2b28      	cmp	r3, #40	; 0x28
 8005f52:	d905      	bls.n	8005f60 <process_touches+0x278>
 8005f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f56:	2bc7      	cmp	r3, #199	; 0xc7
 8005f58:	d802      	bhi.n	8005f60 <process_touches+0x278>
				//Register a tap
				action = BothRelease;
 8005f5a:	4b08      	ldr	r3, [pc, #32]	; (8005f7c <process_touches+0x294>)
 8005f5c:	2208      	movs	r2, #8
 8005f5e:	701a      	strb	r2, [r3, #0]
			}
			lightsSimpleMessageReceivedTouch = 0;
 8005f60:	4b07      	ldr	r3, [pc, #28]	; (8005f80 <process_touches+0x298>)
 8005f62:	2200      	movs	r2, #0
 8005f64:	601a      	str	r2, [r3, #0]
			self->touch_state = Idle;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	761a      	strb	r2, [r3, #24]
		}
	}

	if( action == None){
 8005f6c:	4b03      	ldr	r3, [pc, #12]	; (8005f7c <process_touches+0x294>)
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d107      	bne.n	8005f84 <process_touches+0x29c>
		lightsSimpleMessageReceivedTouch = 0x00; // off
 8005f74:	4b02      	ldr	r3, [pc, #8]	; (8005f80 <process_touches+0x298>)
 8005f76:	2200      	movs	r2, #0
 8005f78:	601a      	str	r2, [r3, #0]
 8005f7a:	e042      	b.n	8006002 <process_touches+0x31a>
 8005f7c:	20000b14 	.word	0x20000b14
 8005f80:	20028520 	.word	0x20028520

	}else if(action == SwipeForward){
 8005f84:	4b29      	ldr	r3, [pc, #164]	; (800602c <process_touches+0x344>)
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d103      	bne.n	8005f94 <process_touches+0x2ac>
		lightsSimpleMessageReceivedTouch = 0x03; // cyan (green + blue)
 8005f8c:	4b28      	ldr	r3, [pc, #160]	; (8006030 <process_touches+0x348>)
 8005f8e:	2203      	movs	r2, #3
 8005f90:	601a      	str	r2, [r3, #0]
 8005f92:	e036      	b.n	8006002 <process_touches+0x31a>

//		lightsSimpleMessageReceivedTouch |= 0x03 << 2;
//		lightsSimpleMessageReceivedTouch |= 0x03 << 4;
	}else if(action == SwipeBackward){
 8005f94:	4b25      	ldr	r3, [pc, #148]	; (800602c <process_touches+0x344>)
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	2b02      	cmp	r3, #2
 8005f9a:	d103      	bne.n	8005fa4 <process_touches+0x2bc>
		lightsSimpleMessageReceivedTouch = (0x01 << 6) | 0x01; // orange (green + red)
 8005f9c:	4b24      	ldr	r3, [pc, #144]	; (8006030 <process_touches+0x348>)
 8005f9e:	2241      	movs	r2, #65	; 0x41
 8005fa0:	601a      	str	r2, [r3, #0]
 8005fa2:	e02e      	b.n	8006002 <process_touches+0x31a>

//		lightsSimpleMessageReceivedTouch |= lightsSimpleMessageReceivedTouch << 2;
//		lightsSimpleMessageReceivedTouch |= lightsSimpleMessageReceivedTouch << 4;
	}else if(action == FrontRelease){
 8005fa4:	4b21      	ldr	r3, [pc, #132]	; (800602c <process_touches+0x344>)
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	2b03      	cmp	r3, #3
 8005faa:	d103      	bne.n	8005fb4 <process_touches+0x2cc>
		lightsSimpleMessageReceivedTouch = 0x00; // off
 8005fac:	4b20      	ldr	r3, [pc, #128]	; (8006030 <process_touches+0x348>)
 8005fae:	2200      	movs	r2, #0
 8005fb0:	601a      	str	r2, [r3, #0]
 8005fb2:	e026      	b.n	8006002 <process_touches+0x31a>
	}else if(action == BackRelease){
 8005fb4:	4b1d      	ldr	r3, [pc, #116]	; (800602c <process_touches+0x344>)
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	2b04      	cmp	r3, #4
 8005fba:	d103      	bne.n	8005fc4 <process_touches+0x2dc>
		lightsSimpleMessageReceivedTouch = 0x00; // off
 8005fbc:	4b1c      	ldr	r3, [pc, #112]	; (8006030 <process_touches+0x348>)
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	601a      	str	r2, [r3, #0]
 8005fc2:	e01e      	b.n	8006002 <process_touches+0x31a>
	}else if(action == FrontHold){
 8005fc4:	4b19      	ldr	r3, [pc, #100]	; (800602c <process_touches+0x344>)
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	2b05      	cmp	r3, #5
 8005fca:	d103      	bne.n	8005fd4 <process_touches+0x2ec>
		lightsSimpleMessageReceivedTouch = 0x01; // green
 8005fcc:	4b18      	ldr	r3, [pc, #96]	; (8006030 <process_touches+0x348>)
 8005fce:	2201      	movs	r2, #1
 8005fd0:	601a      	str	r2, [r3, #0]
 8005fd2:	e016      	b.n	8006002 <process_touches+0x31a>

//		lightsSimpleMessageReceivedTouch |= 0x01 << 2;
//		lightsSimpleMessageReceivedTouch |= 0x01 << 4;
	}else if(action == BackHold){
 8005fd4:	4b15      	ldr	r3, [pc, #84]	; (800602c <process_touches+0x344>)
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	2b06      	cmp	r3, #6
 8005fda:	d103      	bne.n	8005fe4 <process_touches+0x2fc>
		lightsSimpleMessageReceivedTouch = 0x02; // blue
 8005fdc:	4b14      	ldr	r3, [pc, #80]	; (8006030 <process_touches+0x348>)
 8005fde:	2202      	movs	r2, #2
 8005fe0:	601a      	str	r2, [r3, #0]
 8005fe2:	e00e      	b.n	8006002 <process_touches+0x31a>

//		lightsSimpleMessageReceivedTouch |= 0x02 << 2;
//		lightsSimpleMessageReceivedTouch |= 0x02 << 4;
	}else if(action == BothHold){
 8005fe4:	4b11      	ldr	r3, [pc, #68]	; (800602c <process_touches+0x344>)
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	2b07      	cmp	r3, #7
 8005fea:	d103      	bne.n	8005ff4 <process_touches+0x30c>
		lightsSimpleMessageReceivedTouch = 0x01 << 6; // red
 8005fec:	4b10      	ldr	r3, [pc, #64]	; (8006030 <process_touches+0x348>)
 8005fee:	2240      	movs	r2, #64	; 0x40
 8005ff0:	601a      	str	r2, [r3, #0]
 8005ff2:	e006      	b.n	8006002 <process_touches+0x31a>

//		lightsSimpleMessageReceivedTouch |= lightsSimpleMessageReceivedTouch << 2;
//		lightsSimpleMessageReceivedTouch |= lightsSimpleMessageReceivedTouch << 4;
	}else if(action == BothRelease){
 8005ff4:	4b0d      	ldr	r3, [pc, #52]	; (800602c <process_touches+0x344>)
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	2b08      	cmp	r3, #8
 8005ffa:	d102      	bne.n	8006002 <process_touches+0x31a>
		lightsSimpleMessageReceivedTouch = 0x00; // off
 8005ffc:	4b0c      	ldr	r3, [pc, #48]	; (8006030 <process_touches+0x348>)
 8005ffe:	2200      	movs	r2, #0
 8006000:	601a      	str	r2, [r3, #0]
	}

	if(prev_msg != lightsSimpleMessageReceivedTouch ){
 8006002:	4b0c      	ldr	r3, [pc, #48]	; (8006034 <process_touches+0x34c>)
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	4b0a      	ldr	r3, [pc, #40]	; (8006030 <process_touches+0x348>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	429a      	cmp	r2, r3
 800600c:	d00a      	beq.n	8006024 <process_touches+0x33c>
		prev_msg = lightsSimpleMessageReceivedTouch;
 800600e:	4b08      	ldr	r3, [pc, #32]	; (8006030 <process_touches+0x348>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a08      	ldr	r2, [pc, #32]	; (8006034 <process_touches+0x34c>)
 8006014:	6013      	str	r3, [r2, #0]

		osMessageQueuePut(lightsSimpleQueueHandle, &lightsSimpleMessageReceivedTouch, 0U, 0);
 8006016:	4b08      	ldr	r3, [pc, #32]	; (8006038 <process_touches+0x350>)
 8006018:	6818      	ldr	r0, [r3, #0]
 800601a:	2300      	movs	r3, #0
 800601c:	2200      	movs	r2, #0
 800601e:	4904      	ldr	r1, [pc, #16]	; (8006030 <process_touches+0x348>)
 8006020:	f008 fe72 	bl	800ed08 <osMessageQueuePut>

	}

}
 8006024:	bf00      	nop
 8006026:	3730      	adds	r7, #48	; 0x30
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}
 800602c:	20000b14 	.word	0x20000b14
 8006030:	20028520 	.word	0x20028520
 8006034:	20000b10 	.word	0x20000b10
 8006038:	200278ac 	.word	0x200278ac

0800603c <debounce>:

void debounce(Debouncer *self, uint8_t noisy_in, uint32_t cur_time) {
 800603c:	b480      	push	{r7}
 800603e:	b085      	sub	sp, #20
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	460b      	mov	r3, r1
 8006046:	607a      	str	r2, [r7, #4]
 8006048:	72fb      	strb	r3, [r7, #11]
	if (noisy_in != self->input) {
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	791b      	ldrb	r3, [r3, #4]
 800604e:	7afa      	ldrb	r2, [r7, #11]
 8006050:	429a      	cmp	r2, r3
 8006052:	d006      	beq.n	8006062 <debounce+0x26>
		self->input = noisy_in;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	7afa      	ldrb	r2, [r7, #11]
 8006058:	711a      	strb	r2, [r3, #4]
		self->start_t = cur_time;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	601a      	str	r2, [r3, #0]
	} else if (cur_time - self->start_t > DEBOUNCE_TIME) {
		self->clean_out = self->input;
	}
}
 8006060:	e009      	b.n	8006076 <debounce+0x3a>
	} else if (cur_time - self->start_t > DEBOUNCE_TIME) {
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	1ad3      	subs	r3, r2, r3
 800606a:	2b1e      	cmp	r3, #30
 800606c:	d903      	bls.n	8006076 <debounce+0x3a>
		self->clean_out = self->input;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	791a      	ldrb	r2, [r3, #4]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	715a      	strb	r2, [r3, #5]
}
 8006076:	bf00      	nop
 8006078:	3714      	adds	r7, #20
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr

08006082 <LL_AHB1_GRP1_EnableClock>:
{
 8006082:	b480      	push	{r7}
 8006084:	b085      	sub	sp, #20
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800608a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800608e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006090:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4313      	orrs	r3, r2
 8006098:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800609a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800609e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4013      	ands	r3, r2
 80060a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80060a6:	68fb      	ldr	r3, [r7, #12]
}
 80060a8:	bf00      	nop
 80060aa:	3714      	adds	r7, #20
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <LL_AHB2_GRP1_EnableClock>:
{
 80060b4:	b480      	push	{r7}
 80060b6:	b085      	sub	sp, #20
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80060bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80060c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80060cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4013      	ands	r3, r2
 80060d6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80060d8:	68fb      	ldr	r3, [r7, #12]
}
 80060da:	bf00      	nop
 80060dc:	3714      	adds	r7, #20
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr
	...

080060e8 <MX_TSC_Init>:

TSC_HandleTypeDef htsc;

/* TSC init function */
void MX_TSC_Init(void)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	af00      	add	r7, sp, #0
//  htsc.Init.MaxCountValue = TSC_MCV_511;
//  htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
//  htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
//  htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
//  htsc.Init.MaxCountInterrupt = DISABLE;
  htsc.Instance = TSC;
 80060ec:	4b1d      	ldr	r3, [pc, #116]	; (8006164 <MX_TSC_Init+0x7c>)
 80060ee:	4a1e      	ldr	r2, [pc, #120]	; (8006168 <MX_TSC_Init+0x80>)
 80060f0:	601a      	str	r2, [r3, #0]
	htsc.Init.CTPulseHighLength = TSC_CTPH_4CYCLES;
 80060f2:	4b1c      	ldr	r3, [pc, #112]	; (8006164 <MX_TSC_Init+0x7c>)
 80060f4:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80060f8:	605a      	str	r2, [r3, #4]
	htsc.Init.CTPulseLowLength = TSC_CTPL_4CYCLES;
 80060fa:	4b1a      	ldr	r3, [pc, #104]	; (8006164 <MX_TSC_Init+0x7c>)
 80060fc:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 8006100:	609a      	str	r2, [r3, #8]
	htsc.Init.SpreadSpectrum = DISABLE;
 8006102:	4b18      	ldr	r3, [pc, #96]	; (8006164 <MX_TSC_Init+0x7c>)
 8006104:	2200      	movs	r2, #0
 8006106:	731a      	strb	r2, [r3, #12]
	htsc.Init.SpreadSpectrumDeviation = 1;
 8006108:	4b16      	ldr	r3, [pc, #88]	; (8006164 <MX_TSC_Init+0x7c>)
 800610a:	2201      	movs	r2, #1
 800610c:	611a      	str	r2, [r3, #16]
	htsc.Init.SpreadSpectrumPrescaler = TSC_SS_PRESC_DIV1;
 800610e:	4b15      	ldr	r3, [pc, #84]	; (8006164 <MX_TSC_Init+0x7c>)
 8006110:	2200      	movs	r2, #0
 8006112:	615a      	str	r2, [r3, #20]
	htsc.Init.PulseGeneratorPrescaler = TSC_PG_PRESC_DIV4;
 8006114:	4b13      	ldr	r3, [pc, #76]	; (8006164 <MX_TSC_Init+0x7c>)
 8006116:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800611a:	619a      	str	r2, [r3, #24]
//	htsc.Init.MaxCountValue = TSC_MCV_8191;
	htsc.Init.MaxCountValue = TSC_MCV_16383;
 800611c:	4b11      	ldr	r3, [pc, #68]	; (8006164 <MX_TSC_Init+0x7c>)
 800611e:	22c0      	movs	r2, #192	; 0xc0
 8006120:	61da      	str	r2, [r3, #28]
	htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
 8006122:	4b10      	ldr	r3, [pc, #64]	; (8006164 <MX_TSC_Init+0x7c>)
 8006124:	2200      	movs	r2, #0
 8006126:	621a      	str	r2, [r3, #32]
	htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
 8006128:	4b0e      	ldr	r3, [pc, #56]	; (8006164 <MX_TSC_Init+0x7c>)
 800612a:	2200      	movs	r2, #0
 800612c:	625a      	str	r2, [r3, #36]	; 0x24
	htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
 800612e:	4b0d      	ldr	r3, [pc, #52]	; (8006164 <MX_TSC_Init+0x7c>)
 8006130:	2200      	movs	r2, #0
 8006132:	629a      	str	r2, [r3, #40]	; 0x28
	htsc.Init.MaxCountInterrupt = DISABLE;
 8006134:	4b0b      	ldr	r3, [pc, #44]	; (8006164 <MX_TSC_Init+0x7c>)
 8006136:	2200      	movs	r2, #0
 8006138:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

//  htsc.Init.ChannelIOs = TSC_GROUP2_IO2|TSC_GROUP2_IO3|TSC_GROUP2_IO4;
  htsc.Init.ChannelIOs = TSC_GROUP2_IO3|TSC_GROUP2_IO4;
 800613c:	4b09      	ldr	r3, [pc, #36]	; (8006164 <MX_TSC_Init+0x7c>)
 800613e:	22c0      	movs	r2, #192	; 0xc0
 8006140:	631a      	str	r2, [r3, #48]	; 0x30

  htsc.Init.ShieldIOs = 0;
 8006142:	4b08      	ldr	r3, [pc, #32]	; (8006164 <MX_TSC_Init+0x7c>)
 8006144:	2200      	movs	r2, #0
 8006146:	635a      	str	r2, [r3, #52]	; 0x34
  htsc.Init.SamplingIOs = TSC_GROUP2_IO1;
 8006148:	4b06      	ldr	r3, [pc, #24]	; (8006164 <MX_TSC_Init+0x7c>)
 800614a:	2210      	movs	r2, #16
 800614c:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_TSC_Init(&htsc) != HAL_OK)
 800614e:	4805      	ldr	r0, [pc, #20]	; (8006164 <MX_TSC_Init+0x7c>)
 8006150:	f007 fd24 	bl	800db9c <HAL_TSC_Init>
 8006154:	4603      	mov	r3, r0
 8006156:	2b00      	cmp	r3, #0
 8006158:	d001      	beq.n	800615e <MX_TSC_Init+0x76>
  {
    Error_Handler();
 800615a:	f7fe f8ed 	bl	8004338 <Error_Handler>
  }

}
 800615e:	bf00      	nop
 8006160:	bd80      	pop	{r7, pc}
 8006162:	bf00      	nop
 8006164:	20028544 	.word	0x20028544
 8006168:	40024000 	.word	0x40024000

0800616c <HAL_TSC_MspInit>:

void HAL_TSC_MspInit(TSC_HandleTypeDef* tscHandle)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b088      	sub	sp, #32
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006174:	f107 030c 	add.w	r3, r7, #12
 8006178:	2200      	movs	r2, #0
 800617a:	601a      	str	r2, [r3, #0]
 800617c:	605a      	str	r2, [r3, #4]
 800617e:	609a      	str	r2, [r3, #8]
 8006180:	60da      	str	r2, [r3, #12]
 8006182:	611a      	str	r2, [r3, #16]
  if(tscHandle->Instance==TSC)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a1a      	ldr	r2, [pc, #104]	; (80061f4 <HAL_TSC_MspInit+0x88>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d12e      	bne.n	80061ec <HAL_TSC_MspInit+0x80>
  {
  /* USER CODE BEGIN TSC_MspInit 0 */

  /* USER CODE END TSC_MspInit 0 */
    /* TSC clock enable */
    __HAL_RCC_TSC_CLK_ENABLE();
 800618e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8006192:	f7ff ff76 	bl	8006082 <LL_AHB1_GRP1_EnableClock>
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006196:	2002      	movs	r0, #2
 8006198:	f7ff ff8c 	bl	80060b4 <LL_AHB2_GRP1_EnableClock>
    PB4     ------> TSC_G2_IO1
    PB5     ------> TSC_G2_IO2
    PB6     ------> TSC_G2_IO3
    PB7     ------> TSC_G2_IO4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800619c:	2310      	movs	r3, #16
 800619e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80061a0:	2312      	movs	r3, #18
 80061a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061a4:	2300      	movs	r3, #0
 80061a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061a8:	2300      	movs	r3, #0
 80061aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TSC;
 80061ac:	2309      	movs	r3, #9
 80061ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80061b0:	f107 030c 	add.w	r3, r7, #12
 80061b4:	4619      	mov	r1, r3
 80061b6:	4810      	ldr	r0, [pc, #64]	; (80061f8 <HAL_TSC_MspInit+0x8c>)
 80061b8:	f002 f944 	bl	8008444 <HAL_GPIO_Init>

//    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80061bc:	23c0      	movs	r3, #192	; 0xc0
 80061be:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061c0:	2302      	movs	r3, #2
 80061c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061c4:	2300      	movs	r3, #0
 80061c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061c8:	2300      	movs	r3, #0
 80061ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TSC;
 80061cc:	2309      	movs	r3, #9
 80061ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80061d0:	f107 030c 	add.w	r3, r7, #12
 80061d4:	4619      	mov	r1, r3
 80061d6:	4808      	ldr	r0, [pc, #32]	; (80061f8 <HAL_TSC_MspInit+0x8c>)
 80061d8:	f002 f934 	bl	8008444 <HAL_GPIO_Init>

    /* TSC interrupt Init */
    HAL_NVIC_SetPriority(TSC_IRQn, 5, 0);
 80061dc:	2200      	movs	r2, #0
 80061de:	2105      	movs	r1, #5
 80061e0:	2027      	movs	r0, #39	; 0x27
 80061e2:	f001 fda8 	bl	8007d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TSC_IRQn);
 80061e6:	2027      	movs	r0, #39	; 0x27
 80061e8:	f001 fdbf 	bl	8007d6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TSC_MspInit 1 */

  /* USER CODE END TSC_MspInit 1 */
  }
}
 80061ec:	bf00      	nop
 80061ee:	3720      	adds	r7, #32
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}
 80061f4:	40024000 	.word	0x40024000
 80061f8:	48000400 	.word	0x48000400

080061fc <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80061fc:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80061fe:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006200:	3304      	adds	r3, #4

08006202 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006202:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006204:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8006206:	d3f9      	bcc.n	80061fc <CopyDataInit>
  bx lr
 8006208:	4770      	bx	lr

0800620a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800620a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800620c:	3004      	adds	r0, #4

0800620e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800620e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8006210:	d3fb      	bcc.n	800620a <FillZerobss>
  bx lr
 8006212:	4770      	bx	lr

08006214 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:  ldr   r0, =_estack
 8006214:	480c      	ldr	r0, [pc, #48]	; (8006248 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8006216:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8006218:	480c      	ldr	r0, [pc, #48]	; (800624c <LoopForever+0x8>)
 800621a:	490d      	ldr	r1, [pc, #52]	; (8006250 <LoopForever+0xc>)
 800621c:	4a0d      	ldr	r2, [pc, #52]	; (8006254 <LoopForever+0x10>)
 800621e:	2300      	movs	r3, #0
 8006220:	f7ff ffef 	bl	8006202 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8006224:	480c      	ldr	r0, [pc, #48]	; (8006258 <LoopForever+0x14>)
 8006226:	490d      	ldr	r1, [pc, #52]	; (800625c <LoopForever+0x18>)
 8006228:	2300      	movs	r3, #0
 800622a:	f7ff fff0 	bl	800620e <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800622e:	480c      	ldr	r0, [pc, #48]	; (8006260 <LoopForever+0x1c>)
 8006230:	490c      	ldr	r1, [pc, #48]	; (8006264 <LoopForever+0x20>)
 8006232:	2300      	movs	r3, #0
 8006234:	f7ff ffeb 	bl	800620e <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8006238:	f7ff f948 	bl	80054cc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800623c:	f00f fe20 	bl	8015e80 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8006240:	f7fd ffa0 	bl	8004184 <main>

08006244 <LoopForever>:

LoopForever:
  b LoopForever
 8006244:	e7fe      	b.n	8006244 <LoopForever>
 8006246:	0000      	.short	0x0000
Reset_Handler:  ldr   r0, =_estack
 8006248:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800624c:	20000004 	.word	0x20000004
 8006250:	20000160 	.word	0x20000160
 8006254:	08018238 	.word	0x08018238
  INIT_BSS _sbss, _ebss
 8006258:	20000210 	.word	0x20000210
 800625c:	20028668 	.word	0x20028668
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8006260:	200300c4 	.word	0x200300c4
 8006264:	20030b5b 	.word	0x20030b5b

08006268 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006268:	e7fe      	b.n	8006268 <ADC1_IRQHandler>
	...

0800626c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006272:	2300      	movs	r3, #0
 8006274:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006276:	4b0c      	ldr	r3, [pc, #48]	; (80062a8 <HAL_Init+0x3c>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a0b      	ldr	r2, [pc, #44]	; (80062a8 <HAL_Init+0x3c>)
 800627c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006280:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006282:	2003      	movs	r0, #3
 8006284:	f001 fd4c 	bl	8007d20 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006288:	2000      	movs	r0, #0
 800628a:	f7ff f84f 	bl	800532c <HAL_InitTick>
 800628e:	4603      	mov	r3, r0
 8006290:	2b00      	cmp	r3, #0
 8006292:	d002      	beq.n	800629a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	71fb      	strb	r3, [r7, #7]
 8006298:	e001      	b.n	800629e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800629a:	f7ff f816 	bl	80052ca <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800629e:	79fb      	ldrb	r3, [r7, #7]
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3708      	adds	r7, #8
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	58004000 	.word	0x58004000

080062ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80062ac:	b480      	push	{r7}
 80062ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80062b0:	4b05      	ldr	r3, [pc, #20]	; (80062c8 <HAL_IncTick+0x1c>)
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	4b05      	ldr	r3, [pc, #20]	; (80062cc <HAL_IncTick+0x20>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4413      	add	r3, r2
 80062ba:	4a03      	ldr	r2, [pc, #12]	; (80062c8 <HAL_IncTick+0x1c>)
 80062bc:	6013      	str	r3, [r2, #0]
}
 80062be:	bf00      	nop
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr
 80062c8:	20028588 	.word	0x20028588
 80062cc:	20000080 	.word	0x20000080

080062d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80062d0:	b480      	push	{r7}
 80062d2:	af00      	add	r7, sp, #0
  return uwTick;
 80062d4:	4b03      	ldr	r3, [pc, #12]	; (80062e4 <HAL_GetTick+0x14>)
 80062d6:	681b      	ldr	r3, [r3, #0]
}
 80062d8:	4618      	mov	r0, r3
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr
 80062e2:	bf00      	nop
 80062e4:	20028588 	.word	0x20028588

080062e8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80062e8:	b480      	push	{r7}
 80062ea:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80062ec:	4b03      	ldr	r3, [pc, #12]	; (80062fc <HAL_GetTickPrio+0x14>)
 80062ee:	681b      	ldr	r3, [r3, #0]
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr
 80062fa:	bf00      	nop
 80062fc:	2000007c 	.word	0x2000007c

08006300 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8006300:	b580      	push	{r7, lr}
 8006302:	b084      	sub	sp, #16
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8006308:	f7ff ffe2 	bl	80062d0 <HAL_GetTick>
 800630c:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006318:	d004      	beq.n	8006324 <HAL_Delay+0x24>
    {
      wait += (uint32_t)(uwTickFreq);
 800631a:	4b09      	ldr	r3, [pc, #36]	; (8006340 <HAL_Delay+0x40>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	68fa      	ldr	r2, [r7, #12]
 8006320:	4413      	add	r3, r2
 8006322:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8006324:	bf00      	nop
 8006326:	f7ff ffd3 	bl	80062d0 <HAL_GetTick>
 800632a:	4602      	mov	r2, r0
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	1ad3      	subs	r3, r2, r3
 8006330:	68fa      	ldr	r2, [r7, #12]
 8006332:	429a      	cmp	r2, r3
 8006334:	d8f7      	bhi.n	8006326 <HAL_Delay+0x26>
    {
    }
  }
 8006336:	bf00      	nop
 8006338:	3710      	adds	r7, #16
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	20000080 	.word	0x20000080

08006344 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	6039      	str	r1, [r7, #0]
//  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
}
 800634e:	bf00      	nop
 8006350:	370c      	adds	r7, #12
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr

0800635a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800635a:	b480      	push	{r7}
 800635c:	b083      	sub	sp, #12
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]
 8006362:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	431a      	orrs	r2, r3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	609a      	str	r2, [r3, #8]
}
 8006374:	bf00      	nop
 8006376:	370c      	adds	r7, #12
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr

08006380 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006380:	b480      	push	{r7}
 8006382:	b083      	sub	sp, #12
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8006390:	4618      	mov	r0, r3
 8006392:	370c      	adds	r7, #12
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800639c:	b490      	push	{r4, r7}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	607a      	str	r2, [r7, #4]
 80063a8:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	3360      	adds	r3, #96	; 0x60
 80063ae:	461a      	mov	r2, r3
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	4413      	add	r3, r2
 80063b6:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80063b8:	6822      	ldr	r2, [r4, #0]
 80063ba:	4b08      	ldr	r3, [pc, #32]	; (80063dc <LL_ADC_SetOffset+0x40>)
 80063bc:	4013      	ands	r3, r2
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80063c4:	683a      	ldr	r2, [r7, #0]
 80063c6:	430a      	orrs	r2, r1
 80063c8:	4313      	orrs	r3, r2
 80063ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80063ce:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80063d0:	bf00      	nop
 80063d2:	3710      	adds	r7, #16
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bc90      	pop	{r4, r7}
 80063d8:	4770      	bx	lr
 80063da:	bf00      	nop
 80063dc:	03fff000 	.word	0x03fff000

080063e0 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80063e0:	b490      	push	{r4, r7}
 80063e2:	b082      	sub	sp, #8
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	3360      	adds	r3, #96	; 0x60
 80063ee:	461a      	mov	r2, r3
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	4413      	add	r3, r2
 80063f6:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80063f8:	6823      	ldr	r3, [r4, #0]
 80063fa:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3708      	adds	r7, #8
 8006402:	46bd      	mov	sp, r7
 8006404:	bc90      	pop	{r4, r7}
 8006406:	4770      	bx	lr

08006408 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8006408:	b490      	push	{r4, r7}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
 800640e:	60f8      	str	r0, [r7, #12]
 8006410:	60b9      	str	r1, [r7, #8]
 8006412:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	3360      	adds	r3, #96	; 0x60
 8006418:	461a      	mov	r2, r3
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	009b      	lsls	r3, r3, #2
 800641e:	4413      	add	r3, r2
 8006420:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8006422:	6823      	ldr	r3, [r4, #0]
 8006424:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	4313      	orrs	r3, r2
 800642c:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800642e:	bf00      	nop
 8006430:	3710      	adds	r7, #16
 8006432:	46bd      	mov	sp, r7
 8006434:	bc90      	pop	{r4, r7}
 8006436:	4770      	bx	lr

08006438 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006448:	2b00      	cmp	r3, #0
 800644a:	d101      	bne.n	8006450 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800644c:	2301      	movs	r3, #1
 800644e:	e000      	b.n	8006452 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	370c      	adds	r7, #12
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr

0800645e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800645e:	b490      	push	{r4, r7}
 8006460:	b084      	sub	sp, #16
 8006462:	af00      	add	r7, sp, #0
 8006464:	60f8      	str	r0, [r7, #12]
 8006466:	60b9      	str	r1, [r7, #8]
 8006468:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	3330      	adds	r3, #48	; 0x30
 800646e:	461a      	mov	r2, r3
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	0a1b      	lsrs	r3, r3, #8
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	f003 030c 	and.w	r3, r3, #12
 800647a:	4413      	add	r3, r2
 800647c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800647e:	6822      	ldr	r2, [r4, #0]
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	f003 031f 	and.w	r3, r3, #31
 8006486:	211f      	movs	r1, #31
 8006488:	fa01 f303 	lsl.w	r3, r1, r3
 800648c:	43db      	mvns	r3, r3
 800648e:	401a      	ands	r2, r3
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	0e9b      	lsrs	r3, r3, #26
 8006494:	f003 011f 	and.w	r1, r3, #31
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	f003 031f 	and.w	r3, r3, #31
 800649e:	fa01 f303 	lsl.w	r3, r1, r3
 80064a2:	4313      	orrs	r3, r2
 80064a4:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80064a6:	bf00      	nop
 80064a8:	3710      	adds	r7, #16
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bc90      	pop	{r4, r7}
 80064ae:	4770      	bx	lr

080064b0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80064b0:	b490      	push	{r4, r7}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	60b9      	str	r1, [r7, #8]
 80064ba:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	3314      	adds	r3, #20
 80064c0:	461a      	mov	r2, r3
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	0e5b      	lsrs	r3, r3, #25
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	f003 0304 	and.w	r3, r3, #4
 80064cc:	4413      	add	r3, r2
 80064ce:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80064d0:	6822      	ldr	r2, [r4, #0]
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	0d1b      	lsrs	r3, r3, #20
 80064d6:	f003 031f 	and.w	r3, r3, #31
 80064da:	2107      	movs	r1, #7
 80064dc:	fa01 f303 	lsl.w	r3, r1, r3
 80064e0:	43db      	mvns	r3, r3
 80064e2:	401a      	ands	r2, r3
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	0d1b      	lsrs	r3, r3, #20
 80064e8:	f003 031f 	and.w	r3, r3, #31
 80064ec:	6879      	ldr	r1, [r7, #4]
 80064ee:	fa01 f303 	lsl.w	r3, r1, r3
 80064f2:	4313      	orrs	r3, r2
 80064f4:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80064f6:	bf00      	nop
 80064f8:	3710      	adds	r7, #16
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bc90      	pop	{r4, r7}
 80064fe:	4770      	bx	lr

08006500 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006500:	b480      	push	{r7}
 8006502:	b085      	sub	sp, #20
 8006504:	af00      	add	r7, sp, #0
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	60b9      	str	r1, [r7, #8]
 800650a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006518:	43db      	mvns	r3, r3
 800651a:	401a      	ands	r2, r3
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f003 0318 	and.w	r3, r3, #24
 8006522:	4908      	ldr	r1, [pc, #32]	; (8006544 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006524:	40d9      	lsrs	r1, r3
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	400b      	ands	r3, r1
 800652a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800652e:	431a      	orrs	r2, r3
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8006536:	bf00      	nop
 8006538:	3714      	adds	r7, #20
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr
 8006542:	bf00      	nop
 8006544:	0007ffff 	.word	0x0007ffff

08006548 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006548:	b480      	push	{r7}
 800654a:	b083      	sub	sp, #12
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8006558:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	6093      	str	r3, [r2, #8]
}
 8006560:	bf00      	nop
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800657c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006580:	d101      	bne.n	8006586 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006582:	2301      	movs	r3, #1
 8006584:	e000      	b.n	8006588 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006586:	2300      	movs	r3, #0
}
 8006588:	4618      	mov	r0, r3
 800658a:	370c      	adds	r7, #12
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006594:	b480      	push	{r7}
 8006596:	b083      	sub	sp, #12
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80065a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80065a8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80065b0:	bf00      	nop
 80065b2:	370c      	adds	r7, #12
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr

080065bc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80065d0:	d101      	bne.n	80065d6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80065d2:	2301      	movs	r3, #1
 80065d4:	e000      	b.n	80065d8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80065d6:	2300      	movs	r3, #0
}
 80065d8:	4618      	mov	r0, r3
 80065da:	370c      	adds	r7, #12
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80065f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80065f8:	f043 0201 	orr.w	r2, r3, #1
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8006600:	bf00      	nop
 8006602:	370c      	adds	r7, #12
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr

0800660c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800661c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006620:	f043 0202 	orr.w	r2, r3, #2
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8006628:	bf00      	nop
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	f003 0301 	and.w	r3, r3, #1
 8006644:	2b01      	cmp	r3, #1
 8006646:	d101      	bne.n	800664c <LL_ADC_IsEnabled+0x18>
 8006648:	2301      	movs	r3, #1
 800664a:	e000      	b.n	800664e <LL_ADC_IsEnabled+0x1a>
 800664c:	2300      	movs	r3, #0
}
 800664e:	4618      	mov	r0, r3
 8006650:	370c      	adds	r7, #12
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr

0800665a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800665a:	b480      	push	{r7}
 800665c:	b083      	sub	sp, #12
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	f003 0302 	and.w	r3, r3, #2
 800666a:	2b02      	cmp	r3, #2
 800666c:	d101      	bne.n	8006672 <LL_ADC_IsDisableOngoing+0x18>
 800666e:	2301      	movs	r3, #1
 8006670:	e000      	b.n	8006674 <LL_ADC_IsDisableOngoing+0x1a>
 8006672:	2300      	movs	r3, #0
}
 8006674:	4618      	mov	r0, r3
 8006676:	370c      	adds	r7, #12
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr

08006680 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8006680:	b480      	push	{r7}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006690:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006694:	f043 0204 	orr.w	r2, r3, #4
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800669c:	bf00      	nop
 800669e:	370c      	adds	r7, #12
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b083      	sub	sp, #12
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80066b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80066bc:	f043 0210 	orr.w	r2, r3, #16
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80066c4:	bf00      	nop
 80066c6:	370c      	adds	r7, #12
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b083      	sub	sp, #12
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	f003 0304 	and.w	r3, r3, #4
 80066e0:	2b04      	cmp	r3, #4
 80066e2:	d101      	bne.n	80066e8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80066e4:	2301      	movs	r3, #1
 80066e6:	e000      	b.n	80066ea <LL_ADC_REG_IsConversionOngoing+0x1a>
 80066e8:	2300      	movs	r3, #0
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	370c      	adds	r7, #12
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr

080066f6 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80066f6:	b480      	push	{r7}
 80066f8:	b083      	sub	sp, #12
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006706:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800670a:	f043 0220 	orr.w	r2, r3, #32
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8006712:	bf00      	nop
 8006714:	370c      	adds	r7, #12
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr

0800671e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800671e:	b480      	push	{r7}
 8006720:	b083      	sub	sp, #12
 8006722:	af00      	add	r7, sp, #0
 8006724:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	f003 0308 	and.w	r3, r3, #8
 800672e:	2b08      	cmp	r3, #8
 8006730:	d101      	bne.n	8006736 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006732:	2301      	movs	r3, #1
 8006734:	e000      	b.n	8006738 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006736:	2300      	movs	r3, #0
}
 8006738:	4618      	mov	r0, r3
 800673a:	370c      	adds	r7, #12
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr

08006744 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b088      	sub	sp, #32
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800674c:	2300      	movs	r3, #0
 800674e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8006750:	2300      	movs	r3, #0
 8006752:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d101      	bne.n	800675e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	e12a      	b.n	80069b4 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006768:	2b00      	cmp	r3, #0
 800676a:	d109      	bne.n	8006780 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f7fa fbcf 	bl	8000f10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2200      	movs	r2, #0
 8006776:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4618      	mov	r0, r3
 8006786:	f7ff fef1 	bl	800656c <LL_ADC_IsDeepPowerDownEnabled>
 800678a:	4603      	mov	r3, r0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d004      	beq.n	800679a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4618      	mov	r0, r3
 8006796:	f7ff fed7 	bl	8006548 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4618      	mov	r0, r3
 80067a0:	f7ff ff0c 	bl	80065bc <LL_ADC_IsInternalRegulatorEnabled>
 80067a4:	4603      	mov	r3, r0
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d113      	bne.n	80067d2 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4618      	mov	r0, r3
 80067b0:	f7ff fef0 	bl	8006594 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80067b4:	4b81      	ldr	r3, [pc, #516]	; (80069bc <HAL_ADC_Init+0x278>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	099b      	lsrs	r3, r3, #6
 80067ba:	4a81      	ldr	r2, [pc, #516]	; (80069c0 <HAL_ADC_Init+0x27c>)
 80067bc:	fba2 2303 	umull	r2, r3, r2, r3
 80067c0:	099b      	lsrs	r3, r3, #6
 80067c2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80067c4:	e002      	b.n	80067cc <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	3b01      	subs	r3, #1
 80067ca:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d1f9      	bne.n	80067c6 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4618      	mov	r0, r3
 80067d8:	f7ff fef0 	bl	80065bc <LL_ADC_IsInternalRegulatorEnabled>
 80067dc:	4603      	mov	r3, r0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d10d      	bne.n	80067fe <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067e6:	f043 0210 	orr.w	r2, r3, #16
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067f2:	f043 0201 	orr.w	r2, r3, #1
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4618      	mov	r0, r3
 8006804:	f7ff ff64 	bl	80066d0 <LL_ADC_REG_IsConversionOngoing>
 8006808:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800680e:	f003 0310 	and.w	r3, r3, #16
 8006812:	2b00      	cmp	r3, #0
 8006814:	f040 80c5 	bne.w	80069a2 <HAL_ADC_Init+0x25e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	2b00      	cmp	r3, #0
 800681c:	f040 80c1 	bne.w	80069a2 <HAL_ADC_Init+0x25e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006824:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006828:	f043 0202 	orr.w	r2, r3, #2
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4618      	mov	r0, r3
 8006836:	f7ff fefd 	bl	8006634 <LL_ADC_IsEnabled>
 800683a:	4603      	mov	r3, r0
 800683c:	2b00      	cmp	r3, #0
 800683e:	d10b      	bne.n	8006858 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006840:	4860      	ldr	r0, [pc, #384]	; (80069c4 <HAL_ADC_Init+0x280>)
 8006842:	f7ff fef7 	bl	8006634 <LL_ADC_IsEnabled>
 8006846:	4603      	mov	r3, r0
 8006848:	2b00      	cmp	r3, #0
 800684a:	d105      	bne.n	8006858 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	4619      	mov	r1, r3
 8006852:	485d      	ldr	r0, [pc, #372]	; (80069c8 <HAL_ADC_Init+0x284>)
 8006854:	f7ff fd76 	bl	8006344 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	7e5b      	ldrb	r3, [r3, #25]
 800685c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006862:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8006868:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800686e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006876:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006878:	4313      	orrs	r3, r2
 800687a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006882:	2b01      	cmp	r3, #1
 8006884:	d106      	bne.n	8006894 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688a:	3b01      	subs	r3, #1
 800688c:	045b      	lsls	r3, r3, #17
 800688e:	69ba      	ldr	r2, [r7, #24]
 8006890:	4313      	orrs	r3, r2
 8006892:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006898:	2b00      	cmp	r3, #0
 800689a:	d009      	beq.n	80068b0 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068a0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80068aa:	69ba      	ldr	r2, [r7, #24]
 80068ac:	4313      	orrs	r3, r2
 80068ae:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	68da      	ldr	r2, [r3, #12]
 80068b6:	4b45      	ldr	r3, [pc, #276]	; (80069cc <HAL_ADC_Init+0x288>)
 80068b8:	4013      	ands	r3, r2
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	6812      	ldr	r2, [r2, #0]
 80068be:	69b9      	ldr	r1, [r7, #24]
 80068c0:	430b      	orrs	r3, r1
 80068c2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4618      	mov	r0, r3
 80068ca:	f7ff ff01 	bl	80066d0 <LL_ADC_REG_IsConversionOngoing>
 80068ce:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4618      	mov	r0, r3
 80068d6:	f7ff ff22 	bl	800671e <LL_ADC_INJ_IsConversionOngoing>
 80068da:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d13d      	bne.n	800695e <HAL_ADC_Init+0x21a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d13a      	bne.n	800695e <HAL_ADC_Init+0x21a>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80068ec:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80068f4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80068f6:	4313      	orrs	r3, r2
 80068f8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006904:	f023 0302 	bic.w	r3, r3, #2
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	6812      	ldr	r2, [r2, #0]
 800690c:	69b9      	ldr	r1, [r7, #24]
 800690e:	430b      	orrs	r3, r1
 8006910:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006918:	2b01      	cmp	r3, #1
 800691a:	d118      	bne.n	800694e <HAL_ADC_Init+0x20a>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	691b      	ldr	r3, [r3, #16]
 8006922:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006926:	f023 0304 	bic.w	r3, r3, #4
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006932:	4311      	orrs	r1, r2
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006938:	4311      	orrs	r1, r2
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800693e:	430a      	orrs	r2, r1
 8006940:	431a      	orrs	r2, r3
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f042 0201 	orr.w	r2, r2, #1
 800694a:	611a      	str	r2, [r3, #16]
 800694c:	e007      	b.n	800695e <HAL_ADC_Init+0x21a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	691a      	ldr	r2, [r3, #16]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f022 0201 	bic.w	r2, r2, #1
 800695c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	691b      	ldr	r3, [r3, #16]
 8006962:	2b01      	cmp	r3, #1
 8006964:	d10c      	bne.n	8006980 <HAL_ADC_Init+0x23c>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800696c:	f023 010f 	bic.w	r1, r3, #15
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	69db      	ldr	r3, [r3, #28]
 8006974:	1e5a      	subs	r2, r3, #1
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	430a      	orrs	r2, r1
 800697c:	631a      	str	r2, [r3, #48]	; 0x30
 800697e:	e007      	b.n	8006990 <HAL_ADC_Init+0x24c>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f022 020f 	bic.w	r2, r2, #15
 800698e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006994:	f023 0303 	bic.w	r3, r3, #3
 8006998:	f043 0201 	orr.w	r2, r3, #1
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	655a      	str	r2, [r3, #84]	; 0x54
 80069a0:	e007      	b.n	80069b2 <HAL_ADC_Init+0x26e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069a6:	f043 0210 	orr.w	r2, r3, #16
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80069b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3720      	adds	r7, #32
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}
 80069bc:	20000078 	.word	0x20000078
 80069c0:	053e2d63 	.word	0x053e2d63
 80069c4:	50040000 	.word	0x50040000
 80069c8:	50040300 	.word	0x50040300
 80069cc:	fff0c007 	.word	0xfff0c007

080069d0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b086      	sub	sp, #24
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	60f8      	str	r0, [r7, #12]
 80069d8:	60b9      	str	r1, [r7, #8]
 80069da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4618      	mov	r0, r3
 80069e2:	f7ff fe75 	bl	80066d0 <LL_ADC_REG_IsConversionOngoing>
 80069e6:	4603      	mov	r3, r0
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d167      	bne.n	8006abc <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d101      	bne.n	80069fa <HAL_ADC_Start_DMA+0x2a>
 80069f6:	2302      	movs	r3, #2
 80069f8:	e063      	b.n	8006ac2 <HAL_ADC_Start_DMA+0xf2>
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2201      	movs	r2, #1
 80069fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8006a02:	68f8      	ldr	r0, [r7, #12]
 8006a04:	f000 fcc2 	bl	800738c <ADC_Enable>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8006a0c:	7dfb      	ldrb	r3, [r7, #23]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d14f      	bne.n	8006ab2 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a16:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006a1a:	f023 0301 	bic.w	r3, r3, #1
 8006a1e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                          HAL_ADC_STATE_REG_BUSY);

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d006      	beq.n	8006a40 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a36:	f023 0206 	bic.w	r2, r3, #6
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	659a      	str	r2, [r3, #88]	; 0x58
 8006a3e:	e002      	b.n	8006a46 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2200      	movs	r2, #0
 8006a44:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a4a:	4a20      	ldr	r2, [pc, #128]	; (8006acc <HAL_ADC_Start_DMA+0xfc>)
 8006a4c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a52:	4a1f      	ldr	r2, [pc, #124]	; (8006ad0 <HAL_ADC_Start_DMA+0x100>)
 8006a54:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a5a:	4a1e      	ldr	r2, [pc, #120]	; (8006ad4 <HAL_ADC_Start_DMA+0x104>)
 8006a5c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	221c      	movs	r2, #28
 8006a64:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	685a      	ldr	r2, [r3, #4]
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f042 0210 	orr.w	r2, r2, #16
 8006a7c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	68da      	ldr	r2, [r3, #12]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f042 0201 	orr.w	r2, r2, #1
 8006a8c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	3340      	adds	r3, #64	; 0x40
 8006a98:	4619      	mov	r1, r3
 8006a9a:	68ba      	ldr	r2, [r7, #8]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f001 fa49 	bl	8007f34 <HAL_DMA_Start_IT>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f7ff fde8 	bl	8006680 <LL_ADC_REG_StartConversion>
 8006ab0:	e006      	b.n	8006ac0 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8006aba:	e001      	b.n	8006ac0 <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006abc:	2302      	movs	r3, #2
 8006abe:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006ac0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3718      	adds	r7, #24
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
 8006aca:	bf00      	nop
 8006acc:	080074f1 	.word	0x080074f1
 8006ad0:	080075c9 	.word	0x080075c9
 8006ad4:	080075e5 	.word	0x080075e5

08006ad8 <HAL_ADC_Stop_DMA>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b084      	sub	sp, #16
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d101      	bne.n	8006aee <HAL_ADC_Stop_DMA+0x16>
 8006aea:	2302      	movs	r3, #2
 8006aec:	e051      	b.n	8006b92 <HAL_ADC_Stop_DMA+0xba>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2201      	movs	r2, #1
 8006af2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8006af6:	2103      	movs	r1, #3
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f000 fb93 	bl	8007224 <ADC_ConversionStop>
 8006afe:	4603      	mov	r3, r0
 8006b00:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8006b02:	7bfb      	ldrb	r3, [r7, #15]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d13f      	bne.n	8006b88 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	68da      	ldr	r2, [r3, #12]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f022 0201 	bic.w	r2, r2, #1
 8006b16:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b1c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	2b02      	cmp	r3, #2
 8006b24:	d10f      	bne.n	8006b46 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f001 fa7d 	bl	800802a <HAL_DMA_Abort>
 8006b30:	4603      	mov	r3, r0
 8006b32:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8006b34:	7bfb      	ldrb	r3, [r7, #15]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d005      	beq.n	8006b46 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b3e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	685a      	ldr	r2, [r3, #4]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f022 0210 	bic.w	r2, r2, #16
 8006b54:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8006b56:	7bfb      	ldrb	r3, [r7, #15]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d105      	bne.n	8006b68 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 fc6f 	bl	8007440 <ADC_Disable>
 8006b62:	4603      	mov	r3, r0
 8006b64:	73fb      	strb	r3, [r7, #15]
 8006b66:	e002      	b.n	8006b6e <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f000 fc69 	bl	8007440 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8006b6e:	7bfb      	ldrb	r3, [r7, #15]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d109      	bne.n	8006b88 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b78:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006b7c:	f023 0301 	bic.w	r3, r3, #1
 8006b80:	f043 0201 	orr.w	r2, r3, #1
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3710      	adds	r7, #16
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}

08006b9a <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006b9a:	b480      	push	{r7}
 8006b9c:	b083      	sub	sp, #12
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006ba2:	bf00      	nop
 8006ba4:	370c      	adds	r7, #12
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr
	...

08006bb0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b0a6      	sub	sp, #152	; 0x98
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d101      	bne.n	8006bd2 <HAL_ADC_ConfigChannel+0x22>
 8006bce:	2302      	movs	r3, #2
 8006bd0:	e31e      	b.n	8007210 <HAL_ADC_ConfigChannel+0x660>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4618      	mov	r0, r3
 8006be0:	f7ff fd76 	bl	80066d0 <LL_ADC_REG_IsConversionOngoing>
 8006be4:	4603      	mov	r3, r0
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	f040 8303 	bne.w	80071f2 <HAL_ADC_ConfigChannel+0x642>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6818      	ldr	r0, [r3, #0]
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	6859      	ldr	r1, [r3, #4]
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	f7ff fc30 	bl	800645e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4618      	mov	r0, r3
 8006c04:	f7ff fd64 	bl	80066d0 <LL_ADC_REG_IsConversionOngoing>
 8006c08:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4618      	mov	r0, r3
 8006c12:	f7ff fd84 	bl	800671e <LL_ADC_INJ_IsConversionOngoing>
 8006c16:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006c1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	f040 8148 	bne.w	8006eb4 <HAL_ADC_ConfigChannel+0x304>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006c24:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	f040 8143 	bne.w	8006eb4 <HAL_ADC_ConfigChannel+0x304>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6818      	ldr	r0, [r3, #0]
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	6819      	ldr	r1, [r3, #0]
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	f7ff fc38 	bl	80064b0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	695a      	ldr	r2, [r3, #20]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	08db      	lsrs	r3, r3, #3
 8006c4c:	f003 0303 	and.w	r3, r3, #3
 8006c50:	005b      	lsls	r3, r3, #1
 8006c52:	fa02 f303 	lsl.w	r3, r2, r3
 8006c56:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	691b      	ldr	r3, [r3, #16]
 8006c5e:	2b04      	cmp	r3, #4
 8006c60:	d00a      	beq.n	8006c78 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6818      	ldr	r0, [r3, #0]
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	6919      	ldr	r1, [r3, #16]
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c72:	f7ff fb93 	bl	800639c <LL_ADC_SetOffset>
 8006c76:	e11d      	b.n	8006eb4 <HAL_ADC_ConfigChannel+0x304>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	2100      	movs	r1, #0
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f7ff fbae 	bl	80063e0 <LL_ADC_GetOffsetChannel>
 8006c84:	4603      	mov	r3, r0
 8006c86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d10a      	bne.n	8006ca4 <HAL_ADC_ConfigChannel+0xf4>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	2100      	movs	r1, #0
 8006c94:	4618      	mov	r0, r3
 8006c96:	f7ff fba3 	bl	80063e0 <LL_ADC_GetOffsetChannel>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	0e9b      	lsrs	r3, r3, #26
 8006c9e:	f003 021f 	and.w	r2, r3, #31
 8006ca2:	e012      	b.n	8006cca <HAL_ADC_ConfigChannel+0x11a>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	2100      	movs	r1, #0
 8006caa:	4618      	mov	r0, r3
 8006cac:	f7ff fb98 	bl	80063e0 <LL_ADC_GetOffsetChannel>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cb6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006cba:	fa93 f3a3 	rbit	r3, r3
 8006cbe:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8006cc0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006cc2:	fab3 f383 	clz	r3, r3
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	461a      	mov	r2, r3
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d105      	bne.n	8006ce2 <HAL_ADC_ConfigChannel+0x132>
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	0e9b      	lsrs	r3, r3, #26
 8006cdc:	f003 031f 	and.w	r3, r3, #31
 8006ce0:	e00a      	b.n	8006cf8 <HAL_ADC_ConfigChannel+0x148>
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ce8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cea:	fa93 f3a3 	rbit	r3, r3
 8006cee:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8006cf0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006cf2:	fab3 f383 	clz	r3, r3
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d106      	bne.n	8006d0a <HAL_ADC_ConfigChannel+0x15a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	2200      	movs	r2, #0
 8006d02:	2100      	movs	r1, #0
 8006d04:	4618      	mov	r0, r3
 8006d06:	f7ff fb7f 	bl	8006408 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	2101      	movs	r1, #1
 8006d10:	4618      	mov	r0, r3
 8006d12:	f7ff fb65 	bl	80063e0 <LL_ADC_GetOffsetChannel>
 8006d16:	4603      	mov	r3, r0
 8006d18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d10a      	bne.n	8006d36 <HAL_ADC_ConfigChannel+0x186>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2101      	movs	r1, #1
 8006d26:	4618      	mov	r0, r3
 8006d28:	f7ff fb5a 	bl	80063e0 <LL_ADC_GetOffsetChannel>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	0e9b      	lsrs	r3, r3, #26
 8006d30:	f003 021f 	and.w	r2, r3, #31
 8006d34:	e010      	b.n	8006d58 <HAL_ADC_ConfigChannel+0x1a8>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	2101      	movs	r1, #1
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f7ff fb4f 	bl	80063e0 <LL_ADC_GetOffsetChannel>
 8006d42:	4603      	mov	r3, r0
 8006d44:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d48:	fa93 f3a3 	rbit	r3, r3
 8006d4c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8006d4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d50:	fab3 f383 	clz	r3, r3
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	461a      	mov	r2, r3
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d105      	bne.n	8006d70 <HAL_ADC_ConfigChannel+0x1c0>
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	0e9b      	lsrs	r3, r3, #26
 8006d6a:	f003 031f 	and.w	r3, r3, #31
 8006d6e:	e00a      	b.n	8006d86 <HAL_ADC_ConfigChannel+0x1d6>
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006d78:	fa93 f3a3 	rbit	r3, r3
 8006d7c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8006d7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d80:	fab3 f383 	clz	r3, r3
 8006d84:	b2db      	uxtb	r3, r3
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d106      	bne.n	8006d98 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	2101      	movs	r1, #1
 8006d92:	4618      	mov	r0, r3
 8006d94:	f7ff fb38 	bl	8006408 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	2102      	movs	r1, #2
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f7ff fb1e 	bl	80063e0 <LL_ADC_GetOffsetChannel>
 8006da4:	4603      	mov	r3, r0
 8006da6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d10a      	bne.n	8006dc4 <HAL_ADC_ConfigChannel+0x214>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	2102      	movs	r1, #2
 8006db4:	4618      	mov	r0, r3
 8006db6:	f7ff fb13 	bl	80063e0 <LL_ADC_GetOffsetChannel>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	0e9b      	lsrs	r3, r3, #26
 8006dbe:	f003 021f 	and.w	r2, r3, #31
 8006dc2:	e010      	b.n	8006de6 <HAL_ADC_ConfigChannel+0x236>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	2102      	movs	r1, #2
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f7ff fb08 	bl	80063e0 <LL_ADC_GetOffsetChannel>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dd4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006dd6:	fa93 f3a3 	rbit	r3, r3
 8006dda:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8006ddc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006dde:	fab3 f383 	clz	r3, r3
 8006de2:	b2db      	uxtb	r3, r3
 8006de4:	461a      	mov	r2, r3
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d105      	bne.n	8006dfe <HAL_ADC_ConfigChannel+0x24e>
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	0e9b      	lsrs	r3, r3, #26
 8006df8:	f003 031f 	and.w	r3, r3, #31
 8006dfc:	e00a      	b.n	8006e14 <HAL_ADC_ConfigChannel+0x264>
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e06:	fa93 f3a3 	rbit	r3, r3
 8006e0a:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8006e0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e0e:	fab3 f383 	clz	r3, r3
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d106      	bne.n	8006e26 <HAL_ADC_ConfigChannel+0x276>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	2102      	movs	r1, #2
 8006e20:	4618      	mov	r0, r3
 8006e22:	f7ff faf1 	bl	8006408 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	2103      	movs	r1, #3
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f7ff fad7 	bl	80063e0 <LL_ADC_GetOffsetChannel>
 8006e32:	4603      	mov	r3, r0
 8006e34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d10a      	bne.n	8006e52 <HAL_ADC_ConfigChannel+0x2a2>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	2103      	movs	r1, #3
 8006e42:	4618      	mov	r0, r3
 8006e44:	f7ff facc 	bl	80063e0 <LL_ADC_GetOffsetChannel>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	0e9b      	lsrs	r3, r3, #26
 8006e4c:	f003 021f 	and.w	r2, r3, #31
 8006e50:	e010      	b.n	8006e74 <HAL_ADC_ConfigChannel+0x2c4>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	2103      	movs	r1, #3
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f7ff fac1 	bl	80063e0 <LL_ADC_GetOffsetChannel>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e64:	fa93 f3a3 	rbit	r3, r3
 8006e68:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006e6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e6c:	fab3 f383 	clz	r3, r3
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	461a      	mov	r2, r3
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d105      	bne.n	8006e8c <HAL_ADC_ConfigChannel+0x2dc>
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	0e9b      	lsrs	r3, r3, #26
 8006e86:	f003 031f 	and.w	r3, r3, #31
 8006e8a:	e00a      	b.n	8006ea2 <HAL_ADC_ConfigChannel+0x2f2>
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e94:	fa93 f3a3 	rbit	r3, r3
 8006e98:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8006e9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e9c:	fab3 f383 	clz	r3, r3
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d106      	bne.n	8006eb4 <HAL_ADC_ConfigChannel+0x304>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	2103      	movs	r1, #3
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f7ff faaa 	bl	8006408 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f7ff fbbb 	bl	8006634 <LL_ADC_IsEnabled>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	f040 819f 	bne.w	8007204 <HAL_ADC_ConfigChannel+0x654>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6818      	ldr	r0, [r3, #0]
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	6819      	ldr	r1, [r3, #0]
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	68db      	ldr	r3, [r3, #12]
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	f7ff fb14 	bl	8006500 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	4aab      	ldr	r2, [pc, #684]	; (800718c <HAL_ADC_ConfigChannel+0x5dc>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	f040 80fd 	bne.w	80070de <HAL_ADC_ConfigChannel+0x52e>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d10b      	bne.n	8006f0c <HAL_ADC_ConfigChannel+0x35c>
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	0e9b      	lsrs	r3, r3, #26
 8006efa:	3301      	adds	r3, #1
 8006efc:	f003 031f 	and.w	r3, r3, #31
 8006f00:	2b09      	cmp	r3, #9
 8006f02:	bf94      	ite	ls
 8006f04:	2301      	movls	r3, #1
 8006f06:	2300      	movhi	r3, #0
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	e012      	b.n	8006f32 <HAL_ADC_ConfigChannel+0x382>
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f14:	fa93 f3a3 	rbit	r3, r3
 8006f18:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8006f1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f1c:	fab3 f383 	clz	r3, r3
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	3301      	adds	r3, #1
 8006f24:	f003 031f 	and.w	r3, r3, #31
 8006f28:	2b09      	cmp	r3, #9
 8006f2a:	bf94      	ite	ls
 8006f2c:	2301      	movls	r3, #1
 8006f2e:	2300      	movhi	r3, #0
 8006f30:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d064      	beq.n	8007000 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d107      	bne.n	8006f52 <HAL_ADC_ConfigChannel+0x3a2>
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	0e9b      	lsrs	r3, r3, #26
 8006f48:	3301      	adds	r3, #1
 8006f4a:	069b      	lsls	r3, r3, #26
 8006f4c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006f50:	e00e      	b.n	8006f70 <HAL_ADC_ConfigChannel+0x3c0>
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f5a:	fa93 f3a3 	rbit	r3, r3
 8006f5e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f62:	fab3 f383 	clz	r3, r3
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	3301      	adds	r3, #1
 8006f6a:	069b      	lsls	r3, r3, #26
 8006f6c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d109      	bne.n	8006f90 <HAL_ADC_ConfigChannel+0x3e0>
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	0e9b      	lsrs	r3, r3, #26
 8006f82:	3301      	adds	r3, #1
 8006f84:	f003 031f 	and.w	r3, r3, #31
 8006f88:	2101      	movs	r1, #1
 8006f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8006f8e:	e010      	b.n	8006fb2 <HAL_ADC_ConfigChannel+0x402>
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f98:	fa93 f3a3 	rbit	r3, r3
 8006f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fa0:	fab3 f383 	clz	r3, r3
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	f003 031f 	and.w	r3, r3, #31
 8006fac:	2101      	movs	r1, #1
 8006fae:	fa01 f303 	lsl.w	r3, r1, r3
 8006fb2:	ea42 0103 	orr.w	r1, r2, r3
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d10a      	bne.n	8006fd8 <HAL_ADC_ConfigChannel+0x428>
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	0e9b      	lsrs	r3, r3, #26
 8006fc8:	3301      	adds	r3, #1
 8006fca:	f003 021f 	and.w	r2, r3, #31
 8006fce:	4613      	mov	r3, r2
 8006fd0:	005b      	lsls	r3, r3, #1
 8006fd2:	4413      	add	r3, r2
 8006fd4:	051b      	lsls	r3, r3, #20
 8006fd6:	e011      	b.n	8006ffc <HAL_ADC_ConfigChannel+0x44c>
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe0:	fa93 f3a3 	rbit	r3, r3
 8006fe4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8006fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe8:	fab3 f383 	clz	r3, r3
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	3301      	adds	r3, #1
 8006ff0:	f003 021f 	and.w	r2, r3, #31
 8006ff4:	4613      	mov	r3, r2
 8006ff6:	005b      	lsls	r3, r3, #1
 8006ff8:	4413      	add	r3, r2
 8006ffa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006ffc:	430b      	orrs	r3, r1
 8006ffe:	e069      	b.n	80070d4 <HAL_ADC_ConfigChannel+0x524>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007008:	2b00      	cmp	r3, #0
 800700a:	d107      	bne.n	800701c <HAL_ADC_ConfigChannel+0x46c>
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	0e9b      	lsrs	r3, r3, #26
 8007012:	3301      	adds	r3, #1
 8007014:	069b      	lsls	r3, r3, #26
 8007016:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800701a:	e00e      	b.n	800703a <HAL_ADC_ConfigChannel+0x48a>
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007022:	6a3b      	ldr	r3, [r7, #32]
 8007024:	fa93 f3a3 	rbit	r3, r3
 8007028:	61fb      	str	r3, [r7, #28]
  return result;
 800702a:	69fb      	ldr	r3, [r7, #28]
 800702c:	fab3 f383 	clz	r3, r3
 8007030:	b2db      	uxtb	r3, r3
 8007032:	3301      	adds	r3, #1
 8007034:	069b      	lsls	r3, r3, #26
 8007036:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007042:	2b00      	cmp	r3, #0
 8007044:	d109      	bne.n	800705a <HAL_ADC_ConfigChannel+0x4aa>
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	0e9b      	lsrs	r3, r3, #26
 800704c:	3301      	adds	r3, #1
 800704e:	f003 031f 	and.w	r3, r3, #31
 8007052:	2101      	movs	r1, #1
 8007054:	fa01 f303 	lsl.w	r3, r1, r3
 8007058:	e010      	b.n	800707c <HAL_ADC_ConfigChannel+0x4cc>
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007060:	69bb      	ldr	r3, [r7, #24]
 8007062:	fa93 f3a3 	rbit	r3, r3
 8007066:	617b      	str	r3, [r7, #20]
  return result;
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	fab3 f383 	clz	r3, r3
 800706e:	b2db      	uxtb	r3, r3
 8007070:	3301      	adds	r3, #1
 8007072:	f003 031f 	and.w	r3, r3, #31
 8007076:	2101      	movs	r1, #1
 8007078:	fa01 f303 	lsl.w	r3, r1, r3
 800707c:	ea42 0103 	orr.w	r1, r2, r3
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007088:	2b00      	cmp	r3, #0
 800708a:	d10d      	bne.n	80070a8 <HAL_ADC_ConfigChannel+0x4f8>
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	0e9b      	lsrs	r3, r3, #26
 8007092:	3301      	adds	r3, #1
 8007094:	f003 021f 	and.w	r2, r3, #31
 8007098:	4613      	mov	r3, r2
 800709a:	005b      	lsls	r3, r3, #1
 800709c:	4413      	add	r3, r2
 800709e:	3b1e      	subs	r3, #30
 80070a0:	051b      	lsls	r3, r3, #20
 80070a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80070a6:	e014      	b.n	80070d2 <HAL_ADC_ConfigChannel+0x522>
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	fa93 f3a3 	rbit	r3, r3
 80070b4:	60fb      	str	r3, [r7, #12]
  return result;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	fab3 f383 	clz	r3, r3
 80070bc:	b2db      	uxtb	r3, r3
 80070be:	3301      	adds	r3, #1
 80070c0:	f003 021f 	and.w	r2, r3, #31
 80070c4:	4613      	mov	r3, r2
 80070c6:	005b      	lsls	r3, r3, #1
 80070c8:	4413      	add	r3, r2
 80070ca:	3b1e      	subs	r3, #30
 80070cc:	051b      	lsls	r3, r3, #20
 80070ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80070d2:	430b      	orrs	r3, r1
 80070d4:	683a      	ldr	r2, [r7, #0]
 80070d6:	6892      	ldr	r2, [r2, #8]
 80070d8:	4619      	mov	r1, r3
 80070da:	f7ff f9e9 	bl	80064b0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	681a      	ldr	r2, [r3, #0]
 80070e2:	4b2b      	ldr	r3, [pc, #172]	; (8007190 <HAL_ADC_ConfigChannel+0x5e0>)
 80070e4:	4013      	ands	r3, r2
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	f000 808c 	beq.w	8007204 <HAL_ADC_ConfigChannel+0x654>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80070ec:	4829      	ldr	r0, [pc, #164]	; (8007194 <HAL_ADC_ConfigChannel+0x5e4>)
 80070ee:	f7ff f947 	bl	8006380 <LL_ADC_GetCommonPathInternalCh>
 80070f2:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80070f6:	4828      	ldr	r0, [pc, #160]	; (8007198 <HAL_ADC_ConfigChannel+0x5e8>)
 80070f8:	f7ff fa9c 	bl	8006634 <LL_ADC_IsEnabled>
 80070fc:	4603      	mov	r3, r0
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d16d      	bne.n	80071de <HAL_ADC_ConfigChannel+0x62e>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a25      	ldr	r2, [pc, #148]	; (800719c <HAL_ADC_ConfigChannel+0x5ec>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d126      	bne.n	800715a <HAL_ADC_ConfigChannel+0x5aa>
 800710c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007110:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007114:	2b00      	cmp	r3, #0
 8007116:	d120      	bne.n	800715a <HAL_ADC_ConfigChannel+0x5aa>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a1e      	ldr	r2, [pc, #120]	; (8007198 <HAL_ADC_ConfigChannel+0x5e8>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d170      	bne.n	8007204 <HAL_ADC_ConfigChannel+0x654>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8007122:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007126:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800712a:	4619      	mov	r1, r3
 800712c:	4819      	ldr	r0, [pc, #100]	; (8007194 <HAL_ADC_ConfigChannel+0x5e4>)
 800712e:	f7ff f914 	bl	800635a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8007132:	4b1b      	ldr	r3, [pc, #108]	; (80071a0 <HAL_ADC_ConfigChannel+0x5f0>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	099b      	lsrs	r3, r3, #6
 8007138:	4a1a      	ldr	r2, [pc, #104]	; (80071a4 <HAL_ADC_ConfigChannel+0x5f4>)
 800713a:	fba2 2303 	umull	r2, r3, r2, r3
 800713e:	099a      	lsrs	r2, r3, #6
 8007140:	4613      	mov	r3, r2
 8007142:	005b      	lsls	r3, r3, #1
 8007144:	4413      	add	r3, r2
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 800714a:	e002      	b.n	8007152 <HAL_ADC_ConfigChannel+0x5a2>
              {
                wait_loop_index--;
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	3b01      	subs	r3, #1
 8007150:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d1f9      	bne.n	800714c <HAL_ADC_ConfigChannel+0x59c>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007158:	e054      	b.n	8007204 <HAL_ADC_ConfigChannel+0x654>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a12      	ldr	r2, [pc, #72]	; (80071a8 <HAL_ADC_ConfigChannel+0x5f8>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d123      	bne.n	80071ac <HAL_ADC_ConfigChannel+0x5fc>
 8007164:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007168:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800716c:	2b00      	cmp	r3, #0
 800716e:	d11d      	bne.n	80071ac <HAL_ADC_ConfigChannel+0x5fc>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a08      	ldr	r2, [pc, #32]	; (8007198 <HAL_ADC_ConfigChannel+0x5e8>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d144      	bne.n	8007204 <HAL_ADC_ConfigChannel+0x654>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800717a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800717e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007182:	4619      	mov	r1, r3
 8007184:	4803      	ldr	r0, [pc, #12]	; (8007194 <HAL_ADC_ConfigChannel+0x5e4>)
 8007186:	f7ff f8e8 	bl	800635a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800718a:	e03b      	b.n	8007204 <HAL_ADC_ConfigChannel+0x654>
 800718c:	407f0000 	.word	0x407f0000
 8007190:	80080000 	.word	0x80080000
 8007194:	50040300 	.word	0x50040300
 8007198:	50040000 	.word	0x50040000
 800719c:	c7520000 	.word	0xc7520000
 80071a0:	20000078 	.word	0x20000078
 80071a4:	053e2d63 	.word	0x053e2d63
 80071a8:	cb840000 	.word	0xcb840000
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a19      	ldr	r2, [pc, #100]	; (8007218 <HAL_ADC_ConfigChannel+0x668>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d126      	bne.n	8007204 <HAL_ADC_ConfigChannel+0x654>
 80071b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80071ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d120      	bne.n	8007204 <HAL_ADC_ConfigChannel+0x654>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a15      	ldr	r2, [pc, #84]	; (800721c <HAL_ADC_ConfigChannel+0x66c>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d11b      	bne.n	8007204 <HAL_ADC_ConfigChannel+0x654>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80071cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80071d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80071d4:	4619      	mov	r1, r3
 80071d6:	4812      	ldr	r0, [pc, #72]	; (8007220 <HAL_ADC_ConfigChannel+0x670>)
 80071d8:	f7ff f8bf 	bl	800635a <LL_ADC_SetCommonPathInternalCh>
 80071dc:	e012      	b.n	8007204 <HAL_ADC_ConfigChannel+0x654>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071e2:	f043 0220 	orr.w	r2, r3, #32
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80071ea:	2301      	movs	r3, #1
 80071ec:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80071f0:	e008      	b.n	8007204 <HAL_ADC_ConfigChannel+0x654>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071f6:	f043 0220 	orr.w	r2, r3, #32
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80071fe:	2301      	movs	r3, #1
 8007200:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800720c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8007210:	4618      	mov	r0, r3
 8007212:	3798      	adds	r7, #152	; 0x98
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}
 8007218:	80000001 	.word	0x80000001
 800721c:	50040000 	.word	0x50040000
 8007220:	50040300 	.word	0x50040300

08007224 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b088      	sub	sp, #32
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800722e:	2300      	movs	r3, #0
 8007230:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4618      	mov	r0, r3
 800723c:	f7ff fa48 	bl	80066d0 <LL_ADC_REG_IsConversionOngoing>
 8007240:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4618      	mov	r0, r3
 8007248:	f7ff fa69 	bl	800671e <LL_ADC_INJ_IsConversionOngoing>
 800724c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d103      	bne.n	800725c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2b00      	cmp	r3, #0
 8007258:	f000 8090 	beq.w	800737c <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	68db      	ldr	r3, [r3, #12]
 8007262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007266:	2b00      	cmp	r3, #0
 8007268:	d02a      	beq.n	80072c0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	7e5b      	ldrb	r3, [r3, #25]
 800726e:	2b01      	cmp	r3, #1
 8007270:	d126      	bne.n	80072c0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	7e1b      	ldrb	r3, [r3, #24]
 8007276:	2b01      	cmp	r3, #1
 8007278:	d122      	bne.n	80072c0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800727a:	2301      	movs	r3, #1
 800727c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800727e:	e014      	b.n	80072aa <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	4a41      	ldr	r2, [pc, #260]	; (8007388 <ADC_ConversionStop+0x164>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d90d      	bls.n	80072a4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800728c:	f043 0210 	orr.w	r2, r3, #16
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007298:	f043 0201 	orr.w	r2, r3, #1
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80072a0:	2301      	movs	r3, #1
 80072a2:	e06c      	b.n	800737e <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80072a4:	69fb      	ldr	r3, [r7, #28]
 80072a6:	3301      	adds	r3, #1
 80072a8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072b4:	2b40      	cmp	r3, #64	; 0x40
 80072b6:	d1e3      	bne.n	8007280 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	2240      	movs	r2, #64	; 0x40
 80072be:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80072c0:	69bb      	ldr	r3, [r7, #24]
 80072c2:	2b02      	cmp	r3, #2
 80072c4:	d014      	beq.n	80072f0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4618      	mov	r0, r3
 80072cc:	f7ff fa00 	bl	80066d0 <LL_ADC_REG_IsConversionOngoing>
 80072d0:	4603      	mov	r3, r0
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d00c      	beq.n	80072f0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4618      	mov	r0, r3
 80072dc:	f7ff f9bd 	bl	800665a <LL_ADC_IsDisableOngoing>
 80072e0:	4603      	mov	r3, r0
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d104      	bne.n	80072f0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4618      	mov	r0, r3
 80072ec:	f7ff f9dc 	bl	80066a8 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80072f0:	69bb      	ldr	r3, [r7, #24]
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d014      	beq.n	8007320 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4618      	mov	r0, r3
 80072fc:	f7ff fa0f 	bl	800671e <LL_ADC_INJ_IsConversionOngoing>
 8007300:	4603      	mov	r3, r0
 8007302:	2b00      	cmp	r3, #0
 8007304:	d00c      	beq.n	8007320 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4618      	mov	r0, r3
 800730c:	f7ff f9a5 	bl	800665a <LL_ADC_IsDisableOngoing>
 8007310:	4603      	mov	r3, r0
 8007312:	2b00      	cmp	r3, #0
 8007314:	d104      	bne.n	8007320 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4618      	mov	r0, r3
 800731c:	f7ff f9eb 	bl	80066f6 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8007320:	69bb      	ldr	r3, [r7, #24]
 8007322:	2b02      	cmp	r3, #2
 8007324:	d004      	beq.n	8007330 <ADC_ConversionStop+0x10c>
 8007326:	2b03      	cmp	r3, #3
 8007328:	d105      	bne.n	8007336 <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800732a:	230c      	movs	r3, #12
 800732c:	617b      	str	r3, [r7, #20]
        break;
 800732e:	e005      	b.n	800733c <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8007330:	2308      	movs	r3, #8
 8007332:	617b      	str	r3, [r7, #20]
        break;
 8007334:	e002      	b.n	800733c <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8007336:	2304      	movs	r3, #4
 8007338:	617b      	str	r3, [r7, #20]
        break;
 800733a:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800733c:	f7fe ffc8 	bl	80062d0 <HAL_GetTick>
 8007340:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8007342:	e014      	b.n	800736e <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8007344:	f7fe ffc4 	bl	80062d0 <HAL_GetTick>
 8007348:	4602      	mov	r2, r0
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	1ad3      	subs	r3, r2, r3
 800734e:	2b05      	cmp	r3, #5
 8007350:	d90d      	bls.n	800736e <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007356:	f043 0210 	orr.w	r2, r3, #16
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007362:	f043 0201 	orr.w	r2, r3, #1
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 800736a:	2301      	movs	r3, #1
 800736c:	e007      	b.n	800737e <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	689a      	ldr	r2, [r3, #8]
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	4013      	ands	r3, r2
 8007378:	2b00      	cmp	r3, #0
 800737a:	d1e3      	bne.n	8007344 <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800737c:	2300      	movs	r3, #0
}
 800737e:	4618      	mov	r0, r3
 8007380:	3720      	adds	r7, #32
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
 8007386:	bf00      	nop
 8007388:	a33fffff 	.word	0xa33fffff

0800738c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b084      	sub	sp, #16
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4618      	mov	r0, r3
 800739a:	f7ff f94b 	bl	8006634 <LL_ADC_IsEnabled>
 800739e:	4603      	mov	r3, r0
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d146      	bne.n	8007432 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	689a      	ldr	r2, [r3, #8]
 80073aa:	4b24      	ldr	r3, [pc, #144]	; (800743c <ADC_Enable+0xb0>)
 80073ac:	4013      	ands	r3, r2
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d00d      	beq.n	80073ce <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073b6:	f043 0210 	orr.w	r2, r3, #16
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073c2:	f043 0201 	orr.w	r2, r3, #1
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80073ca:	2301      	movs	r3, #1
 80073cc:	e032      	b.n	8007434 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4618      	mov	r0, r3
 80073d4:	f7ff f906 	bl	80065e4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80073d8:	f7fe ff7a 	bl	80062d0 <HAL_GetTick>
 80073dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80073de:	e021      	b.n	8007424 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4618      	mov	r0, r3
 80073e6:	f7ff f925 	bl	8006634 <LL_ADC_IsEnabled>
 80073ea:	4603      	mov	r3, r0
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d104      	bne.n	80073fa <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4618      	mov	r0, r3
 80073f6:	f7ff f8f5 	bl	80065e4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80073fa:	f7fe ff69 	bl	80062d0 <HAL_GetTick>
 80073fe:	4602      	mov	r2, r0
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	1ad3      	subs	r3, r2, r3
 8007404:	2b02      	cmp	r3, #2
 8007406:	d90d      	bls.n	8007424 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800740c:	f043 0210 	orr.w	r2, r3, #16
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007418:	f043 0201 	orr.w	r2, r3, #1
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8007420:	2301      	movs	r3, #1
 8007422:	e007      	b.n	8007434 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f003 0301 	and.w	r3, r3, #1
 800742e:	2b01      	cmp	r3, #1
 8007430:	d1d6      	bne.n	80073e0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007432:	2300      	movs	r3, #0
}
 8007434:	4618      	mov	r0, r3
 8007436:	3710      	adds	r7, #16
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}
 800743c:	8000003f 	.word	0x8000003f

08007440 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b084      	sub	sp, #16
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4618      	mov	r0, r3
 800744e:	f7ff f904 	bl	800665a <LL_ADC_IsDisableOngoing>
 8007452:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4618      	mov	r0, r3
 800745a:	f7ff f8eb 	bl	8006634 <LL_ADC_IsEnabled>
 800745e:	4603      	mov	r3, r0
 8007460:	2b00      	cmp	r3, #0
 8007462:	d040      	beq.n	80074e6 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d13d      	bne.n	80074e6 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	689b      	ldr	r3, [r3, #8]
 8007470:	f003 030d 	and.w	r3, r3, #13
 8007474:	2b01      	cmp	r3, #1
 8007476:	d10c      	bne.n	8007492 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4618      	mov	r0, r3
 800747e:	f7ff f8c5 	bl	800660c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	2203      	movs	r2, #3
 8007488:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800748a:	f7fe ff21 	bl	80062d0 <HAL_GetTick>
 800748e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007490:	e022      	b.n	80074d8 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007496:	f043 0210 	orr.w	r2, r3, #16
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074a2:	f043 0201 	orr.w	r2, r3, #1
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80074aa:	2301      	movs	r3, #1
 80074ac:	e01c      	b.n	80074e8 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80074ae:	f7fe ff0f 	bl	80062d0 <HAL_GetTick>
 80074b2:	4602      	mov	r2, r0
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	1ad3      	subs	r3, r2, r3
 80074b8:	2b02      	cmp	r3, #2
 80074ba:	d90d      	bls.n	80074d8 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074c0:	f043 0210 	orr.w	r2, r3, #16
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074cc:	f043 0201 	orr.w	r2, r3, #1
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	e007      	b.n	80074e8 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	f003 0301 	and.w	r3, r3, #1
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d1e3      	bne.n	80074ae <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80074e6:	2300      	movs	r3, #0
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3710      	adds	r7, #16
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b084      	sub	sp, #16
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074fc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007502:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007506:	2b00      	cmp	r3, #0
 8007508:	d14b      	bne.n	80075a2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800750e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f003 0308 	and.w	r3, r3, #8
 8007520:	2b00      	cmp	r3, #0
 8007522:	d021      	beq.n	8007568 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4618      	mov	r0, r3
 800752a:	f7fe ff85 	bl	8006438 <LL_ADC_REG_IsTriggerSourceSWStart>
 800752e:	4603      	mov	r3, r0
 8007530:	2b00      	cmp	r3, #0
 8007532:	d032      	beq.n	800759a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	68db      	ldr	r3, [r3, #12]
 800753a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800753e:	2b00      	cmp	r3, #0
 8007540:	d12b      	bne.n	800759a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007546:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007552:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007556:	2b00      	cmp	r3, #0
 8007558:	d11f      	bne.n	800759a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800755e:	f043 0201 	orr.w	r2, r3, #1
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	655a      	str	r2, [r3, #84]	; 0x54
 8007566:	e018      	b.n	800759a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	68db      	ldr	r3, [r3, #12]
 800756e:	f003 0302 	and.w	r3, r3, #2
 8007572:	2b00      	cmp	r3, #0
 8007574:	d111      	bne.n	800759a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800757a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007586:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800758a:	2b00      	cmp	r3, #0
 800758c:	d105      	bne.n	800759a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007592:	f043 0201 	orr.w	r2, r3, #1
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800759a:	68f8      	ldr	r0, [r7, #12]
 800759c:	f7fa f8ba 	bl	8001714 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80075a0:	e00e      	b.n	80075c0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075a6:	f003 0310 	and.w	r3, r3, #16
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d003      	beq.n	80075b6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80075ae:	68f8      	ldr	r0, [r7, #12]
 80075b0:	f7ff faf3 	bl	8006b9a <HAL_ADC_ErrorCallback>
}
 80075b4:	e004      	b.n	80075c0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	4798      	blx	r3
}
 80075c0:	bf00      	nop
 80075c2:	3710      	adds	r7, #16
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b084      	sub	sp, #16
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075d4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80075d6:	68f8      	ldr	r0, [r7, #12]
 80075d8:	f7fa f8b4 	bl	8001744 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80075dc:	bf00      	nop
 80075de:	3710      	adds	r7, #16
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}

080075e4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b084      	sub	sp, #16
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075f0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007602:	f043 0204 	orr.w	r2, r3, #4
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800760a:	68f8      	ldr	r0, [r7, #12]
 800760c:	f7ff fac5 	bl	8006b9a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007610:	bf00      	nop
 8007612:	3710      	adds	r7, #16
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <LL_EXTI_EnableIT_0_31>:
{
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8007620:	4b06      	ldr	r3, [pc, #24]	; (800763c <LL_EXTI_EnableIT_0_31+0x24>)
 8007622:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007626:	4905      	ldr	r1, [pc, #20]	; (800763c <LL_EXTI_EnableIT_0_31+0x24>)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	4313      	orrs	r3, r2
 800762c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8007630:	bf00      	nop
 8007632:	370c      	adds	r7, #12
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr
 800763c:	58000800 	.word	0x58000800

08007640 <LL_EXTI_DisableIT_0_31>:
{
 8007640:	b480      	push	{r7}
 8007642:	b083      	sub	sp, #12
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8007648:	4b07      	ldr	r3, [pc, #28]	; (8007668 <LL_EXTI_DisableIT_0_31+0x28>)
 800764a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	43db      	mvns	r3, r3
 8007652:	4905      	ldr	r1, [pc, #20]	; (8007668 <LL_EXTI_DisableIT_0_31+0x28>)
 8007654:	4013      	ands	r3, r2
 8007656:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800765a:	bf00      	nop
 800765c:	370c      	adds	r7, #12
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr
 8007666:	bf00      	nop
 8007668:	58000800 	.word	0x58000800

0800766c <LL_EXTI_EnableEvent_0_31>:
{
 800766c:	b480      	push	{r7}
 800766e:	b083      	sub	sp, #12
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8007674:	4b06      	ldr	r3, [pc, #24]	; (8007690 <LL_EXTI_EnableEvent_0_31+0x24>)
 8007676:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800767a:	4905      	ldr	r1, [pc, #20]	; (8007690 <LL_EXTI_EnableEvent_0_31+0x24>)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	4313      	orrs	r3, r2
 8007680:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
}
 8007684:	bf00      	nop
 8007686:	370c      	adds	r7, #12
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr
 8007690:	58000800 	.word	0x58000800

08007694 <LL_EXTI_DisableEvent_0_31>:
{
 8007694:	b480      	push	{r7}
 8007696:	b083      	sub	sp, #12
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800769c:	4b07      	ldr	r3, [pc, #28]	; (80076bc <LL_EXTI_DisableEvent_0_31+0x28>)
 800769e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	43db      	mvns	r3, r3
 80076a6:	4905      	ldr	r1, [pc, #20]	; (80076bc <LL_EXTI_DisableEvent_0_31+0x28>)
 80076a8:	4013      	ands	r3, r2
 80076aa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
}
 80076ae:	bf00      	nop
 80076b0:	370c      	adds	r7, #12
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr
 80076ba:	bf00      	nop
 80076bc:	58000800 	.word	0x58000800

080076c0 <LL_EXTI_EnableRisingTrig_0_31>:
{
 80076c0:	b480      	push	{r7}
 80076c2:	b083      	sub	sp, #12
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80076c8:	4b05      	ldr	r3, [pc, #20]	; (80076e0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	4904      	ldr	r1, [pc, #16]	; (80076e0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	4313      	orrs	r3, r2
 80076d2:	600b      	str	r3, [r1, #0]
}
 80076d4:	bf00      	nop
 80076d6:	370c      	adds	r7, #12
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr
 80076e0:	58000800 	.word	0x58000800

080076e4 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b083      	sub	sp, #12
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80076ec:	4b06      	ldr	r3, [pc, #24]	; (8007708 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80076ee:	681a      	ldr	r2, [r3, #0]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	43db      	mvns	r3, r3
 80076f4:	4904      	ldr	r1, [pc, #16]	; (8007708 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80076f6:	4013      	ands	r3, r2
 80076f8:	600b      	str	r3, [r1, #0]

}
 80076fa:	bf00      	nop
 80076fc:	370c      	adds	r7, #12
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr
 8007706:	bf00      	nop
 8007708:	58000800 	.word	0x58000800

0800770c <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 800770c:	b480      	push	{r7}
 800770e:	b083      	sub	sp, #12
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8007714:	4b05      	ldr	r3, [pc, #20]	; (800772c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8007716:	685a      	ldr	r2, [r3, #4]
 8007718:	4904      	ldr	r1, [pc, #16]	; (800772c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	4313      	orrs	r3, r2
 800771e:	604b      	str	r3, [r1, #4]
}
 8007720:	bf00      	nop
 8007722:	370c      	adds	r7, #12
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr
 800772c:	58000800 	.word	0x58000800

08007730 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8007730:	b480      	push	{r7}
 8007732:	b083      	sub	sp, #12
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8007738:	4b06      	ldr	r3, [pc, #24]	; (8007754 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800773a:	685a      	ldr	r2, [r3, #4]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	43db      	mvns	r3, r3
 8007740:	4904      	ldr	r1, [pc, #16]	; (8007754 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8007742:	4013      	ands	r3, r2
 8007744:	604b      	str	r3, [r1, #4]
}
 8007746:	bf00      	nop
 8007748:	370c      	adds	r7, #12
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr
 8007752:	bf00      	nop
 8007754:	58000800 	.word	0x58000800

08007758 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8007758:	b480      	push	{r7}
 800775a:	b083      	sub	sp, #12
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8007760:	4b07      	ldr	r3, [pc, #28]	; (8007780 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8007762:	68da      	ldr	r2, [r3, #12]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	4013      	ands	r3, r2
 8007768:	687a      	ldr	r2, [r7, #4]
 800776a:	429a      	cmp	r2, r3
 800776c:	d101      	bne.n	8007772 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 800776e:	2301      	movs	r3, #1
 8007770:	e000      	b.n	8007774 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8007772:	2300      	movs	r3, #0
}
 8007774:	4618      	mov	r0, r3
 8007776:	370c      	adds	r7, #12
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr
 8007780:	58000800 	.word	0x58000800

08007784 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8007784:	b480      	push	{r7}
 8007786:	b083      	sub	sp, #12
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 800778c:	4a04      	ldr	r2, [pc, #16]	; (80077a0 <LL_EXTI_ClearFlag_0_31+0x1c>)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	60d3      	str	r3, [r2, #12]
}
 8007792:	bf00      	nop
 8007794:	370c      	adds	r7, #12
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr
 800779e:	bf00      	nop
 80077a0:	58000800 	.word	0x58000800

080077a4 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b088      	sub	sp, #32
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80077ac:	2300      	movs	r3, #0
 80077ae:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80077b0:	2300      	movs	r3, #0
 80077b2:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d102      	bne.n	80077c0 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 80077ba:	2301      	movs	r3, #1
 80077bc:	77fb      	strb	r3, [r7, #31]
 80077be:	e0c4      	b.n	800794a <HAL_COMP_Init+0x1a6>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077ce:	d102      	bne.n	80077d6 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 80077d0:	2301      	movs	r3, #1
 80077d2:	77fb      	strb	r3, [r7, #31]
 80077d4:	e0b9      	b.n	800794a <HAL_COMP_Init+0x1a6>
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d109      	bne.n	80077f6 <HAL_COMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2200      	movs	r2, #0
 80077e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2200      	movs	r2, #0
 80077ee:	629a      	str	r2, [r3, #40]	; 0x28
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f7fa f807 	bl	8001804 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007800:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	691a      	ldr	r2, [r3, #16]
               | hcomp->Init.InputPlus
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	68db      	ldr	r3, [r3, #12]
 800780a:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	69db      	ldr	r3, [r3, #28]
 8007810:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	695b      	ldr	r3, [r3, #20]
 8007816:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	699b      	ldr	r3, [r3, #24]
 800781c:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (  hcomp->Init.InputMinus
 8007822:	4313      	orrs	r3, r2
 8007824:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	681a      	ldr	r2, [r3, #0]
 800782c:	4b49      	ldr	r3, [pc, #292]	; (8007954 <HAL_COMP_Init+0x1b0>)
 800782e:	4013      	ands	r3, r2
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	6812      	ldr	r2, [r2, #0]
 8007834:	6979      	ldr	r1, [r7, #20]
 8007836:	430b      	orrs	r3, r1
 8007838:	6013      	str	r3, [r2, #0]

    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007842:	d106      	bne.n	8007852 <HAL_COMP_Init+0xae>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8007844:	4b44      	ldr	r3, [pc, #272]	; (8007958 <HAL_COMP_Init+0x1b4>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a43      	ldr	r2, [pc, #268]	; (8007958 <HAL_COMP_Init+0x1b4>)
 800784a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800784e:	6013      	str	r3, [r2, #0]
 8007850:	e005      	b.n	800785e <HAL_COMP_Init+0xba>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8007852:	4b41      	ldr	r3, [pc, #260]	; (8007958 <HAL_COMP_Init+0x1b4>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a40      	ldr	r2, [pc, #256]	; (8007958 <HAL_COMP_Init+0x1b4>)
 8007858:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800785c:	6013      	str	r3, [r2, #0]
    }

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007868:	2b00      	cmp	r3, #0
 800786a:	d015      	beq.n	8007898 <HAL_COMP_Init+0xf4>
 800786c:	69bb      	ldr	r3, [r7, #24]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d112      	bne.n	8007898 <HAL_COMP_Init+0xf4>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8007872:	4b3a      	ldr	r3, [pc, #232]	; (800795c <HAL_COMP_Init+0x1b8>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	099b      	lsrs	r3, r3, #6
 8007878:	4a39      	ldr	r2, [pc, #228]	; (8007960 <HAL_COMP_Init+0x1bc>)
 800787a:	fba2 2303 	umull	r2, r3, r2, r3
 800787e:	099a      	lsrs	r2, r3, #6
 8007880:	4613      	mov	r3, r2
 8007882:	009b      	lsls	r3, r3, #2
 8007884:	4413      	add	r3, r2
 8007886:	009b      	lsls	r3, r3, #2
 8007888:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800788a:	e002      	b.n	8007892 <HAL_COMP_Init+0xee>
      {
        wait_loop_index--;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	3b01      	subs	r3, #1
 8007890:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d1f9      	bne.n	800788c <HAL_COMP_Init+0xe8>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a31      	ldr	r2, [pc, #196]	; (8007964 <HAL_COMP_Init+0x1c0>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d102      	bne.n	80078a8 <HAL_COMP_Init+0x104>
 80078a2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80078a6:	e001      	b.n	80078ac <HAL_COMP_Init+0x108>
 80078a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80078ac:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6a1b      	ldr	r3, [r3, #32]
 80078b2:	f003 0303 	and.w	r3, r3, #3
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d037      	beq.n	800792a <HAL_COMP_Init+0x186>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6a1b      	ldr	r3, [r3, #32]
 80078be:	f003 0310 	and.w	r3, r3, #16
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d003      	beq.n	80078ce <HAL_COMP_Init+0x12a>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 80078c6:	6938      	ldr	r0, [r7, #16]
 80078c8:	f7ff fefa 	bl	80076c0 <LL_EXTI_EnableRisingTrig_0_31>
 80078cc:	e002      	b.n	80078d4 <HAL_COMP_Init+0x130>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 80078ce:	6938      	ldr	r0, [r7, #16]
 80078d0:	f7ff ff08 	bl	80076e4 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6a1b      	ldr	r3, [r3, #32]
 80078d8:	f003 0320 	and.w	r3, r3, #32
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d003      	beq.n	80078e8 <HAL_COMP_Init+0x144>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 80078e0:	6938      	ldr	r0, [r7, #16]
 80078e2:	f7ff ff13 	bl	800770c <LL_EXTI_EnableFallingTrig_0_31>
 80078e6:	e002      	b.n	80078ee <HAL_COMP_Init+0x14a>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80078e8:	6938      	ldr	r0, [r7, #16]
 80078ea:	f7ff ff21 	bl	8007730 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearFlag_0_31(exti_line);
 80078ee:	6938      	ldr	r0, [r7, #16]
 80078f0:	f7ff ff48 	bl	8007784 <LL_EXTI_ClearFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6a1b      	ldr	r3, [r3, #32]
 80078f8:	f003 0302 	and.w	r3, r3, #2
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d003      	beq.n	8007908 <HAL_COMP_Init+0x164>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 8007900:	6938      	ldr	r0, [r7, #16]
 8007902:	f7ff feb3 	bl	800766c <LL_EXTI_EnableEvent_0_31>
 8007906:	e002      	b.n	800790e <HAL_COMP_Init+0x16a>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8007908:	6938      	ldr	r0, [r7, #16]
 800790a:	f7ff fec3 	bl	8007694 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6a1b      	ldr	r3, [r3, #32]
 8007912:	f003 0301 	and.w	r3, r3, #1
 8007916:	2b00      	cmp	r3, #0
 8007918:	d003      	beq.n	8007922 <HAL_COMP_Init+0x17e>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 800791a:	6938      	ldr	r0, [r7, #16]
 800791c:	f7ff fe7c 	bl	8007618 <LL_EXTI_EnableIT_0_31>
 8007920:	e009      	b.n	8007936 <HAL_COMP_Init+0x192>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8007922:	6938      	ldr	r0, [r7, #16]
 8007924:	f7ff fe8c 	bl	8007640 <LL_EXTI_DisableIT_0_31>
 8007928:	e005      	b.n	8007936 <HAL_COMP_Init+0x192>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 800792a:	6938      	ldr	r0, [r7, #16]
 800792c:	f7ff feb2 	bl	8007694 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 8007930:	6938      	ldr	r0, [r7, #16]
 8007932:	f7ff fe85 	bl	8007640 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800793c:	b2db      	uxtb	r3, r3
 800793e:	2b00      	cmp	r3, #0
 8007940:	d103      	bne.n	800794a <HAL_COMP_Init+0x1a6>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2201      	movs	r2, #1
 8007946:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 800794a:	7ffb      	ldrb	r3, [r7, #31]
}
 800794c:	4618      	mov	r0, r3
 800794e:	3720      	adds	r7, #32
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}
 8007954:	f9207c03 	.word	0xf9207c03
 8007958:	40010204 	.word	0x40010204
 800795c:	20000078 	.word	0x20000078
 8007960:	053e2d63 	.word	0x053e2d63
 8007964:	40010200 	.word	0x40010200

08007968 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8007968:	b480      	push	{r7}
 800796a:	b085      	sub	sp, #20
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8007970:	2300      	movs	r3, #0
 8007972:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007974:	2300      	movs	r3, #0
 8007976:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d102      	bne.n	8007984 <HAL_COMP_Start+0x1c>
  {
    status = HAL_ERROR;
 800797e:	2301      	movs	r3, #1
 8007980:	73fb      	strb	r3, [r7, #15]
 8007982:	e02f      	b.n	80079e4 <HAL_COMP_Start+0x7c>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800798e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007992:	d102      	bne.n	800799a <HAL_COMP_Start+0x32>
  {
    status = HAL_ERROR;
 8007994:	2301      	movs	r3, #1
 8007996:	73fb      	strb	r3, [r7, #15]
 8007998:	e024      	b.n	80079e4 <HAL_COMP_Start+0x7c>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80079a0:	b2db      	uxtb	r3, r3
 80079a2:	2b01      	cmp	r3, #1
 80079a4:	d11c      	bne.n	80079e0 <HAL_COMP_Start+0x78>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f042 0201 	orr.w	r2, r2, #1
 80079b4:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2202      	movs	r2, #2
 80079ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80079be:	4b0d      	ldr	r3, [pc, #52]	; (80079f4 <HAL_COMP_Start+0x8c>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	099b      	lsrs	r3, r3, #6
 80079c4:	4a0c      	ldr	r2, [pc, #48]	; (80079f8 <HAL_COMP_Start+0x90>)
 80079c6:	fba2 2303 	umull	r2, r3, r2, r3
 80079ca:	099b      	lsrs	r3, r3, #6
 80079cc:	00db      	lsls	r3, r3, #3
 80079ce:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80079d0:	e002      	b.n	80079d8 <HAL_COMP_Start+0x70>
      {
        wait_loop_index--;
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	3b01      	subs	r3, #1
 80079d6:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d1f9      	bne.n	80079d2 <HAL_COMP_Start+0x6a>
 80079de:	e001      	b.n	80079e4 <HAL_COMP_Start+0x7c>
      }
    }
    else
    {
      status = HAL_ERROR;
 80079e0:	2301      	movs	r3, #1
 80079e2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80079e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3714      	adds	r7, #20
 80079ea:	46bd      	mov	sp, r7
 80079ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f0:	4770      	bx	lr
 80079f2:	bf00      	nop
 80079f4:	20000078 	.word	0x20000078
 80079f8:	053e2d63 	.word	0x053e2d63

080079fc <HAL_COMP_Stop>:
  * @brief  Stop the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Stop(COMP_HandleTypeDef *hcomp)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b085      	sub	sp, #20
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a04:	2300      	movs	r3, #0
 8007a06:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d102      	bne.n	8007a14 <HAL_COMP_Stop+0x18>
  {
    status = HAL_ERROR;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	73fb      	strb	r3, [r7, #15]
 8007a12:	e01f      	b.n	8007a54 <HAL_COMP_Stop+0x58>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a22:	d102      	bne.n	8007a2a <HAL_COMP_Stop+0x2e>
  {
    status = HAL_ERROR;
 8007a24:	2301      	movs	r3, #1
 8007a26:	73fb      	strb	r3, [r7, #15]
 8007a28:	e014      	b.n	8007a54 <HAL_COMP_Stop+0x58>
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    /* Check compliant states: HAL_COMP_STATE_READY or HAL_COMP_STATE_BUSY    */
    /* (all states except HAL_COMP_STATE_RESET and except locked status.      */
    if(hcomp->State != HAL_COMP_STATE_RESET)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d00c      	beq.n	8007a50 <HAL_COMP_Stop+0x54>
    {
      /* Disable the selected comparator */
      CLEAR_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f022 0201 	bic.w	r2, r2, #1
 8007a44:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_READY;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2201      	movs	r2, #1
 8007a4a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8007a4e:	e001      	b.n	8007a54 <HAL_COMP_Stop+0x58>
    }
    else
    {
      status = HAL_ERROR;
 8007a50:	2301      	movs	r3, #1
 8007a52:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3714      	adds	r7, #20
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr
	...

08007a64 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ handler.
  * @param  hcomp  COMP handle
  * @retval None
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b084      	sub	sp, #16
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a11      	ldr	r2, [pc, #68]	; (8007ab8 <HAL_COMP_IRQHandler+0x54>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d102      	bne.n	8007a7c <HAL_COMP_IRQHandler+0x18>
 8007a76:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007a7a:	e001      	b.n	8007a80 <HAL_COMP_IRQHandler+0x1c>
 8007a7c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007a80:	60fb      	str	r3, [r7, #12]

  /* Check COMP EXTI flag */
  if(LL_EXTI_IsActiveFlag_0_31(exti_line) != 0UL)
 8007a82:	68f8      	ldr	r0, [r7, #12]
 8007a84:	f7ff fe68 	bl	8007758 <LL_EXTI_IsActiveFlag_0_31>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d010      	beq.n	8007ab0 <HAL_COMP_IRQHandler+0x4c>
  {
    /* Check whether comparator is in independent or window mode */
    if(READ_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE) != 0UL)
 8007a8e:	4b0b      	ldr	r3, [pc, #44]	; (8007abc <HAL_COMP_IRQHandler+0x58>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d004      	beq.n	8007aa4 <HAL_COMP_IRQHandler+0x40>
      /* Note: Pair of comparators in window mode can both trig IRQ when      */
      /*       input voltage is changing from "out of window" area            */
      /*       (low or high ) to the other "out of window" area (high or low).*/
      /*       Both flags must be cleared to call comparator trigger          */
      /*       callback is called once.                                       */
      LL_EXTI_ClearFlag_0_31((COMP_EXTI_LINE_COMP1 | COMP_EXTI_LINE_COMP2));
 8007a9a:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8007a9e:	f7ff fe71 	bl	8007784 <LL_EXTI_ClearFlag_0_31>
 8007aa2:	e002      	b.n	8007aaa <HAL_COMP_IRQHandler+0x46>
    }
    else
    {
      /* Clear COMP EXTI line pending bit */
      LL_EXTI_ClearFlag_0_31(exti_line);
 8007aa4:	68f8      	ldr	r0, [r7, #12]
 8007aa6:	f7ff fe6d 	bl	8007784 <LL_EXTI_ClearFlag_0_31>

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f7fd ff3c 	bl	8005928 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 8007ab0:	bf00      	nop
 8007ab2:	3710      	adds	r7, #16
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}
 8007ab8:	40010200 	.word	0x40010200
 8007abc:	40010204 	.word	0x40010204

08007ac0 <HAL_COMP_GetOutputLevel>:
  *         @arg COMP_OUTPUT_LEVEL_LOW
  *         @arg COMP_OUTPUT_LEVEL_HIGH
  *
  */
uint32_t HAL_COMP_GetOutputLevel(COMP_HandleTypeDef *hcomp)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b083      	sub	sp, #12
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

  return (uint32_t)(READ_BIT(hcomp->Instance->CSR, COMP_CSR_VALUE)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	0f9b      	lsrs	r3, r3, #30
 8007ad0:	f003 0301 	and.w	r3, r3, #1
                    >> COMP_OUTPUT_LEVEL_BITOFFSET_POS);
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	370c      	adds	r7, #12
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr

08007ae0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b085      	sub	sp, #20
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f003 0307 	and.w	r3, r3, #7
 8007aee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007af0:	4b0c      	ldr	r3, [pc, #48]	; (8007b24 <__NVIC_SetPriorityGrouping+0x44>)
 8007af2:	68db      	ldr	r3, [r3, #12]
 8007af4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007af6:	68ba      	ldr	r2, [r7, #8]
 8007af8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007afc:	4013      	ands	r3, r2
 8007afe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007b08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007b12:	4a04      	ldr	r2, [pc, #16]	; (8007b24 <__NVIC_SetPriorityGrouping+0x44>)
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	60d3      	str	r3, [r2, #12]
}
 8007b18:	bf00      	nop
 8007b1a:	3714      	adds	r7, #20
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr
 8007b24:	e000ed00 	.word	0xe000ed00

08007b28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007b2c:	4b04      	ldr	r3, [pc, #16]	; (8007b40 <__NVIC_GetPriorityGrouping+0x18>)
 8007b2e:	68db      	ldr	r3, [r3, #12]
 8007b30:	0a1b      	lsrs	r3, r3, #8
 8007b32:	f003 0307 	and.w	r3, r3, #7
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr
 8007b40:	e000ed00 	.word	0xe000ed00

08007b44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b083      	sub	sp, #12
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	db0b      	blt.n	8007b6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007b56:	79fb      	ldrb	r3, [r7, #7]
 8007b58:	f003 021f 	and.w	r2, r3, #31
 8007b5c:	4907      	ldr	r1, [pc, #28]	; (8007b7c <__NVIC_EnableIRQ+0x38>)
 8007b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b62:	095b      	lsrs	r3, r3, #5
 8007b64:	2001      	movs	r0, #1
 8007b66:	fa00 f202 	lsl.w	r2, r0, r2
 8007b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007b6e:	bf00      	nop
 8007b70:	370c      	adds	r7, #12
 8007b72:	46bd      	mov	sp, r7
 8007b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b78:	4770      	bx	lr
 8007b7a:	bf00      	nop
 8007b7c:	e000e100 	.word	0xe000e100

08007b80 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b083      	sub	sp, #12
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	4603      	mov	r3, r0
 8007b88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	db10      	blt.n	8007bb4 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007b92:	79fb      	ldrb	r3, [r7, #7]
 8007b94:	f003 021f 	and.w	r2, r3, #31
 8007b98:	4909      	ldr	r1, [pc, #36]	; (8007bc0 <__NVIC_DisableIRQ+0x40>)
 8007b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b9e:	095b      	lsrs	r3, r3, #5
 8007ba0:	2001      	movs	r0, #1
 8007ba2:	fa00 f202 	lsl.w	r2, r0, r2
 8007ba6:	3320      	adds	r3, #32
 8007ba8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8007bac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007bb0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8007bb4:	bf00      	nop
 8007bb6:	370c      	adds	r7, #12
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr
 8007bc0:	e000e100 	.word	0xe000e100

08007bc4 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	4603      	mov	r3, r0
 8007bcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	db0c      	blt.n	8007bf0 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007bd6:	79fb      	ldrb	r3, [r7, #7]
 8007bd8:	f003 021f 	and.w	r2, r3, #31
 8007bdc:	4907      	ldr	r1, [pc, #28]	; (8007bfc <__NVIC_SetPendingIRQ+0x38>)
 8007bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007be2:	095b      	lsrs	r3, r3, #5
 8007be4:	2001      	movs	r0, #1
 8007be6:	fa00 f202 	lsl.w	r2, r0, r2
 8007bea:	3340      	adds	r3, #64	; 0x40
 8007bec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007bf0:	bf00      	nop
 8007bf2:	370c      	adds	r7, #12
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr
 8007bfc:	e000e100 	.word	0xe000e100

08007c00 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b083      	sub	sp, #12
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	4603      	mov	r3, r0
 8007c08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	db0c      	blt.n	8007c2c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007c12:	79fb      	ldrb	r3, [r7, #7]
 8007c14:	f003 021f 	and.w	r2, r3, #31
 8007c18:	4907      	ldr	r1, [pc, #28]	; (8007c38 <__NVIC_ClearPendingIRQ+0x38>)
 8007c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c1e:	095b      	lsrs	r3, r3, #5
 8007c20:	2001      	movs	r0, #1
 8007c22:	fa00 f202 	lsl.w	r2, r0, r2
 8007c26:	3360      	adds	r3, #96	; 0x60
 8007c28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007c2c:	bf00      	nop
 8007c2e:	370c      	adds	r7, #12
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr
 8007c38:	e000e100 	.word	0xe000e100

08007c3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b083      	sub	sp, #12
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	4603      	mov	r3, r0
 8007c44:	6039      	str	r1, [r7, #0]
 8007c46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	db0a      	blt.n	8007c66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	b2da      	uxtb	r2, r3
 8007c54:	490c      	ldr	r1, [pc, #48]	; (8007c88 <__NVIC_SetPriority+0x4c>)
 8007c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c5a:	0112      	lsls	r2, r2, #4
 8007c5c:	b2d2      	uxtb	r2, r2
 8007c5e:	440b      	add	r3, r1
 8007c60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007c64:	e00a      	b.n	8007c7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	b2da      	uxtb	r2, r3
 8007c6a:	4908      	ldr	r1, [pc, #32]	; (8007c8c <__NVIC_SetPriority+0x50>)
 8007c6c:	79fb      	ldrb	r3, [r7, #7]
 8007c6e:	f003 030f 	and.w	r3, r3, #15
 8007c72:	3b04      	subs	r3, #4
 8007c74:	0112      	lsls	r2, r2, #4
 8007c76:	b2d2      	uxtb	r2, r2
 8007c78:	440b      	add	r3, r1
 8007c7a:	761a      	strb	r2, [r3, #24]
}
 8007c7c:	bf00      	nop
 8007c7e:	370c      	adds	r7, #12
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr
 8007c88:	e000e100 	.word	0xe000e100
 8007c8c:	e000ed00 	.word	0xe000ed00

08007c90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b089      	sub	sp, #36	; 0x24
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	60f8      	str	r0, [r7, #12]
 8007c98:	60b9      	str	r1, [r7, #8]
 8007c9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f003 0307 	and.w	r3, r3, #7
 8007ca2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007ca4:	69fb      	ldr	r3, [r7, #28]
 8007ca6:	f1c3 0307 	rsb	r3, r3, #7
 8007caa:	2b04      	cmp	r3, #4
 8007cac:	bf28      	it	cs
 8007cae:	2304      	movcs	r3, #4
 8007cb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007cb2:	69fb      	ldr	r3, [r7, #28]
 8007cb4:	3304      	adds	r3, #4
 8007cb6:	2b06      	cmp	r3, #6
 8007cb8:	d902      	bls.n	8007cc0 <NVIC_EncodePriority+0x30>
 8007cba:	69fb      	ldr	r3, [r7, #28]
 8007cbc:	3b03      	subs	r3, #3
 8007cbe:	e000      	b.n	8007cc2 <NVIC_EncodePriority+0x32>
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8007cc8:	69bb      	ldr	r3, [r7, #24]
 8007cca:	fa02 f303 	lsl.w	r3, r2, r3
 8007cce:	43da      	mvns	r2, r3
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	401a      	ands	r2, r3
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007cd8:	f04f 31ff 	mov.w	r1, #4294967295
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	fa01 f303 	lsl.w	r3, r1, r3
 8007ce2:	43d9      	mvns	r1, r3
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007ce8:	4313      	orrs	r3, r2
         );
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3724      	adds	r7, #36	; 0x24
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf4:	4770      	bx	lr
	...

08007cf8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8007cfc:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8007d00:	4b05      	ldr	r3, [pc, #20]	; (8007d18 <__NVIC_SystemReset+0x20>)
 8007d02:	68db      	ldr	r3, [r3, #12]
 8007d04:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8007d08:	4903      	ldr	r1, [pc, #12]	; (8007d18 <__NVIC_SystemReset+0x20>)
 8007d0a:	4b04      	ldr	r3, [pc, #16]	; (8007d1c <__NVIC_SystemReset+0x24>)
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	60cb      	str	r3, [r1, #12]
 8007d10:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8007d14:	bf00      	nop
 8007d16:	e7fd      	b.n	8007d14 <__NVIC_SystemReset+0x1c>
 8007d18:	e000ed00 	.word	0xe000ed00
 8007d1c:	05fa0004 	.word	0x05fa0004

08007d20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b082      	sub	sp, #8
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f7ff fed9 	bl	8007ae0 <__NVIC_SetPriorityGrouping>
}
 8007d2e:	bf00      	nop
 8007d30:	3708      	adds	r7, #8
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}

08007d36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007d36:	b580      	push	{r7, lr}
 8007d38:	b086      	sub	sp, #24
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	60b9      	str	r1, [r7, #8]
 8007d40:	607a      	str	r2, [r7, #4]
 8007d42:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007d44:	f7ff fef0 	bl	8007b28 <__NVIC_GetPriorityGrouping>
 8007d48:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007d4a:	687a      	ldr	r2, [r7, #4]
 8007d4c:	68b9      	ldr	r1, [r7, #8]
 8007d4e:	6978      	ldr	r0, [r7, #20]
 8007d50:	f7ff ff9e 	bl	8007c90 <NVIC_EncodePriority>
 8007d54:	4602      	mov	r2, r0
 8007d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d5a:	4611      	mov	r1, r2
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f7ff ff6d 	bl	8007c3c <__NVIC_SetPriority>
}
 8007d62:	bf00      	nop
 8007d64:	3718      	adds	r7, #24
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}

08007d6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007d6a:	b580      	push	{r7, lr}
 8007d6c:	b082      	sub	sp, #8
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	4603      	mov	r3, r0
 8007d72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f7ff fee3 	bl	8007b44 <__NVIC_EnableIRQ>
}
 8007d7e:	bf00      	nop
 8007d80:	3708      	adds	r7, #8
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}

08007d86 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007d86:	b580      	push	{r7, lr}
 8007d88:	b082      	sub	sp, #8
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d94:	4618      	mov	r0, r3
 8007d96:	f7ff fef3 	bl	8007b80 <__NVIC_DisableIRQ>
}
 8007d9a:	bf00      	nop
 8007d9c:	3708      	adds	r7, #8
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}

08007da2 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8007da2:	b580      	push	{r7, lr}
 8007da4:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8007da6:	f7ff ffa7 	bl	8007cf8 <__NVIC_SystemReset>

08007daa <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8007daa:	b580      	push	{r7, lr}
 8007dac:	b082      	sub	sp, #8
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	4603      	mov	r3, r0
 8007db2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8007db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007db8:	4618      	mov	r0, r3
 8007dba:	f7ff ff03 	bl	8007bc4 <__NVIC_SetPendingIRQ>
}
 8007dbe:	bf00      	nop
 8007dc0:	3708      	adds	r7, #8
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}

08007dc6 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8007dc6:	b580      	push	{r7, lr}
 8007dc8:	b082      	sub	sp, #8
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	4603      	mov	r3, r0
 8007dce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8007dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f7ff ff13 	bl	8007c00 <__NVIC_ClearPendingIRQ>
}
 8007dda:	bf00      	nop
 8007ddc:	3708      	adds	r7, #8
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}
	...

08007de4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d101      	bne.n	8007df6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007df2:	2301      	movs	r3, #1
 8007df4:	e08d      	b.n	8007f12 <HAL_DMA_Init+0x12e>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	4b47      	ldr	r3, [pc, #284]	; (8007f1c <HAL_DMA_Init+0x138>)
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d80f      	bhi.n	8007e22 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	461a      	mov	r2, r3
 8007e08:	4b45      	ldr	r3, [pc, #276]	; (8007f20 <HAL_DMA_Init+0x13c>)
 8007e0a:	4413      	add	r3, r2
 8007e0c:	4a45      	ldr	r2, [pc, #276]	; (8007f24 <HAL_DMA_Init+0x140>)
 8007e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8007e12:	091b      	lsrs	r3, r3, #4
 8007e14:	009a      	lsls	r2, r3, #2
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	4a42      	ldr	r2, [pc, #264]	; (8007f28 <HAL_DMA_Init+0x144>)
 8007e1e:	641a      	str	r2, [r3, #64]	; 0x40
 8007e20:	e00e      	b.n	8007e40 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	461a      	mov	r2, r3
 8007e28:	4b40      	ldr	r3, [pc, #256]	; (8007f2c <HAL_DMA_Init+0x148>)
 8007e2a:	4413      	add	r3, r2
 8007e2c:	4a3d      	ldr	r2, [pc, #244]	; (8007f24 <HAL_DMA_Init+0x140>)
 8007e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8007e32:	091b      	lsrs	r3, r3, #4
 8007e34:	009a      	lsls	r2, r3, #2
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	4a3c      	ldr	r2, [pc, #240]	; (8007f30 <HAL_DMA_Init+0x14c>)
 8007e3e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2202      	movs	r2, #2
 8007e44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e5a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007e64:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	691b      	ldr	r3, [r3, #16]
 8007e6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007e70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	699b      	ldr	r3, [r3, #24]
 8007e76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007e7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6a1b      	ldr	r3, [r3, #32]
 8007e82:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007e84:	68fa      	ldr	r2, [r7, #12]
 8007e86:	4313      	orrs	r3, r2
 8007e88:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	68fa      	ldr	r2, [r7, #12]
 8007e90:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 fa74 	bl	8008380 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ea0:	d102      	bne.n	8007ea8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	685a      	ldr	r2, [r3, #4]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007eb0:	b2d2      	uxtb	r2, r2
 8007eb2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007eb8:	687a      	ldr	r2, [r7, #4]
 8007eba:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007ebc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d010      	beq.n	8007ee8 <HAL_DMA_Init+0x104>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	2b04      	cmp	r3, #4
 8007ecc:	d80c      	bhi.n	8007ee8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f000 fa94 	bl	80083fc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ed8:	2200      	movs	r2, #0
 8007eda:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ee0:	687a      	ldr	r2, [r7, #4]
 8007ee2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007ee4:	605a      	str	r2, [r3, #4]
 8007ee6:	e008      	b.n	8007efa <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2200      	movs	r2, #0
 8007eec:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2200      	movs	r2, #0
 8007efe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2201      	movs	r2, #1
 8007f04:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007f10:	2300      	movs	r3, #0
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3710      	adds	r7, #16
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}
 8007f1a:	bf00      	nop
 8007f1c:	40020407 	.word	0x40020407
 8007f20:	bffdfff8 	.word	0xbffdfff8
 8007f24:	cccccccd 	.word	0xcccccccd
 8007f28:	40020000 	.word	0x40020000
 8007f2c:	bffdfbf8 	.word	0xbffdfbf8
 8007f30:	40020400 	.word	0x40020400

08007f34 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b086      	sub	sp, #24
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	60f8      	str	r0, [r7, #12]
 8007f3c:	60b9      	str	r1, [r7, #8]
 8007f3e:	607a      	str	r2, [r7, #4]
 8007f40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f42:	2300      	movs	r3, #0
 8007f44:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	d101      	bne.n	8007f54 <HAL_DMA_Start_IT+0x20>
 8007f50:	2302      	movs	r3, #2
 8007f52:	e066      	b.n	8008022 <HAL_DMA_Start_IT+0xee>
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2201      	movs	r2, #1
 8007f58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007f62:	b2db      	uxtb	r3, r3
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d155      	bne.n	8008014 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2202      	movs	r2, #2
 8007f6c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2200      	movs	r2, #0
 8007f74:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	681a      	ldr	r2, [r3, #0]
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f022 0201 	bic.w	r2, r2, #1
 8007f84:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	68b9      	ldr	r1, [r7, #8]
 8007f8c:	68f8      	ldr	r0, [r7, #12]
 8007f8e:	f000 f9b9 	bl	8008304 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d008      	beq.n	8007fac <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	681a      	ldr	r2, [r3, #0]
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f042 020e 	orr.w	r2, r2, #14
 8007fa8:	601a      	str	r2, [r3, #0]
 8007faa:	e00f      	b.n	8007fcc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	681a      	ldr	r2, [r3, #0]
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f022 0204 	bic.w	r2, r2, #4
 8007fba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	681a      	ldr	r2, [r3, #0]
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f042 020a 	orr.w	r2, r2, #10
 8007fca:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d007      	beq.n	8007fea <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fde:	681a      	ldr	r2, [r3, #0]
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fe4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007fe8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d007      	beq.n	8008002 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ff6:	681a      	ldr	r2, [r3, #0]
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ffc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008000:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	681a      	ldr	r2, [r3, #0]
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f042 0201 	orr.w	r2, r2, #1
 8008010:	601a      	str	r2, [r3, #0]
 8008012:	e005      	b.n	8008020 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2200      	movs	r2, #0
 8008018:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800801c:	2302      	movs	r3, #2
 800801e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8008020:	7dfb      	ldrb	r3, [r7, #23]
}
 8008022:	4618      	mov	r0, r3
 8008024:	3718      	adds	r7, #24
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}

0800802a <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800802a:	b480      	push	{r7}
 800802c:	b083      	sub	sp, #12
 800802e:	af00      	add	r7, sp, #0
 8008030:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d101      	bne.n	800803c <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8008038:	2301      	movs	r3, #1
 800803a:	e04f      	b.n	80080dc <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008042:	b2db      	uxtb	r3, r3
 8008044:	2b02      	cmp	r3, #2
 8008046:	d008      	beq.n	800805a <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2204      	movs	r2, #4
 800804c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2200      	movs	r2, #0
 8008052:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8008056:	2301      	movs	r3, #1
 8008058:	e040      	b.n	80080dc <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	681a      	ldr	r2, [r3, #0]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f022 020e 	bic.w	r2, r2, #14
 8008068:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800806e:	681a      	ldr	r2, [r3, #0]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008074:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008078:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	681a      	ldr	r2, [r3, #0]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f022 0201 	bic.w	r2, r2, #1
 8008088:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800808e:	f003 021c 	and.w	r2, r3, #28
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008096:	2101      	movs	r1, #1
 8008098:	fa01 f202 	lsl.w	r2, r1, r2
 800809c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080a2:	687a      	ldr	r2, [r7, #4]
 80080a4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80080a6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d00c      	beq.n	80080ca <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080b4:	681a      	ldr	r2, [r3, #0]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80080be:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080c4:	687a      	ldr	r2, [r7, #4]
 80080c6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80080c8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2201      	movs	r2, #1
 80080ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2200      	movs	r2, #0
 80080d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80080da:	2300      	movs	r3, #0
}
 80080dc:	4618      	mov	r0, r3
 80080de:	370c      	adds	r7, #12
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr

080080e8 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b084      	sub	sp, #16
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80080f0:	2300      	movs	r3, #0
 80080f2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80080fa:	b2db      	uxtb	r3, r3
 80080fc:	2b02      	cmp	r3, #2
 80080fe:	d005      	beq.n	800810c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2204      	movs	r2, #4
 8008104:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8008106:	2301      	movs	r3, #1
 8008108:	73fb      	strb	r3, [r7, #15]
 800810a:	e047      	b.n	800819c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	681a      	ldr	r2, [r3, #0]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f022 020e 	bic.w	r2, r2, #14
 800811a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	681a      	ldr	r2, [r3, #0]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f022 0201 	bic.w	r2, r2, #1
 800812a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008130:	681a      	ldr	r2, [r3, #0]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008136:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800813a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008140:	f003 021c 	and.w	r2, r3, #28
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008148:	2101      	movs	r1, #1
 800814a:	fa01 f202 	lsl.w	r2, r1, r2
 800814e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008154:	687a      	ldr	r2, [r7, #4]
 8008156:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008158:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800815e:	2b00      	cmp	r3, #0
 8008160:	d00c      	beq.n	800817c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008166:	681a      	ldr	r2, [r3, #0]
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800816c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008170:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800817a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2201      	movs	r2, #1
 8008180:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2200      	movs	r2, #0
 8008188:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008190:	2b00      	cmp	r3, #0
 8008192:	d003      	beq.n	800819c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	4798      	blx	r3
    }
  }
  return status;
 800819c:	7bfb      	ldrb	r3, [r7, #15]
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3710      	adds	r7, #16
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}

080081a6 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80081a6:	b580      	push	{r7, lr}
 80081a8:	b084      	sub	sp, #16
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081c2:	f003 031c 	and.w	r3, r3, #28
 80081c6:	2204      	movs	r2, #4
 80081c8:	409a      	lsls	r2, r3
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	4013      	ands	r3, r2
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d026      	beq.n	8008220 <HAL_DMA_IRQHandler+0x7a>
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	f003 0304 	and.w	r3, r3, #4
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d021      	beq.n	8008220 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f003 0320 	and.w	r3, r3, #32
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d107      	bne.n	80081fa <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	681a      	ldr	r2, [r3, #0]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f022 0204 	bic.w	r2, r2, #4
 80081f8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081fe:	f003 021c 	and.w	r2, r3, #28
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008206:	2104      	movs	r1, #4
 8008208:	fa01 f202 	lsl.w	r2, r1, r2
 800820c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008212:	2b00      	cmp	r3, #0
 8008214:	d071      	beq.n	80082fa <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800821e:	e06c      	b.n	80082fa <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008224:	f003 031c 	and.w	r3, r3, #28
 8008228:	2202      	movs	r2, #2
 800822a:	409a      	lsls	r2, r3
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	4013      	ands	r3, r2
 8008230:	2b00      	cmp	r3, #0
 8008232:	d02e      	beq.n	8008292 <HAL_DMA_IRQHandler+0xec>
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	f003 0302 	and.w	r3, r3, #2
 800823a:	2b00      	cmp	r3, #0
 800823c:	d029      	beq.n	8008292 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f003 0320 	and.w	r3, r3, #32
 8008248:	2b00      	cmp	r3, #0
 800824a:	d10b      	bne.n	8008264 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	681a      	ldr	r2, [r3, #0]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f022 020a 	bic.w	r2, r2, #10
 800825a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2201      	movs	r2, #1
 8008260:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008268:	f003 021c 	and.w	r2, r3, #28
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008270:	2102      	movs	r1, #2
 8008272:	fa01 f202 	lsl.w	r2, r1, r2
 8008276:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2200      	movs	r2, #0
 800827c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008284:	2b00      	cmp	r3, #0
 8008286:	d038      	beq.n	80082fa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8008290:	e033      	b.n	80082fa <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008296:	f003 031c 	and.w	r3, r3, #28
 800829a:	2208      	movs	r2, #8
 800829c:	409a      	lsls	r2, r3
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	4013      	ands	r3, r2
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d02a      	beq.n	80082fc <HAL_DMA_IRQHandler+0x156>
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	f003 0308 	and.w	r3, r3, #8
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d025      	beq.n	80082fc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	681a      	ldr	r2, [r3, #0]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f022 020e 	bic.w	r2, r2, #14
 80082be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082c4:	f003 021c 	and.w	r2, r3, #28
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082cc:	2101      	movs	r1, #1
 80082ce:	fa01 f202 	lsl.w	r2, r1, r2
 80082d2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2201      	movs	r2, #1
 80082d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2201      	movs	r2, #1
 80082de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2200      	movs	r2, #0
 80082e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d004      	beq.n	80082fc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80082fa:	bf00      	nop
 80082fc:	bf00      	nop
}
 80082fe:	3710      	adds	r7, #16
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008304:	b480      	push	{r7}
 8008306:	b085      	sub	sp, #20
 8008308:	af00      	add	r7, sp, #0
 800830a:	60f8      	str	r0, [r7, #12]
 800830c:	60b9      	str	r1, [r7, #8]
 800830e:	607a      	str	r2, [r7, #4]
 8008310:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008316:	68fa      	ldr	r2, [r7, #12]
 8008318:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800831a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008320:	2b00      	cmp	r3, #0
 8008322:	d004      	beq.n	800832e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008328:	68fa      	ldr	r2, [r7, #12]
 800832a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800832c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008332:	f003 021c 	and.w	r2, r3, #28
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800833a:	2101      	movs	r1, #1
 800833c:	fa01 f202 	lsl.w	r2, r1, r2
 8008340:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	683a      	ldr	r2, [r7, #0]
 8008348:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	689b      	ldr	r3, [r3, #8]
 800834e:	2b10      	cmp	r3, #16
 8008350:	d108      	bne.n	8008364 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	687a      	ldr	r2, [r7, #4]
 8008358:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	68ba      	ldr	r2, [r7, #8]
 8008360:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008362:	e007      	b.n	8008374 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	68ba      	ldr	r2, [r7, #8]
 800836a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	687a      	ldr	r2, [r7, #4]
 8008372:	60da      	str	r2, [r3, #12]
}
 8008374:	bf00      	nop
 8008376:	3714      	adds	r7, #20
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr

08008380 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008380:	b480      	push	{r7}
 8008382:	b085      	sub	sp, #20
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	461a      	mov	r2, r3
 800838e:	4b17      	ldr	r3, [pc, #92]	; (80083ec <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8008390:	429a      	cmp	r2, r3
 8008392:	d80a      	bhi.n	80083aa <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008398:	089b      	lsrs	r3, r3, #2
 800839a:	009b      	lsls	r3, r3, #2
 800839c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80083a0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80083a4:	687a      	ldr	r2, [r7, #4]
 80083a6:	6493      	str	r3, [r2, #72]	; 0x48
 80083a8:	e007      	b.n	80083ba <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083ae:	089b      	lsrs	r3, r3, #2
 80083b0:	009a      	lsls	r2, r3, #2
 80083b2:	4b0f      	ldr	r3, [pc, #60]	; (80083f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80083b4:	4413      	add	r3, r2
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	b2db      	uxtb	r3, r3
 80083c0:	3b08      	subs	r3, #8
 80083c2:	4a0c      	ldr	r2, [pc, #48]	; (80083f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80083c4:	fba2 2303 	umull	r2, r3, r2, r3
 80083c8:	091b      	lsrs	r3, r3, #4
 80083ca:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	4a0a      	ldr	r2, [pc, #40]	; (80083f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80083d0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	f003 031c 	and.w	r3, r3, #28
 80083d8:	2201      	movs	r2, #1
 80083da:	409a      	lsls	r2, r3
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	651a      	str	r2, [r3, #80]	; 0x50
}
 80083e0:	bf00      	nop
 80083e2:	3714      	adds	r7, #20
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr
 80083ec:	40020407 	.word	0x40020407
 80083f0:	4002081c 	.word	0x4002081c
 80083f4:	cccccccd 	.word	0xcccccccd
 80083f8:	40020880 	.word	0x40020880

080083fc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b085      	sub	sp, #20
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	685b      	ldr	r3, [r3, #4]
 8008408:	b2db      	uxtb	r3, r3
 800840a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800840c:	68fa      	ldr	r2, [r7, #12]
 800840e:	4b0b      	ldr	r3, [pc, #44]	; (800843c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8008410:	4413      	add	r3, r2
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	461a      	mov	r2, r3
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	4a08      	ldr	r2, [pc, #32]	; (8008440 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800841e:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	3b01      	subs	r3, #1
 8008424:	f003 0303 	and.w	r3, r3, #3
 8008428:	2201      	movs	r2, #1
 800842a:	409a      	lsls	r2, r3
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8008430:	bf00      	nop
 8008432:	3714      	adds	r7, #20
 8008434:	46bd      	mov	sp, r7
 8008436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843a:	4770      	bx	lr
 800843c:	1000823f 	.word	0x1000823f
 8008440:	40020940 	.word	0x40020940

08008444 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008444:	b480      	push	{r7}
 8008446:	b087      	sub	sp, #28
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800844e:	2300      	movs	r3, #0
 8008450:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008452:	e14c      	b.n	80086ee <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	2101      	movs	r1, #1
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	fa01 f303 	lsl.w	r3, r1, r3
 8008460:	4013      	ands	r3, r2
 8008462:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2b00      	cmp	r3, #0
 8008468:	f000 813e 	beq.w	80086e8 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	685b      	ldr	r3, [r3, #4]
 8008470:	2b02      	cmp	r3, #2
 8008472:	d003      	beq.n	800847c <HAL_GPIO_Init+0x38>
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	685b      	ldr	r3, [r3, #4]
 8008478:	2b12      	cmp	r3, #18
 800847a:	d123      	bne.n	80084c4 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	08da      	lsrs	r2, r3, #3
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	3208      	adds	r2, #8
 8008484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008488:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	f003 0307 	and.w	r3, r3, #7
 8008490:	009b      	lsls	r3, r3, #2
 8008492:	220f      	movs	r2, #15
 8008494:	fa02 f303 	lsl.w	r3, r2, r3
 8008498:	43db      	mvns	r3, r3
 800849a:	693a      	ldr	r2, [r7, #16]
 800849c:	4013      	ands	r3, r2
 800849e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	691a      	ldr	r2, [r3, #16]
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	f003 0307 	and.w	r3, r3, #7
 80084aa:	009b      	lsls	r3, r3, #2
 80084ac:	fa02 f303 	lsl.w	r3, r2, r3
 80084b0:	693a      	ldr	r2, [r7, #16]
 80084b2:	4313      	orrs	r3, r2
 80084b4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	08da      	lsrs	r2, r3, #3
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	3208      	adds	r2, #8
 80084be:	6939      	ldr	r1, [r7, #16]
 80084c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	005b      	lsls	r3, r3, #1
 80084ce:	2203      	movs	r2, #3
 80084d0:	fa02 f303 	lsl.w	r3, r2, r3
 80084d4:	43db      	mvns	r3, r3
 80084d6:	693a      	ldr	r2, [r7, #16]
 80084d8:	4013      	ands	r3, r2
 80084da:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	685b      	ldr	r3, [r3, #4]
 80084e0:	f003 0203 	and.w	r2, r3, #3
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	005b      	lsls	r3, r3, #1
 80084e8:	fa02 f303 	lsl.w	r3, r2, r3
 80084ec:	693a      	ldr	r2, [r7, #16]
 80084ee:	4313      	orrs	r3, r2
 80084f0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	693a      	ldr	r2, [r7, #16]
 80084f6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	d00b      	beq.n	8008518 <HAL_GPIO_Init+0xd4>
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	2b02      	cmp	r3, #2
 8008506:	d007      	beq.n	8008518 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800850c:	2b11      	cmp	r3, #17
 800850e:	d003      	beq.n	8008518 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	2b12      	cmp	r3, #18
 8008516:	d130      	bne.n	800857a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	689b      	ldr	r3, [r3, #8]
 800851c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	005b      	lsls	r3, r3, #1
 8008522:	2203      	movs	r2, #3
 8008524:	fa02 f303 	lsl.w	r3, r2, r3
 8008528:	43db      	mvns	r3, r3
 800852a:	693a      	ldr	r2, [r7, #16]
 800852c:	4013      	ands	r3, r2
 800852e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	68da      	ldr	r2, [r3, #12]
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	005b      	lsls	r3, r3, #1
 8008538:	fa02 f303 	lsl.w	r3, r2, r3
 800853c:	693a      	ldr	r2, [r7, #16]
 800853e:	4313      	orrs	r3, r2
 8008540:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	693a      	ldr	r2, [r7, #16]
 8008546:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800854e:	2201      	movs	r2, #1
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	fa02 f303 	lsl.w	r3, r2, r3
 8008556:	43db      	mvns	r3, r3
 8008558:	693a      	ldr	r2, [r7, #16]
 800855a:	4013      	ands	r3, r2
 800855c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	091b      	lsrs	r3, r3, #4
 8008564:	f003 0201 	and.w	r2, r3, #1
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	fa02 f303 	lsl.w	r3, r2, r3
 800856e:	693a      	ldr	r2, [r7, #16]
 8008570:	4313      	orrs	r3, r2
 8008572:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	693a      	ldr	r2, [r7, #16]
 8008578:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	68db      	ldr	r3, [r3, #12]
 800857e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	005b      	lsls	r3, r3, #1
 8008584:	2203      	movs	r2, #3
 8008586:	fa02 f303 	lsl.w	r3, r2, r3
 800858a:	43db      	mvns	r3, r3
 800858c:	693a      	ldr	r2, [r7, #16]
 800858e:	4013      	ands	r3, r2
 8008590:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	689a      	ldr	r2, [r3, #8]
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	005b      	lsls	r3, r3, #1
 800859a:	fa02 f303 	lsl.w	r3, r2, r3
 800859e:	693a      	ldr	r2, [r7, #16]
 80085a0:	4313      	orrs	r3, r2
 80085a2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	693a      	ldr	r2, [r7, #16]
 80085a8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	f000 8098 	beq.w	80086e8 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80085b8:	4a54      	ldr	r2, [pc, #336]	; (800870c <HAL_GPIO_Init+0x2c8>)
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	089b      	lsrs	r3, r3, #2
 80085be:	3302      	adds	r3, #2
 80085c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	f003 0303 	and.w	r3, r3, #3
 80085cc:	009b      	lsls	r3, r3, #2
 80085ce:	220f      	movs	r2, #15
 80085d0:	fa02 f303 	lsl.w	r3, r2, r3
 80085d4:	43db      	mvns	r3, r3
 80085d6:	693a      	ldr	r2, [r7, #16]
 80085d8:	4013      	ands	r3, r2
 80085da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80085e2:	d019      	beq.n	8008618 <HAL_GPIO_Init+0x1d4>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	4a4a      	ldr	r2, [pc, #296]	; (8008710 <HAL_GPIO_Init+0x2cc>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d013      	beq.n	8008614 <HAL_GPIO_Init+0x1d0>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	4a49      	ldr	r2, [pc, #292]	; (8008714 <HAL_GPIO_Init+0x2d0>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d00d      	beq.n	8008610 <HAL_GPIO_Init+0x1cc>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	4a48      	ldr	r2, [pc, #288]	; (8008718 <HAL_GPIO_Init+0x2d4>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d007      	beq.n	800860c <HAL_GPIO_Init+0x1c8>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	4a47      	ldr	r2, [pc, #284]	; (800871c <HAL_GPIO_Init+0x2d8>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d101      	bne.n	8008608 <HAL_GPIO_Init+0x1c4>
 8008604:	2304      	movs	r3, #4
 8008606:	e008      	b.n	800861a <HAL_GPIO_Init+0x1d6>
 8008608:	2307      	movs	r3, #7
 800860a:	e006      	b.n	800861a <HAL_GPIO_Init+0x1d6>
 800860c:	2303      	movs	r3, #3
 800860e:	e004      	b.n	800861a <HAL_GPIO_Init+0x1d6>
 8008610:	2302      	movs	r3, #2
 8008612:	e002      	b.n	800861a <HAL_GPIO_Init+0x1d6>
 8008614:	2301      	movs	r3, #1
 8008616:	e000      	b.n	800861a <HAL_GPIO_Init+0x1d6>
 8008618:	2300      	movs	r3, #0
 800861a:	697a      	ldr	r2, [r7, #20]
 800861c:	f002 0203 	and.w	r2, r2, #3
 8008620:	0092      	lsls	r2, r2, #2
 8008622:	4093      	lsls	r3, r2
 8008624:	693a      	ldr	r2, [r7, #16]
 8008626:	4313      	orrs	r3, r2
 8008628:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800862a:	4938      	ldr	r1, [pc, #224]	; (800870c <HAL_GPIO_Init+0x2c8>)
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	089b      	lsrs	r3, r3, #2
 8008630:	3302      	adds	r3, #2
 8008632:	693a      	ldr	r2, [r7, #16]
 8008634:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008638:	4b39      	ldr	r3, [pc, #228]	; (8008720 <HAL_GPIO_Init+0x2dc>)
 800863a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800863e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	43db      	mvns	r3, r3
 8008644:	693a      	ldr	r2, [r7, #16]
 8008646:	4013      	ands	r3, r2
 8008648:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	685b      	ldr	r3, [r3, #4]
 800864e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008652:	2b00      	cmp	r3, #0
 8008654:	d003      	beq.n	800865e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8008656:	693a      	ldr	r2, [r7, #16]
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	4313      	orrs	r3, r2
 800865c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800865e:	4a30      	ldr	r2, [pc, #192]	; (8008720 <HAL_GPIO_Init+0x2dc>)
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8008666:	4b2e      	ldr	r3, [pc, #184]	; (8008720 <HAL_GPIO_Init+0x2dc>)
 8008668:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800866c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	43db      	mvns	r3, r3
 8008672:	693a      	ldr	r2, [r7, #16]
 8008674:	4013      	ands	r3, r2
 8008676:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	685b      	ldr	r3, [r3, #4]
 800867c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008680:	2b00      	cmp	r3, #0
 8008682:	d003      	beq.n	800868c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8008684:	693a      	ldr	r2, [r7, #16]
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	4313      	orrs	r3, r2
 800868a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800868c:	4a24      	ldr	r2, [pc, #144]	; (8008720 <HAL_GPIO_Init+0x2dc>)
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008694:	4b22      	ldr	r3, [pc, #136]	; (8008720 <HAL_GPIO_Init+0x2dc>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	43db      	mvns	r3, r3
 800869e:	693a      	ldr	r2, [r7, #16]
 80086a0:	4013      	ands	r3, r2
 80086a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	685b      	ldr	r3, [r3, #4]
 80086a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d003      	beq.n	80086b8 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 80086b0:	693a      	ldr	r2, [r7, #16]
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	4313      	orrs	r3, r2
 80086b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80086b8:	4a19      	ldr	r2, [pc, #100]	; (8008720 <HAL_GPIO_Init+0x2dc>)
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80086be:	4b18      	ldr	r3, [pc, #96]	; (8008720 <HAL_GPIO_Init+0x2dc>)
 80086c0:	685b      	ldr	r3, [r3, #4]
 80086c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	43db      	mvns	r3, r3
 80086c8:	693a      	ldr	r2, [r7, #16]
 80086ca:	4013      	ands	r3, r2
 80086cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d003      	beq.n	80086e2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80086da:	693a      	ldr	r2, [r7, #16]
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	4313      	orrs	r3, r2
 80086e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80086e2:	4a0f      	ldr	r2, [pc, #60]	; (8008720 <HAL_GPIO_Init+0x2dc>)
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	3301      	adds	r3, #1
 80086ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	681a      	ldr	r2, [r3, #0]
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	fa22 f303 	lsr.w	r3, r2, r3
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	f47f aeab 	bne.w	8008454 <HAL_GPIO_Init+0x10>
  }
}
 80086fe:	bf00      	nop
 8008700:	371c      	adds	r7, #28
 8008702:	46bd      	mov	sp, r7
 8008704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008708:	4770      	bx	lr
 800870a:	bf00      	nop
 800870c:	40010000 	.word	0x40010000
 8008710:	48000400 	.word	0x48000400
 8008714:	48000800 	.word	0x48000800
 8008718:	48000c00 	.word	0x48000c00
 800871c:	48001000 	.word	0x48001000
 8008720:	58000800 	.word	0x58000800

08008724 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008724:	b480      	push	{r7}
 8008726:	b085      	sub	sp, #20
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	460b      	mov	r3, r1
 800872e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	691a      	ldr	r2, [r3, #16]
 8008734:	887b      	ldrh	r3, [r7, #2]
 8008736:	4013      	ands	r3, r2
 8008738:	2b00      	cmp	r3, #0
 800873a:	d002      	beq.n	8008742 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800873c:	2301      	movs	r3, #1
 800873e:	73fb      	strb	r3, [r7, #15]
 8008740:	e001      	b.n	8008746 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008742:	2300      	movs	r3, #0
 8008744:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008746:	7bfb      	ldrb	r3, [r7, #15]
}
 8008748:	4618      	mov	r0, r3
 800874a:	3714      	adds	r7, #20
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr

08008754 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b082      	sub	sp, #8
 8008758:	af00      	add	r7, sp, #0
 800875a:	4603      	mov	r3, r0
 800875c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800875e:	4b08      	ldr	r3, [pc, #32]	; (8008780 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008760:	68da      	ldr	r2, [r3, #12]
 8008762:	88fb      	ldrh	r3, [r7, #6]
 8008764:	4013      	ands	r3, r2
 8008766:	2b00      	cmp	r3, #0
 8008768:	d006      	beq.n	8008778 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800876a:	4a05      	ldr	r2, [pc, #20]	; (8008780 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800876c:	88fb      	ldrh	r3, [r7, #6]
 800876e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008770:	88fb      	ldrh	r3, [r7, #6]
 8008772:	4618      	mov	r0, r3
 8008774:	f7fb f960 	bl	8003a38 <HAL_GPIO_EXTI_Callback>
  }
}
 8008778:	bf00      	nop
 800877a:	3708      	adds	r7, #8
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}
 8008780:	58000800 	.word	0x58000800

08008784 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b082      	sub	sp, #8
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d101      	bne.n	8008796 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008792:	2301      	movs	r3, #1
 8008794:	e081      	b.n	800889a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800879c:	b2db      	uxtb	r3, r3
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d106      	bne.n	80087b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2200      	movs	r2, #0
 80087a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f7fb f886 	bl	80038bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2224      	movs	r2, #36	; 0x24
 80087b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	681a      	ldr	r2, [r3, #0]
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f022 0201 	bic.w	r2, r2, #1
 80087c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	685a      	ldr	r2, [r3, #4]
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80087d4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	689a      	ldr	r2, [r3, #8]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80087e4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	68db      	ldr	r3, [r3, #12]
 80087ea:	2b01      	cmp	r3, #1
 80087ec:	d107      	bne.n	80087fe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	689a      	ldr	r2, [r3, #8]
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80087fa:	609a      	str	r2, [r3, #8]
 80087fc:	e006      	b.n	800880c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	689a      	ldr	r2, [r3, #8]
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800880a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	68db      	ldr	r3, [r3, #12]
 8008810:	2b02      	cmp	r3, #2
 8008812:	d104      	bne.n	800881e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800881c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	687a      	ldr	r2, [r7, #4]
 8008826:	6812      	ldr	r2, [r2, #0]
 8008828:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800882c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008830:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	68da      	ldr	r2, [r3, #12]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008840:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	691a      	ldr	r2, [r3, #16]
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	695b      	ldr	r3, [r3, #20]
 800884a:	ea42 0103 	orr.w	r1, r2, r3
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	699b      	ldr	r3, [r3, #24]
 8008852:	021a      	lsls	r2, r3, #8
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	430a      	orrs	r2, r1
 800885a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	69d9      	ldr	r1, [r3, #28]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6a1a      	ldr	r2, [r3, #32]
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	430a      	orrs	r2, r1
 800886a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	681a      	ldr	r2, [r3, #0]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f042 0201 	orr.w	r2, r2, #1
 800887a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2200      	movs	r2, #0
 8008880:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2220      	movs	r2, #32
 8008886:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2200      	movs	r2, #0
 800888e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2200      	movs	r2, #0
 8008894:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008898:	2300      	movs	r3, #0
}
 800889a:	4618      	mov	r0, r3
 800889c:	3708      	adds	r7, #8
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}
	...

080088a4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b088      	sub	sp, #32
 80088a8:	af02      	add	r7, sp, #8
 80088aa:	60f8      	str	r0, [r7, #12]
 80088ac:	607a      	str	r2, [r7, #4]
 80088ae:	461a      	mov	r2, r3
 80088b0:	460b      	mov	r3, r1
 80088b2:	817b      	strh	r3, [r7, #10]
 80088b4:	4613      	mov	r3, r2
 80088b6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80088be:	b2db      	uxtb	r3, r3
 80088c0:	2b20      	cmp	r3, #32
 80088c2:	f040 80da 	bne.w	8008a7a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	d101      	bne.n	80088d4 <HAL_I2C_Master_Transmit+0x30>
 80088d0:	2302      	movs	r3, #2
 80088d2:	e0d3      	b.n	8008a7c <HAL_I2C_Master_Transmit+0x1d8>
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	2201      	movs	r2, #1
 80088d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80088dc:	f7fd fcf8 	bl	80062d0 <HAL_GetTick>
 80088e0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	9300      	str	r3, [sp, #0]
 80088e6:	2319      	movs	r3, #25
 80088e8:	2201      	movs	r2, #1
 80088ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80088ee:	68f8      	ldr	r0, [r7, #12]
 80088f0:	f001 fbba 	bl	800a068 <I2C_WaitOnFlagUntilTimeout>
 80088f4:	4603      	mov	r3, r0
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d001      	beq.n	80088fe <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80088fa:	2301      	movs	r3, #1
 80088fc:	e0be      	b.n	8008a7c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	2221      	movs	r2, #33	; 0x21
 8008902:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2210      	movs	r2, #16
 800890a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2200      	movs	r2, #0
 8008912:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	687a      	ldr	r2, [r7, #4]
 8008918:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	893a      	ldrh	r2, [r7, #8]
 800891e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2200      	movs	r2, #0
 8008924:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800892a:	b29b      	uxth	r3, r3
 800892c:	2bff      	cmp	r3, #255	; 0xff
 800892e:	d90e      	bls.n	800894e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	22ff      	movs	r2, #255	; 0xff
 8008934:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800893a:	b2da      	uxtb	r2, r3
 800893c:	8979      	ldrh	r1, [r7, #10]
 800893e:	4b51      	ldr	r3, [pc, #324]	; (8008a84 <HAL_I2C_Master_Transmit+0x1e0>)
 8008940:	9300      	str	r3, [sp, #0]
 8008942:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008946:	68f8      	ldr	r0, [r7, #12]
 8008948:	f001 fd1c 	bl	800a384 <I2C_TransferConfig>
 800894c:	e06c      	b.n	8008a28 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008952:	b29a      	uxth	r2, r3
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800895c:	b2da      	uxtb	r2, r3
 800895e:	8979      	ldrh	r1, [r7, #10]
 8008960:	4b48      	ldr	r3, [pc, #288]	; (8008a84 <HAL_I2C_Master_Transmit+0x1e0>)
 8008962:	9300      	str	r3, [sp, #0]
 8008964:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008968:	68f8      	ldr	r0, [r7, #12]
 800896a:	f001 fd0b 	bl	800a384 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800896e:	e05b      	b.n	8008a28 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008970:	697a      	ldr	r2, [r7, #20]
 8008972:	6a39      	ldr	r1, [r7, #32]
 8008974:	68f8      	ldr	r0, [r7, #12]
 8008976:	f001 fbb7 	bl	800a0e8 <I2C_WaitOnTXISFlagUntilTimeout>
 800897a:	4603      	mov	r3, r0
 800897c:	2b00      	cmp	r3, #0
 800897e:	d001      	beq.n	8008984 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8008980:	2301      	movs	r3, #1
 8008982:	e07b      	b.n	8008a7c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008988:	781a      	ldrb	r2, [r3, #0]
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008994:	1c5a      	adds	r2, r3, #1
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800899e:	b29b      	uxth	r3, r3
 80089a0:	3b01      	subs	r3, #1
 80089a2:	b29a      	uxth	r2, r3
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089ac:	3b01      	subs	r3, #1
 80089ae:	b29a      	uxth	r2, r3
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089b8:	b29b      	uxth	r3, r3
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d034      	beq.n	8008a28 <HAL_I2C_Master_Transmit+0x184>
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d130      	bne.n	8008a28 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	9300      	str	r3, [sp, #0]
 80089ca:	6a3b      	ldr	r3, [r7, #32]
 80089cc:	2200      	movs	r2, #0
 80089ce:	2180      	movs	r1, #128	; 0x80
 80089d0:	68f8      	ldr	r0, [r7, #12]
 80089d2:	f001 fb49 	bl	800a068 <I2C_WaitOnFlagUntilTimeout>
 80089d6:	4603      	mov	r3, r0
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d001      	beq.n	80089e0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80089dc:	2301      	movs	r3, #1
 80089de:	e04d      	b.n	8008a7c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089e4:	b29b      	uxth	r3, r3
 80089e6:	2bff      	cmp	r3, #255	; 0xff
 80089e8:	d90e      	bls.n	8008a08 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	22ff      	movs	r2, #255	; 0xff
 80089ee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089f4:	b2da      	uxtb	r2, r3
 80089f6:	8979      	ldrh	r1, [r7, #10]
 80089f8:	2300      	movs	r3, #0
 80089fa:	9300      	str	r3, [sp, #0]
 80089fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008a00:	68f8      	ldr	r0, [r7, #12]
 8008a02:	f001 fcbf 	bl	800a384 <I2C_TransferConfig>
 8008a06:	e00f      	b.n	8008a28 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a0c:	b29a      	uxth	r2, r3
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a16:	b2da      	uxtb	r2, r3
 8008a18:	8979      	ldrh	r1, [r7, #10]
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	9300      	str	r3, [sp, #0]
 8008a1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008a22:	68f8      	ldr	r0, [r7, #12]
 8008a24:	f001 fcae 	bl	800a384 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a2c:	b29b      	uxth	r3, r3
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d19e      	bne.n	8008970 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008a32:	697a      	ldr	r2, [r7, #20]
 8008a34:	6a39      	ldr	r1, [r7, #32]
 8008a36:	68f8      	ldr	r0, [r7, #12]
 8008a38:	f001 fb96 	bl	800a168 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d001      	beq.n	8008a46 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8008a42:	2301      	movs	r3, #1
 8008a44:	e01a      	b.n	8008a7c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	2220      	movs	r2, #32
 8008a4c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	6859      	ldr	r1, [r3, #4]
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681a      	ldr	r2, [r3, #0]
 8008a58:	4b0b      	ldr	r3, [pc, #44]	; (8008a88 <HAL_I2C_Master_Transmit+0x1e4>)
 8008a5a:	400b      	ands	r3, r1
 8008a5c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	2220      	movs	r2, #32
 8008a62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2200      	movs	r2, #0
 8008a72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008a76:	2300      	movs	r3, #0
 8008a78:	e000      	b.n	8008a7c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8008a7a:	2302      	movs	r3, #2
  }
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3718      	adds	r7, #24
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}
 8008a84:	80002000 	.word	0x80002000
 8008a88:	fe00e800 	.word	0xfe00e800

08008a8c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b088      	sub	sp, #32
 8008a90:	af02      	add	r7, sp, #8
 8008a92:	60f8      	str	r0, [r7, #12]
 8008a94:	607a      	str	r2, [r7, #4]
 8008a96:	461a      	mov	r2, r3
 8008a98:	460b      	mov	r3, r1
 8008a9a:	817b      	strh	r3, [r7, #10]
 8008a9c:	4613      	mov	r3, r2
 8008a9e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008aa6:	b2db      	uxtb	r3, r3
 8008aa8:	2b20      	cmp	r3, #32
 8008aaa:	f040 80db 	bne.w	8008c64 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008ab4:	2b01      	cmp	r3, #1
 8008ab6:	d101      	bne.n	8008abc <HAL_I2C_Master_Receive+0x30>
 8008ab8:	2302      	movs	r3, #2
 8008aba:	e0d4      	b.n	8008c66 <HAL_I2C_Master_Receive+0x1da>
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	2201      	movs	r2, #1
 8008ac0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008ac4:	f7fd fc04 	bl	80062d0 <HAL_GetTick>
 8008ac8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	9300      	str	r3, [sp, #0]
 8008ace:	2319      	movs	r3, #25
 8008ad0:	2201      	movs	r2, #1
 8008ad2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008ad6:	68f8      	ldr	r0, [r7, #12]
 8008ad8:	f001 fac6 	bl	800a068 <I2C_WaitOnFlagUntilTimeout>
 8008adc:	4603      	mov	r3, r0
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d001      	beq.n	8008ae6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	e0bf      	b.n	8008c66 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	2222      	movs	r2, #34	; 0x22
 8008aea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	2210      	movs	r2, #16
 8008af2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2200      	movs	r2, #0
 8008afa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	893a      	ldrh	r2, [r7, #8]
 8008b06:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b12:	b29b      	uxth	r3, r3
 8008b14:	2bff      	cmp	r3, #255	; 0xff
 8008b16:	d90e      	bls.n	8008b36 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	22ff      	movs	r2, #255	; 0xff
 8008b1c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b22:	b2da      	uxtb	r2, r3
 8008b24:	8979      	ldrh	r1, [r7, #10]
 8008b26:	4b52      	ldr	r3, [pc, #328]	; (8008c70 <HAL_I2C_Master_Receive+0x1e4>)
 8008b28:	9300      	str	r3, [sp, #0]
 8008b2a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008b2e:	68f8      	ldr	r0, [r7, #12]
 8008b30:	f001 fc28 	bl	800a384 <I2C_TransferConfig>
 8008b34:	e06d      	b.n	8008c12 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b3a:	b29a      	uxth	r2, r3
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b44:	b2da      	uxtb	r2, r3
 8008b46:	8979      	ldrh	r1, [r7, #10]
 8008b48:	4b49      	ldr	r3, [pc, #292]	; (8008c70 <HAL_I2C_Master_Receive+0x1e4>)
 8008b4a:	9300      	str	r3, [sp, #0]
 8008b4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008b50:	68f8      	ldr	r0, [r7, #12]
 8008b52:	f001 fc17 	bl	800a384 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8008b56:	e05c      	b.n	8008c12 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008b58:	697a      	ldr	r2, [r7, #20]
 8008b5a:	6a39      	ldr	r1, [r7, #32]
 8008b5c:	68f8      	ldr	r0, [r7, #12]
 8008b5e:	f001 fb3f 	bl	800a1e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008b62:	4603      	mov	r3, r0
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d001      	beq.n	8008b6c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8008b68:	2301      	movs	r3, #1
 8008b6a:	e07c      	b.n	8008c66 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b76:	b2d2      	uxtb	r2, r2
 8008b78:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b7e:	1c5a      	adds	r2, r3, #1
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b88:	3b01      	subs	r3, #1
 8008b8a:	b29a      	uxth	r2, r3
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b94:	b29b      	uxth	r3, r3
 8008b96:	3b01      	subs	r3, #1
 8008b98:	b29a      	uxth	r2, r3
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ba2:	b29b      	uxth	r3, r3
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d034      	beq.n	8008c12 <HAL_I2C_Master_Receive+0x186>
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d130      	bne.n	8008c12 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	9300      	str	r3, [sp, #0]
 8008bb4:	6a3b      	ldr	r3, [r7, #32]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	2180      	movs	r1, #128	; 0x80
 8008bba:	68f8      	ldr	r0, [r7, #12]
 8008bbc:	f001 fa54 	bl	800a068 <I2C_WaitOnFlagUntilTimeout>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d001      	beq.n	8008bca <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	e04d      	b.n	8008c66 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bce:	b29b      	uxth	r3, r3
 8008bd0:	2bff      	cmp	r3, #255	; 0xff
 8008bd2:	d90e      	bls.n	8008bf2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	22ff      	movs	r2, #255	; 0xff
 8008bd8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bde:	b2da      	uxtb	r2, r3
 8008be0:	8979      	ldrh	r1, [r7, #10]
 8008be2:	2300      	movs	r3, #0
 8008be4:	9300      	str	r3, [sp, #0]
 8008be6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008bea:	68f8      	ldr	r0, [r7, #12]
 8008bec:	f001 fbca 	bl	800a384 <I2C_TransferConfig>
 8008bf0:	e00f      	b.n	8008c12 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bf6:	b29a      	uxth	r2, r3
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c00:	b2da      	uxtb	r2, r3
 8008c02:	8979      	ldrh	r1, [r7, #10]
 8008c04:	2300      	movs	r3, #0
 8008c06:	9300      	str	r3, [sp, #0]
 8008c08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008c0c:	68f8      	ldr	r0, [r7, #12]
 8008c0e:	f001 fbb9 	bl	800a384 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c16:	b29b      	uxth	r3, r3
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d19d      	bne.n	8008b58 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008c1c:	697a      	ldr	r2, [r7, #20]
 8008c1e:	6a39      	ldr	r1, [r7, #32]
 8008c20:	68f8      	ldr	r0, [r7, #12]
 8008c22:	f001 faa1 	bl	800a168 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008c26:	4603      	mov	r3, r0
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d001      	beq.n	8008c30 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	e01a      	b.n	8008c66 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	2220      	movs	r2, #32
 8008c36:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	6859      	ldr	r1, [r3, #4]
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681a      	ldr	r2, [r3, #0]
 8008c42:	4b0c      	ldr	r3, [pc, #48]	; (8008c74 <HAL_I2C_Master_Receive+0x1e8>)
 8008c44:	400b      	ands	r3, r1
 8008c46:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	2220      	movs	r2, #32
 8008c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	2200      	movs	r2, #0
 8008c54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008c60:	2300      	movs	r3, #0
 8008c62:	e000      	b.n	8008c66 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8008c64:	2302      	movs	r3, #2
  }
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3718      	adds	r7, #24
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}
 8008c6e:	bf00      	nop
 8008c70:	80002400 	.word	0x80002400
 8008c74:	fe00e800 	.word	0xfe00e800

08008c78 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b088      	sub	sp, #32
 8008c7c:	af02      	add	r7, sp, #8
 8008c7e:	60f8      	str	r0, [r7, #12]
 8008c80:	607a      	str	r2, [r7, #4]
 8008c82:	461a      	mov	r2, r3
 8008c84:	460b      	mov	r3, r1
 8008c86:	817b      	strh	r3, [r7, #10]
 8008c88:	4613      	mov	r3, r2
 8008c8a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c92:	b2db      	uxtb	r3, r3
 8008c94:	2b20      	cmp	r3, #32
 8008c96:	d153      	bne.n	8008d40 <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	699b      	ldr	r3, [r3, #24]
 8008c9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008ca2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ca6:	d101      	bne.n	8008cac <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
 8008ca8:	2302      	movs	r3, #2
 8008caa:	e04a      	b.n	8008d42 <HAL_I2C_Master_Receive_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008cb2:	2b01      	cmp	r3, #1
 8008cb4:	d101      	bne.n	8008cba <HAL_I2C_Master_Receive_IT+0x42>
 8008cb6:	2302      	movs	r3, #2
 8008cb8:	e043      	b.n	8008d42 <HAL_I2C_Master_Receive_IT+0xca>
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	2222      	movs	r2, #34	; 0x22
 8008cc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	2210      	movs	r2, #16
 8008cce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	687a      	ldr	r2, [r7, #4]
 8008cdc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	893a      	ldrh	r2, [r7, #8]
 8008ce2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	4a19      	ldr	r2, [pc, #100]	; (8008d4c <HAL_I2C_Master_Receive_IT+0xd4>)
 8008ce8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	4a18      	ldr	r2, [pc, #96]	; (8008d50 <HAL_I2C_Master_Receive_IT+0xd8>)
 8008cee:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cf4:	b29b      	uxth	r3, r3
 8008cf6:	2bff      	cmp	r3, #255	; 0xff
 8008cf8:	d906      	bls.n	8008d08 <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	22ff      	movs	r2, #255	; 0xff
 8008cfe:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8008d00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008d04:	617b      	str	r3, [r7, #20]
 8008d06:	e007      	b.n	8008d18 <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d0c:	b29a      	uxth	r2, r3
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8008d12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008d16:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d1c:	b2da      	uxtb	r2, r3
 8008d1e:	8979      	ldrh	r1, [r7, #10]
 8008d20:	4b0c      	ldr	r3, [pc, #48]	; (8008d54 <HAL_I2C_Master_Receive_IT+0xdc>)
 8008d22:	9300      	str	r3, [sp, #0]
 8008d24:	697b      	ldr	r3, [r7, #20]
 8008d26:	68f8      	ldr	r0, [r7, #12]
 8008d28:	f001 fb2c 	bl	800a384 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008d34:	2102      	movs	r1, #2
 8008d36:	68f8      	ldr	r0, [r7, #12]
 8008d38:	f001 fb52 	bl	800a3e0 <I2C_Enable_IRQ>

    return HAL_OK;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	e000      	b.n	8008d42 <HAL_I2C_Master_Receive_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8008d40:	2302      	movs	r3, #2
  }
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3718      	adds	r7, #24
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}
 8008d4a:	bf00      	nop
 8008d4c:	ffff0000 	.word	0xffff0000
 8008d50:	0800905d 	.word	0x0800905d
 8008d54:	80002400 	.word	0x80002400

08008d58 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b088      	sub	sp, #32
 8008d5c:	af02      	add	r7, sp, #8
 8008d5e:	60f8      	str	r0, [r7, #12]
 8008d60:	4608      	mov	r0, r1
 8008d62:	4611      	mov	r1, r2
 8008d64:	461a      	mov	r2, r3
 8008d66:	4603      	mov	r3, r0
 8008d68:	817b      	strh	r3, [r7, #10]
 8008d6a:	460b      	mov	r3, r1
 8008d6c:	813b      	strh	r3, [r7, #8]
 8008d6e:	4613      	mov	r3, r2
 8008d70:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d78:	b2db      	uxtb	r3, r3
 8008d7a:	2b20      	cmp	r3, #32
 8008d7c:	f040 80f9 	bne.w	8008f72 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d80:	6a3b      	ldr	r3, [r7, #32]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d002      	beq.n	8008d8c <HAL_I2C_Mem_Write+0x34>
 8008d86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d105      	bne.n	8008d98 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d92:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008d94:	2301      	movs	r3, #1
 8008d96:	e0ed      	b.n	8008f74 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008d9e:	2b01      	cmp	r3, #1
 8008da0:	d101      	bne.n	8008da6 <HAL_I2C_Mem_Write+0x4e>
 8008da2:	2302      	movs	r3, #2
 8008da4:	e0e6      	b.n	8008f74 <HAL_I2C_Mem_Write+0x21c>
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	2201      	movs	r2, #1
 8008daa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008dae:	f7fd fa8f 	bl	80062d0 <HAL_GetTick>
 8008db2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	9300      	str	r3, [sp, #0]
 8008db8:	2319      	movs	r3, #25
 8008dba:	2201      	movs	r2, #1
 8008dbc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008dc0:	68f8      	ldr	r0, [r7, #12]
 8008dc2:	f001 f951 	bl	800a068 <I2C_WaitOnFlagUntilTimeout>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d001      	beq.n	8008dd0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8008dcc:	2301      	movs	r3, #1
 8008dce:	e0d1      	b.n	8008f74 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	2221      	movs	r2, #33	; 0x21
 8008dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	2240      	movs	r2, #64	; 0x40
 8008ddc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	2200      	movs	r2, #0
 8008de4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	6a3a      	ldr	r2, [r7, #32]
 8008dea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008df0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	2200      	movs	r2, #0
 8008df6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008df8:	88f8      	ldrh	r0, [r7, #6]
 8008dfa:	893a      	ldrh	r2, [r7, #8]
 8008dfc:	8979      	ldrh	r1, [r7, #10]
 8008dfe:	697b      	ldr	r3, [r7, #20]
 8008e00:	9301      	str	r3, [sp, #4]
 8008e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e04:	9300      	str	r3, [sp, #0]
 8008e06:	4603      	mov	r3, r0
 8008e08:	68f8      	ldr	r0, [r7, #12]
 8008e0a:	f000 fd0f 	bl	800982c <I2C_RequestMemoryWrite>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d005      	beq.n	8008e20 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	2200      	movs	r2, #0
 8008e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	e0a9      	b.n	8008f74 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e24:	b29b      	uxth	r3, r3
 8008e26:	2bff      	cmp	r3, #255	; 0xff
 8008e28:	d90e      	bls.n	8008e48 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	22ff      	movs	r2, #255	; 0xff
 8008e2e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e34:	b2da      	uxtb	r2, r3
 8008e36:	8979      	ldrh	r1, [r7, #10]
 8008e38:	2300      	movs	r3, #0
 8008e3a:	9300      	str	r3, [sp, #0]
 8008e3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008e40:	68f8      	ldr	r0, [r7, #12]
 8008e42:	f001 fa9f 	bl	800a384 <I2C_TransferConfig>
 8008e46:	e00f      	b.n	8008e68 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e4c:	b29a      	uxth	r2, r3
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e56:	b2da      	uxtb	r2, r3
 8008e58:	8979      	ldrh	r1, [r7, #10]
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	9300      	str	r3, [sp, #0]
 8008e5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008e62:	68f8      	ldr	r0, [r7, #12]
 8008e64:	f001 fa8e 	bl	800a384 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008e68:	697a      	ldr	r2, [r7, #20]
 8008e6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e6c:	68f8      	ldr	r0, [r7, #12]
 8008e6e:	f001 f93b 	bl	800a0e8 <I2C_WaitOnTXISFlagUntilTimeout>
 8008e72:	4603      	mov	r3, r0
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d001      	beq.n	8008e7c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008e78:	2301      	movs	r3, #1
 8008e7a:	e07b      	b.n	8008f74 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e80:	781a      	ldrb	r2, [r3, #0]
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e8c:	1c5a      	adds	r2, r3, #1
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e96:	b29b      	uxth	r3, r3
 8008e98:	3b01      	subs	r3, #1
 8008e9a:	b29a      	uxth	r2, r3
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ea4:	3b01      	subs	r3, #1
 8008ea6:	b29a      	uxth	r2, r3
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008eb0:	b29b      	uxth	r3, r3
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d034      	beq.n	8008f20 <HAL_I2C_Mem_Write+0x1c8>
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d130      	bne.n	8008f20 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	9300      	str	r3, [sp, #0]
 8008ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	2180      	movs	r1, #128	; 0x80
 8008ec8:	68f8      	ldr	r0, [r7, #12]
 8008eca:	f001 f8cd 	bl	800a068 <I2C_WaitOnFlagUntilTimeout>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d001      	beq.n	8008ed8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	e04d      	b.n	8008f74 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008edc:	b29b      	uxth	r3, r3
 8008ede:	2bff      	cmp	r3, #255	; 0xff
 8008ee0:	d90e      	bls.n	8008f00 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	22ff      	movs	r2, #255	; 0xff
 8008ee6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008eec:	b2da      	uxtb	r2, r3
 8008eee:	8979      	ldrh	r1, [r7, #10]
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	9300      	str	r3, [sp, #0]
 8008ef4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008ef8:	68f8      	ldr	r0, [r7, #12]
 8008efa:	f001 fa43 	bl	800a384 <I2C_TransferConfig>
 8008efe:	e00f      	b.n	8008f20 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f04:	b29a      	uxth	r2, r3
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f0e:	b2da      	uxtb	r2, r3
 8008f10:	8979      	ldrh	r1, [r7, #10]
 8008f12:	2300      	movs	r3, #0
 8008f14:	9300      	str	r3, [sp, #0]
 8008f16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008f1a:	68f8      	ldr	r0, [r7, #12]
 8008f1c:	f001 fa32 	bl	800a384 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f24:	b29b      	uxth	r3, r3
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d19e      	bne.n	8008e68 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008f2a:	697a      	ldr	r2, [r7, #20]
 8008f2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f2e:	68f8      	ldr	r0, [r7, #12]
 8008f30:	f001 f91a 	bl	800a168 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008f34:	4603      	mov	r3, r0
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d001      	beq.n	8008f3e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	e01a      	b.n	8008f74 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	2220      	movs	r2, #32
 8008f44:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	6859      	ldr	r1, [r3, #4]
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681a      	ldr	r2, [r3, #0]
 8008f50:	4b0a      	ldr	r3, [pc, #40]	; (8008f7c <HAL_I2C_Mem_Write+0x224>)
 8008f52:	400b      	ands	r3, r1
 8008f54:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	2220      	movs	r2, #32
 8008f5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	2200      	movs	r2, #0
 8008f62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	e000      	b.n	8008f74 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8008f72:	2302      	movs	r3, #2
  }
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3718      	adds	r7, #24
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}
 8008f7c:	fe00e800 	.word	0xfe00e800

08008f80 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b084      	sub	sp, #16
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	699b      	ldr	r3, [r3, #24]
 8008f8e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d005      	beq.n	8008fac <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fa4:	68ba      	ldr	r2, [r7, #8]
 8008fa6:	68f9      	ldr	r1, [r7, #12]
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	4798      	blx	r3
  }
}
 8008fac:	bf00      	nop
 8008fae:	3710      	adds	r7, #16
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}

08008fb4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b083      	sub	sp, #12
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8008fbc:	bf00      	nop
 8008fbe:	370c      	adds	r7, #12
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr

08008fc8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b083      	sub	sp, #12
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8008fd0:	bf00      	nop
 8008fd2:	370c      	adds	r7, #12
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fda:	4770      	bx	lr

08008fdc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b083      	sub	sp, #12
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	460b      	mov	r3, r1
 8008fe6:	70fb      	strb	r3, [r7, #3]
 8008fe8:	4613      	mov	r3, r2
 8008fea:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8008fec:	bf00      	nop
 8008fee:	370c      	adds	r7, #12
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff6:	4770      	bx	lr

08008ff8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b083      	sub	sp, #12
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8009000:	bf00      	nop
 8009002:	370c      	adds	r7, #12
 8009004:	46bd      	mov	sp, r7
 8009006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900a:	4770      	bx	lr

0800900c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800900c:	b480      	push	{r7}
 800900e:	b083      	sub	sp, #12
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8009014:	bf00      	nop
 8009016:	370c      	adds	r7, #12
 8009018:	46bd      	mov	sp, r7
 800901a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901e:	4770      	bx	lr

08009020 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009020:	b480      	push	{r7}
 8009022:	b083      	sub	sp, #12
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8009028:	bf00      	nop
 800902a:	370c      	adds	r7, #12
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr

08009034 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8009034:	b480      	push	{r7}
 8009036:	b083      	sub	sp, #12
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800903c:	bf00      	nop
 800903e:	370c      	adds	r7, #12
 8009040:	46bd      	mov	sp, r7
 8009042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009046:	4770      	bx	lr

08009048 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009048:	b480      	push	{r7}
 800904a:	b083      	sub	sp, #12
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8009050:	bf00      	nop
 8009052:	370c      	adds	r7, #12
 8009054:	46bd      	mov	sp, r7
 8009056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905a:	4770      	bx	lr

0800905c <I2C_Master_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b088      	sub	sp, #32
 8009060:	af02      	add	r7, sp, #8
 8009062:	60f8      	str	r0, [r7, #12]
 8009064:	60b9      	str	r1, [r7, #8]
 8009066:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009072:	2b01      	cmp	r3, #1
 8009074:	d101      	bne.n	800907a <I2C_Master_ISR_IT+0x1e>
 8009076:	2302      	movs	r3, #2
 8009078:	e115      	b.n	80092a6 <I2C_Master_ISR_IT+0x24a>
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	2201      	movs	r2, #1
 800907e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	091b      	lsrs	r3, r3, #4
 8009086:	f003 0301 	and.w	r3, r3, #1
 800908a:	2b00      	cmp	r3, #0
 800908c:	d013      	beq.n	80090b6 <I2C_Master_ISR_IT+0x5a>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	091b      	lsrs	r3, r3, #4
 8009092:	f003 0301 	and.w	r3, r3, #1
 8009096:	2b00      	cmp	r3, #0
 8009098:	d00d      	beq.n	80090b6 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	2210      	movs	r2, #16
 80090a0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090a6:	f043 0204 	orr.w	r2, r3, #4
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80090ae:	68f8      	ldr	r0, [r7, #12]
 80090b0:	f000 ff92 	bl	8009fd8 <I2C_Flush_TXDR>
 80090b4:	e0e2      	b.n	800927c <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	089b      	lsrs	r3, r3, #2
 80090ba:	f003 0301 	and.w	r3, r3, #1
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d023      	beq.n	800910a <I2C_Master_ISR_IT+0xae>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	089b      	lsrs	r3, r3, #2
 80090c6:	f003 0301 	and.w	r3, r3, #1
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d01d      	beq.n	800910a <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	f023 0304 	bic.w	r3, r3, #4
 80090d4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090e0:	b2d2      	uxtb	r2, r2
 80090e2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090e8:	1c5a      	adds	r2, r3, #1
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090f2:	3b01      	subs	r3, #1
 80090f4:	b29a      	uxth	r2, r3
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090fe:	b29b      	uxth	r3, r3
 8009100:	3b01      	subs	r3, #1
 8009102:	b29a      	uxth	r2, r3
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009108:	e0b8      	b.n	800927c <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	085b      	lsrs	r3, r3, #1
 800910e:	f003 0301 	and.w	r3, r3, #1
 8009112:	2b00      	cmp	r3, #0
 8009114:	d01e      	beq.n	8009154 <I2C_Master_ISR_IT+0xf8>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	085b      	lsrs	r3, r3, #1
 800911a:	f003 0301 	and.w	r3, r3, #1
 800911e:	2b00      	cmp	r3, #0
 8009120:	d018      	beq.n	8009154 <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009126:	781a      	ldrb	r2, [r3, #0]
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009132:	1c5a      	adds	r2, r3, #1
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800913c:	3b01      	subs	r3, #1
 800913e:	b29a      	uxth	r2, r3
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009148:	b29b      	uxth	r3, r3
 800914a:	3b01      	subs	r3, #1
 800914c:	b29a      	uxth	r2, r3
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009152:	e093      	b.n	800927c <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	09db      	lsrs	r3, r3, #7
 8009158:	f003 0301 	and.w	r3, r3, #1
 800915c:	2b00      	cmp	r3, #0
 800915e:	d05e      	beq.n	800921e <I2C_Master_ISR_IT+0x1c2>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	099b      	lsrs	r3, r3, #6
 8009164:	f003 0301 	and.w	r3, r3, #1
 8009168:	2b00      	cmp	r3, #0
 800916a:	d058      	beq.n	800921e <I2C_Master_ISR_IT+0x1c2>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009170:	b29b      	uxth	r3, r3
 8009172:	2b00      	cmp	r3, #0
 8009174:	d041      	beq.n	80091fa <I2C_Master_ISR_IT+0x19e>
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800917a:	2b00      	cmp	r3, #0
 800917c:	d13d      	bne.n	80091fa <I2C_Master_ISR_IT+0x19e>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	b29b      	uxth	r3, r3
 8009186:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800918a:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009190:	b29b      	uxth	r3, r3
 8009192:	2bff      	cmp	r3, #255	; 0xff
 8009194:	d90e      	bls.n	80091b4 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	22ff      	movs	r2, #255	; 0xff
 800919a:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091a0:	b2da      	uxtb	r2, r3
 80091a2:	8a79      	ldrh	r1, [r7, #18]
 80091a4:	2300      	movs	r3, #0
 80091a6:	9300      	str	r3, [sp, #0]
 80091a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80091ac:	68f8      	ldr	r0, [r7, #12]
 80091ae:	f001 f8e9 	bl	800a384 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80091b2:	e033      	b.n	800921c <I2C_Master_ISR_IT+0x1c0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091b8:	b29a      	uxth	r2, r3
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091c2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80091c6:	d00c      	beq.n	80091e2 <I2C_Master_ISR_IT+0x186>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091cc:	b2da      	uxtb	r2, r3
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80091d2:	8a79      	ldrh	r1, [r7, #18]
 80091d4:	2300      	movs	r3, #0
 80091d6:	9300      	str	r3, [sp, #0]
 80091d8:	4603      	mov	r3, r0
 80091da:	68f8      	ldr	r0, [r7, #12]
 80091dc:	f001 f8d2 	bl	800a384 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80091e0:	e01c      	b.n	800921c <I2C_Master_ISR_IT+0x1c0>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091e6:	b2da      	uxtb	r2, r3
 80091e8:	8a79      	ldrh	r1, [r7, #18]
 80091ea:	2300      	movs	r3, #0
 80091ec:	9300      	str	r3, [sp, #0]
 80091ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80091f2:	68f8      	ldr	r0, [r7, #12]
 80091f4:	f001 f8c6 	bl	800a384 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80091f8:	e010      	b.n	800921c <I2C_Master_ISR_IT+0x1c0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	685b      	ldr	r3, [r3, #4]
 8009200:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009204:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009208:	d003      	beq.n	8009212 <I2C_Master_ISR_IT+0x1b6>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800920a:	68f8      	ldr	r0, [r7, #12]
 800920c:	f000 fbe4 	bl	80099d8 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009210:	e034      	b.n	800927c <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009212:	2140      	movs	r1, #64	; 0x40
 8009214:	68f8      	ldr	r0, [r7, #12]
 8009216:	f000 fe1f 	bl	8009e58 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800921a:	e02f      	b.n	800927c <I2C_Master_ISR_IT+0x220>
 800921c:	e02e      	b.n	800927c <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	099b      	lsrs	r3, r3, #6
 8009222:	f003 0301 	and.w	r3, r3, #1
 8009226:	2b00      	cmp	r3, #0
 8009228:	d028      	beq.n	800927c <I2C_Master_ISR_IT+0x220>
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	099b      	lsrs	r3, r3, #6
 800922e:	f003 0301 	and.w	r3, r3, #1
 8009232:	2b00      	cmp	r3, #0
 8009234:	d022      	beq.n	800927c <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800923a:	b29b      	uxth	r3, r3
 800923c:	2b00      	cmp	r3, #0
 800923e:	d119      	bne.n	8009274 <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	685b      	ldr	r3, [r3, #4]
 8009246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800924a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800924e:	d015      	beq.n	800927c <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009254:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009258:	d108      	bne.n	800926c <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	685a      	ldr	r2, [r3, #4]
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009268:	605a      	str	r2, [r3, #4]
 800926a:	e007      	b.n	800927c <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800926c:	68f8      	ldr	r0, [r7, #12]
 800926e:	f000 fbb3 	bl	80099d8 <I2C_ITMasterSeqCplt>
 8009272:	e003      	b.n	800927c <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009274:	2140      	movs	r1, #64	; 0x40
 8009276:	68f8      	ldr	r0, [r7, #12]
 8009278:	f000 fdee 	bl	8009e58 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	095b      	lsrs	r3, r3, #5
 8009280:	f003 0301 	and.w	r3, r3, #1
 8009284:	2b00      	cmp	r3, #0
 8009286:	d009      	beq.n	800929c <I2C_Master_ISR_IT+0x240>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	095b      	lsrs	r3, r3, #5
 800928c:	f003 0301 	and.w	r3, r3, #1
 8009290:	2b00      	cmp	r3, #0
 8009292:	d003      	beq.n	800929c <I2C_Master_ISR_IT+0x240>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8009294:	6979      	ldr	r1, [r7, #20]
 8009296:	68f8      	ldr	r0, [r7, #12]
 8009298:	f000 fc18 	bl	8009acc <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	2200      	movs	r2, #0
 80092a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80092a4:	2300      	movs	r3, #0
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3718      	adds	r7, #24
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}

080092ae <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80092ae:	b580      	push	{r7, lr}
 80092b0:	b086      	sub	sp, #24
 80092b2:	af00      	add	r7, sp, #0
 80092b4:	60f8      	str	r0, [r7, #12]
 80092b6:	60b9      	str	r1, [r7, #8]
 80092b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092be:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80092ca:	2b01      	cmp	r3, #1
 80092cc:	d101      	bne.n	80092d2 <I2C_Slave_ISR_IT+0x24>
 80092ce:	2302      	movs	r3, #2
 80092d0:	e0ec      	b.n	80094ac <I2C_Slave_ISR_IT+0x1fe>
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	2201      	movs	r2, #1
 80092d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80092da:	693b      	ldr	r3, [r7, #16]
 80092dc:	095b      	lsrs	r3, r3, #5
 80092de:	f003 0301 	and.w	r3, r3, #1
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d009      	beq.n	80092fa <I2C_Slave_ISR_IT+0x4c>
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	095b      	lsrs	r3, r3, #5
 80092ea:	f003 0301 	and.w	r3, r3, #1
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d003      	beq.n	80092fa <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80092f2:	6939      	ldr	r1, [r7, #16]
 80092f4:	68f8      	ldr	r0, [r7, #12]
 80092f6:	f000 fc85 	bl	8009c04 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80092fa:	693b      	ldr	r3, [r7, #16]
 80092fc:	091b      	lsrs	r3, r3, #4
 80092fe:	f003 0301 	and.w	r3, r3, #1
 8009302:	2b00      	cmp	r3, #0
 8009304:	d04d      	beq.n	80093a2 <I2C_Slave_ISR_IT+0xf4>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	091b      	lsrs	r3, r3, #4
 800930a:	f003 0301 	and.w	r3, r3, #1
 800930e:	2b00      	cmp	r3, #0
 8009310:	d047      	beq.n	80093a2 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009316:	b29b      	uxth	r3, r3
 8009318:	2b00      	cmp	r3, #0
 800931a:	d128      	bne.n	800936e <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009322:	b2db      	uxtb	r3, r3
 8009324:	2b28      	cmp	r3, #40	; 0x28
 8009326:	d108      	bne.n	800933a <I2C_Slave_ISR_IT+0x8c>
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800932e:	d104      	bne.n	800933a <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8009330:	6939      	ldr	r1, [r7, #16]
 8009332:	68f8      	ldr	r0, [r7, #12]
 8009334:	f000 fd3c 	bl	8009db0 <I2C_ITListenCplt>
 8009338:	e032      	b.n	80093a0 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009340:	b2db      	uxtb	r3, r3
 8009342:	2b29      	cmp	r3, #41	; 0x29
 8009344:	d10e      	bne.n	8009364 <I2C_Slave_ISR_IT+0xb6>
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800934c:	d00a      	beq.n	8009364 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	2210      	movs	r2, #16
 8009354:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8009356:	68f8      	ldr	r0, [r7, #12]
 8009358:	f000 fe3e 	bl	8009fd8 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800935c:	68f8      	ldr	r0, [r7, #12]
 800935e:	f000 fb78 	bl	8009a52 <I2C_ITSlaveSeqCplt>
 8009362:	e01d      	b.n	80093a0 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	2210      	movs	r2, #16
 800936a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800936c:	e096      	b.n	800949c <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	2210      	movs	r2, #16
 8009374:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800937a:	f043 0204 	orr.w	r2, r3, #4
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d004      	beq.n	8009392 <I2C_Slave_ISR_IT+0xe4>
 8009388:	697b      	ldr	r3, [r7, #20]
 800938a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800938e:	f040 8085 	bne.w	800949c <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009396:	4619      	mov	r1, r3
 8009398:	68f8      	ldr	r0, [r7, #12]
 800939a:	f000 fd5d 	bl	8009e58 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800939e:	e07d      	b.n	800949c <I2C_Slave_ISR_IT+0x1ee>
 80093a0:	e07c      	b.n	800949c <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	089b      	lsrs	r3, r3, #2
 80093a6:	f003 0301 	and.w	r3, r3, #1
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d030      	beq.n	8009410 <I2C_Slave_ISR_IT+0x162>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	089b      	lsrs	r3, r3, #2
 80093b2:	f003 0301 	and.w	r3, r3, #1
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d02a      	beq.n	8009410 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093be:	b29b      	uxth	r3, r3
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d018      	beq.n	80093f6 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ce:	b2d2      	uxtb	r2, r2
 80093d0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093d6:	1c5a      	adds	r2, r3, #1
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093e0:	3b01      	subs	r3, #1
 80093e2:	b29a      	uxth	r2, r3
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093ec:	b29b      	uxth	r3, r3
 80093ee:	3b01      	subs	r3, #1
 80093f0:	b29a      	uxth	r2, r3
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093fa:	b29b      	uxth	r3, r3
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d14f      	bne.n	80094a0 <I2C_Slave_ISR_IT+0x1f2>
 8009400:	697b      	ldr	r3, [r7, #20]
 8009402:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009406:	d04b      	beq.n	80094a0 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8009408:	68f8      	ldr	r0, [r7, #12]
 800940a:	f000 fb22 	bl	8009a52 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800940e:	e047      	b.n	80094a0 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	08db      	lsrs	r3, r3, #3
 8009414:	f003 0301 	and.w	r3, r3, #1
 8009418:	2b00      	cmp	r3, #0
 800941a:	d00a      	beq.n	8009432 <I2C_Slave_ISR_IT+0x184>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	08db      	lsrs	r3, r3, #3
 8009420:	f003 0301 	and.w	r3, r3, #1
 8009424:	2b00      	cmp	r3, #0
 8009426:	d004      	beq.n	8009432 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8009428:	6939      	ldr	r1, [r7, #16]
 800942a:	68f8      	ldr	r0, [r7, #12]
 800942c:	f000 fa52 	bl	80098d4 <I2C_ITAddrCplt>
 8009430:	e037      	b.n	80094a2 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8009432:	693b      	ldr	r3, [r7, #16]
 8009434:	085b      	lsrs	r3, r3, #1
 8009436:	f003 0301 	and.w	r3, r3, #1
 800943a:	2b00      	cmp	r3, #0
 800943c:	d031      	beq.n	80094a2 <I2C_Slave_ISR_IT+0x1f4>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	085b      	lsrs	r3, r3, #1
 8009442:	f003 0301 	and.w	r3, r3, #1
 8009446:	2b00      	cmp	r3, #0
 8009448:	d02b      	beq.n	80094a2 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800944e:	b29b      	uxth	r3, r3
 8009450:	2b00      	cmp	r3, #0
 8009452:	d018      	beq.n	8009486 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009458:	781a      	ldrb	r2, [r3, #0]
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009464:	1c5a      	adds	r2, r3, #1
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800946e:	b29b      	uxth	r3, r3
 8009470:	3b01      	subs	r3, #1
 8009472:	b29a      	uxth	r2, r3
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800947c:	3b01      	subs	r3, #1
 800947e:	b29a      	uxth	r2, r3
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	851a      	strh	r2, [r3, #40]	; 0x28
 8009484:	e00d      	b.n	80094a2 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800948c:	d002      	beq.n	8009494 <I2C_Slave_ISR_IT+0x1e6>
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d106      	bne.n	80094a2 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8009494:	68f8      	ldr	r0, [r7, #12]
 8009496:	f000 fadc 	bl	8009a52 <I2C_ITSlaveSeqCplt>
 800949a:	e002      	b.n	80094a2 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800949c:	bf00      	nop
 800949e:	e000      	b.n	80094a2 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80094a0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	2200      	movs	r2, #0
 80094a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80094aa:	2300      	movs	r3, #0
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	3718      	adds	r7, #24
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}

080094b4 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b088      	sub	sp, #32
 80094b8:	af02      	add	r7, sp, #8
 80094ba:	60f8      	str	r0, [r7, #12]
 80094bc:	60b9      	str	r1, [r7, #8]
 80094be:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80094c6:	2b01      	cmp	r3, #1
 80094c8:	d101      	bne.n	80094ce <I2C_Master_ISR_DMA+0x1a>
 80094ca:	2302      	movs	r3, #2
 80094cc:	e0e1      	b.n	8009692 <I2C_Master_ISR_DMA+0x1de>
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	2201      	movs	r2, #1
 80094d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	091b      	lsrs	r3, r3, #4
 80094da:	f003 0301 	and.w	r3, r3, #1
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d017      	beq.n	8009512 <I2C_Master_ISR_DMA+0x5e>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	091b      	lsrs	r3, r3, #4
 80094e6:	f003 0301 	and.w	r3, r3, #1
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d011      	beq.n	8009512 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	2210      	movs	r2, #16
 80094f4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094fa:	f043 0204 	orr.w	r2, r3, #4
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8009502:	2112      	movs	r1, #18
 8009504:	68f8      	ldr	r0, [r7, #12]
 8009506:	f000 ff6b 	bl	800a3e0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800950a:	68f8      	ldr	r0, [r7, #12]
 800950c:	f000 fd64 	bl	8009fd8 <I2C_Flush_TXDR>
 8009510:	e0ba      	b.n	8009688 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	09db      	lsrs	r3, r3, #7
 8009516:	f003 0301 	and.w	r3, r3, #1
 800951a:	2b00      	cmp	r3, #0
 800951c:	d072      	beq.n	8009604 <I2C_Master_ISR_DMA+0x150>
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	099b      	lsrs	r3, r3, #6
 8009522:	f003 0301 	and.w	r3, r3, #1
 8009526:	2b00      	cmp	r3, #0
 8009528:	d06c      	beq.n	8009604 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	681a      	ldr	r2, [r3, #0]
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009538:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800953e:	b29b      	uxth	r3, r3
 8009540:	2b00      	cmp	r3, #0
 8009542:	d04e      	beq.n	80095e2 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	685b      	ldr	r3, [r3, #4]
 800954a:	b29b      	uxth	r3, r3
 800954c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009550:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009556:	b29b      	uxth	r3, r3
 8009558:	2bff      	cmp	r3, #255	; 0xff
 800955a:	d906      	bls.n	800956a <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	22ff      	movs	r2, #255	; 0xff
 8009560:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8009562:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009566:	617b      	str	r3, [r7, #20]
 8009568:	e010      	b.n	800958c <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800956e:	b29a      	uxth	r2, r3
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009578:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800957c:	d003      	beq.n	8009586 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009582:	617b      	str	r3, [r7, #20]
 8009584:	e002      	b.n	800958c <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8009586:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800958a:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009590:	b2da      	uxtb	r2, r3
 8009592:	8a79      	ldrh	r1, [r7, #18]
 8009594:	2300      	movs	r3, #0
 8009596:	9300      	str	r3, [sp, #0]
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	68f8      	ldr	r0, [r7, #12]
 800959c:	f000 fef2 	bl	800a384 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095a4:	b29a      	uxth	r2, r3
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095aa:	1ad3      	subs	r3, r2, r3
 80095ac:	b29a      	uxth	r2, r3
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80095b8:	b2db      	uxtb	r3, r3
 80095ba:	2b22      	cmp	r3, #34	; 0x22
 80095bc:	d108      	bne.n	80095d0 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	681a      	ldr	r2, [r3, #0]
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80095cc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80095ce:	e05b      	b.n	8009688 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	681a      	ldr	r2, [r3, #0]
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80095de:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80095e0:	e052      	b.n	8009688 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	685b      	ldr	r3, [r3, #4]
 80095e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80095f0:	d003      	beq.n	80095fa <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80095f2:	68f8      	ldr	r0, [r7, #12]
 80095f4:	f000 f9f0 	bl	80099d8 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80095f8:	e046      	b.n	8009688 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80095fa:	2140      	movs	r1, #64	; 0x40
 80095fc:	68f8      	ldr	r0, [r7, #12]
 80095fe:	f000 fc2b 	bl	8009e58 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8009602:	e041      	b.n	8009688 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	099b      	lsrs	r3, r3, #6
 8009608:	f003 0301 	and.w	r3, r3, #1
 800960c:	2b00      	cmp	r3, #0
 800960e:	d029      	beq.n	8009664 <I2C_Master_ISR_DMA+0x1b0>
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	099b      	lsrs	r3, r3, #6
 8009614:	f003 0301 	and.w	r3, r3, #1
 8009618:	2b00      	cmp	r3, #0
 800961a:	d023      	beq.n	8009664 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009620:	b29b      	uxth	r3, r3
 8009622:	2b00      	cmp	r3, #0
 8009624:	d119      	bne.n	800965a <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	685b      	ldr	r3, [r3, #4]
 800962c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009630:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009634:	d027      	beq.n	8009686 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800963a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800963e:	d108      	bne.n	8009652 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	685a      	ldr	r2, [r3, #4]
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800964e:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8009650:	e019      	b.n	8009686 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8009652:	68f8      	ldr	r0, [r7, #12]
 8009654:	f000 f9c0 	bl	80099d8 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8009658:	e015      	b.n	8009686 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800965a:	2140      	movs	r1, #64	; 0x40
 800965c:	68f8      	ldr	r0, [r7, #12]
 800965e:	f000 fbfb 	bl	8009e58 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8009662:	e010      	b.n	8009686 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	095b      	lsrs	r3, r3, #5
 8009668:	f003 0301 	and.w	r3, r3, #1
 800966c:	2b00      	cmp	r3, #0
 800966e:	d00b      	beq.n	8009688 <I2C_Master_ISR_DMA+0x1d4>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	095b      	lsrs	r3, r3, #5
 8009674:	f003 0301 	and.w	r3, r3, #1
 8009678:	2b00      	cmp	r3, #0
 800967a:	d005      	beq.n	8009688 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800967c:	68b9      	ldr	r1, [r7, #8]
 800967e:	68f8      	ldr	r0, [r7, #12]
 8009680:	f000 fa24 	bl	8009acc <I2C_ITMasterCplt>
 8009684:	e000      	b.n	8009688 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8009686:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	2200      	movs	r2, #0
 800968c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009690:	2300      	movs	r3, #0
}
 8009692:	4618      	mov	r0, r3
 8009694:	3718      	adds	r7, #24
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}

0800969a <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800969a:	b580      	push	{r7, lr}
 800969c:	b086      	sub	sp, #24
 800969e:	af00      	add	r7, sp, #0
 80096a0:	60f8      	str	r0, [r7, #12]
 80096a2:	60b9      	str	r1, [r7, #8]
 80096a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096aa:	613b      	str	r3, [r7, #16]
  uint32_t treatdmanack = 0U;
 80096ac:	2300      	movs	r3, #0
 80096ae:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80096b6:	2b01      	cmp	r3, #1
 80096b8:	d101      	bne.n	80096be <I2C_Slave_ISR_DMA+0x24>
 80096ba:	2302      	movs	r3, #2
 80096bc:	e0b1      	b.n	8009822 <I2C_Slave_ISR_DMA+0x188>
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	2201      	movs	r2, #1
 80096c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	095b      	lsrs	r3, r3, #5
 80096ca:	f003 0301 	and.w	r3, r3, #1
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d009      	beq.n	80096e6 <I2C_Slave_ISR_DMA+0x4c>
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	095b      	lsrs	r3, r3, #5
 80096d6:	f003 0301 	and.w	r3, r3, #1
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d003      	beq.n	80096e6 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80096de:	68b9      	ldr	r1, [r7, #8]
 80096e0:	68f8      	ldr	r0, [r7, #12]
 80096e2:	f000 fa8f 	bl	8009c04 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	091b      	lsrs	r3, r3, #4
 80096ea:	f003 0301 	and.w	r3, r3, #1
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	f000 8082 	beq.w	80097f8 <I2C_Slave_ISR_DMA+0x15e>
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	091b      	lsrs	r3, r3, #4
 80096f8:	f003 0301 	and.w	r3, r3, #1
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d07b      	beq.n	80097f8 <I2C_Slave_ISR_DMA+0x15e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	0b9b      	lsrs	r3, r3, #14
 8009704:	f003 0301 	and.w	r3, r3, #1
 8009708:	2b00      	cmp	r3, #0
 800970a:	d105      	bne.n	8009718 <I2C_Slave_ISR_DMA+0x7e>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	0bdb      	lsrs	r3, r3, #15
 8009710:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009714:	2b00      	cmp	r3, #0
 8009716:	d068      	beq.n	80097ea <I2C_Slave_ISR_DMA+0x150>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800971c:	2b00      	cmp	r3, #0
 800971e:	d00d      	beq.n	800973c <I2C_Slave_ISR_DMA+0xa2>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	0bdb      	lsrs	r3, r3, #15
 8009724:	f003 0301 	and.w	r3, r3, #1
 8009728:	2b00      	cmp	r3, #0
 800972a:	d007      	beq.n	800973c <I2C_Slave_ISR_DMA+0xa2>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	685b      	ldr	r3, [r3, #4]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d101      	bne.n	800973c <I2C_Slave_ISR_DMA+0xa2>
          {
            treatdmanack = 1U;
 8009738:	2301      	movs	r3, #1
 800973a:	617b      	str	r3, [r7, #20]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009740:	2b00      	cmp	r3, #0
 8009742:	d00d      	beq.n	8009760 <I2C_Slave_ISR_DMA+0xc6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	0b9b      	lsrs	r3, r3, #14
 8009748:	f003 0301 	and.w	r3, r3, #1
 800974c:	2b00      	cmp	r3, #0
 800974e:	d007      	beq.n	8009760 <I2C_Slave_ISR_DMA+0xc6>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	685b      	ldr	r3, [r3, #4]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d101      	bne.n	8009760 <I2C_Slave_ISR_DMA+0xc6>
          {
            treatdmanack = 1U;
 800975c:	2301      	movs	r3, #1
 800975e:	617b      	str	r3, [r7, #20]
          }
        }
      }

      if (treatdmanack == 1U)
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	2b01      	cmp	r3, #1
 8009764:	d128      	bne.n	80097b8 <I2C_Slave_ISR_DMA+0x11e>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800976c:	b2db      	uxtb	r3, r3
 800976e:	2b28      	cmp	r3, #40	; 0x28
 8009770:	d108      	bne.n	8009784 <I2C_Slave_ISR_DMA+0xea>
 8009772:	693b      	ldr	r3, [r7, #16]
 8009774:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009778:	d104      	bne.n	8009784 <I2C_Slave_ISR_DMA+0xea>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800977a:	68b9      	ldr	r1, [r7, #8]
 800977c:	68f8      	ldr	r0, [r7, #12]
 800977e:	f000 fb17 	bl	8009db0 <I2C_ITListenCplt>
 8009782:	e031      	b.n	80097e8 <I2C_Slave_ISR_DMA+0x14e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800978a:	b2db      	uxtb	r3, r3
 800978c:	2b29      	cmp	r3, #41	; 0x29
 800978e:	d10e      	bne.n	80097ae <I2C_Slave_ISR_DMA+0x114>
 8009790:	693b      	ldr	r3, [r7, #16]
 8009792:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009796:	d00a      	beq.n	80097ae <I2C_Slave_ISR_DMA+0x114>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	2210      	movs	r2, #16
 800979e:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80097a0:	68f8      	ldr	r0, [r7, #12]
 80097a2:	f000 fc19 	bl	8009fd8 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80097a6:	68f8      	ldr	r0, [r7, #12]
 80097a8:	f000 f953 	bl	8009a52 <I2C_ITSlaveSeqCplt>
 80097ac:	e01c      	b.n	80097e8 <I2C_Slave_ISR_DMA+0x14e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	2210      	movs	r2, #16
 80097b4:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80097b6:	e01d      	b.n	80097f4 <I2C_Slave_ISR_DMA+0x15a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	2210      	movs	r2, #16
 80097be:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097c4:	f043 0204 	orr.w	r2, r3, #4
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	645a      	str	r2, [r3, #68]	; 0x44

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d003      	beq.n	80097da <I2C_Slave_ISR_DMA+0x140>
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80097d8:	d10c      	bne.n	80097f4 <I2C_Slave_ISR_DMA+0x15a>
        {
          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097de:	4619      	mov	r1, r3
 80097e0:	68f8      	ldr	r0, [r7, #12]
 80097e2:	f000 fb39 	bl	8009e58 <I2C_ITError>
      if (treatdmanack == 1U)
 80097e6:	e005      	b.n	80097f4 <I2C_Slave_ISR_DMA+0x15a>
 80097e8:	e004      	b.n	80097f4 <I2C_Slave_ISR_DMA+0x15a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	2210      	movs	r2, #16
 80097f0:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80097f2:	e011      	b.n	8009818 <I2C_Slave_ISR_DMA+0x17e>
      if (treatdmanack == 1U)
 80097f4:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80097f6:	e00f      	b.n	8009818 <I2C_Slave_ISR_DMA+0x17e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	08db      	lsrs	r3, r3, #3
 80097fc:	f003 0301 	and.w	r3, r3, #1
 8009800:	2b00      	cmp	r3, #0
 8009802:	d009      	beq.n	8009818 <I2C_Slave_ISR_DMA+0x17e>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	08db      	lsrs	r3, r3, #3
 8009808:	f003 0301 	and.w	r3, r3, #1
 800980c:	2b00      	cmp	r3, #0
 800980e:	d003      	beq.n	8009818 <I2C_Slave_ISR_DMA+0x17e>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8009810:	68b9      	ldr	r1, [r7, #8]
 8009812:	68f8      	ldr	r0, [r7, #12]
 8009814:	f000 f85e 	bl	80098d4 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	2200      	movs	r2, #0
 800981c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009820:	2300      	movs	r3, #0
}
 8009822:	4618      	mov	r0, r3
 8009824:	3718      	adds	r7, #24
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}
	...

0800982c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b086      	sub	sp, #24
 8009830:	af02      	add	r7, sp, #8
 8009832:	60f8      	str	r0, [r7, #12]
 8009834:	4608      	mov	r0, r1
 8009836:	4611      	mov	r1, r2
 8009838:	461a      	mov	r2, r3
 800983a:	4603      	mov	r3, r0
 800983c:	817b      	strh	r3, [r7, #10]
 800983e:	460b      	mov	r3, r1
 8009840:	813b      	strh	r3, [r7, #8]
 8009842:	4613      	mov	r3, r2
 8009844:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009846:	88fb      	ldrh	r3, [r7, #6]
 8009848:	b2da      	uxtb	r2, r3
 800984a:	8979      	ldrh	r1, [r7, #10]
 800984c:	4b20      	ldr	r3, [pc, #128]	; (80098d0 <I2C_RequestMemoryWrite+0xa4>)
 800984e:	9300      	str	r3, [sp, #0]
 8009850:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009854:	68f8      	ldr	r0, [r7, #12]
 8009856:	f000 fd95 	bl	800a384 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800985a:	69fa      	ldr	r2, [r7, #28]
 800985c:	69b9      	ldr	r1, [r7, #24]
 800985e:	68f8      	ldr	r0, [r7, #12]
 8009860:	f000 fc42 	bl	800a0e8 <I2C_WaitOnTXISFlagUntilTimeout>
 8009864:	4603      	mov	r3, r0
 8009866:	2b00      	cmp	r3, #0
 8009868:	d001      	beq.n	800986e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800986a:	2301      	movs	r3, #1
 800986c:	e02c      	b.n	80098c8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800986e:	88fb      	ldrh	r3, [r7, #6]
 8009870:	2b01      	cmp	r3, #1
 8009872:	d105      	bne.n	8009880 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009874:	893b      	ldrh	r3, [r7, #8]
 8009876:	b2da      	uxtb	r2, r3
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	629a      	str	r2, [r3, #40]	; 0x28
 800987e:	e015      	b.n	80098ac <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009880:	893b      	ldrh	r3, [r7, #8]
 8009882:	0a1b      	lsrs	r3, r3, #8
 8009884:	b29b      	uxth	r3, r3
 8009886:	b2da      	uxtb	r2, r3
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800988e:	69fa      	ldr	r2, [r7, #28]
 8009890:	69b9      	ldr	r1, [r7, #24]
 8009892:	68f8      	ldr	r0, [r7, #12]
 8009894:	f000 fc28 	bl	800a0e8 <I2C_WaitOnTXISFlagUntilTimeout>
 8009898:	4603      	mov	r3, r0
 800989a:	2b00      	cmp	r3, #0
 800989c:	d001      	beq.n	80098a2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800989e:	2301      	movs	r3, #1
 80098a0:	e012      	b.n	80098c8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80098a2:	893b      	ldrh	r3, [r7, #8]
 80098a4:	b2da      	uxtb	r2, r3
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80098ac:	69fb      	ldr	r3, [r7, #28]
 80098ae:	9300      	str	r3, [sp, #0]
 80098b0:	69bb      	ldr	r3, [r7, #24]
 80098b2:	2200      	movs	r2, #0
 80098b4:	2180      	movs	r1, #128	; 0x80
 80098b6:	68f8      	ldr	r0, [r7, #12]
 80098b8:	f000 fbd6 	bl	800a068 <I2C_WaitOnFlagUntilTimeout>
 80098bc:	4603      	mov	r3, r0
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d001      	beq.n	80098c6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80098c2:	2301      	movs	r3, #1
 80098c4:	e000      	b.n	80098c8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80098c6:	2300      	movs	r3, #0
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	3710      	adds	r7, #16
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}
 80098d0:	80002000 	.word	0x80002000

080098d4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b084      	sub	sp, #16
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
 80098dc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80098e4:	b2db      	uxtb	r3, r3
 80098e6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80098ea:	2b28      	cmp	r3, #40	; 0x28
 80098ec:	d168      	bne.n	80099c0 <I2C_ITAddrCplt+0xec>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	699b      	ldr	r3, [r3, #24]
 80098f4:	0c1b      	lsrs	r3, r3, #16
 80098f6:	b2db      	uxtb	r3, r3
 80098f8:	f003 0301 	and.w	r3, r3, #1
 80098fc:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	699b      	ldr	r3, [r3, #24]
 8009904:	0c1b      	lsrs	r3, r3, #16
 8009906:	b29b      	uxth	r3, r3
 8009908:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800990c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	689b      	ldr	r3, [r3, #8]
 8009914:	b29b      	uxth	r3, r3
 8009916:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800991a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	68db      	ldr	r3, [r3, #12]
 8009922:	b29b      	uxth	r3, r3
 8009924:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8009928:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	68db      	ldr	r3, [r3, #12]
 800992e:	2b02      	cmp	r3, #2
 8009930:	d137      	bne.n	80099a2 <I2C_ITAddrCplt+0xce>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8009932:	897b      	ldrh	r3, [r7, #10]
 8009934:	09db      	lsrs	r3, r3, #7
 8009936:	b29a      	uxth	r2, r3
 8009938:	89bb      	ldrh	r3, [r7, #12]
 800993a:	4053      	eors	r3, r2
 800993c:	b29b      	uxth	r3, r3
 800993e:	f003 0306 	and.w	r3, r3, #6
 8009942:	2b00      	cmp	r3, #0
 8009944:	d11c      	bne.n	8009980 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8009946:	897b      	ldrh	r3, [r7, #10]
 8009948:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800994e:	1c5a      	adds	r2, r3, #1
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009958:	2b02      	cmp	r3, #2
 800995a:	d139      	bne.n	80099d0 <I2C_ITAddrCplt+0xfc>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2200      	movs	r2, #0
 8009960:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	2208      	movs	r2, #8
 8009968:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2200      	movs	r2, #0
 800996e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8009972:	89ba      	ldrh	r2, [r7, #12]
 8009974:	7bfb      	ldrb	r3, [r7, #15]
 8009976:	4619      	mov	r1, r3
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f7ff fb2f 	bl	8008fdc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800997e:	e027      	b.n	80099d0 <I2C_ITAddrCplt+0xfc>
        slaveaddrcode = ownadd2code;
 8009980:	893b      	ldrh	r3, [r7, #8]
 8009982:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8009984:	2104      	movs	r1, #4
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f000 fd98 	bl	800a4bc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2200      	movs	r2, #0
 8009990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8009994:	89ba      	ldrh	r2, [r7, #12]
 8009996:	7bfb      	ldrb	r3, [r7, #15]
 8009998:	4619      	mov	r1, r3
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f7ff fb1e 	bl	8008fdc <HAL_I2C_AddrCallback>
}
 80099a0:	e016      	b.n	80099d0 <I2C_ITAddrCplt+0xfc>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80099a2:	2104      	movs	r1, #4
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f000 fd89 	bl	800a4bc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2200      	movs	r2, #0
 80099ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80099b2:	89ba      	ldrh	r2, [r7, #12]
 80099b4:	7bfb      	ldrb	r3, [r7, #15]
 80099b6:	4619      	mov	r1, r3
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f7ff fb0f 	bl	8008fdc <HAL_I2C_AddrCallback>
}
 80099be:	e007      	b.n	80099d0 <I2C_ITAddrCplt+0xfc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	2208      	movs	r2, #8
 80099c6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2200      	movs	r2, #0
 80099cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80099d0:	bf00      	nop
 80099d2:	3710      	adds	r7, #16
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}

080099d8 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b082      	sub	sp, #8
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2200      	movs	r2, #0
 80099e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80099ee:	b2db      	uxtb	r3, r3
 80099f0:	2b21      	cmp	r3, #33	; 0x21
 80099f2:	d115      	bne.n	8009a20 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2220      	movs	r2, #32
 80099f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2211      	movs	r2, #17
 8009a00:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2200      	movs	r2, #0
 8009a06:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009a08:	2101      	movs	r1, #1
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f000 fd56 	bl	800a4bc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2200      	movs	r2, #0
 8009a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f7fa fa29 	bl	8003e70 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009a1e:	e014      	b.n	8009a4a <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2220      	movs	r2, #32
 8009a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2212      	movs	r2, #18
 8009a2c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2200      	movs	r2, #0
 8009a32:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8009a34:	2102      	movs	r1, #2
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f000 fd40 	bl	800a4bc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f7fa fa29 	bl	8003e9c <HAL_I2C_MasterRxCpltCallback>
}
 8009a4a:	bf00      	nop
 8009a4c:	3708      	adds	r7, #8
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}

08009a52 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8009a52:	b580      	push	{r7, lr}
 8009a54:	b082      	sub	sp, #8
 8009a56:	af00      	add	r7, sp, #0
 8009a58:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a68:	b2db      	uxtb	r3, r3
 8009a6a:	2b29      	cmp	r3, #41	; 0x29
 8009a6c:	d112      	bne.n	8009a94 <I2C_ITSlaveSeqCplt+0x42>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2228      	movs	r2, #40	; 0x28
 8009a72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2221      	movs	r2, #33	; 0x21
 8009a7a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009a7c:	2101      	movs	r1, #1
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f000 fd1c 	bl	800a4bc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2200      	movs	r2, #0
 8009a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f7ff fa91 	bl	8008fb4 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009a92:	e017      	b.n	8009ac4 <I2C_ITSlaveSeqCplt+0x72>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a9a:	b2db      	uxtb	r3, r3
 8009a9c:	2b2a      	cmp	r3, #42	; 0x2a
 8009a9e:	d111      	bne.n	8009ac4 <I2C_ITSlaveSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2228      	movs	r2, #40	; 0x28
 8009aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2222      	movs	r2, #34	; 0x22
 8009aac:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8009aae:	2102      	movs	r1, #2
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f000 fd03 	bl	800a4bc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2200      	movs	r2, #0
 8009aba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f7ff fa82 	bl	8008fc8 <HAL_I2C_SlaveRxCpltCallback>
}
 8009ac4:	bf00      	nop
 8009ac6:	3708      	adds	r7, #8
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}

08009acc <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b084      	sub	sp, #16
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
 8009ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	2220      	movs	r2, #32
 8009adc:	61da      	str	r2, [r3, #28]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	6859      	ldr	r1, [r3, #4]
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681a      	ldr	r2, [r3, #0]
 8009ae8:	4b44      	ldr	r3, [pc, #272]	; (8009bfc <I2C_ITMasterCplt+0x130>)
 8009aea:	400b      	ands	r3, r1
 8009aec:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->PreviousState = I2C_STATE_NONE;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2200      	movs	r2, #0
 8009af2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->XferISR       = NULL;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2200      	movs	r2, #0
 8009af8:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	4a40      	ldr	r2, [pc, #256]	; (8009c00 <I2C_ITMasterCplt+0x134>)
 8009afe:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET)
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	091b      	lsrs	r3, r3, #4
 8009b04:	f003 0301 	and.w	r3, r3, #1
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d009      	beq.n	8009b20 <I2C_ITMasterCplt+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	2210      	movs	r2, #16
 8009b12:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b18:	f043 0204 	orr.w	r2, r3, #4
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f000 fa59 	bl	8009fd8 <I2C_Flush_TXDR>

  /* Disable Interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8009b26:	2103      	movs	r1, #3
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f000 fcc7 	bl	800a4bc <I2C_Disable_IRQ>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b32:	60fb      	str	r3, [r7, #12]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b3a:	b2db      	uxtb	r3, r3
 8009b3c:	2b60      	cmp	r3, #96	; 0x60
 8009b3e:	d002      	beq.n	8009b46 <I2C_ITMasterCplt+0x7a>
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d006      	beq.n	8009b54 <I2C_ITMasterCplt+0x88>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b4a:	4619      	mov	r1, r3
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f000 f983 	bl	8009e58 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009b52:	e04e      	b.n	8009bf2 <I2C_ITMasterCplt+0x126>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b5a:	b2db      	uxtb	r3, r3
 8009b5c:	2b21      	cmp	r3, #33	; 0x21
 8009b5e:	d121      	bne.n	8009ba4 <I2C_ITMasterCplt+0xd8>
    hi2c->State = HAL_I2C_STATE_READY;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2220      	movs	r2, #32
 8009b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009b6e:	b2db      	uxtb	r3, r3
 8009b70:	2b40      	cmp	r3, #64	; 0x40
 8009b72:	d10b      	bne.n	8009b8c <I2C_ITMasterCplt+0xc0>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2200      	movs	r2, #0
 8009b78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f7ff fa41 	bl	800900c <HAL_I2C_MemTxCpltCallback>
}
 8009b8a:	e032      	b.n	8009bf2 <I2C_ITMasterCplt+0x126>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2200      	movs	r2, #0
 8009b90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2200      	movs	r2, #0
 8009b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f7fa f967 	bl	8003e70 <HAL_I2C_MasterTxCpltCallback>
}
 8009ba2:	e026      	b.n	8009bf2 <I2C_ITMasterCplt+0x126>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009baa:	b2db      	uxtb	r3, r3
 8009bac:	2b22      	cmp	r3, #34	; 0x22
 8009bae:	d120      	bne.n	8009bf2 <I2C_ITMasterCplt+0x126>
    hi2c->State = HAL_I2C_STATE_READY;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2220      	movs	r2, #32
 8009bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009bbe:	b2db      	uxtb	r3, r3
 8009bc0:	2b40      	cmp	r3, #64	; 0x40
 8009bc2:	d10b      	bne.n	8009bdc <I2C_ITMasterCplt+0x110>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f7ff fa23 	bl	8009020 <HAL_I2C_MemRxCpltCallback>
}
 8009bda:	e00a      	b.n	8009bf2 <I2C_ITMasterCplt+0x126>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2200      	movs	r2, #0
 8009be0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2200      	movs	r2, #0
 8009be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	f7fa f955 	bl	8003e9c <HAL_I2C_MasterRxCpltCallback>
}
 8009bf2:	bf00      	nop
 8009bf4:	3710      	adds	r7, #16
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}
 8009bfa:	bf00      	nop
 8009bfc:	fe00e800 	.word	0xfe00e800
 8009c00:	ffff0000 	.word	0xffff0000

08009c04 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b084      	sub	sp, #16
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
 8009c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	60bb      	str	r3, [r7, #8]
  uint32_t tmpITFlags = ITFlags;
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	60fb      	str	r3, [r7, #12]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	2220      	movs	r2, #32
 8009c20:	61da      	str	r2, [r3, #28]

  /* Disable all interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8009c22:	2107      	movs	r1, #7
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f000 fc49 	bl	800a4bc <I2C_Disable_IRQ>

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	685a      	ldr	r2, [r3, #4]
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009c38:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	6859      	ldr	r1, [r3, #4]
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681a      	ldr	r2, [r3, #0]
 8009c44:	4b58      	ldr	r3, [pc, #352]	; (8009da8 <I2C_ITSlaveCplt+0x1a4>)
 8009c46:	400b      	ands	r3, r1
 8009c48:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f000 f9c4 	bl	8009fd8 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	0b9b      	lsrs	r3, r3, #14
 8009c54:	f003 0301 	and.w	r3, r3, #1
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d00b      	beq.n	8009c74 <I2C_ITSlaveCplt+0x70>
  {
    if (hi2c->hdmatx != NULL)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d018      	beq.n	8009c96 <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	685b      	ldr	r3, [r3, #4]
 8009c6c:	b29a      	uxth	r2, r3
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009c72:	e010      	b.n	8009c96 <I2C_ITSlaveCplt+0x92>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	0bdb      	lsrs	r3, r3, #15
 8009c78:	f003 0301 	and.w	r3, r3, #1
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d00a      	beq.n	8009c96 <I2C_ITSlaveCplt+0x92>
  {
    if (hi2c->hdmarx != NULL)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d006      	beq.n	8009c96 <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	685b      	ldr	r3, [r3, #4]
 8009c90:	b29a      	uxth	r2, r3
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	089b      	lsrs	r3, r3, #2
 8009c9a:	f003 0301 	and.w	r3, r3, #1
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d020      	beq.n	8009ce4 <I2C_ITSlaveCplt+0xe0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	f023 0304 	bic.w	r3, r3, #4
 8009ca8:	60fb      	str	r3, [r7, #12]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cb4:	b2d2      	uxtb	r2, r2
 8009cb6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cbc:	1c5a      	adds	r2, r3, #1
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d00c      	beq.n	8009ce4 <I2C_ITSlaveCplt+0xe0>
    {
      hi2c->XferSize--;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cce:	3b01      	subs	r3, #1
 8009cd0:	b29a      	uxth	r2, r3
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cda:	b29b      	uxth	r3, r3
 8009cdc:	3b01      	subs	r3, #1
 8009cde:	b29a      	uxth	r2, r3
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ce8:	b29b      	uxth	r3, r3
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d005      	beq.n	8009cfa <I2C_ITSlaveCplt+0xf6>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cf2:	f043 0204 	orr.w	r2, r3, #4
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->PreviousState = I2C_STATE_NONE;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2200      	movs	r2, #0
 8009d04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d010      	beq.n	8009d38 <I2C_ITSlaveCplt+0x134>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d1a:	4619      	mov	r1, r3
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f000 f89b 	bl	8009e58 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d28:	b2db      	uxtb	r3, r3
 8009d2a:	2b28      	cmp	r3, #40	; 0x28
 8009d2c:	d138      	bne.n	8009da0 <I2C_ITSlaveCplt+0x19c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8009d2e:	68f9      	ldr	r1, [r7, #12]
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f000 f83d 	bl	8009db0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009d36:	e033      	b.n	8009da0 <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d3c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009d40:	d011      	beq.n	8009d66 <I2C_ITSlaveCplt+0x162>
    I2C_ITSlaveSeqCplt(hi2c);
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f7ff fe85 	bl	8009a52 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	4a18      	ldr	r2, [pc, #96]	; (8009dac <I2C_ITSlaveCplt+0x1a8>)
 8009d4c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2220      	movs	r2, #32
 8009d52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2200      	movs	r2, #0
 8009d5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f7ff f94a 	bl	8008ff8 <HAL_I2C_ListenCpltCallback>
}
 8009d64:	e01c      	b.n	8009da0 <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d6c:	b2db      	uxtb	r3, r3
 8009d6e:	2b22      	cmp	r3, #34	; 0x22
 8009d70:	d10b      	bne.n	8009d8a <I2C_ITSlaveCplt+0x186>
    hi2c->State = HAL_I2C_STATE_READY;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2220      	movs	r2, #32
 8009d76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f7ff f920 	bl	8008fc8 <HAL_I2C_SlaveRxCpltCallback>
}
 8009d88:	e00a      	b.n	8009da0 <I2C_ITSlaveCplt+0x19c>
    hi2c->State = HAL_I2C_STATE_READY;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2220      	movs	r2, #32
 8009d8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2200      	movs	r2, #0
 8009d96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f7ff f90a 	bl	8008fb4 <HAL_I2C_SlaveTxCpltCallback>
}
 8009da0:	bf00      	nop
 8009da2:	3710      	adds	r7, #16
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bd80      	pop	{r7, pc}
 8009da8:	fe00e800 	.word	0xfe00e800
 8009dac:	ffff0000 	.word	0xffff0000

08009db0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b082      	sub	sp, #8
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
 8009db8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	4a25      	ldr	r2, [pc, #148]	; (8009e54 <I2C_ITListenCplt+0xa4>)
 8009dbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2220      	movs	r2, #32
 8009dca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2200      	movs	r2, #0
 8009dda:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	089b      	lsrs	r3, r3, #2
 8009de0:	f003 0301 	and.w	r3, r3, #1
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d022      	beq.n	8009e2e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009df2:	b2d2      	uxtb	r2, r2
 8009df4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dfa:	1c5a      	adds	r2, r3, #1
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d012      	beq.n	8009e2e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e0c:	3b01      	subs	r3, #1
 8009e0e:	b29a      	uxth	r2, r3
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e18:	b29b      	uxth	r3, r3
 8009e1a:	3b01      	subs	r3, #1
 8009e1c:	b29a      	uxth	r2, r3
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e26:	f043 0204 	orr.w	r2, r3, #4
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009e2e:	2107      	movs	r1, #7
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f000 fb43 	bl	800a4bc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	2210      	movs	r2, #16
 8009e3c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2200      	movs	r2, #0
 8009e42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f7ff f8d6 	bl	8008ff8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8009e4c:	bf00      	nop
 8009e4e:	3708      	adds	r7, #8
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}
 8009e54:	ffff0000 	.word	0xffff0000

08009e58 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b084      	sub	sp, #16
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
 8009e60:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009e68:	73fb      	strb	r3, [r7, #15]

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	4a55      	ldr	r2, [pc, #340]	; (8009fcc <I2C_ITError+0x174>)
 8009e76:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	431a      	orrs	r2, r3
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8009e8a:	7bfb      	ldrb	r3, [r7, #15]
 8009e8c:	2b28      	cmp	r3, #40	; 0x28
 8009e8e:	d005      	beq.n	8009e9c <I2C_ITError+0x44>
 8009e90:	7bfb      	ldrb	r3, [r7, #15]
 8009e92:	2b29      	cmp	r3, #41	; 0x29
 8009e94:	d002      	beq.n	8009e9c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8009e96:	7bfb      	ldrb	r3, [r7, #15]
 8009e98:	2b2a      	cmp	r3, #42	; 0x2a
 8009e9a:	d10e      	bne.n	8009eba <I2C_ITError+0x62>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009e9c:	2103      	movs	r1, #3
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f000 fb0c 	bl	800a4bc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2228      	movs	r2, #40	; 0x28
 8009ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	4a46      	ldr	r2, [pc, #280]	; (8009fd0 <I2C_ITError+0x178>)
 8009eb6:	635a      	str	r2, [r3, #52]	; 0x34
 8009eb8:	e013      	b.n	8009ee2 <I2C_ITError+0x8a>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009eba:	2107      	movs	r1, #7
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f000 fafd 	bl	800a4bc <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009ec8:	b2db      	uxtb	r3, r3
 8009eca:	2b60      	cmp	r3, #96	; 0x60
 8009ecc:	d003      	beq.n	8009ed6 <I2C_ITError+0x7e>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2220      	movs	r2, #32
 8009ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2200      	movs	r2, #0
 8009eda:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2200      	movs	r2, #0
 8009ee0:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009eec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009ef0:	d123      	bne.n	8009f3a <I2C_ITError+0xe2>
  {
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	681a      	ldr	r2, [r3, #0]
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009f00:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d05c      	beq.n	8009fc4 <I2C_ITError+0x16c>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f0e:	4a31      	ldr	r2, [pc, #196]	; (8009fd4 <I2C_ITError+0x17c>)
 8009f10:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2200      	movs	r2, #0
 8009f16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f7fe f8e2 	bl	80080e8 <HAL_DMA_Abort_IT>
 8009f24:	4603      	mov	r3, r0
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d04c      	beq.n	8009fc4 <I2C_ITError+0x16c>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f30:	687a      	ldr	r2, [r7, #4]
 8009f32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009f34:	4610      	mov	r0, r2
 8009f36:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009f38:	e044      	b.n	8009fc4 <I2C_ITError+0x16c>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009f44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f48:	d123      	bne.n	8009f92 <I2C_ITError+0x13a>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	681a      	ldr	r2, [r3, #0]
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009f58:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d030      	beq.n	8009fc4 <I2C_ITError+0x16c>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f66:	4a1b      	ldr	r2, [pc, #108]	; (8009fd4 <I2C_ITError+0x17c>)
 8009f68:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f76:	4618      	mov	r0, r3
 8009f78:	f7fe f8b6 	bl	80080e8 <HAL_DMA_Abort_IT>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d020      	beq.n	8009fc4 <I2C_ITError+0x16c>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f88:	687a      	ldr	r2, [r7, #4]
 8009f8a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009f8c:	4610      	mov	r0, r2
 8009f8e:	4798      	blx	r3
}
 8009f90:	e018      	b.n	8009fc4 <I2C_ITError+0x16c>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009f98:	b2db      	uxtb	r3, r3
 8009f9a:	2b60      	cmp	r3, #96	; 0x60
 8009f9c:	d10b      	bne.n	8009fb6 <I2C_ITError+0x15e>
    hi2c->State = HAL_I2C_STATE_READY;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2220      	movs	r2, #32
 8009fa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f7ff f84a 	bl	8009048 <HAL_I2C_AbortCpltCallback>
}
 8009fb4:	e006      	b.n	8009fc4 <I2C_ITError+0x16c>
    __HAL_UNLOCK(hi2c);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f7ff f838 	bl	8009034 <HAL_I2C_ErrorCallback>
}
 8009fc4:	bf00      	nop
 8009fc6:	3710      	adds	r7, #16
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	bd80      	pop	{r7, pc}
 8009fcc:	ffff0000 	.word	0xffff0000
 8009fd0:	080092af 	.word	0x080092af
 8009fd4:	0800a021 	.word	0x0800a021

08009fd8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b083      	sub	sp, #12
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	699b      	ldr	r3, [r3, #24]
 8009fe6:	f003 0302 	and.w	r3, r3, #2
 8009fea:	2b02      	cmp	r3, #2
 8009fec:	d103      	bne.n	8009ff6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	699b      	ldr	r3, [r3, #24]
 8009ffc:	f003 0301 	and.w	r3, r3, #1
 800a000:	2b01      	cmp	r3, #1
 800a002:	d007      	beq.n	800a014 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	699a      	ldr	r2, [r3, #24]
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	f042 0201 	orr.w	r2, r2, #1
 800a012:	619a      	str	r2, [r3, #24]
  }
}
 800a014:	bf00      	nop
 800a016:	370c      	adds	r7, #12
 800a018:	46bd      	mov	sp, r7
 800a01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01e:	4770      	bx	lr

0800a020 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b084      	sub	sp, #16
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a02c:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a032:	2200      	movs	r2, #0
 800a034:	639a      	str	r2, [r3, #56]	; 0x38
  hi2c->hdmarx->XferAbortCallback = NULL;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a03a:	2200      	movs	r2, #0
 800a03c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a044:	b2db      	uxtb	r3, r3
 800a046:	2b60      	cmp	r3, #96	; 0x60
 800a048:	d107      	bne.n	800a05a <I2C_DMAAbort+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	2220      	movs	r2, #32
 800a04e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800a052:	68f8      	ldr	r0, [r7, #12]
 800a054:	f7fe fff8 	bl	8009048 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a058:	e002      	b.n	800a060 <I2C_DMAAbort+0x40>
    HAL_I2C_ErrorCallback(hi2c);
 800a05a:	68f8      	ldr	r0, [r7, #12]
 800a05c:	f7fe ffea 	bl	8009034 <HAL_I2C_ErrorCallback>
}
 800a060:	bf00      	nop
 800a062:	3710      	adds	r7, #16
 800a064:	46bd      	mov	sp, r7
 800a066:	bd80      	pop	{r7, pc}

0800a068 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b084      	sub	sp, #16
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	60f8      	str	r0, [r7, #12]
 800a070:	60b9      	str	r1, [r7, #8]
 800a072:	603b      	str	r3, [r7, #0]
 800a074:	4613      	mov	r3, r2
 800a076:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a078:	e022      	b.n	800a0c0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a080:	d01e      	beq.n	800a0c0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a082:	f7fc f925 	bl	80062d0 <HAL_GetTick>
 800a086:	4602      	mov	r2, r0
 800a088:	69bb      	ldr	r3, [r7, #24]
 800a08a:	1ad3      	subs	r3, r2, r3
 800a08c:	683a      	ldr	r2, [r7, #0]
 800a08e:	429a      	cmp	r2, r3
 800a090:	d302      	bcc.n	800a098 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d113      	bne.n	800a0c0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a09c:	f043 0220 	orr.w	r2, r3, #32
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	2220      	movs	r2, #32
 800a0a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800a0bc:	2301      	movs	r3, #1
 800a0be:	e00f      	b.n	800a0e0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	699a      	ldr	r2, [r3, #24]
 800a0c6:	68bb      	ldr	r3, [r7, #8]
 800a0c8:	4013      	ands	r3, r2
 800a0ca:	68ba      	ldr	r2, [r7, #8]
 800a0cc:	429a      	cmp	r2, r3
 800a0ce:	bf0c      	ite	eq
 800a0d0:	2301      	moveq	r3, #1
 800a0d2:	2300      	movne	r3, #0
 800a0d4:	b2db      	uxtb	r3, r3
 800a0d6:	461a      	mov	r2, r3
 800a0d8:	79fb      	ldrb	r3, [r7, #7]
 800a0da:	429a      	cmp	r2, r3
 800a0dc:	d0cd      	beq.n	800a07a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a0de:	2300      	movs	r3, #0
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	3710      	adds	r7, #16
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}

0800a0e8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b084      	sub	sp, #16
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	60f8      	str	r0, [r7, #12]
 800a0f0:	60b9      	str	r1, [r7, #8]
 800a0f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a0f4:	e02c      	b.n	800a150 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a0f6:	687a      	ldr	r2, [r7, #4]
 800a0f8:	68b9      	ldr	r1, [r7, #8]
 800a0fa:	68f8      	ldr	r0, [r7, #12]
 800a0fc:	f000 f8dc 	bl	800a2b8 <I2C_IsAcknowledgeFailed>
 800a100:	4603      	mov	r3, r0
 800a102:	2b00      	cmp	r3, #0
 800a104:	d001      	beq.n	800a10a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a106:	2301      	movs	r3, #1
 800a108:	e02a      	b.n	800a160 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a110:	d01e      	beq.n	800a150 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a112:	f7fc f8dd 	bl	80062d0 <HAL_GetTick>
 800a116:	4602      	mov	r2, r0
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	1ad3      	subs	r3, r2, r3
 800a11c:	68ba      	ldr	r2, [r7, #8]
 800a11e:	429a      	cmp	r2, r3
 800a120:	d302      	bcc.n	800a128 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d113      	bne.n	800a150 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a12c:	f043 0220 	orr.w	r2, r3, #32
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	2220      	movs	r2, #32
 800a138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	2200      	movs	r2, #0
 800a140:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	2200      	movs	r2, #0
 800a148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a14c:	2301      	movs	r3, #1
 800a14e:	e007      	b.n	800a160 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	699b      	ldr	r3, [r3, #24]
 800a156:	f003 0302 	and.w	r3, r3, #2
 800a15a:	2b02      	cmp	r3, #2
 800a15c:	d1cb      	bne.n	800a0f6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a15e:	2300      	movs	r3, #0
}
 800a160:	4618      	mov	r0, r3
 800a162:	3710      	adds	r7, #16
 800a164:	46bd      	mov	sp, r7
 800a166:	bd80      	pop	{r7, pc}

0800a168 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b084      	sub	sp, #16
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	60f8      	str	r0, [r7, #12]
 800a170:	60b9      	str	r1, [r7, #8]
 800a172:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a174:	e028      	b.n	800a1c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a176:	687a      	ldr	r2, [r7, #4]
 800a178:	68b9      	ldr	r1, [r7, #8]
 800a17a:	68f8      	ldr	r0, [r7, #12]
 800a17c:	f000 f89c 	bl	800a2b8 <I2C_IsAcknowledgeFailed>
 800a180:	4603      	mov	r3, r0
 800a182:	2b00      	cmp	r3, #0
 800a184:	d001      	beq.n	800a18a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a186:	2301      	movs	r3, #1
 800a188:	e026      	b.n	800a1d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a18a:	f7fc f8a1 	bl	80062d0 <HAL_GetTick>
 800a18e:	4602      	mov	r2, r0
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	1ad3      	subs	r3, r2, r3
 800a194:	68ba      	ldr	r2, [r7, #8]
 800a196:	429a      	cmp	r2, r3
 800a198:	d302      	bcc.n	800a1a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d113      	bne.n	800a1c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1a4:	f043 0220 	orr.w	r2, r3, #32
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	2220      	movs	r2, #32
 800a1b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	2200      	movs	r2, #0
 800a1c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	e007      	b.n	800a1d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	699b      	ldr	r3, [r3, #24]
 800a1ce:	f003 0320 	and.w	r3, r3, #32
 800a1d2:	2b20      	cmp	r3, #32
 800a1d4:	d1cf      	bne.n	800a176 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a1d6:	2300      	movs	r3, #0
}
 800a1d8:	4618      	mov	r0, r3
 800a1da:	3710      	adds	r7, #16
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bd80      	pop	{r7, pc}

0800a1e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b084      	sub	sp, #16
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	60f8      	str	r0, [r7, #12]
 800a1e8:	60b9      	str	r1, [r7, #8]
 800a1ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a1ec:	e055      	b.n	800a29a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a1ee:	687a      	ldr	r2, [r7, #4]
 800a1f0:	68b9      	ldr	r1, [r7, #8]
 800a1f2:	68f8      	ldr	r0, [r7, #12]
 800a1f4:	f000 f860 	bl	800a2b8 <I2C_IsAcknowledgeFailed>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d001      	beq.n	800a202 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a1fe:	2301      	movs	r3, #1
 800a200:	e053      	b.n	800a2aa <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	699b      	ldr	r3, [r3, #24]
 800a208:	f003 0320 	and.w	r3, r3, #32
 800a20c:	2b20      	cmp	r3, #32
 800a20e:	d129      	bne.n	800a264 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	699b      	ldr	r3, [r3, #24]
 800a216:	f003 0304 	and.w	r3, r3, #4
 800a21a:	2b04      	cmp	r3, #4
 800a21c:	d105      	bne.n	800a22a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a222:	2b00      	cmp	r3, #0
 800a224:	d001      	beq.n	800a22a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800a226:	2300      	movs	r3, #0
 800a228:	e03f      	b.n	800a2aa <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	2220      	movs	r2, #32
 800a230:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	6859      	ldr	r1, [r3, #4]
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	681a      	ldr	r2, [r3, #0]
 800a23c:	4b1d      	ldr	r3, [pc, #116]	; (800a2b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800a23e:	400b      	ands	r3, r1
 800a240:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	2200      	movs	r2, #0
 800a246:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	2220      	movs	r2, #32
 800a24c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	2200      	movs	r2, #0
 800a254:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	2200      	movs	r2, #0
 800a25c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a260:	2301      	movs	r3, #1
 800a262:	e022      	b.n	800a2aa <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a264:	f7fc f834 	bl	80062d0 <HAL_GetTick>
 800a268:	4602      	mov	r2, r0
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	1ad3      	subs	r3, r2, r3
 800a26e:	68ba      	ldr	r2, [r7, #8]
 800a270:	429a      	cmp	r2, r3
 800a272:	d302      	bcc.n	800a27a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d10f      	bne.n	800a29a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a27e:	f043 0220 	orr.w	r2, r3, #32
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	2220      	movs	r2, #32
 800a28a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	2200      	movs	r2, #0
 800a292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a296:	2301      	movs	r3, #1
 800a298:	e007      	b.n	800a2aa <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	699b      	ldr	r3, [r3, #24]
 800a2a0:	f003 0304 	and.w	r3, r3, #4
 800a2a4:	2b04      	cmp	r3, #4
 800a2a6:	d1a2      	bne.n	800a1ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a2a8:	2300      	movs	r3, #0
}
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	3710      	adds	r7, #16
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}
 800a2b2:	bf00      	nop
 800a2b4:	fe00e800 	.word	0xfe00e800

0800a2b8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b084      	sub	sp, #16
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	60f8      	str	r0, [r7, #12]
 800a2c0:	60b9      	str	r1, [r7, #8]
 800a2c2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	699b      	ldr	r3, [r3, #24]
 800a2ca:	f003 0310 	and.w	r3, r3, #16
 800a2ce:	2b10      	cmp	r3, #16
 800a2d0:	d151      	bne.n	800a376 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a2d2:	e022      	b.n	800a31a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2da:	d01e      	beq.n	800a31a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a2dc:	f7fb fff8 	bl	80062d0 <HAL_GetTick>
 800a2e0:	4602      	mov	r2, r0
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	1ad3      	subs	r3, r2, r3
 800a2e6:	68ba      	ldr	r2, [r7, #8]
 800a2e8:	429a      	cmp	r2, r3
 800a2ea:	d302      	bcc.n	800a2f2 <I2C_IsAcknowledgeFailed+0x3a>
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d113      	bne.n	800a31a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2f6:	f043 0220 	orr.w	r2, r3, #32
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	2220      	movs	r2, #32
 800a302:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	2200      	movs	r2, #0
 800a30a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	2200      	movs	r2, #0
 800a312:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800a316:	2301      	movs	r3, #1
 800a318:	e02e      	b.n	800a378 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	699b      	ldr	r3, [r3, #24]
 800a320:	f003 0320 	and.w	r3, r3, #32
 800a324:	2b20      	cmp	r3, #32
 800a326:	d1d5      	bne.n	800a2d4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	2210      	movs	r2, #16
 800a32e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	2220      	movs	r2, #32
 800a336:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a338:	68f8      	ldr	r0, [r7, #12]
 800a33a:	f7ff fe4d 	bl	8009fd8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	6859      	ldr	r1, [r3, #4]
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	681a      	ldr	r2, [r3, #0]
 800a348:	4b0d      	ldr	r3, [pc, #52]	; (800a380 <I2C_IsAcknowledgeFailed+0xc8>)
 800a34a:	400b      	ands	r3, r1
 800a34c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a352:	f043 0204 	orr.w	r2, r3, #4
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	2220      	movs	r2, #32
 800a35e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	2200      	movs	r2, #0
 800a366:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	2200      	movs	r2, #0
 800a36e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800a372:	2301      	movs	r3, #1
 800a374:	e000      	b.n	800a378 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800a376:	2300      	movs	r3, #0
}
 800a378:	4618      	mov	r0, r3
 800a37a:	3710      	adds	r7, #16
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}
 800a380:	fe00e800 	.word	0xfe00e800

0800a384 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800a384:	b480      	push	{r7}
 800a386:	b085      	sub	sp, #20
 800a388:	af00      	add	r7, sp, #0
 800a38a:	60f8      	str	r0, [r7, #12]
 800a38c:	607b      	str	r3, [r7, #4]
 800a38e:	460b      	mov	r3, r1
 800a390:	817b      	strh	r3, [r7, #10]
 800a392:	4613      	mov	r3, r2
 800a394:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	685a      	ldr	r2, [r3, #4]
 800a39c:	69bb      	ldr	r3, [r7, #24]
 800a39e:	0d5b      	lsrs	r3, r3, #21
 800a3a0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800a3a4:	4b0d      	ldr	r3, [pc, #52]	; (800a3dc <I2C_TransferConfig+0x58>)
 800a3a6:	430b      	orrs	r3, r1
 800a3a8:	43db      	mvns	r3, r3
 800a3aa:	ea02 0103 	and.w	r1, r2, r3
 800a3ae:	897b      	ldrh	r3, [r7, #10]
 800a3b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a3b4:	7a7b      	ldrb	r3, [r7, #9]
 800a3b6:	041b      	lsls	r3, r3, #16
 800a3b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a3bc:	431a      	orrs	r2, r3
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	431a      	orrs	r2, r3
 800a3c2:	69bb      	ldr	r3, [r7, #24]
 800a3c4:	431a      	orrs	r2, r3
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	430a      	orrs	r2, r1
 800a3cc:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800a3ce:	bf00      	nop
 800a3d0:	3714      	adds	r7, #20
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d8:	4770      	bx	lr
 800a3da:	bf00      	nop
 800a3dc:	03ff63ff 	.word	0x03ff63ff

0800a3e0 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800a3e0:	b480      	push	{r7}
 800a3e2:	b085      	sub	sp, #20
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
 800a3e8:	460b      	mov	r3, r1
 800a3ea:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3f4:	4a2f      	ldr	r2, [pc, #188]	; (800a4b4 <I2C_Enable_IRQ+0xd4>)
 800a3f6:	4293      	cmp	r3, r2
 800a3f8:	d004      	beq.n	800a404 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800a3fe:	4a2e      	ldr	r2, [pc, #184]	; (800a4b8 <I2C_Enable_IRQ+0xd8>)
 800a400:	4293      	cmp	r3, r2
 800a402:	d124      	bne.n	800a44e <I2C_Enable_IRQ+0x6e>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800a404:	887b      	ldrh	r3, [r7, #2]
 800a406:	f003 0304 	and.w	r3, r3, #4
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d003      	beq.n	800a416 <I2C_Enable_IRQ+0x36>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800a414:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 800a416:	887b      	ldrh	r3, [r7, #2]
 800a418:	f003 0311 	and.w	r3, r3, #17
 800a41c:	2b11      	cmp	r3, #17
 800a41e:	d103      	bne.n	800a428 <I2C_Enable_IRQ+0x48>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800a426:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800a428:	887b      	ldrh	r3, [r7, #2]
 800a42a:	f003 0312 	and.w	r3, r3, #18
 800a42e:	2b12      	cmp	r3, #18
 800a430:	d103      	bne.n	800a43a <I2C_Enable_IRQ+0x5a>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	f043 0320 	orr.w	r3, r3, #32
 800a438:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 800a43a:	887b      	ldrh	r3, [r7, #2]
 800a43c:	f003 0312 	and.w	r3, r3, #18
 800a440:	2b12      	cmp	r3, #18
 800a442:	d128      	bne.n	800a496 <I2C_Enable_IRQ+0xb6>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a44a:	60fb      	str	r3, [r7, #12]
    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 800a44c:	e023      	b.n	800a496 <I2C_Enable_IRQ+0xb6>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800a44e:	887b      	ldrh	r3, [r7, #2]
 800a450:	f003 0304 	and.w	r3, r3, #4
 800a454:	2b00      	cmp	r3, #0
 800a456:	d003      	beq.n	800a460 <I2C_Enable_IRQ+0x80>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800a45e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800a460:	887b      	ldrh	r3, [r7, #2]
 800a462:	f003 0301 	and.w	r3, r3, #1
 800a466:	2b00      	cmp	r3, #0
 800a468:	d003      	beq.n	800a472 <I2C_Enable_IRQ+0x92>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800a470:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800a472:	887b      	ldrh	r3, [r7, #2]
 800a474:	f003 0302 	and.w	r3, r3, #2
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d003      	beq.n	800a484 <I2C_Enable_IRQ+0xa4>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800a482:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800a484:	887b      	ldrh	r3, [r7, #2]
 800a486:	f003 0312 	and.w	r3, r3, #18
 800a48a:	2b12      	cmp	r3, #18
 800a48c:	d103      	bne.n	800a496 <I2C_Enable_IRQ+0xb6>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	f043 0320 	orr.w	r3, r3, #32
 800a494:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	6819      	ldr	r1, [r3, #0]
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	68fa      	ldr	r2, [r7, #12]
 800a4a2:	430a      	orrs	r2, r1
 800a4a4:	601a      	str	r2, [r3, #0]
}
 800a4a6:	bf00      	nop
 800a4a8:	3714      	adds	r7, #20
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b0:	4770      	bx	lr
 800a4b2:	bf00      	nop
 800a4b4:	080094b5 	.word	0x080094b5
 800a4b8:	0800969b 	.word	0x0800969b

0800a4bc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800a4bc:	b480      	push	{r7}
 800a4be:	b085      	sub	sp, #20
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
 800a4c4:	460b      	mov	r3, r1
 800a4c6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800a4cc:	887b      	ldrh	r3, [r7, #2]
 800a4ce:	f003 0301 	and.w	r3, r3, #1
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d00f      	beq.n	800a4f6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800a4dc:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a4e4:	b2db      	uxtb	r3, r3
 800a4e6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a4ea:	2b28      	cmp	r3, #40	; 0x28
 800a4ec:	d003      	beq.n	800a4f6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800a4f4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800a4f6:	887b      	ldrh	r3, [r7, #2]
 800a4f8:	f003 0302 	and.w	r3, r3, #2
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d00f      	beq.n	800a520 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800a506:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a50e:	b2db      	uxtb	r3, r3
 800a510:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a514:	2b28      	cmp	r3, #40	; 0x28
 800a516:	d003      	beq.n	800a520 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800a51e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800a520:	887b      	ldrh	r3, [r7, #2]
 800a522:	f003 0304 	and.w	r3, r3, #4
 800a526:	2b00      	cmp	r3, #0
 800a528:	d003      	beq.n	800a532 <I2C_Disable_IRQ+0x76>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800a530:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 800a532:	887b      	ldrh	r3, [r7, #2]
 800a534:	f003 0311 	and.w	r3, r3, #17
 800a538:	2b11      	cmp	r3, #17
 800a53a:	d103      	bne.n	800a544 <I2C_Disable_IRQ+0x88>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800a542:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800a544:	887b      	ldrh	r3, [r7, #2]
 800a546:	f003 0312 	and.w	r3, r3, #18
 800a54a:	2b12      	cmp	r3, #18
 800a54c:	d103      	bne.n	800a556 <I2C_Disable_IRQ+0x9a>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	f043 0320 	orr.w	r3, r3, #32
 800a554:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 800a556:	887b      	ldrh	r3, [r7, #2]
 800a558:	f003 0312 	and.w	r3, r3, #18
 800a55c:	2b12      	cmp	r3, #18
 800a55e:	d103      	bne.n	800a568 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a566:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	6819      	ldr	r1, [r3, #0]
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	43da      	mvns	r2, r3
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	400a      	ands	r2, r1
 800a578:	601a      	str	r2, [r3, #0]
}
 800a57a:	bf00      	nop
 800a57c:	3714      	adds	r7, #20
 800a57e:	46bd      	mov	sp, r7
 800a580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a584:	4770      	bx	lr

0800a586 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a586:	b480      	push	{r7}
 800a588:	b083      	sub	sp, #12
 800a58a:	af00      	add	r7, sp, #0
 800a58c:	6078      	str	r0, [r7, #4]
 800a58e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a596:	b2db      	uxtb	r3, r3
 800a598:	2b20      	cmp	r3, #32
 800a59a:	d138      	bne.n	800a60e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a5a2:	2b01      	cmp	r3, #1
 800a5a4:	d101      	bne.n	800a5aa <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a5a6:	2302      	movs	r3, #2
 800a5a8:	e032      	b.n	800a610 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2201      	movs	r2, #1
 800a5ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2224      	movs	r2, #36	; 0x24
 800a5b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	681a      	ldr	r2, [r3, #0]
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f022 0201 	bic.w	r2, r2, #1
 800a5c8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	681a      	ldr	r2, [r3, #0]
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a5d8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	6819      	ldr	r1, [r3, #0]
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	683a      	ldr	r2, [r7, #0]
 800a5e6:	430a      	orrs	r2, r1
 800a5e8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	681a      	ldr	r2, [r3, #0]
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f042 0201 	orr.w	r2, r2, #1
 800a5f8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2220      	movs	r2, #32
 800a5fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2200      	movs	r2, #0
 800a606:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a60a:	2300      	movs	r3, #0
 800a60c:	e000      	b.n	800a610 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a60e:	2302      	movs	r3, #2
  }
}
 800a610:	4618      	mov	r0, r3
 800a612:	370c      	adds	r7, #12
 800a614:	46bd      	mov	sp, r7
 800a616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61a:	4770      	bx	lr

0800a61c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a61c:	b480      	push	{r7}
 800a61e:	b085      	sub	sp, #20
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
 800a624:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a62c:	b2db      	uxtb	r3, r3
 800a62e:	2b20      	cmp	r3, #32
 800a630:	d139      	bne.n	800a6a6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a638:	2b01      	cmp	r3, #1
 800a63a:	d101      	bne.n	800a640 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a63c:	2302      	movs	r3, #2
 800a63e:	e033      	b.n	800a6a8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2201      	movs	r2, #1
 800a644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2224      	movs	r2, #36	; 0x24
 800a64c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	681a      	ldr	r2, [r3, #0]
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	f022 0201 	bic.w	r2, r2, #1
 800a65e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a66e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	021b      	lsls	r3, r3, #8
 800a674:	68fa      	ldr	r2, [r7, #12]
 800a676:	4313      	orrs	r3, r2
 800a678:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	68fa      	ldr	r2, [r7, #12]
 800a680:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	681a      	ldr	r2, [r3, #0]
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	f042 0201 	orr.w	r2, r2, #1
 800a690:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2220      	movs	r2, #32
 800a696:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2200      	movs	r2, #0
 800a69e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	e000      	b.n	800a6a8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a6a6:	2302      	movs	r3, #2
  }
}
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	3714      	adds	r7, #20
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b2:	4770      	bx	lr

0800a6b4 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b084      	sub	sp, #16
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d101      	bne.n	800a6c6 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	e038      	b.n	800a738 <HAL_IWDG_Init+0x84>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800a6ce:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	f245 5255 	movw	r2, #21845	; 0x5555
 800a6d8:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	687a      	ldr	r2, [r7, #4]
 800a6e0:	6852      	ldr	r2, [r2, #4]
 800a6e2:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	687a      	ldr	r2, [r7, #4]
 800a6ea:	6892      	ldr	r2, [r2, #8]
 800a6ec:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800a6ee:	f7fb fdef 	bl	80062d0 <HAL_GetTick>
 800a6f2:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 800a6f4:	e008      	b.n	800a708 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800a6f6:	f7fb fdeb 	bl	80062d0 <HAL_GetTick>
 800a6fa:	4602      	mov	r2, r0
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	1ad3      	subs	r3, r2, r3
 800a700:	2b30      	cmp	r3, #48	; 0x30
 800a702:	d901      	bls.n	800a708 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 800a704:	2303      	movs	r3, #3
 800a706:	e017      	b.n	800a738 <HAL_IWDG_Init+0x84>
  while (hiwdg->Instance->SR != 0x00u)
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	68db      	ldr	r3, [r3, #12]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d1f1      	bne.n	800a6f6 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	691a      	ldr	r2, [r3, #16]
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	68db      	ldr	r3, [r3, #12]
 800a71c:	429a      	cmp	r2, r3
 800a71e:	d005      	beq.n	800a72c <HAL_IWDG_Init+0x78>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	687a      	ldr	r2, [r7, #4]
 800a726:	68d2      	ldr	r2, [r2, #12]
 800a728:	611a      	str	r2, [r3, #16]
 800a72a:	e004      	b.n	800a736 <HAL_IWDG_Init+0x82>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800a734:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a736:	2300      	movs	r3, #0
}
 800a738:	4618      	mov	r0, r3
 800a73a:	3710      	adds	r7, #16
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}

0800a740 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800a740:	b480      	push	{r7}
 800a742:	b083      	sub	sp, #12
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800a750:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a752:	2300      	movs	r3, #0
}
 800a754:	4618      	mov	r0, r3
 800a756:	370c      	adds	r7, #12
 800a758:	46bd      	mov	sp, r7
 800a75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75e:	4770      	bx	lr

0800a760 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800a760:	b480      	push	{r7}
 800a762:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a764:	4b05      	ldr	r3, [pc, #20]	; (800a77c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	4a04      	ldr	r2, [pc, #16]	; (800a77c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a76a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a76e:	6013      	str	r3, [r2, #0]
}
 800a770:	bf00      	nop
 800a772:	46bd      	mov	sp, r7
 800a774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a778:	4770      	bx	lr
 800a77a:	bf00      	nop
 800a77c:	58000400 	.word	0x58000400

0800a780 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800a780:	b480      	push	{r7}
 800a782:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 800a784:	4b04      	ldr	r3, [pc, #16]	; (800a798 <HAL_PWREx_GetVoltageRange+0x18>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	46bd      	mov	sp, r7
 800a790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a794:	4770      	bx	lr
 800a796:	bf00      	nop
 800a798:	58000400 	.word	0x58000400

0800a79c <LL_RCC_HSE_IsEnabledDiv2>:
{
 800a79c:	b480      	push	{r7}
 800a79e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800a7a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a7aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a7ae:	d101      	bne.n	800a7b4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800a7b0:	2301      	movs	r3, #1
 800a7b2:	e000      	b.n	800a7b6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800a7b4:	2300      	movs	r3, #0
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7be:	4770      	bx	lr

0800a7c0 <LL_RCC_HSE_EnableBypass>:
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 800a7c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a7ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a7d2:	6013      	str	r3, [r2, #0]
}
 800a7d4:	bf00      	nop
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7dc:	4770      	bx	lr

0800a7de <LL_RCC_HSE_DisableBypass>:
{
 800a7de:	b480      	push	{r7}
 800a7e0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 800a7e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a7ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a7f0:	6013      	str	r3, [r2, #0]
}
 800a7f2:	bf00      	nop
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fa:	4770      	bx	lr

0800a7fc <LL_RCC_HSE_Enable>:
{
 800a7fc:	b480      	push	{r7}
 800a7fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800a800:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a80a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a80e:	6013      	str	r3, [r2, #0]
}
 800a810:	bf00      	nop
 800a812:	46bd      	mov	sp, r7
 800a814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a818:	4770      	bx	lr

0800a81a <LL_RCC_HSE_Disable>:
{
 800a81a:	b480      	push	{r7}
 800a81c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800a81e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a828:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a82c:	6013      	str	r3, [r2, #0]
}
 800a82e:	bf00      	nop
 800a830:	46bd      	mov	sp, r7
 800a832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a836:	4770      	bx	lr

0800a838 <LL_RCC_HSE_IsReady>:
{
 800a838:	b480      	push	{r7}
 800a83a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800a83c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a846:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a84a:	d101      	bne.n	800a850 <LL_RCC_HSE_IsReady+0x18>
 800a84c:	2301      	movs	r3, #1
 800a84e:	e000      	b.n	800a852 <LL_RCC_HSE_IsReady+0x1a>
 800a850:	2300      	movs	r3, #0
}
 800a852:	4618      	mov	r0, r3
 800a854:	46bd      	mov	sp, r7
 800a856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85a:	4770      	bx	lr

0800a85c <LL_RCC_HSI_Enable>:
{
 800a85c:	b480      	push	{r7}
 800a85e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800a860:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a86a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a86e:	6013      	str	r3, [r2, #0]
}
 800a870:	bf00      	nop
 800a872:	46bd      	mov	sp, r7
 800a874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a878:	4770      	bx	lr

0800a87a <LL_RCC_HSI_Disable>:
{
 800a87a:	b480      	push	{r7}
 800a87c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800a87e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a888:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a88c:	6013      	str	r3, [r2, #0]
}
 800a88e:	bf00      	nop
 800a890:	46bd      	mov	sp, r7
 800a892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a896:	4770      	bx	lr

0800a898 <LL_RCC_HSI_IsReady>:
{
 800a898:	b480      	push	{r7}
 800a89a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800a89c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a8a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a8aa:	d101      	bne.n	800a8b0 <LL_RCC_HSI_IsReady+0x18>
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	e000      	b.n	800a8b2 <LL_RCC_HSI_IsReady+0x1a>
 800a8b0:	2300      	movs	r3, #0
}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ba:	4770      	bx	lr

0800a8bc <LL_RCC_HSI_SetCalibTrimming>:
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b083      	sub	sp, #12
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800a8c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a8c8:	685b      	ldr	r3, [r3, #4]
 800a8ca:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	061b      	lsls	r3, r3, #24
 800a8d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a8d6:	4313      	orrs	r3, r2
 800a8d8:	604b      	str	r3, [r1, #4]
}
 800a8da:	bf00      	nop
 800a8dc:	370c      	adds	r7, #12
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e4:	4770      	bx	lr

0800a8e6 <LL_RCC_HSI48_Enable>:
{
 800a8e6:	b480      	push	{r7}
 800a8e8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800a8ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a8ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a8f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a8f6:	f043 0301 	orr.w	r3, r3, #1
 800a8fa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800a8fe:	bf00      	nop
 800a900:	46bd      	mov	sp, r7
 800a902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a906:	4770      	bx	lr

0800a908 <LL_RCC_HSI48_Disable>:
{
 800a908:	b480      	push	{r7}
 800a90a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800a90c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a910:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a914:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a918:	f023 0301 	bic.w	r3, r3, #1
 800a91c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800a920:	bf00      	nop
 800a922:	46bd      	mov	sp, r7
 800a924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a928:	4770      	bx	lr

0800a92a <LL_RCC_HSI48_IsReady>:
{
 800a92a:	b480      	push	{r7}
 800a92c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800a92e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a932:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a936:	f003 0302 	and.w	r3, r3, #2
 800a93a:	2b02      	cmp	r3, #2
 800a93c:	d101      	bne.n	800a942 <LL_RCC_HSI48_IsReady+0x18>
 800a93e:	2301      	movs	r3, #1
 800a940:	e000      	b.n	800a944 <LL_RCC_HSI48_IsReady+0x1a>
 800a942:	2300      	movs	r3, #0
}
 800a944:	4618      	mov	r0, r3
 800a946:	46bd      	mov	sp, r7
 800a948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94c:	4770      	bx	lr

0800a94e <LL_RCC_LSE_Enable>:
{
 800a94e:	b480      	push	{r7}
 800a950:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a952:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a95a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a95e:	f043 0301 	orr.w	r3, r3, #1
 800a962:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800a966:	bf00      	nop
 800a968:	46bd      	mov	sp, r7
 800a96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96e:	4770      	bx	lr

0800a970 <LL_RCC_LSE_Disable>:
{
 800a970:	b480      	push	{r7}
 800a972:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a974:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a97c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a980:	f023 0301 	bic.w	r3, r3, #1
 800a984:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800a988:	bf00      	nop
 800a98a:	46bd      	mov	sp, r7
 800a98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a990:	4770      	bx	lr

0800a992 <LL_RCC_LSE_EnableBypass>:
{
 800a992:	b480      	push	{r7}
 800a994:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a996:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a99a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a99e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a9a2:	f043 0304 	orr.w	r3, r3, #4
 800a9a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800a9aa:	bf00      	nop
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b2:	4770      	bx	lr

0800a9b4 <LL_RCC_LSE_DisableBypass>:
{
 800a9b4:	b480      	push	{r7}
 800a9b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a9b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a9bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a9c4:	f023 0304 	bic.w	r3, r3, #4
 800a9c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800a9cc:	bf00      	nop
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d4:	4770      	bx	lr

0800a9d6 <LL_RCC_LSE_IsReady>:
{
 800a9d6:	b480      	push	{r7}
 800a9d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800a9da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a9de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9e2:	f003 0302 	and.w	r3, r3, #2
 800a9e6:	2b02      	cmp	r3, #2
 800a9e8:	d101      	bne.n	800a9ee <LL_RCC_LSE_IsReady+0x18>
 800a9ea:	2301      	movs	r3, #1
 800a9ec:	e000      	b.n	800a9f0 <LL_RCC_LSE_IsReady+0x1a>
 800a9ee:	2300      	movs	r3, #0
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f8:	4770      	bx	lr

0800a9fa <LL_RCC_LSI1_Enable>:
{
 800a9fa:	b480      	push	{r7}
 800a9fc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800a9fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aa02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aa06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800aa0a:	f043 0301 	orr.w	r3, r3, #1
 800aa0e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800aa12:	bf00      	nop
 800aa14:	46bd      	mov	sp, r7
 800aa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1a:	4770      	bx	lr

0800aa1c <LL_RCC_LSI1_Disable>:
{
 800aa1c:	b480      	push	{r7}
 800aa1e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800aa20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aa24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aa28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800aa2c:	f023 0301 	bic.w	r3, r3, #1
 800aa30:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800aa34:	bf00      	nop
 800aa36:	46bd      	mov	sp, r7
 800aa38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3c:	4770      	bx	lr

0800aa3e <LL_RCC_LSI1_IsReady>:
{
 800aa3e:	b480      	push	{r7}
 800aa40:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800aa42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aa46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aa4a:	f003 0302 	and.w	r3, r3, #2
 800aa4e:	2b02      	cmp	r3, #2
 800aa50:	d101      	bne.n	800aa56 <LL_RCC_LSI1_IsReady+0x18>
 800aa52:	2301      	movs	r3, #1
 800aa54:	e000      	b.n	800aa58 <LL_RCC_LSI1_IsReady+0x1a>
 800aa56:	2300      	movs	r3, #0
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa60:	4770      	bx	lr

0800aa62 <LL_RCC_LSI2_Enable>:
{
 800aa62:	b480      	push	{r7}
 800aa64:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800aa66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aa6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aa6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800aa72:	f043 0304 	orr.w	r3, r3, #4
 800aa76:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800aa7a:	bf00      	nop
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa82:	4770      	bx	lr

0800aa84 <LL_RCC_LSI2_Disable>:
{
 800aa84:	b480      	push	{r7}
 800aa86:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800aa88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aa8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aa90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800aa94:	f023 0304 	bic.w	r3, r3, #4
 800aa98:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800aa9c:	bf00      	nop
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa4:	4770      	bx	lr

0800aaa6 <LL_RCC_LSI2_IsReady>:
{
 800aaa6:	b480      	push	{r7}
 800aaa8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800aaaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aaae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aab2:	f003 0308 	and.w	r3, r3, #8
 800aab6:	2b08      	cmp	r3, #8
 800aab8:	d101      	bne.n	800aabe <LL_RCC_LSI2_IsReady+0x18>
 800aaba:	2301      	movs	r3, #1
 800aabc:	e000      	b.n	800aac0 <LL_RCC_LSI2_IsReady+0x1a>
 800aabe:	2300      	movs	r3, #0
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	46bd      	mov	sp, r7
 800aac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac8:	4770      	bx	lr

0800aaca <LL_RCC_LSI2_SetTrimming>:
{
 800aaca:	b480      	push	{r7}
 800aacc:	b083      	sub	sp, #12
 800aace:	af00      	add	r7, sp, #0
 800aad0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800aad2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aad6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aada:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	021b      	lsls	r3, r3, #8
 800aae2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800aae6:	4313      	orrs	r3, r2
 800aae8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800aaec:	bf00      	nop
 800aaee:	370c      	adds	r7, #12
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf6:	4770      	bx	lr

0800aaf8 <LL_RCC_MSI_Enable>:
{
 800aaf8:	b480      	push	{r7}
 800aafa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800aafc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ab06:	f043 0301 	orr.w	r3, r3, #1
 800ab0a:	6013      	str	r3, [r2, #0]
}
 800ab0c:	bf00      	nop
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab14:	4770      	bx	lr

0800ab16 <LL_RCC_MSI_Disable>:
{
 800ab16:	b480      	push	{r7}
 800ab18:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800ab1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ab24:	f023 0301 	bic.w	r3, r3, #1
 800ab28:	6013      	str	r3, [r2, #0]
}
 800ab2a:	bf00      	nop
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab32:	4770      	bx	lr

0800ab34 <LL_RCC_MSI_IsReady>:
{
 800ab34:	b480      	push	{r7}
 800ab36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800ab38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	f003 0302 	and.w	r3, r3, #2
 800ab42:	2b02      	cmp	r3, #2
 800ab44:	d101      	bne.n	800ab4a <LL_RCC_MSI_IsReady+0x16>
 800ab46:	2301      	movs	r3, #1
 800ab48:	e000      	b.n	800ab4c <LL_RCC_MSI_IsReady+0x18>
 800ab4a:	2300      	movs	r3, #0
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab54:	4770      	bx	lr

0800ab56 <LL_RCC_MSI_SetRange>:
{
 800ab56:	b480      	push	{r7}
 800ab58:	b083      	sub	sp, #12
 800ab5a:	af00      	add	r7, sp, #0
 800ab5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800ab5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ab68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	4313      	orrs	r3, r2
 800ab70:	600b      	str	r3, [r1, #0]
}
 800ab72:	bf00      	nop
 800ab74:	370c      	adds	r7, #12
 800ab76:	46bd      	mov	sp, r7
 800ab78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7c:	4770      	bx	lr

0800ab7e <LL_RCC_MSI_GetRange>:
{
 800ab7e:	b480      	push	{r7}
 800ab80:	b083      	sub	sp, #12
 800ab82:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800ab84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ab8e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2bb0      	cmp	r3, #176	; 0xb0
 800ab94:	d901      	bls.n	800ab9a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800ab96:	23b0      	movs	r3, #176	; 0xb0
 800ab98:	607b      	str	r3, [r7, #4]
  return msiRange;
 800ab9a:	687b      	ldr	r3, [r7, #4]
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	370c      	adds	r7, #12
 800aba0:	46bd      	mov	sp, r7
 800aba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba6:	4770      	bx	lr

0800aba8 <LL_RCC_MSI_SetCalibTrimming>:
{
 800aba8:	b480      	push	{r7}
 800abaa:	b083      	sub	sp, #12
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800abb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800abb4:	685b      	ldr	r3, [r3, #4]
 800abb6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	021b      	lsls	r3, r3, #8
 800abbe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800abc2:	4313      	orrs	r3, r2
 800abc4:	604b      	str	r3, [r1, #4]
}
 800abc6:	bf00      	nop
 800abc8:	370c      	adds	r7, #12
 800abca:	46bd      	mov	sp, r7
 800abcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd0:	4770      	bx	lr

0800abd2 <LL_RCC_SetSysClkSource>:
{
 800abd2:	b480      	push	{r7}
 800abd4:	b083      	sub	sp, #12
 800abd6:	af00      	add	r7, sp, #0
 800abd8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800abda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800abde:	689b      	ldr	r3, [r3, #8]
 800abe0:	f023 0203 	bic.w	r2, r3, #3
 800abe4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	4313      	orrs	r3, r2
 800abec:	608b      	str	r3, [r1, #8]
}
 800abee:	bf00      	nop
 800abf0:	370c      	adds	r7, #12
 800abf2:	46bd      	mov	sp, r7
 800abf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf8:	4770      	bx	lr

0800abfa <LL_RCC_GetSysClkSource>:
{
 800abfa:	b480      	push	{r7}
 800abfc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800abfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ac02:	689b      	ldr	r3, [r3, #8]
 800ac04:	f003 030c 	and.w	r3, r3, #12
}
 800ac08:	4618      	mov	r0, r3
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac10:	4770      	bx	lr

0800ac12 <LL_RCC_SetAHBPrescaler>:
{
 800ac12:	b480      	push	{r7}
 800ac14:	b083      	sub	sp, #12
 800ac16:	af00      	add	r7, sp, #0
 800ac18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800ac1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ac1e:	689b      	ldr	r3, [r3, #8]
 800ac20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ac24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	4313      	orrs	r3, r2
 800ac2c:	608b      	str	r3, [r1, #8]
}
 800ac2e:	bf00      	nop
 800ac30:	370c      	adds	r7, #12
 800ac32:	46bd      	mov	sp, r7
 800ac34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac38:	4770      	bx	lr

0800ac3a <LL_C2_RCC_SetAHBPrescaler>:
{
 800ac3a:	b480      	push	{r7}
 800ac3c:	b083      	sub	sp, #12
 800ac3e:	af00      	add	r7, sp, #0
 800ac40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800ac42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ac46:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800ac4a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ac4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	4313      	orrs	r3, r2
 800ac56:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800ac5a:	bf00      	nop
 800ac5c:	370c      	adds	r7, #12
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac64:	4770      	bx	lr

0800ac66 <LL_RCC_SetAHB4Prescaler>:
{
 800ac66:	b480      	push	{r7}
 800ac68:	b083      	sub	sp, #12
 800ac6a:	af00      	add	r7, sp, #0
 800ac6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800ac6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ac72:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800ac76:	f023 020f 	bic.w	r2, r3, #15
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	091b      	lsrs	r3, r3, #4
 800ac7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ac82:	4313      	orrs	r3, r2
 800ac84:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800ac88:	bf00      	nop
 800ac8a:	370c      	adds	r7, #12
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac92:	4770      	bx	lr

0800ac94 <LL_RCC_SetAPB1Prescaler>:
{
 800ac94:	b480      	push	{r7}
 800ac96:	b083      	sub	sp, #12
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800ac9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aca0:	689b      	ldr	r3, [r3, #8]
 800aca2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800aca6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	4313      	orrs	r3, r2
 800acae:	608b      	str	r3, [r1, #8]
}
 800acb0:	bf00      	nop
 800acb2:	370c      	adds	r7, #12
 800acb4:	46bd      	mov	sp, r7
 800acb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acba:	4770      	bx	lr

0800acbc <LL_RCC_SetAPB2Prescaler>:
{
 800acbc:	b480      	push	{r7}
 800acbe:	b083      	sub	sp, #12
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800acc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800acc8:	689b      	ldr	r3, [r3, #8]
 800acca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800acce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	4313      	orrs	r3, r2
 800acd6:	608b      	str	r3, [r1, #8]
}
 800acd8:	bf00      	nop
 800acda:	370c      	adds	r7, #12
 800acdc:	46bd      	mov	sp, r7
 800acde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace2:	4770      	bx	lr

0800ace4 <LL_RCC_GetAHBPrescaler>:
{
 800ace4:	b480      	push	{r7}
 800ace6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800ace8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800acec:	689b      	ldr	r3, [r3, #8]
 800acee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800acf2:	4618      	mov	r0, r3
 800acf4:	46bd      	mov	sp, r7
 800acf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfa:	4770      	bx	lr

0800acfc <LL_C2_RCC_GetAHBPrescaler>:
{
 800acfc:	b480      	push	{r7}
 800acfe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 800ad00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ad04:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800ad08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad14:	4770      	bx	lr

0800ad16 <LL_RCC_GetAHB4Prescaler>:
{
 800ad16:	b480      	push	{r7}
 800ad18:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800ad1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ad1e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800ad22:	011b      	lsls	r3, r3, #4
 800ad24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad30:	4770      	bx	lr

0800ad32 <LL_RCC_GetAPB1Prescaler>:
{
 800ad32:	b480      	push	{r7}
 800ad34:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800ad36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ad3a:	689b      	ldr	r3, [r3, #8]
 800ad3c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800ad40:	4618      	mov	r0, r3
 800ad42:	46bd      	mov	sp, r7
 800ad44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad48:	4770      	bx	lr

0800ad4a <LL_RCC_GetAPB2Prescaler>:
{
 800ad4a:	b480      	push	{r7}
 800ad4c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800ad4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ad52:	689b      	ldr	r3, [r3, #8]
 800ad54:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800ad58:	4618      	mov	r0, r3
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad60:	4770      	bx	lr

0800ad62 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800ad62:	b480      	push	{r7}
 800ad64:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800ad66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ad70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ad74:	6013      	str	r3, [r2, #0]
}
 800ad76:	bf00      	nop
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7e:	4770      	bx	lr

0800ad80 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800ad80:	b480      	push	{r7}
 800ad82:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800ad84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ad8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ad92:	6013      	str	r3, [r2, #0]
}
 800ad94:	bf00      	nop
 800ad96:	46bd      	mov	sp, r7
 800ad98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9c:	4770      	bx	lr

0800ad9e <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800ad9e:	b480      	push	{r7}
 800ada0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800ada2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800adac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800adb0:	d101      	bne.n	800adb6 <LL_RCC_PLL_IsReady+0x18>
 800adb2:	2301      	movs	r3, #1
 800adb4:	e000      	b.n	800adb8 <LL_RCC_PLL_IsReady+0x1a>
 800adb6:	2300      	movs	r3, #0
}
 800adb8:	4618      	mov	r0, r3
 800adba:	46bd      	mov	sp, r7
 800adbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc0:	4770      	bx	lr

0800adc2 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800adc2:	b480      	push	{r7}
 800adc4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800adc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800adca:	68db      	ldr	r3, [r3, #12]
 800adcc:	0a1b      	lsrs	r3, r3, #8
 800adce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800add2:	4618      	mov	r0, r3
 800add4:	46bd      	mov	sp, r7
 800add6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adda:	4770      	bx	lr

0800addc <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800addc:	b480      	push	{r7}
 800adde:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800ade0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ade4:	68db      	ldr	r3, [r3, #12]
 800ade6:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800adea:	4618      	mov	r0, r3
 800adec:	46bd      	mov	sp, r7
 800adee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf2:	4770      	bx	lr

0800adf4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800adf4:	b480      	push	{r7}
 800adf6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800adf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800adfc:	68db      	ldr	r3, [r3, #12]
 800adfe:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800ae02:	4618      	mov	r0, r3
 800ae04:	46bd      	mov	sp, r7
 800ae06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0a:	4770      	bx	lr

0800ae0c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800ae10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ae14:	68db      	ldr	r3, [r3, #12]
 800ae16:	f003 0303 	and.w	r3, r3, #3
}
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae22:	4770      	bx	lr

0800ae24 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800ae24:	b480      	push	{r7}
 800ae26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800ae28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ae2c:	689b      	ldr	r3, [r3, #8]
 800ae2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ae32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae36:	d101      	bne.n	800ae3c <LL_RCC_IsActiveFlag_HPRE+0x18>
 800ae38:	2301      	movs	r3, #1
 800ae3a:	e000      	b.n	800ae3e <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800ae3c:	2300      	movs	r3, #0
}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	46bd      	mov	sp, r7
 800ae42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae46:	4770      	bx	lr

0800ae48 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800ae48:	b480      	push	{r7}
 800ae4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800ae4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ae50:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800ae54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae5c:	d101      	bne.n	800ae62 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800ae5e:	2301      	movs	r3, #1
 800ae60:	e000      	b.n	800ae64 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800ae62:	2300      	movs	r3, #0
}
 800ae64:	4618      	mov	r0, r3
 800ae66:	46bd      	mov	sp, r7
 800ae68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6c:	4770      	bx	lr

0800ae6e <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800ae6e:	b480      	push	{r7}
 800ae70:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800ae72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ae76:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800ae7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ae7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae82:	d101      	bne.n	800ae88 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800ae84:	2301      	movs	r3, #1
 800ae86:	e000      	b.n	800ae8a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800ae88:	2300      	movs	r3, #0
}
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae92:	4770      	bx	lr

0800ae94 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800ae94:	b480      	push	{r7}
 800ae96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800ae98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ae9c:	689b      	ldr	r3, [r3, #8]
 800ae9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aea2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aea6:	d101      	bne.n	800aeac <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800aea8:	2301      	movs	r3, #1
 800aeaa:	e000      	b.n	800aeae <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800aeac:	2300      	movs	r3, #0
}
 800aeae:	4618      	mov	r0, r3
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb6:	4770      	bx	lr

0800aeb8 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800aeb8:	b480      	push	{r7}
 800aeba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800aebc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aec0:	689b      	ldr	r3, [r3, #8]
 800aec2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aec6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800aeca:	d101      	bne.n	800aed0 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800aecc:	2301      	movs	r3, #1
 800aece:	e000      	b.n	800aed2 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800aed0:	2300      	movs	r3, #0
}
 800aed2:	4618      	mov	r0, r3
 800aed4:	46bd      	mov	sp, r7
 800aed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeda:	4770      	bx	lr

0800aedc <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800aedc:	b590      	push	{r4, r7, lr}
 800aede:	b08b      	sub	sp, #44	; 0x2c
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d101      	bne.n	800aeee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800aeea:	2301      	movs	r3, #1
 800aeec:	e34b      	b.n	800b586 <HAL_RCC_OscConfig+0x6aa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	f003 0320 	and.w	r3, r3, #32
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	f000 808f 	beq.w	800b01a <HAL_RCC_OscConfig+0x13e>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aefc:	f7ff fe7d 	bl	800abfa <LL_RCC_GetSysClkSource>
 800af00:	6278      	str	r0, [r7, #36]	; 0x24
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800af02:	f7ff ff83 	bl	800ae0c <LL_RCC_PLL_GetMainSource>
 800af06:	6238      	str	r0, [r7, #32]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800af08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d005      	beq.n	800af1a <HAL_RCC_OscConfig+0x3e>
 800af0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af10:	2b0c      	cmp	r3, #12
 800af12:	d149      	bne.n	800afa8 <HAL_RCC_OscConfig+0xcc>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800af14:	6a3b      	ldr	r3, [r7, #32]
 800af16:	2b01      	cmp	r3, #1
 800af18:	d146      	bne.n	800afa8 <HAL_RCC_OscConfig+0xcc>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800af1a:	f7ff fe0b 	bl	800ab34 <LL_RCC_MSI_IsReady>
 800af1e:	4603      	mov	r3, r0
 800af20:	2b00      	cmp	r3, #0
 800af22:	d005      	beq.n	800af30 <HAL_RCC_OscConfig+0x54>
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	69db      	ldr	r3, [r3, #28]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d101      	bne.n	800af30 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800af2c:	2301      	movs	r3, #1
 800af2e:	e32a      	b.n	800b586 <HAL_RCC_OscConfig+0x6aa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800af34:	f7ff fe23 	bl	800ab7e <LL_RCC_MSI_GetRange>
 800af38:	4603      	mov	r3, r0
 800af3a:	429c      	cmp	r4, r3
 800af3c:	d914      	bls.n	800af68 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af42:	4618      	mov	r0, r3
 800af44:	f000 fd2a 	bl	800b99c <RCC_SetFlashLatencyFromMSIRange>
 800af48:	4603      	mov	r3, r0
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d001      	beq.n	800af52 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 800af4e:	2301      	movs	r3, #1
 800af50:	e319      	b.n	800b586 <HAL_RCC_OscConfig+0x6aa>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af56:	4618      	mov	r0, r3
 800af58:	f7ff fdfd 	bl	800ab56 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	6a1b      	ldr	r3, [r3, #32]
 800af60:	4618      	mov	r0, r3
 800af62:	f7ff fe21 	bl	800aba8 <LL_RCC_MSI_SetCalibTrimming>
 800af66:	e013      	b.n	800af90 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af6c:	4618      	mov	r0, r3
 800af6e:	f7ff fdf2 	bl	800ab56 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	6a1b      	ldr	r3, [r3, #32]
 800af76:	4618      	mov	r0, r3
 800af78:	f7ff fe16 	bl	800aba8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af80:	4618      	mov	r0, r3
 800af82:	f000 fd0b 	bl	800b99c <RCC_SetFlashLatencyFromMSIRange>
 800af86:	4603      	mov	r3, r0
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d001      	beq.n	800af90 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 800af8c:	2301      	movs	r3, #1
 800af8e:	e2fa      	b.n	800b586 <HAL_RCC_OscConfig+0x6aa>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 800af90:	f7fa faf2 	bl	8005578 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800af94:	4bb4      	ldr	r3, [pc, #720]	; (800b268 <HAL_RCC_OscConfig+0x38c>)
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	4618      	mov	r0, r3
 800af9a:	f7fa f9c7 	bl	800532c <HAL_InitTick>
 800af9e:	4603      	mov	r3, r0
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d039      	beq.n	800b018 <HAL_RCC_OscConfig+0x13c>
        {
          return HAL_ERROR;
 800afa4:	2301      	movs	r3, #1
 800afa6:	e2ee      	b.n	800b586 <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	69db      	ldr	r3, [r3, #28]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d01e      	beq.n	800afee <HAL_RCC_OscConfig+0x112>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800afb0:	f7ff fda2 	bl	800aaf8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800afb4:	f7fb f98c 	bl	80062d0 <HAL_GetTick>
 800afb8:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800afba:	e008      	b.n	800afce <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800afbc:	f7fb f988 	bl	80062d0 <HAL_GetTick>
 800afc0:	4602      	mov	r2, r0
 800afc2:	69fb      	ldr	r3, [r7, #28]
 800afc4:	1ad3      	subs	r3, r2, r3
 800afc6:	2b02      	cmp	r3, #2
 800afc8:	d901      	bls.n	800afce <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800afca:	2303      	movs	r3, #3
 800afcc:	e2db      	b.n	800b586 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() == 0U)
 800afce:	f7ff fdb1 	bl	800ab34 <LL_RCC_MSI_IsReady>
 800afd2:	4603      	mov	r3, r0
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d0f1      	beq.n	800afbc <HAL_RCC_OscConfig+0xe0>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afdc:	4618      	mov	r0, r3
 800afde:	f7ff fdba 	bl	800ab56 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	6a1b      	ldr	r3, [r3, #32]
 800afe6:	4618      	mov	r0, r3
 800afe8:	f7ff fdde 	bl	800aba8 <LL_RCC_MSI_SetCalibTrimming>
 800afec:	e015      	b.n	800b01a <HAL_RCC_OscConfig+0x13e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800afee:	f7ff fd92 	bl	800ab16 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800aff2:	f7fb f96d 	bl	80062d0 <HAL_GetTick>
 800aff6:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800aff8:	e008      	b.n	800b00c <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800affa:	f7fb f969 	bl	80062d0 <HAL_GetTick>
 800affe:	4602      	mov	r2, r0
 800b000:	69fb      	ldr	r3, [r7, #28]
 800b002:	1ad3      	subs	r3, r2, r3
 800b004:	2b02      	cmp	r3, #2
 800b006:	d901      	bls.n	800b00c <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 800b008:	2303      	movs	r3, #3
 800b00a:	e2bc      	b.n	800b586 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() != 0U)
 800b00c:	f7ff fd92 	bl	800ab34 <LL_RCC_MSI_IsReady>
 800b010:	4603      	mov	r3, r0
 800b012:	2b00      	cmp	r3, #0
 800b014:	d1f1      	bne.n	800affa <HAL_RCC_OscConfig+0x11e>
 800b016:	e000      	b.n	800b01a <HAL_RCC_OscConfig+0x13e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800b018:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	f003 0301 	and.w	r3, r3, #1
 800b022:	2b00      	cmp	r3, #0
 800b024:	d05a      	beq.n	800b0dc <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b026:	f7ff fde8 	bl	800abfa <LL_RCC_GetSysClkSource>
 800b02a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b02c:	f7ff feee 	bl	800ae0c <LL_RCC_PLL_GetMainSource>
 800b030:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800b032:	69bb      	ldr	r3, [r7, #24]
 800b034:	2b08      	cmp	r3, #8
 800b036:	d005      	beq.n	800b044 <HAL_RCC_OscConfig+0x168>
 800b038:	69bb      	ldr	r3, [r7, #24]
 800b03a:	2b0c      	cmp	r3, #12
 800b03c:	d10d      	bne.n	800b05a <HAL_RCC_OscConfig+0x17e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800b03e:	697b      	ldr	r3, [r7, #20]
 800b040:	2b03      	cmp	r3, #3
 800b042:	d10a      	bne.n	800b05a <HAL_RCC_OscConfig+0x17e>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b044:	f7ff fbf8 	bl	800a838 <LL_RCC_HSE_IsReady>
 800b048:	4603      	mov	r3, r0
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d045      	beq.n	800b0da <HAL_RCC_OscConfig+0x1fe>
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	685b      	ldr	r3, [r3, #4]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d141      	bne.n	800b0da <HAL_RCC_OscConfig+0x1fe>
      {
        return HAL_ERROR;
 800b056:	2301      	movs	r3, #1
 800b058:	e295      	b.n	800b586 <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	685b      	ldr	r3, [r3, #4]
 800b05e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b062:	d102      	bne.n	800b06a <HAL_RCC_OscConfig+0x18e>
 800b064:	f7ff fbca 	bl	800a7fc <LL_RCC_HSE_Enable>
 800b068:	e00d      	b.n	800b086 <HAL_RCC_OscConfig+0x1aa>
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	685b      	ldr	r3, [r3, #4]
 800b06e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b072:	d104      	bne.n	800b07e <HAL_RCC_OscConfig+0x1a2>
 800b074:	f7ff fba4 	bl	800a7c0 <LL_RCC_HSE_EnableBypass>
 800b078:	f7ff fbc0 	bl	800a7fc <LL_RCC_HSE_Enable>
 800b07c:	e003      	b.n	800b086 <HAL_RCC_OscConfig+0x1aa>
 800b07e:	f7ff fbcc 	bl	800a81a <LL_RCC_HSE_Disable>
 800b082:	f7ff fbac 	bl	800a7de <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	685b      	ldr	r3, [r3, #4]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d012      	beq.n	800b0b4 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b08e:	f7fb f91f 	bl	80062d0 <HAL_GetTick>
 800b092:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800b094:	e008      	b.n	800b0a8 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b096:	f7fb f91b 	bl	80062d0 <HAL_GetTick>
 800b09a:	4602      	mov	r2, r0
 800b09c:	69fb      	ldr	r3, [r7, #28]
 800b09e:	1ad3      	subs	r3, r2, r3
 800b0a0:	2b64      	cmp	r3, #100	; 0x64
 800b0a2:	d901      	bls.n	800b0a8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800b0a4:	2303      	movs	r3, #3
 800b0a6:	e26e      	b.n	800b586 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() == 0U)
 800b0a8:	f7ff fbc6 	bl	800a838 <LL_RCC_HSE_IsReady>
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d0f1      	beq.n	800b096 <HAL_RCC_OscConfig+0x1ba>
 800b0b2:	e013      	b.n	800b0dc <HAL_RCC_OscConfig+0x200>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0b4:	f7fb f90c 	bl	80062d0 <HAL_GetTick>
 800b0b8:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800b0ba:	e008      	b.n	800b0ce <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b0bc:	f7fb f908 	bl	80062d0 <HAL_GetTick>
 800b0c0:	4602      	mov	r2, r0
 800b0c2:	69fb      	ldr	r3, [r7, #28]
 800b0c4:	1ad3      	subs	r3, r2, r3
 800b0c6:	2b64      	cmp	r3, #100	; 0x64
 800b0c8:	d901      	bls.n	800b0ce <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800b0ca:	2303      	movs	r3, #3
 800b0cc:	e25b      	b.n	800b586 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() != 0U)
 800b0ce:	f7ff fbb3 	bl	800a838 <LL_RCC_HSE_IsReady>
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d1f1      	bne.n	800b0bc <HAL_RCC_OscConfig+0x1e0>
 800b0d8:	e000      	b.n	800b0dc <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b0da:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	f003 0302 	and.w	r3, r3, #2
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d051      	beq.n	800b18c <HAL_RCC_OscConfig+0x2b0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b0e8:	f7ff fd87 	bl	800abfa <LL_RCC_GetSysClkSource>
 800b0ec:	6138      	str	r0, [r7, #16]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b0ee:	f7ff fe8d 	bl	800ae0c <LL_RCC_PLL_GetMainSource>
 800b0f2:	60f8      	str	r0, [r7, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800b0f4:	693b      	ldr	r3, [r7, #16]
 800b0f6:	2b04      	cmp	r3, #4
 800b0f8:	d005      	beq.n	800b106 <HAL_RCC_OscConfig+0x22a>
 800b0fa:	693b      	ldr	r3, [r7, #16]
 800b0fc:	2b0c      	cmp	r3, #12
 800b0fe:	d113      	bne.n	800b128 <HAL_RCC_OscConfig+0x24c>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	2b02      	cmp	r3, #2
 800b104:	d110      	bne.n	800b128 <HAL_RCC_OscConfig+0x24c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b106:	f7ff fbc7 	bl	800a898 <LL_RCC_HSI_IsReady>
 800b10a:	4603      	mov	r3, r0
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d005      	beq.n	800b11c <HAL_RCC_OscConfig+0x240>
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	68db      	ldr	r3, [r3, #12]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d101      	bne.n	800b11c <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 800b118:	2301      	movs	r3, #1
 800b11a:	e234      	b.n	800b586 <HAL_RCC_OscConfig+0x6aa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	691b      	ldr	r3, [r3, #16]
 800b120:	4618      	mov	r0, r3
 800b122:	f7ff fbcb 	bl	800a8bc <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b126:	e031      	b.n	800b18c <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	68db      	ldr	r3, [r3, #12]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d019      	beq.n	800b164 <HAL_RCC_OscConfig+0x288>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b130:	f7ff fb94 	bl	800a85c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b134:	f7fb f8cc 	bl	80062d0 <HAL_GetTick>
 800b138:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800b13a:	e008      	b.n	800b14e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b13c:	f7fb f8c8 	bl	80062d0 <HAL_GetTick>
 800b140:	4602      	mov	r2, r0
 800b142:	69fb      	ldr	r3, [r7, #28]
 800b144:	1ad3      	subs	r3, r2, r3
 800b146:	2b02      	cmp	r3, #2
 800b148:	d901      	bls.n	800b14e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800b14a:	2303      	movs	r3, #3
 800b14c:	e21b      	b.n	800b586 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() == 0U)
 800b14e:	f7ff fba3 	bl	800a898 <LL_RCC_HSI_IsReady>
 800b152:	4603      	mov	r3, r0
 800b154:	2b00      	cmp	r3, #0
 800b156:	d0f1      	beq.n	800b13c <HAL_RCC_OscConfig+0x260>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	691b      	ldr	r3, [r3, #16]
 800b15c:	4618      	mov	r0, r3
 800b15e:	f7ff fbad 	bl	800a8bc <LL_RCC_HSI_SetCalibTrimming>
 800b162:	e013      	b.n	800b18c <HAL_RCC_OscConfig+0x2b0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b164:	f7ff fb89 	bl	800a87a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b168:	f7fb f8b2 	bl	80062d0 <HAL_GetTick>
 800b16c:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800b16e:	e008      	b.n	800b182 <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b170:	f7fb f8ae 	bl	80062d0 <HAL_GetTick>
 800b174:	4602      	mov	r2, r0
 800b176:	69fb      	ldr	r3, [r7, #28]
 800b178:	1ad3      	subs	r3, r2, r3
 800b17a:	2b02      	cmp	r3, #2
 800b17c:	d901      	bls.n	800b182 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800b17e:	2303      	movs	r3, #3
 800b180:	e201      	b.n	800b586 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() != 0U)
 800b182:	f7ff fb89 	bl	800a898 <LL_RCC_HSI_IsReady>
 800b186:	4603      	mov	r3, r0
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d1f1      	bne.n	800b170 <HAL_RCC_OscConfig+0x294>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	f003 0308 	and.w	r3, r3, #8
 800b194:	2b00      	cmp	r3, #0
 800b196:	d106      	bne.n	800b1a6 <HAL_RCC_OscConfig+0x2ca>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	f000 80a2 	beq.w	800b2ea <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	695b      	ldr	r3, [r3, #20]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d075      	beq.n	800b29a <HAL_RCC_OscConfig+0x3be>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	f003 0310 	and.w	r3, r3, #16
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d046      	beq.n	800b248 <HAL_RCC_OscConfig+0x36c>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800b1ba:	f7ff fc40 	bl	800aa3e <LL_RCC_LSI1_IsReady>
 800b1be:	4603      	mov	r3, r0
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d113      	bne.n	800b1ec <HAL_RCC_OscConfig+0x310>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800b1c4:	f7ff fc19 	bl	800a9fa <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b1c8:	f7fb f882 	bl	80062d0 <HAL_GetTick>
 800b1cc:	61f8      	str	r0, [r7, #28]

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800b1ce:	e008      	b.n	800b1e2 <HAL_RCC_OscConfig+0x306>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800b1d0:	f7fb f87e 	bl	80062d0 <HAL_GetTick>
 800b1d4:	4602      	mov	r2, r0
 800b1d6:	69fb      	ldr	r3, [r7, #28]
 800b1d8:	1ad3      	subs	r3, r2, r3
 800b1da:	2b02      	cmp	r3, #2
 800b1dc:	d901      	bls.n	800b1e2 <HAL_RCC_OscConfig+0x306>
            {
              return HAL_TIMEOUT;
 800b1de:	2303      	movs	r3, #3
 800b1e0:	e1d1      	b.n	800b586 <HAL_RCC_OscConfig+0x6aa>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800b1e2:	f7ff fc2c 	bl	800aa3e <LL_RCC_LSI1_IsReady>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d0f1      	beq.n	800b1d0 <HAL_RCC_OscConfig+0x2f4>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800b1ec:	f7ff fc39 	bl	800aa62 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b1f0:	f7fb f86e 	bl	80062d0 <HAL_GetTick>
 800b1f4:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800b1f6:	e008      	b.n	800b20a <HAL_RCC_OscConfig+0x32e>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800b1f8:	f7fb f86a 	bl	80062d0 <HAL_GetTick>
 800b1fc:	4602      	mov	r2, r0
 800b1fe:	69fb      	ldr	r3, [r7, #28]
 800b200:	1ad3      	subs	r3, r2, r3
 800b202:	2b03      	cmp	r3, #3
 800b204:	d901      	bls.n	800b20a <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 800b206:	2303      	movs	r3, #3
 800b208:	e1bd      	b.n	800b586 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800b20a:	f7ff fc4c 	bl	800aaa6 <LL_RCC_LSI2_IsReady>
 800b20e:	4603      	mov	r3, r0
 800b210:	2b00      	cmp	r3, #0
 800b212:	d0f1      	beq.n	800b1f8 <HAL_RCC_OscConfig+0x31c>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	699b      	ldr	r3, [r3, #24]
 800b218:	4618      	mov	r0, r3
 800b21a:	f7ff fc56 	bl	800aaca <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800b21e:	f7ff fbfd 	bl	800aa1c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b222:	f7fb f855 	bl	80062d0 <HAL_GetTick>
 800b226:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800b228:	e008      	b.n	800b23c <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800b22a:	f7fb f851 	bl	80062d0 <HAL_GetTick>
 800b22e:	4602      	mov	r2, r0
 800b230:	69fb      	ldr	r3, [r7, #28]
 800b232:	1ad3      	subs	r3, r2, r3
 800b234:	2b02      	cmp	r3, #2
 800b236:	d901      	bls.n	800b23c <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 800b238:	2303      	movs	r3, #3
 800b23a:	e1a4      	b.n	800b586 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800b23c:	f7ff fbff 	bl	800aa3e <LL_RCC_LSI1_IsReady>
 800b240:	4603      	mov	r3, r0
 800b242:	2b00      	cmp	r3, #0
 800b244:	d1f1      	bne.n	800b22a <HAL_RCC_OscConfig+0x34e>
 800b246:	e050      	b.n	800b2ea <HAL_RCC_OscConfig+0x40e>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800b248:	f7ff fbd7 	bl	800a9fa <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b24c:	f7fb f840 	bl	80062d0 <HAL_GetTick>
 800b250:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800b252:	e00b      	b.n	800b26c <HAL_RCC_OscConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800b254:	f7fb f83c 	bl	80062d0 <HAL_GetTick>
 800b258:	4602      	mov	r2, r0
 800b25a:	69fb      	ldr	r3, [r7, #28]
 800b25c:	1ad3      	subs	r3, r2, r3
 800b25e:	2b02      	cmp	r3, #2
 800b260:	d904      	bls.n	800b26c <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 800b262:	2303      	movs	r3, #3
 800b264:	e18f      	b.n	800b586 <HAL_RCC_OscConfig+0x6aa>
 800b266:	bf00      	nop
 800b268:	2000007c 	.word	0x2000007c
        while (LL_RCC_LSI1_IsReady() == 0U)
 800b26c:	f7ff fbe7 	bl	800aa3e <LL_RCC_LSI1_IsReady>
 800b270:	4603      	mov	r3, r0
 800b272:	2b00      	cmp	r3, #0
 800b274:	d0ee      	beq.n	800b254 <HAL_RCC_OscConfig+0x378>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800b276:	f7ff fc05 	bl	800aa84 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800b27a:	e008      	b.n	800b28e <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800b27c:	f7fb f828 	bl	80062d0 <HAL_GetTick>
 800b280:	4602      	mov	r2, r0
 800b282:	69fb      	ldr	r3, [r7, #28]
 800b284:	1ad3      	subs	r3, r2, r3
 800b286:	2b03      	cmp	r3, #3
 800b288:	d901      	bls.n	800b28e <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 800b28a:	2303      	movs	r3, #3
 800b28c:	e17b      	b.n	800b586 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800b28e:	f7ff fc0a 	bl	800aaa6 <LL_RCC_LSI2_IsReady>
 800b292:	4603      	mov	r3, r0
 800b294:	2b00      	cmp	r3, #0
 800b296:	d1f1      	bne.n	800b27c <HAL_RCC_OscConfig+0x3a0>
 800b298:	e027      	b.n	800b2ea <HAL_RCC_OscConfig+0x40e>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800b29a:	f7ff fbf3 	bl	800aa84 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b29e:	f7fb f817 	bl	80062d0 <HAL_GetTick>
 800b2a2:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800b2a4:	e008      	b.n	800b2b8 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800b2a6:	f7fb f813 	bl	80062d0 <HAL_GetTick>
 800b2aa:	4602      	mov	r2, r0
 800b2ac:	69fb      	ldr	r3, [r7, #28]
 800b2ae:	1ad3      	subs	r3, r2, r3
 800b2b0:	2b03      	cmp	r3, #3
 800b2b2:	d901      	bls.n	800b2b8 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 800b2b4:	2303      	movs	r3, #3
 800b2b6:	e166      	b.n	800b586 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800b2b8:	f7ff fbf5 	bl	800aaa6 <LL_RCC_LSI2_IsReady>
 800b2bc:	4603      	mov	r3, r0
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d1f1      	bne.n	800b2a6 <HAL_RCC_OscConfig+0x3ca>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800b2c2:	f7ff fbab 	bl	800aa1c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b2c6:	f7fb f803 	bl	80062d0 <HAL_GetTick>
 800b2ca:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800b2cc:	e008      	b.n	800b2e0 <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800b2ce:	f7fa ffff 	bl	80062d0 <HAL_GetTick>
 800b2d2:	4602      	mov	r2, r0
 800b2d4:	69fb      	ldr	r3, [r7, #28]
 800b2d6:	1ad3      	subs	r3, r2, r3
 800b2d8:	2b02      	cmp	r3, #2
 800b2da:	d901      	bls.n	800b2e0 <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 800b2dc:	2303      	movs	r3, #3
 800b2de:	e152      	b.n	800b586 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800b2e0:	f7ff fbad 	bl	800aa3e <LL_RCC_LSI1_IsReady>
 800b2e4:	4603      	mov	r3, r0
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d1f1      	bne.n	800b2ce <HAL_RCC_OscConfig+0x3f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	f003 0304 	and.w	r3, r3, #4
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d05b      	beq.n	800b3ae <HAL_RCC_OscConfig+0x4d2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b2f6:	4ba6      	ldr	r3, [pc, #664]	; (800b590 <HAL_RCC_OscConfig+0x6b4>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d114      	bne.n	800b32c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800b302:	f7ff fa2d 	bl	800a760 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b306:	f7fa ffe3 	bl	80062d0 <HAL_GetTick>
 800b30a:	61f8      	str	r0, [r7, #28]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b30c:	e008      	b.n	800b320 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b30e:	f7fa ffdf 	bl	80062d0 <HAL_GetTick>
 800b312:	4602      	mov	r2, r0
 800b314:	69fb      	ldr	r3, [r7, #28]
 800b316:	1ad3      	subs	r3, r2, r3
 800b318:	2b02      	cmp	r3, #2
 800b31a:	d901      	bls.n	800b320 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800b31c:	2303      	movs	r3, #3
 800b31e:	e132      	b.n	800b586 <HAL_RCC_OscConfig+0x6aa>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b320:	4b9b      	ldr	r3, [pc, #620]	; (800b590 <HAL_RCC_OscConfig+0x6b4>)
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d0f0      	beq.n	800b30e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	689b      	ldr	r3, [r3, #8]
 800b330:	2b01      	cmp	r3, #1
 800b332:	d102      	bne.n	800b33a <HAL_RCC_OscConfig+0x45e>
 800b334:	f7ff fb0b 	bl	800a94e <LL_RCC_LSE_Enable>
 800b338:	e00c      	b.n	800b354 <HAL_RCC_OscConfig+0x478>
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	689b      	ldr	r3, [r3, #8]
 800b33e:	2b05      	cmp	r3, #5
 800b340:	d104      	bne.n	800b34c <HAL_RCC_OscConfig+0x470>
 800b342:	f7ff fb26 	bl	800a992 <LL_RCC_LSE_EnableBypass>
 800b346:	f7ff fb02 	bl	800a94e <LL_RCC_LSE_Enable>
 800b34a:	e003      	b.n	800b354 <HAL_RCC_OscConfig+0x478>
 800b34c:	f7ff fb10 	bl	800a970 <LL_RCC_LSE_Disable>
 800b350:	f7ff fb30 	bl	800a9b4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	689b      	ldr	r3, [r3, #8]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d014      	beq.n	800b386 <HAL_RCC_OscConfig+0x4aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b35c:	f7fa ffb8 	bl	80062d0 <HAL_GetTick>
 800b360:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800b362:	e00a      	b.n	800b37a <HAL_RCC_OscConfig+0x49e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b364:	f7fa ffb4 	bl	80062d0 <HAL_GetTick>
 800b368:	4602      	mov	r2, r0
 800b36a:	69fb      	ldr	r3, [r7, #28]
 800b36c:	1ad3      	subs	r3, r2, r3
 800b36e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b372:	4293      	cmp	r3, r2
 800b374:	d901      	bls.n	800b37a <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 800b376:	2303      	movs	r3, #3
 800b378:	e105      	b.n	800b586 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() == 0U)
 800b37a:	f7ff fb2c 	bl	800a9d6 <LL_RCC_LSE_IsReady>
 800b37e:	4603      	mov	r3, r0
 800b380:	2b00      	cmp	r3, #0
 800b382:	d0ef      	beq.n	800b364 <HAL_RCC_OscConfig+0x488>
 800b384:	e013      	b.n	800b3ae <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b386:	f7fa ffa3 	bl	80062d0 <HAL_GetTick>
 800b38a:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800b38c:	e00a      	b.n	800b3a4 <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b38e:	f7fa ff9f 	bl	80062d0 <HAL_GetTick>
 800b392:	4602      	mov	r2, r0
 800b394:	69fb      	ldr	r3, [r7, #28]
 800b396:	1ad3      	subs	r3, r2, r3
 800b398:	f241 3288 	movw	r2, #5000	; 0x1388
 800b39c:	4293      	cmp	r3, r2
 800b39e:	d901      	bls.n	800b3a4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 800b3a0:	2303      	movs	r3, #3
 800b3a2:	e0f0      	b.n	800b586 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() != 0U)
 800b3a4:	f7ff fb17 	bl	800a9d6 <LL_RCC_LSE_IsReady>
 800b3a8:	4603      	mov	r3, r0
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d1ef      	bne.n	800b38e <HAL_RCC_OscConfig+0x4b2>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d02c      	beq.n	800b414 <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d014      	beq.n	800b3ec <HAL_RCC_OscConfig+0x510>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b3c2:	f7ff fa90 	bl	800a8e6 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b3c6:	f7fa ff83 	bl	80062d0 <HAL_GetTick>
 800b3ca:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800b3cc:	e008      	b.n	800b3e0 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b3ce:	f7fa ff7f 	bl	80062d0 <HAL_GetTick>
 800b3d2:	4602      	mov	r2, r0
 800b3d4:	69fb      	ldr	r3, [r7, #28]
 800b3d6:	1ad3      	subs	r3, r2, r3
 800b3d8:	2b02      	cmp	r3, #2
 800b3da:	d901      	bls.n	800b3e0 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 800b3dc:	2303      	movs	r3, #3
 800b3de:	e0d2      	b.n	800b586 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800b3e0:	f7ff faa3 	bl	800a92a <LL_RCC_HSI48_IsReady>
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d0f1      	beq.n	800b3ce <HAL_RCC_OscConfig+0x4f2>
 800b3ea:	e013      	b.n	800b414 <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b3ec:	f7ff fa8c 	bl	800a908 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b3f0:	f7fa ff6e 	bl	80062d0 <HAL_GetTick>
 800b3f4:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800b3f6:	e008      	b.n	800b40a <HAL_RCC_OscConfig+0x52e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b3f8:	f7fa ff6a 	bl	80062d0 <HAL_GetTick>
 800b3fc:	4602      	mov	r2, r0
 800b3fe:	69fb      	ldr	r3, [r7, #28]
 800b400:	1ad3      	subs	r3, r2, r3
 800b402:	2b02      	cmp	r3, #2
 800b404:	d901      	bls.n	800b40a <HAL_RCC_OscConfig+0x52e>
        {
          return HAL_TIMEOUT;
 800b406:	2303      	movs	r3, #3
 800b408:	e0bd      	b.n	800b586 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800b40a:	f7ff fa8e 	bl	800a92a <LL_RCC_HSI48_IsReady>
 800b40e:	4603      	mov	r3, r0
 800b410:	2b00      	cmp	r3, #0
 800b412:	d1f1      	bne.n	800b3f8 <HAL_RCC_OscConfig+0x51c>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b418:	2b00      	cmp	r3, #0
 800b41a:	f000 80b3 	beq.w	800b584 <HAL_RCC_OscConfig+0x6a8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b41e:	f7ff fbec 	bl	800abfa <LL_RCC_GetSysClkSource>
 800b422:	4603      	mov	r3, r0
 800b424:	2b0c      	cmp	r3, #12
 800b426:	d076      	beq.n	800b516 <HAL_RCC_OscConfig+0x63a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b42c:	2b02      	cmp	r3, #2
 800b42e:	d14b      	bne.n	800b4c8 <HAL_RCC_OscConfig+0x5ec>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b430:	f7ff fca6 	bl	800ad80 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b434:	f7fa ff4c 	bl	80062d0 <HAL_GetTick>
 800b438:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800b43a:	e008      	b.n	800b44e <HAL_RCC_OscConfig+0x572>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b43c:	f7fa ff48 	bl	80062d0 <HAL_GetTick>
 800b440:	4602      	mov	r2, r0
 800b442:	69fb      	ldr	r3, [r7, #28]
 800b444:	1ad3      	subs	r3, r2, r3
 800b446:	2b02      	cmp	r3, #2
 800b448:	d901      	bls.n	800b44e <HAL_RCC_OscConfig+0x572>
          {
            return HAL_TIMEOUT;
 800b44a:	2303      	movs	r3, #3
 800b44c:	e09b      	b.n	800b586 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 800b44e:	f7ff fca6 	bl	800ad9e <LL_RCC_PLL_IsReady>
 800b452:	4603      	mov	r3, r0
 800b454:	2b00      	cmp	r3, #0
 800b456:	d1f1      	bne.n	800b43c <HAL_RCC_OscConfig+0x560>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b458:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b45c:	68da      	ldr	r2, [r3, #12]
 800b45e:	4b4d      	ldr	r3, [pc, #308]	; (800b594 <HAL_RCC_OscConfig+0x6b8>)
 800b460:	4013      	ands	r3, r2
 800b462:	687a      	ldr	r2, [r7, #4]
 800b464:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800b466:	687a      	ldr	r2, [r7, #4]
 800b468:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b46a:	4311      	orrs	r1, r2
 800b46c:	687a      	ldr	r2, [r7, #4]
 800b46e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b470:	0212      	lsls	r2, r2, #8
 800b472:	4311      	orrs	r1, r2
 800b474:	687a      	ldr	r2, [r7, #4]
 800b476:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b478:	4311      	orrs	r1, r2
 800b47a:	687a      	ldr	r2, [r7, #4]
 800b47c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800b47e:	4311      	orrs	r1, r2
 800b480:	687a      	ldr	r2, [r7, #4]
 800b482:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800b484:	430a      	orrs	r2, r1
 800b486:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b48a:	4313      	orrs	r3, r2
 800b48c:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b48e:	f7ff fc68 	bl	800ad62 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b492:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b496:	68db      	ldr	r3, [r3, #12]
 800b498:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b49c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b4a0:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b4a2:	f7fa ff15 	bl	80062d0 <HAL_GetTick>
 800b4a6:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 800b4a8:	e008      	b.n	800b4bc <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b4aa:	f7fa ff11 	bl	80062d0 <HAL_GetTick>
 800b4ae:	4602      	mov	r2, r0
 800b4b0:	69fb      	ldr	r3, [r7, #28]
 800b4b2:	1ad3      	subs	r3, r2, r3
 800b4b4:	2b02      	cmp	r3, #2
 800b4b6:	d901      	bls.n	800b4bc <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 800b4b8:	2303      	movs	r3, #3
 800b4ba:	e064      	b.n	800b586 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() == 0U)
 800b4bc:	f7ff fc6f 	bl	800ad9e <LL_RCC_PLL_IsReady>
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d0f1      	beq.n	800b4aa <HAL_RCC_OscConfig+0x5ce>
 800b4c6:	e05d      	b.n	800b584 <HAL_RCC_OscConfig+0x6a8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b4c8:	f7ff fc5a 	bl	800ad80 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800b4cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b4d0:	68db      	ldr	r3, [r3, #12]
 800b4d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b4d6:	f023 0303 	bic.w	r3, r3, #3
 800b4da:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 800b4dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b4e0:	68db      	ldr	r3, [r3, #12]
 800b4e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b4e6:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800b4ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b4ee:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b4f0:	f7fa feee 	bl	80062d0 <HAL_GetTick>
 800b4f4:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800b4f6:	e008      	b.n	800b50a <HAL_RCC_OscConfig+0x62e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b4f8:	f7fa feea 	bl	80062d0 <HAL_GetTick>
 800b4fc:	4602      	mov	r2, r0
 800b4fe:	69fb      	ldr	r3, [r7, #28]
 800b500:	1ad3      	subs	r3, r2, r3
 800b502:	2b02      	cmp	r3, #2
 800b504:	d901      	bls.n	800b50a <HAL_RCC_OscConfig+0x62e>
          {
            return HAL_TIMEOUT;
 800b506:	2303      	movs	r3, #3
 800b508:	e03d      	b.n	800b586 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 800b50a:	f7ff fc48 	bl	800ad9e <LL_RCC_PLL_IsReady>
 800b50e:	4603      	mov	r3, r0
 800b510:	2b00      	cmp	r3, #0
 800b512:	d1f1      	bne.n	800b4f8 <HAL_RCC_OscConfig+0x61c>
 800b514:	e036      	b.n	800b584 <HAL_RCC_OscConfig+0x6a8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b51a:	2b01      	cmp	r3, #1
 800b51c:	d101      	bne.n	800b522 <HAL_RCC_OscConfig+0x646>
      {
        return HAL_ERROR;
 800b51e:	2301      	movs	r3, #1
 800b520:	e031      	b.n	800b586 <HAL_RCC_OscConfig+0x6aa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 800b522:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b526:	68db      	ldr	r3, [r3, #12]
 800b528:	60bb      	str	r3, [r7, #8]

        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b52a:	68bb      	ldr	r3, [r7, #8]
 800b52c:	f003 0203 	and.w	r2, r3, #3
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b534:	429a      	cmp	r2, r3
 800b536:	d123      	bne.n	800b580 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b538:	68bb      	ldr	r3, [r7, #8]
 800b53a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b542:	429a      	cmp	r2, r3
 800b544:	d11c      	bne.n	800b580 <HAL_RCC_OscConfig+0x6a4>
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800b546:	68bb      	ldr	r3, [r7, #8]
 800b548:	0a1b      	lsrs	r3, r3, #8
 800b54a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b552:	429a      	cmp	r2, r3
 800b554:	d114      	bne.n	800b580 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800b556:	68bb      	ldr	r3, [r7, #8]
 800b558:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800b560:	429a      	cmp	r2, r3
 800b562:	d10d      	bne.n	800b580 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800b56e:	429a      	cmp	r2, r3
 800b570:	d106      	bne.n	800b580 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800b572:	68bb      	ldr	r3, [r7, #8]
 800b574:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800b57c:	429a      	cmp	r2, r3
 800b57e:	d001      	beq.n	800b584 <HAL_RCC_OscConfig+0x6a8>
        {
          return HAL_ERROR;
 800b580:	2301      	movs	r3, #1
 800b582:	e000      	b.n	800b586 <HAL_RCC_OscConfig+0x6aa>
        }
      }
    }
  }
  return HAL_OK;
 800b584:	2300      	movs	r3, #0
}
 800b586:	4618      	mov	r0, r3
 800b588:	372c      	adds	r7, #44	; 0x2c
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd90      	pop	{r4, r7, pc}
 800b58e:	bf00      	nop
 800b590:	58000400 	.word	0x58000400
 800b594:	11c1808c 	.word	0x11c1808c

0800b598 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b084      	sub	sp, #16
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
 800b5a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d101      	bne.n	800b5ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b5a8:	2301      	movs	r3, #1
 800b5aa:	e12a      	b.n	800b802 <HAL_RCC_ClockConfig+0x26a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b5ac:	4b97      	ldr	r3, [pc, #604]	; (800b80c <HAL_RCC_ClockConfig+0x274>)
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	f003 0307 	and.w	r3, r3, #7
 800b5b4:	683a      	ldr	r2, [r7, #0]
 800b5b6:	429a      	cmp	r2, r3
 800b5b8:	d91b      	bls.n	800b5f2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b5ba:	4b94      	ldr	r3, [pc, #592]	; (800b80c <HAL_RCC_ClockConfig+0x274>)
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	f023 0207 	bic.w	r2, r3, #7
 800b5c2:	4992      	ldr	r1, [pc, #584]	; (800b80c <HAL_RCC_ClockConfig+0x274>)
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	4313      	orrs	r3, r2
 800b5c8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b5ca:	f7fa fe81 	bl	80062d0 <HAL_GetTick>
 800b5ce:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b5d0:	e008      	b.n	800b5e4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800b5d2:	f7fa fe7d 	bl	80062d0 <HAL_GetTick>
 800b5d6:	4602      	mov	r2, r0
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	1ad3      	subs	r3, r2, r3
 800b5dc:	2b02      	cmp	r3, #2
 800b5de:	d901      	bls.n	800b5e4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800b5e0:	2303      	movs	r3, #3
 800b5e2:	e10e      	b.n	800b802 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b5e4:	4b89      	ldr	r3, [pc, #548]	; (800b80c <HAL_RCC_ClockConfig+0x274>)
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	f003 0307 	and.w	r3, r3, #7
 800b5ec:	683a      	ldr	r2, [r7, #0]
 800b5ee:	429a      	cmp	r2, r3
 800b5f0:	d1ef      	bne.n	800b5d2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	f003 0302 	and.w	r3, r3, #2
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d016      	beq.n	800b62c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	689b      	ldr	r3, [r3, #8]
 800b602:	4618      	mov	r0, r3
 800b604:	f7ff fb05 	bl	800ac12 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800b608:	f7fa fe62 	bl	80062d0 <HAL_GetTick>
 800b60c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800b60e:	e008      	b.n	800b622 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800b610:	f7fa fe5e 	bl	80062d0 <HAL_GetTick>
 800b614:	4602      	mov	r2, r0
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	1ad3      	subs	r3, r2, r3
 800b61a:	2b02      	cmp	r3, #2
 800b61c:	d901      	bls.n	800b622 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800b61e:	2303      	movs	r3, #3
 800b620:	e0ef      	b.n	800b802 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800b622:	f7ff fbff 	bl	800ae24 <LL_RCC_IsActiveFlag_HPRE>
 800b626:	4603      	mov	r3, r0
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d0f1      	beq.n	800b610 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	f003 0320 	and.w	r3, r3, #32
 800b634:	2b00      	cmp	r3, #0
 800b636:	d016      	beq.n	800b666 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	695b      	ldr	r3, [r3, #20]
 800b63c:	4618      	mov	r0, r3
 800b63e:	f7ff fafc 	bl	800ac3a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800b642:	f7fa fe45 	bl	80062d0 <HAL_GetTick>
 800b646:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800b648:	e008      	b.n	800b65c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800b64a:	f7fa fe41 	bl	80062d0 <HAL_GetTick>
 800b64e:	4602      	mov	r2, r0
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	1ad3      	subs	r3, r2, r3
 800b654:	2b02      	cmp	r3, #2
 800b656:	d901      	bls.n	800b65c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800b658:	2303      	movs	r3, #3
 800b65a:	e0d2      	b.n	800b802 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800b65c:	f7ff fbf4 	bl	800ae48 <LL_RCC_IsActiveFlag_C2HPRE>
 800b660:	4603      	mov	r3, r0
 800b662:	2b00      	cmp	r3, #0
 800b664:	d0f1      	beq.n	800b64a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d016      	beq.n	800b6a0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	699b      	ldr	r3, [r3, #24]
 800b676:	4618      	mov	r0, r3
 800b678:	f7ff faf5 	bl	800ac66 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800b67c:	f7fa fe28 	bl	80062d0 <HAL_GetTick>
 800b680:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800b682:	e008      	b.n	800b696 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800b684:	f7fa fe24 	bl	80062d0 <HAL_GetTick>
 800b688:	4602      	mov	r2, r0
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	1ad3      	subs	r3, r2, r3
 800b68e:	2b02      	cmp	r3, #2
 800b690:	d901      	bls.n	800b696 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800b692:	2303      	movs	r3, #3
 800b694:	e0b5      	b.n	800b802 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800b696:	f7ff fbea 	bl	800ae6e <LL_RCC_IsActiveFlag_SHDHPRE>
 800b69a:	4603      	mov	r3, r0
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d0f1      	beq.n	800b684 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	f003 0304 	and.w	r3, r3, #4
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d016      	beq.n	800b6da <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	68db      	ldr	r3, [r3, #12]
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	f7ff faef 	bl	800ac94 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800b6b6:	f7fa fe0b 	bl	80062d0 <HAL_GetTick>
 800b6ba:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800b6bc:	e008      	b.n	800b6d0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800b6be:	f7fa fe07 	bl	80062d0 <HAL_GetTick>
 800b6c2:	4602      	mov	r2, r0
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	1ad3      	subs	r3, r2, r3
 800b6c8:	2b02      	cmp	r3, #2
 800b6ca:	d901      	bls.n	800b6d0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800b6cc:	2303      	movs	r3, #3
 800b6ce:	e098      	b.n	800b802 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800b6d0:	f7ff fbe0 	bl	800ae94 <LL_RCC_IsActiveFlag_PPRE1>
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d0f1      	beq.n	800b6be <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	f003 0308 	and.w	r3, r3, #8
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d017      	beq.n	800b716 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	691b      	ldr	r3, [r3, #16]
 800b6ea:	00db      	lsls	r3, r3, #3
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	f7ff fae5 	bl	800acbc <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800b6f2:	f7fa fded 	bl	80062d0 <HAL_GetTick>
 800b6f6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800b6f8:	e008      	b.n	800b70c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800b6fa:	f7fa fde9 	bl	80062d0 <HAL_GetTick>
 800b6fe:	4602      	mov	r2, r0
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	1ad3      	subs	r3, r2, r3
 800b704:	2b02      	cmp	r3, #2
 800b706:	d901      	bls.n	800b70c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800b708:	2303      	movs	r3, #3
 800b70a:	e07a      	b.n	800b802 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800b70c:	f7ff fbd4 	bl	800aeb8 <LL_RCC_IsActiveFlag_PPRE2>
 800b710:	4603      	mov	r3, r0
 800b712:	2b00      	cmp	r3, #0
 800b714:	d0f1      	beq.n	800b6fa <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	f003 0301 	and.w	r3, r3, #1
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d043      	beq.n	800b7aa <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	685b      	ldr	r3, [r3, #4]
 800b726:	2b02      	cmp	r3, #2
 800b728:	d106      	bne.n	800b738 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800b72a:	f7ff f885 	bl	800a838 <LL_RCC_HSE_IsReady>
 800b72e:	4603      	mov	r3, r0
 800b730:	2b00      	cmp	r3, #0
 800b732:	d11e      	bne.n	800b772 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800b734:	2301      	movs	r3, #1
 800b736:	e064      	b.n	800b802 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	685b      	ldr	r3, [r3, #4]
 800b73c:	2b03      	cmp	r3, #3
 800b73e:	d106      	bne.n	800b74e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800b740:	f7ff fb2d 	bl	800ad9e <LL_RCC_PLL_IsReady>
 800b744:	4603      	mov	r3, r0
 800b746:	2b00      	cmp	r3, #0
 800b748:	d113      	bne.n	800b772 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800b74a:	2301      	movs	r3, #1
 800b74c:	e059      	b.n	800b802 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	685b      	ldr	r3, [r3, #4]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d106      	bne.n	800b764 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800b756:	f7ff f9ed 	bl	800ab34 <LL_RCC_MSI_IsReady>
 800b75a:	4603      	mov	r3, r0
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d108      	bne.n	800b772 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800b760:	2301      	movs	r3, #1
 800b762:	e04e      	b.n	800b802 <HAL_RCC_ClockConfig+0x26a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800b764:	f7ff f898 	bl	800a898 <LL_RCC_HSI_IsReady>
 800b768:	4603      	mov	r3, r0
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d101      	bne.n	800b772 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800b76e:	2301      	movs	r3, #1
 800b770:	e047      	b.n	800b802 <HAL_RCC_ClockConfig+0x26a>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	685b      	ldr	r3, [r3, #4]
 800b776:	4618      	mov	r0, r3
 800b778:	f7ff fa2b 	bl	800abd2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b77c:	f7fa fda8 	bl	80062d0 <HAL_GetTick>
 800b780:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b782:	e00a      	b.n	800b79a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b784:	f7fa fda4 	bl	80062d0 <HAL_GetTick>
 800b788:	4602      	mov	r2, r0
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	1ad3      	subs	r3, r2, r3
 800b78e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b792:	4293      	cmp	r3, r2
 800b794:	d901      	bls.n	800b79a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800b796:	2303      	movs	r3, #3
 800b798:	e033      	b.n	800b802 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b79a:	f7ff fa2e 	bl	800abfa <LL_RCC_GetSysClkSource>
 800b79e:	4602      	mov	r2, r0
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	685b      	ldr	r3, [r3, #4]
 800b7a4:	009b      	lsls	r3, r3, #2
 800b7a6:	429a      	cmp	r2, r3
 800b7a8:	d1ec      	bne.n	800b784 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b7aa:	4b18      	ldr	r3, [pc, #96]	; (800b80c <HAL_RCC_ClockConfig+0x274>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	f003 0307 	and.w	r3, r3, #7
 800b7b2:	683a      	ldr	r2, [r7, #0]
 800b7b4:	429a      	cmp	r2, r3
 800b7b6:	d21b      	bcs.n	800b7f0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b7b8:	4b14      	ldr	r3, [pc, #80]	; (800b80c <HAL_RCC_ClockConfig+0x274>)
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	f023 0207 	bic.w	r2, r3, #7
 800b7c0:	4912      	ldr	r1, [pc, #72]	; (800b80c <HAL_RCC_ClockConfig+0x274>)
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	4313      	orrs	r3, r2
 800b7c6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b7c8:	f7fa fd82 	bl	80062d0 <HAL_GetTick>
 800b7cc:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b7ce:	e008      	b.n	800b7e2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800b7d0:	f7fa fd7e 	bl	80062d0 <HAL_GetTick>
 800b7d4:	4602      	mov	r2, r0
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	1ad3      	subs	r3, r2, r3
 800b7da:	2b02      	cmp	r3, #2
 800b7dc:	d901      	bls.n	800b7e2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800b7de:	2303      	movs	r3, #3
 800b7e0:	e00f      	b.n	800b802 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b7e2:	4b0a      	ldr	r3, [pc, #40]	; (800b80c <HAL_RCC_ClockConfig+0x274>)
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	f003 0307 	and.w	r3, r3, #7
 800b7ea:	683a      	ldr	r2, [r7, #0]
 800b7ec:	429a      	cmp	r2, r3
 800b7ee:	d1ef      	bne.n	800b7d0 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 800b7f0:	f7f9 fec2 	bl	8005578 <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800b7f4:	f7fa fd78 	bl	80062e8 <HAL_GetTickPrio>
 800b7f8:	4603      	mov	r3, r0
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	f7f9 fd96 	bl	800532c <HAL_InitTick>
 800b800:	4603      	mov	r3, r0
}
 800b802:	4618      	mov	r0, r3
 800b804:	3710      	adds	r7, #16
 800b806:	46bd      	mov	sp, r7
 800b808:	bd80      	pop	{r7, pc}
 800b80a:	bf00      	nop
 800b80c:	58004000 	.word	0x58004000

0800b810 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b810:	b590      	push	{r4, r7, lr}
 800b812:	b085      	sub	sp, #20
 800b814:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b816:	f7ff f9f0 	bl	800abfa <LL_RCC_GetSysClkSource>
 800b81a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d10a      	bne.n	800b838 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800b822:	f7ff f9ac 	bl	800ab7e <LL_RCC_MSI_GetRange>
 800b826:	4603      	mov	r3, r0
 800b828:	091b      	lsrs	r3, r3, #4
 800b82a:	f003 030f 	and.w	r3, r3, #15
 800b82e:	4a2a      	ldr	r2, [pc, #168]	; (800b8d8 <HAL_RCC_GetSysClockFreq+0xc8>)
 800b830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b834:	60fb      	str	r3, [r7, #12]
 800b836:	e04a      	b.n	800b8ce <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2b04      	cmp	r3, #4
 800b83c:	d102      	bne.n	800b844 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b83e:	4b27      	ldr	r3, [pc, #156]	; (800b8dc <HAL_RCC_GetSysClockFreq+0xcc>)
 800b840:	60fb      	str	r3, [r7, #12]
 800b842:	e044      	b.n	800b8ce <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2b08      	cmp	r3, #8
 800b848:	d10a      	bne.n	800b860 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800b84a:	f7fe ffa7 	bl	800a79c <LL_RCC_HSE_IsEnabledDiv2>
 800b84e:	4603      	mov	r3, r0
 800b850:	2b01      	cmp	r3, #1
 800b852:	d102      	bne.n	800b85a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800b854:	4b21      	ldr	r3, [pc, #132]	; (800b8dc <HAL_RCC_GetSysClockFreq+0xcc>)
 800b856:	60fb      	str	r3, [r7, #12]
 800b858:	e039      	b.n	800b8ce <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800b85a:	4b21      	ldr	r3, [pc, #132]	; (800b8e0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800b85c:	60fb      	str	r3, [r7, #12]
 800b85e:	e036      	b.n	800b8ce <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800b860:	f7ff fad4 	bl	800ae0c <LL_RCC_PLL_GetMainSource>
 800b864:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	2b02      	cmp	r3, #2
 800b86a:	d002      	beq.n	800b872 <HAL_RCC_GetSysClockFreq+0x62>
 800b86c:	2b03      	cmp	r3, #3
 800b86e:	d003      	beq.n	800b878 <HAL_RCC_GetSysClockFreq+0x68>
 800b870:	e00d      	b.n	800b88e <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800b872:	4b1a      	ldr	r3, [pc, #104]	; (800b8dc <HAL_RCC_GetSysClockFreq+0xcc>)
 800b874:	60bb      	str	r3, [r7, #8]
        break;
 800b876:	e015      	b.n	800b8a4 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800b878:	f7fe ff90 	bl	800a79c <LL_RCC_HSE_IsEnabledDiv2>
 800b87c:	4603      	mov	r3, r0
 800b87e:	2b01      	cmp	r3, #1
 800b880:	d102      	bne.n	800b888 <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800b882:	4b16      	ldr	r3, [pc, #88]	; (800b8dc <HAL_RCC_GetSysClockFreq+0xcc>)
 800b884:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800b886:	e00d      	b.n	800b8a4 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 800b888:	4b15      	ldr	r3, [pc, #84]	; (800b8e0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800b88a:	60bb      	str	r3, [r7, #8]
        break;
 800b88c:	e00a      	b.n	800b8a4 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800b88e:	f7ff f976 	bl	800ab7e <LL_RCC_MSI_GetRange>
 800b892:	4603      	mov	r3, r0
 800b894:	091b      	lsrs	r3, r3, #4
 800b896:	f003 030f 	and.w	r3, r3, #15
 800b89a:	4a0f      	ldr	r2, [pc, #60]	; (800b8d8 <HAL_RCC_GetSysClockFreq+0xc8>)
 800b89c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b8a0:	60bb      	str	r3, [r7, #8]
        break;
 800b8a2:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 800b8a4:	f7ff fa8d 	bl	800adc2 <LL_RCC_PLL_GetN>
 800b8a8:	4602      	mov	r2, r0
 800b8aa:	68bb      	ldr	r3, [r7, #8]
 800b8ac:	fb03 f402 	mul.w	r4, r3, r2
 800b8b0:	f7ff faa0 	bl	800adf4 <LL_RCC_PLL_GetDivider>
 800b8b4:	4603      	mov	r3, r0
 800b8b6:	091b      	lsrs	r3, r3, #4
 800b8b8:	3301      	adds	r3, #1
 800b8ba:	fbb4 f4f3 	udiv	r4, r4, r3
 800b8be:	f7ff fa8d 	bl	800addc <LL_RCC_PLL_GetR>
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	0f5b      	lsrs	r3, r3, #29
 800b8c6:	3301      	adds	r3, #1
 800b8c8:	fbb4 f3f3 	udiv	r3, r4, r3
 800b8cc:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
}
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	3714      	adds	r7, #20
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	bd90      	pop	{r4, r7, pc}
 800b8d8:	08017890 	.word	0x08017890
 800b8dc:	00f42400 	.word	0x00f42400
 800b8e0:	01e84800 	.word	0x01e84800

0800b8e4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b8e4:	b598      	push	{r3, r4, r7, lr}
 800b8e6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800b8e8:	f7ff ff92 	bl	800b810 <HAL_RCC_GetSysClockFreq>
 800b8ec:	4604      	mov	r4, r0
 800b8ee:	f7ff f9f9 	bl	800ace4 <LL_RCC_GetAHBPrescaler>
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	091b      	lsrs	r3, r3, #4
 800b8f6:	f003 030f 	and.w	r3, r3, #15
 800b8fa:	4a03      	ldr	r2, [pc, #12]	; (800b908 <HAL_RCC_GetHCLKFreq+0x24>)
 800b8fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b900:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800b904:	4618      	mov	r0, r3
 800b906:	bd98      	pop	{r3, r4, r7, pc}
 800b908:	08017830 	.word	0x08017830

0800b90c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b90c:	b598      	push	{r3, r4, r7, lr}
 800b90e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800b910:	f7ff ffe8 	bl	800b8e4 <HAL_RCC_GetHCLKFreq>
 800b914:	4604      	mov	r4, r0
 800b916:	f7ff fa18 	bl	800ad4a <LL_RCC_GetAPB2Prescaler>
 800b91a:	4603      	mov	r3, r0
 800b91c:	0adb      	lsrs	r3, r3, #11
 800b91e:	f003 0307 	and.w	r3, r3, #7
 800b922:	4a04      	ldr	r2, [pc, #16]	; (800b934 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b928:	f003 031f 	and.w	r3, r3, #31
 800b92c:	fa24 f303 	lsr.w	r3, r4, r3
}
 800b930:	4618      	mov	r0, r3
 800b932:	bd98      	pop	{r3, r4, r7, pc}
 800b934:	08017870 	.word	0x08017870

0800b938 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b082      	sub	sp, #8
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
 800b940:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |  \
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	226f      	movs	r2, #111	; 0x6f
 800b946:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 800b948:	f7ff f957 	bl	800abfa <LL_RCC_GetSysClkSource>
 800b94c:	4602      	mov	r2, r0
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 800b952:	f7ff f9c7 	bl	800ace4 <LL_RCC_GetAHBPrescaler>
 800b956:	4602      	mov	r2, r0
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 800b95c:	f7ff f9e9 	bl	800ad32 <LL_RCC_GetAPB1Prescaler>
 800b960:	4602      	mov	r2, r0
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 800b966:	f7ff f9f0 	bl	800ad4a <LL_RCC_GetAPB2Prescaler>
 800b96a:	4602      	mov	r2, r0
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 800b970:	f7ff f9c4 	bl	800acfc <LL_C2_RCC_GetAHBPrescaler>
 800b974:	4602      	mov	r2, r0
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 800b97a:	f7ff f9cc 	bl	800ad16 <LL_RCC_GetAHB4Prescaler>
 800b97e:	4602      	mov	r2, r0
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800b984:	4b04      	ldr	r3, [pc, #16]	; (800b998 <HAL_RCC_GetClockConfig+0x60>)
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	f003 0207 	and.w	r2, r3, #7
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	601a      	str	r2, [r3, #0]
}
 800b990:	bf00      	nop
 800b992:	3708      	adds	r7, #8
 800b994:	46bd      	mov	sp, r7
 800b996:	bd80      	pop	{r7, pc}
 800b998:	58004000 	.word	0x58004000

0800b99c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800b99c:	b590      	push	{r4, r7, lr}
 800b99e:	b085      	sub	sp, #20
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2bb0      	cmp	r3, #176	; 0xb0
 800b9a8:	d903      	bls.n	800b9b2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800b9aa:	4b15      	ldr	r3, [pc, #84]	; (800ba00 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800b9ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9ae:	60fb      	str	r3, [r7, #12]
 800b9b0:	e007      	b.n	800b9c2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	091b      	lsrs	r3, r3, #4
 800b9b6:	f003 030f 	and.w	r3, r3, #15
 800b9ba:	4a11      	ldr	r2, [pc, #68]	; (800ba00 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800b9bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b9c0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800b9c2:	f7ff f9a8 	bl	800ad16 <LL_RCC_GetAHB4Prescaler>
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	091b      	lsrs	r3, r3, #4
 800b9ca:	f003 030f 	and.w	r3, r3, #15
 800b9ce:	4a0d      	ldr	r2, [pc, #52]	; (800ba04 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800b9d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b9d4:	68fa      	ldr	r2, [r7, #12]
 800b9d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9da:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800b9dc:	68bb      	ldr	r3, [r7, #8]
 800b9de:	4a0a      	ldr	r2, [pc, #40]	; (800ba08 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800b9e0:	fba2 2303 	umull	r2, r3, r2, r3
 800b9e4:	0c9c      	lsrs	r4, r3, #18
 800b9e6:	f7fe fecb 	bl	800a780 <HAL_PWREx_GetVoltageRange>
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	4619      	mov	r1, r3
 800b9ee:	4620      	mov	r0, r4
 800b9f0:	f000 f80c 	bl	800ba0c <RCC_SetFlashLatency>
 800b9f4:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	3714      	adds	r7, #20
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	bd90      	pop	{r4, r7, pc}
 800b9fe:	bf00      	nop
 800ba00:	08017890 	.word	0x08017890
 800ba04:	08017830 	.word	0x08017830
 800ba08:	431bde83 	.word	0x431bde83

0800ba0c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800ba0c:	b590      	push	{r4, r7, lr}
 800ba0e:	b093      	sub	sp, #76	; 0x4c
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
 800ba14:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800ba16:	4b39      	ldr	r3, [pc, #228]	; (800bafc <RCC_SetFlashLatency+0xf0>)
 800ba18:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800ba1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ba1e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800ba22:	4a37      	ldr	r2, [pc, #220]	; (800bb00 <RCC_SetFlashLatency+0xf4>)
 800ba24:	f107 031c 	add.w	r3, r7, #28
 800ba28:	ca07      	ldmia	r2, {r0, r1, r2}
 800ba2a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800ba2e:	4b35      	ldr	r3, [pc, #212]	; (800bb04 <RCC_SetFlashLatency+0xf8>)
 800ba30:	f107 040c 	add.w	r4, r7, #12
 800ba34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ba36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ba44:	d11c      	bne.n	800ba80 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800ba46:	2300      	movs	r3, #0
 800ba48:	643b      	str	r3, [r7, #64]	; 0x40
 800ba4a:	e015      	b.n	800ba78 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800ba4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba4e:	009b      	lsls	r3, r3, #2
 800ba50:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800ba54:	4413      	add	r3, r2
 800ba56:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800ba5a:	687a      	ldr	r2, [r7, #4]
 800ba5c:	429a      	cmp	r2, r3
 800ba5e:	d808      	bhi.n	800ba72 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800ba60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba62:	009b      	lsls	r3, r3, #2
 800ba64:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800ba68:	4413      	add	r3, r2
 800ba6a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800ba6e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800ba70:	e022      	b.n	800bab8 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800ba72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba74:	3301      	adds	r3, #1
 800ba76:	643b      	str	r3, [r7, #64]	; 0x40
 800ba78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba7a:	2b03      	cmp	r3, #3
 800ba7c:	d9e6      	bls.n	800ba4c <RCC_SetFlashLatency+0x40>
 800ba7e:	e01b      	b.n	800bab8 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800ba80:	2300      	movs	r3, #0
 800ba82:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba84:	e015      	b.n	800bab2 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800ba86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba88:	009b      	lsls	r3, r3, #2
 800ba8a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800ba8e:	4413      	add	r3, r2
 800ba90:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800ba94:	687a      	ldr	r2, [r7, #4]
 800ba96:	429a      	cmp	r2, r3
 800ba98:	d808      	bhi.n	800baac <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800ba9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba9c:	009b      	lsls	r3, r3, #2
 800ba9e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800baa2:	4413      	add	r3, r2
 800baa4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800baa8:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800baaa:	e005      	b.n	800bab8 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800baac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800baae:	3301      	adds	r3, #1
 800bab0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bab2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bab4:	2b02      	cmp	r3, #2
 800bab6:	d9e6      	bls.n	800ba86 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 800bab8:	4b13      	ldr	r3, [pc, #76]	; (800bb08 <RCC_SetFlashLatency+0xfc>)
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	f023 0207 	bic.w	r2, r3, #7
 800bac0:	4911      	ldr	r1, [pc, #68]	; (800bb08 <RCC_SetFlashLatency+0xfc>)
 800bac2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bac4:	4313      	orrs	r3, r2
 800bac6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800bac8:	f7fa fc02 	bl	80062d0 <HAL_GetTick>
 800bacc:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800bace:	e008      	b.n	800bae2 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800bad0:	f7fa fbfe 	bl	80062d0 <HAL_GetTick>
 800bad4:	4602      	mov	r2, r0
 800bad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bad8:	1ad3      	subs	r3, r2, r3
 800bada:	2b02      	cmp	r3, #2
 800badc:	d901      	bls.n	800bae2 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 800bade:	2303      	movs	r3, #3
 800bae0:	e007      	b.n	800baf2 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800bae2:	4b09      	ldr	r3, [pc, #36]	; (800bb08 <RCC_SetFlashLatency+0xfc>)
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	f003 0307 	and.w	r3, r3, #7
 800baea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800baec:	429a      	cmp	r2, r3
 800baee:	d1ef      	bne.n	800bad0 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 800baf0:	2300      	movs	r3, #0
}
 800baf2:	4618      	mov	r0, r3
 800baf4:	374c      	adds	r7, #76	; 0x4c
 800baf6:	46bd      	mov	sp, r7
 800baf8:	bd90      	pop	{r4, r7, pc}
 800bafa:	bf00      	nop
 800bafc:	08017228 	.word	0x08017228
 800bb00:	08017238 	.word	0x08017238
 800bb04:	08017244 	.word	0x08017244
 800bb08:	58004000 	.word	0x58004000

0800bb0c <LL_RCC_LSE_IsEnabled>:
{
 800bb0c:	b480      	push	{r7}
 800bb0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800bb10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bb14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb18:	f003 0301 	and.w	r3, r3, #1
 800bb1c:	2b01      	cmp	r3, #1
 800bb1e:	d101      	bne.n	800bb24 <LL_RCC_LSE_IsEnabled+0x18>
 800bb20:	2301      	movs	r3, #1
 800bb22:	e000      	b.n	800bb26 <LL_RCC_LSE_IsEnabled+0x1a>
 800bb24:	2300      	movs	r3, #0
}
 800bb26:	4618      	mov	r0, r3
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2e:	4770      	bx	lr

0800bb30 <LL_RCC_LSE_IsReady>:
{
 800bb30:	b480      	push	{r7}
 800bb32:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800bb34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bb38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb3c:	f003 0302 	and.w	r3, r3, #2
 800bb40:	2b02      	cmp	r3, #2
 800bb42:	d101      	bne.n	800bb48 <LL_RCC_LSE_IsReady+0x18>
 800bb44:	2301      	movs	r3, #1
 800bb46:	e000      	b.n	800bb4a <LL_RCC_LSE_IsReady+0x1a>
 800bb48:	2300      	movs	r3, #0
}
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb52:	4770      	bx	lr

0800bb54 <LL_RCC_SetRFWKPClockSource>:
{
 800bb54:	b480      	push	{r7}
 800bb56:	b083      	sub	sp, #12
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800bb5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bb60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bb64:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800bb68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	4313      	orrs	r3, r2
 800bb70:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800bb74:	bf00      	nop
 800bb76:	370c      	adds	r7, #12
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7e:	4770      	bx	lr

0800bb80 <LL_RCC_SetSMPSClockSource>:
{
 800bb80:	b480      	push	{r7}
 800bb82:	b083      	sub	sp, #12
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800bb88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bb8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb8e:	f023 0203 	bic.w	r2, r3, #3
 800bb92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	4313      	orrs	r3, r2
 800bb9a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800bb9c:	bf00      	nop
 800bb9e:	370c      	adds	r7, #12
 800bba0:	46bd      	mov	sp, r7
 800bba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba6:	4770      	bx	lr

0800bba8 <LL_RCC_SetSMPSPrescaler>:
{
 800bba8:	b480      	push	{r7}
 800bbaa:	b083      	sub	sp, #12
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800bbb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bbb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbb6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800bbba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	4313      	orrs	r3, r2
 800bbc2:	624b      	str	r3, [r1, #36]	; 0x24
}
 800bbc4:	bf00      	nop
 800bbc6:	370c      	adds	r7, #12
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbce:	4770      	bx	lr

0800bbd0 <LL_RCC_SetUSARTClockSource>:
{
 800bbd0:	b480      	push	{r7}
 800bbd2:	b083      	sub	sp, #12
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800bbd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bbdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bbe0:	f023 0203 	bic.w	r2, r3, #3
 800bbe4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	4313      	orrs	r3, r2
 800bbec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800bbf0:	bf00      	nop
 800bbf2:	370c      	adds	r7, #12
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfa:	4770      	bx	lr

0800bbfc <LL_RCC_SetLPUARTClockSource>:
{
 800bbfc:	b480      	push	{r7}
 800bbfe:	b083      	sub	sp, #12
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800bc04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bc08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc0c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800bc10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	4313      	orrs	r3, r2
 800bc18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800bc1c:	bf00      	nop
 800bc1e:	370c      	adds	r7, #12
 800bc20:	46bd      	mov	sp, r7
 800bc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc26:	4770      	bx	lr

0800bc28 <LL_RCC_SetI2CClockSource>:
{
 800bc28:	b480      	push	{r7}
 800bc2a:	b083      	sub	sp, #12
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800bc30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bc34:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	091b      	lsrs	r3, r3, #4
 800bc3c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800bc40:	43db      	mvns	r3, r3
 800bc42:	401a      	ands	r2, r3
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	011b      	lsls	r3, r3, #4
 800bc48:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800bc4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800bc50:	4313      	orrs	r3, r2
 800bc52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800bc56:	bf00      	nop
 800bc58:	370c      	adds	r7, #12
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc60:	4770      	bx	lr

0800bc62 <LL_RCC_SetLPTIMClockSource>:
{
 800bc62:	b480      	push	{r7}
 800bc64:	b083      	sub	sp, #12
 800bc66:	af00      	add	r7, sp, #0
 800bc68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800bc6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bc6e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	0c1b      	lsrs	r3, r3, #16
 800bc76:	041b      	lsls	r3, r3, #16
 800bc78:	43db      	mvns	r3, r3
 800bc7a:	401a      	ands	r2, r3
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	041b      	lsls	r3, r3, #16
 800bc80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800bc84:	4313      	orrs	r3, r2
 800bc86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800bc8a:	bf00      	nop
 800bc8c:	370c      	adds	r7, #12
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc94:	4770      	bx	lr

0800bc96 <LL_RCC_SetSAIClockSource>:
{
 800bc96:	b480      	push	{r7}
 800bc98:	b083      	sub	sp, #12
 800bc9a:	af00      	add	r7, sp, #0
 800bc9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800bc9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bca6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800bcaa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	4313      	orrs	r3, r2
 800bcb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800bcb6:	bf00      	nop
 800bcb8:	370c      	adds	r7, #12
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc0:	4770      	bx	lr

0800bcc2 <LL_RCC_SetRNGClockSource>:
{
 800bcc2:	b480      	push	{r7}
 800bcc4:	b083      	sub	sp, #12
 800bcc6:	af00      	add	r7, sp, #0
 800bcc8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800bcca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bcce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bcd2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800bcd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	4313      	orrs	r3, r2
 800bcde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800bce2:	bf00      	nop
 800bce4:	370c      	adds	r7, #12
 800bce6:	46bd      	mov	sp, r7
 800bce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcec:	4770      	bx	lr

0800bcee <LL_RCC_SetCLK48ClockSource>:
{
 800bcee:	b480      	push	{r7}
 800bcf0:	b083      	sub	sp, #12
 800bcf2:	af00      	add	r7, sp, #0
 800bcf4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800bcf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bcfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bcfe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800bd02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	4313      	orrs	r3, r2
 800bd0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800bd0e:	bf00      	nop
 800bd10:	370c      	adds	r7, #12
 800bd12:	46bd      	mov	sp, r7
 800bd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd18:	4770      	bx	lr

0800bd1a <LL_RCC_SetUSBClockSource>:
{
 800bd1a:	b580      	push	{r7, lr}
 800bd1c:	b082      	sub	sp, #8
 800bd1e:	af00      	add	r7, sp, #0
 800bd20:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800bd22:	6878      	ldr	r0, [r7, #4]
 800bd24:	f7ff ffe3 	bl	800bcee <LL_RCC_SetCLK48ClockSource>
}
 800bd28:	bf00      	nop
 800bd2a:	3708      	adds	r7, #8
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	bd80      	pop	{r7, pc}

0800bd30 <LL_RCC_SetADCClockSource>:
{
 800bd30:	b480      	push	{r7}
 800bd32:	b083      	sub	sp, #12
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800bd38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bd3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd40:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800bd44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	4313      	orrs	r3, r2
 800bd4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800bd50:	bf00      	nop
 800bd52:	370c      	adds	r7, #12
 800bd54:	46bd      	mov	sp, r7
 800bd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5a:	4770      	bx	lr

0800bd5c <LL_RCC_SetRTCClockSource>:
{
 800bd5c:	b480      	push	{r7}
 800bd5e:	b083      	sub	sp, #12
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800bd64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bd68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bd70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	4313      	orrs	r3, r2
 800bd78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800bd7c:	bf00      	nop
 800bd7e:	370c      	adds	r7, #12
 800bd80:	46bd      	mov	sp, r7
 800bd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd86:	4770      	bx	lr

0800bd88 <LL_RCC_GetRTCClockSource>:
{
 800bd88:	b480      	push	{r7}
 800bd8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800bd8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bd90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd94:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800bd98:	4618      	mov	r0, r3
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda0:	4770      	bx	lr

0800bda2 <LL_RCC_ForceBackupDomainReset>:
{
 800bda2:	b480      	push	{r7}
 800bda4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800bda6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bdaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bdae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800bdb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bdb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800bdba:	bf00      	nop
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc2:	4770      	bx	lr

0800bdc4 <LL_RCC_ReleaseBackupDomainReset>:
{
 800bdc4:	b480      	push	{r7}
 800bdc6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800bdc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bdcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bdd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800bdd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bdd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800bddc:	bf00      	nop
 800bdde:	46bd      	mov	sp, r7
 800bde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde4:	4770      	bx	lr

0800bde6 <LL_RCC_PLLSAI1_Enable>:
{
 800bde6:	b480      	push	{r7}
 800bde8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800bdea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800bdf4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bdf8:	6013      	str	r3, [r2, #0]
}
 800bdfa:	bf00      	nop
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be02:	4770      	bx	lr

0800be04 <LL_RCC_PLLSAI1_Disable>:
{
 800be04:	b480      	push	{r7}
 800be06:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800be08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800be12:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800be16:	6013      	str	r3, [r2, #0]
}
 800be18:	bf00      	nop
 800be1a:	46bd      	mov	sp, r7
 800be1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be20:	4770      	bx	lr

0800be22 <LL_RCC_PLLSAI1_IsReady>:
{
 800be22:	b480      	push	{r7}
 800be24:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800be26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800be30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800be34:	d101      	bne.n	800be3a <LL_RCC_PLLSAI1_IsReady+0x18>
 800be36:	2301      	movs	r3, #1
 800be38:	e000      	b.n	800be3c <LL_RCC_PLLSAI1_IsReady+0x1a>
 800be3a:	2300      	movs	r3, #0
}
 800be3c:	4618      	mov	r0, r3
 800be3e:	46bd      	mov	sp, r7
 800be40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be44:	4770      	bx	lr

0800be46 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800be46:	b580      	push	{r7, lr}
 800be48:	b088      	sub	sp, #32
 800be4a:	af00      	add	r7, sp, #0
 800be4c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800be4e:	2300      	movs	r3, #0
 800be50:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800be52:	2300      	movs	r3, #0
 800be54:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d033      	beq.n	800beca <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800be6a:	d00c      	beq.n	800be86 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800be6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800be70:	d802      	bhi.n	800be78 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800be72:	2b00      	cmp	r3, #0
 800be74:	d010      	beq.n	800be98 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800be76:	e017      	b.n	800bea8 <HAL_RCCEx_PeriphCLKConfig+0x62>
 800be78:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800be7c:	d017      	beq.n	800beae <HAL_RCCEx_PeriphCLKConfig+0x68>
 800be7e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800be82:	d016      	beq.n	800beb2 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 800be84:	e010      	b.n	800bea8 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800be86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800be8a:	68db      	ldr	r3, [r3, #12]
 800be8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800be90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800be94:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800be96:	e00d      	b.n	800beb4 <HAL_RCCEx_PeriphCLKConfig+0x6e>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	3304      	adds	r3, #4
 800be9c:	4618      	mov	r0, r3
 800be9e:	f000 f947 	bl	800c130 <RCCEx_PLLSAI1_ConfigNP>
 800bea2:	4603      	mov	r3, r0
 800bea4:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800bea6:	e005      	b.n	800beb4 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800bea8:	2301      	movs	r3, #1
 800beaa:	77fb      	strb	r3, [r7, #31]
        break;
 800beac:	e002      	b.n	800beb4 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 800beae:	bf00      	nop
 800beb0:	e000      	b.n	800beb4 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 800beb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800beb4:	7ffb      	ldrb	r3, [r7, #31]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d105      	bne.n	800bec6 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bebe:	4618      	mov	r0, r3
 800bec0:	f7ff fee9 	bl	800bc96 <LL_RCC_SetSAIClockSource>
 800bec4:	e001      	b.n	800beca <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bec6:	7ffb      	ldrb	r3, [r7, #31]
 800bec8:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d046      	beq.n	800bf64 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800bed6:	f7ff ff57 	bl	800bd88 <LL_RCC_GetRTCClockSource>
 800beda:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bee0:	69ba      	ldr	r2, [r7, #24]
 800bee2:	429a      	cmp	r2, r3
 800bee4:	d03c      	beq.n	800bf60 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800bee6:	f7fe fc3b 	bl	800a760 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800beea:	69bb      	ldr	r3, [r7, #24]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d105      	bne.n	800befc <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bef4:	4618      	mov	r0, r3
 800bef6:	f7ff ff31 	bl	800bd5c <LL_RCC_SetRTCClockSource>
 800befa:	e02e      	b.n	800bf5a <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800befc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bf00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf04:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800bf06:	f7ff ff4c 	bl	800bda2 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800bf0a:	f7ff ff5b 	bl	800bdc4 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800bf0e:	697b      	ldr	r3, [r7, #20]
 800bf10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf18:	4313      	orrs	r3, r2
 800bf1a:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800bf1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800bf20:	697b      	ldr	r3, [r7, #20]
 800bf22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800bf26:	f7ff fdf1 	bl	800bb0c <LL_RCC_LSE_IsEnabled>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	2b01      	cmp	r3, #1
 800bf2e:	d114      	bne.n	800bf5a <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800bf30:	f7fa f9ce 	bl	80062d0 <HAL_GetTick>
 800bf34:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800bf36:	e00b      	b.n	800bf50 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bf38:	f7fa f9ca 	bl	80062d0 <HAL_GetTick>
 800bf3c:	4602      	mov	r2, r0
 800bf3e:	693b      	ldr	r3, [r7, #16]
 800bf40:	1ad3      	subs	r3, r2, r3
 800bf42:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf46:	4293      	cmp	r3, r2
 800bf48:	d902      	bls.n	800bf50 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 800bf4a:	2303      	movs	r3, #3
 800bf4c:	77fb      	strb	r3, [r7, #31]
              break;
 800bf4e:	e004      	b.n	800bf5a <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 800bf50:	f7ff fdee 	bl	800bb30 <LL_RCC_LSE_IsReady>
 800bf54:	4603      	mov	r3, r0
 800bf56:	2b01      	cmp	r3, #1
 800bf58:	d1ee      	bne.n	800bf38 <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800bf5a:	7ffb      	ldrb	r3, [r7, #31]
 800bf5c:	77bb      	strb	r3, [r7, #30]
 800bf5e:	e001      	b.n	800bf64 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf60:	7ffb      	ldrb	r3, [r7, #31]
 800bf62:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	f003 0301 	and.w	r3, r3, #1
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d004      	beq.n	800bf7a <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	699b      	ldr	r3, [r3, #24]
 800bf74:	4618      	mov	r0, r3
 800bf76:	f7ff fe2b 	bl	800bbd0 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	f003 0302 	and.w	r3, r3, #2
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d004      	beq.n	800bf90 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	69db      	ldr	r3, [r3, #28]
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	f7ff fe36 	bl	800bbfc <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	f003 0310 	and.w	r3, r3, #16
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d004      	beq.n	800bfa6 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	f7ff fe5e 	bl	800bc62 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	f003 0320 	and.w	r3, r3, #32
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d004      	beq.n	800bfbc <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	f7ff fe53 	bl	800bc62 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	f003 0304 	and.w	r3, r3, #4
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d004      	beq.n	800bfd2 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	6a1b      	ldr	r3, [r3, #32]
 800bfcc:	4618      	mov	r0, r3
 800bfce:	f7ff fe2b 	bl	800bc28 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	f003 0308 	and.w	r3, r3, #8
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d004      	beq.n	800bfe8 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	f7ff fe20 	bl	800bc28 <LL_RCC_SetI2CClockSource>
  }
#endif

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d022      	beq.n	800c03a <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bff8:	4618      	mov	r0, r3
 800bffa:	f7ff fe8e 	bl	800bd1a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c002:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c006:	d107      	bne.n	800c018 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800c008:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c00c:	68db      	ldr	r3, [r3, #12]
 800c00e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c012:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c016:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c01c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c020:	d10b      	bne.n	800c03a <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	3304      	adds	r3, #4
 800c026:	4618      	mov	r0, r3
 800c028:	f000 f8dd 	bl	800c1e6 <RCCEx_PLLSAI1_ConfigNQ>
 800c02c:	4603      	mov	r3, r0
 800c02e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800c030:	7ffb      	ldrb	r3, [r7, #31]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d001      	beq.n	800c03a <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      {
        /* set overall return value */
        status = ret;
 800c036:	7ffb      	ldrb	r3, [r7, #31]
 800c038:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c042:	2b00      	cmp	r3, #0
 800c044:	d02b      	beq.n	800c09e <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c04a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c04e:	d008      	beq.n	800c062 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c054:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c058:	d003      	beq.n	800c062 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d105      	bne.n	800c06e <HAL_RCCEx_PeriphCLKConfig+0x228>
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c066:	4618      	mov	r0, r3
 800c068:	f7ff fe2b 	bl	800bcc2 <LL_RCC_SetRNGClockSource>
 800c06c:	e00a      	b.n	800c084 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c072:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c076:	60fb      	str	r3, [r7, #12]
 800c078:	2000      	movs	r0, #0
 800c07a:	f7ff fe22 	bl	800bcc2 <LL_RCC_SetRNGClockSource>
 800c07e:	68f8      	ldr	r0, [r7, #12]
 800c080:	f7ff fe35 	bl	800bcee <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c088:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800c08c:	d107      	bne.n	800c09e <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800c08e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c092:	68db      	ldr	r3, [r3, #12]
 800c094:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c098:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c09c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d022      	beq.n	800c0f0 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	f7ff fe3e 	bl	800bd30 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c0bc:	d107      	bne.n	800c0ce <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800c0be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c0c2:	68db      	ldr	r3, [r3, #12]
 800c0c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c0c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c0cc:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c0d6:	d10b      	bne.n	800c0f0 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	3304      	adds	r3, #4
 800c0dc:	4618      	mov	r0, r3
 800c0de:	f000 f8dd 	bl	800c29c <RCCEx_PLLSAI1_ConfigNR>
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800c0e6:	7ffb      	ldrb	r3, [r7, #31]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d001      	beq.n	800c0f0 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
      {
        /* set overall return value */
        status = ret;
 800c0ec:	7ffb      	ldrb	r3, [r7, #31]
 800c0ee:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d004      	beq.n	800c106 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c100:	4618      	mov	r0, r3
 800c102:	f7ff fd27 	bl	800bb54 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d009      	beq.n	800c126 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c116:	4618      	mov	r0, r3
 800c118:	f7ff fd46 	bl	800bba8 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c120:	4618      	mov	r0, r3
 800c122:	f7ff fd2d 	bl	800bb80 <LL_RCC_SetSMPSClockSource>
  }
#endif

  return status;
 800c126:	7fbb      	ldrb	r3, [r7, #30]
}
 800c128:	4618      	mov	r0, r3
 800c12a:	3720      	adds	r7, #32
 800c12c:	46bd      	mov	sp, r7
 800c12e:	bd80      	pop	{r7, pc}

0800c130 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b084      	sub	sp, #16
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c138:	2300      	movs	r3, #0
 800c13a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800c13c:	f7ff fe62 	bl	800be04 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c140:	f7fa f8c6 	bl	80062d0 <HAL_GetTick>
 800c144:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c146:	e009      	b.n	800c15c <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c148:	f7fa f8c2 	bl	80062d0 <HAL_GetTick>
 800c14c:	4602      	mov	r2, r0
 800c14e:	68bb      	ldr	r3, [r7, #8]
 800c150:	1ad3      	subs	r3, r2, r3
 800c152:	2b02      	cmp	r3, #2
 800c154:	d902      	bls.n	800c15c <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800c156:	2303      	movs	r3, #3
 800c158:	73fb      	strb	r3, [r7, #15]
      break;
 800c15a:	e004      	b.n	800c166 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c15c:	f7ff fe61 	bl	800be22 <LL_RCC_PLLSAI1_IsReady>
 800c160:	4603      	mov	r3, r0
 800c162:	2b00      	cmp	r3, #0
 800c164:	d1f0      	bne.n	800c148 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800c166:	7bfb      	ldrb	r3, [r7, #15]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d137      	bne.n	800c1dc <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800c16c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c170:	691b      	ldr	r3, [r3, #16]
 800c172:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	021b      	lsls	r3, r3, #8
 800c17c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c180:	4313      	orrs	r3, r2
 800c182:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800c184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c188:	691b      	ldr	r3, [r3, #16]
 800c18a:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	685b      	ldr	r3, [r3, #4]
 800c192:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c196:	4313      	orrs	r3, r2
 800c198:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800c19a:	f7ff fe24 	bl	800bde6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c19e:	f7fa f897 	bl	80062d0 <HAL_GetTick>
 800c1a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c1a4:	e009      	b.n	800c1ba <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c1a6:	f7fa f893 	bl	80062d0 <HAL_GetTick>
 800c1aa:	4602      	mov	r2, r0
 800c1ac:	68bb      	ldr	r3, [r7, #8]
 800c1ae:	1ad3      	subs	r3, r2, r3
 800c1b0:	2b02      	cmp	r3, #2
 800c1b2:	d902      	bls.n	800c1ba <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800c1b4:	2303      	movs	r3, #3
 800c1b6:	73fb      	strb	r3, [r7, #15]
        break;
 800c1b8:	e004      	b.n	800c1c4 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c1ba:	f7ff fe32 	bl	800be22 <LL_RCC_PLLSAI1_IsReady>
 800c1be:	4603      	mov	r3, r0
 800c1c0:	2b01      	cmp	r3, #1
 800c1c2:	d1f0      	bne.n	800c1a6 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800c1c4:	7bfb      	ldrb	r3, [r7, #15]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d108      	bne.n	800c1dc <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800c1ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c1ce:	691a      	ldr	r2, [r3, #16]
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	691b      	ldr	r3, [r3, #16]
 800c1d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c1d8:	4313      	orrs	r3, r2
 800c1da:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800c1dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1de:	4618      	mov	r0, r3
 800c1e0:	3710      	adds	r7, #16
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	bd80      	pop	{r7, pc}

0800c1e6 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800c1e6:	b580      	push	{r7, lr}
 800c1e8:	b084      	sub	sp, #16
 800c1ea:	af00      	add	r7, sp, #0
 800c1ec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800c1f2:	f7ff fe07 	bl	800be04 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c1f6:	f7fa f86b 	bl	80062d0 <HAL_GetTick>
 800c1fa:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c1fc:	e009      	b.n	800c212 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c1fe:	f7fa f867 	bl	80062d0 <HAL_GetTick>
 800c202:	4602      	mov	r2, r0
 800c204:	68bb      	ldr	r3, [r7, #8]
 800c206:	1ad3      	subs	r3, r2, r3
 800c208:	2b02      	cmp	r3, #2
 800c20a:	d902      	bls.n	800c212 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800c20c:	2303      	movs	r3, #3
 800c20e:	73fb      	strb	r3, [r7, #15]
      break;
 800c210:	e004      	b.n	800c21c <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c212:	f7ff fe06 	bl	800be22 <LL_RCC_PLLSAI1_IsReady>
 800c216:	4603      	mov	r3, r0
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d1f0      	bne.n	800c1fe <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800c21c:	7bfb      	ldrb	r3, [r7, #15]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d137      	bne.n	800c292 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800c222:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c226:	691b      	ldr	r3, [r3, #16]
 800c228:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	021b      	lsls	r3, r3, #8
 800c232:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c236:	4313      	orrs	r3, r2
 800c238:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800c23a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c23e:	691b      	ldr	r3, [r3, #16]
 800c240:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	689b      	ldr	r3, [r3, #8]
 800c248:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c24c:	4313      	orrs	r3, r2
 800c24e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800c250:	f7ff fdc9 	bl	800bde6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c254:	f7fa f83c 	bl	80062d0 <HAL_GetTick>
 800c258:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c25a:	e009      	b.n	800c270 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c25c:	f7fa f838 	bl	80062d0 <HAL_GetTick>
 800c260:	4602      	mov	r2, r0
 800c262:	68bb      	ldr	r3, [r7, #8]
 800c264:	1ad3      	subs	r3, r2, r3
 800c266:	2b02      	cmp	r3, #2
 800c268:	d902      	bls.n	800c270 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800c26a:	2303      	movs	r3, #3
 800c26c:	73fb      	strb	r3, [r7, #15]
        break;
 800c26e:	e004      	b.n	800c27a <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c270:	f7ff fdd7 	bl	800be22 <LL_RCC_PLLSAI1_IsReady>
 800c274:	4603      	mov	r3, r0
 800c276:	2b01      	cmp	r3, #1
 800c278:	d1f0      	bne.n	800c25c <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800c27a:	7bfb      	ldrb	r3, [r7, #15]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d108      	bne.n	800c292 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800c280:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c284:	691a      	ldr	r2, [r3, #16]
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	691b      	ldr	r3, [r3, #16]
 800c28a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c28e:	4313      	orrs	r3, r2
 800c290:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800c292:	7bfb      	ldrb	r3, [r7, #15]
}
 800c294:	4618      	mov	r0, r3
 800c296:	3710      	adds	r7, #16
 800c298:	46bd      	mov	sp, r7
 800c29a:	bd80      	pop	{r7, pc}

0800c29c <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b084      	sub	sp, #16
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800c2a8:	f7ff fdac 	bl	800be04 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c2ac:	f7fa f810 	bl	80062d0 <HAL_GetTick>
 800c2b0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c2b2:	e009      	b.n	800c2c8 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c2b4:	f7fa f80c 	bl	80062d0 <HAL_GetTick>
 800c2b8:	4602      	mov	r2, r0
 800c2ba:	68bb      	ldr	r3, [r7, #8]
 800c2bc:	1ad3      	subs	r3, r2, r3
 800c2be:	2b02      	cmp	r3, #2
 800c2c0:	d902      	bls.n	800c2c8 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800c2c2:	2303      	movs	r3, #3
 800c2c4:	73fb      	strb	r3, [r7, #15]
      break;
 800c2c6:	e004      	b.n	800c2d2 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c2c8:	f7ff fdab 	bl	800be22 <LL_RCC_PLLSAI1_IsReady>
 800c2cc:	4603      	mov	r3, r0
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d1f0      	bne.n	800c2b4 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800c2d2:	7bfb      	ldrb	r3, [r7, #15]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d137      	bne.n	800c348 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800c2d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c2dc:	691b      	ldr	r3, [r3, #16]
 800c2de:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	021b      	lsls	r3, r3, #8
 800c2e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c2ec:	4313      	orrs	r3, r2
 800c2ee:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800c2f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c2f4:	691b      	ldr	r3, [r3, #16]
 800c2f6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	68db      	ldr	r3, [r3, #12]
 800c2fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c302:	4313      	orrs	r3, r2
 800c304:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800c306:	f7ff fd6e 	bl	800bde6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c30a:	f7f9 ffe1 	bl	80062d0 <HAL_GetTick>
 800c30e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c310:	e009      	b.n	800c326 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c312:	f7f9 ffdd 	bl	80062d0 <HAL_GetTick>
 800c316:	4602      	mov	r2, r0
 800c318:	68bb      	ldr	r3, [r7, #8]
 800c31a:	1ad3      	subs	r3, r2, r3
 800c31c:	2b02      	cmp	r3, #2
 800c31e:	d902      	bls.n	800c326 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800c320:	2303      	movs	r3, #3
 800c322:	73fb      	strb	r3, [r7, #15]
        break;
 800c324:	e004      	b.n	800c330 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c326:	f7ff fd7c 	bl	800be22 <LL_RCC_PLLSAI1_IsReady>
 800c32a:	4603      	mov	r3, r0
 800c32c:	2b01      	cmp	r3, #1
 800c32e:	d1f0      	bne.n	800c312 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800c330:	7bfb      	ldrb	r3, [r7, #15]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d108      	bne.n	800c348 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800c336:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c33a:	691a      	ldr	r2, [r3, #16]
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	691b      	ldr	r3, [r3, #16]
 800c340:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c344:	4313      	orrs	r3, r2
 800c346:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800c348:	7bfb      	ldrb	r3, [r7, #15]
}
 800c34a:	4618      	mov	r0, r3
 800c34c:	3710      	adds	r7, #16
 800c34e:	46bd      	mov	sp, r7
 800c350:	bd80      	pop	{r7, pc}

0800c352 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c352:	b580      	push	{r7, lr}
 800c354:	b082      	sub	sp, #8
 800c356:	af00      	add	r7, sp, #0
 800c358:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d101      	bne.n	800c364 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800c360:	2301      	movs	r3, #1
 800c362:	e090      	b.n	800c486 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800c36a:	b2db      	uxtb	r3, r3
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d106      	bne.n	800c37e <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	2200      	movs	r2, #0
 800c374:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800c378:	6878      	ldr	r0, [r7, #4]
 800c37a:	f7f8 fda9 	bl	8004ed0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	2202      	movs	r2, #2
 800c382:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	22ca      	movs	r2, #202	; 0xca
 800c38c:	625a      	str	r2, [r3, #36]	; 0x24
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	2253      	movs	r2, #83	; 0x53
 800c394:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800c396:	6878      	ldr	r0, [r7, #4]
 800c398:	f000 faba 	bl	800c910 <RTC_EnterInitMode>
 800c39c:	4603      	mov	r3, r0
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d009      	beq.n	800c3b6 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	22ff      	movs	r2, #255	; 0xff
 800c3a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	2204      	movs	r2, #4
 800c3ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 800c3b2:	2301      	movs	r3, #1
 800c3b4:	e067      	b.n	800c486 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	689b      	ldr	r3, [r3, #8]
 800c3bc:	687a      	ldr	r2, [r7, #4]
 800c3be:	6812      	ldr	r2, [r2, #0]
 800c3c0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c3c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c3c8:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	6899      	ldr	r1, [r3, #8]
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	685a      	ldr	r2, [r3, #4]
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	691b      	ldr	r3, [r3, #16]
 800c3d8:	431a      	orrs	r2, r3
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	699b      	ldr	r3, [r3, #24]
 800c3de:	431a      	orrs	r2, r3
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	430a      	orrs	r2, r1
 800c3e6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	687a      	ldr	r2, [r7, #4]
 800c3ee:	68d2      	ldr	r2, [r2, #12]
 800c3f0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	6919      	ldr	r1, [r3, #16]
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	689b      	ldr	r3, [r3, #8]
 800c3fc:	041a      	lsls	r2, r3, #16
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	430a      	orrs	r2, r1
 800c404:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	68da      	ldr	r2, [r3, #12]
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c414:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	f022 0203 	bic.w	r2, r2, #3
 800c424:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	69da      	ldr	r2, [r3, #28]
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	695b      	ldr	r3, [r3, #20]
 800c434:	431a      	orrs	r2, r3
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	430a      	orrs	r2, r1
 800c43c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	689b      	ldr	r3, [r3, #8]
 800c444:	f003 0320 	and.w	r3, r3, #32
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d113      	bne.n	800c474 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c44c:	6878      	ldr	r0, [r7, #4]
 800c44e:	f000 fa39 	bl	800c8c4 <HAL_RTC_WaitForSynchro>
 800c452:	4603      	mov	r3, r0
 800c454:	2b00      	cmp	r3, #0
 800c456:	d00d      	beq.n	800c474 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	22ff      	movs	r2, #255	; 0xff
 800c45e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	2204      	movs	r2, #4
 800c464:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2200      	movs	r2, #0
 800c46c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800c470:	2301      	movs	r3, #1
 800c472:	e008      	b.n	800c486 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	22ff      	movs	r2, #255	; 0xff
 800c47a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2201      	movs	r2, #1
 800c480:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 800c484:	2300      	movs	r3, #0
  }
}
 800c486:	4618      	mov	r0, r3
 800c488:	3708      	adds	r7, #8
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bd80      	pop	{r7, pc}

0800c48e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c48e:	b590      	push	{r4, r7, lr}
 800c490:	b087      	sub	sp, #28
 800c492:	af00      	add	r7, sp, #0
 800c494:	60f8      	str	r0, [r7, #12]
 800c496:	60b9      	str	r1, [r7, #8]
 800c498:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c4a0:	2b01      	cmp	r3, #1
 800c4a2:	d101      	bne.n	800c4a8 <HAL_RTC_SetTime+0x1a>
 800c4a4:	2302      	movs	r3, #2
 800c4a6:	e0b2      	b.n	800c60e <HAL_RTC_SetTime+0x180>
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	2201      	movs	r2, #1
 800c4ac:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	2202      	movs	r2, #2
 800c4b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if(Format == RTC_FORMAT_BIN)
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d126      	bne.n	800c50c <HAL_RTC_SetTime+0x7e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	689b      	ldr	r3, [r3, #8]
 800c4c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d102      	bne.n	800c4d2 <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800c4cc:	68bb      	ldr	r3, [r7, #8]
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800c4d2:	68bb      	ldr	r3, [r7, #8]
 800c4d4:	781b      	ldrb	r3, [r3, #0]
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	f000 fa44 	bl	800c964 <RTC_ByteToBcd2>
 800c4dc:	4603      	mov	r3, r0
 800c4de:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800c4e0:	68bb      	ldr	r3, [r7, #8]
 800c4e2:	785b      	ldrb	r3, [r3, #1]
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	f000 fa3d 	bl	800c964 <RTC_ByteToBcd2>
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800c4ee:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800c4f0:	68bb      	ldr	r3, [r7, #8]
 800c4f2:	789b      	ldrb	r3, [r3, #2]
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	f000 fa35 	bl	800c964 <RTC_ByteToBcd2>
 800c4fa:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800c4fc:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800c500:	68bb      	ldr	r3, [r7, #8]
 800c502:	78db      	ldrb	r3, [r3, #3]
 800c504:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800c506:	4313      	orrs	r3, r2
 800c508:	617b      	str	r3, [r7, #20]
 800c50a:	e018      	b.n	800c53e <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	689b      	ldr	r3, [r3, #8]
 800c512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c516:	2b00      	cmp	r3, #0
 800c518:	d102      	bne.n	800c520 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800c51a:	68bb      	ldr	r3, [r7, #8]
 800c51c:	2200      	movs	r2, #0
 800c51e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800c520:	68bb      	ldr	r3, [r7, #8]
 800c522:	781b      	ldrb	r3, [r3, #0]
 800c524:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800c526:	68bb      	ldr	r3, [r7, #8]
 800c528:	785b      	ldrb	r3, [r3, #1]
 800c52a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800c52c:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800c52e:	68ba      	ldr	r2, [r7, #8]
 800c530:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800c532:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800c534:	68bb      	ldr	r3, [r7, #8]
 800c536:	78db      	ldrb	r3, [r3, #3]
 800c538:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800c53a:	4313      	orrs	r3, r2
 800c53c:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	22ca      	movs	r2, #202	; 0xca
 800c544:	625a      	str	r2, [r3, #36]	; 0x24
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	2253      	movs	r2, #83	; 0x53
 800c54c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800c54e:	68f8      	ldr	r0, [r7, #12]
 800c550:	f000 f9de 	bl	800c910 <RTC_EnterInitMode>
 800c554:	4603      	mov	r3, r0
 800c556:	2b00      	cmp	r3, #0
 800c558:	d00d      	beq.n	800c576 <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	22ff      	movs	r2, #255	; 0xff
 800c560:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	2204      	movs	r2, #4
 800c566:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	2200      	movs	r2, #0
 800c56e:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800c572:	2301      	movs	r3, #1
 800c574:	e04b      	b.n	800c60e <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	681a      	ldr	r2, [r3, #0]
 800c57a:	697b      	ldr	r3, [r7, #20]
 800c57c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800c580:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800c584:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	689a      	ldr	r2, [r3, #8]
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c594:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	6899      	ldr	r1, [r3, #8]
 800c59c:	68bb      	ldr	r3, [r7, #8]
 800c59e:	68da      	ldr	r2, [r3, #12]
 800c5a0:	68bb      	ldr	r3, [r7, #8]
 800c5a2:	691b      	ldr	r3, [r3, #16]
 800c5a4:	431a      	orrs	r2, r3
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	430a      	orrs	r2, r1
 800c5ac:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	68da      	ldr	r2, [r3, #12]
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c5bc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	689b      	ldr	r3, [r3, #8]
 800c5c4:	f003 0320 	and.w	r3, r3, #32
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d113      	bne.n	800c5f4 <HAL_RTC_SetTime+0x166>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c5cc:	68f8      	ldr	r0, [r7, #12]
 800c5ce:	f000 f979 	bl	800c8c4 <HAL_RTC_WaitForSynchro>
 800c5d2:	4603      	mov	r3, r0
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d00d      	beq.n	800c5f4 <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	22ff      	movs	r2, #255	; 0xff
 800c5de:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	2204      	movs	r2, #4
 800c5e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800c5f0:	2301      	movs	r3, #1
 800c5f2:	e00c      	b.n	800c60e <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	22ff      	movs	r2, #255	; 0xff
 800c5fa:	625a      	str	r2, [r3, #36]	; 0x24
    
   hrtc->State = HAL_RTC_STATE_READY;
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	2201      	movs	r2, #1
 800c600:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

   __HAL_UNLOCK(hrtc); 
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	2200      	movs	r2, #0
 800c608:	f883 2020 	strb.w	r2, [r3, #32]

   return HAL_OK;
 800c60c:	2300      	movs	r3, #0
  }
}
 800c60e:	4618      	mov	r0, r3
 800c610:	371c      	adds	r7, #28
 800c612:	46bd      	mov	sp, r7
 800c614:	bd90      	pop	{r4, r7, pc}

0800c616 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c616:	b580      	push	{r7, lr}
 800c618:	b086      	sub	sp, #24
 800c61a:	af00      	add	r7, sp, #0
 800c61c:	60f8      	str	r0, [r7, #12]
 800c61e:	60b9      	str	r1, [r7, #8]
 800c620:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c628:	68bb      	ldr	r3, [r7, #8]
 800c62a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	691b      	ldr	r3, [r3, #16]
 800c632:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800c636:	68bb      	ldr	r3, [r7, #8]
 800c638:	609a      	str	r2, [r3, #8]
  
  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800c644:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800c648:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800c64a:	697b      	ldr	r3, [r7, #20]
 800c64c:	0c1b      	lsrs	r3, r3, #16
 800c64e:	b2db      	uxtb	r3, r3
 800c650:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c654:	b2da      	uxtb	r2, r3
 800c656:	68bb      	ldr	r3, [r7, #8]
 800c658:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 800c65a:	697b      	ldr	r3, [r7, #20]
 800c65c:	0a1b      	lsrs	r3, r3, #8
 800c65e:	b2db      	uxtb	r3, r3
 800c660:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c664:	b2da      	uxtb	r2, r3
 800c666:	68bb      	ldr	r3, [r7, #8]
 800c668:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800c66a:	697b      	ldr	r3, [r7, #20]
 800c66c:	b2db      	uxtb	r3, r3
 800c66e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c672:	b2da      	uxtb	r2, r3
 800c674:	68bb      	ldr	r3, [r7, #8]
 800c676:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800c678:	697b      	ldr	r3, [r7, #20]
 800c67a:	0c1b      	lsrs	r3, r3, #16
 800c67c:	b2db      	uxtb	r3, r3
 800c67e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c682:	b2da      	uxtb	r2, r3
 800c684:	68bb      	ldr	r3, [r7, #8]
 800c686:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d11a      	bne.n	800c6c4 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800c68e:	68bb      	ldr	r3, [r7, #8]
 800c690:	781b      	ldrb	r3, [r3, #0]
 800c692:	4618      	mov	r0, r3
 800c694:	f000 f986 	bl	800c9a4 <RTC_Bcd2ToByte>
 800c698:	4603      	mov	r3, r0
 800c69a:	461a      	mov	r2, r3
 800c69c:	68bb      	ldr	r3, [r7, #8]
 800c69e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800c6a0:	68bb      	ldr	r3, [r7, #8]
 800c6a2:	785b      	ldrb	r3, [r3, #1]
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	f000 f97d 	bl	800c9a4 <RTC_Bcd2ToByte>
 800c6aa:	4603      	mov	r3, r0
 800c6ac:	461a      	mov	r2, r3
 800c6ae:	68bb      	ldr	r3, [r7, #8]
 800c6b0:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800c6b2:	68bb      	ldr	r3, [r7, #8]
 800c6b4:	789b      	ldrb	r3, [r3, #2]
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	f000 f974 	bl	800c9a4 <RTC_Bcd2ToByte>
 800c6bc:	4603      	mov	r3, r0
 800c6be:	461a      	mov	r2, r3
 800c6c0:	68bb      	ldr	r3, [r7, #8]
 800c6c2:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800c6c4:	2300      	movs	r3, #0
}
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	3718      	adds	r7, #24
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	bd80      	pop	{r7, pc}

0800c6ce <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c6ce:	b590      	push	{r4, r7, lr}
 800c6d0:	b087      	sub	sp, #28
 800c6d2:	af00      	add	r7, sp, #0
 800c6d4:	60f8      	str	r0, [r7, #12]
 800c6d6:	60b9      	str	r1, [r7, #8]
 800c6d8:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c6e0:	2b01      	cmp	r3, #1
 800c6e2:	d101      	bne.n	800c6e8 <HAL_RTC_SetDate+0x1a>
 800c6e4:	2302      	movs	r3, #2
 800c6e6:	e09c      	b.n	800c822 <HAL_RTC_SetDate+0x154>
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	2201      	movs	r2, #1
 800c6ec:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	2202      	movs	r2, #2
 800c6f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d10e      	bne.n	800c71c <HAL_RTC_SetDate+0x4e>
 800c6fe:	68bb      	ldr	r3, [r7, #8]
 800c700:	785b      	ldrb	r3, [r3, #1]
 800c702:	f003 0310 	and.w	r3, r3, #16
 800c706:	2b00      	cmp	r3, #0
 800c708:	d008      	beq.n	800c71c <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800c70a:	68bb      	ldr	r3, [r7, #8]
 800c70c:	785b      	ldrb	r3, [r3, #1]
 800c70e:	f023 0310 	bic.w	r3, r3, #16
 800c712:	b2db      	uxtb	r3, r3
 800c714:	330a      	adds	r3, #10
 800c716:	b2da      	uxtb	r2, r3
 800c718:	68bb      	ldr	r3, [r7, #8]
 800c71a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d11c      	bne.n	800c75c <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800c722:	68bb      	ldr	r3, [r7, #8]
 800c724:	78db      	ldrb	r3, [r3, #3]
 800c726:	4618      	mov	r0, r3
 800c728:	f000 f91c 	bl	800c964 <RTC_ByteToBcd2>
 800c72c:	4603      	mov	r3, r0
 800c72e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800c730:	68bb      	ldr	r3, [r7, #8]
 800c732:	785b      	ldrb	r3, [r3, #1]
 800c734:	4618      	mov	r0, r3
 800c736:	f000 f915 	bl	800c964 <RTC_ByteToBcd2>
 800c73a:	4603      	mov	r3, r0
 800c73c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800c73e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800c740:	68bb      	ldr	r3, [r7, #8]
 800c742:	789b      	ldrb	r3, [r3, #2]
 800c744:	4618      	mov	r0, r3
 800c746:	f000 f90d 	bl	800c964 <RTC_ByteToBcd2>
 800c74a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800c74c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800c750:	68bb      	ldr	r3, [r7, #8]
 800c752:	781b      	ldrb	r3, [r3, #0]
 800c754:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800c756:	4313      	orrs	r3, r2
 800c758:	617b      	str	r3, [r7, #20]
 800c75a:	e00e      	b.n	800c77a <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800c75c:	68bb      	ldr	r3, [r7, #8]
 800c75e:	78db      	ldrb	r3, [r3, #3]
 800c760:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800c762:	68bb      	ldr	r3, [r7, #8]
 800c764:	785b      	ldrb	r3, [r3, #1]
 800c766:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800c768:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800c76a:	68ba      	ldr	r2, [r7, #8]
 800c76c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800c76e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800c770:	68bb      	ldr	r3, [r7, #8]
 800c772:	781b      	ldrb	r3, [r3, #0]
 800c774:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800c776:	4313      	orrs	r3, r2
 800c778:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	22ca      	movs	r2, #202	; 0xca
 800c780:	625a      	str	r2, [r3, #36]	; 0x24
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	2253      	movs	r2, #83	; 0x53
 800c788:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800c78a:	68f8      	ldr	r0, [r7, #12]
 800c78c:	f000 f8c0 	bl	800c910 <RTC_EnterInitMode>
 800c790:	4603      	mov	r3, r0
 800c792:	2b00      	cmp	r3, #0
 800c794:	d00d      	beq.n	800c7b2 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	22ff      	movs	r2, #255	; 0xff
 800c79c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	2204      	movs	r2, #4
 800c7a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800c7ae:	2301      	movs	r3, #1
 800c7b0:	e037      	b.n	800c822 <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	681a      	ldr	r2, [r3, #0]
 800c7b6:	697b      	ldr	r3, [r7, #20]
 800c7b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c7bc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c7c0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	68da      	ldr	r2, [r3, #12]
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c7d0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	689b      	ldr	r3, [r3, #8]
 800c7d8:	f003 0320 	and.w	r3, r3, #32
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d113      	bne.n	800c808 <HAL_RTC_SetDate+0x13a>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c7e0:	68f8      	ldr	r0, [r7, #12]
 800c7e2:	f000 f86f 	bl	800c8c4 <HAL_RTC_WaitForSynchro>
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d00d      	beq.n	800c808 <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	22ff      	movs	r2, #255	; 0xff
 800c7f2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	2204      	movs	r2, #4
 800c7f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	2200      	movs	r2, #0
 800c800:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800c804:	2301      	movs	r3, #1
 800c806:	e00c      	b.n	800c822 <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	22ff      	movs	r2, #255	; 0xff
 800c80e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	2201      	movs	r2, #1
 800c814:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	2200      	movs	r2, #0
 800c81c:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 800c820:	2300      	movs	r3, #0
  }
}
 800c822:	4618      	mov	r0, r3
 800c824:	371c      	adds	r7, #28
 800c826:	46bd      	mov	sp, r7
 800c828:	bd90      	pop	{r4, r7, pc}

0800c82a <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c82a:	b580      	push	{r7, lr}
 800c82c:	b086      	sub	sp, #24
 800c82e:	af00      	add	r7, sp, #0
 800c830:	60f8      	str	r0, [r7, #12]
 800c832:	60b9      	str	r1, [r7, #8]
 800c834:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	685b      	ldr	r3, [r3, #4]
 800c83c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c840:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c844:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800c846:	697b      	ldr	r3, [r7, #20]
 800c848:	0c1b      	lsrs	r3, r3, #16
 800c84a:	b2da      	uxtb	r2, r3
 800c84c:	68bb      	ldr	r3, [r7, #8]
 800c84e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800c850:	697b      	ldr	r3, [r7, #20]
 800c852:	0a1b      	lsrs	r3, r3, #8
 800c854:	b2db      	uxtb	r3, r3
 800c856:	f003 031f 	and.w	r3, r3, #31
 800c85a:	b2da      	uxtb	r2, r3
 800c85c:	68bb      	ldr	r3, [r7, #8]
 800c85e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800c860:	697b      	ldr	r3, [r7, #20]
 800c862:	b2db      	uxtb	r3, r3
 800c864:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c868:	b2da      	uxtb	r2, r3
 800c86a:	68bb      	ldr	r3, [r7, #8]
 800c86c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 800c86e:	697b      	ldr	r3, [r7, #20]
 800c870:	0b5b      	lsrs	r3, r3, #13
 800c872:	b2db      	uxtb	r3, r3
 800c874:	f003 0307 	and.w	r3, r3, #7
 800c878:	b2da      	uxtb	r2, r3
 800c87a:	68bb      	ldr	r3, [r7, #8]
 800c87c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d11a      	bne.n	800c8ba <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800c884:	68bb      	ldr	r3, [r7, #8]
 800c886:	78db      	ldrb	r3, [r3, #3]
 800c888:	4618      	mov	r0, r3
 800c88a:	f000 f88b 	bl	800c9a4 <RTC_Bcd2ToByte>
 800c88e:	4603      	mov	r3, r0
 800c890:	461a      	mov	r2, r3
 800c892:	68bb      	ldr	r3, [r7, #8]
 800c894:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800c896:	68bb      	ldr	r3, [r7, #8]
 800c898:	785b      	ldrb	r3, [r3, #1]
 800c89a:	4618      	mov	r0, r3
 800c89c:	f000 f882 	bl	800c9a4 <RTC_Bcd2ToByte>
 800c8a0:	4603      	mov	r3, r0
 800c8a2:	461a      	mov	r2, r3
 800c8a4:	68bb      	ldr	r3, [r7, #8]
 800c8a6:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800c8a8:	68bb      	ldr	r3, [r7, #8]
 800c8aa:	789b      	ldrb	r3, [r3, #2]
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	f000 f879 	bl	800c9a4 <RTC_Bcd2ToByte>
 800c8b2:	4603      	mov	r3, r0
 800c8b4:	461a      	mov	r2, r3
 800c8b6:	68bb      	ldr	r3, [r7, #8]
 800c8b8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800c8ba:	2300      	movs	r3, #0
}
 800c8bc:	4618      	mov	r0, r3
 800c8be:	3718      	adds	r7, #24
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	bd80      	pop	{r7, pc}

0800c8c4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b084      	sub	sp, #16
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	68da      	ldr	r2, [r3, #12]
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800c8da:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800c8dc:	f7f9 fcf8 	bl	80062d0 <HAL_GetTick>
 800c8e0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c8e2:	e009      	b.n	800c8f8 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800c8e4:	f7f9 fcf4 	bl	80062d0 <HAL_GetTick>
 800c8e8:	4602      	mov	r2, r0
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	1ad3      	subs	r3, r2, r3
 800c8ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c8f2:	d901      	bls.n	800c8f8 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800c8f4:	2303      	movs	r3, #3
 800c8f6:	e007      	b.n	800c908 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	68db      	ldr	r3, [r3, #12]
 800c8fe:	f003 0320 	and.w	r3, r3, #32
 800c902:	2b00      	cmp	r3, #0
 800c904:	d0ee      	beq.n	800c8e4 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800c906:	2300      	movs	r3, #0
}
 800c908:	4618      	mov	r0, r3
 800c90a:	3710      	adds	r7, #16
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bd80      	pop	{r7, pc}

0800c910 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b084      	sub	sp, #16
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	68db      	ldr	r3, [r3, #12]
 800c91e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c922:	2b00      	cmp	r3, #0
 800c924:	d119      	bne.n	800c95a <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	f04f 32ff 	mov.w	r2, #4294967295
 800c92e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800c930:	f7f9 fcce 	bl	80062d0 <HAL_GetTick>
 800c934:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800c936:	e009      	b.n	800c94c <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800c938:	f7f9 fcca 	bl	80062d0 <HAL_GetTick>
 800c93c:	4602      	mov	r2, r0
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	1ad3      	subs	r3, r2, r3
 800c942:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c946:	d901      	bls.n	800c94c <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800c948:	2303      	movs	r3, #3
 800c94a:	e007      	b.n	800c95c <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	68db      	ldr	r3, [r3, #12]
 800c952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c956:	2b00      	cmp	r3, #0
 800c958:	d0ee      	beq.n	800c938 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800c95a:	2300      	movs	r3, #0
}
 800c95c:	4618      	mov	r0, r3
 800c95e:	3710      	adds	r7, #16
 800c960:	46bd      	mov	sp, r7
 800c962:	bd80      	pop	{r7, pc}

0800c964 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800c964:	b480      	push	{r7}
 800c966:	b085      	sub	sp, #20
 800c968:	af00      	add	r7, sp, #0
 800c96a:	4603      	mov	r3, r0
 800c96c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800c96e:	2300      	movs	r3, #0
 800c970:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800c972:	79fb      	ldrb	r3, [r7, #7]
 800c974:	72fb      	strb	r3, [r7, #11]

  while(Param >= 10U)
 800c976:	e005      	b.n	800c984 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	3301      	adds	r3, #1
 800c97c:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800c97e:	7afb      	ldrb	r3, [r7, #11]
 800c980:	3b0a      	subs	r3, #10
 800c982:	72fb      	strb	r3, [r7, #11]
  while(Param >= 10U)
 800c984:	7afb      	ldrb	r3, [r7, #11]
 800c986:	2b09      	cmp	r3, #9
 800c988:	d8f6      	bhi.n	800c978 <RTC_ByteToBcd2+0x14>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	b2db      	uxtb	r3, r3
 800c98e:	011b      	lsls	r3, r3, #4
 800c990:	b2da      	uxtb	r2, r3
 800c992:	7afb      	ldrb	r3, [r7, #11]
 800c994:	4313      	orrs	r3, r2
 800c996:	b2db      	uxtb	r3, r3
}
 800c998:	4618      	mov	r0, r3
 800c99a:	3714      	adds	r7, #20
 800c99c:	46bd      	mov	sp, r7
 800c99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a2:	4770      	bx	lr

0800c9a4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800c9a4:	b480      	push	{r7}
 800c9a6:	b085      	sub	sp, #20
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	4603      	mov	r3, r0
 800c9ac:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800c9ae:	79fb      	ldrb	r3, [r7, #7]
 800c9b0:	091b      	lsrs	r3, r3, #4
 800c9b2:	b2db      	uxtb	r3, r3
 800c9b4:	461a      	mov	r2, r3
 800c9b6:	4613      	mov	r3, r2
 800c9b8:	009b      	lsls	r3, r3, #2
 800c9ba:	4413      	add	r3, r2
 800c9bc:	005b      	lsls	r3, r3, #1
 800c9be:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	b2da      	uxtb	r2, r3
 800c9c4:	79fb      	ldrb	r3, [r7, #7]
 800c9c6:	f003 030f 	and.w	r3, r3, #15
 800c9ca:	b2db      	uxtb	r3, r3
 800c9cc:	4413      	add	r3, r2
 800c9ce:	b2db      	uxtb	r3, r3
}
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	3714      	adds	r7, #20
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9da:	4770      	bx	lr

0800c9dc <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800c9dc:	b480      	push	{r7}
 800c9de:	b087      	sub	sp, #28
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	60f8      	str	r0, [r7, #12]
 800c9e4:	60b9      	str	r1, [r7, #8]
 800c9e6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	3350      	adds	r3, #80	; 0x50
 800c9ee:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800c9f0:	68bb      	ldr	r3, [r7, #8]
 800c9f2:	009b      	lsls	r3, r3, #2
 800c9f4:	697a      	ldr	r2, [r7, #20]
 800c9f6:	4413      	add	r3, r2
 800c9f8:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800c9fa:	697b      	ldr	r3, [r7, #20]
 800c9fc:	687a      	ldr	r2, [r7, #4]
 800c9fe:	601a      	str	r2, [r3, #0]
}
 800ca00:	bf00      	nop
 800ca02:	371c      	adds	r7, #28
 800ca04:	46bd      	mov	sp, r7
 800ca06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0a:	4770      	bx	lr

0800ca0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b082      	sub	sp, #8
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d101      	bne.n	800ca1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ca1a:	2301      	movs	r3, #1
 800ca1c:	e01d      	b.n	800ca5a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ca24:	b2db      	uxtb	r3, r3
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d106      	bne.n	800ca38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ca32:	6878      	ldr	r0, [r7, #4]
 800ca34:	f7f8 ff2a 	bl	800588c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	2202      	movs	r2, #2
 800ca3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	681a      	ldr	r2, [r3, #0]
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	3304      	adds	r3, #4
 800ca48:	4619      	mov	r1, r3
 800ca4a:	4610      	mov	r0, r2
 800ca4c:	f000 fc84 	bl	800d358 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	2201      	movs	r2, #1
 800ca54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ca58:	2300      	movs	r3, #0
}
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	3708      	adds	r7, #8
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	bd80      	pop	{r7, pc}
	...

0800ca64 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800ca64:	b480      	push	{r7}
 800ca66:	b085      	sub	sp, #20
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	2202      	movs	r2, #2
 800ca70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	689a      	ldr	r2, [r3, #8]
 800ca7a:	4b0e      	ldr	r3, [pc, #56]	; (800cab4 <HAL_TIM_Base_Start+0x50>)
 800ca7c:	4013      	ands	r3, r2
 800ca7e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	2b06      	cmp	r3, #6
 800ca84:	d00b      	beq.n	800ca9e <HAL_TIM_Base_Start+0x3a>
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca8c:	d007      	beq.n	800ca9e <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	681a      	ldr	r2, [r3, #0]
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	f042 0201 	orr.w	r2, r2, #1
 800ca9c:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	2201      	movs	r2, #1
 800caa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800caa6:	2300      	movs	r3, #0
}
 800caa8:	4618      	mov	r0, r3
 800caaa:	3714      	adds	r7, #20
 800caac:	46bd      	mov	sp, r7
 800caae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab2:	4770      	bx	lr
 800cab4:	00010007 	.word	0x00010007

0800cab8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800cab8:	b480      	push	{r7}
 800caba:	b083      	sub	sp, #12
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	2202      	movs	r2, #2
 800cac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	6a1a      	ldr	r2, [r3, #32]
 800cace:	f241 1311 	movw	r3, #4369	; 0x1111
 800cad2:	4013      	ands	r3, r2
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d10f      	bne.n	800caf8 <HAL_TIM_Base_Stop+0x40>
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	6a1a      	ldr	r2, [r3, #32]
 800cade:	f240 4344 	movw	r3, #1092	; 0x444
 800cae2:	4013      	ands	r3, r2
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d107      	bne.n	800caf8 <HAL_TIM_Base_Stop+0x40>
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	681a      	ldr	r2, [r3, #0]
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	f022 0201 	bic.w	r2, r2, #1
 800caf6:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	2201      	movs	r2, #1
 800cafc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800cb00:	2300      	movs	r3, #0
}
 800cb02:	4618      	mov	r0, r3
 800cb04:	370c      	adds	r7, #12
 800cb06:	46bd      	mov	sp, r7
 800cb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0c:	4770      	bx	lr
	...

0800cb10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cb10:	b480      	push	{r7}
 800cb12:	b085      	sub	sp, #20
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	68da      	ldr	r2, [r3, #12]
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	f042 0201 	orr.w	r2, r2, #1
 800cb26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	689a      	ldr	r2, [r3, #8]
 800cb2e:	4b0c      	ldr	r3, [pc, #48]	; (800cb60 <HAL_TIM_Base_Start_IT+0x50>)
 800cb30:	4013      	ands	r3, r2
 800cb32:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	2b06      	cmp	r3, #6
 800cb38:	d00b      	beq.n	800cb52 <HAL_TIM_Base_Start_IT+0x42>
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb40:	d007      	beq.n	800cb52 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	681a      	ldr	r2, [r3, #0]
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	f042 0201 	orr.w	r2, r2, #1
 800cb50:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800cb52:	2300      	movs	r3, #0
}
 800cb54:	4618      	mov	r0, r3
 800cb56:	3714      	adds	r7, #20
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5e:	4770      	bx	lr
 800cb60:	00010007 	.word	0x00010007

0800cb64 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800cb64:	b580      	push	{r7, lr}
 800cb66:	b082      	sub	sp, #8
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d101      	bne.n	800cb76 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800cb72:	2301      	movs	r3, #1
 800cb74:	e01d      	b.n	800cbb2 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cb7c:	b2db      	uxtb	r3, r3
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d106      	bne.n	800cb90 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	2200      	movs	r2, #0
 800cb86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800cb8a:	6878      	ldr	r0, [r7, #4]
 800cb8c:	f000 f815 	bl	800cbba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2202      	movs	r2, #2
 800cb94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681a      	ldr	r2, [r3, #0]
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	3304      	adds	r3, #4
 800cba0:	4619      	mov	r1, r3
 800cba2:	4610      	mov	r0, r2
 800cba4:	f000 fbd8 	bl	800d358 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	2201      	movs	r2, #1
 800cbac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cbb0:	2300      	movs	r3, #0
}
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	3708      	adds	r7, #8
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bd80      	pop	{r7, pc}

0800cbba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800cbba:	b480      	push	{r7}
 800cbbc:	b083      	sub	sp, #12
 800cbbe:	af00      	add	r7, sp, #0
 800cbc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800cbc2:	bf00      	nop
 800cbc4:	370c      	adds	r7, #12
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbcc:	4770      	bx	lr
	...

0800cbd0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b084      	sub	sp, #16
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
 800cbd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	2201      	movs	r2, #1
 800cbe0:	6839      	ldr	r1, [r7, #0]
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	f000 ff36 	bl	800da54 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	4a19      	ldr	r2, [pc, #100]	; (800cc54 <HAL_TIM_PWM_Start+0x84>)
 800cbee:	4293      	cmp	r3, r2
 800cbf0:	d009      	beq.n	800cc06 <HAL_TIM_PWM_Start+0x36>
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	4a18      	ldr	r2, [pc, #96]	; (800cc58 <HAL_TIM_PWM_Start+0x88>)
 800cbf8:	4293      	cmp	r3, r2
 800cbfa:	d004      	beq.n	800cc06 <HAL_TIM_PWM_Start+0x36>
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	4a16      	ldr	r2, [pc, #88]	; (800cc5c <HAL_TIM_PWM_Start+0x8c>)
 800cc02:	4293      	cmp	r3, r2
 800cc04:	d101      	bne.n	800cc0a <HAL_TIM_PWM_Start+0x3a>
 800cc06:	2301      	movs	r3, #1
 800cc08:	e000      	b.n	800cc0c <HAL_TIM_PWM_Start+0x3c>
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d007      	beq.n	800cc20 <HAL_TIM_PWM_Start+0x50>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cc1e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	689a      	ldr	r2, [r3, #8]
 800cc26:	4b0e      	ldr	r3, [pc, #56]	; (800cc60 <HAL_TIM_PWM_Start+0x90>)
 800cc28:	4013      	ands	r3, r2
 800cc2a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	2b06      	cmp	r3, #6
 800cc30:	d00b      	beq.n	800cc4a <HAL_TIM_PWM_Start+0x7a>
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc38:	d007      	beq.n	800cc4a <HAL_TIM_PWM_Start+0x7a>
  {
    __HAL_TIM_ENABLE(htim);
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	681a      	ldr	r2, [r3, #0]
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	f042 0201 	orr.w	r2, r2, #1
 800cc48:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800cc4a:	2300      	movs	r3, #0
}
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	3710      	adds	r7, #16
 800cc50:	46bd      	mov	sp, r7
 800cc52:	bd80      	pop	{r7, pc}
 800cc54:	40012c00 	.word	0x40012c00
 800cc58:	40014400 	.word	0x40014400
 800cc5c:	40014800 	.word	0x40014800
 800cc60:	00010007 	.word	0x00010007

0800cc64 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cc64:	b580      	push	{r7, lr}
 800cc66:	b082      	sub	sp, #8
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
 800cc6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	2200      	movs	r2, #0
 800cc74:	6839      	ldr	r1, [r7, #0]
 800cc76:	4618      	mov	r0, r3
 800cc78:	f000 feec 	bl	800da54 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	4a25      	ldr	r2, [pc, #148]	; (800cd18 <HAL_TIM_PWM_Stop+0xb4>)
 800cc82:	4293      	cmp	r3, r2
 800cc84:	d009      	beq.n	800cc9a <HAL_TIM_PWM_Stop+0x36>
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	4a24      	ldr	r2, [pc, #144]	; (800cd1c <HAL_TIM_PWM_Stop+0xb8>)
 800cc8c:	4293      	cmp	r3, r2
 800cc8e:	d004      	beq.n	800cc9a <HAL_TIM_PWM_Stop+0x36>
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	4a22      	ldr	r2, [pc, #136]	; (800cd20 <HAL_TIM_PWM_Stop+0xbc>)
 800cc96:	4293      	cmp	r3, r2
 800cc98:	d101      	bne.n	800cc9e <HAL_TIM_PWM_Stop+0x3a>
 800cc9a:	2301      	movs	r3, #1
 800cc9c:	e000      	b.n	800cca0 <HAL_TIM_PWM_Stop+0x3c>
 800cc9e:	2300      	movs	r3, #0
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d017      	beq.n	800ccd4 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	6a1a      	ldr	r2, [r3, #32]
 800ccaa:	f241 1311 	movw	r3, #4369	; 0x1111
 800ccae:	4013      	ands	r3, r2
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d10f      	bne.n	800ccd4 <HAL_TIM_PWM_Stop+0x70>
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	6a1a      	ldr	r2, [r3, #32]
 800ccba:	f240 4344 	movw	r3, #1092	; 0x444
 800ccbe:	4013      	ands	r3, r2
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d107      	bne.n	800ccd4 <HAL_TIM_PWM_Stop+0x70>
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ccd2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	6a1a      	ldr	r2, [r3, #32]
 800ccda:	f241 1311 	movw	r3, #4369	; 0x1111
 800ccde:	4013      	ands	r3, r2
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d10f      	bne.n	800cd04 <HAL_TIM_PWM_Stop+0xa0>
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	6a1a      	ldr	r2, [r3, #32]
 800ccea:	f240 4344 	movw	r3, #1092	; 0x444
 800ccee:	4013      	ands	r3, r2
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d107      	bne.n	800cd04 <HAL_TIM_PWM_Stop+0xa0>
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	681a      	ldr	r2, [r3, #0]
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	f022 0201 	bic.w	r2, r2, #1
 800cd02:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	2201      	movs	r2, #1
 800cd08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800cd0c:	2300      	movs	r3, #0
}
 800cd0e:	4618      	mov	r0, r3
 800cd10:	3708      	adds	r7, #8
 800cd12:	46bd      	mov	sp, r7
 800cd14:	bd80      	pop	{r7, pc}
 800cd16:	bf00      	nop
 800cd18:	40012c00 	.word	0x40012c00
 800cd1c:	40014400 	.word	0x40014400
 800cd20:	40014800 	.word	0x40014800

0800cd24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b082      	sub	sp, #8
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	691b      	ldr	r3, [r3, #16]
 800cd32:	f003 0302 	and.w	r3, r3, #2
 800cd36:	2b02      	cmp	r3, #2
 800cd38:	d122      	bne.n	800cd80 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	68db      	ldr	r3, [r3, #12]
 800cd40:	f003 0302 	and.w	r3, r3, #2
 800cd44:	2b02      	cmp	r3, #2
 800cd46:	d11b      	bne.n	800cd80 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	f06f 0202 	mvn.w	r2, #2
 800cd50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	2201      	movs	r2, #1
 800cd56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	699b      	ldr	r3, [r3, #24]
 800cd5e:	f003 0303 	and.w	r3, r3, #3
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d003      	beq.n	800cd6e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cd66:	6878      	ldr	r0, [r7, #4]
 800cd68:	f000 fad7 	bl	800d31a <HAL_TIM_IC_CaptureCallback>
 800cd6c:	e005      	b.n	800cd7a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cd6e:	6878      	ldr	r0, [r7, #4]
 800cd70:	f000 fac9 	bl	800d306 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cd74:	6878      	ldr	r0, [r7, #4]
 800cd76:	f000 fada 	bl	800d32e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	691b      	ldr	r3, [r3, #16]
 800cd86:	f003 0304 	and.w	r3, r3, #4
 800cd8a:	2b04      	cmp	r3, #4
 800cd8c:	d122      	bne.n	800cdd4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	68db      	ldr	r3, [r3, #12]
 800cd94:	f003 0304 	and.w	r3, r3, #4
 800cd98:	2b04      	cmp	r3, #4
 800cd9a:	d11b      	bne.n	800cdd4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	f06f 0204 	mvn.w	r2, #4
 800cda4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	2202      	movs	r2, #2
 800cdaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	699b      	ldr	r3, [r3, #24]
 800cdb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d003      	beq.n	800cdc2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cdba:	6878      	ldr	r0, [r7, #4]
 800cdbc:	f000 faad 	bl	800d31a <HAL_TIM_IC_CaptureCallback>
 800cdc0:	e005      	b.n	800cdce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cdc2:	6878      	ldr	r0, [r7, #4]
 800cdc4:	f000 fa9f 	bl	800d306 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cdc8:	6878      	ldr	r0, [r7, #4]
 800cdca:	f000 fab0 	bl	800d32e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	2200      	movs	r2, #0
 800cdd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	691b      	ldr	r3, [r3, #16]
 800cdda:	f003 0308 	and.w	r3, r3, #8
 800cdde:	2b08      	cmp	r3, #8
 800cde0:	d122      	bne.n	800ce28 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	68db      	ldr	r3, [r3, #12]
 800cde8:	f003 0308 	and.w	r3, r3, #8
 800cdec:	2b08      	cmp	r3, #8
 800cdee:	d11b      	bne.n	800ce28 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	f06f 0208 	mvn.w	r2, #8
 800cdf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	2204      	movs	r2, #4
 800cdfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	69db      	ldr	r3, [r3, #28]
 800ce06:	f003 0303 	and.w	r3, r3, #3
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d003      	beq.n	800ce16 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ce0e:	6878      	ldr	r0, [r7, #4]
 800ce10:	f000 fa83 	bl	800d31a <HAL_TIM_IC_CaptureCallback>
 800ce14:	e005      	b.n	800ce22 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ce16:	6878      	ldr	r0, [r7, #4]
 800ce18:	f000 fa75 	bl	800d306 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ce1c:	6878      	ldr	r0, [r7, #4]
 800ce1e:	f000 fa86 	bl	800d32e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	2200      	movs	r2, #0
 800ce26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	691b      	ldr	r3, [r3, #16]
 800ce2e:	f003 0310 	and.w	r3, r3, #16
 800ce32:	2b10      	cmp	r3, #16
 800ce34:	d122      	bne.n	800ce7c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	68db      	ldr	r3, [r3, #12]
 800ce3c:	f003 0310 	and.w	r3, r3, #16
 800ce40:	2b10      	cmp	r3, #16
 800ce42:	d11b      	bne.n	800ce7c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	f06f 0210 	mvn.w	r2, #16
 800ce4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	2208      	movs	r2, #8
 800ce52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	69db      	ldr	r3, [r3, #28]
 800ce5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d003      	beq.n	800ce6a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ce62:	6878      	ldr	r0, [r7, #4]
 800ce64:	f000 fa59 	bl	800d31a <HAL_TIM_IC_CaptureCallback>
 800ce68:	e005      	b.n	800ce76 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ce6a:	6878      	ldr	r0, [r7, #4]
 800ce6c:	f000 fa4b 	bl	800d306 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ce70:	6878      	ldr	r0, [r7, #4]
 800ce72:	f000 fa5c 	bl	800d32e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	2200      	movs	r2, #0
 800ce7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	691b      	ldr	r3, [r3, #16]
 800ce82:	f003 0301 	and.w	r3, r3, #1
 800ce86:	2b01      	cmp	r3, #1
 800ce88:	d10e      	bne.n	800cea8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	68db      	ldr	r3, [r3, #12]
 800ce90:	f003 0301 	and.w	r3, r3, #1
 800ce94:	2b01      	cmp	r3, #1
 800ce96:	d107      	bne.n	800cea8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	f06f 0201 	mvn.w	r2, #1
 800cea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cea2:	6878      	ldr	r0, [r7, #4]
 800cea4:	f7f7 fa36 	bl	8004314 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	691b      	ldr	r3, [r3, #16]
 800ceae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ceb2:	2b80      	cmp	r3, #128	; 0x80
 800ceb4:	d10e      	bne.n	800ced4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	68db      	ldr	r3, [r3, #12]
 800cebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cec0:	2b80      	cmp	r3, #128	; 0x80
 800cec2:	d107      	bne.n	800ced4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800cecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cece:	6878      	ldr	r0, [r7, #4]
 800ced0:	f000 fe50 	bl	800db74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	691b      	ldr	r3, [r3, #16]
 800ceda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cede:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cee2:	d10e      	bne.n	800cf02 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	68db      	ldr	r3, [r3, #12]
 800ceea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ceee:	2b80      	cmp	r3, #128	; 0x80
 800cef0:	d107      	bne.n	800cf02 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800cefa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800cefc:	6878      	ldr	r0, [r7, #4]
 800cefe:	f000 fe43 	bl	800db88 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	691b      	ldr	r3, [r3, #16]
 800cf08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf0c:	2b40      	cmp	r3, #64	; 0x40
 800cf0e:	d10e      	bne.n	800cf2e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	68db      	ldr	r3, [r3, #12]
 800cf16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf1a:	2b40      	cmp	r3, #64	; 0x40
 800cf1c:	d107      	bne.n	800cf2e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cf26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cf28:	6878      	ldr	r0, [r7, #4]
 800cf2a:	f000 fa0a 	bl	800d342 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	691b      	ldr	r3, [r3, #16]
 800cf34:	f003 0320 	and.w	r3, r3, #32
 800cf38:	2b20      	cmp	r3, #32
 800cf3a:	d10e      	bne.n	800cf5a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	68db      	ldr	r3, [r3, #12]
 800cf42:	f003 0320 	and.w	r3, r3, #32
 800cf46:	2b20      	cmp	r3, #32
 800cf48:	d107      	bne.n	800cf5a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	f06f 0220 	mvn.w	r2, #32
 800cf52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cf54:	6878      	ldr	r0, [r7, #4]
 800cf56:	f000 fe03 	bl	800db60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cf5a:	bf00      	nop
 800cf5c:	3708      	adds	r7, #8
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	bd80      	pop	{r7, pc}
	...

0800cf64 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b084      	sub	sp, #16
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	60f8      	str	r0, [r7, #12]
 800cf6c:	60b9      	str	r1, [r7, #8]
 800cf6e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cf76:	2b01      	cmp	r3, #1
 800cf78:	d101      	bne.n	800cf7e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800cf7a:	2302      	movs	r3, #2
 800cf7c:	e105      	b.n	800d18a <HAL_TIM_PWM_ConfigChannel+0x226>
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	2201      	movs	r2, #1
 800cf82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	2202      	movs	r2, #2
 800cf8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	2b14      	cmp	r3, #20
 800cf92:	f200 80f0 	bhi.w	800d176 <HAL_TIM_PWM_ConfigChannel+0x212>
 800cf96:	a201      	add	r2, pc, #4	; (adr r2, 800cf9c <HAL_TIM_PWM_ConfigChannel+0x38>)
 800cf98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf9c:	0800cff1 	.word	0x0800cff1
 800cfa0:	0800d177 	.word	0x0800d177
 800cfa4:	0800d177 	.word	0x0800d177
 800cfa8:	0800d177 	.word	0x0800d177
 800cfac:	0800d031 	.word	0x0800d031
 800cfb0:	0800d177 	.word	0x0800d177
 800cfb4:	0800d177 	.word	0x0800d177
 800cfb8:	0800d177 	.word	0x0800d177
 800cfbc:	0800d073 	.word	0x0800d073
 800cfc0:	0800d177 	.word	0x0800d177
 800cfc4:	0800d177 	.word	0x0800d177
 800cfc8:	0800d177 	.word	0x0800d177
 800cfcc:	0800d0b3 	.word	0x0800d0b3
 800cfd0:	0800d177 	.word	0x0800d177
 800cfd4:	0800d177 	.word	0x0800d177
 800cfd8:	0800d177 	.word	0x0800d177
 800cfdc:	0800d0f5 	.word	0x0800d0f5
 800cfe0:	0800d177 	.word	0x0800d177
 800cfe4:	0800d177 	.word	0x0800d177
 800cfe8:	0800d177 	.word	0x0800d177
 800cfec:	0800d135 	.word	0x0800d135
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	68b9      	ldr	r1, [r7, #8]
 800cff6:	4618      	mov	r0, r3
 800cff8:	f000 fa12 	bl	800d420 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	699a      	ldr	r2, [r3, #24]
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	f042 0208 	orr.w	r2, r2, #8
 800d00a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	699a      	ldr	r2, [r3, #24]
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	f022 0204 	bic.w	r2, r2, #4
 800d01a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	6999      	ldr	r1, [r3, #24]
 800d022:	68bb      	ldr	r3, [r7, #8]
 800d024:	691a      	ldr	r2, [r3, #16]
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	430a      	orrs	r2, r1
 800d02c:	619a      	str	r2, [r3, #24]
      break;
 800d02e:	e0a3      	b.n	800d178 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	68b9      	ldr	r1, [r7, #8]
 800d036:	4618      	mov	r0, r3
 800d038:	f000 fa6e 	bl	800d518 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	699a      	ldr	r2, [r3, #24]
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d04a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	699a      	ldr	r2, [r3, #24]
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d05a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	6999      	ldr	r1, [r3, #24]
 800d062:	68bb      	ldr	r3, [r7, #8]
 800d064:	691b      	ldr	r3, [r3, #16]
 800d066:	021a      	lsls	r2, r3, #8
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	430a      	orrs	r2, r1
 800d06e:	619a      	str	r2, [r3, #24]
      break;
 800d070:	e082      	b.n	800d178 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	68b9      	ldr	r1, [r7, #8]
 800d078:	4618      	mov	r0, r3
 800d07a:	f000 fac7 	bl	800d60c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	69da      	ldr	r2, [r3, #28]
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	f042 0208 	orr.w	r2, r2, #8
 800d08c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	69da      	ldr	r2, [r3, #28]
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	f022 0204 	bic.w	r2, r2, #4
 800d09c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	69d9      	ldr	r1, [r3, #28]
 800d0a4:	68bb      	ldr	r3, [r7, #8]
 800d0a6:	691a      	ldr	r2, [r3, #16]
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	430a      	orrs	r2, r1
 800d0ae:	61da      	str	r2, [r3, #28]
      break;
 800d0b0:	e062      	b.n	800d178 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	68b9      	ldr	r1, [r7, #8]
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	f000 fb1f 	bl	800d6fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	69da      	ldr	r2, [r3, #28]
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d0cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	69da      	ldr	r2, [r3, #28]
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d0dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	69d9      	ldr	r1, [r3, #28]
 800d0e4:	68bb      	ldr	r3, [r7, #8]
 800d0e6:	691b      	ldr	r3, [r3, #16]
 800d0e8:	021a      	lsls	r2, r3, #8
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	430a      	orrs	r2, r1
 800d0f0:	61da      	str	r2, [r3, #28]
      break;
 800d0f2:	e041      	b.n	800d178 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	68b9      	ldr	r1, [r7, #8]
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	f000 fb5c 	bl	800d7b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	f042 0208 	orr.w	r2, r2, #8
 800d10e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	f022 0204 	bic.w	r2, r2, #4
 800d11e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d126:	68bb      	ldr	r3, [r7, #8]
 800d128:	691a      	ldr	r2, [r3, #16]
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	430a      	orrs	r2, r1
 800d130:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d132:	e021      	b.n	800d178 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	68b9      	ldr	r1, [r7, #8]
 800d13a:	4618      	mov	r0, r3
 800d13c:	f000 fb94 	bl	800d868 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d14e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d15e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d166:	68bb      	ldr	r3, [r7, #8]
 800d168:	691b      	ldr	r3, [r3, #16]
 800d16a:	021a      	lsls	r2, r3, #8
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	430a      	orrs	r2, r1
 800d172:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d174:	e000      	b.n	800d178 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800d176:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	2201      	movs	r2, #1
 800d17c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	2200      	movs	r2, #0
 800d184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d188:	2300      	movs	r3, #0
}
 800d18a:	4618      	mov	r0, r3
 800d18c:	3710      	adds	r7, #16
 800d18e:	46bd      	mov	sp, r7
 800d190:	bd80      	pop	{r7, pc}
 800d192:	bf00      	nop

0800d194 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d194:	b580      	push	{r7, lr}
 800d196:	b084      	sub	sp, #16
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
 800d19c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d1a4:	2b01      	cmp	r3, #1
 800d1a6:	d101      	bne.n	800d1ac <HAL_TIM_ConfigClockSource+0x18>
 800d1a8:	2302      	movs	r3, #2
 800d1aa:	e0a8      	b.n	800d2fe <HAL_TIM_ConfigClockSource+0x16a>
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	2201      	movs	r2, #1
 800d1b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	2202      	movs	r2, #2
 800d1b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	689b      	ldr	r3, [r3, #8]
 800d1c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800d1ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800d1ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d1d6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	68fa      	ldr	r2, [r7, #12]
 800d1de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d1e0:	683b      	ldr	r3, [r7, #0]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	2b40      	cmp	r3, #64	; 0x40
 800d1e6:	d067      	beq.n	800d2b8 <HAL_TIM_ConfigClockSource+0x124>
 800d1e8:	2b40      	cmp	r3, #64	; 0x40
 800d1ea:	d80b      	bhi.n	800d204 <HAL_TIM_ConfigClockSource+0x70>
 800d1ec:	2b10      	cmp	r3, #16
 800d1ee:	d073      	beq.n	800d2d8 <HAL_TIM_ConfigClockSource+0x144>
 800d1f0:	2b10      	cmp	r3, #16
 800d1f2:	d802      	bhi.n	800d1fa <HAL_TIM_ConfigClockSource+0x66>
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d06f      	beq.n	800d2d8 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800d1f8:	e078      	b.n	800d2ec <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800d1fa:	2b20      	cmp	r3, #32
 800d1fc:	d06c      	beq.n	800d2d8 <HAL_TIM_ConfigClockSource+0x144>
 800d1fe:	2b30      	cmp	r3, #48	; 0x30
 800d200:	d06a      	beq.n	800d2d8 <HAL_TIM_ConfigClockSource+0x144>
      break;
 800d202:	e073      	b.n	800d2ec <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800d204:	2b70      	cmp	r3, #112	; 0x70
 800d206:	d00d      	beq.n	800d224 <HAL_TIM_ConfigClockSource+0x90>
 800d208:	2b70      	cmp	r3, #112	; 0x70
 800d20a:	d804      	bhi.n	800d216 <HAL_TIM_ConfigClockSource+0x82>
 800d20c:	2b50      	cmp	r3, #80	; 0x50
 800d20e:	d033      	beq.n	800d278 <HAL_TIM_ConfigClockSource+0xe4>
 800d210:	2b60      	cmp	r3, #96	; 0x60
 800d212:	d041      	beq.n	800d298 <HAL_TIM_ConfigClockSource+0x104>
      break;
 800d214:	e06a      	b.n	800d2ec <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800d216:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d21a:	d066      	beq.n	800d2ea <HAL_TIM_ConfigClockSource+0x156>
 800d21c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d220:	d017      	beq.n	800d252 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 800d222:	e063      	b.n	800d2ec <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	6818      	ldr	r0, [r3, #0]
 800d228:	683b      	ldr	r3, [r7, #0]
 800d22a:	6899      	ldr	r1, [r3, #8]
 800d22c:	683b      	ldr	r3, [r7, #0]
 800d22e:	685a      	ldr	r2, [r3, #4]
 800d230:	683b      	ldr	r3, [r7, #0]
 800d232:	68db      	ldr	r3, [r3, #12]
 800d234:	f000 fbee 	bl	800da14 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	689b      	ldr	r3, [r3, #8]
 800d23e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d246:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	68fa      	ldr	r2, [r7, #12]
 800d24e:	609a      	str	r2, [r3, #8]
      break;
 800d250:	e04c      	b.n	800d2ec <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	6818      	ldr	r0, [r3, #0]
 800d256:	683b      	ldr	r3, [r7, #0]
 800d258:	6899      	ldr	r1, [r3, #8]
 800d25a:	683b      	ldr	r3, [r7, #0]
 800d25c:	685a      	ldr	r2, [r3, #4]
 800d25e:	683b      	ldr	r3, [r7, #0]
 800d260:	68db      	ldr	r3, [r3, #12]
 800d262:	f000 fbd7 	bl	800da14 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	689a      	ldr	r2, [r3, #8]
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d274:	609a      	str	r2, [r3, #8]
      break;
 800d276:	e039      	b.n	800d2ec <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	6818      	ldr	r0, [r3, #0]
 800d27c:	683b      	ldr	r3, [r7, #0]
 800d27e:	6859      	ldr	r1, [r3, #4]
 800d280:	683b      	ldr	r3, [r7, #0]
 800d282:	68db      	ldr	r3, [r3, #12]
 800d284:	461a      	mov	r2, r3
 800d286:	f000 fb49 	bl	800d91c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	2150      	movs	r1, #80	; 0x50
 800d290:	4618      	mov	r0, r3
 800d292:	f000 fba2 	bl	800d9da <TIM_ITRx_SetConfig>
      break;
 800d296:	e029      	b.n	800d2ec <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	6818      	ldr	r0, [r3, #0]
 800d29c:	683b      	ldr	r3, [r7, #0]
 800d29e:	6859      	ldr	r1, [r3, #4]
 800d2a0:	683b      	ldr	r3, [r7, #0]
 800d2a2:	68db      	ldr	r3, [r3, #12]
 800d2a4:	461a      	mov	r2, r3
 800d2a6:	f000 fb68 	bl	800d97a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	2160      	movs	r1, #96	; 0x60
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	f000 fb92 	bl	800d9da <TIM_ITRx_SetConfig>
      break;
 800d2b6:	e019      	b.n	800d2ec <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	6818      	ldr	r0, [r3, #0]
 800d2bc:	683b      	ldr	r3, [r7, #0]
 800d2be:	6859      	ldr	r1, [r3, #4]
 800d2c0:	683b      	ldr	r3, [r7, #0]
 800d2c2:	68db      	ldr	r3, [r3, #12]
 800d2c4:	461a      	mov	r2, r3
 800d2c6:	f000 fb29 	bl	800d91c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	2140      	movs	r1, #64	; 0x40
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	f000 fb82 	bl	800d9da <TIM_ITRx_SetConfig>
      break;
 800d2d6:	e009      	b.n	800d2ec <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681a      	ldr	r2, [r3, #0]
 800d2dc:	683b      	ldr	r3, [r7, #0]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	4619      	mov	r1, r3
 800d2e2:	4610      	mov	r0, r2
 800d2e4:	f000 fb79 	bl	800d9da <TIM_ITRx_SetConfig>
      break;
 800d2e8:	e000      	b.n	800d2ec <HAL_TIM_ConfigClockSource+0x158>
      break;
 800d2ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	2201      	movs	r2, #1
 800d2f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	2200      	movs	r2, #0
 800d2f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d2fc:	2300      	movs	r3, #0
}
 800d2fe:	4618      	mov	r0, r3
 800d300:	3710      	adds	r7, #16
 800d302:	46bd      	mov	sp, r7
 800d304:	bd80      	pop	{r7, pc}

0800d306 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d306:	b480      	push	{r7}
 800d308:	b083      	sub	sp, #12
 800d30a:	af00      	add	r7, sp, #0
 800d30c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d30e:	bf00      	nop
 800d310:	370c      	adds	r7, #12
 800d312:	46bd      	mov	sp, r7
 800d314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d318:	4770      	bx	lr

0800d31a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d31a:	b480      	push	{r7}
 800d31c:	b083      	sub	sp, #12
 800d31e:	af00      	add	r7, sp, #0
 800d320:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d322:	bf00      	nop
 800d324:	370c      	adds	r7, #12
 800d326:	46bd      	mov	sp, r7
 800d328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32c:	4770      	bx	lr

0800d32e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d32e:	b480      	push	{r7}
 800d330:	b083      	sub	sp, #12
 800d332:	af00      	add	r7, sp, #0
 800d334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d336:	bf00      	nop
 800d338:	370c      	adds	r7, #12
 800d33a:	46bd      	mov	sp, r7
 800d33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d340:	4770      	bx	lr

0800d342 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d342:	b480      	push	{r7}
 800d344:	b083      	sub	sp, #12
 800d346:	af00      	add	r7, sp, #0
 800d348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d34a:	bf00      	nop
 800d34c:	370c      	adds	r7, #12
 800d34e:	46bd      	mov	sp, r7
 800d350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d354:	4770      	bx	lr
	...

0800d358 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d358:	b480      	push	{r7}
 800d35a:	b085      	sub	sp, #20
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
 800d360:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	4a2a      	ldr	r2, [pc, #168]	; (800d414 <TIM_Base_SetConfig+0xbc>)
 800d36c:	4293      	cmp	r3, r2
 800d36e:	d003      	beq.n	800d378 <TIM_Base_SetConfig+0x20>
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d376:	d108      	bne.n	800d38a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d37e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d380:	683b      	ldr	r3, [r7, #0]
 800d382:	685b      	ldr	r3, [r3, #4]
 800d384:	68fa      	ldr	r2, [r7, #12]
 800d386:	4313      	orrs	r3, r2
 800d388:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	4a21      	ldr	r2, [pc, #132]	; (800d414 <TIM_Base_SetConfig+0xbc>)
 800d38e:	4293      	cmp	r3, r2
 800d390:	d00b      	beq.n	800d3aa <TIM_Base_SetConfig+0x52>
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d398:	d007      	beq.n	800d3aa <TIM_Base_SetConfig+0x52>
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	4a1e      	ldr	r2, [pc, #120]	; (800d418 <TIM_Base_SetConfig+0xc0>)
 800d39e:	4293      	cmp	r3, r2
 800d3a0:	d003      	beq.n	800d3aa <TIM_Base_SetConfig+0x52>
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	4a1d      	ldr	r2, [pc, #116]	; (800d41c <TIM_Base_SetConfig+0xc4>)
 800d3a6:	4293      	cmp	r3, r2
 800d3a8:	d108      	bne.n	800d3bc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d3b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d3b2:	683b      	ldr	r3, [r7, #0]
 800d3b4:	68db      	ldr	r3, [r3, #12]
 800d3b6:	68fa      	ldr	r2, [r7, #12]
 800d3b8:	4313      	orrs	r3, r2
 800d3ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	695b      	ldr	r3, [r3, #20]
 800d3c6:	4313      	orrs	r3, r2
 800d3c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	68fa      	ldr	r2, [r7, #12]
 800d3ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d3d0:	683b      	ldr	r3, [r7, #0]
 800d3d2:	689a      	ldr	r2, [r3, #8]
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d3d8:	683b      	ldr	r3, [r7, #0]
 800d3da:	681a      	ldr	r2, [r3, #0]
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	4a0c      	ldr	r2, [pc, #48]	; (800d414 <TIM_Base_SetConfig+0xbc>)
 800d3e4:	4293      	cmp	r3, r2
 800d3e6:	d007      	beq.n	800d3f8 <TIM_Base_SetConfig+0xa0>
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	4a0b      	ldr	r2, [pc, #44]	; (800d418 <TIM_Base_SetConfig+0xc0>)
 800d3ec:	4293      	cmp	r3, r2
 800d3ee:	d003      	beq.n	800d3f8 <TIM_Base_SetConfig+0xa0>
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	4a0a      	ldr	r2, [pc, #40]	; (800d41c <TIM_Base_SetConfig+0xc4>)
 800d3f4:	4293      	cmp	r3, r2
 800d3f6:	d103      	bne.n	800d400 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d3f8:	683b      	ldr	r3, [r7, #0]
 800d3fa:	691a      	ldr	r2, [r3, #16]
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	2201      	movs	r2, #1
 800d404:	615a      	str	r2, [r3, #20]
}
 800d406:	bf00      	nop
 800d408:	3714      	adds	r7, #20
 800d40a:	46bd      	mov	sp, r7
 800d40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d410:	4770      	bx	lr
 800d412:	bf00      	nop
 800d414:	40012c00 	.word	0x40012c00
 800d418:	40014400 	.word	0x40014400
 800d41c:	40014800 	.word	0x40014800

0800d420 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d420:	b480      	push	{r7}
 800d422:	b087      	sub	sp, #28
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
 800d428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	6a1b      	ldr	r3, [r3, #32]
 800d42e:	f023 0201 	bic.w	r2, r3, #1
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	6a1b      	ldr	r3, [r3, #32]
 800d43a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	685b      	ldr	r3, [r3, #4]
 800d440:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	699b      	ldr	r3, [r3, #24]
 800d446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d44e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	f023 0303 	bic.w	r3, r3, #3
 800d45a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d45c:	683b      	ldr	r3, [r7, #0]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	68fa      	ldr	r2, [r7, #12]
 800d462:	4313      	orrs	r3, r2
 800d464:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d466:	697b      	ldr	r3, [r7, #20]
 800d468:	f023 0302 	bic.w	r3, r3, #2
 800d46c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d46e:	683b      	ldr	r3, [r7, #0]
 800d470:	689b      	ldr	r3, [r3, #8]
 800d472:	697a      	ldr	r2, [r7, #20]
 800d474:	4313      	orrs	r3, r2
 800d476:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	4a24      	ldr	r2, [pc, #144]	; (800d50c <TIM_OC1_SetConfig+0xec>)
 800d47c:	4293      	cmp	r3, r2
 800d47e:	d007      	beq.n	800d490 <TIM_OC1_SetConfig+0x70>
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	4a23      	ldr	r2, [pc, #140]	; (800d510 <TIM_OC1_SetConfig+0xf0>)
 800d484:	4293      	cmp	r3, r2
 800d486:	d003      	beq.n	800d490 <TIM_OC1_SetConfig+0x70>
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	4a22      	ldr	r2, [pc, #136]	; (800d514 <TIM_OC1_SetConfig+0xf4>)
 800d48c:	4293      	cmp	r3, r2
 800d48e:	d10c      	bne.n	800d4aa <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d490:	697b      	ldr	r3, [r7, #20]
 800d492:	f023 0308 	bic.w	r3, r3, #8
 800d496:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d498:	683b      	ldr	r3, [r7, #0]
 800d49a:	68db      	ldr	r3, [r3, #12]
 800d49c:	697a      	ldr	r2, [r7, #20]
 800d49e:	4313      	orrs	r3, r2
 800d4a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d4a2:	697b      	ldr	r3, [r7, #20]
 800d4a4:	f023 0304 	bic.w	r3, r3, #4
 800d4a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	4a17      	ldr	r2, [pc, #92]	; (800d50c <TIM_OC1_SetConfig+0xec>)
 800d4ae:	4293      	cmp	r3, r2
 800d4b0:	d007      	beq.n	800d4c2 <TIM_OC1_SetConfig+0xa2>
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	4a17      	ldr	r2, [pc, #92]	; (800d514 <TIM_OC1_SetConfig+0xf4>)
 800d4b6:	4293      	cmp	r3, r2
 800d4b8:	d003      	beq.n	800d4c2 <TIM_OC1_SetConfig+0xa2>
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	4a14      	ldr	r2, [pc, #80]	; (800d510 <TIM_OC1_SetConfig+0xf0>)
 800d4be:	4293      	cmp	r3, r2
 800d4c0:	d111      	bne.n	800d4e6 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d4c2:	693b      	ldr	r3, [r7, #16]
 800d4c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d4c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d4ca:	693b      	ldr	r3, [r7, #16]
 800d4cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d4d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d4d2:	683b      	ldr	r3, [r7, #0]
 800d4d4:	695b      	ldr	r3, [r3, #20]
 800d4d6:	693a      	ldr	r2, [r7, #16]
 800d4d8:	4313      	orrs	r3, r2
 800d4da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d4dc:	683b      	ldr	r3, [r7, #0]
 800d4de:	699b      	ldr	r3, [r3, #24]
 800d4e0:	693a      	ldr	r2, [r7, #16]
 800d4e2:	4313      	orrs	r3, r2
 800d4e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	693a      	ldr	r2, [r7, #16]
 800d4ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	68fa      	ldr	r2, [r7, #12]
 800d4f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d4f2:	683b      	ldr	r3, [r7, #0]
 800d4f4:	685a      	ldr	r2, [r3, #4]
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	697a      	ldr	r2, [r7, #20]
 800d4fe:	621a      	str	r2, [r3, #32]
}
 800d500:	bf00      	nop
 800d502:	371c      	adds	r7, #28
 800d504:	46bd      	mov	sp, r7
 800d506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50a:	4770      	bx	lr
 800d50c:	40012c00 	.word	0x40012c00
 800d510:	40014800 	.word	0x40014800
 800d514:	40014400 	.word	0x40014400

0800d518 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d518:	b480      	push	{r7}
 800d51a:	b087      	sub	sp, #28
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]
 800d520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	6a1b      	ldr	r3, [r3, #32]
 800d526:	f023 0210 	bic.w	r2, r3, #16
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	6a1b      	ldr	r3, [r3, #32]
 800d532:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	685b      	ldr	r3, [r3, #4]
 800d538:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	699b      	ldr	r3, [r3, #24]
 800d53e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d546:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d54a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d552:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d554:	683b      	ldr	r3, [r7, #0]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	021b      	lsls	r3, r3, #8
 800d55a:	68fa      	ldr	r2, [r7, #12]
 800d55c:	4313      	orrs	r3, r2
 800d55e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d560:	697b      	ldr	r3, [r7, #20]
 800d562:	f023 0320 	bic.w	r3, r3, #32
 800d566:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d568:	683b      	ldr	r3, [r7, #0]
 800d56a:	689b      	ldr	r3, [r3, #8]
 800d56c:	011b      	lsls	r3, r3, #4
 800d56e:	697a      	ldr	r2, [r7, #20]
 800d570:	4313      	orrs	r3, r2
 800d572:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	4a22      	ldr	r2, [pc, #136]	; (800d600 <TIM_OC2_SetConfig+0xe8>)
 800d578:	4293      	cmp	r3, r2
 800d57a:	d10d      	bne.n	800d598 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d57c:	697b      	ldr	r3, [r7, #20]
 800d57e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d582:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d584:	683b      	ldr	r3, [r7, #0]
 800d586:	68db      	ldr	r3, [r3, #12]
 800d588:	011b      	lsls	r3, r3, #4
 800d58a:	697a      	ldr	r2, [r7, #20]
 800d58c:	4313      	orrs	r3, r2
 800d58e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d590:	697b      	ldr	r3, [r7, #20]
 800d592:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d596:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	4a19      	ldr	r2, [pc, #100]	; (800d600 <TIM_OC2_SetConfig+0xe8>)
 800d59c:	4293      	cmp	r3, r2
 800d59e:	d007      	beq.n	800d5b0 <TIM_OC2_SetConfig+0x98>
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	4a18      	ldr	r2, [pc, #96]	; (800d604 <TIM_OC2_SetConfig+0xec>)
 800d5a4:	4293      	cmp	r3, r2
 800d5a6:	d003      	beq.n	800d5b0 <TIM_OC2_SetConfig+0x98>
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	4a17      	ldr	r2, [pc, #92]	; (800d608 <TIM_OC2_SetConfig+0xf0>)
 800d5ac:	4293      	cmp	r3, r2
 800d5ae:	d113      	bne.n	800d5d8 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d5b0:	693b      	ldr	r3, [r7, #16]
 800d5b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d5b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d5b8:	693b      	ldr	r3, [r7, #16]
 800d5ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d5be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d5c0:	683b      	ldr	r3, [r7, #0]
 800d5c2:	695b      	ldr	r3, [r3, #20]
 800d5c4:	009b      	lsls	r3, r3, #2
 800d5c6:	693a      	ldr	r2, [r7, #16]
 800d5c8:	4313      	orrs	r3, r2
 800d5ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d5cc:	683b      	ldr	r3, [r7, #0]
 800d5ce:	699b      	ldr	r3, [r3, #24]
 800d5d0:	009b      	lsls	r3, r3, #2
 800d5d2:	693a      	ldr	r2, [r7, #16]
 800d5d4:	4313      	orrs	r3, r2
 800d5d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	693a      	ldr	r2, [r7, #16]
 800d5dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	68fa      	ldr	r2, [r7, #12]
 800d5e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d5e4:	683b      	ldr	r3, [r7, #0]
 800d5e6:	685a      	ldr	r2, [r3, #4]
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	697a      	ldr	r2, [r7, #20]
 800d5f0:	621a      	str	r2, [r3, #32]
}
 800d5f2:	bf00      	nop
 800d5f4:	371c      	adds	r7, #28
 800d5f6:	46bd      	mov	sp, r7
 800d5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fc:	4770      	bx	lr
 800d5fe:	bf00      	nop
 800d600:	40012c00 	.word	0x40012c00
 800d604:	40014400 	.word	0x40014400
 800d608:	40014800 	.word	0x40014800

0800d60c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d60c:	b480      	push	{r7}
 800d60e:	b087      	sub	sp, #28
 800d610:	af00      	add	r7, sp, #0
 800d612:	6078      	str	r0, [r7, #4]
 800d614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	6a1b      	ldr	r3, [r3, #32]
 800d61a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	6a1b      	ldr	r3, [r3, #32]
 800d626:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	685b      	ldr	r3, [r3, #4]
 800d62c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	69db      	ldr	r3, [r3, #28]
 800d632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d63a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d63e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	f023 0303 	bic.w	r3, r3, #3
 800d646:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d648:	683b      	ldr	r3, [r7, #0]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	68fa      	ldr	r2, [r7, #12]
 800d64e:	4313      	orrs	r3, r2
 800d650:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d652:	697b      	ldr	r3, [r7, #20]
 800d654:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d658:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d65a:	683b      	ldr	r3, [r7, #0]
 800d65c:	689b      	ldr	r3, [r3, #8]
 800d65e:	021b      	lsls	r3, r3, #8
 800d660:	697a      	ldr	r2, [r7, #20]
 800d662:	4313      	orrs	r3, r2
 800d664:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	4a21      	ldr	r2, [pc, #132]	; (800d6f0 <TIM_OC3_SetConfig+0xe4>)
 800d66a:	4293      	cmp	r3, r2
 800d66c:	d10d      	bne.n	800d68a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d66e:	697b      	ldr	r3, [r7, #20]
 800d670:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d674:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d676:	683b      	ldr	r3, [r7, #0]
 800d678:	68db      	ldr	r3, [r3, #12]
 800d67a:	021b      	lsls	r3, r3, #8
 800d67c:	697a      	ldr	r2, [r7, #20]
 800d67e:	4313      	orrs	r3, r2
 800d680:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d682:	697b      	ldr	r3, [r7, #20]
 800d684:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d688:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	4a18      	ldr	r2, [pc, #96]	; (800d6f0 <TIM_OC3_SetConfig+0xe4>)
 800d68e:	4293      	cmp	r3, r2
 800d690:	d007      	beq.n	800d6a2 <TIM_OC3_SetConfig+0x96>
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	4a17      	ldr	r2, [pc, #92]	; (800d6f4 <TIM_OC3_SetConfig+0xe8>)
 800d696:	4293      	cmp	r3, r2
 800d698:	d003      	beq.n	800d6a2 <TIM_OC3_SetConfig+0x96>
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	4a16      	ldr	r2, [pc, #88]	; (800d6f8 <TIM_OC3_SetConfig+0xec>)
 800d69e:	4293      	cmp	r3, r2
 800d6a0:	d113      	bne.n	800d6ca <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d6a2:	693b      	ldr	r3, [r7, #16]
 800d6a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d6a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d6aa:	693b      	ldr	r3, [r7, #16]
 800d6ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d6b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d6b2:	683b      	ldr	r3, [r7, #0]
 800d6b4:	695b      	ldr	r3, [r3, #20]
 800d6b6:	011b      	lsls	r3, r3, #4
 800d6b8:	693a      	ldr	r2, [r7, #16]
 800d6ba:	4313      	orrs	r3, r2
 800d6bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d6be:	683b      	ldr	r3, [r7, #0]
 800d6c0:	699b      	ldr	r3, [r3, #24]
 800d6c2:	011b      	lsls	r3, r3, #4
 800d6c4:	693a      	ldr	r2, [r7, #16]
 800d6c6:	4313      	orrs	r3, r2
 800d6c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	693a      	ldr	r2, [r7, #16]
 800d6ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	68fa      	ldr	r2, [r7, #12]
 800d6d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d6d6:	683b      	ldr	r3, [r7, #0]
 800d6d8:	685a      	ldr	r2, [r3, #4]
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	697a      	ldr	r2, [r7, #20]
 800d6e2:	621a      	str	r2, [r3, #32]
}
 800d6e4:	bf00      	nop
 800d6e6:	371c      	adds	r7, #28
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ee:	4770      	bx	lr
 800d6f0:	40012c00 	.word	0x40012c00
 800d6f4:	40014400 	.word	0x40014400
 800d6f8:	40014800 	.word	0x40014800

0800d6fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d6fc:	b480      	push	{r7}
 800d6fe:	b087      	sub	sp, #28
 800d700:	af00      	add	r7, sp, #0
 800d702:	6078      	str	r0, [r7, #4]
 800d704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	6a1b      	ldr	r3, [r3, #32]
 800d70a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	6a1b      	ldr	r3, [r3, #32]
 800d716:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	685b      	ldr	r3, [r3, #4]
 800d71c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	69db      	ldr	r3, [r3, #28]
 800d722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d72a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d72e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d736:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d738:	683b      	ldr	r3, [r7, #0]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	021b      	lsls	r3, r3, #8
 800d73e:	68fa      	ldr	r2, [r7, #12]
 800d740:	4313      	orrs	r3, r2
 800d742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d744:	693b      	ldr	r3, [r7, #16]
 800d746:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d74a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d74c:	683b      	ldr	r3, [r7, #0]
 800d74e:	689b      	ldr	r3, [r3, #8]
 800d750:	031b      	lsls	r3, r3, #12
 800d752:	693a      	ldr	r2, [r7, #16]
 800d754:	4313      	orrs	r3, r2
 800d756:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	4a14      	ldr	r2, [pc, #80]	; (800d7ac <TIM_OC4_SetConfig+0xb0>)
 800d75c:	4293      	cmp	r3, r2
 800d75e:	d007      	beq.n	800d770 <TIM_OC4_SetConfig+0x74>
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	4a13      	ldr	r2, [pc, #76]	; (800d7b0 <TIM_OC4_SetConfig+0xb4>)
 800d764:	4293      	cmp	r3, r2
 800d766:	d003      	beq.n	800d770 <TIM_OC4_SetConfig+0x74>
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	4a12      	ldr	r2, [pc, #72]	; (800d7b4 <TIM_OC4_SetConfig+0xb8>)
 800d76c:	4293      	cmp	r3, r2
 800d76e:	d109      	bne.n	800d784 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d770:	697b      	ldr	r3, [r7, #20]
 800d772:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d776:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d778:	683b      	ldr	r3, [r7, #0]
 800d77a:	695b      	ldr	r3, [r3, #20]
 800d77c:	019b      	lsls	r3, r3, #6
 800d77e:	697a      	ldr	r2, [r7, #20]
 800d780:	4313      	orrs	r3, r2
 800d782:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	697a      	ldr	r2, [r7, #20]
 800d788:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	68fa      	ldr	r2, [r7, #12]
 800d78e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d790:	683b      	ldr	r3, [r7, #0]
 800d792:	685a      	ldr	r2, [r3, #4]
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	693a      	ldr	r2, [r7, #16]
 800d79c:	621a      	str	r2, [r3, #32]
}
 800d79e:	bf00      	nop
 800d7a0:	371c      	adds	r7, #28
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a8:	4770      	bx	lr
 800d7aa:	bf00      	nop
 800d7ac:	40012c00 	.word	0x40012c00
 800d7b0:	40014400 	.word	0x40014400
 800d7b4:	40014800 	.word	0x40014800

0800d7b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d7b8:	b480      	push	{r7}
 800d7ba:	b087      	sub	sp, #28
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
 800d7c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	6a1b      	ldr	r3, [r3, #32]
 800d7c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	6a1b      	ldr	r3, [r3, #32]
 800d7d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	685b      	ldr	r3, [r3, #4]
 800d7d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d7de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d7e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d7ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d7ec:	683b      	ldr	r3, [r7, #0]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	68fa      	ldr	r2, [r7, #12]
 800d7f2:	4313      	orrs	r3, r2
 800d7f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d7f6:	693b      	ldr	r3, [r7, #16]
 800d7f8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d7fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d7fe:	683b      	ldr	r3, [r7, #0]
 800d800:	689b      	ldr	r3, [r3, #8]
 800d802:	041b      	lsls	r3, r3, #16
 800d804:	693a      	ldr	r2, [r7, #16]
 800d806:	4313      	orrs	r3, r2
 800d808:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	4a13      	ldr	r2, [pc, #76]	; (800d85c <TIM_OC5_SetConfig+0xa4>)
 800d80e:	4293      	cmp	r3, r2
 800d810:	d007      	beq.n	800d822 <TIM_OC5_SetConfig+0x6a>
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	4a12      	ldr	r2, [pc, #72]	; (800d860 <TIM_OC5_SetConfig+0xa8>)
 800d816:	4293      	cmp	r3, r2
 800d818:	d003      	beq.n	800d822 <TIM_OC5_SetConfig+0x6a>
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	4a11      	ldr	r2, [pc, #68]	; (800d864 <TIM_OC5_SetConfig+0xac>)
 800d81e:	4293      	cmp	r3, r2
 800d820:	d109      	bne.n	800d836 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d822:	697b      	ldr	r3, [r7, #20]
 800d824:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d828:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d82a:	683b      	ldr	r3, [r7, #0]
 800d82c:	695b      	ldr	r3, [r3, #20]
 800d82e:	021b      	lsls	r3, r3, #8
 800d830:	697a      	ldr	r2, [r7, #20]
 800d832:	4313      	orrs	r3, r2
 800d834:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	697a      	ldr	r2, [r7, #20]
 800d83a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	68fa      	ldr	r2, [r7, #12]
 800d840:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d842:	683b      	ldr	r3, [r7, #0]
 800d844:	685a      	ldr	r2, [r3, #4]
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	693a      	ldr	r2, [r7, #16]
 800d84e:	621a      	str	r2, [r3, #32]
}
 800d850:	bf00      	nop
 800d852:	371c      	adds	r7, #28
 800d854:	46bd      	mov	sp, r7
 800d856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85a:	4770      	bx	lr
 800d85c:	40012c00 	.word	0x40012c00
 800d860:	40014400 	.word	0x40014400
 800d864:	40014800 	.word	0x40014800

0800d868 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d868:	b480      	push	{r7}
 800d86a:	b087      	sub	sp, #28
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	6078      	str	r0, [r7, #4]
 800d870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	6a1b      	ldr	r3, [r3, #32]
 800d876:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	6a1b      	ldr	r3, [r3, #32]
 800d882:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	685b      	ldr	r3, [r3, #4]
 800d888:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d88e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d896:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d89a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d89c:	683b      	ldr	r3, [r7, #0]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	021b      	lsls	r3, r3, #8
 800d8a2:	68fa      	ldr	r2, [r7, #12]
 800d8a4:	4313      	orrs	r3, r2
 800d8a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d8a8:	693b      	ldr	r3, [r7, #16]
 800d8aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d8ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d8b0:	683b      	ldr	r3, [r7, #0]
 800d8b2:	689b      	ldr	r3, [r3, #8]
 800d8b4:	051b      	lsls	r3, r3, #20
 800d8b6:	693a      	ldr	r2, [r7, #16]
 800d8b8:	4313      	orrs	r3, r2
 800d8ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	4a14      	ldr	r2, [pc, #80]	; (800d910 <TIM_OC6_SetConfig+0xa8>)
 800d8c0:	4293      	cmp	r3, r2
 800d8c2:	d007      	beq.n	800d8d4 <TIM_OC6_SetConfig+0x6c>
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	4a13      	ldr	r2, [pc, #76]	; (800d914 <TIM_OC6_SetConfig+0xac>)
 800d8c8:	4293      	cmp	r3, r2
 800d8ca:	d003      	beq.n	800d8d4 <TIM_OC6_SetConfig+0x6c>
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	4a12      	ldr	r2, [pc, #72]	; (800d918 <TIM_OC6_SetConfig+0xb0>)
 800d8d0:	4293      	cmp	r3, r2
 800d8d2:	d109      	bne.n	800d8e8 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d8d4:	697b      	ldr	r3, [r7, #20]
 800d8d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d8da:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d8dc:	683b      	ldr	r3, [r7, #0]
 800d8de:	695b      	ldr	r3, [r3, #20]
 800d8e0:	029b      	lsls	r3, r3, #10
 800d8e2:	697a      	ldr	r2, [r7, #20]
 800d8e4:	4313      	orrs	r3, r2
 800d8e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	697a      	ldr	r2, [r7, #20]
 800d8ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	68fa      	ldr	r2, [r7, #12]
 800d8f2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d8f4:	683b      	ldr	r3, [r7, #0]
 800d8f6:	685a      	ldr	r2, [r3, #4]
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	693a      	ldr	r2, [r7, #16]
 800d900:	621a      	str	r2, [r3, #32]
}
 800d902:	bf00      	nop
 800d904:	371c      	adds	r7, #28
 800d906:	46bd      	mov	sp, r7
 800d908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d90c:	4770      	bx	lr
 800d90e:	bf00      	nop
 800d910:	40012c00 	.word	0x40012c00
 800d914:	40014400 	.word	0x40014400
 800d918:	40014800 	.word	0x40014800

0800d91c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d91c:	b480      	push	{r7}
 800d91e:	b087      	sub	sp, #28
 800d920:	af00      	add	r7, sp, #0
 800d922:	60f8      	str	r0, [r7, #12]
 800d924:	60b9      	str	r1, [r7, #8]
 800d926:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	6a1b      	ldr	r3, [r3, #32]
 800d92c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	6a1b      	ldr	r3, [r3, #32]
 800d932:	f023 0201 	bic.w	r2, r3, #1
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	699b      	ldr	r3, [r3, #24]
 800d93e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d940:	693b      	ldr	r3, [r7, #16]
 800d942:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d946:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	011b      	lsls	r3, r3, #4
 800d94c:	693a      	ldr	r2, [r7, #16]
 800d94e:	4313      	orrs	r3, r2
 800d950:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d952:	697b      	ldr	r3, [r7, #20]
 800d954:	f023 030a 	bic.w	r3, r3, #10
 800d958:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d95a:	697a      	ldr	r2, [r7, #20]
 800d95c:	68bb      	ldr	r3, [r7, #8]
 800d95e:	4313      	orrs	r3, r2
 800d960:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	693a      	ldr	r2, [r7, #16]
 800d966:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	697a      	ldr	r2, [r7, #20]
 800d96c:	621a      	str	r2, [r3, #32]
}
 800d96e:	bf00      	nop
 800d970:	371c      	adds	r7, #28
 800d972:	46bd      	mov	sp, r7
 800d974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d978:	4770      	bx	lr

0800d97a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d97a:	b480      	push	{r7}
 800d97c:	b087      	sub	sp, #28
 800d97e:	af00      	add	r7, sp, #0
 800d980:	60f8      	str	r0, [r7, #12]
 800d982:	60b9      	str	r1, [r7, #8]
 800d984:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	6a1b      	ldr	r3, [r3, #32]
 800d98a:	f023 0210 	bic.w	r2, r3, #16
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	699b      	ldr	r3, [r3, #24]
 800d996:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	6a1b      	ldr	r3, [r3, #32]
 800d99c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d99e:	697b      	ldr	r3, [r7, #20]
 800d9a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d9a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	031b      	lsls	r3, r3, #12
 800d9aa:	697a      	ldr	r2, [r7, #20]
 800d9ac:	4313      	orrs	r3, r2
 800d9ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d9b0:	693b      	ldr	r3, [r7, #16]
 800d9b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d9b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d9b8:	68bb      	ldr	r3, [r7, #8]
 800d9ba:	011b      	lsls	r3, r3, #4
 800d9bc:	693a      	ldr	r2, [r7, #16]
 800d9be:	4313      	orrs	r3, r2
 800d9c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	697a      	ldr	r2, [r7, #20]
 800d9c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	693a      	ldr	r2, [r7, #16]
 800d9cc:	621a      	str	r2, [r3, #32]
}
 800d9ce:	bf00      	nop
 800d9d0:	371c      	adds	r7, #28
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d8:	4770      	bx	lr

0800d9da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d9da:	b480      	push	{r7}
 800d9dc:	b085      	sub	sp, #20
 800d9de:	af00      	add	r7, sp, #0
 800d9e0:	6078      	str	r0, [r7, #4]
 800d9e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	689b      	ldr	r3, [r3, #8]
 800d9e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800d9f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d9f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d9f6:	683a      	ldr	r2, [r7, #0]
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	4313      	orrs	r3, r2
 800d9fc:	f043 0307 	orr.w	r3, r3, #7
 800da00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	68fa      	ldr	r2, [r7, #12]
 800da06:	609a      	str	r2, [r3, #8]
}
 800da08:	bf00      	nop
 800da0a:	3714      	adds	r7, #20
 800da0c:	46bd      	mov	sp, r7
 800da0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da12:	4770      	bx	lr

0800da14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800da14:	b480      	push	{r7}
 800da16:	b087      	sub	sp, #28
 800da18:	af00      	add	r7, sp, #0
 800da1a:	60f8      	str	r0, [r7, #12]
 800da1c:	60b9      	str	r1, [r7, #8]
 800da1e:	607a      	str	r2, [r7, #4]
 800da20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	689b      	ldr	r3, [r3, #8]
 800da26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800da28:	697b      	ldr	r3, [r7, #20]
 800da2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800da2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800da30:	683b      	ldr	r3, [r7, #0]
 800da32:	021a      	lsls	r2, r3, #8
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	431a      	orrs	r2, r3
 800da38:	68bb      	ldr	r3, [r7, #8]
 800da3a:	4313      	orrs	r3, r2
 800da3c:	697a      	ldr	r2, [r7, #20]
 800da3e:	4313      	orrs	r3, r2
 800da40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	697a      	ldr	r2, [r7, #20]
 800da46:	609a      	str	r2, [r3, #8]
}
 800da48:	bf00      	nop
 800da4a:	371c      	adds	r7, #28
 800da4c:	46bd      	mov	sp, r7
 800da4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da52:	4770      	bx	lr

0800da54 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800da54:	b480      	push	{r7}
 800da56:	b087      	sub	sp, #28
 800da58:	af00      	add	r7, sp, #0
 800da5a:	60f8      	str	r0, [r7, #12]
 800da5c:	60b9      	str	r1, [r7, #8]
 800da5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800da60:	68bb      	ldr	r3, [r7, #8]
 800da62:	f003 031f 	and.w	r3, r3, #31
 800da66:	2201      	movs	r2, #1
 800da68:	fa02 f303 	lsl.w	r3, r2, r3
 800da6c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	6a1a      	ldr	r2, [r3, #32]
 800da72:	697b      	ldr	r3, [r7, #20]
 800da74:	43db      	mvns	r3, r3
 800da76:	401a      	ands	r2, r3
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	6a1a      	ldr	r2, [r3, #32]
 800da80:	68bb      	ldr	r3, [r7, #8]
 800da82:	f003 031f 	and.w	r3, r3, #31
 800da86:	6879      	ldr	r1, [r7, #4]
 800da88:	fa01 f303 	lsl.w	r3, r1, r3
 800da8c:	431a      	orrs	r2, r3
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	621a      	str	r2, [r3, #32]
}
 800da92:	bf00      	nop
 800da94:	371c      	adds	r7, #28
 800da96:	46bd      	mov	sp, r7
 800da98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da9c:	4770      	bx	lr
	...

0800daa0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800daa0:	b480      	push	{r7}
 800daa2:	b085      	sub	sp, #20
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]
 800daa8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dab0:	2b01      	cmp	r3, #1
 800dab2:	d101      	bne.n	800dab8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dab4:	2302      	movs	r3, #2
 800dab6:	e04a      	b.n	800db4e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	2201      	movs	r2, #1
 800dabc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	2202      	movs	r2, #2
 800dac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	685b      	ldr	r3, [r3, #4]
 800dace:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	689b      	ldr	r3, [r3, #8]
 800dad6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	4a1f      	ldr	r2, [pc, #124]	; (800db5c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800dade:	4293      	cmp	r3, r2
 800dae0:	d108      	bne.n	800daf4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800dae8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800daea:	683b      	ldr	r3, [r7, #0]
 800daec:	685b      	ldr	r3, [r3, #4]
 800daee:	68fa      	ldr	r2, [r7, #12]
 800daf0:	4313      	orrs	r3, r2
 800daf2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dafa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dafc:	683b      	ldr	r3, [r7, #0]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	68fa      	ldr	r2, [r7, #12]
 800db02:	4313      	orrs	r3, r2
 800db04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	68fa      	ldr	r2, [r7, #12]
 800db0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	4a12      	ldr	r2, [pc, #72]	; (800db5c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800db14:	4293      	cmp	r3, r2
 800db16:	d004      	beq.n	800db22 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800db20:	d10c      	bne.n	800db3c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800db22:	68bb      	ldr	r3, [r7, #8]
 800db24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800db28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800db2a:	683b      	ldr	r3, [r7, #0]
 800db2c:	689b      	ldr	r3, [r3, #8]
 800db2e:	68ba      	ldr	r2, [r7, #8]
 800db30:	4313      	orrs	r3, r2
 800db32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	68ba      	ldr	r2, [r7, #8]
 800db3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	2201      	movs	r2, #1
 800db40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	2200      	movs	r2, #0
 800db48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800db4c:	2300      	movs	r3, #0
}
 800db4e:	4618      	mov	r0, r3
 800db50:	3714      	adds	r7, #20
 800db52:	46bd      	mov	sp, r7
 800db54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db58:	4770      	bx	lr
 800db5a:	bf00      	nop
 800db5c:	40012c00 	.word	0x40012c00

0800db60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800db60:	b480      	push	{r7}
 800db62:	b083      	sub	sp, #12
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800db68:	bf00      	nop
 800db6a:	370c      	adds	r7, #12
 800db6c:	46bd      	mov	sp, r7
 800db6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db72:	4770      	bx	lr

0800db74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800db74:	b480      	push	{r7}
 800db76:	b083      	sub	sp, #12
 800db78:	af00      	add	r7, sp, #0
 800db7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800db7c:	bf00      	nop
 800db7e:	370c      	adds	r7, #12
 800db80:	46bd      	mov	sp, r7
 800db82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db86:	4770      	bx	lr

0800db88 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800db88:	b480      	push	{r7}
 800db8a:	b083      	sub	sp, #12
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800db90:	bf00      	nop
 800db92:	370c      	adds	r7, #12
 800db94:	46bd      	mov	sp, r7
 800db96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9a:	4770      	bx	lr

0800db9c <HAL_TSC_Init>:
  *         in the TSC_InitTypeDef structure and initialize the associated handle.
  * @param  htsc TSC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_Init(TSC_HandleTypeDef *htsc)
{
 800db9c:	b590      	push	{r4, r7, lr}
 800db9e:	b083      	sub	sp, #12
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
  /* Check TSC handle allocation */
  if (htsc == NULL)
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d101      	bne.n	800dbae <HAL_TSC_Init+0x12>
  {
    return HAL_ERROR;
 800dbaa:	2301      	movs	r3, #1
 800dbac:	e072      	b.n	800dc94 <HAL_TSC_Init+0xf8>
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));
  assert_param(IS_TSC_GROUP(htsc->Init.ChannelIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.ShieldIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.SamplingIOs));

  if (htsc->State == HAL_TSC_STATE_RESET)
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dbb4:	b2db      	uxtb	r3, r3
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d106      	bne.n	800dbc8 <HAL_TSC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htsc->Lock = HAL_UNLOCKED;
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	2200      	movs	r2, #0
 800dbbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    htsc->MspInitCallback(htsc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_TSC_MspInit(htsc);
 800dbc2:	6878      	ldr	r0, [r7, #4]
 800dbc4:	f7f8 fad2 	bl	800616c <HAL_TSC_MspInit>
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	2202      	movs	r2, #2
 800dbcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /*--------------------------------------------------------------------------*/
  /* Set TSC parameters */

  /* Enable TSC */
  htsc->Instance->CR = TSC_CR_TSCE;
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	2201      	movs	r2, #1
 800dbd6:	601a      	str	r2, [r3, #0]

  /* Set all functions */
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	6819      	ldr	r1, [r3, #0]
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	685a      	ldr	r2, [r3, #4]
                         htsc->Init.CTPulseLowLength |
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	689b      	ldr	r3, [r3, #8]
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 800dbe6:	431a      	orrs	r2, r3
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	691b      	ldr	r3, [r3, #16]
 800dbec:	045b      	lsls	r3, r3, #17
                         htsc->Init.CTPulseLowLength |
 800dbee:	431a      	orrs	r2, r3
                         htsc->Init.SpreadSpectrumPrescaler |
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	695b      	ldr	r3, [r3, #20]
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 800dbf4:	431a      	orrs	r2, r3
                         htsc->Init.PulseGeneratorPrescaler |
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	699b      	ldr	r3, [r3, #24]
                         htsc->Init.SpreadSpectrumPrescaler |
 800dbfa:	431a      	orrs	r2, r3
                         htsc->Init.MaxCountValue |
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	69db      	ldr	r3, [r3, #28]
                         htsc->Init.PulseGeneratorPrescaler |
 800dc00:	431a      	orrs	r2, r3
                         htsc->Init.SynchroPinPolarity |
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         htsc->Init.MaxCountValue |
 800dc06:	431a      	orrs	r2, r3
                         htsc->Init.AcquisitionMode);
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         htsc->Init.SynchroPinPolarity |
 800dc0c:	431a      	orrs	r2, r3
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	430a      	orrs	r2, r1
 800dc14:	601a      	str	r2, [r3, #0]

  /* Spread spectrum */
  if (htsc->Init.SpreadSpectrum == ENABLE)
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	7b1b      	ldrb	r3, [r3, #12]
 800dc1a:	2b01      	cmp	r3, #1
 800dc1c:	d107      	bne.n	800dc2e <HAL_TSC_Init+0x92>
  {
    htsc->Instance->CR |= TSC_CR_SSE;
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	681a      	ldr	r2, [r3, #0]
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800dc2c:	601a      	str	r2, [r3, #0]
  }

  /* Disable Schmitt trigger hysteresis on all used TSC IOs */
  htsc->Instance->IOHCR = (~(htsc->Init.ChannelIOs | htsc->Init.ShieldIOs | htsc->Init.SamplingIOs));
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc36:	431a      	orrs	r2, r3
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc3c:	431a      	orrs	r2, r3
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	43d2      	mvns	r2, r2
 800dc44:	611a      	str	r2, [r3, #16]

  /* Set channel and shield IOs */
  htsc->Instance->IOCCR = (htsc->Init.ChannelIOs | htsc->Init.ShieldIOs);
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	430a      	orrs	r2, r1
 800dc54:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set sampling IOs */
  htsc->Instance->IOSCR = htsc->Init.SamplingIOs;
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	687a      	ldr	r2, [r7, #4]
 800dc5c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800dc5e:	621a      	str	r2, [r3, #32]

  /* Set the groups to be acquired */
  htsc->Instance->IOGCSR = TSC_extract_groups(htsc->Init.ChannelIOs);
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	681c      	ldr	r4, [r3, #0]
 800dc68:	4610      	mov	r0, r2
 800dc6a:	f000 f952 	bl	800df12 <TSC_extract_groups>
 800dc6e:	4603      	mov	r3, r0
 800dc70:	6323      	str	r3, [r4, #48]	; 0x30

  /* Disable interrupts */
  htsc->Instance->IER &= (~(TSC_IT_EOA | TSC_IT_MCE));
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	685a      	ldr	r2, [r3, #4]
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	f022 0203 	bic.w	r2, r2, #3
 800dc80:	605a      	str	r2, [r3, #4]

  /* Clear flags */
  htsc->Instance->ICR = (TSC_FLAG_EOA | TSC_FLAG_MCE);
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	2203      	movs	r2, #3
 800dc88:	609a      	str	r2, [r3, #8]

  /*--------------------------------------------------------------------------*/

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_READY;
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	2201      	movs	r2, #1
 800dc8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800dc92:	2300      	movs	r3, #0
}
 800dc94:	4618      	mov	r0, r3
 800dc96:	370c      	adds	r7, #12
 800dc98:	46bd      	mov	sp, r7
 800dc9a:	bd90      	pop	{r4, r7, pc}

0800dc9c <HAL_TSC_Start_IT>:
  * @param  htsc Pointer to a TSC_HandleTypeDef structure that contains
  *         the configuration information for the specified TSC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_TSC_Start_IT(TSC_HandleTypeDef *htsc)
{
 800dc9c:	b480      	push	{r7}
 800dc9e:	b083      	sub	sp, #12
 800dca0:	af00      	add	r7, sp, #0
 800dca2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));

  /* Process locked */
  __HAL_LOCK(htsc);
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dcaa:	2b01      	cmp	r3, #1
 800dcac:	d101      	bne.n	800dcb2 <HAL_TSC_Start_IT+0x16>
 800dcae:	2302      	movs	r3, #2
 800dcb0:	e04b      	b.n	800dd4a <HAL_TSC_Start_IT+0xae>
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	2201      	movs	r2, #1
 800dcb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Change TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	2202      	movs	r2, #2
 800dcbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable end of acquisition interrupt */
  __HAL_TSC_ENABLE_IT(htsc, TSC_IT_EOA);
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	685a      	ldr	r2, [r3, #4]
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	f042 0201 	orr.w	r2, r2, #1
 800dcd0:	605a      	str	r2, [r3, #4]

  /* Enable max count error interrupt (optional) */
  if (htsc->Init.MaxCountInterrupt == ENABLE)
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800dcd8:	2b01      	cmp	r3, #1
 800dcda:	d108      	bne.n	800dcee <HAL_TSC_Start_IT+0x52>
  {
    __HAL_TSC_ENABLE_IT(htsc, TSC_IT_MCE);
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	685a      	ldr	r2, [r3, #4]
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	f042 0202 	orr.w	r2, r2, #2
 800dcea:	605a      	str	r2, [r3, #4]
 800dcec:	e007      	b.n	800dcfe <HAL_TSC_Start_IT+0x62>
  }
  else
  {
    __HAL_TSC_DISABLE_IT(htsc, TSC_IT_MCE);
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	685a      	ldr	r2, [r3, #4]
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	f022 0202 	bic.w	r2, r2, #2
 800dcfc:	605a      	str	r2, [r3, #4]
  }

  /* Clear flags */
  __HAL_TSC_CLEAR_FLAG(htsc, (TSC_FLAG_EOA | TSC_FLAG_MCE));
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	2203      	movs	r2, #3
 800dd04:	609a      	str	r2, [r3, #8]

  /* Set touch sensing IOs not acquired to the specified IODefaultMode */
  if (htsc->Init.IODefaultMode == TSC_IODEF_OUT_PP_LOW)
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	6a1b      	ldr	r3, [r3, #32]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d108      	bne.n	800dd20 <HAL_TSC_Start_IT+0x84>
  {
    __HAL_TSC_SET_IODEF_OUTPPLOW(htsc);
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	681a      	ldr	r2, [r3, #0]
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	f022 0210 	bic.w	r2, r2, #16
 800dd1c:	601a      	str	r2, [r3, #0]
 800dd1e:	e007      	b.n	800dd30 <HAL_TSC_Start_IT+0x94>
  }
  else
  {
    __HAL_TSC_SET_IODEF_INFLOAT(htsc);
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	681a      	ldr	r2, [r3, #0]
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	f042 0210 	orr.w	r2, r2, #16
 800dd2e:	601a      	str	r2, [r3, #0]
  }

  /* Launch the acquisition */
  __HAL_TSC_START_ACQ(htsc);
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	681a      	ldr	r2, [r3, #0]
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	f042 0202 	orr.w	r2, r2, #2
 800dd3e:	601a      	str	r2, [r3, #0]

  /* Process unlocked */
  __HAL_UNLOCK(htsc);
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	2200      	movs	r2, #0
 800dd44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800dd48:	2300      	movs	r3, #0
}
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	370c      	adds	r7, #12
 800dd4e:	46bd      	mov	sp, r7
 800dd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd54:	4770      	bx	lr

0800dd56 <HAL_TSC_GroupGetStatus>:
  *         the configuration information for the specified TSC.
  * @param  gx_index Index of the group
  * @retval Group status
  */
TSC_GroupStatusTypeDef HAL_TSC_GroupGetStatus(TSC_HandleTypeDef *htsc, uint32_t gx_index)
{
 800dd56:	b480      	push	{r7}
 800dd58:	b083      	sub	sp, #12
 800dd5a:	af00      	add	r7, sp, #0
 800dd5c:	6078      	str	r0, [r7, #4]
 800dd5e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));
  assert_param(IS_TSC_GROUP_INDEX(gx_index));

  /* Return the group status */
  return (__HAL_TSC_GET_GROUP_STATUS(htsc, gx_index));
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dd66:	683b      	ldr	r3, [r7, #0]
 800dd68:	f003 030f 	and.w	r3, r3, #15
 800dd6c:	3310      	adds	r3, #16
 800dd6e:	2101      	movs	r1, #1
 800dd70:	fa01 f303 	lsl.w	r3, r1, r3
 800dd74:	401a      	ands	r2, r3
 800dd76:	683b      	ldr	r3, [r7, #0]
 800dd78:	f003 030f 	and.w	r3, r3, #15
 800dd7c:	3310      	adds	r3, #16
 800dd7e:	2101      	movs	r1, #1
 800dd80:	fa01 f303 	lsl.w	r3, r1, r3
 800dd84:	429a      	cmp	r2, r3
 800dd86:	bf0c      	ite	eq
 800dd88:	2301      	moveq	r3, #1
 800dd8a:	2300      	movne	r3, #0
 800dd8c:	b2db      	uxtb	r3, r3
}
 800dd8e:	4618      	mov	r0, r3
 800dd90:	370c      	adds	r7, #12
 800dd92:	46bd      	mov	sp, r7
 800dd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd98:	4770      	bx	lr

0800dd9a <HAL_TSC_GroupGetValue>:
  *         the configuration information for the specified TSC.
  * @param  gx_index Index of the group
  * @retval Acquisition measure
  */
uint32_t HAL_TSC_GroupGetValue(TSC_HandleTypeDef *htsc, uint32_t gx_index)
{
 800dd9a:	b480      	push	{r7}
 800dd9c:	b083      	sub	sp, #12
 800dd9e:	af00      	add	r7, sp, #0
 800dda0:	6078      	str	r0, [r7, #4]
 800dda2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));
  assert_param(IS_TSC_GROUP_INDEX(gx_index));

  /* Return the group acquisition counter */
  return htsc->Instance->IOGXCR[gx_index];
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681a      	ldr	r2, [r3, #0]
 800dda8:	683b      	ldr	r3, [r7, #0]
 800ddaa:	330c      	adds	r3, #12
 800ddac:	009b      	lsls	r3, r3, #2
 800ddae:	4413      	add	r3, r2
 800ddb0:	685b      	ldr	r3, [r3, #4]
}
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	370c      	adds	r7, #12
 800ddb6:	46bd      	mov	sp, r7
 800ddb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddbc:	4770      	bx	lr

0800ddbe <HAL_TSC_IOConfig>:
  *         the configuration information for the specified TSC.
  * @param  config Pointer to the configuration structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_IOConfig(TSC_HandleTypeDef *htsc, TSC_IOConfigTypeDef *config)
{
 800ddbe:	b590      	push	{r4, r7, lr}
 800ddc0:	b083      	sub	sp, #12
 800ddc2:	af00      	add	r7, sp, #0
 800ddc4:	6078      	str	r0, [r7, #4]
 800ddc6:	6039      	str	r1, [r7, #0]
  assert_param(IS_TSC_GROUP(config->ChannelIOs));
  assert_param(IS_TSC_GROUP(config->ShieldIOs));
  assert_param(IS_TSC_GROUP(config->SamplingIOs));

  /* Process locked */
  __HAL_LOCK(htsc);
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ddce:	2b01      	cmp	r3, #1
 800ddd0:	d101      	bne.n	800ddd6 <HAL_TSC_IOConfig+0x18>
 800ddd2:	2302      	movs	r3, #2
 800ddd4:	e032      	b.n	800de3c <HAL_TSC_IOConfig+0x7e>
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	2201      	movs	r2, #1
 800ddda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Stop acquisition */
  __HAL_TSC_STOP_ACQ(htsc);
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	681a      	ldr	r2, [r3, #0]
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	f022 0202 	bic.w	r2, r2, #2
 800ddec:	601a      	str	r2, [r3, #0]

  /* Disable Schmitt trigger hysteresis on all used TSC IOs */
  htsc->Instance->IOHCR = (~(config->ChannelIOs | config->ShieldIOs | config->SamplingIOs));
 800ddee:	683b      	ldr	r3, [r7, #0]
 800ddf0:	681a      	ldr	r2, [r3, #0]
 800ddf2:	683b      	ldr	r3, [r7, #0]
 800ddf4:	685b      	ldr	r3, [r3, #4]
 800ddf6:	431a      	orrs	r2, r3
 800ddf8:	683b      	ldr	r3, [r7, #0]
 800ddfa:	689b      	ldr	r3, [r3, #8]
 800ddfc:	431a      	orrs	r2, r3
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	43d2      	mvns	r2, r2
 800de04:	611a      	str	r2, [r3, #16]

  /* Set channel and shield IOs */
  htsc->Instance->IOCCR = (config->ChannelIOs | config->ShieldIOs);
 800de06:	683b      	ldr	r3, [r7, #0]
 800de08:	6819      	ldr	r1, [r3, #0]
 800de0a:	683b      	ldr	r3, [r7, #0]
 800de0c:	685a      	ldr	r2, [r3, #4]
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	430a      	orrs	r2, r1
 800de14:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set sampling IOs */
  htsc->Instance->IOSCR = config->SamplingIOs;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	683a      	ldr	r2, [r7, #0]
 800de1c:	6892      	ldr	r2, [r2, #8]
 800de1e:	621a      	str	r2, [r3, #32]

  /* Set groups to be acquired */
  htsc->Instance->IOGCSR = TSC_extract_groups(config->ChannelIOs);
 800de20:	683b      	ldr	r3, [r7, #0]
 800de22:	681a      	ldr	r2, [r3, #0]
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	681c      	ldr	r4, [r3, #0]
 800de28:	4610      	mov	r0, r2
 800de2a:	f000 f872 	bl	800df12 <TSC_extract_groups>
 800de2e:	4603      	mov	r3, r0
 800de30:	6323      	str	r3, [r4, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(htsc);
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	2200      	movs	r2, #0
 800de36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800de3a:	2300      	movs	r3, #0
}
 800de3c:	4618      	mov	r0, r3
 800de3e:	370c      	adds	r7, #12
 800de40:	46bd      	mov	sp, r7
 800de42:	bd90      	pop	{r4, r7, pc}

0800de44 <HAL_TSC_IODischarge>:
  *         the configuration information for the specified TSC.
  * @param  choice This parameter can be set to ENABLE or DISABLE.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_IODischarge(TSC_HandleTypeDef *htsc, FunctionalState choice)
{
 800de44:	b480      	push	{r7}
 800de46:	b083      	sub	sp, #12
 800de48:	af00      	add	r7, sp, #0
 800de4a:	6078      	str	r0, [r7, #4]
 800de4c:	460b      	mov	r3, r1
 800de4e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));

  /* Process locked */
  __HAL_LOCK(htsc);
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800de56:	2b01      	cmp	r3, #1
 800de58:	d101      	bne.n	800de5e <HAL_TSC_IODischarge+0x1a>
 800de5a:	2302      	movs	r3, #2
 800de5c:	e01c      	b.n	800de98 <HAL_TSC_IODischarge+0x54>
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	2201      	movs	r2, #1
 800de62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (choice == ENABLE)
 800de66:	78fb      	ldrb	r3, [r7, #3]
 800de68:	2b01      	cmp	r3, #1
 800de6a:	d108      	bne.n	800de7e <HAL_TSC_IODischarge+0x3a>
  {
    __HAL_TSC_SET_IODEF_OUTPPLOW(htsc);
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	681a      	ldr	r2, [r3, #0]
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	f022 0210 	bic.w	r2, r2, #16
 800de7a:	601a      	str	r2, [r3, #0]
 800de7c:	e007      	b.n	800de8e <HAL_TSC_IODischarge+0x4a>
  }
  else
  {
    __HAL_TSC_SET_IODEF_INFLOAT(htsc);
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	681a      	ldr	r2, [r3, #0]
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	f042 0210 	orr.w	r2, r2, #16
 800de8c:	601a      	str	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(htsc);
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	2200      	movs	r2, #0
 800de92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return the group acquisition counter */
  return HAL_OK;
 800de96:	2300      	movs	r3, #0
}
 800de98:	4618      	mov	r0, r3
 800de9a:	370c      	adds	r7, #12
 800de9c:	46bd      	mov	sp, r7
 800de9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea2:	4770      	bx	lr

0800dea4 <HAL_TSC_IRQHandler>:
  * @param  htsc Pointer to a TSC_HandleTypeDef structure that contains
  *         the configuration information for the specified TSC.
  * @retval None
  */
void HAL_TSC_IRQHandler(TSC_HandleTypeDef *htsc)
{
 800dea4:	b580      	push	{r7, lr}
 800dea6:	b082      	sub	sp, #8
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));

  /* Check if the end of acquisition occurred */
  if (__HAL_TSC_GET_FLAG(htsc, TSC_FLAG_EOA) != RESET)
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	68db      	ldr	r3, [r3, #12]
 800deb2:	f003 0301 	and.w	r3, r3, #1
 800deb6:	2b01      	cmp	r3, #1
 800deb8:	d103      	bne.n	800dec2 <HAL_TSC_IRQHandler+0x1e>
  {
    /* Clear EOA flag */
    __HAL_TSC_CLEAR_FLAG(htsc, TSC_FLAG_EOA);
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	2201      	movs	r2, #1
 800dec0:	609a      	str	r2, [r3, #8]
  }

  /* Check if max count error occurred */
  if (__HAL_TSC_GET_FLAG(htsc, TSC_FLAG_MCE) != RESET)
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	68db      	ldr	r3, [r3, #12]
 800dec8:	f003 0302 	and.w	r3, r3, #2
 800decc:	2b02      	cmp	r3, #2
 800dece:	d10b      	bne.n	800dee8 <HAL_TSC_IRQHandler+0x44>
  {
    /* Clear MCE flag */
    __HAL_TSC_CLEAR_FLAG(htsc, TSC_FLAG_MCE);
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	2202      	movs	r2, #2
 800ded6:	609a      	str	r2, [r3, #8]
    /* Change TSC state */
    htsc->State = HAL_TSC_STATE_ERROR;
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	2203      	movs	r2, #3
 800dedc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
#if (USE_HAL_TSC_REGISTER_CALLBACKS == 1)
    htsc->ErrorCallback(htsc);
#else
    /* Conversion completed callback */
    HAL_TSC_ErrorCallback(htsc);
 800dee0:	6878      	ldr	r0, [r7, #4]
 800dee2:	f000 f80c 	bl	800defe <HAL_TSC_ErrorCallback>
#else
    /* Conversion completed callback */
    HAL_TSC_ConvCpltCallback(htsc);
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }
}
 800dee6:	e006      	b.n	800def6 <HAL_TSC_IRQHandler+0x52>
    htsc->State = HAL_TSC_STATE_READY;
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	2201      	movs	r2, #1
 800deec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    HAL_TSC_ConvCpltCallback(htsc);
 800def0:	6878      	ldr	r0, [r7, #4]
 800def2:	f7f7 fd59 	bl	80059a8 <HAL_TSC_ConvCpltCallback>
}
 800def6:	bf00      	nop
 800def8:	3708      	adds	r7, #8
 800defa:	46bd      	mov	sp, r7
 800defc:	bd80      	pop	{r7, pc}

0800defe <HAL_TSC_ErrorCallback>:
  * @param  htsc Pointer to a TSC_HandleTypeDef structure that contains
  *         the configuration information for the specified TSC.
  * @retval None
  */
__weak void HAL_TSC_ErrorCallback(TSC_HandleTypeDef *htsc)
{
 800defe:	b480      	push	{r7}
 800df00:	b083      	sub	sp, #12
 800df02:	af00      	add	r7, sp, #0
 800df04:	6078      	str	r0, [r7, #4]
  UNUSED(htsc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TSC_ErrorCallback could be implemented in the user file.
   */
}
 800df06:	bf00      	nop
 800df08:	370c      	adds	r7, #12
 800df0a:	46bd      	mov	sp, r7
 800df0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df10:	4770      	bx	lr

0800df12 <TSC_extract_groups>:
  * @brief  Utility function used to set the acquired groups mask.
  * @param  iomask Channels IOs mask
  * @retval Acquired groups mask
  */
static uint32_t TSC_extract_groups(uint32_t iomask)
{
 800df12:	b480      	push	{r7}
 800df14:	b085      	sub	sp, #20
 800df16:	af00      	add	r7, sp, #0
 800df18:	6078      	str	r0, [r7, #4]
  uint32_t groups = 0UL;
 800df1a:	2300      	movs	r3, #0
 800df1c:	60fb      	str	r3, [r7, #12]
  uint32_t idx;

  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 800df1e:	2300      	movs	r3, #0
 800df20:	60bb      	str	r3, [r7, #8]
 800df22:	e011      	b.n	800df48 <TSC_extract_groups+0x36>
  {
    if ((iomask & (0x0FUL << (idx * 4UL))) != 0UL )
 800df24:	68bb      	ldr	r3, [r7, #8]
 800df26:	009b      	lsls	r3, r3, #2
 800df28:	220f      	movs	r2, #15
 800df2a:	409a      	lsls	r2, r3
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	4013      	ands	r3, r2
 800df30:	2b00      	cmp	r3, #0
 800df32:	d006      	beq.n	800df42 <TSC_extract_groups+0x30>
    {
      groups |= (1UL << idx);
 800df34:	2201      	movs	r2, #1
 800df36:	68bb      	ldr	r3, [r7, #8]
 800df38:	fa02 f303 	lsl.w	r3, r2, r3
 800df3c:	68fa      	ldr	r2, [r7, #12]
 800df3e:	4313      	orrs	r3, r2
 800df40:	60fb      	str	r3, [r7, #12]
  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 800df42:	68bb      	ldr	r3, [r7, #8]
 800df44:	3301      	adds	r3, #1
 800df46:	60bb      	str	r3, [r7, #8]
 800df48:	68bb      	ldr	r3, [r7, #8]
 800df4a:	2b06      	cmp	r3, #6
 800df4c:	d9ea      	bls.n	800df24 <TSC_extract_groups+0x12>
    }
  }

  return groups;
 800df4e:	68fb      	ldr	r3, [r7, #12]
}
 800df50:	4618      	mov	r0, r3
 800df52:	3714      	adds	r7, #20
 800df54:	46bd      	mov	sp, r7
 800df56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df5a:	4770      	bx	lr

0800df5c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800df5c:	b480      	push	{r7}
 800df5e:	b085      	sub	sp, #20
 800df60:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800df62:	f3ef 8305 	mrs	r3, IPSR
 800df66:	60bb      	str	r3, [r7, #8]
  return(result);
 800df68:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d10f      	bne.n	800df8e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800df6e:	f3ef 8310 	mrs	r3, PRIMASK
 800df72:	607b      	str	r3, [r7, #4]
  return(result);
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d109      	bne.n	800df8e <osKernelInitialize+0x32>
 800df7a:	4b11      	ldr	r3, [pc, #68]	; (800dfc0 <osKernelInitialize+0x64>)
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	2b02      	cmp	r3, #2
 800df80:	d109      	bne.n	800df96 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800df82:	f3ef 8311 	mrs	r3, BASEPRI
 800df86:	603b      	str	r3, [r7, #0]
  return(result);
 800df88:	683b      	ldr	r3, [r7, #0]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d003      	beq.n	800df96 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800df8e:	f06f 0305 	mvn.w	r3, #5
 800df92:	60fb      	str	r3, [r7, #12]
 800df94:	e00c      	b.n	800dfb0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800df96:	4b0a      	ldr	r3, [pc, #40]	; (800dfc0 <osKernelInitialize+0x64>)
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d105      	bne.n	800dfaa <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800df9e:	4b08      	ldr	r3, [pc, #32]	; (800dfc0 <osKernelInitialize+0x64>)
 800dfa0:	2201      	movs	r2, #1
 800dfa2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	60fb      	str	r3, [r7, #12]
 800dfa8:	e002      	b.n	800dfb0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800dfaa:	f04f 33ff 	mov.w	r3, #4294967295
 800dfae:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800dfb0:	68fb      	ldr	r3, [r7, #12]
}
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	3714      	adds	r7, #20
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfbc:	4770      	bx	lr
 800dfbe:	bf00      	nop
 800dfc0:	20000b18 	.word	0x20000b18

0800dfc4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b084      	sub	sp, #16
 800dfc8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dfca:	f3ef 8305 	mrs	r3, IPSR
 800dfce:	60bb      	str	r3, [r7, #8]
  return(result);
 800dfd0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d10f      	bne.n	800dff6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dfd6:	f3ef 8310 	mrs	r3, PRIMASK
 800dfda:	607b      	str	r3, [r7, #4]
  return(result);
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d109      	bne.n	800dff6 <osKernelStart+0x32>
 800dfe2:	4b11      	ldr	r3, [pc, #68]	; (800e028 <osKernelStart+0x64>)
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	2b02      	cmp	r3, #2
 800dfe8:	d109      	bne.n	800dffe <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dfea:	f3ef 8311 	mrs	r3, BASEPRI
 800dfee:	603b      	str	r3, [r7, #0]
  return(result);
 800dff0:	683b      	ldr	r3, [r7, #0]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d003      	beq.n	800dffe <osKernelStart+0x3a>
    stat = osErrorISR;
 800dff6:	f06f 0305 	mvn.w	r3, #5
 800dffa:	60fb      	str	r3, [r7, #12]
 800dffc:	e00e      	b.n	800e01c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800dffe:	4b0a      	ldr	r3, [pc, #40]	; (800e028 <osKernelStart+0x64>)
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	2b01      	cmp	r3, #1
 800e004:	d107      	bne.n	800e016 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800e006:	4b08      	ldr	r3, [pc, #32]	; (800e028 <osKernelStart+0x64>)
 800e008:	2202      	movs	r2, #2
 800e00a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800e00c:	f002 fee2 	bl	8010dd4 <vTaskStartScheduler>
      stat = osOK;
 800e010:	2300      	movs	r3, #0
 800e012:	60fb      	str	r3, [r7, #12]
 800e014:	e002      	b.n	800e01c <osKernelStart+0x58>
    } else {
      stat = osError;
 800e016:	f04f 33ff 	mov.w	r3, #4294967295
 800e01a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800e01c:	68fb      	ldr	r3, [r7, #12]
}
 800e01e:	4618      	mov	r0, r3
 800e020:	3710      	adds	r7, #16
 800e022:	46bd      	mov	sp, r7
 800e024:	bd80      	pop	{r7, pc}
 800e026:	bf00      	nop
 800e028:	20000b18 	.word	0x20000b18

0800e02c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e02c:	b580      	push	{r7, lr}
 800e02e:	b092      	sub	sp, #72	; 0x48
 800e030:	af04      	add	r7, sp, #16
 800e032:	60f8      	str	r0, [r7, #12]
 800e034:	60b9      	str	r1, [r7, #8]
 800e036:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e038:	2300      	movs	r3, #0
 800e03a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e03c:	f3ef 8305 	mrs	r3, IPSR
 800e040:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800e042:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800e044:	2b00      	cmp	r3, #0
 800e046:	f040 8095 	bne.w	800e174 <osThreadNew+0x148>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e04a:	f3ef 8310 	mrs	r3, PRIMASK
 800e04e:	623b      	str	r3, [r7, #32]
  return(result);
 800e050:	6a3b      	ldr	r3, [r7, #32]
 800e052:	2b00      	cmp	r3, #0
 800e054:	f040 808e 	bne.w	800e174 <osThreadNew+0x148>
 800e058:	4b49      	ldr	r3, [pc, #292]	; (800e180 <osThreadNew+0x154>)
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	2b02      	cmp	r3, #2
 800e05e:	d106      	bne.n	800e06e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e060:	f3ef 8311 	mrs	r3, BASEPRI
 800e064:	61fb      	str	r3, [r7, #28]
  return(result);
 800e066:	69fb      	ldr	r3, [r7, #28]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	f040 8083 	bne.w	800e174 <osThreadNew+0x148>
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	2b00      	cmp	r3, #0
 800e072:	d07f      	beq.n	800e174 <osThreadNew+0x148>
    stack = configMINIMAL_STACK_SIZE;
 800e074:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e078:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800e07a:	2318      	movs	r3, #24
 800e07c:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800e07e:	2300      	movs	r3, #0
 800e080:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800e082:	f107 031b 	add.w	r3, r7, #27
 800e086:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800e088:	f04f 33ff 	mov.w	r3, #4294967295
 800e08c:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d045      	beq.n	800e120 <osThreadNew+0xf4>
      if (attr->name != NULL) {
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d002      	beq.n	800e0a2 <osThreadNew+0x76>
        name = attr->name;
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	699b      	ldr	r3, [r3, #24]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d002      	beq.n	800e0b0 <osThreadNew+0x84>
        prio = (UBaseType_t)attr->priority;
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	699b      	ldr	r3, [r3, #24]
 800e0ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e0b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d008      	beq.n	800e0c8 <osThreadNew+0x9c>
 800e0b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0b8:	2b38      	cmp	r3, #56	; 0x38
 800e0ba:	d805      	bhi.n	800e0c8 <osThreadNew+0x9c>
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	685b      	ldr	r3, [r3, #4]
 800e0c0:	f003 0301 	and.w	r3, r3, #1
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d001      	beq.n	800e0cc <osThreadNew+0xa0>
        return (NULL);
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	e054      	b.n	800e176 <osThreadNew+0x14a>
      }

      if (attr->stack_size > 0U) {
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	695b      	ldr	r3, [r3, #20]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d003      	beq.n	800e0dc <osThreadNew+0xb0>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	695b      	ldr	r3, [r3, #20]
 800e0d8:	089b      	lsrs	r3, r3, #2
 800e0da:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	689b      	ldr	r3, [r3, #8]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d00e      	beq.n	800e102 <osThreadNew+0xd6>
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	68db      	ldr	r3, [r3, #12]
 800e0e8:	2b63      	cmp	r3, #99	; 0x63
 800e0ea:	d90a      	bls.n	800e102 <osThreadNew+0xd6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d006      	beq.n	800e102 <osThreadNew+0xd6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	695b      	ldr	r3, [r3, #20]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d002      	beq.n	800e102 <osThreadNew+0xd6>
        mem = 1;
 800e0fc:	2301      	movs	r3, #1
 800e0fe:	62bb      	str	r3, [r7, #40]	; 0x28
 800e100:	e010      	b.n	800e124 <osThreadNew+0xf8>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	689b      	ldr	r3, [r3, #8]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d10c      	bne.n	800e124 <osThreadNew+0xf8>
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	68db      	ldr	r3, [r3, #12]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d108      	bne.n	800e124 <osThreadNew+0xf8>
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	691b      	ldr	r3, [r3, #16]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d104      	bne.n	800e124 <osThreadNew+0xf8>
          mem = 0;
 800e11a:	2300      	movs	r3, #0
 800e11c:	62bb      	str	r3, [r7, #40]	; 0x28
 800e11e:	e001      	b.n	800e124 <osThreadNew+0xf8>
        }
      }
    }
    else {
      mem = 0;
 800e120:	2300      	movs	r3, #0
 800e122:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800e124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e126:	2b01      	cmp	r3, #1
 800e128:	d110      	bne.n	800e14c <osThreadNew+0x120>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800e12e:	687a      	ldr	r2, [r7, #4]
 800e130:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e132:	9202      	str	r2, [sp, #8]
 800e134:	9301      	str	r3, [sp, #4]
 800e136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e138:	9300      	str	r3, [sp, #0]
 800e13a:	68bb      	ldr	r3, [r7, #8]
 800e13c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e13e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e140:	68f8      	ldr	r0, [r7, #12]
 800e142:	f002 fc79 	bl	8010a38 <xTaskCreateStatic>
 800e146:	4603      	mov	r3, r0
 800e148:	617b      	str	r3, [r7, #20]
 800e14a:	e013      	b.n	800e174 <osThreadNew+0x148>
    }
    else {
      if (mem == 0) {
 800e14c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d110      	bne.n	800e174 <osThreadNew+0x148>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800e152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e154:	b29a      	uxth	r2, r3
 800e156:	f107 0314 	add.w	r3, r7, #20
 800e15a:	9301      	str	r3, [sp, #4]
 800e15c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e15e:	9300      	str	r3, [sp, #0]
 800e160:	68bb      	ldr	r3, [r7, #8]
 800e162:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e164:	68f8      	ldr	r0, [r7, #12]
 800e166:	f002 fcc0 	bl	8010aea <xTaskCreate>
 800e16a:	4603      	mov	r3, r0
 800e16c:	2b01      	cmp	r3, #1
 800e16e:	d001      	beq.n	800e174 <osThreadNew+0x148>
          hTask = NULL;
 800e170:	2300      	movs	r3, #0
 800e172:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800e174:	697b      	ldr	r3, [r7, #20]
}
 800e176:	4618      	mov	r0, r3
 800e178:	3738      	adds	r7, #56	; 0x38
 800e17a:	46bd      	mov	sp, r7
 800e17c:	bd80      	pop	{r7, pc}
 800e17e:	bf00      	nop
 800e180:	20000b18 	.word	0x20000b18

0800e184 <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800e184:	b580      	push	{r7, lr}
 800e186:	b08a      	sub	sp, #40	; 0x28
 800e188:	af02      	add	r7, sp, #8
 800e18a:	6078      	str	r0, [r7, #4]
 800e18c:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800e192:	69fb      	ldr	r3, [r7, #28]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d002      	beq.n	800e19e <osThreadFlagsSet+0x1a>
 800e198:	683b      	ldr	r3, [r7, #0]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	da03      	bge.n	800e1a6 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800e19e:	f06f 0303 	mvn.w	r3, #3
 800e1a2:	60fb      	str	r3, [r7, #12]
 800e1a4:	e046      	b.n	800e234 <osThreadFlagsSet+0xb0>
  }
  else {
    rflags = (uint32_t)osError;
 800e1a6:	f04f 33ff 	mov.w	r3, #4294967295
 800e1aa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e1ac:	f3ef 8305 	mrs	r3, IPSR
 800e1b0:	61bb      	str	r3, [r7, #24]
  return(result);
 800e1b2:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d10f      	bne.n	800e1d8 <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e1b8:	f3ef 8310 	mrs	r3, PRIMASK
 800e1bc:	617b      	str	r3, [r7, #20]
  return(result);
 800e1be:	697b      	ldr	r3, [r7, #20]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d109      	bne.n	800e1d8 <osThreadFlagsSet+0x54>
 800e1c4:	4b1e      	ldr	r3, [pc, #120]	; (800e240 <osThreadFlagsSet+0xbc>)
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	2b02      	cmp	r3, #2
 800e1ca:	d126      	bne.n	800e21a <osThreadFlagsSet+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e1cc:	f3ef 8311 	mrs	r3, BASEPRI
 800e1d0:	613b      	str	r3, [r7, #16]
  return(result);
 800e1d2:	693b      	ldr	r3, [r7, #16]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d020      	beq.n	800e21a <osThreadFlagsSet+0x96>
      yield = pdFALSE;
 800e1d8:	2300      	movs	r3, #0
 800e1da:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800e1dc:	f107 0308 	add.w	r3, r7, #8
 800e1e0:	9300      	str	r3, [sp, #0]
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	2201      	movs	r2, #1
 800e1e6:	6839      	ldr	r1, [r7, #0]
 800e1e8:	69f8      	ldr	r0, [r7, #28]
 800e1ea:	f003 fdbd 	bl	8011d68 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800e1ee:	f107 020c 	add.w	r2, r7, #12
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	9300      	str	r3, [sp, #0]
 800e1f6:	4613      	mov	r3, r2
 800e1f8:	2200      	movs	r2, #0
 800e1fa:	2100      	movs	r1, #0
 800e1fc:	69f8      	ldr	r0, [r7, #28]
 800e1fe:	f003 fdb3 	bl	8011d68 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800e202:	68bb      	ldr	r3, [r7, #8]
 800e204:	2b00      	cmp	r3, #0
 800e206:	d015      	beq.n	800e234 <osThreadFlagsSet+0xb0>
 800e208:	4b0e      	ldr	r3, [pc, #56]	; (800e244 <osThreadFlagsSet+0xc0>)
 800e20a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e20e:	601a      	str	r2, [r3, #0]
 800e210:	f3bf 8f4f 	dsb	sy
 800e214:	f3bf 8f6f 	isb	sy
 800e218:	e00c      	b.n	800e234 <osThreadFlagsSet+0xb0>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800e21a:	2300      	movs	r3, #0
 800e21c:	2201      	movs	r2, #1
 800e21e:	6839      	ldr	r1, [r7, #0]
 800e220:	69f8      	ldr	r0, [r7, #28]
 800e222:	f003 fcfd 	bl	8011c20 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800e226:	f107 030c 	add.w	r3, r7, #12
 800e22a:	2200      	movs	r2, #0
 800e22c:	2100      	movs	r1, #0
 800e22e:	69f8      	ldr	r0, [r7, #28]
 800e230:	f003 fcf6 	bl	8011c20 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800e234:	68fb      	ldr	r3, [r7, #12]
}
 800e236:	4618      	mov	r0, r3
 800e238:	3720      	adds	r7, #32
 800e23a:	46bd      	mov	sp, r7
 800e23c:	bd80      	pop	{r7, pc}
 800e23e:	bf00      	nop
 800e240:	20000b18 	.word	0x20000b18
 800e244:	e000ed04 	.word	0xe000ed04

0800e248 <osThreadFlagsClear>:

uint32_t osThreadFlagsClear (uint32_t flags) {
 800e248:	b580      	push	{r7, lr}
 800e24a:	b088      	sub	sp, #32
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e250:	f3ef 8305 	mrs	r3, IPSR
 800e254:	617b      	str	r3, [r7, #20]
  return(result);
 800e256:	697b      	ldr	r3, [r7, #20]
  TaskHandle_t hTask;
  uint32_t rflags, cflags;

  if (IS_IRQ()) {
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d10f      	bne.n	800e27c <osThreadFlagsClear+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e25c:	f3ef 8310 	mrs	r3, PRIMASK
 800e260:	613b      	str	r3, [r7, #16]
  return(result);
 800e262:	693b      	ldr	r3, [r7, #16]
 800e264:	2b00      	cmp	r3, #0
 800e266:	d109      	bne.n	800e27c <osThreadFlagsClear+0x34>
 800e268:	4b1e      	ldr	r3, [pc, #120]	; (800e2e4 <osThreadFlagsClear+0x9c>)
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	2b02      	cmp	r3, #2
 800e26e:	d109      	bne.n	800e284 <osThreadFlagsClear+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e270:	f3ef 8311 	mrs	r3, BASEPRI
 800e274:	60fb      	str	r3, [r7, #12]
  return(result);
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d003      	beq.n	800e284 <osThreadFlagsClear+0x3c>
    rflags = (uint32_t)osErrorISR;
 800e27c:	f06f 0305 	mvn.w	r3, #5
 800e280:	61fb      	str	r3, [r7, #28]
 800e282:	e02a      	b.n	800e2da <osThreadFlagsClear+0x92>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	2b00      	cmp	r3, #0
 800e288:	da03      	bge.n	800e292 <osThreadFlagsClear+0x4a>
    rflags = (uint32_t)osErrorParameter;
 800e28a:	f06f 0303 	mvn.w	r3, #3
 800e28e:	61fb      	str	r3, [r7, #28]
 800e290:	e023      	b.n	800e2da <osThreadFlagsClear+0x92>
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 800e292:	f003 facb 	bl	801182c <xTaskGetCurrentTaskHandle>
 800e296:	61b8      	str	r0, [r7, #24]

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &cflags) == pdPASS) {
 800e298:	f107 0308 	add.w	r3, r7, #8
 800e29c:	2200      	movs	r2, #0
 800e29e:	2100      	movs	r1, #0
 800e2a0:	69b8      	ldr	r0, [r7, #24]
 800e2a2:	f003 fcbd 	bl	8011c20 <xTaskGenericNotify>
 800e2a6:	4603      	mov	r3, r0
 800e2a8:	2b01      	cmp	r3, #1
 800e2aa:	d113      	bne.n	800e2d4 <osThreadFlagsClear+0x8c>
      rflags = cflags;
 800e2ac:	68bb      	ldr	r3, [r7, #8]
 800e2ae:	61fb      	str	r3, [r7, #28]
      cflags &= ~flags;
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	43da      	mvns	r2, r3
 800e2b4:	68bb      	ldr	r3, [r7, #8]
 800e2b6:	4013      	ands	r3, r2
 800e2b8:	60bb      	str	r3, [r7, #8]

      if (xTaskNotify (hTask, cflags, eSetValueWithOverwrite) != pdPASS) {
 800e2ba:	68b9      	ldr	r1, [r7, #8]
 800e2bc:	2300      	movs	r3, #0
 800e2be:	2203      	movs	r2, #3
 800e2c0:	69b8      	ldr	r0, [r7, #24]
 800e2c2:	f003 fcad 	bl	8011c20 <xTaskGenericNotify>
 800e2c6:	4603      	mov	r3, r0
 800e2c8:	2b01      	cmp	r3, #1
 800e2ca:	d006      	beq.n	800e2da <osThreadFlagsClear+0x92>
        rflags = (uint32_t)osError;
 800e2cc:	f04f 33ff 	mov.w	r3, #4294967295
 800e2d0:	61fb      	str	r3, [r7, #28]
 800e2d2:	e002      	b.n	800e2da <osThreadFlagsClear+0x92>
      }
    }
    else {
      rflags = (uint32_t)osError;
 800e2d4:	f04f 33ff 	mov.w	r3, #4294967295
 800e2d8:	61fb      	str	r3, [r7, #28]
    }
  }

  /* Return flags before clearing */
  return (rflags);
 800e2da:	69fb      	ldr	r3, [r7, #28]
}
 800e2dc:	4618      	mov	r0, r3
 800e2de:	3720      	adds	r7, #32
 800e2e0:	46bd      	mov	sp, r7
 800e2e2:	bd80      	pop	{r7, pc}
 800e2e4:	20000b18 	.word	0x20000b18

0800e2e8 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800e2e8:	b580      	push	{r7, lr}
 800e2ea:	b08e      	sub	sp, #56	; 0x38
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	60f8      	str	r0, [r7, #12]
 800e2f0:	60b9      	str	r1, [r7, #8]
 800e2f2:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e2f4:	f3ef 8305 	mrs	r3, IPSR
 800e2f8:	61fb      	str	r3, [r7, #28]
  return(result);
 800e2fa:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d10f      	bne.n	800e320 <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e300:	f3ef 8310 	mrs	r3, PRIMASK
 800e304:	61bb      	str	r3, [r7, #24]
  return(result);
 800e306:	69bb      	ldr	r3, [r7, #24]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d109      	bne.n	800e320 <osThreadFlagsWait+0x38>
 800e30c:	4b3f      	ldr	r3, [pc, #252]	; (800e40c <osThreadFlagsWait+0x124>)
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	2b02      	cmp	r3, #2
 800e312:	d109      	bne.n	800e328 <osThreadFlagsWait+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e314:	f3ef 8311 	mrs	r3, BASEPRI
 800e318:	617b      	str	r3, [r7, #20]
  return(result);
 800e31a:	697b      	ldr	r3, [r7, #20]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d003      	beq.n	800e328 <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 800e320:	f06f 0305 	mvn.w	r3, #5
 800e324:	637b      	str	r3, [r7, #52]	; 0x34
 800e326:	e06b      	b.n	800e400 <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	da03      	bge.n	800e336 <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 800e32e:	f06f 0303 	mvn.w	r3, #3
 800e332:	637b      	str	r3, [r7, #52]	; 0x34
 800e334:	e064      	b.n	800e400 <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800e336:	68bb      	ldr	r3, [r7, #8]
 800e338:	f003 0302 	and.w	r3, r3, #2
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d002      	beq.n	800e346 <osThreadFlagsWait+0x5e>
      clear = 0U;
 800e340:	2300      	movs	r3, #0
 800e342:	633b      	str	r3, [r7, #48]	; 0x30
 800e344:	e001      	b.n	800e34a <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 800e34a:	2300      	movs	r3, #0
 800e34c:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 800e352:	f002 fe87 	bl	8011064 <xTaskGetTickCount>
 800e356:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800e358:	f107 0210 	add.w	r2, r7, #16
 800e35c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e35e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e360:	2000      	movs	r0, #0
 800e362:	f003 fc03 	bl	8011b6c <xTaskNotifyWait>
 800e366:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 800e368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e36a:	2b01      	cmp	r3, #1
 800e36c:	d137      	bne.n	800e3de <osThreadFlagsWait+0xf6>
        rflags &= flags;
 800e36e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	4013      	ands	r3, r2
 800e374:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 800e376:	693b      	ldr	r3, [r7, #16]
 800e378:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e37a:	4313      	orrs	r3, r2
 800e37c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800e37e:	68bb      	ldr	r3, [r7, #8]
 800e380:	f003 0301 	and.w	r3, r3, #1
 800e384:	2b00      	cmp	r3, #0
 800e386:	d00c      	beq.n	800e3a2 <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 800e388:	68fa      	ldr	r2, [r7, #12]
 800e38a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e38c:	4013      	ands	r3, r2
 800e38e:	68fa      	ldr	r2, [r7, #12]
 800e390:	429a      	cmp	r2, r3
 800e392:	d032      	beq.n	800e3fa <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d10f      	bne.n	800e3ba <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800e39a:	f06f 0302 	mvn.w	r3, #2
 800e39e:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800e3a0:	e02e      	b.n	800e400 <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800e3a2:	68fa      	ldr	r2, [r7, #12]
 800e3a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3a6:	4013      	ands	r3, r2
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d128      	bne.n	800e3fe <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d103      	bne.n	800e3ba <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800e3b2:	f06f 0302 	mvn.w	r3, #2
 800e3b6:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800e3b8:	e022      	b.n	800e400 <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800e3ba:	f002 fe53 	bl	8011064 <xTaskGetTickCount>
 800e3be:	4602      	mov	r2, r0
 800e3c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3c2:	1ad3      	subs	r3, r2, r3
 800e3c4:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 800e3c6:	6a3a      	ldr	r2, [r7, #32]
 800e3c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3ca:	429a      	cmp	r2, r3
 800e3cc:	d902      	bls.n	800e3d4 <osThreadFlagsWait+0xec>
          tout  = 0;
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e3d2:	e00e      	b.n	800e3f2 <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 800e3d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e3d6:	6a3b      	ldr	r3, [r7, #32]
 800e3d8:	1ad3      	subs	r3, r2, r3
 800e3da:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e3dc:	e009      	b.n	800e3f2 <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d103      	bne.n	800e3ec <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 800e3e4:	f06f 0302 	mvn.w	r3, #2
 800e3e8:	637b      	str	r3, [r7, #52]	; 0x34
 800e3ea:	e002      	b.n	800e3f2 <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800e3ec:	f06f 0301 	mvn.w	r3, #1
 800e3f0:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 800e3f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d1af      	bne.n	800e358 <osThreadFlagsWait+0x70>
 800e3f8:	e002      	b.n	800e400 <osThreadFlagsWait+0x118>
            break;
 800e3fa:	bf00      	nop
 800e3fc:	e000      	b.n	800e400 <osThreadFlagsWait+0x118>
            break;
 800e3fe:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800e400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e402:	4618      	mov	r0, r3
 800e404:	3738      	adds	r7, #56	; 0x38
 800e406:	46bd      	mov	sp, r7
 800e408:	bd80      	pop	{r7, pc}
 800e40a:	bf00      	nop
 800e40c:	20000b18 	.word	0x20000b18

0800e410 <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 800e410:	b580      	push	{r7, lr}
 800e412:	b086      	sub	sp, #24
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e418:	f3ef 8305 	mrs	r3, IPSR
 800e41c:	613b      	str	r3, [r7, #16]
  return(result);
 800e41e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e420:	2b00      	cmp	r3, #0
 800e422:	d10f      	bne.n	800e444 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e424:	f3ef 8310 	mrs	r3, PRIMASK
 800e428:	60fb      	str	r3, [r7, #12]
  return(result);
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d109      	bne.n	800e444 <osDelay+0x34>
 800e430:	4b0d      	ldr	r3, [pc, #52]	; (800e468 <osDelay+0x58>)
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	2b02      	cmp	r3, #2
 800e436:	d109      	bne.n	800e44c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e438:	f3ef 8311 	mrs	r3, BASEPRI
 800e43c:	60bb      	str	r3, [r7, #8]
  return(result);
 800e43e:	68bb      	ldr	r3, [r7, #8]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d003      	beq.n	800e44c <osDelay+0x3c>
    stat = osErrorISR;
 800e444:	f06f 0305 	mvn.w	r3, #5
 800e448:	617b      	str	r3, [r7, #20]
 800e44a:	e007      	b.n	800e45c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800e44c:	2300      	movs	r3, #0
 800e44e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	2b00      	cmp	r3, #0
 800e454:	d002      	beq.n	800e45c <osDelay+0x4c>
      vTaskDelay(ticks);
 800e456:	6878      	ldr	r0, [r7, #4]
 800e458:	f002 fc88 	bl	8010d6c <vTaskDelay>
    }
  }

  return (stat);
 800e45c:	697b      	ldr	r3, [r7, #20]
}
 800e45e:	4618      	mov	r0, r3
 800e460:	3718      	adds	r7, #24
 800e462:	46bd      	mov	sp, r7
 800e464:	bd80      	pop	{r7, pc}
 800e466:	bf00      	nop
 800e468:	20000b18 	.word	0x20000b18

0800e46c <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 800e46c:	b580      	push	{r7, lr}
 800e46e:	b084      	sub	sp, #16
 800e470:	af00      	add	r7, sp, #0
 800e472:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800e474:	6878      	ldr	r0, [r7, #4]
 800e476:	f004 f94f 	bl	8012718 <pvTimerGetTimerID>
 800e47a:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d005      	beq.n	800e48e <TimerCallback+0x22>
    callb->func (callb->arg);
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	68fa      	ldr	r2, [r7, #12]
 800e488:	6852      	ldr	r2, [r2, #4]
 800e48a:	4610      	mov	r0, r2
 800e48c:	4798      	blx	r3
  }
}
 800e48e:	bf00      	nop
 800e490:	3710      	adds	r7, #16
 800e492:	46bd      	mov	sp, r7
 800e494:	bd80      	pop	{r7, pc}
	...

0800e498 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800e498:	b580      	push	{r7, lr}
 800e49a:	b08e      	sub	sp, #56	; 0x38
 800e49c:	af02      	add	r7, sp, #8
 800e49e:	60f8      	str	r0, [r7, #12]
 800e4a0:	607a      	str	r2, [r7, #4]
 800e4a2:	603b      	str	r3, [r7, #0]
 800e4a4:	460b      	mov	r3, r1
 800e4a6:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e4ac:	f3ef 8305 	mrs	r3, IPSR
 800e4b0:	61bb      	str	r3, [r7, #24]
  return(result);
 800e4b2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d16a      	bne.n	800e58e <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e4b8:	f3ef 8310 	mrs	r3, PRIMASK
 800e4bc:	617b      	str	r3, [r7, #20]
  return(result);
 800e4be:	697b      	ldr	r3, [r7, #20]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d164      	bne.n	800e58e <osTimerNew+0xf6>
 800e4c4:	4b34      	ldr	r3, [pc, #208]	; (800e598 <osTimerNew+0x100>)
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	2b02      	cmp	r3, #2
 800e4ca:	d105      	bne.n	800e4d8 <osTimerNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e4cc:	f3ef 8311 	mrs	r3, BASEPRI
 800e4d0:	613b      	str	r3, [r7, #16]
  return(result);
 800e4d2:	693b      	ldr	r3, [r7, #16]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d15a      	bne.n	800e58e <osTimerNew+0xf6>
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d057      	beq.n	800e58e <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800e4de:	2008      	movs	r0, #8
 800e4e0:	f000 fd60 	bl	800efa4 <pvPortMalloc>
 800e4e4:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 800e4e6:	69fb      	ldr	r3, [r7, #28]
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d050      	beq.n	800e58e <osTimerNew+0xf6>
      callb->func = func;
 800e4ec:	69fb      	ldr	r3, [r7, #28]
 800e4ee:	68fa      	ldr	r2, [r7, #12]
 800e4f0:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800e4f2:	69fb      	ldr	r3, [r7, #28]
 800e4f4:	687a      	ldr	r2, [r7, #4]
 800e4f6:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800e4f8:	7afb      	ldrb	r3, [r7, #11]
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d102      	bne.n	800e504 <osTimerNew+0x6c>
        reload = pdFALSE;
 800e4fe:	2300      	movs	r3, #0
 800e500:	627b      	str	r3, [r7, #36]	; 0x24
 800e502:	e001      	b.n	800e508 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 800e504:	2301      	movs	r3, #1
 800e506:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 800e508:	f04f 33ff 	mov.w	r3, #4294967295
 800e50c:	623b      	str	r3, [r7, #32]
      name = NULL;
 800e50e:	2300      	movs	r3, #0
 800e510:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 800e512:	683b      	ldr	r3, [r7, #0]
 800e514:	2b00      	cmp	r3, #0
 800e516:	d01c      	beq.n	800e552 <osTimerNew+0xba>
        if (attr->name != NULL) {
 800e518:	683b      	ldr	r3, [r7, #0]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d002      	beq.n	800e526 <osTimerNew+0x8e>
          name = attr->name;
 800e520:	683b      	ldr	r3, [r7, #0]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800e526:	683b      	ldr	r3, [r7, #0]
 800e528:	689b      	ldr	r3, [r3, #8]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d006      	beq.n	800e53c <osTimerNew+0xa4>
 800e52e:	683b      	ldr	r3, [r7, #0]
 800e530:	68db      	ldr	r3, [r3, #12]
 800e532:	2b2f      	cmp	r3, #47	; 0x2f
 800e534:	d902      	bls.n	800e53c <osTimerNew+0xa4>
          mem = 1;
 800e536:	2301      	movs	r3, #1
 800e538:	623b      	str	r3, [r7, #32]
 800e53a:	e00c      	b.n	800e556 <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e53c:	683b      	ldr	r3, [r7, #0]
 800e53e:	689b      	ldr	r3, [r3, #8]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d108      	bne.n	800e556 <osTimerNew+0xbe>
 800e544:	683b      	ldr	r3, [r7, #0]
 800e546:	68db      	ldr	r3, [r3, #12]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d104      	bne.n	800e556 <osTimerNew+0xbe>
            mem = 0;
 800e54c:	2300      	movs	r3, #0
 800e54e:	623b      	str	r3, [r7, #32]
 800e550:	e001      	b.n	800e556 <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 800e552:	2300      	movs	r3, #0
 800e554:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 800e556:	6a3b      	ldr	r3, [r7, #32]
 800e558:	2b01      	cmp	r3, #1
 800e55a:	d10c      	bne.n	800e576 <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800e55c:	683b      	ldr	r3, [r7, #0]
 800e55e:	689b      	ldr	r3, [r3, #8]
 800e560:	9301      	str	r3, [sp, #4]
 800e562:	4b0e      	ldr	r3, [pc, #56]	; (800e59c <osTimerNew+0x104>)
 800e564:	9300      	str	r3, [sp, #0]
 800e566:	69fb      	ldr	r3, [r7, #28]
 800e568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e56a:	2101      	movs	r1, #1
 800e56c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e56e:	f003 fd80 	bl	8012072 <xTimerCreateStatic>
 800e572:	62b8      	str	r0, [r7, #40]	; 0x28
 800e574:	e00b      	b.n	800e58e <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 800e576:	6a3b      	ldr	r3, [r7, #32]
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d108      	bne.n	800e58e <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800e57c:	4b07      	ldr	r3, [pc, #28]	; (800e59c <osTimerNew+0x104>)
 800e57e:	9300      	str	r3, [sp, #0]
 800e580:	69fb      	ldr	r3, [r7, #28]
 800e582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e584:	2101      	movs	r1, #1
 800e586:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e588:	f003 fd52 	bl	8012030 <xTimerCreate>
 800e58c:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800e58e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800e590:	4618      	mov	r0, r3
 800e592:	3730      	adds	r7, #48	; 0x30
 800e594:	46bd      	mov	sp, r7
 800e596:	bd80      	pop	{r7, pc}
 800e598:	20000b18 	.word	0x20000b18
 800e59c:	0800e46d 	.word	0x0800e46d

0800e5a0 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800e5a0:	b580      	push	{r7, lr}
 800e5a2:	b08a      	sub	sp, #40	; 0x28
 800e5a4:	af02      	add	r7, sp, #8
 800e5a6:	6078      	str	r0, [r7, #4]
 800e5a8:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e5ae:	f3ef 8305 	mrs	r3, IPSR
 800e5b2:	617b      	str	r3, [r7, #20]
  return(result);
 800e5b4:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d10f      	bne.n	800e5da <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e5ba:	f3ef 8310 	mrs	r3, PRIMASK
 800e5be:	613b      	str	r3, [r7, #16]
  return(result);
 800e5c0:	693b      	ldr	r3, [r7, #16]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d109      	bne.n	800e5da <osTimerStart+0x3a>
 800e5c6:	4b15      	ldr	r3, [pc, #84]	; (800e61c <osTimerStart+0x7c>)
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	2b02      	cmp	r3, #2
 800e5cc:	d109      	bne.n	800e5e2 <osTimerStart+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e5ce:	f3ef 8311 	mrs	r3, BASEPRI
 800e5d2:	60fb      	str	r3, [r7, #12]
  return(result);
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d003      	beq.n	800e5e2 <osTimerStart+0x42>
    stat = osErrorISR;
 800e5da:	f06f 0305 	mvn.w	r3, #5
 800e5de:	61fb      	str	r3, [r7, #28]
 800e5e0:	e017      	b.n	800e612 <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 800e5e2:	69bb      	ldr	r3, [r7, #24]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d103      	bne.n	800e5f0 <osTimerStart+0x50>
    stat = osErrorParameter;
 800e5e8:	f06f 0303 	mvn.w	r3, #3
 800e5ec:	61fb      	str	r3, [r7, #28]
 800e5ee:	e010      	b.n	800e612 <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	9300      	str	r3, [sp, #0]
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	683a      	ldr	r2, [r7, #0]
 800e5f8:	2104      	movs	r1, #4
 800e5fa:	69b8      	ldr	r0, [r7, #24]
 800e5fc:	f003 fda6 	bl	801214c <xTimerGenericCommand>
 800e600:	4603      	mov	r3, r0
 800e602:	2b01      	cmp	r3, #1
 800e604:	d102      	bne.n	800e60c <osTimerStart+0x6c>
      stat = osOK;
 800e606:	2300      	movs	r3, #0
 800e608:	61fb      	str	r3, [r7, #28]
 800e60a:	e002      	b.n	800e612 <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 800e60c:	f06f 0302 	mvn.w	r3, #2
 800e610:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 800e612:	69fb      	ldr	r3, [r7, #28]
}
 800e614:	4618      	mov	r0, r3
 800e616:	3720      	adds	r7, #32
 800e618:	46bd      	mov	sp, r7
 800e61a:	bd80      	pop	{r7, pc}
 800e61c:	20000b18 	.word	0x20000b18

0800e620 <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 800e620:	b580      	push	{r7, lr}
 800e622:	b08a      	sub	sp, #40	; 0x28
 800e624:	af02      	add	r7, sp, #8
 800e626:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e62c:	f3ef 8305 	mrs	r3, IPSR
 800e630:	617b      	str	r3, [r7, #20]
  return(result);
 800e632:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e634:	2b00      	cmp	r3, #0
 800e636:	d10f      	bne.n	800e658 <osTimerStop+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e638:	f3ef 8310 	mrs	r3, PRIMASK
 800e63c:	613b      	str	r3, [r7, #16]
  return(result);
 800e63e:	693b      	ldr	r3, [r7, #16]
 800e640:	2b00      	cmp	r3, #0
 800e642:	d109      	bne.n	800e658 <osTimerStop+0x38>
 800e644:	4b1a      	ldr	r3, [pc, #104]	; (800e6b0 <osTimerStop+0x90>)
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	2b02      	cmp	r3, #2
 800e64a:	d109      	bne.n	800e660 <osTimerStop+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e64c:	f3ef 8311 	mrs	r3, BASEPRI
 800e650:	60fb      	str	r3, [r7, #12]
  return(result);
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	2b00      	cmp	r3, #0
 800e656:	d003      	beq.n	800e660 <osTimerStop+0x40>
    stat = osErrorISR;
 800e658:	f06f 0305 	mvn.w	r3, #5
 800e65c:	61fb      	str	r3, [r7, #28]
 800e65e:	e021      	b.n	800e6a4 <osTimerStop+0x84>
  }
  else if (hTimer == NULL) {
 800e660:	69bb      	ldr	r3, [r7, #24]
 800e662:	2b00      	cmp	r3, #0
 800e664:	d103      	bne.n	800e66e <osTimerStop+0x4e>
    stat = osErrorParameter;
 800e666:	f06f 0303 	mvn.w	r3, #3
 800e66a:	61fb      	str	r3, [r7, #28]
 800e66c:	e01a      	b.n	800e6a4 <osTimerStop+0x84>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 800e66e:	69b8      	ldr	r0, [r7, #24]
 800e670:	f004 f82e 	bl	80126d0 <xTimerIsTimerActive>
 800e674:	4603      	mov	r3, r0
 800e676:	2b00      	cmp	r3, #0
 800e678:	d103      	bne.n	800e682 <osTimerStop+0x62>
      stat = osErrorResource;
 800e67a:	f06f 0302 	mvn.w	r3, #2
 800e67e:	61fb      	str	r3, [r7, #28]
 800e680:	e010      	b.n	800e6a4 <osTimerStop+0x84>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 800e682:	2300      	movs	r3, #0
 800e684:	9300      	str	r3, [sp, #0]
 800e686:	2300      	movs	r3, #0
 800e688:	2200      	movs	r2, #0
 800e68a:	2103      	movs	r1, #3
 800e68c:	69b8      	ldr	r0, [r7, #24]
 800e68e:	f003 fd5d 	bl	801214c <xTimerGenericCommand>
 800e692:	4603      	mov	r3, r0
 800e694:	2b01      	cmp	r3, #1
 800e696:	d102      	bne.n	800e69e <osTimerStop+0x7e>
        stat = osOK;
 800e698:	2300      	movs	r3, #0
 800e69a:	61fb      	str	r3, [r7, #28]
 800e69c:	e002      	b.n	800e6a4 <osTimerStop+0x84>
      } else {
        stat = osError;
 800e69e:	f04f 33ff 	mov.w	r3, #4294967295
 800e6a2:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800e6a4:	69fb      	ldr	r3, [r7, #28]
}
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	3720      	adds	r7, #32
 800e6aa:	46bd      	mov	sp, r7
 800e6ac:	bd80      	pop	{r7, pc}
 800e6ae:	bf00      	nop
 800e6b0:	20000b18 	.word	0x20000b18

0800e6b4 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b08a      	sub	sp, #40	; 0x28
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800e6bc:	2300      	movs	r3, #0
 800e6be:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e6c0:	f3ef 8305 	mrs	r3, IPSR
 800e6c4:	613b      	str	r3, [r7, #16]
  return(result);
 800e6c6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	f040 8085 	bne.w	800e7d8 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e6ce:	f3ef 8310 	mrs	r3, PRIMASK
 800e6d2:	60fb      	str	r3, [r7, #12]
  return(result);
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d17e      	bne.n	800e7d8 <osMutexNew+0x124>
 800e6da:	4b42      	ldr	r3, [pc, #264]	; (800e7e4 <osMutexNew+0x130>)
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	2b02      	cmp	r3, #2
 800e6e0:	d105      	bne.n	800e6ee <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e6e2:	f3ef 8311 	mrs	r3, BASEPRI
 800e6e6:	60bb      	str	r3, [r7, #8]
  return(result);
 800e6e8:	68bb      	ldr	r3, [r7, #8]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d174      	bne.n	800e7d8 <osMutexNew+0x124>
    if (attr != NULL) {
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d003      	beq.n	800e6fc <osMutexNew+0x48>
      type = attr->attr_bits;
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	685b      	ldr	r3, [r3, #4]
 800e6f8:	623b      	str	r3, [r7, #32]
 800e6fa:	e001      	b.n	800e700 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800e6fc:	2300      	movs	r3, #0
 800e6fe:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800e700:	6a3b      	ldr	r3, [r7, #32]
 800e702:	f003 0301 	and.w	r3, r3, #1
 800e706:	2b00      	cmp	r3, #0
 800e708:	d002      	beq.n	800e710 <osMutexNew+0x5c>
      rmtx = 1U;
 800e70a:	2301      	movs	r3, #1
 800e70c:	61fb      	str	r3, [r7, #28]
 800e70e:	e001      	b.n	800e714 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800e710:	2300      	movs	r3, #0
 800e712:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800e714:	6a3b      	ldr	r3, [r7, #32]
 800e716:	f003 0308 	and.w	r3, r3, #8
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d15c      	bne.n	800e7d8 <osMutexNew+0x124>
      mem = -1;
 800e71e:	f04f 33ff 	mov.w	r3, #4294967295
 800e722:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d015      	beq.n	800e756 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	689b      	ldr	r3, [r3, #8]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d006      	beq.n	800e740 <osMutexNew+0x8c>
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	68db      	ldr	r3, [r3, #12]
 800e736:	2b4f      	cmp	r3, #79	; 0x4f
 800e738:	d902      	bls.n	800e740 <osMutexNew+0x8c>
          mem = 1;
 800e73a:	2301      	movs	r3, #1
 800e73c:	61bb      	str	r3, [r7, #24]
 800e73e:	e00c      	b.n	800e75a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	689b      	ldr	r3, [r3, #8]
 800e744:	2b00      	cmp	r3, #0
 800e746:	d108      	bne.n	800e75a <osMutexNew+0xa6>
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	68db      	ldr	r3, [r3, #12]
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d104      	bne.n	800e75a <osMutexNew+0xa6>
            mem = 0;
 800e750:	2300      	movs	r3, #0
 800e752:	61bb      	str	r3, [r7, #24]
 800e754:	e001      	b.n	800e75a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800e756:	2300      	movs	r3, #0
 800e758:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800e75a:	69bb      	ldr	r3, [r7, #24]
 800e75c:	2b01      	cmp	r3, #1
 800e75e:	d112      	bne.n	800e786 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800e760:	69fb      	ldr	r3, [r7, #28]
 800e762:	2b00      	cmp	r3, #0
 800e764:	d007      	beq.n	800e776 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	689b      	ldr	r3, [r3, #8]
 800e76a:	4619      	mov	r1, r3
 800e76c:	2004      	movs	r0, #4
 800e76e:	f001 fa2f 	bl	800fbd0 <xQueueCreateMutexStatic>
 800e772:	6278      	str	r0, [r7, #36]	; 0x24
 800e774:	e016      	b.n	800e7a4 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	689b      	ldr	r3, [r3, #8]
 800e77a:	4619      	mov	r1, r3
 800e77c:	2001      	movs	r0, #1
 800e77e:	f001 fa27 	bl	800fbd0 <xQueueCreateMutexStatic>
 800e782:	6278      	str	r0, [r7, #36]	; 0x24
 800e784:	e00e      	b.n	800e7a4 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800e786:	69bb      	ldr	r3, [r7, #24]
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d10b      	bne.n	800e7a4 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800e78c:	69fb      	ldr	r3, [r7, #28]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d004      	beq.n	800e79c <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800e792:	2004      	movs	r0, #4
 800e794:	f001 fa04 	bl	800fba0 <xQueueCreateMutex>
 800e798:	6278      	str	r0, [r7, #36]	; 0x24
 800e79a:	e003      	b.n	800e7a4 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800e79c:	2001      	movs	r0, #1
 800e79e:	f001 f9ff 	bl	800fba0 <xQueueCreateMutex>
 800e7a2:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800e7a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d00c      	beq.n	800e7c4 <osMutexNew+0x110>
        if (attr != NULL) {
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d003      	beq.n	800e7b8 <osMutexNew+0x104>
          name = attr->name;
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	617b      	str	r3, [r7, #20]
 800e7b6:	e001      	b.n	800e7bc <osMutexNew+0x108>
        } else {
          name = NULL;
 800e7b8:	2300      	movs	r3, #0
 800e7ba:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800e7bc:	6979      	ldr	r1, [r7, #20]
 800e7be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e7c0:	f002 f8b4 	bl	801092c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800e7c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d006      	beq.n	800e7d8 <osMutexNew+0x124>
 800e7ca:	69fb      	ldr	r3, [r7, #28]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d003      	beq.n	800e7d8 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800e7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7d2:	f043 0301 	orr.w	r3, r3, #1
 800e7d6:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800e7d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e7da:	4618      	mov	r0, r3
 800e7dc:	3728      	adds	r7, #40	; 0x28
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	bd80      	pop	{r7, pc}
 800e7e2:	bf00      	nop
 800e7e4:	20000b18 	.word	0x20000b18

0800e7e8 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800e7e8:	b580      	push	{r7, lr}
 800e7ea:	b088      	sub	sp, #32
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	6078      	str	r0, [r7, #4]
 800e7f0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	f023 0301 	bic.w	r3, r3, #1
 800e7f8:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	f003 0301 	and.w	r3, r3, #1
 800e800:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800e802:	2300      	movs	r3, #0
 800e804:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e806:	f3ef 8305 	mrs	r3, IPSR
 800e80a:	613b      	str	r3, [r7, #16]
  return(result);
 800e80c:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d10f      	bne.n	800e832 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e812:	f3ef 8310 	mrs	r3, PRIMASK
 800e816:	60fb      	str	r3, [r7, #12]
  return(result);
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d109      	bne.n	800e832 <osMutexAcquire+0x4a>
 800e81e:	4b20      	ldr	r3, [pc, #128]	; (800e8a0 <osMutexAcquire+0xb8>)
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	2b02      	cmp	r3, #2
 800e824:	d109      	bne.n	800e83a <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e826:	f3ef 8311 	mrs	r3, BASEPRI
 800e82a:	60bb      	str	r3, [r7, #8]
  return(result);
 800e82c:	68bb      	ldr	r3, [r7, #8]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d003      	beq.n	800e83a <osMutexAcquire+0x52>
    stat = osErrorISR;
 800e832:	f06f 0305 	mvn.w	r3, #5
 800e836:	61fb      	str	r3, [r7, #28]
 800e838:	e02c      	b.n	800e894 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800e83a:	69bb      	ldr	r3, [r7, #24]
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d103      	bne.n	800e848 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800e840:	f06f 0303 	mvn.w	r3, #3
 800e844:	61fb      	str	r3, [r7, #28]
 800e846:	e025      	b.n	800e894 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800e848:	697b      	ldr	r3, [r7, #20]
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d011      	beq.n	800e872 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800e84e:	6839      	ldr	r1, [r7, #0]
 800e850:	69b8      	ldr	r0, [r7, #24]
 800e852:	f001 fa0b 	bl	800fc6c <xQueueTakeMutexRecursive>
 800e856:	4603      	mov	r3, r0
 800e858:	2b01      	cmp	r3, #1
 800e85a:	d01b      	beq.n	800e894 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800e85c:	683b      	ldr	r3, [r7, #0]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d003      	beq.n	800e86a <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800e862:	f06f 0301 	mvn.w	r3, #1
 800e866:	61fb      	str	r3, [r7, #28]
 800e868:	e014      	b.n	800e894 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800e86a:	f06f 0302 	mvn.w	r3, #2
 800e86e:	61fb      	str	r3, [r7, #28]
 800e870:	e010      	b.n	800e894 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800e872:	6839      	ldr	r1, [r7, #0]
 800e874:	69b8      	ldr	r0, [r7, #24]
 800e876:	f001 fd89 	bl	801038c <xQueueSemaphoreTake>
 800e87a:	4603      	mov	r3, r0
 800e87c:	2b01      	cmp	r3, #1
 800e87e:	d009      	beq.n	800e894 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800e880:	683b      	ldr	r3, [r7, #0]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d003      	beq.n	800e88e <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800e886:	f06f 0301 	mvn.w	r3, #1
 800e88a:	61fb      	str	r3, [r7, #28]
 800e88c:	e002      	b.n	800e894 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800e88e:	f06f 0302 	mvn.w	r3, #2
 800e892:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800e894:	69fb      	ldr	r3, [r7, #28]
}
 800e896:	4618      	mov	r0, r3
 800e898:	3720      	adds	r7, #32
 800e89a:	46bd      	mov	sp, r7
 800e89c:	bd80      	pop	{r7, pc}
 800e89e:	bf00      	nop
 800e8a0:	20000b18 	.word	0x20000b18

0800e8a4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800e8a4:	b580      	push	{r7, lr}
 800e8a6:	b088      	sub	sp, #32
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	f023 0301 	bic.w	r3, r3, #1
 800e8b2:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	f003 0301 	and.w	r3, r3, #1
 800e8ba:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800e8bc:	2300      	movs	r3, #0
 800e8be:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e8c0:	f3ef 8305 	mrs	r3, IPSR
 800e8c4:	613b      	str	r3, [r7, #16]
  return(result);
 800e8c6:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d10f      	bne.n	800e8ec <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e8cc:	f3ef 8310 	mrs	r3, PRIMASK
 800e8d0:	60fb      	str	r3, [r7, #12]
  return(result);
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d109      	bne.n	800e8ec <osMutexRelease+0x48>
 800e8d8:	4b19      	ldr	r3, [pc, #100]	; (800e940 <osMutexRelease+0x9c>)
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	2b02      	cmp	r3, #2
 800e8de:	d109      	bne.n	800e8f4 <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e8e0:	f3ef 8311 	mrs	r3, BASEPRI
 800e8e4:	60bb      	str	r3, [r7, #8]
  return(result);
 800e8e6:	68bb      	ldr	r3, [r7, #8]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d003      	beq.n	800e8f4 <osMutexRelease+0x50>
    stat = osErrorISR;
 800e8ec:	f06f 0305 	mvn.w	r3, #5
 800e8f0:	61fb      	str	r3, [r7, #28]
 800e8f2:	e01f      	b.n	800e934 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800e8f4:	69bb      	ldr	r3, [r7, #24]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d103      	bne.n	800e902 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800e8fa:	f06f 0303 	mvn.w	r3, #3
 800e8fe:	61fb      	str	r3, [r7, #28]
 800e900:	e018      	b.n	800e934 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800e902:	697b      	ldr	r3, [r7, #20]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d009      	beq.n	800e91c <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800e908:	69b8      	ldr	r0, [r7, #24]
 800e90a:	f001 f97c 	bl	800fc06 <xQueueGiveMutexRecursive>
 800e90e:	4603      	mov	r3, r0
 800e910:	2b01      	cmp	r3, #1
 800e912:	d00f      	beq.n	800e934 <osMutexRelease+0x90>
        stat = osErrorResource;
 800e914:	f06f 0302 	mvn.w	r3, #2
 800e918:	61fb      	str	r3, [r7, #28]
 800e91a:	e00b      	b.n	800e934 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800e91c:	2300      	movs	r3, #0
 800e91e:	2200      	movs	r2, #0
 800e920:	2100      	movs	r1, #0
 800e922:	69b8      	ldr	r0, [r7, #24]
 800e924:	f001 fa3e 	bl	800fda4 <xQueueGenericSend>
 800e928:	4603      	mov	r3, r0
 800e92a:	2b01      	cmp	r3, #1
 800e92c:	d002      	beq.n	800e934 <osMutexRelease+0x90>
        stat = osErrorResource;
 800e92e:	f06f 0302 	mvn.w	r3, #2
 800e932:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800e934:	69fb      	ldr	r3, [r7, #28]
}
 800e936:	4618      	mov	r0, r3
 800e938:	3720      	adds	r7, #32
 800e93a:	46bd      	mov	sp, r7
 800e93c:	bd80      	pop	{r7, pc}
 800e93e:	bf00      	nop
 800e940:	20000b18 	.word	0x20000b18

0800e944 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800e944:	b580      	push	{r7, lr}
 800e946:	b08c      	sub	sp, #48	; 0x30
 800e948:	af02      	add	r7, sp, #8
 800e94a:	60f8      	str	r0, [r7, #12]
 800e94c:	60b9      	str	r1, [r7, #8]
 800e94e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800e950:	2300      	movs	r3, #0
 800e952:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e954:	f3ef 8305 	mrs	r3, IPSR
 800e958:	61bb      	str	r3, [r7, #24]
  return(result);
 800e95a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	f040 8088 	bne.w	800ea72 <osSemaphoreNew+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e962:	f3ef 8310 	mrs	r3, PRIMASK
 800e966:	617b      	str	r3, [r7, #20]
  return(result);
 800e968:	697b      	ldr	r3, [r7, #20]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	f040 8081 	bne.w	800ea72 <osSemaphoreNew+0x12e>
 800e970:	4b42      	ldr	r3, [pc, #264]	; (800ea7c <osSemaphoreNew+0x138>)
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	2b02      	cmp	r3, #2
 800e976:	d105      	bne.n	800e984 <osSemaphoreNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e978:	f3ef 8311 	mrs	r3, BASEPRI
 800e97c:	613b      	str	r3, [r7, #16]
  return(result);
 800e97e:	693b      	ldr	r3, [r7, #16]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d176      	bne.n	800ea72 <osSemaphoreNew+0x12e>
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	2b00      	cmp	r3, #0
 800e988:	d073      	beq.n	800ea72 <osSemaphoreNew+0x12e>
 800e98a:	68ba      	ldr	r2, [r7, #8]
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	429a      	cmp	r2, r3
 800e990:	d86f      	bhi.n	800ea72 <osSemaphoreNew+0x12e>
    mem = -1;
 800e992:	f04f 33ff 	mov.w	r3, #4294967295
 800e996:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d015      	beq.n	800e9ca <osSemaphoreNew+0x86>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	689b      	ldr	r3, [r3, #8]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d006      	beq.n	800e9b4 <osSemaphoreNew+0x70>
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	68db      	ldr	r3, [r3, #12]
 800e9aa:	2b4f      	cmp	r3, #79	; 0x4f
 800e9ac:	d902      	bls.n	800e9b4 <osSemaphoreNew+0x70>
        mem = 1;
 800e9ae:	2301      	movs	r3, #1
 800e9b0:	623b      	str	r3, [r7, #32]
 800e9b2:	e00c      	b.n	800e9ce <osSemaphoreNew+0x8a>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	689b      	ldr	r3, [r3, #8]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d108      	bne.n	800e9ce <osSemaphoreNew+0x8a>
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	68db      	ldr	r3, [r3, #12]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d104      	bne.n	800e9ce <osSemaphoreNew+0x8a>
          mem = 0;
 800e9c4:	2300      	movs	r3, #0
 800e9c6:	623b      	str	r3, [r7, #32]
 800e9c8:	e001      	b.n	800e9ce <osSemaphoreNew+0x8a>
        }
      }
    }
    else {
      mem = 0;
 800e9ca:	2300      	movs	r3, #0
 800e9cc:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800e9ce:	6a3b      	ldr	r3, [r7, #32]
 800e9d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9d4:	d04d      	beq.n	800ea72 <osSemaphoreNew+0x12e>
      if (max_count == 1U) {
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	2b01      	cmp	r3, #1
 800e9da:	d129      	bne.n	800ea30 <osSemaphoreNew+0xec>
        if (mem == 1) {
 800e9dc:	6a3b      	ldr	r3, [r7, #32]
 800e9de:	2b01      	cmp	r3, #1
 800e9e0:	d10b      	bne.n	800e9fa <osSemaphoreNew+0xb6>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	689a      	ldr	r2, [r3, #8]
 800e9e6:	2303      	movs	r3, #3
 800e9e8:	9300      	str	r3, [sp, #0]
 800e9ea:	4613      	mov	r3, r2
 800e9ec:	2200      	movs	r2, #0
 800e9ee:	2100      	movs	r1, #0
 800e9f0:	2001      	movs	r0, #1
 800e9f2:	f000 ffe9 	bl	800f9c8 <xQueueGenericCreateStatic>
 800e9f6:	6278      	str	r0, [r7, #36]	; 0x24
 800e9f8:	e005      	b.n	800ea06 <osSemaphoreNew+0xc2>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800e9fa:	2203      	movs	r2, #3
 800e9fc:	2100      	movs	r1, #0
 800e9fe:	2001      	movs	r0, #1
 800ea00:	f001 f854 	bl	800faac <xQueueGenericCreate>
 800ea04:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800ea06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d022      	beq.n	800ea52 <osSemaphoreNew+0x10e>
 800ea0c:	68bb      	ldr	r3, [r7, #8]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d01f      	beq.n	800ea52 <osSemaphoreNew+0x10e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ea12:	2300      	movs	r3, #0
 800ea14:	2200      	movs	r2, #0
 800ea16:	2100      	movs	r1, #0
 800ea18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ea1a:	f001 f9c3 	bl	800fda4 <xQueueGenericSend>
 800ea1e:	4603      	mov	r3, r0
 800ea20:	2b01      	cmp	r3, #1
 800ea22:	d016      	beq.n	800ea52 <osSemaphoreNew+0x10e>
            vSemaphoreDelete (hSemaphore);
 800ea24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ea26:	f001 fe36 	bl	8010696 <vQueueDelete>
            hSemaphore = NULL;
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	627b      	str	r3, [r7, #36]	; 0x24
 800ea2e:	e010      	b.n	800ea52 <osSemaphoreNew+0x10e>
          }
        }
      }
      else {
        if (mem == 1) {
 800ea30:	6a3b      	ldr	r3, [r7, #32]
 800ea32:	2b01      	cmp	r3, #1
 800ea34:	d108      	bne.n	800ea48 <osSemaphoreNew+0x104>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	689b      	ldr	r3, [r3, #8]
 800ea3a:	461a      	mov	r2, r3
 800ea3c:	68b9      	ldr	r1, [r7, #8]
 800ea3e:	68f8      	ldr	r0, [r7, #12]
 800ea40:	f001 f949 	bl	800fcd6 <xQueueCreateCountingSemaphoreStatic>
 800ea44:	6278      	str	r0, [r7, #36]	; 0x24
 800ea46:	e004      	b.n	800ea52 <osSemaphoreNew+0x10e>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800ea48:	68b9      	ldr	r1, [r7, #8]
 800ea4a:	68f8      	ldr	r0, [r7, #12]
 800ea4c:	f001 f978 	bl	800fd40 <xQueueCreateCountingSemaphore>
 800ea50:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800ea52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d00c      	beq.n	800ea72 <osSemaphoreNew+0x12e>
        if (attr != NULL) {
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d003      	beq.n	800ea66 <osSemaphoreNew+0x122>
          name = attr->name;
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	61fb      	str	r3, [r7, #28]
 800ea64:	e001      	b.n	800ea6a <osSemaphoreNew+0x126>
        } else {
          name = NULL;
 800ea66:	2300      	movs	r3, #0
 800ea68:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800ea6a:	69f9      	ldr	r1, [r7, #28]
 800ea6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ea6e:	f001 ff5d 	bl	801092c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800ea72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ea74:	4618      	mov	r0, r3
 800ea76:	3728      	adds	r7, #40	; 0x28
 800ea78:	46bd      	mov	sp, r7
 800ea7a:	bd80      	pop	{r7, pc}
 800ea7c:	20000b18 	.word	0x20000b18

0800ea80 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800ea80:	b580      	push	{r7, lr}
 800ea82:	b088      	sub	sp, #32
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	6078      	str	r0, [r7, #4]
 800ea88:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800ea8e:	2300      	movs	r3, #0
 800ea90:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800ea92:	69bb      	ldr	r3, [r7, #24]
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d103      	bne.n	800eaa0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800ea98:	f06f 0303 	mvn.w	r3, #3
 800ea9c:	61fb      	str	r3, [r7, #28]
 800ea9e:	e04b      	b.n	800eb38 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eaa0:	f3ef 8305 	mrs	r3, IPSR
 800eaa4:	617b      	str	r3, [r7, #20]
  return(result);
 800eaa6:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d10f      	bne.n	800eacc <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eaac:	f3ef 8310 	mrs	r3, PRIMASK
 800eab0:	613b      	str	r3, [r7, #16]
  return(result);
 800eab2:	693b      	ldr	r3, [r7, #16]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d109      	bne.n	800eacc <osSemaphoreAcquire+0x4c>
 800eab8:	4b22      	ldr	r3, [pc, #136]	; (800eb44 <osSemaphoreAcquire+0xc4>)
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	2b02      	cmp	r3, #2
 800eabe:	d128      	bne.n	800eb12 <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800eac0:	f3ef 8311 	mrs	r3, BASEPRI
 800eac4:	60fb      	str	r3, [r7, #12]
  return(result);
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d022      	beq.n	800eb12 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800eacc:	683b      	ldr	r3, [r7, #0]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d003      	beq.n	800eada <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800ead2:	f06f 0303 	mvn.w	r3, #3
 800ead6:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800ead8:	e02d      	b.n	800eb36 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800eada:	2300      	movs	r3, #0
 800eadc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800eade:	f107 0308 	add.w	r3, r7, #8
 800eae2:	461a      	mov	r2, r3
 800eae4:	2100      	movs	r1, #0
 800eae6:	69b8      	ldr	r0, [r7, #24]
 800eae8:	f001 fd58 	bl	801059c <xQueueReceiveFromISR>
 800eaec:	4603      	mov	r3, r0
 800eaee:	2b01      	cmp	r3, #1
 800eaf0:	d003      	beq.n	800eafa <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800eaf2:	f06f 0302 	mvn.w	r3, #2
 800eaf6:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800eaf8:	e01d      	b.n	800eb36 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800eafa:	68bb      	ldr	r3, [r7, #8]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d01a      	beq.n	800eb36 <osSemaphoreAcquire+0xb6>
 800eb00:	4b11      	ldr	r3, [pc, #68]	; (800eb48 <osSemaphoreAcquire+0xc8>)
 800eb02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb06:	601a      	str	r2, [r3, #0]
 800eb08:	f3bf 8f4f 	dsb	sy
 800eb0c:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800eb10:	e011      	b.n	800eb36 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800eb12:	6839      	ldr	r1, [r7, #0]
 800eb14:	69b8      	ldr	r0, [r7, #24]
 800eb16:	f001 fc39 	bl	801038c <xQueueSemaphoreTake>
 800eb1a:	4603      	mov	r3, r0
 800eb1c:	2b01      	cmp	r3, #1
 800eb1e:	d00b      	beq.n	800eb38 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800eb20:	683b      	ldr	r3, [r7, #0]
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d003      	beq.n	800eb2e <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800eb26:	f06f 0301 	mvn.w	r3, #1
 800eb2a:	61fb      	str	r3, [r7, #28]
 800eb2c:	e004      	b.n	800eb38 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800eb2e:	f06f 0302 	mvn.w	r3, #2
 800eb32:	61fb      	str	r3, [r7, #28]
 800eb34:	e000      	b.n	800eb38 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800eb36:	bf00      	nop
      }
    }
  }

  return (stat);
 800eb38:	69fb      	ldr	r3, [r7, #28]
}
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	3720      	adds	r7, #32
 800eb3e:	46bd      	mov	sp, r7
 800eb40:	bd80      	pop	{r7, pc}
 800eb42:	bf00      	nop
 800eb44:	20000b18 	.word	0x20000b18
 800eb48:	e000ed04 	.word	0xe000ed04

0800eb4c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	b088      	sub	sp, #32
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800eb58:	2300      	movs	r3, #0
 800eb5a:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800eb5c:	69bb      	ldr	r3, [r7, #24]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d103      	bne.n	800eb6a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800eb62:	f06f 0303 	mvn.w	r3, #3
 800eb66:	61fb      	str	r3, [r7, #28]
 800eb68:	e03e      	b.n	800ebe8 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eb6a:	f3ef 8305 	mrs	r3, IPSR
 800eb6e:	617b      	str	r3, [r7, #20]
  return(result);
 800eb70:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d10f      	bne.n	800eb96 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eb76:	f3ef 8310 	mrs	r3, PRIMASK
 800eb7a:	613b      	str	r3, [r7, #16]
  return(result);
 800eb7c:	693b      	ldr	r3, [r7, #16]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d109      	bne.n	800eb96 <osSemaphoreRelease+0x4a>
 800eb82:	4b1c      	ldr	r3, [pc, #112]	; (800ebf4 <osSemaphoreRelease+0xa8>)
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	2b02      	cmp	r3, #2
 800eb88:	d120      	bne.n	800ebcc <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800eb8a:	f3ef 8311 	mrs	r3, BASEPRI
 800eb8e:	60fb      	str	r3, [r7, #12]
  return(result);
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d01a      	beq.n	800ebcc <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800eb96:	2300      	movs	r3, #0
 800eb98:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800eb9a:	f107 0308 	add.w	r3, r7, #8
 800eb9e:	4619      	mov	r1, r3
 800eba0:	69b8      	ldr	r0, [r7, #24]
 800eba2:	f001 fa8d 	bl	80100c0 <xQueueGiveFromISR>
 800eba6:	4603      	mov	r3, r0
 800eba8:	2b01      	cmp	r3, #1
 800ebaa:	d003      	beq.n	800ebb4 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800ebac:	f06f 0302 	mvn.w	r3, #2
 800ebb0:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800ebb2:	e018      	b.n	800ebe6 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800ebb4:	68bb      	ldr	r3, [r7, #8]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d015      	beq.n	800ebe6 <osSemaphoreRelease+0x9a>
 800ebba:	4b0f      	ldr	r3, [pc, #60]	; (800ebf8 <osSemaphoreRelease+0xac>)
 800ebbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ebc0:	601a      	str	r2, [r3, #0]
 800ebc2:	f3bf 8f4f 	dsb	sy
 800ebc6:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800ebca:	e00c      	b.n	800ebe6 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ebcc:	2300      	movs	r3, #0
 800ebce:	2200      	movs	r2, #0
 800ebd0:	2100      	movs	r1, #0
 800ebd2:	69b8      	ldr	r0, [r7, #24]
 800ebd4:	f001 f8e6 	bl	800fda4 <xQueueGenericSend>
 800ebd8:	4603      	mov	r3, r0
 800ebda:	2b01      	cmp	r3, #1
 800ebdc:	d004      	beq.n	800ebe8 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800ebde:	f06f 0302 	mvn.w	r3, #2
 800ebe2:	61fb      	str	r3, [r7, #28]
 800ebe4:	e000      	b.n	800ebe8 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800ebe6:	bf00      	nop
    }
  }

  return (stat);
 800ebe8:	69fb      	ldr	r3, [r7, #28]
}
 800ebea:	4618      	mov	r0, r3
 800ebec:	3720      	adds	r7, #32
 800ebee:	46bd      	mov	sp, r7
 800ebf0:	bd80      	pop	{r7, pc}
 800ebf2:	bf00      	nop
 800ebf4:	20000b18 	.word	0x20000b18
 800ebf8:	e000ed04 	.word	0xe000ed04

0800ebfc <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800ebfc:	b580      	push	{r7, lr}
 800ebfe:	b08c      	sub	sp, #48	; 0x30
 800ec00:	af02      	add	r7, sp, #8
 800ec02:	60f8      	str	r0, [r7, #12]
 800ec04:	60b9      	str	r1, [r7, #8]
 800ec06:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800ec08:	2300      	movs	r3, #0
 800ec0a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ec0c:	f3ef 8305 	mrs	r3, IPSR
 800ec10:	61bb      	str	r3, [r7, #24]
  return(result);
 800ec12:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d170      	bne.n	800ecfa <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ec18:	f3ef 8310 	mrs	r3, PRIMASK
 800ec1c:	617b      	str	r3, [r7, #20]
  return(result);
 800ec1e:	697b      	ldr	r3, [r7, #20]
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d16a      	bne.n	800ecfa <osMessageQueueNew+0xfe>
 800ec24:	4b37      	ldr	r3, [pc, #220]	; (800ed04 <osMessageQueueNew+0x108>)
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	2b02      	cmp	r3, #2
 800ec2a:	d105      	bne.n	800ec38 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ec2c:	f3ef 8311 	mrs	r3, BASEPRI
 800ec30:	613b      	str	r3, [r7, #16]
  return(result);
 800ec32:	693b      	ldr	r3, [r7, #16]
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d160      	bne.n	800ecfa <osMessageQueueNew+0xfe>
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d05d      	beq.n	800ecfa <osMessageQueueNew+0xfe>
 800ec3e:	68bb      	ldr	r3, [r7, #8]
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d05a      	beq.n	800ecfa <osMessageQueueNew+0xfe>
    mem = -1;
 800ec44:	f04f 33ff 	mov.w	r3, #4294967295
 800ec48:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d029      	beq.n	800eca4 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	689b      	ldr	r3, [r3, #8]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d012      	beq.n	800ec7e <osMessageQueueNew+0x82>
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	68db      	ldr	r3, [r3, #12]
 800ec5c:	2b4f      	cmp	r3, #79	; 0x4f
 800ec5e:	d90e      	bls.n	800ec7e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d00a      	beq.n	800ec7e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	695a      	ldr	r2, [r3, #20]
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	68b9      	ldr	r1, [r7, #8]
 800ec70:	fb01 f303 	mul.w	r3, r1, r3
 800ec74:	429a      	cmp	r2, r3
 800ec76:	d302      	bcc.n	800ec7e <osMessageQueueNew+0x82>
        mem = 1;
 800ec78:	2301      	movs	r3, #1
 800ec7a:	623b      	str	r3, [r7, #32]
 800ec7c:	e014      	b.n	800eca8 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	689b      	ldr	r3, [r3, #8]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d110      	bne.n	800eca8 <osMessageQueueNew+0xac>
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	68db      	ldr	r3, [r3, #12]
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d10c      	bne.n	800eca8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d108      	bne.n	800eca8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	695b      	ldr	r3, [r3, #20]
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d104      	bne.n	800eca8 <osMessageQueueNew+0xac>
          mem = 0;
 800ec9e:	2300      	movs	r3, #0
 800eca0:	623b      	str	r3, [r7, #32]
 800eca2:	e001      	b.n	800eca8 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800eca4:	2300      	movs	r3, #0
 800eca6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800eca8:	6a3b      	ldr	r3, [r7, #32]
 800ecaa:	2b01      	cmp	r3, #1
 800ecac:	d10c      	bne.n	800ecc8 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	691a      	ldr	r2, [r3, #16]
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	6899      	ldr	r1, [r3, #8]
 800ecb6:	2300      	movs	r3, #0
 800ecb8:	9300      	str	r3, [sp, #0]
 800ecba:	460b      	mov	r3, r1
 800ecbc:	68b9      	ldr	r1, [r7, #8]
 800ecbe:	68f8      	ldr	r0, [r7, #12]
 800ecc0:	f000 fe82 	bl	800f9c8 <xQueueGenericCreateStatic>
 800ecc4:	6278      	str	r0, [r7, #36]	; 0x24
 800ecc6:	e008      	b.n	800ecda <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 800ecc8:	6a3b      	ldr	r3, [r7, #32]
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d105      	bne.n	800ecda <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800ecce:	2200      	movs	r2, #0
 800ecd0:	68b9      	ldr	r1, [r7, #8]
 800ecd2:	68f8      	ldr	r0, [r7, #12]
 800ecd4:	f000 feea 	bl	800faac <xQueueGenericCreate>
 800ecd8:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800ecda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d00c      	beq.n	800ecfa <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d003      	beq.n	800ecee <osMessageQueueNew+0xf2>
        name = attr->name;
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	61fb      	str	r3, [r7, #28]
 800ecec:	e001      	b.n	800ecf2 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800ecee:	2300      	movs	r3, #0
 800ecf0:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800ecf2:	69f9      	ldr	r1, [r7, #28]
 800ecf4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ecf6:	f001 fe19 	bl	801092c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800ecfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ecfc:	4618      	mov	r0, r3
 800ecfe:	3728      	adds	r7, #40	; 0x28
 800ed00:	46bd      	mov	sp, r7
 800ed02:	bd80      	pop	{r7, pc}
 800ed04:	20000b18 	.word	0x20000b18

0800ed08 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b08a      	sub	sp, #40	; 0x28
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	60f8      	str	r0, [r7, #12]
 800ed10:	60b9      	str	r1, [r7, #8]
 800ed12:	603b      	str	r3, [r7, #0]
 800ed14:	4613      	mov	r3, r2
 800ed16:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ed1c:	2300      	movs	r3, #0
 800ed1e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ed20:	f3ef 8305 	mrs	r3, IPSR
 800ed24:	61fb      	str	r3, [r7, #28]
  return(result);
 800ed26:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d10f      	bne.n	800ed4c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ed2c:	f3ef 8310 	mrs	r3, PRIMASK
 800ed30:	61bb      	str	r3, [r7, #24]
  return(result);
 800ed32:	69bb      	ldr	r3, [r7, #24]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d109      	bne.n	800ed4c <osMessageQueuePut+0x44>
 800ed38:	4b2b      	ldr	r3, [pc, #172]	; (800ede8 <osMessageQueuePut+0xe0>)
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	2b02      	cmp	r3, #2
 800ed3e:	d12e      	bne.n	800ed9e <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ed40:	f3ef 8311 	mrs	r3, BASEPRI
 800ed44:	617b      	str	r3, [r7, #20]
  return(result);
 800ed46:	697b      	ldr	r3, [r7, #20]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d028      	beq.n	800ed9e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ed4c:	6a3b      	ldr	r3, [r7, #32]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d005      	beq.n	800ed5e <osMessageQueuePut+0x56>
 800ed52:	68bb      	ldr	r3, [r7, #8]
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d002      	beq.n	800ed5e <osMessageQueuePut+0x56>
 800ed58:	683b      	ldr	r3, [r7, #0]
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d003      	beq.n	800ed66 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800ed5e:	f06f 0303 	mvn.w	r3, #3
 800ed62:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ed64:	e039      	b.n	800edda <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800ed66:	2300      	movs	r3, #0
 800ed68:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800ed6a:	f107 0210 	add.w	r2, r7, #16
 800ed6e:	2300      	movs	r3, #0
 800ed70:	68b9      	ldr	r1, [r7, #8]
 800ed72:	6a38      	ldr	r0, [r7, #32]
 800ed74:	f001 f910 	bl	800ff98 <xQueueGenericSendFromISR>
 800ed78:	4603      	mov	r3, r0
 800ed7a:	2b01      	cmp	r3, #1
 800ed7c:	d003      	beq.n	800ed86 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800ed7e:	f06f 0302 	mvn.w	r3, #2
 800ed82:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ed84:	e029      	b.n	800edda <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800ed86:	693b      	ldr	r3, [r7, #16]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d026      	beq.n	800edda <osMessageQueuePut+0xd2>
 800ed8c:	4b17      	ldr	r3, [pc, #92]	; (800edec <osMessageQueuePut+0xe4>)
 800ed8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed92:	601a      	str	r2, [r3, #0]
 800ed94:	f3bf 8f4f 	dsb	sy
 800ed98:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ed9c:	e01d      	b.n	800edda <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ed9e:	6a3b      	ldr	r3, [r7, #32]
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d002      	beq.n	800edaa <osMessageQueuePut+0xa2>
 800eda4:	68bb      	ldr	r3, [r7, #8]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d103      	bne.n	800edb2 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800edaa:	f06f 0303 	mvn.w	r3, #3
 800edae:	627b      	str	r3, [r7, #36]	; 0x24
 800edb0:	e014      	b.n	800eddc <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800edb2:	2300      	movs	r3, #0
 800edb4:	683a      	ldr	r2, [r7, #0]
 800edb6:	68b9      	ldr	r1, [r7, #8]
 800edb8:	6a38      	ldr	r0, [r7, #32]
 800edba:	f000 fff3 	bl	800fda4 <xQueueGenericSend>
 800edbe:	4603      	mov	r3, r0
 800edc0:	2b01      	cmp	r3, #1
 800edc2:	d00b      	beq.n	800eddc <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800edc4:	683b      	ldr	r3, [r7, #0]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d003      	beq.n	800edd2 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800edca:	f06f 0301 	mvn.w	r3, #1
 800edce:	627b      	str	r3, [r7, #36]	; 0x24
 800edd0:	e004      	b.n	800eddc <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800edd2:	f06f 0302 	mvn.w	r3, #2
 800edd6:	627b      	str	r3, [r7, #36]	; 0x24
 800edd8:	e000      	b.n	800eddc <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800edda:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800eddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800edde:	4618      	mov	r0, r3
 800ede0:	3728      	adds	r7, #40	; 0x28
 800ede2:	46bd      	mov	sp, r7
 800ede4:	bd80      	pop	{r7, pc}
 800ede6:	bf00      	nop
 800ede8:	20000b18 	.word	0x20000b18
 800edec:	e000ed04 	.word	0xe000ed04

0800edf0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b08a      	sub	sp, #40	; 0x28
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	60f8      	str	r0, [r7, #12]
 800edf8:	60b9      	str	r1, [r7, #8]
 800edfa:	607a      	str	r2, [r7, #4]
 800edfc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ee02:	2300      	movs	r3, #0
 800ee04:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ee06:	f3ef 8305 	mrs	r3, IPSR
 800ee0a:	61fb      	str	r3, [r7, #28]
  return(result);
 800ee0c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d10f      	bne.n	800ee32 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ee12:	f3ef 8310 	mrs	r3, PRIMASK
 800ee16:	61bb      	str	r3, [r7, #24]
  return(result);
 800ee18:	69bb      	ldr	r3, [r7, #24]
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d109      	bne.n	800ee32 <osMessageQueueGet+0x42>
 800ee1e:	4b2b      	ldr	r3, [pc, #172]	; (800eecc <osMessageQueueGet+0xdc>)
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	2b02      	cmp	r3, #2
 800ee24:	d12e      	bne.n	800ee84 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ee26:	f3ef 8311 	mrs	r3, BASEPRI
 800ee2a:	617b      	str	r3, [r7, #20]
  return(result);
 800ee2c:	697b      	ldr	r3, [r7, #20]
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d028      	beq.n	800ee84 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ee32:	6a3b      	ldr	r3, [r7, #32]
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d005      	beq.n	800ee44 <osMessageQueueGet+0x54>
 800ee38:	68bb      	ldr	r3, [r7, #8]
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d002      	beq.n	800ee44 <osMessageQueueGet+0x54>
 800ee3e:	683b      	ldr	r3, [r7, #0]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d003      	beq.n	800ee4c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800ee44:	f06f 0303 	mvn.w	r3, #3
 800ee48:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ee4a:	e038      	b.n	800eebe <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800ee4c:	2300      	movs	r3, #0
 800ee4e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800ee50:	f107 0310 	add.w	r3, r7, #16
 800ee54:	461a      	mov	r2, r3
 800ee56:	68b9      	ldr	r1, [r7, #8]
 800ee58:	6a38      	ldr	r0, [r7, #32]
 800ee5a:	f001 fb9f 	bl	801059c <xQueueReceiveFromISR>
 800ee5e:	4603      	mov	r3, r0
 800ee60:	2b01      	cmp	r3, #1
 800ee62:	d003      	beq.n	800ee6c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800ee64:	f06f 0302 	mvn.w	r3, #2
 800ee68:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ee6a:	e028      	b.n	800eebe <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800ee6c:	693b      	ldr	r3, [r7, #16]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d025      	beq.n	800eebe <osMessageQueueGet+0xce>
 800ee72:	4b17      	ldr	r3, [pc, #92]	; (800eed0 <osMessageQueueGet+0xe0>)
 800ee74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee78:	601a      	str	r2, [r3, #0]
 800ee7a:	f3bf 8f4f 	dsb	sy
 800ee7e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ee82:	e01c      	b.n	800eebe <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ee84:	6a3b      	ldr	r3, [r7, #32]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d002      	beq.n	800ee90 <osMessageQueueGet+0xa0>
 800ee8a:	68bb      	ldr	r3, [r7, #8]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d103      	bne.n	800ee98 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800ee90:	f06f 0303 	mvn.w	r3, #3
 800ee94:	627b      	str	r3, [r7, #36]	; 0x24
 800ee96:	e013      	b.n	800eec0 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ee98:	683a      	ldr	r2, [r7, #0]
 800ee9a:	68b9      	ldr	r1, [r7, #8]
 800ee9c:	6a38      	ldr	r0, [r7, #32]
 800ee9e:	f001 f999 	bl	80101d4 <xQueueReceive>
 800eea2:	4603      	mov	r3, r0
 800eea4:	2b01      	cmp	r3, #1
 800eea6:	d00b      	beq.n	800eec0 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800eea8:	683b      	ldr	r3, [r7, #0]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d003      	beq.n	800eeb6 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800eeae:	f06f 0301 	mvn.w	r3, #1
 800eeb2:	627b      	str	r3, [r7, #36]	; 0x24
 800eeb4:	e004      	b.n	800eec0 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800eeb6:	f06f 0302 	mvn.w	r3, #2
 800eeba:	627b      	str	r3, [r7, #36]	; 0x24
 800eebc:	e000      	b.n	800eec0 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800eebe:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800eec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800eec2:	4618      	mov	r0, r3
 800eec4:	3728      	adds	r7, #40	; 0x28
 800eec6:	46bd      	mov	sp, r7
 800eec8:	bd80      	pop	{r7, pc}
 800eeca:	bf00      	nop
 800eecc:	20000b18 	.word	0x20000b18
 800eed0:	e000ed04 	.word	0xe000ed04

0800eed4 <osMessageQueueReset>:
  }

  return (space);
}

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b088      	sub	sp, #32
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eee0:	f3ef 8305 	mrs	r3, IPSR
 800eee4:	617b      	str	r3, [r7, #20]
  return(result);
 800eee6:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d10f      	bne.n	800ef0c <osMessageQueueReset+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eeec:	f3ef 8310 	mrs	r3, PRIMASK
 800eef0:	613b      	str	r3, [r7, #16]
  return(result);
 800eef2:	693b      	ldr	r3, [r7, #16]
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d109      	bne.n	800ef0c <osMessageQueueReset+0x38>
 800eef8:	4b0f      	ldr	r3, [pc, #60]	; (800ef38 <osMessageQueueReset+0x64>)
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	2b02      	cmp	r3, #2
 800eefe:	d109      	bne.n	800ef14 <osMessageQueueReset+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ef00:	f3ef 8311 	mrs	r3, BASEPRI
 800ef04:	60fb      	str	r3, [r7, #12]
  return(result);
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d003      	beq.n	800ef14 <osMessageQueueReset+0x40>
    stat = osErrorISR;
 800ef0c:	f06f 0305 	mvn.w	r3, #5
 800ef10:	61fb      	str	r3, [r7, #28]
 800ef12:	e00c      	b.n	800ef2e <osMessageQueueReset+0x5a>
  }
  else if (hQueue == NULL) {
 800ef14:	69bb      	ldr	r3, [r7, #24]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d103      	bne.n	800ef22 <osMessageQueueReset+0x4e>
    stat = osErrorParameter;
 800ef1a:	f06f 0303 	mvn.w	r3, #3
 800ef1e:	61fb      	str	r3, [r7, #28]
 800ef20:	e005      	b.n	800ef2e <osMessageQueueReset+0x5a>
  }
  else {
    stat = osOK;
 800ef22:	2300      	movs	r3, #0
 800ef24:	61fb      	str	r3, [r7, #28]
    (void)xQueueReset (hQueue);
 800ef26:	2100      	movs	r1, #0
 800ef28:	69b8      	ldr	r0, [r7, #24]
 800ef2a:	f000 fce5 	bl	800f8f8 <xQueueGenericReset>
  }

  return (stat);
 800ef2e:	69fb      	ldr	r3, [r7, #28]
}
 800ef30:	4618      	mov	r0, r3
 800ef32:	3720      	adds	r7, #32
 800ef34:	46bd      	mov	sp, r7
 800ef36:	bd80      	pop	{r7, pc}
 800ef38:	20000b18 	.word	0x20000b18

0800ef3c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ef3c:	b480      	push	{r7}
 800ef3e:	b085      	sub	sp, #20
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	60f8      	str	r0, [r7, #12]
 800ef44:	60b9      	str	r1, [r7, #8]
 800ef46:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	4a07      	ldr	r2, [pc, #28]	; (800ef68 <vApplicationGetIdleTaskMemory+0x2c>)
 800ef4c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ef4e:	68bb      	ldr	r3, [r7, #8]
 800ef50:	4a06      	ldr	r2, [pc, #24]	; (800ef6c <vApplicationGetIdleTaskMemory+0x30>)
 800ef52:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ef5a:	601a      	str	r2, [r3, #0]
}
 800ef5c:	bf00      	nop
 800ef5e:	3714      	adds	r7, #20
 800ef60:	46bd      	mov	sp, r7
 800ef62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef66:	4770      	bx	lr
 800ef68:	20000b1c 	.word	0x20000b1c
 800ef6c:	20000b80 	.word	0x20000b80

0800ef70 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ef70:	b480      	push	{r7}
 800ef72:	b085      	sub	sp, #20
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	60f8      	str	r0, [r7, #12]
 800ef78:	60b9      	str	r1, [r7, #8]
 800ef7a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	4a07      	ldr	r2, [pc, #28]	; (800ef9c <vApplicationGetTimerTaskMemory+0x2c>)
 800ef80:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ef82:	68bb      	ldr	r3, [r7, #8]
 800ef84:	4a06      	ldr	r2, [pc, #24]	; (800efa0 <vApplicationGetTimerTaskMemory+0x30>)
 800ef86:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ef8e:	601a      	str	r2, [r3, #0]
}
 800ef90:	bf00      	nop
 800ef92:	3714      	adds	r7, #20
 800ef94:	46bd      	mov	sp, r7
 800ef96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef9a:	4770      	bx	lr
 800ef9c:	20001380 	.word	0x20001380
 800efa0:	200013e4 	.word	0x200013e4

0800efa4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800efa4:	b580      	push	{r7, lr}
 800efa6:	b08a      	sub	sp, #40	; 0x28
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800efac:	2300      	movs	r3, #0
 800efae:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800efb0:	f001 ff76 	bl	8010ea0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800efb4:	4b59      	ldr	r3, [pc, #356]	; (800f11c <pvPortMalloc+0x178>)
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d101      	bne.n	800efc0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800efbc:	f000 f910 	bl	800f1e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800efc0:	4b57      	ldr	r3, [pc, #348]	; (800f120 <pvPortMalloc+0x17c>)
 800efc2:	681a      	ldr	r2, [r3, #0]
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	4013      	ands	r3, r2
 800efc8:	2b00      	cmp	r3, #0
 800efca:	f040 808c 	bne.w	800f0e6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d01c      	beq.n	800f00e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800efd4:	2208      	movs	r2, #8
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	4413      	add	r3, r2
 800efda:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	f003 0307 	and.w	r3, r3, #7
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d013      	beq.n	800f00e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	f023 0307 	bic.w	r3, r3, #7
 800efec:	3308      	adds	r3, #8
 800efee:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	f003 0307 	and.w	r3, r3, #7
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d009      	beq.n	800f00e <pvPortMalloc+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800effa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800effe:	f383 8811 	msr	BASEPRI, r3
 800f002:	f3bf 8f6f 	isb	sy
 800f006:	f3bf 8f4f 	dsb	sy
 800f00a:	617b      	str	r3, [r7, #20]
 800f00c:	e7fe      	b.n	800f00c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	2b00      	cmp	r3, #0
 800f012:	d068      	beq.n	800f0e6 <pvPortMalloc+0x142>
 800f014:	4b43      	ldr	r3, [pc, #268]	; (800f124 <pvPortMalloc+0x180>)
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	687a      	ldr	r2, [r7, #4]
 800f01a:	429a      	cmp	r2, r3
 800f01c:	d863      	bhi.n	800f0e6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f01e:	4b42      	ldr	r3, [pc, #264]	; (800f128 <pvPortMalloc+0x184>)
 800f020:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f022:	4b41      	ldr	r3, [pc, #260]	; (800f128 <pvPortMalloc+0x184>)
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f028:	e004      	b.n	800f034 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800f02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f02c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f036:	685b      	ldr	r3, [r3, #4]
 800f038:	687a      	ldr	r2, [r7, #4]
 800f03a:	429a      	cmp	r2, r3
 800f03c:	d903      	bls.n	800f046 <pvPortMalloc+0xa2>
 800f03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	2b00      	cmp	r3, #0
 800f044:	d1f1      	bne.n	800f02a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f046:	4b35      	ldr	r3, [pc, #212]	; (800f11c <pvPortMalloc+0x178>)
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f04c:	429a      	cmp	r2, r3
 800f04e:	d04a      	beq.n	800f0e6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f050:	6a3b      	ldr	r3, [r7, #32]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	2208      	movs	r2, #8
 800f056:	4413      	add	r3, r2
 800f058:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f05c:	681a      	ldr	r2, [r3, #0]
 800f05e:	6a3b      	ldr	r3, [r7, #32]
 800f060:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f064:	685a      	ldr	r2, [r3, #4]
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	1ad2      	subs	r2, r2, r3
 800f06a:	2308      	movs	r3, #8
 800f06c:	005b      	lsls	r3, r3, #1
 800f06e:	429a      	cmp	r2, r3
 800f070:	d91e      	bls.n	800f0b0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	4413      	add	r3, r2
 800f078:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f07a:	69bb      	ldr	r3, [r7, #24]
 800f07c:	f003 0307 	and.w	r3, r3, #7
 800f080:	2b00      	cmp	r3, #0
 800f082:	d009      	beq.n	800f098 <pvPortMalloc+0xf4>
 800f084:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f088:	f383 8811 	msr	BASEPRI, r3
 800f08c:	f3bf 8f6f 	isb	sy
 800f090:	f3bf 8f4f 	dsb	sy
 800f094:	613b      	str	r3, [r7, #16]
 800f096:	e7fe      	b.n	800f096 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f09a:	685a      	ldr	r2, [r3, #4]
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	1ad2      	subs	r2, r2, r3
 800f0a0:	69bb      	ldr	r3, [r7, #24]
 800f0a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0a6:	687a      	ldr	r2, [r7, #4]
 800f0a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f0aa:	69b8      	ldr	r0, [r7, #24]
 800f0ac:	f000 f8fc 	bl	800f2a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f0b0:	4b1c      	ldr	r3, [pc, #112]	; (800f124 <pvPortMalloc+0x180>)
 800f0b2:	681a      	ldr	r2, [r3, #0]
 800f0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0b6:	685b      	ldr	r3, [r3, #4]
 800f0b8:	1ad3      	subs	r3, r2, r3
 800f0ba:	4a1a      	ldr	r2, [pc, #104]	; (800f124 <pvPortMalloc+0x180>)
 800f0bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f0be:	4b19      	ldr	r3, [pc, #100]	; (800f124 <pvPortMalloc+0x180>)
 800f0c0:	681a      	ldr	r2, [r3, #0]
 800f0c2:	4b1a      	ldr	r3, [pc, #104]	; (800f12c <pvPortMalloc+0x188>)
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	429a      	cmp	r2, r3
 800f0c8:	d203      	bcs.n	800f0d2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f0ca:	4b16      	ldr	r3, [pc, #88]	; (800f124 <pvPortMalloc+0x180>)
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	4a17      	ldr	r2, [pc, #92]	; (800f12c <pvPortMalloc+0x188>)
 800f0d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f0d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0d4:	685a      	ldr	r2, [r3, #4]
 800f0d6:	4b12      	ldr	r3, [pc, #72]	; (800f120 <pvPortMalloc+0x17c>)
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	431a      	orrs	r2, r3
 800f0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0e2:	2200      	movs	r2, #0
 800f0e4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f0e6:	f001 ff21 	bl	8010f2c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800f0ea:	69fb      	ldr	r3, [r7, #28]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d101      	bne.n	800f0f4 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800f0f0:	f7f2 f8c6 	bl	8001280 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f0f4:	69fb      	ldr	r3, [r7, #28]
 800f0f6:	f003 0307 	and.w	r3, r3, #7
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d009      	beq.n	800f112 <pvPortMalloc+0x16e>
 800f0fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f102:	f383 8811 	msr	BASEPRI, r3
 800f106:	f3bf 8f6f 	isb	sy
 800f10a:	f3bf 8f4f 	dsb	sy
 800f10e:	60fb      	str	r3, [r7, #12]
 800f110:	e7fe      	b.n	800f110 <pvPortMalloc+0x16c>
	return pvReturn;
 800f112:	69fb      	ldr	r3, [r7, #28]
}
 800f114:	4618      	mov	r0, r3
 800f116:	3728      	adds	r7, #40	; 0x28
 800f118:	46bd      	mov	sp, r7
 800f11a:	bd80      	pop	{r7, pc}
 800f11c:	20026ddc 	.word	0x20026ddc
 800f120:	20026de8 	.word	0x20026de8
 800f124:	20026de0 	.word	0x20026de0
 800f128:	20026dd4 	.word	0x20026dd4
 800f12c:	20026de4 	.word	0x20026de4

0800f130 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f130:	b580      	push	{r7, lr}
 800f132:	b086      	sub	sp, #24
 800f134:	af00      	add	r7, sp, #0
 800f136:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d046      	beq.n	800f1d0 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f142:	2308      	movs	r3, #8
 800f144:	425b      	negs	r3, r3
 800f146:	697a      	ldr	r2, [r7, #20]
 800f148:	4413      	add	r3, r2
 800f14a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f14c:	697b      	ldr	r3, [r7, #20]
 800f14e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f150:	693b      	ldr	r3, [r7, #16]
 800f152:	685a      	ldr	r2, [r3, #4]
 800f154:	4b20      	ldr	r3, [pc, #128]	; (800f1d8 <vPortFree+0xa8>)
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	4013      	ands	r3, r2
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d109      	bne.n	800f172 <vPortFree+0x42>
 800f15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f162:	f383 8811 	msr	BASEPRI, r3
 800f166:	f3bf 8f6f 	isb	sy
 800f16a:	f3bf 8f4f 	dsb	sy
 800f16e:	60fb      	str	r3, [r7, #12]
 800f170:	e7fe      	b.n	800f170 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f172:	693b      	ldr	r3, [r7, #16]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	2b00      	cmp	r3, #0
 800f178:	d009      	beq.n	800f18e <vPortFree+0x5e>
 800f17a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f17e:	f383 8811 	msr	BASEPRI, r3
 800f182:	f3bf 8f6f 	isb	sy
 800f186:	f3bf 8f4f 	dsb	sy
 800f18a:	60bb      	str	r3, [r7, #8]
 800f18c:	e7fe      	b.n	800f18c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f18e:	693b      	ldr	r3, [r7, #16]
 800f190:	685a      	ldr	r2, [r3, #4]
 800f192:	4b11      	ldr	r3, [pc, #68]	; (800f1d8 <vPortFree+0xa8>)
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	4013      	ands	r3, r2
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d019      	beq.n	800f1d0 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f19c:	693b      	ldr	r3, [r7, #16]
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d115      	bne.n	800f1d0 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f1a4:	693b      	ldr	r3, [r7, #16]
 800f1a6:	685a      	ldr	r2, [r3, #4]
 800f1a8:	4b0b      	ldr	r3, [pc, #44]	; (800f1d8 <vPortFree+0xa8>)
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	43db      	mvns	r3, r3
 800f1ae:	401a      	ands	r2, r3
 800f1b0:	693b      	ldr	r3, [r7, #16]
 800f1b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f1b4:	f001 fe74 	bl	8010ea0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f1b8:	693b      	ldr	r3, [r7, #16]
 800f1ba:	685a      	ldr	r2, [r3, #4]
 800f1bc:	4b07      	ldr	r3, [pc, #28]	; (800f1dc <vPortFree+0xac>)
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	4413      	add	r3, r2
 800f1c2:	4a06      	ldr	r2, [pc, #24]	; (800f1dc <vPortFree+0xac>)
 800f1c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f1c6:	6938      	ldr	r0, [r7, #16]
 800f1c8:	f000 f86e 	bl	800f2a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800f1cc:	f001 feae 	bl	8010f2c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f1d0:	bf00      	nop
 800f1d2:	3718      	adds	r7, #24
 800f1d4:	46bd      	mov	sp, r7
 800f1d6:	bd80      	pop	{r7, pc}
 800f1d8:	20026de8 	.word	0x20026de8
 800f1dc:	20026de0 	.word	0x20026de0

0800f1e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f1e0:	b480      	push	{r7}
 800f1e2:	b085      	sub	sp, #20
 800f1e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f1e6:	4b29      	ldr	r3, [pc, #164]	; (800f28c <prvHeapInit+0xac>)
 800f1e8:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f1ea:	4b29      	ldr	r3, [pc, #164]	; (800f290 <prvHeapInit+0xb0>)
 800f1ec:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	f003 0307 	and.w	r3, r3, #7
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d00c      	beq.n	800f212 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	3307      	adds	r3, #7
 800f1fc:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	f023 0307 	bic.w	r3, r3, #7
 800f204:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f206:	68ba      	ldr	r2, [r7, #8]
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	1ad3      	subs	r3, r2, r3
 800f20c:	4a20      	ldr	r2, [pc, #128]	; (800f290 <prvHeapInit+0xb0>)
 800f20e:	4413      	add	r3, r2
 800f210:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f216:	4a1f      	ldr	r2, [pc, #124]	; (800f294 <prvHeapInit+0xb4>)
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f21c:	4b1d      	ldr	r3, [pc, #116]	; (800f294 <prvHeapInit+0xb4>)
 800f21e:	2200      	movs	r2, #0
 800f220:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	68ba      	ldr	r2, [r7, #8]
 800f226:	4413      	add	r3, r2
 800f228:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f22a:	2208      	movs	r2, #8
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	1a9b      	subs	r3, r3, r2
 800f230:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	f023 0307 	bic.w	r3, r3, #7
 800f238:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	4a16      	ldr	r2, [pc, #88]	; (800f298 <prvHeapInit+0xb8>)
 800f23e:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f240:	4b15      	ldr	r3, [pc, #84]	; (800f298 <prvHeapInit+0xb8>)
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	2200      	movs	r2, #0
 800f246:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f248:	4b13      	ldr	r3, [pc, #76]	; (800f298 <prvHeapInit+0xb8>)
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	2200      	movs	r2, #0
 800f24e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f254:	683b      	ldr	r3, [r7, #0]
 800f256:	68fa      	ldr	r2, [r7, #12]
 800f258:	1ad2      	subs	r2, r2, r3
 800f25a:	683b      	ldr	r3, [r7, #0]
 800f25c:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f25e:	4b0e      	ldr	r3, [pc, #56]	; (800f298 <prvHeapInit+0xb8>)
 800f260:	681a      	ldr	r2, [r3, #0]
 800f262:	683b      	ldr	r3, [r7, #0]
 800f264:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f266:	683b      	ldr	r3, [r7, #0]
 800f268:	685b      	ldr	r3, [r3, #4]
 800f26a:	4a0c      	ldr	r2, [pc, #48]	; (800f29c <prvHeapInit+0xbc>)
 800f26c:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f26e:	683b      	ldr	r3, [r7, #0]
 800f270:	685b      	ldr	r3, [r3, #4]
 800f272:	4a0b      	ldr	r2, [pc, #44]	; (800f2a0 <prvHeapInit+0xc0>)
 800f274:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f276:	4b0b      	ldr	r3, [pc, #44]	; (800f2a4 <prvHeapInit+0xc4>)
 800f278:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f27c:	601a      	str	r2, [r3, #0]
}
 800f27e:	bf00      	nop
 800f280:	3714      	adds	r7, #20
 800f282:	46bd      	mov	sp, r7
 800f284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f288:	4770      	bx	lr
 800f28a:	bf00      	nop
 800f28c:	000249f0 	.word	0x000249f0
 800f290:	200023e4 	.word	0x200023e4
 800f294:	20026dd4 	.word	0x20026dd4
 800f298:	20026ddc 	.word	0x20026ddc
 800f29c:	20026de4 	.word	0x20026de4
 800f2a0:	20026de0 	.word	0x20026de0
 800f2a4:	20026de8 	.word	0x20026de8

0800f2a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f2a8:	b480      	push	{r7}
 800f2aa:	b085      	sub	sp, #20
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f2b0:	4b28      	ldr	r3, [pc, #160]	; (800f354 <prvInsertBlockIntoFreeList+0xac>)
 800f2b2:	60fb      	str	r3, [r7, #12]
 800f2b4:	e002      	b.n	800f2bc <prvInsertBlockIntoFreeList+0x14>
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	60fb      	str	r3, [r7, #12]
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	687a      	ldr	r2, [r7, #4]
 800f2c2:	429a      	cmp	r2, r3
 800f2c4:	d8f7      	bhi.n	800f2b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	685b      	ldr	r3, [r3, #4]
 800f2ce:	68ba      	ldr	r2, [r7, #8]
 800f2d0:	4413      	add	r3, r2
 800f2d2:	687a      	ldr	r2, [r7, #4]
 800f2d4:	429a      	cmp	r2, r3
 800f2d6:	d108      	bne.n	800f2ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	685a      	ldr	r2, [r3, #4]
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	685b      	ldr	r3, [r3, #4]
 800f2e0:	441a      	add	r2, r3
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	685b      	ldr	r3, [r3, #4]
 800f2f2:	68ba      	ldr	r2, [r7, #8]
 800f2f4:	441a      	add	r2, r3
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	429a      	cmp	r2, r3
 800f2fc:	d118      	bne.n	800f330 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	681a      	ldr	r2, [r3, #0]
 800f302:	4b15      	ldr	r3, [pc, #84]	; (800f358 <prvInsertBlockIntoFreeList+0xb0>)
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	429a      	cmp	r2, r3
 800f308:	d00d      	beq.n	800f326 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	685a      	ldr	r2, [r3, #4]
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	685b      	ldr	r3, [r3, #4]
 800f314:	441a      	add	r2, r3
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	681a      	ldr	r2, [r3, #0]
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	601a      	str	r2, [r3, #0]
 800f324:	e008      	b.n	800f338 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f326:	4b0c      	ldr	r3, [pc, #48]	; (800f358 <prvInsertBlockIntoFreeList+0xb0>)
 800f328:	681a      	ldr	r2, [r3, #0]
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	601a      	str	r2, [r3, #0]
 800f32e:	e003      	b.n	800f338 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	681a      	ldr	r2, [r3, #0]
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f338:	68fa      	ldr	r2, [r7, #12]
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	429a      	cmp	r2, r3
 800f33e:	d002      	beq.n	800f346 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	687a      	ldr	r2, [r7, #4]
 800f344:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f346:	bf00      	nop
 800f348:	3714      	adds	r7, #20
 800f34a:	46bd      	mov	sp, r7
 800f34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f350:	4770      	bx	lr
 800f352:	bf00      	nop
 800f354:	20026dd4 	.word	0x20026dd4
 800f358:	20026ddc 	.word	0x20026ddc

0800f35c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f35c:	b480      	push	{r7}
 800f35e:	b083      	sub	sp, #12
 800f360:	af00      	add	r7, sp, #0
 800f362:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	f103 0208 	add.w	r2, r3, #8
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	f04f 32ff 	mov.w	r2, #4294967295
 800f374:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	f103 0208 	add.w	r2, r3, #8
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	f103 0208 	add.w	r2, r3, #8
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	2200      	movs	r2, #0
 800f38e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f390:	bf00      	nop
 800f392:	370c      	adds	r7, #12
 800f394:	46bd      	mov	sp, r7
 800f396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f39a:	4770      	bx	lr

0800f39c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f39c:	b480      	push	{r7}
 800f39e:	b083      	sub	sp, #12
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	2200      	movs	r2, #0
 800f3a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f3aa:	bf00      	nop
 800f3ac:	370c      	adds	r7, #12
 800f3ae:	46bd      	mov	sp, r7
 800f3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3b4:	4770      	bx	lr

0800f3b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f3b6:	b480      	push	{r7}
 800f3b8:	b085      	sub	sp, #20
 800f3ba:	af00      	add	r7, sp, #0
 800f3bc:	6078      	str	r0, [r7, #4]
 800f3be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	685b      	ldr	r3, [r3, #4]
 800f3c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f3c6:	683b      	ldr	r3, [r7, #0]
 800f3c8:	68fa      	ldr	r2, [r7, #12]
 800f3ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	689a      	ldr	r2, [r3, #8]
 800f3d0:	683b      	ldr	r3, [r7, #0]
 800f3d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	689b      	ldr	r3, [r3, #8]
 800f3d8:	683a      	ldr	r2, [r7, #0]
 800f3da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	683a      	ldr	r2, [r7, #0]
 800f3e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800f3e2:	683b      	ldr	r3, [r7, #0]
 800f3e4:	687a      	ldr	r2, [r7, #4]
 800f3e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	1c5a      	adds	r2, r3, #1
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	601a      	str	r2, [r3, #0]
}
 800f3f2:	bf00      	nop
 800f3f4:	3714      	adds	r7, #20
 800f3f6:	46bd      	mov	sp, r7
 800f3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3fc:	4770      	bx	lr

0800f3fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f3fe:	b480      	push	{r7}
 800f400:	b085      	sub	sp, #20
 800f402:	af00      	add	r7, sp, #0
 800f404:	6078      	str	r0, [r7, #4]
 800f406:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f408:	683b      	ldr	r3, [r7, #0]
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f40e:	68bb      	ldr	r3, [r7, #8]
 800f410:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f414:	d103      	bne.n	800f41e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	691b      	ldr	r3, [r3, #16]
 800f41a:	60fb      	str	r3, [r7, #12]
 800f41c:	e00c      	b.n	800f438 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	3308      	adds	r3, #8
 800f422:	60fb      	str	r3, [r7, #12]
 800f424:	e002      	b.n	800f42c <vListInsert+0x2e>
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	685b      	ldr	r3, [r3, #4]
 800f42a:	60fb      	str	r3, [r7, #12]
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	685b      	ldr	r3, [r3, #4]
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	68ba      	ldr	r2, [r7, #8]
 800f434:	429a      	cmp	r2, r3
 800f436:	d2f6      	bcs.n	800f426 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	685a      	ldr	r2, [r3, #4]
 800f43c:	683b      	ldr	r3, [r7, #0]
 800f43e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f440:	683b      	ldr	r3, [r7, #0]
 800f442:	685b      	ldr	r3, [r3, #4]
 800f444:	683a      	ldr	r2, [r7, #0]
 800f446:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f448:	683b      	ldr	r3, [r7, #0]
 800f44a:	68fa      	ldr	r2, [r7, #12]
 800f44c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	683a      	ldr	r2, [r7, #0]
 800f452:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800f454:	683b      	ldr	r3, [r7, #0]
 800f456:	687a      	ldr	r2, [r7, #4]
 800f458:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	1c5a      	adds	r2, r3, #1
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	601a      	str	r2, [r3, #0]
}
 800f464:	bf00      	nop
 800f466:	3714      	adds	r7, #20
 800f468:	46bd      	mov	sp, r7
 800f46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f46e:	4770      	bx	lr

0800f470 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f470:	b480      	push	{r7}
 800f472:	b085      	sub	sp, #20
 800f474:	af00      	add	r7, sp, #0
 800f476:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	691b      	ldr	r3, [r3, #16]
 800f47c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	685b      	ldr	r3, [r3, #4]
 800f482:	687a      	ldr	r2, [r7, #4]
 800f484:	6892      	ldr	r2, [r2, #8]
 800f486:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	689b      	ldr	r3, [r3, #8]
 800f48c:	687a      	ldr	r2, [r7, #4]
 800f48e:	6852      	ldr	r2, [r2, #4]
 800f490:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	685b      	ldr	r3, [r3, #4]
 800f496:	687a      	ldr	r2, [r7, #4]
 800f498:	429a      	cmp	r2, r3
 800f49a:	d103      	bne.n	800f4a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	689a      	ldr	r2, [r3, #8]
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	2200      	movs	r2, #0
 800f4a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	1e5a      	subs	r2, r3, #1
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	681b      	ldr	r3, [r3, #0]
}
 800f4b8:	4618      	mov	r0, r3
 800f4ba:	3714      	adds	r7, #20
 800f4bc:	46bd      	mov	sp, r7
 800f4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c2:	4770      	bx	lr

0800f4c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f4c4:	b480      	push	{r7}
 800f4c6:	b085      	sub	sp, #20
 800f4c8:	af00      	add	r7, sp, #0
 800f4ca:	60f8      	str	r0, [r7, #12]
 800f4cc:	60b9      	str	r1, [r7, #8]
 800f4ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	3b04      	subs	r3, #4
 800f4d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f4dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	3b04      	subs	r3, #4
 800f4e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f4e4:	68bb      	ldr	r3, [r7, #8]
 800f4e6:	f023 0201 	bic.w	r2, r3, #1
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	3b04      	subs	r3, #4
 800f4f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f4f4:	4a0c      	ldr	r2, [pc, #48]	; (800f528 <pxPortInitialiseStack+0x64>)
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	3b14      	subs	r3, #20
 800f4fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f500:	687a      	ldr	r2, [r7, #4]
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	3b04      	subs	r3, #4
 800f50a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	f06f 0202 	mvn.w	r2, #2
 800f512:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	3b20      	subs	r3, #32
 800f518:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f51a:	68fb      	ldr	r3, [r7, #12]
}
 800f51c:	4618      	mov	r0, r3
 800f51e:	3714      	adds	r7, #20
 800f520:	46bd      	mov	sp, r7
 800f522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f526:	4770      	bx	lr
 800f528:	0800f52d 	.word	0x0800f52d

0800f52c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f52c:	b480      	push	{r7}
 800f52e:	b085      	sub	sp, #20
 800f530:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f532:	2300      	movs	r3, #0
 800f534:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f536:	4b11      	ldr	r3, [pc, #68]	; (800f57c <prvTaskExitError+0x50>)
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f53e:	d009      	beq.n	800f554 <prvTaskExitError+0x28>
 800f540:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f544:	f383 8811 	msr	BASEPRI, r3
 800f548:	f3bf 8f6f 	isb	sy
 800f54c:	f3bf 8f4f 	dsb	sy
 800f550:	60fb      	str	r3, [r7, #12]
 800f552:	e7fe      	b.n	800f552 <prvTaskExitError+0x26>
 800f554:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f558:	f383 8811 	msr	BASEPRI, r3
 800f55c:	f3bf 8f6f 	isb	sy
 800f560:	f3bf 8f4f 	dsb	sy
 800f564:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f566:	bf00      	nop
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d0fc      	beq.n	800f568 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f56e:	bf00      	nop
 800f570:	3714      	adds	r7, #20
 800f572:	46bd      	mov	sp, r7
 800f574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f578:	4770      	bx	lr
 800f57a:	bf00      	nop
 800f57c:	20000084 	.word	0x20000084

0800f580 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f580:	4b07      	ldr	r3, [pc, #28]	; (800f5a0 <pxCurrentTCBConst2>)
 800f582:	6819      	ldr	r1, [r3, #0]
 800f584:	6808      	ldr	r0, [r1, #0]
 800f586:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f58a:	f380 8809 	msr	PSP, r0
 800f58e:	f3bf 8f6f 	isb	sy
 800f592:	f04f 0000 	mov.w	r0, #0
 800f596:	f380 8811 	msr	BASEPRI, r0
 800f59a:	4770      	bx	lr
 800f59c:	f3af 8000 	nop.w

0800f5a0 <pxCurrentTCBConst2>:
 800f5a0:	20026df4 	.word	0x20026df4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f5a4:	bf00      	nop
 800f5a6:	bf00      	nop

0800f5a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f5a8:	4808      	ldr	r0, [pc, #32]	; (800f5cc <prvPortStartFirstTask+0x24>)
 800f5aa:	6800      	ldr	r0, [r0, #0]
 800f5ac:	6800      	ldr	r0, [r0, #0]
 800f5ae:	f380 8808 	msr	MSP, r0
 800f5b2:	f04f 0000 	mov.w	r0, #0
 800f5b6:	f380 8814 	msr	CONTROL, r0
 800f5ba:	b662      	cpsie	i
 800f5bc:	b661      	cpsie	f
 800f5be:	f3bf 8f4f 	dsb	sy
 800f5c2:	f3bf 8f6f 	isb	sy
 800f5c6:	df00      	svc	0
 800f5c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f5ca:	bf00      	nop
 800f5cc:	e000ed08 	.word	0xe000ed08

0800f5d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f5d0:	b580      	push	{r7, lr}
 800f5d2:	b086      	sub	sp, #24
 800f5d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f5d6:	4b44      	ldr	r3, [pc, #272]	; (800f6e8 <xPortStartScheduler+0x118>)
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	4a44      	ldr	r2, [pc, #272]	; (800f6ec <xPortStartScheduler+0x11c>)
 800f5dc:	4293      	cmp	r3, r2
 800f5de:	d109      	bne.n	800f5f4 <xPortStartScheduler+0x24>
 800f5e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5e4:	f383 8811 	msr	BASEPRI, r3
 800f5e8:	f3bf 8f6f 	isb	sy
 800f5ec:	f3bf 8f4f 	dsb	sy
 800f5f0:	613b      	str	r3, [r7, #16]
 800f5f2:	e7fe      	b.n	800f5f2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f5f4:	4b3c      	ldr	r3, [pc, #240]	; (800f6e8 <xPortStartScheduler+0x118>)
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	4a3d      	ldr	r2, [pc, #244]	; (800f6f0 <xPortStartScheduler+0x120>)
 800f5fa:	4293      	cmp	r3, r2
 800f5fc:	d109      	bne.n	800f612 <xPortStartScheduler+0x42>
 800f5fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f602:	f383 8811 	msr	BASEPRI, r3
 800f606:	f3bf 8f6f 	isb	sy
 800f60a:	f3bf 8f4f 	dsb	sy
 800f60e:	60fb      	str	r3, [r7, #12]
 800f610:	e7fe      	b.n	800f610 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f612:	4b38      	ldr	r3, [pc, #224]	; (800f6f4 <xPortStartScheduler+0x124>)
 800f614:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f616:	697b      	ldr	r3, [r7, #20]
 800f618:	781b      	ldrb	r3, [r3, #0]
 800f61a:	b2db      	uxtb	r3, r3
 800f61c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f61e:	697b      	ldr	r3, [r7, #20]
 800f620:	22ff      	movs	r2, #255	; 0xff
 800f622:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f624:	697b      	ldr	r3, [r7, #20]
 800f626:	781b      	ldrb	r3, [r3, #0]
 800f628:	b2db      	uxtb	r3, r3
 800f62a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f62c:	78fb      	ldrb	r3, [r7, #3]
 800f62e:	b2db      	uxtb	r3, r3
 800f630:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f634:	b2da      	uxtb	r2, r3
 800f636:	4b30      	ldr	r3, [pc, #192]	; (800f6f8 <xPortStartScheduler+0x128>)
 800f638:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f63a:	4b30      	ldr	r3, [pc, #192]	; (800f6fc <xPortStartScheduler+0x12c>)
 800f63c:	2207      	movs	r2, #7
 800f63e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f640:	e009      	b.n	800f656 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800f642:	4b2e      	ldr	r3, [pc, #184]	; (800f6fc <xPortStartScheduler+0x12c>)
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	3b01      	subs	r3, #1
 800f648:	4a2c      	ldr	r2, [pc, #176]	; (800f6fc <xPortStartScheduler+0x12c>)
 800f64a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f64c:	78fb      	ldrb	r3, [r7, #3]
 800f64e:	b2db      	uxtb	r3, r3
 800f650:	005b      	lsls	r3, r3, #1
 800f652:	b2db      	uxtb	r3, r3
 800f654:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f656:	78fb      	ldrb	r3, [r7, #3]
 800f658:	b2db      	uxtb	r3, r3
 800f65a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f65e:	2b80      	cmp	r3, #128	; 0x80
 800f660:	d0ef      	beq.n	800f642 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f662:	4b26      	ldr	r3, [pc, #152]	; (800f6fc <xPortStartScheduler+0x12c>)
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	f1c3 0307 	rsb	r3, r3, #7
 800f66a:	2b04      	cmp	r3, #4
 800f66c:	d009      	beq.n	800f682 <xPortStartScheduler+0xb2>
 800f66e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f672:	f383 8811 	msr	BASEPRI, r3
 800f676:	f3bf 8f6f 	isb	sy
 800f67a:	f3bf 8f4f 	dsb	sy
 800f67e:	60bb      	str	r3, [r7, #8]
 800f680:	e7fe      	b.n	800f680 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f682:	4b1e      	ldr	r3, [pc, #120]	; (800f6fc <xPortStartScheduler+0x12c>)
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	021b      	lsls	r3, r3, #8
 800f688:	4a1c      	ldr	r2, [pc, #112]	; (800f6fc <xPortStartScheduler+0x12c>)
 800f68a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f68c:	4b1b      	ldr	r3, [pc, #108]	; (800f6fc <xPortStartScheduler+0x12c>)
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f694:	4a19      	ldr	r2, [pc, #100]	; (800f6fc <xPortStartScheduler+0x12c>)
 800f696:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	b2da      	uxtb	r2, r3
 800f69c:	697b      	ldr	r3, [r7, #20]
 800f69e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f6a0:	4b17      	ldr	r3, [pc, #92]	; (800f700 <xPortStartScheduler+0x130>)
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	4a16      	ldr	r2, [pc, #88]	; (800f700 <xPortStartScheduler+0x130>)
 800f6a6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f6aa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f6ac:	4b14      	ldr	r3, [pc, #80]	; (800f700 <xPortStartScheduler+0x130>)
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	4a13      	ldr	r2, [pc, #76]	; (800f700 <xPortStartScheduler+0x130>)
 800f6b2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f6b6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f6b8:	f7f2 fe68 	bl	800238c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f6bc:	4b11      	ldr	r3, [pc, #68]	; (800f704 <xPortStartScheduler+0x134>)
 800f6be:	2200      	movs	r2, #0
 800f6c0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f6c2:	f000 f8d1 	bl	800f868 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f6c6:	4b10      	ldr	r3, [pc, #64]	; (800f708 <xPortStartScheduler+0x138>)
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	4a0f      	ldr	r2, [pc, #60]	; (800f708 <xPortStartScheduler+0x138>)
 800f6cc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f6d0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f6d2:	f7ff ff69 	bl	800f5a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f6d6:	f001 fdc1 	bl	801125c <vTaskSwitchContext>
	prvTaskExitError();
 800f6da:	f7ff ff27 	bl	800f52c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f6de:	2300      	movs	r3, #0
}
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	3718      	adds	r7, #24
 800f6e4:	46bd      	mov	sp, r7
 800f6e6:	bd80      	pop	{r7, pc}
 800f6e8:	e000ed00 	.word	0xe000ed00
 800f6ec:	410fc271 	.word	0x410fc271
 800f6f0:	410fc270 	.word	0x410fc270
 800f6f4:	e000e400 	.word	0xe000e400
 800f6f8:	20026dec 	.word	0x20026dec
 800f6fc:	20026df0 	.word	0x20026df0
 800f700:	e000ed20 	.word	0xe000ed20
 800f704:	20000084 	.word	0x20000084
 800f708:	e000ef34 	.word	0xe000ef34

0800f70c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f70c:	b480      	push	{r7}
 800f70e:	b083      	sub	sp, #12
 800f710:	af00      	add	r7, sp, #0
 800f712:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f716:	f383 8811 	msr	BASEPRI, r3
 800f71a:	f3bf 8f6f 	isb	sy
 800f71e:	f3bf 8f4f 	dsb	sy
 800f722:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f724:	4b0e      	ldr	r3, [pc, #56]	; (800f760 <vPortEnterCritical+0x54>)
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	3301      	adds	r3, #1
 800f72a:	4a0d      	ldr	r2, [pc, #52]	; (800f760 <vPortEnterCritical+0x54>)
 800f72c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f72e:	4b0c      	ldr	r3, [pc, #48]	; (800f760 <vPortEnterCritical+0x54>)
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	2b01      	cmp	r3, #1
 800f734:	d10e      	bne.n	800f754 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f736:	4b0b      	ldr	r3, [pc, #44]	; (800f764 <vPortEnterCritical+0x58>)
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	b2db      	uxtb	r3, r3
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d009      	beq.n	800f754 <vPortEnterCritical+0x48>
 800f740:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f744:	f383 8811 	msr	BASEPRI, r3
 800f748:	f3bf 8f6f 	isb	sy
 800f74c:	f3bf 8f4f 	dsb	sy
 800f750:	603b      	str	r3, [r7, #0]
 800f752:	e7fe      	b.n	800f752 <vPortEnterCritical+0x46>
	}
}
 800f754:	bf00      	nop
 800f756:	370c      	adds	r7, #12
 800f758:	46bd      	mov	sp, r7
 800f75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f75e:	4770      	bx	lr
 800f760:	20000084 	.word	0x20000084
 800f764:	e000ed04 	.word	0xe000ed04

0800f768 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f768:	b480      	push	{r7}
 800f76a:	b083      	sub	sp, #12
 800f76c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f76e:	4b11      	ldr	r3, [pc, #68]	; (800f7b4 <vPortExitCritical+0x4c>)
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	2b00      	cmp	r3, #0
 800f774:	d109      	bne.n	800f78a <vPortExitCritical+0x22>
 800f776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f77a:	f383 8811 	msr	BASEPRI, r3
 800f77e:	f3bf 8f6f 	isb	sy
 800f782:	f3bf 8f4f 	dsb	sy
 800f786:	607b      	str	r3, [r7, #4]
 800f788:	e7fe      	b.n	800f788 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800f78a:	4b0a      	ldr	r3, [pc, #40]	; (800f7b4 <vPortExitCritical+0x4c>)
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	3b01      	subs	r3, #1
 800f790:	4a08      	ldr	r2, [pc, #32]	; (800f7b4 <vPortExitCritical+0x4c>)
 800f792:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f794:	4b07      	ldr	r3, [pc, #28]	; (800f7b4 <vPortExitCritical+0x4c>)
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d104      	bne.n	800f7a6 <vPortExitCritical+0x3e>
 800f79c:	2300      	movs	r3, #0
 800f79e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f7a0:	683b      	ldr	r3, [r7, #0]
 800f7a2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800f7a6:	bf00      	nop
 800f7a8:	370c      	adds	r7, #12
 800f7aa:	46bd      	mov	sp, r7
 800f7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b0:	4770      	bx	lr
 800f7b2:	bf00      	nop
 800f7b4:	20000084 	.word	0x20000084
	...

0800f7c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f7c0:	f3ef 8009 	mrs	r0, PSP
 800f7c4:	f3bf 8f6f 	isb	sy
 800f7c8:	4b15      	ldr	r3, [pc, #84]	; (800f820 <pxCurrentTCBConst>)
 800f7ca:	681a      	ldr	r2, [r3, #0]
 800f7cc:	f01e 0f10 	tst.w	lr, #16
 800f7d0:	bf08      	it	eq
 800f7d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f7d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7da:	6010      	str	r0, [r2, #0]
 800f7dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f7e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f7e4:	f380 8811 	msr	BASEPRI, r0
 800f7e8:	f3bf 8f4f 	dsb	sy
 800f7ec:	f3bf 8f6f 	isb	sy
 800f7f0:	f001 fd34 	bl	801125c <vTaskSwitchContext>
 800f7f4:	f04f 0000 	mov.w	r0, #0
 800f7f8:	f380 8811 	msr	BASEPRI, r0
 800f7fc:	bc09      	pop	{r0, r3}
 800f7fe:	6819      	ldr	r1, [r3, #0]
 800f800:	6808      	ldr	r0, [r1, #0]
 800f802:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f806:	f01e 0f10 	tst.w	lr, #16
 800f80a:	bf08      	it	eq
 800f80c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f810:	f380 8809 	msr	PSP, r0
 800f814:	f3bf 8f6f 	isb	sy
 800f818:	4770      	bx	lr
 800f81a:	bf00      	nop
 800f81c:	f3af 8000 	nop.w

0800f820 <pxCurrentTCBConst>:
 800f820:	20026df4 	.word	0x20026df4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f824:	bf00      	nop
 800f826:	bf00      	nop

0800f828 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f828:	b580      	push	{r7, lr}
 800f82a:	b082      	sub	sp, #8
 800f82c:	af00      	add	r7, sp, #0
	__asm volatile
 800f82e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f832:	f383 8811 	msr	BASEPRI, r3
 800f836:	f3bf 8f6f 	isb	sy
 800f83a:	f3bf 8f4f 	dsb	sy
 800f83e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f840:	f001 fc46 	bl	80110d0 <xTaskIncrementTick>
 800f844:	4603      	mov	r3, r0
 800f846:	2b00      	cmp	r3, #0
 800f848:	d003      	beq.n	800f852 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f84a:	4b06      	ldr	r3, [pc, #24]	; (800f864 <SysTick_Handler+0x3c>)
 800f84c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f850:	601a      	str	r2, [r3, #0]
 800f852:	2300      	movs	r3, #0
 800f854:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f856:	683b      	ldr	r3, [r7, #0]
 800f858:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800f85c:	bf00      	nop
 800f85e:	3708      	adds	r7, #8
 800f860:	46bd      	mov	sp, r7
 800f862:	bd80      	pop	{r7, pc}
 800f864:	e000ed04 	.word	0xe000ed04

0800f868 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f868:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f878 <vPortEnableVFP+0x10>
 800f86c:	6801      	ldr	r1, [r0, #0]
 800f86e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f872:	6001      	str	r1, [r0, #0]
 800f874:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f876:	bf00      	nop
 800f878:	e000ed88 	.word	0xe000ed88

0800f87c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f87c:	b480      	push	{r7}
 800f87e:	b085      	sub	sp, #20
 800f880:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f882:	f3ef 8305 	mrs	r3, IPSR
 800f886:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	2b0f      	cmp	r3, #15
 800f88c:	d913      	bls.n	800f8b6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f88e:	4a16      	ldr	r2, [pc, #88]	; (800f8e8 <vPortValidateInterruptPriority+0x6c>)
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	4413      	add	r3, r2
 800f894:	781b      	ldrb	r3, [r3, #0]
 800f896:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f898:	4b14      	ldr	r3, [pc, #80]	; (800f8ec <vPortValidateInterruptPriority+0x70>)
 800f89a:	781b      	ldrb	r3, [r3, #0]
 800f89c:	7afa      	ldrb	r2, [r7, #11]
 800f89e:	429a      	cmp	r2, r3
 800f8a0:	d209      	bcs.n	800f8b6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800f8a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8a6:	f383 8811 	msr	BASEPRI, r3
 800f8aa:	f3bf 8f6f 	isb	sy
 800f8ae:	f3bf 8f4f 	dsb	sy
 800f8b2:	607b      	str	r3, [r7, #4]
 800f8b4:	e7fe      	b.n	800f8b4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f8b6:	4b0e      	ldr	r3, [pc, #56]	; (800f8f0 <vPortValidateInterruptPriority+0x74>)
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f8be:	4b0d      	ldr	r3, [pc, #52]	; (800f8f4 <vPortValidateInterruptPriority+0x78>)
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	429a      	cmp	r2, r3
 800f8c4:	d909      	bls.n	800f8da <vPortValidateInterruptPriority+0x5e>
 800f8c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8ca:	f383 8811 	msr	BASEPRI, r3
 800f8ce:	f3bf 8f6f 	isb	sy
 800f8d2:	f3bf 8f4f 	dsb	sy
 800f8d6:	603b      	str	r3, [r7, #0]
 800f8d8:	e7fe      	b.n	800f8d8 <vPortValidateInterruptPriority+0x5c>
	}
 800f8da:	bf00      	nop
 800f8dc:	3714      	adds	r7, #20
 800f8de:	46bd      	mov	sp, r7
 800f8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e4:	4770      	bx	lr
 800f8e6:	bf00      	nop
 800f8e8:	e000e3f0 	.word	0xe000e3f0
 800f8ec:	20026dec 	.word	0x20026dec
 800f8f0:	e000ed0c 	.word	0xe000ed0c
 800f8f4:	20026df0 	.word	0x20026df0

0800f8f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f8f8:	b580      	push	{r7, lr}
 800f8fa:	b084      	sub	sp, #16
 800f8fc:	af00      	add	r7, sp, #0
 800f8fe:	6078      	str	r0, [r7, #4]
 800f900:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d109      	bne.n	800f920 <xQueueGenericReset+0x28>
 800f90c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f910:	f383 8811 	msr	BASEPRI, r3
 800f914:	f3bf 8f6f 	isb	sy
 800f918:	f3bf 8f4f 	dsb	sy
 800f91c:	60bb      	str	r3, [r7, #8]
 800f91e:	e7fe      	b.n	800f91e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800f920:	f7ff fef4 	bl	800f70c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	681a      	ldr	r2, [r3, #0]
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f92c:	68f9      	ldr	r1, [r7, #12]
 800f92e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f930:	fb01 f303 	mul.w	r3, r1, r3
 800f934:	441a      	add	r2, r3
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	2200      	movs	r2, #0
 800f93e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	681a      	ldr	r2, [r3, #0]
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	681a      	ldr	r2, [r3, #0]
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f950:	3b01      	subs	r3, #1
 800f952:	68f9      	ldr	r1, [r7, #12]
 800f954:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f956:	fb01 f303 	mul.w	r3, r1, r3
 800f95a:	441a      	add	r2, r3
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	22ff      	movs	r2, #255	; 0xff
 800f964:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	22ff      	movs	r2, #255	; 0xff
 800f96c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800f970:	683b      	ldr	r3, [r7, #0]
 800f972:	2b00      	cmp	r3, #0
 800f974:	d114      	bne.n	800f9a0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	691b      	ldr	r3, [r3, #16]
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d01a      	beq.n	800f9b4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	3310      	adds	r3, #16
 800f982:	4618      	mov	r0, r3
 800f984:	f001 fd40 	bl	8011408 <xTaskRemoveFromEventList>
 800f988:	4603      	mov	r3, r0
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d012      	beq.n	800f9b4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f98e:	4b0d      	ldr	r3, [pc, #52]	; (800f9c4 <xQueueGenericReset+0xcc>)
 800f990:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f994:	601a      	str	r2, [r3, #0]
 800f996:	f3bf 8f4f 	dsb	sy
 800f99a:	f3bf 8f6f 	isb	sy
 800f99e:	e009      	b.n	800f9b4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	3310      	adds	r3, #16
 800f9a4:	4618      	mov	r0, r3
 800f9a6:	f7ff fcd9 	bl	800f35c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	3324      	adds	r3, #36	; 0x24
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	f7ff fcd4 	bl	800f35c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f9b4:	f7ff fed8 	bl	800f768 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f9b8:	2301      	movs	r3, #1
}
 800f9ba:	4618      	mov	r0, r3
 800f9bc:	3710      	adds	r7, #16
 800f9be:	46bd      	mov	sp, r7
 800f9c0:	bd80      	pop	{r7, pc}
 800f9c2:	bf00      	nop
 800f9c4:	e000ed04 	.word	0xe000ed04

0800f9c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f9c8:	b580      	push	{r7, lr}
 800f9ca:	b08e      	sub	sp, #56	; 0x38
 800f9cc:	af02      	add	r7, sp, #8
 800f9ce:	60f8      	str	r0, [r7, #12]
 800f9d0:	60b9      	str	r1, [r7, #8]
 800f9d2:	607a      	str	r2, [r7, #4]
 800f9d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d109      	bne.n	800f9f0 <xQueueGenericCreateStatic+0x28>
 800f9dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9e0:	f383 8811 	msr	BASEPRI, r3
 800f9e4:	f3bf 8f6f 	isb	sy
 800f9e8:	f3bf 8f4f 	dsb	sy
 800f9ec:	62bb      	str	r3, [r7, #40]	; 0x28
 800f9ee:	e7fe      	b.n	800f9ee <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f9f0:	683b      	ldr	r3, [r7, #0]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d109      	bne.n	800fa0a <xQueueGenericCreateStatic+0x42>
 800f9f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9fa:	f383 8811 	msr	BASEPRI, r3
 800f9fe:	f3bf 8f6f 	isb	sy
 800fa02:	f3bf 8f4f 	dsb	sy
 800fa06:	627b      	str	r3, [r7, #36]	; 0x24
 800fa08:	e7fe      	b.n	800fa08 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d002      	beq.n	800fa16 <xQueueGenericCreateStatic+0x4e>
 800fa10:	68bb      	ldr	r3, [r7, #8]
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d001      	beq.n	800fa1a <xQueueGenericCreateStatic+0x52>
 800fa16:	2301      	movs	r3, #1
 800fa18:	e000      	b.n	800fa1c <xQueueGenericCreateStatic+0x54>
 800fa1a:	2300      	movs	r3, #0
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d109      	bne.n	800fa34 <xQueueGenericCreateStatic+0x6c>
 800fa20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa24:	f383 8811 	msr	BASEPRI, r3
 800fa28:	f3bf 8f6f 	isb	sy
 800fa2c:	f3bf 8f4f 	dsb	sy
 800fa30:	623b      	str	r3, [r7, #32]
 800fa32:	e7fe      	b.n	800fa32 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d102      	bne.n	800fa40 <xQueueGenericCreateStatic+0x78>
 800fa3a:	68bb      	ldr	r3, [r7, #8]
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d101      	bne.n	800fa44 <xQueueGenericCreateStatic+0x7c>
 800fa40:	2301      	movs	r3, #1
 800fa42:	e000      	b.n	800fa46 <xQueueGenericCreateStatic+0x7e>
 800fa44:	2300      	movs	r3, #0
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d109      	bne.n	800fa5e <xQueueGenericCreateStatic+0x96>
 800fa4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa4e:	f383 8811 	msr	BASEPRI, r3
 800fa52:	f3bf 8f6f 	isb	sy
 800fa56:	f3bf 8f4f 	dsb	sy
 800fa5a:	61fb      	str	r3, [r7, #28]
 800fa5c:	e7fe      	b.n	800fa5c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800fa5e:	2350      	movs	r3, #80	; 0x50
 800fa60:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800fa62:	697b      	ldr	r3, [r7, #20]
 800fa64:	2b50      	cmp	r3, #80	; 0x50
 800fa66:	d009      	beq.n	800fa7c <xQueueGenericCreateStatic+0xb4>
 800fa68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa6c:	f383 8811 	msr	BASEPRI, r3
 800fa70:	f3bf 8f6f 	isb	sy
 800fa74:	f3bf 8f4f 	dsb	sy
 800fa78:	61bb      	str	r3, [r7, #24]
 800fa7a:	e7fe      	b.n	800fa7a <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fa7c:	683b      	ldr	r3, [r7, #0]
 800fa7e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800fa80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d00d      	beq.n	800faa2 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800fa86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa88:	2201      	movs	r2, #1
 800fa8a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fa8e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800fa92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa94:	9300      	str	r3, [sp, #0]
 800fa96:	4613      	mov	r3, r2
 800fa98:	687a      	ldr	r2, [r7, #4]
 800fa9a:	68b9      	ldr	r1, [r7, #8]
 800fa9c:	68f8      	ldr	r0, [r7, #12]
 800fa9e:	f000 f842 	bl	800fb26 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800faa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800faa4:	4618      	mov	r0, r3
 800faa6:	3730      	adds	r7, #48	; 0x30
 800faa8:	46bd      	mov	sp, r7
 800faaa:	bd80      	pop	{r7, pc}

0800faac <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800faac:	b580      	push	{r7, lr}
 800faae:	b08a      	sub	sp, #40	; 0x28
 800fab0:	af02      	add	r7, sp, #8
 800fab2:	60f8      	str	r0, [r7, #12]
 800fab4:	60b9      	str	r1, [r7, #8]
 800fab6:	4613      	mov	r3, r2
 800fab8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d109      	bne.n	800fad4 <xQueueGenericCreate+0x28>
 800fac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fac4:	f383 8811 	msr	BASEPRI, r3
 800fac8:	f3bf 8f6f 	isb	sy
 800facc:	f3bf 8f4f 	dsb	sy
 800fad0:	613b      	str	r3, [r7, #16]
 800fad2:	e7fe      	b.n	800fad2 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800fad4:	68bb      	ldr	r3, [r7, #8]
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d102      	bne.n	800fae0 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800fada:	2300      	movs	r3, #0
 800fadc:	61fb      	str	r3, [r7, #28]
 800fade:	e004      	b.n	800faea <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	68ba      	ldr	r2, [r7, #8]
 800fae4:	fb02 f303 	mul.w	r3, r2, r3
 800fae8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800faea:	69fb      	ldr	r3, [r7, #28]
 800faec:	3350      	adds	r3, #80	; 0x50
 800faee:	4618      	mov	r0, r3
 800faf0:	f7ff fa58 	bl	800efa4 <pvPortMalloc>
 800faf4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800faf6:	69bb      	ldr	r3, [r7, #24]
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d00f      	beq.n	800fb1c <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800fafc:	69bb      	ldr	r3, [r7, #24]
 800fafe:	3350      	adds	r3, #80	; 0x50
 800fb00:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800fb02:	69bb      	ldr	r3, [r7, #24]
 800fb04:	2200      	movs	r2, #0
 800fb06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fb0a:	79fa      	ldrb	r2, [r7, #7]
 800fb0c:	69bb      	ldr	r3, [r7, #24]
 800fb0e:	9300      	str	r3, [sp, #0]
 800fb10:	4613      	mov	r3, r2
 800fb12:	697a      	ldr	r2, [r7, #20]
 800fb14:	68b9      	ldr	r1, [r7, #8]
 800fb16:	68f8      	ldr	r0, [r7, #12]
 800fb18:	f000 f805 	bl	800fb26 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800fb1c:	69bb      	ldr	r3, [r7, #24]
	}
 800fb1e:	4618      	mov	r0, r3
 800fb20:	3720      	adds	r7, #32
 800fb22:	46bd      	mov	sp, r7
 800fb24:	bd80      	pop	{r7, pc}

0800fb26 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800fb26:	b580      	push	{r7, lr}
 800fb28:	b084      	sub	sp, #16
 800fb2a:	af00      	add	r7, sp, #0
 800fb2c:	60f8      	str	r0, [r7, #12]
 800fb2e:	60b9      	str	r1, [r7, #8]
 800fb30:	607a      	str	r2, [r7, #4]
 800fb32:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800fb34:	68bb      	ldr	r3, [r7, #8]
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d103      	bne.n	800fb42 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800fb3a:	69bb      	ldr	r3, [r7, #24]
 800fb3c:	69ba      	ldr	r2, [r7, #24]
 800fb3e:	601a      	str	r2, [r3, #0]
 800fb40:	e002      	b.n	800fb48 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800fb42:	69bb      	ldr	r3, [r7, #24]
 800fb44:	687a      	ldr	r2, [r7, #4]
 800fb46:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800fb48:	69bb      	ldr	r3, [r7, #24]
 800fb4a:	68fa      	ldr	r2, [r7, #12]
 800fb4c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800fb4e:	69bb      	ldr	r3, [r7, #24]
 800fb50:	68ba      	ldr	r2, [r7, #8]
 800fb52:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800fb54:	2101      	movs	r1, #1
 800fb56:	69b8      	ldr	r0, [r7, #24]
 800fb58:	f7ff fece 	bl	800f8f8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800fb5c:	69bb      	ldr	r3, [r7, #24]
 800fb5e:	78fa      	ldrb	r2, [r7, #3]
 800fb60:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800fb64:	bf00      	nop
 800fb66:	3710      	adds	r7, #16
 800fb68:	46bd      	mov	sp, r7
 800fb6a:	bd80      	pop	{r7, pc}

0800fb6c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800fb6c:	b580      	push	{r7, lr}
 800fb6e:	b082      	sub	sp, #8
 800fb70:	af00      	add	r7, sp, #0
 800fb72:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d00e      	beq.n	800fb98 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	2200      	movs	r2, #0
 800fb7e:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	2200      	movs	r2, #0
 800fb84:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	2200      	movs	r2, #0
 800fb8a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800fb8c:	2300      	movs	r3, #0
 800fb8e:	2200      	movs	r2, #0
 800fb90:	2100      	movs	r1, #0
 800fb92:	6878      	ldr	r0, [r7, #4]
 800fb94:	f000 f906 	bl	800fda4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800fb98:	bf00      	nop
 800fb9a:	3708      	adds	r7, #8
 800fb9c:	46bd      	mov	sp, r7
 800fb9e:	bd80      	pop	{r7, pc}

0800fba0 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800fba0:	b580      	push	{r7, lr}
 800fba2:	b086      	sub	sp, #24
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	4603      	mov	r3, r0
 800fba8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800fbaa:	2301      	movs	r3, #1
 800fbac:	617b      	str	r3, [r7, #20]
 800fbae:	2300      	movs	r3, #0
 800fbb0:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800fbb2:	79fb      	ldrb	r3, [r7, #7]
 800fbb4:	461a      	mov	r2, r3
 800fbb6:	6939      	ldr	r1, [r7, #16]
 800fbb8:	6978      	ldr	r0, [r7, #20]
 800fbba:	f7ff ff77 	bl	800faac <xQueueGenericCreate>
 800fbbe:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800fbc0:	68f8      	ldr	r0, [r7, #12]
 800fbc2:	f7ff ffd3 	bl	800fb6c <prvInitialiseMutex>

		return pxNewQueue;
 800fbc6:	68fb      	ldr	r3, [r7, #12]
	}
 800fbc8:	4618      	mov	r0, r3
 800fbca:	3718      	adds	r7, #24
 800fbcc:	46bd      	mov	sp, r7
 800fbce:	bd80      	pop	{r7, pc}

0800fbd0 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800fbd0:	b580      	push	{r7, lr}
 800fbd2:	b088      	sub	sp, #32
 800fbd4:	af02      	add	r7, sp, #8
 800fbd6:	4603      	mov	r3, r0
 800fbd8:	6039      	str	r1, [r7, #0]
 800fbda:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800fbdc:	2301      	movs	r3, #1
 800fbde:	617b      	str	r3, [r7, #20]
 800fbe0:	2300      	movs	r3, #0
 800fbe2:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800fbe4:	79fb      	ldrb	r3, [r7, #7]
 800fbe6:	9300      	str	r3, [sp, #0]
 800fbe8:	683b      	ldr	r3, [r7, #0]
 800fbea:	2200      	movs	r2, #0
 800fbec:	6939      	ldr	r1, [r7, #16]
 800fbee:	6978      	ldr	r0, [r7, #20]
 800fbf0:	f7ff feea 	bl	800f9c8 <xQueueGenericCreateStatic>
 800fbf4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800fbf6:	68f8      	ldr	r0, [r7, #12]
 800fbf8:	f7ff ffb8 	bl	800fb6c <prvInitialiseMutex>

		return pxNewQueue;
 800fbfc:	68fb      	ldr	r3, [r7, #12]
	}
 800fbfe:	4618      	mov	r0, r3
 800fc00:	3718      	adds	r7, #24
 800fc02:	46bd      	mov	sp, r7
 800fc04:	bd80      	pop	{r7, pc}

0800fc06 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800fc06:	b590      	push	{r4, r7, lr}
 800fc08:	b087      	sub	sp, #28
 800fc0a:	af00      	add	r7, sp, #0
 800fc0c:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800fc12:	693b      	ldr	r3, [r7, #16]
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d109      	bne.n	800fc2c <xQueueGiveMutexRecursive+0x26>
 800fc18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc1c:	f383 8811 	msr	BASEPRI, r3
 800fc20:	f3bf 8f6f 	isb	sy
 800fc24:	f3bf 8f4f 	dsb	sy
 800fc28:	60fb      	str	r3, [r7, #12]
 800fc2a:	e7fe      	b.n	800fc2a <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 800fc2c:	693b      	ldr	r3, [r7, #16]
 800fc2e:	685c      	ldr	r4, [r3, #4]
 800fc30:	f001 fdfc 	bl	801182c <xTaskGetCurrentTaskHandle>
 800fc34:	4603      	mov	r3, r0
 800fc36:	429c      	cmp	r4, r3
 800fc38:	d111      	bne.n	800fc5e <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 800fc3a:	693b      	ldr	r3, [r7, #16]
 800fc3c:	68db      	ldr	r3, [r3, #12]
 800fc3e:	1e5a      	subs	r2, r3, #1
 800fc40:	693b      	ldr	r3, [r7, #16]
 800fc42:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800fc44:	693b      	ldr	r3, [r7, #16]
 800fc46:	68db      	ldr	r3, [r3, #12]
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d105      	bne.n	800fc58 <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800fc4c:	2300      	movs	r3, #0
 800fc4e:	2200      	movs	r2, #0
 800fc50:	2100      	movs	r1, #0
 800fc52:	6938      	ldr	r0, [r7, #16]
 800fc54:	f000 f8a6 	bl	800fda4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800fc58:	2301      	movs	r3, #1
 800fc5a:	617b      	str	r3, [r7, #20]
 800fc5c:	e001      	b.n	800fc62 <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800fc5e:	2300      	movs	r3, #0
 800fc60:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800fc62:	697b      	ldr	r3, [r7, #20]
	}
 800fc64:	4618      	mov	r0, r3
 800fc66:	371c      	adds	r7, #28
 800fc68:	46bd      	mov	sp, r7
 800fc6a:	bd90      	pop	{r4, r7, pc}

0800fc6c <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800fc6c:	b590      	push	{r4, r7, lr}
 800fc6e:	b087      	sub	sp, #28
 800fc70:	af00      	add	r7, sp, #0
 800fc72:	6078      	str	r0, [r7, #4]
 800fc74:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800fc7a:	693b      	ldr	r3, [r7, #16]
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d109      	bne.n	800fc94 <xQueueTakeMutexRecursive+0x28>
 800fc80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc84:	f383 8811 	msr	BASEPRI, r3
 800fc88:	f3bf 8f6f 	isb	sy
 800fc8c:	f3bf 8f4f 	dsb	sy
 800fc90:	60fb      	str	r3, [r7, #12]
 800fc92:	e7fe      	b.n	800fc92 <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800fc94:	693b      	ldr	r3, [r7, #16]
 800fc96:	685c      	ldr	r4, [r3, #4]
 800fc98:	f001 fdc8 	bl	801182c <xTaskGetCurrentTaskHandle>
 800fc9c:	4603      	mov	r3, r0
 800fc9e:	429c      	cmp	r4, r3
 800fca0:	d107      	bne.n	800fcb2 <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 800fca2:	693b      	ldr	r3, [r7, #16]
 800fca4:	68db      	ldr	r3, [r3, #12]
 800fca6:	1c5a      	adds	r2, r3, #1
 800fca8:	693b      	ldr	r3, [r7, #16]
 800fcaa:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800fcac:	2301      	movs	r3, #1
 800fcae:	617b      	str	r3, [r7, #20]
 800fcb0:	e00c      	b.n	800fccc <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800fcb2:	6839      	ldr	r1, [r7, #0]
 800fcb4:	6938      	ldr	r0, [r7, #16]
 800fcb6:	f000 fb69 	bl	801038c <xQueueSemaphoreTake>
 800fcba:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800fcbc:	697b      	ldr	r3, [r7, #20]
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d004      	beq.n	800fccc <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 800fcc2:	693b      	ldr	r3, [r7, #16]
 800fcc4:	68db      	ldr	r3, [r3, #12]
 800fcc6:	1c5a      	adds	r2, r3, #1
 800fcc8:	693b      	ldr	r3, [r7, #16]
 800fcca:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800fccc:	697b      	ldr	r3, [r7, #20]
	}
 800fcce:	4618      	mov	r0, r3
 800fcd0:	371c      	adds	r7, #28
 800fcd2:	46bd      	mov	sp, r7
 800fcd4:	bd90      	pop	{r4, r7, pc}

0800fcd6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800fcd6:	b580      	push	{r7, lr}
 800fcd8:	b08a      	sub	sp, #40	; 0x28
 800fcda:	af02      	add	r7, sp, #8
 800fcdc:	60f8      	str	r0, [r7, #12]
 800fcde:	60b9      	str	r1, [r7, #8]
 800fce0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d109      	bne.n	800fcfc <xQueueCreateCountingSemaphoreStatic+0x26>
 800fce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcec:	f383 8811 	msr	BASEPRI, r3
 800fcf0:	f3bf 8f6f 	isb	sy
 800fcf4:	f3bf 8f4f 	dsb	sy
 800fcf8:	61bb      	str	r3, [r7, #24]
 800fcfa:	e7fe      	b.n	800fcfa <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800fcfc:	68ba      	ldr	r2, [r7, #8]
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	429a      	cmp	r2, r3
 800fd02:	d909      	bls.n	800fd18 <xQueueCreateCountingSemaphoreStatic+0x42>
 800fd04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd08:	f383 8811 	msr	BASEPRI, r3
 800fd0c:	f3bf 8f6f 	isb	sy
 800fd10:	f3bf 8f4f 	dsb	sy
 800fd14:	617b      	str	r3, [r7, #20]
 800fd16:	e7fe      	b.n	800fd16 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800fd18:	2302      	movs	r3, #2
 800fd1a:	9300      	str	r3, [sp, #0]
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	2200      	movs	r2, #0
 800fd20:	2100      	movs	r1, #0
 800fd22:	68f8      	ldr	r0, [r7, #12]
 800fd24:	f7ff fe50 	bl	800f9c8 <xQueueGenericCreateStatic>
 800fd28:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800fd2a:	69fb      	ldr	r3, [r7, #28]
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d002      	beq.n	800fd36 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800fd30:	69fb      	ldr	r3, [r7, #28]
 800fd32:	68ba      	ldr	r2, [r7, #8]
 800fd34:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800fd36:	69fb      	ldr	r3, [r7, #28]
	}
 800fd38:	4618      	mov	r0, r3
 800fd3a:	3720      	adds	r7, #32
 800fd3c:	46bd      	mov	sp, r7
 800fd3e:	bd80      	pop	{r7, pc}

0800fd40 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800fd40:	b580      	push	{r7, lr}
 800fd42:	b086      	sub	sp, #24
 800fd44:	af00      	add	r7, sp, #0
 800fd46:	6078      	str	r0, [r7, #4]
 800fd48:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d109      	bne.n	800fd64 <xQueueCreateCountingSemaphore+0x24>
 800fd50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd54:	f383 8811 	msr	BASEPRI, r3
 800fd58:	f3bf 8f6f 	isb	sy
 800fd5c:	f3bf 8f4f 	dsb	sy
 800fd60:	613b      	str	r3, [r7, #16]
 800fd62:	e7fe      	b.n	800fd62 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 800fd64:	683a      	ldr	r2, [r7, #0]
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	429a      	cmp	r2, r3
 800fd6a:	d909      	bls.n	800fd80 <xQueueCreateCountingSemaphore+0x40>
 800fd6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd70:	f383 8811 	msr	BASEPRI, r3
 800fd74:	f3bf 8f6f 	isb	sy
 800fd78:	f3bf 8f4f 	dsb	sy
 800fd7c:	60fb      	str	r3, [r7, #12]
 800fd7e:	e7fe      	b.n	800fd7e <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800fd80:	2202      	movs	r2, #2
 800fd82:	2100      	movs	r1, #0
 800fd84:	6878      	ldr	r0, [r7, #4]
 800fd86:	f7ff fe91 	bl	800faac <xQueueGenericCreate>
 800fd8a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800fd8c:	697b      	ldr	r3, [r7, #20]
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d002      	beq.n	800fd98 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800fd92:	697b      	ldr	r3, [r7, #20]
 800fd94:	683a      	ldr	r2, [r7, #0]
 800fd96:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800fd98:	697b      	ldr	r3, [r7, #20]
	}
 800fd9a:	4618      	mov	r0, r3
 800fd9c:	3718      	adds	r7, #24
 800fd9e:	46bd      	mov	sp, r7
 800fda0:	bd80      	pop	{r7, pc}
	...

0800fda4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800fda4:	b580      	push	{r7, lr}
 800fda6:	b08e      	sub	sp, #56	; 0x38
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	60f8      	str	r0, [r7, #12]
 800fdac:	60b9      	str	r1, [r7, #8]
 800fdae:	607a      	str	r2, [r7, #4]
 800fdb0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800fdb2:	2300      	movs	r3, #0
 800fdb4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800fdba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d109      	bne.n	800fdd4 <xQueueGenericSend+0x30>
 800fdc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdc4:	f383 8811 	msr	BASEPRI, r3
 800fdc8:	f3bf 8f6f 	isb	sy
 800fdcc:	f3bf 8f4f 	dsb	sy
 800fdd0:	62bb      	str	r3, [r7, #40]	; 0x28
 800fdd2:	e7fe      	b.n	800fdd2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fdd4:	68bb      	ldr	r3, [r7, #8]
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d103      	bne.n	800fde2 <xQueueGenericSend+0x3e>
 800fdda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d101      	bne.n	800fde6 <xQueueGenericSend+0x42>
 800fde2:	2301      	movs	r3, #1
 800fde4:	e000      	b.n	800fde8 <xQueueGenericSend+0x44>
 800fde6:	2300      	movs	r3, #0
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d109      	bne.n	800fe00 <xQueueGenericSend+0x5c>
 800fdec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdf0:	f383 8811 	msr	BASEPRI, r3
 800fdf4:	f3bf 8f6f 	isb	sy
 800fdf8:	f3bf 8f4f 	dsb	sy
 800fdfc:	627b      	str	r3, [r7, #36]	; 0x24
 800fdfe:	e7fe      	b.n	800fdfe <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fe00:	683b      	ldr	r3, [r7, #0]
 800fe02:	2b02      	cmp	r3, #2
 800fe04:	d103      	bne.n	800fe0e <xQueueGenericSend+0x6a>
 800fe06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fe0a:	2b01      	cmp	r3, #1
 800fe0c:	d101      	bne.n	800fe12 <xQueueGenericSend+0x6e>
 800fe0e:	2301      	movs	r3, #1
 800fe10:	e000      	b.n	800fe14 <xQueueGenericSend+0x70>
 800fe12:	2300      	movs	r3, #0
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d109      	bne.n	800fe2c <xQueueGenericSend+0x88>
 800fe18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe1c:	f383 8811 	msr	BASEPRI, r3
 800fe20:	f3bf 8f6f 	isb	sy
 800fe24:	f3bf 8f4f 	dsb	sy
 800fe28:	623b      	str	r3, [r7, #32]
 800fe2a:	e7fe      	b.n	800fe2a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fe2c:	f001 fd0e 	bl	801184c <xTaskGetSchedulerState>
 800fe30:	4603      	mov	r3, r0
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d102      	bne.n	800fe3c <xQueueGenericSend+0x98>
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d101      	bne.n	800fe40 <xQueueGenericSend+0x9c>
 800fe3c:	2301      	movs	r3, #1
 800fe3e:	e000      	b.n	800fe42 <xQueueGenericSend+0x9e>
 800fe40:	2300      	movs	r3, #0
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d109      	bne.n	800fe5a <xQueueGenericSend+0xb6>
 800fe46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe4a:	f383 8811 	msr	BASEPRI, r3
 800fe4e:	f3bf 8f6f 	isb	sy
 800fe52:	f3bf 8f4f 	dsb	sy
 800fe56:	61fb      	str	r3, [r7, #28]
 800fe58:	e7fe      	b.n	800fe58 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fe5a:	f7ff fc57 	bl	800f70c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fe5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fe62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fe66:	429a      	cmp	r2, r3
 800fe68:	d302      	bcc.n	800fe70 <xQueueGenericSend+0xcc>
 800fe6a:	683b      	ldr	r3, [r7, #0]
 800fe6c:	2b02      	cmp	r3, #2
 800fe6e:	d129      	bne.n	800fec4 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fe70:	683a      	ldr	r2, [r7, #0]
 800fe72:	68b9      	ldr	r1, [r7, #8]
 800fe74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fe76:	f000 fc48 	bl	801070a <prvCopyDataToQueue>
 800fe7a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fe7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d010      	beq.n	800fea6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fe84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe86:	3324      	adds	r3, #36	; 0x24
 800fe88:	4618      	mov	r0, r3
 800fe8a:	f001 fabd 	bl	8011408 <xTaskRemoveFromEventList>
 800fe8e:	4603      	mov	r3, r0
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d013      	beq.n	800febc <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800fe94:	4b3f      	ldr	r3, [pc, #252]	; (800ff94 <xQueueGenericSend+0x1f0>)
 800fe96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe9a:	601a      	str	r2, [r3, #0]
 800fe9c:	f3bf 8f4f 	dsb	sy
 800fea0:	f3bf 8f6f 	isb	sy
 800fea4:	e00a      	b.n	800febc <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800fea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d007      	beq.n	800febc <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800feac:	4b39      	ldr	r3, [pc, #228]	; (800ff94 <xQueueGenericSend+0x1f0>)
 800feae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800feb2:	601a      	str	r2, [r3, #0]
 800feb4:	f3bf 8f4f 	dsb	sy
 800feb8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800febc:	f7ff fc54 	bl	800f768 <vPortExitCritical>
				return pdPASS;
 800fec0:	2301      	movs	r3, #1
 800fec2:	e063      	b.n	800ff8c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d103      	bne.n	800fed2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800feca:	f7ff fc4d 	bl	800f768 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800fece:	2300      	movs	r3, #0
 800fed0:	e05c      	b.n	800ff8c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d106      	bne.n	800fee6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fed8:	f107 0314 	add.w	r3, r7, #20
 800fedc:	4618      	mov	r0, r3
 800fede:	f001 faf7 	bl	80114d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fee2:	2301      	movs	r3, #1
 800fee4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fee6:	f7ff fc3f 	bl	800f768 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800feea:	f000 ffd9 	bl	8010ea0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800feee:	f7ff fc0d 	bl	800f70c <vPortEnterCritical>
 800fef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fef4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fef8:	b25b      	sxtb	r3, r3
 800fefa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fefe:	d103      	bne.n	800ff08 <xQueueGenericSend+0x164>
 800ff00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff02:	2200      	movs	r2, #0
 800ff04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ff08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ff0e:	b25b      	sxtb	r3, r3
 800ff10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff14:	d103      	bne.n	800ff1e <xQueueGenericSend+0x17a>
 800ff16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff18:	2200      	movs	r2, #0
 800ff1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ff1e:	f7ff fc23 	bl	800f768 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ff22:	1d3a      	adds	r2, r7, #4
 800ff24:	f107 0314 	add.w	r3, r7, #20
 800ff28:	4611      	mov	r1, r2
 800ff2a:	4618      	mov	r0, r3
 800ff2c:	f001 fae6 	bl	80114fc <xTaskCheckForTimeOut>
 800ff30:	4603      	mov	r3, r0
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d124      	bne.n	800ff80 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ff36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ff38:	f000 fcdf 	bl	80108fa <prvIsQueueFull>
 800ff3c:	4603      	mov	r3, r0
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d018      	beq.n	800ff74 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ff42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff44:	3310      	adds	r3, #16
 800ff46:	687a      	ldr	r2, [r7, #4]
 800ff48:	4611      	mov	r1, r2
 800ff4a:	4618      	mov	r0, r3
 800ff4c:	f001 fa0e 	bl	801136c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ff50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ff52:	f000 fc6a 	bl	801082a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ff56:	f000 ffe9 	bl	8010f2c <xTaskResumeAll>
 800ff5a:	4603      	mov	r3, r0
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	f47f af7c 	bne.w	800fe5a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800ff62:	4b0c      	ldr	r3, [pc, #48]	; (800ff94 <xQueueGenericSend+0x1f0>)
 800ff64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ff68:	601a      	str	r2, [r3, #0]
 800ff6a:	f3bf 8f4f 	dsb	sy
 800ff6e:	f3bf 8f6f 	isb	sy
 800ff72:	e772      	b.n	800fe5a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ff74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ff76:	f000 fc58 	bl	801082a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ff7a:	f000 ffd7 	bl	8010f2c <xTaskResumeAll>
 800ff7e:	e76c      	b.n	800fe5a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ff80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ff82:	f000 fc52 	bl	801082a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ff86:	f000 ffd1 	bl	8010f2c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ff8a:	2300      	movs	r3, #0
		}
	}
}
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	3738      	adds	r7, #56	; 0x38
 800ff90:	46bd      	mov	sp, r7
 800ff92:	bd80      	pop	{r7, pc}
 800ff94:	e000ed04 	.word	0xe000ed04

0800ff98 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ff98:	b580      	push	{r7, lr}
 800ff9a:	b08e      	sub	sp, #56	; 0x38
 800ff9c:	af00      	add	r7, sp, #0
 800ff9e:	60f8      	str	r0, [r7, #12]
 800ffa0:	60b9      	str	r1, [r7, #8]
 800ffa2:	607a      	str	r2, [r7, #4]
 800ffa4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ffaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d109      	bne.n	800ffc4 <xQueueGenericSendFromISR+0x2c>
 800ffb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffb4:	f383 8811 	msr	BASEPRI, r3
 800ffb8:	f3bf 8f6f 	isb	sy
 800ffbc:	f3bf 8f4f 	dsb	sy
 800ffc0:	627b      	str	r3, [r7, #36]	; 0x24
 800ffc2:	e7fe      	b.n	800ffc2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ffc4:	68bb      	ldr	r3, [r7, #8]
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d103      	bne.n	800ffd2 <xQueueGenericSendFromISR+0x3a>
 800ffca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d101      	bne.n	800ffd6 <xQueueGenericSendFromISR+0x3e>
 800ffd2:	2301      	movs	r3, #1
 800ffd4:	e000      	b.n	800ffd8 <xQueueGenericSendFromISR+0x40>
 800ffd6:	2300      	movs	r3, #0
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d109      	bne.n	800fff0 <xQueueGenericSendFromISR+0x58>
 800ffdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffe0:	f383 8811 	msr	BASEPRI, r3
 800ffe4:	f3bf 8f6f 	isb	sy
 800ffe8:	f3bf 8f4f 	dsb	sy
 800ffec:	623b      	str	r3, [r7, #32]
 800ffee:	e7fe      	b.n	800ffee <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fff0:	683b      	ldr	r3, [r7, #0]
 800fff2:	2b02      	cmp	r3, #2
 800fff4:	d103      	bne.n	800fffe <xQueueGenericSendFromISR+0x66>
 800fff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fffa:	2b01      	cmp	r3, #1
 800fffc:	d101      	bne.n	8010002 <xQueueGenericSendFromISR+0x6a>
 800fffe:	2301      	movs	r3, #1
 8010000:	e000      	b.n	8010004 <xQueueGenericSendFromISR+0x6c>
 8010002:	2300      	movs	r3, #0
 8010004:	2b00      	cmp	r3, #0
 8010006:	d109      	bne.n	801001c <xQueueGenericSendFromISR+0x84>
 8010008:	f04f 0350 	mov.w	r3, #80	; 0x50
 801000c:	f383 8811 	msr	BASEPRI, r3
 8010010:	f3bf 8f6f 	isb	sy
 8010014:	f3bf 8f4f 	dsb	sy
 8010018:	61fb      	str	r3, [r7, #28]
 801001a:	e7fe      	b.n	801001a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801001c:	f7ff fc2e 	bl	800f87c <vPortValidateInterruptPriority>
	__asm volatile
 8010020:	f3ef 8211 	mrs	r2, BASEPRI
 8010024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010028:	f383 8811 	msr	BASEPRI, r3
 801002c:	f3bf 8f6f 	isb	sy
 8010030:	f3bf 8f4f 	dsb	sy
 8010034:	61ba      	str	r2, [r7, #24]
 8010036:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010038:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801003a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801003c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801003e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010044:	429a      	cmp	r2, r3
 8010046:	d302      	bcc.n	801004e <xQueueGenericSendFromISR+0xb6>
 8010048:	683b      	ldr	r3, [r7, #0]
 801004a:	2b02      	cmp	r3, #2
 801004c:	d12c      	bne.n	80100a8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801004e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010050:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010054:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010058:	683a      	ldr	r2, [r7, #0]
 801005a:	68b9      	ldr	r1, [r7, #8]
 801005c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801005e:	f000 fb54 	bl	801070a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010062:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8010066:	f1b3 3fff 	cmp.w	r3, #4294967295
 801006a:	d112      	bne.n	8010092 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801006c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801006e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010070:	2b00      	cmp	r3, #0
 8010072:	d016      	beq.n	80100a2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010076:	3324      	adds	r3, #36	; 0x24
 8010078:	4618      	mov	r0, r3
 801007a:	f001 f9c5 	bl	8011408 <xTaskRemoveFromEventList>
 801007e:	4603      	mov	r3, r0
 8010080:	2b00      	cmp	r3, #0
 8010082:	d00e      	beq.n	80100a2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	2b00      	cmp	r3, #0
 8010088:	d00b      	beq.n	80100a2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	2201      	movs	r2, #1
 801008e:	601a      	str	r2, [r3, #0]
 8010090:	e007      	b.n	80100a2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010092:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010096:	3301      	adds	r3, #1
 8010098:	b2db      	uxtb	r3, r3
 801009a:	b25a      	sxtb	r2, r3
 801009c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801009e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80100a2:	2301      	movs	r3, #1
 80100a4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80100a6:	e001      	b.n	80100ac <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80100a8:	2300      	movs	r3, #0
 80100aa:	637b      	str	r3, [r7, #52]	; 0x34
 80100ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100ae:	613b      	str	r3, [r7, #16]
	__asm volatile
 80100b0:	693b      	ldr	r3, [r7, #16]
 80100b2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80100b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80100b8:	4618      	mov	r0, r3
 80100ba:	3738      	adds	r7, #56	; 0x38
 80100bc:	46bd      	mov	sp, r7
 80100be:	bd80      	pop	{r7, pc}

080100c0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80100c0:	b580      	push	{r7, lr}
 80100c2:	b08e      	sub	sp, #56	; 0x38
 80100c4:	af00      	add	r7, sp, #0
 80100c6:	6078      	str	r0, [r7, #4]
 80100c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80100ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d109      	bne.n	80100e8 <xQueueGiveFromISR+0x28>
	__asm volatile
 80100d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100d8:	f383 8811 	msr	BASEPRI, r3
 80100dc:	f3bf 8f6f 	isb	sy
 80100e0:	f3bf 8f4f 	dsb	sy
 80100e4:	623b      	str	r3, [r7, #32]
 80100e6:	e7fe      	b.n	80100e6 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80100e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d009      	beq.n	8010104 <xQueueGiveFromISR+0x44>
 80100f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100f4:	f383 8811 	msr	BASEPRI, r3
 80100f8:	f3bf 8f6f 	isb	sy
 80100fc:	f3bf 8f4f 	dsb	sy
 8010100:	61fb      	str	r3, [r7, #28]
 8010102:	e7fe      	b.n	8010102 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8010104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	2b00      	cmp	r3, #0
 801010a:	d103      	bne.n	8010114 <xQueueGiveFromISR+0x54>
 801010c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801010e:	685b      	ldr	r3, [r3, #4]
 8010110:	2b00      	cmp	r3, #0
 8010112:	d101      	bne.n	8010118 <xQueueGiveFromISR+0x58>
 8010114:	2301      	movs	r3, #1
 8010116:	e000      	b.n	801011a <xQueueGiveFromISR+0x5a>
 8010118:	2300      	movs	r3, #0
 801011a:	2b00      	cmp	r3, #0
 801011c:	d109      	bne.n	8010132 <xQueueGiveFromISR+0x72>
 801011e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010122:	f383 8811 	msr	BASEPRI, r3
 8010126:	f3bf 8f6f 	isb	sy
 801012a:	f3bf 8f4f 	dsb	sy
 801012e:	61bb      	str	r3, [r7, #24]
 8010130:	e7fe      	b.n	8010130 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010132:	f7ff fba3 	bl	800f87c <vPortValidateInterruptPriority>
	__asm volatile
 8010136:	f3ef 8211 	mrs	r2, BASEPRI
 801013a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801013e:	f383 8811 	msr	BASEPRI, r3
 8010142:	f3bf 8f6f 	isb	sy
 8010146:	f3bf 8f4f 	dsb	sy
 801014a:	617a      	str	r2, [r7, #20]
 801014c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801014e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010150:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010156:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801015a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801015c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801015e:	429a      	cmp	r2, r3
 8010160:	d22b      	bcs.n	80101ba <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010164:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010168:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801016c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801016e:	1c5a      	adds	r2, r3, #1
 8010170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010172:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010174:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010178:	f1b3 3fff 	cmp.w	r3, #4294967295
 801017c:	d112      	bne.n	80101a4 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801017e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010182:	2b00      	cmp	r3, #0
 8010184:	d016      	beq.n	80101b4 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010188:	3324      	adds	r3, #36	; 0x24
 801018a:	4618      	mov	r0, r3
 801018c:	f001 f93c 	bl	8011408 <xTaskRemoveFromEventList>
 8010190:	4603      	mov	r3, r0
 8010192:	2b00      	cmp	r3, #0
 8010194:	d00e      	beq.n	80101b4 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010196:	683b      	ldr	r3, [r7, #0]
 8010198:	2b00      	cmp	r3, #0
 801019a:	d00b      	beq.n	80101b4 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801019c:	683b      	ldr	r3, [r7, #0]
 801019e:	2201      	movs	r2, #1
 80101a0:	601a      	str	r2, [r3, #0]
 80101a2:	e007      	b.n	80101b4 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80101a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80101a8:	3301      	adds	r3, #1
 80101aa:	b2db      	uxtb	r3, r3
 80101ac:	b25a      	sxtb	r2, r3
 80101ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80101b4:	2301      	movs	r3, #1
 80101b6:	637b      	str	r3, [r7, #52]	; 0x34
 80101b8:	e001      	b.n	80101be <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80101ba:	2300      	movs	r3, #0
 80101bc:	637b      	str	r3, [r7, #52]	; 0x34
 80101be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101c0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80101c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80101ca:	4618      	mov	r0, r3
 80101cc:	3738      	adds	r7, #56	; 0x38
 80101ce:	46bd      	mov	sp, r7
 80101d0:	bd80      	pop	{r7, pc}
	...

080101d4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80101d4:	b580      	push	{r7, lr}
 80101d6:	b08c      	sub	sp, #48	; 0x30
 80101d8:	af00      	add	r7, sp, #0
 80101da:	60f8      	str	r0, [r7, #12]
 80101dc:	60b9      	str	r1, [r7, #8]
 80101de:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80101e0:	2300      	movs	r3, #0
 80101e2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80101e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d109      	bne.n	8010202 <xQueueReceive+0x2e>
	__asm volatile
 80101ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101f2:	f383 8811 	msr	BASEPRI, r3
 80101f6:	f3bf 8f6f 	isb	sy
 80101fa:	f3bf 8f4f 	dsb	sy
 80101fe:	623b      	str	r3, [r7, #32]
 8010200:	e7fe      	b.n	8010200 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010202:	68bb      	ldr	r3, [r7, #8]
 8010204:	2b00      	cmp	r3, #0
 8010206:	d103      	bne.n	8010210 <xQueueReceive+0x3c>
 8010208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801020a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801020c:	2b00      	cmp	r3, #0
 801020e:	d101      	bne.n	8010214 <xQueueReceive+0x40>
 8010210:	2301      	movs	r3, #1
 8010212:	e000      	b.n	8010216 <xQueueReceive+0x42>
 8010214:	2300      	movs	r3, #0
 8010216:	2b00      	cmp	r3, #0
 8010218:	d109      	bne.n	801022e <xQueueReceive+0x5a>
 801021a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801021e:	f383 8811 	msr	BASEPRI, r3
 8010222:	f3bf 8f6f 	isb	sy
 8010226:	f3bf 8f4f 	dsb	sy
 801022a:	61fb      	str	r3, [r7, #28]
 801022c:	e7fe      	b.n	801022c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801022e:	f001 fb0d 	bl	801184c <xTaskGetSchedulerState>
 8010232:	4603      	mov	r3, r0
 8010234:	2b00      	cmp	r3, #0
 8010236:	d102      	bne.n	801023e <xQueueReceive+0x6a>
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	2b00      	cmp	r3, #0
 801023c:	d101      	bne.n	8010242 <xQueueReceive+0x6e>
 801023e:	2301      	movs	r3, #1
 8010240:	e000      	b.n	8010244 <xQueueReceive+0x70>
 8010242:	2300      	movs	r3, #0
 8010244:	2b00      	cmp	r3, #0
 8010246:	d109      	bne.n	801025c <xQueueReceive+0x88>
 8010248:	f04f 0350 	mov.w	r3, #80	; 0x50
 801024c:	f383 8811 	msr	BASEPRI, r3
 8010250:	f3bf 8f6f 	isb	sy
 8010254:	f3bf 8f4f 	dsb	sy
 8010258:	61bb      	str	r3, [r7, #24]
 801025a:	e7fe      	b.n	801025a <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 801025c:	f7ff fa56 	bl	800f70c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010264:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010268:	2b00      	cmp	r3, #0
 801026a:	d01f      	beq.n	80102ac <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801026c:	68b9      	ldr	r1, [r7, #8]
 801026e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010270:	f000 fab5 	bl	80107de <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010276:	1e5a      	subs	r2, r3, #1
 8010278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801027a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801027c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801027e:	691b      	ldr	r3, [r3, #16]
 8010280:	2b00      	cmp	r3, #0
 8010282:	d00f      	beq.n	80102a4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010286:	3310      	adds	r3, #16
 8010288:	4618      	mov	r0, r3
 801028a:	f001 f8bd 	bl	8011408 <xTaskRemoveFromEventList>
 801028e:	4603      	mov	r3, r0
 8010290:	2b00      	cmp	r3, #0
 8010292:	d007      	beq.n	80102a4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010294:	4b3c      	ldr	r3, [pc, #240]	; (8010388 <xQueueReceive+0x1b4>)
 8010296:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801029a:	601a      	str	r2, [r3, #0]
 801029c:	f3bf 8f4f 	dsb	sy
 80102a0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80102a4:	f7ff fa60 	bl	800f768 <vPortExitCritical>
				return pdPASS;
 80102a8:	2301      	movs	r3, #1
 80102aa:	e069      	b.n	8010380 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d103      	bne.n	80102ba <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80102b2:	f7ff fa59 	bl	800f768 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80102b6:	2300      	movs	r3, #0
 80102b8:	e062      	b.n	8010380 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80102ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d106      	bne.n	80102ce <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80102c0:	f107 0310 	add.w	r3, r7, #16
 80102c4:	4618      	mov	r0, r3
 80102c6:	f001 f903 	bl	80114d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80102ca:	2301      	movs	r3, #1
 80102cc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80102ce:	f7ff fa4b 	bl	800f768 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80102d2:	f000 fde5 	bl	8010ea0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80102d6:	f7ff fa19 	bl	800f70c <vPortEnterCritical>
 80102da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80102e0:	b25b      	sxtb	r3, r3
 80102e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102e6:	d103      	bne.n	80102f0 <xQueueReceive+0x11c>
 80102e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102ea:	2200      	movs	r2, #0
 80102ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80102f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80102f6:	b25b      	sxtb	r3, r3
 80102f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102fc:	d103      	bne.n	8010306 <xQueueReceive+0x132>
 80102fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010300:	2200      	movs	r2, #0
 8010302:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010306:	f7ff fa2f 	bl	800f768 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801030a:	1d3a      	adds	r2, r7, #4
 801030c:	f107 0310 	add.w	r3, r7, #16
 8010310:	4611      	mov	r1, r2
 8010312:	4618      	mov	r0, r3
 8010314:	f001 f8f2 	bl	80114fc <xTaskCheckForTimeOut>
 8010318:	4603      	mov	r3, r0
 801031a:	2b00      	cmp	r3, #0
 801031c:	d123      	bne.n	8010366 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801031e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010320:	f000 fad5 	bl	80108ce <prvIsQueueEmpty>
 8010324:	4603      	mov	r3, r0
 8010326:	2b00      	cmp	r3, #0
 8010328:	d017      	beq.n	801035a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801032a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801032c:	3324      	adds	r3, #36	; 0x24
 801032e:	687a      	ldr	r2, [r7, #4]
 8010330:	4611      	mov	r1, r2
 8010332:	4618      	mov	r0, r3
 8010334:	f001 f81a 	bl	801136c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010338:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801033a:	f000 fa76 	bl	801082a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801033e:	f000 fdf5 	bl	8010f2c <xTaskResumeAll>
 8010342:	4603      	mov	r3, r0
 8010344:	2b00      	cmp	r3, #0
 8010346:	d189      	bne.n	801025c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8010348:	4b0f      	ldr	r3, [pc, #60]	; (8010388 <xQueueReceive+0x1b4>)
 801034a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801034e:	601a      	str	r2, [r3, #0]
 8010350:	f3bf 8f4f 	dsb	sy
 8010354:	f3bf 8f6f 	isb	sy
 8010358:	e780      	b.n	801025c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801035a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801035c:	f000 fa65 	bl	801082a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010360:	f000 fde4 	bl	8010f2c <xTaskResumeAll>
 8010364:	e77a      	b.n	801025c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010366:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010368:	f000 fa5f 	bl	801082a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801036c:	f000 fdde 	bl	8010f2c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010370:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010372:	f000 faac 	bl	80108ce <prvIsQueueEmpty>
 8010376:	4603      	mov	r3, r0
 8010378:	2b00      	cmp	r3, #0
 801037a:	f43f af6f 	beq.w	801025c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801037e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8010380:	4618      	mov	r0, r3
 8010382:	3730      	adds	r7, #48	; 0x30
 8010384:	46bd      	mov	sp, r7
 8010386:	bd80      	pop	{r7, pc}
 8010388:	e000ed04 	.word	0xe000ed04

0801038c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 801038c:	b580      	push	{r7, lr}
 801038e:	b08e      	sub	sp, #56	; 0x38
 8010390:	af00      	add	r7, sp, #0
 8010392:	6078      	str	r0, [r7, #4]
 8010394:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8010396:	2300      	movs	r3, #0
 8010398:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801039e:	2300      	movs	r3, #0
 80103a0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80103a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d109      	bne.n	80103bc <xQueueSemaphoreTake+0x30>
 80103a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103ac:	f383 8811 	msr	BASEPRI, r3
 80103b0:	f3bf 8f6f 	isb	sy
 80103b4:	f3bf 8f4f 	dsb	sy
 80103b8:	623b      	str	r3, [r7, #32]
 80103ba:	e7fe      	b.n	80103ba <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80103bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d009      	beq.n	80103d8 <xQueueSemaphoreTake+0x4c>
 80103c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103c8:	f383 8811 	msr	BASEPRI, r3
 80103cc:	f3bf 8f6f 	isb	sy
 80103d0:	f3bf 8f4f 	dsb	sy
 80103d4:	61fb      	str	r3, [r7, #28]
 80103d6:	e7fe      	b.n	80103d6 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80103d8:	f001 fa38 	bl	801184c <xTaskGetSchedulerState>
 80103dc:	4603      	mov	r3, r0
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d102      	bne.n	80103e8 <xQueueSemaphoreTake+0x5c>
 80103e2:	683b      	ldr	r3, [r7, #0]
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d101      	bne.n	80103ec <xQueueSemaphoreTake+0x60>
 80103e8:	2301      	movs	r3, #1
 80103ea:	e000      	b.n	80103ee <xQueueSemaphoreTake+0x62>
 80103ec:	2300      	movs	r3, #0
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d109      	bne.n	8010406 <xQueueSemaphoreTake+0x7a>
 80103f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103f6:	f383 8811 	msr	BASEPRI, r3
 80103fa:	f3bf 8f6f 	isb	sy
 80103fe:	f3bf 8f4f 	dsb	sy
 8010402:	61bb      	str	r3, [r7, #24]
 8010404:	e7fe      	b.n	8010404 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8010406:	f7ff f981 	bl	800f70c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801040a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801040c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801040e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8010410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010412:	2b00      	cmp	r3, #0
 8010414:	d024      	beq.n	8010460 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010418:	1e5a      	subs	r2, r3, #1
 801041a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801041c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801041e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	2b00      	cmp	r3, #0
 8010424:	d104      	bne.n	8010430 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8010426:	f001 fb8d 	bl	8011b44 <pvTaskIncrementMutexHeldCount>
 801042a:	4602      	mov	r2, r0
 801042c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801042e:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010432:	691b      	ldr	r3, [r3, #16]
 8010434:	2b00      	cmp	r3, #0
 8010436:	d00f      	beq.n	8010458 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801043a:	3310      	adds	r3, #16
 801043c:	4618      	mov	r0, r3
 801043e:	f000 ffe3 	bl	8011408 <xTaskRemoveFromEventList>
 8010442:	4603      	mov	r3, r0
 8010444:	2b00      	cmp	r3, #0
 8010446:	d007      	beq.n	8010458 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010448:	4b53      	ldr	r3, [pc, #332]	; (8010598 <xQueueSemaphoreTake+0x20c>)
 801044a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801044e:	601a      	str	r2, [r3, #0]
 8010450:	f3bf 8f4f 	dsb	sy
 8010454:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010458:	f7ff f986 	bl	800f768 <vPortExitCritical>
				return pdPASS;
 801045c:	2301      	movs	r3, #1
 801045e:	e096      	b.n	801058e <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010460:	683b      	ldr	r3, [r7, #0]
 8010462:	2b00      	cmp	r3, #0
 8010464:	d110      	bne.n	8010488 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8010466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010468:	2b00      	cmp	r3, #0
 801046a:	d009      	beq.n	8010480 <xQueueSemaphoreTake+0xf4>
 801046c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010470:	f383 8811 	msr	BASEPRI, r3
 8010474:	f3bf 8f6f 	isb	sy
 8010478:	f3bf 8f4f 	dsb	sy
 801047c:	617b      	str	r3, [r7, #20]
 801047e:	e7fe      	b.n	801047e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8010480:	f7ff f972 	bl	800f768 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010484:	2300      	movs	r3, #0
 8010486:	e082      	b.n	801058e <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801048a:	2b00      	cmp	r3, #0
 801048c:	d106      	bne.n	801049c <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801048e:	f107 030c 	add.w	r3, r7, #12
 8010492:	4618      	mov	r0, r3
 8010494:	f001 f81c 	bl	80114d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010498:	2301      	movs	r3, #1
 801049a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801049c:	f7ff f964 	bl	800f768 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80104a0:	f000 fcfe 	bl	8010ea0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80104a4:	f7ff f932 	bl	800f70c <vPortEnterCritical>
 80104a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80104ae:	b25b      	sxtb	r3, r3
 80104b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104b4:	d103      	bne.n	80104be <xQueueSemaphoreTake+0x132>
 80104b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104b8:	2200      	movs	r2, #0
 80104ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80104be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80104c4:	b25b      	sxtb	r3, r3
 80104c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104ca:	d103      	bne.n	80104d4 <xQueueSemaphoreTake+0x148>
 80104cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104ce:	2200      	movs	r2, #0
 80104d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80104d4:	f7ff f948 	bl	800f768 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80104d8:	463a      	mov	r2, r7
 80104da:	f107 030c 	add.w	r3, r7, #12
 80104de:	4611      	mov	r1, r2
 80104e0:	4618      	mov	r0, r3
 80104e2:	f001 f80b 	bl	80114fc <xTaskCheckForTimeOut>
 80104e6:	4603      	mov	r3, r0
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d132      	bne.n	8010552 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80104ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80104ee:	f000 f9ee 	bl	80108ce <prvIsQueueEmpty>
 80104f2:	4603      	mov	r3, r0
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d026      	beq.n	8010546 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80104f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d109      	bne.n	8010514 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8010500:	f7ff f904 	bl	800f70c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8010504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010506:	685b      	ldr	r3, [r3, #4]
 8010508:	4618      	mov	r0, r3
 801050a:	f001 f9bd 	bl	8011888 <xTaskPriorityInherit>
 801050e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8010510:	f7ff f92a 	bl	800f768 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010516:	3324      	adds	r3, #36	; 0x24
 8010518:	683a      	ldr	r2, [r7, #0]
 801051a:	4611      	mov	r1, r2
 801051c:	4618      	mov	r0, r3
 801051e:	f000 ff25 	bl	801136c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010522:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010524:	f000 f981 	bl	801082a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010528:	f000 fd00 	bl	8010f2c <xTaskResumeAll>
 801052c:	4603      	mov	r3, r0
 801052e:	2b00      	cmp	r3, #0
 8010530:	f47f af69 	bne.w	8010406 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8010534:	4b18      	ldr	r3, [pc, #96]	; (8010598 <xQueueSemaphoreTake+0x20c>)
 8010536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801053a:	601a      	str	r2, [r3, #0]
 801053c:	f3bf 8f4f 	dsb	sy
 8010540:	f3bf 8f6f 	isb	sy
 8010544:	e75f      	b.n	8010406 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8010546:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010548:	f000 f96f 	bl	801082a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801054c:	f000 fcee 	bl	8010f2c <xTaskResumeAll>
 8010550:	e759      	b.n	8010406 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8010552:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010554:	f000 f969 	bl	801082a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010558:	f000 fce8 	bl	8010f2c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801055c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801055e:	f000 f9b6 	bl	80108ce <prvIsQueueEmpty>
 8010562:	4603      	mov	r3, r0
 8010564:	2b00      	cmp	r3, #0
 8010566:	f43f af4e 	beq.w	8010406 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801056a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801056c:	2b00      	cmp	r3, #0
 801056e:	d00d      	beq.n	801058c <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8010570:	f7ff f8cc 	bl	800f70c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8010574:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010576:	f000 f8b0 	bl	80106da <prvGetDisinheritPriorityAfterTimeout>
 801057a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 801057c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801057e:	685b      	ldr	r3, [r3, #4]
 8010580:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010582:	4618      	mov	r0, r3
 8010584:	f001 fa5a 	bl	8011a3c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010588:	f7ff f8ee 	bl	800f768 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801058c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 801058e:	4618      	mov	r0, r3
 8010590:	3738      	adds	r7, #56	; 0x38
 8010592:	46bd      	mov	sp, r7
 8010594:	bd80      	pop	{r7, pc}
 8010596:	bf00      	nop
 8010598:	e000ed04 	.word	0xe000ed04

0801059c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801059c:	b580      	push	{r7, lr}
 801059e:	b08e      	sub	sp, #56	; 0x38
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	60f8      	str	r0, [r7, #12]
 80105a4:	60b9      	str	r1, [r7, #8]
 80105a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80105ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d109      	bne.n	80105c6 <xQueueReceiveFromISR+0x2a>
 80105b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105b6:	f383 8811 	msr	BASEPRI, r3
 80105ba:	f3bf 8f6f 	isb	sy
 80105be:	f3bf 8f4f 	dsb	sy
 80105c2:	623b      	str	r3, [r7, #32]
 80105c4:	e7fe      	b.n	80105c4 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80105c6:	68bb      	ldr	r3, [r7, #8]
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d103      	bne.n	80105d4 <xQueueReceiveFromISR+0x38>
 80105cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d101      	bne.n	80105d8 <xQueueReceiveFromISR+0x3c>
 80105d4:	2301      	movs	r3, #1
 80105d6:	e000      	b.n	80105da <xQueueReceiveFromISR+0x3e>
 80105d8:	2300      	movs	r3, #0
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d109      	bne.n	80105f2 <xQueueReceiveFromISR+0x56>
 80105de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105e2:	f383 8811 	msr	BASEPRI, r3
 80105e6:	f3bf 8f6f 	isb	sy
 80105ea:	f3bf 8f4f 	dsb	sy
 80105ee:	61fb      	str	r3, [r7, #28]
 80105f0:	e7fe      	b.n	80105f0 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80105f2:	f7ff f943 	bl	800f87c <vPortValidateInterruptPriority>
	__asm volatile
 80105f6:	f3ef 8211 	mrs	r2, BASEPRI
 80105fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105fe:	f383 8811 	msr	BASEPRI, r3
 8010602:	f3bf 8f6f 	isb	sy
 8010606:	f3bf 8f4f 	dsb	sy
 801060a:	61ba      	str	r2, [r7, #24]
 801060c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801060e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010610:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010616:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801061a:	2b00      	cmp	r3, #0
 801061c:	d02f      	beq.n	801067e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801061e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010620:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010624:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010628:	68b9      	ldr	r1, [r7, #8]
 801062a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801062c:	f000 f8d7 	bl	80107de <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010632:	1e5a      	subs	r2, r3, #1
 8010634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010636:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010638:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801063c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010640:	d112      	bne.n	8010668 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010644:	691b      	ldr	r3, [r3, #16]
 8010646:	2b00      	cmp	r3, #0
 8010648:	d016      	beq.n	8010678 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801064a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801064c:	3310      	adds	r3, #16
 801064e:	4618      	mov	r0, r3
 8010650:	f000 feda 	bl	8011408 <xTaskRemoveFromEventList>
 8010654:	4603      	mov	r3, r0
 8010656:	2b00      	cmp	r3, #0
 8010658:	d00e      	beq.n	8010678 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	2b00      	cmp	r3, #0
 801065e:	d00b      	beq.n	8010678 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	2201      	movs	r2, #1
 8010664:	601a      	str	r2, [r3, #0]
 8010666:	e007      	b.n	8010678 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010668:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801066c:	3301      	adds	r3, #1
 801066e:	b2db      	uxtb	r3, r3
 8010670:	b25a      	sxtb	r2, r3
 8010672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010674:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8010678:	2301      	movs	r3, #1
 801067a:	637b      	str	r3, [r7, #52]	; 0x34
 801067c:	e001      	b.n	8010682 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 801067e:	2300      	movs	r3, #0
 8010680:	637b      	str	r3, [r7, #52]	; 0x34
 8010682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010684:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010686:	693b      	ldr	r3, [r7, #16]
 8010688:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801068c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801068e:	4618      	mov	r0, r3
 8010690:	3738      	adds	r7, #56	; 0x38
 8010692:	46bd      	mov	sp, r7
 8010694:	bd80      	pop	{r7, pc}

08010696 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8010696:	b580      	push	{r7, lr}
 8010698:	b084      	sub	sp, #16
 801069a:	af00      	add	r7, sp, #0
 801069c:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d109      	bne.n	80106bc <vQueueDelete+0x26>
	__asm volatile
 80106a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106ac:	f383 8811 	msr	BASEPRI, r3
 80106b0:	f3bf 8f6f 	isb	sy
 80106b4:	f3bf 8f4f 	dsb	sy
 80106b8:	60bb      	str	r3, [r7, #8]
 80106ba:	e7fe      	b.n	80106ba <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80106bc:	68f8      	ldr	r0, [r7, #12]
 80106be:	f000 f95d 	bl	801097c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d102      	bne.n	80106d2 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 80106cc:	68f8      	ldr	r0, [r7, #12]
 80106ce:	f7fe fd2f 	bl	800f130 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80106d2:	bf00      	nop
 80106d4:	3710      	adds	r7, #16
 80106d6:	46bd      	mov	sp, r7
 80106d8:	bd80      	pop	{r7, pc}

080106da <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80106da:	b480      	push	{r7}
 80106dc:	b085      	sub	sp, #20
 80106de:	af00      	add	r7, sp, #0
 80106e0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d006      	beq.n	80106f8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80106f4:	60fb      	str	r3, [r7, #12]
 80106f6:	e001      	b.n	80106fc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80106f8:	2300      	movs	r3, #0
 80106fa:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80106fc:	68fb      	ldr	r3, [r7, #12]
	}
 80106fe:	4618      	mov	r0, r3
 8010700:	3714      	adds	r7, #20
 8010702:	46bd      	mov	sp, r7
 8010704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010708:	4770      	bx	lr

0801070a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801070a:	b580      	push	{r7, lr}
 801070c:	b086      	sub	sp, #24
 801070e:	af00      	add	r7, sp, #0
 8010710:	60f8      	str	r0, [r7, #12]
 8010712:	60b9      	str	r1, [r7, #8]
 8010714:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010716:	2300      	movs	r3, #0
 8010718:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801071e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010724:	2b00      	cmp	r3, #0
 8010726:	d10d      	bne.n	8010744 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	2b00      	cmp	r3, #0
 801072e:	d14d      	bne.n	80107cc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	685b      	ldr	r3, [r3, #4]
 8010734:	4618      	mov	r0, r3
 8010736:	f001 f915 	bl	8011964 <xTaskPriorityDisinherit>
 801073a:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	2200      	movs	r2, #0
 8010740:	605a      	str	r2, [r3, #4]
 8010742:	e043      	b.n	80107cc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	2b00      	cmp	r3, #0
 8010748:	d119      	bne.n	801077e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	6898      	ldr	r0, [r3, #8]
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010752:	461a      	mov	r2, r3
 8010754:	68b9      	ldr	r1, [r7, #8]
 8010756:	f005 fbb7 	bl	8015ec8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	689a      	ldr	r2, [r3, #8]
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010762:	441a      	add	r2, r3
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	689a      	ldr	r2, [r3, #8]
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	685b      	ldr	r3, [r3, #4]
 8010770:	429a      	cmp	r2, r3
 8010772:	d32b      	bcc.n	80107cc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	681a      	ldr	r2, [r3, #0]
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	609a      	str	r2, [r3, #8]
 801077c:	e026      	b.n	80107cc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	68d8      	ldr	r0, [r3, #12]
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010786:	461a      	mov	r2, r3
 8010788:	68b9      	ldr	r1, [r7, #8]
 801078a:	f005 fb9d 	bl	8015ec8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	68da      	ldr	r2, [r3, #12]
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010796:	425b      	negs	r3, r3
 8010798:	441a      	add	r2, r3
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	68da      	ldr	r2, [r3, #12]
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	429a      	cmp	r2, r3
 80107a8:	d207      	bcs.n	80107ba <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	685a      	ldr	r2, [r3, #4]
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107b2:	425b      	negs	r3, r3
 80107b4:	441a      	add	r2, r3
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	2b02      	cmp	r3, #2
 80107be:	d105      	bne.n	80107cc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80107c0:	693b      	ldr	r3, [r7, #16]
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d002      	beq.n	80107cc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80107c6:	693b      	ldr	r3, [r7, #16]
 80107c8:	3b01      	subs	r3, #1
 80107ca:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80107cc:	693b      	ldr	r3, [r7, #16]
 80107ce:	1c5a      	adds	r2, r3, #1
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80107d4:	697b      	ldr	r3, [r7, #20]
}
 80107d6:	4618      	mov	r0, r3
 80107d8:	3718      	adds	r7, #24
 80107da:	46bd      	mov	sp, r7
 80107dc:	bd80      	pop	{r7, pc}

080107de <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80107de:	b580      	push	{r7, lr}
 80107e0:	b082      	sub	sp, #8
 80107e2:	af00      	add	r7, sp, #0
 80107e4:	6078      	str	r0, [r7, #4]
 80107e6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d018      	beq.n	8010822 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	68da      	ldr	r2, [r3, #12]
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107f8:	441a      	add	r2, r3
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	68da      	ldr	r2, [r3, #12]
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	685b      	ldr	r3, [r3, #4]
 8010806:	429a      	cmp	r2, r3
 8010808:	d303      	bcc.n	8010812 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	681a      	ldr	r2, [r3, #0]
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	68d9      	ldr	r1, [r3, #12]
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801081a:	461a      	mov	r2, r3
 801081c:	6838      	ldr	r0, [r7, #0]
 801081e:	f005 fb53 	bl	8015ec8 <memcpy>
	}
}
 8010822:	bf00      	nop
 8010824:	3708      	adds	r7, #8
 8010826:	46bd      	mov	sp, r7
 8010828:	bd80      	pop	{r7, pc}

0801082a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801082a:	b580      	push	{r7, lr}
 801082c:	b084      	sub	sp, #16
 801082e:	af00      	add	r7, sp, #0
 8010830:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010832:	f7fe ff6b 	bl	800f70c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801083c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801083e:	e011      	b.n	8010864 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010844:	2b00      	cmp	r3, #0
 8010846:	d012      	beq.n	801086e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	3324      	adds	r3, #36	; 0x24
 801084c:	4618      	mov	r0, r3
 801084e:	f000 fddb 	bl	8011408 <xTaskRemoveFromEventList>
 8010852:	4603      	mov	r3, r0
 8010854:	2b00      	cmp	r3, #0
 8010856:	d001      	beq.n	801085c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010858:	f000 feb0 	bl	80115bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801085c:	7bfb      	ldrb	r3, [r7, #15]
 801085e:	3b01      	subs	r3, #1
 8010860:	b2db      	uxtb	r3, r3
 8010862:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010864:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010868:	2b00      	cmp	r3, #0
 801086a:	dce9      	bgt.n	8010840 <prvUnlockQueue+0x16>
 801086c:	e000      	b.n	8010870 <prvUnlockQueue+0x46>
					break;
 801086e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	22ff      	movs	r2, #255	; 0xff
 8010874:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8010878:	f7fe ff76 	bl	800f768 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801087c:	f7fe ff46 	bl	800f70c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010886:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010888:	e011      	b.n	80108ae <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	691b      	ldr	r3, [r3, #16]
 801088e:	2b00      	cmp	r3, #0
 8010890:	d012      	beq.n	80108b8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	3310      	adds	r3, #16
 8010896:	4618      	mov	r0, r3
 8010898:	f000 fdb6 	bl	8011408 <xTaskRemoveFromEventList>
 801089c:	4603      	mov	r3, r0
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d001      	beq.n	80108a6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80108a2:	f000 fe8b 	bl	80115bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80108a6:	7bbb      	ldrb	r3, [r7, #14]
 80108a8:	3b01      	subs	r3, #1
 80108aa:	b2db      	uxtb	r3, r3
 80108ac:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80108ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	dce9      	bgt.n	801088a <prvUnlockQueue+0x60>
 80108b6:	e000      	b.n	80108ba <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80108b8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	22ff      	movs	r2, #255	; 0xff
 80108be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80108c2:	f7fe ff51 	bl	800f768 <vPortExitCritical>
}
 80108c6:	bf00      	nop
 80108c8:	3710      	adds	r7, #16
 80108ca:	46bd      	mov	sp, r7
 80108cc:	bd80      	pop	{r7, pc}

080108ce <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80108ce:	b580      	push	{r7, lr}
 80108d0:	b084      	sub	sp, #16
 80108d2:	af00      	add	r7, sp, #0
 80108d4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80108d6:	f7fe ff19 	bl	800f70c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d102      	bne.n	80108e8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80108e2:	2301      	movs	r3, #1
 80108e4:	60fb      	str	r3, [r7, #12]
 80108e6:	e001      	b.n	80108ec <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80108e8:	2300      	movs	r3, #0
 80108ea:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80108ec:	f7fe ff3c 	bl	800f768 <vPortExitCritical>

	return xReturn;
 80108f0:	68fb      	ldr	r3, [r7, #12]
}
 80108f2:	4618      	mov	r0, r3
 80108f4:	3710      	adds	r7, #16
 80108f6:	46bd      	mov	sp, r7
 80108f8:	bd80      	pop	{r7, pc}

080108fa <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80108fa:	b580      	push	{r7, lr}
 80108fc:	b084      	sub	sp, #16
 80108fe:	af00      	add	r7, sp, #0
 8010900:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010902:	f7fe ff03 	bl	800f70c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801090e:	429a      	cmp	r2, r3
 8010910:	d102      	bne.n	8010918 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010912:	2301      	movs	r3, #1
 8010914:	60fb      	str	r3, [r7, #12]
 8010916:	e001      	b.n	801091c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010918:	2300      	movs	r3, #0
 801091a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801091c:	f7fe ff24 	bl	800f768 <vPortExitCritical>

	return xReturn;
 8010920:	68fb      	ldr	r3, [r7, #12]
}
 8010922:	4618      	mov	r0, r3
 8010924:	3710      	adds	r7, #16
 8010926:	46bd      	mov	sp, r7
 8010928:	bd80      	pop	{r7, pc}
	...

0801092c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801092c:	b480      	push	{r7}
 801092e:	b085      	sub	sp, #20
 8010930:	af00      	add	r7, sp, #0
 8010932:	6078      	str	r0, [r7, #4]
 8010934:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010936:	2300      	movs	r3, #0
 8010938:	60fb      	str	r3, [r7, #12]
 801093a:	e014      	b.n	8010966 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801093c:	4a0e      	ldr	r2, [pc, #56]	; (8010978 <vQueueAddToRegistry+0x4c>)
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8010944:	2b00      	cmp	r3, #0
 8010946:	d10b      	bne.n	8010960 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8010948:	490b      	ldr	r1, [pc, #44]	; (8010978 <vQueueAddToRegistry+0x4c>)
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	683a      	ldr	r2, [r7, #0]
 801094e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8010952:	4a09      	ldr	r2, [pc, #36]	; (8010978 <vQueueAddToRegistry+0x4c>)
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	00db      	lsls	r3, r3, #3
 8010958:	4413      	add	r3, r2
 801095a:	687a      	ldr	r2, [r7, #4]
 801095c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801095e:	e005      	b.n	801096c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	3301      	adds	r3, #1
 8010964:	60fb      	str	r3, [r7, #12]
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	2b0b      	cmp	r3, #11
 801096a:	d9e7      	bls.n	801093c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801096c:	bf00      	nop
 801096e:	3714      	adds	r7, #20
 8010970:	46bd      	mov	sp, r7
 8010972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010976:	4770      	bx	lr
 8010978:	2002858c 	.word	0x2002858c

0801097c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 801097c:	b480      	push	{r7}
 801097e:	b085      	sub	sp, #20
 8010980:	af00      	add	r7, sp, #0
 8010982:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010984:	2300      	movs	r3, #0
 8010986:	60fb      	str	r3, [r7, #12]
 8010988:	e016      	b.n	80109b8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801098a:	4a10      	ldr	r2, [pc, #64]	; (80109cc <vQueueUnregisterQueue+0x50>)
 801098c:	68fb      	ldr	r3, [r7, #12]
 801098e:	00db      	lsls	r3, r3, #3
 8010990:	4413      	add	r3, r2
 8010992:	685b      	ldr	r3, [r3, #4]
 8010994:	687a      	ldr	r2, [r7, #4]
 8010996:	429a      	cmp	r2, r3
 8010998:	d10b      	bne.n	80109b2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801099a:	4a0c      	ldr	r2, [pc, #48]	; (80109cc <vQueueUnregisterQueue+0x50>)
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	2100      	movs	r1, #0
 80109a0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80109a4:	4a09      	ldr	r2, [pc, #36]	; (80109cc <vQueueUnregisterQueue+0x50>)
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	00db      	lsls	r3, r3, #3
 80109aa:	4413      	add	r3, r2
 80109ac:	2200      	movs	r2, #0
 80109ae:	605a      	str	r2, [r3, #4]
				break;
 80109b0:	e005      	b.n	80109be <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	3301      	adds	r3, #1
 80109b6:	60fb      	str	r3, [r7, #12]
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	2b0b      	cmp	r3, #11
 80109bc:	d9e5      	bls.n	801098a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80109be:	bf00      	nop
 80109c0:	3714      	adds	r7, #20
 80109c2:	46bd      	mov	sp, r7
 80109c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109c8:	4770      	bx	lr
 80109ca:	bf00      	nop
 80109cc:	2002858c 	.word	0x2002858c

080109d0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80109d0:	b580      	push	{r7, lr}
 80109d2:	b086      	sub	sp, #24
 80109d4:	af00      	add	r7, sp, #0
 80109d6:	60f8      	str	r0, [r7, #12]
 80109d8:	60b9      	str	r1, [r7, #8]
 80109da:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80109e0:	f7fe fe94 	bl	800f70c <vPortEnterCritical>
 80109e4:	697b      	ldr	r3, [r7, #20]
 80109e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80109ea:	b25b      	sxtb	r3, r3
 80109ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109f0:	d103      	bne.n	80109fa <vQueueWaitForMessageRestricted+0x2a>
 80109f2:	697b      	ldr	r3, [r7, #20]
 80109f4:	2200      	movs	r2, #0
 80109f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80109fa:	697b      	ldr	r3, [r7, #20]
 80109fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010a00:	b25b      	sxtb	r3, r3
 8010a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a06:	d103      	bne.n	8010a10 <vQueueWaitForMessageRestricted+0x40>
 8010a08:	697b      	ldr	r3, [r7, #20]
 8010a0a:	2200      	movs	r2, #0
 8010a0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010a10:	f7fe feaa 	bl	800f768 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8010a14:	697b      	ldr	r3, [r7, #20]
 8010a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d106      	bne.n	8010a2a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8010a1c:	697b      	ldr	r3, [r7, #20]
 8010a1e:	3324      	adds	r3, #36	; 0x24
 8010a20:	687a      	ldr	r2, [r7, #4]
 8010a22:	68b9      	ldr	r1, [r7, #8]
 8010a24:	4618      	mov	r0, r3
 8010a26:	f000 fcc5 	bl	80113b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8010a2a:	6978      	ldr	r0, [r7, #20]
 8010a2c:	f7ff fefd 	bl	801082a <prvUnlockQueue>
	}
 8010a30:	bf00      	nop
 8010a32:	3718      	adds	r7, #24
 8010a34:	46bd      	mov	sp, r7
 8010a36:	bd80      	pop	{r7, pc}

08010a38 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010a38:	b580      	push	{r7, lr}
 8010a3a:	b08e      	sub	sp, #56	; 0x38
 8010a3c:	af04      	add	r7, sp, #16
 8010a3e:	60f8      	str	r0, [r7, #12]
 8010a40:	60b9      	str	r1, [r7, #8]
 8010a42:	607a      	str	r2, [r7, #4]
 8010a44:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d109      	bne.n	8010a60 <xTaskCreateStatic+0x28>
 8010a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a50:	f383 8811 	msr	BASEPRI, r3
 8010a54:	f3bf 8f6f 	isb	sy
 8010a58:	f3bf 8f4f 	dsb	sy
 8010a5c:	623b      	str	r3, [r7, #32]
 8010a5e:	e7fe      	b.n	8010a5e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8010a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d109      	bne.n	8010a7a <xTaskCreateStatic+0x42>
 8010a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a6a:	f383 8811 	msr	BASEPRI, r3
 8010a6e:	f3bf 8f6f 	isb	sy
 8010a72:	f3bf 8f4f 	dsb	sy
 8010a76:	61fb      	str	r3, [r7, #28]
 8010a78:	e7fe      	b.n	8010a78 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010a7a:	2364      	movs	r3, #100	; 0x64
 8010a7c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010a7e:	693b      	ldr	r3, [r7, #16]
 8010a80:	2b64      	cmp	r3, #100	; 0x64
 8010a82:	d009      	beq.n	8010a98 <xTaskCreateStatic+0x60>
 8010a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a88:	f383 8811 	msr	BASEPRI, r3
 8010a8c:	f3bf 8f6f 	isb	sy
 8010a90:	f3bf 8f4f 	dsb	sy
 8010a94:	61bb      	str	r3, [r7, #24]
 8010a96:	e7fe      	b.n	8010a96 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d01e      	beq.n	8010adc <xTaskCreateStatic+0xa4>
 8010a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d01b      	beq.n	8010adc <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010aa6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aaa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010aac:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ab0:	2202      	movs	r2, #2
 8010ab2:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010ab6:	2300      	movs	r3, #0
 8010ab8:	9303      	str	r3, [sp, #12]
 8010aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010abc:	9302      	str	r3, [sp, #8]
 8010abe:	f107 0314 	add.w	r3, r7, #20
 8010ac2:	9301      	str	r3, [sp, #4]
 8010ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ac6:	9300      	str	r3, [sp, #0]
 8010ac8:	683b      	ldr	r3, [r7, #0]
 8010aca:	687a      	ldr	r2, [r7, #4]
 8010acc:	68b9      	ldr	r1, [r7, #8]
 8010ace:	68f8      	ldr	r0, [r7, #12]
 8010ad0:	f000 f850 	bl	8010b74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010ad4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010ad6:	f000 f8d9 	bl	8010c8c <prvAddNewTaskToReadyList>
 8010ada:	e001      	b.n	8010ae0 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8010adc:	2300      	movs	r3, #0
 8010ade:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010ae0:	697b      	ldr	r3, [r7, #20]
	}
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	3728      	adds	r7, #40	; 0x28
 8010ae6:	46bd      	mov	sp, r7
 8010ae8:	bd80      	pop	{r7, pc}

08010aea <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010aea:	b580      	push	{r7, lr}
 8010aec:	b08c      	sub	sp, #48	; 0x30
 8010aee:	af04      	add	r7, sp, #16
 8010af0:	60f8      	str	r0, [r7, #12]
 8010af2:	60b9      	str	r1, [r7, #8]
 8010af4:	603b      	str	r3, [r7, #0]
 8010af6:	4613      	mov	r3, r2
 8010af8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010afa:	88fb      	ldrh	r3, [r7, #6]
 8010afc:	009b      	lsls	r3, r3, #2
 8010afe:	4618      	mov	r0, r3
 8010b00:	f7fe fa50 	bl	800efa4 <pvPortMalloc>
 8010b04:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010b06:	697b      	ldr	r3, [r7, #20]
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d00e      	beq.n	8010b2a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8010b0c:	2064      	movs	r0, #100	; 0x64
 8010b0e:	f7fe fa49 	bl	800efa4 <pvPortMalloc>
 8010b12:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010b14:	69fb      	ldr	r3, [r7, #28]
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d003      	beq.n	8010b22 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010b1a:	69fb      	ldr	r3, [r7, #28]
 8010b1c:	697a      	ldr	r2, [r7, #20]
 8010b1e:	631a      	str	r2, [r3, #48]	; 0x30
 8010b20:	e005      	b.n	8010b2e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010b22:	6978      	ldr	r0, [r7, #20]
 8010b24:	f7fe fb04 	bl	800f130 <vPortFree>
 8010b28:	e001      	b.n	8010b2e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010b2a:	2300      	movs	r3, #0
 8010b2c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010b2e:	69fb      	ldr	r3, [r7, #28]
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d017      	beq.n	8010b64 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010b34:	69fb      	ldr	r3, [r7, #28]
 8010b36:	2200      	movs	r2, #0
 8010b38:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010b3c:	88fa      	ldrh	r2, [r7, #6]
 8010b3e:	2300      	movs	r3, #0
 8010b40:	9303      	str	r3, [sp, #12]
 8010b42:	69fb      	ldr	r3, [r7, #28]
 8010b44:	9302      	str	r3, [sp, #8]
 8010b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b48:	9301      	str	r3, [sp, #4]
 8010b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b4c:	9300      	str	r3, [sp, #0]
 8010b4e:	683b      	ldr	r3, [r7, #0]
 8010b50:	68b9      	ldr	r1, [r7, #8]
 8010b52:	68f8      	ldr	r0, [r7, #12]
 8010b54:	f000 f80e 	bl	8010b74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010b58:	69f8      	ldr	r0, [r7, #28]
 8010b5a:	f000 f897 	bl	8010c8c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010b5e:	2301      	movs	r3, #1
 8010b60:	61bb      	str	r3, [r7, #24]
 8010b62:	e002      	b.n	8010b6a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010b64:	f04f 33ff 	mov.w	r3, #4294967295
 8010b68:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010b6a:	69bb      	ldr	r3, [r7, #24]
	}
 8010b6c:	4618      	mov	r0, r3
 8010b6e:	3720      	adds	r7, #32
 8010b70:	46bd      	mov	sp, r7
 8010b72:	bd80      	pop	{r7, pc}

08010b74 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010b74:	b580      	push	{r7, lr}
 8010b76:	b088      	sub	sp, #32
 8010b78:	af00      	add	r7, sp, #0
 8010b7a:	60f8      	str	r0, [r7, #12]
 8010b7c:	60b9      	str	r1, [r7, #8]
 8010b7e:	607a      	str	r2, [r7, #4]
 8010b80:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b84:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	009b      	lsls	r3, r3, #2
 8010b8a:	461a      	mov	r2, r3
 8010b8c:	21a5      	movs	r1, #165	; 0xa5
 8010b8e:	f005 f9a6 	bl	8015ede <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8010b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010b9c:	3b01      	subs	r3, #1
 8010b9e:	009b      	lsls	r3, r3, #2
 8010ba0:	4413      	add	r3, r2
 8010ba2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8010ba4:	69bb      	ldr	r3, [r7, #24]
 8010ba6:	f023 0307 	bic.w	r3, r3, #7
 8010baa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010bac:	69bb      	ldr	r3, [r7, #24]
 8010bae:	f003 0307 	and.w	r3, r3, #7
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d009      	beq.n	8010bca <prvInitialiseNewTask+0x56>
 8010bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bba:	f383 8811 	msr	BASEPRI, r3
 8010bbe:	f3bf 8f6f 	isb	sy
 8010bc2:	f3bf 8f4f 	dsb	sy
 8010bc6:	617b      	str	r3, [r7, #20]
 8010bc8:	e7fe      	b.n	8010bc8 <prvInitialiseNewTask+0x54>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8010bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bcc:	69ba      	ldr	r2, [r7, #24]
 8010bce:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010bd0:	2300      	movs	r3, #0
 8010bd2:	61fb      	str	r3, [r7, #28]
 8010bd4:	e012      	b.n	8010bfc <prvInitialiseNewTask+0x88>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010bd6:	68ba      	ldr	r2, [r7, #8]
 8010bd8:	69fb      	ldr	r3, [r7, #28]
 8010bda:	4413      	add	r3, r2
 8010bdc:	7819      	ldrb	r1, [r3, #0]
 8010bde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010be0:	69fb      	ldr	r3, [r7, #28]
 8010be2:	4413      	add	r3, r2
 8010be4:	3334      	adds	r3, #52	; 0x34
 8010be6:	460a      	mov	r2, r1
 8010be8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8010bea:	68ba      	ldr	r2, [r7, #8]
 8010bec:	69fb      	ldr	r3, [r7, #28]
 8010bee:	4413      	add	r3, r2
 8010bf0:	781b      	ldrb	r3, [r3, #0]
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d006      	beq.n	8010c04 <prvInitialiseNewTask+0x90>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010bf6:	69fb      	ldr	r3, [r7, #28]
 8010bf8:	3301      	adds	r3, #1
 8010bfa:	61fb      	str	r3, [r7, #28]
 8010bfc:	69fb      	ldr	r3, [r7, #28]
 8010bfe:	2b0f      	cmp	r3, #15
 8010c00:	d9e9      	bls.n	8010bd6 <prvInitialiseNewTask+0x62>
 8010c02:	e000      	b.n	8010c06 <prvInitialiseNewTask+0x92>
		{
			break;
 8010c04:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c08:	2200      	movs	r2, #0
 8010c0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c10:	2b37      	cmp	r3, #55	; 0x37
 8010c12:	d901      	bls.n	8010c18 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010c14:	2337      	movs	r3, #55	; 0x37
 8010c16:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010c1c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010c22:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 8010c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c26:	2200      	movs	r2, #0
 8010c28:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c2c:	3304      	adds	r3, #4
 8010c2e:	4618      	mov	r0, r3
 8010c30:	f7fe fbb4 	bl	800f39c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c36:	3318      	adds	r3, #24
 8010c38:	4618      	mov	r0, r3
 8010c3a:	f7fe fbaf 	bl	800f39c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c42:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c46:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c4c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c52:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8010c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c56:	2200      	movs	r2, #0
 8010c58:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c5c:	2200      	movs	r2, #0
 8010c5e:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c62:	2200      	movs	r2, #0
 8010c64:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010c68:	683a      	ldr	r2, [r7, #0]
 8010c6a:	68f9      	ldr	r1, [r7, #12]
 8010c6c:	69b8      	ldr	r0, [r7, #24]
 8010c6e:	f7fe fc29 	bl	800f4c4 <pxPortInitialiseStack>
 8010c72:	4602      	mov	r2, r0
 8010c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c76:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8010c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d002      	beq.n	8010c84 <prvInitialiseNewTask+0x110>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c82:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010c84:	bf00      	nop
 8010c86:	3720      	adds	r7, #32
 8010c88:	46bd      	mov	sp, r7
 8010c8a:	bd80      	pop	{r7, pc}

08010c8c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010c8c:	b580      	push	{r7, lr}
 8010c8e:	b082      	sub	sp, #8
 8010c90:	af00      	add	r7, sp, #0
 8010c92:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010c94:	f7fe fd3a 	bl	800f70c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010c98:	4b2d      	ldr	r3, [pc, #180]	; (8010d50 <prvAddNewTaskToReadyList+0xc4>)
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	3301      	adds	r3, #1
 8010c9e:	4a2c      	ldr	r2, [pc, #176]	; (8010d50 <prvAddNewTaskToReadyList+0xc4>)
 8010ca0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010ca2:	4b2c      	ldr	r3, [pc, #176]	; (8010d54 <prvAddNewTaskToReadyList+0xc8>)
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d109      	bne.n	8010cbe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010caa:	4a2a      	ldr	r2, [pc, #168]	; (8010d54 <prvAddNewTaskToReadyList+0xc8>)
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010cb0:	4b27      	ldr	r3, [pc, #156]	; (8010d50 <prvAddNewTaskToReadyList+0xc4>)
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	2b01      	cmp	r3, #1
 8010cb6:	d110      	bne.n	8010cda <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010cb8:	f000 fcf8 	bl	80116ac <prvInitialiseTaskLists>
 8010cbc:	e00d      	b.n	8010cda <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010cbe:	4b26      	ldr	r3, [pc, #152]	; (8010d58 <prvAddNewTaskToReadyList+0xcc>)
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d109      	bne.n	8010cda <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010cc6:	4b23      	ldr	r3, [pc, #140]	; (8010d54 <prvAddNewTaskToReadyList+0xc8>)
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010cd0:	429a      	cmp	r2, r3
 8010cd2:	d802      	bhi.n	8010cda <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010cd4:	4a1f      	ldr	r2, [pc, #124]	; (8010d54 <prvAddNewTaskToReadyList+0xc8>)
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010cda:	4b20      	ldr	r3, [pc, #128]	; (8010d5c <prvAddNewTaskToReadyList+0xd0>)
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	3301      	adds	r3, #1
 8010ce0:	4a1e      	ldr	r2, [pc, #120]	; (8010d5c <prvAddNewTaskToReadyList+0xd0>)
 8010ce2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8010ce4:	4b1d      	ldr	r3, [pc, #116]	; (8010d5c <prvAddNewTaskToReadyList+0xd0>)
 8010ce6:	681a      	ldr	r2, [r3, #0]
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010cf0:	4b1b      	ldr	r3, [pc, #108]	; (8010d60 <prvAddNewTaskToReadyList+0xd4>)
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	429a      	cmp	r2, r3
 8010cf6:	d903      	bls.n	8010d00 <prvAddNewTaskToReadyList+0x74>
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010cfc:	4a18      	ldr	r2, [pc, #96]	; (8010d60 <prvAddNewTaskToReadyList+0xd4>)
 8010cfe:	6013      	str	r3, [r2, #0]
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d04:	4613      	mov	r3, r2
 8010d06:	009b      	lsls	r3, r3, #2
 8010d08:	4413      	add	r3, r2
 8010d0a:	009b      	lsls	r3, r3, #2
 8010d0c:	4a15      	ldr	r2, [pc, #84]	; (8010d64 <prvAddNewTaskToReadyList+0xd8>)
 8010d0e:	441a      	add	r2, r3
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	3304      	adds	r3, #4
 8010d14:	4619      	mov	r1, r3
 8010d16:	4610      	mov	r0, r2
 8010d18:	f7fe fb4d 	bl	800f3b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010d1c:	f7fe fd24 	bl	800f768 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010d20:	4b0d      	ldr	r3, [pc, #52]	; (8010d58 <prvAddNewTaskToReadyList+0xcc>)
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d00e      	beq.n	8010d46 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010d28:	4b0a      	ldr	r3, [pc, #40]	; (8010d54 <prvAddNewTaskToReadyList+0xc8>)
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d32:	429a      	cmp	r2, r3
 8010d34:	d207      	bcs.n	8010d46 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010d36:	4b0c      	ldr	r3, [pc, #48]	; (8010d68 <prvAddNewTaskToReadyList+0xdc>)
 8010d38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d3c:	601a      	str	r2, [r3, #0]
 8010d3e:	f3bf 8f4f 	dsb	sy
 8010d42:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010d46:	bf00      	nop
 8010d48:	3708      	adds	r7, #8
 8010d4a:	46bd      	mov	sp, r7
 8010d4c:	bd80      	pop	{r7, pc}
 8010d4e:	bf00      	nop
 8010d50:	200272c8 	.word	0x200272c8
 8010d54:	20026df4 	.word	0x20026df4
 8010d58:	200272d4 	.word	0x200272d4
 8010d5c:	200272e4 	.word	0x200272e4
 8010d60:	200272d0 	.word	0x200272d0
 8010d64:	20026df8 	.word	0x20026df8
 8010d68:	e000ed04 	.word	0xe000ed04

08010d6c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010d6c:	b580      	push	{r7, lr}
 8010d6e:	b084      	sub	sp, #16
 8010d70:	af00      	add	r7, sp, #0
 8010d72:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010d74:	2300      	movs	r3, #0
 8010d76:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d016      	beq.n	8010dac <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010d7e:	4b13      	ldr	r3, [pc, #76]	; (8010dcc <vTaskDelay+0x60>)
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d009      	beq.n	8010d9a <vTaskDelay+0x2e>
 8010d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d8a:	f383 8811 	msr	BASEPRI, r3
 8010d8e:	f3bf 8f6f 	isb	sy
 8010d92:	f3bf 8f4f 	dsb	sy
 8010d96:	60bb      	str	r3, [r7, #8]
 8010d98:	e7fe      	b.n	8010d98 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8010d9a:	f000 f881 	bl	8010ea0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010d9e:	2100      	movs	r1, #0
 8010da0:	6878      	ldr	r0, [r7, #4]
 8010da2:	f001 f8a9 	bl	8011ef8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010da6:	f000 f8c1 	bl	8010f2c <xTaskResumeAll>
 8010daa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d107      	bne.n	8010dc2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8010db2:	4b07      	ldr	r3, [pc, #28]	; (8010dd0 <vTaskDelay+0x64>)
 8010db4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010db8:	601a      	str	r2, [r3, #0]
 8010dba:	f3bf 8f4f 	dsb	sy
 8010dbe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010dc2:	bf00      	nop
 8010dc4:	3710      	adds	r7, #16
 8010dc6:	46bd      	mov	sp, r7
 8010dc8:	bd80      	pop	{r7, pc}
 8010dca:	bf00      	nop
 8010dcc:	200272f0 	.word	0x200272f0
 8010dd0:	e000ed04 	.word	0xe000ed04

08010dd4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010dd4:	b580      	push	{r7, lr}
 8010dd6:	b08a      	sub	sp, #40	; 0x28
 8010dd8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010dda:	2300      	movs	r3, #0
 8010ddc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010dde:	2300      	movs	r3, #0
 8010de0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010de2:	463a      	mov	r2, r7
 8010de4:	1d39      	adds	r1, r7, #4
 8010de6:	f107 0308 	add.w	r3, r7, #8
 8010dea:	4618      	mov	r0, r3
 8010dec:	f7fe f8a6 	bl	800ef3c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010df0:	6839      	ldr	r1, [r7, #0]
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	68ba      	ldr	r2, [r7, #8]
 8010df6:	9202      	str	r2, [sp, #8]
 8010df8:	9301      	str	r3, [sp, #4]
 8010dfa:	2300      	movs	r3, #0
 8010dfc:	9300      	str	r3, [sp, #0]
 8010dfe:	2300      	movs	r3, #0
 8010e00:	460a      	mov	r2, r1
 8010e02:	4921      	ldr	r1, [pc, #132]	; (8010e88 <vTaskStartScheduler+0xb4>)
 8010e04:	4821      	ldr	r0, [pc, #132]	; (8010e8c <vTaskStartScheduler+0xb8>)
 8010e06:	f7ff fe17 	bl	8010a38 <xTaskCreateStatic>
 8010e0a:	4602      	mov	r2, r0
 8010e0c:	4b20      	ldr	r3, [pc, #128]	; (8010e90 <vTaskStartScheduler+0xbc>)
 8010e0e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010e10:	4b1f      	ldr	r3, [pc, #124]	; (8010e90 <vTaskStartScheduler+0xbc>)
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d002      	beq.n	8010e1e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010e18:	2301      	movs	r3, #1
 8010e1a:	617b      	str	r3, [r7, #20]
 8010e1c:	e001      	b.n	8010e22 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010e1e:	2300      	movs	r3, #0
 8010e20:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8010e22:	697b      	ldr	r3, [r7, #20]
 8010e24:	2b01      	cmp	r3, #1
 8010e26:	d102      	bne.n	8010e2e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8010e28:	f001 f8ba 	bl	8011fa0 <xTimerCreateTimerTask>
 8010e2c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010e2e:	697b      	ldr	r3, [r7, #20]
 8010e30:	2b01      	cmp	r3, #1
 8010e32:	d117      	bne.n	8010e64 <vTaskStartScheduler+0x90>
 8010e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e38:	f383 8811 	msr	BASEPRI, r3
 8010e3c:	f3bf 8f6f 	isb	sy
 8010e40:	f3bf 8f4f 	dsb	sy
 8010e44:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010e46:	4b13      	ldr	r3, [pc, #76]	; (8010e94 <vTaskStartScheduler+0xc0>)
 8010e48:	f04f 32ff 	mov.w	r2, #4294967295
 8010e4c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010e4e:	4b12      	ldr	r3, [pc, #72]	; (8010e98 <vTaskStartScheduler+0xc4>)
 8010e50:	2201      	movs	r2, #1
 8010e52:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8010e54:	4b11      	ldr	r3, [pc, #68]	; (8010e9c <vTaskStartScheduler+0xc8>)
 8010e56:	2200      	movs	r2, #0
 8010e58:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8010e5a:	f7f0 f9e8 	bl	800122e <configureTimerForRunTimeStats>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010e5e:	f7fe fbb7 	bl	800f5d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010e62:	e00d      	b.n	8010e80 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010e64:	697b      	ldr	r3, [r7, #20]
 8010e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e6a:	d109      	bne.n	8010e80 <vTaskStartScheduler+0xac>
 8010e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e70:	f383 8811 	msr	BASEPRI, r3
 8010e74:	f3bf 8f6f 	isb	sy
 8010e78:	f3bf 8f4f 	dsb	sy
 8010e7c:	60fb      	str	r3, [r7, #12]
 8010e7e:	e7fe      	b.n	8010e7e <vTaskStartScheduler+0xaa>
}
 8010e80:	bf00      	nop
 8010e82:	3718      	adds	r7, #24
 8010e84:	46bd      	mov	sp, r7
 8010e86:	bd80      	pop	{r7, pc}
 8010e88:	08017254 	.word	0x08017254
 8010e8c:	080115d5 	.word	0x080115d5
 8010e90:	200272ec 	.word	0x200272ec
 8010e94:	200272e8 	.word	0x200272e8
 8010e98:	200272d4 	.word	0x200272d4
 8010e9c:	200272cc 	.word	0x200272cc

08010ea0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010ea0:	b480      	push	{r7}
 8010ea2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8010ea4:	4b04      	ldr	r3, [pc, #16]	; (8010eb8 <vTaskSuspendAll+0x18>)
 8010ea6:	681b      	ldr	r3, [r3, #0]
 8010ea8:	3301      	adds	r3, #1
 8010eaa:	4a03      	ldr	r2, [pc, #12]	; (8010eb8 <vTaskSuspendAll+0x18>)
 8010eac:	6013      	str	r3, [r2, #0]
}
 8010eae:	bf00      	nop
 8010eb0:	46bd      	mov	sp, r7
 8010eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb6:	4770      	bx	lr
 8010eb8:	200272f0 	.word	0x200272f0

08010ebc <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 8010ebc:	b480      	push	{r7}
 8010ebe:	b083      	sub	sp, #12
 8010ec0:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 8010ec2:	2300      	movs	r3, #0
 8010ec4:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 8010ec6:	4b14      	ldr	r3, [pc, #80]	; (8010f18 <prvGetExpectedIdleTime+0x5c>)
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d001      	beq.n	8010ed2 <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 8010ece:	2301      	movs	r3, #1
 8010ed0:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 8010ed2:	4b12      	ldr	r3, [pc, #72]	; (8010f1c <prvGetExpectedIdleTime+0x60>)
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d002      	beq.n	8010ee2 <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 8010edc:	2300      	movs	r3, #0
 8010ede:	607b      	str	r3, [r7, #4]
 8010ee0:	e012      	b.n	8010f08 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 8010ee2:	4b0f      	ldr	r3, [pc, #60]	; (8010f20 <prvGetExpectedIdleTime+0x64>)
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	2b01      	cmp	r3, #1
 8010ee8:	d902      	bls.n	8010ef0 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 8010eea:	2300      	movs	r3, #0
 8010eec:	607b      	str	r3, [r7, #4]
 8010eee:	e00b      	b.n	8010f08 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 8010ef0:	683b      	ldr	r3, [r7, #0]
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d002      	beq.n	8010efc <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 8010ef6:	2300      	movs	r3, #0
 8010ef8:	607b      	str	r3, [r7, #4]
 8010efa:	e005      	b.n	8010f08 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{

			xReturn = xNextTaskUnblockTime - xTickCount;
 8010efc:	4b09      	ldr	r3, [pc, #36]	; (8010f24 <prvGetExpectedIdleTime+0x68>)
 8010efe:	681a      	ldr	r2, [r3, #0]
 8010f00:	4b09      	ldr	r3, [pc, #36]	; (8010f28 <prvGetExpectedIdleTime+0x6c>)
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	1ad3      	subs	r3, r2, r3
 8010f06:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 8010f08:	687b      	ldr	r3, [r7, #4]
	}
 8010f0a:	4618      	mov	r0, r3
 8010f0c:	370c      	adds	r7, #12
 8010f0e:	46bd      	mov	sp, r7
 8010f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f14:	4770      	bx	lr
 8010f16:	bf00      	nop
 8010f18:	200272d0 	.word	0x200272d0
 8010f1c:	20026df4 	.word	0x20026df4
 8010f20:	20026df8 	.word	0x20026df8
 8010f24:	200272e8 	.word	0x200272e8
 8010f28:	200272cc 	.word	0x200272cc

08010f2c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010f2c:	b580      	push	{r7, lr}
 8010f2e:	b084      	sub	sp, #16
 8010f30:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010f32:	2300      	movs	r3, #0
 8010f34:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010f36:	2300      	movs	r3, #0
 8010f38:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010f3a:	4b41      	ldr	r3, [pc, #260]	; (8011040 <xTaskResumeAll+0x114>)
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d109      	bne.n	8010f56 <xTaskResumeAll+0x2a>
 8010f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f46:	f383 8811 	msr	BASEPRI, r3
 8010f4a:	f3bf 8f6f 	isb	sy
 8010f4e:	f3bf 8f4f 	dsb	sy
 8010f52:	603b      	str	r3, [r7, #0]
 8010f54:	e7fe      	b.n	8010f54 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010f56:	f7fe fbd9 	bl	800f70c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010f5a:	4b39      	ldr	r3, [pc, #228]	; (8011040 <xTaskResumeAll+0x114>)
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	3b01      	subs	r3, #1
 8010f60:	4a37      	ldr	r2, [pc, #220]	; (8011040 <xTaskResumeAll+0x114>)
 8010f62:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010f64:	4b36      	ldr	r3, [pc, #216]	; (8011040 <xTaskResumeAll+0x114>)
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d162      	bne.n	8011032 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010f6c:	4b35      	ldr	r3, [pc, #212]	; (8011044 <xTaskResumeAll+0x118>)
 8010f6e:	681b      	ldr	r3, [r3, #0]
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d05e      	beq.n	8011032 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010f74:	e02f      	b.n	8010fd6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8010f76:	4b34      	ldr	r3, [pc, #208]	; (8011048 <xTaskResumeAll+0x11c>)
 8010f78:	68db      	ldr	r3, [r3, #12]
 8010f7a:	68db      	ldr	r3, [r3, #12]
 8010f7c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	3318      	adds	r3, #24
 8010f82:	4618      	mov	r0, r3
 8010f84:	f7fe fa74 	bl	800f470 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010f88:	68fb      	ldr	r3, [r7, #12]
 8010f8a:	3304      	adds	r3, #4
 8010f8c:	4618      	mov	r0, r3
 8010f8e:	f7fe fa6f 	bl	800f470 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010f92:	68fb      	ldr	r3, [r7, #12]
 8010f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f96:	4b2d      	ldr	r3, [pc, #180]	; (801104c <xTaskResumeAll+0x120>)
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	429a      	cmp	r2, r3
 8010f9c:	d903      	bls.n	8010fa6 <xTaskResumeAll+0x7a>
 8010f9e:	68fb      	ldr	r3, [r7, #12]
 8010fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fa2:	4a2a      	ldr	r2, [pc, #168]	; (801104c <xTaskResumeAll+0x120>)
 8010fa4:	6013      	str	r3, [r2, #0]
 8010fa6:	68fb      	ldr	r3, [r7, #12]
 8010fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010faa:	4613      	mov	r3, r2
 8010fac:	009b      	lsls	r3, r3, #2
 8010fae:	4413      	add	r3, r2
 8010fb0:	009b      	lsls	r3, r3, #2
 8010fb2:	4a27      	ldr	r2, [pc, #156]	; (8011050 <xTaskResumeAll+0x124>)
 8010fb4:	441a      	add	r2, r3
 8010fb6:	68fb      	ldr	r3, [r7, #12]
 8010fb8:	3304      	adds	r3, #4
 8010fba:	4619      	mov	r1, r3
 8010fbc:	4610      	mov	r0, r2
 8010fbe:	f7fe f9fa 	bl	800f3b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010fc6:	4b23      	ldr	r3, [pc, #140]	; (8011054 <xTaskResumeAll+0x128>)
 8010fc8:	681b      	ldr	r3, [r3, #0]
 8010fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fcc:	429a      	cmp	r2, r3
 8010fce:	d302      	bcc.n	8010fd6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8010fd0:	4b21      	ldr	r3, [pc, #132]	; (8011058 <xTaskResumeAll+0x12c>)
 8010fd2:	2201      	movs	r2, #1
 8010fd4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010fd6:	4b1c      	ldr	r3, [pc, #112]	; (8011048 <xTaskResumeAll+0x11c>)
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d1cb      	bne.n	8010f76 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d001      	beq.n	8010fe8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010fe4:	f000 fbfc 	bl	80117e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8010fe8:	4b1c      	ldr	r3, [pc, #112]	; (801105c <xTaskResumeAll+0x130>)
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d010      	beq.n	8011016 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010ff4:	f000 f86c 	bl	80110d0 <xTaskIncrementTick>
 8010ff8:	4603      	mov	r3, r0
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d002      	beq.n	8011004 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8010ffe:	4b16      	ldr	r3, [pc, #88]	; (8011058 <xTaskResumeAll+0x12c>)
 8011000:	2201      	movs	r2, #1
 8011002:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	3b01      	subs	r3, #1
 8011008:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	2b00      	cmp	r3, #0
 801100e:	d1f1      	bne.n	8010ff4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8011010:	4b12      	ldr	r3, [pc, #72]	; (801105c <xTaskResumeAll+0x130>)
 8011012:	2200      	movs	r2, #0
 8011014:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011016:	4b10      	ldr	r3, [pc, #64]	; (8011058 <xTaskResumeAll+0x12c>)
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	2b00      	cmp	r3, #0
 801101c:	d009      	beq.n	8011032 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801101e:	2301      	movs	r3, #1
 8011020:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011022:	4b0f      	ldr	r3, [pc, #60]	; (8011060 <xTaskResumeAll+0x134>)
 8011024:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011028:	601a      	str	r2, [r3, #0]
 801102a:	f3bf 8f4f 	dsb	sy
 801102e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011032:	f7fe fb99 	bl	800f768 <vPortExitCritical>

	return xAlreadyYielded;
 8011036:	68bb      	ldr	r3, [r7, #8]
}
 8011038:	4618      	mov	r0, r3
 801103a:	3710      	adds	r7, #16
 801103c:	46bd      	mov	sp, r7
 801103e:	bd80      	pop	{r7, pc}
 8011040:	200272f0 	.word	0x200272f0
 8011044:	200272c8 	.word	0x200272c8
 8011048:	20027288 	.word	0x20027288
 801104c:	200272d0 	.word	0x200272d0
 8011050:	20026df8 	.word	0x20026df8
 8011054:	20026df4 	.word	0x20026df4
 8011058:	200272dc 	.word	0x200272dc
 801105c:	200272d8 	.word	0x200272d8
 8011060:	e000ed04 	.word	0xe000ed04

08011064 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011064:	b480      	push	{r7}
 8011066:	b083      	sub	sp, #12
 8011068:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801106a:	4b05      	ldr	r3, [pc, #20]	; (8011080 <xTaskGetTickCount+0x1c>)
 801106c:	681b      	ldr	r3, [r3, #0]
 801106e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011070:	687b      	ldr	r3, [r7, #4]
}
 8011072:	4618      	mov	r0, r3
 8011074:	370c      	adds	r7, #12
 8011076:	46bd      	mov	sp, r7
 8011078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801107c:	4770      	bx	lr
 801107e:	bf00      	nop
 8011080:	200272cc 	.word	0x200272cc

08011084 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 8011084:	b480      	push	{r7}
 8011086:	b085      	sub	sp, #20
 8011088:	af00      	add	r7, sp, #0
 801108a:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 801108c:	4b0e      	ldr	r3, [pc, #56]	; (80110c8 <vTaskStepTick+0x44>)
 801108e:	681a      	ldr	r2, [r3, #0]
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	441a      	add	r2, r3
 8011094:	4b0d      	ldr	r3, [pc, #52]	; (80110cc <vTaskStepTick+0x48>)
 8011096:	681b      	ldr	r3, [r3, #0]
 8011098:	429a      	cmp	r2, r3
 801109a:	d909      	bls.n	80110b0 <vTaskStepTick+0x2c>
 801109c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110a0:	f383 8811 	msr	BASEPRI, r3
 80110a4:	f3bf 8f6f 	isb	sy
 80110a8:	f3bf 8f4f 	dsb	sy
 80110ac:	60fb      	str	r3, [r7, #12]
 80110ae:	e7fe      	b.n	80110ae <vTaskStepTick+0x2a>
		xTickCount += xTicksToJump;
 80110b0:	4b05      	ldr	r3, [pc, #20]	; (80110c8 <vTaskStepTick+0x44>)
 80110b2:	681a      	ldr	r2, [r3, #0]
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	4413      	add	r3, r2
 80110b8:	4a03      	ldr	r2, [pc, #12]	; (80110c8 <vTaskStepTick+0x44>)
 80110ba:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 80110bc:	bf00      	nop
 80110be:	3714      	adds	r7, #20
 80110c0:	46bd      	mov	sp, r7
 80110c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110c6:	4770      	bx	lr
 80110c8:	200272cc 	.word	0x200272cc
 80110cc:	200272e8 	.word	0x200272e8

080110d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80110d0:	b580      	push	{r7, lr}
 80110d2:	b086      	sub	sp, #24
 80110d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80110d6:	2300      	movs	r3, #0
 80110d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80110da:	4b55      	ldr	r3, [pc, #340]	; (8011230 <xTaskIncrementTick+0x160>)
 80110dc:	681b      	ldr	r3, [r3, #0]
 80110de:	2b00      	cmp	r3, #0
 80110e0:	f040 8093 	bne.w	801120a <xTaskIncrementTick+0x13a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80110e4:	4b53      	ldr	r3, [pc, #332]	; (8011234 <xTaskIncrementTick+0x164>)
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	3301      	adds	r3, #1
 80110ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80110ec:	4a51      	ldr	r2, [pc, #324]	; (8011234 <xTaskIncrementTick+0x164>)
 80110ee:	693b      	ldr	r3, [r7, #16]
 80110f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80110f2:	693b      	ldr	r3, [r7, #16]
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d11f      	bne.n	8011138 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80110f8:	4b4f      	ldr	r3, [pc, #316]	; (8011238 <xTaskIncrementTick+0x168>)
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	681b      	ldr	r3, [r3, #0]
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d009      	beq.n	8011116 <xTaskIncrementTick+0x46>
 8011102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011106:	f383 8811 	msr	BASEPRI, r3
 801110a:	f3bf 8f6f 	isb	sy
 801110e:	f3bf 8f4f 	dsb	sy
 8011112:	603b      	str	r3, [r7, #0]
 8011114:	e7fe      	b.n	8011114 <xTaskIncrementTick+0x44>
 8011116:	4b48      	ldr	r3, [pc, #288]	; (8011238 <xTaskIncrementTick+0x168>)
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	60fb      	str	r3, [r7, #12]
 801111c:	4b47      	ldr	r3, [pc, #284]	; (801123c <xTaskIncrementTick+0x16c>)
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	4a45      	ldr	r2, [pc, #276]	; (8011238 <xTaskIncrementTick+0x168>)
 8011122:	6013      	str	r3, [r2, #0]
 8011124:	4a45      	ldr	r2, [pc, #276]	; (801123c <xTaskIncrementTick+0x16c>)
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	6013      	str	r3, [r2, #0]
 801112a:	4b45      	ldr	r3, [pc, #276]	; (8011240 <xTaskIncrementTick+0x170>)
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	3301      	adds	r3, #1
 8011130:	4a43      	ldr	r2, [pc, #268]	; (8011240 <xTaskIncrementTick+0x170>)
 8011132:	6013      	str	r3, [r2, #0]
 8011134:	f000 fb54 	bl	80117e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011138:	4b42      	ldr	r3, [pc, #264]	; (8011244 <xTaskIncrementTick+0x174>)
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	693a      	ldr	r2, [r7, #16]
 801113e:	429a      	cmp	r2, r3
 8011140:	d34e      	bcc.n	80111e0 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011142:	4b3d      	ldr	r3, [pc, #244]	; (8011238 <xTaskIncrementTick+0x168>)
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	2b00      	cmp	r3, #0
 801114a:	d101      	bne.n	8011150 <xTaskIncrementTick+0x80>
 801114c:	2301      	movs	r3, #1
 801114e:	e000      	b.n	8011152 <xTaskIncrementTick+0x82>
 8011150:	2300      	movs	r3, #0
 8011152:	2b00      	cmp	r3, #0
 8011154:	d004      	beq.n	8011160 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011156:	4b3b      	ldr	r3, [pc, #236]	; (8011244 <xTaskIncrementTick+0x174>)
 8011158:	f04f 32ff 	mov.w	r2, #4294967295
 801115c:	601a      	str	r2, [r3, #0]
					break;
 801115e:	e03f      	b.n	80111e0 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8011160:	4b35      	ldr	r3, [pc, #212]	; (8011238 <xTaskIncrementTick+0x168>)
 8011162:	681b      	ldr	r3, [r3, #0]
 8011164:	68db      	ldr	r3, [r3, #12]
 8011166:	68db      	ldr	r3, [r3, #12]
 8011168:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801116a:	68bb      	ldr	r3, [r7, #8]
 801116c:	685b      	ldr	r3, [r3, #4]
 801116e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011170:	693a      	ldr	r2, [r7, #16]
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	429a      	cmp	r2, r3
 8011176:	d203      	bcs.n	8011180 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011178:	4a32      	ldr	r2, [pc, #200]	; (8011244 <xTaskIncrementTick+0x174>)
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	6013      	str	r3, [r2, #0]
						break;
 801117e:	e02f      	b.n	80111e0 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011180:	68bb      	ldr	r3, [r7, #8]
 8011182:	3304      	adds	r3, #4
 8011184:	4618      	mov	r0, r3
 8011186:	f7fe f973 	bl	800f470 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801118a:	68bb      	ldr	r3, [r7, #8]
 801118c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801118e:	2b00      	cmp	r3, #0
 8011190:	d004      	beq.n	801119c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011192:	68bb      	ldr	r3, [r7, #8]
 8011194:	3318      	adds	r3, #24
 8011196:	4618      	mov	r0, r3
 8011198:	f7fe f96a 	bl	800f470 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801119c:	68bb      	ldr	r3, [r7, #8]
 801119e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80111a0:	4b29      	ldr	r3, [pc, #164]	; (8011248 <xTaskIncrementTick+0x178>)
 80111a2:	681b      	ldr	r3, [r3, #0]
 80111a4:	429a      	cmp	r2, r3
 80111a6:	d903      	bls.n	80111b0 <xTaskIncrementTick+0xe0>
 80111a8:	68bb      	ldr	r3, [r7, #8]
 80111aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111ac:	4a26      	ldr	r2, [pc, #152]	; (8011248 <xTaskIncrementTick+0x178>)
 80111ae:	6013      	str	r3, [r2, #0]
 80111b0:	68bb      	ldr	r3, [r7, #8]
 80111b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80111b4:	4613      	mov	r3, r2
 80111b6:	009b      	lsls	r3, r3, #2
 80111b8:	4413      	add	r3, r2
 80111ba:	009b      	lsls	r3, r3, #2
 80111bc:	4a23      	ldr	r2, [pc, #140]	; (801124c <xTaskIncrementTick+0x17c>)
 80111be:	441a      	add	r2, r3
 80111c0:	68bb      	ldr	r3, [r7, #8]
 80111c2:	3304      	adds	r3, #4
 80111c4:	4619      	mov	r1, r3
 80111c6:	4610      	mov	r0, r2
 80111c8:	f7fe f8f5 	bl	800f3b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80111cc:	68bb      	ldr	r3, [r7, #8]
 80111ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80111d0:	4b1f      	ldr	r3, [pc, #124]	; (8011250 <xTaskIncrementTick+0x180>)
 80111d2:	681b      	ldr	r3, [r3, #0]
 80111d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111d6:	429a      	cmp	r2, r3
 80111d8:	d3b3      	bcc.n	8011142 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80111da:	2301      	movs	r3, #1
 80111dc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80111de:	e7b0      	b.n	8011142 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80111e0:	4b1b      	ldr	r3, [pc, #108]	; (8011250 <xTaskIncrementTick+0x180>)
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80111e6:	4919      	ldr	r1, [pc, #100]	; (801124c <xTaskIncrementTick+0x17c>)
 80111e8:	4613      	mov	r3, r2
 80111ea:	009b      	lsls	r3, r3, #2
 80111ec:	4413      	add	r3, r2
 80111ee:	009b      	lsls	r3, r3, #2
 80111f0:	440b      	add	r3, r1
 80111f2:	681b      	ldr	r3, [r3, #0]
 80111f4:	2b01      	cmp	r3, #1
 80111f6:	d901      	bls.n	80111fc <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80111f8:	2301      	movs	r3, #1
 80111fa:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 80111fc:	4b15      	ldr	r3, [pc, #84]	; (8011254 <xTaskIncrementTick+0x184>)
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	2b00      	cmp	r3, #0
 8011202:	d109      	bne.n	8011218 <xTaskIncrementTick+0x148>
			{
				vApplicationTickHook();
 8011204:	f7f0 f821 	bl	800124a <vApplicationTickHook>
 8011208:	e006      	b.n	8011218 <xTaskIncrementTick+0x148>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801120a:	4b12      	ldr	r3, [pc, #72]	; (8011254 <xTaskIncrementTick+0x184>)
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	3301      	adds	r3, #1
 8011210:	4a10      	ldr	r2, [pc, #64]	; (8011254 <xTaskIncrementTick+0x184>)
 8011212:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8011214:	f7f0 f819 	bl	800124a <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8011218:	4b0f      	ldr	r3, [pc, #60]	; (8011258 <xTaskIncrementTick+0x188>)
 801121a:	681b      	ldr	r3, [r3, #0]
 801121c:	2b00      	cmp	r3, #0
 801121e:	d001      	beq.n	8011224 <xTaskIncrementTick+0x154>
		{
			xSwitchRequired = pdTRUE;
 8011220:	2301      	movs	r3, #1
 8011222:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8011224:	697b      	ldr	r3, [r7, #20]
}
 8011226:	4618      	mov	r0, r3
 8011228:	3718      	adds	r7, #24
 801122a:	46bd      	mov	sp, r7
 801122c:	bd80      	pop	{r7, pc}
 801122e:	bf00      	nop
 8011230:	200272f0 	.word	0x200272f0
 8011234:	200272cc 	.word	0x200272cc
 8011238:	20027280 	.word	0x20027280
 801123c:	20027284 	.word	0x20027284
 8011240:	200272e0 	.word	0x200272e0
 8011244:	200272e8 	.word	0x200272e8
 8011248:	200272d0 	.word	0x200272d0
 801124c:	20026df8 	.word	0x20026df8
 8011250:	20026df4 	.word	0x20026df4
 8011254:	200272d8 	.word	0x200272d8
 8011258:	200272dc 	.word	0x200272dc

0801125c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801125c:	b580      	push	{r7, lr}
 801125e:	b084      	sub	sp, #16
 8011260:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011262:	4b3b      	ldr	r3, [pc, #236]	; (8011350 <vTaskSwitchContext+0xf4>)
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	2b00      	cmp	r3, #0
 8011268:	d003      	beq.n	8011272 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801126a:	4b3a      	ldr	r3, [pc, #232]	; (8011354 <vTaskSwitchContext+0xf8>)
 801126c:	2201      	movs	r2, #1
 801126e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011270:	e06a      	b.n	8011348 <vTaskSwitchContext+0xec>
		xYieldPending = pdFALSE;
 8011272:	4b38      	ldr	r3, [pc, #224]	; (8011354 <vTaskSwitchContext+0xf8>)
 8011274:	2200      	movs	r2, #0
 8011276:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8011278:	f7ef ffe0 	bl	800123c <getRunTimeCounterValue>
 801127c:	4602      	mov	r2, r0
 801127e:	4b36      	ldr	r3, [pc, #216]	; (8011358 <vTaskSwitchContext+0xfc>)
 8011280:	601a      	str	r2, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 8011282:	4b35      	ldr	r3, [pc, #212]	; (8011358 <vTaskSwitchContext+0xfc>)
 8011284:	681a      	ldr	r2, [r3, #0]
 8011286:	4b35      	ldr	r3, [pc, #212]	; (801135c <vTaskSwitchContext+0x100>)
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	429a      	cmp	r2, r3
 801128c:	d909      	bls.n	80112a2 <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 801128e:	4b34      	ldr	r3, [pc, #208]	; (8011360 <vTaskSwitchContext+0x104>)
 8011290:	681b      	ldr	r3, [r3, #0]
 8011292:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8011294:	4a30      	ldr	r2, [pc, #192]	; (8011358 <vTaskSwitchContext+0xfc>)
 8011296:	6810      	ldr	r0, [r2, #0]
 8011298:	4a30      	ldr	r2, [pc, #192]	; (801135c <vTaskSwitchContext+0x100>)
 801129a:	6812      	ldr	r2, [r2, #0]
 801129c:	1a82      	subs	r2, r0, r2
 801129e:	440a      	add	r2, r1
 80112a0:	659a      	str	r2, [r3, #88]	; 0x58
				ulTaskSwitchedInTime = ulTotalRunTime;
 80112a2:	4b2d      	ldr	r3, [pc, #180]	; (8011358 <vTaskSwitchContext+0xfc>)
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	4a2d      	ldr	r2, [pc, #180]	; (801135c <vTaskSwitchContext+0x100>)
 80112a8:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80112aa:	4b2d      	ldr	r3, [pc, #180]	; (8011360 <vTaskSwitchContext+0x104>)
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	681a      	ldr	r2, [r3, #0]
 80112b0:	4b2b      	ldr	r3, [pc, #172]	; (8011360 <vTaskSwitchContext+0x104>)
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80112b6:	429a      	cmp	r2, r3
 80112b8:	d808      	bhi.n	80112cc <vTaskSwitchContext+0x70>
 80112ba:	4b29      	ldr	r3, [pc, #164]	; (8011360 <vTaskSwitchContext+0x104>)
 80112bc:	681a      	ldr	r2, [r3, #0]
 80112be:	4b28      	ldr	r3, [pc, #160]	; (8011360 <vTaskSwitchContext+0x104>)
 80112c0:	681b      	ldr	r3, [r3, #0]
 80112c2:	3334      	adds	r3, #52	; 0x34
 80112c4:	4619      	mov	r1, r3
 80112c6:	4610      	mov	r0, r2
 80112c8:	f7ef ffc6 	bl	8001258 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80112cc:	4b25      	ldr	r3, [pc, #148]	; (8011364 <vTaskSwitchContext+0x108>)
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	60fb      	str	r3, [r7, #12]
 80112d2:	e00f      	b.n	80112f4 <vTaskSwitchContext+0x98>
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d109      	bne.n	80112ee <vTaskSwitchContext+0x92>
 80112da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112de:	f383 8811 	msr	BASEPRI, r3
 80112e2:	f3bf 8f6f 	isb	sy
 80112e6:	f3bf 8f4f 	dsb	sy
 80112ea:	607b      	str	r3, [r7, #4]
 80112ec:	e7fe      	b.n	80112ec <vTaskSwitchContext+0x90>
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	3b01      	subs	r3, #1
 80112f2:	60fb      	str	r3, [r7, #12]
 80112f4:	491c      	ldr	r1, [pc, #112]	; (8011368 <vTaskSwitchContext+0x10c>)
 80112f6:	68fa      	ldr	r2, [r7, #12]
 80112f8:	4613      	mov	r3, r2
 80112fa:	009b      	lsls	r3, r3, #2
 80112fc:	4413      	add	r3, r2
 80112fe:	009b      	lsls	r3, r3, #2
 8011300:	440b      	add	r3, r1
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	2b00      	cmp	r3, #0
 8011306:	d0e5      	beq.n	80112d4 <vTaskSwitchContext+0x78>
 8011308:	68fa      	ldr	r2, [r7, #12]
 801130a:	4613      	mov	r3, r2
 801130c:	009b      	lsls	r3, r3, #2
 801130e:	4413      	add	r3, r2
 8011310:	009b      	lsls	r3, r3, #2
 8011312:	4a15      	ldr	r2, [pc, #84]	; (8011368 <vTaskSwitchContext+0x10c>)
 8011314:	4413      	add	r3, r2
 8011316:	60bb      	str	r3, [r7, #8]
 8011318:	68bb      	ldr	r3, [r7, #8]
 801131a:	685b      	ldr	r3, [r3, #4]
 801131c:	685a      	ldr	r2, [r3, #4]
 801131e:	68bb      	ldr	r3, [r7, #8]
 8011320:	605a      	str	r2, [r3, #4]
 8011322:	68bb      	ldr	r3, [r7, #8]
 8011324:	685a      	ldr	r2, [r3, #4]
 8011326:	68bb      	ldr	r3, [r7, #8]
 8011328:	3308      	adds	r3, #8
 801132a:	429a      	cmp	r2, r3
 801132c:	d104      	bne.n	8011338 <vTaskSwitchContext+0xdc>
 801132e:	68bb      	ldr	r3, [r7, #8]
 8011330:	685b      	ldr	r3, [r3, #4]
 8011332:	685a      	ldr	r2, [r3, #4]
 8011334:	68bb      	ldr	r3, [r7, #8]
 8011336:	605a      	str	r2, [r3, #4]
 8011338:	68bb      	ldr	r3, [r7, #8]
 801133a:	685b      	ldr	r3, [r3, #4]
 801133c:	68db      	ldr	r3, [r3, #12]
 801133e:	4a08      	ldr	r2, [pc, #32]	; (8011360 <vTaskSwitchContext+0x104>)
 8011340:	6013      	str	r3, [r2, #0]
 8011342:	4a08      	ldr	r2, [pc, #32]	; (8011364 <vTaskSwitchContext+0x108>)
 8011344:	68fb      	ldr	r3, [r7, #12]
 8011346:	6013      	str	r3, [r2, #0]
}
 8011348:	bf00      	nop
 801134a:	3710      	adds	r7, #16
 801134c:	46bd      	mov	sp, r7
 801134e:	bd80      	pop	{r7, pc}
 8011350:	200272f0 	.word	0x200272f0
 8011354:	200272dc 	.word	0x200272dc
 8011358:	200272f8 	.word	0x200272f8
 801135c:	200272f4 	.word	0x200272f4
 8011360:	20026df4 	.word	0x20026df4
 8011364:	200272d0 	.word	0x200272d0
 8011368:	20026df8 	.word	0x20026df8

0801136c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801136c:	b580      	push	{r7, lr}
 801136e:	b084      	sub	sp, #16
 8011370:	af00      	add	r7, sp, #0
 8011372:	6078      	str	r0, [r7, #4]
 8011374:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	2b00      	cmp	r3, #0
 801137a:	d109      	bne.n	8011390 <vTaskPlaceOnEventList+0x24>
 801137c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011380:	f383 8811 	msr	BASEPRI, r3
 8011384:	f3bf 8f6f 	isb	sy
 8011388:	f3bf 8f4f 	dsb	sy
 801138c:	60fb      	str	r3, [r7, #12]
 801138e:	e7fe      	b.n	801138e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011390:	4b07      	ldr	r3, [pc, #28]	; (80113b0 <vTaskPlaceOnEventList+0x44>)
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	3318      	adds	r3, #24
 8011396:	4619      	mov	r1, r3
 8011398:	6878      	ldr	r0, [r7, #4]
 801139a:	f7fe f830 	bl	800f3fe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801139e:	2101      	movs	r1, #1
 80113a0:	6838      	ldr	r0, [r7, #0]
 80113a2:	f000 fda9 	bl	8011ef8 <prvAddCurrentTaskToDelayedList>
}
 80113a6:	bf00      	nop
 80113a8:	3710      	adds	r7, #16
 80113aa:	46bd      	mov	sp, r7
 80113ac:	bd80      	pop	{r7, pc}
 80113ae:	bf00      	nop
 80113b0:	20026df4 	.word	0x20026df4

080113b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80113b4:	b580      	push	{r7, lr}
 80113b6:	b086      	sub	sp, #24
 80113b8:	af00      	add	r7, sp, #0
 80113ba:	60f8      	str	r0, [r7, #12]
 80113bc:	60b9      	str	r1, [r7, #8]
 80113be:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d109      	bne.n	80113da <vTaskPlaceOnEventListRestricted+0x26>
 80113c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113ca:	f383 8811 	msr	BASEPRI, r3
 80113ce:	f3bf 8f6f 	isb	sy
 80113d2:	f3bf 8f4f 	dsb	sy
 80113d6:	617b      	str	r3, [r7, #20]
 80113d8:	e7fe      	b.n	80113d8 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80113da:	4b0a      	ldr	r3, [pc, #40]	; (8011404 <vTaskPlaceOnEventListRestricted+0x50>)
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	3318      	adds	r3, #24
 80113e0:	4619      	mov	r1, r3
 80113e2:	68f8      	ldr	r0, [r7, #12]
 80113e4:	f7fd ffe7 	bl	800f3b6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d002      	beq.n	80113f4 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80113ee:	f04f 33ff 	mov.w	r3, #4294967295
 80113f2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80113f4:	6879      	ldr	r1, [r7, #4]
 80113f6:	68b8      	ldr	r0, [r7, #8]
 80113f8:	f000 fd7e 	bl	8011ef8 <prvAddCurrentTaskToDelayedList>
	}
 80113fc:	bf00      	nop
 80113fe:	3718      	adds	r7, #24
 8011400:	46bd      	mov	sp, r7
 8011402:	bd80      	pop	{r7, pc}
 8011404:	20026df4 	.word	0x20026df4

08011408 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011408:	b580      	push	{r7, lr}
 801140a:	b086      	sub	sp, #24
 801140c:	af00      	add	r7, sp, #0
 801140e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	68db      	ldr	r3, [r3, #12]
 8011414:	68db      	ldr	r3, [r3, #12]
 8011416:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011418:	693b      	ldr	r3, [r7, #16]
 801141a:	2b00      	cmp	r3, #0
 801141c:	d109      	bne.n	8011432 <xTaskRemoveFromEventList+0x2a>
 801141e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011422:	f383 8811 	msr	BASEPRI, r3
 8011426:	f3bf 8f6f 	isb	sy
 801142a:	f3bf 8f4f 	dsb	sy
 801142e:	60fb      	str	r3, [r7, #12]
 8011430:	e7fe      	b.n	8011430 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011432:	693b      	ldr	r3, [r7, #16]
 8011434:	3318      	adds	r3, #24
 8011436:	4618      	mov	r0, r3
 8011438:	f7fe f81a 	bl	800f470 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801143c:	4b1e      	ldr	r3, [pc, #120]	; (80114b8 <xTaskRemoveFromEventList+0xb0>)
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	2b00      	cmp	r3, #0
 8011442:	d11d      	bne.n	8011480 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011444:	693b      	ldr	r3, [r7, #16]
 8011446:	3304      	adds	r3, #4
 8011448:	4618      	mov	r0, r3
 801144a:	f7fe f811 	bl	800f470 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801144e:	693b      	ldr	r3, [r7, #16]
 8011450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011452:	4b1a      	ldr	r3, [pc, #104]	; (80114bc <xTaskRemoveFromEventList+0xb4>)
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	429a      	cmp	r2, r3
 8011458:	d903      	bls.n	8011462 <xTaskRemoveFromEventList+0x5a>
 801145a:	693b      	ldr	r3, [r7, #16]
 801145c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801145e:	4a17      	ldr	r2, [pc, #92]	; (80114bc <xTaskRemoveFromEventList+0xb4>)
 8011460:	6013      	str	r3, [r2, #0]
 8011462:	693b      	ldr	r3, [r7, #16]
 8011464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011466:	4613      	mov	r3, r2
 8011468:	009b      	lsls	r3, r3, #2
 801146a:	4413      	add	r3, r2
 801146c:	009b      	lsls	r3, r3, #2
 801146e:	4a14      	ldr	r2, [pc, #80]	; (80114c0 <xTaskRemoveFromEventList+0xb8>)
 8011470:	441a      	add	r2, r3
 8011472:	693b      	ldr	r3, [r7, #16]
 8011474:	3304      	adds	r3, #4
 8011476:	4619      	mov	r1, r3
 8011478:	4610      	mov	r0, r2
 801147a:	f7fd ff9c 	bl	800f3b6 <vListInsertEnd>
 801147e:	e005      	b.n	801148c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011480:	693b      	ldr	r3, [r7, #16]
 8011482:	3318      	adds	r3, #24
 8011484:	4619      	mov	r1, r3
 8011486:	480f      	ldr	r0, [pc, #60]	; (80114c4 <xTaskRemoveFromEventList+0xbc>)
 8011488:	f7fd ff95 	bl	800f3b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801148c:	693b      	ldr	r3, [r7, #16]
 801148e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011490:	4b0d      	ldr	r3, [pc, #52]	; (80114c8 <xTaskRemoveFromEventList+0xc0>)
 8011492:	681b      	ldr	r3, [r3, #0]
 8011494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011496:	429a      	cmp	r2, r3
 8011498:	d905      	bls.n	80114a6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801149a:	2301      	movs	r3, #1
 801149c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801149e:	4b0b      	ldr	r3, [pc, #44]	; (80114cc <xTaskRemoveFromEventList+0xc4>)
 80114a0:	2201      	movs	r2, #1
 80114a2:	601a      	str	r2, [r3, #0]
 80114a4:	e001      	b.n	80114aa <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80114a6:	2300      	movs	r3, #0
 80114a8:	617b      	str	r3, [r7, #20]
		normally left unchanged, because it is automatically reset to a new
		value when the tick count equals xNextTaskUnblockTime.  However if
		tickless idling is used it might be more important to enter sleep mode
		at the earliest possible time - so reset xNextTaskUnblockTime here to
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
 80114aa:	f000 f999 	bl	80117e0 <prvResetNextTaskUnblockTime>
	}
	#endif

	return xReturn;
 80114ae:	697b      	ldr	r3, [r7, #20]
}
 80114b0:	4618      	mov	r0, r3
 80114b2:	3718      	adds	r7, #24
 80114b4:	46bd      	mov	sp, r7
 80114b6:	bd80      	pop	{r7, pc}
 80114b8:	200272f0 	.word	0x200272f0
 80114bc:	200272d0 	.word	0x200272d0
 80114c0:	20026df8 	.word	0x20026df8
 80114c4:	20027288 	.word	0x20027288
 80114c8:	20026df4 	.word	0x20026df4
 80114cc:	200272dc 	.word	0x200272dc

080114d0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80114d0:	b480      	push	{r7}
 80114d2:	b083      	sub	sp, #12
 80114d4:	af00      	add	r7, sp, #0
 80114d6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80114d8:	4b06      	ldr	r3, [pc, #24]	; (80114f4 <vTaskInternalSetTimeOutState+0x24>)
 80114da:	681a      	ldr	r2, [r3, #0]
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80114e0:	4b05      	ldr	r3, [pc, #20]	; (80114f8 <vTaskInternalSetTimeOutState+0x28>)
 80114e2:	681a      	ldr	r2, [r3, #0]
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	605a      	str	r2, [r3, #4]
}
 80114e8:	bf00      	nop
 80114ea:	370c      	adds	r7, #12
 80114ec:	46bd      	mov	sp, r7
 80114ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114f2:	4770      	bx	lr
 80114f4:	200272e0 	.word	0x200272e0
 80114f8:	200272cc 	.word	0x200272cc

080114fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80114fc:	b580      	push	{r7, lr}
 80114fe:	b088      	sub	sp, #32
 8011500:	af00      	add	r7, sp, #0
 8011502:	6078      	str	r0, [r7, #4]
 8011504:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	2b00      	cmp	r3, #0
 801150a:	d109      	bne.n	8011520 <xTaskCheckForTimeOut+0x24>
 801150c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011510:	f383 8811 	msr	BASEPRI, r3
 8011514:	f3bf 8f6f 	isb	sy
 8011518:	f3bf 8f4f 	dsb	sy
 801151c:	613b      	str	r3, [r7, #16]
 801151e:	e7fe      	b.n	801151e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8011520:	683b      	ldr	r3, [r7, #0]
 8011522:	2b00      	cmp	r3, #0
 8011524:	d109      	bne.n	801153a <xTaskCheckForTimeOut+0x3e>
 8011526:	f04f 0350 	mov.w	r3, #80	; 0x50
 801152a:	f383 8811 	msr	BASEPRI, r3
 801152e:	f3bf 8f6f 	isb	sy
 8011532:	f3bf 8f4f 	dsb	sy
 8011536:	60fb      	str	r3, [r7, #12]
 8011538:	e7fe      	b.n	8011538 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 801153a:	f7fe f8e7 	bl	800f70c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801153e:	4b1d      	ldr	r3, [pc, #116]	; (80115b4 <xTaskCheckForTimeOut+0xb8>)
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	685b      	ldr	r3, [r3, #4]
 8011548:	69ba      	ldr	r2, [r7, #24]
 801154a:	1ad3      	subs	r3, r2, r3
 801154c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801154e:	683b      	ldr	r3, [r7, #0]
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011556:	d102      	bne.n	801155e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011558:	2300      	movs	r3, #0
 801155a:	61fb      	str	r3, [r7, #28]
 801155c:	e023      	b.n	80115a6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	681a      	ldr	r2, [r3, #0]
 8011562:	4b15      	ldr	r3, [pc, #84]	; (80115b8 <xTaskCheckForTimeOut+0xbc>)
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	429a      	cmp	r2, r3
 8011568:	d007      	beq.n	801157a <xTaskCheckForTimeOut+0x7e>
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	685b      	ldr	r3, [r3, #4]
 801156e:	69ba      	ldr	r2, [r7, #24]
 8011570:	429a      	cmp	r2, r3
 8011572:	d302      	bcc.n	801157a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011574:	2301      	movs	r3, #1
 8011576:	61fb      	str	r3, [r7, #28]
 8011578:	e015      	b.n	80115a6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801157a:	683b      	ldr	r3, [r7, #0]
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	697a      	ldr	r2, [r7, #20]
 8011580:	429a      	cmp	r2, r3
 8011582:	d20b      	bcs.n	801159c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011584:	683b      	ldr	r3, [r7, #0]
 8011586:	681a      	ldr	r2, [r3, #0]
 8011588:	697b      	ldr	r3, [r7, #20]
 801158a:	1ad2      	subs	r2, r2, r3
 801158c:	683b      	ldr	r3, [r7, #0]
 801158e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011590:	6878      	ldr	r0, [r7, #4]
 8011592:	f7ff ff9d 	bl	80114d0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011596:	2300      	movs	r3, #0
 8011598:	61fb      	str	r3, [r7, #28]
 801159a:	e004      	b.n	80115a6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 801159c:	683b      	ldr	r3, [r7, #0]
 801159e:	2200      	movs	r2, #0
 80115a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80115a2:	2301      	movs	r3, #1
 80115a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80115a6:	f7fe f8df 	bl	800f768 <vPortExitCritical>

	return xReturn;
 80115aa:	69fb      	ldr	r3, [r7, #28]
}
 80115ac:	4618      	mov	r0, r3
 80115ae:	3720      	adds	r7, #32
 80115b0:	46bd      	mov	sp, r7
 80115b2:	bd80      	pop	{r7, pc}
 80115b4:	200272cc 	.word	0x200272cc
 80115b8:	200272e0 	.word	0x200272e0

080115bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80115bc:	b480      	push	{r7}
 80115be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80115c0:	4b03      	ldr	r3, [pc, #12]	; (80115d0 <vTaskMissedYield+0x14>)
 80115c2:	2201      	movs	r2, #1
 80115c4:	601a      	str	r2, [r3, #0]
}
 80115c6:	bf00      	nop
 80115c8:	46bd      	mov	sp, r7
 80115ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ce:	4770      	bx	lr
 80115d0:	200272dc 	.word	0x200272dc

080115d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80115d4:	b580      	push	{r7, lr}
 80115d6:	b084      	sub	sp, #16
 80115d8:	af00      	add	r7, sp, #0
 80115da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80115dc:	f000 f8a6 	bl	801172c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80115e0:	4b17      	ldr	r3, [pc, #92]	; (8011640 <prvIdleTask+0x6c>)
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	2b01      	cmp	r3, #1
 80115e6:	d907      	bls.n	80115f8 <prvIdleTask+0x24>
			{
				taskYIELD();
 80115e8:	4b16      	ldr	r3, [pc, #88]	; (8011644 <prvIdleTask+0x70>)
 80115ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80115ee:	601a      	str	r2, [r3, #0]
 80115f0:	f3bf 8f4f 	dsb	sy
 80115f4:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 80115f8:	f7ff fc60 	bl	8010ebc <prvGetExpectedIdleTime>
 80115fc:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 80115fe:	68fb      	ldr	r3, [r7, #12]
 8011600:	2b01      	cmp	r3, #1
 8011602:	d9eb      	bls.n	80115dc <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 8011604:	f7ff fc4c 	bl	8010ea0 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 8011608:	4b0f      	ldr	r3, [pc, #60]	; (8011648 <prvIdleTask+0x74>)
 801160a:	681a      	ldr	r2, [r3, #0]
 801160c:	4b0f      	ldr	r3, [pc, #60]	; (801164c <prvIdleTask+0x78>)
 801160e:	681b      	ldr	r3, [r3, #0]
 8011610:	429a      	cmp	r2, r3
 8011612:	d209      	bcs.n	8011628 <prvIdleTask+0x54>
 8011614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011618:	f383 8811 	msr	BASEPRI, r3
 801161c:	f3bf 8f6f 	isb	sy
 8011620:	f3bf 8f4f 	dsb	sy
 8011624:	60bb      	str	r3, [r7, #8]
 8011626:	e7fe      	b.n	8011626 <prvIdleTask+0x52>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 8011628:	f7ff fc48 	bl	8010ebc <prvGetExpectedIdleTime>
 801162c:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	2b01      	cmp	r3, #1
 8011632:	d902      	bls.n	801163a <prvIdleTask+0x66>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 8011634:	68f8      	ldr	r0, [r7, #12]
 8011636:	f7f0 fe5f 	bl	80022f8 <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 801163a:	f7ff fc77 	bl	8010f2c <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 801163e:	e7cd      	b.n	80115dc <prvIdleTask+0x8>
 8011640:	20026df8 	.word	0x20026df8
 8011644:	e000ed04 	.word	0xe000ed04
 8011648:	200272e8 	.word	0x200272e8
 801164c:	200272cc 	.word	0x200272cc

08011650 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 8011650:	b480      	push	{r7}
 8011652:	b083      	sub	sp, #12
 8011654:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 8011656:	2301      	movs	r3, #1
 8011658:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 801165a:	2301      	movs	r3, #1
 801165c:	71fb      	strb	r3, [r7, #7]

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 801165e:	4b0f      	ldr	r3, [pc, #60]	; (801169c <eTaskConfirmSleepModeStatus+0x4c>)
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	2b00      	cmp	r3, #0
 8011664:	d002      	beq.n	801166c <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 8011666:	2300      	movs	r3, #0
 8011668:	71fb      	strb	r3, [r7, #7]
 801166a:	e010      	b.n	801168e <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 801166c:	4b0c      	ldr	r3, [pc, #48]	; (80116a0 <eTaskConfirmSleepModeStatus+0x50>)
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	2b00      	cmp	r3, #0
 8011672:	d002      	beq.n	801167a <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 8011674:	2300      	movs	r3, #0
 8011676:	71fb      	strb	r3, [r7, #7]
 8011678:	e009      	b.n	801168e <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 801167a:	4b0a      	ldr	r3, [pc, #40]	; (80116a4 <eTaskConfirmSleepModeStatus+0x54>)
 801167c:	681a      	ldr	r2, [r3, #0]
 801167e:	4b0a      	ldr	r3, [pc, #40]	; (80116a8 <eTaskConfirmSleepModeStatus+0x58>)
 8011680:	6819      	ldr	r1, [r3, #0]
 8011682:	683b      	ldr	r3, [r7, #0]
 8011684:	1acb      	subs	r3, r1, r3
 8011686:	429a      	cmp	r2, r3
 8011688:	d101      	bne.n	801168e <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 801168a:	2302      	movs	r3, #2
 801168c:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 801168e:	79fb      	ldrb	r3, [r7, #7]
	}
 8011690:	4618      	mov	r0, r3
 8011692:	370c      	adds	r7, #12
 8011694:	46bd      	mov	sp, r7
 8011696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801169a:	4770      	bx	lr
 801169c:	20027288 	.word	0x20027288
 80116a0:	200272dc 	.word	0x200272dc
 80116a4:	200272b4 	.word	0x200272b4
 80116a8:	200272c8 	.word	0x200272c8

080116ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80116ac:	b580      	push	{r7, lr}
 80116ae:	b082      	sub	sp, #8
 80116b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80116b2:	2300      	movs	r3, #0
 80116b4:	607b      	str	r3, [r7, #4]
 80116b6:	e00c      	b.n	80116d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80116b8:	687a      	ldr	r2, [r7, #4]
 80116ba:	4613      	mov	r3, r2
 80116bc:	009b      	lsls	r3, r3, #2
 80116be:	4413      	add	r3, r2
 80116c0:	009b      	lsls	r3, r3, #2
 80116c2:	4a12      	ldr	r2, [pc, #72]	; (801170c <prvInitialiseTaskLists+0x60>)
 80116c4:	4413      	add	r3, r2
 80116c6:	4618      	mov	r0, r3
 80116c8:	f7fd fe48 	bl	800f35c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	3301      	adds	r3, #1
 80116d0:	607b      	str	r3, [r7, #4]
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	2b37      	cmp	r3, #55	; 0x37
 80116d6:	d9ef      	bls.n	80116b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80116d8:	480d      	ldr	r0, [pc, #52]	; (8011710 <prvInitialiseTaskLists+0x64>)
 80116da:	f7fd fe3f 	bl	800f35c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80116de:	480d      	ldr	r0, [pc, #52]	; (8011714 <prvInitialiseTaskLists+0x68>)
 80116e0:	f7fd fe3c 	bl	800f35c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80116e4:	480c      	ldr	r0, [pc, #48]	; (8011718 <prvInitialiseTaskLists+0x6c>)
 80116e6:	f7fd fe39 	bl	800f35c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80116ea:	480c      	ldr	r0, [pc, #48]	; (801171c <prvInitialiseTaskLists+0x70>)
 80116ec:	f7fd fe36 	bl	800f35c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80116f0:	480b      	ldr	r0, [pc, #44]	; (8011720 <prvInitialiseTaskLists+0x74>)
 80116f2:	f7fd fe33 	bl	800f35c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80116f6:	4b0b      	ldr	r3, [pc, #44]	; (8011724 <prvInitialiseTaskLists+0x78>)
 80116f8:	4a05      	ldr	r2, [pc, #20]	; (8011710 <prvInitialiseTaskLists+0x64>)
 80116fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80116fc:	4b0a      	ldr	r3, [pc, #40]	; (8011728 <prvInitialiseTaskLists+0x7c>)
 80116fe:	4a05      	ldr	r2, [pc, #20]	; (8011714 <prvInitialiseTaskLists+0x68>)
 8011700:	601a      	str	r2, [r3, #0]
}
 8011702:	bf00      	nop
 8011704:	3708      	adds	r7, #8
 8011706:	46bd      	mov	sp, r7
 8011708:	bd80      	pop	{r7, pc}
 801170a:	bf00      	nop
 801170c:	20026df8 	.word	0x20026df8
 8011710:	20027258 	.word	0x20027258
 8011714:	2002726c 	.word	0x2002726c
 8011718:	20027288 	.word	0x20027288
 801171c:	2002729c 	.word	0x2002729c
 8011720:	200272b4 	.word	0x200272b4
 8011724:	20027280 	.word	0x20027280
 8011728:	20027284 	.word	0x20027284

0801172c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801172c:	b580      	push	{r7, lr}
 801172e:	b082      	sub	sp, #8
 8011730:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011732:	e019      	b.n	8011768 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011734:	f7fd ffea 	bl	800f70c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8011738:	4b0f      	ldr	r3, [pc, #60]	; (8011778 <prvCheckTasksWaitingTermination+0x4c>)
 801173a:	68db      	ldr	r3, [r3, #12]
 801173c:	68db      	ldr	r3, [r3, #12]
 801173e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	3304      	adds	r3, #4
 8011744:	4618      	mov	r0, r3
 8011746:	f7fd fe93 	bl	800f470 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801174a:	4b0c      	ldr	r3, [pc, #48]	; (801177c <prvCheckTasksWaitingTermination+0x50>)
 801174c:	681b      	ldr	r3, [r3, #0]
 801174e:	3b01      	subs	r3, #1
 8011750:	4a0a      	ldr	r2, [pc, #40]	; (801177c <prvCheckTasksWaitingTermination+0x50>)
 8011752:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011754:	4b0a      	ldr	r3, [pc, #40]	; (8011780 <prvCheckTasksWaitingTermination+0x54>)
 8011756:	681b      	ldr	r3, [r3, #0]
 8011758:	3b01      	subs	r3, #1
 801175a:	4a09      	ldr	r2, [pc, #36]	; (8011780 <prvCheckTasksWaitingTermination+0x54>)
 801175c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801175e:	f7fe f803 	bl	800f768 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011762:	6878      	ldr	r0, [r7, #4]
 8011764:	f000 f80e 	bl	8011784 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011768:	4b05      	ldr	r3, [pc, #20]	; (8011780 <prvCheckTasksWaitingTermination+0x54>)
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	2b00      	cmp	r3, #0
 801176e:	d1e1      	bne.n	8011734 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011770:	bf00      	nop
 8011772:	3708      	adds	r7, #8
 8011774:	46bd      	mov	sp, r7
 8011776:	bd80      	pop	{r7, pc}
 8011778:	2002729c 	.word	0x2002729c
 801177c:	200272c8 	.word	0x200272c8
 8011780:	200272b0 	.word	0x200272b0

08011784 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011784:	b580      	push	{r7, lr}
 8011786:	b084      	sub	sp, #16
 8011788:	af00      	add	r7, sp, #0
 801178a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8011792:	2b00      	cmp	r3, #0
 8011794:	d108      	bne.n	80117a8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801179a:	4618      	mov	r0, r3
 801179c:	f7fd fcc8 	bl	800f130 <vPortFree>
				vPortFree( pxTCB );
 80117a0:	6878      	ldr	r0, [r7, #4]
 80117a2:	f7fd fcc5 	bl	800f130 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80117a6:	e017      	b.n	80117d8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80117ae:	2b01      	cmp	r3, #1
 80117b0:	d103      	bne.n	80117ba <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80117b2:	6878      	ldr	r0, [r7, #4]
 80117b4:	f7fd fcbc 	bl	800f130 <vPortFree>
	}
 80117b8:	e00e      	b.n	80117d8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80117c0:	2b02      	cmp	r3, #2
 80117c2:	d009      	beq.n	80117d8 <prvDeleteTCB+0x54>
 80117c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117c8:	f383 8811 	msr	BASEPRI, r3
 80117cc:	f3bf 8f6f 	isb	sy
 80117d0:	f3bf 8f4f 	dsb	sy
 80117d4:	60fb      	str	r3, [r7, #12]
 80117d6:	e7fe      	b.n	80117d6 <prvDeleteTCB+0x52>
	}
 80117d8:	bf00      	nop
 80117da:	3710      	adds	r7, #16
 80117dc:	46bd      	mov	sp, r7
 80117de:	bd80      	pop	{r7, pc}

080117e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80117e0:	b480      	push	{r7}
 80117e2:	b083      	sub	sp, #12
 80117e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80117e6:	4b0f      	ldr	r3, [pc, #60]	; (8011824 <prvResetNextTaskUnblockTime+0x44>)
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d101      	bne.n	80117f4 <prvResetNextTaskUnblockTime+0x14>
 80117f0:	2301      	movs	r3, #1
 80117f2:	e000      	b.n	80117f6 <prvResetNextTaskUnblockTime+0x16>
 80117f4:	2300      	movs	r3, #0
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d004      	beq.n	8011804 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80117fa:	4b0b      	ldr	r3, [pc, #44]	; (8011828 <prvResetNextTaskUnblockTime+0x48>)
 80117fc:	f04f 32ff 	mov.w	r2, #4294967295
 8011800:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011802:	e008      	b.n	8011816 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8011804:	4b07      	ldr	r3, [pc, #28]	; (8011824 <prvResetNextTaskUnblockTime+0x44>)
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	68db      	ldr	r3, [r3, #12]
 801180a:	68db      	ldr	r3, [r3, #12]
 801180c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	685b      	ldr	r3, [r3, #4]
 8011812:	4a05      	ldr	r2, [pc, #20]	; (8011828 <prvResetNextTaskUnblockTime+0x48>)
 8011814:	6013      	str	r3, [r2, #0]
}
 8011816:	bf00      	nop
 8011818:	370c      	adds	r7, #12
 801181a:	46bd      	mov	sp, r7
 801181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011820:	4770      	bx	lr
 8011822:	bf00      	nop
 8011824:	20027280 	.word	0x20027280
 8011828:	200272e8 	.word	0x200272e8

0801182c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 801182c:	b480      	push	{r7}
 801182e:	b083      	sub	sp, #12
 8011830:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8011832:	4b05      	ldr	r3, [pc, #20]	; (8011848 <xTaskGetCurrentTaskHandle+0x1c>)
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	607b      	str	r3, [r7, #4]

		return xReturn;
 8011838:	687b      	ldr	r3, [r7, #4]
	}
 801183a:	4618      	mov	r0, r3
 801183c:	370c      	adds	r7, #12
 801183e:	46bd      	mov	sp, r7
 8011840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011844:	4770      	bx	lr
 8011846:	bf00      	nop
 8011848:	20026df4 	.word	0x20026df4

0801184c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801184c:	b480      	push	{r7}
 801184e:	b083      	sub	sp, #12
 8011850:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011852:	4b0b      	ldr	r3, [pc, #44]	; (8011880 <xTaskGetSchedulerState+0x34>)
 8011854:	681b      	ldr	r3, [r3, #0]
 8011856:	2b00      	cmp	r3, #0
 8011858:	d102      	bne.n	8011860 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801185a:	2301      	movs	r3, #1
 801185c:	607b      	str	r3, [r7, #4]
 801185e:	e008      	b.n	8011872 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011860:	4b08      	ldr	r3, [pc, #32]	; (8011884 <xTaskGetSchedulerState+0x38>)
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	2b00      	cmp	r3, #0
 8011866:	d102      	bne.n	801186e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011868:	2302      	movs	r3, #2
 801186a:	607b      	str	r3, [r7, #4]
 801186c:	e001      	b.n	8011872 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801186e:	2300      	movs	r3, #0
 8011870:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011872:	687b      	ldr	r3, [r7, #4]
	}
 8011874:	4618      	mov	r0, r3
 8011876:	370c      	adds	r7, #12
 8011878:	46bd      	mov	sp, r7
 801187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801187e:	4770      	bx	lr
 8011880:	200272d4 	.word	0x200272d4
 8011884:	200272f0 	.word	0x200272f0

08011888 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8011888:	b580      	push	{r7, lr}
 801188a:	b084      	sub	sp, #16
 801188c:	af00      	add	r7, sp, #0
 801188e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8011894:	2300      	movs	r3, #0
 8011896:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	2b00      	cmp	r3, #0
 801189c:	d056      	beq.n	801194c <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801189e:	68bb      	ldr	r3, [r7, #8]
 80118a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118a2:	4b2d      	ldr	r3, [pc, #180]	; (8011958 <xTaskPriorityInherit+0xd0>)
 80118a4:	681b      	ldr	r3, [r3, #0]
 80118a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118a8:	429a      	cmp	r2, r3
 80118aa:	d246      	bcs.n	801193a <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80118ac:	68bb      	ldr	r3, [r7, #8]
 80118ae:	699b      	ldr	r3, [r3, #24]
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	db06      	blt.n	80118c2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80118b4:	4b28      	ldr	r3, [pc, #160]	; (8011958 <xTaskPriorityInherit+0xd0>)
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118ba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80118be:	68bb      	ldr	r3, [r7, #8]
 80118c0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80118c2:	68bb      	ldr	r3, [r7, #8]
 80118c4:	6959      	ldr	r1, [r3, #20]
 80118c6:	68bb      	ldr	r3, [r7, #8]
 80118c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118ca:	4613      	mov	r3, r2
 80118cc:	009b      	lsls	r3, r3, #2
 80118ce:	4413      	add	r3, r2
 80118d0:	009b      	lsls	r3, r3, #2
 80118d2:	4a22      	ldr	r2, [pc, #136]	; (801195c <xTaskPriorityInherit+0xd4>)
 80118d4:	4413      	add	r3, r2
 80118d6:	4299      	cmp	r1, r3
 80118d8:	d101      	bne.n	80118de <xTaskPriorityInherit+0x56>
 80118da:	2301      	movs	r3, #1
 80118dc:	e000      	b.n	80118e0 <xTaskPriorityInherit+0x58>
 80118de:	2300      	movs	r3, #0
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d022      	beq.n	801192a <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80118e4:	68bb      	ldr	r3, [r7, #8]
 80118e6:	3304      	adds	r3, #4
 80118e8:	4618      	mov	r0, r3
 80118ea:	f7fd fdc1 	bl	800f470 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80118ee:	4b1a      	ldr	r3, [pc, #104]	; (8011958 <xTaskPriorityInherit+0xd0>)
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118f4:	68bb      	ldr	r3, [r7, #8]
 80118f6:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80118f8:	68bb      	ldr	r3, [r7, #8]
 80118fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118fc:	4b18      	ldr	r3, [pc, #96]	; (8011960 <xTaskPriorityInherit+0xd8>)
 80118fe:	681b      	ldr	r3, [r3, #0]
 8011900:	429a      	cmp	r2, r3
 8011902:	d903      	bls.n	801190c <xTaskPriorityInherit+0x84>
 8011904:	68bb      	ldr	r3, [r7, #8]
 8011906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011908:	4a15      	ldr	r2, [pc, #84]	; (8011960 <xTaskPriorityInherit+0xd8>)
 801190a:	6013      	str	r3, [r2, #0]
 801190c:	68bb      	ldr	r3, [r7, #8]
 801190e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011910:	4613      	mov	r3, r2
 8011912:	009b      	lsls	r3, r3, #2
 8011914:	4413      	add	r3, r2
 8011916:	009b      	lsls	r3, r3, #2
 8011918:	4a10      	ldr	r2, [pc, #64]	; (801195c <xTaskPriorityInherit+0xd4>)
 801191a:	441a      	add	r2, r3
 801191c:	68bb      	ldr	r3, [r7, #8]
 801191e:	3304      	adds	r3, #4
 8011920:	4619      	mov	r1, r3
 8011922:	4610      	mov	r0, r2
 8011924:	f7fd fd47 	bl	800f3b6 <vListInsertEnd>
 8011928:	e004      	b.n	8011934 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801192a:	4b0b      	ldr	r3, [pc, #44]	; (8011958 <xTaskPriorityInherit+0xd0>)
 801192c:	681b      	ldr	r3, [r3, #0]
 801192e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011930:	68bb      	ldr	r3, [r7, #8]
 8011932:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8011934:	2301      	movs	r3, #1
 8011936:	60fb      	str	r3, [r7, #12]
 8011938:	e008      	b.n	801194c <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801193a:	68bb      	ldr	r3, [r7, #8]
 801193c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801193e:	4b06      	ldr	r3, [pc, #24]	; (8011958 <xTaskPriorityInherit+0xd0>)
 8011940:	681b      	ldr	r3, [r3, #0]
 8011942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011944:	429a      	cmp	r2, r3
 8011946:	d201      	bcs.n	801194c <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8011948:	2301      	movs	r3, #1
 801194a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801194c:	68fb      	ldr	r3, [r7, #12]
	}
 801194e:	4618      	mov	r0, r3
 8011950:	3710      	adds	r7, #16
 8011952:	46bd      	mov	sp, r7
 8011954:	bd80      	pop	{r7, pc}
 8011956:	bf00      	nop
 8011958:	20026df4 	.word	0x20026df4
 801195c:	20026df8 	.word	0x20026df8
 8011960:	200272d0 	.word	0x200272d0

08011964 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011964:	b580      	push	{r7, lr}
 8011966:	b086      	sub	sp, #24
 8011968:	af00      	add	r7, sp, #0
 801196a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011970:	2300      	movs	r3, #0
 8011972:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	2b00      	cmp	r3, #0
 8011978:	d054      	beq.n	8011a24 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801197a:	4b2d      	ldr	r3, [pc, #180]	; (8011a30 <xTaskPriorityDisinherit+0xcc>)
 801197c:	681b      	ldr	r3, [r3, #0]
 801197e:	693a      	ldr	r2, [r7, #16]
 8011980:	429a      	cmp	r2, r3
 8011982:	d009      	beq.n	8011998 <xTaskPriorityDisinherit+0x34>
 8011984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011988:	f383 8811 	msr	BASEPRI, r3
 801198c:	f3bf 8f6f 	isb	sy
 8011990:	f3bf 8f4f 	dsb	sy
 8011994:	60fb      	str	r3, [r7, #12]
 8011996:	e7fe      	b.n	8011996 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8011998:	693b      	ldr	r3, [r7, #16]
 801199a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801199c:	2b00      	cmp	r3, #0
 801199e:	d109      	bne.n	80119b4 <xTaskPriorityDisinherit+0x50>
 80119a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119a4:	f383 8811 	msr	BASEPRI, r3
 80119a8:	f3bf 8f6f 	isb	sy
 80119ac:	f3bf 8f4f 	dsb	sy
 80119b0:	60bb      	str	r3, [r7, #8]
 80119b2:	e7fe      	b.n	80119b2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80119b4:	693b      	ldr	r3, [r7, #16]
 80119b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80119b8:	1e5a      	subs	r2, r3, #1
 80119ba:	693b      	ldr	r3, [r7, #16]
 80119bc:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80119be:	693b      	ldr	r3, [r7, #16]
 80119c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119c2:	693b      	ldr	r3, [r7, #16]
 80119c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80119c6:	429a      	cmp	r2, r3
 80119c8:	d02c      	beq.n	8011a24 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80119ca:	693b      	ldr	r3, [r7, #16]
 80119cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d128      	bne.n	8011a24 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80119d2:	693b      	ldr	r3, [r7, #16]
 80119d4:	3304      	adds	r3, #4
 80119d6:	4618      	mov	r0, r3
 80119d8:	f7fd fd4a 	bl	800f470 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80119dc:	693b      	ldr	r3, [r7, #16]
 80119de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80119e0:	693b      	ldr	r3, [r7, #16]
 80119e2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80119e4:	693b      	ldr	r3, [r7, #16]
 80119e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119e8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80119ec:	693b      	ldr	r3, [r7, #16]
 80119ee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80119f0:	693b      	ldr	r3, [r7, #16]
 80119f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119f4:	4b0f      	ldr	r3, [pc, #60]	; (8011a34 <xTaskPriorityDisinherit+0xd0>)
 80119f6:	681b      	ldr	r3, [r3, #0]
 80119f8:	429a      	cmp	r2, r3
 80119fa:	d903      	bls.n	8011a04 <xTaskPriorityDisinherit+0xa0>
 80119fc:	693b      	ldr	r3, [r7, #16]
 80119fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a00:	4a0c      	ldr	r2, [pc, #48]	; (8011a34 <xTaskPriorityDisinherit+0xd0>)
 8011a02:	6013      	str	r3, [r2, #0]
 8011a04:	693b      	ldr	r3, [r7, #16]
 8011a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a08:	4613      	mov	r3, r2
 8011a0a:	009b      	lsls	r3, r3, #2
 8011a0c:	4413      	add	r3, r2
 8011a0e:	009b      	lsls	r3, r3, #2
 8011a10:	4a09      	ldr	r2, [pc, #36]	; (8011a38 <xTaskPriorityDisinherit+0xd4>)
 8011a12:	441a      	add	r2, r3
 8011a14:	693b      	ldr	r3, [r7, #16]
 8011a16:	3304      	adds	r3, #4
 8011a18:	4619      	mov	r1, r3
 8011a1a:	4610      	mov	r0, r2
 8011a1c:	f7fd fccb 	bl	800f3b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011a20:	2301      	movs	r3, #1
 8011a22:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011a24:	697b      	ldr	r3, [r7, #20]
	}
 8011a26:	4618      	mov	r0, r3
 8011a28:	3718      	adds	r7, #24
 8011a2a:	46bd      	mov	sp, r7
 8011a2c:	bd80      	pop	{r7, pc}
 8011a2e:	bf00      	nop
 8011a30:	20026df4 	.word	0x20026df4
 8011a34:	200272d0 	.word	0x200272d0
 8011a38:	20026df8 	.word	0x20026df8

08011a3c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8011a3c:	b580      	push	{r7, lr}
 8011a3e:	b088      	sub	sp, #32
 8011a40:	af00      	add	r7, sp, #0
 8011a42:	6078      	str	r0, [r7, #4]
 8011a44:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8011a4a:	2301      	movs	r3, #1
 8011a4c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d06d      	beq.n	8011b30 <vTaskPriorityDisinheritAfterTimeout+0xf4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8011a54:	69bb      	ldr	r3, [r7, #24]
 8011a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d109      	bne.n	8011a70 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8011a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a60:	f383 8811 	msr	BASEPRI, r3
 8011a64:	f3bf 8f6f 	isb	sy
 8011a68:	f3bf 8f4f 	dsb	sy
 8011a6c:	60fb      	str	r3, [r7, #12]
 8011a6e:	e7fe      	b.n	8011a6e <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011a70:	69bb      	ldr	r3, [r7, #24]
 8011a72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011a74:	683a      	ldr	r2, [r7, #0]
 8011a76:	429a      	cmp	r2, r3
 8011a78:	d902      	bls.n	8011a80 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8011a7a:	683b      	ldr	r3, [r7, #0]
 8011a7c:	61fb      	str	r3, [r7, #28]
 8011a7e:	e002      	b.n	8011a86 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8011a80:	69bb      	ldr	r3, [r7, #24]
 8011a82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011a84:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8011a86:	69bb      	ldr	r3, [r7, #24]
 8011a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a8a:	69fa      	ldr	r2, [r7, #28]
 8011a8c:	429a      	cmp	r2, r3
 8011a8e:	d04f      	beq.n	8011b30 <vTaskPriorityDisinheritAfterTimeout+0xf4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011a90:	69bb      	ldr	r3, [r7, #24]
 8011a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011a94:	697a      	ldr	r2, [r7, #20]
 8011a96:	429a      	cmp	r2, r3
 8011a98:	d14a      	bne.n	8011b30 <vTaskPriorityDisinheritAfterTimeout+0xf4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8011a9a:	4b27      	ldr	r3, [pc, #156]	; (8011b38 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	69ba      	ldr	r2, [r7, #24]
 8011aa0:	429a      	cmp	r2, r3
 8011aa2:	d109      	bne.n	8011ab8 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8011aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011aa8:	f383 8811 	msr	BASEPRI, r3
 8011aac:	f3bf 8f6f 	isb	sy
 8011ab0:	f3bf 8f4f 	dsb	sy
 8011ab4:	60bb      	str	r3, [r7, #8]
 8011ab6:	e7fe      	b.n	8011ab6 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8011ab8:	69bb      	ldr	r3, [r7, #24]
 8011aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011abc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8011abe:	69bb      	ldr	r3, [r7, #24]
 8011ac0:	69fa      	ldr	r2, [r7, #28]
 8011ac2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011ac4:	69bb      	ldr	r3, [r7, #24]
 8011ac6:	699b      	ldr	r3, [r3, #24]
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	db04      	blt.n	8011ad6 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011acc:	69fb      	ldr	r3, [r7, #28]
 8011ace:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011ad2:	69bb      	ldr	r3, [r7, #24]
 8011ad4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011ad6:	69bb      	ldr	r3, [r7, #24]
 8011ad8:	6959      	ldr	r1, [r3, #20]
 8011ada:	693a      	ldr	r2, [r7, #16]
 8011adc:	4613      	mov	r3, r2
 8011ade:	009b      	lsls	r3, r3, #2
 8011ae0:	4413      	add	r3, r2
 8011ae2:	009b      	lsls	r3, r3, #2
 8011ae4:	4a15      	ldr	r2, [pc, #84]	; (8011b3c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8011ae6:	4413      	add	r3, r2
 8011ae8:	4299      	cmp	r1, r3
 8011aea:	d101      	bne.n	8011af0 <vTaskPriorityDisinheritAfterTimeout+0xb4>
 8011aec:	2301      	movs	r3, #1
 8011aee:	e000      	b.n	8011af2 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8011af0:	2300      	movs	r3, #0
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d01c      	beq.n	8011b30 <vTaskPriorityDisinheritAfterTimeout+0xf4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011af6:	69bb      	ldr	r3, [r7, #24]
 8011af8:	3304      	adds	r3, #4
 8011afa:	4618      	mov	r0, r3
 8011afc:	f7fd fcb8 	bl	800f470 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8011b00:	69bb      	ldr	r3, [r7, #24]
 8011b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b04:	4b0e      	ldr	r3, [pc, #56]	; (8011b40 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8011b06:	681b      	ldr	r3, [r3, #0]
 8011b08:	429a      	cmp	r2, r3
 8011b0a:	d903      	bls.n	8011b14 <vTaskPriorityDisinheritAfterTimeout+0xd8>
 8011b0c:	69bb      	ldr	r3, [r7, #24]
 8011b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b10:	4a0b      	ldr	r2, [pc, #44]	; (8011b40 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8011b12:	6013      	str	r3, [r2, #0]
 8011b14:	69bb      	ldr	r3, [r7, #24]
 8011b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b18:	4613      	mov	r3, r2
 8011b1a:	009b      	lsls	r3, r3, #2
 8011b1c:	4413      	add	r3, r2
 8011b1e:	009b      	lsls	r3, r3, #2
 8011b20:	4a06      	ldr	r2, [pc, #24]	; (8011b3c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8011b22:	441a      	add	r2, r3
 8011b24:	69bb      	ldr	r3, [r7, #24]
 8011b26:	3304      	adds	r3, #4
 8011b28:	4619      	mov	r1, r3
 8011b2a:	4610      	mov	r0, r2
 8011b2c:	f7fd fc43 	bl	800f3b6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011b30:	bf00      	nop
 8011b32:	3720      	adds	r7, #32
 8011b34:	46bd      	mov	sp, r7
 8011b36:	bd80      	pop	{r7, pc}
 8011b38:	20026df4 	.word	0x20026df4
 8011b3c:	20026df8 	.word	0x20026df8
 8011b40:	200272d0 	.word	0x200272d0

08011b44 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8011b44:	b480      	push	{r7}
 8011b46:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8011b48:	4b07      	ldr	r3, [pc, #28]	; (8011b68 <pvTaskIncrementMutexHeldCount+0x24>)
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d004      	beq.n	8011b5a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8011b50:	4b05      	ldr	r3, [pc, #20]	; (8011b68 <pvTaskIncrementMutexHeldCount+0x24>)
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011b56:	3201      	adds	r2, #1
 8011b58:	655a      	str	r2, [r3, #84]	; 0x54
		}

		return pxCurrentTCB;
 8011b5a:	4b03      	ldr	r3, [pc, #12]	; (8011b68 <pvTaskIncrementMutexHeldCount+0x24>)
 8011b5c:	681b      	ldr	r3, [r3, #0]
	}
 8011b5e:	4618      	mov	r0, r3
 8011b60:	46bd      	mov	sp, r7
 8011b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b66:	4770      	bx	lr
 8011b68:	20026df4 	.word	0x20026df4

08011b6c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8011b6c:	b580      	push	{r7, lr}
 8011b6e:	b086      	sub	sp, #24
 8011b70:	af00      	add	r7, sp, #0
 8011b72:	60f8      	str	r0, [r7, #12]
 8011b74:	60b9      	str	r1, [r7, #8]
 8011b76:	607a      	str	r2, [r7, #4]
 8011b78:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8011b7a:	f7fd fdc7 	bl	800f70c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8011b7e:	4b26      	ldr	r3, [pc, #152]	; (8011c18 <xTaskNotifyWait+0xac>)
 8011b80:	681b      	ldr	r3, [r3, #0]
 8011b82:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8011b86:	b2db      	uxtb	r3, r3
 8011b88:	2b02      	cmp	r3, #2
 8011b8a:	d01a      	beq.n	8011bc2 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8011b8c:	4b22      	ldr	r3, [pc, #136]	; (8011c18 <xTaskNotifyWait+0xac>)
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8011b92:	68fa      	ldr	r2, [r7, #12]
 8011b94:	43d2      	mvns	r2, r2
 8011b96:	400a      	ands	r2, r1
 8011b98:	65da      	str	r2, [r3, #92]	; 0x5c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8011b9a:	4b1f      	ldr	r3, [pc, #124]	; (8011c18 <xTaskNotifyWait+0xac>)
 8011b9c:	681b      	ldr	r3, [r3, #0]
 8011b9e:	2201      	movs	r2, #1
 8011ba0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

				if( xTicksToWait > ( TickType_t ) 0 )
 8011ba4:	683b      	ldr	r3, [r7, #0]
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d00b      	beq.n	8011bc2 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011baa:	2101      	movs	r1, #1
 8011bac:	6838      	ldr	r0, [r7, #0]
 8011bae:	f000 f9a3 	bl	8011ef8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8011bb2:	4b1a      	ldr	r3, [pc, #104]	; (8011c1c <xTaskNotifyWait+0xb0>)
 8011bb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011bb8:	601a      	str	r2, [r3, #0]
 8011bba:	f3bf 8f4f 	dsb	sy
 8011bbe:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8011bc2:	f7fd fdd1 	bl	800f768 <vPortExitCritical>

		taskENTER_CRITICAL();
 8011bc6:	f7fd fda1 	bl	800f70c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d004      	beq.n	8011bda <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8011bd0:	4b11      	ldr	r3, [pc, #68]	; (8011c18 <xTaskNotifyWait+0xac>)
 8011bd2:	681b      	ldr	r3, [r3, #0]
 8011bd4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8011bda:	4b0f      	ldr	r3, [pc, #60]	; (8011c18 <xTaskNotifyWait+0xac>)
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8011be2:	b2db      	uxtb	r3, r3
 8011be4:	2b02      	cmp	r3, #2
 8011be6:	d002      	beq.n	8011bee <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8011be8:	2300      	movs	r3, #0
 8011bea:	617b      	str	r3, [r7, #20]
 8011bec:	e008      	b.n	8011c00 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8011bee:	4b0a      	ldr	r3, [pc, #40]	; (8011c18 <xTaskNotifyWait+0xac>)
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8011bf4:	68ba      	ldr	r2, [r7, #8]
 8011bf6:	43d2      	mvns	r2, r2
 8011bf8:	400a      	ands	r2, r1
 8011bfa:	65da      	str	r2, [r3, #92]	; 0x5c
				xReturn = pdTRUE;
 8011bfc:	2301      	movs	r3, #1
 8011bfe:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011c00:	4b05      	ldr	r3, [pc, #20]	; (8011c18 <xTaskNotifyWait+0xac>)
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	2200      	movs	r2, #0
 8011c06:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		}
		taskEXIT_CRITICAL();
 8011c0a:	f7fd fdad 	bl	800f768 <vPortExitCritical>

		return xReturn;
 8011c0e:	697b      	ldr	r3, [r7, #20]
	}
 8011c10:	4618      	mov	r0, r3
 8011c12:	3718      	adds	r7, #24
 8011c14:	46bd      	mov	sp, r7
 8011c16:	bd80      	pop	{r7, pc}
 8011c18:	20026df4 	.word	0x20026df4
 8011c1c:	e000ed04 	.word	0xe000ed04

08011c20 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8011c20:	b580      	push	{r7, lr}
 8011c22:	b08a      	sub	sp, #40	; 0x28
 8011c24:	af00      	add	r7, sp, #0
 8011c26:	60f8      	str	r0, [r7, #12]
 8011c28:	60b9      	str	r1, [r7, #8]
 8011c2a:	603b      	str	r3, [r7, #0]
 8011c2c:	4613      	mov	r3, r2
 8011c2e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8011c30:	2301      	movs	r3, #1
 8011c32:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8011c34:	68fb      	ldr	r3, [r7, #12]
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d109      	bne.n	8011c4e <xTaskGenericNotify+0x2e>
 8011c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c3e:	f383 8811 	msr	BASEPRI, r3
 8011c42:	f3bf 8f6f 	isb	sy
 8011c46:	f3bf 8f4f 	dsb	sy
 8011c4a:	61bb      	str	r3, [r7, #24]
 8011c4c:	e7fe      	b.n	8011c4c <xTaskGenericNotify+0x2c>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 8011c4e:	68fb      	ldr	r3, [r7, #12]
 8011c50:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8011c52:	f7fd fd5b 	bl	800f70c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8011c56:	683b      	ldr	r3, [r7, #0]
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d003      	beq.n	8011c64 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8011c5c:	6a3b      	ldr	r3, [r7, #32]
 8011c5e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011c60:	683b      	ldr	r3, [r7, #0]
 8011c62:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8011c64:	6a3b      	ldr	r3, [r7, #32]
 8011c66:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8011c6a:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8011c6c:	6a3b      	ldr	r3, [r7, #32]
 8011c6e:	2202      	movs	r2, #2
 8011c70:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

			switch( eAction )
 8011c74:	79fb      	ldrb	r3, [r7, #7]
 8011c76:	2b04      	cmp	r3, #4
 8011c78:	d827      	bhi.n	8011cca <xTaskGenericNotify+0xaa>
 8011c7a:	a201      	add	r2, pc, #4	; (adr r2, 8011c80 <xTaskGenericNotify+0x60>)
 8011c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c80:	08011ccb 	.word	0x08011ccb
 8011c84:	08011c95 	.word	0x08011c95
 8011c88:	08011ca3 	.word	0x08011ca3
 8011c8c:	08011caf 	.word	0x08011caf
 8011c90:	08011cb7 	.word	0x08011cb7
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8011c94:	6a3b      	ldr	r3, [r7, #32]
 8011c96:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011c98:	68bb      	ldr	r3, [r7, #8]
 8011c9a:	431a      	orrs	r2, r3
 8011c9c:	6a3b      	ldr	r3, [r7, #32]
 8011c9e:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8011ca0:	e013      	b.n	8011cca <xTaskGenericNotify+0xaa>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8011ca2:	6a3b      	ldr	r3, [r7, #32]
 8011ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011ca6:	1c5a      	adds	r2, r3, #1
 8011ca8:	6a3b      	ldr	r3, [r7, #32]
 8011caa:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8011cac:	e00d      	b.n	8011cca <xTaskGenericNotify+0xaa>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8011cae:	6a3b      	ldr	r3, [r7, #32]
 8011cb0:	68ba      	ldr	r2, [r7, #8]
 8011cb2:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8011cb4:	e009      	b.n	8011cca <xTaskGenericNotify+0xaa>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8011cb6:	7ffb      	ldrb	r3, [r7, #31]
 8011cb8:	2b02      	cmp	r3, #2
 8011cba:	d003      	beq.n	8011cc4 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8011cbc:	6a3b      	ldr	r3, [r7, #32]
 8011cbe:	68ba      	ldr	r2, [r7, #8]
 8011cc0:	65da      	str	r2, [r3, #92]	; 0x5c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8011cc2:	e001      	b.n	8011cc8 <xTaskGenericNotify+0xa8>
						xReturn = pdFAIL;
 8011cc4:	2300      	movs	r3, #0
 8011cc6:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8011cc8:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8011cca:	7ffb      	ldrb	r3, [r7, #31]
 8011ccc:	2b01      	cmp	r3, #1
 8011cce:	d13b      	bne.n	8011d48 <xTaskGenericNotify+0x128>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011cd0:	6a3b      	ldr	r3, [r7, #32]
 8011cd2:	3304      	adds	r3, #4
 8011cd4:	4618      	mov	r0, r3
 8011cd6:	f7fd fbcb 	bl	800f470 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8011cda:	6a3b      	ldr	r3, [r7, #32]
 8011cdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011cde:	4b1e      	ldr	r3, [pc, #120]	; (8011d58 <xTaskGenericNotify+0x138>)
 8011ce0:	681b      	ldr	r3, [r3, #0]
 8011ce2:	429a      	cmp	r2, r3
 8011ce4:	d903      	bls.n	8011cee <xTaskGenericNotify+0xce>
 8011ce6:	6a3b      	ldr	r3, [r7, #32]
 8011ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011cea:	4a1b      	ldr	r2, [pc, #108]	; (8011d58 <xTaskGenericNotify+0x138>)
 8011cec:	6013      	str	r3, [r2, #0]
 8011cee:	6a3b      	ldr	r3, [r7, #32]
 8011cf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011cf2:	4613      	mov	r3, r2
 8011cf4:	009b      	lsls	r3, r3, #2
 8011cf6:	4413      	add	r3, r2
 8011cf8:	009b      	lsls	r3, r3, #2
 8011cfa:	4a18      	ldr	r2, [pc, #96]	; (8011d5c <xTaskGenericNotify+0x13c>)
 8011cfc:	441a      	add	r2, r3
 8011cfe:	6a3b      	ldr	r3, [r7, #32]
 8011d00:	3304      	adds	r3, #4
 8011d02:	4619      	mov	r1, r3
 8011d04:	4610      	mov	r0, r2
 8011d06:	f7fd fb56 	bl	800f3b6 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8011d0a:	6a3b      	ldr	r3, [r7, #32]
 8011d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d009      	beq.n	8011d26 <xTaskGenericNotify+0x106>
 8011d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d16:	f383 8811 	msr	BASEPRI, r3
 8011d1a:	f3bf 8f6f 	isb	sy
 8011d1e:	f3bf 8f4f 	dsb	sy
 8011d22:	617b      	str	r3, [r7, #20]
 8011d24:	e7fe      	b.n	8011d24 <xTaskGenericNotify+0x104>
					the tick count equals xNextTaskUnblockTime.  However if
					tickless idling is used it might be more important to enter
					sleep mode at the earliest possible time - so reset
					xNextTaskUnblockTime here to ensure it is updated at the
					earliest possible time. */
					prvResetNextTaskUnblockTime();
 8011d26:	f7ff fd5b 	bl	80117e0 <prvResetNextTaskUnblockTime>
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011d2a:	6a3b      	ldr	r3, [r7, #32]
 8011d2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d2e:	4b0c      	ldr	r3, [pc, #48]	; (8011d60 <xTaskGenericNotify+0x140>)
 8011d30:	681b      	ldr	r3, [r3, #0]
 8011d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d34:	429a      	cmp	r2, r3
 8011d36:	d907      	bls.n	8011d48 <xTaskGenericNotify+0x128>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8011d38:	4b0a      	ldr	r3, [pc, #40]	; (8011d64 <xTaskGenericNotify+0x144>)
 8011d3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011d3e:	601a      	str	r2, [r3, #0]
 8011d40:	f3bf 8f4f 	dsb	sy
 8011d44:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8011d48:	f7fd fd0e 	bl	800f768 <vPortExitCritical>

		return xReturn;
 8011d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8011d4e:	4618      	mov	r0, r3
 8011d50:	3728      	adds	r7, #40	; 0x28
 8011d52:	46bd      	mov	sp, r7
 8011d54:	bd80      	pop	{r7, pc}
 8011d56:	bf00      	nop
 8011d58:	200272d0 	.word	0x200272d0
 8011d5c:	20026df8 	.word	0x20026df8
 8011d60:	20026df4 	.word	0x20026df4
 8011d64:	e000ed04 	.word	0xe000ed04

08011d68 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8011d68:	b580      	push	{r7, lr}
 8011d6a:	b08e      	sub	sp, #56	; 0x38
 8011d6c:	af00      	add	r7, sp, #0
 8011d6e:	60f8      	str	r0, [r7, #12]
 8011d70:	60b9      	str	r1, [r7, #8]
 8011d72:	603b      	str	r3, [r7, #0]
 8011d74:	4613      	mov	r3, r2
 8011d76:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8011d78:	2301      	movs	r3, #1
 8011d7a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8011d7c:	68fb      	ldr	r3, [r7, #12]
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d109      	bne.n	8011d96 <xTaskGenericNotifyFromISR+0x2e>
 8011d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d86:	f383 8811 	msr	BASEPRI, r3
 8011d8a:	f3bf 8f6f 	isb	sy
 8011d8e:	f3bf 8f4f 	dsb	sy
 8011d92:	627b      	str	r3, [r7, #36]	; 0x24
 8011d94:	e7fe      	b.n	8011d94 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011d96:	f7fd fd71 	bl	800f87c <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 8011d9a:	68fb      	ldr	r3, [r7, #12]
 8011d9c:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8011d9e:	f3ef 8211 	mrs	r2, BASEPRI
 8011da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011da6:	f383 8811 	msr	BASEPRI, r3
 8011daa:	f3bf 8f6f 	isb	sy
 8011dae:	f3bf 8f4f 	dsb	sy
 8011db2:	623a      	str	r2, [r7, #32]
 8011db4:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8011db6:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011db8:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8011dba:	683b      	ldr	r3, [r7, #0]
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d003      	beq.n	8011dc8 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8011dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dc2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011dc4:	683b      	ldr	r3, [r7, #0]
 8011dc6:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8011dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dca:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8011dce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8011dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dd4:	2202      	movs	r2, #2
 8011dd6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

			switch( eAction )
 8011dda:	79fb      	ldrb	r3, [r7, #7]
 8011ddc:	2b04      	cmp	r3, #4
 8011dde:	d829      	bhi.n	8011e34 <xTaskGenericNotifyFromISR+0xcc>
 8011de0:	a201      	add	r2, pc, #4	; (adr r2, 8011de8 <xTaskGenericNotifyFromISR+0x80>)
 8011de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011de6:	bf00      	nop
 8011de8:	08011e35 	.word	0x08011e35
 8011dec:	08011dfd 	.word	0x08011dfd
 8011df0:	08011e0b 	.word	0x08011e0b
 8011df4:	08011e17 	.word	0x08011e17
 8011df8:	08011e1f 	.word	0x08011e1f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8011dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dfe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011e00:	68bb      	ldr	r3, [r7, #8]
 8011e02:	431a      	orrs	r2, r3
 8011e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e06:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8011e08:	e014      	b.n	8011e34 <xTaskGenericNotifyFromISR+0xcc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8011e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011e0e:	1c5a      	adds	r2, r3, #1
 8011e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e12:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8011e14:	e00e      	b.n	8011e34 <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8011e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e18:	68ba      	ldr	r2, [r7, #8]
 8011e1a:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8011e1c:	e00a      	b.n	8011e34 <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8011e1e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011e22:	2b02      	cmp	r3, #2
 8011e24:	d003      	beq.n	8011e2e <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8011e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e28:	68ba      	ldr	r2, [r7, #8]
 8011e2a:	65da      	str	r2, [r3, #92]	; 0x5c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8011e2c:	e001      	b.n	8011e32 <xTaskGenericNotifyFromISR+0xca>
						xReturn = pdFAIL;
 8011e2e:	2300      	movs	r3, #0
 8011e30:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8011e32:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8011e34:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011e38:	2b01      	cmp	r3, #1
 8011e3a:	d146      	bne.n	8011eca <xTaskGenericNotifyFromISR+0x162>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8011e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d009      	beq.n	8011e58 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 8011e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e48:	f383 8811 	msr	BASEPRI, r3
 8011e4c:	f3bf 8f6f 	isb	sy
 8011e50:	f3bf 8f4f 	dsb	sy
 8011e54:	61bb      	str	r3, [r7, #24]
 8011e56:	e7fe      	b.n	8011e56 <xTaskGenericNotifyFromISR+0xee>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011e58:	4b21      	ldr	r3, [pc, #132]	; (8011ee0 <xTaskGenericNotifyFromISR+0x178>)
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d11d      	bne.n	8011e9c <xTaskGenericNotifyFromISR+0x134>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e62:	3304      	adds	r3, #4
 8011e64:	4618      	mov	r0, r3
 8011e66:	f7fd fb03 	bl	800f470 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e6e:	4b1d      	ldr	r3, [pc, #116]	; (8011ee4 <xTaskGenericNotifyFromISR+0x17c>)
 8011e70:	681b      	ldr	r3, [r3, #0]
 8011e72:	429a      	cmp	r2, r3
 8011e74:	d903      	bls.n	8011e7e <xTaskGenericNotifyFromISR+0x116>
 8011e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e7a:	4a1a      	ldr	r2, [pc, #104]	; (8011ee4 <xTaskGenericNotifyFromISR+0x17c>)
 8011e7c:	6013      	str	r3, [r2, #0]
 8011e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e82:	4613      	mov	r3, r2
 8011e84:	009b      	lsls	r3, r3, #2
 8011e86:	4413      	add	r3, r2
 8011e88:	009b      	lsls	r3, r3, #2
 8011e8a:	4a17      	ldr	r2, [pc, #92]	; (8011ee8 <xTaskGenericNotifyFromISR+0x180>)
 8011e8c:	441a      	add	r2, r3
 8011e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e90:	3304      	adds	r3, #4
 8011e92:	4619      	mov	r1, r3
 8011e94:	4610      	mov	r0, r2
 8011e96:	f7fd fa8e 	bl	800f3b6 <vListInsertEnd>
 8011e9a:	e005      	b.n	8011ea8 <xTaskGenericNotifyFromISR+0x140>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8011e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e9e:	3318      	adds	r3, #24
 8011ea0:	4619      	mov	r1, r3
 8011ea2:	4812      	ldr	r0, [pc, #72]	; (8011eec <xTaskGenericNotifyFromISR+0x184>)
 8011ea4:	f7fd fa87 	bl	800f3b6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011eac:	4b10      	ldr	r3, [pc, #64]	; (8011ef0 <xTaskGenericNotifyFromISR+0x188>)
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011eb2:	429a      	cmp	r2, r3
 8011eb4:	d909      	bls.n	8011eca <xTaskGenericNotifyFromISR+0x162>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8011eb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d003      	beq.n	8011ec4 <xTaskGenericNotifyFromISR+0x15c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8011ebc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011ebe:	2201      	movs	r2, #1
 8011ec0:	601a      	str	r2, [r3, #0]
 8011ec2:	e002      	b.n	8011eca <xTaskGenericNotifyFromISR+0x162>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 8011ec4:	4b0b      	ldr	r3, [pc, #44]	; (8011ef4 <xTaskGenericNotifyFromISR+0x18c>)
 8011ec6:	2201      	movs	r2, #1
 8011ec8:	601a      	str	r2, [r3, #0]
 8011eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ecc:	617b      	str	r3, [r7, #20]
	__asm volatile
 8011ece:	697b      	ldr	r3, [r7, #20]
 8011ed0:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8011ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8011ed6:	4618      	mov	r0, r3
 8011ed8:	3738      	adds	r7, #56	; 0x38
 8011eda:	46bd      	mov	sp, r7
 8011edc:	bd80      	pop	{r7, pc}
 8011ede:	bf00      	nop
 8011ee0:	200272f0 	.word	0x200272f0
 8011ee4:	200272d0 	.word	0x200272d0
 8011ee8:	20026df8 	.word	0x20026df8
 8011eec:	20027288 	.word	0x20027288
 8011ef0:	20026df4 	.word	0x20026df4
 8011ef4:	200272dc 	.word	0x200272dc

08011ef8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011ef8:	b580      	push	{r7, lr}
 8011efa:	b084      	sub	sp, #16
 8011efc:	af00      	add	r7, sp, #0
 8011efe:	6078      	str	r0, [r7, #4]
 8011f00:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011f02:	4b21      	ldr	r3, [pc, #132]	; (8011f88 <prvAddCurrentTaskToDelayedList+0x90>)
 8011f04:	681b      	ldr	r3, [r3, #0]
 8011f06:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011f08:	4b20      	ldr	r3, [pc, #128]	; (8011f8c <prvAddCurrentTaskToDelayedList+0x94>)
 8011f0a:	681b      	ldr	r3, [r3, #0]
 8011f0c:	3304      	adds	r3, #4
 8011f0e:	4618      	mov	r0, r3
 8011f10:	f7fd faae 	bl	800f470 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f1a:	d10a      	bne.n	8011f32 <prvAddCurrentTaskToDelayedList+0x3a>
 8011f1c:	683b      	ldr	r3, [r7, #0]
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d007      	beq.n	8011f32 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011f22:	4b1a      	ldr	r3, [pc, #104]	; (8011f8c <prvAddCurrentTaskToDelayedList+0x94>)
 8011f24:	681b      	ldr	r3, [r3, #0]
 8011f26:	3304      	adds	r3, #4
 8011f28:	4619      	mov	r1, r3
 8011f2a:	4819      	ldr	r0, [pc, #100]	; (8011f90 <prvAddCurrentTaskToDelayedList+0x98>)
 8011f2c:	f7fd fa43 	bl	800f3b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011f30:	e026      	b.n	8011f80 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011f32:	68fa      	ldr	r2, [r7, #12]
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	4413      	add	r3, r2
 8011f38:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011f3a:	4b14      	ldr	r3, [pc, #80]	; (8011f8c <prvAddCurrentTaskToDelayedList+0x94>)
 8011f3c:	681b      	ldr	r3, [r3, #0]
 8011f3e:	68ba      	ldr	r2, [r7, #8]
 8011f40:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011f42:	68ba      	ldr	r2, [r7, #8]
 8011f44:	68fb      	ldr	r3, [r7, #12]
 8011f46:	429a      	cmp	r2, r3
 8011f48:	d209      	bcs.n	8011f5e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011f4a:	4b12      	ldr	r3, [pc, #72]	; (8011f94 <prvAddCurrentTaskToDelayedList+0x9c>)
 8011f4c:	681a      	ldr	r2, [r3, #0]
 8011f4e:	4b0f      	ldr	r3, [pc, #60]	; (8011f8c <prvAddCurrentTaskToDelayedList+0x94>)
 8011f50:	681b      	ldr	r3, [r3, #0]
 8011f52:	3304      	adds	r3, #4
 8011f54:	4619      	mov	r1, r3
 8011f56:	4610      	mov	r0, r2
 8011f58:	f7fd fa51 	bl	800f3fe <vListInsert>
}
 8011f5c:	e010      	b.n	8011f80 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011f5e:	4b0e      	ldr	r3, [pc, #56]	; (8011f98 <prvAddCurrentTaskToDelayedList+0xa0>)
 8011f60:	681a      	ldr	r2, [r3, #0]
 8011f62:	4b0a      	ldr	r3, [pc, #40]	; (8011f8c <prvAddCurrentTaskToDelayedList+0x94>)
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	3304      	adds	r3, #4
 8011f68:	4619      	mov	r1, r3
 8011f6a:	4610      	mov	r0, r2
 8011f6c:	f7fd fa47 	bl	800f3fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011f70:	4b0a      	ldr	r3, [pc, #40]	; (8011f9c <prvAddCurrentTaskToDelayedList+0xa4>)
 8011f72:	681b      	ldr	r3, [r3, #0]
 8011f74:	68ba      	ldr	r2, [r7, #8]
 8011f76:	429a      	cmp	r2, r3
 8011f78:	d202      	bcs.n	8011f80 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8011f7a:	4a08      	ldr	r2, [pc, #32]	; (8011f9c <prvAddCurrentTaskToDelayedList+0xa4>)
 8011f7c:	68bb      	ldr	r3, [r7, #8]
 8011f7e:	6013      	str	r3, [r2, #0]
}
 8011f80:	bf00      	nop
 8011f82:	3710      	adds	r7, #16
 8011f84:	46bd      	mov	sp, r7
 8011f86:	bd80      	pop	{r7, pc}
 8011f88:	200272cc 	.word	0x200272cc
 8011f8c:	20026df4 	.word	0x20026df4
 8011f90:	200272b4 	.word	0x200272b4
 8011f94:	20027284 	.word	0x20027284
 8011f98:	20027280 	.word	0x20027280
 8011f9c:	200272e8 	.word	0x200272e8

08011fa0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8011fa0:	b580      	push	{r7, lr}
 8011fa2:	b08a      	sub	sp, #40	; 0x28
 8011fa4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8011fa6:	2300      	movs	r3, #0
 8011fa8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8011faa:	f000 fb51 	bl	8012650 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8011fae:	4b1c      	ldr	r3, [pc, #112]	; (8012020 <xTimerCreateTimerTask+0x80>)
 8011fb0:	681b      	ldr	r3, [r3, #0]
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d021      	beq.n	8011ffa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8011fb6:	2300      	movs	r3, #0
 8011fb8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8011fba:	2300      	movs	r3, #0
 8011fbc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8011fbe:	1d3a      	adds	r2, r7, #4
 8011fc0:	f107 0108 	add.w	r1, r7, #8
 8011fc4:	f107 030c 	add.w	r3, r7, #12
 8011fc8:	4618      	mov	r0, r3
 8011fca:	f7fc ffd1 	bl	800ef70 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8011fce:	6879      	ldr	r1, [r7, #4]
 8011fd0:	68bb      	ldr	r3, [r7, #8]
 8011fd2:	68fa      	ldr	r2, [r7, #12]
 8011fd4:	9202      	str	r2, [sp, #8]
 8011fd6:	9301      	str	r3, [sp, #4]
 8011fd8:	2302      	movs	r3, #2
 8011fda:	9300      	str	r3, [sp, #0]
 8011fdc:	2300      	movs	r3, #0
 8011fde:	460a      	mov	r2, r1
 8011fe0:	4910      	ldr	r1, [pc, #64]	; (8012024 <xTimerCreateTimerTask+0x84>)
 8011fe2:	4811      	ldr	r0, [pc, #68]	; (8012028 <xTimerCreateTimerTask+0x88>)
 8011fe4:	f7fe fd28 	bl	8010a38 <xTaskCreateStatic>
 8011fe8:	4602      	mov	r2, r0
 8011fea:	4b10      	ldr	r3, [pc, #64]	; (801202c <xTimerCreateTimerTask+0x8c>)
 8011fec:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8011fee:	4b0f      	ldr	r3, [pc, #60]	; (801202c <xTimerCreateTimerTask+0x8c>)
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d001      	beq.n	8011ffa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8011ff6:	2301      	movs	r3, #1
 8011ff8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8011ffa:	697b      	ldr	r3, [r7, #20]
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d109      	bne.n	8012014 <xTimerCreateTimerTask+0x74>
	__asm volatile
 8012000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012004:	f383 8811 	msr	BASEPRI, r3
 8012008:	f3bf 8f6f 	isb	sy
 801200c:	f3bf 8f4f 	dsb	sy
 8012010:	613b      	str	r3, [r7, #16]
 8012012:	e7fe      	b.n	8012012 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8012014:	697b      	ldr	r3, [r7, #20]
}
 8012016:	4618      	mov	r0, r3
 8012018:	3718      	adds	r7, #24
 801201a:	46bd      	mov	sp, r7
 801201c:	bd80      	pop	{r7, pc}
 801201e:	bf00      	nop
 8012020:	2002732c 	.word	0x2002732c
 8012024:	0801725c 	.word	0x0801725c
 8012028:	08012265 	.word	0x08012265
 801202c:	20027330 	.word	0x20027330

08012030 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8012030:	b580      	push	{r7, lr}
 8012032:	b088      	sub	sp, #32
 8012034:	af02      	add	r7, sp, #8
 8012036:	60f8      	str	r0, [r7, #12]
 8012038:	60b9      	str	r1, [r7, #8]
 801203a:	607a      	str	r2, [r7, #4]
 801203c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 801203e:	2030      	movs	r0, #48	; 0x30
 8012040:	f7fc ffb0 	bl	800efa4 <pvPortMalloc>
 8012044:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8012046:	697b      	ldr	r3, [r7, #20]
 8012048:	2b00      	cmp	r3, #0
 801204a:	d00d      	beq.n	8012068 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 801204c:	697b      	ldr	r3, [r7, #20]
 801204e:	9301      	str	r3, [sp, #4]
 8012050:	6a3b      	ldr	r3, [r7, #32]
 8012052:	9300      	str	r3, [sp, #0]
 8012054:	683b      	ldr	r3, [r7, #0]
 8012056:	687a      	ldr	r2, [r7, #4]
 8012058:	68b9      	ldr	r1, [r7, #8]
 801205a:	68f8      	ldr	r0, [r7, #12]
 801205c:	f000 f844 	bl	80120e8 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8012060:	697b      	ldr	r3, [r7, #20]
 8012062:	2200      	movs	r2, #0
 8012064:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8012068:	697b      	ldr	r3, [r7, #20]
	}
 801206a:	4618      	mov	r0, r3
 801206c:	3718      	adds	r7, #24
 801206e:	46bd      	mov	sp, r7
 8012070:	bd80      	pop	{r7, pc}

08012072 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8012072:	b580      	push	{r7, lr}
 8012074:	b08a      	sub	sp, #40	; 0x28
 8012076:	af02      	add	r7, sp, #8
 8012078:	60f8      	str	r0, [r7, #12]
 801207a:	60b9      	str	r1, [r7, #8]
 801207c:	607a      	str	r2, [r7, #4]
 801207e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8012080:	2330      	movs	r3, #48	; 0x30
 8012082:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8012084:	693b      	ldr	r3, [r7, #16]
 8012086:	2b30      	cmp	r3, #48	; 0x30
 8012088:	d009      	beq.n	801209e <xTimerCreateStatic+0x2c>
 801208a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801208e:	f383 8811 	msr	BASEPRI, r3
 8012092:	f3bf 8f6f 	isb	sy
 8012096:	f3bf 8f4f 	dsb	sy
 801209a:	61bb      	str	r3, [r7, #24]
 801209c:	e7fe      	b.n	801209c <xTimerCreateStatic+0x2a>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 801209e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d109      	bne.n	80120b8 <xTimerCreateStatic+0x46>
 80120a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120a8:	f383 8811 	msr	BASEPRI, r3
 80120ac:	f3bf 8f6f 	isb	sy
 80120b0:	f3bf 8f4f 	dsb	sy
 80120b4:	617b      	str	r3, [r7, #20]
 80120b6:	e7fe      	b.n	80120b6 <xTimerCreateStatic+0x44>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80120b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120ba:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80120bc:	69fb      	ldr	r3, [r7, #28]
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d00d      	beq.n	80120de <xTimerCreateStatic+0x6c>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80120c2:	69fb      	ldr	r3, [r7, #28]
 80120c4:	9301      	str	r3, [sp, #4]
 80120c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120c8:	9300      	str	r3, [sp, #0]
 80120ca:	683b      	ldr	r3, [r7, #0]
 80120cc:	687a      	ldr	r2, [r7, #4]
 80120ce:	68b9      	ldr	r1, [r7, #8]
 80120d0:	68f8      	ldr	r0, [r7, #12]
 80120d2:	f000 f809 	bl	80120e8 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 80120d6:	69fb      	ldr	r3, [r7, #28]
 80120d8:	2201      	movs	r2, #1
 80120da:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 80120de:	69fb      	ldr	r3, [r7, #28]
	}
 80120e0:	4618      	mov	r0, r3
 80120e2:	3720      	adds	r7, #32
 80120e4:	46bd      	mov	sp, r7
 80120e6:	bd80      	pop	{r7, pc}

080120e8 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80120e8:	b580      	push	{r7, lr}
 80120ea:	b086      	sub	sp, #24
 80120ec:	af00      	add	r7, sp, #0
 80120ee:	60f8      	str	r0, [r7, #12]
 80120f0:	60b9      	str	r1, [r7, #8]
 80120f2:	607a      	str	r2, [r7, #4]
 80120f4:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80120f6:	68bb      	ldr	r3, [r7, #8]
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d109      	bne.n	8012110 <prvInitialiseNewTimer+0x28>
 80120fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012100:	f383 8811 	msr	BASEPRI, r3
 8012104:	f3bf 8f6f 	isb	sy
 8012108:	f3bf 8f4f 	dsb	sy
 801210c:	617b      	str	r3, [r7, #20]
 801210e:	e7fe      	b.n	801210e <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 8012110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012112:	2b00      	cmp	r3, #0
 8012114:	d015      	beq.n	8012142 <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8012116:	f000 fa9b 	bl	8012650 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 801211a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801211c:	68fa      	ldr	r2, [r7, #12]
 801211e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8012120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012122:	68ba      	ldr	r2, [r7, #8]
 8012124:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8012126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012128:	687a      	ldr	r2, [r7, #4]
 801212a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 801212c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801212e:	683a      	ldr	r2, [r7, #0]
 8012130:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8012132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012134:	6a3a      	ldr	r2, [r7, #32]
 8012136:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8012138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801213a:	3304      	adds	r3, #4
 801213c:	4618      	mov	r0, r3
 801213e:	f7fd f92d 	bl	800f39c <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8012142:	bf00      	nop
 8012144:	3718      	adds	r7, #24
 8012146:	46bd      	mov	sp, r7
 8012148:	bd80      	pop	{r7, pc}
	...

0801214c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801214c:	b580      	push	{r7, lr}
 801214e:	b08a      	sub	sp, #40	; 0x28
 8012150:	af00      	add	r7, sp, #0
 8012152:	60f8      	str	r0, [r7, #12]
 8012154:	60b9      	str	r1, [r7, #8]
 8012156:	607a      	str	r2, [r7, #4]
 8012158:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801215a:	2300      	movs	r3, #0
 801215c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801215e:	68fb      	ldr	r3, [r7, #12]
 8012160:	2b00      	cmp	r3, #0
 8012162:	d109      	bne.n	8012178 <xTimerGenericCommand+0x2c>
 8012164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012168:	f383 8811 	msr	BASEPRI, r3
 801216c:	f3bf 8f6f 	isb	sy
 8012170:	f3bf 8f4f 	dsb	sy
 8012174:	623b      	str	r3, [r7, #32]
 8012176:	e7fe      	b.n	8012176 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8012178:	4b19      	ldr	r3, [pc, #100]	; (80121e0 <xTimerGenericCommand+0x94>)
 801217a:	681b      	ldr	r3, [r3, #0]
 801217c:	2b00      	cmp	r3, #0
 801217e:	d02a      	beq.n	80121d6 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8012180:	68bb      	ldr	r3, [r7, #8]
 8012182:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8012188:	68fb      	ldr	r3, [r7, #12]
 801218a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801218c:	68bb      	ldr	r3, [r7, #8]
 801218e:	2b05      	cmp	r3, #5
 8012190:	dc18      	bgt.n	80121c4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8012192:	f7ff fb5b 	bl	801184c <xTaskGetSchedulerState>
 8012196:	4603      	mov	r3, r0
 8012198:	2b02      	cmp	r3, #2
 801219a:	d109      	bne.n	80121b0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801219c:	4b10      	ldr	r3, [pc, #64]	; (80121e0 <xTimerGenericCommand+0x94>)
 801219e:	6818      	ldr	r0, [r3, #0]
 80121a0:	f107 0110 	add.w	r1, r7, #16
 80121a4:	2300      	movs	r3, #0
 80121a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80121a8:	f7fd fdfc 	bl	800fda4 <xQueueGenericSend>
 80121ac:	6278      	str	r0, [r7, #36]	; 0x24
 80121ae:	e012      	b.n	80121d6 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80121b0:	4b0b      	ldr	r3, [pc, #44]	; (80121e0 <xTimerGenericCommand+0x94>)
 80121b2:	6818      	ldr	r0, [r3, #0]
 80121b4:	f107 0110 	add.w	r1, r7, #16
 80121b8:	2300      	movs	r3, #0
 80121ba:	2200      	movs	r2, #0
 80121bc:	f7fd fdf2 	bl	800fda4 <xQueueGenericSend>
 80121c0:	6278      	str	r0, [r7, #36]	; 0x24
 80121c2:	e008      	b.n	80121d6 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80121c4:	4b06      	ldr	r3, [pc, #24]	; (80121e0 <xTimerGenericCommand+0x94>)
 80121c6:	6818      	ldr	r0, [r3, #0]
 80121c8:	f107 0110 	add.w	r1, r7, #16
 80121cc:	2300      	movs	r3, #0
 80121ce:	683a      	ldr	r2, [r7, #0]
 80121d0:	f7fd fee2 	bl	800ff98 <xQueueGenericSendFromISR>
 80121d4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80121d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80121d8:	4618      	mov	r0, r3
 80121da:	3728      	adds	r7, #40	; 0x28
 80121dc:	46bd      	mov	sp, r7
 80121de:	bd80      	pop	{r7, pc}
 80121e0:	2002732c 	.word	0x2002732c

080121e4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80121e4:	b580      	push	{r7, lr}
 80121e6:	b088      	sub	sp, #32
 80121e8:	af02      	add	r7, sp, #8
 80121ea:	6078      	str	r0, [r7, #4]
 80121ec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80121ee:	4b1c      	ldr	r3, [pc, #112]	; (8012260 <prvProcessExpiredTimer+0x7c>)
 80121f0:	681b      	ldr	r3, [r3, #0]
 80121f2:	68db      	ldr	r3, [r3, #12]
 80121f4:	68db      	ldr	r3, [r3, #12]
 80121f6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80121f8:	697b      	ldr	r3, [r7, #20]
 80121fa:	3304      	adds	r3, #4
 80121fc:	4618      	mov	r0, r3
 80121fe:	f7fd f937 	bl	800f470 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8012202:	697b      	ldr	r3, [r7, #20]
 8012204:	69db      	ldr	r3, [r3, #28]
 8012206:	2b01      	cmp	r3, #1
 8012208:	d121      	bne.n	801224e <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801220a:	697b      	ldr	r3, [r7, #20]
 801220c:	699a      	ldr	r2, [r3, #24]
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	18d1      	adds	r1, r2, r3
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	683a      	ldr	r2, [r7, #0]
 8012216:	6978      	ldr	r0, [r7, #20]
 8012218:	f000 f8c8 	bl	80123ac <prvInsertTimerInActiveList>
 801221c:	4603      	mov	r3, r0
 801221e:	2b00      	cmp	r3, #0
 8012220:	d015      	beq.n	801224e <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012222:	2300      	movs	r3, #0
 8012224:	9300      	str	r3, [sp, #0]
 8012226:	2300      	movs	r3, #0
 8012228:	687a      	ldr	r2, [r7, #4]
 801222a:	2100      	movs	r1, #0
 801222c:	6978      	ldr	r0, [r7, #20]
 801222e:	f7ff ff8d 	bl	801214c <xTimerGenericCommand>
 8012232:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8012234:	693b      	ldr	r3, [r7, #16]
 8012236:	2b00      	cmp	r3, #0
 8012238:	d109      	bne.n	801224e <prvProcessExpiredTimer+0x6a>
 801223a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801223e:	f383 8811 	msr	BASEPRI, r3
 8012242:	f3bf 8f6f 	isb	sy
 8012246:	f3bf 8f4f 	dsb	sy
 801224a:	60fb      	str	r3, [r7, #12]
 801224c:	e7fe      	b.n	801224c <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801224e:	697b      	ldr	r3, [r7, #20]
 8012250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012252:	6978      	ldr	r0, [r7, #20]
 8012254:	4798      	blx	r3
}
 8012256:	bf00      	nop
 8012258:	3718      	adds	r7, #24
 801225a:	46bd      	mov	sp, r7
 801225c:	bd80      	pop	{r7, pc}
 801225e:	bf00      	nop
 8012260:	20027324 	.word	0x20027324

08012264 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8012264:	b580      	push	{r7, lr}
 8012266:	b084      	sub	sp, #16
 8012268:	af00      	add	r7, sp, #0
 801226a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801226c:	f107 0308 	add.w	r3, r7, #8
 8012270:	4618      	mov	r0, r3
 8012272:	f000 f857 	bl	8012324 <prvGetNextExpireTime>
 8012276:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8012278:	68bb      	ldr	r3, [r7, #8]
 801227a:	4619      	mov	r1, r3
 801227c:	68f8      	ldr	r0, [r7, #12]
 801227e:	f000 f803 	bl	8012288 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8012282:	f000 f8d5 	bl	8012430 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012286:	e7f1      	b.n	801226c <prvTimerTask+0x8>

08012288 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8012288:	b580      	push	{r7, lr}
 801228a:	b084      	sub	sp, #16
 801228c:	af00      	add	r7, sp, #0
 801228e:	6078      	str	r0, [r7, #4]
 8012290:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8012292:	f7fe fe05 	bl	8010ea0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012296:	f107 0308 	add.w	r3, r7, #8
 801229a:	4618      	mov	r0, r3
 801229c:	f000 f866 	bl	801236c <prvSampleTimeNow>
 80122a0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80122a2:	68bb      	ldr	r3, [r7, #8]
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d130      	bne.n	801230a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80122a8:	683b      	ldr	r3, [r7, #0]
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d10a      	bne.n	80122c4 <prvProcessTimerOrBlockTask+0x3c>
 80122ae:	687a      	ldr	r2, [r7, #4]
 80122b0:	68fb      	ldr	r3, [r7, #12]
 80122b2:	429a      	cmp	r2, r3
 80122b4:	d806      	bhi.n	80122c4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80122b6:	f7fe fe39 	bl	8010f2c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80122ba:	68f9      	ldr	r1, [r7, #12]
 80122bc:	6878      	ldr	r0, [r7, #4]
 80122be:	f7ff ff91 	bl	80121e4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80122c2:	e024      	b.n	801230e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80122c4:	683b      	ldr	r3, [r7, #0]
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d008      	beq.n	80122dc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80122ca:	4b13      	ldr	r3, [pc, #76]	; (8012318 <prvProcessTimerOrBlockTask+0x90>)
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	bf0c      	ite	eq
 80122d4:	2301      	moveq	r3, #1
 80122d6:	2300      	movne	r3, #0
 80122d8:	b2db      	uxtb	r3, r3
 80122da:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80122dc:	4b0f      	ldr	r3, [pc, #60]	; (801231c <prvProcessTimerOrBlockTask+0x94>)
 80122de:	6818      	ldr	r0, [r3, #0]
 80122e0:	687a      	ldr	r2, [r7, #4]
 80122e2:	68fb      	ldr	r3, [r7, #12]
 80122e4:	1ad3      	subs	r3, r2, r3
 80122e6:	683a      	ldr	r2, [r7, #0]
 80122e8:	4619      	mov	r1, r3
 80122ea:	f7fe fb71 	bl	80109d0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80122ee:	f7fe fe1d 	bl	8010f2c <xTaskResumeAll>
 80122f2:	4603      	mov	r3, r0
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d10a      	bne.n	801230e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80122f8:	4b09      	ldr	r3, [pc, #36]	; (8012320 <prvProcessTimerOrBlockTask+0x98>)
 80122fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80122fe:	601a      	str	r2, [r3, #0]
 8012300:	f3bf 8f4f 	dsb	sy
 8012304:	f3bf 8f6f 	isb	sy
}
 8012308:	e001      	b.n	801230e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801230a:	f7fe fe0f 	bl	8010f2c <xTaskResumeAll>
}
 801230e:	bf00      	nop
 8012310:	3710      	adds	r7, #16
 8012312:	46bd      	mov	sp, r7
 8012314:	bd80      	pop	{r7, pc}
 8012316:	bf00      	nop
 8012318:	20027328 	.word	0x20027328
 801231c:	2002732c 	.word	0x2002732c
 8012320:	e000ed04 	.word	0xe000ed04

08012324 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8012324:	b480      	push	{r7}
 8012326:	b085      	sub	sp, #20
 8012328:	af00      	add	r7, sp, #0
 801232a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801232c:	4b0e      	ldr	r3, [pc, #56]	; (8012368 <prvGetNextExpireTime+0x44>)
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	681b      	ldr	r3, [r3, #0]
 8012332:	2b00      	cmp	r3, #0
 8012334:	bf0c      	ite	eq
 8012336:	2301      	moveq	r3, #1
 8012338:	2300      	movne	r3, #0
 801233a:	b2db      	uxtb	r3, r3
 801233c:	461a      	mov	r2, r3
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	681b      	ldr	r3, [r3, #0]
 8012346:	2b00      	cmp	r3, #0
 8012348:	d105      	bne.n	8012356 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801234a:	4b07      	ldr	r3, [pc, #28]	; (8012368 <prvGetNextExpireTime+0x44>)
 801234c:	681b      	ldr	r3, [r3, #0]
 801234e:	68db      	ldr	r3, [r3, #12]
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	60fb      	str	r3, [r7, #12]
 8012354:	e001      	b.n	801235a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8012356:	2300      	movs	r3, #0
 8012358:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801235a:	68fb      	ldr	r3, [r7, #12]
}
 801235c:	4618      	mov	r0, r3
 801235e:	3714      	adds	r7, #20
 8012360:	46bd      	mov	sp, r7
 8012362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012366:	4770      	bx	lr
 8012368:	20027324 	.word	0x20027324

0801236c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801236c:	b580      	push	{r7, lr}
 801236e:	b084      	sub	sp, #16
 8012370:	af00      	add	r7, sp, #0
 8012372:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8012374:	f7fe fe76 	bl	8011064 <xTaskGetTickCount>
 8012378:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801237a:	4b0b      	ldr	r3, [pc, #44]	; (80123a8 <prvSampleTimeNow+0x3c>)
 801237c:	681b      	ldr	r3, [r3, #0]
 801237e:	68fa      	ldr	r2, [r7, #12]
 8012380:	429a      	cmp	r2, r3
 8012382:	d205      	bcs.n	8012390 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8012384:	f000 f904 	bl	8012590 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	2201      	movs	r2, #1
 801238c:	601a      	str	r2, [r3, #0]
 801238e:	e002      	b.n	8012396 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	2200      	movs	r2, #0
 8012394:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8012396:	4a04      	ldr	r2, [pc, #16]	; (80123a8 <prvSampleTimeNow+0x3c>)
 8012398:	68fb      	ldr	r3, [r7, #12]
 801239a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801239c:	68fb      	ldr	r3, [r7, #12]
}
 801239e:	4618      	mov	r0, r3
 80123a0:	3710      	adds	r7, #16
 80123a2:	46bd      	mov	sp, r7
 80123a4:	bd80      	pop	{r7, pc}
 80123a6:	bf00      	nop
 80123a8:	20027334 	.word	0x20027334

080123ac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80123ac:	b580      	push	{r7, lr}
 80123ae:	b086      	sub	sp, #24
 80123b0:	af00      	add	r7, sp, #0
 80123b2:	60f8      	str	r0, [r7, #12]
 80123b4:	60b9      	str	r1, [r7, #8]
 80123b6:	607a      	str	r2, [r7, #4]
 80123b8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80123ba:	2300      	movs	r3, #0
 80123bc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80123be:	68fb      	ldr	r3, [r7, #12]
 80123c0:	68ba      	ldr	r2, [r7, #8]
 80123c2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80123c4:	68fb      	ldr	r3, [r7, #12]
 80123c6:	68fa      	ldr	r2, [r7, #12]
 80123c8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80123ca:	68ba      	ldr	r2, [r7, #8]
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	429a      	cmp	r2, r3
 80123d0:	d812      	bhi.n	80123f8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80123d2:	687a      	ldr	r2, [r7, #4]
 80123d4:	683b      	ldr	r3, [r7, #0]
 80123d6:	1ad2      	subs	r2, r2, r3
 80123d8:	68fb      	ldr	r3, [r7, #12]
 80123da:	699b      	ldr	r3, [r3, #24]
 80123dc:	429a      	cmp	r2, r3
 80123de:	d302      	bcc.n	80123e6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80123e0:	2301      	movs	r3, #1
 80123e2:	617b      	str	r3, [r7, #20]
 80123e4:	e01b      	b.n	801241e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80123e6:	4b10      	ldr	r3, [pc, #64]	; (8012428 <prvInsertTimerInActiveList+0x7c>)
 80123e8:	681a      	ldr	r2, [r3, #0]
 80123ea:	68fb      	ldr	r3, [r7, #12]
 80123ec:	3304      	adds	r3, #4
 80123ee:	4619      	mov	r1, r3
 80123f0:	4610      	mov	r0, r2
 80123f2:	f7fd f804 	bl	800f3fe <vListInsert>
 80123f6:	e012      	b.n	801241e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80123f8:	687a      	ldr	r2, [r7, #4]
 80123fa:	683b      	ldr	r3, [r7, #0]
 80123fc:	429a      	cmp	r2, r3
 80123fe:	d206      	bcs.n	801240e <prvInsertTimerInActiveList+0x62>
 8012400:	68ba      	ldr	r2, [r7, #8]
 8012402:	683b      	ldr	r3, [r7, #0]
 8012404:	429a      	cmp	r2, r3
 8012406:	d302      	bcc.n	801240e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8012408:	2301      	movs	r3, #1
 801240a:	617b      	str	r3, [r7, #20]
 801240c:	e007      	b.n	801241e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801240e:	4b07      	ldr	r3, [pc, #28]	; (801242c <prvInsertTimerInActiveList+0x80>)
 8012410:	681a      	ldr	r2, [r3, #0]
 8012412:	68fb      	ldr	r3, [r7, #12]
 8012414:	3304      	adds	r3, #4
 8012416:	4619      	mov	r1, r3
 8012418:	4610      	mov	r0, r2
 801241a:	f7fc fff0 	bl	800f3fe <vListInsert>
		}
	}

	return xProcessTimerNow;
 801241e:	697b      	ldr	r3, [r7, #20]
}
 8012420:	4618      	mov	r0, r3
 8012422:	3718      	adds	r7, #24
 8012424:	46bd      	mov	sp, r7
 8012426:	bd80      	pop	{r7, pc}
 8012428:	20027328 	.word	0x20027328
 801242c:	20027324 	.word	0x20027324

08012430 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8012430:	b580      	push	{r7, lr}
 8012432:	b08e      	sub	sp, #56	; 0x38
 8012434:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012436:	e099      	b.n	801256c <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	2b00      	cmp	r3, #0
 801243c:	da17      	bge.n	801246e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801243e:	1d3b      	adds	r3, r7, #4
 8012440:	3304      	adds	r3, #4
 8012442:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8012444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012446:	2b00      	cmp	r3, #0
 8012448:	d109      	bne.n	801245e <prvProcessReceivedCommands+0x2e>
 801244a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801244e:	f383 8811 	msr	BASEPRI, r3
 8012452:	f3bf 8f6f 	isb	sy
 8012456:	f3bf 8f4f 	dsb	sy
 801245a:	61fb      	str	r3, [r7, #28]
 801245c:	e7fe      	b.n	801245c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801245e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012460:	681b      	ldr	r3, [r3, #0]
 8012462:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012464:	6850      	ldr	r0, [r2, #4]
 8012466:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012468:	6892      	ldr	r2, [r2, #8]
 801246a:	4611      	mov	r1, r2
 801246c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	2b00      	cmp	r3, #0
 8012472:	db7a      	blt.n	801256a <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8012474:	68fb      	ldr	r3, [r7, #12]
 8012476:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8012478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801247a:	695b      	ldr	r3, [r3, #20]
 801247c:	2b00      	cmp	r3, #0
 801247e:	d004      	beq.n	801248a <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012482:	3304      	adds	r3, #4
 8012484:	4618      	mov	r0, r3
 8012486:	f7fc fff3 	bl	800f470 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801248a:	463b      	mov	r3, r7
 801248c:	4618      	mov	r0, r3
 801248e:	f7ff ff6d 	bl	801236c <prvSampleTimeNow>
 8012492:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	2b09      	cmp	r3, #9
 8012498:	d868      	bhi.n	801256c <prvProcessReceivedCommands+0x13c>
 801249a:	a201      	add	r2, pc, #4	; (adr r2, 80124a0 <prvProcessReceivedCommands+0x70>)
 801249c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80124a0:	080124c9 	.word	0x080124c9
 80124a4:	080124c9 	.word	0x080124c9
 80124a8:	080124c9 	.word	0x080124c9
 80124ac:	0801256d 	.word	0x0801256d
 80124b0:	08012523 	.word	0x08012523
 80124b4:	08012559 	.word	0x08012559
 80124b8:	080124c9 	.word	0x080124c9
 80124bc:	080124c9 	.word	0x080124c9
 80124c0:	0801256d 	.word	0x0801256d
 80124c4:	08012523 	.word	0x08012523
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80124c8:	68ba      	ldr	r2, [r7, #8]
 80124ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124cc:	699b      	ldr	r3, [r3, #24]
 80124ce:	18d1      	adds	r1, r2, r3
 80124d0:	68bb      	ldr	r3, [r7, #8]
 80124d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80124d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80124d6:	f7ff ff69 	bl	80123ac <prvInsertTimerInActiveList>
 80124da:	4603      	mov	r3, r0
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d045      	beq.n	801256c <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80124e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80124e6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80124e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124ea:	69db      	ldr	r3, [r3, #28]
 80124ec:	2b01      	cmp	r3, #1
 80124ee:	d13d      	bne.n	801256c <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80124f0:	68ba      	ldr	r2, [r7, #8]
 80124f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124f4:	699b      	ldr	r3, [r3, #24]
 80124f6:	441a      	add	r2, r3
 80124f8:	2300      	movs	r3, #0
 80124fa:	9300      	str	r3, [sp, #0]
 80124fc:	2300      	movs	r3, #0
 80124fe:	2100      	movs	r1, #0
 8012500:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012502:	f7ff fe23 	bl	801214c <xTimerGenericCommand>
 8012506:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8012508:	6a3b      	ldr	r3, [r7, #32]
 801250a:	2b00      	cmp	r3, #0
 801250c:	d12e      	bne.n	801256c <prvProcessReceivedCommands+0x13c>
 801250e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012512:	f383 8811 	msr	BASEPRI, r3
 8012516:	f3bf 8f6f 	isb	sy
 801251a:	f3bf 8f4f 	dsb	sy
 801251e:	61bb      	str	r3, [r7, #24]
 8012520:	e7fe      	b.n	8012520 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8012522:	68ba      	ldr	r2, [r7, #8]
 8012524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012526:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8012528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801252a:	699b      	ldr	r3, [r3, #24]
 801252c:	2b00      	cmp	r3, #0
 801252e:	d109      	bne.n	8012544 <prvProcessReceivedCommands+0x114>
 8012530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012534:	f383 8811 	msr	BASEPRI, r3
 8012538:	f3bf 8f6f 	isb	sy
 801253c:	f3bf 8f4f 	dsb	sy
 8012540:	617b      	str	r3, [r7, #20]
 8012542:	e7fe      	b.n	8012542 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8012544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012546:	699a      	ldr	r2, [r3, #24]
 8012548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801254a:	18d1      	adds	r1, r2, r3
 801254c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801254e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012550:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012552:	f7ff ff2b 	bl	80123ac <prvInsertTimerInActiveList>
					break;
 8012556:	e009      	b.n	801256c <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8012558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801255a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801255e:	2b00      	cmp	r3, #0
 8012560:	d104      	bne.n	801256c <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8012562:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012564:	f7fc fde4 	bl	800f130 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8012568:	e000      	b.n	801256c <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801256a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801256c:	4b07      	ldr	r3, [pc, #28]	; (801258c <prvProcessReceivedCommands+0x15c>)
 801256e:	681b      	ldr	r3, [r3, #0]
 8012570:	1d39      	adds	r1, r7, #4
 8012572:	2200      	movs	r2, #0
 8012574:	4618      	mov	r0, r3
 8012576:	f7fd fe2d 	bl	80101d4 <xQueueReceive>
 801257a:	4603      	mov	r3, r0
 801257c:	2b00      	cmp	r3, #0
 801257e:	f47f af5b 	bne.w	8012438 <prvProcessReceivedCommands+0x8>
	}
}
 8012582:	bf00      	nop
 8012584:	3730      	adds	r7, #48	; 0x30
 8012586:	46bd      	mov	sp, r7
 8012588:	bd80      	pop	{r7, pc}
 801258a:	bf00      	nop
 801258c:	2002732c 	.word	0x2002732c

08012590 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8012590:	b580      	push	{r7, lr}
 8012592:	b088      	sub	sp, #32
 8012594:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012596:	e044      	b.n	8012622 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012598:	4b2b      	ldr	r3, [pc, #172]	; (8012648 <prvSwitchTimerLists+0xb8>)
 801259a:	681b      	ldr	r3, [r3, #0]
 801259c:	68db      	ldr	r3, [r3, #12]
 801259e:	681b      	ldr	r3, [r3, #0]
 80125a0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80125a2:	4b29      	ldr	r3, [pc, #164]	; (8012648 <prvSwitchTimerLists+0xb8>)
 80125a4:	681b      	ldr	r3, [r3, #0]
 80125a6:	68db      	ldr	r3, [r3, #12]
 80125a8:	68db      	ldr	r3, [r3, #12]
 80125aa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80125ac:	68fb      	ldr	r3, [r7, #12]
 80125ae:	3304      	adds	r3, #4
 80125b0:	4618      	mov	r0, r3
 80125b2:	f7fc ff5d 	bl	800f470 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80125b6:	68fb      	ldr	r3, [r7, #12]
 80125b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125ba:	68f8      	ldr	r0, [r7, #12]
 80125bc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80125be:	68fb      	ldr	r3, [r7, #12]
 80125c0:	69db      	ldr	r3, [r3, #28]
 80125c2:	2b01      	cmp	r3, #1
 80125c4:	d12d      	bne.n	8012622 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80125c6:	68fb      	ldr	r3, [r7, #12]
 80125c8:	699b      	ldr	r3, [r3, #24]
 80125ca:	693a      	ldr	r2, [r7, #16]
 80125cc:	4413      	add	r3, r2
 80125ce:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80125d0:	68ba      	ldr	r2, [r7, #8]
 80125d2:	693b      	ldr	r3, [r7, #16]
 80125d4:	429a      	cmp	r2, r3
 80125d6:	d90e      	bls.n	80125f6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80125d8:	68fb      	ldr	r3, [r7, #12]
 80125da:	68ba      	ldr	r2, [r7, #8]
 80125dc:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80125de:	68fb      	ldr	r3, [r7, #12]
 80125e0:	68fa      	ldr	r2, [r7, #12]
 80125e2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80125e4:	4b18      	ldr	r3, [pc, #96]	; (8012648 <prvSwitchTimerLists+0xb8>)
 80125e6:	681a      	ldr	r2, [r3, #0]
 80125e8:	68fb      	ldr	r3, [r7, #12]
 80125ea:	3304      	adds	r3, #4
 80125ec:	4619      	mov	r1, r3
 80125ee:	4610      	mov	r0, r2
 80125f0:	f7fc ff05 	bl	800f3fe <vListInsert>
 80125f4:	e015      	b.n	8012622 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80125f6:	2300      	movs	r3, #0
 80125f8:	9300      	str	r3, [sp, #0]
 80125fa:	2300      	movs	r3, #0
 80125fc:	693a      	ldr	r2, [r7, #16]
 80125fe:	2100      	movs	r1, #0
 8012600:	68f8      	ldr	r0, [r7, #12]
 8012602:	f7ff fda3 	bl	801214c <xTimerGenericCommand>
 8012606:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	2b00      	cmp	r3, #0
 801260c:	d109      	bne.n	8012622 <prvSwitchTimerLists+0x92>
 801260e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012612:	f383 8811 	msr	BASEPRI, r3
 8012616:	f3bf 8f6f 	isb	sy
 801261a:	f3bf 8f4f 	dsb	sy
 801261e:	603b      	str	r3, [r7, #0]
 8012620:	e7fe      	b.n	8012620 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012622:	4b09      	ldr	r3, [pc, #36]	; (8012648 <prvSwitchTimerLists+0xb8>)
 8012624:	681b      	ldr	r3, [r3, #0]
 8012626:	681b      	ldr	r3, [r3, #0]
 8012628:	2b00      	cmp	r3, #0
 801262a:	d1b5      	bne.n	8012598 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801262c:	4b06      	ldr	r3, [pc, #24]	; (8012648 <prvSwitchTimerLists+0xb8>)
 801262e:	681b      	ldr	r3, [r3, #0]
 8012630:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8012632:	4b06      	ldr	r3, [pc, #24]	; (801264c <prvSwitchTimerLists+0xbc>)
 8012634:	681b      	ldr	r3, [r3, #0]
 8012636:	4a04      	ldr	r2, [pc, #16]	; (8012648 <prvSwitchTimerLists+0xb8>)
 8012638:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801263a:	4a04      	ldr	r2, [pc, #16]	; (801264c <prvSwitchTimerLists+0xbc>)
 801263c:	697b      	ldr	r3, [r7, #20]
 801263e:	6013      	str	r3, [r2, #0]
}
 8012640:	bf00      	nop
 8012642:	3718      	adds	r7, #24
 8012644:	46bd      	mov	sp, r7
 8012646:	bd80      	pop	{r7, pc}
 8012648:	20027324 	.word	0x20027324
 801264c:	20027328 	.word	0x20027328

08012650 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8012650:	b580      	push	{r7, lr}
 8012652:	b082      	sub	sp, #8
 8012654:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8012656:	f7fd f859 	bl	800f70c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801265a:	4b15      	ldr	r3, [pc, #84]	; (80126b0 <prvCheckForValidListAndQueue+0x60>)
 801265c:	681b      	ldr	r3, [r3, #0]
 801265e:	2b00      	cmp	r3, #0
 8012660:	d120      	bne.n	80126a4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8012662:	4814      	ldr	r0, [pc, #80]	; (80126b4 <prvCheckForValidListAndQueue+0x64>)
 8012664:	f7fc fe7a 	bl	800f35c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8012668:	4813      	ldr	r0, [pc, #76]	; (80126b8 <prvCheckForValidListAndQueue+0x68>)
 801266a:	f7fc fe77 	bl	800f35c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801266e:	4b13      	ldr	r3, [pc, #76]	; (80126bc <prvCheckForValidListAndQueue+0x6c>)
 8012670:	4a10      	ldr	r2, [pc, #64]	; (80126b4 <prvCheckForValidListAndQueue+0x64>)
 8012672:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8012674:	4b12      	ldr	r3, [pc, #72]	; (80126c0 <prvCheckForValidListAndQueue+0x70>)
 8012676:	4a10      	ldr	r2, [pc, #64]	; (80126b8 <prvCheckForValidListAndQueue+0x68>)
 8012678:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801267a:	2300      	movs	r3, #0
 801267c:	9300      	str	r3, [sp, #0]
 801267e:	4b11      	ldr	r3, [pc, #68]	; (80126c4 <prvCheckForValidListAndQueue+0x74>)
 8012680:	4a11      	ldr	r2, [pc, #68]	; (80126c8 <prvCheckForValidListAndQueue+0x78>)
 8012682:	2110      	movs	r1, #16
 8012684:	200a      	movs	r0, #10
 8012686:	f7fd f99f 	bl	800f9c8 <xQueueGenericCreateStatic>
 801268a:	4602      	mov	r2, r0
 801268c:	4b08      	ldr	r3, [pc, #32]	; (80126b0 <prvCheckForValidListAndQueue+0x60>)
 801268e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8012690:	4b07      	ldr	r3, [pc, #28]	; (80126b0 <prvCheckForValidListAndQueue+0x60>)
 8012692:	681b      	ldr	r3, [r3, #0]
 8012694:	2b00      	cmp	r3, #0
 8012696:	d005      	beq.n	80126a4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8012698:	4b05      	ldr	r3, [pc, #20]	; (80126b0 <prvCheckForValidListAndQueue+0x60>)
 801269a:	681b      	ldr	r3, [r3, #0]
 801269c:	490b      	ldr	r1, [pc, #44]	; (80126cc <prvCheckForValidListAndQueue+0x7c>)
 801269e:	4618      	mov	r0, r3
 80126a0:	f7fe f944 	bl	801092c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80126a4:	f7fd f860 	bl	800f768 <vPortExitCritical>
}
 80126a8:	bf00      	nop
 80126aa:	46bd      	mov	sp, r7
 80126ac:	bd80      	pop	{r7, pc}
 80126ae:	bf00      	nop
 80126b0:	2002732c 	.word	0x2002732c
 80126b4:	200272fc 	.word	0x200272fc
 80126b8:	20027310 	.word	0x20027310
 80126bc:	20027324 	.word	0x20027324
 80126c0:	20027328 	.word	0x20027328
 80126c4:	200273d8 	.word	0x200273d8
 80126c8:	20027338 	.word	0x20027338
 80126cc:	08017264 	.word	0x08017264

080126d0 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 80126d0:	b580      	push	{r7, lr}
 80126d2:	b086      	sub	sp, #24
 80126d4:	af00      	add	r7, sp, #0
 80126d6:	6078      	str	r0, [r7, #4]
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	617b      	str	r3, [r7, #20]

	configASSERT( xTimer );
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d109      	bne.n	80126f6 <xTimerIsTimerActive+0x26>
 80126e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126e6:	f383 8811 	msr	BASEPRI, r3
 80126ea:	f3bf 8f6f 	isb	sy
 80126ee:	f3bf 8f4f 	dsb	sy
 80126f2:	60fb      	str	r3, [r7, #12]
 80126f4:	e7fe      	b.n	80126f4 <xTimerIsTimerActive+0x24>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 80126f6:	f7fd f809 	bl	800f70c <vPortEnterCritical>
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) ); /*lint !e961. Cast is only redundant when NULL is passed into the macro. */
 80126fa:	697b      	ldr	r3, [r7, #20]
 80126fc:	695b      	ldr	r3, [r3, #20]
 80126fe:	2b00      	cmp	r3, #0
 8012700:	bf14      	ite	ne
 8012702:	2301      	movne	r3, #1
 8012704:	2300      	moveq	r3, #0
 8012706:	b2db      	uxtb	r3, r3
 8012708:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 801270a:	f7fd f82d 	bl	800f768 <vPortExitCritical>

	return xTimerIsInActiveList;
 801270e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 8012710:	4618      	mov	r0, r3
 8012712:	3718      	adds	r7, #24
 8012714:	46bd      	mov	sp, r7
 8012716:	bd80      	pop	{r7, pc}

08012718 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8012718:	b580      	push	{r7, lr}
 801271a:	b086      	sub	sp, #24
 801271c:	af00      	add	r7, sp, #0
 801271e:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	2b00      	cmp	r3, #0
 8012728:	d109      	bne.n	801273e <pvTimerGetTimerID+0x26>
 801272a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801272e:	f383 8811 	msr	BASEPRI, r3
 8012732:	f3bf 8f6f 	isb	sy
 8012736:	f3bf 8f4f 	dsb	sy
 801273a:	60fb      	str	r3, [r7, #12]
 801273c:	e7fe      	b.n	801273c <pvTimerGetTimerID+0x24>

	taskENTER_CRITICAL();
 801273e:	f7fc ffe5 	bl	800f70c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8012742:	697b      	ldr	r3, [r7, #20]
 8012744:	6a1b      	ldr	r3, [r3, #32]
 8012746:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8012748:	f7fd f80e 	bl	800f768 <vPortExitCritical>

	return pvReturn;
 801274c:	693b      	ldr	r3, [r7, #16]
}
 801274e:	4618      	mov	r0, r3
 8012750:	3718      	adds	r7, #24
 8012752:	46bd      	mov	sp, r7
 8012754:	bd80      	pop	{r7, pc}

08012756 <otChildSupervisionSetInterval>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (uint16_t)p_ot_req->Data[0];
}

void otChildSupervisionSetInterval(otInstance *aInstance, uint16_t aInterval)
{
 8012756:	b580      	push	{r7, lr}
 8012758:	b084      	sub	sp, #16
 801275a:	af00      	add	r7, sp, #0
 801275c:	6078      	str	r0, [r7, #4]
 801275e:	460b      	mov	r3, r1
 8012760:	807b      	strh	r3, [r7, #2]
    Pre_OtCmdProcessing();
 8012762:	f002 fcdd 	bl	8015120 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012766:	f002 fc79 	bl	801505c <THREAD_Get_OTCmdPayloadBuffer>
 801276a:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_CHILD_SUPERVISION_SET_INTERVAL;
 801276c:	68fb      	ldr	r3, [r7, #12]
 801276e:	2200      	movs	r2, #0
 8012770:	f042 0232 	orr.w	r2, r2, #50	; 0x32
 8012774:	701a      	strb	r2, [r3, #0]
 8012776:	2200      	movs	r2, #0
 8012778:	f042 0201 	orr.w	r2, r2, #1
 801277c:	705a      	strb	r2, [r3, #1]
 801277e:	2200      	movs	r2, #0
 8012780:	709a      	strb	r2, [r3, #2]
 8012782:	2200      	movs	r2, #0
 8012784:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8012786:	68fb      	ldr	r3, [r7, #12]
 8012788:	2200      	movs	r2, #0
 801278a:	f042 0201 	orr.w	r2, r2, #1
 801278e:	711a      	strb	r2, [r3, #4]
 8012790:	2200      	movs	r2, #0
 8012792:	715a      	strb	r2, [r3, #5]
 8012794:	2200      	movs	r2, #0
 8012796:	719a      	strb	r2, [r3, #6]
 8012798:	2200      	movs	r2, #0
 801279a:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aInterval;
 801279c:	887a      	ldrh	r2, [r7, #2]
 801279e:	68fb      	ldr	r3, [r7, #12]
 80127a0:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 80127a2:	f002 fc7f 	bl	80150a4 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80127a6:	f002 fc65 	bl	8015074 <THREAD_Get_OTCmdRspPayloadBuffer>
 80127aa:	60f8      	str	r0, [r7, #12]
}
 80127ac:	bf00      	nop
 80127ae:	3710      	adds	r7, #16
 80127b0:	46bd      	mov	sp, r7
 80127b2:	bd80      	pop	{r7, pc}

080127b4 <otChildSupervisionSetCheckTimeout>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (uint16_t)p_ot_req->Data[0];
}

void otChildSupervisionSetCheckTimeout(otInstance *aInstance, uint16_t aTimeout)
{
 80127b4:	b580      	push	{r7, lr}
 80127b6:	b084      	sub	sp, #16
 80127b8:	af00      	add	r7, sp, #0
 80127ba:	6078      	str	r0, [r7, #4]
 80127bc:	460b      	mov	r3, r1
 80127be:	807b      	strh	r3, [r7, #2]
    Pre_OtCmdProcessing();
 80127c0:	f002 fcae 	bl	8015120 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80127c4:	f002 fc4a 	bl	801505c <THREAD_Get_OTCmdPayloadBuffer>
 80127c8:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_CHILD_SUPERVISION_SET_CHECK_TIMEOUT;
 80127ca:	68fb      	ldr	r3, [r7, #12]
 80127cc:	2200      	movs	r2, #0
 80127ce:	f042 0234 	orr.w	r2, r2, #52	; 0x34
 80127d2:	701a      	strb	r2, [r3, #0]
 80127d4:	2200      	movs	r2, #0
 80127d6:	f042 0201 	orr.w	r2, r2, #1
 80127da:	705a      	strb	r2, [r3, #1]
 80127dc:	2200      	movs	r2, #0
 80127de:	709a      	strb	r2, [r3, #2]
 80127e0:	2200      	movs	r2, #0
 80127e2:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 80127e4:	68fb      	ldr	r3, [r7, #12]
 80127e6:	2200      	movs	r2, #0
 80127e8:	f042 0201 	orr.w	r2, r2, #1
 80127ec:	711a      	strb	r2, [r3, #4]
 80127ee:	2200      	movs	r2, #0
 80127f0:	715a      	strb	r2, [r3, #5]
 80127f2:	2200      	movs	r2, #0
 80127f4:	719a      	strb	r2, [r3, #6]
 80127f6:	2200      	movs	r2, #0
 80127f8:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aTimeout;
 80127fa:	887a      	ldrh	r2, [r7, #2]
 80127fc:	68fb      	ldr	r3, [r7, #12]
 80127fe:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8012800:	f002 fc50 	bl	80150a4 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012804:	f002 fc36 	bl	8015074 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012808:	60f8      	str	r0, [r7, #12]
}
 801280a:	bf00      	nop
 801280c:	3710      	adds	r7, #16
 801280e:	46bd      	mov	sp, r7
 8012810:	bd80      	pop	{r7, pc}

08012812 <otCoapHeaderInit>:


#if OPENTHREAD_ENABLE_APPLICATION_COAP

void otCoapHeaderInit(otCoapHeader *aHeader, otCoapType aType, otCoapCode aCode)
{
 8012812:	b580      	push	{r7, lr}
 8012814:	b084      	sub	sp, #16
 8012816:	af00      	add	r7, sp, #0
 8012818:	6078      	str	r0, [r7, #4]
 801281a:	460b      	mov	r3, r1
 801281c:	70fb      	strb	r3, [r7, #3]
 801281e:	4613      	mov	r3, r2
 8012820:	70bb      	strb	r3, [r7, #2]
    Pre_OtCmdProcessing();
 8012822:	f002 fc7d 	bl	8015120 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012826:	f002 fc19 	bl	801505c <THREAD_Get_OTCmdPayloadBuffer>
 801282a:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_INIT;
 801282c:	68fb      	ldr	r3, [r7, #12]
 801282e:	2200      	movs	r2, #0
 8012830:	f062 0260 	orn	r2, r2, #96	; 0x60
 8012834:	701a      	strb	r2, [r3, #0]
 8012836:	2200      	movs	r2, #0
 8012838:	705a      	strb	r2, [r3, #1]
 801283a:	2200      	movs	r2, #0
 801283c:	709a      	strb	r2, [r3, #2]
 801283e:	2200      	movs	r2, #0
 8012840:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 8012842:	68fb      	ldr	r3, [r7, #12]
 8012844:	2200      	movs	r2, #0
 8012846:	f042 0203 	orr.w	r2, r2, #3
 801284a:	711a      	strb	r2, [r3, #4]
 801284c:	2200      	movs	r2, #0
 801284e:	715a      	strb	r2, [r3, #5]
 8012850:	2200      	movs	r2, #0
 8012852:	719a      	strb	r2, [r3, #6]
 8012854:	2200      	movs	r2, #0
 8012856:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8012858:	687a      	ldr	r2, [r7, #4]
 801285a:	68fb      	ldr	r3, [r7, #12]
 801285c:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = aType;
 801285e:	78fa      	ldrb	r2, [r7, #3]
 8012860:	68fb      	ldr	r3, [r7, #12]
 8012862:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (otCoapCode) aCode;
 8012864:	78ba      	ldrb	r2, [r7, #2]
 8012866:	68fb      	ldr	r3, [r7, #12]
 8012868:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 801286a:	f002 fc1b 	bl	80150a4 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801286e:	f002 fc01 	bl	8015074 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012872:	60f8      	str	r0, [r7, #12]
}
 8012874:	bf00      	nop
 8012876:	3710      	adds	r7, #16
 8012878:	46bd      	mov	sp, r7
 801287a:	bd80      	pop	{r7, pc}

0801287c <otCoapHeaderSetToken>:

void otCoapHeaderSetToken(otCoapHeader *aHeader, const uint8_t *aToken, uint8_t aTokenLength)
{
 801287c:	b580      	push	{r7, lr}
 801287e:	b086      	sub	sp, #24
 8012880:	af00      	add	r7, sp, #0
 8012882:	60f8      	str	r0, [r7, #12]
 8012884:	60b9      	str	r1, [r7, #8]
 8012886:	4613      	mov	r3, r2
 8012888:	71fb      	strb	r3, [r7, #7]
    Pre_OtCmdProcessing();
 801288a:	f002 fc49 	bl	8015120 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 801288e:	f002 fbe5 	bl	801505c <THREAD_Get_OTCmdPayloadBuffer>
 8012892:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_TOKEN;
 8012894:	697b      	ldr	r3, [r7, #20]
 8012896:	2200      	movs	r2, #0
 8012898:	f062 025f 	orn	r2, r2, #95	; 0x5f
 801289c:	701a      	strb	r2, [r3, #0]
 801289e:	2200      	movs	r2, #0
 80128a0:	705a      	strb	r2, [r3, #1]
 80128a2:	2200      	movs	r2, #0
 80128a4:	709a      	strb	r2, [r3, #2]
 80128a6:	2200      	movs	r2, #0
 80128a8:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 80128aa:	697b      	ldr	r3, [r7, #20]
 80128ac:	2200      	movs	r2, #0
 80128ae:	f042 0203 	orr.w	r2, r2, #3
 80128b2:	711a      	strb	r2, [r3, #4]
 80128b4:	2200      	movs	r2, #0
 80128b6:	715a      	strb	r2, [r3, #5]
 80128b8:	2200      	movs	r2, #0
 80128ba:	719a      	strb	r2, [r3, #6]
 80128bc:	2200      	movs	r2, #0
 80128be:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 80128c0:	68fa      	ldr	r2, [r7, #12]
 80128c2:	697b      	ldr	r3, [r7, #20]
 80128c4:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aToken;
 80128c6:	68ba      	ldr	r2, [r7, #8]
 80128c8:	697b      	ldr	r3, [r7, #20]
 80128ca:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (otCoapCode) aTokenLength;
 80128cc:	79fa      	ldrb	r2, [r7, #7]
 80128ce:	697b      	ldr	r3, [r7, #20]
 80128d0:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 80128d2:	f002 fbe7 	bl	80150a4 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80128d6:	f002 fbcd 	bl	8015074 <THREAD_Get_OTCmdRspPayloadBuffer>
 80128da:	6178      	str	r0, [r7, #20]
}
 80128dc:	bf00      	nop
 80128de:	3718      	adds	r7, #24
 80128e0:	46bd      	mov	sp, r7
 80128e2:	bd80      	pop	{r7, pc}

080128e4 <otCoapHeaderGenerateToken>:

void otCoapHeaderGenerateToken(otCoapHeader *aHeader, uint8_t aTokenLength)
{
 80128e4:	b580      	push	{r7, lr}
 80128e6:	b084      	sub	sp, #16
 80128e8:	af00      	add	r7, sp, #0
 80128ea:	6078      	str	r0, [r7, #4]
 80128ec:	460b      	mov	r3, r1
 80128ee:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 80128f0:	f002 fc16 	bl	8015120 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80128f4:	f002 fbb2 	bl	801505c <THREAD_Get_OTCmdPayloadBuffer>
 80128f8:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GENERATE_TOKEN;
 80128fa:	68fb      	ldr	r3, [r7, #12]
 80128fc:	2200      	movs	r2, #0
 80128fe:	f062 025e 	orn	r2, r2, #94	; 0x5e
 8012902:	701a      	strb	r2, [r3, #0]
 8012904:	2200      	movs	r2, #0
 8012906:	705a      	strb	r2, [r3, #1]
 8012908:	2200      	movs	r2, #0
 801290a:	709a      	strb	r2, [r3, #2]
 801290c:	2200      	movs	r2, #0
 801290e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 8012910:	68fb      	ldr	r3, [r7, #12]
 8012912:	2200      	movs	r2, #0
 8012914:	f042 0202 	orr.w	r2, r2, #2
 8012918:	711a      	strb	r2, [r3, #4]
 801291a:	2200      	movs	r2, #0
 801291c:	715a      	strb	r2, [r3, #5]
 801291e:	2200      	movs	r2, #0
 8012920:	719a      	strb	r2, [r3, #6]
 8012922:	2200      	movs	r2, #0
 8012924:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8012926:	687a      	ldr	r2, [r7, #4]
 8012928:	68fb      	ldr	r3, [r7, #12]
 801292a:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aTokenLength;
 801292c:	78fa      	ldrb	r2, [r7, #3]
 801292e:	68fb      	ldr	r3, [r7, #12]
 8012930:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 8012932:	f002 fbb7 	bl	80150a4 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012936:	f002 fb9d 	bl	8015074 <THREAD_Get_OTCmdRspPayloadBuffer>
 801293a:	60f8      	str	r0, [r7, #12]
}
 801293c:	bf00      	nop
 801293e:	3710      	adds	r7, #16
 8012940:	46bd      	mov	sp, r7
 8012942:	bd80      	pop	{r7, pc}

08012944 <otCoapHeaderAppendContentFormatOption>:

otError otCoapHeaderAppendContentFormatOption(otCoapHeader *aHeader, otCoapOptionContentFormat aContentFormat)
{
 8012944:	b580      	push	{r7, lr}
 8012946:	b084      	sub	sp, #16
 8012948:	af00      	add	r7, sp, #0
 801294a:	6078      	str	r0, [r7, #4]
 801294c:	460b      	mov	r3, r1
 801294e:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 8012950:	f002 fbe6 	bl	8015120 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012954:	f002 fb82 	bl	801505c <THREAD_Get_OTCmdPayloadBuffer>
 8012958:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_APPEND_CONTENT_FORMAT_OPTION;
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	2200      	movs	r2, #0
 801295e:	f062 025d 	orn	r2, r2, #93	; 0x5d
 8012962:	701a      	strb	r2, [r3, #0]
 8012964:	2200      	movs	r2, #0
 8012966:	705a      	strb	r2, [r3, #1]
 8012968:	2200      	movs	r2, #0
 801296a:	709a      	strb	r2, [r3, #2]
 801296c:	2200      	movs	r2, #0
 801296e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 8012970:	68fb      	ldr	r3, [r7, #12]
 8012972:	2200      	movs	r2, #0
 8012974:	f042 0202 	orr.w	r2, r2, #2
 8012978:	711a      	strb	r2, [r3, #4]
 801297a:	2200      	movs	r2, #0
 801297c:	715a      	strb	r2, [r3, #5]
 801297e:	2200      	movs	r2, #0
 8012980:	719a      	strb	r2, [r3, #6]
 8012982:	2200      	movs	r2, #0
 8012984:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8012986:	687a      	ldr	r2, [r7, #4]
 8012988:	68fb      	ldr	r3, [r7, #12]
 801298a:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aContentFormat;
 801298c:	78fa      	ldrb	r2, [r7, #3]
 801298e:	68fb      	ldr	r3, [r7, #12]
 8012990:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 8012992:	f002 fb87 	bl	80150a4 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012996:	f002 fb6d 	bl	8015074 <THREAD_Get_OTCmdRspPayloadBuffer>
 801299a:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 801299c:	68fb      	ldr	r3, [r7, #12]
 801299e:	689b      	ldr	r3, [r3, #8]
 80129a0:	b2db      	uxtb	r3, r3
}
 80129a2:	4618      	mov	r0, r3
 80129a4:	3710      	adds	r7, #16
 80129a6:	46bd      	mov	sp, r7
 80129a8:	bd80      	pop	{r7, pc}

080129aa <otCoapHeaderAppendUriPathOptions>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError) p_ot_req->Data[0];
}

otError otCoapHeaderAppendUriPathOptions(otCoapHeader *aHeader, const char *aUriPath)
{
 80129aa:	b580      	push	{r7, lr}
 80129ac:	b084      	sub	sp, #16
 80129ae:	af00      	add	r7, sp, #0
 80129b0:	6078      	str	r0, [r7, #4]
 80129b2:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 80129b4:	f002 fbb4 	bl	8015120 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80129b8:	f002 fb50 	bl	801505c <THREAD_Get_OTCmdPayloadBuffer>
 80129bc:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_APPEND_URI_PATH_OPTIONS;
 80129be:	68fb      	ldr	r3, [r7, #12]
 80129c0:	2200      	movs	r2, #0
 80129c2:	f062 0250 	orn	r2, r2, #80	; 0x50
 80129c6:	701a      	strb	r2, [r3, #0]
 80129c8:	2200      	movs	r2, #0
 80129ca:	705a      	strb	r2, [r3, #1]
 80129cc:	2200      	movs	r2, #0
 80129ce:	709a      	strb	r2, [r3, #2]
 80129d0:	2200      	movs	r2, #0
 80129d2:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 80129d4:	68fb      	ldr	r3, [r7, #12]
 80129d6:	2200      	movs	r2, #0
 80129d8:	f042 0202 	orr.w	r2, r2, #2
 80129dc:	711a      	strb	r2, [r3, #4]
 80129de:	2200      	movs	r2, #0
 80129e0:	715a      	strb	r2, [r3, #5]
 80129e2:	2200      	movs	r2, #0
 80129e4:	719a      	strb	r2, [r3, #6]
 80129e6:	2200      	movs	r2, #0
 80129e8:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 80129ea:	687a      	ldr	r2, [r7, #4]
 80129ec:	68fb      	ldr	r3, [r7, #12]
 80129ee:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aUriPath;
 80129f0:	683a      	ldr	r2, [r7, #0]
 80129f2:	68fb      	ldr	r3, [r7, #12]
 80129f4:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 80129f6:	f002 fb55 	bl	80150a4 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80129fa:	f002 fb3b 	bl	8015074 <THREAD_Get_OTCmdRspPayloadBuffer>
 80129fe:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 8012a00:	68fb      	ldr	r3, [r7, #12]
 8012a02:	689b      	ldr	r3, [r3, #8]
 8012a04:	b2db      	uxtb	r3, r3
}
 8012a06:	4618      	mov	r0, r3
 8012a08:	3710      	adds	r7, #16
 8012a0a:	46bd      	mov	sp, r7
 8012a0c:	bd80      	pop	{r7, pc}

08012a0e <otCoapHeaderSetPayloadMarker>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError) p_ot_req->Data[0];
}

otError otCoapHeaderSetPayloadMarker(otCoapHeader *aHeader)
{
 8012a0e:	b580      	push	{r7, lr}
 8012a10:	b084      	sub	sp, #16
 8012a12:	af00      	add	r7, sp, #0
 8012a14:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8012a16:	f002 fb83 	bl	8015120 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012a1a:	f002 fb1f 	bl	801505c <THREAD_Get_OTCmdPayloadBuffer>
 8012a1e:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_PAYLOAD_MARKER;
 8012a20:	68fb      	ldr	r3, [r7, #12]
 8012a22:	2200      	movs	r2, #0
 8012a24:	f062 024d 	orn	r2, r2, #77	; 0x4d
 8012a28:	701a      	strb	r2, [r3, #0]
 8012a2a:	2200      	movs	r2, #0
 8012a2c:	705a      	strb	r2, [r3, #1]
 8012a2e:	2200      	movs	r2, #0
 8012a30:	709a      	strb	r2, [r3, #2]
 8012a32:	2200      	movs	r2, #0
 8012a34:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8012a36:	68fb      	ldr	r3, [r7, #12]
 8012a38:	2200      	movs	r2, #0
 8012a3a:	f042 0201 	orr.w	r2, r2, #1
 8012a3e:	711a      	strb	r2, [r3, #4]
 8012a40:	2200      	movs	r2, #0
 8012a42:	715a      	strb	r2, [r3, #5]
 8012a44:	2200      	movs	r2, #0
 8012a46:	719a      	strb	r2, [r3, #6]
 8012a48:	2200      	movs	r2, #0
 8012a4a:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8012a4c:	687a      	ldr	r2, [r7, #4]
 8012a4e:	68fb      	ldr	r3, [r7, #12]
 8012a50:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8012a52:	f002 fb27 	bl	80150a4 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012a56:	f002 fb0d 	bl	8015074 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012a5a:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 8012a5c:	68fb      	ldr	r3, [r7, #12]
 8012a5e:	689b      	ldr	r3, [r3, #8]
 8012a60:	b2db      	uxtb	r3, r3
}
 8012a62:	4618      	mov	r0, r3
 8012a64:	3710      	adds	r7, #16
 8012a66:	46bd      	mov	sp, r7
 8012a68:	bd80      	pop	{r7, pc}

08012a6a <otCoapHeaderSetMessageId>:

void otCoapHeaderSetMessageId(otCoapHeader *aHeader, uint16_t aMessageId)
{
 8012a6a:	b580      	push	{r7, lr}
 8012a6c:	b084      	sub	sp, #16
 8012a6e:	af00      	add	r7, sp, #0
 8012a70:	6078      	str	r0, [r7, #4]
 8012a72:	460b      	mov	r3, r1
 8012a74:	807b      	strh	r3, [r7, #2]
    Pre_OtCmdProcessing();
 8012a76:	f002 fb53 	bl	8015120 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012a7a:	f002 faef 	bl	801505c <THREAD_Get_OTCmdPayloadBuffer>
 8012a7e:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_MESSAGE_ID;
 8012a80:	68fb      	ldr	r3, [r7, #12]
 8012a82:	2200      	movs	r2, #0
 8012a84:	f062 0256 	orn	r2, r2, #86	; 0x56
 8012a88:	701a      	strb	r2, [r3, #0]
 8012a8a:	2200      	movs	r2, #0
 8012a8c:	705a      	strb	r2, [r3, #1]
 8012a8e:	2200      	movs	r2, #0
 8012a90:	709a      	strb	r2, [r3, #2]
 8012a92:	2200      	movs	r2, #0
 8012a94:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 8012a96:	68fb      	ldr	r3, [r7, #12]
 8012a98:	2200      	movs	r2, #0
 8012a9a:	f042 0202 	orr.w	r2, r2, #2
 8012a9e:	711a      	strb	r2, [r3, #4]
 8012aa0:	2200      	movs	r2, #0
 8012aa2:	715a      	strb	r2, [r3, #5]
 8012aa4:	2200      	movs	r2, #0
 8012aa6:	719a      	strb	r2, [r3, #6]
 8012aa8:	2200      	movs	r2, #0
 8012aaa:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8012aac:	687a      	ldr	r2, [r7, #4]
 8012aae:	68fb      	ldr	r3, [r7, #12]
 8012ab0:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint16_t ) aMessageId;
 8012ab2:	887a      	ldrh	r2, [r7, #2]
 8012ab4:	68fb      	ldr	r3, [r7, #12]
 8012ab6:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 8012ab8:	f002 faf4 	bl	80150a4 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012abc:	f002 fada 	bl	8015074 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012ac0:	60f8      	str	r0, [r7, #12]
}
 8012ac2:	bf00      	nop
 8012ac4:	3710      	adds	r7, #16
 8012ac6:	46bd      	mov	sp, r7
 8012ac8:	bd80      	pop	{r7, pc}

08012aca <otCoapHeaderGetType>:

otCoapType otCoapHeaderGetType(const otCoapHeader *aHeader)
{
 8012aca:	b580      	push	{r7, lr}
 8012acc:	b084      	sub	sp, #16
 8012ace:	af00      	add	r7, sp, #0
 8012ad0:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8012ad2:	f002 fb25 	bl	8015120 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012ad6:	f002 fac1 	bl	801505c <THREAD_Get_OTCmdPayloadBuffer>
 8012ada:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TYPE;
 8012adc:	68fb      	ldr	r3, [r7, #12]
 8012ade:	2200      	movs	r2, #0
 8012ae0:	f062 0261 	orn	r2, r2, #97	; 0x61
 8012ae4:	701a      	strb	r2, [r3, #0]
 8012ae6:	2200      	movs	r2, #0
 8012ae8:	705a      	strb	r2, [r3, #1]
 8012aea:	2200      	movs	r2, #0
 8012aec:	709a      	strb	r2, [r3, #2]
 8012aee:	2200      	movs	r2, #0
 8012af0:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8012af2:	68fb      	ldr	r3, [r7, #12]
 8012af4:	2200      	movs	r2, #0
 8012af6:	f042 0201 	orr.w	r2, r2, #1
 8012afa:	711a      	strb	r2, [r3, #4]
 8012afc:	2200      	movs	r2, #0
 8012afe:	715a      	strb	r2, [r3, #5]
 8012b00:	2200      	movs	r2, #0
 8012b02:	719a      	strb	r2, [r3, #6]
 8012b04:	2200      	movs	r2, #0
 8012b06:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8012b08:	687a      	ldr	r2, [r7, #4]
 8012b0a:	68fb      	ldr	r3, [r7, #12]
 8012b0c:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8012b0e:	f002 fac9 	bl	80150a4 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012b12:	f002 faaf 	bl	8015074 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012b16:	60f8      	str	r0, [r7, #12]
    return (otCoapType)p_ot_req->Data[0];
 8012b18:	68fb      	ldr	r3, [r7, #12]
 8012b1a:	689b      	ldr	r3, [r3, #8]
 8012b1c:	b2db      	uxtb	r3, r3
}
 8012b1e:	4618      	mov	r0, r3
 8012b20:	3710      	adds	r7, #16
 8012b22:	46bd      	mov	sp, r7
 8012b24:	bd80      	pop	{r7, pc}

08012b26 <otCoapHeaderGetCode>:

otCoapCode otCoapHeaderGetCode(const otCoapHeader *aHeader)
{
 8012b26:	b580      	push	{r7, lr}
 8012b28:	b084      	sub	sp, #16
 8012b2a:	af00      	add	r7, sp, #0
 8012b2c:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8012b2e:	f002 faf7 	bl	8015120 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012b32:	f002 fa93 	bl	801505c <THREAD_Get_OTCmdPayloadBuffer>
 8012b36:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_CODE;
 8012b38:	68fb      	ldr	r3, [r7, #12]
 8012b3a:	2200      	movs	r2, #0
 8012b3c:	f062 024c 	orn	r2, r2, #76	; 0x4c
 8012b40:	701a      	strb	r2, [r3, #0]
 8012b42:	2200      	movs	r2, #0
 8012b44:	705a      	strb	r2, [r3, #1]
 8012b46:	2200      	movs	r2, #0
 8012b48:	709a      	strb	r2, [r3, #2]
 8012b4a:	2200      	movs	r2, #0
 8012b4c:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8012b4e:	68fb      	ldr	r3, [r7, #12]
 8012b50:	2200      	movs	r2, #0
 8012b52:	f042 0201 	orr.w	r2, r2, #1
 8012b56:	711a      	strb	r2, [r3, #4]
 8012b58:	2200      	movs	r2, #0
 8012b5a:	715a      	strb	r2, [r3, #5]
 8012b5c:	2200      	movs	r2, #0
 8012b5e:	719a      	strb	r2, [r3, #6]
 8012b60:	2200      	movs	r2, #0
 8012b62:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8012b64:	687a      	ldr	r2, [r7, #4]
 8012b66:	68fb      	ldr	r3, [r7, #12]
 8012b68:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8012b6a:	f002 fa9b 	bl	80150a4 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012b6e:	f002 fa81 	bl	8015074 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012b72:	60f8      	str	r0, [r7, #12]
    return (otCoapCode)p_ot_req->Data[0];
 8012b74:	68fb      	ldr	r3, [r7, #12]
 8012b76:	689b      	ldr	r3, [r3, #8]
 8012b78:	b2db      	uxtb	r3, r3
}
 8012b7a:	4618      	mov	r0, r3
 8012b7c:	3710      	adds	r7, #16
 8012b7e:	46bd      	mov	sp, r7
 8012b80:	bd80      	pop	{r7, pc}

08012b82 <otCoapHeaderGetMessageId>:

uint16_t otCoapHeaderGetMessageId(const otCoapHeader *aHeader)
{
 8012b82:	b580      	push	{r7, lr}
 8012b84:	b084      	sub	sp, #16
 8012b86:	af00      	add	r7, sp, #0
 8012b88:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8012b8a:	f002 fac9 	bl	8015120 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012b8e:	f002 fa65 	bl	801505c <THREAD_Get_OTCmdPayloadBuffer>
 8012b92:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_MESSAGE_ID;
 8012b94:	68fb      	ldr	r3, [r7, #12]
 8012b96:	2200      	movs	r2, #0
 8012b98:	f062 0255 	orn	r2, r2, #85	; 0x55
 8012b9c:	701a      	strb	r2, [r3, #0]
 8012b9e:	2200      	movs	r2, #0
 8012ba0:	705a      	strb	r2, [r3, #1]
 8012ba2:	2200      	movs	r2, #0
 8012ba4:	709a      	strb	r2, [r3, #2]
 8012ba6:	2200      	movs	r2, #0
 8012ba8:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8012baa:	68fb      	ldr	r3, [r7, #12]
 8012bac:	2200      	movs	r2, #0
 8012bae:	f042 0201 	orr.w	r2, r2, #1
 8012bb2:	711a      	strb	r2, [r3, #4]
 8012bb4:	2200      	movs	r2, #0
 8012bb6:	715a      	strb	r2, [r3, #5]
 8012bb8:	2200      	movs	r2, #0
 8012bba:	719a      	strb	r2, [r3, #6]
 8012bbc:	2200      	movs	r2, #0
 8012bbe:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8012bc0:	687a      	ldr	r2, [r7, #4]
 8012bc2:	68fb      	ldr	r3, [r7, #12]
 8012bc4:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8012bc6:	f002 fa6d 	bl	80150a4 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012bca:	f002 fa53 	bl	8015074 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012bce:	60f8      	str	r0, [r7, #12]
    return (uint16_t)p_ot_req->Data[0];
 8012bd0:	68fb      	ldr	r3, [r7, #12]
 8012bd2:	689b      	ldr	r3, [r3, #8]
 8012bd4:	b29b      	uxth	r3, r3
}
 8012bd6:	4618      	mov	r0, r3
 8012bd8:	3710      	adds	r7, #16
 8012bda:	46bd      	mov	sp, r7
 8012bdc:	bd80      	pop	{r7, pc}

08012bde <otCoapHeaderGetTokenLength>:

uint8_t otCoapHeaderGetTokenLength(const otCoapHeader *aHeader)
{
 8012bde:	b580      	push	{r7, lr}
 8012be0:	b084      	sub	sp, #16
 8012be2:	af00      	add	r7, sp, #0
 8012be4:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8012be6:	f002 fa9b 	bl	8015120 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012bea:	f002 fa37 	bl	801505c <THREAD_Get_OTCmdPayloadBuffer>
 8012bee:	60f8      	str	r0, [r7, #12]

   p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TOKEN_LENGTH;
 8012bf0:	68fb      	ldr	r3, [r7, #12]
 8012bf2:	2200      	movs	r2, #0
 8012bf4:	f062 0254 	orn	r2, r2, #84	; 0x54
 8012bf8:	701a      	strb	r2, [r3, #0]
 8012bfa:	2200      	movs	r2, #0
 8012bfc:	705a      	strb	r2, [r3, #1]
 8012bfe:	2200      	movs	r2, #0
 8012c00:	709a      	strb	r2, [r3, #2]
 8012c02:	2200      	movs	r2, #0
 8012c04:	70da      	strb	r2, [r3, #3]

   p_ot_req->Size=1;
 8012c06:	68fb      	ldr	r3, [r7, #12]
 8012c08:	2200      	movs	r2, #0
 8012c0a:	f042 0201 	orr.w	r2, r2, #1
 8012c0e:	711a      	strb	r2, [r3, #4]
 8012c10:	2200      	movs	r2, #0
 8012c12:	715a      	strb	r2, [r3, #5]
 8012c14:	2200      	movs	r2, #0
 8012c16:	719a      	strb	r2, [r3, #6]
 8012c18:	2200      	movs	r2, #0
 8012c1a:	71da      	strb	r2, [r3, #7]
   p_ot_req->Data[0] = (uint32_t) aHeader;
 8012c1c:	687a      	ldr	r2, [r7, #4]
 8012c1e:	68fb      	ldr	r3, [r7, #12]
 8012c20:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8012c22:	f002 fa3f 	bl	80150a4 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012c26:	f002 fa25 	bl	8015074 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012c2a:	60f8      	str	r0, [r7, #12]
   return (uint8_t)p_ot_req->Data[0];
 8012c2c:	68fb      	ldr	r3, [r7, #12]
 8012c2e:	689b      	ldr	r3, [r3, #8]
 8012c30:	b2db      	uxtb	r3, r3
}
 8012c32:	4618      	mov	r0, r3
 8012c34:	3710      	adds	r7, #16
 8012c36:	46bd      	mov	sp, r7
 8012c38:	bd80      	pop	{r7, pc}

08012c3a <otCoapHeaderGetToken>:

const uint8_t *otCoapHeaderGetToken(const otCoapHeader *aHeader)
{
 8012c3a:	b580      	push	{r7, lr}
 8012c3c:	b084      	sub	sp, #16
 8012c3e:	af00      	add	r7, sp, #0
 8012c40:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8012c42:	f002 fa6d 	bl	8015120 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012c46:	f002 fa09 	bl	801505c <THREAD_Get_OTCmdPayloadBuffer>
 8012c4a:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TOKEN;
 8012c4c:	68fb      	ldr	r3, [r7, #12]
 8012c4e:	2200      	movs	r2, #0
 8012c50:	f062 0253 	orn	r2, r2, #83	; 0x53
 8012c54:	701a      	strb	r2, [r3, #0]
 8012c56:	2200      	movs	r2, #0
 8012c58:	705a      	strb	r2, [r3, #1]
 8012c5a:	2200      	movs	r2, #0
 8012c5c:	709a      	strb	r2, [r3, #2]
 8012c5e:	2200      	movs	r2, #0
 8012c60:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8012c62:	68fb      	ldr	r3, [r7, #12]
 8012c64:	2200      	movs	r2, #0
 8012c66:	f042 0201 	orr.w	r2, r2, #1
 8012c6a:	711a      	strb	r2, [r3, #4]
 8012c6c:	2200      	movs	r2, #0
 8012c6e:	715a      	strb	r2, [r3, #5]
 8012c70:	2200      	movs	r2, #0
 8012c72:	719a      	strb	r2, [r3, #6]
 8012c74:	2200      	movs	r2, #0
 8012c76:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8012c78:	687a      	ldr	r2, [r7, #4]
 8012c7a:	68fb      	ldr	r3, [r7, #12]
 8012c7c:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8012c7e:	f002 fa11 	bl	80150a4 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012c82:	f002 f9f7 	bl	8015074 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012c86:	60f8      	str	r0, [r7, #12]
    return (uint8_t *)p_ot_req->Data[0];
 8012c88:	68fb      	ldr	r3, [r7, #12]
 8012c8a:	689b      	ldr	r3, [r3, #8]
}
 8012c8c:	4618      	mov	r0, r3
 8012c8e:	3710      	adds	r7, #16
 8012c90:	46bd      	mov	sp, r7
 8012c92:	bd80      	pop	{r7, pc}

08012c94 <otCoapNewMessage>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otCoapOption *)p_ot_req->Data[0];
}

otMessage *otCoapNewMessage(otInstance *aInstance, const otCoapHeader *aHeader)
{
 8012c94:	b580      	push	{r7, lr}
 8012c96:	b084      	sub	sp, #16
 8012c98:	af00      	add	r7, sp, #0
 8012c9a:	6078      	str	r0, [r7, #4]
 8012c9c:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 8012c9e:	f002 fa3f 	bl	8015120 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012ca2:	f002 f9db 	bl	801505c <THREAD_Get_OTCmdPayloadBuffer>
 8012ca6:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_NEW_MESSAGE;
 8012ca8:	68fb      	ldr	r3, [r7, #12]
 8012caa:	2200      	movs	r2, #0
 8012cac:	f062 0259 	orn	r2, r2, #89	; 0x59
 8012cb0:	701a      	strb	r2, [r3, #0]
 8012cb2:	2200      	movs	r2, #0
 8012cb4:	705a      	strb	r2, [r3, #1]
 8012cb6:	2200      	movs	r2, #0
 8012cb8:	709a      	strb	r2, [r3, #2]
 8012cba:	2200      	movs	r2, #0
 8012cbc:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8012cbe:	68fb      	ldr	r3, [r7, #12]
 8012cc0:	2200      	movs	r2, #0
 8012cc2:	f042 0201 	orr.w	r2, r2, #1
 8012cc6:	711a      	strb	r2, [r3, #4]
 8012cc8:	2200      	movs	r2, #0
 8012cca:	715a      	strb	r2, [r3, #5]
 8012ccc:	2200      	movs	r2, #0
 8012cce:	719a      	strb	r2, [r3, #6]
 8012cd0:	2200      	movs	r2, #0
 8012cd2:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8012cd4:	683a      	ldr	r2, [r7, #0]
 8012cd6:	68fb      	ldr	r3, [r7, #12]
 8012cd8:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8012cda:	f002 f9e3 	bl	80150a4 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012cde:	f002 f9c9 	bl	8015074 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012ce2:	60f8      	str	r0, [r7, #12]
    return (otMessage *)p_ot_req->Data[0];
 8012ce4:	68fb      	ldr	r3, [r7, #12]
 8012ce6:	689b      	ldr	r3, [r3, #8]

}
 8012ce8:	4618      	mov	r0, r3
 8012cea:	3710      	adds	r7, #16
 8012cec:	46bd      	mov	sp, r7
 8012cee:	bd80      	pop	{r7, pc}

08012cf0 <otCoapSendRequest>:

otError otCoapSendRequest(otInstance *aInstance,otMessage *aMessage, const otMessageInfo *aMessageInfo,
                              otCoapResponseHandler aHandler, void *aContext)
{
 8012cf0:	b580      	push	{r7, lr}
 8012cf2:	b086      	sub	sp, #24
 8012cf4:	af00      	add	r7, sp, #0
 8012cf6:	60f8      	str	r0, [r7, #12]
 8012cf8:	60b9      	str	r1, [r7, #8]
 8012cfa:	607a      	str	r2, [r7, #4]
 8012cfc:	603b      	str	r3, [r7, #0]
    Pre_OtCmdProcessing();
 8012cfe:	f002 fa0f 	bl	8015120 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012d02:	f002 f9ab 	bl	801505c <THREAD_Get_OTCmdPayloadBuffer>
 8012d06:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_REQUEST;
 8012d08:	697b      	ldr	r3, [r7, #20]
 8012d0a:	2200      	movs	r2, #0
 8012d0c:	f062 0258 	orn	r2, r2, #88	; 0x58
 8012d10:	701a      	strb	r2, [r3, #0]
 8012d12:	2200      	movs	r2, #0
 8012d14:	705a      	strb	r2, [r3, #1]
 8012d16:	2200      	movs	r2, #0
 8012d18:	709a      	strb	r2, [r3, #2]
 8012d1a:	2200      	movs	r2, #0
 8012d1c:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 8012d1e:	697b      	ldr	r3, [r7, #20]
 8012d20:	2200      	movs	r2, #0
 8012d22:	f042 0203 	orr.w	r2, r2, #3
 8012d26:	711a      	strb	r2, [r3, #4]
 8012d28:	2200      	movs	r2, #0
 8012d2a:	715a      	strb	r2, [r3, #5]
 8012d2c:	2200      	movs	r2, #0
 8012d2e:	719a      	strb	r2, [r3, #6]
 8012d30:	2200      	movs	r2, #0
 8012d32:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 8012d34:	68ba      	ldr	r2, [r7, #8]
 8012d36:	697b      	ldr	r3, [r7, #20]
 8012d38:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 8012d3a:	687a      	ldr	r2, [r7, #4]
 8012d3c:	697b      	ldr	r3, [r7, #20]
 8012d3e:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aHandler;
 8012d40:	683a      	ldr	r2, [r7, #0]
 8012d42:	697b      	ldr	r3, [r7, #20]
 8012d44:	611a      	str	r2, [r3, #16]
    p_ot_req->Data[3] = (uint32_t) aContext;
 8012d46:	6a3a      	ldr	r2, [r7, #32]
 8012d48:	697b      	ldr	r3, [r7, #20]
 8012d4a:	615a      	str	r2, [r3, #20]

    Ot_Cmd_Transfer();
 8012d4c:	f002 f9aa 	bl	80150a4 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012d50:	f002 f990 	bl	8015074 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012d54:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 8012d56:	697b      	ldr	r3, [r7, #20]
 8012d58:	689b      	ldr	r3, [r3, #8]
 8012d5a:	b2db      	uxtb	r3, r3
}
 8012d5c:	4618      	mov	r0, r3
 8012d5e:	3718      	adds	r7, #24
 8012d60:	46bd      	mov	sp, r7
 8012d62:	bd80      	pop	{r7, pc}

08012d64 <otCoapStart>:

otError otCoapStart(otInstance *aInstance, uint16_t aPort)
{
 8012d64:	b580      	push	{r7, lr}
 8012d66:	b084      	sub	sp, #16
 8012d68:	af00      	add	r7, sp, #0
 8012d6a:	6078      	str	r0, [r7, #4]
 8012d6c:	460b      	mov	r3, r1
 8012d6e:	807b      	strh	r3, [r7, #2]
    Pre_OtCmdProcessing();
 8012d70:	f002 f9d6 	bl	8015120 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012d74:	f002 f972 	bl	801505c <THREAD_Get_OTCmdPayloadBuffer>
 8012d78:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_START;
 8012d7a:	68fb      	ldr	r3, [r7, #12]
 8012d7c:	2200      	movs	r2, #0
 8012d7e:	f062 024b 	orn	r2, r2, #75	; 0x4b
 8012d82:	701a      	strb	r2, [r3, #0]
 8012d84:	2200      	movs	r2, #0
 8012d86:	705a      	strb	r2, [r3, #1]
 8012d88:	2200      	movs	r2, #0
 8012d8a:	709a      	strb	r2, [r3, #2]
 8012d8c:	2200      	movs	r2, #0
 8012d8e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8012d90:	68fb      	ldr	r3, [r7, #12]
 8012d92:	2200      	movs	r2, #0
 8012d94:	f042 0201 	orr.w	r2, r2, #1
 8012d98:	711a      	strb	r2, [r3, #4]
 8012d9a:	2200      	movs	r2, #0
 8012d9c:	715a      	strb	r2, [r3, #5]
 8012d9e:	2200      	movs	r2, #0
 8012da0:	719a      	strb	r2, [r3, #6]
 8012da2:	2200      	movs	r2, #0
 8012da4:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint16_t) aPort;
 8012da6:	887a      	ldrh	r2, [r7, #2]
 8012da8:	68fb      	ldr	r3, [r7, #12]
 8012daa:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8012dac:	f002 f97a 	bl	80150a4 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012db0:	f002 f960 	bl	8015074 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012db4:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 8012db6:	68fb      	ldr	r3, [r7, #12]
 8012db8:	689b      	ldr	r3, [r3, #8]
 8012dba:	b2db      	uxtb	r3, r3
}
 8012dbc:	4618      	mov	r0, r3
 8012dbe:	3710      	adds	r7, #16
 8012dc0:	46bd      	mov	sp, r7
 8012dc2:	bd80      	pop	{r7, pc}

08012dc4 <otCoapAddResource>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError)p_ot_req->Data[0];
}

otError otCoapAddResource(otInstance *aInstance, otCoapResource *aResource)
{
 8012dc4:	b580      	push	{r7, lr}
 8012dc6:	b084      	sub	sp, #16
 8012dc8:	af00      	add	r7, sp, #0
 8012dca:	6078      	str	r0, [r7, #4]
 8012dcc:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 8012dce:	f002 f9a7 	bl	8015120 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012dd2:	f002 f943 	bl	801505c <THREAD_Get_OTCmdPayloadBuffer>
 8012dd6:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_ADD_RESSOURCE;
 8012dd8:	68fb      	ldr	r3, [r7, #12]
 8012dda:	2200      	movs	r2, #0
 8012ddc:	f062 0249 	orn	r2, r2, #73	; 0x49
 8012de0:	701a      	strb	r2, [r3, #0]
 8012de2:	2200      	movs	r2, #0
 8012de4:	705a      	strb	r2, [r3, #1]
 8012de6:	2200      	movs	r2, #0
 8012de8:	709a      	strb	r2, [r3, #2]
 8012dea:	2200      	movs	r2, #0
 8012dec:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8012dee:	68fb      	ldr	r3, [r7, #12]
 8012df0:	2200      	movs	r2, #0
 8012df2:	f042 0201 	orr.w	r2, r2, #1
 8012df6:	711a      	strb	r2, [r3, #4]
 8012df8:	2200      	movs	r2, #0
 8012dfa:	715a      	strb	r2, [r3, #5]
 8012dfc:	2200      	movs	r2, #0
 8012dfe:	719a      	strb	r2, [r3, #6]
 8012e00:	2200      	movs	r2, #0
 8012e02:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aResource;
 8012e04:	683a      	ldr	r2, [r7, #0]
 8012e06:	68fb      	ldr	r3, [r7, #12]
 8012e08:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8012e0a:	f002 f94b 	bl	80150a4 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012e0e:	f002 f931 	bl	8015074 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012e12:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 8012e14:	68fb      	ldr	r3, [r7, #12]
 8012e16:	689b      	ldr	r3, [r3, #8]
 8012e18:	b2db      	uxtb	r3, r3
}
 8012e1a:	4618      	mov	r0, r3
 8012e1c:	3710      	adds	r7, #16
 8012e1e:	46bd      	mov	sp, r7
 8012e20:	bd80      	pop	{r7, pc}

08012e22 <otCoapSendResponse>:

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otCoapSendResponse(otInstance *aInstance, otMessage *aMessage, const otMessageInfo *aMessageInfo)
{
 8012e22:	b580      	push	{r7, lr}
 8012e24:	b086      	sub	sp, #24
 8012e26:	af00      	add	r7, sp, #0
 8012e28:	60f8      	str	r0, [r7, #12]
 8012e2a:	60b9      	str	r1, [r7, #8]
 8012e2c:	607a      	str	r2, [r7, #4]
    Pre_OtCmdProcessing();
 8012e2e:	f002 f977 	bl	8015120 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012e32:	f002 f913 	bl	801505c <THREAD_Get_OTCmdPayloadBuffer>
 8012e36:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_RESPONSE;
 8012e38:	697b      	ldr	r3, [r7, #20]
 8012e3a:	2200      	movs	r2, #0
 8012e3c:	f062 0257 	orn	r2, r2, #87	; 0x57
 8012e40:	701a      	strb	r2, [r3, #0]
 8012e42:	2200      	movs	r2, #0
 8012e44:	705a      	strb	r2, [r3, #1]
 8012e46:	2200      	movs	r2, #0
 8012e48:	709a      	strb	r2, [r3, #2]
 8012e4a:	2200      	movs	r2, #0
 8012e4c:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 8012e4e:	697b      	ldr	r3, [r7, #20]
 8012e50:	2200      	movs	r2, #0
 8012e52:	f042 0202 	orr.w	r2, r2, #2
 8012e56:	711a      	strb	r2, [r3, #4]
 8012e58:	2200      	movs	r2, #0
 8012e5a:	715a      	strb	r2, [r3, #5]
 8012e5c:	2200      	movs	r2, #0
 8012e5e:	719a      	strb	r2, [r3, #6]
 8012e60:	2200      	movs	r2, #0
 8012e62:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 8012e64:	68ba      	ldr	r2, [r7, #8]
 8012e66:	697b      	ldr	r3, [r7, #20]
 8012e68:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 8012e6a:	687a      	ldr	r2, [r7, #4]
 8012e6c:	697b      	ldr	r3, [r7, #20]
 8012e6e:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 8012e70:	f002 f918 	bl	80150a4 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012e74:	f002 f8fe 	bl	8015074 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012e78:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 8012e7a:	697b      	ldr	r3, [r7, #20]
 8012e7c:	689b      	ldr	r3, [r3, #8]
 8012e7e:	b2db      	uxtb	r3, r3
}
 8012e80:	4618      	mov	r0, r3
 8012e82:	3718      	adds	r7, #24
 8012e84:	46bd      	mov	sp, r7
 8012e86:	bd80      	pop	{r7, pc}

08012e88 <otInstanceInitSingle>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otInstance *)p_ot_req->Data[0];
}
#else
otInstance *otInstanceInitSingle(void)
{
 8012e88:	b580      	push	{r7, lr}
 8012e8a:	b082      	sub	sp, #8
 8012e8c:	af00      	add	r7, sp, #0
    Pre_OtCmdProcessing();
 8012e8e:	f002 f947 	bl	8015120 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012e92:	f002 f8e3 	bl	801505c <THREAD_Get_OTCmdPayloadBuffer>
 8012e96:	6078      	str	r0, [r7, #4]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_INIT_SINGLE;
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	2200      	movs	r2, #0
 8012e9c:	f062 026b 	orn	r2, r2, #107	; 0x6b
 8012ea0:	701a      	strb	r2, [r3, #0]
 8012ea2:	2200      	movs	r2, #0
 8012ea4:	705a      	strb	r2, [r3, #1]
 8012ea6:	2200      	movs	r2, #0
 8012ea8:	709a      	strb	r2, [r3, #2]
 8012eaa:	2200      	movs	r2, #0
 8012eac:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	2200      	movs	r2, #0
 8012eb2:	711a      	strb	r2, [r3, #4]
 8012eb4:	2200      	movs	r2, #0
 8012eb6:	715a      	strb	r2, [r3, #5]
 8012eb8:	2200      	movs	r2, #0
 8012eba:	719a      	strb	r2, [r3, #6]
 8012ebc:	2200      	movs	r2, #0
 8012ebe:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 8012ec0:	f002 f8f0 	bl	80150a4 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012ec4:	f002 f8d6 	bl	8015074 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012ec8:	6078      	str	r0, [r7, #4]
    return (otInstance *)p_ot_req->Data[0];
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	689b      	ldr	r3, [r3, #8]
}
 8012ece:	4618      	mov	r0, r3
 8012ed0:	3708      	adds	r7, #8
 8012ed2:	46bd      	mov	sp, r7
 8012ed4:	bd80      	pop	{r7, pc}

08012ed6 <otInstanceFinalize>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (bool)p_ot_req->Data[0];
}

void otInstanceFinalize(otInstance *aInstance)
{
 8012ed6:	b580      	push	{r7, lr}
 8012ed8:	b084      	sub	sp, #16
 8012eda:	af00      	add	r7, sp, #0
 8012edc:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8012ede:	f002 f91f 	bl	8015120 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012ee2:	f002 f8bb 	bl	801505c <THREAD_Get_OTCmdPayloadBuffer>
 8012ee6:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_FINALIZE;
 8012ee8:	68fb      	ldr	r3, [r7, #12]
 8012eea:	2200      	movs	r2, #0
 8012eec:	f062 0269 	orn	r2, r2, #105	; 0x69
 8012ef0:	701a      	strb	r2, [r3, #0]
 8012ef2:	2200      	movs	r2, #0
 8012ef4:	705a      	strb	r2, [r3, #1]
 8012ef6:	2200      	movs	r2, #0
 8012ef8:	709a      	strb	r2, [r3, #2]
 8012efa:	2200      	movs	r2, #0
 8012efc:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	2200      	movs	r2, #0
 8012f02:	711a      	strb	r2, [r3, #4]
 8012f04:	2200      	movs	r2, #0
 8012f06:	715a      	strb	r2, [r3, #5]
 8012f08:	2200      	movs	r2, #0
 8012f0a:	719a      	strb	r2, [r3, #6]
 8012f0c:	2200      	movs	r2, #0
 8012f0e:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 8012f10:	f002 f8c8 	bl	80150a4 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012f14:	f002 f8ae 	bl	8015074 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012f18:	60f8      	str	r0, [r7, #12]
}
 8012f1a:	bf00      	nop
 8012f1c:	3710      	adds	r7, #16
 8012f1e:	46bd      	mov	sp, r7
 8012f20:	bd80      	pop	{r7, pc}
	...

08012f24 <otSetStateChangedCallback>:

OTAPI otError OTCALL otSetStateChangedCallback(otInstance *aInstance, otStateChangedCallback aCallback,
                                               void *aContext)
{
 8012f24:	b580      	push	{r7, lr}
 8012f26:	b086      	sub	sp, #24
 8012f28:	af00      	add	r7, sp, #0
 8012f2a:	60f8      	str	r0, [r7, #12]
 8012f2c:	60b9      	str	r1, [r7, #8]
 8012f2e:	607a      	str	r2, [r7, #4]
    Pre_OtCmdProcessing();
 8012f30:	f002 f8f6 	bl	8015120 <Pre_OtCmdProcessing>
    /* Store the callback function */
    otStateChangedCb = aCallback;
 8012f34:	4a15      	ldr	r2, [pc, #84]	; (8012f8c <otSetStateChangedCallback+0x68>)
 8012f36:	68bb      	ldr	r3, [r7, #8]
 8012f38:	6013      	str	r3, [r2, #0]
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012f3a:	f002 f88f 	bl	801505c <THREAD_Get_OTCmdPayloadBuffer>
 8012f3e:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_SET_STATE_CHANGED_CALLBACK;
 8012f40:	697b      	ldr	r3, [r7, #20]
 8012f42:	2200      	movs	r2, #0
 8012f44:	f062 0268 	orn	r2, r2, #104	; 0x68
 8012f48:	701a      	strb	r2, [r3, #0]
 8012f4a:	2200      	movs	r2, #0
 8012f4c:	705a      	strb	r2, [r3, #1]
 8012f4e:	2200      	movs	r2, #0
 8012f50:	709a      	strb	r2, [r3, #2]
 8012f52:	2200      	movs	r2, #0
 8012f54:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8012f56:	697b      	ldr	r3, [r7, #20]
 8012f58:	2200      	movs	r2, #0
 8012f5a:	f042 0201 	orr.w	r2, r2, #1
 8012f5e:	711a      	strb	r2, [r3, #4]
 8012f60:	2200      	movs	r2, #0
 8012f62:	715a      	strb	r2, [r3, #5]
 8012f64:	2200      	movs	r2, #0
 8012f66:	719a      	strb	r2, [r3, #6]
 8012f68:	2200      	movs	r2, #0
 8012f6a:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t)aContext;
 8012f6c:	687a      	ldr	r2, [r7, #4]
 8012f6e:	697b      	ldr	r3, [r7, #20]
 8012f70:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8012f72:	f002 f897 	bl	80150a4 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012f76:	f002 f87d 	bl	8015074 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012f7a:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 8012f7c:	697b      	ldr	r3, [r7, #20]
 8012f7e:	689b      	ldr	r3, [r3, #8]
 8012f80:	b2db      	uxtb	r3, r3
}
 8012f82:	4618      	mov	r0, r3
 8012f84:	3718      	adds	r7, #24
 8012f86:	46bd      	mov	sp, r7
 8012f88:	bd80      	pop	{r7, pc}
 8012f8a:	bf00      	nop
 8012f8c:	20027428 	.word	0x20027428

08012f90 <otInstanceErasePersistentInfo>:

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otInstanceErasePersistentInfo(otInstance *aInstance)
{
 8012f90:	b580      	push	{r7, lr}
 8012f92:	b084      	sub	sp, #16
 8012f94:	af00      	add	r7, sp, #0
 8012f96:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8012f98:	f002 f8c2 	bl	8015120 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012f9c:	f002 f85e 	bl	801505c <THREAD_Get_OTCmdPayloadBuffer>
 8012fa0:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_ERASE_PERSISTENT_INFO;
 8012fa2:	68fb      	ldr	r3, [r7, #12]
 8012fa4:	2200      	movs	r2, #0
 8012fa6:	f062 0264 	orn	r2, r2, #100	; 0x64
 8012faa:	701a      	strb	r2, [r3, #0]
 8012fac:	2200      	movs	r2, #0
 8012fae:	705a      	strb	r2, [r3, #1]
 8012fb0:	2200      	movs	r2, #0
 8012fb2:	709a      	strb	r2, [r3, #2]
 8012fb4:	2200      	movs	r2, #0
 8012fb6:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 8012fb8:	68fb      	ldr	r3, [r7, #12]
 8012fba:	2200      	movs	r2, #0
 8012fbc:	711a      	strb	r2, [r3, #4]
 8012fbe:	2200      	movs	r2, #0
 8012fc0:	715a      	strb	r2, [r3, #5]
 8012fc2:	2200      	movs	r2, #0
 8012fc4:	719a      	strb	r2, [r3, #6]
 8012fc6:	2200      	movs	r2, #0
 8012fc8:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 8012fca:	f002 f86b 	bl	80150a4 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012fce:	f002 f851 	bl	8015074 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012fd2:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 8012fd4:	68fb      	ldr	r3, [r7, #12]
 8012fd6:	689b      	ldr	r3, [r3, #8]
 8012fd8:	b2db      	uxtb	r3, r3
}
 8012fda:	4618      	mov	r0, r3
 8012fdc:	3710      	adds	r7, #16
 8012fde:	46bd      	mov	sp, r7
 8012fe0:	bd80      	pop	{r7, pc}

08012fe2 <otIp6SetEnabled>:
extern otIp6SlaacIidCreate aIidCreateCb;
extern otIp6ReceiveCallback otIp6ReceiveCb;


OTAPI otError OTCALL otIp6SetEnabled(otInstance *aInstance, bool aEnabled)
{
 8012fe2:	b580      	push	{r7, lr}
 8012fe4:	b084      	sub	sp, #16
 8012fe6:	af00      	add	r7, sp, #0
 8012fe8:	6078      	str	r0, [r7, #4]
 8012fea:	460b      	mov	r3, r1
 8012fec:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 8012fee:	f002 f897 	bl	8015120 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012ff2:	f002 f833 	bl	801505c <THREAD_Get_OTCmdPayloadBuffer>
 8012ff6:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_SET_ENABLED;
 8012ff8:	68fb      	ldr	r3, [r7, #12]
 8012ffa:	2200      	movs	r2, #0
 8012ffc:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8013000:	701a      	strb	r2, [r3, #0]
 8013002:	2200      	movs	r2, #0
 8013004:	705a      	strb	r2, [r3, #1]
 8013006:	2200      	movs	r2, #0
 8013008:	709a      	strb	r2, [r3, #2]
 801300a:	2200      	movs	r2, #0
 801300c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 801300e:	68fb      	ldr	r3, [r7, #12]
 8013010:	2200      	movs	r2, #0
 8013012:	f042 0201 	orr.w	r2, r2, #1
 8013016:	711a      	strb	r2, [r3, #4]
 8013018:	2200      	movs	r2, #0
 801301a:	715a      	strb	r2, [r3, #5]
 801301c:	2200      	movs	r2, #0
 801301e:	719a      	strb	r2, [r3, #6]
 8013020:	2200      	movs	r2, #0
 8013022:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 8013024:	78fa      	ldrb	r2, [r7, #3]
 8013026:	68fb      	ldr	r3, [r7, #12]
 8013028:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 801302a:	f002 f83b 	bl	80150a4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801302e:	f002 f821 	bl	8015074 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013032:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8013034:	68fb      	ldr	r3, [r7, #12]
 8013036:	689b      	ldr	r3, [r3, #8]
 8013038:	b2db      	uxtb	r3, r3
}
 801303a:	4618      	mov	r0, r3
 801303c:	3710      	adds	r7, #16
 801303e:	46bd      	mov	sp, r7
 8013040:	bd80      	pop	{r7, pc}

08013042 <otIp6IsAddressEqual>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint16_t *)p_ot_req->Data[0];
}

OTAPI bool OTCALL otIp6IsAddressEqual(const otIp6Address *a, const otIp6Address *b)
{
 8013042:	b580      	push	{r7, lr}
 8013044:	b084      	sub	sp, #16
 8013046:	af00      	add	r7, sp, #0
 8013048:	6078      	str	r0, [r7, #4]
 801304a:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 801304c:	f002 f868 	bl	8015120 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013050:	f002 f804 	bl	801505c <THREAD_Get_OTCmdPayloadBuffer>
 8013054:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_IS_ADDRESS_EQUAL;
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	2200      	movs	r2, #0
 801305a:	f042 023e 	orr.w	r2, r2, #62	; 0x3e
 801305e:	701a      	strb	r2, [r3, #0]
 8013060:	2200      	movs	r2, #0
 8013062:	705a      	strb	r2, [r3, #1]
 8013064:	2200      	movs	r2, #0
 8013066:	709a      	strb	r2, [r3, #2]
 8013068:	2200      	movs	r2, #0
 801306a:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 801306c:	68fb      	ldr	r3, [r7, #12]
 801306e:	2200      	movs	r2, #0
 8013070:	f042 0202 	orr.w	r2, r2, #2
 8013074:	711a      	strb	r2, [r3, #4]
 8013076:	2200      	movs	r2, #0
 8013078:	715a      	strb	r2, [r3, #5]
 801307a:	2200      	movs	r2, #0
 801307c:	719a      	strb	r2, [r3, #6]
 801307e:	2200      	movs	r2, #0
 8013080:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)a;
 8013082:	687a      	ldr	r2, [r7, #4]
 8013084:	68fb      	ldr	r3, [r7, #12]
 8013086:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t)b;
 8013088:	683a      	ldr	r2, [r7, #0]
 801308a:	68fb      	ldr	r3, [r7, #12]
 801308c:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 801308e:	f002 f809 	bl	80150a4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013092:	f001 ffef 	bl	8015074 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013096:	60f8      	str	r0, [r7, #12]
  return (bool)p_ot_req->Data[0];
 8013098:	68fb      	ldr	r3, [r7, #12]
 801309a:	689b      	ldr	r3, [r3, #8]
 801309c:	2b00      	cmp	r3, #0
 801309e:	bf14      	ite	ne
 80130a0:	2301      	movne	r3, #1
 80130a2:	2300      	moveq	r3, #0
 80130a4:	b2db      	uxtb	r3, r3
}
 80130a6:	4618      	mov	r0, r3
 80130a8:	3710      	adds	r7, #16
 80130aa:	46bd      	mov	sp, r7
 80130ac:	bd80      	pop	{r7, pc}

080130ae <otIp6AddressFromString>:

OTAPI otError OTCALL otIp6AddressFromString(const char *aString, otIp6Address *aAddress)
{
 80130ae:	b580      	push	{r7, lr}
 80130b0:	b084      	sub	sp, #16
 80130b2:	af00      	add	r7, sp, #0
 80130b4:	6078      	str	r0, [r7, #4]
 80130b6:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 80130b8:	f002 f832 	bl	8015120 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80130bc:	f001 ffce 	bl	801505c <THREAD_Get_OTCmdPayloadBuffer>
 80130c0:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_ADDRESS_FROM_STRING;
 80130c2:	68fb      	ldr	r3, [r7, #12]
 80130c4:	2200      	movs	r2, #0
 80130c6:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 80130ca:	701a      	strb	r2, [r3, #0]
 80130cc:	2200      	movs	r2, #0
 80130ce:	705a      	strb	r2, [r3, #1]
 80130d0:	2200      	movs	r2, #0
 80130d2:	709a      	strb	r2, [r3, #2]
 80130d4:	2200      	movs	r2, #0
 80130d6:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 80130d8:	68fb      	ldr	r3, [r7, #12]
 80130da:	2200      	movs	r2, #0
 80130dc:	f042 0202 	orr.w	r2, r2, #2
 80130e0:	711a      	strb	r2, [r3, #4]
 80130e2:	2200      	movs	r2, #0
 80130e4:	715a      	strb	r2, [r3, #5]
 80130e6:	2200      	movs	r2, #0
 80130e8:	719a      	strb	r2, [r3, #6]
 80130ea:	2200      	movs	r2, #0
 80130ec:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aString;
 80130ee:	687a      	ldr	r2, [r7, #4]
 80130f0:	68fb      	ldr	r3, [r7, #12]
 80130f2:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aAddress;
 80130f4:	683a      	ldr	r2, [r7, #0]
 80130f6:	68fb      	ldr	r3, [r7, #12]
 80130f8:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 80130fa:	f001 ffd3 	bl	80150a4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80130fe:	f001 ffb9 	bl	8015074 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013102:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8013104:	68fb      	ldr	r3, [r7, #12]
 8013106:	689b      	ldr	r3, [r3, #8]
 8013108:	b2db      	uxtb	r3, r3
}
 801310a:	4618      	mov	r0, r3
 801310c:	3710      	adds	r7, #16
 801310e:	46bd      	mov	sp, r7
 8013110:	bd80      	pop	{r7, pc}

08013112 <otLinkSetChannel>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint8_t)p_ot_req->Data[0];
}

OTAPI otError OTCALL otLinkSetChannel(otInstance *aInstance, uint8_t aChannel)
{
 8013112:	b580      	push	{r7, lr}
 8013114:	b084      	sub	sp, #16
 8013116:	af00      	add	r7, sp, #0
 8013118:	6078      	str	r0, [r7, #4]
 801311a:	460b      	mov	r3, r1
 801311c:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 801311e:	f001 ffff 	bl	8015120 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013122:	f001 ff9b 	bl	801505c <THREAD_Get_OTCmdPayloadBuffer>
 8013126:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_CHANNEL;
 8013128:	68fb      	ldr	r3, [r7, #12]
 801312a:	2200      	movs	r2, #0
 801312c:	f042 0208 	orr.w	r2, r2, #8
 8013130:	701a      	strb	r2, [r3, #0]
 8013132:	2200      	movs	r2, #0
 8013134:	705a      	strb	r2, [r3, #1]
 8013136:	2200      	movs	r2, #0
 8013138:	709a      	strb	r2, [r3, #2]
 801313a:	2200      	movs	r2, #0
 801313c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 801313e:	68fb      	ldr	r3, [r7, #12]
 8013140:	2200      	movs	r2, #0
 8013142:	f042 0201 	orr.w	r2, r2, #1
 8013146:	711a      	strb	r2, [r3, #4]
 8013148:	2200      	movs	r2, #0
 801314a:	715a      	strb	r2, [r3, #5]
 801314c:	2200      	movs	r2, #0
 801314e:	719a      	strb	r2, [r3, #6]
 8013150:	2200      	movs	r2, #0
 8013152:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aChannel;
 8013154:	78fa      	ldrb	r2, [r7, #3]
 8013156:	68fb      	ldr	r3, [r7, #12]
 8013158:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 801315a:	f001 ffa3 	bl	80150a4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801315e:	f001 ff89 	bl	8015074 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013162:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8013164:	68fb      	ldr	r3, [r7, #12]
 8013166:	689b      	ldr	r3, [r3, #8]
 8013168:	b2db      	uxtb	r3, r3
}
 801316a:	4618      	mov	r0, r3
 801316c:	3710      	adds	r7, #16
 801316e:	46bd      	mov	sp, r7
 8013170:	bd80      	pop	{r7, pc}

08013172 <otLinkSetPanId>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otPanId)p_ot_req->Data[0];
}

OTAPI otError OTCALL otLinkSetPanId(otInstance *aInstance, otPanId aPanId)
{
 8013172:	b580      	push	{r7, lr}
 8013174:	b084      	sub	sp, #16
 8013176:	af00      	add	r7, sp, #0
 8013178:	6078      	str	r0, [r7, #4]
 801317a:	460b      	mov	r3, r1
 801317c:	807b      	strh	r3, [r7, #2]
  Pre_OtCmdProcessing();
 801317e:	f001 ffcf 	bl	8015120 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013182:	f001 ff6b 	bl	801505c <THREAD_Get_OTCmdPayloadBuffer>
 8013186:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_PANID;
 8013188:	68fb      	ldr	r3, [r7, #12]
 801318a:	2200      	movs	r2, #0
 801318c:	f042 020f 	orr.w	r2, r2, #15
 8013190:	701a      	strb	r2, [r3, #0]
 8013192:	2200      	movs	r2, #0
 8013194:	705a      	strb	r2, [r3, #1]
 8013196:	2200      	movs	r2, #0
 8013198:	709a      	strb	r2, [r3, #2]
 801319a:	2200      	movs	r2, #0
 801319c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 801319e:	68fb      	ldr	r3, [r7, #12]
 80131a0:	2200      	movs	r2, #0
 80131a2:	f042 0201 	orr.w	r2, r2, #1
 80131a6:	711a      	strb	r2, [r3, #4]
 80131a8:	2200      	movs	r2, #0
 80131aa:	715a      	strb	r2, [r3, #5]
 80131ac:	2200      	movs	r2, #0
 80131ae:	719a      	strb	r2, [r3, #6]
 80131b0:	2200      	movs	r2, #0
 80131b2:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aPanId;
 80131b4:	887a      	ldrh	r2, [r7, #2]
 80131b6:	68fb      	ldr	r3, [r7, #12]
 80131b8:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 80131ba:	f001 ff73 	bl	80150a4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80131be:	f001 ff59 	bl	8015074 <THREAD_Get_OTCmdRspPayloadBuffer>
 80131c2:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 80131c4:	68fb      	ldr	r3, [r7, #12]
 80131c6:	689b      	ldr	r3, [r3, #8]
 80131c8:	b2db      	uxtb	r3, r3
}
 80131ca:	4618      	mov	r0, r3
 80131cc:	3710      	adds	r7, #16
 80131ce:	46bd      	mov	sp, r7
 80131d0:	bd80      	pop	{r7, pc}

080131d2 <otMessageFree>:
#include "thread.h"
#include "message.h"


void otMessageFree(otMessage *aMessage)
{
 80131d2:	b580      	push	{r7, lr}
 80131d4:	b084      	sub	sp, #16
 80131d6:	af00      	add	r7, sp, #0
 80131d8:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 80131da:	f001 ffa1 	bl	8015120 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80131de:	f001 ff3d 	bl	801505c <THREAD_Get_OTCmdPayloadBuffer>
 80131e2:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_FREE;
 80131e4:	68fb      	ldr	r3, [r7, #12]
 80131e6:	2200      	movs	r2, #0
 80131e8:	f062 0246 	orn	r2, r2, #70	; 0x46
 80131ec:	701a      	strb	r2, [r3, #0]
 80131ee:	2200      	movs	r2, #0
 80131f0:	705a      	strb	r2, [r3, #1]
 80131f2:	2200      	movs	r2, #0
 80131f4:	709a      	strb	r2, [r3, #2]
 80131f6:	2200      	movs	r2, #0
 80131f8:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 80131fa:	68fb      	ldr	r3, [r7, #12]
 80131fc:	2200      	movs	r2, #0
 80131fe:	f042 0201 	orr.w	r2, r2, #1
 8013202:	711a      	strb	r2, [r3, #4]
 8013204:	2200      	movs	r2, #0
 8013206:	715a      	strb	r2, [r3, #5]
 8013208:	2200      	movs	r2, #0
 801320a:	719a      	strb	r2, [r3, #6]
 801320c:	2200      	movs	r2, #0
 801320e:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 8013210:	687a      	ldr	r2, [r7, #4]
 8013212:	68fb      	ldr	r3, [r7, #12]
 8013214:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8013216:	f001 ff45 	bl	80150a4 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801321a:	f001 ff2b 	bl	8015074 <THREAD_Get_OTCmdRspPayloadBuffer>
 801321e:	60f8      	str	r0, [r7, #12]
}
 8013220:	bf00      	nop
 8013222:	3710      	adds	r7, #16
 8013224:	46bd      	mov	sp, r7
 8013226:	bd80      	pop	{r7, pc}

08013228 <otMessageGetOffset>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError)p_ot_req->Data[0];
}

uint16_t otMessageGetOffset(otMessage *aMessage)
{
 8013228:	b580      	push	{r7, lr}
 801322a:	b084      	sub	sp, #16
 801322c:	af00      	add	r7, sp, #0
 801322e:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8013230:	f001 ff76 	bl	8015120 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013234:	f001 ff12 	bl	801505c <THREAD_Get_OTCmdPayloadBuffer>
 8013238:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_GET_OFFSET;
 801323a:	68fb      	ldr	r3, [r7, #12]
 801323c:	2200      	movs	r2, #0
 801323e:	f062 0243 	orn	r2, r2, #67	; 0x43
 8013242:	701a      	strb	r2, [r3, #0]
 8013244:	2200      	movs	r2, #0
 8013246:	705a      	strb	r2, [r3, #1]
 8013248:	2200      	movs	r2, #0
 801324a:	709a      	strb	r2, [r3, #2]
 801324c:	2200      	movs	r2, #0
 801324e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8013250:	68fb      	ldr	r3, [r7, #12]
 8013252:	2200      	movs	r2, #0
 8013254:	f042 0201 	orr.w	r2, r2, #1
 8013258:	711a      	strb	r2, [r3, #4]
 801325a:	2200      	movs	r2, #0
 801325c:	715a      	strb	r2, [r3, #5]
 801325e:	2200      	movs	r2, #0
 8013260:	719a      	strb	r2, [r3, #6]
 8013262:	2200      	movs	r2, #0
 8013264:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 8013266:	687a      	ldr	r2, [r7, #4]
 8013268:	68fb      	ldr	r3, [r7, #12]
 801326a:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 801326c:	f001 ff1a 	bl	80150a4 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013270:	f001 ff00 	bl	8015074 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013274:	60f8      	str	r0, [r7, #12]
    return (uint16_t)p_ot_req->Data[0];
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	689b      	ldr	r3, [r3, #8]
 801327a:	b29b      	uxth	r3, r3
}
 801327c:	4618      	mov	r0, r3
 801327e:	3710      	adds	r7, #16
 8013280:	46bd      	mov	sp, r7
 8013282:	bd80      	pop	{r7, pc}

08013284 <otMessageAppend>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (int8_t)p_ot_req->Data[0];
}

otError otMessageAppend(otMessage *aMessage, const void *aBuf, uint16_t aLength)
{
 8013284:	b580      	push	{r7, lr}
 8013286:	b086      	sub	sp, #24
 8013288:	af00      	add	r7, sp, #0
 801328a:	60f8      	str	r0, [r7, #12]
 801328c:	60b9      	str	r1, [r7, #8]
 801328e:	4613      	mov	r3, r2
 8013290:	80fb      	strh	r3, [r7, #6]
    Pre_OtCmdProcessing();
 8013292:	f001 ff45 	bl	8015120 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013296:	f001 fee1 	bl	801505c <THREAD_Get_OTCmdPayloadBuffer>
 801329a:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_APPEND;
 801329c:	697b      	ldr	r3, [r7, #20]
 801329e:	2200      	movs	r2, #0
 80132a0:	f062 023e 	orn	r2, r2, #62	; 0x3e
 80132a4:	701a      	strb	r2, [r3, #0]
 80132a6:	2200      	movs	r2, #0
 80132a8:	705a      	strb	r2, [r3, #1]
 80132aa:	2200      	movs	r2, #0
 80132ac:	709a      	strb	r2, [r3, #2]
 80132ae:	2200      	movs	r2, #0
 80132b0:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 80132b2:	697b      	ldr	r3, [r7, #20]
 80132b4:	2200      	movs	r2, #0
 80132b6:	f042 0203 	orr.w	r2, r2, #3
 80132ba:	711a      	strb	r2, [r3, #4]
 80132bc:	2200      	movs	r2, #0
 80132be:	715a      	strb	r2, [r3, #5]
 80132c0:	2200      	movs	r2, #0
 80132c2:	719a      	strb	r2, [r3, #6]
 80132c4:	2200      	movs	r2, #0
 80132c6:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 80132c8:	68fa      	ldr	r2, [r7, #12]
 80132ca:	697b      	ldr	r3, [r7, #20]
 80132cc:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aBuf;
 80132ce:	68ba      	ldr	r2, [r7, #8]
 80132d0:	697b      	ldr	r3, [r7, #20]
 80132d2:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aLength;
 80132d4:	88fa      	ldrh	r2, [r7, #6]
 80132d6:	697b      	ldr	r3, [r7, #20]
 80132d8:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 80132da:	f001 fee3 	bl	80150a4 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80132de:	f001 fec9 	bl	8015074 <THREAD_Get_OTCmdRspPayloadBuffer>
 80132e2:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 80132e4:	697b      	ldr	r3, [r7, #20]
 80132e6:	689b      	ldr	r3, [r3, #8]
 80132e8:	b2db      	uxtb	r3, r3
}
 80132ea:	4618      	mov	r0, r3
 80132ec:	3718      	adds	r7, #24
 80132ee:	46bd      	mov	sp, r7
 80132f0:	bd80      	pop	{r7, pc}

080132f2 <otMessageRead>:

int otMessageRead(otMessage *aMessage, uint16_t aOffset, void *aBuf, uint16_t aLength)
{
 80132f2:	b580      	push	{r7, lr}
 80132f4:	b086      	sub	sp, #24
 80132f6:	af00      	add	r7, sp, #0
 80132f8:	60f8      	str	r0, [r7, #12]
 80132fa:	607a      	str	r2, [r7, #4]
 80132fc:	461a      	mov	r2, r3
 80132fe:	460b      	mov	r3, r1
 8013300:	817b      	strh	r3, [r7, #10]
 8013302:	4613      	mov	r3, r2
 8013304:	813b      	strh	r3, [r7, #8]
    Pre_OtCmdProcessing();
 8013306:	f001 ff0b 	bl	8015120 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 801330a:	f001 fea7 	bl	801505c <THREAD_Get_OTCmdPayloadBuffer>
 801330e:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_READ;
 8013310:	697b      	ldr	r3, [r7, #20]
 8013312:	2200      	movs	r2, #0
 8013314:	f062 023d 	orn	r2, r2, #61	; 0x3d
 8013318:	701a      	strb	r2, [r3, #0]
 801331a:	2200      	movs	r2, #0
 801331c:	705a      	strb	r2, [r3, #1]
 801331e:	2200      	movs	r2, #0
 8013320:	709a      	strb	r2, [r3, #2]
 8013322:	2200      	movs	r2, #0
 8013324:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=4;
 8013326:	697b      	ldr	r3, [r7, #20]
 8013328:	2200      	movs	r2, #0
 801332a:	f042 0204 	orr.w	r2, r2, #4
 801332e:	711a      	strb	r2, [r3, #4]
 8013330:	2200      	movs	r2, #0
 8013332:	715a      	strb	r2, [r3, #5]
 8013334:	2200      	movs	r2, #0
 8013336:	719a      	strb	r2, [r3, #6]
 8013338:	2200      	movs	r2, #0
 801333a:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 801333c:	68fa      	ldr	r2, [r7, #12]
 801333e:	697b      	ldr	r3, [r7, #20]
 8013340:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aOffset;
 8013342:	897a      	ldrh	r2, [r7, #10]
 8013344:	697b      	ldr	r3, [r7, #20]
 8013346:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aBuf;
 8013348:	687a      	ldr	r2, [r7, #4]
 801334a:	697b      	ldr	r3, [r7, #20]
 801334c:	611a      	str	r2, [r3, #16]
    p_ot_req->Data[3] = (uint32_t) aLength;
 801334e:	893a      	ldrh	r2, [r7, #8]
 8013350:	697b      	ldr	r3, [r7, #20]
 8013352:	615a      	str	r2, [r3, #20]

    Ot_Cmd_Transfer();
 8013354:	f001 fea6 	bl	80150a4 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013358:	f001 fe8c 	bl	8015074 <THREAD_Get_OTCmdRspPayloadBuffer>
 801335c:	6178      	str	r0, [r7, #20]
    return (int)p_ot_req->Data[0];
 801335e:	697b      	ldr	r3, [r7, #20]
 8013360:	689b      	ldr	r3, [r3, #8]
}
 8013362:	4618      	mov	r0, r3
 8013364:	3718      	adds	r7, #24
 8013366:	46bd      	mov	sp, r7
 8013368:	bd80      	pop	{r7, pc}
	...

0801336c <OpenThread_CallBack_Processing>:
  * @param  None
  * @retval None
  */

HAL_StatusTypeDef OpenThread_CallBack_Processing(void)
{
 801336c:	b5b0      	push	{r4, r5, r7, lr}
 801336e:	b084      	sub	sp, #16
 8013370:	af02      	add	r7, sp, #8
    HAL_StatusTypeDef status = HAL_OK;
 8013372:	2300      	movs	r3, #0
 8013374:	71fb      	strb	r3, [r7, #7]

    /* Get pointer on received event buffer from M0 */
    Thread_OT_Cmd_Request_t* p_notification = THREAD_Get_NotificationPayloadBuffer();
 8013376:	f001 fe89 	bl	801508c <THREAD_Get_NotificationPayloadBuffer>
 801337a:	6038      	str	r0, [r7, #0]

    switch(p_notification->ID)
 801337c:	683b      	ldr	r3, [r7, #0]
 801337e:	681b      	ldr	r3, [r3, #0]
 8013380:	3b01      	subs	r3, #1
 8013382:	2b14      	cmp	r3, #20
 8013384:	f200 8172 	bhi.w	801366c <OpenThread_CallBack_Processing+0x300>
 8013388:	a201      	add	r2, pc, #4	; (adr r2, 8013390 <OpenThread_CallBack_Processing+0x24>)
 801338a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801338e:	bf00      	nop
 8013390:	080133e5 	.word	0x080133e5
 8013394:	08013401 	.word	0x08013401
 8013398:	0801342d 	.word	0x0801342d
 801339c:	08013461 	.word	0x08013461
 80133a0:	0801346d 	.word	0x0801346d
 80133a4:	0801348b 	.word	0x0801348b
 80133a8:	080134a9 	.word	0x080134a9
 80133ac:	080134c7 	.word	0x080134c7
 80133b0:	080134e5 	.word	0x080134e5
 80133b4:	08013503 	.word	0x08013503
 80133b8:	08013525 	.word	0x08013525
 80133bc:	08013543 	.word	0x08013543
 80133c0:	0801366d 	.word	0x0801366d
 80133c4:	08013569 	.word	0x08013569
 80133c8:	0801359d 	.word	0x0801359d
 80133cc:	080135c5 	.word	0x080135c5
 80133d0:	080135e3 	.word	0x080135e3
 80133d4:	08013607 	.word	0x08013607
 80133d8:	0801362f 	.word	0x0801362f
 80133dc:	0801366d 	.word	0x0801366d
 80133e0:	0801364d 	.word	0x0801364d
    {
    case MSG_M0TOM4_NOTIFY_STATE_CHANGE:
        if (otStateChangedCb != NULL)
 80133e4:	4ba3      	ldr	r3, [pc, #652]	; (8013674 <OpenThread_CallBack_Processing+0x308>)
 80133e6:	681b      	ldr	r3, [r3, #0]
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	f000 8167 	beq.w	80136bc <OpenThread_CallBack_Processing+0x350>
        {
            otStateChangedCb((uint32_t) p_notification->Data[0],
 80133ee:	4ba1      	ldr	r3, [pc, #644]	; (8013674 <OpenThread_CallBack_Processing+0x308>)
 80133f0:	681b      	ldr	r3, [r3, #0]
 80133f2:	683a      	ldr	r2, [r7, #0]
 80133f4:	6890      	ldr	r0, [r2, #8]
                    (void*) p_notification->Data[1]);
 80133f6:	683a      	ldr	r2, [r7, #0]
 80133f8:	68d2      	ldr	r2, [r2, #12]
            otStateChangedCb((uint32_t) p_notification->Data[0],
 80133fa:	4611      	mov	r1, r2
 80133fc:	4798      	blx	r3
        }
        break;
 80133fe:	e15d      	b.n	80136bc <OpenThread_CallBack_Processing+0x350>
    case MSG_M0TOM4_COAP_REQUEST_HANDLER:
        coapRequestHandlerCb = (CoapRequestHandlerCallback) p_notification->Data[0];
 8013400:	683b      	ldr	r3, [r7, #0]
 8013402:	689b      	ldr	r3, [r3, #8]
 8013404:	461a      	mov	r2, r3
 8013406:	4b9c      	ldr	r3, [pc, #624]	; (8013678 <OpenThread_CallBack_Processing+0x30c>)
 8013408:	601a      	str	r2, [r3, #0]

        if (coapRequestHandlerCb != NULL)
 801340a:	4b9b      	ldr	r3, [pc, #620]	; (8013678 <OpenThread_CallBack_Processing+0x30c>)
 801340c:	681b      	ldr	r3, [r3, #0]
 801340e:	2b00      	cmp	r3, #0
 8013410:	f000 8156 	beq.w	80136c0 <OpenThread_CallBack_Processing+0x354>
        {
            coapRequestHandlerCb( (otCoapHeader *) p_notification->Data[1],
 8013414:	4b98      	ldr	r3, [pc, #608]	; (8013678 <OpenThread_CallBack_Processing+0x30c>)
 8013416:	681b      	ldr	r3, [r3, #0]
 8013418:	683a      	ldr	r2, [r7, #0]
 801341a:	68d2      	ldr	r2, [r2, #12]
 801341c:	4610      	mov	r0, r2
                    (otMessage *) p_notification->Data[2],
 801341e:	683a      	ldr	r2, [r7, #0]
 8013420:	6912      	ldr	r2, [r2, #16]
            coapRequestHandlerCb( (otCoapHeader *) p_notification->Data[1],
 8013422:	4611      	mov	r1, r2
                    (otMessageInfo *) p_notification->Data[3]);
 8013424:	683a      	ldr	r2, [r7, #0]
 8013426:	6952      	ldr	r2, [r2, #20]
            coapRequestHandlerCb( (otCoapHeader *) p_notification->Data[1],
 8013428:	4798      	blx	r3
        }
        break;
 801342a:	e149      	b.n	80136c0 <OpenThread_CallBack_Processing+0x354>
    case MSG_M0TOM4_COAP_RESPONSE_HANDLER:
        coapResponseHandlerCb = (CoapResponseHandlerCallback) p_notification->Data[0];
 801342c:	683b      	ldr	r3, [r7, #0]
 801342e:	689b      	ldr	r3, [r3, #8]
 8013430:	461a      	mov	r2, r3
 8013432:	4b92      	ldr	r3, [pc, #584]	; (801367c <OpenThread_CallBack_Processing+0x310>)
 8013434:	601a      	str	r2, [r3, #0]
        if (coapResponseHandlerCb != NULL)
 8013436:	4b91      	ldr	r3, [pc, #580]	; (801367c <OpenThread_CallBack_Processing+0x310>)
 8013438:	681b      	ldr	r3, [r3, #0]
 801343a:	2b00      	cmp	r3, #0
 801343c:	f000 8142 	beq.w	80136c4 <OpenThread_CallBack_Processing+0x358>
        {
            coapResponseHandlerCb( (otCoapHeader *) p_notification->Data[1],
 8013440:	4b8e      	ldr	r3, [pc, #568]	; (801367c <OpenThread_CallBack_Processing+0x310>)
 8013442:	681c      	ldr	r4, [r3, #0]
 8013444:	683b      	ldr	r3, [r7, #0]
 8013446:	68db      	ldr	r3, [r3, #12]
 8013448:	4618      	mov	r0, r3
                    (otMessage *) p_notification->Data[2],
 801344a:	683b      	ldr	r3, [r7, #0]
 801344c:	691b      	ldr	r3, [r3, #16]
            coapResponseHandlerCb( (otCoapHeader *) p_notification->Data[1],
 801344e:	4619      	mov	r1, r3
                    (otMessageInfo *) p_notification->Data[3],
 8013450:	683b      	ldr	r3, [r7, #0]
 8013452:	695b      	ldr	r3, [r3, #20]
            coapResponseHandlerCb( (otCoapHeader *) p_notification->Data[1],
 8013454:	461a      	mov	r2, r3
                    (otError) p_notification->Data[4]);
 8013456:	683b      	ldr	r3, [r7, #0]
 8013458:	699b      	ldr	r3, [r3, #24]
            coapResponseHandlerCb( (otCoapHeader *) p_notification->Data[1],
 801345a:	b2db      	uxtb	r3, r3
 801345c:	47a0      	blx	r4
        }
        break;
 801345e:	e131      	b.n	80136c4 <OpenThread_CallBack_Processing+0x358>
    case MSG_M0TOM4_NOTIFY_STACK_RESET:
        /* Store Thread NVM data in Flash*/
        SHCI_C2_FLASH_StoreData(THREAD_IP);
 8013460:	2001      	movs	r0, #1
 8013462:	f000 f99b 	bl	801379c <SHCI_C2_FLASH_StoreData>
        /* Perform an NVIC Reset in order to reinitalize the device */
        HAL_NVIC_SystemReset();
 8013466:	f7f4 fc9c 	bl	8007da2 <HAL_NVIC_SystemReset>
        break;
 801346a:	e14a      	b.n	8013702 <OpenThread_CallBack_Processing+0x396>
    case MSG_M0TOM4_IP6_RECEIVE:
        if (otIp6ReceiveCb != NULL)
 801346c:	4b84      	ldr	r3, [pc, #528]	; (8013680 <OpenThread_CallBack_Processing+0x314>)
 801346e:	681b      	ldr	r3, [r3, #0]
 8013470:	2b00      	cmp	r3, #0
 8013472:	f000 8129 	beq.w	80136c8 <OpenThread_CallBack_Processing+0x35c>
        {
            otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 8013476:	4b82      	ldr	r3, [pc, #520]	; (8013680 <OpenThread_CallBack_Processing+0x314>)
 8013478:	681b      	ldr	r3, [r3, #0]
 801347a:	683a      	ldr	r2, [r7, #0]
 801347c:	6892      	ldr	r2, [r2, #8]
 801347e:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 8013480:	683a      	ldr	r2, [r7, #0]
 8013482:	68d2      	ldr	r2, [r2, #12]
            otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 8013484:	4611      	mov	r1, r2
 8013486:	4798      	blx	r3
        }
        break;
 8013488:	e11e      	b.n	80136c8 <OpenThread_CallBack_Processing+0x35c>
    case MSG_M0TOM4_IP6_SLAAC_IID_CREATE:
        if (aIidCreateCb != NULL)
 801348a:	4b7e      	ldr	r3, [pc, #504]	; (8013684 <OpenThread_CallBack_Processing+0x318>)
 801348c:	681b      	ldr	r3, [r3, #0]
 801348e:	2b00      	cmp	r3, #0
 8013490:	f000 811c 	beq.w	80136cc <OpenThread_CallBack_Processing+0x360>
        {
            /* Not passing otInstance as first parameter, because created on M0, passing NULL instead */
            aIidCreateCb(NULL, (otNetifAddress*) p_notification->Data[0],
 8013494:	4b7b      	ldr	r3, [pc, #492]	; (8013684 <OpenThread_CallBack_Processing+0x318>)
 8013496:	681b      	ldr	r3, [r3, #0]
 8013498:	683a      	ldr	r2, [r7, #0]
 801349a:	6892      	ldr	r2, [r2, #8]
 801349c:	4611      	mov	r1, r2
                    (void*) p_notification->Data[1]);
 801349e:	683a      	ldr	r2, [r7, #0]
 80134a0:	68d2      	ldr	r2, [r2, #12]
            aIidCreateCb(NULL, (otNetifAddress*) p_notification->Data[0],
 80134a2:	2000      	movs	r0, #0
 80134a4:	4798      	blx	r3
        }
        break;
 80134a6:	e111      	b.n	80136cc <OpenThread_CallBack_Processing+0x360>
    case MSG_M0TOM4_HANDLE_ACTIVE_SCAN_RESULT:
        if (otHandleActiveScanResultCb != NULL)
 80134a8:	4b77      	ldr	r3, [pc, #476]	; (8013688 <OpenThread_CallBack_Processing+0x31c>)
 80134aa:	681b      	ldr	r3, [r3, #0]
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	f000 810f 	beq.w	80136d0 <OpenThread_CallBack_Processing+0x364>
        {
            otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 80134b2:	4b75      	ldr	r3, [pc, #468]	; (8013688 <OpenThread_CallBack_Processing+0x31c>)
 80134b4:	681b      	ldr	r3, [r3, #0]
 80134b6:	683a      	ldr	r2, [r7, #0]
 80134b8:	6892      	ldr	r2, [r2, #8]
 80134ba:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 80134bc:	683a      	ldr	r2, [r7, #0]
 80134be:	68d2      	ldr	r2, [r2, #12]
            otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 80134c0:	4611      	mov	r1, r2
 80134c2:	4798      	blx	r3
        }
        break;
 80134c4:	e104      	b.n	80136d0 <OpenThread_CallBack_Processing+0x364>
    case MSG_M0TOM4_HANDLE_ENERGY_SCAN_RESULT:
        if (otHandleEnergyScanResultCb != NULL)
 80134c6:	4b71      	ldr	r3, [pc, #452]	; (801368c <OpenThread_CallBack_Processing+0x320>)
 80134c8:	681b      	ldr	r3, [r3, #0]
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	f000 8102 	beq.w	80136d4 <OpenThread_CallBack_Processing+0x368>
        {
            otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 80134d0:	4b6e      	ldr	r3, [pc, #440]	; (801368c <OpenThread_CallBack_Processing+0x320>)
 80134d2:	681b      	ldr	r3, [r3, #0]
 80134d4:	683a      	ldr	r2, [r7, #0]
 80134d6:	6892      	ldr	r2, [r2, #8]
 80134d8:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 80134da:	683a      	ldr	r2, [r7, #0]
 80134dc:	68d2      	ldr	r2, [r2, #12]
            otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 80134de:	4611      	mov	r1, r2
 80134e0:	4798      	blx	r3
        }
        break;
 80134e2:	e0f7      	b.n	80136d4 <OpenThread_CallBack_Processing+0x368>
    case MSG_M0TOM4_HANDLE_LINK_PCAP:
        if (otLinkPcapCb != NULL)
 80134e4:	4b6a      	ldr	r3, [pc, #424]	; (8013690 <OpenThread_CallBack_Processing+0x324>)
 80134e6:	681b      	ldr	r3, [r3, #0]
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	f000 80f5 	beq.w	80136d8 <OpenThread_CallBack_Processing+0x36c>
        {
            otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 80134ee:	4b68      	ldr	r3, [pc, #416]	; (8013690 <OpenThread_CallBack_Processing+0x324>)
 80134f0:	681b      	ldr	r3, [r3, #0]
 80134f2:	683a      	ldr	r2, [r7, #0]
 80134f4:	6892      	ldr	r2, [r2, #8]
 80134f6:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 80134f8:	683a      	ldr	r2, [r7, #0]
 80134fa:	68d2      	ldr	r2, [r2, #12]
            otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 80134fc:	4611      	mov	r1, r2
 80134fe:	4798      	blx	r3
        }
        break;
 8013500:	e0ea      	b.n	80136d8 <OpenThread_CallBack_Processing+0x36c>
    case MSG_M0TOM4_RECEIVE_DIAGNOSTIC_GET_CALLBACK:
        if (otReceiveDiagnosticGetCb != NULL)
 8013502:	4b64      	ldr	r3, [pc, #400]	; (8013694 <OpenThread_CallBack_Processing+0x328>)
 8013504:	681b      	ldr	r3, [r3, #0]
 8013506:	2b00      	cmp	r3, #0
 8013508:	f000 80e8 	beq.w	80136dc <OpenThread_CallBack_Processing+0x370>
        {
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 801350c:	4b61      	ldr	r3, [pc, #388]	; (8013694 <OpenThread_CallBack_Processing+0x328>)
 801350e:	681b      	ldr	r3, [r3, #0]
 8013510:	683a      	ldr	r2, [r7, #0]
 8013512:	6892      	ldr	r2, [r2, #8]
 8013514:	4610      	mov	r0, r2
                    (otMessageInfo*) p_notification->Data[1],
 8013516:	683a      	ldr	r2, [r7, #0]
 8013518:	68d2      	ldr	r2, [r2, #12]
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 801351a:	4611      	mov	r1, r2
                    (void*) p_notification->Data[2]);
 801351c:	683a      	ldr	r2, [r7, #0]
 801351e:	6912      	ldr	r2, [r2, #16]
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 8013520:	4798      	blx	r3
        }
        break;
 8013522:	e0db      	b.n	80136dc <OpenThread_CallBack_Processing+0x370>
#if OPENTHREAD_FTD
    case MSG_M0TOM4_THREAD_FTD_CHILD_TABLE_CALLBACK:
        if (otThreadChildTableCallbackCb != NULL)
 8013524:	4b5c      	ldr	r3, [pc, #368]	; (8013698 <OpenThread_CallBack_Processing+0x32c>)
 8013526:	681b      	ldr	r3, [r3, #0]
 8013528:	2b00      	cmp	r3, #0
 801352a:	f000 80d9 	beq.w	80136e0 <OpenThread_CallBack_Processing+0x374>
        {
            otThreadChildTableCallbackCb((otThreadChildTableEvent) p_notification->Data[0],
 801352e:	4b5a      	ldr	r3, [pc, #360]	; (8013698 <OpenThread_CallBack_Processing+0x32c>)
 8013530:	681b      	ldr	r3, [r3, #0]
 8013532:	683a      	ldr	r2, [r7, #0]
 8013534:	6892      	ldr	r2, [r2, #8]
 8013536:	b2d0      	uxtb	r0, r2
                    (const otChildInfo *) p_notification->Data[1]);
 8013538:	683a      	ldr	r2, [r7, #0]
 801353a:	68d2      	ldr	r2, [r2, #12]
            otThreadChildTableCallbackCb((otThreadChildTableEvent) p_notification->Data[0],
 801353c:	4611      	mov	r1, r2
 801353e:	4798      	blx	r3
        }
        break;
 8013540:	e0ce      	b.n	80136e0 <OpenThread_CallBack_Processing+0x374>
#endif
    case MSG_M0TOM4_COMMISSIONER_ENERGY_REPORT_CALLBACK:
        if (otCommissionerEnergyReportCb != NULL)
 8013542:	4b56      	ldr	r3, [pc, #344]	; (801369c <OpenThread_CallBack_Processing+0x330>)
 8013544:	681b      	ldr	r3, [r3, #0]
 8013546:	2b00      	cmp	r3, #0
 8013548:	f000 80cc 	beq.w	80136e4 <OpenThread_CallBack_Processing+0x378>
        {
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 801354c:	4b53      	ldr	r3, [pc, #332]	; (801369c <OpenThread_CallBack_Processing+0x330>)
 801354e:	681c      	ldr	r4, [r3, #0]
 8013550:	683b      	ldr	r3, [r7, #0]
 8013552:	6898      	ldr	r0, [r3, #8]
                    (uint8_t*) p_notification->Data[1],
 8013554:	683b      	ldr	r3, [r7, #0]
 8013556:	68db      	ldr	r3, [r3, #12]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 8013558:	4619      	mov	r1, r3
                    (uint8_t) p_notification->Data[2],
 801355a:	683b      	ldr	r3, [r7, #0]
 801355c:	691b      	ldr	r3, [r3, #16]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 801355e:	b2da      	uxtb	r2, r3
                    (void*) p_notification->Data[3]);
 8013560:	683b      	ldr	r3, [r7, #0]
 8013562:	695b      	ldr	r3, [r3, #20]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 8013564:	47a0      	blx	r4
        }
        break;
 8013566:	e0bd      	b.n	80136e4 <OpenThread_CallBack_Processing+0x378>
    case MSG_M0TOM4_DNS_RESPONSE_HANDLER:
        if (otDnsResponseHandlerCb != NULL)
 8013568:	4b4d      	ldr	r3, [pc, #308]	; (80136a0 <OpenThread_CallBack_Processing+0x334>)
 801356a:	681b      	ldr	r3, [r3, #0]
 801356c:	2b00      	cmp	r3, #0
 801356e:	f000 80bb 	beq.w	80136e8 <OpenThread_CallBack_Processing+0x37c>
        {
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 8013572:	4b4b      	ldr	r3, [pc, #300]	; (80136a0 <OpenThread_CallBack_Processing+0x334>)
 8013574:	681c      	ldr	r4, [r3, #0]
 8013576:	683b      	ldr	r3, [r7, #0]
 8013578:	689b      	ldr	r3, [r3, #8]
 801357a:	4618      	mov	r0, r3
                    (char*) p_notification->Data[1],
 801357c:	683b      	ldr	r3, [r7, #0]
 801357e:	68db      	ldr	r3, [r3, #12]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 8013580:	4619      	mov	r1, r3
                    (otIp6Address*) p_notification->Data[2],
 8013582:	683b      	ldr	r3, [r7, #0]
 8013584:	691b      	ldr	r3, [r3, #16]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 8013586:	461d      	mov	r5, r3
                    (uint32_t) p_notification->Data[3],
 8013588:	683b      	ldr	r3, [r7, #0]
 801358a:	695a      	ldr	r2, [r3, #20]
                    (otError) p_notification->Data[4]);
 801358c:	683b      	ldr	r3, [r7, #0]
 801358e:	699b      	ldr	r3, [r3, #24]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 8013590:	b2db      	uxtb	r3, r3
 8013592:	9300      	str	r3, [sp, #0]
 8013594:	4613      	mov	r3, r2
 8013596:	462a      	mov	r2, r5
 8013598:	47a0      	blx	r4
        }
        break;
 801359a:	e0a5      	b.n	80136e8 <OpenThread_CallBack_Processing+0x37c>
    case MSG_M0TOM4_ICMP6_RECEIVE_CALLBACK:
        if (otIcmp6ReceiveCb != NULL)
 801359c:	4b41      	ldr	r3, [pc, #260]	; (80136a4 <OpenThread_CallBack_Processing+0x338>)
 801359e:	681b      	ldr	r3, [r3, #0]
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	f000 80a3 	beq.w	80136ec <OpenThread_CallBack_Processing+0x380>
        {
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 80135a6:	4b3f      	ldr	r3, [pc, #252]	; (80136a4 <OpenThread_CallBack_Processing+0x338>)
 80135a8:	681c      	ldr	r4, [r3, #0]
 80135aa:	683b      	ldr	r3, [r7, #0]
 80135ac:	689b      	ldr	r3, [r3, #8]
 80135ae:	4618      	mov	r0, r3
                    (otMessage*) p_notification->Data[1],
 80135b0:	683b      	ldr	r3, [r7, #0]
 80135b2:	68db      	ldr	r3, [r3, #12]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 80135b4:	4619      	mov	r1, r3
                    (otMessageInfo*) p_notification->Data[2],
 80135b6:	683b      	ldr	r3, [r7, #0]
 80135b8:	691b      	ldr	r3, [r3, #16]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 80135ba:	461a      	mov	r2, r3
                    (otIcmp6Header*) p_notification->Data[3]);
 80135bc:	683b      	ldr	r3, [r7, #0]
 80135be:	695b      	ldr	r3, [r3, #20]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 80135c0:	47a0      	blx	r4
        }
        break;
 80135c2:	e093      	b.n	80136ec <OpenThread_CallBack_Processing+0x380>
    case MSG_M0TOM4_JOINER_CALLBACK:
        if (otJoinerCb != NULL)
 80135c4:	4b38      	ldr	r3, [pc, #224]	; (80136a8 <OpenThread_CallBack_Processing+0x33c>)
 80135c6:	681b      	ldr	r3, [r3, #0]
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	f000 8091 	beq.w	80136f0 <OpenThread_CallBack_Processing+0x384>
        {
            otJoinerCb((otError) p_notification->Data[0],
 80135ce:	4b36      	ldr	r3, [pc, #216]	; (80136a8 <OpenThread_CallBack_Processing+0x33c>)
 80135d0:	681b      	ldr	r3, [r3, #0]
 80135d2:	683a      	ldr	r2, [r7, #0]
 80135d4:	6892      	ldr	r2, [r2, #8]
 80135d6:	b2d0      	uxtb	r0, r2
                    (void*) p_notification->Data[1]);
 80135d8:	683a      	ldr	r2, [r7, #0]
 80135da:	68d2      	ldr	r2, [r2, #12]
            otJoinerCb((otError) p_notification->Data[0],
 80135dc:	4611      	mov	r1, r2
 80135de:	4798      	blx	r3
        }
        break;
 80135e0:	e086      	b.n	80136f0 <OpenThread_CallBack_Processing+0x384>
    case MSG_M0TOM4_LINK_RAW_RECEIVE_DONE:
        if (otLinkRawReceiveDoneCb != NULL)
 80135e2:	4b32      	ldr	r3, [pc, #200]	; (80136ac <OpenThread_CallBack_Processing+0x340>)
 80135e4:	681b      	ldr	r3, [r3, #0]
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	f000 8084 	beq.w	80136f4 <OpenThread_CallBack_Processing+0x388>
        {
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 80135ec:	4b2f      	ldr	r3, [pc, #188]	; (80136ac <OpenThread_CallBack_Processing+0x340>)
 80135ee:	681b      	ldr	r3, [r3, #0]
 80135f0:	683a      	ldr	r2, [r7, #0]
 80135f2:	6892      	ldr	r2, [r2, #8]
 80135f4:	4610      	mov	r0, r2
                    (otRadioFrame*) p_notification->Data[1],
 80135f6:	683a      	ldr	r2, [r7, #0]
 80135f8:	68d2      	ldr	r2, [r2, #12]
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 80135fa:	4611      	mov	r1, r2
                    (otError) p_notification->Data[2]);
 80135fc:	683a      	ldr	r2, [r7, #0]
 80135fe:	6912      	ldr	r2, [r2, #16]
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 8013600:	b2d2      	uxtb	r2, r2
 8013602:	4798      	blx	r3
        }
        break;
 8013604:	e076      	b.n	80136f4 <OpenThread_CallBack_Processing+0x388>
    case MSG_M0TOM4_LINK_RAW_TRANSMIT_DONE:
        if (otLinkRawTransmitDoneCb != NULL)
 8013606:	4b2a      	ldr	r3, [pc, #168]	; (80136b0 <OpenThread_CallBack_Processing+0x344>)
 8013608:	681b      	ldr	r3, [r3, #0]
 801360a:	2b00      	cmp	r3, #0
 801360c:	d074      	beq.n	80136f8 <OpenThread_CallBack_Processing+0x38c>
        {
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 801360e:	4b28      	ldr	r3, [pc, #160]	; (80136b0 <OpenThread_CallBack_Processing+0x344>)
 8013610:	681c      	ldr	r4, [r3, #0]
 8013612:	683b      	ldr	r3, [r7, #0]
 8013614:	689b      	ldr	r3, [r3, #8]
 8013616:	4618      	mov	r0, r3
                    (otRadioFrame*) p_notification->Data[1],
 8013618:	683b      	ldr	r3, [r7, #0]
 801361a:	68db      	ldr	r3, [r3, #12]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 801361c:	4619      	mov	r1, r3
                    (otRadioFrame*) p_notification->Data[2],
 801361e:	683b      	ldr	r3, [r7, #0]
 8013620:	691b      	ldr	r3, [r3, #16]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 8013622:	461a      	mov	r2, r3
                    (otError) p_notification->Data[3]);
 8013624:	683b      	ldr	r3, [r7, #0]
 8013626:	695b      	ldr	r3, [r3, #20]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 8013628:	b2db      	uxtb	r3, r3
 801362a:	47a0      	blx	r4
        }
        break;
 801362c:	e064      	b.n	80136f8 <OpenThread_CallBack_Processing+0x38c>
    case MSG_M0TOM4_LINK_RAW_ENERGY_SCAN_DONE:
        if (otLinkRawEnergyScanDoneCb != NULL)
 801362e:	4b21      	ldr	r3, [pc, #132]	; (80136b4 <OpenThread_CallBack_Processing+0x348>)
 8013630:	681b      	ldr	r3, [r3, #0]
 8013632:	2b00      	cmp	r3, #0
 8013634:	d062      	beq.n	80136fc <OpenThread_CallBack_Processing+0x390>
        {
            otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 8013636:	4b1f      	ldr	r3, [pc, #124]	; (80136b4 <OpenThread_CallBack_Processing+0x348>)
 8013638:	681b      	ldr	r3, [r3, #0]
 801363a:	683a      	ldr	r2, [r7, #0]
 801363c:	6892      	ldr	r2, [r2, #8]
 801363e:	4610      	mov	r0, r2
                    (int8_t) p_notification->Data[1]);
 8013640:	683a      	ldr	r2, [r7, #0]
 8013642:	68d2      	ldr	r2, [r2, #12]
            otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 8013644:	b252      	sxtb	r2, r2
 8013646:	4611      	mov	r1, r2
 8013648:	4798      	blx	r3
        }
        break;
 801364a:	e057      	b.n	80136fc <OpenThread_CallBack_Processing+0x390>
    case MSG_M0TOM4_UDP_RECEIVE:
        if (otUdpReceiveCb != NULL)
 801364c:	4b1a      	ldr	r3, [pc, #104]	; (80136b8 <OpenThread_CallBack_Processing+0x34c>)
 801364e:	681b      	ldr	r3, [r3, #0]
 8013650:	2b00      	cmp	r3, #0
 8013652:	d055      	beq.n	8013700 <OpenThread_CallBack_Processing+0x394>
        {
            otUdpReceiveCb((void*) p_notification->Data[0],
 8013654:	4b18      	ldr	r3, [pc, #96]	; (80136b8 <OpenThread_CallBack_Processing+0x34c>)
 8013656:	681b      	ldr	r3, [r3, #0]
 8013658:	683a      	ldr	r2, [r7, #0]
 801365a:	6892      	ldr	r2, [r2, #8]
 801365c:	4610      	mov	r0, r2
                    (otMessage*) p_notification->Data[1],
 801365e:	683a      	ldr	r2, [r7, #0]
 8013660:	68d2      	ldr	r2, [r2, #12]
            otUdpReceiveCb((void*) p_notification->Data[0],
 8013662:	4611      	mov	r1, r2
                    (otMessageInfo*) p_notification->Data[2]);
 8013664:	683a      	ldr	r2, [r7, #0]
 8013666:	6912      	ldr	r2, [r2, #16]
            otUdpReceiveCb((void*) p_notification->Data[0],
 8013668:	4798      	blx	r3
        }
        break;
 801366a:	e049      	b.n	8013700 <OpenThread_CallBack_Processing+0x394>
                    (void *) p_notification->Data[1]);
        }
        break;
#endif
    default:
        status = HAL_ERROR;
 801366c:	2301      	movs	r3, #1
 801366e:	71fb      	strb	r3, [r7, #7]
        break;
 8013670:	e047      	b.n	8013702 <OpenThread_CallBack_Processing+0x396>
 8013672:	bf00      	nop
 8013674:	20027428 	.word	0x20027428
 8013678:	20027468 	.word	0x20027468
 801367c:	2002746c 	.word	0x2002746c
 8013680:	20027430 	.word	0x20027430
 8013684:	2002742c 	.word	0x2002742c
 8013688:	20027434 	.word	0x20027434
 801368c:	20027438 	.word	0x20027438
 8013690:	2002743c 	.word	0x2002743c
 8013694:	20027440 	.word	0x20027440
 8013698:	20027444 	.word	0x20027444
 801369c:	20027448 	.word	0x20027448
 80136a0:	2002744c 	.word	0x2002744c
 80136a4:	20027450 	.word	0x20027450
 80136a8:	20027454 	.word	0x20027454
 80136ac:	20027458 	.word	0x20027458
 80136b0:	2002745c 	.word	0x2002745c
 80136b4:	20027460 	.word	0x20027460
 80136b8:	20027464 	.word	0x20027464
        break;
 80136bc:	bf00      	nop
 80136be:	e020      	b.n	8013702 <OpenThread_CallBack_Processing+0x396>
        break;
 80136c0:	bf00      	nop
 80136c2:	e01e      	b.n	8013702 <OpenThread_CallBack_Processing+0x396>
        break;
 80136c4:	bf00      	nop
 80136c6:	e01c      	b.n	8013702 <OpenThread_CallBack_Processing+0x396>
        break;
 80136c8:	bf00      	nop
 80136ca:	e01a      	b.n	8013702 <OpenThread_CallBack_Processing+0x396>
        break;
 80136cc:	bf00      	nop
 80136ce:	e018      	b.n	8013702 <OpenThread_CallBack_Processing+0x396>
        break;
 80136d0:	bf00      	nop
 80136d2:	e016      	b.n	8013702 <OpenThread_CallBack_Processing+0x396>
        break;
 80136d4:	bf00      	nop
 80136d6:	e014      	b.n	8013702 <OpenThread_CallBack_Processing+0x396>
        break;
 80136d8:	bf00      	nop
 80136da:	e012      	b.n	8013702 <OpenThread_CallBack_Processing+0x396>
        break;
 80136dc:	bf00      	nop
 80136de:	e010      	b.n	8013702 <OpenThread_CallBack_Processing+0x396>
        break;
 80136e0:	bf00      	nop
 80136e2:	e00e      	b.n	8013702 <OpenThread_CallBack_Processing+0x396>
        break;
 80136e4:	bf00      	nop
 80136e6:	e00c      	b.n	8013702 <OpenThread_CallBack_Processing+0x396>
        break;
 80136e8:	bf00      	nop
 80136ea:	e00a      	b.n	8013702 <OpenThread_CallBack_Processing+0x396>
        break;
 80136ec:	bf00      	nop
 80136ee:	e008      	b.n	8013702 <OpenThread_CallBack_Processing+0x396>
        break;
 80136f0:	bf00      	nop
 80136f2:	e006      	b.n	8013702 <OpenThread_CallBack_Processing+0x396>
        break;
 80136f4:	bf00      	nop
 80136f6:	e004      	b.n	8013702 <OpenThread_CallBack_Processing+0x396>
        break;
 80136f8:	bf00      	nop
 80136fa:	e002      	b.n	8013702 <OpenThread_CallBack_Processing+0x396>
        break;
 80136fc:	bf00      	nop
 80136fe:	e000      	b.n	8013702 <OpenThread_CallBack_Processing+0x396>
        break;
 8013700:	bf00      	nop
    }

    TL_THREAD_SendAck();
 8013702:	f000 fcc1 	bl	8014088 <TL_THREAD_SendAck>
    return status;
 8013706:	79fb      	ldrb	r3, [r7, #7]

}
 8013708:	4618      	mov	r0, r3
 801370a:	3708      	adds	r7, #8
 801370c:	46bd      	mov	sp, r7
 801370e:	bdb0      	pop	{r4, r5, r7, pc}

08013710 <otPlatRadioSetTransmitPower>:
 * @retval OT_ERROR_NONE             Successfully set the transmit power.
 * @retval OT_ERROR_NOT_IMPLEMENTED  Transmit power configuration via dBm is not implemented.
 *
 */
otError otPlatRadioSetTransmitPower(otInstance *aInstance, int8_t aPower)
{
 8013710:	b580      	push	{r7, lr}
 8013712:	b084      	sub	sp, #16
 8013714:	af00      	add	r7, sp, #0
 8013716:	6078      	str	r0, [r7, #4]
 8013718:	460b      	mov	r3, r1
 801371a:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 801371c:	f001 fd00 	bl	8015120 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013720:	f001 fc9c 	bl	801505c <THREAD_Get_OTCmdPayloadBuffer>
 8013724:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_RADIO_SET_TRANSMIT_POWER;
 8013726:	68fb      	ldr	r3, [r7, #12]
 8013728:	2200      	movs	r2, #0
 801372a:	f042 024d 	orr.w	r2, r2, #77	; 0x4d
 801372e:	701a      	strb	r2, [r3, #0]
 8013730:	2200      	movs	r2, #0
 8013732:	f042 0201 	orr.w	r2, r2, #1
 8013736:	705a      	strb	r2, [r3, #1]
 8013738:	2200      	movs	r2, #0
 801373a:	709a      	strb	r2, [r3, #2]
 801373c:	2200      	movs	r2, #0
 801373e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8013740:	68fb      	ldr	r3, [r7, #12]
 8013742:	2200      	movs	r2, #0
 8013744:	f042 0201 	orr.w	r2, r2, #1
 8013748:	711a      	strb	r2, [r3, #4]
 801374a:	2200      	movs	r2, #0
 801374c:	715a      	strb	r2, [r3, #5]
 801374e:	2200      	movs	r2, #0
 8013750:	719a      	strb	r2, [r3, #6]
 8013752:	2200      	movs	r2, #0
 8013754:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aPower;
 8013756:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801375a:	68fb      	ldr	r3, [r7, #12]
 801375c:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 801375e:	f001 fca1 	bl	80150a4 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013762:	f001 fc87 	bl	8015074 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013766:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 8013768:	68fb      	ldr	r3, [r7, #12]
 801376a:	689b      	ldr	r3, [r3, #8]
 801376c:	b2db      	uxtb	r3, r3
}
 801376e:	4618      	mov	r0, r3
 8013770:	3710      	adds	r7, #16
 8013772:	46bd      	mov	sp, r7
 8013774:	bd80      	pop	{r7, pc}

08013776 <SHCI_C2_THREAD_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_THREAD_Init( void )
{
 8013776:	b580      	push	{r7, lr}
 8013778:	b086      	sub	sp, #24
 801377a:	af00      	add	r7, sp, #0
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 801377c:	1d3b      	adds	r3, r7, #4
 801377e:	617b      	str	r3, [r7, #20]

  shci_send( SHCI_OPCODE_C2_THREAD_INIT,
 8013780:	697b      	ldr	r3, [r7, #20]
 8013782:	2200      	movs	r2, #0
 8013784:	2100      	movs	r1, #0
 8013786:	f64f 4067 	movw	r0, #64615	; 0xfc67
 801378a:	f000 f915 	bl	80139b8 <shci_send>
             0,
             0,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 801378e:	697b      	ldr	r3, [r7, #20]
 8013790:	330b      	adds	r3, #11
 8013792:	78db      	ldrb	r3, [r3, #3]
}
 8013794:	4618      	mov	r0, r3
 8013796:	3718      	adds	r7, #24
 8013798:	46bd      	mov	sp, r7
 801379a:	bd80      	pop	{r7, pc}

0801379c <SHCI_C2_FLASH_StoreData>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_FLASH_StoreData( SHCI_C2_FLASH_Ip_t Ip )
{
 801379c:	b580      	push	{r7, lr}
 801379e:	b088      	sub	sp, #32
 80137a0:	af00      	add	r7, sp, #0
 80137a2:	4603      	mov	r3, r0
 80137a4:	71fb      	strb	r3, [r7, #7]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80137a6:	f107 030c 	add.w	r3, r7, #12
 80137aa:	61fb      	str	r3, [r7, #28]

  local_buffer[0] = Ip;
 80137ac:	79fb      	ldrb	r3, [r7, #7]
 80137ae:	733b      	strb	r3, [r7, #12]

  shci_send( SHCI_OPCODE_C2_FLASH_STORE_DATA,
 80137b0:	f107 020c 	add.w	r2, r7, #12
 80137b4:	69fb      	ldr	r3, [r7, #28]
 80137b6:	2101      	movs	r1, #1
 80137b8:	f64f 406b 	movw	r0, #64619	; 0xfc6b
 80137bc:	f000 f8fc 	bl	80139b8 <shci_send>
             1,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80137c0:	69fb      	ldr	r3, [r7, #28]
 80137c2:	330b      	adds	r3, #11
 80137c4:	78db      	ldrb	r3, [r3, #3]
}
 80137c6:	4618      	mov	r0, r3
 80137c8:	3720      	adds	r7, #32
 80137ca:	46bd      	mov	sp, r7
 80137cc:	bd80      	pop	{r7, pc}
	...

080137d0 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 80137d0:	b480      	push	{r7}
 80137d2:	b089      	sub	sp, #36	; 0x24
 80137d4:	af00      	add	r7, sp, #0
 80137d6:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 80137d8:	2300      	movs	r3, #0
 80137da:	61fb      	str	r3, [r7, #28]
  MB_RefTable_t * p_RefTable = NULL;
 80137dc:	2300      	movs	r3, #0
 80137de:	61bb      	str	r3, [r7, #24]
  uint32_t version = 0;
 80137e0:	2300      	movs	r3, #0
 80137e2:	617b      	str	r3, [r7, #20]
  uint32_t memorySize = 0;
 80137e4:	2300      	movs	r3, #0
 80137e6:	613b      	str	r3, [r7, #16]
  uint32_t infoStack = 0;
 80137e8:	2300      	movs	r3, #0
 80137ea:	60fb      	str	r3, [r7, #12]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 80137ec:	4b3c      	ldr	r3, [pc, #240]	; (80138e0 <SHCI_GetWirelessFwInfo+0x110>)
 80137ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80137f0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80137f4:	61fb      	str	r3, [r7, #28]
  p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 80137f6:	69fb      	ldr	r3, [r7, #28]
 80137f8:	009b      	lsls	r3, r3, #2
 80137fa:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80137fe:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8013802:	61bb      	str	r3, [r7, #24]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8013804:	69bb      	ldr	r3, [r7, #24]
 8013806:	681b      	ldr	r3, [r3, #0]
 8013808:	691b      	ldr	r3, [r3, #16]
 801380a:	617b      	str	r3, [r7, #20]
  pWirelessInfo->VersionMajor       = ((version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 801380c:	697b      	ldr	r3, [r7, #20]
 801380e:	0e1b      	lsrs	r3, r3, #24
 8013810:	b2da      	uxtb	r2, r3
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8013816:	697b      	ldr	r3, [r7, #20]
 8013818:	0c1b      	lsrs	r3, r3, #16
 801381a:	b2da      	uxtb	r2, r3
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8013820:	697b      	ldr	r3, [r7, #20]
 8013822:	0a1b      	lsrs	r3, r3, #8
 8013824:	b2da      	uxtb	r2, r3
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 801382a:	697b      	ldr	r3, [r7, #20]
 801382c:	091b      	lsrs	r3, r3, #4
 801382e:	b2db      	uxtb	r3, r3
 8013830:	f003 030f 	and.w	r3, r3, #15
 8013834:	b2da      	uxtb	r2, r3
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 801383a:	697b      	ldr	r3, [r7, #20]
 801383c:	b2db      	uxtb	r3, r3
 801383e:	f003 030f 	and.w	r3, r3, #15
 8013842:	b2da      	uxtb	r2, r3
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	711a      	strb	r2, [r3, #4]

  memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8013848:	69bb      	ldr	r3, [r7, #24]
 801384a:	681b      	ldr	r3, [r3, #0]
 801384c:	695b      	ldr	r3, [r3, #20]
 801384e:	613b      	str	r3, [r7, #16]
  pWirelessInfo->MemorySizeSram2B   = ((memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8013850:	693b      	ldr	r3, [r7, #16]
 8013852:	0e1b      	lsrs	r3, r3, #24
 8013854:	b2da      	uxtb	r2, r3
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 801385a:	693b      	ldr	r3, [r7, #16]
 801385c:	0c1b      	lsrs	r3, r3, #16
 801385e:	b2da      	uxtb	r2, r3
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8013864:	693b      	ldr	r3, [r7, #16]
 8013866:	0a1b      	lsrs	r3, r3, #8
 8013868:	b2da      	uxtb	r2, r3
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 801386e:	693b      	ldr	r3, [r7, #16]
 8013870:	b2da      	uxtb	r2, r3
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	721a      	strb	r2, [r3, #8]

  infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8013876:	69bb      	ldr	r3, [r7, #24]
 8013878:	681b      	ldr	r3, [r3, #0]
 801387a:	699b      	ldr	r3, [r3, #24]
 801387c:	60fb      	str	r3, [r7, #12]
  pWirelessInfo->StackType          = ((infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 801387e:	68fb      	ldr	r3, [r7, #12]
 8013880:	b2da      	uxtb	r2, r3
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8013886:	69bb      	ldr	r3, [r7, #24]
 8013888:	681b      	ldr	r3, [r3, #0]
 801388a:	685b      	ldr	r3, [r3, #4]
 801388c:	617b      	str	r3, [r7, #20]
  pWirelessInfo->FusVersionMajor       = ((version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 801388e:	697b      	ldr	r3, [r7, #20]
 8013890:	0e1b      	lsrs	r3, r3, #24
 8013892:	b2da      	uxtb	r2, r3
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8013898:	697b      	ldr	r3, [r7, #20]
 801389a:	0c1b      	lsrs	r3, r3, #16
 801389c:	b2da      	uxtb	r2, r3
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80138a2:	697b      	ldr	r3, [r7, #20]
 80138a4:	0a1b      	lsrs	r3, r3, #8
 80138a6:	b2da      	uxtb	r2, r3
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	731a      	strb	r2, [r3, #12]

  memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 80138ac:	69bb      	ldr	r3, [r7, #24]
 80138ae:	681b      	ldr	r3, [r3, #0]
 80138b0:	689b      	ldr	r3, [r3, #8]
 80138b2:	613b      	str	r3, [r7, #16]
  pWirelessInfo->FusMemorySizeSram2B   = ((memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80138b4:	693b      	ldr	r3, [r7, #16]
 80138b6:	0e1b      	lsrs	r3, r3, #24
 80138b8:	b2da      	uxtb	r2, r3
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80138be:	693b      	ldr	r3, [r7, #16]
 80138c0:	0c1b      	lsrs	r3, r3, #16
 80138c2:	b2da      	uxtb	r2, r3
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80138c8:	693b      	ldr	r3, [r7, #16]
 80138ca:	b2da      	uxtb	r2, r3
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 80138d0:	2300      	movs	r3, #0
}
 80138d2:	4618      	mov	r0, r3
 80138d4:	3724      	adds	r7, #36	; 0x24
 80138d6:	46bd      	mov	sp, r7
 80138d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138dc:	4770      	bx	lr
 80138de:	bf00      	nop
 80138e0:	58004000 	.word	0x58004000

080138e4 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80138e4:	b580      	push	{r7, lr}
 80138e6:	b082      	sub	sp, #8
 80138e8:	af00      	add	r7, sp, #0
 80138ea:	6078      	str	r0, [r7, #4]
 80138ec:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80138ee:	683b      	ldr	r3, [r7, #0]
 80138f0:	685b      	ldr	r3, [r3, #4]
 80138f2:	4a08      	ldr	r2, [pc, #32]	; (8013914 <shci_init+0x30>)
 80138f4:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 80138f6:	4a08      	ldr	r2, [pc, #32]	; (8013918 <shci_init+0x34>)
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 80138fc:	4806      	ldr	r0, [pc, #24]	; (8013918 <shci_init+0x34>)
 80138fe:	f000 f911 	bl	8013b24 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8013902:	683b      	ldr	r3, [r7, #0]
 8013904:	681b      	ldr	r3, [r3, #0]
 8013906:	4618      	mov	r0, r3
 8013908:	f000 f894 	bl	8013a34 <TlInit>

  return;
 801390c:	bf00      	nop
}
 801390e:	3708      	adds	r7, #8
 8013910:	46bd      	mov	sp, r7
 8013912:	bd80      	pop	{r7, pc}
 8013914:	20027490 	.word	0x20027490
 8013918:	20027470 	.word	0x20027470

0801391c <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 801391c:	b580      	push	{r7, lr}
 801391e:	b084      	sub	sp, #16
 8013920:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8013922:	4822      	ldr	r0, [pc, #136]	; (80139ac <shci_user_evt_proc+0x90>)
 8013924:	f000 f922 	bl	8013b6c <LST_is_empty>
 8013928:	4603      	mov	r3, r0
 801392a:	2b00      	cmp	r3, #0
 801392c:	d12b      	bne.n	8013986 <shci_user_evt_proc+0x6a>
 801392e:	4b20      	ldr	r3, [pc, #128]	; (80139b0 <shci_user_evt_proc+0x94>)
 8013930:	781b      	ldrb	r3, [r3, #0]
 8013932:	2b00      	cmp	r3, #0
 8013934:	d027      	beq.n	8013986 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8013936:	f107 030c 	add.w	r3, r7, #12
 801393a:	4619      	mov	r1, r3
 801393c:	481b      	ldr	r0, [pc, #108]	; (80139ac <shci_user_evt_proc+0x90>)
 801393e:	f000 f99c 	bl	8013c7a <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8013942:	4b1c      	ldr	r3, [pc, #112]	; (80139b4 <shci_user_evt_proc+0x98>)
 8013944:	69db      	ldr	r3, [r3, #28]
 8013946:	2b00      	cmp	r3, #0
 8013948:	d00c      	beq.n	8013964 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 801394a:	68fb      	ldr	r3, [r7, #12]
 801394c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 801394e:	2301      	movs	r3, #1
 8013950:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8013952:	4b18      	ldr	r3, [pc, #96]	; (80139b4 <shci_user_evt_proc+0x98>)
 8013954:	69db      	ldr	r3, [r3, #28]
 8013956:	1d3a      	adds	r2, r7, #4
 8013958:	4610      	mov	r0, r2
 801395a:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 801395c:	793a      	ldrb	r2, [r7, #4]
 801395e:	4b14      	ldr	r3, [pc, #80]	; (80139b0 <shci_user_evt_proc+0x94>)
 8013960:	701a      	strb	r2, [r3, #0]
 8013962:	e002      	b.n	801396a <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8013964:	4b12      	ldr	r3, [pc, #72]	; (80139b0 <shci_user_evt_proc+0x94>)
 8013966:	2201      	movs	r2, #1
 8013968:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 801396a:	4b11      	ldr	r3, [pc, #68]	; (80139b0 <shci_user_evt_proc+0x94>)
 801396c:	781b      	ldrb	r3, [r3, #0]
 801396e:	2b00      	cmp	r3, #0
 8013970:	d004      	beq.n	801397c <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8013972:	68fb      	ldr	r3, [r7, #12]
 8013974:	4618      	mov	r0, r3
 8013976:	f000 fc03 	bl	8014180 <TL_MM_EvtDone>
 801397a:	e004      	b.n	8013986 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 801397c:	68fb      	ldr	r3, [r7, #12]
 801397e:	4619      	mov	r1, r3
 8013980:	480a      	ldr	r0, [pc, #40]	; (80139ac <shci_user_evt_proc+0x90>)
 8013982:	f000 f913 	bl	8013bac <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8013986:	4809      	ldr	r0, [pc, #36]	; (80139ac <shci_user_evt_proc+0x90>)
 8013988:	f000 f8f0 	bl	8013b6c <LST_is_empty>
 801398c:	4603      	mov	r3, r0
 801398e:	2b00      	cmp	r3, #0
 8013990:	d107      	bne.n	80139a2 <shci_user_evt_proc+0x86>
 8013992:	4b07      	ldr	r3, [pc, #28]	; (80139b0 <shci_user_evt_proc+0x94>)
 8013994:	781b      	ldrb	r3, [r3, #0]
 8013996:	2b00      	cmp	r3, #0
 8013998:	d003      	beq.n	80139a2 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 801399a:	4804      	ldr	r0, [pc, #16]	; (80139ac <shci_user_evt_proc+0x90>)
 801399c:	f7ed fc0a 	bl	80011b4 <shci_notify_asynch_evt>
  }


  return;
 80139a0:	bf00      	nop
 80139a2:	bf00      	nop
}
 80139a4:	3710      	adds	r7, #16
 80139a6:	46bd      	mov	sp, r7
 80139a8:	bd80      	pop	{r7, pc}
 80139aa:	bf00      	nop
 80139ac:	200001fc 	.word	0x200001fc
 80139b0:	2000020c 	.word	0x2000020c
 80139b4:	20027470 	.word	0x20027470

080139b8 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 80139b8:	b580      	push	{r7, lr}
 80139ba:	b084      	sub	sp, #16
 80139bc:	af00      	add	r7, sp, #0
 80139be:	60ba      	str	r2, [r7, #8]
 80139c0:	607b      	str	r3, [r7, #4]
 80139c2:	4603      	mov	r3, r0
 80139c4:	81fb      	strh	r3, [r7, #14]
 80139c6:	460b      	mov	r3, r1
 80139c8:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 80139ca:	2000      	movs	r0, #0
 80139cc:	f000 f864 	bl	8013a98 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 80139d0:	4b16      	ldr	r3, [pc, #88]	; (8013a2c <shci_send+0x74>)
 80139d2:	681b      	ldr	r3, [r3, #0]
 80139d4:	89fa      	ldrh	r2, [r7, #14]
 80139d6:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 80139da:	4b14      	ldr	r3, [pc, #80]	; (8013a2c <shci_send+0x74>)
 80139dc:	681b      	ldr	r3, [r3, #0]
 80139de:	7b7a      	ldrb	r2, [r7, #13]
 80139e0:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 80139e2:	4b12      	ldr	r3, [pc, #72]	; (8013a2c <shci_send+0x74>)
 80139e4:	681b      	ldr	r3, [r3, #0]
 80139e6:	330c      	adds	r3, #12
 80139e8:	7b7a      	ldrb	r2, [r7, #13]
 80139ea:	68b9      	ldr	r1, [r7, #8]
 80139ec:	4618      	mov	r0, r3
 80139ee:	f002 fa6b 	bl	8015ec8 <memcpy>

  shciContext.io.Send(0,0);
 80139f2:	4b0f      	ldr	r3, [pc, #60]	; (8013a30 <shci_send+0x78>)
 80139f4:	691b      	ldr	r3, [r3, #16]
 80139f6:	2100      	movs	r1, #0
 80139f8:	2000      	movs	r0, #0
 80139fa:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 80139fc:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8013a00:	f7ed fbf8 	bl	80011f4 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	f103 0008 	add.w	r0, r3, #8
 8013a0a:	4b08      	ldr	r3, [pc, #32]	; (8013a2c <shci_send+0x74>)
 8013a0c:	6819      	ldr	r1, [r3, #0]
 8013a0e:	4b07      	ldr	r3, [pc, #28]	; (8013a2c <shci_send+0x74>)
 8013a10:	681b      	ldr	r3, [r3, #0]
 8013a12:	789b      	ldrb	r3, [r3, #2]
 8013a14:	3303      	adds	r3, #3
 8013a16:	461a      	mov	r2, r3
 8013a18:	f002 fa56 	bl	8015ec8 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8013a1c:	2001      	movs	r0, #1
 8013a1e:	f000 f83b 	bl	8013a98 <Cmd_SetStatus>

  return;
 8013a22:	bf00      	nop
}
 8013a24:	3710      	adds	r7, #16
 8013a26:	46bd      	mov	sp, r7
 8013a28:	bd80      	pop	{r7, pc}
 8013a2a:	bf00      	nop
 8013a2c:	20000208 	.word	0x20000208
 8013a30:	20027470 	.word	0x20027470

08013a34 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8013a34:	b580      	push	{r7, lr}
 8013a36:	b086      	sub	sp, #24
 8013a38:	af00      	add	r7, sp, #0
 8013a3a:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8013a3c:	4a10      	ldr	r2, [pc, #64]	; (8013a80 <TlInit+0x4c>)
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8013a42:	4810      	ldr	r0, [pc, #64]	; (8013a84 <TlInit+0x50>)
 8013a44:	f000 f882 	bl	8013b4c <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8013a48:	2001      	movs	r0, #1
 8013a4a:	f000 f825 	bl	8013a98 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8013a4e:	4b0e      	ldr	r3, [pc, #56]	; (8013a88 <TlInit+0x54>)
 8013a50:	2201      	movs	r2, #1
 8013a52:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8013a54:	4b0d      	ldr	r3, [pc, #52]	; (8013a8c <TlInit+0x58>)
 8013a56:	681b      	ldr	r3, [r3, #0]
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	d00c      	beq.n	8013a76 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8013a60:	4b0b      	ldr	r3, [pc, #44]	; (8013a90 <TlInit+0x5c>)
 8013a62:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8013a64:	4b0b      	ldr	r3, [pc, #44]	; (8013a94 <TlInit+0x60>)
 8013a66:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8013a68:	4b08      	ldr	r3, [pc, #32]	; (8013a8c <TlInit+0x58>)
 8013a6a:	681b      	ldr	r3, [r3, #0]
 8013a6c:	f107 020c 	add.w	r2, r7, #12
 8013a70:	4610      	mov	r0, r2
 8013a72:	4798      	blx	r3
  }

  return;
 8013a74:	bf00      	nop
 8013a76:	bf00      	nop
}
 8013a78:	3718      	adds	r7, #24
 8013a7a:	46bd      	mov	sp, r7
 8013a7c:	bd80      	pop	{r7, pc}
 8013a7e:	bf00      	nop
 8013a80:	20000208 	.word	0x20000208
 8013a84:	200001fc 	.word	0x200001fc
 8013a88:	2000020c 	.word	0x2000020c
 8013a8c:	20027470 	.word	0x20027470
 8013a90:	08013ae9 	.word	0x08013ae9
 8013a94:	08013b01 	.word	0x08013b01

08013a98 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8013a98:	b580      	push	{r7, lr}
 8013a9a:	b082      	sub	sp, #8
 8013a9c:	af00      	add	r7, sp, #0
 8013a9e:	4603      	mov	r3, r0
 8013aa0:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8013aa2:	79fb      	ldrb	r3, [r7, #7]
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d10b      	bne.n	8013ac0 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8013aa8:	4b0d      	ldr	r3, [pc, #52]	; (8013ae0 <Cmd_SetStatus+0x48>)
 8013aaa:	681b      	ldr	r3, [r3, #0]
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d003      	beq.n	8013ab8 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8013ab0:	4b0b      	ldr	r3, [pc, #44]	; (8013ae0 <Cmd_SetStatus+0x48>)
 8013ab2:	681b      	ldr	r3, [r3, #0]
 8013ab4:	2000      	movs	r0, #0
 8013ab6:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8013ab8:	4b0a      	ldr	r3, [pc, #40]	; (8013ae4 <Cmd_SetStatus+0x4c>)
 8013aba:	2200      	movs	r2, #0
 8013abc:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8013abe:	e00b      	b.n	8013ad8 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8013ac0:	4b08      	ldr	r3, [pc, #32]	; (8013ae4 <Cmd_SetStatus+0x4c>)
 8013ac2:	2201      	movs	r2, #1
 8013ac4:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8013ac6:	4b06      	ldr	r3, [pc, #24]	; (8013ae0 <Cmd_SetStatus+0x48>)
 8013ac8:	681b      	ldr	r3, [r3, #0]
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d004      	beq.n	8013ad8 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8013ace:	4b04      	ldr	r3, [pc, #16]	; (8013ae0 <Cmd_SetStatus+0x48>)
 8013ad0:	681b      	ldr	r3, [r3, #0]
 8013ad2:	2001      	movs	r0, #1
 8013ad4:	4798      	blx	r3
  return;
 8013ad6:	bf00      	nop
 8013ad8:	bf00      	nop
}
 8013ada:	3708      	adds	r7, #8
 8013adc:	46bd      	mov	sp, r7
 8013ade:	bd80      	pop	{r7, pc}
 8013ae0:	20027490 	.word	0x20027490
 8013ae4:	20000204 	.word	0x20000204

08013ae8 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8013ae8:	b580      	push	{r7, lr}
 8013aea:	b082      	sub	sp, #8
 8013aec:	af00      	add	r7, sp, #0
 8013aee:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8013af0:	2000      	movs	r0, #0
 8013af2:	f7ed fb6f 	bl	80011d4 <shci_cmd_resp_release>

  return;
 8013af6:	bf00      	nop
}
 8013af8:	3708      	adds	r7, #8
 8013afa:	46bd      	mov	sp, r7
 8013afc:	bd80      	pop	{r7, pc}
	...

08013b00 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8013b00:	b580      	push	{r7, lr}
 8013b02:	b082      	sub	sp, #8
 8013b04:	af00      	add	r7, sp, #0
 8013b06:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8013b08:	6879      	ldr	r1, [r7, #4]
 8013b0a:	4805      	ldr	r0, [pc, #20]	; (8013b20 <TlUserEvtReceived+0x20>)
 8013b0c:	f000 f872 	bl	8013bf4 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8013b10:	4803      	ldr	r0, [pc, #12]	; (8013b20 <TlUserEvtReceived+0x20>)
 8013b12:	f7ed fb4f 	bl	80011b4 <shci_notify_asynch_evt>

  return;
 8013b16:	bf00      	nop
}
 8013b18:	3708      	adds	r7, #8
 8013b1a:	46bd      	mov	sp, r7
 8013b1c:	bd80      	pop	{r7, pc}
 8013b1e:	bf00      	nop
 8013b20:	200001fc 	.word	0x200001fc

08013b24 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8013b24:	b480      	push	{r7}
 8013b26:	b083      	sub	sp, #12
 8013b28:	af00      	add	r7, sp, #0
 8013b2a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	4a05      	ldr	r2, [pc, #20]	; (8013b44 <shci_register_io_bus+0x20>)
 8013b30:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	4a04      	ldr	r2, [pc, #16]	; (8013b48 <shci_register_io_bus+0x24>)
 8013b36:	611a      	str	r2, [r3, #16]

  return;
 8013b38:	bf00      	nop
}
 8013b3a:	370c      	adds	r7, #12
 8013b3c:	46bd      	mov	sp, r7
 8013b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b42:	4770      	bx	lr
 8013b44:	08013f45 	.word	0x08013f45
 8013b48:	08013f99 	.word	0x08013f99

08013b4c <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8013b4c:	b480      	push	{r7}
 8013b4e:	b083      	sub	sp, #12
 8013b50:	af00      	add	r7, sp, #0
 8013b52:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	687a      	ldr	r2, [r7, #4]
 8013b58:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	687a      	ldr	r2, [r7, #4]
 8013b5e:	605a      	str	r2, [r3, #4]
}
 8013b60:	bf00      	nop
 8013b62:	370c      	adds	r7, #12
 8013b64:	46bd      	mov	sp, r7
 8013b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b6a:	4770      	bx	lr

08013b6c <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8013b6c:	b480      	push	{r7}
 8013b6e:	b087      	sub	sp, #28
 8013b70:	af00      	add	r7, sp, #0
 8013b72:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013b74:	f3ef 8310 	mrs	r3, PRIMASK
 8013b78:	60fb      	str	r3, [r7, #12]
  return(result);
 8013b7a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8013b7c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8013b7e:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	681b      	ldr	r3, [r3, #0]
 8013b84:	687a      	ldr	r2, [r7, #4]
 8013b86:	429a      	cmp	r2, r3
 8013b88:	d102      	bne.n	8013b90 <LST_is_empty+0x24>
  {
    return_value = TRUE;
 8013b8a:	2301      	movs	r3, #1
 8013b8c:	75fb      	strb	r3, [r7, #23]
 8013b8e:	e001      	b.n	8013b94 <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 8013b90:	2300      	movs	r3, #0
 8013b92:	75fb      	strb	r3, [r7, #23]
 8013b94:	693b      	ldr	r3, [r7, #16]
 8013b96:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013b98:	68bb      	ldr	r3, [r7, #8]
 8013b9a:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8013b9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013ba0:	4618      	mov	r0, r3
 8013ba2:	371c      	adds	r7, #28
 8013ba4:	46bd      	mov	sp, r7
 8013ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013baa:	4770      	bx	lr

08013bac <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8013bac:	b480      	push	{r7}
 8013bae:	b087      	sub	sp, #28
 8013bb0:	af00      	add	r7, sp, #0
 8013bb2:	6078      	str	r0, [r7, #4]
 8013bb4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013bb6:	f3ef 8310 	mrs	r3, PRIMASK
 8013bba:	60fb      	str	r3, [r7, #12]
  return(result);
 8013bbc:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8013bbe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8013bc0:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	681a      	ldr	r2, [r3, #0]
 8013bc6:	683b      	ldr	r3, [r7, #0]
 8013bc8:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8013bca:	683b      	ldr	r3, [r7, #0]
 8013bcc:	687a      	ldr	r2, [r7, #4]
 8013bce:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	683a      	ldr	r2, [r7, #0]
 8013bd4:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8013bd6:	683b      	ldr	r3, [r7, #0]
 8013bd8:	681b      	ldr	r3, [r3, #0]
 8013bda:	683a      	ldr	r2, [r7, #0]
 8013bdc:	605a      	str	r2, [r3, #4]
 8013bde:	697b      	ldr	r3, [r7, #20]
 8013be0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013be2:	693b      	ldr	r3, [r7, #16]
 8013be4:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8013be8:	bf00      	nop
 8013bea:	371c      	adds	r7, #28
 8013bec:	46bd      	mov	sp, r7
 8013bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bf2:	4770      	bx	lr

08013bf4 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8013bf4:	b480      	push	{r7}
 8013bf6:	b087      	sub	sp, #28
 8013bf8:	af00      	add	r7, sp, #0
 8013bfa:	6078      	str	r0, [r7, #4]
 8013bfc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013bfe:	f3ef 8310 	mrs	r3, PRIMASK
 8013c02:	60fb      	str	r3, [r7, #12]
  return(result);
 8013c04:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8013c06:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8013c08:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8013c0a:	683b      	ldr	r3, [r7, #0]
 8013c0c:	687a      	ldr	r2, [r7, #4]
 8013c0e:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	685a      	ldr	r2, [r3, #4]
 8013c14:	683b      	ldr	r3, [r7, #0]
 8013c16:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	683a      	ldr	r2, [r7, #0]
 8013c1c:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8013c1e:	683b      	ldr	r3, [r7, #0]
 8013c20:	685b      	ldr	r3, [r3, #4]
 8013c22:	683a      	ldr	r2, [r7, #0]
 8013c24:	601a      	str	r2, [r3, #0]
 8013c26:	697b      	ldr	r3, [r7, #20]
 8013c28:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013c2a:	693b      	ldr	r3, [r7, #16]
 8013c2c:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8013c30:	bf00      	nop
 8013c32:	371c      	adds	r7, #28
 8013c34:	46bd      	mov	sp, r7
 8013c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c3a:	4770      	bx	lr

08013c3c <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8013c3c:	b480      	push	{r7}
 8013c3e:	b087      	sub	sp, #28
 8013c40:	af00      	add	r7, sp, #0
 8013c42:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013c44:	f3ef 8310 	mrs	r3, PRIMASK
 8013c48:	60fb      	str	r3, [r7, #12]
  return(result);
 8013c4a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8013c4c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8013c4e:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	685b      	ldr	r3, [r3, #4]
 8013c54:	687a      	ldr	r2, [r7, #4]
 8013c56:	6812      	ldr	r2, [r2, #0]
 8013c58:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8013c5a:	687b      	ldr	r3, [r7, #4]
 8013c5c:	681b      	ldr	r3, [r3, #0]
 8013c5e:	687a      	ldr	r2, [r7, #4]
 8013c60:	6852      	ldr	r2, [r2, #4]
 8013c62:	605a      	str	r2, [r3, #4]
 8013c64:	697b      	ldr	r3, [r7, #20]
 8013c66:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013c68:	693b      	ldr	r3, [r7, #16]
 8013c6a:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8013c6e:	bf00      	nop
 8013c70:	371c      	adds	r7, #28
 8013c72:	46bd      	mov	sp, r7
 8013c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c78:	4770      	bx	lr

08013c7a <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8013c7a:	b580      	push	{r7, lr}
 8013c7c:	b086      	sub	sp, #24
 8013c7e:	af00      	add	r7, sp, #0
 8013c80:	6078      	str	r0, [r7, #4]
 8013c82:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013c84:	f3ef 8310 	mrs	r3, PRIMASK
 8013c88:	60fb      	str	r3, [r7, #12]
  return(result);
 8013c8a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8013c8c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8013c8e:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	681a      	ldr	r2, [r3, #0]
 8013c94:	683b      	ldr	r3, [r7, #0]
 8013c96:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	681b      	ldr	r3, [r3, #0]
 8013c9c:	4618      	mov	r0, r3
 8013c9e:	f7ff ffcd 	bl	8013c3c <LST_remove_node>
 8013ca2:	697b      	ldr	r3, [r7, #20]
 8013ca4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013ca6:	693b      	ldr	r3, [r7, #16]
 8013ca8:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8013cac:	bf00      	nop
 8013cae:	3718      	adds	r7, #24
 8013cb0:	46bd      	mov	sp, r7
 8013cb2:	bd80      	pop	{r7, pc}

08013cb4 <otThreadSetEnabled>:
extern otHandleActiveScanResult otHandleActiveScanResultCb;
extern otReceiveDiagnosticGetCallback otReceiveDiagnosticGetCb;


OTAPI otError OTCALL otThreadSetEnabled(otInstance *aInstance, bool aEnabled)
{
 8013cb4:	b580      	push	{r7, lr}
 8013cb6:	b084      	sub	sp, #16
 8013cb8:	af00      	add	r7, sp, #0
 8013cba:	6078      	str	r0, [r7, #4]
 8013cbc:	460b      	mov	r3, r1
 8013cbe:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 8013cc0:	f001 fa2e 	bl	8015120 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013cc4:	f001 f9ca 	bl	801505c <THREAD_Get_OTCmdPayloadBuffer>
 8013cc8:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_ENABLED;
 8013cca:	68fb      	ldr	r3, [r7, #12]
 8013ccc:	2200      	movs	r2, #0
 8013cce:	f042 0242 	orr.w	r2, r2, #66	; 0x42
 8013cd2:	701a      	strb	r2, [r3, #0]
 8013cd4:	2200      	movs	r2, #0
 8013cd6:	705a      	strb	r2, [r3, #1]
 8013cd8:	2200      	movs	r2, #0
 8013cda:	709a      	strb	r2, [r3, #2]
 8013cdc:	2200      	movs	r2, #0
 8013cde:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8013ce0:	68fb      	ldr	r3, [r7, #12]
 8013ce2:	2200      	movs	r2, #0
 8013ce4:	f042 0201 	orr.w	r2, r2, #1
 8013ce8:	711a      	strb	r2, [r3, #4]
 8013cea:	2200      	movs	r2, #0
 8013cec:	715a      	strb	r2, [r3, #5]
 8013cee:	2200      	movs	r2, #0
 8013cf0:	719a      	strb	r2, [r3, #6]
 8013cf2:	2200      	movs	r2, #0
 8013cf4:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 8013cf6:	78fa      	ldrb	r2, [r7, #3]
 8013cf8:	68fb      	ldr	r3, [r7, #12]
 8013cfa:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8013cfc:	f001 f9d2 	bl	80150a4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013d00:	f001 f9b8 	bl	8015074 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013d04:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8013d06:	68fb      	ldr	r3, [r7, #12]
 8013d08:	689b      	ldr	r3, [r3, #8]
 8013d0a:	b2db      	uxtb	r3, r3
}
 8013d0c:	4618      	mov	r0, r3
 8013d0e:	3710      	adds	r7, #16
 8013d10:	46bd      	mov	sp, r7
 8013d12:	bd80      	pop	{r7, pc}

08013d14 <otThreadSetExtendedPanId>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otExtendedPanId *)p_ot_req->Data[0];
}

OTAPI otError OTCALL otThreadSetExtendedPanId(otInstance *aInstance, const otExtendedPanId *aExtendedPanId)
{
 8013d14:	b580      	push	{r7, lr}
 8013d16:	b084      	sub	sp, #16
 8013d18:	af00      	add	r7, sp, #0
 8013d1a:	6078      	str	r0, [r7, #4]
 8013d1c:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8013d1e:	f001 f9ff 	bl	8015120 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013d22:	f001 f99b 	bl	801505c <THREAD_Get_OTCmdPayloadBuffer>
 8013d26:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_EXTPANID;
 8013d28:	68fb      	ldr	r3, [r7, #12]
 8013d2a:	2200      	movs	r2, #0
 8013d2c:	f042 024b 	orr.w	r2, r2, #75	; 0x4b
 8013d30:	701a      	strb	r2, [r3, #0]
 8013d32:	2200      	movs	r2, #0
 8013d34:	705a      	strb	r2, [r3, #1]
 8013d36:	2200      	movs	r2, #0
 8013d38:	709a      	strb	r2, [r3, #2]
 8013d3a:	2200      	movs	r2, #0
 8013d3c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8013d3e:	68fb      	ldr	r3, [r7, #12]
 8013d40:	2200      	movs	r2, #0
 8013d42:	f042 0201 	orr.w	r2, r2, #1
 8013d46:	711a      	strb	r2, [r3, #4]
 8013d48:	2200      	movs	r2, #0
 8013d4a:	715a      	strb	r2, [r3, #5]
 8013d4c:	2200      	movs	r2, #0
 8013d4e:	719a      	strb	r2, [r3, #6]
 8013d50:	2200      	movs	r2, #0
 8013d52:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aExtendedPanId;
 8013d54:	683a      	ldr	r2, [r7, #0]
 8013d56:	68fb      	ldr	r3, [r7, #12]
 8013d58:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8013d5a:	f001 f9a3 	bl	80150a4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013d5e:	f001 f989 	bl	8015074 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013d62:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8013d64:	68fb      	ldr	r3, [r7, #12]
 8013d66:	689b      	ldr	r3, [r3, #8]
 8013d68:	b2db      	uxtb	r3, r3
}
 8013d6a:	4618      	mov	r0, r3
 8013d6c:	3710      	adds	r7, #16
 8013d6e:	46bd      	mov	sp, r7
 8013d70:	bd80      	pop	{r7, pc}

08013d72 <otThreadSetMasterKey>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otMasterKey *)p_ot_req->Data[0];
}

OTAPI otError OTCALL otThreadSetMasterKey(otInstance *aInstance, const otMasterKey *aKey)
{
 8013d72:	b580      	push	{r7, lr}
 8013d74:	b084      	sub	sp, #16
 8013d76:	af00      	add	r7, sp, #0
 8013d78:	6078      	str	r0, [r7, #4]
 8013d7a:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8013d7c:	f001 f9d0 	bl	8015120 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013d80:	f001 f96c 	bl	801505c <THREAD_Get_OTCmdPayloadBuffer>
 8013d84:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_MASTER_KEY;
 8013d86:	68fb      	ldr	r3, [r7, #12]
 8013d88:	2200      	movs	r2, #0
 8013d8a:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8013d8e:	701a      	strb	r2, [r3, #0]
 8013d90:	2200      	movs	r2, #0
 8013d92:	705a      	strb	r2, [r3, #1]
 8013d94:	2200      	movs	r2, #0
 8013d96:	709a      	strb	r2, [r3, #2]
 8013d98:	2200      	movs	r2, #0
 8013d9a:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8013d9c:	68fb      	ldr	r3, [r7, #12]
 8013d9e:	2200      	movs	r2, #0
 8013da0:	f042 0201 	orr.w	r2, r2, #1
 8013da4:	711a      	strb	r2, [r3, #4]
 8013da6:	2200      	movs	r2, #0
 8013da8:	715a      	strb	r2, [r3, #5]
 8013daa:	2200      	movs	r2, #0
 8013dac:	719a      	strb	r2, [r3, #6]
 8013dae:	2200      	movs	r2, #0
 8013db0:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aKey;
 8013db2:	683a      	ldr	r2, [r7, #0]
 8013db4:	68fb      	ldr	r3, [r7, #12]
 8013db6:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8013db8:	f001 f974 	bl	80150a4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013dbc:	f001 f95a 	bl	8015074 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013dc0:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8013dc2:	68fb      	ldr	r3, [r7, #12]
 8013dc4:	689b      	ldr	r3, [r3, #8]
 8013dc6:	b2db      	uxtb	r3, r3
}
 8013dc8:	4618      	mov	r0, r3
 8013dca:	3710      	adds	r7, #16
 8013dcc:	46bd      	mov	sp, r7
 8013dce:	bd80      	pop	{r7, pc}

08013dd0 <otThreadSetNetworkName>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (char *)p_ot_req->Data[0];
}

OTAPI otError OTCALL otThreadSetNetworkName(otInstance *aInstance, const char *aNetworkName)
{
 8013dd0:	b580      	push	{r7, lr}
 8013dd2:	b084      	sub	sp, #16
 8013dd4:	af00      	add	r7, sp, #0
 8013dd6:	6078      	str	r0, [r7, #4]
 8013dd8:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8013dda:	f001 f9a1 	bl	8015120 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013dde:	f001 f93d 	bl	801505c <THREAD_Get_OTCmdPayloadBuffer>
 8013de2:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_NETWORK_NAME;
 8013de4:	68fb      	ldr	r3, [r7, #12]
 8013de6:	2200      	movs	r2, #0
 8013de8:	f042 0256 	orr.w	r2, r2, #86	; 0x56
 8013dec:	701a      	strb	r2, [r3, #0]
 8013dee:	2200      	movs	r2, #0
 8013df0:	705a      	strb	r2, [r3, #1]
 8013df2:	2200      	movs	r2, #0
 8013df4:	709a      	strb	r2, [r3, #2]
 8013df6:	2200      	movs	r2, #0
 8013df8:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8013dfa:	68fb      	ldr	r3, [r7, #12]
 8013dfc:	2200      	movs	r2, #0
 8013dfe:	f042 0201 	orr.w	r2, r2, #1
 8013e02:	711a      	strb	r2, [r3, #4]
 8013e04:	2200      	movs	r2, #0
 8013e06:	715a      	strb	r2, [r3, #5]
 8013e08:	2200      	movs	r2, #0
 8013e0a:	719a      	strb	r2, [r3, #6]
 8013e0c:	2200      	movs	r2, #0
 8013e0e:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aNetworkName;
 8013e10:	683a      	ldr	r2, [r7, #0]
 8013e12:	68fb      	ldr	r3, [r7, #12]
 8013e14:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8013e16:	f001 f945 	bl	80150a4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013e1a:	f001 f92b 	bl	8015074 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013e1e:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8013e20:	68fb      	ldr	r3, [r7, #12]
 8013e22:	689b      	ldr	r3, [r3, #8]
 8013e24:	b2db      	uxtb	r3, r3
}
 8013e26:	4618      	mov	r0, r3
 8013e28:	3710      	adds	r7, #16
 8013e2a:	46bd      	mov	sp, r7
 8013e2c:	bd80      	pop	{r7, pc}

08013e2e <otThreadGetDeviceRole>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

OTAPI otDeviceRole OTCALL otThreadGetDeviceRole(otInstance *aInstance)
{
 8013e2e:	b580      	push	{r7, lr}
 8013e30:	b084      	sub	sp, #16
 8013e32:	af00      	add	r7, sp, #0
 8013e34:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8013e36:	f001 f973 	bl	8015120 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013e3a:	f001 f90f 	bl	801505c <THREAD_Get_OTCmdPayloadBuffer>
 8013e3e:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_DEVICE_ROLE;
 8013e40:	68fb      	ldr	r3, [r7, #12]
 8013e42:	2200      	movs	r2, #0
 8013e44:	f042 025e 	orr.w	r2, r2, #94	; 0x5e
 8013e48:	701a      	strb	r2, [r3, #0]
 8013e4a:	2200      	movs	r2, #0
 8013e4c:	705a      	strb	r2, [r3, #1]
 8013e4e:	2200      	movs	r2, #0
 8013e50:	709a      	strb	r2, [r3, #2]
 8013e52:	2200      	movs	r2, #0
 8013e54:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 8013e56:	68fb      	ldr	r3, [r7, #12]
 8013e58:	2200      	movs	r2, #0
 8013e5a:	711a      	strb	r2, [r3, #4]
 8013e5c:	2200      	movs	r2, #0
 8013e5e:	715a      	strb	r2, [r3, #5]
 8013e60:	2200      	movs	r2, #0
 8013e62:	719a      	strb	r2, [r3, #6]
 8013e64:	2200      	movs	r2, #0
 8013e66:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 8013e68:	f001 f91c 	bl	80150a4 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013e6c:	f001 f902 	bl	8015074 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013e70:	60f8      	str	r0, [r7, #12]
  return (otDeviceRole)p_ot_req->Data[0];
 8013e72:	68fb      	ldr	r3, [r7, #12]
 8013e74:	689b      	ldr	r3, [r3, #8]
 8013e76:	b2db      	uxtb	r3, r3
}
 8013e78:	4618      	mov	r0, r3
 8013e7a:	3710      	adds	r7, #16
 8013e7c:	46bd      	mov	sp, r7
 8013e7e:	bd80      	pop	{r7, pc}

08013e80 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 8013e80:	b580      	push	{r7, lr}
 8013e82:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8013e84:	f001 fbd0 	bl	8015628 <HW_IPCC_Enable>

  return;
 8013e88:	bf00      	nop
}
 8013e8a:	bd80      	pop	{r7, pc}

08013e8c <TL_Init>:


void TL_Init( void )
{
 8013e8c:	b580      	push	{r7, lr}
 8013e8e:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8013e90:	4b0f      	ldr	r3, [pc, #60]	; (8013ed0 <TL_Init+0x44>)
 8013e92:	4a10      	ldr	r2, [pc, #64]	; (8013ed4 <TL_Init+0x48>)
 8013e94:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8013e96:	4b0e      	ldr	r3, [pc, #56]	; (8013ed0 <TL_Init+0x44>)
 8013e98:	4a0f      	ldr	r2, [pc, #60]	; (8013ed8 <TL_Init+0x4c>)
 8013e9a:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8013e9c:	4b0c      	ldr	r3, [pc, #48]	; (8013ed0 <TL_Init+0x44>)
 8013e9e:	4a0f      	ldr	r2, [pc, #60]	; (8013edc <TL_Init+0x50>)
 8013ea0:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8013ea2:	4b0b      	ldr	r3, [pc, #44]	; (8013ed0 <TL_Init+0x44>)
 8013ea4:	4a0e      	ldr	r2, [pc, #56]	; (8013ee0 <TL_Init+0x54>)
 8013ea6:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_sys_table = &TL_SysTable;
 8013ea8:	4b09      	ldr	r3, [pc, #36]	; (8013ed0 <TL_Init+0x44>)
 8013eaa:	4a0e      	ldr	r2, [pc, #56]	; (8013ee4 <TL_Init+0x58>)
 8013eac:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8013eae:	4b08      	ldr	r3, [pc, #32]	; (8013ed0 <TL_Init+0x44>)
 8013eb0:	4a0d      	ldr	r2, [pc, #52]	; (8013ee8 <TL_Init+0x5c>)
 8013eb2:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8013eb4:	4b06      	ldr	r3, [pc, #24]	; (8013ed0 <TL_Init+0x44>)
 8013eb6:	4a0d      	ldr	r2, [pc, #52]	; (8013eec <TL_Init+0x60>)
 8013eb8:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8013eba:	4b05      	ldr	r3, [pc, #20]	; (8013ed0 <TL_Init+0x44>)
 8013ebc:	4a0c      	ldr	r2, [pc, #48]	; (8013ef0 <TL_Init+0x64>)
 8013ebe:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8013ec0:	4b03      	ldr	r3, [pc, #12]	; (8013ed0 <TL_Init+0x44>)
 8013ec2:	4a0c      	ldr	r2, [pc, #48]	; (8013ef4 <TL_Init+0x68>)
 8013ec4:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8013ec6:	f001 fbbf 	bl	8015648 <HW_IPCC_Init>

  return;
 8013eca:	bf00      	nop
}
 8013ecc:	bd80      	pop	{r7, pc}
 8013ece:	bf00      	nop
 8013ed0:	20030000 	.word	0x20030000
 8013ed4:	20030024 	.word	0x20030024
 8013ed8:	20030044 	.word	0x20030044
 8013edc:	20030054 	.word	0x20030054
 8013ee0:	20030060 	.word	0x20030060
 8013ee4:	20030068 	.word	0x20030068
 8013ee8:	20030070 	.word	0x20030070
 8013eec:	2003008c 	.word	0x2003008c
 8013ef0:	20030090 	.word	0x20030090
 8013ef4:	2003009c 	.word	0x2003009c

08013ef8 <HW_IPCC_BLE_RxEvtNot>:

  return 0;
}

void HW_IPCC_BLE_RxEvtNot(void)
{
 8013ef8:	b580      	push	{r7, lr}
 8013efa:	b082      	sub	sp, #8
 8013efc:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8013efe:	e009      	b.n	8013f14 <HW_IPCC_BLE_RxEvtNot+0x1c>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8013f00:	1d3b      	adds	r3, r7, #4
 8013f02:	4619      	mov	r1, r3
 8013f04:	4808      	ldr	r0, [pc, #32]	; (8013f28 <HW_IPCC_BLE_RxEvtNot+0x30>)
 8013f06:	f7ff feb8 	bl	8013c7a <LST_remove_head>

    BLE_IoBusEvtCallBackFunction(phcievt);
 8013f0a:	4b08      	ldr	r3, [pc, #32]	; (8013f2c <HW_IPCC_BLE_RxEvtNot+0x34>)
 8013f0c:	681b      	ldr	r3, [r3, #0]
 8013f0e:	687a      	ldr	r2, [r7, #4]
 8013f10:	4610      	mov	r0, r2
 8013f12:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8013f14:	4804      	ldr	r0, [pc, #16]	; (8013f28 <HW_IPCC_BLE_RxEvtNot+0x30>)
 8013f16:	f7ff fe29 	bl	8013b6c <LST_is_empty>
 8013f1a:	4603      	mov	r3, r0
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d0ef      	beq.n	8013f00 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8013f20:	bf00      	nop
}
 8013f22:	3708      	adds	r7, #8
 8013f24:	46bd      	mov	sp, r7
 8013f26:	bd80      	pop	{r7, pc}
 8013f28:	20030828 	.word	0x20030828
 8013f2c:	2002749c 	.word	0x2002749c

08013f30 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8013f30:	b580      	push	{r7, lr}
 8013f32:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8013f34:	4b02      	ldr	r3, [pc, #8]	; (8013f40 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8013f36:	681b      	ldr	r3, [r3, #0]
 8013f38:	4798      	blx	r3

  return;
 8013f3a:	bf00      	nop
}
 8013f3c:	bd80      	pop	{r7, pc}
 8013f3e:	bf00      	nop
 8013f40:	200274a0 	.word	0x200274a0

08013f44 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8013f44:	b580      	push	{r7, lr}
 8013f46:	b084      	sub	sp, #16
 8013f48:	af00      	add	r7, sp, #0
 8013f4a:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8013f50:	480d      	ldr	r0, [pc, #52]	; (8013f88 <TL_SYS_Init+0x44>)
 8013f52:	f7ff fdfb 	bl	8013b4c <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8013f56:	4b0d      	ldr	r3, [pc, #52]	; (8013f8c <TL_SYS_Init+0x48>)
 8013f58:	68db      	ldr	r3, [r3, #12]
 8013f5a:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8013f5c:	68fb      	ldr	r3, [r7, #12]
 8013f5e:	689a      	ldr	r2, [r3, #8]
 8013f60:	68bb      	ldr	r3, [r7, #8]
 8013f62:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8013f64:	68bb      	ldr	r3, [r7, #8]
 8013f66:	4a08      	ldr	r2, [pc, #32]	; (8013f88 <TL_SYS_Init+0x44>)
 8013f68:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8013f6a:	f001 fb9b 	bl	80156a4 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8013f6e:	68fb      	ldr	r3, [r7, #12]
 8013f70:	681b      	ldr	r3, [r3, #0]
 8013f72:	4a07      	ldr	r2, [pc, #28]	; (8013f90 <TL_SYS_Init+0x4c>)
 8013f74:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8013f76:	68fb      	ldr	r3, [r7, #12]
 8013f78:	685b      	ldr	r3, [r3, #4]
 8013f7a:	4a06      	ldr	r2, [pc, #24]	; (8013f94 <TL_SYS_Init+0x50>)
 8013f7c:	6013      	str	r3, [r2, #0]

  return 0;
 8013f7e:	2300      	movs	r3, #0
}
 8013f80:	4618      	mov	r0, r3
 8013f82:	3710      	adds	r7, #16
 8013f84:	46bd      	mov	sp, r7
 8013f86:	bd80      	pop	{r7, pc}
 8013f88:	20030830 	.word	0x20030830
 8013f8c:	20030000 	.word	0x20030000
 8013f90:	200274a4 	.word	0x200274a4
 8013f94:	200274a8 	.word	0x200274a8

08013f98 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8013f98:	b580      	push	{r7, lr}
 8013f9a:	b082      	sub	sp, #8
 8013f9c:	af00      	add	r7, sp, #0
 8013f9e:	6078      	str	r0, [r7, #4]
 8013fa0:	460b      	mov	r3, r1
 8013fa2:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8013fa4:	4b05      	ldr	r3, [pc, #20]	; (8013fbc <TL_SYS_SendCmd+0x24>)
 8013fa6:	68db      	ldr	r3, [r3, #12]
 8013fa8:	681b      	ldr	r3, [r3, #0]
 8013faa:	2210      	movs	r2, #16
 8013fac:	721a      	strb	r2, [r3, #8]

  HW_IPCC_SYS_SendCmd();
 8013fae:	f001 fb83 	bl	80156b8 <HW_IPCC_SYS_SendCmd>

  return 0;
 8013fb2:	2300      	movs	r3, #0
}
 8013fb4:	4618      	mov	r0, r3
 8013fb6:	3708      	adds	r7, #8
 8013fb8:	46bd      	mov	sp, r7
 8013fba:	bd80      	pop	{r7, pc}
 8013fbc:	20030000 	.word	0x20030000

08013fc0 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8013fc0:	b580      	push	{r7, lr}
 8013fc2:	af00      	add	r7, sp, #0
  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8013fc4:	4b04      	ldr	r3, [pc, #16]	; (8013fd8 <HW_IPCC_SYS_CmdEvtNot+0x18>)
 8013fc6:	681b      	ldr	r3, [r3, #0]
 8013fc8:	4a04      	ldr	r2, [pc, #16]	; (8013fdc <HW_IPCC_SYS_CmdEvtNot+0x1c>)
 8013fca:	68d2      	ldr	r2, [r2, #12]
 8013fcc:	6812      	ldr	r2, [r2, #0]
 8013fce:	4610      	mov	r0, r2
 8013fd0:	4798      	blx	r3

  return;
 8013fd2:	bf00      	nop
}
 8013fd4:	bd80      	pop	{r7, pc}
 8013fd6:	bf00      	nop
 8013fd8:	200274a4 	.word	0x200274a4
 8013fdc:	20030000 	.word	0x20030000

08013fe0 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8013fe0:	b580      	push	{r7, lr}
 8013fe2:	b082      	sub	sp, #8
 8013fe4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8013fe6:	e009      	b.n	8013ffc <HW_IPCC_SYS_EvtNot+0x1c>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8013fe8:	1d3b      	adds	r3, r7, #4
 8013fea:	4619      	mov	r1, r3
 8013fec:	4808      	ldr	r0, [pc, #32]	; (8014010 <HW_IPCC_SYS_EvtNot+0x30>)
 8013fee:	f7ff fe44 	bl	8013c7a <LST_remove_head>
    SYS_EVT_IoBusCallBackFunction( p_evt );
 8013ff2:	4b08      	ldr	r3, [pc, #32]	; (8014014 <HW_IPCC_SYS_EvtNot+0x34>)
 8013ff4:	681b      	ldr	r3, [r3, #0]
 8013ff6:	687a      	ldr	r2, [r7, #4]
 8013ff8:	4610      	mov	r0, r2
 8013ffa:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8013ffc:	4804      	ldr	r0, [pc, #16]	; (8014010 <HW_IPCC_SYS_EvtNot+0x30>)
 8013ffe:	f7ff fdb5 	bl	8013b6c <LST_is_empty>
 8014002:	4603      	mov	r3, r0
 8014004:	2b00      	cmp	r3, #0
 8014006:	d0ef      	beq.n	8013fe8 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8014008:	bf00      	nop
}
 801400a:	3708      	adds	r7, #8
 801400c:	46bd      	mov	sp, r7
 801400e:	bd80      	pop	{r7, pc}
 8014010:	20030830 	.word	0x20030830
 8014014:	200274a8 	.word	0x200274a8

08014018 <TL_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void TL_THREAD_Init( TL_TH_Config_t *p_Config )
{
 8014018:	b580      	push	{r7, lr}
 801401a:	b084      	sub	sp, #16
 801401c:	af00      	add	r7, sp, #0
 801401e:	6078      	str	r0, [r7, #4]
  MB_ThreadTable_t  * p_thread_table;

  p_thread_table = TL_RefTable.p_thread_table;
 8014020:	4b0a      	ldr	r3, [pc, #40]	; (801404c <TL_THREAD_Init+0x34>)
 8014022:	689b      	ldr	r3, [r3, #8]
 8014024:	60fb      	str	r3, [r7, #12]

  p_thread_table->clicmdrsp_buffer = p_Config->p_ThreadCliRspBuffer;
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	685a      	ldr	r2, [r3, #4]
 801402a:	68fb      	ldr	r3, [r7, #12]
 801402c:	605a      	str	r2, [r3, #4]
  p_thread_table->otcmdrsp_buffer = p_Config->p_ThreadOtCmdRspBuffer;
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	681a      	ldr	r2, [r3, #0]
 8014032:	68fb      	ldr	r3, [r7, #12]
 8014034:	609a      	str	r2, [r3, #8]
  p_thread_table->notack_buffer = p_Config->p_ThreadNotAckBuffer;
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	689a      	ldr	r2, [r3, #8]
 801403a:	68fb      	ldr	r3, [r7, #12]
 801403c:	601a      	str	r2, [r3, #0]

  HW_IPCC_THREAD_Init();
 801403e:	f001 fb61 	bl	8015704 <HW_IPCC_THREAD_Init>

  return;
 8014042:	bf00      	nop
}
 8014044:	3710      	adds	r7, #16
 8014046:	46bd      	mov	sp, r7
 8014048:	bd80      	pop	{r7, pc}
 801404a:	bf00      	nop
 801404c:	20030000 	.word	0x20030000

08014050 <TL_OT_SendCmd>:

void TL_OT_SendCmd( void )
{
 8014050:	b580      	push	{r7, lr}
 8014052:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->otcmdrsp_buffer))->cmdserial.type = TL_OTCMD_PKT_TYPE;
 8014054:	4b04      	ldr	r3, [pc, #16]	; (8014068 <TL_OT_SendCmd+0x18>)
 8014056:	689b      	ldr	r3, [r3, #8]
 8014058:	689b      	ldr	r3, [r3, #8]
 801405a:	2208      	movs	r2, #8
 801405c:	721a      	strb	r2, [r3, #8]

  HW_IPCC_OT_SendCmd();
 801405e:	f001 fb5f 	bl	8015720 <HW_IPCC_OT_SendCmd>

  return;
 8014062:	bf00      	nop
}
 8014064:	bd80      	pop	{r7, pc}
 8014066:	bf00      	nop
 8014068:	20030000 	.word	0x20030000

0801406c <TL_CLI_SendCmd>:

void TL_CLI_SendCmd( void )
{
 801406c:	b580      	push	{r7, lr}
 801406e:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->clicmdrsp_buffer))->cmdserial.type = TL_CLICMD_PKT_TYPE;
 8014070:	4b04      	ldr	r3, [pc, #16]	; (8014084 <TL_CLI_SendCmd+0x18>)
 8014072:	689b      	ldr	r3, [r3, #8]
 8014074:	685b      	ldr	r3, [r3, #4]
 8014076:	220a      	movs	r2, #10
 8014078:	721a      	strb	r2, [r3, #8]

  HW_IPCC_CLI_SendCmd();
 801407a:	f001 fb5f 	bl	801573c <HW_IPCC_CLI_SendCmd>

  return;
 801407e:	bf00      	nop
}
 8014080:	bd80      	pop	{r7, pc}
 8014082:	bf00      	nop
 8014084:	20030000 	.word	0x20030000

08014088 <TL_THREAD_SendAck>:

void TL_THREAD_SendAck ( void )
{
 8014088:	b580      	push	{r7, lr}
 801408a:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 801408c:	4b04      	ldr	r3, [pc, #16]	; (80140a0 <TL_THREAD_SendAck+0x18>)
 801408e:	689b      	ldr	r3, [r3, #8]
 8014090:	681b      	ldr	r3, [r3, #0]
 8014092:	220d      	movs	r2, #13
 8014094:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_SendAck();
 8014096:	f001 fb5b 	bl	8015750 <HW_IPCC_THREAD_SendAck>

  return;
 801409a:	bf00      	nop
}
 801409c:	bd80      	pop	{r7, pc}
 801409e:	bf00      	nop
 80140a0:	20030000 	.word	0x20030000

080140a4 <TL_THREAD_CliSendAck>:

void TL_THREAD_CliSendAck ( void )
{
 80140a4:	b580      	push	{r7, lr}
 80140a6:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 80140a8:	4b04      	ldr	r3, [pc, #16]	; (80140bc <TL_THREAD_CliSendAck+0x18>)
 80140aa:	689b      	ldr	r3, [r3, #8]
 80140ac:	681b      	ldr	r3, [r3, #0]
 80140ae:	220d      	movs	r2, #13
 80140b0:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_CliSendAck();
 80140b2:	f001 fb5b 	bl	801576c <HW_IPCC_THREAD_CliSendAck>

  return;
 80140b6:	bf00      	nop
}
 80140b8:	bd80      	pop	{r7, pc}
 80140ba:	bf00      	nop
 80140bc:	20030000 	.word	0x20030000

080140c0 <HW_IPCC_OT_CmdEvtNot>:

void HW_IPCC_OT_CmdEvtNot(void)
{
 80140c0:	b580      	push	{r7, lr}
 80140c2:	af00      	add	r7, sp, #0
  TL_OT_CmdEvtReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->otcmdrsp_buffer) );
 80140c4:	4b03      	ldr	r3, [pc, #12]	; (80140d4 <HW_IPCC_OT_CmdEvtNot+0x14>)
 80140c6:	689b      	ldr	r3, [r3, #8]
 80140c8:	689b      	ldr	r3, [r3, #8]
 80140ca:	4618      	mov	r0, r3
 80140cc:	f001 f80e 	bl	80150ec <TL_OT_CmdEvtReceived>

  return;
 80140d0:	bf00      	nop
}
 80140d2:	bd80      	pop	{r7, pc}
 80140d4:	20030000 	.word	0x20030000

080140d8 <HW_IPCC_THREAD_EvtNot>:

void HW_IPCC_THREAD_EvtNot( void )
{
 80140d8:	b580      	push	{r7, lr}
 80140da:	af00      	add	r7, sp, #0
  TL_THREAD_NotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->notack_buffer) );
 80140dc:	4b03      	ldr	r3, [pc, #12]	; (80140ec <HW_IPCC_THREAD_EvtNot+0x14>)
 80140de:	689b      	ldr	r3, [r3, #8]
 80140e0:	681b      	ldr	r3, [r3, #0]
 80140e2:	4618      	mov	r0, r3
 80140e4:	f001 f80c 	bl	8015100 <TL_THREAD_NotReceived>

  return;
 80140e8:	bf00      	nop
}
 80140ea:	bd80      	pop	{r7, pc}
 80140ec:	20030000 	.word	0x20030000

080140f0 <HW_IPCC_THREAD_CliEvtNot>:

void HW_IPCC_THREAD_CliEvtNot( void )
{
 80140f0:	b580      	push	{r7, lr}
 80140f2:	af00      	add	r7, sp, #0
  TL_THREAD_CliNotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->clicmdrsp_buffer) );
 80140f4:	4b03      	ldr	r3, [pc, #12]	; (8014104 <HW_IPCC_THREAD_CliEvtNot+0x14>)
 80140f6:	689b      	ldr	r3, [r3, #8]
 80140f8:	685b      	ldr	r3, [r3, #4]
 80140fa:	4618      	mov	r0, r3
 80140fc:	f001 f8ae 	bl	801525c <TL_THREAD_CliNotReceived>

  return;
 8014100:	bf00      	nop
}
 8014102:	bd80      	pop	{r7, pc}
 8014104:	20030000 	.word	0x20030000

08014108 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8014108:	b580      	push	{r7, lr}
 801410a:	b082      	sub	sp, #8
 801410c:	af00      	add	r7, sp, #0
 801410e:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8014110:	4817      	ldr	r0, [pc, #92]	; (8014170 <TL_MM_Init+0x68>)
 8014112:	f7ff fd1b 	bl	8013b4c <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8014116:	4817      	ldr	r0, [pc, #92]	; (8014174 <TL_MM_Init+0x6c>)
 8014118:	f7ff fd18 	bl	8013b4c <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 801411c:	4b16      	ldr	r3, [pc, #88]	; (8014178 <TL_MM_Init+0x70>)
 801411e:	691b      	ldr	r3, [r3, #16]
 8014120:	4a16      	ldr	r2, [pc, #88]	; (801417c <TL_MM_Init+0x74>)
 8014122:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8014124:	4b15      	ldr	r3, [pc, #84]	; (801417c <TL_MM_Init+0x74>)
 8014126:	681b      	ldr	r3, [r3, #0]
 8014128:	687a      	ldr	r2, [r7, #4]
 801412a:	6892      	ldr	r2, [r2, #8]
 801412c:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 801412e:	4b13      	ldr	r3, [pc, #76]	; (801417c <TL_MM_Init+0x74>)
 8014130:	681b      	ldr	r3, [r3, #0]
 8014132:	687a      	ldr	r2, [r7, #4]
 8014134:	68d2      	ldr	r2, [r2, #12]
 8014136:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8014138:	4b10      	ldr	r3, [pc, #64]	; (801417c <TL_MM_Init+0x74>)
 801413a:	681b      	ldr	r3, [r3, #0]
 801413c:	4a0c      	ldr	r2, [pc, #48]	; (8014170 <TL_MM_Init+0x68>)
 801413e:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8014140:	4b0e      	ldr	r3, [pc, #56]	; (801417c <TL_MM_Init+0x74>)
 8014142:	681b      	ldr	r3, [r3, #0]
 8014144:	687a      	ldr	r2, [r7, #4]
 8014146:	6812      	ldr	r2, [r2, #0]
 8014148:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 801414a:	4b0c      	ldr	r3, [pc, #48]	; (801417c <TL_MM_Init+0x74>)
 801414c:	681b      	ldr	r3, [r3, #0]
 801414e:	687a      	ldr	r2, [r7, #4]
 8014150:	6852      	ldr	r2, [r2, #4]
 8014152:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8014154:	4b09      	ldr	r3, [pc, #36]	; (801417c <TL_MM_Init+0x74>)
 8014156:	681b      	ldr	r3, [r3, #0]
 8014158:	687a      	ldr	r2, [r7, #4]
 801415a:	6912      	ldr	r2, [r2, #16]
 801415c:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 801415e:	4b07      	ldr	r3, [pc, #28]	; (801417c <TL_MM_Init+0x74>)
 8014160:	681b      	ldr	r3, [r3, #0]
 8014162:	687a      	ldr	r2, [r7, #4]
 8014164:	6952      	ldr	r2, [r2, #20]
 8014166:	619a      	str	r2, [r3, #24]

  return;
 8014168:	bf00      	nop
}
 801416a:	3708      	adds	r7, #8
 801416c:	46bd      	mov	sp, r7
 801416e:	bd80      	pop	{r7, pc}
 8014170:	200300a8 	.word	0x200300a8
 8014174:	20027494 	.word	0x20027494
 8014178:	20030000 	.word	0x20030000
 801417c:	200274ac 	.word	0x200274ac

08014180 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8014180:	b580      	push	{r7, lr}
 8014182:	b082      	sub	sp, #8
 8014184:	af00      	add	r7, sp, #0
 8014186:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8014188:	6879      	ldr	r1, [r7, #4]
 801418a:	4805      	ldr	r0, [pc, #20]	; (80141a0 <TL_MM_EvtDone+0x20>)
 801418c:	f7ff fd32 	bl	8013bf4 <LST_insert_tail>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8014190:	4804      	ldr	r0, [pc, #16]	; (80141a4 <TL_MM_EvtDone+0x24>)
 8014192:	f001 fb1d 	bl	80157d0 <HW_IPCC_MM_SendFreeBuf>

  return;
 8014196:	bf00      	nop
}
 8014198:	3708      	adds	r7, #8
 801419a:	46bd      	mov	sp, r7
 801419c:	bd80      	pop	{r7, pc}
 801419e:	bf00      	nop
 80141a0:	20027494 	.word	0x20027494
 80141a4:	080141a9 	.word	0x080141a9

080141a8 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 80141a8:	b580      	push	{r7, lr}
 80141aa:	b082      	sub	sp, #8
 80141ac:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80141ae:	e00c      	b.n	80141ca <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 80141b0:	1d3b      	adds	r3, r7, #4
 80141b2:	4619      	mov	r1, r3
 80141b4:	480a      	ldr	r0, [pc, #40]	; (80141e0 <SendFreeBuf+0x38>)
 80141b6:	f7ff fd60 	bl	8013c7a <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 80141ba:	4b0a      	ldr	r3, [pc, #40]	; (80141e4 <SendFreeBuf+0x3c>)
 80141bc:	691b      	ldr	r3, [r3, #16]
 80141be:	691b      	ldr	r3, [r3, #16]
 80141c0:	687a      	ldr	r2, [r7, #4]
 80141c2:	4611      	mov	r1, r2
 80141c4:	4618      	mov	r0, r3
 80141c6:	f7ff fd15 	bl	8013bf4 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80141ca:	4805      	ldr	r0, [pc, #20]	; (80141e0 <SendFreeBuf+0x38>)
 80141cc:	f7ff fcce 	bl	8013b6c <LST_is_empty>
 80141d0:	4603      	mov	r3, r0
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	d0ec      	beq.n	80141b0 <SendFreeBuf+0x8>
  }

  return;
 80141d6:	bf00      	nop
}
 80141d8:	3708      	adds	r7, #8
 80141da:	46bd      	mov	sp, r7
 80141dc:	bd80      	pop	{r7, pc}
 80141de:	bf00      	nop
 80141e0:	20027494 	.word	0x20027494
 80141e4:	20030000 	.word	0x20030000

080141e8 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 80141e8:	b580      	push	{r7, lr}
 80141ea:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 80141ec:	4805      	ldr	r0, [pc, #20]	; (8014204 <TL_TRACES_Init+0x1c>)
 80141ee:	f7ff fcad 	bl	8013b4c <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 80141f2:	4b05      	ldr	r3, [pc, #20]	; (8014208 <TL_TRACES_Init+0x20>)
 80141f4:	695b      	ldr	r3, [r3, #20]
 80141f6:	4a03      	ldr	r2, [pc, #12]	; (8014204 <TL_TRACES_Init+0x1c>)
 80141f8:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 80141fa:	f001 fb1f 	bl	801583c <HW_IPCC_TRACES_Init>

  return;
 80141fe:	bf00      	nop
}
 8014200:	bd80      	pop	{r7, pc}
 8014202:	bf00      	nop
 8014204:	200300b0 	.word	0x200300b0
 8014208:	20030000 	.word	0x20030000

0801420c <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 801420c:	b580      	push	{r7, lr}
 801420e:	b082      	sub	sp, #8
 8014210:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8014212:	e008      	b.n	8014226 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8014214:	1d3b      	adds	r3, r7, #4
 8014216:	4619      	mov	r1, r3
 8014218:	4808      	ldr	r0, [pc, #32]	; (801423c <HW_IPCC_TRACES_EvtNot+0x30>)
 801421a:	f7ff fd2e 	bl	8013c7a <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	4618      	mov	r0, r3
 8014222:	f7ec fff9 	bl	8001218 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8014226:	4805      	ldr	r0, [pc, #20]	; (801423c <HW_IPCC_TRACES_EvtNot+0x30>)
 8014228:	f7ff fca0 	bl	8013b6c <LST_is_empty>
 801422c:	4603      	mov	r3, r0
 801422e:	2b00      	cmp	r3, #0
 8014230:	d0f0      	beq.n	8014214 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8014232:	bf00      	nop
}
 8014234:	3708      	adds	r7, #8
 8014236:	46bd      	mov	sp, r7
 8014238:	bd80      	pop	{r7, pc}
 801423a:	bf00      	nop
 801423c:	200300b0 	.word	0x200300b0

08014240 <APP_THREAD_Init>:
/* USER CODE END PV */

/* Functions Definition ------------------------------------------------------*/

void APP_THREAD_Init( void )
{
 8014240:	b580      	push	{r7, lr}
 8014242:	b082      	sub	sp, #8
 8014244:	af00      	add	r7, sp, #0
  /* USER CODE END APP_THREAD_INIT_1 */

  SHCI_CmdStatus_t ThreadInitStatus;
  
  /* Check the compatibility with the Coprocessor Wireless Firmware loaded */
  APP_THREAD_CheckWirelessFirmwareInfo();
 8014246:	f000 fa21 	bl	801468c <APP_THREAD_CheckWirelessFirmwareInfo>
#if (CFG_USB_INTERFACE_ENABLE != 0)
  VCP_Init(&VcpTxBuffer[0], &VcpRxBuffer[0]);
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */

  /* Register cmdbuffer */
  APP_THREAD_RegisterCmdBuffer(&ThreadOtCmdBuffer);
 801424a:	480e      	ldr	r0, [pc, #56]	; (8014284 <APP_THREAD_Init+0x44>)
 801424c:	f000 fef6 	bl	801503c <APP_THREAD_RegisterCmdBuffer>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_DISABLE);
 8014250:	2101      	movs	r1, #1
 8014252:	2002      	movs	r0, #2
 8014254:	f001 fb1a 	bl	801588c <UTIL_LPM_SetOffMode>

  /* Init config buffer and call TL_THREAD_Init */
  APP_THREAD_TL_THREAD_INIT();
 8014258:	f000 ffe8 	bl	801522c <APP_THREAD_TL_THREAD_INIT>

  /* Configure UART for sending CLI command from M4 */
  APP_THREAD_Init_UART_CLI();
 801425c:	f000 ffd4 	bl	8015208 <APP_THREAD_Init_UART_CLI>

  /* Send Thread start system cmd to M0 */
  ThreadInitStatus = SHCI_C2_THREAD_Init();
 8014260:	f7ff fa89 	bl	8013776 <SHCI_C2_THREAD_Init>
 8014264:	4603      	mov	r3, r0
 8014266:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN APP_THREAD_INIT_TIMER */

  /* USER CODE END APP_THREAD_INIT_TIMER */

  /* Create the different FreeRTOS tasks requested to run this Thread application*/
  OsTaskMsgM0ToM4Id = osThreadNew(APP_THREAD_FreeRTOSProcessMsgM0ToM4Task, NULL,&ThreadMsgM0ToM4Process_attr);
 8014268:	4a07      	ldr	r2, [pc, #28]	; (8014288 <APP_THREAD_Init+0x48>)
 801426a:	2100      	movs	r1, #0
 801426c:	4807      	ldr	r0, [pc, #28]	; (801428c <APP_THREAD_Init+0x4c>)
 801426e:	f7f9 fedd 	bl	800e02c <osThreadNew>
 8014272:	4602      	mov	r2, r0
 8014274:	4b06      	ldr	r3, [pc, #24]	; (8014290 <APP_THREAD_Init+0x50>)
 8014276:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN APP_THREAD_INIT_FREERTOS */

  /* USER CODE END APP_THREAD_INIT_FREERTOS */

  /* Configure the Thread device at start */
  APP_THREAD_DeviceConfig();
 8014278:	f000 f892 	bl	80143a0 <APP_THREAD_DeviceConfig>

  /* USER CODE BEGIN APP_THREAD_INIT_2 */

  /* USER CODE END APP_THREAD_INIT_2 */
}
 801427c:	bf00      	nop
 801427e:	3708      	adds	r7, #8
 8014280:	46bd      	mov	sp, r7
 8014282:	bd80      	pop	{r7, pc}
 8014284:	20030838 	.word	0x20030838
 8014288:	080178d0 	.word	0x080178d0
 801428c:	08014749 	.word	0x08014749
 8014290:	200275c4 	.word	0x200275c4

08014294 <APP_THREAD_Error>:
  * @param  ErrId :
  * @param  ErrCode
  * @retval None
  */
void APP_THREAD_Error(uint32_t ErrId, uint32_t ErrCode)
{
 8014294:	b580      	push	{r7, lr}
 8014296:	b082      	sub	sp, #8
 8014298:	af00      	add	r7, sp, #0
 801429a:	6078      	str	r0, [r7, #4]
 801429c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN APP_THREAD_Error_1 */

  /* USER CODE END APP_THREAD_Error_1 */
  switch(ErrId)
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	2b1a      	cmp	r3, #26
 80142a2:	d861      	bhi.n	8014368 <APP_THREAD_Error+0xd4>
 80142a4:	a201      	add	r2, pc, #4	; (adr r2, 80142ac <APP_THREAD_Error+0x18>)
 80142a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80142aa:	bf00      	nop
 80142ac:	08014319 	.word	0x08014319
 80142b0:	08014323 	.word	0x08014323
 80142b4:	0801432d 	.word	0x0801432d
 80142b8:	08014337 	.word	0x08014337
 80142bc:	08014341 	.word	0x08014341
 80142c0:	0801434b 	.word	0x0801434b
 80142c4:	08014355 	.word	0x08014355
 80142c8:	08014369 	.word	0x08014369
 80142cc:	08014369 	.word	0x08014369
 80142d0:	08014369 	.word	0x08014369
 80142d4:	08014369 	.word	0x08014369
 80142d8:	08014369 	.word	0x08014369
 80142dc:	08014369 	.word	0x08014369
 80142e0:	08014369 	.word	0x08014369
 80142e4:	08014369 	.word	0x08014369
 80142e8:	08014369 	.word	0x08014369
 80142ec:	08014369 	.word	0x08014369
 80142f0:	08014369 	.word	0x08014369
 80142f4:	08014369 	.word	0x08014369
 80142f8:	08014369 	.word	0x08014369
 80142fc:	08014369 	.word	0x08014369
 8014300:	08014369 	.word	0x08014369
 8014304:	08014369 	.word	0x08014369
 8014308:	08014369 	.word	0x08014369
 801430c:	08014369 	.word	0x08014369
 8014310:	08014369 	.word	0x08014369
 8014314:	0801435f 	.word	0x0801435f
  {
  case ERR_REC_MULTI_MSG_FROM_M0 :
    APP_THREAD_TraceError("ERROR : ERR_REC_MULTI_MSG_FROM_M0 ", ErrCode);
 8014318:	6839      	ldr	r1, [r7, #0]
 801431a:	4818      	ldr	r0, [pc, #96]	; (801437c <APP_THREAD_Error+0xe8>)
 801431c:	f000 f9aa 	bl	8014674 <APP_THREAD_TraceError>
    break;
 8014320:	e027      	b.n	8014372 <APP_THREAD_Error+0xde>
  case ERR_THREAD_SET_STATE_CB :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_STATE_CB ",ErrCode);
 8014322:	6839      	ldr	r1, [r7, #0]
 8014324:	4816      	ldr	r0, [pc, #88]	; (8014380 <APP_THREAD_Error+0xec>)
 8014326:	f000 f9a5 	bl	8014674 <APP_THREAD_TraceError>
    break;
 801432a:	e022      	b.n	8014372 <APP_THREAD_Error+0xde>
  case ERR_THREAD_SET_CHANNEL :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_CHANNEL ",ErrCode);
 801432c:	6839      	ldr	r1, [r7, #0]
 801432e:	4815      	ldr	r0, [pc, #84]	; (8014384 <APP_THREAD_Error+0xf0>)
 8014330:	f000 f9a0 	bl	8014674 <APP_THREAD_TraceError>
    break;
 8014334:	e01d      	b.n	8014372 <APP_THREAD_Error+0xde>
  case ERR_THREAD_SET_PANID :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_PANID ",ErrCode);
 8014336:	6839      	ldr	r1, [r7, #0]
 8014338:	4813      	ldr	r0, [pc, #76]	; (8014388 <APP_THREAD_Error+0xf4>)
 801433a:	f000 f99b 	bl	8014674 <APP_THREAD_TraceError>
    break;
 801433e:	e018      	b.n	8014372 <APP_THREAD_Error+0xde>
  case ERR_THREAD_IPV6_ENABLE :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_IPV6_ENABLE ",ErrCode);
 8014340:	6839      	ldr	r1, [r7, #0]
 8014342:	4812      	ldr	r0, [pc, #72]	; (801438c <APP_THREAD_Error+0xf8>)
 8014344:	f000 f996 	bl	8014674 <APP_THREAD_TraceError>
    break;
 8014348:	e013      	b.n	8014372 <APP_THREAD_Error+0xde>
  case ERR_THREAD_START :
    APP_THREAD_TraceError("ERROR: ERR_THREAD_START ", ErrCode);
 801434a:	6839      	ldr	r1, [r7, #0]
 801434c:	4810      	ldr	r0, [pc, #64]	; (8014390 <APP_THREAD_Error+0xfc>)
 801434e:	f000 f991 	bl	8014674 <APP_THREAD_TraceError>
    break;
 8014352:	e00e      	b.n	8014372 <APP_THREAD_Error+0xde>
  case ERR_THREAD_ERASE_PERSISTENT_INFO :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_ERASE_PERSISTENT_INFO ",ErrCode);
 8014354:	6839      	ldr	r1, [r7, #0]
 8014356:	480f      	ldr	r0, [pc, #60]	; (8014394 <APP_THREAD_Error+0x100>)
 8014358:	f000 f98c 	bl	8014674 <APP_THREAD_TraceError>
    break;
 801435c:	e009      	b.n	8014372 <APP_THREAD_Error+0xde>
  case ERR_THREAD_CHECK_WIRELESS :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_CHECK_WIRELESS ",ErrCode);
 801435e:	6839      	ldr	r1, [r7, #0]
 8014360:	480d      	ldr	r0, [pc, #52]	; (8014398 <APP_THREAD_Error+0x104>)
 8014362:	f000 f987 	bl	8014674 <APP_THREAD_TraceError>
    break;
 8014366:	e004      	b.n	8014372 <APP_THREAD_Error+0xde>
  /* USER CODE BEGIN APP_THREAD_Error_2 */

  /* USER CODE END APP_THREAD_Error_2 */
  default :
    APP_THREAD_TraceError("ERROR Unknown ", 0);
 8014368:	2100      	movs	r1, #0
 801436a:	480c      	ldr	r0, [pc, #48]	; (801439c <APP_THREAD_Error+0x108>)
 801436c:	f000 f982 	bl	8014674 <APP_THREAD_TraceError>
    break;
 8014370:	bf00      	nop
  }
}
 8014372:	bf00      	nop
 8014374:	3708      	adds	r7, #8
 8014376:	46bd      	mov	sp, r7
 8014378:	bd80      	pop	{r7, pc}
 801437a:	bf00      	nop
 801437c:	080172cc 	.word	0x080172cc
 8014380:	080172f0 	.word	0x080172f0
 8014384:	08017314 	.word	0x08017314
 8014388:	08017334 	.word	0x08017334
 801438c:	08017354 	.word	0x08017354
 8014390:	08017374 	.word	0x08017374
 8014394:	08017390 	.word	0x08017390
 8014398:	080173bc 	.word	0x080173bc
 801439c:	080173e0 	.word	0x080173e0

080143a0 <APP_THREAD_DeviceConfig>:
 * @brief Thread initialization.
 * @param  None
 * @retval None
 */
static void APP_THREAD_DeviceConfig(void)
{
 80143a0:	b590      	push	{r4, r7, lr}
 80143a2:	b083      	sub	sp, #12
 80143a4:	af00      	add	r7, sp, #0
  otError error;
  error = otInstanceErasePersistentInfo(NULL);
 80143a6:	2000      	movs	r0, #0
 80143a8:	f7fe fdf2 	bl	8012f90 <otInstanceErasePersistentInfo>
 80143ac:	4603      	mov	r3, r0
 80143ae:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 80143b0:	79fb      	ldrb	r3, [r7, #7]
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	d004      	beq.n	80143c0 <APP_THREAD_DeviceConfig+0x20>
  {
    APP_THREAD_Error(ERR_THREAD_ERASE_PERSISTENT_INFO,error);
 80143b6:	79fb      	ldrb	r3, [r7, #7]
 80143b8:	4619      	mov	r1, r3
 80143ba:	2006      	movs	r0, #6
 80143bc:	f7ff ff6a 	bl	8014294 <APP_THREAD_Error>
  }
  otInstanceFinalize(NULL);
 80143c0:	2000      	movs	r0, #0
 80143c2:	f7fe fd88 	bl	8012ed6 <otInstanceFinalize>
  otInstanceInitSingle();
 80143c6:	f7fe fd5f 	bl	8012e88 <otInstanceInitSingle>
  error = otSetStateChangedCallback(NULL, APP_THREAD_StateNotif, NULL);
 80143ca:	2200      	movs	r2, #0
 80143cc:	497b      	ldr	r1, [pc, #492]	; (80145bc <APP_THREAD_DeviceConfig+0x21c>)
 80143ce:	2000      	movs	r0, #0
 80143d0:	f7fe fda8 	bl	8012f24 <otSetStateChangedCallback>
 80143d4:	4603      	mov	r3, r0
 80143d6:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 80143d8:	79fb      	ldrb	r3, [r7, #7]
 80143da:	2b00      	cmp	r3, #0
 80143dc:	d004      	beq.n	80143e8 <APP_THREAD_DeviceConfig+0x48>
  {
    APP_THREAD_Error(ERR_THREAD_SET_STATE_CB,error);
 80143de:	79fb      	ldrb	r3, [r7, #7]
 80143e0:	4619      	mov	r1, r3
 80143e2:	2001      	movs	r0, #1
 80143e4:	f7ff ff56 	bl	8014294 <APP_THREAD_Error>
  }
  error = otLinkSetChannel(NULL, C_CHANNEL_NB);
 80143e8:	2117      	movs	r1, #23
 80143ea:	2000      	movs	r0, #0
 80143ec:	f7fe fe91 	bl	8013112 <otLinkSetChannel>
 80143f0:	4603      	mov	r3, r0
 80143f2:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 80143f4:	79fb      	ldrb	r3, [r7, #7]
 80143f6:	2b00      	cmp	r3, #0
 80143f8:	d004      	beq.n	8014404 <APP_THREAD_DeviceConfig+0x64>
  {
    APP_THREAD_Error(ERR_THREAD_SET_CHANNEL,error);
 80143fa:	79fb      	ldrb	r3, [r7, #7]
 80143fc:	4619      	mov	r1, r3
 80143fe:	2002      	movs	r0, #2
 8014400:	f7ff ff48 	bl	8014294 <APP_THREAD_Error>
  }
  error = otLinkSetPanId(NULL, C_PANID);
 8014404:	f241 2134 	movw	r1, #4660	; 0x1234
 8014408:	2000      	movs	r0, #0
 801440a:	f7fe feb2 	bl	8013172 <otLinkSetPanId>
 801440e:	4603      	mov	r3, r0
 8014410:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8014412:	79fb      	ldrb	r3, [r7, #7]
 8014414:	2b00      	cmp	r3, #0
 8014416:	d004      	beq.n	8014422 <APP_THREAD_DeviceConfig+0x82>
  {
    APP_THREAD_Error(ERR_THREAD_SET_PANID,error);
 8014418:	79fb      	ldrb	r3, [r7, #7]
 801441a:	4619      	mov	r1, r3
 801441c:	2003      	movs	r0, #3
 801441e:	f7ff ff39 	bl	8014294 <APP_THREAD_Error>
  }
  error = otIp6SetEnabled(NULL, true);
 8014422:	2101      	movs	r1, #1
 8014424:	2000      	movs	r0, #0
 8014426:	f7fe fddc 	bl	8012fe2 <otIp6SetEnabled>
 801442a:	4603      	mov	r3, r0
 801442c:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 801442e:	79fb      	ldrb	r3, [r7, #7]
 8014430:	2b00      	cmp	r3, #0
 8014432:	d004      	beq.n	801443e <APP_THREAD_DeviceConfig+0x9e>
  {
    APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE,error);
 8014434:	79fb      	ldrb	r3, [r7, #7]
 8014436:	4619      	mov	r1, r3
 8014438:	2004      	movs	r0, #4
 801443a:	f7ff ff2b 	bl	8014294 <APP_THREAD_Error>
  }
  error = otThreadSetEnabled(NULL, true);
 801443e:	2101      	movs	r1, #1
 8014440:	2000      	movs	r0, #0
 8014442:	f7ff fc37 	bl	8013cb4 <otThreadSetEnabled>
 8014446:	4603      	mov	r3, r0
 8014448:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 801444a:	79fb      	ldrb	r3, [r7, #7]
 801444c:	2b00      	cmp	r3, #0
 801444e:	d004      	beq.n	801445a <APP_THREAD_DeviceConfig+0xba>
  {
    APP_THREAD_Error(ERR_THREAD_START,error);
 8014450:	79fb      	ldrb	r3, [r7, #7]
 8014452:	4619      	mov	r1, r3
 8014454:	2005      	movs	r0, #5
 8014456:	f7ff ff1d 	bl	8014294 <APP_THREAD_Error>
  }

  /* USER CODE BEGIN DEVICECONFIG */
	error = otThreadSetEnabled(NULL, false);
 801445a:	2100      	movs	r1, #0
 801445c:	2000      	movs	r0, #0
 801445e:	f7ff fc29 	bl	8013cb4 <otThreadSetEnabled>
 8014462:	4603      	mov	r3, r0
 8014464:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 8014466:	79fb      	ldrb	r3, [r7, #7]
 8014468:	2b00      	cmp	r3, #0
 801446a:	d004      	beq.n	8014476 <APP_THREAD_DeviceConfig+0xd6>
		APP_THREAD_Error(ERR_THREAD_START, error);
 801446c:	79fb      	ldrb	r3, [r7, #7]
 801446e:	4619      	mov	r1, r3
 8014470:	2005      	movs	r0, #5
 8014472:	f7ff ff0f 	bl	8014294 <APP_THREAD_Error>
	}

	error = otIp6SetEnabled(NULL, false);
 8014476:	2100      	movs	r1, #0
 8014478:	2000      	movs	r0, #0
 801447a:	f7fe fdb2 	bl	8012fe2 <otIp6SetEnabled>
 801447e:	4603      	mov	r3, r0
 8014480:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 8014482:	79fb      	ldrb	r3, [r7, #7]
 8014484:	2b00      	cmp	r3, #0
 8014486:	d004      	beq.n	8014492 <APP_THREAD_DeviceConfig+0xf2>
		APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE, error);
 8014488:	79fb      	ldrb	r3, [r7, #7]
 801448a:	4619      	mov	r1, r3
 801448c:	2004      	movs	r0, #4
 801448e:	f7ff ff01 	bl	8014294 <APP_THREAD_Error>
	}

	error = otPlatRadioSetTransmitPower(NULL, TRANSMIT_POWER);
 8014492:	2106      	movs	r1, #6
 8014494:	2000      	movs	r0, #0
 8014496:	f7ff f93b 	bl	8013710 <otPlatRadioSetTransmitPower>
 801449a:	4603      	mov	r3, r0
 801449c:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 801449e:	79fb      	ldrb	r3, [r7, #7]
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d004      	beq.n	80144ae <APP_THREAD_DeviceConfig+0x10e>
		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
 80144a4:	79fb      	ldrb	r3, [r7, #7]
 80144a6:	4619      	mov	r1, r3
 80144a8:	2002      	movs	r0, #2
 80144aa:	f7ff fef3 	bl	8014294 <APP_THREAD_Error>
	}

	otChildSupervisionSetCheckTimeout(NULL, CHILD_SUPERVISION_TIMEOUT);
 80144ae:	2103      	movs	r1, #3
 80144b0:	2000      	movs	r0, #0
 80144b2:	f7fe f97f 	bl	80127b4 <otChildSupervisionSetCheckTimeout>
	otChildSupervisionSetInterval(NULL, CHILD_SUPERVISION_INTERVAL);
 80144b6:	2102      	movs	r1, #2
 80144b8:	2000      	movs	r0, #0
 80144ba:	f7fe f94c 	bl	8012756 <otChildSupervisionSetInterval>

//   error = otIp6AddressFromString("ff12::1", &multicastAddr);
//   error = otIp6SubscribeMulticastAddress(NULL, &multicastAddr);

	error = otThreadSetMasterKey(NULL, &masterKey);
 80144be:	4940      	ldr	r1, [pc, #256]	; (80145c0 <APP_THREAD_DeviceConfig+0x220>)
 80144c0:	2000      	movs	r0, #0
 80144c2:	f7ff fc56 	bl	8013d72 <otThreadSetMasterKey>
 80144c6:	4603      	mov	r3, r0
 80144c8:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 80144ca:	79fb      	ldrb	r3, [r7, #7]
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d004      	beq.n	80144da <APP_THREAD_DeviceConfig+0x13a>
		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
 80144d0:	79fb      	ldrb	r3, [r7, #7]
 80144d2:	4619      	mov	r1, r3
 80144d4:	2002      	movs	r0, #2
 80144d6:	f7ff fedd 	bl	8014294 <APP_THREAD_Error>
	}

	error = otThreadSetNetworkName(NULL, networkName);
 80144da:	493a      	ldr	r1, [pc, #232]	; (80145c4 <APP_THREAD_DeviceConfig+0x224>)
 80144dc:	2000      	movs	r0, #0
 80144de:	f7ff fc77 	bl	8013dd0 <otThreadSetNetworkName>
 80144e2:	4603      	mov	r3, r0
 80144e4:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 80144e6:	79fb      	ldrb	r3, [r7, #7]
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	d004      	beq.n	80144f6 <APP_THREAD_DeviceConfig+0x156>
		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
 80144ec:	79fb      	ldrb	r3, [r7, #7]
 80144ee:	4619      	mov	r1, r3
 80144f0:	2002      	movs	r0, #2
 80144f2:	f7ff fecf 	bl	8014294 <APP_THREAD_Error>
	}
	error = otThreadSetExtendedPanId(NULL, &extendedPanId);
 80144f6:	4934      	ldr	r1, [pc, #208]	; (80145c8 <APP_THREAD_DeviceConfig+0x228>)
 80144f8:	2000      	movs	r0, #0
 80144fa:	f7ff fc0b 	bl	8013d14 <otThreadSetExtendedPanId>
 80144fe:	4603      	mov	r3, r0
 8014500:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 8014502:	79fb      	ldrb	r3, [r7, #7]
 8014504:	2b00      	cmp	r3, #0
 8014506:	d004      	beq.n	8014512 <APP_THREAD_DeviceConfig+0x172>
		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
 8014508:	79fb      	ldrb	r3, [r7, #7]
 801450a:	4619      	mov	r1, r3
 801450c:	2002      	movs	r0, #2
 801450e:	f7ff fec1 	bl	8014294 <APP_THREAD_Error>
	}

	error = otIp6SetEnabled(NULL, true);
 8014512:	2101      	movs	r1, #1
 8014514:	2000      	movs	r0, #0
 8014516:	f7fe fd64 	bl	8012fe2 <otIp6SetEnabled>
 801451a:	4603      	mov	r3, r0
 801451c:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 801451e:	79fb      	ldrb	r3, [r7, #7]
 8014520:	2b00      	cmp	r3, #0
 8014522:	d004      	beq.n	801452e <APP_THREAD_DeviceConfig+0x18e>
		APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE, error);
 8014524:	79fb      	ldrb	r3, [r7, #7]
 8014526:	4619      	mov	r1, r3
 8014528:	2004      	movs	r0, #4
 801452a:	f7ff feb3 	bl	8014294 <APP_THREAD_Error>
	}

	error = otThreadSetEnabled(NULL, true);
 801452e:	2101      	movs	r1, #1
 8014530:	2000      	movs	r0, #0
 8014532:	f7ff fbbf 	bl	8013cb4 <otThreadSetEnabled>
 8014536:	4603      	mov	r3, r0
 8014538:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 801453a:	79fb      	ldrb	r3, [r7, #7]
 801453c:	2b00      	cmp	r3, #0
 801453e:	d004      	beq.n	801454a <APP_THREAD_DeviceConfig+0x1aa>
		APP_THREAD_Error(ERR_THREAD_START, error);
 8014540:	79fb      	ldrb	r3, [r7, #7]
 8014542:	4619      	mov	r1, r3
 8014544:	2005      	movs	r0, #5
 8014546:	f7ff fea5 	bl	8014294 <APP_THREAD_Error>
	}

	error = otCoapStart(NULL, OT_DEFAULT_COAP_PORT);
 801454a:	f241 6133 	movw	r1, #5683	; 0x1633
 801454e:	2000      	movs	r0, #0
 8014550:	f7fe fc08 	bl	8012d64 <otCoapStart>
 8014554:	4603      	mov	r3, r0
 8014556:	71fb      	strb	r3, [r7, #7]
	//  error = otCoapAddResource(NULL, &OT_Light_Ressource);
	error = otCoapAddResource(NULL, &OT_Lights_Complex_Ressource);
 8014558:	491c      	ldr	r1, [pc, #112]	; (80145cc <APP_THREAD_DeviceConfig+0x22c>)
 801455a:	2000      	movs	r0, #0
 801455c:	f7fe fc32 	bl	8012dc4 <otCoapAddResource>
 8014560:	4603      	mov	r3, r0
 8014562:	71fb      	strb	r3, [r7, #7]
	error = otCoapAddResource(NULL, &OT_Lights_Simple_Ressource);
 8014564:	491a      	ldr	r1, [pc, #104]	; (80145d0 <APP_THREAD_DeviceConfig+0x230>)
 8014566:	2000      	movs	r0, #0
 8014568:	f7fe fc2c 	bl	8012dc4 <otCoapAddResource>
 801456c:	4603      	mov	r3, r0
 801456e:	71fb      	strb	r3, [r7, #7]
	error = otCoapAddResource(NULL, &OT_Border_Time_Ressource);
 8014570:	4918      	ldr	r1, [pc, #96]	; (80145d4 <APP_THREAD_DeviceConfig+0x234>)
 8014572:	2000      	movs	r0, #0
 8014574:	f7fe fc26 	bl	8012dc4 <otCoapAddResource>
 8014578:	4603      	mov	r3, r0
 801457a:	71fb      	strb	r3, [r7, #7]
	error = otCoapAddResource(NULL, &OT_Node_Info_Ressource);
 801457c:	4916      	ldr	r1, [pc, #88]	; (80145d8 <APP_THREAD_DeviceConfig+0x238>)
 801457e:	2000      	movs	r0, #0
 8014580:	f7fe fc20 	bl	8012dc4 <otCoapAddResource>
 8014584:	4603      	mov	r3, r0
 8014586:	71fb      	strb	r3, [r7, #7]
	  error = otCoapAddResource(NULL, &OT_RessourceFuotaProvisioning);
	  error = otCoapAddResource(NULL, &OT_RessourceFuotaParameters);
	  error = otCoapAddResource(NULL, &OT_RessourceFuotaSend);
#endif
#ifndef DONGLE_CODE
    error = otCoapAddResource(NULL, &OT_Toggle_Logging_Ressource);
 8014588:	4914      	ldr	r1, [pc, #80]	; (80145dc <APP_THREAD_DeviceConfig+0x23c>)
 801458a:	2000      	movs	r0, #0
 801458c:	f7fe fc1a 	bl	8012dc4 <otCoapAddResource>
 8014590:	4603      	mov	r3, r0
 8014592:	71fb      	strb	r3, [r7, #7]
#endif
	// set default multicast address for border router
//    otIp6AddressFromString("ff03::1", &borderRouter.ipv6);
	otIp6AddressFromString("ff03::1", &multicastAddr);
 8014594:	4912      	ldr	r1, [pc, #72]	; (80145e0 <APP_THREAD_DeviceConfig+0x240>)
 8014596:	4813      	ldr	r0, [pc, #76]	; (80145e4 <APP_THREAD_DeviceConfig+0x244>)
 8014598:	f7fe fd89 	bl	80130ae <otIp6AddressFromString>
	memcpy(&borderRouter.ipv6, &multicastAddr, sizeof(multicastAddr));
 801459c:	4a12      	ldr	r2, [pc, #72]	; (80145e8 <APP_THREAD_DeviceConfig+0x248>)
 801459e:	4b10      	ldr	r3, [pc, #64]	; (80145e0 <APP_THREAD_DeviceConfig+0x240>)
 80145a0:	4614      	mov	r4, r2
 80145a2:	6818      	ldr	r0, [r3, #0]
 80145a4:	6859      	ldr	r1, [r3, #4]
 80145a6:	689a      	ldr	r2, [r3, #8]
 80145a8:	68db      	ldr	r3, [r3, #12]
 80145aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}

	// set UID in local state variable
//	msgSendMyIP.uid = (uint32_t)  DBGMCU->IDCODE;
//	 = UID64_BASE;
	stm32UID(msgSendMyIP.uid);
 80145ac:	480f      	ldr	r0, [pc, #60]	; (80145ec <APP_THREAD_DeviceConfig+0x24c>)
 80145ae:	f000 f8e5 	bl	801477c <stm32UID>

  /* USER CODE END DEVICECONFIG */
}
 80145b2:	bf00      	nop
 80145b4:	370c      	adds	r7, #12
 80145b6:	46bd      	mov	sp, r7
 80145b8:	bd90      	pop	{r4, r7, pc}
 80145ba:	bf00      	nop
 80145bc:	080145f1 	.word	0x080145f1
 80145c0:	08017948 	.word	0x08017948
 80145c4:	08017960 	.word	0x08017960
 80145c8:	08017958 	.word	0x08017958
 80145cc:	20000088 	.word	0x20000088
 80145d0:	20000098 	.word	0x20000098
 80145d4:	200000a8 	.word	0x200000a8
 80145d8:	200000b8 	.word	0x200000b8
 80145dc:	200000c8 	.word	0x200000c8
 80145e0:	20028630 	.word	0x20028630
 80145e4:	080173f0 	.word	0x080173f0
 80145e8:	20027690 	.word	0x20027690
 80145ec:	200000f0 	.word	0x200000f0

080145f0 <APP_THREAD_StateNotif>:
 *         aContext: Context
 *
 * @retval None
 */
static void APP_THREAD_StateNotif(uint32_t NotifFlags, void *pContext)
{
 80145f0:	b590      	push	{r4, r7, lr}
 80145f2:	b083      	sub	sp, #12
 80145f4:	af00      	add	r7, sp, #0
 80145f6:	6078      	str	r0, [r7, #4]
 80145f8:	6039      	str	r1, [r7, #0]

  /* USER CODE BEGIN APP_THREAD_STATENOTIF */

  /* USER CODE END APP_THREAD_STATENOTIF */

  if ((NotifFlags & (uint32_t)OT_CHANGED_THREAD_ROLE) == (uint32_t)OT_CHANGED_THREAD_ROLE)
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	f003 0304 	and.w	r3, r3, #4
 8014600:	2b00      	cmp	r3, #0
 8014602:	d02f      	beq.n	8014664 <APP_THREAD_StateNotif+0x74>
  {
    switch (otThreadGetDeviceRole(NULL))
 8014604:	2000      	movs	r0, #0
 8014606:	f7ff fc12 	bl	8013e2e <otThreadGetDeviceRole>
 801460a:	4603      	mov	r3, r0
 801460c:	2b04      	cmp	r3, #4
 801460e:	d826      	bhi.n	801465e <APP_THREAD_StateNotif+0x6e>
 8014610:	a201      	add	r2, pc, #4	; (adr r2, 8014618 <APP_THREAD_StateNotif+0x28>)
 8014612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014616:	bf00      	nop
 8014618:	0801462d 	.word	0x0801462d
 801461c:	0801463d 	.word	0x0801463d
 8014620:	0801464d 	.word	0x0801464d
 8014624:	08014653 	.word	0x08014653
 8014628:	08014659 	.word	0x08014659
    {
    case OT_DEVICE_ROLE_DISABLED:
      /* USER CODE BEGIN OT_DEVICE_ROLE_DISABLED */
			borderRouter.epoch = 0;
 801462c:	4a10      	ldr	r2, [pc, #64]	; (8014670 <APP_THREAD_StateNotif+0x80>)
 801462e:	f04f 0300 	mov.w	r3, #0
 8014632:	f04f 0400 	mov.w	r4, #0
 8014636:	e9c2 3404 	strd	r3, r4, [r2, #16]
      /* USER CODE END OT_DEVICE_ROLE_DISABLED */
      break;
 801463a:	e014      	b.n	8014666 <APP_THREAD_StateNotif+0x76>
    case OT_DEVICE_ROLE_DETACHED:
      /* USER CODE BEGIN OT_DEVICE_ROLE_DETACHED */
			borderRouter.epoch = 0;
 801463c:	4a0c      	ldr	r2, [pc, #48]	; (8014670 <APP_THREAD_StateNotif+0x80>)
 801463e:	f04f 0300 	mov.w	r3, #0
 8014642:	f04f 0400 	mov.w	r4, #0
 8014646:	e9c2 3404 	strd	r3, r4, [r2, #16]
      /* USER CODE END OT_DEVICE_ROLE_DETACHED */
      break;
 801464a:	e00c      	b.n	8014666 <APP_THREAD_StateNotif+0x76>
#ifdef DONGLE_CODE
			BSP_LED_On(LED_GREEN);
			BSP_LED_Off(LED_RED);
			BSP_LED_Off(LED_BLUE);
#endif
			APP_THREAD_UpdateBorderRouter();
 801464c:	f000 f90a 	bl	8014864 <APP_THREAD_UpdateBorderRouter>
      /* USER CODE END OT_DEVICE_ROLE_CHILD */
      break;
 8014650:	e009      	b.n	8014666 <APP_THREAD_StateNotif+0x76>
#ifdef DONGLE_CODE
			BSP_LED_Off(LED_GREEN);
			BSP_LED_Off(LED_RED);
			BSP_LED_On(LED_BLUE);
#endif
			APP_THREAD_UpdateBorderRouter();
 8014652:	f000 f907 	bl	8014864 <APP_THREAD_UpdateBorderRouter>
      /* USER CODE END OT_DEVICE_ROLE_ROUTER */
      break;
 8014656:	e006      	b.n	8014666 <APP_THREAD_StateNotif+0x76>
#ifdef DONGLE_CODE
			BSP_LED_On(LED_GREEN);
			BSP_LED_Off(LED_RED);
			BSP_LED_On(LED_BLUE);
#endif
			APP_THREAD_UpdateBorderRouter();
 8014658:	f000 f904 	bl	8014864 <APP_THREAD_UpdateBorderRouter>
      /* USER CODE END OT_DEVICE_ROLE_LEADER */
      break;
 801465c:	e003      	b.n	8014666 <APP_THREAD_StateNotif+0x76>
    default:
      /* USER CODE BEGIN DEFAULT */
			APP_THREAD_UpdateBorderRouter();
 801465e:	f000 f901 	bl	8014864 <APP_THREAD_UpdateBorderRouter>
      /* USER CODE END DEFAULT */
      break;
 8014662:	e000      	b.n	8014666 <APP_THREAD_StateNotif+0x76>
    }
  }
 8014664:	bf00      	nop
}
 8014666:	bf00      	nop
 8014668:	370c      	adds	r7, #12
 801466a:	46bd      	mov	sp, r7
 801466c:	bd90      	pop	{r4, r7, pc}
 801466e:	bf00      	nop
 8014670:	20027690 	.word	0x20027690

08014674 <APP_THREAD_TraceError>:
  * @param  pMess  : Message associated to the error.
  * @param  ErrCode: Error code associated to the module (OpenThread or other module if any)
  * @retval None
  */
static void APP_THREAD_TraceError(const char * pMess, uint32_t ErrCode)
{
 8014674:	b480      	push	{r7}
 8014676:	b083      	sub	sp, #12
 8014678:	af00      	add	r7, sp, #0
 801467a:	6078      	str	r0, [r7, #4]
 801467c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TRACE_ERROR */

  /* USER CODE END TRACE_ERROR */
}
 801467e:	bf00      	nop
 8014680:	370c      	adds	r7, #12
 8014682:	46bd      	mov	sp, r7
 8014684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014688:	4770      	bx	lr
	...

0801468c <APP_THREAD_CheckWirelessFirmwareInfo>:
 *        and display associated informations
 * @param  None
 * @retval None
 */
static void APP_THREAD_CheckWirelessFirmwareInfo(void)
{
 801468c:	b580      	push	{r7, lr}
 801468e:	b088      	sub	sp, #32
 8014690:	af02      	add	r7, sp, #8
  WirelessFwInfo_t wireless_info_instance;
  WirelessFwInfo_t* p_wireless_info = &wireless_info_instance;
 8014692:	1d3b      	adds	r3, r7, #4
 8014694:	617b      	str	r3, [r7, #20]

  if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success)
 8014696:	6978      	ldr	r0, [r7, #20]
 8014698:	f7ff f89a 	bl	80137d0 <SHCI_GetWirelessFwInfo>
 801469c:	4603      	mov	r3, r0
 801469e:	2b00      	cmp	r3, #0
 80146a0:	d004      	beq.n	80146ac <APP_THREAD_CheckWirelessFirmwareInfo+0x20>
  {
    APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 80146a2:	2101      	movs	r1, #1
 80146a4:	201a      	movs	r0, #26
 80146a6:	f7ff fdf5 	bl	8014294 <APP_THREAD_Error>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
      break;
    }
    APP_DBG("**********************************************************");
  }
}
 80146aa:	e03d      	b.n	8014728 <APP_THREAD_CheckWirelessFirmwareInfo+0x9c>
    APP_DBG("**********************************************************");
 80146ac:	4a20      	ldr	r2, [pc, #128]	; (8014730 <APP_THREAD_CheckWirelessFirmwareInfo+0xa4>)
 80146ae:	2101      	movs	r1, #1
 80146b0:	2000      	movs	r0, #0
 80146b2:	f7f0 fefb 	bl	80054ac <logApplication>
    APP_DBG("WIRELESS COPROCESSOR FW:");
 80146b6:	4a1f      	ldr	r2, [pc, #124]	; (8014734 <APP_THREAD_CheckWirelessFirmwareInfo+0xa8>)
 80146b8:	2101      	movs	r1, #1
 80146ba:	2000      	movs	r0, #0
 80146bc:	f7f0 fef6 	bl	80054ac <logApplication>
    APP_DBG("VERSION ID = %d.%d.%d", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor, p_wireless_info->VersionSub);
 80146c0:	697b      	ldr	r3, [r7, #20]
 80146c2:	781b      	ldrb	r3, [r3, #0]
 80146c4:	4619      	mov	r1, r3
 80146c6:	697b      	ldr	r3, [r7, #20]
 80146c8:	785b      	ldrb	r3, [r3, #1]
 80146ca:	461a      	mov	r2, r3
 80146cc:	697b      	ldr	r3, [r7, #20]
 80146ce:	789b      	ldrb	r3, [r3, #2]
 80146d0:	9301      	str	r3, [sp, #4]
 80146d2:	9200      	str	r2, [sp, #0]
 80146d4:	460b      	mov	r3, r1
 80146d6:	4a18      	ldr	r2, [pc, #96]	; (8014738 <APP_THREAD_CheckWirelessFirmwareInfo+0xac>)
 80146d8:	2101      	movs	r1, #1
 80146da:	2000      	movs	r0, #0
 80146dc:	f7f0 fee6 	bl	80054ac <logApplication>
    switch(p_wireless_info->StackType)
 80146e0:	697b      	ldr	r3, [r7, #20]
 80146e2:	7a5b      	ldrb	r3, [r3, #9]
 80146e4:	2b11      	cmp	r3, #17
 80146e6:	d009      	beq.n	80146fc <APP_THREAD_CheckWirelessFirmwareInfo+0x70>
 80146e8:	2b50      	cmp	r3, #80	; 0x50
 80146ea:	d00d      	beq.n	8014708 <APP_THREAD_CheckWirelessFirmwareInfo+0x7c>
 80146ec:	2b10      	cmp	r3, #16
 80146ee:	d111      	bne.n	8014714 <APP_THREAD_CheckWirelessFirmwareInfo+0x88>
      APP_DBG("FW Type : Thread FTD");
 80146f0:	4a12      	ldr	r2, [pc, #72]	; (801473c <APP_THREAD_CheckWirelessFirmwareInfo+0xb0>)
 80146f2:	2101      	movs	r1, #1
 80146f4:	2000      	movs	r0, #0
 80146f6:	f7f0 fed9 	bl	80054ac <logApplication>
      break;
 80146fa:	e010      	b.n	801471e <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_DBG("FW Type : Thread MTD");
 80146fc:	4a10      	ldr	r2, [pc, #64]	; (8014740 <APP_THREAD_CheckWirelessFirmwareInfo+0xb4>)
 80146fe:	2101      	movs	r1, #1
 8014700:	2000      	movs	r0, #0
 8014702:	f7f0 fed3 	bl	80054ac <logApplication>
      break;
 8014706:	e00a      	b.n	801471e <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_DBG("FW Type : Static Concurrent Mode BLE/Thread");
 8014708:	4a0e      	ldr	r2, [pc, #56]	; (8014744 <APP_THREAD_CheckWirelessFirmwareInfo+0xb8>)
 801470a:	2101      	movs	r1, #1
 801470c:	2000      	movs	r0, #0
 801470e:	f7f0 fecd 	bl	80054ac <logApplication>
      break;
 8014712:	e004      	b.n	801471e <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 8014714:	2101      	movs	r1, #1
 8014716:	201a      	movs	r0, #26
 8014718:	f7ff fdbc 	bl	8014294 <APP_THREAD_Error>
      break;
 801471c:	bf00      	nop
    APP_DBG("**********************************************************");
 801471e:	4a04      	ldr	r2, [pc, #16]	; (8014730 <APP_THREAD_CheckWirelessFirmwareInfo+0xa4>)
 8014720:	2101      	movs	r1, #1
 8014722:	2000      	movs	r0, #0
 8014724:	f7f0 fec2 	bl	80054ac <logApplication>
}
 8014728:	bf00      	nop
 801472a:	3718      	adds	r7, #24
 801472c:	46bd      	mov	sp, r7
 801472e:	bd80      	pop	{r7, pc}
 8014730:	080173f8 	.word	0x080173f8
 8014734:	08017434 	.word	0x08017434
 8014738:	08017450 	.word	0x08017450
 801473c:	08017468 	.word	0x08017468
 8014740:	08017480 	.word	0x08017480
 8014744:	08017498 	.word	0x08017498

08014748 <APP_THREAD_FreeRTOSProcessMsgM0ToM4Task>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void APP_THREAD_FreeRTOSProcessMsgM0ToM4Task(void *argument)
{
 8014748:	b580      	push	{r7, lr}
 801474a:	b082      	sub	sp, #8
 801474c:	af00      	add	r7, sp, #0
 801474e:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN APP_THREAD_FREERTOS_PROCESS_MSG_M0_TO_M4_1 */

    /* USER END END APP_THREAD_FREERTOS_PROCESS_MSG_M0_TO_M4_1 */
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 8014750:	f04f 32ff 	mov.w	r2, #4294967295
 8014754:	2101      	movs	r1, #1
 8014756:	2001      	movs	r0, #1
 8014758:	f7f9 fdc6 	bl	800e2e8 <osThreadFlagsWait>
    APP_THREAD_ProcessMsgM0ToM4();
 801475c:	f000 fd98 	bl	8015290 <APP_THREAD_ProcessMsgM0ToM4>
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 8014760:	e7f6      	b.n	8014750 <APP_THREAD_FreeRTOSProcessMsgM0ToM4Task+0x8>

08014762 <APP_THREAD_FreeRTOSSendCLIToM0Task>:
  }
}

#if (CFG_FULL_LOW_POWER == 0)
static void APP_THREAD_FreeRTOSSendCLIToM0Task(void *argument)
{
 8014762:	b580      	push	{r7, lr}
 8014764:	b082      	sub	sp, #8
 8014766:	af00      	add	r7, sp, #0
 8014768:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN APP_THREAD_FREERTOS_SEND_CLI_TO_M0_1 */

    /* USER END END APP_THREAD_FREERTOS_SEND_CLI_TO_M0_1 */
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 801476a:	f04f 32ff 	mov.w	r2, #4294967295
 801476e:	2101      	movs	r1, #1
 8014770:	2001      	movs	r0, #1
 8014772:	f7f9 fdb9 	bl	800e2e8 <osThreadFlagsWait>
    Send_CLI_To_M0();
 8014776:	f000 fd0d 	bl	8015194 <Send_CLI_To_M0>
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 801477a:	e7f6      	b.n	801476a <APP_THREAD_FreeRTOSSendCLIToM0Task+0x8>

0801477c <stm32UID>:
  }
}
#endif /* (CFG_FULL_LOW_POWER == 0) */

/* USER CODE BEGIN FREERTOS_WRAPPER_FUNCTIONS */
void stm32UID(uint8_t* uid) {
 801477c:	b480      	push	{r7}
 801477e:	b085      	sub	sp, #20
 8014780:	af00      	add	r7, sp, #0
 8014782:	6078      	str	r0, [r7, #4]
  for(uint8_t i = 0; i < 12; i++) {
 8014784:	2300      	movs	r3, #0
 8014786:	73fb      	strb	r3, [r7, #15]
 8014788:	e00c      	b.n	80147a4 <stm32UID+0x28>
    uid[i] = *(volatile uint8_t *)(UID_BASE + i);
 801478a:	7bfa      	ldrb	r2, [r7, #15]
 801478c:	4b0a      	ldr	r3, [pc, #40]	; (80147b8 <stm32UID+0x3c>)
 801478e:	4413      	add	r3, r2
 8014790:	4619      	mov	r1, r3
 8014792:	7bfb      	ldrb	r3, [r7, #15]
 8014794:	687a      	ldr	r2, [r7, #4]
 8014796:	4413      	add	r3, r2
 8014798:	780a      	ldrb	r2, [r1, #0]
 801479a:	b2d2      	uxtb	r2, r2
 801479c:	701a      	strb	r2, [r3, #0]
  for(uint8_t i = 0; i < 12; i++) {
 801479e:	7bfb      	ldrb	r3, [r7, #15]
 80147a0:	3301      	adds	r3, #1
 80147a2:	73fb      	strb	r3, [r7, #15]
 80147a4:	7bfb      	ldrb	r3, [r7, #15]
 80147a6:	2b0b      	cmp	r3, #11
 80147a8:	d9ef      	bls.n	801478a <stm32UID+0xe>
    }
  }
 80147aa:	bf00      	nop
 80147ac:	3714      	adds	r7, #20
 80147ae:	46bd      	mov	sp, r7
 80147b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147b4:	4770      	bx	lr
 80147b6:	bf00      	nop
 80147b8:	1fff7590 	.word	0x1fff7590

080147bc <APP_THREAD_DummyRespHandler>:
  return;
}
#endif

static void APP_THREAD_DummyRespHandler(void *p_context, otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo, otError Result) {
 80147bc:	b480      	push	{r7}
 80147be:	b085      	sub	sp, #20
 80147c0:	af00      	add	r7, sp, #0
 80147c2:	60f8      	str	r0, [r7, #12]
 80147c4:	60b9      	str	r1, [r7, #8]
 80147c6:	607a      	str	r2, [r7, #4]
 80147c8:	603b      	str	r3, [r7, #0]
	UNUSED(p_context);
	UNUSED(pHeader);
	UNUSED(pMessage);
	UNUSED(pMessageInfo);
	UNUSED(Result);
}
 80147ca:	bf00      	nop
 80147cc:	3714      	adds	r7, #20
 80147ce:	46bd      	mov	sp, r7
 80147d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147d4:	4770      	bx	lr
	...

080147d8 <APP_THREAD_CoapRespHandler_UpdateBorderRouter>:

volatile uint16_t test_num;
static void APP_THREAD_CoapRespHandler_UpdateBorderRouter(otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo, otError Result) {
 80147d8:	b5b0      	push	{r4, r5, r7, lr}
 80147da:	b084      	sub	sp, #16
 80147dc:	af00      	add	r7, sp, #0
 80147de:	60f8      	str	r0, [r7, #12]
 80147e0:	60b9      	str	r1, [r7, #8]
 80147e2:	607a      	str	r2, [r7, #4]
 80147e4:	70fb      	strb	r3, [r7, #3]

//	taskENTER_CRITICAL();
//	test_num = otMessageGetLength(pMessage);
//	test_num = otMessageRead(pMessage, otMessageGetOffset(pMessage), &receivedSystemCal, sizeof(receivedSystemCal));

	if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &receivedSystemCal, sizeof(receivedSystemCal))
 80147e6:	68b8      	ldr	r0, [r7, #8]
 80147e8:	f7fe fd1e 	bl	8013228 <otMessageGetOffset>
 80147ec:	4603      	mov	r3, r0
 80147ee:	4619      	mov	r1, r3
 80147f0:	2318      	movs	r3, #24
 80147f2:	4a0e      	ldr	r2, [pc, #56]	; (801482c <APP_THREAD_CoapRespHandler_UpdateBorderRouter+0x54>)
 80147f4:	68b8      	ldr	r0, [r7, #8]
 80147f6:	f7fe fd7c 	bl	80132f2 <otMessageRead>
 80147fa:	4603      	mov	r3, r0
 80147fc:	2b18      	cmp	r3, #24
 80147fe:	d110      	bne.n	8014822 <APP_THREAD_CoapRespHandler_UpdateBorderRouter+0x4a>
			== sizeof(receivedSystemCal)) {

			// if successful, update border router state variable
			memcpy(&borderRouter, &receivedSystemCal, sizeof(receivedSystemCal));
 8014800:	4a0b      	ldr	r2, [pc, #44]	; (8014830 <APP_THREAD_CoapRespHandler_UpdateBorderRouter+0x58>)
 8014802:	4b0a      	ldr	r3, [pc, #40]	; (801482c <APP_THREAD_CoapRespHandler_UpdateBorderRouter+0x54>)
 8014804:	4614      	mov	r4, r2
 8014806:	461d      	mov	r5, r3
 8014808:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801480a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801480c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014810:	e884 0003 	stmia.w	r4, {r0, r1}

			// update the onboard RTC unix time
			updateRTC(borderRouter.epoch);
 8014814:	4b06      	ldr	r3, [pc, #24]	; (8014830 <APP_THREAD_CoapRespHandler_UpdateBorderRouter+0x58>)
 8014816:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 801481a:	4618      	mov	r0, r3
 801481c:	4621      	mov	r1, r4
 801481e:	f000 f995 	bl	8014b4c <updateRTC>
	}
//	taskEXIT_CRITICAL();
}
 8014822:	bf00      	nop
 8014824:	3710      	adds	r7, #16
 8014826:	46bd      	mov	sp, r7
 8014828:	bdb0      	pop	{r4, r5, r7, pc}
 801482a:	bf00      	nop
 801482c:	200276a8 	.word	0x200276a8
 8014830:	20027690 	.word	0x20027690

08014834 <APP_THREAD_DummyReqHandler>:
 * @brief Dummy request handler
 * @param
 * @retval None
 */
static void APP_THREAD_DummyReqHandler(void *p_context, otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo) {
 8014834:	b480      	push	{r7}
 8014836:	b085      	sub	sp, #20
 8014838:	af00      	add	r7, sp, #0
 801483a:	60f8      	str	r0, [r7, #12]
 801483c:	60b9      	str	r1, [r7, #8]
 801483e:	607a      	str	r2, [r7, #4]
 8014840:	603b      	str	r3, [r7, #0]
	tempMessageInfo = pMessageInfo;
 8014842:	4a06      	ldr	r2, [pc, #24]	; (801485c <APP_THREAD_DummyReqHandler+0x28>)
 8014844:	683b      	ldr	r3, [r7, #0]
 8014846:	6013      	str	r3, [r2, #0]
	receivedMessage = (otMessageInfo*) pMessage;
 8014848:	4a05      	ldr	r2, [pc, #20]	; (8014860 <APP_THREAD_DummyReqHandler+0x2c>)
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	6013      	str	r3, [r2, #0]
}
 801484e:	bf00      	nop
 8014850:	3714      	adds	r7, #20
 8014852:	46bd      	mov	sp, r7
 8014854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014858:	4770      	bx	lr
 801485a:	bf00      	nop
 801485c:	200285ec 	.word	0x200285ec
 8014860:	20028644 	.word	0x20028644

08014864 <APP_THREAD_UpdateBorderRouter>:
//volatile otNetifMulticastAddress *test_addr;
//volatile otExtAddress *test_ext_addr;
//volatile otExtAddress test_1;
//volatile otExtAddress test_2;

void APP_THREAD_UpdateBorderRouter() {
 8014864:	b580      	push	{r7, lr}
 8014866:	af00      	add	r7, sp, #0

	// if border router IP is still multicast (ff03::1), attempt to sync
	if (otIp6IsAddressEqual(&multicastAddr, &borderRouter.ipv6)) {
 8014868:	4906      	ldr	r1, [pc, #24]	; (8014884 <APP_THREAD_UpdateBorderRouter+0x20>)
 801486a:	4807      	ldr	r0, [pc, #28]	; (8014888 <APP_THREAD_UpdateBorderRouter+0x24>)
 801486c:	f7fe fbe9 	bl	8013042 <otIp6IsAddressEqual>
 8014870:	4603      	mov	r3, r0
 8014872:	2b00      	cmp	r3, #0
 8014874:	d003      	beq.n	801487e <APP_THREAD_UpdateBorderRouter+0x1a>
		APP_THREAD_SyncWithBorderRouter();
 8014876:	f000 f809 	bl	801488c <APP_THREAD_SyncWithBorderRouter>
		APP_THREAD_SendMyInfo();
 801487a:	f000 f81d 	bl	80148b8 <APP_THREAD_SendMyInfo>
	}

	// send IP to border router
	//APP_THREAD_SendMyInfo();
}
 801487e:	bf00      	nop
 8014880:	bd80      	pop	{r7, pc}
 8014882:	bf00      	nop
 8014884:	20027690 	.word	0x20027690
 8014888:	20028630 	.word	0x20028630

0801488c <APP_THREAD_SyncWithBorderRouter>:

// send a GET request to border router via multicast
void APP_THREAD_SyncWithBorderRouter() {
 801488c:	b580      	push	{r7, lr}
 801488e:	b084      	sub	sp, #16
 8014890:	af04      	add	r7, sp, #16
	APP_THREAD_SendCoapMsgForBorderSync(NULL, 0, &multicastAddr, borderSyncResource, NO_ACK, OT_COAP_CODE_GET, 1U);
 8014892:	2301      	movs	r3, #1
 8014894:	9302      	str	r3, [sp, #8]
 8014896:	2301      	movs	r3, #1
 8014898:	9301      	str	r3, [sp, #4]
 801489a:	2300      	movs	r3, #0
 801489c:	9300      	str	r3, [sp, #0]
 801489e:	4b04      	ldr	r3, [pc, #16]	; (80148b0 <APP_THREAD_SyncWithBorderRouter+0x24>)
 80148a0:	4a04      	ldr	r2, [pc, #16]	; (80148b4 <APP_THREAD_SyncWithBorderRouter+0x28>)
 80148a2:	2100      	movs	r1, #0
 80148a4:	2000      	movs	r0, #0
 80148a6:	f000 faaf 	bl	8014e08 <APP_THREAD_SendCoapMsgForBorderSync>
}
 80148aa:	bf00      	nop
 80148ac:	46bd      	mov	sp, r7
 80148ae:	bd80      	pop	{r7, pc}
 80148b0:	08017918 	.word	0x08017918
 80148b4:	20028630 	.word	0x20028630

080148b8 <APP_THREAD_SendMyInfo>:

void APP_THREAD_SendMyInfo() {
 80148b8:	b580      	push	{r7, lr}
 80148ba:	b084      	sub	sp, #16
 80148bc:	af04      	add	r7, sp, #16
////	test_1 = test_ext_addr[0];
////	test_2 = &test_ext_addr;
//
//	error = otThreadGetNextNeighborInfo(NULL, &test_neighbor_iterator, &test_info_neighbor);
	// TODO: does this need an ACK
	APP_THREAD_SendCoapMsg(&msgSendMyIP, sizeof(msgSendMyIP), &borderRouter.ipv6, nodeInfoResource, REQUEST_ACK,
 80148be:	2301      	movs	r3, #1
 80148c0:	9302      	str	r3, [sp, #8]
 80148c2:	2303      	movs	r3, #3
 80148c4:	9301      	str	r3, [sp, #4]
 80148c6:	2301      	movs	r3, #1
 80148c8:	9300      	str	r3, [sp, #0]
 80148ca:	4b04      	ldr	r3, [pc, #16]	; (80148dc <APP_THREAD_SendMyInfo+0x24>)
 80148cc:	4a04      	ldr	r2, [pc, #16]	; (80148e0 <APP_THREAD_SendMyInfo+0x28>)
 80148ce:	2120      	movs	r1, #32
 80148d0:	4804      	ldr	r0, [pc, #16]	; (80148e4 <APP_THREAD_SendMyInfo+0x2c>)
 80148d2:	f000 f9a5 	bl	8014c20 <APP_THREAD_SendCoapMsg>
			OT_COAP_CODE_PUT, 1U);
//	APP_THREAD_SendCoapUnicastMsg(NULL, NULL, borderRouter.ipv6  , borderSyncResource, 1U);
}
 80148d6:	bf00      	nop
 80148d8:	46bd      	mov	sp, r7
 80148da:	bd80      	pop	{r7, pc}
 80148dc:	08017938 	.word	0x08017938
 80148e0:	20027690 	.word	0x20027690
 80148e4:	200000d8 	.word	0x200000d8

080148e8 <APP_THREAD_SendBorderPacket>:
void APP_THREAD_SendBorderMessage(void *packet, uint8_t len) {
//	APP_THREAD_SendCoapMsg(sensorPacket, borderRouter.ipv6, borderPacket, otCoapType type);
	APP_THREAD_SendCoapMsg(packet, len, &borderRouter.ipv6, borderPacket, REQUEST_ACK, OT_COAP_CODE_PUT, 1U);
}

void APP_THREAD_SendBorderPacket(struct LogPacket *sensorPacket) {
 80148e8:	b580      	push	{r7, lr}
 80148ea:	b086      	sub	sp, #24
 80148ec:	af04      	add	r7, sp, #16
 80148ee:	6078      	str	r0, [r7, #4]
//	APP_THREAD_SendCoapMsg(sensorPacket, borderRouter.ipv6, borderPacket, otCoapType type);
	APP_THREAD_SendCoapMsg(sensorPacket, sizeof(struct LogPacket), &borderRouter.ipv6, borderPacket, NO_ACK,
 80148f0:	2301      	movs	r3, #1
 80148f2:	9302      	str	r3, [sp, #8]
 80148f4:	2303      	movs	r3, #3
 80148f6:	9301      	str	r3, [sp, #4]
 80148f8:	2300      	movs	r3, #0
 80148fa:	9300      	str	r3, [sp, #0]
 80148fc:	4b04      	ldr	r3, [pc, #16]	; (8014910 <APP_THREAD_SendBorderPacket+0x28>)
 80148fe:	4a05      	ldr	r2, [pc, #20]	; (8014914 <APP_THREAD_SendBorderPacket+0x2c>)
 8014900:	21cc      	movs	r1, #204	; 0xcc
 8014902:	6878      	ldr	r0, [r7, #4]
 8014904:	f000 f98c 	bl	8014c20 <APP_THREAD_SendCoapMsg>
			OT_COAP_CODE_PUT, 1U);

}
 8014908:	bf00      	nop
 801490a:	3708      	adds	r7, #8
 801490c:	46bd      	mov	sp, r7
 801490e:	bd80      	pop	{r7, pc}
 8014910:	08017928 	.word	0x08017928
 8014914:	20027690 	.word	0x20027690

08014918 <APP_THREAD_CoapLightsSimpleRequestHandler>:

static void APP_THREAD_CoapLightsSimpleRequestHandler(otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo) {
 8014918:	b580      	push	{r7, lr}
 801491a:	b084      	sub	sp, #16
 801491c:	af00      	add	r7, sp, #0
 801491e:	60f8      	str	r0, [r7, #12]
 8014920:	60b9      	str	r1, [r7, #8]
 8014922:	607a      	str	r2, [r7, #4]
	do {

		// if get, send response with current log message
		if (otCoapHeaderGetType(pHeader) == OT_COAP_CODE_GET) {
 8014924:	68f8      	ldr	r0, [r7, #12]
 8014926:	f7fe f8d0 	bl	8012aca <otCoapHeaderGetType>
 801492a:	4603      	mov	r3, r0
 801492c:	2b01      	cmp	r3, #1
 801492e:	d107      	bne.n	8014940 <APP_THREAD_CoapLightsSimpleRequestHandler+0x28>
			APP_THREAD_SendDataResponse(pHeader, pMessageInfo, &lightsSimpleMessage, sizeof(lightsSimpleMessage));
 8014930:	687b      	ldr	r3, [r7, #4]
 8014932:	b299      	uxth	r1, r3
 8014934:	2304      	movs	r3, #4
 8014936:	4a23      	ldr	r2, [pc, #140]	; (80149c4 <APP_THREAD_CoapLightsSimpleRequestHandler+0xac>)
 8014938:	68f8      	ldr	r0, [r7, #12]
 801493a:	f000 fb21 	bl	8014f80 <APP_THREAD_SendDataResponse>
			break;
 801493e:	e03d      	b.n	80149bc <APP_THREAD_CoapLightsSimpleRequestHandler+0xa4>
		}

		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &lightsSimpleMessage, sizeof(lightsSimpleMessage))
 8014940:	68b8      	ldr	r0, [r7, #8]
 8014942:	f7fe fc71 	bl	8013228 <otMessageGetOffset>
 8014946:	4603      	mov	r3, r0
 8014948:	4619      	mov	r1, r3
 801494a:	2304      	movs	r3, #4
 801494c:	4a1d      	ldr	r2, [pc, #116]	; (80149c4 <APP_THREAD_CoapLightsSimpleRequestHandler+0xac>)
 801494e:	68b8      	ldr	r0, [r7, #8]
 8014950:	f7fe fccf 	bl	80132f2 <otMessageRead>
 8014954:	4603      	mov	r3, r0
 8014956:	2b04      	cmp	r3, #4
 8014958:	d112      	bne.n	8014980 <APP_THREAD_CoapLightsSimpleRequestHandler+0x68>
				== 4U) {
			if ((otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_PUT)
 801495a:	68f8      	ldr	r0, [r7, #12]
 801495c:	f7fe f8e3 	bl	8012b26 <otCoapHeaderGetCode>
 8014960:	4603      	mov	r3, r0
 8014962:	2b03      	cmp	r3, #3
 8014964:	d005      	beq.n	8014972 <APP_THREAD_CoapLightsSimpleRequestHandler+0x5a>
					|| (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_POST)) {
 8014966:	68f8      	ldr	r0, [r7, #12]
 8014968:	f7fe f8dd 	bl	8012b26 <otCoapHeaderGetCode>
 801496c:	4603      	mov	r3, r0
 801496e:	2b02      	cmp	r3, #2
 8014970:	d106      	bne.n	8014980 <APP_THREAD_CoapLightsSimpleRequestHandler+0x68>
				osMessageQueuePut(lightsSimpleQueueHandle, &lightsSimpleMessage, 0U, 0U);
 8014972:	4b15      	ldr	r3, [pc, #84]	; (80149c8 <APP_THREAD_CoapLightsSimpleRequestHandler+0xb0>)
 8014974:	6818      	ldr	r0, [r3, #0]
 8014976:	2300      	movs	r3, #0
 8014978:	2200      	movs	r2, #0
 801497a:	4912      	ldr	r1, [pc, #72]	; (80149c4 <APP_THREAD_CoapLightsSimpleRequestHandler+0xac>)
 801497c:	f7fa f9c4 	bl	800ed08 <osMessageQueuePut>
			}

		}

		tempMessageInfo = pMessageInfo;
 8014980:	4a12      	ldr	r2, [pc, #72]	; (80149cc <APP_THREAD_CoapLightsSimpleRequestHandler+0xb4>)
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	6013      	str	r3, [r2, #0]
		receivedMessage = (otMessageInfo*) pMessage;
 8014986:	4a12      	ldr	r2, [pc, #72]	; (80149d0 <APP_THREAD_CoapLightsSimpleRequestHandler+0xb8>)
 8014988:	68bb      	ldr	r3, [r7, #8]
 801498a:	6013      	str	r3, [r2, #0]

		if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE) {
 801498c:	68f8      	ldr	r0, [r7, #12]
 801498e:	f7fe f89c 	bl	8012aca <otCoapHeaderGetType>
 8014992:	4603      	mov	r3, r0
 8014994:	2b00      	cmp	r3, #0
 8014996:	d107      	bne.n	80149a8 <APP_THREAD_CoapLightsSimpleRequestHandler+0x90>
			APP_THREAD_SendDataResponse(pHeader, pMessageInfo, NULL, 0);
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	b299      	uxth	r1, r3
 801499c:	2300      	movs	r3, #0
 801499e:	2200      	movs	r2, #0
 80149a0:	68f8      	ldr	r0, [r7, #12]
 80149a2:	f000 faed 	bl	8014f80 <APP_THREAD_SendDataResponse>
			break;
 80149a6:	e009      	b.n	80149bc <APP_THREAD_CoapLightsSimpleRequestHandler+0xa4>
		}

		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &OT_ReceivedCommand, 1U) != 1U) {
 80149a8:	68b8      	ldr	r0, [r7, #8]
 80149aa:	f7fe fc3d 	bl	8013228 <otMessageGetOffset>
 80149ae:	4603      	mov	r3, r0
 80149b0:	4619      	mov	r1, r3
 80149b2:	2301      	movs	r3, #1
 80149b4:	4a07      	ldr	r2, [pc, #28]	; (80149d4 <APP_THREAD_CoapLightsSimpleRequestHandler+0xbc>)
 80149b6:	68b8      	ldr	r0, [r7, #8]
 80149b8:	f7fe fc9b 	bl	80132f2 <otMessageRead>

		if (OT_ReceivedCommand == 1U) {
			//BSP_LED_Toggle(LED1);
		}
	} while (false);
}
 80149bc:	bf00      	nop
 80149be:	3710      	adds	r7, #16
 80149c0:	46bd      	mov	sp, r7
 80149c2:	bd80      	pop	{r7, pc}
 80149c4:	20027cf0 	.word	0x20027cf0
 80149c8:	200278ac 	.word	0x200278ac
 80149cc:	200285ec 	.word	0x200285ec
 80149d0:	20028644 	.word	0x20028644
 80149d4:	2002768d 	.word	0x2002768d

080149d8 <APP_THREAD_CoapToggleLoggingRequestHandler>:

#ifndef DONGLE_CODE
// request handler for when receiving a message directed at the data logging resource
static void APP_THREAD_CoapToggleLoggingRequestHandler(otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo) {
 80149d8:	b580      	push	{r7, lr}
 80149da:	b084      	sub	sp, #16
 80149dc:	af00      	add	r7, sp, #0
 80149de:	60f8      	str	r0, [r7, #12]
 80149e0:	60b9      	str	r1, [r7, #8]
 80149e2:	607a      	str	r2, [r7, #4]
	do {
		// if get, send response with current log message
		if (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_GET) {
 80149e4:	68f8      	ldr	r0, [r7, #12]
 80149e6:	f7fe f89e 	bl	8012b26 <otCoapHeaderGetCode>
 80149ea:	4603      	mov	r3, r0
 80149ec:	2b01      	cmp	r3, #1
 80149ee:	d106      	bne.n	80149fe <APP_THREAD_CoapToggleLoggingRequestHandler+0x26>
			APP_THREAD_SendDataResponse(&logMessage, sizeof(logMessage), pHeader, pMessageInfo);
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	68fa      	ldr	r2, [r7, #12]
 80149f4:	2106      	movs	r1, #6
 80149f6:	481a      	ldr	r0, [pc, #104]	; (8014a60 <APP_THREAD_CoapToggleLoggingRequestHandler+0x88>)
 80149f8:	f000 fac2 	bl	8014f80 <APP_THREAD_SendDataResponse>
			break;
 80149fc:	e02c      	b.n	8014a58 <APP_THREAD_CoapToggleLoggingRequestHandler+0x80>
		}

		// TODO : this will overwrite log message so maybe add a safer method
		if ( otMessageRead(pMessage, otMessageGetOffset(pMessage), &logMessage, sizeof(logMessage)) == sizeof(logMessage)){
 80149fe:	68b8      	ldr	r0, [r7, #8]
 8014a00:	f7fe fc12 	bl	8013228 <otMessageGetOffset>
 8014a04:	4603      	mov	r3, r0
 8014a06:	4619      	mov	r1, r3
 8014a08:	2306      	movs	r3, #6
 8014a0a:	4a15      	ldr	r2, [pc, #84]	; (8014a60 <APP_THREAD_CoapToggleLoggingRequestHandler+0x88>)
 8014a0c:	68b8      	ldr	r0, [r7, #8]
 8014a0e:	f7fe fc70 	bl	80132f2 <otMessageRead>
 8014a12:	4603      	mov	r3, r0
 8014a14:	2b06      	cmp	r3, #6
 8014a16:	d112      	bne.n	8014a3e <APP_THREAD_CoapToggleLoggingRequestHandler+0x66>
//			otMessageRead(pMessage, otMessageGetOffset(pMessage), &logMessage, sizeof(logMessage));
			// if post or put, add to queue for masterthread processing
			if ((otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_PUT)
 8014a18:	68f8      	ldr	r0, [r7, #12]
 8014a1a:	f7fe f884 	bl	8012b26 <otCoapHeaderGetCode>
 8014a1e:	4603      	mov	r3, r0
 8014a20:	2b03      	cmp	r3, #3
 8014a22:	d005      	beq.n	8014a30 <APP_THREAD_CoapToggleLoggingRequestHandler+0x58>
					|| (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_POST)) {
 8014a24:	68f8      	ldr	r0, [r7, #12]
 8014a26:	f7fe f87e 	bl	8012b26 <otCoapHeaderGetCode>
 8014a2a:	4603      	mov	r3, r0
 8014a2c:	2b02      	cmp	r3, #2
 8014a2e:	d106      	bne.n	8014a3e <APP_THREAD_CoapToggleLoggingRequestHandler+0x66>
				osMessageQueuePut(togLoggingQueueHandle, &logMessage, 0U, 0U);
 8014a30:	4b0c      	ldr	r3, [pc, #48]	; (8014a64 <APP_THREAD_CoapToggleLoggingRequestHandler+0x8c>)
 8014a32:	6818      	ldr	r0, [r3, #0]
 8014a34:	2300      	movs	r3, #0
 8014a36:	2200      	movs	r2, #0
 8014a38:	4909      	ldr	r1, [pc, #36]	; (8014a60 <APP_THREAD_CoapToggleLoggingRequestHandler+0x88>)
 8014a3a:	f7fa f965 	bl	800ed08 <osMessageQueuePut>
			}
		}


		if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE) {
 8014a3e:	68f8      	ldr	r0, [r7, #12]
 8014a40:	f7fe f843 	bl	8012aca <otCoapHeaderGetType>
 8014a44:	4603      	mov	r3, r0
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	d106      	bne.n	8014a58 <APP_THREAD_CoapToggleLoggingRequestHandler+0x80>
			APP_THREAD_SendDataResponse(NULL, 0, pHeader, pMessageInfo);
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	68fa      	ldr	r2, [r7, #12]
 8014a4e:	2100      	movs	r1, #0
 8014a50:	2000      	movs	r0, #0
 8014a52:	f000 fa95 	bl	8014f80 <APP_THREAD_SendDataResponse>
			break;
 8014a56:	bf00      	nop
		}

	} while (false);
}
 8014a58:	bf00      	nop
 8014a5a:	3710      	adds	r7, #16
 8014a5c:	46bd      	mov	sp, r7
 8014a5e:	bd80      	pop	{r7, pc}
 8014a60:	20028604 	.word	0x20028604
 8014a64:	20027cd8 	.word	0x20027cd8

08014a68 <APP_THREAD_CoapBorderTimeRequestHandler>:
#endif


// request handler for when receiving a message directed at the border router synchronizing resource
static void APP_THREAD_CoapBorderTimeRequestHandler(otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo) {
 8014a68:	b5b0      	push	{r4, r5, r7, lr}
 8014a6a:	b084      	sub	sp, #16
 8014a6c:	af00      	add	r7, sp, #0
 8014a6e:	60f8      	str	r0, [r7, #12]
 8014a70:	60b9      	str	r1, [r7, #8]
 8014a72:	607a      	str	r2, [r7, #4]
	do {
#ifdef DONGLE_CODE
		BSP_LED_Toggle(LED_RED);
#endif
		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &receivedSystemCal, sizeof(receivedSystemCal))
 8014a74:	68b8      	ldr	r0, [r7, #8]
 8014a76:	f7fe fbd7 	bl	8013228 <otMessageGetOffset>
 8014a7a:	4603      	mov	r3, r0
 8014a7c:	4619      	mov	r1, r3
 8014a7e:	2318      	movs	r3, #24
 8014a80:	4a1f      	ldr	r2, [pc, #124]	; (8014b00 <APP_THREAD_CoapBorderTimeRequestHandler+0x98>)
 8014a82:	68b8      	ldr	r0, [r7, #8]
 8014a84:	f7fe fc35 	bl	80132f2 <otMessageRead>
 8014a88:	4603      	mov	r3, r0
 8014a8a:	2b18      	cmp	r3, #24
 8014a8c:	d11c      	bne.n	8014ac8 <APP_THREAD_CoapBorderTimeRequestHandler+0x60>
				== sizeof(receivedSystemCal)) {
			// if the message was a put request, copy message over to border router info struct
			if ((otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_PUT)
 8014a8e:	68f8      	ldr	r0, [r7, #12]
 8014a90:	f7fe f849 	bl	8012b26 <otCoapHeaderGetCode>
 8014a94:	4603      	mov	r3, r0
 8014a96:	2b03      	cmp	r3, #3
 8014a98:	d005      	beq.n	8014aa6 <APP_THREAD_CoapBorderTimeRequestHandler+0x3e>
					|| (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_POST)) {
 8014a9a:	68f8      	ldr	r0, [r7, #12]
 8014a9c:	f7fe f843 	bl	8012b26 <otCoapHeaderGetCode>
 8014aa0:	4603      	mov	r3, r0
 8014aa2:	2b02      	cmp	r3, #2
 8014aa4:	d110      	bne.n	8014ac8 <APP_THREAD_CoapBorderTimeRequestHandler+0x60>

				memcpy(&borderRouter, &receivedSystemCal, sizeof(receivedSystemCal));
 8014aa6:	4a17      	ldr	r2, [pc, #92]	; (8014b04 <APP_THREAD_CoapBorderTimeRequestHandler+0x9c>)
 8014aa8:	4b15      	ldr	r3, [pc, #84]	; (8014b00 <APP_THREAD_CoapBorderTimeRequestHandler+0x98>)
 8014aaa:	4614      	mov	r4, r2
 8014aac:	461d      	mov	r5, r3
 8014aae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014ab0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014ab2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014ab6:	e884 0003 	stmia.w	r4, {r0, r1}

				// update the onboard RTC unix time
				updateRTC(borderRouter.epoch);
 8014aba:	4b12      	ldr	r3, [pc, #72]	; (8014b04 <APP_THREAD_CoapBorderTimeRequestHandler+0x9c>)
 8014abc:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8014ac0:	4618      	mov	r0, r3
 8014ac2:	4621      	mov	r1, r4
 8014ac4:	f000 f842 	bl	8014b4c <updateRTC>
			}
		}

		receivedMessage = (otMessageInfo*) pMessage;
 8014ac8:	4a0f      	ldr	r2, [pc, #60]	; (8014b08 <APP_THREAD_CoapBorderTimeRequestHandler+0xa0>)
 8014aca:	68bb      	ldr	r3, [r7, #8]
 8014acc:	6013      	str	r3, [r2, #0]

		if (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_GET) {
 8014ace:	68f8      	ldr	r0, [r7, #12]
 8014ad0:	f7fe f829 	bl	8012b26 <otCoapHeaderGetCode>
 8014ad4:	4603      	mov	r3, r0
 8014ad6:	2b01      	cmp	r3, #1
 8014ad8:	d00c      	beq.n	8014af4 <APP_THREAD_CoapBorderTimeRequestHandler+0x8c>
			//TODO: this is where you would put the return if you wanted a node to transmit BR info to other nodes
//			APP_THREAD_SendDataResponse(&borderRouter, sizeof(borderRouter), pHeader, pMessageInfo);
			break;
		}

		if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE) {
 8014ada:	68f8      	ldr	r0, [r7, #12]
 8014adc:	f7fd fff5 	bl	8012aca <otCoapHeaderGetType>
 8014ae0:	4603      	mov	r3, r0
 8014ae2:	2b00      	cmp	r3, #0
 8014ae4:	d107      	bne.n	8014af6 <APP_THREAD_CoapBorderTimeRequestHandler+0x8e>
			APP_THREAD_SendDataResponse(NULL, 0 , pHeader, pMessageInfo);
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	68fa      	ldr	r2, [r7, #12]
 8014aea:	2100      	movs	r1, #0
 8014aec:	2000      	movs	r0, #0
 8014aee:	f000 fa47 	bl	8014f80 <APP_THREAD_SendDataResponse>
			break;
 8014af2:	e000      	b.n	8014af6 <APP_THREAD_CoapBorderTimeRequestHandler+0x8e>
			break;
 8014af4:	bf00      	nop
		}

	} while (false);
}
 8014af6:	bf00      	nop
 8014af8:	3710      	adds	r7, #16
 8014afa:	46bd      	mov	sp, r7
 8014afc:	bdb0      	pop	{r4, r5, r7, pc}
 8014afe:	bf00      	nop
 8014b00:	200276a8 	.word	0x200276a8
 8014b04:	20027690 	.word	0x20027690
 8014b08:	20028644 	.word	0x20028644

08014b0c <APP_THREAD_CoapNodeInfoRequestHandler>:

// Only get requests allowed for this resource
struct sendIP_struct tempVar = {"test","test",0};
//char test_string[200] = "test";
static void APP_THREAD_CoapNodeInfoRequestHandler(otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo) {
 8014b0c:	b580      	push	{r7, lr}
 8014b0e:	b084      	sub	sp, #16
 8014b10:	af00      	add	r7, sp, #0
 8014b12:	60f8      	str	r0, [r7, #12]
 8014b14:	60b9      	str	r1, [r7, #8]
 8014b16:	607a      	str	r2, [r7, #4]
//		}

//		receivedMessage = (otMessageInfo*) pMessage;

		// send info if requested
		if (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_GET) {
 8014b18:	68f8      	ldr	r0, [r7, #12]
 8014b1a:	f7fe f804 	bl	8012b26 <otCoapHeaderGetCode>
 8014b1e:	4603      	mov	r3, r0
 8014b20:	2b01      	cmp	r3, #1
 8014b22:	d103      	bne.n	8014b2c <APP_THREAD_CoapNodeInfoRequestHandler+0x20>
//			APP_THREAD_SendDataResponse(&borderRouter, sizeof(borderRouter), pHeader, pMessageInfo);
//			APP_THREAD_SendDataResponse(&msgSendMyIP, sizeof(msgSendMyIP), pHeader, pMessageInfo);
			APP_THREAD_SendMyInfo();
 8014b24:	f7ff fec8 	bl	80148b8 <APP_THREAD_SendMyInfo>

			break;
 8014b28:	bf00      	nop
		if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE) {
			APP_THREAD_SendDataResponse(NULL, 0, pHeader, pMessageInfo);
		}

	} while (false);
}
 8014b2a:	e00b      	b.n	8014b44 <APP_THREAD_CoapNodeInfoRequestHandler+0x38>
		if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE) {
 8014b2c:	68f8      	ldr	r0, [r7, #12]
 8014b2e:	f7fd ffcc 	bl	8012aca <otCoapHeaderGetType>
 8014b32:	4603      	mov	r3, r0
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d105      	bne.n	8014b44 <APP_THREAD_CoapNodeInfoRequestHandler+0x38>
			APP_THREAD_SendDataResponse(NULL, 0, pHeader, pMessageInfo);
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	68fa      	ldr	r2, [r7, #12]
 8014b3c:	2100      	movs	r1, #0
 8014b3e:	2000      	movs	r0, #0
 8014b40:	f000 fa1e 	bl	8014f80 <APP_THREAD_SendDataResponse>
}
 8014b44:	bf00      	nop
 8014b46:	3710      	adds	r7, #16
 8014b48:	46bd      	mov	sp, r7
 8014b4a:	bd80      	pop	{r7, pc}

08014b4c <updateRTC>:

void updateRTC(time_t now) {
 8014b4c:	b580      	push	{r7, lr}
 8014b4e:	b088      	sub	sp, #32
 8014b50:	af00      	add	r7, sp, #0
 8014b52:	e9c7 0100 	strd	r0, r1, [r7]
	RTC_DateTypeDef sDate;

	// https://www.st.com/content/ccc/resource/technical/document/application_note/2a/c2/6f/74/fa/0d/46/3a/CD00015424.pdf/files/CD00015424.pdf/jcr:content/translations/en.CD00015424.pdf
//	struct tm *time_tm;

	RTC_FromEpoch(now, &sTime, &sDate);
 8014b56:	683b      	ldr	r3, [r7, #0]
 8014b58:	f107 0208 	add.w	r2, r7, #8
 8014b5c:	f107 010c 	add.w	r1, r7, #12
 8014b60:	4618      	mov	r0, r3
 8014b62:	f7f0 fa63 	bl	800502c <RTC_FromEpoch>

	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) {
 8014b66:	f107 030c 	add.w	r3, r7, #12
 8014b6a:	2200      	movs	r2, #0
 8014b6c:	4619      	mov	r1, r3
 8014b6e:	480a      	ldr	r0, [pc, #40]	; (8014b98 <updateRTC+0x4c>)
 8014b70:	f7f7 fc8d 	bl	800c48e <HAL_RTC_SetTime>
	}

	/*
	 * update the RTC
	 */
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) {
 8014b74:	f107 0308 	add.w	r3, r7, #8
 8014b78:	2200      	movs	r2, #0
 8014b7a:	4619      	mov	r1, r3
 8014b7c:	4806      	ldr	r0, [pc, #24]	; (8014b98 <updateRTC+0x4c>)
 8014b7e:	f7f7 fda6 	bl	800c6ce <HAL_RTC_SetDate>
	}

	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0x32F2); // lock it in with the backup registers
 8014b82:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8014b86:	2100      	movs	r1, #0
 8014b88:	4803      	ldr	r0, [pc, #12]	; (8014b98 <updateRTC+0x4c>)
 8014b8a:	f7f7 ff27 	bl	800c9dc <HAL_RTCEx_BKUPWrite>
}
 8014b8e:	bf00      	nop
 8014b90:	3720      	adds	r7, #32
 8014b92:	46bd      	mov	sp, r7
 8014b94:	bd80      	pop	{r7, pc}
 8014b96:	bf00      	nop
 8014b98:	2002842c 	.word	0x2002842c

08014b9c <APP_THREAD_CoapLightsComplexRequestHandler>:
//    BSP_LED_On(LED1);
//    APP_DBG(" ********* BUFFER HAS BEEN TRANFERED \r\n");
//  }
//}
static void APP_THREAD_CoapLightsComplexRequestHandler(otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo) {
 8014b9c:	b580      	push	{r7, lr}
 8014b9e:	b084      	sub	sp, #16
 8014ba0:	af00      	add	r7, sp, #0
 8014ba2:	60f8      	str	r0, [r7, #12]
 8014ba4:	60b9      	str	r1, [r7, #8]
 8014ba6:	607a      	str	r2, [r7, #4]
	do {
		//APP_THREAD_SendCoapUnicastRequest();

		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &lightMessageComplex, sizeof(lightMessageComplex))
 8014ba8:	68b8      	ldr	r0, [r7, #8]
 8014baa:	f7fe fb3d 	bl	8013228 <otMessageGetOffset>
 8014bae:	4603      	mov	r3, r0
 8014bb0:	4619      	mov	r1, r3
 8014bb2:	2312      	movs	r3, #18
 8014bb4:	4a16      	ldr	r2, [pc, #88]	; (8014c10 <APP_THREAD_CoapLightsComplexRequestHandler+0x74>)
 8014bb6:	68b8      	ldr	r0, [r7, #8]
 8014bb8:	f7fe fb9b 	bl	80132f2 <otMessageRead>
 8014bbc:	4603      	mov	r3, r0
 8014bbe:	2b12      	cmp	r3, #18
 8014bc0:	d102      	bne.n	8014bc8 <APP_THREAD_CoapLightsComplexRequestHandler+0x2c>
				== sizeof(lightMessageComplex)) {
			FrontLightsSet(&lightMessageComplex);
 8014bc2:	4813      	ldr	r0, [pc, #76]	; (8014c10 <APP_THREAD_CoapLightsComplexRequestHandler+0x74>)
 8014bc4:	f7ef fa0c 	bl	8003fe0 <FrontLightsSet>
		}

		tempMessageInfo = pMessageInfo;
 8014bc8:	4a12      	ldr	r2, [pc, #72]	; (8014c14 <APP_THREAD_CoapLightsComplexRequestHandler+0x78>)
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	6013      	str	r3, [r2, #0]
		receivedMessage = (otMessageInfo*) pMessage;
 8014bce:	4a12      	ldr	r2, [pc, #72]	; (8014c18 <APP_THREAD_CoapLightsComplexRequestHandler+0x7c>)
 8014bd0:	68bb      	ldr	r3, [r7, #8]
 8014bd2:	6013      	str	r3, [r2, #0]

		if (otCoapHeaderGetType(pHeader) != OT_COAP_TYPE_NON_CONFIRMABLE) {
 8014bd4:	68f8      	ldr	r0, [r7, #12]
 8014bd6:	f7fd ff78 	bl	8012aca <otCoapHeaderGetType>
 8014bda:	4603      	mov	r3, r0
 8014bdc:	2b10      	cmp	r3, #16
 8014bde:	d110      	bne.n	8014c02 <APP_THREAD_CoapLightsComplexRequestHandler+0x66>
			break;
		}

		if (otCoapHeaderGetCode(pHeader) != OT_COAP_CODE_PUT) {
 8014be0:	68f8      	ldr	r0, [r7, #12]
 8014be2:	f7fd ffa0 	bl	8012b26 <otCoapHeaderGetCode>
 8014be6:	4603      	mov	r3, r0
 8014be8:	2b03      	cmp	r3, #3
 8014bea:	d10c      	bne.n	8014c06 <APP_THREAD_CoapLightsComplexRequestHandler+0x6a>
			break;
		}

		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &OT_ReceivedCommand, 1U) != 1U) {
 8014bec:	68b8      	ldr	r0, [r7, #8]
 8014bee:	f7fe fb1b 	bl	8013228 <otMessageGetOffset>
 8014bf2:	4603      	mov	r3, r0
 8014bf4:	4619      	mov	r1, r3
 8014bf6:	2301      	movs	r3, #1
 8014bf8:	4a08      	ldr	r2, [pc, #32]	; (8014c1c <APP_THREAD_CoapLightsComplexRequestHandler+0x80>)
 8014bfa:	68b8      	ldr	r0, [r7, #8]
 8014bfc:	f7fe fb79 	bl	80132f2 <otMessageRead>
		if (OT_ReceivedCommand == 1U) {
			//BSP_LED_Toggle(LED1);
		}

	} while (false);
}
 8014c00:	e002      	b.n	8014c08 <APP_THREAD_CoapLightsComplexRequestHandler+0x6c>
			break;
 8014c02:	bf00      	nop
 8014c04:	e000      	b.n	8014c08 <APP_THREAD_CoapLightsComplexRequestHandler+0x6c>
			break;
 8014c06:	bf00      	nop
}
 8014c08:	bf00      	nop
 8014c0a:	3710      	adds	r7, #16
 8014c0c:	46bd      	mov	sp, r7
 8014c0e:	bd80      	pop	{r7, pc}
 8014c10:	2002861c 	.word	0x2002861c
 8014c14:	200285ec 	.word	0x200285ec
 8014c18:	20028644 	.word	0x20028644
 8014c1c:	2002768d 	.word	0x2002768d

08014c20 <APP_THREAD_SendCoapMsg>:
//  }
//}

static char empty_message[10] = "";
static void APP_THREAD_SendCoapMsg(void *message, uint16_t msgSize, otIp6Address *ipv6_addr, char *resource,
		uint8_t request_ack, otCoapCode coapCode, uint8_t msgID) {
 8014c20:	b590      	push	{r4, r7, lr}
 8014c22:	b087      	sub	sp, #28
 8014c24:	af02      	add	r7, sp, #8
 8014c26:	60f8      	str	r0, [r7, #12]
 8014c28:	607a      	str	r2, [r7, #4]
 8014c2a:	603b      	str	r3, [r7, #0]
 8014c2c:	460b      	mov	r3, r1
 8014c2e:	817b      	strh	r3, [r7, #10]
//			  multicastAddresses = otIp6GetMulticastAddresses(NULL);
//			  meshLocalEID =  otThreadGetMeshLocalEid(NULL);
//			  linkLocalIPV6 = otThreadGetLinkLocalIp6Address(NULL);

		// clear info
		memset(&OT_MessageInfo, 0, sizeof(OT_MessageInfo));
 8014c30:	222c      	movs	r2, #44	; 0x2c
 8014c32:	2100      	movs	r1, #0
 8014c34:	486c      	ldr	r0, [pc, #432]	; (8014de8 <APP_THREAD_SendCoapMsg+0x1c8>)
 8014c36:	f001 f952 	bl	8015ede <memset>

		// add destination IPv6 address to header
		// TODO : swap the below statements once ST has their shit fixed

		if(msgSize > 100){ // TODO : semd to borderRouter if the message is a log message (this is a temporary fix)
 8014c3a:	897b      	ldrh	r3, [r7, #10]
 8014c3c:	2b64      	cmp	r3, #100	; 0x64
 8014c3e:	d90c      	bls.n	8014c5a <APP_THREAD_SendCoapMsg+0x3a>
			memcpy(&OT_MessageInfo.mPeerAddr, &borderRouter.ipv6, sizeof(otIp6Address));
 8014c40:	4b69      	ldr	r3, [pc, #420]	; (8014de8 <APP_THREAD_SendCoapMsg+0x1c8>)
 8014c42:	4a6a      	ldr	r2, [pc, #424]	; (8014dec <APP_THREAD_SendCoapMsg+0x1cc>)
 8014c44:	f103 0410 	add.w	r4, r3, #16
 8014c48:	4613      	mov	r3, r2
 8014c4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014c4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			otIp6AddressFromString("fd11:22::c34c:7994:cccc:4b82", &OT_MessageInfo.mSockAddr);
 8014c50:	4965      	ldr	r1, [pc, #404]	; (8014de8 <APP_THREAD_SendCoapMsg+0x1c8>)
 8014c52:	4867      	ldr	r0, [pc, #412]	; (8014df0 <APP_THREAD_SendCoapMsg+0x1d0>)
 8014c54:	f7fe fa2b 	bl	80130ae <otIp6AddressFromString>
 8014c58:	e009      	b.n	8014c6e <APP_THREAD_SendCoapMsg+0x4e>
		}else{
			memcpy(&OT_MessageInfo.mPeerAddr, &multicastAddr, sizeof(otIp6Address));
 8014c5a:	4b63      	ldr	r3, [pc, #396]	; (8014de8 <APP_THREAD_SendCoapMsg+0x1c8>)
 8014c5c:	4a65      	ldr	r2, [pc, #404]	; (8014df4 <APP_THREAD_SendCoapMsg+0x1d4>)
 8014c5e:	f103 0410 	add.w	r4, r3, #16
 8014c62:	4613      	mov	r3, r2
 8014c64:	6818      	ldr	r0, [r3, #0]
 8014c66:	6859      	ldr	r1, [r3, #4]
 8014c68:	689a      	ldr	r2, [r3, #8]
 8014c6a:	68db      	ldr	r3, [r3, #12]
 8014c6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
//			  otIp6AddressFromString("fd11:22::c34c:7994:19f2:4b82", &OT_MessageInfo.mSockAddr);

//			  otIp6AddressFromString("fd11:22::c34c:7994:cccc:4b82", &OT_MessageInfo.mSockAddr);

		// populate message information
		OT_MessageInfo.mInterfaceId = OT_NETIF_INTERFACE_ID_THREAD;
 8014c6e:	4b5e      	ldr	r3, [pc, #376]	; (8014de8 <APP_THREAD_SendCoapMsg+0x1c8>)
 8014c70:	2201      	movs	r2, #1
 8014c72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		OT_MessageInfo.mPeerPort = OT_DEFAULT_COAP_PORT;
 8014c76:	4b5c      	ldr	r3, [pc, #368]	; (8014de8 <APP_THREAD_SendCoapMsg+0x1c8>)
 8014c78:	f241 6233 	movw	r2, #5683	; 0x1633
 8014c7c:	845a      	strh	r2, [r3, #34]	; 0x22
		OT_MessageInfo.mHopLimit = 64;
 8014c7e:	4b5a      	ldr	r3, [pc, #360]	; (8014de8 <APP_THREAD_SendCoapMsg+0x1c8>)
 8014c80:	2240      	movs	r2, #64	; 0x40
 8014c82:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

		/************** CREATE NEW MESSAGE ********************ifco*/

		// create header
		if (request_ack && (coapCode == OT_COAP_CODE_PUT))
 8014c86:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014c8a:	2b00      	cmp	r3, #0
 8014c8c:	d009      	beq.n	8014ca2 <APP_THREAD_SendCoapMsg+0x82>
 8014c8e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014c92:	2b03      	cmp	r3, #3
 8014c94:	d105      	bne.n	8014ca2 <APP_THREAD_SendCoapMsg+0x82>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_PUT);
 8014c96:	2203      	movs	r2, #3
 8014c98:	2100      	movs	r1, #0
 8014c9a:	4857      	ldr	r0, [pc, #348]	; (8014df8 <APP_THREAD_SendCoapMsg+0x1d8>)
 8014c9c:	f7fd fdb9 	bl	8012812 <otCoapHeaderInit>
 8014ca0:	e04a      	b.n	8014d38 <APP_THREAD_SendCoapMsg+0x118>
		else if (request_ack && (coapCode == OT_COAP_CODE_GET))
 8014ca2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	d009      	beq.n	8014cbe <APP_THREAD_SendCoapMsg+0x9e>
 8014caa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014cae:	2b01      	cmp	r3, #1
 8014cb0:	d105      	bne.n	8014cbe <APP_THREAD_SendCoapMsg+0x9e>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_GET);
 8014cb2:	2201      	movs	r2, #1
 8014cb4:	2100      	movs	r1, #0
 8014cb6:	4850      	ldr	r0, [pc, #320]	; (8014df8 <APP_THREAD_SendCoapMsg+0x1d8>)
 8014cb8:	f7fd fdab 	bl	8012812 <otCoapHeaderInit>
 8014cbc:	e03c      	b.n	8014d38 <APP_THREAD_SendCoapMsg+0x118>
		else if (request_ack && (coapCode == OT_COAP_CODE_POST))
 8014cbe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014cc2:	2b00      	cmp	r3, #0
 8014cc4:	d009      	beq.n	8014cda <APP_THREAD_SendCoapMsg+0xba>
 8014cc6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014cca:	2b02      	cmp	r3, #2
 8014ccc:	d105      	bne.n	8014cda <APP_THREAD_SendCoapMsg+0xba>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_POST);
 8014cce:	2202      	movs	r2, #2
 8014cd0:	2100      	movs	r1, #0
 8014cd2:	4849      	ldr	r0, [pc, #292]	; (8014df8 <APP_THREAD_SendCoapMsg+0x1d8>)
 8014cd4:	f7fd fd9d 	bl	8012812 <otCoapHeaderInit>
 8014cd8:	e02e      	b.n	8014d38 <APP_THREAD_SendCoapMsg+0x118>
		else if (!request_ack && (coapCode == OT_COAP_CODE_PUT))
 8014cda:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014cde:	2b00      	cmp	r3, #0
 8014ce0:	d109      	bne.n	8014cf6 <APP_THREAD_SendCoapMsg+0xd6>
 8014ce2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014ce6:	2b03      	cmp	r3, #3
 8014ce8:	d105      	bne.n	8014cf6 <APP_THREAD_SendCoapMsg+0xd6>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_PUT);
 8014cea:	2203      	movs	r2, #3
 8014cec:	2110      	movs	r1, #16
 8014cee:	4842      	ldr	r0, [pc, #264]	; (8014df8 <APP_THREAD_SendCoapMsg+0x1d8>)
 8014cf0:	f7fd fd8f 	bl	8012812 <otCoapHeaderInit>
 8014cf4:	e020      	b.n	8014d38 <APP_THREAD_SendCoapMsg+0x118>
		else if (!request_ack && (coapCode == OT_COAP_CODE_GET))
 8014cf6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014cfa:	2b00      	cmp	r3, #0
 8014cfc:	d109      	bne.n	8014d12 <APP_THREAD_SendCoapMsg+0xf2>
 8014cfe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014d02:	2b01      	cmp	r3, #1
 8014d04:	d105      	bne.n	8014d12 <APP_THREAD_SendCoapMsg+0xf2>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_GET);
 8014d06:	2201      	movs	r2, #1
 8014d08:	2110      	movs	r1, #16
 8014d0a:	483b      	ldr	r0, [pc, #236]	; (8014df8 <APP_THREAD_SendCoapMsg+0x1d8>)
 8014d0c:	f7fd fd81 	bl	8012812 <otCoapHeaderInit>
 8014d10:	e012      	b.n	8014d38 <APP_THREAD_SendCoapMsg+0x118>
		else if (!request_ack && (coapCode == OT_COAP_CODE_POST))
 8014d12:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014d16:	2b00      	cmp	r3, #0
 8014d18:	d109      	bne.n	8014d2e <APP_THREAD_SendCoapMsg+0x10e>
 8014d1a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014d1e:	2b02      	cmp	r3, #2
 8014d20:	d105      	bne.n	8014d2e <APP_THREAD_SendCoapMsg+0x10e>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_POST);
 8014d22:	2202      	movs	r2, #2
 8014d24:	2110      	movs	r1, #16
 8014d26:	4834      	ldr	r0, [pc, #208]	; (8014df8 <APP_THREAD_SendCoapMsg+0x1d8>)
 8014d28:	f7fd fd73 	bl	8012812 <otCoapHeaderInit>
 8014d2c:	e004      	b.n	8014d38 <APP_THREAD_SendCoapMsg+0x118>
		else
			return // this return should never happen

//			  otCoapHeaderSetMessageId(&OT_Header, msgID); `//may not need since sendRequest should set to 0
			otCoapHeaderGenerateToken(&OT_Header, 2U); //This function sets the Token length and randomizes its value.
 8014d2e:	2102      	movs	r1, #2
 8014d30:	4831      	ldr	r0, [pc, #196]	; (8014df8 <APP_THREAD_SendCoapMsg+0x1d8>)
 8014d32:	f7fd fdd7 	bl	80128e4 <otCoapHeaderGenerateToken>
 8014d36:	e053      	b.n	8014de0 <APP_THREAD_SendCoapMsg+0x1c0>

		// add the name of the resource
		error = otCoapHeaderAppendUriPathOptions(&OT_Header, resource);
 8014d38:	6839      	ldr	r1, [r7, #0]
 8014d3a:	482f      	ldr	r0, [pc, #188]	; (8014df8 <APP_THREAD_SendCoapMsg+0x1d8>)
 8014d3c:	f7fd fe35 	bl	80129aa <otCoapHeaderAppendUriPathOptions>
 8014d40:	4603      	mov	r3, r0
 8014d42:	461a      	mov	r2, r3
 8014d44:	4b2d      	ldr	r3, [pc, #180]	; (8014dfc <APP_THREAD_SendCoapMsg+0x1dc>)
 8014d46:	701a      	strb	r2, [r3, #0]
//			  if (error != OT_ERROR_NONE) while(1);

		// need this so the coap server doesnt try to parse as 'utf-8' and error out
		otCoapHeaderAppendContentFormatOption(&OT_Header, OT_COAP_OPTION_CONTENT_FORMAT_OCTET_STREAM);
 8014d48:	212a      	movs	r1, #42	; 0x2a
 8014d4a:	482b      	ldr	r0, [pc, #172]	; (8014df8 <APP_THREAD_SendCoapMsg+0x1d8>)
 8014d4c:	f7fd fdfa 	bl	8012944 <otCoapHeaderAppendContentFormatOption>
//			  if (error != OT_ERROR_NONE) while(1);

		// This function adds Payload Marker indicating beginning of the payload to the CoAP header
		otCoapHeaderSetPayloadMarker(&OT_Header); //TODO: if no msg, dont set marker and remove empty message below
 8014d50:	4829      	ldr	r0, [pc, #164]	; (8014df8 <APP_THREAD_SendCoapMsg+0x1d8>)
 8014d52:	f7fd fe5c 	bl	8012a0e <otCoapHeaderSetPayloadMarker>

		// creates new message with headers but with empty payload
		pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 8014d56:	4928      	ldr	r1, [pc, #160]	; (8014df8 <APP_THREAD_SendCoapMsg+0x1d8>)
 8014d58:	2000      	movs	r0, #0
 8014d5a:	f7fd ff9b 	bl	8012c94 <otCoapNewMessage>
 8014d5e:	4602      	mov	r2, r0
 8014d60:	4b27      	ldr	r3, [pc, #156]	; (8014e00 <APP_THREAD_SendCoapMsg+0x1e0>)
 8014d62:	601a      	str	r2, [r3, #0]
		if (pOT_Message == NULL)
 8014d64:	4b26      	ldr	r3, [pc, #152]	; (8014e00 <APP_THREAD_SendCoapMsg+0x1e0>)
 8014d66:	681b      	ldr	r3, [r3, #0]
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	d100      	bne.n	8014d6e <APP_THREAD_SendCoapMsg+0x14e>
			while (1);
 8014d6c:	e7fe      	b.n	8014d6c <APP_THREAD_SendCoapMsg+0x14c>

		// Append bytes to a message (this is where the payload gets added)

		// append message if there was one given
		if (msgSize > 0) {
 8014d6e:	897b      	ldrh	r3, [r7, #10]
 8014d70:	2b00      	cmp	r3, #0
 8014d72:	d00b      	beq.n	8014d8c <APP_THREAD_SendCoapMsg+0x16c>
			error = otMessageAppend(pOT_Message, message, msgSize);
 8014d74:	4b22      	ldr	r3, [pc, #136]	; (8014e00 <APP_THREAD_SendCoapMsg+0x1e0>)
 8014d76:	681b      	ldr	r3, [r3, #0]
 8014d78:	897a      	ldrh	r2, [r7, #10]
 8014d7a:	68f9      	ldr	r1, [r7, #12]
 8014d7c:	4618      	mov	r0, r3
 8014d7e:	f7fe fa81 	bl	8013284 <otMessageAppend>
 8014d82:	4603      	mov	r3, r0
 8014d84:	461a      	mov	r2, r3
 8014d86:	4b1d      	ldr	r3, [pc, #116]	; (8014dfc <APP_THREAD_SendCoapMsg+0x1dc>)
 8014d88:	701a      	strb	r2, [r3, #0]
 8014d8a:	e00a      	b.n	8014da2 <APP_THREAD_SendCoapMsg+0x182>
		}else{
			error = otMessageAppend(pOT_Message, empty_message, 10);
 8014d8c:	4b1c      	ldr	r3, [pc, #112]	; (8014e00 <APP_THREAD_SendCoapMsg+0x1e0>)
 8014d8e:	681b      	ldr	r3, [r3, #0]
 8014d90:	220a      	movs	r2, #10
 8014d92:	491c      	ldr	r1, [pc, #112]	; (8014e04 <APP_THREAD_SendCoapMsg+0x1e4>)
 8014d94:	4618      	mov	r0, r3
 8014d96:	f7fe fa75 	bl	8013284 <otMessageAppend>
 8014d9a:	4603      	mov	r3, r0
 8014d9c:	461a      	mov	r2, r3
 8014d9e:	4b17      	ldr	r3, [pc, #92]	; (8014dfc <APP_THREAD_SendCoapMsg+0x1dc>)
 8014da0:	701a      	strb	r2, [r3, #0]
		}

			  if (error != OT_ERROR_NONE) while(1);
 8014da2:	4b16      	ldr	r3, [pc, #88]	; (8014dfc <APP_THREAD_SendCoapMsg+0x1dc>)
 8014da4:	781b      	ldrb	r3, [r3, #0]
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	d000      	beq.n	8014dac <APP_THREAD_SendCoapMsg+0x18c>
 8014daa:	e7fe      	b.n	8014daa <APP_THREAD_SendCoapMsg+0x18a>

		// TODO: the response function should only be used for the border update event (I think only if message is embedded in ACK)?


		error = otCoapSendRequest(NULL,
 8014dac:	4b14      	ldr	r3, [pc, #80]	; (8014e00 <APP_THREAD_SendCoapMsg+0x1e0>)
 8014dae:	6819      	ldr	r1, [r3, #0]
 8014db0:	2300      	movs	r3, #0
 8014db2:	9300      	str	r3, [sp, #0]
 8014db4:	2300      	movs	r3, #0
 8014db6:	4a0c      	ldr	r2, [pc, #48]	; (8014de8 <APP_THREAD_SendCoapMsg+0x1c8>)
 8014db8:	2000      	movs	r0, #0
 8014dba:	f7fd ff99 	bl	8012cf0 <otCoapSendRequest>
 8014dbe:	4603      	mov	r3, r0
 8014dc0:	461a      	mov	r2, r3
 8014dc2:	4b0e      	ldr	r3, [pc, #56]	; (8014dfc <APP_THREAD_SendCoapMsg+0x1dc>)
 8014dc4:	701a      	strb	r2, [r3, #0]
								NULL,
								(void*) NULL);


		// if error: free allocated message buffer if one was allocated
		if (error != OT_ERROR_NONE && pOT_Message != NULL) {
 8014dc6:	4b0d      	ldr	r3, [pc, #52]	; (8014dfc <APP_THREAD_SendCoapMsg+0x1dc>)
 8014dc8:	781b      	ldrb	r3, [r3, #0]
 8014dca:	2b00      	cmp	r3, #0
 8014dcc:	d008      	beq.n	8014de0 <APP_THREAD_SendCoapMsg+0x1c0>
 8014dce:	4b0c      	ldr	r3, [pc, #48]	; (8014e00 <APP_THREAD_SendCoapMsg+0x1e0>)
 8014dd0:	681b      	ldr	r3, [r3, #0]
 8014dd2:	2b00      	cmp	r3, #0
 8014dd4:	d004      	beq.n	8014de0 <APP_THREAD_SendCoapMsg+0x1c0>
			otMessageFree(pOT_Message);
 8014dd6:	4b0a      	ldr	r3, [pc, #40]	; (8014e00 <APP_THREAD_SendCoapMsg+0x1e0>)
 8014dd8:	681b      	ldr	r3, [r3, #0]
 8014dda:	4618      	mov	r0, r3
 8014ddc:	f7fe f9f9 	bl	80131d2 <otMessageFree>
		}

	} while (false);
}
 8014de0:	3714      	adds	r7, #20
 8014de2:	46bd      	mov	sp, r7
 8014de4:	bd90      	pop	{r4, r7, pc}
 8014de6:	bf00      	nop
 8014de8:	200275cc 	.word	0x200275cc
 8014dec:	20027690 	.word	0x20027690
 8014df0:	080174c4 	.word	0x080174c4
 8014df4:	20028630 	.word	0x20028630
 8014df8:	200275f8 	.word	0x200275f8
 8014dfc:	2002768c 	.word	0x2002768c
 8014e00:	20027688 	.word	0x20027688
 8014e04:	200276c0 	.word	0x200276c0

08014e08 <APP_THREAD_SendCoapMsgForBorderSync>:

static void APP_THREAD_SendCoapMsgForBorderSync(void *message, uint16_t msgSize, otIp6Address *ipv6_addr, char *resource,
		uint8_t request_ack, otCoapCode coapCode, uint8_t msgID) {
 8014e08:	b590      	push	{r4, r7, lr}
 8014e0a:	b087      	sub	sp, #28
 8014e0c:	af02      	add	r7, sp, #8
 8014e0e:	60f8      	str	r0, [r7, #12]
 8014e10:	607a      	str	r2, [r7, #4]
 8014e12:	603b      	str	r3, [r7, #0]
 8014e14:	460b      	mov	r3, r1
 8014e16:	817b      	strh	r3, [r7, #10]
//			  multicastAddresses = otIp6GetMulticastAddresses(NULL);
//			  meshLocalEID =  otThreadGetMeshLocalEid(NULL);
//			  linkLocalIPV6 = otThreadGetLinkLocalIp6Address(NULL);

		// clear info
		memset(&OT_MessageInfo, 0, sizeof(OT_MessageInfo));
 8014e18:	222c      	movs	r2, #44	; 0x2c
 8014e1a:	2100      	movs	r1, #0
 8014e1c:	4851      	ldr	r0, [pc, #324]	; (8014f64 <APP_THREAD_SendCoapMsgForBorderSync+0x15c>)
 8014e1e:	f001 f85e 	bl	8015ede <memset>

		// add destination IPv6 address to header
		// TODO : swap the below statements once ST has their shit fixed


		memcpy(&OT_MessageInfo.mPeerAddr, &multicastAddr, sizeof(otIp6Address));
 8014e22:	4b50      	ldr	r3, [pc, #320]	; (8014f64 <APP_THREAD_SendCoapMsgForBorderSync+0x15c>)
 8014e24:	4a50      	ldr	r2, [pc, #320]	; (8014f68 <APP_THREAD_SendCoapMsgForBorderSync+0x160>)
 8014e26:	f103 0410 	add.w	r4, r3, #16
 8014e2a:	4613      	mov	r3, r2
 8014e2c:	6818      	ldr	r0, [r3, #0]
 8014e2e:	6859      	ldr	r1, [r3, #4]
 8014e30:	689a      	ldr	r2, [r3, #8]
 8014e32:	68db      	ldr	r3, [r3, #12]
 8014e34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
//			  otIp6AddressFromString("fd11:22::c34c:7994:19f2:4b82", &OT_MessageInfo.mSockAddr);

//			  otIp6AddressFromString("fd11:22::c34c:7994:cccc:4b82", &OT_MessageInfo.mSockAddr);

		// populate message information
		OT_MessageInfo.mInterfaceId = OT_NETIF_INTERFACE_ID_THREAD;
 8014e36:	4b4b      	ldr	r3, [pc, #300]	; (8014f64 <APP_THREAD_SendCoapMsgForBorderSync+0x15c>)
 8014e38:	2201      	movs	r2, #1
 8014e3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		OT_MessageInfo.mPeerPort = OT_DEFAULT_COAP_PORT;
 8014e3e:	4b49      	ldr	r3, [pc, #292]	; (8014f64 <APP_THREAD_SendCoapMsgForBorderSync+0x15c>)
 8014e40:	f241 6233 	movw	r2, #5683	; 0x1633
 8014e44:	845a      	strh	r2, [r3, #34]	; 0x22
		OT_MessageInfo.mHopLimit = 64;
 8014e46:	4b47      	ldr	r3, [pc, #284]	; (8014f64 <APP_THREAD_SendCoapMsgForBorderSync+0x15c>)
 8014e48:	2240      	movs	r2, #64	; 0x40
 8014e4a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

		/************** CREATE NEW MESSAGE ********************ifco*/

		// create header
		if (request_ack && (coapCode == OT_COAP_CODE_PUT))
 8014e4e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014e52:	2b00      	cmp	r3, #0
 8014e54:	d009      	beq.n	8014e6a <APP_THREAD_SendCoapMsgForBorderSync+0x62>
 8014e56:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014e5a:	2b03      	cmp	r3, #3
 8014e5c:	d105      	bne.n	8014e6a <APP_THREAD_SendCoapMsgForBorderSync+0x62>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_PUT);
 8014e5e:	2203      	movs	r2, #3
 8014e60:	2100      	movs	r1, #0
 8014e62:	4842      	ldr	r0, [pc, #264]	; (8014f6c <APP_THREAD_SendCoapMsgForBorderSync+0x164>)
 8014e64:	f7fd fcd5 	bl	8012812 <otCoapHeaderInit>
 8014e68:	e04a      	b.n	8014f00 <APP_THREAD_SendCoapMsgForBorderSync+0xf8>
		else if (request_ack && (coapCode == OT_COAP_CODE_GET))
 8014e6a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	d009      	beq.n	8014e86 <APP_THREAD_SendCoapMsgForBorderSync+0x7e>
 8014e72:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014e76:	2b01      	cmp	r3, #1
 8014e78:	d105      	bne.n	8014e86 <APP_THREAD_SendCoapMsgForBorderSync+0x7e>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_GET);
 8014e7a:	2201      	movs	r2, #1
 8014e7c:	2100      	movs	r1, #0
 8014e7e:	483b      	ldr	r0, [pc, #236]	; (8014f6c <APP_THREAD_SendCoapMsgForBorderSync+0x164>)
 8014e80:	f7fd fcc7 	bl	8012812 <otCoapHeaderInit>
 8014e84:	e03c      	b.n	8014f00 <APP_THREAD_SendCoapMsgForBorderSync+0xf8>
		else if (request_ack && (coapCode == OT_COAP_CODE_POST))
 8014e86:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014e8a:	2b00      	cmp	r3, #0
 8014e8c:	d009      	beq.n	8014ea2 <APP_THREAD_SendCoapMsgForBorderSync+0x9a>
 8014e8e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014e92:	2b02      	cmp	r3, #2
 8014e94:	d105      	bne.n	8014ea2 <APP_THREAD_SendCoapMsgForBorderSync+0x9a>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_POST);
 8014e96:	2202      	movs	r2, #2
 8014e98:	2100      	movs	r1, #0
 8014e9a:	4834      	ldr	r0, [pc, #208]	; (8014f6c <APP_THREAD_SendCoapMsgForBorderSync+0x164>)
 8014e9c:	f7fd fcb9 	bl	8012812 <otCoapHeaderInit>
 8014ea0:	e02e      	b.n	8014f00 <APP_THREAD_SendCoapMsgForBorderSync+0xf8>
		else if (!request_ack && (coapCode == OT_COAP_CODE_PUT))
 8014ea2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014ea6:	2b00      	cmp	r3, #0
 8014ea8:	d109      	bne.n	8014ebe <APP_THREAD_SendCoapMsgForBorderSync+0xb6>
 8014eaa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014eae:	2b03      	cmp	r3, #3
 8014eb0:	d105      	bne.n	8014ebe <APP_THREAD_SendCoapMsgForBorderSync+0xb6>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_PUT);
 8014eb2:	2203      	movs	r2, #3
 8014eb4:	2110      	movs	r1, #16
 8014eb6:	482d      	ldr	r0, [pc, #180]	; (8014f6c <APP_THREAD_SendCoapMsgForBorderSync+0x164>)
 8014eb8:	f7fd fcab 	bl	8012812 <otCoapHeaderInit>
 8014ebc:	e020      	b.n	8014f00 <APP_THREAD_SendCoapMsgForBorderSync+0xf8>
		else if (!request_ack && (coapCode == OT_COAP_CODE_GET))
 8014ebe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014ec2:	2b00      	cmp	r3, #0
 8014ec4:	d109      	bne.n	8014eda <APP_THREAD_SendCoapMsgForBorderSync+0xd2>
 8014ec6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014eca:	2b01      	cmp	r3, #1
 8014ecc:	d105      	bne.n	8014eda <APP_THREAD_SendCoapMsgForBorderSync+0xd2>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_GET);
 8014ece:	2201      	movs	r2, #1
 8014ed0:	2110      	movs	r1, #16
 8014ed2:	4826      	ldr	r0, [pc, #152]	; (8014f6c <APP_THREAD_SendCoapMsgForBorderSync+0x164>)
 8014ed4:	f7fd fc9d 	bl	8012812 <otCoapHeaderInit>
 8014ed8:	e012      	b.n	8014f00 <APP_THREAD_SendCoapMsgForBorderSync+0xf8>
		else if (!request_ack && (coapCode == OT_COAP_CODE_POST))
 8014eda:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014ede:	2b00      	cmp	r3, #0
 8014ee0:	d109      	bne.n	8014ef6 <APP_THREAD_SendCoapMsgForBorderSync+0xee>
 8014ee2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014ee6:	2b02      	cmp	r3, #2
 8014ee8:	d105      	bne.n	8014ef6 <APP_THREAD_SendCoapMsgForBorderSync+0xee>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_POST);
 8014eea:	2202      	movs	r2, #2
 8014eec:	2110      	movs	r1, #16
 8014eee:	481f      	ldr	r0, [pc, #124]	; (8014f6c <APP_THREAD_SendCoapMsgForBorderSync+0x164>)
 8014ef0:	f7fd fc8f 	bl	8012812 <otCoapHeaderInit>
 8014ef4:	e004      	b.n	8014f00 <APP_THREAD_SendCoapMsgForBorderSync+0xf8>
		else
			return // this return should never happen

//			  otCoapHeaderSetMessageId(&OT_Header, msgID); `//may not need since sendRequest should set to 0
			otCoapHeaderGenerateToken(&OT_Header, 2U); //This function sets the Token length and randomizes its value.
 8014ef6:	2102      	movs	r1, #2
 8014ef8:	481c      	ldr	r0, [pc, #112]	; (8014f6c <APP_THREAD_SendCoapMsgForBorderSync+0x164>)
 8014efa:	f7fd fcf3 	bl	80128e4 <otCoapHeaderGenerateToken>
 8014efe:	e02d      	b.n	8014f5c <APP_THREAD_SendCoapMsgForBorderSync+0x154>

		// add the name of the resource
		error = otCoapHeaderAppendUriPathOptions(&OT_Header, resource);
 8014f00:	6839      	ldr	r1, [r7, #0]
 8014f02:	481a      	ldr	r0, [pc, #104]	; (8014f6c <APP_THREAD_SendCoapMsgForBorderSync+0x164>)
 8014f04:	f7fd fd51 	bl	80129aa <otCoapHeaderAppendUriPathOptions>
 8014f08:	4603      	mov	r3, r0
 8014f0a:	461a      	mov	r2, r3
 8014f0c:	4b18      	ldr	r3, [pc, #96]	; (8014f70 <APP_THREAD_SendCoapMsgForBorderSync+0x168>)
 8014f0e:	701a      	strb	r2, [r3, #0]

		// This function adds Payload Marker indicating beginning of the payload to the CoAP header
//		otCoapHeaderSetPayloadMarker(&OT_Header);

		// creates new message with headers but with empty payload
		pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 8014f10:	4916      	ldr	r1, [pc, #88]	; (8014f6c <APP_THREAD_SendCoapMsgForBorderSync+0x164>)
 8014f12:	2000      	movs	r0, #0
 8014f14:	f7fd febe 	bl	8012c94 <otCoapNewMessage>
 8014f18:	4602      	mov	r2, r0
 8014f1a:	4b16      	ldr	r3, [pc, #88]	; (8014f74 <APP_THREAD_SendCoapMsgForBorderSync+0x16c>)
 8014f1c:	601a      	str	r2, [r3, #0]
//			error = otMessageAppend(pOT_Message, message, msgSize);
//		}else{
//			error = otMessageAppend(pOT_Message, empty_message, 10);
//		}

			  if (error != OT_ERROR_NONE) while(1);
 8014f1e:	4b14      	ldr	r3, [pc, #80]	; (8014f70 <APP_THREAD_SendCoapMsgForBorderSync+0x168>)
 8014f20:	781b      	ldrb	r3, [r3, #0]
 8014f22:	2b00      	cmp	r3, #0
 8014f24:	d000      	beq.n	8014f28 <APP_THREAD_SendCoapMsgForBorderSync+0x120>
 8014f26:	e7fe      	b.n	8014f26 <APP_THREAD_SendCoapMsgForBorderSync+0x11e>

		// TODO: the response function should only be used for the border update event (I think only if message is embedded in ACK)?


		error = otCoapSendRequest(NULL, pOT_Message, &OT_MessageInfo, &APP_THREAD_DummyRespHandler,
 8014f28:	4b12      	ldr	r3, [pc, #72]	; (8014f74 <APP_THREAD_SendCoapMsgForBorderSync+0x16c>)
 8014f2a:	6819      	ldr	r1, [r3, #0]
 8014f2c:	4b12      	ldr	r3, [pc, #72]	; (8014f78 <APP_THREAD_SendCoapMsgForBorderSync+0x170>)
 8014f2e:	9300      	str	r3, [sp, #0]
 8014f30:	4b12      	ldr	r3, [pc, #72]	; (8014f7c <APP_THREAD_SendCoapMsgForBorderSync+0x174>)
 8014f32:	4a0c      	ldr	r2, [pc, #48]	; (8014f64 <APP_THREAD_SendCoapMsgForBorderSync+0x15c>)
 8014f34:	2000      	movs	r0, #0
 8014f36:	f7fd fedb 	bl	8012cf0 <otCoapSendRequest>
 8014f3a:	4603      	mov	r3, r0
 8014f3c:	461a      	mov	r2, r3
 8014f3e:	4b0c      	ldr	r3, [pc, #48]	; (8014f70 <APP_THREAD_SendCoapMsgForBorderSync+0x168>)
 8014f40:	701a      	strb	r2, [r3, #0]
				(void*) &APP_THREAD_CoapRespHandler_UpdateBorderRouter);



		// if error: free allocated message buffer if one was allocated
		if (error != OT_ERROR_NONE && pOT_Message != NULL) {
 8014f42:	4b0b      	ldr	r3, [pc, #44]	; (8014f70 <APP_THREAD_SendCoapMsgForBorderSync+0x168>)
 8014f44:	781b      	ldrb	r3, [r3, #0]
 8014f46:	2b00      	cmp	r3, #0
 8014f48:	d008      	beq.n	8014f5c <APP_THREAD_SendCoapMsgForBorderSync+0x154>
 8014f4a:	4b0a      	ldr	r3, [pc, #40]	; (8014f74 <APP_THREAD_SendCoapMsgForBorderSync+0x16c>)
 8014f4c:	681b      	ldr	r3, [r3, #0]
 8014f4e:	2b00      	cmp	r3, #0
 8014f50:	d004      	beq.n	8014f5c <APP_THREAD_SendCoapMsgForBorderSync+0x154>
			otMessageFree(pOT_Message);
 8014f52:	4b08      	ldr	r3, [pc, #32]	; (8014f74 <APP_THREAD_SendCoapMsgForBorderSync+0x16c>)
 8014f54:	681b      	ldr	r3, [r3, #0]
 8014f56:	4618      	mov	r0, r3
 8014f58:	f7fe f93b 	bl	80131d2 <otMessageFree>
		}

	} while (false);

}
 8014f5c:	3714      	adds	r7, #20
 8014f5e:	46bd      	mov	sp, r7
 8014f60:	bd90      	pop	{r4, r7, pc}
 8014f62:	bf00      	nop
 8014f64:	200275cc 	.word	0x200275cc
 8014f68:	20028630 	.word	0x20028630
 8014f6c:	200275f8 	.word	0x200275f8
 8014f70:	2002768c 	.word	0x2002768c
 8014f74:	20027688 	.word	0x20027688
 8014f78:	080147d9 	.word	0x080147d9
 8014f7c:	080147bd 	.word	0x080147bd

08014f80 <APP_THREAD_SendDataResponse>:
request and the Acknowledgement MUST match, and the tokens of the
response and original request MUST match.  In a separate
response, just the tokens of the response and original request
MUST match.*/

static void APP_THREAD_SendDataResponse(void *message, uint16_t msgSize, otCoapHeader *pRequestHeader, const otMessageInfo *pMessageInfo) {
 8014f80:	b590      	push	{r4, r7, lr}
 8014f82:	b087      	sub	sp, #28
 8014f84:	af00      	add	r7, sp, #0
 8014f86:	60f8      	str	r0, [r7, #12]
 8014f88:	607a      	str	r2, [r7, #4]
 8014f8a:	603b      	str	r3, [r7, #0]
 8014f8c:	460b      	mov	r3, r1
 8014f8e:	817b      	strh	r3, [r7, #10]
	otError error = OT_ERROR_NONE;
 8014f90:	2300      	movs	r3, #0
 8014f92:	75fb      	strb	r3, [r7, #23]

	//APP_DBG(" ********* APP_THREAD_SendDataResponse \r\n");
	otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_ACKNOWLEDGMENT, OT_COAP_CODE_CHANGED);
 8014f94:	2244      	movs	r2, #68	; 0x44
 8014f96:	2120      	movs	r1, #32
 8014f98:	4826      	ldr	r0, [pc, #152]	; (8015034 <APP_THREAD_SendDataResponse+0xb4>)
 8014f9a:	f7fd fc3a 	bl	8012812 <otCoapHeaderInit>
	otCoapHeaderSetMessageId(&OT_Header, otCoapHeaderGetMessageId(pRequestHeader));
 8014f9e:	6878      	ldr	r0, [r7, #4]
 8014fa0:	f7fd fdef 	bl	8012b82 <otCoapHeaderGetMessageId>
 8014fa4:	4603      	mov	r3, r0
 8014fa6:	4619      	mov	r1, r3
 8014fa8:	4822      	ldr	r0, [pc, #136]	; (8015034 <APP_THREAD_SendDataResponse+0xb4>)
 8014faa:	f7fd fd5e 	bl	8012a6a <otCoapHeaderSetMessageId>
	otCoapHeaderSetToken(&OT_Header, otCoapHeaderGetToken(pRequestHeader), otCoapHeaderGetTokenLength(pRequestHeader));
 8014fae:	6878      	ldr	r0, [r7, #4]
 8014fb0:	f7fd fe43 	bl	8012c3a <otCoapHeaderGetToken>
 8014fb4:	4604      	mov	r4, r0
 8014fb6:	6878      	ldr	r0, [r7, #4]
 8014fb8:	f7fd fe11 	bl	8012bde <otCoapHeaderGetTokenLength>
 8014fbc:	4603      	mov	r3, r0
 8014fbe:	461a      	mov	r2, r3
 8014fc0:	4621      	mov	r1, r4
 8014fc2:	481c      	ldr	r0, [pc, #112]	; (8015034 <APP_THREAD_SendDataResponse+0xb4>)
 8014fc4:	f7fd fc5a 	bl	801287c <otCoapHeaderSetToken>

	if (msgSize > 0){
 8014fc8:	897b      	ldrh	r3, [r7, #10]
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	d006      	beq.n	8014fdc <APP_THREAD_SendDataResponse+0x5c>
		// need this so the coap server doesnt try to parse as 'utf-8' and error out
		otCoapHeaderAppendContentFormatOption(&OT_Header, OT_COAP_OPTION_CONTENT_FORMAT_OCTET_STREAM);
 8014fce:	212a      	movs	r1, #42	; 0x2a
 8014fd0:	4818      	ldr	r0, [pc, #96]	; (8015034 <APP_THREAD_SendDataResponse+0xb4>)
 8014fd2:	f7fd fcb7 	bl	8012944 <otCoapHeaderAppendContentFormatOption>
//			  if (error != OT_ERROR_NONE) while(1);

		// This function adds Payload Marker indicating beginning of the payload to the CoAP header
		otCoapHeaderSetPayloadMarker(&OT_Header); //TODO: if no msg, dont set marker and remove empty message below
 8014fd6:	4817      	ldr	r0, [pc, #92]	; (8015034 <APP_THREAD_SendDataResponse+0xb4>)
 8014fd8:	f7fd fd19 	bl	8012a0e <otCoapHeaderSetPayloadMarker>
	}

	pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 8014fdc:	4915      	ldr	r1, [pc, #84]	; (8015034 <APP_THREAD_SendDataResponse+0xb4>)
 8014fde:	2000      	movs	r0, #0
 8014fe0:	f7fd fe58 	bl	8012c94 <otCoapNewMessage>
 8014fe4:	4602      	mov	r2, r0
 8014fe6:	4b14      	ldr	r3, [pc, #80]	; (8015038 <APP_THREAD_SendDataResponse+0xb8>)
 8014fe8:	601a      	str	r2, [r3, #0]
	if (pOT_Message == NULL) {
		//APP_THREAD_Error(ERR_NEW_MSG_ALLOC,error);
	}

	// append message if there was one given
	if (msgSize > 0) {
 8014fea:	897b      	ldrh	r3, [r7, #10]
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	d008      	beq.n	8015002 <APP_THREAD_SendDataResponse+0x82>
		error = otMessageAppend(pOT_Message, message, msgSize);
 8014ff0:	4b11      	ldr	r3, [pc, #68]	; (8015038 <APP_THREAD_SendDataResponse+0xb8>)
 8014ff2:	681b      	ldr	r3, [r3, #0]
 8014ff4:	897a      	ldrh	r2, [r7, #10]
 8014ff6:	68f9      	ldr	r1, [r7, #12]
 8014ff8:	4618      	mov	r0, r3
 8014ffa:	f7fe f943 	bl	8013284 <otMessageAppend>
 8014ffe:	4603      	mov	r3, r0
 8015000:	75fb      	strb	r3, [r7, #23]
	}

	error = otCoapSendResponse(NULL, pOT_Message, pMessageInfo);
 8015002:	4b0d      	ldr	r3, [pc, #52]	; (8015038 <APP_THREAD_SendDataResponse+0xb8>)
 8015004:	681b      	ldr	r3, [r3, #0]
 8015006:	683a      	ldr	r2, [r7, #0]
 8015008:	4619      	mov	r1, r3
 801500a:	2000      	movs	r0, #0
 801500c:	f7fd ff09 	bl	8012e22 <otCoapSendResponse>
 8015010:	4603      	mov	r3, r0
 8015012:	75fb      	strb	r3, [r7, #23]
	if (error != OT_ERROR_NONE && pOT_Message != NULL) {
 8015014:	7dfb      	ldrb	r3, [r7, #23]
 8015016:	2b00      	cmp	r3, #0
 8015018:	d008      	beq.n	801502c <APP_THREAD_SendDataResponse+0xac>
 801501a:	4b07      	ldr	r3, [pc, #28]	; (8015038 <APP_THREAD_SendDataResponse+0xb8>)
 801501c:	681b      	ldr	r3, [r3, #0]
 801501e:	2b00      	cmp	r3, #0
 8015020:	d004      	beq.n	801502c <APP_THREAD_SendDataResponse+0xac>
		otMessageFree(pOT_Message);
 8015022:	4b05      	ldr	r3, [pc, #20]	; (8015038 <APP_THREAD_SendDataResponse+0xb8>)
 8015024:	681b      	ldr	r3, [r3, #0]
 8015026:	4618      	mov	r0, r3
 8015028:	f7fe f8d3 	bl	80131d2 <otMessageFree>
		//APP_THREAD_Error(ERR_THREAD_DATA_RESPONSE,error);
	}
}
 801502c:	bf00      	nop
 801502e:	371c      	adds	r7, #28
 8015030:	46bd      	mov	sp, r7
 8015032:	bd90      	pop	{r4, r7, pc}
 8015034:	200275f8 	.word	0x200275f8
 8015038:	20027688 	.word	0x20027688

0801503c <APP_THREAD_RegisterCmdBuffer>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void APP_THREAD_RegisterCmdBuffer(TL_CmdPacket_t* p_buffer)
{
 801503c:	b480      	push	{r7}
 801503e:	b083      	sub	sp, #12
 8015040:	af00      	add	r7, sp, #0
 8015042:	6078      	str	r0, [r7, #4]
  p_thread_otcmdbuffer = p_buffer;
 8015044:	4a04      	ldr	r2, [pc, #16]	; (8015058 <APP_THREAD_RegisterCmdBuffer+0x1c>)
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	6013      	str	r3, [r2, #0]
}
 801504a:	bf00      	nop
 801504c:	370c      	adds	r7, #12
 801504e:	46bd      	mov	sp, r7
 8015050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015054:	4770      	bx	lr
 8015056:	bf00      	nop
 8015058:	200275b4 	.word	0x200275b4

0801505c <THREAD_Get_OTCmdPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdPayloadBuffer(void)
{
 801505c:	b480      	push	{r7}
 801505e:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)p_thread_otcmdbuffer->cmdserial.cmd.payload;
 8015060:	4b03      	ldr	r3, [pc, #12]	; (8015070 <THREAD_Get_OTCmdPayloadBuffer+0x14>)
 8015062:	681b      	ldr	r3, [r3, #0]
 8015064:	330c      	adds	r3, #12
}
 8015066:	4618      	mov	r0, r3
 8015068:	46bd      	mov	sp, r7
 801506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801506e:	4770      	bx	lr
 8015070:	200275b4 	.word	0x200275b4

08015074 <THREAD_Get_OTCmdRspPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdRspPayloadBuffer(void)
{
 8015074:	b480      	push	{r7}
 8015076:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)((TL_EvtPacket_t *)p_thread_otcmdbuffer)->evtserial.evt.payload;
 8015078:	4b03      	ldr	r3, [pc, #12]	; (8015088 <THREAD_Get_OTCmdRspPayloadBuffer+0x14>)
 801507a:	681b      	ldr	r3, [r3, #0]
 801507c:	330b      	adds	r3, #11
}
 801507e:	4618      	mov	r0, r3
 8015080:	46bd      	mov	sp, r7
 8015082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015086:	4770      	bx	lr
 8015088:	200275b4 	.word	0x200275b4

0801508c <THREAD_Get_NotificationPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_NotificationPayloadBuffer(void)
{
 801508c:	b480      	push	{r7}
 801508e:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)(p_thread_notif_M0_to_M4)->evtserial.evt.payload;
 8015090:	4b03      	ldr	r3, [pc, #12]	; (80150a0 <THREAD_Get_NotificationPayloadBuffer+0x14>)
 8015092:	681b      	ldr	r3, [r3, #0]
 8015094:	330b      	adds	r3, #11
}
 8015096:	4618      	mov	r0, r3
 8015098:	46bd      	mov	sp, r7
 801509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801509e:	4770      	bx	lr
 80150a0:	200275b8 	.word	0x200275b8

080150a4 <Ot_Cmd_Transfer>:
 *
 * @param   None
 * @return  None
 */
void Ot_Cmd_Transfer(void)
{
 80150a4:	b580      	push	{r7, lr}
 80150a6:	b082      	sub	sp, #8
 80150a8:	af00      	add	r7, sp, #0
  /* OpenThread OT command cmdcode range 0x280 .. 0x3DF = 352 */
  p_thread_otcmdbuffer->cmdserial.cmd.cmdcode = 0x280U;
 80150aa:	4b0f      	ldr	r3, [pc, #60]	; (80150e8 <Ot_Cmd_Transfer+0x44>)
 80150ac:	681b      	ldr	r3, [r3, #0]
 80150ae:	2200      	movs	r2, #0
 80150b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80150b4:	725a      	strb	r2, [r3, #9]
 80150b6:	2200      	movs	r2, #0
 80150b8:	f042 0202 	orr.w	r2, r2, #2
 80150bc:	729a      	strb	r2, [r3, #10]
  /* Size = otCmdBuffer->Size (Number of OT cmd arguments : 1 arg = 32bits so multiply by 4 to get size in bytes)
   * + ID (4 bytes) + Size (4 bytes) */
  uint32_t l_size = ((Thread_OT_Cmd_Request_t*)(p_thread_otcmdbuffer->cmdserial.cmd.payload))->Size * 4U + 8U;
 80150be:	4b0a      	ldr	r3, [pc, #40]	; (80150e8 <Ot_Cmd_Transfer+0x44>)
 80150c0:	681b      	ldr	r3, [r3, #0]
 80150c2:	330c      	adds	r3, #12
 80150c4:	685b      	ldr	r3, [r3, #4]
 80150c6:	3302      	adds	r3, #2
 80150c8:	009b      	lsls	r3, r3, #2
 80150ca:	607b      	str	r3, [r7, #4]
  p_thread_otcmdbuffer->cmdserial.cmd.plen = l_size;
 80150cc:	4b06      	ldr	r3, [pc, #24]	; (80150e8 <Ot_Cmd_Transfer+0x44>)
 80150ce:	681b      	ldr	r3, [r3, #0]
 80150d0:	687a      	ldr	r2, [r7, #4]
 80150d2:	b2d2      	uxtb	r2, r2
 80150d4:	72da      	strb	r2, [r3, #11]

  TL_OT_SendCmd();
 80150d6:	f7fe ffbb 	bl	8014050 <TL_OT_SendCmd>

  /* Wait completion of cmd */
  Wait_Getting_Ack_From_M0();
 80150da:	f000 f829 	bl	8015130 <Wait_Getting_Ack_From_M0>
}
 80150de:	bf00      	nop
 80150e0:	3708      	adds	r7, #8
 80150e2:	46bd      	mov	sp, r7
 80150e4:	bd80      	pop	{r7, pc}
 80150e6:	bf00      	nop
 80150e8:	200275b4 	.word	0x200275b4

080150ec <TL_OT_CmdEvtReceived>:
 *
 * @param   Otbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_OT_CmdEvtReceived( TL_EvtPacket_t * Otbuffer )
{
 80150ec:	b580      	push	{r7, lr}
 80150ee:	b082      	sub	sp, #8
 80150f0:	af00      	add	r7, sp, #0
 80150f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Otbuffer);

  Receive_Ack_From_M0();
 80150f4:	f000 f82e 	bl	8015154 <Receive_Ack_From_M0>
}
 80150f8:	bf00      	nop
 80150fa:	3708      	adds	r7, #8
 80150fc:	46bd      	mov	sp, r7
 80150fe:	bd80      	pop	{r7, pc}

08015100 <TL_THREAD_NotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_NotReceived( TL_EvtPacket_t * Notbuffer )
{
 8015100:	b580      	push	{r7, lr}
 8015102:	b082      	sub	sp, #8
 8015104:	af00      	add	r7, sp, #0
 8015106:	6078      	str	r0, [r7, #4]
  p_thread_notif_M0_to_M4 = Notbuffer;
 8015108:	4a04      	ldr	r2, [pc, #16]	; (801511c <TL_THREAD_NotReceived+0x1c>)
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	6013      	str	r3, [r2, #0]

  Receive_Notification_From_M0();
 801510e:	f000 f82d 	bl	801516c <Receive_Notification_From_M0>
}
 8015112:	bf00      	nop
 8015114:	3708      	adds	r7, #8
 8015116:	46bd      	mov	sp, r7
 8015118:	bd80      	pop	{r7, pc}
 801511a:	bf00      	nop
 801511c:	200275b8 	.word	0x200275b8

08015120 <Pre_OtCmdProcessing>:
  *         pending before sending a new ot command.
  * @param  None
  * @retval None
  */
void Pre_OtCmdProcessing(void)
{
 8015120:	b480      	push	{r7}
 8015122:	af00      	add	r7, sp, #0

}
 8015124:	bf00      	nop
 8015126:	46bd      	mov	sp, r7
 8015128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801512c:	4770      	bx	lr
	...

08015130 <Wait_Getting_Ack_From_M0>:
  *
  * @param  None
  * @retval None
  */
static void Wait_Getting_Ack_From_M0(void)
{
 8015130:	b480      	push	{r7}
 8015132:	af00      	add	r7, sp, #0
  while (FlagReceiveAckFromM0 == 0)
 8015134:	bf00      	nop
 8015136:	4b06      	ldr	r3, [pc, #24]	; (8015150 <Wait_Getting_Ack_From_M0+0x20>)
 8015138:	681b      	ldr	r3, [r3, #0]
 801513a:	2b00      	cmp	r3, #0
 801513c:	d0fb      	beq.n	8015136 <Wait_Getting_Ack_From_M0+0x6>
  {
  }
  FlagReceiveAckFromM0 = 0;
 801513e:	4b04      	ldr	r3, [pc, #16]	; (8015150 <Wait_Getting_Ack_From_M0+0x20>)
 8015140:	2200      	movs	r2, #0
 8015142:	601a      	str	r2, [r3, #0]
}
 8015144:	bf00      	nop
 8015146:	46bd      	mov	sp, r7
 8015148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801514c:	4770      	bx	lr
 801514e:	bf00      	nop
 8015150:	200275c0 	.word	0x200275c0

08015154 <Receive_Ack_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Ack_From_M0(void)
{
 8015154:	b480      	push	{r7}
 8015156:	af00      	add	r7, sp, #0
  FlagReceiveAckFromM0 = 1;
 8015158:	4b03      	ldr	r3, [pc, #12]	; (8015168 <Receive_Ack_From_M0+0x14>)
 801515a:	2201      	movs	r2, #1
 801515c:	601a      	str	r2, [r3, #0]
}
 801515e:	bf00      	nop
 8015160:	46bd      	mov	sp, r7
 8015162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015166:	4770      	bx	lr
 8015168:	200275c0 	.word	0x200275c0

0801516c <Receive_Notification_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Notification_From_M0(void)
{
 801516c:	b580      	push	{r7, lr}
 801516e:	af00      	add	r7, sp, #0
  CptReceiveMsgFromM0++;
 8015170:	4b06      	ldr	r3, [pc, #24]	; (801518c <Receive_Notification_From_M0+0x20>)
 8015172:	681b      	ldr	r3, [r3, #0]
 8015174:	3301      	adds	r3, #1
 8015176:	4a05      	ldr	r2, [pc, #20]	; (801518c <Receive_Notification_From_M0+0x20>)
 8015178:	6013      	str	r3, [r2, #0]
  osThreadFlagsSet(OsTaskMsgM0ToM4Id,1);
 801517a:	4b05      	ldr	r3, [pc, #20]	; (8015190 <Receive_Notification_From_M0+0x24>)
 801517c:	681b      	ldr	r3, [r3, #0]
 801517e:	2101      	movs	r1, #1
 8015180:	4618      	mov	r0, r3
 8015182:	f7f8 ffff 	bl	800e184 <osThreadFlagsSet>
}
 8015186:	bf00      	nop
 8015188:	bd80      	pop	{r7, pc}
 801518a:	bf00      	nop
 801518c:	200275bc 	.word	0x200275bc
 8015190:	200275c4 	.word	0x200275c4

08015194 <Send_CLI_To_M0>:
 * @brief Process sends receive CLI command to M0.
 * @param  None
 * @retval None
 */
static void Send_CLI_To_M0(void)
{
 8015194:	b580      	push	{r7, lr}
 8015196:	af00      	add	r7, sp, #0
  memset(ThreadCliCmdBuffer.cmdserial.cmd.payload, 0x0U, 255U);
 8015198:	22ff      	movs	r2, #255	; 0xff
 801519a:	2100      	movs	r1, #0
 801519c:	4812      	ldr	r0, [pc, #72]	; (80151e8 <Send_CLI_To_M0+0x54>)
 801519e:	f000 fe9e 	bl	8015ede <memset>
  memcpy(ThreadCliCmdBuffer.cmdserial.cmd.payload, CommandString, indexReceiveChar);
 80151a2:	4b12      	ldr	r3, [pc, #72]	; (80151ec <Send_CLI_To_M0+0x58>)
 80151a4:	881b      	ldrh	r3, [r3, #0]
 80151a6:	b29b      	uxth	r3, r3
 80151a8:	461a      	mov	r2, r3
 80151aa:	4911      	ldr	r1, [pc, #68]	; (80151f0 <Send_CLI_To_M0+0x5c>)
 80151ac:	480e      	ldr	r0, [pc, #56]	; (80151e8 <Send_CLI_To_M0+0x54>)
 80151ae:	f000 fe8b 	bl	8015ec8 <memcpy>
  ThreadCliCmdBuffer.cmdserial.cmd.plen = indexReceiveChar;
 80151b2:	4b0e      	ldr	r3, [pc, #56]	; (80151ec <Send_CLI_To_M0+0x58>)
 80151b4:	881b      	ldrh	r3, [r3, #0]
 80151b6:	b29b      	uxth	r3, r3
 80151b8:	b2da      	uxtb	r2, r3
 80151ba:	4b0e      	ldr	r3, [pc, #56]	; (80151f4 <Send_CLI_To_M0+0x60>)
 80151bc:	72da      	strb	r2, [r3, #11]
  ThreadCliCmdBuffer.cmdserial.cmd.cmdcode = 0x0;
 80151be:	4b0d      	ldr	r3, [pc, #52]	; (80151f4 <Send_CLI_To_M0+0x60>)
 80151c0:	2200      	movs	r2, #0
 80151c2:	725a      	strb	r2, [r3, #9]
 80151c4:	2200      	movs	r2, #0
 80151c6:	729a      	strb	r2, [r3, #10]

  /* Clear receive buffer, character counter and command complete */
  CptReceiveCmdFromUser = 0;
 80151c8:	4b0b      	ldr	r3, [pc, #44]	; (80151f8 <Send_CLI_To_M0+0x64>)
 80151ca:	2200      	movs	r2, #0
 80151cc:	801a      	strh	r2, [r3, #0]
  indexReceiveChar = 0;
 80151ce:	4b07      	ldr	r3, [pc, #28]	; (80151ec <Send_CLI_To_M0+0x58>)
 80151d0:	2200      	movs	r2, #0
 80151d2:	801a      	strh	r2, [r3, #0]
  memset(CommandString, 0, C_SIZE_CMD_STRING);
 80151d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80151d8:	2100      	movs	r1, #0
 80151da:	4805      	ldr	r0, [pc, #20]	; (80151f0 <Send_CLI_To_M0+0x5c>)
 80151dc:	f000 fe7f 	bl	8015ede <memset>

  TL_CLI_SendCmd();
 80151e0:	f7fe ff44 	bl	801406c <TL_CLI_SendCmd>
}
 80151e4:	bf00      	nop
 80151e6:	bd80      	pop	{r7, pc}
 80151e8:	20030a5c 	.word	0x20030a5c
 80151ec:	200275b0 	.word	0x200275b0
 80151f0:	200274b0 	.word	0x200274b0
 80151f4:	20030a50 	.word	0x20030a50
 80151f8:	200275b2 	.word	0x200275b2

080151fc <Send_CLI_Ack_For_OT>:
 * @brief Send notification for CLI TL Channel.
 * @param  None
 * @retval None
 */
static void Send_CLI_Ack_For_OT(void)
{
 80151fc:	b580      	push	{r7, lr}
 80151fe:	af00      	add	r7, sp, #0

  /* Notify M0 that characters have been sent to UART */
  TL_THREAD_CliSendAck();
 8015200:	f7fe ff50 	bl	80140a4 <TL_THREAD_CliSendAck>
}
 8015204:	bf00      	nop
 8015206:	bd80      	pop	{r7, pc}

08015208 <APP_THREAD_Init_UART_CLI>:
 * @brief Perform initialization of CLI UART interface.
 * @param  None
 * @retval None
 */
void APP_THREAD_Init_UART_CLI(void)
{
 8015208:	b580      	push	{r7, lr}
 801520a:	af00      	add	r7, sp, #0
#if (CFG_FULL_LOW_POWER == 0)
  OsTaskCliId = osThreadNew(APP_THREAD_FreeRTOSSendCLIToM0Task, NULL,&ThreadCliProcess_attr);
 801520c:	4a04      	ldr	r2, [pc, #16]	; (8015220 <APP_THREAD_Init_UART_CLI+0x18>)
 801520e:	2100      	movs	r1, #0
 8015210:	4804      	ldr	r0, [pc, #16]	; (8015224 <APP_THREAD_Init_UART_CLI+0x1c>)
 8015212:	f7f8 ff0b 	bl	800e02c <osThreadNew>
 8015216:	4602      	mov	r2, r0
 8015218:	4b03      	ldr	r3, [pc, #12]	; (8015228 <APP_THREAD_Init_UART_CLI+0x20>)
 801521a:	601a      	str	r2, [r3, #0]
#else
#if (CFG_FULL_LOW_POWER == 0)
//  HW_UART_Receive_IT(CFG_CLI_UART, aRxBuffer, 1, RxCpltCallback);
#endif /* (CFG_FULL_LOW_POWER == 0) */
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */
}
 801521c:	bf00      	nop
 801521e:	bd80      	pop	{r7, pc}
 8015220:	080178f4 	.word	0x080178f4
 8015224:	08014763 	.word	0x08014763
 8015228:	200275c8 	.word	0x200275c8

0801522c <APP_THREAD_TL_THREAD_INIT>:
 * @brief Perform initialization of TL for THREAD.
 * @param  None
 * @retval None
 */
void APP_THREAD_TL_THREAD_INIT(void)
{
 801522c:	b580      	push	{r7, lr}
 801522e:	af00      	add	r7, sp, #0
  ThreadConfigBuffer.p_ThreadOtCmdRspBuffer = (uint8_t*)&ThreadOtCmdBuffer;
 8015230:	4b06      	ldr	r3, [pc, #24]	; (801524c <APP_THREAD_TL_THREAD_INIT+0x20>)
 8015232:	4a07      	ldr	r2, [pc, #28]	; (8015250 <APP_THREAD_TL_THREAD_INIT+0x24>)
 8015234:	601a      	str	r2, [r3, #0]
  ThreadConfigBuffer.p_ThreadNotAckBuffer = (uint8_t*)ThreadNotifRspEvtBuffer;
 8015236:	4b05      	ldr	r3, [pc, #20]	; (801524c <APP_THREAD_TL_THREAD_INIT+0x20>)
 8015238:	4a06      	ldr	r2, [pc, #24]	; (8015254 <APP_THREAD_TL_THREAD_INIT+0x28>)
 801523a:	609a      	str	r2, [r3, #8]
  ThreadConfigBuffer.p_ThreadCliRspBuffer = (uint8_t*)&ThreadCliCmdBuffer;
 801523c:	4b03      	ldr	r3, [pc, #12]	; (801524c <APP_THREAD_TL_THREAD_INIT+0x20>)
 801523e:	4a06      	ldr	r2, [pc, #24]	; (8015258 <APP_THREAD_TL_THREAD_INIT+0x2c>)
 8015240:	605a      	str	r2, [r3, #4]

  TL_THREAD_Init( &ThreadConfigBuffer );
 8015242:	4802      	ldr	r0, [pc, #8]	; (801524c <APP_THREAD_TL_THREAD_INIT+0x20>)
 8015244:	f7fe fee8 	bl	8014018 <TL_THREAD_Init>
}
 8015248:	bf00      	nop
 801524a:	bd80      	pop	{r7, pc}
 801524c:	200300b8 	.word	0x200300b8
 8015250:	20030838 	.word	0x20030838
 8015254:	20030944 	.word	0x20030944
 8015258:	20030a50 	.word	0x20030a50

0801525c <TL_THREAD_CliNotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_CliNotReceived( TL_EvtPacket_t * Notbuffer )
{
 801525c:	b580      	push	{r7, lr}
 801525e:	b084      	sub	sp, #16
 8015260:	af00      	add	r7, sp, #0
 8015262:	6078      	str	r0, [r7, #4]
  TL_CmdPacket_t* l_CliBuffer = (TL_CmdPacket_t*)Notbuffer;
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	60fb      	str	r3, [r7, #12]
  uint8_t l_size = l_CliBuffer->cmdserial.cmd.plen;
 8015268:	68fb      	ldr	r3, [r7, #12]
 801526a:	7adb      	ldrb	r3, [r3, #11]
 801526c:	72fb      	strb	r3, [r7, #11]

  /* WORKAROUND: if string to output is "> " then respond directly to M0 and do not output it */
  if (strcmp((const char *)l_CliBuffer->cmdserial.cmd.payload, "> ") != 0)
 801526e:	68fb      	ldr	r3, [r7, #12]
 8015270:	330c      	adds	r3, #12
 8015272:	4906      	ldr	r1, [pc, #24]	; (801528c <TL_THREAD_CliNotReceived+0x30>)
 8015274:	4618      	mov	r0, r3
 8015276:	f7ea ff83 	bl	8000180 <strcmp>
 801527a:	4603      	mov	r3, r0
 801527c:	2b00      	cmp	r3, #0
 801527e:	d101      	bne.n	8015284 <TL_THREAD_CliNotReceived+0x28>
//    HW_UART_Transmit_IT(CFG_CLI_UART, l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
#endif /*USAGE_OF_VCP */
  }
  else
  {
    Send_CLI_Ack_For_OT();
 8015280:	f7ff ffbc 	bl	80151fc <Send_CLI_Ack_For_OT>
  }
}
 8015284:	bf00      	nop
 8015286:	3710      	adds	r7, #16
 8015288:	46bd      	mov	sp, r7
 801528a:	bd80      	pop	{r7, pc}
 801528c:	080174e4 	.word	0x080174e4

08015290 <APP_THREAD_ProcessMsgM0ToM4>:
 * @brief Process the messages coming from the M0.
 * @param  None
 * @retval None
 */
void APP_THREAD_ProcessMsgM0ToM4(void)
{
 8015290:	b580      	push	{r7, lr}
 8015292:	af00      	add	r7, sp, #0
  if (CptReceiveMsgFromM0 != 0)
 8015294:	4b09      	ldr	r3, [pc, #36]	; (80152bc <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8015296:	681b      	ldr	r3, [r3, #0]
 8015298:	2b00      	cmp	r3, #0
 801529a:	d00d      	beq.n	80152b8 <APP_THREAD_ProcessMsgM0ToM4+0x28>
  {
    /* If CptReceiveMsgFromM0 is > 1. it means that we did not serve all the events from the radio */
    if (CptReceiveMsgFromM0 > 1U)
 801529c:	4b07      	ldr	r3, [pc, #28]	; (80152bc <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 801529e:	681b      	ldr	r3, [r3, #0]
 80152a0:	2b01      	cmp	r3, #1
 80152a2:	d904      	bls.n	80152ae <APP_THREAD_ProcessMsgM0ToM4+0x1e>
    {
      APP_THREAD_Error(ERR_REC_MULTI_MSG_FROM_M0, 0);
 80152a4:	2100      	movs	r1, #0
 80152a6:	2000      	movs	r0, #0
 80152a8:	f7fe fff4 	bl	8014294 <APP_THREAD_Error>
 80152ac:	e001      	b.n	80152b2 <APP_THREAD_ProcessMsgM0ToM4+0x22>
    }
    else
    {
      OpenThread_CallBack_Processing();
 80152ae:	f7fe f85d 	bl	801336c <OpenThread_CallBack_Processing>
    }
    /* Reset counter */
    CptReceiveMsgFromM0 = 0;
 80152b2:	4b02      	ldr	r3, [pc, #8]	; (80152bc <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 80152b4:	2200      	movs	r2, #0
 80152b6:	601a      	str	r2, [r3, #0]
  }
}
 80152b8:	bf00      	nop
 80152ba:	bd80      	pop	{r7, pc}
 80152bc:	200275bc 	.word	0x200275bc

080152c0 <LL_C2_EXTI_EnableEvent_32_63>:
{
 80152c0:	b480      	push	{r7}
 80152c2:	b083      	sub	sp, #12
 80152c4:	af00      	add	r7, sp, #0
 80152c6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 80152c8:	4b06      	ldr	r3, [pc, #24]	; (80152e4 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80152ca:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80152ce:	4905      	ldr	r1, [pc, #20]	; (80152e4 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	4313      	orrs	r3, r2
 80152d4:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 80152d8:	bf00      	nop
 80152da:	370c      	adds	r7, #12
 80152dc:	46bd      	mov	sp, r7
 80152de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152e2:	4770      	bx	lr
 80152e4:	58000800 	.word	0x58000800

080152e8 <LL_EXTI_EnableRisingTrig_32_63>:
{
 80152e8:	b480      	push	{r7}
 80152ea:	b083      	sub	sp, #12
 80152ec:	af00      	add	r7, sp, #0
 80152ee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80152f0:	4b05      	ldr	r3, [pc, #20]	; (8015308 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80152f2:	6a1a      	ldr	r2, [r3, #32]
 80152f4:	4904      	ldr	r1, [pc, #16]	; (8015308 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	4313      	orrs	r3, r2
 80152fa:	620b      	str	r3, [r1, #32]
}
 80152fc:	bf00      	nop
 80152fe:	370c      	adds	r7, #12
 8015300:	46bd      	mov	sp, r7
 8015302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015306:	4770      	bx	lr
 8015308:	58000800 	.word	0x58000800

0801530c <LL_PWR_EnableBootC2>:
  * @brief  Boot CPU2 after reset or wakeup from stop or standby modes
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 801530c:	b480      	push	{r7}
 801530e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8015310:	4b05      	ldr	r3, [pc, #20]	; (8015328 <LL_PWR_EnableBootC2+0x1c>)
 8015312:	68db      	ldr	r3, [r3, #12]
 8015314:	4a04      	ldr	r2, [pc, #16]	; (8015328 <LL_PWR_EnableBootC2+0x1c>)
 8015316:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801531a:	60d3      	str	r3, [r2, #12]
}
 801531c:	bf00      	nop
 801531e:	46bd      	mov	sp, r7
 8015320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015324:	4770      	bx	lr
 8015326:	bf00      	nop
 8015328:	58000400 	.word	0x58000400

0801532c <LL_AHB3_GRP1_EnableClock>:
{
 801532c:	b480      	push	{r7}
 801532e:	b085      	sub	sp, #20
 8015330:	af00      	add	r7, sp, #0
 8015332:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8015334:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8015338:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801533a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801533e:	687b      	ldr	r3, [r7, #4]
 8015340:	4313      	orrs	r3, r2
 8015342:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8015344:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8015348:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	4013      	ands	r3, r2
 801534e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8015350:	68fb      	ldr	r3, [r7, #12]
}
 8015352:	bf00      	nop
 8015354:	3714      	adds	r7, #20
 8015356:	46bd      	mov	sp, r7
 8015358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801535c:	4770      	bx	lr

0801535e <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 801535e:	b480      	push	{r7}
 8015360:	b083      	sub	sp, #12
 8015362:	af00      	add	r7, sp, #0
 8015364:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8015366:	687b      	ldr	r3, [r7, #4]
 8015368:	681b      	ldr	r3, [r3, #0]
 801536a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801536e:	687b      	ldr	r3, [r7, #4]
 8015370:	601a      	str	r2, [r3, #0]
}
 8015372:	bf00      	nop
 8015374:	370c      	adds	r7, #12
 8015376:	46bd      	mov	sp, r7
 8015378:	f85d 7b04 	ldr.w	r7, [sp], #4
 801537c:	4770      	bx	lr

0801537e <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 801537e:	b480      	push	{r7}
 8015380:	b083      	sub	sp, #12
 8015382:	af00      	add	r7, sp, #0
 8015384:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8015386:	687b      	ldr	r3, [r7, #4]
 8015388:	681b      	ldr	r3, [r3, #0]
 801538a:	f043 0201 	orr.w	r2, r3, #1
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	601a      	str	r2, [r3, #0]
}
 8015392:	bf00      	nop
 8015394:	370c      	adds	r7, #12
 8015396:	46bd      	mov	sp, r7
 8015398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801539c:	4770      	bx	lr

0801539e <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 801539e:	b480      	push	{r7}
 80153a0:	b083      	sub	sp, #12
 80153a2:	af00      	add	r7, sp, #0
 80153a4:	6078      	str	r0, [r7, #4]
 80153a6:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	685a      	ldr	r2, [r3, #4]
 80153ac:	683b      	ldr	r3, [r7, #0]
 80153ae:	041b      	lsls	r3, r3, #16
 80153b0:	43db      	mvns	r3, r3
 80153b2:	401a      	ands	r2, r3
 80153b4:	687b      	ldr	r3, [r7, #4]
 80153b6:	605a      	str	r2, [r3, #4]
}
 80153b8:	bf00      	nop
 80153ba:	370c      	adds	r7, #12
 80153bc:	46bd      	mov	sp, r7
 80153be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153c2:	4770      	bx	lr

080153c4 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80153c4:	b480      	push	{r7}
 80153c6:	b083      	sub	sp, #12
 80153c8:	af00      	add	r7, sp, #0
 80153ca:	6078      	str	r0, [r7, #4]
 80153cc:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80153ce:	687b      	ldr	r3, [r7, #4]
 80153d0:	685a      	ldr	r2, [r3, #4]
 80153d2:	683b      	ldr	r3, [r7, #0]
 80153d4:	041b      	lsls	r3, r3, #16
 80153d6:	431a      	orrs	r2, r3
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	605a      	str	r2, [r3, #4]
}
 80153dc:	bf00      	nop
 80153de:	370c      	adds	r7, #12
 80153e0:	46bd      	mov	sp, r7
 80153e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153e6:	4770      	bx	lr

080153e8 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80153e8:	b480      	push	{r7}
 80153ea:	b083      	sub	sp, #12
 80153ec:	af00      	add	r7, sp, #0
 80153ee:	6078      	str	r0, [r7, #4]
 80153f0:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	685a      	ldr	r2, [r3, #4]
 80153f6:	683b      	ldr	r3, [r7, #0]
 80153f8:	43db      	mvns	r3, r3
 80153fa:	401a      	ands	r2, r3
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	605a      	str	r2, [r3, #4]
}
 8015400:	bf00      	nop
 8015402:	370c      	adds	r7, #12
 8015404:	46bd      	mov	sp, r7
 8015406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801540a:	4770      	bx	lr

0801540c <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 801540c:	b480      	push	{r7}
 801540e:	b083      	sub	sp, #12
 8015410:	af00      	add	r7, sp, #0
 8015412:	6078      	str	r0, [r7, #4]
 8015414:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8015416:	687b      	ldr	r3, [r7, #4]
 8015418:	685a      	ldr	r2, [r3, #4]
 801541a:	683b      	ldr	r3, [r7, #0]
 801541c:	431a      	orrs	r2, r3
 801541e:	687b      	ldr	r3, [r7, #4]
 8015420:	605a      	str	r2, [r3, #4]
}
 8015422:	bf00      	nop
 8015424:	370c      	adds	r7, #12
 8015426:	46bd      	mov	sp, r7
 8015428:	f85d 7b04 	ldr.w	r7, [sp], #4
 801542c:	4770      	bx	lr

0801542e <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 801542e:	b480      	push	{r7}
 8015430:	b083      	sub	sp, #12
 8015432:	af00      	add	r7, sp, #0
 8015434:	6078      	str	r0, [r7, #4]
 8015436:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	683a      	ldr	r2, [r7, #0]
 801543c:	609a      	str	r2, [r3, #8]
}
 801543e:	bf00      	nop
 8015440:	370c      	adds	r7, #12
 8015442:	46bd      	mov	sp, r7
 8015444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015448:	4770      	bx	lr

0801544a <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 801544a:	b480      	push	{r7}
 801544c:	b083      	sub	sp, #12
 801544e:	af00      	add	r7, sp, #0
 8015450:	6078      	str	r0, [r7, #4]
 8015452:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8015454:	683b      	ldr	r3, [r7, #0]
 8015456:	041a      	lsls	r2, r3, #16
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	609a      	str	r2, [r3, #8]
}
 801545c:	bf00      	nop
 801545e:	370c      	adds	r7, #12
 8015460:	46bd      	mov	sp, r7
 8015462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015466:	4770      	bx	lr

08015468 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8015468:	b480      	push	{r7}
 801546a:	b083      	sub	sp, #12
 801546c:	af00      	add	r7, sp, #0
 801546e:	6078      	str	r0, [r7, #4]
 8015470:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	68da      	ldr	r2, [r3, #12]
 8015476:	683b      	ldr	r3, [r7, #0]
 8015478:	4013      	ands	r3, r2
 801547a:	683a      	ldr	r2, [r7, #0]
 801547c:	429a      	cmp	r2, r3
 801547e:	d101      	bne.n	8015484 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8015480:	2301      	movs	r3, #1
 8015482:	e000      	b.n	8015486 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8015484:	2300      	movs	r3, #0
}
 8015486:	4618      	mov	r0, r3
 8015488:	370c      	adds	r7, #12
 801548a:	46bd      	mov	sp, r7
 801548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015490:	4770      	bx	lr

08015492 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8015492:	b480      	push	{r7}
 8015494:	b083      	sub	sp, #12
 8015496:	af00      	add	r7, sp, #0
 8015498:	6078      	str	r0, [r7, #4]
 801549a:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	69da      	ldr	r2, [r3, #28]
 80154a0:	683b      	ldr	r3, [r7, #0]
 80154a2:	4013      	ands	r3, r2
 80154a4:	683a      	ldr	r2, [r7, #0]
 80154a6:	429a      	cmp	r2, r3
 80154a8:	d101      	bne.n	80154ae <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 80154aa:	2301      	movs	r3, #1
 80154ac:	e000      	b.n	80154b0 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 80154ae:	2300      	movs	r3, #0
}
 80154b0:	4618      	mov	r0, r3
 80154b2:	370c      	adds	r7, #12
 80154b4:	46bd      	mov	sp, r7
 80154b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154ba:	4770      	bx	lr

080154bc <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 80154bc:	b580      	push	{r7, lr}
 80154be:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 80154c0:	2102      	movs	r1, #2
 80154c2:	482a      	ldr	r0, [pc, #168]	; (801556c <HW_IPCC_Rx_Handler+0xb0>)
 80154c4:	f7ff ffe5 	bl	8015492 <LL_C2_IPCC_IsActiveFlag_CHx>
 80154c8:	4603      	mov	r3, r0
 80154ca:	2b00      	cmp	r3, #0
 80154cc:	d009      	beq.n	80154e2 <HW_IPCC_Rx_Handler+0x26>
 80154ce:	4b27      	ldr	r3, [pc, #156]	; (801556c <HW_IPCC_Rx_Handler+0xb0>)
 80154d0:	685b      	ldr	r3, [r3, #4]
 80154d2:	43db      	mvns	r3, r3
 80154d4:	f003 0302 	and.w	r3, r3, #2
 80154d8:	2b00      	cmp	r3, #0
 80154da:	d002      	beq.n	80154e2 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 80154dc:	f000 f906 	bl	80156ec <HW_IPCC_SYS_EvtHandler>
 80154e0:	e041      	b.n	8015566 <HW_IPCC_Rx_Handler+0xaa>
  {
    HW_IPCC_MAC_802_15_4_NotEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL ))
 80154e2:	2104      	movs	r1, #4
 80154e4:	4821      	ldr	r0, [pc, #132]	; (801556c <HW_IPCC_Rx_Handler+0xb0>)
 80154e6:	f7ff ffd4 	bl	8015492 <LL_C2_IPCC_IsActiveFlag_CHx>
 80154ea:	4603      	mov	r3, r0
 80154ec:	2b00      	cmp	r3, #0
 80154ee:	d009      	beq.n	8015504 <HW_IPCC_Rx_Handler+0x48>
 80154f0:	4b1e      	ldr	r3, [pc, #120]	; (801556c <HW_IPCC_Rx_Handler+0xb0>)
 80154f2:	685b      	ldr	r3, [r3, #4]
 80154f4:	43db      	mvns	r3, r3
 80154f6:	f003 0304 	and.w	r3, r3, #4
 80154fa:	2b00      	cmp	r3, #0
 80154fc:	d002      	beq.n	8015504 <HW_IPCC_Rx_Handler+0x48>
  {
    HW_IPCC_THREAD_NotEvtHandler();
 80154fe:	f000 f94f 	bl	80157a0 <HW_IPCC_THREAD_NotEvtHandler>
 8015502:	e030      	b.n	8015566 <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
 8015504:	2110      	movs	r1, #16
 8015506:	4819      	ldr	r0, [pc, #100]	; (801556c <HW_IPCC_Rx_Handler+0xb0>)
 8015508:	f7ff ffc3 	bl	8015492 <LL_C2_IPCC_IsActiveFlag_CHx>
 801550c:	4603      	mov	r3, r0
 801550e:	2b00      	cmp	r3, #0
 8015510:	d009      	beq.n	8015526 <HW_IPCC_Rx_Handler+0x6a>
 8015512:	4b16      	ldr	r3, [pc, #88]	; (801556c <HW_IPCC_Rx_Handler+0xb0>)
 8015514:	685b      	ldr	r3, [r3, #4]
 8015516:	43db      	mvns	r3, r3
 8015518:	f003 0310 	and.w	r3, r3, #16
 801551c:	2b00      	cmp	r3, #0
 801551e:	d002      	beq.n	8015526 <HW_IPCC_Rx_Handler+0x6a>
  {
    HW_IPCC_THREAD_CliNotEvtHandler();
 8015520:	f000 f94a 	bl	80157b8 <HW_IPCC_THREAD_CliNotEvtHandler>
 8015524:	e01f      	b.n	8015566 <HW_IPCC_Rx_Handler+0xaa>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CliNotifEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8015526:	2101      	movs	r1, #1
 8015528:	4810      	ldr	r0, [pc, #64]	; (801556c <HW_IPCC_Rx_Handler+0xb0>)
 801552a:	f7ff ffb2 	bl	8015492 <LL_C2_IPCC_IsActiveFlag_CHx>
 801552e:	4603      	mov	r3, r0
 8015530:	2b00      	cmp	r3, #0
 8015532:	d008      	beq.n	8015546 <HW_IPCC_Rx_Handler+0x8a>
 8015534:	4b0d      	ldr	r3, [pc, #52]	; (801556c <HW_IPCC_Rx_Handler+0xb0>)
 8015536:	685b      	ldr	r3, [r3, #4]
 8015538:	f003 0301 	and.w	r3, r3, #1
 801553c:	2b00      	cmp	r3, #0
 801553e:	d102      	bne.n	8015546 <HW_IPCC_Rx_Handler+0x8a>
  {
    HW_IPCC_BLE_EvtHandler();
 8015540:	f000 f898 	bl	8015674 <HW_IPCC_BLE_EvtHandler>
 8015544:	e00f      	b.n	8015566 <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8015546:	2108      	movs	r1, #8
 8015548:	4808      	ldr	r0, [pc, #32]	; (801556c <HW_IPCC_Rx_Handler+0xb0>)
 801554a:	f7ff ffa2 	bl	8015492 <LL_C2_IPCC_IsActiveFlag_CHx>
 801554e:	4603      	mov	r3, r0
 8015550:	2b00      	cmp	r3, #0
 8015552:	d009      	beq.n	8015568 <HW_IPCC_Rx_Handler+0xac>
 8015554:	4b05      	ldr	r3, [pc, #20]	; (801556c <HW_IPCC_Rx_Handler+0xb0>)
 8015556:	685b      	ldr	r3, [r3, #4]
 8015558:	43db      	mvns	r3, r3
 801555a:	f003 0308 	and.w	r3, r3, #8
 801555e:	2b00      	cmp	r3, #0
 8015560:	d002      	beq.n	8015568 <HW_IPCC_Rx_Handler+0xac>
  {
    HW_IPCC_TRACES_EvtHandler();
 8015562:	f000 f975 	bl	8015850 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8015566:	bf00      	nop
 8015568:	bf00      	nop
}
 801556a:	bd80      	pop	{r7, pc}
 801556c:	58000c00 	.word	0x58000c00

08015570 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8015570:	b580      	push	{r7, lr}
 8015572:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8015574:	2102      	movs	r1, #2
 8015576:	482b      	ldr	r0, [pc, #172]	; (8015624 <HW_IPCC_Tx_Handler+0xb4>)
 8015578:	f7ff ff76 	bl	8015468 <LL_C1_IPCC_IsActiveFlag_CHx>
 801557c:	4603      	mov	r3, r0
 801557e:	2b00      	cmp	r3, #0
 8015580:	d109      	bne.n	8015596 <HW_IPCC_Tx_Handler+0x26>
 8015582:	4b28      	ldr	r3, [pc, #160]	; (8015624 <HW_IPCC_Tx_Handler+0xb4>)
 8015584:	685b      	ldr	r3, [r3, #4]
 8015586:	43db      	mvns	r3, r3
 8015588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801558c:	2b00      	cmp	r3, #0
 801558e:	d002      	beq.n	8015596 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8015590:	f000 f8a0 	bl	80156d4 <HW_IPCC_SYS_CmdEvtHandler>
 8015594:	e042      	b.n	801561c <HW_IPCC_Tx_Handler+0xac>
  {
    HW_IPCC_MAC_802_15_4_CmdEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
 8015596:	2104      	movs	r1, #4
 8015598:	4822      	ldr	r0, [pc, #136]	; (8015624 <HW_IPCC_Tx_Handler+0xb4>)
 801559a:	f7ff ff65 	bl	8015468 <LL_C1_IPCC_IsActiveFlag_CHx>
 801559e:	4603      	mov	r3, r0
 80155a0:	2b00      	cmp	r3, #0
 80155a2:	d109      	bne.n	80155b8 <HW_IPCC_Tx_Handler+0x48>
 80155a4:	4b1f      	ldr	r3, [pc, #124]	; (8015624 <HW_IPCC_Tx_Handler+0xb4>)
 80155a6:	685b      	ldr	r3, [r3, #4]
 80155a8:	43db      	mvns	r3, r3
 80155aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80155ae:	2b00      	cmp	r3, #0
 80155b0:	d002      	beq.n	80155b8 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_OT_CmdEvtHandler();
 80155b2:	f000 f8e9 	bl	8015788 <HW_IPCC_OT_CmdEvtHandler>
 80155b6:	e031      	b.n	801561c <HW_IPCC_Tx_Handler+0xac>
  if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80155b8:	2102      	movs	r1, #2
 80155ba:	481a      	ldr	r0, [pc, #104]	; (8015624 <HW_IPCC_Tx_Handler+0xb4>)
 80155bc:	f7ff ff54 	bl	8015468 <LL_C1_IPCC_IsActiveFlag_CHx>
 80155c0:	4603      	mov	r3, r0
 80155c2:	2b00      	cmp	r3, #0
 80155c4:	d109      	bne.n	80155da <HW_IPCC_Tx_Handler+0x6a>
 80155c6:	4b17      	ldr	r3, [pc, #92]	; (8015624 <HW_IPCC_Tx_Handler+0xb4>)
 80155c8:	685b      	ldr	r3, [r3, #4]
 80155ca:	43db      	mvns	r3, r3
 80155cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80155d0:	2b00      	cmp	r3, #0
 80155d2:	d002      	beq.n	80155da <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80155d4:	f000 f87e 	bl	80156d4 <HW_IPCC_SYS_CmdEvtHandler>
 80155d8:	e020      	b.n	801561c <HW_IPCC_Tx_Handler+0xac>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 80155da:	2108      	movs	r1, #8
 80155dc:	4811      	ldr	r0, [pc, #68]	; (8015624 <HW_IPCC_Tx_Handler+0xb4>)
 80155de:	f7ff ff43 	bl	8015468 <LL_C1_IPCC_IsActiveFlag_CHx>
 80155e2:	4603      	mov	r3, r0
 80155e4:	2b00      	cmp	r3, #0
 80155e6:	d109      	bne.n	80155fc <HW_IPCC_Tx_Handler+0x8c>
 80155e8:	4b0e      	ldr	r3, [pc, #56]	; (8015624 <HW_IPCC_Tx_Handler+0xb4>)
 80155ea:	685b      	ldr	r3, [r3, #4]
 80155ec:	43db      	mvns	r3, r3
 80155ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80155f2:	2b00      	cmp	r3, #0
 80155f4:	d002      	beq.n	80155fc <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_MM_FreeBufHandler();
 80155f6:	f000 f90d 	bl	8015814 <HW_IPCC_MM_FreeBufHandler>
 80155fa:	e00f      	b.n	801561c <HW_IPCC_Tx_Handler+0xac>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 80155fc:	2120      	movs	r1, #32
 80155fe:	4809      	ldr	r0, [pc, #36]	; (8015624 <HW_IPCC_Tx_Handler+0xb4>)
 8015600:	f7ff ff32 	bl	8015468 <LL_C1_IPCC_IsActiveFlag_CHx>
 8015604:	4603      	mov	r3, r0
 8015606:	2b00      	cmp	r3, #0
 8015608:	d109      	bne.n	801561e <HW_IPCC_Tx_Handler+0xae>
 801560a:	4b06      	ldr	r3, [pc, #24]	; (8015624 <HW_IPCC_Tx_Handler+0xb4>)
 801560c:	685b      	ldr	r3, [r3, #4]
 801560e:	43db      	mvns	r3, r3
 8015610:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8015614:	2b00      	cmp	r3, #0
 8015616:	d002      	beq.n	801561e <HW_IPCC_Tx_Handler+0xae>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8015618:	f000 f838 	bl	801568c <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 801561c:	bf00      	nop
 801561e:	bf00      	nop
}
 8015620:	bd80      	pop	{r7, pc}
 8015622:	bf00      	nop
 8015624:	58000c00 	.word	0x58000c00

08015628 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8015628:	b580      	push	{r7, lr}
 801562a:	af00      	add	r7, sp, #0
  /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 801562c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8015630:	f7ff fe46 	bl	80152c0 <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8015634:	f44f 7000 	mov.w	r0, #512	; 0x200
 8015638:	f7ff fe56 	bl	80152e8 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 801563c:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 801563e:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8015640:	f7ff fe64 	bl	801530c <LL_PWR_EnableBootC2>

  return;
 8015644:	bf00      	nop
}
 8015646:	bd80      	pop	{r7, pc}

08015648 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8015648:	b580      	push	{r7, lr}
 801564a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 801564c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8015650:	f7ff fe6c 	bl	801532c <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8015654:	4806      	ldr	r0, [pc, #24]	; (8015670 <HW_IPCC_Init+0x28>)
 8015656:	f7ff fe92 	bl	801537e <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 801565a:	4805      	ldr	r0, [pc, #20]	; (8015670 <HW_IPCC_Init+0x28>)
 801565c:	f7ff fe7f 	bl	801535e <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8015660:	202c      	movs	r0, #44	; 0x2c
 8015662:	f7f2 fb82 	bl	8007d6a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8015666:	202d      	movs	r0, #45	; 0x2d
 8015668:	f7f2 fb7f 	bl	8007d6a <HAL_NVIC_EnableIRQ>

  return;
 801566c:	bf00      	nop
}
 801566e:	bd80      	pop	{r7, pc}
 8015670:	58000c00 	.word	0x58000c00

08015674 <HW_IPCC_BLE_EvtHandler>:

  return;
}

static void HW_IPCC_BLE_EvtHandler( void )
{
 8015674:	b580      	push	{r7, lr}
 8015676:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8015678:	f7fe fc3e 	bl	8013ef8 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 801567c:	2101      	movs	r1, #1
 801567e:	4802      	ldr	r0, [pc, #8]	; (8015688 <HW_IPCC_BLE_EvtHandler+0x14>)
 8015680:	f7ff fed5 	bl	801542e <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8015684:	bf00      	nop
}
 8015686:	bd80      	pop	{r7, pc}
 8015688:	58000c00 	.word	0x58000c00

0801568c <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 801568c:	b580      	push	{r7, lr}
 801568e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8015690:	2120      	movs	r1, #32
 8015692:	4803      	ldr	r0, [pc, #12]	; (80156a0 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8015694:	f7ff fe96 	bl	80153c4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8015698:	f7fe fc4a 	bl	8013f30 <HW_IPCC_BLE_AclDataAckNot>

  return;
 801569c:	bf00      	nop
}
 801569e:	bd80      	pop	{r7, pc}
 80156a0:	58000c00 	.word	0x58000c00

080156a4 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 80156a4:	b580      	push	{r7, lr}
 80156a6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80156a8:	2102      	movs	r1, #2
 80156aa:	4802      	ldr	r0, [pc, #8]	; (80156b4 <HW_IPCC_SYS_Init+0x10>)
 80156ac:	f7ff fe9c 	bl	80153e8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80156b0:	bf00      	nop
}
 80156b2:	bd80      	pop	{r7, pc}
 80156b4:	58000c00 	.word	0x58000c00

080156b8 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 80156b8:	b580      	push	{r7, lr}
 80156ba:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80156bc:	2102      	movs	r1, #2
 80156be:	4804      	ldr	r0, [pc, #16]	; (80156d0 <HW_IPCC_SYS_SendCmd+0x18>)
 80156c0:	f7ff fec3 	bl	801544a <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80156c4:	2102      	movs	r1, #2
 80156c6:	4802      	ldr	r0, [pc, #8]	; (80156d0 <HW_IPCC_SYS_SendCmd+0x18>)
 80156c8:	f7ff fe69 	bl	801539e <LL_C1_IPCC_EnableTransmitChannel>

  return;
 80156cc:	bf00      	nop
}
 80156ce:	bd80      	pop	{r7, pc}
 80156d0:	58000c00 	.word	0x58000c00

080156d4 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 80156d4:	b580      	push	{r7, lr}
 80156d6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80156d8:	2102      	movs	r1, #2
 80156da:	4803      	ldr	r0, [pc, #12]	; (80156e8 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 80156dc:	f7ff fe72 	bl	80153c4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 80156e0:	f7fe fc6e 	bl	8013fc0 <HW_IPCC_SYS_CmdEvtNot>

  return;
 80156e4:	bf00      	nop
}
 80156e6:	bd80      	pop	{r7, pc}
 80156e8:	58000c00 	.word	0x58000c00

080156ec <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 80156ec:	b580      	push	{r7, lr}
 80156ee:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 80156f0:	f7fe fc76 	bl	8013fe0 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80156f4:	2102      	movs	r1, #2
 80156f6:	4802      	ldr	r0, [pc, #8]	; (8015700 <HW_IPCC_SYS_EvtHandler+0x14>)
 80156f8:	f7ff fe99 	bl	801542e <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80156fc:	bf00      	nop
}
 80156fe:	bd80      	pop	{r7, pc}
 8015700:	58000c00 	.word	0x58000c00

08015704 <HW_IPCC_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void HW_IPCC_THREAD_Init( void )
{
 8015704:	b580      	push	{r7, lr}
 8015706:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8015708:	2104      	movs	r1, #4
 801570a:	4804      	ldr	r0, [pc, #16]	; (801571c <HW_IPCC_THREAD_Init+0x18>)
 801570c:	f7ff fe6c 	bl	80153e8 <LL_C1_IPCC_EnableReceiveChannel>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8015710:	2110      	movs	r1, #16
 8015712:	4802      	ldr	r0, [pc, #8]	; (801571c <HW_IPCC_THREAD_Init+0x18>)
 8015714:	f7ff fe68 	bl	80153e8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8015718:	bf00      	nop
}
 801571a:	bd80      	pop	{r7, pc}
 801571c:	58000c00 	.word	0x58000c00

08015720 <HW_IPCC_OT_SendCmd>:

void HW_IPCC_OT_SendCmd( void )
{
 8015720:	b580      	push	{r7, lr}
 8015722:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8015724:	2104      	movs	r1, #4
 8015726:	4804      	ldr	r0, [pc, #16]	; (8015738 <HW_IPCC_OT_SendCmd+0x18>)
 8015728:	f7ff fe8f 	bl	801544a <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 801572c:	2104      	movs	r1, #4
 801572e:	4802      	ldr	r0, [pc, #8]	; (8015738 <HW_IPCC_OT_SendCmd+0x18>)
 8015730:	f7ff fe35 	bl	801539e <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8015734:	bf00      	nop
}
 8015736:	bd80      	pop	{r7, pc}
 8015738:	58000c00 	.word	0x58000c00

0801573c <HW_IPCC_CLI_SendCmd>:

void HW_IPCC_CLI_SendCmd( void )
{
 801573c:	b580      	push	{r7, lr}
 801573e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_CMD_CHANNEL );
 8015740:	2110      	movs	r1, #16
 8015742:	4802      	ldr	r0, [pc, #8]	; (801574c <HW_IPCC_CLI_SendCmd+0x10>)
 8015744:	f7ff fe81 	bl	801544a <LL_C1_IPCC_SetFlag_CHx>

  return;
 8015748:	bf00      	nop
}
 801574a:	bd80      	pop	{r7, pc}
 801574c:	58000c00 	.word	0x58000c00

08015750 <HW_IPCC_THREAD_SendAck>:

void HW_IPCC_THREAD_SendAck( void )
{
 8015750:	b580      	push	{r7, lr}
 8015752:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8015754:	2104      	movs	r1, #4
 8015756:	4804      	ldr	r0, [pc, #16]	; (8015768 <HW_IPCC_THREAD_SendAck+0x18>)
 8015758:	f7ff fe69 	bl	801542e <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 801575c:	2104      	movs	r1, #4
 801575e:	4802      	ldr	r0, [pc, #8]	; (8015768 <HW_IPCC_THREAD_SendAck+0x18>)
 8015760:	f7ff fe42 	bl	80153e8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8015764:	bf00      	nop
}
 8015766:	bd80      	pop	{r7, pc}
 8015768:	58000c00 	.word	0x58000c00

0801576c <HW_IPCC_THREAD_CliSendAck>:

void HW_IPCC_THREAD_CliSendAck( void )
{
 801576c:	b580      	push	{r7, lr}
 801576e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8015770:	2110      	movs	r1, #16
 8015772:	4804      	ldr	r0, [pc, #16]	; (8015784 <HW_IPCC_THREAD_CliSendAck+0x18>)
 8015774:	f7ff fe5b 	bl	801542e <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8015778:	2110      	movs	r1, #16
 801577a:	4802      	ldr	r0, [pc, #8]	; (8015784 <HW_IPCC_THREAD_CliSendAck+0x18>)
 801577c:	f7ff fe34 	bl	80153e8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8015780:	bf00      	nop
}
 8015782:	bd80      	pop	{r7, pc}
 8015784:	58000c00 	.word	0x58000c00

08015788 <HW_IPCC_OT_CmdEvtHandler>:

static void HW_IPCC_OT_CmdEvtHandler( void )
{
 8015788:	b580      	push	{r7, lr}
 801578a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 801578c:	2104      	movs	r1, #4
 801578e:	4803      	ldr	r0, [pc, #12]	; (801579c <HW_IPCC_OT_CmdEvtHandler+0x14>)
 8015790:	f7ff fe18 	bl	80153c4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_OT_CmdEvtNot();
 8015794:	f7fe fc94 	bl	80140c0 <HW_IPCC_OT_CmdEvtNot>

  return;
 8015798:	bf00      	nop
}
 801579a:	bd80      	pop	{r7, pc}
 801579c:	58000c00 	.word	0x58000c00

080157a0 <HW_IPCC_THREAD_NotEvtHandler>:

static void HW_IPCC_THREAD_NotEvtHandler( void )
{
 80157a0:	b580      	push	{r7, lr}
 80157a2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 80157a4:	2104      	movs	r1, #4
 80157a6:	4803      	ldr	r0, [pc, #12]	; (80157b4 <HW_IPCC_THREAD_NotEvtHandler+0x14>)
 80157a8:	f7ff fe30 	bl	801540c <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_EvtNot();
 80157ac:	f7fe fc94 	bl	80140d8 <HW_IPCC_THREAD_EvtNot>

  return;
 80157b0:	bf00      	nop
}
 80157b2:	bd80      	pop	{r7, pc}
 80157b4:	58000c00 	.word	0x58000c00

080157b8 <HW_IPCC_THREAD_CliNotEvtHandler>:

static void HW_IPCC_THREAD_CliNotEvtHandler( void )
{
 80157b8:	b580      	push	{r7, lr}
 80157ba:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 80157bc:	2110      	movs	r1, #16
 80157be:	4803      	ldr	r0, [pc, #12]	; (80157cc <HW_IPCC_THREAD_CliNotEvtHandler+0x14>)
 80157c0:	f7ff fe24 	bl	801540c <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_CliEvtNot();
 80157c4:	f7fe fc94 	bl	80140f0 <HW_IPCC_THREAD_CliEvtNot>

  return;
 80157c8:	bf00      	nop
}
 80157ca:	bd80      	pop	{r7, pc}
 80157cc:	58000c00 	.word	0x58000c00

080157d0 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 80157d0:	b580      	push	{r7, lr}
 80157d2:	b082      	sub	sp, #8
 80157d4:	af00      	add	r7, sp, #0
 80157d6:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 80157d8:	2108      	movs	r1, #8
 80157da:	480c      	ldr	r0, [pc, #48]	; (801580c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80157dc:	f7ff fe44 	bl	8015468 <LL_C1_IPCC_IsActiveFlag_CHx>
 80157e0:	4603      	mov	r3, r0
 80157e2:	2b00      	cmp	r3, #0
 80157e4:	d007      	beq.n	80157f6 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 80157e6:	4a0a      	ldr	r2, [pc, #40]	; (8015810 <HW_IPCC_MM_SendFreeBuf+0x40>)
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80157ec:	2108      	movs	r1, #8
 80157ee:	4807      	ldr	r0, [pc, #28]	; (801580c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80157f0:	f7ff fdd5 	bl	801539e <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 80157f4:	e006      	b.n	8015804 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80157fa:	2108      	movs	r1, #8
 80157fc:	4803      	ldr	r0, [pc, #12]	; (801580c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80157fe:	f7ff fe24 	bl	801544a <LL_C1_IPCC_SetFlag_CHx>
  return;
 8015802:	bf00      	nop
}
 8015804:	3708      	adds	r7, #8
 8015806:	46bd      	mov	sp, r7
 8015808:	bd80      	pop	{r7, pc}
 801580a:	bf00      	nop
 801580c:	58000c00 	.word	0x58000c00
 8015810:	200276cc 	.word	0x200276cc

08015814 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8015814:	b580      	push	{r7, lr}
 8015816:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8015818:	2108      	movs	r1, #8
 801581a:	4806      	ldr	r0, [pc, #24]	; (8015834 <HW_IPCC_MM_FreeBufHandler+0x20>)
 801581c:	f7ff fdd2 	bl	80153c4 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8015820:	4b05      	ldr	r3, [pc, #20]	; (8015838 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8015822:	681b      	ldr	r3, [r3, #0]
 8015824:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8015826:	2108      	movs	r1, #8
 8015828:	4802      	ldr	r0, [pc, #8]	; (8015834 <HW_IPCC_MM_FreeBufHandler+0x20>)
 801582a:	f7ff fe0e 	bl	801544a <LL_C1_IPCC_SetFlag_CHx>

  return;
 801582e:	bf00      	nop
}
 8015830:	bd80      	pop	{r7, pc}
 8015832:	bf00      	nop
 8015834:	58000c00 	.word	0x58000c00
 8015838:	200276cc 	.word	0x200276cc

0801583c <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 801583c:	b580      	push	{r7, lr}
 801583e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8015840:	2108      	movs	r1, #8
 8015842:	4802      	ldr	r0, [pc, #8]	; (801584c <HW_IPCC_TRACES_Init+0x10>)
 8015844:	f7ff fdd0 	bl	80153e8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8015848:	bf00      	nop
}
 801584a:	bd80      	pop	{r7, pc}
 801584c:	58000c00 	.word	0x58000c00

08015850 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8015850:	b580      	push	{r7, lr}
 8015852:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8015854:	f7fe fcda 	bl	801420c <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8015858:	2108      	movs	r1, #8
 801585a:	4802      	ldr	r0, [pc, #8]	; (8015864 <HW_IPCC_TRACES_EvtHandler+0x14>)
 801585c:	f7ff fde7 	bl	801542e <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8015860:	bf00      	nop
}
 8015862:	bd80      	pop	{r7, pc}
 8015864:	58000c00 	.word	0x58000c00

08015868 <UTIL_LPM_Init>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_LPM_Init( void )
{
 8015868:	b480      	push	{r7}
 801586a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801586c:	4b05      	ldr	r3, [pc, #20]	; (8015884 <UTIL_LPM_Init+0x1c>)
 801586e:	2200      	movs	r2, #0
 8015870:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8015872:	4b05      	ldr	r3, [pc, #20]	; (8015888 <UTIL_LPM_Init+0x20>)
 8015874:	2200      	movs	r2, #0
 8015876:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8015878:	bf00      	nop
 801587a:	46bd      	mov	sp, r7
 801587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015880:	4770      	bx	lr
 8015882:	bf00      	nop
 8015884:	200276d0 	.word	0x200276d0
 8015888:	200276d4 	.word	0x200276d4

0801588c <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801588c:	b480      	push	{r7}
 801588e:	b087      	sub	sp, #28
 8015890:	af00      	add	r7, sp, #0
 8015892:	6078      	str	r0, [r7, #4]
 8015894:	460b      	mov	r3, r1
 8015896:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015898:	f3ef 8310 	mrs	r3, PRIMASK
 801589c:	613b      	str	r3, [r7, #16]
  return(result);
 801589e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 80158a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80158a2:	b672      	cpsid	i
  
  switch(state)
 80158a4:	78fb      	ldrb	r3, [r7, #3]
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	d009      	beq.n	80158be <UTIL_LPM_SetOffMode+0x32>
 80158aa:	2b01      	cmp	r3, #1
 80158ac:	d000      	beq.n	80158b0 <UTIL_LPM_SetOffMode+0x24>
    {
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
    default:
      break;
 80158ae:	e00e      	b.n	80158ce <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 80158b0:	4b0c      	ldr	r3, [pc, #48]	; (80158e4 <UTIL_LPM_SetOffMode+0x58>)
 80158b2:	681a      	ldr	r2, [r3, #0]
 80158b4:	687b      	ldr	r3, [r7, #4]
 80158b6:	4313      	orrs	r3, r2
 80158b8:	4a0a      	ldr	r2, [pc, #40]	; (80158e4 <UTIL_LPM_SetOffMode+0x58>)
 80158ba:	6013      	str	r3, [r2, #0]
      break;
 80158bc:	e007      	b.n	80158ce <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 80158be:	687b      	ldr	r3, [r7, #4]
 80158c0:	43da      	mvns	r2, r3
 80158c2:	4b08      	ldr	r3, [pc, #32]	; (80158e4 <UTIL_LPM_SetOffMode+0x58>)
 80158c4:	681b      	ldr	r3, [r3, #0]
 80158c6:	4013      	ands	r3, r2
 80158c8:	4a06      	ldr	r2, [pc, #24]	; (80158e4 <UTIL_LPM_SetOffMode+0x58>)
 80158ca:	6013      	str	r3, [r2, #0]
      break;
 80158cc:	bf00      	nop
 80158ce:	697b      	ldr	r3, [r7, #20]
 80158d0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80158d2:	68fb      	ldr	r3, [r7, #12]
 80158d4:	f383 8810 	msr	PRIMASK, r3
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80158d8:	bf00      	nop
 80158da:	371c      	adds	r7, #28
 80158dc:	46bd      	mov	sp, r7
 80158de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158e2:	4770      	bx	lr
 80158e4:	200276d4 	.word	0x200276d4

080158e8 <arm_power_f32>:
 80158e8:	b430      	push	{r4, r5}
 80158ea:	088d      	lsrs	r5, r1, #2
 80158ec:	eddf 5a20 	vldr	s11, [pc, #128]	; 8015970 <arm_power_f32+0x88>
 80158f0:	d020      	beq.n	8015934 <arm_power_f32+0x4c>
 80158f2:	f100 0310 	add.w	r3, r0, #16
 80158f6:	462c      	mov	r4, r5
 80158f8:	ed53 6a04 	vldr	s13, [r3, #-16]
 80158fc:	ed13 7a03 	vldr	s14, [r3, #-12]
 8015900:	ed53 7a02 	vldr	s15, [r3, #-8]
 8015904:	ed13 6a01 	vldr	s12, [r3, #-4]
 8015908:	ee66 6aa6 	vmul.f32	s13, s13, s13
 801590c:	ee27 7a07 	vmul.f32	s14, s14, s14
 8015910:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8015914:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8015918:	ee37 7a26 	vadd.f32	s14, s14, s13
 801591c:	ee26 6a06 	vmul.f32	s12, s12, s12
 8015920:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015924:	3c01      	subs	r4, #1
 8015926:	f103 0310 	add.w	r3, r3, #16
 801592a:	ee76 5a27 	vadd.f32	s11, s12, s15
 801592e:	d1e3      	bne.n	80158f8 <arm_power_f32+0x10>
 8015930:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8015934:	f011 0103 	ands.w	r1, r1, #3
 8015938:	d015      	beq.n	8015966 <arm_power_f32+0x7e>
 801593a:	edd0 7a00 	vldr	s15, [r0]
 801593e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8015942:	3901      	subs	r1, #1
 8015944:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8015948:	d00d      	beq.n	8015966 <arm_power_f32+0x7e>
 801594a:	edd0 7a01 	vldr	s15, [r0, #4]
 801594e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8015952:	2901      	cmp	r1, #1
 8015954:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8015958:	d005      	beq.n	8015966 <arm_power_f32+0x7e>
 801595a:	edd0 7a02 	vldr	s15, [r0, #8]
 801595e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8015962:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8015966:	edc2 5a00 	vstr	s11, [r2]
 801596a:	bc30      	pop	{r4, r5}
 801596c:	4770      	bx	lr
 801596e:	bf00      	nop
 8015970:	00000000 	.word	0x00000000

08015974 <arm_mat_mult_f32>:
 8015974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015978:	8845      	ldrh	r5, [r0, #2]
 801597a:	880b      	ldrh	r3, [r1, #0]
 801597c:	8806      	ldrh	r6, [r0, #0]
 801597e:	6847      	ldr	r7, [r0, #4]
 8015980:	6854      	ldr	r4, [r2, #4]
 8015982:	6848      	ldr	r0, [r1, #4]
 8015984:	b08b      	sub	sp, #44	; 0x2c
 8015986:	42ab      	cmp	r3, r5
 8015988:	9109      	str	r1, [sp, #36]	; 0x24
 801598a:	9604      	str	r6, [sp, #16]
 801598c:	8849      	ldrh	r1, [r1, #2]
 801598e:	f040 808a 	bne.w	8015aa6 <arm_mat_mult_f32+0x132>
 8015992:	8815      	ldrh	r5, [r2, #0]
 8015994:	42b5      	cmp	r5, r6
 8015996:	f040 8086 	bne.w	8015aa6 <arm_mat_mult_f32+0x132>
 801599a:	8852      	ldrh	r2, [r2, #2]
 801599c:	428a      	cmp	r2, r1
 801599e:	f040 8082 	bne.w	8015aa6 <arm_mat_mult_f32+0x132>
 80159a2:	ea4f 0893 	mov.w	r8, r3, lsr #2
 80159a6:	1d01      	adds	r1, r0, #4
 80159a8:	0116      	lsls	r6, r2, #4
 80159aa:	9108      	str	r1, [sp, #32]
 80159ac:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 80159b0:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 80159b4:	9101      	str	r1, [sp, #4]
 80159b6:	fb06 f108 	mul.w	r1, r6, r8
 80159ba:	0095      	lsls	r5, r2, #2
 80159bc:	9103      	str	r1, [sp, #12]
 80159be:	00d2      	lsls	r2, r2, #3
 80159c0:	ea4f 018c 	mov.w	r1, ip, lsl #2
 80159c4:	f003 0903 	and.w	r9, r3, #3
 80159c8:	009b      	lsls	r3, r3, #2
 80159ca:	f107 0b10 	add.w	fp, r7, #16
 80159ce:	eb04 0a05 	add.w	sl, r4, r5
 80159d2:	9107      	str	r1, [sp, #28]
 80159d4:	9202      	str	r2, [sp, #8]
 80159d6:	9306      	str	r3, [sp, #24]
 80159d8:	f1ab 0310 	sub.w	r3, fp, #16
 80159dc:	9305      	str	r3, [sp, #20]
 80159de:	9b07      	ldr	r3, [sp, #28]
 80159e0:	f8dd e020 	ldr.w	lr, [sp, #32]
 80159e4:	eb03 0c0a 	add.w	ip, r3, sl
 80159e8:	eddf 7a31 	vldr	s15, [pc, #196]	; 8015ab0 <arm_mat_mult_f32+0x13c>
 80159ec:	f1b8 0f00 	cmp.w	r8, #0
 80159f0:	d053      	beq.n	8015a9a <arm_mat_mult_f32+0x126>
 80159f2:	9b02      	ldr	r3, [sp, #8]
 80159f4:	4644      	mov	r4, r8
 80159f6:	18c1      	adds	r1, r0, r3
 80159f8:	4602      	mov	r2, r0
 80159fa:	465b      	mov	r3, fp
 80159fc:	ed92 6a00 	vldr	s12, [r2]
 8015a00:	ed13 7a04 	vldr	s14, [r3, #-16]
 8015a04:	ed53 4a03 	vldr	s9, [r3, #-12]
 8015a08:	ed53 6a02 	vldr	s13, [r3, #-8]
 8015a0c:	ed91 5a00 	vldr	s10, [r1]
 8015a10:	ed53 5a01 	vldr	s11, [r3, #-4]
 8015a14:	1957      	adds	r7, r2, r5
 8015a16:	ee27 7a06 	vmul.f32	s14, s14, s12
 8015a1a:	ed97 6a00 	vldr	s12, [r7]
 8015a1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015a22:	ee26 6a24 	vmul.f32	s12, s12, s9
 8015a26:	194f      	adds	r7, r1, r5
 8015a28:	ee36 6a27 	vadd.f32	s12, s12, s15
 8015a2c:	ee26 7a85 	vmul.f32	s14, s13, s10
 8015a30:	edd7 7a00 	vldr	s15, [r7]
 8015a34:	ee37 7a06 	vadd.f32	s14, s14, s12
 8015a38:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8015a3c:	3c01      	subs	r4, #1
 8015a3e:	4432      	add	r2, r6
 8015a40:	4431      	add	r1, r6
 8015a42:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015a46:	f103 0310 	add.w	r3, r3, #16
 8015a4a:	d1d7      	bne.n	80159fc <arm_mat_mult_f32+0x88>
 8015a4c:	9b03      	ldr	r3, [sp, #12]
 8015a4e:	9a01      	ldr	r2, [sp, #4]
 8015a50:	4418      	add	r0, r3
 8015a52:	f1b9 0f00 	cmp.w	r9, #0
 8015a56:	d00b      	beq.n	8015a70 <arm_mat_mult_f32+0xfc>
 8015a58:	464b      	mov	r3, r9
 8015a5a:	edd0 6a00 	vldr	s13, [r0]
 8015a5e:	ecb2 7a01 	vldmia	r2!, {s14}
 8015a62:	ee27 7a26 	vmul.f32	s14, s14, s13
 8015a66:	3b01      	subs	r3, #1
 8015a68:	4428      	add	r0, r5
 8015a6a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015a6e:	d1f4      	bne.n	8015a5a <arm_mat_mult_f32+0xe6>
 8015a70:	ecec 7a01 	vstmia	ip!, {s15}
 8015a74:	45d4      	cmp	ip, sl
 8015a76:	4670      	mov	r0, lr
 8015a78:	f10e 0e04 	add.w	lr, lr, #4
 8015a7c:	d1b4      	bne.n	80159e8 <arm_mat_mult_f32+0x74>
 8015a7e:	9a01      	ldr	r2, [sp, #4]
 8015a80:	9b06      	ldr	r3, [sp, #24]
 8015a82:	4611      	mov	r1, r2
 8015a84:	4419      	add	r1, r3
 8015a86:	449b      	add	fp, r3
 8015a88:	9b04      	ldr	r3, [sp, #16]
 8015a8a:	9101      	str	r1, [sp, #4]
 8015a8c:	3b01      	subs	r3, #1
 8015a8e:	44aa      	add	sl, r5
 8015a90:	9304      	str	r3, [sp, #16]
 8015a92:	d004      	beq.n	8015a9e <arm_mat_mult_f32+0x12a>
 8015a94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015a96:	6858      	ldr	r0, [r3, #4]
 8015a98:	e79e      	b.n	80159d8 <arm_mat_mult_f32+0x64>
 8015a9a:	9a05      	ldr	r2, [sp, #20]
 8015a9c:	e7d9      	b.n	8015a52 <arm_mat_mult_f32+0xde>
 8015a9e:	4618      	mov	r0, r3
 8015aa0:	b00b      	add	sp, #44	; 0x2c
 8015aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015aa6:	f06f 0002 	mvn.w	r0, #2
 8015aaa:	b00b      	add	sp, #44	; 0x2c
 8015aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ab0:	00000000 	.word	0x00000000

08015ab4 <arm_sin_f32>:
 8015ab4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8015b34 <arm_sin_f32+0x80>
 8015ab8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015abc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8015ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ac4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8015ac8:	d504      	bpl.n	8015ad4 <arm_sin_f32+0x20>
 8015aca:	ee17 3a90 	vmov	r3, s15
 8015ace:	3b01      	subs	r3, #1
 8015ad0:	ee07 3a90 	vmov	s15, r3
 8015ad4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015ad8:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8015b38 <arm_sin_f32+0x84>
 8015adc:	ee30 0a67 	vsub.f32	s0, s0, s15
 8015ae0:	ee20 0a07 	vmul.f32	s0, s0, s14
 8015ae4:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8015ae8:	ee17 3a90 	vmov	r3, s15
 8015aec:	b29b      	uxth	r3, r3
 8015aee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015af2:	d21a      	bcs.n	8015b2a <arm_sin_f32+0x76>
 8015af4:	ee07 3a90 	vmov	s15, r3
 8015af8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015afc:	1c59      	adds	r1, r3, #1
 8015afe:	ee30 0a67 	vsub.f32	s0, s0, s15
 8015b02:	4a0e      	ldr	r2, [pc, #56]	; (8015b3c <arm_sin_f32+0x88>)
 8015b04:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015b08:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015b0c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8015b10:	ed93 7a00 	vldr	s14, [r3]
 8015b14:	edd2 6a00 	vldr	s13, [r2]
 8015b18:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8015b1c:	ee20 0a26 	vmul.f32	s0, s0, s13
 8015b20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015b24:	ee37 0a80 	vadd.f32	s0, s15, s0
 8015b28:	4770      	bx	lr
 8015b2a:	ee30 0a47 	vsub.f32	s0, s0, s14
 8015b2e:	2101      	movs	r1, #1
 8015b30:	2300      	movs	r3, #0
 8015b32:	e7e6      	b.n	8015b02 <arm_sin_f32+0x4e>
 8015b34:	3e22f983 	.word	0x3e22f983
 8015b38:	44000000 	.word	0x44000000
 8015b3c:	08017974 	.word	0x08017974

08015b40 <arm_cos_f32>:
 8015b40:	eddf 7a21 	vldr	s15, [pc, #132]	; 8015bc8 <arm_cos_f32+0x88>
 8015b44:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015b48:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8015b4c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8015b50:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8015b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b58:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8015b5c:	d504      	bpl.n	8015b68 <arm_cos_f32+0x28>
 8015b5e:	ee17 3a90 	vmov	r3, s15
 8015b62:	3b01      	subs	r3, #1
 8015b64:	ee07 3a90 	vmov	s15, r3
 8015b68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015b6c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8015bcc <arm_cos_f32+0x8c>
 8015b70:	ee30 0a67 	vsub.f32	s0, s0, s15
 8015b74:	ee20 0a07 	vmul.f32	s0, s0, s14
 8015b78:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8015b7c:	ee17 3a90 	vmov	r3, s15
 8015b80:	b29b      	uxth	r3, r3
 8015b82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015b86:	d21a      	bcs.n	8015bbe <arm_cos_f32+0x7e>
 8015b88:	ee07 3a90 	vmov	s15, r3
 8015b8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015b90:	1c59      	adds	r1, r3, #1
 8015b92:	ee30 0a67 	vsub.f32	s0, s0, s15
 8015b96:	4a0e      	ldr	r2, [pc, #56]	; (8015bd0 <arm_cos_f32+0x90>)
 8015b98:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015b9c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015ba0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8015ba4:	ed93 7a00 	vldr	s14, [r3]
 8015ba8:	edd2 6a00 	vldr	s13, [r2]
 8015bac:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8015bb0:	ee20 0a26 	vmul.f32	s0, s0, s13
 8015bb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015bb8:	ee37 0a80 	vadd.f32	s0, s15, s0
 8015bbc:	4770      	bx	lr
 8015bbe:	ee30 0a47 	vsub.f32	s0, s0, s14
 8015bc2:	2101      	movs	r1, #1
 8015bc4:	2300      	movs	r3, #0
 8015bc6:	e7e6      	b.n	8015b96 <arm_cos_f32+0x56>
 8015bc8:	3e22f983 	.word	0x3e22f983
 8015bcc:	44000000 	.word	0x44000000
 8015bd0:	08017974 	.word	0x08017974

08015bd4 <arm_sub_f32>:
 8015bd4:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8015bd8:	b4f0      	push	{r4, r5, r6, r7}
 8015bda:	d033      	beq.n	8015c44 <arm_sub_f32+0x70>
 8015bdc:	f100 0610 	add.w	r6, r0, #16
 8015be0:	f101 0510 	add.w	r5, r1, #16
 8015be4:	f102 0410 	add.w	r4, r2, #16
 8015be8:	4667      	mov	r7, ip
 8015bea:	ed15 7a04 	vldr	s14, [r5, #-16]
 8015bee:	ed56 7a04 	vldr	s15, [r6, #-16]
 8015bf2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015bf6:	3f01      	subs	r7, #1
 8015bf8:	ed44 7a04 	vstr	s15, [r4, #-16]
 8015bfc:	ed15 7a03 	vldr	s14, [r5, #-12]
 8015c00:	ed56 7a03 	vldr	s15, [r6, #-12]
 8015c04:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015c08:	f106 0610 	add.w	r6, r6, #16
 8015c0c:	ed44 7a03 	vstr	s15, [r4, #-12]
 8015c10:	ed15 7a02 	vldr	s14, [r5, #-8]
 8015c14:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 8015c18:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015c1c:	f105 0510 	add.w	r5, r5, #16
 8015c20:	ed44 7a02 	vstr	s15, [r4, #-8]
 8015c24:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8015c28:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 8015c2c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015c30:	f104 0410 	add.w	r4, r4, #16
 8015c34:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8015c38:	d1d7      	bne.n	8015bea <arm_sub_f32+0x16>
 8015c3a:	ea4f 140c 	mov.w	r4, ip, lsl #4
 8015c3e:	4420      	add	r0, r4
 8015c40:	4421      	add	r1, r4
 8015c42:	4422      	add	r2, r4
 8015c44:	f013 0303 	ands.w	r3, r3, #3
 8015c48:	d01b      	beq.n	8015c82 <arm_sub_f32+0xae>
 8015c4a:	edd0 7a00 	vldr	s15, [r0]
 8015c4e:	ed91 7a00 	vldr	s14, [r1]
 8015c52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015c56:	3b01      	subs	r3, #1
 8015c58:	edc2 7a00 	vstr	s15, [r2]
 8015c5c:	d011      	beq.n	8015c82 <arm_sub_f32+0xae>
 8015c5e:	edd0 7a01 	vldr	s15, [r0, #4]
 8015c62:	ed91 7a01 	vldr	s14, [r1, #4]
 8015c66:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015c6a:	2b01      	cmp	r3, #1
 8015c6c:	edc2 7a01 	vstr	s15, [r2, #4]
 8015c70:	d007      	beq.n	8015c82 <arm_sub_f32+0xae>
 8015c72:	edd0 7a02 	vldr	s15, [r0, #8]
 8015c76:	ed91 7a02 	vldr	s14, [r1, #8]
 8015c7a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015c7e:	edc2 7a02 	vstr	s15, [r2, #8]
 8015c82:	bcf0      	pop	{r4, r5, r6, r7}
 8015c84:	4770      	bx	lr
 8015c86:	bf00      	nop

08015c88 <arm_scale_f32>:
 8015c88:	b470      	push	{r4, r5, r6}
 8015c8a:	0896      	lsrs	r6, r2, #2
 8015c8c:	d025      	beq.n	8015cda <arm_scale_f32+0x52>
 8015c8e:	f100 0410 	add.w	r4, r0, #16
 8015c92:	f101 0310 	add.w	r3, r1, #16
 8015c96:	4635      	mov	r5, r6
 8015c98:	ed54 7a04 	vldr	s15, [r4, #-16]
 8015c9c:	ee67 7a80 	vmul.f32	s15, s15, s0
 8015ca0:	3d01      	subs	r5, #1
 8015ca2:	ed43 7a04 	vstr	s15, [r3, #-16]
 8015ca6:	ed54 7a03 	vldr	s15, [r4, #-12]
 8015caa:	ee67 7a80 	vmul.f32	s15, s15, s0
 8015cae:	f104 0410 	add.w	r4, r4, #16
 8015cb2:	ed43 7a03 	vstr	s15, [r3, #-12]
 8015cb6:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 8015cba:	ee67 7a80 	vmul.f32	s15, s15, s0
 8015cbe:	f103 0310 	add.w	r3, r3, #16
 8015cc2:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 8015cc6:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 8015cca:	ee67 7a80 	vmul.f32	s15, s15, s0
 8015cce:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 8015cd2:	d1e1      	bne.n	8015c98 <arm_scale_f32+0x10>
 8015cd4:	0136      	lsls	r6, r6, #4
 8015cd6:	4430      	add	r0, r6
 8015cd8:	4431      	add	r1, r6
 8015cda:	f012 0203 	ands.w	r2, r2, #3
 8015cde:	d015      	beq.n	8015d0c <arm_scale_f32+0x84>
 8015ce0:	edd0 7a00 	vldr	s15, [r0]
 8015ce4:	ee67 7a80 	vmul.f32	s15, s15, s0
 8015ce8:	3a01      	subs	r2, #1
 8015cea:	edc1 7a00 	vstr	s15, [r1]
 8015cee:	d00d      	beq.n	8015d0c <arm_scale_f32+0x84>
 8015cf0:	edd0 7a01 	vldr	s15, [r0, #4]
 8015cf4:	ee67 7a80 	vmul.f32	s15, s15, s0
 8015cf8:	2a01      	cmp	r2, #1
 8015cfa:	edc1 7a01 	vstr	s15, [r1, #4]
 8015cfe:	d005      	beq.n	8015d0c <arm_scale_f32+0x84>
 8015d00:	edd0 7a02 	vldr	s15, [r0, #8]
 8015d04:	ee27 0a80 	vmul.f32	s0, s15, s0
 8015d08:	ed81 0a02 	vstr	s0, [r1, #8]
 8015d0c:	bc70      	pop	{r4, r5, r6}
 8015d0e:	4770      	bx	lr

08015d10 <arm_dot_prod_f32>:
 8015d10:	b4f0      	push	{r4, r5, r6, r7}
 8015d12:	0897      	lsrs	r7, r2, #2
 8015d14:	eddf 5a29 	vldr	s11, [pc, #164]	; 8015dbc <arm_dot_prod_f32+0xac>
 8015d18:	d02d      	beq.n	8015d76 <arm_dot_prod_f32+0x66>
 8015d1a:	f100 0510 	add.w	r5, r0, #16
 8015d1e:	f101 0410 	add.w	r4, r1, #16
 8015d22:	463e      	mov	r6, r7
 8015d24:	ed55 6a04 	vldr	s13, [r5, #-16]
 8015d28:	ed54 3a04 	vldr	s7, [r4, #-16]
 8015d2c:	ed15 7a03 	vldr	s14, [r5, #-12]
 8015d30:	ed14 4a03 	vldr	s8, [r4, #-12]
 8015d34:	ed55 7a02 	vldr	s15, [r5, #-8]
 8015d38:	ed54 4a02 	vldr	s9, [r4, #-8]
 8015d3c:	ed15 6a01 	vldr	s12, [r5, #-4]
 8015d40:	ed14 5a01 	vldr	s10, [r4, #-4]
 8015d44:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8015d48:	ee27 7a04 	vmul.f32	s14, s14, s8
 8015d4c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8015d50:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8015d54:	ee37 7a26 	vadd.f32	s14, s14, s13
 8015d58:	ee66 6a05 	vmul.f32	s13, s12, s10
 8015d5c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015d60:	3e01      	subs	r6, #1
 8015d62:	f105 0510 	add.w	r5, r5, #16
 8015d66:	ee76 5aa7 	vadd.f32	s11, s13, s15
 8015d6a:	f104 0410 	add.w	r4, r4, #16
 8015d6e:	d1d9      	bne.n	8015d24 <arm_dot_prod_f32+0x14>
 8015d70:	013f      	lsls	r7, r7, #4
 8015d72:	4438      	add	r0, r7
 8015d74:	4439      	add	r1, r7
 8015d76:	f012 0203 	ands.w	r2, r2, #3
 8015d7a:	d01b      	beq.n	8015db4 <arm_dot_prod_f32+0xa4>
 8015d7c:	edd1 7a00 	vldr	s15, [r1]
 8015d80:	ed90 7a00 	vldr	s14, [r0]
 8015d84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015d88:	3a01      	subs	r2, #1
 8015d8a:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8015d8e:	d011      	beq.n	8015db4 <arm_dot_prod_f32+0xa4>
 8015d90:	edd1 7a01 	vldr	s15, [r1, #4]
 8015d94:	ed90 7a01 	vldr	s14, [r0, #4]
 8015d98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015d9c:	2a01      	cmp	r2, #1
 8015d9e:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8015da2:	d007      	beq.n	8015db4 <arm_dot_prod_f32+0xa4>
 8015da4:	edd0 7a02 	vldr	s15, [r0, #8]
 8015da8:	ed91 7a02 	vldr	s14, [r1, #8]
 8015dac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015db0:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8015db4:	edc3 5a00 	vstr	s11, [r3]
 8015db8:	bcf0      	pop	{r4, r5, r6, r7}
 8015dba:	4770      	bx	lr
 8015dbc:	00000000 	.word	0x00000000

08015dc0 <arm_add_f32>:
 8015dc0:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8015dc4:	b4f0      	push	{r4, r5, r6, r7}
 8015dc6:	d033      	beq.n	8015e30 <arm_add_f32+0x70>
 8015dc8:	f100 0610 	add.w	r6, r0, #16
 8015dcc:	f101 0510 	add.w	r5, r1, #16
 8015dd0:	f102 0410 	add.w	r4, r2, #16
 8015dd4:	4667      	mov	r7, ip
 8015dd6:	ed15 7a04 	vldr	s14, [r5, #-16]
 8015dda:	ed56 7a04 	vldr	s15, [r6, #-16]
 8015dde:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015de2:	3f01      	subs	r7, #1
 8015de4:	ed44 7a04 	vstr	s15, [r4, #-16]
 8015de8:	ed15 7a03 	vldr	s14, [r5, #-12]
 8015dec:	ed56 7a03 	vldr	s15, [r6, #-12]
 8015df0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015df4:	f106 0610 	add.w	r6, r6, #16
 8015df8:	ed44 7a03 	vstr	s15, [r4, #-12]
 8015dfc:	ed15 7a02 	vldr	s14, [r5, #-8]
 8015e00:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 8015e04:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015e08:	f105 0510 	add.w	r5, r5, #16
 8015e0c:	ed44 7a02 	vstr	s15, [r4, #-8]
 8015e10:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8015e14:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 8015e18:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015e1c:	f104 0410 	add.w	r4, r4, #16
 8015e20:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8015e24:	d1d7      	bne.n	8015dd6 <arm_add_f32+0x16>
 8015e26:	ea4f 140c 	mov.w	r4, ip, lsl #4
 8015e2a:	4420      	add	r0, r4
 8015e2c:	4421      	add	r1, r4
 8015e2e:	4422      	add	r2, r4
 8015e30:	f013 0303 	ands.w	r3, r3, #3
 8015e34:	d01b      	beq.n	8015e6e <arm_add_f32+0xae>
 8015e36:	edd1 7a00 	vldr	s15, [r1]
 8015e3a:	ed90 7a00 	vldr	s14, [r0]
 8015e3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015e42:	3b01      	subs	r3, #1
 8015e44:	edc2 7a00 	vstr	s15, [r2]
 8015e48:	d011      	beq.n	8015e6e <arm_add_f32+0xae>
 8015e4a:	edd0 7a01 	vldr	s15, [r0, #4]
 8015e4e:	ed91 7a01 	vldr	s14, [r1, #4]
 8015e52:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015e56:	2b01      	cmp	r3, #1
 8015e58:	edc2 7a01 	vstr	s15, [r2, #4]
 8015e5c:	d007      	beq.n	8015e6e <arm_add_f32+0xae>
 8015e5e:	edd0 7a02 	vldr	s15, [r0, #8]
 8015e62:	ed91 7a02 	vldr	s14, [r1, #8]
 8015e66:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015e6a:	edc2 7a02 	vstr	s15, [r2, #8]
 8015e6e:	bcf0      	pop	{r4, r5, r6, r7}
 8015e70:	4770      	bx	lr
 8015e72:	bf00      	nop

08015e74 <__errno>:
 8015e74:	4b01      	ldr	r3, [pc, #4]	; (8015e7c <__errno+0x8>)
 8015e76:	6818      	ldr	r0, [r3, #0]
 8015e78:	4770      	bx	lr
 8015e7a:	bf00      	nop
 8015e7c:	200000f8 	.word	0x200000f8

08015e80 <__libc_init_array>:
 8015e80:	b570      	push	{r4, r5, r6, lr}
 8015e82:	4e0d      	ldr	r6, [pc, #52]	; (8015eb8 <__libc_init_array+0x38>)
 8015e84:	4c0d      	ldr	r4, [pc, #52]	; (8015ebc <__libc_init_array+0x3c>)
 8015e86:	1ba4      	subs	r4, r4, r6
 8015e88:	10a4      	asrs	r4, r4, #2
 8015e8a:	2500      	movs	r5, #0
 8015e8c:	42a5      	cmp	r5, r4
 8015e8e:	d109      	bne.n	8015ea4 <__libc_init_array+0x24>
 8015e90:	4e0b      	ldr	r6, [pc, #44]	; (8015ec0 <__libc_init_array+0x40>)
 8015e92:	4c0c      	ldr	r4, [pc, #48]	; (8015ec4 <__libc_init_array+0x44>)
 8015e94:	f001 f8d2 	bl	801703c <_init>
 8015e98:	1ba4      	subs	r4, r4, r6
 8015e9a:	10a4      	asrs	r4, r4, #2
 8015e9c:	2500      	movs	r5, #0
 8015e9e:	42a5      	cmp	r5, r4
 8015ea0:	d105      	bne.n	8015eae <__libc_init_array+0x2e>
 8015ea2:	bd70      	pop	{r4, r5, r6, pc}
 8015ea4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015ea8:	4798      	blx	r3
 8015eaa:	3501      	adds	r5, #1
 8015eac:	e7ee      	b.n	8015e8c <__libc_init_array+0xc>
 8015eae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015eb2:	4798      	blx	r3
 8015eb4:	3501      	adds	r5, #1
 8015eb6:	e7f2      	b.n	8015e9e <__libc_init_array+0x1e>
 8015eb8:	08018230 	.word	0x08018230
 8015ebc:	08018230 	.word	0x08018230
 8015ec0:	08018230 	.word	0x08018230
 8015ec4:	08018234 	.word	0x08018234

08015ec8 <memcpy>:
 8015ec8:	b510      	push	{r4, lr}
 8015eca:	1e43      	subs	r3, r0, #1
 8015ecc:	440a      	add	r2, r1
 8015ece:	4291      	cmp	r1, r2
 8015ed0:	d100      	bne.n	8015ed4 <memcpy+0xc>
 8015ed2:	bd10      	pop	{r4, pc}
 8015ed4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015ed8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015edc:	e7f7      	b.n	8015ece <memcpy+0x6>

08015ede <memset>:
 8015ede:	4402      	add	r2, r0
 8015ee0:	4603      	mov	r3, r0
 8015ee2:	4293      	cmp	r3, r2
 8015ee4:	d100      	bne.n	8015ee8 <memset+0xa>
 8015ee6:	4770      	bx	lr
 8015ee8:	f803 1b01 	strb.w	r1, [r3], #1
 8015eec:	e7f9      	b.n	8015ee2 <memset+0x4>
	...

08015ef0 <pow>:
 8015ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ef4:	ed2d 8b04 	vpush	{d8-d9}
 8015ef8:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80161cc <pow+0x2dc>
 8015efc:	b08d      	sub	sp, #52	; 0x34
 8015efe:	ec57 6b10 	vmov	r6, r7, d0
 8015f02:	ec55 4b11 	vmov	r4, r5, d1
 8015f06:	f000 f9b3 	bl	8016270 <__ieee754_pow>
 8015f0a:	f999 3000 	ldrsb.w	r3, [r9]
 8015f0e:	9300      	str	r3, [sp, #0]
 8015f10:	3301      	adds	r3, #1
 8015f12:	eeb0 8a40 	vmov.f32	s16, s0
 8015f16:	eef0 8a60 	vmov.f32	s17, s1
 8015f1a:	46c8      	mov	r8, r9
 8015f1c:	d05f      	beq.n	8015fde <pow+0xee>
 8015f1e:	4622      	mov	r2, r4
 8015f20:	462b      	mov	r3, r5
 8015f22:	4620      	mov	r0, r4
 8015f24:	4629      	mov	r1, r5
 8015f26:	f7ea fd8b 	bl	8000a40 <__aeabi_dcmpun>
 8015f2a:	4683      	mov	fp, r0
 8015f2c:	2800      	cmp	r0, #0
 8015f2e:	d156      	bne.n	8015fde <pow+0xee>
 8015f30:	4632      	mov	r2, r6
 8015f32:	463b      	mov	r3, r7
 8015f34:	4630      	mov	r0, r6
 8015f36:	4639      	mov	r1, r7
 8015f38:	f7ea fd82 	bl	8000a40 <__aeabi_dcmpun>
 8015f3c:	9001      	str	r0, [sp, #4]
 8015f3e:	b1e8      	cbz	r0, 8015f7c <pow+0x8c>
 8015f40:	2200      	movs	r2, #0
 8015f42:	2300      	movs	r3, #0
 8015f44:	4620      	mov	r0, r4
 8015f46:	4629      	mov	r1, r5
 8015f48:	f7ea fd48 	bl	80009dc <__aeabi_dcmpeq>
 8015f4c:	2800      	cmp	r0, #0
 8015f4e:	d046      	beq.n	8015fde <pow+0xee>
 8015f50:	2301      	movs	r3, #1
 8015f52:	9302      	str	r3, [sp, #8]
 8015f54:	4b96      	ldr	r3, [pc, #600]	; (80161b0 <pow+0x2c0>)
 8015f56:	9303      	str	r3, [sp, #12]
 8015f58:	4b96      	ldr	r3, [pc, #600]	; (80161b4 <pow+0x2c4>)
 8015f5a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8015f5e:	2200      	movs	r2, #0
 8015f60:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015f64:	9b00      	ldr	r3, [sp, #0]
 8015f66:	2b02      	cmp	r3, #2
 8015f68:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8015f6c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8015f70:	d033      	beq.n	8015fda <pow+0xea>
 8015f72:	a802      	add	r0, sp, #8
 8015f74:	f000 ff4e 	bl	8016e14 <matherr>
 8015f78:	bb48      	cbnz	r0, 8015fce <pow+0xde>
 8015f7a:	e05d      	b.n	8016038 <pow+0x148>
 8015f7c:	f04f 0a00 	mov.w	sl, #0
 8015f80:	f04f 0b00 	mov.w	fp, #0
 8015f84:	4652      	mov	r2, sl
 8015f86:	465b      	mov	r3, fp
 8015f88:	4630      	mov	r0, r6
 8015f8a:	4639      	mov	r1, r7
 8015f8c:	f7ea fd26 	bl	80009dc <__aeabi_dcmpeq>
 8015f90:	ec4b ab19 	vmov	d9, sl, fp
 8015f94:	2800      	cmp	r0, #0
 8015f96:	d054      	beq.n	8016042 <pow+0x152>
 8015f98:	4652      	mov	r2, sl
 8015f9a:	465b      	mov	r3, fp
 8015f9c:	4620      	mov	r0, r4
 8015f9e:	4629      	mov	r1, r5
 8015fa0:	f7ea fd1c 	bl	80009dc <__aeabi_dcmpeq>
 8015fa4:	4680      	mov	r8, r0
 8015fa6:	b318      	cbz	r0, 8015ff0 <pow+0x100>
 8015fa8:	2301      	movs	r3, #1
 8015faa:	9302      	str	r3, [sp, #8]
 8015fac:	4b80      	ldr	r3, [pc, #512]	; (80161b0 <pow+0x2c0>)
 8015fae:	9303      	str	r3, [sp, #12]
 8015fb0:	9b01      	ldr	r3, [sp, #4]
 8015fb2:	930a      	str	r3, [sp, #40]	; 0x28
 8015fb4:	9b00      	ldr	r3, [sp, #0]
 8015fb6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8015fba:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8015fbe:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8015fc2:	2b00      	cmp	r3, #0
 8015fc4:	d0d5      	beq.n	8015f72 <pow+0x82>
 8015fc6:	4b7b      	ldr	r3, [pc, #492]	; (80161b4 <pow+0x2c4>)
 8015fc8:	2200      	movs	r2, #0
 8015fca:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015fce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015fd0:	b11b      	cbz	r3, 8015fda <pow+0xea>
 8015fd2:	f7ff ff4f 	bl	8015e74 <__errno>
 8015fd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015fd8:	6003      	str	r3, [r0, #0]
 8015fda:	ed9d 8b08 	vldr	d8, [sp, #32]
 8015fde:	eeb0 0a48 	vmov.f32	s0, s16
 8015fe2:	eef0 0a68 	vmov.f32	s1, s17
 8015fe6:	b00d      	add	sp, #52	; 0x34
 8015fe8:	ecbd 8b04 	vpop	{d8-d9}
 8015fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ff0:	ec45 4b10 	vmov	d0, r4, r5
 8015ff4:	f000 ff06 	bl	8016e04 <finite>
 8015ff8:	2800      	cmp	r0, #0
 8015ffa:	d0f0      	beq.n	8015fde <pow+0xee>
 8015ffc:	4652      	mov	r2, sl
 8015ffe:	465b      	mov	r3, fp
 8016000:	4620      	mov	r0, r4
 8016002:	4629      	mov	r1, r5
 8016004:	f7ea fcf4 	bl	80009f0 <__aeabi_dcmplt>
 8016008:	2800      	cmp	r0, #0
 801600a:	d0e8      	beq.n	8015fde <pow+0xee>
 801600c:	2301      	movs	r3, #1
 801600e:	9302      	str	r3, [sp, #8]
 8016010:	4b67      	ldr	r3, [pc, #412]	; (80161b0 <pow+0x2c0>)
 8016012:	9303      	str	r3, [sp, #12]
 8016014:	f999 3000 	ldrsb.w	r3, [r9]
 8016018:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 801601c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8016020:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8016024:	b913      	cbnz	r3, 801602c <pow+0x13c>
 8016026:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801602a:	e7a2      	b.n	8015f72 <pow+0x82>
 801602c:	4962      	ldr	r1, [pc, #392]	; (80161b8 <pow+0x2c8>)
 801602e:	2000      	movs	r0, #0
 8016030:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016034:	2b02      	cmp	r3, #2
 8016036:	d19c      	bne.n	8015f72 <pow+0x82>
 8016038:	f7ff ff1c 	bl	8015e74 <__errno>
 801603c:	2321      	movs	r3, #33	; 0x21
 801603e:	6003      	str	r3, [r0, #0]
 8016040:	e7c5      	b.n	8015fce <pow+0xde>
 8016042:	eeb0 0a48 	vmov.f32	s0, s16
 8016046:	eef0 0a68 	vmov.f32	s1, s17
 801604a:	f000 fedb 	bl	8016e04 <finite>
 801604e:	9000      	str	r0, [sp, #0]
 8016050:	2800      	cmp	r0, #0
 8016052:	f040 8081 	bne.w	8016158 <pow+0x268>
 8016056:	ec47 6b10 	vmov	d0, r6, r7
 801605a:	f000 fed3 	bl	8016e04 <finite>
 801605e:	2800      	cmp	r0, #0
 8016060:	d07a      	beq.n	8016158 <pow+0x268>
 8016062:	ec45 4b10 	vmov	d0, r4, r5
 8016066:	f000 fecd 	bl	8016e04 <finite>
 801606a:	2800      	cmp	r0, #0
 801606c:	d074      	beq.n	8016158 <pow+0x268>
 801606e:	ec53 2b18 	vmov	r2, r3, d8
 8016072:	ee18 0a10 	vmov	r0, s16
 8016076:	4619      	mov	r1, r3
 8016078:	f7ea fce2 	bl	8000a40 <__aeabi_dcmpun>
 801607c:	f999 9000 	ldrsb.w	r9, [r9]
 8016080:	4b4b      	ldr	r3, [pc, #300]	; (80161b0 <pow+0x2c0>)
 8016082:	b1b0      	cbz	r0, 80160b2 <pow+0x1c2>
 8016084:	2201      	movs	r2, #1
 8016086:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801608a:	9b00      	ldr	r3, [sp, #0]
 801608c:	930a      	str	r3, [sp, #40]	; 0x28
 801608e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8016092:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8016096:	f1b9 0f00 	cmp.w	r9, #0
 801609a:	d0c4      	beq.n	8016026 <pow+0x136>
 801609c:	4652      	mov	r2, sl
 801609e:	465b      	mov	r3, fp
 80160a0:	4650      	mov	r0, sl
 80160a2:	4659      	mov	r1, fp
 80160a4:	f7ea fb5c 	bl	8000760 <__aeabi_ddiv>
 80160a8:	f1b9 0f02 	cmp.w	r9, #2
 80160ac:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80160b0:	e7c1      	b.n	8016036 <pow+0x146>
 80160b2:	2203      	movs	r2, #3
 80160b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80160b8:	900a      	str	r0, [sp, #40]	; 0x28
 80160ba:	4629      	mov	r1, r5
 80160bc:	4620      	mov	r0, r4
 80160be:	2200      	movs	r2, #0
 80160c0:	4b3e      	ldr	r3, [pc, #248]	; (80161bc <pow+0x2cc>)
 80160c2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80160c6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80160ca:	f7ea fa1f 	bl	800050c <__aeabi_dmul>
 80160ce:	4604      	mov	r4, r0
 80160d0:	460d      	mov	r5, r1
 80160d2:	f1b9 0f00 	cmp.w	r9, #0
 80160d6:	d124      	bne.n	8016122 <pow+0x232>
 80160d8:	4b39      	ldr	r3, [pc, #228]	; (80161c0 <pow+0x2d0>)
 80160da:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80160de:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80160e2:	4630      	mov	r0, r6
 80160e4:	4652      	mov	r2, sl
 80160e6:	465b      	mov	r3, fp
 80160e8:	4639      	mov	r1, r7
 80160ea:	f7ea fc81 	bl	80009f0 <__aeabi_dcmplt>
 80160ee:	2800      	cmp	r0, #0
 80160f0:	d056      	beq.n	80161a0 <pow+0x2b0>
 80160f2:	ec45 4b10 	vmov	d0, r4, r5
 80160f6:	f000 fe97 	bl	8016e28 <rint>
 80160fa:	4622      	mov	r2, r4
 80160fc:	462b      	mov	r3, r5
 80160fe:	ec51 0b10 	vmov	r0, r1, d0
 8016102:	f7ea fc6b 	bl	80009dc <__aeabi_dcmpeq>
 8016106:	b920      	cbnz	r0, 8016112 <pow+0x222>
 8016108:	4b2e      	ldr	r3, [pc, #184]	; (80161c4 <pow+0x2d4>)
 801610a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801610e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016112:	f998 3000 	ldrsb.w	r3, [r8]
 8016116:	2b02      	cmp	r3, #2
 8016118:	d142      	bne.n	80161a0 <pow+0x2b0>
 801611a:	f7ff feab 	bl	8015e74 <__errno>
 801611e:	2322      	movs	r3, #34	; 0x22
 8016120:	e78d      	b.n	801603e <pow+0x14e>
 8016122:	4b29      	ldr	r3, [pc, #164]	; (80161c8 <pow+0x2d8>)
 8016124:	2200      	movs	r2, #0
 8016126:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801612a:	4630      	mov	r0, r6
 801612c:	4652      	mov	r2, sl
 801612e:	465b      	mov	r3, fp
 8016130:	4639      	mov	r1, r7
 8016132:	f7ea fc5d 	bl	80009f0 <__aeabi_dcmplt>
 8016136:	2800      	cmp	r0, #0
 8016138:	d0eb      	beq.n	8016112 <pow+0x222>
 801613a:	ec45 4b10 	vmov	d0, r4, r5
 801613e:	f000 fe73 	bl	8016e28 <rint>
 8016142:	4622      	mov	r2, r4
 8016144:	462b      	mov	r3, r5
 8016146:	ec51 0b10 	vmov	r0, r1, d0
 801614a:	f7ea fc47 	bl	80009dc <__aeabi_dcmpeq>
 801614e:	2800      	cmp	r0, #0
 8016150:	d1df      	bne.n	8016112 <pow+0x222>
 8016152:	2200      	movs	r2, #0
 8016154:	4b18      	ldr	r3, [pc, #96]	; (80161b8 <pow+0x2c8>)
 8016156:	e7da      	b.n	801610e <pow+0x21e>
 8016158:	2200      	movs	r2, #0
 801615a:	2300      	movs	r3, #0
 801615c:	ec51 0b18 	vmov	r0, r1, d8
 8016160:	f7ea fc3c 	bl	80009dc <__aeabi_dcmpeq>
 8016164:	2800      	cmp	r0, #0
 8016166:	f43f af3a 	beq.w	8015fde <pow+0xee>
 801616a:	ec47 6b10 	vmov	d0, r6, r7
 801616e:	f000 fe49 	bl	8016e04 <finite>
 8016172:	2800      	cmp	r0, #0
 8016174:	f43f af33 	beq.w	8015fde <pow+0xee>
 8016178:	ec45 4b10 	vmov	d0, r4, r5
 801617c:	f000 fe42 	bl	8016e04 <finite>
 8016180:	2800      	cmp	r0, #0
 8016182:	f43f af2c 	beq.w	8015fde <pow+0xee>
 8016186:	2304      	movs	r3, #4
 8016188:	9302      	str	r3, [sp, #8]
 801618a:	4b09      	ldr	r3, [pc, #36]	; (80161b0 <pow+0x2c0>)
 801618c:	9303      	str	r3, [sp, #12]
 801618e:	2300      	movs	r3, #0
 8016190:	930a      	str	r3, [sp, #40]	; 0x28
 8016192:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8016196:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801619a:	ed8d 9b08 	vstr	d9, [sp, #32]
 801619e:	e7b8      	b.n	8016112 <pow+0x222>
 80161a0:	a802      	add	r0, sp, #8
 80161a2:	f000 fe37 	bl	8016e14 <matherr>
 80161a6:	2800      	cmp	r0, #0
 80161a8:	f47f af11 	bne.w	8015fce <pow+0xde>
 80161ac:	e7b5      	b.n	801611a <pow+0x22a>
 80161ae:	bf00      	nop
 80161b0:	080181d8 	.word	0x080181d8
 80161b4:	3ff00000 	.word	0x3ff00000
 80161b8:	fff00000 	.word	0xfff00000
 80161bc:	3fe00000 	.word	0x3fe00000
 80161c0:	47efffff 	.word	0x47efffff
 80161c4:	c7efffff 	.word	0xc7efffff
 80161c8:	7ff00000 	.word	0x7ff00000
 80161cc:	2000015c 	.word	0x2000015c

080161d0 <sqrtf>:
 80161d0:	b510      	push	{r4, lr}
 80161d2:	ed2d 8b02 	vpush	{d8}
 80161d6:	b08a      	sub	sp, #40	; 0x28
 80161d8:	eeb0 8a40 	vmov.f32	s16, s0
 80161dc:	f000 fe06 	bl	8016dec <__ieee754_sqrtf>
 80161e0:	4b21      	ldr	r3, [pc, #132]	; (8016268 <sqrtf+0x98>)
 80161e2:	f993 4000 	ldrsb.w	r4, [r3]
 80161e6:	1c63      	adds	r3, r4, #1
 80161e8:	d02c      	beq.n	8016244 <sqrtf+0x74>
 80161ea:	eeb4 8a48 	vcmp.f32	s16, s16
 80161ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161f2:	d627      	bvs.n	8016244 <sqrtf+0x74>
 80161f4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80161f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161fc:	d522      	bpl.n	8016244 <sqrtf+0x74>
 80161fe:	2301      	movs	r3, #1
 8016200:	9300      	str	r3, [sp, #0]
 8016202:	4b1a      	ldr	r3, [pc, #104]	; (801626c <sqrtf+0x9c>)
 8016204:	9301      	str	r3, [sp, #4]
 8016206:	ee18 0a10 	vmov	r0, s16
 801620a:	2300      	movs	r3, #0
 801620c:	9308      	str	r3, [sp, #32]
 801620e:	f7ea f925 	bl	800045c <__aeabi_f2d>
 8016212:	2200      	movs	r2, #0
 8016214:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016218:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801621c:	2300      	movs	r3, #0
 801621e:	b9ac      	cbnz	r4, 801624c <sqrtf+0x7c>
 8016220:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8016224:	4668      	mov	r0, sp
 8016226:	f000 fdf5 	bl	8016e14 <matherr>
 801622a:	b1b8      	cbz	r0, 801625c <sqrtf+0x8c>
 801622c:	9b08      	ldr	r3, [sp, #32]
 801622e:	b11b      	cbz	r3, 8016238 <sqrtf+0x68>
 8016230:	f7ff fe20 	bl	8015e74 <__errno>
 8016234:	9b08      	ldr	r3, [sp, #32]
 8016236:	6003      	str	r3, [r0, #0]
 8016238:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801623c:	f7ea fc16 	bl	8000a6c <__aeabi_d2f>
 8016240:	ee00 0a10 	vmov	s0, r0
 8016244:	b00a      	add	sp, #40	; 0x28
 8016246:	ecbd 8b02 	vpop	{d8}
 801624a:	bd10      	pop	{r4, pc}
 801624c:	4610      	mov	r0, r2
 801624e:	4619      	mov	r1, r3
 8016250:	f7ea fa86 	bl	8000760 <__aeabi_ddiv>
 8016254:	2c02      	cmp	r4, #2
 8016256:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801625a:	d1e3      	bne.n	8016224 <sqrtf+0x54>
 801625c:	f7ff fe0a 	bl	8015e74 <__errno>
 8016260:	2321      	movs	r3, #33	; 0x21
 8016262:	6003      	str	r3, [r0, #0]
 8016264:	e7e2      	b.n	801622c <sqrtf+0x5c>
 8016266:	bf00      	nop
 8016268:	2000015c 	.word	0x2000015c
 801626c:	080181dc 	.word	0x080181dc

08016270 <__ieee754_pow>:
 8016270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016274:	b091      	sub	sp, #68	; 0x44
 8016276:	ed8d 1b00 	vstr	d1, [sp]
 801627a:	e9dd 2900 	ldrd	r2, r9, [sp]
 801627e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8016282:	ea58 0302 	orrs.w	r3, r8, r2
 8016286:	ec57 6b10 	vmov	r6, r7, d0
 801628a:	f000 84be 	beq.w	8016c0a <__ieee754_pow+0x99a>
 801628e:	4b7a      	ldr	r3, [pc, #488]	; (8016478 <__ieee754_pow+0x208>)
 8016290:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8016294:	429c      	cmp	r4, r3
 8016296:	463d      	mov	r5, r7
 8016298:	ee10 aa10 	vmov	sl, s0
 801629c:	dc09      	bgt.n	80162b2 <__ieee754_pow+0x42>
 801629e:	d103      	bne.n	80162a8 <__ieee754_pow+0x38>
 80162a0:	b93e      	cbnz	r6, 80162b2 <__ieee754_pow+0x42>
 80162a2:	45a0      	cmp	r8, r4
 80162a4:	dc0d      	bgt.n	80162c2 <__ieee754_pow+0x52>
 80162a6:	e001      	b.n	80162ac <__ieee754_pow+0x3c>
 80162a8:	4598      	cmp	r8, r3
 80162aa:	dc02      	bgt.n	80162b2 <__ieee754_pow+0x42>
 80162ac:	4598      	cmp	r8, r3
 80162ae:	d10e      	bne.n	80162ce <__ieee754_pow+0x5e>
 80162b0:	b16a      	cbz	r2, 80162ce <__ieee754_pow+0x5e>
 80162b2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80162b6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80162ba:	ea54 030a 	orrs.w	r3, r4, sl
 80162be:	f000 84a4 	beq.w	8016c0a <__ieee754_pow+0x99a>
 80162c2:	486e      	ldr	r0, [pc, #440]	; (801647c <__ieee754_pow+0x20c>)
 80162c4:	b011      	add	sp, #68	; 0x44
 80162c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162ca:	f000 bda5 	b.w	8016e18 <nan>
 80162ce:	2d00      	cmp	r5, #0
 80162d0:	da53      	bge.n	801637a <__ieee754_pow+0x10a>
 80162d2:	4b6b      	ldr	r3, [pc, #428]	; (8016480 <__ieee754_pow+0x210>)
 80162d4:	4598      	cmp	r8, r3
 80162d6:	dc4d      	bgt.n	8016374 <__ieee754_pow+0x104>
 80162d8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80162dc:	4598      	cmp	r8, r3
 80162de:	dd4c      	ble.n	801637a <__ieee754_pow+0x10a>
 80162e0:	ea4f 5328 	mov.w	r3, r8, asr #20
 80162e4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80162e8:	2b14      	cmp	r3, #20
 80162ea:	dd26      	ble.n	801633a <__ieee754_pow+0xca>
 80162ec:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80162f0:	fa22 f103 	lsr.w	r1, r2, r3
 80162f4:	fa01 f303 	lsl.w	r3, r1, r3
 80162f8:	4293      	cmp	r3, r2
 80162fa:	d13e      	bne.n	801637a <__ieee754_pow+0x10a>
 80162fc:	f001 0101 	and.w	r1, r1, #1
 8016300:	f1c1 0b02 	rsb	fp, r1, #2
 8016304:	2a00      	cmp	r2, #0
 8016306:	d15b      	bne.n	80163c0 <__ieee754_pow+0x150>
 8016308:	4b5b      	ldr	r3, [pc, #364]	; (8016478 <__ieee754_pow+0x208>)
 801630a:	4598      	cmp	r8, r3
 801630c:	d124      	bne.n	8016358 <__ieee754_pow+0xe8>
 801630e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8016312:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8016316:	ea53 030a 	orrs.w	r3, r3, sl
 801631a:	f000 8476 	beq.w	8016c0a <__ieee754_pow+0x99a>
 801631e:	4b59      	ldr	r3, [pc, #356]	; (8016484 <__ieee754_pow+0x214>)
 8016320:	429c      	cmp	r4, r3
 8016322:	dd2d      	ble.n	8016380 <__ieee754_pow+0x110>
 8016324:	f1b9 0f00 	cmp.w	r9, #0
 8016328:	f280 8473 	bge.w	8016c12 <__ieee754_pow+0x9a2>
 801632c:	2000      	movs	r0, #0
 801632e:	2100      	movs	r1, #0
 8016330:	ec41 0b10 	vmov	d0, r0, r1
 8016334:	b011      	add	sp, #68	; 0x44
 8016336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801633a:	2a00      	cmp	r2, #0
 801633c:	d13e      	bne.n	80163bc <__ieee754_pow+0x14c>
 801633e:	f1c3 0314 	rsb	r3, r3, #20
 8016342:	fa48 f103 	asr.w	r1, r8, r3
 8016346:	fa01 f303 	lsl.w	r3, r1, r3
 801634a:	4543      	cmp	r3, r8
 801634c:	f040 8469 	bne.w	8016c22 <__ieee754_pow+0x9b2>
 8016350:	f001 0101 	and.w	r1, r1, #1
 8016354:	f1c1 0b02 	rsb	fp, r1, #2
 8016358:	4b4b      	ldr	r3, [pc, #300]	; (8016488 <__ieee754_pow+0x218>)
 801635a:	4598      	cmp	r8, r3
 801635c:	d118      	bne.n	8016390 <__ieee754_pow+0x120>
 801635e:	f1b9 0f00 	cmp.w	r9, #0
 8016362:	f280 845a 	bge.w	8016c1a <__ieee754_pow+0x9aa>
 8016366:	4948      	ldr	r1, [pc, #288]	; (8016488 <__ieee754_pow+0x218>)
 8016368:	4632      	mov	r2, r6
 801636a:	463b      	mov	r3, r7
 801636c:	2000      	movs	r0, #0
 801636e:	f7ea f9f7 	bl	8000760 <__aeabi_ddiv>
 8016372:	e7dd      	b.n	8016330 <__ieee754_pow+0xc0>
 8016374:	f04f 0b02 	mov.w	fp, #2
 8016378:	e7c4      	b.n	8016304 <__ieee754_pow+0x94>
 801637a:	f04f 0b00 	mov.w	fp, #0
 801637e:	e7c1      	b.n	8016304 <__ieee754_pow+0x94>
 8016380:	f1b9 0f00 	cmp.w	r9, #0
 8016384:	dad2      	bge.n	801632c <__ieee754_pow+0xbc>
 8016386:	e9dd 0300 	ldrd	r0, r3, [sp]
 801638a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801638e:	e7cf      	b.n	8016330 <__ieee754_pow+0xc0>
 8016390:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8016394:	d106      	bne.n	80163a4 <__ieee754_pow+0x134>
 8016396:	4632      	mov	r2, r6
 8016398:	463b      	mov	r3, r7
 801639a:	4610      	mov	r0, r2
 801639c:	4619      	mov	r1, r3
 801639e:	f7ea f8b5 	bl	800050c <__aeabi_dmul>
 80163a2:	e7c5      	b.n	8016330 <__ieee754_pow+0xc0>
 80163a4:	4b39      	ldr	r3, [pc, #228]	; (801648c <__ieee754_pow+0x21c>)
 80163a6:	4599      	cmp	r9, r3
 80163a8:	d10a      	bne.n	80163c0 <__ieee754_pow+0x150>
 80163aa:	2d00      	cmp	r5, #0
 80163ac:	db08      	blt.n	80163c0 <__ieee754_pow+0x150>
 80163ae:	ec47 6b10 	vmov	d0, r6, r7
 80163b2:	b011      	add	sp, #68	; 0x44
 80163b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163b8:	f000 bc68 	b.w	8016c8c <__ieee754_sqrt>
 80163bc:	f04f 0b00 	mov.w	fp, #0
 80163c0:	ec47 6b10 	vmov	d0, r6, r7
 80163c4:	f000 fd15 	bl	8016df2 <fabs>
 80163c8:	ec51 0b10 	vmov	r0, r1, d0
 80163cc:	f1ba 0f00 	cmp.w	sl, #0
 80163d0:	d127      	bne.n	8016422 <__ieee754_pow+0x1b2>
 80163d2:	b124      	cbz	r4, 80163de <__ieee754_pow+0x16e>
 80163d4:	4b2c      	ldr	r3, [pc, #176]	; (8016488 <__ieee754_pow+0x218>)
 80163d6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80163da:	429a      	cmp	r2, r3
 80163dc:	d121      	bne.n	8016422 <__ieee754_pow+0x1b2>
 80163de:	f1b9 0f00 	cmp.w	r9, #0
 80163e2:	da05      	bge.n	80163f0 <__ieee754_pow+0x180>
 80163e4:	4602      	mov	r2, r0
 80163e6:	460b      	mov	r3, r1
 80163e8:	2000      	movs	r0, #0
 80163ea:	4927      	ldr	r1, [pc, #156]	; (8016488 <__ieee754_pow+0x218>)
 80163ec:	f7ea f9b8 	bl	8000760 <__aeabi_ddiv>
 80163f0:	2d00      	cmp	r5, #0
 80163f2:	da9d      	bge.n	8016330 <__ieee754_pow+0xc0>
 80163f4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80163f8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80163fc:	ea54 030b 	orrs.w	r3, r4, fp
 8016400:	d108      	bne.n	8016414 <__ieee754_pow+0x1a4>
 8016402:	4602      	mov	r2, r0
 8016404:	460b      	mov	r3, r1
 8016406:	4610      	mov	r0, r2
 8016408:	4619      	mov	r1, r3
 801640a:	f7e9 fec7 	bl	800019c <__aeabi_dsub>
 801640e:	4602      	mov	r2, r0
 8016410:	460b      	mov	r3, r1
 8016412:	e7ac      	b.n	801636e <__ieee754_pow+0xfe>
 8016414:	f1bb 0f01 	cmp.w	fp, #1
 8016418:	d18a      	bne.n	8016330 <__ieee754_pow+0xc0>
 801641a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801641e:	4619      	mov	r1, r3
 8016420:	e786      	b.n	8016330 <__ieee754_pow+0xc0>
 8016422:	0fed      	lsrs	r5, r5, #31
 8016424:	1e6b      	subs	r3, r5, #1
 8016426:	930d      	str	r3, [sp, #52]	; 0x34
 8016428:	ea5b 0303 	orrs.w	r3, fp, r3
 801642c:	d102      	bne.n	8016434 <__ieee754_pow+0x1c4>
 801642e:	4632      	mov	r2, r6
 8016430:	463b      	mov	r3, r7
 8016432:	e7e8      	b.n	8016406 <__ieee754_pow+0x196>
 8016434:	4b16      	ldr	r3, [pc, #88]	; (8016490 <__ieee754_pow+0x220>)
 8016436:	4598      	cmp	r8, r3
 8016438:	f340 80fe 	ble.w	8016638 <__ieee754_pow+0x3c8>
 801643c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8016440:	4598      	cmp	r8, r3
 8016442:	dd0a      	ble.n	801645a <__ieee754_pow+0x1ea>
 8016444:	4b0f      	ldr	r3, [pc, #60]	; (8016484 <__ieee754_pow+0x214>)
 8016446:	429c      	cmp	r4, r3
 8016448:	dc0d      	bgt.n	8016466 <__ieee754_pow+0x1f6>
 801644a:	f1b9 0f00 	cmp.w	r9, #0
 801644e:	f6bf af6d 	bge.w	801632c <__ieee754_pow+0xbc>
 8016452:	a307      	add	r3, pc, #28	; (adr r3, 8016470 <__ieee754_pow+0x200>)
 8016454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016458:	e79f      	b.n	801639a <__ieee754_pow+0x12a>
 801645a:	4b0e      	ldr	r3, [pc, #56]	; (8016494 <__ieee754_pow+0x224>)
 801645c:	429c      	cmp	r4, r3
 801645e:	ddf4      	ble.n	801644a <__ieee754_pow+0x1da>
 8016460:	4b09      	ldr	r3, [pc, #36]	; (8016488 <__ieee754_pow+0x218>)
 8016462:	429c      	cmp	r4, r3
 8016464:	dd18      	ble.n	8016498 <__ieee754_pow+0x228>
 8016466:	f1b9 0f00 	cmp.w	r9, #0
 801646a:	dcf2      	bgt.n	8016452 <__ieee754_pow+0x1e2>
 801646c:	e75e      	b.n	801632c <__ieee754_pow+0xbc>
 801646e:	bf00      	nop
 8016470:	8800759c 	.word	0x8800759c
 8016474:	7e37e43c 	.word	0x7e37e43c
 8016478:	7ff00000 	.word	0x7ff00000
 801647c:	080181e1 	.word	0x080181e1
 8016480:	433fffff 	.word	0x433fffff
 8016484:	3fefffff 	.word	0x3fefffff
 8016488:	3ff00000 	.word	0x3ff00000
 801648c:	3fe00000 	.word	0x3fe00000
 8016490:	41e00000 	.word	0x41e00000
 8016494:	3feffffe 	.word	0x3feffffe
 8016498:	2200      	movs	r2, #0
 801649a:	4b63      	ldr	r3, [pc, #396]	; (8016628 <__ieee754_pow+0x3b8>)
 801649c:	f7e9 fe7e 	bl	800019c <__aeabi_dsub>
 80164a0:	a355      	add	r3, pc, #340	; (adr r3, 80165f8 <__ieee754_pow+0x388>)
 80164a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164a6:	4604      	mov	r4, r0
 80164a8:	460d      	mov	r5, r1
 80164aa:	f7ea f82f 	bl	800050c <__aeabi_dmul>
 80164ae:	a354      	add	r3, pc, #336	; (adr r3, 8016600 <__ieee754_pow+0x390>)
 80164b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164b4:	4606      	mov	r6, r0
 80164b6:	460f      	mov	r7, r1
 80164b8:	4620      	mov	r0, r4
 80164ba:	4629      	mov	r1, r5
 80164bc:	f7ea f826 	bl	800050c <__aeabi_dmul>
 80164c0:	2200      	movs	r2, #0
 80164c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80164c6:	4b59      	ldr	r3, [pc, #356]	; (801662c <__ieee754_pow+0x3bc>)
 80164c8:	4620      	mov	r0, r4
 80164ca:	4629      	mov	r1, r5
 80164cc:	f7ea f81e 	bl	800050c <__aeabi_dmul>
 80164d0:	4602      	mov	r2, r0
 80164d2:	460b      	mov	r3, r1
 80164d4:	a14c      	add	r1, pc, #304	; (adr r1, 8016608 <__ieee754_pow+0x398>)
 80164d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80164da:	f7e9 fe5f 	bl	800019c <__aeabi_dsub>
 80164de:	4622      	mov	r2, r4
 80164e0:	462b      	mov	r3, r5
 80164e2:	f7ea f813 	bl	800050c <__aeabi_dmul>
 80164e6:	4602      	mov	r2, r0
 80164e8:	460b      	mov	r3, r1
 80164ea:	2000      	movs	r0, #0
 80164ec:	4950      	ldr	r1, [pc, #320]	; (8016630 <__ieee754_pow+0x3c0>)
 80164ee:	f7e9 fe55 	bl	800019c <__aeabi_dsub>
 80164f2:	4622      	mov	r2, r4
 80164f4:	462b      	mov	r3, r5
 80164f6:	4680      	mov	r8, r0
 80164f8:	4689      	mov	r9, r1
 80164fa:	4620      	mov	r0, r4
 80164fc:	4629      	mov	r1, r5
 80164fe:	f7ea f805 	bl	800050c <__aeabi_dmul>
 8016502:	4602      	mov	r2, r0
 8016504:	460b      	mov	r3, r1
 8016506:	4640      	mov	r0, r8
 8016508:	4649      	mov	r1, r9
 801650a:	f7e9 ffff 	bl	800050c <__aeabi_dmul>
 801650e:	a340      	add	r3, pc, #256	; (adr r3, 8016610 <__ieee754_pow+0x3a0>)
 8016510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016514:	f7e9 fffa 	bl	800050c <__aeabi_dmul>
 8016518:	4602      	mov	r2, r0
 801651a:	460b      	mov	r3, r1
 801651c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016520:	f7e9 fe3c 	bl	800019c <__aeabi_dsub>
 8016524:	4602      	mov	r2, r0
 8016526:	460b      	mov	r3, r1
 8016528:	4604      	mov	r4, r0
 801652a:	460d      	mov	r5, r1
 801652c:	4630      	mov	r0, r6
 801652e:	4639      	mov	r1, r7
 8016530:	f7e9 fe36 	bl	80001a0 <__adddf3>
 8016534:	2000      	movs	r0, #0
 8016536:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801653a:	4632      	mov	r2, r6
 801653c:	463b      	mov	r3, r7
 801653e:	f7e9 fe2d 	bl	800019c <__aeabi_dsub>
 8016542:	4602      	mov	r2, r0
 8016544:	460b      	mov	r3, r1
 8016546:	4620      	mov	r0, r4
 8016548:	4629      	mov	r1, r5
 801654a:	f7e9 fe27 	bl	800019c <__aeabi_dsub>
 801654e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016550:	f10b 33ff 	add.w	r3, fp, #4294967295
 8016554:	4313      	orrs	r3, r2
 8016556:	4606      	mov	r6, r0
 8016558:	460f      	mov	r7, r1
 801655a:	f040 81eb 	bne.w	8016934 <__ieee754_pow+0x6c4>
 801655e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8016618 <__ieee754_pow+0x3a8>
 8016562:	e9dd 4500 	ldrd	r4, r5, [sp]
 8016566:	2400      	movs	r4, #0
 8016568:	4622      	mov	r2, r4
 801656a:	462b      	mov	r3, r5
 801656c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016570:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016574:	f7e9 fe12 	bl	800019c <__aeabi_dsub>
 8016578:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801657c:	f7e9 ffc6 	bl	800050c <__aeabi_dmul>
 8016580:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016584:	4680      	mov	r8, r0
 8016586:	4689      	mov	r9, r1
 8016588:	4630      	mov	r0, r6
 801658a:	4639      	mov	r1, r7
 801658c:	f7e9 ffbe 	bl	800050c <__aeabi_dmul>
 8016590:	4602      	mov	r2, r0
 8016592:	460b      	mov	r3, r1
 8016594:	4640      	mov	r0, r8
 8016596:	4649      	mov	r1, r9
 8016598:	f7e9 fe02 	bl	80001a0 <__adddf3>
 801659c:	4622      	mov	r2, r4
 801659e:	462b      	mov	r3, r5
 80165a0:	4680      	mov	r8, r0
 80165a2:	4689      	mov	r9, r1
 80165a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80165a8:	f7e9 ffb0 	bl	800050c <__aeabi_dmul>
 80165ac:	460b      	mov	r3, r1
 80165ae:	4604      	mov	r4, r0
 80165b0:	460d      	mov	r5, r1
 80165b2:	4602      	mov	r2, r0
 80165b4:	4649      	mov	r1, r9
 80165b6:	4640      	mov	r0, r8
 80165b8:	e9cd 4500 	strd	r4, r5, [sp]
 80165bc:	f7e9 fdf0 	bl	80001a0 <__adddf3>
 80165c0:	4b1c      	ldr	r3, [pc, #112]	; (8016634 <__ieee754_pow+0x3c4>)
 80165c2:	4299      	cmp	r1, r3
 80165c4:	4606      	mov	r6, r0
 80165c6:	460f      	mov	r7, r1
 80165c8:	468b      	mov	fp, r1
 80165ca:	f340 82f7 	ble.w	8016bbc <__ieee754_pow+0x94c>
 80165ce:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80165d2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80165d6:	4303      	orrs	r3, r0
 80165d8:	f000 81ea 	beq.w	80169b0 <__ieee754_pow+0x740>
 80165dc:	a310      	add	r3, pc, #64	; (adr r3, 8016620 <__ieee754_pow+0x3b0>)
 80165de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80165e6:	f7e9 ff91 	bl	800050c <__aeabi_dmul>
 80165ea:	a30d      	add	r3, pc, #52	; (adr r3, 8016620 <__ieee754_pow+0x3b0>)
 80165ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165f0:	e6d5      	b.n	801639e <__ieee754_pow+0x12e>
 80165f2:	bf00      	nop
 80165f4:	f3af 8000 	nop.w
 80165f8:	60000000 	.word	0x60000000
 80165fc:	3ff71547 	.word	0x3ff71547
 8016600:	f85ddf44 	.word	0xf85ddf44
 8016604:	3e54ae0b 	.word	0x3e54ae0b
 8016608:	55555555 	.word	0x55555555
 801660c:	3fd55555 	.word	0x3fd55555
 8016610:	652b82fe 	.word	0x652b82fe
 8016614:	3ff71547 	.word	0x3ff71547
 8016618:	00000000 	.word	0x00000000
 801661c:	bff00000 	.word	0xbff00000
 8016620:	8800759c 	.word	0x8800759c
 8016624:	7e37e43c 	.word	0x7e37e43c
 8016628:	3ff00000 	.word	0x3ff00000
 801662c:	3fd00000 	.word	0x3fd00000
 8016630:	3fe00000 	.word	0x3fe00000
 8016634:	408fffff 	.word	0x408fffff
 8016638:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801663c:	f04f 0200 	mov.w	r2, #0
 8016640:	da05      	bge.n	801664e <__ieee754_pow+0x3de>
 8016642:	4bd3      	ldr	r3, [pc, #844]	; (8016990 <__ieee754_pow+0x720>)
 8016644:	f7e9 ff62 	bl	800050c <__aeabi_dmul>
 8016648:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801664c:	460c      	mov	r4, r1
 801664e:	1523      	asrs	r3, r4, #20
 8016650:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8016654:	4413      	add	r3, r2
 8016656:	9309      	str	r3, [sp, #36]	; 0x24
 8016658:	4bce      	ldr	r3, [pc, #824]	; (8016994 <__ieee754_pow+0x724>)
 801665a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801665e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8016662:	429c      	cmp	r4, r3
 8016664:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8016668:	dd08      	ble.n	801667c <__ieee754_pow+0x40c>
 801666a:	4bcb      	ldr	r3, [pc, #812]	; (8016998 <__ieee754_pow+0x728>)
 801666c:	429c      	cmp	r4, r3
 801666e:	f340 815e 	ble.w	801692e <__ieee754_pow+0x6be>
 8016672:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016674:	3301      	adds	r3, #1
 8016676:	9309      	str	r3, [sp, #36]	; 0x24
 8016678:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801667c:	f04f 0a00 	mov.w	sl, #0
 8016680:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8016684:	930c      	str	r3, [sp, #48]	; 0x30
 8016686:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016688:	4bc4      	ldr	r3, [pc, #784]	; (801699c <__ieee754_pow+0x72c>)
 801668a:	4413      	add	r3, r2
 801668c:	ed93 7b00 	vldr	d7, [r3]
 8016690:	4629      	mov	r1, r5
 8016692:	ec53 2b17 	vmov	r2, r3, d7
 8016696:	ed8d 7b06 	vstr	d7, [sp, #24]
 801669a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801669e:	f7e9 fd7d 	bl	800019c <__aeabi_dsub>
 80166a2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80166a6:	4606      	mov	r6, r0
 80166a8:	460f      	mov	r7, r1
 80166aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80166ae:	f7e9 fd77 	bl	80001a0 <__adddf3>
 80166b2:	4602      	mov	r2, r0
 80166b4:	460b      	mov	r3, r1
 80166b6:	2000      	movs	r0, #0
 80166b8:	49b9      	ldr	r1, [pc, #740]	; (80169a0 <__ieee754_pow+0x730>)
 80166ba:	f7ea f851 	bl	8000760 <__aeabi_ddiv>
 80166be:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80166c2:	4602      	mov	r2, r0
 80166c4:	460b      	mov	r3, r1
 80166c6:	4630      	mov	r0, r6
 80166c8:	4639      	mov	r1, r7
 80166ca:	f7e9 ff1f 	bl	800050c <__aeabi_dmul>
 80166ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80166d2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80166d6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80166da:	2300      	movs	r3, #0
 80166dc:	9302      	str	r3, [sp, #8]
 80166de:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80166e2:	106d      	asrs	r5, r5, #1
 80166e4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80166e8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80166ec:	2200      	movs	r2, #0
 80166ee:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80166f2:	4640      	mov	r0, r8
 80166f4:	4649      	mov	r1, r9
 80166f6:	4614      	mov	r4, r2
 80166f8:	461d      	mov	r5, r3
 80166fa:	f7e9 ff07 	bl	800050c <__aeabi_dmul>
 80166fe:	4602      	mov	r2, r0
 8016700:	460b      	mov	r3, r1
 8016702:	4630      	mov	r0, r6
 8016704:	4639      	mov	r1, r7
 8016706:	f7e9 fd49 	bl	800019c <__aeabi_dsub>
 801670a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801670e:	4606      	mov	r6, r0
 8016710:	460f      	mov	r7, r1
 8016712:	4620      	mov	r0, r4
 8016714:	4629      	mov	r1, r5
 8016716:	f7e9 fd41 	bl	800019c <__aeabi_dsub>
 801671a:	4602      	mov	r2, r0
 801671c:	460b      	mov	r3, r1
 801671e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016722:	f7e9 fd3b 	bl	800019c <__aeabi_dsub>
 8016726:	4642      	mov	r2, r8
 8016728:	464b      	mov	r3, r9
 801672a:	f7e9 feef 	bl	800050c <__aeabi_dmul>
 801672e:	4602      	mov	r2, r0
 8016730:	460b      	mov	r3, r1
 8016732:	4630      	mov	r0, r6
 8016734:	4639      	mov	r1, r7
 8016736:	f7e9 fd31 	bl	800019c <__aeabi_dsub>
 801673a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801673e:	f7e9 fee5 	bl	800050c <__aeabi_dmul>
 8016742:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016746:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801674a:	4610      	mov	r0, r2
 801674c:	4619      	mov	r1, r3
 801674e:	f7e9 fedd 	bl	800050c <__aeabi_dmul>
 8016752:	a37b      	add	r3, pc, #492	; (adr r3, 8016940 <__ieee754_pow+0x6d0>)
 8016754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016758:	4604      	mov	r4, r0
 801675a:	460d      	mov	r5, r1
 801675c:	f7e9 fed6 	bl	800050c <__aeabi_dmul>
 8016760:	a379      	add	r3, pc, #484	; (adr r3, 8016948 <__ieee754_pow+0x6d8>)
 8016762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016766:	f7e9 fd1b 	bl	80001a0 <__adddf3>
 801676a:	4622      	mov	r2, r4
 801676c:	462b      	mov	r3, r5
 801676e:	f7e9 fecd 	bl	800050c <__aeabi_dmul>
 8016772:	a377      	add	r3, pc, #476	; (adr r3, 8016950 <__ieee754_pow+0x6e0>)
 8016774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016778:	f7e9 fd12 	bl	80001a0 <__adddf3>
 801677c:	4622      	mov	r2, r4
 801677e:	462b      	mov	r3, r5
 8016780:	f7e9 fec4 	bl	800050c <__aeabi_dmul>
 8016784:	a374      	add	r3, pc, #464	; (adr r3, 8016958 <__ieee754_pow+0x6e8>)
 8016786:	e9d3 2300 	ldrd	r2, r3, [r3]
 801678a:	f7e9 fd09 	bl	80001a0 <__adddf3>
 801678e:	4622      	mov	r2, r4
 8016790:	462b      	mov	r3, r5
 8016792:	f7e9 febb 	bl	800050c <__aeabi_dmul>
 8016796:	a372      	add	r3, pc, #456	; (adr r3, 8016960 <__ieee754_pow+0x6f0>)
 8016798:	e9d3 2300 	ldrd	r2, r3, [r3]
 801679c:	f7e9 fd00 	bl	80001a0 <__adddf3>
 80167a0:	4622      	mov	r2, r4
 80167a2:	462b      	mov	r3, r5
 80167a4:	f7e9 feb2 	bl	800050c <__aeabi_dmul>
 80167a8:	a36f      	add	r3, pc, #444	; (adr r3, 8016968 <__ieee754_pow+0x6f8>)
 80167aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167ae:	f7e9 fcf7 	bl	80001a0 <__adddf3>
 80167b2:	4622      	mov	r2, r4
 80167b4:	4606      	mov	r6, r0
 80167b6:	460f      	mov	r7, r1
 80167b8:	462b      	mov	r3, r5
 80167ba:	4620      	mov	r0, r4
 80167bc:	4629      	mov	r1, r5
 80167be:	f7e9 fea5 	bl	800050c <__aeabi_dmul>
 80167c2:	4602      	mov	r2, r0
 80167c4:	460b      	mov	r3, r1
 80167c6:	4630      	mov	r0, r6
 80167c8:	4639      	mov	r1, r7
 80167ca:	f7e9 fe9f 	bl	800050c <__aeabi_dmul>
 80167ce:	4642      	mov	r2, r8
 80167d0:	4604      	mov	r4, r0
 80167d2:	460d      	mov	r5, r1
 80167d4:	464b      	mov	r3, r9
 80167d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80167da:	f7e9 fce1 	bl	80001a0 <__adddf3>
 80167de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80167e2:	f7e9 fe93 	bl	800050c <__aeabi_dmul>
 80167e6:	4622      	mov	r2, r4
 80167e8:	462b      	mov	r3, r5
 80167ea:	f7e9 fcd9 	bl	80001a0 <__adddf3>
 80167ee:	4642      	mov	r2, r8
 80167f0:	4606      	mov	r6, r0
 80167f2:	460f      	mov	r7, r1
 80167f4:	464b      	mov	r3, r9
 80167f6:	4640      	mov	r0, r8
 80167f8:	4649      	mov	r1, r9
 80167fa:	f7e9 fe87 	bl	800050c <__aeabi_dmul>
 80167fe:	2200      	movs	r2, #0
 8016800:	4b68      	ldr	r3, [pc, #416]	; (80169a4 <__ieee754_pow+0x734>)
 8016802:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8016806:	f7e9 fccb 	bl	80001a0 <__adddf3>
 801680a:	4632      	mov	r2, r6
 801680c:	463b      	mov	r3, r7
 801680e:	f7e9 fcc7 	bl	80001a0 <__adddf3>
 8016812:	9802      	ldr	r0, [sp, #8]
 8016814:	460d      	mov	r5, r1
 8016816:	4604      	mov	r4, r0
 8016818:	4602      	mov	r2, r0
 801681a:	460b      	mov	r3, r1
 801681c:	4640      	mov	r0, r8
 801681e:	4649      	mov	r1, r9
 8016820:	f7e9 fe74 	bl	800050c <__aeabi_dmul>
 8016824:	2200      	movs	r2, #0
 8016826:	4680      	mov	r8, r0
 8016828:	4689      	mov	r9, r1
 801682a:	4b5e      	ldr	r3, [pc, #376]	; (80169a4 <__ieee754_pow+0x734>)
 801682c:	4620      	mov	r0, r4
 801682e:	4629      	mov	r1, r5
 8016830:	f7e9 fcb4 	bl	800019c <__aeabi_dsub>
 8016834:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8016838:	f7e9 fcb0 	bl	800019c <__aeabi_dsub>
 801683c:	4602      	mov	r2, r0
 801683e:	460b      	mov	r3, r1
 8016840:	4630      	mov	r0, r6
 8016842:	4639      	mov	r1, r7
 8016844:	f7e9 fcaa 	bl	800019c <__aeabi_dsub>
 8016848:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801684c:	f7e9 fe5e 	bl	800050c <__aeabi_dmul>
 8016850:	4622      	mov	r2, r4
 8016852:	4606      	mov	r6, r0
 8016854:	460f      	mov	r7, r1
 8016856:	462b      	mov	r3, r5
 8016858:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801685c:	f7e9 fe56 	bl	800050c <__aeabi_dmul>
 8016860:	4602      	mov	r2, r0
 8016862:	460b      	mov	r3, r1
 8016864:	4630      	mov	r0, r6
 8016866:	4639      	mov	r1, r7
 8016868:	f7e9 fc9a 	bl	80001a0 <__adddf3>
 801686c:	4606      	mov	r6, r0
 801686e:	460f      	mov	r7, r1
 8016870:	4602      	mov	r2, r0
 8016872:	460b      	mov	r3, r1
 8016874:	4640      	mov	r0, r8
 8016876:	4649      	mov	r1, r9
 8016878:	f7e9 fc92 	bl	80001a0 <__adddf3>
 801687c:	9802      	ldr	r0, [sp, #8]
 801687e:	a33c      	add	r3, pc, #240	; (adr r3, 8016970 <__ieee754_pow+0x700>)
 8016880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016884:	4604      	mov	r4, r0
 8016886:	460d      	mov	r5, r1
 8016888:	f7e9 fe40 	bl	800050c <__aeabi_dmul>
 801688c:	4642      	mov	r2, r8
 801688e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8016892:	464b      	mov	r3, r9
 8016894:	4620      	mov	r0, r4
 8016896:	4629      	mov	r1, r5
 8016898:	f7e9 fc80 	bl	800019c <__aeabi_dsub>
 801689c:	4602      	mov	r2, r0
 801689e:	460b      	mov	r3, r1
 80168a0:	4630      	mov	r0, r6
 80168a2:	4639      	mov	r1, r7
 80168a4:	f7e9 fc7a 	bl	800019c <__aeabi_dsub>
 80168a8:	a333      	add	r3, pc, #204	; (adr r3, 8016978 <__ieee754_pow+0x708>)
 80168aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168ae:	f7e9 fe2d 	bl	800050c <__aeabi_dmul>
 80168b2:	a333      	add	r3, pc, #204	; (adr r3, 8016980 <__ieee754_pow+0x710>)
 80168b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168b8:	4606      	mov	r6, r0
 80168ba:	460f      	mov	r7, r1
 80168bc:	4620      	mov	r0, r4
 80168be:	4629      	mov	r1, r5
 80168c0:	f7e9 fe24 	bl	800050c <__aeabi_dmul>
 80168c4:	4602      	mov	r2, r0
 80168c6:	460b      	mov	r3, r1
 80168c8:	4630      	mov	r0, r6
 80168ca:	4639      	mov	r1, r7
 80168cc:	f7e9 fc68 	bl	80001a0 <__adddf3>
 80168d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80168d2:	4b35      	ldr	r3, [pc, #212]	; (80169a8 <__ieee754_pow+0x738>)
 80168d4:	4413      	add	r3, r2
 80168d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168da:	f7e9 fc61 	bl	80001a0 <__adddf3>
 80168de:	4604      	mov	r4, r0
 80168e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80168e2:	460d      	mov	r5, r1
 80168e4:	f7e9 fda8 	bl	8000438 <__aeabi_i2d>
 80168e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80168ea:	4b30      	ldr	r3, [pc, #192]	; (80169ac <__ieee754_pow+0x73c>)
 80168ec:	4413      	add	r3, r2
 80168ee:	e9d3 8900 	ldrd	r8, r9, [r3]
 80168f2:	4606      	mov	r6, r0
 80168f4:	460f      	mov	r7, r1
 80168f6:	4622      	mov	r2, r4
 80168f8:	462b      	mov	r3, r5
 80168fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80168fe:	f7e9 fc4f 	bl	80001a0 <__adddf3>
 8016902:	4642      	mov	r2, r8
 8016904:	464b      	mov	r3, r9
 8016906:	f7e9 fc4b 	bl	80001a0 <__adddf3>
 801690a:	4632      	mov	r2, r6
 801690c:	463b      	mov	r3, r7
 801690e:	f7e9 fc47 	bl	80001a0 <__adddf3>
 8016912:	9802      	ldr	r0, [sp, #8]
 8016914:	4632      	mov	r2, r6
 8016916:	463b      	mov	r3, r7
 8016918:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801691c:	f7e9 fc3e 	bl	800019c <__aeabi_dsub>
 8016920:	4642      	mov	r2, r8
 8016922:	464b      	mov	r3, r9
 8016924:	f7e9 fc3a 	bl	800019c <__aeabi_dsub>
 8016928:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801692c:	e607      	b.n	801653e <__ieee754_pow+0x2ce>
 801692e:	f04f 0a01 	mov.w	sl, #1
 8016932:	e6a5      	b.n	8016680 <__ieee754_pow+0x410>
 8016934:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8016988 <__ieee754_pow+0x718>
 8016938:	e613      	b.n	8016562 <__ieee754_pow+0x2f2>
 801693a:	bf00      	nop
 801693c:	f3af 8000 	nop.w
 8016940:	4a454eef 	.word	0x4a454eef
 8016944:	3fca7e28 	.word	0x3fca7e28
 8016948:	93c9db65 	.word	0x93c9db65
 801694c:	3fcd864a 	.word	0x3fcd864a
 8016950:	a91d4101 	.word	0xa91d4101
 8016954:	3fd17460 	.word	0x3fd17460
 8016958:	518f264d 	.word	0x518f264d
 801695c:	3fd55555 	.word	0x3fd55555
 8016960:	db6fabff 	.word	0xdb6fabff
 8016964:	3fdb6db6 	.word	0x3fdb6db6
 8016968:	33333303 	.word	0x33333303
 801696c:	3fe33333 	.word	0x3fe33333
 8016970:	e0000000 	.word	0xe0000000
 8016974:	3feec709 	.word	0x3feec709
 8016978:	dc3a03fd 	.word	0xdc3a03fd
 801697c:	3feec709 	.word	0x3feec709
 8016980:	145b01f5 	.word	0x145b01f5
 8016984:	be3e2fe0 	.word	0xbe3e2fe0
 8016988:	00000000 	.word	0x00000000
 801698c:	3ff00000 	.word	0x3ff00000
 8016990:	43400000 	.word	0x43400000
 8016994:	0003988e 	.word	0x0003988e
 8016998:	000bb679 	.word	0x000bb679
 801699c:	080181e8 	.word	0x080181e8
 80169a0:	3ff00000 	.word	0x3ff00000
 80169a4:	40080000 	.word	0x40080000
 80169a8:	08018208 	.word	0x08018208
 80169ac:	080181f8 	.word	0x080181f8
 80169b0:	a3b4      	add	r3, pc, #720	; (adr r3, 8016c84 <__ieee754_pow+0xa14>)
 80169b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169b6:	4640      	mov	r0, r8
 80169b8:	4649      	mov	r1, r9
 80169ba:	f7e9 fbf1 	bl	80001a0 <__adddf3>
 80169be:	4622      	mov	r2, r4
 80169c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80169c4:	462b      	mov	r3, r5
 80169c6:	4630      	mov	r0, r6
 80169c8:	4639      	mov	r1, r7
 80169ca:	f7e9 fbe7 	bl	800019c <__aeabi_dsub>
 80169ce:	4602      	mov	r2, r0
 80169d0:	460b      	mov	r3, r1
 80169d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80169d6:	f7ea f829 	bl	8000a2c <__aeabi_dcmpgt>
 80169da:	2800      	cmp	r0, #0
 80169dc:	f47f adfe 	bne.w	80165dc <__ieee754_pow+0x36c>
 80169e0:	4aa3      	ldr	r2, [pc, #652]	; (8016c70 <__ieee754_pow+0xa00>)
 80169e2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80169e6:	4293      	cmp	r3, r2
 80169e8:	f340 810a 	ble.w	8016c00 <__ieee754_pow+0x990>
 80169ec:	151b      	asrs	r3, r3, #20
 80169ee:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80169f2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80169f6:	fa4a f303 	asr.w	r3, sl, r3
 80169fa:	445b      	add	r3, fp
 80169fc:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8016a00:	4e9c      	ldr	r6, [pc, #624]	; (8016c74 <__ieee754_pow+0xa04>)
 8016a02:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8016a06:	4116      	asrs	r6, r2
 8016a08:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8016a0c:	2000      	movs	r0, #0
 8016a0e:	ea23 0106 	bic.w	r1, r3, r6
 8016a12:	f1c2 0214 	rsb	r2, r2, #20
 8016a16:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8016a1a:	fa4a fa02 	asr.w	sl, sl, r2
 8016a1e:	f1bb 0f00 	cmp.w	fp, #0
 8016a22:	4602      	mov	r2, r0
 8016a24:	460b      	mov	r3, r1
 8016a26:	4620      	mov	r0, r4
 8016a28:	4629      	mov	r1, r5
 8016a2a:	bfb8      	it	lt
 8016a2c:	f1ca 0a00 	rsblt	sl, sl, #0
 8016a30:	f7e9 fbb4 	bl	800019c <__aeabi_dsub>
 8016a34:	e9cd 0100 	strd	r0, r1, [sp]
 8016a38:	4642      	mov	r2, r8
 8016a3a:	464b      	mov	r3, r9
 8016a3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016a40:	f7e9 fbae 	bl	80001a0 <__adddf3>
 8016a44:	2000      	movs	r0, #0
 8016a46:	a378      	add	r3, pc, #480	; (adr r3, 8016c28 <__ieee754_pow+0x9b8>)
 8016a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a4c:	4604      	mov	r4, r0
 8016a4e:	460d      	mov	r5, r1
 8016a50:	f7e9 fd5c 	bl	800050c <__aeabi_dmul>
 8016a54:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016a58:	4606      	mov	r6, r0
 8016a5a:	460f      	mov	r7, r1
 8016a5c:	4620      	mov	r0, r4
 8016a5e:	4629      	mov	r1, r5
 8016a60:	f7e9 fb9c 	bl	800019c <__aeabi_dsub>
 8016a64:	4602      	mov	r2, r0
 8016a66:	460b      	mov	r3, r1
 8016a68:	4640      	mov	r0, r8
 8016a6a:	4649      	mov	r1, r9
 8016a6c:	f7e9 fb96 	bl	800019c <__aeabi_dsub>
 8016a70:	a36f      	add	r3, pc, #444	; (adr r3, 8016c30 <__ieee754_pow+0x9c0>)
 8016a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a76:	f7e9 fd49 	bl	800050c <__aeabi_dmul>
 8016a7a:	a36f      	add	r3, pc, #444	; (adr r3, 8016c38 <__ieee754_pow+0x9c8>)
 8016a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a80:	4680      	mov	r8, r0
 8016a82:	4689      	mov	r9, r1
 8016a84:	4620      	mov	r0, r4
 8016a86:	4629      	mov	r1, r5
 8016a88:	f7e9 fd40 	bl	800050c <__aeabi_dmul>
 8016a8c:	4602      	mov	r2, r0
 8016a8e:	460b      	mov	r3, r1
 8016a90:	4640      	mov	r0, r8
 8016a92:	4649      	mov	r1, r9
 8016a94:	f7e9 fb84 	bl	80001a0 <__adddf3>
 8016a98:	4604      	mov	r4, r0
 8016a9a:	460d      	mov	r5, r1
 8016a9c:	4602      	mov	r2, r0
 8016a9e:	460b      	mov	r3, r1
 8016aa0:	4630      	mov	r0, r6
 8016aa2:	4639      	mov	r1, r7
 8016aa4:	f7e9 fb7c 	bl	80001a0 <__adddf3>
 8016aa8:	4632      	mov	r2, r6
 8016aaa:	463b      	mov	r3, r7
 8016aac:	4680      	mov	r8, r0
 8016aae:	4689      	mov	r9, r1
 8016ab0:	f7e9 fb74 	bl	800019c <__aeabi_dsub>
 8016ab4:	4602      	mov	r2, r0
 8016ab6:	460b      	mov	r3, r1
 8016ab8:	4620      	mov	r0, r4
 8016aba:	4629      	mov	r1, r5
 8016abc:	f7e9 fb6e 	bl	800019c <__aeabi_dsub>
 8016ac0:	4642      	mov	r2, r8
 8016ac2:	4606      	mov	r6, r0
 8016ac4:	460f      	mov	r7, r1
 8016ac6:	464b      	mov	r3, r9
 8016ac8:	4640      	mov	r0, r8
 8016aca:	4649      	mov	r1, r9
 8016acc:	f7e9 fd1e 	bl	800050c <__aeabi_dmul>
 8016ad0:	a35b      	add	r3, pc, #364	; (adr r3, 8016c40 <__ieee754_pow+0x9d0>)
 8016ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ad6:	4604      	mov	r4, r0
 8016ad8:	460d      	mov	r5, r1
 8016ada:	f7e9 fd17 	bl	800050c <__aeabi_dmul>
 8016ade:	a35a      	add	r3, pc, #360	; (adr r3, 8016c48 <__ieee754_pow+0x9d8>)
 8016ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ae4:	f7e9 fb5a 	bl	800019c <__aeabi_dsub>
 8016ae8:	4622      	mov	r2, r4
 8016aea:	462b      	mov	r3, r5
 8016aec:	f7e9 fd0e 	bl	800050c <__aeabi_dmul>
 8016af0:	a357      	add	r3, pc, #348	; (adr r3, 8016c50 <__ieee754_pow+0x9e0>)
 8016af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016af6:	f7e9 fb53 	bl	80001a0 <__adddf3>
 8016afa:	4622      	mov	r2, r4
 8016afc:	462b      	mov	r3, r5
 8016afe:	f7e9 fd05 	bl	800050c <__aeabi_dmul>
 8016b02:	a355      	add	r3, pc, #340	; (adr r3, 8016c58 <__ieee754_pow+0x9e8>)
 8016b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b08:	f7e9 fb48 	bl	800019c <__aeabi_dsub>
 8016b0c:	4622      	mov	r2, r4
 8016b0e:	462b      	mov	r3, r5
 8016b10:	f7e9 fcfc 	bl	800050c <__aeabi_dmul>
 8016b14:	a352      	add	r3, pc, #328	; (adr r3, 8016c60 <__ieee754_pow+0x9f0>)
 8016b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b1a:	f7e9 fb41 	bl	80001a0 <__adddf3>
 8016b1e:	4622      	mov	r2, r4
 8016b20:	462b      	mov	r3, r5
 8016b22:	f7e9 fcf3 	bl	800050c <__aeabi_dmul>
 8016b26:	4602      	mov	r2, r0
 8016b28:	460b      	mov	r3, r1
 8016b2a:	4640      	mov	r0, r8
 8016b2c:	4649      	mov	r1, r9
 8016b2e:	f7e9 fb35 	bl	800019c <__aeabi_dsub>
 8016b32:	4604      	mov	r4, r0
 8016b34:	460d      	mov	r5, r1
 8016b36:	4602      	mov	r2, r0
 8016b38:	460b      	mov	r3, r1
 8016b3a:	4640      	mov	r0, r8
 8016b3c:	4649      	mov	r1, r9
 8016b3e:	f7e9 fce5 	bl	800050c <__aeabi_dmul>
 8016b42:	2200      	movs	r2, #0
 8016b44:	e9cd 0100 	strd	r0, r1, [sp]
 8016b48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016b4c:	4620      	mov	r0, r4
 8016b4e:	4629      	mov	r1, r5
 8016b50:	f7e9 fb24 	bl	800019c <__aeabi_dsub>
 8016b54:	4602      	mov	r2, r0
 8016b56:	460b      	mov	r3, r1
 8016b58:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016b5c:	f7e9 fe00 	bl	8000760 <__aeabi_ddiv>
 8016b60:	4632      	mov	r2, r6
 8016b62:	4604      	mov	r4, r0
 8016b64:	460d      	mov	r5, r1
 8016b66:	463b      	mov	r3, r7
 8016b68:	4640      	mov	r0, r8
 8016b6a:	4649      	mov	r1, r9
 8016b6c:	f7e9 fcce 	bl	800050c <__aeabi_dmul>
 8016b70:	4632      	mov	r2, r6
 8016b72:	463b      	mov	r3, r7
 8016b74:	f7e9 fb14 	bl	80001a0 <__adddf3>
 8016b78:	4602      	mov	r2, r0
 8016b7a:	460b      	mov	r3, r1
 8016b7c:	4620      	mov	r0, r4
 8016b7e:	4629      	mov	r1, r5
 8016b80:	f7e9 fb0c 	bl	800019c <__aeabi_dsub>
 8016b84:	4642      	mov	r2, r8
 8016b86:	464b      	mov	r3, r9
 8016b88:	f7e9 fb08 	bl	800019c <__aeabi_dsub>
 8016b8c:	4602      	mov	r2, r0
 8016b8e:	460b      	mov	r3, r1
 8016b90:	2000      	movs	r0, #0
 8016b92:	4939      	ldr	r1, [pc, #228]	; (8016c78 <__ieee754_pow+0xa08>)
 8016b94:	f7e9 fb02 	bl	800019c <__aeabi_dsub>
 8016b98:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8016b9c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8016ba0:	4602      	mov	r2, r0
 8016ba2:	460b      	mov	r3, r1
 8016ba4:	da2f      	bge.n	8016c06 <__ieee754_pow+0x996>
 8016ba6:	4650      	mov	r0, sl
 8016ba8:	ec43 2b10 	vmov	d0, r2, r3
 8016bac:	f000 f9c0 	bl	8016f30 <scalbn>
 8016bb0:	ec51 0b10 	vmov	r0, r1, d0
 8016bb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016bb8:	f7ff bbf1 	b.w	801639e <__ieee754_pow+0x12e>
 8016bbc:	4b2f      	ldr	r3, [pc, #188]	; (8016c7c <__ieee754_pow+0xa0c>)
 8016bbe:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8016bc2:	429e      	cmp	r6, r3
 8016bc4:	f77f af0c 	ble.w	80169e0 <__ieee754_pow+0x770>
 8016bc8:	4b2d      	ldr	r3, [pc, #180]	; (8016c80 <__ieee754_pow+0xa10>)
 8016bca:	440b      	add	r3, r1
 8016bcc:	4303      	orrs	r3, r0
 8016bce:	d00b      	beq.n	8016be8 <__ieee754_pow+0x978>
 8016bd0:	a325      	add	r3, pc, #148	; (adr r3, 8016c68 <__ieee754_pow+0x9f8>)
 8016bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016bda:	f7e9 fc97 	bl	800050c <__aeabi_dmul>
 8016bde:	a322      	add	r3, pc, #136	; (adr r3, 8016c68 <__ieee754_pow+0x9f8>)
 8016be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016be4:	f7ff bbdb 	b.w	801639e <__ieee754_pow+0x12e>
 8016be8:	4622      	mov	r2, r4
 8016bea:	462b      	mov	r3, r5
 8016bec:	f7e9 fad6 	bl	800019c <__aeabi_dsub>
 8016bf0:	4642      	mov	r2, r8
 8016bf2:	464b      	mov	r3, r9
 8016bf4:	f7e9 ff10 	bl	8000a18 <__aeabi_dcmpge>
 8016bf8:	2800      	cmp	r0, #0
 8016bfa:	f43f aef1 	beq.w	80169e0 <__ieee754_pow+0x770>
 8016bfe:	e7e7      	b.n	8016bd0 <__ieee754_pow+0x960>
 8016c00:	f04f 0a00 	mov.w	sl, #0
 8016c04:	e718      	b.n	8016a38 <__ieee754_pow+0x7c8>
 8016c06:	4621      	mov	r1, r4
 8016c08:	e7d4      	b.n	8016bb4 <__ieee754_pow+0x944>
 8016c0a:	2000      	movs	r0, #0
 8016c0c:	491a      	ldr	r1, [pc, #104]	; (8016c78 <__ieee754_pow+0xa08>)
 8016c0e:	f7ff bb8f 	b.w	8016330 <__ieee754_pow+0xc0>
 8016c12:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016c16:	f7ff bb8b 	b.w	8016330 <__ieee754_pow+0xc0>
 8016c1a:	4630      	mov	r0, r6
 8016c1c:	4639      	mov	r1, r7
 8016c1e:	f7ff bb87 	b.w	8016330 <__ieee754_pow+0xc0>
 8016c22:	4693      	mov	fp, r2
 8016c24:	f7ff bb98 	b.w	8016358 <__ieee754_pow+0xe8>
 8016c28:	00000000 	.word	0x00000000
 8016c2c:	3fe62e43 	.word	0x3fe62e43
 8016c30:	fefa39ef 	.word	0xfefa39ef
 8016c34:	3fe62e42 	.word	0x3fe62e42
 8016c38:	0ca86c39 	.word	0x0ca86c39
 8016c3c:	be205c61 	.word	0xbe205c61
 8016c40:	72bea4d0 	.word	0x72bea4d0
 8016c44:	3e663769 	.word	0x3e663769
 8016c48:	c5d26bf1 	.word	0xc5d26bf1
 8016c4c:	3ebbbd41 	.word	0x3ebbbd41
 8016c50:	af25de2c 	.word	0xaf25de2c
 8016c54:	3f11566a 	.word	0x3f11566a
 8016c58:	16bebd93 	.word	0x16bebd93
 8016c5c:	3f66c16c 	.word	0x3f66c16c
 8016c60:	5555553e 	.word	0x5555553e
 8016c64:	3fc55555 	.word	0x3fc55555
 8016c68:	c2f8f359 	.word	0xc2f8f359
 8016c6c:	01a56e1f 	.word	0x01a56e1f
 8016c70:	3fe00000 	.word	0x3fe00000
 8016c74:	000fffff 	.word	0x000fffff
 8016c78:	3ff00000 	.word	0x3ff00000
 8016c7c:	4090cbff 	.word	0x4090cbff
 8016c80:	3f6f3400 	.word	0x3f6f3400
 8016c84:	652b82fe 	.word	0x652b82fe
 8016c88:	3c971547 	.word	0x3c971547

08016c8c <__ieee754_sqrt>:
 8016c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c90:	4955      	ldr	r1, [pc, #340]	; (8016de8 <__ieee754_sqrt+0x15c>)
 8016c92:	ec55 4b10 	vmov	r4, r5, d0
 8016c96:	43a9      	bics	r1, r5
 8016c98:	462b      	mov	r3, r5
 8016c9a:	462a      	mov	r2, r5
 8016c9c:	d112      	bne.n	8016cc4 <__ieee754_sqrt+0x38>
 8016c9e:	ee10 2a10 	vmov	r2, s0
 8016ca2:	ee10 0a10 	vmov	r0, s0
 8016ca6:	4629      	mov	r1, r5
 8016ca8:	f7e9 fc30 	bl	800050c <__aeabi_dmul>
 8016cac:	4602      	mov	r2, r0
 8016cae:	460b      	mov	r3, r1
 8016cb0:	4620      	mov	r0, r4
 8016cb2:	4629      	mov	r1, r5
 8016cb4:	f7e9 fa74 	bl	80001a0 <__adddf3>
 8016cb8:	4604      	mov	r4, r0
 8016cba:	460d      	mov	r5, r1
 8016cbc:	ec45 4b10 	vmov	d0, r4, r5
 8016cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016cc4:	2d00      	cmp	r5, #0
 8016cc6:	ee10 0a10 	vmov	r0, s0
 8016cca:	4621      	mov	r1, r4
 8016ccc:	dc0f      	bgt.n	8016cee <__ieee754_sqrt+0x62>
 8016cce:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8016cd2:	4330      	orrs	r0, r6
 8016cd4:	d0f2      	beq.n	8016cbc <__ieee754_sqrt+0x30>
 8016cd6:	b155      	cbz	r5, 8016cee <__ieee754_sqrt+0x62>
 8016cd8:	ee10 2a10 	vmov	r2, s0
 8016cdc:	4620      	mov	r0, r4
 8016cde:	4629      	mov	r1, r5
 8016ce0:	f7e9 fa5c 	bl	800019c <__aeabi_dsub>
 8016ce4:	4602      	mov	r2, r0
 8016ce6:	460b      	mov	r3, r1
 8016ce8:	f7e9 fd3a 	bl	8000760 <__aeabi_ddiv>
 8016cec:	e7e4      	b.n	8016cb8 <__ieee754_sqrt+0x2c>
 8016cee:	151b      	asrs	r3, r3, #20
 8016cf0:	d073      	beq.n	8016dda <__ieee754_sqrt+0x14e>
 8016cf2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8016cf6:	07dd      	lsls	r5, r3, #31
 8016cf8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8016cfc:	bf48      	it	mi
 8016cfe:	0fc8      	lsrmi	r0, r1, #31
 8016d00:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8016d04:	bf44      	itt	mi
 8016d06:	0049      	lslmi	r1, r1, #1
 8016d08:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8016d0c:	2500      	movs	r5, #0
 8016d0e:	1058      	asrs	r0, r3, #1
 8016d10:	0fcb      	lsrs	r3, r1, #31
 8016d12:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8016d16:	0049      	lsls	r1, r1, #1
 8016d18:	2316      	movs	r3, #22
 8016d1a:	462c      	mov	r4, r5
 8016d1c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8016d20:	19a7      	adds	r7, r4, r6
 8016d22:	4297      	cmp	r7, r2
 8016d24:	bfde      	ittt	le
 8016d26:	19bc      	addle	r4, r7, r6
 8016d28:	1bd2      	suble	r2, r2, r7
 8016d2a:	19ad      	addle	r5, r5, r6
 8016d2c:	0fcf      	lsrs	r7, r1, #31
 8016d2e:	3b01      	subs	r3, #1
 8016d30:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8016d34:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8016d38:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8016d3c:	d1f0      	bne.n	8016d20 <__ieee754_sqrt+0x94>
 8016d3e:	f04f 0c20 	mov.w	ip, #32
 8016d42:	469e      	mov	lr, r3
 8016d44:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8016d48:	42a2      	cmp	r2, r4
 8016d4a:	eb06 070e 	add.w	r7, r6, lr
 8016d4e:	dc02      	bgt.n	8016d56 <__ieee754_sqrt+0xca>
 8016d50:	d112      	bne.n	8016d78 <__ieee754_sqrt+0xec>
 8016d52:	428f      	cmp	r7, r1
 8016d54:	d810      	bhi.n	8016d78 <__ieee754_sqrt+0xec>
 8016d56:	2f00      	cmp	r7, #0
 8016d58:	eb07 0e06 	add.w	lr, r7, r6
 8016d5c:	da42      	bge.n	8016de4 <__ieee754_sqrt+0x158>
 8016d5e:	f1be 0f00 	cmp.w	lr, #0
 8016d62:	db3f      	blt.n	8016de4 <__ieee754_sqrt+0x158>
 8016d64:	f104 0801 	add.w	r8, r4, #1
 8016d68:	1b12      	subs	r2, r2, r4
 8016d6a:	428f      	cmp	r7, r1
 8016d6c:	bf88      	it	hi
 8016d6e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8016d72:	1bc9      	subs	r1, r1, r7
 8016d74:	4433      	add	r3, r6
 8016d76:	4644      	mov	r4, r8
 8016d78:	0052      	lsls	r2, r2, #1
 8016d7a:	f1bc 0c01 	subs.w	ip, ip, #1
 8016d7e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8016d82:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8016d86:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8016d8a:	d1dd      	bne.n	8016d48 <__ieee754_sqrt+0xbc>
 8016d8c:	430a      	orrs	r2, r1
 8016d8e:	d006      	beq.n	8016d9e <__ieee754_sqrt+0x112>
 8016d90:	1c5c      	adds	r4, r3, #1
 8016d92:	bf13      	iteet	ne
 8016d94:	3301      	addne	r3, #1
 8016d96:	3501      	addeq	r5, #1
 8016d98:	4663      	moveq	r3, ip
 8016d9a:	f023 0301 	bicne.w	r3, r3, #1
 8016d9e:	106a      	asrs	r2, r5, #1
 8016da0:	085b      	lsrs	r3, r3, #1
 8016da2:	07e9      	lsls	r1, r5, #31
 8016da4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8016da8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8016dac:	bf48      	it	mi
 8016dae:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8016db2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8016db6:	461c      	mov	r4, r3
 8016db8:	e780      	b.n	8016cbc <__ieee754_sqrt+0x30>
 8016dba:	0aca      	lsrs	r2, r1, #11
 8016dbc:	3815      	subs	r0, #21
 8016dbe:	0549      	lsls	r1, r1, #21
 8016dc0:	2a00      	cmp	r2, #0
 8016dc2:	d0fa      	beq.n	8016dba <__ieee754_sqrt+0x12e>
 8016dc4:	02d6      	lsls	r6, r2, #11
 8016dc6:	d50a      	bpl.n	8016dde <__ieee754_sqrt+0x152>
 8016dc8:	f1c3 0420 	rsb	r4, r3, #32
 8016dcc:	fa21 f404 	lsr.w	r4, r1, r4
 8016dd0:	1e5d      	subs	r5, r3, #1
 8016dd2:	4099      	lsls	r1, r3
 8016dd4:	4322      	orrs	r2, r4
 8016dd6:	1b43      	subs	r3, r0, r5
 8016dd8:	e78b      	b.n	8016cf2 <__ieee754_sqrt+0x66>
 8016dda:	4618      	mov	r0, r3
 8016ddc:	e7f0      	b.n	8016dc0 <__ieee754_sqrt+0x134>
 8016dde:	0052      	lsls	r2, r2, #1
 8016de0:	3301      	adds	r3, #1
 8016de2:	e7ef      	b.n	8016dc4 <__ieee754_sqrt+0x138>
 8016de4:	46a0      	mov	r8, r4
 8016de6:	e7bf      	b.n	8016d68 <__ieee754_sqrt+0xdc>
 8016de8:	7ff00000 	.word	0x7ff00000

08016dec <__ieee754_sqrtf>:
 8016dec:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8016df0:	4770      	bx	lr

08016df2 <fabs>:
 8016df2:	ec51 0b10 	vmov	r0, r1, d0
 8016df6:	ee10 2a10 	vmov	r2, s0
 8016dfa:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016dfe:	ec43 2b10 	vmov	d0, r2, r3
 8016e02:	4770      	bx	lr

08016e04 <finite>:
 8016e04:	ee10 3a90 	vmov	r3, s1
 8016e08:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8016e0c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8016e10:	0fc0      	lsrs	r0, r0, #31
 8016e12:	4770      	bx	lr

08016e14 <matherr>:
 8016e14:	2000      	movs	r0, #0
 8016e16:	4770      	bx	lr

08016e18 <nan>:
 8016e18:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8016e20 <nan+0x8>
 8016e1c:	4770      	bx	lr
 8016e1e:	bf00      	nop
 8016e20:	00000000 	.word	0x00000000
 8016e24:	7ff80000 	.word	0x7ff80000

08016e28 <rint>:
 8016e28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016e2a:	ec51 0b10 	vmov	r0, r1, d0
 8016e2e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8016e32:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8016e36:	2e13      	cmp	r6, #19
 8016e38:	460b      	mov	r3, r1
 8016e3a:	ee10 4a10 	vmov	r4, s0
 8016e3e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8016e42:	dc56      	bgt.n	8016ef2 <rint+0xca>
 8016e44:	2e00      	cmp	r6, #0
 8016e46:	da2b      	bge.n	8016ea0 <rint+0x78>
 8016e48:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8016e4c:	4302      	orrs	r2, r0
 8016e4e:	d023      	beq.n	8016e98 <rint+0x70>
 8016e50:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8016e54:	4302      	orrs	r2, r0
 8016e56:	4254      	negs	r4, r2
 8016e58:	4314      	orrs	r4, r2
 8016e5a:	0c4b      	lsrs	r3, r1, #17
 8016e5c:	0b24      	lsrs	r4, r4, #12
 8016e5e:	045b      	lsls	r3, r3, #17
 8016e60:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8016e64:	ea44 0103 	orr.w	r1, r4, r3
 8016e68:	460b      	mov	r3, r1
 8016e6a:	492f      	ldr	r1, [pc, #188]	; (8016f28 <rint+0x100>)
 8016e6c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8016e70:	e9d1 6700 	ldrd	r6, r7, [r1]
 8016e74:	4602      	mov	r2, r0
 8016e76:	4639      	mov	r1, r7
 8016e78:	4630      	mov	r0, r6
 8016e7a:	f7e9 f991 	bl	80001a0 <__adddf3>
 8016e7e:	e9cd 0100 	strd	r0, r1, [sp]
 8016e82:	463b      	mov	r3, r7
 8016e84:	4632      	mov	r2, r6
 8016e86:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016e8a:	f7e9 f987 	bl	800019c <__aeabi_dsub>
 8016e8e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016e92:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8016e96:	4639      	mov	r1, r7
 8016e98:	ec41 0b10 	vmov	d0, r0, r1
 8016e9c:	b003      	add	sp, #12
 8016e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016ea0:	4a22      	ldr	r2, [pc, #136]	; (8016f2c <rint+0x104>)
 8016ea2:	4132      	asrs	r2, r6
 8016ea4:	ea01 0702 	and.w	r7, r1, r2
 8016ea8:	4307      	orrs	r7, r0
 8016eaa:	d0f5      	beq.n	8016e98 <rint+0x70>
 8016eac:	0852      	lsrs	r2, r2, #1
 8016eae:	4011      	ands	r1, r2
 8016eb0:	430c      	orrs	r4, r1
 8016eb2:	d00b      	beq.n	8016ecc <rint+0xa4>
 8016eb4:	ea23 0202 	bic.w	r2, r3, r2
 8016eb8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8016ebc:	2e13      	cmp	r6, #19
 8016ebe:	fa43 f306 	asr.w	r3, r3, r6
 8016ec2:	bf0c      	ite	eq
 8016ec4:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8016ec8:	2400      	movne	r4, #0
 8016eca:	4313      	orrs	r3, r2
 8016ecc:	4916      	ldr	r1, [pc, #88]	; (8016f28 <rint+0x100>)
 8016ece:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8016ed2:	4622      	mov	r2, r4
 8016ed4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8016ed8:	4620      	mov	r0, r4
 8016eda:	4629      	mov	r1, r5
 8016edc:	f7e9 f960 	bl	80001a0 <__adddf3>
 8016ee0:	e9cd 0100 	strd	r0, r1, [sp]
 8016ee4:	4622      	mov	r2, r4
 8016ee6:	462b      	mov	r3, r5
 8016ee8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016eec:	f7e9 f956 	bl	800019c <__aeabi_dsub>
 8016ef0:	e7d2      	b.n	8016e98 <rint+0x70>
 8016ef2:	2e33      	cmp	r6, #51	; 0x33
 8016ef4:	dd07      	ble.n	8016f06 <rint+0xde>
 8016ef6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8016efa:	d1cd      	bne.n	8016e98 <rint+0x70>
 8016efc:	ee10 2a10 	vmov	r2, s0
 8016f00:	f7e9 f94e 	bl	80001a0 <__adddf3>
 8016f04:	e7c8      	b.n	8016e98 <rint+0x70>
 8016f06:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8016f0a:	f04f 32ff 	mov.w	r2, #4294967295
 8016f0e:	40f2      	lsrs	r2, r6
 8016f10:	4210      	tst	r0, r2
 8016f12:	d0c1      	beq.n	8016e98 <rint+0x70>
 8016f14:	0852      	lsrs	r2, r2, #1
 8016f16:	4210      	tst	r0, r2
 8016f18:	bf1f      	itttt	ne
 8016f1a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8016f1e:	ea20 0202 	bicne.w	r2, r0, r2
 8016f22:	4134      	asrne	r4, r6
 8016f24:	4314      	orrne	r4, r2
 8016f26:	e7d1      	b.n	8016ecc <rint+0xa4>
 8016f28:	08018218 	.word	0x08018218
 8016f2c:	000fffff 	.word	0x000fffff

08016f30 <scalbn>:
 8016f30:	b570      	push	{r4, r5, r6, lr}
 8016f32:	ec55 4b10 	vmov	r4, r5, d0
 8016f36:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8016f3a:	4606      	mov	r6, r0
 8016f3c:	462b      	mov	r3, r5
 8016f3e:	b9aa      	cbnz	r2, 8016f6c <scalbn+0x3c>
 8016f40:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8016f44:	4323      	orrs	r3, r4
 8016f46:	d03b      	beq.n	8016fc0 <scalbn+0x90>
 8016f48:	4b31      	ldr	r3, [pc, #196]	; (8017010 <scalbn+0xe0>)
 8016f4a:	4629      	mov	r1, r5
 8016f4c:	2200      	movs	r2, #0
 8016f4e:	ee10 0a10 	vmov	r0, s0
 8016f52:	f7e9 fadb 	bl	800050c <__aeabi_dmul>
 8016f56:	4b2f      	ldr	r3, [pc, #188]	; (8017014 <scalbn+0xe4>)
 8016f58:	429e      	cmp	r6, r3
 8016f5a:	4604      	mov	r4, r0
 8016f5c:	460d      	mov	r5, r1
 8016f5e:	da12      	bge.n	8016f86 <scalbn+0x56>
 8016f60:	a327      	add	r3, pc, #156	; (adr r3, 8017000 <scalbn+0xd0>)
 8016f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f66:	f7e9 fad1 	bl	800050c <__aeabi_dmul>
 8016f6a:	e009      	b.n	8016f80 <scalbn+0x50>
 8016f6c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8016f70:	428a      	cmp	r2, r1
 8016f72:	d10c      	bne.n	8016f8e <scalbn+0x5e>
 8016f74:	ee10 2a10 	vmov	r2, s0
 8016f78:	4620      	mov	r0, r4
 8016f7a:	4629      	mov	r1, r5
 8016f7c:	f7e9 f910 	bl	80001a0 <__adddf3>
 8016f80:	4604      	mov	r4, r0
 8016f82:	460d      	mov	r5, r1
 8016f84:	e01c      	b.n	8016fc0 <scalbn+0x90>
 8016f86:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8016f8a:	460b      	mov	r3, r1
 8016f8c:	3a36      	subs	r2, #54	; 0x36
 8016f8e:	4432      	add	r2, r6
 8016f90:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8016f94:	428a      	cmp	r2, r1
 8016f96:	dd0b      	ble.n	8016fb0 <scalbn+0x80>
 8016f98:	ec45 4b11 	vmov	d1, r4, r5
 8016f9c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8017008 <scalbn+0xd8>
 8016fa0:	f000 f83c 	bl	801701c <copysign>
 8016fa4:	a318      	add	r3, pc, #96	; (adr r3, 8017008 <scalbn+0xd8>)
 8016fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016faa:	ec51 0b10 	vmov	r0, r1, d0
 8016fae:	e7da      	b.n	8016f66 <scalbn+0x36>
 8016fb0:	2a00      	cmp	r2, #0
 8016fb2:	dd08      	ble.n	8016fc6 <scalbn+0x96>
 8016fb4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8016fb8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8016fbc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8016fc0:	ec45 4b10 	vmov	d0, r4, r5
 8016fc4:	bd70      	pop	{r4, r5, r6, pc}
 8016fc6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8016fca:	da0d      	bge.n	8016fe8 <scalbn+0xb8>
 8016fcc:	f24c 3350 	movw	r3, #50000	; 0xc350
 8016fd0:	429e      	cmp	r6, r3
 8016fd2:	ec45 4b11 	vmov	d1, r4, r5
 8016fd6:	dce1      	bgt.n	8016f9c <scalbn+0x6c>
 8016fd8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8017000 <scalbn+0xd0>
 8016fdc:	f000 f81e 	bl	801701c <copysign>
 8016fe0:	a307      	add	r3, pc, #28	; (adr r3, 8017000 <scalbn+0xd0>)
 8016fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fe6:	e7e0      	b.n	8016faa <scalbn+0x7a>
 8016fe8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8016fec:	3236      	adds	r2, #54	; 0x36
 8016fee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8016ff2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8016ff6:	4620      	mov	r0, r4
 8016ff8:	4629      	mov	r1, r5
 8016ffa:	2200      	movs	r2, #0
 8016ffc:	4b06      	ldr	r3, [pc, #24]	; (8017018 <scalbn+0xe8>)
 8016ffe:	e7b2      	b.n	8016f66 <scalbn+0x36>
 8017000:	c2f8f359 	.word	0xc2f8f359
 8017004:	01a56e1f 	.word	0x01a56e1f
 8017008:	8800759c 	.word	0x8800759c
 801700c:	7e37e43c 	.word	0x7e37e43c
 8017010:	43500000 	.word	0x43500000
 8017014:	ffff3cb0 	.word	0xffff3cb0
 8017018:	3c900000 	.word	0x3c900000

0801701c <copysign>:
 801701c:	ec51 0b10 	vmov	r0, r1, d0
 8017020:	ee11 0a90 	vmov	r0, s3
 8017024:	ee10 2a10 	vmov	r2, s0
 8017028:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801702c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8017030:	ea41 0300 	orr.w	r3, r1, r0
 8017034:	ec43 2b10 	vmov	d0, r2, r3
 8017038:	4770      	bx	lr
	...

0801703c <_init>:
 801703c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801703e:	bf00      	nop
 8017040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017042:	bc08      	pop	{r3}
 8017044:	469e      	mov	lr, r3
 8017046:	4770      	bx	lr

08017048 <_fini>:
 8017048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801704a:	bf00      	nop
 801704c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801704e:	bc08      	pop	{r3}
 8017050:	469e      	mov	lr, r3
 8017052:	4770      	bx	lr
