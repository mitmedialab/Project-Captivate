
stm32_mainMCU_Code_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000161bc  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011a0  08016300  08016300  00026300  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080174a0  080174a0  000274a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080174a8  080174a8  000274a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080174ac  080174ac  000274ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000134  20000004  080174b0  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  20000138  080175e4  00030138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200001d4  0801767d  000301d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00028494  200001e8  0801768e  000301e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2002867c  0801768e  0003867c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e5  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000024  20030000  20030000  00040000  2**2
                  ALLOC
 13 MB_MEM1       000000a0  20030024  20030024  00040000  2**2
                  ALLOC
 14 MB_MEM2       00000a97  200300c4  200300c4  00040000  2**2
                  ALLOC
 15 .debug_info   00061919  00000000  00000000  00030215  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 0000ac84  00000000  00000000  00091b2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 00003978  00000000  00000000  0009c7b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 000034a0  00000000  00000000  000a0130  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   00025584  00000000  00000000  000a35d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    00017b67  00000000  00000000  000c8b54  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      000000f0  00000000  00000000  000e06bb  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000ec48  00000000  00000000  000e07ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_loc    0000131b  00000000  00000000  000ef3f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e8 	.word	0x200001e8
 800015c:	00000000 	.word	0x00000000
 8000160:	080162e4 	.word	0x080162e4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001ec 	.word	0x200001ec
 800017c:	080162e4 	.word	0x080162e4

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <__aeabi_drsub>:
 8000194:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000198:	e002      	b.n	80001a0 <__adddf3>
 800019a:	bf00      	nop

0800019c <__aeabi_dsub>:
 800019c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001a0 <__adddf3>:
 80001a0:	b530      	push	{r4, r5, lr}
 80001a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001aa:	ea94 0f05 	teq	r4, r5
 80001ae:	bf08      	it	eq
 80001b0:	ea90 0f02 	teqeq	r0, r2
 80001b4:	bf1f      	itttt	ne
 80001b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c6:	f000 80e2 	beq.w	800038e <__adddf3+0x1ee>
 80001ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001d2:	bfb8      	it	lt
 80001d4:	426d      	neglt	r5, r5
 80001d6:	dd0c      	ble.n	80001f2 <__adddf3+0x52>
 80001d8:	442c      	add	r4, r5
 80001da:	ea80 0202 	eor.w	r2, r0, r2
 80001de:	ea81 0303 	eor.w	r3, r1, r3
 80001e2:	ea82 0000 	eor.w	r0, r2, r0
 80001e6:	ea83 0101 	eor.w	r1, r3, r1
 80001ea:	ea80 0202 	eor.w	r2, r0, r2
 80001ee:	ea81 0303 	eor.w	r3, r1, r3
 80001f2:	2d36      	cmp	r5, #54	; 0x36
 80001f4:	bf88      	it	hi
 80001f6:	bd30      	pophi	{r4, r5, pc}
 80001f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000200:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000204:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x70>
 800020a:	4240      	negs	r0, r0
 800020c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000210:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000214:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000218:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800021c:	d002      	beq.n	8000224 <__adddf3+0x84>
 800021e:	4252      	negs	r2, r2
 8000220:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000224:	ea94 0f05 	teq	r4, r5
 8000228:	f000 80a7 	beq.w	800037a <__adddf3+0x1da>
 800022c:	f1a4 0401 	sub.w	r4, r4, #1
 8000230:	f1d5 0e20 	rsbs	lr, r5, #32
 8000234:	db0d      	blt.n	8000252 <__adddf3+0xb2>
 8000236:	fa02 fc0e 	lsl.w	ip, r2, lr
 800023a:	fa22 f205 	lsr.w	r2, r2, r5
 800023e:	1880      	adds	r0, r0, r2
 8000240:	f141 0100 	adc.w	r1, r1, #0
 8000244:	fa03 f20e 	lsl.w	r2, r3, lr
 8000248:	1880      	adds	r0, r0, r2
 800024a:	fa43 f305 	asr.w	r3, r3, r5
 800024e:	4159      	adcs	r1, r3
 8000250:	e00e      	b.n	8000270 <__adddf3+0xd0>
 8000252:	f1a5 0520 	sub.w	r5, r5, #32
 8000256:	f10e 0e20 	add.w	lr, lr, #32
 800025a:	2a01      	cmp	r2, #1
 800025c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000260:	bf28      	it	cs
 8000262:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000266:	fa43 f305 	asr.w	r3, r3, r5
 800026a:	18c0      	adds	r0, r0, r3
 800026c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000270:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000274:	d507      	bpl.n	8000286 <__adddf3+0xe6>
 8000276:	f04f 0e00 	mov.w	lr, #0
 800027a:	f1dc 0c00 	rsbs	ip, ip, #0
 800027e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000282:	eb6e 0101 	sbc.w	r1, lr, r1
 8000286:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800028a:	d31b      	bcc.n	80002c4 <__adddf3+0x124>
 800028c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000290:	d30c      	bcc.n	80002ac <__adddf3+0x10c>
 8000292:	0849      	lsrs	r1, r1, #1
 8000294:	ea5f 0030 	movs.w	r0, r0, rrx
 8000298:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800029c:	f104 0401 	add.w	r4, r4, #1
 80002a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a8:	f080 809a 	bcs.w	80003e0 <__adddf3+0x240>
 80002ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002b0:	bf08      	it	eq
 80002b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b6:	f150 0000 	adcs.w	r0, r0, #0
 80002ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002be:	ea41 0105 	orr.w	r1, r1, r5
 80002c2:	bd30      	pop	{r4, r5, pc}
 80002c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c8:	4140      	adcs	r0, r0
 80002ca:	eb41 0101 	adc.w	r1, r1, r1
 80002ce:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002d2:	f1a4 0401 	sub.w	r4, r4, #1
 80002d6:	d1e9      	bne.n	80002ac <__adddf3+0x10c>
 80002d8:	f091 0f00 	teq	r1, #0
 80002dc:	bf04      	itt	eq
 80002de:	4601      	moveq	r1, r0
 80002e0:	2000      	moveq	r0, #0
 80002e2:	fab1 f381 	clz	r3, r1
 80002e6:	bf08      	it	eq
 80002e8:	3320      	addeq	r3, #32
 80002ea:	f1a3 030b 	sub.w	r3, r3, #11
 80002ee:	f1b3 0220 	subs.w	r2, r3, #32
 80002f2:	da0c      	bge.n	800030e <__adddf3+0x16e>
 80002f4:	320c      	adds	r2, #12
 80002f6:	dd08      	ble.n	800030a <__adddf3+0x16a>
 80002f8:	f102 0c14 	add.w	ip, r2, #20
 80002fc:	f1c2 020c 	rsb	r2, r2, #12
 8000300:	fa01 f00c 	lsl.w	r0, r1, ip
 8000304:	fa21 f102 	lsr.w	r1, r1, r2
 8000308:	e00c      	b.n	8000324 <__adddf3+0x184>
 800030a:	f102 0214 	add.w	r2, r2, #20
 800030e:	bfd8      	it	le
 8000310:	f1c2 0c20 	rsble	ip, r2, #32
 8000314:	fa01 f102 	lsl.w	r1, r1, r2
 8000318:	fa20 fc0c 	lsr.w	ip, r0, ip
 800031c:	bfdc      	itt	le
 800031e:	ea41 010c 	orrle.w	r1, r1, ip
 8000322:	4090      	lslle	r0, r2
 8000324:	1ae4      	subs	r4, r4, r3
 8000326:	bfa2      	ittt	ge
 8000328:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800032c:	4329      	orrge	r1, r5
 800032e:	bd30      	popge	{r4, r5, pc}
 8000330:	ea6f 0404 	mvn.w	r4, r4
 8000334:	3c1f      	subs	r4, #31
 8000336:	da1c      	bge.n	8000372 <__adddf3+0x1d2>
 8000338:	340c      	adds	r4, #12
 800033a:	dc0e      	bgt.n	800035a <__adddf3+0x1ba>
 800033c:	f104 0414 	add.w	r4, r4, #20
 8000340:	f1c4 0220 	rsb	r2, r4, #32
 8000344:	fa20 f004 	lsr.w	r0, r0, r4
 8000348:	fa01 f302 	lsl.w	r3, r1, r2
 800034c:	ea40 0003 	orr.w	r0, r0, r3
 8000350:	fa21 f304 	lsr.w	r3, r1, r4
 8000354:	ea45 0103 	orr.w	r1, r5, r3
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f1c4 040c 	rsb	r4, r4, #12
 800035e:	f1c4 0220 	rsb	r2, r4, #32
 8000362:	fa20 f002 	lsr.w	r0, r0, r2
 8000366:	fa01 f304 	lsl.w	r3, r1, r4
 800036a:	ea40 0003 	orr.w	r0, r0, r3
 800036e:	4629      	mov	r1, r5
 8000370:	bd30      	pop	{r4, r5, pc}
 8000372:	fa21 f004 	lsr.w	r0, r1, r4
 8000376:	4629      	mov	r1, r5
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	f094 0f00 	teq	r4, #0
 800037e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000382:	bf06      	itte	eq
 8000384:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000388:	3401      	addeq	r4, #1
 800038a:	3d01      	subne	r5, #1
 800038c:	e74e      	b.n	800022c <__adddf3+0x8c>
 800038e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000392:	bf18      	it	ne
 8000394:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000398:	d029      	beq.n	80003ee <__adddf3+0x24e>
 800039a:	ea94 0f05 	teq	r4, r5
 800039e:	bf08      	it	eq
 80003a0:	ea90 0f02 	teqeq	r0, r2
 80003a4:	d005      	beq.n	80003b2 <__adddf3+0x212>
 80003a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003aa:	bf04      	itt	eq
 80003ac:	4619      	moveq	r1, r3
 80003ae:	4610      	moveq	r0, r2
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	ea91 0f03 	teq	r1, r3
 80003b6:	bf1e      	ittt	ne
 80003b8:	2100      	movne	r1, #0
 80003ba:	2000      	movne	r0, #0
 80003bc:	bd30      	popne	{r4, r5, pc}
 80003be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003c2:	d105      	bne.n	80003d0 <__adddf3+0x230>
 80003c4:	0040      	lsls	r0, r0, #1
 80003c6:	4149      	adcs	r1, r1
 80003c8:	bf28      	it	cs
 80003ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d4:	bf3c      	itt	cc
 80003d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003da:	bd30      	popcc	{r4, r5, pc}
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e8:	f04f 0000 	mov.w	r0, #0
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003f2:	bf1a      	itte	ne
 80003f4:	4619      	movne	r1, r3
 80003f6:	4610      	movne	r0, r2
 80003f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003fc:	bf1c      	itt	ne
 80003fe:	460b      	movne	r3, r1
 8000400:	4602      	movne	r2, r0
 8000402:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000406:	bf06      	itte	eq
 8000408:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800040c:	ea91 0f03 	teqeq	r1, r3
 8000410:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	bf00      	nop

08000418 <__aeabi_ui2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f04f 0500 	mov.w	r5, #0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e750      	b.n	80002d8 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_i2d>:
 8000438:	f090 0f00 	teq	r0, #0
 800043c:	bf04      	itt	eq
 800043e:	2100      	moveq	r1, #0
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000448:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800044c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000450:	bf48      	it	mi
 8000452:	4240      	negmi	r0, r0
 8000454:	f04f 0100 	mov.w	r1, #0
 8000458:	e73e      	b.n	80002d8 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_f2d>:
 800045c:	0042      	lsls	r2, r0, #1
 800045e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000462:	ea4f 0131 	mov.w	r1, r1, rrx
 8000466:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800046a:	bf1f      	itttt	ne
 800046c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000470:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000474:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000478:	4770      	bxne	lr
 800047a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047e:	bf08      	it	eq
 8000480:	4770      	bxeq	lr
 8000482:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000486:	bf04      	itt	eq
 8000488:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000494:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000498:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800049c:	e71c      	b.n	80002d8 <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_ul2d>:
 80004a0:	ea50 0201 	orrs.w	r2, r0, r1
 80004a4:	bf08      	it	eq
 80004a6:	4770      	bxeq	lr
 80004a8:	b530      	push	{r4, r5, lr}
 80004aa:	f04f 0500 	mov.w	r5, #0
 80004ae:	e00a      	b.n	80004c6 <__aeabi_l2d+0x16>

080004b0 <__aeabi_l2d>:
 80004b0:	ea50 0201 	orrs.w	r2, r0, r1
 80004b4:	bf08      	it	eq
 80004b6:	4770      	bxeq	lr
 80004b8:	b530      	push	{r4, r5, lr}
 80004ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004be:	d502      	bpl.n	80004c6 <__aeabi_l2d+0x16>
 80004c0:	4240      	negs	r0, r0
 80004c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004d2:	f43f aed8 	beq.w	8000286 <__adddf3+0xe6>
 80004d6:	f04f 0203 	mov.w	r2, #3
 80004da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004de:	bf18      	it	ne
 80004e0:	3203      	addne	r2, #3
 80004e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e6:	bf18      	it	ne
 80004e8:	3203      	addne	r2, #3
 80004ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ee:	f1c2 0320 	rsb	r3, r2, #32
 80004f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f6:	fa20 f002 	lsr.w	r0, r0, r2
 80004fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fe:	ea40 000e 	orr.w	r0, r0, lr
 8000502:	fa21 f102 	lsr.w	r1, r1, r2
 8000506:	4414      	add	r4, r2
 8000508:	e6bd      	b.n	8000286 <__adddf3+0xe6>
 800050a:	bf00      	nop

0800050c <__aeabi_dmul>:
 800050c:	b570      	push	{r4, r5, r6, lr}
 800050e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000512:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000516:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800051a:	bf1d      	ittte	ne
 800051c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000520:	ea94 0f0c 	teqne	r4, ip
 8000524:	ea95 0f0c 	teqne	r5, ip
 8000528:	f000 f8de 	bleq	80006e8 <__aeabi_dmul+0x1dc>
 800052c:	442c      	add	r4, r5
 800052e:	ea81 0603 	eor.w	r6, r1, r3
 8000532:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000536:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800053a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053e:	bf18      	it	ne
 8000540:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000544:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000548:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800054c:	d038      	beq.n	80005c0 <__aeabi_dmul+0xb4>
 800054e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000552:	f04f 0500 	mov.w	r5, #0
 8000556:	fbe1 e502 	umlal	lr, r5, r1, r2
 800055a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000562:	f04f 0600 	mov.w	r6, #0
 8000566:	fbe1 5603 	umlal	r5, r6, r1, r3
 800056a:	f09c 0f00 	teq	ip, #0
 800056e:	bf18      	it	ne
 8000570:	f04e 0e01 	orrne.w	lr, lr, #1
 8000574:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000578:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800057c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000580:	d204      	bcs.n	800058c <__aeabi_dmul+0x80>
 8000582:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000586:	416d      	adcs	r5, r5
 8000588:	eb46 0606 	adc.w	r6, r6, r6
 800058c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000590:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000594:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000598:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800059c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a4:	bf88      	it	hi
 80005a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005aa:	d81e      	bhi.n	80005ea <__aeabi_dmul+0xde>
 80005ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005b0:	bf08      	it	eq
 80005b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b6:	f150 0000 	adcs.w	r0, r0, #0
 80005ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005be:	bd70      	pop	{r4, r5, r6, pc}
 80005c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c4:	ea46 0101 	orr.w	r1, r6, r1
 80005c8:	ea40 0002 	orr.w	r0, r0, r2
 80005cc:	ea81 0103 	eor.w	r1, r1, r3
 80005d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d4:	bfc2      	ittt	gt
 80005d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005de:	bd70      	popgt	{r4, r5, r6, pc}
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f04f 0e00 	mov.w	lr, #0
 80005e8:	3c01      	subs	r4, #1
 80005ea:	f300 80ab 	bgt.w	8000744 <__aeabi_dmul+0x238>
 80005ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005f2:	bfde      	ittt	le
 80005f4:	2000      	movle	r0, #0
 80005f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005fa:	bd70      	pople	{r4, r5, r6, pc}
 80005fc:	f1c4 0400 	rsb	r4, r4, #0
 8000600:	3c20      	subs	r4, #32
 8000602:	da35      	bge.n	8000670 <__aeabi_dmul+0x164>
 8000604:	340c      	adds	r4, #12
 8000606:	dc1b      	bgt.n	8000640 <__aeabi_dmul+0x134>
 8000608:	f104 0414 	add.w	r4, r4, #20
 800060c:	f1c4 0520 	rsb	r5, r4, #32
 8000610:	fa00 f305 	lsl.w	r3, r0, r5
 8000614:	fa20 f004 	lsr.w	r0, r0, r4
 8000618:	fa01 f205 	lsl.w	r2, r1, r5
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000624:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	fa21 f604 	lsr.w	r6, r1, r4
 8000630:	eb42 0106 	adc.w	r1, r2, r6
 8000634:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000638:	bf08      	it	eq
 800063a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063e:	bd70      	pop	{r4, r5, r6, pc}
 8000640:	f1c4 040c 	rsb	r4, r4, #12
 8000644:	f1c4 0520 	rsb	r5, r4, #32
 8000648:	fa00 f304 	lsl.w	r3, r0, r4
 800064c:	fa20 f005 	lsr.w	r0, r0, r5
 8000650:	fa01 f204 	lsl.w	r2, r1, r4
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	f141 0100 	adc.w	r1, r1, #0
 8000664:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000668:	bf08      	it	eq
 800066a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f205 	lsl.w	r2, r0, r5
 8000678:	ea4e 0e02 	orr.w	lr, lr, r2
 800067c:	fa20 f304 	lsr.w	r3, r0, r4
 8000680:	fa01 f205 	lsl.w	r2, r1, r5
 8000684:	ea43 0302 	orr.w	r3, r3, r2
 8000688:	fa21 f004 	lsr.w	r0, r1, r4
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	fa21 f204 	lsr.w	r2, r1, r4
 8000694:	ea20 0002 	bic.w	r0, r0, r2
 8000698:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f094 0f00 	teq	r4, #0
 80006ac:	d10f      	bne.n	80006ce <__aeabi_dmul+0x1c2>
 80006ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006b2:	0040      	lsls	r0, r0, #1
 80006b4:	eb41 0101 	adc.w	r1, r1, r1
 80006b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3c01      	subeq	r4, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1a6>
 80006c2:	ea41 0106 	orr.w	r1, r1, r6
 80006c6:	f095 0f00 	teq	r5, #0
 80006ca:	bf18      	it	ne
 80006cc:	4770      	bxne	lr
 80006ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006d2:	0052      	lsls	r2, r2, #1
 80006d4:	eb43 0303 	adc.w	r3, r3, r3
 80006d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006dc:	bf08      	it	eq
 80006de:	3d01      	subeq	r5, #1
 80006e0:	d0f7      	beq.n	80006d2 <__aeabi_dmul+0x1c6>
 80006e2:	ea43 0306 	orr.w	r3, r3, r6
 80006e6:	4770      	bx	lr
 80006e8:	ea94 0f0c 	teq	r4, ip
 80006ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006f0:	bf18      	it	ne
 80006f2:	ea95 0f0c 	teqne	r5, ip
 80006f6:	d00c      	beq.n	8000712 <__aeabi_dmul+0x206>
 80006f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006fc:	bf18      	it	ne
 80006fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000702:	d1d1      	bne.n	80006a8 <__aeabi_dmul+0x19c>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000716:	bf06      	itte	eq
 8000718:	4610      	moveq	r0, r2
 800071a:	4619      	moveq	r1, r3
 800071c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000720:	d019      	beq.n	8000756 <__aeabi_dmul+0x24a>
 8000722:	ea94 0f0c 	teq	r4, ip
 8000726:	d102      	bne.n	800072e <__aeabi_dmul+0x222>
 8000728:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800072c:	d113      	bne.n	8000756 <__aeabi_dmul+0x24a>
 800072e:	ea95 0f0c 	teq	r5, ip
 8000732:	d105      	bne.n	8000740 <__aeabi_dmul+0x234>
 8000734:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000738:	bf1c      	itt	ne
 800073a:	4610      	movne	r0, r2
 800073c:	4619      	movne	r1, r3
 800073e:	d10a      	bne.n	8000756 <__aeabi_dmul+0x24a>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800075a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075e:	bd70      	pop	{r4, r5, r6, pc}

08000760 <__aeabi_ddiv>:
 8000760:	b570      	push	{r4, r5, r6, lr}
 8000762:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000766:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800076a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076e:	bf1d      	ittte	ne
 8000770:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000774:	ea94 0f0c 	teqne	r4, ip
 8000778:	ea95 0f0c 	teqne	r5, ip
 800077c:	f000 f8a7 	bleq	80008ce <__aeabi_ddiv+0x16e>
 8000780:	eba4 0405 	sub.w	r4, r4, r5
 8000784:	ea81 0e03 	eor.w	lr, r1, r3
 8000788:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800078c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000790:	f000 8088 	beq.w	80008a4 <__aeabi_ddiv+0x144>
 8000794:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000798:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800079c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b8:	429d      	cmp	r5, r3
 80007ba:	bf08      	it	eq
 80007bc:	4296      	cmpeq	r6, r2
 80007be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c6:	d202      	bcs.n	80007ce <__aeabi_ddiv+0x6e>
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	1ab6      	subs	r6, r6, r2
 80007d0:	eb65 0503 	sbc.w	r5, r5, r3
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000802:	bf22      	ittt	cs
 8000804:	1ab6      	subcs	r6, r6, r2
 8000806:	4675      	movcs	r5, lr
 8000808:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	ebb6 0e02 	subs.w	lr, r6, r2
 8000816:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081a:	bf22      	ittt	cs
 800081c:	1ab6      	subcs	r6, r6, r2
 800081e:	4675      	movcs	r5, lr
 8000820:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	ebb6 0e02 	subs.w	lr, r6, r2
 800082e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000832:	bf22      	ittt	cs
 8000834:	1ab6      	subcs	r6, r6, r2
 8000836:	4675      	movcs	r5, lr
 8000838:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800083c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000840:	d018      	beq.n	8000874 <__aeabi_ddiv+0x114>
 8000842:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000846:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800084a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000852:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000856:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800085a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085e:	d1c0      	bne.n	80007e2 <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	d10b      	bne.n	800087e <__aeabi_ddiv+0x11e>
 8000866:	ea41 0100 	orr.w	r1, r1, r0
 800086a:	f04f 0000 	mov.w	r0, #0
 800086e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000872:	e7b6      	b.n	80007e2 <__aeabi_ddiv+0x82>
 8000874:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000878:	bf04      	itt	eq
 800087a:	4301      	orreq	r1, r0
 800087c:	2000      	moveq	r0, #0
 800087e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000882:	bf88      	it	hi
 8000884:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000888:	f63f aeaf 	bhi.w	80005ea <__aeabi_dmul+0xde>
 800088c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000890:	bf04      	itt	eq
 8000892:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000896:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800089a:	f150 0000 	adcs.w	r0, r0, #0
 800089e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008a2:	bd70      	pop	{r4, r5, r6, pc}
 80008a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008b0:	bfc2      	ittt	gt
 80008b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ba:	bd70      	popgt	{r4, r5, r6, pc}
 80008bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008c0:	f04f 0e00 	mov.w	lr, #0
 80008c4:	3c01      	subs	r4, #1
 80008c6:	e690      	b.n	80005ea <__aeabi_dmul+0xde>
 80008c8:	ea45 0e06 	orr.w	lr, r5, r6
 80008cc:	e68d      	b.n	80005ea <__aeabi_dmul+0xde>
 80008ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008d2:	ea94 0f0c 	teq	r4, ip
 80008d6:	bf08      	it	eq
 80008d8:	ea95 0f0c 	teqeq	r5, ip
 80008dc:	f43f af3b 	beq.w	8000756 <__aeabi_dmul+0x24a>
 80008e0:	ea94 0f0c 	teq	r4, ip
 80008e4:	d10a      	bne.n	80008fc <__aeabi_ddiv+0x19c>
 80008e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ea:	f47f af34 	bne.w	8000756 <__aeabi_dmul+0x24a>
 80008ee:	ea95 0f0c 	teq	r5, ip
 80008f2:	f47f af25 	bne.w	8000740 <__aeabi_dmul+0x234>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e72c      	b.n	8000756 <__aeabi_dmul+0x24a>
 80008fc:	ea95 0f0c 	teq	r5, ip
 8000900:	d106      	bne.n	8000910 <__aeabi_ddiv+0x1b0>
 8000902:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000906:	f43f aefd 	beq.w	8000704 <__aeabi_dmul+0x1f8>
 800090a:	4610      	mov	r0, r2
 800090c:	4619      	mov	r1, r3
 800090e:	e722      	b.n	8000756 <__aeabi_dmul+0x24a>
 8000910:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000914:	bf18      	it	ne
 8000916:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800091a:	f47f aec5 	bne.w	80006a8 <__aeabi_dmul+0x19c>
 800091e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000922:	f47f af0d 	bne.w	8000740 <__aeabi_dmul+0x234>
 8000926:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800092a:	f47f aeeb 	bne.w	8000704 <__aeabi_dmul+0x1f8>
 800092e:	e712      	b.n	8000756 <__aeabi_dmul+0x24a>

08000930 <__gedf2>:
 8000930:	f04f 3cff 	mov.w	ip, #4294967295
 8000934:	e006      	b.n	8000944 <__cmpdf2+0x4>
 8000936:	bf00      	nop

08000938 <__ledf2>:
 8000938:	f04f 0c01 	mov.w	ip, #1
 800093c:	e002      	b.n	8000944 <__cmpdf2+0x4>
 800093e:	bf00      	nop

08000940 <__cmpdf2>:
 8000940:	f04f 0c01 	mov.w	ip, #1
 8000944:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000948:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800094c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000950:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000954:	bf18      	it	ne
 8000956:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800095a:	d01b      	beq.n	8000994 <__cmpdf2+0x54>
 800095c:	b001      	add	sp, #4
 800095e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000962:	bf0c      	ite	eq
 8000964:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000968:	ea91 0f03 	teqne	r1, r3
 800096c:	bf02      	ittt	eq
 800096e:	ea90 0f02 	teqeq	r0, r2
 8000972:	2000      	moveq	r0, #0
 8000974:	4770      	bxeq	lr
 8000976:	f110 0f00 	cmn.w	r0, #0
 800097a:	ea91 0f03 	teq	r1, r3
 800097e:	bf58      	it	pl
 8000980:	4299      	cmppl	r1, r3
 8000982:	bf08      	it	eq
 8000984:	4290      	cmpeq	r0, r2
 8000986:	bf2c      	ite	cs
 8000988:	17d8      	asrcs	r0, r3, #31
 800098a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098e:	f040 0001 	orr.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	d102      	bne.n	80009a4 <__cmpdf2+0x64>
 800099e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009a2:	d107      	bne.n	80009b4 <__cmpdf2+0x74>
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	d1d6      	bne.n	800095c <__cmpdf2+0x1c>
 80009ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009b2:	d0d3      	beq.n	800095c <__cmpdf2+0x1c>
 80009b4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <__aeabi_cdrcmple>:
 80009bc:	4684      	mov	ip, r0
 80009be:	4610      	mov	r0, r2
 80009c0:	4662      	mov	r2, ip
 80009c2:	468c      	mov	ip, r1
 80009c4:	4619      	mov	r1, r3
 80009c6:	4663      	mov	r3, ip
 80009c8:	e000      	b.n	80009cc <__aeabi_cdcmpeq>
 80009ca:	bf00      	nop

080009cc <__aeabi_cdcmpeq>:
 80009cc:	b501      	push	{r0, lr}
 80009ce:	f7ff ffb7 	bl	8000940 <__cmpdf2>
 80009d2:	2800      	cmp	r0, #0
 80009d4:	bf48      	it	mi
 80009d6:	f110 0f00 	cmnmi.w	r0, #0
 80009da:	bd01      	pop	{r0, pc}

080009dc <__aeabi_dcmpeq>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff fff4 	bl	80009cc <__aeabi_cdcmpeq>
 80009e4:	bf0c      	ite	eq
 80009e6:	2001      	moveq	r0, #1
 80009e8:	2000      	movne	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmplt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffea 	bl	80009cc <__aeabi_cdcmpeq>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmple>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffe0 	bl	80009cc <__aeabi_cdcmpeq>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpge>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffce 	bl	80009bc <__aeabi_cdrcmple>
 8000a20:	bf94      	ite	ls
 8000a22:	2001      	movls	r0, #1
 8000a24:	2000      	movhi	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpgt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffc4 	bl	80009bc <__aeabi_cdrcmple>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmpun>:
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__aeabi_dcmpun+0x10>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d10a      	bne.n	8000a66 <__aeabi_dcmpun+0x26>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__aeabi_dcmpun+0x20>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_dcmpun+0x26>
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0001 	mov.w	r0, #1
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_d2f>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a74:	bf24      	itt	cs
 8000a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7e:	d90d      	bls.n	8000a9c <__aeabi_d2f+0x30>
 8000a80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a94:	bf08      	it	eq
 8000a96:	f020 0001 	biceq.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa0:	d121      	bne.n	8000ae6 <__aeabi_d2f+0x7a>
 8000aa2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa6:	bfbc      	itt	lt
 8000aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	4770      	bxlt	lr
 8000aae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab6:	f1c2 0218 	rsb	r2, r2, #24
 8000aba:	f1c2 0c20 	rsb	ip, r2, #32
 8000abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	f040 0001 	orrne.w	r0, r0, #1
 8000acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad8:	ea40 000c 	orr.w	r0, r0, ip
 8000adc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae4:	e7cc      	b.n	8000a80 <__aeabi_d2f+0x14>
 8000ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aea:	d107      	bne.n	8000afc <__aeabi_d2f+0x90>
 8000aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af0:	bf1e      	ittt	ne
 8000af2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000afa:	4770      	bxne	lr
 8000afc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_uldivmod>:
 8000b0c:	b953      	cbnz	r3, 8000b24 <__aeabi_uldivmod+0x18>
 8000b0e:	b94a      	cbnz	r2, 8000b24 <__aeabi_uldivmod+0x18>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bf08      	it	eq
 8000b14:	2800      	cmpeq	r0, #0
 8000b16:	bf1c      	itt	ne
 8000b18:	f04f 31ff 	movne.w	r1, #4294967295
 8000b1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b20:	f000 b972 	b.w	8000e08 <__aeabi_idiv0>
 8000b24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b2c:	f000 f806 	bl	8000b3c <__udivmoddi4>
 8000b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b38:	b004      	add	sp, #16
 8000b3a:	4770      	bx	lr

08000b3c <__udivmoddi4>:
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b40:	9e08      	ldr	r6, [sp, #32]
 8000b42:	4604      	mov	r4, r0
 8000b44:	4688      	mov	r8, r1
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d14b      	bne.n	8000be2 <__udivmoddi4+0xa6>
 8000b4a:	428a      	cmp	r2, r1
 8000b4c:	4615      	mov	r5, r2
 8000b4e:	d967      	bls.n	8000c20 <__udivmoddi4+0xe4>
 8000b50:	fab2 f282 	clz	r2, r2
 8000b54:	b14a      	cbz	r2, 8000b6a <__udivmoddi4+0x2e>
 8000b56:	f1c2 0720 	rsb	r7, r2, #32
 8000b5a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b5e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b62:	4095      	lsls	r5, r2
 8000b64:	ea47 0803 	orr.w	r8, r7, r3
 8000b68:	4094      	lsls	r4, r2
 8000b6a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b6e:	0c23      	lsrs	r3, r4, #16
 8000b70:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b74:	fa1f fc85 	uxth.w	ip, r5
 8000b78:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b7c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b80:	fb07 f10c 	mul.w	r1, r7, ip
 8000b84:	4299      	cmp	r1, r3
 8000b86:	d909      	bls.n	8000b9c <__udivmoddi4+0x60>
 8000b88:	18eb      	adds	r3, r5, r3
 8000b8a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b8e:	f080 811b 	bcs.w	8000dc8 <__udivmoddi4+0x28c>
 8000b92:	4299      	cmp	r1, r3
 8000b94:	f240 8118 	bls.w	8000dc8 <__udivmoddi4+0x28c>
 8000b98:	3f02      	subs	r7, #2
 8000b9a:	442b      	add	r3, r5
 8000b9c:	1a5b      	subs	r3, r3, r1
 8000b9e:	b2a4      	uxth	r4, r4
 8000ba0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ba4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ba8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bac:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bb0:	45a4      	cmp	ip, r4
 8000bb2:	d909      	bls.n	8000bc8 <__udivmoddi4+0x8c>
 8000bb4:	192c      	adds	r4, r5, r4
 8000bb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bba:	f080 8107 	bcs.w	8000dcc <__udivmoddi4+0x290>
 8000bbe:	45a4      	cmp	ip, r4
 8000bc0:	f240 8104 	bls.w	8000dcc <__udivmoddi4+0x290>
 8000bc4:	3802      	subs	r0, #2
 8000bc6:	442c      	add	r4, r5
 8000bc8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bcc:	eba4 040c 	sub.w	r4, r4, ip
 8000bd0:	2700      	movs	r7, #0
 8000bd2:	b11e      	cbz	r6, 8000bdc <__udivmoddi4+0xa0>
 8000bd4:	40d4      	lsrs	r4, r2
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bdc:	4639      	mov	r1, r7
 8000bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d909      	bls.n	8000bfa <__udivmoddi4+0xbe>
 8000be6:	2e00      	cmp	r6, #0
 8000be8:	f000 80eb 	beq.w	8000dc2 <__udivmoddi4+0x286>
 8000bec:	2700      	movs	r7, #0
 8000bee:	e9c6 0100 	strd	r0, r1, [r6]
 8000bf2:	4638      	mov	r0, r7
 8000bf4:	4639      	mov	r1, r7
 8000bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfa:	fab3 f783 	clz	r7, r3
 8000bfe:	2f00      	cmp	r7, #0
 8000c00:	d147      	bne.n	8000c92 <__udivmoddi4+0x156>
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d302      	bcc.n	8000c0c <__udivmoddi4+0xd0>
 8000c06:	4282      	cmp	r2, r0
 8000c08:	f200 80fa 	bhi.w	8000e00 <__udivmoddi4+0x2c4>
 8000c0c:	1a84      	subs	r4, r0, r2
 8000c0e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c12:	2001      	movs	r0, #1
 8000c14:	4698      	mov	r8, r3
 8000c16:	2e00      	cmp	r6, #0
 8000c18:	d0e0      	beq.n	8000bdc <__udivmoddi4+0xa0>
 8000c1a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c1e:	e7dd      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000c20:	b902      	cbnz	r2, 8000c24 <__udivmoddi4+0xe8>
 8000c22:	deff      	udf	#255	; 0xff
 8000c24:	fab2 f282 	clz	r2, r2
 8000c28:	2a00      	cmp	r2, #0
 8000c2a:	f040 808f 	bne.w	8000d4c <__udivmoddi4+0x210>
 8000c2e:	1b49      	subs	r1, r1, r5
 8000c30:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c34:	fa1f f885 	uxth.w	r8, r5
 8000c38:	2701      	movs	r7, #1
 8000c3a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c3e:	0c23      	lsrs	r3, r4, #16
 8000c40:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c48:	fb08 f10c 	mul.w	r1, r8, ip
 8000c4c:	4299      	cmp	r1, r3
 8000c4e:	d907      	bls.n	8000c60 <__udivmoddi4+0x124>
 8000c50:	18eb      	adds	r3, r5, r3
 8000c52:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c56:	d202      	bcs.n	8000c5e <__udivmoddi4+0x122>
 8000c58:	4299      	cmp	r1, r3
 8000c5a:	f200 80cd 	bhi.w	8000df8 <__udivmoddi4+0x2bc>
 8000c5e:	4684      	mov	ip, r0
 8000c60:	1a59      	subs	r1, r3, r1
 8000c62:	b2a3      	uxth	r3, r4
 8000c64:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c68:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c6c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c70:	fb08 f800 	mul.w	r8, r8, r0
 8000c74:	45a0      	cmp	r8, r4
 8000c76:	d907      	bls.n	8000c88 <__udivmoddi4+0x14c>
 8000c78:	192c      	adds	r4, r5, r4
 8000c7a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7e:	d202      	bcs.n	8000c86 <__udivmoddi4+0x14a>
 8000c80:	45a0      	cmp	r8, r4
 8000c82:	f200 80b6 	bhi.w	8000df2 <__udivmoddi4+0x2b6>
 8000c86:	4618      	mov	r0, r3
 8000c88:	eba4 0408 	sub.w	r4, r4, r8
 8000c8c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c90:	e79f      	b.n	8000bd2 <__udivmoddi4+0x96>
 8000c92:	f1c7 0c20 	rsb	ip, r7, #32
 8000c96:	40bb      	lsls	r3, r7
 8000c98:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c9c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ca0:	fa01 f407 	lsl.w	r4, r1, r7
 8000ca4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ca8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cac:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cb0:	4325      	orrs	r5, r4
 8000cb2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cb6:	0c2c      	lsrs	r4, r5, #16
 8000cb8:	fb08 3319 	mls	r3, r8, r9, r3
 8000cbc:	fa1f fa8e 	uxth.w	sl, lr
 8000cc0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cc4:	fb09 f40a 	mul.w	r4, r9, sl
 8000cc8:	429c      	cmp	r4, r3
 8000cca:	fa02 f207 	lsl.w	r2, r2, r7
 8000cce:	fa00 f107 	lsl.w	r1, r0, r7
 8000cd2:	d90b      	bls.n	8000cec <__udivmoddi4+0x1b0>
 8000cd4:	eb1e 0303 	adds.w	r3, lr, r3
 8000cd8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cdc:	f080 8087 	bcs.w	8000dee <__udivmoddi4+0x2b2>
 8000ce0:	429c      	cmp	r4, r3
 8000ce2:	f240 8084 	bls.w	8000dee <__udivmoddi4+0x2b2>
 8000ce6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cea:	4473      	add	r3, lr
 8000cec:	1b1b      	subs	r3, r3, r4
 8000cee:	b2ad      	uxth	r5, r5
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cfc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d00:	45a2      	cmp	sl, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x1da>
 8000d04:	eb1e 0404 	adds.w	r4, lr, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	d26b      	bcs.n	8000de6 <__udivmoddi4+0x2aa>
 8000d0e:	45a2      	cmp	sl, r4
 8000d10:	d969      	bls.n	8000de6 <__udivmoddi4+0x2aa>
 8000d12:	3802      	subs	r0, #2
 8000d14:	4474      	add	r4, lr
 8000d16:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d1e:	eba4 040a 	sub.w	r4, r4, sl
 8000d22:	454c      	cmp	r4, r9
 8000d24:	46c2      	mov	sl, r8
 8000d26:	464b      	mov	r3, r9
 8000d28:	d354      	bcc.n	8000dd4 <__udivmoddi4+0x298>
 8000d2a:	d051      	beq.n	8000dd0 <__udivmoddi4+0x294>
 8000d2c:	2e00      	cmp	r6, #0
 8000d2e:	d069      	beq.n	8000e04 <__udivmoddi4+0x2c8>
 8000d30:	ebb1 050a 	subs.w	r5, r1, sl
 8000d34:	eb64 0403 	sbc.w	r4, r4, r3
 8000d38:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d3c:	40fd      	lsrs	r5, r7
 8000d3e:	40fc      	lsrs	r4, r7
 8000d40:	ea4c 0505 	orr.w	r5, ip, r5
 8000d44:	e9c6 5400 	strd	r5, r4, [r6]
 8000d48:	2700      	movs	r7, #0
 8000d4a:	e747      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000d4c:	f1c2 0320 	rsb	r3, r2, #32
 8000d50:	fa20 f703 	lsr.w	r7, r0, r3
 8000d54:	4095      	lsls	r5, r2
 8000d56:	fa01 f002 	lsl.w	r0, r1, r2
 8000d5a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d5e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d62:	4338      	orrs	r0, r7
 8000d64:	0c01      	lsrs	r1, r0, #16
 8000d66:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d6a:	fa1f f885 	uxth.w	r8, r5
 8000d6e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d76:	fb07 f308 	mul.w	r3, r7, r8
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d80:	d907      	bls.n	8000d92 <__udivmoddi4+0x256>
 8000d82:	1869      	adds	r1, r5, r1
 8000d84:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d88:	d22f      	bcs.n	8000dea <__udivmoddi4+0x2ae>
 8000d8a:	428b      	cmp	r3, r1
 8000d8c:	d92d      	bls.n	8000dea <__udivmoddi4+0x2ae>
 8000d8e:	3f02      	subs	r7, #2
 8000d90:	4429      	add	r1, r5
 8000d92:	1acb      	subs	r3, r1, r3
 8000d94:	b281      	uxth	r1, r0
 8000d96:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d9a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da2:	fb00 f308 	mul.w	r3, r0, r8
 8000da6:	428b      	cmp	r3, r1
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x27e>
 8000daa:	1869      	adds	r1, r5, r1
 8000dac:	f100 3cff 	add.w	ip, r0, #4294967295
 8000db0:	d217      	bcs.n	8000de2 <__udivmoddi4+0x2a6>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d915      	bls.n	8000de2 <__udivmoddi4+0x2a6>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4429      	add	r1, r5
 8000dba:	1ac9      	subs	r1, r1, r3
 8000dbc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000dc0:	e73b      	b.n	8000c3a <__udivmoddi4+0xfe>
 8000dc2:	4637      	mov	r7, r6
 8000dc4:	4630      	mov	r0, r6
 8000dc6:	e709      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000dc8:	4607      	mov	r7, r0
 8000dca:	e6e7      	b.n	8000b9c <__udivmoddi4+0x60>
 8000dcc:	4618      	mov	r0, r3
 8000dce:	e6fb      	b.n	8000bc8 <__udivmoddi4+0x8c>
 8000dd0:	4541      	cmp	r1, r8
 8000dd2:	d2ab      	bcs.n	8000d2c <__udivmoddi4+0x1f0>
 8000dd4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dd8:	eb69 020e 	sbc.w	r2, r9, lr
 8000ddc:	3801      	subs	r0, #1
 8000dde:	4613      	mov	r3, r2
 8000de0:	e7a4      	b.n	8000d2c <__udivmoddi4+0x1f0>
 8000de2:	4660      	mov	r0, ip
 8000de4:	e7e9      	b.n	8000dba <__udivmoddi4+0x27e>
 8000de6:	4618      	mov	r0, r3
 8000de8:	e795      	b.n	8000d16 <__udivmoddi4+0x1da>
 8000dea:	4667      	mov	r7, ip
 8000dec:	e7d1      	b.n	8000d92 <__udivmoddi4+0x256>
 8000dee:	4681      	mov	r9, r0
 8000df0:	e77c      	b.n	8000cec <__udivmoddi4+0x1b0>
 8000df2:	3802      	subs	r0, #2
 8000df4:	442c      	add	r4, r5
 8000df6:	e747      	b.n	8000c88 <__udivmoddi4+0x14c>
 8000df8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dfc:	442b      	add	r3, r5
 8000dfe:	e72f      	b.n	8000c60 <__udivmoddi4+0x124>
 8000e00:	4638      	mov	r0, r7
 8000e02:	e708      	b.n	8000c16 <__udivmoddi4+0xda>
 8000e04:	4637      	mov	r7, r6
 8000e06:	e6e9      	b.n	8000bdc <__udivmoddi4+0xa0>

08000e08 <__aeabi_idiv0>:
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop

08000e0c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000e24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e30:	68fb      	ldr	r3, [r7, #12]
}
 8000e32:	bf00      	nop
 8000e34:	3714      	adds	r7, #20
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
	...

08000e40 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e46:	463b      	mov	r3, r7
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
 8000e54:	615a      	str	r2, [r3, #20]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000e56:	4b2b      	ldr	r3, [pc, #172]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e58:	4a2b      	ldr	r2, [pc, #172]	; (8000f08 <MX_ADC1_Init+0xc8>)
 8000e5a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8000e5c:	4b29      	ldr	r3, [pc, #164]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e5e:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8000e62:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000e64:	4b27      	ldr	r3, [pc, #156]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e66:	2210      	movs	r2, #16
 8000e68:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e6a:	4b26      	ldr	r3, [pc, #152]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e70:	4b24      	ldr	r3, [pc, #144]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e76:	4b23      	ldr	r3, [pc, #140]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e78:	2204      	movs	r2, #4
 8000e7a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e7c:	4b21      	ldr	r3, [pc, #132]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e82:	4b20      	ldr	r3, [pc, #128]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e84:	2201      	movs	r2, #1
 8000e86:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000e88:	4b1e      	ldr	r3, [pc, #120]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e8e:	4b1d      	ldr	r3, [pc, #116]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000e96:	4b1b      	ldr	r3, [pc, #108]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e9c:	4b19      	ldr	r3, [pc, #100]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ea2:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000ea8:	4b16      	ldr	r3, [pc, #88]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000eaa:	2201      	movs	r2, #1
 8000eac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000eb0:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000eb6:	4b13      	ldr	r3, [pc, #76]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ebe:	4811      	ldr	r0, [pc, #68]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000ec0:	f005 fa20 	bl	8006304 <HAL_ADC_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000eca:	f003 f9f1 	bl	80042b0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000ece:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <MX_ADC1_Init+0xcc>)
 8000ed0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ed2:	2306      	movs	r3, #6
 8000ed4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000ed6:	2306      	movs	r3, #6
 8000ed8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000eda:	237f      	movs	r3, #127	; 0x7f
 8000edc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ede:	2304      	movs	r3, #4
 8000ee0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ee6:	463b      	mov	r3, r7
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4806      	ldr	r0, [pc, #24]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000eec:	f005 fc40 	bl	8006770 <HAL_ADC_ConfigChannel>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 8000ef6:	f003 f9db 	bl	80042b0 <Error_Handler>
  }

}
 8000efa:	bf00      	nop
 8000efc:	3718      	adds	r7, #24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	200276b4 	.word	0x200276b4
 8000f08:	50040000 	.word	0x50040000
 8000f0c:	14f00020 	.word	0x14f00020

08000f10 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b088      	sub	sp, #32
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 030c 	add.w	r3, r7, #12
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a21      	ldr	r2, [pc, #132]	; (8000fb4 <HAL_ADC_MspInit+0xa4>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d13c      	bne.n	8000fac <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000f32:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f36:	f7ff ff69 	bl	8000e0c <LL_AHB2_GRP1_EnableClock>
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3a:	2001      	movs	r0, #1
 8000f3c:	f7ff ff66 	bl	8000e0c <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f40:	2301      	movs	r3, #1
 8000f42:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f44:	2303      	movs	r3, #3
 8000f46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4c:	f107 030c 	add.w	r3, r7, #12
 8000f50:	4619      	mov	r1, r3
 8000f52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f56:	f007 f855 	bl	8008004 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000f5a:	4b17      	ldr	r3, [pc, #92]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f5c:	4a17      	ldr	r2, [pc, #92]	; (8000fbc <HAL_ADC_MspInit+0xac>)
 8000f5e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000f60:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f62:	2205      	movs	r2, #5
 8000f64:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f66:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f6c:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f74:	2280      	movs	r2, #128	; 0x80
 8000f76:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f78:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f86:	2220      	movs	r2, #32
 8000f88:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f8a:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f90:	4809      	ldr	r0, [pc, #36]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f92:	f006 fd07 	bl	80079a4 <HAL_DMA_Init>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <HAL_ADC_MspInit+0x90>
    {
      Error_Handler();
 8000f9c:	f003 f988 	bl	80042b0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4a05      	ldr	r2, [pc, #20]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000fa4:	64da      	str	r2, [r3, #76]	; 0x4c
 8000fa6:	4a04      	ldr	r2, [pc, #16]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fac:	bf00      	nop
 8000fae:	3720      	adds	r7, #32
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	50040000 	.word	0x50040000
 8000fb8:	20027718 	.word	0x20027718
 8000fbc:	40020008 	.word	0x40020008

08000fc0 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000fc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000fd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	608b      	str	r3, [r1, #8]
}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <APPE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 8000fec:	f000 f80a 	bl	8001004 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000ff0:	4903      	ldr	r1, [pc, #12]	; (8001000 <APPE_Init+0x18>)
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	f002 f934 	bl	8003260 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  //UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000ff8:	f000 f80e 	bl	8001018 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000ffc:	bf00      	nop
}
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	200283f4 	.word	0x200283f4

08001004 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config( void )
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0

  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001008:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800100c:	f7ff ffd8 	bl	8000fc0 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init( );
 8001010:	f013 fd7c 	bl	8014b0c <UTIL_LPM_Init>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 8001014:	bf00      	nop
}
 8001016:	bd80      	pop	{r7, pc}

08001018 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b088      	sub	sp, #32
 800101c:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800101e:	f012 fa67 	bl	80134f0 <TL_Init>

  MtxShciId = osMutexNew( NULL );
 8001022:	2000      	movs	r0, #0
 8001024:	f00c fe60 	bl	800dce8 <osMutexNew>
 8001028:	4602      	mov	r2, r0
 800102a:	4b17      	ldr	r3, [pc, #92]	; (8001088 <appe_Tl_Init+0x70>)
 800102c:	601a      	str	r2, [r3, #0]
  SemShciId = osSemaphoreNew( 1, 0, NULL ); /*< Create the semaphore and make it busy at initialization */
 800102e:	2200      	movs	r2, #0
 8001030:	2100      	movs	r1, #0
 8001032:	2001      	movs	r0, #1
 8001034:	f00c ffa0 	bl	800df78 <osSemaphoreNew>
 8001038:	4602      	mov	r2, r0
 800103a:	4b14      	ldr	r3, [pc, #80]	; (800108c <appe_Tl_Init+0x74>)
 800103c:	601a      	str	r2, [r3, #0]

  /** FreeRTOS system task creation */
  ShciUserEvtProcessId = osThreadNew(ShciUserEvtProcess, NULL, &ShciUserEvtProcess_attr);
 800103e:	4a14      	ldr	r2, [pc, #80]	; (8001090 <appe_Tl_Init+0x78>)
 8001040:	2100      	movs	r1, #0
 8001042:	4814      	ldr	r0, [pc, #80]	; (8001094 <appe_Tl_Init+0x7c>)
 8001044:	f00c fb0c 	bl	800d660 <osThreadNew>
 8001048:	4602      	mov	r2, r0
 800104a:	4b13      	ldr	r3, [pc, #76]	; (8001098 <appe_Tl_Init+0x80>)
 800104c:	601a      	str	r2, [r3, #0]

  /**< System channel initialization */
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 800104e:	4b13      	ldr	r3, [pc, #76]	; (800109c <appe_Tl_Init+0x84>)
 8001050:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001052:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <appe_Tl_Init+0x88>)
 8001054:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8001056:	463b      	mov	r3, r7
 8001058:	4619      	mov	r1, r3
 800105a:	4812      	ldr	r0, [pc, #72]	; (80010a4 <appe_Tl_Init+0x8c>)
 800105c:	f011 ff22 	bl	8012ea4 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = 0;
 8001060:	2300      	movs	r3, #0
 8001062:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8001064:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <appe_Tl_Init+0x90>)
 8001066:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8001068:	4b10      	ldr	r3, [pc, #64]	; (80010ac <appe_Tl_Init+0x94>)
 800106a:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800106c:	f240 533c 	movw	r3, #1340	; 0x53c
 8001070:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8001072:	f107 0308 	add.w	r3, r7, #8
 8001076:	4618      	mov	r0, r3
 8001078:	f012 fb78 	bl	801376c <TL_MM_Init>

  TL_Enable();
 800107c:	f012 fa31 	bl	80134e2 <TL_Enable>

  return;
 8001080:	bf00      	nop
}
 8001082:	3720      	adds	r7, #32
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20027778 	.word	0x20027778
 800108c:	20027790 	.word	0x20027790
 8001090:	08016780 	.word	0x08016780
 8001094:	08001199 	.word	0x08001199
 8001098:	2002777c 	.word	0x2002777c
 800109c:	20030600 	.word	0x20030600
 80010a0:	080010b1 	.word	0x080010b1
 80010a4:	080010f1 	.word	0x080010f1
 80010a8:	2003070c 	.word	0x2003070c
 80010ac:	200300c4 	.word	0x200300c4

080010b0 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	71fb      	strb	r3, [r7, #7]
  switch (status)
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d002      	beq.n	80010c6 <APPE_SysStatusNot+0x16>
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d008      	beq.n	80010d6 <APPE_SysStatusNot+0x26>
    case SHCI_TL_CmdAvailable:
      osMutexRelease( MtxShciId );
      break;

    default:
      break;
 80010c4:	e00d      	b.n	80010e2 <APPE_SysStatusNot+0x32>
      osMutexAcquire( MtxShciId, osWaitForever );
 80010c6:	4b09      	ldr	r3, [pc, #36]	; (80010ec <APPE_SysStatusNot+0x3c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f04f 31ff 	mov.w	r1, #4294967295
 80010ce:	4618      	mov	r0, r3
 80010d0:	f00c fea4 	bl	800de1c <osMutexAcquire>
      break;
 80010d4:	e005      	b.n	80010e2 <APPE_SysStatusNot+0x32>
      osMutexRelease( MtxShciId );
 80010d6:	4b05      	ldr	r3, [pc, #20]	; (80010ec <APPE_SysStatusNot+0x3c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4618      	mov	r0, r3
 80010dc:	f00c fefc 	bl	800ded8 <osMutexRelease>
      break;
 80010e0:	bf00      	nop
  }
  return;
 80010e2:	bf00      	nop
}
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20027778 	.word	0x20027778

080010f0 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	330b      	adds	r3, #11
 80010fe:	60fb      	str	r3, [r7, #12]

  switch(p_sys_event->subevtcode)
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	881b      	ldrh	r3, [r3, #0]
 8001104:	b29b      	uxth	r3, r3
 8001106:	f5b3 4f12 	cmp.w	r3, #37376	; 0x9200
 800110a:	d004      	beq.n	8001116 <APPE_SysUserEvtRx+0x26>
 800110c:	f249 2201 	movw	r2, #37377	; 0x9201
 8001110:	4293      	cmp	r3, r2
 8001112:	d003      	beq.n	800111c <APPE_SysUserEvtRx+0x2c>
         break;
     case SHCI_SUB_EVT_ERROR_NOTIF:
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
         break;
     default:
         break;
 8001114:	e008      	b.n	8001128 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtReadyProcessing();
 8001116:	f000 f833 	bl	8001180 <APPE_SysEvtReadyProcessing>
         break;
 800111a:	e005      	b.n	8001128 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	789b      	ldrb	r3, [r3, #2]
 8001120:	4618      	mov	r0, r3
 8001122:	f000 f805 	bl	8001130 <APPE_SysEvtError>
         break;
 8001126:	bf00      	nop
  }
  return;
 8001128:	bf00      	nop
}
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError( SCHI_SystemErrCode_t ErrorCode)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	71fb      	strb	r3, [r7, #7]
  switch(ErrorCode)
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	2b7d      	cmp	r3, #125	; 0x7d
 800113e:	d002      	beq.n	8001146 <APPE_SysEvtError+0x16>
 8001140:	2b7e      	cmp	r3, #126	; 0x7e
 8001142:	d006      	beq.n	8001152 <APPE_SysEvtError+0x22>
 8001144:	e00b      	b.n	800115e <APPE_SysEvtError+0x2e>
  {
  case ERR_THREAD_LLD_FATAL_ERROR:
       APP_DBG("** ERR_THREAD : LLD_FATAL_ERROR \n");
 8001146:	4a0b      	ldr	r2, [pc, #44]	; (8001174 <APPE_SysEvtError+0x44>)
 8001148:	2101      	movs	r1, #1
 800114a:	2000      	movs	r0, #0
 800114c:	f003 ff8c 	bl	8005068 <logApplication>
       break;
 8001150:	e00c      	b.n	800116c <APPE_SysEvtError+0x3c>
  case ERR_THREAD_UNKNOWN_CMD:
       APP_DBG("** ERR_THREAD : UNKNOWN_CMD \n");
 8001152:	4a09      	ldr	r2, [pc, #36]	; (8001178 <APPE_SysEvtError+0x48>)
 8001154:	2101      	movs	r1, #1
 8001156:	2000      	movs	r0, #0
 8001158:	f003 ff86 	bl	8005068 <logApplication>
       break;
 800115c:	e006      	b.n	800116c <APPE_SysEvtError+0x3c>
  default:
       APP_DBG("** ERR_THREAD : ErroCode=%d \n",ErrorCode);
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	4a06      	ldr	r2, [pc, #24]	; (800117c <APPE_SysEvtError+0x4c>)
 8001162:	2101      	movs	r1, #1
 8001164:	2000      	movs	r0, #0
 8001166:	f003 ff7f 	bl	8005068 <logApplication>
       break;
 800116a:	bf00      	nop
  }
  return;
 800116c:	bf00      	nop
}
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	08016318 	.word	0x08016318
 8001178:	0801633c 	.word	0x0801633c
 800117c:	0801635c 	.word	0x0801635c

08001180 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing( void )
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* Traces channel initialization */
  TL_TRACES_Init( );
 8001184:	f012 fb62 	bl	801384c <TL_TRACES_Init>

  APP_THREAD_Init();
 8001188:	f012 fb8c 	bl	80138a4 <APP_THREAD_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 800118c:	2100      	movs	r1, #0
 800118e:	2001      	movs	r0, #1
 8001190:	f013 fcce 	bl	8014b30 <UTIL_LPM_SetOffMode>
  return;
 8001194:	bf00      	nop
}
 8001196:	bd80      	pop	{r7, pc}

08001198 <ShciUserEvtProcess>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void ShciUserEvtProcess(void *argument)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN SHCI_USER_EVT_PROCESS_1 */

    /* USER CODE END SHCI_USER_EVT_PROCESS_1 */
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 80011a0:	f04f 32ff 	mov.w	r2, #4294967295
 80011a4:	2100      	movs	r1, #0
 80011a6:	2001      	movs	r0, #1
 80011a8:	f00c fbb8 	bl	800d91c <osThreadFlagsWait>
     shci_user_evt_proc();
 80011ac:	f011 fe96 	bl	8012edc <shci_user_evt_proc>
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 80011b0:	e7f6      	b.n	80011a0 <ShciUserEvtProcess+0x8>
	...

080011b4 <shci_notify_asynch_evt>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void shci_notify_asynch_evt(void* pdata)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  osThreadFlagsSet(ShciUserEvtProcessId,1);
 80011bc:	4b04      	ldr	r3, [pc, #16]	; (80011d0 <shci_notify_asynch_evt+0x1c>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2101      	movs	r1, #1
 80011c2:	4618      	mov	r0, r3
 80011c4:	f00c faf8 	bl	800d7b8 <osThreadFlagsSet>
  return;
 80011c8:	bf00      	nop
}
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	2002777c 	.word	0x2002777c

080011d4 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  osSemaphoreRelease( SemShciId );
 80011dc:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <shci_cmd_resp_release+0x1c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f00c ffcd 	bl	800e180 <osSemaphoreRelease>
  return;
 80011e6:	bf00      	nop
}
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20027790 	.word	0x20027790

080011f4 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  osSemaphoreAcquire( SemShciId, osWaitForever );
 80011fc:	4b05      	ldr	r3, [pc, #20]	; (8001214 <shci_cmd_resp_wait+0x20>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f04f 31ff 	mov.w	r1, #4294967295
 8001204:	4618      	mov	r0, r3
 8001206:	f00c ff55 	bl	800e0b4 <osSemaphoreAcquire>
  return;
 800120a:	bf00      	nop
}
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20027790 	.word	0x20027790

08001218 <TL_TRACES_EvtReceived>:

/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
#endif /* CFG_DEBUG_TRACE */
  /* Release buffer */
  TL_MM_EvtDone( hcievt );
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f012 fadf 	bl	80137e4 <TL_MM_EvtDone>
}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <configureTimerForRunTimeStats>:

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
volatile unsigned long ulHighFrequencyTimerTicks;
__weak void configureTimerForRunTimeStats(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0

}
 8001232:	bf00      	nop
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
return HAL_GetTick();
 8001240:	f004 fe26 	bl	8005e90 <HAL_GetTick>
 8001244:	4603      	mov	r3, r0
}
 8001246:	4618      	mov	r0, r3
 8001248:	bd80      	pop	{r7, pc}

0800124a <vApplicationTickHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 3 */
__weak void vApplicationTickHook( void )
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 800124e:	bf00      	nop
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
volatile uint8_t test=0;
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]

   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
	test += 1;
 8001262:	4b06      	ldr	r3, [pc, #24]	; (800127c <vApplicationStackOverflowHook+0x24>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	b2db      	uxtb	r3, r3
 8001268:	3301      	adds	r3, #1
 800126a:	b2da      	uxtb	r2, r3
 800126c:	4b03      	ldr	r3, [pc, #12]	; (800127c <vApplicationStackOverflowHook+0x24>)
 800126e:	701a      	strb	r2, [r3, #0]
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	20000204 	.word	0x20000204

08001280 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
	test += 1;
 8001284:	4b05      	ldr	r3, [pc, #20]	; (800129c <vApplicationMallocFailedHook+0x1c>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	b2db      	uxtb	r3, r3
 800128a:	3301      	adds	r3, #1
 800128c:	b2da      	uxtb	r2, r3
 800128e:	4b03      	ldr	r3, [pc, #12]	; (800129c <vApplicationMallocFailedHook+0x1c>)
 8001290:	701a      	strb	r2, [r3, #0]

}
 8001292:	bf00      	nop
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	20000204 	.word	0x20000204

080012a0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of messageI2C_Lock */
  messageI2C_LockHandle = osSemaphoreNew(1, 1, &messageI2C_Lock_attributes);
 80012a4:	4a5c      	ldr	r2, [pc, #368]	; (8001418 <MX_FREERTOS_Init+0x178>)
 80012a6:	2101      	movs	r1, #1
 80012a8:	2001      	movs	r0, #1
 80012aa:	f00c fe65 	bl	800df78 <osSemaphoreNew>
 80012ae:	4602      	mov	r2, r0
 80012b0:	4b5a      	ldr	r3, [pc, #360]	; (800141c <MX_FREERTOS_Init+0x17c>)
 80012b2:	601a      	str	r2, [r3, #0]

  /* creation of locNotify */
  locNotifyHandle = osSemaphoreNew(1, 1, &locNotify_attributes);
 80012b4:	4a5a      	ldr	r2, [pc, #360]	; (8001420 <MX_FREERTOS_Init+0x180>)
 80012b6:	2101      	movs	r1, #1
 80012b8:	2001      	movs	r0, #1
 80012ba:	f00c fe5d 	bl	800df78 <osSemaphoreNew>
 80012be:	4602      	mov	r2, r0
 80012c0:	4b58      	ldr	r3, [pc, #352]	; (8001424 <MX_FREERTOS_Init+0x184>)
 80012c2:	601a      	str	r2, [r3, #0]

  /* creation of locComplete */
  locCompleteHandle = osSemaphoreNew(1, 1, &locComplete_attributes);
 80012c4:	4a58      	ldr	r2, [pc, #352]	; (8001428 <MX_FREERTOS_Init+0x188>)
 80012c6:	2101      	movs	r1, #1
 80012c8:	2001      	movs	r0, #1
 80012ca:	f00c fe55 	bl	800df78 <osSemaphoreNew>
 80012ce:	4602      	mov	r2, r0
 80012d0:	4b56      	ldr	r3, [pc, #344]	; (800142c <MX_FREERTOS_Init+0x18c>)
 80012d2:	601a      	str	r2, [r3, #0]
//  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of viveTimer */
  viveTimerHandle = osTimerNew(get3D_location, osTimerPeriodic, NULL, &viveTimer_attributes);
 80012d4:	4b56      	ldr	r3, [pc, #344]	; (8001430 <MX_FREERTOS_Init+0x190>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	2101      	movs	r1, #1
 80012da:	4856      	ldr	r0, [pc, #344]	; (8001434 <MX_FREERTOS_Init+0x194>)
 80012dc:	f00c fbf6 	bl	800dacc <osTimerNew>
 80012e0:	4602      	mov	r2, r0
 80012e2:	4b55      	ldr	r3, [pc, #340]	; (8001438 <MX_FREERTOS_Init+0x198>)
 80012e4:	601a      	str	r2, [r3, #0]
//  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of blinkMsgQueue */
  blinkMsgQueueHandle = osMessageQueueNew (10, 108, &blinkMsgQueue_attributes);
 80012e6:	4a55      	ldr	r2, [pc, #340]	; (800143c <MX_FREERTOS_Init+0x19c>)
 80012e8:	216c      	movs	r1, #108	; 0x6c
 80012ea:	200a      	movs	r0, #10
 80012ec:	f00c ffa0 	bl	800e230 <osMessageQueueNew>
 80012f0:	4602      	mov	r2, r0
 80012f2:	4b53      	ldr	r3, [pc, #332]	; (8001440 <MX_FREERTOS_Init+0x1a0>)
 80012f4:	601a      	str	r2, [r3, #0]

  /* creation of lightsSimpleQueue */
  lightsSimpleQueueHandle = osMessageQueueNew (3, 4, &lightsSimpleQueue_attributes);
 80012f6:	4a53      	ldr	r2, [pc, #332]	; (8001444 <MX_FREERTOS_Init+0x1a4>)
 80012f8:	2104      	movs	r1, #4
 80012fa:	2003      	movs	r0, #3
 80012fc:	f00c ff98 	bl	800e230 <osMessageQueueNew>
 8001300:	4602      	mov	r2, r0
 8001302:	4b51      	ldr	r3, [pc, #324]	; (8001448 <MX_FREERTOS_Init+0x1a8>)
 8001304:	601a      	str	r2, [r3, #0]

  /* creation of togLoggingQueue */
  togLoggingQueueHandle = osMessageQueueNew (4, 6, &togLoggingQueue_attributes);
 8001306:	4a51      	ldr	r2, [pc, #324]	; (800144c <MX_FREERTOS_Init+0x1ac>)
 8001308:	2106      	movs	r1, #6
 800130a:	2004      	movs	r0, #4
 800130c:	f00c ff90 	bl	800e230 <osMessageQueueNew>
 8001310:	4602      	mov	r2, r0
 8001312:	4b4f      	ldr	r3, [pc, #316]	; (8001450 <MX_FREERTOS_Init+0x1b0>)
 8001314:	601a      	str	r2, [r3, #0]

  /* creation of interProcessorMsgQueue */
  interProcessorMsgQueueHandle = osMessageQueueNew (10, 24, &interProcessorMsgQueue_attributes);
 8001316:	4a4f      	ldr	r2, [pc, #316]	; (8001454 <MX_FREERTOS_Init+0x1b4>)
 8001318:	2118      	movs	r1, #24
 800131a:	200a      	movs	r0, #10
 800131c:	f00c ff88 	bl	800e230 <osMessageQueueNew>
 8001320:	4602      	mov	r2, r0
 8001322:	4b4d      	ldr	r3, [pc, #308]	; (8001458 <MX_FREERTOS_Init+0x1b8>)
 8001324:	601a      	str	r2, [r3, #0]

  /* creation of inertialSensingQueue */
  inertialSensingQueueHandle = osMessageQueueNew (10, 40, &inertialSensingQueue_attributes);
 8001326:	4a4d      	ldr	r2, [pc, #308]	; (800145c <MX_FREERTOS_Init+0x1bc>)
 8001328:	2128      	movs	r1, #40	; 0x28
 800132a:	200a      	movs	r0, #10
 800132c:	f00c ff80 	bl	800e230 <osMessageQueueNew>
 8001330:	4602      	mov	r2, r0
 8001332:	4b4b      	ldr	r3, [pc, #300]	; (8001460 <MX_FREERTOS_Init+0x1c0>)
 8001334:	601a      	str	r2, [r3, #0]

  /* creation of activitySampleQueue */
  activitySampleQueueHandle = osMessageQueueNew (10, 16, &activitySampleQueue_attributes);
 8001336:	4a4b      	ldr	r2, [pc, #300]	; (8001464 <MX_FREERTOS_Init+0x1c4>)
 8001338:	2110      	movs	r1, #16
 800133a:	200a      	movs	r0, #10
 800133c:	f00c ff78 	bl	800e230 <osMessageQueueNew>
 8001340:	4602      	mov	r2, r0
 8001342:	4b49      	ldr	r3, [pc, #292]	; (8001468 <MX_FREERTOS_Init+0x1c8>)
 8001344:	601a      	str	r2, [r3, #0]

  /* creation of rotationSampleQueue */
  rotationSampleQueueHandle = osMessageQueueNew (3, 24, &rotationSampleQueue_attributes);
 8001346:	4a49      	ldr	r2, [pc, #292]	; (800146c <MX_FREERTOS_Init+0x1cc>)
 8001348:	2118      	movs	r1, #24
 800134a:	2003      	movs	r0, #3
 800134c:	f00c ff70 	bl	800e230 <osMessageQueueNew>
 8001350:	4602      	mov	r2, r0
 8001352:	4b47      	ldr	r3, [pc, #284]	; (8001470 <MX_FREERTOS_Init+0x1d0>)
 8001354:	601a      	str	r2, [r3, #0]

  /* creation of pulseQueue */
  pulseQueueHandle = osMessageQueueNew (10, 6, &pulseQueue_attributes);
 8001356:	4a47      	ldr	r2, [pc, #284]	; (8001474 <MX_FREERTOS_Init+0x1d4>)
 8001358:	2106      	movs	r1, #6
 800135a:	200a      	movs	r0, #10
 800135c:	f00c ff68 	bl	800e230 <osMessageQueueNew>
 8001360:	4602      	mov	r2, r0
 8001362:	4b45      	ldr	r3, [pc, #276]	; (8001478 <MX_FREERTOS_Init+0x1d8>)
 8001364:	601a      	str	r2, [r3, #0]

  /* creation of viveQueue */
  viveQueueHandle = osMessageQueueNew (10, 24, &viveQueue_attributes);
 8001366:	4a45      	ldr	r2, [pc, #276]	; (800147c <MX_FREERTOS_Init+0x1dc>)
 8001368:	2118      	movs	r1, #24
 800136a:	200a      	movs	r0, #10
 800136c:	f00c ff60 	bl	800e230 <osMessageQueueNew>
 8001370:	4602      	mov	r2, r0
 8001372:	4b43      	ldr	r3, [pc, #268]	; (8001480 <MX_FREERTOS_Init+0x1e0>)
 8001374:	601a      	str	r2, [r3, #0]

  /* creation of statusQueue */
  statusQueueHandle = osMessageQueueNew (1, sizeof(uint32_t), &statusQueue_attributes);
 8001376:	4a43      	ldr	r2, [pc, #268]	; (8001484 <MX_FREERTOS_Init+0x1e4>)
 8001378:	2104      	movs	r1, #4
 800137a:	2001      	movs	r0, #1
 800137c:	f00c ff58 	bl	800e230 <osMessageQueueNew>
 8001380:	4602      	mov	r2, r0
 8001382:	4b41      	ldr	r3, [pc, #260]	; (8001488 <MX_FREERTOS_Init+0x1e8>)
 8001384:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(DefaultTask, NULL, &defaultTask_attributes);
 8001386:	4a41      	ldr	r2, [pc, #260]	; (800148c <MX_FREERTOS_Init+0x1ec>)
 8001388:	2100      	movs	r1, #0
 800138a:	4841      	ldr	r0, [pc, #260]	; (8001490 <MX_FREERTOS_Init+0x1f0>)
 800138c:	f00c f968 	bl	800d660 <osThreadNew>
 8001390:	4602      	mov	r2, r0
 8001392:	4b40      	ldr	r3, [pc, #256]	; (8001494 <MX_FREERTOS_Init+0x1f4>)
 8001394:	601a      	str	r2, [r3, #0]

  /* creation of frontLightsTask */
  frontLightsTaskHandle = osThreadNew(ThreadFrontLightsTask, NULL, &frontLightsTask_attributes);
 8001396:	4a40      	ldr	r2, [pc, #256]	; (8001498 <MX_FREERTOS_Init+0x1f8>)
 8001398:	2100      	movs	r1, #0
 800139a:	4840      	ldr	r0, [pc, #256]	; (800149c <MX_FREERTOS_Init+0x1fc>)
 800139c:	f00c f960 	bl	800d660 <osThreadNew>
 80013a0:	4602      	mov	r2, r0
 80013a2:	4b3f      	ldr	r3, [pc, #252]	; (80014a0 <MX_FREERTOS_Init+0x200>)
 80013a4:	601a      	str	r2, [r3, #0]

  /* creation of masterTask */
  masterTaskHandle = osThreadNew(MasterThreadTask, NULL, &masterTask_attributes);
 80013a6:	4a3f      	ldr	r2, [pc, #252]	; (80014a4 <MX_FREERTOS_Init+0x204>)
 80013a8:	2100      	movs	r1, #0
 80013aa:	483f      	ldr	r0, [pc, #252]	; (80014a8 <MX_FREERTOS_Init+0x208>)
 80013ac:	f00c f958 	bl	800d660 <osThreadNew>
 80013b0:	4602      	mov	r2, r0
 80013b2:	4b3e      	ldr	r3, [pc, #248]	; (80014ac <MX_FREERTOS_Init+0x20c>)
 80013b4:	601a      	str	r2, [r3, #0]

  /* creation of inertialTask */
  inertialTaskHandle = osThreadNew(InertialSensingTask, NULL, &inertialTask_attributes);
 80013b6:	4a3e      	ldr	r2, [pc, #248]	; (80014b0 <MX_FREERTOS_Init+0x210>)
 80013b8:	2100      	movs	r1, #0
 80013ba:	483e      	ldr	r0, [pc, #248]	; (80014b4 <MX_FREERTOS_Init+0x214>)
 80013bc:	f00c f950 	bl	800d660 <osThreadNew>
 80013c0:	4602      	mov	r2, r0
 80013c2:	4b3d      	ldr	r3, [pc, #244]	; (80014b8 <MX_FREERTOS_Init+0x218>)
 80013c4:	601a      	str	r2, [r3, #0]

  /* creation of pulseTask */
  pulseTaskHandle = osThreadNew(PulseHandlerTask, NULL, &pulseTask_attributes);
 80013c6:	4a3d      	ldr	r2, [pc, #244]	; (80014bc <MX_FREERTOS_Init+0x21c>)
 80013c8:	2100      	movs	r1, #0
 80013ca:	483d      	ldr	r0, [pc, #244]	; (80014c0 <MX_FREERTOS_Init+0x220>)
 80013cc:	f00c f948 	bl	800d660 <osThreadNew>
 80013d0:	4602      	mov	r2, r0
 80013d2:	4b3c      	ldr	r3, [pc, #240]	; (80014c4 <MX_FREERTOS_Init+0x224>)
 80013d4:	601a      	str	r2, [r3, #0]

  /* creation of interProcTask */
  interProcTaskHandle = osThreadNew(InterProcessorTask, NULL, &interProcTask_attributes);
 80013d6:	4a3c      	ldr	r2, [pc, #240]	; (80014c8 <MX_FREERTOS_Init+0x228>)
 80013d8:	2100      	movs	r1, #0
 80013da:	483c      	ldr	r0, [pc, #240]	; (80014cc <MX_FREERTOS_Init+0x22c>)
 80013dc:	f00c f940 	bl	800d660 <osThreadNew>
 80013e0:	4602      	mov	r2, r0
 80013e2:	4b3b      	ldr	r3, [pc, #236]	; (80014d0 <MX_FREERTOS_Init+0x230>)
 80013e4:	601a      	str	r2, [r3, #0]

  /* creation of blinkTask */
  blinkTaskHandle = osThreadNew(BlinkTask, NULL, &blinkTask_attributes);
 80013e6:	4a3b      	ldr	r2, [pc, #236]	; (80014d4 <MX_FREERTOS_Init+0x234>)
 80013e8:	2100      	movs	r1, #0
 80013ea:	483b      	ldr	r0, [pc, #236]	; (80014d8 <MX_FREERTOS_Init+0x238>)
 80013ec:	f00c f938 	bl	800d660 <osThreadNew>
 80013f0:	4602      	mov	r2, r0
 80013f2:	4b3a      	ldr	r3, [pc, #232]	; (80014dc <MX_FREERTOS_Init+0x23c>)
 80013f4:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  // ensure binary notification semaphores are initially empty
  osSemaphoreAcquire(locNotifyHandle, 0);
 80013f6:	4b0b      	ldr	r3, [pc, #44]	; (8001424 <MX_FREERTOS_Init+0x184>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2100      	movs	r1, #0
 80013fc:	4618      	mov	r0, r3
 80013fe:	f00c fe59 	bl	800e0b4 <osSemaphoreAcquire>
  osSemaphoreAcquire(locCompleteHandle, 0);
 8001402:	4b0a      	ldr	r3, [pc, #40]	; (800142c <MX_FREERTOS_Init+0x18c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2100      	movs	r1, #0
 8001408:	4618      	mov	r0, r3
 800140a:	f00c fe53 	bl	800e0b4 <osSemaphoreAcquire>

   /* add threads, ... */


	/* Init code for STM32_WPAN */
	APPE_Init();
 800140e:	f7ff fdeb 	bl	8000fe8 <APPE_Init>


  /* USER CODE END RTOS_THREADS */

}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	080169a0 	.word	0x080169a0
 800141c:	20027880 	.word	0x20027880
 8001420:	080169b0 	.word	0x080169b0
 8001424:	20027cc4 	.word	0x20027cc4
 8001428:	080169c0 	.word	0x080169c0
 800142c:	20027cbc 	.word	0x20027cbc
 8001430:	08016990 	.word	0x08016990
 8001434:	08003aed 	.word	0x08003aed
 8001438:	20027870 	.word	0x20027870
 800143c:	080168a0 	.word	0x080168a0
 8001440:	20027cd0 	.word	0x20027cd0
 8001444:	080168b8 	.word	0x080168b8
 8001448:	20027888 	.word	0x20027888
 800144c:	080168d0 	.word	0x080168d0
 8001450:	20027cb4 	.word	0x20027cb4
 8001454:	080168e8 	.word	0x080168e8
 8001458:	2002788c 	.word	0x2002788c
 800145c:	08016900 	.word	0x08016900
 8001460:	20027884 	.word	0x20027884
 8001464:	08016918 	.word	0x08016918
 8001468:	20027878 	.word	0x20027878
 800146c:	08016930 	.word	0x08016930
 8001470:	20027894 	.word	0x20027894
 8001474:	08016948 	.word	0x08016948
 8001478:	20027780 	.word	0x20027780
 800147c:	08016960 	.word	0x08016960
 8001480:	20027784 	.word	0x20027784
 8001484:	08016978 	.word	0x08016978
 8001488:	20027890 	.word	0x20027890
 800148c:	080167a4 	.word	0x080167a4
 8001490:	080014e1 	.word	0x080014e1
 8001494:	20027868 	.word	0x20027868
 8001498:	080167c8 	.word	0x080167c8
 800149c:	08003fe5 	.word	0x08003fe5
 80014a0:	20027874 	.word	0x20027874
 80014a4:	080167ec 	.word	0x080167ec
 80014a8:	080042c1 	.word	0x080042c1
 80014ac:	20027cb8 	.word	0x20027cb8
 80014b0:	08016810 	.word	0x08016810
 80014b4:	080038e5 	.word	0x080038e5
 80014b8:	20027cd4 	.word	0x20027cd4
 80014bc:	08016834 	.word	0x08016834
 80014c0:	08003a5d 	.word	0x08003a5d
 80014c4:	20027cc8 	.word	0x20027cc8
 80014c8:	08016858 	.word	0x08016858
 80014cc:	08003c15 	.word	0x08003c15
 80014d0:	20027cc0 	.word	0x20027cc0
 80014d4:	0801687c 	.word	0x0801687c
 80014d8:	080014f1 	.word	0x080014f1
 80014dc:	2002786c 	.word	0x2002786c

080014e0 <DefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_DefaultTask */
__weak void DefaultTask(void *argument)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80014e8:	2001      	movs	r0, #1
 80014ea:	f00c faab 	bl	800da44 <osDelay>
 80014ee:	e7fb      	b.n	80014e8 <DefaultTask+0x8>

080014f0 <BlinkTask>:
/**
 * @brief Thread initialization.
 * @param  None
 * @retval None
 */
void BlinkTask(void *argument) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]

	uint32_t evt;

	while (1) {
		evt = osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 80014f8:	f04f 32ff 	mov.w	r2, #4294967295
 80014fc:	2100      	movs	r1, #0
 80014fe:	2001      	movs	r0, #1
 8001500:	f00c fa0c 	bl	800d91c <osThreadFlagsWait>
 8001504:	60f8      	str	r0, [r7, #12]

		// if signal was received successfully, start blink task
		if ((evt & 0x00000001U) == 0x00000001U) {
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	f003 0301 	and.w	r3, r3, #1
 800150c:	2b00      	cmp	r3, #0
 800150e:	d0f3      	beq.n	80014f8 <BlinkTask+0x8>

			// tell other threads that blink has been activated
			osMessageQueueGet(statusQueueHandle, &statusMessage, 0U, osWaitForever);
 8001510:	4b62      	ldr	r3, [pc, #392]	; (800169c <BlinkTask+0x1ac>)
 8001512:	6818      	ldr	r0, [r3, #0]
 8001514:	f04f 33ff 	mov.w	r3, #4294967295
 8001518:	2200      	movs	r2, #0
 800151a:	4961      	ldr	r1, [pc, #388]	; (80016a0 <BlinkTask+0x1b0>)
 800151c:	f00c ff82 	bl	800e424 <osMessageQueueGet>
			statusMessage.blinkEnabled = 1;
 8001520:	4b5f      	ldr	r3, [pc, #380]	; (80016a0 <BlinkTask+0x1b0>)
 8001522:	2201      	movs	r2, #1
 8001524:	709a      	strb	r2, [r3, #2]
			osMessageQueuePut(statusQueueHandle, (void*) &statusMessage, 0U, 0);
 8001526:	4b5d      	ldr	r3, [pc, #372]	; (800169c <BlinkTask+0x1ac>)
 8001528:	6818      	ldr	r0, [r3, #0]
 800152a:	2300      	movs	r3, #0
 800152c:	2200      	movs	r2, #0
 800152e:	495c      	ldr	r1, [pc, #368]	; (80016a0 <BlinkTask+0x1b0>)
 8001530:	f00c ff04 	bl	800e33c <osMessageQueuePut>

			// start timer and PWM channel for blink LED
			HAL_TIM_Base_Start(&htim2);
 8001534:	485b      	ldr	r0, [pc, #364]	; (80016a4 <BlinkTask+0x1b4>)
 8001536:	f00a fdaf 	bl	800c098 <HAL_TIM_Base_Start>
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800153a:	2104      	movs	r1, #4
 800153c:	4859      	ldr	r0, [pc, #356]	; (80016a4 <BlinkTask+0x1b4>)
 800153e:	f00a fe61 	bl	800c204 <HAL_TIM_PWM_Start>

			// start timer for ADC to sample at 1kHz
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*) blink_buffer, sizeof(blink_buffer));
 8001542:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001546:	4958      	ldr	r1, [pc, #352]	; (80016a8 <BlinkTask+0x1b8>)
 8001548:	4858      	ldr	r0, [pc, #352]	; (80016ac <BlinkTask+0x1bc>)
 800154a:	f005 f821 	bl	8006590 <HAL_ADC_Start_DMA>
			// message passing until told to stop
			//      note: DMA triggers callback where buffers are switched and the full one
			//      is passed by reference via queue to masterThread for packetization
			while (1) {
				// wait for data ready flag and/or stop task flasg
				evt = osThreadFlagsWait(0x00000006U, osFlagsWaitAny, osWaitForever);
 800154e:	f04f 32ff 	mov.w	r2, #4294967295
 8001552:	2100      	movs	r1, #0
 8001554:	2006      	movs	r0, #6
 8001556:	f00c f9e1 	bl	800d91c <osThreadFlagsWait>
 800155a:	60f8      	str	r0, [r7, #12]

				if ((evt & 0x00000004U) == 0x00000004U) {
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f003 0304 	and.w	r3, r3, #4
 8001562:	2b00      	cmp	r3, #0
 8001564:	d064      	beq.n	8001630 <BlinkTask+0x140>

					// interpolate timestamps for blink packets
					if (previousTick_ms == 0) {
 8001566:	4b52      	ldr	r3, [pc, #328]	; (80016b0 <BlinkTask+0x1c0>)
 8001568:	edd3 7a00 	vldr	s15, [r3]
 800156c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001574:	d108      	bne.n	8001588 <BlinkTask+0x98>
						previousTick_ms = HAL_GetTick();
 8001576:	f004 fc8b 	bl	8005e90 <HAL_GetTick>
 800157a:	ee07 0a90 	vmov	s15, r0
 800157e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001582:	4b4b      	ldr	r3, [pc, #300]	; (80016b0 <BlinkTask+0x1c0>)
 8001584:	edc3 7a00 	vstr	s15, [r3]
					}
					tick_ms_diff = (HAL_GetTick() - previousTick_ms) / ((float) BLINK_ITERATOR_COUNT);
 8001588:	f004 fc82 	bl	8005e90 <HAL_GetTick>
 800158c:	ee07 0a90 	vmov	s15, r0
 8001590:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001594:	4b46      	ldr	r3, [pc, #280]	; (80016b0 <BlinkTask+0x1c0>)
 8001596:	edd3 7a00 	vldr	s15, [r3]
 800159a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800159e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80015a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015a6:	4b43      	ldr	r3, [pc, #268]	; (80016b4 <BlinkTask+0x1c4>)
 80015a8:	edc3 7a00 	vstr	s15, [r3]

					// because of COAP packet size restrictions, separate blink packet into chunks of size BLINK_PACKET_SIZE
					for (iterator = 0; iterator < BLINK_ITERATOR_COUNT; iterator++) {
 80015ac:	4b42      	ldr	r3, [pc, #264]	; (80016b8 <BlinkTask+0x1c8>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	e039      	b.n	8001628 <BlinkTask+0x138>

						// grab packet of size BLINK_PACKET_SIZE
						memcpy(blinkMsgBuffer_1.data, &(blink_buffer[iterator * BLINK_PACKET_SIZE]), BLINK_PACKET_SIZE);
 80015b4:	4b40      	ldr	r3, [pc, #256]	; (80016b8 <BlinkTask+0x1c8>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2264      	movs	r2, #100	; 0x64
 80015ba:	fb02 f303 	mul.w	r3, r2, r3
 80015be:	4a3a      	ldr	r2, [pc, #232]	; (80016a8 <BlinkTask+0x1b8>)
 80015c0:	4413      	add	r3, r2
 80015c2:	4a3e      	ldr	r2, [pc, #248]	; (80016bc <BlinkTask+0x1cc>)
 80015c4:	4610      	mov	r0, r2
 80015c6:	4619      	mov	r1, r3
 80015c8:	2364      	movs	r3, #100	; 0x64
 80015ca:	461a      	mov	r2, r3
 80015cc:	f013 fdce 	bl	801516c <memcpy>
						blinkMsgBuffer_1.tick_ms = previousTick_ms + tick_ms_diff;
 80015d0:	4b37      	ldr	r3, [pc, #220]	; (80016b0 <BlinkTask+0x1c0>)
 80015d2:	ed93 7a00 	vldr	s14, [r3]
 80015d6:	4b37      	ldr	r3, [pc, #220]	; (80016b4 <BlinkTask+0x1c4>)
 80015d8:	edd3 7a00 	vldr	s15, [r3]
 80015dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015e4:	ee17 2a90 	vmov	r2, s15
 80015e8:	4b34      	ldr	r3, [pc, #208]	; (80016bc <BlinkTask+0x1cc>)
 80015ea:	665a      	str	r2, [r3, #100]	; 0x64
						blinkMsgBuffer_1.payload_ID = payload_ID;
 80015ec:	4b34      	ldr	r3, [pc, #208]	; (80016c0 <BlinkTask+0x1d0>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a32      	ldr	r2, [pc, #200]	; (80016bc <BlinkTask+0x1cc>)
 80015f2:	6693      	str	r3, [r2, #104]	; 0x68

						// add tick cnt
						previousTick_ms = blinkMsgBuffer_1.tick_ms;
 80015f4:	4b31      	ldr	r3, [pc, #196]	; (80016bc <BlinkTask+0x1cc>)
 80015f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80015f8:	ee07 3a90 	vmov	s15, r3
 80015fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001600:	4b2b      	ldr	r3, [pc, #172]	; (80016b0 <BlinkTask+0x1c0>)
 8001602:	edc3 7a00 	vstr	s15, [r3]
						payload_ID++;
 8001606:	4b2e      	ldr	r3, [pc, #184]	; (80016c0 <BlinkTask+0x1d0>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	3301      	adds	r3, #1
 800160c:	4a2c      	ldr	r2, [pc, #176]	; (80016c0 <BlinkTask+0x1d0>)
 800160e:	6013      	str	r3, [r2, #0]

						// put into queue
						osMessageQueuePut(blinkMsgQueueHandle, (void*) &blinkMsgBuffer_1, 0U, 0);
 8001610:	4b2c      	ldr	r3, [pc, #176]	; (80016c4 <BlinkTask+0x1d4>)
 8001612:	6818      	ldr	r0, [r3, #0]
 8001614:	2300      	movs	r3, #0
 8001616:	2200      	movs	r2, #0
 8001618:	4928      	ldr	r1, [pc, #160]	; (80016bc <BlinkTask+0x1cc>)
 800161a:	f00c fe8f 	bl	800e33c <osMessageQueuePut>
					for (iterator = 0; iterator < BLINK_ITERATOR_COUNT; iterator++) {
 800161e:	4b26      	ldr	r3, [pc, #152]	; (80016b8 <BlinkTask+0x1c8>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	3301      	adds	r3, #1
 8001624:	4a24      	ldr	r2, [pc, #144]	; (80016b8 <BlinkTask+0x1c8>)
 8001626:	6013      	str	r3, [r2, #0]
 8001628:	4b23      	ldr	r3, [pc, #140]	; (80016b8 <BlinkTask+0x1c8>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2b09      	cmp	r3, #9
 800162e:	d9c1      	bls.n	80015b4 <BlinkTask+0xc4>
					}
				}

				// stop timer and put thread in idle if signal was reset
				if ((evt & 0x00000002U) == 0x00000002U) {
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d089      	beq.n	800154e <BlinkTask+0x5e>

					HAL_ADC_Stop_DMA(&hadc1);
 800163a:	481c      	ldr	r0, [pc, #112]	; (80016ac <BlinkTask+0x1bc>)
 800163c:	f005 f82c 	bl	8006698 <HAL_ADC_Stop_DMA>
					HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8001640:	2104      	movs	r1, #4
 8001642:	4818      	ldr	r0, [pc, #96]	; (80016a4 <BlinkTask+0x1b4>)
 8001644:	f00a fe28 	bl	800c298 <HAL_TIM_PWM_Stop>
					HAL_TIM_Base_Stop(&htim2);
 8001648:	4816      	ldr	r0, [pc, #88]	; (80016a4 <BlinkTask+0x1b4>)
 800164a:	f00a fd4f 	bl	800c0ec <HAL_TIM_Base_Stop>
					previousTick_ms = 0;
 800164e:	4b18      	ldr	r3, [pc, #96]	; (80016b0 <BlinkTask+0x1c0>)
 8001650:	f04f 0200 	mov.w	r2, #0
 8001654:	601a      	str	r2, [r3, #0]

					/* tell threads that blink is disabled */
					osMessageQueueGet(statusQueueHandle, &statusMessage, 0U, osWaitForever);
 8001656:	4b11      	ldr	r3, [pc, #68]	; (800169c <BlinkTask+0x1ac>)
 8001658:	6818      	ldr	r0, [r3, #0]
 800165a:	f04f 33ff 	mov.w	r3, #4294967295
 800165e:	2200      	movs	r2, #0
 8001660:	490f      	ldr	r1, [pc, #60]	; (80016a0 <BlinkTask+0x1b0>)
 8001662:	f00c fedf 	bl	800e424 <osMessageQueueGet>
					statusMessage.blinkEnabled = 0;
 8001666:	4b0e      	ldr	r3, [pc, #56]	; (80016a0 <BlinkTask+0x1b0>)
 8001668:	2200      	movs	r2, #0
 800166a:	709a      	strb	r2, [r3, #2]
					// notify 3D localization thread that blink is deactivating if active
					if (statusMessage.positionEnabled == 1) {
 800166c:	4b0c      	ldr	r3, [pc, #48]	; (80016a0 <BlinkTask+0x1b0>)
 800166e:	795b      	ldrb	r3, [r3, #5]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d104      	bne.n	800167e <BlinkTask+0x18e>
						osSemaphoreRelease(locNotifyHandle);
 8001674:	4b14      	ldr	r3, [pc, #80]	; (80016c8 <BlinkTask+0x1d8>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4618      	mov	r0, r3
 800167a:	f00c fd81 	bl	800e180 <osSemaphoreRelease>
					}
					osMessageQueuePut(statusQueueHandle, (void*) &statusMessage, 0U, 0);
 800167e:	4b07      	ldr	r3, [pc, #28]	; (800169c <BlinkTask+0x1ac>)
 8001680:	6818      	ldr	r0, [r3, #0]
 8001682:	2300      	movs	r3, #0
 8001684:	2200      	movs	r2, #0
 8001686:	4906      	ldr	r1, [pc, #24]	; (80016a0 <BlinkTask+0x1b0>)
 8001688:	f00c fe58 	bl	800e33c <osMessageQueuePut>

					// empty queue
					osMessageQueueReset(blinkMsgQueueHandle);
 800168c:	4b0d      	ldr	r3, [pc, #52]	; (80016c4 <BlinkTask+0x1d4>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4618      	mov	r0, r3
 8001692:	f00c ff39 	bl	800e508 <osMessageQueueReset>

					break;
 8001696:	bf00      	nop
		evt = osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 8001698:	e72e      	b.n	80014f8 <BlinkTask+0x8>
 800169a:	bf00      	nop
 800169c:	20027890 	.word	0x20027890
 80016a0:	20027cdc 	.word	0x20027cdc
 80016a4:	20028458 	.word	0x20028458
 80016a8:	20000274 	.word	0x20000274
 80016ac:	200276b4 	.word	0x200276b4
 80016b0:	20000a4c 	.word	0x20000a4c
 80016b4:	20000a50 	.word	0x20000a50
 80016b8:	20000a48 	.word	0x20000a48
 80016bc:	20000208 	.word	0x20000208
 80016c0:	20000a44 	.word	0x20000a44
 80016c4:	20027cd0 	.word	0x20027cd0
 80016c8:	20027cc4 	.word	0x20027cc4

080016cc <HAL_ADC_ConvCpltCallback>:
//volatile uint8_t i = 0;
//void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc) {
//	i++;
//}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
	blink_ptr = &blink_buffer[BLINK_HALF_BUFFER_SIZE];
 80016d4:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <HAL_ADC_ConvCpltCallback+0x24>)
 80016d6:	4a07      	ldr	r2, [pc, #28]	; (80016f4 <HAL_ADC_ConvCpltCallback+0x28>)
 80016d8:	601a      	str	r2, [r3, #0]
	osThreadFlagsSet(blinkTaskHandle, 0x00000004U);
 80016da:	4b07      	ldr	r3, [pc, #28]	; (80016f8 <HAL_ADC_ConvCpltCallback+0x2c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2104      	movs	r1, #4
 80016e0:	4618      	mov	r0, r3
 80016e2:	f00c f869 	bl	800d7b8 <osThreadFlagsSet>

}
 80016e6:	bf00      	nop
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20027cd8 	.word	0x20027cd8
 80016f4:	2000065c 	.word	0x2000065c
 80016f8:	2002786c 	.word	0x2002786c

080016fc <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
	blink_ptr = blink_buffer;
 8001704:	4b06      	ldr	r3, [pc, #24]	; (8001720 <HAL_ADC_ConvHalfCpltCallback+0x24>)
 8001706:	4a07      	ldr	r2, [pc, #28]	; (8001724 <HAL_ADC_ConvHalfCpltCallback+0x28>)
 8001708:	601a      	str	r2, [r3, #0]
	osThreadFlagsSet(blinkTaskHandle, 0x00000004U);
 800170a:	4b07      	ldr	r3, [pc, #28]	; (8001728 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2104      	movs	r1, #4
 8001710:	4618      	mov	r0, r3
 8001712:	f00c f851 	bl	800d7b8 <osThreadFlagsSet>

}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	20027cd8 	.word	0x20027cd8
 8001724:	20000274 	.word	0x20000274
 8001728:	2002786c 	.word	0x2002786c

0800172c <LL_AHB2_GRP1_EnableClock>:
{
 800172c:	b480      	push	{r7}
 800172e:	b085      	sub	sp, #20
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001734:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001738:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800173a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4313      	orrs	r3, r2
 8001742:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001744:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001748:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4013      	ands	r3, r2
 800174e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001750:	68fb      	ldr	r3, [r7, #12]
}
 8001752:	bf00      	nop
 8001754:	3714      	adds	r7, #20
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
	...

08001760 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 8001764:	4b12      	ldr	r3, [pc, #72]	; (80017b0 <MX_COMP1_Init+0x50>)
 8001766:	4a13      	ldr	r2, [pc, #76]	; (80017b4 <MX_COMP1_Init+0x54>)
 8001768:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_1_2VREFINT;
 800176a:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <MX_COMP1_Init+0x50>)
 800176c:	4a12      	ldr	r2, [pc, #72]	; (80017b8 <MX_COMP1_Init+0x58>)
 800176e:	611a      	str	r2, [r3, #16]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO3;
 8001770:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <MX_COMP1_Init+0x50>)
 8001772:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001776:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8001778:	4b0d      	ldr	r3, [pc, #52]	; (80017b0 <MX_COMP1_Init+0x50>)
 800177a:	2200      	movs	r2, #0
 800177c:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 800177e:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <MX_COMP1_Init+0x50>)
 8001780:	2200      	movs	r2, #0
 8001782:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8001784:	4b0a      	ldr	r3, [pc, #40]	; (80017b0 <MX_COMP1_Init+0x50>)
 8001786:	2200      	movs	r2, #0
 8001788:	61da      	str	r2, [r3, #28]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 800178a:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <MX_COMP1_Init+0x50>)
 800178c:	2200      	movs	r2, #0
 800178e:	609a      	str	r2, [r3, #8]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8001790:	4b07      	ldr	r3, [pc, #28]	; (80017b0 <MX_COMP1_Init+0x50>)
 8001792:	2200      	movs	r2, #0
 8001794:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 8001796:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <MX_COMP1_Init+0x50>)
 8001798:	2231      	movs	r2, #49	; 0x31
 800179a:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 800179c:	4804      	ldr	r0, [pc, #16]	; (80017b0 <MX_COMP1_Init+0x50>)
 800179e:	f005 fde1 	bl	8007364 <HAL_COMP_Init>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_COMP1_Init+0x4c>
  {
    Error_Handler();
 80017a8:	f002 fd82 	bl	80042b0 <Error_Handler>
  }

}
 80017ac:	bf00      	nop
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20027ce4 	.word	0x20027ce4
 80017b4:	40010200 	.word	0x40010200
 80017b8:	00c00010 	.word	0x00c00010

080017bc <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b088      	sub	sp, #32
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c4:	f107 030c 	add.w	r3, r7, #12
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a0f      	ldr	r2, [pc, #60]	; (8001818 <HAL_COMP_MspInit+0x5c>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d117      	bne.n	800180e <HAL_COMP_MspInit+0x52>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017de:	2001      	movs	r0, #1
 80017e0:	f7ff ffa4 	bl	800172c <LL_AHB2_GRP1_EnableClock>
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = LH_SIG_Pin;
 80017e4:	2302      	movs	r3, #2
 80017e6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017e8:	2303      	movs	r3, #3
 80017ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(LH_SIG_GPIO_Port, &GPIO_InitStruct);
 80017f0:	f107 030c 	add.w	r3, r7, #12
 80017f4:	4619      	mov	r1, r3
 80017f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017fa:	f006 fc03 	bl	8008004 <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(COMP_IRQn, 5, 0);
 80017fe:	2200      	movs	r2, #0
 8001800:	2105      	movs	r1, #5
 8001802:	2016      	movs	r0, #22
 8001804:	f006 f877 	bl	80078f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP_IRQn);
 8001808:	2016      	movs	r0, #22
 800180a:	f006 f88e 	bl	800792a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 800180e:	bf00      	nop
 8001810:	3720      	adds	r7, #32
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40010200 	.word	0x40010200

0800181c <process_pulse_lengths>:
    kPhaseFixAcquired = 4,
    kPhaseFixFinal = 16,
};

//length of pulse_lens is num_base_stations
void process_pulse_lengths(CyclePhaseClassifier * self, uint32_t cycle_idx, const uint16_t *pulse_lens){
 800181c:	b480      	push	{r7}
 800181e:	b089      	sub	sp, #36	; 0x24
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
	int cur_phase_id = -1;
 8001828:	f04f 33ff 	mov.w	r3, #4294967295
 800182c:	61fb      	str	r3, [r7, #28]
	if(pulse_lens[0] > 0 && pulse_lens[1] > 0){
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	881b      	ldrh	r3, [r3, #0]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d02a      	beq.n	800188c <process_pulse_lengths+0x70>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	3302      	adds	r3, #2
 800183a:	881b      	ldrh	r3, [r3, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d025      	beq.n	800188c <process_pulse_lengths+0x70>
		uint8_t cur_more = pulse_lens[0] > pulse_lens[1];
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	881a      	ldrh	r2, [r3, #0]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	3302      	adds	r3, #2
 8001848:	881b      	ldrh	r3, [r3, #0]
 800184a:	429a      	cmp	r2, r3
 800184c:	bf8c      	ite	hi
 800184e:	2301      	movhi	r3, #1
 8001850:	2300      	movls	r3, #0
 8001852:	b2db      	uxtb	r3, r3
 8001854:	76fb      	strb	r3, [r7, #27]
        if (cycle_idx == self->prev_full_cycle_idx_ + 1) {
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	3301      	adds	r3, #1
 800185c:	68ba      	ldr	r2, [r7, #8]
 800185e:	429a      	cmp	r2, r3
 8001860:	d10e      	bne.n	8001880 <process_pulse_lengths+0x64>
            // To get current phase, we use simple fact that in phases 0 and 1, first pulse is shorter than the second,
            // and in phases 2, 3 it is longer. This allows us to estimate current phase using comparison between
            // the pair of pulses in current cycle (cur_more) and the previous one.
            self->phase_history_ = (self->phase_history_ << 1) | cur_more;  // phase_history_ keeps a bit for each pulse comparison.
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	005a      	lsls	r2, r3, #1
 8001868:	7efb      	ldrb	r3, [r7, #27]
 800186a:	431a      	orrs	r2, r3
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	605a      	str	r2, [r3, #4]
            static const char phases[4] = {1, 2, 0, 3};
            cur_phase_id = phases[self->phase_history_ & 0x3];  // 2 least significant bits give us enough info to get phase.
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f003 0303 	and.w	r3, r3, #3
 8001878:	4a1c      	ldr	r2, [pc, #112]	; (80018ec <process_pulse_lengths+0xd0>)
 800187a:	5cd3      	ldrb	r3, [r2, r3]
 800187c:	61fb      	str	r3, [r7, #28]
 800187e:	e002      	b.n	8001886 <process_pulse_lengths+0x6a>
            //UART_Print_int32_t(cur_phase_id);
        }
        else {
            self->phase_history_ = cur_more;
 8001880:	7efa      	ldrb	r2, [r7, #27]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	605a      	str	r2, [r3, #4]
        }
        self->prev_full_cycle_idx_ = cycle_idx;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	68ba      	ldr	r2, [r7, #8]
 800188a:	601a      	str	r2, [r3, #0]
	}

    // If we haven't achieved final fix yet, check the cur_phase_id is as expected.
    if (cur_phase_id >= 0 && self->fix_level_ < kPhaseFixFinal) {
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	2b00      	cmp	r3, #0
 8001890:	db26      	blt.n	80018e0 <process_pulse_lengths+0xc4>
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	2b0f      	cmp	r3, #15
 8001898:	dc22      	bgt.n	80018e0 <process_pulse_lengths+0xc4>
        if (self->fix_level_ == kPhaseFixNone) {
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d10a      	bne.n	80018b8 <process_pulse_lengths+0x9c>
            // Use current phase_id as the candidate.
            self->fix_level_ = kPhaseFixCandidate;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2201      	movs	r2, #1
 80018a6:	609a      	str	r2, [r3, #8]
            self->phase_shift_ = (cur_phase_id - cycle_idx) & 0x3;
 80018a8:	69fa      	ldr	r2, [r7, #28]
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	f003 0203 	and.w	r2, r3, #3
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	60da      	str	r2, [r3, #12]
            // Either add or remove confidence that the phase_shift_ is correct.
            int expected_phase_id = (cycle_idx + self->phase_shift_) & 0x3;
            self->fix_level_ += (cur_phase_id == expected_phase_id) ? +1 : -1;
        }
    }
}
 80018b6:	e013      	b.n	80018e0 <process_pulse_lengths+0xc4>
            int expected_phase_id = (cycle_idx + self->phase_shift_) & 0x3;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	68da      	ldr	r2, [r3, #12]
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	4413      	add	r3, r2
 80018c0:	f003 0303 	and.w	r3, r3, #3
 80018c4:	617b      	str	r3, [r7, #20]
            self->fix_level_ += (cur_phase_id == expected_phase_id) ? +1 : -1;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	69f9      	ldr	r1, [r7, #28]
 80018cc:	697a      	ldr	r2, [r7, #20]
 80018ce:	4291      	cmp	r1, r2
 80018d0:	d101      	bne.n	80018d6 <process_pulse_lengths+0xba>
 80018d2:	2201      	movs	r2, #1
 80018d4:	e001      	b.n	80018da <process_pulse_lengths+0xbe>
 80018d6:	f04f 32ff 	mov.w	r2, #4294967295
 80018da:	441a      	add	r2, r3
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	609a      	str	r2, [r3, #8]
}
 80018e0:	bf00      	nop
 80018e2:	3724      	adds	r7, #36	; 0x24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	080169d0 	.word	0x080169d0

080018f0 <get_phase>:
float expected_pulse_len(CyclePhaseClassifier * self, uint8_t skip, uint8_t data, uint8_t axis) {
    // See https://github.com/nairol/LighthouseRedox/blob/master/docs/Light%20Emissions.md
    return self->pulse_base_len_ + (skip << 2 | data << 1 | axis) * 10.416f;
}

int get_phase(CyclePhaseClassifier * self, uint32_t cycle_idx) {
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
    if (self->fix_level_ >= kPhaseFixAcquired) {
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	2b03      	cmp	r3, #3
 8001900:	dd06      	ble.n	8001910 <get_phase+0x20>
        return (cycle_idx + self->phase_shift_) & 0x3;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	68da      	ldr	r2, [r3, #12]
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	4413      	add	r3, r2
 800190a:	f003 0303 	and.w	r3, r3, #3
 800190e:	e001      	b.n	8001914 <get_phase+0x24>
    } else {
        return -1;
 8001910:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8001914:	4618      	mov	r0, r3
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <reset>:

void reset(CyclePhaseClassifier * self) {
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
    self->fix_level_ = kPhaseFixNone;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	609a      	str	r2, [r3, #8]
    self->prev_full_cycle_idx_ = -1;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f04f 32ff 	mov.w	r2, #4294967295
 8001934:	601a      	str	r2, [r3, #0]
    self->pulse_base_len_ = 62.5f;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a05      	ldr	r2, [pc, #20]	; (8001950 <reset+0x30>)
 800193a:	611a      	str	r2, [r3, #16]
    self->phase_history_ = 0;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	605a      	str	r2, [r3, #4]
}
 8001942:	bf00      	nop
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	427a0000 	.word	0x427a0000

08001954 <LL_AHB1_GRP1_EnableClock>:
{
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800195c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001960:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001962:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4313      	orrs	r3, r2
 800196a:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800196c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001970:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4013      	ands	r3, r2
 8001976:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001978:	68fb      	ldr	r3, [r7, #12]
}
 800197a:	bf00      	nop
 800197c:	3714      	adds	r7, #20
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr

08001986 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8001986:	b580      	push	{r7, lr}
 8001988:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800198a:	2004      	movs	r0, #4
 800198c:	f7ff ffe2 	bl	8001954 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001990:	2001      	movs	r0, #1
 8001992:	f7ff ffdf 	bl	8001954 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001996:	2200      	movs	r2, #0
 8001998:	2105      	movs	r1, #5
 800199a:	200b      	movs	r0, #11
 800199c:	f005 ffab 	bl	80078f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80019a0:	200b      	movs	r0, #11
 80019a2:	f005 ffc2 	bl	800792a <HAL_NVIC_EnableIRQ>

}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}
	...

080019ac <IMU_begin>:

/* Functions Definition ------------------------------------------------------*/
//Attempt communication with the device
//Return true if we got a 'Polo' back from Marco
bool IMU_begin(uint8_t deviceAddress, uint8_t intPin, GPIO_TypeDef* intPort)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	603a      	str	r2, [r7, #0]
 80019b6:	71fb      	strb	r3, [r7, #7]
 80019b8:	460b      	mov	r3, r1
 80019ba:	71bb      	strb	r3, [r7, #6]
	_deviceAddress = deviceAddress << 1; //If provided, store the I2C address from user
 80019bc:	79fb      	ldrb	r3, [r7, #7]
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	b2da      	uxtb	r2, r3
 80019c2:	4b12      	ldr	r3, [pc, #72]	; (8001a0c <IMU_begin+0x60>)
 80019c4:	701a      	strb	r2, [r3, #0]
//	_i2cPort = &wirePort;			//Grab which port the user wants us to use
	_int = intPin;					//Get the pin that the user wants to use for interrupts. By default, it's NULL and we'll not use it in dataAvailable() function.
 80019c6:	4a12      	ldr	r2, [pc, #72]	; (8001a10 <IMU_begin+0x64>)
 80019c8:	79bb      	ldrb	r3, [r7, #6]
 80019ca:	7013      	strb	r3, [r2, #0]
	_intPort = intPort;
 80019cc:	4a11      	ldr	r2, [pc, #68]	; (8001a14 <IMU_begin+0x68>)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	6013      	str	r3, [r2, #0]
	//But if they forget, we start the hardware here.
	//_i2cPort->begin();


	//Begin by resetting the IMU
	IMU_softReset();
 80019d2:	f000 fa85 	bl	8001ee0 <IMU_softReset>

	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 80019d6:	4b10      	ldr	r3, [pc, #64]	; (8001a18 <IMU_begin+0x6c>)
 80019d8:	22f9      	movs	r2, #249	; 0xf9
 80019da:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;							  //Reserved
 80019dc:	4b0e      	ldr	r3, [pc, #56]	; (8001a18 <IMU_begin+0x6c>)
 80019de:	2200      	movs	r2, #0
 80019e0:	705a      	strb	r2, [r3, #1]


	//Transmit packet on channel 2, 2 bytes
	IMU_sendPacket(CHANNEL_CONTROL, 2);
 80019e2:	2302      	movs	r3, #2
 80019e4:	2102      	movs	r1, #2
 80019e6:	4618      	mov	r0, r3
 80019e8:	f000 fc12 	bl	8002210 <IMU_sendPacket>

	//Now we wait for response
	if (IMU_receivePacket() == true)
 80019ec:	f000 fb68 	bl	80020c0 <IMU_receivePacket>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d005      	beq.n	8001a02 <IMU_begin+0x56>
	{
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 80019f6:	4b08      	ldr	r3, [pc, #32]	; (8001a18 <IMU_begin+0x6c>)
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	2bf8      	cmp	r3, #248	; 0xf8
 80019fc:	d101      	bne.n	8001a02 <IMU_begin+0x56>
		{
			return (true);
 80019fe:	2301      	movs	r3, #1
 8001a00:	e000      	b.n	8001a04 <IMU_begin+0x58>
		}
	}

	return (false); //Something went wrong
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	20000006 	.word	0x20000006
 8001a10:	20027d66 	.word	0x20027d66
 8001a14:	20027e2c 	.word	0x20027e2c
 8001a18:	20027da4 	.word	0x20027da4

08001a1c <IMU_dataAvailable>:
//}

//Updates the latest variables if possible
//Returns false if new readings are not available
bool IMU_dataAvailable(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
	//If we have an interrupt pin connection available, check if data is available.
	//If int pin is not set, then we'll rely on receivePacket() to timeout
	//See issue 13: https://github.com/sparkfun/SparkFun_BNO080_Arduino_Library/issues/13
	if (_int != 255)
 8001a20:	4b17      	ldr	r3, [pc, #92]	; (8001a80 <IMU_dataAvailable+0x64>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2bff      	cmp	r3, #255	; 0xff
 8001a26:	d00d      	beq.n	8001a44 <IMU_dataAvailable+0x28>
	{
		if( HAL_GPIO_ReadPin(_intPort, _int) == GPIO_PIN_SET)
 8001a28:	4b16      	ldr	r3, [pc, #88]	; (8001a84 <IMU_dataAvailable+0x68>)
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	4b14      	ldr	r3, [pc, #80]	; (8001a80 <IMU_dataAvailable+0x64>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	4619      	mov	r1, r3
 8001a34:	4610      	mov	r0, r2
 8001a36:	f006 fc55 	bl	80082e4 <HAL_GPIO_ReadPin>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d101      	bne.n	8001a44 <IMU_dataAvailable+0x28>
			return (false);
 8001a40:	2300      	movs	r3, #0
 8001a42:	e01b      	b.n	8001a7c <IMU_dataAvailable+0x60>
//			return (false);
	}

//	if(HAL_GPIO_ReadPin(_intPort, _int) == GPIO_PIN_SET)
//	{
	if (IMU_receivePacket() == true)
 8001a44:	f000 fb3c 	bl	80020c0 <IMU_receivePacket>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d015      	beq.n	8001a7a <IMU_dataAvailable+0x5e>
	{
		//Check to see if this packet is a sensor reporting its data to us
		if (shtpHeader[2] == CHANNEL_REPORTS && shtpData[0] == SHTP_REPORT_BASE_TIMESTAMP)
 8001a4e:	4b0e      	ldr	r3, [pc, #56]	; (8001a88 <IMU_dataAvailable+0x6c>)
 8001a50:	789b      	ldrb	r3, [r3, #2]
 8001a52:	2203      	movs	r2, #3
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d107      	bne.n	8001a68 <IMU_dataAvailable+0x4c>
 8001a58:	4b0c      	ldr	r3, [pc, #48]	; (8001a8c <IMU_dataAvailable+0x70>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2bfb      	cmp	r3, #251	; 0xfb
 8001a5e:	d103      	bne.n	8001a68 <IMU_dataAvailable+0x4c>
		{
			IMU_parseInputReport(); //This will update the rawAccelX, etc variables depending on which feature report is found
 8001a60:	f000 f832 	bl	8001ac8 <IMU_parseInputReport>
			return (true);
 8001a64:	2301      	movs	r3, #1
 8001a66:	e009      	b.n	8001a7c <IMU_dataAvailable+0x60>
		}
		else if (shtpHeader[2] == CHANNEL_CONTROL)
 8001a68:	4b07      	ldr	r3, [pc, #28]	; (8001a88 <IMU_dataAvailable+0x6c>)
 8001a6a:	789b      	ldrb	r3, [r3, #2]
 8001a6c:	2202      	movs	r2, #2
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d103      	bne.n	8001a7a <IMU_dataAvailable+0x5e>
		{
			IMU_parseCommandReport(); //This will update responses to commands, calibrationStatus, etc.
 8001a72:	f000 f80d 	bl	8001a90 <IMU_parseCommandReport>
			return (true);
 8001a76:	2301      	movs	r3, #1
 8001a78:	e000      	b.n	8001a7c <IMU_dataAvailable+0x60>
		}
	}
//	}
	return (false);
 8001a7a:	2300      	movs	r3, #0
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	20027d66 	.word	0x20027d66
 8001a84:	20027e2c 	.word	0x20027e2c
 8001a88:	20027d14 	.word	0x20027d14
 8001a8c:	20027da4 	.word	0x20027da4

08001a90 <IMU_parseCommandReport>:
//shtpData[5 + 5]: R5
//shtpData[5 + 6]: R6
//shtpData[5 + 7]: R7
//shtpData[5 + 8]: R8
void IMU_parseCommandReport(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
	if (shtpData[0] == SHTP_REPORT_COMMAND_RESPONSE)
 8001a96:	4b0a      	ldr	r3, [pc, #40]	; (8001ac0 <IMU_parseCommandReport+0x30>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	2bf1      	cmp	r3, #241	; 0xf1
 8001a9c:	d109      	bne.n	8001ab2 <IMU_parseCommandReport+0x22>
	{
		//The BNO080 responds with this report to command requests. It's up to use to remember which command we issued.
		uint8_t command = shtpData[2]; //This is the Command byte of the response
 8001a9e:	4b08      	ldr	r3, [pc, #32]	; (8001ac0 <IMU_parseCommandReport+0x30>)
 8001aa0:	789b      	ldrb	r3, [r3, #2]
 8001aa2:	71fb      	strb	r3, [r7, #7]

		if (command == COMMAND_ME_CALIBRATE)
 8001aa4:	79fb      	ldrb	r3, [r7, #7]
 8001aa6:	2b07      	cmp	r3, #7
 8001aa8:	d103      	bne.n	8001ab2 <IMU_parseCommandReport+0x22>
		{
			calibrationStatus = shtpData[5 + 0]; //R0 - Status (0 = success, non-zero = fail)
 8001aaa:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <IMU_parseCommandReport+0x30>)
 8001aac:	795a      	ldrb	r2, [r3, #5]
 8001aae:	4b05      	ldr	r3, [pc, #20]	; (8001ac4 <IMU_parseCommandReport+0x34>)
 8001ab0:	701a      	strb	r2, [r3, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	20027da4 	.word	0x20027da4
 8001ac4:	20027e57 	.word	0x20027e57

08001ac8 <IMU_parseInputReport>:
//shtpData[6:7]: j/accel y/gyro y/etc
//shtpData[8:9]: k/accel z/gyro z/etc
//shtpData[10:11]: real/gyro temp/etc
//shtpData[12:13]: Accuracy estimate
void IMU_parseInputReport(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)shtpHeader[1] << 8 | shtpHeader[0]);
 8001ace:	4b96      	ldr	r3, [pc, #600]	; (8001d28 <IMU_parseInputReport+0x260>)
 8001ad0:	785b      	ldrb	r3, [r3, #1]
 8001ad2:	021b      	lsls	r3, r3, #8
 8001ad4:	b21a      	sxth	r2, r3
 8001ad6:	4b94      	ldr	r3, [pc, #592]	; (8001d28 <IMU_parseInputReport+0x260>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	b21b      	sxth	r3, r3
 8001adc:	4313      	orrs	r3, r2
 8001ade:	823b      	strh	r3, [r7, #16]
	dataLength &= ~(1 << 15); //Clear the MSbit. This bit indicates if this package is a continuation of the last.
 8001ae0:	8a3b      	ldrh	r3, [r7, #16]
 8001ae2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001ae6:	823b      	strh	r3, [r7, #16]
	//Ignore it for now. TODO catch this as an error and exit

	dataLength -= 4; //Remove the header bytes from the data count
 8001ae8:	8a3b      	ldrh	r3, [r7, #16]
 8001aea:	3b04      	subs	r3, #4
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	823b      	strh	r3, [r7, #16]

	timeStamp = ((uint32_t)shtpData[4] << (8 * 3)) | ((uint32_t)shtpData[3] << (8 * 2)) | ((uint32_t)shtpData[2] << (8 * 1)) | ((uint32_t)shtpData[1] << (8 * 0));
 8001af0:	4b8e      	ldr	r3, [pc, #568]	; (8001d2c <IMU_parseInputReport+0x264>)
 8001af2:	791b      	ldrb	r3, [r3, #4]
 8001af4:	061a      	lsls	r2, r3, #24
 8001af6:	4b8d      	ldr	r3, [pc, #564]	; (8001d2c <IMU_parseInputReport+0x264>)
 8001af8:	78db      	ldrb	r3, [r3, #3]
 8001afa:	041b      	lsls	r3, r3, #16
 8001afc:	431a      	orrs	r2, r3
 8001afe:	4b8b      	ldr	r3, [pc, #556]	; (8001d2c <IMU_parseInputReport+0x264>)
 8001b00:	789b      	ldrb	r3, [r3, #2]
 8001b02:	021b      	lsls	r3, r3, #8
 8001b04:	4313      	orrs	r3, r2
 8001b06:	4a89      	ldr	r2, [pc, #548]	; (8001d2c <IMU_parseInputReport+0x264>)
 8001b08:	7852      	ldrb	r2, [r2, #1]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	4a88      	ldr	r2, [pc, #544]	; (8001d30 <IMU_parseInputReport+0x268>)
 8001b0e:	6013      	str	r3, [r2, #0]

	uint8_t status = shtpData[5 + 2] & 0x03; //Get status bits
 8001b10:	4b86      	ldr	r3, [pc, #536]	; (8001d2c <IMU_parseInputReport+0x264>)
 8001b12:	79db      	ldrb	r3, [r3, #7]
 8001b14:	f003 0303 	and.w	r3, r3, #3
 8001b18:	73fb      	strb	r3, [r7, #15]
	uint16_t data1 = (uint16_t)shtpData[5 + 5] << 8 | shtpData[5 + 4];
 8001b1a:	4b84      	ldr	r3, [pc, #528]	; (8001d2c <IMU_parseInputReport+0x264>)
 8001b1c:	7a9b      	ldrb	r3, [r3, #10]
 8001b1e:	021b      	lsls	r3, r3, #8
 8001b20:	b21a      	sxth	r2, r3
 8001b22:	4b82      	ldr	r3, [pc, #520]	; (8001d2c <IMU_parseInputReport+0x264>)
 8001b24:	7a5b      	ldrb	r3, [r3, #9]
 8001b26:	b21b      	sxth	r3, r3
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	b21b      	sxth	r3, r3
 8001b2c:	81bb      	strh	r3, [r7, #12]
	uint16_t data2 = (uint16_t)shtpData[5 + 7] << 8 | shtpData[5 + 6];
 8001b2e:	4b7f      	ldr	r3, [pc, #508]	; (8001d2c <IMU_parseInputReport+0x264>)
 8001b30:	7b1b      	ldrb	r3, [r3, #12]
 8001b32:	021b      	lsls	r3, r3, #8
 8001b34:	b21a      	sxth	r2, r3
 8001b36:	4b7d      	ldr	r3, [pc, #500]	; (8001d2c <IMU_parseInputReport+0x264>)
 8001b38:	7adb      	ldrb	r3, [r3, #11]
 8001b3a:	b21b      	sxth	r3, r3
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	b21b      	sxth	r3, r3
 8001b40:	817b      	strh	r3, [r7, #10]
	uint16_t data3 = (uint16_t)shtpData[5 + 9] << 8 | shtpData[5 + 8];
 8001b42:	4b7a      	ldr	r3, [pc, #488]	; (8001d2c <IMU_parseInputReport+0x264>)
 8001b44:	7b9b      	ldrb	r3, [r3, #14]
 8001b46:	021b      	lsls	r3, r3, #8
 8001b48:	b21a      	sxth	r2, r3
 8001b4a:	4b78      	ldr	r3, [pc, #480]	; (8001d2c <IMU_parseInputReport+0x264>)
 8001b4c:	7b5b      	ldrb	r3, [r3, #13]
 8001b4e:	b21b      	sxth	r3, r3
 8001b50:	4313      	orrs	r3, r2
 8001b52:	b21b      	sxth	r3, r3
 8001b54:	813b      	strh	r3, [r7, #8]
	uint16_t data4 = 0;
 8001b56:	2300      	movs	r3, #0
 8001b58:	82fb      	strh	r3, [r7, #22]
	uint16_t data5 = 0; //We would need to change this to uin32_t to capture time stamp value on Raw Accel/Gyro/Mag reports
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	82bb      	strh	r3, [r7, #20]

	if (dataLength - 5 > 9)
 8001b5e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001b62:	3b05      	subs	r3, #5
 8001b64:	2b09      	cmp	r3, #9
 8001b66:	dd09      	ble.n	8001b7c <IMU_parseInputReport+0xb4>
	{
		data4 = (uint16_t)shtpData[5 + 11] << 8 | shtpData[5 + 10];
 8001b68:	4b70      	ldr	r3, [pc, #448]	; (8001d2c <IMU_parseInputReport+0x264>)
 8001b6a:	7c1b      	ldrb	r3, [r3, #16]
 8001b6c:	021b      	lsls	r3, r3, #8
 8001b6e:	b21a      	sxth	r2, r3
 8001b70:	4b6e      	ldr	r3, [pc, #440]	; (8001d2c <IMU_parseInputReport+0x264>)
 8001b72:	7bdb      	ldrb	r3, [r3, #15]
 8001b74:	b21b      	sxth	r3, r3
 8001b76:	4313      	orrs	r3, r2
 8001b78:	b21b      	sxth	r3, r3
 8001b7a:	82fb      	strh	r3, [r7, #22]
	}
	if (dataLength - 5 > 11)
 8001b7c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001b80:	3b05      	subs	r3, #5
 8001b82:	2b0b      	cmp	r3, #11
 8001b84:	dd09      	ble.n	8001b9a <IMU_parseInputReport+0xd2>
	{
		data5 = (uint16_t)shtpData[5 + 13] << 8 | shtpData[5 + 12];
 8001b86:	4b69      	ldr	r3, [pc, #420]	; (8001d2c <IMU_parseInputReport+0x264>)
 8001b88:	7c9b      	ldrb	r3, [r3, #18]
 8001b8a:	021b      	lsls	r3, r3, #8
 8001b8c:	b21a      	sxth	r2, r3
 8001b8e:	4b67      	ldr	r3, [pc, #412]	; (8001d2c <IMU_parseInputReport+0x264>)
 8001b90:	7c5b      	ldrb	r3, [r3, #17]
 8001b92:	b21b      	sxth	r3, r3
 8001b94:	4313      	orrs	r3, r2
 8001b96:	b21b      	sxth	r3, r3
 8001b98:	82bb      	strh	r3, [r7, #20]
	}

	//Store these generic values to their proper global variable
	if (shtpData[5] == SENSOR_REPORTID_ACCELEROMETER)
 8001b9a:	4b64      	ldr	r3, [pc, #400]	; (8001d2c <IMU_parseInputReport+0x264>)
 8001b9c:	795b      	ldrb	r3, [r3, #5]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d10d      	bne.n	8001bbe <IMU_parseInputReport+0xf6>
	{
		accelAccuracy = status;
 8001ba2:	7bfb      	ldrb	r3, [r7, #15]
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	4b63      	ldr	r3, [pc, #396]	; (8001d34 <IMU_parseInputReport+0x26c>)
 8001ba8:	801a      	strh	r2, [r3, #0]
		rawAccelX = data1;
 8001baa:	4a63      	ldr	r2, [pc, #396]	; (8001d38 <IMU_parseInputReport+0x270>)
 8001bac:	89bb      	ldrh	r3, [r7, #12]
 8001bae:	8013      	strh	r3, [r2, #0]
		rawAccelY = data2;
 8001bb0:	4a62      	ldr	r2, [pc, #392]	; (8001d3c <IMU_parseInputReport+0x274>)
 8001bb2:	897b      	ldrh	r3, [r7, #10]
 8001bb4:	8013      	strh	r3, [r2, #0]
		rawAccelZ = data3;
 8001bb6:	4a62      	ldr	r2, [pc, #392]	; (8001d40 <IMU_parseInputReport+0x278>)
 8001bb8:	893b      	ldrh	r3, [r7, #8]
 8001bba:	8013      	strh	r3, [r2, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 8001bbc:	e16a      	b.n	8001e94 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_LINEAR_ACCELERATION)
 8001bbe:	4b5b      	ldr	r3, [pc, #364]	; (8001d2c <IMU_parseInputReport+0x264>)
 8001bc0:	795b      	ldrb	r3, [r3, #5]
 8001bc2:	2b04      	cmp	r3, #4
 8001bc4:	d10d      	bne.n	8001be2 <IMU_parseInputReport+0x11a>
		accelLinAccuracy = status;
 8001bc6:	7bfb      	ldrb	r3, [r7, #15]
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	4b5e      	ldr	r3, [pc, #376]	; (8001d44 <IMU_parseInputReport+0x27c>)
 8001bcc:	801a      	strh	r2, [r3, #0]
		rawLinAccelX = data1;
 8001bce:	4a5e      	ldr	r2, [pc, #376]	; (8001d48 <IMU_parseInputReport+0x280>)
 8001bd0:	89bb      	ldrh	r3, [r7, #12]
 8001bd2:	8013      	strh	r3, [r2, #0]
		rawLinAccelY = data2;
 8001bd4:	4a5d      	ldr	r2, [pc, #372]	; (8001d4c <IMU_parseInputReport+0x284>)
 8001bd6:	897b      	ldrh	r3, [r7, #10]
 8001bd8:	8013      	strh	r3, [r2, #0]
		rawLinAccelZ = data3;
 8001bda:	4a5d      	ldr	r2, [pc, #372]	; (8001d50 <IMU_parseInputReport+0x288>)
 8001bdc:	893b      	ldrh	r3, [r7, #8]
 8001bde:	8013      	strh	r3, [r2, #0]
}
 8001be0:	e158      	b.n	8001e94 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_GYROSCOPE)
 8001be2:	4b52      	ldr	r3, [pc, #328]	; (8001d2c <IMU_parseInputReport+0x264>)
 8001be4:	795b      	ldrb	r3, [r3, #5]
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d10d      	bne.n	8001c06 <IMU_parseInputReport+0x13e>
		gyroAccuracy = status;
 8001bea:	7bfb      	ldrb	r3, [r7, #15]
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	4b59      	ldr	r3, [pc, #356]	; (8001d54 <IMU_parseInputReport+0x28c>)
 8001bf0:	801a      	strh	r2, [r3, #0]
		rawGyroX = data1;
 8001bf2:	4a59      	ldr	r2, [pc, #356]	; (8001d58 <IMU_parseInputReport+0x290>)
 8001bf4:	89bb      	ldrh	r3, [r7, #12]
 8001bf6:	8013      	strh	r3, [r2, #0]
		rawGyroY = data2;
 8001bf8:	4a58      	ldr	r2, [pc, #352]	; (8001d5c <IMU_parseInputReport+0x294>)
 8001bfa:	897b      	ldrh	r3, [r7, #10]
 8001bfc:	8013      	strh	r3, [r2, #0]
		rawGyroZ = data3;
 8001bfe:	4a58      	ldr	r2, [pc, #352]	; (8001d60 <IMU_parseInputReport+0x298>)
 8001c00:	893b      	ldrh	r3, [r7, #8]
 8001c02:	8013      	strh	r3, [r2, #0]
}
 8001c04:	e146      	b.n	8001e94 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_MAGNETIC_FIELD)
 8001c06:	4b49      	ldr	r3, [pc, #292]	; (8001d2c <IMU_parseInputReport+0x264>)
 8001c08:	795b      	ldrb	r3, [r3, #5]
 8001c0a:	2b03      	cmp	r3, #3
 8001c0c:	d10d      	bne.n	8001c2a <IMU_parseInputReport+0x162>
		magAccuracy = status;
 8001c0e:	7bfb      	ldrb	r3, [r7, #15]
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	4b54      	ldr	r3, [pc, #336]	; (8001d64 <IMU_parseInputReport+0x29c>)
 8001c14:	801a      	strh	r2, [r3, #0]
		rawMagX = data1;
 8001c16:	4a54      	ldr	r2, [pc, #336]	; (8001d68 <IMU_parseInputReport+0x2a0>)
 8001c18:	89bb      	ldrh	r3, [r7, #12]
 8001c1a:	8013      	strh	r3, [r2, #0]
		rawMagY = data2;
 8001c1c:	4a53      	ldr	r2, [pc, #332]	; (8001d6c <IMU_parseInputReport+0x2a4>)
 8001c1e:	897b      	ldrh	r3, [r7, #10]
 8001c20:	8013      	strh	r3, [r2, #0]
		rawMagZ = data3;
 8001c22:	4a53      	ldr	r2, [pc, #332]	; (8001d70 <IMU_parseInputReport+0x2a8>)
 8001c24:	893b      	ldrh	r3, [r7, #8]
 8001c26:	8013      	strh	r3, [r2, #0]
}
 8001c28:	e134      	b.n	8001e94 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_ROTATION_VECTOR || shtpData[5] == SENSOR_REPORTID_GAME_ROTATION_VECTOR)
 8001c2a:	4b40      	ldr	r3, [pc, #256]	; (8001d2c <IMU_parseInputReport+0x264>)
 8001c2c:	795b      	ldrb	r3, [r3, #5]
 8001c2e:	2b05      	cmp	r3, #5
 8001c30:	d003      	beq.n	8001c3a <IMU_parseInputReport+0x172>
 8001c32:	4b3e      	ldr	r3, [pc, #248]	; (8001d2c <IMU_parseInputReport+0x264>)
 8001c34:	795b      	ldrb	r3, [r3, #5]
 8001c36:	2b08      	cmp	r3, #8
 8001c38:	d166      	bne.n	8001d08 <IMU_parseInputReport+0x240>
		rotSample.tick_ms = HAL_GetTick();
 8001c3a:	f004 f929 	bl	8005e90 <HAL_GetTick>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	4b4c      	ldr	r3, [pc, #304]	; (8001d74 <IMU_parseInputReport+0x2ac>)
 8001c42:	615a      	str	r2, [r3, #20]
		rotSample.quatI =  IMU_qToFloat(data1, rotationVector_Q1);;
 8001c44:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001c48:	4b4b      	ldr	r3, [pc, #300]	; (8001d78 <IMU_parseInputReport+0x2b0>)
 8001c4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	4619      	mov	r1, r3
 8001c52:	4610      	mov	r0, r2
 8001c54:	f000 f964 	bl	8001f20 <IMU_qToFloat>
 8001c58:	eef0 7a40 	vmov.f32	s15, s0
 8001c5c:	4b45      	ldr	r3, [pc, #276]	; (8001d74 <IMU_parseInputReport+0x2ac>)
 8001c5e:	edc3 7a00 	vstr	s15, [r3]
		rotSample.quatJ =  IMU_qToFloat(data2, rotationVector_Q1);;
 8001c62:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001c66:	4b44      	ldr	r3, [pc, #272]	; (8001d78 <IMU_parseInputReport+0x2b0>)
 8001c68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4610      	mov	r0, r2
 8001c72:	f000 f955 	bl	8001f20 <IMU_qToFloat>
 8001c76:	eef0 7a40 	vmov.f32	s15, s0
 8001c7a:	4b3e      	ldr	r3, [pc, #248]	; (8001d74 <IMU_parseInputReport+0x2ac>)
 8001c7c:	edc3 7a01 	vstr	s15, [r3, #4]
		rotSample.quatK =  IMU_qToFloat(data3, rotationVector_Q1);;
 8001c80:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001c84:	4b3c      	ldr	r3, [pc, #240]	; (8001d78 <IMU_parseInputReport+0x2b0>)
 8001c86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4610      	mov	r0, r2
 8001c90:	f000 f946 	bl	8001f20 <IMU_qToFloat>
 8001c94:	eef0 7a40 	vmov.f32	s15, s0
 8001c98:	4b36      	ldr	r3, [pc, #216]	; (8001d74 <IMU_parseInputReport+0x2ac>)
 8001c9a:	edc3 7a02 	vstr	s15, [r3, #8]
		rotSample.quatReal = IMU_qToFloat(data4, rotationVector_Q1);
 8001c9e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001ca2:	4b35      	ldr	r3, [pc, #212]	; (8001d78 <IMU_parseInputReport+0x2b0>)
 8001ca4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	4619      	mov	r1, r3
 8001cac:	4610      	mov	r0, r2
 8001cae:	f000 f937 	bl	8001f20 <IMU_qToFloat>
 8001cb2:	eef0 7a40 	vmov.f32	s15, s0
 8001cb6:	4b2f      	ldr	r3, [pc, #188]	; (8001d74 <IMU_parseInputReport+0x2ac>)
 8001cb8:	edc3 7a03 	vstr	s15, [r3, #12]
		rotSample.quatRadianAccuracy = IMU_qToFloat(data5, 12);
 8001cbc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001cc0:	210c      	movs	r1, #12
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f000 f92c 	bl	8001f20 <IMU_qToFloat>
 8001cc8:	eef0 7a40 	vmov.f32	s15, s0
 8001ccc:	4b29      	ldr	r3, [pc, #164]	; (8001d74 <IMU_parseInputReport+0x2ac>)
 8001cce:	edc3 7a04 	vstr	s15, [r3, #16]
		osMessageQueuePut(rotationSampleQueueHandle, &rotSample, 0U, 0);
 8001cd2:	4b2a      	ldr	r3, [pc, #168]	; (8001d7c <IMU_parseInputReport+0x2b4>)
 8001cd4:	6818      	ldr	r0, [r3, #0]
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	2200      	movs	r2, #0
 8001cda:	4926      	ldr	r1, [pc, #152]	; (8001d74 <IMU_parseInputReport+0x2ac>)
 8001cdc:	f00c fb2e 	bl	800e33c <osMessageQueuePut>
		quatAccuracy = status;
 8001ce0:	7bfb      	ldrb	r3, [r7, #15]
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	4b26      	ldr	r3, [pc, #152]	; (8001d80 <IMU_parseInputReport+0x2b8>)
 8001ce6:	801a      	strh	r2, [r3, #0]
		rawQuatI = data1;
 8001ce8:	4a26      	ldr	r2, [pc, #152]	; (8001d84 <IMU_parseInputReport+0x2bc>)
 8001cea:	89bb      	ldrh	r3, [r7, #12]
 8001cec:	8013      	strh	r3, [r2, #0]
		rawQuatJ = data2;
 8001cee:	4a26      	ldr	r2, [pc, #152]	; (8001d88 <IMU_parseInputReport+0x2c0>)
 8001cf0:	897b      	ldrh	r3, [r7, #10]
 8001cf2:	8013      	strh	r3, [r2, #0]
		rawQuatK = data3;
 8001cf4:	4a25      	ldr	r2, [pc, #148]	; (8001d8c <IMU_parseInputReport+0x2c4>)
 8001cf6:	893b      	ldrh	r3, [r7, #8]
 8001cf8:	8013      	strh	r3, [r2, #0]
		rawQuatReal = data4;
 8001cfa:	4a25      	ldr	r2, [pc, #148]	; (8001d90 <IMU_parseInputReport+0x2c8>)
 8001cfc:	8afb      	ldrh	r3, [r7, #22]
 8001cfe:	8013      	strh	r3, [r2, #0]
		rawQuatRadianAccuracy = data5; //Only available on rotation vector, not game rot vector
 8001d00:	4a24      	ldr	r2, [pc, #144]	; (8001d94 <IMU_parseInputReport+0x2cc>)
 8001d02:	8abb      	ldrh	r3, [r7, #20]
 8001d04:	8013      	strh	r3, [r2, #0]
}
 8001d06:	e0c5      	b.n	8001e94 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_STEP_COUNTER)
 8001d08:	4b08      	ldr	r3, [pc, #32]	; (8001d2c <IMU_parseInputReport+0x264>)
 8001d0a:	795b      	ldrb	r3, [r3, #5]
 8001d0c:	2b11      	cmp	r3, #17
 8001d0e:	d147      	bne.n	8001da0 <IMU_parseInputReport+0x2d8>
		stepSample.tick_ms = HAL_GetTick();
 8001d10:	f004 f8be 	bl	8005e90 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	4b20      	ldr	r3, [pc, #128]	; (8001d98 <IMU_parseInputReport+0x2d0>)
 8001d18:	605a      	str	r2, [r3, #4]
		stepSample.stepCount = data3;
 8001d1a:	4a1f      	ldr	r2, [pc, #124]	; (8001d98 <IMU_parseInputReport+0x2d0>)
 8001d1c:	893b      	ldrh	r3, [r7, #8]
 8001d1e:	8013      	strh	r3, [r2, #0]
		stepCount = data3; //Bytes 8/9
 8001d20:	4a1e      	ldr	r2, [pc, #120]	; (8001d9c <IMU_parseInputReport+0x2d4>)
 8001d22:	893b      	ldrh	r3, [r7, #8]
 8001d24:	8013      	strh	r3, [r2, #0]
}
 8001d26:	e0b5      	b.n	8001e94 <IMU_parseInputReport+0x3cc>
 8001d28:	20027d14 	.word	0x20027d14
 8001d2c:	20027da4 	.word	0x20027da4
 8001d30:	20027d30 	.word	0x20027d30
 8001d34:	20027e6c 	.word	0x20027e6c
 8001d38:	20027e54 	.word	0x20027e54
 8001d3c:	20027e70 	.word	0x20027e70
 8001d40:	20027d6c 	.word	0x20027d6c
 8001d44:	20027d68 	.word	0x20027d68
 8001d48:	20027d3a 	.word	0x20027d3a
 8001d4c:	20027e58 	.word	0x20027e58
 8001d50:	20027d96 	.word	0x20027d96
 8001d54:	20027d98 	.word	0x20027d98
 8001d58:	20027d9a 	.word	0x20027d9a
 8001d5c:	20027d62 	.word	0x20027d62
 8001d60:	20027d60 	.word	0x20027d60
 8001d64:	20027d18 	.word	0x20027d18
 8001d68:	20027d64 	.word	0x20027d64
 8001d6c:	20027e5a 	.word	0x20027e5a
 8001d70:	20027d6a 	.word	0x20027d6a
 8001d74:	20027d7c 	.word	0x20027d7c
 8001d78:	20000004 	.word	0x20000004
 8001d7c:	20027894 	.word	0x20027894
 8001d80:	20027d36 	.word	0x20027d36
 8001d84:	20027e6e 	.word	0x20027e6e
 8001d88:	20027d94 	.word	0x20027d94
 8001d8c:	20027d10 	.word	0x20027d10
 8001d90:	20027d2c 	.word	0x20027d2c
 8001d94:	20027d6e 	.word	0x20027d6e
 8001d98:	20027d1c 	.word	0x20027d1c
 8001d9c:	20027e72 	.word	0x20027e72
	else if (shtpData[5] == SENSOR_REPORTID_STABILITY_CLASSIFIER)
 8001da0:	4b3e      	ldr	r3, [pc, #248]	; (8001e9c <IMU_parseInputReport+0x3d4>)
 8001da2:	795b      	ldrb	r3, [r3, #5]
 8001da4:	2b13      	cmp	r3, #19
 8001da6:	d10d      	bne.n	8001dc4 <IMU_parseInputReport+0x2fc>
		stabilitySample.tick_ms = HAL_GetTick();
 8001da8:	f004 f872 	bl	8005e90 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	4b3c      	ldr	r3, [pc, #240]	; (8001ea0 <IMU_parseInputReport+0x3d8>)
 8001db0:	605a      	str	r2, [r3, #4]
		stabilitySample.stabilityClass = shtpData[5 + 4];
 8001db2:	4b3a      	ldr	r3, [pc, #232]	; (8001e9c <IMU_parseInputReport+0x3d4>)
 8001db4:	7a5a      	ldrb	r2, [r3, #9]
 8001db6:	4b3a      	ldr	r3, [pc, #232]	; (8001ea0 <IMU_parseInputReport+0x3d8>)
 8001db8:	701a      	strb	r2, [r3, #0]
		stabilityClassifier = shtpData[5 + 4]; //Byte 4 only
 8001dba:	4b38      	ldr	r3, [pc, #224]	; (8001e9c <IMU_parseInputReport+0x3d4>)
 8001dbc:	7a5a      	ldrb	r2, [r3, #9]
 8001dbe:	4b39      	ldr	r3, [pc, #228]	; (8001ea4 <IMU_parseInputReport+0x3dc>)
 8001dc0:	701a      	strb	r2, [r3, #0]
}
 8001dc2:	e067      	b.n	8001e94 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_PERSONAL_ACTIVITY_CLASSIFIER)
 8001dc4:	4b35      	ldr	r3, [pc, #212]	; (8001e9c <IMU_parseInputReport+0x3d4>)
 8001dc6:	795b      	ldrb	r3, [r3, #5]
 8001dc8:	2b1e      	cmp	r3, #30
 8001dca:	d12b      	bne.n	8001e24 <IMU_parseInputReport+0x35c>
		activitySample.tick_ms = HAL_GetTick();
 8001dcc:	f004 f860 	bl	8005e90 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	4b35      	ldr	r3, [pc, #212]	; (8001ea8 <IMU_parseInputReport+0x3e0>)
 8001dd4:	60da      	str	r2, [r3, #12]
		for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	74fb      	strb	r3, [r7, #19]
 8001dda:	e00c      	b.n	8001df6 <IMU_parseInputReport+0x32e>
			_activityConfidences[x] = shtpData[5 + 6 + x]; //5 bytes of timestamp, byte 6 is first confidence byte
 8001ddc:	7cfb      	ldrb	r3, [r7, #19]
 8001dde:	f103 020b 	add.w	r2, r3, #11
 8001de2:	4b32      	ldr	r3, [pc, #200]	; (8001eac <IMU_parseInputReport+0x3e4>)
 8001de4:	6819      	ldr	r1, [r3, #0]
 8001de6:	7cfb      	ldrb	r3, [r7, #19]
 8001de8:	440b      	add	r3, r1
 8001dea:	492c      	ldr	r1, [pc, #176]	; (8001e9c <IMU_parseInputReport+0x3d4>)
 8001dec:	5c8a      	ldrb	r2, [r1, r2]
 8001dee:	701a      	strb	r2, [r3, #0]
		for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 8001df0:	7cfb      	ldrb	r3, [r7, #19]
 8001df2:	3301      	adds	r3, #1
 8001df4:	74fb      	strb	r3, [r7, #19]
 8001df6:	7cfb      	ldrb	r3, [r7, #19]
 8001df8:	2b08      	cmp	r3, #8
 8001dfa:	d9ef      	bls.n	8001ddc <IMU_parseInputReport+0x314>
		activityClassifier = shtpData[5 + 5]; //Most likely state
 8001dfc:	4b27      	ldr	r3, [pc, #156]	; (8001e9c <IMU_parseInputReport+0x3d4>)
 8001dfe:	7a9a      	ldrb	r2, [r3, #10]
 8001e00:	4b2b      	ldr	r3, [pc, #172]	; (8001eb0 <IMU_parseInputReport+0x3e8>)
 8001e02:	701a      	strb	r2, [r3, #0]
		memcpy(activitySample.activityConfidence, _activityConfidences, 9);
 8001e04:	4b29      	ldr	r3, [pc, #164]	; (8001eac <IMU_parseInputReport+0x3e4>)
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	4b27      	ldr	r3, [pc, #156]	; (8001ea8 <IMU_parseInputReport+0x3e0>)
 8001e0a:	6810      	ldr	r0, [r2, #0]
 8001e0c:	6851      	ldr	r1, [r2, #4]
 8001e0e:	c303      	stmia	r3!, {r0, r1}
 8001e10:	7a12      	ldrb	r2, [r2, #8]
 8001e12:	701a      	strb	r2, [r3, #0]
		osMessageQueuePut(activitySampleQueueHandle, &activitySample, 0U, 0);
 8001e14:	4b27      	ldr	r3, [pc, #156]	; (8001eb4 <IMU_parseInputReport+0x3ec>)
 8001e16:	6818      	ldr	r0, [r3, #0]
 8001e18:	2300      	movs	r3, #0
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	4922      	ldr	r1, [pc, #136]	; (8001ea8 <IMU_parseInputReport+0x3e0>)
 8001e1e:	f00c fa8d 	bl	800e33c <osMessageQueuePut>
}
 8001e22:	e037      	b.n	8001e94 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_RAW_ACCELEROMETER)
 8001e24:	4b1d      	ldr	r3, [pc, #116]	; (8001e9c <IMU_parseInputReport+0x3d4>)
 8001e26:	795b      	ldrb	r3, [r3, #5]
 8001e28:	2b14      	cmp	r3, #20
 8001e2a:	d109      	bne.n	8001e40 <IMU_parseInputReport+0x378>
		memsRawAccelX = data1;
 8001e2c:	4a22      	ldr	r2, [pc, #136]	; (8001eb8 <IMU_parseInputReport+0x3f0>)
 8001e2e:	89bb      	ldrh	r3, [r7, #12]
 8001e30:	8013      	strh	r3, [r2, #0]
		memsRawAccelY = data2;
 8001e32:	4a22      	ldr	r2, [pc, #136]	; (8001ebc <IMU_parseInputReport+0x3f4>)
 8001e34:	897b      	ldrh	r3, [r7, #10]
 8001e36:	8013      	strh	r3, [r2, #0]
		memsRawAccelZ = data3;
 8001e38:	4a21      	ldr	r2, [pc, #132]	; (8001ec0 <IMU_parseInputReport+0x3f8>)
 8001e3a:	893b      	ldrh	r3, [r7, #8]
 8001e3c:	8013      	strh	r3, [r2, #0]
}
 8001e3e:	e029      	b.n	8001e94 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_RAW_GYROSCOPE)
 8001e40:	4b16      	ldr	r3, [pc, #88]	; (8001e9c <IMU_parseInputReport+0x3d4>)
 8001e42:	795b      	ldrb	r3, [r3, #5]
 8001e44:	2b15      	cmp	r3, #21
 8001e46:	d109      	bne.n	8001e5c <IMU_parseInputReport+0x394>
		memsRawGyroX = data1;
 8001e48:	4a1e      	ldr	r2, [pc, #120]	; (8001ec4 <IMU_parseInputReport+0x3fc>)
 8001e4a:	89bb      	ldrh	r3, [r7, #12]
 8001e4c:	8013      	strh	r3, [r2, #0]
		memsRawGyroY = data2;
 8001e4e:	4a1e      	ldr	r2, [pc, #120]	; (8001ec8 <IMU_parseInputReport+0x400>)
 8001e50:	897b      	ldrh	r3, [r7, #10]
 8001e52:	8013      	strh	r3, [r2, #0]
		memsRawGyroZ = data3;
 8001e54:	4a1d      	ldr	r2, [pc, #116]	; (8001ecc <IMU_parseInputReport+0x404>)
 8001e56:	893b      	ldrh	r3, [r7, #8]
 8001e58:	8013      	strh	r3, [r2, #0]
}
 8001e5a:	e01b      	b.n	8001e94 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_RAW_MAGNETOMETER)
 8001e5c:	4b0f      	ldr	r3, [pc, #60]	; (8001e9c <IMU_parseInputReport+0x3d4>)
 8001e5e:	795b      	ldrb	r3, [r3, #5]
 8001e60:	2b16      	cmp	r3, #22
 8001e62:	d109      	bne.n	8001e78 <IMU_parseInputReport+0x3b0>
		memsRawMagX = data1;
 8001e64:	4a1a      	ldr	r2, [pc, #104]	; (8001ed0 <IMU_parseInputReport+0x408>)
 8001e66:	89bb      	ldrh	r3, [r7, #12]
 8001e68:	8013      	strh	r3, [r2, #0]
		memsRawMagY = data2;
 8001e6a:	4a1a      	ldr	r2, [pc, #104]	; (8001ed4 <IMU_parseInputReport+0x40c>)
 8001e6c:	897b      	ldrh	r3, [r7, #10]
 8001e6e:	8013      	strh	r3, [r2, #0]
		memsRawMagZ = data3;
 8001e70:	4a19      	ldr	r2, [pc, #100]	; (8001ed8 <IMU_parseInputReport+0x410>)
 8001e72:	893b      	ldrh	r3, [r7, #8]
 8001e74:	8013      	strh	r3, [r2, #0]
}
 8001e76:	e00d      	b.n	8001e94 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SHTP_REPORT_COMMAND_RESPONSE)
 8001e78:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <IMU_parseInputReport+0x3d4>)
 8001e7a:	795b      	ldrb	r3, [r3, #5]
 8001e7c:	2bf1      	cmp	r3, #241	; 0xf1
 8001e7e:	d109      	bne.n	8001e94 <IMU_parseInputReport+0x3cc>
		uint8_t command = shtpData[5 + 2]; //This is the Command byte of the response
 8001e80:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <IMU_parseInputReport+0x3d4>)
 8001e82:	79db      	ldrb	r3, [r3, #7]
 8001e84:	71fb      	strb	r3, [r7, #7]
		if (command == COMMAND_ME_CALIBRATE)
 8001e86:	79fb      	ldrb	r3, [r7, #7]
 8001e88:	2b07      	cmp	r3, #7
 8001e8a:	d103      	bne.n	8001e94 <IMU_parseInputReport+0x3cc>
			calibrationStatus = shtpData[5 + 5]; //R0 - Status (0 = success, non-zero = fail)
 8001e8c:	4b03      	ldr	r3, [pc, #12]	; (8001e9c <IMU_parseInputReport+0x3d4>)
 8001e8e:	7a9a      	ldrb	r2, [r3, #10]
 8001e90:	4b12      	ldr	r3, [pc, #72]	; (8001edc <IMU_parseInputReport+0x414>)
 8001e92:	701a      	strb	r2, [r3, #0]
}
 8001e94:	bf00      	nop
 8001e96:	3718      	adds	r7, #24
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	20027da4 	.word	0x20027da4
 8001ea0:	20027d24 	.word	0x20027d24
 8001ea4:	20027d9e 	.word	0x20027d9e
 8001ea8:	20027e5c 	.word	0x20027e5c
 8001eac:	20027d78 	.word	0x20027d78
 8001eb0:	20027e56 	.word	0x20027e56
 8001eb4:	20027878 	.word	0x20027878
 8001eb8:	20027d9c 	.word	0x20027d9c
 8001ebc:	20027d76 	.word	0x20027d76
 8001ec0:	20027e26 	.word	0x20027e26
 8001ec4:	20027d1a 	.word	0x20027d1a
 8001ec8:	20027da0 	.word	0x20027da0
 8001ecc:	20027d70 	.word	0x20027d70
 8001ed0:	20027d74 	.word	0x20027d74
 8001ed4:	20027d72 	.word	0x20027d72
 8001ed8:	20027d38 	.word	0x20027d38
 8001edc:	20027e57 	.word	0x20027e57

08001ee0 <IMU_softReset>:
//Send command to reset IC
//Read all advertisement packets from sensor
//The sensor has been seen to reset twice if we attempt too much too quickly.
//This seems to work reliably.
void IMU_softReset(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
	shtpData[0] = 1; //Reset
 8001ee4:	4b0d      	ldr	r3, [pc, #52]	; (8001f1c <IMU_softReset+0x3c>)
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	701a      	strb	r2, [r3, #0]

	//Attempt to start communication with sensor
	IMU_sendPacket(CHANNEL_EXECUTABLE, 1); //Transmit packet on channel 1, 1 byte
 8001eea:	2301      	movs	r3, #1
 8001eec:	2101      	movs	r1, #1
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f000 f98e 	bl	8002210 <IMU_sendPacket>

	//Read all incoming data and flush it
	HAL_Delay(200);
 8001ef4:	20c8      	movs	r0, #200	; 0xc8
 8001ef6:	f003 ffe3 	bl	8005ec0 <HAL_Delay>
	while (IMU_receivePacket() == true)
 8001efa:	bf00      	nop
 8001efc:	f000 f8e0 	bl	80020c0 <IMU_receivePacket>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1fa      	bne.n	8001efc <IMU_softReset+0x1c>
		;
	HAL_Delay(200);
 8001f06:	20c8      	movs	r0, #200	; 0xc8
 8001f08:	f003 ffda 	bl	8005ec0 <HAL_Delay>
	while (IMU_receivePacket() == true)
 8001f0c:	bf00      	nop
 8001f0e:	f000 f8d7 	bl	80020c0 <IMU_receivePacket>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d1fa      	bne.n	8001f0e <IMU_softReset+0x2e>
		;
}
 8001f18:	bf00      	nop
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	20027da4 	.word	0x20027da4

08001f20 <IMU_qToFloat>:
}

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float IMU_qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
 8001f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	460a      	mov	r2, r1
 8001f2a:	80fb      	strh	r3, [r7, #6]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	717b      	strb	r3, [r7, #5]
	float qFloat = fixedPointValue;
 8001f30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f34:	ee07 3a90 	vmov	s15, r3
 8001f38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f3c:	edc7 7a03 	vstr	s15, [r7, #12]
	qFloat *= pow(2, qPoint * -1);
 8001f40:	797b      	ldrb	r3, [r7, #5]
 8001f42:	425b      	negs	r3, r3
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7fe fa77 	bl	8000438 <__aeabi_i2d>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	460c      	mov	r4, r1
 8001f4e:	ec44 3b11 	vmov	d1, r3, r4
 8001f52:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8001f98 <IMU_qToFloat+0x78>
 8001f56:	f013 f91d 	bl	8015194 <pow>
 8001f5a:	ec56 5b10 	vmov	r5, r6, d0
 8001f5e:	68f8      	ldr	r0, [r7, #12]
 8001f60:	f7fe fa7c 	bl	800045c <__aeabi_f2d>
 8001f64:	4603      	mov	r3, r0
 8001f66:	460c      	mov	r4, r1
 8001f68:	461a      	mov	r2, r3
 8001f6a:	4623      	mov	r3, r4
 8001f6c:	4628      	mov	r0, r5
 8001f6e:	4631      	mov	r1, r6
 8001f70:	f7fe facc 	bl	800050c <__aeabi_dmul>
 8001f74:	4603      	mov	r3, r0
 8001f76:	460c      	mov	r4, r1
 8001f78:	4618      	mov	r0, r3
 8001f7a:	4621      	mov	r1, r4
 8001f7c:	f7fe fd76 	bl	8000a6c <__aeabi_d2f>
 8001f80:	4603      	mov	r3, r0
 8001f82:	60fb      	str	r3, [r7, #12]
	return (qFloat);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	ee07 3a90 	vmov	s15, r3
}
 8001f8a:	eeb0 0a67 	vmov.f32	s0, s15
 8001f8e:	3714      	adds	r7, #20
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f94:	f3af 8000 	nop.w
 8001f98:	00000000 	.word	0x00000000
 8001f9c:	40000000 	.word	0x40000000

08001fa0 <IMU_enableRotationVector>:

//Sends the packet to enable the rotation vector
void IMU_enableRotationVector(uint16_t timeBetweenReports)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	80fb      	strh	r3, [r7, #6]
	IMU_setFeatureCommand_2(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports);
 8001faa:	88fb      	ldrh	r3, [r7, #6]
 8001fac:	4619      	mov	r1, r3
 8001fae:	2005      	movs	r0, #5
 8001fb0:	f000 f81a 	bl	8001fe8 <IMU_setFeatureCommand_2>
}
 8001fb4:	bf00      	nop
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <IMU_enableActivityClassifier>:
	IMU_setFeatureCommand_2(SENSOR_REPORTID_RAW_MAGNETOMETER, timeBetweenReports);
}

//Sends the packet to enable the various activity classifiers
void IMU_enableActivityClassifier(uint16_t timeBetweenReports, uint32_t activitiesToEnable, uint8_t *activityConfidences)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
 8001fc8:	81fb      	strh	r3, [r7, #14]
	_activityConfidences = activityConfidences; //Store pointer to array
 8001fca:	4a06      	ldr	r2, [pc, #24]	; (8001fe4 <IMU_enableActivityClassifier+0x28>)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6013      	str	r3, [r2, #0]

	IMU_setFeatureCommand_3(SENSOR_REPORTID_PERSONAL_ACTIVITY_CLASSIFIER, timeBetweenReports, activitiesToEnable);
 8001fd0:	89fb      	ldrh	r3, [r7, #14]
 8001fd2:	68ba      	ldr	r2, [r7, #8]
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	201e      	movs	r0, #30
 8001fd8:	f000 f818 	bl	800200c <IMU_setFeatureCommand_3>
}
 8001fdc:	bf00      	nop
 8001fde:	3710      	adds	r7, #16
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	20027d78 	.word	0x20027d78

08001fe8 <IMU_setFeatureCommand_2>:
	return (false);
}

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
void IMU_setFeatureCommand_2(uint8_t reportID, uint16_t timeBetweenReports)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	460a      	mov	r2, r1
 8001ff2:	71fb      	strb	r3, [r7, #7]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	80bb      	strh	r3, [r7, #4]
	IMU_setFeatureCommand_3(reportID, timeBetweenReports, 0); //No specific config
 8001ff8:	88b9      	ldrh	r1, [r7, #4]
 8001ffa:	79fb      	ldrb	r3, [r7, #7]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	4618      	mov	r0, r3
 8002000:	f000 f804 	bl	800200c <IMU_setFeatureCommand_3>
}
 8002004:	bf00      	nop
 8002006:	3708      	adds	r7, #8
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <IMU_setFeatureCommand_3>:

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void IMU_setFeatureCommand_3(uint8_t reportID, uint16_t timeBetweenReports, uint32_t specificConfig)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	4603      	mov	r3, r0
 8002014:	603a      	str	r2, [r7, #0]
 8002016:	71fb      	strb	r3, [r7, #7]
 8002018:	460b      	mov	r3, r1
 800201a:	80bb      	strh	r3, [r7, #4]
	long microsBetweenReports = (long)timeBetweenReports * 1000L;
 800201c:	88bb      	ldrh	r3, [r7, #4]
 800201e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002022:	fb02 f303 	mul.w	r3, r2, r3
 8002026:	60fb      	str	r3, [r7, #12]

	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 8002028:	4b24      	ldr	r3, [pc, #144]	; (80020bc <IMU_setFeatureCommand_3+0xb0>)
 800202a:	22fd      	movs	r2, #253	; 0xfd
 800202c:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;							   //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 800202e:	4a23      	ldr	r2, [pc, #140]	; (80020bc <IMU_setFeatureCommand_3+0xb0>)
 8002030:	79fb      	ldrb	r3, [r7, #7]
 8002032:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;								   //Feature flags
 8002034:	4b21      	ldr	r3, [pc, #132]	; (80020bc <IMU_setFeatureCommand_3+0xb0>)
 8002036:	2200      	movs	r2, #0
 8002038:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;								   //Change sensitivity (LSB)
 800203a:	4b20      	ldr	r3, [pc, #128]	; (80020bc <IMU_setFeatureCommand_3+0xb0>)
 800203c:	2200      	movs	r2, #0
 800203e:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;								   //Change sensitivity (MSB)
 8002040:	4b1e      	ldr	r3, [pc, #120]	; (80020bc <IMU_setFeatureCommand_3+0xb0>)
 8002042:	2200      	movs	r2, #0
 8002044:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	b2da      	uxtb	r2, r3
 800204a:	4b1c      	ldr	r3, [pc, #112]	; (80020bc <IMU_setFeatureCommand_3+0xb0>)
 800204c:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	121b      	asrs	r3, r3, #8
 8002052:	b2da      	uxtb	r2, r3
 8002054:	4b19      	ldr	r3, [pc, #100]	; (80020bc <IMU_setFeatureCommand_3+0xb0>)
 8002056:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	141b      	asrs	r3, r3, #16
 800205c:	b2da      	uxtb	r2, r3
 800205e:	4b17      	ldr	r3, [pc, #92]	; (80020bc <IMU_setFeatureCommand_3+0xb0>)
 8002060:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	0e1b      	lsrs	r3, r3, #24
 8002066:	b2da      	uxtb	r2, r3
 8002068:	4b14      	ldr	r3, [pc, #80]	; (80020bc <IMU_setFeatureCommand_3+0xb0>)
 800206a:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;								   //Batch Interval (LSB)
 800206c:	4b13      	ldr	r3, [pc, #76]	; (80020bc <IMU_setFeatureCommand_3+0xb0>)
 800206e:	2200      	movs	r2, #0
 8002070:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;								   //Batch Interval
 8002072:	4b12      	ldr	r3, [pc, #72]	; (80020bc <IMU_setFeatureCommand_3+0xb0>)
 8002074:	2200      	movs	r2, #0
 8002076:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;								   //Batch Interval
 8002078:	4b10      	ldr	r3, [pc, #64]	; (80020bc <IMU_setFeatureCommand_3+0xb0>)
 800207a:	2200      	movs	r2, #0
 800207c:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;								   //Batch Interval (MSB)
 800207e:	4b0f      	ldr	r3, [pc, #60]	; (80020bc <IMU_setFeatureCommand_3+0xb0>)
 8002080:	2200      	movs	r2, #0
 8002082:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   //Sensor-specific config (LSB)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	b2da      	uxtb	r2, r3
 8002088:	4b0c      	ldr	r3, [pc, #48]	; (80020bc <IMU_setFeatureCommand_3+0xb0>)
 800208a:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   //Sensor-specific config
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	0a1b      	lsrs	r3, r3, #8
 8002090:	b2da      	uxtb	r2, r3
 8002092:	4b0a      	ldr	r3, [pc, #40]	; (80020bc <IMU_setFeatureCommand_3+0xb0>)
 8002094:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	  //Sensor-specific config
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	0c1b      	lsrs	r3, r3, #16
 800209a:	b2da      	uxtb	r2, r3
 800209c:	4b07      	ldr	r3, [pc, #28]	; (80020bc <IMU_setFeatureCommand_3+0xb0>)
 800209e:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	  //Sensor-specific config (MSB)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	0e1b      	lsrs	r3, r3, #24
 80020a4:	b2da      	uxtb	r2, r3
 80020a6:	4b05      	ldr	r3, [pc, #20]	; (80020bc <IMU_setFeatureCommand_3+0xb0>)
 80020a8:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	IMU_sendPacket(CHANNEL_CONTROL, 17);
 80020aa:	2302      	movs	r3, #2
 80020ac:	2111      	movs	r1, #17
 80020ae:	4618      	mov	r0, r3
 80020b0:	f000 f8ae 	bl	8002210 <IMU_sendPacket>
}
 80020b4:	bf00      	nop
 80020b6:	3710      	adds	r7, #16
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	20027da4 	.word	0x20027da4

080020c0 <IMU_receivePacket>:
//}

//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
bool IMU_receivePacket(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af02      	add	r7, sp, #8
	if( HAL_GPIO_ReadPin(_intPort, _int) == GPIO_PIN_SET)
 80020c6:	4b22      	ldr	r3, [pc, #136]	; (8002150 <IMU_receivePacket+0x90>)
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	4b22      	ldr	r3, [pc, #136]	; (8002154 <IMU_receivePacket+0x94>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	4619      	mov	r1, r3
 80020d2:	4610      	mov	r0, r2
 80020d4:	f006 f906 	bl	80082e4 <HAL_GPIO_ReadPin>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d101      	bne.n	80020e2 <IMU_receivePacket+0x22>
		return (false);
 80020de:	2300      	movs	r3, #0
 80020e0:	e031      	b.n	8002146 <IMU_receivePacket+0x86>

	//Ask for four bytes to find out how much data we need to read
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 80020e2:	4b1d      	ldr	r3, [pc, #116]	; (8002158 <IMU_receivePacket+0x98>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f04f 31ff 	mov.w	r1, #4294967295
 80020ea:	4618      	mov	r0, r3
 80020ec:	f00b ffe2 	bl	800e0b4 <osSemaphoreAcquire>
//	taskENTER_CRITICAL();
	HAL_I2C_Master_Receive(&hi2c1, _deviceAddress, shtpHeader, (uint8_t) 4, 100);
 80020f0:	4b1a      	ldr	r3, [pc, #104]	; (800215c <IMU_receivePacket+0x9c>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	b299      	uxth	r1, r3
 80020f6:	2364      	movs	r3, #100	; 0x64
 80020f8:	9300      	str	r3, [sp, #0]
 80020fa:	2304      	movs	r3, #4
 80020fc:	4a18      	ldr	r2, [pc, #96]	; (8002160 <IMU_receivePacket+0xa0>)
 80020fe:	4819      	ldr	r0, [pc, #100]	; (8002164 <IMU_receivePacket+0xa4>)
 8002100:	f006 faa4 	bl	800864c <HAL_I2C_Master_Receive>
//		osSemaphoreRelease(messageI2C_LockSem);
//		osDelay(100);
//		osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
//	}
//	taskEXIT_CRITICAL();
	osSemaphoreRelease(messageI2C_LockHandle);
 8002104:	4b14      	ldr	r3, [pc, #80]	; (8002158 <IMU_receivePacket+0x98>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4618      	mov	r0, r3
 800210a:	f00c f839 	bl	800e180 <osSemaphoreRelease>

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ( ((uint16_t)shtpHeader[PACKET_MSB] << 8) | shtpHeader[PACKET_LSB]);
 800210e:	4b14      	ldr	r3, [pc, #80]	; (8002160 <IMU_receivePacket+0xa0>)
 8002110:	785b      	ldrb	r3, [r3, #1]
 8002112:	021b      	lsls	r3, r3, #8
 8002114:	b21a      	sxth	r2, r3
 8002116:	4b12      	ldr	r3, [pc, #72]	; (8002160 <IMU_receivePacket+0xa0>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	b21b      	sxth	r3, r3
 800211c:	4313      	orrs	r3, r2
 800211e:	80fb      	strh	r3, [r7, #6]
	dataLength &= ~(1 << 15); //Clear the MSbit.
 8002120:	88fb      	ldrh	r3, [r7, #6]
 8002122:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002126:	80fb      	strh	r3, [r7, #6]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 8002128:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d101      	bne.n	8002134 <IMU_receivePacket+0x74>
	{
		//Packet is empty
		return (false); //All done
 8002130:	2300      	movs	r3, #0
 8002132:	e008      	b.n	8002146 <IMU_receivePacket+0x86>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 8002134:	88fb      	ldrh	r3, [r7, #6]
 8002136:	3b04      	subs	r3, #4
 8002138:	b29b      	uxth	r3, r3
 800213a:	80fb      	strh	r3, [r7, #6]

	IMU_getData(dataLength);
 800213c:	88fb      	ldrh	r3, [r7, #6]
 800213e:	4618      	mov	r0, r3
 8002140:	f000 f812 	bl	8002168 <IMU_getData>


	return (true); //We're done!
 8002144:	2301      	movs	r3, #1
}
 8002146:	4618      	mov	r0, r3
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	20027e2c 	.word	0x20027e2c
 8002154:	20027d66 	.word	0x20027d66
 8002158:	20027880 	.word	0x20027880
 800215c:	20000006 	.word	0x20000006
 8002160:	20027d14 	.word	0x20027d14
 8002164:	20027e74 	.word	0x20027e74

08002168 <IMU_getData>:

//Sends multiple requests to sensor until all data bytes are received from sensor
//The shtpData buffer has max capacity of MAX_PACKET_SIZE. Any bytes over this amount will be lost.
//Arduino I2C read limit is 32 bytes. Header is 4 bytes, so max data we can read per interation is 28 bytes
bool IMU_getData(uint16_t bytesRemaining)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af02      	add	r7, sp, #8
 800216e:	4603      	mov	r3, r0
 8002170:	80fb      	strh	r3, [r7, #6]
	uint16_t dataSpot = 0; //Start at the beginning of shtpData array
 8002172:	2300      	movs	r3, #0
 8002174:	81fb      	strh	r3, [r7, #14]
//	uint8_t receiveBuffer[28] = {0};
//	uint8_t receivePacket[I2C_BUFFER_LENGTH - 4] = {0};


	//Setup a series of chunked 32 byte reads
	while (bytesRemaining > 0)
 8002176:	e036      	b.n	80021e6 <IMU_getData+0x7e>
	{
		uint16_t numberOfBytesToRead = bytesRemaining;
 8002178:	88fb      	ldrh	r3, [r7, #6]
 800217a:	81bb      	strh	r3, [r7, #12]
		if (numberOfBytesToRead > (I2C_BUFFER_LENGTH - 4))
 800217c:	89bb      	ldrh	r3, [r7, #12]
 800217e:	2b1c      	cmp	r3, #28
 8002180:	d901      	bls.n	8002186 <IMU_getData+0x1e>
			numberOfBytesToRead = (I2C_BUFFER_LENGTH - 4);
 8002182:	231c      	movs	r3, #28
 8002184:	81bb      	strh	r3, [r7, #12]

		osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8002186:	4b1c      	ldr	r3, [pc, #112]	; (80021f8 <IMU_getData+0x90>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f04f 31ff 	mov.w	r1, #4294967295
 800218e:	4618      	mov	r0, r3
 8002190:	f00b ff90 	bl	800e0b4 <osSemaphoreAcquire>
//		taskENTER_CRITICAL();
		HAL_I2C_Master_Receive(&hi2c1, _deviceAddress, receiveBuffer, (uint8_t)(numberOfBytesToRead + 4), 100);
 8002194:	4b19      	ldr	r3, [pc, #100]	; (80021fc <IMU_getData+0x94>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	b299      	uxth	r1, r3
 800219a:	89bb      	ldrh	r3, [r7, #12]
 800219c:	b2db      	uxtb	r3, r3
 800219e:	3304      	adds	r3, #4
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	2364      	movs	r3, #100	; 0x64
 80021a6:	9300      	str	r3, [sp, #0]
 80021a8:	4613      	mov	r3, r2
 80021aa:	4a15      	ldr	r2, [pc, #84]	; (8002200 <IMU_getData+0x98>)
 80021ac:	4815      	ldr	r0, [pc, #84]	; (8002204 <IMU_getData+0x9c>)
 80021ae:	f006 fa4d 	bl	800864c <HAL_I2C_Master_Receive>
//			osSemaphoreRelease(messageI2C_LockSem);
//			osDelay(100);
//			osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
//		}
//		taskEXIT_CRITICAL();
		osSemaphoreRelease(messageI2C_LockHandle);
 80021b2:	4b11      	ldr	r3, [pc, #68]	; (80021f8 <IMU_getData+0x90>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f00b ffe2 	bl	800e180 <osSemaphoreRelease>
//		_i2cPort->requestFrom((uint8_t)_deviceAddress, (uint8_t)(numberOfBytesToRead + 4));
//		if (waitForI2C() == false)
//			return (0); //Error

		// first four bytes are header bytes and can be thrown away
		if ( (dataSpot + numberOfBytesToRead) < MAX_PACKET_SIZE){
 80021bc:	89fa      	ldrh	r2, [r7, #14]
 80021be:	89bb      	ldrh	r3, [r7, #12]
 80021c0:	4413      	add	r3, r2
 80021c2:	2b7f      	cmp	r3, #127	; 0x7f
 80021c4:	dc07      	bgt.n	80021d6 <IMU_getData+0x6e>
			memcpy(&(shtpData[dataSpot]), &(receiveBuffer[4]), numberOfBytesToRead);
 80021c6:	89fb      	ldrh	r3, [r7, #14]
 80021c8:	4a0f      	ldr	r2, [pc, #60]	; (8002208 <IMU_getData+0xa0>)
 80021ca:	4413      	add	r3, r2
 80021cc:	89ba      	ldrh	r2, [r7, #12]
 80021ce:	490f      	ldr	r1, [pc, #60]	; (800220c <IMU_getData+0xa4>)
 80021d0:	4618      	mov	r0, r3
 80021d2:	f012 ffcb 	bl	801516c <memcpy>
			// Do nothing with the data
		}

		// increment data index
		// TODO: this can be changed to receive a larger buffer since this constraint is for the Arduino
		dataSpot += numberOfBytesToRead;
 80021d6:	89fa      	ldrh	r2, [r7, #14]
 80021d8:	89bb      	ldrh	r3, [r7, #12]
 80021da:	4413      	add	r3, r2
 80021dc:	81fb      	strh	r3, [r7, #14]

		bytesRemaining -= numberOfBytesToRead;
 80021de:	88fa      	ldrh	r2, [r7, #6]
 80021e0:	89bb      	ldrh	r3, [r7, #12]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	80fb      	strh	r3, [r7, #6]
	while (bytesRemaining > 0)
 80021e6:	88fb      	ldrh	r3, [r7, #6]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d1c5      	bne.n	8002178 <IMU_getData+0x10>
	}
	return (true); //Done!
 80021ec:	2301      	movs	r3, #1
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	20027880 	.word	0x20027880
 80021fc:	20000006 	.word	0x20000006
 8002200:	20000a5c 	.word	0x20000a5c
 8002204:	20027e74 	.word	0x20027e74
 8002208:	20027da4 	.word	0x20027da4
 800220c:	20000a60 	.word	0x20000a60

08002210 <IMU_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
bool IMU_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af02      	add	r7, sp, #8
 8002216:	4603      	mov	r3, r0
 8002218:	460a      	mov	r2, r1
 800221a:	71fb      	strb	r3, [r7, #7]
 800221c:	4613      	mov	r3, r2
 800221e:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 8002220:	79bb      	ldrb	r3, [r7, #6]
 8002222:	3304      	adds	r3, #4
 8002224:	73fb      	strb	r3, [r7, #15]

	/*  *********** POPULATE HEADER ****************************** */
	outPacket[0] = packetLength & 0xFF; 				//Packet length LSB
 8002226:	4a1b      	ldr	r2, [pc, #108]	; (8002294 <IMU_sendPacket+0x84>)
 8002228:	7bfb      	ldrb	r3, [r7, #15]
 800222a:	7013      	strb	r3, [r2, #0]
	outPacket[1] = packetLength >> 8; 					//Packet length MSB
 800222c:	7bfb      	ldrb	r3, [r7, #15]
 800222e:	121b      	asrs	r3, r3, #8
 8002230:	b2da      	uxtb	r2, r3
 8002232:	4b18      	ldr	r3, [pc, #96]	; (8002294 <IMU_sendPacket+0x84>)
 8002234:	705a      	strb	r2, [r3, #1]
	outPacket[2] = channelNumber; 						//Channel number
 8002236:	4a17      	ldr	r2, [pc, #92]	; (8002294 <IMU_sendPacket+0x84>)
 8002238:	79fb      	ldrb	r3, [r7, #7]
 800223a:	7093      	strb	r3, [r2, #2]
	outPacket[3] = sequenceNumber[channelNumber]++;	//Send the sequence number, increments with each packet sent, different counter for each channel
 800223c:	79fb      	ldrb	r3, [r7, #7]
 800223e:	4a16      	ldr	r2, [pc, #88]	; (8002298 <IMU_sendPacket+0x88>)
 8002240:	5cd2      	ldrb	r2, [r2, r3]
 8002242:	1c51      	adds	r1, r2, #1
 8002244:	b2c8      	uxtb	r0, r1
 8002246:	4914      	ldr	r1, [pc, #80]	; (8002298 <IMU_sendPacket+0x88>)
 8002248:	54c8      	strb	r0, [r1, r3]
 800224a:	4b12      	ldr	r3, [pc, #72]	; (8002294 <IMU_sendPacket+0x84>)
 800224c:	70da      	strb	r2, [r3, #3]

	/*  *********** FILL PAYLOAD ********************************* */
	memcpy(&(outPacket[4]), shtpData, dataLength);
 800224e:	79bb      	ldrb	r3, [r7, #6]
 8002250:	461a      	mov	r2, r3
 8002252:	4912      	ldr	r1, [pc, #72]	; (800229c <IMU_sendPacket+0x8c>)
 8002254:	4812      	ldr	r0, [pc, #72]	; (80022a0 <IMU_sendPacket+0x90>)
 8002256:	f012 ff89 	bl	801516c <memcpy>

	/*  *********** SEND TO IMU ********************************** */
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 800225a:	4b12      	ldr	r3, [pc, #72]	; (80022a4 <IMU_sendPacket+0x94>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f04f 31ff 	mov.w	r1, #4294967295
 8002262:	4618      	mov	r0, r3
 8002264:	f00b ff26 	bl	800e0b4 <osSemaphoreAcquire>
//	taskENTER_CRITICAL();
	HAL_I2C_Master_Transmit(&hi2c1, _deviceAddress, outPacket, packetLength, 100);
 8002268:	4b0f      	ldr	r3, [pc, #60]	; (80022a8 <IMU_sendPacket+0x98>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	b299      	uxth	r1, r3
 800226e:	7bfb      	ldrb	r3, [r7, #15]
 8002270:	b29a      	uxth	r2, r3
 8002272:	2364      	movs	r3, #100	; 0x64
 8002274:	9300      	str	r3, [sp, #0]
 8002276:	4613      	mov	r3, r2
 8002278:	4a06      	ldr	r2, [pc, #24]	; (8002294 <IMU_sendPacket+0x84>)
 800227a:	480c      	ldr	r0, [pc, #48]	; (80022ac <IMU_sendPacket+0x9c>)
 800227c:	f006 f8f2 	bl	8008464 <HAL_I2C_Master_Transmit>
//		osSemaphoreRelease(messageI2C_LockSem);
//		osDelay(100);
//		osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
//	}
//	taskEXIT_CRITICAL();
	osSemaphoreRelease(messageI2C_LockHandle);
 8002280:	4b08      	ldr	r3, [pc, #32]	; (80022a4 <IMU_sendPacket+0x94>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4618      	mov	r0, r3
 8002286:	f00b ff7b 	bl	800e180 <osSemaphoreRelease>

	return (true);
 800228a:	2301      	movs	r3, #1
}
 800228c:	4618      	mov	r0, r3
 800228e:	3710      	adds	r7, #16
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	20027e30 	.word	0x20027e30
 8002298:	20000a54 	.word	0x20000a54
 800229c:	20027da4 	.word	0x20027da4
 80022a0:	20027e34 	.word	0x20027e34
 80022a4:	20027880 	.word	0x20027880
 80022a8:	20000006 	.word	0x20000006
 80022ac:	20027e74 	.word	0x20027e74

080022b0 <vPortSuppressTicksAndSleep>:
 *
 * @param: xExpectedIdleTime is given in number of FreeRTOS Ticks
 * @retval: None
 */
void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  /* Stop the SysTick  to avoid the interrupt to occur while in the critical section.
   * Otherwise, this will prevent the device to enter low power mode
   * At this time, an update of the systick will not be considered
   *
   */
  portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 80022b8:	4b1e      	ldr	r3, [pc, #120]	; (8002334 <vPortSuppressTicksAndSleep+0x84>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a1d      	ldr	r2, [pc, #116]	; (8002334 <vPortSuppressTicksAndSleep+0x84>)
 80022be:	f023 0301 	bic.w	r3, r3, #1
 80022c2:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022c4:	b672      	cpsid	i
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80022c6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80022ca:	f3bf 8f6f 	isb	sy
  __DSB();
  __ISB();

  /* If a context switch is pending or a task is waiting for the scheduler
        to be unsuspended then abandon the low power entry. */
  if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 80022ce:	f00e fcdf 	bl	8010c90 <eTaskConfirmSleepModeStatus>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d107      	bne.n	80022e8 <vPortSuppressTicksAndSleep+0x38>
  {
    /* Restart SysTick. */
    portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 80022d8:	4b16      	ldr	r3, [pc, #88]	; (8002334 <vPortSuppressTicksAndSleep+0x84>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a15      	ldr	r2, [pc, #84]	; (8002334 <vPortSuppressTicksAndSleep+0x84>)
 80022de:	f043 0301 	orr.w	r3, r3, #1
 80022e2:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80022e4:	b662      	cpsie	i
    portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

    /* Exit with interrUpts enabled. */
    __enable_irq();
  }
}
 80022e6:	e021      	b.n	800232c <vPortSuppressTicksAndSleep+0x7c>
    if (xExpectedIdleTime != (~0))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ee:	d002      	beq.n	80022f6 <vPortSuppressTicksAndSleep+0x46>
      LpTimerStart( xExpectedIdleTime );
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f000 f869 	bl	80023c8 <LpTimerStart>
    LpEnter( );
 80022f6:	f000 f8cb 	bl	8002490 <LpEnter>
    if (xExpectedIdleTime != (~0))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002300:	d005      	beq.n	800230e <vPortSuppressTicksAndSleep+0x5e>
      ulCompleteTickPeriods = LpGetElapsedTime( );
 8002302:	f000 f8cd 	bl	80024a0 <LpGetElapsedTime>
 8002306:	60f8      	str	r0, [r7, #12]
      vTaskStepTick( ulCompleteTickPeriods );
 8002308:	68f8      	ldr	r0, [r7, #12]
 800230a:	f00e f9db 	bl	80106c4 <vTaskStepTick>
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800230e:	4b0a      	ldr	r3, [pc, #40]	; (8002338 <vPortSuppressTicksAndSleep+0x88>)
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8002314:	4b07      	ldr	r3, [pc, #28]	; (8002334 <vPortSuppressTicksAndSleep+0x84>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a06      	ldr	r2, [pc, #24]	; (8002334 <vPortSuppressTicksAndSleep+0x84>)
 800231a:	f043 0301 	orr.w	r3, r3, #1
 800231e:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8002320:	4b06      	ldr	r3, [pc, #24]	; (800233c <vPortSuppressTicksAndSleep+0x8c>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a06      	ldr	r2, [pc, #24]	; (8002340 <vPortSuppressTicksAndSleep+0x90>)
 8002326:	3b01      	subs	r3, #1
 8002328:	6013      	str	r3, [r2, #0]
 800232a:	b662      	cpsie	i
}
 800232c:	bf00      	nop
 800232e:	3710      	adds	r7, #16
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	e000e010 	.word	0xe000e010
 8002338:	e000e018 	.word	0xe000e018
 800233c:	20000a7c 	.word	0x20000a7c
 8002340:	e000e014 	.word	0xe000e014

08002344 <vPortSetupTimerInterrupt>:
 * However, as at that time, it is not yet known whereas the low power mode that will be used is stop mode or
 * sleep mode, it is easier and simpler to go with a low power timer as soon as the tick need to be
 * suppressed.
 */
void vPortSetupTimerInterrupt( void )
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  LpTimerInit( );
 8002348:	f000 f828 	bl	800239c <LpTimerInit>

  /* Calculate the constants required to configure the tick interrupt. */
  ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 800234c:	4b0d      	ldr	r3, [pc, #52]	; (8002384 <vPortSetupTimerInterrupt+0x40>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a0d      	ldr	r2, [pc, #52]	; (8002388 <vPortSetupTimerInterrupt+0x44>)
 8002352:	fba2 2303 	umull	r2, r3, r2, r3
 8002356:	099b      	lsrs	r3, r3, #6
 8002358:	4a0c      	ldr	r2, [pc, #48]	; (800238c <vPortSetupTimerInterrupt+0x48>)
 800235a:	6013      	str	r3, [r2, #0]

  /* Stop and clear the SysTick. */
  portNVIC_SYSTICK_CTRL_REG = 0UL;
 800235c:	4b0c      	ldr	r3, [pc, #48]	; (8002390 <vPortSetupTimerInterrupt+0x4c>)
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]
  portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002362:	4b0c      	ldr	r3, [pc, #48]	; (8002394 <vPortSetupTimerInterrupt+0x50>)
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]

  /* Configure SysTick to interrupt at the requested rate. */
  portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002368:	4b06      	ldr	r3, [pc, #24]	; (8002384 <vPortSetupTimerInterrupt+0x40>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a06      	ldr	r2, [pc, #24]	; (8002388 <vPortSetupTimerInterrupt+0x44>)
 800236e:	fba2 2303 	umull	r2, r3, r2, r3
 8002372:	099b      	lsrs	r3, r3, #6
 8002374:	4a08      	ldr	r2, [pc, #32]	; (8002398 <vPortSetupTimerInterrupt+0x54>)
 8002376:	3b01      	subs	r3, #1
 8002378:	6013      	str	r3, [r2, #0]
  portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800237a:	4b05      	ldr	r3, [pc, #20]	; (8002390 <vPortSetupTimerInterrupt+0x4c>)
 800237c:	2207      	movs	r2, #7
 800237e:	601a      	str	r2, [r3, #0]
}
 8002380:	bf00      	nop
 8002382:	bd80      	pop	{r7, pc}
 8002384:	20000078 	.word	0x20000078
 8002388:	10624dd3 	.word	0x10624dd3
 800238c:	20000a7c 	.word	0x20000a7c
 8002390:	e000e010 	.word	0xe000e010
 8002394:	e000e018 	.word	0xe000e018
 8002398:	e000e014 	.word	0xe000e014

0800239c <LpTimerInit>:
 *
 * @param  None
 * @retval None
 */
static void LpTimerInit( void )
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  ( void ) HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(LpTimerContext.LpTimerFreeRTOS_Id), hw_ts_SingleShot, LpTimerCb);
 80023a0:	4b03      	ldr	r3, [pc, #12]	; (80023b0 <LpTimerInit+0x14>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	4903      	ldr	r1, [pc, #12]	; (80023b4 <LpTimerInit+0x18>)
 80023a6:	2000      	movs	r0, #0
 80023a8:	f001 f83a 	bl	8003420 <HW_TS_Create>

  return;
 80023ac:	bf00      	nop
}
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	080023b9 	.word	0x080023b9
 80023b4:	20000a84 	.word	0x20000a84

080023b8 <LpTimerCb>:
 *
 * @param  None
 * @retval None
 */
static void LpTimerCb( void )
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  /**
   * Nothing to be done
   */

  return;
 80023bc:	bf00      	nop
}
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
	...

080023c8 <LpTimerStart>:
 *
 * @param  time_to_sleep : Number of FreeRTOS ticks
 * @retval None
 */
static void LpTimerStart( uint32_t time_to_sleep )
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  /* Converts the number of FreeRTOS ticks into hw timer tick */
  if(time_to_sleep <=  0x10C6)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f241 02c6 	movw	r2, #4294	; 0x10c6
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d80c      	bhi.n	80023f4 <LpTimerStart+0x2c>
  {
    /**
     * ( time_to_sleep * 1000 * 1000 ) fit a 32bits word
     */
    time_to_sleep = (time_to_sleep * 1000 * 1000 );
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a28      	ldr	r2, [pc, #160]	; (8002480 <LpTimerStart+0xb8>)
 80023de:	fb02 f303 	mul.w	r3, r2, r3
 80023e2:	607b      	str	r3, [r7, #4]
    time_to_sleep = time_to_sleep / ( CFG_TS_TICK_VAL * configTICK_RATE_HZ );
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	099b      	lsrs	r3, r3, #6
 80023e8:	4a26      	ldr	r2, [pc, #152]	; (8002484 <LpTimerStart+0xbc>)
 80023ea:	fba2 2303 	umull	r2, r3, r2, r3
 80023ee:	095b      	lsrs	r3, r3, #5
 80023f0:	607b      	str	r3, [r7, #4]
 80023f2:	e034      	b.n	800245e <LpTimerStart+0x96>
  }
  else if(time_to_sleep <= 0x418937)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4a24      	ldr	r2, [pc, #144]	; (8002488 <LpTimerStart+0xc0>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d81b      	bhi.n	8002434 <LpTimerStart+0x6c>
  {
    /**
     * ( time_to_sleep * 1000 ) fit a 32bits word
     */
    time_to_sleep = (time_to_sleep * 1000);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002402:	fb02 f303 	mul.w	r3, r2, r3
 8002406:	607b      	str	r3, [r7, #4]
    time_to_sleep = time_to_sleep / ( CFG_TS_TICK_VAL * configTICK_RATE_HZ );
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	099b      	lsrs	r3, r3, #6
 800240c:	4a1d      	ldr	r2, [pc, #116]	; (8002484 <LpTimerStart+0xbc>)
 800240e:	fba2 2303 	umull	r2, r3, r2, r3
 8002412:	095b      	lsrs	r3, r3, #5
 8002414:	607b      	str	r3, [r7, #4]
    if(time_to_sleep <= 0x418937)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a1b      	ldr	r2, [pc, #108]	; (8002488 <LpTimerStart+0xc0>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d806      	bhi.n	800242c <LpTimerStart+0x64>
    {
      /**
       * ( time_to_sleep * 1000 ) fit a 32bits word
       */
      time_to_sleep = (time_to_sleep * 1000);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002424:	fb02 f303 	mul.w	r3, r2, r3
 8002428:	607b      	str	r3, [r7, #4]
 800242a:	e018      	b.n	800245e <LpTimerStart+0x96>
    }
    else
    {
      time_to_sleep = (~0); /* Max value */
 800242c:	f04f 33ff 	mov.w	r3, #4294967295
 8002430:	607b      	str	r3, [r7, #4]
 8002432:	e014      	b.n	800245e <LpTimerStart+0x96>
    }
  }
  else
  {
    time_to_sleep = time_to_sleep / ( CFG_TS_TICK_VAL * configTICK_RATE_HZ );
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	099b      	lsrs	r3, r3, #6
 8002438:	4a12      	ldr	r2, [pc, #72]	; (8002484 <LpTimerStart+0xbc>)
 800243a:	fba2 2303 	umull	r2, r3, r2, r3
 800243e:	095b      	lsrs	r3, r3, #5
 8002440:	607b      	str	r3, [r7, #4]
    if(time_to_sleep <= 0x10C6)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f241 02c6 	movw	r2, #4294	; 0x10c6
 8002448:	4293      	cmp	r3, r2
 800244a:	d805      	bhi.n	8002458 <LpTimerStart+0x90>
    {
      /**
       * ( time_to_sleep * 1000 * 1000 ) fit a 32bits word
       */
      time_to_sleep = (time_to_sleep * 1000 * 1000 );
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4a0c      	ldr	r2, [pc, #48]	; (8002480 <LpTimerStart+0xb8>)
 8002450:	fb02 f303 	mul.w	r3, r2, r3
 8002454:	607b      	str	r3, [r7, #4]
 8002456:	e002      	b.n	800245e <LpTimerStart+0x96>
    }
    else
    {
      time_to_sleep = (~0); /* Max value */
 8002458:	f04f 33ff 	mov.w	r3, #4294967295
 800245c:	607b      	str	r3, [r7, #4]
    }
  }

  HW_TS_Start(LpTimerContext.LpTimerFreeRTOS_Id, time_to_sleep);
 800245e:	4b0b      	ldr	r3, [pc, #44]	; (800248c <LpTimerStart+0xc4>)
 8002460:	791b      	ldrb	r3, [r3, #4]
 8002462:	6879      	ldr	r1, [r7, #4]
 8002464:	4618      	mov	r0, r3
 8002466:	f001 f8db 	bl	8003620 <HW_TS_Start>
   * There might be other timers already running in the timer server that may elapse
   * before this one.
   * Store how long before the next event so that on wakeup, it will be possible to calculate
   * how long the tick has been suppressed
   */
  LpTimerContext.LpTimeLeftOnEntry = HW_TS_RTC_ReadLeftTicksToCount( );
 800246a:	f001 f95f 	bl	800372c <HW_TS_RTC_ReadLeftTicksToCount>
 800246e:	4603      	mov	r3, r0
 8002470:	461a      	mov	r2, r3
 8002472:	4b06      	ldr	r3, [pc, #24]	; (800248c <LpTimerStart+0xc4>)
 8002474:	601a      	str	r2, [r3, #0]

  return;
 8002476:	bf00      	nop
}
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	000f4240 	.word	0x000f4240
 8002484:	0113094d 	.word	0x0113094d
 8002488:	00418937 	.word	0x00418937
 800248c:	20000a80 	.word	0x20000a80

08002490 <LpEnter>:
 *
 * @param  None
 * @retval None
 */
static void LpEnter( void )
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif
  return;
 8002494:	bf00      	nop
}
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
	...

080024a0 <LpGetElapsedTime>:
 *
 * @param  None
 * @retval The number of tick rate (FreeRTOS tick)
 */
static uint32_t LpGetElapsedTime( void )
{
 80024a0:	b590      	push	{r4, r7, lr}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
  uint64_t return_value;

  return_value = (configTICK_RATE_HZ) * (CFG_TS_TICK_VAL) * (uint64_t)(LpTimerContext.LpTimeLeftOnEntry - HW_TS_RTC_ReadLeftTicksToCount( ));
 80024a6:	4b16      	ldr	r3, [pc, #88]	; (8002500 <LpGetElapsedTime+0x60>)
 80024a8:	681c      	ldr	r4, [r3, #0]
 80024aa:	f001 f93f 	bl	800372c <HW_TS_RTC_ReadLeftTicksToCount>
 80024ae:	4603      	mov	r3, r0
 80024b0:	1ae3      	subs	r3, r4, r3
 80024b2:	f04f 0400 	mov.w	r4, #0
 80024b6:	4a13      	ldr	r2, [pc, #76]	; (8002504 <LpGetElapsedTime+0x64>)
 80024b8:	fb02 f104 	mul.w	r1, r2, r4
 80024bc:	2200      	movs	r2, #0
 80024be:	fb02 f203 	mul.w	r2, r2, r3
 80024c2:	440a      	add	r2, r1
 80024c4:	490f      	ldr	r1, [pc, #60]	; (8002504 <LpGetElapsedTime+0x64>)
 80024c6:	fba3 3401 	umull	r3, r4, r3, r1
 80024ca:	4422      	add	r2, r4
 80024cc:	4614      	mov	r4, r2
 80024ce:	e9c7 3400 	strd	r3, r4, [r7]
 80024d2:	e9c7 3400 	strd	r3, r4, [r7]
  return_value = return_value / (1000 * 1000);
 80024d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80024da:	4a0b      	ldr	r2, [pc, #44]	; (8002508 <LpGetElapsedTime+0x68>)
 80024dc:	f04f 0300 	mov.w	r3, #0
 80024e0:	f7fe fb14 	bl	8000b0c <__aeabi_uldivmod>
 80024e4:	4603      	mov	r3, r0
 80024e6:	460c      	mov	r4, r1
 80024e8:	e9c7 3400 	strd	r3, r4, [r7]
   * The system may have been out from another reason than the timer
   * Stop the timer after the elapsed time is calculated other wise, HW_TS_RTC_ReadLeftTicksToCount()
   * may return 0xFFFF ( TIMER LIST EMPTY )
   * It does not hurt stopping a timer that exists but is not running.
   */
  HW_TS_Stop(LpTimerContext.LpTimerFreeRTOS_Id);
 80024ec:	4b04      	ldr	r3, [pc, #16]	; (8002500 <LpGetElapsedTime+0x60>)
 80024ee:	791b      	ldrb	r3, [r3, #4]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f001 f80b 	bl	800350c <HW_TS_Stop>

  return (uint32_t)return_value;
 80024f6:	683b      	ldr	r3, [r7, #0]
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd90      	pop	{r4, r7, pc}
 8002500:	20000a80 	.word	0x20000a80
 8002504:	00077240 	.word	0x00077240
 8002508:	000f4240 	.word	0x000f4240

0800250c <_GeometryBuilder>:

BaseStationGeometryDef bs_1 = {{1.738303, 2.430314,  0.781285},
							  {0.285992, -0.253563, 0.924075, 0.040683, 0.966697, 0.252668, -0.957368, -0.034667, 0.286784}};
SensorLocalGeometry s_loc_geo = {0, {0.0, 0.0, 0.0}};

void _GeometryBuilder(GeometryBuilder *self){
 800250c:	b4b0      	push	{r4, r5, r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]

	self->base_stations_[0] = bs_0;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4a12      	ldr	r2, [pc, #72]	; (8002560 <_GeometryBuilder+0x54>)
 8002518:	461c      	mov	r4, r3
 800251a:	4615      	mov	r5, r2
 800251c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800251e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002520:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002522:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002524:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002528:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	self->base_stations_[1] = bs_1;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4a0d      	ldr	r2, [pc, #52]	; (8002564 <_GeometryBuilder+0x58>)
 8002530:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8002534:	4615      	mov	r5, r2
 8002536:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002538:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800253a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800253c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800253e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002542:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	self->sensors[0] = s_loc_geo;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a07      	ldr	r2, [pc, #28]	; (8002568 <_GeometryBuilder+0x5c>)
 800254a:	f103 0460 	add.w	r4, r3, #96	; 0x60
 800254e:	4613      	mov	r3, r2
 8002550:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002552:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002556:	bf00      	nop
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	bcb0      	pop	{r4, r5, r7}
 800255e:	4770      	bx	lr
 8002560:	20000008 	.word	0x20000008
 8002564:	20000038 	.word	0x20000038
 8002568:	20000a88 	.word	0x20000a88

0800256c <consume_angles>:

void consume_angles(GeometryBuilder * self, const SensorAnglesFrame * f) {
 800256c:	b5b0      	push	{r4, r5, r7, lr}
 800256e:	b096      	sub	sp, #88	; 0x58
 8002570:	af02      	add	r7, sp, #8
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
    // First 2 angles - x, y of station B; second 2 angles - x, y of station C.
    // Coordinate system: Y - Up;  X ->  Z v  (to the viewer)
    // Station 'looks' to inverse Z axis (vector 0;0;-1).
    if (f->fix_level >= kCycleSynced) {
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	2bc7      	cmp	r3, #199	; 0xc7
 800257c:	f340 8093 	ble.w	80026a6 <consume_angles+0x13a>
        SensorLocalGeometry *sens_def = &self->sensors[0];
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	3360      	adds	r3, #96	; 0x60
 8002584:	643b      	str	r3, [r7, #64]	; 0x40
        SensorAngles *sens = &f->sensors[sens_def->input_idx];
 8002586:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	015b      	lsls	r3, r3, #5
 800258c:	3310      	adds	r3, #16
 800258e:	683a      	ldr	r2, [r7, #0]
 8002590:	4413      	add	r3, r2
 8002592:	63fb      	str	r3, [r7, #60]	; 0x3c

        // Check angles are fresh enough.
        uint32_t max_stale = 0;
 8002594:	2300      	movs	r3, #0
 8002596:	64fb      	str	r3, [r7, #76]	; 0x4c
        for (int i = 0; i < NUM_CYCLE_PHASES; i++){
 8002598:	2300      	movs	r3, #0
 800259a:	64bb      	str	r3, [r7, #72]	; 0x48
 800259c:	e011      	b.n	80025c2 <consume_angles+0x56>
        	//Get time since we last updated the angles for phase i
        	int stale = f->cycle_idx - sens->updated_cycles[i];
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	689a      	ldr	r2, [r3, #8]
 80025a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025a4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80025a6:	3104      	adds	r1, #4
 80025a8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	63bb      	str	r3, [r7, #56]	; 0x38
        	max_stale = (stale > max_stale) ? stale : max_stale;
 80025b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80025b4:	4293      	cmp	r3, r2
 80025b6:	bf38      	it	cc
 80025b8:	4613      	movcc	r3, r2
 80025ba:	64fb      	str	r3, [r7, #76]	; 0x4c
        for (int i = 0; i < NUM_CYCLE_PHASES; i++){
 80025bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025be:	3301      	adds	r3, #1
 80025c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80025c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025c4:	2b03      	cmp	r3, #3
 80025c6:	ddea      	ble.n	800259e <consume_angles+0x32>
        }

        if (max_stale < NUM_CYCLE_PHASES * 3) {  // We tolerate stale angles up to 2 cycles old.
 80025c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025ca:	2b0b      	cmp	r3, #11
 80025cc:	d86b      	bhi.n	80026a6 <consume_angles+0x13a>
            float ray1[VEC3D_SIZE], ray2[VEC3D_SIZE], origin1[VEC3D_SIZE], origin2[VEC3D_SIZE];
            calc_ray_vec(&self->base_stations_[0], sens->angles[0], sens->angles[1], ray1, origin1);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025d2:	edd3 7a00 	vldr	s15, [r3]
 80025d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025d8:	ed93 7a01 	vldr	s14, [r3, #4]
 80025dc:	f107 0214 	add.w	r2, r7, #20
 80025e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025e4:	4619      	mov	r1, r3
 80025e6:	eef0 0a47 	vmov.f32	s1, s14
 80025ea:	eeb0 0a67 	vmov.f32	s0, s15
 80025ee:	f000 f8e5 	bl	80027bc <calc_ray_vec>
            calc_ray_vec(&self->base_stations_[1], sens->angles[2], sens->angles[3], ray2, origin2);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80025f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025fa:	edd3 7a02 	vldr	s15, [r3, #8]
 80025fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002600:	ed93 7a03 	vldr	s14, [r3, #12]
 8002604:	f107 0208 	add.w	r2, r7, #8
 8002608:	f107 0320 	add.w	r3, r7, #32
 800260c:	4619      	mov	r1, r3
 800260e:	eef0 0a47 	vmov.f32	s1, s14
 8002612:	eeb0 0a67 	vmov.f32	s0, s15
 8002616:	f000 f8d1 	bl	80027bc <calc_ray_vec>

            intersect_lines(origin1, ray1, origin2, ray2, self->vive_vars_.pos, &self->vive_vars_.pos_delta);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	3370      	adds	r3, #112	; 0x70
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	327c      	adds	r2, #124	; 0x7c
 8002622:	f107 0520 	add.w	r5, r7, #32
 8002626:	f107 0408 	add.w	r4, r7, #8
 800262a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800262e:	f107 0014 	add.w	r0, r7, #20
 8002632:	9201      	str	r2, [sp, #4]
 8002634:	9300      	str	r3, [sp, #0]
 8002636:	462b      	mov	r3, r5
 8002638:	4622      	mov	r2, r4
 800263a:	f000 f945 	bl	80028c8 <intersect_lines>

            // Translate object position depending on the position of sensor relative to object.
            for (int i = 0; i < VEC3D_SIZE; i++){
 800263e:	2300      	movs	r3, #0
 8002640:	647b      	str	r3, [r7, #68]	; 0x44
 8002642:	e019      	b.n	8002678 <consume_angles+0x10c>
            	self->vive_vars_.pos[i] -= sens_def->pos[i];
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002648:	331c      	adds	r3, #28
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4413      	add	r3, r2
 800264e:	ed93 7a00 	vldr	s14, [r3]
 8002652:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002654:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	4413      	add	r3, r2
 800265a:	3304      	adds	r3, #4
 800265c:	edd3 7a00 	vldr	s15, [r3]
 8002660:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002668:	331c      	adds	r3, #28
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	4413      	add	r3, r2
 800266e:	edc3 7a00 	vstr	s15, [r3]
            for (int i = 0; i < VEC3D_SIZE; i++){
 8002672:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002674:	3301      	adds	r3, #1
 8002676:	647b      	str	r3, [r7, #68]	; 0x44
 8002678:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800267a:	2b02      	cmp	r3, #2
 800267c:	dde2      	ble.n	8002644 <consume_angles+0xd8>
            }

            self->vive_vars_.time_ms = HAL_GetTick();
 800267e:	f003 fc07 	bl	8005e90 <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

            //Put VIVE measurements in the message queue
            osMessageQueuePut(viveQueueHandle, (void *) &self->vive_vars_, NULL, 0);
 800268a:	4b09      	ldr	r3, [pc, #36]	; (80026b0 <consume_angles+0x144>)
 800268c:	6818      	ldr	r0, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f103 0170 	add.w	r1, r3, #112	; 0x70
 8002694:	2300      	movs	r3, #0
 8002696:	2200      	movs	r2, #0
 8002698:	f00b fe50 	bl	800e33c <osMessageQueuePut>
            // tell timer function that localization is complete
			osSemaphoreRelease(locCompleteHandle);
 800269c:	4b05      	ldr	r3, [pc, #20]	; (80026b4 <consume_angles+0x148>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f00b fd6d 	bl	800e180 <osSemaphoreRelease>
        else {
            // Angles too stale - cannot calculate position anymore.

        }
    }
}
 80026a6:	bf00      	nop
 80026a8:	3750      	adds	r7, #80	; 0x50
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bdb0      	pop	{r4, r5, r7, pc}
 80026ae:	bf00      	nop
 80026b0:	20027784 	.word	0x20027784
 80026b4:	20027cbc 	.word	0x20027cbc

080026b8 <vec_cross_product>:
    // TODO: Make compatible with multiple geometry objects.
    //set_led_state(self->pos_.fix_level >= kStaleFix ? kFixFound : kNoFix);
}
*/

void vec_cross_product(float *a, float *b, float *res) {
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
    res[0] = a[1] * b[2] - a[2] * b[1];
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	3304      	adds	r3, #4
 80026c8:	ed93 7a00 	vldr	s14, [r3]
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	3308      	adds	r3, #8
 80026d0:	edd3 7a00 	vldr	s15, [r3]
 80026d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	3308      	adds	r3, #8
 80026dc:	edd3 6a00 	vldr	s13, [r3]
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	3304      	adds	r3, #4
 80026e4:	edd3 7a00 	vldr	s15, [r3]
 80026e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	edc3 7a00 	vstr	s15, [r3]
    res[1] = a[2] * b[0] - a[0] * b[2];
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	3308      	adds	r3, #8
 80026fa:	ed93 7a00 	vldr	s14, [r3]
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	edd3 7a00 	vldr	s15, [r3]
 8002704:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	edd3 6a00 	vldr	s13, [r3]
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	3308      	adds	r3, #8
 8002712:	edd3 7a00 	vldr	s15, [r3]
 8002716:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	3304      	adds	r3, #4
 800271e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002722:	edc3 7a00 	vstr	s15, [r3]
    res[2] = a[0] * b[1] - a[1] * b[0];
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	ed93 7a00 	vldr	s14, [r3]
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	3304      	adds	r3, #4
 8002730:	edd3 7a00 	vldr	s15, [r3]
 8002734:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	3304      	adds	r3, #4
 800273c:	edd3 6a00 	vldr	s13, [r3]
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	edd3 7a00 	vldr	s15, [r3]
 8002746:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	3308      	adds	r3, #8
 800274e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002752:	edc3 7a00 	vstr	s15, [r3]
}
 8002756:	bf00      	nop
 8002758:	3714      	adds	r7, #20
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr

08002762 <vec_length>:

float vec_length(float *vec) {
 8002762:	b580      	push	{r7, lr}
 8002764:	b086      	sub	sp, #24
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
    float pow, res;

    arm_power_f32(vec, VEC3D_SIZE, &pow); // returns sum of squares
 800276a:	f107 030c 	add.w	r3, r7, #12
 800276e:	461a      	mov	r2, r3
 8002770:	2103      	movs	r1, #3
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f012 fa0a 	bl	8014b8c <arm_power_f32>
    arm_sqrt_f32(pow, &res);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	617b      	str	r3, [r7, #20]
 800277c:	f107 0308 	add.w	r3, r7, #8
 8002780:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8002782:	edd7 7a05 	vldr	s15, [r7, #20]
 8002786:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800278a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800278e:	db09      	blt.n	80027a4 <vec_length+0x42>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 8002790:	ed97 0a05 	vldr	s0, [r7, #20]
 8002794:	f012 fe6e 	bl	8015474 <sqrtf>
 8002798:	eef0 7a40 	vmov.f32	s15, s0
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	edc3 7a00 	vstr	s15, [r3]
 80027a2:	e003      	b.n	80027ac <vec_length+0x4a>

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	f04f 0200 	mov.w	r2, #0
 80027aa:	601a      	str	r2, [r3, #0]

    return res;
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	ee07 3a90 	vmov	s15, r3
}
 80027b2:	eeb0 0a67 	vmov.f32	s0, s15
 80027b6:	3718      	adds	r7, #24
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <calc_ray_vec>:

void calc_ray_vec(const BaseStationGeometryDef * bs, float angle1, float angle2, float *res, float *origin) {
 80027bc:	b580      	push	{r7, lr}
 80027be:	b09a      	sub	sp, #104	; 0x68
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6178      	str	r0, [r7, #20]
 80027c4:	ed87 0a04 	vstr	s0, [r7, #16]
 80027c8:	edc7 0a03 	vstr	s1, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
    float a[VEC3D_SIZE] = {arm_cos_f32(angle1), 0, -arm_sin_f32(angle1)};  // Normal vector to X plane
 80027d0:	ed97 0a04 	vldr	s0, [r7, #16]
 80027d4:	f012 fb06 	bl	8014de4 <arm_cos_f32>
 80027d8:	eef0 7a40 	vmov.f32	s15, s0
 80027dc:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 80027e0:	f04f 0300 	mov.w	r3, #0
 80027e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027e6:	ed97 0a04 	vldr	s0, [r7, #16]
 80027ea:	f012 fab5 	bl	8014d58 <arm_sin_f32>
 80027ee:	eef0 7a40 	vmov.f32	s15, s0
 80027f2:	eef1 7a67 	vneg.f32	s15, s15
 80027f6:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    float b[VEC3D_SIZE] = {0, arm_cos_f32(angle2), arm_sin_f32(angle2)};   // Normal vector to Y plane
 80027fa:	f04f 0300 	mov.w	r3, #0
 80027fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002800:	ed97 0a03 	vldr	s0, [r7, #12]
 8002804:	f012 faee 	bl	8014de4 <arm_cos_f32>
 8002808:	eef0 7a40 	vmov.f32	s15, s0
 800280c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
 8002810:	ed97 0a03 	vldr	s0, [r7, #12]
 8002814:	f012 faa0 	bl	8014d58 <arm_sin_f32>
 8002818:	eef0 7a40 	vmov.f32	s15, s0
 800281c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    float ray[VEC3D_SIZE] = {};
 8002820:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002824:	2200      	movs	r2, #0
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	605a      	str	r2, [r3, #4]
 800282a:	609a      	str	r2, [r3, #8]
    vec_cross_product(b, a, ray); // Intersection of two planes -> ray vector.
 800282c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002830:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002834:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff ff3d 	bl	80026b8 <vec_cross_product>
    float len = vec_length(ray);
 800283e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff ff8d 	bl	8002762 <vec_length>
 8002848:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
    arm_scale_f32(ray, 1/len, ray, VEC3D_SIZE); // Normalize ray length.
 800284c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002850:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002854:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002858:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800285c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002860:	2203      	movs	r2, #3
 8002862:	eeb0 0a66 	vmov.f32	s0, s13
 8002866:	4618      	mov	r0, r3
 8002868:	f012 fb60 	bl	8014f2c <arm_scale_f32>

    arm_matrix_instance_f32 source_rotation_matrix = {3, 3, (const float*) bs->mat};
 800286c:	2303      	movs	r3, #3
 800286e:	873b      	strh	r3, [r7, #56]	; 0x38
 8002870:	2303      	movs	r3, #3
 8002872:	877b      	strh	r3, [r7, #58]	; 0x3a
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	330c      	adds	r3, #12
 8002878:	63fb      	str	r3, [r7, #60]	; 0x3c
    arm_matrix_instance_f32 ray_vec = {3, 1, ray};
 800287a:	2303      	movs	r3, #3
 800287c:	863b      	strh	r3, [r7, #48]	; 0x30
 800287e:	2301      	movs	r3, #1
 8002880:	867b      	strh	r3, [r7, #50]	; 0x32
 8002882:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002886:	637b      	str	r3, [r7, #52]	; 0x34
    arm_matrix_instance_f32 ray_rotated_vec = {3, 1, res};
 8002888:	2303      	movs	r3, #3
 800288a:	853b      	strh	r3, [r7, #40]	; 0x28
 800288c:	2301      	movs	r3, #1
 800288e:	857b      	strh	r3, [r7, #42]	; 0x2a
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	62fb      	str	r3, [r7, #44]	; 0x2c
    arm_mat_mult_f32(&source_rotation_matrix, &ray_vec, &ray_rotated_vec);
 8002894:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002898:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800289c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80028a0:	4618      	mov	r0, r3
 80028a2:	f012 f9b9 	bl	8014c18 <arm_mat_mult_f32>

    // TODO: Make geometry adjustments within base station.
    float rotated_origin_delta[VEC3D_SIZE] = {};
 80028a6:	f107 031c 	add.w	r3, r7, #28
 80028aa:	2200      	movs	r2, #0
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	605a      	str	r2, [r3, #4]
 80028b0:	609a      	str	r2, [r3, #8]
    //vec3d base_origin_delta = {-0.025f, -0.025f, 0.f};  // Rotors are slightly off center in base station.
    // arm_matrix_instance_f32 origin_vec = {3, 1, base_origin_delta};
    // arm_matrix_instance_f32 origin_rotated_vec = {3, 1, rotated_origin_delta};
    // arm_mat_mult_f32(&source_rotation_matrix, &origin_vec, &origin_rotated_vec);
    arm_add_f32((const float *) bs->origin, rotated_origin_delta, origin, VEC3D_SIZE);
 80028b2:	6978      	ldr	r0, [r7, #20]
 80028b4:	f107 011c 	add.w	r1, r7, #28
 80028b8:	2303      	movs	r3, #3
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	f012 fbd2 	bl	8015064 <arm_add_f32>
}
 80028c0:	bf00      	nop
 80028c2:	3768      	adds	r7, #104	; 0x68
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <intersect_lines>:


uint8_t intersect_lines(float *orig1, float *vec1, float *orig2, float *vec2, float *res, float *dist) {
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b098      	sub	sp, #96	; 0x60
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
 80028d4:	603b      	str	r3, [r7, #0]
    // Algorithm: http://geomalgorithms.com/a07-_distance.html#Distance-between-Lines

    float w0[VEC3D_SIZE] = {};
 80028d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80028da:	2200      	movs	r2, #0
 80028dc:	601a      	str	r2, [r3, #0]
 80028de:	605a      	str	r2, [r3, #4]
 80028e0:	609a      	str	r2, [r3, #8]
    arm_sub_f32((const float *)orig1, (const float *)orig2, w0, VEC3D_SIZE);
 80028e2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80028e6:	2303      	movs	r3, #3
 80028e8:	6879      	ldr	r1, [r7, #4]
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f012 fac4 	bl	8014e78 <arm_sub_f32>

    float a, b, c, d, e;
    arm_dot_prod_f32((const float *)vec1, (const float *)vec1, VEC3D_SIZE, &a);
 80028f0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80028f4:	2203      	movs	r2, #3
 80028f6:	68b9      	ldr	r1, [r7, #8]
 80028f8:	68b8      	ldr	r0, [r7, #8]
 80028fa:	f012 fb5b 	bl	8014fb4 <arm_dot_prod_f32>
    arm_dot_prod_f32((const float *)vec1, (const float *)vec2, VEC3D_SIZE, &b);
 80028fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002902:	2203      	movs	r2, #3
 8002904:	6839      	ldr	r1, [r7, #0]
 8002906:	68b8      	ldr	r0, [r7, #8]
 8002908:	f012 fb54 	bl	8014fb4 <arm_dot_prod_f32>
    arm_dot_prod_f32((const float *)vec2, (const float *)vec2, VEC3D_SIZE, &c);
 800290c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002910:	2203      	movs	r2, #3
 8002912:	6839      	ldr	r1, [r7, #0]
 8002914:	6838      	ldr	r0, [r7, #0]
 8002916:	f012 fb4d 	bl	8014fb4 <arm_dot_prod_f32>
    arm_dot_prod_f32((const float *)vec1, w0, VEC3D_SIZE, &d);
 800291a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800291e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002922:	2203      	movs	r2, #3
 8002924:	68b8      	ldr	r0, [r7, #8]
 8002926:	f012 fb45 	bl	8014fb4 <arm_dot_prod_f32>
    arm_dot_prod_f32((const float *)vec2, w0, VEC3D_SIZE, &e);
 800292a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800292e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002932:	2203      	movs	r2, #3
 8002934:	6838      	ldr	r0, [r7, #0]
 8002936:	f012 fb3d 	bl	8014fb4 <arm_dot_prod_f32>

    float denom = a * c - b * b;
 800293a:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800293e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002942:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002946:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 800294a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800294e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002952:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002956:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    if (fabs(denom) < 1e-5f)
 800295a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800295e:	eef0 7ae7 	vabs.f32	s15, s15
 8002962:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8002a80 <intersect_lines+0x1b8>
 8002966:	eef4 7ac7 	vcmpe.f32	s15, s14
 800296a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800296e:	d501      	bpl.n	8002974 <intersect_lines+0xac>
        return 0;
 8002970:	2300      	movs	r3, #0
 8002972:	e081      	b.n	8002a78 <intersect_lines+0x1b0>

    // Closest point to 2nd line on 1st line
    float t1 = (b * e - c * d) / denom;
 8002974:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002978:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800297c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002980:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8002984:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002988:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800298c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002990:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002994:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002998:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    float pt1[VEC3D_SIZE] = {};
 800299c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]
 80029a4:	605a      	str	r2, [r3, #4]
 80029a6:	609a      	str	r2, [r3, #8]
    arm_scale_f32((const float *)vec1, t1, pt1, VEC3D_SIZE);
 80029a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029ac:	2203      	movs	r2, #3
 80029ae:	4619      	mov	r1, r3
 80029b0:	ed97 0a16 	vldr	s0, [r7, #88]	; 0x58
 80029b4:	68b8      	ldr	r0, [r7, #8]
 80029b6:	f012 fab9 	bl	8014f2c <arm_scale_f32>
    arm_add_f32(pt1, (const float *)orig1, pt1, VEC3D_SIZE);
 80029ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80029be:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80029c2:	2303      	movs	r3, #3
 80029c4:	68f9      	ldr	r1, [r7, #12]
 80029c6:	f012 fb4d 	bl	8015064 <arm_add_f32>

    // Closest point to 1st line on 2nd line
    float t2 = (a * e - b * d) / denom;
 80029ca:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80029ce:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80029d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029d6:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 80029da:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80029de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029e2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80029e6:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80029ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029ee:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    float pt2[VEC3D_SIZE] = {};
 80029f2:	f107 031c 	add.w	r3, r7, #28
 80029f6:	2200      	movs	r2, #0
 80029f8:	601a      	str	r2, [r3, #0]
 80029fa:	605a      	str	r2, [r3, #4]
 80029fc:	609a      	str	r2, [r3, #8]
    arm_scale_f32((const float *)vec2, t2, pt2, VEC3D_SIZE);
 80029fe:	f107 031c 	add.w	r3, r7, #28
 8002a02:	2203      	movs	r2, #3
 8002a04:	4619      	mov	r1, r3
 8002a06:	ed97 0a15 	vldr	s0, [r7, #84]	; 0x54
 8002a0a:	6838      	ldr	r0, [r7, #0]
 8002a0c:	f012 fa8e 	bl	8014f2c <arm_scale_f32>
    arm_add_f32(pt2, (const float *)orig2, pt2, VEC3D_SIZE);
 8002a10:	f107 021c 	add.w	r2, r7, #28
 8002a14:	f107 001c 	add.w	r0, r7, #28
 8002a18:	2303      	movs	r3, #3
 8002a1a:	6879      	ldr	r1, [r7, #4]
 8002a1c:	f012 fb22 	bl	8015064 <arm_add_f32>

    // Result is in the middle
    float tmp[VEC3D_SIZE] = {};
 8002a20:	f107 0310 	add.w	r3, r7, #16
 8002a24:	2200      	movs	r2, #0
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	605a      	str	r2, [r3, #4]
 8002a2a:	609a      	str	r2, [r3, #8]
    arm_add_f32(pt1, pt2, tmp, VEC3D_SIZE);
 8002a2c:	f107 0210 	add.w	r2, r7, #16
 8002a30:	f107 011c 	add.w	r1, r7, #28
 8002a34:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002a38:	2303      	movs	r3, #3
 8002a3a:	f012 fb13 	bl	8015064 <arm_add_f32>
    arm_scale_f32(tmp, 0.5f, res, VEC3D_SIZE);
 8002a3e:	f107 0310 	add.w	r3, r7, #16
 8002a42:	2203      	movs	r2, #3
 8002a44:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002a46:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f012 fa6e 	bl	8014f2c <arm_scale_f32>

    // Dist is distance between pt1 and pt2
    arm_sub_f32(pt1, pt2, tmp, VEC3D_SIZE);
 8002a50:	f107 0210 	add.w	r2, r7, #16
 8002a54:	f107 011c 	add.w	r1, r7, #28
 8002a58:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	f012 fa0b 	bl	8014e78 <arm_sub_f32>
    *dist = vec_length(tmp);
 8002a62:	f107 0310 	add.w	r3, r7, #16
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7ff fe7b 	bl	8002762 <vec_length>
 8002a6c:	eef0 7a40 	vmov.f32	s15, s0
 8002a70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a72:	edc3 7a00 	vstr	s15, [r3]

    return 1;
 8002a76:	2301      	movs	r3, #1
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3760      	adds	r7, #96	; 0x60
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	3727c5ac 	.word	0x3727c5ac

08002a84 <LL_AHB2_GRP1_EnableClock>:
{
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002a8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002a9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aa0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
}
 8002aaa:	bf00      	nop
 8002aac:	3714      	adds	r7, #20
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
	...

08002ab8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b086      	sub	sp, #24
 8002abc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002abe:	1d3b      	adds	r3, r7, #4
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	605a      	str	r2, [r3, #4]
 8002ac6:	609a      	str	r2, [r3, #8]
 8002ac8:	60da      	str	r2, [r3, #12]
 8002aca:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002acc:	2004      	movs	r0, #4
 8002ace:	f7ff ffd9 	bl	8002a84 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ad2:	2080      	movs	r0, #128	; 0x80
 8002ad4:	f7ff ffd6 	bl	8002a84 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ad8:	2002      	movs	r0, #2
 8002ada:	f7ff ffd3 	bl	8002a84 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ade:	2001      	movs	r0, #1
 8002ae0:	f7ff ffd0 	bl	8002a84 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ae4:	2010      	movs	r0, #16
 8002ae6:	f7ff ffcd 	bl	8002a84 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002aea:	2308      	movs	r3, #8
 8002aec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002aee:	2303      	movs	r3, #3
 8002af0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af2:	2300      	movs	r3, #0
 8002af4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002af6:	1d3b      	adds	r3, r7, #4
 8002af8:	4619      	mov	r1, r3
 8002afa:	4829      	ldr	r0, [pc, #164]	; (8002ba0 <MX_GPIO_Init+0xe8>)
 8002afc:	f005 fa82 	bl	8008004 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 PB0 PB1 
                           PB4 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0|GPIO_PIN_1 
 8002b00:	f240 33f3 	movw	r3, #1011	; 0x3f3
 8002b04:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b06:	2303      	movs	r3, #3
 8002b08:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b0e:	1d3b      	adds	r3, r7, #4
 8002b10:	4619      	mov	r1, r3
 8002b12:	4824      	ldr	r0, [pc, #144]	; (8002ba4 <MX_GPIO_Init+0xec>)
 8002b14:	f005 fa76 	bl	8008004 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 PA6 
                           PA7 PA8 PA11 PA12 
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6 
 8002b18:	f649 13dc 	movw	r3, #39388	; 0x99dc
 8002b1c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12 
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b22:	2300      	movs	r3, #0
 8002b24:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b26:	1d3b      	adds	r3, r7, #4
 8002b28:	4619      	mov	r1, r3
 8002b2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b2e:	f005 fa69 	bl	8008004 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8002b32:	2320      	movs	r3, #32
 8002b34:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002b36:	4b1c      	ldr	r3, [pc, #112]	; (8002ba8 <MX_GPIO_Init+0xf0>)
 8002b38:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8002b3e:	1d3b      	adds	r3, r7, #4
 8002b40:	4619      	mov	r1, r3
 8002b42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b46:	f005 fa5d 	bl	8008004 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXPANSION_INT_Pin;
 8002b4a:	2304      	movs	r3, #4
 8002b4c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b4e:	4b17      	ldr	r3, [pc, #92]	; (8002bac <MX_GPIO_Init+0xf4>)
 8002b50:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b52:	2300      	movs	r3, #0
 8002b54:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(EXPANSION_INT_GPIO_Port, &GPIO_InitStruct);
 8002b56:	1d3b      	adds	r3, r7, #4
 8002b58:	4619      	mov	r1, r3
 8002b5a:	4812      	ldr	r0, [pc, #72]	; (8002ba4 <MX_GPIO_Init+0xec>)
 8002b5c:	f005 fa52 	bl	8008004 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002b60:	2310      	movs	r3, #16
 8002b62:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b64:	2303      	movs	r3, #3
 8002b66:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b6c:	1d3b      	adds	r3, r7, #4
 8002b6e:	4619      	mov	r1, r3
 8002b70:	480f      	ldr	r0, [pc, #60]	; (8002bb0 <MX_GPIO_Init+0xf8>)
 8002b72:	f005 fa47 	bl	8008004 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8002b76:	2200      	movs	r2, #0
 8002b78:	2105      	movs	r1, #5
 8002b7a:	2008      	movs	r0, #8
 8002b7c:	f004 febb 	bl	80078f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002b80:	2008      	movs	r0, #8
 8002b82:	f004 fed2 	bl	800792a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8002b86:	2200      	movs	r2, #0
 8002b88:	2105      	movs	r1, #5
 8002b8a:	2017      	movs	r0, #23
 8002b8c:	f004 feb3 	bl	80078f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002b90:	2017      	movs	r0, #23
 8002b92:	f004 feca 	bl	800792a <HAL_NVIC_EnableIRQ>

}
 8002b96:	bf00      	nop
 8002b98:	3718      	adds	r7, #24
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	48001c00 	.word	0x48001c00
 8002ba4:	48000400 	.word	0x48000400
 8002ba8:	10210000 	.word	0x10210000
 8002bac:	10110000 	.word	0x10110000
 8002bb0:	48001000 	.word	0x48001000

08002bb4 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002bbc:	4b06      	ldr	r3, [pc, #24]	; (8002bd8 <LL_EXTI_EnableIT_0_31+0x24>)
 8002bbe:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002bc2:	4905      	ldr	r1, [pc, #20]	; (8002bd8 <LL_EXTI_EnableIT_0_31+0x24>)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr
 8002bd8:	58000800 	.word	0x58000800

08002bdc <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002be4:	4b05      	ldr	r3, [pc, #20]	; (8002bfc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	4904      	ldr	r1, [pc, #16]	; (8002bfc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	600b      	str	r3, [r1, #0]

}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr
 8002bfc:	58000800 	.word	0x58000800

08002c00 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002c06:	4b0d      	ldr	r3, [pc, #52]	; (8002c3c <ReadRtcSsrValue+0x3c>)
 8002c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002c0e:	4b0b      	ldr	r3, [pc, #44]	; (8002c3c <ReadRtcSsrValue+0x3c>)
 8002c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8002c16:	e005      	b.n	8002c24 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002c1c:	4b07      	ldr	r3, [pc, #28]	; (8002c3c <ReadRtcSsrValue+0x3c>)
 8002c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d1f5      	bne.n	8002c18 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8002c2c:	683b      	ldr	r3, [r7, #0]
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	40002800 	.word	0x40002800

08002c40 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	4603      	mov	r3, r0
 8002c48:	460a      	mov	r2, r1
 8002c4a:	71fb      	strb	r3, [r7, #7]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8002c50:	79ba      	ldrb	r2, [r7, #6]
 8002c52:	491d      	ldr	r1, [pc, #116]	; (8002cc8 <LinkTimerAfter+0x88>)
 8002c54:	4613      	mov	r3, r2
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	4413      	add	r3, r2
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	440b      	add	r3, r1
 8002c5e:	3315      	adds	r3, #21
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002c64:	7bfb      	ldrb	r3, [r7, #15]
 8002c66:	2b06      	cmp	r3, #6
 8002c68:	d009      	beq.n	8002c7e <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8002c6a:	7bfa      	ldrb	r2, [r7, #15]
 8002c6c:	4916      	ldr	r1, [pc, #88]	; (8002cc8 <LinkTimerAfter+0x88>)
 8002c6e:	4613      	mov	r3, r2
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	4413      	add	r3, r2
 8002c74:	00db      	lsls	r3, r3, #3
 8002c76:	440b      	add	r3, r1
 8002c78:	3314      	adds	r3, #20
 8002c7a:	79fa      	ldrb	r2, [r7, #7]
 8002c7c:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8002c7e:	79fa      	ldrb	r2, [r7, #7]
 8002c80:	4911      	ldr	r1, [pc, #68]	; (8002cc8 <LinkTimerAfter+0x88>)
 8002c82:	4613      	mov	r3, r2
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	4413      	add	r3, r2
 8002c88:	00db      	lsls	r3, r3, #3
 8002c8a:	440b      	add	r3, r1
 8002c8c:	3315      	adds	r3, #21
 8002c8e:	7bfa      	ldrb	r2, [r7, #15]
 8002c90:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8002c92:	79fa      	ldrb	r2, [r7, #7]
 8002c94:	490c      	ldr	r1, [pc, #48]	; (8002cc8 <LinkTimerAfter+0x88>)
 8002c96:	4613      	mov	r3, r2
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	4413      	add	r3, r2
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	440b      	add	r3, r1
 8002ca0:	3314      	adds	r3, #20
 8002ca2:	79ba      	ldrb	r2, [r7, #6]
 8002ca4:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8002ca6:	79ba      	ldrb	r2, [r7, #6]
 8002ca8:	4907      	ldr	r1, [pc, #28]	; (8002cc8 <LinkTimerAfter+0x88>)
 8002caa:	4613      	mov	r3, r2
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	4413      	add	r3, r2
 8002cb0:	00db      	lsls	r3, r3, #3
 8002cb2:	440b      	add	r3, r1
 8002cb4:	3315      	adds	r3, #21
 8002cb6:	79fa      	ldrb	r2, [r7, #7]
 8002cb8:	701a      	strb	r2, [r3, #0]

  return;
 8002cba:	bf00      	nop
}
 8002cbc:	3714      	adds	r7, #20
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	20000138 	.word	0x20000138

08002ccc <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	460a      	mov	r2, r1
 8002cd6:	71fb      	strb	r3, [r7, #7]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8002cdc:	4b29      	ldr	r3, [pc, #164]	; (8002d84 <LinkTimerBefore+0xb8>)
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	79ba      	ldrb	r2, [r7, #6]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d032      	beq.n	8002d4e <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8002ce8:	79ba      	ldrb	r2, [r7, #6]
 8002cea:	4927      	ldr	r1, [pc, #156]	; (8002d88 <LinkTimerBefore+0xbc>)
 8002cec:	4613      	mov	r3, r2
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	4413      	add	r3, r2
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	440b      	add	r3, r1
 8002cf6:	3314      	adds	r3, #20
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8002cfc:	7bfa      	ldrb	r2, [r7, #15]
 8002cfe:	4922      	ldr	r1, [pc, #136]	; (8002d88 <LinkTimerBefore+0xbc>)
 8002d00:	4613      	mov	r3, r2
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	4413      	add	r3, r2
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	440b      	add	r3, r1
 8002d0a:	3315      	adds	r3, #21
 8002d0c:	79fa      	ldrb	r2, [r7, #7]
 8002d0e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8002d10:	79fa      	ldrb	r2, [r7, #7]
 8002d12:	491d      	ldr	r1, [pc, #116]	; (8002d88 <LinkTimerBefore+0xbc>)
 8002d14:	4613      	mov	r3, r2
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	4413      	add	r3, r2
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	440b      	add	r3, r1
 8002d1e:	3315      	adds	r3, #21
 8002d20:	79ba      	ldrb	r2, [r7, #6]
 8002d22:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8002d24:	79fa      	ldrb	r2, [r7, #7]
 8002d26:	4918      	ldr	r1, [pc, #96]	; (8002d88 <LinkTimerBefore+0xbc>)
 8002d28:	4613      	mov	r3, r2
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	4413      	add	r3, r2
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	440b      	add	r3, r1
 8002d32:	3314      	adds	r3, #20
 8002d34:	7bfa      	ldrb	r2, [r7, #15]
 8002d36:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002d38:	79ba      	ldrb	r2, [r7, #6]
 8002d3a:	4913      	ldr	r1, [pc, #76]	; (8002d88 <LinkTimerBefore+0xbc>)
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	4413      	add	r3, r2
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	440b      	add	r3, r1
 8002d46:	3314      	adds	r3, #20
 8002d48:	79fa      	ldrb	r2, [r7, #7]
 8002d4a:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8002d4c:	e014      	b.n	8002d78 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8002d4e:	79fa      	ldrb	r2, [r7, #7]
 8002d50:	490d      	ldr	r1, [pc, #52]	; (8002d88 <LinkTimerBefore+0xbc>)
 8002d52:	4613      	mov	r3, r2
 8002d54:	005b      	lsls	r3, r3, #1
 8002d56:	4413      	add	r3, r2
 8002d58:	00db      	lsls	r3, r3, #3
 8002d5a:	440b      	add	r3, r1
 8002d5c:	3315      	adds	r3, #21
 8002d5e:	79ba      	ldrb	r2, [r7, #6]
 8002d60:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002d62:	79ba      	ldrb	r2, [r7, #6]
 8002d64:	4908      	ldr	r1, [pc, #32]	; (8002d88 <LinkTimerBefore+0xbc>)
 8002d66:	4613      	mov	r3, r2
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	4413      	add	r3, r2
 8002d6c:	00db      	lsls	r3, r3, #3
 8002d6e:	440b      	add	r3, r1
 8002d70:	3314      	adds	r3, #20
 8002d72:	79fa      	ldrb	r2, [r7, #7]
 8002d74:	701a      	strb	r2, [r3, #0]
  return;
 8002d76:	bf00      	nop
}
 8002d78:	3714      	adds	r7, #20
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	200001c8 	.word	0x200001c8
 8002d88:	20000138 	.word	0x20000138

08002d8c <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	4603      	mov	r3, r0
 8002d94:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002d96:	4b4e      	ldr	r3, [pc, #312]	; (8002ed0 <linkTimer+0x144>)
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	2b06      	cmp	r3, #6
 8002d9e:	d118      	bne.n	8002dd2 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002da0:	4b4b      	ldr	r3, [pc, #300]	; (8002ed0 <linkTimer+0x144>)
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	b2da      	uxtb	r2, r3
 8002da6:	4b4b      	ldr	r3, [pc, #300]	; (8002ed4 <linkTimer+0x148>)
 8002da8:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8002daa:	4a49      	ldr	r2, [pc, #292]	; (8002ed0 <linkTimer+0x144>)
 8002dac:	79fb      	ldrb	r3, [r7, #7]
 8002dae:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8002db0:	79fa      	ldrb	r2, [r7, #7]
 8002db2:	4949      	ldr	r1, [pc, #292]	; (8002ed8 <linkTimer+0x14c>)
 8002db4:	4613      	mov	r3, r2
 8002db6:	005b      	lsls	r3, r3, #1
 8002db8:	4413      	add	r3, r2
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	440b      	add	r3, r1
 8002dbe:	3315      	adds	r3, #21
 8002dc0:	2206      	movs	r2, #6
 8002dc2:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002dc4:	4b45      	ldr	r3, [pc, #276]	; (8002edc <linkTimer+0x150>)
 8002dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8002dca:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	81fb      	strh	r3, [r7, #14]
 8002dd0:	e078      	b.n	8002ec4 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8002dd2:	f000 f909 	bl	8002fe8 <ReturnTimeElapsed>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8002dda:	79fa      	ldrb	r2, [r7, #7]
 8002ddc:	493e      	ldr	r1, [pc, #248]	; (8002ed8 <linkTimer+0x14c>)
 8002dde:	4613      	mov	r3, r2
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	4413      	add	r3, r2
 8002de4:	00db      	lsls	r3, r3, #3
 8002de6:	440b      	add	r3, r1
 8002de8:	3308      	adds	r3, #8
 8002dea:	6819      	ldr	r1, [r3, #0]
 8002dec:	89fb      	ldrh	r3, [r7, #14]
 8002dee:	79fa      	ldrb	r2, [r7, #7]
 8002df0:	4419      	add	r1, r3
 8002df2:	4839      	ldr	r0, [pc, #228]	; (8002ed8 <linkTimer+0x14c>)
 8002df4:	4613      	mov	r3, r2
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	4413      	add	r3, r2
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	4403      	add	r3, r0
 8002dfe:	3308      	adds	r3, #8
 8002e00:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8002e02:	79fa      	ldrb	r2, [r7, #7]
 8002e04:	4934      	ldr	r1, [pc, #208]	; (8002ed8 <linkTimer+0x14c>)
 8002e06:	4613      	mov	r3, r2
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	4413      	add	r3, r2
 8002e0c:	00db      	lsls	r3, r3, #3
 8002e0e:	440b      	add	r3, r1
 8002e10:	3308      	adds	r3, #8
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8002e16:	4b2e      	ldr	r3, [pc, #184]	; (8002ed0 <linkTimer+0x144>)
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	4a2e      	ldr	r2, [pc, #184]	; (8002ed8 <linkTimer+0x14c>)
 8002e20:	460b      	mov	r3, r1
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	440b      	add	r3, r1
 8002e26:	00db      	lsls	r3, r3, #3
 8002e28:	4413      	add	r3, r2
 8002e2a:	3308      	adds	r3, #8
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68ba      	ldr	r2, [r7, #8]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d337      	bcc.n	8002ea4 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8002e34:	4b26      	ldr	r3, [pc, #152]	; (8002ed0 <linkTimer+0x144>)
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8002e3a:	7b7a      	ldrb	r2, [r7, #13]
 8002e3c:	4926      	ldr	r1, [pc, #152]	; (8002ed8 <linkTimer+0x14c>)
 8002e3e:	4613      	mov	r3, r2
 8002e40:	005b      	lsls	r3, r3, #1
 8002e42:	4413      	add	r3, r2
 8002e44:	00db      	lsls	r3, r3, #3
 8002e46:	440b      	add	r3, r1
 8002e48:	3315      	adds	r3, #21
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8002e4e:	e013      	b.n	8002e78 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8002e50:	7b7a      	ldrb	r2, [r7, #13]
 8002e52:	4921      	ldr	r1, [pc, #132]	; (8002ed8 <linkTimer+0x14c>)
 8002e54:	4613      	mov	r3, r2
 8002e56:	005b      	lsls	r3, r3, #1
 8002e58:	4413      	add	r3, r2
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	440b      	add	r3, r1
 8002e5e:	3315      	adds	r3, #21
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8002e64:	7b7a      	ldrb	r2, [r7, #13]
 8002e66:	491c      	ldr	r1, [pc, #112]	; (8002ed8 <linkTimer+0x14c>)
 8002e68:	4613      	mov	r3, r2
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	4413      	add	r3, r2
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	440b      	add	r3, r1
 8002e72:	3315      	adds	r3, #21
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8002e78:	7b3b      	ldrb	r3, [r7, #12]
 8002e7a:	2b06      	cmp	r3, #6
 8002e7c:	d00b      	beq.n	8002e96 <linkTimer+0x10a>
 8002e7e:	7b3a      	ldrb	r2, [r7, #12]
 8002e80:	4915      	ldr	r1, [pc, #84]	; (8002ed8 <linkTimer+0x14c>)
 8002e82:	4613      	mov	r3, r2
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	4413      	add	r3, r2
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	440b      	add	r3, r1
 8002e8c:	3308      	adds	r3, #8
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	68ba      	ldr	r2, [r7, #8]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d2dc      	bcs.n	8002e50 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8002e96:	7b7a      	ldrb	r2, [r7, #13]
 8002e98:	79fb      	ldrb	r3, [r7, #7]
 8002e9a:	4611      	mov	r1, r2
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7ff fecf 	bl	8002c40 <LinkTimerAfter>
 8002ea2:	e00f      	b.n	8002ec4 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8002ea4:	4b0a      	ldr	r3, [pc, #40]	; (8002ed0 <linkTimer+0x144>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	b2da      	uxtb	r2, r3
 8002eaa:	79fb      	ldrb	r3, [r7, #7]
 8002eac:	4611      	mov	r1, r2
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7ff ff0c 	bl	8002ccc <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8002eb4:	4b06      	ldr	r3, [pc, #24]	; (8002ed0 <linkTimer+0x144>)
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	b2da      	uxtb	r2, r3
 8002eba:	4b06      	ldr	r3, [pc, #24]	; (8002ed4 <linkTimer+0x148>)
 8002ebc:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8002ebe:	4a04      	ldr	r2, [pc, #16]	; (8002ed0 <linkTimer+0x144>)
 8002ec0:	79fb      	ldrb	r3, [r7, #7]
 8002ec2:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8002ec4:	89fb      	ldrh	r3, [r7, #14]
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3710      	adds	r7, #16
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	200001c8 	.word	0x200001c8
 8002ed4:	200001c9 	.word	0x200001c9
 8002ed8:	20000138 	.word	0x20000138
 8002edc:	200001cc 	.word	0x200001cc

08002ee0 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	460a      	mov	r2, r1
 8002eea:	71fb      	strb	r3, [r7, #7]
 8002eec:	4613      	mov	r3, r2
 8002eee:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8002ef0:	4b39      	ldr	r3, [pc, #228]	; (8002fd8 <UnlinkTimer+0xf8>)
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	79fa      	ldrb	r2, [r7, #7]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d111      	bne.n	8002f20 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002efc:	4b36      	ldr	r3, [pc, #216]	; (8002fd8 <UnlinkTimer+0xf8>)
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	b2da      	uxtb	r2, r3
 8002f02:	4b36      	ldr	r3, [pc, #216]	; (8002fdc <UnlinkTimer+0xfc>)
 8002f04:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8002f06:	79fa      	ldrb	r2, [r7, #7]
 8002f08:	4935      	ldr	r1, [pc, #212]	; (8002fe0 <UnlinkTimer+0x100>)
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	4413      	add	r3, r2
 8002f10:	00db      	lsls	r3, r3, #3
 8002f12:	440b      	add	r3, r1
 8002f14:	3315      	adds	r3, #21
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	b2da      	uxtb	r2, r3
 8002f1a:	4b2f      	ldr	r3, [pc, #188]	; (8002fd8 <UnlinkTimer+0xf8>)
 8002f1c:	701a      	strb	r2, [r3, #0]
 8002f1e:	e03e      	b.n	8002f9e <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8002f20:	79fa      	ldrb	r2, [r7, #7]
 8002f22:	492f      	ldr	r1, [pc, #188]	; (8002fe0 <UnlinkTimer+0x100>)
 8002f24:	4613      	mov	r3, r2
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	4413      	add	r3, r2
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	440b      	add	r3, r1
 8002f2e:	3314      	adds	r3, #20
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8002f34:	79fa      	ldrb	r2, [r7, #7]
 8002f36:	492a      	ldr	r1, [pc, #168]	; (8002fe0 <UnlinkTimer+0x100>)
 8002f38:	4613      	mov	r3, r2
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	4413      	add	r3, r2
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	440b      	add	r3, r1
 8002f42:	3315      	adds	r3, #21
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8002f48:	79f9      	ldrb	r1, [r7, #7]
 8002f4a:	7bfa      	ldrb	r2, [r7, #15]
 8002f4c:	4824      	ldr	r0, [pc, #144]	; (8002fe0 <UnlinkTimer+0x100>)
 8002f4e:	460b      	mov	r3, r1
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	440b      	add	r3, r1
 8002f54:	00db      	lsls	r3, r3, #3
 8002f56:	4403      	add	r3, r0
 8002f58:	3315      	adds	r3, #21
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	b2d8      	uxtb	r0, r3
 8002f5e:	4920      	ldr	r1, [pc, #128]	; (8002fe0 <UnlinkTimer+0x100>)
 8002f60:	4613      	mov	r3, r2
 8002f62:	005b      	lsls	r3, r3, #1
 8002f64:	4413      	add	r3, r2
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	440b      	add	r3, r1
 8002f6a:	3315      	adds	r3, #21
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002f70:	7bbb      	ldrb	r3, [r7, #14]
 8002f72:	2b06      	cmp	r3, #6
 8002f74:	d013      	beq.n	8002f9e <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8002f76:	79f9      	ldrb	r1, [r7, #7]
 8002f78:	7bba      	ldrb	r2, [r7, #14]
 8002f7a:	4819      	ldr	r0, [pc, #100]	; (8002fe0 <UnlinkTimer+0x100>)
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	440b      	add	r3, r1
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	4403      	add	r3, r0
 8002f86:	3314      	adds	r3, #20
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	b2d8      	uxtb	r0, r3
 8002f8c:	4914      	ldr	r1, [pc, #80]	; (8002fe0 <UnlinkTimer+0x100>)
 8002f8e:	4613      	mov	r3, r2
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	4413      	add	r3, r2
 8002f94:	00db      	lsls	r3, r3, #3
 8002f96:	440b      	add	r3, r1
 8002f98:	3314      	adds	r3, #20
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8002f9e:	79fa      	ldrb	r2, [r7, #7]
 8002fa0:	490f      	ldr	r1, [pc, #60]	; (8002fe0 <UnlinkTimer+0x100>)
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	4413      	add	r3, r2
 8002fa8:	00db      	lsls	r3, r3, #3
 8002faa:	440b      	add	r3, r1
 8002fac:	330c      	adds	r3, #12
 8002fae:	2201      	movs	r2, #1
 8002fb0:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8002fb2:	4b09      	ldr	r3, [pc, #36]	; (8002fd8 <UnlinkTimer+0xf8>)
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	2b06      	cmp	r3, #6
 8002fba:	d107      	bne.n	8002fcc <UnlinkTimer+0xec>
 8002fbc:	79bb      	ldrb	r3, [r7, #6]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d104      	bne.n	8002fcc <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002fc2:	4b08      	ldr	r3, [pc, #32]	; (8002fe4 <UnlinkTimer+0x104>)
 8002fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8002fc8:	601a      	str	r2, [r3, #0]
  }

  return;
 8002fca:	bf00      	nop
 8002fcc:	bf00      	nop
}
 8002fce:	3714      	adds	r7, #20
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr
 8002fd8:	200001c8 	.word	0x200001c8
 8002fdc:	200001c9 	.word	0x200001c9
 8002fe0:	20000138 	.word	0x20000138
 8002fe4:	200001cc 	.word	0x200001cc

08002fe8 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8002fee:	4b1a      	ldr	r3, [pc, #104]	; (8003058 <ReturnTimeElapsed+0x70>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff6:	d026      	beq.n	8003046 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8002ff8:	f7ff fe02 	bl	8002c00 <ReadRtcSsrValue>
 8002ffc:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8002ffe:	4b16      	ldr	r3, [pc, #88]	; (8003058 <ReturnTimeElapsed+0x70>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	429a      	cmp	r2, r3
 8003006:	d805      	bhi.n	8003014 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8003008:	4b13      	ldr	r3, [pc, #76]	; (8003058 <ReturnTimeElapsed+0x70>)
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	607b      	str	r3, [r7, #4]
 8003012:	e00a      	b.n	800302a <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8003014:	4b11      	ldr	r3, [pc, #68]	; (800305c <ReturnTimeElapsed+0x74>)
 8003016:	881b      	ldrh	r3, [r3, #0]
 8003018:	461a      	mov	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8003020:	4b0d      	ldr	r3, [pc, #52]	; (8003058 <ReturnTimeElapsed+0x70>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	683a      	ldr	r2, [r7, #0]
 8003026:	4413      	add	r3, r2
 8003028:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 800302a:	4b0d      	ldr	r3, [pc, #52]	; (8003060 <ReturnTimeElapsed+0x78>)
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	461a      	mov	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	fb02 f303 	mul.w	r3, r2, r3
 8003036:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8003038:	4b0a      	ldr	r3, [pc, #40]	; (8003064 <ReturnTimeElapsed+0x7c>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	461a      	mov	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	40d3      	lsrs	r3, r2
 8003042:	607b      	str	r3, [r7, #4]
 8003044:	e001      	b.n	800304a <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8003046:	2300      	movs	r3, #0
 8003048:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	b29b      	uxth	r3, r3
}
 800304e:	4618      	mov	r0, r3
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	200001cc 	.word	0x200001cc
 800305c:	20000a9e 	.word	0x20000a9e
 8003060:	20000a9d 	.word	0x20000a9d
 8003064:	20000a9c 	.word	0x20000a9c

08003068 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	4603      	mov	r3, r0
 8003070:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8003072:	88fb      	ldrh	r3, [r7, #6]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d108      	bne.n	800308a <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8003078:	f7ff fdc2 	bl	8002c00 <ReadRtcSsrValue>
 800307c:	4602      	mov	r2, r0
 800307e:	4b24      	ldr	r3, [pc, #144]	; (8003110 <RestartWakeupCounter+0xa8>)
 8003080:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8003082:	2003      	movs	r0, #3
 8003084:	f004 fc71 	bl	800796a <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8003088:	e03e      	b.n	8003108 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 800308a:	88fb      	ldrh	r3, [r7, #6]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d803      	bhi.n	8003098 <RestartWakeupCounter+0x30>
 8003090:	4b20      	ldr	r3, [pc, #128]	; (8003114 <RestartWakeupCounter+0xac>)
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d002      	beq.n	800309e <RestartWakeupCounter+0x36>
      Value -= 1;
 8003098:	88fb      	ldrh	r3, [r7, #6]
 800309a:	3b01      	subs	r3, #1
 800309c:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 800309e:	bf00      	nop
 80030a0:	4b1d      	ldr	r3, [pc, #116]	; (8003118 <RestartWakeupCounter+0xb0>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	f003 0304 	and.w	r3, r3, #4
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d0f7      	beq.n	80030a0 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80030b0:	4b19      	ldr	r3, [pc, #100]	; (8003118 <RestartWakeupCounter+0xb0>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	b2da      	uxtb	r2, r3
 80030ba:	4b17      	ldr	r3, [pc, #92]	; (8003118 <RestartWakeupCounter+0xb0>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80030c4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80030c6:	4b15      	ldr	r3, [pc, #84]	; (800311c <RestartWakeupCounter+0xb4>)
 80030c8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80030cc:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80030ce:	2003      	movs	r0, #3
 80030d0:	f004 fc59 	bl	8007986 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 80030d4:	4b12      	ldr	r3, [pc, #72]	; (8003120 <RestartWakeupCounter+0xb8>)
 80030d6:	695b      	ldr	r3, [r3, #20]
 80030d8:	0c1b      	lsrs	r3, r3, #16
 80030da:	041b      	lsls	r3, r3, #16
 80030dc:	88fa      	ldrh	r2, [r7, #6]
 80030de:	4910      	ldr	r1, [pc, #64]	; (8003120 <RestartWakeupCounter+0xb8>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80030e4:	f7ff fd8c 	bl	8002c00 <ReadRtcSsrValue>
 80030e8:	4602      	mov	r2, r0
 80030ea:	4b09      	ldr	r3, [pc, #36]	; (8003110 <RestartWakeupCounter+0xa8>)
 80030ec:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 80030ee:	4b0a      	ldr	r3, [pc, #40]	; (8003118 <RestartWakeupCounter+0xb0>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	689a      	ldr	r2, [r3, #8]
 80030f6:	4b08      	ldr	r3, [pc, #32]	; (8003118 <RestartWakeupCounter+0xb0>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003100:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8003102:	f3af 8000 	nop.w
  return ;
 8003106:	bf00      	nop
}
 8003108:	3708      	adds	r7, #8
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	200001cc 	.word	0x200001cc
 8003114:	20000a9c 	.word	0x20000a9c
 8003118:	20000a98 	.word	0x20000a98
 800311c:	58000800 	.word	0x58000800
 8003120:	40002800 	.word	0x40002800

08003124 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800312a:	4b47      	ldr	r3, [pc, #284]	; (8003248 <RescheduleTimerList+0x124>)
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003132:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003136:	d108      	bne.n	800314a <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8003138:	bf00      	nop
 800313a:	4b44      	ldr	r3, [pc, #272]	; (800324c <RescheduleTimerList+0x128>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	f003 0304 	and.w	r3, r3, #4
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1f7      	bne.n	800313a <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 800314a:	4b40      	ldr	r3, [pc, #256]	; (800324c <RescheduleTimerList+0x128>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	689a      	ldr	r2, [r3, #8]
 8003152:	4b3e      	ldr	r3, [pc, #248]	; (800324c <RescheduleTimerList+0x128>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800315c:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 800315e:	4b3c      	ldr	r3, [pc, #240]	; (8003250 <RescheduleTimerList+0x12c>)
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8003164:	7bfa      	ldrb	r2, [r7, #15]
 8003166:	493b      	ldr	r1, [pc, #236]	; (8003254 <RescheduleTimerList+0x130>)
 8003168:	4613      	mov	r3, r2
 800316a:	005b      	lsls	r3, r3, #1
 800316c:	4413      	add	r3, r2
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	440b      	add	r3, r1
 8003172:	3308      	adds	r3, #8
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8003178:	f7ff ff36 	bl	8002fe8 <ReturnTimeElapsed>
 800317c:	4603      	mov	r3, r0
 800317e:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8003180:	88fb      	ldrh	r3, [r7, #6]
 8003182:	68ba      	ldr	r2, [r7, #8]
 8003184:	429a      	cmp	r2, r3
 8003186:	d205      	bcs.n	8003194 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8003188:	2300      	movs	r3, #0
 800318a:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800318c:	4b32      	ldr	r3, [pc, #200]	; (8003258 <RescheduleTimerList+0x134>)
 800318e:	2201      	movs	r2, #1
 8003190:	701a      	strb	r2, [r3, #0]
 8003192:	e04d      	b.n	8003230 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8003194:	88fb      	ldrh	r3, [r7, #6]
 8003196:	4a31      	ldr	r2, [pc, #196]	; (800325c <RescheduleTimerList+0x138>)
 8003198:	8812      	ldrh	r2, [r2, #0]
 800319a:	b292      	uxth	r2, r2
 800319c:	4413      	add	r3, r2
 800319e:	461a      	mov	r2, r3
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d906      	bls.n	80031b4 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 80031a6:	4b2d      	ldr	r3, [pc, #180]	; (800325c <RescheduleTimerList+0x138>)
 80031a8:	881b      	ldrh	r3, [r3, #0]
 80031aa:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 80031ac:	4b2a      	ldr	r3, [pc, #168]	; (8003258 <RescheduleTimerList+0x134>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	701a      	strb	r2, [r3, #0]
 80031b2:	e03d      	b.n	8003230 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	88fb      	ldrh	r3, [r7, #6]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80031be:	4b26      	ldr	r3, [pc, #152]	; (8003258 <RescheduleTimerList+0x134>)
 80031c0:	2201      	movs	r2, #1
 80031c2:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80031c4:	e034      	b.n	8003230 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 80031c6:	7bfa      	ldrb	r2, [r7, #15]
 80031c8:	4922      	ldr	r1, [pc, #136]	; (8003254 <RescheduleTimerList+0x130>)
 80031ca:	4613      	mov	r3, r2
 80031cc:	005b      	lsls	r3, r3, #1
 80031ce:	4413      	add	r3, r2
 80031d0:	00db      	lsls	r3, r3, #3
 80031d2:	440b      	add	r3, r1
 80031d4:	3308      	adds	r3, #8
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	88fb      	ldrh	r3, [r7, #6]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d20a      	bcs.n	80031f4 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 80031de:	7bfa      	ldrb	r2, [r7, #15]
 80031e0:	491c      	ldr	r1, [pc, #112]	; (8003254 <RescheduleTimerList+0x130>)
 80031e2:	4613      	mov	r3, r2
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	4413      	add	r3, r2
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	440b      	add	r3, r1
 80031ec:	3308      	adds	r3, #8
 80031ee:	2200      	movs	r2, #0
 80031f0:	601a      	str	r2, [r3, #0]
 80031f2:	e013      	b.n	800321c <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 80031f4:	7bfa      	ldrb	r2, [r7, #15]
 80031f6:	4917      	ldr	r1, [pc, #92]	; (8003254 <RescheduleTimerList+0x130>)
 80031f8:	4613      	mov	r3, r2
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	4413      	add	r3, r2
 80031fe:	00db      	lsls	r3, r3, #3
 8003200:	440b      	add	r3, r1
 8003202:	3308      	adds	r3, #8
 8003204:	6819      	ldr	r1, [r3, #0]
 8003206:	88fb      	ldrh	r3, [r7, #6]
 8003208:	7bfa      	ldrb	r2, [r7, #15]
 800320a:	1ac9      	subs	r1, r1, r3
 800320c:	4811      	ldr	r0, [pc, #68]	; (8003254 <RescheduleTimerList+0x130>)
 800320e:	4613      	mov	r3, r2
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	4413      	add	r3, r2
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	4403      	add	r3, r0
 8003218:	3308      	adds	r3, #8
 800321a:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 800321c:	7bfa      	ldrb	r2, [r7, #15]
 800321e:	490d      	ldr	r1, [pc, #52]	; (8003254 <RescheduleTimerList+0x130>)
 8003220:	4613      	mov	r3, r2
 8003222:	005b      	lsls	r3, r3, #1
 8003224:	4413      	add	r3, r2
 8003226:	00db      	lsls	r3, r3, #3
 8003228:	440b      	add	r3, r1
 800322a:	3315      	adds	r3, #21
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003230:	7bfb      	ldrb	r3, [r7, #15]
 8003232:	2b06      	cmp	r3, #6
 8003234:	d1c7      	bne.n	80031c6 <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8003236:	89bb      	ldrh	r3, [r7, #12]
 8003238:	4618      	mov	r0, r3
 800323a:	f7ff ff15 	bl	8003068 <RestartWakeupCounter>

  return ;
 800323e:	bf00      	nop
}
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	40002800 	.word	0x40002800
 800324c:	20000a98 	.word	0x20000a98
 8003250:	200001c8 	.word	0x200001c8
 8003254:	20000138 	.word	0x20000138
 8003258:	200001d0 	.word	0x200001d0
 800325c:	20000aa0 	.word	0x20000aa0

08003260 <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af00      	add	r7, sp, #0
 8003266:	4603      	mov	r3, r0
 8003268:	6039      	str	r1, [r7, #0]
 800326a:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 800326c:	4a61      	ldr	r2, [pc, #388]	; (80033f4 <HW_TS_Init+0x194>)
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8003272:	4b60      	ldr	r3, [pc, #384]	; (80033f4 <HW_TS_Init+0x194>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	22ca      	movs	r2, #202	; 0xca
 800327a:	625a      	str	r2, [r3, #36]	; 0x24
 800327c:	4b5d      	ldr	r3, [pc, #372]	; (80033f4 <HW_TS_Init+0x194>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2253      	movs	r2, #83	; 0x53
 8003284:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003286:	4b5c      	ldr	r3, [pc, #368]	; (80033f8 <HW_TS_Init+0x198>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	4a5b      	ldr	r2, [pc, #364]	; (80033f8 <HW_TS_Init+0x198>)
 800328c:	f043 0320 	orr.w	r3, r3, #32
 8003290:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8003292:	4b59      	ldr	r3, [pc, #356]	; (80033f8 <HW_TS_Init+0x198>)
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	b2db      	uxtb	r3, r3
 8003298:	f003 0307 	and.w	r3, r3, #7
 800329c:	b2db      	uxtb	r3, r3
 800329e:	f1c3 0304 	rsb	r3, r3, #4
 80032a2:	b2da      	uxtb	r2, r3
 80032a4:	4b55      	ldr	r3, [pc, #340]	; (80033fc <HW_TS_Init+0x19c>)
 80032a6:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80032a8:	4b53      	ldr	r3, [pc, #332]	; (80033f8 <HW_TS_Init+0x198>)
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80032b0:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 80032b4:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	fa92 f2a2 	rbit	r2, r2
 80032bc:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80032be:	68ba      	ldr	r2, [r7, #8]
 80032c0:	fab2 f282 	clz	r2, r2
 80032c4:	b2d2      	uxtb	r2, r2
 80032c6:	40d3      	lsrs	r3, r2
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	3301      	adds	r3, #1
 80032cc:	b2da      	uxtb	r2, r3
 80032ce:	4b4c      	ldr	r3, [pc, #304]	; (8003400 <HW_TS_Init+0x1a0>)
 80032d0:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80032d2:	4b49      	ldr	r3, [pc, #292]	; (80033f8 <HW_TS_Init+0x198>)
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80032dc:	b29b      	uxth	r3, r3
 80032de:	3301      	adds	r3, #1
 80032e0:	b29a      	uxth	r2, r3
 80032e2:	4b48      	ldr	r3, [pc, #288]	; (8003404 <HW_TS_Init+0x1a4>)
 80032e4:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80032e6:	4b47      	ldr	r3, [pc, #284]	; (8003404 <HW_TS_Init+0x1a4>)
 80032e8:	881b      	ldrh	r3, [r3, #0]
 80032ea:	3b01      	subs	r3, #1
 80032ec:	4a44      	ldr	r2, [pc, #272]	; (8003400 <HW_TS_Init+0x1a0>)
 80032ee:	7812      	ldrb	r2, [r2, #0]
 80032f0:	fb02 f303 	mul.w	r3, r2, r3
 80032f4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80032f8:	4a40      	ldr	r2, [pc, #256]	; (80033fc <HW_TS_Init+0x19c>)
 80032fa:	7812      	ldrb	r2, [r2, #0]
 80032fc:	40d3      	lsrs	r3, r2
 80032fe:	613b      	str	r3, [r7, #16]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003306:	4293      	cmp	r3, r2
 8003308:	d904      	bls.n	8003314 <HW_TS_Init+0xb4>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 800330a:	4b3f      	ldr	r3, [pc, #252]	; (8003408 <HW_TS_Init+0x1a8>)
 800330c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003310:	801a      	strh	r2, [r3, #0]
 8003312:	e003      	b.n	800331c <HW_TS_Init+0xbc>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	b29a      	uxth	r2, r3
 8003318:	4b3b      	ldr	r3, [pc, #236]	; (8003408 <HW_TS_Init+0x1a8>)
 800331a:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800331c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003320:	f7ff fc5c 	bl	8002bdc <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8003324:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003328:	f7ff fc44 	bl	8002bb4 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 800332c:	79fb      	ldrb	r3, [r7, #7]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d143      	bne.n	80033ba <HW_TS_Init+0x15a>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8003332:	4b36      	ldr	r3, [pc, #216]	; (800340c <HW_TS_Init+0x1ac>)
 8003334:	2201      	movs	r2, #1
 8003336:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8003338:	4b35      	ldr	r3, [pc, #212]	; (8003410 <HW_TS_Init+0x1b0>)
 800333a:	f04f 32ff 	mov.w	r2, #4294967295
 800333e:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8003340:	2300      	movs	r3, #0
 8003342:	75fb      	strb	r3, [r7, #23]
 8003344:	e00c      	b.n	8003360 <HW_TS_Init+0x100>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8003346:	7dfa      	ldrb	r2, [r7, #23]
 8003348:	4932      	ldr	r1, [pc, #200]	; (8003414 <HW_TS_Init+0x1b4>)
 800334a:	4613      	mov	r3, r2
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	4413      	add	r3, r2
 8003350:	00db      	lsls	r3, r3, #3
 8003352:	440b      	add	r3, r1
 8003354:	330c      	adds	r3, #12
 8003356:	2200      	movs	r2, #0
 8003358:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800335a:	7dfb      	ldrb	r3, [r7, #23]
 800335c:	3301      	adds	r3, #1
 800335e:	75fb      	strb	r3, [r7, #23]
 8003360:	7dfb      	ldrb	r3, [r7, #23]
 8003362:	2b05      	cmp	r3, #5
 8003364:	d9ef      	bls.n	8003346 <HW_TS_Init+0xe6>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8003366:	4b2c      	ldr	r3, [pc, #176]	; (8003418 <HW_TS_Init+0x1b8>)
 8003368:	2206      	movs	r2, #6
 800336a:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 800336c:	4b21      	ldr	r3, [pc, #132]	; (80033f4 <HW_TS_Init+0x194>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	689a      	ldr	r2, [r3, #8]
 8003374:	4b1f      	ldr	r3, [pc, #124]	; (80033f4 <HW_TS_Init+0x194>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800337e:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8003380:	4b1c      	ldr	r3, [pc, #112]	; (80033f4 <HW_TS_Init+0x194>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	b2da      	uxtb	r2, r3
 800338a:	4b1a      	ldr	r3, [pc, #104]	; (80033f4 <HW_TS_Init+0x194>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003394:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8003396:	4b21      	ldr	r3, [pc, #132]	; (800341c <HW_TS_Init+0x1bc>)
 8003398:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800339c:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800339e:	2003      	movs	r0, #3
 80033a0:	f004 faf1 	bl	8007986 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80033a4:	4b13      	ldr	r3, [pc, #76]	; (80033f4 <HW_TS_Init+0x194>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	689a      	ldr	r2, [r3, #8]
 80033ac:	4b11      	ldr	r3, [pc, #68]	; (80033f4 <HW_TS_Init+0x194>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033b6:	609a      	str	r2, [r3, #8]
 80033b8:	e00a      	b.n	80033d0 <HW_TS_Init+0x170>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 80033ba:	4b0e      	ldr	r3, [pc, #56]	; (80033f4 <HW_TS_Init+0x194>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d002      	beq.n	80033d0 <HW_TS_Init+0x170>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80033ca:	2003      	movs	r0, #3
 80033cc:	f004 facd 	bl	800796a <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80033d0:	4b08      	ldr	r3, [pc, #32]	; (80033f4 <HW_TS_Init+0x194>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	22ff      	movs	r2, #255	; 0xff
 80033d8:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80033da:	2200      	movs	r2, #0
 80033dc:	2106      	movs	r1, #6
 80033de:	2003      	movs	r0, #3
 80033e0:	f004 fa89 	bl	80078f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80033e4:	2003      	movs	r0, #3
 80033e6:	f004 faa0 	bl	800792a <HAL_NVIC_EnableIRQ>

  return;
 80033ea:	bf00      	nop
}
 80033ec:	3718      	adds	r7, #24
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	20000a98 	.word	0x20000a98
 80033f8:	40002800 	.word	0x40002800
 80033fc:	20000a9c 	.word	0x20000a9c
 8003400:	20000a9d 	.word	0x20000a9d
 8003404:	20000a9e 	.word	0x20000a9e
 8003408:	20000aa0 	.word	0x20000aa0
 800340c:	200001d0 	.word	0x200001d0
 8003410:	200001cc 	.word	0x200001cc
 8003414:	20000138 	.word	0x20000138
 8003418:	200001c8 	.word	0x200001c8
 800341c:	58000800 	.word	0x58000800

08003420 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8003420:	b480      	push	{r7}
 8003422:	b08b      	sub	sp, #44	; 0x2c
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	603b      	str	r3, [r7, #0]
 800342c:	4613      	mov	r3, r2
 800342e:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8003430:	2300      	movs	r3, #0
 8003432:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003436:	f3ef 8310 	mrs	r3, PRIMASK
 800343a:	61fb      	str	r3, [r7, #28]
  return(result);
 800343c:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800343e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8003440:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8003442:	e004      	b.n	800344e <HW_TS_Create+0x2e>
  {
    loop++;
 8003444:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003448:	3301      	adds	r3, #1
 800344a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 800344e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003452:	2b05      	cmp	r3, #5
 8003454:	d80c      	bhi.n	8003470 <HW_TS_Create+0x50>
 8003456:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800345a:	492b      	ldr	r1, [pc, #172]	; (8003508 <HW_TS_Create+0xe8>)
 800345c:	4613      	mov	r3, r2
 800345e:	005b      	lsls	r3, r3, #1
 8003460:	4413      	add	r3, r2
 8003462:	00db      	lsls	r3, r3, #3
 8003464:	440b      	add	r3, r1
 8003466:	330c      	adds	r3, #12
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	b2db      	uxtb	r3, r3
 800346c:	2b00      	cmp	r3, #0
 800346e:	d1e9      	bne.n	8003444 <HW_TS_Create+0x24>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003470:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003474:	2b06      	cmp	r3, #6
 8003476:	d037      	beq.n	80034e8 <HW_TS_Create+0xc8>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8003478:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800347c:	4922      	ldr	r1, [pc, #136]	; (8003508 <HW_TS_Create+0xe8>)
 800347e:	4613      	mov	r3, r2
 8003480:	005b      	lsls	r3, r3, #1
 8003482:	4413      	add	r3, r2
 8003484:	00db      	lsls	r3, r3, #3
 8003486:	440b      	add	r3, r1
 8003488:	330c      	adds	r3, #12
 800348a:	2201      	movs	r2, #1
 800348c:	701a      	strb	r2, [r3, #0]
 800348e:	6a3b      	ldr	r3, [r7, #32]
 8003490:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8003498:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800349c:	491a      	ldr	r1, [pc, #104]	; (8003508 <HW_TS_Create+0xe8>)
 800349e:	4613      	mov	r3, r2
 80034a0:	005b      	lsls	r3, r3, #1
 80034a2:	4413      	add	r3, r2
 80034a4:	00db      	lsls	r3, r3, #3
 80034a6:	440b      	add	r3, r1
 80034a8:	3310      	adds	r3, #16
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 80034ae:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80034b2:	4915      	ldr	r1, [pc, #84]	; (8003508 <HW_TS_Create+0xe8>)
 80034b4:	4613      	mov	r3, r2
 80034b6:	005b      	lsls	r3, r3, #1
 80034b8:	4413      	add	r3, r2
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	440b      	add	r3, r1
 80034be:	330d      	adds	r3, #13
 80034c0:	79fa      	ldrb	r2, [r7, #7]
 80034c2:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 80034c4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80034c8:	490f      	ldr	r1, [pc, #60]	; (8003508 <HW_TS_Create+0xe8>)
 80034ca:	4613      	mov	r3, r2
 80034cc:	005b      	lsls	r3, r3, #1
 80034ce:	4413      	add	r3, r2
 80034d0:	00db      	lsls	r3, r3, #3
 80034d2:	440b      	add	r3, r1
 80034d4:	683a      	ldr	r2, [r7, #0]
 80034d6:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80034de:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 80034e0:	2300      	movs	r3, #0
 80034e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80034e6:	e007      	b.n	80034f8 <HW_TS_Create+0xd8>
 80034e8:	6a3b      	ldr	r3, [r7, #32]
 80034ea:	617b      	str	r3, [r7, #20]
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	f383 8810 	msr	PRIMASK, r3
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 80034f2:	2301      	movs	r3, #1
 80034f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 80034f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	372c      	adds	r7, #44	; 0x2c
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr
 8003508:	20000138 	.word	0x20000138

0800350c <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af00      	add	r7, sp, #0
 8003512:	4603      	mov	r3, r0
 8003514:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003516:	f3ef 8310 	mrs	r3, PRIMASK
 800351a:	60fb      	str	r3, [r7, #12]
  return(result);
 800351c:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800351e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003520:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8003522:	2003      	movs	r0, #3
 8003524:	f004 fa0f 	bl	8007946 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8003528:	4b37      	ldr	r3, [pc, #220]	; (8003608 <HW_TS_Stop+0xfc>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	22ca      	movs	r2, #202	; 0xca
 8003530:	625a      	str	r2, [r3, #36]	; 0x24
 8003532:	4b35      	ldr	r3, [pc, #212]	; (8003608 <HW_TS_Stop+0xfc>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2253      	movs	r2, #83	; 0x53
 800353a:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800353c:	79fa      	ldrb	r2, [r7, #7]
 800353e:	4933      	ldr	r1, [pc, #204]	; (800360c <HW_TS_Stop+0x100>)
 8003540:	4613      	mov	r3, r2
 8003542:	005b      	lsls	r3, r3, #1
 8003544:	4413      	add	r3, r2
 8003546:	00db      	lsls	r3, r3, #3
 8003548:	440b      	add	r3, r1
 800354a:	330c      	adds	r3, #12
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	b2db      	uxtb	r3, r3
 8003550:	2b02      	cmp	r3, #2
 8003552:	d148      	bne.n	80035e6 <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8003554:	79fb      	ldrb	r3, [r7, #7]
 8003556:	2100      	movs	r1, #0
 8003558:	4618      	mov	r0, r3
 800355a:	f7ff fcc1 	bl	8002ee0 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 800355e:	4b2c      	ldr	r3, [pc, #176]	; (8003610 <HW_TS_Stop+0x104>)
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003564:	7cfb      	ldrb	r3, [r7, #19]
 8003566:	2b06      	cmp	r3, #6
 8003568:	d135      	bne.n	80035d6 <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800356a:	4b2a      	ldr	r3, [pc, #168]	; (8003614 <HW_TS_Stop+0x108>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003572:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003576:	d108      	bne.n	800358a <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8003578:	bf00      	nop
 800357a:	4b23      	ldr	r3, [pc, #140]	; (8003608 <HW_TS_Stop+0xfc>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	f003 0304 	and.w	r3, r3, #4
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1f7      	bne.n	800357a <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 800358a:	4b1f      	ldr	r3, [pc, #124]	; (8003608 <HW_TS_Stop+0xfc>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	689a      	ldr	r2, [r3, #8]
 8003592:	4b1d      	ldr	r3, [pc, #116]	; (8003608 <HW_TS_Stop+0xfc>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800359c:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 800359e:	bf00      	nop
 80035a0:	4b19      	ldr	r3, [pc, #100]	; (8003608 <HW_TS_Stop+0xfc>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	f003 0304 	and.w	r3, r3, #4
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d0f7      	beq.n	80035a0 <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80035b0:	4b15      	ldr	r3, [pc, #84]	; (8003608 <HW_TS_Stop+0xfc>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	b2da      	uxtb	r2, r3
 80035ba:	4b13      	ldr	r3, [pc, #76]	; (8003608 <HW_TS_Stop+0xfc>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80035c4:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80035c6:	4b14      	ldr	r3, [pc, #80]	; (8003618 <HW_TS_Stop+0x10c>)
 80035c8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80035cc:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80035ce:	2003      	movs	r0, #3
 80035d0:	f004 f9d9 	bl	8007986 <HAL_NVIC_ClearPendingIRQ>
 80035d4:	e007      	b.n	80035e6 <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80035d6:	4b11      	ldr	r3, [pc, #68]	; (800361c <HW_TS_Stop+0x110>)
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	7cfa      	ldrb	r2, [r7, #19]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d001      	beq.n	80035e6 <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 80035e2:	f7ff fd9f 	bl	8003124 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80035e6:	4b08      	ldr	r3, [pc, #32]	; (8003608 <HW_TS_Stop+0xfc>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	22ff      	movs	r2, #255	; 0xff
 80035ee:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80035f0:	2003      	movs	r0, #3
 80035f2:	f004 f99a 	bl	800792a <HAL_NVIC_EnableIRQ>
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8003600:	bf00      	nop
}
 8003602:	3718      	adds	r7, #24
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}
 8003608:	20000a98 	.word	0x20000a98
 800360c:	20000138 	.word	0x20000138
 8003610:	200001c8 	.word	0x200001c8
 8003614:	40002800 	.word	0x40002800
 8003618:	58000800 	.word	0x58000800
 800361c:	200001c9 	.word	0x200001c9

08003620 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	af00      	add	r7, sp, #0
 8003626:	4603      	mov	r3, r0
 8003628:	6039      	str	r1, [r7, #0]
 800362a:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800362c:	79fa      	ldrb	r2, [r7, #7]
 800362e:	493b      	ldr	r1, [pc, #236]	; (800371c <HW_TS_Start+0xfc>)
 8003630:	4613      	mov	r3, r2
 8003632:	005b      	lsls	r3, r3, #1
 8003634:	4413      	add	r3, r2
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	440b      	add	r3, r1
 800363a:	330c      	adds	r3, #12
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	b2db      	uxtb	r3, r3
 8003640:	2b02      	cmp	r3, #2
 8003642:	d103      	bne.n	800364c <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8003644:	79fb      	ldrb	r3, [r7, #7]
 8003646:	4618      	mov	r0, r3
 8003648:	f7ff ff60 	bl	800350c <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800364c:	f3ef 8310 	mrs	r3, PRIMASK
 8003650:	60fb      	str	r3, [r7, #12]
  return(result);
 8003652:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003654:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003656:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8003658:	2003      	movs	r0, #3
 800365a:	f004 f974 	bl	8007946 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800365e:	4b30      	ldr	r3, [pc, #192]	; (8003720 <HW_TS_Start+0x100>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	22ca      	movs	r2, #202	; 0xca
 8003666:	625a      	str	r2, [r3, #36]	; 0x24
 8003668:	4b2d      	ldr	r3, [pc, #180]	; (8003720 <HW_TS_Start+0x100>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2253      	movs	r2, #83	; 0x53
 8003670:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8003672:	79fa      	ldrb	r2, [r7, #7]
 8003674:	4929      	ldr	r1, [pc, #164]	; (800371c <HW_TS_Start+0xfc>)
 8003676:	4613      	mov	r3, r2
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	4413      	add	r3, r2
 800367c:	00db      	lsls	r3, r3, #3
 800367e:	440b      	add	r3, r1
 8003680:	330c      	adds	r3, #12
 8003682:	2202      	movs	r2, #2
 8003684:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8003686:	79fa      	ldrb	r2, [r7, #7]
 8003688:	4924      	ldr	r1, [pc, #144]	; (800371c <HW_TS_Start+0xfc>)
 800368a:	4613      	mov	r3, r2
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	4413      	add	r3, r2
 8003690:	00db      	lsls	r3, r3, #3
 8003692:	440b      	add	r3, r1
 8003694:	3308      	adds	r3, #8
 8003696:	683a      	ldr	r2, [r7, #0]
 8003698:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 800369a:	79fa      	ldrb	r2, [r7, #7]
 800369c:	491f      	ldr	r1, [pc, #124]	; (800371c <HW_TS_Start+0xfc>)
 800369e:	4613      	mov	r3, r2
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	4413      	add	r3, r2
 80036a4:	00db      	lsls	r3, r3, #3
 80036a6:	440b      	add	r3, r1
 80036a8:	3304      	adds	r3, #4
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80036ae:	79fb      	ldrb	r3, [r7, #7]
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7ff fb6b 	bl	8002d8c <linkTimer>
 80036b6:	4603      	mov	r3, r0
 80036b8:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80036ba:	4b1a      	ldr	r3, [pc, #104]	; (8003724 <HW_TS_Start+0x104>)
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80036c0:	4b19      	ldr	r3, [pc, #100]	; (8003728 <HW_TS_Start+0x108>)
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	7c7a      	ldrb	r2, [r7, #17]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d002      	beq.n	80036d2 <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 80036cc:	f7ff fd2a 	bl	8003124 <RescheduleTimerList>
 80036d0:	e013      	b.n	80036fa <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80036d2:	79fa      	ldrb	r2, [r7, #7]
 80036d4:	4911      	ldr	r1, [pc, #68]	; (800371c <HW_TS_Start+0xfc>)
 80036d6:	4613      	mov	r3, r2
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	4413      	add	r3, r2
 80036dc:	00db      	lsls	r3, r3, #3
 80036de:	440b      	add	r3, r1
 80036e0:	3308      	adds	r3, #8
 80036e2:	6819      	ldr	r1, [r3, #0]
 80036e4:	8a7b      	ldrh	r3, [r7, #18]
 80036e6:	79fa      	ldrb	r2, [r7, #7]
 80036e8:	1ac9      	subs	r1, r1, r3
 80036ea:	480c      	ldr	r0, [pc, #48]	; (800371c <HW_TS_Start+0xfc>)
 80036ec:	4613      	mov	r3, r2
 80036ee:	005b      	lsls	r3, r3, #1
 80036f0:	4413      	add	r3, r2
 80036f2:	00db      	lsls	r3, r3, #3
 80036f4:	4403      	add	r3, r0
 80036f6:	3308      	adds	r3, #8
 80036f8:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80036fa:	4b09      	ldr	r3, [pc, #36]	; (8003720 <HW_TS_Start+0x100>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	22ff      	movs	r2, #255	; 0xff
 8003702:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8003704:	2003      	movs	r0, #3
 8003706:	f004 f910 	bl	800792a <HAL_NVIC_EnableIRQ>
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8003714:	bf00      	nop
}
 8003716:	3718      	adds	r7, #24
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	20000138 	.word	0x20000138
 8003720:	20000a98 	.word	0x20000a98
 8003724:	200001c8 	.word	0x200001c8
 8003728:	200001c9 	.word	0x200001c9

0800372c <HW_TS_RTC_ReadLeftTicksToCount>:

uint16_t HW_TS_RTC_ReadLeftTicksToCount(void)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003732:	f3ef 8310 	mrs	r3, PRIMASK
 8003736:	60bb      	str	r3, [r7, #8]
  return(result);
 8003738:	68bb      	ldr	r3, [r7, #8]
  uint32_t primask_bit;
  uint16_t return_value, auro_reload_value, elapsed_time_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800373a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800373c:	b672      	cpsid	i
  __disable_irq();                /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800373e:	4b13      	ldr	r3, [pc, #76]	; (800378c <HW_TS_RTC_ReadLeftTicksToCount+0x60>)
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003746:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800374a:	d112      	bne.n	8003772 <HW_TS_RTC_ReadLeftTicksToCount+0x46>
  {
    auro_reload_value = (uint32_t)(READ_BIT(RTC->WUTR, RTC_WUTR_WUT));
 800374c:	4b0f      	ldr	r3, [pc, #60]	; (800378c <HW_TS_RTC_ReadLeftTicksToCount+0x60>)
 800374e:	695b      	ldr	r3, [r3, #20]
 8003750:	81fb      	strh	r3, [r7, #14]

    elapsed_time_value = ReturnTimeElapsed();
 8003752:	f7ff fc49 	bl	8002fe8 <ReturnTimeElapsed>
 8003756:	4603      	mov	r3, r0
 8003758:	81bb      	strh	r3, [r7, #12]

    if(auro_reload_value > elapsed_time_value)
 800375a:	89fa      	ldrh	r2, [r7, #14]
 800375c:	89bb      	ldrh	r3, [r7, #12]
 800375e:	429a      	cmp	r2, r3
 8003760:	d904      	bls.n	800376c <HW_TS_RTC_ReadLeftTicksToCount+0x40>
    {
      return_value = auro_reload_value - elapsed_time_value;
 8003762:	89fa      	ldrh	r2, [r7, #14]
 8003764:	89bb      	ldrh	r3, [r7, #12]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	82fb      	strh	r3, [r7, #22]
 800376a:	e005      	b.n	8003778 <HW_TS_RTC_ReadLeftTicksToCount+0x4c>
    }
    else
    {
      return_value = 0;
 800376c:	2300      	movs	r3, #0
 800376e:	82fb      	strh	r3, [r7, #22]
 8003770:	e002      	b.n	8003778 <HW_TS_RTC_ReadLeftTicksToCount+0x4c>
    }
  }
  else
  {
    return_value = TIMER_LIST_EMPTY;
 8003772:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003776:	82fb      	strh	r3, [r7, #22]
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f383 8810 	msr	PRIMASK, r3
  }

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return (return_value);
 8003782:	8afb      	ldrh	r3, [r7, #22]
}
 8003784:	4618      	mov	r0, r3
 8003786:	3718      	adds	r7, #24
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	40002800 	.word	0x40002800

08003790 <LL_AHB2_GRP1_EnableClock>:
{
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003798:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800379c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800379e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80037a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4013      	ands	r3, r2
 80037b2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80037b4:	68fb      	ldr	r3, [r7, #12]
}
 80037b6:	bf00      	nop
 80037b8:	3714      	adds	r7, #20
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr

080037c2 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_USB
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80037c2:	b480      	push	{r7}
 80037c4:	b085      	sub	sp, #20
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80037ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037ce:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80037d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80037da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037de:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4013      	ands	r3, r2
 80037e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80037e6:	68fb      	ldr	r3, [r7, #12]
}
 80037e8:	bf00      	nop
 80037ea:	3714      	adds	r7, #20
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80037f8:	4b1b      	ldr	r3, [pc, #108]	; (8003868 <MX_I2C1_Init+0x74>)
 80037fa:	4a1c      	ldr	r2, [pc, #112]	; (800386c <MX_I2C1_Init+0x78>)
 80037fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00E27CAE;
 80037fe:	4b1a      	ldr	r3, [pc, #104]	; (8003868 <MX_I2C1_Init+0x74>)
 8003800:	4a1b      	ldr	r2, [pc, #108]	; (8003870 <MX_I2C1_Init+0x7c>)
 8003802:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003804:	4b18      	ldr	r3, [pc, #96]	; (8003868 <MX_I2C1_Init+0x74>)
 8003806:	2200      	movs	r2, #0
 8003808:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800380a:	4b17      	ldr	r3, [pc, #92]	; (8003868 <MX_I2C1_Init+0x74>)
 800380c:	2201      	movs	r2, #1
 800380e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003810:	4b15      	ldr	r3, [pc, #84]	; (8003868 <MX_I2C1_Init+0x74>)
 8003812:	2200      	movs	r2, #0
 8003814:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003816:	4b14      	ldr	r3, [pc, #80]	; (8003868 <MX_I2C1_Init+0x74>)
 8003818:	2200      	movs	r2, #0
 800381a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800381c:	4b12      	ldr	r3, [pc, #72]	; (8003868 <MX_I2C1_Init+0x74>)
 800381e:	2200      	movs	r2, #0
 8003820:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003822:	4b11      	ldr	r3, [pc, #68]	; (8003868 <MX_I2C1_Init+0x74>)
 8003824:	2200      	movs	r2, #0
 8003826:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003828:	4b0f      	ldr	r3, [pc, #60]	; (8003868 <MX_I2C1_Init+0x74>)
 800382a:	2200      	movs	r2, #0
 800382c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800382e:	480e      	ldr	r0, [pc, #56]	; (8003868 <MX_I2C1_Init+0x74>)
 8003830:	f004 fd88 	bl	8008344 <HAL_I2C_Init>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d001      	beq.n	800383e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800383a:	f000 fd39 	bl	80042b0 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800383e:	2100      	movs	r1, #0
 8003840:	4809      	ldr	r0, [pc, #36]	; (8003868 <MX_I2C1_Init+0x74>)
 8003842:	f006 fc80 	bl	800a146 <HAL_I2CEx_ConfigAnalogFilter>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d001      	beq.n	8003850 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800384c:	f000 fd30 	bl	80042b0 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003850:	2100      	movs	r1, #0
 8003852:	4805      	ldr	r0, [pc, #20]	; (8003868 <MX_I2C1_Init+0x74>)
 8003854:	f006 fcc2 	bl	800a1dc <HAL_I2CEx_ConfigDigitalFilter>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d001      	beq.n	8003862 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800385e:	f000 fd27 	bl	80042b0 <Error_Handler>
  }

}
 8003862:	bf00      	nop
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	20027e74 	.word	0x20027e74
 800386c:	40005400 	.word	0x40005400
 8003870:	00e27cae 	.word	0x00e27cae

08003874 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b088      	sub	sp, #32
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800387c:	f107 030c 	add.w	r3, r7, #12
 8003880:	2200      	movs	r2, #0
 8003882:	601a      	str	r2, [r3, #0]
 8003884:	605a      	str	r2, [r3, #4]
 8003886:	609a      	str	r2, [r3, #8]
 8003888:	60da      	str	r2, [r3, #12]
 800388a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a13      	ldr	r2, [pc, #76]	; (80038e0 <HAL_I2C_MspInit+0x6c>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d120      	bne.n	80038d8 <HAL_I2C_MspInit+0x64>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003896:	2001      	movs	r0, #1
 8003898:	f7ff ff7a 	bl	8003790 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800389c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80038a0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80038a2:	2312      	movs	r3, #18
 80038a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a6:	2300      	movs	r3, #0
 80038a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038aa:	2300      	movs	r3, #0
 80038ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80038ae:	2304      	movs	r3, #4
 80038b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038b2:	f107 030c 	add.w	r3, r7, #12
 80038b6:	4619      	mov	r1, r3
 80038b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038bc:	f004 fba2 	bl	8008004 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80038c0:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80038c4:	f7ff ff7d 	bl	80037c2 <LL_APB1_GRP1_EnableClock>

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80038c8:	2200      	movs	r2, #0
 80038ca:	2105      	movs	r1, #5
 80038cc:	201e      	movs	r0, #30
 80038ce:	f004 f812 	bl	80078f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80038d2:	201e      	movs	r0, #30
 80038d4:	f004 f829 	bl	800792a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80038d8:	bf00      	nop
 80038da:	3720      	adds	r7, #32
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	40005400 	.word	0x40005400

080038e4 <InertialSensingTask>:
uint32_t enableActivities = 0x1F; //Enable all 9 possible activities including Unknown
uint8_t inertialEnabled = 0;

struct inertialData inertialPacket;

void InertialSensingTask(void *argument){
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
	inertialEnabled = 1;
 80038ec:	4b38      	ldr	r3, [pc, #224]	; (80039d0 <InertialSensingTask+0xec>)
 80038ee:	2201      	movs	r2, #1
 80038f0:	701a      	strb	r2, [r3, #0]
	IMU_begin(BNO080_ADDRESS, IMU_INT_Pin, IMU_INT_GPIO_Port);
 80038f2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80038f6:	2120      	movs	r1, #32
 80038f8:	204a      	movs	r0, #74	; 0x4a
 80038fa:	f7fe f857 	bl	80019ac <IMU_begin>

	uint32_t evt = 0;
 80038fe:	2300      	movs	r3, #0
 8003900:	60fb      	str	r3, [r7, #12]

	while(1){

		/********* WAIT FOR START CONDITION FROM MASTER THREAD ************************/
		osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 8003902:	f04f 32ff 	mov.w	r2, #4294967295
 8003906:	2100      	movs	r1, #0
 8003908:	2001      	movs	r0, #1
 800390a:	f00a f807 	bl	800d91c <osThreadFlagsWait>

		// configure IMU
		osDelay(500);
 800390e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003912:	f00a f897 	bl	800da44 <osDelay>
		IMU_enableRotationVector(ROT_VEC_PERIOD);
 8003916:	2064      	movs	r0, #100	; 0x64
 8003918:	f7fe fb42 	bl	8001fa0 <IMU_enableRotationVector>
		osDelay(100);
 800391c:	2064      	movs	r0, #100	; 0x64
 800391e:	f00a f891 	bl	800da44 <osDelay>
		IMU_enableActivityClassifier(ACT_CLASS_PERIOD , enableActivities, activityClasses);
 8003922:	4b2c      	ldr	r3, [pc, #176]	; (80039d4 <InertialSensingTask+0xf0>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a2c      	ldr	r2, [pc, #176]	; (80039d8 <InertialSensingTask+0xf4>)
 8003928:	4619      	mov	r1, r3
 800392a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800392e:	f7fe fb45 	bl	8001fbc <IMU_enableActivityClassifier>

		// give some time for things to buffer
		// TODO: remove this to see if it still works fine
		osDelay(400);
 8003932:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003936:	f00a f885 	bl	800da44 <osDelay>

		while(1){

			// grab packets
			osDelay(100);
 800393a:	2064      	movs	r0, #100	; 0x64
 800393c:	f00a f882 	bl	800da44 <osDelay>
			osMessageQueueGet(rotationSampleQueueHandle, &inertialPacket.rotationMatrix, 0U, 100);
 8003940:	4b26      	ldr	r3, [pc, #152]	; (80039dc <InertialSensingTask+0xf8>)
 8003942:	6818      	ldr	r0, [r3, #0]
 8003944:	2364      	movs	r3, #100	; 0x64
 8003946:	2200      	movs	r2, #0
 8003948:	4925      	ldr	r1, [pc, #148]	; (80039e0 <InertialSensingTask+0xfc>)
 800394a:	f00a fd6b 	bl	800e424 <osMessageQueueGet>
			osMessageQueueGet(activitySampleQueueHandle, &inertialPacket.activity, 0U, 0);
 800394e:	4b25      	ldr	r3, [pc, #148]	; (80039e4 <InertialSensingTask+0x100>)
 8003950:	6818      	ldr	r0, [r3, #0]
 8003952:	2300      	movs	r3, #0
 8003954:	2200      	movs	r2, #0
 8003956:	4924      	ldr	r1, [pc, #144]	; (80039e8 <InertialSensingTask+0x104>)
 8003958:	f00a fd64 	bl	800e424 <osMessageQueueGet>
			osMessageQueuePut(inertialSensingQueueHandle, &inertialPacket, 0U, 0);
 800395c:	4b23      	ldr	r3, [pc, #140]	; (80039ec <InertialSensingTask+0x108>)
 800395e:	6818      	ldr	r0, [r3, #0]
 8003960:	2300      	movs	r3, #0
 8003962:	2200      	movs	r2, #0
 8003964:	491e      	ldr	r1, [pc, #120]	; (80039e0 <InertialSensingTask+0xfc>)
 8003966:	f00a fce9 	bl	800e33c <osMessageQueuePut>

			if( HAL_GPIO_ReadPin(IMU_INT_GPIO_Port, IMU_INT_Pin) == GPIO_PIN_RESET) IMU_dataAvailable();
 800396a:	2120      	movs	r1, #32
 800396c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003970:	f004 fcb8 	bl	80082e4 <HAL_GPIO_ReadPin>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <InertialSensingTask+0x9a>
 800397a:	f7fe f84f 	bl	8001a1c <IMU_dataAvailable>

			// check for break condition
			evt = osThreadFlagsWait (0x00000002U, osFlagsWaitAny, 0);
 800397e:	2200      	movs	r2, #0
 8003980:	2100      	movs	r1, #0
 8003982:	2002      	movs	r0, #2
 8003984:	f009 ffca 	bl	800d91c <osThreadFlagsWait>
 8003988:	60f8      	str	r0, [r7, #12]

			// stop timer and put thread in idle if signal was reset
			if( (evt & 0x00000002U) == 0x00000002U){
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f003 0302 	and.w	r3, r3, #2
 8003990:	2b00      	cmp	r3, #0
 8003992:	d0d2      	beq.n	800393a <InertialSensingTask+0x56>

				// reset IMU
				IMU_softReset();
 8003994:	f7fe faa4 	bl	8001ee0 <IMU_softReset>

				// give some time to ensure no interrupts are handled
				osDelay(500);
 8003998:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800399c:	f00a f852 	bl	800da44 <osDelay>

				inertialEnabled = 0;
 80039a0:	4b0b      	ldr	r3, [pc, #44]	; (80039d0 <InertialSensingTask+0xec>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	701a      	strb	r2, [r3, #0]

				// empty queues
				osMessageQueueReset(inertialSensingQueueHandle);
 80039a6:	4b11      	ldr	r3, [pc, #68]	; (80039ec <InertialSensingTask+0x108>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4618      	mov	r0, r3
 80039ac:	f00a fdac 	bl	800e508 <osMessageQueueReset>
				osMessageQueueReset(activitySampleQueueHandle);
 80039b0:	4b0c      	ldr	r3, [pc, #48]	; (80039e4 <InertialSensingTask+0x100>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4618      	mov	r0, r3
 80039b6:	f00a fda7 	bl	800e508 <osMessageQueueReset>
				osMessageQueueReset(rotationSampleQueueHandle);
 80039ba:	4b08      	ldr	r3, [pc, #32]	; (80039dc <InertialSensingTask+0xf8>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4618      	mov	r0, r3
 80039c0:	f00a fda2 	bl	800e508 <osMessageQueueReset>

				// clear any flags
				osThreadFlagsClear(0x0000000EU);
 80039c4:	200e      	movs	r0, #14
 80039c6:	f009 ff59 	bl	800d87c <osThreadFlagsClear>

				// exit and wait for next start condition
				break;
 80039ca:	bf00      	nop
		osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 80039cc:	e799      	b.n	8003902 <InertialSensingTask+0x1e>
 80039ce:	bf00      	nop
 80039d0:	20000aa2 	.word	0x20000aa2
 80039d4:	20000068 	.word	0x20000068
 80039d8:	20027f04 	.word	0x20027f04
 80039dc:	20027894 	.word	0x20027894
 80039e0:	20027ec8 	.word	0x20027ec8
 80039e4:	20027878 	.word	0x20027878
 80039e8:	20027ee0 	.word	0x20027ee0
 80039ec:	20027884 	.word	0x20027884

080039f0 <HAL_GPIO_EXTI_Callback>:
		}
	}
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	4603      	mov	r3, r0
 80039f8:	80fb      	strh	r3, [r7, #6]
    // if interrupt is triggered, sample!
	// todo: only do when inertial measurements are enabled?
	if((GPIO_Pin == IMU_INT_Pin) && (inertialEnabled == 1)){
 80039fa:	88fb      	ldrh	r3, [r7, #6]
 80039fc:	2b20      	cmp	r3, #32
 80039fe:	d105      	bne.n	8003a0c <HAL_GPIO_EXTI_Callback+0x1c>
 8003a00:	4b04      	ldr	r3, [pc, #16]	; (8003a14 <HAL_GPIO_EXTI_Callback+0x24>)
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d101      	bne.n	8003a0c <HAL_GPIO_EXTI_Callback+0x1c>
		IMU_dataAvailable();
 8003a08:	f7fe f808 	bl	8001a1c <IMU_dataAvailable>
	}
}
 8003a0c:	bf00      	nop
 8003a0e:	3708      	adds	r7, #8
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	20000aa2 	.word	0x20000aa2

08003a18 <_Input>:
#include "captivate_config.h"

PulseProcessor pulse_processor;
GeometryBuilder geometry_builder;

void _Input(Input *self, uint8_t input_idx){
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	460b      	mov	r3, r1
 8003a22:	70fb      	strb	r3, [r7, #3]
	_GeometryBuilder(&geometry_builder);
 8003a24:	480b      	ldr	r0, [pc, #44]	; (8003a54 <_Input+0x3c>)
 8003a26:	f7fe fd71 	bl	800250c <_GeometryBuilder>
	_PulseProcessor(&pulse_processor, 1);
 8003a2a:	2101      	movs	r1, #1
 8003a2c:	480a      	ldr	r0, [pc, #40]	; (8003a58 <_Input+0x40>)
 8003a2e:	f000 fe8b 	bl	8004748 <_PulseProcessor>
	pulse_processor.next = &geometry_builder;
 8003a32:	4b09      	ldr	r3, [pc, #36]	; (8003a58 <_Input+0x40>)
 8003a34:	4a07      	ldr	r2, [pc, #28]	; (8003a54 <_Input+0x3c>)
 8003a36:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
	self->next = &pulse_processor;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a06      	ldr	r2, [pc, #24]	; (8003a58 <_Input+0x40>)
 8003a3e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
	self->input_idx_ = input_idx;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	78fa      	ldrb	r2, [r7, #3]
 8003a46:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408

}
 8003a4a:	bf00      	nop
 8003a4c:	3708      	adds	r7, #8
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	20027f30 	.word	0x20027f30
 8003a58:	20027fb8 	.word	0x20027fb8

08003a5c <PulseHandlerTask>:
volatile uint32_t count = 0;
Pulse p;
void PulseHandlerTask(void *argument){
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
	uint32_t evt = 0;
 8003a64:	2300      	movs	r3, #0
 8003a66:	60fb      	str	r3, [r7, #12]
	while(1){
		osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 8003a68:	f04f 32ff 	mov.w	r2, #4294967295
 8003a6c:	2100      	movs	r1, #0
 8003a6e:	2001      	movs	r0, #1
 8003a70:	f009 ff54 	bl	800d91c <osThreadFlagsWait>
		//Start interrupt
//		HAL_NVIC_EnableIRQ(COMP_IRQn);
		HAL_TIM_Base_Start(&htim16);
 8003a74:	4818      	ldr	r0, [pc, #96]	; (8003ad8 <PulseHandlerTask+0x7c>)
 8003a76:	f008 fb0f 	bl	800c098 <HAL_TIM_Base_Start>
		HAL_COMP_Start(&hcomp1);
 8003a7a:	4818      	ldr	r0, [pc, #96]	; (8003adc <PulseHandlerTask+0x80>)
 8003a7c:	f003 fd54 	bl	8007528 <HAL_COMP_Start>
		_Input(&input0, 0);
 8003a80:	2100      	movs	r1, #0
 8003a82:	4817      	ldr	r0, [pc, #92]	; (8003ae0 <PulseHandlerTask+0x84>)
 8003a84:	f7ff ffc8 	bl	8003a18 <_Input>
		while(1){
			osMessageQueueGet (pulseQueueHandle, (void *) &p, NULL, osWaitForever);
 8003a88:	4b16      	ldr	r3, [pc, #88]	; (8003ae4 <PulseHandlerTask+0x88>)
 8003a8a:	6818      	ldr	r0, [r3, #0]
 8003a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a90:	2200      	movs	r2, #0
 8003a92:	4915      	ldr	r1, [pc, #84]	; (8003ae8 <PulseHandlerTask+0x8c>)
 8003a94:	f00a fcc6 	bl	800e424 <osMessageQueueGet>
			consume_pulse(input0.next, &p);
 8003a98:	4b11      	ldr	r3, [pc, #68]	; (8003ae0 <PulseHandlerTask+0x84>)
 8003a9a:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8003a9e:	4912      	ldr	r1, [pc, #72]	; (8003ae8 <PulseHandlerTask+0x8c>)
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f000 fe85 	bl	80047b0 <consume_pulse>

			evt = osThreadFlagsWait(0x00000002U, osFlagsWaitAny, 0);
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	2100      	movs	r1, #0
 8003aaa:	2002      	movs	r0, #2
 8003aac:	f009 ff36 	bl	800d91c <osThreadFlagsWait>
 8003ab0:	60f8      	str	r0, [r7, #12]
			if((evt & 0x00000002U) == 0x00000002U){
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f003 0302 	and.w	r3, r3, #2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d0e5      	beq.n	8003a88 <PulseHandlerTask+0x2c>
				//Stop interrupt
//				HAL_NVIC_DisableIRQ(COMP_IRQn);
				HAL_COMP_Stop(&hcomp1);
 8003abc:	4807      	ldr	r0, [pc, #28]	; (8003adc <PulseHandlerTask+0x80>)
 8003abe:	f003 fd7d 	bl	80075bc <HAL_COMP_Stop>
				HAL_TIM_Base_Stop(&htim16);
 8003ac2:	4805      	ldr	r0, [pc, #20]	; (8003ad8 <PulseHandlerTask+0x7c>)
 8003ac4:	f008 fb12 	bl	800c0ec <HAL_TIM_Base_Stop>
				osMessageQueueReset(pulseQueueHandle);
 8003ac8:	4b06      	ldr	r3, [pc, #24]	; (8003ae4 <PulseHandlerTask+0x88>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4618      	mov	r0, r3
 8003ace:	f00a fd1b 	bl	800e508 <osMessageQueueReset>
				break;
 8003ad2:	bf00      	nop
		osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 8003ad4:	e7c8      	b.n	8003a68 <PulseHandlerTask+0xc>
 8003ad6:	bf00      	nop
 8003ad8:	20028498 	.word	0x20028498
 8003adc:	20027ce4 	.word	0x20027ce4
 8003ae0:	20027898 	.word	0x20027898
 8003ae4:	20027780 	.word	0x20027780
 8003ae8:	20027f10 	.word	0x20027f10

08003aec <get3D_location>:
}

VIVEVars vive_vars;
struct LogMessage statusMessage;

void get3D_location(void *arguments){
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]

	uint8_t blinkActive	= 0;
 8003af4:	2300      	movs	r3, #0
 8003af6:	73fb      	strb	r3, [r7, #15]

	// ensures semaphores are clear
	osSemaphoreAcquire(locCompleteHandle, 0);
 8003af8:	4b30      	ldr	r3, [pc, #192]	; (8003bbc <get3D_location+0xd0>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2100      	movs	r1, #0
 8003afe:	4618      	mov	r0, r3
 8003b00:	f00a fad8 	bl	800e0b4 <osSemaphoreAcquire>
	osSemaphoreAcquire(locNotifyHandle, 0);
 8003b04:	4b2e      	ldr	r3, [pc, #184]	; (8003bc0 <get3D_location+0xd4>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2100      	movs	r1, #0
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f00a fad2 	bl	800e0b4 <osSemaphoreAcquire>

	osMessageQueueGet(statusQueueHandle, &statusMessage, 0U, osWaitForever);
 8003b10:	4b2c      	ldr	r3, [pc, #176]	; (8003bc4 <get3D_location+0xd8>)
 8003b12:	6818      	ldr	r0, [r3, #0]
 8003b14:	f04f 33ff 	mov.w	r3, #4294967295
 8003b18:	2200      	movs	r2, #0
 8003b1a:	492b      	ldr	r1, [pc, #172]	; (8003bc8 <get3D_location+0xdc>)
 8003b1c:	f00a fc82 	bl	800e424 <osMessageQueueGet>
	if(statusMessage.blinkEnabled == 1){
 8003b20:	4b29      	ldr	r3, [pc, #164]	; (8003bc8 <get3D_location+0xdc>)
 8003b22:	789b      	ldrb	r3, [r3, #2]
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d116      	bne.n	8003b56 <get3D_location+0x6a>
		osMessageQueuePut(statusQueueHandle, (void *) &statusMessage, 0U, 0);
 8003b28:	4b26      	ldr	r3, [pc, #152]	; (8003bc4 <get3D_location+0xd8>)
 8003b2a:	6818      	ldr	r0, [r3, #0]
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	2200      	movs	r2, #0
 8003b30:	4925      	ldr	r1, [pc, #148]	; (8003bc8 <get3D_location+0xdc>)
 8003b32:	f00a fc03 	bl	800e33c <osMessageQueuePut>

		blinkActive = 1;
 8003b36:	2301      	movs	r3, #1
 8003b38:	73fb      	strb	r3, [r7, #15]

		// disable blink if active
		osThreadFlagsSet(blinkTaskHandle, 0x00000002U);
 8003b3a:	4b24      	ldr	r3, [pc, #144]	; (8003bcc <get3D_location+0xe0>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2102      	movs	r1, #2
 8003b40:	4618      	mov	r0, r3
 8003b42:	f009 fe39 	bl	800d7b8 <osThreadFlagsSet>

		// wait for blink thread to turn off
		//TODO: make safer by making a break condition
		osSemaphoreAcquire(locNotifyHandle, osWaitForever);
 8003b46:	4b1e      	ldr	r3, [pc, #120]	; (8003bc0 <get3D_location+0xd4>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f04f 31ff 	mov.w	r1, #4294967295
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f00a fab0 	bl	800e0b4 <osSemaphoreAcquire>
 8003b54:	e006      	b.n	8003b64 <get3D_location+0x78>
	}
	else{
		osMessageQueuePut(statusQueueHandle, (void *) &statusMessage, 0U, 0);
 8003b56:	4b1b      	ldr	r3, [pc, #108]	; (8003bc4 <get3D_location+0xd8>)
 8003b58:	6818      	ldr	r0, [r3, #0]
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	491a      	ldr	r1, [pc, #104]	; (8003bc8 <get3D_location+0xdc>)
 8003b60:	f00a fbec 	bl	800e33c <osMessageQueuePut>
	}

	// stop blink code if running and hold I2C bus from being used
	// 		the timeout is to ensure to turn off the thread if no signal is seen
	//TODO: optimize the timeout
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003b64:	4b1a      	ldr	r3, [pc, #104]	; (8003bd0 <get3D_location+0xe4>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f04f 31ff 	mov.w	r1, #4294967295
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f00a faa1 	bl	800e0b4 <osSemaphoreAcquire>

	// turn on 3D localization
	osThreadFlagsSet(pulseTaskHandle, 0x00000001U);
 8003b72:	4b18      	ldr	r3, [pc, #96]	; (8003bd4 <get3D_location+0xe8>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2101      	movs	r1, #1
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f009 fe1d 	bl	800d7b8 <osThreadFlagsSet>

	// wait for completion
	osSemaphoreAcquire (locCompleteHandle, GET_3D_LOC_TIMEOUT);
 8003b7e:	4b0f      	ldr	r3, [pc, #60]	; (8003bbc <get3D_location+0xd0>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8003b86:	4618      	mov	r0, r3
 8003b88:	f00a fa94 	bl	800e0b4 <osSemaphoreAcquire>
#ifdef VIVE_THREAD_INFINITE_TIMEOUT
	osDelay(osWaitForever);
#endif

	// release I2C handle
	osSemaphoreRelease(messageI2C_LockHandle);
 8003b8c:	4b10      	ldr	r3, [pc, #64]	; (8003bd0 <get3D_location+0xe4>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4618      	mov	r0, r3
 8003b92:	f00a faf5 	bl	800e180 <osSemaphoreRelease>

	// turn off 3D localization
	osThreadFlagsSet(pulseTaskHandle, 0x00000002U);
 8003b96:	4b0f      	ldr	r3, [pc, #60]	; (8003bd4 <get3D_location+0xe8>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2102      	movs	r1, #2
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f009 fe0b 	bl	800d7b8 <osThreadFlagsSet>

	if(blinkActive){
 8003ba2:	7bfb      	ldrb	r3, [r7, #15]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d005      	beq.n	8003bb4 <get3D_location+0xc8>
//		// wait for blink thread to turn off
//		//TODO: make safer by making a break condition
//		osSemaphoreAcquire(locNotifyHandle, osWaitForever);

		// enable blink thread
		osThreadFlagsSet(blinkTaskHandle, 0x00000001U);
 8003ba8:	4b08      	ldr	r3, [pc, #32]	; (8003bcc <get3D_location+0xe0>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2101      	movs	r1, #1
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f009 fe02 	bl	800d7b8 <osThreadFlagsSet>
	}

}
 8003bb4:	bf00      	nop
 8003bb6:	3710      	adds	r7, #16
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	20027cbc 	.word	0x20027cbc
 8003bc0:	20027cc4 	.word	0x20027cc4
 8003bc4:	20027890 	.word	0x20027890
 8003bc8:	20027cdc 	.word	0x20027cdc
 8003bcc:	2002786c 	.word	0x2002786c
 8003bd0:	20027880 	.word	0x20027880
 8003bd4:	20027cc8 	.word	0x20027cc8

08003bd8 <enqueue_pulse>:


void enqueue_pulse(Input *self, uint16_t start_time, uint16_t len){
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	460b      	mov	r3, r1
 8003be2:	807b      	strh	r3, [r7, #2]
 8003be4:	4613      	mov	r3, r2
 8003be6:	803b      	strh	r3, [r7, #0]
	Pulse p_in = {self->input_idx_, start_time, len};
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 8003bee:	723b      	strb	r3, [r7, #8]
 8003bf0:	887b      	ldrh	r3, [r7, #2]
 8003bf2:	817b      	strh	r3, [r7, #10]
 8003bf4:	883b      	ldrh	r3, [r7, #0]
 8003bf6:	81bb      	strh	r3, [r7, #12]
	osMessageQueuePut(pulseQueueHandle, (const void *) &p_in, NULL, 0);
 8003bf8:	4b05      	ldr	r3, [pc, #20]	; (8003c10 <enqueue_pulse+0x38>)
 8003bfa:	6818      	ldr	r0, [r3, #0]
 8003bfc:	f107 0108 	add.w	r1, r7, #8
 8003c00:	2300      	movs	r3, #0
 8003c02:	2200      	movs	r2, #0
 8003c04:	f00a fb9a 	bl	800e33c <osMessageQueuePut>
//	count = osMessageQueueGetCount(pulseQueueHandle);
}
 8003c08:	bf00      	nop
 8003c0a:	3710      	adds	r7, #16
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	20027780 	.word	0x20027780

08003c14 <InterProcessorTask>:
extern struct LogPacket sensorPacket;
extern struct LogMessage togLogMessageReceived;
static const struct LogMessage nullMessage = {0};
struct LogMessage commandToSend;

void InterProcessorTask(void *argument){
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b086      	sub	sp, #24
 8003c18:	af02      	add	r7, sp, #8
 8003c1a:	6078      	str	r0, [r7, #4]
	uint32_t evt = 0;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	60fb      	str	r3, [r7, #12]

	// ensure secondary processor is not active, trying to send data
	// 		note: this should only happen when debugging and resetting the main processor while secondary is logging
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003c20:	4b78      	ldr	r3, [pc, #480]	; (8003e04 <InterProcessorTask+0x1f0>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f04f 31ff 	mov.w	r1, #4294967295
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f00a fa43 	bl	800e0b4 <osSemaphoreAcquire>
	while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &nullMessage, sizeof(togLogMessageReceived), 100) != HAL_OK);
 8003c2e:	bf00      	nop
 8003c30:	2364      	movs	r3, #100	; 0x64
 8003c32:	9300      	str	r3, [sp, #0]
 8003c34:	2306      	movs	r3, #6
 8003c36:	4a74      	ldr	r2, [pc, #464]	; (8003e08 <InterProcessorTask+0x1f4>)
 8003c38:	21e6      	movs	r1, #230	; 0xe6
 8003c3a:	4874      	ldr	r0, [pc, #464]	; (8003e0c <InterProcessorTask+0x1f8>)
 8003c3c:	f004 fc12 	bl	8008464 <HAL_I2C_Master_Transmit>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1f4      	bne.n	8003c30 <InterProcessorTask+0x1c>
	osSemaphoreRelease(messageI2C_LockHandle);
 8003c46:	4b6f      	ldr	r3, [pc, #444]	; (8003e04 <InterProcessorTask+0x1f0>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f00a fa98 	bl	800e180 <osSemaphoreRelease>

	while(1){

		evt = osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 8003c50:	f04f 32ff 	mov.w	r2, #4294967295
 8003c54:	2100      	movs	r1, #0
 8003c56:	2001      	movs	r0, #1
 8003c58:	f009 fe60 	bl	800d91c <osThreadFlagsWait>
 8003c5c:	60f8      	str	r0, [r7, #12]

		// if signal was received successfully, start blink task
		if ( (evt & 0x00000001U) == 0x00000001U)  {
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f003 0301 	and.w	r3, r3, #1
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d0f3      	beq.n	8003c50 <InterProcessorTask+0x3c>

			// tell secondary processor to start logging (in blocking mode)
			memcpy(&commandToSend, &togLogMessageReceived, sizeof(struct LogMessage));
 8003c68:	4b69      	ldr	r3, [pc, #420]	; (8003e10 <InterProcessorTask+0x1fc>)
 8003c6a:	4a6a      	ldr	r2, [pc, #424]	; (8003e14 <InterProcessorTask+0x200>)
 8003c6c:	6811      	ldr	r1, [r2, #0]
 8003c6e:	6019      	str	r1, [r3, #0]
 8003c70:	8892      	ldrh	r2, [r2, #4]
 8003c72:	809a      	strh	r2, [r3, #4]
//			osThreadFlagsClear(0x0000000FU);
			osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003c74:	4b63      	ldr	r3, [pc, #396]	; (8003e04 <InterProcessorTask+0x1f0>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f04f 31ff 	mov.w	r1, #4294967295
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f00a fa19 	bl	800e0b4 <osSemaphoreAcquire>
			while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &commandToSend, sizeof(togLogMessageReceived), 100) != HAL_OK);
 8003c82:	bf00      	nop
 8003c84:	2364      	movs	r3, #100	; 0x64
 8003c86:	9300      	str	r3, [sp, #0]
 8003c88:	2306      	movs	r3, #6
 8003c8a:	4a61      	ldr	r2, [pc, #388]	; (8003e10 <InterProcessorTask+0x1fc>)
 8003c8c:	21e6      	movs	r1, #230	; 0xe6
 8003c8e:	485f      	ldr	r0, [pc, #380]	; (8003e0c <InterProcessorTask+0x1f8>)
 8003c90:	f004 fbe8 	bl	8008464 <HAL_I2C_Master_Transmit>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1f4      	bne.n	8003c84 <InterProcessorTask+0x70>
			osDelay(100);
 8003c9a:	2064      	movs	r0, #100	; 0x64
 8003c9c:	f009 fed2 	bl	800da44 <osDelay>
			osSemaphoreRelease(messageI2C_LockHandle);
 8003ca0:	4b58      	ldr	r3, [pc, #352]	; (8003e04 <InterProcessorTask+0x1f0>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f00a fa6b 	bl	800e180 <osSemaphoreRelease>

			// message passing until told to stop
			while(1){

				// grab an event flag if available
				evt = osThreadFlagsWait (0x00000006U, osFlagsWaitAny, osWaitForever);
 8003caa:	f04f 32ff 	mov.w	r2, #4294967295
 8003cae:	2100      	movs	r1, #0
 8003cb0:	2006      	movs	r0, #6
 8003cb2:	f009 fe33 	bl	800d91c <osThreadFlagsWait>
 8003cb6:	60f8      	str	r0, [r7, #12]

				// if an interrupt is received indicating a message is waiting to be received
 				if( (evt & 0x00000004U) == 0x00000004U){
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f003 0304 	and.w	r3, r3, #4
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d079      	beq.n	8003db6 <InterProcessorTask+0x1a2>

 					osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003cc2:	4b50      	ldr	r3, [pc, #320]	; (8003e04 <InterProcessorTask+0x1f0>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f04f 31ff 	mov.w	r1, #4294967295
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f00a f9f2 	bl	800e0b4 <osSemaphoreAcquire>

 					// send command packet to MCU
 					while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &commandToSend, sizeof(struct LogMessage), 100) != HAL_OK){
 8003cd0:	e00e      	b.n	8003cf0 <InterProcessorTask+0xdc>
 						osSemaphoreRelease(messageI2C_LockHandle);
 8003cd2:	4b4c      	ldr	r3, [pc, #304]	; (8003e04 <InterProcessorTask+0x1f0>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f00a fa52 	bl	800e180 <osSemaphoreRelease>
 						osDelay(100);
 8003cdc:	2064      	movs	r0, #100	; 0x64
 8003cde:	f009 feb1 	bl	800da44 <osDelay>
 						osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003ce2:	4b48      	ldr	r3, [pc, #288]	; (8003e04 <InterProcessorTask+0x1f0>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f04f 31ff 	mov.w	r1, #4294967295
 8003cea:	4618      	mov	r0, r3
 8003cec:	f00a f9e2 	bl	800e0b4 <osSemaphoreAcquire>
 					while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &commandToSend, sizeof(struct LogMessage), 100) != HAL_OK){
 8003cf0:	2364      	movs	r3, #100	; 0x64
 8003cf2:	9300      	str	r3, [sp, #0]
 8003cf4:	2306      	movs	r3, #6
 8003cf6:	4a46      	ldr	r2, [pc, #280]	; (8003e10 <InterProcessorTask+0x1fc>)
 8003cf8:	21e6      	movs	r1, #230	; 0xe6
 8003cfa:	4844      	ldr	r0, [pc, #272]	; (8003e0c <InterProcessorTask+0x1f8>)
 8003cfc:	f004 fbb2 	bl	8008464 <HAL_I2C_Master_Transmit>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1e5      	bne.n	8003cd2 <InterProcessorTask+0xbe>
// 					evt = osThreadFlagsWait(0x00000010U, osFlagsWaitAny, osWaitForever);
 					// ensure I2C is disabled
// 					HAL_I2C_Master_Abort_IT(&hi2c1, SECONDARY_MCU_ADDRESS << 1);

 					// clear receiving flag
 					osThreadFlagsClear(0x00000008U);
 8003d06:	2008      	movs	r0, #8
 8003d08:	f009 fdb8 	bl	800d87c <osThreadFlagsClear>
 					// grab packet from secondary MCU
 					while(HAL_I2C_Master_Receive_IT(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &receivedPacket, sizeof(struct secondaryProcessorData)) != HAL_OK){
 8003d0c:	e00e      	b.n	8003d2c <InterProcessorTask+0x118>
 						osSemaphoreRelease(messageI2C_LockHandle);
 8003d0e:	4b3d      	ldr	r3, [pc, #244]	; (8003e04 <InterProcessorTask+0x1f0>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f00a fa34 	bl	800e180 <osSemaphoreRelease>
 						osDelay(100);
 8003d18:	2064      	movs	r0, #100	; 0x64
 8003d1a:	f009 fe93 	bl	800da44 <osDelay>
 						osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003d1e:	4b39      	ldr	r3, [pc, #228]	; (8003e04 <InterProcessorTask+0x1f0>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f04f 31ff 	mov.w	r1, #4294967295
 8003d26:	4618      	mov	r0, r3
 8003d28:	f00a f9c4 	bl	800e0b4 <osSemaphoreAcquire>
 					while(HAL_I2C_Master_Receive_IT(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &receivedPacket, sizeof(struct secondaryProcessorData)) != HAL_OK){
 8003d2c:	2358      	movs	r3, #88	; 0x58
 8003d2e:	4a3a      	ldr	r2, [pc, #232]	; (8003e18 <InterProcessorTask+0x204>)
 8003d30:	21e6      	movs	r1, #230	; 0xe6
 8003d32:	4836      	ldr	r0, [pc, #216]	; (8003e0c <InterProcessorTask+0x1f8>)
 8003d34:	f004 fd80 	bl	8008838 <HAL_I2C_Master_Receive_IT>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1e7      	bne.n	8003d0e <InterProcessorTask+0xfa>
 					}
// 					taskEXIT_CRITICAL();
					// wait until packet is received
					evt = osThreadFlagsWait(0x0000000AU, osFlagsWaitAny, osWaitForever);
 8003d3e:	f04f 32ff 	mov.w	r2, #4294967295
 8003d42:	2100      	movs	r1, #0
 8003d44:	200a      	movs	r0, #10
 8003d46:	f009 fde9 	bl	800d91c <osThreadFlagsWait>
 8003d4a:	60f8      	str	r0, [r7, #12]
					// ensure I2C is disabled
//					HAL_I2C_Master_Abort_IT(&hi2c1, SECONDARY_MCU_ADDRESS << 1);

					osSemaphoreRelease(messageI2C_LockHandle);
 8003d4c:	4b2d      	ldr	r3, [pc, #180]	; (8003e04 <InterProcessorTask+0x1f0>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4618      	mov	r0, r3
 8003d52:	f00a fa15 	bl	800e180 <osSemaphoreRelease>


//					evt = osThreadFlagsWait(0x00000002U, osFlagsWaitAny, 0);
					// if thread was told to stop, break from while loop!
					if( (evt & 0x00000002U) == 0x00000002U ) break;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f003 0302 	and.w	r3, r3, #2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d14e      	bne.n	8003dfe <InterProcessorTask+0x1ea>

					// package received data into 100ms chunks and put in queue
					parsedPacket.tick_ms = receivedPacket.tick_ms;
 8003d60:	4b2d      	ldr	r3, [pc, #180]	; (8003e18 <InterProcessorTask+0x204>)
 8003d62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d64:	4a2d      	ldr	r2, [pc, #180]	; (8003e1c <InterProcessorTask+0x208>)
 8003d66:	6113      	str	r3, [r2, #16]
					parsedPacket.epoch = receivedPacket.epoch;
 8003d68:	4b2b      	ldr	r3, [pc, #172]	; (8003e18 <InterProcessorTask+0x204>)
 8003d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d6c:	4a2b      	ldr	r2, [pc, #172]	; (8003e1c <InterProcessorTask+0x208>)
 8003d6e:	6153      	str	r3, [r2, #20]

					for(int i = 0; i < 5; i++)
 8003d70:	2300      	movs	r3, #0
 8003d72:	60bb      	str	r3, [r7, #8]
 8003d74:	e01c      	b.n	8003db0 <InterProcessorTask+0x19c>
					{
						memcpy(&parsedPacket.temple, &receivedPacket.temp.temple[i], sizeof(struct thermopileData));
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	00db      	lsls	r3, r3, #3
 8003d7a:	4a27      	ldr	r2, [pc, #156]	; (8003e18 <InterProcessorTask+0x204>)
 8003d7c:	4413      	add	r3, r2
 8003d7e:	2208      	movs	r2, #8
 8003d80:	4619      	mov	r1, r3
 8003d82:	4826      	ldr	r0, [pc, #152]	; (8003e1c <InterProcessorTask+0x208>)
 8003d84:	f011 f9f2 	bl	801516c <memcpy>
						memcpy(&parsedPacket.nose, &receivedPacket.temp.nose[i], sizeof(struct thermopileData));
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	3305      	adds	r3, #5
 8003d8c:	00db      	lsls	r3, r3, #3
 8003d8e:	4a22      	ldr	r2, [pc, #136]	; (8003e18 <InterProcessorTask+0x204>)
 8003d90:	4413      	add	r3, r2
 8003d92:	2208      	movs	r2, #8
 8003d94:	4619      	mov	r1, r3
 8003d96:	4822      	ldr	r0, [pc, #136]	; (8003e20 <InterProcessorTask+0x20c>)
 8003d98:	f011 f9e8 	bl	801516c <memcpy>

						// pass to master thread to handle
						osMessageQueuePut(interProcessorMsgQueueHandle, (void *) &parsedPacket, 0U, 0);
 8003d9c:	4b21      	ldr	r3, [pc, #132]	; (8003e24 <InterProcessorTask+0x210>)
 8003d9e:	6818      	ldr	r0, [r3, #0]
 8003da0:	2300      	movs	r3, #0
 8003da2:	2200      	movs	r2, #0
 8003da4:	491d      	ldr	r1, [pc, #116]	; (8003e1c <InterProcessorTask+0x208>)
 8003da6:	f00a fac9 	bl	800e33c <osMessageQueuePut>
					for(int i = 0; i < 5; i++)
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	3301      	adds	r3, #1
 8003dae:	60bb      	str	r3, [r7, #8]
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	2b04      	cmp	r3, #4
 8003db4:	dddf      	ble.n	8003d76 <InterProcessorTask+0x162>

					}
				}

				// stop thread and clear queues
				if( (evt & 0x00000002U) == 0x00000002U){
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f003 0302 	and.w	r3, r3, #2
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f43f af74 	beq.w	8003caa <InterProcessorTask+0x96>

					/// clear transmission flag
// 					osThreadFlagsClear(0x00000010U);
					// tell secondary processor to stop logging (in blocking mode)
					osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003dc2:	4b10      	ldr	r3, [pc, #64]	; (8003e04 <InterProcessorTask+0x1f0>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f04f 31ff 	mov.w	r1, #4294967295
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f00a f972 	bl	800e0b4 <osSemaphoreAcquire>
					while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &nullMessage, sizeof(togLogMessageReceived), 100) != HAL_OK);
 8003dd0:	bf00      	nop
 8003dd2:	2364      	movs	r3, #100	; 0x64
 8003dd4:	9300      	str	r3, [sp, #0]
 8003dd6:	2306      	movs	r3, #6
 8003dd8:	4a0b      	ldr	r2, [pc, #44]	; (8003e08 <InterProcessorTask+0x1f4>)
 8003dda:	21e6      	movs	r1, #230	; 0xe6
 8003ddc:	480b      	ldr	r0, [pc, #44]	; (8003e0c <InterProcessorTask+0x1f8>)
 8003dde:	f004 fb41 	bl	8008464 <HAL_I2C_Master_Transmit>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d1f4      	bne.n	8003dd2 <InterProcessorTask+0x1be>
					osSemaphoreRelease(messageI2C_LockHandle);
 8003de8:	4b06      	ldr	r3, [pc, #24]	; (8003e04 <InterProcessorTask+0x1f0>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4618      	mov	r0, r3
 8003dee:	f00a f9c7 	bl	800e180 <osSemaphoreRelease>
					// wait until transmit is complete
//					evt = osThreadFlagsWait(0x00000010U, osFlagsWaitAny, osWaitForever);

					// empty queue
					osMessageQueueReset(interProcessorMsgQueueHandle);
 8003df2:	4b0c      	ldr	r3, [pc, #48]	; (8003e24 <InterProcessorTask+0x210>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4618      	mov	r0, r3
 8003df8:	f00a fb86 	bl	800e508 <osMessageQueueReset>

					break;
 8003dfc:	e000      	b.n	8003e00 <InterProcessorTask+0x1ec>
					if( (evt & 0x00000002U) == 0x00000002U ) break;
 8003dfe:	bf00      	nop
		evt = osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 8003e00:	e726      	b.n	8003c50 <InterProcessorTask+0x3c>
 8003e02:	bf00      	nop
 8003e04:	20027880 	.word	0x20027880
 8003e08:	080169d4 	.word	0x080169d4
 8003e0c:	20027e74 	.word	0x20027e74
 8003e10:	200282e0 	.word	0x200282e0
 8003e14:	20027788 	.word	0x20027788
 8003e18:	20028288 	.word	0x20028288
 8003e1c:	200282e8 	.word	0x200282e8
 8003e20:	200282f0 	.word	0x200282f0
 8003e24:	2002788c 	.word	0x2002788c

08003e28 <HAL_I2C_MasterTxCpltCallback>:
//	osThreadFlagsSet(interProcessorTaskHandle, 0x00000008U);
//}

volatile uint8_t test_1 = 0;
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
	// notify sending thread that message has been sent
//	osThreadFlagsSet(sendMsgToMainTaskHandle, 0x00000001U);
	osThreadFlagsSet(interProcTaskHandle, 0x00000010U);
 8003e30:	4b06      	ldr	r3, [pc, #24]	; (8003e4c <HAL_I2C_MasterTxCpltCallback+0x24>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2110      	movs	r1, #16
 8003e36:	4618      	mov	r0, r3
 8003e38:	f009 fcbe 	bl	800d7b8 <osThreadFlagsSet>
	test_1 = 1;
 8003e3c:	4b04      	ldr	r3, [pc, #16]	; (8003e50 <HAL_I2C_MasterTxCpltCallback+0x28>)
 8003e3e:	2201      	movs	r2, #1
 8003e40:	701a      	strb	r2, [r3, #0]
}
 8003e42:	bf00      	nop
 8003e44:	3708      	adds	r7, #8
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	20027cc0 	.word	0x20027cc0
 8003e50:	20000aa3 	.word	0x20000aa3

08003e54 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
	// notify receiving thread that a message has been received
	osThreadFlagsSet(interProcTaskHandle, 0x00000008U);
 8003e5c:	4b04      	ldr	r3, [pc, #16]	; (8003e70 <HAL_I2C_MasterRxCpltCallback+0x1c>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2108      	movs	r1, #8
 8003e62:	4618      	mov	r0, r3
 8003e64:	f009 fca8 	bl	800d7b8 <osThreadFlagsSet>
}
 8003e68:	bf00      	nop
 8003e6a:	3708      	adds	r7, #8
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	20027cc0 	.word	0x20027cc0

08003e74 <setup_LP5523>:
const uint8_t packet_array[9] = {LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN};
uint8_t deviceAddress;
uint8_t led_PWM[9] = {0};
uint8_t packet;

void setup_LP5523(uint8_t ADDR){
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b086      	sub	sp, #24
 8003e78:	af04      	add	r7, sp, #16
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	71fb      	strb	r3, [r7, #7]

	deviceAddress = ADDR << 1;
 8003e7e:	79fb      	ldrb	r3, [r7, #7]
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	b2da      	uxtb	r2, r3
 8003e84:	4b2e      	ldr	r3, [pc, #184]	; (8003f40 <setup_LP5523+0xcc>)
 8003e86:	701a      	strb	r2, [r3, #0]

	// enable chip
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003e88:	4b2e      	ldr	r3, [pc, #184]	; (8003f44 <setup_LP5523+0xd0>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f04f 31ff 	mov.w	r1, #4294967295
 8003e90:	4618      	mov	r0, r3
 8003e92:	f00a f90f 	bl	800e0b4 <osSemaphoreAcquire>
	packet = LP5525_CHIP_EN;
 8003e96:	4b2c      	ldr	r3, [pc, #176]	; (8003f48 <setup_LP5523+0xd4>)
 8003e98:	2240      	movs	r2, #64	; 0x40
 8003e9a:	701a      	strb	r2, [r3, #0]
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_EN_CNTRL1_REG, 1, &packet, 1, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_EN_CNTRL1_REG, 1, &packet, 1, I2C_TIMEOUT);
 8003e9c:	4b28      	ldr	r3, [pc, #160]	; (8003f40 <setup_LP5523+0xcc>)
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	b299      	uxth	r1, r3
 8003ea2:	2364      	movs	r3, #100	; 0x64
 8003ea4:	9302      	str	r3, [sp, #8]
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	9301      	str	r3, [sp, #4]
 8003eaa:	4b27      	ldr	r3, [pc, #156]	; (8003f48 <setup_LP5523+0xd4>)
 8003eac:	9300      	str	r3, [sp, #0]
 8003eae:	2301      	movs	r3, #1
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	4826      	ldr	r0, [pc, #152]	; (8003f4c <setup_LP5523+0xd8>)
 8003eb4:	f004 fd30 	bl	8008918 <HAL_I2C_Mem_Write>

	// put charge-pump in auto-mode, serial auto increment, internal clock
	packet = CP_MODE_AUTO | EN_AUTO_INC | INT_CLK_EN;
 8003eb8:	4b23      	ldr	r3, [pc, #140]	; (8003f48 <setup_LP5523+0xd4>)
 8003eba:	224f      	movs	r2, #79	; 0x4f
 8003ebc:	701a      	strb	r2, [r3, #0]
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_MISC_REG, 1, &packet, 1, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_MISC_REG, 1, &packet, 1, I2C_TIMEOUT);
 8003ebe:	4b20      	ldr	r3, [pc, #128]	; (8003f40 <setup_LP5523+0xcc>)
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	b299      	uxth	r1, r3
 8003ec4:	2364      	movs	r3, #100	; 0x64
 8003ec6:	9302      	str	r3, [sp, #8]
 8003ec8:	2301      	movs	r3, #1
 8003eca:	9301      	str	r3, [sp, #4]
 8003ecc:	4b1e      	ldr	r3, [pc, #120]	; (8003f48 <setup_LP5523+0xd4>)
 8003ece:	9300      	str	r3, [sp, #0]
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	2236      	movs	r2, #54	; 0x36
 8003ed4:	481d      	ldr	r0, [pc, #116]	; (8003f4c <setup_LP5523+0xd8>)
 8003ed6:	f004 fd1f 	bl	8008918 <HAL_I2C_Mem_Write>

	// set PWM level (0 to 255)
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_PWM_REG, 1, led_PWM, 9, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_PWM_REG, 1, led_PWM, 9, I2C_TIMEOUT);
 8003eda:	4b19      	ldr	r3, [pc, #100]	; (8003f40 <setup_LP5523+0xcc>)
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	b299      	uxth	r1, r3
 8003ee0:	2364      	movs	r3, #100	; 0x64
 8003ee2:	9302      	str	r3, [sp, #8]
 8003ee4:	2309      	movs	r3, #9
 8003ee6:	9301      	str	r3, [sp, #4]
 8003ee8:	4b19      	ldr	r3, [pc, #100]	; (8003f50 <setup_LP5523+0xdc>)
 8003eea:	9300      	str	r3, [sp, #0]
 8003eec:	2301      	movs	r3, #1
 8003eee:	2216      	movs	r2, #22
 8003ef0:	4816      	ldr	r0, [pc, #88]	; (8003f4c <setup_LP5523+0xd8>)
 8003ef2:	f004 fd11 	bl	8008918 <HAL_I2C_Mem_Write>

	// set current control (0 to 25.5 mA) - step size is 100uA
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CURRENT_CTRL_REG, 1, led_current, 9, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CURRENT_CTRL_REG, 1, led_current, 9, I2C_TIMEOUT);
 8003ef6:	4b12      	ldr	r3, [pc, #72]	; (8003f40 <setup_LP5523+0xcc>)
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	b299      	uxth	r1, r3
 8003efc:	2364      	movs	r3, #100	; 0x64
 8003efe:	9302      	str	r3, [sp, #8]
 8003f00:	2309      	movs	r3, #9
 8003f02:	9301      	str	r3, [sp, #4]
 8003f04:	4b13      	ldr	r3, [pc, #76]	; (8003f54 <setup_LP5523+0xe0>)
 8003f06:	9300      	str	r3, [sp, #0]
 8003f08:	2301      	movs	r3, #1
 8003f0a:	2226      	movs	r2, #38	; 0x26
 8003f0c:	480f      	ldr	r0, [pc, #60]	; (8003f4c <setup_LP5523+0xd8>)
 8003f0e:	f004 fd03 	bl	8008918 <HAL_I2C_Mem_Write>

	// enable logarithmic dimming
//	packet = LOG_EN;
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CNTRL_REG, 1, packet_array, 9, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CNTRL_REG, 1, packet_array, 9, I2C_TIMEOUT);
 8003f12:	4b0b      	ldr	r3, [pc, #44]	; (8003f40 <setup_LP5523+0xcc>)
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	b299      	uxth	r1, r3
 8003f18:	2364      	movs	r3, #100	; 0x64
 8003f1a:	9302      	str	r3, [sp, #8]
 8003f1c:	2309      	movs	r3, #9
 8003f1e:	9301      	str	r3, [sp, #4]
 8003f20:	4b0d      	ldr	r3, [pc, #52]	; (8003f58 <setup_LP5523+0xe4>)
 8003f22:	9300      	str	r3, [sp, #0]
 8003f24:	2301      	movs	r3, #1
 8003f26:	2206      	movs	r2, #6
 8003f28:	4808      	ldr	r0, [pc, #32]	; (8003f4c <setup_LP5523+0xd8>)
 8003f2a:	f004 fcf5 	bl	8008918 <HAL_I2C_Mem_Write>

	osSemaphoreRelease(messageI2C_LockHandle);
 8003f2e:	4b05      	ldr	r3, [pc, #20]	; (8003f44 <setup_LP5523+0xd0>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4618      	mov	r0, r3
 8003f34:	f00a f924 	bl	800e180 <osSemaphoreRelease>
}
 8003f38:	bf00      	nop
 8003f3a:	3708      	adds	r7, #8
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	20028301 	.word	0x20028301
 8003f44:	20027880 	.word	0x20027880
 8003f48:	20028300 	.word	0x20028300
 8003f4c:	20027e74 	.word	0x20027e74
 8003f50:	20000abc 	.word	0x20000abc
 8003f54:	2000006c 	.word	0x2000006c
 8003f58:	080169dc 	.word	0x080169dc

08003f5c <FrontLightsSet>:
//
//  return true;
//}


void FrontLightsSet(union ColorComplex *setColors){
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b086      	sub	sp, #24
 8003f60:	af04      	add	r7, sp, #16
 8003f62:	6078      	str	r0, [r7, #4]

	memcpy(led_left_PWM, setColors, 9);
 8003f64:	4b1b      	ldr	r3, [pc, #108]	; (8003fd4 <FrontLightsSet+0x78>)
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	6810      	ldr	r0, [r2, #0]
 8003f6a:	6851      	ldr	r1, [r2, #4]
 8003f6c:	c303      	stmia	r3!, {r0, r1}
 8003f6e:	7a12      	ldrb	r2, [r2, #8]
 8003f70:	701a      	strb	r2, [r3, #0]
	memcpy(led_right_PWM, &(setColors->color[9]), 9);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f103 0209 	add.w	r2, r3, #9
 8003f78:	4b17      	ldr	r3, [pc, #92]	; (8003fd8 <FrontLightsSet+0x7c>)
 8003f7a:	6810      	ldr	r0, [r2, #0]
 8003f7c:	6851      	ldr	r1, [r2, #4]
 8003f7e:	c303      	stmia	r3!, {r0, r1}
 8003f80:	7a12      	ldrb	r2, [r2, #8]
 8003f82:	701a      	strb	r2, [r3, #0]
#ifndef DONGLE_CODE
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003f84:	4b15      	ldr	r3, [pc, #84]	; (8003fdc <FrontLightsSet+0x80>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f04f 31ff 	mov.w	r1, #4294967295
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f00a f891 	bl	800e0b4 <osSemaphoreAcquire>
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_LEFT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_left_PWM, 9, I2C_TIMEOUT);
 8003f92:	2364      	movs	r3, #100	; 0x64
 8003f94:	9302      	str	r3, [sp, #8]
 8003f96:	2309      	movs	r3, #9
 8003f98:	9301      	str	r3, [sp, #4]
 8003f9a:	4b0e      	ldr	r3, [pc, #56]	; (8003fd4 <FrontLightsSet+0x78>)
 8003f9c:	9300      	str	r3, [sp, #0]
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	2216      	movs	r2, #22
 8003fa2:	2168      	movs	r1, #104	; 0x68
 8003fa4:	480e      	ldr	r0, [pc, #56]	; (8003fe0 <FrontLightsSet+0x84>)
 8003fa6:	f004 fcb7 	bl	8008918 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_RIGHT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_right_PWM, 9, I2C_TIMEOUT);
 8003faa:	2364      	movs	r3, #100	; 0x64
 8003fac:	9302      	str	r3, [sp, #8]
 8003fae:	2309      	movs	r3, #9
 8003fb0:	9301      	str	r3, [sp, #4]
 8003fb2:	4b09      	ldr	r3, [pc, #36]	; (8003fd8 <FrontLightsSet+0x7c>)
 8003fb4:	9300      	str	r3, [sp, #0]
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	2216      	movs	r2, #22
 8003fba:	216a      	movs	r1, #106	; 0x6a
 8003fbc:	4808      	ldr	r0, [pc, #32]	; (8003fe0 <FrontLightsSet+0x84>)
 8003fbe:	f004 fcab 	bl	8008918 <HAL_I2C_Mem_Write>
	osSemaphoreRelease(messageI2C_LockHandle);
 8003fc2:	4b06      	ldr	r3, [pc, #24]	; (8003fdc <FrontLightsSet+0x80>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f00a f8da 	bl	800e180 <osSemaphoreRelease>
	    	else
	    	{
	    		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
	    	}
#endif
}
 8003fcc:	bf00      	nop
 8003fce:	3708      	adds	r7, #8
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	20000aa4 	.word	0x20000aa4
 8003fd8:	20000ab0 	.word	0x20000ab0
 8003fdc:	20027880 	.word	0x20027880
 8003fe0:	20027e74 	.word	0x20027e74

08003fe4 <ThreadFrontLightsTask>:
    };

struct test_color tempComplexLight;

void ThreadFrontLightsTask(void *argument)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b08a      	sub	sp, #40	; 0x28
 8003fe8:	af04      	add	r7, sp, #16
 8003fea:	6078      	str	r0, [r7, #4]

//	osDelay(1); // added delay because it seems that semaphores arent fully initialized and code stalls when releasing semaphore
//#ifndef DONGLE_CODE
	setup_LP5523(LIS3DH_LEFT_ADDRESS);
 8003fec:	2034      	movs	r0, #52	; 0x34
 8003fee:	f7ff ff41 	bl	8003e74 <setup_LP5523>
	setup_LP5523(LIS3DH_RIGHT_ADDRESS);
 8003ff2:	2035      	movs	r0, #53	; 0x35
 8003ff4:	f7ff ff3e 	bl	8003e74 <setup_LP5523>

	uint32_t lightsSimpleMessageReceived;

	while(1){

		lightsSimpleMessageReceived = 0;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	60fb      	str	r3, [r7, #12]
//		tempComplexLight.right_side_r = 150;
//		tempComplexLight.right_top_r = 150;
//
//		FrontLightsSet(&tempComplexLight);

		osDelay(1);
 8003ffc:	2001      	movs	r0, #1
 8003ffe:	f009 fd21 	bl	800da44 <osDelay>

		osMessageQueueGet(lightsSimpleQueueHandle, &lightsSimpleMessageReceived, 0U, osWaitForever);
 8004002:	4b2f      	ldr	r3, [pc, #188]	; (80040c0 <ThreadFrontLightsTask+0xdc>)
 8004004:	6818      	ldr	r0, [r3, #0]
 8004006:	f107 010c 	add.w	r1, r7, #12
 800400a:	f04f 33ff 	mov.w	r3, #4294967295
 800400e:	2200      	movs	r2, #0
 8004010:	f00a fa08 	bl	800e424 <osMessageQueueGet>

		for(int i = 0; i<= 8; i++){
 8004014:	2300      	movs	r3, #0
 8004016:	617b      	str	r3, [r7, #20]
 8004018:	e011      	b.n	800403e <ThreadFrontLightsTask+0x5a>
			led_left_PWM[i] = (lightsSimpleMessageReceived & 0x01) * 255;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	b2db      	uxtb	r3, r3
 800401e:	f003 0301 	and.w	r3, r3, #1
 8004022:	b2db      	uxtb	r3, r3
 8004024:	425b      	negs	r3, r3
 8004026:	b2d9      	uxtb	r1, r3
 8004028:	4a26      	ldr	r2, [pc, #152]	; (80040c4 <ThreadFrontLightsTask+0xe0>)
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	4413      	add	r3, r2
 800402e:	460a      	mov	r2, r1
 8004030:	701a      	strb	r2, [r3, #0]
			lightsSimpleMessageReceived = lightsSimpleMessageReceived >> 1;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	085b      	lsrs	r3, r3, #1
 8004036:	60fb      	str	r3, [r7, #12]
		for(int i = 0; i<= 8; i++){
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	3301      	adds	r3, #1
 800403c:	617b      	str	r3, [r7, #20]
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	2b08      	cmp	r3, #8
 8004042:	ddea      	ble.n	800401a <ThreadFrontLightsTask+0x36>
		}

		for(int i = 0; i<= 8; i++){
 8004044:	2300      	movs	r3, #0
 8004046:	613b      	str	r3, [r7, #16]
 8004048:	e011      	b.n	800406e <ThreadFrontLightsTask+0x8a>
			led_right_PWM[i] = (lightsSimpleMessageReceived & 0x01) * 255;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	b2db      	uxtb	r3, r3
 800404e:	f003 0301 	and.w	r3, r3, #1
 8004052:	b2db      	uxtb	r3, r3
 8004054:	425b      	negs	r3, r3
 8004056:	b2d9      	uxtb	r1, r3
 8004058:	4a1b      	ldr	r2, [pc, #108]	; (80040c8 <ThreadFrontLightsTask+0xe4>)
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	4413      	add	r3, r2
 800405e:	460a      	mov	r2, r1
 8004060:	701a      	strb	r2, [r3, #0]
			lightsSimpleMessageReceived = lightsSimpleMessageReceived >> 1;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	085b      	lsrs	r3, r3, #1
 8004066:	60fb      	str	r3, [r7, #12]
		for(int i = 0; i<= 8; i++){
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	3301      	adds	r3, #1
 800406c:	613b      	str	r3, [r7, #16]
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	2b08      	cmp	r3, #8
 8004072:	ddea      	ble.n	800404a <ThreadFrontLightsTask+0x66>
		}

		osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8004074:	4b15      	ldr	r3, [pc, #84]	; (80040cc <ThreadFrontLightsTask+0xe8>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f04f 31ff 	mov.w	r1, #4294967295
 800407c:	4618      	mov	r0, r3
 800407e:	f00a f819 	bl	800e0b4 <osSemaphoreAcquire>
		HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_LEFT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_left_PWM, 9, I2C_TIMEOUT);
 8004082:	2364      	movs	r3, #100	; 0x64
 8004084:	9302      	str	r3, [sp, #8]
 8004086:	2309      	movs	r3, #9
 8004088:	9301      	str	r3, [sp, #4]
 800408a:	4b0e      	ldr	r3, [pc, #56]	; (80040c4 <ThreadFrontLightsTask+0xe0>)
 800408c:	9300      	str	r3, [sp, #0]
 800408e:	2301      	movs	r3, #1
 8004090:	2216      	movs	r2, #22
 8004092:	2168      	movs	r1, #104	; 0x68
 8004094:	480e      	ldr	r0, [pc, #56]	; (80040d0 <ThreadFrontLightsTask+0xec>)
 8004096:	f004 fc3f 	bl	8008918 <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_RIGHT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_right_PWM, 9, I2C_TIMEOUT);
 800409a:	2364      	movs	r3, #100	; 0x64
 800409c:	9302      	str	r3, [sp, #8]
 800409e:	2309      	movs	r3, #9
 80040a0:	9301      	str	r3, [sp, #4]
 80040a2:	4b09      	ldr	r3, [pc, #36]	; (80040c8 <ThreadFrontLightsTask+0xe4>)
 80040a4:	9300      	str	r3, [sp, #0]
 80040a6:	2301      	movs	r3, #1
 80040a8:	2216      	movs	r2, #22
 80040aa:	216a      	movs	r1, #106	; 0x6a
 80040ac:	4808      	ldr	r0, [pc, #32]	; (80040d0 <ThreadFrontLightsTask+0xec>)
 80040ae:	f004 fc33 	bl	8008918 <HAL_I2C_Mem_Write>
		osSemaphoreRelease(messageI2C_LockHandle);
 80040b2:	4b06      	ldr	r3, [pc, #24]	; (80040cc <ThreadFrontLightsTask+0xe8>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4618      	mov	r0, r3
 80040b8:	f00a f862 	bl	800e180 <osSemaphoreRelease>
		lightsSimpleMessageReceived = 0;
 80040bc:	e79c      	b.n	8003ff8 <ThreadFrontLightsTask+0x14>
 80040be:	bf00      	nop
 80040c0:	20027888 	.word	0x20027888
 80040c4:	20000aa4 	.word	0x20000aa4
 80040c8:	20000ab0 	.word	0x20000ab0
 80040cc:	20027880 	.word	0x20027880
 80040d0:	20027e74 	.word	0x20027e74

080040d4 <LL_RCC_LSE_SetDriveCapability>:
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80040dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e4:	f023 0218 	bic.w	r2, r3, #24
 80040e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80040f4:	bf00      	nop
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004104:	f001 fe92 	bl	8005e2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004108:	f000 f81c 	bl	8004144 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800410c:	f7fe fcd4 	bl	8002ab8 <MX_GPIO_Init>
  MX_DMA_Init();
 8004110:	f7fd fc39 	bl	8001986 <MX_DMA_Init>
  MX_ADC1_Init();
 8004114:	f7fc fe94 	bl	8000e40 <MX_ADC1_Init>
  MX_RTC_Init();
 8004118:	f000 fe6c 	bl	8004df4 <MX_RTC_Init>
  MX_TIM2_Init();
 800411c:	f001 f8f8 	bl	8005310 <MX_TIM2_Init>
  MX_RF_Init();
 8004120:	f000 fe50 	bl	8004dc4 <MX_RF_Init>
  MX_I2C1_Init();
 8004124:	f7ff fb66 	bl	80037f4 <MX_I2C1_Init>
  MX_COMP1_Init();
 8004128:	f7fd fb1a 	bl	8001760 <MX_COMP1_Init>
  MX_TIM16_Init();
 800412c:	f001 f966 	bl	80053fc <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  MX_TSC_Init();
 8004130:	f001 fdba 	bl	8005ca8 <MX_TSC_Init>

  /* USER CODE END 2 */
  /* Init scheduler */
  osKernelInitialize();
 8004134:	f009 fa2c 	bl	800d590 <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8004138:	f7fd f8b2 	bl	80012a0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800413c:	f009 fa5c 	bl	800d5f8 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8004140:	e7fe      	b.n	8004140 <main+0x40>
	...

08004144 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b0ae      	sub	sp, #184	; 0xb8
 8004148:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800414a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800414e:	2248      	movs	r2, #72	; 0x48
 8004150:	2100      	movs	r1, #0
 8004152:	4618      	mov	r0, r3
 8004154:	f011 f815 	bl	8015182 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004158:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800415c:	2200      	movs	r2, #0
 800415e:	601a      	str	r2, [r3, #0]
 8004160:	605a      	str	r2, [r3, #4]
 8004162:	609a      	str	r2, [r3, #8]
 8004164:	60da      	str	r2, [r3, #12]
 8004166:	611a      	str	r2, [r3, #16]
 8004168:	615a      	str	r2, [r3, #20]
 800416a:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800416c:	1d3b      	adds	r3, r7, #4
 800416e:	2250      	movs	r2, #80	; 0x50
 8004170:	2100      	movs	r1, #0
 8004172:	4618      	mov	r0, r3
 8004174:	f011 f805 	bl	8015182 <memset>

  /** Macro to configure the PLL multiplication factor 
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV2);
 8004178:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004182:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004186:	f043 0310 	orr.w	r3, r3, #16
 800418a:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800418c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004196:	f043 0303 	orr.w	r3, r3, #3
 800419a:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability 
  */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800419c:	2000      	movs	r0, #0
 800419e:	f7ff ff99 	bl	80040d4 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80041a2:	4b39      	ldr	r3, [pc, #228]	; (8004288 <SystemClock_Config+0x144>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80041aa:	4a37      	ldr	r2, [pc, #220]	; (8004288 <SystemClock_Config+0x144>)
 80041ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041b0:	6013      	str	r3, [r2, #0]
 80041b2:	4b35      	ldr	r3, [pc, #212]	; (8004288 <SystemClock_Config+0x144>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80041ba:	603b      	str	r3, [r7, #0]
 80041bc:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 80041be:	230f      	movs	r3, #15
 80041c0:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80041c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80041c6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80041c8:	2301      	movs	r3, #1
 80041ca:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80041cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041d0:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80041d2:	2340      	movs	r3, #64	; 0x40
 80041d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80041d8:	2305      	movs	r3, #5
 80041da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80041de:	2300      	movs	r3, #0
 80041e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80041e4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80041e8:	4618      	mov	r0, r3
 80041ea:	f006 fc01 	bl	800a9f0 <HAL_RCC_OscConfig>
 80041ee:	4603      	mov	r3, r0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d001      	beq.n	80041f8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80041f4:	f000 f85c 	bl	80042b0 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80041f8:	236f      	movs	r3, #111	; 0x6f
 80041fa:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80041fc:	2302      	movs	r3, #2
 80041fe:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004200:	2300      	movs	r3, #0
 8004202:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004204:	2300      	movs	r3, #0
 8004206:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004208:	2300      	movs	r3, #0
 800420a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800420c:	2300      	movs	r3, #0
 800420e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8004210:	2300      	movs	r3, #0
 8004212:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004214:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004218:	2101      	movs	r1, #1
 800421a:	4618      	mov	r0, r3
 800421c:	f006 ff46 	bl	800b0ac <HAL_RCC_ClockConfig>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d001      	beq.n	800422a <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8004226:	f000 f843 	bl	80042b0 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 800422a:	f643 4304 	movw	r3, #15364	; 0x3c04
 800422e:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 8004230:	2306      	movs	r3, #6
 8004232:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8004234:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004238:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800423a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800423e:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8004240:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004244:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADCCLK;
 8004246:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800424a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800424c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8004250:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8004252:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004256:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004258:	f44f 7380 	mov.w	r3, #256	; 0x100
 800425c:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSI;
 800425e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004262:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8004264:	2302      	movs	r3, #2
 8004266:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8004268:	2300      	movs	r3, #0
 800426a:	653b      	str	r3, [r7, #80]	; 0x50

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800426c:	1d3b      	adds	r3, r7, #4
 800426e:	4618      	mov	r0, r3
 8004270:	f007 fb73 	bl	800b95a <HAL_RCCEx_PeriphCLKConfig>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <SystemClock_Config+0x13a>
  {
    Error_Handler();
 800427a:	f000 f819 	bl	80042b0 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800427e:	bf00      	nop
 8004280:	37b8      	adds	r7, #184	; 0xb8
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	58000400 	.word	0x58000400

0800428c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a04      	ldr	r2, [pc, #16]	; (80042ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d101      	bne.n	80042a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800429e:	f001 fde5 	bl	8005e6c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80042a2:	bf00      	nop
 80042a4:	3708      	adds	r7, #8
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	40012c00 	.word	0x40012c00

080042b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80042b0:	b480      	push	{r7}
 80042b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80042b4:	bf00      	nop
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
	...

080042c0 <MasterThreadTask>:

uint8_t logEnabled = 0;
//struct SystemStatus systemStatus = { 0 };
uint32_t startTime = 0;

void MasterThreadTask(void *argument) {
 80042c0:	b590      	push	{r4, r7, lr}
 80042c2:	b085      	sub	sp, #20
 80042c4:	af02      	add	r7, sp, #8
 80042c6:	6078      	str	r0, [r7, #4]

	touchSensingStart();
 80042c8:	f001 fab8 	bl	800583c <touchSensingStart>

	while (1) {
		// check if the queue has a new message (a command to start/stop logging)
		//   .... this function waits forever
		osMessageQueueGet(togLoggingQueueHandle, &togLogMessageReceived, 0U,
 80042cc:	4b37      	ldr	r3, [pc, #220]	; (80043ac <MasterThreadTask+0xec>)
 80042ce:	6818      	ldr	r0, [r3, #0]
 80042d0:	f04f 33ff 	mov.w	r3, #4294967295
 80042d4:	2200      	movs	r2, #0
 80042d6:	4936      	ldr	r1, [pc, #216]	; (80043b0 <MasterThreadTask+0xf0>)
 80042d8:	f00a f8a4 	bl	800e424 <osMessageQueueGet>
		osWaitForever);

		// this below togLogMessageReceived manipulation is for debugging
//		togLogMessageReceived.status = 1;
//		togLogMessageReceived.logStatus = 1;
		togLogMessageReceived.blinkEnabled = 1;
 80042dc:	4b34      	ldr	r3, [pc, #208]	; (80043b0 <MasterThreadTask+0xf0>)
 80042de:	2201      	movs	r2, #1
 80042e0:	709a      	strb	r2, [r3, #2]
		togLogMessageReceived.tempEnabled = 1;
 80042e2:	4b33      	ldr	r3, [pc, #204]	; (80043b0 <MasterThreadTask+0xf0>)
 80042e4:	2201      	movs	r2, #1
 80042e6:	70da      	strb	r2, [r3, #3]
		togLogMessageReceived.intertialEnabled = 1;
 80042e8:	4b31      	ldr	r3, [pc, #196]	; (80043b0 <MasterThreadTask+0xf0>)
 80042ea:	2201      	movs	r2, #1
 80042ec:	711a      	strb	r2, [r3, #4]
		togLogMessageReceived.positionEnabled = 1;
 80042ee:	4b30      	ldr	r3, [pc, #192]	; (80043b0 <MasterThreadTask+0xf0>)
 80042f0:	2201      	movs	r2, #1
 80042f2:	715a      	strb	r2, [r3, #5]

		// pass variable to share system state
		osMessageQueueReset(statusQueueHandle);
 80042f4:	4b2f      	ldr	r3, [pc, #188]	; (80043b4 <MasterThreadTask+0xf4>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4618      	mov	r0, r3
 80042fa:	f00a f905 	bl	800e508 <osMessageQueueReset>
		osMessageQueuePut(statusQueueHandle, (void*) &nullStatusMessage, 0U, 0);
 80042fe:	4b2d      	ldr	r3, [pc, #180]	; (80043b4 <MasterThreadTask+0xf4>)
 8004300:	6818      	ldr	r0, [r3, #0]
 8004302:	2300      	movs	r3, #0
 8004304:	2200      	movs	r2, #0
 8004306:	492c      	ldr	r1, [pc, #176]	; (80043b8 <MasterThreadTask+0xf8>)
 8004308:	f00a f818 	bl	800e33c <osMessageQueuePut>

		// if the received command enables logging
		//    otherwise, skip if statement and wait for an enabling command
		if (togLogMessageReceived.logStatus == ENABLE_LOG) {
 800430c:	4b28      	ldr	r3, [pc, #160]	; (80043b0 <MasterThreadTask+0xf0>)
 800430e:	785b      	ldrb	r3, [r3, #1]
 8004310:	2b01      	cmp	r3, #1
 8004312:	d13c      	bne.n	800438e <MasterThreadTask+0xce>
			logEnabled = 1;
 8004314:	4b29      	ldr	r3, [pc, #164]	; (80043bc <MasterThreadTask+0xfc>)
 8004316:	2201      	movs	r2, #1
 8004318:	701a      	strb	r2, [r3, #0]

			// keep record of this message so new message doesn't overwrite
			memcpy(&prevLogMessage, &togLogMessageReceived, sizeof(struct LogMessage));
 800431a:	4b29      	ldr	r3, [pc, #164]	; (80043c0 <MasterThreadTask+0x100>)
 800431c:	4a24      	ldr	r2, [pc, #144]	; (80043b0 <MasterThreadTask+0xf0>)
 800431e:	6811      	ldr	r1, [r2, #0]
 8004320:	6019      	str	r1, [r3, #0]
 8004322:	8892      	ldrh	r2, [r2, #4]
 8004324:	809a      	strh	r2, [r3, #4]

			// start all sensor subsystems
			masterEnterRoutine();
 8004326:	f000 f8d7 	bl	80044d8 <masterEnterRoutine>

			// add a delay to ensure all threads are given enough time to collect initial samples
			osDelay(500);
 800432a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800432e:	f009 fb89 	bl	800da44 <osDelay>

			while (1) {
				startTime = HAL_GetTick();
 8004332:	f001 fdad 	bl	8005e90 <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	4b22      	ldr	r3, [pc, #136]	; (80043c4 <MasterThreadTask+0x104>)
 800433a:	601a      	str	r2, [r3, #0]
				/**********************************************************************************/
				/*.... WAIT UNTIL DATA PACKET IS READY.....*/
				/**********************************************************************************/

				// grab data from sensor thread queues
				grabSensorData();
 800433c:	f000 f84e 	bl	80043dc <grabSensorData>

				// add all sensor data into a packet
				packetizeData(&sensorPacket, &blinkMsgReceived, &secondaryProcessorMsgReceived, &inertialMsgReceived,
 8004340:	4b21      	ldr	r3, [pc, #132]	; (80043c8 <MasterThreadTask+0x108>)
 8004342:	9300      	str	r3, [sp, #0]
 8004344:	4b21      	ldr	r3, [pc, #132]	; (80043cc <MasterThreadTask+0x10c>)
 8004346:	4a22      	ldr	r2, [pc, #136]	; (80043d0 <MasterThreadTask+0x110>)
 8004348:	4922      	ldr	r1, [pc, #136]	; (80043d4 <MasterThreadTask+0x114>)
 800434a:	4823      	ldr	r0, [pc, #140]	; (80043d8 <MasterThreadTask+0x118>)
 800434c:	f000 f94a 	bl	80045e4 <packetizeData>

				/**********************************************************************************/
				/*.... SEND PACKET TO BORDER ROUTER .....*/
				/**********************************************************************************/

				APP_THREAD_SendBorderPacket(&sensorPacket);
 8004350:	4821      	ldr	r0, [pc, #132]	; (80043d8 <MasterThreadTask+0x118>)
 8004352:	f00f fcfd 	bl	8013d50 <APP_THREAD_SendBorderPacket>
				/*.... CHECK IF NODE HAS BEEN REQUESTED TO STOP .....*/
				/**********************************************************************************/

				// check if the queue has a new message (potentially a command to stop logging)
				//   otherwise, timeout
				if (osMessageQueueGet(togLoggingQueueHandle, &togLogMessageReceived, 0U, 0) == osOK) {
 8004356:	4b15      	ldr	r3, [pc, #84]	; (80043ac <MasterThreadTask+0xec>)
 8004358:	6818      	ldr	r0, [r3, #0]
 800435a:	2300      	movs	r3, #0
 800435c:	2200      	movs	r2, #0
 800435e:	4914      	ldr	r1, [pc, #80]	; (80043b0 <MasterThreadTask+0xf0>)
 8004360:	f00a f860 	bl	800e424 <osMessageQueueGet>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d106      	bne.n	8004378 <MasterThreadTask+0xb8>
					// disable threads
					if (togLogMessageReceived.status == DISABLE_SENSING) {
 800436a:	4b11      	ldr	r3, [pc, #68]	; (80043b0 <MasterThreadTask+0xf0>)
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d102      	bne.n	8004378 <MasterThreadTask+0xb8>

						masterExitRoutine();
 8004372:	f000 f901 	bl	8004578 <masterExitRoutine>

						// break out of first while loop and wait until told to start logging again
						break;
 8004376:	e017      	b.n	80043a8 <MasterThreadTask+0xe8>
					}
				}

				// add delay to wait for next transmission period
				osDelay(PACKET_SEND_PERIOD - (HAL_GetTick() - startTime));
 8004378:	4b12      	ldr	r3, [pc, #72]	; (80043c4 <MasterThreadTask+0x104>)
 800437a:	681c      	ldr	r4, [r3, #0]
 800437c:	f001 fd88 	bl	8005e90 <HAL_GetTick>
 8004380:	4603      	mov	r3, r0
 8004382:	1ae3      	subs	r3, r4, r3
 8004384:	3364      	adds	r3, #100	; 0x64
 8004386:	4618      	mov	r0, r3
 8004388:	f009 fb5c 	bl	800da44 <osDelay>
				startTime = HAL_GetTick();
 800438c:	e7d1      	b.n	8004332 <MasterThreadTask+0x72>

			}
		} else if (logEnabled == 1 && togLogMessageReceived.logStatus == DISABLE_LOG) {
 800438e:	4b0b      	ldr	r3, [pc, #44]	; (80043bc <MasterThreadTask+0xfc>)
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d19a      	bne.n	80042cc <MasterThreadTask+0xc>
 8004396:	4b06      	ldr	r3, [pc, #24]	; (80043b0 <MasterThreadTask+0xf0>)
 8004398:	785b      	ldrb	r3, [r3, #1]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d196      	bne.n	80042cc <MasterThreadTask+0xc>
			logEnabled = 0;
 800439e:	4b07      	ldr	r3, [pc, #28]	; (80043bc <MasterThreadTask+0xfc>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	701a      	strb	r2, [r3, #0]
			masterExitRoutine();
 80043a4:	f000 f8e8 	bl	8004578 <masterExitRoutine>
		osMessageQueueGet(togLoggingQueueHandle, &togLogMessageReceived, 0U,
 80043a8:	e790      	b.n	80042cc <MasterThreadTask+0xc>
 80043aa:	bf00      	nop
 80043ac:	20027cb4 	.word	0x20027cb4
 80043b0:	20027788 	.word	0x20027788
 80043b4:	20027890 	.word	0x20027890
 80043b8:	080169e8 	.word	0x080169e8
 80043bc:	20000ac5 	.word	0x20000ac5
 80043c0:	20027860 	.word	0x20027860
 80043c4:	20000ac8 	.word	0x20000ac8
 80043c8:	20028384 	.word	0x20028384
 80043cc:	2002839c 	.word	0x2002839c
 80043d0:	200283d8 	.word	0x200283d8
 80043d4:	20028318 	.word	0x20028318
 80043d8:	20027794 	.word	0x20027794

080043dc <grabSensorData>:
		}

	}
}

void grabSensorData(void) {
 80043dc:	b5b0      	push	{r4, r5, r7, lr}
 80043de:	af00      	add	r7, sp, #0
	if (prevLogMessage.blinkEnabled == SENSOR_ENABLE) {
 80043e0:	4b30      	ldr	r3, [pc, #192]	; (80044a4 <grabSensorData+0xc8>)
 80043e2:	789b      	ldrb	r3, [r3, #2]
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d111      	bne.n	800440c <grabSensorData+0x30>
		if (osOK != osMessageQueueGet(blinkMsgQueueHandle, &blinkMsgReceived, 0U, 0)) {
 80043e8:	4b2f      	ldr	r3, [pc, #188]	; (80044a8 <grabSensorData+0xcc>)
 80043ea:	6818      	ldr	r0, [r3, #0]
 80043ec:	2300      	movs	r3, #0
 80043ee:	2200      	movs	r2, #0
 80043f0:	492e      	ldr	r1, [pc, #184]	; (80044ac <grabSensorData+0xd0>)
 80043f2:	f00a f817 	bl	800e424 <osMessageQueueGet>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d007      	beq.n	800440c <grabSensorData+0x30>
			memcpy(&blinkMsgReceived, &nullBlinkMsg, sizeof(struct blinkData));
 80043fc:	4a2b      	ldr	r2, [pc, #172]	; (80044ac <grabSensorData+0xd0>)
 80043fe:	4b2c      	ldr	r3, [pc, #176]	; (80044b0 <grabSensorData+0xd4>)
 8004400:	4610      	mov	r0, r2
 8004402:	4619      	mov	r1, r3
 8004404:	236c      	movs	r3, #108	; 0x6c
 8004406:	461a      	mov	r2, r3
 8004408:	f010 feb0 	bl	801516c <memcpy>
		}
	}

	if ((prevLogMessage.tempEnabled == SENSOR_ENABLE)) {
 800440c:	4b25      	ldr	r3, [pc, #148]	; (80044a4 <grabSensorData+0xc8>)
 800440e:	78db      	ldrb	r3, [r3, #3]
 8004410:	2b01      	cmp	r3, #1
 8004412:	d113      	bne.n	800443c <grabSensorData+0x60>
		if (osOK != osMessageQueueGet(interProcessorMsgQueueHandle, &secondaryProcessorMsgReceived, 0U, 0)) {
 8004414:	4b27      	ldr	r3, [pc, #156]	; (80044b4 <grabSensorData+0xd8>)
 8004416:	6818      	ldr	r0, [r3, #0]
 8004418:	2300      	movs	r3, #0
 800441a:	2200      	movs	r2, #0
 800441c:	4926      	ldr	r1, [pc, #152]	; (80044b8 <grabSensorData+0xdc>)
 800441e:	f00a f801 	bl	800e424 <osMessageQueueGet>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d009      	beq.n	800443c <grabSensorData+0x60>
			memcpy(&secondaryProcessorMsgReceived, &nullSecondaryProcessorMsgReceived,
 8004428:	4a23      	ldr	r2, [pc, #140]	; (80044b8 <grabSensorData+0xdc>)
 800442a:	4b24      	ldr	r3, [pc, #144]	; (80044bc <grabSensorData+0xe0>)
 800442c:	4614      	mov	r4, r2
 800442e:	461d      	mov	r5, r3
 8004430:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004432:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004434:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004438:	e884 0003 	stmia.w	r4, {r0, r1}
					sizeof(struct parsedSecondaryProcessorPacket));
		}
	}

	if ((prevLogMessage.positionEnabled == SENSOR_ENABLE)) {
 800443c:	4b19      	ldr	r3, [pc, #100]	; (80044a4 <grabSensorData+0xc8>)
 800443e:	795b      	ldrb	r3, [r3, #5]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d113      	bne.n	800446c <grabSensorData+0x90>
		if (osOK != osMessageQueueGet(viveQueueHandle, &vive_loc, 0U, 0)) {
 8004444:	4b1e      	ldr	r3, [pc, #120]	; (80044c0 <grabSensorData+0xe4>)
 8004446:	6818      	ldr	r0, [r3, #0]
 8004448:	2300      	movs	r3, #0
 800444a:	2200      	movs	r2, #0
 800444c:	491d      	ldr	r1, [pc, #116]	; (80044c4 <grabSensorData+0xe8>)
 800444e:	f009 ffe9 	bl	800e424 <osMessageQueueGet>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d009      	beq.n	800446c <grabSensorData+0x90>
			memcpy(&vive_loc, &nullViveMsgReceived, sizeof(VIVEVars));
 8004458:	4a1a      	ldr	r2, [pc, #104]	; (80044c4 <grabSensorData+0xe8>)
 800445a:	4b1b      	ldr	r3, [pc, #108]	; (80044c8 <grabSensorData+0xec>)
 800445c:	4614      	mov	r4, r2
 800445e:	461d      	mov	r5, r3
 8004460:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004462:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004464:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004468:	e884 0003 	stmia.w	r4, {r0, r1}
		}
	}

	if ((prevLogMessage.intertialEnabled == SENSOR_ENABLE)) {
 800446c:	4b0d      	ldr	r3, [pc, #52]	; (80044a4 <grabSensorData+0xc8>)
 800446e:	791b      	ldrb	r3, [r3, #4]
 8004470:	2b01      	cmp	r3, #1
 8004472:	d115      	bne.n	80044a0 <grabSensorData+0xc4>
		if (osOK != osMessageQueueGet(inertialSensingQueueHandle, &inertialMsgReceived, 0U, 0)) {
 8004474:	4b15      	ldr	r3, [pc, #84]	; (80044cc <grabSensorData+0xf0>)
 8004476:	6818      	ldr	r0, [r3, #0]
 8004478:	2300      	movs	r3, #0
 800447a:	2200      	movs	r2, #0
 800447c:	4914      	ldr	r1, [pc, #80]	; (80044d0 <grabSensorData+0xf4>)
 800447e:	f009 ffd1 	bl	800e424 <osMessageQueueGet>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00b      	beq.n	80044a0 <grabSensorData+0xc4>
			memcpy(&inertialMsgReceived, &nullInertialMsgReceived, sizeof(struct inertialData));
 8004488:	4a11      	ldr	r2, [pc, #68]	; (80044d0 <grabSensorData+0xf4>)
 800448a:	4b12      	ldr	r3, [pc, #72]	; (80044d4 <grabSensorData+0xf8>)
 800448c:	4614      	mov	r4, r2
 800448e:	461d      	mov	r5, r3
 8004490:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004492:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004494:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004496:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004498:	e895 0003 	ldmia.w	r5, {r0, r1}
 800449c:	e884 0003 	stmia.w	r4, {r0, r1}
		}
	}
}
 80044a0:	bf00      	nop
 80044a2:	bdb0      	pop	{r4, r5, r7, pc}
 80044a4:	20027860 	.word	0x20027860
 80044a8:	20027cd0 	.word	0x20027cd0
 80044ac:	20028318 	.word	0x20028318
 80044b0:	080169f0 	.word	0x080169f0
 80044b4:	2002788c 	.word	0x2002788c
 80044b8:	200283d8 	.word	0x200283d8
 80044bc:	08016a5c 	.word	0x08016a5c
 80044c0:	20027784 	.word	0x20027784
 80044c4:	20028384 	.word	0x20028384
 80044c8:	08016a9c 	.word	0x08016a9c
 80044cc:	20027884 	.word	0x20027884
 80044d0:	2002839c 	.word	0x2002839c
 80044d4:	08016a74 	.word	0x08016a74

080044d8 <masterEnterRoutine>:

void masterEnterRoutine(void) {
 80044d8:	b580      	push	{r7, lr}
 80044da:	af00      	add	r7, sp, #0
	if (prevLogMessage.blinkEnabled == SENSOR_ENABLE) {
 80044dc:	4b1e      	ldr	r3, [pc, #120]	; (8004558 <masterEnterRoutine+0x80>)
 80044de:	789b      	ldrb	r3, [r3, #2]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d105      	bne.n	80044f0 <masterEnterRoutine+0x18>
		osThreadFlagsSet(blinkTaskHandle, 0x00000001U);
 80044e4:	4b1d      	ldr	r3, [pc, #116]	; (800455c <masterEnterRoutine+0x84>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2101      	movs	r1, #1
 80044ea:	4618      	mov	r0, r3
 80044ec:	f009 f964 	bl	800d7b8 <osThreadFlagsSet>
	}

	if (togLogMessageReceived.positionEnabled == SENSOR_ENABLE) {
 80044f0:	4b1b      	ldr	r3, [pc, #108]	; (8004560 <masterEnterRoutine+0x88>)
 80044f2:	795b      	ldrb	r3, [r3, #5]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d118      	bne.n	800452a <masterEnterRoutine+0x52>
		// update status queue to notify other threads position is active
		osMessageQueueGet(statusQueueHandle, &statusMessage, 0U, osWaitForever);
 80044f8:	4b1a      	ldr	r3, [pc, #104]	; (8004564 <masterEnterRoutine+0x8c>)
 80044fa:	6818      	ldr	r0, [r3, #0]
 80044fc:	f04f 33ff 	mov.w	r3, #4294967295
 8004500:	2200      	movs	r2, #0
 8004502:	4919      	ldr	r1, [pc, #100]	; (8004568 <masterEnterRoutine+0x90>)
 8004504:	f009 ff8e 	bl	800e424 <osMessageQueueGet>
		statusMessage.positionEnabled = 1;
 8004508:	4b17      	ldr	r3, [pc, #92]	; (8004568 <masterEnterRoutine+0x90>)
 800450a:	2201      	movs	r2, #1
 800450c:	715a      	strb	r2, [r3, #5]
		osMessageQueuePut(statusQueueHandle, (void*) &statusMessage, 0U, 0);
 800450e:	4b15      	ldr	r3, [pc, #84]	; (8004564 <masterEnterRoutine+0x8c>)
 8004510:	6818      	ldr	r0, [r3, #0]
 8004512:	2300      	movs	r3, #0
 8004514:	2200      	movs	r2, #0
 8004516:	4914      	ldr	r1, [pc, #80]	; (8004568 <masterEnterRoutine+0x90>)
 8004518:	f009 ff10 	bl	800e33c <osMessageQueuePut>

		// start timer for 3D position sample to be taken
		osTimerStart(viveTimerHandle, VIVE_SAMPLE_PERIOD);
 800451c:	4b13      	ldr	r3, [pc, #76]	; (800456c <masterEnterRoutine+0x94>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8004524:	4618      	mov	r0, r3
 8004526:	f009 fb55 	bl	800dbd4 <osTimerStart>
	}

	if ((prevLogMessage.tempEnabled == SENSOR_ENABLE)) {
 800452a:	4b0b      	ldr	r3, [pc, #44]	; (8004558 <masterEnterRoutine+0x80>)
 800452c:	78db      	ldrb	r3, [r3, #3]
 800452e:	2b01      	cmp	r3, #1
 8004530:	d105      	bne.n	800453e <masterEnterRoutine+0x66>
		osThreadFlagsSet(interProcTaskHandle, 0x00000001U);
 8004532:	4b0f      	ldr	r3, [pc, #60]	; (8004570 <masterEnterRoutine+0x98>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2101      	movs	r1, #1
 8004538:	4618      	mov	r0, r3
 800453a:	f009 f93d 	bl	800d7b8 <osThreadFlagsSet>
	}

	if ((prevLogMessage.intertialEnabled == SENSOR_ENABLE)) {
 800453e:	4b06      	ldr	r3, [pc, #24]	; (8004558 <masterEnterRoutine+0x80>)
 8004540:	791b      	ldrb	r3, [r3, #4]
 8004542:	2b01      	cmp	r3, #1
 8004544:	d105      	bne.n	8004552 <masterEnterRoutine+0x7a>
		osThreadFlagsSet(inertialTaskHandle, 0x00000001U);
 8004546:	4b0b      	ldr	r3, [pc, #44]	; (8004574 <masterEnterRoutine+0x9c>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2101      	movs	r1, #1
 800454c:	4618      	mov	r0, r3
 800454e:	f009 f933 	bl	800d7b8 <osThreadFlagsSet>
	}
}
 8004552:	bf00      	nop
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	20027860 	.word	0x20027860
 800455c:	2002786c 	.word	0x2002786c
 8004560:	20027788 	.word	0x20027788
 8004564:	20027890 	.word	0x20027890
 8004568:	20027cdc 	.word	0x20027cdc
 800456c:	20027870 	.word	0x20027870
 8004570:	20027cc0 	.word	0x20027cc0
 8004574:	20027cd4 	.word	0x20027cd4

08004578 <masterExitRoutine>:

void masterExitRoutine(void) {
 8004578:	b580      	push	{r7, lr}
 800457a:	af00      	add	r7, sp, #0
	if (prevLogMessage.blinkEnabled == SENSOR_ENABLE) {
 800457c:	4b14      	ldr	r3, [pc, #80]	; (80045d0 <masterExitRoutine+0x58>)
 800457e:	789b      	ldrb	r3, [r3, #2]
 8004580:	2b01      	cmp	r3, #1
 8004582:	d105      	bne.n	8004590 <masterExitRoutine+0x18>
		osThreadFlagsSet(blinkTaskHandle, 0x00000002U);
 8004584:	4b13      	ldr	r3, [pc, #76]	; (80045d4 <masterExitRoutine+0x5c>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2102      	movs	r1, #2
 800458a:	4618      	mov	r0, r3
 800458c:	f009 f914 	bl	800d7b8 <osThreadFlagsSet>
	}

	if (prevLogMessage.positionEnabled == SENSOR_ENABLE) {
 8004590:	4b0f      	ldr	r3, [pc, #60]	; (80045d0 <masterExitRoutine+0x58>)
 8004592:	795b      	ldrb	r3, [r3, #5]
 8004594:	2b01      	cmp	r3, #1
 8004596:	d104      	bne.n	80045a2 <masterExitRoutine+0x2a>
		// stop timer for 3D position sensing
		osTimerStop(viveTimerHandle);
 8004598:	4b0f      	ldr	r3, [pc, #60]	; (80045d8 <masterExitRoutine+0x60>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4618      	mov	r0, r3
 800459e:	f009 fb59 	bl	800dc54 <osTimerStop>
	}

	if ((prevLogMessage.tempEnabled == SENSOR_ENABLE)) {
 80045a2:	4b0b      	ldr	r3, [pc, #44]	; (80045d0 <masterExitRoutine+0x58>)
 80045a4:	78db      	ldrb	r3, [r3, #3]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d105      	bne.n	80045b6 <masterExitRoutine+0x3e>
		osThreadFlagsSet(interProcTaskHandle, 0x00000002U);
 80045aa:	4b0c      	ldr	r3, [pc, #48]	; (80045dc <masterExitRoutine+0x64>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2102      	movs	r1, #2
 80045b0:	4618      	mov	r0, r3
 80045b2:	f009 f901 	bl	800d7b8 <osThreadFlagsSet>
	}

	if ((prevLogMessage.intertialEnabled == SENSOR_ENABLE)) {
 80045b6:	4b06      	ldr	r3, [pc, #24]	; (80045d0 <masterExitRoutine+0x58>)
 80045b8:	791b      	ldrb	r3, [r3, #4]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d105      	bne.n	80045ca <masterExitRoutine+0x52>
		osThreadFlagsSet(inertialTaskHandle, 0x00000002U);
 80045be:	4b08      	ldr	r3, [pc, #32]	; (80045e0 <masterExitRoutine+0x68>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2102      	movs	r1, #2
 80045c4:	4618      	mov	r0, r3
 80045c6:	f009 f8f7 	bl	800d7b8 <osThreadFlagsSet>
	}

}
 80045ca:	bf00      	nop
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	20027860 	.word	0x20027860
 80045d4:	2002786c 	.word	0x2002786c
 80045d8:	20027870 	.word	0x20027870
 80045dc:	20027cc0 	.word	0x20027cc0
 80045e0:	20027cd4 	.word	0x20027cd4

080045e4 <packetizeData>:

RTC_TimeTypeDef RTC_time;
RTC_DateTypeDef RTC_date;

void packetizeData(struct LogPacket *packet, struct blinkData *blink,
		struct parsedSecondaryProcessorPacket *processorMsg, struct inertialData *inertialMsg, VIVEVars *posMsg) {
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]
 80045f0:	603b      	str	r3, [r7, #0]
	// get processor tick counts (in terms of ms)
	packet->tick_ms = HAL_GetTick();
 80045f2:	f001 fc4d 	bl	8005e90 <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
//	HAL_RTC_GetTime(&hrtc, &RTC_time, RTC_FORMAT_BIN);
//	HAL_RTC_GetDate(&hrtc, &RTC_date, RTC_FORMAT_BIN);
//	packet->epoch = RTC_ToEpoch(&RTC_time, &RTC_date);

	// add sensor data
	memcpy(&(packet->blink), blink, sizeof(struct blinkData));
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	226c      	movs	r2, #108	; 0x6c
 8004602:	68b9      	ldr	r1, [r7, #8]
 8004604:	4618      	mov	r0, r3
 8004606:	f010 fdb1 	bl	801516c <memcpy>
	memcpy(&(packet->procData), processorMsg, sizeof(struct parsedSecondaryProcessorPacket));
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	336c      	adds	r3, #108	; 0x6c
 800460e:	2218      	movs	r2, #24
 8004610:	6879      	ldr	r1, [r7, #4]
 8004612:	4618      	mov	r0, r3
 8004614:	f010 fdaa 	bl	801516c <memcpy>
	memcpy(&(packet->inertial), inertialMsg, sizeof(struct inertialData));
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	3384      	adds	r3, #132	; 0x84
 800461c:	2228      	movs	r2, #40	; 0x28
 800461e:	6839      	ldr	r1, [r7, #0]
 8004620:	4618      	mov	r0, r3
 8004622:	f010 fda3 	bl	801516c <memcpy>
	memcpy(&(packet->pos), posMsg, sizeof(struct VIVEVars));
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	33ac      	adds	r3, #172	; 0xac
 800462a:	2218      	movs	r2, #24
 800462c:	69b9      	ldr	r1, [r7, #24]
 800462e:	4618      	mov	r0, r3
 8004630:	f010 fd9c 	bl	801516c <memcpy>
}
 8004634:	bf00      	nop
 8004636:	3710      	adds	r7, #16
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <vector_push>:
	kCycleFixAcquired = 5,
	kCycleFixMax = 10
};

void vector_push(vector *self, Pulse *item)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
    if (self->count < MAX_CAPACITY){
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800464a:	2b0f      	cmp	r3, #15
 800464c:	d80f      	bhi.n	800466e <vector_push+0x32>
    	self->items[self->count++] = *item;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004652:	1c51      	adds	r1, r2, #1
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6619      	str	r1, [r3, #96]	; 0x60
 8004658:	6879      	ldr	r1, [r7, #4]
 800465a:	4613      	mov	r3, r2
 800465c:	005b      	lsls	r3, r3, #1
 800465e:	4413      	add	r3, r2
 8004660:	005b      	lsls	r3, r3, #1
 8004662:	440b      	add	r3, r1
 8004664:	683a      	ldr	r2, [r7, #0]
 8004666:	6811      	ldr	r1, [r2, #0]
 8004668:	6019      	str	r1, [r3, #0]
 800466a:	8892      	ldrh	r2, [r2, #4]
 800466c:	809a      	strh	r2, [r3, #4]
    }
}
 800466e:	bf00      	nop
 8004670:	370c      	adds	r7, #12
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr

0800467a <vector_pop>:

Pulse vector_pop(vector *self){
 800467a:	b480      	push	{r7}
 800467c:	b085      	sub	sp, #20
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
 8004682:	6039      	str	r1, [r7, #0]
	if(self->count > 0){
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004688:	2b00      	cmp	r3, #0
 800468a:	d01c      	beq.n	80046c6 <vector_pop+0x4c>
		Pulse last = self->items[self->count - 1];
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004690:	1e5a      	subs	r2, r3, #1
 8004692:	6839      	ldr	r1, [r7, #0]
 8004694:	4613      	mov	r3, r2
 8004696:	005b      	lsls	r3, r3, #1
 8004698:	4413      	add	r3, r2
 800469a:	005b      	lsls	r3, r3, #1
 800469c:	18ca      	adds	r2, r1, r3
 800469e:	f107 0308 	add.w	r3, r7, #8
 80046a2:	6810      	ldr	r0, [r2, #0]
 80046a4:	6018      	str	r0, [r3, #0]
 80046a6:	8892      	ldrh	r2, [r2, #4]
 80046a8:	809a      	strh	r2, [r3, #4]
		self->count--;
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046ae:	1e5a      	subs	r2, r3, #1
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	661a      	str	r2, [r3, #96]	; 0x60
		return last;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	461a      	mov	r2, r3
 80046b8:	f107 0308 	add.w	r3, r7, #8
 80046bc:	6818      	ldr	r0, [r3, #0]
 80046be:	6010      	str	r0, [r2, #0]
 80046c0:	889b      	ldrh	r3, [r3, #4]
 80046c2:	8093      	strh	r3, [r2, #4]
 80046c4:	e005      	b.n	80046d2 <vector_pop+0x58>
	}
	return self->items[0];
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	683a      	ldr	r2, [r7, #0]
 80046ca:	6810      	ldr	r0, [r2, #0]
 80046cc:	6018      	str	r0, [r3, #0]
 80046ce:	8892      	ldrh	r2, [r2, #4]
 80046d0:	809a      	strh	r2, [r3, #4]
}
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	3714      	adds	r7, #20
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr

080046de <vector_get>:

Pulse vector_get(vector *self, int index)
{
 80046de:	b480      	push	{r7}
 80046e0:	b085      	sub	sp, #20
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	60f8      	str	r0, [r7, #12]
 80046e6:	60b9      	str	r1, [r7, #8]
 80046e8:	607a      	str	r2, [r7, #4]
    if (index >= 0 && index < self->count){
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	db12      	blt.n	8004716 <vector_get+0x38>
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d90d      	bls.n	8004716 <vector_get+0x38>
    	return self->items[index];
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	68b9      	ldr	r1, [r7, #8]
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	4613      	mov	r3, r2
 8004702:	005b      	lsls	r3, r3, #1
 8004704:	4413      	add	r3, r2
 8004706:	005b      	lsls	r3, r3, #1
 8004708:	18ca      	adds	r2, r1, r3
 800470a:	4603      	mov	r3, r0
 800470c:	6811      	ldr	r1, [r2, #0]
 800470e:	6019      	str	r1, [r3, #0]
 8004710:	8892      	ldrh	r2, [r2, #4]
 8004712:	809a      	strh	r2, [r3, #4]
 8004714:	e005      	b.n	8004722 <vector_get+0x44>
    }
    return self->items[0];
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	68ba      	ldr	r2, [r7, #8]
 800471a:	6810      	ldr	r0, [r2, #0]
 800471c:	6018      	str	r0, [r3, #0]
 800471e:	8892      	ldrh	r2, [r2, #4]
 8004720:	809a      	strh	r2, [r3, #4]
}
 8004722:	68f8      	ldr	r0, [r7, #12]
 8004724:	3714      	adds	r7, #20
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr

0800472e <vector_clear>:

void vector_clear(vector *self){
 800472e:	b480      	push	{r7}
 8004730:	b083      	sub	sp, #12
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
	self->count = 0;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	661a      	str	r2, [r3, #96]	; 0x60
}
 800473c:	bf00      	nop
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr

08004748 <_PulseProcessor>:

void _PulseProcessor(PulseProcessor *self, uint32_t num_inputs){
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
	self->num_inputs_ = num_inputs;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	683a      	ldr	r2, [r7, #0]
 8004756:	601a      	str	r2, [r3, #0]
	self->cycle_fix_level_ = 0;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	605a      	str	r2, [r3, #4]
	self->cycle_idx_ = 0;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	60da      	str	r2, [r3, #12]


	for(int i = 0; i < NUM_BASE_STATIONS; i++){
 8004764:	2300      	movs	r3, #0
 8004766:	60fb      	str	r3, [r7, #12]
 8004768:	e00c      	b.n	8004784 <_PulseProcessor+0x3c>
		vector_clear(&self->cycle_long_pulses_[i]);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2264      	movs	r2, #100	; 0x64
 800476e:	fb02 f303 	mul.w	r3, r2, r3
 8004772:	3310      	adds	r3, #16
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	4413      	add	r3, r2
 8004778:	4618      	mov	r0, r3
 800477a:	f7ff ffd8 	bl	800472e <vector_clear>
	for(int i = 0; i < NUM_BASE_STATIONS; i++){
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	3301      	adds	r3, #1
 8004782:	60fb      	str	r3, [r7, #12]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2b01      	cmp	r3, #1
 8004788:	ddef      	ble.n	800476a <_PulseProcessor+0x22>
	}
	vector_clear(&self->cycle_short_pulses_);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	33d8      	adds	r3, #216	; 0xd8
 800478e:	4618      	mov	r0, r3
 8004790:	f7ff ffcd 	bl	800472e <vector_clear>
	vector_clear(&self->unclassified_long_pulses_);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800479a:	4618      	mov	r0, r3
 800479c:	f7ff ffc7 	bl	800472e <vector_clear>
	self->time_from_last_long_pulse_ = 0;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f8a3 22c8 	strh.w	r2, [r3, #712]	; 0x2c8
}
 80047a8:	bf00      	nop
 80047aa:	3710      	adds	r7, #16
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <consume_pulse>:

uint8_t prev_pulse_short = 0;
void consume_pulse(PulseProcessor *self, Pulse* p){
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
	//vector_push(&debug_ar, p);
	if(p->pulse_len >= MAX_LONG_PULSE_LEN){
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	889b      	ldrh	r3, [r3, #4]
 80047be:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80047c2:	d303      	bcc.n	80047cc <consume_pulse+0x1c>
		//Ignore very long pulses
		prev_pulse_short = 0;
 80047c4:	4b0f      	ldr	r3, [pc, #60]	; (8004804 <consume_pulse+0x54>)
 80047c6:	2200      	movs	r2, #0
 80047c8:	701a      	strb	r2, [r3, #0]
		if(prev_pulse_short != 1){ // check to make sure this isnt a duplicate pulse (if it is, ignore!)
			process_short_pulse(self, p);
			prev_pulse_short = 1;
		}
	}
}
 80047ca:	e016      	b.n	80047fa <consume_pulse+0x4a>
	else if(p->pulse_len >= MIN_LONG_PULSE_LEN){ // Long pulse - likely sync pulse
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	889b      	ldrh	r3, [r3, #4]
 80047d0:	2b27      	cmp	r3, #39	; 0x27
 80047d2:	d907      	bls.n	80047e4 <consume_pulse+0x34>
		prev_pulse_short = 0;
 80047d4:	4b0b      	ldr	r3, [pc, #44]	; (8004804 <consume_pulse+0x54>)
 80047d6:	2200      	movs	r2, #0
 80047d8:	701a      	strb	r2, [r3, #0]
		process_long_pulse(self, p);
 80047da:	6839      	ldr	r1, [r7, #0]
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f000 f813 	bl	8004808 <process_long_pulse>
}
 80047e2:	e00a      	b.n	80047fa <consume_pulse+0x4a>
		if(prev_pulse_short != 1){ // check to make sure this isnt a duplicate pulse (if it is, ignore!)
 80047e4:	4b07      	ldr	r3, [pc, #28]	; (8004804 <consume_pulse+0x54>)
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d006      	beq.n	80047fa <consume_pulse+0x4a>
			process_short_pulse(self, p);
 80047ec:	6839      	ldr	r1, [r7, #0]
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 f89c 	bl	800492c <process_short_pulse>
			prev_pulse_short = 1;
 80047f4:	4b03      	ldr	r3, [pc, #12]	; (8004804 <consume_pulse+0x54>)
 80047f6:	2201      	movs	r2, #1
 80047f8:	701a      	strb	r2, [r3, #0]
}
 80047fa:	bf00      	nop
 80047fc:	3708      	adds	r7, #8
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	20000acc 	.word	0x20000acc

08004808 <process_long_pulse>:

void process_long_pulse(PulseProcessor *self, Pulse* p){
 8004808:	b580      	push	{r7, lr}
 800480a:	b088      	sub	sp, #32
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
	if(self->cycle_fix_level_ == kCycleFixNone){
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d144      	bne.n	80048a4 <process_long_pulse+0x9c>
        // Bootstrap mode. We keep the previous long pulse in unclassified_long_pulses_ vector.
        // With this algorithm 2 base stations needed for a fix. We search for a situation where the last pulse was
        // second in last cycle, which means (8333-400) us difference in start time.
		if(self->unclassified_long_pulses_.count > 0){
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8004820:	2b00      	cmp	r3, #0
 8004822:	d03f      	beq.n	80048a4 <process_long_pulse+0x9c>
			Pulse last_long_pulse = vector_pop(&self->unclassified_long_pulses_);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f503 729e 	add.w	r2, r3, #316	; 0x13c
 800482a:	f107 0308 	add.w	r3, r7, #8
 800482e:	4611      	mov	r1, r2
 8004830:	4618      	mov	r0, r3
 8004832:	f7ff ff22 	bl	800467a <vector_pop>

			self->time_from_last_long_pulse_ = p->start_time - last_long_pulse.start_time;
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	885a      	ldrh	r2, [r3, #2]
 800483a:	897b      	ldrh	r3, [r7, #10]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	b29a      	uxth	r2, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f8a3 22c8 	strh.w	r2, [r3, #712]	; 0x2c8


			int delta = self->time_from_last_long_pulse_ - (CYCLE_PERIOD - long_pulse_starts[1]);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f8b3 32c8 	ldrh.w	r3, [r3, #712]	; 0x2c8
 800484c:	461a      	mov	r2, r3
 800484e:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 8004852:	f5c3 5302 	rsb	r3, r3, #8320	; 0x2080
 8004856:	330d      	adds	r3, #13
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	617b      	str	r3, [r7, #20]
			if(-LONG_PULSE_STARTS_ACCEPTED_RANGE <= delta && delta < LONG_PULSE_STARTS_ACCEPTED_RANGE){
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	f113 0f1e 	cmn.w	r3, #30
 8004862:	db1c      	blt.n	800489e <process_long_pulse+0x96>
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	2b1d      	cmp	r3, #29
 8004868:	dc19      	bgt.n	800489e <process_long_pulse+0x96>
                // Found candidate first pulse.
                self->cycle_fix_level_ = kCycleFixCandidate;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2201      	movs	r2, #1
 800486e:	605a      	str	r2, [r3, #4]
                self->cycle_start_time_ = p->start_time;
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	885a      	ldrh	r2, [r3, #2]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	811a      	strh	r2, [r3, #8]
                self->cycle_idx_ = 0;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	60da      	str	r2, [r3, #12]

                reset(&self->phase_classifier_);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8004884:	4618      	mov	r0, r3
 8004886:	f7fd f84b 	bl	8001920 <reset>

                reset_cycle_long_pulses(self);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 fa64 	bl	8004d58 <reset_cycle_long_pulses>
                reset_unclassified_long_pulses(self);
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f000 fa7c 	bl	8004d8e <reset_unclassified_long_pulses>
                reset_cycle_short_pulses(self);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 fa87 	bl	8004daa <reset_cycle_short_pulses>
 800489c:	e002      	b.n	80048a4 <process_long_pulse+0x9c>
            }
			else{
				reset_unclassified_long_pulses(self);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 fa75 	bl	8004d8e <reset_unclassified_long_pulses>
			}
		}
	}

    // Put the pulse into either one of two buckets, or keep it as unclassified.
    uint8_t pulse_classified = 0;
 80048a4:	2300      	movs	r3, #0
 80048a6:	77fb      	strb	r3, [r7, #31]
    if (self->cycle_fix_level_ >= kCycleFixCandidate) {
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d02d      	beq.n	800490c <process_long_pulse+0x104>
        // Put pulse into one of two buckets by start time.
    	uint16_t time_from_cycle_start = p->start_time - self->cycle_start_time_;
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	885a      	ldrh	r2, [r3, #2]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	891b      	ldrh	r3, [r3, #8]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	827b      	strh	r3, [r7, #18]
        for (int i = 0; i < NUM_BASE_STATIONS; i++) {
 80048bc:	2300      	movs	r3, #0
 80048be:	61bb      	str	r3, [r7, #24]
 80048c0:	e021      	b.n	8004906 <process_long_pulse+0xfe>
        	int16_t delta = time_from_cycle_start - long_pulse_starts[i];
 80048c2:	4a19      	ldr	r2, [pc, #100]	; (8004928 <process_long_pulse+0x120>)
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048ca:	8a7a      	ldrh	r2, [r7, #18]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	823b      	strh	r3, [r7, #16]
        	if(-LONG_PULSE_STARTS_ACCEPTED_RANGE <= delta && delta < LONG_PULSE_STARTS_ACCEPTED_RANGE) {
 80048d2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80048d6:	f113 0f1e 	cmn.w	r3, #30
 80048da:	db11      	blt.n	8004900 <process_long_pulse+0xf8>
 80048dc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80048e0:	2b1d      	cmp	r3, #29
 80048e2:	dc0d      	bgt.n	8004900 <process_long_pulse+0xf8>
                vector_push(&self->cycle_long_pulses_[i], p);
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	2264      	movs	r2, #100	; 0x64
 80048e8:	fb02 f303 	mul.w	r3, r2, r3
 80048ec:	3310      	adds	r3, #16
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	4413      	add	r3, r2
 80048f2:	6839      	ldr	r1, [r7, #0]
 80048f4:	4618      	mov	r0, r3
 80048f6:	f7ff fea1 	bl	800463c <vector_push>
                pulse_classified = 1;
 80048fa:	2301      	movs	r3, #1
 80048fc:	77fb      	strb	r3, [r7, #31]
                break;
 80048fe:	e005      	b.n	800490c <process_long_pulse+0x104>
        for (int i = 0; i < NUM_BASE_STATIONS; i++) {
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	3301      	adds	r3, #1
 8004904:	61bb      	str	r3, [r7, #24]
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	2b01      	cmp	r3, #1
 800490a:	ddda      	ble.n	80048c2 <process_long_pulse+0xba>
            }
        }
    }
    if (!pulse_classified){
 800490c:	7ffb      	ldrb	r3, [r7, #31]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d106      	bne.n	8004920 <process_long_pulse+0x118>
    	vector_push(&self->unclassified_long_pulses_, p);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8004918:	6839      	ldr	r1, [r7, #0]
 800491a:	4618      	mov	r0, r3
 800491c:	f7ff fe8e 	bl	800463c <vector_push>
    }
}
 8004920:	bf00      	nop
 8004922:	3720      	adds	r7, #32
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	08016ab4 	.word	0x08016ab4

0800492c <process_short_pulse>:

void process_short_pulse(PulseProcessor *self, Pulse *p){
 800492c:	b580      	push	{r7, lr}
 800492e:	b082      	sub	sp, #8
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
	if (self->cycle_fix_level_ >= kCycleFixCandidate && p->input_idx < self->num_inputs_) {
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00f      	beq.n	800495e <process_short_pulse+0x32>
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	461a      	mov	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	429a      	cmp	r2, r3
 800494a:	d208      	bcs.n	800495e <process_short_pulse+0x32>
	    // TODO: Filter out pulses outside of current cycle.
		vector_push(&self->cycle_short_pulses_, p);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	33d8      	adds	r3, #216	; 0xd8
 8004950:	6839      	ldr	r1, [r7, #0]
 8004952:	4618      	mov	r0, r3
 8004954:	f7ff fe72 	bl	800463c <vector_push>

		//We can process the cycle now
		process_cycle_fix(self);
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f000 f805 	bl	8004968 <process_cycle_fix>
	}
}
 800495e:	bf00      	nop
 8004960:	3708      	adds	r7, #8
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
	...

08004968 <process_cycle_fix>:

void process_cycle_fix(PulseProcessor *self) {
 8004968:	b580      	push	{r7, lr}
 800496a:	b0a2      	sub	sp, #136	; 0x88
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
    int pulse_start_corrections[NUM_BASE_STATIONS] = {};
 8004970:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004974:	2200      	movs	r2, #0
 8004976:	601a      	str	r2, [r3, #0]
 8004978:	605a      	str	r2, [r3, #4]
    uint16_t pulse_lens[NUM_BASE_STATIONS] = {};
 800497a:	2300      	movs	r3, #0
 800497c:	64fb      	str	r3, [r7, #76]	; 0x4c
    // Check if we have long pulses from at least one base station.
    if (self->cycle_long_pulses_[0].count > 0 || self->cycle_long_pulses_[1].count > 0) {
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004982:	2b00      	cmp	r3, #0
 8004984:	d105      	bne.n	8004992 <process_cycle_fix+0x2a>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800498c:	2b00      	cmp	r3, #0
 800498e:	f000 80b7 	beq.w	8004b00 <process_cycle_fix+0x198>
        // Increase fix level if we have pulses from both stations.
        if (self->cycle_fix_level_ < kCycleFixMax && self->cycle_long_pulses_[0].count > 0 && self->cycle_long_pulses_[1].count > 0){
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	2b09      	cmp	r3, #9
 8004998:	d80d      	bhi.n	80049b6 <process_cycle_fix+0x4e>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d009      	beq.n	80049b6 <process_cycle_fix+0x4e>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d004      	beq.n	80049b6 <process_cycle_fix+0x4e>
        	self->cycle_fix_level_++;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	1c5a      	adds	r2, r3, #1
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	605a      	str	r2, [r3, #4]
        }

        // Average out long pulse lengths and start times for each base station across sensors.
        // pulse_start_corrections is the delta between actual start time and expected start time.
        // TODO: Take into account previous cycles as well, i.e. adjust slowly.
        for (int b = 0; b < NUM_BASE_STATIONS; b++){
 80049b6:	2300      	movs	r3, #0
 80049b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80049bc:	e090      	b.n	8004ae0 <process_cycle_fix+0x178>
        	uint32_t num_pulses = self->cycle_long_pulses_[b].count;
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80049c4:	2164      	movs	r1, #100	; 0x64
 80049c6:	fb01 f303 	mul.w	r3, r1, r3
 80049ca:	4413      	add	r3, r2
 80049cc:	3370      	adds	r3, #112	; 0x70
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	677b      	str	r3, [r7, #116]	; 0x74
            if (num_pulses) {
 80049d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d07e      	beq.n	8004ad6 <process_cycle_fix+0x16e>
            	uint16_t expected_start_time = self->cycle_start_time_ + long_pulse_starts[b];
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	891a      	ldrh	r2, [r3, #8]
 80049dc:	49c0      	ldr	r1, [pc, #768]	; (8004ce0 <process_cycle_fix+0x378>)
 80049de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80049e2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80049e6:	4413      	add	r3, r2
 80049e8:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
                for (uint32_t i = 0; i < num_pulses; i++) {
 80049ec:	2300      	movs	r3, #0
 80049ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80049f2:	e03e      	b.n	8004a72 <process_cycle_fix+0x10a>
                    const Pulse pulse = vector_get(&self->cycle_long_pulses_[b], i);
 80049f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80049f8:	2264      	movs	r2, #100	; 0x64
 80049fa:	fb02 f303 	mul.w	r3, r2, r3
 80049fe:	3310      	adds	r3, #16
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	18d1      	adds	r1, r2, r3
 8004a04:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004a08:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f7ff fe66 	bl	80046de <vector_get>
                    pulse_start_corrections[b] += pulse.start_time - expected_start_time;
 8004a12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004a1c:	4413      	add	r3, r2
 8004a1e:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8004a22:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004a26:	4619      	mov	r1, r3
 8004a28:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8004a2c:	1acb      	subs	r3, r1, r3
 8004a2e:	441a      	add	r2, r3
 8004a30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004a3a:	440b      	add	r3, r1
 8004a3c:	f843 2c38 	str.w	r2, [r3, #-56]
                    pulse_lens[b] += pulse.pulse_len;
 8004a40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a44:	005b      	lsls	r3, r3, #1
 8004a46:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004a4a:	4413      	add	r3, r2
 8004a4c:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8004a50:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004a54:	4413      	add	r3, r2
 8004a56:	b29a      	uxth	r2, r3
 8004a58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a5c:	005b      	lsls	r3, r3, #1
 8004a5e:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004a62:	440b      	add	r3, r1
 8004a64:	f823 2c3c 	strh.w	r2, [r3, #-60]
                for (uint32_t i = 0; i < num_pulses; i++) {
 8004a68:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a6c:	3301      	adds	r3, #1
 8004a6e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a72:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004a76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d3bb      	bcc.n	80049f4 <process_cycle_fix+0x8c>
                }
                if (num_pulses > 1) {
 8004a7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d929      	bls.n	8004ad6 <process_cycle_fix+0x16e>
                    pulse_start_corrections[b] /= num_pulses;
 8004a82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004a8c:	4413      	add	r3, r2
 8004a8e:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8004a92:	461a      	mov	r2, r3
 8004a94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004aa6:	440b      	add	r3, r1
 8004aa8:	f843 2c38 	str.w	r2, [r3, #-56]
                    pulse_lens[b] /= num_pulses;
 8004aac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ab0:	005b      	lsls	r3, r3, #1
 8004ab2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004ab6:	4413      	add	r3, r2
 8004ab8:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8004abc:	461a      	mov	r2, r3
 8004abe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac4:	b29a      	uxth	r2, r3
 8004ac6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004aca:	005b      	lsls	r3, r3, #1
 8004acc:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004ad0:	440b      	add	r3, r1
 8004ad2:	f823 2c3c 	strh.w	r2, [r3, #-60]
        for (int b = 0; b < NUM_BASE_STATIONS; b++){
 8004ad6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ada:	3301      	adds	r3, #1
 8004adc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004ae0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	f77f af6a 	ble.w	80049be <process_cycle_fix+0x56>
                }
            }
        }
        // Send pulse lengths to phase classifier.
        process_pulse_lengths(&self->phase_classifier_, self->cycle_idx_, pulse_lens);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f503 70d0 	add.w	r0, r3, #416	; 0x1a0
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8004af8:	4619      	mov	r1, r3
 8004afa:	f7fc fe8f 	bl	800181c <process_pulse_lengths>
 8004afe:	e008      	b.n	8004b12 <process_cycle_fix+0x1aa>
    }
    else {
        // No long pulses this cycle. We can survive several of such cycles, but our confidence in timing sinks.
        //self->cycle_fix_level_--;
    	if(self->cycle_fix_level_ > 0){
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d004      	beq.n	8004b12 <process_cycle_fix+0x1aa>
    		self->cycle_fix_level_--;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	1e5a      	subs	r2, r3, #1
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	605a      	str	r2, [r3, #4]
    	}
    }

    // Given the cycle phase, we can put the angle timings to a correct bucket.

    int cycle_phase = get_phase(&self->phase_classifier_, self->cycle_idx_);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f503 72d0 	add.w	r2, r3, #416	; 0x1a0
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	4610      	mov	r0, r2
 8004b20:	f7fc fee6 	bl	80018f0 <get_phase>
 8004b24:	66f8      	str	r0, [r7, #108]	; 0x6c
    if (cycle_phase >= 0) {
 8004b26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	f2c0 80b5 	blt.w	8004c98 <process_cycle_fix+0x330>
    	//UART_Print_int32_t(cycle_phase);
        // From (potentially several) short pulses for the same input, we choose the longest one.
        Pulse *short_pulses[MAX_NUM_INPUTS] = {};
 8004b2e:	f107 030c 	add.w	r3, r7, #12
 8004b32:	2220      	movs	r2, #32
 8004b34:	2100      	movs	r1, #0
 8004b36:	4618      	mov	r0, r3
 8004b38:	f010 fb23 	bl	8015182 <memset>
        uint16_t short_pulse_timings[MAX_NUM_INPUTS] = {};
 8004b3c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004b40:	2200      	movs	r2, #0
 8004b42:	601a      	str	r2, [r3, #0]
 8004b44:	605a      	str	r2, [r3, #4]
 8004b46:	609a      	str	r2, [r3, #8]
 8004b48:	60da      	str	r2, [r3, #12]

        //Base 0 is emitting during cycle phases 0 and 1. Base 1 is emitting during cycle phases 2 and 3.
        uint32_t emitting_base = cycle_phase >> 1;
 8004b4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b4c:	105b      	asrs	r3, r3, #1
 8004b4e:	66bb      	str	r3, [r7, #104]	; 0x68
        uint16_t base_pulse_start = self->cycle_start_time_ + long_pulse_starts[emitting_base] + pulse_start_corrections[emitting_base];
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	891a      	ldrh	r2, [r3, #8]
 8004b54:	4962      	ldr	r1, [pc, #392]	; (8004ce0 <process_cycle_fix+0x378>)
 8004b56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b58:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	b29a      	uxth	r2, r3
 8004b60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004b68:	440b      	add	r3, r1
 8004b6a:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	4413      	add	r3, r2
 8004b72:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
        for (uint32_t i = 0; i < self->cycle_short_pulses_.count; i++) {
 8004b76:	2300      	movs	r3, #0
 8004b78:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004b7a:	e04a      	b.n	8004c12 <process_cycle_fix+0x2aa>
            Pulse p = vector_get(&self->cycle_short_pulses_, i);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f103 01d8 	add.w	r1, r3, #216	; 0xd8
 8004b82:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004b84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f7ff fda8 	bl	80046de <vector_get>
            uint32_t input_idx = p.input_idx;
 8004b8e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004b92:	65fb      	str	r3, [r7, #92]	; 0x5c

            // To get better precision, we calculate pulse timing based on the long pulse from the same base station.
            uint16_t pulse_timing = p.start_time + p.pulse_len / 2 - base_pulse_start;
 8004b94:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004b96:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004b98:	085b      	lsrs	r3, r3, #1
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	4413      	add	r3, r2
 8004b9e:	b29a      	uxth	r2, r3
 8004ba0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

            // Get longest laser pulse.
            if (SHORT_PULSE_MIN_TIME < pulse_timing && pulse_timing < SHORT_PULSE_MAX_TIME){
 8004baa:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004bae:	f5b3 6f99 	cmp.w	r3, #1224	; 0x4c8
 8004bb2:	d32b      	bcc.n	8004c0c <process_cycle_fix+0x2a4>
 8004bb4:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004bb8:	f641 2278 	movw	r2, #6776	; 0x1a78
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d825      	bhi.n	8004c0c <process_cycle_fix+0x2a4>
            	if (!short_pulses[input_idx] || short_pulses[input_idx]->pulse_len < p.pulse_len) {
 8004bc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004bc8:	4413      	add	r3, r2
 8004bca:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00a      	beq.n	8004be8 <process_cycle_fix+0x280>
 8004bd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004bda:	4413      	add	r3, r2
 8004bdc:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8004be0:	889a      	ldrh	r2, [r3, #4]
 8004be2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d211      	bcs.n	8004c0c <process_cycle_fix+0x2a4>
					short_pulses[input_idx] = &p;
 8004be8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004bf0:	4413      	add	r3, r2
 8004bf2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8004bf6:	f843 2c7c 	str.w	r2, [r3, #-124]
					short_pulse_timings[input_idx] = pulse_timing;
 8004bfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bfc:	005b      	lsls	r3, r3, #1
 8004bfe:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004c02:	4413      	add	r3, r2
 8004c04:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8004c08:	f823 2c54 	strh.w	r2, [r3, #-84]
        for (uint32_t i = 0; i < self->cycle_short_pulses_.count; i++) {
 8004c0c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004c0e:	3301      	adds	r3, #1
 8004c10:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8004c18:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d3ae      	bcc.n	8004b7c <process_cycle_fix+0x214>
            	}
            }
        }

        // Calculate the angles for inputs where we saw short pulses.
        for (uint32_t i = 0; i < self->num_inputs_; i++){
 8004c1e:	2300      	movs	r3, #0
 8004c20:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c22:	e034      	b.n	8004c8e <process_cycle_fix+0x326>
            if (short_pulses[i]) {
 8004c24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004c2c:	4413      	add	r3, r2
 8004c2e:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d028      	beq.n	8004c88 <process_cycle_fix+0x320>
                SensorAngles *angles = &self->angles_frame_.sensors[i];
 8004c36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c38:	015b      	lsls	r3, r3, #5
 8004c3a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	4413      	add	r3, r2
 8004c42:	663b      	str	r3, [r7, #96]	; 0x60
                angles->angles[cycle_phase] = (float)M_PI * ((int)(short_pulse_timings[i] - ANGLE_CENTER_LEN)) / (float)CYCLE_PERIOD;
 8004c44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c46:	005b      	lsls	r3, r3, #1
 8004c48:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004c4c:	4413      	add	r3, r2
 8004c4e:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8004c52:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8004c56:	ee07 3a90 	vmov	s15, r3
 8004c5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c5e:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004ce4 <process_cycle_fix+0x37c>
 8004c62:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004c66:	eddf 6a20 	vldr	s13, [pc, #128]	; 8004ce8 <process_cycle_fix+0x380>
 8004c6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004c6e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004c70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	4413      	add	r3, r2
 8004c76:	edc3 7a00 	vstr	s15, [r3]
                angles->updated_cycles[cycle_phase] = self->cycle_idx_;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	68d9      	ldr	r1, [r3, #12]
 8004c7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c80:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004c82:	3204      	adds	r2, #4
 8004c84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (uint32_t i = 0; i < self->num_inputs_; i++){
 8004c88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d3c5      	bcc.n	8004c24 <process_cycle_fix+0x2bc>
        }
    }

    // Send the data down the pipeline every 4th cycle (30Hz). Can be increased to 120Hz if needed.

    if ((cycle_phase >= 0) ? (cycle_phase == 3) : (self->cycle_idx_ % 4 == 0)) {
 8004c98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	db06      	blt.n	8004cac <process_cycle_fix+0x344>
 8004c9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ca0:	2b03      	cmp	r3, #3
 8004ca2:	bf0c      	ite	eq
 8004ca4:	2301      	moveq	r3, #1
 8004ca6:	2300      	movne	r3, #0
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	e008      	b.n	8004cbe <process_cycle_fix+0x356>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	f003 0303 	and.w	r3, r3, #3
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	bf0c      	ite	eq
 8004cb8:	2301      	moveq	r3, #1
 8004cba:	2300      	movne	r3, #0
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d02b      	beq.n	8004d1a <process_cycle_fix+0x3b2>
        self->angles_frame_.time = self->cycle_start_time_;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	891a      	ldrh	r2, [r3, #8]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
        self->angles_frame_.fix_level = (cycle_phase >= 0 && self->cycle_fix_level_ >= kCycleFixAcquired)
                                        ? kCycleSynced : kCycleSyncing;
 8004ccc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	db0c      	blt.n	8004cec <process_cycle_fix+0x384>
        self->angles_frame_.fix_level = (cycle_phase >= 0 && self->cycle_fix_level_ >= kCycleFixAcquired)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	2b04      	cmp	r3, #4
 8004cd8:	d908      	bls.n	8004cec <process_cycle_fix+0x384>
                                        ? kCycleSynced : kCycleSyncing;
 8004cda:	22c8      	movs	r2, #200	; 0xc8
 8004cdc:	e007      	b.n	8004cee <process_cycle_fix+0x386>
 8004cde:	bf00      	nop
 8004ce0:	08016ab4 	.word	0x08016ab4
 8004ce4:	40490fdb 	.word	0x40490fdb
 8004ce8:	46023400 	.word	0x46023400
 8004cec:	2264      	movs	r2, #100	; 0x64
        self->angles_frame_.fix_level = (cycle_phase >= 0 && self->cycle_fix_level_ >= kCycleFixAcquired)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
        self->angles_frame_.cycle_idx = self->cycle_idx_;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	68da      	ldr	r2, [r3, #12]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
        self->angles_frame_.phase_id = cycle_phase;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004d02:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4

        //UART_Print_float(self->angles_frame_.sensors[0].angles[0]);
        consume_angles(self->next, &self->angles_frame_);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f8d3 22cc 	ldr.w	r2, [r3, #716]	; 0x2cc
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004d12:	4619      	mov	r1, r3
 8004d14:	4610      	mov	r0, r2
 8004d16:	f7fd fc29 	bl	800256c <consume_angles>

    }

    // Prepare for the next cycle.
    reset_cycle_long_pulses(self);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 f81c 	bl	8004d58 <reset_cycle_long_pulses>
    reset_unclassified_long_pulses(self);
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f000 f834 	bl	8004d8e <reset_unclassified_long_pulses>
    reset_cycle_short_pulses(self);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 f83f 	bl	8004daa <reset_cycle_short_pulses>

    self->cycle_start_time_ += CYCLE_PERIOD + pulse_start_corrections[0];
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	891a      	ldrh	r2, [r3, #8]
 8004d30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	4413      	add	r3, r2
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8004d3c:	330d      	adds	r3, #13
 8004d3e:	b29a      	uxth	r2, r3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	811a      	strh	r2, [r3, #8]
    self->cycle_idx_++;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	1c5a      	adds	r2, r3, #1
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	60da      	str	r2, [r3, #12]
}
 8004d4e:	bf00      	nop
 8004d50:	3788      	adds	r7, #136	; 0x88
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop

08004d58 <reset_cycle_long_pulses>:

void reset_cycle_long_pulses(PulseProcessor *self){
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < NUM_BASE_STATIONS; i++){
 8004d60:	2300      	movs	r3, #0
 8004d62:	60fb      	str	r3, [r7, #12]
 8004d64:	e00c      	b.n	8004d80 <reset_cycle_long_pulses+0x28>
	    vector_clear(&self->cycle_long_pulses_[i]);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2264      	movs	r2, #100	; 0x64
 8004d6a:	fb02 f303 	mul.w	r3, r2, r3
 8004d6e:	3310      	adds	r3, #16
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	4413      	add	r3, r2
 8004d74:	4618      	mov	r0, r3
 8004d76:	f7ff fcda 	bl	800472e <vector_clear>
	for (int i = 0; i < NUM_BASE_STATIONS; i++){
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	60fb      	str	r3, [r7, #12]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	ddef      	ble.n	8004d66 <reset_cycle_long_pulses+0xe>
	}
}
 8004d86:	bf00      	nop
 8004d88:	3710      	adds	r7, #16
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}

08004d8e <reset_unclassified_long_pulses>:

void reset_unclassified_long_pulses(PulseProcessor *self){
 8004d8e:	b580      	push	{r7, lr}
 8004d90:	b082      	sub	sp, #8
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
	vector_clear(&self->unclassified_long_pulses_);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f7ff fcc6 	bl	800472e <vector_clear>
}
 8004da2:	bf00      	nop
 8004da4:	3708      	adds	r7, #8
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}

08004daa <reset_cycle_short_pulses>:

void reset_cycle_short_pulses(PulseProcessor *self){
 8004daa:	b580      	push	{r7, lr}
 8004dac:	b082      	sub	sp, #8
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
	vector_clear(&self->cycle_short_pulses_);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	33d8      	adds	r3, #216	; 0xd8
 8004db6:	4618      	mov	r0, r3
 8004db8:	f7ff fcb9 	bl	800472e <vector_clear>
}
 8004dbc:	bf00      	nop
 8004dbe:	3708      	adds	r7, #8
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	af00      	add	r7, sp, #0

}
 8004dc8:	bf00      	nop
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr

08004dd2 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8004dd2:	b480      	push	{r7}
 8004dd4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8004dd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004de2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004de6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004dea:	bf00      	nop
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	af00      	add	r7, sp, #0

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8004df8:	4b0b      	ldr	r3, [pc, #44]	; (8004e28 <MX_RTC_Init+0x34>)
 8004dfa:	4a0c      	ldr	r2, [pc, #48]	; (8004e2c <MX_RTC_Init+0x38>)
 8004dfc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004dfe:	4b0a      	ldr	r3, [pc, #40]	; (8004e28 <MX_RTC_Init+0x34>)
 8004e00:	2200      	movs	r2, #0
 8004e02:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8004e04:	4b08      	ldr	r3, [pc, #32]	; (8004e28 <MX_RTC_Init+0x34>)
 8004e06:	220f      	movs	r2, #15
 8004e08:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8004e0a:	4b07      	ldr	r3, [pc, #28]	; (8004e28 <MX_RTC_Init+0x34>)
 8004e0c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8004e10:	60da      	str	r2, [r3, #12]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004e12:	4805      	ldr	r0, [pc, #20]	; (8004e28 <MX_RTC_Init+0x34>)
 8004e14:	f007 f827 	bl	800be66 <HAL_RTC_Init>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d001      	beq.n	8004e22 <MX_RTC_Init+0x2e>
  {
    Error_Handler();
 8004e1e:	f7ff fa47 	bl	80042b0 <Error_Handler>
  }

}
 8004e22:	bf00      	nop
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	200283f4 	.word	0x200283f4
 8004e2c:	40002800 	.word	0x40002800

08004e30 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b082      	sub	sp, #8
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a04      	ldr	r2, [pc, #16]	; (8004e50 <HAL_RTC_MspInit+0x20>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d101      	bne.n	8004e46 <HAL_RTC_MspInit+0x16>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004e42:	f7ff ffc6 	bl	8004dd2 <LL_RCC_EnableRTC>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8004e46:	bf00      	nop
 8004e48:	3708      	adds	r7, #8
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	40002800 	.word	0x40002800

08004e54 <LL_AHB3_GRP1_EnableClock>:
{
 8004e54:	b480      	push	{r7}
 8004e56:	b085      	sub	sp, #20
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8004e5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8004e6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4013      	ands	r3, r2
 8004e76:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004e78:	68fb      	ldr	r3, [r7, #12]
}
 8004e7a:	bf00      	nop
 8004e7c:	3714      	adds	r7, #20
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr

08004e86 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004e86:	b580      	push	{r7, lr}
 8004e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8004e8a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004e8e:	f7ff ffe1 	bl	8004e54 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004e92:	2200      	movs	r2, #0
 8004e94:	210f      	movs	r1, #15
 8004e96:	f06f 0001 	mvn.w	r0, #1
 8004e9a:	f002 fd2c 	bl	80078f6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */
  HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn , 15, 0);
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	210f      	movs	r1, #15
 8004ea2:	202c      	movs	r0, #44	; 0x2c
 8004ea4:	f002 fd27 	bl	80078f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn , 15, 0);
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	210f      	movs	r1, #15
 8004eac:	202d      	movs	r0, #45	; 0x2d
 8004eae:	f002 fd22 	bl	80078f6 <HAL_NVIC_SetPriority>
  /* USER CODE END MspInit 1 */
}
 8004eb2:	bf00      	nop
 8004eb4:	bd80      	pop	{r7, pc}

08004eb6 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8004eb6:	b480      	push	{r7}
 8004eb8:	b085      	sub	sp, #20
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8004ebe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ec2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004ec4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004ece:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ed2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004eda:	68fb      	ldr	r3, [r7, #12]
}
 8004edc:	bf00      	nop
 8004ede:	3714      	adds	r7, #20
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b08c      	sub	sp, #48	; 0x30
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8004ef8:	2200      	movs	r2, #0
 8004efa:	6879      	ldr	r1, [r7, #4]
 8004efc:	2019      	movs	r0, #25
 8004efe:	f002 fcfa 	bl	80078f6 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 8004f02:	2019      	movs	r0, #25
 8004f04:	f002 fd11 	bl	800792a <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004f08:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004f0c:	f7ff ffd3 	bl	8004eb6 <LL_APB2_GRP1_EnableClock>
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004f10:	f107 0208 	add.w	r2, r7, #8
 8004f14:	f107 030c 	add.w	r3, r7, #12
 8004f18:	4611      	mov	r1, r2
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f006 fa96 	bl	800b44c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8004f20:	f006 fa7e 	bl	800b420 <HAL_RCC_GetPCLK2Freq>
 8004f24:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8004f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f28:	4a12      	ldr	r2, [pc, #72]	; (8004f74 <HAL_InitTick+0x8c>)
 8004f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f2e:	0c9b      	lsrs	r3, r3, #18
 8004f30:	3b01      	subs	r3, #1
 8004f32:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8004f34:	4b10      	ldr	r3, [pc, #64]	; (8004f78 <HAL_InitTick+0x90>)
 8004f36:	4a11      	ldr	r2, [pc, #68]	; (8004f7c <HAL_InitTick+0x94>)
 8004f38:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8004f3a:	4b0f      	ldr	r3, [pc, #60]	; (8004f78 <HAL_InitTick+0x90>)
 8004f3c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004f40:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8004f42:	4a0d      	ldr	r2, [pc, #52]	; (8004f78 <HAL_InitTick+0x90>)
 8004f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f46:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8004f48:	4b0b      	ldr	r3, [pc, #44]	; (8004f78 <HAL_InitTick+0x90>)
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f4e:	4b0a      	ldr	r3, [pc, #40]	; (8004f78 <HAL_InitTick+0x90>)
 8004f50:	2200      	movs	r2, #0
 8004f52:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8004f54:	4808      	ldr	r0, [pc, #32]	; (8004f78 <HAL_InitTick+0x90>)
 8004f56:	f007 f874 	bl	800c042 <HAL_TIM_Base_Init>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d104      	bne.n	8004f6a <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8004f60:	4805      	ldr	r0, [pc, #20]	; (8004f78 <HAL_InitTick+0x90>)
 8004f62:	f007 f8ef 	bl	800c144 <HAL_TIM_Base_Start_IT>
 8004f66:	4603      	mov	r3, r0
 8004f68:	e000      	b.n	8004f6c <HAL_InitTick+0x84>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3730      	adds	r7, #48	; 0x30
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	431bde83 	.word	0x431bde83
 8004f78:	20028418 	.word	0x20028418
 8004f7c:	40012c00 	.word	0x40012c00

08004f80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004f80:	b480      	push	{r7}
 8004f82:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004f84:	bf00      	nop
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr

08004f8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004f8e:	b480      	push	{r7}
 8004f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004f92:	e7fe      	b.n	8004f92 <HardFault_Handler+0x4>

08004f94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004f94:	b480      	push	{r7}
 8004f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004f98:	e7fe      	b.n	8004f98 <MemManage_Handler+0x4>

08004f9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004f9a:	b480      	push	{r7}
 8004f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004f9e:	e7fe      	b.n	8004f9e <BusFault_Handler+0x4>

08004fa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004fa4:	e7fe      	b.n	8004fa4 <UsageFault_Handler+0x4>

08004fa6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004fa6:	b480      	push	{r7}
 8004fa8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004faa:	bf00      	nop
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8004fb8:	2004      	movs	r0, #4
 8004fba:	f003 f9ab 	bl	8008314 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  // received message from secondary MCU that a message is ready
//  osSemaphoreRelease(interProcessorInterruptSemHandle);
  osThreadFlagsSet(interProcTaskHandle, 0x00000004U);
 8004fbe:	4b04      	ldr	r3, [pc, #16]	; (8004fd0 <EXTI2_IRQHandler+0x1c>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2104      	movs	r1, #4
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f008 fbf7 	bl	800d7b8 <osThreadFlagsSet>
  /* USER CODE END EXTI2_IRQn 1 */
}
 8004fca:	bf00      	nop
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	20027cc0 	.word	0x20027cc0

08004fd4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004fd8:	4802      	ldr	r0, [pc, #8]	; (8004fe4 <DMA1_Channel1_IRQHandler+0x10>)
 8004fda:	f002 fec4 	bl	8007d66 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004fde:	bf00      	nop
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	20027718 	.word	0x20027718

08004fe8 <COMP_IRQHandler>:

/**
  * @brief This function handles COMP1 and COMP2 interrupts through EXTI lines 20 and 21.
  */
void COMP_IRQHandler(void)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP_IRQn 0 */

  /* USER CODE END COMP_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 8004fec:	4802      	ldr	r0, [pc, #8]	; (8004ff8 <COMP_IRQHandler+0x10>)
 8004fee:	f002 fb19 	bl	8007624 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP_IRQn 1 */

  /* USER CODE END COMP_IRQn 1 */
}
 8004ff2:	bf00      	nop
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	20027ce4 	.word	0x20027ce4

08004ffc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8005000:	2020      	movs	r0, #32
 8005002:	f003 f987 	bl	8008314 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005006:	bf00      	nop
 8005008:	bd80      	pop	{r7, pc}
	...

0800500c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005010:	4803      	ldr	r0, [pc, #12]	; (8005020 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8005012:	f007 f9a1 	bl	800c358 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8005016:	4803      	ldr	r0, [pc, #12]	; (8005024 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8005018:	f007 f99e 	bl	800c358 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800501c:	bf00      	nop
 800501e:	bd80      	pop	{r7, pc}
 8005020:	20028418 	.word	0x20028418
 8005024:	20028498 	.word	0x20028498

08005028 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800502c:	4802      	ldr	r0, [pc, #8]	; (8005038 <I2C1_EV_IRQHandler+0x10>)
 800502e:	f003 fd87 	bl	8008b40 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8005032:	bf00      	nop
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	20027e74 	.word	0x20027e74

0800503c <IPCC_C1_TX_IRQHandler>:

/* USER CODE BEGIN 1 */
void IPCC_C1_TX_IRQHandler(void)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	af00      	add	r7, sp, #0
  HW_IPCC_Tx_Handler();
 8005040:	f00f fbe8 	bl	8014814 <HW_IPCC_Tx_Handler>

  return;
 8005044:	bf00      	nop
}
 8005046:	bd80      	pop	{r7, pc}

08005048 <IPCC_C1_RX_IRQHandler>:
void IPCC_C1_RX_IRQHandler(void)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	af00      	add	r7, sp, #0
  HW_IPCC_Rx_Handler();
 800504c:	f00f fb88 	bl	8014760 <HW_IPCC_Rx_Handler>
  return;
 8005050:	bf00      	nop
}
 8005052:	bd80      	pop	{r7, pc}

08005054 <TSC_IRQHandler>:

/**
  * @brief This function handles TSC global interrupt.
  */
void TSC_IRQHandler(void)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TSC_IRQn 0 */

  /* USER CODE END TSC_IRQn 0 */
  HAL_TSC_IRQHandler(&htsc);
 8005058:	4802      	ldr	r0, [pc, #8]	; (8005064 <TSC_IRQHandler+0x10>)
 800505a:	f008 fa3d 	bl	800d4d8 <HAL_TSC_IRQHandler>
  /* USER CODE BEGIN TSC_IRQn 1 */

  /* USER CODE END TSC_IRQn 1 */
}
 800505e:	bf00      	nop
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	2002850c 	.word	0x2002850c

08005068 <logApplication>:
 * @param[in]     aFormat     User string format.
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
void logApplication(appliLogLevel_t aLogLevel, appliLogRegion_t aLogRegion, const char *aFormat, ...)
{
 8005068:	b40c      	push	{r2, r3}
 800506a:	b480      	push	{r7}
 800506c:	b083      	sub	sp, #12
 800506e:	af00      	add	r7, sp, #0
 8005070:	4603      	mov	r3, r0
 8005072:	460a      	mov	r2, r1
 8005074:	71fb      	strb	r3, [r7, #7]
 8005076:	4613      	mov	r3, r2
 8005078:	71bb      	strb	r3, [r7, #6]
  }else
  {
    /* Print nothing */
  }
#endif /* CFG_DEBUG_TRACE */
}
 800507a:	bf00      	nop
 800507c:	370c      	adds	r7, #12
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	b002      	add	sp, #8
 8005086:	4770      	bx	lr

08005088 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005088:	b480      	push	{r7}
 800508a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 800508c:	4b26      	ldr	r3, [pc, #152]	; (8005128 <SystemInit+0xa0>)
 800508e:	2200      	movs	r2, #0
 8005090:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8005092:	4b25      	ldr	r3, [pc, #148]	; (8005128 <SystemInit+0xa0>)
 8005094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005098:	4a23      	ldr	r2, [pc, #140]	; (8005128 <SystemInit+0xa0>)
 800509a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800509e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80050a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050ac:	f043 0301 	orr.w	r3, r3, #1
 80050b0:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80050b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050b6:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80050ba:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80050bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050c6:	4b19      	ldr	r3, [pc, #100]	; (800512c <SystemInit+0xa4>)
 80050c8:	4013      	ands	r3, r2
 80050ca:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80050cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050d8:	f023 0305 	bic.w	r3, r3, #5
 80050dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80050e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80050e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050ec:	f023 0301 	bic.w	r3, r3, #1
 80050f0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80050f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050f8:	4a0d      	ldr	r2, [pc, #52]	; (8005130 <SystemInit+0xa8>)
 80050fa:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80050fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005100:	4a0b      	ldr	r2, [pc, #44]	; (8005130 <SystemInit+0xa8>)
 8005102:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005104:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800510e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005112:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005114:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005118:	2200      	movs	r2, #0
 800511a:	619a      	str	r2, [r3, #24]
}
 800511c:	bf00      	nop
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	e000ed00 	.word	0xe000ed00
 800512c:	faf6fefb 	.word	0xfaf6fefb
 8005130:	22041000 	.word	0x22041000

08005134 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8005134:	b480      	push	{r7}
 8005136:	b087      	sub	sp, #28
 8005138:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 800513a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	091b      	lsrs	r3, r3, #4
 8005142:	f003 030f 	and.w	r3, r3, #15
 8005146:	4a47      	ldr	r2, [pc, #284]	; (8005264 <SystemCoreClockUpdate+0x130>)
 8005148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800514c:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800514e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	f003 030c 	and.w	r3, r3, #12
 8005158:	2b0c      	cmp	r3, #12
 800515a:	d867      	bhi.n	800522c <SystemCoreClockUpdate+0xf8>
 800515c:	a201      	add	r2, pc, #4	; (adr r2, 8005164 <SystemCoreClockUpdate+0x30>)
 800515e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005162:	bf00      	nop
 8005164:	08005199 	.word	0x08005199
 8005168:	0800522d 	.word	0x0800522d
 800516c:	0800522d 	.word	0x0800522d
 8005170:	0800522d 	.word	0x0800522d
 8005174:	080051a1 	.word	0x080051a1
 8005178:	0800522d 	.word	0x0800522d
 800517c:	0800522d 	.word	0x0800522d
 8005180:	0800522d 	.word	0x0800522d
 8005184:	080051a9 	.word	0x080051a9
 8005188:	0800522d 	.word	0x0800522d
 800518c:	0800522d 	.word	0x0800522d
 8005190:	0800522d 	.word	0x0800522d
 8005194:	080051b1 	.word	0x080051b1
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8005198:	4a33      	ldr	r2, [pc, #204]	; (8005268 <SystemCoreClockUpdate+0x134>)
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	6013      	str	r3, [r2, #0]
      break;
 800519e:	e049      	b.n	8005234 <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 80051a0:	4b31      	ldr	r3, [pc, #196]	; (8005268 <SystemCoreClockUpdate+0x134>)
 80051a2:	4a32      	ldr	r2, [pc, #200]	; (800526c <SystemCoreClockUpdate+0x138>)
 80051a4:	601a      	str	r2, [r3, #0]
      break;
 80051a6:	e045      	b.n	8005234 <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80051a8:	4b2f      	ldr	r3, [pc, #188]	; (8005268 <SystemCoreClockUpdate+0x134>)
 80051aa:	4a31      	ldr	r2, [pc, #196]	; (8005270 <SystemCoreClockUpdate+0x13c>)
 80051ac:	601a      	str	r2, [r3, #0]
      break;
 80051ae:	e041      	b.n	8005234 <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80051b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	f003 0303 	and.w	r3, r3, #3
 80051ba:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 80051bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	091b      	lsrs	r3, r3, #4
 80051c4:	f003 0307 	and.w	r3, r3, #7
 80051c8:	3301      	adds	r3, #1
 80051ca:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	d105      	bne.n	80051de <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 80051d2:	4a26      	ldr	r2, [pc, #152]	; (800526c <SystemCoreClockUpdate+0x138>)
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80051da:	617b      	str	r3, [r7, #20]
 80051dc:	e00d      	b.n	80051fa <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2b03      	cmp	r3, #3
 80051e2:	d105      	bne.n	80051f0 <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 80051e4:	4a22      	ldr	r2, [pc, #136]	; (8005270 <SystemCoreClockUpdate+0x13c>)
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ec:	617b      	str	r3, [r7, #20]
 80051ee:	e004      	b.n	80051fa <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 80051f0:	693a      	ldr	r2, [r7, #16]
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051f8:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80051fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	0a1b      	lsrs	r3, r3, #8
 8005202:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	fb02 f303 	mul.w	r3, r2, r3
 800520c:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 800520e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	0f5b      	lsrs	r3, r3, #29
 8005216:	f003 0307 	and.w	r3, r3, #7
 800521a:	3301      	adds	r3, #1
 800521c:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	fbb2 f3f3 	udiv	r3, r2, r3
 8005226:	4a10      	ldr	r2, [pc, #64]	; (8005268 <SystemCoreClockUpdate+0x134>)
 8005228:	6013      	str	r3, [r2, #0]
      break;
 800522a:	e003      	b.n	8005234 <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 800522c:	4a0e      	ldr	r2, [pc, #56]	; (8005268 <SystemCoreClockUpdate+0x134>)
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	6013      	str	r3, [r2, #0]
      break;
 8005232:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005234:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	091b      	lsrs	r3, r3, #4
 800523c:	f003 030f 	and.w	r3, r3, #15
 8005240:	4a0c      	ldr	r2, [pc, #48]	; (8005274 <SystemCoreClockUpdate+0x140>)
 8005242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005246:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8005248:	4b07      	ldr	r3, [pc, #28]	; (8005268 <SystemCoreClockUpdate+0x134>)
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005252:	4a05      	ldr	r2, [pc, #20]	; (8005268 <SystemCoreClockUpdate+0x134>)
 8005254:	6013      	str	r3, [r2, #0]

}
 8005256:	bf00      	nop
 8005258:	371c      	adds	r7, #28
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop
 8005264:	08016b18 	.word	0x08016b18
 8005268:	20000078 	.word	0x20000078
 800526c:	00f42400 	.word	0x00f42400
 8005270:	01e84800 	.word	0x01e84800
 8005274:	08016ab8 	.word	0x08016ab8

08005278 <LL_AHB2_GRP1_EnableClock>:
{
 8005278:	b480      	push	{r7}
 800527a:	b085      	sub	sp, #20
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005280:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005284:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005286:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4313      	orrs	r3, r2
 800528e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005290:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005294:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4013      	ands	r3, r2
 800529a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800529c:	68fb      	ldr	r3, [r7, #12]
}
 800529e:	bf00      	nop
 80052a0:	3714      	adds	r7, #20
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr

080052aa <LL_APB1_GRP1_EnableClock>:
{
 80052aa:	b480      	push	{r7}
 80052ac:	b085      	sub	sp, #20
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80052b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052b6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80052b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4313      	orrs	r3, r2
 80052c0:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80052c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052c6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4013      	ands	r3, r2
 80052cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80052ce:	68fb      	ldr	r3, [r7, #12]
}
 80052d0:	bf00      	nop
 80052d2:	3714      	adds	r7, #20
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <LL_APB2_GRP1_EnableClock>:
{
 80052dc:	b480      	push	{r7}
 80052de:	b085      	sub	sp, #20
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80052e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052e8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80052ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80052f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052f8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4013      	ands	r3, r2
 80052fe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005300:	68fb      	ldr	r3, [r7, #12]
}
 8005302:	bf00      	nop
 8005304:	3714      	adds	r7, #20
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr
	...

08005310 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim16;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b08e      	sub	sp, #56	; 0x38
 8005314:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005316:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800531a:	2200      	movs	r2, #0
 800531c:	601a      	str	r2, [r3, #0]
 800531e:	605a      	str	r2, [r3, #4]
 8005320:	609a      	str	r2, [r3, #8]
 8005322:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005324:	f107 031c 	add.w	r3, r7, #28
 8005328:	2200      	movs	r2, #0
 800532a:	601a      	str	r2, [r3, #0]
 800532c:	605a      	str	r2, [r3, #4]
 800532e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005330:	463b      	mov	r3, r7
 8005332:	2200      	movs	r2, #0
 8005334:	601a      	str	r2, [r3, #0]
 8005336:	605a      	str	r2, [r3, #4]
 8005338:	609a      	str	r2, [r3, #8]
 800533a:	60da      	str	r2, [r3, #12]
 800533c:	611a      	str	r2, [r3, #16]
 800533e:	615a      	str	r2, [r3, #20]
 8005340:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8005342:	4b2d      	ldr	r3, [pc, #180]	; (80053f8 <MX_TIM2_Init+0xe8>)
 8005344:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005348:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 639;
 800534a:	4b2b      	ldr	r3, [pc, #172]	; (80053f8 <MX_TIM2_Init+0xe8>)
 800534c:	f240 227f 	movw	r2, #639	; 0x27f
 8005350:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005352:	4b29      	ldr	r3, [pc, #164]	; (80053f8 <MX_TIM2_Init+0xe8>)
 8005354:	2200      	movs	r2, #0
 8005356:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8005358:	4b27      	ldr	r3, [pc, #156]	; (80053f8 <MX_TIM2_Init+0xe8>)
 800535a:	2209      	movs	r2, #9
 800535c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800535e:	4b26      	ldr	r3, [pc, #152]	; (80053f8 <MX_TIM2_Init+0xe8>)
 8005360:	2200      	movs	r2, #0
 8005362:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005364:	4b24      	ldr	r3, [pc, #144]	; (80053f8 <MX_TIM2_Init+0xe8>)
 8005366:	2200      	movs	r2, #0
 8005368:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800536a:	4823      	ldr	r0, [pc, #140]	; (80053f8 <MX_TIM2_Init+0xe8>)
 800536c:	f006 fe69 	bl	800c042 <HAL_TIM_Base_Init>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d001      	beq.n	800537a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8005376:	f7fe ff9b 	bl	80042b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800537a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800537e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005380:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005384:	4619      	mov	r1, r3
 8005386:	481c      	ldr	r0, [pc, #112]	; (80053f8 <MX_TIM2_Init+0xe8>)
 8005388:	f007 fa1e 	bl	800c7c8 <HAL_TIM_ConfigClockSource>
 800538c:	4603      	mov	r3, r0
 800538e:	2b00      	cmp	r3, #0
 8005390:	d001      	beq.n	8005396 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8005392:	f7fe ff8d 	bl	80042b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8005396:	4818      	ldr	r0, [pc, #96]	; (80053f8 <MX_TIM2_Init+0xe8>)
 8005398:	f006 fefe 	bl	800c198 <HAL_TIM_PWM_Init>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d001      	beq.n	80053a6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80053a2:	f7fe ff85 	bl	80042b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80053a6:	2320      	movs	r3, #32
 80053a8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80053aa:	2300      	movs	r3, #0
 80053ac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80053ae:	f107 031c 	add.w	r3, r7, #28
 80053b2:	4619      	mov	r1, r3
 80053b4:	4810      	ldr	r0, [pc, #64]	; (80053f8 <MX_TIM2_Init+0xe8>)
 80053b6:	f007 fe8d 	bl	800d0d4 <HAL_TIMEx_MasterConfigSynchronization>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d001      	beq.n	80053c4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80053c0:	f7fe ff76 	bl	80042b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80053c4:	2360      	movs	r3, #96	; 0x60
 80053c6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 9;
 80053c8:	2309      	movs	r3, #9
 80053ca:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80053cc:	2300      	movs	r3, #0
 80053ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80053d0:	2300      	movs	r3, #0
 80053d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80053d4:	463b      	mov	r3, r7
 80053d6:	2204      	movs	r2, #4
 80053d8:	4619      	mov	r1, r3
 80053da:	4807      	ldr	r0, [pc, #28]	; (80053f8 <MX_TIM2_Init+0xe8>)
 80053dc:	f007 f8dc 	bl	800c598 <HAL_TIM_PWM_ConfigChannel>
 80053e0:	4603      	mov	r3, r0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d001      	beq.n	80053ea <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80053e6:	f7fe ff63 	bl	80042b0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 80053ea:	4803      	ldr	r0, [pc, #12]	; (80053f8 <MX_TIM2_Init+0xe8>)
 80053ec:	f000 f850 	bl	8005490 <HAL_TIM_MspPostInit>

}
 80053f0:	bf00      	nop
 80053f2:	3738      	adds	r7, #56	; 0x38
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	20028458 	.word	0x20028458

080053fc <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8005400:	4b0f      	ldr	r3, [pc, #60]	; (8005440 <MX_TIM16_Init+0x44>)
 8005402:	4a10      	ldr	r2, [pc, #64]	; (8005444 <MX_TIM16_Init+0x48>)
 8005404:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 31;
 8005406:	4b0e      	ldr	r3, [pc, #56]	; (8005440 <MX_TIM16_Init+0x44>)
 8005408:	221f      	movs	r2, #31
 800540a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800540c:	4b0c      	ldr	r3, [pc, #48]	; (8005440 <MX_TIM16_Init+0x44>)
 800540e:	2200      	movs	r2, #0
 8005410:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8005412:	4b0b      	ldr	r3, [pc, #44]	; (8005440 <MX_TIM16_Init+0x44>)
 8005414:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005418:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800541a:	4b09      	ldr	r3, [pc, #36]	; (8005440 <MX_TIM16_Init+0x44>)
 800541c:	2200      	movs	r2, #0
 800541e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8005420:	4b07      	ldr	r3, [pc, #28]	; (8005440 <MX_TIM16_Init+0x44>)
 8005422:	2200      	movs	r2, #0
 8005424:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005426:	4b06      	ldr	r3, [pc, #24]	; (8005440 <MX_TIM16_Init+0x44>)
 8005428:	2200      	movs	r2, #0
 800542a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800542c:	4804      	ldr	r0, [pc, #16]	; (8005440 <MX_TIM16_Init+0x44>)
 800542e:	f006 fe08 	bl	800c042 <HAL_TIM_Base_Init>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d001      	beq.n	800543c <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8005438:	f7fe ff3a 	bl	80042b0 <Error_Handler>
  }

}
 800543c:	bf00      	nop
 800543e:	bd80      	pop	{r7, pc}
 8005440:	20028498 	.word	0x20028498
 8005444:	40014400 	.word	0x40014400

08005448 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b082      	sub	sp, #8
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005458:	d103      	bne.n	8005462 <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800545a:	2001      	movs	r0, #1
 800545c:	f7ff ff25 	bl	80052aa <LL_APB1_GRP1_EnableClock>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8005460:	e010      	b.n	8005484 <HAL_TIM_Base_MspInit+0x3c>
  else if(tim_baseHandle->Instance==TIM16)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a09      	ldr	r2, [pc, #36]	; (800548c <HAL_TIM_Base_MspInit+0x44>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d10b      	bne.n	8005484 <HAL_TIM_Base_MspInit+0x3c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800546c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8005470:	f7ff ff34 	bl	80052dc <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8005474:	2200      	movs	r2, #0
 8005476:	2100      	movs	r1, #0
 8005478:	2019      	movs	r0, #25
 800547a:	f002 fa3c 	bl	80078f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800547e:	2019      	movs	r0, #25
 8005480:	f002 fa53 	bl	800792a <HAL_NVIC_EnableIRQ>
}
 8005484:	bf00      	nop
 8005486:	3708      	adds	r7, #8
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}
 800548c:	40014400 	.word	0x40014400

08005490 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b088      	sub	sp, #32
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005498:	f107 030c 	add.w	r3, r7, #12
 800549c:	2200      	movs	r2, #0
 800549e:	601a      	str	r2, [r3, #0]
 80054a0:	605a      	str	r2, [r3, #4]
 80054a2:	609a      	str	r2, [r3, #8]
 80054a4:	60da      	str	r2, [r3, #12]
 80054a6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054b0:	d112      	bne.n	80054d8 <HAL_TIM_MspPostInit+0x48>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054b2:	2002      	movs	r0, #2
 80054b4:	f7ff fee0 	bl	8005278 <LL_AHB2_GRP1_EnableClock>
    /**TIM2 GPIO Configuration    
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80054b8:	2308      	movs	r3, #8
 80054ba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054bc:	2302      	movs	r3, #2
 80054be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054c0:	2300      	movs	r3, #0
 80054c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054c4:	2300      	movs	r3, #0
 80054c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80054c8:	2301      	movs	r3, #1
 80054ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054cc:	f107 030c 	add.w	r3, r7, #12
 80054d0:	4619      	mov	r1, r3
 80054d2:	4803      	ldr	r0, [pc, #12]	; (80054e0 <HAL_TIM_MspPostInit+0x50>)
 80054d4:	f002 fd96 	bl	8008004 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80054d8:	bf00      	nop
 80054da:	3720      	adds	r7, #32
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	48000400 	.word	0x48000400

080054e4 <HAL_COMP_TriggerCallback>:
uint16_t calibration_1 = 0;
union ColorComplex lightMessageComplexTouch = {0};
uint32_t lightsSimpleMessageReceivedTouch;
uint32_t prev_msg = 0;

void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp) {
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
	timestamp = __HAL_TIM_GET_COUNTER(&htim16);
 80054ec:	4b1a      	ldr	r3, [pc, #104]	; (8005558 <HAL_COMP_TriggerCallback+0x74>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f2:	b29a      	uxth	r2, r3
 80054f4:	4b19      	ldr	r3, [pc, #100]	; (800555c <HAL_COMP_TriggerCallback+0x78>)
 80054f6:	801a      	strh	r2, [r3, #0]

//	GPIO_PinState pin_state = HAL_GPIO_ReadPin(LH_SIG_GPIO_Port, LH_SIG_Pin);
	uint32_t pin_state = HAL_COMP_GetOutputLevel(hcomp);
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f002 f8c1 	bl	8007680 <HAL_COMP_GetOutputLevel>
 80054fe:	60f8      	str	r0, [r7, #12]
	if (pin_state == COMP_OUTPUT_LEVEL_HIGH) {
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2b01      	cmp	r3, #1
 8005504:	d109      	bne.n	800551a <HAL_COMP_TriggerCallback+0x36>
		//Rising edge
		input0.rise_time_ = timestamp;
 8005506:	4b15      	ldr	r3, [pc, #84]	; (800555c <HAL_COMP_TriggerCallback+0x78>)
 8005508:	881a      	ldrh	r2, [r3, #0]
 800550a:	4b15      	ldr	r3, [pc, #84]	; (8005560 <HAL_COMP_TriggerCallback+0x7c>)
 800550c:	f8a3 240a 	strh.w	r2, [r3, #1034]	; 0x40a
		input0.rise_valid_ = 1;
 8005510:	4b13      	ldr	r3, [pc, #76]	; (8005560 <HAL_COMP_TriggerCallback+0x7c>)
 8005512:	2201      	movs	r2, #1
 8005514:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
		//Falling edge
		enqueue_pulse(&input0, input0.rise_time_, timestamp - input0.rise_time_);
		input0.rise_valid_ = 0;
//		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
	}
}
 8005518:	e019      	b.n	800554e <HAL_COMP_TriggerCallback+0x6a>
	} else if (input0.rise_valid_ && pin_state == COMP_OUTPUT_LEVEL_LOW) {
 800551a:	4b11      	ldr	r3, [pc, #68]	; (8005560 <HAL_COMP_TriggerCallback+0x7c>)
 800551c:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 8005520:	2b00      	cmp	r3, #0
 8005522:	d014      	beq.n	800554e <HAL_COMP_TriggerCallback+0x6a>
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d111      	bne.n	800554e <HAL_COMP_TriggerCallback+0x6a>
		enqueue_pulse(&input0, input0.rise_time_, timestamp - input0.rise_time_);
 800552a:	4b0d      	ldr	r3, [pc, #52]	; (8005560 <HAL_COMP_TriggerCallback+0x7c>)
 800552c:	f8b3 140a 	ldrh.w	r1, [r3, #1034]	; 0x40a
 8005530:	4b0a      	ldr	r3, [pc, #40]	; (800555c <HAL_COMP_TriggerCallback+0x78>)
 8005532:	881a      	ldrh	r2, [r3, #0]
 8005534:	4b0a      	ldr	r3, [pc, #40]	; (8005560 <HAL_COMP_TriggerCallback+0x7c>)
 8005536:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800553a:	1ad3      	subs	r3, r2, r3
 800553c:	b29b      	uxth	r3, r3
 800553e:	461a      	mov	r2, r3
 8005540:	4807      	ldr	r0, [pc, #28]	; (8005560 <HAL_COMP_TriggerCallback+0x7c>)
 8005542:	f7fe fb49 	bl	8003bd8 <enqueue_pulse>
		input0.rise_valid_ = 0;
 8005546:	4b06      	ldr	r3, [pc, #24]	; (8005560 <HAL_COMP_TriggerCallback+0x7c>)
 8005548:	2200      	movs	r2, #0
 800554a:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
}
 800554e:	bf00      	nop
 8005550:	3710      	adds	r7, #16
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	20028498 	.word	0x20028498
 800555c:	20000ace 	.word	0x20000ace
 8005560:	20027898 	.word	0x20027898
 8005564:	00000000 	.word	0x00000000

08005568 <HAL_TSC_ConvCpltCallback>:


uint32_t temp = 0x01;
// TODO: make threshold update if "touch" is active for too long
void HAL_TSC_ConvCpltCallback(TSC_HandleTypeDef *htsc) {
 8005568:	b5b0      	push	{r4, r5, r7, lr}
 800556a:	b086      	sub	sp, #24
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
	/*##-5- Discharge the touch-sensing IOs ####################################*/
	HAL_TSC_IODischarge(htsc, ENABLE);
 8005570:	2101      	movs	r1, #1
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f007 ff80 	bl	800d478 <HAL_TSC_IODischarge>
	/* Note: a delay can be added here */

	uint32_t uhTSCAcquisitionValue;
	TSC_GroupStatusTypeDef status = HAL_TSC_GroupGetStatus(htsc, TSC_GROUP2_IDX);
 8005578:	2101      	movs	r1, #1
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f007 ff05 	bl	800d38a <HAL_TSC_GroupGetStatus>
 8005580:	4603      	mov	r3, r0
 8005582:	75bb      	strb	r3, [r7, #22]
	uint32_t cur_time;
	/*##-6- Check if the acquisition is correct (no max count) #################*/
	if (status == TSC_GROUP_COMPLETED) {
 8005584:	7dbb      	ldrb	r3, [r7, #22]
 8005586:	2b01      	cmp	r3, #1
 8005588:	f040 8115 	bne.w	80057b6 <HAL_TSC_ConvCpltCallback+0x24e>
		/*##-7- Read the acquisition value #######################################*/
		uhTSCAcquisitionValue = HAL_TSC_GroupGetValue(htsc, TSC_GROUP2_IDX);
 800558c:	2101      	movs	r1, #1
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f007 ff1d 	bl	800d3ce <HAL_TSC_GroupGetValue>
 8005594:	6138      	str	r0, [r7, #16]
		uint8_t touch;
		if (cap_sensor == 0) {
 8005596:	4ba0      	ldr	r3, [pc, #640]	; (8005818 <HAL_TSC_ConvCpltCallback+0x2b0>)
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d17d      	bne.n	800569a <HAL_TSC_ConvCpltCallback+0x132>
			if(calibration_0 <= CALIBRATION_SAMPLES){
 800559e:	4b9f      	ldr	r3, [pc, #636]	; (800581c <HAL_TSC_ConvCpltCallback+0x2b4>)
 80055a0:	881b      	ldrh	r3, [r3, #0]
 80055a2:	2b64      	cmp	r3, #100	; 0x64
 80055a4:	d83a      	bhi.n	800561c <HAL_TSC_ConvCpltCallback+0xb4>
				touch = 0;
 80055a6:	2300      	movs	r3, #0
 80055a8:	75fb      	strb	r3, [r7, #23]
				if(calibration_0 == 0){
 80055aa:	4b9c      	ldr	r3, [pc, #624]	; (800581c <HAL_TSC_ConvCpltCallback+0x2b4>)
 80055ac:	881b      	ldrh	r3, [r3, #0]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d108      	bne.n	80055c4 <HAL_TSC_ConvCpltCallback+0x5c>
					ts1_threshold = uhTSCAcquisitionValue;
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	ee07 3a90 	vmov	s15, r3
 80055b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055bc:	4b98      	ldr	r3, [pc, #608]	; (8005820 <HAL_TSC_ConvCpltCallback+0x2b8>)
 80055be:	edc3 7a00 	vstr	s15, [r3]
 80055c2:	e024      	b.n	800560e <HAL_TSC_ConvCpltCallback+0xa6>
				}else{
					ts1_threshold = uhTSCAcquisitionValue * ALPHA_WEIGHT + ts1_threshold * (1-ALPHA_WEIGHT);
 80055c4:	6938      	ldr	r0, [r7, #16]
 80055c6:	f7fa ff27 	bl	8000418 <__aeabi_ui2d>
 80055ca:	a38f      	add	r3, pc, #572	; (adr r3, 8005808 <HAL_TSC_ConvCpltCallback+0x2a0>)
 80055cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d0:	f7fa ff9c 	bl	800050c <__aeabi_dmul>
 80055d4:	4603      	mov	r3, r0
 80055d6:	460c      	mov	r4, r1
 80055d8:	4625      	mov	r5, r4
 80055da:	461c      	mov	r4, r3
 80055dc:	4b90      	ldr	r3, [pc, #576]	; (8005820 <HAL_TSC_ConvCpltCallback+0x2b8>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4618      	mov	r0, r3
 80055e2:	f7fa ff3b 	bl	800045c <__aeabi_f2d>
 80055e6:	a38a      	add	r3, pc, #552	; (adr r3, 8005810 <HAL_TSC_ConvCpltCallback+0x2a8>)
 80055e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ec:	f7fa ff8e 	bl	800050c <__aeabi_dmul>
 80055f0:	4602      	mov	r2, r0
 80055f2:	460b      	mov	r3, r1
 80055f4:	4620      	mov	r0, r4
 80055f6:	4629      	mov	r1, r5
 80055f8:	f7fa fdd2 	bl	80001a0 <__adddf3>
 80055fc:	4603      	mov	r3, r0
 80055fe:	460c      	mov	r4, r1
 8005600:	4618      	mov	r0, r3
 8005602:	4621      	mov	r1, r4
 8005604:	f7fb fa32 	bl	8000a6c <__aeabi_d2f>
 8005608:	4602      	mov	r2, r0
 800560a:	4b85      	ldr	r3, [pc, #532]	; (8005820 <HAL_TSC_ConvCpltCallback+0x2b8>)
 800560c:	601a      	str	r2, [r3, #0]
				}
				calibration_0 += 1;
 800560e:	4b83      	ldr	r3, [pc, #524]	; (800581c <HAL_TSC_ConvCpltCallback+0x2b4>)
 8005610:	881b      	ldrh	r3, [r3, #0]
 8005612:	3301      	adds	r3, #1
 8005614:	b29a      	uxth	r2, r3
 8005616:	4b81      	ldr	r3, [pc, #516]	; (800581c <HAL_TSC_ConvCpltCallback+0x2b4>)
 8005618:	801a      	strh	r2, [r3, #0]
 800561a:	e0ba      	b.n	8005792 <HAL_TSC_ConvCpltCallback+0x22a>
			}
			else{
				touch = (uhTSCAcquisitionValue <= (ts1_threshold - THRESHOLD_TOLERANCE));
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	ee07 3a90 	vmov	s15, r3
 8005622:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005626:	4b7e      	ldr	r3, [pc, #504]	; (8005820 <HAL_TSC_ConvCpltCallback+0x2b8>)
 8005628:	edd3 7a00 	vldr	s15, [r3]
 800562c:	eddf 6a7d 	vldr	s13, [pc, #500]	; 8005824 <HAL_TSC_ConvCpltCallback+0x2bc>
 8005630:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005634:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800563c:	bf94      	ite	ls
 800563e:	2301      	movls	r3, #1
 8005640:	2300      	movhi	r3, #0
 8005642:	b2db      	uxtb	r3, r3
 8005644:	75fb      	strb	r3, [r7, #23]

				// if not touched, update threshold
				if(touch == 0){
 8005646:	7dfb      	ldrb	r3, [r7, #23]
 8005648:	2b00      	cmp	r3, #0
 800564a:	f040 80a2 	bne.w	8005792 <HAL_TSC_ConvCpltCallback+0x22a>
					ts1_threshold = uhTSCAcquisitionValue * ALPHA_WEIGHT + ts1_threshold * (1-ALPHA_WEIGHT);
 800564e:	6938      	ldr	r0, [r7, #16]
 8005650:	f7fa fee2 	bl	8000418 <__aeabi_ui2d>
 8005654:	a36c      	add	r3, pc, #432	; (adr r3, 8005808 <HAL_TSC_ConvCpltCallback+0x2a0>)
 8005656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800565a:	f7fa ff57 	bl	800050c <__aeabi_dmul>
 800565e:	4603      	mov	r3, r0
 8005660:	460c      	mov	r4, r1
 8005662:	4625      	mov	r5, r4
 8005664:	461c      	mov	r4, r3
 8005666:	4b6e      	ldr	r3, [pc, #440]	; (8005820 <HAL_TSC_ConvCpltCallback+0x2b8>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4618      	mov	r0, r3
 800566c:	f7fa fef6 	bl	800045c <__aeabi_f2d>
 8005670:	a367      	add	r3, pc, #412	; (adr r3, 8005810 <HAL_TSC_ConvCpltCallback+0x2a8>)
 8005672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005676:	f7fa ff49 	bl	800050c <__aeabi_dmul>
 800567a:	4602      	mov	r2, r0
 800567c:	460b      	mov	r3, r1
 800567e:	4620      	mov	r0, r4
 8005680:	4629      	mov	r1, r5
 8005682:	f7fa fd8d 	bl	80001a0 <__adddf3>
 8005686:	4603      	mov	r3, r0
 8005688:	460c      	mov	r4, r1
 800568a:	4618      	mov	r0, r3
 800568c:	4621      	mov	r1, r4
 800568e:	f7fb f9ed 	bl	8000a6c <__aeabi_d2f>
 8005692:	4602      	mov	r2, r0
 8005694:	4b62      	ldr	r3, [pc, #392]	; (8005820 <HAL_TSC_ConvCpltCallback+0x2b8>)
 8005696:	601a      	str	r2, [r3, #0]
 8005698:	e07b      	b.n	8005792 <HAL_TSC_ConvCpltCallback+0x22a>
				}
			}
		} else {
			if(calibration_1 <= CALIBRATION_SAMPLES){
 800569a:	4b63      	ldr	r3, [pc, #396]	; (8005828 <HAL_TSC_ConvCpltCallback+0x2c0>)
 800569c:	881b      	ldrh	r3, [r3, #0]
 800569e:	2b64      	cmp	r3, #100	; 0x64
 80056a0:	d83a      	bhi.n	8005718 <HAL_TSC_ConvCpltCallback+0x1b0>
				touch = 0;
 80056a2:	2300      	movs	r3, #0
 80056a4:	75fb      	strb	r3, [r7, #23]
				if(calibration_1 == 0){
 80056a6:	4b60      	ldr	r3, [pc, #384]	; (8005828 <HAL_TSC_ConvCpltCallback+0x2c0>)
 80056a8:	881b      	ldrh	r3, [r3, #0]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d108      	bne.n	80056c0 <HAL_TSC_ConvCpltCallback+0x158>
					ts2_threshold = uhTSCAcquisitionValue;
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	ee07 3a90 	vmov	s15, r3
 80056b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056b8:	4b5c      	ldr	r3, [pc, #368]	; (800582c <HAL_TSC_ConvCpltCallback+0x2c4>)
 80056ba:	edc3 7a00 	vstr	s15, [r3]
 80056be:	e024      	b.n	800570a <HAL_TSC_ConvCpltCallback+0x1a2>
				}else{
					ts2_threshold = uhTSCAcquisitionValue * ALPHA_WEIGHT + ts2_threshold * (1-ALPHA_WEIGHT);
 80056c0:	6938      	ldr	r0, [r7, #16]
 80056c2:	f7fa fea9 	bl	8000418 <__aeabi_ui2d>
 80056c6:	a350      	add	r3, pc, #320	; (adr r3, 8005808 <HAL_TSC_ConvCpltCallback+0x2a0>)
 80056c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056cc:	f7fa ff1e 	bl	800050c <__aeabi_dmul>
 80056d0:	4603      	mov	r3, r0
 80056d2:	460c      	mov	r4, r1
 80056d4:	4625      	mov	r5, r4
 80056d6:	461c      	mov	r4, r3
 80056d8:	4b54      	ldr	r3, [pc, #336]	; (800582c <HAL_TSC_ConvCpltCallback+0x2c4>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4618      	mov	r0, r3
 80056de:	f7fa febd 	bl	800045c <__aeabi_f2d>
 80056e2:	a34b      	add	r3, pc, #300	; (adr r3, 8005810 <HAL_TSC_ConvCpltCallback+0x2a8>)
 80056e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e8:	f7fa ff10 	bl	800050c <__aeabi_dmul>
 80056ec:	4602      	mov	r2, r0
 80056ee:	460b      	mov	r3, r1
 80056f0:	4620      	mov	r0, r4
 80056f2:	4629      	mov	r1, r5
 80056f4:	f7fa fd54 	bl	80001a0 <__adddf3>
 80056f8:	4603      	mov	r3, r0
 80056fa:	460c      	mov	r4, r1
 80056fc:	4618      	mov	r0, r3
 80056fe:	4621      	mov	r1, r4
 8005700:	f7fb f9b4 	bl	8000a6c <__aeabi_d2f>
 8005704:	4602      	mov	r2, r0
 8005706:	4b49      	ldr	r3, [pc, #292]	; (800582c <HAL_TSC_ConvCpltCallback+0x2c4>)
 8005708:	601a      	str	r2, [r3, #0]
				}
				calibration_1 += 1;
 800570a:	4b47      	ldr	r3, [pc, #284]	; (8005828 <HAL_TSC_ConvCpltCallback+0x2c0>)
 800570c:	881b      	ldrh	r3, [r3, #0]
 800570e:	3301      	adds	r3, #1
 8005710:	b29a      	uxth	r2, r3
 8005712:	4b45      	ldr	r3, [pc, #276]	; (8005828 <HAL_TSC_ConvCpltCallback+0x2c0>)
 8005714:	801a      	strh	r2, [r3, #0]
 8005716:	e03c      	b.n	8005792 <HAL_TSC_ConvCpltCallback+0x22a>

			}
			else{
				touch = (uhTSCAcquisitionValue <= (ts2_threshold - THRESHOLD_TOLERANCE));
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	ee07 3a90 	vmov	s15, r3
 800571e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005722:	4b42      	ldr	r3, [pc, #264]	; (800582c <HAL_TSC_ConvCpltCallback+0x2c4>)
 8005724:	edd3 7a00 	vldr	s15, [r3]
 8005728:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8005824 <HAL_TSC_ConvCpltCallback+0x2bc>
 800572c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005730:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005738:	bf94      	ite	ls
 800573a:	2301      	movls	r3, #1
 800573c:	2300      	movhi	r3, #0
 800573e:	b2db      	uxtb	r3, r3
 8005740:	75fb      	strb	r3, [r7, #23]

				// if not touched, update threshold
				if(touch == 0){
 8005742:	7dfb      	ldrb	r3, [r7, #23]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d124      	bne.n	8005792 <HAL_TSC_ConvCpltCallback+0x22a>
					ts2_threshold = uhTSCAcquisitionValue * ALPHA_WEIGHT + ts2_threshold * (1-ALPHA_WEIGHT);
 8005748:	6938      	ldr	r0, [r7, #16]
 800574a:	f7fa fe65 	bl	8000418 <__aeabi_ui2d>
 800574e:	a32e      	add	r3, pc, #184	; (adr r3, 8005808 <HAL_TSC_ConvCpltCallback+0x2a0>)
 8005750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005754:	f7fa feda 	bl	800050c <__aeabi_dmul>
 8005758:	4603      	mov	r3, r0
 800575a:	460c      	mov	r4, r1
 800575c:	4625      	mov	r5, r4
 800575e:	461c      	mov	r4, r3
 8005760:	4b32      	ldr	r3, [pc, #200]	; (800582c <HAL_TSC_ConvCpltCallback+0x2c4>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4618      	mov	r0, r3
 8005766:	f7fa fe79 	bl	800045c <__aeabi_f2d>
 800576a:	a329      	add	r3, pc, #164	; (adr r3, 8005810 <HAL_TSC_ConvCpltCallback+0x2a8>)
 800576c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005770:	f7fa fecc 	bl	800050c <__aeabi_dmul>
 8005774:	4602      	mov	r2, r0
 8005776:	460b      	mov	r3, r1
 8005778:	4620      	mov	r0, r4
 800577a:	4629      	mov	r1, r5
 800577c:	f7fa fd10 	bl	80001a0 <__adddf3>
 8005780:	4603      	mov	r3, r0
 8005782:	460c      	mov	r4, r1
 8005784:	4618      	mov	r0, r3
 8005786:	4621      	mov	r1, r4
 8005788:	f7fb f970 	bl	8000a6c <__aeabi_d2f>
 800578c:	4602      	mov	r2, r0
 800578e:	4b27      	ldr	r3, [pc, #156]	; (800582c <HAL_TSC_ConvCpltCallback+0x2c4>)
 8005790:	601a      	str	r2, [r3, #0]
				}
			}
		}

		cur_time = HAL_GetTick();
 8005792:	f000 fb7d 	bl	8005e90 <HAL_GetTick>
 8005796:	60f8      	str	r0, [r7, #12]
		debounce(&dbs[cap_sensor], touch, cur_time);
 8005798:	4b1f      	ldr	r3, [pc, #124]	; (8005818 <HAL_TSC_ConvCpltCallback+0x2b0>)
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	00db      	lsls	r3, r3, #3
 800579e:	4a24      	ldr	r2, [pc, #144]	; (8005830 <HAL_TSC_ConvCpltCallback+0x2c8>)
 80057a0:	4413      	add	r3, r2
 80057a2:	7df9      	ldrb	r1, [r7, #23]
 80057a4:	68fa      	ldr	r2, [r7, #12]
 80057a6:	4618      	mov	r0, r3
 80057a8:	f000 fa28 	bl	8005bfc <debounce>
		process_touches(&touch_detector, dbs, cur_time);
 80057ac:	68fa      	ldr	r2, [r7, #12]
 80057ae:	4920      	ldr	r1, [pc, #128]	; (8005830 <HAL_TSC_ConvCpltCallback+0x2c8>)
 80057b0:	4820      	ldr	r0, [pc, #128]	; (8005834 <HAL_TSC_ConvCpltCallback+0x2cc>)
 80057b2:	f000 f879 	bl	80058a8 <process_touches>
	}

	//Switches between the two channels to be acquired
	if (cap_sensor == 0) {
 80057b6:	4b18      	ldr	r3, [pc, #96]	; (8005818 <HAL_TSC_ConvCpltCallback+0x2b0>)
 80057b8:	781b      	ldrb	r3, [r3, #0]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d106      	bne.n	80057cc <HAL_TSC_ConvCpltCallback+0x264>
		IoConfig.ChannelIOs = TSC_GROUP2_IO4; /* TS4 touchkey */
 80057be:	4b1e      	ldr	r3, [pc, #120]	; (8005838 <HAL_TSC_ConvCpltCallback+0x2d0>)
 80057c0:	2280      	movs	r2, #128	; 0x80
 80057c2:	601a      	str	r2, [r3, #0]
		cap_sensor = 1;
 80057c4:	4b14      	ldr	r3, [pc, #80]	; (8005818 <HAL_TSC_ConvCpltCallback+0x2b0>)
 80057c6:	2201      	movs	r2, #1
 80057c8:	701a      	strb	r2, [r3, #0]
 80057ca:	e005      	b.n	80057d8 <HAL_TSC_ConvCpltCallback+0x270>
	} else {
		IoConfig.ChannelIOs = TSC_GROUP2_IO3; /* TS3 touchkey */
 80057cc:	4b1a      	ldr	r3, [pc, #104]	; (8005838 <HAL_TSC_ConvCpltCallback+0x2d0>)
 80057ce:	2240      	movs	r2, #64	; 0x40
 80057d0:	601a      	str	r2, [r3, #0]
		cap_sensor = 0;
 80057d2:	4b11      	ldr	r3, [pc, #68]	; (8005818 <HAL_TSC_ConvCpltCallback+0x2b0>)
 80057d4:	2200      	movs	r2, #0
 80057d6:	701a      	strb	r2, [r3, #0]
	}

	if (HAL_TSC_IOConfig(htsc, &IoConfig) != HAL_OK) {
 80057d8:	4917      	ldr	r1, [pc, #92]	; (8005838 <HAL_TSC_ConvCpltCallback+0x2d0>)
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f007 fe09 	bl	800d3f2 <HAL_TSC_IOConfig>
 80057e0:	4603      	mov	r3, r0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d001      	beq.n	80057ea <HAL_TSC_ConvCpltCallback+0x282>
		/* Initialization Error */
		Error_Handler();
 80057e6:	f7fe fd63 	bl	80042b0 <Error_Handler>
	}

	/*##-9- Re-start the acquisition process ###################################*/
	if (HAL_TSC_Start_IT(htsc) != HAL_OK) {
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f007 fd70 	bl	800d2d0 <HAL_TSC_Start_IT>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d001      	beq.n	80057fa <HAL_TSC_ConvCpltCallback+0x292>
		/* Acquisition Error */
		Error_Handler();
 80057f6:	f7fe fd5b 	bl	80042b0 <Error_Handler>
	}

}
 80057fa:	bf00      	nop
 80057fc:	3718      	adds	r7, #24
 80057fe:	46bd      	mov	sp, r7
 8005800:	bdb0      	pop	{r4, r5, r7, pc}
 8005802:	bf00      	nop
 8005804:	f3af 8000 	nop.w
 8005808:	47ae147b 	.word	0x47ae147b
 800580c:	3f847ae1 	.word	0x3f847ae1
 8005810:	7ae147ae 	.word	0x7ae147ae
 8005814:	3fefae14 	.word	0x3fefae14
 8005818:	20000ad0 	.word	0x20000ad0
 800581c:	20000ae4 	.word	0x20000ae4
 8005820:	200284e4 	.word	0x200284e4
 8005824:	42700000 	.word	0x42700000
 8005828:	20000ae6 	.word	0x20000ae6
 800582c:	20028508 	.word	0x20028508
 8005830:	20000ad4 	.word	0x20000ad4
 8005834:	200284ec 	.word	0x200284ec
 8005838:	200284d8 	.word	0x200284d8

0800583c <touchSensingStart>:


void touchSensingStart(void) {
 800583c:	b580      	push	{r7, lr}
 800583e:	af00      	add	r7, sp, #0
	ts1_threshold = 0;
 8005840:	4b15      	ldr	r3, [pc, #84]	; (8005898 <touchSensingStart+0x5c>)
 8005842:	f04f 0200 	mov.w	r2, #0
 8005846:	601a      	str	r2, [r3, #0]
	ts2_threshold = 0;
 8005848:	4b14      	ldr	r3, [pc, #80]	; (800589c <touchSensingStart+0x60>)
 800584a:	f04f 0200 	mov.w	r2, #0
 800584e:	601a      	str	r2, [r3, #0]

	IoConfig.ChannelIOs = TSC_GROUP2_IO3; /* Start with the first channel */
 8005850:	4b13      	ldr	r3, [pc, #76]	; (80058a0 <touchSensingStart+0x64>)
 8005852:	2240      	movs	r2, #64	; 0x40
 8005854:	601a      	str	r2, [r3, #0]
	IoConfig.SamplingIOs = TSC_GROUP2_IO1;
 8005856:	4b12      	ldr	r3, [pc, #72]	; (80058a0 <touchSensingStart+0x64>)
 8005858:	2210      	movs	r2, #16
 800585a:	609a      	str	r2, [r3, #8]
	IoConfig.ShieldIOs = 0;
 800585c:	4b10      	ldr	r3, [pc, #64]	; (80058a0 <touchSensingStart+0x64>)
 800585e:	2200      	movs	r2, #0
 8005860:	605a      	str	r2, [r3, #4]

	if (HAL_TSC_IOConfig(&htsc, &IoConfig) != HAL_OK) {
 8005862:	490f      	ldr	r1, [pc, #60]	; (80058a0 <touchSensingStart+0x64>)
 8005864:	480f      	ldr	r0, [pc, #60]	; (80058a4 <touchSensingStart+0x68>)
 8005866:	f007 fdc4 	bl	800d3f2 <HAL_TSC_IOConfig>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d001      	beq.n	8005874 <touchSensingStart+0x38>
		/* Initialization Error */
		Error_Handler();
 8005870:	f7fe fd1e 	bl	80042b0 <Error_Handler>
	}

	HAL_TSC_IODischarge(&htsc, ENABLE);
 8005874:	2101      	movs	r1, #1
 8005876:	480b      	ldr	r0, [pc, #44]	; (80058a4 <touchSensingStart+0x68>)
 8005878:	f007 fdfe 	bl	800d478 <HAL_TSC_IODischarge>
	HAL_Delay(5); /* 1 ms is more than enough to discharge all capacitors */
 800587c:	2005      	movs	r0, #5
 800587e:	f000 fb1f 	bl	8005ec0 <HAL_Delay>
	if (HAL_TSC_Start_IT(&htsc) != HAL_OK) {
 8005882:	4808      	ldr	r0, [pc, #32]	; (80058a4 <touchSensingStart+0x68>)
 8005884:	f007 fd24 	bl	800d2d0 <HAL_TSC_Start_IT>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d001      	beq.n	8005892 <touchSensingStart+0x56>
		/* Acquisition Error */
		Error_Handler();
 800588e:	f7fe fd0f 	bl	80042b0 <Error_Handler>
	}
}
 8005892:	bf00      	nop
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop
 8005898:	200284e4 	.word	0x200284e4
 800589c:	20028508 	.word	0x20028508
 80058a0:	200284d8 	.word	0x200284d8
 80058a4:	2002850c 	.word	0x2002850c

080058a8 <process_touches>:
}

uint8_t temp_flag = 1;
enum TouchType action = None;

void process_touches(TouchDetector *self, Debouncer *dbs, uint32_t cur_time) {
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b08c      	sub	sp, #48	; 0x30
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	607a      	str	r2, [r7, #4]

//	action = None;

	if (self->touch_state == Idle) {
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	7e1b      	ldrb	r3, [r3, #24]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d123      	bne.n	8005904 <process_touches+0x5c>
		if (dbs[0].clean_out) {
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	795b      	ldrb	r3, [r3, #5]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d00c      	beq.n	80058de <process_touches+0x36>
			// front button is held

			self->touch_state = OnePressed;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2201      	movs	r2, #1
 80058c8:	761a      	strb	r2, [r3, #24]
			self->touches[0].cap_idx = 0;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2200      	movs	r2, #0
 80058ce:	701a      	strb	r2, [r3, #0]
			self->touches[0].start_t = cur_time;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	605a      	str	r2, [r3, #4]
			action = FrontHold;
 80058d6:	4b99      	ldr	r3, [pc, #612]	; (8005b3c <process_touches+0x294>)
 80058d8:	2205      	movs	r2, #5
 80058da:	701a      	strb	r2, [r3, #0]
 80058dc:	e126      	b.n	8005b2c <process_touches+0x284>

		} else if (dbs[1].clean_out) {
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	3308      	adds	r3, #8
 80058e2:	795b      	ldrb	r3, [r3, #5]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	f000 8121 	beq.w	8005b2c <process_touches+0x284>
			// back button is held

			self->touch_state = OnePressed;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2201      	movs	r2, #1
 80058ee:	761a      	strb	r2, [r3, #24]
			self->touches[0].cap_idx = 1;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2201      	movs	r2, #1
 80058f4:	701a      	strb	r2, [r3, #0]
			self->touches[0].start_t = cur_time;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	605a      	str	r2, [r3, #4]
			action = BackHold;
 80058fc:	4b8f      	ldr	r3, [pc, #572]	; (8005b3c <process_touches+0x294>)
 80058fe:	2206      	movs	r2, #6
 8005900:	701a      	strb	r2, [r3, #0]
 8005902:	e113      	b.n	8005b2c <process_touches+0x284>
		}
	} else if (self->touch_state == OnePressed) {
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	7e1b      	ldrb	r3, [r3, #24]
 8005908:	2b01      	cmp	r3, #1
 800590a:	d12d      	bne.n	8005968 <process_touches+0xc0>
		if (dbs[1 - self->touches[0].cap_idx].clean_out) {
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	f1c3 0301 	rsb	r3, r3, #1
 8005914:	00db      	lsls	r3, r3, #3
 8005916:	68ba      	ldr	r2, [r7, #8]
 8005918:	4413      	add	r3, r2
 800591a:	795b      	ldrb	r3, [r3, #5]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d010      	beq.n	8005942 <process_touches+0x9a>
			self->touch_state = TwoPressed;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2202      	movs	r2, #2
 8005924:	761a      	strb	r2, [r3, #24]
			self->touches[1].cap_idx = 1 - self->touches[0].cap_idx;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	f1c3 0301 	rsb	r3, r3, #1
 800592e:	b2da      	uxtb	r2, r3
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	731a      	strb	r2, [r3, #12]
			self->touches[1].start_t = cur_time;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	611a      	str	r2, [r3, #16]
			action = BothHold;
 800593a:	4b80      	ldr	r3, [pc, #512]	; (8005b3c <process_touches+0x294>)
 800593c:	2207      	movs	r2, #7
 800593e:	701a      	strb	r2, [r3, #0]
 8005940:	e0f4      	b.n	8005b2c <process_touches+0x284>

		} else if (!dbs[self->touches[0].cap_idx].clean_out) {
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	00db      	lsls	r3, r3, #3
 8005948:	68ba      	ldr	r2, [r7, #8]
 800594a:	4413      	add	r3, r2
 800594c:	795b      	ldrb	r3, [r3, #5]
 800594e:	2b00      	cmp	r3, #0
 8005950:	f040 80ec 	bne.w	8005b2c <process_touches+0x284>
			self->touch_state = OneReleasedNoPressed;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2203      	movs	r2, #3
 8005958:	761a      	strb	r2, [r3, #24]
			self->touches[0].end_t = cur_time;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	609a      	str	r2, [r3, #8]
			action = BothRelease;
 8005960:	4b76      	ldr	r3, [pc, #472]	; (8005b3c <process_touches+0x294>)
 8005962:	2208      	movs	r2, #8
 8005964:	701a      	strb	r2, [r3, #0]
 8005966:	e0e1      	b.n	8005b2c <process_touches+0x284>

		}
	} else if (self->touch_state == TwoPressed) {
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	7e1b      	ldrb	r3, [r3, #24]
 800596c:	2b02      	cmp	r3, #2
 800596e:	d11e      	bne.n	80059ae <process_touches+0x106>
		if (!dbs[self->touches[0].cap_idx].clean_out) {
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	00db      	lsls	r3, r3, #3
 8005976:	68ba      	ldr	r2, [r7, #8]
 8005978:	4413      	add	r3, r2
 800597a:	795b      	ldrb	r3, [r3, #5]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d106      	bne.n	800598e <process_touches+0xe6>
			self->touch_state = FirstReleasedSecondPressed;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2204      	movs	r2, #4
 8005984:	761a      	strb	r2, [r3, #24]
			self->touches[0].end_t = cur_time;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	609a      	str	r2, [r3, #8]
 800598c:	e0ce      	b.n	8005b2c <process_touches+0x284>
		} else if (!dbs[self->touches[1].cap_idx].clean_out) {
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	7b1b      	ldrb	r3, [r3, #12]
 8005992:	00db      	lsls	r3, r3, #3
 8005994:	68ba      	ldr	r2, [r7, #8]
 8005996:	4413      	add	r3, r2
 8005998:	795b      	ldrb	r3, [r3, #5]
 800599a:	2b00      	cmp	r3, #0
 800599c:	f040 80c6 	bne.w	8005b2c <process_touches+0x284>
			self->touch_state = SecondReleasedFirstPressed;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2205      	movs	r2, #5
 80059a4:	761a      	strb	r2, [r3, #24]
			self->touches[1].end_t = cur_time;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	615a      	str	r2, [r3, #20]
 80059ac:	e0be      	b.n	8005b2c <process_touches+0x284>
		}
	} else if (self->touch_state == OneReleasedNoPressed) {
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	7e1b      	ldrb	r3, [r3, #24]
 80059b2:	2b03      	cmp	r3, #3
 80059b4:	d134      	bne.n	8005a20 <process_touches+0x178>
		if (dbs[1 - self->touches[0].cap_idx].clean_out) {
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	f1c3 0301 	rsb	r3, r3, #1
 80059be:	00db      	lsls	r3, r3, #3
 80059c0:	68ba      	ldr	r2, [r7, #8]
 80059c2:	4413      	add	r3, r2
 80059c4:	795b      	ldrb	r3, [r3, #5]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00d      	beq.n	80059e6 <process_touches+0x13e>
			self->touch_state = FirstReleasedSecondPressed;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2204      	movs	r2, #4
 80059ce:	761a      	strb	r2, [r3, #24]
			self->touches[1].cap_idx = (1 - self->touches[0].cap_idx);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	f1c3 0301 	rsb	r3, r3, #1
 80059d8:	b2da      	uxtb	r2, r3
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	731a      	strb	r2, [r3, #12]
			self->touches[1].start_t = cur_time;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	611a      	str	r2, [r3, #16]
 80059e4:	e0a2      	b.n	8005b2c <process_touches+0x284>
		} else if (cur_time - self->touches[0].end_t > MIN_SWIPE_GAP) {
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	2b0a      	cmp	r3, #10
 80059f0:	f240 809c 	bls.w	8005b2c <process_touches+0x284>
			uint32_t touch_duration = self->touches[0].end_t - self->touches[0].start_t;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	689a      	ldr	r2, [r3, #8]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	1ad3      	subs	r3, r2, r3
 80059fe:	617b      	str	r3, [r7, #20]
			if (TAP_MIN_THRESHOLD < touch_duration && touch_duration < TAP_MAX_THRESHOLD) {
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	2b28      	cmp	r3, #40	; 0x28
 8005a04:	d905      	bls.n	8005a12 <process_touches+0x16a>
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	2bc7      	cmp	r3, #199	; 0xc7
 8005a0a:	d802      	bhi.n	8005a12 <process_touches+0x16a>
				//Register a tap
				action = BothRelease;
 8005a0c:	4b4b      	ldr	r3, [pc, #300]	; (8005b3c <process_touches+0x294>)
 8005a0e:	2208      	movs	r2, #8
 8005a10:	701a      	strb	r2, [r3, #0]
			}
			lightsSimpleMessageReceivedTouch = 0;
 8005a12:	4b4b      	ldr	r3, [pc, #300]	; (8005b40 <process_touches+0x298>)
 8005a14:	2200      	movs	r2, #0
 8005a16:	601a      	str	r2, [r3, #0]
			self->touch_state = Idle;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	761a      	strb	r2, [r3, #24]
 8005a1e:	e085      	b.n	8005b2c <process_touches+0x284>
		}
	} else if (self->touch_state == FirstReleasedSecondPressed) {
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	7e1b      	ldrb	r3, [r3, #24]
 8005a24:	2b04      	cmp	r3, #4
 8005a26:	d148      	bne.n	8005aba <process_touches+0x212>
		if (!dbs[self->touches[1].cap_idx].clean_out) {
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	7b1b      	ldrb	r3, [r3, #12]
 8005a2c:	00db      	lsls	r3, r3, #3
 8005a2e:	68ba      	ldr	r2, [r7, #8]
 8005a30:	4413      	add	r3, r2
 8005a32:	795b      	ldrb	r3, [r3, #5]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d179      	bne.n	8005b2c <process_touches+0x284>
			self->touch_state = Idle;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	761a      	strb	r2, [r3, #24]
			self->touches[1].end_t = cur_time;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	615a      	str	r2, [r3, #20]
			action = None;
 8005a44:	4b3d      	ldr	r3, [pc, #244]	; (8005b3c <process_touches+0x294>)
 8005a46:	2200      	movs	r2, #0
 8005a48:	701a      	strb	r2, [r3, #0]
			uint32_t touches_start_diff = self->touches[1].start_t - self->touches[0].start_t;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	691a      	ldr	r2, [r3, #16]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	1ad3      	subs	r3, r2, r3
 8005a54:	623b      	str	r3, [r7, #32]
			uint32_t touches_end_diff = self->touches[1].end_t - self->touches[0].end_t;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	695a      	ldr	r2, [r3, #20]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	61fb      	str	r3, [r7, #28]
			uint32_t touch_duration = self->touches[1].end_t - self->touches[0].start_t;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	695a      	ldr	r2, [r3, #20]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	1ad3      	subs	r3, r2, r3
 8005a6c:	61bb      	str	r3, [r7, #24]

			//If touch start and touch end differences were small, then it was likely just a tap
			if ((touches_start_diff <= TAP_MIN_THRESHOLD) && (touches_end_diff <= TAP_MIN_THRESHOLD)
 8005a6e:	6a3b      	ldr	r3, [r7, #32]
 8005a70:	2b28      	cmp	r3, #40	; 0x28
 8005a72:	d80c      	bhi.n	8005a8e <process_touches+0x1e6>
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	2b28      	cmp	r3, #40	; 0x28
 8005a78:	d809      	bhi.n	8005a8e <process_touches+0x1e6>
					&& (TAP_MIN_THRESHOLD < touch_duration) && (touch_duration < TAP_MAX_THRESHOLD)) {
 8005a7a:	69bb      	ldr	r3, [r7, #24]
 8005a7c:	2b28      	cmp	r3, #40	; 0x28
 8005a7e:	d906      	bls.n	8005a8e <process_touches+0x1e6>
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	2bc7      	cmp	r3, #199	; 0xc7
 8005a84:	d803      	bhi.n	8005a8e <process_touches+0x1e6>
				//Register a tap
				action = BothRelease;
 8005a86:	4b2d      	ldr	r3, [pc, #180]	; (8005b3c <process_touches+0x294>)
 8005a88:	2208      	movs	r2, #8
 8005a8a:	701a      	strb	r2, [r3, #0]
 8005a8c:	e011      	b.n	8005ab2 <process_touches+0x20a>
			}
			//Otherwise, it was a swipe. Might have to adjust these thresholds to allow swipe detection
			else if (touches_start_diff > TAP_MIN_THRESHOLD && touches_end_diff > TAP_MIN_THRESHOLD) {
 8005a8e:	6a3b      	ldr	r3, [r7, #32]
 8005a90:	2b28      	cmp	r3, #40	; 0x28
 8005a92:	d90e      	bls.n	8005ab2 <process_touches+0x20a>
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	2b28      	cmp	r3, #40	; 0x28
 8005a98:	d90b      	bls.n	8005ab2 <process_touches+0x20a>
				//Register a swipe
				action = (self->touches[0].cap_idx << 1) | self->touches[1].cap_idx;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	005b      	lsls	r3, r3, #1
 8005aa0:	b25a      	sxtb	r2, r3
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	7b1b      	ldrb	r3, [r3, #12]
 8005aa6:	b25b      	sxtb	r3, r3
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	b25b      	sxtb	r3, r3
 8005aac:	b2da      	uxtb	r2, r3
 8005aae:	4b23      	ldr	r3, [pc, #140]	; (8005b3c <process_touches+0x294>)
 8005ab0:	701a      	strb	r2, [r3, #0]
			}

			self->touch_state = Idle;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	761a      	strb	r2, [r3, #24]
 8005ab8:	e038      	b.n	8005b2c <process_touches+0x284>
		}
	} else if (self->touch_state == SecondReleasedFirstPressed) {
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	7e1b      	ldrb	r3, [r3, #24]
 8005abe:	2b05      	cmp	r3, #5
 8005ac0:	d134      	bne.n	8005b2c <process_touches+0x284>
		if (!dbs[self->touches[0].cap_idx].clean_out) {
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	00db      	lsls	r3, r3, #3
 8005ac8:	68ba      	ldr	r2, [r7, #8]
 8005aca:	4413      	add	r3, r2
 8005acc:	795b      	ldrb	r3, [r3, #5]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d12c      	bne.n	8005b2c <process_touches+0x284>
			self->touch_state = Idle;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	761a      	strb	r2, [r3, #24]
			self->touches[0].end_t = cur_time;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	609a      	str	r2, [r3, #8]

			uint32_t touches_start_diff = self->touches[1].start_t - self->touches[0].start_t;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	691a      	ldr	r2, [r3, #16]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	1ad3      	subs	r3, r2, r3
 8005ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
			uint32_t touches_end_diff = self->touches[0].end_t - self->touches[1].end_t;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	689a      	ldr	r2, [r3, #8]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	695b      	ldr	r3, [r3, #20]
 8005af2:	1ad3      	subs	r3, r2, r3
 8005af4:	62bb      	str	r3, [r7, #40]	; 0x28
			uint32_t touch_duration = self->touches[0].end_t - self->touches[0].start_t;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	689a      	ldr	r2, [r3, #8]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	1ad3      	subs	r3, r2, r3
 8005b00:	627b      	str	r3, [r7, #36]	; 0x24

			//If touch start and touch end differences were small, then it was likely just a tap
			if ((touches_start_diff <= TAP_MIN_THRESHOLD) && (touches_end_diff <= TAP_MIN_THRESHOLD)
 8005b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b04:	2b28      	cmp	r3, #40	; 0x28
 8005b06:	d80b      	bhi.n	8005b20 <process_touches+0x278>
 8005b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b0a:	2b28      	cmp	r3, #40	; 0x28
 8005b0c:	d808      	bhi.n	8005b20 <process_touches+0x278>
					&& (TAP_MIN_THRESHOLD < touch_duration) && (touch_duration < TAP_MAX_THRESHOLD)) {
 8005b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b10:	2b28      	cmp	r3, #40	; 0x28
 8005b12:	d905      	bls.n	8005b20 <process_touches+0x278>
 8005b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b16:	2bc7      	cmp	r3, #199	; 0xc7
 8005b18:	d802      	bhi.n	8005b20 <process_touches+0x278>
				//Register a tap
				action = BothRelease;
 8005b1a:	4b08      	ldr	r3, [pc, #32]	; (8005b3c <process_touches+0x294>)
 8005b1c:	2208      	movs	r2, #8
 8005b1e:	701a      	strb	r2, [r3, #0]
			}
			lightsSimpleMessageReceivedTouch = 0;
 8005b20:	4b07      	ldr	r3, [pc, #28]	; (8005b40 <process_touches+0x298>)
 8005b22:	2200      	movs	r2, #0
 8005b24:	601a      	str	r2, [r3, #0]
			self->touch_state = Idle;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	761a      	strb	r2, [r3, #24]
		}
	}

	if( action == None){
 8005b2c:	4b03      	ldr	r3, [pc, #12]	; (8005b3c <process_touches+0x294>)
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d107      	bne.n	8005b44 <process_touches+0x29c>
		lightsSimpleMessageReceivedTouch = 0x00; // off
 8005b34:	4b02      	ldr	r3, [pc, #8]	; (8005b40 <process_touches+0x298>)
 8005b36:	2200      	movs	r2, #0
 8005b38:	601a      	str	r2, [r3, #0]
 8005b3a:	e042      	b.n	8005bc2 <process_touches+0x31a>
 8005b3c:	20000aec 	.word	0x20000aec
 8005b40:	200284e8 	.word	0x200284e8
	}else if(action == SwipeForward){
 8005b44:	4b29      	ldr	r3, [pc, #164]	; (8005bec <process_touches+0x344>)
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d103      	bne.n	8005b54 <process_touches+0x2ac>
		lightsSimpleMessageReceivedTouch = 0x03; // cyan (green + blue)
 8005b4c:	4b28      	ldr	r3, [pc, #160]	; (8005bf0 <process_touches+0x348>)
 8005b4e:	2203      	movs	r2, #3
 8005b50:	601a      	str	r2, [r3, #0]
 8005b52:	e036      	b.n	8005bc2 <process_touches+0x31a>
	}else if(action == SwipeBackward){
 8005b54:	4b25      	ldr	r3, [pc, #148]	; (8005bec <process_touches+0x344>)
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	2b02      	cmp	r3, #2
 8005b5a:	d103      	bne.n	8005b64 <process_touches+0x2bc>
		lightsSimpleMessageReceivedTouch = (0x01 << 6) | 0x01; // orange (green + red)
 8005b5c:	4b24      	ldr	r3, [pc, #144]	; (8005bf0 <process_touches+0x348>)
 8005b5e:	2241      	movs	r2, #65	; 0x41
 8005b60:	601a      	str	r2, [r3, #0]
 8005b62:	e02e      	b.n	8005bc2 <process_touches+0x31a>
	}else if(action == FrontRelease){
 8005b64:	4b21      	ldr	r3, [pc, #132]	; (8005bec <process_touches+0x344>)
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	2b03      	cmp	r3, #3
 8005b6a:	d103      	bne.n	8005b74 <process_touches+0x2cc>
		lightsSimpleMessageReceivedTouch = 0x00; // off
 8005b6c:	4b20      	ldr	r3, [pc, #128]	; (8005bf0 <process_touches+0x348>)
 8005b6e:	2200      	movs	r2, #0
 8005b70:	601a      	str	r2, [r3, #0]
 8005b72:	e026      	b.n	8005bc2 <process_touches+0x31a>
	}else if(action == BackRelease){
 8005b74:	4b1d      	ldr	r3, [pc, #116]	; (8005bec <process_touches+0x344>)
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	2b04      	cmp	r3, #4
 8005b7a:	d103      	bne.n	8005b84 <process_touches+0x2dc>
		lightsSimpleMessageReceivedTouch = 0x00; // off
 8005b7c:	4b1c      	ldr	r3, [pc, #112]	; (8005bf0 <process_touches+0x348>)
 8005b7e:	2200      	movs	r2, #0
 8005b80:	601a      	str	r2, [r3, #0]
 8005b82:	e01e      	b.n	8005bc2 <process_touches+0x31a>
	}else if(action == FrontHold){
 8005b84:	4b19      	ldr	r3, [pc, #100]	; (8005bec <process_touches+0x344>)
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	2b05      	cmp	r3, #5
 8005b8a:	d103      	bne.n	8005b94 <process_touches+0x2ec>
		lightsSimpleMessageReceivedTouch = 0x01; // green
 8005b8c:	4b18      	ldr	r3, [pc, #96]	; (8005bf0 <process_touches+0x348>)
 8005b8e:	2201      	movs	r2, #1
 8005b90:	601a      	str	r2, [r3, #0]
 8005b92:	e016      	b.n	8005bc2 <process_touches+0x31a>
	}else if(action == BackHold){
 8005b94:	4b15      	ldr	r3, [pc, #84]	; (8005bec <process_touches+0x344>)
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	2b06      	cmp	r3, #6
 8005b9a:	d103      	bne.n	8005ba4 <process_touches+0x2fc>
		lightsSimpleMessageReceivedTouch = 0x02; // blue
 8005b9c:	4b14      	ldr	r3, [pc, #80]	; (8005bf0 <process_touches+0x348>)
 8005b9e:	2202      	movs	r2, #2
 8005ba0:	601a      	str	r2, [r3, #0]
 8005ba2:	e00e      	b.n	8005bc2 <process_touches+0x31a>
	}else if(action == BothHold){
 8005ba4:	4b11      	ldr	r3, [pc, #68]	; (8005bec <process_touches+0x344>)
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	2b07      	cmp	r3, #7
 8005baa:	d103      	bne.n	8005bb4 <process_touches+0x30c>
		lightsSimpleMessageReceivedTouch = 0x01 << 6; // red
 8005bac:	4b10      	ldr	r3, [pc, #64]	; (8005bf0 <process_touches+0x348>)
 8005bae:	2240      	movs	r2, #64	; 0x40
 8005bb0:	601a      	str	r2, [r3, #0]
 8005bb2:	e006      	b.n	8005bc2 <process_touches+0x31a>
	}else if(action == BothRelease){
 8005bb4:	4b0d      	ldr	r3, [pc, #52]	; (8005bec <process_touches+0x344>)
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	2b08      	cmp	r3, #8
 8005bba:	d102      	bne.n	8005bc2 <process_touches+0x31a>
		lightsSimpleMessageReceivedTouch = 0x00; // off
 8005bbc:	4b0c      	ldr	r3, [pc, #48]	; (8005bf0 <process_touches+0x348>)
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	601a      	str	r2, [r3, #0]
	}

	if(prev_msg != lightsSimpleMessageReceivedTouch ){
 8005bc2:	4b0c      	ldr	r3, [pc, #48]	; (8005bf4 <process_touches+0x34c>)
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	4b0a      	ldr	r3, [pc, #40]	; (8005bf0 <process_touches+0x348>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d00a      	beq.n	8005be4 <process_touches+0x33c>
		prev_msg = lightsSimpleMessageReceivedTouch;
 8005bce:	4b08      	ldr	r3, [pc, #32]	; (8005bf0 <process_touches+0x348>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a08      	ldr	r2, [pc, #32]	; (8005bf4 <process_touches+0x34c>)
 8005bd4:	6013      	str	r3, [r2, #0]

		osMessageQueuePut(lightsSimpleQueueHandle, &lightsSimpleMessageReceivedTouch, 0U, 0);
 8005bd6:	4b08      	ldr	r3, [pc, #32]	; (8005bf8 <process_touches+0x350>)
 8005bd8:	6818      	ldr	r0, [r3, #0]
 8005bda:	2300      	movs	r3, #0
 8005bdc:	2200      	movs	r2, #0
 8005bde:	4904      	ldr	r1, [pc, #16]	; (8005bf0 <process_touches+0x348>)
 8005be0:	f008 fbac 	bl	800e33c <osMessageQueuePut>

	}

}
 8005be4:	bf00      	nop
 8005be6:	3730      	adds	r7, #48	; 0x30
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}
 8005bec:	20000aec 	.word	0x20000aec
 8005bf0:	200284e8 	.word	0x200284e8
 8005bf4:	20000ae8 	.word	0x20000ae8
 8005bf8:	20027888 	.word	0x20027888

08005bfc <debounce>:

void debounce(Debouncer *self, uint8_t noisy_in, uint32_t cur_time) {
 8005bfc:	b480      	push	{r7}
 8005bfe:	b085      	sub	sp, #20
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	460b      	mov	r3, r1
 8005c06:	607a      	str	r2, [r7, #4]
 8005c08:	72fb      	strb	r3, [r7, #11]
	if (noisy_in != self->input) {
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	791b      	ldrb	r3, [r3, #4]
 8005c0e:	7afa      	ldrb	r2, [r7, #11]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d006      	beq.n	8005c22 <debounce+0x26>
		self->input = noisy_in;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	7afa      	ldrb	r2, [r7, #11]
 8005c18:	711a      	strb	r2, [r3, #4]
		self->start_t = cur_time;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	601a      	str	r2, [r3, #0]
	} else if (cur_time - self->start_t > DEBOUNCE_TIME) {
		self->clean_out = self->input;
	}
}
 8005c20:	e009      	b.n	8005c36 <debounce+0x3a>
	} else if (cur_time - self->start_t > DEBOUNCE_TIME) {
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	1ad3      	subs	r3, r2, r3
 8005c2a:	2b1e      	cmp	r3, #30
 8005c2c:	d903      	bls.n	8005c36 <debounce+0x3a>
		self->clean_out = self->input;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	791a      	ldrb	r2, [r3, #4]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	715a      	strb	r2, [r3, #5]
}
 8005c36:	bf00      	nop
 8005c38:	3714      	adds	r7, #20
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr

08005c42 <LL_AHB1_GRP1_EnableClock>:
{
 8005c42:	b480      	push	{r7}
 8005c44:	b085      	sub	sp, #20
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8005c4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8005c5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c5e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	4013      	ands	r3, r2
 8005c64:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005c66:	68fb      	ldr	r3, [r7, #12]
}
 8005c68:	bf00      	nop
 8005c6a:	3714      	adds	r7, #20
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr

08005c74 <LL_AHB2_GRP1_EnableClock>:
{
 8005c74:	b480      	push	{r7}
 8005c76:	b085      	sub	sp, #20
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005c7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c80:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005c8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4013      	ands	r3, r2
 8005c96:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005c98:	68fb      	ldr	r3, [r7, #12]
}
 8005c9a:	bf00      	nop
 8005c9c:	3714      	adds	r7, #20
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
	...

08005ca8 <MX_TSC_Init>:

TSC_HandleTypeDef htsc;

/* TSC init function */
void MX_TSC_Init(void)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	af00      	add	r7, sp, #0
//  htsc.Init.MaxCountValue = TSC_MCV_511;
//  htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
//  htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
//  htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
//  htsc.Init.MaxCountInterrupt = DISABLE;
  htsc.Instance = TSC;
 8005cac:	4b1d      	ldr	r3, [pc, #116]	; (8005d24 <MX_TSC_Init+0x7c>)
 8005cae:	4a1e      	ldr	r2, [pc, #120]	; (8005d28 <MX_TSC_Init+0x80>)
 8005cb0:	601a      	str	r2, [r3, #0]
	htsc.Init.CTPulseHighLength = TSC_CTPH_4CYCLES;
 8005cb2:	4b1c      	ldr	r3, [pc, #112]	; (8005d24 <MX_TSC_Init+0x7c>)
 8005cb4:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8005cb8:	605a      	str	r2, [r3, #4]
	htsc.Init.CTPulseLowLength = TSC_CTPL_4CYCLES;
 8005cba:	4b1a      	ldr	r3, [pc, #104]	; (8005d24 <MX_TSC_Init+0x7c>)
 8005cbc:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 8005cc0:	609a      	str	r2, [r3, #8]
	htsc.Init.SpreadSpectrum = DISABLE;
 8005cc2:	4b18      	ldr	r3, [pc, #96]	; (8005d24 <MX_TSC_Init+0x7c>)
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	731a      	strb	r2, [r3, #12]
	htsc.Init.SpreadSpectrumDeviation = 1;
 8005cc8:	4b16      	ldr	r3, [pc, #88]	; (8005d24 <MX_TSC_Init+0x7c>)
 8005cca:	2201      	movs	r2, #1
 8005ccc:	611a      	str	r2, [r3, #16]
	htsc.Init.SpreadSpectrumPrescaler = TSC_SS_PRESC_DIV1;
 8005cce:	4b15      	ldr	r3, [pc, #84]	; (8005d24 <MX_TSC_Init+0x7c>)
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	615a      	str	r2, [r3, #20]
	htsc.Init.PulseGeneratorPrescaler = TSC_PG_PRESC_DIV4;
 8005cd4:	4b13      	ldr	r3, [pc, #76]	; (8005d24 <MX_TSC_Init+0x7c>)
 8005cd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005cda:	619a      	str	r2, [r3, #24]
//	htsc.Init.MaxCountValue = TSC_MCV_8191;
	htsc.Init.MaxCountValue = TSC_MCV_16383;
 8005cdc:	4b11      	ldr	r3, [pc, #68]	; (8005d24 <MX_TSC_Init+0x7c>)
 8005cde:	22c0      	movs	r2, #192	; 0xc0
 8005ce0:	61da      	str	r2, [r3, #28]
	htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
 8005ce2:	4b10      	ldr	r3, [pc, #64]	; (8005d24 <MX_TSC_Init+0x7c>)
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	621a      	str	r2, [r3, #32]
	htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
 8005ce8:	4b0e      	ldr	r3, [pc, #56]	; (8005d24 <MX_TSC_Init+0x7c>)
 8005cea:	2200      	movs	r2, #0
 8005cec:	625a      	str	r2, [r3, #36]	; 0x24
	htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
 8005cee:	4b0d      	ldr	r3, [pc, #52]	; (8005d24 <MX_TSC_Init+0x7c>)
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	629a      	str	r2, [r3, #40]	; 0x28
	htsc.Init.MaxCountInterrupt = DISABLE;
 8005cf4:	4b0b      	ldr	r3, [pc, #44]	; (8005d24 <MX_TSC_Init+0x7c>)
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

//  htsc.Init.ChannelIOs = TSC_GROUP2_IO2|TSC_GROUP2_IO3|TSC_GROUP2_IO4;
  htsc.Init.ChannelIOs = TSC_GROUP2_IO3|TSC_GROUP2_IO4;
 8005cfc:	4b09      	ldr	r3, [pc, #36]	; (8005d24 <MX_TSC_Init+0x7c>)
 8005cfe:	22c0      	movs	r2, #192	; 0xc0
 8005d00:	631a      	str	r2, [r3, #48]	; 0x30

  htsc.Init.ShieldIOs = 0;
 8005d02:	4b08      	ldr	r3, [pc, #32]	; (8005d24 <MX_TSC_Init+0x7c>)
 8005d04:	2200      	movs	r2, #0
 8005d06:	635a      	str	r2, [r3, #52]	; 0x34
  htsc.Init.SamplingIOs = TSC_GROUP2_IO1;
 8005d08:	4b06      	ldr	r3, [pc, #24]	; (8005d24 <MX_TSC_Init+0x7c>)
 8005d0a:	2210      	movs	r2, #16
 8005d0c:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_TSC_Init(&htsc) != HAL_OK)
 8005d0e:	4805      	ldr	r0, [pc, #20]	; (8005d24 <MX_TSC_Init+0x7c>)
 8005d10:	f007 fa5e 	bl	800d1d0 <HAL_TSC_Init>
 8005d14:	4603      	mov	r3, r0
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d001      	beq.n	8005d1e <MX_TSC_Init+0x76>
  {
    Error_Handler();
 8005d1a:	f7fe fac9 	bl	80042b0 <Error_Handler>
  }

}
 8005d1e:	bf00      	nop
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	bf00      	nop
 8005d24:	2002850c 	.word	0x2002850c
 8005d28:	40024000 	.word	0x40024000

08005d2c <HAL_TSC_MspInit>:

void HAL_TSC_MspInit(TSC_HandleTypeDef* tscHandle)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b088      	sub	sp, #32
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d34:	f107 030c 	add.w	r3, r7, #12
 8005d38:	2200      	movs	r2, #0
 8005d3a:	601a      	str	r2, [r3, #0]
 8005d3c:	605a      	str	r2, [r3, #4]
 8005d3e:	609a      	str	r2, [r3, #8]
 8005d40:	60da      	str	r2, [r3, #12]
 8005d42:	611a      	str	r2, [r3, #16]
  if(tscHandle->Instance==TSC)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a1a      	ldr	r2, [pc, #104]	; (8005db4 <HAL_TSC_MspInit+0x88>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d12e      	bne.n	8005dac <HAL_TSC_MspInit+0x80>
  {
  /* USER CODE BEGIN TSC_MspInit 0 */

  /* USER CODE END TSC_MspInit 0 */
    /* TSC clock enable */
    __HAL_RCC_TSC_CLK_ENABLE();
 8005d4e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8005d52:	f7ff ff76 	bl	8005c42 <LL_AHB1_GRP1_EnableClock>
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d56:	2002      	movs	r0, #2
 8005d58:	f7ff ff8c 	bl	8005c74 <LL_AHB2_GRP1_EnableClock>
    PB4     ------> TSC_G2_IO1
    PB5     ------> TSC_G2_IO2
    PB6     ------> TSC_G2_IO3
    PB7     ------> TSC_G2_IO4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005d5c:	2310      	movs	r3, #16
 8005d5e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005d60:	2312      	movs	r3, #18
 8005d62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d64:	2300      	movs	r3, #0
 8005d66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TSC;
 8005d6c:	2309      	movs	r3, #9
 8005d6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d70:	f107 030c 	add.w	r3, r7, #12
 8005d74:	4619      	mov	r1, r3
 8005d76:	4810      	ldr	r0, [pc, #64]	; (8005db8 <HAL_TSC_MspInit+0x8c>)
 8005d78:	f002 f944 	bl	8008004 <HAL_GPIO_Init>

//    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005d7c:	23c0      	movs	r3, #192	; 0xc0
 8005d7e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d80:	2302      	movs	r3, #2
 8005d82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d84:	2300      	movs	r3, #0
 8005d86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TSC;
 8005d8c:	2309      	movs	r3, #9
 8005d8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d90:	f107 030c 	add.w	r3, r7, #12
 8005d94:	4619      	mov	r1, r3
 8005d96:	4808      	ldr	r0, [pc, #32]	; (8005db8 <HAL_TSC_MspInit+0x8c>)
 8005d98:	f002 f934 	bl	8008004 <HAL_GPIO_Init>

    /* TSC interrupt Init */
    HAL_NVIC_SetPriority(TSC_IRQn, 5, 0);
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	2105      	movs	r1, #5
 8005da0:	2027      	movs	r0, #39	; 0x27
 8005da2:	f001 fda8 	bl	80078f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TSC_IRQn);
 8005da6:	2027      	movs	r0, #39	; 0x27
 8005da8:	f001 fdbf 	bl	800792a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TSC_MspInit 1 */

  /* USER CODE END TSC_MspInit 1 */
  }
}
 8005dac:	bf00      	nop
 8005dae:	3720      	adds	r7, #32
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}
 8005db4:	40024000 	.word	0x40024000
 8005db8:	48000400 	.word	0x48000400

08005dbc <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8005dbc:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005dbe:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005dc0:	3304      	adds	r3, #4

08005dc2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005dc2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005dc4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8005dc6:	d3f9      	bcc.n	8005dbc <CopyDataInit>
  bx lr
 8005dc8:	4770      	bx	lr

08005dca <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8005dca:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8005dcc:	3004      	adds	r0, #4

08005dce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8005dce:	4288      	cmp	r0, r1
  bcc FillZerobss
 8005dd0:	d3fb      	bcc.n	8005dca <FillZerobss>
  bx lr
 8005dd2:	4770      	bx	lr

08005dd4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005dd4:	480c      	ldr	r0, [pc, #48]	; (8005e08 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8005dd6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8005dd8:	480c      	ldr	r0, [pc, #48]	; (8005e0c <LoopForever+0x8>)
 8005dda:	490d      	ldr	r1, [pc, #52]	; (8005e10 <LoopForever+0xc>)
 8005ddc:	4a0d      	ldr	r2, [pc, #52]	; (8005e14 <LoopForever+0x10>)
 8005dde:	2300      	movs	r3, #0
 8005de0:	f7ff ffef 	bl	8005dc2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8005de4:	480c      	ldr	r0, [pc, #48]	; (8005e18 <LoopForever+0x14>)
 8005de6:	490d      	ldr	r1, [pc, #52]	; (8005e1c <LoopForever+0x18>)
 8005de8:	2300      	movs	r3, #0
 8005dea:	f7ff fff0 	bl	8005dce <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8005dee:	480c      	ldr	r0, [pc, #48]	; (8005e20 <LoopForever+0x1c>)
 8005df0:	490c      	ldr	r1, [pc, #48]	; (8005e24 <LoopForever+0x20>)
 8005df2:	2300      	movs	r3, #0
 8005df4:	f7ff ffeb 	bl	8005dce <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8005df8:	f7ff f946 	bl	8005088 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8005dfc:	f00f f992 	bl	8015124 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8005e00:	f7fe f97e 	bl	8004100 <main>

08005e04 <LoopForever>:

LoopForever:
  b LoopForever
 8005e04:	e7fe      	b.n	8005e04 <LoopForever>
 8005e06:	0000      	.short	0x0000
  ldr   r0, =_estack
 8005e08:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8005e0c:	20000004 	.word	0x20000004
 8005e10:	20000138 	.word	0x20000138
 8005e14:	080174b0 	.word	0x080174b0
  INIT_BSS _sbss, _ebss
 8005e18:	200001e8 	.word	0x200001e8
 8005e1c:	2002867c 	.word	0x2002867c
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8005e20:	200300c4 	.word	0x200300c4
 8005e24:	20030b5b 	.word	0x20030b5b

08005e28 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005e28:	e7fe      	b.n	8005e28 <ADC1_IRQHandler>
	...

08005e2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b082      	sub	sp, #8
 8005e30:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005e32:	2300      	movs	r3, #0
 8005e34:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005e36:	4b0c      	ldr	r3, [pc, #48]	; (8005e68 <HAL_Init+0x3c>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a0b      	ldr	r2, [pc, #44]	; (8005e68 <HAL_Init+0x3c>)
 8005e3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e40:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005e42:	2003      	movs	r0, #3
 8005e44:	f001 fd4c 	bl	80078e0 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005e48:	2000      	movs	r0, #0
 8005e4a:	f7ff f84d 	bl	8004ee8 <HAL_InitTick>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d002      	beq.n	8005e5a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	71fb      	strb	r3, [r7, #7]
 8005e58:	e001      	b.n	8005e5e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005e5a:	f7ff f814 	bl	8004e86 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005e5e:	79fb      	ldrb	r3, [r7, #7]
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3708      	adds	r7, #8
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}
 8005e68:	58004000 	.word	0x58004000

08005e6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005e70:	4b05      	ldr	r3, [pc, #20]	; (8005e88 <HAL_IncTick+0x1c>)
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	4b05      	ldr	r3, [pc, #20]	; (8005e8c <HAL_IncTick+0x20>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4413      	add	r3, r2
 8005e7a:	4a03      	ldr	r2, [pc, #12]	; (8005e88 <HAL_IncTick+0x1c>)
 8005e7c:	6013      	str	r3, [r2, #0]
}
 8005e7e:	bf00      	nop
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr
 8005e88:	20028550 	.word	0x20028550
 8005e8c:	20000080 	.word	0x20000080

08005e90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005e90:	b480      	push	{r7}
 8005e92:	af00      	add	r7, sp, #0
  return uwTick;
 8005e94:	4b03      	ldr	r3, [pc, #12]	; (8005ea4 <HAL_GetTick+0x14>)
 8005e96:	681b      	ldr	r3, [r3, #0]
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr
 8005ea2:	bf00      	nop
 8005ea4:	20028550 	.word	0x20028550

08005ea8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8005eac:	4b03      	ldr	r3, [pc, #12]	; (8005ebc <HAL_GetTickPrio+0x14>)
 8005eae:	681b      	ldr	r3, [r3, #0]
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr
 8005eba:	bf00      	nop
 8005ebc:	2000007c 	.word	0x2000007c

08005ec0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b084      	sub	sp, #16
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8005ec8:	f7ff ffe2 	bl	8005e90 <HAL_GetTick>
 8005ecc:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ed8:	d004      	beq.n	8005ee4 <HAL_Delay+0x24>
    {
      wait += (uint32_t)(uwTickFreq);
 8005eda:	4b09      	ldr	r3, [pc, #36]	; (8005f00 <HAL_Delay+0x40>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68fa      	ldr	r2, [r7, #12]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8005ee4:	bf00      	nop
 8005ee6:	f7ff ffd3 	bl	8005e90 <HAL_GetTick>
 8005eea:	4602      	mov	r2, r0
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	1ad3      	subs	r3, r2, r3
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d8f7      	bhi.n	8005ee6 <HAL_Delay+0x26>
    {
    }
  }
 8005ef6:	bf00      	nop
 8005ef8:	3710      	adds	r7, #16
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	20000080 	.word	0x20000080

08005f04 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]
//  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
}
 8005f0e:	bf00      	nop
 8005f10:	370c      	adds	r7, #12
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr

08005f1a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005f1a:	b480      	push	{r7}
 8005f1c:	b083      	sub	sp, #12
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
 8005f22:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	431a      	orrs	r2, r3
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	609a      	str	r2, [r3, #8]
}
 8005f34:	bf00      	nop
 8005f36:	370c      	adds	r7, #12
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	370c      	adds	r7, #12
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005f5c:	b490      	push	{r4, r7}
 8005f5e:	b084      	sub	sp, #16
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	60f8      	str	r0, [r7, #12]
 8005f64:	60b9      	str	r1, [r7, #8]
 8005f66:	607a      	str	r2, [r7, #4]
 8005f68:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	3360      	adds	r3, #96	; 0x60
 8005f6e:	461a      	mov	r2, r3
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	4413      	add	r3, r2
 8005f76:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8005f78:	6822      	ldr	r2, [r4, #0]
 8005f7a:	4b08      	ldr	r3, [pc, #32]	; (8005f9c <LL_ADC_SetOffset+0x40>)
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8005f84:	683a      	ldr	r2, [r7, #0]
 8005f86:	430a      	orrs	r2, r1
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f8e:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005f90:	bf00      	nop
 8005f92:	3710      	adds	r7, #16
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bc90      	pop	{r4, r7}
 8005f98:	4770      	bx	lr
 8005f9a:	bf00      	nop
 8005f9c:	03fff000 	.word	0x03fff000

08005fa0 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005fa0:	b490      	push	{r4, r7}
 8005fa2:	b082      	sub	sp, #8
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	3360      	adds	r3, #96	; 0x60
 8005fae:	461a      	mov	r2, r3
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	4413      	add	r3, r2
 8005fb6:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005fb8:	6823      	ldr	r3, [r4, #0]
 8005fba:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3708      	adds	r7, #8
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bc90      	pop	{r4, r7}
 8005fc6:	4770      	bx	lr

08005fc8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005fc8:	b490      	push	{r4, r7}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	60b9      	str	r1, [r7, #8]
 8005fd2:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	3360      	adds	r3, #96	; 0x60
 8005fd8:	461a      	mov	r2, r3
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	4413      	add	r3, r2
 8005fe0:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8005fe2:	6823      	ldr	r3, [r4, #0]
 8005fe4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005fee:	bf00      	nop
 8005ff0:	3710      	adds	r7, #16
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bc90      	pop	{r4, r7}
 8005ff6:	4770      	bx	lr

08005ff8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b083      	sub	sp, #12
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006008:	2b00      	cmp	r3, #0
 800600a:	d101      	bne.n	8006010 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800600c:	2301      	movs	r3, #1
 800600e:	e000      	b.n	8006012 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	370c      	adds	r7, #12
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr

0800601e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800601e:	b490      	push	{r4, r7}
 8006020:	b084      	sub	sp, #16
 8006022:	af00      	add	r7, sp, #0
 8006024:	60f8      	str	r0, [r7, #12]
 8006026:	60b9      	str	r1, [r7, #8]
 8006028:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	3330      	adds	r3, #48	; 0x30
 800602e:	461a      	mov	r2, r3
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	0a1b      	lsrs	r3, r3, #8
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	f003 030c 	and.w	r3, r3, #12
 800603a:	4413      	add	r3, r2
 800603c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800603e:	6822      	ldr	r2, [r4, #0]
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	f003 031f 	and.w	r3, r3, #31
 8006046:	211f      	movs	r1, #31
 8006048:	fa01 f303 	lsl.w	r3, r1, r3
 800604c:	43db      	mvns	r3, r3
 800604e:	401a      	ands	r2, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	0e9b      	lsrs	r3, r3, #26
 8006054:	f003 011f 	and.w	r1, r3, #31
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	f003 031f 	and.w	r3, r3, #31
 800605e:	fa01 f303 	lsl.w	r3, r1, r3
 8006062:	4313      	orrs	r3, r2
 8006064:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006066:	bf00      	nop
 8006068:	3710      	adds	r7, #16
 800606a:	46bd      	mov	sp, r7
 800606c:	bc90      	pop	{r4, r7}
 800606e:	4770      	bx	lr

08006070 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006070:	b490      	push	{r4, r7}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	60b9      	str	r1, [r7, #8]
 800607a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	3314      	adds	r3, #20
 8006080:	461a      	mov	r2, r3
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	0e5b      	lsrs	r3, r3, #25
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	f003 0304 	and.w	r3, r3, #4
 800608c:	4413      	add	r3, r2
 800608e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8006090:	6822      	ldr	r2, [r4, #0]
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	0d1b      	lsrs	r3, r3, #20
 8006096:	f003 031f 	and.w	r3, r3, #31
 800609a:	2107      	movs	r1, #7
 800609c:	fa01 f303 	lsl.w	r3, r1, r3
 80060a0:	43db      	mvns	r3, r3
 80060a2:	401a      	ands	r2, r3
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	0d1b      	lsrs	r3, r3, #20
 80060a8:	f003 031f 	and.w	r3, r3, #31
 80060ac:	6879      	ldr	r1, [r7, #4]
 80060ae:	fa01 f303 	lsl.w	r3, r1, r3
 80060b2:	4313      	orrs	r3, r2
 80060b4:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80060b6:	bf00      	nop
 80060b8:	3710      	adds	r7, #16
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bc90      	pop	{r4, r7}
 80060be:	4770      	bx	lr

080060c0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b085      	sub	sp, #20
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060d8:	43db      	mvns	r3, r3
 80060da:	401a      	ands	r2, r3
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f003 0318 	and.w	r3, r3, #24
 80060e2:	4908      	ldr	r1, [pc, #32]	; (8006104 <LL_ADC_SetChannelSingleDiff+0x44>)
 80060e4:	40d9      	lsrs	r1, r3
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	400b      	ands	r3, r1
 80060ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060ee:	431a      	orrs	r2, r3
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80060f6:	bf00      	nop
 80060f8:	3714      	adds	r7, #20
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr
 8006102:	bf00      	nop
 8006104:	0007ffff 	.word	0x0007ffff

08006108 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8006118:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	6093      	str	r3, [r2, #8]
}
 8006120:	bf00      	nop
 8006122:	370c      	adds	r7, #12
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr

0800612c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800612c:	b480      	push	{r7}
 800612e:	b083      	sub	sp, #12
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800613c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006140:	d101      	bne.n	8006146 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006142:	2301      	movs	r3, #1
 8006144:	e000      	b.n	8006148 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006146:	2300      	movs	r3, #0
}
 8006148:	4618      	mov	r0, r3
 800614a:	370c      	adds	r7, #12
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr

08006154 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006154:	b480      	push	{r7}
 8006156:	b083      	sub	sp, #12
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8006164:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006168:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006170:	bf00      	nop
 8006172:	370c      	adds	r7, #12
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr

0800617c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800617c:	b480      	push	{r7}
 800617e:	b083      	sub	sp, #12
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800618c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006190:	d101      	bne.n	8006196 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006192:	2301      	movs	r3, #1
 8006194:	e000      	b.n	8006198 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006196:	2300      	movs	r3, #0
}
 8006198:	4618      	mov	r0, r3
 800619a:	370c      	adds	r7, #12
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b083      	sub	sp, #12
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80061b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80061b8:	f043 0201 	orr.w	r2, r3, #1
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80061c0:	bf00      	nop
 80061c2:	370c      	adds	r7, #12
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80061dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80061e0:	f043 0202 	orr.w	r2, r3, #2
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80061e8:	bf00      	nop
 80061ea:	370c      	adds	r7, #12
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr

080061f4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	f003 0301 	and.w	r3, r3, #1
 8006204:	2b01      	cmp	r3, #1
 8006206:	d101      	bne.n	800620c <LL_ADC_IsEnabled+0x18>
 8006208:	2301      	movs	r3, #1
 800620a:	e000      	b.n	800620e <LL_ADC_IsEnabled+0x1a>
 800620c:	2300      	movs	r3, #0
}
 800620e:	4618      	mov	r0, r3
 8006210:	370c      	adds	r7, #12
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr

0800621a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800621a:	b480      	push	{r7}
 800621c:	b083      	sub	sp, #12
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	f003 0302 	and.w	r3, r3, #2
 800622a:	2b02      	cmp	r3, #2
 800622c:	d101      	bne.n	8006232 <LL_ADC_IsDisableOngoing+0x18>
 800622e:	2301      	movs	r3, #1
 8006230:	e000      	b.n	8006234 <LL_ADC_IsDisableOngoing+0x1a>
 8006232:	2300      	movs	r3, #0
}
 8006234:	4618      	mov	r0, r3
 8006236:	370c      	adds	r7, #12
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006250:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006254:	f043 0204 	orr.w	r2, r3, #4
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800625c:	bf00      	nop
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8006268:	b480      	push	{r7}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006278:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800627c:	f043 0210 	orr.w	r2, r3, #16
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8006284:	bf00      	nop
 8006286:	370c      	adds	r7, #12
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	f003 0304 	and.w	r3, r3, #4
 80062a0:	2b04      	cmp	r3, #4
 80062a2:	d101      	bne.n	80062a8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80062a4:	2301      	movs	r3, #1
 80062a6:	e000      	b.n	80062aa <LL_ADC_REG_IsConversionOngoing+0x1a>
 80062a8:	2300      	movs	r3, #0
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	370c      	adds	r7, #12
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr

080062b6 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80062b6:	b480      	push	{r7}
 80062b8:	b083      	sub	sp, #12
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80062c6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80062ca:	f043 0220 	orr.w	r2, r3, #32
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80062d2:	bf00      	nop
 80062d4:	370c      	adds	r7, #12
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr

080062de <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80062de:	b480      	push	{r7}
 80062e0:	b083      	sub	sp, #12
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	f003 0308 	and.w	r3, r3, #8
 80062ee:	2b08      	cmp	r3, #8
 80062f0:	d101      	bne.n	80062f6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80062f2:	2301      	movs	r3, #1
 80062f4:	e000      	b.n	80062f8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80062f6:	2300      	movs	r3, #0
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b088      	sub	sp, #32
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800630c:	2300      	movs	r3, #0
 800630e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8006310:	2300      	movs	r3, #0
 8006312:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d101      	bne.n	800631e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	e12a      	b.n	8006574 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006328:	2b00      	cmp	r3, #0
 800632a:	d109      	bne.n	8006340 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f7fa fdef 	bl	8000f10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2200      	movs	r2, #0
 8006336:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4618      	mov	r0, r3
 8006346:	f7ff fef1 	bl	800612c <LL_ADC_IsDeepPowerDownEnabled>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d004      	beq.n	800635a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4618      	mov	r0, r3
 8006356:	f7ff fed7 	bl	8006108 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4618      	mov	r0, r3
 8006360:	f7ff ff0c 	bl	800617c <LL_ADC_IsInternalRegulatorEnabled>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d113      	bne.n	8006392 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4618      	mov	r0, r3
 8006370:	f7ff fef0 	bl	8006154 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8006374:	4b81      	ldr	r3, [pc, #516]	; (800657c <HAL_ADC_Init+0x278>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	099b      	lsrs	r3, r3, #6
 800637a:	4a81      	ldr	r2, [pc, #516]	; (8006580 <HAL_ADC_Init+0x27c>)
 800637c:	fba2 2303 	umull	r2, r3, r2, r3
 8006380:	099b      	lsrs	r3, r3, #6
 8006382:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006384:	e002      	b.n	800638c <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	3b01      	subs	r3, #1
 800638a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d1f9      	bne.n	8006386 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4618      	mov	r0, r3
 8006398:	f7ff fef0 	bl	800617c <LL_ADC_IsInternalRegulatorEnabled>
 800639c:	4603      	mov	r3, r0
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d10d      	bne.n	80063be <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063a6:	f043 0210 	orr.w	r2, r3, #16
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063b2:	f043 0201 	orr.w	r2, r3, #1
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4618      	mov	r0, r3
 80063c4:	f7ff ff64 	bl	8006290 <LL_ADC_REG_IsConversionOngoing>
 80063c8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063ce:	f003 0310 	and.w	r3, r3, #16
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	f040 80c5 	bne.w	8006562 <HAL_ADC_Init+0x25e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	f040 80c1 	bne.w	8006562 <HAL_ADC_Init+0x25e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063e4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80063e8:	f043 0202 	orr.w	r2, r3, #2
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4618      	mov	r0, r3
 80063f6:	f7ff fefd 	bl	80061f4 <LL_ADC_IsEnabled>
 80063fa:	4603      	mov	r3, r0
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d10b      	bne.n	8006418 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006400:	4860      	ldr	r0, [pc, #384]	; (8006584 <HAL_ADC_Init+0x280>)
 8006402:	f7ff fef7 	bl	80061f4 <LL_ADC_IsEnabled>
 8006406:	4603      	mov	r3, r0
 8006408:	2b00      	cmp	r3, #0
 800640a:	d105      	bne.n	8006418 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	4619      	mov	r1, r3
 8006412:	485d      	ldr	r0, [pc, #372]	; (8006588 <HAL_ADC_Init+0x284>)
 8006414:	f7ff fd76 	bl	8005f04 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	7e5b      	ldrb	r3, [r3, #25]
 800641c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006422:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8006428:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800642e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006436:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006438:	4313      	orrs	r3, r2
 800643a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006442:	2b01      	cmp	r3, #1
 8006444:	d106      	bne.n	8006454 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644a:	3b01      	subs	r3, #1
 800644c:	045b      	lsls	r3, r3, #17
 800644e:	69ba      	ldr	r2, [r7, #24]
 8006450:	4313      	orrs	r3, r2
 8006452:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006458:	2b00      	cmp	r3, #0
 800645a:	d009      	beq.n	8006470 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006460:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006468:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800646a:	69ba      	ldr	r2, [r7, #24]
 800646c:	4313      	orrs	r3, r2
 800646e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	68da      	ldr	r2, [r3, #12]
 8006476:	4b45      	ldr	r3, [pc, #276]	; (800658c <HAL_ADC_Init+0x288>)
 8006478:	4013      	ands	r3, r2
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	6812      	ldr	r2, [r2, #0]
 800647e:	69b9      	ldr	r1, [r7, #24]
 8006480:	430b      	orrs	r3, r1
 8006482:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4618      	mov	r0, r3
 800648a:	f7ff ff01 	bl	8006290 <LL_ADC_REG_IsConversionOngoing>
 800648e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4618      	mov	r0, r3
 8006496:	f7ff ff22 	bl	80062de <LL_ADC_INJ_IsConversionOngoing>
 800649a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d13d      	bne.n	800651e <HAL_ADC_Init+0x21a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d13a      	bne.n	800651e <HAL_ADC_Init+0x21a>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80064ac:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80064b4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80064b6:	4313      	orrs	r3, r2
 80064b8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064c4:	f023 0302 	bic.w	r3, r3, #2
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	6812      	ldr	r2, [r2, #0]
 80064cc:	69b9      	ldr	r1, [r7, #24]
 80064ce:	430b      	orrs	r3, r1
 80064d0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d118      	bne.n	800650e <HAL_ADC_Init+0x20a>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80064e6:	f023 0304 	bic.w	r3, r3, #4
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80064f2:	4311      	orrs	r1, r2
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80064f8:	4311      	orrs	r1, r2
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80064fe:	430a      	orrs	r2, r1
 8006500:	431a      	orrs	r2, r3
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f042 0201 	orr.w	r2, r2, #1
 800650a:	611a      	str	r2, [r3, #16]
 800650c:	e007      	b.n	800651e <HAL_ADC_Init+0x21a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	691a      	ldr	r2, [r3, #16]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f022 0201 	bic.w	r2, r2, #1
 800651c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	2b01      	cmp	r3, #1
 8006524:	d10c      	bne.n	8006540 <HAL_ADC_Init+0x23c>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800652c:	f023 010f 	bic.w	r1, r3, #15
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	69db      	ldr	r3, [r3, #28]
 8006534:	1e5a      	subs	r2, r3, #1
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	430a      	orrs	r2, r1
 800653c:	631a      	str	r2, [r3, #48]	; 0x30
 800653e:	e007      	b.n	8006550 <HAL_ADC_Init+0x24c>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f022 020f 	bic.w	r2, r2, #15
 800654e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006554:	f023 0303 	bic.w	r3, r3, #3
 8006558:	f043 0201 	orr.w	r2, r3, #1
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	655a      	str	r2, [r3, #84]	; 0x54
 8006560:	e007      	b.n	8006572 <HAL_ADC_Init+0x26e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006566:	f043 0210 	orr.w	r2, r3, #16
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800656e:	2301      	movs	r3, #1
 8006570:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006572:	7ffb      	ldrb	r3, [r7, #31]
}
 8006574:	4618      	mov	r0, r3
 8006576:	3720      	adds	r7, #32
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}
 800657c:	20000078 	.word	0x20000078
 8006580:	053e2d63 	.word	0x053e2d63
 8006584:	50040000 	.word	0x50040000
 8006588:	50040300 	.word	0x50040300
 800658c:	fff0c007 	.word	0xfff0c007

08006590 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b086      	sub	sp, #24
 8006594:	af00      	add	r7, sp, #0
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	60b9      	str	r1, [r7, #8]
 800659a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4618      	mov	r0, r3
 80065a2:	f7ff fe75 	bl	8006290 <LL_ADC_REG_IsConversionOngoing>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d167      	bne.n	800667c <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d101      	bne.n	80065ba <HAL_ADC_Start_DMA+0x2a>
 80065b6:	2302      	movs	r3, #2
 80065b8:	e063      	b.n	8006682 <HAL_ADC_Start_DMA+0xf2>
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2201      	movs	r2, #1
 80065be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80065c2:	68f8      	ldr	r0, [r7, #12]
 80065c4:	f000 fcc2 	bl	8006f4c <ADC_Enable>
 80065c8:	4603      	mov	r3, r0
 80065ca:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80065cc:	7dfb      	ldrb	r3, [r7, #23]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d14f      	bne.n	8006672 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065d6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80065da:	f023 0301 	bic.w	r3, r3, #1
 80065de:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                          HAL_ADC_STATE_REG_BUSY);

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d006      	beq.n	8006600 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065f6:	f023 0206 	bic.w	r2, r3, #6
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	659a      	str	r2, [r3, #88]	; 0x58
 80065fe:	e002      	b.n	8006606 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2200      	movs	r2, #0
 8006604:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800660a:	4a20      	ldr	r2, [pc, #128]	; (800668c <HAL_ADC_Start_DMA+0xfc>)
 800660c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006612:	4a1f      	ldr	r2, [pc, #124]	; (8006690 <HAL_ADC_Start_DMA+0x100>)
 8006614:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800661a:	4a1e      	ldr	r2, [pc, #120]	; (8006694 <HAL_ADC_Start_DMA+0x104>)
 800661c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	221c      	movs	r2, #28
 8006624:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2200      	movs	r2, #0
 800662a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	685a      	ldr	r2, [r3, #4]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f042 0210 	orr.w	r2, r2, #16
 800663c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	68da      	ldr	r2, [r3, #12]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f042 0201 	orr.w	r2, r2, #1
 800664c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	3340      	adds	r3, #64	; 0x40
 8006658:	4619      	mov	r1, r3
 800665a:	68ba      	ldr	r2, [r7, #8]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f001 fa49 	bl	8007af4 <HAL_DMA_Start_IT>
 8006662:	4603      	mov	r3, r0
 8006664:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4618      	mov	r0, r3
 800666c:	f7ff fde8 	bl	8006240 <LL_ADC_REG_StartConversion>
 8006670:	e006      	b.n	8006680 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2200      	movs	r2, #0
 8006676:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800667a:	e001      	b.n	8006680 <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800667c:	2302      	movs	r3, #2
 800667e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006680:	7dfb      	ldrb	r3, [r7, #23]
}
 8006682:	4618      	mov	r0, r3
 8006684:	3718      	adds	r7, #24
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
 800668a:	bf00      	nop
 800668c:	080070b1 	.word	0x080070b1
 8006690:	08007189 	.word	0x08007189
 8006694:	080071a5 	.word	0x080071a5

08006698 <HAL_ADC_Stop_DMA>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d101      	bne.n	80066ae <HAL_ADC_Stop_DMA+0x16>
 80066aa:	2302      	movs	r3, #2
 80066ac:	e051      	b.n	8006752 <HAL_ADC_Stop_DMA+0xba>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2201      	movs	r2, #1
 80066b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80066b6:	2103      	movs	r1, #3
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 fb93 	bl	8006de4 <ADC_ConversionStop>
 80066be:	4603      	mov	r3, r0
 80066c0:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80066c2:	7bfb      	ldrb	r3, [r7, #15]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d13f      	bne.n	8006748 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	68da      	ldr	r2, [r3, #12]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f022 0201 	bic.w	r2, r2, #1
 80066d6:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066dc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	2b02      	cmp	r3, #2
 80066e4:	d10f      	bne.n	8006706 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066ea:	4618      	mov	r0, r3
 80066ec:	f001 fa7d 	bl	8007bea <HAL_DMA_Abort>
 80066f0:	4603      	mov	r3, r0
 80066f2:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80066f4:	7bfb      	ldrb	r3, [r7, #15]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d005      	beq.n	8006706 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	685a      	ldr	r2, [r3, #4]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f022 0210 	bic.w	r2, r2, #16
 8006714:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8006716:	7bfb      	ldrb	r3, [r7, #15]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d105      	bne.n	8006728 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f000 fc6f 	bl	8007000 <ADC_Disable>
 8006722:	4603      	mov	r3, r0
 8006724:	73fb      	strb	r3, [r7, #15]
 8006726:	e002      	b.n	800672e <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f000 fc69 	bl	8007000 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800672e:	7bfb      	ldrb	r3, [r7, #15]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d109      	bne.n	8006748 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006738:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800673c:	f023 0301 	bic.w	r3, r3, #1
 8006740:	f043 0201 	orr.w	r2, r3, #1
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2200      	movs	r2, #0
 800674c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006750:	7bfb      	ldrb	r3, [r7, #15]
}
 8006752:	4618      	mov	r0, r3
 8006754:	3710      	adds	r7, #16
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}

0800675a <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800675a:	b480      	push	{r7}
 800675c:	b083      	sub	sp, #12
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006762:	bf00      	nop
 8006764:	370c      	adds	r7, #12
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr
	...

08006770 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b0a6      	sub	sp, #152	; 0x98
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800677a:	2300      	movs	r3, #0
 800677c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8006780:	2300      	movs	r3, #0
 8006782:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800678a:	2b01      	cmp	r3, #1
 800678c:	d101      	bne.n	8006792 <HAL_ADC_ConfigChannel+0x22>
 800678e:	2302      	movs	r3, #2
 8006790:	e31e      	b.n	8006dd0 <HAL_ADC_ConfigChannel+0x660>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2201      	movs	r2, #1
 8006796:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4618      	mov	r0, r3
 80067a0:	f7ff fd76 	bl	8006290 <LL_ADC_REG_IsConversionOngoing>
 80067a4:	4603      	mov	r3, r0
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	f040 8303 	bne.w	8006db2 <HAL_ADC_ConfigChannel+0x642>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6818      	ldr	r0, [r3, #0]
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	6859      	ldr	r1, [r3, #4]
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	461a      	mov	r2, r3
 80067ba:	f7ff fc30 	bl	800601e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4618      	mov	r0, r3
 80067c4:	f7ff fd64 	bl	8006290 <LL_ADC_REG_IsConversionOngoing>
 80067c8:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4618      	mov	r0, r3
 80067d2:	f7ff fd84 	bl	80062de <LL_ADC_INJ_IsConversionOngoing>
 80067d6:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80067da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80067de:	2b00      	cmp	r3, #0
 80067e0:	f040 8148 	bne.w	8006a74 <HAL_ADC_ConfigChannel+0x304>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80067e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	f040 8143 	bne.w	8006a74 <HAL_ADC_ConfigChannel+0x304>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6818      	ldr	r0, [r3, #0]
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	6819      	ldr	r1, [r3, #0]
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	461a      	mov	r2, r3
 80067fc:	f7ff fc38 	bl	8006070 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	695a      	ldr	r2, [r3, #20]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	68db      	ldr	r3, [r3, #12]
 800680a:	08db      	lsrs	r3, r3, #3
 800680c:	f003 0303 	and.w	r3, r3, #3
 8006810:	005b      	lsls	r3, r3, #1
 8006812:	fa02 f303 	lsl.w	r3, r2, r3
 8006816:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	691b      	ldr	r3, [r3, #16]
 800681e:	2b04      	cmp	r3, #4
 8006820:	d00a      	beq.n	8006838 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6818      	ldr	r0, [r3, #0]
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	6919      	ldr	r1, [r3, #16]
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006832:	f7ff fb93 	bl	8005f5c <LL_ADC_SetOffset>
 8006836:	e11d      	b.n	8006a74 <HAL_ADC_ConfigChannel+0x304>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2100      	movs	r1, #0
 800683e:	4618      	mov	r0, r3
 8006840:	f7ff fbae 	bl	8005fa0 <LL_ADC_GetOffsetChannel>
 8006844:	4603      	mov	r3, r0
 8006846:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800684a:	2b00      	cmp	r3, #0
 800684c:	d10a      	bne.n	8006864 <HAL_ADC_ConfigChannel+0xf4>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2100      	movs	r1, #0
 8006854:	4618      	mov	r0, r3
 8006856:	f7ff fba3 	bl	8005fa0 <LL_ADC_GetOffsetChannel>
 800685a:	4603      	mov	r3, r0
 800685c:	0e9b      	lsrs	r3, r3, #26
 800685e:	f003 021f 	and.w	r2, r3, #31
 8006862:	e012      	b.n	800688a <HAL_ADC_ConfigChannel+0x11a>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2100      	movs	r1, #0
 800686a:	4618      	mov	r0, r3
 800686c:	f7ff fb98 	bl	8005fa0 <LL_ADC_GetOffsetChannel>
 8006870:	4603      	mov	r3, r0
 8006872:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006876:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800687a:	fa93 f3a3 	rbit	r3, r3
 800687e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8006880:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006882:	fab3 f383 	clz	r3, r3
 8006886:	b2db      	uxtb	r3, r3
 8006888:	461a      	mov	r2, r3
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006892:	2b00      	cmp	r3, #0
 8006894:	d105      	bne.n	80068a2 <HAL_ADC_ConfigChannel+0x132>
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	0e9b      	lsrs	r3, r3, #26
 800689c:	f003 031f 	and.w	r3, r3, #31
 80068a0:	e00a      	b.n	80068b8 <HAL_ADC_ConfigChannel+0x148>
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068aa:	fa93 f3a3 	rbit	r3, r3
 80068ae:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 80068b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068b2:	fab3 f383 	clz	r3, r3
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d106      	bne.n	80068ca <HAL_ADC_ConfigChannel+0x15a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	2200      	movs	r2, #0
 80068c2:	2100      	movs	r1, #0
 80068c4:	4618      	mov	r0, r3
 80068c6:	f7ff fb7f 	bl	8005fc8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	2101      	movs	r1, #1
 80068d0:	4618      	mov	r0, r3
 80068d2:	f7ff fb65 	bl	8005fa0 <LL_ADC_GetOffsetChannel>
 80068d6:	4603      	mov	r3, r0
 80068d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d10a      	bne.n	80068f6 <HAL_ADC_ConfigChannel+0x186>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2101      	movs	r1, #1
 80068e6:	4618      	mov	r0, r3
 80068e8:	f7ff fb5a 	bl	8005fa0 <LL_ADC_GetOffsetChannel>
 80068ec:	4603      	mov	r3, r0
 80068ee:	0e9b      	lsrs	r3, r3, #26
 80068f0:	f003 021f 	and.w	r2, r3, #31
 80068f4:	e010      	b.n	8006918 <HAL_ADC_ConfigChannel+0x1a8>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	2101      	movs	r1, #1
 80068fc:	4618      	mov	r0, r3
 80068fe:	f7ff fb4f 	bl	8005fa0 <LL_ADC_GetOffsetChannel>
 8006902:	4603      	mov	r3, r0
 8006904:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006906:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006908:	fa93 f3a3 	rbit	r3, r3
 800690c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800690e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006910:	fab3 f383 	clz	r3, r3
 8006914:	b2db      	uxtb	r3, r3
 8006916:	461a      	mov	r2, r3
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006920:	2b00      	cmp	r3, #0
 8006922:	d105      	bne.n	8006930 <HAL_ADC_ConfigChannel+0x1c0>
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	0e9b      	lsrs	r3, r3, #26
 800692a:	f003 031f 	and.w	r3, r3, #31
 800692e:	e00a      	b.n	8006946 <HAL_ADC_ConfigChannel+0x1d6>
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006936:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006938:	fa93 f3a3 	rbit	r3, r3
 800693c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800693e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006940:	fab3 f383 	clz	r3, r3
 8006944:	b2db      	uxtb	r3, r3
 8006946:	429a      	cmp	r2, r3
 8006948:	d106      	bne.n	8006958 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	2200      	movs	r2, #0
 8006950:	2101      	movs	r1, #1
 8006952:	4618      	mov	r0, r3
 8006954:	f7ff fb38 	bl	8005fc8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	2102      	movs	r1, #2
 800695e:	4618      	mov	r0, r3
 8006960:	f7ff fb1e 	bl	8005fa0 <LL_ADC_GetOffsetChannel>
 8006964:	4603      	mov	r3, r0
 8006966:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800696a:	2b00      	cmp	r3, #0
 800696c:	d10a      	bne.n	8006984 <HAL_ADC_ConfigChannel+0x214>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2102      	movs	r1, #2
 8006974:	4618      	mov	r0, r3
 8006976:	f7ff fb13 	bl	8005fa0 <LL_ADC_GetOffsetChannel>
 800697a:	4603      	mov	r3, r0
 800697c:	0e9b      	lsrs	r3, r3, #26
 800697e:	f003 021f 	and.w	r2, r3, #31
 8006982:	e010      	b.n	80069a6 <HAL_ADC_ConfigChannel+0x236>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	2102      	movs	r1, #2
 800698a:	4618      	mov	r0, r3
 800698c:	f7ff fb08 	bl	8005fa0 <LL_ADC_GetOffsetChannel>
 8006990:	4603      	mov	r3, r0
 8006992:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006994:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006996:	fa93 f3a3 	rbit	r3, r3
 800699a:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 800699c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800699e:	fab3 f383 	clz	r3, r3
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	461a      	mov	r2, r3
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d105      	bne.n	80069be <HAL_ADC_ConfigChannel+0x24e>
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	0e9b      	lsrs	r3, r3, #26
 80069b8:	f003 031f 	and.w	r3, r3, #31
 80069bc:	e00a      	b.n	80069d4 <HAL_ADC_ConfigChannel+0x264>
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80069c6:	fa93 f3a3 	rbit	r3, r3
 80069ca:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80069cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069ce:	fab3 f383 	clz	r3, r3
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d106      	bne.n	80069e6 <HAL_ADC_ConfigChannel+0x276>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	2200      	movs	r2, #0
 80069de:	2102      	movs	r1, #2
 80069e0:	4618      	mov	r0, r3
 80069e2:	f7ff faf1 	bl	8005fc8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	2103      	movs	r1, #3
 80069ec:	4618      	mov	r0, r3
 80069ee:	f7ff fad7 	bl	8005fa0 <LL_ADC_GetOffsetChannel>
 80069f2:	4603      	mov	r3, r0
 80069f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d10a      	bne.n	8006a12 <HAL_ADC_ConfigChannel+0x2a2>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	2103      	movs	r1, #3
 8006a02:	4618      	mov	r0, r3
 8006a04:	f7ff facc 	bl	8005fa0 <LL_ADC_GetOffsetChannel>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	0e9b      	lsrs	r3, r3, #26
 8006a0c:	f003 021f 	and.w	r2, r3, #31
 8006a10:	e010      	b.n	8006a34 <HAL_ADC_ConfigChannel+0x2c4>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	2103      	movs	r1, #3
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f7ff fac1 	bl	8005fa0 <LL_ADC_GetOffsetChannel>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a24:	fa93 f3a3 	rbit	r3, r3
 8006a28:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006a2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a2c:	fab3 f383 	clz	r3, r3
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	461a      	mov	r2, r3
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d105      	bne.n	8006a4c <HAL_ADC_ConfigChannel+0x2dc>
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	0e9b      	lsrs	r3, r3, #26
 8006a46:	f003 031f 	and.w	r3, r3, #31
 8006a4a:	e00a      	b.n	8006a62 <HAL_ADC_ConfigChannel+0x2f2>
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a54:	fa93 f3a3 	rbit	r3, r3
 8006a58:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8006a5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a5c:	fab3 f383 	clz	r3, r3
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d106      	bne.n	8006a74 <HAL_ADC_ConfigChannel+0x304>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	2103      	movs	r1, #3
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f7ff faaa 	bl	8005fc8 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f7ff fbbb 	bl	80061f4 <LL_ADC_IsEnabled>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	f040 819f 	bne.w	8006dc4 <HAL_ADC_ConfigChannel+0x654>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6818      	ldr	r0, [r3, #0]
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	6819      	ldr	r1, [r3, #0]
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	461a      	mov	r2, r3
 8006a94:	f7ff fb14 	bl	80060c0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	4aab      	ldr	r2, [pc, #684]	; (8006d4c <HAL_ADC_ConfigChannel+0x5dc>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	f040 80fd 	bne.w	8006c9e <HAL_ADC_ConfigChannel+0x52e>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d10b      	bne.n	8006acc <HAL_ADC_ConfigChannel+0x35c>
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	0e9b      	lsrs	r3, r3, #26
 8006aba:	3301      	adds	r3, #1
 8006abc:	f003 031f 	and.w	r3, r3, #31
 8006ac0:	2b09      	cmp	r3, #9
 8006ac2:	bf94      	ite	ls
 8006ac4:	2301      	movls	r3, #1
 8006ac6:	2300      	movhi	r3, #0
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	e012      	b.n	8006af2 <HAL_ADC_ConfigChannel+0x382>
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ad2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ad4:	fa93 f3a3 	rbit	r3, r3
 8006ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8006ada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006adc:	fab3 f383 	clz	r3, r3
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	f003 031f 	and.w	r3, r3, #31
 8006ae8:	2b09      	cmp	r3, #9
 8006aea:	bf94      	ite	ls
 8006aec:	2301      	movls	r3, #1
 8006aee:	2300      	movhi	r3, #0
 8006af0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d064      	beq.n	8006bc0 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d107      	bne.n	8006b12 <HAL_ADC_ConfigChannel+0x3a2>
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	0e9b      	lsrs	r3, r3, #26
 8006b08:	3301      	adds	r3, #1
 8006b0a:	069b      	lsls	r3, r3, #26
 8006b0c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006b10:	e00e      	b.n	8006b30 <HAL_ADC_ConfigChannel+0x3c0>
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b1a:	fa93 f3a3 	rbit	r3, r3
 8006b1e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b22:	fab3 f383 	clz	r3, r3
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	3301      	adds	r3, #1
 8006b2a:	069b      	lsls	r3, r3, #26
 8006b2c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d109      	bne.n	8006b50 <HAL_ADC_ConfigChannel+0x3e0>
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	0e9b      	lsrs	r3, r3, #26
 8006b42:	3301      	adds	r3, #1
 8006b44:	f003 031f 	and.w	r3, r3, #31
 8006b48:	2101      	movs	r1, #1
 8006b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8006b4e:	e010      	b.n	8006b72 <HAL_ADC_ConfigChannel+0x402>
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b58:	fa93 f3a3 	rbit	r3, r3
 8006b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b60:	fab3 f383 	clz	r3, r3
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	3301      	adds	r3, #1
 8006b68:	f003 031f 	and.w	r3, r3, #31
 8006b6c:	2101      	movs	r1, #1
 8006b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8006b72:	ea42 0103 	orr.w	r1, r2, r3
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d10a      	bne.n	8006b98 <HAL_ADC_ConfigChannel+0x428>
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	0e9b      	lsrs	r3, r3, #26
 8006b88:	3301      	adds	r3, #1
 8006b8a:	f003 021f 	and.w	r2, r3, #31
 8006b8e:	4613      	mov	r3, r2
 8006b90:	005b      	lsls	r3, r3, #1
 8006b92:	4413      	add	r3, r2
 8006b94:	051b      	lsls	r3, r3, #20
 8006b96:	e011      	b.n	8006bbc <HAL_ADC_ConfigChannel+0x44c>
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba0:	fa93 f3a3 	rbit	r3, r3
 8006ba4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8006ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba8:	fab3 f383 	clz	r3, r3
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	3301      	adds	r3, #1
 8006bb0:	f003 021f 	and.w	r2, r3, #31
 8006bb4:	4613      	mov	r3, r2
 8006bb6:	005b      	lsls	r3, r3, #1
 8006bb8:	4413      	add	r3, r2
 8006bba:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006bbc:	430b      	orrs	r3, r1
 8006bbe:	e069      	b.n	8006c94 <HAL_ADC_ConfigChannel+0x524>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d107      	bne.n	8006bdc <HAL_ADC_ConfigChannel+0x46c>
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	0e9b      	lsrs	r3, r3, #26
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	069b      	lsls	r3, r3, #26
 8006bd6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006bda:	e00e      	b.n	8006bfa <HAL_ADC_ConfigChannel+0x48a>
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006be2:	6a3b      	ldr	r3, [r7, #32]
 8006be4:	fa93 f3a3 	rbit	r3, r3
 8006be8:	61fb      	str	r3, [r7, #28]
  return result;
 8006bea:	69fb      	ldr	r3, [r7, #28]
 8006bec:	fab3 f383 	clz	r3, r3
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	069b      	lsls	r3, r3, #26
 8006bf6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d109      	bne.n	8006c1a <HAL_ADC_ConfigChannel+0x4aa>
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	0e9b      	lsrs	r3, r3, #26
 8006c0c:	3301      	adds	r3, #1
 8006c0e:	f003 031f 	and.w	r3, r3, #31
 8006c12:	2101      	movs	r1, #1
 8006c14:	fa01 f303 	lsl.w	r3, r1, r3
 8006c18:	e010      	b.n	8006c3c <HAL_ADC_ConfigChannel+0x4cc>
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c20:	69bb      	ldr	r3, [r7, #24]
 8006c22:	fa93 f3a3 	rbit	r3, r3
 8006c26:	617b      	str	r3, [r7, #20]
  return result;
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	fab3 f383 	clz	r3, r3
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	3301      	adds	r3, #1
 8006c32:	f003 031f 	and.w	r3, r3, #31
 8006c36:	2101      	movs	r1, #1
 8006c38:	fa01 f303 	lsl.w	r3, r1, r3
 8006c3c:	ea42 0103 	orr.w	r1, r2, r3
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d10d      	bne.n	8006c68 <HAL_ADC_ConfigChannel+0x4f8>
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	0e9b      	lsrs	r3, r3, #26
 8006c52:	3301      	adds	r3, #1
 8006c54:	f003 021f 	and.w	r2, r3, #31
 8006c58:	4613      	mov	r3, r2
 8006c5a:	005b      	lsls	r3, r3, #1
 8006c5c:	4413      	add	r3, r2
 8006c5e:	3b1e      	subs	r3, #30
 8006c60:	051b      	lsls	r3, r3, #20
 8006c62:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006c66:	e014      	b.n	8006c92 <HAL_ADC_ConfigChannel+0x522>
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	fa93 f3a3 	rbit	r3, r3
 8006c74:	60fb      	str	r3, [r7, #12]
  return result;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	fab3 f383 	clz	r3, r3
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	3301      	adds	r3, #1
 8006c80:	f003 021f 	and.w	r2, r3, #31
 8006c84:	4613      	mov	r3, r2
 8006c86:	005b      	lsls	r3, r3, #1
 8006c88:	4413      	add	r3, r2
 8006c8a:	3b1e      	subs	r3, #30
 8006c8c:	051b      	lsls	r3, r3, #20
 8006c8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006c92:	430b      	orrs	r3, r1
 8006c94:	683a      	ldr	r2, [r7, #0]
 8006c96:	6892      	ldr	r2, [r2, #8]
 8006c98:	4619      	mov	r1, r3
 8006c9a:	f7ff f9e9 	bl	8006070 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	4b2b      	ldr	r3, [pc, #172]	; (8006d50 <HAL_ADC_ConfigChannel+0x5e0>)
 8006ca4:	4013      	ands	r3, r2
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	f000 808c 	beq.w	8006dc4 <HAL_ADC_ConfigChannel+0x654>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006cac:	4829      	ldr	r0, [pc, #164]	; (8006d54 <HAL_ADC_ConfigChannel+0x5e4>)
 8006cae:	f7ff f947 	bl	8005f40 <LL_ADC_GetCommonPathInternalCh>
 8006cb2:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006cb6:	4828      	ldr	r0, [pc, #160]	; (8006d58 <HAL_ADC_ConfigChannel+0x5e8>)
 8006cb8:	f7ff fa9c 	bl	80061f4 <LL_ADC_IsEnabled>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d16d      	bne.n	8006d9e <HAL_ADC_ConfigChannel+0x62e>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a25      	ldr	r2, [pc, #148]	; (8006d5c <HAL_ADC_ConfigChannel+0x5ec>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d126      	bne.n	8006d1a <HAL_ADC_ConfigChannel+0x5aa>
 8006ccc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006cd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d120      	bne.n	8006d1a <HAL_ADC_ConfigChannel+0x5aa>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a1e      	ldr	r2, [pc, #120]	; (8006d58 <HAL_ADC_ConfigChannel+0x5e8>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d170      	bne.n	8006dc4 <HAL_ADC_ConfigChannel+0x654>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8006ce2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006ce6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006cea:	4619      	mov	r1, r3
 8006cec:	4819      	ldr	r0, [pc, #100]	; (8006d54 <HAL_ADC_ConfigChannel+0x5e4>)
 8006cee:	f7ff f914 	bl	8005f1a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8006cf2:	4b1b      	ldr	r3, [pc, #108]	; (8006d60 <HAL_ADC_ConfigChannel+0x5f0>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	099b      	lsrs	r3, r3, #6
 8006cf8:	4a1a      	ldr	r2, [pc, #104]	; (8006d64 <HAL_ADC_ConfigChannel+0x5f4>)
 8006cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8006cfe:	099a      	lsrs	r2, r3, #6
 8006d00:	4613      	mov	r3, r2
 8006d02:	005b      	lsls	r3, r3, #1
 8006d04:	4413      	add	r3, r2
 8006d06:	009b      	lsls	r3, r3, #2
 8006d08:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8006d0a:	e002      	b.n	8006d12 <HAL_ADC_ConfigChannel+0x5a2>
              {
                wait_loop_index--;
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	3b01      	subs	r3, #1
 8006d10:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d1f9      	bne.n	8006d0c <HAL_ADC_ConfigChannel+0x59c>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006d18:	e054      	b.n	8006dc4 <HAL_ADC_ConfigChannel+0x654>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a12      	ldr	r2, [pc, #72]	; (8006d68 <HAL_ADC_ConfigChannel+0x5f8>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d123      	bne.n	8006d6c <HAL_ADC_ConfigChannel+0x5fc>
 8006d24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d11d      	bne.n	8006d6c <HAL_ADC_ConfigChannel+0x5fc>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a08      	ldr	r2, [pc, #32]	; (8006d58 <HAL_ADC_ConfigChannel+0x5e8>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d144      	bne.n	8006dc4 <HAL_ADC_ConfigChannel+0x654>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8006d3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d42:	4619      	mov	r1, r3
 8006d44:	4803      	ldr	r0, [pc, #12]	; (8006d54 <HAL_ADC_ConfigChannel+0x5e4>)
 8006d46:	f7ff f8e8 	bl	8005f1a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006d4a:	e03b      	b.n	8006dc4 <HAL_ADC_ConfigChannel+0x654>
 8006d4c:	407f0000 	.word	0x407f0000
 8006d50:	80080000 	.word	0x80080000
 8006d54:	50040300 	.word	0x50040300
 8006d58:	50040000 	.word	0x50040000
 8006d5c:	c7520000 	.word	0xc7520000
 8006d60:	20000078 	.word	0x20000078
 8006d64:	053e2d63 	.word	0x053e2d63
 8006d68:	cb840000 	.word	0xcb840000
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a19      	ldr	r2, [pc, #100]	; (8006dd8 <HAL_ADC_ConfigChannel+0x668>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d126      	bne.n	8006dc4 <HAL_ADC_ConfigChannel+0x654>
 8006d76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d120      	bne.n	8006dc4 <HAL_ADC_ConfigChannel+0x654>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a15      	ldr	r2, [pc, #84]	; (8006ddc <HAL_ADC_ConfigChannel+0x66c>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d11b      	bne.n	8006dc4 <HAL_ADC_ConfigChannel+0x654>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8006d8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d90:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006d94:	4619      	mov	r1, r3
 8006d96:	4812      	ldr	r0, [pc, #72]	; (8006de0 <HAL_ADC_ConfigChannel+0x670>)
 8006d98:	f7ff f8bf 	bl	8005f1a <LL_ADC_SetCommonPathInternalCh>
 8006d9c:	e012      	b.n	8006dc4 <HAL_ADC_ConfigChannel+0x654>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006da2:	f043 0220 	orr.w	r2, r3, #32
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8006db0:	e008      	b.n	8006dc4 <HAL_ADC_ConfigChannel+0x654>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006db6:	f043 0220 	orr.w	r2, r3, #32
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006dcc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3798      	adds	r7, #152	; 0x98
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}
 8006dd8:	80000001 	.word	0x80000001
 8006ddc:	50040000 	.word	0x50040000
 8006de0:	50040300 	.word	0x50040300

08006de4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b088      	sub	sp, #32
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8006dee:	2300      	movs	r3, #0
 8006df0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f7ff fa48 	bl	8006290 <LL_ADC_REG_IsConversionOngoing>
 8006e00:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4618      	mov	r0, r3
 8006e08:	f7ff fa69 	bl	80062de <LL_ADC_INJ_IsConversionOngoing>
 8006e0c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d103      	bne.n	8006e1c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	f000 8090 	beq.w	8006f3c <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	68db      	ldr	r3, [r3, #12]
 8006e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d02a      	beq.n	8006e80 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	7e5b      	ldrb	r3, [r3, #25]
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d126      	bne.n	8006e80 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	7e1b      	ldrb	r3, [r3, #24]
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d122      	bne.n	8006e80 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8006e3e:	e014      	b.n	8006e6a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	4a41      	ldr	r2, [pc, #260]	; (8006f48 <ADC_ConversionStop+0x164>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d90d      	bls.n	8006e64 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e4c:	f043 0210 	orr.w	r2, r3, #16
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e58:	f043 0201 	orr.w	r2, r3, #1
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8006e60:	2301      	movs	r3, #1
 8006e62:	e06c      	b.n	8006f3e <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8006e64:	69fb      	ldr	r3, [r7, #28]
 8006e66:	3301      	adds	r3, #1
 8006e68:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e74:	2b40      	cmp	r3, #64	; 0x40
 8006e76:	d1e3      	bne.n	8006e40 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	2240      	movs	r2, #64	; 0x40
 8006e7e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8006e80:	69bb      	ldr	r3, [r7, #24]
 8006e82:	2b02      	cmp	r3, #2
 8006e84:	d014      	beq.n	8006eb0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f7ff fa00 	bl	8006290 <LL_ADC_REG_IsConversionOngoing>
 8006e90:	4603      	mov	r3, r0
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d00c      	beq.n	8006eb0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f7ff f9bd 	bl	800621a <LL_ADC_IsDisableOngoing>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d104      	bne.n	8006eb0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f7ff f9dc 	bl	8006268 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8006eb0:	69bb      	ldr	r3, [r7, #24]
 8006eb2:	2b01      	cmp	r3, #1
 8006eb4:	d014      	beq.n	8006ee0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f7ff fa0f 	bl	80062de <LL_ADC_INJ_IsConversionOngoing>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d00c      	beq.n	8006ee0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f7ff f9a5 	bl	800621a <LL_ADC_IsDisableOngoing>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d104      	bne.n	8006ee0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4618      	mov	r0, r3
 8006edc:	f7ff f9eb 	bl	80062b6 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8006ee0:	69bb      	ldr	r3, [r7, #24]
 8006ee2:	2b02      	cmp	r3, #2
 8006ee4:	d004      	beq.n	8006ef0 <ADC_ConversionStop+0x10c>
 8006ee6:	2b03      	cmp	r3, #3
 8006ee8:	d105      	bne.n	8006ef6 <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8006eea:	230c      	movs	r3, #12
 8006eec:	617b      	str	r3, [r7, #20]
        break;
 8006eee:	e005      	b.n	8006efc <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8006ef0:	2308      	movs	r3, #8
 8006ef2:	617b      	str	r3, [r7, #20]
        break;
 8006ef4:	e002      	b.n	8006efc <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8006ef6:	2304      	movs	r3, #4
 8006ef8:	617b      	str	r3, [r7, #20]
        break;
 8006efa:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8006efc:	f7fe ffc8 	bl	8005e90 <HAL_GetTick>
 8006f00:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8006f02:	e014      	b.n	8006f2e <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8006f04:	f7fe ffc4 	bl	8005e90 <HAL_GetTick>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	1ad3      	subs	r3, r2, r3
 8006f0e:	2b05      	cmp	r3, #5
 8006f10:	d90d      	bls.n	8006f2e <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f16:	f043 0210 	orr.w	r2, r3, #16
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f22:	f043 0201 	orr.w	r2, r3, #1
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e007      	b.n	8006f3e <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	689a      	ldr	r2, [r3, #8]
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	4013      	ands	r3, r2
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d1e3      	bne.n	8006f04 <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8006f3c:	2300      	movs	r3, #0
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3720      	adds	r7, #32
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
 8006f46:	bf00      	nop
 8006f48:	a33fffff 	.word	0xa33fffff

08006f4c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b084      	sub	sp, #16
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f7ff f94b 	bl	80061f4 <LL_ADC_IsEnabled>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d146      	bne.n	8006ff2 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	689a      	ldr	r2, [r3, #8]
 8006f6a:	4b24      	ldr	r3, [pc, #144]	; (8006ffc <ADC_Enable+0xb0>)
 8006f6c:	4013      	ands	r3, r2
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d00d      	beq.n	8006f8e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f76:	f043 0210 	orr.w	r2, r3, #16
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f82:	f043 0201 	orr.w	r2, r3, #1
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e032      	b.n	8006ff4 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4618      	mov	r0, r3
 8006f94:	f7ff f906 	bl	80061a4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006f98:	f7fe ff7a 	bl	8005e90 <HAL_GetTick>
 8006f9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006f9e:	e021      	b.n	8006fe4 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f7ff f925 	bl	80061f4 <LL_ADC_IsEnabled>
 8006faa:	4603      	mov	r3, r0
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d104      	bne.n	8006fba <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f7ff f8f5 	bl	80061a4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006fba:	f7fe ff69 	bl	8005e90 <HAL_GetTick>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	1ad3      	subs	r3, r2, r3
 8006fc4:	2b02      	cmp	r3, #2
 8006fc6:	d90d      	bls.n	8006fe4 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fcc:	f043 0210 	orr.w	r2, r3, #16
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fd8:	f043 0201 	orr.w	r2, r3, #1
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	e007      	b.n	8006ff4 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f003 0301 	and.w	r3, r3, #1
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d1d6      	bne.n	8006fa0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006ff2:	2300      	movs	r3, #0
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3710      	adds	r7, #16
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}
 8006ffc:	8000003f 	.word	0x8000003f

08007000 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b084      	sub	sp, #16
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4618      	mov	r0, r3
 800700e:	f7ff f904 	bl	800621a <LL_ADC_IsDisableOngoing>
 8007012:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4618      	mov	r0, r3
 800701a:	f7ff f8eb 	bl	80061f4 <LL_ADC_IsEnabled>
 800701e:	4603      	mov	r3, r0
 8007020:	2b00      	cmp	r3, #0
 8007022:	d040      	beq.n	80070a6 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d13d      	bne.n	80070a6 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	f003 030d 	and.w	r3, r3, #13
 8007034:	2b01      	cmp	r3, #1
 8007036:	d10c      	bne.n	8007052 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4618      	mov	r0, r3
 800703e:	f7ff f8c5 	bl	80061cc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	2203      	movs	r2, #3
 8007048:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800704a:	f7fe ff21 	bl	8005e90 <HAL_GetTick>
 800704e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007050:	e022      	b.n	8007098 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007056:	f043 0210 	orr.w	r2, r3, #16
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007062:	f043 0201 	orr.w	r2, r3, #1
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	e01c      	b.n	80070a8 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800706e:	f7fe ff0f 	bl	8005e90 <HAL_GetTick>
 8007072:	4602      	mov	r2, r0
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	1ad3      	subs	r3, r2, r3
 8007078:	2b02      	cmp	r3, #2
 800707a:	d90d      	bls.n	8007098 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007080:	f043 0210 	orr.w	r2, r3, #16
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800708c:	f043 0201 	orr.w	r2, r3, #1
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8007094:	2301      	movs	r3, #1
 8007096:	e007      	b.n	80070a8 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	f003 0301 	and.w	r3, r3, #1
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d1e3      	bne.n	800706e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80070a6:	2300      	movs	r3, #0
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3710      	adds	r7, #16
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}

080070b0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b084      	sub	sp, #16
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070bc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070c2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d14b      	bne.n	8007162 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070ce:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f003 0308 	and.w	r3, r3, #8
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d021      	beq.n	8007128 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4618      	mov	r0, r3
 80070ea:	f7fe ff85 	bl	8005ff8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80070ee:	4603      	mov	r3, r0
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d032      	beq.n	800715a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	68db      	ldr	r3, [r3, #12]
 80070fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d12b      	bne.n	800715a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007106:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007112:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007116:	2b00      	cmp	r3, #0
 8007118:	d11f      	bne.n	800715a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800711e:	f043 0201 	orr.w	r2, r3, #1
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	655a      	str	r2, [r3, #84]	; 0x54
 8007126:	e018      	b.n	800715a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	68db      	ldr	r3, [r3, #12]
 800712e:	f003 0302 	and.w	r3, r3, #2
 8007132:	2b00      	cmp	r3, #0
 8007134:	d111      	bne.n	800715a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800713a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007146:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800714a:	2b00      	cmp	r3, #0
 800714c:	d105      	bne.n	800715a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007152:	f043 0201 	orr.w	r2, r3, #1
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800715a:	68f8      	ldr	r0, [r7, #12]
 800715c:	f7fa fab6 	bl	80016cc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007160:	e00e      	b.n	8007180 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007166:	f003 0310 	and.w	r3, r3, #16
 800716a:	2b00      	cmp	r3, #0
 800716c:	d003      	beq.n	8007176 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800716e:	68f8      	ldr	r0, [r7, #12]
 8007170:	f7ff faf3 	bl	800675a <HAL_ADC_ErrorCallback>
}
 8007174:	e004      	b.n	8007180 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800717a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	4798      	blx	r3
}
 8007180:	bf00      	nop
 8007182:	3710      	adds	r7, #16
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b084      	sub	sp, #16
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007194:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007196:	68f8      	ldr	r0, [r7, #12]
 8007198:	f7fa fab0 	bl	80016fc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800719c:	bf00      	nop
 800719e:	3710      	adds	r7, #16
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b084      	sub	sp, #16
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071b0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071c2:	f043 0204 	orr.w	r2, r3, #4
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80071ca:	68f8      	ldr	r0, [r7, #12]
 80071cc:	f7ff fac5 	bl	800675a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80071d0:	bf00      	nop
 80071d2:	3710      	adds	r7, #16
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <LL_EXTI_EnableIT_0_31>:
{
 80071d8:	b480      	push	{r7}
 80071da:	b083      	sub	sp, #12
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80071e0:	4b06      	ldr	r3, [pc, #24]	; (80071fc <LL_EXTI_EnableIT_0_31+0x24>)
 80071e2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80071e6:	4905      	ldr	r1, [pc, #20]	; (80071fc <LL_EXTI_EnableIT_0_31+0x24>)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	4313      	orrs	r3, r2
 80071ec:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80071f0:	bf00      	nop
 80071f2:	370c      	adds	r7, #12
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr
 80071fc:	58000800 	.word	0x58000800

08007200 <LL_EXTI_DisableIT_0_31>:
{
 8007200:	b480      	push	{r7}
 8007202:	b083      	sub	sp, #12
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8007208:	4b07      	ldr	r3, [pc, #28]	; (8007228 <LL_EXTI_DisableIT_0_31+0x28>)
 800720a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	43db      	mvns	r3, r3
 8007212:	4905      	ldr	r1, [pc, #20]	; (8007228 <LL_EXTI_DisableIT_0_31+0x28>)
 8007214:	4013      	ands	r3, r2
 8007216:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800721a:	bf00      	nop
 800721c:	370c      	adds	r7, #12
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr
 8007226:	bf00      	nop
 8007228:	58000800 	.word	0x58000800

0800722c <LL_EXTI_EnableEvent_0_31>:
{
 800722c:	b480      	push	{r7}
 800722e:	b083      	sub	sp, #12
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8007234:	4b06      	ldr	r3, [pc, #24]	; (8007250 <LL_EXTI_EnableEvent_0_31+0x24>)
 8007236:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800723a:	4905      	ldr	r1, [pc, #20]	; (8007250 <LL_EXTI_EnableEvent_0_31+0x24>)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	4313      	orrs	r3, r2
 8007240:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
}
 8007244:	bf00      	nop
 8007246:	370c      	adds	r7, #12
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr
 8007250:	58000800 	.word	0x58000800

08007254 <LL_EXTI_DisableEvent_0_31>:
{
 8007254:	b480      	push	{r7}
 8007256:	b083      	sub	sp, #12
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800725c:	4b07      	ldr	r3, [pc, #28]	; (800727c <LL_EXTI_DisableEvent_0_31+0x28>)
 800725e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	43db      	mvns	r3, r3
 8007266:	4905      	ldr	r1, [pc, #20]	; (800727c <LL_EXTI_DisableEvent_0_31+0x28>)
 8007268:	4013      	ands	r3, r2
 800726a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
}
 800726e:	bf00      	nop
 8007270:	370c      	adds	r7, #12
 8007272:	46bd      	mov	sp, r7
 8007274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007278:	4770      	bx	lr
 800727a:	bf00      	nop
 800727c:	58000800 	.word	0x58000800

08007280 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8007280:	b480      	push	{r7}
 8007282:	b083      	sub	sp, #12
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8007288:	4b05      	ldr	r3, [pc, #20]	; (80072a0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	4904      	ldr	r1, [pc, #16]	; (80072a0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	4313      	orrs	r3, r2
 8007292:	600b      	str	r3, [r1, #0]
}
 8007294:	bf00      	nop
 8007296:	370c      	adds	r7, #12
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr
 80072a0:	58000800 	.word	0x58000800

080072a4 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b083      	sub	sp, #12
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80072ac:	4b06      	ldr	r3, [pc, #24]	; (80072c8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	43db      	mvns	r3, r3
 80072b4:	4904      	ldr	r1, [pc, #16]	; (80072c8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80072b6:	4013      	ands	r3, r2
 80072b8:	600b      	str	r3, [r1, #0]

}
 80072ba:	bf00      	nop
 80072bc:	370c      	adds	r7, #12
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr
 80072c6:	bf00      	nop
 80072c8:	58000800 	.word	0x58000800

080072cc <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b083      	sub	sp, #12
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80072d4:	4b05      	ldr	r3, [pc, #20]	; (80072ec <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80072d6:	685a      	ldr	r2, [r3, #4]
 80072d8:	4904      	ldr	r1, [pc, #16]	; (80072ec <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	4313      	orrs	r3, r2
 80072de:	604b      	str	r3, [r1, #4]
}
 80072e0:	bf00      	nop
 80072e2:	370c      	adds	r7, #12
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr
 80072ec:	58000800 	.word	0x58000800

080072f0 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b083      	sub	sp, #12
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80072f8:	4b06      	ldr	r3, [pc, #24]	; (8007314 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80072fa:	685a      	ldr	r2, [r3, #4]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	43db      	mvns	r3, r3
 8007300:	4904      	ldr	r1, [pc, #16]	; (8007314 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8007302:	4013      	ands	r3, r2
 8007304:	604b      	str	r3, [r1, #4]
}
 8007306:	bf00      	nop
 8007308:	370c      	adds	r7, #12
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr
 8007312:	bf00      	nop
 8007314:	58000800 	.word	0x58000800

08007318 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8007318:	b480      	push	{r7}
 800731a:	b083      	sub	sp, #12
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8007320:	4b07      	ldr	r3, [pc, #28]	; (8007340 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8007322:	68da      	ldr	r2, [r3, #12]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	4013      	ands	r3, r2
 8007328:	687a      	ldr	r2, [r7, #4]
 800732a:	429a      	cmp	r2, r3
 800732c:	d101      	bne.n	8007332 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 800732e:	2301      	movs	r3, #1
 8007330:	e000      	b.n	8007334 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8007332:	2300      	movs	r3, #0
}
 8007334:	4618      	mov	r0, r3
 8007336:	370c      	adds	r7, #12
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr
 8007340:	58000800 	.word	0x58000800

08007344 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8007344:	b480      	push	{r7}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 800734c:	4a04      	ldr	r2, [pc, #16]	; (8007360 <LL_EXTI_ClearFlag_0_31+0x1c>)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	60d3      	str	r3, [r2, #12]
}
 8007352:	bf00      	nop
 8007354:	370c      	adds	r7, #12
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr
 800735e:	bf00      	nop
 8007360:	58000800 	.word	0x58000800

08007364 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b088      	sub	sp, #32
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 800736c:	2300      	movs	r3, #0
 800736e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007370:	2300      	movs	r3, #0
 8007372:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d102      	bne.n	8007380 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 800737a:	2301      	movs	r3, #1
 800737c:	77fb      	strb	r3, [r7, #31]
 800737e:	e0c4      	b.n	800750a <HAL_COMP_Init+0x1a6>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800738a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800738e:	d102      	bne.n	8007396 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8007390:	2301      	movs	r3, #1
 8007392:	77fb      	strb	r3, [r7, #31]
 8007394:	e0b9      	b.n	800750a <HAL_COMP_Init+0x1a6>
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800739c:	b2db      	uxtb	r3, r3
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d109      	bne.n	80073b6 <HAL_COMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2200      	movs	r2, #0
 80073a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	629a      	str	r2, [r3, #40]	; 0x28
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f7fa fa03 	bl	80017bc <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80073c0:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	691a      	ldr	r2, [r3, #16]
               | hcomp->Init.InputPlus
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	68db      	ldr	r3, [r3, #12]
 80073ca:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	69db      	ldr	r3, [r3, #28]
 80073d0:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	695b      	ldr	r3, [r3, #20]
 80073d6:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	699b      	ldr	r3, [r3, #24]
 80073dc:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (  hcomp->Init.InputMinus
 80073e2:	4313      	orrs	r3, r2
 80073e4:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	4b49      	ldr	r3, [pc, #292]	; (8007514 <HAL_COMP_Init+0x1b0>)
 80073ee:	4013      	ands	r3, r2
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	6812      	ldr	r2, [r2, #0]
 80073f4:	6979      	ldr	r1, [r7, #20]
 80073f6:	430b      	orrs	r3, r1
 80073f8:	6013      	str	r3, [r2, #0]

    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007402:	d106      	bne.n	8007412 <HAL_COMP_Init+0xae>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8007404:	4b44      	ldr	r3, [pc, #272]	; (8007518 <HAL_COMP_Init+0x1b4>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a43      	ldr	r2, [pc, #268]	; (8007518 <HAL_COMP_Init+0x1b4>)
 800740a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800740e:	6013      	str	r3, [r2, #0]
 8007410:	e005      	b.n	800741e <HAL_COMP_Init+0xba>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8007412:	4b41      	ldr	r3, [pc, #260]	; (8007518 <HAL_COMP_Init+0x1b4>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a40      	ldr	r2, [pc, #256]	; (8007518 <HAL_COMP_Init+0x1b4>)
 8007418:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800741c:	6013      	str	r3, [r2, #0]
    }

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007428:	2b00      	cmp	r3, #0
 800742a:	d015      	beq.n	8007458 <HAL_COMP_Init+0xf4>
 800742c:	69bb      	ldr	r3, [r7, #24]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d112      	bne.n	8007458 <HAL_COMP_Init+0xf4>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8007432:	4b3a      	ldr	r3, [pc, #232]	; (800751c <HAL_COMP_Init+0x1b8>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	099b      	lsrs	r3, r3, #6
 8007438:	4a39      	ldr	r2, [pc, #228]	; (8007520 <HAL_COMP_Init+0x1bc>)
 800743a:	fba2 2303 	umull	r2, r3, r2, r3
 800743e:	099a      	lsrs	r2, r3, #6
 8007440:	4613      	mov	r3, r2
 8007442:	009b      	lsls	r3, r3, #2
 8007444:	4413      	add	r3, r2
 8007446:	009b      	lsls	r3, r3, #2
 8007448:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800744a:	e002      	b.n	8007452 <HAL_COMP_Init+0xee>
      {
        wait_loop_index--;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	3b01      	subs	r3, #1
 8007450:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d1f9      	bne.n	800744c <HAL_COMP_Init+0xe8>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a31      	ldr	r2, [pc, #196]	; (8007524 <HAL_COMP_Init+0x1c0>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d102      	bne.n	8007468 <HAL_COMP_Init+0x104>
 8007462:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007466:	e001      	b.n	800746c <HAL_COMP_Init+0x108>
 8007468:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800746c:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6a1b      	ldr	r3, [r3, #32]
 8007472:	f003 0303 	and.w	r3, r3, #3
 8007476:	2b00      	cmp	r3, #0
 8007478:	d037      	beq.n	80074ea <HAL_COMP_Init+0x186>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6a1b      	ldr	r3, [r3, #32]
 800747e:	f003 0310 	and.w	r3, r3, #16
 8007482:	2b00      	cmp	r3, #0
 8007484:	d003      	beq.n	800748e <HAL_COMP_Init+0x12a>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8007486:	6938      	ldr	r0, [r7, #16]
 8007488:	f7ff fefa 	bl	8007280 <LL_EXTI_EnableRisingTrig_0_31>
 800748c:	e002      	b.n	8007494 <HAL_COMP_Init+0x130>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 800748e:	6938      	ldr	r0, [r7, #16]
 8007490:	f7ff ff08 	bl	80072a4 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6a1b      	ldr	r3, [r3, #32]
 8007498:	f003 0320 	and.w	r3, r3, #32
 800749c:	2b00      	cmp	r3, #0
 800749e:	d003      	beq.n	80074a8 <HAL_COMP_Init+0x144>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 80074a0:	6938      	ldr	r0, [r7, #16]
 80074a2:	f7ff ff13 	bl	80072cc <LL_EXTI_EnableFallingTrig_0_31>
 80074a6:	e002      	b.n	80074ae <HAL_COMP_Init+0x14a>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80074a8:	6938      	ldr	r0, [r7, #16]
 80074aa:	f7ff ff21 	bl	80072f0 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearFlag_0_31(exti_line);
 80074ae:	6938      	ldr	r0, [r7, #16]
 80074b0:	f7ff ff48 	bl	8007344 <LL_EXTI_ClearFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6a1b      	ldr	r3, [r3, #32]
 80074b8:	f003 0302 	and.w	r3, r3, #2
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d003      	beq.n	80074c8 <HAL_COMP_Init+0x164>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 80074c0:	6938      	ldr	r0, [r7, #16]
 80074c2:	f7ff feb3 	bl	800722c <LL_EXTI_EnableEvent_0_31>
 80074c6:	e002      	b.n	80074ce <HAL_COMP_Init+0x16a>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 80074c8:	6938      	ldr	r0, [r7, #16]
 80074ca:	f7ff fec3 	bl	8007254 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6a1b      	ldr	r3, [r3, #32]
 80074d2:	f003 0301 	and.w	r3, r3, #1
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d003      	beq.n	80074e2 <HAL_COMP_Init+0x17e>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 80074da:	6938      	ldr	r0, [r7, #16]
 80074dc:	f7ff fe7c 	bl	80071d8 <LL_EXTI_EnableIT_0_31>
 80074e0:	e009      	b.n	80074f6 <HAL_COMP_Init+0x192>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 80074e2:	6938      	ldr	r0, [r7, #16]
 80074e4:	f7ff fe8c 	bl	8007200 <LL_EXTI_DisableIT_0_31>
 80074e8:	e005      	b.n	80074f6 <HAL_COMP_Init+0x192>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 80074ea:	6938      	ldr	r0, [r7, #16]
 80074ec:	f7ff feb2 	bl	8007254 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 80074f0:	6938      	ldr	r0, [r7, #16]
 80074f2:	f7ff fe85 	bl	8007200 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80074fc:	b2db      	uxtb	r3, r3
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d103      	bne.n	800750a <HAL_COMP_Init+0x1a6>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2201      	movs	r2, #1
 8007506:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 800750a:	7ffb      	ldrb	r3, [r7, #31]
}
 800750c:	4618      	mov	r0, r3
 800750e:	3720      	adds	r7, #32
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}
 8007514:	f9207c03 	.word	0xf9207c03
 8007518:	40010204 	.word	0x40010204
 800751c:	20000078 	.word	0x20000078
 8007520:	053e2d63 	.word	0x053e2d63
 8007524:	40010200 	.word	0x40010200

08007528 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8007528:	b480      	push	{r7}
 800752a:	b085      	sub	sp, #20
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8007530:	2300      	movs	r3, #0
 8007532:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007534:	2300      	movs	r3, #0
 8007536:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d102      	bne.n	8007544 <HAL_COMP_Start+0x1c>
  {
    status = HAL_ERROR;
 800753e:	2301      	movs	r3, #1
 8007540:	73fb      	strb	r3, [r7, #15]
 8007542:	e02f      	b.n	80075a4 <HAL_COMP_Start+0x7c>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800754e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007552:	d102      	bne.n	800755a <HAL_COMP_Start+0x32>
  {
    status = HAL_ERROR;
 8007554:	2301      	movs	r3, #1
 8007556:	73fb      	strb	r3, [r7, #15]
 8007558:	e024      	b.n	80075a4 <HAL_COMP_Start+0x7c>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007560:	b2db      	uxtb	r3, r3
 8007562:	2b01      	cmp	r3, #1
 8007564:	d11c      	bne.n	80075a0 <HAL_COMP_Start+0x78>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f042 0201 	orr.w	r2, r2, #1
 8007574:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2202      	movs	r2, #2
 800757a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800757e:	4b0d      	ldr	r3, [pc, #52]	; (80075b4 <HAL_COMP_Start+0x8c>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	099b      	lsrs	r3, r3, #6
 8007584:	4a0c      	ldr	r2, [pc, #48]	; (80075b8 <HAL_COMP_Start+0x90>)
 8007586:	fba2 2303 	umull	r2, r3, r2, r3
 800758a:	099b      	lsrs	r3, r3, #6
 800758c:	00db      	lsls	r3, r3, #3
 800758e:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8007590:	e002      	b.n	8007598 <HAL_COMP_Start+0x70>
      {
        wait_loop_index--;
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	3b01      	subs	r3, #1
 8007596:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d1f9      	bne.n	8007592 <HAL_COMP_Start+0x6a>
 800759e:	e001      	b.n	80075a4 <HAL_COMP_Start+0x7c>
      }
    }
    else
    {
      status = HAL_ERROR;
 80075a0:	2301      	movs	r3, #1
 80075a2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80075a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3714      	adds	r7, #20
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr
 80075b2:	bf00      	nop
 80075b4:	20000078 	.word	0x20000078
 80075b8:	053e2d63 	.word	0x053e2d63

080075bc <HAL_COMP_Stop>:
  * @brief  Stop the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Stop(COMP_HandleTypeDef *hcomp)
{
 80075bc:	b480      	push	{r7}
 80075be:	b085      	sub	sp, #20
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075c4:	2300      	movs	r3, #0
 80075c6:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d102      	bne.n	80075d4 <HAL_COMP_Stop+0x18>
  {
    status = HAL_ERROR;
 80075ce:	2301      	movs	r3, #1
 80075d0:	73fb      	strb	r3, [r7, #15]
 80075d2:	e01f      	b.n	8007614 <HAL_COMP_Stop+0x58>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80075de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80075e2:	d102      	bne.n	80075ea <HAL_COMP_Stop+0x2e>
  {
    status = HAL_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	73fb      	strb	r3, [r7, #15]
 80075e8:	e014      	b.n	8007614 <HAL_COMP_Stop+0x58>
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    /* Check compliant states: HAL_COMP_STATE_READY or HAL_COMP_STATE_BUSY    */
    /* (all states except HAL_COMP_STATE_RESET and except locked status.      */
    if(hcomp->State != HAL_COMP_STATE_RESET)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80075f0:	b2db      	uxtb	r3, r3
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d00c      	beq.n	8007610 <HAL_COMP_Stop+0x54>
    {
      /* Disable the selected comparator */
      CLEAR_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f022 0201 	bic.w	r2, r2, #1
 8007604:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_READY;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2201      	movs	r2, #1
 800760a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 800760e:	e001      	b.n	8007614 <HAL_COMP_Stop+0x58>
    }
    else
    {
      status = HAL_ERROR;
 8007610:	2301      	movs	r3, #1
 8007612:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007614:	7bfb      	ldrb	r3, [r7, #15]
}
 8007616:	4618      	mov	r0, r3
 8007618:	3714      	adds	r7, #20
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr
	...

08007624 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ handler.
  * @param  hcomp  COMP handle
  * @retval None
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b084      	sub	sp, #16
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a11      	ldr	r2, [pc, #68]	; (8007678 <HAL_COMP_IRQHandler+0x54>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d102      	bne.n	800763c <HAL_COMP_IRQHandler+0x18>
 8007636:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800763a:	e001      	b.n	8007640 <HAL_COMP_IRQHandler+0x1c>
 800763c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007640:	60fb      	str	r3, [r7, #12]

  /* Check COMP EXTI flag */
  if(LL_EXTI_IsActiveFlag_0_31(exti_line) != 0UL)
 8007642:	68f8      	ldr	r0, [r7, #12]
 8007644:	f7ff fe68 	bl	8007318 <LL_EXTI_IsActiveFlag_0_31>
 8007648:	4603      	mov	r3, r0
 800764a:	2b00      	cmp	r3, #0
 800764c:	d010      	beq.n	8007670 <HAL_COMP_IRQHandler+0x4c>
  {
    /* Check whether comparator is in independent or window mode */
    if(READ_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE) != 0UL)
 800764e:	4b0b      	ldr	r3, [pc, #44]	; (800767c <HAL_COMP_IRQHandler+0x58>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007656:	2b00      	cmp	r3, #0
 8007658:	d004      	beq.n	8007664 <HAL_COMP_IRQHandler+0x40>
      /* Note: Pair of comparators in window mode can both trig IRQ when      */
      /*       input voltage is changing from "out of window" area            */
      /*       (low or high ) to the other "out of window" area (high or low).*/
      /*       Both flags must be cleared to call comparator trigger          */
      /*       callback is called once.                                       */
      LL_EXTI_ClearFlag_0_31((COMP_EXTI_LINE_COMP1 | COMP_EXTI_LINE_COMP2));
 800765a:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 800765e:	f7ff fe71 	bl	8007344 <LL_EXTI_ClearFlag_0_31>
 8007662:	e002      	b.n	800766a <HAL_COMP_IRQHandler+0x46>
    }
    else
    {
      /* Clear COMP EXTI line pending bit */
      LL_EXTI_ClearFlag_0_31(exti_line);
 8007664:	68f8      	ldr	r0, [r7, #12]
 8007666:	f7ff fe6d 	bl	8007344 <LL_EXTI_ClearFlag_0_31>

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f7fd ff3a 	bl	80054e4 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 8007670:	bf00      	nop
 8007672:	3710      	adds	r7, #16
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}
 8007678:	40010200 	.word	0x40010200
 800767c:	40010204 	.word	0x40010204

08007680 <HAL_COMP_GetOutputLevel>:
  *         @arg COMP_OUTPUT_LEVEL_LOW
  *         @arg COMP_OUTPUT_LEVEL_HIGH
  *
  */
uint32_t HAL_COMP_GetOutputLevel(COMP_HandleTypeDef *hcomp)
{
 8007680:	b480      	push	{r7}
 8007682:	b083      	sub	sp, #12
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

  return (uint32_t)(READ_BIT(hcomp->Instance->CSR, COMP_CSR_VALUE)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	0f9b      	lsrs	r3, r3, #30
 8007690:	f003 0301 	and.w	r3, r3, #1
                    >> COMP_OUTPUT_LEVEL_BITOFFSET_POS);
}
 8007694:	4618      	mov	r0, r3
 8007696:	370c      	adds	r7, #12
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr

080076a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b085      	sub	sp, #20
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f003 0307 	and.w	r3, r3, #7
 80076ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80076b0:	4b0c      	ldr	r3, [pc, #48]	; (80076e4 <__NVIC_SetPriorityGrouping+0x44>)
 80076b2:	68db      	ldr	r3, [r3, #12]
 80076b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80076b6:	68ba      	ldr	r2, [r7, #8]
 80076b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80076bc:	4013      	ands	r3, r2
 80076be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80076c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80076cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80076d2:	4a04      	ldr	r2, [pc, #16]	; (80076e4 <__NVIC_SetPriorityGrouping+0x44>)
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	60d3      	str	r3, [r2, #12]
}
 80076d8:	bf00      	nop
 80076da:	3714      	adds	r7, #20
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr
 80076e4:	e000ed00 	.word	0xe000ed00

080076e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80076e8:	b480      	push	{r7}
 80076ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80076ec:	4b04      	ldr	r3, [pc, #16]	; (8007700 <__NVIC_GetPriorityGrouping+0x18>)
 80076ee:	68db      	ldr	r3, [r3, #12]
 80076f0:	0a1b      	lsrs	r3, r3, #8
 80076f2:	f003 0307 	and.w	r3, r3, #7
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr
 8007700:	e000ed00 	.word	0xe000ed00

08007704 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007704:	b480      	push	{r7}
 8007706:	b083      	sub	sp, #12
 8007708:	af00      	add	r7, sp, #0
 800770a:	4603      	mov	r3, r0
 800770c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800770e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007712:	2b00      	cmp	r3, #0
 8007714:	db0b      	blt.n	800772e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007716:	79fb      	ldrb	r3, [r7, #7]
 8007718:	f003 021f 	and.w	r2, r3, #31
 800771c:	4907      	ldr	r1, [pc, #28]	; (800773c <__NVIC_EnableIRQ+0x38>)
 800771e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007722:	095b      	lsrs	r3, r3, #5
 8007724:	2001      	movs	r0, #1
 8007726:	fa00 f202 	lsl.w	r2, r0, r2
 800772a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800772e:	bf00      	nop
 8007730:	370c      	adds	r7, #12
 8007732:	46bd      	mov	sp, r7
 8007734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007738:	4770      	bx	lr
 800773a:	bf00      	nop
 800773c:	e000e100 	.word	0xe000e100

08007740 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007740:	b480      	push	{r7}
 8007742:	b083      	sub	sp, #12
 8007744:	af00      	add	r7, sp, #0
 8007746:	4603      	mov	r3, r0
 8007748:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800774a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800774e:	2b00      	cmp	r3, #0
 8007750:	db10      	blt.n	8007774 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007752:	79fb      	ldrb	r3, [r7, #7]
 8007754:	f003 021f 	and.w	r2, r3, #31
 8007758:	4909      	ldr	r1, [pc, #36]	; (8007780 <__NVIC_DisableIRQ+0x40>)
 800775a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800775e:	095b      	lsrs	r3, r3, #5
 8007760:	2001      	movs	r0, #1
 8007762:	fa00 f202 	lsl.w	r2, r0, r2
 8007766:	3320      	adds	r3, #32
 8007768:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800776c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007770:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8007774:	bf00      	nop
 8007776:	370c      	adds	r7, #12
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr
 8007780:	e000e100 	.word	0xe000e100

08007784 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8007784:	b480      	push	{r7}
 8007786:	b083      	sub	sp, #12
 8007788:	af00      	add	r7, sp, #0
 800778a:	4603      	mov	r3, r0
 800778c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800778e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007792:	2b00      	cmp	r3, #0
 8007794:	db0c      	blt.n	80077b0 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007796:	79fb      	ldrb	r3, [r7, #7]
 8007798:	f003 021f 	and.w	r2, r3, #31
 800779c:	4907      	ldr	r1, [pc, #28]	; (80077bc <__NVIC_SetPendingIRQ+0x38>)
 800779e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077a2:	095b      	lsrs	r3, r3, #5
 80077a4:	2001      	movs	r0, #1
 80077a6:	fa00 f202 	lsl.w	r2, r0, r2
 80077aa:	3340      	adds	r3, #64	; 0x40
 80077ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80077b0:	bf00      	nop
 80077b2:	370c      	adds	r7, #12
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr
 80077bc:	e000e100 	.word	0xe000e100

080077c0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b083      	sub	sp, #12
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	4603      	mov	r3, r0
 80077c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80077ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	db0c      	blt.n	80077ec <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80077d2:	79fb      	ldrb	r3, [r7, #7]
 80077d4:	f003 021f 	and.w	r2, r3, #31
 80077d8:	4907      	ldr	r1, [pc, #28]	; (80077f8 <__NVIC_ClearPendingIRQ+0x38>)
 80077da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077de:	095b      	lsrs	r3, r3, #5
 80077e0:	2001      	movs	r0, #1
 80077e2:	fa00 f202 	lsl.w	r2, r0, r2
 80077e6:	3360      	adds	r3, #96	; 0x60
 80077e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80077ec:	bf00      	nop
 80077ee:	370c      	adds	r7, #12
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr
 80077f8:	e000e100 	.word	0xe000e100

080077fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b083      	sub	sp, #12
 8007800:	af00      	add	r7, sp, #0
 8007802:	4603      	mov	r3, r0
 8007804:	6039      	str	r1, [r7, #0]
 8007806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800780c:	2b00      	cmp	r3, #0
 800780e:	db0a      	blt.n	8007826 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	b2da      	uxtb	r2, r3
 8007814:	490c      	ldr	r1, [pc, #48]	; (8007848 <__NVIC_SetPriority+0x4c>)
 8007816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800781a:	0112      	lsls	r2, r2, #4
 800781c:	b2d2      	uxtb	r2, r2
 800781e:	440b      	add	r3, r1
 8007820:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007824:	e00a      	b.n	800783c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	b2da      	uxtb	r2, r3
 800782a:	4908      	ldr	r1, [pc, #32]	; (800784c <__NVIC_SetPriority+0x50>)
 800782c:	79fb      	ldrb	r3, [r7, #7]
 800782e:	f003 030f 	and.w	r3, r3, #15
 8007832:	3b04      	subs	r3, #4
 8007834:	0112      	lsls	r2, r2, #4
 8007836:	b2d2      	uxtb	r2, r2
 8007838:	440b      	add	r3, r1
 800783a:	761a      	strb	r2, [r3, #24]
}
 800783c:	bf00      	nop
 800783e:	370c      	adds	r7, #12
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	4770      	bx	lr
 8007848:	e000e100 	.word	0xe000e100
 800784c:	e000ed00 	.word	0xe000ed00

08007850 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007850:	b480      	push	{r7}
 8007852:	b089      	sub	sp, #36	; 0x24
 8007854:	af00      	add	r7, sp, #0
 8007856:	60f8      	str	r0, [r7, #12]
 8007858:	60b9      	str	r1, [r7, #8]
 800785a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f003 0307 	and.w	r3, r3, #7
 8007862:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007864:	69fb      	ldr	r3, [r7, #28]
 8007866:	f1c3 0307 	rsb	r3, r3, #7
 800786a:	2b04      	cmp	r3, #4
 800786c:	bf28      	it	cs
 800786e:	2304      	movcs	r3, #4
 8007870:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007872:	69fb      	ldr	r3, [r7, #28]
 8007874:	3304      	adds	r3, #4
 8007876:	2b06      	cmp	r3, #6
 8007878:	d902      	bls.n	8007880 <NVIC_EncodePriority+0x30>
 800787a:	69fb      	ldr	r3, [r7, #28]
 800787c:	3b03      	subs	r3, #3
 800787e:	e000      	b.n	8007882 <NVIC_EncodePriority+0x32>
 8007880:	2300      	movs	r3, #0
 8007882:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007884:	f04f 32ff 	mov.w	r2, #4294967295
 8007888:	69bb      	ldr	r3, [r7, #24]
 800788a:	fa02 f303 	lsl.w	r3, r2, r3
 800788e:	43da      	mvns	r2, r3
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	401a      	ands	r2, r3
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007898:	f04f 31ff 	mov.w	r1, #4294967295
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	fa01 f303 	lsl.w	r3, r1, r3
 80078a2:	43d9      	mvns	r1, r3
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80078a8:	4313      	orrs	r3, r2
         );
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3724      	adds	r7, #36	; 0x24
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr
	...

080078b8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80078b8:	b480      	push	{r7}
 80078ba:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80078bc:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80078c0:	4b05      	ldr	r3, [pc, #20]	; (80078d8 <__NVIC_SystemReset+0x20>)
 80078c2:	68db      	ldr	r3, [r3, #12]
 80078c4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80078c8:	4903      	ldr	r1, [pc, #12]	; (80078d8 <__NVIC_SystemReset+0x20>)
 80078ca:	4b04      	ldr	r3, [pc, #16]	; (80078dc <__NVIC_SystemReset+0x24>)
 80078cc:	4313      	orrs	r3, r2
 80078ce:	60cb      	str	r3, [r1, #12]
 80078d0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80078d4:	bf00      	nop
 80078d6:	e7fd      	b.n	80078d4 <__NVIC_SystemReset+0x1c>
 80078d8:	e000ed00 	.word	0xe000ed00
 80078dc:	05fa0004 	.word	0x05fa0004

080078e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b082      	sub	sp, #8
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f7ff fed9 	bl	80076a0 <__NVIC_SetPriorityGrouping>
}
 80078ee:	bf00      	nop
 80078f0:	3708      	adds	r7, #8
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}

080078f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80078f6:	b580      	push	{r7, lr}
 80078f8:	b086      	sub	sp, #24
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	4603      	mov	r3, r0
 80078fe:	60b9      	str	r1, [r7, #8]
 8007900:	607a      	str	r2, [r7, #4]
 8007902:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007904:	f7ff fef0 	bl	80076e8 <__NVIC_GetPriorityGrouping>
 8007908:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800790a:	687a      	ldr	r2, [r7, #4]
 800790c:	68b9      	ldr	r1, [r7, #8]
 800790e:	6978      	ldr	r0, [r7, #20]
 8007910:	f7ff ff9e 	bl	8007850 <NVIC_EncodePriority>
 8007914:	4602      	mov	r2, r0
 8007916:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800791a:	4611      	mov	r1, r2
 800791c:	4618      	mov	r0, r3
 800791e:	f7ff ff6d 	bl	80077fc <__NVIC_SetPriority>
}
 8007922:	bf00      	nop
 8007924:	3718      	adds	r7, #24
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}

0800792a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800792a:	b580      	push	{r7, lr}
 800792c:	b082      	sub	sp, #8
 800792e:	af00      	add	r7, sp, #0
 8007930:	4603      	mov	r3, r0
 8007932:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007938:	4618      	mov	r0, r3
 800793a:	f7ff fee3 	bl	8007704 <__NVIC_EnableIRQ>
}
 800793e:	bf00      	nop
 8007940:	3708      	adds	r7, #8
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}

08007946 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007946:	b580      	push	{r7, lr}
 8007948:	b082      	sub	sp, #8
 800794a:	af00      	add	r7, sp, #0
 800794c:	4603      	mov	r3, r0
 800794e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007954:	4618      	mov	r0, r3
 8007956:	f7ff fef3 	bl	8007740 <__NVIC_DisableIRQ>
}
 800795a:	bf00      	nop
 800795c:	3708      	adds	r7, #8
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}

08007962 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8007962:	b580      	push	{r7, lr}
 8007964:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8007966:	f7ff ffa7 	bl	80078b8 <__NVIC_SystemReset>

0800796a <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800796a:	b580      	push	{r7, lr}
 800796c:	b082      	sub	sp, #8
 800796e:	af00      	add	r7, sp, #0
 8007970:	4603      	mov	r3, r0
 8007972:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8007974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007978:	4618      	mov	r0, r3
 800797a:	f7ff ff03 	bl	8007784 <__NVIC_SetPendingIRQ>
}
 800797e:	bf00      	nop
 8007980:	3708      	adds	r7, #8
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}

08007986 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8007986:	b580      	push	{r7, lr}
 8007988:	b082      	sub	sp, #8
 800798a:	af00      	add	r7, sp, #0
 800798c:	4603      	mov	r3, r0
 800798e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8007990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007994:	4618      	mov	r0, r3
 8007996:	f7ff ff13 	bl	80077c0 <__NVIC_ClearPendingIRQ>
}
 800799a:	bf00      	nop
 800799c:	3708      	adds	r7, #8
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}
	...

080079a4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b084      	sub	sp, #16
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d101      	bne.n	80079b6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80079b2:	2301      	movs	r3, #1
 80079b4:	e08d      	b.n	8007ad2 <HAL_DMA_Init+0x12e>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	461a      	mov	r2, r3
 80079bc:	4b47      	ldr	r3, [pc, #284]	; (8007adc <HAL_DMA_Init+0x138>)
 80079be:	429a      	cmp	r2, r3
 80079c0:	d80f      	bhi.n	80079e2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	461a      	mov	r2, r3
 80079c8:	4b45      	ldr	r3, [pc, #276]	; (8007ae0 <HAL_DMA_Init+0x13c>)
 80079ca:	4413      	add	r3, r2
 80079cc:	4a45      	ldr	r2, [pc, #276]	; (8007ae4 <HAL_DMA_Init+0x140>)
 80079ce:	fba2 2303 	umull	r2, r3, r2, r3
 80079d2:	091b      	lsrs	r3, r3, #4
 80079d4:	009a      	lsls	r2, r3, #2
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	4a42      	ldr	r2, [pc, #264]	; (8007ae8 <HAL_DMA_Init+0x144>)
 80079de:	641a      	str	r2, [r3, #64]	; 0x40
 80079e0:	e00e      	b.n	8007a00 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	461a      	mov	r2, r3
 80079e8:	4b40      	ldr	r3, [pc, #256]	; (8007aec <HAL_DMA_Init+0x148>)
 80079ea:	4413      	add	r3, r2
 80079ec:	4a3d      	ldr	r2, [pc, #244]	; (8007ae4 <HAL_DMA_Init+0x140>)
 80079ee:	fba2 2303 	umull	r2, r3, r2, r3
 80079f2:	091b      	lsrs	r3, r3, #4
 80079f4:	009a      	lsls	r2, r3, #2
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	4a3c      	ldr	r2, [pc, #240]	; (8007af0 <HAL_DMA_Init+0x14c>)
 80079fe:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2202      	movs	r2, #2
 8007a04:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a1a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007a24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	691b      	ldr	r3, [r3, #16]
 8007a2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007a30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	699b      	ldr	r3, [r3, #24]
 8007a36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007a3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6a1b      	ldr	r3, [r3, #32]
 8007a42:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007a44:	68fa      	ldr	r2, [r7, #12]
 8007a46:	4313      	orrs	r3, r2
 8007a48:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	68fa      	ldr	r2, [r7, #12]
 8007a50:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 fa74 	bl	8007f40 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	689b      	ldr	r3, [r3, #8]
 8007a5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a60:	d102      	bne.n	8007a68 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2200      	movs	r2, #0
 8007a66:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	685a      	ldr	r2, [r3, #4]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a70:	b2d2      	uxtb	r2, r2
 8007a72:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a78:	687a      	ldr	r2, [r7, #4]
 8007a7a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007a7c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d010      	beq.n	8007aa8 <HAL_DMA_Init+0x104>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	2b04      	cmp	r3, #4
 8007a8c:	d80c      	bhi.n	8007aa8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 fa94 	bl	8007fbc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a98:	2200      	movs	r2, #0
 8007a9a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007aa4:	605a      	str	r2, [r3, #4]
 8007aa6:	e008      	b.n	8007aba <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2200      	movs	r2, #0
 8007abe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2200      	movs	r2, #0
 8007acc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007ad0:	2300      	movs	r3, #0
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3710      	adds	r7, #16
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}
 8007ada:	bf00      	nop
 8007adc:	40020407 	.word	0x40020407
 8007ae0:	bffdfff8 	.word	0xbffdfff8
 8007ae4:	cccccccd 	.word	0xcccccccd
 8007ae8:	40020000 	.word	0x40020000
 8007aec:	bffdfbf8 	.word	0xbffdfbf8
 8007af0:	40020400 	.word	0x40020400

08007af4 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b086      	sub	sp, #24
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	60f8      	str	r0, [r7, #12]
 8007afc:	60b9      	str	r1, [r7, #8]
 8007afe:	607a      	str	r2, [r7, #4]
 8007b00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b02:	2300      	movs	r3, #0
 8007b04:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d101      	bne.n	8007b14 <HAL_DMA_Start_IT+0x20>
 8007b10:	2302      	movs	r3, #2
 8007b12:	e066      	b.n	8007be2 <HAL_DMA_Start_IT+0xee>
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2201      	movs	r2, #1
 8007b18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007b22:	b2db      	uxtb	r3, r3
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	d155      	bne.n	8007bd4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2202      	movs	r2, #2
 8007b2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2200      	movs	r2, #0
 8007b34:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f022 0201 	bic.w	r2, r2, #1
 8007b44:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	68b9      	ldr	r1, [r7, #8]
 8007b4c:	68f8      	ldr	r0, [r7, #12]
 8007b4e:	f000 f9b9 	bl	8007ec4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d008      	beq.n	8007b6c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	681a      	ldr	r2, [r3, #0]
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f042 020e 	orr.w	r2, r2, #14
 8007b68:	601a      	str	r2, [r3, #0]
 8007b6a:	e00f      	b.n	8007b8c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	681a      	ldr	r2, [r3, #0]
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f022 0204 	bic.w	r2, r2, #4
 8007b7a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	681a      	ldr	r2, [r3, #0]
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f042 020a 	orr.w	r2, r2, #10
 8007b8a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d007      	beq.n	8007baa <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b9e:	681a      	ldr	r2, [r3, #0]
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ba4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ba8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d007      	beq.n	8007bc2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007bc0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	681a      	ldr	r2, [r3, #0]
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f042 0201 	orr.w	r2, r2, #1
 8007bd0:	601a      	str	r2, [r3, #0]
 8007bd2:	e005      	b.n	8007be0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007bdc:	2302      	movs	r3, #2
 8007bde:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007be0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3718      	adds	r7, #24
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}

08007bea <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007bea:	b480      	push	{r7}
 8007bec:	b083      	sub	sp, #12
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d101      	bne.n	8007bfc <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	e04f      	b.n	8007c9c <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007c02:	b2db      	uxtb	r3, r3
 8007c04:	2b02      	cmp	r3, #2
 8007c06:	d008      	beq.n	8007c1a <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2204      	movs	r2, #4
 8007c0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2200      	movs	r2, #0
 8007c12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007c16:	2301      	movs	r3, #1
 8007c18:	e040      	b.n	8007c9c <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	681a      	ldr	r2, [r3, #0]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f022 020e 	bic.w	r2, r2, #14
 8007c28:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c2e:	681a      	ldr	r2, [r3, #0]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c38:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	681a      	ldr	r2, [r3, #0]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f022 0201 	bic.w	r2, r2, #1
 8007c48:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c4e:	f003 021c 	and.w	r2, r3, #28
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c56:	2101      	movs	r1, #1
 8007c58:	fa01 f202 	lsl.w	r2, r1, r2
 8007c5c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007c66:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d00c      	beq.n	8007c8a <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c7e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c84:	687a      	ldr	r2, [r7, #4]
 8007c86:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007c88:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8007c9a:	2300      	movs	r3, #0
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	370c      	adds	r7, #12
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr

08007ca8 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b084      	sub	sp, #16
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007cba:	b2db      	uxtb	r3, r3
 8007cbc:	2b02      	cmp	r3, #2
 8007cbe:	d005      	beq.n	8007ccc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2204      	movs	r2, #4
 8007cc4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	73fb      	strb	r3, [r7, #15]
 8007cca:	e047      	b.n	8007d5c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	681a      	ldr	r2, [r3, #0]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f022 020e 	bic.w	r2, r2, #14
 8007cda:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f022 0201 	bic.w	r2, r2, #1
 8007cea:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cf0:	681a      	ldr	r2, [r3, #0]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cf6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007cfa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d00:	f003 021c 	and.w	r2, r3, #28
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d08:	2101      	movs	r1, #1
 8007d0a:	fa01 f202 	lsl.w	r2, r1, r2
 8007d0e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d14:	687a      	ldr	r2, [r7, #4]
 8007d16:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007d18:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d00c      	beq.n	8007d3c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d26:	681a      	ldr	r2, [r3, #0]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007d30:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d36:	687a      	ldr	r2, [r7, #4]
 8007d38:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007d3a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2201      	movs	r2, #1
 8007d40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d003      	beq.n	8007d5c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	4798      	blx	r3
    }
  }
  return status;
 8007d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3710      	adds	r7, #16
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}

08007d66 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007d66:	b580      	push	{r7, lr}
 8007d68:	b084      	sub	sp, #16
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d82:	f003 031c 	and.w	r3, r3, #28
 8007d86:	2204      	movs	r2, #4
 8007d88:	409a      	lsls	r2, r3
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	4013      	ands	r3, r2
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d026      	beq.n	8007de0 <HAL_DMA_IRQHandler+0x7a>
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	f003 0304 	and.w	r3, r3, #4
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d021      	beq.n	8007de0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f003 0320 	and.w	r3, r3, #32
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d107      	bne.n	8007dba <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	681a      	ldr	r2, [r3, #0]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f022 0204 	bic.w	r2, r2, #4
 8007db8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dbe:	f003 021c 	and.w	r2, r3, #28
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc6:	2104      	movs	r1, #4
 8007dc8:	fa01 f202 	lsl.w	r2, r1, r2
 8007dcc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d071      	beq.n	8007eba <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8007dde:	e06c      	b.n	8007eba <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007de4:	f003 031c 	and.w	r3, r3, #28
 8007de8:	2202      	movs	r2, #2
 8007dea:	409a      	lsls	r2, r3
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	4013      	ands	r3, r2
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d02e      	beq.n	8007e52 <HAL_DMA_IRQHandler+0xec>
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	f003 0302 	and.w	r3, r3, #2
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d029      	beq.n	8007e52 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f003 0320 	and.w	r3, r3, #32
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d10b      	bne.n	8007e24 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	681a      	ldr	r2, [r3, #0]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f022 020a 	bic.w	r2, r2, #10
 8007e1a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e28:	f003 021c 	and.w	r2, r3, #28
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e30:	2102      	movs	r1, #2
 8007e32:	fa01 f202 	lsl.w	r2, r1, r2
 8007e36:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d038      	beq.n	8007eba <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007e50:	e033      	b.n	8007eba <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e56:	f003 031c 	and.w	r3, r3, #28
 8007e5a:	2208      	movs	r2, #8
 8007e5c:	409a      	lsls	r2, r3
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	4013      	ands	r3, r2
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d02a      	beq.n	8007ebc <HAL_DMA_IRQHandler+0x156>
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	f003 0308 	and.w	r3, r3, #8
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d025      	beq.n	8007ebc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	681a      	ldr	r2, [r3, #0]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f022 020e 	bic.w	r2, r2, #14
 8007e7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e84:	f003 021c 	and.w	r2, r3, #28
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e8c:	2101      	movs	r1, #1
 8007e8e:	fa01 f202 	lsl.w	r2, r1, r2
 8007e92:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2201      	movs	r2, #1
 8007e98:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d004      	beq.n	8007ebc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007eba:	bf00      	nop
 8007ebc:	bf00      	nop
}
 8007ebe:	3710      	adds	r7, #16
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b085      	sub	sp, #20
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	60b9      	str	r1, [r7, #8]
 8007ece:	607a      	str	r2, [r7, #4]
 8007ed0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ed6:	68fa      	ldr	r2, [r7, #12]
 8007ed8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007eda:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d004      	beq.n	8007eee <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ee8:	68fa      	ldr	r2, [r7, #12]
 8007eea:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007eec:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ef2:	f003 021c 	and.w	r2, r3, #28
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007efa:	2101      	movs	r1, #1
 8007efc:	fa01 f202 	lsl.w	r2, r1, r2
 8007f00:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	683a      	ldr	r2, [r7, #0]
 8007f08:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	689b      	ldr	r3, [r3, #8]
 8007f0e:	2b10      	cmp	r3, #16
 8007f10:	d108      	bne.n	8007f24 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	687a      	ldr	r2, [r7, #4]
 8007f18:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	68ba      	ldr	r2, [r7, #8]
 8007f20:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007f22:	e007      	b.n	8007f34 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	68ba      	ldr	r2, [r7, #8]
 8007f2a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	687a      	ldr	r2, [r7, #4]
 8007f32:	60da      	str	r2, [r3, #12]
}
 8007f34:	bf00      	nop
 8007f36:	3714      	adds	r7, #20
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr

08007f40 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b085      	sub	sp, #20
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	4b17      	ldr	r3, [pc, #92]	; (8007fac <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8007f50:	429a      	cmp	r2, r3
 8007f52:	d80a      	bhi.n	8007f6a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f58:	089b      	lsrs	r3, r3, #2
 8007f5a:	009b      	lsls	r3, r3, #2
 8007f5c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007f60:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8007f64:	687a      	ldr	r2, [r7, #4]
 8007f66:	6493      	str	r3, [r2, #72]	; 0x48
 8007f68:	e007      	b.n	8007f7a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f6e:	089b      	lsrs	r3, r3, #2
 8007f70:	009a      	lsls	r2, r3, #2
 8007f72:	4b0f      	ldr	r3, [pc, #60]	; (8007fb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8007f74:	4413      	add	r3, r2
 8007f76:	687a      	ldr	r2, [r7, #4]
 8007f78:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	b2db      	uxtb	r3, r3
 8007f80:	3b08      	subs	r3, #8
 8007f82:	4a0c      	ldr	r2, [pc, #48]	; (8007fb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8007f84:	fba2 2303 	umull	r2, r3, r2, r3
 8007f88:	091b      	lsrs	r3, r3, #4
 8007f8a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	4a0a      	ldr	r2, [pc, #40]	; (8007fb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8007f90:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	f003 031c 	and.w	r3, r3, #28
 8007f98:	2201      	movs	r2, #1
 8007f9a:	409a      	lsls	r2, r3
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007fa0:	bf00      	nop
 8007fa2:	3714      	adds	r7, #20
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr
 8007fac:	40020407 	.word	0x40020407
 8007fb0:	4002081c 	.word	0x4002081c
 8007fb4:	cccccccd 	.word	0xcccccccd
 8007fb8:	40020880 	.word	0x40020880

08007fbc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b085      	sub	sp, #20
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	b2db      	uxtb	r3, r3
 8007fca:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007fcc:	68fa      	ldr	r2, [r7, #12]
 8007fce:	4b0b      	ldr	r3, [pc, #44]	; (8007ffc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8007fd0:	4413      	add	r3, r2
 8007fd2:	009b      	lsls	r3, r3, #2
 8007fd4:	461a      	mov	r2, r3
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	4a08      	ldr	r2, [pc, #32]	; (8008000 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8007fde:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	3b01      	subs	r3, #1
 8007fe4:	f003 0303 	and.w	r3, r3, #3
 8007fe8:	2201      	movs	r2, #1
 8007fea:	409a      	lsls	r2, r3
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8007ff0:	bf00      	nop
 8007ff2:	3714      	adds	r7, #20
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffa:	4770      	bx	lr
 8007ffc:	1000823f 	.word	0x1000823f
 8008000:	40020940 	.word	0x40020940

08008004 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008004:	b480      	push	{r7}
 8008006:	b087      	sub	sp, #28
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800800e:	2300      	movs	r3, #0
 8008010:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008012:	e14c      	b.n	80082ae <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	2101      	movs	r1, #1
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	fa01 f303 	lsl.w	r3, r1, r3
 8008020:	4013      	ands	r3, r2
 8008022:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2b00      	cmp	r3, #0
 8008028:	f000 813e 	beq.w	80082a8 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	2b02      	cmp	r3, #2
 8008032:	d003      	beq.n	800803c <HAL_GPIO_Init+0x38>
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	685b      	ldr	r3, [r3, #4]
 8008038:	2b12      	cmp	r3, #18
 800803a:	d123      	bne.n	8008084 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	08da      	lsrs	r2, r3, #3
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	3208      	adds	r2, #8
 8008044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008048:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	f003 0307 	and.w	r3, r3, #7
 8008050:	009b      	lsls	r3, r3, #2
 8008052:	220f      	movs	r2, #15
 8008054:	fa02 f303 	lsl.w	r3, r2, r3
 8008058:	43db      	mvns	r3, r3
 800805a:	693a      	ldr	r2, [r7, #16]
 800805c:	4013      	ands	r3, r2
 800805e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	691a      	ldr	r2, [r3, #16]
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	f003 0307 	and.w	r3, r3, #7
 800806a:	009b      	lsls	r3, r3, #2
 800806c:	fa02 f303 	lsl.w	r3, r2, r3
 8008070:	693a      	ldr	r2, [r7, #16]
 8008072:	4313      	orrs	r3, r2
 8008074:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	08da      	lsrs	r2, r3, #3
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	3208      	adds	r2, #8
 800807e:	6939      	ldr	r1, [r7, #16]
 8008080:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	005b      	lsls	r3, r3, #1
 800808e:	2203      	movs	r2, #3
 8008090:	fa02 f303 	lsl.w	r3, r2, r3
 8008094:	43db      	mvns	r3, r3
 8008096:	693a      	ldr	r2, [r7, #16]
 8008098:	4013      	ands	r3, r2
 800809a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	f003 0203 	and.w	r2, r3, #3
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	005b      	lsls	r3, r3, #1
 80080a8:	fa02 f303 	lsl.w	r3, r2, r3
 80080ac:	693a      	ldr	r2, [r7, #16]
 80080ae:	4313      	orrs	r3, r2
 80080b0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	693a      	ldr	r2, [r7, #16]
 80080b6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	2b01      	cmp	r3, #1
 80080be:	d00b      	beq.n	80080d8 <HAL_GPIO_Init+0xd4>
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	2b02      	cmp	r3, #2
 80080c6:	d007      	beq.n	80080d8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80080cc:	2b11      	cmp	r3, #17
 80080ce:	d003      	beq.n	80080d8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	2b12      	cmp	r3, #18
 80080d6:	d130      	bne.n	800813a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	689b      	ldr	r3, [r3, #8]
 80080dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	005b      	lsls	r3, r3, #1
 80080e2:	2203      	movs	r2, #3
 80080e4:	fa02 f303 	lsl.w	r3, r2, r3
 80080e8:	43db      	mvns	r3, r3
 80080ea:	693a      	ldr	r2, [r7, #16]
 80080ec:	4013      	ands	r3, r2
 80080ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	68da      	ldr	r2, [r3, #12]
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	005b      	lsls	r3, r3, #1
 80080f8:	fa02 f303 	lsl.w	r3, r2, r3
 80080fc:	693a      	ldr	r2, [r7, #16]
 80080fe:	4313      	orrs	r3, r2
 8008100:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	693a      	ldr	r2, [r7, #16]
 8008106:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800810e:	2201      	movs	r2, #1
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	fa02 f303 	lsl.w	r3, r2, r3
 8008116:	43db      	mvns	r3, r3
 8008118:	693a      	ldr	r2, [r7, #16]
 800811a:	4013      	ands	r3, r2
 800811c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	091b      	lsrs	r3, r3, #4
 8008124:	f003 0201 	and.w	r2, r3, #1
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	fa02 f303 	lsl.w	r3, r2, r3
 800812e:	693a      	ldr	r2, [r7, #16]
 8008130:	4313      	orrs	r3, r2
 8008132:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	693a      	ldr	r2, [r7, #16]
 8008138:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	68db      	ldr	r3, [r3, #12]
 800813e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	005b      	lsls	r3, r3, #1
 8008144:	2203      	movs	r2, #3
 8008146:	fa02 f303 	lsl.w	r3, r2, r3
 800814a:	43db      	mvns	r3, r3
 800814c:	693a      	ldr	r2, [r7, #16]
 800814e:	4013      	ands	r3, r2
 8008150:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	689a      	ldr	r2, [r3, #8]
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	005b      	lsls	r3, r3, #1
 800815a:	fa02 f303 	lsl.w	r3, r2, r3
 800815e:	693a      	ldr	r2, [r7, #16]
 8008160:	4313      	orrs	r3, r2
 8008162:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	693a      	ldr	r2, [r7, #16]
 8008168:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008172:	2b00      	cmp	r3, #0
 8008174:	f000 8098 	beq.w	80082a8 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8008178:	4a54      	ldr	r2, [pc, #336]	; (80082cc <HAL_GPIO_Init+0x2c8>)
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	089b      	lsrs	r3, r3, #2
 800817e:	3302      	adds	r3, #2
 8008180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008184:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	f003 0303 	and.w	r3, r3, #3
 800818c:	009b      	lsls	r3, r3, #2
 800818e:	220f      	movs	r2, #15
 8008190:	fa02 f303 	lsl.w	r3, r2, r3
 8008194:	43db      	mvns	r3, r3
 8008196:	693a      	ldr	r2, [r7, #16]
 8008198:	4013      	ands	r3, r2
 800819a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80081a2:	d019      	beq.n	80081d8 <HAL_GPIO_Init+0x1d4>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	4a4a      	ldr	r2, [pc, #296]	; (80082d0 <HAL_GPIO_Init+0x2cc>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d013      	beq.n	80081d4 <HAL_GPIO_Init+0x1d0>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	4a49      	ldr	r2, [pc, #292]	; (80082d4 <HAL_GPIO_Init+0x2d0>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d00d      	beq.n	80081d0 <HAL_GPIO_Init+0x1cc>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	4a48      	ldr	r2, [pc, #288]	; (80082d8 <HAL_GPIO_Init+0x2d4>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d007      	beq.n	80081cc <HAL_GPIO_Init+0x1c8>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	4a47      	ldr	r2, [pc, #284]	; (80082dc <HAL_GPIO_Init+0x2d8>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d101      	bne.n	80081c8 <HAL_GPIO_Init+0x1c4>
 80081c4:	2304      	movs	r3, #4
 80081c6:	e008      	b.n	80081da <HAL_GPIO_Init+0x1d6>
 80081c8:	2307      	movs	r3, #7
 80081ca:	e006      	b.n	80081da <HAL_GPIO_Init+0x1d6>
 80081cc:	2303      	movs	r3, #3
 80081ce:	e004      	b.n	80081da <HAL_GPIO_Init+0x1d6>
 80081d0:	2302      	movs	r3, #2
 80081d2:	e002      	b.n	80081da <HAL_GPIO_Init+0x1d6>
 80081d4:	2301      	movs	r3, #1
 80081d6:	e000      	b.n	80081da <HAL_GPIO_Init+0x1d6>
 80081d8:	2300      	movs	r3, #0
 80081da:	697a      	ldr	r2, [r7, #20]
 80081dc:	f002 0203 	and.w	r2, r2, #3
 80081e0:	0092      	lsls	r2, r2, #2
 80081e2:	4093      	lsls	r3, r2
 80081e4:	693a      	ldr	r2, [r7, #16]
 80081e6:	4313      	orrs	r3, r2
 80081e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80081ea:	4938      	ldr	r1, [pc, #224]	; (80082cc <HAL_GPIO_Init+0x2c8>)
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	089b      	lsrs	r3, r3, #2
 80081f0:	3302      	adds	r3, #2
 80081f2:	693a      	ldr	r2, [r7, #16]
 80081f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80081f8:	4b39      	ldr	r3, [pc, #228]	; (80082e0 <HAL_GPIO_Init+0x2dc>)
 80081fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	43db      	mvns	r3, r3
 8008204:	693a      	ldr	r2, [r7, #16]
 8008206:	4013      	ands	r3, r2
 8008208:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008212:	2b00      	cmp	r3, #0
 8008214:	d003      	beq.n	800821e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8008216:	693a      	ldr	r2, [r7, #16]
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	4313      	orrs	r3, r2
 800821c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800821e:	4a30      	ldr	r2, [pc, #192]	; (80082e0 <HAL_GPIO_Init+0x2dc>)
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8008226:	4b2e      	ldr	r3, [pc, #184]	; (80082e0 <HAL_GPIO_Init+0x2dc>)
 8008228:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800822c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	43db      	mvns	r3, r3
 8008232:	693a      	ldr	r2, [r7, #16]
 8008234:	4013      	ands	r3, r2
 8008236:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008240:	2b00      	cmp	r3, #0
 8008242:	d003      	beq.n	800824c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8008244:	693a      	ldr	r2, [r7, #16]
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	4313      	orrs	r3, r2
 800824a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800824c:	4a24      	ldr	r2, [pc, #144]	; (80082e0 <HAL_GPIO_Init+0x2dc>)
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008254:	4b22      	ldr	r3, [pc, #136]	; (80082e0 <HAL_GPIO_Init+0x2dc>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	43db      	mvns	r3, r3
 800825e:	693a      	ldr	r2, [r7, #16]
 8008260:	4013      	ands	r3, r2
 8008262:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800826c:	2b00      	cmp	r3, #0
 800826e:	d003      	beq.n	8008278 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8008270:	693a      	ldr	r2, [r7, #16]
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	4313      	orrs	r3, r2
 8008276:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008278:	4a19      	ldr	r2, [pc, #100]	; (80082e0 <HAL_GPIO_Init+0x2dc>)
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800827e:	4b18      	ldr	r3, [pc, #96]	; (80082e0 <HAL_GPIO_Init+0x2dc>)
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	43db      	mvns	r3, r3
 8008288:	693a      	ldr	r2, [r7, #16]
 800828a:	4013      	ands	r3, r2
 800828c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008296:	2b00      	cmp	r3, #0
 8008298:	d003      	beq.n	80082a2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800829a:	693a      	ldr	r2, [r7, #16]
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	4313      	orrs	r3, r2
 80082a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80082a2:	4a0f      	ldr	r2, [pc, #60]	; (80082e0 <HAL_GPIO_Init+0x2dc>)
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	3301      	adds	r3, #1
 80082ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	681a      	ldr	r2, [r3, #0]
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	fa22 f303 	lsr.w	r3, r2, r3
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	f47f aeab 	bne.w	8008014 <HAL_GPIO_Init+0x10>
  }
}
 80082be:	bf00      	nop
 80082c0:	371c      	adds	r7, #28
 80082c2:	46bd      	mov	sp, r7
 80082c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c8:	4770      	bx	lr
 80082ca:	bf00      	nop
 80082cc:	40010000 	.word	0x40010000
 80082d0:	48000400 	.word	0x48000400
 80082d4:	48000800 	.word	0x48000800
 80082d8:	48000c00 	.word	0x48000c00
 80082dc:	48001000 	.word	0x48001000
 80082e0:	58000800 	.word	0x58000800

080082e4 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b085      	sub	sp, #20
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	460b      	mov	r3, r1
 80082ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	691a      	ldr	r2, [r3, #16]
 80082f4:	887b      	ldrh	r3, [r7, #2]
 80082f6:	4013      	ands	r3, r2
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d002      	beq.n	8008302 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80082fc:	2301      	movs	r3, #1
 80082fe:	73fb      	strb	r3, [r7, #15]
 8008300:	e001      	b.n	8008306 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008302:	2300      	movs	r3, #0
 8008304:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008306:	7bfb      	ldrb	r3, [r7, #15]
}
 8008308:	4618      	mov	r0, r3
 800830a:	3714      	adds	r7, #20
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr

08008314 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b082      	sub	sp, #8
 8008318:	af00      	add	r7, sp, #0
 800831a:	4603      	mov	r3, r0
 800831c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800831e:	4b08      	ldr	r3, [pc, #32]	; (8008340 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008320:	68da      	ldr	r2, [r3, #12]
 8008322:	88fb      	ldrh	r3, [r7, #6]
 8008324:	4013      	ands	r3, r2
 8008326:	2b00      	cmp	r3, #0
 8008328:	d006      	beq.n	8008338 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800832a:	4a05      	ldr	r2, [pc, #20]	; (8008340 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800832c:	88fb      	ldrh	r3, [r7, #6]
 800832e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008330:	88fb      	ldrh	r3, [r7, #6]
 8008332:	4618      	mov	r0, r3
 8008334:	f7fb fb5c 	bl	80039f0 <HAL_GPIO_EXTI_Callback>
  }
}
 8008338:	bf00      	nop
 800833a:	3708      	adds	r7, #8
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}
 8008340:	58000800 	.word	0x58000800

08008344 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b082      	sub	sp, #8
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d101      	bne.n	8008356 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008352:	2301      	movs	r3, #1
 8008354:	e081      	b.n	800845a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800835c:	b2db      	uxtb	r3, r3
 800835e:	2b00      	cmp	r3, #0
 8008360:	d106      	bne.n	8008370 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2200      	movs	r2, #0
 8008366:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f7fb fa82 	bl	8003874 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2224      	movs	r2, #36	; 0x24
 8008374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	681a      	ldr	r2, [r3, #0]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f022 0201 	bic.w	r2, r2, #1
 8008386:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	685a      	ldr	r2, [r3, #4]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008394:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	689a      	ldr	r2, [r3, #8]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80083a4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	68db      	ldr	r3, [r3, #12]
 80083aa:	2b01      	cmp	r3, #1
 80083ac:	d107      	bne.n	80083be <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	689a      	ldr	r2, [r3, #8]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80083ba:	609a      	str	r2, [r3, #8]
 80083bc:	e006      	b.n	80083cc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	689a      	ldr	r2, [r3, #8]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80083ca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	68db      	ldr	r3, [r3, #12]
 80083d0:	2b02      	cmp	r3, #2
 80083d2:	d104      	bne.n	80083de <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80083dc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	687a      	ldr	r2, [r7, #4]
 80083e6:	6812      	ldr	r2, [r2, #0]
 80083e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80083ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083f0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	68da      	ldr	r2, [r3, #12]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008400:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	691a      	ldr	r2, [r3, #16]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	695b      	ldr	r3, [r3, #20]
 800840a:	ea42 0103 	orr.w	r1, r2, r3
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	699b      	ldr	r3, [r3, #24]
 8008412:	021a      	lsls	r2, r3, #8
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	430a      	orrs	r2, r1
 800841a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	69d9      	ldr	r1, [r3, #28]
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6a1a      	ldr	r2, [r3, #32]
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	430a      	orrs	r2, r1
 800842a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	681a      	ldr	r2, [r3, #0]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f042 0201 	orr.w	r2, r2, #1
 800843a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2200      	movs	r2, #0
 8008440:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2220      	movs	r2, #32
 8008446:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2200      	movs	r2, #0
 800844e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2200      	movs	r2, #0
 8008454:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008458:	2300      	movs	r3, #0
}
 800845a:	4618      	mov	r0, r3
 800845c:	3708      	adds	r7, #8
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
	...

08008464 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b088      	sub	sp, #32
 8008468:	af02      	add	r7, sp, #8
 800846a:	60f8      	str	r0, [r7, #12]
 800846c:	607a      	str	r2, [r7, #4]
 800846e:	461a      	mov	r2, r3
 8008470:	460b      	mov	r3, r1
 8008472:	817b      	strh	r3, [r7, #10]
 8008474:	4613      	mov	r3, r2
 8008476:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800847e:	b2db      	uxtb	r3, r3
 8008480:	2b20      	cmp	r3, #32
 8008482:	f040 80da 	bne.w	800863a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800848c:	2b01      	cmp	r3, #1
 800848e:	d101      	bne.n	8008494 <HAL_I2C_Master_Transmit+0x30>
 8008490:	2302      	movs	r3, #2
 8008492:	e0d3      	b.n	800863c <HAL_I2C_Master_Transmit+0x1d8>
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2201      	movs	r2, #1
 8008498:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800849c:	f7fd fcf8 	bl	8005e90 <HAL_GetTick>
 80084a0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	9300      	str	r3, [sp, #0]
 80084a6:	2319      	movs	r3, #25
 80084a8:	2201      	movs	r2, #1
 80084aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80084ae:	68f8      	ldr	r0, [r7, #12]
 80084b0:	f001 fbba 	bl	8009c28 <I2C_WaitOnFlagUntilTimeout>
 80084b4:	4603      	mov	r3, r0
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d001      	beq.n	80084be <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80084ba:	2301      	movs	r3, #1
 80084bc:	e0be      	b.n	800863c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	2221      	movs	r2, #33	; 0x21
 80084c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	2210      	movs	r2, #16
 80084ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	2200      	movs	r2, #0
 80084d2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	687a      	ldr	r2, [r7, #4]
 80084d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	893a      	ldrh	r2, [r7, #8]
 80084de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	2200      	movs	r2, #0
 80084e4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	2bff      	cmp	r3, #255	; 0xff
 80084ee:	d90e      	bls.n	800850e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	22ff      	movs	r2, #255	; 0xff
 80084f4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084fa:	b2da      	uxtb	r2, r3
 80084fc:	8979      	ldrh	r1, [r7, #10]
 80084fe:	4b51      	ldr	r3, [pc, #324]	; (8008644 <HAL_I2C_Master_Transmit+0x1e0>)
 8008500:	9300      	str	r3, [sp, #0]
 8008502:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008506:	68f8      	ldr	r0, [r7, #12]
 8008508:	f001 fd1c 	bl	8009f44 <I2C_TransferConfig>
 800850c:	e06c      	b.n	80085e8 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008512:	b29a      	uxth	r2, r3
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800851c:	b2da      	uxtb	r2, r3
 800851e:	8979      	ldrh	r1, [r7, #10]
 8008520:	4b48      	ldr	r3, [pc, #288]	; (8008644 <HAL_I2C_Master_Transmit+0x1e0>)
 8008522:	9300      	str	r3, [sp, #0]
 8008524:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008528:	68f8      	ldr	r0, [r7, #12]
 800852a:	f001 fd0b 	bl	8009f44 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800852e:	e05b      	b.n	80085e8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008530:	697a      	ldr	r2, [r7, #20]
 8008532:	6a39      	ldr	r1, [r7, #32]
 8008534:	68f8      	ldr	r0, [r7, #12]
 8008536:	f001 fbb7 	bl	8009ca8 <I2C_WaitOnTXISFlagUntilTimeout>
 800853a:	4603      	mov	r3, r0
 800853c:	2b00      	cmp	r3, #0
 800853e:	d001      	beq.n	8008544 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8008540:	2301      	movs	r3, #1
 8008542:	e07b      	b.n	800863c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008548:	781a      	ldrb	r2, [r3, #0]
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008554:	1c5a      	adds	r2, r3, #1
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800855e:	b29b      	uxth	r3, r3
 8008560:	3b01      	subs	r3, #1
 8008562:	b29a      	uxth	r2, r3
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800856c:	3b01      	subs	r3, #1
 800856e:	b29a      	uxth	r2, r3
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008578:	b29b      	uxth	r3, r3
 800857a:	2b00      	cmp	r3, #0
 800857c:	d034      	beq.n	80085e8 <HAL_I2C_Master_Transmit+0x184>
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008582:	2b00      	cmp	r3, #0
 8008584:	d130      	bne.n	80085e8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	9300      	str	r3, [sp, #0]
 800858a:	6a3b      	ldr	r3, [r7, #32]
 800858c:	2200      	movs	r2, #0
 800858e:	2180      	movs	r1, #128	; 0x80
 8008590:	68f8      	ldr	r0, [r7, #12]
 8008592:	f001 fb49 	bl	8009c28 <I2C_WaitOnFlagUntilTimeout>
 8008596:	4603      	mov	r3, r0
 8008598:	2b00      	cmp	r3, #0
 800859a:	d001      	beq.n	80085a0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800859c:	2301      	movs	r3, #1
 800859e:	e04d      	b.n	800863c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085a4:	b29b      	uxth	r3, r3
 80085a6:	2bff      	cmp	r3, #255	; 0xff
 80085a8:	d90e      	bls.n	80085c8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	22ff      	movs	r2, #255	; 0xff
 80085ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085b4:	b2da      	uxtb	r2, r3
 80085b6:	8979      	ldrh	r1, [r7, #10]
 80085b8:	2300      	movs	r3, #0
 80085ba:	9300      	str	r3, [sp, #0]
 80085bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80085c0:	68f8      	ldr	r0, [r7, #12]
 80085c2:	f001 fcbf 	bl	8009f44 <I2C_TransferConfig>
 80085c6:	e00f      	b.n	80085e8 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085cc:	b29a      	uxth	r2, r3
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085d6:	b2da      	uxtb	r2, r3
 80085d8:	8979      	ldrh	r1, [r7, #10]
 80085da:	2300      	movs	r3, #0
 80085dc:	9300      	str	r3, [sp, #0]
 80085de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80085e2:	68f8      	ldr	r0, [r7, #12]
 80085e4:	f001 fcae 	bl	8009f44 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085ec:	b29b      	uxth	r3, r3
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d19e      	bne.n	8008530 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80085f2:	697a      	ldr	r2, [r7, #20]
 80085f4:	6a39      	ldr	r1, [r7, #32]
 80085f6:	68f8      	ldr	r0, [r7, #12]
 80085f8:	f001 fb96 	bl	8009d28 <I2C_WaitOnSTOPFlagUntilTimeout>
 80085fc:	4603      	mov	r3, r0
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d001      	beq.n	8008606 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8008602:	2301      	movs	r3, #1
 8008604:	e01a      	b.n	800863c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	2220      	movs	r2, #32
 800860c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	6859      	ldr	r1, [r3, #4]
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681a      	ldr	r2, [r3, #0]
 8008618:	4b0b      	ldr	r3, [pc, #44]	; (8008648 <HAL_I2C_Master_Transmit+0x1e4>)
 800861a:	400b      	ands	r3, r1
 800861c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2220      	movs	r2, #32
 8008622:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2200      	movs	r2, #0
 800862a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2200      	movs	r2, #0
 8008632:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008636:	2300      	movs	r3, #0
 8008638:	e000      	b.n	800863c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800863a:	2302      	movs	r3, #2
  }
}
 800863c:	4618      	mov	r0, r3
 800863e:	3718      	adds	r7, #24
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}
 8008644:	80002000 	.word	0x80002000
 8008648:	fe00e800 	.word	0xfe00e800

0800864c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b088      	sub	sp, #32
 8008650:	af02      	add	r7, sp, #8
 8008652:	60f8      	str	r0, [r7, #12]
 8008654:	607a      	str	r2, [r7, #4]
 8008656:	461a      	mov	r2, r3
 8008658:	460b      	mov	r3, r1
 800865a:	817b      	strh	r3, [r7, #10]
 800865c:	4613      	mov	r3, r2
 800865e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008666:	b2db      	uxtb	r3, r3
 8008668:	2b20      	cmp	r3, #32
 800866a:	f040 80db 	bne.w	8008824 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008674:	2b01      	cmp	r3, #1
 8008676:	d101      	bne.n	800867c <HAL_I2C_Master_Receive+0x30>
 8008678:	2302      	movs	r3, #2
 800867a:	e0d4      	b.n	8008826 <HAL_I2C_Master_Receive+0x1da>
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	2201      	movs	r2, #1
 8008680:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008684:	f7fd fc04 	bl	8005e90 <HAL_GetTick>
 8008688:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	9300      	str	r3, [sp, #0]
 800868e:	2319      	movs	r3, #25
 8008690:	2201      	movs	r2, #1
 8008692:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008696:	68f8      	ldr	r0, [r7, #12]
 8008698:	f001 fac6 	bl	8009c28 <I2C_WaitOnFlagUntilTimeout>
 800869c:	4603      	mov	r3, r0
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d001      	beq.n	80086a6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80086a2:	2301      	movs	r3, #1
 80086a4:	e0bf      	b.n	8008826 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2222      	movs	r2, #34	; 0x22
 80086aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2210      	movs	r2, #16
 80086b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	2200      	movs	r2, #0
 80086ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	687a      	ldr	r2, [r7, #4]
 80086c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	893a      	ldrh	r2, [r7, #8]
 80086c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2200      	movs	r2, #0
 80086cc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086d2:	b29b      	uxth	r3, r3
 80086d4:	2bff      	cmp	r3, #255	; 0xff
 80086d6:	d90e      	bls.n	80086f6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	22ff      	movs	r2, #255	; 0xff
 80086dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086e2:	b2da      	uxtb	r2, r3
 80086e4:	8979      	ldrh	r1, [r7, #10]
 80086e6:	4b52      	ldr	r3, [pc, #328]	; (8008830 <HAL_I2C_Master_Receive+0x1e4>)
 80086e8:	9300      	str	r3, [sp, #0]
 80086ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80086ee:	68f8      	ldr	r0, [r7, #12]
 80086f0:	f001 fc28 	bl	8009f44 <I2C_TransferConfig>
 80086f4:	e06d      	b.n	80087d2 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086fa:	b29a      	uxth	r2, r3
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008704:	b2da      	uxtb	r2, r3
 8008706:	8979      	ldrh	r1, [r7, #10]
 8008708:	4b49      	ldr	r3, [pc, #292]	; (8008830 <HAL_I2C_Master_Receive+0x1e4>)
 800870a:	9300      	str	r3, [sp, #0]
 800870c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008710:	68f8      	ldr	r0, [r7, #12]
 8008712:	f001 fc17 	bl	8009f44 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8008716:	e05c      	b.n	80087d2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008718:	697a      	ldr	r2, [r7, #20]
 800871a:	6a39      	ldr	r1, [r7, #32]
 800871c:	68f8      	ldr	r0, [r7, #12]
 800871e:	f001 fb3f 	bl	8009da0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008722:	4603      	mov	r3, r0
 8008724:	2b00      	cmp	r3, #0
 8008726:	d001      	beq.n	800872c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8008728:	2301      	movs	r3, #1
 800872a:	e07c      	b.n	8008826 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008736:	b2d2      	uxtb	r2, r2
 8008738:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800873e:	1c5a      	adds	r2, r3, #1
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008748:	3b01      	subs	r3, #1
 800874a:	b29a      	uxth	r2, r3
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008754:	b29b      	uxth	r3, r3
 8008756:	3b01      	subs	r3, #1
 8008758:	b29a      	uxth	r2, r3
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008762:	b29b      	uxth	r3, r3
 8008764:	2b00      	cmp	r3, #0
 8008766:	d034      	beq.n	80087d2 <HAL_I2C_Master_Receive+0x186>
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800876c:	2b00      	cmp	r3, #0
 800876e:	d130      	bne.n	80087d2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	9300      	str	r3, [sp, #0]
 8008774:	6a3b      	ldr	r3, [r7, #32]
 8008776:	2200      	movs	r2, #0
 8008778:	2180      	movs	r1, #128	; 0x80
 800877a:	68f8      	ldr	r0, [r7, #12]
 800877c:	f001 fa54 	bl	8009c28 <I2C_WaitOnFlagUntilTimeout>
 8008780:	4603      	mov	r3, r0
 8008782:	2b00      	cmp	r3, #0
 8008784:	d001      	beq.n	800878a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8008786:	2301      	movs	r3, #1
 8008788:	e04d      	b.n	8008826 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800878e:	b29b      	uxth	r3, r3
 8008790:	2bff      	cmp	r3, #255	; 0xff
 8008792:	d90e      	bls.n	80087b2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	22ff      	movs	r2, #255	; 0xff
 8008798:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800879e:	b2da      	uxtb	r2, r3
 80087a0:	8979      	ldrh	r1, [r7, #10]
 80087a2:	2300      	movs	r3, #0
 80087a4:	9300      	str	r3, [sp, #0]
 80087a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80087aa:	68f8      	ldr	r0, [r7, #12]
 80087ac:	f001 fbca 	bl	8009f44 <I2C_TransferConfig>
 80087b0:	e00f      	b.n	80087d2 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087b6:	b29a      	uxth	r2, r3
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087c0:	b2da      	uxtb	r2, r3
 80087c2:	8979      	ldrh	r1, [r7, #10]
 80087c4:	2300      	movs	r3, #0
 80087c6:	9300      	str	r3, [sp, #0]
 80087c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80087cc:	68f8      	ldr	r0, [r7, #12]
 80087ce:	f001 fbb9 	bl	8009f44 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087d6:	b29b      	uxth	r3, r3
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d19d      	bne.n	8008718 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80087dc:	697a      	ldr	r2, [r7, #20]
 80087de:	6a39      	ldr	r1, [r7, #32]
 80087e0:	68f8      	ldr	r0, [r7, #12]
 80087e2:	f001 faa1 	bl	8009d28 <I2C_WaitOnSTOPFlagUntilTimeout>
 80087e6:	4603      	mov	r3, r0
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d001      	beq.n	80087f0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80087ec:	2301      	movs	r3, #1
 80087ee:	e01a      	b.n	8008826 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	2220      	movs	r2, #32
 80087f6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	6859      	ldr	r1, [r3, #4]
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681a      	ldr	r2, [r3, #0]
 8008802:	4b0c      	ldr	r3, [pc, #48]	; (8008834 <HAL_I2C_Master_Receive+0x1e8>)
 8008804:	400b      	ands	r3, r1
 8008806:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2220      	movs	r2, #32
 800880c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2200      	movs	r2, #0
 8008814:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	2200      	movs	r2, #0
 800881c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008820:	2300      	movs	r3, #0
 8008822:	e000      	b.n	8008826 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8008824:	2302      	movs	r3, #2
  }
}
 8008826:	4618      	mov	r0, r3
 8008828:	3718      	adds	r7, #24
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}
 800882e:	bf00      	nop
 8008830:	80002400 	.word	0x80002400
 8008834:	fe00e800 	.word	0xfe00e800

08008838 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b088      	sub	sp, #32
 800883c:	af02      	add	r7, sp, #8
 800883e:	60f8      	str	r0, [r7, #12]
 8008840:	607a      	str	r2, [r7, #4]
 8008842:	461a      	mov	r2, r3
 8008844:	460b      	mov	r3, r1
 8008846:	817b      	strh	r3, [r7, #10]
 8008848:	4613      	mov	r3, r2
 800884a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008852:	b2db      	uxtb	r3, r3
 8008854:	2b20      	cmp	r3, #32
 8008856:	d153      	bne.n	8008900 <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	699b      	ldr	r3, [r3, #24]
 800885e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008862:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008866:	d101      	bne.n	800886c <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
 8008868:	2302      	movs	r3, #2
 800886a:	e04a      	b.n	8008902 <HAL_I2C_Master_Receive_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008872:	2b01      	cmp	r3, #1
 8008874:	d101      	bne.n	800887a <HAL_I2C_Master_Receive_IT+0x42>
 8008876:	2302      	movs	r3, #2
 8008878:	e043      	b.n	8008902 <HAL_I2C_Master_Receive_IT+0xca>
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2201      	movs	r2, #1
 800887e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2222      	movs	r2, #34	; 0x22
 8008886:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	2210      	movs	r2, #16
 800888e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2200      	movs	r2, #0
 8008896:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	687a      	ldr	r2, [r7, #4]
 800889c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	893a      	ldrh	r2, [r7, #8]
 80088a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	4a19      	ldr	r2, [pc, #100]	; (800890c <HAL_I2C_Master_Receive_IT+0xd4>)
 80088a8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	4a18      	ldr	r2, [pc, #96]	; (8008910 <HAL_I2C_Master_Receive_IT+0xd8>)
 80088ae:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	2bff      	cmp	r3, #255	; 0xff
 80088b8:	d906      	bls.n	80088c8 <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	22ff      	movs	r2, #255	; 0xff
 80088be:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80088c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80088c4:	617b      	str	r3, [r7, #20]
 80088c6:	e007      	b.n	80088d8 <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088cc:	b29a      	uxth	r2, r3
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80088d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80088d6:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088dc:	b2da      	uxtb	r2, r3
 80088de:	8979      	ldrh	r1, [r7, #10]
 80088e0:	4b0c      	ldr	r3, [pc, #48]	; (8008914 <HAL_I2C_Master_Receive_IT+0xdc>)
 80088e2:	9300      	str	r3, [sp, #0]
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	68f8      	ldr	r0, [r7, #12]
 80088e8:	f001 fb2c 	bl	8009f44 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	2200      	movs	r2, #0
 80088f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80088f4:	2102      	movs	r1, #2
 80088f6:	68f8      	ldr	r0, [r7, #12]
 80088f8:	f001 fb52 	bl	8009fa0 <I2C_Enable_IRQ>

    return HAL_OK;
 80088fc:	2300      	movs	r3, #0
 80088fe:	e000      	b.n	8008902 <HAL_I2C_Master_Receive_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8008900:	2302      	movs	r3, #2
  }
}
 8008902:	4618      	mov	r0, r3
 8008904:	3718      	adds	r7, #24
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}
 800890a:	bf00      	nop
 800890c:	ffff0000 	.word	0xffff0000
 8008910:	08008c1d 	.word	0x08008c1d
 8008914:	80002400 	.word	0x80002400

08008918 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b088      	sub	sp, #32
 800891c:	af02      	add	r7, sp, #8
 800891e:	60f8      	str	r0, [r7, #12]
 8008920:	4608      	mov	r0, r1
 8008922:	4611      	mov	r1, r2
 8008924:	461a      	mov	r2, r3
 8008926:	4603      	mov	r3, r0
 8008928:	817b      	strh	r3, [r7, #10]
 800892a:	460b      	mov	r3, r1
 800892c:	813b      	strh	r3, [r7, #8]
 800892e:	4613      	mov	r3, r2
 8008930:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008938:	b2db      	uxtb	r3, r3
 800893a:	2b20      	cmp	r3, #32
 800893c:	f040 80f9 	bne.w	8008b32 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008940:	6a3b      	ldr	r3, [r7, #32]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d002      	beq.n	800894c <HAL_I2C_Mem_Write+0x34>
 8008946:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008948:	2b00      	cmp	r3, #0
 800894a:	d105      	bne.n	8008958 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008952:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008954:	2301      	movs	r3, #1
 8008956:	e0ed      	b.n	8008b34 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800895e:	2b01      	cmp	r3, #1
 8008960:	d101      	bne.n	8008966 <HAL_I2C_Mem_Write+0x4e>
 8008962:	2302      	movs	r3, #2
 8008964:	e0e6      	b.n	8008b34 <HAL_I2C_Mem_Write+0x21c>
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2201      	movs	r2, #1
 800896a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800896e:	f7fd fa8f 	bl	8005e90 <HAL_GetTick>
 8008972:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	9300      	str	r3, [sp, #0]
 8008978:	2319      	movs	r3, #25
 800897a:	2201      	movs	r2, #1
 800897c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008980:	68f8      	ldr	r0, [r7, #12]
 8008982:	f001 f951 	bl	8009c28 <I2C_WaitOnFlagUntilTimeout>
 8008986:	4603      	mov	r3, r0
 8008988:	2b00      	cmp	r3, #0
 800898a:	d001      	beq.n	8008990 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800898c:	2301      	movs	r3, #1
 800898e:	e0d1      	b.n	8008b34 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	2221      	movs	r2, #33	; 0x21
 8008994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2240      	movs	r2, #64	; 0x40
 800899c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	2200      	movs	r2, #0
 80089a4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	6a3a      	ldr	r2, [r7, #32]
 80089aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80089b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2200      	movs	r2, #0
 80089b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80089b8:	88f8      	ldrh	r0, [r7, #6]
 80089ba:	893a      	ldrh	r2, [r7, #8]
 80089bc:	8979      	ldrh	r1, [r7, #10]
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	9301      	str	r3, [sp, #4]
 80089c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c4:	9300      	str	r3, [sp, #0]
 80089c6:	4603      	mov	r3, r0
 80089c8:	68f8      	ldr	r0, [r7, #12]
 80089ca:	f000 fd0f 	bl	80093ec <I2C_RequestMemoryWrite>
 80089ce:	4603      	mov	r3, r0
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d005      	beq.n	80089e0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2200      	movs	r2, #0
 80089d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80089dc:	2301      	movs	r3, #1
 80089de:	e0a9      	b.n	8008b34 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089e4:	b29b      	uxth	r3, r3
 80089e6:	2bff      	cmp	r3, #255	; 0xff
 80089e8:	d90e      	bls.n	8008a08 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	22ff      	movs	r2, #255	; 0xff
 80089ee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089f4:	b2da      	uxtb	r2, r3
 80089f6:	8979      	ldrh	r1, [r7, #10]
 80089f8:	2300      	movs	r3, #0
 80089fa:	9300      	str	r3, [sp, #0]
 80089fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008a00:	68f8      	ldr	r0, [r7, #12]
 8008a02:	f001 fa9f 	bl	8009f44 <I2C_TransferConfig>
 8008a06:	e00f      	b.n	8008a28 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a0c:	b29a      	uxth	r2, r3
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a16:	b2da      	uxtb	r2, r3
 8008a18:	8979      	ldrh	r1, [r7, #10]
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	9300      	str	r3, [sp, #0]
 8008a1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008a22:	68f8      	ldr	r0, [r7, #12]
 8008a24:	f001 fa8e 	bl	8009f44 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008a28:	697a      	ldr	r2, [r7, #20]
 8008a2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a2c:	68f8      	ldr	r0, [r7, #12]
 8008a2e:	f001 f93b 	bl	8009ca8 <I2C_WaitOnTXISFlagUntilTimeout>
 8008a32:	4603      	mov	r3, r0
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d001      	beq.n	8008a3c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008a38:	2301      	movs	r3, #1
 8008a3a:	e07b      	b.n	8008b34 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a40:	781a      	ldrb	r2, [r3, #0]
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a4c:	1c5a      	adds	r2, r3, #1
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	3b01      	subs	r3, #1
 8008a5a:	b29a      	uxth	r2, r3
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a64:	3b01      	subs	r3, #1
 8008a66:	b29a      	uxth	r2, r3
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a70:	b29b      	uxth	r3, r3
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d034      	beq.n	8008ae0 <HAL_I2C_Mem_Write+0x1c8>
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d130      	bne.n	8008ae0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	9300      	str	r3, [sp, #0]
 8008a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a84:	2200      	movs	r2, #0
 8008a86:	2180      	movs	r1, #128	; 0x80
 8008a88:	68f8      	ldr	r0, [r7, #12]
 8008a8a:	f001 f8cd 	bl	8009c28 <I2C_WaitOnFlagUntilTimeout>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d001      	beq.n	8008a98 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008a94:	2301      	movs	r3, #1
 8008a96:	e04d      	b.n	8008b34 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a9c:	b29b      	uxth	r3, r3
 8008a9e:	2bff      	cmp	r3, #255	; 0xff
 8008aa0:	d90e      	bls.n	8008ac0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	22ff      	movs	r2, #255	; 0xff
 8008aa6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008aac:	b2da      	uxtb	r2, r3
 8008aae:	8979      	ldrh	r1, [r7, #10]
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	9300      	str	r3, [sp, #0]
 8008ab4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008ab8:	68f8      	ldr	r0, [r7, #12]
 8008aba:	f001 fa43 	bl	8009f44 <I2C_TransferConfig>
 8008abe:	e00f      	b.n	8008ae0 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ac4:	b29a      	uxth	r2, r3
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ace:	b2da      	uxtb	r2, r3
 8008ad0:	8979      	ldrh	r1, [r7, #10]
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	9300      	str	r3, [sp, #0]
 8008ad6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008ada:	68f8      	ldr	r0, [r7, #12]
 8008adc:	f001 fa32 	bl	8009f44 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ae4:	b29b      	uxth	r3, r3
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d19e      	bne.n	8008a28 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008aea:	697a      	ldr	r2, [r7, #20]
 8008aec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008aee:	68f8      	ldr	r0, [r7, #12]
 8008af0:	f001 f91a 	bl	8009d28 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008af4:	4603      	mov	r3, r0
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d001      	beq.n	8008afe <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008afa:	2301      	movs	r3, #1
 8008afc:	e01a      	b.n	8008b34 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	2220      	movs	r2, #32
 8008b04:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	6859      	ldr	r1, [r3, #4]
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681a      	ldr	r2, [r3, #0]
 8008b10:	4b0a      	ldr	r3, [pc, #40]	; (8008b3c <HAL_I2C_Mem_Write+0x224>)
 8008b12:	400b      	ands	r3, r1
 8008b14:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	2220      	movs	r2, #32
 8008b1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	2200      	movs	r2, #0
 8008b22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	e000      	b.n	8008b34 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8008b32:	2302      	movs	r3, #2
  }
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	3718      	adds	r7, #24
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}
 8008b3c:	fe00e800 	.word	0xfe00e800

08008b40 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b084      	sub	sp, #16
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	699b      	ldr	r3, [r3, #24]
 8008b4e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d005      	beq.n	8008b6c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b64:	68ba      	ldr	r2, [r7, #8]
 8008b66:	68f9      	ldr	r1, [r7, #12]
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	4798      	blx	r3
  }
}
 8008b6c:	bf00      	nop
 8008b6e:	3710      	adds	r7, #16
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}

08008b74 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008b74:	b480      	push	{r7}
 8008b76:	b083      	sub	sp, #12
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8008b7c:	bf00      	nop
 8008b7e:	370c      	adds	r7, #12
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr

08008b88 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b083      	sub	sp, #12
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8008b90:	bf00      	nop
 8008b92:	370c      	adds	r7, #12
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr

08008b9c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b083      	sub	sp, #12
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	70fb      	strb	r3, [r7, #3]
 8008ba8:	4613      	mov	r3, r2
 8008baa:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8008bac:	bf00      	nop
 8008bae:	370c      	adds	r7, #12
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb6:	4770      	bx	lr

08008bb8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b083      	sub	sp, #12
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8008bc0:	bf00      	nop
 8008bc2:	370c      	adds	r7, #12
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bca:	4770      	bx	lr

08008bcc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b083      	sub	sp, #12
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8008bd4:	bf00      	nop
 8008bd6:	370c      	adds	r7, #12
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bde:	4770      	bx	lr

08008be0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b083      	sub	sp, #12
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8008be8:	bf00      	nop
 8008bea:	370c      	adds	r7, #12
 8008bec:	46bd      	mov	sp, r7
 8008bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf2:	4770      	bx	lr

08008bf4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b083      	sub	sp, #12
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8008bfc:	bf00      	nop
 8008bfe:	370c      	adds	r7, #12
 8008c00:	46bd      	mov	sp, r7
 8008c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c06:	4770      	bx	lr

08008c08 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b083      	sub	sp, #12
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8008c10:	bf00      	nop
 8008c12:	370c      	adds	r7, #12
 8008c14:	46bd      	mov	sp, r7
 8008c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1a:	4770      	bx	lr

08008c1c <I2C_Master_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b088      	sub	sp, #32
 8008c20:	af02      	add	r7, sp, #8
 8008c22:	60f8      	str	r0, [r7, #12]
 8008c24:	60b9      	str	r1, [r7, #8]
 8008c26:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008c32:	2b01      	cmp	r3, #1
 8008c34:	d101      	bne.n	8008c3a <I2C_Master_ISR_IT+0x1e>
 8008c36:	2302      	movs	r3, #2
 8008c38:	e115      	b.n	8008e66 <I2C_Master_ISR_IT+0x24a>
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	2201      	movs	r2, #1
 8008c3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	091b      	lsrs	r3, r3, #4
 8008c46:	f003 0301 	and.w	r3, r3, #1
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d013      	beq.n	8008c76 <I2C_Master_ISR_IT+0x5a>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	091b      	lsrs	r3, r3, #4
 8008c52:	f003 0301 	and.w	r3, r3, #1
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d00d      	beq.n	8008c76 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	2210      	movs	r2, #16
 8008c60:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c66:	f043 0204 	orr.w	r2, r3, #4
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008c6e:	68f8      	ldr	r0, [r7, #12]
 8008c70:	f000 ff92 	bl	8009b98 <I2C_Flush_TXDR>
 8008c74:	e0e2      	b.n	8008e3c <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	089b      	lsrs	r3, r3, #2
 8008c7a:	f003 0301 	and.w	r3, r3, #1
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d023      	beq.n	8008cca <I2C_Master_ISR_IT+0xae>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	089b      	lsrs	r3, r3, #2
 8008c86:	f003 0301 	and.w	r3, r3, #1
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d01d      	beq.n	8008cca <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	f023 0304 	bic.w	r3, r3, #4
 8008c94:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca0:	b2d2      	uxtb	r2, r2
 8008ca2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca8:	1c5a      	adds	r2, r3, #1
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cb2:	3b01      	subs	r3, #1
 8008cb4:	b29a      	uxth	r2, r3
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cbe:	b29b      	uxth	r3, r3
 8008cc0:	3b01      	subs	r3, #1
 8008cc2:	b29a      	uxth	r2, r3
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008cc8:	e0b8      	b.n	8008e3c <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	085b      	lsrs	r3, r3, #1
 8008cce:	f003 0301 	and.w	r3, r3, #1
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d01e      	beq.n	8008d14 <I2C_Master_ISR_IT+0xf8>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	085b      	lsrs	r3, r3, #1
 8008cda:	f003 0301 	and.w	r3, r3, #1
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d018      	beq.n	8008d14 <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce6:	781a      	ldrb	r2, [r3, #0]
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf2:	1c5a      	adds	r2, r3, #1
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cfc:	3b01      	subs	r3, #1
 8008cfe:	b29a      	uxth	r2, r3
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d08:	b29b      	uxth	r3, r3
 8008d0a:	3b01      	subs	r3, #1
 8008d0c:	b29a      	uxth	r2, r3
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008d12:	e093      	b.n	8008e3c <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	09db      	lsrs	r3, r3, #7
 8008d18:	f003 0301 	and.w	r3, r3, #1
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d05e      	beq.n	8008dde <I2C_Master_ISR_IT+0x1c2>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	099b      	lsrs	r3, r3, #6
 8008d24:	f003 0301 	and.w	r3, r3, #1
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d058      	beq.n	8008dde <I2C_Master_ISR_IT+0x1c2>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d30:	b29b      	uxth	r3, r3
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d041      	beq.n	8008dba <I2C_Master_ISR_IT+0x19e>
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d13d      	bne.n	8008dba <I2C_Master_ISR_IT+0x19e>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	b29b      	uxth	r3, r3
 8008d46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008d4a:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d50:	b29b      	uxth	r3, r3
 8008d52:	2bff      	cmp	r3, #255	; 0xff
 8008d54:	d90e      	bls.n	8008d74 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	22ff      	movs	r2, #255	; 0xff
 8008d5a:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d60:	b2da      	uxtb	r2, r3
 8008d62:	8a79      	ldrh	r1, [r7, #18]
 8008d64:	2300      	movs	r3, #0
 8008d66:	9300      	str	r3, [sp, #0]
 8008d68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008d6c:	68f8      	ldr	r0, [r7, #12]
 8008d6e:	f001 f8e9 	bl	8009f44 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008d72:	e033      	b.n	8008ddc <I2C_Master_ISR_IT+0x1c0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d78:	b29a      	uxth	r2, r3
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d82:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008d86:	d00c      	beq.n	8008da2 <I2C_Master_ISR_IT+0x186>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d8c:	b2da      	uxtb	r2, r3
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008d92:	8a79      	ldrh	r1, [r7, #18]
 8008d94:	2300      	movs	r3, #0
 8008d96:	9300      	str	r3, [sp, #0]
 8008d98:	4603      	mov	r3, r0
 8008d9a:	68f8      	ldr	r0, [r7, #12]
 8008d9c:	f001 f8d2 	bl	8009f44 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008da0:	e01c      	b.n	8008ddc <I2C_Master_ISR_IT+0x1c0>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008da6:	b2da      	uxtb	r2, r3
 8008da8:	8a79      	ldrh	r1, [r7, #18]
 8008daa:	2300      	movs	r3, #0
 8008dac:	9300      	str	r3, [sp, #0]
 8008dae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008db2:	68f8      	ldr	r0, [r7, #12]
 8008db4:	f001 f8c6 	bl	8009f44 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008db8:	e010      	b.n	8008ddc <I2C_Master_ISR_IT+0x1c0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008dc4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008dc8:	d003      	beq.n	8008dd2 <I2C_Master_ISR_IT+0x1b6>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8008dca:	68f8      	ldr	r0, [r7, #12]
 8008dcc:	f000 fbe4 	bl	8009598 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008dd0:	e034      	b.n	8008e3c <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008dd2:	2140      	movs	r1, #64	; 0x40
 8008dd4:	68f8      	ldr	r0, [r7, #12]
 8008dd6:	f000 fe1f 	bl	8009a18 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008dda:	e02f      	b.n	8008e3c <I2C_Master_ISR_IT+0x220>
 8008ddc:	e02e      	b.n	8008e3c <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	099b      	lsrs	r3, r3, #6
 8008de2:	f003 0301 	and.w	r3, r3, #1
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d028      	beq.n	8008e3c <I2C_Master_ISR_IT+0x220>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	099b      	lsrs	r3, r3, #6
 8008dee:	f003 0301 	and.w	r3, r3, #1
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d022      	beq.n	8008e3c <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d119      	bne.n	8008e34 <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e0e:	d015      	beq.n	8008e3c <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e14:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008e18:	d108      	bne.n	8008e2c <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	685a      	ldr	r2, [r3, #4]
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008e28:	605a      	str	r2, [r3, #4]
 8008e2a:	e007      	b.n	8008e3c <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8008e2c:	68f8      	ldr	r0, [r7, #12]
 8008e2e:	f000 fbb3 	bl	8009598 <I2C_ITMasterSeqCplt>
 8008e32:	e003      	b.n	8008e3c <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008e34:	2140      	movs	r1, #64	; 0x40
 8008e36:	68f8      	ldr	r0, [r7, #12]
 8008e38:	f000 fdee 	bl	8009a18 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	095b      	lsrs	r3, r3, #5
 8008e40:	f003 0301 	and.w	r3, r3, #1
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d009      	beq.n	8008e5c <I2C_Master_ISR_IT+0x240>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	095b      	lsrs	r3, r3, #5
 8008e4c:	f003 0301 	and.w	r3, r3, #1
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d003      	beq.n	8008e5c <I2C_Master_ISR_IT+0x240>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8008e54:	6979      	ldr	r1, [r7, #20]
 8008e56:	68f8      	ldr	r0, [r7, #12]
 8008e58:	f000 fc18 	bl	800968c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008e64:	2300      	movs	r3, #0
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3718      	adds	r7, #24
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}

08008e6e <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8008e6e:	b580      	push	{r7, lr}
 8008e70:	b086      	sub	sp, #24
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	60f8      	str	r0, [r7, #12]
 8008e76:	60b9      	str	r1, [r7, #8]
 8008e78:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e7e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	d101      	bne.n	8008e92 <I2C_Slave_ISR_IT+0x24>
 8008e8e:	2302      	movs	r3, #2
 8008e90:	e0ec      	b.n	800906c <I2C_Slave_ISR_IT+0x1fe>
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	2201      	movs	r2, #1
 8008e96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008e9a:	693b      	ldr	r3, [r7, #16]
 8008e9c:	095b      	lsrs	r3, r3, #5
 8008e9e:	f003 0301 	and.w	r3, r3, #1
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d009      	beq.n	8008eba <I2C_Slave_ISR_IT+0x4c>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	095b      	lsrs	r3, r3, #5
 8008eaa:	f003 0301 	and.w	r3, r3, #1
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d003      	beq.n	8008eba <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8008eb2:	6939      	ldr	r1, [r7, #16]
 8008eb4:	68f8      	ldr	r0, [r7, #12]
 8008eb6:	f000 fc85 	bl	80097c4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008eba:	693b      	ldr	r3, [r7, #16]
 8008ebc:	091b      	lsrs	r3, r3, #4
 8008ebe:	f003 0301 	and.w	r3, r3, #1
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d04d      	beq.n	8008f62 <I2C_Slave_ISR_IT+0xf4>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	091b      	lsrs	r3, r3, #4
 8008eca:	f003 0301 	and.w	r3, r3, #1
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d047      	beq.n	8008f62 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ed6:	b29b      	uxth	r3, r3
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d128      	bne.n	8008f2e <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ee2:	b2db      	uxtb	r3, r3
 8008ee4:	2b28      	cmp	r3, #40	; 0x28
 8008ee6:	d108      	bne.n	8008efa <I2C_Slave_ISR_IT+0x8c>
 8008ee8:	697b      	ldr	r3, [r7, #20]
 8008eea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008eee:	d104      	bne.n	8008efa <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8008ef0:	6939      	ldr	r1, [r7, #16]
 8008ef2:	68f8      	ldr	r0, [r7, #12]
 8008ef4:	f000 fd3c 	bl	8009970 <I2C_ITListenCplt>
 8008ef8:	e032      	b.n	8008f60 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f00:	b2db      	uxtb	r3, r3
 8008f02:	2b29      	cmp	r3, #41	; 0x29
 8008f04:	d10e      	bne.n	8008f24 <I2C_Slave_ISR_IT+0xb6>
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008f0c:	d00a      	beq.n	8008f24 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	2210      	movs	r2, #16
 8008f14:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008f16:	68f8      	ldr	r0, [r7, #12]
 8008f18:	f000 fe3e 	bl	8009b98 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008f1c:	68f8      	ldr	r0, [r7, #12]
 8008f1e:	f000 fb78 	bl	8009612 <I2C_ITSlaveSeqCplt>
 8008f22:	e01d      	b.n	8008f60 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	2210      	movs	r2, #16
 8008f2a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8008f2c:	e096      	b.n	800905c <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	2210      	movs	r2, #16
 8008f34:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f3a:	f043 0204 	orr.w	r2, r3, #4
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008f42:	697b      	ldr	r3, [r7, #20]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d004      	beq.n	8008f52 <I2C_Slave_ISR_IT+0xe4>
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008f4e:	f040 8085 	bne.w	800905c <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f56:	4619      	mov	r1, r3
 8008f58:	68f8      	ldr	r0, [r7, #12]
 8008f5a:	f000 fd5d 	bl	8009a18 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8008f5e:	e07d      	b.n	800905c <I2C_Slave_ISR_IT+0x1ee>
 8008f60:	e07c      	b.n	800905c <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	089b      	lsrs	r3, r3, #2
 8008f66:	f003 0301 	and.w	r3, r3, #1
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d030      	beq.n	8008fd0 <I2C_Slave_ISR_IT+0x162>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	089b      	lsrs	r3, r3, #2
 8008f72:	f003 0301 	and.w	r3, r3, #1
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d02a      	beq.n	8008fd0 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f7e:	b29b      	uxth	r3, r3
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d018      	beq.n	8008fb6 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f8e:	b2d2      	uxtb	r2, r2
 8008f90:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f96:	1c5a      	adds	r2, r3, #1
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fa0:	3b01      	subs	r3, #1
 8008fa2:	b29a      	uxth	r2, r3
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fac:	b29b      	uxth	r3, r3
 8008fae:	3b01      	subs	r3, #1
 8008fb0:	b29a      	uxth	r2, r3
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fba:	b29b      	uxth	r3, r3
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d14f      	bne.n	8009060 <I2C_Slave_ISR_IT+0x1f2>
 8008fc0:	697b      	ldr	r3, [r7, #20]
 8008fc2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008fc6:	d04b      	beq.n	8009060 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8008fc8:	68f8      	ldr	r0, [r7, #12]
 8008fca:	f000 fb22 	bl	8009612 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8008fce:	e047      	b.n	8009060 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	08db      	lsrs	r3, r3, #3
 8008fd4:	f003 0301 	and.w	r3, r3, #1
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d00a      	beq.n	8008ff2 <I2C_Slave_ISR_IT+0x184>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	08db      	lsrs	r3, r3, #3
 8008fe0:	f003 0301 	and.w	r3, r3, #1
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d004      	beq.n	8008ff2 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8008fe8:	6939      	ldr	r1, [r7, #16]
 8008fea:	68f8      	ldr	r0, [r7, #12]
 8008fec:	f000 fa52 	bl	8009494 <I2C_ITAddrCplt>
 8008ff0:	e037      	b.n	8009062 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	085b      	lsrs	r3, r3, #1
 8008ff6:	f003 0301 	and.w	r3, r3, #1
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d031      	beq.n	8009062 <I2C_Slave_ISR_IT+0x1f4>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	085b      	lsrs	r3, r3, #1
 8009002:	f003 0301 	and.w	r3, r3, #1
 8009006:	2b00      	cmp	r3, #0
 8009008:	d02b      	beq.n	8009062 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800900e:	b29b      	uxth	r3, r3
 8009010:	2b00      	cmp	r3, #0
 8009012:	d018      	beq.n	8009046 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009018:	781a      	ldrb	r2, [r3, #0]
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009024:	1c5a      	adds	r2, r3, #1
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800902e:	b29b      	uxth	r3, r3
 8009030:	3b01      	subs	r3, #1
 8009032:	b29a      	uxth	r2, r3
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800903c:	3b01      	subs	r3, #1
 800903e:	b29a      	uxth	r2, r3
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	851a      	strh	r2, [r3, #40]	; 0x28
 8009044:	e00d      	b.n	8009062 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800904c:	d002      	beq.n	8009054 <I2C_Slave_ISR_IT+0x1e6>
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d106      	bne.n	8009062 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8009054:	68f8      	ldr	r0, [r7, #12]
 8009056:	f000 fadc 	bl	8009612 <I2C_ITSlaveSeqCplt>
 800905a:	e002      	b.n	8009062 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800905c:	bf00      	nop
 800905e:	e000      	b.n	8009062 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8009060:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	2200      	movs	r2, #0
 8009066:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800906a:	2300      	movs	r3, #0
}
 800906c:	4618      	mov	r0, r3
 800906e:	3718      	adds	r7, #24
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}

08009074 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b088      	sub	sp, #32
 8009078:	af02      	add	r7, sp, #8
 800907a:	60f8      	str	r0, [r7, #12]
 800907c:	60b9      	str	r1, [r7, #8]
 800907e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009086:	2b01      	cmp	r3, #1
 8009088:	d101      	bne.n	800908e <I2C_Master_ISR_DMA+0x1a>
 800908a:	2302      	movs	r3, #2
 800908c:	e0e1      	b.n	8009252 <I2C_Master_ISR_DMA+0x1de>
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	2201      	movs	r2, #1
 8009092:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	091b      	lsrs	r3, r3, #4
 800909a:	f003 0301 	and.w	r3, r3, #1
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d017      	beq.n	80090d2 <I2C_Master_ISR_DMA+0x5e>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	091b      	lsrs	r3, r3, #4
 80090a6:	f003 0301 	and.w	r3, r3, #1
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d011      	beq.n	80090d2 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	2210      	movs	r2, #16
 80090b4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090ba:	f043 0204 	orr.w	r2, r3, #4
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80090c2:	2112      	movs	r1, #18
 80090c4:	68f8      	ldr	r0, [r7, #12]
 80090c6:	f000 ff6b 	bl	8009fa0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80090ca:	68f8      	ldr	r0, [r7, #12]
 80090cc:	f000 fd64 	bl	8009b98 <I2C_Flush_TXDR>
 80090d0:	e0ba      	b.n	8009248 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	09db      	lsrs	r3, r3, #7
 80090d6:	f003 0301 	and.w	r3, r3, #1
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d072      	beq.n	80091c4 <I2C_Master_ISR_DMA+0x150>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	099b      	lsrs	r3, r3, #6
 80090e2:	f003 0301 	and.w	r3, r3, #1
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d06c      	beq.n	80091c4 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	681a      	ldr	r2, [r3, #0]
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80090f8:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090fe:	b29b      	uxth	r3, r3
 8009100:	2b00      	cmp	r3, #0
 8009102:	d04e      	beq.n	80091a2 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	685b      	ldr	r3, [r3, #4]
 800910a:	b29b      	uxth	r3, r3
 800910c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009110:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009116:	b29b      	uxth	r3, r3
 8009118:	2bff      	cmp	r3, #255	; 0xff
 800911a:	d906      	bls.n	800912a <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	22ff      	movs	r2, #255	; 0xff
 8009120:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8009122:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009126:	617b      	str	r3, [r7, #20]
 8009128:	e010      	b.n	800914c <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800912e:	b29a      	uxth	r2, r3
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009138:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800913c:	d003      	beq.n	8009146 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009142:	617b      	str	r3, [r7, #20]
 8009144:	e002      	b.n	800914c <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8009146:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800914a:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009150:	b2da      	uxtb	r2, r3
 8009152:	8a79      	ldrh	r1, [r7, #18]
 8009154:	2300      	movs	r3, #0
 8009156:	9300      	str	r3, [sp, #0]
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	68f8      	ldr	r0, [r7, #12]
 800915c:	f000 fef2 	bl	8009f44 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009164:	b29a      	uxth	r2, r3
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800916a:	1ad3      	subs	r3, r2, r3
 800916c:	b29a      	uxth	r2, r3
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009178:	b2db      	uxtb	r3, r3
 800917a:	2b22      	cmp	r3, #34	; 0x22
 800917c:	d108      	bne.n	8009190 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	681a      	ldr	r2, [r3, #0]
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800918c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800918e:	e05b      	b.n	8009248 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	681a      	ldr	r2, [r3, #0]
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800919e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80091a0:	e052      	b.n	8009248 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	685b      	ldr	r3, [r3, #4]
 80091a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80091b0:	d003      	beq.n	80091ba <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80091b2:	68f8      	ldr	r0, [r7, #12]
 80091b4:	f000 f9f0 	bl	8009598 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80091b8:	e046      	b.n	8009248 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80091ba:	2140      	movs	r1, #64	; 0x40
 80091bc:	68f8      	ldr	r0, [r7, #12]
 80091be:	f000 fc2b 	bl	8009a18 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80091c2:	e041      	b.n	8009248 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	099b      	lsrs	r3, r3, #6
 80091c8:	f003 0301 	and.w	r3, r3, #1
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d029      	beq.n	8009224 <I2C_Master_ISR_DMA+0x1b0>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	099b      	lsrs	r3, r3, #6
 80091d4:	f003 0301 	and.w	r3, r3, #1
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d023      	beq.n	8009224 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091e0:	b29b      	uxth	r3, r3
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d119      	bne.n	800921a <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	685b      	ldr	r3, [r3, #4]
 80091ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80091f4:	d027      	beq.n	8009246 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091fa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80091fe:	d108      	bne.n	8009212 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	685a      	ldr	r2, [r3, #4]
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800920e:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8009210:	e019      	b.n	8009246 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8009212:	68f8      	ldr	r0, [r7, #12]
 8009214:	f000 f9c0 	bl	8009598 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8009218:	e015      	b.n	8009246 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800921a:	2140      	movs	r1, #64	; 0x40
 800921c:	68f8      	ldr	r0, [r7, #12]
 800921e:	f000 fbfb 	bl	8009a18 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8009222:	e010      	b.n	8009246 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	095b      	lsrs	r3, r3, #5
 8009228:	f003 0301 	and.w	r3, r3, #1
 800922c:	2b00      	cmp	r3, #0
 800922e:	d00b      	beq.n	8009248 <I2C_Master_ISR_DMA+0x1d4>
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	095b      	lsrs	r3, r3, #5
 8009234:	f003 0301 	and.w	r3, r3, #1
 8009238:	2b00      	cmp	r3, #0
 800923a:	d005      	beq.n	8009248 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800923c:	68b9      	ldr	r1, [r7, #8]
 800923e:	68f8      	ldr	r0, [r7, #12]
 8009240:	f000 fa24 	bl	800968c <I2C_ITMasterCplt>
 8009244:	e000      	b.n	8009248 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8009246:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	2200      	movs	r2, #0
 800924c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009250:	2300      	movs	r3, #0
}
 8009252:	4618      	mov	r0, r3
 8009254:	3718      	adds	r7, #24
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}

0800925a <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800925a:	b580      	push	{r7, lr}
 800925c:	b086      	sub	sp, #24
 800925e:	af00      	add	r7, sp, #0
 8009260:	60f8      	str	r0, [r7, #12]
 8009262:	60b9      	str	r1, [r7, #8]
 8009264:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800926a:	613b      	str	r3, [r7, #16]
  uint32_t treatdmanack = 0U;
 800926c:	2300      	movs	r3, #0
 800926e:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009276:	2b01      	cmp	r3, #1
 8009278:	d101      	bne.n	800927e <I2C_Slave_ISR_DMA+0x24>
 800927a:	2302      	movs	r3, #2
 800927c:	e0b1      	b.n	80093e2 <I2C_Slave_ISR_DMA+0x188>
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	2201      	movs	r2, #1
 8009282:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	095b      	lsrs	r3, r3, #5
 800928a:	f003 0301 	and.w	r3, r3, #1
 800928e:	2b00      	cmp	r3, #0
 8009290:	d009      	beq.n	80092a6 <I2C_Slave_ISR_DMA+0x4c>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	095b      	lsrs	r3, r3, #5
 8009296:	f003 0301 	and.w	r3, r3, #1
 800929a:	2b00      	cmp	r3, #0
 800929c:	d003      	beq.n	80092a6 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800929e:	68b9      	ldr	r1, [r7, #8]
 80092a0:	68f8      	ldr	r0, [r7, #12]
 80092a2:	f000 fa8f 	bl	80097c4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	091b      	lsrs	r3, r3, #4
 80092aa:	f003 0301 	and.w	r3, r3, #1
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	f000 8082 	beq.w	80093b8 <I2C_Slave_ISR_DMA+0x15e>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	091b      	lsrs	r3, r3, #4
 80092b8:	f003 0301 	and.w	r3, r3, #1
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d07b      	beq.n	80093b8 <I2C_Slave_ISR_DMA+0x15e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	0b9b      	lsrs	r3, r3, #14
 80092c4:	f003 0301 	and.w	r3, r3, #1
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d105      	bne.n	80092d8 <I2C_Slave_ISR_DMA+0x7e>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	0bdb      	lsrs	r3, r3, #15
 80092d0:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d068      	beq.n	80093aa <I2C_Slave_ISR_DMA+0x150>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d00d      	beq.n	80092fc <I2C_Slave_ISR_DMA+0xa2>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	0bdb      	lsrs	r3, r3, #15
 80092e4:	f003 0301 	and.w	r3, r3, #1
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d007      	beq.n	80092fc <I2C_Slave_ISR_DMA+0xa2>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	685b      	ldr	r3, [r3, #4]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d101      	bne.n	80092fc <I2C_Slave_ISR_DMA+0xa2>
          {
            treatdmanack = 1U;
 80092f8:	2301      	movs	r3, #1
 80092fa:	617b      	str	r3, [r7, #20]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009300:	2b00      	cmp	r3, #0
 8009302:	d00d      	beq.n	8009320 <I2C_Slave_ISR_DMA+0xc6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	0b9b      	lsrs	r3, r3, #14
 8009308:	f003 0301 	and.w	r3, r3, #1
 800930c:	2b00      	cmp	r3, #0
 800930e:	d007      	beq.n	8009320 <I2C_Slave_ISR_DMA+0xc6>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	685b      	ldr	r3, [r3, #4]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d101      	bne.n	8009320 <I2C_Slave_ISR_DMA+0xc6>
          {
            treatdmanack = 1U;
 800931c:	2301      	movs	r3, #1
 800931e:	617b      	str	r3, [r7, #20]
          }
        }
      }

      if (treatdmanack == 1U)
 8009320:	697b      	ldr	r3, [r7, #20]
 8009322:	2b01      	cmp	r3, #1
 8009324:	d128      	bne.n	8009378 <I2C_Slave_ISR_DMA+0x11e>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800932c:	b2db      	uxtb	r3, r3
 800932e:	2b28      	cmp	r3, #40	; 0x28
 8009330:	d108      	bne.n	8009344 <I2C_Slave_ISR_DMA+0xea>
 8009332:	693b      	ldr	r3, [r7, #16]
 8009334:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009338:	d104      	bne.n	8009344 <I2C_Slave_ISR_DMA+0xea>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800933a:	68b9      	ldr	r1, [r7, #8]
 800933c:	68f8      	ldr	r0, [r7, #12]
 800933e:	f000 fb17 	bl	8009970 <I2C_ITListenCplt>
 8009342:	e031      	b.n	80093a8 <I2C_Slave_ISR_DMA+0x14e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800934a:	b2db      	uxtb	r3, r3
 800934c:	2b29      	cmp	r3, #41	; 0x29
 800934e:	d10e      	bne.n	800936e <I2C_Slave_ISR_DMA+0x114>
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009356:	d00a      	beq.n	800936e <I2C_Slave_ISR_DMA+0x114>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	2210      	movs	r2, #16
 800935e:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8009360:	68f8      	ldr	r0, [r7, #12]
 8009362:	f000 fc19 	bl	8009b98 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8009366:	68f8      	ldr	r0, [r7, #12]
 8009368:	f000 f953 	bl	8009612 <I2C_ITSlaveSeqCplt>
 800936c:	e01c      	b.n	80093a8 <I2C_Slave_ISR_DMA+0x14e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	2210      	movs	r2, #16
 8009374:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8009376:	e01d      	b.n	80093b4 <I2C_Slave_ISR_DMA+0x15a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	2210      	movs	r2, #16
 800937e:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009384:	f043 0204 	orr.w	r2, r3, #4
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	645a      	str	r2, [r3, #68]	; 0x44

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d003      	beq.n	800939a <I2C_Slave_ISR_DMA+0x140>
 8009392:	693b      	ldr	r3, [r7, #16]
 8009394:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009398:	d10c      	bne.n	80093b4 <I2C_Slave_ISR_DMA+0x15a>
        {
          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800939e:	4619      	mov	r1, r3
 80093a0:	68f8      	ldr	r0, [r7, #12]
 80093a2:	f000 fb39 	bl	8009a18 <I2C_ITError>
      if (treatdmanack == 1U)
 80093a6:	e005      	b.n	80093b4 <I2C_Slave_ISR_DMA+0x15a>
 80093a8:	e004      	b.n	80093b4 <I2C_Slave_ISR_DMA+0x15a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	2210      	movs	r2, #16
 80093b0:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80093b2:	e011      	b.n	80093d8 <I2C_Slave_ISR_DMA+0x17e>
      if (treatdmanack == 1U)
 80093b4:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80093b6:	e00f      	b.n	80093d8 <I2C_Slave_ISR_DMA+0x17e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	08db      	lsrs	r3, r3, #3
 80093bc:	f003 0301 	and.w	r3, r3, #1
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d009      	beq.n	80093d8 <I2C_Slave_ISR_DMA+0x17e>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	08db      	lsrs	r3, r3, #3
 80093c8:	f003 0301 	and.w	r3, r3, #1
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d003      	beq.n	80093d8 <I2C_Slave_ISR_DMA+0x17e>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80093d0:	68b9      	ldr	r1, [r7, #8]
 80093d2:	68f8      	ldr	r0, [r7, #12]
 80093d4:	f000 f85e 	bl	8009494 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	2200      	movs	r2, #0
 80093dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80093e0:	2300      	movs	r3, #0
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3718      	adds	r7, #24
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}
	...

080093ec <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b086      	sub	sp, #24
 80093f0:	af02      	add	r7, sp, #8
 80093f2:	60f8      	str	r0, [r7, #12]
 80093f4:	4608      	mov	r0, r1
 80093f6:	4611      	mov	r1, r2
 80093f8:	461a      	mov	r2, r3
 80093fa:	4603      	mov	r3, r0
 80093fc:	817b      	strh	r3, [r7, #10]
 80093fe:	460b      	mov	r3, r1
 8009400:	813b      	strh	r3, [r7, #8]
 8009402:	4613      	mov	r3, r2
 8009404:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009406:	88fb      	ldrh	r3, [r7, #6]
 8009408:	b2da      	uxtb	r2, r3
 800940a:	8979      	ldrh	r1, [r7, #10]
 800940c:	4b20      	ldr	r3, [pc, #128]	; (8009490 <I2C_RequestMemoryWrite+0xa4>)
 800940e:	9300      	str	r3, [sp, #0]
 8009410:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009414:	68f8      	ldr	r0, [r7, #12]
 8009416:	f000 fd95 	bl	8009f44 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800941a:	69fa      	ldr	r2, [r7, #28]
 800941c:	69b9      	ldr	r1, [r7, #24]
 800941e:	68f8      	ldr	r0, [r7, #12]
 8009420:	f000 fc42 	bl	8009ca8 <I2C_WaitOnTXISFlagUntilTimeout>
 8009424:	4603      	mov	r3, r0
 8009426:	2b00      	cmp	r3, #0
 8009428:	d001      	beq.n	800942e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800942a:	2301      	movs	r3, #1
 800942c:	e02c      	b.n	8009488 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800942e:	88fb      	ldrh	r3, [r7, #6]
 8009430:	2b01      	cmp	r3, #1
 8009432:	d105      	bne.n	8009440 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009434:	893b      	ldrh	r3, [r7, #8]
 8009436:	b2da      	uxtb	r2, r3
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	629a      	str	r2, [r3, #40]	; 0x28
 800943e:	e015      	b.n	800946c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009440:	893b      	ldrh	r3, [r7, #8]
 8009442:	0a1b      	lsrs	r3, r3, #8
 8009444:	b29b      	uxth	r3, r3
 8009446:	b2da      	uxtb	r2, r3
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800944e:	69fa      	ldr	r2, [r7, #28]
 8009450:	69b9      	ldr	r1, [r7, #24]
 8009452:	68f8      	ldr	r0, [r7, #12]
 8009454:	f000 fc28 	bl	8009ca8 <I2C_WaitOnTXISFlagUntilTimeout>
 8009458:	4603      	mov	r3, r0
 800945a:	2b00      	cmp	r3, #0
 800945c:	d001      	beq.n	8009462 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800945e:	2301      	movs	r3, #1
 8009460:	e012      	b.n	8009488 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009462:	893b      	ldrh	r3, [r7, #8]
 8009464:	b2da      	uxtb	r2, r3
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800946c:	69fb      	ldr	r3, [r7, #28]
 800946e:	9300      	str	r3, [sp, #0]
 8009470:	69bb      	ldr	r3, [r7, #24]
 8009472:	2200      	movs	r2, #0
 8009474:	2180      	movs	r1, #128	; 0x80
 8009476:	68f8      	ldr	r0, [r7, #12]
 8009478:	f000 fbd6 	bl	8009c28 <I2C_WaitOnFlagUntilTimeout>
 800947c:	4603      	mov	r3, r0
 800947e:	2b00      	cmp	r3, #0
 8009480:	d001      	beq.n	8009486 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8009482:	2301      	movs	r3, #1
 8009484:	e000      	b.n	8009488 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8009486:	2300      	movs	r3, #0
}
 8009488:	4618      	mov	r0, r3
 800948a:	3710      	adds	r7, #16
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}
 8009490:	80002000 	.word	0x80002000

08009494 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b084      	sub	sp, #16
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80094a4:	b2db      	uxtb	r3, r3
 80094a6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80094aa:	2b28      	cmp	r3, #40	; 0x28
 80094ac:	d168      	bne.n	8009580 <I2C_ITAddrCplt+0xec>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	699b      	ldr	r3, [r3, #24]
 80094b4:	0c1b      	lsrs	r3, r3, #16
 80094b6:	b2db      	uxtb	r3, r3
 80094b8:	f003 0301 	and.w	r3, r3, #1
 80094bc:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	699b      	ldr	r3, [r3, #24]
 80094c4:	0c1b      	lsrs	r3, r3, #16
 80094c6:	b29b      	uxth	r3, r3
 80094c8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80094cc:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	689b      	ldr	r3, [r3, #8]
 80094d4:	b29b      	uxth	r3, r3
 80094d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80094da:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	68db      	ldr	r3, [r3, #12]
 80094e2:	b29b      	uxth	r3, r3
 80094e4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80094e8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	68db      	ldr	r3, [r3, #12]
 80094ee:	2b02      	cmp	r3, #2
 80094f0:	d137      	bne.n	8009562 <I2C_ITAddrCplt+0xce>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 80094f2:	897b      	ldrh	r3, [r7, #10]
 80094f4:	09db      	lsrs	r3, r3, #7
 80094f6:	b29a      	uxth	r2, r3
 80094f8:	89bb      	ldrh	r3, [r7, #12]
 80094fa:	4053      	eors	r3, r2
 80094fc:	b29b      	uxth	r3, r3
 80094fe:	f003 0306 	and.w	r3, r3, #6
 8009502:	2b00      	cmp	r3, #0
 8009504:	d11c      	bne.n	8009540 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8009506:	897b      	ldrh	r3, [r7, #10]
 8009508:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800950e:	1c5a      	adds	r2, r3, #1
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009518:	2b02      	cmp	r3, #2
 800951a:	d139      	bne.n	8009590 <I2C_ITAddrCplt+0xfc>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2200      	movs	r2, #0
 8009520:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	2208      	movs	r2, #8
 8009528:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2200      	movs	r2, #0
 800952e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8009532:	89ba      	ldrh	r2, [r7, #12]
 8009534:	7bfb      	ldrb	r3, [r7, #15]
 8009536:	4619      	mov	r1, r3
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f7ff fb2f 	bl	8008b9c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800953e:	e027      	b.n	8009590 <I2C_ITAddrCplt+0xfc>
        slaveaddrcode = ownadd2code;
 8009540:	893b      	ldrh	r3, [r7, #8]
 8009542:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8009544:	2104      	movs	r1, #4
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f000 fd98 	bl	800a07c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2200      	movs	r2, #0
 8009550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8009554:	89ba      	ldrh	r2, [r7, #12]
 8009556:	7bfb      	ldrb	r3, [r7, #15]
 8009558:	4619      	mov	r1, r3
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f7ff fb1e 	bl	8008b9c <HAL_I2C_AddrCallback>
}
 8009560:	e016      	b.n	8009590 <I2C_ITAddrCplt+0xfc>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8009562:	2104      	movs	r1, #4
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f000 fd89 	bl	800a07c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2200      	movs	r2, #0
 800956e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8009572:	89ba      	ldrh	r2, [r7, #12]
 8009574:	7bfb      	ldrb	r3, [r7, #15]
 8009576:	4619      	mov	r1, r3
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f7ff fb0f 	bl	8008b9c <HAL_I2C_AddrCallback>
}
 800957e:	e007      	b.n	8009590 <I2C_ITAddrCplt+0xfc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	2208      	movs	r2, #8
 8009586:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2200      	movs	r2, #0
 800958c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8009590:	bf00      	nop
 8009592:	3710      	adds	r7, #16
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}

08009598 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b082      	sub	sp, #8
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2200      	movs	r2, #0
 80095a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80095ae:	b2db      	uxtb	r3, r3
 80095b0:	2b21      	cmp	r3, #33	; 0x21
 80095b2:	d115      	bne.n	80095e0 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2220      	movs	r2, #32
 80095b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2211      	movs	r2, #17
 80095c0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2200      	movs	r2, #0
 80095c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80095c8:	2101      	movs	r1, #1
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f000 fd56 	bl	800a07c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2200      	movs	r2, #0
 80095d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f7fa fc25 	bl	8003e28 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80095de:	e014      	b.n	800960a <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2220      	movs	r2, #32
 80095e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2212      	movs	r2, #18
 80095ec:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2200      	movs	r2, #0
 80095f2:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80095f4:	2102      	movs	r1, #2
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f000 fd40 	bl	800a07c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2200      	movs	r2, #0
 8009600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f7fa fc25 	bl	8003e54 <HAL_I2C_MasterRxCpltCallback>
}
 800960a:	bf00      	nop
 800960c:	3708      	adds	r7, #8
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}

08009612 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8009612:	b580      	push	{r7, lr}
 8009614:	b082      	sub	sp, #8
 8009616:	af00      	add	r7, sp, #0
 8009618:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2200      	movs	r2, #0
 800961e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009628:	b2db      	uxtb	r3, r3
 800962a:	2b29      	cmp	r3, #41	; 0x29
 800962c:	d112      	bne.n	8009654 <I2C_ITSlaveSeqCplt+0x42>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2228      	movs	r2, #40	; 0x28
 8009632:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2221      	movs	r2, #33	; 0x21
 800963a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800963c:	2101      	movs	r1, #1
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f000 fd1c 	bl	800a07c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2200      	movs	r2, #0
 8009648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f7ff fa91 	bl	8008b74 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009652:	e017      	b.n	8009684 <I2C_ITSlaveSeqCplt+0x72>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800965a:	b2db      	uxtb	r3, r3
 800965c:	2b2a      	cmp	r3, #42	; 0x2a
 800965e:	d111      	bne.n	8009684 <I2C_ITSlaveSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2228      	movs	r2, #40	; 0x28
 8009664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2222      	movs	r2, #34	; 0x22
 800966c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800966e:	2102      	movs	r1, #2
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f000 fd03 	bl	800a07c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2200      	movs	r2, #0
 800967a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f7ff fa82 	bl	8008b88 <HAL_I2C_SlaveRxCpltCallback>
}
 8009684:	bf00      	nop
 8009686:	3708      	adds	r7, #8
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}

0800968c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b084      	sub	sp, #16
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
 8009694:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	2220      	movs	r2, #32
 800969c:	61da      	str	r2, [r3, #28]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	6859      	ldr	r1, [r3, #4]
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681a      	ldr	r2, [r3, #0]
 80096a8:	4b44      	ldr	r3, [pc, #272]	; (80097bc <I2C_ITMasterCplt+0x130>)
 80096aa:	400b      	ands	r3, r1
 80096ac:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->PreviousState = I2C_STATE_NONE;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2200      	movs	r2, #0
 80096b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->XferISR       = NULL;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2200      	movs	r2, #0
 80096b8:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	4a40      	ldr	r2, [pc, #256]	; (80097c0 <I2C_ITMasterCplt+0x134>)
 80096be:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET)
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	091b      	lsrs	r3, r3, #4
 80096c4:	f003 0301 	and.w	r3, r3, #1
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d009      	beq.n	80096e0 <I2C_ITMasterCplt+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	2210      	movs	r2, #16
 80096d2:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096d8:	f043 0204 	orr.w	r2, r3, #4
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f000 fa59 	bl	8009b98 <I2C_Flush_TXDR>

  /* Disable Interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80096e6:	2103      	movs	r1, #3
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f000 fcc7 	bl	800a07c <I2C_Disable_IRQ>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096f2:	60fb      	str	r3, [r7, #12]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80096fa:	b2db      	uxtb	r3, r3
 80096fc:	2b60      	cmp	r3, #96	; 0x60
 80096fe:	d002      	beq.n	8009706 <I2C_ITMasterCplt+0x7a>
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d006      	beq.n	8009714 <I2C_ITMasterCplt+0x88>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800970a:	4619      	mov	r1, r3
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f000 f983 	bl	8009a18 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009712:	e04e      	b.n	80097b2 <I2C_ITMasterCplt+0x126>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800971a:	b2db      	uxtb	r3, r3
 800971c:	2b21      	cmp	r3, #33	; 0x21
 800971e:	d121      	bne.n	8009764 <I2C_ITMasterCplt+0xd8>
    hi2c->State = HAL_I2C_STATE_READY;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2220      	movs	r2, #32
 8009724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800972e:	b2db      	uxtb	r3, r3
 8009730:	2b40      	cmp	r3, #64	; 0x40
 8009732:	d10b      	bne.n	800974c <I2C_ITMasterCplt+0xc0>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2200      	movs	r2, #0
 8009738:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2200      	movs	r2, #0
 8009740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f7ff fa41 	bl	8008bcc <HAL_I2C_MemTxCpltCallback>
}
 800974a:	e032      	b.n	80097b2 <I2C_ITMasterCplt+0x126>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2200      	movs	r2, #0
 8009750:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2200      	movs	r2, #0
 8009758:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f7fa fb63 	bl	8003e28 <HAL_I2C_MasterTxCpltCallback>
}
 8009762:	e026      	b.n	80097b2 <I2C_ITMasterCplt+0x126>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800976a:	b2db      	uxtb	r3, r3
 800976c:	2b22      	cmp	r3, #34	; 0x22
 800976e:	d120      	bne.n	80097b2 <I2C_ITMasterCplt+0x126>
    hi2c->State = HAL_I2C_STATE_READY;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2220      	movs	r2, #32
 8009774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800977e:	b2db      	uxtb	r3, r3
 8009780:	2b40      	cmp	r3, #64	; 0x40
 8009782:	d10b      	bne.n	800979c <I2C_ITMasterCplt+0x110>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2200      	movs	r2, #0
 8009788:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2200      	movs	r2, #0
 8009790:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f7ff fa23 	bl	8008be0 <HAL_I2C_MemRxCpltCallback>
}
 800979a:	e00a      	b.n	80097b2 <I2C_ITMasterCplt+0x126>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2200      	movs	r2, #0
 80097a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2200      	movs	r2, #0
 80097a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	f7fa fb51 	bl	8003e54 <HAL_I2C_MasterRxCpltCallback>
}
 80097b2:	bf00      	nop
 80097b4:	3710      	adds	r7, #16
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}
 80097ba:	bf00      	nop
 80097bc:	fe00e800 	.word	0xfe00e800
 80097c0:	ffff0000 	.word	0xffff0000

080097c4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b084      	sub	sp, #16
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
 80097cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	60bb      	str	r3, [r7, #8]
  uint32_t tmpITFlags = ITFlags;
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	60fb      	str	r3, [r7, #12]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	2220      	movs	r2, #32
 80097e0:	61da      	str	r2, [r3, #28]

  /* Disable all interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80097e2:	2107      	movs	r1, #7
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f000 fc49 	bl	800a07c <I2C_Disable_IRQ>

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	685a      	ldr	r2, [r3, #4]
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80097f8:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	6859      	ldr	r1, [r3, #4]
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681a      	ldr	r2, [r3, #0]
 8009804:	4b58      	ldr	r3, [pc, #352]	; (8009968 <I2C_ITSlaveCplt+0x1a4>)
 8009806:	400b      	ands	r3, r1
 8009808:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f000 f9c4 	bl	8009b98 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	0b9b      	lsrs	r3, r3, #14
 8009814:	f003 0301 	and.w	r3, r3, #1
 8009818:	2b00      	cmp	r3, #0
 800981a:	d00b      	beq.n	8009834 <I2C_ITSlaveCplt+0x70>
  {
    if (hi2c->hdmatx != NULL)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009820:	2b00      	cmp	r3, #0
 8009822:	d018      	beq.n	8009856 <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	685b      	ldr	r3, [r3, #4]
 800982c:	b29a      	uxth	r2, r3
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009832:	e010      	b.n	8009856 <I2C_ITSlaveCplt+0x92>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	0bdb      	lsrs	r3, r3, #15
 8009838:	f003 0301 	and.w	r3, r3, #1
 800983c:	2b00      	cmp	r3, #0
 800983e:	d00a      	beq.n	8009856 <I2C_ITSlaveCplt+0x92>
  {
    if (hi2c->hdmarx != NULL)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009844:	2b00      	cmp	r3, #0
 8009846:	d006      	beq.n	8009856 <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	685b      	ldr	r3, [r3, #4]
 8009850:	b29a      	uxth	r2, r3
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	089b      	lsrs	r3, r3, #2
 800985a:	f003 0301 	and.w	r3, r3, #1
 800985e:	2b00      	cmp	r3, #0
 8009860:	d020      	beq.n	80098a4 <I2C_ITSlaveCplt+0xe0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	f023 0304 	bic.w	r3, r3, #4
 8009868:	60fb      	str	r3, [r7, #12]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009874:	b2d2      	uxtb	r2, r2
 8009876:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800987c:	1c5a      	adds	r2, r3, #1
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009886:	2b00      	cmp	r3, #0
 8009888:	d00c      	beq.n	80098a4 <I2C_ITSlaveCplt+0xe0>
    {
      hi2c->XferSize--;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800988e:	3b01      	subs	r3, #1
 8009890:	b29a      	uxth	r2, r3
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800989a:	b29b      	uxth	r3, r3
 800989c:	3b01      	subs	r3, #1
 800989e:	b29a      	uxth	r2, r3
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098a8:	b29b      	uxth	r3, r3
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d005      	beq.n	80098ba <I2C_ITSlaveCplt+0xf6>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098b2:	f043 0204 	orr.w	r2, r3, #4
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->PreviousState = I2C_STATE_NONE;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2200      	movs	r2, #0
 80098be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2200      	movs	r2, #0
 80098c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2200      	movs	r2, #0
 80098cc:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d010      	beq.n	80098f8 <I2C_ITSlaveCplt+0x134>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098da:	4619      	mov	r1, r3
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f000 f89b 	bl	8009a18 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80098e8:	b2db      	uxtb	r3, r3
 80098ea:	2b28      	cmp	r3, #40	; 0x28
 80098ec:	d138      	bne.n	8009960 <I2C_ITSlaveCplt+0x19c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80098ee:	68f9      	ldr	r1, [r7, #12]
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f000 f83d 	bl	8009970 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80098f6:	e033      	b.n	8009960 <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009900:	d011      	beq.n	8009926 <I2C_ITSlaveCplt+0x162>
    I2C_ITSlaveSeqCplt(hi2c);
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	f7ff fe85 	bl	8009612 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	4a18      	ldr	r2, [pc, #96]	; (800996c <I2C_ITSlaveCplt+0x1a8>)
 800990c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2220      	movs	r2, #32
 8009912:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2200      	movs	r2, #0
 800991a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f7ff f94a 	bl	8008bb8 <HAL_I2C_ListenCpltCallback>
}
 8009924:	e01c      	b.n	8009960 <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800992c:	b2db      	uxtb	r3, r3
 800992e:	2b22      	cmp	r3, #34	; 0x22
 8009930:	d10b      	bne.n	800994a <I2C_ITSlaveCplt+0x186>
    hi2c->State = HAL_I2C_STATE_READY;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2220      	movs	r2, #32
 8009936:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2200      	movs	r2, #0
 800993e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f7ff f920 	bl	8008b88 <HAL_I2C_SlaveRxCpltCallback>
}
 8009948:	e00a      	b.n	8009960 <I2C_ITSlaveCplt+0x19c>
    hi2c->State = HAL_I2C_STATE_READY;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2220      	movs	r2, #32
 800994e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2200      	movs	r2, #0
 8009956:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f7ff f90a 	bl	8008b74 <HAL_I2C_SlaveTxCpltCallback>
}
 8009960:	bf00      	nop
 8009962:	3710      	adds	r7, #16
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}
 8009968:	fe00e800 	.word	0xfe00e800
 800996c:	ffff0000 	.word	0xffff0000

08009970 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b082      	sub	sp, #8
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
 8009978:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	4a25      	ldr	r2, [pc, #148]	; (8009a14 <I2C_ITListenCplt+0xa4>)
 800997e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2200      	movs	r2, #0
 8009984:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2220      	movs	r2, #32
 800998a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2200      	movs	r2, #0
 8009992:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2200      	movs	r2, #0
 800999a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	089b      	lsrs	r3, r3, #2
 80099a0:	f003 0301 	and.w	r3, r3, #1
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d022      	beq.n	80099ee <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099b2:	b2d2      	uxtb	r2, r2
 80099b4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ba:	1c5a      	adds	r2, r3, #1
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d012      	beq.n	80099ee <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099cc:	3b01      	subs	r3, #1
 80099ce:	b29a      	uxth	r2, r3
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099d8:	b29b      	uxth	r3, r3
 80099da:	3b01      	subs	r3, #1
 80099dc:	b29a      	uxth	r2, r3
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099e6:	f043 0204 	orr.w	r2, r3, #4
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80099ee:	2107      	movs	r1, #7
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	f000 fb43 	bl	800a07c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	2210      	movs	r2, #16
 80099fc:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2200      	movs	r2, #0
 8009a02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f7ff f8d6 	bl	8008bb8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8009a0c:	bf00      	nop
 8009a0e:	3708      	adds	r7, #8
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}
 8009a14:	ffff0000 	.word	0xffff0000

08009a18 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b084      	sub	sp, #16
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
 8009a20:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a28:	73fb      	strb	r3, [r7, #15]

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	4a55      	ldr	r2, [pc, #340]	; (8009b8c <I2C_ITError+0x174>)
 8009a36:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	431a      	orrs	r2, r3
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8009a4a:	7bfb      	ldrb	r3, [r7, #15]
 8009a4c:	2b28      	cmp	r3, #40	; 0x28
 8009a4e:	d005      	beq.n	8009a5c <I2C_ITError+0x44>
 8009a50:	7bfb      	ldrb	r3, [r7, #15]
 8009a52:	2b29      	cmp	r3, #41	; 0x29
 8009a54:	d002      	beq.n	8009a5c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8009a56:	7bfb      	ldrb	r3, [r7, #15]
 8009a58:	2b2a      	cmp	r3, #42	; 0x2a
 8009a5a:	d10e      	bne.n	8009a7a <I2C_ITError+0x62>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009a5c:	2103      	movs	r1, #3
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f000 fb0c 	bl	800a07c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2228      	movs	r2, #40	; 0x28
 8009a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	4a46      	ldr	r2, [pc, #280]	; (8009b90 <I2C_ITError+0x178>)
 8009a76:	635a      	str	r2, [r3, #52]	; 0x34
 8009a78:	e013      	b.n	8009aa2 <I2C_ITError+0x8a>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009a7a:	2107      	movs	r1, #7
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f000 fafd 	bl	800a07c <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a88:	b2db      	uxtb	r3, r3
 8009a8a:	2b60      	cmp	r3, #96	; 0x60
 8009a8c:	d003      	beq.n	8009a96 <I2C_ITError+0x7e>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2220      	movs	r2, #32
 8009a92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2200      	movs	r2, #0
 8009a9a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009aac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009ab0:	d123      	bne.n	8009afa <I2C_ITError+0xe2>
  {
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	681a      	ldr	r2, [r3, #0]
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009ac0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d05c      	beq.n	8009b84 <I2C_ITError+0x16c>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ace:	4a31      	ldr	r2, [pc, #196]	; (8009b94 <I2C_ITError+0x17c>)
 8009ad0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f7fe f8e2 	bl	8007ca8 <HAL_DMA_Abort_IT>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d04c      	beq.n	8009b84 <I2C_ITError+0x16c>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009af0:	687a      	ldr	r2, [r7, #4]
 8009af2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009af4:	4610      	mov	r0, r2
 8009af6:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009af8:	e044      	b.n	8009b84 <I2C_ITError+0x16c>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009b04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b08:	d123      	bne.n	8009b52 <I2C_ITError+0x13a>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	681a      	ldr	r2, [r3, #0]
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009b18:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d030      	beq.n	8009b84 <I2C_ITError+0x16c>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b26:	4a1b      	ldr	r2, [pc, #108]	; (8009b94 <I2C_ITError+0x17c>)
 8009b28:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b36:	4618      	mov	r0, r3
 8009b38:	f7fe f8b6 	bl	8007ca8 <HAL_DMA_Abort_IT>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d020      	beq.n	8009b84 <I2C_ITError+0x16c>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b48:	687a      	ldr	r2, [r7, #4]
 8009b4a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009b4c:	4610      	mov	r0, r2
 8009b4e:	4798      	blx	r3
}
 8009b50:	e018      	b.n	8009b84 <I2C_ITError+0x16c>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b58:	b2db      	uxtb	r3, r3
 8009b5a:	2b60      	cmp	r3, #96	; 0x60
 8009b5c:	d10b      	bne.n	8009b76 <I2C_ITError+0x15e>
    hi2c->State = HAL_I2C_STATE_READY;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2220      	movs	r2, #32
 8009b62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f7ff f84a 	bl	8008c08 <HAL_I2C_AbortCpltCallback>
}
 8009b74:	e006      	b.n	8009b84 <I2C_ITError+0x16c>
    __HAL_UNLOCK(hi2c);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f7ff f838 	bl	8008bf4 <HAL_I2C_ErrorCallback>
}
 8009b84:	bf00      	nop
 8009b86:	3710      	adds	r7, #16
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd80      	pop	{r7, pc}
 8009b8c:	ffff0000 	.word	0xffff0000
 8009b90:	08008e6f 	.word	0x08008e6f
 8009b94:	08009be1 	.word	0x08009be1

08009b98 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b083      	sub	sp, #12
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	699b      	ldr	r3, [r3, #24]
 8009ba6:	f003 0302 	and.w	r3, r3, #2
 8009baa:	2b02      	cmp	r3, #2
 8009bac:	d103      	bne.n	8009bb6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	699b      	ldr	r3, [r3, #24]
 8009bbc:	f003 0301 	and.w	r3, r3, #1
 8009bc0:	2b01      	cmp	r3, #1
 8009bc2:	d007      	beq.n	8009bd4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	699a      	ldr	r2, [r3, #24]
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f042 0201 	orr.w	r2, r2, #1
 8009bd2:	619a      	str	r2, [r3, #24]
  }
}
 8009bd4:	bf00      	nop
 8009bd6:	370c      	adds	r7, #12
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bde:	4770      	bx	lr

08009be0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b084      	sub	sp, #16
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bec:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	639a      	str	r2, [r3, #56]	; 0x38
  hi2c->hdmarx->XferAbortCallback = NULL;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c04:	b2db      	uxtb	r3, r3
 8009c06:	2b60      	cmp	r3, #96	; 0x60
 8009c08:	d107      	bne.n	8009c1a <I2C_DMAAbort+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	2220      	movs	r2, #32
 8009c0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8009c12:	68f8      	ldr	r0, [r7, #12]
 8009c14:	f7fe fff8 	bl	8008c08 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009c18:	e002      	b.n	8009c20 <I2C_DMAAbort+0x40>
    HAL_I2C_ErrorCallback(hi2c);
 8009c1a:	68f8      	ldr	r0, [r7, #12]
 8009c1c:	f7fe ffea 	bl	8008bf4 <HAL_I2C_ErrorCallback>
}
 8009c20:	bf00      	nop
 8009c22:	3710      	adds	r7, #16
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}

08009c28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b084      	sub	sp, #16
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	60f8      	str	r0, [r7, #12]
 8009c30:	60b9      	str	r1, [r7, #8]
 8009c32:	603b      	str	r3, [r7, #0]
 8009c34:	4613      	mov	r3, r2
 8009c36:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009c38:	e022      	b.n	8009c80 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c40:	d01e      	beq.n	8009c80 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c42:	f7fc f925 	bl	8005e90 <HAL_GetTick>
 8009c46:	4602      	mov	r2, r0
 8009c48:	69bb      	ldr	r3, [r7, #24]
 8009c4a:	1ad3      	subs	r3, r2, r3
 8009c4c:	683a      	ldr	r2, [r7, #0]
 8009c4e:	429a      	cmp	r2, r3
 8009c50:	d302      	bcc.n	8009c58 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d113      	bne.n	8009c80 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c5c:	f043 0220 	orr.w	r2, r3, #32
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	2220      	movs	r2, #32
 8009c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	2200      	movs	r2, #0
 8009c78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	e00f      	b.n	8009ca0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	699a      	ldr	r2, [r3, #24]
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	4013      	ands	r3, r2
 8009c8a:	68ba      	ldr	r2, [r7, #8]
 8009c8c:	429a      	cmp	r2, r3
 8009c8e:	bf0c      	ite	eq
 8009c90:	2301      	moveq	r3, #1
 8009c92:	2300      	movne	r3, #0
 8009c94:	b2db      	uxtb	r3, r3
 8009c96:	461a      	mov	r2, r3
 8009c98:	79fb      	ldrb	r3, [r7, #7]
 8009c9a:	429a      	cmp	r2, r3
 8009c9c:	d0cd      	beq.n	8009c3a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009c9e:	2300      	movs	r3, #0
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	3710      	adds	r7, #16
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}

08009ca8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b084      	sub	sp, #16
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	60f8      	str	r0, [r7, #12]
 8009cb0:	60b9      	str	r1, [r7, #8]
 8009cb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009cb4:	e02c      	b.n	8009d10 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8009cb6:	687a      	ldr	r2, [r7, #4]
 8009cb8:	68b9      	ldr	r1, [r7, #8]
 8009cba:	68f8      	ldr	r0, [r7, #12]
 8009cbc:	f000 f8dc 	bl	8009e78 <I2C_IsAcknowledgeFailed>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d001      	beq.n	8009cca <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	e02a      	b.n	8009d20 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cd0:	d01e      	beq.n	8009d10 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009cd2:	f7fc f8dd 	bl	8005e90 <HAL_GetTick>
 8009cd6:	4602      	mov	r2, r0
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	1ad3      	subs	r3, r2, r3
 8009cdc:	68ba      	ldr	r2, [r7, #8]
 8009cde:	429a      	cmp	r2, r3
 8009ce0:	d302      	bcc.n	8009ce8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d113      	bne.n	8009d10 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cec:	f043 0220 	orr.w	r2, r3, #32
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	2220      	movs	r2, #32
 8009cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	2200      	movs	r2, #0
 8009d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	e007      	b.n	8009d20 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	699b      	ldr	r3, [r3, #24]
 8009d16:	f003 0302 	and.w	r3, r3, #2
 8009d1a:	2b02      	cmp	r3, #2
 8009d1c:	d1cb      	bne.n	8009cb6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009d1e:	2300      	movs	r3, #0
}
 8009d20:	4618      	mov	r0, r3
 8009d22:	3710      	adds	r7, #16
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}

08009d28 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b084      	sub	sp, #16
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	60f8      	str	r0, [r7, #12]
 8009d30:	60b9      	str	r1, [r7, #8]
 8009d32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009d34:	e028      	b.n	8009d88 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8009d36:	687a      	ldr	r2, [r7, #4]
 8009d38:	68b9      	ldr	r1, [r7, #8]
 8009d3a:	68f8      	ldr	r0, [r7, #12]
 8009d3c:	f000 f89c 	bl	8009e78 <I2C_IsAcknowledgeFailed>
 8009d40:	4603      	mov	r3, r0
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d001      	beq.n	8009d4a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009d46:	2301      	movs	r3, #1
 8009d48:	e026      	b.n	8009d98 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d4a:	f7fc f8a1 	bl	8005e90 <HAL_GetTick>
 8009d4e:	4602      	mov	r2, r0
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	1ad3      	subs	r3, r2, r3
 8009d54:	68ba      	ldr	r2, [r7, #8]
 8009d56:	429a      	cmp	r2, r3
 8009d58:	d302      	bcc.n	8009d60 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d113      	bne.n	8009d88 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d64:	f043 0220 	orr.w	r2, r3, #32
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	2220      	movs	r2, #32
 8009d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	2200      	movs	r2, #0
 8009d78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8009d84:	2301      	movs	r3, #1
 8009d86:	e007      	b.n	8009d98 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	699b      	ldr	r3, [r3, #24]
 8009d8e:	f003 0320 	and.w	r3, r3, #32
 8009d92:	2b20      	cmp	r3, #32
 8009d94:	d1cf      	bne.n	8009d36 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009d96:	2300      	movs	r3, #0
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	3710      	adds	r7, #16
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd80      	pop	{r7, pc}

08009da0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b084      	sub	sp, #16
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	60f8      	str	r0, [r7, #12]
 8009da8:	60b9      	str	r1, [r7, #8]
 8009daa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009dac:	e055      	b.n	8009e5a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8009dae:	687a      	ldr	r2, [r7, #4]
 8009db0:	68b9      	ldr	r1, [r7, #8]
 8009db2:	68f8      	ldr	r0, [r7, #12]
 8009db4:	f000 f860 	bl	8009e78 <I2C_IsAcknowledgeFailed>
 8009db8:	4603      	mov	r3, r0
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d001      	beq.n	8009dc2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	e053      	b.n	8009e6a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	699b      	ldr	r3, [r3, #24]
 8009dc8:	f003 0320 	and.w	r3, r3, #32
 8009dcc:	2b20      	cmp	r3, #32
 8009dce:	d129      	bne.n	8009e24 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	699b      	ldr	r3, [r3, #24]
 8009dd6:	f003 0304 	and.w	r3, r3, #4
 8009dda:	2b04      	cmp	r3, #4
 8009ddc:	d105      	bne.n	8009dea <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d001      	beq.n	8009dea <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8009de6:	2300      	movs	r3, #0
 8009de8:	e03f      	b.n	8009e6a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	2220      	movs	r2, #32
 8009df0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	6859      	ldr	r1, [r3, #4]
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	681a      	ldr	r2, [r3, #0]
 8009dfc:	4b1d      	ldr	r3, [pc, #116]	; (8009e74 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8009dfe:	400b      	ands	r3, r1
 8009e00:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	2200      	movs	r2, #0
 8009e06:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	2220      	movs	r2, #32
 8009e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	2200      	movs	r2, #0
 8009e14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009e20:	2301      	movs	r3, #1
 8009e22:	e022      	b.n	8009e6a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e24:	f7fc f834 	bl	8005e90 <HAL_GetTick>
 8009e28:	4602      	mov	r2, r0
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	1ad3      	subs	r3, r2, r3
 8009e2e:	68ba      	ldr	r2, [r7, #8]
 8009e30:	429a      	cmp	r2, r3
 8009e32:	d302      	bcc.n	8009e3a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d10f      	bne.n	8009e5a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e3e:	f043 0220 	orr.w	r2, r3, #32
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	2220      	movs	r2, #32
 8009e4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	2200      	movs	r2, #0
 8009e52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8009e56:	2301      	movs	r3, #1
 8009e58:	e007      	b.n	8009e6a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	699b      	ldr	r3, [r3, #24]
 8009e60:	f003 0304 	and.w	r3, r3, #4
 8009e64:	2b04      	cmp	r3, #4
 8009e66:	d1a2      	bne.n	8009dae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009e68:	2300      	movs	r3, #0
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3710      	adds	r7, #16
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}
 8009e72:	bf00      	nop
 8009e74:	fe00e800 	.word	0xfe00e800

08009e78 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b084      	sub	sp, #16
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	60f8      	str	r0, [r7, #12]
 8009e80:	60b9      	str	r1, [r7, #8]
 8009e82:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	699b      	ldr	r3, [r3, #24]
 8009e8a:	f003 0310 	and.w	r3, r3, #16
 8009e8e:	2b10      	cmp	r3, #16
 8009e90:	d151      	bne.n	8009f36 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009e92:	e022      	b.n	8009eda <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e9a:	d01e      	beq.n	8009eda <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e9c:	f7fb fff8 	bl	8005e90 <HAL_GetTick>
 8009ea0:	4602      	mov	r2, r0
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	1ad3      	subs	r3, r2, r3
 8009ea6:	68ba      	ldr	r2, [r7, #8]
 8009ea8:	429a      	cmp	r2, r3
 8009eaa:	d302      	bcc.n	8009eb2 <I2C_IsAcknowledgeFailed+0x3a>
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d113      	bne.n	8009eda <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009eb6:	f043 0220 	orr.w	r2, r3, #32
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	2220      	movs	r2, #32
 8009ec2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	2200      	movs	r2, #0
 8009eca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	e02e      	b.n	8009f38 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	699b      	ldr	r3, [r3, #24]
 8009ee0:	f003 0320 	and.w	r3, r3, #32
 8009ee4:	2b20      	cmp	r3, #32
 8009ee6:	d1d5      	bne.n	8009e94 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	2210      	movs	r2, #16
 8009eee:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	2220      	movs	r2, #32
 8009ef6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009ef8:	68f8      	ldr	r0, [r7, #12]
 8009efa:	f7ff fe4d 	bl	8009b98 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	6859      	ldr	r1, [r3, #4]
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	681a      	ldr	r2, [r3, #0]
 8009f08:	4b0d      	ldr	r3, [pc, #52]	; (8009f40 <I2C_IsAcknowledgeFailed+0xc8>)
 8009f0a:	400b      	ands	r3, r1
 8009f0c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f12:	f043 0204 	orr.w	r2, r3, #4
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	2220      	movs	r2, #32
 8009f1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	2200      	movs	r2, #0
 8009f26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8009f32:	2301      	movs	r3, #1
 8009f34:	e000      	b.n	8009f38 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8009f36:	2300      	movs	r3, #0
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	3710      	adds	r7, #16
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}
 8009f40:	fe00e800 	.word	0xfe00e800

08009f44 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8009f44:	b480      	push	{r7}
 8009f46:	b085      	sub	sp, #20
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	60f8      	str	r0, [r7, #12]
 8009f4c:	607b      	str	r3, [r7, #4]
 8009f4e:	460b      	mov	r3, r1
 8009f50:	817b      	strh	r3, [r7, #10]
 8009f52:	4613      	mov	r3, r2
 8009f54:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	685a      	ldr	r2, [r3, #4]
 8009f5c:	69bb      	ldr	r3, [r7, #24]
 8009f5e:	0d5b      	lsrs	r3, r3, #21
 8009f60:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009f64:	4b0d      	ldr	r3, [pc, #52]	; (8009f9c <I2C_TransferConfig+0x58>)
 8009f66:	430b      	orrs	r3, r1
 8009f68:	43db      	mvns	r3, r3
 8009f6a:	ea02 0103 	and.w	r1, r2, r3
 8009f6e:	897b      	ldrh	r3, [r7, #10]
 8009f70:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009f74:	7a7b      	ldrb	r3, [r7, #9]
 8009f76:	041b      	lsls	r3, r3, #16
 8009f78:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009f7c:	431a      	orrs	r2, r3
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	431a      	orrs	r2, r3
 8009f82:	69bb      	ldr	r3, [r7, #24]
 8009f84:	431a      	orrs	r2, r3
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	430a      	orrs	r2, r1
 8009f8c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8009f8e:	bf00      	nop
 8009f90:	3714      	adds	r7, #20
 8009f92:	46bd      	mov	sp, r7
 8009f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f98:	4770      	bx	lr
 8009f9a:	bf00      	nop
 8009f9c:	03ff63ff 	.word	0x03ff63ff

08009fa0 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b085      	sub	sp, #20
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
 8009fa8:	460b      	mov	r3, r1
 8009faa:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8009fac:	2300      	movs	r3, #0
 8009fae:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fb4:	4a2f      	ldr	r2, [pc, #188]	; (800a074 <I2C_Enable_IRQ+0xd4>)
 8009fb6:	4293      	cmp	r3, r2
 8009fb8:	d004      	beq.n	8009fc4 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8009fbe:	4a2e      	ldr	r2, [pc, #184]	; (800a078 <I2C_Enable_IRQ+0xd8>)
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	d124      	bne.n	800a00e <I2C_Enable_IRQ+0x6e>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009fc4:	887b      	ldrh	r3, [r7, #2]
 8009fc6:	f003 0304 	and.w	r3, r3, #4
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d003      	beq.n	8009fd6 <I2C_Enable_IRQ+0x36>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8009fd4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8009fd6:	887b      	ldrh	r3, [r7, #2]
 8009fd8:	f003 0311 	and.w	r3, r3, #17
 8009fdc:	2b11      	cmp	r3, #17
 8009fde:	d103      	bne.n	8009fe8 <I2C_Enable_IRQ+0x48>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8009fe6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8009fe8:	887b      	ldrh	r3, [r7, #2]
 8009fea:	f003 0312 	and.w	r3, r3, #18
 8009fee:	2b12      	cmp	r3, #18
 8009ff0:	d103      	bne.n	8009ffa <I2C_Enable_IRQ+0x5a>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	f043 0320 	orr.w	r3, r3, #32
 8009ff8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8009ffa:	887b      	ldrh	r3, [r7, #2]
 8009ffc:	f003 0312 	and.w	r3, r3, #18
 800a000:	2b12      	cmp	r3, #18
 800a002:	d128      	bne.n	800a056 <I2C_Enable_IRQ+0xb6>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a00a:	60fb      	str	r3, [r7, #12]
    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 800a00c:	e023      	b.n	800a056 <I2C_Enable_IRQ+0xb6>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800a00e:	887b      	ldrh	r3, [r7, #2]
 800a010:	f003 0304 	and.w	r3, r3, #4
 800a014:	2b00      	cmp	r3, #0
 800a016:	d003      	beq.n	800a020 <I2C_Enable_IRQ+0x80>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800a01e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800a020:	887b      	ldrh	r3, [r7, #2]
 800a022:	f003 0301 	and.w	r3, r3, #1
 800a026:	2b00      	cmp	r3, #0
 800a028:	d003      	beq.n	800a032 <I2C_Enable_IRQ+0x92>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800a030:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800a032:	887b      	ldrh	r3, [r7, #2]
 800a034:	f003 0302 	and.w	r3, r3, #2
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d003      	beq.n	800a044 <I2C_Enable_IRQ+0xa4>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800a042:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800a044:	887b      	ldrh	r3, [r7, #2]
 800a046:	f003 0312 	and.w	r3, r3, #18
 800a04a:	2b12      	cmp	r3, #18
 800a04c:	d103      	bne.n	800a056 <I2C_Enable_IRQ+0xb6>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	f043 0320 	orr.w	r3, r3, #32
 800a054:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	6819      	ldr	r1, [r3, #0]
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	68fa      	ldr	r2, [r7, #12]
 800a062:	430a      	orrs	r2, r1
 800a064:	601a      	str	r2, [r3, #0]
}
 800a066:	bf00      	nop
 800a068:	3714      	adds	r7, #20
 800a06a:	46bd      	mov	sp, r7
 800a06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a070:	4770      	bx	lr
 800a072:	bf00      	nop
 800a074:	08009075 	.word	0x08009075
 800a078:	0800925b 	.word	0x0800925b

0800a07c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800a07c:	b480      	push	{r7}
 800a07e:	b085      	sub	sp, #20
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
 800a084:	460b      	mov	r3, r1
 800a086:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800a088:	2300      	movs	r3, #0
 800a08a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800a08c:	887b      	ldrh	r3, [r7, #2]
 800a08e:	f003 0301 	and.w	r3, r3, #1
 800a092:	2b00      	cmp	r3, #0
 800a094:	d00f      	beq.n	800a0b6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800a09c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a0a4:	b2db      	uxtb	r3, r3
 800a0a6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a0aa:	2b28      	cmp	r3, #40	; 0x28
 800a0ac:	d003      	beq.n	800a0b6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800a0b4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800a0b6:	887b      	ldrh	r3, [r7, #2]
 800a0b8:	f003 0302 	and.w	r3, r3, #2
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d00f      	beq.n	800a0e0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800a0c6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a0ce:	b2db      	uxtb	r3, r3
 800a0d0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a0d4:	2b28      	cmp	r3, #40	; 0x28
 800a0d6:	d003      	beq.n	800a0e0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800a0de:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800a0e0:	887b      	ldrh	r3, [r7, #2]
 800a0e2:	f003 0304 	and.w	r3, r3, #4
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d003      	beq.n	800a0f2 <I2C_Disable_IRQ+0x76>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800a0f0:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 800a0f2:	887b      	ldrh	r3, [r7, #2]
 800a0f4:	f003 0311 	and.w	r3, r3, #17
 800a0f8:	2b11      	cmp	r3, #17
 800a0fa:	d103      	bne.n	800a104 <I2C_Disable_IRQ+0x88>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800a102:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800a104:	887b      	ldrh	r3, [r7, #2]
 800a106:	f003 0312 	and.w	r3, r3, #18
 800a10a:	2b12      	cmp	r3, #18
 800a10c:	d103      	bne.n	800a116 <I2C_Disable_IRQ+0x9a>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	f043 0320 	orr.w	r3, r3, #32
 800a114:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 800a116:	887b      	ldrh	r3, [r7, #2]
 800a118:	f003 0312 	and.w	r3, r3, #18
 800a11c:	2b12      	cmp	r3, #18
 800a11e:	d103      	bne.n	800a128 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a126:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	6819      	ldr	r1, [r3, #0]
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	43da      	mvns	r2, r3
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	400a      	ands	r2, r1
 800a138:	601a      	str	r2, [r3, #0]
}
 800a13a:	bf00      	nop
 800a13c:	3714      	adds	r7, #20
 800a13e:	46bd      	mov	sp, r7
 800a140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a144:	4770      	bx	lr

0800a146 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a146:	b480      	push	{r7}
 800a148:	b083      	sub	sp, #12
 800a14a:	af00      	add	r7, sp, #0
 800a14c:	6078      	str	r0, [r7, #4]
 800a14e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a156:	b2db      	uxtb	r3, r3
 800a158:	2b20      	cmp	r3, #32
 800a15a:	d138      	bne.n	800a1ce <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a162:	2b01      	cmp	r3, #1
 800a164:	d101      	bne.n	800a16a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a166:	2302      	movs	r3, #2
 800a168:	e032      	b.n	800a1d0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2201      	movs	r2, #1
 800a16e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2224      	movs	r2, #36	; 0x24
 800a176:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	681a      	ldr	r2, [r3, #0]
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f022 0201 	bic.w	r2, r2, #1
 800a188:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	681a      	ldr	r2, [r3, #0]
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a198:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	6819      	ldr	r1, [r3, #0]
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	683a      	ldr	r2, [r7, #0]
 800a1a6:	430a      	orrs	r2, r1
 800a1a8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	681a      	ldr	r2, [r3, #0]
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	f042 0201 	orr.w	r2, r2, #1
 800a1b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2220      	movs	r2, #32
 800a1be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	e000      	b.n	800a1d0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a1ce:	2302      	movs	r3, #2
  }
}
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	370c      	adds	r7, #12
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1da:	4770      	bx	lr

0800a1dc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b085      	sub	sp, #20
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
 800a1e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a1ec:	b2db      	uxtb	r3, r3
 800a1ee:	2b20      	cmp	r3, #32
 800a1f0:	d139      	bne.n	800a266 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a1f8:	2b01      	cmp	r3, #1
 800a1fa:	d101      	bne.n	800a200 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a1fc:	2302      	movs	r3, #2
 800a1fe:	e033      	b.n	800a268 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2201      	movs	r2, #1
 800a204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2224      	movs	r2, #36	; 0x24
 800a20c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	681a      	ldr	r2, [r3, #0]
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f022 0201 	bic.w	r2, r2, #1
 800a21e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a22e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	021b      	lsls	r3, r3, #8
 800a234:	68fa      	ldr	r2, [r7, #12]
 800a236:	4313      	orrs	r3, r2
 800a238:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	68fa      	ldr	r2, [r7, #12]
 800a240:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	681a      	ldr	r2, [r3, #0]
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	f042 0201 	orr.w	r2, r2, #1
 800a250:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2220      	movs	r2, #32
 800a256:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2200      	movs	r2, #0
 800a25e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a262:	2300      	movs	r3, #0
 800a264:	e000      	b.n	800a268 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a266:	2302      	movs	r3, #2
  }
}
 800a268:	4618      	mov	r0, r3
 800a26a:	3714      	adds	r7, #20
 800a26c:	46bd      	mov	sp, r7
 800a26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a272:	4770      	bx	lr

0800a274 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800a274:	b480      	push	{r7}
 800a276:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a278:	4b05      	ldr	r3, [pc, #20]	; (800a290 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	4a04      	ldr	r2, [pc, #16]	; (800a290 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a27e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a282:	6013      	str	r3, [r2, #0]
}
 800a284:	bf00      	nop
 800a286:	46bd      	mov	sp, r7
 800a288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28c:	4770      	bx	lr
 800a28e:	bf00      	nop
 800a290:	58000400 	.word	0x58000400

0800a294 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800a294:	b480      	push	{r7}
 800a296:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 800a298:	4b04      	ldr	r3, [pc, #16]	; (800a2ac <HAL_PWREx_GetVoltageRange+0x18>)
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a8:	4770      	bx	lr
 800a2aa:	bf00      	nop
 800a2ac:	58000400 	.word	0x58000400

0800a2b0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 800a2b0:	b480      	push	{r7}
 800a2b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800a2b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a2be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a2c2:	d101      	bne.n	800a2c8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	e000      	b.n	800a2ca <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800a2c8:	2300      	movs	r3, #0
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d2:	4770      	bx	lr

0800a2d4 <LL_RCC_HSE_EnableBypass>:
{
 800a2d4:	b480      	push	{r7}
 800a2d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 800a2d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a2e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a2e6:	6013      	str	r3, [r2, #0]
}
 800a2e8:	bf00      	nop
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f0:	4770      	bx	lr

0800a2f2 <LL_RCC_HSE_DisableBypass>:
{
 800a2f2:	b480      	push	{r7}
 800a2f4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 800a2f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a300:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a304:	6013      	str	r3, [r2, #0]
}
 800a306:	bf00      	nop
 800a308:	46bd      	mov	sp, r7
 800a30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30e:	4770      	bx	lr

0800a310 <LL_RCC_HSE_Enable>:
{
 800a310:	b480      	push	{r7}
 800a312:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800a314:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a31e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a322:	6013      	str	r3, [r2, #0]
}
 800a324:	bf00      	nop
 800a326:	46bd      	mov	sp, r7
 800a328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32c:	4770      	bx	lr

0800a32e <LL_RCC_HSE_Disable>:
{
 800a32e:	b480      	push	{r7}
 800a330:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800a332:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a33c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a340:	6013      	str	r3, [r2, #0]
}
 800a342:	bf00      	nop
 800a344:	46bd      	mov	sp, r7
 800a346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34a:	4770      	bx	lr

0800a34c <LL_RCC_HSE_IsReady>:
{
 800a34c:	b480      	push	{r7}
 800a34e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800a350:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a35a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a35e:	d101      	bne.n	800a364 <LL_RCC_HSE_IsReady+0x18>
 800a360:	2301      	movs	r3, #1
 800a362:	e000      	b.n	800a366 <LL_RCC_HSE_IsReady+0x1a>
 800a364:	2300      	movs	r3, #0
}
 800a366:	4618      	mov	r0, r3
 800a368:	46bd      	mov	sp, r7
 800a36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36e:	4770      	bx	lr

0800a370 <LL_RCC_HSI_Enable>:
{
 800a370:	b480      	push	{r7}
 800a372:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800a374:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a37e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a382:	6013      	str	r3, [r2, #0]
}
 800a384:	bf00      	nop
 800a386:	46bd      	mov	sp, r7
 800a388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38c:	4770      	bx	lr

0800a38e <LL_RCC_HSI_Disable>:
{
 800a38e:	b480      	push	{r7}
 800a390:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800a392:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a39c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a3a0:	6013      	str	r3, [r2, #0]
}
 800a3a2:	bf00      	nop
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3aa:	4770      	bx	lr

0800a3ac <LL_RCC_HSI_IsReady>:
{
 800a3ac:	b480      	push	{r7}
 800a3ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800a3b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a3ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3be:	d101      	bne.n	800a3c4 <LL_RCC_HSI_IsReady+0x18>
 800a3c0:	2301      	movs	r3, #1
 800a3c2:	e000      	b.n	800a3c6 <LL_RCC_HSI_IsReady+0x1a>
 800a3c4:	2300      	movs	r3, #0
}
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ce:	4770      	bx	lr

0800a3d0 <LL_RCC_HSI_SetCalibTrimming>:
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	b083      	sub	sp, #12
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800a3d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a3dc:	685b      	ldr	r3, [r3, #4]
 800a3de:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	061b      	lsls	r3, r3, #24
 800a3e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a3ea:	4313      	orrs	r3, r2
 800a3ec:	604b      	str	r3, [r1, #4]
}
 800a3ee:	bf00      	nop
 800a3f0:	370c      	adds	r7, #12
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f8:	4770      	bx	lr

0800a3fa <LL_RCC_HSI48_Enable>:
{
 800a3fa:	b480      	push	{r7}
 800a3fc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800a3fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a402:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a406:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a40a:	f043 0301 	orr.w	r3, r3, #1
 800a40e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800a412:	bf00      	nop
 800a414:	46bd      	mov	sp, r7
 800a416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41a:	4770      	bx	lr

0800a41c <LL_RCC_HSI48_Disable>:
{
 800a41c:	b480      	push	{r7}
 800a41e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800a420:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a424:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a428:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a42c:	f023 0301 	bic.w	r3, r3, #1
 800a430:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800a434:	bf00      	nop
 800a436:	46bd      	mov	sp, r7
 800a438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43c:	4770      	bx	lr

0800a43e <LL_RCC_HSI48_IsReady>:
{
 800a43e:	b480      	push	{r7}
 800a440:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800a442:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a446:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a44a:	f003 0302 	and.w	r3, r3, #2
 800a44e:	2b02      	cmp	r3, #2
 800a450:	d101      	bne.n	800a456 <LL_RCC_HSI48_IsReady+0x18>
 800a452:	2301      	movs	r3, #1
 800a454:	e000      	b.n	800a458 <LL_RCC_HSI48_IsReady+0x1a>
 800a456:	2300      	movs	r3, #0
}
 800a458:	4618      	mov	r0, r3
 800a45a:	46bd      	mov	sp, r7
 800a45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a460:	4770      	bx	lr

0800a462 <LL_RCC_LSE_Enable>:
{
 800a462:	b480      	push	{r7}
 800a464:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a466:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a46a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a46e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a472:	f043 0301 	orr.w	r3, r3, #1
 800a476:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800a47a:	bf00      	nop
 800a47c:	46bd      	mov	sp, r7
 800a47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a482:	4770      	bx	lr

0800a484 <LL_RCC_LSE_Disable>:
{
 800a484:	b480      	push	{r7}
 800a486:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a48c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a490:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a494:	f023 0301 	bic.w	r3, r3, #1
 800a498:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800a49c:	bf00      	nop
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a4:	4770      	bx	lr

0800a4a6 <LL_RCC_LSE_EnableBypass>:
{
 800a4a6:	b480      	push	{r7}
 800a4a8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a4aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a4ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a4b6:	f043 0304 	orr.w	r3, r3, #4
 800a4ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800a4be:	bf00      	nop
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c6:	4770      	bx	lr

0800a4c8 <LL_RCC_LSE_DisableBypass>:
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a4cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a4d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a4d8:	f023 0304 	bic.w	r3, r3, #4
 800a4dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800a4e0:	bf00      	nop
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e8:	4770      	bx	lr

0800a4ea <LL_RCC_LSE_IsReady>:
{
 800a4ea:	b480      	push	{r7}
 800a4ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800a4ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a4f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4f6:	f003 0302 	and.w	r3, r3, #2
 800a4fa:	2b02      	cmp	r3, #2
 800a4fc:	d101      	bne.n	800a502 <LL_RCC_LSE_IsReady+0x18>
 800a4fe:	2301      	movs	r3, #1
 800a500:	e000      	b.n	800a504 <LL_RCC_LSE_IsReady+0x1a>
 800a502:	2300      	movs	r3, #0
}
 800a504:	4618      	mov	r0, r3
 800a506:	46bd      	mov	sp, r7
 800a508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50c:	4770      	bx	lr

0800a50e <LL_RCC_LSI1_Enable>:
{
 800a50e:	b480      	push	{r7}
 800a510:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800a512:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a516:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a51a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a51e:	f043 0301 	orr.w	r3, r3, #1
 800a522:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800a526:	bf00      	nop
 800a528:	46bd      	mov	sp, r7
 800a52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52e:	4770      	bx	lr

0800a530 <LL_RCC_LSI1_Disable>:
{
 800a530:	b480      	push	{r7}
 800a532:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800a534:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a538:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a53c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a540:	f023 0301 	bic.w	r3, r3, #1
 800a544:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800a548:	bf00      	nop
 800a54a:	46bd      	mov	sp, r7
 800a54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a550:	4770      	bx	lr

0800a552 <LL_RCC_LSI1_IsReady>:
{
 800a552:	b480      	push	{r7}
 800a554:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800a556:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a55a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a55e:	f003 0302 	and.w	r3, r3, #2
 800a562:	2b02      	cmp	r3, #2
 800a564:	d101      	bne.n	800a56a <LL_RCC_LSI1_IsReady+0x18>
 800a566:	2301      	movs	r3, #1
 800a568:	e000      	b.n	800a56c <LL_RCC_LSI1_IsReady+0x1a>
 800a56a:	2300      	movs	r3, #0
}
 800a56c:	4618      	mov	r0, r3
 800a56e:	46bd      	mov	sp, r7
 800a570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a574:	4770      	bx	lr

0800a576 <LL_RCC_LSI2_Enable>:
{
 800a576:	b480      	push	{r7}
 800a578:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800a57a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a57e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a582:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a586:	f043 0304 	orr.w	r3, r3, #4
 800a58a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800a58e:	bf00      	nop
 800a590:	46bd      	mov	sp, r7
 800a592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a596:	4770      	bx	lr

0800a598 <LL_RCC_LSI2_Disable>:
{
 800a598:	b480      	push	{r7}
 800a59a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800a59c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a5a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a5a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a5a8:	f023 0304 	bic.w	r3, r3, #4
 800a5ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800a5b0:	bf00      	nop
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b8:	4770      	bx	lr

0800a5ba <LL_RCC_LSI2_IsReady>:
{
 800a5ba:	b480      	push	{r7}
 800a5bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800a5be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a5c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a5c6:	f003 0308 	and.w	r3, r3, #8
 800a5ca:	2b08      	cmp	r3, #8
 800a5cc:	d101      	bne.n	800a5d2 <LL_RCC_LSI2_IsReady+0x18>
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	e000      	b.n	800a5d4 <LL_RCC_LSI2_IsReady+0x1a>
 800a5d2:	2300      	movs	r3, #0
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5dc:	4770      	bx	lr

0800a5de <LL_RCC_LSI2_SetTrimming>:
{
 800a5de:	b480      	push	{r7}
 800a5e0:	b083      	sub	sp, #12
 800a5e2:	af00      	add	r7, sp, #0
 800a5e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800a5e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a5ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a5ee:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	021b      	lsls	r3, r3, #8
 800a5f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a5fa:	4313      	orrs	r3, r2
 800a5fc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800a600:	bf00      	nop
 800a602:	370c      	adds	r7, #12
 800a604:	46bd      	mov	sp, r7
 800a606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60a:	4770      	bx	lr

0800a60c <LL_RCC_MSI_Enable>:
{
 800a60c:	b480      	push	{r7}
 800a60e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800a610:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a61a:	f043 0301 	orr.w	r3, r3, #1
 800a61e:	6013      	str	r3, [r2, #0]
}
 800a620:	bf00      	nop
 800a622:	46bd      	mov	sp, r7
 800a624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a628:	4770      	bx	lr

0800a62a <LL_RCC_MSI_Disable>:
{
 800a62a:	b480      	push	{r7}
 800a62c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800a62e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a638:	f023 0301 	bic.w	r3, r3, #1
 800a63c:	6013      	str	r3, [r2, #0]
}
 800a63e:	bf00      	nop
 800a640:	46bd      	mov	sp, r7
 800a642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a646:	4770      	bx	lr

0800a648 <LL_RCC_MSI_IsReady>:
{
 800a648:	b480      	push	{r7}
 800a64a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800a64c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f003 0302 	and.w	r3, r3, #2
 800a656:	2b02      	cmp	r3, #2
 800a658:	d101      	bne.n	800a65e <LL_RCC_MSI_IsReady+0x16>
 800a65a:	2301      	movs	r3, #1
 800a65c:	e000      	b.n	800a660 <LL_RCC_MSI_IsReady+0x18>
 800a65e:	2300      	movs	r3, #0
}
 800a660:	4618      	mov	r0, r3
 800a662:	46bd      	mov	sp, r7
 800a664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a668:	4770      	bx	lr

0800a66a <LL_RCC_MSI_SetRange>:
{
 800a66a:	b480      	push	{r7}
 800a66c:	b083      	sub	sp, #12
 800a66e:	af00      	add	r7, sp, #0
 800a670:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800a672:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a67c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	4313      	orrs	r3, r2
 800a684:	600b      	str	r3, [r1, #0]
}
 800a686:	bf00      	nop
 800a688:	370c      	adds	r7, #12
 800a68a:	46bd      	mov	sp, r7
 800a68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a690:	4770      	bx	lr

0800a692 <LL_RCC_MSI_GetRange>:
{
 800a692:	b480      	push	{r7}
 800a694:	b083      	sub	sp, #12
 800a696:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800a698:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a6a2:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2bb0      	cmp	r3, #176	; 0xb0
 800a6a8:	d901      	bls.n	800a6ae <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800a6aa:	23b0      	movs	r3, #176	; 0xb0
 800a6ac:	607b      	str	r3, [r7, #4]
  return msiRange;
 800a6ae:	687b      	ldr	r3, [r7, #4]
}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	370c      	adds	r7, #12
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ba:	4770      	bx	lr

0800a6bc <LL_RCC_MSI_SetCalibTrimming>:
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b083      	sub	sp, #12
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800a6c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a6c8:	685b      	ldr	r3, [r3, #4]
 800a6ca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	021b      	lsls	r3, r3, #8
 800a6d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a6d6:	4313      	orrs	r3, r2
 800a6d8:	604b      	str	r3, [r1, #4]
}
 800a6da:	bf00      	nop
 800a6dc:	370c      	adds	r7, #12
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e4:	4770      	bx	lr

0800a6e6 <LL_RCC_SetSysClkSource>:
{
 800a6e6:	b480      	push	{r7}
 800a6e8:	b083      	sub	sp, #12
 800a6ea:	af00      	add	r7, sp, #0
 800a6ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800a6ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a6f2:	689b      	ldr	r3, [r3, #8]
 800a6f4:	f023 0203 	bic.w	r2, r3, #3
 800a6f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	4313      	orrs	r3, r2
 800a700:	608b      	str	r3, [r1, #8]
}
 800a702:	bf00      	nop
 800a704:	370c      	adds	r7, #12
 800a706:	46bd      	mov	sp, r7
 800a708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70c:	4770      	bx	lr

0800a70e <LL_RCC_GetSysClkSource>:
{
 800a70e:	b480      	push	{r7}
 800a710:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800a712:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a716:	689b      	ldr	r3, [r3, #8]
 800a718:	f003 030c 	and.w	r3, r3, #12
}
 800a71c:	4618      	mov	r0, r3
 800a71e:	46bd      	mov	sp, r7
 800a720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a724:	4770      	bx	lr

0800a726 <LL_RCC_SetAHBPrescaler>:
{
 800a726:	b480      	push	{r7}
 800a728:	b083      	sub	sp, #12
 800a72a:	af00      	add	r7, sp, #0
 800a72c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800a72e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a732:	689b      	ldr	r3, [r3, #8]
 800a734:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a738:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	4313      	orrs	r3, r2
 800a740:	608b      	str	r3, [r1, #8]
}
 800a742:	bf00      	nop
 800a744:	370c      	adds	r7, #12
 800a746:	46bd      	mov	sp, r7
 800a748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74c:	4770      	bx	lr

0800a74e <LL_C2_RCC_SetAHBPrescaler>:
{
 800a74e:	b480      	push	{r7}
 800a750:	b083      	sub	sp, #12
 800a752:	af00      	add	r7, sp, #0
 800a754:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800a756:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a75a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800a75e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a762:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	4313      	orrs	r3, r2
 800a76a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800a76e:	bf00      	nop
 800a770:	370c      	adds	r7, #12
 800a772:	46bd      	mov	sp, r7
 800a774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a778:	4770      	bx	lr

0800a77a <LL_RCC_SetAHB4Prescaler>:
{
 800a77a:	b480      	push	{r7}
 800a77c:	b083      	sub	sp, #12
 800a77e:	af00      	add	r7, sp, #0
 800a780:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800a782:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a786:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800a78a:	f023 020f 	bic.w	r2, r3, #15
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	091b      	lsrs	r3, r3, #4
 800a792:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a796:	4313      	orrs	r3, r2
 800a798:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800a79c:	bf00      	nop
 800a79e:	370c      	adds	r7, #12
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a6:	4770      	bx	lr

0800a7a8 <LL_RCC_SetAPB1Prescaler>:
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b083      	sub	sp, #12
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800a7b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a7b4:	689b      	ldr	r3, [r3, #8]
 800a7b6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a7ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	4313      	orrs	r3, r2
 800a7c2:	608b      	str	r3, [r1, #8]
}
 800a7c4:	bf00      	nop
 800a7c6:	370c      	adds	r7, #12
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ce:	4770      	bx	lr

0800a7d0 <LL_RCC_SetAPB2Prescaler>:
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b083      	sub	sp, #12
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800a7d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a7dc:	689b      	ldr	r3, [r3, #8]
 800a7de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a7e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	4313      	orrs	r3, r2
 800a7ea:	608b      	str	r3, [r1, #8]
}
 800a7ec:	bf00      	nop
 800a7ee:	370c      	adds	r7, #12
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f6:	4770      	bx	lr

0800a7f8 <LL_RCC_GetAHBPrescaler>:
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800a7fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a800:	689b      	ldr	r3, [r3, #8]
 800a802:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800a806:	4618      	mov	r0, r3
 800a808:	46bd      	mov	sp, r7
 800a80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80e:	4770      	bx	lr

0800a810 <LL_C2_RCC_GetAHBPrescaler>:
{
 800a810:	b480      	push	{r7}
 800a812:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 800a814:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a818:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800a81c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800a820:	4618      	mov	r0, r3
 800a822:	46bd      	mov	sp, r7
 800a824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a828:	4770      	bx	lr

0800a82a <LL_RCC_GetAHB4Prescaler>:
{
 800a82a:	b480      	push	{r7}
 800a82c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800a82e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a832:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800a836:	011b      	lsls	r3, r3, #4
 800a838:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	46bd      	mov	sp, r7
 800a840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a844:	4770      	bx	lr

0800a846 <LL_RCC_GetAPB1Prescaler>:
{
 800a846:	b480      	push	{r7}
 800a848:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800a84a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a84e:	689b      	ldr	r3, [r3, #8]
 800a850:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800a854:	4618      	mov	r0, r3
 800a856:	46bd      	mov	sp, r7
 800a858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85c:	4770      	bx	lr

0800a85e <LL_RCC_GetAPB2Prescaler>:
{
 800a85e:	b480      	push	{r7}
 800a860:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800a862:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a866:	689b      	ldr	r3, [r3, #8]
 800a868:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	46bd      	mov	sp, r7
 800a870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a874:	4770      	bx	lr

0800a876 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800a876:	b480      	push	{r7}
 800a878:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800a87a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a884:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a888:	6013      	str	r3, [r2, #0]
}
 800a88a:	bf00      	nop
 800a88c:	46bd      	mov	sp, r7
 800a88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a892:	4770      	bx	lr

0800a894 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800a894:	b480      	push	{r7}
 800a896:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800a898:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a8a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a8a6:	6013      	str	r3, [r2, #0]
}
 800a8a8:	bf00      	nop
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b0:	4770      	bx	lr

0800a8b2 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800a8b2:	b480      	push	{r7}
 800a8b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800a8b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a8c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a8c4:	d101      	bne.n	800a8ca <LL_RCC_PLL_IsReady+0x18>
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	e000      	b.n	800a8cc <LL_RCC_PLL_IsReady+0x1a>
 800a8ca:	2300      	movs	r3, #0
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d4:	4770      	bx	lr

0800a8d6 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800a8d6:	b480      	push	{r7}
 800a8d8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800a8da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a8de:	68db      	ldr	r3, [r3, #12]
 800a8e0:	0a1b      	lsrs	r3, r3, #8
 800a8e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ee:	4770      	bx	lr

0800a8f0 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800a8f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a8f8:	68db      	ldr	r3, [r3, #12]
 800a8fa:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	46bd      	mov	sp, r7
 800a902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a906:	4770      	bx	lr

0800a908 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800a908:	b480      	push	{r7}
 800a90a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800a90c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a910:	68db      	ldr	r3, [r3, #12]
 800a912:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800a916:	4618      	mov	r0, r3
 800a918:	46bd      	mov	sp, r7
 800a91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91e:	4770      	bx	lr

0800a920 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800a920:	b480      	push	{r7}
 800a922:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800a924:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a928:	68db      	ldr	r3, [r3, #12]
 800a92a:	f003 0303 	and.w	r3, r3, #3
}
 800a92e:	4618      	mov	r0, r3
 800a930:	46bd      	mov	sp, r7
 800a932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a936:	4770      	bx	lr

0800a938 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800a938:	b480      	push	{r7}
 800a93a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800a93c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a940:	689b      	ldr	r3, [r3, #8]
 800a942:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a946:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a94a:	d101      	bne.n	800a950 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800a94c:	2301      	movs	r3, #1
 800a94e:	e000      	b.n	800a952 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800a950:	2300      	movs	r3, #0
}
 800a952:	4618      	mov	r0, r3
 800a954:	46bd      	mov	sp, r7
 800a956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95a:	4770      	bx	lr

0800a95c <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800a95c:	b480      	push	{r7}
 800a95e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800a960:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a964:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800a968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a96c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a970:	d101      	bne.n	800a976 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800a972:	2301      	movs	r3, #1
 800a974:	e000      	b.n	800a978 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800a976:	2300      	movs	r3, #0
}
 800a978:	4618      	mov	r0, r3
 800a97a:	46bd      	mov	sp, r7
 800a97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a980:	4770      	bx	lr

0800a982 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800a982:	b480      	push	{r7}
 800a984:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800a986:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a98a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800a98e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a992:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a996:	d101      	bne.n	800a99c <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800a998:	2301      	movs	r3, #1
 800a99a:	e000      	b.n	800a99e <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800a99c:	2300      	movs	r3, #0
}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a6:	4770      	bx	lr

0800a9a8 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800a9a8:	b480      	push	{r7}
 800a9aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800a9ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a9b0:	689b      	ldr	r3, [r3, #8]
 800a9b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a9ba:	d101      	bne.n	800a9c0 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800a9bc:	2301      	movs	r3, #1
 800a9be:	e000      	b.n	800a9c2 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800a9c0:	2300      	movs	r3, #0
}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ca:	4770      	bx	lr

0800a9cc <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800a9d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a9d4:	689b      	ldr	r3, [r3, #8]
 800a9d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a9da:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a9de:	d101      	bne.n	800a9e4 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	e000      	b.n	800a9e6 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800a9e4:	2300      	movs	r3, #0
}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ee:	4770      	bx	lr

0800a9f0 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a9f0:	b590      	push	{r4, r7, lr}
 800a9f2:	b08b      	sub	sp, #44	; 0x2c
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d101      	bne.n	800aa02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a9fe:	2301      	movs	r3, #1
 800aa00:	e34b      	b.n	800b09a <HAL_RCC_OscConfig+0x6aa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f003 0320 	and.w	r3, r3, #32
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	f000 808f 	beq.w	800ab2e <HAL_RCC_OscConfig+0x13e>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aa10:	f7ff fe7d 	bl	800a70e <LL_RCC_GetSysClkSource>
 800aa14:	6278      	str	r0, [r7, #36]	; 0x24
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800aa16:	f7ff ff83 	bl	800a920 <LL_RCC_PLL_GetMainSource>
 800aa1a:	6238      	str	r0, [r7, #32]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800aa1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d005      	beq.n	800aa2e <HAL_RCC_OscConfig+0x3e>
 800aa22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa24:	2b0c      	cmp	r3, #12
 800aa26:	d149      	bne.n	800aabc <HAL_RCC_OscConfig+0xcc>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800aa28:	6a3b      	ldr	r3, [r7, #32]
 800aa2a:	2b01      	cmp	r3, #1
 800aa2c:	d146      	bne.n	800aabc <HAL_RCC_OscConfig+0xcc>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800aa2e:	f7ff fe0b 	bl	800a648 <LL_RCC_MSI_IsReady>
 800aa32:	4603      	mov	r3, r0
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d005      	beq.n	800aa44 <HAL_RCC_OscConfig+0x54>
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	69db      	ldr	r3, [r3, #28]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d101      	bne.n	800aa44 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800aa40:	2301      	movs	r3, #1
 800aa42:	e32a      	b.n	800b09a <HAL_RCC_OscConfig+0x6aa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800aa48:	f7ff fe23 	bl	800a692 <LL_RCC_MSI_GetRange>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	429c      	cmp	r4, r3
 800aa50:	d914      	bls.n	800aa7c <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa56:	4618      	mov	r0, r3
 800aa58:	f000 fd2a 	bl	800b4b0 <RCC_SetFlashLatencyFromMSIRange>
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d001      	beq.n	800aa66 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 800aa62:	2301      	movs	r3, #1
 800aa64:	e319      	b.n	800b09a <HAL_RCC_OscConfig+0x6aa>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	f7ff fdfd 	bl	800a66a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	6a1b      	ldr	r3, [r3, #32]
 800aa74:	4618      	mov	r0, r3
 800aa76:	f7ff fe21 	bl	800a6bc <LL_RCC_MSI_SetCalibTrimming>
 800aa7a:	e013      	b.n	800aaa4 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa80:	4618      	mov	r0, r3
 800aa82:	f7ff fdf2 	bl	800a66a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6a1b      	ldr	r3, [r3, #32]
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f7ff fe16 	bl	800a6bc <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa94:	4618      	mov	r0, r3
 800aa96:	f000 fd0b 	bl	800b4b0 <RCC_SetFlashLatencyFromMSIRange>
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d001      	beq.n	800aaa4 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 800aaa0:	2301      	movs	r3, #1
 800aaa2:	e2fa      	b.n	800b09a <HAL_RCC_OscConfig+0x6aa>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 800aaa4:	f7fa fb46 	bl	8005134 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800aaa8:	4bb4      	ldr	r3, [pc, #720]	; (800ad7c <HAL_RCC_OscConfig+0x38c>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	4618      	mov	r0, r3
 800aaae:	f7fa fa1b 	bl	8004ee8 <HAL_InitTick>
 800aab2:	4603      	mov	r3, r0
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d039      	beq.n	800ab2c <HAL_RCC_OscConfig+0x13c>
        {
          return HAL_ERROR;
 800aab8:	2301      	movs	r3, #1
 800aaba:	e2ee      	b.n	800b09a <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	69db      	ldr	r3, [r3, #28]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d01e      	beq.n	800ab02 <HAL_RCC_OscConfig+0x112>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800aac4:	f7ff fda2 	bl	800a60c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800aac8:	f7fb f9e2 	bl	8005e90 <HAL_GetTick>
 800aacc:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800aace:	e008      	b.n	800aae2 <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800aad0:	f7fb f9de 	bl	8005e90 <HAL_GetTick>
 800aad4:	4602      	mov	r2, r0
 800aad6:	69fb      	ldr	r3, [r7, #28]
 800aad8:	1ad3      	subs	r3, r2, r3
 800aada:	2b02      	cmp	r3, #2
 800aadc:	d901      	bls.n	800aae2 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800aade:	2303      	movs	r3, #3
 800aae0:	e2db      	b.n	800b09a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() == 0U)
 800aae2:	f7ff fdb1 	bl	800a648 <LL_RCC_MSI_IsReady>
 800aae6:	4603      	mov	r3, r0
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d0f1      	beq.n	800aad0 <HAL_RCC_OscConfig+0xe0>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	f7ff fdba 	bl	800a66a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6a1b      	ldr	r3, [r3, #32]
 800aafa:	4618      	mov	r0, r3
 800aafc:	f7ff fdde 	bl	800a6bc <LL_RCC_MSI_SetCalibTrimming>
 800ab00:	e015      	b.n	800ab2e <HAL_RCC_OscConfig+0x13e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800ab02:	f7ff fd92 	bl	800a62a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800ab06:	f7fb f9c3 	bl	8005e90 <HAL_GetTick>
 800ab0a:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800ab0c:	e008      	b.n	800ab20 <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800ab0e:	f7fb f9bf 	bl	8005e90 <HAL_GetTick>
 800ab12:	4602      	mov	r2, r0
 800ab14:	69fb      	ldr	r3, [r7, #28]
 800ab16:	1ad3      	subs	r3, r2, r3
 800ab18:	2b02      	cmp	r3, #2
 800ab1a:	d901      	bls.n	800ab20 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 800ab1c:	2303      	movs	r3, #3
 800ab1e:	e2bc      	b.n	800b09a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() != 0U)
 800ab20:	f7ff fd92 	bl	800a648 <LL_RCC_MSI_IsReady>
 800ab24:	4603      	mov	r3, r0
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d1f1      	bne.n	800ab0e <HAL_RCC_OscConfig+0x11e>
 800ab2a:	e000      	b.n	800ab2e <HAL_RCC_OscConfig+0x13e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800ab2c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	f003 0301 	and.w	r3, r3, #1
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d05a      	beq.n	800abf0 <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ab3a:	f7ff fde8 	bl	800a70e <LL_RCC_GetSysClkSource>
 800ab3e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ab40:	f7ff feee 	bl	800a920 <LL_RCC_PLL_GetMainSource>
 800ab44:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800ab46:	69bb      	ldr	r3, [r7, #24]
 800ab48:	2b08      	cmp	r3, #8
 800ab4a:	d005      	beq.n	800ab58 <HAL_RCC_OscConfig+0x168>
 800ab4c:	69bb      	ldr	r3, [r7, #24]
 800ab4e:	2b0c      	cmp	r3, #12
 800ab50:	d10d      	bne.n	800ab6e <HAL_RCC_OscConfig+0x17e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800ab52:	697b      	ldr	r3, [r7, #20]
 800ab54:	2b03      	cmp	r3, #3
 800ab56:	d10a      	bne.n	800ab6e <HAL_RCC_OscConfig+0x17e>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ab58:	f7ff fbf8 	bl	800a34c <LL_RCC_HSE_IsReady>
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d045      	beq.n	800abee <HAL_RCC_OscConfig+0x1fe>
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	685b      	ldr	r3, [r3, #4]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d141      	bne.n	800abee <HAL_RCC_OscConfig+0x1fe>
      {
        return HAL_ERROR;
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	e295      	b.n	800b09a <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	685b      	ldr	r3, [r3, #4]
 800ab72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab76:	d102      	bne.n	800ab7e <HAL_RCC_OscConfig+0x18e>
 800ab78:	f7ff fbca 	bl	800a310 <LL_RCC_HSE_Enable>
 800ab7c:	e00d      	b.n	800ab9a <HAL_RCC_OscConfig+0x1aa>
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	685b      	ldr	r3, [r3, #4]
 800ab82:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ab86:	d104      	bne.n	800ab92 <HAL_RCC_OscConfig+0x1a2>
 800ab88:	f7ff fba4 	bl	800a2d4 <LL_RCC_HSE_EnableBypass>
 800ab8c:	f7ff fbc0 	bl	800a310 <LL_RCC_HSE_Enable>
 800ab90:	e003      	b.n	800ab9a <HAL_RCC_OscConfig+0x1aa>
 800ab92:	f7ff fbcc 	bl	800a32e <LL_RCC_HSE_Disable>
 800ab96:	f7ff fbac 	bl	800a2f2 <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	685b      	ldr	r3, [r3, #4]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d012      	beq.n	800abc8 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aba2:	f7fb f975 	bl	8005e90 <HAL_GetTick>
 800aba6:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800aba8:	e008      	b.n	800abbc <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800abaa:	f7fb f971 	bl	8005e90 <HAL_GetTick>
 800abae:	4602      	mov	r2, r0
 800abb0:	69fb      	ldr	r3, [r7, #28]
 800abb2:	1ad3      	subs	r3, r2, r3
 800abb4:	2b64      	cmp	r3, #100	; 0x64
 800abb6:	d901      	bls.n	800abbc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800abb8:	2303      	movs	r3, #3
 800abba:	e26e      	b.n	800b09a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() == 0U)
 800abbc:	f7ff fbc6 	bl	800a34c <LL_RCC_HSE_IsReady>
 800abc0:	4603      	mov	r3, r0
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d0f1      	beq.n	800abaa <HAL_RCC_OscConfig+0x1ba>
 800abc6:	e013      	b.n	800abf0 <HAL_RCC_OscConfig+0x200>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800abc8:	f7fb f962 	bl	8005e90 <HAL_GetTick>
 800abcc:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800abce:	e008      	b.n	800abe2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800abd0:	f7fb f95e 	bl	8005e90 <HAL_GetTick>
 800abd4:	4602      	mov	r2, r0
 800abd6:	69fb      	ldr	r3, [r7, #28]
 800abd8:	1ad3      	subs	r3, r2, r3
 800abda:	2b64      	cmp	r3, #100	; 0x64
 800abdc:	d901      	bls.n	800abe2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800abde:	2303      	movs	r3, #3
 800abe0:	e25b      	b.n	800b09a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() != 0U)
 800abe2:	f7ff fbb3 	bl	800a34c <LL_RCC_HSE_IsReady>
 800abe6:	4603      	mov	r3, r0
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d1f1      	bne.n	800abd0 <HAL_RCC_OscConfig+0x1e0>
 800abec:	e000      	b.n	800abf0 <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800abee:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	f003 0302 	and.w	r3, r3, #2
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d051      	beq.n	800aca0 <HAL_RCC_OscConfig+0x2b0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800abfc:	f7ff fd87 	bl	800a70e <LL_RCC_GetSysClkSource>
 800ac00:	6138      	str	r0, [r7, #16]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ac02:	f7ff fe8d 	bl	800a920 <LL_RCC_PLL_GetMainSource>
 800ac06:	60f8      	str	r0, [r7, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800ac08:	693b      	ldr	r3, [r7, #16]
 800ac0a:	2b04      	cmp	r3, #4
 800ac0c:	d005      	beq.n	800ac1a <HAL_RCC_OscConfig+0x22a>
 800ac0e:	693b      	ldr	r3, [r7, #16]
 800ac10:	2b0c      	cmp	r3, #12
 800ac12:	d113      	bne.n	800ac3c <HAL_RCC_OscConfig+0x24c>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	2b02      	cmp	r3, #2
 800ac18:	d110      	bne.n	800ac3c <HAL_RCC_OscConfig+0x24c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ac1a:	f7ff fbc7 	bl	800a3ac <LL_RCC_HSI_IsReady>
 800ac1e:	4603      	mov	r3, r0
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d005      	beq.n	800ac30 <HAL_RCC_OscConfig+0x240>
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	68db      	ldr	r3, [r3, #12]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d101      	bne.n	800ac30 <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	e234      	b.n	800b09a <HAL_RCC_OscConfig+0x6aa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	691b      	ldr	r3, [r3, #16]
 800ac34:	4618      	mov	r0, r3
 800ac36:	f7ff fbcb 	bl	800a3d0 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ac3a:	e031      	b.n	800aca0 <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	68db      	ldr	r3, [r3, #12]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d019      	beq.n	800ac78 <HAL_RCC_OscConfig+0x288>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ac44:	f7ff fb94 	bl	800a370 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac48:	f7fb f922 	bl	8005e90 <HAL_GetTick>
 800ac4c:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800ac4e:	e008      	b.n	800ac62 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ac50:	f7fb f91e 	bl	8005e90 <HAL_GetTick>
 800ac54:	4602      	mov	r2, r0
 800ac56:	69fb      	ldr	r3, [r7, #28]
 800ac58:	1ad3      	subs	r3, r2, r3
 800ac5a:	2b02      	cmp	r3, #2
 800ac5c:	d901      	bls.n	800ac62 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800ac5e:	2303      	movs	r3, #3
 800ac60:	e21b      	b.n	800b09a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() == 0U)
 800ac62:	f7ff fba3 	bl	800a3ac <LL_RCC_HSI_IsReady>
 800ac66:	4603      	mov	r3, r0
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d0f1      	beq.n	800ac50 <HAL_RCC_OscConfig+0x260>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	691b      	ldr	r3, [r3, #16]
 800ac70:	4618      	mov	r0, r3
 800ac72:	f7ff fbad 	bl	800a3d0 <LL_RCC_HSI_SetCalibTrimming>
 800ac76:	e013      	b.n	800aca0 <HAL_RCC_OscConfig+0x2b0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ac78:	f7ff fb89 	bl	800a38e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac7c:	f7fb f908 	bl	8005e90 <HAL_GetTick>
 800ac80:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800ac82:	e008      	b.n	800ac96 <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ac84:	f7fb f904 	bl	8005e90 <HAL_GetTick>
 800ac88:	4602      	mov	r2, r0
 800ac8a:	69fb      	ldr	r3, [r7, #28]
 800ac8c:	1ad3      	subs	r3, r2, r3
 800ac8e:	2b02      	cmp	r3, #2
 800ac90:	d901      	bls.n	800ac96 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800ac92:	2303      	movs	r3, #3
 800ac94:	e201      	b.n	800b09a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() != 0U)
 800ac96:	f7ff fb89 	bl	800a3ac <LL_RCC_HSI_IsReady>
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d1f1      	bne.n	800ac84 <HAL_RCC_OscConfig+0x294>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	f003 0308 	and.w	r3, r3, #8
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d106      	bne.n	800acba <HAL_RCC_OscConfig+0x2ca>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	f000 80a2 	beq.w	800adfe <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	695b      	ldr	r3, [r3, #20]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d075      	beq.n	800adae <HAL_RCC_OscConfig+0x3be>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	f003 0310 	and.w	r3, r3, #16
 800acca:	2b00      	cmp	r3, #0
 800accc:	d046      	beq.n	800ad5c <HAL_RCC_OscConfig+0x36c>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800acce:	f7ff fc40 	bl	800a552 <LL_RCC_LSI1_IsReady>
 800acd2:	4603      	mov	r3, r0
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d113      	bne.n	800ad00 <HAL_RCC_OscConfig+0x310>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800acd8:	f7ff fc19 	bl	800a50e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800acdc:	f7fb f8d8 	bl	8005e90 <HAL_GetTick>
 800ace0:	61f8      	str	r0, [r7, #28]

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800ace2:	e008      	b.n	800acf6 <HAL_RCC_OscConfig+0x306>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800ace4:	f7fb f8d4 	bl	8005e90 <HAL_GetTick>
 800ace8:	4602      	mov	r2, r0
 800acea:	69fb      	ldr	r3, [r7, #28]
 800acec:	1ad3      	subs	r3, r2, r3
 800acee:	2b02      	cmp	r3, #2
 800acf0:	d901      	bls.n	800acf6 <HAL_RCC_OscConfig+0x306>
            {
              return HAL_TIMEOUT;
 800acf2:	2303      	movs	r3, #3
 800acf4:	e1d1      	b.n	800b09a <HAL_RCC_OscConfig+0x6aa>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800acf6:	f7ff fc2c 	bl	800a552 <LL_RCC_LSI1_IsReady>
 800acfa:	4603      	mov	r3, r0
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d0f1      	beq.n	800ace4 <HAL_RCC_OscConfig+0x2f4>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800ad00:	f7ff fc39 	bl	800a576 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad04:	f7fb f8c4 	bl	8005e90 <HAL_GetTick>
 800ad08:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800ad0a:	e008      	b.n	800ad1e <HAL_RCC_OscConfig+0x32e>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800ad0c:	f7fb f8c0 	bl	8005e90 <HAL_GetTick>
 800ad10:	4602      	mov	r2, r0
 800ad12:	69fb      	ldr	r3, [r7, #28]
 800ad14:	1ad3      	subs	r3, r2, r3
 800ad16:	2b03      	cmp	r3, #3
 800ad18:	d901      	bls.n	800ad1e <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 800ad1a:	2303      	movs	r3, #3
 800ad1c:	e1bd      	b.n	800b09a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800ad1e:	f7ff fc4c 	bl	800a5ba <LL_RCC_LSI2_IsReady>
 800ad22:	4603      	mov	r3, r0
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d0f1      	beq.n	800ad0c <HAL_RCC_OscConfig+0x31c>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	699b      	ldr	r3, [r3, #24]
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	f7ff fc56 	bl	800a5de <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800ad32:	f7ff fbfd 	bl	800a530 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad36:	f7fb f8ab 	bl	8005e90 <HAL_GetTick>
 800ad3a:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800ad3c:	e008      	b.n	800ad50 <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800ad3e:	f7fb f8a7 	bl	8005e90 <HAL_GetTick>
 800ad42:	4602      	mov	r2, r0
 800ad44:	69fb      	ldr	r3, [r7, #28]
 800ad46:	1ad3      	subs	r3, r2, r3
 800ad48:	2b02      	cmp	r3, #2
 800ad4a:	d901      	bls.n	800ad50 <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 800ad4c:	2303      	movs	r3, #3
 800ad4e:	e1a4      	b.n	800b09a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800ad50:	f7ff fbff 	bl	800a552 <LL_RCC_LSI1_IsReady>
 800ad54:	4603      	mov	r3, r0
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d1f1      	bne.n	800ad3e <HAL_RCC_OscConfig+0x34e>
 800ad5a:	e050      	b.n	800adfe <HAL_RCC_OscConfig+0x40e>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800ad5c:	f7ff fbd7 	bl	800a50e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad60:	f7fb f896 	bl	8005e90 <HAL_GetTick>
 800ad64:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800ad66:	e00b      	b.n	800ad80 <HAL_RCC_OscConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800ad68:	f7fb f892 	bl	8005e90 <HAL_GetTick>
 800ad6c:	4602      	mov	r2, r0
 800ad6e:	69fb      	ldr	r3, [r7, #28]
 800ad70:	1ad3      	subs	r3, r2, r3
 800ad72:	2b02      	cmp	r3, #2
 800ad74:	d904      	bls.n	800ad80 <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 800ad76:	2303      	movs	r3, #3
 800ad78:	e18f      	b.n	800b09a <HAL_RCC_OscConfig+0x6aa>
 800ad7a:	bf00      	nop
 800ad7c:	2000007c 	.word	0x2000007c
        while (LL_RCC_LSI1_IsReady() == 0U)
 800ad80:	f7ff fbe7 	bl	800a552 <LL_RCC_LSI1_IsReady>
 800ad84:	4603      	mov	r3, r0
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d0ee      	beq.n	800ad68 <HAL_RCC_OscConfig+0x378>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800ad8a:	f7ff fc05 	bl	800a598 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800ad8e:	e008      	b.n	800ada2 <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800ad90:	f7fb f87e 	bl	8005e90 <HAL_GetTick>
 800ad94:	4602      	mov	r2, r0
 800ad96:	69fb      	ldr	r3, [r7, #28]
 800ad98:	1ad3      	subs	r3, r2, r3
 800ad9a:	2b03      	cmp	r3, #3
 800ad9c:	d901      	bls.n	800ada2 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 800ad9e:	2303      	movs	r3, #3
 800ada0:	e17b      	b.n	800b09a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800ada2:	f7ff fc0a 	bl	800a5ba <LL_RCC_LSI2_IsReady>
 800ada6:	4603      	mov	r3, r0
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d1f1      	bne.n	800ad90 <HAL_RCC_OscConfig+0x3a0>
 800adac:	e027      	b.n	800adfe <HAL_RCC_OscConfig+0x40e>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800adae:	f7ff fbf3 	bl	800a598 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800adb2:	f7fb f86d 	bl	8005e90 <HAL_GetTick>
 800adb6:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800adb8:	e008      	b.n	800adcc <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800adba:	f7fb f869 	bl	8005e90 <HAL_GetTick>
 800adbe:	4602      	mov	r2, r0
 800adc0:	69fb      	ldr	r3, [r7, #28]
 800adc2:	1ad3      	subs	r3, r2, r3
 800adc4:	2b03      	cmp	r3, #3
 800adc6:	d901      	bls.n	800adcc <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 800adc8:	2303      	movs	r3, #3
 800adca:	e166      	b.n	800b09a <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800adcc:	f7ff fbf5 	bl	800a5ba <LL_RCC_LSI2_IsReady>
 800add0:	4603      	mov	r3, r0
 800add2:	2b00      	cmp	r3, #0
 800add4:	d1f1      	bne.n	800adba <HAL_RCC_OscConfig+0x3ca>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800add6:	f7ff fbab 	bl	800a530 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800adda:	f7fb f859 	bl	8005e90 <HAL_GetTick>
 800adde:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800ade0:	e008      	b.n	800adf4 <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800ade2:	f7fb f855 	bl	8005e90 <HAL_GetTick>
 800ade6:	4602      	mov	r2, r0
 800ade8:	69fb      	ldr	r3, [r7, #28]
 800adea:	1ad3      	subs	r3, r2, r3
 800adec:	2b02      	cmp	r3, #2
 800adee:	d901      	bls.n	800adf4 <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 800adf0:	2303      	movs	r3, #3
 800adf2:	e152      	b.n	800b09a <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800adf4:	f7ff fbad 	bl	800a552 <LL_RCC_LSI1_IsReady>
 800adf8:	4603      	mov	r3, r0
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d1f1      	bne.n	800ade2 <HAL_RCC_OscConfig+0x3f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	f003 0304 	and.w	r3, r3, #4
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d05b      	beq.n	800aec2 <HAL_RCC_OscConfig+0x4d2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ae0a:	4ba6      	ldr	r3, [pc, #664]	; (800b0a4 <HAL_RCC_OscConfig+0x6b4>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d114      	bne.n	800ae40 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800ae16:	f7ff fa2d 	bl	800a274 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ae1a:	f7fb f839 	bl	8005e90 <HAL_GetTick>
 800ae1e:	61f8      	str	r0, [r7, #28]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ae20:	e008      	b.n	800ae34 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ae22:	f7fb f835 	bl	8005e90 <HAL_GetTick>
 800ae26:	4602      	mov	r2, r0
 800ae28:	69fb      	ldr	r3, [r7, #28]
 800ae2a:	1ad3      	subs	r3, r2, r3
 800ae2c:	2b02      	cmp	r3, #2
 800ae2e:	d901      	bls.n	800ae34 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800ae30:	2303      	movs	r3, #3
 800ae32:	e132      	b.n	800b09a <HAL_RCC_OscConfig+0x6aa>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ae34:	4b9b      	ldr	r3, [pc, #620]	; (800b0a4 <HAL_RCC_OscConfig+0x6b4>)
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d0f0      	beq.n	800ae22 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	689b      	ldr	r3, [r3, #8]
 800ae44:	2b01      	cmp	r3, #1
 800ae46:	d102      	bne.n	800ae4e <HAL_RCC_OscConfig+0x45e>
 800ae48:	f7ff fb0b 	bl	800a462 <LL_RCC_LSE_Enable>
 800ae4c:	e00c      	b.n	800ae68 <HAL_RCC_OscConfig+0x478>
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	689b      	ldr	r3, [r3, #8]
 800ae52:	2b05      	cmp	r3, #5
 800ae54:	d104      	bne.n	800ae60 <HAL_RCC_OscConfig+0x470>
 800ae56:	f7ff fb26 	bl	800a4a6 <LL_RCC_LSE_EnableBypass>
 800ae5a:	f7ff fb02 	bl	800a462 <LL_RCC_LSE_Enable>
 800ae5e:	e003      	b.n	800ae68 <HAL_RCC_OscConfig+0x478>
 800ae60:	f7ff fb10 	bl	800a484 <LL_RCC_LSE_Disable>
 800ae64:	f7ff fb30 	bl	800a4c8 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	689b      	ldr	r3, [r3, #8]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d014      	beq.n	800ae9a <HAL_RCC_OscConfig+0x4aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae70:	f7fb f80e 	bl	8005e90 <HAL_GetTick>
 800ae74:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800ae76:	e00a      	b.n	800ae8e <HAL_RCC_OscConfig+0x49e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ae78:	f7fb f80a 	bl	8005e90 <HAL_GetTick>
 800ae7c:	4602      	mov	r2, r0
 800ae7e:	69fb      	ldr	r3, [r7, #28]
 800ae80:	1ad3      	subs	r3, r2, r3
 800ae82:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae86:	4293      	cmp	r3, r2
 800ae88:	d901      	bls.n	800ae8e <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 800ae8a:	2303      	movs	r3, #3
 800ae8c:	e105      	b.n	800b09a <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() == 0U)
 800ae8e:	f7ff fb2c 	bl	800a4ea <LL_RCC_LSE_IsReady>
 800ae92:	4603      	mov	r3, r0
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d0ef      	beq.n	800ae78 <HAL_RCC_OscConfig+0x488>
 800ae98:	e013      	b.n	800aec2 <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae9a:	f7fa fff9 	bl	8005e90 <HAL_GetTick>
 800ae9e:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800aea0:	e00a      	b.n	800aeb8 <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aea2:	f7fa fff5 	bl	8005e90 <HAL_GetTick>
 800aea6:	4602      	mov	r2, r0
 800aea8:	69fb      	ldr	r3, [r7, #28]
 800aeaa:	1ad3      	subs	r3, r2, r3
 800aeac:	f241 3288 	movw	r2, #5000	; 0x1388
 800aeb0:	4293      	cmp	r3, r2
 800aeb2:	d901      	bls.n	800aeb8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 800aeb4:	2303      	movs	r3, #3
 800aeb6:	e0f0      	b.n	800b09a <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() != 0U)
 800aeb8:	f7ff fb17 	bl	800a4ea <LL_RCC_LSE_IsReady>
 800aebc:	4603      	mov	r3, r0
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d1ef      	bne.n	800aea2 <HAL_RCC_OscConfig+0x4b2>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d02c      	beq.n	800af28 <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d014      	beq.n	800af00 <HAL_RCC_OscConfig+0x510>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800aed6:	f7ff fa90 	bl	800a3fa <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aeda:	f7fa ffd9 	bl	8005e90 <HAL_GetTick>
 800aede:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800aee0:	e008      	b.n	800aef4 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800aee2:	f7fa ffd5 	bl	8005e90 <HAL_GetTick>
 800aee6:	4602      	mov	r2, r0
 800aee8:	69fb      	ldr	r3, [r7, #28]
 800aeea:	1ad3      	subs	r3, r2, r3
 800aeec:	2b02      	cmp	r3, #2
 800aeee:	d901      	bls.n	800aef4 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 800aef0:	2303      	movs	r3, #3
 800aef2:	e0d2      	b.n	800b09a <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800aef4:	f7ff faa3 	bl	800a43e <LL_RCC_HSI48_IsReady>
 800aef8:	4603      	mov	r3, r0
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d0f1      	beq.n	800aee2 <HAL_RCC_OscConfig+0x4f2>
 800aefe:	e013      	b.n	800af28 <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800af00:	f7ff fa8c 	bl	800a41c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af04:	f7fa ffc4 	bl	8005e90 <HAL_GetTick>
 800af08:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800af0a:	e008      	b.n	800af1e <HAL_RCC_OscConfig+0x52e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800af0c:	f7fa ffc0 	bl	8005e90 <HAL_GetTick>
 800af10:	4602      	mov	r2, r0
 800af12:	69fb      	ldr	r3, [r7, #28]
 800af14:	1ad3      	subs	r3, r2, r3
 800af16:	2b02      	cmp	r3, #2
 800af18:	d901      	bls.n	800af1e <HAL_RCC_OscConfig+0x52e>
        {
          return HAL_TIMEOUT;
 800af1a:	2303      	movs	r3, #3
 800af1c:	e0bd      	b.n	800b09a <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800af1e:	f7ff fa8e 	bl	800a43e <LL_RCC_HSI48_IsReady>
 800af22:	4603      	mov	r3, r0
 800af24:	2b00      	cmp	r3, #0
 800af26:	d1f1      	bne.n	800af0c <HAL_RCC_OscConfig+0x51c>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	f000 80b3 	beq.w	800b098 <HAL_RCC_OscConfig+0x6a8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800af32:	f7ff fbec 	bl	800a70e <LL_RCC_GetSysClkSource>
 800af36:	4603      	mov	r3, r0
 800af38:	2b0c      	cmp	r3, #12
 800af3a:	d076      	beq.n	800b02a <HAL_RCC_OscConfig+0x63a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af40:	2b02      	cmp	r3, #2
 800af42:	d14b      	bne.n	800afdc <HAL_RCC_OscConfig+0x5ec>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800af44:	f7ff fca6 	bl	800a894 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af48:	f7fa ffa2 	bl	8005e90 <HAL_GetTick>
 800af4c:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800af4e:	e008      	b.n	800af62 <HAL_RCC_OscConfig+0x572>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800af50:	f7fa ff9e 	bl	8005e90 <HAL_GetTick>
 800af54:	4602      	mov	r2, r0
 800af56:	69fb      	ldr	r3, [r7, #28]
 800af58:	1ad3      	subs	r3, r2, r3
 800af5a:	2b02      	cmp	r3, #2
 800af5c:	d901      	bls.n	800af62 <HAL_RCC_OscConfig+0x572>
          {
            return HAL_TIMEOUT;
 800af5e:	2303      	movs	r3, #3
 800af60:	e09b      	b.n	800b09a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 800af62:	f7ff fca6 	bl	800a8b2 <LL_RCC_PLL_IsReady>
 800af66:	4603      	mov	r3, r0
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d1f1      	bne.n	800af50 <HAL_RCC_OscConfig+0x560>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800af6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800af70:	68da      	ldr	r2, [r3, #12]
 800af72:	4b4d      	ldr	r3, [pc, #308]	; (800b0a8 <HAL_RCC_OscConfig+0x6b8>)
 800af74:	4013      	ands	r3, r2
 800af76:	687a      	ldr	r2, [r7, #4]
 800af78:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800af7a:	687a      	ldr	r2, [r7, #4]
 800af7c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800af7e:	4311      	orrs	r1, r2
 800af80:	687a      	ldr	r2, [r7, #4]
 800af82:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800af84:	0212      	lsls	r2, r2, #8
 800af86:	4311      	orrs	r1, r2
 800af88:	687a      	ldr	r2, [r7, #4]
 800af8a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800af8c:	4311      	orrs	r1, r2
 800af8e:	687a      	ldr	r2, [r7, #4]
 800af90:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800af92:	4311      	orrs	r1, r2
 800af94:	687a      	ldr	r2, [r7, #4]
 800af96:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800af98:	430a      	orrs	r2, r1
 800af9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800af9e:	4313      	orrs	r3, r2
 800afa0:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800afa2:	f7ff fc68 	bl	800a876 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800afa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800afaa:	68db      	ldr	r3, [r3, #12]
 800afac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800afb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800afb4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800afb6:	f7fa ff6b 	bl	8005e90 <HAL_GetTick>
 800afba:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 800afbc:	e008      	b.n	800afd0 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800afbe:	f7fa ff67 	bl	8005e90 <HAL_GetTick>
 800afc2:	4602      	mov	r2, r0
 800afc4:	69fb      	ldr	r3, [r7, #28]
 800afc6:	1ad3      	subs	r3, r2, r3
 800afc8:	2b02      	cmp	r3, #2
 800afca:	d901      	bls.n	800afd0 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 800afcc:	2303      	movs	r3, #3
 800afce:	e064      	b.n	800b09a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() == 0U)
 800afd0:	f7ff fc6f 	bl	800a8b2 <LL_RCC_PLL_IsReady>
 800afd4:	4603      	mov	r3, r0
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d0f1      	beq.n	800afbe <HAL_RCC_OscConfig+0x5ce>
 800afda:	e05d      	b.n	800b098 <HAL_RCC_OscConfig+0x6a8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800afdc:	f7ff fc5a 	bl	800a894 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800afe0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800afe4:	68db      	ldr	r3, [r3, #12]
 800afe6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800afea:	f023 0303 	bic.w	r3, r3, #3
 800afee:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 800aff0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aff4:	68db      	ldr	r3, [r3, #12]
 800aff6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800affa:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800affe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b002:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b004:	f7fa ff44 	bl	8005e90 <HAL_GetTick>
 800b008:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800b00a:	e008      	b.n	800b01e <HAL_RCC_OscConfig+0x62e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b00c:	f7fa ff40 	bl	8005e90 <HAL_GetTick>
 800b010:	4602      	mov	r2, r0
 800b012:	69fb      	ldr	r3, [r7, #28]
 800b014:	1ad3      	subs	r3, r2, r3
 800b016:	2b02      	cmp	r3, #2
 800b018:	d901      	bls.n	800b01e <HAL_RCC_OscConfig+0x62e>
          {
            return HAL_TIMEOUT;
 800b01a:	2303      	movs	r3, #3
 800b01c:	e03d      	b.n	800b09a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 800b01e:	f7ff fc48 	bl	800a8b2 <LL_RCC_PLL_IsReady>
 800b022:	4603      	mov	r3, r0
 800b024:	2b00      	cmp	r3, #0
 800b026:	d1f1      	bne.n	800b00c <HAL_RCC_OscConfig+0x61c>
 800b028:	e036      	b.n	800b098 <HAL_RCC_OscConfig+0x6a8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b02e:	2b01      	cmp	r3, #1
 800b030:	d101      	bne.n	800b036 <HAL_RCC_OscConfig+0x646>
      {
        return HAL_ERROR;
 800b032:	2301      	movs	r3, #1
 800b034:	e031      	b.n	800b09a <HAL_RCC_OscConfig+0x6aa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 800b036:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b03a:	68db      	ldr	r3, [r3, #12]
 800b03c:	60bb      	str	r3, [r7, #8]

        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	f003 0203 	and.w	r2, r3, #3
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b048:	429a      	cmp	r2, r3
 800b04a:	d123      	bne.n	800b094 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b056:	429a      	cmp	r2, r3
 800b058:	d11c      	bne.n	800b094 <HAL_RCC_OscConfig+0x6a4>
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	0a1b      	lsrs	r3, r3, #8
 800b05e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b066:	429a      	cmp	r2, r3
 800b068:	d114      	bne.n	800b094 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800b074:	429a      	cmp	r2, r3
 800b076:	d10d      	bne.n	800b094 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800b082:	429a      	cmp	r2, r3
 800b084:	d106      	bne.n	800b094 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800b086:	68bb      	ldr	r3, [r7, #8]
 800b088:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800b090:	429a      	cmp	r2, r3
 800b092:	d001      	beq.n	800b098 <HAL_RCC_OscConfig+0x6a8>
        {
          return HAL_ERROR;
 800b094:	2301      	movs	r3, #1
 800b096:	e000      	b.n	800b09a <HAL_RCC_OscConfig+0x6aa>
        }
      }
    }
  }
  return HAL_OK;
 800b098:	2300      	movs	r3, #0
}
 800b09a:	4618      	mov	r0, r3
 800b09c:	372c      	adds	r7, #44	; 0x2c
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	bd90      	pop	{r4, r7, pc}
 800b0a2:	bf00      	nop
 800b0a4:	58000400 	.word	0x58000400
 800b0a8:	11c1808c 	.word	0x11c1808c

0800b0ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b084      	sub	sp, #16
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
 800b0b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d101      	bne.n	800b0c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b0bc:	2301      	movs	r3, #1
 800b0be:	e12a      	b.n	800b316 <HAL_RCC_ClockConfig+0x26a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b0c0:	4b97      	ldr	r3, [pc, #604]	; (800b320 <HAL_RCC_ClockConfig+0x274>)
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	f003 0307 	and.w	r3, r3, #7
 800b0c8:	683a      	ldr	r2, [r7, #0]
 800b0ca:	429a      	cmp	r2, r3
 800b0cc:	d91b      	bls.n	800b106 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b0ce:	4b94      	ldr	r3, [pc, #592]	; (800b320 <HAL_RCC_ClockConfig+0x274>)
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	f023 0207 	bic.w	r2, r3, #7
 800b0d6:	4992      	ldr	r1, [pc, #584]	; (800b320 <HAL_RCC_ClockConfig+0x274>)
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	4313      	orrs	r3, r2
 800b0dc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b0de:	f7fa fed7 	bl	8005e90 <HAL_GetTick>
 800b0e2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b0e4:	e008      	b.n	800b0f8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800b0e6:	f7fa fed3 	bl	8005e90 <HAL_GetTick>
 800b0ea:	4602      	mov	r2, r0
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	1ad3      	subs	r3, r2, r3
 800b0f0:	2b02      	cmp	r3, #2
 800b0f2:	d901      	bls.n	800b0f8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800b0f4:	2303      	movs	r3, #3
 800b0f6:	e10e      	b.n	800b316 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b0f8:	4b89      	ldr	r3, [pc, #548]	; (800b320 <HAL_RCC_ClockConfig+0x274>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	f003 0307 	and.w	r3, r3, #7
 800b100:	683a      	ldr	r2, [r7, #0]
 800b102:	429a      	cmp	r2, r3
 800b104:	d1ef      	bne.n	800b0e6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	f003 0302 	and.w	r3, r3, #2
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d016      	beq.n	800b140 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	689b      	ldr	r3, [r3, #8]
 800b116:	4618      	mov	r0, r3
 800b118:	f7ff fb05 	bl	800a726 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800b11c:	f7fa feb8 	bl	8005e90 <HAL_GetTick>
 800b120:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800b122:	e008      	b.n	800b136 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800b124:	f7fa feb4 	bl	8005e90 <HAL_GetTick>
 800b128:	4602      	mov	r2, r0
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	1ad3      	subs	r3, r2, r3
 800b12e:	2b02      	cmp	r3, #2
 800b130:	d901      	bls.n	800b136 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800b132:	2303      	movs	r3, #3
 800b134:	e0ef      	b.n	800b316 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800b136:	f7ff fbff 	bl	800a938 <LL_RCC_IsActiveFlag_HPRE>
 800b13a:	4603      	mov	r3, r0
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d0f1      	beq.n	800b124 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	f003 0320 	and.w	r3, r3, #32
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d016      	beq.n	800b17a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	695b      	ldr	r3, [r3, #20]
 800b150:	4618      	mov	r0, r3
 800b152:	f7ff fafc 	bl	800a74e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800b156:	f7fa fe9b 	bl	8005e90 <HAL_GetTick>
 800b15a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800b15c:	e008      	b.n	800b170 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800b15e:	f7fa fe97 	bl	8005e90 <HAL_GetTick>
 800b162:	4602      	mov	r2, r0
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	1ad3      	subs	r3, r2, r3
 800b168:	2b02      	cmp	r3, #2
 800b16a:	d901      	bls.n	800b170 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800b16c:	2303      	movs	r3, #3
 800b16e:	e0d2      	b.n	800b316 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800b170:	f7ff fbf4 	bl	800a95c <LL_RCC_IsActiveFlag_C2HPRE>
 800b174:	4603      	mov	r3, r0
 800b176:	2b00      	cmp	r3, #0
 800b178:	d0f1      	beq.n	800b15e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b182:	2b00      	cmp	r3, #0
 800b184:	d016      	beq.n	800b1b4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	699b      	ldr	r3, [r3, #24]
 800b18a:	4618      	mov	r0, r3
 800b18c:	f7ff faf5 	bl	800a77a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800b190:	f7fa fe7e 	bl	8005e90 <HAL_GetTick>
 800b194:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800b196:	e008      	b.n	800b1aa <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800b198:	f7fa fe7a 	bl	8005e90 <HAL_GetTick>
 800b19c:	4602      	mov	r2, r0
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	1ad3      	subs	r3, r2, r3
 800b1a2:	2b02      	cmp	r3, #2
 800b1a4:	d901      	bls.n	800b1aa <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800b1a6:	2303      	movs	r3, #3
 800b1a8:	e0b5      	b.n	800b316 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800b1aa:	f7ff fbea 	bl	800a982 <LL_RCC_IsActiveFlag_SHDHPRE>
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d0f1      	beq.n	800b198 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	f003 0304 	and.w	r3, r3, #4
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d016      	beq.n	800b1ee <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	68db      	ldr	r3, [r3, #12]
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	f7ff faef 	bl	800a7a8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800b1ca:	f7fa fe61 	bl	8005e90 <HAL_GetTick>
 800b1ce:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800b1d0:	e008      	b.n	800b1e4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800b1d2:	f7fa fe5d 	bl	8005e90 <HAL_GetTick>
 800b1d6:	4602      	mov	r2, r0
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	1ad3      	subs	r3, r2, r3
 800b1dc:	2b02      	cmp	r3, #2
 800b1de:	d901      	bls.n	800b1e4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800b1e0:	2303      	movs	r3, #3
 800b1e2:	e098      	b.n	800b316 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800b1e4:	f7ff fbe0 	bl	800a9a8 <LL_RCC_IsActiveFlag_PPRE1>
 800b1e8:	4603      	mov	r3, r0
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d0f1      	beq.n	800b1d2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	f003 0308 	and.w	r3, r3, #8
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d017      	beq.n	800b22a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	691b      	ldr	r3, [r3, #16]
 800b1fe:	00db      	lsls	r3, r3, #3
 800b200:	4618      	mov	r0, r3
 800b202:	f7ff fae5 	bl	800a7d0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800b206:	f7fa fe43 	bl	8005e90 <HAL_GetTick>
 800b20a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800b20c:	e008      	b.n	800b220 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800b20e:	f7fa fe3f 	bl	8005e90 <HAL_GetTick>
 800b212:	4602      	mov	r2, r0
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	1ad3      	subs	r3, r2, r3
 800b218:	2b02      	cmp	r3, #2
 800b21a:	d901      	bls.n	800b220 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800b21c:	2303      	movs	r3, #3
 800b21e:	e07a      	b.n	800b316 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800b220:	f7ff fbd4 	bl	800a9cc <LL_RCC_IsActiveFlag_PPRE2>
 800b224:	4603      	mov	r3, r0
 800b226:	2b00      	cmp	r3, #0
 800b228:	d0f1      	beq.n	800b20e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	f003 0301 	and.w	r3, r3, #1
 800b232:	2b00      	cmp	r3, #0
 800b234:	d043      	beq.n	800b2be <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	685b      	ldr	r3, [r3, #4]
 800b23a:	2b02      	cmp	r3, #2
 800b23c:	d106      	bne.n	800b24c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800b23e:	f7ff f885 	bl	800a34c <LL_RCC_HSE_IsReady>
 800b242:	4603      	mov	r3, r0
 800b244:	2b00      	cmp	r3, #0
 800b246:	d11e      	bne.n	800b286 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800b248:	2301      	movs	r3, #1
 800b24a:	e064      	b.n	800b316 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	685b      	ldr	r3, [r3, #4]
 800b250:	2b03      	cmp	r3, #3
 800b252:	d106      	bne.n	800b262 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800b254:	f7ff fb2d 	bl	800a8b2 <LL_RCC_PLL_IsReady>
 800b258:	4603      	mov	r3, r0
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d113      	bne.n	800b286 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800b25e:	2301      	movs	r3, #1
 800b260:	e059      	b.n	800b316 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	685b      	ldr	r3, [r3, #4]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d106      	bne.n	800b278 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800b26a:	f7ff f9ed 	bl	800a648 <LL_RCC_MSI_IsReady>
 800b26e:	4603      	mov	r3, r0
 800b270:	2b00      	cmp	r3, #0
 800b272:	d108      	bne.n	800b286 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800b274:	2301      	movs	r3, #1
 800b276:	e04e      	b.n	800b316 <HAL_RCC_ClockConfig+0x26a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800b278:	f7ff f898 	bl	800a3ac <LL_RCC_HSI_IsReady>
 800b27c:	4603      	mov	r3, r0
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d101      	bne.n	800b286 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800b282:	2301      	movs	r3, #1
 800b284:	e047      	b.n	800b316 <HAL_RCC_ClockConfig+0x26a>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	685b      	ldr	r3, [r3, #4]
 800b28a:	4618      	mov	r0, r3
 800b28c:	f7ff fa2b 	bl	800a6e6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b290:	f7fa fdfe 	bl	8005e90 <HAL_GetTick>
 800b294:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b296:	e00a      	b.n	800b2ae <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b298:	f7fa fdfa 	bl	8005e90 <HAL_GetTick>
 800b29c:	4602      	mov	r2, r0
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	1ad3      	subs	r3, r2, r3
 800b2a2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2a6:	4293      	cmp	r3, r2
 800b2a8:	d901      	bls.n	800b2ae <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800b2aa:	2303      	movs	r3, #3
 800b2ac:	e033      	b.n	800b316 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b2ae:	f7ff fa2e 	bl	800a70e <LL_RCC_GetSysClkSource>
 800b2b2:	4602      	mov	r2, r0
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	685b      	ldr	r3, [r3, #4]
 800b2b8:	009b      	lsls	r3, r3, #2
 800b2ba:	429a      	cmp	r2, r3
 800b2bc:	d1ec      	bne.n	800b298 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b2be:	4b18      	ldr	r3, [pc, #96]	; (800b320 <HAL_RCC_ClockConfig+0x274>)
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	f003 0307 	and.w	r3, r3, #7
 800b2c6:	683a      	ldr	r2, [r7, #0]
 800b2c8:	429a      	cmp	r2, r3
 800b2ca:	d21b      	bcs.n	800b304 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b2cc:	4b14      	ldr	r3, [pc, #80]	; (800b320 <HAL_RCC_ClockConfig+0x274>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	f023 0207 	bic.w	r2, r3, #7
 800b2d4:	4912      	ldr	r1, [pc, #72]	; (800b320 <HAL_RCC_ClockConfig+0x274>)
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	4313      	orrs	r3, r2
 800b2da:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b2dc:	f7fa fdd8 	bl	8005e90 <HAL_GetTick>
 800b2e0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b2e2:	e008      	b.n	800b2f6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800b2e4:	f7fa fdd4 	bl	8005e90 <HAL_GetTick>
 800b2e8:	4602      	mov	r2, r0
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	1ad3      	subs	r3, r2, r3
 800b2ee:	2b02      	cmp	r3, #2
 800b2f0:	d901      	bls.n	800b2f6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800b2f2:	2303      	movs	r3, #3
 800b2f4:	e00f      	b.n	800b316 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b2f6:	4b0a      	ldr	r3, [pc, #40]	; (800b320 <HAL_RCC_ClockConfig+0x274>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	f003 0307 	and.w	r3, r3, #7
 800b2fe:	683a      	ldr	r2, [r7, #0]
 800b300:	429a      	cmp	r2, r3
 800b302:	d1ef      	bne.n	800b2e4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 800b304:	f7f9 ff16 	bl	8005134 <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800b308:	f7fa fdce 	bl	8005ea8 <HAL_GetTickPrio>
 800b30c:	4603      	mov	r3, r0
 800b30e:	4618      	mov	r0, r3
 800b310:	f7f9 fdea 	bl	8004ee8 <HAL_InitTick>
 800b314:	4603      	mov	r3, r0
}
 800b316:	4618      	mov	r0, r3
 800b318:	3710      	adds	r7, #16
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd80      	pop	{r7, pc}
 800b31e:	bf00      	nop
 800b320:	58004000 	.word	0x58004000

0800b324 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b324:	b590      	push	{r4, r7, lr}
 800b326:	b085      	sub	sp, #20
 800b328:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b32a:	f7ff f9f0 	bl	800a70e <LL_RCC_GetSysClkSource>
 800b32e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d10a      	bne.n	800b34c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800b336:	f7ff f9ac 	bl	800a692 <LL_RCC_MSI_GetRange>
 800b33a:	4603      	mov	r3, r0
 800b33c:	091b      	lsrs	r3, r3, #4
 800b33e:	f003 030f 	and.w	r3, r3, #15
 800b342:	4a2a      	ldr	r2, [pc, #168]	; (800b3ec <HAL_RCC_GetSysClockFreq+0xc8>)
 800b344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b348:	60fb      	str	r3, [r7, #12]
 800b34a:	e04a      	b.n	800b3e2 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2b04      	cmp	r3, #4
 800b350:	d102      	bne.n	800b358 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b352:	4b27      	ldr	r3, [pc, #156]	; (800b3f0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800b354:	60fb      	str	r3, [r7, #12]
 800b356:	e044      	b.n	800b3e2 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2b08      	cmp	r3, #8
 800b35c:	d10a      	bne.n	800b374 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800b35e:	f7fe ffa7 	bl	800a2b0 <LL_RCC_HSE_IsEnabledDiv2>
 800b362:	4603      	mov	r3, r0
 800b364:	2b01      	cmp	r3, #1
 800b366:	d102      	bne.n	800b36e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800b368:	4b21      	ldr	r3, [pc, #132]	; (800b3f0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800b36a:	60fb      	str	r3, [r7, #12]
 800b36c:	e039      	b.n	800b3e2 <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800b36e:	4b21      	ldr	r3, [pc, #132]	; (800b3f4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800b370:	60fb      	str	r3, [r7, #12]
 800b372:	e036      	b.n	800b3e2 <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800b374:	f7ff fad4 	bl	800a920 <LL_RCC_PLL_GetMainSource>
 800b378:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	2b02      	cmp	r3, #2
 800b37e:	d002      	beq.n	800b386 <HAL_RCC_GetSysClockFreq+0x62>
 800b380:	2b03      	cmp	r3, #3
 800b382:	d003      	beq.n	800b38c <HAL_RCC_GetSysClockFreq+0x68>
 800b384:	e00d      	b.n	800b3a2 <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800b386:	4b1a      	ldr	r3, [pc, #104]	; (800b3f0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800b388:	60bb      	str	r3, [r7, #8]
        break;
 800b38a:	e015      	b.n	800b3b8 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800b38c:	f7fe ff90 	bl	800a2b0 <LL_RCC_HSE_IsEnabledDiv2>
 800b390:	4603      	mov	r3, r0
 800b392:	2b01      	cmp	r3, #1
 800b394:	d102      	bne.n	800b39c <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800b396:	4b16      	ldr	r3, [pc, #88]	; (800b3f0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800b398:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800b39a:	e00d      	b.n	800b3b8 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 800b39c:	4b15      	ldr	r3, [pc, #84]	; (800b3f4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800b39e:	60bb      	str	r3, [r7, #8]
        break;
 800b3a0:	e00a      	b.n	800b3b8 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800b3a2:	f7ff f976 	bl	800a692 <LL_RCC_MSI_GetRange>
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	091b      	lsrs	r3, r3, #4
 800b3aa:	f003 030f 	and.w	r3, r3, #15
 800b3ae:	4a0f      	ldr	r2, [pc, #60]	; (800b3ec <HAL_RCC_GetSysClockFreq+0xc8>)
 800b3b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b3b4:	60bb      	str	r3, [r7, #8]
        break;
 800b3b6:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 800b3b8:	f7ff fa8d 	bl	800a8d6 <LL_RCC_PLL_GetN>
 800b3bc:	4602      	mov	r2, r0
 800b3be:	68bb      	ldr	r3, [r7, #8]
 800b3c0:	fb03 f402 	mul.w	r4, r3, r2
 800b3c4:	f7ff faa0 	bl	800a908 <LL_RCC_PLL_GetDivider>
 800b3c8:	4603      	mov	r3, r0
 800b3ca:	091b      	lsrs	r3, r3, #4
 800b3cc:	3301      	adds	r3, #1
 800b3ce:	fbb4 f4f3 	udiv	r4, r4, r3
 800b3d2:	f7ff fa8d 	bl	800a8f0 <LL_RCC_PLL_GetR>
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	0f5b      	lsrs	r3, r3, #29
 800b3da:	3301      	adds	r3, #1
 800b3dc:	fbb4 f3f3 	udiv	r3, r4, r3
 800b3e0:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 800b3e2:	68fb      	ldr	r3, [r7, #12]
}
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	3714      	adds	r7, #20
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	bd90      	pop	{r4, r7, pc}
 800b3ec:	08016b18 	.word	0x08016b18
 800b3f0:	00f42400 	.word	0x00f42400
 800b3f4:	01e84800 	.word	0x01e84800

0800b3f8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b3f8:	b598      	push	{r3, r4, r7, lr}
 800b3fa:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800b3fc:	f7ff ff92 	bl	800b324 <HAL_RCC_GetSysClockFreq>
 800b400:	4604      	mov	r4, r0
 800b402:	f7ff f9f9 	bl	800a7f8 <LL_RCC_GetAHBPrescaler>
 800b406:	4603      	mov	r3, r0
 800b408:	091b      	lsrs	r3, r3, #4
 800b40a:	f003 030f 	and.w	r3, r3, #15
 800b40e:	4a03      	ldr	r2, [pc, #12]	; (800b41c <HAL_RCC_GetHCLKFreq+0x24>)
 800b410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b414:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800b418:	4618      	mov	r0, r3
 800b41a:	bd98      	pop	{r3, r4, r7, pc}
 800b41c:	08016ab8 	.word	0x08016ab8

0800b420 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b420:	b598      	push	{r3, r4, r7, lr}
 800b422:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800b424:	f7ff ffe8 	bl	800b3f8 <HAL_RCC_GetHCLKFreq>
 800b428:	4604      	mov	r4, r0
 800b42a:	f7ff fa18 	bl	800a85e <LL_RCC_GetAPB2Prescaler>
 800b42e:	4603      	mov	r3, r0
 800b430:	0adb      	lsrs	r3, r3, #11
 800b432:	f003 0307 	and.w	r3, r3, #7
 800b436:	4a04      	ldr	r2, [pc, #16]	; (800b448 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b43c:	f003 031f 	and.w	r3, r3, #31
 800b440:	fa24 f303 	lsr.w	r3, r4, r3
}
 800b444:	4618      	mov	r0, r3
 800b446:	bd98      	pop	{r3, r4, r7, pc}
 800b448:	08016af8 	.word	0x08016af8

0800b44c <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b082      	sub	sp, #8
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
 800b454:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |  \
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	226f      	movs	r2, #111	; 0x6f
 800b45a:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 800b45c:	f7ff f957 	bl	800a70e <LL_RCC_GetSysClkSource>
 800b460:	4602      	mov	r2, r0
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 800b466:	f7ff f9c7 	bl	800a7f8 <LL_RCC_GetAHBPrescaler>
 800b46a:	4602      	mov	r2, r0
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 800b470:	f7ff f9e9 	bl	800a846 <LL_RCC_GetAPB1Prescaler>
 800b474:	4602      	mov	r2, r0
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 800b47a:	f7ff f9f0 	bl	800a85e <LL_RCC_GetAPB2Prescaler>
 800b47e:	4602      	mov	r2, r0
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 800b484:	f7ff f9c4 	bl	800a810 <LL_C2_RCC_GetAHBPrescaler>
 800b488:	4602      	mov	r2, r0
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 800b48e:	f7ff f9cc 	bl	800a82a <LL_RCC_GetAHB4Prescaler>
 800b492:	4602      	mov	r2, r0
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800b498:	4b04      	ldr	r3, [pc, #16]	; (800b4ac <HAL_RCC_GetClockConfig+0x60>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	f003 0207 	and.w	r2, r3, #7
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	601a      	str	r2, [r3, #0]
}
 800b4a4:	bf00      	nop
 800b4a6:	3708      	adds	r7, #8
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bd80      	pop	{r7, pc}
 800b4ac:	58004000 	.word	0x58004000

0800b4b0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800b4b0:	b590      	push	{r4, r7, lr}
 800b4b2:	b085      	sub	sp, #20
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2bb0      	cmp	r3, #176	; 0xb0
 800b4bc:	d903      	bls.n	800b4c6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800b4be:	4b15      	ldr	r3, [pc, #84]	; (800b514 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800b4c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4c2:	60fb      	str	r3, [r7, #12]
 800b4c4:	e007      	b.n	800b4d6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	091b      	lsrs	r3, r3, #4
 800b4ca:	f003 030f 	and.w	r3, r3, #15
 800b4ce:	4a11      	ldr	r2, [pc, #68]	; (800b514 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800b4d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b4d4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800b4d6:	f7ff f9a8 	bl	800a82a <LL_RCC_GetAHB4Prescaler>
 800b4da:	4603      	mov	r3, r0
 800b4dc:	091b      	lsrs	r3, r3, #4
 800b4de:	f003 030f 	and.w	r3, r3, #15
 800b4e2:	4a0d      	ldr	r2, [pc, #52]	; (800b518 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800b4e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b4e8:	68fa      	ldr	r2, [r7, #12]
 800b4ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4ee:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	4a0a      	ldr	r2, [pc, #40]	; (800b51c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800b4f4:	fba2 2303 	umull	r2, r3, r2, r3
 800b4f8:	0c9c      	lsrs	r4, r3, #18
 800b4fa:	f7fe fecb 	bl	800a294 <HAL_PWREx_GetVoltageRange>
 800b4fe:	4603      	mov	r3, r0
 800b500:	4619      	mov	r1, r3
 800b502:	4620      	mov	r0, r4
 800b504:	f000 f80c 	bl	800b520 <RCC_SetFlashLatency>
 800b508:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 800b50a:	4618      	mov	r0, r3
 800b50c:	3714      	adds	r7, #20
 800b50e:	46bd      	mov	sp, r7
 800b510:	bd90      	pop	{r4, r7, pc}
 800b512:	bf00      	nop
 800b514:	08016b18 	.word	0x08016b18
 800b518:	08016ab8 	.word	0x08016ab8
 800b51c:	431bde83 	.word	0x431bde83

0800b520 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800b520:	b590      	push	{r4, r7, lr}
 800b522:	b093      	sub	sp, #76	; 0x4c
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
 800b528:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800b52a:	4b39      	ldr	r3, [pc, #228]	; (800b610 <RCC_SetFlashLatency+0xf0>)
 800b52c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800b530:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b532:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800b536:	4a37      	ldr	r2, [pc, #220]	; (800b614 <RCC_SetFlashLatency+0xf4>)
 800b538:	f107 031c 	add.w	r3, r7, #28
 800b53c:	ca07      	ldmia	r2, {r0, r1, r2}
 800b53e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800b542:	4b35      	ldr	r3, [pc, #212]	; (800b618 <RCC_SetFlashLatency+0xf8>)
 800b544:	f107 040c 	add.w	r4, r7, #12
 800b548:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b54a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800b54e:	2300      	movs	r3, #0
 800b550:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b558:	d11c      	bne.n	800b594 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800b55a:	2300      	movs	r3, #0
 800b55c:	643b      	str	r3, [r7, #64]	; 0x40
 800b55e:	e015      	b.n	800b58c <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800b560:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b562:	009b      	lsls	r3, r3, #2
 800b564:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800b568:	4413      	add	r3, r2
 800b56a:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800b56e:	687a      	ldr	r2, [r7, #4]
 800b570:	429a      	cmp	r2, r3
 800b572:	d808      	bhi.n	800b586 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800b574:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b576:	009b      	lsls	r3, r3, #2
 800b578:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800b57c:	4413      	add	r3, r2
 800b57e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800b582:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800b584:	e022      	b.n	800b5cc <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800b586:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b588:	3301      	adds	r3, #1
 800b58a:	643b      	str	r3, [r7, #64]	; 0x40
 800b58c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b58e:	2b03      	cmp	r3, #3
 800b590:	d9e6      	bls.n	800b560 <RCC_SetFlashLatency+0x40>
 800b592:	e01b      	b.n	800b5cc <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800b594:	2300      	movs	r3, #0
 800b596:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b598:	e015      	b.n	800b5c6 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800b59a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b59c:	009b      	lsls	r3, r3, #2
 800b59e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800b5a2:	4413      	add	r3, r2
 800b5a4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800b5a8:	687a      	ldr	r2, [r7, #4]
 800b5aa:	429a      	cmp	r2, r3
 800b5ac:	d808      	bhi.n	800b5c0 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800b5ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5b0:	009b      	lsls	r3, r3, #2
 800b5b2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800b5b6:	4413      	add	r3, r2
 800b5b8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800b5bc:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800b5be:	e005      	b.n	800b5cc <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800b5c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5c2:	3301      	adds	r3, #1
 800b5c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b5c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5c8:	2b02      	cmp	r3, #2
 800b5ca:	d9e6      	bls.n	800b59a <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 800b5cc:	4b13      	ldr	r3, [pc, #76]	; (800b61c <RCC_SetFlashLatency+0xfc>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	f023 0207 	bic.w	r2, r3, #7
 800b5d4:	4911      	ldr	r1, [pc, #68]	; (800b61c <RCC_SetFlashLatency+0xfc>)
 800b5d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b5d8:	4313      	orrs	r3, r2
 800b5da:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b5dc:	f7fa fc58 	bl	8005e90 <HAL_GetTick>
 800b5e0:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800b5e2:	e008      	b.n	800b5f6 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800b5e4:	f7fa fc54 	bl	8005e90 <HAL_GetTick>
 800b5e8:	4602      	mov	r2, r0
 800b5ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ec:	1ad3      	subs	r3, r2, r3
 800b5ee:	2b02      	cmp	r3, #2
 800b5f0:	d901      	bls.n	800b5f6 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 800b5f2:	2303      	movs	r3, #3
 800b5f4:	e007      	b.n	800b606 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800b5f6:	4b09      	ldr	r3, [pc, #36]	; (800b61c <RCC_SetFlashLatency+0xfc>)
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	f003 0307 	and.w	r3, r3, #7
 800b5fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b600:	429a      	cmp	r2, r3
 800b602:	d1ef      	bne.n	800b5e4 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 800b604:	2300      	movs	r3, #0
}
 800b606:	4618      	mov	r0, r3
 800b608:	374c      	adds	r7, #76	; 0x4c
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd90      	pop	{r4, r7, pc}
 800b60e:	bf00      	nop
 800b610:	080164c0 	.word	0x080164c0
 800b614:	080164d0 	.word	0x080164d0
 800b618:	080164dc 	.word	0x080164dc
 800b61c:	58004000 	.word	0x58004000

0800b620 <LL_RCC_LSE_IsEnabled>:
{
 800b620:	b480      	push	{r7}
 800b622:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800b624:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b628:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b62c:	f003 0301 	and.w	r3, r3, #1
 800b630:	2b01      	cmp	r3, #1
 800b632:	d101      	bne.n	800b638 <LL_RCC_LSE_IsEnabled+0x18>
 800b634:	2301      	movs	r3, #1
 800b636:	e000      	b.n	800b63a <LL_RCC_LSE_IsEnabled+0x1a>
 800b638:	2300      	movs	r3, #0
}
 800b63a:	4618      	mov	r0, r3
 800b63c:	46bd      	mov	sp, r7
 800b63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b642:	4770      	bx	lr

0800b644 <LL_RCC_LSE_IsReady>:
{
 800b644:	b480      	push	{r7}
 800b646:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800b648:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b64c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b650:	f003 0302 	and.w	r3, r3, #2
 800b654:	2b02      	cmp	r3, #2
 800b656:	d101      	bne.n	800b65c <LL_RCC_LSE_IsReady+0x18>
 800b658:	2301      	movs	r3, #1
 800b65a:	e000      	b.n	800b65e <LL_RCC_LSE_IsReady+0x1a>
 800b65c:	2300      	movs	r3, #0
}
 800b65e:	4618      	mov	r0, r3
 800b660:	46bd      	mov	sp, r7
 800b662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b666:	4770      	bx	lr

0800b668 <LL_RCC_SetRFWKPClockSource>:
{
 800b668:	b480      	push	{r7}
 800b66a:	b083      	sub	sp, #12
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800b670:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b674:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b678:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800b67c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	4313      	orrs	r3, r2
 800b684:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800b688:	bf00      	nop
 800b68a:	370c      	adds	r7, #12
 800b68c:	46bd      	mov	sp, r7
 800b68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b692:	4770      	bx	lr

0800b694 <LL_RCC_SetSMPSClockSource>:
{
 800b694:	b480      	push	{r7}
 800b696:	b083      	sub	sp, #12
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800b69c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b6a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6a2:	f023 0203 	bic.w	r2, r3, #3
 800b6a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	4313      	orrs	r3, r2
 800b6ae:	624b      	str	r3, [r1, #36]	; 0x24
}
 800b6b0:	bf00      	nop
 800b6b2:	370c      	adds	r7, #12
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ba:	4770      	bx	lr

0800b6bc <LL_RCC_SetSMPSPrescaler>:
{
 800b6bc:	b480      	push	{r7}
 800b6be:	b083      	sub	sp, #12
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800b6c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b6c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6ca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b6ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	4313      	orrs	r3, r2
 800b6d6:	624b      	str	r3, [r1, #36]	; 0x24
}
 800b6d8:	bf00      	nop
 800b6da:	370c      	adds	r7, #12
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e2:	4770      	bx	lr

0800b6e4 <LL_RCC_SetUSARTClockSource>:
{
 800b6e4:	b480      	push	{r7}
 800b6e6:	b083      	sub	sp, #12
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800b6ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b6f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6f4:	f023 0203 	bic.w	r2, r3, #3
 800b6f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	4313      	orrs	r3, r2
 800b700:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800b704:	bf00      	nop
 800b706:	370c      	adds	r7, #12
 800b708:	46bd      	mov	sp, r7
 800b70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70e:	4770      	bx	lr

0800b710 <LL_RCC_SetLPUARTClockSource>:
{
 800b710:	b480      	push	{r7}
 800b712:	b083      	sub	sp, #12
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800b718:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b71c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b720:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b724:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	4313      	orrs	r3, r2
 800b72c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800b730:	bf00      	nop
 800b732:	370c      	adds	r7, #12
 800b734:	46bd      	mov	sp, r7
 800b736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73a:	4770      	bx	lr

0800b73c <LL_RCC_SetI2CClockSource>:
{
 800b73c:	b480      	push	{r7}
 800b73e:	b083      	sub	sp, #12
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800b744:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b748:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	091b      	lsrs	r3, r3, #4
 800b750:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800b754:	43db      	mvns	r3, r3
 800b756:	401a      	ands	r2, r3
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	011b      	lsls	r3, r3, #4
 800b75c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800b760:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b764:	4313      	orrs	r3, r2
 800b766:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800b76a:	bf00      	nop
 800b76c:	370c      	adds	r7, #12
 800b76e:	46bd      	mov	sp, r7
 800b770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b774:	4770      	bx	lr

0800b776 <LL_RCC_SetLPTIMClockSource>:
{
 800b776:	b480      	push	{r7}
 800b778:	b083      	sub	sp, #12
 800b77a:	af00      	add	r7, sp, #0
 800b77c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800b77e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b782:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	0c1b      	lsrs	r3, r3, #16
 800b78a:	041b      	lsls	r3, r3, #16
 800b78c:	43db      	mvns	r3, r3
 800b78e:	401a      	ands	r2, r3
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	041b      	lsls	r3, r3, #16
 800b794:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b798:	4313      	orrs	r3, r2
 800b79a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800b79e:	bf00      	nop
 800b7a0:	370c      	adds	r7, #12
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a8:	4770      	bx	lr

0800b7aa <LL_RCC_SetSAIClockSource>:
{
 800b7aa:	b480      	push	{r7}
 800b7ac:	b083      	sub	sp, #12
 800b7ae:	af00      	add	r7, sp, #0
 800b7b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800b7b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b7b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b7be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	4313      	orrs	r3, r2
 800b7c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800b7ca:	bf00      	nop
 800b7cc:	370c      	adds	r7, #12
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d4:	4770      	bx	lr

0800b7d6 <LL_RCC_SetRNGClockSource>:
{
 800b7d6:	b480      	push	{r7}
 800b7d8:	b083      	sub	sp, #12
 800b7da:	af00      	add	r7, sp, #0
 800b7dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800b7de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b7e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7e6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800b7ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	4313      	orrs	r3, r2
 800b7f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800b7f6:	bf00      	nop
 800b7f8:	370c      	adds	r7, #12
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b800:	4770      	bx	lr

0800b802 <LL_RCC_SetCLK48ClockSource>:
{
 800b802:	b480      	push	{r7}
 800b804:	b083      	sub	sp, #12
 800b806:	af00      	add	r7, sp, #0
 800b808:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800b80a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b80e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b812:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b816:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	4313      	orrs	r3, r2
 800b81e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800b822:	bf00      	nop
 800b824:	370c      	adds	r7, #12
 800b826:	46bd      	mov	sp, r7
 800b828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82c:	4770      	bx	lr

0800b82e <LL_RCC_SetUSBClockSource>:
{
 800b82e:	b580      	push	{r7, lr}
 800b830:	b082      	sub	sp, #8
 800b832:	af00      	add	r7, sp, #0
 800b834:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800b836:	6878      	ldr	r0, [r7, #4]
 800b838:	f7ff ffe3 	bl	800b802 <LL_RCC_SetCLK48ClockSource>
}
 800b83c:	bf00      	nop
 800b83e:	3708      	adds	r7, #8
 800b840:	46bd      	mov	sp, r7
 800b842:	bd80      	pop	{r7, pc}

0800b844 <LL_RCC_SetADCClockSource>:
{
 800b844:	b480      	push	{r7}
 800b846:	b083      	sub	sp, #12
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800b84c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b854:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b858:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	4313      	orrs	r3, r2
 800b860:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800b864:	bf00      	nop
 800b866:	370c      	adds	r7, #12
 800b868:	46bd      	mov	sp, r7
 800b86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86e:	4770      	bx	lr

0800b870 <LL_RCC_SetRTCClockSource>:
{
 800b870:	b480      	push	{r7}
 800b872:	b083      	sub	sp, #12
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800b878:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b87c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b880:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b884:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	4313      	orrs	r3, r2
 800b88c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800b890:	bf00      	nop
 800b892:	370c      	adds	r7, #12
 800b894:	46bd      	mov	sp, r7
 800b896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89a:	4770      	bx	lr

0800b89c <LL_RCC_GetRTCClockSource>:
{
 800b89c:	b480      	push	{r7}
 800b89e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800b8a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b8a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b8a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b4:	4770      	bx	lr

0800b8b6 <LL_RCC_ForceBackupDomainReset>:
{
 800b8b6:	b480      	push	{r7}
 800b8b8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800b8ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b8be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b8c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b8c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b8ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800b8ce:	bf00      	nop
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d6:	4770      	bx	lr

0800b8d8 <LL_RCC_ReleaseBackupDomainReset>:
{
 800b8d8:	b480      	push	{r7}
 800b8da:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800b8dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b8e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b8e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b8e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b8ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800b8f0:	bf00      	nop
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f8:	4770      	bx	lr

0800b8fa <LL_RCC_PLLSAI1_Enable>:
{
 800b8fa:	b480      	push	{r7}
 800b8fc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800b8fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b908:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b90c:	6013      	str	r3, [r2, #0]
}
 800b90e:	bf00      	nop
 800b910:	46bd      	mov	sp, r7
 800b912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b916:	4770      	bx	lr

0800b918 <LL_RCC_PLLSAI1_Disable>:
{
 800b918:	b480      	push	{r7}
 800b91a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800b91c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b926:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b92a:	6013      	str	r3, [r2, #0]
}
 800b92c:	bf00      	nop
 800b92e:	46bd      	mov	sp, r7
 800b930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b934:	4770      	bx	lr

0800b936 <LL_RCC_PLLSAI1_IsReady>:
{
 800b936:	b480      	push	{r7}
 800b938:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800b93a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b944:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b948:	d101      	bne.n	800b94e <LL_RCC_PLLSAI1_IsReady+0x18>
 800b94a:	2301      	movs	r3, #1
 800b94c:	e000      	b.n	800b950 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800b94e:	2300      	movs	r3, #0
}
 800b950:	4618      	mov	r0, r3
 800b952:	46bd      	mov	sp, r7
 800b954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b958:	4770      	bx	lr

0800b95a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b95a:	b580      	push	{r7, lr}
 800b95c:	b088      	sub	sp, #32
 800b95e:	af00      	add	r7, sp, #0
 800b960:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800b962:	2300      	movs	r3, #0
 800b964:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800b966:	2300      	movs	r3, #0
 800b968:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b972:	2b00      	cmp	r3, #0
 800b974:	d033      	beq.n	800b9de <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b97a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b97e:	d00c      	beq.n	800b99a <HAL_RCCEx_PeriphCLKConfig+0x40>
 800b980:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b984:	d802      	bhi.n	800b98c <HAL_RCCEx_PeriphCLKConfig+0x32>
 800b986:	2b00      	cmp	r3, #0
 800b988:	d010      	beq.n	800b9ac <HAL_RCCEx_PeriphCLKConfig+0x52>
 800b98a:	e017      	b.n	800b9bc <HAL_RCCEx_PeriphCLKConfig+0x62>
 800b98c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b990:	d017      	beq.n	800b9c2 <HAL_RCCEx_PeriphCLKConfig+0x68>
 800b992:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800b996:	d016      	beq.n	800b9c6 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 800b998:	e010      	b.n	800b9bc <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800b99a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b99e:	68db      	ldr	r3, [r3, #12]
 800b9a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b9a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b9a8:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800b9aa:	e00d      	b.n	800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x6e>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	3304      	adds	r3, #4
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	f000 f947 	bl	800bc44 <RCCEx_PLLSAI1_ConfigNP>
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800b9ba:	e005      	b.n	800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800b9bc:	2301      	movs	r3, #1
 800b9be:	77fb      	strb	r3, [r7, #31]
        break;
 800b9c0:	e002      	b.n	800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 800b9c2:	bf00      	nop
 800b9c4:	e000      	b.n	800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 800b9c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b9c8:	7ffb      	ldrb	r3, [r7, #31]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d105      	bne.n	800b9da <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	f7ff fee9 	bl	800b7aa <LL_RCC_SetSAIClockSource>
 800b9d8:	e001      	b.n	800b9de <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9da:	7ffb      	ldrb	r3, [r7, #31]
 800b9dc:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d046      	beq.n	800ba78 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800b9ea:	f7ff ff57 	bl	800b89c <LL_RCC_GetRTCClockSource>
 800b9ee:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9f4:	69ba      	ldr	r2, [r7, #24]
 800b9f6:	429a      	cmp	r2, r3
 800b9f8:	d03c      	beq.n	800ba74 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800b9fa:	f7fe fc3b 	bl	800a274 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800b9fe:	69bb      	ldr	r3, [r7, #24]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d105      	bne.n	800ba10 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba08:	4618      	mov	r0, r3
 800ba0a:	f7ff ff31 	bl	800b870 <LL_RCC_SetRTCClockSource>
 800ba0e:	e02e      	b.n	800ba6e <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800ba10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ba14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba18:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800ba1a:	f7ff ff4c 	bl	800b8b6 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800ba1e:	f7ff ff5b 	bl	800b8d8 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800ba22:	697b      	ldr	r3, [r7, #20]
 800ba24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba2c:	4313      	orrs	r3, r2
 800ba2e:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800ba30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ba34:	697b      	ldr	r3, [r7, #20]
 800ba36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800ba3a:	f7ff fdf1 	bl	800b620 <LL_RCC_LSE_IsEnabled>
 800ba3e:	4603      	mov	r3, r0
 800ba40:	2b01      	cmp	r3, #1
 800ba42:	d114      	bne.n	800ba6e <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ba44:	f7fa fa24 	bl	8005e90 <HAL_GetTick>
 800ba48:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800ba4a:	e00b      	b.n	800ba64 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ba4c:	f7fa fa20 	bl	8005e90 <HAL_GetTick>
 800ba50:	4602      	mov	r2, r0
 800ba52:	693b      	ldr	r3, [r7, #16]
 800ba54:	1ad3      	subs	r3, r2, r3
 800ba56:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba5a:	4293      	cmp	r3, r2
 800ba5c:	d902      	bls.n	800ba64 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 800ba5e:	2303      	movs	r3, #3
 800ba60:	77fb      	strb	r3, [r7, #31]
              break;
 800ba62:	e004      	b.n	800ba6e <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 800ba64:	f7ff fdee 	bl	800b644 <LL_RCC_LSE_IsReady>
 800ba68:	4603      	mov	r3, r0
 800ba6a:	2b01      	cmp	r3, #1
 800ba6c:	d1ee      	bne.n	800ba4c <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800ba6e:	7ffb      	ldrb	r3, [r7, #31]
 800ba70:	77bb      	strb	r3, [r7, #30]
 800ba72:	e001      	b.n	800ba78 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba74:	7ffb      	ldrb	r3, [r7, #31]
 800ba76:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	f003 0301 	and.w	r3, r3, #1
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d004      	beq.n	800ba8e <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	699b      	ldr	r3, [r3, #24]
 800ba88:	4618      	mov	r0, r3
 800ba8a:	f7ff fe2b 	bl	800b6e4 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	f003 0302 	and.w	r3, r3, #2
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d004      	beq.n	800baa4 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	69db      	ldr	r3, [r3, #28]
 800ba9e:	4618      	mov	r0, r3
 800baa0:	f7ff fe36 	bl	800b710 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	f003 0310 	and.w	r3, r3, #16
 800baac:	2b00      	cmp	r3, #0
 800baae:	d004      	beq.n	800baba <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bab4:	4618      	mov	r0, r3
 800bab6:	f7ff fe5e 	bl	800b776 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	f003 0320 	and.w	r3, r3, #32
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d004      	beq.n	800bad0 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baca:	4618      	mov	r0, r3
 800bacc:	f7ff fe53 	bl	800b776 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	f003 0304 	and.w	r3, r3, #4
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d004      	beq.n	800bae6 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	6a1b      	ldr	r3, [r3, #32]
 800bae0:	4618      	mov	r0, r3
 800bae2:	f7ff fe2b 	bl	800b73c <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	f003 0308 	and.w	r3, r3, #8
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d004      	beq.n	800bafc <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baf6:	4618      	mov	r0, r3
 800baf8:	f7ff fe20 	bl	800b73c <LL_RCC_SetI2CClockSource>
  }
#endif

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d022      	beq.n	800bb4e <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	f7ff fe8e 	bl	800b82e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bb1a:	d107      	bne.n	800bb2c <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800bb1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bb20:	68db      	ldr	r3, [r3, #12]
 800bb22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800bb26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bb2a:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bb34:	d10b      	bne.n	800bb4e <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	3304      	adds	r3, #4
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	f000 f8dd 	bl	800bcfa <RCCEx_PLLSAI1_ConfigNQ>
 800bb40:	4603      	mov	r3, r0
 800bb42:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800bb44:	7ffb      	ldrb	r3, [r7, #31]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d001      	beq.n	800bb4e <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      {
        /* set overall return value */
        status = ret;
 800bb4a:	7ffb      	ldrb	r3, [r7, #31]
 800bb4c:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d02b      	beq.n	800bbb2 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb62:	d008      	beq.n	800bb76 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bb6c:	d003      	beq.n	800bb76 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d105      	bne.n	800bb82 <HAL_RCCEx_PeriphCLKConfig+0x228>
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	f7ff fe2b 	bl	800b7d6 <LL_RCC_SetRNGClockSource>
 800bb80:	e00a      	b.n	800bb98 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bb8a:	60fb      	str	r3, [r7, #12]
 800bb8c:	2000      	movs	r0, #0
 800bb8e:	f7ff fe22 	bl	800b7d6 <LL_RCC_SetRNGClockSource>
 800bb92:	68f8      	ldr	r0, [r7, #12]
 800bb94:	f7ff fe35 	bl	800b802 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb9c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800bba0:	d107      	bne.n	800bbb2 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800bba2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bba6:	68db      	ldr	r3, [r3, #12]
 800bba8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800bbac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bbb0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d022      	beq.n	800bc04 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	f7ff fe3e 	bl	800b844 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bbd0:	d107      	bne.n	800bbe2 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800bbd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bbd6:	68db      	ldr	r3, [r3, #12]
 800bbd8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800bbdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bbe0:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbe6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bbea:	d10b      	bne.n	800bc04 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	3304      	adds	r3, #4
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	f000 f8dd 	bl	800bdb0 <RCCEx_PLLSAI1_ConfigNR>
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800bbfa:	7ffb      	ldrb	r3, [r7, #31]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d001      	beq.n	800bc04 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
      {
        /* set overall return value */
        status = ret;
 800bc00:	7ffb      	ldrb	r3, [r7, #31]
 800bc02:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d004      	beq.n	800bc1a <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc14:	4618      	mov	r0, r3
 800bc16:	f7ff fd27 	bl	800b668 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d009      	beq.n	800bc3a <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	f7ff fd46 	bl	800b6bc <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc34:	4618      	mov	r0, r3
 800bc36:	f7ff fd2d 	bl	800b694 <LL_RCC_SetSMPSClockSource>
  }
#endif

  return status;
 800bc3a:	7fbb      	ldrb	r3, [r7, #30]
}
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	3720      	adds	r7, #32
 800bc40:	46bd      	mov	sp, r7
 800bc42:	bd80      	pop	{r7, pc}

0800bc44 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b084      	sub	sp, #16
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800bc50:	f7ff fe62 	bl	800b918 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800bc54:	f7fa f91c 	bl	8005e90 <HAL_GetTick>
 800bc58:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800bc5a:	e009      	b.n	800bc70 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800bc5c:	f7fa f918 	bl	8005e90 <HAL_GetTick>
 800bc60:	4602      	mov	r2, r0
 800bc62:	68bb      	ldr	r3, [r7, #8]
 800bc64:	1ad3      	subs	r3, r2, r3
 800bc66:	2b02      	cmp	r3, #2
 800bc68:	d902      	bls.n	800bc70 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800bc6a:	2303      	movs	r3, #3
 800bc6c:	73fb      	strb	r3, [r7, #15]
      break;
 800bc6e:	e004      	b.n	800bc7a <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800bc70:	f7ff fe61 	bl	800b936 <LL_RCC_PLLSAI1_IsReady>
 800bc74:	4603      	mov	r3, r0
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d1f0      	bne.n	800bc5c <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800bc7a:	7bfb      	ldrb	r3, [r7, #15]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d137      	bne.n	800bcf0 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800bc80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bc84:	691b      	ldr	r3, [r3, #16]
 800bc86:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	021b      	lsls	r3, r3, #8
 800bc90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800bc94:	4313      	orrs	r3, r2
 800bc96:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800bc98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bc9c:	691b      	ldr	r3, [r3, #16]
 800bc9e:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	685b      	ldr	r3, [r3, #4]
 800bca6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800bcaa:	4313      	orrs	r3, r2
 800bcac:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800bcae:	f7ff fe24 	bl	800b8fa <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bcb2:	f7fa f8ed 	bl	8005e90 <HAL_GetTick>
 800bcb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800bcb8:	e009      	b.n	800bcce <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800bcba:	f7fa f8e9 	bl	8005e90 <HAL_GetTick>
 800bcbe:	4602      	mov	r2, r0
 800bcc0:	68bb      	ldr	r3, [r7, #8]
 800bcc2:	1ad3      	subs	r3, r2, r3
 800bcc4:	2b02      	cmp	r3, #2
 800bcc6:	d902      	bls.n	800bcce <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800bcc8:	2303      	movs	r3, #3
 800bcca:	73fb      	strb	r3, [r7, #15]
        break;
 800bccc:	e004      	b.n	800bcd8 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800bcce:	f7ff fe32 	bl	800b936 <LL_RCC_PLLSAI1_IsReady>
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	2b01      	cmp	r3, #1
 800bcd6:	d1f0      	bne.n	800bcba <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800bcd8:	7bfb      	ldrb	r3, [r7, #15]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d108      	bne.n	800bcf0 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800bcde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bce2:	691a      	ldr	r2, [r3, #16]
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	691b      	ldr	r3, [r3, #16]
 800bce8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800bcec:	4313      	orrs	r3, r2
 800bcee:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800bcf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	3710      	adds	r7, #16
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	bd80      	pop	{r7, pc}

0800bcfa <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800bcfa:	b580      	push	{r7, lr}
 800bcfc:	b084      	sub	sp, #16
 800bcfe:	af00      	add	r7, sp, #0
 800bd00:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bd02:	2300      	movs	r3, #0
 800bd04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800bd06:	f7ff fe07 	bl	800b918 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800bd0a:	f7fa f8c1 	bl	8005e90 <HAL_GetTick>
 800bd0e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800bd10:	e009      	b.n	800bd26 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800bd12:	f7fa f8bd 	bl	8005e90 <HAL_GetTick>
 800bd16:	4602      	mov	r2, r0
 800bd18:	68bb      	ldr	r3, [r7, #8]
 800bd1a:	1ad3      	subs	r3, r2, r3
 800bd1c:	2b02      	cmp	r3, #2
 800bd1e:	d902      	bls.n	800bd26 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800bd20:	2303      	movs	r3, #3
 800bd22:	73fb      	strb	r3, [r7, #15]
      break;
 800bd24:	e004      	b.n	800bd30 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800bd26:	f7ff fe06 	bl	800b936 <LL_RCC_PLLSAI1_IsReady>
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d1f0      	bne.n	800bd12 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800bd30:	7bfb      	ldrb	r3, [r7, #15]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d137      	bne.n	800bda6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800bd36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bd3a:	691b      	ldr	r3, [r3, #16]
 800bd3c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	021b      	lsls	r3, r3, #8
 800bd46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800bd4a:	4313      	orrs	r3, r2
 800bd4c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800bd4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bd52:	691b      	ldr	r3, [r3, #16]
 800bd54:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	689b      	ldr	r3, [r3, #8]
 800bd5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800bd60:	4313      	orrs	r3, r2
 800bd62:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800bd64:	f7ff fdc9 	bl	800b8fa <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bd68:	f7fa f892 	bl	8005e90 <HAL_GetTick>
 800bd6c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800bd6e:	e009      	b.n	800bd84 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800bd70:	f7fa f88e 	bl	8005e90 <HAL_GetTick>
 800bd74:	4602      	mov	r2, r0
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	1ad3      	subs	r3, r2, r3
 800bd7a:	2b02      	cmp	r3, #2
 800bd7c:	d902      	bls.n	800bd84 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800bd7e:	2303      	movs	r3, #3
 800bd80:	73fb      	strb	r3, [r7, #15]
        break;
 800bd82:	e004      	b.n	800bd8e <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800bd84:	f7ff fdd7 	bl	800b936 <LL_RCC_PLLSAI1_IsReady>
 800bd88:	4603      	mov	r3, r0
 800bd8a:	2b01      	cmp	r3, #1
 800bd8c:	d1f0      	bne.n	800bd70 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800bd8e:	7bfb      	ldrb	r3, [r7, #15]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d108      	bne.n	800bda6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800bd94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bd98:	691a      	ldr	r2, [r3, #16]
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	691b      	ldr	r3, [r3, #16]
 800bd9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800bda2:	4313      	orrs	r3, r2
 800bda4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800bda6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bda8:	4618      	mov	r0, r3
 800bdaa:	3710      	adds	r7, #16
 800bdac:	46bd      	mov	sp, r7
 800bdae:	bd80      	pop	{r7, pc}

0800bdb0 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b084      	sub	sp, #16
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bdb8:	2300      	movs	r3, #0
 800bdba:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800bdbc:	f7ff fdac 	bl	800b918 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800bdc0:	f7fa f866 	bl	8005e90 <HAL_GetTick>
 800bdc4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800bdc6:	e009      	b.n	800bddc <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800bdc8:	f7fa f862 	bl	8005e90 <HAL_GetTick>
 800bdcc:	4602      	mov	r2, r0
 800bdce:	68bb      	ldr	r3, [r7, #8]
 800bdd0:	1ad3      	subs	r3, r2, r3
 800bdd2:	2b02      	cmp	r3, #2
 800bdd4:	d902      	bls.n	800bddc <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800bdd6:	2303      	movs	r3, #3
 800bdd8:	73fb      	strb	r3, [r7, #15]
      break;
 800bdda:	e004      	b.n	800bde6 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800bddc:	f7ff fdab 	bl	800b936 <LL_RCC_PLLSAI1_IsReady>
 800bde0:	4603      	mov	r3, r0
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d1f0      	bne.n	800bdc8 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800bde6:	7bfb      	ldrb	r3, [r7, #15]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d137      	bne.n	800be5c <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800bdec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bdf0:	691b      	ldr	r3, [r3, #16]
 800bdf2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	021b      	lsls	r3, r3, #8
 800bdfc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800be00:	4313      	orrs	r3, r2
 800be02:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800be04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800be08:	691b      	ldr	r3, [r3, #16]
 800be0a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	68db      	ldr	r3, [r3, #12]
 800be12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800be16:	4313      	orrs	r3, r2
 800be18:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800be1a:	f7ff fd6e 	bl	800b8fa <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800be1e:	f7fa f837 	bl	8005e90 <HAL_GetTick>
 800be22:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800be24:	e009      	b.n	800be3a <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800be26:	f7fa f833 	bl	8005e90 <HAL_GetTick>
 800be2a:	4602      	mov	r2, r0
 800be2c:	68bb      	ldr	r3, [r7, #8]
 800be2e:	1ad3      	subs	r3, r2, r3
 800be30:	2b02      	cmp	r3, #2
 800be32:	d902      	bls.n	800be3a <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800be34:	2303      	movs	r3, #3
 800be36:	73fb      	strb	r3, [r7, #15]
        break;
 800be38:	e004      	b.n	800be44 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800be3a:	f7ff fd7c 	bl	800b936 <LL_RCC_PLLSAI1_IsReady>
 800be3e:	4603      	mov	r3, r0
 800be40:	2b01      	cmp	r3, #1
 800be42:	d1f0      	bne.n	800be26 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800be44:	7bfb      	ldrb	r3, [r7, #15]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d108      	bne.n	800be5c <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800be4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800be4e:	691a      	ldr	r2, [r3, #16]
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	691b      	ldr	r3, [r3, #16]
 800be54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800be58:	4313      	orrs	r3, r2
 800be5a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800be5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800be5e:	4618      	mov	r0, r3
 800be60:	3710      	adds	r7, #16
 800be62:	46bd      	mov	sp, r7
 800be64:	bd80      	pop	{r7, pc}

0800be66 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800be66:	b580      	push	{r7, lr}
 800be68:	b082      	sub	sp, #8
 800be6a:	af00      	add	r7, sp, #0
 800be6c:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d101      	bne.n	800be78 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800be74:	2301      	movs	r3, #1
 800be76:	e090      	b.n	800bf9a <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800be7e:	b2db      	uxtb	r3, r3
 800be80:	2b00      	cmp	r3, #0
 800be82:	d106      	bne.n	800be92 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	2200      	movs	r2, #0
 800be88:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800be8c:	6878      	ldr	r0, [r7, #4]
 800be8e:	f7f8 ffcf 	bl	8004e30 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	2202      	movs	r2, #2
 800be96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	22ca      	movs	r2, #202	; 0xca
 800bea0:	625a      	str	r2, [r3, #36]	; 0x24
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	2253      	movs	r2, #83	; 0x53
 800bea8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800beaa:	6878      	ldr	r0, [r7, #4]
 800beac:	f000 f89f 	bl	800bfee <RTC_EnterInitMode>
 800beb0:	4603      	mov	r3, r0
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d009      	beq.n	800beca <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	22ff      	movs	r2, #255	; 0xff
 800bebc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	2204      	movs	r2, #4
 800bec2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 800bec6:	2301      	movs	r3, #1
 800bec8:	e067      	b.n	800bf9a <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	689b      	ldr	r3, [r3, #8]
 800bed0:	687a      	ldr	r2, [r7, #4]
 800bed2:	6812      	ldr	r2, [r2, #0]
 800bed4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bed8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bedc:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	6899      	ldr	r1, [r3, #8]
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	685a      	ldr	r2, [r3, #4]
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	691b      	ldr	r3, [r3, #16]
 800beec:	431a      	orrs	r2, r3
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	699b      	ldr	r3, [r3, #24]
 800bef2:	431a      	orrs	r2, r3
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	430a      	orrs	r2, r1
 800befa:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	687a      	ldr	r2, [r7, #4]
 800bf02:	68d2      	ldr	r2, [r2, #12]
 800bf04:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	6919      	ldr	r1, [r3, #16]
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	689b      	ldr	r3, [r3, #8]
 800bf10:	041a      	lsls	r2, r3, #16
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	430a      	orrs	r2, r1
 800bf18:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	68da      	ldr	r2, [r3, #12]
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bf28:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	f022 0203 	bic.w	r2, r2, #3
 800bf38:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	69da      	ldr	r2, [r3, #28]
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	695b      	ldr	r3, [r3, #20]
 800bf48:	431a      	orrs	r2, r3
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	430a      	orrs	r2, r1
 800bf50:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	689b      	ldr	r3, [r3, #8]
 800bf58:	f003 0320 	and.w	r3, r3, #32
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d113      	bne.n	800bf88 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800bf60:	6878      	ldr	r0, [r7, #4]
 800bf62:	f000 f81e 	bl	800bfa2 <HAL_RTC_WaitForSynchro>
 800bf66:	4603      	mov	r3, r0
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d00d      	beq.n	800bf88 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	22ff      	movs	r2, #255	; 0xff
 800bf72:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	2204      	movs	r2, #4
 800bf78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2200      	movs	r2, #0
 800bf80:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800bf84:	2301      	movs	r3, #1
 800bf86:	e008      	b.n	800bf9a <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	22ff      	movs	r2, #255	; 0xff
 800bf8e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2201      	movs	r2, #1
 800bf94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 800bf98:	2300      	movs	r3, #0
  }
}
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	3708      	adds	r7, #8
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	bd80      	pop	{r7, pc}

0800bfa2 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800bfa2:	b580      	push	{r7, lr}
 800bfa4:	b084      	sub	sp, #16
 800bfa6:	af00      	add	r7, sp, #0
 800bfa8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	68da      	ldr	r2, [r3, #12]
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800bfb8:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800bfba:	f7f9 ff69 	bl	8005e90 <HAL_GetTick>
 800bfbe:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800bfc0:	e009      	b.n	800bfd6 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800bfc2:	f7f9 ff65 	bl	8005e90 <HAL_GetTick>
 800bfc6:	4602      	mov	r2, r0
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	1ad3      	subs	r3, r2, r3
 800bfcc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bfd0:	d901      	bls.n	800bfd6 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800bfd2:	2303      	movs	r3, #3
 800bfd4:	e007      	b.n	800bfe6 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	68db      	ldr	r3, [r3, #12]
 800bfdc:	f003 0320 	and.w	r3, r3, #32
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d0ee      	beq.n	800bfc2 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800bfe4:	2300      	movs	r3, #0
}
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	3710      	adds	r7, #16
 800bfea:	46bd      	mov	sp, r7
 800bfec:	bd80      	pop	{r7, pc}

0800bfee <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800bfee:	b580      	push	{r7, lr}
 800bff0:	b084      	sub	sp, #16
 800bff2:	af00      	add	r7, sp, #0
 800bff4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	68db      	ldr	r3, [r3, #12]
 800bffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c000:	2b00      	cmp	r3, #0
 800c002:	d119      	bne.n	800c038 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	f04f 32ff 	mov.w	r2, #4294967295
 800c00c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800c00e:	f7f9 ff3f 	bl	8005e90 <HAL_GetTick>
 800c012:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800c014:	e009      	b.n	800c02a <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800c016:	f7f9 ff3b 	bl	8005e90 <HAL_GetTick>
 800c01a:	4602      	mov	r2, r0
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	1ad3      	subs	r3, r2, r3
 800c020:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c024:	d901      	bls.n	800c02a <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800c026:	2303      	movs	r3, #3
 800c028:	e007      	b.n	800c03a <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	68db      	ldr	r3, [r3, #12]
 800c030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c034:	2b00      	cmp	r3, #0
 800c036:	d0ee      	beq.n	800c016 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800c038:	2300      	movs	r3, #0
}
 800c03a:	4618      	mov	r0, r3
 800c03c:	3710      	adds	r7, #16
 800c03e:	46bd      	mov	sp, r7
 800c040:	bd80      	pop	{r7, pc}

0800c042 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c042:	b580      	push	{r7, lr}
 800c044:	b082      	sub	sp, #8
 800c046:	af00      	add	r7, sp, #0
 800c048:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d101      	bne.n	800c054 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c050:	2301      	movs	r3, #1
 800c052:	e01d      	b.n	800c090 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c05a:	b2db      	uxtb	r3, r3
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d106      	bne.n	800c06e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2200      	movs	r2, #0
 800c064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c068:	6878      	ldr	r0, [r7, #4]
 800c06a:	f7f9 f9ed 	bl	8005448 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	2202      	movs	r2, #2
 800c072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681a      	ldr	r2, [r3, #0]
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	3304      	adds	r3, #4
 800c07e:	4619      	mov	r1, r3
 800c080:	4610      	mov	r0, r2
 800c082:	f000 fc83 	bl	800c98c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	2201      	movs	r2, #1
 800c08a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c08e:	2300      	movs	r3, #0
}
 800c090:	4618      	mov	r0, r3
 800c092:	3708      	adds	r7, #8
 800c094:	46bd      	mov	sp, r7
 800c096:	bd80      	pop	{r7, pc}

0800c098 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800c098:	b480      	push	{r7}
 800c09a:	b085      	sub	sp, #20
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	2202      	movs	r2, #2
 800c0a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	689a      	ldr	r2, [r3, #8]
 800c0ae:	4b0e      	ldr	r3, [pc, #56]	; (800c0e8 <HAL_TIM_Base_Start+0x50>)
 800c0b0:	4013      	ands	r3, r2
 800c0b2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	2b06      	cmp	r3, #6
 800c0b8:	d00b      	beq.n	800c0d2 <HAL_TIM_Base_Start+0x3a>
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c0c0:	d007      	beq.n	800c0d2 <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	681a      	ldr	r2, [r3, #0]
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	f042 0201 	orr.w	r2, r2, #1
 800c0d0:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	2201      	movs	r2, #1
 800c0d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800c0da:	2300      	movs	r3, #0
}
 800c0dc:	4618      	mov	r0, r3
 800c0de:	3714      	adds	r7, #20
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e6:	4770      	bx	lr
 800c0e8:	00010007 	.word	0x00010007

0800c0ec <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800c0ec:	b480      	push	{r7}
 800c0ee:	b083      	sub	sp, #12
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	2202      	movs	r2, #2
 800c0f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	6a1a      	ldr	r2, [r3, #32]
 800c102:	f241 1311 	movw	r3, #4369	; 0x1111
 800c106:	4013      	ands	r3, r2
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d10f      	bne.n	800c12c <HAL_TIM_Base_Stop+0x40>
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	6a1a      	ldr	r2, [r3, #32]
 800c112:	f240 4344 	movw	r3, #1092	; 0x444
 800c116:	4013      	ands	r3, r2
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d107      	bne.n	800c12c <HAL_TIM_Base_Stop+0x40>
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	681a      	ldr	r2, [r3, #0]
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	f022 0201 	bic.w	r2, r2, #1
 800c12a:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2201      	movs	r2, #1
 800c130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800c134:	2300      	movs	r3, #0
}
 800c136:	4618      	mov	r0, r3
 800c138:	370c      	adds	r7, #12
 800c13a:	46bd      	mov	sp, r7
 800c13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c140:	4770      	bx	lr
	...

0800c144 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c144:	b480      	push	{r7}
 800c146:	b085      	sub	sp, #20
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	68da      	ldr	r2, [r3, #12]
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	f042 0201 	orr.w	r2, r2, #1
 800c15a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	689a      	ldr	r2, [r3, #8]
 800c162:	4b0c      	ldr	r3, [pc, #48]	; (800c194 <HAL_TIM_Base_Start_IT+0x50>)
 800c164:	4013      	ands	r3, r2
 800c166:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	2b06      	cmp	r3, #6
 800c16c:	d00b      	beq.n	800c186 <HAL_TIM_Base_Start_IT+0x42>
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c174:	d007      	beq.n	800c186 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	681a      	ldr	r2, [r3, #0]
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	f042 0201 	orr.w	r2, r2, #1
 800c184:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c186:	2300      	movs	r3, #0
}
 800c188:	4618      	mov	r0, r3
 800c18a:	3714      	adds	r7, #20
 800c18c:	46bd      	mov	sp, r7
 800c18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c192:	4770      	bx	lr
 800c194:	00010007 	.word	0x00010007

0800c198 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b082      	sub	sp, #8
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d101      	bne.n	800c1aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c1a6:	2301      	movs	r3, #1
 800c1a8:	e01d      	b.n	800c1e6 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c1b0:	b2db      	uxtb	r3, r3
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d106      	bne.n	800c1c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c1be:	6878      	ldr	r0, [r7, #4]
 800c1c0:	f000 f815 	bl	800c1ee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2202      	movs	r2, #2
 800c1c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681a      	ldr	r2, [r3, #0]
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	3304      	adds	r3, #4
 800c1d4:	4619      	mov	r1, r3
 800c1d6:	4610      	mov	r0, r2
 800c1d8:	f000 fbd8 	bl	800c98c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2201      	movs	r2, #1
 800c1e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c1e4:	2300      	movs	r3, #0
}
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	3708      	adds	r7, #8
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd80      	pop	{r7, pc}

0800c1ee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c1ee:	b480      	push	{r7}
 800c1f0:	b083      	sub	sp, #12
 800c1f2:	af00      	add	r7, sp, #0
 800c1f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c1f6:	bf00      	nop
 800c1f8:	370c      	adds	r7, #12
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c200:	4770      	bx	lr
	...

0800c204 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c204:	b580      	push	{r7, lr}
 800c206:	b084      	sub	sp, #16
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
 800c20c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	2201      	movs	r2, #1
 800c214:	6839      	ldr	r1, [r7, #0]
 800c216:	4618      	mov	r0, r3
 800c218:	f000 ff36 	bl	800d088 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	4a19      	ldr	r2, [pc, #100]	; (800c288 <HAL_TIM_PWM_Start+0x84>)
 800c222:	4293      	cmp	r3, r2
 800c224:	d009      	beq.n	800c23a <HAL_TIM_PWM_Start+0x36>
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	4a18      	ldr	r2, [pc, #96]	; (800c28c <HAL_TIM_PWM_Start+0x88>)
 800c22c:	4293      	cmp	r3, r2
 800c22e:	d004      	beq.n	800c23a <HAL_TIM_PWM_Start+0x36>
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	4a16      	ldr	r2, [pc, #88]	; (800c290 <HAL_TIM_PWM_Start+0x8c>)
 800c236:	4293      	cmp	r3, r2
 800c238:	d101      	bne.n	800c23e <HAL_TIM_PWM_Start+0x3a>
 800c23a:	2301      	movs	r3, #1
 800c23c:	e000      	b.n	800c240 <HAL_TIM_PWM_Start+0x3c>
 800c23e:	2300      	movs	r3, #0
 800c240:	2b00      	cmp	r3, #0
 800c242:	d007      	beq.n	800c254 <HAL_TIM_PWM_Start+0x50>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c252:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	689a      	ldr	r2, [r3, #8]
 800c25a:	4b0e      	ldr	r3, [pc, #56]	; (800c294 <HAL_TIM_PWM_Start+0x90>)
 800c25c:	4013      	ands	r3, r2
 800c25e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	2b06      	cmp	r3, #6
 800c264:	d00b      	beq.n	800c27e <HAL_TIM_PWM_Start+0x7a>
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c26c:	d007      	beq.n	800c27e <HAL_TIM_PWM_Start+0x7a>
  {
    __HAL_TIM_ENABLE(htim);
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	681a      	ldr	r2, [r3, #0]
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	f042 0201 	orr.w	r2, r2, #1
 800c27c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c27e:	2300      	movs	r3, #0
}
 800c280:	4618      	mov	r0, r3
 800c282:	3710      	adds	r7, #16
 800c284:	46bd      	mov	sp, r7
 800c286:	bd80      	pop	{r7, pc}
 800c288:	40012c00 	.word	0x40012c00
 800c28c:	40014400 	.word	0x40014400
 800c290:	40014800 	.word	0x40014800
 800c294:	00010007 	.word	0x00010007

0800c298 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b082      	sub	sp, #8
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
 800c2a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	6839      	ldr	r1, [r7, #0]
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	f000 feec 	bl	800d088 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	4a25      	ldr	r2, [pc, #148]	; (800c34c <HAL_TIM_PWM_Stop+0xb4>)
 800c2b6:	4293      	cmp	r3, r2
 800c2b8:	d009      	beq.n	800c2ce <HAL_TIM_PWM_Stop+0x36>
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	4a24      	ldr	r2, [pc, #144]	; (800c350 <HAL_TIM_PWM_Stop+0xb8>)
 800c2c0:	4293      	cmp	r3, r2
 800c2c2:	d004      	beq.n	800c2ce <HAL_TIM_PWM_Stop+0x36>
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	4a22      	ldr	r2, [pc, #136]	; (800c354 <HAL_TIM_PWM_Stop+0xbc>)
 800c2ca:	4293      	cmp	r3, r2
 800c2cc:	d101      	bne.n	800c2d2 <HAL_TIM_PWM_Stop+0x3a>
 800c2ce:	2301      	movs	r3, #1
 800c2d0:	e000      	b.n	800c2d4 <HAL_TIM_PWM_Stop+0x3c>
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d017      	beq.n	800c308 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	6a1a      	ldr	r2, [r3, #32]
 800c2de:	f241 1311 	movw	r3, #4369	; 0x1111
 800c2e2:	4013      	ands	r3, r2
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d10f      	bne.n	800c308 <HAL_TIM_PWM_Stop+0x70>
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	6a1a      	ldr	r2, [r3, #32]
 800c2ee:	f240 4344 	movw	r3, #1092	; 0x444
 800c2f2:	4013      	ands	r3, r2
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d107      	bne.n	800c308 <HAL_TIM_PWM_Stop+0x70>
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c306:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	6a1a      	ldr	r2, [r3, #32]
 800c30e:	f241 1311 	movw	r3, #4369	; 0x1111
 800c312:	4013      	ands	r3, r2
 800c314:	2b00      	cmp	r3, #0
 800c316:	d10f      	bne.n	800c338 <HAL_TIM_PWM_Stop+0xa0>
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	6a1a      	ldr	r2, [r3, #32]
 800c31e:	f240 4344 	movw	r3, #1092	; 0x444
 800c322:	4013      	ands	r3, r2
 800c324:	2b00      	cmp	r3, #0
 800c326:	d107      	bne.n	800c338 <HAL_TIM_PWM_Stop+0xa0>
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	681a      	ldr	r2, [r3, #0]
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	f022 0201 	bic.w	r2, r2, #1
 800c336:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2201      	movs	r2, #1
 800c33c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800c340:	2300      	movs	r3, #0
}
 800c342:	4618      	mov	r0, r3
 800c344:	3708      	adds	r7, #8
 800c346:	46bd      	mov	sp, r7
 800c348:	bd80      	pop	{r7, pc}
 800c34a:	bf00      	nop
 800c34c:	40012c00 	.word	0x40012c00
 800c350:	40014400 	.word	0x40014400
 800c354:	40014800 	.word	0x40014800

0800c358 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b082      	sub	sp, #8
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	691b      	ldr	r3, [r3, #16]
 800c366:	f003 0302 	and.w	r3, r3, #2
 800c36a:	2b02      	cmp	r3, #2
 800c36c:	d122      	bne.n	800c3b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	68db      	ldr	r3, [r3, #12]
 800c374:	f003 0302 	and.w	r3, r3, #2
 800c378:	2b02      	cmp	r3, #2
 800c37a:	d11b      	bne.n	800c3b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	f06f 0202 	mvn.w	r2, #2
 800c384:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	2201      	movs	r2, #1
 800c38a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	699b      	ldr	r3, [r3, #24]
 800c392:	f003 0303 	and.w	r3, r3, #3
 800c396:	2b00      	cmp	r3, #0
 800c398:	d003      	beq.n	800c3a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c39a:	6878      	ldr	r0, [r7, #4]
 800c39c:	f000 fad7 	bl	800c94e <HAL_TIM_IC_CaptureCallback>
 800c3a0:	e005      	b.n	800c3ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c3a2:	6878      	ldr	r0, [r7, #4]
 800c3a4:	f000 fac9 	bl	800c93a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c3a8:	6878      	ldr	r0, [r7, #4]
 800c3aa:	f000 fada 	bl	800c962 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	691b      	ldr	r3, [r3, #16]
 800c3ba:	f003 0304 	and.w	r3, r3, #4
 800c3be:	2b04      	cmp	r3, #4
 800c3c0:	d122      	bne.n	800c408 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	68db      	ldr	r3, [r3, #12]
 800c3c8:	f003 0304 	and.w	r3, r3, #4
 800c3cc:	2b04      	cmp	r3, #4
 800c3ce:	d11b      	bne.n	800c408 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	f06f 0204 	mvn.w	r2, #4
 800c3d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	2202      	movs	r2, #2
 800c3de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	699b      	ldr	r3, [r3, #24]
 800c3e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d003      	beq.n	800c3f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c3ee:	6878      	ldr	r0, [r7, #4]
 800c3f0:	f000 faad 	bl	800c94e <HAL_TIM_IC_CaptureCallback>
 800c3f4:	e005      	b.n	800c402 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c3f6:	6878      	ldr	r0, [r7, #4]
 800c3f8:	f000 fa9f 	bl	800c93a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c3fc:	6878      	ldr	r0, [r7, #4]
 800c3fe:	f000 fab0 	bl	800c962 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	2200      	movs	r2, #0
 800c406:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	691b      	ldr	r3, [r3, #16]
 800c40e:	f003 0308 	and.w	r3, r3, #8
 800c412:	2b08      	cmp	r3, #8
 800c414:	d122      	bne.n	800c45c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	68db      	ldr	r3, [r3, #12]
 800c41c:	f003 0308 	and.w	r3, r3, #8
 800c420:	2b08      	cmp	r3, #8
 800c422:	d11b      	bne.n	800c45c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	f06f 0208 	mvn.w	r2, #8
 800c42c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	2204      	movs	r2, #4
 800c432:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	69db      	ldr	r3, [r3, #28]
 800c43a:	f003 0303 	and.w	r3, r3, #3
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d003      	beq.n	800c44a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c442:	6878      	ldr	r0, [r7, #4]
 800c444:	f000 fa83 	bl	800c94e <HAL_TIM_IC_CaptureCallback>
 800c448:	e005      	b.n	800c456 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c44a:	6878      	ldr	r0, [r7, #4]
 800c44c:	f000 fa75 	bl	800c93a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c450:	6878      	ldr	r0, [r7, #4]
 800c452:	f000 fa86 	bl	800c962 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	2200      	movs	r2, #0
 800c45a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	691b      	ldr	r3, [r3, #16]
 800c462:	f003 0310 	and.w	r3, r3, #16
 800c466:	2b10      	cmp	r3, #16
 800c468:	d122      	bne.n	800c4b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	68db      	ldr	r3, [r3, #12]
 800c470:	f003 0310 	and.w	r3, r3, #16
 800c474:	2b10      	cmp	r3, #16
 800c476:	d11b      	bne.n	800c4b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	f06f 0210 	mvn.w	r2, #16
 800c480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	2208      	movs	r2, #8
 800c486:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	69db      	ldr	r3, [r3, #28]
 800c48e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c492:	2b00      	cmp	r3, #0
 800c494:	d003      	beq.n	800c49e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c496:	6878      	ldr	r0, [r7, #4]
 800c498:	f000 fa59 	bl	800c94e <HAL_TIM_IC_CaptureCallback>
 800c49c:	e005      	b.n	800c4aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c49e:	6878      	ldr	r0, [r7, #4]
 800c4a0:	f000 fa4b 	bl	800c93a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c4a4:	6878      	ldr	r0, [r7, #4]
 800c4a6:	f000 fa5c 	bl	800c962 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	691b      	ldr	r3, [r3, #16]
 800c4b6:	f003 0301 	and.w	r3, r3, #1
 800c4ba:	2b01      	cmp	r3, #1
 800c4bc:	d10e      	bne.n	800c4dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	68db      	ldr	r3, [r3, #12]
 800c4c4:	f003 0301 	and.w	r3, r3, #1
 800c4c8:	2b01      	cmp	r3, #1
 800c4ca:	d107      	bne.n	800c4dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	f06f 0201 	mvn.w	r2, #1
 800c4d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c4d6:	6878      	ldr	r0, [r7, #4]
 800c4d8:	f7f7 fed8 	bl	800428c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	691b      	ldr	r3, [r3, #16]
 800c4e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c4e6:	2b80      	cmp	r3, #128	; 0x80
 800c4e8:	d10e      	bne.n	800c508 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	68db      	ldr	r3, [r3, #12]
 800c4f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c4f4:	2b80      	cmp	r3, #128	; 0x80
 800c4f6:	d107      	bne.n	800c508 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c500:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c502:	6878      	ldr	r0, [r7, #4]
 800c504:	f000 fe50 	bl	800d1a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	691b      	ldr	r3, [r3, #16]
 800c50e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c512:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c516:	d10e      	bne.n	800c536 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	68db      	ldr	r3, [r3, #12]
 800c51e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c522:	2b80      	cmp	r3, #128	; 0x80
 800c524:	d107      	bne.n	800c536 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c52e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c530:	6878      	ldr	r0, [r7, #4]
 800c532:	f000 fe43 	bl	800d1bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	691b      	ldr	r3, [r3, #16]
 800c53c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c540:	2b40      	cmp	r3, #64	; 0x40
 800c542:	d10e      	bne.n	800c562 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	68db      	ldr	r3, [r3, #12]
 800c54a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c54e:	2b40      	cmp	r3, #64	; 0x40
 800c550:	d107      	bne.n	800c562 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c55a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c55c:	6878      	ldr	r0, [r7, #4]
 800c55e:	f000 fa0a 	bl	800c976 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	691b      	ldr	r3, [r3, #16]
 800c568:	f003 0320 	and.w	r3, r3, #32
 800c56c:	2b20      	cmp	r3, #32
 800c56e:	d10e      	bne.n	800c58e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	68db      	ldr	r3, [r3, #12]
 800c576:	f003 0320 	and.w	r3, r3, #32
 800c57a:	2b20      	cmp	r3, #32
 800c57c:	d107      	bne.n	800c58e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	f06f 0220 	mvn.w	r2, #32
 800c586:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c588:	6878      	ldr	r0, [r7, #4]
 800c58a:	f000 fe03 	bl	800d194 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c58e:	bf00      	nop
 800c590:	3708      	adds	r7, #8
 800c592:	46bd      	mov	sp, r7
 800c594:	bd80      	pop	{r7, pc}
	...

0800c598 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b084      	sub	sp, #16
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	60f8      	str	r0, [r7, #12]
 800c5a0:	60b9      	str	r1, [r7, #8]
 800c5a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c5aa:	2b01      	cmp	r3, #1
 800c5ac:	d101      	bne.n	800c5b2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800c5ae:	2302      	movs	r3, #2
 800c5b0:	e105      	b.n	800c7be <HAL_TIM_PWM_ConfigChannel+0x226>
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	2201      	movs	r2, #1
 800c5b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	2202      	movs	r2, #2
 800c5be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	2b14      	cmp	r3, #20
 800c5c6:	f200 80f0 	bhi.w	800c7aa <HAL_TIM_PWM_ConfigChannel+0x212>
 800c5ca:	a201      	add	r2, pc, #4	; (adr r2, 800c5d0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800c5cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5d0:	0800c625 	.word	0x0800c625
 800c5d4:	0800c7ab 	.word	0x0800c7ab
 800c5d8:	0800c7ab 	.word	0x0800c7ab
 800c5dc:	0800c7ab 	.word	0x0800c7ab
 800c5e0:	0800c665 	.word	0x0800c665
 800c5e4:	0800c7ab 	.word	0x0800c7ab
 800c5e8:	0800c7ab 	.word	0x0800c7ab
 800c5ec:	0800c7ab 	.word	0x0800c7ab
 800c5f0:	0800c6a7 	.word	0x0800c6a7
 800c5f4:	0800c7ab 	.word	0x0800c7ab
 800c5f8:	0800c7ab 	.word	0x0800c7ab
 800c5fc:	0800c7ab 	.word	0x0800c7ab
 800c600:	0800c6e7 	.word	0x0800c6e7
 800c604:	0800c7ab 	.word	0x0800c7ab
 800c608:	0800c7ab 	.word	0x0800c7ab
 800c60c:	0800c7ab 	.word	0x0800c7ab
 800c610:	0800c729 	.word	0x0800c729
 800c614:	0800c7ab 	.word	0x0800c7ab
 800c618:	0800c7ab 	.word	0x0800c7ab
 800c61c:	0800c7ab 	.word	0x0800c7ab
 800c620:	0800c769 	.word	0x0800c769
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	68b9      	ldr	r1, [r7, #8]
 800c62a:	4618      	mov	r0, r3
 800c62c:	f000 fa12 	bl	800ca54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	699a      	ldr	r2, [r3, #24]
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	f042 0208 	orr.w	r2, r2, #8
 800c63e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	699a      	ldr	r2, [r3, #24]
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	f022 0204 	bic.w	r2, r2, #4
 800c64e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	6999      	ldr	r1, [r3, #24]
 800c656:	68bb      	ldr	r3, [r7, #8]
 800c658:	691a      	ldr	r2, [r3, #16]
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	430a      	orrs	r2, r1
 800c660:	619a      	str	r2, [r3, #24]
      break;
 800c662:	e0a3      	b.n	800c7ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	68b9      	ldr	r1, [r7, #8]
 800c66a:	4618      	mov	r0, r3
 800c66c:	f000 fa6e 	bl	800cb4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	699a      	ldr	r2, [r3, #24]
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c67e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	699a      	ldr	r2, [r3, #24]
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c68e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	6999      	ldr	r1, [r3, #24]
 800c696:	68bb      	ldr	r3, [r7, #8]
 800c698:	691b      	ldr	r3, [r3, #16]
 800c69a:	021a      	lsls	r2, r3, #8
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	430a      	orrs	r2, r1
 800c6a2:	619a      	str	r2, [r3, #24]
      break;
 800c6a4:	e082      	b.n	800c7ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	68b9      	ldr	r1, [r7, #8]
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	f000 fac7 	bl	800cc40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	69da      	ldr	r2, [r3, #28]
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	f042 0208 	orr.w	r2, r2, #8
 800c6c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	69da      	ldr	r2, [r3, #28]
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	f022 0204 	bic.w	r2, r2, #4
 800c6d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	69d9      	ldr	r1, [r3, #28]
 800c6d8:	68bb      	ldr	r3, [r7, #8]
 800c6da:	691a      	ldr	r2, [r3, #16]
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	430a      	orrs	r2, r1
 800c6e2:	61da      	str	r2, [r3, #28]
      break;
 800c6e4:	e062      	b.n	800c7ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	68b9      	ldr	r1, [r7, #8]
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	f000 fb1f 	bl	800cd30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	69da      	ldr	r2, [r3, #28]
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c700:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	69da      	ldr	r2, [r3, #28]
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c710:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	69d9      	ldr	r1, [r3, #28]
 800c718:	68bb      	ldr	r3, [r7, #8]
 800c71a:	691b      	ldr	r3, [r3, #16]
 800c71c:	021a      	lsls	r2, r3, #8
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	430a      	orrs	r2, r1
 800c724:	61da      	str	r2, [r3, #28]
      break;
 800c726:	e041      	b.n	800c7ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	68b9      	ldr	r1, [r7, #8]
 800c72e:	4618      	mov	r0, r3
 800c730:	f000 fb5c 	bl	800cdec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	f042 0208 	orr.w	r2, r2, #8
 800c742:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	f022 0204 	bic.w	r2, r2, #4
 800c752:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c75a:	68bb      	ldr	r3, [r7, #8]
 800c75c:	691a      	ldr	r2, [r3, #16]
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	430a      	orrs	r2, r1
 800c764:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c766:	e021      	b.n	800c7ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	68b9      	ldr	r1, [r7, #8]
 800c76e:	4618      	mov	r0, r3
 800c770:	f000 fb94 	bl	800ce9c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c782:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c792:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c79a:	68bb      	ldr	r3, [r7, #8]
 800c79c:	691b      	ldr	r3, [r3, #16]
 800c79e:	021a      	lsls	r2, r3, #8
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	430a      	orrs	r2, r1
 800c7a6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c7a8:	e000      	b.n	800c7ac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800c7aa:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	2201      	movs	r2, #1
 800c7b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c7bc:	2300      	movs	r3, #0
}
 800c7be:	4618      	mov	r0, r3
 800c7c0:	3710      	adds	r7, #16
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	bd80      	pop	{r7, pc}
 800c7c6:	bf00      	nop

0800c7c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b084      	sub	sp, #16
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
 800c7d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c7d8:	2b01      	cmp	r3, #1
 800c7da:	d101      	bne.n	800c7e0 <HAL_TIM_ConfigClockSource+0x18>
 800c7dc:	2302      	movs	r3, #2
 800c7de:	e0a8      	b.n	800c932 <HAL_TIM_ConfigClockSource+0x16a>
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	2201      	movs	r2, #1
 800c7e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	2202      	movs	r2, #2
 800c7ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	689b      	ldr	r3, [r3, #8]
 800c7f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800c7fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c802:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c80a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	68fa      	ldr	r2, [r7, #12]
 800c812:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c814:	683b      	ldr	r3, [r7, #0]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	2b40      	cmp	r3, #64	; 0x40
 800c81a:	d067      	beq.n	800c8ec <HAL_TIM_ConfigClockSource+0x124>
 800c81c:	2b40      	cmp	r3, #64	; 0x40
 800c81e:	d80b      	bhi.n	800c838 <HAL_TIM_ConfigClockSource+0x70>
 800c820:	2b10      	cmp	r3, #16
 800c822:	d073      	beq.n	800c90c <HAL_TIM_ConfigClockSource+0x144>
 800c824:	2b10      	cmp	r3, #16
 800c826:	d802      	bhi.n	800c82e <HAL_TIM_ConfigClockSource+0x66>
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d06f      	beq.n	800c90c <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800c82c:	e078      	b.n	800c920 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800c82e:	2b20      	cmp	r3, #32
 800c830:	d06c      	beq.n	800c90c <HAL_TIM_ConfigClockSource+0x144>
 800c832:	2b30      	cmp	r3, #48	; 0x30
 800c834:	d06a      	beq.n	800c90c <HAL_TIM_ConfigClockSource+0x144>
      break;
 800c836:	e073      	b.n	800c920 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800c838:	2b70      	cmp	r3, #112	; 0x70
 800c83a:	d00d      	beq.n	800c858 <HAL_TIM_ConfigClockSource+0x90>
 800c83c:	2b70      	cmp	r3, #112	; 0x70
 800c83e:	d804      	bhi.n	800c84a <HAL_TIM_ConfigClockSource+0x82>
 800c840:	2b50      	cmp	r3, #80	; 0x50
 800c842:	d033      	beq.n	800c8ac <HAL_TIM_ConfigClockSource+0xe4>
 800c844:	2b60      	cmp	r3, #96	; 0x60
 800c846:	d041      	beq.n	800c8cc <HAL_TIM_ConfigClockSource+0x104>
      break;
 800c848:	e06a      	b.n	800c920 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800c84a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c84e:	d066      	beq.n	800c91e <HAL_TIM_ConfigClockSource+0x156>
 800c850:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c854:	d017      	beq.n	800c886 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 800c856:	e063      	b.n	800c920 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	6818      	ldr	r0, [r3, #0]
 800c85c:	683b      	ldr	r3, [r7, #0]
 800c85e:	6899      	ldr	r1, [r3, #8]
 800c860:	683b      	ldr	r3, [r7, #0]
 800c862:	685a      	ldr	r2, [r3, #4]
 800c864:	683b      	ldr	r3, [r7, #0]
 800c866:	68db      	ldr	r3, [r3, #12]
 800c868:	f000 fbee 	bl	800d048 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	689b      	ldr	r3, [r3, #8]
 800c872:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c87a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	68fa      	ldr	r2, [r7, #12]
 800c882:	609a      	str	r2, [r3, #8]
      break;
 800c884:	e04c      	b.n	800c920 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	6818      	ldr	r0, [r3, #0]
 800c88a:	683b      	ldr	r3, [r7, #0]
 800c88c:	6899      	ldr	r1, [r3, #8]
 800c88e:	683b      	ldr	r3, [r7, #0]
 800c890:	685a      	ldr	r2, [r3, #4]
 800c892:	683b      	ldr	r3, [r7, #0]
 800c894:	68db      	ldr	r3, [r3, #12]
 800c896:	f000 fbd7 	bl	800d048 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	689a      	ldr	r2, [r3, #8]
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c8a8:	609a      	str	r2, [r3, #8]
      break;
 800c8aa:	e039      	b.n	800c920 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	6818      	ldr	r0, [r3, #0]
 800c8b0:	683b      	ldr	r3, [r7, #0]
 800c8b2:	6859      	ldr	r1, [r3, #4]
 800c8b4:	683b      	ldr	r3, [r7, #0]
 800c8b6:	68db      	ldr	r3, [r3, #12]
 800c8b8:	461a      	mov	r2, r3
 800c8ba:	f000 fb49 	bl	800cf50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	2150      	movs	r1, #80	; 0x50
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	f000 fba2 	bl	800d00e <TIM_ITRx_SetConfig>
      break;
 800c8ca:	e029      	b.n	800c920 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	6818      	ldr	r0, [r3, #0]
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	6859      	ldr	r1, [r3, #4]
 800c8d4:	683b      	ldr	r3, [r7, #0]
 800c8d6:	68db      	ldr	r3, [r3, #12]
 800c8d8:	461a      	mov	r2, r3
 800c8da:	f000 fb68 	bl	800cfae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	2160      	movs	r1, #96	; 0x60
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	f000 fb92 	bl	800d00e <TIM_ITRx_SetConfig>
      break;
 800c8ea:	e019      	b.n	800c920 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	6818      	ldr	r0, [r3, #0]
 800c8f0:	683b      	ldr	r3, [r7, #0]
 800c8f2:	6859      	ldr	r1, [r3, #4]
 800c8f4:	683b      	ldr	r3, [r7, #0]
 800c8f6:	68db      	ldr	r3, [r3, #12]
 800c8f8:	461a      	mov	r2, r3
 800c8fa:	f000 fb29 	bl	800cf50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	2140      	movs	r1, #64	; 0x40
 800c904:	4618      	mov	r0, r3
 800c906:	f000 fb82 	bl	800d00e <TIM_ITRx_SetConfig>
      break;
 800c90a:	e009      	b.n	800c920 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681a      	ldr	r2, [r3, #0]
 800c910:	683b      	ldr	r3, [r7, #0]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	4619      	mov	r1, r3
 800c916:	4610      	mov	r0, r2
 800c918:	f000 fb79 	bl	800d00e <TIM_ITRx_SetConfig>
      break;
 800c91c:	e000      	b.n	800c920 <HAL_TIM_ConfigClockSource+0x158>
      break;
 800c91e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	2201      	movs	r2, #1
 800c924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	2200      	movs	r2, #0
 800c92c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c930:	2300      	movs	r3, #0
}
 800c932:	4618      	mov	r0, r3
 800c934:	3710      	adds	r7, #16
 800c936:	46bd      	mov	sp, r7
 800c938:	bd80      	pop	{r7, pc}

0800c93a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c93a:	b480      	push	{r7}
 800c93c:	b083      	sub	sp, #12
 800c93e:	af00      	add	r7, sp, #0
 800c940:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c942:	bf00      	nop
 800c944:	370c      	adds	r7, #12
 800c946:	46bd      	mov	sp, r7
 800c948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94c:	4770      	bx	lr

0800c94e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c94e:	b480      	push	{r7}
 800c950:	b083      	sub	sp, #12
 800c952:	af00      	add	r7, sp, #0
 800c954:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c956:	bf00      	nop
 800c958:	370c      	adds	r7, #12
 800c95a:	46bd      	mov	sp, r7
 800c95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c960:	4770      	bx	lr

0800c962 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c962:	b480      	push	{r7}
 800c964:	b083      	sub	sp, #12
 800c966:	af00      	add	r7, sp, #0
 800c968:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c96a:	bf00      	nop
 800c96c:	370c      	adds	r7, #12
 800c96e:	46bd      	mov	sp, r7
 800c970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c974:	4770      	bx	lr

0800c976 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c976:	b480      	push	{r7}
 800c978:	b083      	sub	sp, #12
 800c97a:	af00      	add	r7, sp, #0
 800c97c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c97e:	bf00      	nop
 800c980:	370c      	adds	r7, #12
 800c982:	46bd      	mov	sp, r7
 800c984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c988:	4770      	bx	lr
	...

0800c98c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c98c:	b480      	push	{r7}
 800c98e:	b085      	sub	sp, #20
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
 800c994:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	4a2a      	ldr	r2, [pc, #168]	; (800ca48 <TIM_Base_SetConfig+0xbc>)
 800c9a0:	4293      	cmp	r3, r2
 800c9a2:	d003      	beq.n	800c9ac <TIM_Base_SetConfig+0x20>
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c9aa:	d108      	bne.n	800c9be <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c9b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c9b4:	683b      	ldr	r3, [r7, #0]
 800c9b6:	685b      	ldr	r3, [r3, #4]
 800c9b8:	68fa      	ldr	r2, [r7, #12]
 800c9ba:	4313      	orrs	r3, r2
 800c9bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	4a21      	ldr	r2, [pc, #132]	; (800ca48 <TIM_Base_SetConfig+0xbc>)
 800c9c2:	4293      	cmp	r3, r2
 800c9c4:	d00b      	beq.n	800c9de <TIM_Base_SetConfig+0x52>
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c9cc:	d007      	beq.n	800c9de <TIM_Base_SetConfig+0x52>
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	4a1e      	ldr	r2, [pc, #120]	; (800ca4c <TIM_Base_SetConfig+0xc0>)
 800c9d2:	4293      	cmp	r3, r2
 800c9d4:	d003      	beq.n	800c9de <TIM_Base_SetConfig+0x52>
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	4a1d      	ldr	r2, [pc, #116]	; (800ca50 <TIM_Base_SetConfig+0xc4>)
 800c9da:	4293      	cmp	r3, r2
 800c9dc:	d108      	bne.n	800c9f0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c9e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c9e6:	683b      	ldr	r3, [r7, #0]
 800c9e8:	68db      	ldr	r3, [r3, #12]
 800c9ea:	68fa      	ldr	r2, [r7, #12]
 800c9ec:	4313      	orrs	r3, r2
 800c9ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	695b      	ldr	r3, [r3, #20]
 800c9fa:	4313      	orrs	r3, r2
 800c9fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	68fa      	ldr	r2, [r7, #12]
 800ca02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ca04:	683b      	ldr	r3, [r7, #0]
 800ca06:	689a      	ldr	r2, [r3, #8]
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ca0c:	683b      	ldr	r3, [r7, #0]
 800ca0e:	681a      	ldr	r2, [r3, #0]
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	4a0c      	ldr	r2, [pc, #48]	; (800ca48 <TIM_Base_SetConfig+0xbc>)
 800ca18:	4293      	cmp	r3, r2
 800ca1a:	d007      	beq.n	800ca2c <TIM_Base_SetConfig+0xa0>
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	4a0b      	ldr	r2, [pc, #44]	; (800ca4c <TIM_Base_SetConfig+0xc0>)
 800ca20:	4293      	cmp	r3, r2
 800ca22:	d003      	beq.n	800ca2c <TIM_Base_SetConfig+0xa0>
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	4a0a      	ldr	r2, [pc, #40]	; (800ca50 <TIM_Base_SetConfig+0xc4>)
 800ca28:	4293      	cmp	r3, r2
 800ca2a:	d103      	bne.n	800ca34 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ca2c:	683b      	ldr	r3, [r7, #0]
 800ca2e:	691a      	ldr	r2, [r3, #16]
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	2201      	movs	r2, #1
 800ca38:	615a      	str	r2, [r3, #20]
}
 800ca3a:	bf00      	nop
 800ca3c:	3714      	adds	r7, #20
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca44:	4770      	bx	lr
 800ca46:	bf00      	nop
 800ca48:	40012c00 	.word	0x40012c00
 800ca4c:	40014400 	.word	0x40014400
 800ca50:	40014800 	.word	0x40014800

0800ca54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ca54:	b480      	push	{r7}
 800ca56:	b087      	sub	sp, #28
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
 800ca5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	6a1b      	ldr	r3, [r3, #32]
 800ca62:	f023 0201 	bic.w	r2, r3, #1
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	6a1b      	ldr	r3, [r3, #32]
 800ca6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	685b      	ldr	r3, [r3, #4]
 800ca74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	699b      	ldr	r3, [r3, #24]
 800ca7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ca82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	f023 0303 	bic.w	r3, r3, #3
 800ca8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	68fa      	ldr	r2, [r7, #12]
 800ca96:	4313      	orrs	r3, r2
 800ca98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ca9a:	697b      	ldr	r3, [r7, #20]
 800ca9c:	f023 0302 	bic.w	r3, r3, #2
 800caa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	689b      	ldr	r3, [r3, #8]
 800caa6:	697a      	ldr	r2, [r7, #20]
 800caa8:	4313      	orrs	r3, r2
 800caaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	4a24      	ldr	r2, [pc, #144]	; (800cb40 <TIM_OC1_SetConfig+0xec>)
 800cab0:	4293      	cmp	r3, r2
 800cab2:	d007      	beq.n	800cac4 <TIM_OC1_SetConfig+0x70>
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	4a23      	ldr	r2, [pc, #140]	; (800cb44 <TIM_OC1_SetConfig+0xf0>)
 800cab8:	4293      	cmp	r3, r2
 800caba:	d003      	beq.n	800cac4 <TIM_OC1_SetConfig+0x70>
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	4a22      	ldr	r2, [pc, #136]	; (800cb48 <TIM_OC1_SetConfig+0xf4>)
 800cac0:	4293      	cmp	r3, r2
 800cac2:	d10c      	bne.n	800cade <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cac4:	697b      	ldr	r3, [r7, #20]
 800cac6:	f023 0308 	bic.w	r3, r3, #8
 800caca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	68db      	ldr	r3, [r3, #12]
 800cad0:	697a      	ldr	r2, [r7, #20]
 800cad2:	4313      	orrs	r3, r2
 800cad4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800cad6:	697b      	ldr	r3, [r7, #20]
 800cad8:	f023 0304 	bic.w	r3, r3, #4
 800cadc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	4a17      	ldr	r2, [pc, #92]	; (800cb40 <TIM_OC1_SetConfig+0xec>)
 800cae2:	4293      	cmp	r3, r2
 800cae4:	d007      	beq.n	800caf6 <TIM_OC1_SetConfig+0xa2>
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	4a17      	ldr	r2, [pc, #92]	; (800cb48 <TIM_OC1_SetConfig+0xf4>)
 800caea:	4293      	cmp	r3, r2
 800caec:	d003      	beq.n	800caf6 <TIM_OC1_SetConfig+0xa2>
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	4a14      	ldr	r2, [pc, #80]	; (800cb44 <TIM_OC1_SetConfig+0xf0>)
 800caf2:	4293      	cmp	r3, r2
 800caf4:	d111      	bne.n	800cb1a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800caf6:	693b      	ldr	r3, [r7, #16]
 800caf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cafc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cafe:	693b      	ldr	r3, [r7, #16]
 800cb00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cb04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cb06:	683b      	ldr	r3, [r7, #0]
 800cb08:	695b      	ldr	r3, [r3, #20]
 800cb0a:	693a      	ldr	r2, [r7, #16]
 800cb0c:	4313      	orrs	r3, r2
 800cb0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cb10:	683b      	ldr	r3, [r7, #0]
 800cb12:	699b      	ldr	r3, [r3, #24]
 800cb14:	693a      	ldr	r2, [r7, #16]
 800cb16:	4313      	orrs	r3, r2
 800cb18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	693a      	ldr	r2, [r7, #16]
 800cb1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	68fa      	ldr	r2, [r7, #12]
 800cb24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cb26:	683b      	ldr	r3, [r7, #0]
 800cb28:	685a      	ldr	r2, [r3, #4]
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	697a      	ldr	r2, [r7, #20]
 800cb32:	621a      	str	r2, [r3, #32]
}
 800cb34:	bf00      	nop
 800cb36:	371c      	adds	r7, #28
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3e:	4770      	bx	lr
 800cb40:	40012c00 	.word	0x40012c00
 800cb44:	40014800 	.word	0x40014800
 800cb48:	40014400 	.word	0x40014400

0800cb4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cb4c:	b480      	push	{r7}
 800cb4e:	b087      	sub	sp, #28
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
 800cb54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	6a1b      	ldr	r3, [r3, #32]
 800cb5a:	f023 0210 	bic.w	r2, r3, #16
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	6a1b      	ldr	r3, [r3, #32]
 800cb66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	685b      	ldr	r3, [r3, #4]
 800cb6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	699b      	ldr	r3, [r3, #24]
 800cb72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cb7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cb7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cb86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	021b      	lsls	r3, r3, #8
 800cb8e:	68fa      	ldr	r2, [r7, #12]
 800cb90:	4313      	orrs	r3, r2
 800cb92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cb94:	697b      	ldr	r3, [r7, #20]
 800cb96:	f023 0320 	bic.w	r3, r3, #32
 800cb9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cb9c:	683b      	ldr	r3, [r7, #0]
 800cb9e:	689b      	ldr	r3, [r3, #8]
 800cba0:	011b      	lsls	r3, r3, #4
 800cba2:	697a      	ldr	r2, [r7, #20]
 800cba4:	4313      	orrs	r3, r2
 800cba6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	4a22      	ldr	r2, [pc, #136]	; (800cc34 <TIM_OC2_SetConfig+0xe8>)
 800cbac:	4293      	cmp	r3, r2
 800cbae:	d10d      	bne.n	800cbcc <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cbb0:	697b      	ldr	r3, [r7, #20]
 800cbb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cbb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cbb8:	683b      	ldr	r3, [r7, #0]
 800cbba:	68db      	ldr	r3, [r3, #12]
 800cbbc:	011b      	lsls	r3, r3, #4
 800cbbe:	697a      	ldr	r2, [r7, #20]
 800cbc0:	4313      	orrs	r3, r2
 800cbc2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cbc4:	697b      	ldr	r3, [r7, #20]
 800cbc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cbca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	4a19      	ldr	r2, [pc, #100]	; (800cc34 <TIM_OC2_SetConfig+0xe8>)
 800cbd0:	4293      	cmp	r3, r2
 800cbd2:	d007      	beq.n	800cbe4 <TIM_OC2_SetConfig+0x98>
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	4a18      	ldr	r2, [pc, #96]	; (800cc38 <TIM_OC2_SetConfig+0xec>)
 800cbd8:	4293      	cmp	r3, r2
 800cbda:	d003      	beq.n	800cbe4 <TIM_OC2_SetConfig+0x98>
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	4a17      	ldr	r2, [pc, #92]	; (800cc3c <TIM_OC2_SetConfig+0xf0>)
 800cbe0:	4293      	cmp	r3, r2
 800cbe2:	d113      	bne.n	800cc0c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cbe4:	693b      	ldr	r3, [r7, #16]
 800cbe6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cbea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cbec:	693b      	ldr	r3, [r7, #16]
 800cbee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cbf2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cbf4:	683b      	ldr	r3, [r7, #0]
 800cbf6:	695b      	ldr	r3, [r3, #20]
 800cbf8:	009b      	lsls	r3, r3, #2
 800cbfa:	693a      	ldr	r2, [r7, #16]
 800cbfc:	4313      	orrs	r3, r2
 800cbfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cc00:	683b      	ldr	r3, [r7, #0]
 800cc02:	699b      	ldr	r3, [r3, #24]
 800cc04:	009b      	lsls	r3, r3, #2
 800cc06:	693a      	ldr	r2, [r7, #16]
 800cc08:	4313      	orrs	r3, r2
 800cc0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	693a      	ldr	r2, [r7, #16]
 800cc10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	68fa      	ldr	r2, [r7, #12]
 800cc16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	685a      	ldr	r2, [r3, #4]
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	697a      	ldr	r2, [r7, #20]
 800cc24:	621a      	str	r2, [r3, #32]
}
 800cc26:	bf00      	nop
 800cc28:	371c      	adds	r7, #28
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc30:	4770      	bx	lr
 800cc32:	bf00      	nop
 800cc34:	40012c00 	.word	0x40012c00
 800cc38:	40014400 	.word	0x40014400
 800cc3c:	40014800 	.word	0x40014800

0800cc40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cc40:	b480      	push	{r7}
 800cc42:	b087      	sub	sp, #28
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
 800cc48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	6a1b      	ldr	r3, [r3, #32]
 800cc4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	6a1b      	ldr	r3, [r3, #32]
 800cc5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	685b      	ldr	r3, [r3, #4]
 800cc60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	69db      	ldr	r3, [r3, #28]
 800cc66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cc6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	f023 0303 	bic.w	r3, r3, #3
 800cc7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cc7c:	683b      	ldr	r3, [r7, #0]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	68fa      	ldr	r2, [r7, #12]
 800cc82:	4313      	orrs	r3, r2
 800cc84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cc86:	697b      	ldr	r3, [r7, #20]
 800cc88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cc8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cc8e:	683b      	ldr	r3, [r7, #0]
 800cc90:	689b      	ldr	r3, [r3, #8]
 800cc92:	021b      	lsls	r3, r3, #8
 800cc94:	697a      	ldr	r2, [r7, #20]
 800cc96:	4313      	orrs	r3, r2
 800cc98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	4a21      	ldr	r2, [pc, #132]	; (800cd24 <TIM_OC3_SetConfig+0xe4>)
 800cc9e:	4293      	cmp	r3, r2
 800cca0:	d10d      	bne.n	800ccbe <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cca2:	697b      	ldr	r3, [r7, #20]
 800cca4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cca8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ccaa:	683b      	ldr	r3, [r7, #0]
 800ccac:	68db      	ldr	r3, [r3, #12]
 800ccae:	021b      	lsls	r3, r3, #8
 800ccb0:	697a      	ldr	r2, [r7, #20]
 800ccb2:	4313      	orrs	r3, r2
 800ccb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ccb6:	697b      	ldr	r3, [r7, #20]
 800ccb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ccbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	4a18      	ldr	r2, [pc, #96]	; (800cd24 <TIM_OC3_SetConfig+0xe4>)
 800ccc2:	4293      	cmp	r3, r2
 800ccc4:	d007      	beq.n	800ccd6 <TIM_OC3_SetConfig+0x96>
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	4a17      	ldr	r2, [pc, #92]	; (800cd28 <TIM_OC3_SetConfig+0xe8>)
 800ccca:	4293      	cmp	r3, r2
 800cccc:	d003      	beq.n	800ccd6 <TIM_OC3_SetConfig+0x96>
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	4a16      	ldr	r2, [pc, #88]	; (800cd2c <TIM_OC3_SetConfig+0xec>)
 800ccd2:	4293      	cmp	r3, r2
 800ccd4:	d113      	bne.n	800ccfe <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ccd6:	693b      	ldr	r3, [r7, #16]
 800ccd8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ccdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ccde:	693b      	ldr	r3, [r7, #16]
 800cce0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cce4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	695b      	ldr	r3, [r3, #20]
 800ccea:	011b      	lsls	r3, r3, #4
 800ccec:	693a      	ldr	r2, [r7, #16]
 800ccee:	4313      	orrs	r3, r2
 800ccf0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ccf2:	683b      	ldr	r3, [r7, #0]
 800ccf4:	699b      	ldr	r3, [r3, #24]
 800ccf6:	011b      	lsls	r3, r3, #4
 800ccf8:	693a      	ldr	r2, [r7, #16]
 800ccfa:	4313      	orrs	r3, r2
 800ccfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	693a      	ldr	r2, [r7, #16]
 800cd02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	68fa      	ldr	r2, [r7, #12]
 800cd08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cd0a:	683b      	ldr	r3, [r7, #0]
 800cd0c:	685a      	ldr	r2, [r3, #4]
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	697a      	ldr	r2, [r7, #20]
 800cd16:	621a      	str	r2, [r3, #32]
}
 800cd18:	bf00      	nop
 800cd1a:	371c      	adds	r7, #28
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd22:	4770      	bx	lr
 800cd24:	40012c00 	.word	0x40012c00
 800cd28:	40014400 	.word	0x40014400
 800cd2c:	40014800 	.word	0x40014800

0800cd30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cd30:	b480      	push	{r7}
 800cd32:	b087      	sub	sp, #28
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
 800cd38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	6a1b      	ldr	r3, [r3, #32]
 800cd3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	6a1b      	ldr	r3, [r3, #32]
 800cd4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	685b      	ldr	r3, [r3, #4]
 800cd50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	69db      	ldr	r3, [r3, #28]
 800cd56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cd5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cd62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cd6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cd6c:	683b      	ldr	r3, [r7, #0]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	021b      	lsls	r3, r3, #8
 800cd72:	68fa      	ldr	r2, [r7, #12]
 800cd74:	4313      	orrs	r3, r2
 800cd76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cd78:	693b      	ldr	r3, [r7, #16]
 800cd7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cd7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cd80:	683b      	ldr	r3, [r7, #0]
 800cd82:	689b      	ldr	r3, [r3, #8]
 800cd84:	031b      	lsls	r3, r3, #12
 800cd86:	693a      	ldr	r2, [r7, #16]
 800cd88:	4313      	orrs	r3, r2
 800cd8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	4a14      	ldr	r2, [pc, #80]	; (800cde0 <TIM_OC4_SetConfig+0xb0>)
 800cd90:	4293      	cmp	r3, r2
 800cd92:	d007      	beq.n	800cda4 <TIM_OC4_SetConfig+0x74>
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	4a13      	ldr	r2, [pc, #76]	; (800cde4 <TIM_OC4_SetConfig+0xb4>)
 800cd98:	4293      	cmp	r3, r2
 800cd9a:	d003      	beq.n	800cda4 <TIM_OC4_SetConfig+0x74>
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	4a12      	ldr	r2, [pc, #72]	; (800cde8 <TIM_OC4_SetConfig+0xb8>)
 800cda0:	4293      	cmp	r3, r2
 800cda2:	d109      	bne.n	800cdb8 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cda4:	697b      	ldr	r3, [r7, #20]
 800cda6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cdaa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cdac:	683b      	ldr	r3, [r7, #0]
 800cdae:	695b      	ldr	r3, [r3, #20]
 800cdb0:	019b      	lsls	r3, r3, #6
 800cdb2:	697a      	ldr	r2, [r7, #20]
 800cdb4:	4313      	orrs	r3, r2
 800cdb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	697a      	ldr	r2, [r7, #20]
 800cdbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	68fa      	ldr	r2, [r7, #12]
 800cdc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cdc4:	683b      	ldr	r3, [r7, #0]
 800cdc6:	685a      	ldr	r2, [r3, #4]
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	693a      	ldr	r2, [r7, #16]
 800cdd0:	621a      	str	r2, [r3, #32]
}
 800cdd2:	bf00      	nop
 800cdd4:	371c      	adds	r7, #28
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cddc:	4770      	bx	lr
 800cdde:	bf00      	nop
 800cde0:	40012c00 	.word	0x40012c00
 800cde4:	40014400 	.word	0x40014400
 800cde8:	40014800 	.word	0x40014800

0800cdec <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800cdec:	b480      	push	{r7}
 800cdee:	b087      	sub	sp, #28
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	6078      	str	r0, [r7, #4]
 800cdf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	6a1b      	ldr	r3, [r3, #32]
 800cdfa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	6a1b      	ldr	r3, [r3, #32]
 800ce06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	685b      	ldr	r3, [r3, #4]
 800ce0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ce1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ce1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ce20:	683b      	ldr	r3, [r7, #0]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	68fa      	ldr	r2, [r7, #12]
 800ce26:	4313      	orrs	r3, r2
 800ce28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ce2a:	693b      	ldr	r3, [r7, #16]
 800ce2c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ce30:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ce32:	683b      	ldr	r3, [r7, #0]
 800ce34:	689b      	ldr	r3, [r3, #8]
 800ce36:	041b      	lsls	r3, r3, #16
 800ce38:	693a      	ldr	r2, [r7, #16]
 800ce3a:	4313      	orrs	r3, r2
 800ce3c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	4a13      	ldr	r2, [pc, #76]	; (800ce90 <TIM_OC5_SetConfig+0xa4>)
 800ce42:	4293      	cmp	r3, r2
 800ce44:	d007      	beq.n	800ce56 <TIM_OC5_SetConfig+0x6a>
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	4a12      	ldr	r2, [pc, #72]	; (800ce94 <TIM_OC5_SetConfig+0xa8>)
 800ce4a:	4293      	cmp	r3, r2
 800ce4c:	d003      	beq.n	800ce56 <TIM_OC5_SetConfig+0x6a>
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	4a11      	ldr	r2, [pc, #68]	; (800ce98 <TIM_OC5_SetConfig+0xac>)
 800ce52:	4293      	cmp	r3, r2
 800ce54:	d109      	bne.n	800ce6a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ce56:	697b      	ldr	r3, [r7, #20]
 800ce58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ce5c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ce5e:	683b      	ldr	r3, [r7, #0]
 800ce60:	695b      	ldr	r3, [r3, #20]
 800ce62:	021b      	lsls	r3, r3, #8
 800ce64:	697a      	ldr	r2, [r7, #20]
 800ce66:	4313      	orrs	r3, r2
 800ce68:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	697a      	ldr	r2, [r7, #20]
 800ce6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	68fa      	ldr	r2, [r7, #12]
 800ce74:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ce76:	683b      	ldr	r3, [r7, #0]
 800ce78:	685a      	ldr	r2, [r3, #4]
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	693a      	ldr	r2, [r7, #16]
 800ce82:	621a      	str	r2, [r3, #32]
}
 800ce84:	bf00      	nop
 800ce86:	371c      	adds	r7, #28
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8e:	4770      	bx	lr
 800ce90:	40012c00 	.word	0x40012c00
 800ce94:	40014400 	.word	0x40014400
 800ce98:	40014800 	.word	0x40014800

0800ce9c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ce9c:	b480      	push	{r7}
 800ce9e:	b087      	sub	sp, #28
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
 800cea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	6a1b      	ldr	r3, [r3, #32]
 800ceaa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	6a1b      	ldr	r3, [r3, #32]
 800ceb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	685b      	ldr	r3, [r3, #4]
 800cebc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ceca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cece:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ced0:	683b      	ldr	r3, [r7, #0]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	021b      	lsls	r3, r3, #8
 800ced6:	68fa      	ldr	r2, [r7, #12]
 800ced8:	4313      	orrs	r3, r2
 800ceda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800cedc:	693b      	ldr	r3, [r7, #16]
 800cede:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cee2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800cee4:	683b      	ldr	r3, [r7, #0]
 800cee6:	689b      	ldr	r3, [r3, #8]
 800cee8:	051b      	lsls	r3, r3, #20
 800ceea:	693a      	ldr	r2, [r7, #16]
 800ceec:	4313      	orrs	r3, r2
 800ceee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	4a14      	ldr	r2, [pc, #80]	; (800cf44 <TIM_OC6_SetConfig+0xa8>)
 800cef4:	4293      	cmp	r3, r2
 800cef6:	d007      	beq.n	800cf08 <TIM_OC6_SetConfig+0x6c>
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	4a13      	ldr	r2, [pc, #76]	; (800cf48 <TIM_OC6_SetConfig+0xac>)
 800cefc:	4293      	cmp	r3, r2
 800cefe:	d003      	beq.n	800cf08 <TIM_OC6_SetConfig+0x6c>
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	4a12      	ldr	r2, [pc, #72]	; (800cf4c <TIM_OC6_SetConfig+0xb0>)
 800cf04:	4293      	cmp	r3, r2
 800cf06:	d109      	bne.n	800cf1c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800cf08:	697b      	ldr	r3, [r7, #20]
 800cf0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cf0e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800cf10:	683b      	ldr	r3, [r7, #0]
 800cf12:	695b      	ldr	r3, [r3, #20]
 800cf14:	029b      	lsls	r3, r3, #10
 800cf16:	697a      	ldr	r2, [r7, #20]
 800cf18:	4313      	orrs	r3, r2
 800cf1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	697a      	ldr	r2, [r7, #20]
 800cf20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	68fa      	ldr	r2, [r7, #12]
 800cf26:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800cf28:	683b      	ldr	r3, [r7, #0]
 800cf2a:	685a      	ldr	r2, [r3, #4]
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	693a      	ldr	r2, [r7, #16]
 800cf34:	621a      	str	r2, [r3, #32]
}
 800cf36:	bf00      	nop
 800cf38:	371c      	adds	r7, #28
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf40:	4770      	bx	lr
 800cf42:	bf00      	nop
 800cf44:	40012c00 	.word	0x40012c00
 800cf48:	40014400 	.word	0x40014400
 800cf4c:	40014800 	.word	0x40014800

0800cf50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cf50:	b480      	push	{r7}
 800cf52:	b087      	sub	sp, #28
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	60f8      	str	r0, [r7, #12]
 800cf58:	60b9      	str	r1, [r7, #8]
 800cf5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	6a1b      	ldr	r3, [r3, #32]
 800cf60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	6a1b      	ldr	r3, [r3, #32]
 800cf66:	f023 0201 	bic.w	r2, r3, #1
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	699b      	ldr	r3, [r3, #24]
 800cf72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cf74:	693b      	ldr	r3, [r7, #16]
 800cf76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cf7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	011b      	lsls	r3, r3, #4
 800cf80:	693a      	ldr	r2, [r7, #16]
 800cf82:	4313      	orrs	r3, r2
 800cf84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cf86:	697b      	ldr	r3, [r7, #20]
 800cf88:	f023 030a 	bic.w	r3, r3, #10
 800cf8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cf8e:	697a      	ldr	r2, [r7, #20]
 800cf90:	68bb      	ldr	r3, [r7, #8]
 800cf92:	4313      	orrs	r3, r2
 800cf94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	693a      	ldr	r2, [r7, #16]
 800cf9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	697a      	ldr	r2, [r7, #20]
 800cfa0:	621a      	str	r2, [r3, #32]
}
 800cfa2:	bf00      	nop
 800cfa4:	371c      	adds	r7, #28
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfac:	4770      	bx	lr

0800cfae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cfae:	b480      	push	{r7}
 800cfb0:	b087      	sub	sp, #28
 800cfb2:	af00      	add	r7, sp, #0
 800cfb4:	60f8      	str	r0, [r7, #12]
 800cfb6:	60b9      	str	r1, [r7, #8]
 800cfb8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	6a1b      	ldr	r3, [r3, #32]
 800cfbe:	f023 0210 	bic.w	r2, r3, #16
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	699b      	ldr	r3, [r3, #24]
 800cfca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	6a1b      	ldr	r3, [r3, #32]
 800cfd0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cfd2:	697b      	ldr	r3, [r7, #20]
 800cfd4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cfd8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	031b      	lsls	r3, r3, #12
 800cfde:	697a      	ldr	r2, [r7, #20]
 800cfe0:	4313      	orrs	r3, r2
 800cfe2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cfe4:	693b      	ldr	r3, [r7, #16]
 800cfe6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cfea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cfec:	68bb      	ldr	r3, [r7, #8]
 800cfee:	011b      	lsls	r3, r3, #4
 800cff0:	693a      	ldr	r2, [r7, #16]
 800cff2:	4313      	orrs	r3, r2
 800cff4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	697a      	ldr	r2, [r7, #20]
 800cffa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	693a      	ldr	r2, [r7, #16]
 800d000:	621a      	str	r2, [r3, #32]
}
 800d002:	bf00      	nop
 800d004:	371c      	adds	r7, #28
 800d006:	46bd      	mov	sp, r7
 800d008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00c:	4770      	bx	lr

0800d00e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d00e:	b480      	push	{r7}
 800d010:	b085      	sub	sp, #20
 800d012:	af00      	add	r7, sp, #0
 800d014:	6078      	str	r0, [r7, #4]
 800d016:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	689b      	ldr	r3, [r3, #8]
 800d01c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800d024:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d028:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d02a:	683a      	ldr	r2, [r7, #0]
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	4313      	orrs	r3, r2
 800d030:	f043 0307 	orr.w	r3, r3, #7
 800d034:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	68fa      	ldr	r2, [r7, #12]
 800d03a:	609a      	str	r2, [r3, #8]
}
 800d03c:	bf00      	nop
 800d03e:	3714      	adds	r7, #20
 800d040:	46bd      	mov	sp, r7
 800d042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d046:	4770      	bx	lr

0800d048 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d048:	b480      	push	{r7}
 800d04a:	b087      	sub	sp, #28
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	60f8      	str	r0, [r7, #12]
 800d050:	60b9      	str	r1, [r7, #8]
 800d052:	607a      	str	r2, [r7, #4]
 800d054:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	689b      	ldr	r3, [r3, #8]
 800d05a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d05c:	697b      	ldr	r3, [r7, #20]
 800d05e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d062:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d064:	683b      	ldr	r3, [r7, #0]
 800d066:	021a      	lsls	r2, r3, #8
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	431a      	orrs	r2, r3
 800d06c:	68bb      	ldr	r3, [r7, #8]
 800d06e:	4313      	orrs	r3, r2
 800d070:	697a      	ldr	r2, [r7, #20]
 800d072:	4313      	orrs	r3, r2
 800d074:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	697a      	ldr	r2, [r7, #20]
 800d07a:	609a      	str	r2, [r3, #8]
}
 800d07c:	bf00      	nop
 800d07e:	371c      	adds	r7, #28
 800d080:	46bd      	mov	sp, r7
 800d082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d086:	4770      	bx	lr

0800d088 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d088:	b480      	push	{r7}
 800d08a:	b087      	sub	sp, #28
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	60f8      	str	r0, [r7, #12]
 800d090:	60b9      	str	r1, [r7, #8]
 800d092:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d094:	68bb      	ldr	r3, [r7, #8]
 800d096:	f003 031f 	and.w	r3, r3, #31
 800d09a:	2201      	movs	r2, #1
 800d09c:	fa02 f303 	lsl.w	r3, r2, r3
 800d0a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	6a1a      	ldr	r2, [r3, #32]
 800d0a6:	697b      	ldr	r3, [r7, #20]
 800d0a8:	43db      	mvns	r3, r3
 800d0aa:	401a      	ands	r2, r3
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	6a1a      	ldr	r2, [r3, #32]
 800d0b4:	68bb      	ldr	r3, [r7, #8]
 800d0b6:	f003 031f 	and.w	r3, r3, #31
 800d0ba:	6879      	ldr	r1, [r7, #4]
 800d0bc:	fa01 f303 	lsl.w	r3, r1, r3
 800d0c0:	431a      	orrs	r2, r3
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	621a      	str	r2, [r3, #32]
}
 800d0c6:	bf00      	nop
 800d0c8:	371c      	adds	r7, #28
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d0:	4770      	bx	lr
	...

0800d0d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d0d4:	b480      	push	{r7}
 800d0d6:	b085      	sub	sp, #20
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]
 800d0dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d0e4:	2b01      	cmp	r3, #1
 800d0e6:	d101      	bne.n	800d0ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d0e8:	2302      	movs	r3, #2
 800d0ea:	e04a      	b.n	800d182 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	2201      	movs	r2, #1
 800d0f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	2202      	movs	r2, #2
 800d0f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	685b      	ldr	r3, [r3, #4]
 800d102:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	689b      	ldr	r3, [r3, #8]
 800d10a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	4a1f      	ldr	r2, [pc, #124]	; (800d190 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800d112:	4293      	cmp	r3, r2
 800d114:	d108      	bne.n	800d128 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d11c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d11e:	683b      	ldr	r3, [r7, #0]
 800d120:	685b      	ldr	r3, [r3, #4]
 800d122:	68fa      	ldr	r2, [r7, #12]
 800d124:	4313      	orrs	r3, r2
 800d126:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d12e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d130:	683b      	ldr	r3, [r7, #0]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	68fa      	ldr	r2, [r7, #12]
 800d136:	4313      	orrs	r3, r2
 800d138:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	68fa      	ldr	r2, [r7, #12]
 800d140:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	4a12      	ldr	r2, [pc, #72]	; (800d190 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800d148:	4293      	cmp	r3, r2
 800d14a:	d004      	beq.n	800d156 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d154:	d10c      	bne.n	800d170 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d156:	68bb      	ldr	r3, [r7, #8]
 800d158:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d15c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d15e:	683b      	ldr	r3, [r7, #0]
 800d160:	689b      	ldr	r3, [r3, #8]
 800d162:	68ba      	ldr	r2, [r7, #8]
 800d164:	4313      	orrs	r3, r2
 800d166:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	68ba      	ldr	r2, [r7, #8]
 800d16e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	2201      	movs	r2, #1
 800d174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	2200      	movs	r2, #0
 800d17c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d180:	2300      	movs	r3, #0
}
 800d182:	4618      	mov	r0, r3
 800d184:	3714      	adds	r7, #20
 800d186:	46bd      	mov	sp, r7
 800d188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18c:	4770      	bx	lr
 800d18e:	bf00      	nop
 800d190:	40012c00 	.word	0x40012c00

0800d194 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d194:	b480      	push	{r7}
 800d196:	b083      	sub	sp, #12
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d19c:	bf00      	nop
 800d19e:	370c      	adds	r7, #12
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a6:	4770      	bx	lr

0800d1a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d1a8:	b480      	push	{r7}
 800d1aa:	b083      	sub	sp, #12
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d1b0:	bf00      	nop
 800d1b2:	370c      	adds	r7, #12
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ba:	4770      	bx	lr

0800d1bc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d1bc:	b480      	push	{r7}
 800d1be:	b083      	sub	sp, #12
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d1c4:	bf00      	nop
 800d1c6:	370c      	adds	r7, #12
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ce:	4770      	bx	lr

0800d1d0 <HAL_TSC_Init>:
  *         in the TSC_InitTypeDef structure and initialize the associated handle.
  * @param  htsc TSC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_Init(TSC_HandleTypeDef *htsc)
{
 800d1d0:	b590      	push	{r4, r7, lr}
 800d1d2:	b083      	sub	sp, #12
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
  /* Check TSC handle allocation */
  if (htsc == NULL)
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d101      	bne.n	800d1e2 <HAL_TSC_Init+0x12>
  {
    return HAL_ERROR;
 800d1de:	2301      	movs	r3, #1
 800d1e0:	e072      	b.n	800d2c8 <HAL_TSC_Init+0xf8>
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));
  assert_param(IS_TSC_GROUP(htsc->Init.ChannelIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.ShieldIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.SamplingIOs));

  if (htsc->State == HAL_TSC_STATE_RESET)
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d1e8:	b2db      	uxtb	r3, r3
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d106      	bne.n	800d1fc <HAL_TSC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htsc->Lock = HAL_UNLOCKED;
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    htsc->MspInitCallback(htsc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_TSC_MspInit(htsc);
 800d1f6:	6878      	ldr	r0, [r7, #4]
 800d1f8:	f7f8 fd98 	bl	8005d2c <HAL_TSC_MspInit>
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	2202      	movs	r2, #2
 800d200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /*--------------------------------------------------------------------------*/
  /* Set TSC parameters */

  /* Enable TSC */
  htsc->Instance->CR = TSC_CR_TSCE;
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	2201      	movs	r2, #1
 800d20a:	601a      	str	r2, [r3, #0]

  /* Set all functions */
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	6819      	ldr	r1, [r3, #0]
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	685a      	ldr	r2, [r3, #4]
                         htsc->Init.CTPulseLowLength |
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	689b      	ldr	r3, [r3, #8]
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 800d21a:	431a      	orrs	r2, r3
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	691b      	ldr	r3, [r3, #16]
 800d220:	045b      	lsls	r3, r3, #17
                         htsc->Init.CTPulseLowLength |
 800d222:	431a      	orrs	r2, r3
                         htsc->Init.SpreadSpectrumPrescaler |
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	695b      	ldr	r3, [r3, #20]
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 800d228:	431a      	orrs	r2, r3
                         htsc->Init.PulseGeneratorPrescaler |
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	699b      	ldr	r3, [r3, #24]
                         htsc->Init.SpreadSpectrumPrescaler |
 800d22e:	431a      	orrs	r2, r3
                         htsc->Init.MaxCountValue |
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	69db      	ldr	r3, [r3, #28]
                         htsc->Init.PulseGeneratorPrescaler |
 800d234:	431a      	orrs	r2, r3
                         htsc->Init.SynchroPinPolarity |
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         htsc->Init.MaxCountValue |
 800d23a:	431a      	orrs	r2, r3
                         htsc->Init.AcquisitionMode);
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         htsc->Init.SynchroPinPolarity |
 800d240:	431a      	orrs	r2, r3
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	430a      	orrs	r2, r1
 800d248:	601a      	str	r2, [r3, #0]

  /* Spread spectrum */
  if (htsc->Init.SpreadSpectrum == ENABLE)
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	7b1b      	ldrb	r3, [r3, #12]
 800d24e:	2b01      	cmp	r3, #1
 800d250:	d107      	bne.n	800d262 <HAL_TSC_Init+0x92>
  {
    htsc->Instance->CR |= TSC_CR_SSE;
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	681a      	ldr	r2, [r3, #0]
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800d260:	601a      	str	r2, [r3, #0]
  }

  /* Disable Schmitt trigger hysteresis on all used TSC IOs */
  htsc->Instance->IOHCR = (~(htsc->Init.ChannelIOs | htsc->Init.ShieldIOs | htsc->Init.SamplingIOs));
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d26a:	431a      	orrs	r2, r3
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d270:	431a      	orrs	r2, r3
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	43d2      	mvns	r2, r2
 800d278:	611a      	str	r2, [r3, #16]

  /* Set channel and shield IOs */
  htsc->Instance->IOCCR = (htsc->Init.ChannelIOs | htsc->Init.ShieldIOs);
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	430a      	orrs	r2, r1
 800d288:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set sampling IOs */
  htsc->Instance->IOSCR = htsc->Init.SamplingIOs;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	687a      	ldr	r2, [r7, #4]
 800d290:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d292:	621a      	str	r2, [r3, #32]

  /* Set the groups to be acquired */
  htsc->Instance->IOGCSR = TSC_extract_groups(htsc->Init.ChannelIOs);
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	681c      	ldr	r4, [r3, #0]
 800d29c:	4610      	mov	r0, r2
 800d29e:	f000 f952 	bl	800d546 <TSC_extract_groups>
 800d2a2:	4603      	mov	r3, r0
 800d2a4:	6323      	str	r3, [r4, #48]	; 0x30

  /* Disable interrupts */
  htsc->Instance->IER &= (~(TSC_IT_EOA | TSC_IT_MCE));
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	685a      	ldr	r2, [r3, #4]
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	f022 0203 	bic.w	r2, r2, #3
 800d2b4:	605a      	str	r2, [r3, #4]

  /* Clear flags */
  htsc->Instance->ICR = (TSC_FLAG_EOA | TSC_FLAG_MCE);
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	2203      	movs	r2, #3
 800d2bc:	609a      	str	r2, [r3, #8]

  /*--------------------------------------------------------------------------*/

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_READY;
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	2201      	movs	r2, #1
 800d2c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800d2c6:	2300      	movs	r3, #0
}
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	370c      	adds	r7, #12
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	bd90      	pop	{r4, r7, pc}

0800d2d0 <HAL_TSC_Start_IT>:
  * @param  htsc Pointer to a TSC_HandleTypeDef structure that contains
  *         the configuration information for the specified TSC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_TSC_Start_IT(TSC_HandleTypeDef *htsc)
{
 800d2d0:	b480      	push	{r7}
 800d2d2:	b083      	sub	sp, #12
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));

  /* Process locked */
  __HAL_LOCK(htsc);
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d2de:	2b01      	cmp	r3, #1
 800d2e0:	d101      	bne.n	800d2e6 <HAL_TSC_Start_IT+0x16>
 800d2e2:	2302      	movs	r3, #2
 800d2e4:	e04b      	b.n	800d37e <HAL_TSC_Start_IT+0xae>
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	2201      	movs	r2, #1
 800d2ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Change TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	2202      	movs	r2, #2
 800d2f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable end of acquisition interrupt */
  __HAL_TSC_ENABLE_IT(htsc, TSC_IT_EOA);
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	685a      	ldr	r2, [r3, #4]
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	f042 0201 	orr.w	r2, r2, #1
 800d304:	605a      	str	r2, [r3, #4]

  /* Enable max count error interrupt (optional) */
  if (htsc->Init.MaxCountInterrupt == ENABLE)
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d30c:	2b01      	cmp	r3, #1
 800d30e:	d108      	bne.n	800d322 <HAL_TSC_Start_IT+0x52>
  {
    __HAL_TSC_ENABLE_IT(htsc, TSC_IT_MCE);
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	685a      	ldr	r2, [r3, #4]
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	f042 0202 	orr.w	r2, r2, #2
 800d31e:	605a      	str	r2, [r3, #4]
 800d320:	e007      	b.n	800d332 <HAL_TSC_Start_IT+0x62>
  }
  else
  {
    __HAL_TSC_DISABLE_IT(htsc, TSC_IT_MCE);
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	685a      	ldr	r2, [r3, #4]
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	f022 0202 	bic.w	r2, r2, #2
 800d330:	605a      	str	r2, [r3, #4]
  }

  /* Clear flags */
  __HAL_TSC_CLEAR_FLAG(htsc, (TSC_FLAG_EOA | TSC_FLAG_MCE));
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	2203      	movs	r2, #3
 800d338:	609a      	str	r2, [r3, #8]

  /* Set touch sensing IOs not acquired to the specified IODefaultMode */
  if (htsc->Init.IODefaultMode == TSC_IODEF_OUT_PP_LOW)
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	6a1b      	ldr	r3, [r3, #32]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d108      	bne.n	800d354 <HAL_TSC_Start_IT+0x84>
  {
    __HAL_TSC_SET_IODEF_OUTPPLOW(htsc);
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	681a      	ldr	r2, [r3, #0]
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	f022 0210 	bic.w	r2, r2, #16
 800d350:	601a      	str	r2, [r3, #0]
 800d352:	e007      	b.n	800d364 <HAL_TSC_Start_IT+0x94>
  }
  else
  {
    __HAL_TSC_SET_IODEF_INFLOAT(htsc);
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	681a      	ldr	r2, [r3, #0]
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	f042 0210 	orr.w	r2, r2, #16
 800d362:	601a      	str	r2, [r3, #0]
  }

  /* Launch the acquisition */
  __HAL_TSC_START_ACQ(htsc);
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	681a      	ldr	r2, [r3, #0]
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	f042 0202 	orr.w	r2, r2, #2
 800d372:	601a      	str	r2, [r3, #0]

  /* Process unlocked */
  __HAL_UNLOCK(htsc);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	2200      	movs	r2, #0
 800d378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800d37c:	2300      	movs	r3, #0
}
 800d37e:	4618      	mov	r0, r3
 800d380:	370c      	adds	r7, #12
 800d382:	46bd      	mov	sp, r7
 800d384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d388:	4770      	bx	lr

0800d38a <HAL_TSC_GroupGetStatus>:
  *         the configuration information for the specified TSC.
  * @param  gx_index Index of the group
  * @retval Group status
  */
TSC_GroupStatusTypeDef HAL_TSC_GroupGetStatus(TSC_HandleTypeDef *htsc, uint32_t gx_index)
{
 800d38a:	b480      	push	{r7}
 800d38c:	b083      	sub	sp, #12
 800d38e:	af00      	add	r7, sp, #0
 800d390:	6078      	str	r0, [r7, #4]
 800d392:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));
  assert_param(IS_TSC_GROUP_INDEX(gx_index));

  /* Return the group status */
  return (__HAL_TSC_GET_GROUP_STATUS(htsc, gx_index));
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d39a:	683b      	ldr	r3, [r7, #0]
 800d39c:	f003 030f 	and.w	r3, r3, #15
 800d3a0:	3310      	adds	r3, #16
 800d3a2:	2101      	movs	r1, #1
 800d3a4:	fa01 f303 	lsl.w	r3, r1, r3
 800d3a8:	401a      	ands	r2, r3
 800d3aa:	683b      	ldr	r3, [r7, #0]
 800d3ac:	f003 030f 	and.w	r3, r3, #15
 800d3b0:	3310      	adds	r3, #16
 800d3b2:	2101      	movs	r1, #1
 800d3b4:	fa01 f303 	lsl.w	r3, r1, r3
 800d3b8:	429a      	cmp	r2, r3
 800d3ba:	bf0c      	ite	eq
 800d3bc:	2301      	moveq	r3, #1
 800d3be:	2300      	movne	r3, #0
 800d3c0:	b2db      	uxtb	r3, r3
}
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	370c      	adds	r7, #12
 800d3c6:	46bd      	mov	sp, r7
 800d3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3cc:	4770      	bx	lr

0800d3ce <HAL_TSC_GroupGetValue>:
  *         the configuration information for the specified TSC.
  * @param  gx_index Index of the group
  * @retval Acquisition measure
  */
uint32_t HAL_TSC_GroupGetValue(TSC_HandleTypeDef *htsc, uint32_t gx_index)
{
 800d3ce:	b480      	push	{r7}
 800d3d0:	b083      	sub	sp, #12
 800d3d2:	af00      	add	r7, sp, #0
 800d3d4:	6078      	str	r0, [r7, #4]
 800d3d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));
  assert_param(IS_TSC_GROUP_INDEX(gx_index));

  /* Return the group acquisition counter */
  return htsc->Instance->IOGXCR[gx_index];
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	681a      	ldr	r2, [r3, #0]
 800d3dc:	683b      	ldr	r3, [r7, #0]
 800d3de:	330c      	adds	r3, #12
 800d3e0:	009b      	lsls	r3, r3, #2
 800d3e2:	4413      	add	r3, r2
 800d3e4:	685b      	ldr	r3, [r3, #4]
}
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	370c      	adds	r7, #12
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f0:	4770      	bx	lr

0800d3f2 <HAL_TSC_IOConfig>:
  *         the configuration information for the specified TSC.
  * @param  config Pointer to the configuration structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_IOConfig(TSC_HandleTypeDef *htsc, TSC_IOConfigTypeDef *config)
{
 800d3f2:	b590      	push	{r4, r7, lr}
 800d3f4:	b083      	sub	sp, #12
 800d3f6:	af00      	add	r7, sp, #0
 800d3f8:	6078      	str	r0, [r7, #4]
 800d3fa:	6039      	str	r1, [r7, #0]
  assert_param(IS_TSC_GROUP(config->ChannelIOs));
  assert_param(IS_TSC_GROUP(config->ShieldIOs));
  assert_param(IS_TSC_GROUP(config->SamplingIOs));

  /* Process locked */
  __HAL_LOCK(htsc);
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d402:	2b01      	cmp	r3, #1
 800d404:	d101      	bne.n	800d40a <HAL_TSC_IOConfig+0x18>
 800d406:	2302      	movs	r3, #2
 800d408:	e032      	b.n	800d470 <HAL_TSC_IOConfig+0x7e>
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	2201      	movs	r2, #1
 800d40e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Stop acquisition */
  __HAL_TSC_STOP_ACQ(htsc);
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	681a      	ldr	r2, [r3, #0]
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	f022 0202 	bic.w	r2, r2, #2
 800d420:	601a      	str	r2, [r3, #0]

  /* Disable Schmitt trigger hysteresis on all used TSC IOs */
  htsc->Instance->IOHCR = (~(config->ChannelIOs | config->ShieldIOs | config->SamplingIOs));
 800d422:	683b      	ldr	r3, [r7, #0]
 800d424:	681a      	ldr	r2, [r3, #0]
 800d426:	683b      	ldr	r3, [r7, #0]
 800d428:	685b      	ldr	r3, [r3, #4]
 800d42a:	431a      	orrs	r2, r3
 800d42c:	683b      	ldr	r3, [r7, #0]
 800d42e:	689b      	ldr	r3, [r3, #8]
 800d430:	431a      	orrs	r2, r3
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	43d2      	mvns	r2, r2
 800d438:	611a      	str	r2, [r3, #16]

  /* Set channel and shield IOs */
  htsc->Instance->IOCCR = (config->ChannelIOs | config->ShieldIOs);
 800d43a:	683b      	ldr	r3, [r7, #0]
 800d43c:	6819      	ldr	r1, [r3, #0]
 800d43e:	683b      	ldr	r3, [r7, #0]
 800d440:	685a      	ldr	r2, [r3, #4]
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	430a      	orrs	r2, r1
 800d448:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set sampling IOs */
  htsc->Instance->IOSCR = config->SamplingIOs;
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	683a      	ldr	r2, [r7, #0]
 800d450:	6892      	ldr	r2, [r2, #8]
 800d452:	621a      	str	r2, [r3, #32]

  /* Set groups to be acquired */
  htsc->Instance->IOGCSR = TSC_extract_groups(config->ChannelIOs);
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	681a      	ldr	r2, [r3, #0]
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	681c      	ldr	r4, [r3, #0]
 800d45c:	4610      	mov	r0, r2
 800d45e:	f000 f872 	bl	800d546 <TSC_extract_groups>
 800d462:	4603      	mov	r3, r0
 800d464:	6323      	str	r3, [r4, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(htsc);
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	2200      	movs	r2, #0
 800d46a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800d46e:	2300      	movs	r3, #0
}
 800d470:	4618      	mov	r0, r3
 800d472:	370c      	adds	r7, #12
 800d474:	46bd      	mov	sp, r7
 800d476:	bd90      	pop	{r4, r7, pc}

0800d478 <HAL_TSC_IODischarge>:
  *         the configuration information for the specified TSC.
  * @param  choice This parameter can be set to ENABLE or DISABLE.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_IODischarge(TSC_HandleTypeDef *htsc, FunctionalState choice)
{
 800d478:	b480      	push	{r7}
 800d47a:	b083      	sub	sp, #12
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	6078      	str	r0, [r7, #4]
 800d480:	460b      	mov	r3, r1
 800d482:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));

  /* Process locked */
  __HAL_LOCK(htsc);
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d48a:	2b01      	cmp	r3, #1
 800d48c:	d101      	bne.n	800d492 <HAL_TSC_IODischarge+0x1a>
 800d48e:	2302      	movs	r3, #2
 800d490:	e01c      	b.n	800d4cc <HAL_TSC_IODischarge+0x54>
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	2201      	movs	r2, #1
 800d496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (choice == ENABLE)
 800d49a:	78fb      	ldrb	r3, [r7, #3]
 800d49c:	2b01      	cmp	r3, #1
 800d49e:	d108      	bne.n	800d4b2 <HAL_TSC_IODischarge+0x3a>
  {
    __HAL_TSC_SET_IODEF_OUTPPLOW(htsc);
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	681a      	ldr	r2, [r3, #0]
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	f022 0210 	bic.w	r2, r2, #16
 800d4ae:	601a      	str	r2, [r3, #0]
 800d4b0:	e007      	b.n	800d4c2 <HAL_TSC_IODischarge+0x4a>
  }
  else
  {
    __HAL_TSC_SET_IODEF_INFLOAT(htsc);
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	681a      	ldr	r2, [r3, #0]
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	f042 0210 	orr.w	r2, r2, #16
 800d4c0:	601a      	str	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(htsc);
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	2200      	movs	r2, #0
 800d4c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return the group acquisition counter */
  return HAL_OK;
 800d4ca:	2300      	movs	r3, #0
}
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	370c      	adds	r7, #12
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d6:	4770      	bx	lr

0800d4d8 <HAL_TSC_IRQHandler>:
  * @param  htsc Pointer to a TSC_HandleTypeDef structure that contains
  *         the configuration information for the specified TSC.
  * @retval None
  */
void HAL_TSC_IRQHandler(TSC_HandleTypeDef *htsc)
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b082      	sub	sp, #8
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));

  /* Check if the end of acquisition occurred */
  if (__HAL_TSC_GET_FLAG(htsc, TSC_FLAG_EOA) != RESET)
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	68db      	ldr	r3, [r3, #12]
 800d4e6:	f003 0301 	and.w	r3, r3, #1
 800d4ea:	2b01      	cmp	r3, #1
 800d4ec:	d103      	bne.n	800d4f6 <HAL_TSC_IRQHandler+0x1e>
  {
    /* Clear EOA flag */
    __HAL_TSC_CLEAR_FLAG(htsc, TSC_FLAG_EOA);
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	2201      	movs	r2, #1
 800d4f4:	609a      	str	r2, [r3, #8]
  }

  /* Check if max count error occurred */
  if (__HAL_TSC_GET_FLAG(htsc, TSC_FLAG_MCE) != RESET)
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	68db      	ldr	r3, [r3, #12]
 800d4fc:	f003 0302 	and.w	r3, r3, #2
 800d500:	2b02      	cmp	r3, #2
 800d502:	d10b      	bne.n	800d51c <HAL_TSC_IRQHandler+0x44>
  {
    /* Clear MCE flag */
    __HAL_TSC_CLEAR_FLAG(htsc, TSC_FLAG_MCE);
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	2202      	movs	r2, #2
 800d50a:	609a      	str	r2, [r3, #8]
    /* Change TSC state */
    htsc->State = HAL_TSC_STATE_ERROR;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	2203      	movs	r2, #3
 800d510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
#if (USE_HAL_TSC_REGISTER_CALLBACKS == 1)
    htsc->ErrorCallback(htsc);
#else
    /* Conversion completed callback */
    HAL_TSC_ErrorCallback(htsc);
 800d514:	6878      	ldr	r0, [r7, #4]
 800d516:	f000 f80c 	bl	800d532 <HAL_TSC_ErrorCallback>
#else
    /* Conversion completed callback */
    HAL_TSC_ConvCpltCallback(htsc);
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }
}
 800d51a:	e006      	b.n	800d52a <HAL_TSC_IRQHandler+0x52>
    htsc->State = HAL_TSC_STATE_READY;
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	2201      	movs	r2, #1
 800d520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    HAL_TSC_ConvCpltCallback(htsc);
 800d524:	6878      	ldr	r0, [r7, #4]
 800d526:	f7f8 f81f 	bl	8005568 <HAL_TSC_ConvCpltCallback>
}
 800d52a:	bf00      	nop
 800d52c:	3708      	adds	r7, #8
 800d52e:	46bd      	mov	sp, r7
 800d530:	bd80      	pop	{r7, pc}

0800d532 <HAL_TSC_ErrorCallback>:
  * @param  htsc Pointer to a TSC_HandleTypeDef structure that contains
  *         the configuration information for the specified TSC.
  * @retval None
  */
__weak void HAL_TSC_ErrorCallback(TSC_HandleTypeDef *htsc)
{
 800d532:	b480      	push	{r7}
 800d534:	b083      	sub	sp, #12
 800d536:	af00      	add	r7, sp, #0
 800d538:	6078      	str	r0, [r7, #4]
  UNUSED(htsc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TSC_ErrorCallback could be implemented in the user file.
   */
}
 800d53a:	bf00      	nop
 800d53c:	370c      	adds	r7, #12
 800d53e:	46bd      	mov	sp, r7
 800d540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d544:	4770      	bx	lr

0800d546 <TSC_extract_groups>:
  * @brief  Utility function used to set the acquired groups mask.
  * @param  iomask Channels IOs mask
  * @retval Acquired groups mask
  */
static uint32_t TSC_extract_groups(uint32_t iomask)
{
 800d546:	b480      	push	{r7}
 800d548:	b085      	sub	sp, #20
 800d54a:	af00      	add	r7, sp, #0
 800d54c:	6078      	str	r0, [r7, #4]
  uint32_t groups = 0UL;
 800d54e:	2300      	movs	r3, #0
 800d550:	60fb      	str	r3, [r7, #12]
  uint32_t idx;

  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 800d552:	2300      	movs	r3, #0
 800d554:	60bb      	str	r3, [r7, #8]
 800d556:	e011      	b.n	800d57c <TSC_extract_groups+0x36>
  {
    if ((iomask & (0x0FUL << (idx * 4UL))) != 0UL )
 800d558:	68bb      	ldr	r3, [r7, #8]
 800d55a:	009b      	lsls	r3, r3, #2
 800d55c:	220f      	movs	r2, #15
 800d55e:	409a      	lsls	r2, r3
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	4013      	ands	r3, r2
 800d564:	2b00      	cmp	r3, #0
 800d566:	d006      	beq.n	800d576 <TSC_extract_groups+0x30>
    {
      groups |= (1UL << idx);
 800d568:	2201      	movs	r2, #1
 800d56a:	68bb      	ldr	r3, [r7, #8]
 800d56c:	fa02 f303 	lsl.w	r3, r2, r3
 800d570:	68fa      	ldr	r2, [r7, #12]
 800d572:	4313      	orrs	r3, r2
 800d574:	60fb      	str	r3, [r7, #12]
  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 800d576:	68bb      	ldr	r3, [r7, #8]
 800d578:	3301      	adds	r3, #1
 800d57a:	60bb      	str	r3, [r7, #8]
 800d57c:	68bb      	ldr	r3, [r7, #8]
 800d57e:	2b06      	cmp	r3, #6
 800d580:	d9ea      	bls.n	800d558 <TSC_extract_groups+0x12>
    }
  }

  return groups;
 800d582:	68fb      	ldr	r3, [r7, #12]
}
 800d584:	4618      	mov	r0, r3
 800d586:	3714      	adds	r7, #20
 800d588:	46bd      	mov	sp, r7
 800d58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58e:	4770      	bx	lr

0800d590 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d590:	b480      	push	{r7}
 800d592:	b085      	sub	sp, #20
 800d594:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d596:	f3ef 8305 	mrs	r3, IPSR
 800d59a:	60bb      	str	r3, [r7, #8]
  return(result);
 800d59c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d10f      	bne.n	800d5c2 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d5a2:	f3ef 8310 	mrs	r3, PRIMASK
 800d5a6:	607b      	str	r3, [r7, #4]
  return(result);
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d109      	bne.n	800d5c2 <osKernelInitialize+0x32>
 800d5ae:	4b11      	ldr	r3, [pc, #68]	; (800d5f4 <osKernelInitialize+0x64>)
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	2b02      	cmp	r3, #2
 800d5b4:	d109      	bne.n	800d5ca <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d5b6:	f3ef 8311 	mrs	r3, BASEPRI
 800d5ba:	603b      	str	r3, [r7, #0]
  return(result);
 800d5bc:	683b      	ldr	r3, [r7, #0]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d003      	beq.n	800d5ca <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800d5c2:	f06f 0305 	mvn.w	r3, #5
 800d5c6:	60fb      	str	r3, [r7, #12]
 800d5c8:	e00c      	b.n	800d5e4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d5ca:	4b0a      	ldr	r3, [pc, #40]	; (800d5f4 <osKernelInitialize+0x64>)
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d105      	bne.n	800d5de <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800d5d2:	4b08      	ldr	r3, [pc, #32]	; (800d5f4 <osKernelInitialize+0x64>)
 800d5d4:	2201      	movs	r2, #1
 800d5d6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d5d8:	2300      	movs	r3, #0
 800d5da:	60fb      	str	r3, [r7, #12]
 800d5dc:	e002      	b.n	800d5e4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800d5de:	f04f 33ff 	mov.w	r3, #4294967295
 800d5e2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800d5e4:	68fb      	ldr	r3, [r7, #12]
}
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	3714      	adds	r7, #20
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f0:	4770      	bx	lr
 800d5f2:	bf00      	nop
 800d5f4:	20000af0 	.word	0x20000af0

0800d5f8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b084      	sub	sp, #16
 800d5fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d5fe:	f3ef 8305 	mrs	r3, IPSR
 800d602:	60bb      	str	r3, [r7, #8]
  return(result);
 800d604:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d606:	2b00      	cmp	r3, #0
 800d608:	d10f      	bne.n	800d62a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d60a:	f3ef 8310 	mrs	r3, PRIMASK
 800d60e:	607b      	str	r3, [r7, #4]
  return(result);
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d109      	bne.n	800d62a <osKernelStart+0x32>
 800d616:	4b11      	ldr	r3, [pc, #68]	; (800d65c <osKernelStart+0x64>)
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	2b02      	cmp	r3, #2
 800d61c:	d109      	bne.n	800d632 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d61e:	f3ef 8311 	mrs	r3, BASEPRI
 800d622:	603b      	str	r3, [r7, #0]
  return(result);
 800d624:	683b      	ldr	r3, [r7, #0]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d003      	beq.n	800d632 <osKernelStart+0x3a>
    stat = osErrorISR;
 800d62a:	f06f 0305 	mvn.w	r3, #5
 800d62e:	60fb      	str	r3, [r7, #12]
 800d630:	e00e      	b.n	800d650 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800d632:	4b0a      	ldr	r3, [pc, #40]	; (800d65c <osKernelStart+0x64>)
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	2b01      	cmp	r3, #1
 800d638:	d107      	bne.n	800d64a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800d63a:	4b08      	ldr	r3, [pc, #32]	; (800d65c <osKernelStart+0x64>)
 800d63c:	2202      	movs	r2, #2
 800d63e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800d640:	f002 fee8 	bl	8010414 <vTaskStartScheduler>
      stat = osOK;
 800d644:	2300      	movs	r3, #0
 800d646:	60fb      	str	r3, [r7, #12]
 800d648:	e002      	b.n	800d650 <osKernelStart+0x58>
    } else {
      stat = osError;
 800d64a:	f04f 33ff 	mov.w	r3, #4294967295
 800d64e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800d650:	68fb      	ldr	r3, [r7, #12]
}
 800d652:	4618      	mov	r0, r3
 800d654:	3710      	adds	r7, #16
 800d656:	46bd      	mov	sp, r7
 800d658:	bd80      	pop	{r7, pc}
 800d65a:	bf00      	nop
 800d65c:	20000af0 	.word	0x20000af0

0800d660 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d660:	b580      	push	{r7, lr}
 800d662:	b092      	sub	sp, #72	; 0x48
 800d664:	af04      	add	r7, sp, #16
 800d666:	60f8      	str	r0, [r7, #12]
 800d668:	60b9      	str	r1, [r7, #8]
 800d66a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d66c:	2300      	movs	r3, #0
 800d66e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d670:	f3ef 8305 	mrs	r3, IPSR
 800d674:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800d676:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800d678:	2b00      	cmp	r3, #0
 800d67a:	f040 8095 	bne.w	800d7a8 <osThreadNew+0x148>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d67e:	f3ef 8310 	mrs	r3, PRIMASK
 800d682:	623b      	str	r3, [r7, #32]
  return(result);
 800d684:	6a3b      	ldr	r3, [r7, #32]
 800d686:	2b00      	cmp	r3, #0
 800d688:	f040 808e 	bne.w	800d7a8 <osThreadNew+0x148>
 800d68c:	4b49      	ldr	r3, [pc, #292]	; (800d7b4 <osThreadNew+0x154>)
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	2b02      	cmp	r3, #2
 800d692:	d106      	bne.n	800d6a2 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d694:	f3ef 8311 	mrs	r3, BASEPRI
 800d698:	61fb      	str	r3, [r7, #28]
  return(result);
 800d69a:	69fb      	ldr	r3, [r7, #28]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	f040 8083 	bne.w	800d7a8 <osThreadNew+0x148>
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d07f      	beq.n	800d7a8 <osThreadNew+0x148>
    stack = configMINIMAL_STACK_SIZE;
 800d6a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d6ac:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800d6ae:	2318      	movs	r3, #24
 800d6b0:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800d6b6:	f107 031b 	add.w	r3, r7, #27
 800d6ba:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800d6bc:	f04f 33ff 	mov.w	r3, #4294967295
 800d6c0:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d045      	beq.n	800d754 <osThreadNew+0xf4>
      if (attr->name != NULL) {
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d002      	beq.n	800d6d6 <osThreadNew+0x76>
        name = attr->name;
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	699b      	ldr	r3, [r3, #24]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d002      	beq.n	800d6e4 <osThreadNew+0x84>
        prio = (UBaseType_t)attr->priority;
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	699b      	ldr	r3, [r3, #24]
 800d6e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d6e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d008      	beq.n	800d6fc <osThreadNew+0x9c>
 800d6ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6ec:	2b38      	cmp	r3, #56	; 0x38
 800d6ee:	d805      	bhi.n	800d6fc <osThreadNew+0x9c>
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	685b      	ldr	r3, [r3, #4]
 800d6f4:	f003 0301 	and.w	r3, r3, #1
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d001      	beq.n	800d700 <osThreadNew+0xa0>
        return (NULL);
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	e054      	b.n	800d7aa <osThreadNew+0x14a>
      }

      if (attr->stack_size > 0U) {
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	695b      	ldr	r3, [r3, #20]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d003      	beq.n	800d710 <osThreadNew+0xb0>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	695b      	ldr	r3, [r3, #20]
 800d70c:	089b      	lsrs	r3, r3, #2
 800d70e:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	689b      	ldr	r3, [r3, #8]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d00e      	beq.n	800d736 <osThreadNew+0xd6>
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	68db      	ldr	r3, [r3, #12]
 800d71c:	2b63      	cmp	r3, #99	; 0x63
 800d71e:	d90a      	bls.n	800d736 <osThreadNew+0xd6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d724:	2b00      	cmp	r3, #0
 800d726:	d006      	beq.n	800d736 <osThreadNew+0xd6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	695b      	ldr	r3, [r3, #20]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d002      	beq.n	800d736 <osThreadNew+0xd6>
        mem = 1;
 800d730:	2301      	movs	r3, #1
 800d732:	62bb      	str	r3, [r7, #40]	; 0x28
 800d734:	e010      	b.n	800d758 <osThreadNew+0xf8>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	689b      	ldr	r3, [r3, #8]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d10c      	bne.n	800d758 <osThreadNew+0xf8>
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	68db      	ldr	r3, [r3, #12]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d108      	bne.n	800d758 <osThreadNew+0xf8>
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	691b      	ldr	r3, [r3, #16]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d104      	bne.n	800d758 <osThreadNew+0xf8>
          mem = 0;
 800d74e:	2300      	movs	r3, #0
 800d750:	62bb      	str	r3, [r7, #40]	; 0x28
 800d752:	e001      	b.n	800d758 <osThreadNew+0xf8>
        }
      }
    }
    else {
      mem = 0;
 800d754:	2300      	movs	r3, #0
 800d756:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800d758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d75a:	2b01      	cmp	r3, #1
 800d75c:	d110      	bne.n	800d780 <osThreadNew+0x120>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800d762:	687a      	ldr	r2, [r7, #4]
 800d764:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d766:	9202      	str	r2, [sp, #8]
 800d768:	9301      	str	r3, [sp, #4]
 800d76a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d76c:	9300      	str	r3, [sp, #0]
 800d76e:	68bb      	ldr	r3, [r7, #8]
 800d770:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d772:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d774:	68f8      	ldr	r0, [r7, #12]
 800d776:	f002 fc7f 	bl	8010078 <xTaskCreateStatic>
 800d77a:	4603      	mov	r3, r0
 800d77c:	617b      	str	r3, [r7, #20]
 800d77e:	e013      	b.n	800d7a8 <osThreadNew+0x148>
    }
    else {
      if (mem == 0) {
 800d780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d782:	2b00      	cmp	r3, #0
 800d784:	d110      	bne.n	800d7a8 <osThreadNew+0x148>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d788:	b29a      	uxth	r2, r3
 800d78a:	f107 0314 	add.w	r3, r7, #20
 800d78e:	9301      	str	r3, [sp, #4]
 800d790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d792:	9300      	str	r3, [sp, #0]
 800d794:	68bb      	ldr	r3, [r7, #8]
 800d796:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d798:	68f8      	ldr	r0, [r7, #12]
 800d79a:	f002 fcc6 	bl	801012a <xTaskCreate>
 800d79e:	4603      	mov	r3, r0
 800d7a0:	2b01      	cmp	r3, #1
 800d7a2:	d001      	beq.n	800d7a8 <osThreadNew+0x148>
          hTask = NULL;
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d7a8:	697b      	ldr	r3, [r7, #20]
}
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	3738      	adds	r7, #56	; 0x38
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	bd80      	pop	{r7, pc}
 800d7b2:	bf00      	nop
 800d7b4:	20000af0 	.word	0x20000af0

0800d7b8 <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b08a      	sub	sp, #40	; 0x28
 800d7bc:	af02      	add	r7, sp, #8
 800d7be:	6078      	str	r0, [r7, #4]
 800d7c0:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800d7c6:	69fb      	ldr	r3, [r7, #28]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d002      	beq.n	800d7d2 <osThreadFlagsSet+0x1a>
 800d7cc:	683b      	ldr	r3, [r7, #0]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	da03      	bge.n	800d7da <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800d7d2:	f06f 0303 	mvn.w	r3, #3
 800d7d6:	60fb      	str	r3, [r7, #12]
 800d7d8:	e046      	b.n	800d868 <osThreadFlagsSet+0xb0>
  }
  else {
    rflags = (uint32_t)osError;
 800d7da:	f04f 33ff 	mov.w	r3, #4294967295
 800d7de:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d7e0:	f3ef 8305 	mrs	r3, IPSR
 800d7e4:	61bb      	str	r3, [r7, #24]
  return(result);
 800d7e6:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d10f      	bne.n	800d80c <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d7ec:	f3ef 8310 	mrs	r3, PRIMASK
 800d7f0:	617b      	str	r3, [r7, #20]
  return(result);
 800d7f2:	697b      	ldr	r3, [r7, #20]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d109      	bne.n	800d80c <osThreadFlagsSet+0x54>
 800d7f8:	4b1e      	ldr	r3, [pc, #120]	; (800d874 <osThreadFlagsSet+0xbc>)
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	2b02      	cmp	r3, #2
 800d7fe:	d126      	bne.n	800d84e <osThreadFlagsSet+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d800:	f3ef 8311 	mrs	r3, BASEPRI
 800d804:	613b      	str	r3, [r7, #16]
  return(result);
 800d806:	693b      	ldr	r3, [r7, #16]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d020      	beq.n	800d84e <osThreadFlagsSet+0x96>
      yield = pdFALSE;
 800d80c:	2300      	movs	r3, #0
 800d80e:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800d810:	f107 0308 	add.w	r3, r7, #8
 800d814:	9300      	str	r3, [sp, #0]
 800d816:	2300      	movs	r3, #0
 800d818:	2201      	movs	r2, #1
 800d81a:	6839      	ldr	r1, [r7, #0]
 800d81c:	69f8      	ldr	r0, [r7, #28]
 800d81e:	f003 fdc3 	bl	80113a8 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800d822:	f107 020c 	add.w	r2, r7, #12
 800d826:	2300      	movs	r3, #0
 800d828:	9300      	str	r3, [sp, #0]
 800d82a:	4613      	mov	r3, r2
 800d82c:	2200      	movs	r2, #0
 800d82e:	2100      	movs	r1, #0
 800d830:	69f8      	ldr	r0, [r7, #28]
 800d832:	f003 fdb9 	bl	80113a8 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800d836:	68bb      	ldr	r3, [r7, #8]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d015      	beq.n	800d868 <osThreadFlagsSet+0xb0>
 800d83c:	4b0e      	ldr	r3, [pc, #56]	; (800d878 <osThreadFlagsSet+0xc0>)
 800d83e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d842:	601a      	str	r2, [r3, #0]
 800d844:	f3bf 8f4f 	dsb	sy
 800d848:	f3bf 8f6f 	isb	sy
 800d84c:	e00c      	b.n	800d868 <osThreadFlagsSet+0xb0>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800d84e:	2300      	movs	r3, #0
 800d850:	2201      	movs	r2, #1
 800d852:	6839      	ldr	r1, [r7, #0]
 800d854:	69f8      	ldr	r0, [r7, #28]
 800d856:	f003 fd03 	bl	8011260 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800d85a:	f107 030c 	add.w	r3, r7, #12
 800d85e:	2200      	movs	r2, #0
 800d860:	2100      	movs	r1, #0
 800d862:	69f8      	ldr	r0, [r7, #28]
 800d864:	f003 fcfc 	bl	8011260 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800d868:	68fb      	ldr	r3, [r7, #12]
}
 800d86a:	4618      	mov	r0, r3
 800d86c:	3720      	adds	r7, #32
 800d86e:	46bd      	mov	sp, r7
 800d870:	bd80      	pop	{r7, pc}
 800d872:	bf00      	nop
 800d874:	20000af0 	.word	0x20000af0
 800d878:	e000ed04 	.word	0xe000ed04

0800d87c <osThreadFlagsClear>:

uint32_t osThreadFlagsClear (uint32_t flags) {
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b088      	sub	sp, #32
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d884:	f3ef 8305 	mrs	r3, IPSR
 800d888:	617b      	str	r3, [r7, #20]
  return(result);
 800d88a:	697b      	ldr	r3, [r7, #20]
  TaskHandle_t hTask;
  uint32_t rflags, cflags;

  if (IS_IRQ()) {
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d10f      	bne.n	800d8b0 <osThreadFlagsClear+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d890:	f3ef 8310 	mrs	r3, PRIMASK
 800d894:	613b      	str	r3, [r7, #16]
  return(result);
 800d896:	693b      	ldr	r3, [r7, #16]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d109      	bne.n	800d8b0 <osThreadFlagsClear+0x34>
 800d89c:	4b1e      	ldr	r3, [pc, #120]	; (800d918 <osThreadFlagsClear+0x9c>)
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	2b02      	cmp	r3, #2
 800d8a2:	d109      	bne.n	800d8b8 <osThreadFlagsClear+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d8a4:	f3ef 8311 	mrs	r3, BASEPRI
 800d8a8:	60fb      	str	r3, [r7, #12]
  return(result);
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d003      	beq.n	800d8b8 <osThreadFlagsClear+0x3c>
    rflags = (uint32_t)osErrorISR;
 800d8b0:	f06f 0305 	mvn.w	r3, #5
 800d8b4:	61fb      	str	r3, [r7, #28]
 800d8b6:	e02a      	b.n	800d90e <osThreadFlagsClear+0x92>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	da03      	bge.n	800d8c6 <osThreadFlagsClear+0x4a>
    rflags = (uint32_t)osErrorParameter;
 800d8be:	f06f 0303 	mvn.w	r3, #3
 800d8c2:	61fb      	str	r3, [r7, #28]
 800d8c4:	e023      	b.n	800d90e <osThreadFlagsClear+0x92>
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 800d8c6:	f003 fad1 	bl	8010e6c <xTaskGetCurrentTaskHandle>
 800d8ca:	61b8      	str	r0, [r7, #24]

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &cflags) == pdPASS) {
 800d8cc:	f107 0308 	add.w	r3, r7, #8
 800d8d0:	2200      	movs	r2, #0
 800d8d2:	2100      	movs	r1, #0
 800d8d4:	69b8      	ldr	r0, [r7, #24]
 800d8d6:	f003 fcc3 	bl	8011260 <xTaskGenericNotify>
 800d8da:	4603      	mov	r3, r0
 800d8dc:	2b01      	cmp	r3, #1
 800d8de:	d113      	bne.n	800d908 <osThreadFlagsClear+0x8c>
      rflags = cflags;
 800d8e0:	68bb      	ldr	r3, [r7, #8]
 800d8e2:	61fb      	str	r3, [r7, #28]
      cflags &= ~flags;
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	43da      	mvns	r2, r3
 800d8e8:	68bb      	ldr	r3, [r7, #8]
 800d8ea:	4013      	ands	r3, r2
 800d8ec:	60bb      	str	r3, [r7, #8]

      if (xTaskNotify (hTask, cflags, eSetValueWithOverwrite) != pdPASS) {
 800d8ee:	68b9      	ldr	r1, [r7, #8]
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	2203      	movs	r2, #3
 800d8f4:	69b8      	ldr	r0, [r7, #24]
 800d8f6:	f003 fcb3 	bl	8011260 <xTaskGenericNotify>
 800d8fa:	4603      	mov	r3, r0
 800d8fc:	2b01      	cmp	r3, #1
 800d8fe:	d006      	beq.n	800d90e <osThreadFlagsClear+0x92>
        rflags = (uint32_t)osError;
 800d900:	f04f 33ff 	mov.w	r3, #4294967295
 800d904:	61fb      	str	r3, [r7, #28]
 800d906:	e002      	b.n	800d90e <osThreadFlagsClear+0x92>
      }
    }
    else {
      rflags = (uint32_t)osError;
 800d908:	f04f 33ff 	mov.w	r3, #4294967295
 800d90c:	61fb      	str	r3, [r7, #28]
    }
  }

  /* Return flags before clearing */
  return (rflags);
 800d90e:	69fb      	ldr	r3, [r7, #28]
}
 800d910:	4618      	mov	r0, r3
 800d912:	3720      	adds	r7, #32
 800d914:	46bd      	mov	sp, r7
 800d916:	bd80      	pop	{r7, pc}
 800d918:	20000af0 	.word	0x20000af0

0800d91c <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800d91c:	b580      	push	{r7, lr}
 800d91e:	b08e      	sub	sp, #56	; 0x38
 800d920:	af00      	add	r7, sp, #0
 800d922:	60f8      	str	r0, [r7, #12]
 800d924:	60b9      	str	r1, [r7, #8]
 800d926:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d928:	f3ef 8305 	mrs	r3, IPSR
 800d92c:	61fb      	str	r3, [r7, #28]
  return(result);
 800d92e:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800d930:	2b00      	cmp	r3, #0
 800d932:	d10f      	bne.n	800d954 <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d934:	f3ef 8310 	mrs	r3, PRIMASK
 800d938:	61bb      	str	r3, [r7, #24]
  return(result);
 800d93a:	69bb      	ldr	r3, [r7, #24]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d109      	bne.n	800d954 <osThreadFlagsWait+0x38>
 800d940:	4b3f      	ldr	r3, [pc, #252]	; (800da40 <osThreadFlagsWait+0x124>)
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	2b02      	cmp	r3, #2
 800d946:	d109      	bne.n	800d95c <osThreadFlagsWait+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d948:	f3ef 8311 	mrs	r3, BASEPRI
 800d94c:	617b      	str	r3, [r7, #20]
  return(result);
 800d94e:	697b      	ldr	r3, [r7, #20]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d003      	beq.n	800d95c <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 800d954:	f06f 0305 	mvn.w	r3, #5
 800d958:	637b      	str	r3, [r7, #52]	; 0x34
 800d95a:	e06b      	b.n	800da34 <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	da03      	bge.n	800d96a <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 800d962:	f06f 0303 	mvn.w	r3, #3
 800d966:	637b      	str	r3, [r7, #52]	; 0x34
 800d968:	e064      	b.n	800da34 <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800d96a:	68bb      	ldr	r3, [r7, #8]
 800d96c:	f003 0302 	and.w	r3, r3, #2
 800d970:	2b00      	cmp	r3, #0
 800d972:	d002      	beq.n	800d97a <osThreadFlagsWait+0x5e>
      clear = 0U;
 800d974:	2300      	movs	r3, #0
 800d976:	633b      	str	r3, [r7, #48]	; 0x30
 800d978:	e001      	b.n	800d97e <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 800d97e:	2300      	movs	r3, #0
 800d980:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 800d986:	f002 fe8d 	bl	80106a4 <xTaskGetTickCount>
 800d98a:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800d98c:	f107 0210 	add.w	r2, r7, #16
 800d990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d992:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d994:	2000      	movs	r0, #0
 800d996:	f003 fc09 	bl	80111ac <xTaskNotifyWait>
 800d99a:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 800d99c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d99e:	2b01      	cmp	r3, #1
 800d9a0:	d137      	bne.n	800da12 <osThreadFlagsWait+0xf6>
        rflags &= flags;
 800d9a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	4013      	ands	r3, r2
 800d9a8:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 800d9aa:	693b      	ldr	r3, [r7, #16]
 800d9ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d9ae:	4313      	orrs	r3, r2
 800d9b0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800d9b2:	68bb      	ldr	r3, [r7, #8]
 800d9b4:	f003 0301 	and.w	r3, r3, #1
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d00c      	beq.n	800d9d6 <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 800d9bc:	68fa      	ldr	r2, [r7, #12]
 800d9be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9c0:	4013      	ands	r3, r2
 800d9c2:	68fa      	ldr	r2, [r7, #12]
 800d9c4:	429a      	cmp	r2, r3
 800d9c6:	d032      	beq.n	800da2e <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d10f      	bne.n	800d9ee <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800d9ce:	f06f 0302 	mvn.w	r3, #2
 800d9d2:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800d9d4:	e02e      	b.n	800da34 <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800d9d6:	68fa      	ldr	r2, [r7, #12]
 800d9d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9da:	4013      	ands	r3, r2
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d128      	bne.n	800da32 <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d103      	bne.n	800d9ee <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800d9e6:	f06f 0302 	mvn.w	r3, #2
 800d9ea:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800d9ec:	e022      	b.n	800da34 <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800d9ee:	f002 fe59 	bl	80106a4 <xTaskGetTickCount>
 800d9f2:	4602      	mov	r2, r0
 800d9f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9f6:	1ad3      	subs	r3, r2, r3
 800d9f8:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 800d9fa:	6a3a      	ldr	r2, [r7, #32]
 800d9fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9fe:	429a      	cmp	r2, r3
 800da00:	d902      	bls.n	800da08 <osThreadFlagsWait+0xec>
          tout  = 0;
 800da02:	2300      	movs	r3, #0
 800da04:	62fb      	str	r3, [r7, #44]	; 0x2c
 800da06:	e00e      	b.n	800da26 <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 800da08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800da0a:	6a3b      	ldr	r3, [r7, #32]
 800da0c:	1ad3      	subs	r3, r2, r3
 800da0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800da10:	e009      	b.n	800da26 <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d103      	bne.n	800da20 <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 800da18:	f06f 0302 	mvn.w	r3, #2
 800da1c:	637b      	str	r3, [r7, #52]	; 0x34
 800da1e:	e002      	b.n	800da26 <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800da20:	f06f 0301 	mvn.w	r3, #1
 800da24:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 800da26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d1af      	bne.n	800d98c <osThreadFlagsWait+0x70>
 800da2c:	e002      	b.n	800da34 <osThreadFlagsWait+0x118>
            break;
 800da2e:	bf00      	nop
 800da30:	e000      	b.n	800da34 <osThreadFlagsWait+0x118>
            break;
 800da32:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800da34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800da36:	4618      	mov	r0, r3
 800da38:	3738      	adds	r7, #56	; 0x38
 800da3a:	46bd      	mov	sp, r7
 800da3c:	bd80      	pop	{r7, pc}
 800da3e:	bf00      	nop
 800da40:	20000af0 	.word	0x20000af0

0800da44 <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 800da44:	b580      	push	{r7, lr}
 800da46:	b086      	sub	sp, #24
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800da4c:	f3ef 8305 	mrs	r3, IPSR
 800da50:	613b      	str	r3, [r7, #16]
  return(result);
 800da52:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800da54:	2b00      	cmp	r3, #0
 800da56:	d10f      	bne.n	800da78 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800da58:	f3ef 8310 	mrs	r3, PRIMASK
 800da5c:	60fb      	str	r3, [r7, #12]
  return(result);
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d109      	bne.n	800da78 <osDelay+0x34>
 800da64:	4b0d      	ldr	r3, [pc, #52]	; (800da9c <osDelay+0x58>)
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	2b02      	cmp	r3, #2
 800da6a:	d109      	bne.n	800da80 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800da6c:	f3ef 8311 	mrs	r3, BASEPRI
 800da70:	60bb      	str	r3, [r7, #8]
  return(result);
 800da72:	68bb      	ldr	r3, [r7, #8]
 800da74:	2b00      	cmp	r3, #0
 800da76:	d003      	beq.n	800da80 <osDelay+0x3c>
    stat = osErrorISR;
 800da78:	f06f 0305 	mvn.w	r3, #5
 800da7c:	617b      	str	r3, [r7, #20]
 800da7e:	e007      	b.n	800da90 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800da80:	2300      	movs	r3, #0
 800da82:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d002      	beq.n	800da90 <osDelay+0x4c>
      vTaskDelay(ticks);
 800da8a:	6878      	ldr	r0, [r7, #4]
 800da8c:	f002 fc8e 	bl	80103ac <vTaskDelay>
    }
  }

  return (stat);
 800da90:	697b      	ldr	r3, [r7, #20]
}
 800da92:	4618      	mov	r0, r3
 800da94:	3718      	adds	r7, #24
 800da96:	46bd      	mov	sp, r7
 800da98:	bd80      	pop	{r7, pc}
 800da9a:	bf00      	nop
 800da9c:	20000af0 	.word	0x20000af0

0800daa0 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 800daa0:	b580      	push	{r7, lr}
 800daa2:	b084      	sub	sp, #16
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800daa8:	6878      	ldr	r0, [r7, #4]
 800daaa:	f004 f955 	bl	8011d58 <pvTimerGetTimerID>
 800daae:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d005      	beq.n	800dac2 <TimerCallback+0x22>
    callb->func (callb->arg);
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	68fa      	ldr	r2, [r7, #12]
 800dabc:	6852      	ldr	r2, [r2, #4]
 800dabe:	4610      	mov	r0, r2
 800dac0:	4798      	blx	r3
  }
}
 800dac2:	bf00      	nop
 800dac4:	3710      	adds	r7, #16
 800dac6:	46bd      	mov	sp, r7
 800dac8:	bd80      	pop	{r7, pc}
	...

0800dacc <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800dacc:	b580      	push	{r7, lr}
 800dace:	b08e      	sub	sp, #56	; 0x38
 800dad0:	af02      	add	r7, sp, #8
 800dad2:	60f8      	str	r0, [r7, #12]
 800dad4:	607a      	str	r2, [r7, #4]
 800dad6:	603b      	str	r3, [r7, #0]
 800dad8:	460b      	mov	r3, r1
 800dada:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800dadc:	2300      	movs	r3, #0
 800dade:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dae0:	f3ef 8305 	mrs	r3, IPSR
 800dae4:	61bb      	str	r3, [r7, #24]
  return(result);
 800dae6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d16a      	bne.n	800dbc2 <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800daec:	f3ef 8310 	mrs	r3, PRIMASK
 800daf0:	617b      	str	r3, [r7, #20]
  return(result);
 800daf2:	697b      	ldr	r3, [r7, #20]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d164      	bne.n	800dbc2 <osTimerNew+0xf6>
 800daf8:	4b34      	ldr	r3, [pc, #208]	; (800dbcc <osTimerNew+0x100>)
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	2b02      	cmp	r3, #2
 800dafe:	d105      	bne.n	800db0c <osTimerNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800db00:	f3ef 8311 	mrs	r3, BASEPRI
 800db04:	613b      	str	r3, [r7, #16]
  return(result);
 800db06:	693b      	ldr	r3, [r7, #16]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d15a      	bne.n	800dbc2 <osTimerNew+0xf6>
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d057      	beq.n	800dbc2 <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800db12:	2008      	movs	r0, #8
 800db14:	f000 fd60 	bl	800e5d8 <pvPortMalloc>
 800db18:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 800db1a:	69fb      	ldr	r3, [r7, #28]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d050      	beq.n	800dbc2 <osTimerNew+0xf6>
      callb->func = func;
 800db20:	69fb      	ldr	r3, [r7, #28]
 800db22:	68fa      	ldr	r2, [r7, #12]
 800db24:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800db26:	69fb      	ldr	r3, [r7, #28]
 800db28:	687a      	ldr	r2, [r7, #4]
 800db2a:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800db2c:	7afb      	ldrb	r3, [r7, #11]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d102      	bne.n	800db38 <osTimerNew+0x6c>
        reload = pdFALSE;
 800db32:	2300      	movs	r3, #0
 800db34:	627b      	str	r3, [r7, #36]	; 0x24
 800db36:	e001      	b.n	800db3c <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 800db38:	2301      	movs	r3, #1
 800db3a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 800db3c:	f04f 33ff 	mov.w	r3, #4294967295
 800db40:	623b      	str	r3, [r7, #32]
      name = NULL;
 800db42:	2300      	movs	r3, #0
 800db44:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 800db46:	683b      	ldr	r3, [r7, #0]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d01c      	beq.n	800db86 <osTimerNew+0xba>
        if (attr->name != NULL) {
 800db4c:	683b      	ldr	r3, [r7, #0]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	2b00      	cmp	r3, #0
 800db52:	d002      	beq.n	800db5a <osTimerNew+0x8e>
          name = attr->name;
 800db54:	683b      	ldr	r3, [r7, #0]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800db5a:	683b      	ldr	r3, [r7, #0]
 800db5c:	689b      	ldr	r3, [r3, #8]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d006      	beq.n	800db70 <osTimerNew+0xa4>
 800db62:	683b      	ldr	r3, [r7, #0]
 800db64:	68db      	ldr	r3, [r3, #12]
 800db66:	2b2f      	cmp	r3, #47	; 0x2f
 800db68:	d902      	bls.n	800db70 <osTimerNew+0xa4>
          mem = 1;
 800db6a:	2301      	movs	r3, #1
 800db6c:	623b      	str	r3, [r7, #32]
 800db6e:	e00c      	b.n	800db8a <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800db70:	683b      	ldr	r3, [r7, #0]
 800db72:	689b      	ldr	r3, [r3, #8]
 800db74:	2b00      	cmp	r3, #0
 800db76:	d108      	bne.n	800db8a <osTimerNew+0xbe>
 800db78:	683b      	ldr	r3, [r7, #0]
 800db7a:	68db      	ldr	r3, [r3, #12]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d104      	bne.n	800db8a <osTimerNew+0xbe>
            mem = 0;
 800db80:	2300      	movs	r3, #0
 800db82:	623b      	str	r3, [r7, #32]
 800db84:	e001      	b.n	800db8a <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 800db86:	2300      	movs	r3, #0
 800db88:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 800db8a:	6a3b      	ldr	r3, [r7, #32]
 800db8c:	2b01      	cmp	r3, #1
 800db8e:	d10c      	bne.n	800dbaa <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800db90:	683b      	ldr	r3, [r7, #0]
 800db92:	689b      	ldr	r3, [r3, #8]
 800db94:	9301      	str	r3, [sp, #4]
 800db96:	4b0e      	ldr	r3, [pc, #56]	; (800dbd0 <osTimerNew+0x104>)
 800db98:	9300      	str	r3, [sp, #0]
 800db9a:	69fb      	ldr	r3, [r7, #28]
 800db9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db9e:	2101      	movs	r1, #1
 800dba0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dba2:	f003 fd86 	bl	80116b2 <xTimerCreateStatic>
 800dba6:	62b8      	str	r0, [r7, #40]	; 0x28
 800dba8:	e00b      	b.n	800dbc2 <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 800dbaa:	6a3b      	ldr	r3, [r7, #32]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d108      	bne.n	800dbc2 <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800dbb0:	4b07      	ldr	r3, [pc, #28]	; (800dbd0 <osTimerNew+0x104>)
 800dbb2:	9300      	str	r3, [sp, #0]
 800dbb4:	69fb      	ldr	r3, [r7, #28]
 800dbb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dbb8:	2101      	movs	r1, #1
 800dbba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dbbc:	f003 fd58 	bl	8011670 <xTimerCreate>
 800dbc0:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800dbc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	3730      	adds	r7, #48	; 0x30
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	bd80      	pop	{r7, pc}
 800dbcc:	20000af0 	.word	0x20000af0
 800dbd0:	0800daa1 	.word	0x0800daa1

0800dbd4 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800dbd4:	b580      	push	{r7, lr}
 800dbd6:	b08a      	sub	sp, #40	; 0x28
 800dbd8:	af02      	add	r7, sp, #8
 800dbda:	6078      	str	r0, [r7, #4]
 800dbdc:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dbe2:	f3ef 8305 	mrs	r3, IPSR
 800dbe6:	617b      	str	r3, [r7, #20]
  return(result);
 800dbe8:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d10f      	bne.n	800dc0e <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dbee:	f3ef 8310 	mrs	r3, PRIMASK
 800dbf2:	613b      	str	r3, [r7, #16]
  return(result);
 800dbf4:	693b      	ldr	r3, [r7, #16]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d109      	bne.n	800dc0e <osTimerStart+0x3a>
 800dbfa:	4b15      	ldr	r3, [pc, #84]	; (800dc50 <osTimerStart+0x7c>)
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	2b02      	cmp	r3, #2
 800dc00:	d109      	bne.n	800dc16 <osTimerStart+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dc02:	f3ef 8311 	mrs	r3, BASEPRI
 800dc06:	60fb      	str	r3, [r7, #12]
  return(result);
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d003      	beq.n	800dc16 <osTimerStart+0x42>
    stat = osErrorISR;
 800dc0e:	f06f 0305 	mvn.w	r3, #5
 800dc12:	61fb      	str	r3, [r7, #28]
 800dc14:	e017      	b.n	800dc46 <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 800dc16:	69bb      	ldr	r3, [r7, #24]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d103      	bne.n	800dc24 <osTimerStart+0x50>
    stat = osErrorParameter;
 800dc1c:	f06f 0303 	mvn.w	r3, #3
 800dc20:	61fb      	str	r3, [r7, #28]
 800dc22:	e010      	b.n	800dc46 <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800dc24:	2300      	movs	r3, #0
 800dc26:	9300      	str	r3, [sp, #0]
 800dc28:	2300      	movs	r3, #0
 800dc2a:	683a      	ldr	r2, [r7, #0]
 800dc2c:	2104      	movs	r1, #4
 800dc2e:	69b8      	ldr	r0, [r7, #24]
 800dc30:	f003 fdac 	bl	801178c <xTimerGenericCommand>
 800dc34:	4603      	mov	r3, r0
 800dc36:	2b01      	cmp	r3, #1
 800dc38:	d102      	bne.n	800dc40 <osTimerStart+0x6c>
      stat = osOK;
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	61fb      	str	r3, [r7, #28]
 800dc3e:	e002      	b.n	800dc46 <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 800dc40:	f06f 0302 	mvn.w	r3, #2
 800dc44:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 800dc46:	69fb      	ldr	r3, [r7, #28]
}
 800dc48:	4618      	mov	r0, r3
 800dc4a:	3720      	adds	r7, #32
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	bd80      	pop	{r7, pc}
 800dc50:	20000af0 	.word	0x20000af0

0800dc54 <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b08a      	sub	sp, #40	; 0x28
 800dc58:	af02      	add	r7, sp, #8
 800dc5a:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc60:	f3ef 8305 	mrs	r3, IPSR
 800dc64:	617b      	str	r3, [r7, #20]
  return(result);
 800dc66:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d10f      	bne.n	800dc8c <osTimerStop+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dc6c:	f3ef 8310 	mrs	r3, PRIMASK
 800dc70:	613b      	str	r3, [r7, #16]
  return(result);
 800dc72:	693b      	ldr	r3, [r7, #16]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d109      	bne.n	800dc8c <osTimerStop+0x38>
 800dc78:	4b1a      	ldr	r3, [pc, #104]	; (800dce4 <osTimerStop+0x90>)
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	2b02      	cmp	r3, #2
 800dc7e:	d109      	bne.n	800dc94 <osTimerStop+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dc80:	f3ef 8311 	mrs	r3, BASEPRI
 800dc84:	60fb      	str	r3, [r7, #12]
  return(result);
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d003      	beq.n	800dc94 <osTimerStop+0x40>
    stat = osErrorISR;
 800dc8c:	f06f 0305 	mvn.w	r3, #5
 800dc90:	61fb      	str	r3, [r7, #28]
 800dc92:	e021      	b.n	800dcd8 <osTimerStop+0x84>
  }
  else if (hTimer == NULL) {
 800dc94:	69bb      	ldr	r3, [r7, #24]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d103      	bne.n	800dca2 <osTimerStop+0x4e>
    stat = osErrorParameter;
 800dc9a:	f06f 0303 	mvn.w	r3, #3
 800dc9e:	61fb      	str	r3, [r7, #28]
 800dca0:	e01a      	b.n	800dcd8 <osTimerStop+0x84>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 800dca2:	69b8      	ldr	r0, [r7, #24]
 800dca4:	f004 f834 	bl	8011d10 <xTimerIsTimerActive>
 800dca8:	4603      	mov	r3, r0
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d103      	bne.n	800dcb6 <osTimerStop+0x62>
      stat = osErrorResource;
 800dcae:	f06f 0302 	mvn.w	r3, #2
 800dcb2:	61fb      	str	r3, [r7, #28]
 800dcb4:	e010      	b.n	800dcd8 <osTimerStop+0x84>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	9300      	str	r3, [sp, #0]
 800dcba:	2300      	movs	r3, #0
 800dcbc:	2200      	movs	r2, #0
 800dcbe:	2103      	movs	r1, #3
 800dcc0:	69b8      	ldr	r0, [r7, #24]
 800dcc2:	f003 fd63 	bl	801178c <xTimerGenericCommand>
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	2b01      	cmp	r3, #1
 800dcca:	d102      	bne.n	800dcd2 <osTimerStop+0x7e>
        stat = osOK;
 800dccc:	2300      	movs	r3, #0
 800dcce:	61fb      	str	r3, [r7, #28]
 800dcd0:	e002      	b.n	800dcd8 <osTimerStop+0x84>
      } else {
        stat = osError;
 800dcd2:	f04f 33ff 	mov.w	r3, #4294967295
 800dcd6:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800dcd8:	69fb      	ldr	r3, [r7, #28]
}
 800dcda:	4618      	mov	r0, r3
 800dcdc:	3720      	adds	r7, #32
 800dcde:	46bd      	mov	sp, r7
 800dce0:	bd80      	pop	{r7, pc}
 800dce2:	bf00      	nop
 800dce4:	20000af0 	.word	0x20000af0

0800dce8 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b08a      	sub	sp, #40	; 0x28
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dcf4:	f3ef 8305 	mrs	r3, IPSR
 800dcf8:	613b      	str	r3, [r7, #16]
  return(result);
 800dcfa:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	f040 8085 	bne.w	800de0c <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dd02:	f3ef 8310 	mrs	r3, PRIMASK
 800dd06:	60fb      	str	r3, [r7, #12]
  return(result);
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d17e      	bne.n	800de0c <osMutexNew+0x124>
 800dd0e:	4b42      	ldr	r3, [pc, #264]	; (800de18 <osMutexNew+0x130>)
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	2b02      	cmp	r3, #2
 800dd14:	d105      	bne.n	800dd22 <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dd16:	f3ef 8311 	mrs	r3, BASEPRI
 800dd1a:	60bb      	str	r3, [r7, #8]
  return(result);
 800dd1c:	68bb      	ldr	r3, [r7, #8]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d174      	bne.n	800de0c <osMutexNew+0x124>
    if (attr != NULL) {
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d003      	beq.n	800dd30 <osMutexNew+0x48>
      type = attr->attr_bits;
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	685b      	ldr	r3, [r3, #4]
 800dd2c:	623b      	str	r3, [r7, #32]
 800dd2e:	e001      	b.n	800dd34 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800dd30:	2300      	movs	r3, #0
 800dd32:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800dd34:	6a3b      	ldr	r3, [r7, #32]
 800dd36:	f003 0301 	and.w	r3, r3, #1
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d002      	beq.n	800dd44 <osMutexNew+0x5c>
      rmtx = 1U;
 800dd3e:	2301      	movs	r3, #1
 800dd40:	61fb      	str	r3, [r7, #28]
 800dd42:	e001      	b.n	800dd48 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800dd44:	2300      	movs	r3, #0
 800dd46:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800dd48:	6a3b      	ldr	r3, [r7, #32]
 800dd4a:	f003 0308 	and.w	r3, r3, #8
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d15c      	bne.n	800de0c <osMutexNew+0x124>
      mem = -1;
 800dd52:	f04f 33ff 	mov.w	r3, #4294967295
 800dd56:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d015      	beq.n	800dd8a <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	689b      	ldr	r3, [r3, #8]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d006      	beq.n	800dd74 <osMutexNew+0x8c>
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	68db      	ldr	r3, [r3, #12]
 800dd6a:	2b4f      	cmp	r3, #79	; 0x4f
 800dd6c:	d902      	bls.n	800dd74 <osMutexNew+0x8c>
          mem = 1;
 800dd6e:	2301      	movs	r3, #1
 800dd70:	61bb      	str	r3, [r7, #24]
 800dd72:	e00c      	b.n	800dd8e <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	689b      	ldr	r3, [r3, #8]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d108      	bne.n	800dd8e <osMutexNew+0xa6>
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	68db      	ldr	r3, [r3, #12]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d104      	bne.n	800dd8e <osMutexNew+0xa6>
            mem = 0;
 800dd84:	2300      	movs	r3, #0
 800dd86:	61bb      	str	r3, [r7, #24]
 800dd88:	e001      	b.n	800dd8e <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800dd8e:	69bb      	ldr	r3, [r7, #24]
 800dd90:	2b01      	cmp	r3, #1
 800dd92:	d112      	bne.n	800ddba <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800dd94:	69fb      	ldr	r3, [r7, #28]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d007      	beq.n	800ddaa <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	689b      	ldr	r3, [r3, #8]
 800dd9e:	4619      	mov	r1, r3
 800dda0:	2004      	movs	r0, #4
 800dda2:	f001 fa35 	bl	800f210 <xQueueCreateMutexStatic>
 800dda6:	6278      	str	r0, [r7, #36]	; 0x24
 800dda8:	e016      	b.n	800ddd8 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	689b      	ldr	r3, [r3, #8]
 800ddae:	4619      	mov	r1, r3
 800ddb0:	2001      	movs	r0, #1
 800ddb2:	f001 fa2d 	bl	800f210 <xQueueCreateMutexStatic>
 800ddb6:	6278      	str	r0, [r7, #36]	; 0x24
 800ddb8:	e00e      	b.n	800ddd8 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800ddba:	69bb      	ldr	r3, [r7, #24]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d10b      	bne.n	800ddd8 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800ddc0:	69fb      	ldr	r3, [r7, #28]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d004      	beq.n	800ddd0 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800ddc6:	2004      	movs	r0, #4
 800ddc8:	f001 fa0a 	bl	800f1e0 <xQueueCreateMutex>
 800ddcc:	6278      	str	r0, [r7, #36]	; 0x24
 800ddce:	e003      	b.n	800ddd8 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800ddd0:	2001      	movs	r0, #1
 800ddd2:	f001 fa05 	bl	800f1e0 <xQueueCreateMutex>
 800ddd6:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800ddd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d00c      	beq.n	800ddf8 <osMutexNew+0x110>
        if (attr != NULL) {
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d003      	beq.n	800ddec <osMutexNew+0x104>
          name = attr->name;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	617b      	str	r3, [r7, #20]
 800ddea:	e001      	b.n	800ddf0 <osMutexNew+0x108>
        } else {
          name = NULL;
 800ddec:	2300      	movs	r3, #0
 800ddee:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800ddf0:	6979      	ldr	r1, [r7, #20]
 800ddf2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ddf4:	f002 f8ba 	bl	800ff6c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800ddf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d006      	beq.n	800de0c <osMutexNew+0x124>
 800ddfe:	69fb      	ldr	r3, [r7, #28]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d003      	beq.n	800de0c <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800de04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de06:	f043 0301 	orr.w	r3, r3, #1
 800de0a:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800de0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800de0e:	4618      	mov	r0, r3
 800de10:	3728      	adds	r7, #40	; 0x28
 800de12:	46bd      	mov	sp, r7
 800de14:	bd80      	pop	{r7, pc}
 800de16:	bf00      	nop
 800de18:	20000af0 	.word	0x20000af0

0800de1c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b088      	sub	sp, #32
 800de20:	af00      	add	r7, sp, #0
 800de22:	6078      	str	r0, [r7, #4]
 800de24:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	f023 0301 	bic.w	r3, r3, #1
 800de2c:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	f003 0301 	and.w	r3, r3, #1
 800de34:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800de36:	2300      	movs	r3, #0
 800de38:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800de3a:	f3ef 8305 	mrs	r3, IPSR
 800de3e:	613b      	str	r3, [r7, #16]
  return(result);
 800de40:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800de42:	2b00      	cmp	r3, #0
 800de44:	d10f      	bne.n	800de66 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800de46:	f3ef 8310 	mrs	r3, PRIMASK
 800de4a:	60fb      	str	r3, [r7, #12]
  return(result);
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d109      	bne.n	800de66 <osMutexAcquire+0x4a>
 800de52:	4b20      	ldr	r3, [pc, #128]	; (800ded4 <osMutexAcquire+0xb8>)
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	2b02      	cmp	r3, #2
 800de58:	d109      	bne.n	800de6e <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800de5a:	f3ef 8311 	mrs	r3, BASEPRI
 800de5e:	60bb      	str	r3, [r7, #8]
  return(result);
 800de60:	68bb      	ldr	r3, [r7, #8]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d003      	beq.n	800de6e <osMutexAcquire+0x52>
    stat = osErrorISR;
 800de66:	f06f 0305 	mvn.w	r3, #5
 800de6a:	61fb      	str	r3, [r7, #28]
 800de6c:	e02c      	b.n	800dec8 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800de6e:	69bb      	ldr	r3, [r7, #24]
 800de70:	2b00      	cmp	r3, #0
 800de72:	d103      	bne.n	800de7c <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800de74:	f06f 0303 	mvn.w	r3, #3
 800de78:	61fb      	str	r3, [r7, #28]
 800de7a:	e025      	b.n	800dec8 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800de7c:	697b      	ldr	r3, [r7, #20]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d011      	beq.n	800dea6 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800de82:	6839      	ldr	r1, [r7, #0]
 800de84:	69b8      	ldr	r0, [r7, #24]
 800de86:	f001 fa11 	bl	800f2ac <xQueueTakeMutexRecursive>
 800de8a:	4603      	mov	r3, r0
 800de8c:	2b01      	cmp	r3, #1
 800de8e:	d01b      	beq.n	800dec8 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800de90:	683b      	ldr	r3, [r7, #0]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d003      	beq.n	800de9e <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800de96:	f06f 0301 	mvn.w	r3, #1
 800de9a:	61fb      	str	r3, [r7, #28]
 800de9c:	e014      	b.n	800dec8 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800de9e:	f06f 0302 	mvn.w	r3, #2
 800dea2:	61fb      	str	r3, [r7, #28]
 800dea4:	e010      	b.n	800dec8 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800dea6:	6839      	ldr	r1, [r7, #0]
 800dea8:	69b8      	ldr	r0, [r7, #24]
 800deaa:	f001 fd8f 	bl	800f9cc <xQueueSemaphoreTake>
 800deae:	4603      	mov	r3, r0
 800deb0:	2b01      	cmp	r3, #1
 800deb2:	d009      	beq.n	800dec8 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800deb4:	683b      	ldr	r3, [r7, #0]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d003      	beq.n	800dec2 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800deba:	f06f 0301 	mvn.w	r3, #1
 800debe:	61fb      	str	r3, [r7, #28]
 800dec0:	e002      	b.n	800dec8 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800dec2:	f06f 0302 	mvn.w	r3, #2
 800dec6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800dec8:	69fb      	ldr	r3, [r7, #28]
}
 800deca:	4618      	mov	r0, r3
 800decc:	3720      	adds	r7, #32
 800dece:	46bd      	mov	sp, r7
 800ded0:	bd80      	pop	{r7, pc}
 800ded2:	bf00      	nop
 800ded4:	20000af0 	.word	0x20000af0

0800ded8 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800ded8:	b580      	push	{r7, lr}
 800deda:	b088      	sub	sp, #32
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	f023 0301 	bic.w	r3, r3, #1
 800dee6:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	f003 0301 	and.w	r3, r3, #1
 800deee:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800def0:	2300      	movs	r3, #0
 800def2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800def4:	f3ef 8305 	mrs	r3, IPSR
 800def8:	613b      	str	r3, [r7, #16]
  return(result);
 800defa:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800defc:	2b00      	cmp	r3, #0
 800defe:	d10f      	bne.n	800df20 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800df00:	f3ef 8310 	mrs	r3, PRIMASK
 800df04:	60fb      	str	r3, [r7, #12]
  return(result);
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d109      	bne.n	800df20 <osMutexRelease+0x48>
 800df0c:	4b19      	ldr	r3, [pc, #100]	; (800df74 <osMutexRelease+0x9c>)
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	2b02      	cmp	r3, #2
 800df12:	d109      	bne.n	800df28 <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800df14:	f3ef 8311 	mrs	r3, BASEPRI
 800df18:	60bb      	str	r3, [r7, #8]
  return(result);
 800df1a:	68bb      	ldr	r3, [r7, #8]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d003      	beq.n	800df28 <osMutexRelease+0x50>
    stat = osErrorISR;
 800df20:	f06f 0305 	mvn.w	r3, #5
 800df24:	61fb      	str	r3, [r7, #28]
 800df26:	e01f      	b.n	800df68 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800df28:	69bb      	ldr	r3, [r7, #24]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d103      	bne.n	800df36 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800df2e:	f06f 0303 	mvn.w	r3, #3
 800df32:	61fb      	str	r3, [r7, #28]
 800df34:	e018      	b.n	800df68 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800df36:	697b      	ldr	r3, [r7, #20]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d009      	beq.n	800df50 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800df3c:	69b8      	ldr	r0, [r7, #24]
 800df3e:	f001 f982 	bl	800f246 <xQueueGiveMutexRecursive>
 800df42:	4603      	mov	r3, r0
 800df44:	2b01      	cmp	r3, #1
 800df46:	d00f      	beq.n	800df68 <osMutexRelease+0x90>
        stat = osErrorResource;
 800df48:	f06f 0302 	mvn.w	r3, #2
 800df4c:	61fb      	str	r3, [r7, #28]
 800df4e:	e00b      	b.n	800df68 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800df50:	2300      	movs	r3, #0
 800df52:	2200      	movs	r2, #0
 800df54:	2100      	movs	r1, #0
 800df56:	69b8      	ldr	r0, [r7, #24]
 800df58:	f001 fa44 	bl	800f3e4 <xQueueGenericSend>
 800df5c:	4603      	mov	r3, r0
 800df5e:	2b01      	cmp	r3, #1
 800df60:	d002      	beq.n	800df68 <osMutexRelease+0x90>
        stat = osErrorResource;
 800df62:	f06f 0302 	mvn.w	r3, #2
 800df66:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800df68:	69fb      	ldr	r3, [r7, #28]
}
 800df6a:	4618      	mov	r0, r3
 800df6c:	3720      	adds	r7, #32
 800df6e:	46bd      	mov	sp, r7
 800df70:	bd80      	pop	{r7, pc}
 800df72:	bf00      	nop
 800df74:	20000af0 	.word	0x20000af0

0800df78 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800df78:	b580      	push	{r7, lr}
 800df7a:	b08c      	sub	sp, #48	; 0x30
 800df7c:	af02      	add	r7, sp, #8
 800df7e:	60f8      	str	r0, [r7, #12]
 800df80:	60b9      	str	r1, [r7, #8]
 800df82:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800df84:	2300      	movs	r3, #0
 800df86:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800df88:	f3ef 8305 	mrs	r3, IPSR
 800df8c:	61bb      	str	r3, [r7, #24]
  return(result);
 800df8e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800df90:	2b00      	cmp	r3, #0
 800df92:	f040 8088 	bne.w	800e0a6 <osSemaphoreNew+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800df96:	f3ef 8310 	mrs	r3, PRIMASK
 800df9a:	617b      	str	r3, [r7, #20]
  return(result);
 800df9c:	697b      	ldr	r3, [r7, #20]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	f040 8081 	bne.w	800e0a6 <osSemaphoreNew+0x12e>
 800dfa4:	4b42      	ldr	r3, [pc, #264]	; (800e0b0 <osSemaphoreNew+0x138>)
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	2b02      	cmp	r3, #2
 800dfaa:	d105      	bne.n	800dfb8 <osSemaphoreNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dfac:	f3ef 8311 	mrs	r3, BASEPRI
 800dfb0:	613b      	str	r3, [r7, #16]
  return(result);
 800dfb2:	693b      	ldr	r3, [r7, #16]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d176      	bne.n	800e0a6 <osSemaphoreNew+0x12e>
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d073      	beq.n	800e0a6 <osSemaphoreNew+0x12e>
 800dfbe:	68ba      	ldr	r2, [r7, #8]
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	429a      	cmp	r2, r3
 800dfc4:	d86f      	bhi.n	800e0a6 <osSemaphoreNew+0x12e>
    mem = -1;
 800dfc6:	f04f 33ff 	mov.w	r3, #4294967295
 800dfca:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d015      	beq.n	800dffe <osSemaphoreNew+0x86>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	689b      	ldr	r3, [r3, #8]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d006      	beq.n	800dfe8 <osSemaphoreNew+0x70>
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	68db      	ldr	r3, [r3, #12]
 800dfde:	2b4f      	cmp	r3, #79	; 0x4f
 800dfe0:	d902      	bls.n	800dfe8 <osSemaphoreNew+0x70>
        mem = 1;
 800dfe2:	2301      	movs	r3, #1
 800dfe4:	623b      	str	r3, [r7, #32]
 800dfe6:	e00c      	b.n	800e002 <osSemaphoreNew+0x8a>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	689b      	ldr	r3, [r3, #8]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d108      	bne.n	800e002 <osSemaphoreNew+0x8a>
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	68db      	ldr	r3, [r3, #12]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d104      	bne.n	800e002 <osSemaphoreNew+0x8a>
          mem = 0;
 800dff8:	2300      	movs	r3, #0
 800dffa:	623b      	str	r3, [r7, #32]
 800dffc:	e001      	b.n	800e002 <osSemaphoreNew+0x8a>
        }
      }
    }
    else {
      mem = 0;
 800dffe:	2300      	movs	r3, #0
 800e000:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800e002:	6a3b      	ldr	r3, [r7, #32]
 800e004:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e008:	d04d      	beq.n	800e0a6 <osSemaphoreNew+0x12e>
      if (max_count == 1U) {
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	2b01      	cmp	r3, #1
 800e00e:	d129      	bne.n	800e064 <osSemaphoreNew+0xec>
        if (mem == 1) {
 800e010:	6a3b      	ldr	r3, [r7, #32]
 800e012:	2b01      	cmp	r3, #1
 800e014:	d10b      	bne.n	800e02e <osSemaphoreNew+0xb6>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	689a      	ldr	r2, [r3, #8]
 800e01a:	2303      	movs	r3, #3
 800e01c:	9300      	str	r3, [sp, #0]
 800e01e:	4613      	mov	r3, r2
 800e020:	2200      	movs	r2, #0
 800e022:	2100      	movs	r1, #0
 800e024:	2001      	movs	r0, #1
 800e026:	f000 ffef 	bl	800f008 <xQueueGenericCreateStatic>
 800e02a:	6278      	str	r0, [r7, #36]	; 0x24
 800e02c:	e005      	b.n	800e03a <osSemaphoreNew+0xc2>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800e02e:	2203      	movs	r2, #3
 800e030:	2100      	movs	r1, #0
 800e032:	2001      	movs	r0, #1
 800e034:	f001 f85a 	bl	800f0ec <xQueueGenericCreate>
 800e038:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800e03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d022      	beq.n	800e086 <osSemaphoreNew+0x10e>
 800e040:	68bb      	ldr	r3, [r7, #8]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d01f      	beq.n	800e086 <osSemaphoreNew+0x10e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800e046:	2300      	movs	r3, #0
 800e048:	2200      	movs	r2, #0
 800e04a:	2100      	movs	r1, #0
 800e04c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e04e:	f001 f9c9 	bl	800f3e4 <xQueueGenericSend>
 800e052:	4603      	mov	r3, r0
 800e054:	2b01      	cmp	r3, #1
 800e056:	d016      	beq.n	800e086 <osSemaphoreNew+0x10e>
            vSemaphoreDelete (hSemaphore);
 800e058:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e05a:	f001 fe3c 	bl	800fcd6 <vQueueDelete>
            hSemaphore = NULL;
 800e05e:	2300      	movs	r3, #0
 800e060:	627b      	str	r3, [r7, #36]	; 0x24
 800e062:	e010      	b.n	800e086 <osSemaphoreNew+0x10e>
          }
        }
      }
      else {
        if (mem == 1) {
 800e064:	6a3b      	ldr	r3, [r7, #32]
 800e066:	2b01      	cmp	r3, #1
 800e068:	d108      	bne.n	800e07c <osSemaphoreNew+0x104>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	689b      	ldr	r3, [r3, #8]
 800e06e:	461a      	mov	r2, r3
 800e070:	68b9      	ldr	r1, [r7, #8]
 800e072:	68f8      	ldr	r0, [r7, #12]
 800e074:	f001 f94f 	bl	800f316 <xQueueCreateCountingSemaphoreStatic>
 800e078:	6278      	str	r0, [r7, #36]	; 0x24
 800e07a:	e004      	b.n	800e086 <osSemaphoreNew+0x10e>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800e07c:	68b9      	ldr	r1, [r7, #8]
 800e07e:	68f8      	ldr	r0, [r7, #12]
 800e080:	f001 f97e 	bl	800f380 <xQueueCreateCountingSemaphore>
 800e084:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800e086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d00c      	beq.n	800e0a6 <osSemaphoreNew+0x12e>
        if (attr != NULL) {
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d003      	beq.n	800e09a <osSemaphoreNew+0x122>
          name = attr->name;
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	61fb      	str	r3, [r7, #28]
 800e098:	e001      	b.n	800e09e <osSemaphoreNew+0x126>
        } else {
          name = NULL;
 800e09a:	2300      	movs	r3, #0
 800e09c:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800e09e:	69f9      	ldr	r1, [r7, #28]
 800e0a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e0a2:	f001 ff63 	bl	800ff6c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800e0a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	3728      	adds	r7, #40	; 0x28
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	bd80      	pop	{r7, pc}
 800e0b0:	20000af0 	.word	0x20000af0

0800e0b4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800e0b4:	b580      	push	{r7, lr}
 800e0b6:	b088      	sub	sp, #32
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	6078      	str	r0, [r7, #4]
 800e0bc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800e0c2:	2300      	movs	r3, #0
 800e0c4:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800e0c6:	69bb      	ldr	r3, [r7, #24]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d103      	bne.n	800e0d4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800e0cc:	f06f 0303 	mvn.w	r3, #3
 800e0d0:	61fb      	str	r3, [r7, #28]
 800e0d2:	e04b      	b.n	800e16c <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e0d4:	f3ef 8305 	mrs	r3, IPSR
 800e0d8:	617b      	str	r3, [r7, #20]
  return(result);
 800e0da:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d10f      	bne.n	800e100 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e0e0:	f3ef 8310 	mrs	r3, PRIMASK
 800e0e4:	613b      	str	r3, [r7, #16]
  return(result);
 800e0e6:	693b      	ldr	r3, [r7, #16]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d109      	bne.n	800e100 <osSemaphoreAcquire+0x4c>
 800e0ec:	4b22      	ldr	r3, [pc, #136]	; (800e178 <osSemaphoreAcquire+0xc4>)
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	2b02      	cmp	r3, #2
 800e0f2:	d128      	bne.n	800e146 <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e0f4:	f3ef 8311 	mrs	r3, BASEPRI
 800e0f8:	60fb      	str	r3, [r7, #12]
  return(result);
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d022      	beq.n	800e146 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800e100:	683b      	ldr	r3, [r7, #0]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d003      	beq.n	800e10e <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800e106:	f06f 0303 	mvn.w	r3, #3
 800e10a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800e10c:	e02d      	b.n	800e16a <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800e10e:	2300      	movs	r3, #0
 800e110:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800e112:	f107 0308 	add.w	r3, r7, #8
 800e116:	461a      	mov	r2, r3
 800e118:	2100      	movs	r1, #0
 800e11a:	69b8      	ldr	r0, [r7, #24]
 800e11c:	f001 fd5e 	bl	800fbdc <xQueueReceiveFromISR>
 800e120:	4603      	mov	r3, r0
 800e122:	2b01      	cmp	r3, #1
 800e124:	d003      	beq.n	800e12e <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800e126:	f06f 0302 	mvn.w	r3, #2
 800e12a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800e12c:	e01d      	b.n	800e16a <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800e12e:	68bb      	ldr	r3, [r7, #8]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d01a      	beq.n	800e16a <osSemaphoreAcquire+0xb6>
 800e134:	4b11      	ldr	r3, [pc, #68]	; (800e17c <osSemaphoreAcquire+0xc8>)
 800e136:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e13a:	601a      	str	r2, [r3, #0]
 800e13c:	f3bf 8f4f 	dsb	sy
 800e140:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800e144:	e011      	b.n	800e16a <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800e146:	6839      	ldr	r1, [r7, #0]
 800e148:	69b8      	ldr	r0, [r7, #24]
 800e14a:	f001 fc3f 	bl	800f9cc <xQueueSemaphoreTake>
 800e14e:	4603      	mov	r3, r0
 800e150:	2b01      	cmp	r3, #1
 800e152:	d00b      	beq.n	800e16c <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800e154:	683b      	ldr	r3, [r7, #0]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d003      	beq.n	800e162 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800e15a:	f06f 0301 	mvn.w	r3, #1
 800e15e:	61fb      	str	r3, [r7, #28]
 800e160:	e004      	b.n	800e16c <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800e162:	f06f 0302 	mvn.w	r3, #2
 800e166:	61fb      	str	r3, [r7, #28]
 800e168:	e000      	b.n	800e16c <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800e16a:	bf00      	nop
      }
    }
  }

  return (stat);
 800e16c:	69fb      	ldr	r3, [r7, #28]
}
 800e16e:	4618      	mov	r0, r3
 800e170:	3720      	adds	r7, #32
 800e172:	46bd      	mov	sp, r7
 800e174:	bd80      	pop	{r7, pc}
 800e176:	bf00      	nop
 800e178:	20000af0 	.word	0x20000af0
 800e17c:	e000ed04 	.word	0xe000ed04

0800e180 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800e180:	b580      	push	{r7, lr}
 800e182:	b088      	sub	sp, #32
 800e184:	af00      	add	r7, sp, #0
 800e186:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800e18c:	2300      	movs	r3, #0
 800e18e:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800e190:	69bb      	ldr	r3, [r7, #24]
 800e192:	2b00      	cmp	r3, #0
 800e194:	d103      	bne.n	800e19e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800e196:	f06f 0303 	mvn.w	r3, #3
 800e19a:	61fb      	str	r3, [r7, #28]
 800e19c:	e03e      	b.n	800e21c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e19e:	f3ef 8305 	mrs	r3, IPSR
 800e1a2:	617b      	str	r3, [r7, #20]
  return(result);
 800e1a4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d10f      	bne.n	800e1ca <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e1aa:	f3ef 8310 	mrs	r3, PRIMASK
 800e1ae:	613b      	str	r3, [r7, #16]
  return(result);
 800e1b0:	693b      	ldr	r3, [r7, #16]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d109      	bne.n	800e1ca <osSemaphoreRelease+0x4a>
 800e1b6:	4b1c      	ldr	r3, [pc, #112]	; (800e228 <osSemaphoreRelease+0xa8>)
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	2b02      	cmp	r3, #2
 800e1bc:	d120      	bne.n	800e200 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e1be:	f3ef 8311 	mrs	r3, BASEPRI
 800e1c2:	60fb      	str	r3, [r7, #12]
  return(result);
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d01a      	beq.n	800e200 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800e1ca:	2300      	movs	r3, #0
 800e1cc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800e1ce:	f107 0308 	add.w	r3, r7, #8
 800e1d2:	4619      	mov	r1, r3
 800e1d4:	69b8      	ldr	r0, [r7, #24]
 800e1d6:	f001 fa93 	bl	800f700 <xQueueGiveFromISR>
 800e1da:	4603      	mov	r3, r0
 800e1dc:	2b01      	cmp	r3, #1
 800e1de:	d003      	beq.n	800e1e8 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800e1e0:	f06f 0302 	mvn.w	r3, #2
 800e1e4:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800e1e6:	e018      	b.n	800e21a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800e1e8:	68bb      	ldr	r3, [r7, #8]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d015      	beq.n	800e21a <osSemaphoreRelease+0x9a>
 800e1ee:	4b0f      	ldr	r3, [pc, #60]	; (800e22c <osSemaphoreRelease+0xac>)
 800e1f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e1f4:	601a      	str	r2, [r3, #0]
 800e1f6:	f3bf 8f4f 	dsb	sy
 800e1fa:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800e1fe:	e00c      	b.n	800e21a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800e200:	2300      	movs	r3, #0
 800e202:	2200      	movs	r2, #0
 800e204:	2100      	movs	r1, #0
 800e206:	69b8      	ldr	r0, [r7, #24]
 800e208:	f001 f8ec 	bl	800f3e4 <xQueueGenericSend>
 800e20c:	4603      	mov	r3, r0
 800e20e:	2b01      	cmp	r3, #1
 800e210:	d004      	beq.n	800e21c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800e212:	f06f 0302 	mvn.w	r3, #2
 800e216:	61fb      	str	r3, [r7, #28]
 800e218:	e000      	b.n	800e21c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800e21a:	bf00      	nop
    }
  }

  return (stat);
 800e21c:	69fb      	ldr	r3, [r7, #28]
}
 800e21e:	4618      	mov	r0, r3
 800e220:	3720      	adds	r7, #32
 800e222:	46bd      	mov	sp, r7
 800e224:	bd80      	pop	{r7, pc}
 800e226:	bf00      	nop
 800e228:	20000af0 	.word	0x20000af0
 800e22c:	e000ed04 	.word	0xe000ed04

0800e230 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800e230:	b580      	push	{r7, lr}
 800e232:	b08c      	sub	sp, #48	; 0x30
 800e234:	af02      	add	r7, sp, #8
 800e236:	60f8      	str	r0, [r7, #12]
 800e238:	60b9      	str	r1, [r7, #8]
 800e23a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800e23c:	2300      	movs	r3, #0
 800e23e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e240:	f3ef 8305 	mrs	r3, IPSR
 800e244:	61bb      	str	r3, [r7, #24]
  return(result);
 800e246:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d170      	bne.n	800e32e <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e24c:	f3ef 8310 	mrs	r3, PRIMASK
 800e250:	617b      	str	r3, [r7, #20]
  return(result);
 800e252:	697b      	ldr	r3, [r7, #20]
 800e254:	2b00      	cmp	r3, #0
 800e256:	d16a      	bne.n	800e32e <osMessageQueueNew+0xfe>
 800e258:	4b37      	ldr	r3, [pc, #220]	; (800e338 <osMessageQueueNew+0x108>)
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	2b02      	cmp	r3, #2
 800e25e:	d105      	bne.n	800e26c <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e260:	f3ef 8311 	mrs	r3, BASEPRI
 800e264:	613b      	str	r3, [r7, #16]
  return(result);
 800e266:	693b      	ldr	r3, [r7, #16]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d160      	bne.n	800e32e <osMessageQueueNew+0xfe>
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d05d      	beq.n	800e32e <osMessageQueueNew+0xfe>
 800e272:	68bb      	ldr	r3, [r7, #8]
 800e274:	2b00      	cmp	r3, #0
 800e276:	d05a      	beq.n	800e32e <osMessageQueueNew+0xfe>
    mem = -1;
 800e278:	f04f 33ff 	mov.w	r3, #4294967295
 800e27c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d029      	beq.n	800e2d8 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	689b      	ldr	r3, [r3, #8]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d012      	beq.n	800e2b2 <osMessageQueueNew+0x82>
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	68db      	ldr	r3, [r3, #12]
 800e290:	2b4f      	cmp	r3, #79	; 0x4f
 800e292:	d90e      	bls.n	800e2b2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d00a      	beq.n	800e2b2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	695a      	ldr	r2, [r3, #20]
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	68b9      	ldr	r1, [r7, #8]
 800e2a4:	fb01 f303 	mul.w	r3, r1, r3
 800e2a8:	429a      	cmp	r2, r3
 800e2aa:	d302      	bcc.n	800e2b2 <osMessageQueueNew+0x82>
        mem = 1;
 800e2ac:	2301      	movs	r3, #1
 800e2ae:	623b      	str	r3, [r7, #32]
 800e2b0:	e014      	b.n	800e2dc <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	689b      	ldr	r3, [r3, #8]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d110      	bne.n	800e2dc <osMessageQueueNew+0xac>
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	68db      	ldr	r3, [r3, #12]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d10c      	bne.n	800e2dc <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d108      	bne.n	800e2dc <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	695b      	ldr	r3, [r3, #20]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d104      	bne.n	800e2dc <osMessageQueueNew+0xac>
          mem = 0;
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	623b      	str	r3, [r7, #32]
 800e2d6:	e001      	b.n	800e2dc <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800e2d8:	2300      	movs	r3, #0
 800e2da:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800e2dc:	6a3b      	ldr	r3, [r7, #32]
 800e2de:	2b01      	cmp	r3, #1
 800e2e0:	d10c      	bne.n	800e2fc <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	691a      	ldr	r2, [r3, #16]
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	6899      	ldr	r1, [r3, #8]
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	9300      	str	r3, [sp, #0]
 800e2ee:	460b      	mov	r3, r1
 800e2f0:	68b9      	ldr	r1, [r7, #8]
 800e2f2:	68f8      	ldr	r0, [r7, #12]
 800e2f4:	f000 fe88 	bl	800f008 <xQueueGenericCreateStatic>
 800e2f8:	6278      	str	r0, [r7, #36]	; 0x24
 800e2fa:	e008      	b.n	800e30e <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 800e2fc:	6a3b      	ldr	r3, [r7, #32]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d105      	bne.n	800e30e <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800e302:	2200      	movs	r2, #0
 800e304:	68b9      	ldr	r1, [r7, #8]
 800e306:	68f8      	ldr	r0, [r7, #12]
 800e308:	f000 fef0 	bl	800f0ec <xQueueGenericCreate>
 800e30c:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800e30e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e310:	2b00      	cmp	r3, #0
 800e312:	d00c      	beq.n	800e32e <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	2b00      	cmp	r3, #0
 800e318:	d003      	beq.n	800e322 <osMessageQueueNew+0xf2>
        name = attr->name;
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	61fb      	str	r3, [r7, #28]
 800e320:	e001      	b.n	800e326 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800e322:	2300      	movs	r3, #0
 800e324:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800e326:	69f9      	ldr	r1, [r7, #28]
 800e328:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e32a:	f001 fe1f 	bl	800ff6c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800e32e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e330:	4618      	mov	r0, r3
 800e332:	3728      	adds	r7, #40	; 0x28
 800e334:	46bd      	mov	sp, r7
 800e336:	bd80      	pop	{r7, pc}
 800e338:	20000af0 	.word	0x20000af0

0800e33c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800e33c:	b580      	push	{r7, lr}
 800e33e:	b08a      	sub	sp, #40	; 0x28
 800e340:	af00      	add	r7, sp, #0
 800e342:	60f8      	str	r0, [r7, #12]
 800e344:	60b9      	str	r1, [r7, #8]
 800e346:	603b      	str	r3, [r7, #0]
 800e348:	4613      	mov	r3, r2
 800e34a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800e350:	2300      	movs	r3, #0
 800e352:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e354:	f3ef 8305 	mrs	r3, IPSR
 800e358:	61fb      	str	r3, [r7, #28]
  return(result);
 800e35a:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d10f      	bne.n	800e380 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e360:	f3ef 8310 	mrs	r3, PRIMASK
 800e364:	61bb      	str	r3, [r7, #24]
  return(result);
 800e366:	69bb      	ldr	r3, [r7, #24]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d109      	bne.n	800e380 <osMessageQueuePut+0x44>
 800e36c:	4b2b      	ldr	r3, [pc, #172]	; (800e41c <osMessageQueuePut+0xe0>)
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	2b02      	cmp	r3, #2
 800e372:	d12e      	bne.n	800e3d2 <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e374:	f3ef 8311 	mrs	r3, BASEPRI
 800e378:	617b      	str	r3, [r7, #20]
  return(result);
 800e37a:	697b      	ldr	r3, [r7, #20]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d028      	beq.n	800e3d2 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e380:	6a3b      	ldr	r3, [r7, #32]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d005      	beq.n	800e392 <osMessageQueuePut+0x56>
 800e386:	68bb      	ldr	r3, [r7, #8]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d002      	beq.n	800e392 <osMessageQueuePut+0x56>
 800e38c:	683b      	ldr	r3, [r7, #0]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d003      	beq.n	800e39a <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800e392:	f06f 0303 	mvn.w	r3, #3
 800e396:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e398:	e039      	b.n	800e40e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800e39a:	2300      	movs	r3, #0
 800e39c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800e39e:	f107 0210 	add.w	r2, r7, #16
 800e3a2:	2300      	movs	r3, #0
 800e3a4:	68b9      	ldr	r1, [r7, #8]
 800e3a6:	6a38      	ldr	r0, [r7, #32]
 800e3a8:	f001 f916 	bl	800f5d8 <xQueueGenericSendFromISR>
 800e3ac:	4603      	mov	r3, r0
 800e3ae:	2b01      	cmp	r3, #1
 800e3b0:	d003      	beq.n	800e3ba <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800e3b2:	f06f 0302 	mvn.w	r3, #2
 800e3b6:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e3b8:	e029      	b.n	800e40e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800e3ba:	693b      	ldr	r3, [r7, #16]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d026      	beq.n	800e40e <osMessageQueuePut+0xd2>
 800e3c0:	4b17      	ldr	r3, [pc, #92]	; (800e420 <osMessageQueuePut+0xe4>)
 800e3c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3c6:	601a      	str	r2, [r3, #0]
 800e3c8:	f3bf 8f4f 	dsb	sy
 800e3cc:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e3d0:	e01d      	b.n	800e40e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e3d2:	6a3b      	ldr	r3, [r7, #32]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d002      	beq.n	800e3de <osMessageQueuePut+0xa2>
 800e3d8:	68bb      	ldr	r3, [r7, #8]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d103      	bne.n	800e3e6 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800e3de:	f06f 0303 	mvn.w	r3, #3
 800e3e2:	627b      	str	r3, [r7, #36]	; 0x24
 800e3e4:	e014      	b.n	800e410 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e3e6:	2300      	movs	r3, #0
 800e3e8:	683a      	ldr	r2, [r7, #0]
 800e3ea:	68b9      	ldr	r1, [r7, #8]
 800e3ec:	6a38      	ldr	r0, [r7, #32]
 800e3ee:	f000 fff9 	bl	800f3e4 <xQueueGenericSend>
 800e3f2:	4603      	mov	r3, r0
 800e3f4:	2b01      	cmp	r3, #1
 800e3f6:	d00b      	beq.n	800e410 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800e3f8:	683b      	ldr	r3, [r7, #0]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d003      	beq.n	800e406 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800e3fe:	f06f 0301 	mvn.w	r3, #1
 800e402:	627b      	str	r3, [r7, #36]	; 0x24
 800e404:	e004      	b.n	800e410 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800e406:	f06f 0302 	mvn.w	r3, #2
 800e40a:	627b      	str	r3, [r7, #36]	; 0x24
 800e40c:	e000      	b.n	800e410 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e40e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800e410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e412:	4618      	mov	r0, r3
 800e414:	3728      	adds	r7, #40	; 0x28
 800e416:	46bd      	mov	sp, r7
 800e418:	bd80      	pop	{r7, pc}
 800e41a:	bf00      	nop
 800e41c:	20000af0 	.word	0x20000af0
 800e420:	e000ed04 	.word	0xe000ed04

0800e424 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800e424:	b580      	push	{r7, lr}
 800e426:	b08a      	sub	sp, #40	; 0x28
 800e428:	af00      	add	r7, sp, #0
 800e42a:	60f8      	str	r0, [r7, #12]
 800e42c:	60b9      	str	r1, [r7, #8]
 800e42e:	607a      	str	r2, [r7, #4]
 800e430:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800e436:	2300      	movs	r3, #0
 800e438:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e43a:	f3ef 8305 	mrs	r3, IPSR
 800e43e:	61fb      	str	r3, [r7, #28]
  return(result);
 800e440:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800e442:	2b00      	cmp	r3, #0
 800e444:	d10f      	bne.n	800e466 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e446:	f3ef 8310 	mrs	r3, PRIMASK
 800e44a:	61bb      	str	r3, [r7, #24]
  return(result);
 800e44c:	69bb      	ldr	r3, [r7, #24]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d109      	bne.n	800e466 <osMessageQueueGet+0x42>
 800e452:	4b2b      	ldr	r3, [pc, #172]	; (800e500 <osMessageQueueGet+0xdc>)
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	2b02      	cmp	r3, #2
 800e458:	d12e      	bne.n	800e4b8 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e45a:	f3ef 8311 	mrs	r3, BASEPRI
 800e45e:	617b      	str	r3, [r7, #20]
  return(result);
 800e460:	697b      	ldr	r3, [r7, #20]
 800e462:	2b00      	cmp	r3, #0
 800e464:	d028      	beq.n	800e4b8 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e466:	6a3b      	ldr	r3, [r7, #32]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d005      	beq.n	800e478 <osMessageQueueGet+0x54>
 800e46c:	68bb      	ldr	r3, [r7, #8]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d002      	beq.n	800e478 <osMessageQueueGet+0x54>
 800e472:	683b      	ldr	r3, [r7, #0]
 800e474:	2b00      	cmp	r3, #0
 800e476:	d003      	beq.n	800e480 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800e478:	f06f 0303 	mvn.w	r3, #3
 800e47c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e47e:	e038      	b.n	800e4f2 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800e480:	2300      	movs	r3, #0
 800e482:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800e484:	f107 0310 	add.w	r3, r7, #16
 800e488:	461a      	mov	r2, r3
 800e48a:	68b9      	ldr	r1, [r7, #8]
 800e48c:	6a38      	ldr	r0, [r7, #32]
 800e48e:	f001 fba5 	bl	800fbdc <xQueueReceiveFromISR>
 800e492:	4603      	mov	r3, r0
 800e494:	2b01      	cmp	r3, #1
 800e496:	d003      	beq.n	800e4a0 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800e498:	f06f 0302 	mvn.w	r3, #2
 800e49c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e49e:	e028      	b.n	800e4f2 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800e4a0:	693b      	ldr	r3, [r7, #16]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d025      	beq.n	800e4f2 <osMessageQueueGet+0xce>
 800e4a6:	4b17      	ldr	r3, [pc, #92]	; (800e504 <osMessageQueueGet+0xe0>)
 800e4a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e4ac:	601a      	str	r2, [r3, #0]
 800e4ae:	f3bf 8f4f 	dsb	sy
 800e4b2:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e4b6:	e01c      	b.n	800e4f2 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e4b8:	6a3b      	ldr	r3, [r7, #32]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d002      	beq.n	800e4c4 <osMessageQueueGet+0xa0>
 800e4be:	68bb      	ldr	r3, [r7, #8]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d103      	bne.n	800e4cc <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800e4c4:	f06f 0303 	mvn.w	r3, #3
 800e4c8:	627b      	str	r3, [r7, #36]	; 0x24
 800e4ca:	e013      	b.n	800e4f4 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e4cc:	683a      	ldr	r2, [r7, #0]
 800e4ce:	68b9      	ldr	r1, [r7, #8]
 800e4d0:	6a38      	ldr	r0, [r7, #32]
 800e4d2:	f001 f99f 	bl	800f814 <xQueueReceive>
 800e4d6:	4603      	mov	r3, r0
 800e4d8:	2b01      	cmp	r3, #1
 800e4da:	d00b      	beq.n	800e4f4 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800e4dc:	683b      	ldr	r3, [r7, #0]
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d003      	beq.n	800e4ea <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800e4e2:	f06f 0301 	mvn.w	r3, #1
 800e4e6:	627b      	str	r3, [r7, #36]	; 0x24
 800e4e8:	e004      	b.n	800e4f4 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800e4ea:	f06f 0302 	mvn.w	r3, #2
 800e4ee:	627b      	str	r3, [r7, #36]	; 0x24
 800e4f0:	e000      	b.n	800e4f4 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e4f2:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800e4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	3728      	adds	r7, #40	; 0x28
 800e4fa:	46bd      	mov	sp, r7
 800e4fc:	bd80      	pop	{r7, pc}
 800e4fe:	bf00      	nop
 800e500:	20000af0 	.word	0x20000af0
 800e504:	e000ed04 	.word	0xe000ed04

0800e508 <osMessageQueueReset>:
  }

  return (space);
}

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 800e508:	b580      	push	{r7, lr}
 800e50a:	b088      	sub	sp, #32
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e514:	f3ef 8305 	mrs	r3, IPSR
 800e518:	617b      	str	r3, [r7, #20]
  return(result);
 800e51a:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d10f      	bne.n	800e540 <osMessageQueueReset+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e520:	f3ef 8310 	mrs	r3, PRIMASK
 800e524:	613b      	str	r3, [r7, #16]
  return(result);
 800e526:	693b      	ldr	r3, [r7, #16]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d109      	bne.n	800e540 <osMessageQueueReset+0x38>
 800e52c:	4b0f      	ldr	r3, [pc, #60]	; (800e56c <osMessageQueueReset+0x64>)
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	2b02      	cmp	r3, #2
 800e532:	d109      	bne.n	800e548 <osMessageQueueReset+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e534:	f3ef 8311 	mrs	r3, BASEPRI
 800e538:	60fb      	str	r3, [r7, #12]
  return(result);
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d003      	beq.n	800e548 <osMessageQueueReset+0x40>
    stat = osErrorISR;
 800e540:	f06f 0305 	mvn.w	r3, #5
 800e544:	61fb      	str	r3, [r7, #28]
 800e546:	e00c      	b.n	800e562 <osMessageQueueReset+0x5a>
  }
  else if (hQueue == NULL) {
 800e548:	69bb      	ldr	r3, [r7, #24]
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d103      	bne.n	800e556 <osMessageQueueReset+0x4e>
    stat = osErrorParameter;
 800e54e:	f06f 0303 	mvn.w	r3, #3
 800e552:	61fb      	str	r3, [r7, #28]
 800e554:	e005      	b.n	800e562 <osMessageQueueReset+0x5a>
  }
  else {
    stat = osOK;
 800e556:	2300      	movs	r3, #0
 800e558:	61fb      	str	r3, [r7, #28]
    (void)xQueueReset (hQueue);
 800e55a:	2100      	movs	r1, #0
 800e55c:	69b8      	ldr	r0, [r7, #24]
 800e55e:	f000 fceb 	bl	800ef38 <xQueueGenericReset>
  }

  return (stat);
 800e562:	69fb      	ldr	r3, [r7, #28]
}
 800e564:	4618      	mov	r0, r3
 800e566:	3720      	adds	r7, #32
 800e568:	46bd      	mov	sp, r7
 800e56a:	bd80      	pop	{r7, pc}
 800e56c:	20000af0 	.word	0x20000af0

0800e570 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800e570:	b480      	push	{r7}
 800e572:	b085      	sub	sp, #20
 800e574:	af00      	add	r7, sp, #0
 800e576:	60f8      	str	r0, [r7, #12]
 800e578:	60b9      	str	r1, [r7, #8]
 800e57a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	4a07      	ldr	r2, [pc, #28]	; (800e59c <vApplicationGetIdleTaskMemory+0x2c>)
 800e580:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e582:	68bb      	ldr	r3, [r7, #8]
 800e584:	4a06      	ldr	r2, [pc, #24]	; (800e5a0 <vApplicationGetIdleTaskMemory+0x30>)
 800e586:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e58e:	601a      	str	r2, [r3, #0]
}
 800e590:	bf00      	nop
 800e592:	3714      	adds	r7, #20
 800e594:	46bd      	mov	sp, r7
 800e596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e59a:	4770      	bx	lr
 800e59c:	20000af4 	.word	0x20000af4
 800e5a0:	20000b58 	.word	0x20000b58

0800e5a4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800e5a4:	b480      	push	{r7}
 800e5a6:	b085      	sub	sp, #20
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	60f8      	str	r0, [r7, #12]
 800e5ac:	60b9      	str	r1, [r7, #8]
 800e5ae:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	4a07      	ldr	r2, [pc, #28]	; (800e5d0 <vApplicationGetTimerTaskMemory+0x2c>)
 800e5b4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e5b6:	68bb      	ldr	r3, [r7, #8]
 800e5b8:	4a06      	ldr	r2, [pc, #24]	; (800e5d4 <vApplicationGetTimerTaskMemory+0x30>)
 800e5ba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e5c2:	601a      	str	r2, [r3, #0]
}
 800e5c4:	bf00      	nop
 800e5c6:	3714      	adds	r7, #20
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ce:	4770      	bx	lr
 800e5d0:	20001358 	.word	0x20001358
 800e5d4:	200013bc 	.word	0x200013bc

0800e5d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e5d8:	b580      	push	{r7, lr}
 800e5da:	b08a      	sub	sp, #40	; 0x28
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e5e4:	f001 ff7c 	bl	80104e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e5e8:	4b59      	ldr	r3, [pc, #356]	; (800e750 <pvPortMalloc+0x178>)
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d101      	bne.n	800e5f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e5f0:	f000 f910 	bl	800e814 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e5f4:	4b57      	ldr	r3, [pc, #348]	; (800e754 <pvPortMalloc+0x17c>)
 800e5f6:	681a      	ldr	r2, [r3, #0]
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	4013      	ands	r3, r2
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	f040 808c 	bne.w	800e71a <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	2b00      	cmp	r3, #0
 800e606:	d01c      	beq.n	800e642 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800e608:	2208      	movs	r2, #8
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	4413      	add	r3, r2
 800e60e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	f003 0307 	and.w	r3, r3, #7
 800e616:	2b00      	cmp	r3, #0
 800e618:	d013      	beq.n	800e642 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	f023 0307 	bic.w	r3, r3, #7
 800e620:	3308      	adds	r3, #8
 800e622:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	f003 0307 	and.w	r3, r3, #7
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d009      	beq.n	800e642 <pvPortMalloc+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e62e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e632:	f383 8811 	msr	BASEPRI, r3
 800e636:	f3bf 8f6f 	isb	sy
 800e63a:	f3bf 8f4f 	dsb	sy
 800e63e:	617b      	str	r3, [r7, #20]
 800e640:	e7fe      	b.n	800e640 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d068      	beq.n	800e71a <pvPortMalloc+0x142>
 800e648:	4b43      	ldr	r3, [pc, #268]	; (800e758 <pvPortMalloc+0x180>)
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	687a      	ldr	r2, [r7, #4]
 800e64e:	429a      	cmp	r2, r3
 800e650:	d863      	bhi.n	800e71a <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e652:	4b42      	ldr	r3, [pc, #264]	; (800e75c <pvPortMalloc+0x184>)
 800e654:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e656:	4b41      	ldr	r3, [pc, #260]	; (800e75c <pvPortMalloc+0x184>)
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e65c:	e004      	b.n	800e668 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800e65e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e660:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e66a:	685b      	ldr	r3, [r3, #4]
 800e66c:	687a      	ldr	r2, [r7, #4]
 800e66e:	429a      	cmp	r2, r3
 800e670:	d903      	bls.n	800e67a <pvPortMalloc+0xa2>
 800e672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d1f1      	bne.n	800e65e <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e67a:	4b35      	ldr	r3, [pc, #212]	; (800e750 <pvPortMalloc+0x178>)
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e680:	429a      	cmp	r2, r3
 800e682:	d04a      	beq.n	800e71a <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e684:	6a3b      	ldr	r3, [r7, #32]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	2208      	movs	r2, #8
 800e68a:	4413      	add	r3, r2
 800e68c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e690:	681a      	ldr	r2, [r3, #0]
 800e692:	6a3b      	ldr	r3, [r7, #32]
 800e694:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e698:	685a      	ldr	r2, [r3, #4]
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	1ad2      	subs	r2, r2, r3
 800e69e:	2308      	movs	r3, #8
 800e6a0:	005b      	lsls	r3, r3, #1
 800e6a2:	429a      	cmp	r2, r3
 800e6a4:	d91e      	bls.n	800e6e4 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e6a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	4413      	add	r3, r2
 800e6ac:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e6ae:	69bb      	ldr	r3, [r7, #24]
 800e6b0:	f003 0307 	and.w	r3, r3, #7
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d009      	beq.n	800e6cc <pvPortMalloc+0xf4>
 800e6b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6bc:	f383 8811 	msr	BASEPRI, r3
 800e6c0:	f3bf 8f6f 	isb	sy
 800e6c4:	f3bf 8f4f 	dsb	sy
 800e6c8:	613b      	str	r3, [r7, #16]
 800e6ca:	e7fe      	b.n	800e6ca <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e6cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6ce:	685a      	ldr	r2, [r3, #4]
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	1ad2      	subs	r2, r2, r3
 800e6d4:	69bb      	ldr	r3, [r7, #24]
 800e6d6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6da:	687a      	ldr	r2, [r7, #4]
 800e6dc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e6de:	69b8      	ldr	r0, [r7, #24]
 800e6e0:	f000 f8fc 	bl	800e8dc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e6e4:	4b1c      	ldr	r3, [pc, #112]	; (800e758 <pvPortMalloc+0x180>)
 800e6e6:	681a      	ldr	r2, [r3, #0]
 800e6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6ea:	685b      	ldr	r3, [r3, #4]
 800e6ec:	1ad3      	subs	r3, r2, r3
 800e6ee:	4a1a      	ldr	r2, [pc, #104]	; (800e758 <pvPortMalloc+0x180>)
 800e6f0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e6f2:	4b19      	ldr	r3, [pc, #100]	; (800e758 <pvPortMalloc+0x180>)
 800e6f4:	681a      	ldr	r2, [r3, #0]
 800e6f6:	4b1a      	ldr	r3, [pc, #104]	; (800e760 <pvPortMalloc+0x188>)
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	429a      	cmp	r2, r3
 800e6fc:	d203      	bcs.n	800e706 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e6fe:	4b16      	ldr	r3, [pc, #88]	; (800e758 <pvPortMalloc+0x180>)
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	4a17      	ldr	r2, [pc, #92]	; (800e760 <pvPortMalloc+0x188>)
 800e704:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e708:	685a      	ldr	r2, [r3, #4]
 800e70a:	4b12      	ldr	r3, [pc, #72]	; (800e754 <pvPortMalloc+0x17c>)
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	431a      	orrs	r2, r3
 800e710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e712:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e716:	2200      	movs	r2, #0
 800e718:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e71a:	f001 ff27 	bl	801056c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800e71e:	69fb      	ldr	r3, [r7, #28]
 800e720:	2b00      	cmp	r3, #0
 800e722:	d101      	bne.n	800e728 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800e724:	f7f2 fdac 	bl	8001280 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e728:	69fb      	ldr	r3, [r7, #28]
 800e72a:	f003 0307 	and.w	r3, r3, #7
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d009      	beq.n	800e746 <pvPortMalloc+0x16e>
 800e732:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e736:	f383 8811 	msr	BASEPRI, r3
 800e73a:	f3bf 8f6f 	isb	sy
 800e73e:	f3bf 8f4f 	dsb	sy
 800e742:	60fb      	str	r3, [r7, #12]
 800e744:	e7fe      	b.n	800e744 <pvPortMalloc+0x16c>
	return pvReturn;
 800e746:	69fb      	ldr	r3, [r7, #28]
}
 800e748:	4618      	mov	r0, r3
 800e74a:	3728      	adds	r7, #40	; 0x28
 800e74c:	46bd      	mov	sp, r7
 800e74e:	bd80      	pop	{r7, pc}
 800e750:	20026db4 	.word	0x20026db4
 800e754:	20026dc0 	.word	0x20026dc0
 800e758:	20026db8 	.word	0x20026db8
 800e75c:	20026dac 	.word	0x20026dac
 800e760:	20026dbc 	.word	0x20026dbc

0800e764 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e764:	b580      	push	{r7, lr}
 800e766:	b086      	sub	sp, #24
 800e768:	af00      	add	r7, sp, #0
 800e76a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	2b00      	cmp	r3, #0
 800e774:	d046      	beq.n	800e804 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e776:	2308      	movs	r3, #8
 800e778:	425b      	negs	r3, r3
 800e77a:	697a      	ldr	r2, [r7, #20]
 800e77c:	4413      	add	r3, r2
 800e77e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e780:	697b      	ldr	r3, [r7, #20]
 800e782:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e784:	693b      	ldr	r3, [r7, #16]
 800e786:	685a      	ldr	r2, [r3, #4]
 800e788:	4b20      	ldr	r3, [pc, #128]	; (800e80c <vPortFree+0xa8>)
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	4013      	ands	r3, r2
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d109      	bne.n	800e7a6 <vPortFree+0x42>
 800e792:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e796:	f383 8811 	msr	BASEPRI, r3
 800e79a:	f3bf 8f6f 	isb	sy
 800e79e:	f3bf 8f4f 	dsb	sy
 800e7a2:	60fb      	str	r3, [r7, #12]
 800e7a4:	e7fe      	b.n	800e7a4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e7a6:	693b      	ldr	r3, [r7, #16]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d009      	beq.n	800e7c2 <vPortFree+0x5e>
 800e7ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7b2:	f383 8811 	msr	BASEPRI, r3
 800e7b6:	f3bf 8f6f 	isb	sy
 800e7ba:	f3bf 8f4f 	dsb	sy
 800e7be:	60bb      	str	r3, [r7, #8]
 800e7c0:	e7fe      	b.n	800e7c0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e7c2:	693b      	ldr	r3, [r7, #16]
 800e7c4:	685a      	ldr	r2, [r3, #4]
 800e7c6:	4b11      	ldr	r3, [pc, #68]	; (800e80c <vPortFree+0xa8>)
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	4013      	ands	r3, r2
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d019      	beq.n	800e804 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e7d0:	693b      	ldr	r3, [r7, #16]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d115      	bne.n	800e804 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e7d8:	693b      	ldr	r3, [r7, #16]
 800e7da:	685a      	ldr	r2, [r3, #4]
 800e7dc:	4b0b      	ldr	r3, [pc, #44]	; (800e80c <vPortFree+0xa8>)
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	43db      	mvns	r3, r3
 800e7e2:	401a      	ands	r2, r3
 800e7e4:	693b      	ldr	r3, [r7, #16]
 800e7e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e7e8:	f001 fe7a 	bl	80104e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e7ec:	693b      	ldr	r3, [r7, #16]
 800e7ee:	685a      	ldr	r2, [r3, #4]
 800e7f0:	4b07      	ldr	r3, [pc, #28]	; (800e810 <vPortFree+0xac>)
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	4413      	add	r3, r2
 800e7f6:	4a06      	ldr	r2, [pc, #24]	; (800e810 <vPortFree+0xac>)
 800e7f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e7fa:	6938      	ldr	r0, [r7, #16]
 800e7fc:	f000 f86e 	bl	800e8dc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800e800:	f001 feb4 	bl	801056c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e804:	bf00      	nop
 800e806:	3718      	adds	r7, #24
 800e808:	46bd      	mov	sp, r7
 800e80a:	bd80      	pop	{r7, pc}
 800e80c:	20026dc0 	.word	0x20026dc0
 800e810:	20026db8 	.word	0x20026db8

0800e814 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e814:	b480      	push	{r7}
 800e816:	b085      	sub	sp, #20
 800e818:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e81a:	4b29      	ldr	r3, [pc, #164]	; (800e8c0 <prvHeapInit+0xac>)
 800e81c:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e81e:	4b29      	ldr	r3, [pc, #164]	; (800e8c4 <prvHeapInit+0xb0>)
 800e820:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	f003 0307 	and.w	r3, r3, #7
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d00c      	beq.n	800e846 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	3307      	adds	r3, #7
 800e830:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	f023 0307 	bic.w	r3, r3, #7
 800e838:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e83a:	68ba      	ldr	r2, [r7, #8]
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	1ad3      	subs	r3, r2, r3
 800e840:	4a20      	ldr	r2, [pc, #128]	; (800e8c4 <prvHeapInit+0xb0>)
 800e842:	4413      	add	r3, r2
 800e844:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e84a:	4a1f      	ldr	r2, [pc, #124]	; (800e8c8 <prvHeapInit+0xb4>)
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e850:	4b1d      	ldr	r3, [pc, #116]	; (800e8c8 <prvHeapInit+0xb4>)
 800e852:	2200      	movs	r2, #0
 800e854:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	68ba      	ldr	r2, [r7, #8]
 800e85a:	4413      	add	r3, r2
 800e85c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e85e:	2208      	movs	r2, #8
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	1a9b      	subs	r3, r3, r2
 800e864:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	f023 0307 	bic.w	r3, r3, #7
 800e86c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	4a16      	ldr	r2, [pc, #88]	; (800e8cc <prvHeapInit+0xb8>)
 800e872:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e874:	4b15      	ldr	r3, [pc, #84]	; (800e8cc <prvHeapInit+0xb8>)
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	2200      	movs	r2, #0
 800e87a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e87c:	4b13      	ldr	r3, [pc, #76]	; (800e8cc <prvHeapInit+0xb8>)
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	2200      	movs	r2, #0
 800e882:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e888:	683b      	ldr	r3, [r7, #0]
 800e88a:	68fa      	ldr	r2, [r7, #12]
 800e88c:	1ad2      	subs	r2, r2, r3
 800e88e:	683b      	ldr	r3, [r7, #0]
 800e890:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e892:	4b0e      	ldr	r3, [pc, #56]	; (800e8cc <prvHeapInit+0xb8>)
 800e894:	681a      	ldr	r2, [r3, #0]
 800e896:	683b      	ldr	r3, [r7, #0]
 800e898:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e89a:	683b      	ldr	r3, [r7, #0]
 800e89c:	685b      	ldr	r3, [r3, #4]
 800e89e:	4a0c      	ldr	r2, [pc, #48]	; (800e8d0 <prvHeapInit+0xbc>)
 800e8a0:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e8a2:	683b      	ldr	r3, [r7, #0]
 800e8a4:	685b      	ldr	r3, [r3, #4]
 800e8a6:	4a0b      	ldr	r2, [pc, #44]	; (800e8d4 <prvHeapInit+0xc0>)
 800e8a8:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e8aa:	4b0b      	ldr	r3, [pc, #44]	; (800e8d8 <prvHeapInit+0xc4>)
 800e8ac:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e8b0:	601a      	str	r2, [r3, #0]
}
 800e8b2:	bf00      	nop
 800e8b4:	3714      	adds	r7, #20
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8bc:	4770      	bx	lr
 800e8be:	bf00      	nop
 800e8c0:	000249f0 	.word	0x000249f0
 800e8c4:	200023bc 	.word	0x200023bc
 800e8c8:	20026dac 	.word	0x20026dac
 800e8cc:	20026db4 	.word	0x20026db4
 800e8d0:	20026dbc 	.word	0x20026dbc
 800e8d4:	20026db8 	.word	0x20026db8
 800e8d8:	20026dc0 	.word	0x20026dc0

0800e8dc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e8dc:	b480      	push	{r7}
 800e8de:	b085      	sub	sp, #20
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e8e4:	4b28      	ldr	r3, [pc, #160]	; (800e988 <prvInsertBlockIntoFreeList+0xac>)
 800e8e6:	60fb      	str	r3, [r7, #12]
 800e8e8:	e002      	b.n	800e8f0 <prvInsertBlockIntoFreeList+0x14>
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	60fb      	str	r3, [r7, #12]
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	687a      	ldr	r2, [r7, #4]
 800e8f6:	429a      	cmp	r2, r3
 800e8f8:	d8f7      	bhi.n	800e8ea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	685b      	ldr	r3, [r3, #4]
 800e902:	68ba      	ldr	r2, [r7, #8]
 800e904:	4413      	add	r3, r2
 800e906:	687a      	ldr	r2, [r7, #4]
 800e908:	429a      	cmp	r2, r3
 800e90a:	d108      	bne.n	800e91e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	685a      	ldr	r2, [r3, #4]
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	685b      	ldr	r3, [r3, #4]
 800e914:	441a      	add	r2, r3
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	685b      	ldr	r3, [r3, #4]
 800e926:	68ba      	ldr	r2, [r7, #8]
 800e928:	441a      	add	r2, r3
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	429a      	cmp	r2, r3
 800e930:	d118      	bne.n	800e964 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	681a      	ldr	r2, [r3, #0]
 800e936:	4b15      	ldr	r3, [pc, #84]	; (800e98c <prvInsertBlockIntoFreeList+0xb0>)
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	429a      	cmp	r2, r3
 800e93c:	d00d      	beq.n	800e95a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	685a      	ldr	r2, [r3, #4]
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	685b      	ldr	r3, [r3, #4]
 800e948:	441a      	add	r2, r3
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	681a      	ldr	r2, [r3, #0]
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	601a      	str	r2, [r3, #0]
 800e958:	e008      	b.n	800e96c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e95a:	4b0c      	ldr	r3, [pc, #48]	; (800e98c <prvInsertBlockIntoFreeList+0xb0>)
 800e95c:	681a      	ldr	r2, [r3, #0]
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	601a      	str	r2, [r3, #0]
 800e962:	e003      	b.n	800e96c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	681a      	ldr	r2, [r3, #0]
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e96c:	68fa      	ldr	r2, [r7, #12]
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	429a      	cmp	r2, r3
 800e972:	d002      	beq.n	800e97a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	687a      	ldr	r2, [r7, #4]
 800e978:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e97a:	bf00      	nop
 800e97c:	3714      	adds	r7, #20
 800e97e:	46bd      	mov	sp, r7
 800e980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e984:	4770      	bx	lr
 800e986:	bf00      	nop
 800e988:	20026dac 	.word	0x20026dac
 800e98c:	20026db4 	.word	0x20026db4

0800e990 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e990:	b480      	push	{r7}
 800e992:	b083      	sub	sp, #12
 800e994:	af00      	add	r7, sp, #0
 800e996:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	f103 0208 	add.w	r2, r3, #8
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	f04f 32ff 	mov.w	r2, #4294967295
 800e9a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	f103 0208 	add.w	r2, r3, #8
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	f103 0208 	add.w	r2, r3, #8
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	2200      	movs	r2, #0
 800e9c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e9c4:	bf00      	nop
 800e9c6:	370c      	adds	r7, #12
 800e9c8:	46bd      	mov	sp, r7
 800e9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ce:	4770      	bx	lr

0800e9d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e9d0:	b480      	push	{r7}
 800e9d2:	b083      	sub	sp, #12
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	2200      	movs	r2, #0
 800e9dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e9de:	bf00      	nop
 800e9e0:	370c      	adds	r7, #12
 800e9e2:	46bd      	mov	sp, r7
 800e9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e8:	4770      	bx	lr

0800e9ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e9ea:	b480      	push	{r7}
 800e9ec:	b085      	sub	sp, #20
 800e9ee:	af00      	add	r7, sp, #0
 800e9f0:	6078      	str	r0, [r7, #4]
 800e9f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	685b      	ldr	r3, [r3, #4]
 800e9f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e9fa:	683b      	ldr	r3, [r7, #0]
 800e9fc:	68fa      	ldr	r2, [r7, #12]
 800e9fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	689a      	ldr	r2, [r3, #8]
 800ea04:	683b      	ldr	r3, [r7, #0]
 800ea06:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	689b      	ldr	r3, [r3, #8]
 800ea0c:	683a      	ldr	r2, [r7, #0]
 800ea0e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	683a      	ldr	r2, [r7, #0]
 800ea14:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800ea16:	683b      	ldr	r3, [r7, #0]
 800ea18:	687a      	ldr	r2, [r7, #4]
 800ea1a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	1c5a      	adds	r2, r3, #1
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	601a      	str	r2, [r3, #0]
}
 800ea26:	bf00      	nop
 800ea28:	3714      	adds	r7, #20
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea30:	4770      	bx	lr

0800ea32 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ea32:	b480      	push	{r7}
 800ea34:	b085      	sub	sp, #20
 800ea36:	af00      	add	r7, sp, #0
 800ea38:	6078      	str	r0, [r7, #4]
 800ea3a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ea3c:	683b      	ldr	r3, [r7, #0]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ea42:	68bb      	ldr	r3, [r7, #8]
 800ea44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea48:	d103      	bne.n	800ea52 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	691b      	ldr	r3, [r3, #16]
 800ea4e:	60fb      	str	r3, [r7, #12]
 800ea50:	e00c      	b.n	800ea6c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	3308      	adds	r3, #8
 800ea56:	60fb      	str	r3, [r7, #12]
 800ea58:	e002      	b.n	800ea60 <vListInsert+0x2e>
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	685b      	ldr	r3, [r3, #4]
 800ea5e:	60fb      	str	r3, [r7, #12]
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	685b      	ldr	r3, [r3, #4]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	68ba      	ldr	r2, [r7, #8]
 800ea68:	429a      	cmp	r2, r3
 800ea6a:	d2f6      	bcs.n	800ea5a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	685a      	ldr	r2, [r3, #4]
 800ea70:	683b      	ldr	r3, [r7, #0]
 800ea72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ea74:	683b      	ldr	r3, [r7, #0]
 800ea76:	685b      	ldr	r3, [r3, #4]
 800ea78:	683a      	ldr	r2, [r7, #0]
 800ea7a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ea7c:	683b      	ldr	r3, [r7, #0]
 800ea7e:	68fa      	ldr	r2, [r7, #12]
 800ea80:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	683a      	ldr	r2, [r7, #0]
 800ea86:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800ea88:	683b      	ldr	r3, [r7, #0]
 800ea8a:	687a      	ldr	r2, [r7, #4]
 800ea8c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	1c5a      	adds	r2, r3, #1
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	601a      	str	r2, [r3, #0]
}
 800ea98:	bf00      	nop
 800ea9a:	3714      	adds	r7, #20
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa2:	4770      	bx	lr

0800eaa4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800eaa4:	b480      	push	{r7}
 800eaa6:	b085      	sub	sp, #20
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	691b      	ldr	r3, [r3, #16]
 800eab0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	685b      	ldr	r3, [r3, #4]
 800eab6:	687a      	ldr	r2, [r7, #4]
 800eab8:	6892      	ldr	r2, [r2, #8]
 800eaba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	689b      	ldr	r3, [r3, #8]
 800eac0:	687a      	ldr	r2, [r7, #4]
 800eac2:	6852      	ldr	r2, [r2, #4]
 800eac4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	685b      	ldr	r3, [r3, #4]
 800eaca:	687a      	ldr	r2, [r7, #4]
 800eacc:	429a      	cmp	r2, r3
 800eace:	d103      	bne.n	800ead8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	689a      	ldr	r2, [r3, #8]
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	2200      	movs	r2, #0
 800eadc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	1e5a      	subs	r2, r3, #1
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	681b      	ldr	r3, [r3, #0]
}
 800eaec:	4618      	mov	r0, r3
 800eaee:	3714      	adds	r7, #20
 800eaf0:	46bd      	mov	sp, r7
 800eaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf6:	4770      	bx	lr

0800eaf8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800eaf8:	b480      	push	{r7}
 800eafa:	b085      	sub	sp, #20
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	60f8      	str	r0, [r7, #12]
 800eb00:	60b9      	str	r1, [r7, #8]
 800eb02:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	3b04      	subs	r3, #4
 800eb08:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800eb10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	3b04      	subs	r3, #4
 800eb16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800eb18:	68bb      	ldr	r3, [r7, #8]
 800eb1a:	f023 0201 	bic.w	r2, r3, #1
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	3b04      	subs	r3, #4
 800eb26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800eb28:	4a0c      	ldr	r2, [pc, #48]	; (800eb5c <pxPortInitialiseStack+0x64>)
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	3b14      	subs	r3, #20
 800eb32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800eb34:	687a      	ldr	r2, [r7, #4]
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	3b04      	subs	r3, #4
 800eb3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	f06f 0202 	mvn.w	r2, #2
 800eb46:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	3b20      	subs	r3, #32
 800eb4c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800eb4e:	68fb      	ldr	r3, [r7, #12]
}
 800eb50:	4618      	mov	r0, r3
 800eb52:	3714      	adds	r7, #20
 800eb54:	46bd      	mov	sp, r7
 800eb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb5a:	4770      	bx	lr
 800eb5c:	0800eb61 	.word	0x0800eb61

0800eb60 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800eb60:	b480      	push	{r7}
 800eb62:	b085      	sub	sp, #20
 800eb64:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800eb66:	2300      	movs	r3, #0
 800eb68:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800eb6a:	4b11      	ldr	r3, [pc, #68]	; (800ebb0 <prvTaskExitError+0x50>)
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb72:	d009      	beq.n	800eb88 <prvTaskExitError+0x28>
 800eb74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb78:	f383 8811 	msr	BASEPRI, r3
 800eb7c:	f3bf 8f6f 	isb	sy
 800eb80:	f3bf 8f4f 	dsb	sy
 800eb84:	60fb      	str	r3, [r7, #12]
 800eb86:	e7fe      	b.n	800eb86 <prvTaskExitError+0x26>
 800eb88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb8c:	f383 8811 	msr	BASEPRI, r3
 800eb90:	f3bf 8f6f 	isb	sy
 800eb94:	f3bf 8f4f 	dsb	sy
 800eb98:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800eb9a:	bf00      	nop
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d0fc      	beq.n	800eb9c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800eba2:	bf00      	nop
 800eba4:	3714      	adds	r7, #20
 800eba6:	46bd      	mov	sp, r7
 800eba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebac:	4770      	bx	lr
 800ebae:	bf00      	nop
 800ebb0:	20000084 	.word	0x20000084
	...

0800ebc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ebc0:	4b07      	ldr	r3, [pc, #28]	; (800ebe0 <pxCurrentTCBConst2>)
 800ebc2:	6819      	ldr	r1, [r3, #0]
 800ebc4:	6808      	ldr	r0, [r1, #0]
 800ebc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebca:	f380 8809 	msr	PSP, r0
 800ebce:	f3bf 8f6f 	isb	sy
 800ebd2:	f04f 0000 	mov.w	r0, #0
 800ebd6:	f380 8811 	msr	BASEPRI, r0
 800ebda:	4770      	bx	lr
 800ebdc:	f3af 8000 	nop.w

0800ebe0 <pxCurrentTCBConst2>:
 800ebe0:	20026dcc 	.word	0x20026dcc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ebe4:	bf00      	nop
 800ebe6:	bf00      	nop

0800ebe8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ebe8:	4808      	ldr	r0, [pc, #32]	; (800ec0c <prvPortStartFirstTask+0x24>)
 800ebea:	6800      	ldr	r0, [r0, #0]
 800ebec:	6800      	ldr	r0, [r0, #0]
 800ebee:	f380 8808 	msr	MSP, r0
 800ebf2:	f04f 0000 	mov.w	r0, #0
 800ebf6:	f380 8814 	msr	CONTROL, r0
 800ebfa:	b662      	cpsie	i
 800ebfc:	b661      	cpsie	f
 800ebfe:	f3bf 8f4f 	dsb	sy
 800ec02:	f3bf 8f6f 	isb	sy
 800ec06:	df00      	svc	0
 800ec08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ec0a:	bf00      	nop
 800ec0c:	e000ed08 	.word	0xe000ed08

0800ec10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ec10:	b580      	push	{r7, lr}
 800ec12:	b086      	sub	sp, #24
 800ec14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ec16:	4b44      	ldr	r3, [pc, #272]	; (800ed28 <xPortStartScheduler+0x118>)
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	4a44      	ldr	r2, [pc, #272]	; (800ed2c <xPortStartScheduler+0x11c>)
 800ec1c:	4293      	cmp	r3, r2
 800ec1e:	d109      	bne.n	800ec34 <xPortStartScheduler+0x24>
 800ec20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec24:	f383 8811 	msr	BASEPRI, r3
 800ec28:	f3bf 8f6f 	isb	sy
 800ec2c:	f3bf 8f4f 	dsb	sy
 800ec30:	613b      	str	r3, [r7, #16]
 800ec32:	e7fe      	b.n	800ec32 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ec34:	4b3c      	ldr	r3, [pc, #240]	; (800ed28 <xPortStartScheduler+0x118>)
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	4a3d      	ldr	r2, [pc, #244]	; (800ed30 <xPortStartScheduler+0x120>)
 800ec3a:	4293      	cmp	r3, r2
 800ec3c:	d109      	bne.n	800ec52 <xPortStartScheduler+0x42>
 800ec3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec42:	f383 8811 	msr	BASEPRI, r3
 800ec46:	f3bf 8f6f 	isb	sy
 800ec4a:	f3bf 8f4f 	dsb	sy
 800ec4e:	60fb      	str	r3, [r7, #12]
 800ec50:	e7fe      	b.n	800ec50 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ec52:	4b38      	ldr	r3, [pc, #224]	; (800ed34 <xPortStartScheduler+0x124>)
 800ec54:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ec56:	697b      	ldr	r3, [r7, #20]
 800ec58:	781b      	ldrb	r3, [r3, #0]
 800ec5a:	b2db      	uxtb	r3, r3
 800ec5c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ec5e:	697b      	ldr	r3, [r7, #20]
 800ec60:	22ff      	movs	r2, #255	; 0xff
 800ec62:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ec64:	697b      	ldr	r3, [r7, #20]
 800ec66:	781b      	ldrb	r3, [r3, #0]
 800ec68:	b2db      	uxtb	r3, r3
 800ec6a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ec6c:	78fb      	ldrb	r3, [r7, #3]
 800ec6e:	b2db      	uxtb	r3, r3
 800ec70:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ec74:	b2da      	uxtb	r2, r3
 800ec76:	4b30      	ldr	r3, [pc, #192]	; (800ed38 <xPortStartScheduler+0x128>)
 800ec78:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ec7a:	4b30      	ldr	r3, [pc, #192]	; (800ed3c <xPortStartScheduler+0x12c>)
 800ec7c:	2207      	movs	r2, #7
 800ec7e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ec80:	e009      	b.n	800ec96 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800ec82:	4b2e      	ldr	r3, [pc, #184]	; (800ed3c <xPortStartScheduler+0x12c>)
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	3b01      	subs	r3, #1
 800ec88:	4a2c      	ldr	r2, [pc, #176]	; (800ed3c <xPortStartScheduler+0x12c>)
 800ec8a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ec8c:	78fb      	ldrb	r3, [r7, #3]
 800ec8e:	b2db      	uxtb	r3, r3
 800ec90:	005b      	lsls	r3, r3, #1
 800ec92:	b2db      	uxtb	r3, r3
 800ec94:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ec96:	78fb      	ldrb	r3, [r7, #3]
 800ec98:	b2db      	uxtb	r3, r3
 800ec9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec9e:	2b80      	cmp	r3, #128	; 0x80
 800eca0:	d0ef      	beq.n	800ec82 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800eca2:	4b26      	ldr	r3, [pc, #152]	; (800ed3c <xPortStartScheduler+0x12c>)
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	f1c3 0307 	rsb	r3, r3, #7
 800ecaa:	2b04      	cmp	r3, #4
 800ecac:	d009      	beq.n	800ecc2 <xPortStartScheduler+0xb2>
 800ecae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecb2:	f383 8811 	msr	BASEPRI, r3
 800ecb6:	f3bf 8f6f 	isb	sy
 800ecba:	f3bf 8f4f 	dsb	sy
 800ecbe:	60bb      	str	r3, [r7, #8]
 800ecc0:	e7fe      	b.n	800ecc0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ecc2:	4b1e      	ldr	r3, [pc, #120]	; (800ed3c <xPortStartScheduler+0x12c>)
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	021b      	lsls	r3, r3, #8
 800ecc8:	4a1c      	ldr	r2, [pc, #112]	; (800ed3c <xPortStartScheduler+0x12c>)
 800ecca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800eccc:	4b1b      	ldr	r3, [pc, #108]	; (800ed3c <xPortStartScheduler+0x12c>)
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ecd4:	4a19      	ldr	r2, [pc, #100]	; (800ed3c <xPortStartScheduler+0x12c>)
 800ecd6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	b2da      	uxtb	r2, r3
 800ecdc:	697b      	ldr	r3, [r7, #20]
 800ecde:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ece0:	4b17      	ldr	r3, [pc, #92]	; (800ed40 <xPortStartScheduler+0x130>)
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	4a16      	ldr	r2, [pc, #88]	; (800ed40 <xPortStartScheduler+0x130>)
 800ece6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ecea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ecec:	4b14      	ldr	r3, [pc, #80]	; (800ed40 <xPortStartScheduler+0x130>)
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	4a13      	ldr	r2, [pc, #76]	; (800ed40 <xPortStartScheduler+0x130>)
 800ecf2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ecf6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ecf8:	f7f3 fb24 	bl	8002344 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ecfc:	4b11      	ldr	r3, [pc, #68]	; (800ed44 <xPortStartScheduler+0x134>)
 800ecfe:	2200      	movs	r2, #0
 800ed00:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ed02:	f000 f8d1 	bl	800eea8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ed06:	4b10      	ldr	r3, [pc, #64]	; (800ed48 <xPortStartScheduler+0x138>)
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	4a0f      	ldr	r2, [pc, #60]	; (800ed48 <xPortStartScheduler+0x138>)
 800ed0c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ed10:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ed12:	f7ff ff69 	bl	800ebe8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ed16:	f001 fdc1 	bl	801089c <vTaskSwitchContext>
	prvTaskExitError();
 800ed1a:	f7ff ff21 	bl	800eb60 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ed1e:	2300      	movs	r3, #0
}
 800ed20:	4618      	mov	r0, r3
 800ed22:	3718      	adds	r7, #24
 800ed24:	46bd      	mov	sp, r7
 800ed26:	bd80      	pop	{r7, pc}
 800ed28:	e000ed00 	.word	0xe000ed00
 800ed2c:	410fc271 	.word	0x410fc271
 800ed30:	410fc270 	.word	0x410fc270
 800ed34:	e000e400 	.word	0xe000e400
 800ed38:	20026dc4 	.word	0x20026dc4
 800ed3c:	20026dc8 	.word	0x20026dc8
 800ed40:	e000ed20 	.word	0xe000ed20
 800ed44:	20000084 	.word	0x20000084
 800ed48:	e000ef34 	.word	0xe000ef34

0800ed4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ed4c:	b480      	push	{r7}
 800ed4e:	b083      	sub	sp, #12
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed56:	f383 8811 	msr	BASEPRI, r3
 800ed5a:	f3bf 8f6f 	isb	sy
 800ed5e:	f3bf 8f4f 	dsb	sy
 800ed62:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ed64:	4b0e      	ldr	r3, [pc, #56]	; (800eda0 <vPortEnterCritical+0x54>)
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	3301      	adds	r3, #1
 800ed6a:	4a0d      	ldr	r2, [pc, #52]	; (800eda0 <vPortEnterCritical+0x54>)
 800ed6c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ed6e:	4b0c      	ldr	r3, [pc, #48]	; (800eda0 <vPortEnterCritical+0x54>)
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	2b01      	cmp	r3, #1
 800ed74:	d10e      	bne.n	800ed94 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ed76:	4b0b      	ldr	r3, [pc, #44]	; (800eda4 <vPortEnterCritical+0x58>)
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	b2db      	uxtb	r3, r3
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d009      	beq.n	800ed94 <vPortEnterCritical+0x48>
 800ed80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed84:	f383 8811 	msr	BASEPRI, r3
 800ed88:	f3bf 8f6f 	isb	sy
 800ed8c:	f3bf 8f4f 	dsb	sy
 800ed90:	603b      	str	r3, [r7, #0]
 800ed92:	e7fe      	b.n	800ed92 <vPortEnterCritical+0x46>
	}
}
 800ed94:	bf00      	nop
 800ed96:	370c      	adds	r7, #12
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed9e:	4770      	bx	lr
 800eda0:	20000084 	.word	0x20000084
 800eda4:	e000ed04 	.word	0xe000ed04

0800eda8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800eda8:	b480      	push	{r7}
 800edaa:	b083      	sub	sp, #12
 800edac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800edae:	4b11      	ldr	r3, [pc, #68]	; (800edf4 <vPortExitCritical+0x4c>)
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d109      	bne.n	800edca <vPortExitCritical+0x22>
 800edb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edba:	f383 8811 	msr	BASEPRI, r3
 800edbe:	f3bf 8f6f 	isb	sy
 800edc2:	f3bf 8f4f 	dsb	sy
 800edc6:	607b      	str	r3, [r7, #4]
 800edc8:	e7fe      	b.n	800edc8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800edca:	4b0a      	ldr	r3, [pc, #40]	; (800edf4 <vPortExitCritical+0x4c>)
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	3b01      	subs	r3, #1
 800edd0:	4a08      	ldr	r2, [pc, #32]	; (800edf4 <vPortExitCritical+0x4c>)
 800edd2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800edd4:	4b07      	ldr	r3, [pc, #28]	; (800edf4 <vPortExitCritical+0x4c>)
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d104      	bne.n	800ede6 <vPortExitCritical+0x3e>
 800eddc:	2300      	movs	r3, #0
 800edde:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ede0:	683b      	ldr	r3, [r7, #0]
 800ede2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800ede6:	bf00      	nop
 800ede8:	370c      	adds	r7, #12
 800edea:	46bd      	mov	sp, r7
 800edec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf0:	4770      	bx	lr
 800edf2:	bf00      	nop
 800edf4:	20000084 	.word	0x20000084
	...

0800ee00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ee00:	f3ef 8009 	mrs	r0, PSP
 800ee04:	f3bf 8f6f 	isb	sy
 800ee08:	4b15      	ldr	r3, [pc, #84]	; (800ee60 <pxCurrentTCBConst>)
 800ee0a:	681a      	ldr	r2, [r3, #0]
 800ee0c:	f01e 0f10 	tst.w	lr, #16
 800ee10:	bf08      	it	eq
 800ee12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ee16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee1a:	6010      	str	r0, [r2, #0]
 800ee1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ee20:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ee24:	f380 8811 	msr	BASEPRI, r0
 800ee28:	f3bf 8f4f 	dsb	sy
 800ee2c:	f3bf 8f6f 	isb	sy
 800ee30:	f001 fd34 	bl	801089c <vTaskSwitchContext>
 800ee34:	f04f 0000 	mov.w	r0, #0
 800ee38:	f380 8811 	msr	BASEPRI, r0
 800ee3c:	bc09      	pop	{r0, r3}
 800ee3e:	6819      	ldr	r1, [r3, #0]
 800ee40:	6808      	ldr	r0, [r1, #0]
 800ee42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee46:	f01e 0f10 	tst.w	lr, #16
 800ee4a:	bf08      	it	eq
 800ee4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ee50:	f380 8809 	msr	PSP, r0
 800ee54:	f3bf 8f6f 	isb	sy
 800ee58:	4770      	bx	lr
 800ee5a:	bf00      	nop
 800ee5c:	f3af 8000 	nop.w

0800ee60 <pxCurrentTCBConst>:
 800ee60:	20026dcc 	.word	0x20026dcc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ee64:	bf00      	nop
 800ee66:	bf00      	nop

0800ee68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b082      	sub	sp, #8
 800ee6c:	af00      	add	r7, sp, #0
	__asm volatile
 800ee6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee72:	f383 8811 	msr	BASEPRI, r3
 800ee76:	f3bf 8f6f 	isb	sy
 800ee7a:	f3bf 8f4f 	dsb	sy
 800ee7e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ee80:	f001 fc46 	bl	8010710 <xTaskIncrementTick>
 800ee84:	4603      	mov	r3, r0
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d003      	beq.n	800ee92 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ee8a:	4b06      	ldr	r3, [pc, #24]	; (800eea4 <SysTick_Handler+0x3c>)
 800ee8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee90:	601a      	str	r2, [r3, #0]
 800ee92:	2300      	movs	r3, #0
 800ee94:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ee96:	683b      	ldr	r3, [r7, #0]
 800ee98:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800ee9c:	bf00      	nop
 800ee9e:	3708      	adds	r7, #8
 800eea0:	46bd      	mov	sp, r7
 800eea2:	bd80      	pop	{r7, pc}
 800eea4:	e000ed04 	.word	0xe000ed04

0800eea8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800eea8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800eeb8 <vPortEnableVFP+0x10>
 800eeac:	6801      	ldr	r1, [r0, #0]
 800eeae:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800eeb2:	6001      	str	r1, [r0, #0]
 800eeb4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800eeb6:	bf00      	nop
 800eeb8:	e000ed88 	.word	0xe000ed88

0800eebc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800eebc:	b480      	push	{r7}
 800eebe:	b085      	sub	sp, #20
 800eec0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800eec2:	f3ef 8305 	mrs	r3, IPSR
 800eec6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	2b0f      	cmp	r3, #15
 800eecc:	d913      	bls.n	800eef6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800eece:	4a16      	ldr	r2, [pc, #88]	; (800ef28 <vPortValidateInterruptPriority+0x6c>)
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	4413      	add	r3, r2
 800eed4:	781b      	ldrb	r3, [r3, #0]
 800eed6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800eed8:	4b14      	ldr	r3, [pc, #80]	; (800ef2c <vPortValidateInterruptPriority+0x70>)
 800eeda:	781b      	ldrb	r3, [r3, #0]
 800eedc:	7afa      	ldrb	r2, [r7, #11]
 800eede:	429a      	cmp	r2, r3
 800eee0:	d209      	bcs.n	800eef6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800eee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eee6:	f383 8811 	msr	BASEPRI, r3
 800eeea:	f3bf 8f6f 	isb	sy
 800eeee:	f3bf 8f4f 	dsb	sy
 800eef2:	607b      	str	r3, [r7, #4]
 800eef4:	e7fe      	b.n	800eef4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800eef6:	4b0e      	ldr	r3, [pc, #56]	; (800ef30 <vPortValidateInterruptPriority+0x74>)
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800eefe:	4b0d      	ldr	r3, [pc, #52]	; (800ef34 <vPortValidateInterruptPriority+0x78>)
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	429a      	cmp	r2, r3
 800ef04:	d909      	bls.n	800ef1a <vPortValidateInterruptPriority+0x5e>
 800ef06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef0a:	f383 8811 	msr	BASEPRI, r3
 800ef0e:	f3bf 8f6f 	isb	sy
 800ef12:	f3bf 8f4f 	dsb	sy
 800ef16:	603b      	str	r3, [r7, #0]
 800ef18:	e7fe      	b.n	800ef18 <vPortValidateInterruptPriority+0x5c>
	}
 800ef1a:	bf00      	nop
 800ef1c:	3714      	adds	r7, #20
 800ef1e:	46bd      	mov	sp, r7
 800ef20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef24:	4770      	bx	lr
 800ef26:	bf00      	nop
 800ef28:	e000e3f0 	.word	0xe000e3f0
 800ef2c:	20026dc4 	.word	0x20026dc4
 800ef30:	e000ed0c 	.word	0xe000ed0c
 800ef34:	20026dc8 	.word	0x20026dc8

0800ef38 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ef38:	b580      	push	{r7, lr}
 800ef3a:	b084      	sub	sp, #16
 800ef3c:	af00      	add	r7, sp, #0
 800ef3e:	6078      	str	r0, [r7, #4]
 800ef40:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d109      	bne.n	800ef60 <xQueueGenericReset+0x28>
 800ef4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef50:	f383 8811 	msr	BASEPRI, r3
 800ef54:	f3bf 8f6f 	isb	sy
 800ef58:	f3bf 8f4f 	dsb	sy
 800ef5c:	60bb      	str	r3, [r7, #8]
 800ef5e:	e7fe      	b.n	800ef5e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800ef60:	f7ff fef4 	bl	800ed4c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	681a      	ldr	r2, [r3, #0]
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef6c:	68f9      	ldr	r1, [r7, #12]
 800ef6e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ef70:	fb01 f303 	mul.w	r3, r1, r3
 800ef74:	441a      	add	r2, r3
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	2200      	movs	r2, #0
 800ef7e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	681a      	ldr	r2, [r3, #0]
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	681a      	ldr	r2, [r3, #0]
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef90:	3b01      	subs	r3, #1
 800ef92:	68f9      	ldr	r1, [r7, #12]
 800ef94:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ef96:	fb01 f303 	mul.w	r3, r1, r3
 800ef9a:	441a      	add	r2, r3
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	22ff      	movs	r2, #255	; 0xff
 800efa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	22ff      	movs	r2, #255	; 0xff
 800efac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800efb0:	683b      	ldr	r3, [r7, #0]
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d114      	bne.n	800efe0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	691b      	ldr	r3, [r3, #16]
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d01a      	beq.n	800eff4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	3310      	adds	r3, #16
 800efc2:	4618      	mov	r0, r3
 800efc4:	f001 fd40 	bl	8010a48 <xTaskRemoveFromEventList>
 800efc8:	4603      	mov	r3, r0
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d012      	beq.n	800eff4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800efce:	4b0d      	ldr	r3, [pc, #52]	; (800f004 <xQueueGenericReset+0xcc>)
 800efd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800efd4:	601a      	str	r2, [r3, #0]
 800efd6:	f3bf 8f4f 	dsb	sy
 800efda:	f3bf 8f6f 	isb	sy
 800efde:	e009      	b.n	800eff4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	3310      	adds	r3, #16
 800efe4:	4618      	mov	r0, r3
 800efe6:	f7ff fcd3 	bl	800e990 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	3324      	adds	r3, #36	; 0x24
 800efee:	4618      	mov	r0, r3
 800eff0:	f7ff fcce 	bl	800e990 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800eff4:	f7ff fed8 	bl	800eda8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800eff8:	2301      	movs	r3, #1
}
 800effa:	4618      	mov	r0, r3
 800effc:	3710      	adds	r7, #16
 800effe:	46bd      	mov	sp, r7
 800f000:	bd80      	pop	{r7, pc}
 800f002:	bf00      	nop
 800f004:	e000ed04 	.word	0xe000ed04

0800f008 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f008:	b580      	push	{r7, lr}
 800f00a:	b08e      	sub	sp, #56	; 0x38
 800f00c:	af02      	add	r7, sp, #8
 800f00e:	60f8      	str	r0, [r7, #12]
 800f010:	60b9      	str	r1, [r7, #8]
 800f012:	607a      	str	r2, [r7, #4]
 800f014:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d109      	bne.n	800f030 <xQueueGenericCreateStatic+0x28>
 800f01c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f020:	f383 8811 	msr	BASEPRI, r3
 800f024:	f3bf 8f6f 	isb	sy
 800f028:	f3bf 8f4f 	dsb	sy
 800f02c:	62bb      	str	r3, [r7, #40]	; 0x28
 800f02e:	e7fe      	b.n	800f02e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f030:	683b      	ldr	r3, [r7, #0]
 800f032:	2b00      	cmp	r3, #0
 800f034:	d109      	bne.n	800f04a <xQueueGenericCreateStatic+0x42>
 800f036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f03a:	f383 8811 	msr	BASEPRI, r3
 800f03e:	f3bf 8f6f 	isb	sy
 800f042:	f3bf 8f4f 	dsb	sy
 800f046:	627b      	str	r3, [r7, #36]	; 0x24
 800f048:	e7fe      	b.n	800f048 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d002      	beq.n	800f056 <xQueueGenericCreateStatic+0x4e>
 800f050:	68bb      	ldr	r3, [r7, #8]
 800f052:	2b00      	cmp	r3, #0
 800f054:	d001      	beq.n	800f05a <xQueueGenericCreateStatic+0x52>
 800f056:	2301      	movs	r3, #1
 800f058:	e000      	b.n	800f05c <xQueueGenericCreateStatic+0x54>
 800f05a:	2300      	movs	r3, #0
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d109      	bne.n	800f074 <xQueueGenericCreateStatic+0x6c>
 800f060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f064:	f383 8811 	msr	BASEPRI, r3
 800f068:	f3bf 8f6f 	isb	sy
 800f06c:	f3bf 8f4f 	dsb	sy
 800f070:	623b      	str	r3, [r7, #32]
 800f072:	e7fe      	b.n	800f072 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	2b00      	cmp	r3, #0
 800f078:	d102      	bne.n	800f080 <xQueueGenericCreateStatic+0x78>
 800f07a:	68bb      	ldr	r3, [r7, #8]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d101      	bne.n	800f084 <xQueueGenericCreateStatic+0x7c>
 800f080:	2301      	movs	r3, #1
 800f082:	e000      	b.n	800f086 <xQueueGenericCreateStatic+0x7e>
 800f084:	2300      	movs	r3, #0
 800f086:	2b00      	cmp	r3, #0
 800f088:	d109      	bne.n	800f09e <xQueueGenericCreateStatic+0x96>
 800f08a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f08e:	f383 8811 	msr	BASEPRI, r3
 800f092:	f3bf 8f6f 	isb	sy
 800f096:	f3bf 8f4f 	dsb	sy
 800f09a:	61fb      	str	r3, [r7, #28]
 800f09c:	e7fe      	b.n	800f09c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f09e:	2350      	movs	r3, #80	; 0x50
 800f0a0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f0a2:	697b      	ldr	r3, [r7, #20]
 800f0a4:	2b50      	cmp	r3, #80	; 0x50
 800f0a6:	d009      	beq.n	800f0bc <xQueueGenericCreateStatic+0xb4>
 800f0a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0ac:	f383 8811 	msr	BASEPRI, r3
 800f0b0:	f3bf 8f6f 	isb	sy
 800f0b4:	f3bf 8f4f 	dsb	sy
 800f0b8:	61bb      	str	r3, [r7, #24]
 800f0ba:	e7fe      	b.n	800f0ba <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f0bc:	683b      	ldr	r3, [r7, #0]
 800f0be:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800f0c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d00d      	beq.n	800f0e2 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f0c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0c8:	2201      	movs	r2, #1
 800f0ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f0ce:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800f0d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0d4:	9300      	str	r3, [sp, #0]
 800f0d6:	4613      	mov	r3, r2
 800f0d8:	687a      	ldr	r2, [r7, #4]
 800f0da:	68b9      	ldr	r1, [r7, #8]
 800f0dc:	68f8      	ldr	r0, [r7, #12]
 800f0de:	f000 f842 	bl	800f166 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800f0e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	3730      	adds	r7, #48	; 0x30
 800f0e8:	46bd      	mov	sp, r7
 800f0ea:	bd80      	pop	{r7, pc}

0800f0ec <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f0ec:	b580      	push	{r7, lr}
 800f0ee:	b08a      	sub	sp, #40	; 0x28
 800f0f0:	af02      	add	r7, sp, #8
 800f0f2:	60f8      	str	r0, [r7, #12]
 800f0f4:	60b9      	str	r1, [r7, #8]
 800f0f6:	4613      	mov	r3, r2
 800f0f8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d109      	bne.n	800f114 <xQueueGenericCreate+0x28>
 800f100:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f104:	f383 8811 	msr	BASEPRI, r3
 800f108:	f3bf 8f6f 	isb	sy
 800f10c:	f3bf 8f4f 	dsb	sy
 800f110:	613b      	str	r3, [r7, #16]
 800f112:	e7fe      	b.n	800f112 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800f114:	68bb      	ldr	r3, [r7, #8]
 800f116:	2b00      	cmp	r3, #0
 800f118:	d102      	bne.n	800f120 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800f11a:	2300      	movs	r3, #0
 800f11c:	61fb      	str	r3, [r7, #28]
 800f11e:	e004      	b.n	800f12a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	68ba      	ldr	r2, [r7, #8]
 800f124:	fb02 f303 	mul.w	r3, r2, r3
 800f128:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800f12a:	69fb      	ldr	r3, [r7, #28]
 800f12c:	3350      	adds	r3, #80	; 0x50
 800f12e:	4618      	mov	r0, r3
 800f130:	f7ff fa52 	bl	800e5d8 <pvPortMalloc>
 800f134:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f136:	69bb      	ldr	r3, [r7, #24]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d00f      	beq.n	800f15c <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800f13c:	69bb      	ldr	r3, [r7, #24]
 800f13e:	3350      	adds	r3, #80	; 0x50
 800f140:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f142:	69bb      	ldr	r3, [r7, #24]
 800f144:	2200      	movs	r2, #0
 800f146:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f14a:	79fa      	ldrb	r2, [r7, #7]
 800f14c:	69bb      	ldr	r3, [r7, #24]
 800f14e:	9300      	str	r3, [sp, #0]
 800f150:	4613      	mov	r3, r2
 800f152:	697a      	ldr	r2, [r7, #20]
 800f154:	68b9      	ldr	r1, [r7, #8]
 800f156:	68f8      	ldr	r0, [r7, #12]
 800f158:	f000 f805 	bl	800f166 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800f15c:	69bb      	ldr	r3, [r7, #24]
	}
 800f15e:	4618      	mov	r0, r3
 800f160:	3720      	adds	r7, #32
 800f162:	46bd      	mov	sp, r7
 800f164:	bd80      	pop	{r7, pc}

0800f166 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f166:	b580      	push	{r7, lr}
 800f168:	b084      	sub	sp, #16
 800f16a:	af00      	add	r7, sp, #0
 800f16c:	60f8      	str	r0, [r7, #12]
 800f16e:	60b9      	str	r1, [r7, #8]
 800f170:	607a      	str	r2, [r7, #4]
 800f172:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f174:	68bb      	ldr	r3, [r7, #8]
 800f176:	2b00      	cmp	r3, #0
 800f178:	d103      	bne.n	800f182 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f17a:	69bb      	ldr	r3, [r7, #24]
 800f17c:	69ba      	ldr	r2, [r7, #24]
 800f17e:	601a      	str	r2, [r3, #0]
 800f180:	e002      	b.n	800f188 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f182:	69bb      	ldr	r3, [r7, #24]
 800f184:	687a      	ldr	r2, [r7, #4]
 800f186:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f188:	69bb      	ldr	r3, [r7, #24]
 800f18a:	68fa      	ldr	r2, [r7, #12]
 800f18c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f18e:	69bb      	ldr	r3, [r7, #24]
 800f190:	68ba      	ldr	r2, [r7, #8]
 800f192:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f194:	2101      	movs	r1, #1
 800f196:	69b8      	ldr	r0, [r7, #24]
 800f198:	f7ff fece 	bl	800ef38 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800f19c:	69bb      	ldr	r3, [r7, #24]
 800f19e:	78fa      	ldrb	r2, [r7, #3]
 800f1a0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f1a4:	bf00      	nop
 800f1a6:	3710      	adds	r7, #16
 800f1a8:	46bd      	mov	sp, r7
 800f1aa:	bd80      	pop	{r7, pc}

0800f1ac <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800f1ac:	b580      	push	{r7, lr}
 800f1ae:	b082      	sub	sp, #8
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d00e      	beq.n	800f1d8 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	2200      	movs	r2, #0
 800f1be:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	2200      	movs	r2, #0
 800f1c4:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	2200      	movs	r2, #0
 800f1ca:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800f1cc:	2300      	movs	r3, #0
 800f1ce:	2200      	movs	r2, #0
 800f1d0:	2100      	movs	r1, #0
 800f1d2:	6878      	ldr	r0, [r7, #4]
 800f1d4:	f000 f906 	bl	800f3e4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800f1d8:	bf00      	nop
 800f1da:	3708      	adds	r7, #8
 800f1dc:	46bd      	mov	sp, r7
 800f1de:	bd80      	pop	{r7, pc}

0800f1e0 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800f1e0:	b580      	push	{r7, lr}
 800f1e2:	b086      	sub	sp, #24
 800f1e4:	af00      	add	r7, sp, #0
 800f1e6:	4603      	mov	r3, r0
 800f1e8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f1ea:	2301      	movs	r3, #1
 800f1ec:	617b      	str	r3, [r7, #20]
 800f1ee:	2300      	movs	r3, #0
 800f1f0:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800f1f2:	79fb      	ldrb	r3, [r7, #7]
 800f1f4:	461a      	mov	r2, r3
 800f1f6:	6939      	ldr	r1, [r7, #16]
 800f1f8:	6978      	ldr	r0, [r7, #20]
 800f1fa:	f7ff ff77 	bl	800f0ec <xQueueGenericCreate>
 800f1fe:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800f200:	68f8      	ldr	r0, [r7, #12]
 800f202:	f7ff ffd3 	bl	800f1ac <prvInitialiseMutex>

		return pxNewQueue;
 800f206:	68fb      	ldr	r3, [r7, #12]
	}
 800f208:	4618      	mov	r0, r3
 800f20a:	3718      	adds	r7, #24
 800f20c:	46bd      	mov	sp, r7
 800f20e:	bd80      	pop	{r7, pc}

0800f210 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800f210:	b580      	push	{r7, lr}
 800f212:	b088      	sub	sp, #32
 800f214:	af02      	add	r7, sp, #8
 800f216:	4603      	mov	r3, r0
 800f218:	6039      	str	r1, [r7, #0]
 800f21a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f21c:	2301      	movs	r3, #1
 800f21e:	617b      	str	r3, [r7, #20]
 800f220:	2300      	movs	r3, #0
 800f222:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800f224:	79fb      	ldrb	r3, [r7, #7]
 800f226:	9300      	str	r3, [sp, #0]
 800f228:	683b      	ldr	r3, [r7, #0]
 800f22a:	2200      	movs	r2, #0
 800f22c:	6939      	ldr	r1, [r7, #16]
 800f22e:	6978      	ldr	r0, [r7, #20]
 800f230:	f7ff feea 	bl	800f008 <xQueueGenericCreateStatic>
 800f234:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800f236:	68f8      	ldr	r0, [r7, #12]
 800f238:	f7ff ffb8 	bl	800f1ac <prvInitialiseMutex>

		return pxNewQueue;
 800f23c:	68fb      	ldr	r3, [r7, #12]
	}
 800f23e:	4618      	mov	r0, r3
 800f240:	3718      	adds	r7, #24
 800f242:	46bd      	mov	sp, r7
 800f244:	bd80      	pop	{r7, pc}

0800f246 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800f246:	b590      	push	{r4, r7, lr}
 800f248:	b087      	sub	sp, #28
 800f24a:	af00      	add	r7, sp, #0
 800f24c:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800f252:	693b      	ldr	r3, [r7, #16]
 800f254:	2b00      	cmp	r3, #0
 800f256:	d109      	bne.n	800f26c <xQueueGiveMutexRecursive+0x26>
 800f258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f25c:	f383 8811 	msr	BASEPRI, r3
 800f260:	f3bf 8f6f 	isb	sy
 800f264:	f3bf 8f4f 	dsb	sy
 800f268:	60fb      	str	r3, [r7, #12]
 800f26a:	e7fe      	b.n	800f26a <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 800f26c:	693b      	ldr	r3, [r7, #16]
 800f26e:	685c      	ldr	r4, [r3, #4]
 800f270:	f001 fdfc 	bl	8010e6c <xTaskGetCurrentTaskHandle>
 800f274:	4603      	mov	r3, r0
 800f276:	429c      	cmp	r4, r3
 800f278:	d111      	bne.n	800f29e <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 800f27a:	693b      	ldr	r3, [r7, #16]
 800f27c:	68db      	ldr	r3, [r3, #12]
 800f27e:	1e5a      	subs	r2, r3, #1
 800f280:	693b      	ldr	r3, [r7, #16]
 800f282:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800f284:	693b      	ldr	r3, [r7, #16]
 800f286:	68db      	ldr	r3, [r3, #12]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d105      	bne.n	800f298 <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800f28c:	2300      	movs	r3, #0
 800f28e:	2200      	movs	r2, #0
 800f290:	2100      	movs	r1, #0
 800f292:	6938      	ldr	r0, [r7, #16]
 800f294:	f000 f8a6 	bl	800f3e4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800f298:	2301      	movs	r3, #1
 800f29a:	617b      	str	r3, [r7, #20]
 800f29c:	e001      	b.n	800f2a2 <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800f29e:	2300      	movs	r3, #0
 800f2a0:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800f2a2:	697b      	ldr	r3, [r7, #20]
	}
 800f2a4:	4618      	mov	r0, r3
 800f2a6:	371c      	adds	r7, #28
 800f2a8:	46bd      	mov	sp, r7
 800f2aa:	bd90      	pop	{r4, r7, pc}

0800f2ac <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800f2ac:	b590      	push	{r4, r7, lr}
 800f2ae:	b087      	sub	sp, #28
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	6078      	str	r0, [r7, #4]
 800f2b4:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800f2ba:	693b      	ldr	r3, [r7, #16]
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d109      	bne.n	800f2d4 <xQueueTakeMutexRecursive+0x28>
 800f2c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2c4:	f383 8811 	msr	BASEPRI, r3
 800f2c8:	f3bf 8f6f 	isb	sy
 800f2cc:	f3bf 8f4f 	dsb	sy
 800f2d0:	60fb      	str	r3, [r7, #12]
 800f2d2:	e7fe      	b.n	800f2d2 <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800f2d4:	693b      	ldr	r3, [r7, #16]
 800f2d6:	685c      	ldr	r4, [r3, #4]
 800f2d8:	f001 fdc8 	bl	8010e6c <xTaskGetCurrentTaskHandle>
 800f2dc:	4603      	mov	r3, r0
 800f2de:	429c      	cmp	r4, r3
 800f2e0:	d107      	bne.n	800f2f2 <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 800f2e2:	693b      	ldr	r3, [r7, #16]
 800f2e4:	68db      	ldr	r3, [r3, #12]
 800f2e6:	1c5a      	adds	r2, r3, #1
 800f2e8:	693b      	ldr	r3, [r7, #16]
 800f2ea:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800f2ec:	2301      	movs	r3, #1
 800f2ee:	617b      	str	r3, [r7, #20]
 800f2f0:	e00c      	b.n	800f30c <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800f2f2:	6839      	ldr	r1, [r7, #0]
 800f2f4:	6938      	ldr	r0, [r7, #16]
 800f2f6:	f000 fb69 	bl	800f9cc <xQueueSemaphoreTake>
 800f2fa:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800f2fc:	697b      	ldr	r3, [r7, #20]
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d004      	beq.n	800f30c <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 800f302:	693b      	ldr	r3, [r7, #16]
 800f304:	68db      	ldr	r3, [r3, #12]
 800f306:	1c5a      	adds	r2, r3, #1
 800f308:	693b      	ldr	r3, [r7, #16]
 800f30a:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800f30c:	697b      	ldr	r3, [r7, #20]
	}
 800f30e:	4618      	mov	r0, r3
 800f310:	371c      	adds	r7, #28
 800f312:	46bd      	mov	sp, r7
 800f314:	bd90      	pop	{r4, r7, pc}

0800f316 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800f316:	b580      	push	{r7, lr}
 800f318:	b08a      	sub	sp, #40	; 0x28
 800f31a:	af02      	add	r7, sp, #8
 800f31c:	60f8      	str	r0, [r7, #12]
 800f31e:	60b9      	str	r1, [r7, #8]
 800f320:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	2b00      	cmp	r3, #0
 800f326:	d109      	bne.n	800f33c <xQueueCreateCountingSemaphoreStatic+0x26>
 800f328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f32c:	f383 8811 	msr	BASEPRI, r3
 800f330:	f3bf 8f6f 	isb	sy
 800f334:	f3bf 8f4f 	dsb	sy
 800f338:	61bb      	str	r3, [r7, #24]
 800f33a:	e7fe      	b.n	800f33a <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800f33c:	68ba      	ldr	r2, [r7, #8]
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	429a      	cmp	r2, r3
 800f342:	d909      	bls.n	800f358 <xQueueCreateCountingSemaphoreStatic+0x42>
 800f344:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f348:	f383 8811 	msr	BASEPRI, r3
 800f34c:	f3bf 8f6f 	isb	sy
 800f350:	f3bf 8f4f 	dsb	sy
 800f354:	617b      	str	r3, [r7, #20]
 800f356:	e7fe      	b.n	800f356 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800f358:	2302      	movs	r3, #2
 800f35a:	9300      	str	r3, [sp, #0]
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	2200      	movs	r2, #0
 800f360:	2100      	movs	r1, #0
 800f362:	68f8      	ldr	r0, [r7, #12]
 800f364:	f7ff fe50 	bl	800f008 <xQueueGenericCreateStatic>
 800f368:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800f36a:	69fb      	ldr	r3, [r7, #28]
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d002      	beq.n	800f376 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800f370:	69fb      	ldr	r3, [r7, #28]
 800f372:	68ba      	ldr	r2, [r7, #8]
 800f374:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800f376:	69fb      	ldr	r3, [r7, #28]
	}
 800f378:	4618      	mov	r0, r3
 800f37a:	3720      	adds	r7, #32
 800f37c:	46bd      	mov	sp, r7
 800f37e:	bd80      	pop	{r7, pc}

0800f380 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800f380:	b580      	push	{r7, lr}
 800f382:	b086      	sub	sp, #24
 800f384:	af00      	add	r7, sp, #0
 800f386:	6078      	str	r0, [r7, #4]
 800f388:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d109      	bne.n	800f3a4 <xQueueCreateCountingSemaphore+0x24>
 800f390:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f394:	f383 8811 	msr	BASEPRI, r3
 800f398:	f3bf 8f6f 	isb	sy
 800f39c:	f3bf 8f4f 	dsb	sy
 800f3a0:	613b      	str	r3, [r7, #16]
 800f3a2:	e7fe      	b.n	800f3a2 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 800f3a4:	683a      	ldr	r2, [r7, #0]
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	429a      	cmp	r2, r3
 800f3aa:	d909      	bls.n	800f3c0 <xQueueCreateCountingSemaphore+0x40>
 800f3ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3b0:	f383 8811 	msr	BASEPRI, r3
 800f3b4:	f3bf 8f6f 	isb	sy
 800f3b8:	f3bf 8f4f 	dsb	sy
 800f3bc:	60fb      	str	r3, [r7, #12]
 800f3be:	e7fe      	b.n	800f3be <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800f3c0:	2202      	movs	r2, #2
 800f3c2:	2100      	movs	r1, #0
 800f3c4:	6878      	ldr	r0, [r7, #4]
 800f3c6:	f7ff fe91 	bl	800f0ec <xQueueGenericCreate>
 800f3ca:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800f3cc:	697b      	ldr	r3, [r7, #20]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d002      	beq.n	800f3d8 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800f3d2:	697b      	ldr	r3, [r7, #20]
 800f3d4:	683a      	ldr	r2, [r7, #0]
 800f3d6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800f3d8:	697b      	ldr	r3, [r7, #20]
	}
 800f3da:	4618      	mov	r0, r3
 800f3dc:	3718      	adds	r7, #24
 800f3de:	46bd      	mov	sp, r7
 800f3e0:	bd80      	pop	{r7, pc}
	...

0800f3e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f3e4:	b580      	push	{r7, lr}
 800f3e6:	b08e      	sub	sp, #56	; 0x38
 800f3e8:	af00      	add	r7, sp, #0
 800f3ea:	60f8      	str	r0, [r7, #12]
 800f3ec:	60b9      	str	r1, [r7, #8]
 800f3ee:	607a      	str	r2, [r7, #4]
 800f3f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f3f2:	2300      	movs	r3, #0
 800f3f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f3fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d109      	bne.n	800f414 <xQueueGenericSend+0x30>
 800f400:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f404:	f383 8811 	msr	BASEPRI, r3
 800f408:	f3bf 8f6f 	isb	sy
 800f40c:	f3bf 8f4f 	dsb	sy
 800f410:	62bb      	str	r3, [r7, #40]	; 0x28
 800f412:	e7fe      	b.n	800f412 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f414:	68bb      	ldr	r3, [r7, #8]
 800f416:	2b00      	cmp	r3, #0
 800f418:	d103      	bne.n	800f422 <xQueueGenericSend+0x3e>
 800f41a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f41c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d101      	bne.n	800f426 <xQueueGenericSend+0x42>
 800f422:	2301      	movs	r3, #1
 800f424:	e000      	b.n	800f428 <xQueueGenericSend+0x44>
 800f426:	2300      	movs	r3, #0
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d109      	bne.n	800f440 <xQueueGenericSend+0x5c>
 800f42c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f430:	f383 8811 	msr	BASEPRI, r3
 800f434:	f3bf 8f6f 	isb	sy
 800f438:	f3bf 8f4f 	dsb	sy
 800f43c:	627b      	str	r3, [r7, #36]	; 0x24
 800f43e:	e7fe      	b.n	800f43e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f440:	683b      	ldr	r3, [r7, #0]
 800f442:	2b02      	cmp	r3, #2
 800f444:	d103      	bne.n	800f44e <xQueueGenericSend+0x6a>
 800f446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f44a:	2b01      	cmp	r3, #1
 800f44c:	d101      	bne.n	800f452 <xQueueGenericSend+0x6e>
 800f44e:	2301      	movs	r3, #1
 800f450:	e000      	b.n	800f454 <xQueueGenericSend+0x70>
 800f452:	2300      	movs	r3, #0
 800f454:	2b00      	cmp	r3, #0
 800f456:	d109      	bne.n	800f46c <xQueueGenericSend+0x88>
 800f458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f45c:	f383 8811 	msr	BASEPRI, r3
 800f460:	f3bf 8f6f 	isb	sy
 800f464:	f3bf 8f4f 	dsb	sy
 800f468:	623b      	str	r3, [r7, #32]
 800f46a:	e7fe      	b.n	800f46a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f46c:	f001 fd0e 	bl	8010e8c <xTaskGetSchedulerState>
 800f470:	4603      	mov	r3, r0
 800f472:	2b00      	cmp	r3, #0
 800f474:	d102      	bne.n	800f47c <xQueueGenericSend+0x98>
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d101      	bne.n	800f480 <xQueueGenericSend+0x9c>
 800f47c:	2301      	movs	r3, #1
 800f47e:	e000      	b.n	800f482 <xQueueGenericSend+0x9e>
 800f480:	2300      	movs	r3, #0
 800f482:	2b00      	cmp	r3, #0
 800f484:	d109      	bne.n	800f49a <xQueueGenericSend+0xb6>
 800f486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f48a:	f383 8811 	msr	BASEPRI, r3
 800f48e:	f3bf 8f6f 	isb	sy
 800f492:	f3bf 8f4f 	dsb	sy
 800f496:	61fb      	str	r3, [r7, #28]
 800f498:	e7fe      	b.n	800f498 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f49a:	f7ff fc57 	bl	800ed4c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f49e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f4a6:	429a      	cmp	r2, r3
 800f4a8:	d302      	bcc.n	800f4b0 <xQueueGenericSend+0xcc>
 800f4aa:	683b      	ldr	r3, [r7, #0]
 800f4ac:	2b02      	cmp	r3, #2
 800f4ae:	d129      	bne.n	800f504 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f4b0:	683a      	ldr	r2, [r7, #0]
 800f4b2:	68b9      	ldr	r1, [r7, #8]
 800f4b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f4b6:	f000 fc48 	bl	800fd4a <prvCopyDataToQueue>
 800f4ba:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f4bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d010      	beq.n	800f4e6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f4c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4c6:	3324      	adds	r3, #36	; 0x24
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	f001 fabd 	bl	8010a48 <xTaskRemoveFromEventList>
 800f4ce:	4603      	mov	r3, r0
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d013      	beq.n	800f4fc <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f4d4:	4b3f      	ldr	r3, [pc, #252]	; (800f5d4 <xQueueGenericSend+0x1f0>)
 800f4d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f4da:	601a      	str	r2, [r3, #0]
 800f4dc:	f3bf 8f4f 	dsb	sy
 800f4e0:	f3bf 8f6f 	isb	sy
 800f4e4:	e00a      	b.n	800f4fc <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f4e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d007      	beq.n	800f4fc <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f4ec:	4b39      	ldr	r3, [pc, #228]	; (800f5d4 <xQueueGenericSend+0x1f0>)
 800f4ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f4f2:	601a      	str	r2, [r3, #0]
 800f4f4:	f3bf 8f4f 	dsb	sy
 800f4f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f4fc:	f7ff fc54 	bl	800eda8 <vPortExitCritical>
				return pdPASS;
 800f500:	2301      	movs	r3, #1
 800f502:	e063      	b.n	800f5cc <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	2b00      	cmp	r3, #0
 800f508:	d103      	bne.n	800f512 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f50a:	f7ff fc4d 	bl	800eda8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f50e:	2300      	movs	r3, #0
 800f510:	e05c      	b.n	800f5cc <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f514:	2b00      	cmp	r3, #0
 800f516:	d106      	bne.n	800f526 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f518:	f107 0314 	add.w	r3, r7, #20
 800f51c:	4618      	mov	r0, r3
 800f51e:	f001 faf7 	bl	8010b10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f522:	2301      	movs	r3, #1
 800f524:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f526:	f7ff fc3f 	bl	800eda8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f52a:	f000 ffd9 	bl	80104e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f52e:	f7ff fc0d 	bl	800ed4c <vPortEnterCritical>
 800f532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f534:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f538:	b25b      	sxtb	r3, r3
 800f53a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f53e:	d103      	bne.n	800f548 <xQueueGenericSend+0x164>
 800f540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f542:	2200      	movs	r2, #0
 800f544:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f54a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f54e:	b25b      	sxtb	r3, r3
 800f550:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f554:	d103      	bne.n	800f55e <xQueueGenericSend+0x17a>
 800f556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f558:	2200      	movs	r2, #0
 800f55a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f55e:	f7ff fc23 	bl	800eda8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f562:	1d3a      	adds	r2, r7, #4
 800f564:	f107 0314 	add.w	r3, r7, #20
 800f568:	4611      	mov	r1, r2
 800f56a:	4618      	mov	r0, r3
 800f56c:	f001 fae6 	bl	8010b3c <xTaskCheckForTimeOut>
 800f570:	4603      	mov	r3, r0
 800f572:	2b00      	cmp	r3, #0
 800f574:	d124      	bne.n	800f5c0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f576:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f578:	f000 fcdf 	bl	800ff3a <prvIsQueueFull>
 800f57c:	4603      	mov	r3, r0
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d018      	beq.n	800f5b4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f584:	3310      	adds	r3, #16
 800f586:	687a      	ldr	r2, [r7, #4]
 800f588:	4611      	mov	r1, r2
 800f58a:	4618      	mov	r0, r3
 800f58c:	f001 fa0e 	bl	80109ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f590:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f592:	f000 fc6a 	bl	800fe6a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f596:	f000 ffe9 	bl	801056c <xTaskResumeAll>
 800f59a:	4603      	mov	r3, r0
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	f47f af7c 	bne.w	800f49a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800f5a2:	4b0c      	ldr	r3, [pc, #48]	; (800f5d4 <xQueueGenericSend+0x1f0>)
 800f5a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f5a8:	601a      	str	r2, [r3, #0]
 800f5aa:	f3bf 8f4f 	dsb	sy
 800f5ae:	f3bf 8f6f 	isb	sy
 800f5b2:	e772      	b.n	800f49a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f5b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f5b6:	f000 fc58 	bl	800fe6a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f5ba:	f000 ffd7 	bl	801056c <xTaskResumeAll>
 800f5be:	e76c      	b.n	800f49a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f5c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f5c2:	f000 fc52 	bl	800fe6a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f5c6:	f000 ffd1 	bl	801056c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f5ca:	2300      	movs	r3, #0
		}
	}
}
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	3738      	adds	r7, #56	; 0x38
 800f5d0:	46bd      	mov	sp, r7
 800f5d2:	bd80      	pop	{r7, pc}
 800f5d4:	e000ed04 	.word	0xe000ed04

0800f5d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f5d8:	b580      	push	{r7, lr}
 800f5da:	b08e      	sub	sp, #56	; 0x38
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	60f8      	str	r0, [r7, #12]
 800f5e0:	60b9      	str	r1, [r7, #8]
 800f5e2:	607a      	str	r2, [r7, #4]
 800f5e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f5ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d109      	bne.n	800f604 <xQueueGenericSendFromISR+0x2c>
 800f5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5f4:	f383 8811 	msr	BASEPRI, r3
 800f5f8:	f3bf 8f6f 	isb	sy
 800f5fc:	f3bf 8f4f 	dsb	sy
 800f600:	627b      	str	r3, [r7, #36]	; 0x24
 800f602:	e7fe      	b.n	800f602 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f604:	68bb      	ldr	r3, [r7, #8]
 800f606:	2b00      	cmp	r3, #0
 800f608:	d103      	bne.n	800f612 <xQueueGenericSendFromISR+0x3a>
 800f60a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f60c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d101      	bne.n	800f616 <xQueueGenericSendFromISR+0x3e>
 800f612:	2301      	movs	r3, #1
 800f614:	e000      	b.n	800f618 <xQueueGenericSendFromISR+0x40>
 800f616:	2300      	movs	r3, #0
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d109      	bne.n	800f630 <xQueueGenericSendFromISR+0x58>
 800f61c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f620:	f383 8811 	msr	BASEPRI, r3
 800f624:	f3bf 8f6f 	isb	sy
 800f628:	f3bf 8f4f 	dsb	sy
 800f62c:	623b      	str	r3, [r7, #32]
 800f62e:	e7fe      	b.n	800f62e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f630:	683b      	ldr	r3, [r7, #0]
 800f632:	2b02      	cmp	r3, #2
 800f634:	d103      	bne.n	800f63e <xQueueGenericSendFromISR+0x66>
 800f636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f63a:	2b01      	cmp	r3, #1
 800f63c:	d101      	bne.n	800f642 <xQueueGenericSendFromISR+0x6a>
 800f63e:	2301      	movs	r3, #1
 800f640:	e000      	b.n	800f644 <xQueueGenericSendFromISR+0x6c>
 800f642:	2300      	movs	r3, #0
 800f644:	2b00      	cmp	r3, #0
 800f646:	d109      	bne.n	800f65c <xQueueGenericSendFromISR+0x84>
 800f648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f64c:	f383 8811 	msr	BASEPRI, r3
 800f650:	f3bf 8f6f 	isb	sy
 800f654:	f3bf 8f4f 	dsb	sy
 800f658:	61fb      	str	r3, [r7, #28]
 800f65a:	e7fe      	b.n	800f65a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f65c:	f7ff fc2e 	bl	800eebc <vPortValidateInterruptPriority>
	__asm volatile
 800f660:	f3ef 8211 	mrs	r2, BASEPRI
 800f664:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f668:	f383 8811 	msr	BASEPRI, r3
 800f66c:	f3bf 8f6f 	isb	sy
 800f670:	f3bf 8f4f 	dsb	sy
 800f674:	61ba      	str	r2, [r7, #24]
 800f676:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800f678:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f67a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f67c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f67e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f684:	429a      	cmp	r2, r3
 800f686:	d302      	bcc.n	800f68e <xQueueGenericSendFromISR+0xb6>
 800f688:	683b      	ldr	r3, [r7, #0]
 800f68a:	2b02      	cmp	r3, #2
 800f68c:	d12c      	bne.n	800f6e8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f68e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f690:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f694:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f698:	683a      	ldr	r2, [r7, #0]
 800f69a:	68b9      	ldr	r1, [r7, #8]
 800f69c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f69e:	f000 fb54 	bl	800fd4a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f6a2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800f6a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6aa:	d112      	bne.n	800f6d2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f6ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d016      	beq.n	800f6e2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f6b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6b6:	3324      	adds	r3, #36	; 0x24
 800f6b8:	4618      	mov	r0, r3
 800f6ba:	f001 f9c5 	bl	8010a48 <xTaskRemoveFromEventList>
 800f6be:	4603      	mov	r3, r0
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d00e      	beq.n	800f6e2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d00b      	beq.n	800f6e2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	2201      	movs	r2, #1
 800f6ce:	601a      	str	r2, [r3, #0]
 800f6d0:	e007      	b.n	800f6e2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f6d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f6d6:	3301      	adds	r3, #1
 800f6d8:	b2db      	uxtb	r3, r3
 800f6da:	b25a      	sxtb	r2, r3
 800f6dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f6e2:	2301      	movs	r3, #1
 800f6e4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800f6e6:	e001      	b.n	800f6ec <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f6e8:	2300      	movs	r3, #0
 800f6ea:	637b      	str	r3, [r7, #52]	; 0x34
 800f6ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6ee:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f6f0:	693b      	ldr	r3, [r7, #16]
 800f6f2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f6f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	3738      	adds	r7, #56	; 0x38
 800f6fc:	46bd      	mov	sp, r7
 800f6fe:	bd80      	pop	{r7, pc}

0800f700 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f700:	b580      	push	{r7, lr}
 800f702:	b08e      	sub	sp, #56	; 0x38
 800f704:	af00      	add	r7, sp, #0
 800f706:	6078      	str	r0, [r7, #4]
 800f708:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800f70e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f710:	2b00      	cmp	r3, #0
 800f712:	d109      	bne.n	800f728 <xQueueGiveFromISR+0x28>
	__asm volatile
 800f714:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f718:	f383 8811 	msr	BASEPRI, r3
 800f71c:	f3bf 8f6f 	isb	sy
 800f720:	f3bf 8f4f 	dsb	sy
 800f724:	623b      	str	r3, [r7, #32]
 800f726:	e7fe      	b.n	800f726 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f72a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d009      	beq.n	800f744 <xQueueGiveFromISR+0x44>
 800f730:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f734:	f383 8811 	msr	BASEPRI, r3
 800f738:	f3bf 8f6f 	isb	sy
 800f73c:	f3bf 8f4f 	dsb	sy
 800f740:	61fb      	str	r3, [r7, #28]
 800f742:	e7fe      	b.n	800f742 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800f744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d103      	bne.n	800f754 <xQueueGiveFromISR+0x54>
 800f74c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f74e:	685b      	ldr	r3, [r3, #4]
 800f750:	2b00      	cmp	r3, #0
 800f752:	d101      	bne.n	800f758 <xQueueGiveFromISR+0x58>
 800f754:	2301      	movs	r3, #1
 800f756:	e000      	b.n	800f75a <xQueueGiveFromISR+0x5a>
 800f758:	2300      	movs	r3, #0
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d109      	bne.n	800f772 <xQueueGiveFromISR+0x72>
 800f75e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f762:	f383 8811 	msr	BASEPRI, r3
 800f766:	f3bf 8f6f 	isb	sy
 800f76a:	f3bf 8f4f 	dsb	sy
 800f76e:	61bb      	str	r3, [r7, #24]
 800f770:	e7fe      	b.n	800f770 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f772:	f7ff fba3 	bl	800eebc <vPortValidateInterruptPriority>
	__asm volatile
 800f776:	f3ef 8211 	mrs	r2, BASEPRI
 800f77a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f77e:	f383 8811 	msr	BASEPRI, r3
 800f782:	f3bf 8f6f 	isb	sy
 800f786:	f3bf 8f4f 	dsb	sy
 800f78a:	617a      	str	r2, [r7, #20]
 800f78c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800f78e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f790:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f796:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800f798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f79a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f79c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f79e:	429a      	cmp	r2, r3
 800f7a0:	d22b      	bcs.n	800f7fa <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f7a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f7ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7ae:	1c5a      	adds	r2, r3, #1
 800f7b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7b2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f7b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f7b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7bc:	d112      	bne.n	800f7e4 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f7be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d016      	beq.n	800f7f4 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f7c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7c8:	3324      	adds	r3, #36	; 0x24
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	f001 f93c 	bl	8010a48 <xTaskRemoveFromEventList>
 800f7d0:	4603      	mov	r3, r0
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d00e      	beq.n	800f7f4 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f7d6:	683b      	ldr	r3, [r7, #0]
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d00b      	beq.n	800f7f4 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f7dc:	683b      	ldr	r3, [r7, #0]
 800f7de:	2201      	movs	r2, #1
 800f7e0:	601a      	str	r2, [r3, #0]
 800f7e2:	e007      	b.n	800f7f4 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f7e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f7e8:	3301      	adds	r3, #1
 800f7ea:	b2db      	uxtb	r3, r3
 800f7ec:	b25a      	sxtb	r2, r3
 800f7ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f7f4:	2301      	movs	r3, #1
 800f7f6:	637b      	str	r3, [r7, #52]	; 0x34
 800f7f8:	e001      	b.n	800f7fe <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f7fa:	2300      	movs	r3, #0
 800f7fc:	637b      	str	r3, [r7, #52]	; 0x34
 800f7fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f800:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f80a:	4618      	mov	r0, r3
 800f80c:	3738      	adds	r7, #56	; 0x38
 800f80e:	46bd      	mov	sp, r7
 800f810:	bd80      	pop	{r7, pc}
	...

0800f814 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f814:	b580      	push	{r7, lr}
 800f816:	b08c      	sub	sp, #48	; 0x30
 800f818:	af00      	add	r7, sp, #0
 800f81a:	60f8      	str	r0, [r7, #12]
 800f81c:	60b9      	str	r1, [r7, #8]
 800f81e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f820:	2300      	movs	r3, #0
 800f822:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d109      	bne.n	800f842 <xQueueReceive+0x2e>
	__asm volatile
 800f82e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f832:	f383 8811 	msr	BASEPRI, r3
 800f836:	f3bf 8f6f 	isb	sy
 800f83a:	f3bf 8f4f 	dsb	sy
 800f83e:	623b      	str	r3, [r7, #32]
 800f840:	e7fe      	b.n	800f840 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f842:	68bb      	ldr	r3, [r7, #8]
 800f844:	2b00      	cmp	r3, #0
 800f846:	d103      	bne.n	800f850 <xQueueReceive+0x3c>
 800f848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f84a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d101      	bne.n	800f854 <xQueueReceive+0x40>
 800f850:	2301      	movs	r3, #1
 800f852:	e000      	b.n	800f856 <xQueueReceive+0x42>
 800f854:	2300      	movs	r3, #0
 800f856:	2b00      	cmp	r3, #0
 800f858:	d109      	bne.n	800f86e <xQueueReceive+0x5a>
 800f85a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f85e:	f383 8811 	msr	BASEPRI, r3
 800f862:	f3bf 8f6f 	isb	sy
 800f866:	f3bf 8f4f 	dsb	sy
 800f86a:	61fb      	str	r3, [r7, #28]
 800f86c:	e7fe      	b.n	800f86c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f86e:	f001 fb0d 	bl	8010e8c <xTaskGetSchedulerState>
 800f872:	4603      	mov	r3, r0
 800f874:	2b00      	cmp	r3, #0
 800f876:	d102      	bne.n	800f87e <xQueueReceive+0x6a>
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d101      	bne.n	800f882 <xQueueReceive+0x6e>
 800f87e:	2301      	movs	r3, #1
 800f880:	e000      	b.n	800f884 <xQueueReceive+0x70>
 800f882:	2300      	movs	r3, #0
 800f884:	2b00      	cmp	r3, #0
 800f886:	d109      	bne.n	800f89c <xQueueReceive+0x88>
 800f888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f88c:	f383 8811 	msr	BASEPRI, r3
 800f890:	f3bf 8f6f 	isb	sy
 800f894:	f3bf 8f4f 	dsb	sy
 800f898:	61bb      	str	r3, [r7, #24]
 800f89a:	e7fe      	b.n	800f89a <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800f89c:	f7ff fa56 	bl	800ed4c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f8a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8a4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f8a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d01f      	beq.n	800f8ec <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f8ac:	68b9      	ldr	r1, [r7, #8]
 800f8ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f8b0:	f000 fab5 	bl	800fe1e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8b6:	1e5a      	subs	r2, r3, #1
 800f8b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8ba:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f8bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8be:	691b      	ldr	r3, [r3, #16]
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d00f      	beq.n	800f8e4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f8c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8c6:	3310      	adds	r3, #16
 800f8c8:	4618      	mov	r0, r3
 800f8ca:	f001 f8bd 	bl	8010a48 <xTaskRemoveFromEventList>
 800f8ce:	4603      	mov	r3, r0
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d007      	beq.n	800f8e4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f8d4:	4b3c      	ldr	r3, [pc, #240]	; (800f9c8 <xQueueReceive+0x1b4>)
 800f8d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f8da:	601a      	str	r2, [r3, #0]
 800f8dc:	f3bf 8f4f 	dsb	sy
 800f8e0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f8e4:	f7ff fa60 	bl	800eda8 <vPortExitCritical>
				return pdPASS;
 800f8e8:	2301      	movs	r3, #1
 800f8ea:	e069      	b.n	800f9c0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d103      	bne.n	800f8fa <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f8f2:	f7ff fa59 	bl	800eda8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	e062      	b.n	800f9c0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f8fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d106      	bne.n	800f90e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f900:	f107 0310 	add.w	r3, r7, #16
 800f904:	4618      	mov	r0, r3
 800f906:	f001 f903 	bl	8010b10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f90a:	2301      	movs	r3, #1
 800f90c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f90e:	f7ff fa4b 	bl	800eda8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f912:	f000 fde5 	bl	80104e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f916:	f7ff fa19 	bl	800ed4c <vPortEnterCritical>
 800f91a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f91c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f920:	b25b      	sxtb	r3, r3
 800f922:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f926:	d103      	bne.n	800f930 <xQueueReceive+0x11c>
 800f928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f92a:	2200      	movs	r2, #0
 800f92c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f932:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f936:	b25b      	sxtb	r3, r3
 800f938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f93c:	d103      	bne.n	800f946 <xQueueReceive+0x132>
 800f93e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f940:	2200      	movs	r2, #0
 800f942:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f946:	f7ff fa2f 	bl	800eda8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f94a:	1d3a      	adds	r2, r7, #4
 800f94c:	f107 0310 	add.w	r3, r7, #16
 800f950:	4611      	mov	r1, r2
 800f952:	4618      	mov	r0, r3
 800f954:	f001 f8f2 	bl	8010b3c <xTaskCheckForTimeOut>
 800f958:	4603      	mov	r3, r0
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d123      	bne.n	800f9a6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f95e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f960:	f000 fad5 	bl	800ff0e <prvIsQueueEmpty>
 800f964:	4603      	mov	r3, r0
 800f966:	2b00      	cmp	r3, #0
 800f968:	d017      	beq.n	800f99a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f96a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f96c:	3324      	adds	r3, #36	; 0x24
 800f96e:	687a      	ldr	r2, [r7, #4]
 800f970:	4611      	mov	r1, r2
 800f972:	4618      	mov	r0, r3
 800f974:	f001 f81a 	bl	80109ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f978:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f97a:	f000 fa76 	bl	800fe6a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f97e:	f000 fdf5 	bl	801056c <xTaskResumeAll>
 800f982:	4603      	mov	r3, r0
 800f984:	2b00      	cmp	r3, #0
 800f986:	d189      	bne.n	800f89c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800f988:	4b0f      	ldr	r3, [pc, #60]	; (800f9c8 <xQueueReceive+0x1b4>)
 800f98a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f98e:	601a      	str	r2, [r3, #0]
 800f990:	f3bf 8f4f 	dsb	sy
 800f994:	f3bf 8f6f 	isb	sy
 800f998:	e780      	b.n	800f89c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f99a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f99c:	f000 fa65 	bl	800fe6a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f9a0:	f000 fde4 	bl	801056c <xTaskResumeAll>
 800f9a4:	e77a      	b.n	800f89c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f9a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f9a8:	f000 fa5f 	bl	800fe6a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f9ac:	f000 fdde 	bl	801056c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f9b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f9b2:	f000 faac 	bl	800ff0e <prvIsQueueEmpty>
 800f9b6:	4603      	mov	r3, r0
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	f43f af6f 	beq.w	800f89c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f9be:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800f9c0:	4618      	mov	r0, r3
 800f9c2:	3730      	adds	r7, #48	; 0x30
 800f9c4:	46bd      	mov	sp, r7
 800f9c6:	bd80      	pop	{r7, pc}
 800f9c8:	e000ed04 	.word	0xe000ed04

0800f9cc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800f9cc:	b580      	push	{r7, lr}
 800f9ce:	b08e      	sub	sp, #56	; 0x38
 800f9d0:	af00      	add	r7, sp, #0
 800f9d2:	6078      	str	r0, [r7, #4]
 800f9d4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800f9d6:	2300      	movs	r3, #0
 800f9d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800f9de:	2300      	movs	r3, #0
 800f9e0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f9e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d109      	bne.n	800f9fc <xQueueSemaphoreTake+0x30>
 800f9e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9ec:	f383 8811 	msr	BASEPRI, r3
 800f9f0:	f3bf 8f6f 	isb	sy
 800f9f4:	f3bf 8f4f 	dsb	sy
 800f9f8:	623b      	str	r3, [r7, #32]
 800f9fa:	e7fe      	b.n	800f9fa <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f9fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d009      	beq.n	800fa18 <xQueueSemaphoreTake+0x4c>
 800fa04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa08:	f383 8811 	msr	BASEPRI, r3
 800fa0c:	f3bf 8f6f 	isb	sy
 800fa10:	f3bf 8f4f 	dsb	sy
 800fa14:	61fb      	str	r3, [r7, #28]
 800fa16:	e7fe      	b.n	800fa16 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fa18:	f001 fa38 	bl	8010e8c <xTaskGetSchedulerState>
 800fa1c:	4603      	mov	r3, r0
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d102      	bne.n	800fa28 <xQueueSemaphoreTake+0x5c>
 800fa22:	683b      	ldr	r3, [r7, #0]
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d101      	bne.n	800fa2c <xQueueSemaphoreTake+0x60>
 800fa28:	2301      	movs	r3, #1
 800fa2a:	e000      	b.n	800fa2e <xQueueSemaphoreTake+0x62>
 800fa2c:	2300      	movs	r3, #0
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d109      	bne.n	800fa46 <xQueueSemaphoreTake+0x7a>
 800fa32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa36:	f383 8811 	msr	BASEPRI, r3
 800fa3a:	f3bf 8f6f 	isb	sy
 800fa3e:	f3bf 8f4f 	dsb	sy
 800fa42:	61bb      	str	r3, [r7, #24]
 800fa44:	e7fe      	b.n	800fa44 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800fa46:	f7ff f981 	bl	800ed4c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800fa4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa4e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800fa50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d024      	beq.n	800faa0 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800fa56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa58:	1e5a      	subs	r2, r3, #1
 800fa5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa5c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fa5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d104      	bne.n	800fa70 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800fa66:	f001 fb8d 	bl	8011184 <pvTaskIncrementMutexHeldCount>
 800fa6a:	4602      	mov	r2, r0
 800fa6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa6e:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fa70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa72:	691b      	ldr	r3, [r3, #16]
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d00f      	beq.n	800fa98 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fa78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa7a:	3310      	adds	r3, #16
 800fa7c:	4618      	mov	r0, r3
 800fa7e:	f000 ffe3 	bl	8010a48 <xTaskRemoveFromEventList>
 800fa82:	4603      	mov	r3, r0
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d007      	beq.n	800fa98 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800fa88:	4b53      	ldr	r3, [pc, #332]	; (800fbd8 <xQueueSemaphoreTake+0x20c>)
 800fa8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa8e:	601a      	str	r2, [r3, #0]
 800fa90:	f3bf 8f4f 	dsb	sy
 800fa94:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800fa98:	f7ff f986 	bl	800eda8 <vPortExitCritical>
				return pdPASS;
 800fa9c:	2301      	movs	r3, #1
 800fa9e:	e096      	b.n	800fbce <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800faa0:	683b      	ldr	r3, [r7, #0]
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d110      	bne.n	800fac8 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800faa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d009      	beq.n	800fac0 <xQueueSemaphoreTake+0xf4>
 800faac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fab0:	f383 8811 	msr	BASEPRI, r3
 800fab4:	f3bf 8f6f 	isb	sy
 800fab8:	f3bf 8f4f 	dsb	sy
 800fabc:	617b      	str	r3, [r7, #20]
 800fabe:	e7fe      	b.n	800fabe <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800fac0:	f7ff f972 	bl	800eda8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800fac4:	2300      	movs	r3, #0
 800fac6:	e082      	b.n	800fbce <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800faca:	2b00      	cmp	r3, #0
 800facc:	d106      	bne.n	800fadc <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800face:	f107 030c 	add.w	r3, r7, #12
 800fad2:	4618      	mov	r0, r3
 800fad4:	f001 f81c 	bl	8010b10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fad8:	2301      	movs	r3, #1
 800fada:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fadc:	f7ff f964 	bl	800eda8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fae0:	f000 fcfe 	bl	80104e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fae4:	f7ff f932 	bl	800ed4c <vPortEnterCritical>
 800fae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800faee:	b25b      	sxtb	r3, r3
 800faf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800faf4:	d103      	bne.n	800fafe <xQueueSemaphoreTake+0x132>
 800faf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faf8:	2200      	movs	r2, #0
 800fafa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fafe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fb04:	b25b      	sxtb	r3, r3
 800fb06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb0a:	d103      	bne.n	800fb14 <xQueueSemaphoreTake+0x148>
 800fb0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb0e:	2200      	movs	r2, #0
 800fb10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fb14:	f7ff f948 	bl	800eda8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fb18:	463a      	mov	r2, r7
 800fb1a:	f107 030c 	add.w	r3, r7, #12
 800fb1e:	4611      	mov	r1, r2
 800fb20:	4618      	mov	r0, r3
 800fb22:	f001 f80b 	bl	8010b3c <xTaskCheckForTimeOut>
 800fb26:	4603      	mov	r3, r0
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d132      	bne.n	800fb92 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fb2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fb2e:	f000 f9ee 	bl	800ff0e <prvIsQueueEmpty>
 800fb32:	4603      	mov	r3, r0
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d026      	beq.n	800fb86 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fb38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d109      	bne.n	800fb54 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800fb40:	f7ff f904 	bl	800ed4c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800fb44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb46:	685b      	ldr	r3, [r3, #4]
 800fb48:	4618      	mov	r0, r3
 800fb4a:	f001 f9bd 	bl	8010ec8 <xTaskPriorityInherit>
 800fb4e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800fb50:	f7ff f92a 	bl	800eda8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fb54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb56:	3324      	adds	r3, #36	; 0x24
 800fb58:	683a      	ldr	r2, [r7, #0]
 800fb5a:	4611      	mov	r1, r2
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	f000 ff25 	bl	80109ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fb62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fb64:	f000 f981 	bl	800fe6a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fb68:	f000 fd00 	bl	801056c <xTaskResumeAll>
 800fb6c:	4603      	mov	r3, r0
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	f47f af69 	bne.w	800fa46 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800fb74:	4b18      	ldr	r3, [pc, #96]	; (800fbd8 <xQueueSemaphoreTake+0x20c>)
 800fb76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fb7a:	601a      	str	r2, [r3, #0]
 800fb7c:	f3bf 8f4f 	dsb	sy
 800fb80:	f3bf 8f6f 	isb	sy
 800fb84:	e75f      	b.n	800fa46 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800fb86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fb88:	f000 f96f 	bl	800fe6a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fb8c:	f000 fcee 	bl	801056c <xTaskResumeAll>
 800fb90:	e759      	b.n	800fa46 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800fb92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fb94:	f000 f969 	bl	800fe6a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fb98:	f000 fce8 	bl	801056c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fb9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fb9e:	f000 f9b6 	bl	800ff0e <prvIsQueueEmpty>
 800fba2:	4603      	mov	r3, r0
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	f43f af4e 	beq.w	800fa46 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800fbaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d00d      	beq.n	800fbcc <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800fbb0:	f7ff f8cc 	bl	800ed4c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800fbb4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fbb6:	f000 f8b0 	bl	800fd1a <prvGetDisinheritPriorityAfterTimeout>
 800fbba:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800fbbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbbe:	685b      	ldr	r3, [r3, #4]
 800fbc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fbc2:	4618      	mov	r0, r3
 800fbc4:	f001 fa5a 	bl	801107c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800fbc8:	f7ff f8ee 	bl	800eda8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fbcc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800fbce:	4618      	mov	r0, r3
 800fbd0:	3738      	adds	r7, #56	; 0x38
 800fbd2:	46bd      	mov	sp, r7
 800fbd4:	bd80      	pop	{r7, pc}
 800fbd6:	bf00      	nop
 800fbd8:	e000ed04 	.word	0xe000ed04

0800fbdc <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800fbdc:	b580      	push	{r7, lr}
 800fbde:	b08e      	sub	sp, #56	; 0x38
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	60f8      	str	r0, [r7, #12]
 800fbe4:	60b9      	str	r1, [r7, #8]
 800fbe6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800fbec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d109      	bne.n	800fc06 <xQueueReceiveFromISR+0x2a>
 800fbf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbf6:	f383 8811 	msr	BASEPRI, r3
 800fbfa:	f3bf 8f6f 	isb	sy
 800fbfe:	f3bf 8f4f 	dsb	sy
 800fc02:	623b      	str	r3, [r7, #32]
 800fc04:	e7fe      	b.n	800fc04 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fc06:	68bb      	ldr	r3, [r7, #8]
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d103      	bne.n	800fc14 <xQueueReceiveFromISR+0x38>
 800fc0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d101      	bne.n	800fc18 <xQueueReceiveFromISR+0x3c>
 800fc14:	2301      	movs	r3, #1
 800fc16:	e000      	b.n	800fc1a <xQueueReceiveFromISR+0x3e>
 800fc18:	2300      	movs	r3, #0
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d109      	bne.n	800fc32 <xQueueReceiveFromISR+0x56>
 800fc1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc22:	f383 8811 	msr	BASEPRI, r3
 800fc26:	f3bf 8f6f 	isb	sy
 800fc2a:	f3bf 8f4f 	dsb	sy
 800fc2e:	61fb      	str	r3, [r7, #28]
 800fc30:	e7fe      	b.n	800fc30 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fc32:	f7ff f943 	bl	800eebc <vPortValidateInterruptPriority>
	__asm volatile
 800fc36:	f3ef 8211 	mrs	r2, BASEPRI
 800fc3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc3e:	f383 8811 	msr	BASEPRI, r3
 800fc42:	f3bf 8f6f 	isb	sy
 800fc46:	f3bf 8f4f 	dsb	sy
 800fc4a:	61ba      	str	r2, [r7, #24]
 800fc4c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800fc4e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fc50:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fc52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc56:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fc58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d02f      	beq.n	800fcbe <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800fc5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fc64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800fc68:	68b9      	ldr	r1, [r7, #8]
 800fc6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fc6c:	f000 f8d7 	bl	800fe1e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800fc70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc72:	1e5a      	subs	r2, r3, #1
 800fc74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc76:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800fc78:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800fc7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc80:	d112      	bne.n	800fca8 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fc82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc84:	691b      	ldr	r3, [r3, #16]
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d016      	beq.n	800fcb8 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fc8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc8c:	3310      	adds	r3, #16
 800fc8e:	4618      	mov	r0, r3
 800fc90:	f000 feda 	bl	8010a48 <xTaskRemoveFromEventList>
 800fc94:	4603      	mov	r3, r0
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d00e      	beq.n	800fcb8 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d00b      	beq.n	800fcb8 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	2201      	movs	r2, #1
 800fca4:	601a      	str	r2, [r3, #0]
 800fca6:	e007      	b.n	800fcb8 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800fca8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fcac:	3301      	adds	r3, #1
 800fcae:	b2db      	uxtb	r3, r3
 800fcb0:	b25a      	sxtb	r2, r3
 800fcb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800fcb8:	2301      	movs	r3, #1
 800fcba:	637b      	str	r3, [r7, #52]	; 0x34
 800fcbc:	e001      	b.n	800fcc2 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800fcbe:	2300      	movs	r3, #0
 800fcc0:	637b      	str	r3, [r7, #52]	; 0x34
 800fcc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcc4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800fcc6:	693b      	ldr	r3, [r7, #16]
 800fcc8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800fcce:	4618      	mov	r0, r3
 800fcd0:	3738      	adds	r7, #56	; 0x38
 800fcd2:	46bd      	mov	sp, r7
 800fcd4:	bd80      	pop	{r7, pc}

0800fcd6 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800fcd6:	b580      	push	{r7, lr}
 800fcd8:	b084      	sub	sp, #16
 800fcda:	af00      	add	r7, sp, #0
 800fcdc:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d109      	bne.n	800fcfc <vQueueDelete+0x26>
	__asm volatile
 800fce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcec:	f383 8811 	msr	BASEPRI, r3
 800fcf0:	f3bf 8f6f 	isb	sy
 800fcf4:	f3bf 8f4f 	dsb	sy
 800fcf8:	60bb      	str	r3, [r7, #8]
 800fcfa:	e7fe      	b.n	800fcfa <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800fcfc:	68f8      	ldr	r0, [r7, #12]
 800fcfe:	f000 f95d 	bl	800ffbc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d102      	bne.n	800fd12 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 800fd0c:	68f8      	ldr	r0, [r7, #12]
 800fd0e:	f7fe fd29 	bl	800e764 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800fd12:	bf00      	nop
 800fd14:	3710      	adds	r7, #16
 800fd16:	46bd      	mov	sp, r7
 800fd18:	bd80      	pop	{r7, pc}

0800fd1a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800fd1a:	b480      	push	{r7}
 800fd1c:	b085      	sub	sp, #20
 800fd1e:	af00      	add	r7, sp, #0
 800fd20:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d006      	beq.n	800fd38 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800fd34:	60fb      	str	r3, [r7, #12]
 800fd36:	e001      	b.n	800fd3c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800fd38:	2300      	movs	r3, #0
 800fd3a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800fd3c:	68fb      	ldr	r3, [r7, #12]
	}
 800fd3e:	4618      	mov	r0, r3
 800fd40:	3714      	adds	r7, #20
 800fd42:	46bd      	mov	sp, r7
 800fd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd48:	4770      	bx	lr

0800fd4a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800fd4a:	b580      	push	{r7, lr}
 800fd4c:	b086      	sub	sp, #24
 800fd4e:	af00      	add	r7, sp, #0
 800fd50:	60f8      	str	r0, [r7, #12]
 800fd52:	60b9      	str	r1, [r7, #8]
 800fd54:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800fd56:	2300      	movs	r3, #0
 800fd58:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd5e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d10d      	bne.n	800fd84 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d14d      	bne.n	800fe0c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	685b      	ldr	r3, [r3, #4]
 800fd74:	4618      	mov	r0, r3
 800fd76:	f001 f915 	bl	8010fa4 <xTaskPriorityDisinherit>
 800fd7a:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	2200      	movs	r2, #0
 800fd80:	605a      	str	r2, [r3, #4]
 800fd82:	e043      	b.n	800fe0c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d119      	bne.n	800fdbe <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	6898      	ldr	r0, [r3, #8]
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd92:	461a      	mov	r2, r3
 800fd94:	68b9      	ldr	r1, [r7, #8]
 800fd96:	f005 f9e9 	bl	801516c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	689a      	ldr	r2, [r3, #8]
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fda2:	441a      	add	r2, r3
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	689a      	ldr	r2, [r3, #8]
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	685b      	ldr	r3, [r3, #4]
 800fdb0:	429a      	cmp	r2, r3
 800fdb2:	d32b      	bcc.n	800fe0c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	681a      	ldr	r2, [r3, #0]
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	609a      	str	r2, [r3, #8]
 800fdbc:	e026      	b.n	800fe0c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	68d8      	ldr	r0, [r3, #12]
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fdc6:	461a      	mov	r2, r3
 800fdc8:	68b9      	ldr	r1, [r7, #8]
 800fdca:	f005 f9cf 	bl	801516c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	68da      	ldr	r2, [r3, #12]
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fdd6:	425b      	negs	r3, r3
 800fdd8:	441a      	add	r2, r3
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	68da      	ldr	r2, [r3, #12]
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	429a      	cmp	r2, r3
 800fde8:	d207      	bcs.n	800fdfa <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	685a      	ldr	r2, [r3, #4]
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fdf2:	425b      	negs	r3, r3
 800fdf4:	441a      	add	r2, r3
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	2b02      	cmp	r3, #2
 800fdfe:	d105      	bne.n	800fe0c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fe00:	693b      	ldr	r3, [r7, #16]
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d002      	beq.n	800fe0c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800fe06:	693b      	ldr	r3, [r7, #16]
 800fe08:	3b01      	subs	r3, #1
 800fe0a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fe0c:	693b      	ldr	r3, [r7, #16]
 800fe0e:	1c5a      	adds	r2, r3, #1
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800fe14:	697b      	ldr	r3, [r7, #20]
}
 800fe16:	4618      	mov	r0, r3
 800fe18:	3718      	adds	r7, #24
 800fe1a:	46bd      	mov	sp, r7
 800fe1c:	bd80      	pop	{r7, pc}

0800fe1e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800fe1e:	b580      	push	{r7, lr}
 800fe20:	b082      	sub	sp, #8
 800fe22:	af00      	add	r7, sp, #0
 800fe24:	6078      	str	r0, [r7, #4]
 800fe26:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d018      	beq.n	800fe62 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	68da      	ldr	r2, [r3, #12]
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe38:	441a      	add	r2, r3
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	68da      	ldr	r2, [r3, #12]
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	685b      	ldr	r3, [r3, #4]
 800fe46:	429a      	cmp	r2, r3
 800fe48:	d303      	bcc.n	800fe52 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	681a      	ldr	r2, [r3, #0]
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	68d9      	ldr	r1, [r3, #12]
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe5a:	461a      	mov	r2, r3
 800fe5c:	6838      	ldr	r0, [r7, #0]
 800fe5e:	f005 f985 	bl	801516c <memcpy>
	}
}
 800fe62:	bf00      	nop
 800fe64:	3708      	adds	r7, #8
 800fe66:	46bd      	mov	sp, r7
 800fe68:	bd80      	pop	{r7, pc}

0800fe6a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800fe6a:	b580      	push	{r7, lr}
 800fe6c:	b084      	sub	sp, #16
 800fe6e:	af00      	add	r7, sp, #0
 800fe70:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800fe72:	f7fe ff6b 	bl	800ed4c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fe7c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fe7e:	e011      	b.n	800fea4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d012      	beq.n	800feae <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	3324      	adds	r3, #36	; 0x24
 800fe8c:	4618      	mov	r0, r3
 800fe8e:	f000 fddb 	bl	8010a48 <xTaskRemoveFromEventList>
 800fe92:	4603      	mov	r3, r0
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d001      	beq.n	800fe9c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800fe98:	f000 feb0 	bl	8010bfc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800fe9c:	7bfb      	ldrb	r3, [r7, #15]
 800fe9e:	3b01      	subs	r3, #1
 800fea0:	b2db      	uxtb	r3, r3
 800fea2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fea4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	dce9      	bgt.n	800fe80 <prvUnlockQueue+0x16>
 800feac:	e000      	b.n	800feb0 <prvUnlockQueue+0x46>
					break;
 800feae:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	22ff      	movs	r2, #255	; 0xff
 800feb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800feb8:	f7fe ff76 	bl	800eda8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800febc:	f7fe ff46 	bl	800ed4c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fec6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fec8:	e011      	b.n	800feee <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	691b      	ldr	r3, [r3, #16]
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d012      	beq.n	800fef8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	3310      	adds	r3, #16
 800fed6:	4618      	mov	r0, r3
 800fed8:	f000 fdb6 	bl	8010a48 <xTaskRemoveFromEventList>
 800fedc:	4603      	mov	r3, r0
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d001      	beq.n	800fee6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800fee2:	f000 fe8b 	bl	8010bfc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800fee6:	7bbb      	ldrb	r3, [r7, #14]
 800fee8:	3b01      	subs	r3, #1
 800feea:	b2db      	uxtb	r3, r3
 800feec:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800feee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	dce9      	bgt.n	800feca <prvUnlockQueue+0x60>
 800fef6:	e000      	b.n	800fefa <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800fef8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	22ff      	movs	r2, #255	; 0xff
 800fefe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ff02:	f7fe ff51 	bl	800eda8 <vPortExitCritical>
}
 800ff06:	bf00      	nop
 800ff08:	3710      	adds	r7, #16
 800ff0a:	46bd      	mov	sp, r7
 800ff0c:	bd80      	pop	{r7, pc}

0800ff0e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ff0e:	b580      	push	{r7, lr}
 800ff10:	b084      	sub	sp, #16
 800ff12:	af00      	add	r7, sp, #0
 800ff14:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ff16:	f7fe ff19 	bl	800ed4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d102      	bne.n	800ff28 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ff22:	2301      	movs	r3, #1
 800ff24:	60fb      	str	r3, [r7, #12]
 800ff26:	e001      	b.n	800ff2c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ff28:	2300      	movs	r3, #0
 800ff2a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ff2c:	f7fe ff3c 	bl	800eda8 <vPortExitCritical>

	return xReturn;
 800ff30:	68fb      	ldr	r3, [r7, #12]
}
 800ff32:	4618      	mov	r0, r3
 800ff34:	3710      	adds	r7, #16
 800ff36:	46bd      	mov	sp, r7
 800ff38:	bd80      	pop	{r7, pc}

0800ff3a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ff3a:	b580      	push	{r7, lr}
 800ff3c:	b084      	sub	sp, #16
 800ff3e:	af00      	add	r7, sp, #0
 800ff40:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ff42:	f7fe ff03 	bl	800ed4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ff4e:	429a      	cmp	r2, r3
 800ff50:	d102      	bne.n	800ff58 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ff52:	2301      	movs	r3, #1
 800ff54:	60fb      	str	r3, [r7, #12]
 800ff56:	e001      	b.n	800ff5c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ff58:	2300      	movs	r3, #0
 800ff5a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ff5c:	f7fe ff24 	bl	800eda8 <vPortExitCritical>

	return xReturn;
 800ff60:	68fb      	ldr	r3, [r7, #12]
}
 800ff62:	4618      	mov	r0, r3
 800ff64:	3710      	adds	r7, #16
 800ff66:	46bd      	mov	sp, r7
 800ff68:	bd80      	pop	{r7, pc}
	...

0800ff6c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ff6c:	b480      	push	{r7}
 800ff6e:	b085      	sub	sp, #20
 800ff70:	af00      	add	r7, sp, #0
 800ff72:	6078      	str	r0, [r7, #4]
 800ff74:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ff76:	2300      	movs	r3, #0
 800ff78:	60fb      	str	r3, [r7, #12]
 800ff7a:	e014      	b.n	800ffa6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ff7c:	4a0e      	ldr	r2, [pc, #56]	; (800ffb8 <vQueueAddToRegistry+0x4c>)
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d10b      	bne.n	800ffa0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ff88:	490b      	ldr	r1, [pc, #44]	; (800ffb8 <vQueueAddToRegistry+0x4c>)
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	683a      	ldr	r2, [r7, #0]
 800ff8e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ff92:	4a09      	ldr	r2, [pc, #36]	; (800ffb8 <vQueueAddToRegistry+0x4c>)
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	00db      	lsls	r3, r3, #3
 800ff98:	4413      	add	r3, r2
 800ff9a:	687a      	ldr	r2, [r7, #4]
 800ff9c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ff9e:	e005      	b.n	800ffac <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	3301      	adds	r3, #1
 800ffa4:	60fb      	str	r3, [r7, #12]
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	2b0b      	cmp	r3, #11
 800ffaa:	d9e7      	bls.n	800ff7c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ffac:	bf00      	nop
 800ffae:	3714      	adds	r7, #20
 800ffb0:	46bd      	mov	sp, r7
 800ffb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb6:	4770      	bx	lr
 800ffb8:	20028554 	.word	0x20028554

0800ffbc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800ffbc:	b480      	push	{r7}
 800ffbe:	b085      	sub	sp, #20
 800ffc0:	af00      	add	r7, sp, #0
 800ffc2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ffc4:	2300      	movs	r3, #0
 800ffc6:	60fb      	str	r3, [r7, #12]
 800ffc8:	e016      	b.n	800fff8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ffca:	4a10      	ldr	r2, [pc, #64]	; (801000c <vQueueUnregisterQueue+0x50>)
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	00db      	lsls	r3, r3, #3
 800ffd0:	4413      	add	r3, r2
 800ffd2:	685b      	ldr	r3, [r3, #4]
 800ffd4:	687a      	ldr	r2, [r7, #4]
 800ffd6:	429a      	cmp	r2, r3
 800ffd8:	d10b      	bne.n	800fff2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800ffda:	4a0c      	ldr	r2, [pc, #48]	; (801000c <vQueueUnregisterQueue+0x50>)
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	2100      	movs	r1, #0
 800ffe0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800ffe4:	4a09      	ldr	r2, [pc, #36]	; (801000c <vQueueUnregisterQueue+0x50>)
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	00db      	lsls	r3, r3, #3
 800ffea:	4413      	add	r3, r2
 800ffec:	2200      	movs	r2, #0
 800ffee:	605a      	str	r2, [r3, #4]
				break;
 800fff0:	e005      	b.n	800fffe <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	3301      	adds	r3, #1
 800fff6:	60fb      	str	r3, [r7, #12]
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	2b0b      	cmp	r3, #11
 800fffc:	d9e5      	bls.n	800ffca <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800fffe:	bf00      	nop
 8010000:	3714      	adds	r7, #20
 8010002:	46bd      	mov	sp, r7
 8010004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010008:	4770      	bx	lr
 801000a:	bf00      	nop
 801000c:	20028554 	.word	0x20028554

08010010 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010010:	b580      	push	{r7, lr}
 8010012:	b086      	sub	sp, #24
 8010014:	af00      	add	r7, sp, #0
 8010016:	60f8      	str	r0, [r7, #12]
 8010018:	60b9      	str	r1, [r7, #8]
 801001a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8010020:	f7fe fe94 	bl	800ed4c <vPortEnterCritical>
 8010024:	697b      	ldr	r3, [r7, #20]
 8010026:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801002a:	b25b      	sxtb	r3, r3
 801002c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010030:	d103      	bne.n	801003a <vQueueWaitForMessageRestricted+0x2a>
 8010032:	697b      	ldr	r3, [r7, #20]
 8010034:	2200      	movs	r2, #0
 8010036:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801003a:	697b      	ldr	r3, [r7, #20]
 801003c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010040:	b25b      	sxtb	r3, r3
 8010042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010046:	d103      	bne.n	8010050 <vQueueWaitForMessageRestricted+0x40>
 8010048:	697b      	ldr	r3, [r7, #20]
 801004a:	2200      	movs	r2, #0
 801004c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010050:	f7fe feaa 	bl	800eda8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8010054:	697b      	ldr	r3, [r7, #20]
 8010056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010058:	2b00      	cmp	r3, #0
 801005a:	d106      	bne.n	801006a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801005c:	697b      	ldr	r3, [r7, #20]
 801005e:	3324      	adds	r3, #36	; 0x24
 8010060:	687a      	ldr	r2, [r7, #4]
 8010062:	68b9      	ldr	r1, [r7, #8]
 8010064:	4618      	mov	r0, r3
 8010066:	f000 fcc5 	bl	80109f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801006a:	6978      	ldr	r0, [r7, #20]
 801006c:	f7ff fefd 	bl	800fe6a <prvUnlockQueue>
	}
 8010070:	bf00      	nop
 8010072:	3718      	adds	r7, #24
 8010074:	46bd      	mov	sp, r7
 8010076:	bd80      	pop	{r7, pc}

08010078 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010078:	b580      	push	{r7, lr}
 801007a:	b08e      	sub	sp, #56	; 0x38
 801007c:	af04      	add	r7, sp, #16
 801007e:	60f8      	str	r0, [r7, #12]
 8010080:	60b9      	str	r1, [r7, #8]
 8010082:	607a      	str	r2, [r7, #4]
 8010084:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010088:	2b00      	cmp	r3, #0
 801008a:	d109      	bne.n	80100a0 <xTaskCreateStatic+0x28>
 801008c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010090:	f383 8811 	msr	BASEPRI, r3
 8010094:	f3bf 8f6f 	isb	sy
 8010098:	f3bf 8f4f 	dsb	sy
 801009c:	623b      	str	r3, [r7, #32]
 801009e:	e7fe      	b.n	801009e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80100a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d109      	bne.n	80100ba <xTaskCreateStatic+0x42>
 80100a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100aa:	f383 8811 	msr	BASEPRI, r3
 80100ae:	f3bf 8f6f 	isb	sy
 80100b2:	f3bf 8f4f 	dsb	sy
 80100b6:	61fb      	str	r3, [r7, #28]
 80100b8:	e7fe      	b.n	80100b8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80100ba:	2364      	movs	r3, #100	; 0x64
 80100bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80100be:	693b      	ldr	r3, [r7, #16]
 80100c0:	2b64      	cmp	r3, #100	; 0x64
 80100c2:	d009      	beq.n	80100d8 <xTaskCreateStatic+0x60>
 80100c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100c8:	f383 8811 	msr	BASEPRI, r3
 80100cc:	f3bf 8f6f 	isb	sy
 80100d0:	f3bf 8f4f 	dsb	sy
 80100d4:	61bb      	str	r3, [r7, #24]
 80100d6:	e7fe      	b.n	80100d6 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80100d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d01e      	beq.n	801011c <xTaskCreateStatic+0xa4>
 80100de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d01b      	beq.n	801011c <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80100e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100e6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80100e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80100ec:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80100ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100f0:	2202      	movs	r2, #2
 80100f2:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80100f6:	2300      	movs	r3, #0
 80100f8:	9303      	str	r3, [sp, #12]
 80100fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100fc:	9302      	str	r3, [sp, #8]
 80100fe:	f107 0314 	add.w	r3, r7, #20
 8010102:	9301      	str	r3, [sp, #4]
 8010104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010106:	9300      	str	r3, [sp, #0]
 8010108:	683b      	ldr	r3, [r7, #0]
 801010a:	687a      	ldr	r2, [r7, #4]
 801010c:	68b9      	ldr	r1, [r7, #8]
 801010e:	68f8      	ldr	r0, [r7, #12]
 8010110:	f000 f850 	bl	80101b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010114:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010116:	f000 f8d9 	bl	80102cc <prvAddNewTaskToReadyList>
 801011a:	e001      	b.n	8010120 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 801011c:	2300      	movs	r3, #0
 801011e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010120:	697b      	ldr	r3, [r7, #20]
	}
 8010122:	4618      	mov	r0, r3
 8010124:	3728      	adds	r7, #40	; 0x28
 8010126:	46bd      	mov	sp, r7
 8010128:	bd80      	pop	{r7, pc}

0801012a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801012a:	b580      	push	{r7, lr}
 801012c:	b08c      	sub	sp, #48	; 0x30
 801012e:	af04      	add	r7, sp, #16
 8010130:	60f8      	str	r0, [r7, #12]
 8010132:	60b9      	str	r1, [r7, #8]
 8010134:	603b      	str	r3, [r7, #0]
 8010136:	4613      	mov	r3, r2
 8010138:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801013a:	88fb      	ldrh	r3, [r7, #6]
 801013c:	009b      	lsls	r3, r3, #2
 801013e:	4618      	mov	r0, r3
 8010140:	f7fe fa4a 	bl	800e5d8 <pvPortMalloc>
 8010144:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010146:	697b      	ldr	r3, [r7, #20]
 8010148:	2b00      	cmp	r3, #0
 801014a:	d00e      	beq.n	801016a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 801014c:	2064      	movs	r0, #100	; 0x64
 801014e:	f7fe fa43 	bl	800e5d8 <pvPortMalloc>
 8010152:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010154:	69fb      	ldr	r3, [r7, #28]
 8010156:	2b00      	cmp	r3, #0
 8010158:	d003      	beq.n	8010162 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801015a:	69fb      	ldr	r3, [r7, #28]
 801015c:	697a      	ldr	r2, [r7, #20]
 801015e:	631a      	str	r2, [r3, #48]	; 0x30
 8010160:	e005      	b.n	801016e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010162:	6978      	ldr	r0, [r7, #20]
 8010164:	f7fe fafe 	bl	800e764 <vPortFree>
 8010168:	e001      	b.n	801016e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801016a:	2300      	movs	r3, #0
 801016c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801016e:	69fb      	ldr	r3, [r7, #28]
 8010170:	2b00      	cmp	r3, #0
 8010172:	d017      	beq.n	80101a4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010174:	69fb      	ldr	r3, [r7, #28]
 8010176:	2200      	movs	r2, #0
 8010178:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801017c:	88fa      	ldrh	r2, [r7, #6]
 801017e:	2300      	movs	r3, #0
 8010180:	9303      	str	r3, [sp, #12]
 8010182:	69fb      	ldr	r3, [r7, #28]
 8010184:	9302      	str	r3, [sp, #8]
 8010186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010188:	9301      	str	r3, [sp, #4]
 801018a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801018c:	9300      	str	r3, [sp, #0]
 801018e:	683b      	ldr	r3, [r7, #0]
 8010190:	68b9      	ldr	r1, [r7, #8]
 8010192:	68f8      	ldr	r0, [r7, #12]
 8010194:	f000 f80e 	bl	80101b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010198:	69f8      	ldr	r0, [r7, #28]
 801019a:	f000 f897 	bl	80102cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801019e:	2301      	movs	r3, #1
 80101a0:	61bb      	str	r3, [r7, #24]
 80101a2:	e002      	b.n	80101aa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80101a4:	f04f 33ff 	mov.w	r3, #4294967295
 80101a8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80101aa:	69bb      	ldr	r3, [r7, #24]
	}
 80101ac:	4618      	mov	r0, r3
 80101ae:	3720      	adds	r7, #32
 80101b0:	46bd      	mov	sp, r7
 80101b2:	bd80      	pop	{r7, pc}

080101b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80101b4:	b580      	push	{r7, lr}
 80101b6:	b088      	sub	sp, #32
 80101b8:	af00      	add	r7, sp, #0
 80101ba:	60f8      	str	r0, [r7, #12]
 80101bc:	60b9      	str	r1, [r7, #8]
 80101be:	607a      	str	r2, [r7, #4]
 80101c0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80101c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101c4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	009b      	lsls	r3, r3, #2
 80101ca:	461a      	mov	r2, r3
 80101cc:	21a5      	movs	r1, #165	; 0xa5
 80101ce:	f004 ffd8 	bl	8015182 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80101d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80101dc:	3b01      	subs	r3, #1
 80101de:	009b      	lsls	r3, r3, #2
 80101e0:	4413      	add	r3, r2
 80101e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80101e4:	69bb      	ldr	r3, [r7, #24]
 80101e6:	f023 0307 	bic.w	r3, r3, #7
 80101ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80101ec:	69bb      	ldr	r3, [r7, #24]
 80101ee:	f003 0307 	and.w	r3, r3, #7
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d009      	beq.n	801020a <prvInitialiseNewTask+0x56>
 80101f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101fa:	f383 8811 	msr	BASEPRI, r3
 80101fe:	f3bf 8f6f 	isb	sy
 8010202:	f3bf 8f4f 	dsb	sy
 8010206:	617b      	str	r3, [r7, #20]
 8010208:	e7fe      	b.n	8010208 <prvInitialiseNewTask+0x54>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 801020a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801020c:	69ba      	ldr	r2, [r7, #24]
 801020e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010210:	2300      	movs	r3, #0
 8010212:	61fb      	str	r3, [r7, #28]
 8010214:	e012      	b.n	801023c <prvInitialiseNewTask+0x88>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010216:	68ba      	ldr	r2, [r7, #8]
 8010218:	69fb      	ldr	r3, [r7, #28]
 801021a:	4413      	add	r3, r2
 801021c:	7819      	ldrb	r1, [r3, #0]
 801021e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010220:	69fb      	ldr	r3, [r7, #28]
 8010222:	4413      	add	r3, r2
 8010224:	3334      	adds	r3, #52	; 0x34
 8010226:	460a      	mov	r2, r1
 8010228:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 801022a:	68ba      	ldr	r2, [r7, #8]
 801022c:	69fb      	ldr	r3, [r7, #28]
 801022e:	4413      	add	r3, r2
 8010230:	781b      	ldrb	r3, [r3, #0]
 8010232:	2b00      	cmp	r3, #0
 8010234:	d006      	beq.n	8010244 <prvInitialiseNewTask+0x90>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010236:	69fb      	ldr	r3, [r7, #28]
 8010238:	3301      	adds	r3, #1
 801023a:	61fb      	str	r3, [r7, #28]
 801023c:	69fb      	ldr	r3, [r7, #28]
 801023e:	2b0f      	cmp	r3, #15
 8010240:	d9e9      	bls.n	8010216 <prvInitialiseNewTask+0x62>
 8010242:	e000      	b.n	8010246 <prvInitialiseNewTask+0x92>
		{
			break;
 8010244:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010248:	2200      	movs	r2, #0
 801024a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801024e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010250:	2b37      	cmp	r3, #55	; 0x37
 8010252:	d901      	bls.n	8010258 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010254:	2337      	movs	r3, #55	; 0x37
 8010256:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801025a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801025c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801025e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010260:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010262:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 8010264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010266:	2200      	movs	r2, #0
 8010268:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801026a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801026c:	3304      	adds	r3, #4
 801026e:	4618      	mov	r0, r3
 8010270:	f7fe fbae 	bl	800e9d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010276:	3318      	adds	r3, #24
 8010278:	4618      	mov	r0, r3
 801027a:	f7fe fba9 	bl	800e9d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801027e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010280:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010282:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010286:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801028a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801028c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801028e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010290:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010292:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8010294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010296:	2200      	movs	r2, #0
 8010298:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801029a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801029c:	2200      	movs	r2, #0
 801029e:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80102a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102a2:	2200      	movs	r2, #0
 80102a4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80102a8:	683a      	ldr	r2, [r7, #0]
 80102aa:	68f9      	ldr	r1, [r7, #12]
 80102ac:	69b8      	ldr	r0, [r7, #24]
 80102ae:	f7fe fc23 	bl	800eaf8 <pxPortInitialiseStack>
 80102b2:	4602      	mov	r2, r0
 80102b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102b6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80102b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d002      	beq.n	80102c4 <prvInitialiseNewTask+0x110>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80102be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80102c2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80102c4:	bf00      	nop
 80102c6:	3720      	adds	r7, #32
 80102c8:	46bd      	mov	sp, r7
 80102ca:	bd80      	pop	{r7, pc}

080102cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80102cc:	b580      	push	{r7, lr}
 80102ce:	b082      	sub	sp, #8
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80102d4:	f7fe fd3a 	bl	800ed4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80102d8:	4b2d      	ldr	r3, [pc, #180]	; (8010390 <prvAddNewTaskToReadyList+0xc4>)
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	3301      	adds	r3, #1
 80102de:	4a2c      	ldr	r2, [pc, #176]	; (8010390 <prvAddNewTaskToReadyList+0xc4>)
 80102e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80102e2:	4b2c      	ldr	r3, [pc, #176]	; (8010394 <prvAddNewTaskToReadyList+0xc8>)
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d109      	bne.n	80102fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80102ea:	4a2a      	ldr	r2, [pc, #168]	; (8010394 <prvAddNewTaskToReadyList+0xc8>)
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80102f0:	4b27      	ldr	r3, [pc, #156]	; (8010390 <prvAddNewTaskToReadyList+0xc4>)
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	2b01      	cmp	r3, #1
 80102f6:	d110      	bne.n	801031a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80102f8:	f000 fcf8 	bl	8010cec <prvInitialiseTaskLists>
 80102fc:	e00d      	b.n	801031a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80102fe:	4b26      	ldr	r3, [pc, #152]	; (8010398 <prvAddNewTaskToReadyList+0xcc>)
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	2b00      	cmp	r3, #0
 8010304:	d109      	bne.n	801031a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010306:	4b23      	ldr	r3, [pc, #140]	; (8010394 <prvAddNewTaskToReadyList+0xc8>)
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010310:	429a      	cmp	r2, r3
 8010312:	d802      	bhi.n	801031a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010314:	4a1f      	ldr	r2, [pc, #124]	; (8010394 <prvAddNewTaskToReadyList+0xc8>)
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801031a:	4b20      	ldr	r3, [pc, #128]	; (801039c <prvAddNewTaskToReadyList+0xd0>)
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	3301      	adds	r3, #1
 8010320:	4a1e      	ldr	r2, [pc, #120]	; (801039c <prvAddNewTaskToReadyList+0xd0>)
 8010322:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8010324:	4b1d      	ldr	r3, [pc, #116]	; (801039c <prvAddNewTaskToReadyList+0xd0>)
 8010326:	681a      	ldr	r2, [r3, #0]
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010330:	4b1b      	ldr	r3, [pc, #108]	; (80103a0 <prvAddNewTaskToReadyList+0xd4>)
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	429a      	cmp	r2, r3
 8010336:	d903      	bls.n	8010340 <prvAddNewTaskToReadyList+0x74>
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801033c:	4a18      	ldr	r2, [pc, #96]	; (80103a0 <prvAddNewTaskToReadyList+0xd4>)
 801033e:	6013      	str	r3, [r2, #0]
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010344:	4613      	mov	r3, r2
 8010346:	009b      	lsls	r3, r3, #2
 8010348:	4413      	add	r3, r2
 801034a:	009b      	lsls	r3, r3, #2
 801034c:	4a15      	ldr	r2, [pc, #84]	; (80103a4 <prvAddNewTaskToReadyList+0xd8>)
 801034e:	441a      	add	r2, r3
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	3304      	adds	r3, #4
 8010354:	4619      	mov	r1, r3
 8010356:	4610      	mov	r0, r2
 8010358:	f7fe fb47 	bl	800e9ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801035c:	f7fe fd24 	bl	800eda8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010360:	4b0d      	ldr	r3, [pc, #52]	; (8010398 <prvAddNewTaskToReadyList+0xcc>)
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	2b00      	cmp	r3, #0
 8010366:	d00e      	beq.n	8010386 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010368:	4b0a      	ldr	r3, [pc, #40]	; (8010394 <prvAddNewTaskToReadyList+0xc8>)
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010372:	429a      	cmp	r2, r3
 8010374:	d207      	bcs.n	8010386 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010376:	4b0c      	ldr	r3, [pc, #48]	; (80103a8 <prvAddNewTaskToReadyList+0xdc>)
 8010378:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801037c:	601a      	str	r2, [r3, #0]
 801037e:	f3bf 8f4f 	dsb	sy
 8010382:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010386:	bf00      	nop
 8010388:	3708      	adds	r7, #8
 801038a:	46bd      	mov	sp, r7
 801038c:	bd80      	pop	{r7, pc}
 801038e:	bf00      	nop
 8010390:	200272a0 	.word	0x200272a0
 8010394:	20026dcc 	.word	0x20026dcc
 8010398:	200272ac 	.word	0x200272ac
 801039c:	200272bc 	.word	0x200272bc
 80103a0:	200272a8 	.word	0x200272a8
 80103a4:	20026dd0 	.word	0x20026dd0
 80103a8:	e000ed04 	.word	0xe000ed04

080103ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80103ac:	b580      	push	{r7, lr}
 80103ae:	b084      	sub	sp, #16
 80103b0:	af00      	add	r7, sp, #0
 80103b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80103b4:	2300      	movs	r3, #0
 80103b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d016      	beq.n	80103ec <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80103be:	4b13      	ldr	r3, [pc, #76]	; (801040c <vTaskDelay+0x60>)
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d009      	beq.n	80103da <vTaskDelay+0x2e>
 80103c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103ca:	f383 8811 	msr	BASEPRI, r3
 80103ce:	f3bf 8f6f 	isb	sy
 80103d2:	f3bf 8f4f 	dsb	sy
 80103d6:	60bb      	str	r3, [r7, #8]
 80103d8:	e7fe      	b.n	80103d8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80103da:	f000 f881 	bl	80104e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80103de:	2100      	movs	r1, #0
 80103e0:	6878      	ldr	r0, [r7, #4]
 80103e2:	f001 f8a9 	bl	8011538 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80103e6:	f000 f8c1 	bl	801056c <xTaskResumeAll>
 80103ea:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d107      	bne.n	8010402 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80103f2:	4b07      	ldr	r3, [pc, #28]	; (8010410 <vTaskDelay+0x64>)
 80103f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80103f8:	601a      	str	r2, [r3, #0]
 80103fa:	f3bf 8f4f 	dsb	sy
 80103fe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010402:	bf00      	nop
 8010404:	3710      	adds	r7, #16
 8010406:	46bd      	mov	sp, r7
 8010408:	bd80      	pop	{r7, pc}
 801040a:	bf00      	nop
 801040c:	200272c8 	.word	0x200272c8
 8010410:	e000ed04 	.word	0xe000ed04

08010414 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010414:	b580      	push	{r7, lr}
 8010416:	b08a      	sub	sp, #40	; 0x28
 8010418:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801041a:	2300      	movs	r3, #0
 801041c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801041e:	2300      	movs	r3, #0
 8010420:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010422:	463a      	mov	r2, r7
 8010424:	1d39      	adds	r1, r7, #4
 8010426:	f107 0308 	add.w	r3, r7, #8
 801042a:	4618      	mov	r0, r3
 801042c:	f7fe f8a0 	bl	800e570 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010430:	6839      	ldr	r1, [r7, #0]
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	68ba      	ldr	r2, [r7, #8]
 8010436:	9202      	str	r2, [sp, #8]
 8010438:	9301      	str	r3, [sp, #4]
 801043a:	2300      	movs	r3, #0
 801043c:	9300      	str	r3, [sp, #0]
 801043e:	2300      	movs	r3, #0
 8010440:	460a      	mov	r2, r1
 8010442:	4921      	ldr	r1, [pc, #132]	; (80104c8 <vTaskStartScheduler+0xb4>)
 8010444:	4821      	ldr	r0, [pc, #132]	; (80104cc <vTaskStartScheduler+0xb8>)
 8010446:	f7ff fe17 	bl	8010078 <xTaskCreateStatic>
 801044a:	4602      	mov	r2, r0
 801044c:	4b20      	ldr	r3, [pc, #128]	; (80104d0 <vTaskStartScheduler+0xbc>)
 801044e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010450:	4b1f      	ldr	r3, [pc, #124]	; (80104d0 <vTaskStartScheduler+0xbc>)
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	2b00      	cmp	r3, #0
 8010456:	d002      	beq.n	801045e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010458:	2301      	movs	r3, #1
 801045a:	617b      	str	r3, [r7, #20]
 801045c:	e001      	b.n	8010462 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801045e:	2300      	movs	r3, #0
 8010460:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8010462:	697b      	ldr	r3, [r7, #20]
 8010464:	2b01      	cmp	r3, #1
 8010466:	d102      	bne.n	801046e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8010468:	f001 f8ba 	bl	80115e0 <xTimerCreateTimerTask>
 801046c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801046e:	697b      	ldr	r3, [r7, #20]
 8010470:	2b01      	cmp	r3, #1
 8010472:	d117      	bne.n	80104a4 <vTaskStartScheduler+0x90>
 8010474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010478:	f383 8811 	msr	BASEPRI, r3
 801047c:	f3bf 8f6f 	isb	sy
 8010480:	f3bf 8f4f 	dsb	sy
 8010484:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010486:	4b13      	ldr	r3, [pc, #76]	; (80104d4 <vTaskStartScheduler+0xc0>)
 8010488:	f04f 32ff 	mov.w	r2, #4294967295
 801048c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801048e:	4b12      	ldr	r3, [pc, #72]	; (80104d8 <vTaskStartScheduler+0xc4>)
 8010490:	2201      	movs	r2, #1
 8010492:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8010494:	4b11      	ldr	r3, [pc, #68]	; (80104dc <vTaskStartScheduler+0xc8>)
 8010496:	2200      	movs	r2, #0
 8010498:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 801049a:	f7f0 fec8 	bl	800122e <configureTimerForRunTimeStats>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801049e:	f7fe fbb7 	bl	800ec10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80104a2:	e00d      	b.n	80104c0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80104a4:	697b      	ldr	r3, [r7, #20]
 80104a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104aa:	d109      	bne.n	80104c0 <vTaskStartScheduler+0xac>
 80104ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104b0:	f383 8811 	msr	BASEPRI, r3
 80104b4:	f3bf 8f6f 	isb	sy
 80104b8:	f3bf 8f4f 	dsb	sy
 80104bc:	60fb      	str	r3, [r7, #12]
 80104be:	e7fe      	b.n	80104be <vTaskStartScheduler+0xaa>
}
 80104c0:	bf00      	nop
 80104c2:	3718      	adds	r7, #24
 80104c4:	46bd      	mov	sp, r7
 80104c6:	bd80      	pop	{r7, pc}
 80104c8:	080164ec 	.word	0x080164ec
 80104cc:	08010c15 	.word	0x08010c15
 80104d0:	200272c4 	.word	0x200272c4
 80104d4:	200272c0 	.word	0x200272c0
 80104d8:	200272ac 	.word	0x200272ac
 80104dc:	200272a4 	.word	0x200272a4

080104e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80104e0:	b480      	push	{r7}
 80104e2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80104e4:	4b04      	ldr	r3, [pc, #16]	; (80104f8 <vTaskSuspendAll+0x18>)
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	3301      	adds	r3, #1
 80104ea:	4a03      	ldr	r2, [pc, #12]	; (80104f8 <vTaskSuspendAll+0x18>)
 80104ec:	6013      	str	r3, [r2, #0]
}
 80104ee:	bf00      	nop
 80104f0:	46bd      	mov	sp, r7
 80104f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f6:	4770      	bx	lr
 80104f8:	200272c8 	.word	0x200272c8

080104fc <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 80104fc:	b480      	push	{r7}
 80104fe:	b083      	sub	sp, #12
 8010500:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 8010502:	2300      	movs	r3, #0
 8010504:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 8010506:	4b14      	ldr	r3, [pc, #80]	; (8010558 <prvGetExpectedIdleTime+0x5c>)
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	2b00      	cmp	r3, #0
 801050c:	d001      	beq.n	8010512 <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 801050e:	2301      	movs	r3, #1
 8010510:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 8010512:	4b12      	ldr	r3, [pc, #72]	; (801055c <prvGetExpectedIdleTime+0x60>)
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010518:	2b00      	cmp	r3, #0
 801051a:	d002      	beq.n	8010522 <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 801051c:	2300      	movs	r3, #0
 801051e:	607b      	str	r3, [r7, #4]
 8010520:	e012      	b.n	8010548 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 8010522:	4b0f      	ldr	r3, [pc, #60]	; (8010560 <prvGetExpectedIdleTime+0x64>)
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	2b01      	cmp	r3, #1
 8010528:	d902      	bls.n	8010530 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 801052a:	2300      	movs	r3, #0
 801052c:	607b      	str	r3, [r7, #4]
 801052e:	e00b      	b.n	8010548 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 8010530:	683b      	ldr	r3, [r7, #0]
 8010532:	2b00      	cmp	r3, #0
 8010534:	d002      	beq.n	801053c <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 8010536:	2300      	movs	r3, #0
 8010538:	607b      	str	r3, [r7, #4]
 801053a:	e005      	b.n	8010548 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{

			xReturn = xNextTaskUnblockTime - xTickCount;
 801053c:	4b09      	ldr	r3, [pc, #36]	; (8010564 <prvGetExpectedIdleTime+0x68>)
 801053e:	681a      	ldr	r2, [r3, #0]
 8010540:	4b09      	ldr	r3, [pc, #36]	; (8010568 <prvGetExpectedIdleTime+0x6c>)
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	1ad3      	subs	r3, r2, r3
 8010546:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 8010548:	687b      	ldr	r3, [r7, #4]
	}
 801054a:	4618      	mov	r0, r3
 801054c:	370c      	adds	r7, #12
 801054e:	46bd      	mov	sp, r7
 8010550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010554:	4770      	bx	lr
 8010556:	bf00      	nop
 8010558:	200272a8 	.word	0x200272a8
 801055c:	20026dcc 	.word	0x20026dcc
 8010560:	20026dd0 	.word	0x20026dd0
 8010564:	200272c0 	.word	0x200272c0
 8010568:	200272a4 	.word	0x200272a4

0801056c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801056c:	b580      	push	{r7, lr}
 801056e:	b084      	sub	sp, #16
 8010570:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010572:	2300      	movs	r3, #0
 8010574:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010576:	2300      	movs	r3, #0
 8010578:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801057a:	4b41      	ldr	r3, [pc, #260]	; (8010680 <xTaskResumeAll+0x114>)
 801057c:	681b      	ldr	r3, [r3, #0]
 801057e:	2b00      	cmp	r3, #0
 8010580:	d109      	bne.n	8010596 <xTaskResumeAll+0x2a>
 8010582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010586:	f383 8811 	msr	BASEPRI, r3
 801058a:	f3bf 8f6f 	isb	sy
 801058e:	f3bf 8f4f 	dsb	sy
 8010592:	603b      	str	r3, [r7, #0]
 8010594:	e7fe      	b.n	8010594 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010596:	f7fe fbd9 	bl	800ed4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801059a:	4b39      	ldr	r3, [pc, #228]	; (8010680 <xTaskResumeAll+0x114>)
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	3b01      	subs	r3, #1
 80105a0:	4a37      	ldr	r2, [pc, #220]	; (8010680 <xTaskResumeAll+0x114>)
 80105a2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80105a4:	4b36      	ldr	r3, [pc, #216]	; (8010680 <xTaskResumeAll+0x114>)
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d162      	bne.n	8010672 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80105ac:	4b35      	ldr	r3, [pc, #212]	; (8010684 <xTaskResumeAll+0x118>)
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d05e      	beq.n	8010672 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80105b4:	e02f      	b.n	8010616 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80105b6:	4b34      	ldr	r3, [pc, #208]	; (8010688 <xTaskResumeAll+0x11c>)
 80105b8:	68db      	ldr	r3, [r3, #12]
 80105ba:	68db      	ldr	r3, [r3, #12]
 80105bc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	3318      	adds	r3, #24
 80105c2:	4618      	mov	r0, r3
 80105c4:	f7fe fa6e 	bl	800eaa4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	3304      	adds	r3, #4
 80105cc:	4618      	mov	r0, r3
 80105ce:	f7fe fa69 	bl	800eaa4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105d6:	4b2d      	ldr	r3, [pc, #180]	; (801068c <xTaskResumeAll+0x120>)
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	429a      	cmp	r2, r3
 80105dc:	d903      	bls.n	80105e6 <xTaskResumeAll+0x7a>
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105e2:	4a2a      	ldr	r2, [pc, #168]	; (801068c <xTaskResumeAll+0x120>)
 80105e4:	6013      	str	r3, [r2, #0]
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105ea:	4613      	mov	r3, r2
 80105ec:	009b      	lsls	r3, r3, #2
 80105ee:	4413      	add	r3, r2
 80105f0:	009b      	lsls	r3, r3, #2
 80105f2:	4a27      	ldr	r2, [pc, #156]	; (8010690 <xTaskResumeAll+0x124>)
 80105f4:	441a      	add	r2, r3
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	3304      	adds	r3, #4
 80105fa:	4619      	mov	r1, r3
 80105fc:	4610      	mov	r0, r2
 80105fe:	f7fe f9f4 	bl	800e9ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010606:	4b23      	ldr	r3, [pc, #140]	; (8010694 <xTaskResumeAll+0x128>)
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801060c:	429a      	cmp	r2, r3
 801060e:	d302      	bcc.n	8010616 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8010610:	4b21      	ldr	r3, [pc, #132]	; (8010698 <xTaskResumeAll+0x12c>)
 8010612:	2201      	movs	r2, #1
 8010614:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010616:	4b1c      	ldr	r3, [pc, #112]	; (8010688 <xTaskResumeAll+0x11c>)
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	2b00      	cmp	r3, #0
 801061c:	d1cb      	bne.n	80105b6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	2b00      	cmp	r3, #0
 8010622:	d001      	beq.n	8010628 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010624:	f000 fbfc 	bl	8010e20 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8010628:	4b1c      	ldr	r3, [pc, #112]	; (801069c <xTaskResumeAll+0x130>)
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	2b00      	cmp	r3, #0
 8010632:	d010      	beq.n	8010656 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010634:	f000 f86c 	bl	8010710 <xTaskIncrementTick>
 8010638:	4603      	mov	r3, r0
 801063a:	2b00      	cmp	r3, #0
 801063c:	d002      	beq.n	8010644 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 801063e:	4b16      	ldr	r3, [pc, #88]	; (8010698 <xTaskResumeAll+0x12c>)
 8010640:	2201      	movs	r2, #1
 8010642:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	3b01      	subs	r3, #1
 8010648:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	2b00      	cmp	r3, #0
 801064e:	d1f1      	bne.n	8010634 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8010650:	4b12      	ldr	r3, [pc, #72]	; (801069c <xTaskResumeAll+0x130>)
 8010652:	2200      	movs	r2, #0
 8010654:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010656:	4b10      	ldr	r3, [pc, #64]	; (8010698 <xTaskResumeAll+0x12c>)
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	2b00      	cmp	r3, #0
 801065c:	d009      	beq.n	8010672 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801065e:	2301      	movs	r3, #1
 8010660:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010662:	4b0f      	ldr	r3, [pc, #60]	; (80106a0 <xTaskResumeAll+0x134>)
 8010664:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010668:	601a      	str	r2, [r3, #0]
 801066a:	f3bf 8f4f 	dsb	sy
 801066e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010672:	f7fe fb99 	bl	800eda8 <vPortExitCritical>

	return xAlreadyYielded;
 8010676:	68bb      	ldr	r3, [r7, #8]
}
 8010678:	4618      	mov	r0, r3
 801067a:	3710      	adds	r7, #16
 801067c:	46bd      	mov	sp, r7
 801067e:	bd80      	pop	{r7, pc}
 8010680:	200272c8 	.word	0x200272c8
 8010684:	200272a0 	.word	0x200272a0
 8010688:	20027260 	.word	0x20027260
 801068c:	200272a8 	.word	0x200272a8
 8010690:	20026dd0 	.word	0x20026dd0
 8010694:	20026dcc 	.word	0x20026dcc
 8010698:	200272b4 	.word	0x200272b4
 801069c:	200272b0 	.word	0x200272b0
 80106a0:	e000ed04 	.word	0xe000ed04

080106a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80106a4:	b480      	push	{r7}
 80106a6:	b083      	sub	sp, #12
 80106a8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80106aa:	4b05      	ldr	r3, [pc, #20]	; (80106c0 <xTaskGetTickCount+0x1c>)
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80106b0:	687b      	ldr	r3, [r7, #4]
}
 80106b2:	4618      	mov	r0, r3
 80106b4:	370c      	adds	r7, #12
 80106b6:	46bd      	mov	sp, r7
 80106b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106bc:	4770      	bx	lr
 80106be:	bf00      	nop
 80106c0:	200272a4 	.word	0x200272a4

080106c4 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 80106c4:	b480      	push	{r7}
 80106c6:	b085      	sub	sp, #20
 80106c8:	af00      	add	r7, sp, #0
 80106ca:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 80106cc:	4b0e      	ldr	r3, [pc, #56]	; (8010708 <vTaskStepTick+0x44>)
 80106ce:	681a      	ldr	r2, [r3, #0]
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	441a      	add	r2, r3
 80106d4:	4b0d      	ldr	r3, [pc, #52]	; (801070c <vTaskStepTick+0x48>)
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	429a      	cmp	r2, r3
 80106da:	d909      	bls.n	80106f0 <vTaskStepTick+0x2c>
 80106dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106e0:	f383 8811 	msr	BASEPRI, r3
 80106e4:	f3bf 8f6f 	isb	sy
 80106e8:	f3bf 8f4f 	dsb	sy
 80106ec:	60fb      	str	r3, [r7, #12]
 80106ee:	e7fe      	b.n	80106ee <vTaskStepTick+0x2a>
		xTickCount += xTicksToJump;
 80106f0:	4b05      	ldr	r3, [pc, #20]	; (8010708 <vTaskStepTick+0x44>)
 80106f2:	681a      	ldr	r2, [r3, #0]
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	4413      	add	r3, r2
 80106f8:	4a03      	ldr	r2, [pc, #12]	; (8010708 <vTaskStepTick+0x44>)
 80106fa:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 80106fc:	bf00      	nop
 80106fe:	3714      	adds	r7, #20
 8010700:	46bd      	mov	sp, r7
 8010702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010706:	4770      	bx	lr
 8010708:	200272a4 	.word	0x200272a4
 801070c:	200272c0 	.word	0x200272c0

08010710 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010710:	b580      	push	{r7, lr}
 8010712:	b086      	sub	sp, #24
 8010714:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010716:	2300      	movs	r3, #0
 8010718:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801071a:	4b55      	ldr	r3, [pc, #340]	; (8010870 <xTaskIncrementTick+0x160>)
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	2b00      	cmp	r3, #0
 8010720:	f040 8093 	bne.w	801084a <xTaskIncrementTick+0x13a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010724:	4b53      	ldr	r3, [pc, #332]	; (8010874 <xTaskIncrementTick+0x164>)
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	3301      	adds	r3, #1
 801072a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801072c:	4a51      	ldr	r2, [pc, #324]	; (8010874 <xTaskIncrementTick+0x164>)
 801072e:	693b      	ldr	r3, [r7, #16]
 8010730:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010732:	693b      	ldr	r3, [r7, #16]
 8010734:	2b00      	cmp	r3, #0
 8010736:	d11f      	bne.n	8010778 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8010738:	4b4f      	ldr	r3, [pc, #316]	; (8010878 <xTaskIncrementTick+0x168>)
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	2b00      	cmp	r3, #0
 8010740:	d009      	beq.n	8010756 <xTaskIncrementTick+0x46>
 8010742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010746:	f383 8811 	msr	BASEPRI, r3
 801074a:	f3bf 8f6f 	isb	sy
 801074e:	f3bf 8f4f 	dsb	sy
 8010752:	603b      	str	r3, [r7, #0]
 8010754:	e7fe      	b.n	8010754 <xTaskIncrementTick+0x44>
 8010756:	4b48      	ldr	r3, [pc, #288]	; (8010878 <xTaskIncrementTick+0x168>)
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	60fb      	str	r3, [r7, #12]
 801075c:	4b47      	ldr	r3, [pc, #284]	; (801087c <xTaskIncrementTick+0x16c>)
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	4a45      	ldr	r2, [pc, #276]	; (8010878 <xTaskIncrementTick+0x168>)
 8010762:	6013      	str	r3, [r2, #0]
 8010764:	4a45      	ldr	r2, [pc, #276]	; (801087c <xTaskIncrementTick+0x16c>)
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	6013      	str	r3, [r2, #0]
 801076a:	4b45      	ldr	r3, [pc, #276]	; (8010880 <xTaskIncrementTick+0x170>)
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	3301      	adds	r3, #1
 8010770:	4a43      	ldr	r2, [pc, #268]	; (8010880 <xTaskIncrementTick+0x170>)
 8010772:	6013      	str	r3, [r2, #0]
 8010774:	f000 fb54 	bl	8010e20 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010778:	4b42      	ldr	r3, [pc, #264]	; (8010884 <xTaskIncrementTick+0x174>)
 801077a:	681b      	ldr	r3, [r3, #0]
 801077c:	693a      	ldr	r2, [r7, #16]
 801077e:	429a      	cmp	r2, r3
 8010780:	d34e      	bcc.n	8010820 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010782:	4b3d      	ldr	r3, [pc, #244]	; (8010878 <xTaskIncrementTick+0x168>)
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	2b00      	cmp	r3, #0
 801078a:	d101      	bne.n	8010790 <xTaskIncrementTick+0x80>
 801078c:	2301      	movs	r3, #1
 801078e:	e000      	b.n	8010792 <xTaskIncrementTick+0x82>
 8010790:	2300      	movs	r3, #0
 8010792:	2b00      	cmp	r3, #0
 8010794:	d004      	beq.n	80107a0 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010796:	4b3b      	ldr	r3, [pc, #236]	; (8010884 <xTaskIncrementTick+0x174>)
 8010798:	f04f 32ff 	mov.w	r2, #4294967295
 801079c:	601a      	str	r2, [r3, #0]
					break;
 801079e:	e03f      	b.n	8010820 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80107a0:	4b35      	ldr	r3, [pc, #212]	; (8010878 <xTaskIncrementTick+0x168>)
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	68db      	ldr	r3, [r3, #12]
 80107a6:	68db      	ldr	r3, [r3, #12]
 80107a8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80107aa:	68bb      	ldr	r3, [r7, #8]
 80107ac:	685b      	ldr	r3, [r3, #4]
 80107ae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80107b0:	693a      	ldr	r2, [r7, #16]
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	429a      	cmp	r2, r3
 80107b6:	d203      	bcs.n	80107c0 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80107b8:	4a32      	ldr	r2, [pc, #200]	; (8010884 <xTaskIncrementTick+0x174>)
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	6013      	str	r3, [r2, #0]
						break;
 80107be:	e02f      	b.n	8010820 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80107c0:	68bb      	ldr	r3, [r7, #8]
 80107c2:	3304      	adds	r3, #4
 80107c4:	4618      	mov	r0, r3
 80107c6:	f7fe f96d 	bl	800eaa4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80107ca:	68bb      	ldr	r3, [r7, #8]
 80107cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d004      	beq.n	80107dc <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80107d2:	68bb      	ldr	r3, [r7, #8]
 80107d4:	3318      	adds	r3, #24
 80107d6:	4618      	mov	r0, r3
 80107d8:	f7fe f964 	bl	800eaa4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80107dc:	68bb      	ldr	r3, [r7, #8]
 80107de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107e0:	4b29      	ldr	r3, [pc, #164]	; (8010888 <xTaskIncrementTick+0x178>)
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	429a      	cmp	r2, r3
 80107e6:	d903      	bls.n	80107f0 <xTaskIncrementTick+0xe0>
 80107e8:	68bb      	ldr	r3, [r7, #8]
 80107ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107ec:	4a26      	ldr	r2, [pc, #152]	; (8010888 <xTaskIncrementTick+0x178>)
 80107ee:	6013      	str	r3, [r2, #0]
 80107f0:	68bb      	ldr	r3, [r7, #8]
 80107f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107f4:	4613      	mov	r3, r2
 80107f6:	009b      	lsls	r3, r3, #2
 80107f8:	4413      	add	r3, r2
 80107fa:	009b      	lsls	r3, r3, #2
 80107fc:	4a23      	ldr	r2, [pc, #140]	; (801088c <xTaskIncrementTick+0x17c>)
 80107fe:	441a      	add	r2, r3
 8010800:	68bb      	ldr	r3, [r7, #8]
 8010802:	3304      	adds	r3, #4
 8010804:	4619      	mov	r1, r3
 8010806:	4610      	mov	r0, r2
 8010808:	f7fe f8ef 	bl	800e9ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801080c:	68bb      	ldr	r3, [r7, #8]
 801080e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010810:	4b1f      	ldr	r3, [pc, #124]	; (8010890 <xTaskIncrementTick+0x180>)
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010816:	429a      	cmp	r2, r3
 8010818:	d3b3      	bcc.n	8010782 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 801081a:	2301      	movs	r3, #1
 801081c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801081e:	e7b0      	b.n	8010782 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010820:	4b1b      	ldr	r3, [pc, #108]	; (8010890 <xTaskIncrementTick+0x180>)
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010826:	4919      	ldr	r1, [pc, #100]	; (801088c <xTaskIncrementTick+0x17c>)
 8010828:	4613      	mov	r3, r2
 801082a:	009b      	lsls	r3, r3, #2
 801082c:	4413      	add	r3, r2
 801082e:	009b      	lsls	r3, r3, #2
 8010830:	440b      	add	r3, r1
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	2b01      	cmp	r3, #1
 8010836:	d901      	bls.n	801083c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8010838:	2301      	movs	r3, #1
 801083a:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 801083c:	4b15      	ldr	r3, [pc, #84]	; (8010894 <xTaskIncrementTick+0x184>)
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	2b00      	cmp	r3, #0
 8010842:	d109      	bne.n	8010858 <xTaskIncrementTick+0x148>
			{
				vApplicationTickHook();
 8010844:	f7f0 fd01 	bl	800124a <vApplicationTickHook>
 8010848:	e006      	b.n	8010858 <xTaskIncrementTick+0x148>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801084a:	4b12      	ldr	r3, [pc, #72]	; (8010894 <xTaskIncrementTick+0x184>)
 801084c:	681b      	ldr	r3, [r3, #0]
 801084e:	3301      	adds	r3, #1
 8010850:	4a10      	ldr	r2, [pc, #64]	; (8010894 <xTaskIncrementTick+0x184>)
 8010852:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8010854:	f7f0 fcf9 	bl	800124a <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8010858:	4b0f      	ldr	r3, [pc, #60]	; (8010898 <xTaskIncrementTick+0x188>)
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	2b00      	cmp	r3, #0
 801085e:	d001      	beq.n	8010864 <xTaskIncrementTick+0x154>
		{
			xSwitchRequired = pdTRUE;
 8010860:	2301      	movs	r3, #1
 8010862:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8010864:	697b      	ldr	r3, [r7, #20]
}
 8010866:	4618      	mov	r0, r3
 8010868:	3718      	adds	r7, #24
 801086a:	46bd      	mov	sp, r7
 801086c:	bd80      	pop	{r7, pc}
 801086e:	bf00      	nop
 8010870:	200272c8 	.word	0x200272c8
 8010874:	200272a4 	.word	0x200272a4
 8010878:	20027258 	.word	0x20027258
 801087c:	2002725c 	.word	0x2002725c
 8010880:	200272b8 	.word	0x200272b8
 8010884:	200272c0 	.word	0x200272c0
 8010888:	200272a8 	.word	0x200272a8
 801088c:	20026dd0 	.word	0x20026dd0
 8010890:	20026dcc 	.word	0x20026dcc
 8010894:	200272b0 	.word	0x200272b0
 8010898:	200272b4 	.word	0x200272b4

0801089c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801089c:	b580      	push	{r7, lr}
 801089e:	b084      	sub	sp, #16
 80108a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80108a2:	4b3b      	ldr	r3, [pc, #236]	; (8010990 <vTaskSwitchContext+0xf4>)
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d003      	beq.n	80108b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80108aa:	4b3a      	ldr	r3, [pc, #232]	; (8010994 <vTaskSwitchContext+0xf8>)
 80108ac:	2201      	movs	r2, #1
 80108ae:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80108b0:	e06a      	b.n	8010988 <vTaskSwitchContext+0xec>
		xYieldPending = pdFALSE;
 80108b2:	4b38      	ldr	r3, [pc, #224]	; (8010994 <vTaskSwitchContext+0xf8>)
 80108b4:	2200      	movs	r2, #0
 80108b6:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80108b8:	f7f0 fcc0 	bl	800123c <getRunTimeCounterValue>
 80108bc:	4602      	mov	r2, r0
 80108be:	4b36      	ldr	r3, [pc, #216]	; (8010998 <vTaskSwitchContext+0xfc>)
 80108c0:	601a      	str	r2, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 80108c2:	4b35      	ldr	r3, [pc, #212]	; (8010998 <vTaskSwitchContext+0xfc>)
 80108c4:	681a      	ldr	r2, [r3, #0]
 80108c6:	4b35      	ldr	r3, [pc, #212]	; (801099c <vTaskSwitchContext+0x100>)
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	429a      	cmp	r2, r3
 80108cc:	d909      	bls.n	80108e2 <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80108ce:	4b34      	ldr	r3, [pc, #208]	; (80109a0 <vTaskSwitchContext+0x104>)
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80108d4:	4a30      	ldr	r2, [pc, #192]	; (8010998 <vTaskSwitchContext+0xfc>)
 80108d6:	6810      	ldr	r0, [r2, #0]
 80108d8:	4a30      	ldr	r2, [pc, #192]	; (801099c <vTaskSwitchContext+0x100>)
 80108da:	6812      	ldr	r2, [r2, #0]
 80108dc:	1a82      	subs	r2, r0, r2
 80108de:	440a      	add	r2, r1
 80108e0:	659a      	str	r2, [r3, #88]	; 0x58
				ulTaskSwitchedInTime = ulTotalRunTime;
 80108e2:	4b2d      	ldr	r3, [pc, #180]	; (8010998 <vTaskSwitchContext+0xfc>)
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	4a2d      	ldr	r2, [pc, #180]	; (801099c <vTaskSwitchContext+0x100>)
 80108e8:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80108ea:	4b2d      	ldr	r3, [pc, #180]	; (80109a0 <vTaskSwitchContext+0x104>)
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	681a      	ldr	r2, [r3, #0]
 80108f0:	4b2b      	ldr	r3, [pc, #172]	; (80109a0 <vTaskSwitchContext+0x104>)
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80108f6:	429a      	cmp	r2, r3
 80108f8:	d808      	bhi.n	801090c <vTaskSwitchContext+0x70>
 80108fa:	4b29      	ldr	r3, [pc, #164]	; (80109a0 <vTaskSwitchContext+0x104>)
 80108fc:	681a      	ldr	r2, [r3, #0]
 80108fe:	4b28      	ldr	r3, [pc, #160]	; (80109a0 <vTaskSwitchContext+0x104>)
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	3334      	adds	r3, #52	; 0x34
 8010904:	4619      	mov	r1, r3
 8010906:	4610      	mov	r0, r2
 8010908:	f7f0 fca6 	bl	8001258 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 801090c:	4b25      	ldr	r3, [pc, #148]	; (80109a4 <vTaskSwitchContext+0x108>)
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	60fb      	str	r3, [r7, #12]
 8010912:	e00f      	b.n	8010934 <vTaskSwitchContext+0x98>
 8010914:	68fb      	ldr	r3, [r7, #12]
 8010916:	2b00      	cmp	r3, #0
 8010918:	d109      	bne.n	801092e <vTaskSwitchContext+0x92>
 801091a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801091e:	f383 8811 	msr	BASEPRI, r3
 8010922:	f3bf 8f6f 	isb	sy
 8010926:	f3bf 8f4f 	dsb	sy
 801092a:	607b      	str	r3, [r7, #4]
 801092c:	e7fe      	b.n	801092c <vTaskSwitchContext+0x90>
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	3b01      	subs	r3, #1
 8010932:	60fb      	str	r3, [r7, #12]
 8010934:	491c      	ldr	r1, [pc, #112]	; (80109a8 <vTaskSwitchContext+0x10c>)
 8010936:	68fa      	ldr	r2, [r7, #12]
 8010938:	4613      	mov	r3, r2
 801093a:	009b      	lsls	r3, r3, #2
 801093c:	4413      	add	r3, r2
 801093e:	009b      	lsls	r3, r3, #2
 8010940:	440b      	add	r3, r1
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	2b00      	cmp	r3, #0
 8010946:	d0e5      	beq.n	8010914 <vTaskSwitchContext+0x78>
 8010948:	68fa      	ldr	r2, [r7, #12]
 801094a:	4613      	mov	r3, r2
 801094c:	009b      	lsls	r3, r3, #2
 801094e:	4413      	add	r3, r2
 8010950:	009b      	lsls	r3, r3, #2
 8010952:	4a15      	ldr	r2, [pc, #84]	; (80109a8 <vTaskSwitchContext+0x10c>)
 8010954:	4413      	add	r3, r2
 8010956:	60bb      	str	r3, [r7, #8]
 8010958:	68bb      	ldr	r3, [r7, #8]
 801095a:	685b      	ldr	r3, [r3, #4]
 801095c:	685a      	ldr	r2, [r3, #4]
 801095e:	68bb      	ldr	r3, [r7, #8]
 8010960:	605a      	str	r2, [r3, #4]
 8010962:	68bb      	ldr	r3, [r7, #8]
 8010964:	685a      	ldr	r2, [r3, #4]
 8010966:	68bb      	ldr	r3, [r7, #8]
 8010968:	3308      	adds	r3, #8
 801096a:	429a      	cmp	r2, r3
 801096c:	d104      	bne.n	8010978 <vTaskSwitchContext+0xdc>
 801096e:	68bb      	ldr	r3, [r7, #8]
 8010970:	685b      	ldr	r3, [r3, #4]
 8010972:	685a      	ldr	r2, [r3, #4]
 8010974:	68bb      	ldr	r3, [r7, #8]
 8010976:	605a      	str	r2, [r3, #4]
 8010978:	68bb      	ldr	r3, [r7, #8]
 801097a:	685b      	ldr	r3, [r3, #4]
 801097c:	68db      	ldr	r3, [r3, #12]
 801097e:	4a08      	ldr	r2, [pc, #32]	; (80109a0 <vTaskSwitchContext+0x104>)
 8010980:	6013      	str	r3, [r2, #0]
 8010982:	4a08      	ldr	r2, [pc, #32]	; (80109a4 <vTaskSwitchContext+0x108>)
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	6013      	str	r3, [r2, #0]
}
 8010988:	bf00      	nop
 801098a:	3710      	adds	r7, #16
 801098c:	46bd      	mov	sp, r7
 801098e:	bd80      	pop	{r7, pc}
 8010990:	200272c8 	.word	0x200272c8
 8010994:	200272b4 	.word	0x200272b4
 8010998:	200272d0 	.word	0x200272d0
 801099c:	200272cc 	.word	0x200272cc
 80109a0:	20026dcc 	.word	0x20026dcc
 80109a4:	200272a8 	.word	0x200272a8
 80109a8:	20026dd0 	.word	0x20026dd0

080109ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80109ac:	b580      	push	{r7, lr}
 80109ae:	b084      	sub	sp, #16
 80109b0:	af00      	add	r7, sp, #0
 80109b2:	6078      	str	r0, [r7, #4]
 80109b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d109      	bne.n	80109d0 <vTaskPlaceOnEventList+0x24>
 80109bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109c0:	f383 8811 	msr	BASEPRI, r3
 80109c4:	f3bf 8f6f 	isb	sy
 80109c8:	f3bf 8f4f 	dsb	sy
 80109cc:	60fb      	str	r3, [r7, #12]
 80109ce:	e7fe      	b.n	80109ce <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80109d0:	4b07      	ldr	r3, [pc, #28]	; (80109f0 <vTaskPlaceOnEventList+0x44>)
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	3318      	adds	r3, #24
 80109d6:	4619      	mov	r1, r3
 80109d8:	6878      	ldr	r0, [r7, #4]
 80109da:	f7fe f82a 	bl	800ea32 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80109de:	2101      	movs	r1, #1
 80109e0:	6838      	ldr	r0, [r7, #0]
 80109e2:	f000 fda9 	bl	8011538 <prvAddCurrentTaskToDelayedList>
}
 80109e6:	bf00      	nop
 80109e8:	3710      	adds	r7, #16
 80109ea:	46bd      	mov	sp, r7
 80109ec:	bd80      	pop	{r7, pc}
 80109ee:	bf00      	nop
 80109f0:	20026dcc 	.word	0x20026dcc

080109f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80109f4:	b580      	push	{r7, lr}
 80109f6:	b086      	sub	sp, #24
 80109f8:	af00      	add	r7, sp, #0
 80109fa:	60f8      	str	r0, [r7, #12]
 80109fc:	60b9      	str	r1, [r7, #8]
 80109fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d109      	bne.n	8010a1a <vTaskPlaceOnEventListRestricted+0x26>
 8010a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a0a:	f383 8811 	msr	BASEPRI, r3
 8010a0e:	f3bf 8f6f 	isb	sy
 8010a12:	f3bf 8f4f 	dsb	sy
 8010a16:	617b      	str	r3, [r7, #20]
 8010a18:	e7fe      	b.n	8010a18 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010a1a:	4b0a      	ldr	r3, [pc, #40]	; (8010a44 <vTaskPlaceOnEventListRestricted+0x50>)
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	3318      	adds	r3, #24
 8010a20:	4619      	mov	r1, r3
 8010a22:	68f8      	ldr	r0, [r7, #12]
 8010a24:	f7fd ffe1 	bl	800e9ea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d002      	beq.n	8010a34 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8010a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8010a32:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8010a34:	6879      	ldr	r1, [r7, #4]
 8010a36:	68b8      	ldr	r0, [r7, #8]
 8010a38:	f000 fd7e 	bl	8011538 <prvAddCurrentTaskToDelayedList>
	}
 8010a3c:	bf00      	nop
 8010a3e:	3718      	adds	r7, #24
 8010a40:	46bd      	mov	sp, r7
 8010a42:	bd80      	pop	{r7, pc}
 8010a44:	20026dcc 	.word	0x20026dcc

08010a48 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010a48:	b580      	push	{r7, lr}
 8010a4a:	b086      	sub	sp, #24
 8010a4c:	af00      	add	r7, sp, #0
 8010a4e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	68db      	ldr	r3, [r3, #12]
 8010a54:	68db      	ldr	r3, [r3, #12]
 8010a56:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010a58:	693b      	ldr	r3, [r7, #16]
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d109      	bne.n	8010a72 <xTaskRemoveFromEventList+0x2a>
 8010a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a62:	f383 8811 	msr	BASEPRI, r3
 8010a66:	f3bf 8f6f 	isb	sy
 8010a6a:	f3bf 8f4f 	dsb	sy
 8010a6e:	60fb      	str	r3, [r7, #12]
 8010a70:	e7fe      	b.n	8010a70 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010a72:	693b      	ldr	r3, [r7, #16]
 8010a74:	3318      	adds	r3, #24
 8010a76:	4618      	mov	r0, r3
 8010a78:	f7fe f814 	bl	800eaa4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010a7c:	4b1e      	ldr	r3, [pc, #120]	; (8010af8 <xTaskRemoveFromEventList+0xb0>)
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d11d      	bne.n	8010ac0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010a84:	693b      	ldr	r3, [r7, #16]
 8010a86:	3304      	adds	r3, #4
 8010a88:	4618      	mov	r0, r3
 8010a8a:	f7fe f80b 	bl	800eaa4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010a8e:	693b      	ldr	r3, [r7, #16]
 8010a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a92:	4b1a      	ldr	r3, [pc, #104]	; (8010afc <xTaskRemoveFromEventList+0xb4>)
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	429a      	cmp	r2, r3
 8010a98:	d903      	bls.n	8010aa2 <xTaskRemoveFromEventList+0x5a>
 8010a9a:	693b      	ldr	r3, [r7, #16]
 8010a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a9e:	4a17      	ldr	r2, [pc, #92]	; (8010afc <xTaskRemoveFromEventList+0xb4>)
 8010aa0:	6013      	str	r3, [r2, #0]
 8010aa2:	693b      	ldr	r3, [r7, #16]
 8010aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010aa6:	4613      	mov	r3, r2
 8010aa8:	009b      	lsls	r3, r3, #2
 8010aaa:	4413      	add	r3, r2
 8010aac:	009b      	lsls	r3, r3, #2
 8010aae:	4a14      	ldr	r2, [pc, #80]	; (8010b00 <xTaskRemoveFromEventList+0xb8>)
 8010ab0:	441a      	add	r2, r3
 8010ab2:	693b      	ldr	r3, [r7, #16]
 8010ab4:	3304      	adds	r3, #4
 8010ab6:	4619      	mov	r1, r3
 8010ab8:	4610      	mov	r0, r2
 8010aba:	f7fd ff96 	bl	800e9ea <vListInsertEnd>
 8010abe:	e005      	b.n	8010acc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010ac0:	693b      	ldr	r3, [r7, #16]
 8010ac2:	3318      	adds	r3, #24
 8010ac4:	4619      	mov	r1, r3
 8010ac6:	480f      	ldr	r0, [pc, #60]	; (8010b04 <xTaskRemoveFromEventList+0xbc>)
 8010ac8:	f7fd ff8f 	bl	800e9ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010acc:	693b      	ldr	r3, [r7, #16]
 8010ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ad0:	4b0d      	ldr	r3, [pc, #52]	; (8010b08 <xTaskRemoveFromEventList+0xc0>)
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ad6:	429a      	cmp	r2, r3
 8010ad8:	d905      	bls.n	8010ae6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010ada:	2301      	movs	r3, #1
 8010adc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010ade:	4b0b      	ldr	r3, [pc, #44]	; (8010b0c <xTaskRemoveFromEventList+0xc4>)
 8010ae0:	2201      	movs	r2, #1
 8010ae2:	601a      	str	r2, [r3, #0]
 8010ae4:	e001      	b.n	8010aea <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8010ae6:	2300      	movs	r3, #0
 8010ae8:	617b      	str	r3, [r7, #20]
		normally left unchanged, because it is automatically reset to a new
		value when the tick count equals xNextTaskUnblockTime.  However if
		tickless idling is used it might be more important to enter sleep mode
		at the earliest possible time - so reset xNextTaskUnblockTime here to
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
 8010aea:	f000 f999 	bl	8010e20 <prvResetNextTaskUnblockTime>
	}
	#endif

	return xReturn;
 8010aee:	697b      	ldr	r3, [r7, #20]
}
 8010af0:	4618      	mov	r0, r3
 8010af2:	3718      	adds	r7, #24
 8010af4:	46bd      	mov	sp, r7
 8010af6:	bd80      	pop	{r7, pc}
 8010af8:	200272c8 	.word	0x200272c8
 8010afc:	200272a8 	.word	0x200272a8
 8010b00:	20026dd0 	.word	0x20026dd0
 8010b04:	20027260 	.word	0x20027260
 8010b08:	20026dcc 	.word	0x20026dcc
 8010b0c:	200272b4 	.word	0x200272b4

08010b10 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010b10:	b480      	push	{r7}
 8010b12:	b083      	sub	sp, #12
 8010b14:	af00      	add	r7, sp, #0
 8010b16:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010b18:	4b06      	ldr	r3, [pc, #24]	; (8010b34 <vTaskInternalSetTimeOutState+0x24>)
 8010b1a:	681a      	ldr	r2, [r3, #0]
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010b20:	4b05      	ldr	r3, [pc, #20]	; (8010b38 <vTaskInternalSetTimeOutState+0x28>)
 8010b22:	681a      	ldr	r2, [r3, #0]
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	605a      	str	r2, [r3, #4]
}
 8010b28:	bf00      	nop
 8010b2a:	370c      	adds	r7, #12
 8010b2c:	46bd      	mov	sp, r7
 8010b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b32:	4770      	bx	lr
 8010b34:	200272b8 	.word	0x200272b8
 8010b38:	200272a4 	.word	0x200272a4

08010b3c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010b3c:	b580      	push	{r7, lr}
 8010b3e:	b088      	sub	sp, #32
 8010b40:	af00      	add	r7, sp, #0
 8010b42:	6078      	str	r0, [r7, #4]
 8010b44:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d109      	bne.n	8010b60 <xTaskCheckForTimeOut+0x24>
 8010b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b50:	f383 8811 	msr	BASEPRI, r3
 8010b54:	f3bf 8f6f 	isb	sy
 8010b58:	f3bf 8f4f 	dsb	sy
 8010b5c:	613b      	str	r3, [r7, #16]
 8010b5e:	e7fe      	b.n	8010b5e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8010b60:	683b      	ldr	r3, [r7, #0]
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d109      	bne.n	8010b7a <xTaskCheckForTimeOut+0x3e>
 8010b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b6a:	f383 8811 	msr	BASEPRI, r3
 8010b6e:	f3bf 8f6f 	isb	sy
 8010b72:	f3bf 8f4f 	dsb	sy
 8010b76:	60fb      	str	r3, [r7, #12]
 8010b78:	e7fe      	b.n	8010b78 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8010b7a:	f7fe f8e7 	bl	800ed4c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010b7e:	4b1d      	ldr	r3, [pc, #116]	; (8010bf4 <xTaskCheckForTimeOut+0xb8>)
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	685b      	ldr	r3, [r3, #4]
 8010b88:	69ba      	ldr	r2, [r7, #24]
 8010b8a:	1ad3      	subs	r3, r2, r3
 8010b8c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010b8e:	683b      	ldr	r3, [r7, #0]
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b96:	d102      	bne.n	8010b9e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010b98:	2300      	movs	r3, #0
 8010b9a:	61fb      	str	r3, [r7, #28]
 8010b9c:	e023      	b.n	8010be6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	681a      	ldr	r2, [r3, #0]
 8010ba2:	4b15      	ldr	r3, [pc, #84]	; (8010bf8 <xTaskCheckForTimeOut+0xbc>)
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	429a      	cmp	r2, r3
 8010ba8:	d007      	beq.n	8010bba <xTaskCheckForTimeOut+0x7e>
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	685b      	ldr	r3, [r3, #4]
 8010bae:	69ba      	ldr	r2, [r7, #24]
 8010bb0:	429a      	cmp	r2, r3
 8010bb2:	d302      	bcc.n	8010bba <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010bb4:	2301      	movs	r3, #1
 8010bb6:	61fb      	str	r3, [r7, #28]
 8010bb8:	e015      	b.n	8010be6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010bba:	683b      	ldr	r3, [r7, #0]
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	697a      	ldr	r2, [r7, #20]
 8010bc0:	429a      	cmp	r2, r3
 8010bc2:	d20b      	bcs.n	8010bdc <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010bc4:	683b      	ldr	r3, [r7, #0]
 8010bc6:	681a      	ldr	r2, [r3, #0]
 8010bc8:	697b      	ldr	r3, [r7, #20]
 8010bca:	1ad2      	subs	r2, r2, r3
 8010bcc:	683b      	ldr	r3, [r7, #0]
 8010bce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010bd0:	6878      	ldr	r0, [r7, #4]
 8010bd2:	f7ff ff9d 	bl	8010b10 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010bd6:	2300      	movs	r3, #0
 8010bd8:	61fb      	str	r3, [r7, #28]
 8010bda:	e004      	b.n	8010be6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8010bdc:	683b      	ldr	r3, [r7, #0]
 8010bde:	2200      	movs	r2, #0
 8010be0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010be2:	2301      	movs	r3, #1
 8010be4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010be6:	f7fe f8df 	bl	800eda8 <vPortExitCritical>

	return xReturn;
 8010bea:	69fb      	ldr	r3, [r7, #28]
}
 8010bec:	4618      	mov	r0, r3
 8010bee:	3720      	adds	r7, #32
 8010bf0:	46bd      	mov	sp, r7
 8010bf2:	bd80      	pop	{r7, pc}
 8010bf4:	200272a4 	.word	0x200272a4
 8010bf8:	200272b8 	.word	0x200272b8

08010bfc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010bfc:	b480      	push	{r7}
 8010bfe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010c00:	4b03      	ldr	r3, [pc, #12]	; (8010c10 <vTaskMissedYield+0x14>)
 8010c02:	2201      	movs	r2, #1
 8010c04:	601a      	str	r2, [r3, #0]
}
 8010c06:	bf00      	nop
 8010c08:	46bd      	mov	sp, r7
 8010c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c0e:	4770      	bx	lr
 8010c10:	200272b4 	.word	0x200272b4

08010c14 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010c14:	b580      	push	{r7, lr}
 8010c16:	b084      	sub	sp, #16
 8010c18:	af00      	add	r7, sp, #0
 8010c1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010c1c:	f000 f8a6 	bl	8010d6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010c20:	4b17      	ldr	r3, [pc, #92]	; (8010c80 <prvIdleTask+0x6c>)
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	2b01      	cmp	r3, #1
 8010c26:	d907      	bls.n	8010c38 <prvIdleTask+0x24>
			{
				taskYIELD();
 8010c28:	4b16      	ldr	r3, [pc, #88]	; (8010c84 <prvIdleTask+0x70>)
 8010c2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010c2e:	601a      	str	r2, [r3, #0]
 8010c30:	f3bf 8f4f 	dsb	sy
 8010c34:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 8010c38:	f7ff fc60 	bl	80104fc <prvGetExpectedIdleTime>
 8010c3c:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	2b01      	cmp	r3, #1
 8010c42:	d9eb      	bls.n	8010c1c <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 8010c44:	f7ff fc4c 	bl	80104e0 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 8010c48:	4b0f      	ldr	r3, [pc, #60]	; (8010c88 <prvIdleTask+0x74>)
 8010c4a:	681a      	ldr	r2, [r3, #0]
 8010c4c:	4b0f      	ldr	r3, [pc, #60]	; (8010c8c <prvIdleTask+0x78>)
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	429a      	cmp	r2, r3
 8010c52:	d209      	bcs.n	8010c68 <prvIdleTask+0x54>
 8010c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c58:	f383 8811 	msr	BASEPRI, r3
 8010c5c:	f3bf 8f6f 	isb	sy
 8010c60:	f3bf 8f4f 	dsb	sy
 8010c64:	60bb      	str	r3, [r7, #8]
 8010c66:	e7fe      	b.n	8010c66 <prvIdleTask+0x52>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 8010c68:	f7ff fc48 	bl	80104fc <prvGetExpectedIdleTime>
 8010c6c:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	2b01      	cmp	r3, #1
 8010c72:	d902      	bls.n	8010c7a <prvIdleTask+0x66>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 8010c74:	68f8      	ldr	r0, [r7, #12]
 8010c76:	f7f1 fb1b 	bl	80022b0 <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 8010c7a:	f7ff fc77 	bl	801056c <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 8010c7e:	e7cd      	b.n	8010c1c <prvIdleTask+0x8>
 8010c80:	20026dd0 	.word	0x20026dd0
 8010c84:	e000ed04 	.word	0xe000ed04
 8010c88:	200272c0 	.word	0x200272c0
 8010c8c:	200272a4 	.word	0x200272a4

08010c90 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 8010c90:	b480      	push	{r7}
 8010c92:	b083      	sub	sp, #12
 8010c94:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 8010c96:	2301      	movs	r3, #1
 8010c98:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 8010c9a:	2301      	movs	r3, #1
 8010c9c:	71fb      	strb	r3, [r7, #7]

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 8010c9e:	4b0f      	ldr	r3, [pc, #60]	; (8010cdc <eTaskConfirmSleepModeStatus+0x4c>)
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d002      	beq.n	8010cac <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 8010ca6:	2300      	movs	r3, #0
 8010ca8:	71fb      	strb	r3, [r7, #7]
 8010caa:	e010      	b.n	8010cce <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 8010cac:	4b0c      	ldr	r3, [pc, #48]	; (8010ce0 <eTaskConfirmSleepModeStatus+0x50>)
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d002      	beq.n	8010cba <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 8010cb4:	2300      	movs	r3, #0
 8010cb6:	71fb      	strb	r3, [r7, #7]
 8010cb8:	e009      	b.n	8010cce <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 8010cba:	4b0a      	ldr	r3, [pc, #40]	; (8010ce4 <eTaskConfirmSleepModeStatus+0x54>)
 8010cbc:	681a      	ldr	r2, [r3, #0]
 8010cbe:	4b0a      	ldr	r3, [pc, #40]	; (8010ce8 <eTaskConfirmSleepModeStatus+0x58>)
 8010cc0:	6819      	ldr	r1, [r3, #0]
 8010cc2:	683b      	ldr	r3, [r7, #0]
 8010cc4:	1acb      	subs	r3, r1, r3
 8010cc6:	429a      	cmp	r2, r3
 8010cc8:	d101      	bne.n	8010cce <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 8010cca:	2302      	movs	r3, #2
 8010ccc:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 8010cce:	79fb      	ldrb	r3, [r7, #7]
	}
 8010cd0:	4618      	mov	r0, r3
 8010cd2:	370c      	adds	r7, #12
 8010cd4:	46bd      	mov	sp, r7
 8010cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cda:	4770      	bx	lr
 8010cdc:	20027260 	.word	0x20027260
 8010ce0:	200272b4 	.word	0x200272b4
 8010ce4:	2002728c 	.word	0x2002728c
 8010ce8:	200272a0 	.word	0x200272a0

08010cec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010cec:	b580      	push	{r7, lr}
 8010cee:	b082      	sub	sp, #8
 8010cf0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010cf2:	2300      	movs	r3, #0
 8010cf4:	607b      	str	r3, [r7, #4]
 8010cf6:	e00c      	b.n	8010d12 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010cf8:	687a      	ldr	r2, [r7, #4]
 8010cfa:	4613      	mov	r3, r2
 8010cfc:	009b      	lsls	r3, r3, #2
 8010cfe:	4413      	add	r3, r2
 8010d00:	009b      	lsls	r3, r3, #2
 8010d02:	4a12      	ldr	r2, [pc, #72]	; (8010d4c <prvInitialiseTaskLists+0x60>)
 8010d04:	4413      	add	r3, r2
 8010d06:	4618      	mov	r0, r3
 8010d08:	f7fd fe42 	bl	800e990 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	3301      	adds	r3, #1
 8010d10:	607b      	str	r3, [r7, #4]
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	2b37      	cmp	r3, #55	; 0x37
 8010d16:	d9ef      	bls.n	8010cf8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010d18:	480d      	ldr	r0, [pc, #52]	; (8010d50 <prvInitialiseTaskLists+0x64>)
 8010d1a:	f7fd fe39 	bl	800e990 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010d1e:	480d      	ldr	r0, [pc, #52]	; (8010d54 <prvInitialiseTaskLists+0x68>)
 8010d20:	f7fd fe36 	bl	800e990 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010d24:	480c      	ldr	r0, [pc, #48]	; (8010d58 <prvInitialiseTaskLists+0x6c>)
 8010d26:	f7fd fe33 	bl	800e990 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010d2a:	480c      	ldr	r0, [pc, #48]	; (8010d5c <prvInitialiseTaskLists+0x70>)
 8010d2c:	f7fd fe30 	bl	800e990 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010d30:	480b      	ldr	r0, [pc, #44]	; (8010d60 <prvInitialiseTaskLists+0x74>)
 8010d32:	f7fd fe2d 	bl	800e990 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010d36:	4b0b      	ldr	r3, [pc, #44]	; (8010d64 <prvInitialiseTaskLists+0x78>)
 8010d38:	4a05      	ldr	r2, [pc, #20]	; (8010d50 <prvInitialiseTaskLists+0x64>)
 8010d3a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010d3c:	4b0a      	ldr	r3, [pc, #40]	; (8010d68 <prvInitialiseTaskLists+0x7c>)
 8010d3e:	4a05      	ldr	r2, [pc, #20]	; (8010d54 <prvInitialiseTaskLists+0x68>)
 8010d40:	601a      	str	r2, [r3, #0]
}
 8010d42:	bf00      	nop
 8010d44:	3708      	adds	r7, #8
 8010d46:	46bd      	mov	sp, r7
 8010d48:	bd80      	pop	{r7, pc}
 8010d4a:	bf00      	nop
 8010d4c:	20026dd0 	.word	0x20026dd0
 8010d50:	20027230 	.word	0x20027230
 8010d54:	20027244 	.word	0x20027244
 8010d58:	20027260 	.word	0x20027260
 8010d5c:	20027274 	.word	0x20027274
 8010d60:	2002728c 	.word	0x2002728c
 8010d64:	20027258 	.word	0x20027258
 8010d68:	2002725c 	.word	0x2002725c

08010d6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010d6c:	b580      	push	{r7, lr}
 8010d6e:	b082      	sub	sp, #8
 8010d70:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010d72:	e019      	b.n	8010da8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010d74:	f7fd ffea 	bl	800ed4c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8010d78:	4b0f      	ldr	r3, [pc, #60]	; (8010db8 <prvCheckTasksWaitingTermination+0x4c>)
 8010d7a:	68db      	ldr	r3, [r3, #12]
 8010d7c:	68db      	ldr	r3, [r3, #12]
 8010d7e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	3304      	adds	r3, #4
 8010d84:	4618      	mov	r0, r3
 8010d86:	f7fd fe8d 	bl	800eaa4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010d8a:	4b0c      	ldr	r3, [pc, #48]	; (8010dbc <prvCheckTasksWaitingTermination+0x50>)
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	3b01      	subs	r3, #1
 8010d90:	4a0a      	ldr	r2, [pc, #40]	; (8010dbc <prvCheckTasksWaitingTermination+0x50>)
 8010d92:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010d94:	4b0a      	ldr	r3, [pc, #40]	; (8010dc0 <prvCheckTasksWaitingTermination+0x54>)
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	3b01      	subs	r3, #1
 8010d9a:	4a09      	ldr	r2, [pc, #36]	; (8010dc0 <prvCheckTasksWaitingTermination+0x54>)
 8010d9c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010d9e:	f7fe f803 	bl	800eda8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010da2:	6878      	ldr	r0, [r7, #4]
 8010da4:	f000 f80e 	bl	8010dc4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010da8:	4b05      	ldr	r3, [pc, #20]	; (8010dc0 <prvCheckTasksWaitingTermination+0x54>)
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d1e1      	bne.n	8010d74 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010db0:	bf00      	nop
 8010db2:	3708      	adds	r7, #8
 8010db4:	46bd      	mov	sp, r7
 8010db6:	bd80      	pop	{r7, pc}
 8010db8:	20027274 	.word	0x20027274
 8010dbc:	200272a0 	.word	0x200272a0
 8010dc0:	20027288 	.word	0x20027288

08010dc4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010dc4:	b580      	push	{r7, lr}
 8010dc6:	b084      	sub	sp, #16
 8010dc8:	af00      	add	r7, sp, #0
 8010dca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d108      	bne.n	8010de8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010dda:	4618      	mov	r0, r3
 8010ddc:	f7fd fcc2 	bl	800e764 <vPortFree>
				vPortFree( pxTCB );
 8010de0:	6878      	ldr	r0, [r7, #4]
 8010de2:	f7fd fcbf 	bl	800e764 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010de6:	e017      	b.n	8010e18 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8010dee:	2b01      	cmp	r3, #1
 8010df0:	d103      	bne.n	8010dfa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8010df2:	6878      	ldr	r0, [r7, #4]
 8010df4:	f7fd fcb6 	bl	800e764 <vPortFree>
	}
 8010df8:	e00e      	b.n	8010e18 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8010e00:	2b02      	cmp	r3, #2
 8010e02:	d009      	beq.n	8010e18 <prvDeleteTCB+0x54>
 8010e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e08:	f383 8811 	msr	BASEPRI, r3
 8010e0c:	f3bf 8f6f 	isb	sy
 8010e10:	f3bf 8f4f 	dsb	sy
 8010e14:	60fb      	str	r3, [r7, #12]
 8010e16:	e7fe      	b.n	8010e16 <prvDeleteTCB+0x52>
	}
 8010e18:	bf00      	nop
 8010e1a:	3710      	adds	r7, #16
 8010e1c:	46bd      	mov	sp, r7
 8010e1e:	bd80      	pop	{r7, pc}

08010e20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010e20:	b480      	push	{r7}
 8010e22:	b083      	sub	sp, #12
 8010e24:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010e26:	4b0f      	ldr	r3, [pc, #60]	; (8010e64 <prvResetNextTaskUnblockTime+0x44>)
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d101      	bne.n	8010e34 <prvResetNextTaskUnblockTime+0x14>
 8010e30:	2301      	movs	r3, #1
 8010e32:	e000      	b.n	8010e36 <prvResetNextTaskUnblockTime+0x16>
 8010e34:	2300      	movs	r3, #0
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d004      	beq.n	8010e44 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010e3a:	4b0b      	ldr	r3, [pc, #44]	; (8010e68 <prvResetNextTaskUnblockTime+0x48>)
 8010e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8010e40:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010e42:	e008      	b.n	8010e56 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8010e44:	4b07      	ldr	r3, [pc, #28]	; (8010e64 <prvResetNextTaskUnblockTime+0x44>)
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	68db      	ldr	r3, [r3, #12]
 8010e4a:	68db      	ldr	r3, [r3, #12]
 8010e4c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	685b      	ldr	r3, [r3, #4]
 8010e52:	4a05      	ldr	r2, [pc, #20]	; (8010e68 <prvResetNextTaskUnblockTime+0x48>)
 8010e54:	6013      	str	r3, [r2, #0]
}
 8010e56:	bf00      	nop
 8010e58:	370c      	adds	r7, #12
 8010e5a:	46bd      	mov	sp, r7
 8010e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e60:	4770      	bx	lr
 8010e62:	bf00      	nop
 8010e64:	20027258 	.word	0x20027258
 8010e68:	200272c0 	.word	0x200272c0

08010e6c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8010e6c:	b480      	push	{r7}
 8010e6e:	b083      	sub	sp, #12
 8010e70:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8010e72:	4b05      	ldr	r3, [pc, #20]	; (8010e88 <xTaskGetCurrentTaskHandle+0x1c>)
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	607b      	str	r3, [r7, #4]

		return xReturn;
 8010e78:	687b      	ldr	r3, [r7, #4]
	}
 8010e7a:	4618      	mov	r0, r3
 8010e7c:	370c      	adds	r7, #12
 8010e7e:	46bd      	mov	sp, r7
 8010e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e84:	4770      	bx	lr
 8010e86:	bf00      	nop
 8010e88:	20026dcc 	.word	0x20026dcc

08010e8c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010e8c:	b480      	push	{r7}
 8010e8e:	b083      	sub	sp, #12
 8010e90:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010e92:	4b0b      	ldr	r3, [pc, #44]	; (8010ec0 <xTaskGetSchedulerState+0x34>)
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d102      	bne.n	8010ea0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010e9a:	2301      	movs	r3, #1
 8010e9c:	607b      	str	r3, [r7, #4]
 8010e9e:	e008      	b.n	8010eb2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010ea0:	4b08      	ldr	r3, [pc, #32]	; (8010ec4 <xTaskGetSchedulerState+0x38>)
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d102      	bne.n	8010eae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010ea8:	2302      	movs	r3, #2
 8010eaa:	607b      	str	r3, [r7, #4]
 8010eac:	e001      	b.n	8010eb2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010eae:	2300      	movs	r3, #0
 8010eb0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010eb2:	687b      	ldr	r3, [r7, #4]
	}
 8010eb4:	4618      	mov	r0, r3
 8010eb6:	370c      	adds	r7, #12
 8010eb8:	46bd      	mov	sp, r7
 8010eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ebe:	4770      	bx	lr
 8010ec0:	200272ac 	.word	0x200272ac
 8010ec4:	200272c8 	.word	0x200272c8

08010ec8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8010ec8:	b580      	push	{r7, lr}
 8010eca:	b084      	sub	sp, #16
 8010ecc:	af00      	add	r7, sp, #0
 8010ece:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010ed4:	2300      	movs	r3, #0
 8010ed6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d056      	beq.n	8010f8c <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8010ede:	68bb      	ldr	r3, [r7, #8]
 8010ee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ee2:	4b2d      	ldr	r3, [pc, #180]	; (8010f98 <xTaskPriorityInherit+0xd0>)
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ee8:	429a      	cmp	r2, r3
 8010eea:	d246      	bcs.n	8010f7a <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010eec:	68bb      	ldr	r3, [r7, #8]
 8010eee:	699b      	ldr	r3, [r3, #24]
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	db06      	blt.n	8010f02 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010ef4:	4b28      	ldr	r3, [pc, #160]	; (8010f98 <xTaskPriorityInherit+0xd0>)
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010efa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010efe:	68bb      	ldr	r3, [r7, #8]
 8010f00:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8010f02:	68bb      	ldr	r3, [r7, #8]
 8010f04:	6959      	ldr	r1, [r3, #20]
 8010f06:	68bb      	ldr	r3, [r7, #8]
 8010f08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f0a:	4613      	mov	r3, r2
 8010f0c:	009b      	lsls	r3, r3, #2
 8010f0e:	4413      	add	r3, r2
 8010f10:	009b      	lsls	r3, r3, #2
 8010f12:	4a22      	ldr	r2, [pc, #136]	; (8010f9c <xTaskPriorityInherit+0xd4>)
 8010f14:	4413      	add	r3, r2
 8010f16:	4299      	cmp	r1, r3
 8010f18:	d101      	bne.n	8010f1e <xTaskPriorityInherit+0x56>
 8010f1a:	2301      	movs	r3, #1
 8010f1c:	e000      	b.n	8010f20 <xTaskPriorityInherit+0x58>
 8010f1e:	2300      	movs	r3, #0
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d022      	beq.n	8010f6a <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010f24:	68bb      	ldr	r3, [r7, #8]
 8010f26:	3304      	adds	r3, #4
 8010f28:	4618      	mov	r0, r3
 8010f2a:	f7fd fdbb 	bl	800eaa4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010f2e:	4b1a      	ldr	r3, [pc, #104]	; (8010f98 <xTaskPriorityInherit+0xd0>)
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f34:	68bb      	ldr	r3, [r7, #8]
 8010f36:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8010f38:	68bb      	ldr	r3, [r7, #8]
 8010f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f3c:	4b18      	ldr	r3, [pc, #96]	; (8010fa0 <xTaskPriorityInherit+0xd8>)
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	429a      	cmp	r2, r3
 8010f42:	d903      	bls.n	8010f4c <xTaskPriorityInherit+0x84>
 8010f44:	68bb      	ldr	r3, [r7, #8]
 8010f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f48:	4a15      	ldr	r2, [pc, #84]	; (8010fa0 <xTaskPriorityInherit+0xd8>)
 8010f4a:	6013      	str	r3, [r2, #0]
 8010f4c:	68bb      	ldr	r3, [r7, #8]
 8010f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f50:	4613      	mov	r3, r2
 8010f52:	009b      	lsls	r3, r3, #2
 8010f54:	4413      	add	r3, r2
 8010f56:	009b      	lsls	r3, r3, #2
 8010f58:	4a10      	ldr	r2, [pc, #64]	; (8010f9c <xTaskPriorityInherit+0xd4>)
 8010f5a:	441a      	add	r2, r3
 8010f5c:	68bb      	ldr	r3, [r7, #8]
 8010f5e:	3304      	adds	r3, #4
 8010f60:	4619      	mov	r1, r3
 8010f62:	4610      	mov	r0, r2
 8010f64:	f7fd fd41 	bl	800e9ea <vListInsertEnd>
 8010f68:	e004      	b.n	8010f74 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010f6a:	4b0b      	ldr	r3, [pc, #44]	; (8010f98 <xTaskPriorityInherit+0xd0>)
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f70:	68bb      	ldr	r3, [r7, #8]
 8010f72:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8010f74:	2301      	movs	r3, #1
 8010f76:	60fb      	str	r3, [r7, #12]
 8010f78:	e008      	b.n	8010f8c <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8010f7a:	68bb      	ldr	r3, [r7, #8]
 8010f7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010f7e:	4b06      	ldr	r3, [pc, #24]	; (8010f98 <xTaskPriorityInherit+0xd0>)
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f84:	429a      	cmp	r2, r3
 8010f86:	d201      	bcs.n	8010f8c <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8010f88:	2301      	movs	r3, #1
 8010f8a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010f8c:	68fb      	ldr	r3, [r7, #12]
	}
 8010f8e:	4618      	mov	r0, r3
 8010f90:	3710      	adds	r7, #16
 8010f92:	46bd      	mov	sp, r7
 8010f94:	bd80      	pop	{r7, pc}
 8010f96:	bf00      	nop
 8010f98:	20026dcc 	.word	0x20026dcc
 8010f9c:	20026dd0 	.word	0x20026dd0
 8010fa0:	200272a8 	.word	0x200272a8

08010fa4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010fa4:	b580      	push	{r7, lr}
 8010fa6:	b086      	sub	sp, #24
 8010fa8:	af00      	add	r7, sp, #0
 8010faa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010fb0:	2300      	movs	r3, #0
 8010fb2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d054      	beq.n	8011064 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010fba:	4b2d      	ldr	r3, [pc, #180]	; (8011070 <xTaskPriorityDisinherit+0xcc>)
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	693a      	ldr	r2, [r7, #16]
 8010fc0:	429a      	cmp	r2, r3
 8010fc2:	d009      	beq.n	8010fd8 <xTaskPriorityDisinherit+0x34>
 8010fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fc8:	f383 8811 	msr	BASEPRI, r3
 8010fcc:	f3bf 8f6f 	isb	sy
 8010fd0:	f3bf 8f4f 	dsb	sy
 8010fd4:	60fb      	str	r3, [r7, #12]
 8010fd6:	e7fe      	b.n	8010fd6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8010fd8:	693b      	ldr	r3, [r7, #16]
 8010fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d109      	bne.n	8010ff4 <xTaskPriorityDisinherit+0x50>
 8010fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fe4:	f383 8811 	msr	BASEPRI, r3
 8010fe8:	f3bf 8f6f 	isb	sy
 8010fec:	f3bf 8f4f 	dsb	sy
 8010ff0:	60bb      	str	r3, [r7, #8]
 8010ff2:	e7fe      	b.n	8010ff2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8010ff4:	693b      	ldr	r3, [r7, #16]
 8010ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010ff8:	1e5a      	subs	r2, r3, #1
 8010ffa:	693b      	ldr	r3, [r7, #16]
 8010ffc:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010ffe:	693b      	ldr	r3, [r7, #16]
 8011000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011002:	693b      	ldr	r3, [r7, #16]
 8011004:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011006:	429a      	cmp	r2, r3
 8011008:	d02c      	beq.n	8011064 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801100a:	693b      	ldr	r3, [r7, #16]
 801100c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801100e:	2b00      	cmp	r3, #0
 8011010:	d128      	bne.n	8011064 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011012:	693b      	ldr	r3, [r7, #16]
 8011014:	3304      	adds	r3, #4
 8011016:	4618      	mov	r0, r3
 8011018:	f7fd fd44 	bl	800eaa4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801101c:	693b      	ldr	r3, [r7, #16]
 801101e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011020:	693b      	ldr	r3, [r7, #16]
 8011022:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011024:	693b      	ldr	r3, [r7, #16]
 8011026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011028:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801102c:	693b      	ldr	r3, [r7, #16]
 801102e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011030:	693b      	ldr	r3, [r7, #16]
 8011032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011034:	4b0f      	ldr	r3, [pc, #60]	; (8011074 <xTaskPriorityDisinherit+0xd0>)
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	429a      	cmp	r2, r3
 801103a:	d903      	bls.n	8011044 <xTaskPriorityDisinherit+0xa0>
 801103c:	693b      	ldr	r3, [r7, #16]
 801103e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011040:	4a0c      	ldr	r2, [pc, #48]	; (8011074 <xTaskPriorityDisinherit+0xd0>)
 8011042:	6013      	str	r3, [r2, #0]
 8011044:	693b      	ldr	r3, [r7, #16]
 8011046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011048:	4613      	mov	r3, r2
 801104a:	009b      	lsls	r3, r3, #2
 801104c:	4413      	add	r3, r2
 801104e:	009b      	lsls	r3, r3, #2
 8011050:	4a09      	ldr	r2, [pc, #36]	; (8011078 <xTaskPriorityDisinherit+0xd4>)
 8011052:	441a      	add	r2, r3
 8011054:	693b      	ldr	r3, [r7, #16]
 8011056:	3304      	adds	r3, #4
 8011058:	4619      	mov	r1, r3
 801105a:	4610      	mov	r0, r2
 801105c:	f7fd fcc5 	bl	800e9ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011060:	2301      	movs	r3, #1
 8011062:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011064:	697b      	ldr	r3, [r7, #20]
	}
 8011066:	4618      	mov	r0, r3
 8011068:	3718      	adds	r7, #24
 801106a:	46bd      	mov	sp, r7
 801106c:	bd80      	pop	{r7, pc}
 801106e:	bf00      	nop
 8011070:	20026dcc 	.word	0x20026dcc
 8011074:	200272a8 	.word	0x200272a8
 8011078:	20026dd0 	.word	0x20026dd0

0801107c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801107c:	b580      	push	{r7, lr}
 801107e:	b088      	sub	sp, #32
 8011080:	af00      	add	r7, sp, #0
 8011082:	6078      	str	r0, [r7, #4]
 8011084:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801108a:	2301      	movs	r3, #1
 801108c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	2b00      	cmp	r3, #0
 8011092:	d06d      	beq.n	8011170 <vTaskPriorityDisinheritAfterTimeout+0xf4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8011094:	69bb      	ldr	r3, [r7, #24]
 8011096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011098:	2b00      	cmp	r3, #0
 801109a:	d109      	bne.n	80110b0 <vTaskPriorityDisinheritAfterTimeout+0x34>
 801109c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110a0:	f383 8811 	msr	BASEPRI, r3
 80110a4:	f3bf 8f6f 	isb	sy
 80110a8:	f3bf 8f4f 	dsb	sy
 80110ac:	60fb      	str	r3, [r7, #12]
 80110ae:	e7fe      	b.n	80110ae <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80110b0:	69bb      	ldr	r3, [r7, #24]
 80110b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80110b4:	683a      	ldr	r2, [r7, #0]
 80110b6:	429a      	cmp	r2, r3
 80110b8:	d902      	bls.n	80110c0 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80110ba:	683b      	ldr	r3, [r7, #0]
 80110bc:	61fb      	str	r3, [r7, #28]
 80110be:	e002      	b.n	80110c6 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80110c0:	69bb      	ldr	r3, [r7, #24]
 80110c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80110c4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80110c6:	69bb      	ldr	r3, [r7, #24]
 80110c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110ca:	69fa      	ldr	r2, [r7, #28]
 80110cc:	429a      	cmp	r2, r3
 80110ce:	d04f      	beq.n	8011170 <vTaskPriorityDisinheritAfterTimeout+0xf4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80110d0:	69bb      	ldr	r3, [r7, #24]
 80110d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80110d4:	697a      	ldr	r2, [r7, #20]
 80110d6:	429a      	cmp	r2, r3
 80110d8:	d14a      	bne.n	8011170 <vTaskPriorityDisinheritAfterTimeout+0xf4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80110da:	4b27      	ldr	r3, [pc, #156]	; (8011178 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80110dc:	681b      	ldr	r3, [r3, #0]
 80110de:	69ba      	ldr	r2, [r7, #24]
 80110e0:	429a      	cmp	r2, r3
 80110e2:	d109      	bne.n	80110f8 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 80110e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110e8:	f383 8811 	msr	BASEPRI, r3
 80110ec:	f3bf 8f6f 	isb	sy
 80110f0:	f3bf 8f4f 	dsb	sy
 80110f4:	60bb      	str	r3, [r7, #8]
 80110f6:	e7fe      	b.n	80110f6 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80110f8:	69bb      	ldr	r3, [r7, #24]
 80110fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110fc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80110fe:	69bb      	ldr	r3, [r7, #24]
 8011100:	69fa      	ldr	r2, [r7, #28]
 8011102:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011104:	69bb      	ldr	r3, [r7, #24]
 8011106:	699b      	ldr	r3, [r3, #24]
 8011108:	2b00      	cmp	r3, #0
 801110a:	db04      	blt.n	8011116 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801110c:	69fb      	ldr	r3, [r7, #28]
 801110e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011112:	69bb      	ldr	r3, [r7, #24]
 8011114:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011116:	69bb      	ldr	r3, [r7, #24]
 8011118:	6959      	ldr	r1, [r3, #20]
 801111a:	693a      	ldr	r2, [r7, #16]
 801111c:	4613      	mov	r3, r2
 801111e:	009b      	lsls	r3, r3, #2
 8011120:	4413      	add	r3, r2
 8011122:	009b      	lsls	r3, r3, #2
 8011124:	4a15      	ldr	r2, [pc, #84]	; (801117c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8011126:	4413      	add	r3, r2
 8011128:	4299      	cmp	r1, r3
 801112a:	d101      	bne.n	8011130 <vTaskPriorityDisinheritAfterTimeout+0xb4>
 801112c:	2301      	movs	r3, #1
 801112e:	e000      	b.n	8011132 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8011130:	2300      	movs	r3, #0
 8011132:	2b00      	cmp	r3, #0
 8011134:	d01c      	beq.n	8011170 <vTaskPriorityDisinheritAfterTimeout+0xf4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011136:	69bb      	ldr	r3, [r7, #24]
 8011138:	3304      	adds	r3, #4
 801113a:	4618      	mov	r0, r3
 801113c:	f7fd fcb2 	bl	800eaa4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8011140:	69bb      	ldr	r3, [r7, #24]
 8011142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011144:	4b0e      	ldr	r3, [pc, #56]	; (8011180 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	429a      	cmp	r2, r3
 801114a:	d903      	bls.n	8011154 <vTaskPriorityDisinheritAfterTimeout+0xd8>
 801114c:	69bb      	ldr	r3, [r7, #24]
 801114e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011150:	4a0b      	ldr	r2, [pc, #44]	; (8011180 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8011152:	6013      	str	r3, [r2, #0]
 8011154:	69bb      	ldr	r3, [r7, #24]
 8011156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011158:	4613      	mov	r3, r2
 801115a:	009b      	lsls	r3, r3, #2
 801115c:	4413      	add	r3, r2
 801115e:	009b      	lsls	r3, r3, #2
 8011160:	4a06      	ldr	r2, [pc, #24]	; (801117c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8011162:	441a      	add	r2, r3
 8011164:	69bb      	ldr	r3, [r7, #24]
 8011166:	3304      	adds	r3, #4
 8011168:	4619      	mov	r1, r3
 801116a:	4610      	mov	r0, r2
 801116c:	f7fd fc3d 	bl	800e9ea <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011170:	bf00      	nop
 8011172:	3720      	adds	r7, #32
 8011174:	46bd      	mov	sp, r7
 8011176:	bd80      	pop	{r7, pc}
 8011178:	20026dcc 	.word	0x20026dcc
 801117c:	20026dd0 	.word	0x20026dd0
 8011180:	200272a8 	.word	0x200272a8

08011184 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8011184:	b480      	push	{r7}
 8011186:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8011188:	4b07      	ldr	r3, [pc, #28]	; (80111a8 <pvTaskIncrementMutexHeldCount+0x24>)
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	2b00      	cmp	r3, #0
 801118e:	d004      	beq.n	801119a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8011190:	4b05      	ldr	r3, [pc, #20]	; (80111a8 <pvTaskIncrementMutexHeldCount+0x24>)
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011196:	3201      	adds	r2, #1
 8011198:	655a      	str	r2, [r3, #84]	; 0x54
		}

		return pxCurrentTCB;
 801119a:	4b03      	ldr	r3, [pc, #12]	; (80111a8 <pvTaskIncrementMutexHeldCount+0x24>)
 801119c:	681b      	ldr	r3, [r3, #0]
	}
 801119e:	4618      	mov	r0, r3
 80111a0:	46bd      	mov	sp, r7
 80111a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a6:	4770      	bx	lr
 80111a8:	20026dcc 	.word	0x20026dcc

080111ac <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80111ac:	b580      	push	{r7, lr}
 80111ae:	b086      	sub	sp, #24
 80111b0:	af00      	add	r7, sp, #0
 80111b2:	60f8      	str	r0, [r7, #12]
 80111b4:	60b9      	str	r1, [r7, #8]
 80111b6:	607a      	str	r2, [r7, #4]
 80111b8:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80111ba:	f7fd fdc7 	bl	800ed4c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80111be:	4b26      	ldr	r3, [pc, #152]	; (8011258 <xTaskNotifyWait+0xac>)
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80111c6:	b2db      	uxtb	r3, r3
 80111c8:	2b02      	cmp	r3, #2
 80111ca:	d01a      	beq.n	8011202 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80111cc:	4b22      	ldr	r3, [pc, #136]	; (8011258 <xTaskNotifyWait+0xac>)
 80111ce:	681b      	ldr	r3, [r3, #0]
 80111d0:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80111d2:	68fa      	ldr	r2, [r7, #12]
 80111d4:	43d2      	mvns	r2, r2
 80111d6:	400a      	ands	r2, r1
 80111d8:	65da      	str	r2, [r3, #92]	; 0x5c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80111da:	4b1f      	ldr	r3, [pc, #124]	; (8011258 <xTaskNotifyWait+0xac>)
 80111dc:	681b      	ldr	r3, [r3, #0]
 80111de:	2201      	movs	r2, #1
 80111e0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

				if( xTicksToWait > ( TickType_t ) 0 )
 80111e4:	683b      	ldr	r3, [r7, #0]
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d00b      	beq.n	8011202 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80111ea:	2101      	movs	r1, #1
 80111ec:	6838      	ldr	r0, [r7, #0]
 80111ee:	f000 f9a3 	bl	8011538 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80111f2:	4b1a      	ldr	r3, [pc, #104]	; (801125c <xTaskNotifyWait+0xb0>)
 80111f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80111f8:	601a      	str	r2, [r3, #0]
 80111fa:	f3bf 8f4f 	dsb	sy
 80111fe:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8011202:	f7fd fdd1 	bl	800eda8 <vPortExitCritical>

		taskENTER_CRITICAL();
 8011206:	f7fd fda1 	bl	800ed4c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	2b00      	cmp	r3, #0
 801120e:	d004      	beq.n	801121a <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8011210:	4b11      	ldr	r3, [pc, #68]	; (8011258 <xTaskNotifyWait+0xac>)
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801121a:	4b0f      	ldr	r3, [pc, #60]	; (8011258 <xTaskNotifyWait+0xac>)
 801121c:	681b      	ldr	r3, [r3, #0]
 801121e:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8011222:	b2db      	uxtb	r3, r3
 8011224:	2b02      	cmp	r3, #2
 8011226:	d002      	beq.n	801122e <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8011228:	2300      	movs	r3, #0
 801122a:	617b      	str	r3, [r7, #20]
 801122c:	e008      	b.n	8011240 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 801122e:	4b0a      	ldr	r3, [pc, #40]	; (8011258 <xTaskNotifyWait+0xac>)
 8011230:	681b      	ldr	r3, [r3, #0]
 8011232:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8011234:	68ba      	ldr	r2, [r7, #8]
 8011236:	43d2      	mvns	r2, r2
 8011238:	400a      	ands	r2, r1
 801123a:	65da      	str	r2, [r3, #92]	; 0x5c
				xReturn = pdTRUE;
 801123c:	2301      	movs	r3, #1
 801123e:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011240:	4b05      	ldr	r3, [pc, #20]	; (8011258 <xTaskNotifyWait+0xac>)
 8011242:	681b      	ldr	r3, [r3, #0]
 8011244:	2200      	movs	r2, #0
 8011246:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		}
		taskEXIT_CRITICAL();
 801124a:	f7fd fdad 	bl	800eda8 <vPortExitCritical>

		return xReturn;
 801124e:	697b      	ldr	r3, [r7, #20]
	}
 8011250:	4618      	mov	r0, r3
 8011252:	3718      	adds	r7, #24
 8011254:	46bd      	mov	sp, r7
 8011256:	bd80      	pop	{r7, pc}
 8011258:	20026dcc 	.word	0x20026dcc
 801125c:	e000ed04 	.word	0xe000ed04

08011260 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8011260:	b580      	push	{r7, lr}
 8011262:	b08a      	sub	sp, #40	; 0x28
 8011264:	af00      	add	r7, sp, #0
 8011266:	60f8      	str	r0, [r7, #12]
 8011268:	60b9      	str	r1, [r7, #8]
 801126a:	603b      	str	r3, [r7, #0]
 801126c:	4613      	mov	r3, r2
 801126e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8011270:	2301      	movs	r3, #1
 8011272:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8011274:	68fb      	ldr	r3, [r7, #12]
 8011276:	2b00      	cmp	r3, #0
 8011278:	d109      	bne.n	801128e <xTaskGenericNotify+0x2e>
 801127a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801127e:	f383 8811 	msr	BASEPRI, r3
 8011282:	f3bf 8f6f 	isb	sy
 8011286:	f3bf 8f4f 	dsb	sy
 801128a:	61bb      	str	r3, [r7, #24]
 801128c:	e7fe      	b.n	801128c <xTaskGenericNotify+0x2c>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 801128e:	68fb      	ldr	r3, [r7, #12]
 8011290:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8011292:	f7fd fd5b 	bl	800ed4c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8011296:	683b      	ldr	r3, [r7, #0]
 8011298:	2b00      	cmp	r3, #0
 801129a:	d003      	beq.n	80112a4 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801129c:	6a3b      	ldr	r3, [r7, #32]
 801129e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80112a0:	683b      	ldr	r3, [r7, #0]
 80112a2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80112a4:	6a3b      	ldr	r3, [r7, #32]
 80112a6:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80112aa:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80112ac:	6a3b      	ldr	r3, [r7, #32]
 80112ae:	2202      	movs	r2, #2
 80112b0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

			switch( eAction )
 80112b4:	79fb      	ldrb	r3, [r7, #7]
 80112b6:	2b04      	cmp	r3, #4
 80112b8:	d827      	bhi.n	801130a <xTaskGenericNotify+0xaa>
 80112ba:	a201      	add	r2, pc, #4	; (adr r2, 80112c0 <xTaskGenericNotify+0x60>)
 80112bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112c0:	0801130b 	.word	0x0801130b
 80112c4:	080112d5 	.word	0x080112d5
 80112c8:	080112e3 	.word	0x080112e3
 80112cc:	080112ef 	.word	0x080112ef
 80112d0:	080112f7 	.word	0x080112f7
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80112d4:	6a3b      	ldr	r3, [r7, #32]
 80112d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80112d8:	68bb      	ldr	r3, [r7, #8]
 80112da:	431a      	orrs	r2, r3
 80112dc:	6a3b      	ldr	r3, [r7, #32]
 80112de:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 80112e0:	e013      	b.n	801130a <xTaskGenericNotify+0xaa>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80112e2:	6a3b      	ldr	r3, [r7, #32]
 80112e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80112e6:	1c5a      	adds	r2, r3, #1
 80112e8:	6a3b      	ldr	r3, [r7, #32]
 80112ea:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 80112ec:	e00d      	b.n	801130a <xTaskGenericNotify+0xaa>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80112ee:	6a3b      	ldr	r3, [r7, #32]
 80112f0:	68ba      	ldr	r2, [r7, #8]
 80112f2:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 80112f4:	e009      	b.n	801130a <xTaskGenericNotify+0xaa>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80112f6:	7ffb      	ldrb	r3, [r7, #31]
 80112f8:	2b02      	cmp	r3, #2
 80112fa:	d003      	beq.n	8011304 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80112fc:	6a3b      	ldr	r3, [r7, #32]
 80112fe:	68ba      	ldr	r2, [r7, #8]
 8011300:	65da      	str	r2, [r3, #92]	; 0x5c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8011302:	e001      	b.n	8011308 <xTaskGenericNotify+0xa8>
						xReturn = pdFAIL;
 8011304:	2300      	movs	r3, #0
 8011306:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8011308:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801130a:	7ffb      	ldrb	r3, [r7, #31]
 801130c:	2b01      	cmp	r3, #1
 801130e:	d13b      	bne.n	8011388 <xTaskGenericNotify+0x128>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011310:	6a3b      	ldr	r3, [r7, #32]
 8011312:	3304      	adds	r3, #4
 8011314:	4618      	mov	r0, r3
 8011316:	f7fd fbc5 	bl	800eaa4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 801131a:	6a3b      	ldr	r3, [r7, #32]
 801131c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801131e:	4b1e      	ldr	r3, [pc, #120]	; (8011398 <xTaskGenericNotify+0x138>)
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	429a      	cmp	r2, r3
 8011324:	d903      	bls.n	801132e <xTaskGenericNotify+0xce>
 8011326:	6a3b      	ldr	r3, [r7, #32]
 8011328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801132a:	4a1b      	ldr	r2, [pc, #108]	; (8011398 <xTaskGenericNotify+0x138>)
 801132c:	6013      	str	r3, [r2, #0]
 801132e:	6a3b      	ldr	r3, [r7, #32]
 8011330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011332:	4613      	mov	r3, r2
 8011334:	009b      	lsls	r3, r3, #2
 8011336:	4413      	add	r3, r2
 8011338:	009b      	lsls	r3, r3, #2
 801133a:	4a18      	ldr	r2, [pc, #96]	; (801139c <xTaskGenericNotify+0x13c>)
 801133c:	441a      	add	r2, r3
 801133e:	6a3b      	ldr	r3, [r7, #32]
 8011340:	3304      	adds	r3, #4
 8011342:	4619      	mov	r1, r3
 8011344:	4610      	mov	r0, r2
 8011346:	f7fd fb50 	bl	800e9ea <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801134a:	6a3b      	ldr	r3, [r7, #32]
 801134c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801134e:	2b00      	cmp	r3, #0
 8011350:	d009      	beq.n	8011366 <xTaskGenericNotify+0x106>
 8011352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011356:	f383 8811 	msr	BASEPRI, r3
 801135a:	f3bf 8f6f 	isb	sy
 801135e:	f3bf 8f4f 	dsb	sy
 8011362:	617b      	str	r3, [r7, #20]
 8011364:	e7fe      	b.n	8011364 <xTaskGenericNotify+0x104>
					the tick count equals xNextTaskUnblockTime.  However if
					tickless idling is used it might be more important to enter
					sleep mode at the earliest possible time - so reset
					xNextTaskUnblockTime here to ensure it is updated at the
					earliest possible time. */
					prvResetNextTaskUnblockTime();
 8011366:	f7ff fd5b 	bl	8010e20 <prvResetNextTaskUnblockTime>
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801136a:	6a3b      	ldr	r3, [r7, #32]
 801136c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801136e:	4b0c      	ldr	r3, [pc, #48]	; (80113a0 <xTaskGenericNotify+0x140>)
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011374:	429a      	cmp	r2, r3
 8011376:	d907      	bls.n	8011388 <xTaskGenericNotify+0x128>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8011378:	4b0a      	ldr	r3, [pc, #40]	; (80113a4 <xTaskGenericNotify+0x144>)
 801137a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801137e:	601a      	str	r2, [r3, #0]
 8011380:	f3bf 8f4f 	dsb	sy
 8011384:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8011388:	f7fd fd0e 	bl	800eda8 <vPortExitCritical>

		return xReturn;
 801138c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 801138e:	4618      	mov	r0, r3
 8011390:	3728      	adds	r7, #40	; 0x28
 8011392:	46bd      	mov	sp, r7
 8011394:	bd80      	pop	{r7, pc}
 8011396:	bf00      	nop
 8011398:	200272a8 	.word	0x200272a8
 801139c:	20026dd0 	.word	0x20026dd0
 80113a0:	20026dcc 	.word	0x20026dcc
 80113a4:	e000ed04 	.word	0xe000ed04

080113a8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80113a8:	b580      	push	{r7, lr}
 80113aa:	b08e      	sub	sp, #56	; 0x38
 80113ac:	af00      	add	r7, sp, #0
 80113ae:	60f8      	str	r0, [r7, #12]
 80113b0:	60b9      	str	r1, [r7, #8]
 80113b2:	603b      	str	r3, [r7, #0]
 80113b4:	4613      	mov	r3, r2
 80113b6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80113b8:	2301      	movs	r3, #1
 80113ba:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d109      	bne.n	80113d6 <xTaskGenericNotifyFromISR+0x2e>
 80113c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113c6:	f383 8811 	msr	BASEPRI, r3
 80113ca:	f3bf 8f6f 	isb	sy
 80113ce:	f3bf 8f4f 	dsb	sy
 80113d2:	627b      	str	r3, [r7, #36]	; 0x24
 80113d4:	e7fe      	b.n	80113d4 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80113d6:	f7fd fd71 	bl	800eebc <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 80113da:	68fb      	ldr	r3, [r7, #12]
 80113dc:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 80113de:	f3ef 8211 	mrs	r2, BASEPRI
 80113e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113e6:	f383 8811 	msr	BASEPRI, r3
 80113ea:	f3bf 8f6f 	isb	sy
 80113ee:	f3bf 8f4f 	dsb	sy
 80113f2:	623a      	str	r2, [r7, #32]
 80113f4:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80113f6:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80113f8:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80113fa:	683b      	ldr	r3, [r7, #0]
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d003      	beq.n	8011408 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8011400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011402:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011404:	683b      	ldr	r3, [r7, #0]
 8011406:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8011408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801140a:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 801140e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8011412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011414:	2202      	movs	r2, #2
 8011416:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

			switch( eAction )
 801141a:	79fb      	ldrb	r3, [r7, #7]
 801141c:	2b04      	cmp	r3, #4
 801141e:	d829      	bhi.n	8011474 <xTaskGenericNotifyFromISR+0xcc>
 8011420:	a201      	add	r2, pc, #4	; (adr r2, 8011428 <xTaskGenericNotifyFromISR+0x80>)
 8011422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011426:	bf00      	nop
 8011428:	08011475 	.word	0x08011475
 801142c:	0801143d 	.word	0x0801143d
 8011430:	0801144b 	.word	0x0801144b
 8011434:	08011457 	.word	0x08011457
 8011438:	0801145f 	.word	0x0801145f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 801143c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801143e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011440:	68bb      	ldr	r3, [r7, #8]
 8011442:	431a      	orrs	r2, r3
 8011444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011446:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8011448:	e014      	b.n	8011474 <xTaskGenericNotifyFromISR+0xcc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801144a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801144c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801144e:	1c5a      	adds	r2, r3, #1
 8011450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011452:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8011454:	e00e      	b.n	8011474 <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8011456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011458:	68ba      	ldr	r2, [r7, #8]
 801145a:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 801145c:	e00a      	b.n	8011474 <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 801145e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011462:	2b02      	cmp	r3, #2
 8011464:	d003      	beq.n	801146e <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8011466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011468:	68ba      	ldr	r2, [r7, #8]
 801146a:	65da      	str	r2, [r3, #92]	; 0x5c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801146c:	e001      	b.n	8011472 <xTaskGenericNotifyFromISR+0xca>
						xReturn = pdFAIL;
 801146e:	2300      	movs	r3, #0
 8011470:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8011472:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8011474:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011478:	2b01      	cmp	r3, #1
 801147a:	d146      	bne.n	801150a <xTaskGenericNotifyFromISR+0x162>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801147c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801147e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011480:	2b00      	cmp	r3, #0
 8011482:	d009      	beq.n	8011498 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 8011484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011488:	f383 8811 	msr	BASEPRI, r3
 801148c:	f3bf 8f6f 	isb	sy
 8011490:	f3bf 8f4f 	dsb	sy
 8011494:	61bb      	str	r3, [r7, #24]
 8011496:	e7fe      	b.n	8011496 <xTaskGenericNotifyFromISR+0xee>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011498:	4b21      	ldr	r3, [pc, #132]	; (8011520 <xTaskGenericNotifyFromISR+0x178>)
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	2b00      	cmp	r3, #0
 801149e:	d11d      	bne.n	80114dc <xTaskGenericNotifyFromISR+0x134>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80114a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114a2:	3304      	adds	r3, #4
 80114a4:	4618      	mov	r0, r3
 80114a6:	f7fd fafd 	bl	800eaa4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80114aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114ae:	4b1d      	ldr	r3, [pc, #116]	; (8011524 <xTaskGenericNotifyFromISR+0x17c>)
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	429a      	cmp	r2, r3
 80114b4:	d903      	bls.n	80114be <xTaskGenericNotifyFromISR+0x116>
 80114b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114ba:	4a1a      	ldr	r2, [pc, #104]	; (8011524 <xTaskGenericNotifyFromISR+0x17c>)
 80114bc:	6013      	str	r3, [r2, #0]
 80114be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114c2:	4613      	mov	r3, r2
 80114c4:	009b      	lsls	r3, r3, #2
 80114c6:	4413      	add	r3, r2
 80114c8:	009b      	lsls	r3, r3, #2
 80114ca:	4a17      	ldr	r2, [pc, #92]	; (8011528 <xTaskGenericNotifyFromISR+0x180>)
 80114cc:	441a      	add	r2, r3
 80114ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114d0:	3304      	adds	r3, #4
 80114d2:	4619      	mov	r1, r3
 80114d4:	4610      	mov	r0, r2
 80114d6:	f7fd fa88 	bl	800e9ea <vListInsertEnd>
 80114da:	e005      	b.n	80114e8 <xTaskGenericNotifyFromISR+0x140>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80114dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114de:	3318      	adds	r3, #24
 80114e0:	4619      	mov	r1, r3
 80114e2:	4812      	ldr	r0, [pc, #72]	; (801152c <xTaskGenericNotifyFromISR+0x184>)
 80114e4:	f7fd fa81 	bl	800e9ea <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80114e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114ec:	4b10      	ldr	r3, [pc, #64]	; (8011530 <xTaskGenericNotifyFromISR+0x188>)
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114f2:	429a      	cmp	r2, r3
 80114f4:	d909      	bls.n	801150a <xTaskGenericNotifyFromISR+0x162>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80114f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d003      	beq.n	8011504 <xTaskGenericNotifyFromISR+0x15c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80114fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80114fe:	2201      	movs	r2, #1
 8011500:	601a      	str	r2, [r3, #0]
 8011502:	e002      	b.n	801150a <xTaskGenericNotifyFromISR+0x162>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 8011504:	4b0b      	ldr	r3, [pc, #44]	; (8011534 <xTaskGenericNotifyFromISR+0x18c>)
 8011506:	2201      	movs	r2, #1
 8011508:	601a      	str	r2, [r3, #0]
 801150a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801150c:	617b      	str	r3, [r7, #20]
	__asm volatile
 801150e:	697b      	ldr	r3, [r7, #20]
 8011510:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8011514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8011516:	4618      	mov	r0, r3
 8011518:	3738      	adds	r7, #56	; 0x38
 801151a:	46bd      	mov	sp, r7
 801151c:	bd80      	pop	{r7, pc}
 801151e:	bf00      	nop
 8011520:	200272c8 	.word	0x200272c8
 8011524:	200272a8 	.word	0x200272a8
 8011528:	20026dd0 	.word	0x20026dd0
 801152c:	20027260 	.word	0x20027260
 8011530:	20026dcc 	.word	0x20026dcc
 8011534:	200272b4 	.word	0x200272b4

08011538 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011538:	b580      	push	{r7, lr}
 801153a:	b084      	sub	sp, #16
 801153c:	af00      	add	r7, sp, #0
 801153e:	6078      	str	r0, [r7, #4]
 8011540:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011542:	4b21      	ldr	r3, [pc, #132]	; (80115c8 <prvAddCurrentTaskToDelayedList+0x90>)
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011548:	4b20      	ldr	r3, [pc, #128]	; (80115cc <prvAddCurrentTaskToDelayedList+0x94>)
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	3304      	adds	r3, #4
 801154e:	4618      	mov	r0, r3
 8011550:	f7fd faa8 	bl	800eaa4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	f1b3 3fff 	cmp.w	r3, #4294967295
 801155a:	d10a      	bne.n	8011572 <prvAddCurrentTaskToDelayedList+0x3a>
 801155c:	683b      	ldr	r3, [r7, #0]
 801155e:	2b00      	cmp	r3, #0
 8011560:	d007      	beq.n	8011572 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011562:	4b1a      	ldr	r3, [pc, #104]	; (80115cc <prvAddCurrentTaskToDelayedList+0x94>)
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	3304      	adds	r3, #4
 8011568:	4619      	mov	r1, r3
 801156a:	4819      	ldr	r0, [pc, #100]	; (80115d0 <prvAddCurrentTaskToDelayedList+0x98>)
 801156c:	f7fd fa3d 	bl	800e9ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011570:	e026      	b.n	80115c0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011572:	68fa      	ldr	r2, [r7, #12]
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	4413      	add	r3, r2
 8011578:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801157a:	4b14      	ldr	r3, [pc, #80]	; (80115cc <prvAddCurrentTaskToDelayedList+0x94>)
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	68ba      	ldr	r2, [r7, #8]
 8011580:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011582:	68ba      	ldr	r2, [r7, #8]
 8011584:	68fb      	ldr	r3, [r7, #12]
 8011586:	429a      	cmp	r2, r3
 8011588:	d209      	bcs.n	801159e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801158a:	4b12      	ldr	r3, [pc, #72]	; (80115d4 <prvAddCurrentTaskToDelayedList+0x9c>)
 801158c:	681a      	ldr	r2, [r3, #0]
 801158e:	4b0f      	ldr	r3, [pc, #60]	; (80115cc <prvAddCurrentTaskToDelayedList+0x94>)
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	3304      	adds	r3, #4
 8011594:	4619      	mov	r1, r3
 8011596:	4610      	mov	r0, r2
 8011598:	f7fd fa4b 	bl	800ea32 <vListInsert>
}
 801159c:	e010      	b.n	80115c0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801159e:	4b0e      	ldr	r3, [pc, #56]	; (80115d8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80115a0:	681a      	ldr	r2, [r3, #0]
 80115a2:	4b0a      	ldr	r3, [pc, #40]	; (80115cc <prvAddCurrentTaskToDelayedList+0x94>)
 80115a4:	681b      	ldr	r3, [r3, #0]
 80115a6:	3304      	adds	r3, #4
 80115a8:	4619      	mov	r1, r3
 80115aa:	4610      	mov	r0, r2
 80115ac:	f7fd fa41 	bl	800ea32 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80115b0:	4b0a      	ldr	r3, [pc, #40]	; (80115dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	68ba      	ldr	r2, [r7, #8]
 80115b6:	429a      	cmp	r2, r3
 80115b8:	d202      	bcs.n	80115c0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80115ba:	4a08      	ldr	r2, [pc, #32]	; (80115dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80115bc:	68bb      	ldr	r3, [r7, #8]
 80115be:	6013      	str	r3, [r2, #0]
}
 80115c0:	bf00      	nop
 80115c2:	3710      	adds	r7, #16
 80115c4:	46bd      	mov	sp, r7
 80115c6:	bd80      	pop	{r7, pc}
 80115c8:	200272a4 	.word	0x200272a4
 80115cc:	20026dcc 	.word	0x20026dcc
 80115d0:	2002728c 	.word	0x2002728c
 80115d4:	2002725c 	.word	0x2002725c
 80115d8:	20027258 	.word	0x20027258
 80115dc:	200272c0 	.word	0x200272c0

080115e0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80115e0:	b580      	push	{r7, lr}
 80115e2:	b08a      	sub	sp, #40	; 0x28
 80115e4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80115e6:	2300      	movs	r3, #0
 80115e8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80115ea:	f000 fb51 	bl	8011c90 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80115ee:	4b1c      	ldr	r3, [pc, #112]	; (8011660 <xTimerCreateTimerTask+0x80>)
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d021      	beq.n	801163a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80115f6:	2300      	movs	r3, #0
 80115f8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80115fa:	2300      	movs	r3, #0
 80115fc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80115fe:	1d3a      	adds	r2, r7, #4
 8011600:	f107 0108 	add.w	r1, r7, #8
 8011604:	f107 030c 	add.w	r3, r7, #12
 8011608:	4618      	mov	r0, r3
 801160a:	f7fc ffcb 	bl	800e5a4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801160e:	6879      	ldr	r1, [r7, #4]
 8011610:	68bb      	ldr	r3, [r7, #8]
 8011612:	68fa      	ldr	r2, [r7, #12]
 8011614:	9202      	str	r2, [sp, #8]
 8011616:	9301      	str	r3, [sp, #4]
 8011618:	2302      	movs	r3, #2
 801161a:	9300      	str	r3, [sp, #0]
 801161c:	2300      	movs	r3, #0
 801161e:	460a      	mov	r2, r1
 8011620:	4910      	ldr	r1, [pc, #64]	; (8011664 <xTimerCreateTimerTask+0x84>)
 8011622:	4811      	ldr	r0, [pc, #68]	; (8011668 <xTimerCreateTimerTask+0x88>)
 8011624:	f7fe fd28 	bl	8010078 <xTaskCreateStatic>
 8011628:	4602      	mov	r2, r0
 801162a:	4b10      	ldr	r3, [pc, #64]	; (801166c <xTimerCreateTimerTask+0x8c>)
 801162c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801162e:	4b0f      	ldr	r3, [pc, #60]	; (801166c <xTimerCreateTimerTask+0x8c>)
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	2b00      	cmp	r3, #0
 8011634:	d001      	beq.n	801163a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8011636:	2301      	movs	r3, #1
 8011638:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801163a:	697b      	ldr	r3, [r7, #20]
 801163c:	2b00      	cmp	r3, #0
 801163e:	d109      	bne.n	8011654 <xTimerCreateTimerTask+0x74>
	__asm volatile
 8011640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011644:	f383 8811 	msr	BASEPRI, r3
 8011648:	f3bf 8f6f 	isb	sy
 801164c:	f3bf 8f4f 	dsb	sy
 8011650:	613b      	str	r3, [r7, #16]
 8011652:	e7fe      	b.n	8011652 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8011654:	697b      	ldr	r3, [r7, #20]
}
 8011656:	4618      	mov	r0, r3
 8011658:	3718      	adds	r7, #24
 801165a:	46bd      	mov	sp, r7
 801165c:	bd80      	pop	{r7, pc}
 801165e:	bf00      	nop
 8011660:	20027304 	.word	0x20027304
 8011664:	080164f4 	.word	0x080164f4
 8011668:	080118a5 	.word	0x080118a5
 801166c:	20027308 	.word	0x20027308

08011670 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8011670:	b580      	push	{r7, lr}
 8011672:	b088      	sub	sp, #32
 8011674:	af02      	add	r7, sp, #8
 8011676:	60f8      	str	r0, [r7, #12]
 8011678:	60b9      	str	r1, [r7, #8]
 801167a:	607a      	str	r2, [r7, #4]
 801167c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 801167e:	2030      	movs	r0, #48	; 0x30
 8011680:	f7fc ffaa 	bl	800e5d8 <pvPortMalloc>
 8011684:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8011686:	697b      	ldr	r3, [r7, #20]
 8011688:	2b00      	cmp	r3, #0
 801168a:	d00d      	beq.n	80116a8 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 801168c:	697b      	ldr	r3, [r7, #20]
 801168e:	9301      	str	r3, [sp, #4]
 8011690:	6a3b      	ldr	r3, [r7, #32]
 8011692:	9300      	str	r3, [sp, #0]
 8011694:	683b      	ldr	r3, [r7, #0]
 8011696:	687a      	ldr	r2, [r7, #4]
 8011698:	68b9      	ldr	r1, [r7, #8]
 801169a:	68f8      	ldr	r0, [r7, #12]
 801169c:	f000 f844 	bl	8011728 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 80116a0:	697b      	ldr	r3, [r7, #20]
 80116a2:	2200      	movs	r2, #0
 80116a4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 80116a8:	697b      	ldr	r3, [r7, #20]
	}
 80116aa:	4618      	mov	r0, r3
 80116ac:	3718      	adds	r7, #24
 80116ae:	46bd      	mov	sp, r7
 80116b0:	bd80      	pop	{r7, pc}

080116b2 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 80116b2:	b580      	push	{r7, lr}
 80116b4:	b08a      	sub	sp, #40	; 0x28
 80116b6:	af02      	add	r7, sp, #8
 80116b8:	60f8      	str	r0, [r7, #12]
 80116ba:	60b9      	str	r1, [r7, #8]
 80116bc:	607a      	str	r2, [r7, #4]
 80116be:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80116c0:	2330      	movs	r3, #48	; 0x30
 80116c2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80116c4:	693b      	ldr	r3, [r7, #16]
 80116c6:	2b30      	cmp	r3, #48	; 0x30
 80116c8:	d009      	beq.n	80116de <xTimerCreateStatic+0x2c>
 80116ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116ce:	f383 8811 	msr	BASEPRI, r3
 80116d2:	f3bf 8f6f 	isb	sy
 80116d6:	f3bf 8f4f 	dsb	sy
 80116da:	61bb      	str	r3, [r7, #24]
 80116dc:	e7fe      	b.n	80116dc <xTimerCreateStatic+0x2a>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80116de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d109      	bne.n	80116f8 <xTimerCreateStatic+0x46>
 80116e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116e8:	f383 8811 	msr	BASEPRI, r3
 80116ec:	f3bf 8f6f 	isb	sy
 80116f0:	f3bf 8f4f 	dsb	sy
 80116f4:	617b      	str	r3, [r7, #20]
 80116f6:	e7fe      	b.n	80116f6 <xTimerCreateStatic+0x44>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80116f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116fa:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80116fc:	69fb      	ldr	r3, [r7, #28]
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d00d      	beq.n	801171e <xTimerCreateStatic+0x6c>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8011702:	69fb      	ldr	r3, [r7, #28]
 8011704:	9301      	str	r3, [sp, #4]
 8011706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011708:	9300      	str	r3, [sp, #0]
 801170a:	683b      	ldr	r3, [r7, #0]
 801170c:	687a      	ldr	r2, [r7, #4]
 801170e:	68b9      	ldr	r1, [r7, #8]
 8011710:	68f8      	ldr	r0, [r7, #12]
 8011712:	f000 f809 	bl	8011728 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8011716:	69fb      	ldr	r3, [r7, #28]
 8011718:	2201      	movs	r2, #1
 801171a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 801171e:	69fb      	ldr	r3, [r7, #28]
	}
 8011720:	4618      	mov	r0, r3
 8011722:	3720      	adds	r7, #32
 8011724:	46bd      	mov	sp, r7
 8011726:	bd80      	pop	{r7, pc}

08011728 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8011728:	b580      	push	{r7, lr}
 801172a:	b086      	sub	sp, #24
 801172c:	af00      	add	r7, sp, #0
 801172e:	60f8      	str	r0, [r7, #12]
 8011730:	60b9      	str	r1, [r7, #8]
 8011732:	607a      	str	r2, [r7, #4]
 8011734:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8011736:	68bb      	ldr	r3, [r7, #8]
 8011738:	2b00      	cmp	r3, #0
 801173a:	d109      	bne.n	8011750 <prvInitialiseNewTimer+0x28>
 801173c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011740:	f383 8811 	msr	BASEPRI, r3
 8011744:	f3bf 8f6f 	isb	sy
 8011748:	f3bf 8f4f 	dsb	sy
 801174c:	617b      	str	r3, [r7, #20]
 801174e:	e7fe      	b.n	801174e <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 8011750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011752:	2b00      	cmp	r3, #0
 8011754:	d015      	beq.n	8011782 <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8011756:	f000 fa9b 	bl	8011c90 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 801175a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801175c:	68fa      	ldr	r2, [r7, #12]
 801175e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8011760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011762:	68ba      	ldr	r2, [r7, #8]
 8011764:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8011766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011768:	687a      	ldr	r2, [r7, #4]
 801176a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 801176c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801176e:	683a      	ldr	r2, [r7, #0]
 8011770:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8011772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011774:	6a3a      	ldr	r2, [r7, #32]
 8011776:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8011778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801177a:	3304      	adds	r3, #4
 801177c:	4618      	mov	r0, r3
 801177e:	f7fd f927 	bl	800e9d0 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8011782:	bf00      	nop
 8011784:	3718      	adds	r7, #24
 8011786:	46bd      	mov	sp, r7
 8011788:	bd80      	pop	{r7, pc}
	...

0801178c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801178c:	b580      	push	{r7, lr}
 801178e:	b08a      	sub	sp, #40	; 0x28
 8011790:	af00      	add	r7, sp, #0
 8011792:	60f8      	str	r0, [r7, #12]
 8011794:	60b9      	str	r1, [r7, #8]
 8011796:	607a      	str	r2, [r7, #4]
 8011798:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801179a:	2300      	movs	r3, #0
 801179c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d109      	bne.n	80117b8 <xTimerGenericCommand+0x2c>
 80117a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117a8:	f383 8811 	msr	BASEPRI, r3
 80117ac:	f3bf 8f6f 	isb	sy
 80117b0:	f3bf 8f4f 	dsb	sy
 80117b4:	623b      	str	r3, [r7, #32]
 80117b6:	e7fe      	b.n	80117b6 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80117b8:	4b19      	ldr	r3, [pc, #100]	; (8011820 <xTimerGenericCommand+0x94>)
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d02a      	beq.n	8011816 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80117c0:	68bb      	ldr	r3, [r7, #8]
 80117c2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80117c8:	68fb      	ldr	r3, [r7, #12]
 80117ca:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80117cc:	68bb      	ldr	r3, [r7, #8]
 80117ce:	2b05      	cmp	r3, #5
 80117d0:	dc18      	bgt.n	8011804 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80117d2:	f7ff fb5b 	bl	8010e8c <xTaskGetSchedulerState>
 80117d6:	4603      	mov	r3, r0
 80117d8:	2b02      	cmp	r3, #2
 80117da:	d109      	bne.n	80117f0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80117dc:	4b10      	ldr	r3, [pc, #64]	; (8011820 <xTimerGenericCommand+0x94>)
 80117de:	6818      	ldr	r0, [r3, #0]
 80117e0:	f107 0110 	add.w	r1, r7, #16
 80117e4:	2300      	movs	r3, #0
 80117e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80117e8:	f7fd fdfc 	bl	800f3e4 <xQueueGenericSend>
 80117ec:	6278      	str	r0, [r7, #36]	; 0x24
 80117ee:	e012      	b.n	8011816 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80117f0:	4b0b      	ldr	r3, [pc, #44]	; (8011820 <xTimerGenericCommand+0x94>)
 80117f2:	6818      	ldr	r0, [r3, #0]
 80117f4:	f107 0110 	add.w	r1, r7, #16
 80117f8:	2300      	movs	r3, #0
 80117fa:	2200      	movs	r2, #0
 80117fc:	f7fd fdf2 	bl	800f3e4 <xQueueGenericSend>
 8011800:	6278      	str	r0, [r7, #36]	; 0x24
 8011802:	e008      	b.n	8011816 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8011804:	4b06      	ldr	r3, [pc, #24]	; (8011820 <xTimerGenericCommand+0x94>)
 8011806:	6818      	ldr	r0, [r3, #0]
 8011808:	f107 0110 	add.w	r1, r7, #16
 801180c:	2300      	movs	r3, #0
 801180e:	683a      	ldr	r2, [r7, #0]
 8011810:	f7fd fee2 	bl	800f5d8 <xQueueGenericSendFromISR>
 8011814:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8011816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011818:	4618      	mov	r0, r3
 801181a:	3728      	adds	r7, #40	; 0x28
 801181c:	46bd      	mov	sp, r7
 801181e:	bd80      	pop	{r7, pc}
 8011820:	20027304 	.word	0x20027304

08011824 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8011824:	b580      	push	{r7, lr}
 8011826:	b088      	sub	sp, #32
 8011828:	af02      	add	r7, sp, #8
 801182a:	6078      	str	r0, [r7, #4]
 801182c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 801182e:	4b1c      	ldr	r3, [pc, #112]	; (80118a0 <prvProcessExpiredTimer+0x7c>)
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	68db      	ldr	r3, [r3, #12]
 8011834:	68db      	ldr	r3, [r3, #12]
 8011836:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011838:	697b      	ldr	r3, [r7, #20]
 801183a:	3304      	adds	r3, #4
 801183c:	4618      	mov	r0, r3
 801183e:	f7fd f931 	bl	800eaa4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8011842:	697b      	ldr	r3, [r7, #20]
 8011844:	69db      	ldr	r3, [r3, #28]
 8011846:	2b01      	cmp	r3, #1
 8011848:	d121      	bne.n	801188e <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801184a:	697b      	ldr	r3, [r7, #20]
 801184c:	699a      	ldr	r2, [r3, #24]
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	18d1      	adds	r1, r2, r3
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	683a      	ldr	r2, [r7, #0]
 8011856:	6978      	ldr	r0, [r7, #20]
 8011858:	f000 f8c8 	bl	80119ec <prvInsertTimerInActiveList>
 801185c:	4603      	mov	r3, r0
 801185e:	2b00      	cmp	r3, #0
 8011860:	d015      	beq.n	801188e <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011862:	2300      	movs	r3, #0
 8011864:	9300      	str	r3, [sp, #0]
 8011866:	2300      	movs	r3, #0
 8011868:	687a      	ldr	r2, [r7, #4]
 801186a:	2100      	movs	r1, #0
 801186c:	6978      	ldr	r0, [r7, #20]
 801186e:	f7ff ff8d 	bl	801178c <xTimerGenericCommand>
 8011872:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8011874:	693b      	ldr	r3, [r7, #16]
 8011876:	2b00      	cmp	r3, #0
 8011878:	d109      	bne.n	801188e <prvProcessExpiredTimer+0x6a>
 801187a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801187e:	f383 8811 	msr	BASEPRI, r3
 8011882:	f3bf 8f6f 	isb	sy
 8011886:	f3bf 8f4f 	dsb	sy
 801188a:	60fb      	str	r3, [r7, #12]
 801188c:	e7fe      	b.n	801188c <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801188e:	697b      	ldr	r3, [r7, #20]
 8011890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011892:	6978      	ldr	r0, [r7, #20]
 8011894:	4798      	blx	r3
}
 8011896:	bf00      	nop
 8011898:	3718      	adds	r7, #24
 801189a:	46bd      	mov	sp, r7
 801189c:	bd80      	pop	{r7, pc}
 801189e:	bf00      	nop
 80118a0:	200272fc 	.word	0x200272fc

080118a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80118a4:	b580      	push	{r7, lr}
 80118a6:	b084      	sub	sp, #16
 80118a8:	af00      	add	r7, sp, #0
 80118aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80118ac:	f107 0308 	add.w	r3, r7, #8
 80118b0:	4618      	mov	r0, r3
 80118b2:	f000 f857 	bl	8011964 <prvGetNextExpireTime>
 80118b6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80118b8:	68bb      	ldr	r3, [r7, #8]
 80118ba:	4619      	mov	r1, r3
 80118bc:	68f8      	ldr	r0, [r7, #12]
 80118be:	f000 f803 	bl	80118c8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80118c2:	f000 f8d5 	bl	8011a70 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80118c6:	e7f1      	b.n	80118ac <prvTimerTask+0x8>

080118c8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80118c8:	b580      	push	{r7, lr}
 80118ca:	b084      	sub	sp, #16
 80118cc:	af00      	add	r7, sp, #0
 80118ce:	6078      	str	r0, [r7, #4]
 80118d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80118d2:	f7fe fe05 	bl	80104e0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80118d6:	f107 0308 	add.w	r3, r7, #8
 80118da:	4618      	mov	r0, r3
 80118dc:	f000 f866 	bl	80119ac <prvSampleTimeNow>
 80118e0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80118e2:	68bb      	ldr	r3, [r7, #8]
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d130      	bne.n	801194a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80118e8:	683b      	ldr	r3, [r7, #0]
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d10a      	bne.n	8011904 <prvProcessTimerOrBlockTask+0x3c>
 80118ee:	687a      	ldr	r2, [r7, #4]
 80118f0:	68fb      	ldr	r3, [r7, #12]
 80118f2:	429a      	cmp	r2, r3
 80118f4:	d806      	bhi.n	8011904 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80118f6:	f7fe fe39 	bl	801056c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80118fa:	68f9      	ldr	r1, [r7, #12]
 80118fc:	6878      	ldr	r0, [r7, #4]
 80118fe:	f7ff ff91 	bl	8011824 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8011902:	e024      	b.n	801194e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8011904:	683b      	ldr	r3, [r7, #0]
 8011906:	2b00      	cmp	r3, #0
 8011908:	d008      	beq.n	801191c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801190a:	4b13      	ldr	r3, [pc, #76]	; (8011958 <prvProcessTimerOrBlockTask+0x90>)
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	681b      	ldr	r3, [r3, #0]
 8011910:	2b00      	cmp	r3, #0
 8011912:	bf0c      	ite	eq
 8011914:	2301      	moveq	r3, #1
 8011916:	2300      	movne	r3, #0
 8011918:	b2db      	uxtb	r3, r3
 801191a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801191c:	4b0f      	ldr	r3, [pc, #60]	; (801195c <prvProcessTimerOrBlockTask+0x94>)
 801191e:	6818      	ldr	r0, [r3, #0]
 8011920:	687a      	ldr	r2, [r7, #4]
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	1ad3      	subs	r3, r2, r3
 8011926:	683a      	ldr	r2, [r7, #0]
 8011928:	4619      	mov	r1, r3
 801192a:	f7fe fb71 	bl	8010010 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801192e:	f7fe fe1d 	bl	801056c <xTaskResumeAll>
 8011932:	4603      	mov	r3, r0
 8011934:	2b00      	cmp	r3, #0
 8011936:	d10a      	bne.n	801194e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8011938:	4b09      	ldr	r3, [pc, #36]	; (8011960 <prvProcessTimerOrBlockTask+0x98>)
 801193a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801193e:	601a      	str	r2, [r3, #0]
 8011940:	f3bf 8f4f 	dsb	sy
 8011944:	f3bf 8f6f 	isb	sy
}
 8011948:	e001      	b.n	801194e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801194a:	f7fe fe0f 	bl	801056c <xTaskResumeAll>
}
 801194e:	bf00      	nop
 8011950:	3710      	adds	r7, #16
 8011952:	46bd      	mov	sp, r7
 8011954:	bd80      	pop	{r7, pc}
 8011956:	bf00      	nop
 8011958:	20027300 	.word	0x20027300
 801195c:	20027304 	.word	0x20027304
 8011960:	e000ed04 	.word	0xe000ed04

08011964 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8011964:	b480      	push	{r7}
 8011966:	b085      	sub	sp, #20
 8011968:	af00      	add	r7, sp, #0
 801196a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801196c:	4b0e      	ldr	r3, [pc, #56]	; (80119a8 <prvGetNextExpireTime+0x44>)
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	681b      	ldr	r3, [r3, #0]
 8011972:	2b00      	cmp	r3, #0
 8011974:	bf0c      	ite	eq
 8011976:	2301      	moveq	r3, #1
 8011978:	2300      	movne	r3, #0
 801197a:	b2db      	uxtb	r3, r3
 801197c:	461a      	mov	r2, r3
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	681b      	ldr	r3, [r3, #0]
 8011986:	2b00      	cmp	r3, #0
 8011988:	d105      	bne.n	8011996 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801198a:	4b07      	ldr	r3, [pc, #28]	; (80119a8 <prvGetNextExpireTime+0x44>)
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	68db      	ldr	r3, [r3, #12]
 8011990:	681b      	ldr	r3, [r3, #0]
 8011992:	60fb      	str	r3, [r7, #12]
 8011994:	e001      	b.n	801199a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8011996:	2300      	movs	r3, #0
 8011998:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801199a:	68fb      	ldr	r3, [r7, #12]
}
 801199c:	4618      	mov	r0, r3
 801199e:	3714      	adds	r7, #20
 80119a0:	46bd      	mov	sp, r7
 80119a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a6:	4770      	bx	lr
 80119a8:	200272fc 	.word	0x200272fc

080119ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80119ac:	b580      	push	{r7, lr}
 80119ae:	b084      	sub	sp, #16
 80119b0:	af00      	add	r7, sp, #0
 80119b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80119b4:	f7fe fe76 	bl	80106a4 <xTaskGetTickCount>
 80119b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80119ba:	4b0b      	ldr	r3, [pc, #44]	; (80119e8 <prvSampleTimeNow+0x3c>)
 80119bc:	681b      	ldr	r3, [r3, #0]
 80119be:	68fa      	ldr	r2, [r7, #12]
 80119c0:	429a      	cmp	r2, r3
 80119c2:	d205      	bcs.n	80119d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80119c4:	f000 f904 	bl	8011bd0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	2201      	movs	r2, #1
 80119cc:	601a      	str	r2, [r3, #0]
 80119ce:	e002      	b.n	80119d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	2200      	movs	r2, #0
 80119d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80119d6:	4a04      	ldr	r2, [pc, #16]	; (80119e8 <prvSampleTimeNow+0x3c>)
 80119d8:	68fb      	ldr	r3, [r7, #12]
 80119da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80119dc:	68fb      	ldr	r3, [r7, #12]
}
 80119de:	4618      	mov	r0, r3
 80119e0:	3710      	adds	r7, #16
 80119e2:	46bd      	mov	sp, r7
 80119e4:	bd80      	pop	{r7, pc}
 80119e6:	bf00      	nop
 80119e8:	2002730c 	.word	0x2002730c

080119ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80119ec:	b580      	push	{r7, lr}
 80119ee:	b086      	sub	sp, #24
 80119f0:	af00      	add	r7, sp, #0
 80119f2:	60f8      	str	r0, [r7, #12]
 80119f4:	60b9      	str	r1, [r7, #8]
 80119f6:	607a      	str	r2, [r7, #4]
 80119f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80119fa:	2300      	movs	r3, #0
 80119fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80119fe:	68fb      	ldr	r3, [r7, #12]
 8011a00:	68ba      	ldr	r2, [r7, #8]
 8011a02:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011a04:	68fb      	ldr	r3, [r7, #12]
 8011a06:	68fa      	ldr	r2, [r7, #12]
 8011a08:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8011a0a:	68ba      	ldr	r2, [r7, #8]
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	429a      	cmp	r2, r3
 8011a10:	d812      	bhi.n	8011a38 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011a12:	687a      	ldr	r2, [r7, #4]
 8011a14:	683b      	ldr	r3, [r7, #0]
 8011a16:	1ad2      	subs	r2, r2, r3
 8011a18:	68fb      	ldr	r3, [r7, #12]
 8011a1a:	699b      	ldr	r3, [r3, #24]
 8011a1c:	429a      	cmp	r2, r3
 8011a1e:	d302      	bcc.n	8011a26 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8011a20:	2301      	movs	r3, #1
 8011a22:	617b      	str	r3, [r7, #20]
 8011a24:	e01b      	b.n	8011a5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8011a26:	4b10      	ldr	r3, [pc, #64]	; (8011a68 <prvInsertTimerInActiveList+0x7c>)
 8011a28:	681a      	ldr	r2, [r3, #0]
 8011a2a:	68fb      	ldr	r3, [r7, #12]
 8011a2c:	3304      	adds	r3, #4
 8011a2e:	4619      	mov	r1, r3
 8011a30:	4610      	mov	r0, r2
 8011a32:	f7fc fffe 	bl	800ea32 <vListInsert>
 8011a36:	e012      	b.n	8011a5e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8011a38:	687a      	ldr	r2, [r7, #4]
 8011a3a:	683b      	ldr	r3, [r7, #0]
 8011a3c:	429a      	cmp	r2, r3
 8011a3e:	d206      	bcs.n	8011a4e <prvInsertTimerInActiveList+0x62>
 8011a40:	68ba      	ldr	r2, [r7, #8]
 8011a42:	683b      	ldr	r3, [r7, #0]
 8011a44:	429a      	cmp	r2, r3
 8011a46:	d302      	bcc.n	8011a4e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8011a48:	2301      	movs	r3, #1
 8011a4a:	617b      	str	r3, [r7, #20]
 8011a4c:	e007      	b.n	8011a5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011a4e:	4b07      	ldr	r3, [pc, #28]	; (8011a6c <prvInsertTimerInActiveList+0x80>)
 8011a50:	681a      	ldr	r2, [r3, #0]
 8011a52:	68fb      	ldr	r3, [r7, #12]
 8011a54:	3304      	adds	r3, #4
 8011a56:	4619      	mov	r1, r3
 8011a58:	4610      	mov	r0, r2
 8011a5a:	f7fc ffea 	bl	800ea32 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8011a5e:	697b      	ldr	r3, [r7, #20]
}
 8011a60:	4618      	mov	r0, r3
 8011a62:	3718      	adds	r7, #24
 8011a64:	46bd      	mov	sp, r7
 8011a66:	bd80      	pop	{r7, pc}
 8011a68:	20027300 	.word	0x20027300
 8011a6c:	200272fc 	.word	0x200272fc

08011a70 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8011a70:	b580      	push	{r7, lr}
 8011a72:	b08e      	sub	sp, #56	; 0x38
 8011a74:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011a76:	e099      	b.n	8011bac <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	da17      	bge.n	8011aae <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8011a7e:	1d3b      	adds	r3, r7, #4
 8011a80:	3304      	adds	r3, #4
 8011a82:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8011a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d109      	bne.n	8011a9e <prvProcessReceivedCommands+0x2e>
 8011a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a8e:	f383 8811 	msr	BASEPRI, r3
 8011a92:	f3bf 8f6f 	isb	sy
 8011a96:	f3bf 8f4f 	dsb	sy
 8011a9a:	61fb      	str	r3, [r7, #28]
 8011a9c:	e7fe      	b.n	8011a9c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8011a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011aa0:	681b      	ldr	r3, [r3, #0]
 8011aa2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011aa4:	6850      	ldr	r0, [r2, #4]
 8011aa6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011aa8:	6892      	ldr	r2, [r2, #8]
 8011aaa:	4611      	mov	r1, r2
 8011aac:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	db7a      	blt.n	8011baa <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8011ab4:	68fb      	ldr	r3, [r7, #12]
 8011ab6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8011ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011aba:	695b      	ldr	r3, [r3, #20]
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d004      	beq.n	8011aca <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ac2:	3304      	adds	r3, #4
 8011ac4:	4618      	mov	r0, r3
 8011ac6:	f7fc ffed 	bl	800eaa4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011aca:	463b      	mov	r3, r7
 8011acc:	4618      	mov	r0, r3
 8011ace:	f7ff ff6d 	bl	80119ac <prvSampleTimeNow>
 8011ad2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	2b09      	cmp	r3, #9
 8011ad8:	d868      	bhi.n	8011bac <prvProcessReceivedCommands+0x13c>
 8011ada:	a201      	add	r2, pc, #4	; (adr r2, 8011ae0 <prvProcessReceivedCommands+0x70>)
 8011adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ae0:	08011b09 	.word	0x08011b09
 8011ae4:	08011b09 	.word	0x08011b09
 8011ae8:	08011b09 	.word	0x08011b09
 8011aec:	08011bad 	.word	0x08011bad
 8011af0:	08011b63 	.word	0x08011b63
 8011af4:	08011b99 	.word	0x08011b99
 8011af8:	08011b09 	.word	0x08011b09
 8011afc:	08011b09 	.word	0x08011b09
 8011b00:	08011bad 	.word	0x08011bad
 8011b04:	08011b63 	.word	0x08011b63
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8011b08:	68ba      	ldr	r2, [r7, #8]
 8011b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b0c:	699b      	ldr	r3, [r3, #24]
 8011b0e:	18d1      	adds	r1, r2, r3
 8011b10:	68bb      	ldr	r3, [r7, #8]
 8011b12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011b16:	f7ff ff69 	bl	80119ec <prvInsertTimerInActiveList>
 8011b1a:	4603      	mov	r3, r0
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	d045      	beq.n	8011bac <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011b26:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8011b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b2a:	69db      	ldr	r3, [r3, #28]
 8011b2c:	2b01      	cmp	r3, #1
 8011b2e:	d13d      	bne.n	8011bac <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8011b30:	68ba      	ldr	r2, [r7, #8]
 8011b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b34:	699b      	ldr	r3, [r3, #24]
 8011b36:	441a      	add	r2, r3
 8011b38:	2300      	movs	r3, #0
 8011b3a:	9300      	str	r3, [sp, #0]
 8011b3c:	2300      	movs	r3, #0
 8011b3e:	2100      	movs	r1, #0
 8011b40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011b42:	f7ff fe23 	bl	801178c <xTimerGenericCommand>
 8011b46:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8011b48:	6a3b      	ldr	r3, [r7, #32]
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d12e      	bne.n	8011bac <prvProcessReceivedCommands+0x13c>
 8011b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b52:	f383 8811 	msr	BASEPRI, r3
 8011b56:	f3bf 8f6f 	isb	sy
 8011b5a:	f3bf 8f4f 	dsb	sy
 8011b5e:	61bb      	str	r3, [r7, #24]
 8011b60:	e7fe      	b.n	8011b60 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8011b62:	68ba      	ldr	r2, [r7, #8]
 8011b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b66:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8011b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b6a:	699b      	ldr	r3, [r3, #24]
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	d109      	bne.n	8011b84 <prvProcessReceivedCommands+0x114>
 8011b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b74:	f383 8811 	msr	BASEPRI, r3
 8011b78:	f3bf 8f6f 	isb	sy
 8011b7c:	f3bf 8f4f 	dsb	sy
 8011b80:	617b      	str	r3, [r7, #20]
 8011b82:	e7fe      	b.n	8011b82 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8011b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b86:	699a      	ldr	r2, [r3, #24]
 8011b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b8a:	18d1      	adds	r1, r2, r3
 8011b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011b92:	f7ff ff2b 	bl	80119ec <prvInsertTimerInActiveList>
					break;
 8011b96:	e009      	b.n	8011bac <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8011b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b9a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d104      	bne.n	8011bac <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8011ba2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011ba4:	f7fc fdde 	bl	800e764 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8011ba8:	e000      	b.n	8011bac <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8011baa:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011bac:	4b07      	ldr	r3, [pc, #28]	; (8011bcc <prvProcessReceivedCommands+0x15c>)
 8011bae:	681b      	ldr	r3, [r3, #0]
 8011bb0:	1d39      	adds	r1, r7, #4
 8011bb2:	2200      	movs	r2, #0
 8011bb4:	4618      	mov	r0, r3
 8011bb6:	f7fd fe2d 	bl	800f814 <xQueueReceive>
 8011bba:	4603      	mov	r3, r0
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	f47f af5b 	bne.w	8011a78 <prvProcessReceivedCommands+0x8>
	}
}
 8011bc2:	bf00      	nop
 8011bc4:	3730      	adds	r7, #48	; 0x30
 8011bc6:	46bd      	mov	sp, r7
 8011bc8:	bd80      	pop	{r7, pc}
 8011bca:	bf00      	nop
 8011bcc:	20027304 	.word	0x20027304

08011bd0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8011bd0:	b580      	push	{r7, lr}
 8011bd2:	b088      	sub	sp, #32
 8011bd4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011bd6:	e044      	b.n	8011c62 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011bd8:	4b2b      	ldr	r3, [pc, #172]	; (8011c88 <prvSwitchTimerLists+0xb8>)
 8011bda:	681b      	ldr	r3, [r3, #0]
 8011bdc:	68db      	ldr	r3, [r3, #12]
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011be2:	4b29      	ldr	r3, [pc, #164]	; (8011c88 <prvSwitchTimerLists+0xb8>)
 8011be4:	681b      	ldr	r3, [r3, #0]
 8011be6:	68db      	ldr	r3, [r3, #12]
 8011be8:	68db      	ldr	r3, [r3, #12]
 8011bea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011bec:	68fb      	ldr	r3, [r7, #12]
 8011bee:	3304      	adds	r3, #4
 8011bf0:	4618      	mov	r0, r3
 8011bf2:	f7fc ff57 	bl	800eaa4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011bf6:	68fb      	ldr	r3, [r7, #12]
 8011bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bfa:	68f8      	ldr	r0, [r7, #12]
 8011bfc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8011bfe:	68fb      	ldr	r3, [r7, #12]
 8011c00:	69db      	ldr	r3, [r3, #28]
 8011c02:	2b01      	cmp	r3, #1
 8011c04:	d12d      	bne.n	8011c62 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	699b      	ldr	r3, [r3, #24]
 8011c0a:	693a      	ldr	r2, [r7, #16]
 8011c0c:	4413      	add	r3, r2
 8011c0e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8011c10:	68ba      	ldr	r2, [r7, #8]
 8011c12:	693b      	ldr	r3, [r7, #16]
 8011c14:	429a      	cmp	r2, r3
 8011c16:	d90e      	bls.n	8011c36 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8011c18:	68fb      	ldr	r3, [r7, #12]
 8011c1a:	68ba      	ldr	r2, [r7, #8]
 8011c1c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011c1e:	68fb      	ldr	r3, [r7, #12]
 8011c20:	68fa      	ldr	r2, [r7, #12]
 8011c22:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011c24:	4b18      	ldr	r3, [pc, #96]	; (8011c88 <prvSwitchTimerLists+0xb8>)
 8011c26:	681a      	ldr	r2, [r3, #0]
 8011c28:	68fb      	ldr	r3, [r7, #12]
 8011c2a:	3304      	adds	r3, #4
 8011c2c:	4619      	mov	r1, r3
 8011c2e:	4610      	mov	r0, r2
 8011c30:	f7fc feff 	bl	800ea32 <vListInsert>
 8011c34:	e015      	b.n	8011c62 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011c36:	2300      	movs	r3, #0
 8011c38:	9300      	str	r3, [sp, #0]
 8011c3a:	2300      	movs	r3, #0
 8011c3c:	693a      	ldr	r2, [r7, #16]
 8011c3e:	2100      	movs	r1, #0
 8011c40:	68f8      	ldr	r0, [r7, #12]
 8011c42:	f7ff fda3 	bl	801178c <xTimerGenericCommand>
 8011c46:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d109      	bne.n	8011c62 <prvSwitchTimerLists+0x92>
 8011c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c52:	f383 8811 	msr	BASEPRI, r3
 8011c56:	f3bf 8f6f 	isb	sy
 8011c5a:	f3bf 8f4f 	dsb	sy
 8011c5e:	603b      	str	r3, [r7, #0]
 8011c60:	e7fe      	b.n	8011c60 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011c62:	4b09      	ldr	r3, [pc, #36]	; (8011c88 <prvSwitchTimerLists+0xb8>)
 8011c64:	681b      	ldr	r3, [r3, #0]
 8011c66:	681b      	ldr	r3, [r3, #0]
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d1b5      	bne.n	8011bd8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8011c6c:	4b06      	ldr	r3, [pc, #24]	; (8011c88 <prvSwitchTimerLists+0xb8>)
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8011c72:	4b06      	ldr	r3, [pc, #24]	; (8011c8c <prvSwitchTimerLists+0xbc>)
 8011c74:	681b      	ldr	r3, [r3, #0]
 8011c76:	4a04      	ldr	r2, [pc, #16]	; (8011c88 <prvSwitchTimerLists+0xb8>)
 8011c78:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8011c7a:	4a04      	ldr	r2, [pc, #16]	; (8011c8c <prvSwitchTimerLists+0xbc>)
 8011c7c:	697b      	ldr	r3, [r7, #20]
 8011c7e:	6013      	str	r3, [r2, #0]
}
 8011c80:	bf00      	nop
 8011c82:	3718      	adds	r7, #24
 8011c84:	46bd      	mov	sp, r7
 8011c86:	bd80      	pop	{r7, pc}
 8011c88:	200272fc 	.word	0x200272fc
 8011c8c:	20027300 	.word	0x20027300

08011c90 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8011c90:	b580      	push	{r7, lr}
 8011c92:	b082      	sub	sp, #8
 8011c94:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8011c96:	f7fd f859 	bl	800ed4c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8011c9a:	4b15      	ldr	r3, [pc, #84]	; (8011cf0 <prvCheckForValidListAndQueue+0x60>)
 8011c9c:	681b      	ldr	r3, [r3, #0]
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d120      	bne.n	8011ce4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8011ca2:	4814      	ldr	r0, [pc, #80]	; (8011cf4 <prvCheckForValidListAndQueue+0x64>)
 8011ca4:	f7fc fe74 	bl	800e990 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8011ca8:	4813      	ldr	r0, [pc, #76]	; (8011cf8 <prvCheckForValidListAndQueue+0x68>)
 8011caa:	f7fc fe71 	bl	800e990 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8011cae:	4b13      	ldr	r3, [pc, #76]	; (8011cfc <prvCheckForValidListAndQueue+0x6c>)
 8011cb0:	4a10      	ldr	r2, [pc, #64]	; (8011cf4 <prvCheckForValidListAndQueue+0x64>)
 8011cb2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8011cb4:	4b12      	ldr	r3, [pc, #72]	; (8011d00 <prvCheckForValidListAndQueue+0x70>)
 8011cb6:	4a10      	ldr	r2, [pc, #64]	; (8011cf8 <prvCheckForValidListAndQueue+0x68>)
 8011cb8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8011cba:	2300      	movs	r3, #0
 8011cbc:	9300      	str	r3, [sp, #0]
 8011cbe:	4b11      	ldr	r3, [pc, #68]	; (8011d04 <prvCheckForValidListAndQueue+0x74>)
 8011cc0:	4a11      	ldr	r2, [pc, #68]	; (8011d08 <prvCheckForValidListAndQueue+0x78>)
 8011cc2:	2110      	movs	r1, #16
 8011cc4:	200a      	movs	r0, #10
 8011cc6:	f7fd f99f 	bl	800f008 <xQueueGenericCreateStatic>
 8011cca:	4602      	mov	r2, r0
 8011ccc:	4b08      	ldr	r3, [pc, #32]	; (8011cf0 <prvCheckForValidListAndQueue+0x60>)
 8011cce:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8011cd0:	4b07      	ldr	r3, [pc, #28]	; (8011cf0 <prvCheckForValidListAndQueue+0x60>)
 8011cd2:	681b      	ldr	r3, [r3, #0]
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d005      	beq.n	8011ce4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8011cd8:	4b05      	ldr	r3, [pc, #20]	; (8011cf0 <prvCheckForValidListAndQueue+0x60>)
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	490b      	ldr	r1, [pc, #44]	; (8011d0c <prvCheckForValidListAndQueue+0x7c>)
 8011cde:	4618      	mov	r0, r3
 8011ce0:	f7fe f944 	bl	800ff6c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011ce4:	f7fd f860 	bl	800eda8 <vPortExitCritical>
}
 8011ce8:	bf00      	nop
 8011cea:	46bd      	mov	sp, r7
 8011cec:	bd80      	pop	{r7, pc}
 8011cee:	bf00      	nop
 8011cf0:	20027304 	.word	0x20027304
 8011cf4:	200272d4 	.word	0x200272d4
 8011cf8:	200272e8 	.word	0x200272e8
 8011cfc:	200272fc 	.word	0x200272fc
 8011d00:	20027300 	.word	0x20027300
 8011d04:	200273b0 	.word	0x200273b0
 8011d08:	20027310 	.word	0x20027310
 8011d0c:	080164fc 	.word	0x080164fc

08011d10 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 8011d10:	b580      	push	{r7, lr}
 8011d12:	b086      	sub	sp, #24
 8011d14:	af00      	add	r7, sp, #0
 8011d16:	6078      	str	r0, [r7, #4]
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	617b      	str	r3, [r7, #20]

	configASSERT( xTimer );
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d109      	bne.n	8011d36 <xTimerIsTimerActive+0x26>
 8011d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d26:	f383 8811 	msr	BASEPRI, r3
 8011d2a:	f3bf 8f6f 	isb	sy
 8011d2e:	f3bf 8f4f 	dsb	sy
 8011d32:	60fb      	str	r3, [r7, #12]
 8011d34:	e7fe      	b.n	8011d34 <xTimerIsTimerActive+0x24>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 8011d36:	f7fd f809 	bl	800ed4c <vPortEnterCritical>
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) ); /*lint !e961. Cast is only redundant when NULL is passed into the macro. */
 8011d3a:	697b      	ldr	r3, [r7, #20]
 8011d3c:	695b      	ldr	r3, [r3, #20]
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	bf14      	ite	ne
 8011d42:	2301      	movne	r3, #1
 8011d44:	2300      	moveq	r3, #0
 8011d46:	b2db      	uxtb	r3, r3
 8011d48:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8011d4a:	f7fd f82d 	bl	800eda8 <vPortExitCritical>

	return xTimerIsInActiveList;
 8011d4e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 8011d50:	4618      	mov	r0, r3
 8011d52:	3718      	adds	r7, #24
 8011d54:	46bd      	mov	sp, r7
 8011d56:	bd80      	pop	{r7, pc}

08011d58 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8011d58:	b580      	push	{r7, lr}
 8011d5a:	b086      	sub	sp, #24
 8011d5c:	af00      	add	r7, sp, #0
 8011d5e:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d109      	bne.n	8011d7e <pvTimerGetTimerID+0x26>
 8011d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d6e:	f383 8811 	msr	BASEPRI, r3
 8011d72:	f3bf 8f6f 	isb	sy
 8011d76:	f3bf 8f4f 	dsb	sy
 8011d7a:	60fb      	str	r3, [r7, #12]
 8011d7c:	e7fe      	b.n	8011d7c <pvTimerGetTimerID+0x24>

	taskENTER_CRITICAL();
 8011d7e:	f7fc ffe5 	bl	800ed4c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8011d82:	697b      	ldr	r3, [r7, #20]
 8011d84:	6a1b      	ldr	r3, [r3, #32]
 8011d86:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8011d88:	f7fd f80e 	bl	800eda8 <vPortExitCritical>

	return pvReturn;
 8011d8c:	693b      	ldr	r3, [r7, #16]
}
 8011d8e:	4618      	mov	r0, r3
 8011d90:	3718      	adds	r7, #24
 8011d92:	46bd      	mov	sp, r7
 8011d94:	bd80      	pop	{r7, pc}

08011d96 <otCoapHeaderInit>:


#if OPENTHREAD_ENABLE_APPLICATION_COAP

void otCoapHeaderInit(otCoapHeader *aHeader, otCoapType aType, otCoapCode aCode)
{
 8011d96:	b580      	push	{r7, lr}
 8011d98:	b084      	sub	sp, #16
 8011d9a:	af00      	add	r7, sp, #0
 8011d9c:	6078      	str	r0, [r7, #4]
 8011d9e:	460b      	mov	r3, r1
 8011da0:	70fb      	strb	r3, [r7, #3]
 8011da2:	4613      	mov	r3, r2
 8011da4:	70bb      	strb	r3, [r7, #2]
    Pre_OtCmdProcessing();
 8011da6:	f002 fb0d 	bl	80143c4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8011daa:	f002 faa9 	bl	8014300 <THREAD_Get_OTCmdPayloadBuffer>
 8011dae:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_INIT;
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	2200      	movs	r2, #0
 8011db4:	f062 0260 	orn	r2, r2, #96	; 0x60
 8011db8:	701a      	strb	r2, [r3, #0]
 8011dba:	2200      	movs	r2, #0
 8011dbc:	705a      	strb	r2, [r3, #1]
 8011dbe:	2200      	movs	r2, #0
 8011dc0:	709a      	strb	r2, [r3, #2]
 8011dc2:	2200      	movs	r2, #0
 8011dc4:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	2200      	movs	r2, #0
 8011dca:	f042 0203 	orr.w	r2, r2, #3
 8011dce:	711a      	strb	r2, [r3, #4]
 8011dd0:	2200      	movs	r2, #0
 8011dd2:	715a      	strb	r2, [r3, #5]
 8011dd4:	2200      	movs	r2, #0
 8011dd6:	719a      	strb	r2, [r3, #6]
 8011dd8:	2200      	movs	r2, #0
 8011dda:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8011ddc:	687a      	ldr	r2, [r7, #4]
 8011dde:	68fb      	ldr	r3, [r7, #12]
 8011de0:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = aType;
 8011de2:	78fa      	ldrb	r2, [r7, #3]
 8011de4:	68fb      	ldr	r3, [r7, #12]
 8011de6:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (otCoapCode) aCode;
 8011de8:	78ba      	ldrb	r2, [r7, #2]
 8011dea:	68fb      	ldr	r3, [r7, #12]
 8011dec:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 8011dee:	f002 faab 	bl	8014348 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8011df2:	f002 fa91 	bl	8014318 <THREAD_Get_OTCmdRspPayloadBuffer>
 8011df6:	60f8      	str	r0, [r7, #12]
}
 8011df8:	bf00      	nop
 8011dfa:	3710      	adds	r7, #16
 8011dfc:	46bd      	mov	sp, r7
 8011dfe:	bd80      	pop	{r7, pc}

08011e00 <otCoapHeaderSetToken>:

void otCoapHeaderSetToken(otCoapHeader *aHeader, const uint8_t *aToken, uint8_t aTokenLength)
{
 8011e00:	b580      	push	{r7, lr}
 8011e02:	b086      	sub	sp, #24
 8011e04:	af00      	add	r7, sp, #0
 8011e06:	60f8      	str	r0, [r7, #12]
 8011e08:	60b9      	str	r1, [r7, #8]
 8011e0a:	4613      	mov	r3, r2
 8011e0c:	71fb      	strb	r3, [r7, #7]
    Pre_OtCmdProcessing();
 8011e0e:	f002 fad9 	bl	80143c4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8011e12:	f002 fa75 	bl	8014300 <THREAD_Get_OTCmdPayloadBuffer>
 8011e16:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_TOKEN;
 8011e18:	697b      	ldr	r3, [r7, #20]
 8011e1a:	2200      	movs	r2, #0
 8011e1c:	f062 025f 	orn	r2, r2, #95	; 0x5f
 8011e20:	701a      	strb	r2, [r3, #0]
 8011e22:	2200      	movs	r2, #0
 8011e24:	705a      	strb	r2, [r3, #1]
 8011e26:	2200      	movs	r2, #0
 8011e28:	709a      	strb	r2, [r3, #2]
 8011e2a:	2200      	movs	r2, #0
 8011e2c:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 8011e2e:	697b      	ldr	r3, [r7, #20]
 8011e30:	2200      	movs	r2, #0
 8011e32:	f042 0203 	orr.w	r2, r2, #3
 8011e36:	711a      	strb	r2, [r3, #4]
 8011e38:	2200      	movs	r2, #0
 8011e3a:	715a      	strb	r2, [r3, #5]
 8011e3c:	2200      	movs	r2, #0
 8011e3e:	719a      	strb	r2, [r3, #6]
 8011e40:	2200      	movs	r2, #0
 8011e42:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8011e44:	68fa      	ldr	r2, [r7, #12]
 8011e46:	697b      	ldr	r3, [r7, #20]
 8011e48:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aToken;
 8011e4a:	68ba      	ldr	r2, [r7, #8]
 8011e4c:	697b      	ldr	r3, [r7, #20]
 8011e4e:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (otCoapCode) aTokenLength;
 8011e50:	79fa      	ldrb	r2, [r7, #7]
 8011e52:	697b      	ldr	r3, [r7, #20]
 8011e54:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 8011e56:	f002 fa77 	bl	8014348 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8011e5a:	f002 fa5d 	bl	8014318 <THREAD_Get_OTCmdRspPayloadBuffer>
 8011e5e:	6178      	str	r0, [r7, #20]
}
 8011e60:	bf00      	nop
 8011e62:	3718      	adds	r7, #24
 8011e64:	46bd      	mov	sp, r7
 8011e66:	bd80      	pop	{r7, pc}

08011e68 <otCoapHeaderGenerateToken>:

void otCoapHeaderGenerateToken(otCoapHeader *aHeader, uint8_t aTokenLength)
{
 8011e68:	b580      	push	{r7, lr}
 8011e6a:	b084      	sub	sp, #16
 8011e6c:	af00      	add	r7, sp, #0
 8011e6e:	6078      	str	r0, [r7, #4]
 8011e70:	460b      	mov	r3, r1
 8011e72:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 8011e74:	f002 faa6 	bl	80143c4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8011e78:	f002 fa42 	bl	8014300 <THREAD_Get_OTCmdPayloadBuffer>
 8011e7c:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GENERATE_TOKEN;
 8011e7e:	68fb      	ldr	r3, [r7, #12]
 8011e80:	2200      	movs	r2, #0
 8011e82:	f062 025e 	orn	r2, r2, #94	; 0x5e
 8011e86:	701a      	strb	r2, [r3, #0]
 8011e88:	2200      	movs	r2, #0
 8011e8a:	705a      	strb	r2, [r3, #1]
 8011e8c:	2200      	movs	r2, #0
 8011e8e:	709a      	strb	r2, [r3, #2]
 8011e90:	2200      	movs	r2, #0
 8011e92:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 8011e94:	68fb      	ldr	r3, [r7, #12]
 8011e96:	2200      	movs	r2, #0
 8011e98:	f042 0202 	orr.w	r2, r2, #2
 8011e9c:	711a      	strb	r2, [r3, #4]
 8011e9e:	2200      	movs	r2, #0
 8011ea0:	715a      	strb	r2, [r3, #5]
 8011ea2:	2200      	movs	r2, #0
 8011ea4:	719a      	strb	r2, [r3, #6]
 8011ea6:	2200      	movs	r2, #0
 8011ea8:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8011eaa:	687a      	ldr	r2, [r7, #4]
 8011eac:	68fb      	ldr	r3, [r7, #12]
 8011eae:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aTokenLength;
 8011eb0:	78fa      	ldrb	r2, [r7, #3]
 8011eb2:	68fb      	ldr	r3, [r7, #12]
 8011eb4:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 8011eb6:	f002 fa47 	bl	8014348 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8011eba:	f002 fa2d 	bl	8014318 <THREAD_Get_OTCmdRspPayloadBuffer>
 8011ebe:	60f8      	str	r0, [r7, #12]
}
 8011ec0:	bf00      	nop
 8011ec2:	3710      	adds	r7, #16
 8011ec4:	46bd      	mov	sp, r7
 8011ec6:	bd80      	pop	{r7, pc}

08011ec8 <otCoapHeaderAppendContentFormatOption>:

otError otCoapHeaderAppendContentFormatOption(otCoapHeader *aHeader, otCoapOptionContentFormat aContentFormat)
{
 8011ec8:	b580      	push	{r7, lr}
 8011eca:	b084      	sub	sp, #16
 8011ecc:	af00      	add	r7, sp, #0
 8011ece:	6078      	str	r0, [r7, #4]
 8011ed0:	460b      	mov	r3, r1
 8011ed2:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 8011ed4:	f002 fa76 	bl	80143c4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8011ed8:	f002 fa12 	bl	8014300 <THREAD_Get_OTCmdPayloadBuffer>
 8011edc:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_APPEND_CONTENT_FORMAT_OPTION;
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	2200      	movs	r2, #0
 8011ee2:	f062 025d 	orn	r2, r2, #93	; 0x5d
 8011ee6:	701a      	strb	r2, [r3, #0]
 8011ee8:	2200      	movs	r2, #0
 8011eea:	705a      	strb	r2, [r3, #1]
 8011eec:	2200      	movs	r2, #0
 8011eee:	709a      	strb	r2, [r3, #2]
 8011ef0:	2200      	movs	r2, #0
 8011ef2:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 8011ef4:	68fb      	ldr	r3, [r7, #12]
 8011ef6:	2200      	movs	r2, #0
 8011ef8:	f042 0202 	orr.w	r2, r2, #2
 8011efc:	711a      	strb	r2, [r3, #4]
 8011efe:	2200      	movs	r2, #0
 8011f00:	715a      	strb	r2, [r3, #5]
 8011f02:	2200      	movs	r2, #0
 8011f04:	719a      	strb	r2, [r3, #6]
 8011f06:	2200      	movs	r2, #0
 8011f08:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8011f0a:	687a      	ldr	r2, [r7, #4]
 8011f0c:	68fb      	ldr	r3, [r7, #12]
 8011f0e:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aContentFormat;
 8011f10:	78fa      	ldrb	r2, [r7, #3]
 8011f12:	68fb      	ldr	r3, [r7, #12]
 8011f14:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 8011f16:	f002 fa17 	bl	8014348 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8011f1a:	f002 f9fd 	bl	8014318 <THREAD_Get_OTCmdRspPayloadBuffer>
 8011f1e:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 8011f20:	68fb      	ldr	r3, [r7, #12]
 8011f22:	689b      	ldr	r3, [r3, #8]
 8011f24:	b2db      	uxtb	r3, r3
}
 8011f26:	4618      	mov	r0, r3
 8011f28:	3710      	adds	r7, #16
 8011f2a:	46bd      	mov	sp, r7
 8011f2c:	bd80      	pop	{r7, pc}

08011f2e <otCoapHeaderAppendUriPathOptions>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError) p_ot_req->Data[0];
}

otError otCoapHeaderAppendUriPathOptions(otCoapHeader *aHeader, const char *aUriPath)
{
 8011f2e:	b580      	push	{r7, lr}
 8011f30:	b084      	sub	sp, #16
 8011f32:	af00      	add	r7, sp, #0
 8011f34:	6078      	str	r0, [r7, #4]
 8011f36:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 8011f38:	f002 fa44 	bl	80143c4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8011f3c:	f002 f9e0 	bl	8014300 <THREAD_Get_OTCmdPayloadBuffer>
 8011f40:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_APPEND_URI_PATH_OPTIONS;
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	2200      	movs	r2, #0
 8011f46:	f062 0250 	orn	r2, r2, #80	; 0x50
 8011f4a:	701a      	strb	r2, [r3, #0]
 8011f4c:	2200      	movs	r2, #0
 8011f4e:	705a      	strb	r2, [r3, #1]
 8011f50:	2200      	movs	r2, #0
 8011f52:	709a      	strb	r2, [r3, #2]
 8011f54:	2200      	movs	r2, #0
 8011f56:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 8011f58:	68fb      	ldr	r3, [r7, #12]
 8011f5a:	2200      	movs	r2, #0
 8011f5c:	f042 0202 	orr.w	r2, r2, #2
 8011f60:	711a      	strb	r2, [r3, #4]
 8011f62:	2200      	movs	r2, #0
 8011f64:	715a      	strb	r2, [r3, #5]
 8011f66:	2200      	movs	r2, #0
 8011f68:	719a      	strb	r2, [r3, #6]
 8011f6a:	2200      	movs	r2, #0
 8011f6c:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8011f6e:	687a      	ldr	r2, [r7, #4]
 8011f70:	68fb      	ldr	r3, [r7, #12]
 8011f72:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aUriPath;
 8011f74:	683a      	ldr	r2, [r7, #0]
 8011f76:	68fb      	ldr	r3, [r7, #12]
 8011f78:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 8011f7a:	f002 f9e5 	bl	8014348 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8011f7e:	f002 f9cb 	bl	8014318 <THREAD_Get_OTCmdRspPayloadBuffer>
 8011f82:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 8011f84:	68fb      	ldr	r3, [r7, #12]
 8011f86:	689b      	ldr	r3, [r3, #8]
 8011f88:	b2db      	uxtb	r3, r3
}
 8011f8a:	4618      	mov	r0, r3
 8011f8c:	3710      	adds	r7, #16
 8011f8e:	46bd      	mov	sp, r7
 8011f90:	bd80      	pop	{r7, pc}

08011f92 <otCoapHeaderSetPayloadMarker>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError) p_ot_req->Data[0];
}

otError otCoapHeaderSetPayloadMarker(otCoapHeader *aHeader)
{
 8011f92:	b580      	push	{r7, lr}
 8011f94:	b084      	sub	sp, #16
 8011f96:	af00      	add	r7, sp, #0
 8011f98:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8011f9a:	f002 fa13 	bl	80143c4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8011f9e:	f002 f9af 	bl	8014300 <THREAD_Get_OTCmdPayloadBuffer>
 8011fa2:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_PAYLOAD_MARKER;
 8011fa4:	68fb      	ldr	r3, [r7, #12]
 8011fa6:	2200      	movs	r2, #0
 8011fa8:	f062 024d 	orn	r2, r2, #77	; 0x4d
 8011fac:	701a      	strb	r2, [r3, #0]
 8011fae:	2200      	movs	r2, #0
 8011fb0:	705a      	strb	r2, [r3, #1]
 8011fb2:	2200      	movs	r2, #0
 8011fb4:	709a      	strb	r2, [r3, #2]
 8011fb6:	2200      	movs	r2, #0
 8011fb8:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8011fba:	68fb      	ldr	r3, [r7, #12]
 8011fbc:	2200      	movs	r2, #0
 8011fbe:	f042 0201 	orr.w	r2, r2, #1
 8011fc2:	711a      	strb	r2, [r3, #4]
 8011fc4:	2200      	movs	r2, #0
 8011fc6:	715a      	strb	r2, [r3, #5]
 8011fc8:	2200      	movs	r2, #0
 8011fca:	719a      	strb	r2, [r3, #6]
 8011fcc:	2200      	movs	r2, #0
 8011fce:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8011fd0:	687a      	ldr	r2, [r7, #4]
 8011fd2:	68fb      	ldr	r3, [r7, #12]
 8011fd4:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8011fd6:	f002 f9b7 	bl	8014348 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8011fda:	f002 f99d 	bl	8014318 <THREAD_Get_OTCmdRspPayloadBuffer>
 8011fde:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 8011fe0:	68fb      	ldr	r3, [r7, #12]
 8011fe2:	689b      	ldr	r3, [r3, #8]
 8011fe4:	b2db      	uxtb	r3, r3
}
 8011fe6:	4618      	mov	r0, r3
 8011fe8:	3710      	adds	r7, #16
 8011fea:	46bd      	mov	sp, r7
 8011fec:	bd80      	pop	{r7, pc}

08011fee <otCoapHeaderSetMessageId>:

void otCoapHeaderSetMessageId(otCoapHeader *aHeader, uint16_t aMessageId)
{
 8011fee:	b580      	push	{r7, lr}
 8011ff0:	b084      	sub	sp, #16
 8011ff2:	af00      	add	r7, sp, #0
 8011ff4:	6078      	str	r0, [r7, #4]
 8011ff6:	460b      	mov	r3, r1
 8011ff8:	807b      	strh	r3, [r7, #2]
    Pre_OtCmdProcessing();
 8011ffa:	f002 f9e3 	bl	80143c4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8011ffe:	f002 f97f 	bl	8014300 <THREAD_Get_OTCmdPayloadBuffer>
 8012002:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_MESSAGE_ID;
 8012004:	68fb      	ldr	r3, [r7, #12]
 8012006:	2200      	movs	r2, #0
 8012008:	f062 0256 	orn	r2, r2, #86	; 0x56
 801200c:	701a      	strb	r2, [r3, #0]
 801200e:	2200      	movs	r2, #0
 8012010:	705a      	strb	r2, [r3, #1]
 8012012:	2200      	movs	r2, #0
 8012014:	709a      	strb	r2, [r3, #2]
 8012016:	2200      	movs	r2, #0
 8012018:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 801201a:	68fb      	ldr	r3, [r7, #12]
 801201c:	2200      	movs	r2, #0
 801201e:	f042 0202 	orr.w	r2, r2, #2
 8012022:	711a      	strb	r2, [r3, #4]
 8012024:	2200      	movs	r2, #0
 8012026:	715a      	strb	r2, [r3, #5]
 8012028:	2200      	movs	r2, #0
 801202a:	719a      	strb	r2, [r3, #6]
 801202c:	2200      	movs	r2, #0
 801202e:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8012030:	687a      	ldr	r2, [r7, #4]
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint16_t ) aMessageId;
 8012036:	887a      	ldrh	r2, [r7, #2]
 8012038:	68fb      	ldr	r3, [r7, #12]
 801203a:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 801203c:	f002 f984 	bl	8014348 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012040:	f002 f96a 	bl	8014318 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012044:	60f8      	str	r0, [r7, #12]
}
 8012046:	bf00      	nop
 8012048:	3710      	adds	r7, #16
 801204a:	46bd      	mov	sp, r7
 801204c:	bd80      	pop	{r7, pc}

0801204e <otCoapHeaderGetType>:

otCoapType otCoapHeaderGetType(const otCoapHeader *aHeader)
{
 801204e:	b580      	push	{r7, lr}
 8012050:	b084      	sub	sp, #16
 8012052:	af00      	add	r7, sp, #0
 8012054:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8012056:	f002 f9b5 	bl	80143c4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 801205a:	f002 f951 	bl	8014300 <THREAD_Get_OTCmdPayloadBuffer>
 801205e:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TYPE;
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	2200      	movs	r2, #0
 8012064:	f062 0261 	orn	r2, r2, #97	; 0x61
 8012068:	701a      	strb	r2, [r3, #0]
 801206a:	2200      	movs	r2, #0
 801206c:	705a      	strb	r2, [r3, #1]
 801206e:	2200      	movs	r2, #0
 8012070:	709a      	strb	r2, [r3, #2]
 8012072:	2200      	movs	r2, #0
 8012074:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8012076:	68fb      	ldr	r3, [r7, #12]
 8012078:	2200      	movs	r2, #0
 801207a:	f042 0201 	orr.w	r2, r2, #1
 801207e:	711a      	strb	r2, [r3, #4]
 8012080:	2200      	movs	r2, #0
 8012082:	715a      	strb	r2, [r3, #5]
 8012084:	2200      	movs	r2, #0
 8012086:	719a      	strb	r2, [r3, #6]
 8012088:	2200      	movs	r2, #0
 801208a:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 801208c:	687a      	ldr	r2, [r7, #4]
 801208e:	68fb      	ldr	r3, [r7, #12]
 8012090:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8012092:	f002 f959 	bl	8014348 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012096:	f002 f93f 	bl	8014318 <THREAD_Get_OTCmdRspPayloadBuffer>
 801209a:	60f8      	str	r0, [r7, #12]
    return (otCoapType)p_ot_req->Data[0];
 801209c:	68fb      	ldr	r3, [r7, #12]
 801209e:	689b      	ldr	r3, [r3, #8]
 80120a0:	b2db      	uxtb	r3, r3
}
 80120a2:	4618      	mov	r0, r3
 80120a4:	3710      	adds	r7, #16
 80120a6:	46bd      	mov	sp, r7
 80120a8:	bd80      	pop	{r7, pc}

080120aa <otCoapHeaderGetCode>:

otCoapCode otCoapHeaderGetCode(const otCoapHeader *aHeader)
{
 80120aa:	b580      	push	{r7, lr}
 80120ac:	b084      	sub	sp, #16
 80120ae:	af00      	add	r7, sp, #0
 80120b0:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 80120b2:	f002 f987 	bl	80143c4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80120b6:	f002 f923 	bl	8014300 <THREAD_Get_OTCmdPayloadBuffer>
 80120ba:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_CODE;
 80120bc:	68fb      	ldr	r3, [r7, #12]
 80120be:	2200      	movs	r2, #0
 80120c0:	f062 024c 	orn	r2, r2, #76	; 0x4c
 80120c4:	701a      	strb	r2, [r3, #0]
 80120c6:	2200      	movs	r2, #0
 80120c8:	705a      	strb	r2, [r3, #1]
 80120ca:	2200      	movs	r2, #0
 80120cc:	709a      	strb	r2, [r3, #2]
 80120ce:	2200      	movs	r2, #0
 80120d0:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 80120d2:	68fb      	ldr	r3, [r7, #12]
 80120d4:	2200      	movs	r2, #0
 80120d6:	f042 0201 	orr.w	r2, r2, #1
 80120da:	711a      	strb	r2, [r3, #4]
 80120dc:	2200      	movs	r2, #0
 80120de:	715a      	strb	r2, [r3, #5]
 80120e0:	2200      	movs	r2, #0
 80120e2:	719a      	strb	r2, [r3, #6]
 80120e4:	2200      	movs	r2, #0
 80120e6:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 80120e8:	687a      	ldr	r2, [r7, #4]
 80120ea:	68fb      	ldr	r3, [r7, #12]
 80120ec:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 80120ee:	f002 f92b 	bl	8014348 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80120f2:	f002 f911 	bl	8014318 <THREAD_Get_OTCmdRspPayloadBuffer>
 80120f6:	60f8      	str	r0, [r7, #12]
    return (otCoapCode)p_ot_req->Data[0];
 80120f8:	68fb      	ldr	r3, [r7, #12]
 80120fa:	689b      	ldr	r3, [r3, #8]
 80120fc:	b2db      	uxtb	r3, r3
}
 80120fe:	4618      	mov	r0, r3
 8012100:	3710      	adds	r7, #16
 8012102:	46bd      	mov	sp, r7
 8012104:	bd80      	pop	{r7, pc}

08012106 <otCoapHeaderGetMessageId>:

uint16_t otCoapHeaderGetMessageId(const otCoapHeader *aHeader)
{
 8012106:	b580      	push	{r7, lr}
 8012108:	b084      	sub	sp, #16
 801210a:	af00      	add	r7, sp, #0
 801210c:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 801210e:	f002 f959 	bl	80143c4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012112:	f002 f8f5 	bl	8014300 <THREAD_Get_OTCmdPayloadBuffer>
 8012116:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_MESSAGE_ID;
 8012118:	68fb      	ldr	r3, [r7, #12]
 801211a:	2200      	movs	r2, #0
 801211c:	f062 0255 	orn	r2, r2, #85	; 0x55
 8012120:	701a      	strb	r2, [r3, #0]
 8012122:	2200      	movs	r2, #0
 8012124:	705a      	strb	r2, [r3, #1]
 8012126:	2200      	movs	r2, #0
 8012128:	709a      	strb	r2, [r3, #2]
 801212a:	2200      	movs	r2, #0
 801212c:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 801212e:	68fb      	ldr	r3, [r7, #12]
 8012130:	2200      	movs	r2, #0
 8012132:	f042 0201 	orr.w	r2, r2, #1
 8012136:	711a      	strb	r2, [r3, #4]
 8012138:	2200      	movs	r2, #0
 801213a:	715a      	strb	r2, [r3, #5]
 801213c:	2200      	movs	r2, #0
 801213e:	719a      	strb	r2, [r3, #6]
 8012140:	2200      	movs	r2, #0
 8012142:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8012144:	687a      	ldr	r2, [r7, #4]
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 801214a:	f002 f8fd 	bl	8014348 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801214e:	f002 f8e3 	bl	8014318 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012152:	60f8      	str	r0, [r7, #12]
    return (uint16_t)p_ot_req->Data[0];
 8012154:	68fb      	ldr	r3, [r7, #12]
 8012156:	689b      	ldr	r3, [r3, #8]
 8012158:	b29b      	uxth	r3, r3
}
 801215a:	4618      	mov	r0, r3
 801215c:	3710      	adds	r7, #16
 801215e:	46bd      	mov	sp, r7
 8012160:	bd80      	pop	{r7, pc}

08012162 <otCoapHeaderGetTokenLength>:

uint8_t otCoapHeaderGetTokenLength(const otCoapHeader *aHeader)
{
 8012162:	b580      	push	{r7, lr}
 8012164:	b084      	sub	sp, #16
 8012166:	af00      	add	r7, sp, #0
 8012168:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 801216a:	f002 f92b 	bl	80143c4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 801216e:	f002 f8c7 	bl	8014300 <THREAD_Get_OTCmdPayloadBuffer>
 8012172:	60f8      	str	r0, [r7, #12]

   p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TOKEN_LENGTH;
 8012174:	68fb      	ldr	r3, [r7, #12]
 8012176:	2200      	movs	r2, #0
 8012178:	f062 0254 	orn	r2, r2, #84	; 0x54
 801217c:	701a      	strb	r2, [r3, #0]
 801217e:	2200      	movs	r2, #0
 8012180:	705a      	strb	r2, [r3, #1]
 8012182:	2200      	movs	r2, #0
 8012184:	709a      	strb	r2, [r3, #2]
 8012186:	2200      	movs	r2, #0
 8012188:	70da      	strb	r2, [r3, #3]

   p_ot_req->Size=1;
 801218a:	68fb      	ldr	r3, [r7, #12]
 801218c:	2200      	movs	r2, #0
 801218e:	f042 0201 	orr.w	r2, r2, #1
 8012192:	711a      	strb	r2, [r3, #4]
 8012194:	2200      	movs	r2, #0
 8012196:	715a      	strb	r2, [r3, #5]
 8012198:	2200      	movs	r2, #0
 801219a:	719a      	strb	r2, [r3, #6]
 801219c:	2200      	movs	r2, #0
 801219e:	71da      	strb	r2, [r3, #7]
   p_ot_req->Data[0] = (uint32_t) aHeader;
 80121a0:	687a      	ldr	r2, [r7, #4]
 80121a2:	68fb      	ldr	r3, [r7, #12]
 80121a4:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 80121a6:	f002 f8cf 	bl	8014348 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80121aa:	f002 f8b5 	bl	8014318 <THREAD_Get_OTCmdRspPayloadBuffer>
 80121ae:	60f8      	str	r0, [r7, #12]
   return (uint8_t)p_ot_req->Data[0];
 80121b0:	68fb      	ldr	r3, [r7, #12]
 80121b2:	689b      	ldr	r3, [r3, #8]
 80121b4:	b2db      	uxtb	r3, r3
}
 80121b6:	4618      	mov	r0, r3
 80121b8:	3710      	adds	r7, #16
 80121ba:	46bd      	mov	sp, r7
 80121bc:	bd80      	pop	{r7, pc}

080121be <otCoapHeaderGetToken>:

const uint8_t *otCoapHeaderGetToken(const otCoapHeader *aHeader)
{
 80121be:	b580      	push	{r7, lr}
 80121c0:	b084      	sub	sp, #16
 80121c2:	af00      	add	r7, sp, #0
 80121c4:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 80121c6:	f002 f8fd 	bl	80143c4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80121ca:	f002 f899 	bl	8014300 <THREAD_Get_OTCmdPayloadBuffer>
 80121ce:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TOKEN;
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	2200      	movs	r2, #0
 80121d4:	f062 0253 	orn	r2, r2, #83	; 0x53
 80121d8:	701a      	strb	r2, [r3, #0]
 80121da:	2200      	movs	r2, #0
 80121dc:	705a      	strb	r2, [r3, #1]
 80121de:	2200      	movs	r2, #0
 80121e0:	709a      	strb	r2, [r3, #2]
 80121e2:	2200      	movs	r2, #0
 80121e4:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 80121e6:	68fb      	ldr	r3, [r7, #12]
 80121e8:	2200      	movs	r2, #0
 80121ea:	f042 0201 	orr.w	r2, r2, #1
 80121ee:	711a      	strb	r2, [r3, #4]
 80121f0:	2200      	movs	r2, #0
 80121f2:	715a      	strb	r2, [r3, #5]
 80121f4:	2200      	movs	r2, #0
 80121f6:	719a      	strb	r2, [r3, #6]
 80121f8:	2200      	movs	r2, #0
 80121fa:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 80121fc:	687a      	ldr	r2, [r7, #4]
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8012202:	f002 f8a1 	bl	8014348 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012206:	f002 f887 	bl	8014318 <THREAD_Get_OTCmdRspPayloadBuffer>
 801220a:	60f8      	str	r0, [r7, #12]
    return (uint8_t *)p_ot_req->Data[0];
 801220c:	68fb      	ldr	r3, [r7, #12]
 801220e:	689b      	ldr	r3, [r3, #8]
}
 8012210:	4618      	mov	r0, r3
 8012212:	3710      	adds	r7, #16
 8012214:	46bd      	mov	sp, r7
 8012216:	bd80      	pop	{r7, pc}

08012218 <otCoapNewMessage>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otCoapOption *)p_ot_req->Data[0];
}

otMessage *otCoapNewMessage(otInstance *aInstance, const otCoapHeader *aHeader)
{
 8012218:	b580      	push	{r7, lr}
 801221a:	b084      	sub	sp, #16
 801221c:	af00      	add	r7, sp, #0
 801221e:	6078      	str	r0, [r7, #4]
 8012220:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 8012222:	f002 f8cf 	bl	80143c4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012226:	f002 f86b 	bl	8014300 <THREAD_Get_OTCmdPayloadBuffer>
 801222a:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_NEW_MESSAGE;
 801222c:	68fb      	ldr	r3, [r7, #12]
 801222e:	2200      	movs	r2, #0
 8012230:	f062 0259 	orn	r2, r2, #89	; 0x59
 8012234:	701a      	strb	r2, [r3, #0]
 8012236:	2200      	movs	r2, #0
 8012238:	705a      	strb	r2, [r3, #1]
 801223a:	2200      	movs	r2, #0
 801223c:	709a      	strb	r2, [r3, #2]
 801223e:	2200      	movs	r2, #0
 8012240:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8012242:	68fb      	ldr	r3, [r7, #12]
 8012244:	2200      	movs	r2, #0
 8012246:	f042 0201 	orr.w	r2, r2, #1
 801224a:	711a      	strb	r2, [r3, #4]
 801224c:	2200      	movs	r2, #0
 801224e:	715a      	strb	r2, [r3, #5]
 8012250:	2200      	movs	r2, #0
 8012252:	719a      	strb	r2, [r3, #6]
 8012254:	2200      	movs	r2, #0
 8012256:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8012258:	683a      	ldr	r2, [r7, #0]
 801225a:	68fb      	ldr	r3, [r7, #12]
 801225c:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 801225e:	f002 f873 	bl	8014348 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012262:	f002 f859 	bl	8014318 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012266:	60f8      	str	r0, [r7, #12]
    return (otMessage *)p_ot_req->Data[0];
 8012268:	68fb      	ldr	r3, [r7, #12]
 801226a:	689b      	ldr	r3, [r3, #8]

}
 801226c:	4618      	mov	r0, r3
 801226e:	3710      	adds	r7, #16
 8012270:	46bd      	mov	sp, r7
 8012272:	bd80      	pop	{r7, pc}

08012274 <otCoapSendRequest>:

otError otCoapSendRequest(otInstance *aInstance,otMessage *aMessage, const otMessageInfo *aMessageInfo,
                              otCoapResponseHandler aHandler, void *aContext)
{
 8012274:	b580      	push	{r7, lr}
 8012276:	b086      	sub	sp, #24
 8012278:	af00      	add	r7, sp, #0
 801227a:	60f8      	str	r0, [r7, #12]
 801227c:	60b9      	str	r1, [r7, #8]
 801227e:	607a      	str	r2, [r7, #4]
 8012280:	603b      	str	r3, [r7, #0]
    Pre_OtCmdProcessing();
 8012282:	f002 f89f 	bl	80143c4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012286:	f002 f83b 	bl	8014300 <THREAD_Get_OTCmdPayloadBuffer>
 801228a:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_REQUEST;
 801228c:	697b      	ldr	r3, [r7, #20]
 801228e:	2200      	movs	r2, #0
 8012290:	f062 0258 	orn	r2, r2, #88	; 0x58
 8012294:	701a      	strb	r2, [r3, #0]
 8012296:	2200      	movs	r2, #0
 8012298:	705a      	strb	r2, [r3, #1]
 801229a:	2200      	movs	r2, #0
 801229c:	709a      	strb	r2, [r3, #2]
 801229e:	2200      	movs	r2, #0
 80122a0:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 80122a2:	697b      	ldr	r3, [r7, #20]
 80122a4:	2200      	movs	r2, #0
 80122a6:	f042 0203 	orr.w	r2, r2, #3
 80122aa:	711a      	strb	r2, [r3, #4]
 80122ac:	2200      	movs	r2, #0
 80122ae:	715a      	strb	r2, [r3, #5]
 80122b0:	2200      	movs	r2, #0
 80122b2:	719a      	strb	r2, [r3, #6]
 80122b4:	2200      	movs	r2, #0
 80122b6:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 80122b8:	68ba      	ldr	r2, [r7, #8]
 80122ba:	697b      	ldr	r3, [r7, #20]
 80122bc:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 80122be:	687a      	ldr	r2, [r7, #4]
 80122c0:	697b      	ldr	r3, [r7, #20]
 80122c2:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aHandler;
 80122c4:	683a      	ldr	r2, [r7, #0]
 80122c6:	697b      	ldr	r3, [r7, #20]
 80122c8:	611a      	str	r2, [r3, #16]
    p_ot_req->Data[3] = (uint32_t) aContext;
 80122ca:	6a3a      	ldr	r2, [r7, #32]
 80122cc:	697b      	ldr	r3, [r7, #20]
 80122ce:	615a      	str	r2, [r3, #20]

    Ot_Cmd_Transfer();
 80122d0:	f002 f83a 	bl	8014348 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80122d4:	f002 f820 	bl	8014318 <THREAD_Get_OTCmdRspPayloadBuffer>
 80122d8:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 80122da:	697b      	ldr	r3, [r7, #20]
 80122dc:	689b      	ldr	r3, [r3, #8]
 80122de:	b2db      	uxtb	r3, r3
}
 80122e0:	4618      	mov	r0, r3
 80122e2:	3718      	adds	r7, #24
 80122e4:	46bd      	mov	sp, r7
 80122e6:	bd80      	pop	{r7, pc}

080122e8 <otCoapStart>:

otError otCoapStart(otInstance *aInstance, uint16_t aPort)
{
 80122e8:	b580      	push	{r7, lr}
 80122ea:	b084      	sub	sp, #16
 80122ec:	af00      	add	r7, sp, #0
 80122ee:	6078      	str	r0, [r7, #4]
 80122f0:	460b      	mov	r3, r1
 80122f2:	807b      	strh	r3, [r7, #2]
    Pre_OtCmdProcessing();
 80122f4:	f002 f866 	bl	80143c4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80122f8:	f002 f802 	bl	8014300 <THREAD_Get_OTCmdPayloadBuffer>
 80122fc:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_START;
 80122fe:	68fb      	ldr	r3, [r7, #12]
 8012300:	2200      	movs	r2, #0
 8012302:	f062 024b 	orn	r2, r2, #75	; 0x4b
 8012306:	701a      	strb	r2, [r3, #0]
 8012308:	2200      	movs	r2, #0
 801230a:	705a      	strb	r2, [r3, #1]
 801230c:	2200      	movs	r2, #0
 801230e:	709a      	strb	r2, [r3, #2]
 8012310:	2200      	movs	r2, #0
 8012312:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8012314:	68fb      	ldr	r3, [r7, #12]
 8012316:	2200      	movs	r2, #0
 8012318:	f042 0201 	orr.w	r2, r2, #1
 801231c:	711a      	strb	r2, [r3, #4]
 801231e:	2200      	movs	r2, #0
 8012320:	715a      	strb	r2, [r3, #5]
 8012322:	2200      	movs	r2, #0
 8012324:	719a      	strb	r2, [r3, #6]
 8012326:	2200      	movs	r2, #0
 8012328:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint16_t) aPort;
 801232a:	887a      	ldrh	r2, [r7, #2]
 801232c:	68fb      	ldr	r3, [r7, #12]
 801232e:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8012330:	f002 f80a 	bl	8014348 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012334:	f001 fff0 	bl	8014318 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012338:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 801233a:	68fb      	ldr	r3, [r7, #12]
 801233c:	689b      	ldr	r3, [r3, #8]
 801233e:	b2db      	uxtb	r3, r3
}
 8012340:	4618      	mov	r0, r3
 8012342:	3710      	adds	r7, #16
 8012344:	46bd      	mov	sp, r7
 8012346:	bd80      	pop	{r7, pc}

08012348 <otCoapAddResource>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError)p_ot_req->Data[0];
}

otError otCoapAddResource(otInstance *aInstance, otCoapResource *aResource)
{
 8012348:	b580      	push	{r7, lr}
 801234a:	b084      	sub	sp, #16
 801234c:	af00      	add	r7, sp, #0
 801234e:	6078      	str	r0, [r7, #4]
 8012350:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 8012352:	f002 f837 	bl	80143c4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012356:	f001 ffd3 	bl	8014300 <THREAD_Get_OTCmdPayloadBuffer>
 801235a:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_ADD_RESSOURCE;
 801235c:	68fb      	ldr	r3, [r7, #12]
 801235e:	2200      	movs	r2, #0
 8012360:	f062 0249 	orn	r2, r2, #73	; 0x49
 8012364:	701a      	strb	r2, [r3, #0]
 8012366:	2200      	movs	r2, #0
 8012368:	705a      	strb	r2, [r3, #1]
 801236a:	2200      	movs	r2, #0
 801236c:	709a      	strb	r2, [r3, #2]
 801236e:	2200      	movs	r2, #0
 8012370:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8012372:	68fb      	ldr	r3, [r7, #12]
 8012374:	2200      	movs	r2, #0
 8012376:	f042 0201 	orr.w	r2, r2, #1
 801237a:	711a      	strb	r2, [r3, #4]
 801237c:	2200      	movs	r2, #0
 801237e:	715a      	strb	r2, [r3, #5]
 8012380:	2200      	movs	r2, #0
 8012382:	719a      	strb	r2, [r3, #6]
 8012384:	2200      	movs	r2, #0
 8012386:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aResource;
 8012388:	683a      	ldr	r2, [r7, #0]
 801238a:	68fb      	ldr	r3, [r7, #12]
 801238c:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 801238e:	f001 ffdb 	bl	8014348 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012392:	f001 ffc1 	bl	8014318 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012396:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 8012398:	68fb      	ldr	r3, [r7, #12]
 801239a:	689b      	ldr	r3, [r3, #8]
 801239c:	b2db      	uxtb	r3, r3
}
 801239e:	4618      	mov	r0, r3
 80123a0:	3710      	adds	r7, #16
 80123a2:	46bd      	mov	sp, r7
 80123a4:	bd80      	pop	{r7, pc}

080123a6 <otCoapSendResponse>:

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otCoapSendResponse(otInstance *aInstance, otMessage *aMessage, const otMessageInfo *aMessageInfo)
{
 80123a6:	b580      	push	{r7, lr}
 80123a8:	b086      	sub	sp, #24
 80123aa:	af00      	add	r7, sp, #0
 80123ac:	60f8      	str	r0, [r7, #12]
 80123ae:	60b9      	str	r1, [r7, #8]
 80123b0:	607a      	str	r2, [r7, #4]
    Pre_OtCmdProcessing();
 80123b2:	f002 f807 	bl	80143c4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80123b6:	f001 ffa3 	bl	8014300 <THREAD_Get_OTCmdPayloadBuffer>
 80123ba:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_RESPONSE;
 80123bc:	697b      	ldr	r3, [r7, #20]
 80123be:	2200      	movs	r2, #0
 80123c0:	f062 0257 	orn	r2, r2, #87	; 0x57
 80123c4:	701a      	strb	r2, [r3, #0]
 80123c6:	2200      	movs	r2, #0
 80123c8:	705a      	strb	r2, [r3, #1]
 80123ca:	2200      	movs	r2, #0
 80123cc:	709a      	strb	r2, [r3, #2]
 80123ce:	2200      	movs	r2, #0
 80123d0:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 80123d2:	697b      	ldr	r3, [r7, #20]
 80123d4:	2200      	movs	r2, #0
 80123d6:	f042 0202 	orr.w	r2, r2, #2
 80123da:	711a      	strb	r2, [r3, #4]
 80123dc:	2200      	movs	r2, #0
 80123de:	715a      	strb	r2, [r3, #5]
 80123e0:	2200      	movs	r2, #0
 80123e2:	719a      	strb	r2, [r3, #6]
 80123e4:	2200      	movs	r2, #0
 80123e6:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 80123e8:	68ba      	ldr	r2, [r7, #8]
 80123ea:	697b      	ldr	r3, [r7, #20]
 80123ec:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 80123ee:	687a      	ldr	r2, [r7, #4]
 80123f0:	697b      	ldr	r3, [r7, #20]
 80123f2:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 80123f4:	f001 ffa8 	bl	8014348 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80123f8:	f001 ff8e 	bl	8014318 <THREAD_Get_OTCmdRspPayloadBuffer>
 80123fc:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 80123fe:	697b      	ldr	r3, [r7, #20]
 8012400:	689b      	ldr	r3, [r3, #8]
 8012402:	b2db      	uxtb	r3, r3
}
 8012404:	4618      	mov	r0, r3
 8012406:	3718      	adds	r7, #24
 8012408:	46bd      	mov	sp, r7
 801240a:	bd80      	pop	{r7, pc}

0801240c <otInstanceInitSingle>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otInstance *)p_ot_req->Data[0];
}
#else
otInstance *otInstanceInitSingle(void)
{
 801240c:	b580      	push	{r7, lr}
 801240e:	b082      	sub	sp, #8
 8012410:	af00      	add	r7, sp, #0
    Pre_OtCmdProcessing();
 8012412:	f001 ffd7 	bl	80143c4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012416:	f001 ff73 	bl	8014300 <THREAD_Get_OTCmdPayloadBuffer>
 801241a:	6078      	str	r0, [r7, #4]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_INIT_SINGLE;
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	2200      	movs	r2, #0
 8012420:	f062 026b 	orn	r2, r2, #107	; 0x6b
 8012424:	701a      	strb	r2, [r3, #0]
 8012426:	2200      	movs	r2, #0
 8012428:	705a      	strb	r2, [r3, #1]
 801242a:	2200      	movs	r2, #0
 801242c:	709a      	strb	r2, [r3, #2]
 801242e:	2200      	movs	r2, #0
 8012430:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	2200      	movs	r2, #0
 8012436:	711a      	strb	r2, [r3, #4]
 8012438:	2200      	movs	r2, #0
 801243a:	715a      	strb	r2, [r3, #5]
 801243c:	2200      	movs	r2, #0
 801243e:	719a      	strb	r2, [r3, #6]
 8012440:	2200      	movs	r2, #0
 8012442:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 8012444:	f001 ff80 	bl	8014348 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012448:	f001 ff66 	bl	8014318 <THREAD_Get_OTCmdRspPayloadBuffer>
 801244c:	6078      	str	r0, [r7, #4]
    return (otInstance *)p_ot_req->Data[0];
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	689b      	ldr	r3, [r3, #8]
}
 8012452:	4618      	mov	r0, r3
 8012454:	3708      	adds	r7, #8
 8012456:	46bd      	mov	sp, r7
 8012458:	bd80      	pop	{r7, pc}

0801245a <otInstanceFinalize>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (bool)p_ot_req->Data[0];
}

void otInstanceFinalize(otInstance *aInstance)
{
 801245a:	b580      	push	{r7, lr}
 801245c:	b084      	sub	sp, #16
 801245e:	af00      	add	r7, sp, #0
 8012460:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8012462:	f001 ffaf 	bl	80143c4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012466:	f001 ff4b 	bl	8014300 <THREAD_Get_OTCmdPayloadBuffer>
 801246a:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_FINALIZE;
 801246c:	68fb      	ldr	r3, [r7, #12]
 801246e:	2200      	movs	r2, #0
 8012470:	f062 0269 	orn	r2, r2, #105	; 0x69
 8012474:	701a      	strb	r2, [r3, #0]
 8012476:	2200      	movs	r2, #0
 8012478:	705a      	strb	r2, [r3, #1]
 801247a:	2200      	movs	r2, #0
 801247c:	709a      	strb	r2, [r3, #2]
 801247e:	2200      	movs	r2, #0
 8012480:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 8012482:	68fb      	ldr	r3, [r7, #12]
 8012484:	2200      	movs	r2, #0
 8012486:	711a      	strb	r2, [r3, #4]
 8012488:	2200      	movs	r2, #0
 801248a:	715a      	strb	r2, [r3, #5]
 801248c:	2200      	movs	r2, #0
 801248e:	719a      	strb	r2, [r3, #6]
 8012490:	2200      	movs	r2, #0
 8012492:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 8012494:	f001 ff58 	bl	8014348 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012498:	f001 ff3e 	bl	8014318 <THREAD_Get_OTCmdRspPayloadBuffer>
 801249c:	60f8      	str	r0, [r7, #12]
}
 801249e:	bf00      	nop
 80124a0:	3710      	adds	r7, #16
 80124a2:	46bd      	mov	sp, r7
 80124a4:	bd80      	pop	{r7, pc}
	...

080124a8 <otSetStateChangedCallback>:

OTAPI otError OTCALL otSetStateChangedCallback(otInstance *aInstance, otStateChangedCallback aCallback,
                                               void *aContext)
{
 80124a8:	b580      	push	{r7, lr}
 80124aa:	b086      	sub	sp, #24
 80124ac:	af00      	add	r7, sp, #0
 80124ae:	60f8      	str	r0, [r7, #12]
 80124b0:	60b9      	str	r1, [r7, #8]
 80124b2:	607a      	str	r2, [r7, #4]
    Pre_OtCmdProcessing();
 80124b4:	f001 ff86 	bl	80143c4 <Pre_OtCmdProcessing>
    /* Store the callback function */
    otStateChangedCb = aCallback;
 80124b8:	4a15      	ldr	r2, [pc, #84]	; (8012510 <otSetStateChangedCallback+0x68>)
 80124ba:	68bb      	ldr	r3, [r7, #8]
 80124bc:	6013      	str	r3, [r2, #0]
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80124be:	f001 ff1f 	bl	8014300 <THREAD_Get_OTCmdPayloadBuffer>
 80124c2:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_SET_STATE_CHANGED_CALLBACK;
 80124c4:	697b      	ldr	r3, [r7, #20]
 80124c6:	2200      	movs	r2, #0
 80124c8:	f062 0268 	orn	r2, r2, #104	; 0x68
 80124cc:	701a      	strb	r2, [r3, #0]
 80124ce:	2200      	movs	r2, #0
 80124d0:	705a      	strb	r2, [r3, #1]
 80124d2:	2200      	movs	r2, #0
 80124d4:	709a      	strb	r2, [r3, #2]
 80124d6:	2200      	movs	r2, #0
 80124d8:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 80124da:	697b      	ldr	r3, [r7, #20]
 80124dc:	2200      	movs	r2, #0
 80124de:	f042 0201 	orr.w	r2, r2, #1
 80124e2:	711a      	strb	r2, [r3, #4]
 80124e4:	2200      	movs	r2, #0
 80124e6:	715a      	strb	r2, [r3, #5]
 80124e8:	2200      	movs	r2, #0
 80124ea:	719a      	strb	r2, [r3, #6]
 80124ec:	2200      	movs	r2, #0
 80124ee:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t)aContext;
 80124f0:	687a      	ldr	r2, [r7, #4]
 80124f2:	697b      	ldr	r3, [r7, #20]
 80124f4:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 80124f6:	f001 ff27 	bl	8014348 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80124fa:	f001 ff0d 	bl	8014318 <THREAD_Get_OTCmdRspPayloadBuffer>
 80124fe:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 8012500:	697b      	ldr	r3, [r7, #20]
 8012502:	689b      	ldr	r3, [r3, #8]
 8012504:	b2db      	uxtb	r3, r3
}
 8012506:	4618      	mov	r0, r3
 8012508:	3718      	adds	r7, #24
 801250a:	46bd      	mov	sp, r7
 801250c:	bd80      	pop	{r7, pc}
 801250e:	bf00      	nop
 8012510:	20027400 	.word	0x20027400

08012514 <otInstanceErasePersistentInfo>:

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otInstanceErasePersistentInfo(otInstance *aInstance)
{
 8012514:	b580      	push	{r7, lr}
 8012516:	b084      	sub	sp, #16
 8012518:	af00      	add	r7, sp, #0
 801251a:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 801251c:	f001 ff52 	bl	80143c4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012520:	f001 feee 	bl	8014300 <THREAD_Get_OTCmdPayloadBuffer>
 8012524:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_ERASE_PERSISTENT_INFO;
 8012526:	68fb      	ldr	r3, [r7, #12]
 8012528:	2200      	movs	r2, #0
 801252a:	f062 0264 	orn	r2, r2, #100	; 0x64
 801252e:	701a      	strb	r2, [r3, #0]
 8012530:	2200      	movs	r2, #0
 8012532:	705a      	strb	r2, [r3, #1]
 8012534:	2200      	movs	r2, #0
 8012536:	709a      	strb	r2, [r3, #2]
 8012538:	2200      	movs	r2, #0
 801253a:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 801253c:	68fb      	ldr	r3, [r7, #12]
 801253e:	2200      	movs	r2, #0
 8012540:	711a      	strb	r2, [r3, #4]
 8012542:	2200      	movs	r2, #0
 8012544:	715a      	strb	r2, [r3, #5]
 8012546:	2200      	movs	r2, #0
 8012548:	719a      	strb	r2, [r3, #6]
 801254a:	2200      	movs	r2, #0
 801254c:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 801254e:	f001 fefb 	bl	8014348 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012552:	f001 fee1 	bl	8014318 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012556:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 8012558:	68fb      	ldr	r3, [r7, #12]
 801255a:	689b      	ldr	r3, [r3, #8]
 801255c:	b2db      	uxtb	r3, r3
}
 801255e:	4618      	mov	r0, r3
 8012560:	3710      	adds	r7, #16
 8012562:	46bd      	mov	sp, r7
 8012564:	bd80      	pop	{r7, pc}

08012566 <otIp6SetEnabled>:
extern otIp6SlaacIidCreate aIidCreateCb;
extern otIp6ReceiveCallback otIp6ReceiveCb;


OTAPI otError OTCALL otIp6SetEnabled(otInstance *aInstance, bool aEnabled)
{
 8012566:	b580      	push	{r7, lr}
 8012568:	b084      	sub	sp, #16
 801256a:	af00      	add	r7, sp, #0
 801256c:	6078      	str	r0, [r7, #4]
 801256e:	460b      	mov	r3, r1
 8012570:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 8012572:	f001 ff27 	bl	80143c4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012576:	f001 fec3 	bl	8014300 <THREAD_Get_OTCmdPayloadBuffer>
 801257a:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_SET_ENABLED;
 801257c:	68fb      	ldr	r3, [r7, #12]
 801257e:	2200      	movs	r2, #0
 8012580:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8012584:	701a      	strb	r2, [r3, #0]
 8012586:	2200      	movs	r2, #0
 8012588:	705a      	strb	r2, [r3, #1]
 801258a:	2200      	movs	r2, #0
 801258c:	709a      	strb	r2, [r3, #2]
 801258e:	2200      	movs	r2, #0
 8012590:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8012592:	68fb      	ldr	r3, [r7, #12]
 8012594:	2200      	movs	r2, #0
 8012596:	f042 0201 	orr.w	r2, r2, #1
 801259a:	711a      	strb	r2, [r3, #4]
 801259c:	2200      	movs	r2, #0
 801259e:	715a      	strb	r2, [r3, #5]
 80125a0:	2200      	movs	r2, #0
 80125a2:	719a      	strb	r2, [r3, #6]
 80125a4:	2200      	movs	r2, #0
 80125a6:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 80125a8:	78fa      	ldrb	r2, [r7, #3]
 80125aa:	68fb      	ldr	r3, [r7, #12]
 80125ac:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 80125ae:	f001 fecb 	bl	8014348 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80125b2:	f001 feb1 	bl	8014318 <THREAD_Get_OTCmdRspPayloadBuffer>
 80125b6:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 80125b8:	68fb      	ldr	r3, [r7, #12]
 80125ba:	689b      	ldr	r3, [r3, #8]
 80125bc:	b2db      	uxtb	r3, r3
}
 80125be:	4618      	mov	r0, r3
 80125c0:	3710      	adds	r7, #16
 80125c2:	46bd      	mov	sp, r7
 80125c4:	bd80      	pop	{r7, pc}

080125c6 <otIp6IsEnabled>:

OTAPI bool OTCALL otIp6IsEnabled(otInstance *aInstance)
{
 80125c6:	b580      	push	{r7, lr}
 80125c8:	b084      	sub	sp, #16
 80125ca:	af00      	add	r7, sp, #0
 80125cc:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 80125ce:	f001 fef9 	bl	80143c4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80125d2:	f001 fe95 	bl	8014300 <THREAD_Get_OTCmdPayloadBuffer>
 80125d6:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_IS_ENABLED;
 80125d8:	68fb      	ldr	r3, [r7, #12]
 80125da:	2200      	movs	r2, #0
 80125dc:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 80125e0:	701a      	strb	r2, [r3, #0]
 80125e2:	2200      	movs	r2, #0
 80125e4:	705a      	strb	r2, [r3, #1]
 80125e6:	2200      	movs	r2, #0
 80125e8:	709a      	strb	r2, [r3, #2]
 80125ea:	2200      	movs	r2, #0
 80125ec:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 80125ee:	68fb      	ldr	r3, [r7, #12]
 80125f0:	2200      	movs	r2, #0
 80125f2:	711a      	strb	r2, [r3, #4]
 80125f4:	2200      	movs	r2, #0
 80125f6:	715a      	strb	r2, [r3, #5]
 80125f8:	2200      	movs	r2, #0
 80125fa:	719a      	strb	r2, [r3, #6]
 80125fc:	2200      	movs	r2, #0
 80125fe:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 8012600:	f001 fea2 	bl	8014348 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012604:	f001 fe88 	bl	8014318 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012608:	60f8      	str	r0, [r7, #12]
  return (bool)p_ot_req->Data[0];
 801260a:	68fb      	ldr	r3, [r7, #12]
 801260c:	689b      	ldr	r3, [r3, #8]
 801260e:	2b00      	cmp	r3, #0
 8012610:	bf14      	ite	ne
 8012612:	2301      	movne	r3, #1
 8012614:	2300      	moveq	r3, #0
 8012616:	b2db      	uxtb	r3, r3
}
 8012618:	4618      	mov	r0, r3
 801261a:	3710      	adds	r7, #16
 801261c:	46bd      	mov	sp, r7
 801261e:	bd80      	pop	{r7, pc}

08012620 <otIp6GetUnicastAddresses>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

OTAPI const otNetifAddress *OTCALL otIp6GetUnicastAddresses(otInstance *aInstance)
{
 8012620:	b580      	push	{r7, lr}
 8012622:	b084      	sub	sp, #16
 8012624:	af00      	add	r7, sp, #0
 8012626:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8012628:	f001 fecc 	bl	80143c4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 801262c:	f001 fe68 	bl	8014300 <THREAD_Get_OTCmdPayloadBuffer>
 8012630:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_GET_UNICAST_ADDRESSES;
 8012632:	68fb      	ldr	r3, [r7, #12]
 8012634:	2200      	movs	r2, #0
 8012636:	f042 022b 	orr.w	r2, r2, #43	; 0x2b
 801263a:	701a      	strb	r2, [r3, #0]
 801263c:	2200      	movs	r2, #0
 801263e:	705a      	strb	r2, [r3, #1]
 8012640:	2200      	movs	r2, #0
 8012642:	709a      	strb	r2, [r3, #2]
 8012644:	2200      	movs	r2, #0
 8012646:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 8012648:	68fb      	ldr	r3, [r7, #12]
 801264a:	2200      	movs	r2, #0
 801264c:	711a      	strb	r2, [r3, #4]
 801264e:	2200      	movs	r2, #0
 8012650:	715a      	strb	r2, [r3, #5]
 8012652:	2200      	movs	r2, #0
 8012654:	719a      	strb	r2, [r3, #6]
 8012656:	2200      	movs	r2, #0
 8012658:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 801265a:	f001 fe75 	bl	8014348 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801265e:	f001 fe5b 	bl	8014318 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012662:	60f8      	str	r0, [r7, #12]
  return (otNetifAddress *)p_ot_req->Data[0];
 8012664:	68fb      	ldr	r3, [r7, #12]
 8012666:	689b      	ldr	r3, [r3, #8]
}
 8012668:	4618      	mov	r0, r3
 801266a:	3710      	adds	r7, #16
 801266c:	46bd      	mov	sp, r7
 801266e:	bd80      	pop	{r7, pc}

08012670 <otIp6AddressFromString>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (bool)p_ot_req->Data[0];
}

OTAPI otError OTCALL otIp6AddressFromString(const char *aString, otIp6Address *aAddress)
{
 8012670:	b580      	push	{r7, lr}
 8012672:	b084      	sub	sp, #16
 8012674:	af00      	add	r7, sp, #0
 8012676:	6078      	str	r0, [r7, #4]
 8012678:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 801267a:	f001 fea3 	bl	80143c4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 801267e:	f001 fe3f 	bl	8014300 <THREAD_Get_OTCmdPayloadBuffer>
 8012682:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_ADDRESS_FROM_STRING;
 8012684:	68fb      	ldr	r3, [r7, #12]
 8012686:	2200      	movs	r2, #0
 8012688:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 801268c:	701a      	strb	r2, [r3, #0]
 801268e:	2200      	movs	r2, #0
 8012690:	705a      	strb	r2, [r3, #1]
 8012692:	2200      	movs	r2, #0
 8012694:	709a      	strb	r2, [r3, #2]
 8012696:	2200      	movs	r2, #0
 8012698:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 801269a:	68fb      	ldr	r3, [r7, #12]
 801269c:	2200      	movs	r2, #0
 801269e:	f042 0202 	orr.w	r2, r2, #2
 80126a2:	711a      	strb	r2, [r3, #4]
 80126a4:	2200      	movs	r2, #0
 80126a6:	715a      	strb	r2, [r3, #5]
 80126a8:	2200      	movs	r2, #0
 80126aa:	719a      	strb	r2, [r3, #6]
 80126ac:	2200      	movs	r2, #0
 80126ae:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aString;
 80126b0:	687a      	ldr	r2, [r7, #4]
 80126b2:	68fb      	ldr	r3, [r7, #12]
 80126b4:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aAddress;
 80126b6:	683a      	ldr	r2, [r7, #0]
 80126b8:	68fb      	ldr	r3, [r7, #12]
 80126ba:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 80126bc:	f001 fe44 	bl	8014348 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80126c0:	f001 fe2a 	bl	8014318 <THREAD_Get_OTCmdRspPayloadBuffer>
 80126c4:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 80126c6:	68fb      	ldr	r3, [r7, #12]
 80126c8:	689b      	ldr	r3, [r3, #8]
 80126ca:	b2db      	uxtb	r3, r3
}
 80126cc:	4618      	mov	r0, r3
 80126ce:	3710      	adds	r7, #16
 80126d0:	46bd      	mov	sp, r7
 80126d2:	bd80      	pop	{r7, pc}

080126d4 <otLinkSetChannel>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint8_t)p_ot_req->Data[0];
}

OTAPI otError OTCALL otLinkSetChannel(otInstance *aInstance, uint8_t aChannel)
{
 80126d4:	b580      	push	{r7, lr}
 80126d6:	b084      	sub	sp, #16
 80126d8:	af00      	add	r7, sp, #0
 80126da:	6078      	str	r0, [r7, #4]
 80126dc:	460b      	mov	r3, r1
 80126de:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 80126e0:	f001 fe70 	bl	80143c4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80126e4:	f001 fe0c 	bl	8014300 <THREAD_Get_OTCmdPayloadBuffer>
 80126e8:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_CHANNEL;
 80126ea:	68fb      	ldr	r3, [r7, #12]
 80126ec:	2200      	movs	r2, #0
 80126ee:	f042 0208 	orr.w	r2, r2, #8
 80126f2:	701a      	strb	r2, [r3, #0]
 80126f4:	2200      	movs	r2, #0
 80126f6:	705a      	strb	r2, [r3, #1]
 80126f8:	2200      	movs	r2, #0
 80126fa:	709a      	strb	r2, [r3, #2]
 80126fc:	2200      	movs	r2, #0
 80126fe:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	2200      	movs	r2, #0
 8012704:	f042 0201 	orr.w	r2, r2, #1
 8012708:	711a      	strb	r2, [r3, #4]
 801270a:	2200      	movs	r2, #0
 801270c:	715a      	strb	r2, [r3, #5]
 801270e:	2200      	movs	r2, #0
 8012710:	719a      	strb	r2, [r3, #6]
 8012712:	2200      	movs	r2, #0
 8012714:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aChannel;
 8012716:	78fa      	ldrb	r2, [r7, #3]
 8012718:	68fb      	ldr	r3, [r7, #12]
 801271a:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 801271c:	f001 fe14 	bl	8014348 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012720:	f001 fdfa 	bl	8014318 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012724:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8012726:	68fb      	ldr	r3, [r7, #12]
 8012728:	689b      	ldr	r3, [r3, #8]
 801272a:	b2db      	uxtb	r3, r3
}
 801272c:	4618      	mov	r0, r3
 801272e:	3710      	adds	r7, #16
 8012730:	46bd      	mov	sp, r7
 8012732:	bd80      	pop	{r7, pc}

08012734 <otLinkSetPanId>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otPanId)p_ot_req->Data[0];
}

OTAPI otError OTCALL otLinkSetPanId(otInstance *aInstance, otPanId aPanId)
{
 8012734:	b580      	push	{r7, lr}
 8012736:	b084      	sub	sp, #16
 8012738:	af00      	add	r7, sp, #0
 801273a:	6078      	str	r0, [r7, #4]
 801273c:	460b      	mov	r3, r1
 801273e:	807b      	strh	r3, [r7, #2]
  Pre_OtCmdProcessing();
 8012740:	f001 fe40 	bl	80143c4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012744:	f001 fddc 	bl	8014300 <THREAD_Get_OTCmdPayloadBuffer>
 8012748:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_PANID;
 801274a:	68fb      	ldr	r3, [r7, #12]
 801274c:	2200      	movs	r2, #0
 801274e:	f042 020f 	orr.w	r2, r2, #15
 8012752:	701a      	strb	r2, [r3, #0]
 8012754:	2200      	movs	r2, #0
 8012756:	705a      	strb	r2, [r3, #1]
 8012758:	2200      	movs	r2, #0
 801275a:	709a      	strb	r2, [r3, #2]
 801275c:	2200      	movs	r2, #0
 801275e:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8012760:	68fb      	ldr	r3, [r7, #12]
 8012762:	2200      	movs	r2, #0
 8012764:	f042 0201 	orr.w	r2, r2, #1
 8012768:	711a      	strb	r2, [r3, #4]
 801276a:	2200      	movs	r2, #0
 801276c:	715a      	strb	r2, [r3, #5]
 801276e:	2200      	movs	r2, #0
 8012770:	719a      	strb	r2, [r3, #6]
 8012772:	2200      	movs	r2, #0
 8012774:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aPanId;
 8012776:	887a      	ldrh	r2, [r7, #2]
 8012778:	68fb      	ldr	r3, [r7, #12]
 801277a:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 801277c:	f001 fde4 	bl	8014348 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012780:	f001 fdca 	bl	8014318 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012784:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8012786:	68fb      	ldr	r3, [r7, #12]
 8012788:	689b      	ldr	r3, [r3, #8]
 801278a:	b2db      	uxtb	r3, r3
}
 801278c:	4618      	mov	r0, r3
 801278e:	3710      	adds	r7, #16
 8012790:	46bd      	mov	sp, r7
 8012792:	bd80      	pop	{r7, pc}

08012794 <otMessageFree>:
#include "thread.h"
#include "message.h"


void otMessageFree(otMessage *aMessage)
{
 8012794:	b580      	push	{r7, lr}
 8012796:	b084      	sub	sp, #16
 8012798:	af00      	add	r7, sp, #0
 801279a:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 801279c:	f001 fe12 	bl	80143c4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80127a0:	f001 fdae 	bl	8014300 <THREAD_Get_OTCmdPayloadBuffer>
 80127a4:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_FREE;
 80127a6:	68fb      	ldr	r3, [r7, #12]
 80127a8:	2200      	movs	r2, #0
 80127aa:	f062 0246 	orn	r2, r2, #70	; 0x46
 80127ae:	701a      	strb	r2, [r3, #0]
 80127b0:	2200      	movs	r2, #0
 80127b2:	705a      	strb	r2, [r3, #1]
 80127b4:	2200      	movs	r2, #0
 80127b6:	709a      	strb	r2, [r3, #2]
 80127b8:	2200      	movs	r2, #0
 80127ba:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 80127bc:	68fb      	ldr	r3, [r7, #12]
 80127be:	2200      	movs	r2, #0
 80127c0:	f042 0201 	orr.w	r2, r2, #1
 80127c4:	711a      	strb	r2, [r3, #4]
 80127c6:	2200      	movs	r2, #0
 80127c8:	715a      	strb	r2, [r3, #5]
 80127ca:	2200      	movs	r2, #0
 80127cc:	719a      	strb	r2, [r3, #6]
 80127ce:	2200      	movs	r2, #0
 80127d0:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 80127d2:	687a      	ldr	r2, [r7, #4]
 80127d4:	68fb      	ldr	r3, [r7, #12]
 80127d6:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 80127d8:	f001 fdb6 	bl	8014348 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80127dc:	f001 fd9c 	bl	8014318 <THREAD_Get_OTCmdRspPayloadBuffer>
 80127e0:	60f8      	str	r0, [r7, #12]
}
 80127e2:	bf00      	nop
 80127e4:	3710      	adds	r7, #16
 80127e6:	46bd      	mov	sp, r7
 80127e8:	bd80      	pop	{r7, pc}

080127ea <otMessageGetOffset>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError)p_ot_req->Data[0];
}

uint16_t otMessageGetOffset(otMessage *aMessage)
{
 80127ea:	b580      	push	{r7, lr}
 80127ec:	b084      	sub	sp, #16
 80127ee:	af00      	add	r7, sp, #0
 80127f0:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 80127f2:	f001 fde7 	bl	80143c4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80127f6:	f001 fd83 	bl	8014300 <THREAD_Get_OTCmdPayloadBuffer>
 80127fa:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_GET_OFFSET;
 80127fc:	68fb      	ldr	r3, [r7, #12]
 80127fe:	2200      	movs	r2, #0
 8012800:	f062 0243 	orn	r2, r2, #67	; 0x43
 8012804:	701a      	strb	r2, [r3, #0]
 8012806:	2200      	movs	r2, #0
 8012808:	705a      	strb	r2, [r3, #1]
 801280a:	2200      	movs	r2, #0
 801280c:	709a      	strb	r2, [r3, #2]
 801280e:	2200      	movs	r2, #0
 8012810:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8012812:	68fb      	ldr	r3, [r7, #12]
 8012814:	2200      	movs	r2, #0
 8012816:	f042 0201 	orr.w	r2, r2, #1
 801281a:	711a      	strb	r2, [r3, #4]
 801281c:	2200      	movs	r2, #0
 801281e:	715a      	strb	r2, [r3, #5]
 8012820:	2200      	movs	r2, #0
 8012822:	719a      	strb	r2, [r3, #6]
 8012824:	2200      	movs	r2, #0
 8012826:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 8012828:	687a      	ldr	r2, [r7, #4]
 801282a:	68fb      	ldr	r3, [r7, #12]
 801282c:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 801282e:	f001 fd8b 	bl	8014348 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012832:	f001 fd71 	bl	8014318 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012836:	60f8      	str	r0, [r7, #12]
    return (uint16_t)p_ot_req->Data[0];
 8012838:	68fb      	ldr	r3, [r7, #12]
 801283a:	689b      	ldr	r3, [r3, #8]
 801283c:	b29b      	uxth	r3, r3
}
 801283e:	4618      	mov	r0, r3
 8012840:	3710      	adds	r7, #16
 8012842:	46bd      	mov	sp, r7
 8012844:	bd80      	pop	{r7, pc}

08012846 <otMessageAppend>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (int8_t)p_ot_req->Data[0];
}

otError otMessageAppend(otMessage *aMessage, const void *aBuf, uint16_t aLength)
{
 8012846:	b580      	push	{r7, lr}
 8012848:	b086      	sub	sp, #24
 801284a:	af00      	add	r7, sp, #0
 801284c:	60f8      	str	r0, [r7, #12]
 801284e:	60b9      	str	r1, [r7, #8]
 8012850:	4613      	mov	r3, r2
 8012852:	80fb      	strh	r3, [r7, #6]
    Pre_OtCmdProcessing();
 8012854:	f001 fdb6 	bl	80143c4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012858:	f001 fd52 	bl	8014300 <THREAD_Get_OTCmdPayloadBuffer>
 801285c:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_APPEND;
 801285e:	697b      	ldr	r3, [r7, #20]
 8012860:	2200      	movs	r2, #0
 8012862:	f062 023e 	orn	r2, r2, #62	; 0x3e
 8012866:	701a      	strb	r2, [r3, #0]
 8012868:	2200      	movs	r2, #0
 801286a:	705a      	strb	r2, [r3, #1]
 801286c:	2200      	movs	r2, #0
 801286e:	709a      	strb	r2, [r3, #2]
 8012870:	2200      	movs	r2, #0
 8012872:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 8012874:	697b      	ldr	r3, [r7, #20]
 8012876:	2200      	movs	r2, #0
 8012878:	f042 0203 	orr.w	r2, r2, #3
 801287c:	711a      	strb	r2, [r3, #4]
 801287e:	2200      	movs	r2, #0
 8012880:	715a      	strb	r2, [r3, #5]
 8012882:	2200      	movs	r2, #0
 8012884:	719a      	strb	r2, [r3, #6]
 8012886:	2200      	movs	r2, #0
 8012888:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 801288a:	68fa      	ldr	r2, [r7, #12]
 801288c:	697b      	ldr	r3, [r7, #20]
 801288e:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aBuf;
 8012890:	68ba      	ldr	r2, [r7, #8]
 8012892:	697b      	ldr	r3, [r7, #20]
 8012894:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aLength;
 8012896:	88fa      	ldrh	r2, [r7, #6]
 8012898:	697b      	ldr	r3, [r7, #20]
 801289a:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 801289c:	f001 fd54 	bl	8014348 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80128a0:	f001 fd3a 	bl	8014318 <THREAD_Get_OTCmdRspPayloadBuffer>
 80128a4:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 80128a6:	697b      	ldr	r3, [r7, #20]
 80128a8:	689b      	ldr	r3, [r3, #8]
 80128aa:	b2db      	uxtb	r3, r3
}
 80128ac:	4618      	mov	r0, r3
 80128ae:	3718      	adds	r7, #24
 80128b0:	46bd      	mov	sp, r7
 80128b2:	bd80      	pop	{r7, pc}

080128b4 <otMessageRead>:

int otMessageRead(otMessage *aMessage, uint16_t aOffset, void *aBuf, uint16_t aLength)
{
 80128b4:	b580      	push	{r7, lr}
 80128b6:	b086      	sub	sp, #24
 80128b8:	af00      	add	r7, sp, #0
 80128ba:	60f8      	str	r0, [r7, #12]
 80128bc:	607a      	str	r2, [r7, #4]
 80128be:	461a      	mov	r2, r3
 80128c0:	460b      	mov	r3, r1
 80128c2:	817b      	strh	r3, [r7, #10]
 80128c4:	4613      	mov	r3, r2
 80128c6:	813b      	strh	r3, [r7, #8]
    Pre_OtCmdProcessing();
 80128c8:	f001 fd7c 	bl	80143c4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80128cc:	f001 fd18 	bl	8014300 <THREAD_Get_OTCmdPayloadBuffer>
 80128d0:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_READ;
 80128d2:	697b      	ldr	r3, [r7, #20]
 80128d4:	2200      	movs	r2, #0
 80128d6:	f062 023d 	orn	r2, r2, #61	; 0x3d
 80128da:	701a      	strb	r2, [r3, #0]
 80128dc:	2200      	movs	r2, #0
 80128de:	705a      	strb	r2, [r3, #1]
 80128e0:	2200      	movs	r2, #0
 80128e2:	709a      	strb	r2, [r3, #2]
 80128e4:	2200      	movs	r2, #0
 80128e6:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=4;
 80128e8:	697b      	ldr	r3, [r7, #20]
 80128ea:	2200      	movs	r2, #0
 80128ec:	f042 0204 	orr.w	r2, r2, #4
 80128f0:	711a      	strb	r2, [r3, #4]
 80128f2:	2200      	movs	r2, #0
 80128f4:	715a      	strb	r2, [r3, #5]
 80128f6:	2200      	movs	r2, #0
 80128f8:	719a      	strb	r2, [r3, #6]
 80128fa:	2200      	movs	r2, #0
 80128fc:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 80128fe:	68fa      	ldr	r2, [r7, #12]
 8012900:	697b      	ldr	r3, [r7, #20]
 8012902:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aOffset;
 8012904:	897a      	ldrh	r2, [r7, #10]
 8012906:	697b      	ldr	r3, [r7, #20]
 8012908:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aBuf;
 801290a:	687a      	ldr	r2, [r7, #4]
 801290c:	697b      	ldr	r3, [r7, #20]
 801290e:	611a      	str	r2, [r3, #16]
    p_ot_req->Data[3] = (uint32_t) aLength;
 8012910:	893a      	ldrh	r2, [r7, #8]
 8012912:	697b      	ldr	r3, [r7, #20]
 8012914:	615a      	str	r2, [r3, #20]

    Ot_Cmd_Transfer();
 8012916:	f001 fd17 	bl	8014348 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801291a:	f001 fcfd 	bl	8014318 <THREAD_Get_OTCmdRspPayloadBuffer>
 801291e:	6178      	str	r0, [r7, #20]
    return (int)p_ot_req->Data[0];
 8012920:	697b      	ldr	r3, [r7, #20]
 8012922:	689b      	ldr	r3, [r3, #8]
}
 8012924:	4618      	mov	r0, r3
 8012926:	3718      	adds	r7, #24
 8012928:	46bd      	mov	sp, r7
 801292a:	bd80      	pop	{r7, pc}

0801292c <OpenThread_CallBack_Processing>:
  * @param  None
  * @retval None
  */

HAL_StatusTypeDef OpenThread_CallBack_Processing(void)
{
 801292c:	b5b0      	push	{r4, r5, r7, lr}
 801292e:	b084      	sub	sp, #16
 8012930:	af02      	add	r7, sp, #8
    HAL_StatusTypeDef status = HAL_OK;
 8012932:	2300      	movs	r3, #0
 8012934:	71fb      	strb	r3, [r7, #7]

    /* Get pointer on received event buffer from M0 */
    Thread_OT_Cmd_Request_t* p_notification = THREAD_Get_NotificationPayloadBuffer();
 8012936:	f001 fcfb 	bl	8014330 <THREAD_Get_NotificationPayloadBuffer>
 801293a:	6038      	str	r0, [r7, #0]

    switch(p_notification->ID)
 801293c:	683b      	ldr	r3, [r7, #0]
 801293e:	681b      	ldr	r3, [r3, #0]
 8012940:	3b01      	subs	r3, #1
 8012942:	2b14      	cmp	r3, #20
 8012944:	f200 8172 	bhi.w	8012c2c <OpenThread_CallBack_Processing+0x300>
 8012948:	a201      	add	r2, pc, #4	; (adr r2, 8012950 <OpenThread_CallBack_Processing+0x24>)
 801294a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801294e:	bf00      	nop
 8012950:	080129a5 	.word	0x080129a5
 8012954:	080129c1 	.word	0x080129c1
 8012958:	080129ed 	.word	0x080129ed
 801295c:	08012a21 	.word	0x08012a21
 8012960:	08012a2d 	.word	0x08012a2d
 8012964:	08012a4b 	.word	0x08012a4b
 8012968:	08012a69 	.word	0x08012a69
 801296c:	08012a87 	.word	0x08012a87
 8012970:	08012aa5 	.word	0x08012aa5
 8012974:	08012ac3 	.word	0x08012ac3
 8012978:	08012ae5 	.word	0x08012ae5
 801297c:	08012b03 	.word	0x08012b03
 8012980:	08012c2d 	.word	0x08012c2d
 8012984:	08012b29 	.word	0x08012b29
 8012988:	08012b5d 	.word	0x08012b5d
 801298c:	08012b85 	.word	0x08012b85
 8012990:	08012ba3 	.word	0x08012ba3
 8012994:	08012bc7 	.word	0x08012bc7
 8012998:	08012bef 	.word	0x08012bef
 801299c:	08012c2d 	.word	0x08012c2d
 80129a0:	08012c0d 	.word	0x08012c0d
    {
    case MSG_M0TOM4_NOTIFY_STATE_CHANGE:
        if (otStateChangedCb != NULL)
 80129a4:	4ba3      	ldr	r3, [pc, #652]	; (8012c34 <OpenThread_CallBack_Processing+0x308>)
 80129a6:	681b      	ldr	r3, [r3, #0]
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	f000 8167 	beq.w	8012c7c <OpenThread_CallBack_Processing+0x350>
        {
            otStateChangedCb((uint32_t) p_notification->Data[0],
 80129ae:	4ba1      	ldr	r3, [pc, #644]	; (8012c34 <OpenThread_CallBack_Processing+0x308>)
 80129b0:	681b      	ldr	r3, [r3, #0]
 80129b2:	683a      	ldr	r2, [r7, #0]
 80129b4:	6890      	ldr	r0, [r2, #8]
                    (void*) p_notification->Data[1]);
 80129b6:	683a      	ldr	r2, [r7, #0]
 80129b8:	68d2      	ldr	r2, [r2, #12]
            otStateChangedCb((uint32_t) p_notification->Data[0],
 80129ba:	4611      	mov	r1, r2
 80129bc:	4798      	blx	r3
        }
        break;
 80129be:	e15d      	b.n	8012c7c <OpenThread_CallBack_Processing+0x350>
    case MSG_M0TOM4_COAP_REQUEST_HANDLER:
        coapRequestHandlerCb = (CoapRequestHandlerCallback) p_notification->Data[0];
 80129c0:	683b      	ldr	r3, [r7, #0]
 80129c2:	689b      	ldr	r3, [r3, #8]
 80129c4:	461a      	mov	r2, r3
 80129c6:	4b9c      	ldr	r3, [pc, #624]	; (8012c38 <OpenThread_CallBack_Processing+0x30c>)
 80129c8:	601a      	str	r2, [r3, #0]

        if (coapRequestHandlerCb != NULL)
 80129ca:	4b9b      	ldr	r3, [pc, #620]	; (8012c38 <OpenThread_CallBack_Processing+0x30c>)
 80129cc:	681b      	ldr	r3, [r3, #0]
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	f000 8156 	beq.w	8012c80 <OpenThread_CallBack_Processing+0x354>
        {
            coapRequestHandlerCb( (otCoapHeader *) p_notification->Data[1],
 80129d4:	4b98      	ldr	r3, [pc, #608]	; (8012c38 <OpenThread_CallBack_Processing+0x30c>)
 80129d6:	681b      	ldr	r3, [r3, #0]
 80129d8:	683a      	ldr	r2, [r7, #0]
 80129da:	68d2      	ldr	r2, [r2, #12]
 80129dc:	4610      	mov	r0, r2
                    (otMessage *) p_notification->Data[2],
 80129de:	683a      	ldr	r2, [r7, #0]
 80129e0:	6912      	ldr	r2, [r2, #16]
            coapRequestHandlerCb( (otCoapHeader *) p_notification->Data[1],
 80129e2:	4611      	mov	r1, r2
                    (otMessageInfo *) p_notification->Data[3]);
 80129e4:	683a      	ldr	r2, [r7, #0]
 80129e6:	6952      	ldr	r2, [r2, #20]
            coapRequestHandlerCb( (otCoapHeader *) p_notification->Data[1],
 80129e8:	4798      	blx	r3
        }
        break;
 80129ea:	e149      	b.n	8012c80 <OpenThread_CallBack_Processing+0x354>
    case MSG_M0TOM4_COAP_RESPONSE_HANDLER:
        coapResponseHandlerCb = (CoapResponseHandlerCallback) p_notification->Data[0];
 80129ec:	683b      	ldr	r3, [r7, #0]
 80129ee:	689b      	ldr	r3, [r3, #8]
 80129f0:	461a      	mov	r2, r3
 80129f2:	4b92      	ldr	r3, [pc, #584]	; (8012c3c <OpenThread_CallBack_Processing+0x310>)
 80129f4:	601a      	str	r2, [r3, #0]
        if (coapResponseHandlerCb != NULL)
 80129f6:	4b91      	ldr	r3, [pc, #580]	; (8012c3c <OpenThread_CallBack_Processing+0x310>)
 80129f8:	681b      	ldr	r3, [r3, #0]
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	f000 8142 	beq.w	8012c84 <OpenThread_CallBack_Processing+0x358>
        {
            coapResponseHandlerCb( (otCoapHeader *) p_notification->Data[1],
 8012a00:	4b8e      	ldr	r3, [pc, #568]	; (8012c3c <OpenThread_CallBack_Processing+0x310>)
 8012a02:	681c      	ldr	r4, [r3, #0]
 8012a04:	683b      	ldr	r3, [r7, #0]
 8012a06:	68db      	ldr	r3, [r3, #12]
 8012a08:	4618      	mov	r0, r3
                    (otMessage *) p_notification->Data[2],
 8012a0a:	683b      	ldr	r3, [r7, #0]
 8012a0c:	691b      	ldr	r3, [r3, #16]
            coapResponseHandlerCb( (otCoapHeader *) p_notification->Data[1],
 8012a0e:	4619      	mov	r1, r3
                    (otMessageInfo *) p_notification->Data[3],
 8012a10:	683b      	ldr	r3, [r7, #0]
 8012a12:	695b      	ldr	r3, [r3, #20]
            coapResponseHandlerCb( (otCoapHeader *) p_notification->Data[1],
 8012a14:	461a      	mov	r2, r3
                    (otError) p_notification->Data[4]);
 8012a16:	683b      	ldr	r3, [r7, #0]
 8012a18:	699b      	ldr	r3, [r3, #24]
            coapResponseHandlerCb( (otCoapHeader *) p_notification->Data[1],
 8012a1a:	b2db      	uxtb	r3, r3
 8012a1c:	47a0      	blx	r4
        }
        break;
 8012a1e:	e131      	b.n	8012c84 <OpenThread_CallBack_Processing+0x358>
    case MSG_M0TOM4_NOTIFY_STACK_RESET:
        /* Store Thread NVM data in Flash*/
        SHCI_C2_FLASH_StoreData(THREAD_IP);
 8012a20:	2001      	movs	r0, #1
 8012a22:	f000 f99b 	bl	8012d5c <SHCI_C2_FLASH_StoreData>
        /* Perform an NVIC Reset in order to reinitalize the device */
        HAL_NVIC_SystemReset();
 8012a26:	f7f4 ff9c 	bl	8007962 <HAL_NVIC_SystemReset>
        break;
 8012a2a:	e14a      	b.n	8012cc2 <OpenThread_CallBack_Processing+0x396>
    case MSG_M0TOM4_IP6_RECEIVE:
        if (otIp6ReceiveCb != NULL)
 8012a2c:	4b84      	ldr	r3, [pc, #528]	; (8012c40 <OpenThread_CallBack_Processing+0x314>)
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	f000 8129 	beq.w	8012c88 <OpenThread_CallBack_Processing+0x35c>
        {
            otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 8012a36:	4b82      	ldr	r3, [pc, #520]	; (8012c40 <OpenThread_CallBack_Processing+0x314>)
 8012a38:	681b      	ldr	r3, [r3, #0]
 8012a3a:	683a      	ldr	r2, [r7, #0]
 8012a3c:	6892      	ldr	r2, [r2, #8]
 8012a3e:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 8012a40:	683a      	ldr	r2, [r7, #0]
 8012a42:	68d2      	ldr	r2, [r2, #12]
            otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 8012a44:	4611      	mov	r1, r2
 8012a46:	4798      	blx	r3
        }
        break;
 8012a48:	e11e      	b.n	8012c88 <OpenThread_CallBack_Processing+0x35c>
    case MSG_M0TOM4_IP6_SLAAC_IID_CREATE:
        if (aIidCreateCb != NULL)
 8012a4a:	4b7e      	ldr	r3, [pc, #504]	; (8012c44 <OpenThread_CallBack_Processing+0x318>)
 8012a4c:	681b      	ldr	r3, [r3, #0]
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	f000 811c 	beq.w	8012c8c <OpenThread_CallBack_Processing+0x360>
        {
            /* Not passing otInstance as first parameter, because created on M0, passing NULL instead */
            aIidCreateCb(NULL, (otNetifAddress*) p_notification->Data[0],
 8012a54:	4b7b      	ldr	r3, [pc, #492]	; (8012c44 <OpenThread_CallBack_Processing+0x318>)
 8012a56:	681b      	ldr	r3, [r3, #0]
 8012a58:	683a      	ldr	r2, [r7, #0]
 8012a5a:	6892      	ldr	r2, [r2, #8]
 8012a5c:	4611      	mov	r1, r2
                    (void*) p_notification->Data[1]);
 8012a5e:	683a      	ldr	r2, [r7, #0]
 8012a60:	68d2      	ldr	r2, [r2, #12]
            aIidCreateCb(NULL, (otNetifAddress*) p_notification->Data[0],
 8012a62:	2000      	movs	r0, #0
 8012a64:	4798      	blx	r3
        }
        break;
 8012a66:	e111      	b.n	8012c8c <OpenThread_CallBack_Processing+0x360>
    case MSG_M0TOM4_HANDLE_ACTIVE_SCAN_RESULT:
        if (otHandleActiveScanResultCb != NULL)
 8012a68:	4b77      	ldr	r3, [pc, #476]	; (8012c48 <OpenThread_CallBack_Processing+0x31c>)
 8012a6a:	681b      	ldr	r3, [r3, #0]
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	f000 810f 	beq.w	8012c90 <OpenThread_CallBack_Processing+0x364>
        {
            otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 8012a72:	4b75      	ldr	r3, [pc, #468]	; (8012c48 <OpenThread_CallBack_Processing+0x31c>)
 8012a74:	681b      	ldr	r3, [r3, #0]
 8012a76:	683a      	ldr	r2, [r7, #0]
 8012a78:	6892      	ldr	r2, [r2, #8]
 8012a7a:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 8012a7c:	683a      	ldr	r2, [r7, #0]
 8012a7e:	68d2      	ldr	r2, [r2, #12]
            otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 8012a80:	4611      	mov	r1, r2
 8012a82:	4798      	blx	r3
        }
        break;
 8012a84:	e104      	b.n	8012c90 <OpenThread_CallBack_Processing+0x364>
    case MSG_M0TOM4_HANDLE_ENERGY_SCAN_RESULT:
        if (otHandleEnergyScanResultCb != NULL)
 8012a86:	4b71      	ldr	r3, [pc, #452]	; (8012c4c <OpenThread_CallBack_Processing+0x320>)
 8012a88:	681b      	ldr	r3, [r3, #0]
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	f000 8102 	beq.w	8012c94 <OpenThread_CallBack_Processing+0x368>
        {
            otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 8012a90:	4b6e      	ldr	r3, [pc, #440]	; (8012c4c <OpenThread_CallBack_Processing+0x320>)
 8012a92:	681b      	ldr	r3, [r3, #0]
 8012a94:	683a      	ldr	r2, [r7, #0]
 8012a96:	6892      	ldr	r2, [r2, #8]
 8012a98:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 8012a9a:	683a      	ldr	r2, [r7, #0]
 8012a9c:	68d2      	ldr	r2, [r2, #12]
            otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 8012a9e:	4611      	mov	r1, r2
 8012aa0:	4798      	blx	r3
        }
        break;
 8012aa2:	e0f7      	b.n	8012c94 <OpenThread_CallBack_Processing+0x368>
    case MSG_M0TOM4_HANDLE_LINK_PCAP:
        if (otLinkPcapCb != NULL)
 8012aa4:	4b6a      	ldr	r3, [pc, #424]	; (8012c50 <OpenThread_CallBack_Processing+0x324>)
 8012aa6:	681b      	ldr	r3, [r3, #0]
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	f000 80f5 	beq.w	8012c98 <OpenThread_CallBack_Processing+0x36c>
        {
            otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 8012aae:	4b68      	ldr	r3, [pc, #416]	; (8012c50 <OpenThread_CallBack_Processing+0x324>)
 8012ab0:	681b      	ldr	r3, [r3, #0]
 8012ab2:	683a      	ldr	r2, [r7, #0]
 8012ab4:	6892      	ldr	r2, [r2, #8]
 8012ab6:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 8012ab8:	683a      	ldr	r2, [r7, #0]
 8012aba:	68d2      	ldr	r2, [r2, #12]
            otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 8012abc:	4611      	mov	r1, r2
 8012abe:	4798      	blx	r3
        }
        break;
 8012ac0:	e0ea      	b.n	8012c98 <OpenThread_CallBack_Processing+0x36c>
    case MSG_M0TOM4_RECEIVE_DIAGNOSTIC_GET_CALLBACK:
        if (otReceiveDiagnosticGetCb != NULL)
 8012ac2:	4b64      	ldr	r3, [pc, #400]	; (8012c54 <OpenThread_CallBack_Processing+0x328>)
 8012ac4:	681b      	ldr	r3, [r3, #0]
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	f000 80e8 	beq.w	8012c9c <OpenThread_CallBack_Processing+0x370>
        {
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 8012acc:	4b61      	ldr	r3, [pc, #388]	; (8012c54 <OpenThread_CallBack_Processing+0x328>)
 8012ace:	681b      	ldr	r3, [r3, #0]
 8012ad0:	683a      	ldr	r2, [r7, #0]
 8012ad2:	6892      	ldr	r2, [r2, #8]
 8012ad4:	4610      	mov	r0, r2
                    (otMessageInfo*) p_notification->Data[1],
 8012ad6:	683a      	ldr	r2, [r7, #0]
 8012ad8:	68d2      	ldr	r2, [r2, #12]
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 8012ada:	4611      	mov	r1, r2
                    (void*) p_notification->Data[2]);
 8012adc:	683a      	ldr	r2, [r7, #0]
 8012ade:	6912      	ldr	r2, [r2, #16]
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 8012ae0:	4798      	blx	r3
        }
        break;
 8012ae2:	e0db      	b.n	8012c9c <OpenThread_CallBack_Processing+0x370>
#if OPENTHREAD_FTD
    case MSG_M0TOM4_THREAD_FTD_CHILD_TABLE_CALLBACK:
        if (otThreadChildTableCallbackCb != NULL)
 8012ae4:	4b5c      	ldr	r3, [pc, #368]	; (8012c58 <OpenThread_CallBack_Processing+0x32c>)
 8012ae6:	681b      	ldr	r3, [r3, #0]
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	f000 80d9 	beq.w	8012ca0 <OpenThread_CallBack_Processing+0x374>
        {
            otThreadChildTableCallbackCb((otThreadChildTableEvent) p_notification->Data[0],
 8012aee:	4b5a      	ldr	r3, [pc, #360]	; (8012c58 <OpenThread_CallBack_Processing+0x32c>)
 8012af0:	681b      	ldr	r3, [r3, #0]
 8012af2:	683a      	ldr	r2, [r7, #0]
 8012af4:	6892      	ldr	r2, [r2, #8]
 8012af6:	b2d0      	uxtb	r0, r2
                    (const otChildInfo *) p_notification->Data[1]);
 8012af8:	683a      	ldr	r2, [r7, #0]
 8012afa:	68d2      	ldr	r2, [r2, #12]
            otThreadChildTableCallbackCb((otThreadChildTableEvent) p_notification->Data[0],
 8012afc:	4611      	mov	r1, r2
 8012afe:	4798      	blx	r3
        }
        break;
 8012b00:	e0ce      	b.n	8012ca0 <OpenThread_CallBack_Processing+0x374>
#endif
    case MSG_M0TOM4_COMMISSIONER_ENERGY_REPORT_CALLBACK:
        if (otCommissionerEnergyReportCb != NULL)
 8012b02:	4b56      	ldr	r3, [pc, #344]	; (8012c5c <OpenThread_CallBack_Processing+0x330>)
 8012b04:	681b      	ldr	r3, [r3, #0]
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	f000 80cc 	beq.w	8012ca4 <OpenThread_CallBack_Processing+0x378>
        {
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 8012b0c:	4b53      	ldr	r3, [pc, #332]	; (8012c5c <OpenThread_CallBack_Processing+0x330>)
 8012b0e:	681c      	ldr	r4, [r3, #0]
 8012b10:	683b      	ldr	r3, [r7, #0]
 8012b12:	6898      	ldr	r0, [r3, #8]
                    (uint8_t*) p_notification->Data[1],
 8012b14:	683b      	ldr	r3, [r7, #0]
 8012b16:	68db      	ldr	r3, [r3, #12]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 8012b18:	4619      	mov	r1, r3
                    (uint8_t) p_notification->Data[2],
 8012b1a:	683b      	ldr	r3, [r7, #0]
 8012b1c:	691b      	ldr	r3, [r3, #16]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 8012b1e:	b2da      	uxtb	r2, r3
                    (void*) p_notification->Data[3]);
 8012b20:	683b      	ldr	r3, [r7, #0]
 8012b22:	695b      	ldr	r3, [r3, #20]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 8012b24:	47a0      	blx	r4
        }
        break;
 8012b26:	e0bd      	b.n	8012ca4 <OpenThread_CallBack_Processing+0x378>
    case MSG_M0TOM4_DNS_RESPONSE_HANDLER:
        if (otDnsResponseHandlerCb != NULL)
 8012b28:	4b4d      	ldr	r3, [pc, #308]	; (8012c60 <OpenThread_CallBack_Processing+0x334>)
 8012b2a:	681b      	ldr	r3, [r3, #0]
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	f000 80bb 	beq.w	8012ca8 <OpenThread_CallBack_Processing+0x37c>
        {
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 8012b32:	4b4b      	ldr	r3, [pc, #300]	; (8012c60 <OpenThread_CallBack_Processing+0x334>)
 8012b34:	681c      	ldr	r4, [r3, #0]
 8012b36:	683b      	ldr	r3, [r7, #0]
 8012b38:	689b      	ldr	r3, [r3, #8]
 8012b3a:	4618      	mov	r0, r3
                    (char*) p_notification->Data[1],
 8012b3c:	683b      	ldr	r3, [r7, #0]
 8012b3e:	68db      	ldr	r3, [r3, #12]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 8012b40:	4619      	mov	r1, r3
                    (otIp6Address*) p_notification->Data[2],
 8012b42:	683b      	ldr	r3, [r7, #0]
 8012b44:	691b      	ldr	r3, [r3, #16]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 8012b46:	461d      	mov	r5, r3
                    (uint32_t) p_notification->Data[3],
 8012b48:	683b      	ldr	r3, [r7, #0]
 8012b4a:	695a      	ldr	r2, [r3, #20]
                    (otError) p_notification->Data[4]);
 8012b4c:	683b      	ldr	r3, [r7, #0]
 8012b4e:	699b      	ldr	r3, [r3, #24]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 8012b50:	b2db      	uxtb	r3, r3
 8012b52:	9300      	str	r3, [sp, #0]
 8012b54:	4613      	mov	r3, r2
 8012b56:	462a      	mov	r2, r5
 8012b58:	47a0      	blx	r4
        }
        break;
 8012b5a:	e0a5      	b.n	8012ca8 <OpenThread_CallBack_Processing+0x37c>
    case MSG_M0TOM4_ICMP6_RECEIVE_CALLBACK:
        if (otIcmp6ReceiveCb != NULL)
 8012b5c:	4b41      	ldr	r3, [pc, #260]	; (8012c64 <OpenThread_CallBack_Processing+0x338>)
 8012b5e:	681b      	ldr	r3, [r3, #0]
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	f000 80a3 	beq.w	8012cac <OpenThread_CallBack_Processing+0x380>
        {
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 8012b66:	4b3f      	ldr	r3, [pc, #252]	; (8012c64 <OpenThread_CallBack_Processing+0x338>)
 8012b68:	681c      	ldr	r4, [r3, #0]
 8012b6a:	683b      	ldr	r3, [r7, #0]
 8012b6c:	689b      	ldr	r3, [r3, #8]
 8012b6e:	4618      	mov	r0, r3
                    (otMessage*) p_notification->Data[1],
 8012b70:	683b      	ldr	r3, [r7, #0]
 8012b72:	68db      	ldr	r3, [r3, #12]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 8012b74:	4619      	mov	r1, r3
                    (otMessageInfo*) p_notification->Data[2],
 8012b76:	683b      	ldr	r3, [r7, #0]
 8012b78:	691b      	ldr	r3, [r3, #16]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 8012b7a:	461a      	mov	r2, r3
                    (otIcmp6Header*) p_notification->Data[3]);
 8012b7c:	683b      	ldr	r3, [r7, #0]
 8012b7e:	695b      	ldr	r3, [r3, #20]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 8012b80:	47a0      	blx	r4
        }
        break;
 8012b82:	e093      	b.n	8012cac <OpenThread_CallBack_Processing+0x380>
    case MSG_M0TOM4_JOINER_CALLBACK:
        if (otJoinerCb != NULL)
 8012b84:	4b38      	ldr	r3, [pc, #224]	; (8012c68 <OpenThread_CallBack_Processing+0x33c>)
 8012b86:	681b      	ldr	r3, [r3, #0]
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	f000 8091 	beq.w	8012cb0 <OpenThread_CallBack_Processing+0x384>
        {
            otJoinerCb((otError) p_notification->Data[0],
 8012b8e:	4b36      	ldr	r3, [pc, #216]	; (8012c68 <OpenThread_CallBack_Processing+0x33c>)
 8012b90:	681b      	ldr	r3, [r3, #0]
 8012b92:	683a      	ldr	r2, [r7, #0]
 8012b94:	6892      	ldr	r2, [r2, #8]
 8012b96:	b2d0      	uxtb	r0, r2
                    (void*) p_notification->Data[1]);
 8012b98:	683a      	ldr	r2, [r7, #0]
 8012b9a:	68d2      	ldr	r2, [r2, #12]
            otJoinerCb((otError) p_notification->Data[0],
 8012b9c:	4611      	mov	r1, r2
 8012b9e:	4798      	blx	r3
        }
        break;
 8012ba0:	e086      	b.n	8012cb0 <OpenThread_CallBack_Processing+0x384>
    case MSG_M0TOM4_LINK_RAW_RECEIVE_DONE:
        if (otLinkRawReceiveDoneCb != NULL)
 8012ba2:	4b32      	ldr	r3, [pc, #200]	; (8012c6c <OpenThread_CallBack_Processing+0x340>)
 8012ba4:	681b      	ldr	r3, [r3, #0]
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	f000 8084 	beq.w	8012cb4 <OpenThread_CallBack_Processing+0x388>
        {
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 8012bac:	4b2f      	ldr	r3, [pc, #188]	; (8012c6c <OpenThread_CallBack_Processing+0x340>)
 8012bae:	681b      	ldr	r3, [r3, #0]
 8012bb0:	683a      	ldr	r2, [r7, #0]
 8012bb2:	6892      	ldr	r2, [r2, #8]
 8012bb4:	4610      	mov	r0, r2
                    (otRadioFrame*) p_notification->Data[1],
 8012bb6:	683a      	ldr	r2, [r7, #0]
 8012bb8:	68d2      	ldr	r2, [r2, #12]
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 8012bba:	4611      	mov	r1, r2
                    (otError) p_notification->Data[2]);
 8012bbc:	683a      	ldr	r2, [r7, #0]
 8012bbe:	6912      	ldr	r2, [r2, #16]
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 8012bc0:	b2d2      	uxtb	r2, r2
 8012bc2:	4798      	blx	r3
        }
        break;
 8012bc4:	e076      	b.n	8012cb4 <OpenThread_CallBack_Processing+0x388>
    case MSG_M0TOM4_LINK_RAW_TRANSMIT_DONE:
        if (otLinkRawTransmitDoneCb != NULL)
 8012bc6:	4b2a      	ldr	r3, [pc, #168]	; (8012c70 <OpenThread_CallBack_Processing+0x344>)
 8012bc8:	681b      	ldr	r3, [r3, #0]
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d074      	beq.n	8012cb8 <OpenThread_CallBack_Processing+0x38c>
        {
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 8012bce:	4b28      	ldr	r3, [pc, #160]	; (8012c70 <OpenThread_CallBack_Processing+0x344>)
 8012bd0:	681c      	ldr	r4, [r3, #0]
 8012bd2:	683b      	ldr	r3, [r7, #0]
 8012bd4:	689b      	ldr	r3, [r3, #8]
 8012bd6:	4618      	mov	r0, r3
                    (otRadioFrame*) p_notification->Data[1],
 8012bd8:	683b      	ldr	r3, [r7, #0]
 8012bda:	68db      	ldr	r3, [r3, #12]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 8012bdc:	4619      	mov	r1, r3
                    (otRadioFrame*) p_notification->Data[2],
 8012bde:	683b      	ldr	r3, [r7, #0]
 8012be0:	691b      	ldr	r3, [r3, #16]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 8012be2:	461a      	mov	r2, r3
                    (otError) p_notification->Data[3]);
 8012be4:	683b      	ldr	r3, [r7, #0]
 8012be6:	695b      	ldr	r3, [r3, #20]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 8012be8:	b2db      	uxtb	r3, r3
 8012bea:	47a0      	blx	r4
        }
        break;
 8012bec:	e064      	b.n	8012cb8 <OpenThread_CallBack_Processing+0x38c>
    case MSG_M0TOM4_LINK_RAW_ENERGY_SCAN_DONE:
        if (otLinkRawEnergyScanDoneCb != NULL)
 8012bee:	4b21      	ldr	r3, [pc, #132]	; (8012c74 <OpenThread_CallBack_Processing+0x348>)
 8012bf0:	681b      	ldr	r3, [r3, #0]
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d062      	beq.n	8012cbc <OpenThread_CallBack_Processing+0x390>
        {
            otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 8012bf6:	4b1f      	ldr	r3, [pc, #124]	; (8012c74 <OpenThread_CallBack_Processing+0x348>)
 8012bf8:	681b      	ldr	r3, [r3, #0]
 8012bfa:	683a      	ldr	r2, [r7, #0]
 8012bfc:	6892      	ldr	r2, [r2, #8]
 8012bfe:	4610      	mov	r0, r2
                    (int8_t) p_notification->Data[1]);
 8012c00:	683a      	ldr	r2, [r7, #0]
 8012c02:	68d2      	ldr	r2, [r2, #12]
            otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 8012c04:	b252      	sxtb	r2, r2
 8012c06:	4611      	mov	r1, r2
 8012c08:	4798      	blx	r3
        }
        break;
 8012c0a:	e057      	b.n	8012cbc <OpenThread_CallBack_Processing+0x390>
    case MSG_M0TOM4_UDP_RECEIVE:
        if (otUdpReceiveCb != NULL)
 8012c0c:	4b1a      	ldr	r3, [pc, #104]	; (8012c78 <OpenThread_CallBack_Processing+0x34c>)
 8012c0e:	681b      	ldr	r3, [r3, #0]
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d055      	beq.n	8012cc0 <OpenThread_CallBack_Processing+0x394>
        {
            otUdpReceiveCb((void*) p_notification->Data[0],
 8012c14:	4b18      	ldr	r3, [pc, #96]	; (8012c78 <OpenThread_CallBack_Processing+0x34c>)
 8012c16:	681b      	ldr	r3, [r3, #0]
 8012c18:	683a      	ldr	r2, [r7, #0]
 8012c1a:	6892      	ldr	r2, [r2, #8]
 8012c1c:	4610      	mov	r0, r2
                    (otMessage*) p_notification->Data[1],
 8012c1e:	683a      	ldr	r2, [r7, #0]
 8012c20:	68d2      	ldr	r2, [r2, #12]
            otUdpReceiveCb((void*) p_notification->Data[0],
 8012c22:	4611      	mov	r1, r2
                    (otMessageInfo*) p_notification->Data[2]);
 8012c24:	683a      	ldr	r2, [r7, #0]
 8012c26:	6912      	ldr	r2, [r2, #16]
            otUdpReceiveCb((void*) p_notification->Data[0],
 8012c28:	4798      	blx	r3
        }
        break;
 8012c2a:	e049      	b.n	8012cc0 <OpenThread_CallBack_Processing+0x394>
                    (void *) p_notification->Data[1]);
        }
        break;
#endif
    default:
        status = HAL_ERROR;
 8012c2c:	2301      	movs	r3, #1
 8012c2e:	71fb      	strb	r3, [r7, #7]
        break;
 8012c30:	e047      	b.n	8012cc2 <OpenThread_CallBack_Processing+0x396>
 8012c32:	bf00      	nop
 8012c34:	20027400 	.word	0x20027400
 8012c38:	20027440 	.word	0x20027440
 8012c3c:	20027444 	.word	0x20027444
 8012c40:	20027408 	.word	0x20027408
 8012c44:	20027404 	.word	0x20027404
 8012c48:	2002740c 	.word	0x2002740c
 8012c4c:	20027410 	.word	0x20027410
 8012c50:	20027414 	.word	0x20027414
 8012c54:	20027418 	.word	0x20027418
 8012c58:	2002741c 	.word	0x2002741c
 8012c5c:	20027420 	.word	0x20027420
 8012c60:	20027424 	.word	0x20027424
 8012c64:	20027428 	.word	0x20027428
 8012c68:	2002742c 	.word	0x2002742c
 8012c6c:	20027430 	.word	0x20027430
 8012c70:	20027434 	.word	0x20027434
 8012c74:	20027438 	.word	0x20027438
 8012c78:	2002743c 	.word	0x2002743c
        break;
 8012c7c:	bf00      	nop
 8012c7e:	e020      	b.n	8012cc2 <OpenThread_CallBack_Processing+0x396>
        break;
 8012c80:	bf00      	nop
 8012c82:	e01e      	b.n	8012cc2 <OpenThread_CallBack_Processing+0x396>
        break;
 8012c84:	bf00      	nop
 8012c86:	e01c      	b.n	8012cc2 <OpenThread_CallBack_Processing+0x396>
        break;
 8012c88:	bf00      	nop
 8012c8a:	e01a      	b.n	8012cc2 <OpenThread_CallBack_Processing+0x396>
        break;
 8012c8c:	bf00      	nop
 8012c8e:	e018      	b.n	8012cc2 <OpenThread_CallBack_Processing+0x396>
        break;
 8012c90:	bf00      	nop
 8012c92:	e016      	b.n	8012cc2 <OpenThread_CallBack_Processing+0x396>
        break;
 8012c94:	bf00      	nop
 8012c96:	e014      	b.n	8012cc2 <OpenThread_CallBack_Processing+0x396>
        break;
 8012c98:	bf00      	nop
 8012c9a:	e012      	b.n	8012cc2 <OpenThread_CallBack_Processing+0x396>
        break;
 8012c9c:	bf00      	nop
 8012c9e:	e010      	b.n	8012cc2 <OpenThread_CallBack_Processing+0x396>
        break;
 8012ca0:	bf00      	nop
 8012ca2:	e00e      	b.n	8012cc2 <OpenThread_CallBack_Processing+0x396>
        break;
 8012ca4:	bf00      	nop
 8012ca6:	e00c      	b.n	8012cc2 <OpenThread_CallBack_Processing+0x396>
        break;
 8012ca8:	bf00      	nop
 8012caa:	e00a      	b.n	8012cc2 <OpenThread_CallBack_Processing+0x396>
        break;
 8012cac:	bf00      	nop
 8012cae:	e008      	b.n	8012cc2 <OpenThread_CallBack_Processing+0x396>
        break;
 8012cb0:	bf00      	nop
 8012cb2:	e006      	b.n	8012cc2 <OpenThread_CallBack_Processing+0x396>
        break;
 8012cb4:	bf00      	nop
 8012cb6:	e004      	b.n	8012cc2 <OpenThread_CallBack_Processing+0x396>
        break;
 8012cb8:	bf00      	nop
 8012cba:	e002      	b.n	8012cc2 <OpenThread_CallBack_Processing+0x396>
        break;
 8012cbc:	bf00      	nop
 8012cbe:	e000      	b.n	8012cc2 <OpenThread_CallBack_Processing+0x396>
        break;
 8012cc0:	bf00      	nop
    }

    TL_THREAD_SendAck();
 8012cc2:	f000 fd13 	bl	80136ec <TL_THREAD_SendAck>
    return status;
 8012cc6:	79fb      	ldrb	r3, [r7, #7]

}
 8012cc8:	4618      	mov	r0, r3
 8012cca:	3708      	adds	r7, #8
 8012ccc:	46bd      	mov	sp, r7
 8012cce:	bdb0      	pop	{r4, r5, r7, pc}

08012cd0 <otPlatRadioSetTransmitPower>:
 * @retval OT_ERROR_NONE             Successfully set the transmit power.
 * @retval OT_ERROR_NOT_IMPLEMENTED  Transmit power configuration via dBm is not implemented.
 *
 */
otError otPlatRadioSetTransmitPower(otInstance *aInstance, int8_t aPower)
{
 8012cd0:	b580      	push	{r7, lr}
 8012cd2:	b084      	sub	sp, #16
 8012cd4:	af00      	add	r7, sp, #0
 8012cd6:	6078      	str	r0, [r7, #4]
 8012cd8:	460b      	mov	r3, r1
 8012cda:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 8012cdc:	f001 fb72 	bl	80143c4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012ce0:	f001 fb0e 	bl	8014300 <THREAD_Get_OTCmdPayloadBuffer>
 8012ce4:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_RADIO_SET_TRANSMIT_POWER;
 8012ce6:	68fb      	ldr	r3, [r7, #12]
 8012ce8:	2200      	movs	r2, #0
 8012cea:	f042 024d 	orr.w	r2, r2, #77	; 0x4d
 8012cee:	701a      	strb	r2, [r3, #0]
 8012cf0:	2200      	movs	r2, #0
 8012cf2:	f042 0201 	orr.w	r2, r2, #1
 8012cf6:	705a      	strb	r2, [r3, #1]
 8012cf8:	2200      	movs	r2, #0
 8012cfa:	709a      	strb	r2, [r3, #2]
 8012cfc:	2200      	movs	r2, #0
 8012cfe:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8012d00:	68fb      	ldr	r3, [r7, #12]
 8012d02:	2200      	movs	r2, #0
 8012d04:	f042 0201 	orr.w	r2, r2, #1
 8012d08:	711a      	strb	r2, [r3, #4]
 8012d0a:	2200      	movs	r2, #0
 8012d0c:	715a      	strb	r2, [r3, #5]
 8012d0e:	2200      	movs	r2, #0
 8012d10:	719a      	strb	r2, [r3, #6]
 8012d12:	2200      	movs	r2, #0
 8012d14:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aPower;
 8012d16:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8012d1a:	68fb      	ldr	r3, [r7, #12]
 8012d1c:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8012d1e:	f001 fb13 	bl	8014348 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012d22:	f001 faf9 	bl	8014318 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012d26:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 8012d28:	68fb      	ldr	r3, [r7, #12]
 8012d2a:	689b      	ldr	r3, [r3, #8]
 8012d2c:	b2db      	uxtb	r3, r3
}
 8012d2e:	4618      	mov	r0, r3
 8012d30:	3710      	adds	r7, #16
 8012d32:	46bd      	mov	sp, r7
 8012d34:	bd80      	pop	{r7, pc}

08012d36 <SHCI_C2_THREAD_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_THREAD_Init( void )
{
 8012d36:	b580      	push	{r7, lr}
 8012d38:	b086      	sub	sp, #24
 8012d3a:	af00      	add	r7, sp, #0
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8012d3c:	1d3b      	adds	r3, r7, #4
 8012d3e:	617b      	str	r3, [r7, #20]

  shci_send( SHCI_OPCODE_C2_THREAD_INIT,
 8012d40:	697b      	ldr	r3, [r7, #20]
 8012d42:	2200      	movs	r2, #0
 8012d44:	2100      	movs	r1, #0
 8012d46:	f64f 4067 	movw	r0, #64615	; 0xfc67
 8012d4a:	f000 f915 	bl	8012f78 <shci_send>
             0,
             0,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8012d4e:	697b      	ldr	r3, [r7, #20]
 8012d50:	330b      	adds	r3, #11
 8012d52:	78db      	ldrb	r3, [r3, #3]
}
 8012d54:	4618      	mov	r0, r3
 8012d56:	3718      	adds	r7, #24
 8012d58:	46bd      	mov	sp, r7
 8012d5a:	bd80      	pop	{r7, pc}

08012d5c <SHCI_C2_FLASH_StoreData>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_FLASH_StoreData( SHCI_C2_FLASH_Ip_t Ip )
{
 8012d5c:	b580      	push	{r7, lr}
 8012d5e:	b088      	sub	sp, #32
 8012d60:	af00      	add	r7, sp, #0
 8012d62:	4603      	mov	r3, r0
 8012d64:	71fb      	strb	r3, [r7, #7]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8012d66:	f107 030c 	add.w	r3, r7, #12
 8012d6a:	61fb      	str	r3, [r7, #28]

  local_buffer[0] = Ip;
 8012d6c:	79fb      	ldrb	r3, [r7, #7]
 8012d6e:	733b      	strb	r3, [r7, #12]

  shci_send( SHCI_OPCODE_C2_FLASH_STORE_DATA,
 8012d70:	f107 020c 	add.w	r2, r7, #12
 8012d74:	69fb      	ldr	r3, [r7, #28]
 8012d76:	2101      	movs	r1, #1
 8012d78:	f64f 406b 	movw	r0, #64619	; 0xfc6b
 8012d7c:	f000 f8fc 	bl	8012f78 <shci_send>
             1,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8012d80:	69fb      	ldr	r3, [r7, #28]
 8012d82:	330b      	adds	r3, #11
 8012d84:	78db      	ldrb	r3, [r3, #3]
}
 8012d86:	4618      	mov	r0, r3
 8012d88:	3720      	adds	r7, #32
 8012d8a:	46bd      	mov	sp, r7
 8012d8c:	bd80      	pop	{r7, pc}
	...

08012d90 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8012d90:	b480      	push	{r7}
 8012d92:	b089      	sub	sp, #36	; 0x24
 8012d94:	af00      	add	r7, sp, #0
 8012d96:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8012d98:	2300      	movs	r3, #0
 8012d9a:	61fb      	str	r3, [r7, #28]
  MB_RefTable_t * p_RefTable = NULL;
 8012d9c:	2300      	movs	r3, #0
 8012d9e:	61bb      	str	r3, [r7, #24]
  uint32_t version = 0;
 8012da0:	2300      	movs	r3, #0
 8012da2:	617b      	str	r3, [r7, #20]
  uint32_t memorySize = 0;
 8012da4:	2300      	movs	r3, #0
 8012da6:	613b      	str	r3, [r7, #16]
  uint32_t infoStack = 0;
 8012da8:	2300      	movs	r3, #0
 8012daa:	60fb      	str	r3, [r7, #12]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8012dac:	4b3c      	ldr	r3, [pc, #240]	; (8012ea0 <SHCI_GetWirelessFwInfo+0x110>)
 8012dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012db0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8012db4:	61fb      	str	r3, [r7, #28]
  p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8012db6:	69fb      	ldr	r3, [r7, #28]
 8012db8:	009b      	lsls	r3, r3, #2
 8012dba:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8012dbe:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8012dc2:	61bb      	str	r3, [r7, #24]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8012dc4:	69bb      	ldr	r3, [r7, #24]
 8012dc6:	681b      	ldr	r3, [r3, #0]
 8012dc8:	691b      	ldr	r3, [r3, #16]
 8012dca:	617b      	str	r3, [r7, #20]
  pWirelessInfo->VersionMajor       = ((version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8012dcc:	697b      	ldr	r3, [r7, #20]
 8012dce:	0e1b      	lsrs	r3, r3, #24
 8012dd0:	b2da      	uxtb	r2, r3
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8012dd6:	697b      	ldr	r3, [r7, #20]
 8012dd8:	0c1b      	lsrs	r3, r3, #16
 8012dda:	b2da      	uxtb	r2, r3
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8012de0:	697b      	ldr	r3, [r7, #20]
 8012de2:	0a1b      	lsrs	r3, r3, #8
 8012de4:	b2da      	uxtb	r2, r3
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8012dea:	697b      	ldr	r3, [r7, #20]
 8012dec:	091b      	lsrs	r3, r3, #4
 8012dee:	b2db      	uxtb	r3, r3
 8012df0:	f003 030f 	and.w	r3, r3, #15
 8012df4:	b2da      	uxtb	r2, r3
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8012dfa:	697b      	ldr	r3, [r7, #20]
 8012dfc:	b2db      	uxtb	r3, r3
 8012dfe:	f003 030f 	and.w	r3, r3, #15
 8012e02:	b2da      	uxtb	r2, r3
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	711a      	strb	r2, [r3, #4]

  memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8012e08:	69bb      	ldr	r3, [r7, #24]
 8012e0a:	681b      	ldr	r3, [r3, #0]
 8012e0c:	695b      	ldr	r3, [r3, #20]
 8012e0e:	613b      	str	r3, [r7, #16]
  pWirelessInfo->MemorySizeSram2B   = ((memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8012e10:	693b      	ldr	r3, [r7, #16]
 8012e12:	0e1b      	lsrs	r3, r3, #24
 8012e14:	b2da      	uxtb	r2, r3
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8012e1a:	693b      	ldr	r3, [r7, #16]
 8012e1c:	0c1b      	lsrs	r3, r3, #16
 8012e1e:	b2da      	uxtb	r2, r3
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8012e24:	693b      	ldr	r3, [r7, #16]
 8012e26:	0a1b      	lsrs	r3, r3, #8
 8012e28:	b2da      	uxtb	r2, r3
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8012e2e:	693b      	ldr	r3, [r7, #16]
 8012e30:	b2da      	uxtb	r2, r3
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	721a      	strb	r2, [r3, #8]

  infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8012e36:	69bb      	ldr	r3, [r7, #24]
 8012e38:	681b      	ldr	r3, [r3, #0]
 8012e3a:	699b      	ldr	r3, [r3, #24]
 8012e3c:	60fb      	str	r3, [r7, #12]
  pWirelessInfo->StackType          = ((infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	b2da      	uxtb	r2, r3
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8012e46:	69bb      	ldr	r3, [r7, #24]
 8012e48:	681b      	ldr	r3, [r3, #0]
 8012e4a:	685b      	ldr	r3, [r3, #4]
 8012e4c:	617b      	str	r3, [r7, #20]
  pWirelessInfo->FusVersionMajor       = ((version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8012e4e:	697b      	ldr	r3, [r7, #20]
 8012e50:	0e1b      	lsrs	r3, r3, #24
 8012e52:	b2da      	uxtb	r2, r3
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8012e58:	697b      	ldr	r3, [r7, #20]
 8012e5a:	0c1b      	lsrs	r3, r3, #16
 8012e5c:	b2da      	uxtb	r2, r3
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8012e62:	697b      	ldr	r3, [r7, #20]
 8012e64:	0a1b      	lsrs	r3, r3, #8
 8012e66:	b2da      	uxtb	r2, r3
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	731a      	strb	r2, [r3, #12]

  memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8012e6c:	69bb      	ldr	r3, [r7, #24]
 8012e6e:	681b      	ldr	r3, [r3, #0]
 8012e70:	689b      	ldr	r3, [r3, #8]
 8012e72:	613b      	str	r3, [r7, #16]
  pWirelessInfo->FusMemorySizeSram2B   = ((memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8012e74:	693b      	ldr	r3, [r7, #16]
 8012e76:	0e1b      	lsrs	r3, r3, #24
 8012e78:	b2da      	uxtb	r2, r3
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8012e7e:	693b      	ldr	r3, [r7, #16]
 8012e80:	0c1b      	lsrs	r3, r3, #16
 8012e82:	b2da      	uxtb	r2, r3
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8012e88:	693b      	ldr	r3, [r7, #16]
 8012e8a:	b2da      	uxtb	r2, r3
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8012e90:	2300      	movs	r3, #0
}
 8012e92:	4618      	mov	r0, r3
 8012e94:	3724      	adds	r7, #36	; 0x24
 8012e96:	46bd      	mov	sp, r7
 8012e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e9c:	4770      	bx	lr
 8012e9e:	bf00      	nop
 8012ea0:	58004000 	.word	0x58004000

08012ea4 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8012ea4:	b580      	push	{r7, lr}
 8012ea6:	b082      	sub	sp, #8
 8012ea8:	af00      	add	r7, sp, #0
 8012eaa:	6078      	str	r0, [r7, #4]
 8012eac:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8012eae:	683b      	ldr	r3, [r7, #0]
 8012eb0:	685b      	ldr	r3, [r3, #4]
 8012eb2:	4a08      	ldr	r2, [pc, #32]	; (8012ed4 <shci_init+0x30>)
 8012eb4:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8012eb6:	4a08      	ldr	r2, [pc, #32]	; (8012ed8 <shci_init+0x34>)
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8012ebc:	4806      	ldr	r0, [pc, #24]	; (8012ed8 <shci_init+0x34>)
 8012ebe:	f000 f911 	bl	80130e4 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8012ec2:	683b      	ldr	r3, [r7, #0]
 8012ec4:	681b      	ldr	r3, [r3, #0]
 8012ec6:	4618      	mov	r0, r3
 8012ec8:	f000 f894 	bl	8012ff4 <TlInit>

  return;
 8012ecc:	bf00      	nop
}
 8012ece:	3708      	adds	r7, #8
 8012ed0:	46bd      	mov	sp, r7
 8012ed2:	bd80      	pop	{r7, pc}
 8012ed4:	20027468 	.word	0x20027468
 8012ed8:	20027448 	.word	0x20027448

08012edc <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8012edc:	b580      	push	{r7, lr}
 8012ede:	b084      	sub	sp, #16
 8012ee0:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8012ee2:	4822      	ldr	r0, [pc, #136]	; (8012f6c <shci_user_evt_proc+0x90>)
 8012ee4:	f000 f922 	bl	801312c <LST_is_empty>
 8012ee8:	4603      	mov	r3, r0
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d12b      	bne.n	8012f46 <shci_user_evt_proc+0x6a>
 8012eee:	4b20      	ldr	r3, [pc, #128]	; (8012f70 <shci_user_evt_proc+0x94>)
 8012ef0:	781b      	ldrb	r3, [r3, #0]
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d027      	beq.n	8012f46 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8012ef6:	f107 030c 	add.w	r3, r7, #12
 8012efa:	4619      	mov	r1, r3
 8012efc:	481b      	ldr	r0, [pc, #108]	; (8012f6c <shci_user_evt_proc+0x90>)
 8012efe:	f000 f99c 	bl	801323a <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8012f02:	4b1c      	ldr	r3, [pc, #112]	; (8012f74 <shci_user_evt_proc+0x98>)
 8012f04:	69db      	ldr	r3, [r3, #28]
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	d00c      	beq.n	8012f24 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8012f0a:	68fb      	ldr	r3, [r7, #12]
 8012f0c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8012f0e:	2301      	movs	r3, #1
 8012f10:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8012f12:	4b18      	ldr	r3, [pc, #96]	; (8012f74 <shci_user_evt_proc+0x98>)
 8012f14:	69db      	ldr	r3, [r3, #28]
 8012f16:	1d3a      	adds	r2, r7, #4
 8012f18:	4610      	mov	r0, r2
 8012f1a:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8012f1c:	793a      	ldrb	r2, [r7, #4]
 8012f1e:	4b14      	ldr	r3, [pc, #80]	; (8012f70 <shci_user_evt_proc+0x94>)
 8012f20:	701a      	strb	r2, [r3, #0]
 8012f22:	e002      	b.n	8012f2a <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8012f24:	4b12      	ldr	r3, [pc, #72]	; (8012f70 <shci_user_evt_proc+0x94>)
 8012f26:	2201      	movs	r2, #1
 8012f28:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8012f2a:	4b11      	ldr	r3, [pc, #68]	; (8012f70 <shci_user_evt_proc+0x94>)
 8012f2c:	781b      	ldrb	r3, [r3, #0]
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d004      	beq.n	8012f3c <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8012f32:	68fb      	ldr	r3, [r7, #12]
 8012f34:	4618      	mov	r0, r3
 8012f36:	f000 fc55 	bl	80137e4 <TL_MM_EvtDone>
 8012f3a:	e004      	b.n	8012f46 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8012f3c:	68fb      	ldr	r3, [r7, #12]
 8012f3e:	4619      	mov	r1, r3
 8012f40:	480a      	ldr	r0, [pc, #40]	; (8012f6c <shci_user_evt_proc+0x90>)
 8012f42:	f000 f913 	bl	801316c <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8012f46:	4809      	ldr	r0, [pc, #36]	; (8012f6c <shci_user_evt_proc+0x90>)
 8012f48:	f000 f8f0 	bl	801312c <LST_is_empty>
 8012f4c:	4603      	mov	r3, r0
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d107      	bne.n	8012f62 <shci_user_evt_proc+0x86>
 8012f52:	4b07      	ldr	r3, [pc, #28]	; (8012f70 <shci_user_evt_proc+0x94>)
 8012f54:	781b      	ldrb	r3, [r3, #0]
 8012f56:	2b00      	cmp	r3, #0
 8012f58:	d003      	beq.n	8012f62 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8012f5a:	4804      	ldr	r0, [pc, #16]	; (8012f6c <shci_user_evt_proc+0x90>)
 8012f5c:	f7ee f92a 	bl	80011b4 <shci_notify_asynch_evt>
  }


  return;
 8012f60:	bf00      	nop
 8012f62:	bf00      	nop
}
 8012f64:	3710      	adds	r7, #16
 8012f66:	46bd      	mov	sp, r7
 8012f68:	bd80      	pop	{r7, pc}
 8012f6a:	bf00      	nop
 8012f6c:	200001d4 	.word	0x200001d4
 8012f70:	200001e4 	.word	0x200001e4
 8012f74:	20027448 	.word	0x20027448

08012f78 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8012f78:	b580      	push	{r7, lr}
 8012f7a:	b084      	sub	sp, #16
 8012f7c:	af00      	add	r7, sp, #0
 8012f7e:	60ba      	str	r2, [r7, #8]
 8012f80:	607b      	str	r3, [r7, #4]
 8012f82:	4603      	mov	r3, r0
 8012f84:	81fb      	strh	r3, [r7, #14]
 8012f86:	460b      	mov	r3, r1
 8012f88:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8012f8a:	2000      	movs	r0, #0
 8012f8c:	f000 f864 	bl	8013058 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8012f90:	4b16      	ldr	r3, [pc, #88]	; (8012fec <shci_send+0x74>)
 8012f92:	681b      	ldr	r3, [r3, #0]
 8012f94:	89fa      	ldrh	r2, [r7, #14]
 8012f96:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8012f9a:	4b14      	ldr	r3, [pc, #80]	; (8012fec <shci_send+0x74>)
 8012f9c:	681b      	ldr	r3, [r3, #0]
 8012f9e:	7b7a      	ldrb	r2, [r7, #13]
 8012fa0:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8012fa2:	4b12      	ldr	r3, [pc, #72]	; (8012fec <shci_send+0x74>)
 8012fa4:	681b      	ldr	r3, [r3, #0]
 8012fa6:	330c      	adds	r3, #12
 8012fa8:	7b7a      	ldrb	r2, [r7, #13]
 8012faa:	68b9      	ldr	r1, [r7, #8]
 8012fac:	4618      	mov	r0, r3
 8012fae:	f002 f8dd 	bl	801516c <memcpy>

  shciContext.io.Send(0,0);
 8012fb2:	4b0f      	ldr	r3, [pc, #60]	; (8012ff0 <shci_send+0x78>)
 8012fb4:	691b      	ldr	r3, [r3, #16]
 8012fb6:	2100      	movs	r1, #0
 8012fb8:	2000      	movs	r0, #0
 8012fba:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8012fbc:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8012fc0:	f7ee f918 	bl	80011f4 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	f103 0008 	add.w	r0, r3, #8
 8012fca:	4b08      	ldr	r3, [pc, #32]	; (8012fec <shci_send+0x74>)
 8012fcc:	6819      	ldr	r1, [r3, #0]
 8012fce:	4b07      	ldr	r3, [pc, #28]	; (8012fec <shci_send+0x74>)
 8012fd0:	681b      	ldr	r3, [r3, #0]
 8012fd2:	789b      	ldrb	r3, [r3, #2]
 8012fd4:	3303      	adds	r3, #3
 8012fd6:	461a      	mov	r2, r3
 8012fd8:	f002 f8c8 	bl	801516c <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8012fdc:	2001      	movs	r0, #1
 8012fde:	f000 f83b 	bl	8013058 <Cmd_SetStatus>

  return;
 8012fe2:	bf00      	nop
}
 8012fe4:	3710      	adds	r7, #16
 8012fe6:	46bd      	mov	sp, r7
 8012fe8:	bd80      	pop	{r7, pc}
 8012fea:	bf00      	nop
 8012fec:	200001e0 	.word	0x200001e0
 8012ff0:	20027448 	.word	0x20027448

08012ff4 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8012ff4:	b580      	push	{r7, lr}
 8012ff6:	b086      	sub	sp, #24
 8012ff8:	af00      	add	r7, sp, #0
 8012ffa:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8012ffc:	4a10      	ldr	r2, [pc, #64]	; (8013040 <TlInit+0x4c>)
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8013002:	4810      	ldr	r0, [pc, #64]	; (8013044 <TlInit+0x50>)
 8013004:	f000 f882 	bl	801310c <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8013008:	2001      	movs	r0, #1
 801300a:	f000 f825 	bl	8013058 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 801300e:	4b0e      	ldr	r3, [pc, #56]	; (8013048 <TlInit+0x54>)
 8013010:	2201      	movs	r2, #1
 8013012:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8013014:	4b0d      	ldr	r3, [pc, #52]	; (801304c <TlInit+0x58>)
 8013016:	681b      	ldr	r3, [r3, #0]
 8013018:	2b00      	cmp	r3, #0
 801301a:	d00c      	beq.n	8013036 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8013020:	4b0b      	ldr	r3, [pc, #44]	; (8013050 <TlInit+0x5c>)
 8013022:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8013024:	4b0b      	ldr	r3, [pc, #44]	; (8013054 <TlInit+0x60>)
 8013026:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8013028:	4b08      	ldr	r3, [pc, #32]	; (801304c <TlInit+0x58>)
 801302a:	681b      	ldr	r3, [r3, #0]
 801302c:	f107 020c 	add.w	r2, r7, #12
 8013030:	4610      	mov	r0, r2
 8013032:	4798      	blx	r3
  }

  return;
 8013034:	bf00      	nop
 8013036:	bf00      	nop
}
 8013038:	3718      	adds	r7, #24
 801303a:	46bd      	mov	sp, r7
 801303c:	bd80      	pop	{r7, pc}
 801303e:	bf00      	nop
 8013040:	200001e0 	.word	0x200001e0
 8013044:	200001d4 	.word	0x200001d4
 8013048:	200001e4 	.word	0x200001e4
 801304c:	20027448 	.word	0x20027448
 8013050:	080130a9 	.word	0x080130a9
 8013054:	080130c1 	.word	0x080130c1

08013058 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8013058:	b580      	push	{r7, lr}
 801305a:	b082      	sub	sp, #8
 801305c:	af00      	add	r7, sp, #0
 801305e:	4603      	mov	r3, r0
 8013060:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8013062:	79fb      	ldrb	r3, [r7, #7]
 8013064:	2b00      	cmp	r3, #0
 8013066:	d10b      	bne.n	8013080 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8013068:	4b0d      	ldr	r3, [pc, #52]	; (80130a0 <Cmd_SetStatus+0x48>)
 801306a:	681b      	ldr	r3, [r3, #0]
 801306c:	2b00      	cmp	r3, #0
 801306e:	d003      	beq.n	8013078 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8013070:	4b0b      	ldr	r3, [pc, #44]	; (80130a0 <Cmd_SetStatus+0x48>)
 8013072:	681b      	ldr	r3, [r3, #0]
 8013074:	2000      	movs	r0, #0
 8013076:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8013078:	4b0a      	ldr	r3, [pc, #40]	; (80130a4 <Cmd_SetStatus+0x4c>)
 801307a:	2200      	movs	r2, #0
 801307c:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 801307e:	e00b      	b.n	8013098 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8013080:	4b08      	ldr	r3, [pc, #32]	; (80130a4 <Cmd_SetStatus+0x4c>)
 8013082:	2201      	movs	r2, #1
 8013084:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8013086:	4b06      	ldr	r3, [pc, #24]	; (80130a0 <Cmd_SetStatus+0x48>)
 8013088:	681b      	ldr	r3, [r3, #0]
 801308a:	2b00      	cmp	r3, #0
 801308c:	d004      	beq.n	8013098 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 801308e:	4b04      	ldr	r3, [pc, #16]	; (80130a0 <Cmd_SetStatus+0x48>)
 8013090:	681b      	ldr	r3, [r3, #0]
 8013092:	2001      	movs	r0, #1
 8013094:	4798      	blx	r3
  return;
 8013096:	bf00      	nop
 8013098:	bf00      	nop
}
 801309a:	3708      	adds	r7, #8
 801309c:	46bd      	mov	sp, r7
 801309e:	bd80      	pop	{r7, pc}
 80130a0:	20027468 	.word	0x20027468
 80130a4:	200001dc 	.word	0x200001dc

080130a8 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 80130a8:	b580      	push	{r7, lr}
 80130aa:	b082      	sub	sp, #8
 80130ac:	af00      	add	r7, sp, #0
 80130ae:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 80130b0:	2000      	movs	r0, #0
 80130b2:	f7ee f88f 	bl	80011d4 <shci_cmd_resp_release>

  return;
 80130b6:	bf00      	nop
}
 80130b8:	3708      	adds	r7, #8
 80130ba:	46bd      	mov	sp, r7
 80130bc:	bd80      	pop	{r7, pc}
	...

080130c0 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 80130c0:	b580      	push	{r7, lr}
 80130c2:	b082      	sub	sp, #8
 80130c4:	af00      	add	r7, sp, #0
 80130c6:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 80130c8:	6879      	ldr	r1, [r7, #4]
 80130ca:	4805      	ldr	r0, [pc, #20]	; (80130e0 <TlUserEvtReceived+0x20>)
 80130cc:	f000 f872 	bl	80131b4 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80130d0:	4803      	ldr	r0, [pc, #12]	; (80130e0 <TlUserEvtReceived+0x20>)
 80130d2:	f7ee f86f 	bl	80011b4 <shci_notify_asynch_evt>

  return;
 80130d6:	bf00      	nop
}
 80130d8:	3708      	adds	r7, #8
 80130da:	46bd      	mov	sp, r7
 80130dc:	bd80      	pop	{r7, pc}
 80130de:	bf00      	nop
 80130e0:	200001d4 	.word	0x200001d4

080130e4 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 80130e4:	b480      	push	{r7}
 80130e6:	b083      	sub	sp, #12
 80130e8:	af00      	add	r7, sp, #0
 80130ea:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	4a05      	ldr	r2, [pc, #20]	; (8013104 <shci_register_io_bus+0x20>)
 80130f0:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	4a04      	ldr	r2, [pc, #16]	; (8013108 <shci_register_io_bus+0x24>)
 80130f6:	611a      	str	r2, [r3, #16]

  return;
 80130f8:	bf00      	nop
}
 80130fa:	370c      	adds	r7, #12
 80130fc:	46bd      	mov	sp, r7
 80130fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013102:	4770      	bx	lr
 8013104:	080135a9 	.word	0x080135a9
 8013108:	080135fd 	.word	0x080135fd

0801310c <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 801310c:	b480      	push	{r7}
 801310e:	b083      	sub	sp, #12
 8013110:	af00      	add	r7, sp, #0
 8013112:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	687a      	ldr	r2, [r7, #4]
 8013118:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	687a      	ldr	r2, [r7, #4]
 801311e:	605a      	str	r2, [r3, #4]
}
 8013120:	bf00      	nop
 8013122:	370c      	adds	r7, #12
 8013124:	46bd      	mov	sp, r7
 8013126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801312a:	4770      	bx	lr

0801312c <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 801312c:	b480      	push	{r7}
 801312e:	b087      	sub	sp, #28
 8013130:	af00      	add	r7, sp, #0
 8013132:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013134:	f3ef 8310 	mrs	r3, PRIMASK
 8013138:	60fb      	str	r3, [r7, #12]
  return(result);
 801313a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 801313c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801313e:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	681b      	ldr	r3, [r3, #0]
 8013144:	687a      	ldr	r2, [r7, #4]
 8013146:	429a      	cmp	r2, r3
 8013148:	d102      	bne.n	8013150 <LST_is_empty+0x24>
  {
    return_value = TRUE;
 801314a:	2301      	movs	r3, #1
 801314c:	75fb      	strb	r3, [r7, #23]
 801314e:	e001      	b.n	8013154 <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 8013150:	2300      	movs	r3, #0
 8013152:	75fb      	strb	r3, [r7, #23]
 8013154:	693b      	ldr	r3, [r7, #16]
 8013156:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013158:	68bb      	ldr	r3, [r7, #8]
 801315a:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 801315e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013160:	4618      	mov	r0, r3
 8013162:	371c      	adds	r7, #28
 8013164:	46bd      	mov	sp, r7
 8013166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801316a:	4770      	bx	lr

0801316c <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 801316c:	b480      	push	{r7}
 801316e:	b087      	sub	sp, #28
 8013170:	af00      	add	r7, sp, #0
 8013172:	6078      	str	r0, [r7, #4]
 8013174:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013176:	f3ef 8310 	mrs	r3, PRIMASK
 801317a:	60fb      	str	r3, [r7, #12]
  return(result);
 801317c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 801317e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8013180:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	681a      	ldr	r2, [r3, #0]
 8013186:	683b      	ldr	r3, [r7, #0]
 8013188:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 801318a:	683b      	ldr	r3, [r7, #0]
 801318c:	687a      	ldr	r2, [r7, #4]
 801318e:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	683a      	ldr	r2, [r7, #0]
 8013194:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8013196:	683b      	ldr	r3, [r7, #0]
 8013198:	681b      	ldr	r3, [r3, #0]
 801319a:	683a      	ldr	r2, [r7, #0]
 801319c:	605a      	str	r2, [r3, #4]
 801319e:	697b      	ldr	r3, [r7, #20]
 80131a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80131a2:	693b      	ldr	r3, [r7, #16]
 80131a4:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80131a8:	bf00      	nop
 80131aa:	371c      	adds	r7, #28
 80131ac:	46bd      	mov	sp, r7
 80131ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131b2:	4770      	bx	lr

080131b4 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 80131b4:	b480      	push	{r7}
 80131b6:	b087      	sub	sp, #28
 80131b8:	af00      	add	r7, sp, #0
 80131ba:	6078      	str	r0, [r7, #4]
 80131bc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80131be:	f3ef 8310 	mrs	r3, PRIMASK
 80131c2:	60fb      	str	r3, [r7, #12]
  return(result);
 80131c4:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80131c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80131c8:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 80131ca:	683b      	ldr	r3, [r7, #0]
 80131cc:	687a      	ldr	r2, [r7, #4]
 80131ce:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	685a      	ldr	r2, [r3, #4]
 80131d4:	683b      	ldr	r3, [r7, #0]
 80131d6:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	683a      	ldr	r2, [r7, #0]
 80131dc:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80131de:	683b      	ldr	r3, [r7, #0]
 80131e0:	685b      	ldr	r3, [r3, #4]
 80131e2:	683a      	ldr	r2, [r7, #0]
 80131e4:	601a      	str	r2, [r3, #0]
 80131e6:	697b      	ldr	r3, [r7, #20]
 80131e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80131ea:	693b      	ldr	r3, [r7, #16]
 80131ec:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80131f0:	bf00      	nop
 80131f2:	371c      	adds	r7, #28
 80131f4:	46bd      	mov	sp, r7
 80131f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131fa:	4770      	bx	lr

080131fc <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 80131fc:	b480      	push	{r7}
 80131fe:	b087      	sub	sp, #28
 8013200:	af00      	add	r7, sp, #0
 8013202:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013204:	f3ef 8310 	mrs	r3, PRIMASK
 8013208:	60fb      	str	r3, [r7, #12]
  return(result);
 801320a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 801320c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801320e:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	685b      	ldr	r3, [r3, #4]
 8013214:	687a      	ldr	r2, [r7, #4]
 8013216:	6812      	ldr	r2, [r2, #0]
 8013218:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	681b      	ldr	r3, [r3, #0]
 801321e:	687a      	ldr	r2, [r7, #4]
 8013220:	6852      	ldr	r2, [r2, #4]
 8013222:	605a      	str	r2, [r3, #4]
 8013224:	697b      	ldr	r3, [r7, #20]
 8013226:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013228:	693b      	ldr	r3, [r7, #16]
 801322a:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 801322e:	bf00      	nop
 8013230:	371c      	adds	r7, #28
 8013232:	46bd      	mov	sp, r7
 8013234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013238:	4770      	bx	lr

0801323a <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 801323a:	b580      	push	{r7, lr}
 801323c:	b086      	sub	sp, #24
 801323e:	af00      	add	r7, sp, #0
 8013240:	6078      	str	r0, [r7, #4]
 8013242:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013244:	f3ef 8310 	mrs	r3, PRIMASK
 8013248:	60fb      	str	r3, [r7, #12]
  return(result);
 801324a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 801324c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801324e:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	681a      	ldr	r2, [r3, #0]
 8013254:	683b      	ldr	r3, [r7, #0]
 8013256:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	681b      	ldr	r3, [r3, #0]
 801325c:	4618      	mov	r0, r3
 801325e:	f7ff ffcd 	bl	80131fc <LST_remove_node>
 8013262:	697b      	ldr	r3, [r7, #20]
 8013264:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013266:	693b      	ldr	r3, [r7, #16]
 8013268:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 801326c:	bf00      	nop
 801326e:	3718      	adds	r7, #24
 8013270:	46bd      	mov	sp, r7
 8013272:	bd80      	pop	{r7, pc}

08013274 <otThreadSetEnabled>:
extern otHandleActiveScanResult otHandleActiveScanResultCb;
extern otReceiveDiagnosticGetCallback otReceiveDiagnosticGetCb;


OTAPI otError OTCALL otThreadSetEnabled(otInstance *aInstance, bool aEnabled)
{
 8013274:	b580      	push	{r7, lr}
 8013276:	b084      	sub	sp, #16
 8013278:	af00      	add	r7, sp, #0
 801327a:	6078      	str	r0, [r7, #4]
 801327c:	460b      	mov	r3, r1
 801327e:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 8013280:	f001 f8a0 	bl	80143c4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013284:	f001 f83c 	bl	8014300 <THREAD_Get_OTCmdPayloadBuffer>
 8013288:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_ENABLED;
 801328a:	68fb      	ldr	r3, [r7, #12]
 801328c:	2200      	movs	r2, #0
 801328e:	f042 0242 	orr.w	r2, r2, #66	; 0x42
 8013292:	701a      	strb	r2, [r3, #0]
 8013294:	2200      	movs	r2, #0
 8013296:	705a      	strb	r2, [r3, #1]
 8013298:	2200      	movs	r2, #0
 801329a:	709a      	strb	r2, [r3, #2]
 801329c:	2200      	movs	r2, #0
 801329e:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 80132a0:	68fb      	ldr	r3, [r7, #12]
 80132a2:	2200      	movs	r2, #0
 80132a4:	f042 0201 	orr.w	r2, r2, #1
 80132a8:	711a      	strb	r2, [r3, #4]
 80132aa:	2200      	movs	r2, #0
 80132ac:	715a      	strb	r2, [r3, #5]
 80132ae:	2200      	movs	r2, #0
 80132b0:	719a      	strb	r2, [r3, #6]
 80132b2:	2200      	movs	r2, #0
 80132b4:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 80132b6:	78fa      	ldrb	r2, [r7, #3]
 80132b8:	68fb      	ldr	r3, [r7, #12]
 80132ba:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 80132bc:	f001 f844 	bl	8014348 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80132c0:	f001 f82a 	bl	8014318 <THREAD_Get_OTCmdRspPayloadBuffer>
 80132c4:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 80132c6:	68fb      	ldr	r3, [r7, #12]
 80132c8:	689b      	ldr	r3, [r3, #8]
 80132ca:	b2db      	uxtb	r3, r3
}
 80132cc:	4618      	mov	r0, r3
 80132ce:	3710      	adds	r7, #16
 80132d0:	46bd      	mov	sp, r7
 80132d2:	bd80      	pop	{r7, pc}

080132d4 <otThreadSetExtendedPanId>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otExtendedPanId *)p_ot_req->Data[0];
}

OTAPI otError OTCALL otThreadSetExtendedPanId(otInstance *aInstance, const otExtendedPanId *aExtendedPanId)
{
 80132d4:	b580      	push	{r7, lr}
 80132d6:	b084      	sub	sp, #16
 80132d8:	af00      	add	r7, sp, #0
 80132da:	6078      	str	r0, [r7, #4]
 80132dc:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 80132de:	f001 f871 	bl	80143c4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80132e2:	f001 f80d 	bl	8014300 <THREAD_Get_OTCmdPayloadBuffer>
 80132e6:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_EXTPANID;
 80132e8:	68fb      	ldr	r3, [r7, #12]
 80132ea:	2200      	movs	r2, #0
 80132ec:	f042 024b 	orr.w	r2, r2, #75	; 0x4b
 80132f0:	701a      	strb	r2, [r3, #0]
 80132f2:	2200      	movs	r2, #0
 80132f4:	705a      	strb	r2, [r3, #1]
 80132f6:	2200      	movs	r2, #0
 80132f8:	709a      	strb	r2, [r3, #2]
 80132fa:	2200      	movs	r2, #0
 80132fc:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 80132fe:	68fb      	ldr	r3, [r7, #12]
 8013300:	2200      	movs	r2, #0
 8013302:	f042 0201 	orr.w	r2, r2, #1
 8013306:	711a      	strb	r2, [r3, #4]
 8013308:	2200      	movs	r2, #0
 801330a:	715a      	strb	r2, [r3, #5]
 801330c:	2200      	movs	r2, #0
 801330e:	719a      	strb	r2, [r3, #6]
 8013310:	2200      	movs	r2, #0
 8013312:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aExtendedPanId;
 8013314:	683a      	ldr	r2, [r7, #0]
 8013316:	68fb      	ldr	r3, [r7, #12]
 8013318:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 801331a:	f001 f815 	bl	8014348 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801331e:	f000 fffb 	bl	8014318 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013322:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8013324:	68fb      	ldr	r3, [r7, #12]
 8013326:	689b      	ldr	r3, [r3, #8]
 8013328:	b2db      	uxtb	r3, r3
}
 801332a:	4618      	mov	r0, r3
 801332c:	3710      	adds	r7, #16
 801332e:	46bd      	mov	sp, r7
 8013330:	bd80      	pop	{r7, pc}

08013332 <otThreadSetMasterKey>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otMasterKey *)p_ot_req->Data[0];
}

OTAPI otError OTCALL otThreadSetMasterKey(otInstance *aInstance, const otMasterKey *aKey)
{
 8013332:	b580      	push	{r7, lr}
 8013334:	b084      	sub	sp, #16
 8013336:	af00      	add	r7, sp, #0
 8013338:	6078      	str	r0, [r7, #4]
 801333a:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 801333c:	f001 f842 	bl	80143c4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013340:	f000 ffde 	bl	8014300 <THREAD_Get_OTCmdPayloadBuffer>
 8013344:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_MASTER_KEY;
 8013346:	68fb      	ldr	r3, [r7, #12]
 8013348:	2200      	movs	r2, #0
 801334a:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 801334e:	701a      	strb	r2, [r3, #0]
 8013350:	2200      	movs	r2, #0
 8013352:	705a      	strb	r2, [r3, #1]
 8013354:	2200      	movs	r2, #0
 8013356:	709a      	strb	r2, [r3, #2]
 8013358:	2200      	movs	r2, #0
 801335a:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 801335c:	68fb      	ldr	r3, [r7, #12]
 801335e:	2200      	movs	r2, #0
 8013360:	f042 0201 	orr.w	r2, r2, #1
 8013364:	711a      	strb	r2, [r3, #4]
 8013366:	2200      	movs	r2, #0
 8013368:	715a      	strb	r2, [r3, #5]
 801336a:	2200      	movs	r2, #0
 801336c:	719a      	strb	r2, [r3, #6]
 801336e:	2200      	movs	r2, #0
 8013370:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aKey;
 8013372:	683a      	ldr	r2, [r7, #0]
 8013374:	68fb      	ldr	r3, [r7, #12]
 8013376:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8013378:	f000 ffe6 	bl	8014348 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801337c:	f000 ffcc 	bl	8014318 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013380:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8013382:	68fb      	ldr	r3, [r7, #12]
 8013384:	689b      	ldr	r3, [r3, #8]
 8013386:	b2db      	uxtb	r3, r3
}
 8013388:	4618      	mov	r0, r3
 801338a:	3710      	adds	r7, #16
 801338c:	46bd      	mov	sp, r7
 801338e:	bd80      	pop	{r7, pc}

08013390 <otThreadGetMeshLocalEid>:

OTAPI const otIp6Address *OTCALL otThreadGetMeshLocalEid(otInstance *aInstance)
{
 8013390:	b580      	push	{r7, lr}
 8013392:	b084      	sub	sp, #16
 8013394:	af00      	add	r7, sp, #0
 8013396:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8013398:	f001 f814 	bl	80143c4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 801339c:	f000 ffb0 	bl	8014300 <THREAD_Get_OTCmdPayloadBuffer>
 80133a0:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_MESH_LOCAL_EID;
 80133a2:	68fb      	ldr	r3, [r7, #12]
 80133a4:	2200      	movs	r2, #0
 80133a6:	f042 0251 	orr.w	r2, r2, #81	; 0x51
 80133aa:	701a      	strb	r2, [r3, #0]
 80133ac:	2200      	movs	r2, #0
 80133ae:	705a      	strb	r2, [r3, #1]
 80133b0:	2200      	movs	r2, #0
 80133b2:	709a      	strb	r2, [r3, #2]
 80133b4:	2200      	movs	r2, #0
 80133b6:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 80133b8:	68fb      	ldr	r3, [r7, #12]
 80133ba:	2200      	movs	r2, #0
 80133bc:	711a      	strb	r2, [r3, #4]
 80133be:	2200      	movs	r2, #0
 80133c0:	715a      	strb	r2, [r3, #5]
 80133c2:	2200      	movs	r2, #0
 80133c4:	719a      	strb	r2, [r3, #6]
 80133c6:	2200      	movs	r2, #0
 80133c8:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 80133ca:	f000 ffbd 	bl	8014348 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80133ce:	f000 ffa3 	bl	8014318 <THREAD_Get_OTCmdRspPayloadBuffer>
 80133d2:	60f8      	str	r0, [r7, #12]
  return (otIp6Address *)p_ot_req->Data[0];
 80133d4:	68fb      	ldr	r3, [r7, #12]
 80133d6:	689b      	ldr	r3, [r3, #8]
}
 80133d8:	4618      	mov	r0, r3
 80133da:	3710      	adds	r7, #16
 80133dc:	46bd      	mov	sp, r7
 80133de:	bd80      	pop	{r7, pc}

080133e0 <otThreadSetNetworkName>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (char *)p_ot_req->Data[0];
}

OTAPI otError OTCALL otThreadSetNetworkName(otInstance *aInstance, const char *aNetworkName)
{
 80133e0:	b580      	push	{r7, lr}
 80133e2:	b084      	sub	sp, #16
 80133e4:	af00      	add	r7, sp, #0
 80133e6:	6078      	str	r0, [r7, #4]
 80133e8:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 80133ea:	f000 ffeb 	bl	80143c4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80133ee:	f000 ff87 	bl	8014300 <THREAD_Get_OTCmdPayloadBuffer>
 80133f2:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_NETWORK_NAME;
 80133f4:	68fb      	ldr	r3, [r7, #12]
 80133f6:	2200      	movs	r2, #0
 80133f8:	f042 0256 	orr.w	r2, r2, #86	; 0x56
 80133fc:	701a      	strb	r2, [r3, #0]
 80133fe:	2200      	movs	r2, #0
 8013400:	705a      	strb	r2, [r3, #1]
 8013402:	2200      	movs	r2, #0
 8013404:	709a      	strb	r2, [r3, #2]
 8013406:	2200      	movs	r2, #0
 8013408:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 801340a:	68fb      	ldr	r3, [r7, #12]
 801340c:	2200      	movs	r2, #0
 801340e:	f042 0201 	orr.w	r2, r2, #1
 8013412:	711a      	strb	r2, [r3, #4]
 8013414:	2200      	movs	r2, #0
 8013416:	715a      	strb	r2, [r3, #5]
 8013418:	2200      	movs	r2, #0
 801341a:	719a      	strb	r2, [r3, #6]
 801341c:	2200      	movs	r2, #0
 801341e:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aNetworkName;
 8013420:	683a      	ldr	r2, [r7, #0]
 8013422:	68fb      	ldr	r3, [r7, #12]
 8013424:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8013426:	f000 ff8f 	bl	8014348 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801342a:	f000 ff75 	bl	8014318 <THREAD_Get_OTCmdRspPayloadBuffer>
 801342e:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8013430:	68fb      	ldr	r3, [r7, #12]
 8013432:	689b      	ldr	r3, [r3, #8]
 8013434:	b2db      	uxtb	r3, r3
}
 8013436:	4618      	mov	r0, r3
 8013438:	3710      	adds	r7, #16
 801343a:	46bd      	mov	sp, r7
 801343c:	bd80      	pop	{r7, pc}

0801343e <otThreadGetDeviceRole>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

OTAPI otDeviceRole OTCALL otThreadGetDeviceRole(otInstance *aInstance)
{
 801343e:	b580      	push	{r7, lr}
 8013440:	b084      	sub	sp, #16
 8013442:	af00      	add	r7, sp, #0
 8013444:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8013446:	f000 ffbd 	bl	80143c4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 801344a:	f000 ff59 	bl	8014300 <THREAD_Get_OTCmdPayloadBuffer>
 801344e:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_DEVICE_ROLE;
 8013450:	68fb      	ldr	r3, [r7, #12]
 8013452:	2200      	movs	r2, #0
 8013454:	f042 025e 	orr.w	r2, r2, #94	; 0x5e
 8013458:	701a      	strb	r2, [r3, #0]
 801345a:	2200      	movs	r2, #0
 801345c:	705a      	strb	r2, [r3, #1]
 801345e:	2200      	movs	r2, #0
 8013460:	709a      	strb	r2, [r3, #2]
 8013462:	2200      	movs	r2, #0
 8013464:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	2200      	movs	r2, #0
 801346a:	711a      	strb	r2, [r3, #4]
 801346c:	2200      	movs	r2, #0
 801346e:	715a      	strb	r2, [r3, #5]
 8013470:	2200      	movs	r2, #0
 8013472:	719a      	strb	r2, [r3, #6]
 8013474:	2200      	movs	r2, #0
 8013476:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 8013478:	f000 ff66 	bl	8014348 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801347c:	f000 ff4c 	bl	8014318 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013480:	60f8      	str	r0, [r7, #12]
  return (otDeviceRole)p_ot_req->Data[0];
 8013482:	68fb      	ldr	r3, [r7, #12]
 8013484:	689b      	ldr	r3, [r3, #8]
 8013486:	b2db      	uxtb	r3, r3
}
 8013488:	4618      	mov	r0, r3
 801348a:	3710      	adds	r7, #16
 801348c:	46bd      	mov	sp, r7
 801348e:	bd80      	pop	{r7, pc}

08013490 <otThreadGetRloc16>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint32_t)p_ot_req->Data[0];
}

OTAPI uint16_t OTCALL otThreadGetRloc16(otInstance *aInstance)
{
 8013490:	b580      	push	{r7, lr}
 8013492:	b084      	sub	sp, #16
 8013494:	af00      	add	r7, sp, #0
 8013496:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8013498:	f000 ff94 	bl	80143c4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 801349c:	f000 ff30 	bl	8014300 <THREAD_Get_OTCmdPayloadBuffer>
 80134a0:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_RLOC_16;
 80134a2:	68fb      	ldr	r3, [r7, #12]
 80134a4:	2200      	movs	r2, #0
 80134a6:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80134aa:	701a      	strb	r2, [r3, #0]
 80134ac:	2200      	movs	r2, #0
 80134ae:	705a      	strb	r2, [r3, #1]
 80134b0:	2200      	movs	r2, #0
 80134b2:	709a      	strb	r2, [r3, #2]
 80134b4:	2200      	movs	r2, #0
 80134b6:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 80134b8:	68fb      	ldr	r3, [r7, #12]
 80134ba:	2200      	movs	r2, #0
 80134bc:	711a      	strb	r2, [r3, #4]
 80134be:	2200      	movs	r2, #0
 80134c0:	715a      	strb	r2, [r3, #5]
 80134c2:	2200      	movs	r2, #0
 80134c4:	719a      	strb	r2, [r3, #6]
 80134c6:	2200      	movs	r2, #0
 80134c8:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 80134ca:	f000 ff3d 	bl	8014348 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80134ce:	f000 ff23 	bl	8014318 <THREAD_Get_OTCmdRspPayloadBuffer>
 80134d2:	60f8      	str	r0, [r7, #12]
  return (uint16_t)p_ot_req->Data[0];
 80134d4:	68fb      	ldr	r3, [r7, #12]
 80134d6:	689b      	ldr	r3, [r3, #8]
 80134d8:	b29b      	uxth	r3, r3
}
 80134da:	4618      	mov	r0, r3
 80134dc:	3710      	adds	r7, #16
 80134de:	46bd      	mov	sp, r7
 80134e0:	bd80      	pop	{r7, pc}

080134e2 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 80134e2:	b580      	push	{r7, lr}
 80134e4:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 80134e6:	f001 f9f1 	bl	80148cc <HW_IPCC_Enable>

  return;
 80134ea:	bf00      	nop
}
 80134ec:	bd80      	pop	{r7, pc}
	...

080134f0 <TL_Init>:


void TL_Init( void )
{
 80134f0:	b580      	push	{r7, lr}
 80134f2:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 80134f4:	4b0f      	ldr	r3, [pc, #60]	; (8013534 <TL_Init+0x44>)
 80134f6:	4a10      	ldr	r2, [pc, #64]	; (8013538 <TL_Init+0x48>)
 80134f8:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 80134fa:	4b0e      	ldr	r3, [pc, #56]	; (8013534 <TL_Init+0x44>)
 80134fc:	4a0f      	ldr	r2, [pc, #60]	; (801353c <TL_Init+0x4c>)
 80134fe:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8013500:	4b0c      	ldr	r3, [pc, #48]	; (8013534 <TL_Init+0x44>)
 8013502:	4a0f      	ldr	r2, [pc, #60]	; (8013540 <TL_Init+0x50>)
 8013504:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8013506:	4b0b      	ldr	r3, [pc, #44]	; (8013534 <TL_Init+0x44>)
 8013508:	4a0e      	ldr	r2, [pc, #56]	; (8013544 <TL_Init+0x54>)
 801350a:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_sys_table = &TL_SysTable;
 801350c:	4b09      	ldr	r3, [pc, #36]	; (8013534 <TL_Init+0x44>)
 801350e:	4a0e      	ldr	r2, [pc, #56]	; (8013548 <TL_Init+0x58>)
 8013510:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8013512:	4b08      	ldr	r3, [pc, #32]	; (8013534 <TL_Init+0x44>)
 8013514:	4a0d      	ldr	r2, [pc, #52]	; (801354c <TL_Init+0x5c>)
 8013516:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8013518:	4b06      	ldr	r3, [pc, #24]	; (8013534 <TL_Init+0x44>)
 801351a:	4a0d      	ldr	r2, [pc, #52]	; (8013550 <TL_Init+0x60>)
 801351c:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 801351e:	4b05      	ldr	r3, [pc, #20]	; (8013534 <TL_Init+0x44>)
 8013520:	4a0c      	ldr	r2, [pc, #48]	; (8013554 <TL_Init+0x64>)
 8013522:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8013524:	4b03      	ldr	r3, [pc, #12]	; (8013534 <TL_Init+0x44>)
 8013526:	4a0c      	ldr	r2, [pc, #48]	; (8013558 <TL_Init+0x68>)
 8013528:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 801352a:	f001 f9df 	bl	80148ec <HW_IPCC_Init>

  return;
 801352e:	bf00      	nop
}
 8013530:	bd80      	pop	{r7, pc}
 8013532:	bf00      	nop
 8013534:	20030000 	.word	0x20030000
 8013538:	20030024 	.word	0x20030024
 801353c:	20030044 	.word	0x20030044
 8013540:	20030054 	.word	0x20030054
 8013544:	20030060 	.word	0x20030060
 8013548:	20030068 	.word	0x20030068
 801354c:	20030070 	.word	0x20030070
 8013550:	2003008c 	.word	0x2003008c
 8013554:	20030090 	.word	0x20030090
 8013558:	2003009c 	.word	0x2003009c

0801355c <HW_IPCC_BLE_RxEvtNot>:

  return 0;
}

void HW_IPCC_BLE_RxEvtNot(void)
{
 801355c:	b580      	push	{r7, lr}
 801355e:	b082      	sub	sp, #8
 8013560:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8013562:	e009      	b.n	8013578 <HW_IPCC_BLE_RxEvtNot+0x1c>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8013564:	1d3b      	adds	r3, r7, #4
 8013566:	4619      	mov	r1, r3
 8013568:	4808      	ldr	r0, [pc, #32]	; (801358c <HW_IPCC_BLE_RxEvtNot+0x30>)
 801356a:	f7ff fe66 	bl	801323a <LST_remove_head>

    BLE_IoBusEvtCallBackFunction(phcievt);
 801356e:	4b08      	ldr	r3, [pc, #32]	; (8013590 <HW_IPCC_BLE_RxEvtNot+0x34>)
 8013570:	681b      	ldr	r3, [r3, #0]
 8013572:	687a      	ldr	r2, [r7, #4]
 8013574:	4610      	mov	r0, r2
 8013576:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8013578:	4804      	ldr	r0, [pc, #16]	; (801358c <HW_IPCC_BLE_RxEvtNot+0x30>)
 801357a:	f7ff fdd7 	bl	801312c <LST_is_empty>
 801357e:	4603      	mov	r3, r0
 8013580:	2b00      	cmp	r3, #0
 8013582:	d0ef      	beq.n	8013564 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8013584:	bf00      	nop
}
 8013586:	3708      	adds	r7, #8
 8013588:	46bd      	mov	sp, r7
 801358a:	bd80      	pop	{r7, pc}
 801358c:	20030828 	.word	0x20030828
 8013590:	20027474 	.word	0x20027474

08013594 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8013594:	b580      	push	{r7, lr}
 8013596:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8013598:	4b02      	ldr	r3, [pc, #8]	; (80135a4 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 801359a:	681b      	ldr	r3, [r3, #0]
 801359c:	4798      	blx	r3

  return;
 801359e:	bf00      	nop
}
 80135a0:	bd80      	pop	{r7, pc}
 80135a2:	bf00      	nop
 80135a4:	20027478 	.word	0x20027478

080135a8 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 80135a8:	b580      	push	{r7, lr}
 80135aa:	b084      	sub	sp, #16
 80135ac:	af00      	add	r7, sp, #0
 80135ae:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 80135b4:	480d      	ldr	r0, [pc, #52]	; (80135ec <TL_SYS_Init+0x44>)
 80135b6:	f7ff fda9 	bl	801310c <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 80135ba:	4b0d      	ldr	r3, [pc, #52]	; (80135f0 <TL_SYS_Init+0x48>)
 80135bc:	68db      	ldr	r3, [r3, #12]
 80135be:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80135c0:	68fb      	ldr	r3, [r7, #12]
 80135c2:	689a      	ldr	r2, [r3, #8]
 80135c4:	68bb      	ldr	r3, [r7, #8]
 80135c6:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 80135c8:	68bb      	ldr	r3, [r7, #8]
 80135ca:	4a08      	ldr	r2, [pc, #32]	; (80135ec <TL_SYS_Init+0x44>)
 80135cc:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 80135ce:	f001 f9bb 	bl	8014948 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 80135d2:	68fb      	ldr	r3, [r7, #12]
 80135d4:	681b      	ldr	r3, [r3, #0]
 80135d6:	4a07      	ldr	r2, [pc, #28]	; (80135f4 <TL_SYS_Init+0x4c>)
 80135d8:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 80135da:	68fb      	ldr	r3, [r7, #12]
 80135dc:	685b      	ldr	r3, [r3, #4]
 80135de:	4a06      	ldr	r2, [pc, #24]	; (80135f8 <TL_SYS_Init+0x50>)
 80135e0:	6013      	str	r3, [r2, #0]

  return 0;
 80135e2:	2300      	movs	r3, #0
}
 80135e4:	4618      	mov	r0, r3
 80135e6:	3710      	adds	r7, #16
 80135e8:	46bd      	mov	sp, r7
 80135ea:	bd80      	pop	{r7, pc}
 80135ec:	20030830 	.word	0x20030830
 80135f0:	20030000 	.word	0x20030000
 80135f4:	2002747c 	.word	0x2002747c
 80135f8:	20027480 	.word	0x20027480

080135fc <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 80135fc:	b580      	push	{r7, lr}
 80135fe:	b082      	sub	sp, #8
 8013600:	af00      	add	r7, sp, #0
 8013602:	6078      	str	r0, [r7, #4]
 8013604:	460b      	mov	r3, r1
 8013606:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8013608:	4b05      	ldr	r3, [pc, #20]	; (8013620 <TL_SYS_SendCmd+0x24>)
 801360a:	68db      	ldr	r3, [r3, #12]
 801360c:	681b      	ldr	r3, [r3, #0]
 801360e:	2210      	movs	r2, #16
 8013610:	721a      	strb	r2, [r3, #8]

  HW_IPCC_SYS_SendCmd();
 8013612:	f001 f9a3 	bl	801495c <HW_IPCC_SYS_SendCmd>

  return 0;
 8013616:	2300      	movs	r3, #0
}
 8013618:	4618      	mov	r0, r3
 801361a:	3708      	adds	r7, #8
 801361c:	46bd      	mov	sp, r7
 801361e:	bd80      	pop	{r7, pc}
 8013620:	20030000 	.word	0x20030000

08013624 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8013624:	b580      	push	{r7, lr}
 8013626:	af00      	add	r7, sp, #0
  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8013628:	4b04      	ldr	r3, [pc, #16]	; (801363c <HW_IPCC_SYS_CmdEvtNot+0x18>)
 801362a:	681b      	ldr	r3, [r3, #0]
 801362c:	4a04      	ldr	r2, [pc, #16]	; (8013640 <HW_IPCC_SYS_CmdEvtNot+0x1c>)
 801362e:	68d2      	ldr	r2, [r2, #12]
 8013630:	6812      	ldr	r2, [r2, #0]
 8013632:	4610      	mov	r0, r2
 8013634:	4798      	blx	r3

  return;
 8013636:	bf00      	nop
}
 8013638:	bd80      	pop	{r7, pc}
 801363a:	bf00      	nop
 801363c:	2002747c 	.word	0x2002747c
 8013640:	20030000 	.word	0x20030000

08013644 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8013644:	b580      	push	{r7, lr}
 8013646:	b082      	sub	sp, #8
 8013648:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 801364a:	e009      	b.n	8013660 <HW_IPCC_SYS_EvtNot+0x1c>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 801364c:	1d3b      	adds	r3, r7, #4
 801364e:	4619      	mov	r1, r3
 8013650:	4808      	ldr	r0, [pc, #32]	; (8013674 <HW_IPCC_SYS_EvtNot+0x30>)
 8013652:	f7ff fdf2 	bl	801323a <LST_remove_head>
    SYS_EVT_IoBusCallBackFunction( p_evt );
 8013656:	4b08      	ldr	r3, [pc, #32]	; (8013678 <HW_IPCC_SYS_EvtNot+0x34>)
 8013658:	681b      	ldr	r3, [r3, #0]
 801365a:	687a      	ldr	r2, [r7, #4]
 801365c:	4610      	mov	r0, r2
 801365e:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8013660:	4804      	ldr	r0, [pc, #16]	; (8013674 <HW_IPCC_SYS_EvtNot+0x30>)
 8013662:	f7ff fd63 	bl	801312c <LST_is_empty>
 8013666:	4603      	mov	r3, r0
 8013668:	2b00      	cmp	r3, #0
 801366a:	d0ef      	beq.n	801364c <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 801366c:	bf00      	nop
}
 801366e:	3708      	adds	r7, #8
 8013670:	46bd      	mov	sp, r7
 8013672:	bd80      	pop	{r7, pc}
 8013674:	20030830 	.word	0x20030830
 8013678:	20027480 	.word	0x20027480

0801367c <TL_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void TL_THREAD_Init( TL_TH_Config_t *p_Config )
{
 801367c:	b580      	push	{r7, lr}
 801367e:	b084      	sub	sp, #16
 8013680:	af00      	add	r7, sp, #0
 8013682:	6078      	str	r0, [r7, #4]
  MB_ThreadTable_t  * p_thread_table;

  p_thread_table = TL_RefTable.p_thread_table;
 8013684:	4b0a      	ldr	r3, [pc, #40]	; (80136b0 <TL_THREAD_Init+0x34>)
 8013686:	689b      	ldr	r3, [r3, #8]
 8013688:	60fb      	str	r3, [r7, #12]

  p_thread_table->clicmdrsp_buffer = p_Config->p_ThreadCliRspBuffer;
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	685a      	ldr	r2, [r3, #4]
 801368e:	68fb      	ldr	r3, [r7, #12]
 8013690:	605a      	str	r2, [r3, #4]
  p_thread_table->otcmdrsp_buffer = p_Config->p_ThreadOtCmdRspBuffer;
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	681a      	ldr	r2, [r3, #0]
 8013696:	68fb      	ldr	r3, [r7, #12]
 8013698:	609a      	str	r2, [r3, #8]
  p_thread_table->notack_buffer = p_Config->p_ThreadNotAckBuffer;
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	689a      	ldr	r2, [r3, #8]
 801369e:	68fb      	ldr	r3, [r7, #12]
 80136a0:	601a      	str	r2, [r3, #0]

  HW_IPCC_THREAD_Init();
 80136a2:	f001 f981 	bl	80149a8 <HW_IPCC_THREAD_Init>

  return;
 80136a6:	bf00      	nop
}
 80136a8:	3710      	adds	r7, #16
 80136aa:	46bd      	mov	sp, r7
 80136ac:	bd80      	pop	{r7, pc}
 80136ae:	bf00      	nop
 80136b0:	20030000 	.word	0x20030000

080136b4 <TL_OT_SendCmd>:

void TL_OT_SendCmd( void )
{
 80136b4:	b580      	push	{r7, lr}
 80136b6:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->otcmdrsp_buffer))->cmdserial.type = TL_OTCMD_PKT_TYPE;
 80136b8:	4b04      	ldr	r3, [pc, #16]	; (80136cc <TL_OT_SendCmd+0x18>)
 80136ba:	689b      	ldr	r3, [r3, #8]
 80136bc:	689b      	ldr	r3, [r3, #8]
 80136be:	2208      	movs	r2, #8
 80136c0:	721a      	strb	r2, [r3, #8]

  HW_IPCC_OT_SendCmd();
 80136c2:	f001 f97f 	bl	80149c4 <HW_IPCC_OT_SendCmd>

  return;
 80136c6:	bf00      	nop
}
 80136c8:	bd80      	pop	{r7, pc}
 80136ca:	bf00      	nop
 80136cc:	20030000 	.word	0x20030000

080136d0 <TL_CLI_SendCmd>:

void TL_CLI_SendCmd( void )
{
 80136d0:	b580      	push	{r7, lr}
 80136d2:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->clicmdrsp_buffer))->cmdserial.type = TL_CLICMD_PKT_TYPE;
 80136d4:	4b04      	ldr	r3, [pc, #16]	; (80136e8 <TL_CLI_SendCmd+0x18>)
 80136d6:	689b      	ldr	r3, [r3, #8]
 80136d8:	685b      	ldr	r3, [r3, #4]
 80136da:	220a      	movs	r2, #10
 80136dc:	721a      	strb	r2, [r3, #8]

  HW_IPCC_CLI_SendCmd();
 80136de:	f001 f97f 	bl	80149e0 <HW_IPCC_CLI_SendCmd>

  return;
 80136e2:	bf00      	nop
}
 80136e4:	bd80      	pop	{r7, pc}
 80136e6:	bf00      	nop
 80136e8:	20030000 	.word	0x20030000

080136ec <TL_THREAD_SendAck>:

void TL_THREAD_SendAck ( void )
{
 80136ec:	b580      	push	{r7, lr}
 80136ee:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 80136f0:	4b04      	ldr	r3, [pc, #16]	; (8013704 <TL_THREAD_SendAck+0x18>)
 80136f2:	689b      	ldr	r3, [r3, #8]
 80136f4:	681b      	ldr	r3, [r3, #0]
 80136f6:	220d      	movs	r2, #13
 80136f8:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_SendAck();
 80136fa:	f001 f97b 	bl	80149f4 <HW_IPCC_THREAD_SendAck>

  return;
 80136fe:	bf00      	nop
}
 8013700:	bd80      	pop	{r7, pc}
 8013702:	bf00      	nop
 8013704:	20030000 	.word	0x20030000

08013708 <TL_THREAD_CliSendAck>:

void TL_THREAD_CliSendAck ( void )
{
 8013708:	b580      	push	{r7, lr}
 801370a:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 801370c:	4b04      	ldr	r3, [pc, #16]	; (8013720 <TL_THREAD_CliSendAck+0x18>)
 801370e:	689b      	ldr	r3, [r3, #8]
 8013710:	681b      	ldr	r3, [r3, #0]
 8013712:	220d      	movs	r2, #13
 8013714:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_CliSendAck();
 8013716:	f001 f97b 	bl	8014a10 <HW_IPCC_THREAD_CliSendAck>

  return;
 801371a:	bf00      	nop
}
 801371c:	bd80      	pop	{r7, pc}
 801371e:	bf00      	nop
 8013720:	20030000 	.word	0x20030000

08013724 <HW_IPCC_OT_CmdEvtNot>:

void HW_IPCC_OT_CmdEvtNot(void)
{
 8013724:	b580      	push	{r7, lr}
 8013726:	af00      	add	r7, sp, #0
  TL_OT_CmdEvtReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->otcmdrsp_buffer) );
 8013728:	4b03      	ldr	r3, [pc, #12]	; (8013738 <HW_IPCC_OT_CmdEvtNot+0x14>)
 801372a:	689b      	ldr	r3, [r3, #8]
 801372c:	689b      	ldr	r3, [r3, #8]
 801372e:	4618      	mov	r0, r3
 8013730:	f000 fe2e 	bl	8014390 <TL_OT_CmdEvtReceived>

  return;
 8013734:	bf00      	nop
}
 8013736:	bd80      	pop	{r7, pc}
 8013738:	20030000 	.word	0x20030000

0801373c <HW_IPCC_THREAD_EvtNot>:

void HW_IPCC_THREAD_EvtNot( void )
{
 801373c:	b580      	push	{r7, lr}
 801373e:	af00      	add	r7, sp, #0
  TL_THREAD_NotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->notack_buffer) );
 8013740:	4b03      	ldr	r3, [pc, #12]	; (8013750 <HW_IPCC_THREAD_EvtNot+0x14>)
 8013742:	689b      	ldr	r3, [r3, #8]
 8013744:	681b      	ldr	r3, [r3, #0]
 8013746:	4618      	mov	r0, r3
 8013748:	f000 fe2c 	bl	80143a4 <TL_THREAD_NotReceived>

  return;
 801374c:	bf00      	nop
}
 801374e:	bd80      	pop	{r7, pc}
 8013750:	20030000 	.word	0x20030000

08013754 <HW_IPCC_THREAD_CliEvtNot>:

void HW_IPCC_THREAD_CliEvtNot( void )
{
 8013754:	b580      	push	{r7, lr}
 8013756:	af00      	add	r7, sp, #0
  TL_THREAD_CliNotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->clicmdrsp_buffer) );
 8013758:	4b03      	ldr	r3, [pc, #12]	; (8013768 <HW_IPCC_THREAD_CliEvtNot+0x14>)
 801375a:	689b      	ldr	r3, [r3, #8]
 801375c:	685b      	ldr	r3, [r3, #4]
 801375e:	4618      	mov	r0, r3
 8013760:	f000 fece 	bl	8014500 <TL_THREAD_CliNotReceived>

  return;
 8013764:	bf00      	nop
}
 8013766:	bd80      	pop	{r7, pc}
 8013768:	20030000 	.word	0x20030000

0801376c <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 801376c:	b580      	push	{r7, lr}
 801376e:	b082      	sub	sp, #8
 8013770:	af00      	add	r7, sp, #0
 8013772:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8013774:	4817      	ldr	r0, [pc, #92]	; (80137d4 <TL_MM_Init+0x68>)
 8013776:	f7ff fcc9 	bl	801310c <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 801377a:	4817      	ldr	r0, [pc, #92]	; (80137d8 <TL_MM_Init+0x6c>)
 801377c:	f7ff fcc6 	bl	801310c <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8013780:	4b16      	ldr	r3, [pc, #88]	; (80137dc <TL_MM_Init+0x70>)
 8013782:	691b      	ldr	r3, [r3, #16]
 8013784:	4a16      	ldr	r2, [pc, #88]	; (80137e0 <TL_MM_Init+0x74>)
 8013786:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8013788:	4b15      	ldr	r3, [pc, #84]	; (80137e0 <TL_MM_Init+0x74>)
 801378a:	681b      	ldr	r3, [r3, #0]
 801378c:	687a      	ldr	r2, [r7, #4]
 801378e:	6892      	ldr	r2, [r2, #8]
 8013790:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8013792:	4b13      	ldr	r3, [pc, #76]	; (80137e0 <TL_MM_Init+0x74>)
 8013794:	681b      	ldr	r3, [r3, #0]
 8013796:	687a      	ldr	r2, [r7, #4]
 8013798:	68d2      	ldr	r2, [r2, #12]
 801379a:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 801379c:	4b10      	ldr	r3, [pc, #64]	; (80137e0 <TL_MM_Init+0x74>)
 801379e:	681b      	ldr	r3, [r3, #0]
 80137a0:	4a0c      	ldr	r2, [pc, #48]	; (80137d4 <TL_MM_Init+0x68>)
 80137a2:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 80137a4:	4b0e      	ldr	r3, [pc, #56]	; (80137e0 <TL_MM_Init+0x74>)
 80137a6:	681b      	ldr	r3, [r3, #0]
 80137a8:	687a      	ldr	r2, [r7, #4]
 80137aa:	6812      	ldr	r2, [r2, #0]
 80137ac:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 80137ae:	4b0c      	ldr	r3, [pc, #48]	; (80137e0 <TL_MM_Init+0x74>)
 80137b0:	681b      	ldr	r3, [r3, #0]
 80137b2:	687a      	ldr	r2, [r7, #4]
 80137b4:	6852      	ldr	r2, [r2, #4]
 80137b6:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 80137b8:	4b09      	ldr	r3, [pc, #36]	; (80137e0 <TL_MM_Init+0x74>)
 80137ba:	681b      	ldr	r3, [r3, #0]
 80137bc:	687a      	ldr	r2, [r7, #4]
 80137be:	6912      	ldr	r2, [r2, #16]
 80137c0:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 80137c2:	4b07      	ldr	r3, [pc, #28]	; (80137e0 <TL_MM_Init+0x74>)
 80137c4:	681b      	ldr	r3, [r3, #0]
 80137c6:	687a      	ldr	r2, [r7, #4]
 80137c8:	6952      	ldr	r2, [r2, #20]
 80137ca:	619a      	str	r2, [r3, #24]

  return;
 80137cc:	bf00      	nop
}
 80137ce:	3708      	adds	r7, #8
 80137d0:	46bd      	mov	sp, r7
 80137d2:	bd80      	pop	{r7, pc}
 80137d4:	200300a8 	.word	0x200300a8
 80137d8:	2002746c 	.word	0x2002746c
 80137dc:	20030000 	.word	0x20030000
 80137e0:	20027484 	.word	0x20027484

080137e4 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 80137e4:	b580      	push	{r7, lr}
 80137e6:	b082      	sub	sp, #8
 80137e8:	af00      	add	r7, sp, #0
 80137ea:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 80137ec:	6879      	ldr	r1, [r7, #4]
 80137ee:	4805      	ldr	r0, [pc, #20]	; (8013804 <TL_MM_EvtDone+0x20>)
 80137f0:	f7ff fce0 	bl	80131b4 <LST_insert_tail>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 80137f4:	4804      	ldr	r0, [pc, #16]	; (8013808 <TL_MM_EvtDone+0x24>)
 80137f6:	f001 f93d 	bl	8014a74 <HW_IPCC_MM_SendFreeBuf>

  return;
 80137fa:	bf00      	nop
}
 80137fc:	3708      	adds	r7, #8
 80137fe:	46bd      	mov	sp, r7
 8013800:	bd80      	pop	{r7, pc}
 8013802:	bf00      	nop
 8013804:	2002746c 	.word	0x2002746c
 8013808:	0801380d 	.word	0x0801380d

0801380c <SendFreeBuf>:

static void SendFreeBuf( void )
{
 801380c:	b580      	push	{r7, lr}
 801380e:	b082      	sub	sp, #8
 8013810:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8013812:	e00c      	b.n	801382e <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8013814:	1d3b      	adds	r3, r7, #4
 8013816:	4619      	mov	r1, r3
 8013818:	480a      	ldr	r0, [pc, #40]	; (8013844 <SendFreeBuf+0x38>)
 801381a:	f7ff fd0e 	bl	801323a <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 801381e:	4b0a      	ldr	r3, [pc, #40]	; (8013848 <SendFreeBuf+0x3c>)
 8013820:	691b      	ldr	r3, [r3, #16]
 8013822:	691b      	ldr	r3, [r3, #16]
 8013824:	687a      	ldr	r2, [r7, #4]
 8013826:	4611      	mov	r1, r2
 8013828:	4618      	mov	r0, r3
 801382a:	f7ff fcc3 	bl	80131b4 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 801382e:	4805      	ldr	r0, [pc, #20]	; (8013844 <SendFreeBuf+0x38>)
 8013830:	f7ff fc7c 	bl	801312c <LST_is_empty>
 8013834:	4603      	mov	r3, r0
 8013836:	2b00      	cmp	r3, #0
 8013838:	d0ec      	beq.n	8013814 <SendFreeBuf+0x8>
  }

  return;
 801383a:	bf00      	nop
}
 801383c:	3708      	adds	r7, #8
 801383e:	46bd      	mov	sp, r7
 8013840:	bd80      	pop	{r7, pc}
 8013842:	bf00      	nop
 8013844:	2002746c 	.word	0x2002746c
 8013848:	20030000 	.word	0x20030000

0801384c <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 801384c:	b580      	push	{r7, lr}
 801384e:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8013850:	4805      	ldr	r0, [pc, #20]	; (8013868 <TL_TRACES_Init+0x1c>)
 8013852:	f7ff fc5b 	bl	801310c <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8013856:	4b05      	ldr	r3, [pc, #20]	; (801386c <TL_TRACES_Init+0x20>)
 8013858:	695b      	ldr	r3, [r3, #20]
 801385a:	4a03      	ldr	r2, [pc, #12]	; (8013868 <TL_TRACES_Init+0x1c>)
 801385c:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 801385e:	f001 f93f 	bl	8014ae0 <HW_IPCC_TRACES_Init>

  return;
 8013862:	bf00      	nop
}
 8013864:	bd80      	pop	{r7, pc}
 8013866:	bf00      	nop
 8013868:	200300b0 	.word	0x200300b0
 801386c:	20030000 	.word	0x20030000

08013870 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8013870:	b580      	push	{r7, lr}
 8013872:	b082      	sub	sp, #8
 8013874:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8013876:	e008      	b.n	801388a <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8013878:	1d3b      	adds	r3, r7, #4
 801387a:	4619      	mov	r1, r3
 801387c:	4808      	ldr	r0, [pc, #32]	; (80138a0 <HW_IPCC_TRACES_EvtNot+0x30>)
 801387e:	f7ff fcdc 	bl	801323a <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	4618      	mov	r0, r3
 8013886:	f7ed fcc7 	bl	8001218 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 801388a:	4805      	ldr	r0, [pc, #20]	; (80138a0 <HW_IPCC_TRACES_EvtNot+0x30>)
 801388c:	f7ff fc4e 	bl	801312c <LST_is_empty>
 8013890:	4603      	mov	r3, r0
 8013892:	2b00      	cmp	r3, #0
 8013894:	d0f0      	beq.n	8013878 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8013896:	bf00      	nop
}
 8013898:	3708      	adds	r7, #8
 801389a:	46bd      	mov	sp, r7
 801389c:	bd80      	pop	{r7, pc}
 801389e:	bf00      	nop
 80138a0:	200300b0 	.word	0x200300b0

080138a4 <APP_THREAD_Init>:
/* USER CODE END PV */

/* Functions Definition ------------------------------------------------------*/

void APP_THREAD_Init( void )
{
 80138a4:	b580      	push	{r7, lr}
 80138a6:	b082      	sub	sp, #8
 80138a8:	af00      	add	r7, sp, #0
  /* USER CODE END APP_THREAD_INIT_1 */

  SHCI_CmdStatus_t ThreadInitStatus;
  
  /* Check the compatibility with the Coprocessor Wireless Firmware loaded */
  APP_THREAD_CheckWirelessFirmwareInfo();
 80138aa:	f000 f9b1 	bl	8013c10 <APP_THREAD_CheckWirelessFirmwareInfo>
#if (CFG_USB_INTERFACE_ENABLE != 0)
  VCP_Init(&VcpTxBuffer[0], &VcpRxBuffer[0]);
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */

  /* Register cmdbuffer */
  APP_THREAD_RegisterCmdBuffer(&ThreadOtCmdBuffer);
 80138ae:	480e      	ldr	r0, [pc, #56]	; (80138e8 <APP_THREAD_Init+0x44>)
 80138b0:	f000 fd16 	bl	80142e0 <APP_THREAD_RegisterCmdBuffer>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_DISABLE);
 80138b4:	2101      	movs	r1, #1
 80138b6:	2002      	movs	r0, #2
 80138b8:	f001 f93a 	bl	8014b30 <UTIL_LPM_SetOffMode>

  /* Init config buffer and call TL_THREAD_Init */
  APP_THREAD_TL_THREAD_INIT();
 80138bc:	f000 fe08 	bl	80144d0 <APP_THREAD_TL_THREAD_INIT>

  /* Configure UART for sending CLI command from M4 */
  APP_THREAD_Init_UART_CLI();
 80138c0:	f000 fdf4 	bl	80144ac <APP_THREAD_Init_UART_CLI>

  /* Send Thread start system cmd to M0 */
  ThreadInitStatus = SHCI_C2_THREAD_Init();
 80138c4:	f7ff fa37 	bl	8012d36 <SHCI_C2_THREAD_Init>
 80138c8:	4603      	mov	r3, r0
 80138ca:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN APP_THREAD_INIT_TIMER */

  /* USER CODE END APP_THREAD_INIT_TIMER */

  /* Create the different FreeRTOS tasks requested to run this Thread application*/
  OsTaskMsgM0ToM4Id = osThreadNew(APP_THREAD_FreeRTOSProcessMsgM0ToM4Task, NULL,&ThreadMsgM0ToM4Process_attr);
 80138cc:	4a07      	ldr	r2, [pc, #28]	; (80138ec <APP_THREAD_Init+0x48>)
 80138ce:	2100      	movs	r1, #0
 80138d0:	4807      	ldr	r0, [pc, #28]	; (80138f0 <APP_THREAD_Init+0x4c>)
 80138d2:	f7f9 fec5 	bl	800d660 <osThreadNew>
 80138d6:	4602      	mov	r2, r0
 80138d8:	4b06      	ldr	r3, [pc, #24]	; (80138f4 <APP_THREAD_Init+0x50>)
 80138da:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN APP_THREAD_INIT_FREERTOS */

  /* USER CODE END APP_THREAD_INIT_FREERTOS */

  /* Configure the Thread device at start */
  APP_THREAD_DeviceConfig();
 80138dc:	f000 f86c 	bl	80139b8 <APP_THREAD_DeviceConfig>

  /* USER CODE BEGIN APP_THREAD_INIT_2 */

  /* USER CODE END APP_THREAD_INIT_2 */
}
 80138e0:	bf00      	nop
 80138e2:	3708      	adds	r7, #8
 80138e4:	46bd      	mov	sp, r7
 80138e6:	bd80      	pop	{r7, pc}
 80138e8:	20030838 	.word	0x20030838
 80138ec:	08016b58 	.word	0x08016b58
 80138f0:	08013ccd 	.word	0x08013ccd
 80138f4:	2002759c 	.word	0x2002759c

080138f8 <APP_THREAD_Error>:
  * @param  ErrId :
  * @param  ErrCode
  * @retval None
  */
void APP_THREAD_Error(uint32_t ErrId, uint32_t ErrCode)
{
 80138f8:	b580      	push	{r7, lr}
 80138fa:	b082      	sub	sp, #8
 80138fc:	af00      	add	r7, sp, #0
 80138fe:	6078      	str	r0, [r7, #4]
 8013900:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN APP_THREAD_Error_1 */

  /* USER CODE END APP_THREAD_Error_1 */
  switch(ErrId)
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	2b07      	cmp	r3, #7
 8013906:	d83b      	bhi.n	8013980 <APP_THREAD_Error+0x88>
 8013908:	a201      	add	r2, pc, #4	; (adr r2, 8013910 <APP_THREAD_Error+0x18>)
 801390a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801390e:	bf00      	nop
 8013910:	08013931 	.word	0x08013931
 8013914:	0801393b 	.word	0x0801393b
 8013918:	08013945 	.word	0x08013945
 801391c:	0801394f 	.word	0x0801394f
 8013920:	08013959 	.word	0x08013959
 8013924:	08013963 	.word	0x08013963
 8013928:	0801396d 	.word	0x0801396d
 801392c:	08013977 	.word	0x08013977
  {
  case ERR_REC_MULTI_MSG_FROM_M0 :
    APP_THREAD_TraceError("ERROR : ERR_REC_MULTI_MSG_FROM_M0 ", ErrCode);
 8013930:	6839      	ldr	r1, [r7, #0]
 8013932:	4818      	ldr	r0, [pc, #96]	; (8013994 <APP_THREAD_Error+0x9c>)
 8013934:	f000 f960 	bl	8013bf8 <APP_THREAD_TraceError>
    break;
 8013938:	e027      	b.n	801398a <APP_THREAD_Error+0x92>
  case ERR_THREAD_SET_STATE_CB :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_STATE_CB ",ErrCode);
 801393a:	6839      	ldr	r1, [r7, #0]
 801393c:	4816      	ldr	r0, [pc, #88]	; (8013998 <APP_THREAD_Error+0xa0>)
 801393e:	f000 f95b 	bl	8013bf8 <APP_THREAD_TraceError>
    break;
 8013942:	e022      	b.n	801398a <APP_THREAD_Error+0x92>
  case ERR_THREAD_SET_CHANNEL :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_CHANNEL ",ErrCode);
 8013944:	6839      	ldr	r1, [r7, #0]
 8013946:	4815      	ldr	r0, [pc, #84]	; (801399c <APP_THREAD_Error+0xa4>)
 8013948:	f000 f956 	bl	8013bf8 <APP_THREAD_TraceError>
    break;
 801394c:	e01d      	b.n	801398a <APP_THREAD_Error+0x92>
  case ERR_THREAD_SET_PANID :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_PANID ",ErrCode);
 801394e:	6839      	ldr	r1, [r7, #0]
 8013950:	4813      	ldr	r0, [pc, #76]	; (80139a0 <APP_THREAD_Error+0xa8>)
 8013952:	f000 f951 	bl	8013bf8 <APP_THREAD_TraceError>
    break;
 8013956:	e018      	b.n	801398a <APP_THREAD_Error+0x92>
  case ERR_THREAD_IPV6_ENABLE :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_IPV6_ENABLE ",ErrCode);
 8013958:	6839      	ldr	r1, [r7, #0]
 801395a:	4812      	ldr	r0, [pc, #72]	; (80139a4 <APP_THREAD_Error+0xac>)
 801395c:	f000 f94c 	bl	8013bf8 <APP_THREAD_TraceError>
    break;
 8013960:	e013      	b.n	801398a <APP_THREAD_Error+0x92>
  case ERR_THREAD_START :
    APP_THREAD_TraceError("ERROR: ERR_THREAD_START ", ErrCode);
 8013962:	6839      	ldr	r1, [r7, #0]
 8013964:	4810      	ldr	r0, [pc, #64]	; (80139a8 <APP_THREAD_Error+0xb0>)
 8013966:	f000 f947 	bl	8013bf8 <APP_THREAD_TraceError>
    break;
 801396a:	e00e      	b.n	801398a <APP_THREAD_Error+0x92>
  case ERR_THREAD_ERASE_PERSISTENT_INFO :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_ERASE_PERSISTENT_INFO ",ErrCode);
 801396c:	6839      	ldr	r1, [r7, #0]
 801396e:	480f      	ldr	r0, [pc, #60]	; (80139ac <APP_THREAD_Error+0xb4>)
 8013970:	f000 f942 	bl	8013bf8 <APP_THREAD_TraceError>
    break;
 8013974:	e009      	b.n	801398a <APP_THREAD_Error+0x92>
  case ERR_THREAD_CHECK_WIRELESS :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_CHECK_WIRELESS ",ErrCode);
 8013976:	6839      	ldr	r1, [r7, #0]
 8013978:	480d      	ldr	r0, [pc, #52]	; (80139b0 <APP_THREAD_Error+0xb8>)
 801397a:	f000 f93d 	bl	8013bf8 <APP_THREAD_TraceError>
    break;
 801397e:	e004      	b.n	801398a <APP_THREAD_Error+0x92>
  /* USER CODE BEGIN APP_THREAD_Error_2 */

  /* USER CODE END APP_THREAD_Error_2 */
  default :
    APP_THREAD_TraceError("ERROR Unknown ", 0);
 8013980:	2100      	movs	r1, #0
 8013982:	480c      	ldr	r0, [pc, #48]	; (80139b4 <APP_THREAD_Error+0xbc>)
 8013984:	f000 f938 	bl	8013bf8 <APP_THREAD_TraceError>
    break;
 8013988:	bf00      	nop
  }
}
 801398a:	bf00      	nop
 801398c:	3708      	adds	r7, #8
 801398e:	46bd      	mov	sp, r7
 8013990:	bd80      	pop	{r7, pc}
 8013992:	bf00      	nop
 8013994:	08016558 	.word	0x08016558
 8013998:	0801657c 	.word	0x0801657c
 801399c:	080165a0 	.word	0x080165a0
 80139a0:	080165c0 	.word	0x080165c0
 80139a4:	080165e0 	.word	0x080165e0
 80139a8:	08016600 	.word	0x08016600
 80139ac:	0801661c 	.word	0x0801661c
 80139b0:	08016648 	.word	0x08016648
 80139b4:	0801666c 	.word	0x0801666c

080139b8 <APP_THREAD_DeviceConfig>:
 * @brief Thread initialization.
 * @param  None
 * @retval None
 */
static void APP_THREAD_DeviceConfig(void)
{
 80139b8:	b580      	push	{r7, lr}
 80139ba:	b082      	sub	sp, #8
 80139bc:	af00      	add	r7, sp, #0
  otError error;
  error = otInstanceErasePersistentInfo(NULL);
 80139be:	2000      	movs	r0, #0
 80139c0:	f7fe fda8 	bl	8012514 <otInstanceErasePersistentInfo>
 80139c4:	4603      	mov	r3, r0
 80139c6:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 80139c8:	79fb      	ldrb	r3, [r7, #7]
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d004      	beq.n	80139d8 <APP_THREAD_DeviceConfig+0x20>
  {
    APP_THREAD_Error(ERR_THREAD_ERASE_PERSISTENT_INFO,error);
 80139ce:	79fb      	ldrb	r3, [r7, #7]
 80139d0:	4619      	mov	r1, r3
 80139d2:	2006      	movs	r0, #6
 80139d4:	f7ff ff90 	bl	80138f8 <APP_THREAD_Error>
  }
  otInstanceFinalize(NULL);
 80139d8:	2000      	movs	r0, #0
 80139da:	f7fe fd3e 	bl	801245a <otInstanceFinalize>
  otInstanceInitSingle();
 80139de:	f7fe fd15 	bl	801240c <otInstanceInitSingle>
  error = otSetStateChangedCallback(NULL, APP_THREAD_StateNotif, NULL);
 80139e2:	2200      	movs	r2, #0
 80139e4:	495e      	ldr	r1, [pc, #376]	; (8013b60 <APP_THREAD_DeviceConfig+0x1a8>)
 80139e6:	2000      	movs	r0, #0
 80139e8:	f7fe fd5e 	bl	80124a8 <otSetStateChangedCallback>
 80139ec:	4603      	mov	r3, r0
 80139ee:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 80139f0:	79fb      	ldrb	r3, [r7, #7]
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	d004      	beq.n	8013a00 <APP_THREAD_DeviceConfig+0x48>
  {
    APP_THREAD_Error(ERR_THREAD_SET_STATE_CB,error);
 80139f6:	79fb      	ldrb	r3, [r7, #7]
 80139f8:	4619      	mov	r1, r3
 80139fa:	2001      	movs	r0, #1
 80139fc:	f7ff ff7c 	bl	80138f8 <APP_THREAD_Error>
  }
  error = otLinkSetChannel(NULL, C_CHANNEL_NB);
 8013a00:	2117      	movs	r1, #23
 8013a02:	2000      	movs	r0, #0
 8013a04:	f7fe fe66 	bl	80126d4 <otLinkSetChannel>
 8013a08:	4603      	mov	r3, r0
 8013a0a:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8013a0c:	79fb      	ldrb	r3, [r7, #7]
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	d004      	beq.n	8013a1c <APP_THREAD_DeviceConfig+0x64>
  {
    APP_THREAD_Error(ERR_THREAD_SET_CHANNEL,error);
 8013a12:	79fb      	ldrb	r3, [r7, #7]
 8013a14:	4619      	mov	r1, r3
 8013a16:	2002      	movs	r0, #2
 8013a18:	f7ff ff6e 	bl	80138f8 <APP_THREAD_Error>
  }
  error = otLinkSetPanId(NULL, C_PANID);
 8013a1c:	f241 2134 	movw	r1, #4660	; 0x1234
 8013a20:	2000      	movs	r0, #0
 8013a22:	f7fe fe87 	bl	8012734 <otLinkSetPanId>
 8013a26:	4603      	mov	r3, r0
 8013a28:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8013a2a:	79fb      	ldrb	r3, [r7, #7]
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	d004      	beq.n	8013a3a <APP_THREAD_DeviceConfig+0x82>
  {
    APP_THREAD_Error(ERR_THREAD_SET_PANID,error);
 8013a30:	79fb      	ldrb	r3, [r7, #7]
 8013a32:	4619      	mov	r1, r3
 8013a34:	2003      	movs	r0, #3
 8013a36:	f7ff ff5f 	bl	80138f8 <APP_THREAD_Error>
  }
  error = otIp6SetEnabled(NULL, true);
 8013a3a:	2101      	movs	r1, #1
 8013a3c:	2000      	movs	r0, #0
 8013a3e:	f7fe fd92 	bl	8012566 <otIp6SetEnabled>
 8013a42:	4603      	mov	r3, r0
 8013a44:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8013a46:	79fb      	ldrb	r3, [r7, #7]
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d004      	beq.n	8013a56 <APP_THREAD_DeviceConfig+0x9e>
  {
    APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE,error);
 8013a4c:	79fb      	ldrb	r3, [r7, #7]
 8013a4e:	4619      	mov	r1, r3
 8013a50:	2004      	movs	r0, #4
 8013a52:	f7ff ff51 	bl	80138f8 <APP_THREAD_Error>
  }
  error = otThreadSetEnabled(NULL, true);
 8013a56:	2101      	movs	r1, #1
 8013a58:	2000      	movs	r0, #0
 8013a5a:	f7ff fc0b 	bl	8013274 <otThreadSetEnabled>
 8013a5e:	4603      	mov	r3, r0
 8013a60:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8013a62:	79fb      	ldrb	r3, [r7, #7]
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	d004      	beq.n	8013a72 <APP_THREAD_DeviceConfig+0xba>
  {
    APP_THREAD_Error(ERR_THREAD_START,error);
 8013a68:	79fb      	ldrb	r3, [r7, #7]
 8013a6a:	4619      	mov	r1, r3
 8013a6c:	2005      	movs	r0, #5
 8013a6e:	f7ff ff43 	bl	80138f8 <APP_THREAD_Error>
  }

  /* USER CODE BEGIN DEVICECONFIG */
  error = otThreadSetEnabled(NULL, false);
 8013a72:	2100      	movs	r1, #0
 8013a74:	2000      	movs	r0, #0
 8013a76:	f7ff fbfd 	bl	8013274 <otThreadSetEnabled>
 8013a7a:	4603      	mov	r3, r0
 8013a7c:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8013a7e:	79fb      	ldrb	r3, [r7, #7]
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d004      	beq.n	8013a8e <APP_THREAD_DeviceConfig+0xd6>
  {
    APP_THREAD_Error(ERR_THREAD_START,error);
 8013a84:	79fb      	ldrb	r3, [r7, #7]
 8013a86:	4619      	mov	r1, r3
 8013a88:	2005      	movs	r0, #5
 8013a8a:	f7ff ff35 	bl	80138f8 <APP_THREAD_Error>
  }

  error = otPlatRadioSetTransmitPower(NULL, TRANSMIT_POWER);
 8013a8e:	2106      	movs	r1, #6
 8013a90:	2000      	movs	r0, #0
 8013a92:	f7ff f91d 	bl	8012cd0 <otPlatRadioSetTransmitPower>
 8013a96:	4603      	mov	r3, r0
 8013a98:	71fb      	strb	r3, [r7, #7]
      if (error != OT_ERROR_NONE)
 8013a9a:	79fb      	ldrb	r3, [r7, #7]
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	d004      	beq.n	8013aaa <APP_THREAD_DeviceConfig+0xf2>
      {
        APP_THREAD_Error(ERR_THREAD_SET_CHANNEL,error);
 8013aa0:	79fb      	ldrb	r3, [r7, #7]
 8013aa2:	4619      	mov	r1, r3
 8013aa4:	2002      	movs	r0, #2
 8013aa6:	f7ff ff27 	bl	80138f8 <APP_THREAD_Error>

//   otChildSupervisionSetCheckTimeout(NULL, CHILD_SUPERVISION_TIMEOUT);
//   otChildSupervisionSetInterval(NULL, CHILD_SUPERVISION_INTERVAL);


    error = otThreadSetMasterKey(NULL, &masterKey);
 8013aaa:	492e      	ldr	r1, [pc, #184]	; (8013b64 <APP_THREAD_DeviceConfig+0x1ac>)
 8013aac:	2000      	movs	r0, #0
 8013aae:	f7ff fc40 	bl	8013332 <otThreadSetMasterKey>
 8013ab2:	4603      	mov	r3, r0
 8013ab4:	71fb      	strb	r3, [r7, #7]
    if (error != OT_ERROR_NONE)
 8013ab6:	79fb      	ldrb	r3, [r7, #7]
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	d004      	beq.n	8013ac6 <APP_THREAD_DeviceConfig+0x10e>
    {
      APP_THREAD_Error(ERR_THREAD_SET_CHANNEL,error);
 8013abc:	79fb      	ldrb	r3, [r7, #7]
 8013abe:	4619      	mov	r1, r3
 8013ac0:	2002      	movs	r0, #2
 8013ac2:	f7ff ff19 	bl	80138f8 <APP_THREAD_Error>
    }

    error = otThreadSetNetworkName(NULL, networkName);
 8013ac6:	4928      	ldr	r1, [pc, #160]	; (8013b68 <APP_THREAD_DeviceConfig+0x1b0>)
 8013ac8:	2000      	movs	r0, #0
 8013aca:	f7ff fc89 	bl	80133e0 <otThreadSetNetworkName>
 8013ace:	4603      	mov	r3, r0
 8013ad0:	71fb      	strb	r3, [r7, #7]
    if (error != OT_ERROR_NONE)
 8013ad2:	79fb      	ldrb	r3, [r7, #7]
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	d004      	beq.n	8013ae2 <APP_THREAD_DeviceConfig+0x12a>
    {
      APP_THREAD_Error(ERR_THREAD_SET_CHANNEL,error);
 8013ad8:	79fb      	ldrb	r3, [r7, #7]
 8013ada:	4619      	mov	r1, r3
 8013adc:	2002      	movs	r0, #2
 8013ade:	f7ff ff0b 	bl	80138f8 <APP_THREAD_Error>
    }
    error = otThreadSetExtendedPanId(NULL , &extendedPanId);
 8013ae2:	4922      	ldr	r1, [pc, #136]	; (8013b6c <APP_THREAD_DeviceConfig+0x1b4>)
 8013ae4:	2000      	movs	r0, #0
 8013ae6:	f7ff fbf5 	bl	80132d4 <otThreadSetExtendedPanId>
 8013aea:	4603      	mov	r3, r0
 8013aec:	71fb      	strb	r3, [r7, #7]
    if (error != OT_ERROR_NONE)
 8013aee:	79fb      	ldrb	r3, [r7, #7]
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d004      	beq.n	8013afe <APP_THREAD_DeviceConfig+0x146>
    {
      APP_THREAD_Error(ERR_THREAD_SET_CHANNEL,error);
 8013af4:	79fb      	ldrb	r3, [r7, #7]
 8013af6:	4619      	mov	r1, r3
 8013af8:	2002      	movs	r0, #2
 8013afa:	f7ff fefd 	bl	80138f8 <APP_THREAD_Error>
    }

    error = otThreadSetEnabled(NULL, true);
 8013afe:	2101      	movs	r1, #1
 8013b00:	2000      	movs	r0, #0
 8013b02:	f7ff fbb7 	bl	8013274 <otThreadSetEnabled>
 8013b06:	4603      	mov	r3, r0
 8013b08:	71fb      	strb	r3, [r7, #7]
    if (error != OT_ERROR_NONE)
 8013b0a:	79fb      	ldrb	r3, [r7, #7]
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	d004      	beq.n	8013b1a <APP_THREAD_DeviceConfig+0x162>
    {
      APP_THREAD_Error(ERR_THREAD_START,error);
 8013b10:	79fb      	ldrb	r3, [r7, #7]
 8013b12:	4619      	mov	r1, r3
 8013b14:	2005      	movs	r0, #5
 8013b16:	f7ff feef 	bl	80138f8 <APP_THREAD_Error>
    }

    error = otCoapStart(NULL, OT_DEFAULT_COAP_PORT);
 8013b1a:	f241 6133 	movw	r1, #5683	; 0x1633
 8013b1e:	2000      	movs	r0, #0
 8013b20:	f7fe fbe2 	bl	80122e8 <otCoapStart>
 8013b24:	4603      	mov	r3, r0
 8013b26:	71fb      	strb	r3, [r7, #7]
  //  error = otCoapAddResource(NULL, &OT_Light_Ressource);
    error = otCoapAddResource(NULL, &OT_Lights_Complex_Ressource);
 8013b28:	4911      	ldr	r1, [pc, #68]	; (8013b70 <APP_THREAD_DeviceConfig+0x1b8>)
 8013b2a:	2000      	movs	r0, #0
 8013b2c:	f7fe fc0c 	bl	8012348 <otCoapAddResource>
 8013b30:	4603      	mov	r3, r0
 8013b32:	71fb      	strb	r3, [r7, #7]
    error = otCoapAddResource(NULL, &OT_Lights_Simple_Ressource);
 8013b34:	490f      	ldr	r1, [pc, #60]	; (8013b74 <APP_THREAD_DeviceConfig+0x1bc>)
 8013b36:	2000      	movs	r0, #0
 8013b38:	f7fe fc06 	bl	8012348 <otCoapAddResource>
 8013b3c:	4603      	mov	r3, r0
 8013b3e:	71fb      	strb	r3, [r7, #7]
    error = otCoapAddResource(NULL, &OT_Border_Time_Ressource);
 8013b40:	490d      	ldr	r1, [pc, #52]	; (8013b78 <APP_THREAD_DeviceConfig+0x1c0>)
 8013b42:	2000      	movs	r0, #0
 8013b44:	f7fe fc00 	bl	8012348 <otCoapAddResource>
 8013b48:	4603      	mov	r3, r0
 8013b4a:	71fb      	strb	r3, [r7, #7]
    error = otCoapAddResource(NULL, &OT_Toggle_Logging_Ressource);
 8013b4c:	490b      	ldr	r1, [pc, #44]	; (8013b7c <APP_THREAD_DeviceConfig+0x1c4>)
 8013b4e:	2000      	movs	r0, #0
 8013b50:	f7fe fbfa 	bl	8012348 <otCoapAddResource>
 8013b54:	4603      	mov	r3, r0
 8013b56:	71fb      	strb	r3, [r7, #7]

    // start master thread
//    osThreadFlagsSet(masterTaskHandle, 0x00000008U);
//    startSensorThreads();
  /* USER CODE END DEVICECONFIG */
}
 8013b58:	bf00      	nop
 8013b5a:	3708      	adds	r7, #8
 8013b5c:	46bd      	mov	sp, r7
 8013b5e:	bd80      	pop	{r7, pc}
 8013b60:	08013b81 	.word	0x08013b81
 8013b64:	08016bc0 	.word	0x08016bc0
 8013b68:	08016bd8 	.word	0x08016bd8
 8013b6c:	08016bd0 	.word	0x08016bd0
 8013b70:	20000088 	.word	0x20000088
 8013b74:	20000098 	.word	0x20000098
 8013b78:	200000a8 	.word	0x200000a8
 8013b7c:	200000b8 	.word	0x200000b8

08013b80 <APP_THREAD_StateNotif>:
 *         aContext: Context
 *
 * @retval None
 */
static void APP_THREAD_StateNotif(uint32_t NotifFlags, void *pContext)
{
 8013b80:	b590      	push	{r4, r7, lr}
 8013b82:	b083      	sub	sp, #12
 8013b84:	af00      	add	r7, sp, #0
 8013b86:	6078      	str	r0, [r7, #4]
 8013b88:	6039      	str	r1, [r7, #0]

  /* USER CODE BEGIN APP_THREAD_STATENOTIF */

  /* USER CODE END APP_THREAD_STATENOTIF */

  if ((NotifFlags & (uint32_t)OT_CHANGED_THREAD_ROLE) == (uint32_t)OT_CHANGED_THREAD_ROLE)
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	f003 0304 	and.w	r3, r3, #4
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	d027      	beq.n	8013be4 <APP_THREAD_StateNotif+0x64>
  {
    switch (otThreadGetDeviceRole(NULL))
 8013b94:	2000      	movs	r0, #0
 8013b96:	f7ff fc52 	bl	801343e <otThreadGetDeviceRole>
 8013b9a:	4603      	mov	r3, r0
 8013b9c:	2b04      	cmp	r3, #4
 8013b9e:	d81e      	bhi.n	8013bde <APP_THREAD_StateNotif+0x5e>
 8013ba0:	a201      	add	r2, pc, #4	; (adr r2, 8013ba8 <APP_THREAD_StateNotif+0x28>)
 8013ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013ba6:	bf00      	nop
 8013ba8:	08013be9 	.word	0x08013be9
 8013bac:	08013bbd 	.word	0x08013bbd
 8013bb0:	08013bcd 	.word	0x08013bcd
 8013bb4:	08013bd3 	.word	0x08013bd3
 8013bb8:	08013bd9 	.word	0x08013bd9

      /* USER CODE END OT_DEVICE_ROLE_DISABLED */
      break;
    case OT_DEVICE_ROLE_DETACHED:
      /* USER CODE BEGIN OT_DEVICE_ROLE_DETACHED */
    	borderRouter.epoch = 0;
 8013bbc:	4a0d      	ldr	r2, [pc, #52]	; (8013bf4 <APP_THREAD_StateNotif+0x74>)
 8013bbe:	f04f 0300 	mov.w	r3, #0
 8013bc2:	f04f 0400 	mov.w	r4, #0
 8013bc6:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
      /* USER CODE END OT_DEVICE_ROLE_DETACHED */
      break;
 8013bca:	e00e      	b.n	8013bea <APP_THREAD_StateNotif+0x6a>
    case OT_DEVICE_ROLE_CHILD:
      /* USER CODE BEGIN OT_DEVICE_ROLE_CHILD */
    	APP_THREAD_SendMyIP();
 8013bcc:	f000 f8b0 	bl	8013d30 <APP_THREAD_SendMyIP>
      /* USER CODE END OT_DEVICE_ROLE_CHILD */
      break;
 8013bd0:	e00b      	b.n	8013bea <APP_THREAD_StateNotif+0x6a>
    case OT_DEVICE_ROLE_ROUTER :
      /* USER CODE BEGIN OT_DEVICE_ROLE_ROUTER */
    	APP_THREAD_SendMyIP();
 8013bd2:	f000 f8ad 	bl	8013d30 <APP_THREAD_SendMyIP>
      /* USER CODE END OT_DEVICE_ROLE_ROUTER */
      break;
 8013bd6:	e008      	b.n	8013bea <APP_THREAD_StateNotif+0x6a>
    case OT_DEVICE_ROLE_LEADER :
      /* USER CODE BEGIN OT_DEVICE_ROLE_LEADER */
    	APP_THREAD_SendMyIP();
 8013bd8:	f000 f8aa 	bl	8013d30 <APP_THREAD_SendMyIP>
      /* USER CODE END OT_DEVICE_ROLE_LEADER */
      break;
 8013bdc:	e005      	b.n	8013bea <APP_THREAD_StateNotif+0x6a>
    default:
      /* USER CODE BEGIN DEFAULT */
    	APP_THREAD_SendMyIP();
 8013bde:	f000 f8a7 	bl	8013d30 <APP_THREAD_SendMyIP>
      /* USER CODE END DEFAULT */
      break;
 8013be2:	e002      	b.n	8013bea <APP_THREAD_StateNotif+0x6a>
    }
  }
 8013be4:	bf00      	nop
 8013be6:	e000      	b.n	8013bea <APP_THREAD_StateNotif+0x6a>
      break;
 8013be8:	bf00      	nop
}
 8013bea:	bf00      	nop
 8013bec:	370c      	adds	r7, #12
 8013bee:	46bd      	mov	sp, r7
 8013bf0:	bd90      	pop	{r4, r7, pc}
 8013bf2:	bf00      	nop
 8013bf4:	20027668 	.word	0x20027668

08013bf8 <APP_THREAD_TraceError>:
  * @param  pMess  : Message associated to the error.
  * @param  ErrCode: Error code associated to the module (OpenThread or other module if any)
  * @retval None
  */
static void APP_THREAD_TraceError(const char * pMess, uint32_t ErrCode)
{
 8013bf8:	b480      	push	{r7}
 8013bfa:	b083      	sub	sp, #12
 8013bfc:	af00      	add	r7, sp, #0
 8013bfe:	6078      	str	r0, [r7, #4]
 8013c00:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TRACE_ERROR */

  /* USER CODE END TRACE_ERROR */
}
 8013c02:	bf00      	nop
 8013c04:	370c      	adds	r7, #12
 8013c06:	46bd      	mov	sp, r7
 8013c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c0c:	4770      	bx	lr
	...

08013c10 <APP_THREAD_CheckWirelessFirmwareInfo>:
 *        and display associated informations
 * @param  None
 * @retval None
 */
static void APP_THREAD_CheckWirelessFirmwareInfo(void)
{
 8013c10:	b580      	push	{r7, lr}
 8013c12:	b088      	sub	sp, #32
 8013c14:	af02      	add	r7, sp, #8
  WirelessFwInfo_t wireless_info_instance;
  WirelessFwInfo_t* p_wireless_info = &wireless_info_instance;
 8013c16:	1d3b      	adds	r3, r7, #4
 8013c18:	617b      	str	r3, [r7, #20]

  if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success)
 8013c1a:	6978      	ldr	r0, [r7, #20]
 8013c1c:	f7ff f8b8 	bl	8012d90 <SHCI_GetWirelessFwInfo>
 8013c20:	4603      	mov	r3, r0
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d004      	beq.n	8013c30 <APP_THREAD_CheckWirelessFirmwareInfo+0x20>
  {
    APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 8013c26:	2101      	movs	r1, #1
 8013c28:	2007      	movs	r0, #7
 8013c2a:	f7ff fe65 	bl	80138f8 <APP_THREAD_Error>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
      break;
    }
    APP_DBG("**********************************************************");
  }
}
 8013c2e:	e03d      	b.n	8013cac <APP_THREAD_CheckWirelessFirmwareInfo+0x9c>
    APP_DBG("**********************************************************");
 8013c30:	4a20      	ldr	r2, [pc, #128]	; (8013cb4 <APP_THREAD_CheckWirelessFirmwareInfo+0xa4>)
 8013c32:	2101      	movs	r1, #1
 8013c34:	2000      	movs	r0, #0
 8013c36:	f7f1 fa17 	bl	8005068 <logApplication>
    APP_DBG("WIRELESS COPROCESSOR FW:");
 8013c3a:	4a1f      	ldr	r2, [pc, #124]	; (8013cb8 <APP_THREAD_CheckWirelessFirmwareInfo+0xa8>)
 8013c3c:	2101      	movs	r1, #1
 8013c3e:	2000      	movs	r0, #0
 8013c40:	f7f1 fa12 	bl	8005068 <logApplication>
    APP_DBG("VERSION ID = %d.%d.%d", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor, p_wireless_info->VersionSub);
 8013c44:	697b      	ldr	r3, [r7, #20]
 8013c46:	781b      	ldrb	r3, [r3, #0]
 8013c48:	4619      	mov	r1, r3
 8013c4a:	697b      	ldr	r3, [r7, #20]
 8013c4c:	785b      	ldrb	r3, [r3, #1]
 8013c4e:	461a      	mov	r2, r3
 8013c50:	697b      	ldr	r3, [r7, #20]
 8013c52:	789b      	ldrb	r3, [r3, #2]
 8013c54:	9301      	str	r3, [sp, #4]
 8013c56:	9200      	str	r2, [sp, #0]
 8013c58:	460b      	mov	r3, r1
 8013c5a:	4a18      	ldr	r2, [pc, #96]	; (8013cbc <APP_THREAD_CheckWirelessFirmwareInfo+0xac>)
 8013c5c:	2101      	movs	r1, #1
 8013c5e:	2000      	movs	r0, #0
 8013c60:	f7f1 fa02 	bl	8005068 <logApplication>
    switch(p_wireless_info->StackType)
 8013c64:	697b      	ldr	r3, [r7, #20]
 8013c66:	7a5b      	ldrb	r3, [r3, #9]
 8013c68:	2b11      	cmp	r3, #17
 8013c6a:	d009      	beq.n	8013c80 <APP_THREAD_CheckWirelessFirmwareInfo+0x70>
 8013c6c:	2b50      	cmp	r3, #80	; 0x50
 8013c6e:	d00d      	beq.n	8013c8c <APP_THREAD_CheckWirelessFirmwareInfo+0x7c>
 8013c70:	2b10      	cmp	r3, #16
 8013c72:	d111      	bne.n	8013c98 <APP_THREAD_CheckWirelessFirmwareInfo+0x88>
      APP_DBG("FW Type : Thread FTD");
 8013c74:	4a12      	ldr	r2, [pc, #72]	; (8013cc0 <APP_THREAD_CheckWirelessFirmwareInfo+0xb0>)
 8013c76:	2101      	movs	r1, #1
 8013c78:	2000      	movs	r0, #0
 8013c7a:	f7f1 f9f5 	bl	8005068 <logApplication>
      break;
 8013c7e:	e010      	b.n	8013ca2 <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_DBG("FW Type : Thread MTD");
 8013c80:	4a10      	ldr	r2, [pc, #64]	; (8013cc4 <APP_THREAD_CheckWirelessFirmwareInfo+0xb4>)
 8013c82:	2101      	movs	r1, #1
 8013c84:	2000      	movs	r0, #0
 8013c86:	f7f1 f9ef 	bl	8005068 <logApplication>
      break;
 8013c8a:	e00a      	b.n	8013ca2 <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_DBG("FW Type : Static Concurrent Mode BLE/Thread");
 8013c8c:	4a0e      	ldr	r2, [pc, #56]	; (8013cc8 <APP_THREAD_CheckWirelessFirmwareInfo+0xb8>)
 8013c8e:	2101      	movs	r1, #1
 8013c90:	2000      	movs	r0, #0
 8013c92:	f7f1 f9e9 	bl	8005068 <logApplication>
      break;
 8013c96:	e004      	b.n	8013ca2 <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 8013c98:	2101      	movs	r1, #1
 8013c9a:	2007      	movs	r0, #7
 8013c9c:	f7ff fe2c 	bl	80138f8 <APP_THREAD_Error>
      break;
 8013ca0:	bf00      	nop
    APP_DBG("**********************************************************");
 8013ca2:	4a04      	ldr	r2, [pc, #16]	; (8013cb4 <APP_THREAD_CheckWirelessFirmwareInfo+0xa4>)
 8013ca4:	2101      	movs	r1, #1
 8013ca6:	2000      	movs	r0, #0
 8013ca8:	f7f1 f9de 	bl	8005068 <logApplication>
}
 8013cac:	bf00      	nop
 8013cae:	3718      	adds	r7, #24
 8013cb0:	46bd      	mov	sp, r7
 8013cb2:	bd80      	pop	{r7, pc}
 8013cb4:	0801667c 	.word	0x0801667c
 8013cb8:	080166b8 	.word	0x080166b8
 8013cbc:	080166d4 	.word	0x080166d4
 8013cc0:	080166ec 	.word	0x080166ec
 8013cc4:	08016704 	.word	0x08016704
 8013cc8:	0801671c 	.word	0x0801671c

08013ccc <APP_THREAD_FreeRTOSProcessMsgM0ToM4Task>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void APP_THREAD_FreeRTOSProcessMsgM0ToM4Task(void *argument)
{
 8013ccc:	b580      	push	{r7, lr}
 8013cce:	b082      	sub	sp, #8
 8013cd0:	af00      	add	r7, sp, #0
 8013cd2:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN APP_THREAD_FREERTOS_PROCESS_MSG_M0_TO_M4_1 */

    /* USER END END APP_THREAD_FREERTOS_PROCESS_MSG_M0_TO_M4_1 */
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 8013cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8013cd8:	2101      	movs	r1, #1
 8013cda:	2001      	movs	r0, #1
 8013cdc:	f7f9 fe1e 	bl	800d91c <osThreadFlagsWait>
    APP_THREAD_ProcessMsgM0ToM4();
 8013ce0:	f000 fc28 	bl	8014534 <APP_THREAD_ProcessMsgM0ToM4>
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 8013ce4:	e7f6      	b.n	8013cd4 <APP_THREAD_FreeRTOSProcessMsgM0ToM4Task+0x8>

08013ce6 <APP_THREAD_FreeRTOSSendCLIToM0Task>:
  }
}

#if (CFG_FULL_LOW_POWER == 0)
static void APP_THREAD_FreeRTOSSendCLIToM0Task(void *argument)
{
 8013ce6:	b580      	push	{r7, lr}
 8013ce8:	b082      	sub	sp, #8
 8013cea:	af00      	add	r7, sp, #0
 8013cec:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN APP_THREAD_FREERTOS_SEND_CLI_TO_M0_1 */

    /* USER END END APP_THREAD_FREERTOS_SEND_CLI_TO_M0_1 */
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 8013cee:	f04f 32ff 	mov.w	r2, #4294967295
 8013cf2:	2101      	movs	r1, #1
 8013cf4:	2001      	movs	r0, #1
 8013cf6:	f7f9 fe11 	bl	800d91c <osThreadFlagsWait>
    Send_CLI_To_M0();
 8013cfa:	f000 fb9d 	bl	8014438 <Send_CLI_To_M0>
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 8013cfe:	e7f6      	b.n	8013cee <APP_THREAD_FreeRTOSSendCLIToM0Task+0x8>

08013d00 <APP_THREAD_DummyReqHandler>:
  */
static void APP_THREAD_DummyReqHandler(void            * p_context,
                                   otCoapHeader        * pHeader,
                                   otMessage           * pMessage,
                                   const otMessageInfo * pMessageInfo)
{
 8013d00:	b480      	push	{r7}
 8013d02:	b085      	sub	sp, #20
 8013d04:	af00      	add	r7, sp, #0
 8013d06:	60f8      	str	r0, [r7, #12]
 8013d08:	60b9      	str	r1, [r7, #8]
 8013d0a:	607a      	str	r2, [r7, #4]
 8013d0c:	603b      	str	r3, [r7, #0]
    tempMessageInfo = pMessageInfo;
 8013d0e:	4a06      	ldr	r2, [pc, #24]	; (8013d28 <APP_THREAD_DummyReqHandler+0x28>)
 8013d10:	683b      	ldr	r3, [r7, #0]
 8013d12:	6013      	str	r3, [r2, #0]
    receivedMessage = (otMessageInfo *) pMessage;
 8013d14:	4a05      	ldr	r2, [pc, #20]	; (8013d2c <APP_THREAD_DummyReqHandler+0x2c>)
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	6013      	str	r3, [r2, #0]
}
 8013d1a:	bf00      	nop
 8013d1c:	3714      	adds	r7, #20
 8013d1e:	46bd      	mov	sp, r7
 8013d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d24:	4770      	bx	lr
 8013d26:	bf00      	nop
 8013d28:	200285b4 	.word	0x200285b4
 8013d2c:	200285f8 	.word	0x200285f8

08013d30 <APP_THREAD_SendMyIP>:
//	uint32_t uid;
//} msgSendMyIP = {.msgSendMyIP = "cal"};

char msgSendMyIP[5] = "cal";

void APP_THREAD_SendMyIP(){
 8013d30:	b580      	push	{r7, lr}
 8013d32:	af00      	add	r7, sp, #0
//	msgSendMyIP.uid = DBGMCU->IDCODE;
	APP_THREAD_SendCoapUnicastRequest(msgSendMyIP, sizeof(msgSendMyIP), borderRouter.ipv6, borderSyncResource);
 8013d34:	4b03      	ldr	r3, [pc, #12]	; (8013d44 <APP_THREAD_SendMyIP+0x14>)
 8013d36:	4a04      	ldr	r2, [pc, #16]	; (8013d48 <APP_THREAD_SendMyIP+0x18>)
 8013d38:	2105      	movs	r1, #5
 8013d3a:	4804      	ldr	r0, [pc, #16]	; (8013d4c <APP_THREAD_SendMyIP+0x1c>)
 8013d3c:	f000 f94c 	bl	8013fd8 <APP_THREAD_SendCoapUnicastRequest>
//	APP_THREAD_SendCoapUnicastMsg(NULL, NULL, borderRouter.ipv6  , borderSyncResource, 1U);
}
 8013d40:	bf00      	nop
 8013d42:	bd80      	pop	{r7, pc}
 8013d44:	08016ba0 	.word	0x08016ba0
 8013d48:	20027668 	.word	0x20027668
 8013d4c:	200000c8 	.word	0x200000c8

08013d50 <APP_THREAD_SendBorderPacket>:
void APP_THREAD_SendBorderMessage(void *packet, uint8_t len){
//	APP_THREAD_SendCoapMsg(sensorPacket, borderRouter.ipv6, borderPacket, otCoapType type);
	APP_THREAD_SendCoapUnicastMsg(packet, len, borderRouter.ipv6  , borderPacket, 1U);
}

void APP_THREAD_SendBorderPacket(struct LogPacket *sensorPacket){
 8013d50:	b580      	push	{r7, lr}
 8013d52:	b084      	sub	sp, #16
 8013d54:	af02      	add	r7, sp, #8
 8013d56:	6078      	str	r0, [r7, #4]
//	APP_THREAD_SendCoapMsg(sensorPacket, borderRouter.ipv6, borderPacket, otCoapType type);
	APP_THREAD_SendCoapUnicastMsg(sensorPacket, sizeof(struct LogPacket), borderRouter.ipv6  , borderPacket, 1U);
 8013d58:	2301      	movs	r3, #1
 8013d5a:	9300      	str	r3, [sp, #0]
 8013d5c:	4b04      	ldr	r3, [pc, #16]	; (8013d70 <APP_THREAD_SendBorderPacket+0x20>)
 8013d5e:	4a05      	ldr	r2, [pc, #20]	; (8013d74 <APP_THREAD_SendBorderPacket+0x24>)
 8013d60:	21cc      	movs	r1, #204	; 0xcc
 8013d62:	6878      	ldr	r0, [r7, #4]
 8013d64:	f000 f9ea 	bl	801413c <APP_THREAD_SendCoapUnicastMsg>

}
 8013d68:	bf00      	nop
 8013d6a:	3708      	adds	r7, #8
 8013d6c:	46bd      	mov	sp, r7
 8013d6e:	bd80      	pop	{r7, pc}
 8013d70:	08016bb0 	.word	0x08016bb0
 8013d74:	20027668 	.word	0x20027668

08013d78 <APP_THREAD_CoapLightsSimpleRequestHandler>:
//}

static void APP_THREAD_CoapLightsSimpleRequestHandler(otCoapHeader * pHeader,
                                  otMessage            * pMessage,
                                  const otMessageInfo  * pMessageInfo)
{
 8013d78:	b580      	push	{r7, lr}
 8013d7a:	b084      	sub	sp, #16
 8013d7c:	af00      	add	r7, sp, #0
 8013d7e:	60f8      	str	r0, [r7, #12]
 8013d80:	60b9      	str	r1, [r7, #8]
 8013d82:	607a      	str	r2, [r7, #4]
  do
  {
	lightsSimpleMessage = 0;
 8013d84:	4b21      	ldr	r3, [pc, #132]	; (8013e0c <APP_THREAD_CoapLightsSimpleRequestHandler+0x94>)
 8013d86:	2200      	movs	r2, #0
 8013d88:	601a      	str	r2, [r3, #0]

	//REMOVE THIS!!!!!!!!!
//	APP_THREAD_GetBorderRouterIP(); //REMOVE THIS!!!!!!!!!
	//REMOVE THIS!!!!!!!!!

    if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &lightsSimpleMessage, sizeof(lightsSimpleMessage)) == 4U)
 8013d8a:	68b8      	ldr	r0, [r7, #8]
 8013d8c:	f7fe fd2d 	bl	80127ea <otMessageGetOffset>
 8013d90:	4603      	mov	r3, r0
 8013d92:	4619      	mov	r1, r3
 8013d94:	2304      	movs	r3, #4
 8013d96:	4a1d      	ldr	r2, [pc, #116]	; (8013e0c <APP_THREAD_CoapLightsSimpleRequestHandler+0x94>)
 8013d98:	68b8      	ldr	r0, [r7, #8]
 8013d9a:	f7fe fd8b 	bl	80128b4 <otMessageRead>
 8013d9e:	4603      	mov	r3, r0
 8013da0:	2b04      	cmp	r3, #4
 8013da2:	d106      	bne.n	8013db2 <APP_THREAD_CoapLightsSimpleRequestHandler+0x3a>
	{
//    	lightMessage = lightMessage & 0x0F; //remove first 4 bits since they are part of the message overhead (?)

    	osMessageQueuePut(lightsSimpleQueueHandle, &lightsSimpleMessage, 0U, 0U);
 8013da4:	4b1a      	ldr	r3, [pc, #104]	; (8013e10 <APP_THREAD_CoapLightsSimpleRequestHandler+0x98>)
 8013da6:	6818      	ldr	r0, [r3, #0]
 8013da8:	2300      	movs	r3, #0
 8013daa:	2200      	movs	r2, #0
 8013dac:	4917      	ldr	r1, [pc, #92]	; (8013e0c <APP_THREAD_CoapLightsSimpleRequestHandler+0x94>)
 8013dae:	f7fa fac5 	bl	800e33c <osMessageQueuePut>
    	//char ipv6_multicast[50] = "deryfd11:1111:1122:0:22e2:b871:dc02:ad96";

//    	APP_THREAD_SendCoapUnicastRequest(message, borderRouter.ipv6, borderSyncResource);

	}
    receivedMessage = (otMessageInfo *) pMessage;
 8013db2:	4a18      	ldr	r2, [pc, #96]	; (8013e14 <APP_THREAD_CoapLightsSimpleRequestHandler+0x9c>)
 8013db4:	68bb      	ldr	r3, [r7, #8]
 8013db6:	6013      	str	r3, [r2, #0]

    if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE)
 8013db8:	68f8      	ldr	r0, [r7, #12]
 8013dba:	f7fe f948 	bl	801204e <otCoapHeaderGetType>
 8013dbe:	4603      	mov	r3, r0
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	d104      	bne.n	8013dce <APP_THREAD_CoapLightsSimpleRequestHandler+0x56>
	{
      APP_THREAD_SendDataResponse(pHeader, pMessageInfo);
 8013dc4:	6879      	ldr	r1, [r7, #4]
 8013dc6:	68f8      	ldr	r0, [r7, #12]
 8013dc8:	f000 fa3e 	bl	8014248 <APP_THREAD_SendDataResponse>
	  break;
 8013dcc:	e019      	b.n	8013e02 <APP_THREAD_CoapLightsSimpleRequestHandler+0x8a>
	}

    if (otCoapHeaderGetType(pHeader) != OT_COAP_TYPE_NON_CONFIRMABLE)
 8013dce:	68f8      	ldr	r0, [r7, #12]
 8013dd0:	f7fe f93d 	bl	801204e <otCoapHeaderGetType>
 8013dd4:	4603      	mov	r3, r0
 8013dd6:	2b10      	cmp	r3, #16
 8013dd8:	d110      	bne.n	8013dfc <APP_THREAD_CoapLightsSimpleRequestHandler+0x84>
    {
      break;
    }

    if (otCoapHeaderGetCode(pHeader) != OT_COAP_CODE_PUT)
 8013dda:	68f8      	ldr	r0, [r7, #12]
 8013ddc:	f7fe f965 	bl	80120aa <otCoapHeaderGetCode>
 8013de0:	4603      	mov	r3, r0
 8013de2:	2b03      	cmp	r3, #3
 8013de4:	d10c      	bne.n	8013e00 <APP_THREAD_CoapLightsSimpleRequestHandler+0x88>
    {
      break;
    }

    if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &OT_ReceivedCommand, 1U) != 1U)
 8013de6:	68b8      	ldr	r0, [r7, #8]
 8013de8:	f7fe fcff 	bl	80127ea <otMessageGetOffset>
 8013dec:	4603      	mov	r3, r0
 8013dee:	4619      	mov	r1, r3
 8013df0:	2301      	movs	r3, #1
 8013df2:	4a09      	ldr	r2, [pc, #36]	; (8013e18 <APP_THREAD_CoapLightsSimpleRequestHandler+0xa0>)
 8013df4:	68b8      	ldr	r0, [r7, #8]
 8013df6:	f7fe fd5d 	bl	80128b4 <otMessageRead>
    {
      //BSP_LED_Toggle(LED1);
    }

  } while (false);
}
 8013dfa:	e002      	b.n	8013e02 <APP_THREAD_CoapLightsSimpleRequestHandler+0x8a>
      break;
 8013dfc:	bf00      	nop
 8013dfe:	e000      	b.n	8013e02 <APP_THREAD_CoapLightsSimpleRequestHandler+0x8a>
      break;
 8013e00:	bf00      	nop
}
 8013e02:	bf00      	nop
 8013e04:	3710      	adds	r7, #16
 8013e06:	46bd      	mov	sp, r7
 8013e08:	bd80      	pop	{r7, pc}
 8013e0a:	bf00      	nop
 8013e0c:	20027ccc 	.word	0x20027ccc
 8013e10:	20027888 	.word	0x20027888
 8013e14:	200285f8 	.word	0x200285f8
 8013e18:	20027665 	.word	0x20027665

08013e1c <APP_THREAD_CoapToggleLoggingRequestHandler>:

static void APP_THREAD_CoapToggleLoggingRequestHandler(otCoapHeader * pHeader,
                                  otMessage            * pMessage,
                                  const otMessageInfo  * pMessageInfo)
{
 8013e1c:	b580      	push	{r7, lr}
 8013e1e:	b084      	sub	sp, #16
 8013e20:	af00      	add	r7, sp, #0
 8013e22:	60f8      	str	r0, [r7, #12]
 8013e24:	60b9      	str	r1, [r7, #8]
 8013e26:	607a      	str	r2, [r7, #4]
  do
  {
    //APP_THREAD_SendCoapUnicastRequest();

    if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &logMessage, sizeof(logMessage)) == sizeof(logMessage))
 8013e28:	68b8      	ldr	r0, [r7, #8]
 8013e2a:	f7fe fcde 	bl	80127ea <otMessageGetOffset>
 8013e2e:	4603      	mov	r3, r0
 8013e30:	4619      	mov	r1, r3
 8013e32:	2306      	movs	r3, #6
 8013e34:	4a1e      	ldr	r2, [pc, #120]	; (8013eb0 <APP_THREAD_CoapToggleLoggingRequestHandler+0x94>)
 8013e36:	68b8      	ldr	r0, [r7, #8]
 8013e38:	f7fe fd3c 	bl	80128b4 <otMessageRead>
 8013e3c:	4603      	mov	r3, r0
 8013e3e:	2b06      	cmp	r3, #6
 8013e40:	d106      	bne.n	8013e50 <APP_THREAD_CoapToggleLoggingRequestHandler+0x34>
	{
    	osMessageQueuePut(togLoggingQueueHandle, &logMessage, 0U, 0U);
 8013e42:	4b1c      	ldr	r3, [pc, #112]	; (8013eb4 <APP_THREAD_CoapToggleLoggingRequestHandler+0x98>)
 8013e44:	6818      	ldr	r0, [r3, #0]
 8013e46:	2300      	movs	r3, #0
 8013e48:	2200      	movs	r2, #0
 8013e4a:	4919      	ldr	r1, [pc, #100]	; (8013eb0 <APP_THREAD_CoapToggleLoggingRequestHandler+0x94>)
 8013e4c:	f7fa fa76 	bl	800e33c <osMessageQueuePut>
//    	{
//    		osMessageQueuePut(lightsSimpleQueueHandle, &lightsSimpleMessage, 0U, 0U);
//		}
	}

    tempMessageInfo = pMessageInfo;
 8013e50:	4a19      	ldr	r2, [pc, #100]	; (8013eb8 <APP_THREAD_CoapToggleLoggingRequestHandler+0x9c>)
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	6013      	str	r3, [r2, #0]
    receivedMessage = (otMessageInfo *) pMessage;
 8013e56:	4a19      	ldr	r2, [pc, #100]	; (8013ebc <APP_THREAD_CoapToggleLoggingRequestHandler+0xa0>)
 8013e58:	68bb      	ldr	r3, [r7, #8]
 8013e5a:	6013      	str	r3, [r2, #0]

    if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE)
 8013e5c:	68f8      	ldr	r0, [r7, #12]
 8013e5e:	f7fe f8f6 	bl	801204e <otCoapHeaderGetType>
 8013e62:	4603      	mov	r3, r0
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d104      	bne.n	8013e72 <APP_THREAD_CoapToggleLoggingRequestHandler+0x56>
	{
      APP_THREAD_SendDataResponse(pHeader, pMessageInfo);
 8013e68:	6879      	ldr	r1, [r7, #4]
 8013e6a:	68f8      	ldr	r0, [r7, #12]
 8013e6c:	f000 f9ec 	bl	8014248 <APP_THREAD_SendDataResponse>
	  break;
 8013e70:	e019      	b.n	8013ea6 <APP_THREAD_CoapToggleLoggingRequestHandler+0x8a>
	}

    if (otCoapHeaderGetType(pHeader) != OT_COAP_TYPE_NON_CONFIRMABLE)
 8013e72:	68f8      	ldr	r0, [r7, #12]
 8013e74:	f7fe f8eb 	bl	801204e <otCoapHeaderGetType>
 8013e78:	4603      	mov	r3, r0
 8013e7a:	2b10      	cmp	r3, #16
 8013e7c:	d110      	bne.n	8013ea0 <APP_THREAD_CoapToggleLoggingRequestHandler+0x84>
    {
      break;
    }

    if (otCoapHeaderGetCode(pHeader) != OT_COAP_CODE_PUT)
 8013e7e:	68f8      	ldr	r0, [r7, #12]
 8013e80:	f7fe f913 	bl	80120aa <otCoapHeaderGetCode>
 8013e84:	4603      	mov	r3, r0
 8013e86:	2b03      	cmp	r3, #3
 8013e88:	d10c      	bne.n	8013ea4 <APP_THREAD_CoapToggleLoggingRequestHandler+0x88>
    {
      break;
    }

    if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &OT_ReceivedCommand, 1U) != 1U)
 8013e8a:	68b8      	ldr	r0, [r7, #8]
 8013e8c:	f7fe fcad 	bl	80127ea <otMessageGetOffset>
 8013e90:	4603      	mov	r3, r0
 8013e92:	4619      	mov	r1, r3
 8013e94:	2301      	movs	r3, #1
 8013e96:	4a0a      	ldr	r2, [pc, #40]	; (8013ec0 <APP_THREAD_CoapToggleLoggingRequestHandler+0xa4>)
 8013e98:	68b8      	ldr	r0, [r7, #8]
 8013e9a:	f7fe fd0b 	bl	80128b4 <otMessageRead>
    {
      //BSP_LED_Toggle(LED1);
    }

  } while (false);
}
 8013e9e:	e002      	b.n	8013ea6 <APP_THREAD_CoapToggleLoggingRequestHandler+0x8a>
      break;
 8013ea0:	bf00      	nop
 8013ea2:	e000      	b.n	8013ea6 <APP_THREAD_CoapToggleLoggingRequestHandler+0x8a>
      break;
 8013ea4:	bf00      	nop
}
 8013ea6:	bf00      	nop
 8013ea8:	3710      	adds	r7, #16
 8013eaa:	46bd      	mov	sp, r7
 8013eac:	bd80      	pop	{r7, pc}
 8013eae:	bf00      	nop
 8013eb0:	200285cc 	.word	0x200285cc
 8013eb4:	20027cb4 	.word	0x20027cb4
 8013eb8:	200285b4 	.word	0x200285b4
 8013ebc:	200285f8 	.word	0x200285f8
 8013ec0:	20027665 	.word	0x20027665

08013ec4 <APP_THREAD_CoapBorderTimeRequestHandler>:
volatile char temp_var[100];
volatile uint8_t temp_num = 0;
static void APP_THREAD_CoapBorderTimeRequestHandler(otCoapHeader * pHeader,
                                  otMessage            * pMessage,
                                  const otMessageInfo  * pMessageInfo)
{
 8013ec4:	b580      	push	{r7, lr}
 8013ec6:	b084      	sub	sp, #16
 8013ec8:	af00      	add	r7, sp, #0
 8013eca:	60f8      	str	r0, [r7, #12]
 8013ecc:	60b9      	str	r1, [r7, #8]
 8013ece:	607a      	str	r2, [r7, #4]
  do
  {

	if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &borderRouter, sizeof(borderRouter)) == sizeof(borderRouter))
 8013ed0:	68b8      	ldr	r0, [r7, #8]
 8013ed2:	f7fe fc8a 	bl	80127ea <otMessageGetOffset>
 8013ed6:	4603      	mov	r3, r0
 8013ed8:	4619      	mov	r1, r3
 8013eda:	2340      	movs	r3, #64	; 0x40
 8013edc:	4a1a      	ldr	r2, [pc, #104]	; (8013f48 <APP_THREAD_CoapBorderTimeRequestHandler+0x84>)
 8013ede:	68b8      	ldr	r0, [r7, #8]
 8013ee0:	f7fe fce8 	bl	80128b4 <otMessageRead>
 8013ee4:	4603      	mov	r3, r0
 8013ee6:	2b40      	cmp	r3, #64	; 0x40
 8013ee8:	d101      	bne.n	8013eee <APP_THREAD_CoapBorderTimeRequestHandler+0x2a>
	{
    	APP_THREAD_SendMyIP();
 8013eea:	f7ff ff21 	bl	8013d30 <APP_THREAD_SendMyIP>
////			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
////			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
//		}
	}

    receivedMessage = (otMessageInfo *) pMessage;
 8013eee:	4a17      	ldr	r2, [pc, #92]	; (8013f4c <APP_THREAD_CoapBorderTimeRequestHandler+0x88>)
 8013ef0:	68bb      	ldr	r3, [r7, #8]
 8013ef2:	6013      	str	r3, [r2, #0]

    if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE)
 8013ef4:	68f8      	ldr	r0, [r7, #12]
 8013ef6:	f7fe f8aa 	bl	801204e <otCoapHeaderGetType>
 8013efa:	4603      	mov	r3, r0
 8013efc:	2b00      	cmp	r3, #0
 8013efe:	d104      	bne.n	8013f0a <APP_THREAD_CoapBorderTimeRequestHandler+0x46>
	{
      APP_THREAD_SendDataResponse(pHeader, pMessageInfo);
 8013f00:	6879      	ldr	r1, [r7, #4]
 8013f02:	68f8      	ldr	r0, [r7, #12]
 8013f04:	f000 f9a0 	bl	8014248 <APP_THREAD_SendDataResponse>
	  break;
 8013f08:	e019      	b.n	8013f3e <APP_THREAD_CoapBorderTimeRequestHandler+0x7a>
	}

    if (otCoapHeaderGetType(pHeader) != OT_COAP_TYPE_NON_CONFIRMABLE)
 8013f0a:	68f8      	ldr	r0, [r7, #12]
 8013f0c:	f7fe f89f 	bl	801204e <otCoapHeaderGetType>
 8013f10:	4603      	mov	r3, r0
 8013f12:	2b10      	cmp	r3, #16
 8013f14:	d110      	bne.n	8013f38 <APP_THREAD_CoapBorderTimeRequestHandler+0x74>
    {
      break;
    }

    if (otCoapHeaderGetCode(pHeader) != OT_COAP_CODE_PUT)
 8013f16:	68f8      	ldr	r0, [r7, #12]
 8013f18:	f7fe f8c7 	bl	80120aa <otCoapHeaderGetCode>
 8013f1c:	4603      	mov	r3, r0
 8013f1e:	2b03      	cmp	r3, #3
 8013f20:	d10c      	bne.n	8013f3c <APP_THREAD_CoapBorderTimeRequestHandler+0x78>
    {
      break;
    }

    if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &OT_ReceivedCommand, 1U) != 1U)
 8013f22:	68b8      	ldr	r0, [r7, #8]
 8013f24:	f7fe fc61 	bl	80127ea <otMessageGetOffset>
 8013f28:	4603      	mov	r3, r0
 8013f2a:	4619      	mov	r1, r3
 8013f2c:	2301      	movs	r3, #1
 8013f2e:	4a08      	ldr	r2, [pc, #32]	; (8013f50 <APP_THREAD_CoapBorderTimeRequestHandler+0x8c>)
 8013f30:	68b8      	ldr	r0, [r7, #8]
 8013f32:	f7fe fcbf 	bl	80128b4 <otMessageRead>
    {
      //BSP_LED_Toggle(LED1);
    }

  } while (false);
}
 8013f36:	e002      	b.n	8013f3e <APP_THREAD_CoapBorderTimeRequestHandler+0x7a>
      break;
 8013f38:	bf00      	nop
 8013f3a:	e000      	b.n	8013f3e <APP_THREAD_CoapBorderTimeRequestHandler+0x7a>
      break;
 8013f3c:	bf00      	nop
}
 8013f3e:	bf00      	nop
 8013f40:	3710      	adds	r7, #16
 8013f42:	46bd      	mov	sp, r7
 8013f44:	bd80      	pop	{r7, pc}
 8013f46:	bf00      	nop
 8013f48:	20027668 	.word	0x20027668
 8013f4c:	200285f8 	.word	0x200285f8
 8013f50:	20027665 	.word	0x20027665

08013f54 <APP_THREAD_CoapLightsComplexRequestHandler>:
//}

static void APP_THREAD_CoapLightsComplexRequestHandler(otCoapHeader * pHeader,
                                  otMessage            * pMessage,
                                  const otMessageInfo  * pMessageInfo)
{
 8013f54:	b580      	push	{r7, lr}
 8013f56:	b084      	sub	sp, #16
 8013f58:	af00      	add	r7, sp, #0
 8013f5a:	60f8      	str	r0, [r7, #12]
 8013f5c:	60b9      	str	r1, [r7, #8]
 8013f5e:	607a      	str	r2, [r7, #4]
  do
  {
    //APP_THREAD_SendCoapUnicastRequest();

    if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &lightMessageComplex, sizeof(lightMessageComplex)) == sizeof(lightMessageComplex))
 8013f60:	68b8      	ldr	r0, [r7, #8]
 8013f62:	f7fe fc42 	bl	80127ea <otMessageGetOffset>
 8013f66:	4603      	mov	r3, r0
 8013f68:	4619      	mov	r1, r3
 8013f6a:	2312      	movs	r3, #18
 8013f6c:	4a16      	ldr	r2, [pc, #88]	; (8013fc8 <APP_THREAD_CoapLightsComplexRequestHandler+0x74>)
 8013f6e:	68b8      	ldr	r0, [r7, #8]
 8013f70:	f7fe fca0 	bl	80128b4 <otMessageRead>
 8013f74:	4603      	mov	r3, r0
 8013f76:	2b12      	cmp	r3, #18
 8013f78:	d102      	bne.n	8013f80 <APP_THREAD_CoapLightsComplexRequestHandler+0x2c>
	{
    	FrontLightsSet(&lightMessageComplex);
 8013f7a:	4813      	ldr	r0, [pc, #76]	; (8013fc8 <APP_THREAD_CoapLightsComplexRequestHandler+0x74>)
 8013f7c:	f7ef ffee 	bl	8003f5c <FrontLightsSet>
	}

    tempMessageInfo = pMessageInfo;
 8013f80:	4a12      	ldr	r2, [pc, #72]	; (8013fcc <APP_THREAD_CoapLightsComplexRequestHandler+0x78>)
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	6013      	str	r3, [r2, #0]
    receivedMessage = (otMessageInfo *) pMessage;
 8013f86:	4a12      	ldr	r2, [pc, #72]	; (8013fd0 <APP_THREAD_CoapLightsComplexRequestHandler+0x7c>)
 8013f88:	68bb      	ldr	r3, [r7, #8]
 8013f8a:	6013      	str	r3, [r2, #0]

    if (otCoapHeaderGetType(pHeader) != OT_COAP_TYPE_NON_CONFIRMABLE)
 8013f8c:	68f8      	ldr	r0, [r7, #12]
 8013f8e:	f7fe f85e 	bl	801204e <otCoapHeaderGetType>
 8013f92:	4603      	mov	r3, r0
 8013f94:	2b10      	cmp	r3, #16
 8013f96:	d110      	bne.n	8013fba <APP_THREAD_CoapLightsComplexRequestHandler+0x66>
    {
      break;
    }

    if (otCoapHeaderGetCode(pHeader) != OT_COAP_CODE_PUT)
 8013f98:	68f8      	ldr	r0, [r7, #12]
 8013f9a:	f7fe f886 	bl	80120aa <otCoapHeaderGetCode>
 8013f9e:	4603      	mov	r3, r0
 8013fa0:	2b03      	cmp	r3, #3
 8013fa2:	d10c      	bne.n	8013fbe <APP_THREAD_CoapLightsComplexRequestHandler+0x6a>
    {
      break;
    }

    if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &OT_ReceivedCommand, 1U) != 1U)
 8013fa4:	68b8      	ldr	r0, [r7, #8]
 8013fa6:	f7fe fc20 	bl	80127ea <otMessageGetOffset>
 8013faa:	4603      	mov	r3, r0
 8013fac:	4619      	mov	r1, r3
 8013fae:	2301      	movs	r3, #1
 8013fb0:	4a08      	ldr	r2, [pc, #32]	; (8013fd4 <APP_THREAD_CoapLightsComplexRequestHandler+0x80>)
 8013fb2:	68b8      	ldr	r0, [r7, #8]
 8013fb4:	f7fe fc7e 	bl	80128b4 <otMessageRead>
    {
      //BSP_LED_Toggle(LED1);
    }

  } while (false);
}
 8013fb8:	e002      	b.n	8013fc0 <APP_THREAD_CoapLightsComplexRequestHandler+0x6c>
      break;
 8013fba:	bf00      	nop
 8013fbc:	e000      	b.n	8013fc0 <APP_THREAD_CoapLightsComplexRequestHandler+0x6c>
      break;
 8013fbe:	bf00      	nop
}
 8013fc0:	bf00      	nop
 8013fc2:	3710      	adds	r7, #16
 8013fc4:	46bd      	mov	sp, r7
 8013fc6:	bd80      	pop	{r7, pc}
 8013fc8:	200285e4 	.word	0x200285e4
 8013fcc:	200285b4 	.word	0x200285b4
 8013fd0:	200285f8 	.word	0x200285f8
 8013fd4:	20027665 	.word	0x20027665

08013fd8 <APP_THREAD_SendCoapUnicastRequest>:
volatile otNetifMulticastAddress multicastAddresses;
volatile otIp6Address  meshLocalEID;
volatile otIp6Address linkLocalIPV6;

static void APP_THREAD_SendCoapUnicastRequest(char* message, uint8_t message_length, char* ipv6_addr  , char* resource)
{
 8013fd8:	b590      	push	{r4, r7, lr}
 8013fda:	b087      	sub	sp, #28
 8013fdc:	af02      	add	r7, sp, #8
 8013fde:	60f8      	str	r0, [r7, #12]
 8013fe0:	607a      	str	r2, [r7, #4]
 8013fe2:	603b      	str	r3, [r7, #0]
 8013fe4:	460b      	mov	r3, r1
 8013fe6:	72fb      	strb	r3, [r7, #11]
  // https://openthread.io/reference/struct/ot-message-info.html#structot_message_info



	do{
			  myRloc16 = otThreadGetRloc16(NULL);
 8013fe8:	2000      	movs	r0, #0
 8013fea:	f7ff fa51 	bl	8013490 <otThreadGetRloc16>
 8013fee:	4603      	mov	r3, r0
 8013ff0:	461a      	mov	r2, r3
 8013ff2:	4b49      	ldr	r3, [pc, #292]	; (8014118 <APP_THREAD_SendCoapUnicastRequest+0x140>)
 8013ff4:	801a      	strh	r2, [r3, #0]
			  isEnabledIpv6 = otIp6IsEnabled(NULL);
 8013ff6:	2000      	movs	r0, #0
 8013ff8:	f7fe fae5 	bl	80125c6 <otIp6IsEnabled>
 8013ffc:	4603      	mov	r3, r0
 8013ffe:	461a      	mov	r2, r3
 8014000:	4b46      	ldr	r3, [pc, #280]	; (801411c <APP_THREAD_SendCoapUnicastRequest+0x144>)
 8014002:	701a      	strb	r2, [r3, #0]
//			  multicastAddresses = otIp6GetMulticastAddresses(NULL);
//			  meshLocalEID =  otThreadGetMeshLocalEid(NULL);
//			  linkLocalIPV6 = otThreadGetLinkLocalIp6Address(NULL);
			  memcpy(&meshLocalEID, otThreadGetMeshLocalEid(NULL) ,sizeof(otIp6Address));
 8014004:	2000      	movs	r0, #0
 8014006:	f7ff f9c3 	bl	8013390 <otThreadGetMeshLocalEid>
 801400a:	4602      	mov	r2, r0
 801400c:	4b44      	ldr	r3, [pc, #272]	; (8014120 <APP_THREAD_SendCoapUnicastRequest+0x148>)
 801400e:	6814      	ldr	r4, [r2, #0]
 8014010:	6850      	ldr	r0, [r2, #4]
 8014012:	6891      	ldr	r1, [r2, #8]
 8014014:	68d2      	ldr	r2, [r2, #12]
 8014016:	601c      	str	r4, [r3, #0]
 8014018:	6058      	str	r0, [r3, #4]
 801401a:	6099      	str	r1, [r3, #8]
 801401c:	60da      	str	r2, [r3, #12]

			  // clear info
			  memset(&OT_MessageInfo, 0, sizeof(OT_MessageInfo));
 801401e:	222c      	movs	r2, #44	; 0x2c
 8014020:	2100      	movs	r1, #0
 8014022:	4840      	ldr	r0, [pc, #256]	; (8014124 <APP_THREAD_SendCoapUnicastRequest+0x14c>)
 8014024:	f001 f8ad 	bl	8015182 <memset>

			  // set border IP address
			   //error = otIp6AddressFromString("ff03::1", &OT_MessageInfo.mPeerAddr);
			   error = otIp6AddressFromString(ipv6_addr , &OT_MessageInfo.mPeerAddr);
 8014028:	493f      	ldr	r1, [pc, #252]	; (8014128 <APP_THREAD_SendCoapUnicastRequest+0x150>)
 801402a:	6878      	ldr	r0, [r7, #4]
 801402c:	f7fe fb20 	bl	8012670 <otIp6AddressFromString>
 8014030:	4603      	mov	r3, r0
 8014032:	461a      	mov	r2, r3
 8014034:	4b3d      	ldr	r3, [pc, #244]	; (801412c <APP_THREAD_SendCoapUnicastRequest+0x154>)
 8014036:	701a      	strb	r2, [r3, #0]


			   memcpy(&OT_MessageInfo.mSockAddr, otThreadGetMeshLocalEid(NULL), sizeof(OT_MessageInfo.mSockAddr));
 8014038:	2000      	movs	r0, #0
 801403a:	f7ff f9a9 	bl	8013390 <otThreadGetMeshLocalEid>
 801403e:	4602      	mov	r2, r0
 8014040:	4b38      	ldr	r3, [pc, #224]	; (8014124 <APP_THREAD_SendCoapUnicastRequest+0x14c>)
 8014042:	461c      	mov	r4, r3
 8014044:	4613      	mov	r3, r2
 8014046:	6818      	ldr	r0, [r3, #0]
 8014048:	6859      	ldr	r1, [r3, #4]
 801404a:	689a      	ldr	r2, [r3, #8]
 801404c:	68db      	ldr	r3, [r3, #12]
 801404e:	c40f      	stmia	r4!, {r0, r1, r2, r3}

			   // error = otIp6AddressFromString("fd11:22::994e:6ed7:263d:6187", &OT_MessageInfo.mPeerAddr);
			  //error = otIp6AddressFromString("fdde:ad00:beef:0:0:ff:fe00:3800", &OT_MessageInfo.mPeerAddr);

			  OT_MessageInfo.mInterfaceId = OT_NETIF_INTERFACE_ID_THREAD;
 8014050:	4b34      	ldr	r3, [pc, #208]	; (8014124 <APP_THREAD_SendCoapUnicastRequest+0x14c>)
 8014052:	2201      	movs	r2, #1
 8014054:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			  OT_MessageInfo.mPeerPort = OT_DEFAULT_COAP_PORT;
 8014058:	4b32      	ldr	r3, [pc, #200]	; (8014124 <APP_THREAD_SendCoapUnicastRequest+0x14c>)
 801405a:	f241 6233 	movw	r2, #5683	; 0x1633
 801405e:	845a      	strh	r2, [r3, #34]	; 0x22

			  unicastAddresses = otIp6GetUnicastAddresses(NULL);
 8014060:	2000      	movs	r0, #0
 8014062:	f7fe fadd 	bl	8012620 <otIp6GetUnicastAddresses>
 8014066:	4602      	mov	r2, r0
 8014068:	4b31      	ldr	r3, [pc, #196]	; (8014130 <APP_THREAD_SendCoapUnicastRequest+0x158>)
 801406a:	601a      	str	r2, [r3, #0]
			  OT_MessageInfo.mSockAddr = unicastAddresses->mAddress;
 801406c:	4b30      	ldr	r3, [pc, #192]	; (8014130 <APP_THREAD_SendCoapUnicastRequest+0x158>)
 801406e:	681b      	ldr	r3, [r3, #0]
 8014070:	4a2c      	ldr	r2, [pc, #176]	; (8014124 <APP_THREAD_SendCoapUnicastRequest+0x14c>)
 8014072:	4614      	mov	r4, r2
 8014074:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014076:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			  //OT_MessageInfo.mHopLimit = 20;

			  /************** CREATE NEW MESSAGE ********************ifco*/

			  // create header
			  otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_PUT);
 801407a:	2203      	movs	r2, #3
 801407c:	2110      	movs	r1, #16
 801407e:	482d      	ldr	r0, [pc, #180]	; (8014134 <APP_THREAD_SendCoapUnicastRequest+0x15c>)
 8014080:	f7fd fe89 	bl	8011d96 <otCoapHeaderInit>
			  //otCoapHeaderSetMessageId(&OT_Header,OT_BufferIdSend); //may not need since sendRequest should set to 0
			  otCoapHeaderGenerateToken(&OT_Header, 2U); //This function sets the Token length and randomizes its value.
 8014084:	2102      	movs	r1, #2
 8014086:	482b      	ldr	r0, [pc, #172]	; (8014134 <APP_THREAD_SendCoapUnicastRequest+0x15c>)
 8014088:	f7fd feee 	bl	8011e68 <otCoapHeaderGenerateToken>

			  // the name of the resource
			  //error = otCoapHeaderAppendUriPathOptions(&OT_Header,C_RESSOURCE_BASIC);
			  error = otCoapHeaderAppendUriPathOptions(&OT_Header, resource);
 801408c:	6839      	ldr	r1, [r7, #0]
 801408e:	4829      	ldr	r0, [pc, #164]	; (8014134 <APP_THREAD_SendCoapUnicastRequest+0x15c>)
 8014090:	f7fd ff4d 	bl	8011f2e <otCoapHeaderAppendUriPathOptions>
 8014094:	4603      	mov	r3, r0
 8014096:	461a      	mov	r2, r3
 8014098:	4b24      	ldr	r3, [pc, #144]	; (801412c <APP_THREAD_SendCoapUnicastRequest+0x154>)
 801409a:	701a      	strb	r2, [r3, #0]

			  // This function adds Payload Marker indicating beginning of the payload to the CoAP header
			  otCoapHeaderSetPayloadMarker(&OT_Header);
 801409c:	4825      	ldr	r0, [pc, #148]	; (8014134 <APP_THREAD_SendCoapUnicastRequest+0x15c>)
 801409e:	f7fd ff78 	bl	8011f92 <otCoapHeaderSetPayloadMarker>

			  // creates new message with headers but with empty payload
			  pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 80140a2:	4924      	ldr	r1, [pc, #144]	; (8014134 <APP_THREAD_SendCoapUnicastRequest+0x15c>)
 80140a4:	2000      	movs	r0, #0
 80140a6:	f7fe f8b7 	bl	8012218 <otCoapNewMessage>
 80140aa:	4602      	mov	r2, r0
 80140ac:	4b22      	ldr	r3, [pc, #136]	; (8014138 <APP_THREAD_SendCoapUnicastRequest+0x160>)
 80140ae:	601a      	str	r2, [r3, #0]
			  if (pOT_Message == NULL) while(1);
 80140b0:	4b21      	ldr	r3, [pc, #132]	; (8014138 <APP_THREAD_SendCoapUnicastRequest+0x160>)
 80140b2:	681b      	ldr	r3, [r3, #0]
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	d100      	bne.n	80140ba <APP_THREAD_SendCoapUnicastRequest+0xe2>
 80140b8:	e7fe      	b.n	80140b8 <APP_THREAD_SendCoapUnicastRequest+0xe0>
			  // Append bytes to a message (this is where the payload gets added)

			  //error = otMessageAppend(pOT_Message, OT_BufferSend, sizeof(OT_BufferSend));
//			  error = otMessageAppend(pOT_Message, &OT_MessageInfo, sizeof(OT_MessageInfo));
			  error = otMessageAppend(pOT_Message, message, message_length);
 80140ba:	4b1f      	ldr	r3, [pc, #124]	; (8014138 <APP_THREAD_SendCoapUnicastRequest+0x160>)
 80140bc:	681b      	ldr	r3, [r3, #0]
 80140be:	7afa      	ldrb	r2, [r7, #11]
 80140c0:	b292      	uxth	r2, r2
 80140c2:	68f9      	ldr	r1, [r7, #12]
 80140c4:	4618      	mov	r0, r3
 80140c6:	f7fe fbbe 	bl	8012846 <otMessageAppend>
 80140ca:	4603      	mov	r3, r0
 80140cc:	461a      	mov	r2, r3
 80140ce:	4b17      	ldr	r3, [pc, #92]	; (801412c <APP_THREAD_SendCoapUnicastRequest+0x154>)
 80140d0:	701a      	strb	r2, [r3, #0]

			  if (error != OT_ERROR_NONE) while(1);
 80140d2:	4b16      	ldr	r3, [pc, #88]	; (801412c <APP_THREAD_SendCoapUnicastRequest+0x154>)
 80140d4:	781b      	ldrb	r3, [r3, #0]
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	d000      	beq.n	80140dc <APP_THREAD_SendCoapUnicastRequest+0x104>
 80140da:	e7fe      	b.n	80140da <APP_THREAD_SendCoapUnicastRequest+0x102>

			  error = otCoapSendRequest(NULL,
 80140dc:	4b16      	ldr	r3, [pc, #88]	; (8014138 <APP_THREAD_SendCoapUnicastRequest+0x160>)
 80140de:	6819      	ldr	r1, [r3, #0]
 80140e0:	2300      	movs	r3, #0
 80140e2:	9300      	str	r3, [sp, #0]
 80140e4:	2300      	movs	r3, #0
 80140e6:	4a0f      	ldr	r2, [pc, #60]	; (8014124 <APP_THREAD_SendCoapUnicastRequest+0x14c>)
 80140e8:	2000      	movs	r0, #0
 80140ea:	f7fe f8c3 	bl	8012274 <otCoapSendRequest>
 80140ee:	4603      	mov	r3, r0
 80140f0:	461a      	mov	r2, r3
 80140f2:	4b0e      	ldr	r3, [pc, #56]	; (801412c <APP_THREAD_SendCoapUnicastRequest+0x154>)
 80140f4:	701a      	strb	r2, [r3, #0]
						&OT_MessageInfo,
						NULL,
						(void*) NULL);

			  // if error: free allocated message buffer if one was allocated
			  if (error != OT_ERROR_NONE && pOT_Message != NULL)
 80140f6:	4b0d      	ldr	r3, [pc, #52]	; (801412c <APP_THREAD_SendCoapUnicastRequest+0x154>)
 80140f8:	781b      	ldrb	r3, [r3, #0]
 80140fa:	2b00      	cmp	r3, #0
 80140fc:	d008      	beq.n	8014110 <APP_THREAD_SendCoapUnicastRequest+0x138>
 80140fe:	4b0e      	ldr	r3, [pc, #56]	; (8014138 <APP_THREAD_SendCoapUnicastRequest+0x160>)
 8014100:	681b      	ldr	r3, [r3, #0]
 8014102:	2b00      	cmp	r3, #0
 8014104:	d004      	beq.n	8014110 <APP_THREAD_SendCoapUnicastRequest+0x138>
			  {
				otMessageFree(pOT_Message);
 8014106:	4b0c      	ldr	r3, [pc, #48]	; (8014138 <APP_THREAD_SendCoapUnicastRequest+0x160>)
 8014108:	681b      	ldr	r3, [r3, #0]
 801410a:	4618      	mov	r0, r3
 801410c:	f7fe fb42 	bl	8012794 <otMessageFree>
			  }

			  //HAL_Delay(10000);
			}while(false);

}
 8014110:	bf00      	nop
 8014112:	3714      	adds	r7, #20
 8014114:	46bd      	mov	sp, r7
 8014116:	bd90      	pop	{r4, r7, pc}
 8014118:	20028676 	.word	0x20028676
 801411c:	200285f6 	.word	0x200285f6
 8014120:	20028664 	.word	0x20028664
 8014124:	200275a4 	.word	0x200275a4
 8014128:	200275b4 	.word	0x200275b4
 801412c:	20027664 	.word	0x20027664
 8014130:	20028678 	.word	0x20028678
 8014134:	200275d0 	.word	0x200275d0
 8014138:	20027660 	.word	0x20027660

0801413c <APP_THREAD_SendCoapUnicastMsg>:

static void APP_THREAD_SendCoapUnicastMsg(void *message, uint8_t msgSize, char* ipv6_addr  , char* resource, uint8_t msgID)
{
 801413c:	b590      	push	{r4, r7, lr}
 801413e:	b087      	sub	sp, #28
 8014140:	af02      	add	r7, sp, #8
 8014142:	60f8      	str	r0, [r7, #12]
 8014144:	607a      	str	r2, [r7, #4]
 8014146:	603b      	str	r3, [r7, #0]
 8014148:	460b      	mov	r3, r1
 801414a:	72fb      	strb	r3, [r7, #11]
//			  multicastAddresses = otIp6GetMulticastAddresses(NULL);
//			  meshLocalEID =  otThreadGetMeshLocalEid(NULL);
//			  linkLocalIPV6 = otThreadGetLinkLocalIp6Address(NULL);

			  // clear info
			  memset(&OT_MessageInfo, 0, sizeof(OT_MessageInfo));
 801414c:	222c      	movs	r2, #44	; 0x2c
 801414e:	2100      	movs	r1, #0
 8014150:	4838      	ldr	r0, [pc, #224]	; (8014234 <APP_THREAD_SendCoapUnicastMsg+0xf8>)
 8014152:	f001 f816 	bl	8015182 <memset>

			  // set border IP address
			   error = otIp6AddressFromString(ipv6_addr , &OT_MessageInfo.mPeerAddr);
 8014156:	4938      	ldr	r1, [pc, #224]	; (8014238 <APP_THREAD_SendCoapUnicastMsg+0xfc>)
 8014158:	6878      	ldr	r0, [r7, #4]
 801415a:	f7fe fa89 	bl	8012670 <otIp6AddressFromString>
 801415e:	4603      	mov	r3, r0
 8014160:	461a      	mov	r2, r3
 8014162:	4b36      	ldr	r3, [pc, #216]	; (801423c <APP_THREAD_SendCoapUnicastMsg+0x100>)
 8014164:	701a      	strb	r2, [r3, #0]

			   memcpy(&OT_MessageInfo.mSockAddr, otThreadGetMeshLocalEid(NULL), sizeof(OT_MessageInfo.mSockAddr));
 8014166:	2000      	movs	r0, #0
 8014168:	f7ff f912 	bl	8013390 <otThreadGetMeshLocalEid>
 801416c:	4602      	mov	r2, r0
 801416e:	4b31      	ldr	r3, [pc, #196]	; (8014234 <APP_THREAD_SendCoapUnicastMsg+0xf8>)
 8014170:	461c      	mov	r4, r3
 8014172:	4613      	mov	r3, r2
 8014174:	6818      	ldr	r0, [r3, #0]
 8014176:	6859      	ldr	r1, [r3, #4]
 8014178:	689a      	ldr	r2, [r3, #8]
 801417a:	68db      	ldr	r3, [r3, #12]
 801417c:	c40f      	stmia	r4!, {r0, r1, r2, r3}

			   // error = otIp6AddressFromString("fd11:22::994e:6ed7:263d:6187", &OT_MessageInfo.mPeerAddr);
			  //error = otIp6AddressFromString("fdde:ad00:beef:0:0:ff:fe00:3800", &OT_MessageInfo.mPeerAddr);

			  OT_MessageInfo.mInterfaceId = OT_NETIF_INTERFACE_ID_THREAD;
 801417e:	4b2d      	ldr	r3, [pc, #180]	; (8014234 <APP_THREAD_SendCoapUnicastMsg+0xf8>)
 8014180:	2201      	movs	r2, #1
 8014182:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			  OT_MessageInfo.mPeerPort = OT_DEFAULT_COAP_PORT;
 8014186:	4b2b      	ldr	r3, [pc, #172]	; (8014234 <APP_THREAD_SendCoapUnicastMsg+0xf8>)
 8014188:	f241 6233 	movw	r2, #5683	; 0x1633
 801418c:	845a      	strh	r2, [r3, #34]	; 0x22
			  //OT_MessageInfo.mHopLimit = 20;

			  /************** CREATE NEW MESSAGE ********************ifco*/

			  // create header
			  otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_PUT);
 801418e:	2203      	movs	r2, #3
 8014190:	2110      	movs	r1, #16
 8014192:	482b      	ldr	r0, [pc, #172]	; (8014240 <APP_THREAD_SendCoapUnicastMsg+0x104>)
 8014194:	f7fd fdff 	bl	8011d96 <otCoapHeaderInit>
//			  otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_PUT);

//			  otCoapHeaderSetMessageId(&OT_Header, msgID); `//may not need since sendRequest should set to 0
			  otCoapHeaderGenerateToken(&OT_Header, 2U); //This function sets the Token length and randomizes its value.
 8014198:	2102      	movs	r1, #2
 801419a:	4829      	ldr	r0, [pc, #164]	; (8014240 <APP_THREAD_SendCoapUnicastMsg+0x104>)
 801419c:	f7fd fe64 	bl	8011e68 <otCoapHeaderGenerateToken>

			  // the name of the resource
			  error = otCoapHeaderAppendUriPathOptions(&OT_Header, resource);
 80141a0:	6839      	ldr	r1, [r7, #0]
 80141a2:	4827      	ldr	r0, [pc, #156]	; (8014240 <APP_THREAD_SendCoapUnicastMsg+0x104>)
 80141a4:	f7fd fec3 	bl	8011f2e <otCoapHeaderAppendUriPathOptions>
 80141a8:	4603      	mov	r3, r0
 80141aa:	461a      	mov	r2, r3
 80141ac:	4b23      	ldr	r3, [pc, #140]	; (801423c <APP_THREAD_SendCoapUnicastMsg+0x100>)
 80141ae:	701a      	strb	r2, [r3, #0]

			  // need this so the coap server doesnt try to parse as 'utf-8' and error out
			  otCoapHeaderAppendContentFormatOption(&OT_Header, OT_COAP_OPTION_CONTENT_FORMAT_OCTET_STREAM);
 80141b0:	212a      	movs	r1, #42	; 0x2a
 80141b2:	4823      	ldr	r0, [pc, #140]	; (8014240 <APP_THREAD_SendCoapUnicastMsg+0x104>)
 80141b4:	f7fd fe88 	bl	8011ec8 <otCoapHeaderAppendContentFormatOption>

			  // This function adds Payload Marker indicating beginning of the payload to the CoAP header
			  otCoapHeaderSetPayloadMarker(&OT_Header);
 80141b8:	4821      	ldr	r0, [pc, #132]	; (8014240 <APP_THREAD_SendCoapUnicastMsg+0x104>)
 80141ba:	f7fd feea 	bl	8011f92 <otCoapHeaderSetPayloadMarker>

			  // creates new message with headers but with empty payload
			  pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 80141be:	4920      	ldr	r1, [pc, #128]	; (8014240 <APP_THREAD_SendCoapUnicastMsg+0x104>)
 80141c0:	2000      	movs	r0, #0
 80141c2:	f7fe f829 	bl	8012218 <otCoapNewMessage>
 80141c6:	4602      	mov	r2, r0
 80141c8:	4b1e      	ldr	r3, [pc, #120]	; (8014244 <APP_THREAD_SendCoapUnicastMsg+0x108>)
 80141ca:	601a      	str	r2, [r3, #0]
			  if (pOT_Message == NULL) while(1);
 80141cc:	4b1d      	ldr	r3, [pc, #116]	; (8014244 <APP_THREAD_SendCoapUnicastMsg+0x108>)
 80141ce:	681b      	ldr	r3, [r3, #0]
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	d100      	bne.n	80141d6 <APP_THREAD_SendCoapUnicastMsg+0x9a>
 80141d4:	e7fe      	b.n	80141d4 <APP_THREAD_SendCoapUnicastMsg+0x98>
			  // Append bytes to a message (this is where the payload gets added)



			  //error = otMessageAppend(pOT_Message, OT_BufferSend, sizeof(OT_BufferSend));
			  error = otMessageAppend(pOT_Message, message, msgSize);
 80141d6:	4b1b      	ldr	r3, [pc, #108]	; (8014244 <APP_THREAD_SendCoapUnicastMsg+0x108>)
 80141d8:	681b      	ldr	r3, [r3, #0]
 80141da:	7afa      	ldrb	r2, [r7, #11]
 80141dc:	b292      	uxth	r2, r2
 80141de:	68f9      	ldr	r1, [r7, #12]
 80141e0:	4618      	mov	r0, r3
 80141e2:	f7fe fb30 	bl	8012846 <otMessageAppend>
 80141e6:	4603      	mov	r3, r0
 80141e8:	461a      	mov	r2, r3
 80141ea:	4b14      	ldr	r3, [pc, #80]	; (801423c <APP_THREAD_SendCoapUnicastMsg+0x100>)
 80141ec:	701a      	strb	r2, [r3, #0]

			  if (error != OT_ERROR_NONE) while(1);
 80141ee:	4b13      	ldr	r3, [pc, #76]	; (801423c <APP_THREAD_SendCoapUnicastMsg+0x100>)
 80141f0:	781b      	ldrb	r3, [r3, #0]
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d000      	beq.n	80141f8 <APP_THREAD_SendCoapUnicastMsg+0xbc>
 80141f6:	e7fe      	b.n	80141f6 <APP_THREAD_SendCoapUnicastMsg+0xba>

			  error = otCoapSendRequest(NULL,
 80141f8:	4b12      	ldr	r3, [pc, #72]	; (8014244 <APP_THREAD_SendCoapUnicastMsg+0x108>)
 80141fa:	6819      	ldr	r1, [r3, #0]
 80141fc:	2300      	movs	r3, #0
 80141fe:	9300      	str	r3, [sp, #0]
 8014200:	2300      	movs	r3, #0
 8014202:	4a0c      	ldr	r2, [pc, #48]	; (8014234 <APP_THREAD_SendCoapUnicastMsg+0xf8>)
 8014204:	2000      	movs	r0, #0
 8014206:	f7fe f835 	bl	8012274 <otCoapSendRequest>
 801420a:	4603      	mov	r3, r0
 801420c:	461a      	mov	r2, r3
 801420e:	4b0b      	ldr	r3, [pc, #44]	; (801423c <APP_THREAD_SendCoapUnicastMsg+0x100>)
 8014210:	701a      	strb	r2, [r3, #0]
						&OT_MessageInfo,
						NULL,
						(void*) NULL);

			  // if error: free allocated message buffer if one was allocated
			  if (error != OT_ERROR_NONE && pOT_Message != NULL)
 8014212:	4b0a      	ldr	r3, [pc, #40]	; (801423c <APP_THREAD_SendCoapUnicastMsg+0x100>)
 8014214:	781b      	ldrb	r3, [r3, #0]
 8014216:	2b00      	cmp	r3, #0
 8014218:	d008      	beq.n	801422c <APP_THREAD_SendCoapUnicastMsg+0xf0>
 801421a:	4b0a      	ldr	r3, [pc, #40]	; (8014244 <APP_THREAD_SendCoapUnicastMsg+0x108>)
 801421c:	681b      	ldr	r3, [r3, #0]
 801421e:	2b00      	cmp	r3, #0
 8014220:	d004      	beq.n	801422c <APP_THREAD_SendCoapUnicastMsg+0xf0>
			  {
				otMessageFree(pOT_Message);
 8014222:	4b08      	ldr	r3, [pc, #32]	; (8014244 <APP_THREAD_SendCoapUnicastMsg+0x108>)
 8014224:	681b      	ldr	r3, [r3, #0]
 8014226:	4618      	mov	r0, r3
 8014228:	f7fe fab4 	bl	8012794 <otMessageFree>
			  }

			  //HAL_Delay(10000);
			}while(false);

}
 801422c:	bf00      	nop
 801422e:	3714      	adds	r7, #20
 8014230:	46bd      	mov	sp, r7
 8014232:	bd90      	pop	{r4, r7, pc}
 8014234:	200275a4 	.word	0x200275a4
 8014238:	200275b4 	.word	0x200275b4
 801423c:	20027664 	.word	0x20027664
 8014240:	200275d0 	.word	0x200275d0
 8014244:	20027660 	.word	0x20027660

08014248 <APP_THREAD_SendDataResponse>:
 * @param  pMessageInfo message info pointer
 * @retval None
 */
static void APP_THREAD_SendDataResponse(otCoapHeader    * pRequestHeader,
    const otMessageInfo * pMessageInfo)
{
 8014248:	b590      	push	{r4, r7, lr}
 801424a:	b085      	sub	sp, #20
 801424c:	af00      	add	r7, sp, #0
 801424e:	6078      	str	r0, [r7, #4]
 8014250:	6039      	str	r1, [r7, #0]
  otError  error = OT_ERROR_NONE;
 8014252:	2300      	movs	r3, #0
 8014254:	73fb      	strb	r3, [r7, #15]

  APP_DBG(" ********* APP_THREAD_SendDataResponse \r\n");
 8014256:	4a1f      	ldr	r2, [pc, #124]	; (80142d4 <APP_THREAD_SendDataResponse+0x8c>)
 8014258:	2101      	movs	r1, #1
 801425a:	2000      	movs	r0, #0
 801425c:	f7f0 ff04 	bl	8005068 <logApplication>
  otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_ACKNOWLEDGMENT, OT_COAP_CODE_CHANGED);
 8014260:	2244      	movs	r2, #68	; 0x44
 8014262:	2120      	movs	r1, #32
 8014264:	481c      	ldr	r0, [pc, #112]	; (80142d8 <APP_THREAD_SendDataResponse+0x90>)
 8014266:	f7fd fd96 	bl	8011d96 <otCoapHeaderInit>
  otCoapHeaderSetMessageId(&OT_Header, otCoapHeaderGetMessageId(pRequestHeader));
 801426a:	6878      	ldr	r0, [r7, #4]
 801426c:	f7fd ff4b 	bl	8012106 <otCoapHeaderGetMessageId>
 8014270:	4603      	mov	r3, r0
 8014272:	4619      	mov	r1, r3
 8014274:	4818      	ldr	r0, [pc, #96]	; (80142d8 <APP_THREAD_SendDataResponse+0x90>)
 8014276:	f7fd feba 	bl	8011fee <otCoapHeaderSetMessageId>
  otCoapHeaderSetToken(&OT_Header,
 801427a:	6878      	ldr	r0, [r7, #4]
 801427c:	f7fd ff9f 	bl	80121be <otCoapHeaderGetToken>
 8014280:	4604      	mov	r4, r0
 8014282:	6878      	ldr	r0, [r7, #4]
 8014284:	f7fd ff6d 	bl	8012162 <otCoapHeaderGetTokenLength>
 8014288:	4603      	mov	r3, r0
 801428a:	461a      	mov	r2, r3
 801428c:	4621      	mov	r1, r4
 801428e:	4812      	ldr	r0, [pc, #72]	; (80142d8 <APP_THREAD_SendDataResponse+0x90>)
 8014290:	f7fd fdb6 	bl	8011e00 <otCoapHeaderSetToken>
      otCoapHeaderGetToken(pRequestHeader),
      otCoapHeaderGetTokenLength(pRequestHeader));

  pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 8014294:	4910      	ldr	r1, [pc, #64]	; (80142d8 <APP_THREAD_SendDataResponse+0x90>)
 8014296:	2000      	movs	r0, #0
 8014298:	f7fd ffbe 	bl	8012218 <otCoapNewMessage>
 801429c:	4602      	mov	r2, r0
 801429e:	4b0f      	ldr	r3, [pc, #60]	; (80142dc <APP_THREAD_SendDataResponse+0x94>)
 80142a0:	601a      	str	r2, [r3, #0]
  if (pOT_Message == NULL)
  {
    //APP_THREAD_Error(ERR_NEW_MSG_ALLOC,error);
  }
  error = otCoapSendResponse(NULL, pOT_Message, pMessageInfo);
 80142a2:	4b0e      	ldr	r3, [pc, #56]	; (80142dc <APP_THREAD_SendDataResponse+0x94>)
 80142a4:	681b      	ldr	r3, [r3, #0]
 80142a6:	683a      	ldr	r2, [r7, #0]
 80142a8:	4619      	mov	r1, r3
 80142aa:	2000      	movs	r0, #0
 80142ac:	f7fe f87b 	bl	80123a6 <otCoapSendResponse>
 80142b0:	4603      	mov	r3, r0
 80142b2:	73fb      	strb	r3, [r7, #15]
  if (error != OT_ERROR_NONE && pOT_Message != NULL)
 80142b4:	7bfb      	ldrb	r3, [r7, #15]
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	d008      	beq.n	80142cc <APP_THREAD_SendDataResponse+0x84>
 80142ba:	4b08      	ldr	r3, [pc, #32]	; (80142dc <APP_THREAD_SendDataResponse+0x94>)
 80142bc:	681b      	ldr	r3, [r3, #0]
 80142be:	2b00      	cmp	r3, #0
 80142c0:	d004      	beq.n	80142cc <APP_THREAD_SendDataResponse+0x84>
  {
    otMessageFree(pOT_Message);
 80142c2:	4b06      	ldr	r3, [pc, #24]	; (80142dc <APP_THREAD_SendDataResponse+0x94>)
 80142c4:	681b      	ldr	r3, [r3, #0]
 80142c6:	4618      	mov	r0, r3
 80142c8:	f7fe fa64 	bl	8012794 <otMessageFree>
    //APP_THREAD_Error(ERR_THREAD_DATA_RESPONSE,error);
  }
}
 80142cc:	bf00      	nop
 80142ce:	3714      	adds	r7, #20
 80142d0:	46bd      	mov	sp, r7
 80142d2:	bd90      	pop	{r4, r7, pc}
 80142d4:	08016750 	.word	0x08016750
 80142d8:	200275d0 	.word	0x200275d0
 80142dc:	20027660 	.word	0x20027660

080142e0 <APP_THREAD_RegisterCmdBuffer>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void APP_THREAD_RegisterCmdBuffer(TL_CmdPacket_t* p_buffer)
{
 80142e0:	b480      	push	{r7}
 80142e2:	b083      	sub	sp, #12
 80142e4:	af00      	add	r7, sp, #0
 80142e6:	6078      	str	r0, [r7, #4]
  p_thread_otcmdbuffer = p_buffer;
 80142e8:	4a04      	ldr	r2, [pc, #16]	; (80142fc <APP_THREAD_RegisterCmdBuffer+0x1c>)
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	6013      	str	r3, [r2, #0]
}
 80142ee:	bf00      	nop
 80142f0:	370c      	adds	r7, #12
 80142f2:	46bd      	mov	sp, r7
 80142f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142f8:	4770      	bx	lr
 80142fa:	bf00      	nop
 80142fc:	2002758c 	.word	0x2002758c

08014300 <THREAD_Get_OTCmdPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdPayloadBuffer(void)
{
 8014300:	b480      	push	{r7}
 8014302:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)p_thread_otcmdbuffer->cmdserial.cmd.payload;
 8014304:	4b03      	ldr	r3, [pc, #12]	; (8014314 <THREAD_Get_OTCmdPayloadBuffer+0x14>)
 8014306:	681b      	ldr	r3, [r3, #0]
 8014308:	330c      	adds	r3, #12
}
 801430a:	4618      	mov	r0, r3
 801430c:	46bd      	mov	sp, r7
 801430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014312:	4770      	bx	lr
 8014314:	2002758c 	.word	0x2002758c

08014318 <THREAD_Get_OTCmdRspPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdRspPayloadBuffer(void)
{
 8014318:	b480      	push	{r7}
 801431a:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)((TL_EvtPacket_t *)p_thread_otcmdbuffer)->evtserial.evt.payload;
 801431c:	4b03      	ldr	r3, [pc, #12]	; (801432c <THREAD_Get_OTCmdRspPayloadBuffer+0x14>)
 801431e:	681b      	ldr	r3, [r3, #0]
 8014320:	330b      	adds	r3, #11
}
 8014322:	4618      	mov	r0, r3
 8014324:	46bd      	mov	sp, r7
 8014326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801432a:	4770      	bx	lr
 801432c:	2002758c 	.word	0x2002758c

08014330 <THREAD_Get_NotificationPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_NotificationPayloadBuffer(void)
{
 8014330:	b480      	push	{r7}
 8014332:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)(p_thread_notif_M0_to_M4)->evtserial.evt.payload;
 8014334:	4b03      	ldr	r3, [pc, #12]	; (8014344 <THREAD_Get_NotificationPayloadBuffer+0x14>)
 8014336:	681b      	ldr	r3, [r3, #0]
 8014338:	330b      	adds	r3, #11
}
 801433a:	4618      	mov	r0, r3
 801433c:	46bd      	mov	sp, r7
 801433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014342:	4770      	bx	lr
 8014344:	20027590 	.word	0x20027590

08014348 <Ot_Cmd_Transfer>:
 *
 * @param   None
 * @return  None
 */
void Ot_Cmd_Transfer(void)
{
 8014348:	b580      	push	{r7, lr}
 801434a:	b082      	sub	sp, #8
 801434c:	af00      	add	r7, sp, #0
  /* OpenThread OT command cmdcode range 0x280 .. 0x3DF = 352 */
  p_thread_otcmdbuffer->cmdserial.cmd.cmdcode = 0x280U;
 801434e:	4b0f      	ldr	r3, [pc, #60]	; (801438c <Ot_Cmd_Transfer+0x44>)
 8014350:	681b      	ldr	r3, [r3, #0]
 8014352:	2200      	movs	r2, #0
 8014354:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8014358:	725a      	strb	r2, [r3, #9]
 801435a:	2200      	movs	r2, #0
 801435c:	f042 0202 	orr.w	r2, r2, #2
 8014360:	729a      	strb	r2, [r3, #10]
  /* Size = otCmdBuffer->Size (Number of OT cmd arguments : 1 arg = 32bits so multiply by 4 to get size in bytes)
   * + ID (4 bytes) + Size (4 bytes) */
  uint32_t l_size = ((Thread_OT_Cmd_Request_t*)(p_thread_otcmdbuffer->cmdserial.cmd.payload))->Size * 4U + 8U;
 8014362:	4b0a      	ldr	r3, [pc, #40]	; (801438c <Ot_Cmd_Transfer+0x44>)
 8014364:	681b      	ldr	r3, [r3, #0]
 8014366:	330c      	adds	r3, #12
 8014368:	685b      	ldr	r3, [r3, #4]
 801436a:	3302      	adds	r3, #2
 801436c:	009b      	lsls	r3, r3, #2
 801436e:	607b      	str	r3, [r7, #4]
  p_thread_otcmdbuffer->cmdserial.cmd.plen = l_size;
 8014370:	4b06      	ldr	r3, [pc, #24]	; (801438c <Ot_Cmd_Transfer+0x44>)
 8014372:	681b      	ldr	r3, [r3, #0]
 8014374:	687a      	ldr	r2, [r7, #4]
 8014376:	b2d2      	uxtb	r2, r2
 8014378:	72da      	strb	r2, [r3, #11]

  TL_OT_SendCmd();
 801437a:	f7ff f99b 	bl	80136b4 <TL_OT_SendCmd>

  /* Wait completion of cmd */
  Wait_Getting_Ack_From_M0();
 801437e:	f000 f829 	bl	80143d4 <Wait_Getting_Ack_From_M0>
}
 8014382:	bf00      	nop
 8014384:	3708      	adds	r7, #8
 8014386:	46bd      	mov	sp, r7
 8014388:	bd80      	pop	{r7, pc}
 801438a:	bf00      	nop
 801438c:	2002758c 	.word	0x2002758c

08014390 <TL_OT_CmdEvtReceived>:
 *
 * @param   Otbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_OT_CmdEvtReceived( TL_EvtPacket_t * Otbuffer )
{
 8014390:	b580      	push	{r7, lr}
 8014392:	b082      	sub	sp, #8
 8014394:	af00      	add	r7, sp, #0
 8014396:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Otbuffer);

  Receive_Ack_From_M0();
 8014398:	f000 f82e 	bl	80143f8 <Receive_Ack_From_M0>
}
 801439c:	bf00      	nop
 801439e:	3708      	adds	r7, #8
 80143a0:	46bd      	mov	sp, r7
 80143a2:	bd80      	pop	{r7, pc}

080143a4 <TL_THREAD_NotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_NotReceived( TL_EvtPacket_t * Notbuffer )
{
 80143a4:	b580      	push	{r7, lr}
 80143a6:	b082      	sub	sp, #8
 80143a8:	af00      	add	r7, sp, #0
 80143aa:	6078      	str	r0, [r7, #4]
  p_thread_notif_M0_to_M4 = Notbuffer;
 80143ac:	4a04      	ldr	r2, [pc, #16]	; (80143c0 <TL_THREAD_NotReceived+0x1c>)
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	6013      	str	r3, [r2, #0]

  Receive_Notification_From_M0();
 80143b2:	f000 f82d 	bl	8014410 <Receive_Notification_From_M0>
}
 80143b6:	bf00      	nop
 80143b8:	3708      	adds	r7, #8
 80143ba:	46bd      	mov	sp, r7
 80143bc:	bd80      	pop	{r7, pc}
 80143be:	bf00      	nop
 80143c0:	20027590 	.word	0x20027590

080143c4 <Pre_OtCmdProcessing>:
  *         pending before sending a new ot command.
  * @param  None
  * @retval None
  */
void Pre_OtCmdProcessing(void)
{
 80143c4:	b480      	push	{r7}
 80143c6:	af00      	add	r7, sp, #0

}
 80143c8:	bf00      	nop
 80143ca:	46bd      	mov	sp, r7
 80143cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143d0:	4770      	bx	lr
	...

080143d4 <Wait_Getting_Ack_From_M0>:
  *
  * @param  None
  * @retval None
  */
static void Wait_Getting_Ack_From_M0(void)
{
 80143d4:	b480      	push	{r7}
 80143d6:	af00      	add	r7, sp, #0
  while (FlagReceiveAckFromM0 == 0)
 80143d8:	bf00      	nop
 80143da:	4b06      	ldr	r3, [pc, #24]	; (80143f4 <Wait_Getting_Ack_From_M0+0x20>)
 80143dc:	681b      	ldr	r3, [r3, #0]
 80143de:	2b00      	cmp	r3, #0
 80143e0:	d0fb      	beq.n	80143da <Wait_Getting_Ack_From_M0+0x6>
  {
  }
  FlagReceiveAckFromM0 = 0;
 80143e2:	4b04      	ldr	r3, [pc, #16]	; (80143f4 <Wait_Getting_Ack_From_M0+0x20>)
 80143e4:	2200      	movs	r2, #0
 80143e6:	601a      	str	r2, [r3, #0]
}
 80143e8:	bf00      	nop
 80143ea:	46bd      	mov	sp, r7
 80143ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143f0:	4770      	bx	lr
 80143f2:	bf00      	nop
 80143f4:	20027598 	.word	0x20027598

080143f8 <Receive_Ack_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Ack_From_M0(void)
{
 80143f8:	b480      	push	{r7}
 80143fa:	af00      	add	r7, sp, #0
  FlagReceiveAckFromM0 = 1;
 80143fc:	4b03      	ldr	r3, [pc, #12]	; (801440c <Receive_Ack_From_M0+0x14>)
 80143fe:	2201      	movs	r2, #1
 8014400:	601a      	str	r2, [r3, #0]
}
 8014402:	bf00      	nop
 8014404:	46bd      	mov	sp, r7
 8014406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801440a:	4770      	bx	lr
 801440c:	20027598 	.word	0x20027598

08014410 <Receive_Notification_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Notification_From_M0(void)
{
 8014410:	b580      	push	{r7, lr}
 8014412:	af00      	add	r7, sp, #0
  CptReceiveMsgFromM0++;
 8014414:	4b06      	ldr	r3, [pc, #24]	; (8014430 <Receive_Notification_From_M0+0x20>)
 8014416:	681b      	ldr	r3, [r3, #0]
 8014418:	3301      	adds	r3, #1
 801441a:	4a05      	ldr	r2, [pc, #20]	; (8014430 <Receive_Notification_From_M0+0x20>)
 801441c:	6013      	str	r3, [r2, #0]
  osThreadFlagsSet(OsTaskMsgM0ToM4Id,1);
 801441e:	4b05      	ldr	r3, [pc, #20]	; (8014434 <Receive_Notification_From_M0+0x24>)
 8014420:	681b      	ldr	r3, [r3, #0]
 8014422:	2101      	movs	r1, #1
 8014424:	4618      	mov	r0, r3
 8014426:	f7f9 f9c7 	bl	800d7b8 <osThreadFlagsSet>
}
 801442a:	bf00      	nop
 801442c:	bd80      	pop	{r7, pc}
 801442e:	bf00      	nop
 8014430:	20027594 	.word	0x20027594
 8014434:	2002759c 	.word	0x2002759c

08014438 <Send_CLI_To_M0>:
 * @brief Process sends receive CLI command to M0.
 * @param  None
 * @retval None
 */
static void Send_CLI_To_M0(void)
{
 8014438:	b580      	push	{r7, lr}
 801443a:	af00      	add	r7, sp, #0
  memset(ThreadCliCmdBuffer.cmdserial.cmd.payload, 0x0U, 255U);
 801443c:	22ff      	movs	r2, #255	; 0xff
 801443e:	2100      	movs	r1, #0
 8014440:	4812      	ldr	r0, [pc, #72]	; (801448c <Send_CLI_To_M0+0x54>)
 8014442:	f000 fe9e 	bl	8015182 <memset>
  memcpy(ThreadCliCmdBuffer.cmdserial.cmd.payload, CommandString, indexReceiveChar);
 8014446:	4b12      	ldr	r3, [pc, #72]	; (8014490 <Send_CLI_To_M0+0x58>)
 8014448:	881b      	ldrh	r3, [r3, #0]
 801444a:	b29b      	uxth	r3, r3
 801444c:	461a      	mov	r2, r3
 801444e:	4911      	ldr	r1, [pc, #68]	; (8014494 <Send_CLI_To_M0+0x5c>)
 8014450:	480e      	ldr	r0, [pc, #56]	; (801448c <Send_CLI_To_M0+0x54>)
 8014452:	f000 fe8b 	bl	801516c <memcpy>
  ThreadCliCmdBuffer.cmdserial.cmd.plen = indexReceiveChar;
 8014456:	4b0e      	ldr	r3, [pc, #56]	; (8014490 <Send_CLI_To_M0+0x58>)
 8014458:	881b      	ldrh	r3, [r3, #0]
 801445a:	b29b      	uxth	r3, r3
 801445c:	b2da      	uxtb	r2, r3
 801445e:	4b0e      	ldr	r3, [pc, #56]	; (8014498 <Send_CLI_To_M0+0x60>)
 8014460:	72da      	strb	r2, [r3, #11]
  ThreadCliCmdBuffer.cmdserial.cmd.cmdcode = 0x0;
 8014462:	4b0d      	ldr	r3, [pc, #52]	; (8014498 <Send_CLI_To_M0+0x60>)
 8014464:	2200      	movs	r2, #0
 8014466:	725a      	strb	r2, [r3, #9]
 8014468:	2200      	movs	r2, #0
 801446a:	729a      	strb	r2, [r3, #10]

  /* Clear receive buffer, character counter and command complete */
  CptReceiveCmdFromUser = 0;
 801446c:	4b0b      	ldr	r3, [pc, #44]	; (801449c <Send_CLI_To_M0+0x64>)
 801446e:	2200      	movs	r2, #0
 8014470:	801a      	strh	r2, [r3, #0]
  indexReceiveChar = 0;
 8014472:	4b07      	ldr	r3, [pc, #28]	; (8014490 <Send_CLI_To_M0+0x58>)
 8014474:	2200      	movs	r2, #0
 8014476:	801a      	strh	r2, [r3, #0]
  memset(CommandString, 0, C_SIZE_CMD_STRING);
 8014478:	f44f 7280 	mov.w	r2, #256	; 0x100
 801447c:	2100      	movs	r1, #0
 801447e:	4805      	ldr	r0, [pc, #20]	; (8014494 <Send_CLI_To_M0+0x5c>)
 8014480:	f000 fe7f 	bl	8015182 <memset>

  TL_CLI_SendCmd();
 8014484:	f7ff f924 	bl	80136d0 <TL_CLI_SendCmd>
}
 8014488:	bf00      	nop
 801448a:	bd80      	pop	{r7, pc}
 801448c:	20030a5c 	.word	0x20030a5c
 8014490:	20027588 	.word	0x20027588
 8014494:	20027488 	.word	0x20027488
 8014498:	20030a50 	.word	0x20030a50
 801449c:	2002758a 	.word	0x2002758a

080144a0 <Send_CLI_Ack_For_OT>:
 * @brief Send notification for CLI TL Channel.
 * @param  None
 * @retval None
 */
static void Send_CLI_Ack_For_OT(void)
{
 80144a0:	b580      	push	{r7, lr}
 80144a2:	af00      	add	r7, sp, #0

  /* Notify M0 that characters have been sent to UART */
  TL_THREAD_CliSendAck();
 80144a4:	f7ff f930 	bl	8013708 <TL_THREAD_CliSendAck>
}
 80144a8:	bf00      	nop
 80144aa:	bd80      	pop	{r7, pc}

080144ac <APP_THREAD_Init_UART_CLI>:
 * @brief Perform initialization of CLI UART interface.
 * @param  None
 * @retval None
 */
void APP_THREAD_Init_UART_CLI(void)
{
 80144ac:	b580      	push	{r7, lr}
 80144ae:	af00      	add	r7, sp, #0
#if (CFG_FULL_LOW_POWER == 0)
  OsTaskCliId = osThreadNew(APP_THREAD_FreeRTOSSendCLIToM0Task, NULL,&ThreadCliProcess_attr);
 80144b0:	4a04      	ldr	r2, [pc, #16]	; (80144c4 <APP_THREAD_Init_UART_CLI+0x18>)
 80144b2:	2100      	movs	r1, #0
 80144b4:	4804      	ldr	r0, [pc, #16]	; (80144c8 <APP_THREAD_Init_UART_CLI+0x1c>)
 80144b6:	f7f9 f8d3 	bl	800d660 <osThreadNew>
 80144ba:	4602      	mov	r2, r0
 80144bc:	4b03      	ldr	r3, [pc, #12]	; (80144cc <APP_THREAD_Init_UART_CLI+0x20>)
 80144be:	601a      	str	r2, [r3, #0]
#else
#if (CFG_FULL_LOW_POWER == 0)
//  HW_UART_Receive_IT(CFG_CLI_UART, aRxBuffer, 1, RxCpltCallback);
#endif /* (CFG_FULL_LOW_POWER == 0) */
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */
}
 80144c0:	bf00      	nop
 80144c2:	bd80      	pop	{r7, pc}
 80144c4:	08016b7c 	.word	0x08016b7c
 80144c8:	08013ce7 	.word	0x08013ce7
 80144cc:	200275a0 	.word	0x200275a0

080144d0 <APP_THREAD_TL_THREAD_INIT>:
 * @brief Perform initialization of TL for THREAD.
 * @param  None
 * @retval None
 */
void APP_THREAD_TL_THREAD_INIT(void)
{
 80144d0:	b580      	push	{r7, lr}
 80144d2:	af00      	add	r7, sp, #0
  ThreadConfigBuffer.p_ThreadOtCmdRspBuffer = (uint8_t*)&ThreadOtCmdBuffer;
 80144d4:	4b06      	ldr	r3, [pc, #24]	; (80144f0 <APP_THREAD_TL_THREAD_INIT+0x20>)
 80144d6:	4a07      	ldr	r2, [pc, #28]	; (80144f4 <APP_THREAD_TL_THREAD_INIT+0x24>)
 80144d8:	601a      	str	r2, [r3, #0]
  ThreadConfigBuffer.p_ThreadNotAckBuffer = (uint8_t*)ThreadNotifRspEvtBuffer;
 80144da:	4b05      	ldr	r3, [pc, #20]	; (80144f0 <APP_THREAD_TL_THREAD_INIT+0x20>)
 80144dc:	4a06      	ldr	r2, [pc, #24]	; (80144f8 <APP_THREAD_TL_THREAD_INIT+0x28>)
 80144de:	609a      	str	r2, [r3, #8]
  ThreadConfigBuffer.p_ThreadCliRspBuffer = (uint8_t*)&ThreadCliCmdBuffer;
 80144e0:	4b03      	ldr	r3, [pc, #12]	; (80144f0 <APP_THREAD_TL_THREAD_INIT+0x20>)
 80144e2:	4a06      	ldr	r2, [pc, #24]	; (80144fc <APP_THREAD_TL_THREAD_INIT+0x2c>)
 80144e4:	605a      	str	r2, [r3, #4]

  TL_THREAD_Init( &ThreadConfigBuffer );
 80144e6:	4802      	ldr	r0, [pc, #8]	; (80144f0 <APP_THREAD_TL_THREAD_INIT+0x20>)
 80144e8:	f7ff f8c8 	bl	801367c <TL_THREAD_Init>
}
 80144ec:	bf00      	nop
 80144ee:	bd80      	pop	{r7, pc}
 80144f0:	200300b8 	.word	0x200300b8
 80144f4:	20030838 	.word	0x20030838
 80144f8:	20030944 	.word	0x20030944
 80144fc:	20030a50 	.word	0x20030a50

08014500 <TL_THREAD_CliNotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_CliNotReceived( TL_EvtPacket_t * Notbuffer )
{
 8014500:	b580      	push	{r7, lr}
 8014502:	b084      	sub	sp, #16
 8014504:	af00      	add	r7, sp, #0
 8014506:	6078      	str	r0, [r7, #4]
  TL_CmdPacket_t* l_CliBuffer = (TL_CmdPacket_t*)Notbuffer;
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	60fb      	str	r3, [r7, #12]
  uint8_t l_size = l_CliBuffer->cmdserial.cmd.plen;
 801450c:	68fb      	ldr	r3, [r7, #12]
 801450e:	7adb      	ldrb	r3, [r3, #11]
 8014510:	72fb      	strb	r3, [r7, #11]

  /* WORKAROUND: if string to output is "> " then respond directly to M0 and do not output it */
  if (strcmp((const char *)l_CliBuffer->cmdserial.cmd.payload, "> ") != 0)
 8014512:	68fb      	ldr	r3, [r7, #12]
 8014514:	330c      	adds	r3, #12
 8014516:	4906      	ldr	r1, [pc, #24]	; (8014530 <TL_THREAD_CliNotReceived+0x30>)
 8014518:	4618      	mov	r0, r3
 801451a:	f7eb fe31 	bl	8000180 <strcmp>
 801451e:	4603      	mov	r3, r0
 8014520:	2b00      	cmp	r3, #0
 8014522:	d101      	bne.n	8014528 <TL_THREAD_CliNotReceived+0x28>
//    HW_UART_Transmit_IT(CFG_CLI_UART, l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
#endif /*USAGE_OF_VCP */
  }
  else
  {
    Send_CLI_Ack_For_OT();
 8014524:	f7ff ffbc 	bl	80144a0 <Send_CLI_Ack_For_OT>
  }
}
 8014528:	bf00      	nop
 801452a:	3710      	adds	r7, #16
 801452c:	46bd      	mov	sp, r7
 801452e:	bd80      	pop	{r7, pc}
 8014530:	0801677c 	.word	0x0801677c

08014534 <APP_THREAD_ProcessMsgM0ToM4>:
 * @brief Process the messages coming from the M0.
 * @param  None
 * @retval None
 */
void APP_THREAD_ProcessMsgM0ToM4(void)
{
 8014534:	b580      	push	{r7, lr}
 8014536:	af00      	add	r7, sp, #0
  if (CptReceiveMsgFromM0 != 0)
 8014538:	4b09      	ldr	r3, [pc, #36]	; (8014560 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 801453a:	681b      	ldr	r3, [r3, #0]
 801453c:	2b00      	cmp	r3, #0
 801453e:	d00d      	beq.n	801455c <APP_THREAD_ProcessMsgM0ToM4+0x28>
  {
    /* If CptReceiveMsgFromM0 is > 1. it means that we did not serve all the events from the radio */
    if (CptReceiveMsgFromM0 > 1U)
 8014540:	4b07      	ldr	r3, [pc, #28]	; (8014560 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8014542:	681b      	ldr	r3, [r3, #0]
 8014544:	2b01      	cmp	r3, #1
 8014546:	d904      	bls.n	8014552 <APP_THREAD_ProcessMsgM0ToM4+0x1e>
    {
      APP_THREAD_Error(ERR_REC_MULTI_MSG_FROM_M0, 0);
 8014548:	2100      	movs	r1, #0
 801454a:	2000      	movs	r0, #0
 801454c:	f7ff f9d4 	bl	80138f8 <APP_THREAD_Error>
 8014550:	e001      	b.n	8014556 <APP_THREAD_ProcessMsgM0ToM4+0x22>
    }
    else
    {
      OpenThread_CallBack_Processing();
 8014552:	f7fe f9eb 	bl	801292c <OpenThread_CallBack_Processing>
    }
    /* Reset counter */
    CptReceiveMsgFromM0 = 0;
 8014556:	4b02      	ldr	r3, [pc, #8]	; (8014560 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8014558:	2200      	movs	r2, #0
 801455a:	601a      	str	r2, [r3, #0]
  }
}
 801455c:	bf00      	nop
 801455e:	bd80      	pop	{r7, pc}
 8014560:	20027594 	.word	0x20027594

08014564 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8014564:	b480      	push	{r7}
 8014566:	b083      	sub	sp, #12
 8014568:	af00      	add	r7, sp, #0
 801456a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 801456c:	4b06      	ldr	r3, [pc, #24]	; (8014588 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 801456e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8014572:	4905      	ldr	r1, [pc, #20]	; (8014588 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	4313      	orrs	r3, r2
 8014578:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 801457c:	bf00      	nop
 801457e:	370c      	adds	r7, #12
 8014580:	46bd      	mov	sp, r7
 8014582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014586:	4770      	bx	lr
 8014588:	58000800 	.word	0x58000800

0801458c <LL_EXTI_EnableRisingTrig_32_63>:
{
 801458c:	b480      	push	{r7}
 801458e:	b083      	sub	sp, #12
 8014590:	af00      	add	r7, sp, #0
 8014592:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8014594:	4b05      	ldr	r3, [pc, #20]	; (80145ac <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8014596:	6a1a      	ldr	r2, [r3, #32]
 8014598:	4904      	ldr	r1, [pc, #16]	; (80145ac <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	4313      	orrs	r3, r2
 801459e:	620b      	str	r3, [r1, #32]
}
 80145a0:	bf00      	nop
 80145a2:	370c      	adds	r7, #12
 80145a4:	46bd      	mov	sp, r7
 80145a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145aa:	4770      	bx	lr
 80145ac:	58000800 	.word	0x58000800

080145b0 <LL_PWR_EnableBootC2>:
  * @brief  Boot CPU2 after reset or wakeup from stop or standby modes
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 80145b0:	b480      	push	{r7}
 80145b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 80145b4:	4b05      	ldr	r3, [pc, #20]	; (80145cc <LL_PWR_EnableBootC2+0x1c>)
 80145b6:	68db      	ldr	r3, [r3, #12]
 80145b8:	4a04      	ldr	r2, [pc, #16]	; (80145cc <LL_PWR_EnableBootC2+0x1c>)
 80145ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80145be:	60d3      	str	r3, [r2, #12]
}
 80145c0:	bf00      	nop
 80145c2:	46bd      	mov	sp, r7
 80145c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145c8:	4770      	bx	lr
 80145ca:	bf00      	nop
 80145cc:	58000400 	.word	0x58000400

080145d0 <LL_AHB3_GRP1_EnableClock>:
{
 80145d0:	b480      	push	{r7}
 80145d2:	b085      	sub	sp, #20
 80145d4:	af00      	add	r7, sp, #0
 80145d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80145d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80145dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80145de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	4313      	orrs	r3, r2
 80145e6:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80145e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80145ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	4013      	ands	r3, r2
 80145f2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80145f4:	68fb      	ldr	r3, [r7, #12]
}
 80145f6:	bf00      	nop
 80145f8:	3714      	adds	r7, #20
 80145fa:	46bd      	mov	sp, r7
 80145fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014600:	4770      	bx	lr

08014602 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8014602:	b480      	push	{r7}
 8014604:	b083      	sub	sp, #12
 8014606:	af00      	add	r7, sp, #0
 8014608:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	681b      	ldr	r3, [r3, #0]
 801460e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	601a      	str	r2, [r3, #0]
}
 8014616:	bf00      	nop
 8014618:	370c      	adds	r7, #12
 801461a:	46bd      	mov	sp, r7
 801461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014620:	4770      	bx	lr

08014622 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8014622:	b480      	push	{r7}
 8014624:	b083      	sub	sp, #12
 8014626:	af00      	add	r7, sp, #0
 8014628:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	681b      	ldr	r3, [r3, #0]
 801462e:	f043 0201 	orr.w	r2, r3, #1
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	601a      	str	r2, [r3, #0]
}
 8014636:	bf00      	nop
 8014638:	370c      	adds	r7, #12
 801463a:	46bd      	mov	sp, r7
 801463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014640:	4770      	bx	lr

08014642 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8014642:	b480      	push	{r7}
 8014644:	b083      	sub	sp, #12
 8014646:	af00      	add	r7, sp, #0
 8014648:	6078      	str	r0, [r7, #4]
 801464a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	685a      	ldr	r2, [r3, #4]
 8014650:	683b      	ldr	r3, [r7, #0]
 8014652:	041b      	lsls	r3, r3, #16
 8014654:	43db      	mvns	r3, r3
 8014656:	401a      	ands	r2, r3
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	605a      	str	r2, [r3, #4]
}
 801465c:	bf00      	nop
 801465e:	370c      	adds	r7, #12
 8014660:	46bd      	mov	sp, r7
 8014662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014666:	4770      	bx	lr

08014668 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8014668:	b480      	push	{r7}
 801466a:	b083      	sub	sp, #12
 801466c:	af00      	add	r7, sp, #0
 801466e:	6078      	str	r0, [r7, #4]
 8014670:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	685a      	ldr	r2, [r3, #4]
 8014676:	683b      	ldr	r3, [r7, #0]
 8014678:	041b      	lsls	r3, r3, #16
 801467a:	431a      	orrs	r2, r3
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	605a      	str	r2, [r3, #4]
}
 8014680:	bf00      	nop
 8014682:	370c      	adds	r7, #12
 8014684:	46bd      	mov	sp, r7
 8014686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801468a:	4770      	bx	lr

0801468c <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 801468c:	b480      	push	{r7}
 801468e:	b083      	sub	sp, #12
 8014690:	af00      	add	r7, sp, #0
 8014692:	6078      	str	r0, [r7, #4]
 8014694:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	685a      	ldr	r2, [r3, #4]
 801469a:	683b      	ldr	r3, [r7, #0]
 801469c:	43db      	mvns	r3, r3
 801469e:	401a      	ands	r2, r3
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	605a      	str	r2, [r3, #4]
}
 80146a4:	bf00      	nop
 80146a6:	370c      	adds	r7, #12
 80146a8:	46bd      	mov	sp, r7
 80146aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146ae:	4770      	bx	lr

080146b0 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80146b0:	b480      	push	{r7}
 80146b2:	b083      	sub	sp, #12
 80146b4:	af00      	add	r7, sp, #0
 80146b6:	6078      	str	r0, [r7, #4]
 80146b8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	685a      	ldr	r2, [r3, #4]
 80146be:	683b      	ldr	r3, [r7, #0]
 80146c0:	431a      	orrs	r2, r3
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	605a      	str	r2, [r3, #4]
}
 80146c6:	bf00      	nop
 80146c8:	370c      	adds	r7, #12
 80146ca:	46bd      	mov	sp, r7
 80146cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146d0:	4770      	bx	lr

080146d2 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80146d2:	b480      	push	{r7}
 80146d4:	b083      	sub	sp, #12
 80146d6:	af00      	add	r7, sp, #0
 80146d8:	6078      	str	r0, [r7, #4]
 80146da:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	683a      	ldr	r2, [r7, #0]
 80146e0:	609a      	str	r2, [r3, #8]
}
 80146e2:	bf00      	nop
 80146e4:	370c      	adds	r7, #12
 80146e6:	46bd      	mov	sp, r7
 80146e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146ec:	4770      	bx	lr

080146ee <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80146ee:	b480      	push	{r7}
 80146f0:	b083      	sub	sp, #12
 80146f2:	af00      	add	r7, sp, #0
 80146f4:	6078      	str	r0, [r7, #4]
 80146f6:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80146f8:	683b      	ldr	r3, [r7, #0]
 80146fa:	041a      	lsls	r2, r3, #16
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	609a      	str	r2, [r3, #8]
}
 8014700:	bf00      	nop
 8014702:	370c      	adds	r7, #12
 8014704:	46bd      	mov	sp, r7
 8014706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801470a:	4770      	bx	lr

0801470c <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 801470c:	b480      	push	{r7}
 801470e:	b083      	sub	sp, #12
 8014710:	af00      	add	r7, sp, #0
 8014712:	6078      	str	r0, [r7, #4]
 8014714:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	68da      	ldr	r2, [r3, #12]
 801471a:	683b      	ldr	r3, [r7, #0]
 801471c:	4013      	ands	r3, r2
 801471e:	683a      	ldr	r2, [r7, #0]
 8014720:	429a      	cmp	r2, r3
 8014722:	d101      	bne.n	8014728 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8014724:	2301      	movs	r3, #1
 8014726:	e000      	b.n	801472a <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8014728:	2300      	movs	r3, #0
}
 801472a:	4618      	mov	r0, r3
 801472c:	370c      	adds	r7, #12
 801472e:	46bd      	mov	sp, r7
 8014730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014734:	4770      	bx	lr

08014736 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8014736:	b480      	push	{r7}
 8014738:	b083      	sub	sp, #12
 801473a:	af00      	add	r7, sp, #0
 801473c:	6078      	str	r0, [r7, #4]
 801473e:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	69da      	ldr	r2, [r3, #28]
 8014744:	683b      	ldr	r3, [r7, #0]
 8014746:	4013      	ands	r3, r2
 8014748:	683a      	ldr	r2, [r7, #0]
 801474a:	429a      	cmp	r2, r3
 801474c:	d101      	bne.n	8014752 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 801474e:	2301      	movs	r3, #1
 8014750:	e000      	b.n	8014754 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8014752:	2300      	movs	r3, #0
}
 8014754:	4618      	mov	r0, r3
 8014756:	370c      	adds	r7, #12
 8014758:	46bd      	mov	sp, r7
 801475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801475e:	4770      	bx	lr

08014760 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8014760:	b580      	push	{r7, lr}
 8014762:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8014764:	2102      	movs	r1, #2
 8014766:	482a      	ldr	r0, [pc, #168]	; (8014810 <HW_IPCC_Rx_Handler+0xb0>)
 8014768:	f7ff ffe5 	bl	8014736 <LL_C2_IPCC_IsActiveFlag_CHx>
 801476c:	4603      	mov	r3, r0
 801476e:	2b00      	cmp	r3, #0
 8014770:	d009      	beq.n	8014786 <HW_IPCC_Rx_Handler+0x26>
 8014772:	4b27      	ldr	r3, [pc, #156]	; (8014810 <HW_IPCC_Rx_Handler+0xb0>)
 8014774:	685b      	ldr	r3, [r3, #4]
 8014776:	43db      	mvns	r3, r3
 8014778:	f003 0302 	and.w	r3, r3, #2
 801477c:	2b00      	cmp	r3, #0
 801477e:	d002      	beq.n	8014786 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8014780:	f000 f906 	bl	8014990 <HW_IPCC_SYS_EvtHandler>
 8014784:	e041      	b.n	801480a <HW_IPCC_Rx_Handler+0xaa>
  {
    HW_IPCC_MAC_802_15_4_NotEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL ))
 8014786:	2104      	movs	r1, #4
 8014788:	4821      	ldr	r0, [pc, #132]	; (8014810 <HW_IPCC_Rx_Handler+0xb0>)
 801478a:	f7ff ffd4 	bl	8014736 <LL_C2_IPCC_IsActiveFlag_CHx>
 801478e:	4603      	mov	r3, r0
 8014790:	2b00      	cmp	r3, #0
 8014792:	d009      	beq.n	80147a8 <HW_IPCC_Rx_Handler+0x48>
 8014794:	4b1e      	ldr	r3, [pc, #120]	; (8014810 <HW_IPCC_Rx_Handler+0xb0>)
 8014796:	685b      	ldr	r3, [r3, #4]
 8014798:	43db      	mvns	r3, r3
 801479a:	f003 0304 	and.w	r3, r3, #4
 801479e:	2b00      	cmp	r3, #0
 80147a0:	d002      	beq.n	80147a8 <HW_IPCC_Rx_Handler+0x48>
  {
    HW_IPCC_THREAD_NotEvtHandler();
 80147a2:	f000 f94f 	bl	8014a44 <HW_IPCC_THREAD_NotEvtHandler>
 80147a6:	e030      	b.n	801480a <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
 80147a8:	2110      	movs	r1, #16
 80147aa:	4819      	ldr	r0, [pc, #100]	; (8014810 <HW_IPCC_Rx_Handler+0xb0>)
 80147ac:	f7ff ffc3 	bl	8014736 <LL_C2_IPCC_IsActiveFlag_CHx>
 80147b0:	4603      	mov	r3, r0
 80147b2:	2b00      	cmp	r3, #0
 80147b4:	d009      	beq.n	80147ca <HW_IPCC_Rx_Handler+0x6a>
 80147b6:	4b16      	ldr	r3, [pc, #88]	; (8014810 <HW_IPCC_Rx_Handler+0xb0>)
 80147b8:	685b      	ldr	r3, [r3, #4]
 80147ba:	43db      	mvns	r3, r3
 80147bc:	f003 0310 	and.w	r3, r3, #16
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	d002      	beq.n	80147ca <HW_IPCC_Rx_Handler+0x6a>
  {
    HW_IPCC_THREAD_CliNotEvtHandler();
 80147c4:	f000 f94a 	bl	8014a5c <HW_IPCC_THREAD_CliNotEvtHandler>
 80147c8:	e01f      	b.n	801480a <HW_IPCC_Rx_Handler+0xaa>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CliNotifEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 80147ca:	2101      	movs	r1, #1
 80147cc:	4810      	ldr	r0, [pc, #64]	; (8014810 <HW_IPCC_Rx_Handler+0xb0>)
 80147ce:	f7ff ffb2 	bl	8014736 <LL_C2_IPCC_IsActiveFlag_CHx>
 80147d2:	4603      	mov	r3, r0
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	d008      	beq.n	80147ea <HW_IPCC_Rx_Handler+0x8a>
 80147d8:	4b0d      	ldr	r3, [pc, #52]	; (8014810 <HW_IPCC_Rx_Handler+0xb0>)
 80147da:	685b      	ldr	r3, [r3, #4]
 80147dc:	f003 0301 	and.w	r3, r3, #1
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	d102      	bne.n	80147ea <HW_IPCC_Rx_Handler+0x8a>
  {
    HW_IPCC_BLE_EvtHandler();
 80147e4:	f000 f898 	bl	8014918 <HW_IPCC_BLE_EvtHandler>
 80147e8:	e00f      	b.n	801480a <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 80147ea:	2108      	movs	r1, #8
 80147ec:	4808      	ldr	r0, [pc, #32]	; (8014810 <HW_IPCC_Rx_Handler+0xb0>)
 80147ee:	f7ff ffa2 	bl	8014736 <LL_C2_IPCC_IsActiveFlag_CHx>
 80147f2:	4603      	mov	r3, r0
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	d009      	beq.n	801480c <HW_IPCC_Rx_Handler+0xac>
 80147f8:	4b05      	ldr	r3, [pc, #20]	; (8014810 <HW_IPCC_Rx_Handler+0xb0>)
 80147fa:	685b      	ldr	r3, [r3, #4]
 80147fc:	43db      	mvns	r3, r3
 80147fe:	f003 0308 	and.w	r3, r3, #8
 8014802:	2b00      	cmp	r3, #0
 8014804:	d002      	beq.n	801480c <HW_IPCC_Rx_Handler+0xac>
  {
    HW_IPCC_TRACES_EvtHandler();
 8014806:	f000 f975 	bl	8014af4 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 801480a:	bf00      	nop
 801480c:	bf00      	nop
}
 801480e:	bd80      	pop	{r7, pc}
 8014810:	58000c00 	.word	0x58000c00

08014814 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8014814:	b580      	push	{r7, lr}
 8014816:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8014818:	2102      	movs	r1, #2
 801481a:	482b      	ldr	r0, [pc, #172]	; (80148c8 <HW_IPCC_Tx_Handler+0xb4>)
 801481c:	f7ff ff76 	bl	801470c <LL_C1_IPCC_IsActiveFlag_CHx>
 8014820:	4603      	mov	r3, r0
 8014822:	2b00      	cmp	r3, #0
 8014824:	d109      	bne.n	801483a <HW_IPCC_Tx_Handler+0x26>
 8014826:	4b28      	ldr	r3, [pc, #160]	; (80148c8 <HW_IPCC_Tx_Handler+0xb4>)
 8014828:	685b      	ldr	r3, [r3, #4]
 801482a:	43db      	mvns	r3, r3
 801482c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014830:	2b00      	cmp	r3, #0
 8014832:	d002      	beq.n	801483a <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8014834:	f000 f8a0 	bl	8014978 <HW_IPCC_SYS_CmdEvtHandler>
 8014838:	e042      	b.n	80148c0 <HW_IPCC_Tx_Handler+0xac>
  {
    HW_IPCC_MAC_802_15_4_CmdEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
 801483a:	2104      	movs	r1, #4
 801483c:	4822      	ldr	r0, [pc, #136]	; (80148c8 <HW_IPCC_Tx_Handler+0xb4>)
 801483e:	f7ff ff65 	bl	801470c <LL_C1_IPCC_IsActiveFlag_CHx>
 8014842:	4603      	mov	r3, r0
 8014844:	2b00      	cmp	r3, #0
 8014846:	d109      	bne.n	801485c <HW_IPCC_Tx_Handler+0x48>
 8014848:	4b1f      	ldr	r3, [pc, #124]	; (80148c8 <HW_IPCC_Tx_Handler+0xb4>)
 801484a:	685b      	ldr	r3, [r3, #4]
 801484c:	43db      	mvns	r3, r3
 801484e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8014852:	2b00      	cmp	r3, #0
 8014854:	d002      	beq.n	801485c <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_OT_CmdEvtHandler();
 8014856:	f000 f8e9 	bl	8014a2c <HW_IPCC_OT_CmdEvtHandler>
 801485a:	e031      	b.n	80148c0 <HW_IPCC_Tx_Handler+0xac>
  if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 801485c:	2102      	movs	r1, #2
 801485e:	481a      	ldr	r0, [pc, #104]	; (80148c8 <HW_IPCC_Tx_Handler+0xb4>)
 8014860:	f7ff ff54 	bl	801470c <LL_C1_IPCC_IsActiveFlag_CHx>
 8014864:	4603      	mov	r3, r0
 8014866:	2b00      	cmp	r3, #0
 8014868:	d109      	bne.n	801487e <HW_IPCC_Tx_Handler+0x6a>
 801486a:	4b17      	ldr	r3, [pc, #92]	; (80148c8 <HW_IPCC_Tx_Handler+0xb4>)
 801486c:	685b      	ldr	r3, [r3, #4]
 801486e:	43db      	mvns	r3, r3
 8014870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014874:	2b00      	cmp	r3, #0
 8014876:	d002      	beq.n	801487e <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8014878:	f000 f87e 	bl	8014978 <HW_IPCC_SYS_CmdEvtHandler>
 801487c:	e020      	b.n	80148c0 <HW_IPCC_Tx_Handler+0xac>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 801487e:	2108      	movs	r1, #8
 8014880:	4811      	ldr	r0, [pc, #68]	; (80148c8 <HW_IPCC_Tx_Handler+0xb4>)
 8014882:	f7ff ff43 	bl	801470c <LL_C1_IPCC_IsActiveFlag_CHx>
 8014886:	4603      	mov	r3, r0
 8014888:	2b00      	cmp	r3, #0
 801488a:	d109      	bne.n	80148a0 <HW_IPCC_Tx_Handler+0x8c>
 801488c:	4b0e      	ldr	r3, [pc, #56]	; (80148c8 <HW_IPCC_Tx_Handler+0xb4>)
 801488e:	685b      	ldr	r3, [r3, #4]
 8014890:	43db      	mvns	r3, r3
 8014892:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8014896:	2b00      	cmp	r3, #0
 8014898:	d002      	beq.n	80148a0 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_MM_FreeBufHandler();
 801489a:	f000 f90d 	bl	8014ab8 <HW_IPCC_MM_FreeBufHandler>
 801489e:	e00f      	b.n	80148c0 <HW_IPCC_Tx_Handler+0xac>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 80148a0:	2120      	movs	r1, #32
 80148a2:	4809      	ldr	r0, [pc, #36]	; (80148c8 <HW_IPCC_Tx_Handler+0xb4>)
 80148a4:	f7ff ff32 	bl	801470c <LL_C1_IPCC_IsActiveFlag_CHx>
 80148a8:	4603      	mov	r3, r0
 80148aa:	2b00      	cmp	r3, #0
 80148ac:	d109      	bne.n	80148c2 <HW_IPCC_Tx_Handler+0xae>
 80148ae:	4b06      	ldr	r3, [pc, #24]	; (80148c8 <HW_IPCC_Tx_Handler+0xb4>)
 80148b0:	685b      	ldr	r3, [r3, #4]
 80148b2:	43db      	mvns	r3, r3
 80148b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80148b8:	2b00      	cmp	r3, #0
 80148ba:	d002      	beq.n	80148c2 <HW_IPCC_Tx_Handler+0xae>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 80148bc:	f000 f838 	bl	8014930 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 80148c0:	bf00      	nop
 80148c2:	bf00      	nop
}
 80148c4:	bd80      	pop	{r7, pc}
 80148c6:	bf00      	nop
 80148c8:	58000c00 	.word	0x58000c00

080148cc <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 80148cc:	b580      	push	{r7, lr}
 80148ce:	af00      	add	r7, sp, #0
  /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 80148d0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80148d4:	f7ff fe46 	bl	8014564 <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 80148d8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80148dc:	f7ff fe56 	bl	801458c <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 80148e0:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 80148e2:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 80148e4:	f7ff fe64 	bl	80145b0 <LL_PWR_EnableBootC2>

  return;
 80148e8:	bf00      	nop
}
 80148ea:	bd80      	pop	{r7, pc}

080148ec <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 80148ec:	b580      	push	{r7, lr}
 80148ee:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 80148f0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80148f4:	f7ff fe6c 	bl	80145d0 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 80148f8:	4806      	ldr	r0, [pc, #24]	; (8014914 <HW_IPCC_Init+0x28>)
 80148fa:	f7ff fe92 	bl	8014622 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 80148fe:	4805      	ldr	r0, [pc, #20]	; (8014914 <HW_IPCC_Init+0x28>)
 8014900:	f7ff fe7f 	bl	8014602 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8014904:	202c      	movs	r0, #44	; 0x2c
 8014906:	f7f3 f810 	bl	800792a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 801490a:	202d      	movs	r0, #45	; 0x2d
 801490c:	f7f3 f80d 	bl	800792a <HAL_NVIC_EnableIRQ>

  return;
 8014910:	bf00      	nop
}
 8014912:	bd80      	pop	{r7, pc}
 8014914:	58000c00 	.word	0x58000c00

08014918 <HW_IPCC_BLE_EvtHandler>:

  return;
}

static void HW_IPCC_BLE_EvtHandler( void )
{
 8014918:	b580      	push	{r7, lr}
 801491a:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 801491c:	f7fe fe1e 	bl	801355c <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8014920:	2101      	movs	r1, #1
 8014922:	4802      	ldr	r0, [pc, #8]	; (801492c <HW_IPCC_BLE_EvtHandler+0x14>)
 8014924:	f7ff fed5 	bl	80146d2 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8014928:	bf00      	nop
}
 801492a:	bd80      	pop	{r7, pc}
 801492c:	58000c00 	.word	0x58000c00

08014930 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8014930:	b580      	push	{r7, lr}
 8014932:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8014934:	2120      	movs	r1, #32
 8014936:	4803      	ldr	r0, [pc, #12]	; (8014944 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8014938:	f7ff fe96 	bl	8014668 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 801493c:	f7fe fe2a 	bl	8013594 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8014940:	bf00      	nop
}
 8014942:	bd80      	pop	{r7, pc}
 8014944:	58000c00 	.word	0x58000c00

08014948 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8014948:	b580      	push	{r7, lr}
 801494a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 801494c:	2102      	movs	r1, #2
 801494e:	4802      	ldr	r0, [pc, #8]	; (8014958 <HW_IPCC_SYS_Init+0x10>)
 8014950:	f7ff fe9c 	bl	801468c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8014954:	bf00      	nop
}
 8014956:	bd80      	pop	{r7, pc}
 8014958:	58000c00 	.word	0x58000c00

0801495c <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 801495c:	b580      	push	{r7, lr}
 801495e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8014960:	2102      	movs	r1, #2
 8014962:	4804      	ldr	r0, [pc, #16]	; (8014974 <HW_IPCC_SYS_SendCmd+0x18>)
 8014964:	f7ff fec3 	bl	80146ee <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8014968:	2102      	movs	r1, #2
 801496a:	4802      	ldr	r0, [pc, #8]	; (8014974 <HW_IPCC_SYS_SendCmd+0x18>)
 801496c:	f7ff fe69 	bl	8014642 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8014970:	bf00      	nop
}
 8014972:	bd80      	pop	{r7, pc}
 8014974:	58000c00 	.word	0x58000c00

08014978 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8014978:	b580      	push	{r7, lr}
 801497a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 801497c:	2102      	movs	r1, #2
 801497e:	4803      	ldr	r0, [pc, #12]	; (801498c <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8014980:	f7ff fe72 	bl	8014668 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8014984:	f7fe fe4e 	bl	8013624 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8014988:	bf00      	nop
}
 801498a:	bd80      	pop	{r7, pc}
 801498c:	58000c00 	.word	0x58000c00

08014990 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8014990:	b580      	push	{r7, lr}
 8014992:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8014994:	f7fe fe56 	bl	8013644 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8014998:	2102      	movs	r1, #2
 801499a:	4802      	ldr	r0, [pc, #8]	; (80149a4 <HW_IPCC_SYS_EvtHandler+0x14>)
 801499c:	f7ff fe99 	bl	80146d2 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80149a0:	bf00      	nop
}
 80149a2:	bd80      	pop	{r7, pc}
 80149a4:	58000c00 	.word	0x58000c00

080149a8 <HW_IPCC_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void HW_IPCC_THREAD_Init( void )
{
 80149a8:	b580      	push	{r7, lr}
 80149aa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 80149ac:	2104      	movs	r1, #4
 80149ae:	4804      	ldr	r0, [pc, #16]	; (80149c0 <HW_IPCC_THREAD_Init+0x18>)
 80149b0:	f7ff fe6c 	bl	801468c <LL_C1_IPCC_EnableReceiveChannel>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 80149b4:	2110      	movs	r1, #16
 80149b6:	4802      	ldr	r0, [pc, #8]	; (80149c0 <HW_IPCC_THREAD_Init+0x18>)
 80149b8:	f7ff fe68 	bl	801468c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80149bc:	bf00      	nop
}
 80149be:	bd80      	pop	{r7, pc}
 80149c0:	58000c00 	.word	0x58000c00

080149c4 <HW_IPCC_OT_SendCmd>:

void HW_IPCC_OT_SendCmd( void )
{
 80149c4:	b580      	push	{r7, lr}
 80149c6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 80149c8:	2104      	movs	r1, #4
 80149ca:	4804      	ldr	r0, [pc, #16]	; (80149dc <HW_IPCC_OT_SendCmd+0x18>)
 80149cc:	f7ff fe8f 	bl	80146ee <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 80149d0:	2104      	movs	r1, #4
 80149d2:	4802      	ldr	r0, [pc, #8]	; (80149dc <HW_IPCC_OT_SendCmd+0x18>)
 80149d4:	f7ff fe35 	bl	8014642 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 80149d8:	bf00      	nop
}
 80149da:	bd80      	pop	{r7, pc}
 80149dc:	58000c00 	.word	0x58000c00

080149e0 <HW_IPCC_CLI_SendCmd>:

void HW_IPCC_CLI_SendCmd( void )
{
 80149e0:	b580      	push	{r7, lr}
 80149e2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_CMD_CHANNEL );
 80149e4:	2110      	movs	r1, #16
 80149e6:	4802      	ldr	r0, [pc, #8]	; (80149f0 <HW_IPCC_CLI_SendCmd+0x10>)
 80149e8:	f7ff fe81 	bl	80146ee <LL_C1_IPCC_SetFlag_CHx>

  return;
 80149ec:	bf00      	nop
}
 80149ee:	bd80      	pop	{r7, pc}
 80149f0:	58000c00 	.word	0x58000c00

080149f4 <HW_IPCC_THREAD_SendAck>:

void HW_IPCC_THREAD_SendAck( void )
{
 80149f4:	b580      	push	{r7, lr}
 80149f6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 80149f8:	2104      	movs	r1, #4
 80149fa:	4804      	ldr	r0, [pc, #16]	; (8014a0c <HW_IPCC_THREAD_SendAck+0x18>)
 80149fc:	f7ff fe69 	bl	80146d2 <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8014a00:	2104      	movs	r1, #4
 8014a02:	4802      	ldr	r0, [pc, #8]	; (8014a0c <HW_IPCC_THREAD_SendAck+0x18>)
 8014a04:	f7ff fe42 	bl	801468c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8014a08:	bf00      	nop
}
 8014a0a:	bd80      	pop	{r7, pc}
 8014a0c:	58000c00 	.word	0x58000c00

08014a10 <HW_IPCC_THREAD_CliSendAck>:

void HW_IPCC_THREAD_CliSendAck( void )
{
 8014a10:	b580      	push	{r7, lr}
 8014a12:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8014a14:	2110      	movs	r1, #16
 8014a16:	4804      	ldr	r0, [pc, #16]	; (8014a28 <HW_IPCC_THREAD_CliSendAck+0x18>)
 8014a18:	f7ff fe5b 	bl	80146d2 <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8014a1c:	2110      	movs	r1, #16
 8014a1e:	4802      	ldr	r0, [pc, #8]	; (8014a28 <HW_IPCC_THREAD_CliSendAck+0x18>)
 8014a20:	f7ff fe34 	bl	801468c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8014a24:	bf00      	nop
}
 8014a26:	bd80      	pop	{r7, pc}
 8014a28:	58000c00 	.word	0x58000c00

08014a2c <HW_IPCC_OT_CmdEvtHandler>:

static void HW_IPCC_OT_CmdEvtHandler( void )
{
 8014a2c:	b580      	push	{r7, lr}
 8014a2e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8014a30:	2104      	movs	r1, #4
 8014a32:	4803      	ldr	r0, [pc, #12]	; (8014a40 <HW_IPCC_OT_CmdEvtHandler+0x14>)
 8014a34:	f7ff fe18 	bl	8014668 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_OT_CmdEvtNot();
 8014a38:	f7fe fe74 	bl	8013724 <HW_IPCC_OT_CmdEvtNot>

  return;
 8014a3c:	bf00      	nop
}
 8014a3e:	bd80      	pop	{r7, pc}
 8014a40:	58000c00 	.word	0x58000c00

08014a44 <HW_IPCC_THREAD_NotEvtHandler>:

static void HW_IPCC_THREAD_NotEvtHandler( void )
{
 8014a44:	b580      	push	{r7, lr}
 8014a46:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8014a48:	2104      	movs	r1, #4
 8014a4a:	4803      	ldr	r0, [pc, #12]	; (8014a58 <HW_IPCC_THREAD_NotEvtHandler+0x14>)
 8014a4c:	f7ff fe30 	bl	80146b0 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_EvtNot();
 8014a50:	f7fe fe74 	bl	801373c <HW_IPCC_THREAD_EvtNot>

  return;
 8014a54:	bf00      	nop
}
 8014a56:	bd80      	pop	{r7, pc}
 8014a58:	58000c00 	.word	0x58000c00

08014a5c <HW_IPCC_THREAD_CliNotEvtHandler>:

static void HW_IPCC_THREAD_CliNotEvtHandler( void )
{
 8014a5c:	b580      	push	{r7, lr}
 8014a5e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8014a60:	2110      	movs	r1, #16
 8014a62:	4803      	ldr	r0, [pc, #12]	; (8014a70 <HW_IPCC_THREAD_CliNotEvtHandler+0x14>)
 8014a64:	f7ff fe24 	bl	80146b0 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_CliEvtNot();
 8014a68:	f7fe fe74 	bl	8013754 <HW_IPCC_THREAD_CliEvtNot>

  return;
 8014a6c:	bf00      	nop
}
 8014a6e:	bd80      	pop	{r7, pc}
 8014a70:	58000c00 	.word	0x58000c00

08014a74 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8014a74:	b580      	push	{r7, lr}
 8014a76:	b082      	sub	sp, #8
 8014a78:	af00      	add	r7, sp, #0
 8014a7a:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8014a7c:	2108      	movs	r1, #8
 8014a7e:	480c      	ldr	r0, [pc, #48]	; (8014ab0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8014a80:	f7ff fe44 	bl	801470c <LL_C1_IPCC_IsActiveFlag_CHx>
 8014a84:	4603      	mov	r3, r0
 8014a86:	2b00      	cmp	r3, #0
 8014a88:	d007      	beq.n	8014a9a <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8014a8a:	4a0a      	ldr	r2, [pc, #40]	; (8014ab4 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8014a90:	2108      	movs	r1, #8
 8014a92:	4807      	ldr	r0, [pc, #28]	; (8014ab0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8014a94:	f7ff fdd5 	bl	8014642 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8014a98:	e006      	b.n	8014aa8 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8014a9e:	2108      	movs	r1, #8
 8014aa0:	4803      	ldr	r0, [pc, #12]	; (8014ab0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8014aa2:	f7ff fe24 	bl	80146ee <LL_C1_IPCC_SetFlag_CHx>
  return;
 8014aa6:	bf00      	nop
}
 8014aa8:	3708      	adds	r7, #8
 8014aaa:	46bd      	mov	sp, r7
 8014aac:	bd80      	pop	{r7, pc}
 8014aae:	bf00      	nop
 8014ab0:	58000c00 	.word	0x58000c00
 8014ab4:	200276a8 	.word	0x200276a8

08014ab8 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8014ab8:	b580      	push	{r7, lr}
 8014aba:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8014abc:	2108      	movs	r1, #8
 8014abe:	4806      	ldr	r0, [pc, #24]	; (8014ad8 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8014ac0:	f7ff fdd2 	bl	8014668 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8014ac4:	4b05      	ldr	r3, [pc, #20]	; (8014adc <HW_IPCC_MM_FreeBufHandler+0x24>)
 8014ac6:	681b      	ldr	r3, [r3, #0]
 8014ac8:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8014aca:	2108      	movs	r1, #8
 8014acc:	4802      	ldr	r0, [pc, #8]	; (8014ad8 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8014ace:	f7ff fe0e 	bl	80146ee <LL_C1_IPCC_SetFlag_CHx>

  return;
 8014ad2:	bf00      	nop
}
 8014ad4:	bd80      	pop	{r7, pc}
 8014ad6:	bf00      	nop
 8014ad8:	58000c00 	.word	0x58000c00
 8014adc:	200276a8 	.word	0x200276a8

08014ae0 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8014ae0:	b580      	push	{r7, lr}
 8014ae2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8014ae4:	2108      	movs	r1, #8
 8014ae6:	4802      	ldr	r0, [pc, #8]	; (8014af0 <HW_IPCC_TRACES_Init+0x10>)
 8014ae8:	f7ff fdd0 	bl	801468c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8014aec:	bf00      	nop
}
 8014aee:	bd80      	pop	{r7, pc}
 8014af0:	58000c00 	.word	0x58000c00

08014af4 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8014af4:	b580      	push	{r7, lr}
 8014af6:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8014af8:	f7fe feba 	bl	8013870 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8014afc:	2108      	movs	r1, #8
 8014afe:	4802      	ldr	r0, [pc, #8]	; (8014b08 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8014b00:	f7ff fde7 	bl	80146d2 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8014b04:	bf00      	nop
}
 8014b06:	bd80      	pop	{r7, pc}
 8014b08:	58000c00 	.word	0x58000c00

08014b0c <UTIL_LPM_Init>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_LPM_Init( void )
{
 8014b0c:	b480      	push	{r7}
 8014b0e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8014b10:	4b05      	ldr	r3, [pc, #20]	; (8014b28 <UTIL_LPM_Init+0x1c>)
 8014b12:	2200      	movs	r2, #0
 8014b14:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8014b16:	4b05      	ldr	r3, [pc, #20]	; (8014b2c <UTIL_LPM_Init+0x20>)
 8014b18:	2200      	movs	r2, #0
 8014b1a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8014b1c:	bf00      	nop
 8014b1e:	46bd      	mov	sp, r7
 8014b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b24:	4770      	bx	lr
 8014b26:	bf00      	nop
 8014b28:	200276ac 	.word	0x200276ac
 8014b2c:	200276b0 	.word	0x200276b0

08014b30 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8014b30:	b480      	push	{r7}
 8014b32:	b087      	sub	sp, #28
 8014b34:	af00      	add	r7, sp, #0
 8014b36:	6078      	str	r0, [r7, #4]
 8014b38:	460b      	mov	r3, r1
 8014b3a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014b3c:	f3ef 8310 	mrs	r3, PRIMASK
 8014b40:	613b      	str	r3, [r7, #16]
  return(result);
 8014b42:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8014b44:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8014b46:	b672      	cpsid	i
  
  switch(state)
 8014b48:	78fb      	ldrb	r3, [r7, #3]
 8014b4a:	2b00      	cmp	r3, #0
 8014b4c:	d009      	beq.n	8014b62 <UTIL_LPM_SetOffMode+0x32>
 8014b4e:	2b01      	cmp	r3, #1
 8014b50:	d000      	beq.n	8014b54 <UTIL_LPM_SetOffMode+0x24>
    {
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
    default:
      break;
 8014b52:	e00e      	b.n	8014b72 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 8014b54:	4b0c      	ldr	r3, [pc, #48]	; (8014b88 <UTIL_LPM_SetOffMode+0x58>)
 8014b56:	681a      	ldr	r2, [r3, #0]
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	4313      	orrs	r3, r2
 8014b5c:	4a0a      	ldr	r2, [pc, #40]	; (8014b88 <UTIL_LPM_SetOffMode+0x58>)
 8014b5e:	6013      	str	r3, [r2, #0]
      break;
 8014b60:	e007      	b.n	8014b72 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	43da      	mvns	r2, r3
 8014b66:	4b08      	ldr	r3, [pc, #32]	; (8014b88 <UTIL_LPM_SetOffMode+0x58>)
 8014b68:	681b      	ldr	r3, [r3, #0]
 8014b6a:	4013      	ands	r3, r2
 8014b6c:	4a06      	ldr	r2, [pc, #24]	; (8014b88 <UTIL_LPM_SetOffMode+0x58>)
 8014b6e:	6013      	str	r3, [r2, #0]
      break;
 8014b70:	bf00      	nop
 8014b72:	697b      	ldr	r3, [r7, #20]
 8014b74:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014b76:	68fb      	ldr	r3, [r7, #12]
 8014b78:	f383 8810 	msr	PRIMASK, r3
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8014b7c:	bf00      	nop
 8014b7e:	371c      	adds	r7, #28
 8014b80:	46bd      	mov	sp, r7
 8014b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b86:	4770      	bx	lr
 8014b88:	200276b0 	.word	0x200276b0

08014b8c <arm_power_f32>:
 8014b8c:	b430      	push	{r4, r5}
 8014b8e:	088d      	lsrs	r5, r1, #2
 8014b90:	eddf 5a20 	vldr	s11, [pc, #128]	; 8014c14 <arm_power_f32+0x88>
 8014b94:	d020      	beq.n	8014bd8 <arm_power_f32+0x4c>
 8014b96:	f100 0310 	add.w	r3, r0, #16
 8014b9a:	462c      	mov	r4, r5
 8014b9c:	ed53 6a04 	vldr	s13, [r3, #-16]
 8014ba0:	ed13 7a03 	vldr	s14, [r3, #-12]
 8014ba4:	ed53 7a02 	vldr	s15, [r3, #-8]
 8014ba8:	ed13 6a01 	vldr	s12, [r3, #-4]
 8014bac:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8014bb0:	ee27 7a07 	vmul.f32	s14, s14, s14
 8014bb4:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8014bb8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8014bbc:	ee37 7a26 	vadd.f32	s14, s14, s13
 8014bc0:	ee26 6a06 	vmul.f32	s12, s12, s12
 8014bc4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014bc8:	3c01      	subs	r4, #1
 8014bca:	f103 0310 	add.w	r3, r3, #16
 8014bce:	ee76 5a27 	vadd.f32	s11, s12, s15
 8014bd2:	d1e3      	bne.n	8014b9c <arm_power_f32+0x10>
 8014bd4:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8014bd8:	f011 0103 	ands.w	r1, r1, #3
 8014bdc:	d015      	beq.n	8014c0a <arm_power_f32+0x7e>
 8014bde:	edd0 7a00 	vldr	s15, [r0]
 8014be2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8014be6:	3901      	subs	r1, #1
 8014be8:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8014bec:	d00d      	beq.n	8014c0a <arm_power_f32+0x7e>
 8014bee:	edd0 7a01 	vldr	s15, [r0, #4]
 8014bf2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8014bf6:	2901      	cmp	r1, #1
 8014bf8:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8014bfc:	d005      	beq.n	8014c0a <arm_power_f32+0x7e>
 8014bfe:	edd0 7a02 	vldr	s15, [r0, #8]
 8014c02:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8014c06:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8014c0a:	edc2 5a00 	vstr	s11, [r2]
 8014c0e:	bc30      	pop	{r4, r5}
 8014c10:	4770      	bx	lr
 8014c12:	bf00      	nop
 8014c14:	00000000 	.word	0x00000000

08014c18 <arm_mat_mult_f32>:
 8014c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c1c:	8845      	ldrh	r5, [r0, #2]
 8014c1e:	880b      	ldrh	r3, [r1, #0]
 8014c20:	8806      	ldrh	r6, [r0, #0]
 8014c22:	6847      	ldr	r7, [r0, #4]
 8014c24:	6854      	ldr	r4, [r2, #4]
 8014c26:	6848      	ldr	r0, [r1, #4]
 8014c28:	b08b      	sub	sp, #44	; 0x2c
 8014c2a:	42ab      	cmp	r3, r5
 8014c2c:	9109      	str	r1, [sp, #36]	; 0x24
 8014c2e:	9604      	str	r6, [sp, #16]
 8014c30:	8849      	ldrh	r1, [r1, #2]
 8014c32:	f040 808a 	bne.w	8014d4a <arm_mat_mult_f32+0x132>
 8014c36:	8815      	ldrh	r5, [r2, #0]
 8014c38:	42b5      	cmp	r5, r6
 8014c3a:	f040 8086 	bne.w	8014d4a <arm_mat_mult_f32+0x132>
 8014c3e:	8852      	ldrh	r2, [r2, #2]
 8014c40:	428a      	cmp	r2, r1
 8014c42:	f040 8082 	bne.w	8014d4a <arm_mat_mult_f32+0x132>
 8014c46:	ea4f 0893 	mov.w	r8, r3, lsr #2
 8014c4a:	1d01      	adds	r1, r0, #4
 8014c4c:	0116      	lsls	r6, r2, #4
 8014c4e:	9108      	str	r1, [sp, #32]
 8014c50:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 8014c54:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 8014c58:	9101      	str	r1, [sp, #4]
 8014c5a:	fb06 f108 	mul.w	r1, r6, r8
 8014c5e:	0095      	lsls	r5, r2, #2
 8014c60:	9103      	str	r1, [sp, #12]
 8014c62:	00d2      	lsls	r2, r2, #3
 8014c64:	ea4f 018c 	mov.w	r1, ip, lsl #2
 8014c68:	f003 0903 	and.w	r9, r3, #3
 8014c6c:	009b      	lsls	r3, r3, #2
 8014c6e:	f107 0b10 	add.w	fp, r7, #16
 8014c72:	eb04 0a05 	add.w	sl, r4, r5
 8014c76:	9107      	str	r1, [sp, #28]
 8014c78:	9202      	str	r2, [sp, #8]
 8014c7a:	9306      	str	r3, [sp, #24]
 8014c7c:	f1ab 0310 	sub.w	r3, fp, #16
 8014c80:	9305      	str	r3, [sp, #20]
 8014c82:	9b07      	ldr	r3, [sp, #28]
 8014c84:	f8dd e020 	ldr.w	lr, [sp, #32]
 8014c88:	eb03 0c0a 	add.w	ip, r3, sl
 8014c8c:	eddf 7a31 	vldr	s15, [pc, #196]	; 8014d54 <arm_mat_mult_f32+0x13c>
 8014c90:	f1b8 0f00 	cmp.w	r8, #0
 8014c94:	d053      	beq.n	8014d3e <arm_mat_mult_f32+0x126>
 8014c96:	9b02      	ldr	r3, [sp, #8]
 8014c98:	4644      	mov	r4, r8
 8014c9a:	18c1      	adds	r1, r0, r3
 8014c9c:	4602      	mov	r2, r0
 8014c9e:	465b      	mov	r3, fp
 8014ca0:	ed92 6a00 	vldr	s12, [r2]
 8014ca4:	ed13 7a04 	vldr	s14, [r3, #-16]
 8014ca8:	ed53 4a03 	vldr	s9, [r3, #-12]
 8014cac:	ed53 6a02 	vldr	s13, [r3, #-8]
 8014cb0:	ed91 5a00 	vldr	s10, [r1]
 8014cb4:	ed53 5a01 	vldr	s11, [r3, #-4]
 8014cb8:	1957      	adds	r7, r2, r5
 8014cba:	ee27 7a06 	vmul.f32	s14, s14, s12
 8014cbe:	ed97 6a00 	vldr	s12, [r7]
 8014cc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014cc6:	ee26 6a24 	vmul.f32	s12, s12, s9
 8014cca:	194f      	adds	r7, r1, r5
 8014ccc:	ee36 6a27 	vadd.f32	s12, s12, s15
 8014cd0:	ee26 7a85 	vmul.f32	s14, s13, s10
 8014cd4:	edd7 7a00 	vldr	s15, [r7]
 8014cd8:	ee37 7a06 	vadd.f32	s14, s14, s12
 8014cdc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8014ce0:	3c01      	subs	r4, #1
 8014ce2:	4432      	add	r2, r6
 8014ce4:	4431      	add	r1, r6
 8014ce6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014cea:	f103 0310 	add.w	r3, r3, #16
 8014cee:	d1d7      	bne.n	8014ca0 <arm_mat_mult_f32+0x88>
 8014cf0:	9b03      	ldr	r3, [sp, #12]
 8014cf2:	9a01      	ldr	r2, [sp, #4]
 8014cf4:	4418      	add	r0, r3
 8014cf6:	f1b9 0f00 	cmp.w	r9, #0
 8014cfa:	d00b      	beq.n	8014d14 <arm_mat_mult_f32+0xfc>
 8014cfc:	464b      	mov	r3, r9
 8014cfe:	edd0 6a00 	vldr	s13, [r0]
 8014d02:	ecb2 7a01 	vldmia	r2!, {s14}
 8014d06:	ee27 7a26 	vmul.f32	s14, s14, s13
 8014d0a:	3b01      	subs	r3, #1
 8014d0c:	4428      	add	r0, r5
 8014d0e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014d12:	d1f4      	bne.n	8014cfe <arm_mat_mult_f32+0xe6>
 8014d14:	ecec 7a01 	vstmia	ip!, {s15}
 8014d18:	45d4      	cmp	ip, sl
 8014d1a:	4670      	mov	r0, lr
 8014d1c:	f10e 0e04 	add.w	lr, lr, #4
 8014d20:	d1b4      	bne.n	8014c8c <arm_mat_mult_f32+0x74>
 8014d22:	9a01      	ldr	r2, [sp, #4]
 8014d24:	9b06      	ldr	r3, [sp, #24]
 8014d26:	4611      	mov	r1, r2
 8014d28:	4419      	add	r1, r3
 8014d2a:	449b      	add	fp, r3
 8014d2c:	9b04      	ldr	r3, [sp, #16]
 8014d2e:	9101      	str	r1, [sp, #4]
 8014d30:	3b01      	subs	r3, #1
 8014d32:	44aa      	add	sl, r5
 8014d34:	9304      	str	r3, [sp, #16]
 8014d36:	d004      	beq.n	8014d42 <arm_mat_mult_f32+0x12a>
 8014d38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d3a:	6858      	ldr	r0, [r3, #4]
 8014d3c:	e79e      	b.n	8014c7c <arm_mat_mult_f32+0x64>
 8014d3e:	9a05      	ldr	r2, [sp, #20]
 8014d40:	e7d9      	b.n	8014cf6 <arm_mat_mult_f32+0xde>
 8014d42:	4618      	mov	r0, r3
 8014d44:	b00b      	add	sp, #44	; 0x2c
 8014d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d4a:	f06f 0002 	mvn.w	r0, #2
 8014d4e:	b00b      	add	sp, #44	; 0x2c
 8014d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d54:	00000000 	.word	0x00000000

08014d58 <arm_sin_f32>:
 8014d58:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8014dd8 <arm_sin_f32+0x80>
 8014d5c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014d60:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d68:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8014d6c:	d504      	bpl.n	8014d78 <arm_sin_f32+0x20>
 8014d6e:	ee17 3a90 	vmov	r3, s15
 8014d72:	3b01      	subs	r3, #1
 8014d74:	ee07 3a90 	vmov	s15, r3
 8014d78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014d7c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8014ddc <arm_sin_f32+0x84>
 8014d80:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014d84:	ee20 0a07 	vmul.f32	s0, s0, s14
 8014d88:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8014d8c:	ee17 3a90 	vmov	r3, s15
 8014d90:	b29b      	uxth	r3, r3
 8014d92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014d96:	d21a      	bcs.n	8014dce <arm_sin_f32+0x76>
 8014d98:	ee07 3a90 	vmov	s15, r3
 8014d9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014da0:	1c59      	adds	r1, r3, #1
 8014da2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014da6:	4a0e      	ldr	r2, [pc, #56]	; (8014de0 <arm_sin_f32+0x88>)
 8014da8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014dac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014db0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8014db4:	ed93 7a00 	vldr	s14, [r3]
 8014db8:	edd2 6a00 	vldr	s13, [r2]
 8014dbc:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8014dc0:	ee20 0a26 	vmul.f32	s0, s0, s13
 8014dc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014dc8:	ee37 0a80 	vadd.f32	s0, s15, s0
 8014dcc:	4770      	bx	lr
 8014dce:	ee30 0a47 	vsub.f32	s0, s0, s14
 8014dd2:	2101      	movs	r1, #1
 8014dd4:	2300      	movs	r3, #0
 8014dd6:	e7e6      	b.n	8014da6 <arm_sin_f32+0x4e>
 8014dd8:	3e22f983 	.word	0x3e22f983
 8014ddc:	44000000 	.word	0x44000000
 8014de0:	08016bec 	.word	0x08016bec

08014de4 <arm_cos_f32>:
 8014de4:	eddf 7a21 	vldr	s15, [pc, #132]	; 8014e6c <arm_cos_f32+0x88>
 8014de8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014dec:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8014df0:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014df4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014dfc:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8014e00:	d504      	bpl.n	8014e0c <arm_cos_f32+0x28>
 8014e02:	ee17 3a90 	vmov	r3, s15
 8014e06:	3b01      	subs	r3, #1
 8014e08:	ee07 3a90 	vmov	s15, r3
 8014e0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014e10:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8014e70 <arm_cos_f32+0x8c>
 8014e14:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014e18:	ee20 0a07 	vmul.f32	s0, s0, s14
 8014e1c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8014e20:	ee17 3a90 	vmov	r3, s15
 8014e24:	b29b      	uxth	r3, r3
 8014e26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014e2a:	d21a      	bcs.n	8014e62 <arm_cos_f32+0x7e>
 8014e2c:	ee07 3a90 	vmov	s15, r3
 8014e30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014e34:	1c59      	adds	r1, r3, #1
 8014e36:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014e3a:	4a0e      	ldr	r2, [pc, #56]	; (8014e74 <arm_cos_f32+0x90>)
 8014e3c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014e40:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014e44:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8014e48:	ed93 7a00 	vldr	s14, [r3]
 8014e4c:	edd2 6a00 	vldr	s13, [r2]
 8014e50:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8014e54:	ee20 0a26 	vmul.f32	s0, s0, s13
 8014e58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014e5c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8014e60:	4770      	bx	lr
 8014e62:	ee30 0a47 	vsub.f32	s0, s0, s14
 8014e66:	2101      	movs	r1, #1
 8014e68:	2300      	movs	r3, #0
 8014e6a:	e7e6      	b.n	8014e3a <arm_cos_f32+0x56>
 8014e6c:	3e22f983 	.word	0x3e22f983
 8014e70:	44000000 	.word	0x44000000
 8014e74:	08016bec 	.word	0x08016bec

08014e78 <arm_sub_f32>:
 8014e78:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8014e7c:	b4f0      	push	{r4, r5, r6, r7}
 8014e7e:	d033      	beq.n	8014ee8 <arm_sub_f32+0x70>
 8014e80:	f100 0610 	add.w	r6, r0, #16
 8014e84:	f101 0510 	add.w	r5, r1, #16
 8014e88:	f102 0410 	add.w	r4, r2, #16
 8014e8c:	4667      	mov	r7, ip
 8014e8e:	ed15 7a04 	vldr	s14, [r5, #-16]
 8014e92:	ed56 7a04 	vldr	s15, [r6, #-16]
 8014e96:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014e9a:	3f01      	subs	r7, #1
 8014e9c:	ed44 7a04 	vstr	s15, [r4, #-16]
 8014ea0:	ed15 7a03 	vldr	s14, [r5, #-12]
 8014ea4:	ed56 7a03 	vldr	s15, [r6, #-12]
 8014ea8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014eac:	f106 0610 	add.w	r6, r6, #16
 8014eb0:	ed44 7a03 	vstr	s15, [r4, #-12]
 8014eb4:	ed15 7a02 	vldr	s14, [r5, #-8]
 8014eb8:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 8014ebc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014ec0:	f105 0510 	add.w	r5, r5, #16
 8014ec4:	ed44 7a02 	vstr	s15, [r4, #-8]
 8014ec8:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8014ecc:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 8014ed0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014ed4:	f104 0410 	add.w	r4, r4, #16
 8014ed8:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8014edc:	d1d7      	bne.n	8014e8e <arm_sub_f32+0x16>
 8014ede:	ea4f 140c 	mov.w	r4, ip, lsl #4
 8014ee2:	4420      	add	r0, r4
 8014ee4:	4421      	add	r1, r4
 8014ee6:	4422      	add	r2, r4
 8014ee8:	f013 0303 	ands.w	r3, r3, #3
 8014eec:	d01b      	beq.n	8014f26 <arm_sub_f32+0xae>
 8014eee:	edd0 7a00 	vldr	s15, [r0]
 8014ef2:	ed91 7a00 	vldr	s14, [r1]
 8014ef6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014efa:	3b01      	subs	r3, #1
 8014efc:	edc2 7a00 	vstr	s15, [r2]
 8014f00:	d011      	beq.n	8014f26 <arm_sub_f32+0xae>
 8014f02:	edd0 7a01 	vldr	s15, [r0, #4]
 8014f06:	ed91 7a01 	vldr	s14, [r1, #4]
 8014f0a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014f0e:	2b01      	cmp	r3, #1
 8014f10:	edc2 7a01 	vstr	s15, [r2, #4]
 8014f14:	d007      	beq.n	8014f26 <arm_sub_f32+0xae>
 8014f16:	edd0 7a02 	vldr	s15, [r0, #8]
 8014f1a:	ed91 7a02 	vldr	s14, [r1, #8]
 8014f1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014f22:	edc2 7a02 	vstr	s15, [r2, #8]
 8014f26:	bcf0      	pop	{r4, r5, r6, r7}
 8014f28:	4770      	bx	lr
 8014f2a:	bf00      	nop

08014f2c <arm_scale_f32>:
 8014f2c:	b470      	push	{r4, r5, r6}
 8014f2e:	0896      	lsrs	r6, r2, #2
 8014f30:	d025      	beq.n	8014f7e <arm_scale_f32+0x52>
 8014f32:	f100 0410 	add.w	r4, r0, #16
 8014f36:	f101 0310 	add.w	r3, r1, #16
 8014f3a:	4635      	mov	r5, r6
 8014f3c:	ed54 7a04 	vldr	s15, [r4, #-16]
 8014f40:	ee67 7a80 	vmul.f32	s15, s15, s0
 8014f44:	3d01      	subs	r5, #1
 8014f46:	ed43 7a04 	vstr	s15, [r3, #-16]
 8014f4a:	ed54 7a03 	vldr	s15, [r4, #-12]
 8014f4e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8014f52:	f104 0410 	add.w	r4, r4, #16
 8014f56:	ed43 7a03 	vstr	s15, [r3, #-12]
 8014f5a:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 8014f5e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8014f62:	f103 0310 	add.w	r3, r3, #16
 8014f66:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 8014f6a:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 8014f6e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8014f72:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 8014f76:	d1e1      	bne.n	8014f3c <arm_scale_f32+0x10>
 8014f78:	0136      	lsls	r6, r6, #4
 8014f7a:	4430      	add	r0, r6
 8014f7c:	4431      	add	r1, r6
 8014f7e:	f012 0203 	ands.w	r2, r2, #3
 8014f82:	d015      	beq.n	8014fb0 <arm_scale_f32+0x84>
 8014f84:	edd0 7a00 	vldr	s15, [r0]
 8014f88:	ee67 7a80 	vmul.f32	s15, s15, s0
 8014f8c:	3a01      	subs	r2, #1
 8014f8e:	edc1 7a00 	vstr	s15, [r1]
 8014f92:	d00d      	beq.n	8014fb0 <arm_scale_f32+0x84>
 8014f94:	edd0 7a01 	vldr	s15, [r0, #4]
 8014f98:	ee67 7a80 	vmul.f32	s15, s15, s0
 8014f9c:	2a01      	cmp	r2, #1
 8014f9e:	edc1 7a01 	vstr	s15, [r1, #4]
 8014fa2:	d005      	beq.n	8014fb0 <arm_scale_f32+0x84>
 8014fa4:	edd0 7a02 	vldr	s15, [r0, #8]
 8014fa8:	ee27 0a80 	vmul.f32	s0, s15, s0
 8014fac:	ed81 0a02 	vstr	s0, [r1, #8]
 8014fb0:	bc70      	pop	{r4, r5, r6}
 8014fb2:	4770      	bx	lr

08014fb4 <arm_dot_prod_f32>:
 8014fb4:	b4f0      	push	{r4, r5, r6, r7}
 8014fb6:	0897      	lsrs	r7, r2, #2
 8014fb8:	eddf 5a29 	vldr	s11, [pc, #164]	; 8015060 <arm_dot_prod_f32+0xac>
 8014fbc:	d02d      	beq.n	801501a <arm_dot_prod_f32+0x66>
 8014fbe:	f100 0510 	add.w	r5, r0, #16
 8014fc2:	f101 0410 	add.w	r4, r1, #16
 8014fc6:	463e      	mov	r6, r7
 8014fc8:	ed55 6a04 	vldr	s13, [r5, #-16]
 8014fcc:	ed54 3a04 	vldr	s7, [r4, #-16]
 8014fd0:	ed15 7a03 	vldr	s14, [r5, #-12]
 8014fd4:	ed14 4a03 	vldr	s8, [r4, #-12]
 8014fd8:	ed55 7a02 	vldr	s15, [r5, #-8]
 8014fdc:	ed54 4a02 	vldr	s9, [r4, #-8]
 8014fe0:	ed15 6a01 	vldr	s12, [r5, #-4]
 8014fe4:	ed14 5a01 	vldr	s10, [r4, #-4]
 8014fe8:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8014fec:	ee27 7a04 	vmul.f32	s14, s14, s8
 8014ff0:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8014ff4:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8014ff8:	ee37 7a26 	vadd.f32	s14, s14, s13
 8014ffc:	ee66 6a05 	vmul.f32	s13, s12, s10
 8015000:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015004:	3e01      	subs	r6, #1
 8015006:	f105 0510 	add.w	r5, r5, #16
 801500a:	ee76 5aa7 	vadd.f32	s11, s13, s15
 801500e:	f104 0410 	add.w	r4, r4, #16
 8015012:	d1d9      	bne.n	8014fc8 <arm_dot_prod_f32+0x14>
 8015014:	013f      	lsls	r7, r7, #4
 8015016:	4438      	add	r0, r7
 8015018:	4439      	add	r1, r7
 801501a:	f012 0203 	ands.w	r2, r2, #3
 801501e:	d01b      	beq.n	8015058 <arm_dot_prod_f32+0xa4>
 8015020:	edd1 7a00 	vldr	s15, [r1]
 8015024:	ed90 7a00 	vldr	s14, [r0]
 8015028:	ee67 7a87 	vmul.f32	s15, s15, s14
 801502c:	3a01      	subs	r2, #1
 801502e:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8015032:	d011      	beq.n	8015058 <arm_dot_prod_f32+0xa4>
 8015034:	edd1 7a01 	vldr	s15, [r1, #4]
 8015038:	ed90 7a01 	vldr	s14, [r0, #4]
 801503c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015040:	2a01      	cmp	r2, #1
 8015042:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8015046:	d007      	beq.n	8015058 <arm_dot_prod_f32+0xa4>
 8015048:	edd0 7a02 	vldr	s15, [r0, #8]
 801504c:	ed91 7a02 	vldr	s14, [r1, #8]
 8015050:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015054:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8015058:	edc3 5a00 	vstr	s11, [r3]
 801505c:	bcf0      	pop	{r4, r5, r6, r7}
 801505e:	4770      	bx	lr
 8015060:	00000000 	.word	0x00000000

08015064 <arm_add_f32>:
 8015064:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8015068:	b4f0      	push	{r4, r5, r6, r7}
 801506a:	d033      	beq.n	80150d4 <arm_add_f32+0x70>
 801506c:	f100 0610 	add.w	r6, r0, #16
 8015070:	f101 0510 	add.w	r5, r1, #16
 8015074:	f102 0410 	add.w	r4, r2, #16
 8015078:	4667      	mov	r7, ip
 801507a:	ed15 7a04 	vldr	s14, [r5, #-16]
 801507e:	ed56 7a04 	vldr	s15, [r6, #-16]
 8015082:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015086:	3f01      	subs	r7, #1
 8015088:	ed44 7a04 	vstr	s15, [r4, #-16]
 801508c:	ed15 7a03 	vldr	s14, [r5, #-12]
 8015090:	ed56 7a03 	vldr	s15, [r6, #-12]
 8015094:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015098:	f106 0610 	add.w	r6, r6, #16
 801509c:	ed44 7a03 	vstr	s15, [r4, #-12]
 80150a0:	ed15 7a02 	vldr	s14, [r5, #-8]
 80150a4:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 80150a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80150ac:	f105 0510 	add.w	r5, r5, #16
 80150b0:	ed44 7a02 	vstr	s15, [r4, #-8]
 80150b4:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 80150b8:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 80150bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80150c0:	f104 0410 	add.w	r4, r4, #16
 80150c4:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 80150c8:	d1d7      	bne.n	801507a <arm_add_f32+0x16>
 80150ca:	ea4f 140c 	mov.w	r4, ip, lsl #4
 80150ce:	4420      	add	r0, r4
 80150d0:	4421      	add	r1, r4
 80150d2:	4422      	add	r2, r4
 80150d4:	f013 0303 	ands.w	r3, r3, #3
 80150d8:	d01b      	beq.n	8015112 <arm_add_f32+0xae>
 80150da:	edd1 7a00 	vldr	s15, [r1]
 80150de:	ed90 7a00 	vldr	s14, [r0]
 80150e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80150e6:	3b01      	subs	r3, #1
 80150e8:	edc2 7a00 	vstr	s15, [r2]
 80150ec:	d011      	beq.n	8015112 <arm_add_f32+0xae>
 80150ee:	edd0 7a01 	vldr	s15, [r0, #4]
 80150f2:	ed91 7a01 	vldr	s14, [r1, #4]
 80150f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80150fa:	2b01      	cmp	r3, #1
 80150fc:	edc2 7a01 	vstr	s15, [r2, #4]
 8015100:	d007      	beq.n	8015112 <arm_add_f32+0xae>
 8015102:	edd0 7a02 	vldr	s15, [r0, #8]
 8015106:	ed91 7a02 	vldr	s14, [r1, #8]
 801510a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801510e:	edc2 7a02 	vstr	s15, [r2, #8]
 8015112:	bcf0      	pop	{r4, r5, r6, r7}
 8015114:	4770      	bx	lr
 8015116:	bf00      	nop

08015118 <__errno>:
 8015118:	4b01      	ldr	r3, [pc, #4]	; (8015120 <__errno+0x8>)
 801511a:	6818      	ldr	r0, [r3, #0]
 801511c:	4770      	bx	lr
 801511e:	bf00      	nop
 8015120:	200000d0 	.word	0x200000d0

08015124 <__libc_init_array>:
 8015124:	b570      	push	{r4, r5, r6, lr}
 8015126:	4e0d      	ldr	r6, [pc, #52]	; (801515c <__libc_init_array+0x38>)
 8015128:	4c0d      	ldr	r4, [pc, #52]	; (8015160 <__libc_init_array+0x3c>)
 801512a:	1ba4      	subs	r4, r4, r6
 801512c:	10a4      	asrs	r4, r4, #2
 801512e:	2500      	movs	r5, #0
 8015130:	42a5      	cmp	r5, r4
 8015132:	d109      	bne.n	8015148 <__libc_init_array+0x24>
 8015134:	4e0b      	ldr	r6, [pc, #44]	; (8015164 <__libc_init_array+0x40>)
 8015136:	4c0c      	ldr	r4, [pc, #48]	; (8015168 <__libc_init_array+0x44>)
 8015138:	f001 f8d4 	bl	80162e4 <_init>
 801513c:	1ba4      	subs	r4, r4, r6
 801513e:	10a4      	asrs	r4, r4, #2
 8015140:	2500      	movs	r5, #0
 8015142:	42a5      	cmp	r5, r4
 8015144:	d105      	bne.n	8015152 <__libc_init_array+0x2e>
 8015146:	bd70      	pop	{r4, r5, r6, pc}
 8015148:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801514c:	4798      	blx	r3
 801514e:	3501      	adds	r5, #1
 8015150:	e7ee      	b.n	8015130 <__libc_init_array+0xc>
 8015152:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015156:	4798      	blx	r3
 8015158:	3501      	adds	r5, #1
 801515a:	e7f2      	b.n	8015142 <__libc_init_array+0x1e>
 801515c:	080174a8 	.word	0x080174a8
 8015160:	080174a8 	.word	0x080174a8
 8015164:	080174a8 	.word	0x080174a8
 8015168:	080174ac 	.word	0x080174ac

0801516c <memcpy>:
 801516c:	b510      	push	{r4, lr}
 801516e:	1e43      	subs	r3, r0, #1
 8015170:	440a      	add	r2, r1
 8015172:	4291      	cmp	r1, r2
 8015174:	d100      	bne.n	8015178 <memcpy+0xc>
 8015176:	bd10      	pop	{r4, pc}
 8015178:	f811 4b01 	ldrb.w	r4, [r1], #1
 801517c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015180:	e7f7      	b.n	8015172 <memcpy+0x6>

08015182 <memset>:
 8015182:	4402      	add	r2, r0
 8015184:	4603      	mov	r3, r0
 8015186:	4293      	cmp	r3, r2
 8015188:	d100      	bne.n	801518c <memset+0xa>
 801518a:	4770      	bx	lr
 801518c:	f803 1b01 	strb.w	r1, [r3], #1
 8015190:	e7f9      	b.n	8015186 <memset+0x4>
	...

08015194 <pow>:
 8015194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015198:	ed2d 8b04 	vpush	{d8-d9}
 801519c:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8015470 <pow+0x2dc>
 80151a0:	b08d      	sub	sp, #52	; 0x34
 80151a2:	ec57 6b10 	vmov	r6, r7, d0
 80151a6:	ec55 4b11 	vmov	r4, r5, d1
 80151aa:	f000 f9b5 	bl	8015518 <__ieee754_pow>
 80151ae:	f999 3000 	ldrsb.w	r3, [r9]
 80151b2:	9300      	str	r3, [sp, #0]
 80151b4:	3301      	adds	r3, #1
 80151b6:	eeb0 8a40 	vmov.f32	s16, s0
 80151ba:	eef0 8a60 	vmov.f32	s17, s1
 80151be:	46c8      	mov	r8, r9
 80151c0:	d05f      	beq.n	8015282 <pow+0xee>
 80151c2:	4622      	mov	r2, r4
 80151c4:	462b      	mov	r3, r5
 80151c6:	4620      	mov	r0, r4
 80151c8:	4629      	mov	r1, r5
 80151ca:	f7eb fc39 	bl	8000a40 <__aeabi_dcmpun>
 80151ce:	4683      	mov	fp, r0
 80151d0:	2800      	cmp	r0, #0
 80151d2:	d156      	bne.n	8015282 <pow+0xee>
 80151d4:	4632      	mov	r2, r6
 80151d6:	463b      	mov	r3, r7
 80151d8:	4630      	mov	r0, r6
 80151da:	4639      	mov	r1, r7
 80151dc:	f7eb fc30 	bl	8000a40 <__aeabi_dcmpun>
 80151e0:	9001      	str	r0, [sp, #4]
 80151e2:	b1e8      	cbz	r0, 8015220 <pow+0x8c>
 80151e4:	2200      	movs	r2, #0
 80151e6:	2300      	movs	r3, #0
 80151e8:	4620      	mov	r0, r4
 80151ea:	4629      	mov	r1, r5
 80151ec:	f7eb fbf6 	bl	80009dc <__aeabi_dcmpeq>
 80151f0:	2800      	cmp	r0, #0
 80151f2:	d046      	beq.n	8015282 <pow+0xee>
 80151f4:	2301      	movs	r3, #1
 80151f6:	9302      	str	r3, [sp, #8]
 80151f8:	4b96      	ldr	r3, [pc, #600]	; (8015454 <pow+0x2c0>)
 80151fa:	9303      	str	r3, [sp, #12]
 80151fc:	4b96      	ldr	r3, [pc, #600]	; (8015458 <pow+0x2c4>)
 80151fe:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8015202:	2200      	movs	r2, #0
 8015204:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015208:	9b00      	ldr	r3, [sp, #0]
 801520a:	2b02      	cmp	r3, #2
 801520c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8015210:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8015214:	d033      	beq.n	801527e <pow+0xea>
 8015216:	a802      	add	r0, sp, #8
 8015218:	f000 ff50 	bl	80160bc <matherr>
 801521c:	bb48      	cbnz	r0, 8015272 <pow+0xde>
 801521e:	e05d      	b.n	80152dc <pow+0x148>
 8015220:	f04f 0a00 	mov.w	sl, #0
 8015224:	f04f 0b00 	mov.w	fp, #0
 8015228:	4652      	mov	r2, sl
 801522a:	465b      	mov	r3, fp
 801522c:	4630      	mov	r0, r6
 801522e:	4639      	mov	r1, r7
 8015230:	f7eb fbd4 	bl	80009dc <__aeabi_dcmpeq>
 8015234:	ec4b ab19 	vmov	d9, sl, fp
 8015238:	2800      	cmp	r0, #0
 801523a:	d054      	beq.n	80152e6 <pow+0x152>
 801523c:	4652      	mov	r2, sl
 801523e:	465b      	mov	r3, fp
 8015240:	4620      	mov	r0, r4
 8015242:	4629      	mov	r1, r5
 8015244:	f7eb fbca 	bl	80009dc <__aeabi_dcmpeq>
 8015248:	4680      	mov	r8, r0
 801524a:	b318      	cbz	r0, 8015294 <pow+0x100>
 801524c:	2301      	movs	r3, #1
 801524e:	9302      	str	r3, [sp, #8]
 8015250:	4b80      	ldr	r3, [pc, #512]	; (8015454 <pow+0x2c0>)
 8015252:	9303      	str	r3, [sp, #12]
 8015254:	9b01      	ldr	r3, [sp, #4]
 8015256:	930a      	str	r3, [sp, #40]	; 0x28
 8015258:	9b00      	ldr	r3, [sp, #0]
 801525a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801525e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8015262:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8015266:	2b00      	cmp	r3, #0
 8015268:	d0d5      	beq.n	8015216 <pow+0x82>
 801526a:	4b7b      	ldr	r3, [pc, #492]	; (8015458 <pow+0x2c4>)
 801526c:	2200      	movs	r2, #0
 801526e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015272:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015274:	b11b      	cbz	r3, 801527e <pow+0xea>
 8015276:	f7ff ff4f 	bl	8015118 <__errno>
 801527a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801527c:	6003      	str	r3, [r0, #0]
 801527e:	ed9d 8b08 	vldr	d8, [sp, #32]
 8015282:	eeb0 0a48 	vmov.f32	s0, s16
 8015286:	eef0 0a68 	vmov.f32	s1, s17
 801528a:	b00d      	add	sp, #52	; 0x34
 801528c:	ecbd 8b04 	vpop	{d8-d9}
 8015290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015294:	ec45 4b10 	vmov	d0, r4, r5
 8015298:	f000 ff08 	bl	80160ac <finite>
 801529c:	2800      	cmp	r0, #0
 801529e:	d0f0      	beq.n	8015282 <pow+0xee>
 80152a0:	4652      	mov	r2, sl
 80152a2:	465b      	mov	r3, fp
 80152a4:	4620      	mov	r0, r4
 80152a6:	4629      	mov	r1, r5
 80152a8:	f7eb fba2 	bl	80009f0 <__aeabi_dcmplt>
 80152ac:	2800      	cmp	r0, #0
 80152ae:	d0e8      	beq.n	8015282 <pow+0xee>
 80152b0:	2301      	movs	r3, #1
 80152b2:	9302      	str	r3, [sp, #8]
 80152b4:	4b67      	ldr	r3, [pc, #412]	; (8015454 <pow+0x2c0>)
 80152b6:	9303      	str	r3, [sp, #12]
 80152b8:	f999 3000 	ldrsb.w	r3, [r9]
 80152bc:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80152c0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80152c4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80152c8:	b913      	cbnz	r3, 80152d0 <pow+0x13c>
 80152ca:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80152ce:	e7a2      	b.n	8015216 <pow+0x82>
 80152d0:	4962      	ldr	r1, [pc, #392]	; (801545c <pow+0x2c8>)
 80152d2:	2000      	movs	r0, #0
 80152d4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80152d8:	2b02      	cmp	r3, #2
 80152da:	d19c      	bne.n	8015216 <pow+0x82>
 80152dc:	f7ff ff1c 	bl	8015118 <__errno>
 80152e0:	2321      	movs	r3, #33	; 0x21
 80152e2:	6003      	str	r3, [r0, #0]
 80152e4:	e7c5      	b.n	8015272 <pow+0xde>
 80152e6:	eeb0 0a48 	vmov.f32	s0, s16
 80152ea:	eef0 0a68 	vmov.f32	s1, s17
 80152ee:	f000 fedd 	bl	80160ac <finite>
 80152f2:	9000      	str	r0, [sp, #0]
 80152f4:	2800      	cmp	r0, #0
 80152f6:	f040 8081 	bne.w	80153fc <pow+0x268>
 80152fa:	ec47 6b10 	vmov	d0, r6, r7
 80152fe:	f000 fed5 	bl	80160ac <finite>
 8015302:	2800      	cmp	r0, #0
 8015304:	d07a      	beq.n	80153fc <pow+0x268>
 8015306:	ec45 4b10 	vmov	d0, r4, r5
 801530a:	f000 fecf 	bl	80160ac <finite>
 801530e:	2800      	cmp	r0, #0
 8015310:	d074      	beq.n	80153fc <pow+0x268>
 8015312:	ec53 2b18 	vmov	r2, r3, d8
 8015316:	ee18 0a10 	vmov	r0, s16
 801531a:	4619      	mov	r1, r3
 801531c:	f7eb fb90 	bl	8000a40 <__aeabi_dcmpun>
 8015320:	f999 9000 	ldrsb.w	r9, [r9]
 8015324:	4b4b      	ldr	r3, [pc, #300]	; (8015454 <pow+0x2c0>)
 8015326:	b1b0      	cbz	r0, 8015356 <pow+0x1c2>
 8015328:	2201      	movs	r2, #1
 801532a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801532e:	9b00      	ldr	r3, [sp, #0]
 8015330:	930a      	str	r3, [sp, #40]	; 0x28
 8015332:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8015336:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801533a:	f1b9 0f00 	cmp.w	r9, #0
 801533e:	d0c4      	beq.n	80152ca <pow+0x136>
 8015340:	4652      	mov	r2, sl
 8015342:	465b      	mov	r3, fp
 8015344:	4650      	mov	r0, sl
 8015346:	4659      	mov	r1, fp
 8015348:	f7eb fa0a 	bl	8000760 <__aeabi_ddiv>
 801534c:	f1b9 0f02 	cmp.w	r9, #2
 8015350:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8015354:	e7c1      	b.n	80152da <pow+0x146>
 8015356:	2203      	movs	r2, #3
 8015358:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801535c:	900a      	str	r0, [sp, #40]	; 0x28
 801535e:	4629      	mov	r1, r5
 8015360:	4620      	mov	r0, r4
 8015362:	2200      	movs	r2, #0
 8015364:	4b3e      	ldr	r3, [pc, #248]	; (8015460 <pow+0x2cc>)
 8015366:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801536a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801536e:	f7eb f8cd 	bl	800050c <__aeabi_dmul>
 8015372:	4604      	mov	r4, r0
 8015374:	460d      	mov	r5, r1
 8015376:	f1b9 0f00 	cmp.w	r9, #0
 801537a:	d124      	bne.n	80153c6 <pow+0x232>
 801537c:	4b39      	ldr	r3, [pc, #228]	; (8015464 <pow+0x2d0>)
 801537e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8015382:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015386:	4630      	mov	r0, r6
 8015388:	4652      	mov	r2, sl
 801538a:	465b      	mov	r3, fp
 801538c:	4639      	mov	r1, r7
 801538e:	f7eb fb2f 	bl	80009f0 <__aeabi_dcmplt>
 8015392:	2800      	cmp	r0, #0
 8015394:	d056      	beq.n	8015444 <pow+0x2b0>
 8015396:	ec45 4b10 	vmov	d0, r4, r5
 801539a:	f000 fe99 	bl	80160d0 <rint>
 801539e:	4622      	mov	r2, r4
 80153a0:	462b      	mov	r3, r5
 80153a2:	ec51 0b10 	vmov	r0, r1, d0
 80153a6:	f7eb fb19 	bl	80009dc <__aeabi_dcmpeq>
 80153aa:	b920      	cbnz	r0, 80153b6 <pow+0x222>
 80153ac:	4b2e      	ldr	r3, [pc, #184]	; (8015468 <pow+0x2d4>)
 80153ae:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80153b2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80153b6:	f998 3000 	ldrsb.w	r3, [r8]
 80153ba:	2b02      	cmp	r3, #2
 80153bc:	d142      	bne.n	8015444 <pow+0x2b0>
 80153be:	f7ff feab 	bl	8015118 <__errno>
 80153c2:	2322      	movs	r3, #34	; 0x22
 80153c4:	e78d      	b.n	80152e2 <pow+0x14e>
 80153c6:	4b29      	ldr	r3, [pc, #164]	; (801546c <pow+0x2d8>)
 80153c8:	2200      	movs	r2, #0
 80153ca:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80153ce:	4630      	mov	r0, r6
 80153d0:	4652      	mov	r2, sl
 80153d2:	465b      	mov	r3, fp
 80153d4:	4639      	mov	r1, r7
 80153d6:	f7eb fb0b 	bl	80009f0 <__aeabi_dcmplt>
 80153da:	2800      	cmp	r0, #0
 80153dc:	d0eb      	beq.n	80153b6 <pow+0x222>
 80153de:	ec45 4b10 	vmov	d0, r4, r5
 80153e2:	f000 fe75 	bl	80160d0 <rint>
 80153e6:	4622      	mov	r2, r4
 80153e8:	462b      	mov	r3, r5
 80153ea:	ec51 0b10 	vmov	r0, r1, d0
 80153ee:	f7eb faf5 	bl	80009dc <__aeabi_dcmpeq>
 80153f2:	2800      	cmp	r0, #0
 80153f4:	d1df      	bne.n	80153b6 <pow+0x222>
 80153f6:	2200      	movs	r2, #0
 80153f8:	4b18      	ldr	r3, [pc, #96]	; (801545c <pow+0x2c8>)
 80153fa:	e7da      	b.n	80153b2 <pow+0x21e>
 80153fc:	2200      	movs	r2, #0
 80153fe:	2300      	movs	r3, #0
 8015400:	ec51 0b18 	vmov	r0, r1, d8
 8015404:	f7eb faea 	bl	80009dc <__aeabi_dcmpeq>
 8015408:	2800      	cmp	r0, #0
 801540a:	f43f af3a 	beq.w	8015282 <pow+0xee>
 801540e:	ec47 6b10 	vmov	d0, r6, r7
 8015412:	f000 fe4b 	bl	80160ac <finite>
 8015416:	2800      	cmp	r0, #0
 8015418:	f43f af33 	beq.w	8015282 <pow+0xee>
 801541c:	ec45 4b10 	vmov	d0, r4, r5
 8015420:	f000 fe44 	bl	80160ac <finite>
 8015424:	2800      	cmp	r0, #0
 8015426:	f43f af2c 	beq.w	8015282 <pow+0xee>
 801542a:	2304      	movs	r3, #4
 801542c:	9302      	str	r3, [sp, #8]
 801542e:	4b09      	ldr	r3, [pc, #36]	; (8015454 <pow+0x2c0>)
 8015430:	9303      	str	r3, [sp, #12]
 8015432:	2300      	movs	r3, #0
 8015434:	930a      	str	r3, [sp, #40]	; 0x28
 8015436:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801543a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801543e:	ed8d 9b08 	vstr	d9, [sp, #32]
 8015442:	e7b8      	b.n	80153b6 <pow+0x222>
 8015444:	a802      	add	r0, sp, #8
 8015446:	f000 fe39 	bl	80160bc <matherr>
 801544a:	2800      	cmp	r0, #0
 801544c:	f47f af11 	bne.w	8015272 <pow+0xde>
 8015450:	e7b5      	b.n	80153be <pow+0x22a>
 8015452:	bf00      	nop
 8015454:	08017450 	.word	0x08017450
 8015458:	3ff00000 	.word	0x3ff00000
 801545c:	fff00000 	.word	0xfff00000
 8015460:	3fe00000 	.word	0x3fe00000
 8015464:	47efffff 	.word	0x47efffff
 8015468:	c7efffff 	.word	0xc7efffff
 801546c:	7ff00000 	.word	0x7ff00000
 8015470:	20000134 	.word	0x20000134

08015474 <sqrtf>:
 8015474:	b510      	push	{r4, lr}
 8015476:	ed2d 8b02 	vpush	{d8}
 801547a:	b08a      	sub	sp, #40	; 0x28
 801547c:	eeb0 8a40 	vmov.f32	s16, s0
 8015480:	f000 fe08 	bl	8016094 <__ieee754_sqrtf>
 8015484:	4b21      	ldr	r3, [pc, #132]	; (801550c <sqrtf+0x98>)
 8015486:	f993 4000 	ldrsb.w	r4, [r3]
 801548a:	1c63      	adds	r3, r4, #1
 801548c:	d02c      	beq.n	80154e8 <sqrtf+0x74>
 801548e:	eeb4 8a48 	vcmp.f32	s16, s16
 8015492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015496:	d627      	bvs.n	80154e8 <sqrtf+0x74>
 8015498:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801549c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154a0:	d522      	bpl.n	80154e8 <sqrtf+0x74>
 80154a2:	2301      	movs	r3, #1
 80154a4:	9300      	str	r3, [sp, #0]
 80154a6:	4b1a      	ldr	r3, [pc, #104]	; (8015510 <sqrtf+0x9c>)
 80154a8:	9301      	str	r3, [sp, #4]
 80154aa:	ee18 0a10 	vmov	r0, s16
 80154ae:	2300      	movs	r3, #0
 80154b0:	9308      	str	r3, [sp, #32]
 80154b2:	f7ea ffd3 	bl	800045c <__aeabi_f2d>
 80154b6:	2200      	movs	r2, #0
 80154b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80154bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80154c0:	2300      	movs	r3, #0
 80154c2:	b9ac      	cbnz	r4, 80154f0 <sqrtf+0x7c>
 80154c4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80154c8:	4668      	mov	r0, sp
 80154ca:	f000 fdf7 	bl	80160bc <matherr>
 80154ce:	b1b8      	cbz	r0, 8015500 <sqrtf+0x8c>
 80154d0:	9b08      	ldr	r3, [sp, #32]
 80154d2:	b11b      	cbz	r3, 80154dc <sqrtf+0x68>
 80154d4:	f7ff fe20 	bl	8015118 <__errno>
 80154d8:	9b08      	ldr	r3, [sp, #32]
 80154da:	6003      	str	r3, [r0, #0]
 80154dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80154e0:	f7eb fac4 	bl	8000a6c <__aeabi_d2f>
 80154e4:	ee00 0a10 	vmov	s0, r0
 80154e8:	b00a      	add	sp, #40	; 0x28
 80154ea:	ecbd 8b02 	vpop	{d8}
 80154ee:	bd10      	pop	{r4, pc}
 80154f0:	4610      	mov	r0, r2
 80154f2:	4619      	mov	r1, r3
 80154f4:	f7eb f934 	bl	8000760 <__aeabi_ddiv>
 80154f8:	2c02      	cmp	r4, #2
 80154fa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80154fe:	d1e3      	bne.n	80154c8 <sqrtf+0x54>
 8015500:	f7ff fe0a 	bl	8015118 <__errno>
 8015504:	2321      	movs	r3, #33	; 0x21
 8015506:	6003      	str	r3, [r0, #0]
 8015508:	e7e2      	b.n	80154d0 <sqrtf+0x5c>
 801550a:	bf00      	nop
 801550c:	20000134 	.word	0x20000134
 8015510:	08017454 	.word	0x08017454
 8015514:	00000000 	.word	0x00000000

08015518 <__ieee754_pow>:
 8015518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801551c:	b091      	sub	sp, #68	; 0x44
 801551e:	ed8d 1b00 	vstr	d1, [sp]
 8015522:	e9dd 2900 	ldrd	r2, r9, [sp]
 8015526:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801552a:	ea58 0302 	orrs.w	r3, r8, r2
 801552e:	ec57 6b10 	vmov	r6, r7, d0
 8015532:	f000 84be 	beq.w	8015eb2 <__ieee754_pow+0x99a>
 8015536:	4b7a      	ldr	r3, [pc, #488]	; (8015720 <__ieee754_pow+0x208>)
 8015538:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801553c:	429c      	cmp	r4, r3
 801553e:	463d      	mov	r5, r7
 8015540:	ee10 aa10 	vmov	sl, s0
 8015544:	dc09      	bgt.n	801555a <__ieee754_pow+0x42>
 8015546:	d103      	bne.n	8015550 <__ieee754_pow+0x38>
 8015548:	b93e      	cbnz	r6, 801555a <__ieee754_pow+0x42>
 801554a:	45a0      	cmp	r8, r4
 801554c:	dc0d      	bgt.n	801556a <__ieee754_pow+0x52>
 801554e:	e001      	b.n	8015554 <__ieee754_pow+0x3c>
 8015550:	4598      	cmp	r8, r3
 8015552:	dc02      	bgt.n	801555a <__ieee754_pow+0x42>
 8015554:	4598      	cmp	r8, r3
 8015556:	d10e      	bne.n	8015576 <__ieee754_pow+0x5e>
 8015558:	b16a      	cbz	r2, 8015576 <__ieee754_pow+0x5e>
 801555a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801555e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8015562:	ea54 030a 	orrs.w	r3, r4, sl
 8015566:	f000 84a4 	beq.w	8015eb2 <__ieee754_pow+0x99a>
 801556a:	486e      	ldr	r0, [pc, #440]	; (8015724 <__ieee754_pow+0x20c>)
 801556c:	b011      	add	sp, #68	; 0x44
 801556e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015572:	f000 bda5 	b.w	80160c0 <nan>
 8015576:	2d00      	cmp	r5, #0
 8015578:	da53      	bge.n	8015622 <__ieee754_pow+0x10a>
 801557a:	4b6b      	ldr	r3, [pc, #428]	; (8015728 <__ieee754_pow+0x210>)
 801557c:	4598      	cmp	r8, r3
 801557e:	dc4d      	bgt.n	801561c <__ieee754_pow+0x104>
 8015580:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8015584:	4598      	cmp	r8, r3
 8015586:	dd4c      	ble.n	8015622 <__ieee754_pow+0x10a>
 8015588:	ea4f 5328 	mov.w	r3, r8, asr #20
 801558c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8015590:	2b14      	cmp	r3, #20
 8015592:	dd26      	ble.n	80155e2 <__ieee754_pow+0xca>
 8015594:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8015598:	fa22 f103 	lsr.w	r1, r2, r3
 801559c:	fa01 f303 	lsl.w	r3, r1, r3
 80155a0:	4293      	cmp	r3, r2
 80155a2:	d13e      	bne.n	8015622 <__ieee754_pow+0x10a>
 80155a4:	f001 0101 	and.w	r1, r1, #1
 80155a8:	f1c1 0b02 	rsb	fp, r1, #2
 80155ac:	2a00      	cmp	r2, #0
 80155ae:	d15b      	bne.n	8015668 <__ieee754_pow+0x150>
 80155b0:	4b5b      	ldr	r3, [pc, #364]	; (8015720 <__ieee754_pow+0x208>)
 80155b2:	4598      	cmp	r8, r3
 80155b4:	d124      	bne.n	8015600 <__ieee754_pow+0xe8>
 80155b6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80155ba:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80155be:	ea53 030a 	orrs.w	r3, r3, sl
 80155c2:	f000 8476 	beq.w	8015eb2 <__ieee754_pow+0x99a>
 80155c6:	4b59      	ldr	r3, [pc, #356]	; (801572c <__ieee754_pow+0x214>)
 80155c8:	429c      	cmp	r4, r3
 80155ca:	dd2d      	ble.n	8015628 <__ieee754_pow+0x110>
 80155cc:	f1b9 0f00 	cmp.w	r9, #0
 80155d0:	f280 8473 	bge.w	8015eba <__ieee754_pow+0x9a2>
 80155d4:	2000      	movs	r0, #0
 80155d6:	2100      	movs	r1, #0
 80155d8:	ec41 0b10 	vmov	d0, r0, r1
 80155dc:	b011      	add	sp, #68	; 0x44
 80155de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155e2:	2a00      	cmp	r2, #0
 80155e4:	d13e      	bne.n	8015664 <__ieee754_pow+0x14c>
 80155e6:	f1c3 0314 	rsb	r3, r3, #20
 80155ea:	fa48 f103 	asr.w	r1, r8, r3
 80155ee:	fa01 f303 	lsl.w	r3, r1, r3
 80155f2:	4543      	cmp	r3, r8
 80155f4:	f040 8469 	bne.w	8015eca <__ieee754_pow+0x9b2>
 80155f8:	f001 0101 	and.w	r1, r1, #1
 80155fc:	f1c1 0b02 	rsb	fp, r1, #2
 8015600:	4b4b      	ldr	r3, [pc, #300]	; (8015730 <__ieee754_pow+0x218>)
 8015602:	4598      	cmp	r8, r3
 8015604:	d118      	bne.n	8015638 <__ieee754_pow+0x120>
 8015606:	f1b9 0f00 	cmp.w	r9, #0
 801560a:	f280 845a 	bge.w	8015ec2 <__ieee754_pow+0x9aa>
 801560e:	4948      	ldr	r1, [pc, #288]	; (8015730 <__ieee754_pow+0x218>)
 8015610:	4632      	mov	r2, r6
 8015612:	463b      	mov	r3, r7
 8015614:	2000      	movs	r0, #0
 8015616:	f7eb f8a3 	bl	8000760 <__aeabi_ddiv>
 801561a:	e7dd      	b.n	80155d8 <__ieee754_pow+0xc0>
 801561c:	f04f 0b02 	mov.w	fp, #2
 8015620:	e7c4      	b.n	80155ac <__ieee754_pow+0x94>
 8015622:	f04f 0b00 	mov.w	fp, #0
 8015626:	e7c1      	b.n	80155ac <__ieee754_pow+0x94>
 8015628:	f1b9 0f00 	cmp.w	r9, #0
 801562c:	dad2      	bge.n	80155d4 <__ieee754_pow+0xbc>
 801562e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8015632:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8015636:	e7cf      	b.n	80155d8 <__ieee754_pow+0xc0>
 8015638:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801563c:	d106      	bne.n	801564c <__ieee754_pow+0x134>
 801563e:	4632      	mov	r2, r6
 8015640:	463b      	mov	r3, r7
 8015642:	4610      	mov	r0, r2
 8015644:	4619      	mov	r1, r3
 8015646:	f7ea ff61 	bl	800050c <__aeabi_dmul>
 801564a:	e7c5      	b.n	80155d8 <__ieee754_pow+0xc0>
 801564c:	4b39      	ldr	r3, [pc, #228]	; (8015734 <__ieee754_pow+0x21c>)
 801564e:	4599      	cmp	r9, r3
 8015650:	d10a      	bne.n	8015668 <__ieee754_pow+0x150>
 8015652:	2d00      	cmp	r5, #0
 8015654:	db08      	blt.n	8015668 <__ieee754_pow+0x150>
 8015656:	ec47 6b10 	vmov	d0, r6, r7
 801565a:	b011      	add	sp, #68	; 0x44
 801565c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015660:	f000 bc68 	b.w	8015f34 <__ieee754_sqrt>
 8015664:	f04f 0b00 	mov.w	fp, #0
 8015668:	ec47 6b10 	vmov	d0, r6, r7
 801566c:	f000 fd15 	bl	801609a <fabs>
 8015670:	ec51 0b10 	vmov	r0, r1, d0
 8015674:	f1ba 0f00 	cmp.w	sl, #0
 8015678:	d127      	bne.n	80156ca <__ieee754_pow+0x1b2>
 801567a:	b124      	cbz	r4, 8015686 <__ieee754_pow+0x16e>
 801567c:	4b2c      	ldr	r3, [pc, #176]	; (8015730 <__ieee754_pow+0x218>)
 801567e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8015682:	429a      	cmp	r2, r3
 8015684:	d121      	bne.n	80156ca <__ieee754_pow+0x1b2>
 8015686:	f1b9 0f00 	cmp.w	r9, #0
 801568a:	da05      	bge.n	8015698 <__ieee754_pow+0x180>
 801568c:	4602      	mov	r2, r0
 801568e:	460b      	mov	r3, r1
 8015690:	2000      	movs	r0, #0
 8015692:	4927      	ldr	r1, [pc, #156]	; (8015730 <__ieee754_pow+0x218>)
 8015694:	f7eb f864 	bl	8000760 <__aeabi_ddiv>
 8015698:	2d00      	cmp	r5, #0
 801569a:	da9d      	bge.n	80155d8 <__ieee754_pow+0xc0>
 801569c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80156a0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80156a4:	ea54 030b 	orrs.w	r3, r4, fp
 80156a8:	d108      	bne.n	80156bc <__ieee754_pow+0x1a4>
 80156aa:	4602      	mov	r2, r0
 80156ac:	460b      	mov	r3, r1
 80156ae:	4610      	mov	r0, r2
 80156b0:	4619      	mov	r1, r3
 80156b2:	f7ea fd73 	bl	800019c <__aeabi_dsub>
 80156b6:	4602      	mov	r2, r0
 80156b8:	460b      	mov	r3, r1
 80156ba:	e7ac      	b.n	8015616 <__ieee754_pow+0xfe>
 80156bc:	f1bb 0f01 	cmp.w	fp, #1
 80156c0:	d18a      	bne.n	80155d8 <__ieee754_pow+0xc0>
 80156c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80156c6:	4619      	mov	r1, r3
 80156c8:	e786      	b.n	80155d8 <__ieee754_pow+0xc0>
 80156ca:	0fed      	lsrs	r5, r5, #31
 80156cc:	1e6b      	subs	r3, r5, #1
 80156ce:	930d      	str	r3, [sp, #52]	; 0x34
 80156d0:	ea5b 0303 	orrs.w	r3, fp, r3
 80156d4:	d102      	bne.n	80156dc <__ieee754_pow+0x1c4>
 80156d6:	4632      	mov	r2, r6
 80156d8:	463b      	mov	r3, r7
 80156da:	e7e8      	b.n	80156ae <__ieee754_pow+0x196>
 80156dc:	4b16      	ldr	r3, [pc, #88]	; (8015738 <__ieee754_pow+0x220>)
 80156de:	4598      	cmp	r8, r3
 80156e0:	f340 80fe 	ble.w	80158e0 <__ieee754_pow+0x3c8>
 80156e4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80156e8:	4598      	cmp	r8, r3
 80156ea:	dd0a      	ble.n	8015702 <__ieee754_pow+0x1ea>
 80156ec:	4b0f      	ldr	r3, [pc, #60]	; (801572c <__ieee754_pow+0x214>)
 80156ee:	429c      	cmp	r4, r3
 80156f0:	dc0d      	bgt.n	801570e <__ieee754_pow+0x1f6>
 80156f2:	f1b9 0f00 	cmp.w	r9, #0
 80156f6:	f6bf af6d 	bge.w	80155d4 <__ieee754_pow+0xbc>
 80156fa:	a307      	add	r3, pc, #28	; (adr r3, 8015718 <__ieee754_pow+0x200>)
 80156fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015700:	e79f      	b.n	8015642 <__ieee754_pow+0x12a>
 8015702:	4b0e      	ldr	r3, [pc, #56]	; (801573c <__ieee754_pow+0x224>)
 8015704:	429c      	cmp	r4, r3
 8015706:	ddf4      	ble.n	80156f2 <__ieee754_pow+0x1da>
 8015708:	4b09      	ldr	r3, [pc, #36]	; (8015730 <__ieee754_pow+0x218>)
 801570a:	429c      	cmp	r4, r3
 801570c:	dd18      	ble.n	8015740 <__ieee754_pow+0x228>
 801570e:	f1b9 0f00 	cmp.w	r9, #0
 8015712:	dcf2      	bgt.n	80156fa <__ieee754_pow+0x1e2>
 8015714:	e75e      	b.n	80155d4 <__ieee754_pow+0xbc>
 8015716:	bf00      	nop
 8015718:	8800759c 	.word	0x8800759c
 801571c:	7e37e43c 	.word	0x7e37e43c
 8015720:	7ff00000 	.word	0x7ff00000
 8015724:	08017459 	.word	0x08017459
 8015728:	433fffff 	.word	0x433fffff
 801572c:	3fefffff 	.word	0x3fefffff
 8015730:	3ff00000 	.word	0x3ff00000
 8015734:	3fe00000 	.word	0x3fe00000
 8015738:	41e00000 	.word	0x41e00000
 801573c:	3feffffe 	.word	0x3feffffe
 8015740:	2200      	movs	r2, #0
 8015742:	4b63      	ldr	r3, [pc, #396]	; (80158d0 <__ieee754_pow+0x3b8>)
 8015744:	f7ea fd2a 	bl	800019c <__aeabi_dsub>
 8015748:	a355      	add	r3, pc, #340	; (adr r3, 80158a0 <__ieee754_pow+0x388>)
 801574a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801574e:	4604      	mov	r4, r0
 8015750:	460d      	mov	r5, r1
 8015752:	f7ea fedb 	bl	800050c <__aeabi_dmul>
 8015756:	a354      	add	r3, pc, #336	; (adr r3, 80158a8 <__ieee754_pow+0x390>)
 8015758:	e9d3 2300 	ldrd	r2, r3, [r3]
 801575c:	4606      	mov	r6, r0
 801575e:	460f      	mov	r7, r1
 8015760:	4620      	mov	r0, r4
 8015762:	4629      	mov	r1, r5
 8015764:	f7ea fed2 	bl	800050c <__aeabi_dmul>
 8015768:	2200      	movs	r2, #0
 801576a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801576e:	4b59      	ldr	r3, [pc, #356]	; (80158d4 <__ieee754_pow+0x3bc>)
 8015770:	4620      	mov	r0, r4
 8015772:	4629      	mov	r1, r5
 8015774:	f7ea feca 	bl	800050c <__aeabi_dmul>
 8015778:	4602      	mov	r2, r0
 801577a:	460b      	mov	r3, r1
 801577c:	a14c      	add	r1, pc, #304	; (adr r1, 80158b0 <__ieee754_pow+0x398>)
 801577e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015782:	f7ea fd0b 	bl	800019c <__aeabi_dsub>
 8015786:	4622      	mov	r2, r4
 8015788:	462b      	mov	r3, r5
 801578a:	f7ea febf 	bl	800050c <__aeabi_dmul>
 801578e:	4602      	mov	r2, r0
 8015790:	460b      	mov	r3, r1
 8015792:	2000      	movs	r0, #0
 8015794:	4950      	ldr	r1, [pc, #320]	; (80158d8 <__ieee754_pow+0x3c0>)
 8015796:	f7ea fd01 	bl	800019c <__aeabi_dsub>
 801579a:	4622      	mov	r2, r4
 801579c:	462b      	mov	r3, r5
 801579e:	4680      	mov	r8, r0
 80157a0:	4689      	mov	r9, r1
 80157a2:	4620      	mov	r0, r4
 80157a4:	4629      	mov	r1, r5
 80157a6:	f7ea feb1 	bl	800050c <__aeabi_dmul>
 80157aa:	4602      	mov	r2, r0
 80157ac:	460b      	mov	r3, r1
 80157ae:	4640      	mov	r0, r8
 80157b0:	4649      	mov	r1, r9
 80157b2:	f7ea feab 	bl	800050c <__aeabi_dmul>
 80157b6:	a340      	add	r3, pc, #256	; (adr r3, 80158b8 <__ieee754_pow+0x3a0>)
 80157b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157bc:	f7ea fea6 	bl	800050c <__aeabi_dmul>
 80157c0:	4602      	mov	r2, r0
 80157c2:	460b      	mov	r3, r1
 80157c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80157c8:	f7ea fce8 	bl	800019c <__aeabi_dsub>
 80157cc:	4602      	mov	r2, r0
 80157ce:	460b      	mov	r3, r1
 80157d0:	4604      	mov	r4, r0
 80157d2:	460d      	mov	r5, r1
 80157d4:	4630      	mov	r0, r6
 80157d6:	4639      	mov	r1, r7
 80157d8:	f7ea fce2 	bl	80001a0 <__adddf3>
 80157dc:	2000      	movs	r0, #0
 80157de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80157e2:	4632      	mov	r2, r6
 80157e4:	463b      	mov	r3, r7
 80157e6:	f7ea fcd9 	bl	800019c <__aeabi_dsub>
 80157ea:	4602      	mov	r2, r0
 80157ec:	460b      	mov	r3, r1
 80157ee:	4620      	mov	r0, r4
 80157f0:	4629      	mov	r1, r5
 80157f2:	f7ea fcd3 	bl	800019c <__aeabi_dsub>
 80157f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80157f8:	f10b 33ff 	add.w	r3, fp, #4294967295
 80157fc:	4313      	orrs	r3, r2
 80157fe:	4606      	mov	r6, r0
 8015800:	460f      	mov	r7, r1
 8015802:	f040 81eb 	bne.w	8015bdc <__ieee754_pow+0x6c4>
 8015806:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80158c0 <__ieee754_pow+0x3a8>
 801580a:	e9dd 4500 	ldrd	r4, r5, [sp]
 801580e:	2400      	movs	r4, #0
 8015810:	4622      	mov	r2, r4
 8015812:	462b      	mov	r3, r5
 8015814:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015818:	ed8d 7b02 	vstr	d7, [sp, #8]
 801581c:	f7ea fcbe 	bl	800019c <__aeabi_dsub>
 8015820:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015824:	f7ea fe72 	bl	800050c <__aeabi_dmul>
 8015828:	e9dd 2300 	ldrd	r2, r3, [sp]
 801582c:	4680      	mov	r8, r0
 801582e:	4689      	mov	r9, r1
 8015830:	4630      	mov	r0, r6
 8015832:	4639      	mov	r1, r7
 8015834:	f7ea fe6a 	bl	800050c <__aeabi_dmul>
 8015838:	4602      	mov	r2, r0
 801583a:	460b      	mov	r3, r1
 801583c:	4640      	mov	r0, r8
 801583e:	4649      	mov	r1, r9
 8015840:	f7ea fcae 	bl	80001a0 <__adddf3>
 8015844:	4622      	mov	r2, r4
 8015846:	462b      	mov	r3, r5
 8015848:	4680      	mov	r8, r0
 801584a:	4689      	mov	r9, r1
 801584c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015850:	f7ea fe5c 	bl	800050c <__aeabi_dmul>
 8015854:	460b      	mov	r3, r1
 8015856:	4604      	mov	r4, r0
 8015858:	460d      	mov	r5, r1
 801585a:	4602      	mov	r2, r0
 801585c:	4649      	mov	r1, r9
 801585e:	4640      	mov	r0, r8
 8015860:	e9cd 4500 	strd	r4, r5, [sp]
 8015864:	f7ea fc9c 	bl	80001a0 <__adddf3>
 8015868:	4b1c      	ldr	r3, [pc, #112]	; (80158dc <__ieee754_pow+0x3c4>)
 801586a:	4299      	cmp	r1, r3
 801586c:	4606      	mov	r6, r0
 801586e:	460f      	mov	r7, r1
 8015870:	468b      	mov	fp, r1
 8015872:	f340 82f7 	ble.w	8015e64 <__ieee754_pow+0x94c>
 8015876:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801587a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801587e:	4303      	orrs	r3, r0
 8015880:	f000 81ea 	beq.w	8015c58 <__ieee754_pow+0x740>
 8015884:	a310      	add	r3, pc, #64	; (adr r3, 80158c8 <__ieee754_pow+0x3b0>)
 8015886:	e9d3 2300 	ldrd	r2, r3, [r3]
 801588a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801588e:	f7ea fe3d 	bl	800050c <__aeabi_dmul>
 8015892:	a30d      	add	r3, pc, #52	; (adr r3, 80158c8 <__ieee754_pow+0x3b0>)
 8015894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015898:	e6d5      	b.n	8015646 <__ieee754_pow+0x12e>
 801589a:	bf00      	nop
 801589c:	f3af 8000 	nop.w
 80158a0:	60000000 	.word	0x60000000
 80158a4:	3ff71547 	.word	0x3ff71547
 80158a8:	f85ddf44 	.word	0xf85ddf44
 80158ac:	3e54ae0b 	.word	0x3e54ae0b
 80158b0:	55555555 	.word	0x55555555
 80158b4:	3fd55555 	.word	0x3fd55555
 80158b8:	652b82fe 	.word	0x652b82fe
 80158bc:	3ff71547 	.word	0x3ff71547
 80158c0:	00000000 	.word	0x00000000
 80158c4:	bff00000 	.word	0xbff00000
 80158c8:	8800759c 	.word	0x8800759c
 80158cc:	7e37e43c 	.word	0x7e37e43c
 80158d0:	3ff00000 	.word	0x3ff00000
 80158d4:	3fd00000 	.word	0x3fd00000
 80158d8:	3fe00000 	.word	0x3fe00000
 80158dc:	408fffff 	.word	0x408fffff
 80158e0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80158e4:	f04f 0200 	mov.w	r2, #0
 80158e8:	da05      	bge.n	80158f6 <__ieee754_pow+0x3de>
 80158ea:	4bd3      	ldr	r3, [pc, #844]	; (8015c38 <__ieee754_pow+0x720>)
 80158ec:	f7ea fe0e 	bl	800050c <__aeabi_dmul>
 80158f0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80158f4:	460c      	mov	r4, r1
 80158f6:	1523      	asrs	r3, r4, #20
 80158f8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80158fc:	4413      	add	r3, r2
 80158fe:	9309      	str	r3, [sp, #36]	; 0x24
 8015900:	4bce      	ldr	r3, [pc, #824]	; (8015c3c <__ieee754_pow+0x724>)
 8015902:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8015906:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801590a:	429c      	cmp	r4, r3
 801590c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8015910:	dd08      	ble.n	8015924 <__ieee754_pow+0x40c>
 8015912:	4bcb      	ldr	r3, [pc, #812]	; (8015c40 <__ieee754_pow+0x728>)
 8015914:	429c      	cmp	r4, r3
 8015916:	f340 815e 	ble.w	8015bd6 <__ieee754_pow+0x6be>
 801591a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801591c:	3301      	adds	r3, #1
 801591e:	9309      	str	r3, [sp, #36]	; 0x24
 8015920:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8015924:	f04f 0a00 	mov.w	sl, #0
 8015928:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801592c:	930c      	str	r3, [sp, #48]	; 0x30
 801592e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015930:	4bc4      	ldr	r3, [pc, #784]	; (8015c44 <__ieee754_pow+0x72c>)
 8015932:	4413      	add	r3, r2
 8015934:	ed93 7b00 	vldr	d7, [r3]
 8015938:	4629      	mov	r1, r5
 801593a:	ec53 2b17 	vmov	r2, r3, d7
 801593e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015942:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8015946:	f7ea fc29 	bl	800019c <__aeabi_dsub>
 801594a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801594e:	4606      	mov	r6, r0
 8015950:	460f      	mov	r7, r1
 8015952:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015956:	f7ea fc23 	bl	80001a0 <__adddf3>
 801595a:	4602      	mov	r2, r0
 801595c:	460b      	mov	r3, r1
 801595e:	2000      	movs	r0, #0
 8015960:	49b9      	ldr	r1, [pc, #740]	; (8015c48 <__ieee754_pow+0x730>)
 8015962:	f7ea fefd 	bl	8000760 <__aeabi_ddiv>
 8015966:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801596a:	4602      	mov	r2, r0
 801596c:	460b      	mov	r3, r1
 801596e:	4630      	mov	r0, r6
 8015970:	4639      	mov	r1, r7
 8015972:	f7ea fdcb 	bl	800050c <__aeabi_dmul>
 8015976:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801597a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801597e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8015982:	2300      	movs	r3, #0
 8015984:	9302      	str	r3, [sp, #8]
 8015986:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801598a:	106d      	asrs	r5, r5, #1
 801598c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8015990:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8015994:	2200      	movs	r2, #0
 8015996:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801599a:	4640      	mov	r0, r8
 801599c:	4649      	mov	r1, r9
 801599e:	4614      	mov	r4, r2
 80159a0:	461d      	mov	r5, r3
 80159a2:	f7ea fdb3 	bl	800050c <__aeabi_dmul>
 80159a6:	4602      	mov	r2, r0
 80159a8:	460b      	mov	r3, r1
 80159aa:	4630      	mov	r0, r6
 80159ac:	4639      	mov	r1, r7
 80159ae:	f7ea fbf5 	bl	800019c <__aeabi_dsub>
 80159b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80159b6:	4606      	mov	r6, r0
 80159b8:	460f      	mov	r7, r1
 80159ba:	4620      	mov	r0, r4
 80159bc:	4629      	mov	r1, r5
 80159be:	f7ea fbed 	bl	800019c <__aeabi_dsub>
 80159c2:	4602      	mov	r2, r0
 80159c4:	460b      	mov	r3, r1
 80159c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80159ca:	f7ea fbe7 	bl	800019c <__aeabi_dsub>
 80159ce:	4642      	mov	r2, r8
 80159d0:	464b      	mov	r3, r9
 80159d2:	f7ea fd9b 	bl	800050c <__aeabi_dmul>
 80159d6:	4602      	mov	r2, r0
 80159d8:	460b      	mov	r3, r1
 80159da:	4630      	mov	r0, r6
 80159dc:	4639      	mov	r1, r7
 80159de:	f7ea fbdd 	bl	800019c <__aeabi_dsub>
 80159e2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80159e6:	f7ea fd91 	bl	800050c <__aeabi_dmul>
 80159ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80159ee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80159f2:	4610      	mov	r0, r2
 80159f4:	4619      	mov	r1, r3
 80159f6:	f7ea fd89 	bl	800050c <__aeabi_dmul>
 80159fa:	a37b      	add	r3, pc, #492	; (adr r3, 8015be8 <__ieee754_pow+0x6d0>)
 80159fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a00:	4604      	mov	r4, r0
 8015a02:	460d      	mov	r5, r1
 8015a04:	f7ea fd82 	bl	800050c <__aeabi_dmul>
 8015a08:	a379      	add	r3, pc, #484	; (adr r3, 8015bf0 <__ieee754_pow+0x6d8>)
 8015a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a0e:	f7ea fbc7 	bl	80001a0 <__adddf3>
 8015a12:	4622      	mov	r2, r4
 8015a14:	462b      	mov	r3, r5
 8015a16:	f7ea fd79 	bl	800050c <__aeabi_dmul>
 8015a1a:	a377      	add	r3, pc, #476	; (adr r3, 8015bf8 <__ieee754_pow+0x6e0>)
 8015a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a20:	f7ea fbbe 	bl	80001a0 <__adddf3>
 8015a24:	4622      	mov	r2, r4
 8015a26:	462b      	mov	r3, r5
 8015a28:	f7ea fd70 	bl	800050c <__aeabi_dmul>
 8015a2c:	a374      	add	r3, pc, #464	; (adr r3, 8015c00 <__ieee754_pow+0x6e8>)
 8015a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a32:	f7ea fbb5 	bl	80001a0 <__adddf3>
 8015a36:	4622      	mov	r2, r4
 8015a38:	462b      	mov	r3, r5
 8015a3a:	f7ea fd67 	bl	800050c <__aeabi_dmul>
 8015a3e:	a372      	add	r3, pc, #456	; (adr r3, 8015c08 <__ieee754_pow+0x6f0>)
 8015a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a44:	f7ea fbac 	bl	80001a0 <__adddf3>
 8015a48:	4622      	mov	r2, r4
 8015a4a:	462b      	mov	r3, r5
 8015a4c:	f7ea fd5e 	bl	800050c <__aeabi_dmul>
 8015a50:	a36f      	add	r3, pc, #444	; (adr r3, 8015c10 <__ieee754_pow+0x6f8>)
 8015a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a56:	f7ea fba3 	bl	80001a0 <__adddf3>
 8015a5a:	4622      	mov	r2, r4
 8015a5c:	4606      	mov	r6, r0
 8015a5e:	460f      	mov	r7, r1
 8015a60:	462b      	mov	r3, r5
 8015a62:	4620      	mov	r0, r4
 8015a64:	4629      	mov	r1, r5
 8015a66:	f7ea fd51 	bl	800050c <__aeabi_dmul>
 8015a6a:	4602      	mov	r2, r0
 8015a6c:	460b      	mov	r3, r1
 8015a6e:	4630      	mov	r0, r6
 8015a70:	4639      	mov	r1, r7
 8015a72:	f7ea fd4b 	bl	800050c <__aeabi_dmul>
 8015a76:	4642      	mov	r2, r8
 8015a78:	4604      	mov	r4, r0
 8015a7a:	460d      	mov	r5, r1
 8015a7c:	464b      	mov	r3, r9
 8015a7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015a82:	f7ea fb8d 	bl	80001a0 <__adddf3>
 8015a86:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015a8a:	f7ea fd3f 	bl	800050c <__aeabi_dmul>
 8015a8e:	4622      	mov	r2, r4
 8015a90:	462b      	mov	r3, r5
 8015a92:	f7ea fb85 	bl	80001a0 <__adddf3>
 8015a96:	4642      	mov	r2, r8
 8015a98:	4606      	mov	r6, r0
 8015a9a:	460f      	mov	r7, r1
 8015a9c:	464b      	mov	r3, r9
 8015a9e:	4640      	mov	r0, r8
 8015aa0:	4649      	mov	r1, r9
 8015aa2:	f7ea fd33 	bl	800050c <__aeabi_dmul>
 8015aa6:	2200      	movs	r2, #0
 8015aa8:	4b68      	ldr	r3, [pc, #416]	; (8015c4c <__ieee754_pow+0x734>)
 8015aaa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8015aae:	f7ea fb77 	bl	80001a0 <__adddf3>
 8015ab2:	4632      	mov	r2, r6
 8015ab4:	463b      	mov	r3, r7
 8015ab6:	f7ea fb73 	bl	80001a0 <__adddf3>
 8015aba:	9802      	ldr	r0, [sp, #8]
 8015abc:	460d      	mov	r5, r1
 8015abe:	4604      	mov	r4, r0
 8015ac0:	4602      	mov	r2, r0
 8015ac2:	460b      	mov	r3, r1
 8015ac4:	4640      	mov	r0, r8
 8015ac6:	4649      	mov	r1, r9
 8015ac8:	f7ea fd20 	bl	800050c <__aeabi_dmul>
 8015acc:	2200      	movs	r2, #0
 8015ace:	4680      	mov	r8, r0
 8015ad0:	4689      	mov	r9, r1
 8015ad2:	4b5e      	ldr	r3, [pc, #376]	; (8015c4c <__ieee754_pow+0x734>)
 8015ad4:	4620      	mov	r0, r4
 8015ad6:	4629      	mov	r1, r5
 8015ad8:	f7ea fb60 	bl	800019c <__aeabi_dsub>
 8015adc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8015ae0:	f7ea fb5c 	bl	800019c <__aeabi_dsub>
 8015ae4:	4602      	mov	r2, r0
 8015ae6:	460b      	mov	r3, r1
 8015ae8:	4630      	mov	r0, r6
 8015aea:	4639      	mov	r1, r7
 8015aec:	f7ea fb56 	bl	800019c <__aeabi_dsub>
 8015af0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015af4:	f7ea fd0a 	bl	800050c <__aeabi_dmul>
 8015af8:	4622      	mov	r2, r4
 8015afa:	4606      	mov	r6, r0
 8015afc:	460f      	mov	r7, r1
 8015afe:	462b      	mov	r3, r5
 8015b00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015b04:	f7ea fd02 	bl	800050c <__aeabi_dmul>
 8015b08:	4602      	mov	r2, r0
 8015b0a:	460b      	mov	r3, r1
 8015b0c:	4630      	mov	r0, r6
 8015b0e:	4639      	mov	r1, r7
 8015b10:	f7ea fb46 	bl	80001a0 <__adddf3>
 8015b14:	4606      	mov	r6, r0
 8015b16:	460f      	mov	r7, r1
 8015b18:	4602      	mov	r2, r0
 8015b1a:	460b      	mov	r3, r1
 8015b1c:	4640      	mov	r0, r8
 8015b1e:	4649      	mov	r1, r9
 8015b20:	f7ea fb3e 	bl	80001a0 <__adddf3>
 8015b24:	9802      	ldr	r0, [sp, #8]
 8015b26:	a33c      	add	r3, pc, #240	; (adr r3, 8015c18 <__ieee754_pow+0x700>)
 8015b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b2c:	4604      	mov	r4, r0
 8015b2e:	460d      	mov	r5, r1
 8015b30:	f7ea fcec 	bl	800050c <__aeabi_dmul>
 8015b34:	4642      	mov	r2, r8
 8015b36:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015b3a:	464b      	mov	r3, r9
 8015b3c:	4620      	mov	r0, r4
 8015b3e:	4629      	mov	r1, r5
 8015b40:	f7ea fb2c 	bl	800019c <__aeabi_dsub>
 8015b44:	4602      	mov	r2, r0
 8015b46:	460b      	mov	r3, r1
 8015b48:	4630      	mov	r0, r6
 8015b4a:	4639      	mov	r1, r7
 8015b4c:	f7ea fb26 	bl	800019c <__aeabi_dsub>
 8015b50:	a333      	add	r3, pc, #204	; (adr r3, 8015c20 <__ieee754_pow+0x708>)
 8015b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b56:	f7ea fcd9 	bl	800050c <__aeabi_dmul>
 8015b5a:	a333      	add	r3, pc, #204	; (adr r3, 8015c28 <__ieee754_pow+0x710>)
 8015b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b60:	4606      	mov	r6, r0
 8015b62:	460f      	mov	r7, r1
 8015b64:	4620      	mov	r0, r4
 8015b66:	4629      	mov	r1, r5
 8015b68:	f7ea fcd0 	bl	800050c <__aeabi_dmul>
 8015b6c:	4602      	mov	r2, r0
 8015b6e:	460b      	mov	r3, r1
 8015b70:	4630      	mov	r0, r6
 8015b72:	4639      	mov	r1, r7
 8015b74:	f7ea fb14 	bl	80001a0 <__adddf3>
 8015b78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015b7a:	4b35      	ldr	r3, [pc, #212]	; (8015c50 <__ieee754_pow+0x738>)
 8015b7c:	4413      	add	r3, r2
 8015b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b82:	f7ea fb0d 	bl	80001a0 <__adddf3>
 8015b86:	4604      	mov	r4, r0
 8015b88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015b8a:	460d      	mov	r5, r1
 8015b8c:	f7ea fc54 	bl	8000438 <__aeabi_i2d>
 8015b90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015b92:	4b30      	ldr	r3, [pc, #192]	; (8015c54 <__ieee754_pow+0x73c>)
 8015b94:	4413      	add	r3, r2
 8015b96:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015b9a:	4606      	mov	r6, r0
 8015b9c:	460f      	mov	r7, r1
 8015b9e:	4622      	mov	r2, r4
 8015ba0:	462b      	mov	r3, r5
 8015ba2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015ba6:	f7ea fafb 	bl	80001a0 <__adddf3>
 8015baa:	4642      	mov	r2, r8
 8015bac:	464b      	mov	r3, r9
 8015bae:	f7ea faf7 	bl	80001a0 <__adddf3>
 8015bb2:	4632      	mov	r2, r6
 8015bb4:	463b      	mov	r3, r7
 8015bb6:	f7ea faf3 	bl	80001a0 <__adddf3>
 8015bba:	9802      	ldr	r0, [sp, #8]
 8015bbc:	4632      	mov	r2, r6
 8015bbe:	463b      	mov	r3, r7
 8015bc0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015bc4:	f7ea faea 	bl	800019c <__aeabi_dsub>
 8015bc8:	4642      	mov	r2, r8
 8015bca:	464b      	mov	r3, r9
 8015bcc:	f7ea fae6 	bl	800019c <__aeabi_dsub>
 8015bd0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015bd4:	e607      	b.n	80157e6 <__ieee754_pow+0x2ce>
 8015bd6:	f04f 0a01 	mov.w	sl, #1
 8015bda:	e6a5      	b.n	8015928 <__ieee754_pow+0x410>
 8015bdc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8015c30 <__ieee754_pow+0x718>
 8015be0:	e613      	b.n	801580a <__ieee754_pow+0x2f2>
 8015be2:	bf00      	nop
 8015be4:	f3af 8000 	nop.w
 8015be8:	4a454eef 	.word	0x4a454eef
 8015bec:	3fca7e28 	.word	0x3fca7e28
 8015bf0:	93c9db65 	.word	0x93c9db65
 8015bf4:	3fcd864a 	.word	0x3fcd864a
 8015bf8:	a91d4101 	.word	0xa91d4101
 8015bfc:	3fd17460 	.word	0x3fd17460
 8015c00:	518f264d 	.word	0x518f264d
 8015c04:	3fd55555 	.word	0x3fd55555
 8015c08:	db6fabff 	.word	0xdb6fabff
 8015c0c:	3fdb6db6 	.word	0x3fdb6db6
 8015c10:	33333303 	.word	0x33333303
 8015c14:	3fe33333 	.word	0x3fe33333
 8015c18:	e0000000 	.word	0xe0000000
 8015c1c:	3feec709 	.word	0x3feec709
 8015c20:	dc3a03fd 	.word	0xdc3a03fd
 8015c24:	3feec709 	.word	0x3feec709
 8015c28:	145b01f5 	.word	0x145b01f5
 8015c2c:	be3e2fe0 	.word	0xbe3e2fe0
 8015c30:	00000000 	.word	0x00000000
 8015c34:	3ff00000 	.word	0x3ff00000
 8015c38:	43400000 	.word	0x43400000
 8015c3c:	0003988e 	.word	0x0003988e
 8015c40:	000bb679 	.word	0x000bb679
 8015c44:	08017460 	.word	0x08017460
 8015c48:	3ff00000 	.word	0x3ff00000
 8015c4c:	40080000 	.word	0x40080000
 8015c50:	08017480 	.word	0x08017480
 8015c54:	08017470 	.word	0x08017470
 8015c58:	a3b4      	add	r3, pc, #720	; (adr r3, 8015f2c <__ieee754_pow+0xa14>)
 8015c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c5e:	4640      	mov	r0, r8
 8015c60:	4649      	mov	r1, r9
 8015c62:	f7ea fa9d 	bl	80001a0 <__adddf3>
 8015c66:	4622      	mov	r2, r4
 8015c68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015c6c:	462b      	mov	r3, r5
 8015c6e:	4630      	mov	r0, r6
 8015c70:	4639      	mov	r1, r7
 8015c72:	f7ea fa93 	bl	800019c <__aeabi_dsub>
 8015c76:	4602      	mov	r2, r0
 8015c78:	460b      	mov	r3, r1
 8015c7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015c7e:	f7ea fed5 	bl	8000a2c <__aeabi_dcmpgt>
 8015c82:	2800      	cmp	r0, #0
 8015c84:	f47f adfe 	bne.w	8015884 <__ieee754_pow+0x36c>
 8015c88:	4aa3      	ldr	r2, [pc, #652]	; (8015f18 <__ieee754_pow+0xa00>)
 8015c8a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015c8e:	4293      	cmp	r3, r2
 8015c90:	f340 810a 	ble.w	8015ea8 <__ieee754_pow+0x990>
 8015c94:	151b      	asrs	r3, r3, #20
 8015c96:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8015c9a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8015c9e:	fa4a f303 	asr.w	r3, sl, r3
 8015ca2:	445b      	add	r3, fp
 8015ca4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8015ca8:	4e9c      	ldr	r6, [pc, #624]	; (8015f1c <__ieee754_pow+0xa04>)
 8015caa:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8015cae:	4116      	asrs	r6, r2
 8015cb0:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8015cb4:	2000      	movs	r0, #0
 8015cb6:	ea23 0106 	bic.w	r1, r3, r6
 8015cba:	f1c2 0214 	rsb	r2, r2, #20
 8015cbe:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8015cc2:	fa4a fa02 	asr.w	sl, sl, r2
 8015cc6:	f1bb 0f00 	cmp.w	fp, #0
 8015cca:	4602      	mov	r2, r0
 8015ccc:	460b      	mov	r3, r1
 8015cce:	4620      	mov	r0, r4
 8015cd0:	4629      	mov	r1, r5
 8015cd2:	bfb8      	it	lt
 8015cd4:	f1ca 0a00 	rsblt	sl, sl, #0
 8015cd8:	f7ea fa60 	bl	800019c <__aeabi_dsub>
 8015cdc:	e9cd 0100 	strd	r0, r1, [sp]
 8015ce0:	4642      	mov	r2, r8
 8015ce2:	464b      	mov	r3, r9
 8015ce4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015ce8:	f7ea fa5a 	bl	80001a0 <__adddf3>
 8015cec:	2000      	movs	r0, #0
 8015cee:	a378      	add	r3, pc, #480	; (adr r3, 8015ed0 <__ieee754_pow+0x9b8>)
 8015cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cf4:	4604      	mov	r4, r0
 8015cf6:	460d      	mov	r5, r1
 8015cf8:	f7ea fc08 	bl	800050c <__aeabi_dmul>
 8015cfc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015d00:	4606      	mov	r6, r0
 8015d02:	460f      	mov	r7, r1
 8015d04:	4620      	mov	r0, r4
 8015d06:	4629      	mov	r1, r5
 8015d08:	f7ea fa48 	bl	800019c <__aeabi_dsub>
 8015d0c:	4602      	mov	r2, r0
 8015d0e:	460b      	mov	r3, r1
 8015d10:	4640      	mov	r0, r8
 8015d12:	4649      	mov	r1, r9
 8015d14:	f7ea fa42 	bl	800019c <__aeabi_dsub>
 8015d18:	a36f      	add	r3, pc, #444	; (adr r3, 8015ed8 <__ieee754_pow+0x9c0>)
 8015d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d1e:	f7ea fbf5 	bl	800050c <__aeabi_dmul>
 8015d22:	a36f      	add	r3, pc, #444	; (adr r3, 8015ee0 <__ieee754_pow+0x9c8>)
 8015d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d28:	4680      	mov	r8, r0
 8015d2a:	4689      	mov	r9, r1
 8015d2c:	4620      	mov	r0, r4
 8015d2e:	4629      	mov	r1, r5
 8015d30:	f7ea fbec 	bl	800050c <__aeabi_dmul>
 8015d34:	4602      	mov	r2, r0
 8015d36:	460b      	mov	r3, r1
 8015d38:	4640      	mov	r0, r8
 8015d3a:	4649      	mov	r1, r9
 8015d3c:	f7ea fa30 	bl	80001a0 <__adddf3>
 8015d40:	4604      	mov	r4, r0
 8015d42:	460d      	mov	r5, r1
 8015d44:	4602      	mov	r2, r0
 8015d46:	460b      	mov	r3, r1
 8015d48:	4630      	mov	r0, r6
 8015d4a:	4639      	mov	r1, r7
 8015d4c:	f7ea fa28 	bl	80001a0 <__adddf3>
 8015d50:	4632      	mov	r2, r6
 8015d52:	463b      	mov	r3, r7
 8015d54:	4680      	mov	r8, r0
 8015d56:	4689      	mov	r9, r1
 8015d58:	f7ea fa20 	bl	800019c <__aeabi_dsub>
 8015d5c:	4602      	mov	r2, r0
 8015d5e:	460b      	mov	r3, r1
 8015d60:	4620      	mov	r0, r4
 8015d62:	4629      	mov	r1, r5
 8015d64:	f7ea fa1a 	bl	800019c <__aeabi_dsub>
 8015d68:	4642      	mov	r2, r8
 8015d6a:	4606      	mov	r6, r0
 8015d6c:	460f      	mov	r7, r1
 8015d6e:	464b      	mov	r3, r9
 8015d70:	4640      	mov	r0, r8
 8015d72:	4649      	mov	r1, r9
 8015d74:	f7ea fbca 	bl	800050c <__aeabi_dmul>
 8015d78:	a35b      	add	r3, pc, #364	; (adr r3, 8015ee8 <__ieee754_pow+0x9d0>)
 8015d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d7e:	4604      	mov	r4, r0
 8015d80:	460d      	mov	r5, r1
 8015d82:	f7ea fbc3 	bl	800050c <__aeabi_dmul>
 8015d86:	a35a      	add	r3, pc, #360	; (adr r3, 8015ef0 <__ieee754_pow+0x9d8>)
 8015d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d8c:	f7ea fa06 	bl	800019c <__aeabi_dsub>
 8015d90:	4622      	mov	r2, r4
 8015d92:	462b      	mov	r3, r5
 8015d94:	f7ea fbba 	bl	800050c <__aeabi_dmul>
 8015d98:	a357      	add	r3, pc, #348	; (adr r3, 8015ef8 <__ieee754_pow+0x9e0>)
 8015d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d9e:	f7ea f9ff 	bl	80001a0 <__adddf3>
 8015da2:	4622      	mov	r2, r4
 8015da4:	462b      	mov	r3, r5
 8015da6:	f7ea fbb1 	bl	800050c <__aeabi_dmul>
 8015daa:	a355      	add	r3, pc, #340	; (adr r3, 8015f00 <__ieee754_pow+0x9e8>)
 8015dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015db0:	f7ea f9f4 	bl	800019c <__aeabi_dsub>
 8015db4:	4622      	mov	r2, r4
 8015db6:	462b      	mov	r3, r5
 8015db8:	f7ea fba8 	bl	800050c <__aeabi_dmul>
 8015dbc:	a352      	add	r3, pc, #328	; (adr r3, 8015f08 <__ieee754_pow+0x9f0>)
 8015dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015dc2:	f7ea f9ed 	bl	80001a0 <__adddf3>
 8015dc6:	4622      	mov	r2, r4
 8015dc8:	462b      	mov	r3, r5
 8015dca:	f7ea fb9f 	bl	800050c <__aeabi_dmul>
 8015dce:	4602      	mov	r2, r0
 8015dd0:	460b      	mov	r3, r1
 8015dd2:	4640      	mov	r0, r8
 8015dd4:	4649      	mov	r1, r9
 8015dd6:	f7ea f9e1 	bl	800019c <__aeabi_dsub>
 8015dda:	4604      	mov	r4, r0
 8015ddc:	460d      	mov	r5, r1
 8015dde:	4602      	mov	r2, r0
 8015de0:	460b      	mov	r3, r1
 8015de2:	4640      	mov	r0, r8
 8015de4:	4649      	mov	r1, r9
 8015de6:	f7ea fb91 	bl	800050c <__aeabi_dmul>
 8015dea:	2200      	movs	r2, #0
 8015dec:	e9cd 0100 	strd	r0, r1, [sp]
 8015df0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015df4:	4620      	mov	r0, r4
 8015df6:	4629      	mov	r1, r5
 8015df8:	f7ea f9d0 	bl	800019c <__aeabi_dsub>
 8015dfc:	4602      	mov	r2, r0
 8015dfe:	460b      	mov	r3, r1
 8015e00:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015e04:	f7ea fcac 	bl	8000760 <__aeabi_ddiv>
 8015e08:	4632      	mov	r2, r6
 8015e0a:	4604      	mov	r4, r0
 8015e0c:	460d      	mov	r5, r1
 8015e0e:	463b      	mov	r3, r7
 8015e10:	4640      	mov	r0, r8
 8015e12:	4649      	mov	r1, r9
 8015e14:	f7ea fb7a 	bl	800050c <__aeabi_dmul>
 8015e18:	4632      	mov	r2, r6
 8015e1a:	463b      	mov	r3, r7
 8015e1c:	f7ea f9c0 	bl	80001a0 <__adddf3>
 8015e20:	4602      	mov	r2, r0
 8015e22:	460b      	mov	r3, r1
 8015e24:	4620      	mov	r0, r4
 8015e26:	4629      	mov	r1, r5
 8015e28:	f7ea f9b8 	bl	800019c <__aeabi_dsub>
 8015e2c:	4642      	mov	r2, r8
 8015e2e:	464b      	mov	r3, r9
 8015e30:	f7ea f9b4 	bl	800019c <__aeabi_dsub>
 8015e34:	4602      	mov	r2, r0
 8015e36:	460b      	mov	r3, r1
 8015e38:	2000      	movs	r0, #0
 8015e3a:	4939      	ldr	r1, [pc, #228]	; (8015f20 <__ieee754_pow+0xa08>)
 8015e3c:	f7ea f9ae 	bl	800019c <__aeabi_dsub>
 8015e40:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8015e44:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8015e48:	4602      	mov	r2, r0
 8015e4a:	460b      	mov	r3, r1
 8015e4c:	da2f      	bge.n	8015eae <__ieee754_pow+0x996>
 8015e4e:	4650      	mov	r0, sl
 8015e50:	ec43 2b10 	vmov	d0, r2, r3
 8015e54:	f000 f9c0 	bl	80161d8 <scalbn>
 8015e58:	ec51 0b10 	vmov	r0, r1, d0
 8015e5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015e60:	f7ff bbf1 	b.w	8015646 <__ieee754_pow+0x12e>
 8015e64:	4b2f      	ldr	r3, [pc, #188]	; (8015f24 <__ieee754_pow+0xa0c>)
 8015e66:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8015e6a:	429e      	cmp	r6, r3
 8015e6c:	f77f af0c 	ble.w	8015c88 <__ieee754_pow+0x770>
 8015e70:	4b2d      	ldr	r3, [pc, #180]	; (8015f28 <__ieee754_pow+0xa10>)
 8015e72:	440b      	add	r3, r1
 8015e74:	4303      	orrs	r3, r0
 8015e76:	d00b      	beq.n	8015e90 <__ieee754_pow+0x978>
 8015e78:	a325      	add	r3, pc, #148	; (adr r3, 8015f10 <__ieee754_pow+0x9f8>)
 8015e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015e82:	f7ea fb43 	bl	800050c <__aeabi_dmul>
 8015e86:	a322      	add	r3, pc, #136	; (adr r3, 8015f10 <__ieee754_pow+0x9f8>)
 8015e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e8c:	f7ff bbdb 	b.w	8015646 <__ieee754_pow+0x12e>
 8015e90:	4622      	mov	r2, r4
 8015e92:	462b      	mov	r3, r5
 8015e94:	f7ea f982 	bl	800019c <__aeabi_dsub>
 8015e98:	4642      	mov	r2, r8
 8015e9a:	464b      	mov	r3, r9
 8015e9c:	f7ea fdbc 	bl	8000a18 <__aeabi_dcmpge>
 8015ea0:	2800      	cmp	r0, #0
 8015ea2:	f43f aef1 	beq.w	8015c88 <__ieee754_pow+0x770>
 8015ea6:	e7e7      	b.n	8015e78 <__ieee754_pow+0x960>
 8015ea8:	f04f 0a00 	mov.w	sl, #0
 8015eac:	e718      	b.n	8015ce0 <__ieee754_pow+0x7c8>
 8015eae:	4621      	mov	r1, r4
 8015eb0:	e7d4      	b.n	8015e5c <__ieee754_pow+0x944>
 8015eb2:	2000      	movs	r0, #0
 8015eb4:	491a      	ldr	r1, [pc, #104]	; (8015f20 <__ieee754_pow+0xa08>)
 8015eb6:	f7ff bb8f 	b.w	80155d8 <__ieee754_pow+0xc0>
 8015eba:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015ebe:	f7ff bb8b 	b.w	80155d8 <__ieee754_pow+0xc0>
 8015ec2:	4630      	mov	r0, r6
 8015ec4:	4639      	mov	r1, r7
 8015ec6:	f7ff bb87 	b.w	80155d8 <__ieee754_pow+0xc0>
 8015eca:	4693      	mov	fp, r2
 8015ecc:	f7ff bb98 	b.w	8015600 <__ieee754_pow+0xe8>
 8015ed0:	00000000 	.word	0x00000000
 8015ed4:	3fe62e43 	.word	0x3fe62e43
 8015ed8:	fefa39ef 	.word	0xfefa39ef
 8015edc:	3fe62e42 	.word	0x3fe62e42
 8015ee0:	0ca86c39 	.word	0x0ca86c39
 8015ee4:	be205c61 	.word	0xbe205c61
 8015ee8:	72bea4d0 	.word	0x72bea4d0
 8015eec:	3e663769 	.word	0x3e663769
 8015ef0:	c5d26bf1 	.word	0xc5d26bf1
 8015ef4:	3ebbbd41 	.word	0x3ebbbd41
 8015ef8:	af25de2c 	.word	0xaf25de2c
 8015efc:	3f11566a 	.word	0x3f11566a
 8015f00:	16bebd93 	.word	0x16bebd93
 8015f04:	3f66c16c 	.word	0x3f66c16c
 8015f08:	5555553e 	.word	0x5555553e
 8015f0c:	3fc55555 	.word	0x3fc55555
 8015f10:	c2f8f359 	.word	0xc2f8f359
 8015f14:	01a56e1f 	.word	0x01a56e1f
 8015f18:	3fe00000 	.word	0x3fe00000
 8015f1c:	000fffff 	.word	0x000fffff
 8015f20:	3ff00000 	.word	0x3ff00000
 8015f24:	4090cbff 	.word	0x4090cbff
 8015f28:	3f6f3400 	.word	0x3f6f3400
 8015f2c:	652b82fe 	.word	0x652b82fe
 8015f30:	3c971547 	.word	0x3c971547

08015f34 <__ieee754_sqrt>:
 8015f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f38:	4955      	ldr	r1, [pc, #340]	; (8016090 <__ieee754_sqrt+0x15c>)
 8015f3a:	ec55 4b10 	vmov	r4, r5, d0
 8015f3e:	43a9      	bics	r1, r5
 8015f40:	462b      	mov	r3, r5
 8015f42:	462a      	mov	r2, r5
 8015f44:	d112      	bne.n	8015f6c <__ieee754_sqrt+0x38>
 8015f46:	ee10 2a10 	vmov	r2, s0
 8015f4a:	ee10 0a10 	vmov	r0, s0
 8015f4e:	4629      	mov	r1, r5
 8015f50:	f7ea fadc 	bl	800050c <__aeabi_dmul>
 8015f54:	4602      	mov	r2, r0
 8015f56:	460b      	mov	r3, r1
 8015f58:	4620      	mov	r0, r4
 8015f5a:	4629      	mov	r1, r5
 8015f5c:	f7ea f920 	bl	80001a0 <__adddf3>
 8015f60:	4604      	mov	r4, r0
 8015f62:	460d      	mov	r5, r1
 8015f64:	ec45 4b10 	vmov	d0, r4, r5
 8015f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f6c:	2d00      	cmp	r5, #0
 8015f6e:	ee10 0a10 	vmov	r0, s0
 8015f72:	4621      	mov	r1, r4
 8015f74:	dc0f      	bgt.n	8015f96 <__ieee754_sqrt+0x62>
 8015f76:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8015f7a:	4330      	orrs	r0, r6
 8015f7c:	d0f2      	beq.n	8015f64 <__ieee754_sqrt+0x30>
 8015f7e:	b155      	cbz	r5, 8015f96 <__ieee754_sqrt+0x62>
 8015f80:	ee10 2a10 	vmov	r2, s0
 8015f84:	4620      	mov	r0, r4
 8015f86:	4629      	mov	r1, r5
 8015f88:	f7ea f908 	bl	800019c <__aeabi_dsub>
 8015f8c:	4602      	mov	r2, r0
 8015f8e:	460b      	mov	r3, r1
 8015f90:	f7ea fbe6 	bl	8000760 <__aeabi_ddiv>
 8015f94:	e7e4      	b.n	8015f60 <__ieee754_sqrt+0x2c>
 8015f96:	151b      	asrs	r3, r3, #20
 8015f98:	d073      	beq.n	8016082 <__ieee754_sqrt+0x14e>
 8015f9a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8015f9e:	07dd      	lsls	r5, r3, #31
 8015fa0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8015fa4:	bf48      	it	mi
 8015fa6:	0fc8      	lsrmi	r0, r1, #31
 8015fa8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8015fac:	bf44      	itt	mi
 8015fae:	0049      	lslmi	r1, r1, #1
 8015fb0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8015fb4:	2500      	movs	r5, #0
 8015fb6:	1058      	asrs	r0, r3, #1
 8015fb8:	0fcb      	lsrs	r3, r1, #31
 8015fba:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8015fbe:	0049      	lsls	r1, r1, #1
 8015fc0:	2316      	movs	r3, #22
 8015fc2:	462c      	mov	r4, r5
 8015fc4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8015fc8:	19a7      	adds	r7, r4, r6
 8015fca:	4297      	cmp	r7, r2
 8015fcc:	bfde      	ittt	le
 8015fce:	19bc      	addle	r4, r7, r6
 8015fd0:	1bd2      	suble	r2, r2, r7
 8015fd2:	19ad      	addle	r5, r5, r6
 8015fd4:	0fcf      	lsrs	r7, r1, #31
 8015fd6:	3b01      	subs	r3, #1
 8015fd8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8015fdc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8015fe0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8015fe4:	d1f0      	bne.n	8015fc8 <__ieee754_sqrt+0x94>
 8015fe6:	f04f 0c20 	mov.w	ip, #32
 8015fea:	469e      	mov	lr, r3
 8015fec:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8015ff0:	42a2      	cmp	r2, r4
 8015ff2:	eb06 070e 	add.w	r7, r6, lr
 8015ff6:	dc02      	bgt.n	8015ffe <__ieee754_sqrt+0xca>
 8015ff8:	d112      	bne.n	8016020 <__ieee754_sqrt+0xec>
 8015ffa:	428f      	cmp	r7, r1
 8015ffc:	d810      	bhi.n	8016020 <__ieee754_sqrt+0xec>
 8015ffe:	2f00      	cmp	r7, #0
 8016000:	eb07 0e06 	add.w	lr, r7, r6
 8016004:	da42      	bge.n	801608c <__ieee754_sqrt+0x158>
 8016006:	f1be 0f00 	cmp.w	lr, #0
 801600a:	db3f      	blt.n	801608c <__ieee754_sqrt+0x158>
 801600c:	f104 0801 	add.w	r8, r4, #1
 8016010:	1b12      	subs	r2, r2, r4
 8016012:	428f      	cmp	r7, r1
 8016014:	bf88      	it	hi
 8016016:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801601a:	1bc9      	subs	r1, r1, r7
 801601c:	4433      	add	r3, r6
 801601e:	4644      	mov	r4, r8
 8016020:	0052      	lsls	r2, r2, #1
 8016022:	f1bc 0c01 	subs.w	ip, ip, #1
 8016026:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801602a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801602e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8016032:	d1dd      	bne.n	8015ff0 <__ieee754_sqrt+0xbc>
 8016034:	430a      	orrs	r2, r1
 8016036:	d006      	beq.n	8016046 <__ieee754_sqrt+0x112>
 8016038:	1c5c      	adds	r4, r3, #1
 801603a:	bf13      	iteet	ne
 801603c:	3301      	addne	r3, #1
 801603e:	3501      	addeq	r5, #1
 8016040:	4663      	moveq	r3, ip
 8016042:	f023 0301 	bicne.w	r3, r3, #1
 8016046:	106a      	asrs	r2, r5, #1
 8016048:	085b      	lsrs	r3, r3, #1
 801604a:	07e9      	lsls	r1, r5, #31
 801604c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8016050:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8016054:	bf48      	it	mi
 8016056:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801605a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801605e:	461c      	mov	r4, r3
 8016060:	e780      	b.n	8015f64 <__ieee754_sqrt+0x30>
 8016062:	0aca      	lsrs	r2, r1, #11
 8016064:	3815      	subs	r0, #21
 8016066:	0549      	lsls	r1, r1, #21
 8016068:	2a00      	cmp	r2, #0
 801606a:	d0fa      	beq.n	8016062 <__ieee754_sqrt+0x12e>
 801606c:	02d6      	lsls	r6, r2, #11
 801606e:	d50a      	bpl.n	8016086 <__ieee754_sqrt+0x152>
 8016070:	f1c3 0420 	rsb	r4, r3, #32
 8016074:	fa21 f404 	lsr.w	r4, r1, r4
 8016078:	1e5d      	subs	r5, r3, #1
 801607a:	4099      	lsls	r1, r3
 801607c:	4322      	orrs	r2, r4
 801607e:	1b43      	subs	r3, r0, r5
 8016080:	e78b      	b.n	8015f9a <__ieee754_sqrt+0x66>
 8016082:	4618      	mov	r0, r3
 8016084:	e7f0      	b.n	8016068 <__ieee754_sqrt+0x134>
 8016086:	0052      	lsls	r2, r2, #1
 8016088:	3301      	adds	r3, #1
 801608a:	e7ef      	b.n	801606c <__ieee754_sqrt+0x138>
 801608c:	46a0      	mov	r8, r4
 801608e:	e7bf      	b.n	8016010 <__ieee754_sqrt+0xdc>
 8016090:	7ff00000 	.word	0x7ff00000

08016094 <__ieee754_sqrtf>:
 8016094:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8016098:	4770      	bx	lr

0801609a <fabs>:
 801609a:	ec51 0b10 	vmov	r0, r1, d0
 801609e:	ee10 2a10 	vmov	r2, s0
 80160a2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80160a6:	ec43 2b10 	vmov	d0, r2, r3
 80160aa:	4770      	bx	lr

080160ac <finite>:
 80160ac:	ee10 3a90 	vmov	r3, s1
 80160b0:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 80160b4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80160b8:	0fc0      	lsrs	r0, r0, #31
 80160ba:	4770      	bx	lr

080160bc <matherr>:
 80160bc:	2000      	movs	r0, #0
 80160be:	4770      	bx	lr

080160c0 <nan>:
 80160c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80160c8 <nan+0x8>
 80160c4:	4770      	bx	lr
 80160c6:	bf00      	nop
 80160c8:	00000000 	.word	0x00000000
 80160cc:	7ff80000 	.word	0x7ff80000

080160d0 <rint>:
 80160d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80160d2:	ec51 0b10 	vmov	r0, r1, d0
 80160d6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80160da:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80160de:	2e13      	cmp	r6, #19
 80160e0:	460b      	mov	r3, r1
 80160e2:	ee10 4a10 	vmov	r4, s0
 80160e6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80160ea:	dc56      	bgt.n	801619a <rint+0xca>
 80160ec:	2e00      	cmp	r6, #0
 80160ee:	da2b      	bge.n	8016148 <rint+0x78>
 80160f0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80160f4:	4302      	orrs	r2, r0
 80160f6:	d023      	beq.n	8016140 <rint+0x70>
 80160f8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80160fc:	4302      	orrs	r2, r0
 80160fe:	4254      	negs	r4, r2
 8016100:	4314      	orrs	r4, r2
 8016102:	0c4b      	lsrs	r3, r1, #17
 8016104:	0b24      	lsrs	r4, r4, #12
 8016106:	045b      	lsls	r3, r3, #17
 8016108:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801610c:	ea44 0103 	orr.w	r1, r4, r3
 8016110:	460b      	mov	r3, r1
 8016112:	492f      	ldr	r1, [pc, #188]	; (80161d0 <rint+0x100>)
 8016114:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8016118:	e9d1 6700 	ldrd	r6, r7, [r1]
 801611c:	4602      	mov	r2, r0
 801611e:	4639      	mov	r1, r7
 8016120:	4630      	mov	r0, r6
 8016122:	f7ea f83d 	bl	80001a0 <__adddf3>
 8016126:	e9cd 0100 	strd	r0, r1, [sp]
 801612a:	463b      	mov	r3, r7
 801612c:	4632      	mov	r2, r6
 801612e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016132:	f7ea f833 	bl	800019c <__aeabi_dsub>
 8016136:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801613a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801613e:	4639      	mov	r1, r7
 8016140:	ec41 0b10 	vmov	d0, r0, r1
 8016144:	b003      	add	sp, #12
 8016146:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016148:	4a22      	ldr	r2, [pc, #136]	; (80161d4 <rint+0x104>)
 801614a:	4132      	asrs	r2, r6
 801614c:	ea01 0702 	and.w	r7, r1, r2
 8016150:	4307      	orrs	r7, r0
 8016152:	d0f5      	beq.n	8016140 <rint+0x70>
 8016154:	0852      	lsrs	r2, r2, #1
 8016156:	4011      	ands	r1, r2
 8016158:	430c      	orrs	r4, r1
 801615a:	d00b      	beq.n	8016174 <rint+0xa4>
 801615c:	ea23 0202 	bic.w	r2, r3, r2
 8016160:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8016164:	2e13      	cmp	r6, #19
 8016166:	fa43 f306 	asr.w	r3, r3, r6
 801616a:	bf0c      	ite	eq
 801616c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8016170:	2400      	movne	r4, #0
 8016172:	4313      	orrs	r3, r2
 8016174:	4916      	ldr	r1, [pc, #88]	; (80161d0 <rint+0x100>)
 8016176:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801617a:	4622      	mov	r2, r4
 801617c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8016180:	4620      	mov	r0, r4
 8016182:	4629      	mov	r1, r5
 8016184:	f7ea f80c 	bl	80001a0 <__adddf3>
 8016188:	e9cd 0100 	strd	r0, r1, [sp]
 801618c:	4622      	mov	r2, r4
 801618e:	462b      	mov	r3, r5
 8016190:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016194:	f7ea f802 	bl	800019c <__aeabi_dsub>
 8016198:	e7d2      	b.n	8016140 <rint+0x70>
 801619a:	2e33      	cmp	r6, #51	; 0x33
 801619c:	dd07      	ble.n	80161ae <rint+0xde>
 801619e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80161a2:	d1cd      	bne.n	8016140 <rint+0x70>
 80161a4:	ee10 2a10 	vmov	r2, s0
 80161a8:	f7e9 fffa 	bl	80001a0 <__adddf3>
 80161ac:	e7c8      	b.n	8016140 <rint+0x70>
 80161ae:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 80161b2:	f04f 32ff 	mov.w	r2, #4294967295
 80161b6:	40f2      	lsrs	r2, r6
 80161b8:	4210      	tst	r0, r2
 80161ba:	d0c1      	beq.n	8016140 <rint+0x70>
 80161bc:	0852      	lsrs	r2, r2, #1
 80161be:	4210      	tst	r0, r2
 80161c0:	bf1f      	itttt	ne
 80161c2:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80161c6:	ea20 0202 	bicne.w	r2, r0, r2
 80161ca:	4134      	asrne	r4, r6
 80161cc:	4314      	orrne	r4, r2
 80161ce:	e7d1      	b.n	8016174 <rint+0xa4>
 80161d0:	08017490 	.word	0x08017490
 80161d4:	000fffff 	.word	0x000fffff

080161d8 <scalbn>:
 80161d8:	b570      	push	{r4, r5, r6, lr}
 80161da:	ec55 4b10 	vmov	r4, r5, d0
 80161de:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80161e2:	4606      	mov	r6, r0
 80161e4:	462b      	mov	r3, r5
 80161e6:	b9aa      	cbnz	r2, 8016214 <scalbn+0x3c>
 80161e8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80161ec:	4323      	orrs	r3, r4
 80161ee:	d03b      	beq.n	8016268 <scalbn+0x90>
 80161f0:	4b31      	ldr	r3, [pc, #196]	; (80162b8 <scalbn+0xe0>)
 80161f2:	4629      	mov	r1, r5
 80161f4:	2200      	movs	r2, #0
 80161f6:	ee10 0a10 	vmov	r0, s0
 80161fa:	f7ea f987 	bl	800050c <__aeabi_dmul>
 80161fe:	4b2f      	ldr	r3, [pc, #188]	; (80162bc <scalbn+0xe4>)
 8016200:	429e      	cmp	r6, r3
 8016202:	4604      	mov	r4, r0
 8016204:	460d      	mov	r5, r1
 8016206:	da12      	bge.n	801622e <scalbn+0x56>
 8016208:	a327      	add	r3, pc, #156	; (adr r3, 80162a8 <scalbn+0xd0>)
 801620a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801620e:	f7ea f97d 	bl	800050c <__aeabi_dmul>
 8016212:	e009      	b.n	8016228 <scalbn+0x50>
 8016214:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8016218:	428a      	cmp	r2, r1
 801621a:	d10c      	bne.n	8016236 <scalbn+0x5e>
 801621c:	ee10 2a10 	vmov	r2, s0
 8016220:	4620      	mov	r0, r4
 8016222:	4629      	mov	r1, r5
 8016224:	f7e9 ffbc 	bl	80001a0 <__adddf3>
 8016228:	4604      	mov	r4, r0
 801622a:	460d      	mov	r5, r1
 801622c:	e01c      	b.n	8016268 <scalbn+0x90>
 801622e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8016232:	460b      	mov	r3, r1
 8016234:	3a36      	subs	r2, #54	; 0x36
 8016236:	4432      	add	r2, r6
 8016238:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801623c:	428a      	cmp	r2, r1
 801623e:	dd0b      	ble.n	8016258 <scalbn+0x80>
 8016240:	ec45 4b11 	vmov	d1, r4, r5
 8016244:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80162b0 <scalbn+0xd8>
 8016248:	f000 f83c 	bl	80162c4 <copysign>
 801624c:	a318      	add	r3, pc, #96	; (adr r3, 80162b0 <scalbn+0xd8>)
 801624e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016252:	ec51 0b10 	vmov	r0, r1, d0
 8016256:	e7da      	b.n	801620e <scalbn+0x36>
 8016258:	2a00      	cmp	r2, #0
 801625a:	dd08      	ble.n	801626e <scalbn+0x96>
 801625c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8016260:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8016264:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8016268:	ec45 4b10 	vmov	d0, r4, r5
 801626c:	bd70      	pop	{r4, r5, r6, pc}
 801626e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8016272:	da0d      	bge.n	8016290 <scalbn+0xb8>
 8016274:	f24c 3350 	movw	r3, #50000	; 0xc350
 8016278:	429e      	cmp	r6, r3
 801627a:	ec45 4b11 	vmov	d1, r4, r5
 801627e:	dce1      	bgt.n	8016244 <scalbn+0x6c>
 8016280:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80162a8 <scalbn+0xd0>
 8016284:	f000 f81e 	bl	80162c4 <copysign>
 8016288:	a307      	add	r3, pc, #28	; (adr r3, 80162a8 <scalbn+0xd0>)
 801628a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801628e:	e7e0      	b.n	8016252 <scalbn+0x7a>
 8016290:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8016294:	3236      	adds	r2, #54	; 0x36
 8016296:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801629a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801629e:	4620      	mov	r0, r4
 80162a0:	4629      	mov	r1, r5
 80162a2:	2200      	movs	r2, #0
 80162a4:	4b06      	ldr	r3, [pc, #24]	; (80162c0 <scalbn+0xe8>)
 80162a6:	e7b2      	b.n	801620e <scalbn+0x36>
 80162a8:	c2f8f359 	.word	0xc2f8f359
 80162ac:	01a56e1f 	.word	0x01a56e1f
 80162b0:	8800759c 	.word	0x8800759c
 80162b4:	7e37e43c 	.word	0x7e37e43c
 80162b8:	43500000 	.word	0x43500000
 80162bc:	ffff3cb0 	.word	0xffff3cb0
 80162c0:	3c900000 	.word	0x3c900000

080162c4 <copysign>:
 80162c4:	ec51 0b10 	vmov	r0, r1, d0
 80162c8:	ee11 0a90 	vmov	r0, s3
 80162cc:	ee10 2a10 	vmov	r2, s0
 80162d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80162d4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80162d8:	ea41 0300 	orr.w	r3, r1, r0
 80162dc:	ec43 2b10 	vmov	d0, r2, r3
 80162e0:	4770      	bx	lr
	...

080162e4 <_init>:
 80162e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80162e6:	bf00      	nop
 80162e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80162ea:	bc08      	pop	{r3}
 80162ec:	469e      	mov	lr, r3
 80162ee:	4770      	bx	lr

080162f0 <_fini>:
 80162f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80162f2:	bf00      	nop
 80162f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80162f6:	bc08      	pop	{r3}
 80162f8:	469e      	mov	lr, r3
 80162fa:	4770      	bx	lr
